; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	tcpnje_pendccw:DWORD
COMM	tcpnje_kw:DWORD
_DATA	ENDS
_DATA	SEGMENT
tcpnje_immed_command DB 00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
$SG159200 DB	'IDLE', 00H
	ORG $+3
$SG159201 DB	'READ', 00H
	ORG $+3
$SG159202 DB	'WRITE', 00H
	ORG $+2
$SG159203 DB	'CONNECT', 00H
$SG159204 DB	'DIAL', 00H
	ORG $+3
$SG159205 DB	'DISABLE', 00H
$SG159206 DB	'PREPARE', 00H
$SG159207 DB	'WAIT', 00H
	ORG $+3
$SG159208 DB	'TINIT', 00H
	ORG $+2
$SG159209 DB	'CLOSED', 00H
	ORG $+1
$SG159210 DB	'SHUTDOWN', 00H
	ORG $+3
$SG159212 DB	'CLOSED', 00H
	ORG $+1
$SG159229 DB	'%s', 00H
	ORG $+1
$SG159213 DB	'TCPLISTEN', 00H
	ORG $+2
$SG159231 DB	'%s', 00H
	ORG $+1
$SG159214 DB	'TCPCONSNT', 00H
	ORG $+2
$SG159233 DB	'%s', 00H
	ORG $+1
$SG159215 DB	'TCPCONACT', 00H
	ORG $+2
$SG159235 DB	'%s', 00H
	ORG $+1
$SG159216 DB	'TCPCONPAS', 00H
	ORG $+2
$SG159237 DB	'%s', 00H
	ORG $+1
$SG159217 DB	'NJEOPNSNT', 00H
	ORG $+2
$SG159238 DB	'rto', 00H
$SG159218 DB	'NJEACKSNT', 00H
	ORG $+2
$SG159239 DB	'%s', 00H
	ORG $+1
$SG159219 DB	'NJEACKRCD', 00H
	ORG $+2
$SG159240 DB	'cto', 00H
$SG159220 DB	'NJECONPRI', 00H
	ORG $+2
$SG159241 DB	'%s', 00H
	ORG $+1
$SG159221 DB	'NJECONSEC', 00H
	ORG $+2
$SG159228 DB	'lport', 00H
	ORG $+2
$SG159230 DB	'lhost', 00H
	ORG $+2
$SG159232 DB	'rport', 00H
	ORG $+2
$SG159234 DB	'rhost', 00H
	ORG $+2
$SG159236 DB	'dial', 00H
	ORG $+3
$SG159243 DB	'%s', 00H
	ORG $+1
$SG159242 DB	'keepalive', 00H
	ORG $+2
$SG159245 DB	'%s', 00H
	ORG $+1
$SG159244 DB	'switched', 00H
	ORG $+3
$SG159246 DB	'lnode', 00H
	ORG $+2
$SG159247 DB	'%s', 00H
	ORG $+1
$SG159248 DB	'rnode', 00H
	ORG $+2
$SG159249 DB	'%s', 00H
	ORG $+1
$SG159250 DB	'debug', 00H
	ORG $+2
$SG159251 DB	'%s', 00H
	ORG $+1
$SG159252 DB	'trace', 00H
	ORG $+2
$SG159253 DB	'%s', 00H
	ORG $+1
$SG159255 DB	'%s', 00H
	ORG $+1
$SG159254 DB	'bufsize', 00H
$SG159256 DB	'listen', 00H
	ORG $+1
$SG159257 DB	'%s', 00H
	ORG $+1
$SG159259 DB	'%s', 00H
	ORG $+1
$SG159258 DB	'connect', 00H
_DATA	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
TCPNJE_OPEN DB	0d6H
	DB	0d7H
	DB	0c5H
	DB	0d5H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
TCPNJE_ACK DB	0c1H
	DB	0c3H
	DB	0d2H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
TCPNJE_NAK DB	0d5H
	DB	0c1H
	DB	0d2H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
	DB	040H
CONST	ENDS
PUBLIC	hdl_check_depends_ep
PUBLIC	hdl_define_devtypes_ep
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp_isprint:PROC
EXTRN	__imp_toupper:PROC
EXTRN	__imp__errno:PROC
EXTRN	strcmp:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_atoi:PROC
EXTRN	__imp_bind:PROC
EXTRN	__imp_connect:PROC
EXTRN	__imp_getpeername:PROC
EXTRN	__imp_getsockname:PROC
EXTRN	__imp_getsockopt:PROC
EXTRN	__imp_htons:PROC
EXTRN	__imp_inet_ntoa:PROC
EXTRN	__imp_listen:PROC
EXTRN	__imp_ntohs:PROC
EXTRN	__imp_recv:PROC
EXTRN	__imp_send:PROC
EXTRN	__imp_setsockopt:PROC
EXTRN	__imp_gethostbyname:PROC
EXTRN	__imp_getservbyname:PROC
EXTRN	__imp_WSAGetLastError:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_fthread_self:PROC
EXTRN	__imp_hthread_initialize_lock:PROC
EXTRN	__imp_hthread_obtain_lock:PROC
EXTRN	__imp_hthread_release_lock:PROC
EXTRN	__imp_hthread_initialize_condition:PROC
EXTRN	__imp_hthread_signal_condition:PROC
EXTRN	__imp_hthread_wait_condition:PROC
EXTRN	__imp_hthread_create_thread:PROC
EXTRN	__imp_strlcpy:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_socketpair:PROC
EXTRN	__imp_gettimeofday:PROC
EXTRN	__imp_usleep:PROC
EXTRN	__imp_inet_aton:PROC
EXTRN	__imp_socket_set_blocking_mode:PROC
EXTRN	__imp_socket_is_socket:PROC
EXTRN	__imp_w32_socket:PROC
EXTRN	__imp_w32_accept:PROC
EXTRN	__imp_w32_close_socket:PROC
EXTRN	__imp_w32_FD_SET:PROC
EXTRN	__imp_w32_FD_ISSET:PROC
EXTRN	__imp_w32_select:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_w32_basename:PROC
EXTRN	__imp_host_to_guest:PROC
EXTRN	__imp_guest_to_host:PROC
EXTRN	__imp_disable_nagle:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_logmsg:PROC
EXTRN	__imp_parser:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memcmp:PROC
EXTRN	__imp_sysblk:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
pdata	SEGMENT
$pdata$logdump DD imagerel logdump
	DD	imagerel logdump+617
	DD	imagerel $unwind$logdump
$pdata$guest_to_host_string DD imagerel guest_to_host_string
	DD	imagerel guest_to_host_string+193
	DD	imagerel $unwind$guest_to_host_string
$pdata$tcpnje_clean_device DD imagerel tcpnje_clean_device
	DD	imagerel tcpnje_clean_device+366
	DD	imagerel $unwind$tcpnje_clean_device
$pdata$tcpnje_alloc_device DD imagerel tcpnje_alloc_device
	DD	imagerel tcpnje_alloc_device+147
	DD	imagerel $unwind$tcpnje_alloc_device
$pdata$tcpnje_getport DD imagerel tcpnje_getport
	DD	imagerel tcpnje_getport+91
	DD	imagerel $unwind$tcpnje_getport
$pdata$tcpnje_getaddr DD imagerel tcpnje_getaddr
	DD	imagerel tcpnje_getaddr+131
	DD	imagerel $unwind$tcpnje_getaddr
$pdata$tcpnje_listen DD imagerel tcpnje_listen
	DD	imagerel tcpnje_listen+2074
	DD	imagerel $unwind$tcpnje_listen
$pdata$tcpnje_connout DD imagerel tcpnje_connout
	DD	imagerel tcpnje_connout+2023
	DD	imagerel $unwind$tcpnje_connout
$pdata$tcpnje_initiate_userdial DD imagerel tcpnje_initiate_userdial
	DD	imagerel tcpnje_initiate_userdial+1140
	DD	imagerel $unwind$tcpnje_initiate_userdial
$pdata$tcpnje_wakeup DD imagerel tcpnje_wakeup
	DD	imagerel tcpnje_wakeup+179
	DD	imagerel $unwind$tcpnje_wakeup
$pdata$tcpnje_close DD imagerel tcpnje_close
	DD	imagerel tcpnje_close+403
	DD	imagerel $unwind$tcpnje_close
$pdata$tcpnje_read DD imagerel tcpnje_read
	DD	imagerel tcpnje_read+617
	DD	imagerel $unwind$tcpnje_read
$pdata$tcpnje_write DD imagerel tcpnje_write
	DD	imagerel tcpnje_write+853
	DD	imagerel $unwind$tcpnje_write
$pdata$tcpnje_ttc DD imagerel tcpnje_ttc
	DD	imagerel tcpnje_ttc+1757
	DD	imagerel $unwind$tcpnje_ttc
$pdata$tcpnje_process_request DD imagerel tcpnje_process_request
	DD	imagerel tcpnje_process_request+5432
	DD	imagerel $unwind$tcpnje_process_request
$pdata$tcpnje_process_reply DD imagerel tcpnje_process_reply
	DD	imagerel tcpnje_process_reply+2072
	DD	imagerel $unwind$tcpnje_process_reply
$pdata$tcpnje_thread DD imagerel tcpnje_thread
	DD	imagerel tcpnje_thread+10316
	DD	imagerel $unwind$tcpnje_thread
$pdata$tcpnje_wait DD imagerel tcpnje_wait
	DD	imagerel tcpnje_wait+65
	DD	imagerel $unwind$tcpnje_wait
$pdata$tcpnje_wakeup_and_wait DD imagerel tcpnje_wakeup_and_wait
	DD	imagerel tcpnje_wakeup_and_wait+105
	DD	imagerel $unwind$tcpnje_wakeup_and_wait
$pdata$tcpnje_halt DD imagerel tcpnje_halt
	DD	imagerel tcpnje_halt+150
	DD	imagerel $unwind$tcpnje_halt
$pdata$msg013e DD imagerel msg013e
	DD	imagerel msg013e+121
	DD	imagerel $unwind$msg013e
$pdata$msg073w DD imagerel msg073w
	DD	imagerel msg073w+111
	DD	imagerel $unwind$msg073w
$pdata$msg074e DD imagerel msg074e
	DD	imagerel msg074e+111
	DD	imagerel $unwind$msg074e
$pdata$tcpnje_init_handler DD imagerel tcpnje_init_handler
	DD	imagerel tcpnje_init_handler+5344
	DD	imagerel $unwind$tcpnje_init_handler
$pdata$tcpnje_query_device DD imagerel tcpnje_query_device
	DD	imagerel tcpnje_query_device+767
	DD	imagerel $unwind$tcpnje_query_device
$pdata$tcpnje_close_device DD imagerel tcpnje_close_device
	DD	imagerel tcpnje_close_device+367
	DD	imagerel $unwind$tcpnje_close_device
$pdata$tcpnje_flush DD imagerel tcpnje_flush
	DD	imagerel tcpnje_flush+360
	DD	imagerel $unwind$tcpnje_flush
$pdata$tcpnje_execute_ccw DD imagerel tcpnje_execute_ccw
	DD	imagerel tcpnje_execute_ccw+15256
	DD	imagerel $unwind$tcpnje_execute_ccw
$pdata$hdl_check_depends_ep DD imagerel $LN15
	DD	imagerel $LN15+152
	DD	imagerel $unwind$hdl_check_depends_ep
$pdata$hdl_define_devtypes_ep DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$hdl_define_devtypes_ep
pdata	ENDS
_DATA	SEGMENT
tcpnje_pendccw_text DQ FLAT:$SG159200
	DQ	FLAT:$SG159201
	DQ	FLAT:$SG159202
	DQ	FLAT:$SG159203
	DQ	FLAT:$SG159204
	DQ	FLAT:$SG159205
	DQ	FLAT:$SG159206
	DQ	FLAT:$SG159207
	DQ	FLAT:$SG159208
	DQ	FLAT:$SG159209
	DQ	FLAT:$SG159210
$SG159310 DB	'HHCTN101D %4.4X:%s', 0aH, 00H
$SG159314 DB	' ', 00H
	ORG $+2
tcpnje_state_text DQ FLAT:$SG159212
	DQ	FLAT:$SG159213
	DQ	FLAT:$SG159214
	DQ	FLAT:$SG159215
	DQ	FLAT:$SG159216
	DQ	FLAT:$SG159217
	DQ	FLAT:$SG159218
	DQ	FLAT:$SG159219
	DQ	FLAT:$SG159220
	DQ	FLAT:$SG159221
ptab	DQ	FLAT:$SG159228
	DQ	FLAT:$SG159229
	DQ	FLAT:$SG159230
	DQ	FLAT:$SG159231
	DQ	FLAT:$SG159232
	DQ	FLAT:$SG159233
	DQ	FLAT:$SG159234
	DQ	FLAT:$SG159235
	DQ	FLAT:$SG159236
	DQ	FLAT:$SG159237
	DQ	FLAT:$SG159238
	DQ	FLAT:$SG159239
	DQ	FLAT:$SG159240
	DQ	FLAT:$SG159241
	DQ	FLAT:$SG159242
	DQ	FLAT:$SG159243
	DQ	FLAT:$SG159244
	DQ	FLAT:$SG159245
	DQ	FLAT:$SG159246
	DQ	FLAT:$SG159247
	DQ	FLAT:$SG159248
	DQ	FLAT:$SG159249
	DQ	FLAT:$SG159250
	DQ	FLAT:$SG159251
	DQ	FLAT:$SG159252
	DQ	FLAT:$SG159253
	DQ	FLAT:$SG159254
	DQ	FLAT:$SG159255
	DQ	FLAT:$SG159256
	DQ	FLAT:$SG159257
	DQ	FLAT:$SG159258
	DQ	FLAT:$SG159259
	DQ	0000000000000000H
	DQ	0000000000000000H
$SG159311 DB	'HHCTN102D %4.4X:%s : Dump of %d (%x) byte(s)', 0aH, 00H
	ORG $+2
$SG159312 DB	'HHCTN103D %4.4X:%s : %4.4X:', 00H
$SG159315 DB	'%2.2X', 00H
	ORG $+2
$SG159317 DB	' ', 00H
	ORG $+2
$SG159318 DB	'  ', 00H
	ORG $+1
$SG159320 DB	'%c', 00H
	ORG $+1
$SG159321 DB	0aH, 00H
	ORG $+2
$SG159389 DB	'tcp', 00H
$SG159365 DB	'tcpnje.c:254', 00H
	ORG $+3
$SG159367 DB	'HHCTN104D %4.4X:TCPNJE - control block freed', 0aH, 00H
	ORG $+2
$SG159544 DB	'HHCTN039E %4.4X:TCPNJE - found data beyond EON', 0aH, 00H
$SG159592 DB	'W', 00H
	ORG $+6
$SG159368 DB	'HHCTN023E %4.4X:TCPNJE - control block not freed : not a'
	DB	'llocated', 0aH, 00H
	ORG $+6
$SG159556 DB	'HHCTN041E %4.4X:TCPNJE - %d greater than 255', 0aH, 00H
	ORG $+2
$SG159593 DB	'HHC04000%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159379 DB	'HHCTN020E %4.4X:TCPNJE - memory allocation failure for m'
	DB	'ain control block', 0aH, 00H
	ORG $+1
$SG159750 DB	0aH, 00H
	ORG $+2
$SG159380 DB	'TCPNJE10', 00H
	ORG $+7
$SG159426 DB	'HHCTN003E %4.4X:TCPNJE - cannot obtain socket for incomi'
	DB	'ng calls : %s', 0aH, 00H
	ORG $+1
$SG159636 DB	'Fm net', 00H
	ORG $+1
$SG159431 DB	'HHCTN028E %4.4X:TCPNJE - cannot use socket obtained for '
	DB	'incoming calls : %s', 0aH, 00H
	ORG $+3
$SG159436 DB	'HHCTN029E %4.4X:TCPNJE - error setting socket for incomi'
	DB	'ng calls to non-blocking : %s', 0aH, 00H
	ORG $+1
$SG159648 DB	'HHCTN048E %4.4X:TCPNJE - error reading from socket: %s', 0aH
	DB	00H
$SG159441 DB	'HHCTN030W %4.4X:TCPNJE - unable to set SO_REUSEADDR opti'
	DB	'on on listening socket: %s', 0aH, 00H
$SG159665 DB	'To net', 00H
	ORG $+5
$SG159450 DB	'HHCTN004W %4.4X:TCPNJE - listener: address/port combinat'
	DB	'ion %s:%d currently in use', 0aH, 00H
$SG159794 DB	0aH, 00H
	ORG $+2
$SG159669 DB	'HHCTN105D %4.4X:TCPNJE - wrote %d out of %d bytes', 0aH, 00H
	ORG $+5
$SG159456 DB	'HHCTN031W %4.4X:TCPNJE - no permission to bind privilege'
	DB	'd port %d for listen', 0aH, 00H
	ORG $+2
$SG159460 DB	'HHCTN018W %4.4X:TCPNJE - bind for incoming connections t'
	DB	'o %s:%d failed: %s', 0aH, 00H
	ORG $+4
$SG159465 DB	'HHCTN032W %4.4X:TCPNJE - listen on %d:%s for incoming TC'
	DB	'P connections failed: %s', 0aH, 00H
	ORG $+6
$SG159560 DB	'HHCTN042E %4.4X:TCPNJE - too many separators in dial dat'
	DB	'a', 0aH, 00H
	ORG $+5
$SG159594 DB	'tcpnje_wakeup', 00H
	ORG $+2
$SG159805 DB	' received from %s:%d', 0aH, 00H
	ORG $+2
$SG159469 DB	'HHCTN005I %4.4X:TCPNJE - listening on %s:%d for incoming'
	DB	' connections', 0aH, 00H
	ORG $+2
$SG159903 DB	' reason code %d', 0aH, 00H
	ORG $+7
$SG159489 DB	'HHCTN033I %4.4X:TCPNJE - delaying link %s - %s active op'
	DB	'en for %d attempt(s)', 0aH, 00H
	ORG $+2
$SG159495 DB	'HHCTN034W %4.4X:TCPNJE - cannot make outgoing connection'
	DB	'.  Remote ip address not specified', 0aH, 00H
	ORG $+4
$SG159500 DB	'HHCTN035W %4.4X:TCPNJE - closing outgoing socket as it i'
	DB	's unexpectedly open', 0aH, 00H
	ORG $+3
$SG159505 DB	'HHCTN036E %4.4X:TCPNJE - error setting socket for outgoi'
	DB	'ng calls to non-blocking : %s', 0aH, 00H
	ORG $+1
$SG159994 DB	'HHCTN124D %4.4X:TCPNJE - top of loop - Operation = %s', 0aH
	DB	00H
	ORG $+1
$SG159510 DB	'HHCTN037I %4.4X:TCPNJE - connecting out to %s:%d for lin'
	DB	'k %s - %s', 0aH, 00H
	ORG $+5
$SG159611 DB	'tcpnje.c:746', 00H
	ORG $+3
$SG159756 DB	'HHCTN052E %4.4X:TCPNJE - Error writing %s TTC to network'
	DB	': %s', 0aH, 00H
	ORG $+2
$SG160080 DB	'HHCTN126D %4.4X:TCPNJE - select() returned %d', 0aH, 00H
	ORG $+1
$SG160107 DB	'HHCTN129D %4.4X:TCPNJE - IPC Pipe Data ; code = %d', 0aH
	DB	00H
	ORG $+4
$SG159518 DB	'HHCTN001W %4.4X:TCPNJE - connect out to %s:%d failed for'
	DB	' link %s - %s : %s', 0aH, 00H
	ORG $+4
$SG159523 DB	'HHCTN038I %4.4X:TCPNJE - connected out to %s:%d for link'
	DB	' %s - %s', 0aH, 00H
	ORG $+6
$SG159591 DB	'write_pipe', 00H
	ORG $+5
$SG159740 DB	'HHCTN108D %4.4X:TCPNJE - sending TCPNJE %s for link %s -'
	DB	' %s', 00H
$SG159809 DB	0aH, 00H
	ORG $+2
$SG160114 DB	'HHCTN130D %4.4X:TCPNJE - Closing socket due to halt', 0aH
	DB	00H
	ORG $+3
$SG159552 DB	'HHCTN040E %4.4X:TCPNJE - found incorrect IP address sect'
	DB	'ion at position %d', 0aH, 00H
$SG159907 DB	0aH, 00H
	ORG $+2
$SG159569 DB	'HHCTN043E %4.4X:TCPNJE - incorrect dial data byte %2.2x', 0aH
	DB	00H
	ORG $+7
$SG159577 DB	'HHCTN044E %4.4X:TCPNJE - not enough separators (only %d '
	DB	'found) in dial data', 0aH, 00H
	ORG $+3
$SG159582 DB	'HHCTN045E %4.4X:TCPNJE - destination TCP port %d exceeds'
	DB	' maximum of 65535', 0aH, 00H
	ORG $+1
$SG160395 DB	'BSC', 00H
$SG159595 DB	'tcpnje.c', 00H
	ORG $+7
$SG159632 DB	'HHCTN046E %4.4X:TCPNJE - no room in input buffer for %d '
	DB	'bytes requested. Stopping link.', 0aH, 00H
	ORG $+7
$SG159644 DB	'HHCTN047W %4.4X:TCPNJE - connection unexpectedly closed '
	DB	'by remote peer.', 0aH, 00H
	ORG $+7
$SG159678 DB	'HHCTN106D %4.4X:TCPNJE - holding outgoing data transmiss'
	DB	'ion due to write contention', 0aH, 00H
	ORG $+3
$SG159827 DB	'tcpnje.c:1134', 00H
	ORG $+2
$SG160280 DB	'HHCTN009I %4.4X:TCPNJE - networking thread terminated', 0aH
	DB	00H
	ORG $+1
$SG159682 DB	'HHCTN049E %4.4X:TCPNJE - Attempt to write %d bytes to ou'
	DB	'tput socket only wrote %d bytes. Error: %s', 0aH, 00H
$SG160394 DB	'2703', 00H
	ORG $+7
$SG159687 DB	'HHCTN107D %4.4X:TCPNJE - resuming outgoing data transmis'
	DB	'sion after successful network write', 0aH, 00H
	ORG $+3
$SG159728 DB	'HHCTN050W %4.4X:TCPNJE - Error obtaining local ip addres'
	DB	's for TCPNJE OPEN: %s. Using %s', 0aH, 00H
	ORG $+7
$SG159736 DB	'HHCTN051W %4.4X:TCPNJE - Error obtaining remote ip addre'
	DB	'ss for TCPNJE OPEN: %s. Using %s', 0aH, 00H
	ORG $+2
$SG160396 DB	'BISYNC', 00H
	ORG $+1
$SG160401 DB	'CTC', 00H
$SG159746 DB	' reason %d', 0aH, 00H
$SG160400 DB	'3088', 00H
	ORG $+7
$SG159790 DB	'HHCTN109D %4.4X:TCPNJE - processing TCPNJE %s received f'
	DB	'or link %s - %s', 00H
$SG160318 DB	'HHCTN013E %4.4X:TCPNJE - incorrect %s specification %s', 0aH
	DB	00H
$SG159799 DB	'HHCTN123D %4.4X:TCPNJE - unrecognised TCPNJE control sta'
	DB	'tement "%s"', 00H
$SG160402 DB	'CTCA', 00H
	ORG $+7
$SG159815 DB	'HHCTN110D %4.4X:TCPNJE - link %s - %s is not handled by '
	DB	'this device. Checking other TCPNJE devices.', 0aH, 00H
	ORG $+3
$SG159818 DB	'TCPNJE10', 00H
	ORG $+7
$SG159837 DB	'tcpnje.c:1156', 00H
	ORG $+2
$SG160338 DB	'HHCTN074E %4.4X:TCPNJE - %s has not been specified', 0aH
	DB	00H
	ORG $+4
$SG159826 DB	'HHCTN111D %4.4X:TCPNJE - processing TCPNJE OPEN received'
	DB	' for link %s - %s on device %4.4X', 0aH, 00H
	ORG $+5
$SG159832 DB	'HHCTN112D %4.4X:TCPNJE - rejecting incoming TCPNJE OPEN '
	DB	'for link %s - %s on device %4.4X : already connected', 0aH, 00H
	ORG $+2
$SG159836 DB	'HHCTN113D %4.4X:TCPNJE - closing link %s - %s on device '
	DB	'%4.4X due to unexpected TCPNJE OPEN received for same', 0aH, 00H
	ORG $+1
$SG159841 DB	'tcpnje.c:1166', 00H
	ORG $+2
$SG159845 DB	'HHCTN114D %4.4X:TCPNJE - rejecting incoming TCPNJE OPEN '
	DB	'for link %s - %s on device %4.4X : already doing active open', 0aH
	DB	00H
	ORG $+2
$SG160381 DB	'HHCTN140D %4.4X:TCPNJE - initialisation starting', 0aH, 00H
	ORG $+6
$SG159850 DB	'HHCTN115D %4.4X:TCPNJE - Interrupting incoming connectio'
	DB	'n in progress on device %4.4X', 0aH, 00H
	ORG $+1
$SG160383 DB	'HHCTN010E %4.4X:TCPNJE - initialisation not performed', 0aH
	DB	00H
	ORG $+1
$SG159854 DB	'HHCTN053I %4.4X:TCPNJE - passing TCPNJE OPEN for link %s'
	DB	' - %s to device %4.4X', 0aH, 00H
	ORG $+1
$SG159855 DB	'tcpnje.c:1210', 00H
	ORG $+2
$SG159861 DB	'HHCTN116D %4.4X:TCPNJE - rejecting TCPNJE OPEN for unrec'
	DB	'ognised or inactive link %s - %s', 0aH, 00H
	ORG $+6
$SG159867 DB	'HHCTN117D %4.4X:TCPNJE - rejecting incoming TCPNJE OPEN '
	DB	'for link %s - %s : already connected', 0aH, 00H
	ORG $+2
$SG159871 DB	'HHCTN118D %4.4X:TCPNJE - closing link %s - %s due to une'
	DB	'xpected TCPNJE OPEN received for same', 0aH, 00H
	ORG $+1
$SG159877 DB	'HHCTN119D %4.4X:TCPNJE - rejecting incoming TCPNJE OPEN '
	DB	'for link %s - %s : already doing active open', 0aH, 00H
	ORG $+2
$SG160410 DB	'HHCTN076E %4.4X:TCPNJE - device type %s is not valid', 0aH
	DB	00H
	ORG $+2
$SG159882 DB	'HHCTN120D %4.4X:TCPNJE - ignoring unexpected TCPNJE OPEN'
	DB	' for link %s - %s while in connection state: %s', 0aH, 00H
	ORG $+7
$SG159897 DB	'HHCTN109D %4.4X:TCPNJE - processing TCPNJE %s received f'
	DB	'or link %s - %s', 00H
$SG160420 DB	'HHCTN012E %4.4X:TCPNJE - unrecognized parameter %s', 0aH
	DB	00H
	ORG $+4
$SG159913 DB	'HHCTN121D %4.4X:TCPNJE - ignoring TCPNJE %s received for'
	DB	' unrecognised link %s - %s', 0aH, 00H
$SG160423 DB	'LPORT', 00H
	ORG $+6
$SG159918 DB	'HHCTN122D %4.4X:TCPNJE - ignoring unexpected TCPNJE %s r'
	DB	'eceived for link %s - %s', 0aH, 00H
	ORG $+6
$SG159984 DB	'tcpnje.c:1448', 00H
	ORG $+2
$SG160428 DB	'LHOST', 00H
	ORG $+2
$SG159928 DB	'HHCTN123D %4.4X:TCPNJE - unrecognised or unexpected TCPN'
	DB	'JE control statement "%s" received for link %s - %s', 0aH, 00H
	ORG $+3
$SG159988 DB	'HHCTN002I %4.4X:TCPNJE - networking thread %8.8x started'
	DB	' for link %s - %s', 0aH, 00H
	ORG $+1
$SG160426 DB	'*', 00H
	ORG $+2
$SG159990 DB	'tcpnje.c:1465', 00H
	ORG $+2
$SG160000 DB	'tcpnje.c:1508', 00H
	ORG $+2
$SG160006 DB	'tcpnje.c:1543', 00H
	ORG $+2
$SG160009 DB	'tcpnje.c:1549', 00H
	ORG $+2
$SG160012 DB	'tcpnje.c:1556', 00H
	ORG $+2
$SG160018 DB	'tcpnje.c:1628', 00H
	ORG $+2
$SG160025 DB	'HHCTN054I %4.4X:TCPNJE - making outgoing leased line con'
	DB	'nection', 0aH, 00H
	ORG $+7
$SG160045 DB	'tcpnje.c:1713', 00H
	ORG $+2
$SG160431 DB	'RPORT', 00H
	ORG $+2
$SG160035 DB	'HHCTN055W %4.4X:TCPNJE - unexpected state after outgoing'
	DB	' call: %s', 0aH, 00H
	ORG $+5
$SG160058 DB	'tcpnje.c:1750', 00H
	ORG $+2
$SG160436 DB	'RHOST', 00H
	ORG $+2
$SG160040 DB	'HHCTN007W %4.4X:TCPNJE - outgoing connection for link %s'
	DB	' - %s failed or deferred', 0aH, 00H
	ORG $+6
$SG160062 DB	'tcpnje.c:1758', 00H
	ORG $+2
$SG160444 DB	'yes', 00H
	ORG $+4
$SG160052 DB	'HHCTN056I %4.4X:TCPNJE - closing listening socket due to'
	DB	' DISABLE', 0aH, 00H
	ORG $+6
$SG160066 DB	'tcpnje.c:1776', 00H
	ORG $+2
$SG160446 DB	'inout', 00H
	ORG $+2
$SG160057 DB	'HHCTN057I %4.4X:TCPNJE - closing connection socket due t'
	DB	'o DISABLE', 0aH, 00H
	ORG $+1
$SG160434 DB	'*', 00H
	ORG $+2
$SG160073 DB	'HHCTN125D %4.4X:TCPNJE - Entering select(). Operation: %'
	DB	's', 0aH, 00H
	ORG $+1
$SG160445 DB	'1', 00H
	ORG $+2
$SG160074 DB	'tcpnje.c:1814', 00H
	ORG $+2
$SG160075 DB	'tcpnje.c', 00H
	ORG $+3
$SG160449 DB	'no', 00H
	ORG $+1
$SG160076 DB	'tcpnje.c:1822', 00H
	ORG $+2
$SG160452 DB	'in', 00H
	ORG $+5
$SG160087 DB	'HHCTN058W %4.4X:TCPNJE - select() unexpectedly interrupt'
	DB	'ed %d times in a row', 0aH, 00H
	ORG $+2
$SG160091 DB	'HHCTN006E %4.4X:TCPNJE - select() error : %s', 0aH, 00H
	ORG $+2
$SG160096 DB	'HHCTN127D %4.4X:TCPNJE - select() timeout after %ld seco'
	DB	'nds %ld microseconds', 0aH, 00H
	ORG $+2
$SG160097 DB	'tcpnje.c:1854', 00H
	ORG $+2
$SG160103 DB	'HHCTN128D %4.4X:TCPNJE - IPC Pipe closed', 0aH, 00H
	ORG $+2
$SG160450 DB	'0', 00H
	ORG $+2
$SG160116 DB	'tcpnje.c:1905', 00H
	ORG $+2
$SG160117 DB	'tcpnje.c:1908', 00H
	ORG $+2
$SG160122 DB	'HHCTN059I %4.4X:TCPNJE - TCPNJE OPEN redirected from ano'
	DB	'ther device. Connection state: %s', 0aH, 00H
	ORG $+5
$SG160129 DB	'HHCTN131D %4.4X:TCPNJE - Write buffer space available.  '
	DB	'Retrying last write.', 0aH, 00H
	ORG $+2
$SG160136 DB	'HHCTN132D %4.4X:TCPNJE - connection event', 0aH, 00H
	ORG $+5
$SG160146 DB	'HHCTN133D %4.4X:TCPNJE - outgoing call connected for lin'
	DB	'k %s - %s', 0aH, 00H
	ORG $+5
$SG160158 DB	'tcpnje.c:2008', 00H
	ORG $+2
$SG160454 DB	'out', 00H
	ORG $+4
$SG160150 DB	'HHCTN060W %4.4X:TCPNJE - unexpected state %s after outgo'
	DB	'ing call connected', 0aH, 00H
	ORG $+4
$SG160155 DB	'HHCTN061W %4.4X:TCPNJE - outgoing call to %s:%d for link'
	DB	' %s - %s failed: %s', 0aH, 00H
	ORG $+3
$SG160164 DB	'HHCTN134D %4.4X:TCPNJE - inbound data. Connection state:'
	DB	' %s', 0aH, 00H
	ORG $+3
$SG160169 DB	'HHCTN135D %4.4X:TCPNJE incoming TTB, length %d. Connecti'
	DB	'on state %s', 0aH, 00H
	ORG $+3
$SG160176 DB	'tcpnje.c:2056', 00H
	ORG $+2
$SG160461 DB	'LNODE', 00H
	ORG $+2
$SG160174 DB	'HHCTN136D %4.4X:TCPNJE - bytes required %d - read so far'
	DB	' %ld. Connection state %s', 0aH, 00H
	ORG $+5
$SG160220 DB	'HHCTN063I %4.4X:TCPNJE - incoming connection', 0aH, 00H
	ORG $+2
$SG160464 DB	'RNODE', 00H
	ORG $+2
$SG160180 DB	'HHCTN137D %4.4X:TCPNJE - TTB read complete. Connection s'
	DB	'tate %s', 0aH, 00H
	ORG $+7
$SG160238 DB	'HHCTN066W %4.4X:TCPNJE - rejecting unexpected incoming c'
	DB	'all', 0aH, 00H
	ORG $+3
$SG160277 DB	'tcpnje.c:2254', 00H
	ORG $+2
$SG160467 DB	'DEBUG', 00H
	ORG $+2
$SG160185 DB	'HHCTN138D %4.4X:TCPNJE - passive open TCPNJE protocol tr'
	DB	'affic. Connection state: %s', 0aH, 00H
	ORG $+3
$SG160279 DB	'tcpnje.c:2261', 00H
	ORG $+2
$SG160471 DB	'BUFSIZE', 00H
$SG160194 DB	'HHCTN100E %4.4X:TCPNJE - Excess connection traffic. Conn'
	DB	'ection state: %s', 0aH, 00H
	ORG $+2
$SG160498 DB	'W', 00H
	ORG $+2
$SG160199 DB	'HHCTN099W %4.4X:TCPNJE - repeating messages suppressed.', 0aH
	DB	00H
	ORG $+7
$SG160204 DB	'HHCTN139D %4.4X:TCPNJE - active open TCPNJE protocol tra'
	DB	'ffic. Connection state: %s', 0aH, 00H
$SG160476 DB	'RNODE', 00H
	ORG $+6
$SG160210 DB	'HHCTN062E %4.4X:TCPNJE - incoming connection - accept fa'
	DB	'iled: %s', 0aH, 00H
	ORG $+2
$SG160542 DB	'.', 00H
	ORG $+2
$SG160216 DB	'HHCTN008I %4.4X:TCPNJE - incoming connection from %s:%d', 0aH
	DB	00H
	ORG $+7
$SG160281 DB	'tcpnje.c:2273', 00H
	ORG $+2
$SG160478 DB	'LNODE', 00H
	ORG $+2
$SG160227 DB	'HHCTN064W %4.4X:TCPNJE - rejecting incoming connection d'
	DB	'ue to connection already in progress', 0aH, 00H
	ORG $+2
$SG160232 DB	'HHCTN065E %4.4X:TCPNJE - error setting socket for incomi'
	DB	'ng call to non-blocking : %s', 0aH, 00H
	ORG $+2
$SG160499 DB	'HHC04000%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG160245 DB	'HHCTN067E %4.4X:TCPNJE - possible logic error.  Outstand'
	DB	'ing count from select(): %d', 0aH, 00H
	ORG $+3
$SG160288 DB	'tcpnje.c:2286', 00H
	ORG $+2
$SG160500 DB	'tcpnje_init_handler', 00H
	ORG $+4
$SG160250 DB	'HHCTN068W %4.4X:TCPNJE - unexpected return from select()'
	DB	' due to write event on data connection', 0aH, 00H
$SG160255 DB	'HHCTN069W %4.4X:TCPNJE - unexpected connection traffic r'
	DB	'eceived on incoming connection', 0aH, 00H
$SG160506 DB	'tcpnje %4.4X thread', 00H
	ORG $+4
$SG160260 DB	'HHCTN070W %4.4X:TCPNJE - unexpected connection traffic r'
	DB	'eceived on outgoing connection', 0aH, 00H
$SG160536 DB	'LINE', 00H
	ORG $+3
$SG160265 DB	'HHCTN071W %4.4X:TCPNJE - traffic received on data connec'
	DB	'tion when not in connected state', 0aH, 00H
	ORG $+6
$SG160270 DB	'HHCTN072W %4.4X:TCPNJE - traffic received on listener po'
	DB	'rt when not listening', 0aH, 00H
	ORG $+1
$SG160275 DB	'HHCTN099W %4.4X:TCPNJE - repeating messages suppressed.', 0aH
	DB	00H
	ORG $+3
$SG160669 DB	'EIB', 00H
$SG160296 DB	'tcpnje.c:2299', 00H
	ORG $+2
$SG160304 DB	'tcpnje.c:2319', 00H
	ORG $+2
$SG160305 DB	'tcpnje.c:2329', 00H
	ORG $+2
$SG160306 DB	'tcpnje.c:2330', 00H
	ORG $+2
$SG160328 DB	'HHCTN073W %4.4X:TCPNJE - DIAL/SWITCHED=%s is not current'
	DB	'ly supported by TCPNJE', 0aH, 00H
$SG160387 DB	'HHCTN141D %4.4X:TCPNJE - Initialisation: Control block a'
	DB	'llocated', 0aH, 00H
	ORG $+2
$SG160670 DB	'NO EIB', 00H
	ORG $+1
$SG160739 DB	010H, '=', 00H
	ORG $+1
$SG160390 DB	'device type', 00H
$SG160790 DB	010H, 02H, 00H
	ORG $+1
$SG160406 DB	'HHCTN075E %4.4X:TCPNJE - device type %s is not yet suppo'
	DB	'rted', 0aH, 00H
	ORG $+2
$SG160415 DB	'HHCTN011E %4.4X:TCPNJE - error parsing %s', 0aH, 00H
	ORG $+5
$SG160458 DB	'HHCTN014E %4.4X:TCPNJE - incorrect switched/dial specifi'
	DB	'cation %s; defaulting to DIAL=NO', 0aH, 00H
	ORG $+6
$SG160483 DB	'HHCTN021I %4.4X:TCPNJE - initialisation failed due to pr'
	DB	'evious errors', 0aH, 00H
	ORG $+1
$SG160543 DB	'ENAB', 00H
	ORG $+3
$SG160485 DB	'HHCTN024E %4.4X:TCPNJE - memory allocation failure for T'
	DB	'CPNJE TTC passive open buffer', 0aH, 00H
	ORG $+1
$SG160544 DB	'DISA', 00H
	ORG $+3
$SG160487 DB	'HHCTN025E %4.4X:TCPNJE - memory allocation failure for T'
	DB	'CPNJE TTC active open buffer', 0aH, 00H
	ORG $+2
$SG160557 DB	'HHCTN142D %4.4X:TCPNJE - closing down', 0aH, 00H
	ORG $+1
$SG160489 DB	'HHCTN026E %4.4X:TCPNJE - memory allocation failure for T'
	DB	'CPNJE TTB/TTR input buffer', 0aH, 00H
$SG160700 DB	'Read S', 00H
	ORG $+5
$SG160491 DB	'HHCTN027E %4.4X:TCPNJE - memory allocation failure for T'
	DB	'CPNJE TTB/TTR output buffer', 0aH, 00H
	ORG $+3
$SG160492 DB	'tcpnje.c:2814', 00H
	ORG $+2
$SG160493 DB	'&tn->lock', 00H
	ORG $+2
$SG160708 DB	'Read H', 00H
	ORG $+1
$SG160795 DB	010H, 00H
	ORG $+2
$SG160494 DB	'tcpnje.c:2817', 00H
	ORG $+2
$SG160495 DB	'tcpnje.c:2818', 00H
	ORG $+2
$SG160497 DB	'create_pipe', 00H
$SG160796 DB	'&', 00H
	ORG $+2
$SG160501 DB	'tcpnje.c', 00H
	ORG $+3
$SG160724 DB	'Read A', 00H
	ORG $+1
$SG160800 DB	'2=', 00H
	ORG $+1
$SG160502 DB	'tcpnje.c:2833', 00H
	ORG $+2
$SG160507 DB	'tcpnje.c:2854', 00H
	ORG $+2
$SG160509 DB	'HHCTN022E TCPNJE - error creating communiction thread: %'
	DB	's', 0aH, 00H
	ORG $+1
$SG160898 DB	01H, '-', 00H
	ORG $+1
$SG160510 DB	'tcpnje.c:2858', 00H
	ORG $+2
$SG160562 DB	'HHCTN143D %4.4X:TCPNJE - closed down', 0aH, 00H
	ORG $+2
$SG160515 DB	'HHCTN019E %4.4X:TCPNJE communication thread did not init'
	DB	'ialise', 0aH, 00H
$SG160516 DB	'tcpnje.c:2867', 00H
	ORG $+2
$SG160517 DB	'tcpnje.c:2873', 00H
	ORG $+2
$SG160545 DB	'TCPNJE %s %s RH=%s RP=%d RN=%s LP=%d LN=%s IN=%d OUT=%d '
	DB	'OP=%s', 00H
	ORG $+2
$SG160559 DB	'tcpnje.c:2942', 00H
	ORG $+2
$SG160633 DB	'HHCTN144D %4.4X:TCPNJE CCW Execute opcode %2.2X', 0aH, 00H
	ORG $+3
$SG160738 DB	'Read T', 00H
	ORG $+1
$SG160899 DB	'2=', 00H
	ORG $+1
$SG160634 DB	'tcpnje.c:3074', 00H
	ORG $+2
$SG160639 DB	'HHCTN145D %4.4X:TCPNJE CCW CONTROL NO-OP', 0aH, 00H
	ORG $+2
$SG160741 DB	'Read N', 00H
	ORG $+1
$SG160913 DB	010H, '&', 00H
	ORG $+1
$SG160644 DB	'HHCTN146D %4.4X:TCPNJE CCW SENSE', 0aH, 00H
	ORG $+2
$SG160798 DB	'Read  ', 00H
	ORG $+1
$SG160921 DB	010H, 'p', 00H
	ORG $+1
$SG160649 DB	'HHCTN147D %4.4X:TCPNJE CCW SENSE ID', 0aH, 00H
	ORG $+3
$SG160654 DB	'HHCTN148D %4.4X:TCPNJE CCW ENABLE', 0aH, 00H
	ORG $+1
$SG160927 DB	01H, '-', 00H
	ORG $+1
$SG160662 DB	'HHCTN149D %4.4X:TCPNJE CCW DISABLE', 0aH, 00H
$SG160933 DB	'2=', 00H
	ORG $+1
$SG160671 DB	'HHCTN150D %4.4X:TCPNJE CCW SET MODE %s', 0aH, 00H
$SG160676 DB	'HHCTN151D %4.4X:TCPNJE - CCW DIAL', 0aH, 00H
	ORG $+5
$SG160682 DB	'HHCTN077W %4.4X:TCPNJE - DIAL operation is not currently'
	DB	' supported by TCPNJE', 0aH, 00H
	ORG $+2
$SG160691 DB	'HHCTN152D %4.4X:TCPNJE CCW READ count %d', 0aH, 00H
	ORG $+6
$SG160698 DB	'HHCTN078I %4.4X:TCPNJE READ - inserting signoff BCB: %2.'
	DB	'2X FCS: %2.2X%2.2X', 0aH, 00H
	ORG $+4
$SG160706 DB	'HHCTN153D %4.4X:TCPNJE READ - inserting incoming null bu'
	DB	'ffer BCB: %2.2X FCS: %2.2X%2.2X because incoming data is curr'
	DB	'ently held', 0aH, 00H
	ORG $+7
$SG160794 DB	'HHCTN170D %4.4X:TCPNJE READ - adding DLE ETB to end of b'
	DB	'uffer', 0aH, 00H
	ORG $+1
$SG160811 DB	'Write ', 00H
	ORG $+1
$SG160722 DB	'HHCTN154D %4.4X:TCPNJE READ - inserting incoming null bu'
	DB	'ffer BCB: %2.2X FCS: %2.2X%2.2X in lieu of ACK', 0aH, 00H
$SG160814 DB	'2222', 00H
	ORG $+3
$SG160736 DB	'HHCTN155D %4.4X:TCPNJE READ - inserting incoming null bu'
	DB	'ffer BCB: %2.2X FCS: %2.2X%2.2X in lieu of timeout', 0aH, 00H
	ORG $+4
$SG160751 DB	'HHCTN079I %4.4X:TCPNJE - received initial signon request'
	DB	' for RSCS link %s - connection state %s', 0aH, 00H
	ORG $+7
$SG160810 DB	'HHCTN156D %4.4X:TCPNJE CCW WRITE count %d', 0aH, 00H
	ORG $+1
$SG160907 DB	'2222', 00H
	ORG $+7
$SG160756 DB	'HHCTN080I %4.4X:TCPNJE - received TPbuffer size requeste'
	DB	'd by RSCS link %s: %d', 0aH, 00H
	ORG $+1
$SG160761 DB	'HHCTN081I %4.4X:TCPNJE - resetting request by RSCS link '
	DB	'%s for unsupported PREPARE protocol', 0aH, 00H
	ORG $+3
$SG160769 DB	'HHCTN082I %4.4X:TCPNJE - received response signon for RS'
	DB	'CS link %s - connection state %s', 0aH, 00H
	ORG $+6
$SG160774 DB	'HHCTN083I %4.4X:TCPNJE - received TPbuffer size negotiat'
	DB	'ed by RSCS link %s: %d', 0aH, 00H
$SG160779 DB	'HHCTN084E %4.4X:TCPNJE - attempt by RSCS link %s to forc'
	DB	'e use of unsupported PREPARE protocol', 0aH, 00H
	ORG $+1
$SG160787 DB	'HHCTN085W %4.4X:TCPNJE READ - Link partner issued FASTOP'
	DB	'EN request for stream %2.2X.  Implementation at this end is i'
	DB	'ncomplete.', 0aH, 00H
	ORG $+7
$SG160964 DB	'HHCTN167D %4.4X:TCPNJE CCW PREPARE', 0aH, 00H
	ORG $+4
$SG160804 DB	'HHCTN169D %4.4X:TCPNJE READ - incoming SYN NAK - Connect'
	DB	'ion state: %s', 0aH, 00H
	ORG $+1
$SG160978 DB	'HHCTN168D %4.4X:TCPNJE CCW POLL', 0aH, 00H
	ORG $+7
$SG160818 DB	'HHCTN157D %4.4X:TCPNJE WRITE - kludge dropping outgoing '
	DB	'SYN SYN SYN SYN. Connection state: %s', 0aH, 00H
	ORG $+1
$SG160826 DB	'HHCTN158D %4.4X:TCPNJE WRITE - Resuming incoming data du'
	DB	'e to outgoing FCS %2.2X%2.2X', 0aH, 00H
	ORG $+2
$SG160987 DB	'HHCTN098E %4.4X:TCPNJE - Invalid CCW opcode %2.2X', 0aH, 00H
	ORG $+5
$SG160831 DB	'HHCTN159D %4.4X:TCPNJE WRITE - Holding incoming data due'
	DB	' to outgoing FCS %2.2X%2.2X', 0aH, 00H
	ORG $+3
$SG160988 DB	'tcpnje.c:4264', 00H
	ORG $+2
$SG161030 DB	'DEVBLK', 00H
	ORG $+1
$SG160836 DB	'HHCTN160D %4.4X:TCPNJE WRITE - RSCS sent FCS %2.2X%2.2X '
	DB	'with wait-a-bit bit set', 0aH, 00H
	ORG $+7
$SG161032 DB	'SDL 4.2', 00H
$SG160841 DB	'HHCTN161D %4.4X:TCPNJE WRITE - Dropping outgoing null bu'
	DB	'ffer BCB: %2.2X FCS: %2.2X%2.2X', 0aH, 00H
	ORG $+7
$SG160849 DB	'HHCTN086W %4.4X:TCPNJE WRITE - Received BCB with reset b'
	DB	'it set from RSCS: %2.2X', 0aH, 00H
	ORG $+3
$SG161033 DB	'SYSBLK', 00H
	ORG $+5
$SG160853 DB	'HHCTN162D %4.4X:TCPNJE WRITE - Resetting outgoing BCB to'
	DB	' %2.2X', 0aH, 00H
$SG160858 DB	'HHCTN087I %4.4X:TCPNJE WRITE - Permission to open stream'
	DB	' %2.2X suppressed due to preceeding FASTOPEN', 0aH, 00H
	ORG $+2
$SG161038 DB	'tcpnje', 00H
	ORG $+1
$SG160866 DB	'HHCTN088I %4.4X:TCPNJE - sending initial signon for loca'
	DB	'l RSCS name %s.  Connection state %s', 0aH, 00H
	ORG $+2
$SG160871 DB	'HHCTN089I %4.4X:TCPNJE - sending TPbuffer size requested'
	DB	' by local RSCS name %s: %d', 0aH, 00H
	ORG $+12
$SG160876 DB	'HHCTN090I %4.4X:TCPNJE - resetting unsupported PREPARE f'
	DB	'eature requested by local RSCS name %s', 0aH, 00H
$SG160884 DB	'HHCTN091I %4.4X:TCPNJE - sending response signon for loc'
	DB	'al RSCS name %s.  Connection state %s', 0aH, 00H
	ORG $+1
$SG160889 DB	'HHCTN092I %4.4X:TCPNJE - sending TPbuffer size negotiate'
	DB	'd by local RSCS name %s: %d', 0aH, 00H
	ORG $+11
$SG160894 DB	'HHCTN093W %4.4X:TCPNJE - resetting forced use of unsuppo'
	DB	'red PREPARE protocol by local RSCS name %s', 0aH, 00H
	ORG $+12
$SG160903 DB	'HHCTN094W %4.4X:TCPNJE WRITE - Attempting to send other '
	DB	'than SOH ENQ or SYN NAK when not connected. Connection state:'
	DB	' %s', 0aH, 00H
	ORG $+6
$SG160911 DB	'HHCTN157D %4.4X:TCPNJE WRITE - dropping outgoing SYN SYN'
	DB	' SYN SYN. Connection state: %s', 0aH, 00H
	ORG $+8
$SG160917 DB	'HHCTN163D %4.4X:TCPNJE WRITE - dropping outgoing DLE ETB'
	DB	' - connection state %s', 0aH, 00H
$SG160925 DB	'HHCTN164D %4.4X:TCPNJE WRITE - Dropping outgoing DLE ACK'
	DB	'0 - Connection state %s', 0aH, 00H
	ORG $+15
$SG160931 DB	'HHCTN165D %4.4X:TCPNJE WRITE - dropping outgoing SOH ENQ'
	DB	' - Connection state: %s', 0aH, 00H
	ORG $+15
$SG160937 DB	'HHCTN171D %4.4X:TCPNJE WRITE - outgoing SYN NAK - Connec'
	DB	'tion state: %s', 0aH, 00H
	ORG $+8
$SG160944 DB	'HHCTN095E %4.4X:TCPNJE WRITE - outgoing record size %d w'
	DB	'ill not fit in output buffer', 0aH, 00H
	ORG $+10
$SG160955 DB	'HHCTN166D %4.4X:TCPNJE WRITE - Sending outgoing buffer a'
	DB	's it is nearly full', 0aH, 00H
	ORG $+3
$SG160959 DB	'HHCTN096W %4.4X:TCPNJE WRITE - outgoing record cannot be'
	DB	' buffered as buffer is busy', 0aH, 00H
	ORG $+11
$SG160969 DB	'HHCTN097W %4.4X:TCPNJE - PREPARE operation is not suppor'
	DB	'ted by TCPNJE', 0aH, 00H
	ORG $+9
$SG160982 DB	'HHCTN098E %4.4X:TCPNJE - POLL operation is not supported'
	DB	' by TCPNJE', 0aH, 00H
	ORG $+12
tcpnje_device_hndinfo DQ FLAT:tcpnje_init_handler
	DQ	FLAT:tcpnje_execute_ccw
	DQ	FLAT:tcpnje_close_device
	DQ	FLAT:tcpnje_query_device
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:tcpnje_halt
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:tcpnje_immed_command
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
$SG161026 DB	'SDL 4.60', 00H
	ORG $+7
$SG161027 DB	'HERCULES', 00H
	ORG $+7
$SG161029 DB	'SDL 4.00', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:tcpnje_execute_ccw
	DD	026H
	DD	03a68H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:tcpnje_query_device
	DD	025H
	DD	02e7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:tcpnje_init_handler
	DD	020H
	DD	01487H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:tcpnje_thread
	DD	01cH
	DD	0280bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:tcpnje_process_reply
	DD	01bH
	DD	0800H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:tcpnje_process_request
	DD	01bH
	DD	01520H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:tcpnje_ttc
	DD	024H
	DD	06c5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:tcpnje_connout
	DD	016H
	DD	07cfH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:tcpnje_listen
	DD	016H
	DD	0805H
voltbl	ENDS
xdata	SEGMENT
$unwind$logdump DD 011801H
	DD	0a218H
$unwind$guest_to_host_string DD 011301H
	DD	06213H
$unwind$tcpnje_clean_device DD 010901H
	DD	06209H
$unwind$tcpnje_alloc_device DD 020a01H
	DD	07006520aH
$unwind$tcpnje_getport DD 010901H
	DD	06209H
$unwind$tcpnje_getaddr DD 031001H
	DD	0700c6210H
	DD	0600bH
$unwind$tcpnje_listen DD 021b19H
	DD	011010cH
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$tcpnje_connout DD 021e19H
	DD	01b010cH
	DD	imagerel __GSHandlerCheck
	DD	0c8H
$unwind$tcpnje_initiate_userdial DD 010901H
	DD	08209H
$unwind$tcpnje_wakeup DD 010d01H
	DD	0c20dH
$unwind$tcpnje_close DD 010d01H
	DD	0620dH
$unwind$tcpnje_read DD 011701H
	DD	08217H
$unwind$tcpnje_write DD 011201H
	DD	08212H
$unwind$tcpnje_ttc DD 022c19H
	DD	01b011aH
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$tcpnje_process_request DD 022319H
	DD	0290111H
	DD	imagerel __GSHandlerCheck
	DD	0138H
$unwind$tcpnje_process_reply DD 022319H
	DD	0190111H
	DD	imagerel __GSHandlerCheck
	DD	0b8H
$unwind$tcpnje_thread DD 022419H
	DD	0c350112H
	DD	imagerel __GSHandlerCheck
	DD	06190H
$unwind$tcpnje_wait DD 010901H
	DD	06209H
$unwind$tcpnje_wakeup_and_wait DD 010d01H
	DD	0420dH
$unwind$tcpnje_halt DD 010901H
	DD	06209H
$unwind$msg013e DD 011301H
	DD	04213H
$unwind$msg073w DD 010e01H
	DD	0420eH
$unwind$msg074e DD 010e01H
	DD	0420eH
$unwind$tcpnje_init_handler DD 032819H
	DD	0260116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$tcpnje_query_device DD 022d19H
	DD	041011bH
	DD	imagerel __GSHandlerCheck
	DD	01f0H
$unwind$tcpnje_close_device DD 010901H
	DD	06209H
$unwind$tcpnje_flush DD 010901H
	DD	04209H
$unwind$tcpnje_execute_ccw DD 042e19H
	DD	02d011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	0158H
$unwind$hdl_check_depends_ep DD 010901H
	DD	06209H
$unwind$hdl_define_devtypes_ep DD 010901H
	DD	04209H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
defdev$ = 48
hdl_define_devtypes_ep PROC

; 4340 : HDL_DEVICE_SECTION;

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 4341 : {
; 4342 :     HDL_DEVICE(tcpnje, tcpnje_device_hndinfo);

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:tcpnje_device_hndinfo
  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161038
  00017	ff 54 24 30	 call	 QWORD PTR defdev$[rsp]

; 4343 : }
; 4344 : END_DEVICE_SECTION

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
hdl_define_devtypes_ep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
depchk_rc$ = 32
depchk$ = 64
hdl_check_depends_ep PROC

; 4321 : HDL_DEPENDENCY_SECTION;

$LN15:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 0
$LN4@hdl_check_:

; 4322 : {
; 4323 :      HDL_DEPENDENCY(HERCULES);

  00011	41 b8 08 00 00
	00		 mov	 r8d, 8
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161026
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161027
  00025	ff 54 24 40	 call	 QWORD PTR depchk$[rsp]
  00029	85 c0		 test	 eax, eax
  0002b	74 08		 je	 SHORT $LN11@hdl_check_
  0002d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 1
$LN11@hdl_check_:
  00035	33 c0		 xor	 eax, eax
  00037	85 c0		 test	 eax, eax
  00039	75 d6		 jne	 SHORT $LN4@hdl_check_
$LN7@hdl_check_:

; 4324 :      HDL_DEPENDENCY(DEVBLK);

  0003b	41 b8 a0 1b 00
	00		 mov	 r8d, 7072		; 00001ba0H
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161029
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161030
  0004f	ff 54 24 40	 call	 QWORD PTR depchk$[rsp]
  00053	85 c0		 test	 eax, eax
  00055	74 08		 je	 SHORT $LN12@hdl_check_
  00057	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 1
$LN12@hdl_check_:
  0005f	33 c0		 xor	 eax, eax
  00061	85 c0		 test	 eax, eax
  00063	75 d6		 jne	 SHORT $LN7@hdl_check_
$LN10@hdl_check_:

; 4325 :      HDL_DEPENDENCY(SYSBLK);

  00065	41 b8 00 76 01
	00		 mov	 r8d, 95744		; 00017600H
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161032
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161033
  00079	ff 54 24 40	 call	 QWORD PTR depchk$[rsp]
  0007d	85 c0		 test	 eax, eax
  0007f	74 08		 je	 SHORT $LN13@hdl_check_
  00081	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 1
$LN13@hdl_check_:
  00089	33 c0		 xor	 eax, eax
  0008b	85 c0		 test	 eax, eax
  0008d	75 d6		 jne	 SHORT $LN10@hdl_check_

; 4326 : }
; 4327 : END_DEPENDENCY_SECTION

  0008f	8b 44 24 20	 mov	 eax, DWORD PTR depchk_rc$[rsp]
  00093	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00097	c3		 ret	 0
hdl_check_depends_ep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
tn$ = 48
num$ = 56
tpb$ = 64
TTRlength$ = 72
tv90 = 76
tpbufsize$1 = 80
tpbufsize$2 = 84
tv188 = 88
tv191 = 92
tv226 = 96
tv230 = 100
tv346 = 104
tv803 = 108
tv823 = 112
tv906 = 116
tv1032 = 120
tv1621 = 124
tv1741 = 128
tv748 = 136
tv333 = 144
tv404 = 152
tv481 = 160
tv545 = 168
tv650 = 176
tv203 = 184
tv2299 = 192
tv866 = 200
tv2303 = 208
tv990 = 216
tv2308 = 224
tv1584 = 232
tv2309 = 240
tv1702 = 248
nullbuffer$ = 256
signoff$ = 264
nodestring$3 = 280
nodestring$4 = 296
nodestring$5 = 312
nodestring$6 = 328
__$ArrayPad$ = 344
dev$ = 384
code$ = 392
flags$ = 400
chained$ = 408
count$ = 416
prevcode$ = 424
ccwseq$ = 432
iobuf$ = 440
more$ = 448
unitstat$ = 456
residual$ = 464
tcpnje_execute_ccw PROC

; 3047 : {

  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 3048 : struct  TCPNJE *tn;          /* Pointer to device dependent block    */
; 3049 : struct  TPB    *tpb;         /* Pointer to RSCS TPbuffer in iobuf    */
; 3050 : U32     num;                 /* Work : Actual CCW transfer count     */
; 3051 : U32     TTRlength;           /* TTR length in host byte order        */
; 3052 : BYTE    nullbuffer[] = {0x10, 0x02, 0x90, 0x8f, 0xcf, 0x00, 0x10, 0x26};

  0002e	c6 84 24 00 01
	00 00 10	 mov	 BYTE PTR nullbuffer$[rsp], 16
  00036	c6 84 24 01 01
	00 00 02	 mov	 BYTE PTR nullbuffer$[rsp+1], 2
  0003e	c6 84 24 02 01
	00 00 90	 mov	 BYTE PTR nullbuffer$[rsp+2], 144 ; 00000090H
  00046	c6 84 24 03 01
	00 00 8f	 mov	 BYTE PTR nullbuffer$[rsp+3], 143 ; 0000008fH
  0004e	c6 84 24 04 01
	00 00 cf	 mov	 BYTE PTR nullbuffer$[rsp+4], 207 ; 000000cfH
  00056	c6 84 24 05 01
	00 00 00	 mov	 BYTE PTR nullbuffer$[rsp+5], 0
  0005e	c6 84 24 06 01
	00 00 10	 mov	 BYTE PTR nullbuffer$[rsp+6], 16
  00066	c6 84 24 07 01
	00 00 26	 mov	 BYTE PTR nullbuffer$[rsp+7], 38 ; 00000026H

; 3053 : BYTE    signoff[] =    {0x10, 0x02, 0x90, 0x8f, 0xcf,

  0006e	c6 84 24 08 01
	00 00 10	 mov	 BYTE PTR signoff$[rsp], 16
  00076	c6 84 24 09 01
	00 00 02	 mov	 BYTE PTR signoff$[rsp+1], 2
  0007e	c6 84 24 0a 01
	00 00 90	 mov	 BYTE PTR signoff$[rsp+2], 144 ; 00000090H
  00086	c6 84 24 0b 01
	00 00 8f	 mov	 BYTE PTR signoff$[rsp+3], 143 ; 0000008fH
  0008e	c6 84 24 0c 01
	00 00 cf	 mov	 BYTE PTR signoff$[rsp+4], 207 ; 000000cfH
  00096	c6 84 24 0d 01
	00 00 f0	 mov	 BYTE PTR signoff$[rsp+5], 240 ; 000000f0H
  0009e	c6 84 24 0e 01
	00 00 c2	 mov	 BYTE PTR signoff$[rsp+6], 194 ; 000000c2H
  000a6	c6 84 24 0f 01
	00 00 00	 mov	 BYTE PTR signoff$[rsp+7], 0
  000ae	c6 84 24 10 01
	00 00 10	 mov	 BYTE PTR signoff$[rsp+8], 16
  000b6	c6 84 24 11 01
	00 00 26	 mov	 BYTE PTR signoff$[rsp+9], 38 ; 00000026H
$LN4@tcpnje_exe:

; 3054 :                                           0xf0, 0xc2, 0x00, 0x10, 0x26};
; 3055 :     UNREFERENCED(flags);

  000be	33 c0		 xor	 eax, eax
  000c0	85 c0		 test	 eax, eax
  000c2	75 fa		 jne	 SHORT $LN4@tcpnje_exe
$LN7@tcpnje_exe:

; 3056 :     UNREFERENCED(chained);

  000c4	33 c0		 xor	 eax, eax
  000c6	85 c0		 test	 eax, eax
  000c8	75 fa		 jne	 SHORT $LN7@tcpnje_exe
$LN10@tcpnje_exe:

; 3057 :     UNREFERENCED(prevcode);

  000ca	33 c0		 xor	 eax, eax
  000cc	85 c0		 test	 eax, eax
  000ce	75 fa		 jne	 SHORT $LN10@tcpnje_exe
$LN13@tcpnje_exe:

; 3058 :     UNREFERENCED(ccwseq);

  000d0	33 c0		 xor	 eax, eax
  000d2	85 c0		 test	 eax, eax
  000d4	75 fa		 jne	 SHORT $LN13@tcpnje_exe

; 3059 :     *residual = 0;

  000d6	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  000de	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 3060 : 
; 3061 :     tn = (struct TCPNJE *) dev->commadpt;

  000e4	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000ec	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  000f3	48 89 44 24 30	 mov	 QWORD PTR tn$[rsp], rax

; 3062 :     /*
; 3063 :      * The following pointer is used in READ and WRITE to locate various
; 3064 :      * items in iobuf which normally contains an RSCS TPbuffer.
; 3065 :      */
; 3066 :     tpb = (struct TPB *)iobuf;

  000f8	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR iobuf$[rsp]
  00100	48 89 44 24 40	 mov	 QWORD PTR tpb$[rsp], rax

; 3067 :     /*
; 3068 :      * Obtain the TCPNJE lock
; 3069 :      */
; 3070 : 
; 3071 :     DBGMSG(1024, "HHCTN144D %4.4X:TCPNJE CCW Execute opcode %2.2X\n",

  00105	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0010a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0010d	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00113	c1 e8 0f	 shr	 eax, 15
  00116	83 e0 01	 and	 eax, 1
  00119	85 c0		 test	 eax, eax
  0011b	74 14		 je	 SHORT $LN18@tcpnje_exe
  0011d	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00122	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00128	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  0012d	85 c0		 test	 eax, eax
  0012f	75 14		 jne	 SHORT $LN17@tcpnje_exe
$LN18@tcpnje_exe:
  00131	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00136	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0013c	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00141	85 c0		 test	 eax, eax
  00143	74 26		 je	 SHORT $LN16@tcpnje_exe
$LN17@tcpnje_exe:
  00145	0f b6 84 24 88
	01 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  0014d	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00155	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00159	44 8b c0	 mov	 r8d, eax
  0015c	8b d1		 mov	 edx, ecx
  0015e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160633
  00165	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN16@tcpnje_exe:

; 3072 :             dev->devnum, code);
; 3073 : 
; 3074 :     obtain_lock(&tn->lock);

  0016b	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00170	48 83 c0 60	 add	 rax, 96			; 00000060H
  00174	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160634
  0017b	48 8b c8	 mov	 rcx, rax
  0017e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 3075 :     switch (code) {

  00184	0f b6 84 24 88
	01 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  0018c	89 44 24 4c	 mov	 DWORD PTR tv90[rsp], eax
  00190	8b 44 24 4c	 mov	 eax, DWORD PTR tv90[rsp]
  00194	ff c8		 dec	 eax
  00196	89 44 24 4c	 mov	 DWORD PTR tv90[rsp], eax
  0019a	81 7c 24 4c e3
	00 00 00	 cmp	 DWORD PTR tv90[rsp], 227 ; 000000e3H
  001a2	0f 87 04 38 00
	00		 ja	 $LN295@tcpnje_exe
  001a8	48 63 44 24 4c	 movsxd	 rax, DWORD PTR tv90[rsp]
  001ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  001b4	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN326@tcpnje_exe[rcx+rax]
  001bc	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN327@tcpnje_exe[rcx+rax*4]
  001c3	48 03 c1	 add	 rax, rcx
  001c6	ff e0		 jmp	 rax
$LN19@tcpnje_exe:

; 3076 :         /*---------------------------------------------------------------*/
; 3077 :         /* CONTROL NO-OP                                                 */
; 3078 :         /*---------------------------------------------------------------*/
; 3079 :         case 0x03:
; 3080 :                 DBGMSG(1024, "HHCTN145D %4.4X:TCPNJE CCW CONTROL NO-OP\n",

  001c8	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  001cd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001d0	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  001d6	c1 e8 0f	 shr	 eax, 15
  001d9	83 e0 01	 and	 eax, 1
  001dc	85 c0		 test	 eax, eax
  001de	74 14		 je	 SHORT $LN22@tcpnje_exe
  001e0	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  001e5	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  001eb	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  001f0	85 c0		 test	 eax, eax
  001f2	75 14		 jne	 SHORT $LN21@tcpnje_exe
$LN22@tcpnje_exe:
  001f4	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  001f9	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  001ff	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00204	85 c0		 test	 eax, eax
  00206	74 1b		 je	 SHORT $LN20@tcpnje_exe
$LN21@tcpnje_exe:
  00208	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00210	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00214	8b d0		 mov	 edx, eax
  00216	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160639
  0021d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN20@tcpnje_exe:

; 3081 :                         dev->devnum);
; 3082 : 
; 3083 :                 *residual = 0;

  00223	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  0022b	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 3084 :                 *unitstat = CSW_CE | CSW_DE;

  00231	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00239	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3085 :                 break;

  0023c	e9 0e 38 00 00	 jmp	 $LN14@tcpnje_exe
$LN23@tcpnje_exe:

; 3086 : 
; 3087 :         /*---------------------------------------------------------------*/
; 3088 :         /* BASIC SENSE                                                   */
; 3089 :         /*---------------------------------------------------------------*/
; 3090 :         case 0x04:
; 3091 :                 DBGMSG(1024, "HHCTN146D %4.4X:TCPNJE CCW SENSE\n",

  00241	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00246	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00249	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0024f	c1 e8 0f	 shr	 eax, 15
  00252	83 e0 01	 and	 eax, 1
  00255	85 c0		 test	 eax, eax
  00257	74 14		 je	 SHORT $LN26@tcpnje_exe
  00259	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0025e	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00264	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00269	85 c0		 test	 eax, eax
  0026b	75 14		 jne	 SHORT $LN25@tcpnje_exe
$LN26@tcpnje_exe:
  0026d	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00272	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00278	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  0027d	85 c0		 test	 eax, eax
  0027f	74 1b		 je	 SHORT $LN24@tcpnje_exe
$LN25@tcpnje_exe:
  00281	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00289	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0028d	8b d0		 mov	 edx, eax
  0028f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160644
  00296	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN24@tcpnje_exe:

; 3092 :                         dev->devnum);
; 3093 : 
; 3094 :                 num = count < dev->numsense ? count : dev->numsense;

  0029c	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002a4	8b 80 60 03 00
	00		 mov	 eax, DWORD PTR [rax+864]
  002aa	39 84 24 a0 01
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  002b1	73 0d		 jae	 SHORT $LN300@tcpnje_exe
  002b3	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  002ba	89 44 24 58	 mov	 DWORD PTR tv188[rsp], eax
  002be	eb 12		 jmp	 SHORT $LN301@tcpnje_exe
$LN300@tcpnje_exe:
  002c0	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002c8	8b 80 60 03 00
	00		 mov	 eax, DWORD PTR [rax+864]
  002ce	89 44 24 58	 mov	 DWORD PTR tv188[rsp], eax
$LN301@tcpnje_exe:
  002d2	8b 44 24 58	 mov	 eax, DWORD PTR tv188[rsp]
  002d6	89 44 24 38	 mov	 DWORD PTR num$[rsp], eax

; 3095 :                 *more = count < dev->numsense ? 1 : 0;

  002da	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002e2	8b 80 60 03 00
	00		 mov	 eax, DWORD PTR [rax+864]
  002e8	39 84 24 a0 01
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  002ef	73 0a		 jae	 SHORT $LN302@tcpnje_exe
  002f1	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv191[rsp], 1
  002f9	eb 08		 jmp	 SHORT $LN303@tcpnje_exe
$LN302@tcpnje_exe:
  002fb	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv191[rsp], 0
$LN303@tcpnje_exe:
  00303	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR more$[rsp]
  0030b	0f b6 4c 24 5c	 movzx	 ecx, BYTE PTR tv191[rsp]
  00310	88 08		 mov	 BYTE PTR [rax], cl

; 3096 :                 memcpy(iobuf, dev->sense, num);

  00312	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  00316	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0031e	48 81 c1 64 03
	00 00		 add	 rcx, 868		; 00000364H
  00325	48 8b bc 24 b8
	01 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  0032d	48 8b f1	 mov	 rsi, rcx
  00330	8b c8		 mov	 ecx, eax
  00332	f3 a4		 rep movsb

; 3097 :                 /* I'm assuming sense bytes should be cleared once read. */
; 3098 :                 /* They don't seem to get cleared anywhere else and its  */
; 3099 :                 /* very confusing when old sense bytes which no longer   */
; 3100 :                 /* apply get presented on the Hercules console.          */
; 3101 :                 memset(dev->sense, 0, dev->numsense);

  00334	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0033c	8b 80 60 03 00
	00		 mov	 eax, DWORD PTR [rax+864]
  00342	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv203[rsp], rax
  0034a	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00352	48 81 c1 64 03
	00 00		 add	 rcx, 868		; 00000364H
  00359	48 8b f9	 mov	 rdi, rcx
  0035c	33 c0		 xor	 eax, eax
  0035e	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv203[rsp]
  00366	f3 aa		 rep stosb

; 3102 :                 *residual = count - num;

  00368	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  0036c	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  00373	2b c8		 sub	 ecx, eax
  00375	8b c1		 mov	 eax, ecx
  00377	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  0037f	89 01		 mov	 DWORD PTR [rcx], eax

; 3103 :                 *unitstat = CSW_CE | CSW_DE;

  00381	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00389	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3104 :                 break;

  0038c	e9 be 36 00 00	 jmp	 $LN14@tcpnje_exe
$LN27@tcpnje_exe:

; 3105 : 
; 3106 :         /*---------------------------------------------------------------*/
; 3107 :         /* SENSE ID                                                      */
; 3108 :         /*---------------------------------------------------------------*/
; 3109 :         case 0xE4:
; 3110 :                 DBGMSG(1024, "HHCTN147D %4.4X:TCPNJE CCW SENSE ID\n",

  00391	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00396	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00399	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0039f	c1 e8 0f	 shr	 eax, 15
  003a2	83 e0 01	 and	 eax, 1
  003a5	85 c0		 test	 eax, eax
  003a7	74 14		 je	 SHORT $LN30@tcpnje_exe
  003a9	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  003ae	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  003b4	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  003b9	85 c0		 test	 eax, eax
  003bb	75 14		 jne	 SHORT $LN29@tcpnje_exe
$LN30@tcpnje_exe:
  003bd	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  003c2	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  003c8	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  003cd	85 c0		 test	 eax, eax
  003cf	74 1b		 je	 SHORT $LN28@tcpnje_exe
$LN29@tcpnje_exe:
  003d1	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003d9	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  003dd	8b d0		 mov	 edx, eax
  003df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160649
  003e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN28@tcpnje_exe:

; 3111 :                         dev->devnum);
; 3112 : 
; 3113 :                 /* Calculate residual byte count */
; 3114 :                 num = (count  <  dev->numdevid) ? count : dev->numdevid;

  003ec	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003f4	8b 80 64 04 00
	00		 mov	 eax, DWORD PTR [rax+1124]
  003fa	39 84 24 a0 01
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  00401	73 0d		 jae	 SHORT $LN304@tcpnje_exe
  00403	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  0040a	89 44 24 60	 mov	 DWORD PTR tv226[rsp], eax
  0040e	eb 12		 jmp	 SHORT $LN305@tcpnje_exe
$LN304@tcpnje_exe:
  00410	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00418	8b 80 64 04 00
	00		 mov	 eax, DWORD PTR [rax+1124]
  0041e	89 44 24 60	 mov	 DWORD PTR tv226[rsp], eax
$LN305@tcpnje_exe:
  00422	8b 44 24 60	 mov	 eax, DWORD PTR tv226[rsp]
  00426	89 44 24 38	 mov	 DWORD PTR num$[rsp], eax

; 3115 :                 *residual = count - num;

  0042a	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  0042e	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  00435	2b c8		 sub	 ecx, eax
  00437	8b c1		 mov	 eax, ecx
  00439	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  00441	89 01		 mov	 DWORD PTR [rcx], eax

; 3116 :                 *more = count < dev->numdevid ? 1 : 0;

  00443	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0044b	8b 80 64 04 00
	00		 mov	 eax, DWORD PTR [rax+1124]
  00451	39 84 24 a0 01
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  00458	73 0a		 jae	 SHORT $LN306@tcpnje_exe
  0045a	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR tv230[rsp], 1
  00462	eb 08		 jmp	 SHORT $LN307@tcpnje_exe
$LN306@tcpnje_exe:
  00464	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv230[rsp], 0
$LN307@tcpnje_exe:
  0046c	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR more$[rsp]
  00474	0f b6 4c 24 64	 movzx	 ecx, BYTE PTR tv230[rsp]
  00479	88 08		 mov	 BYTE PTR [rax], cl

; 3117 : 
; 3118 :                 /* Copy device identifier bytes to channel I/O Buffer */
; 3119 :                 memcpy (iobuf, dev->devid, num);

  0047b	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  0047f	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00487	48 81 c1 68 04
	00 00		 add	 rcx, 1128		; 00000468H
  0048e	48 8b bc 24 b8
	01 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  00496	48 8b f1	 mov	 rsi, rcx
  00499	8b c8		 mov	 ecx, eax
  0049b	f3 a4		 rep movsb

; 3120 : 
; 3121 :                 /* Return unit status */
; 3122 :                 *unitstat = CSW_CE | CSW_DE;

  0049d	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  004a5	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3123 :                 break;

  004a8	e9 a2 35 00 00	 jmp	 $LN14@tcpnje_exe
$LN31@tcpnje_exe:

; 3124 : 
; 3125 :         /*---------------------------------------------------------------*/
; 3126 :         /* ENABLE                                                        */
; 3127 :         /*---------------------------------------------------------------*/
; 3128 :         case 0x27:
; 3129 :                 DBGMSG(1024, "HHCTN148D %4.4X:TCPNJE CCW ENABLE\n",

  004ad	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  004b2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  004b5	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  004bb	c1 e8 0f	 shr	 eax, 15
  004be	83 e0 01	 and	 eax, 1
  004c1	85 c0		 test	 eax, eax
  004c3	74 14		 je	 SHORT $LN34@tcpnje_exe
  004c5	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  004ca	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  004d0	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  004d5	85 c0		 test	 eax, eax
  004d7	75 14		 jne	 SHORT $LN33@tcpnje_exe
$LN34@tcpnje_exe:
  004d9	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  004de	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  004e4	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  004e9	85 c0		 test	 eax, eax
  004eb	74 1b		 je	 SHORT $LN32@tcpnje_exe
$LN33@tcpnje_exe:
  004ed	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004f5	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  004f9	8b d0		 mov	 edx, eax
  004fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160654
  00502	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN32@tcpnje_exe:

; 3130 :                         dev->devnum);
; 3131 : 
; 3132 :                 if (tn->dialin + tn->dialout * 2 == 2)

  00508	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0050d	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00513	c1 e8 02	 shr	 eax, 2
  00516	83 e0 01	 and	 eax, 1
  00519	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0051e	8b 89 64 01 00
	00		 mov	 ecx, DWORD PTR [rcx+356]
  00524	c1 e9 03	 shr	 ecx, 3
  00527	83 e1 01	 and	 ecx, 1
  0052a	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  0052d	83 f8 02	 cmp	 eax, 2
  00530	75 42		 jne	 SHORT $LN35@tcpnje_exe

; 3133 :                 {
; 3134 :                     /* Enable makes no sense on a dial out only line */
; 3135 :                     *unitstat = CSW_CE | CSW_DE | CSW_UC;

  00532	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  0053a	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3136 :                     dev->sense[0] = SENSE_IR;

  0053d	b8 01 00 00 00	 mov	 eax, 1
  00542	48 6b c0 00	 imul	 rax, rax, 0
  00546	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0054e	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 3137 :                     dev->sense[1] = 0x2E; /* Simulate Failed Call In */

  00556	b8 01 00 00 00	 mov	 eax, 1
  0055b	48 6b c0 01	 imul	 rax, rax, 1
  0055f	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00567	c6 84 01 64 03
	00 00 2e	 mov	 BYTE PTR [rcx+rax+868], 46 ; 0000002eH

; 3138 :                     break;

  0056f	e9 db 34 00 00	 jmp	 $LN14@tcpnje_exe
$LN35@tcpnje_exe:

; 3139 :                 }
; 3140 :                 if (tn->haltpending)

  00574	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00579	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0057f	c1 e8 06	 shr	 eax, 6
  00582	83 e0 01	 and	 eax, 1
  00585	85 c0		 test	 eax, eax
  00587	74 29		 je	 SHORT $LN36@tcpnje_exe

; 3141 :                 {
; 3142 :                     *unitstat = CSW_CE | CSW_DE | CSW_UX;

  00589	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00591	c6 00 0d	 mov	 BYTE PTR [rax], 13

; 3143 :                     tn->haltpending = 0;

  00594	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00599	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0059f	83 e0 bf	 and	 eax, -65		; ffffffbfH
  005a2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  005a7	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 3144 :                     break;

  005ad	e9 9d 34 00 00	 jmp	 $LN14@tcpnje_exe
$LN36@tcpnje_exe:

; 3145 :                 }
; 3146 :                 if (!tn->enabled)

  005b2	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  005b7	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  005bd	83 e0 01	 and	 eax, 1
  005c0	85 c0		 test	 eax, eax
  005c2	75 28		 jne	 SHORT $LN37@tcpnje_exe

; 3147 :                 {
; 3148 :                     tn->activeopendelay = 0;

  005c4	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  005c9	c7 80 30 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+304], 0

; 3149 :                     tn->enabled = 1;

  005d3	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  005d8	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  005de	83 c8 01	 or	 eax, 1
  005e1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  005e6	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax
$LN37@tcpnje_exe:

; 3150 :                 }
; 3151 :                 *unitstat = CSW_CE | CSW_DE;

  005ec	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  005f4	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3152 :                 break;

  005f7	e9 53 34 00 00	 jmp	 $LN14@tcpnje_exe
$LN38@tcpnje_exe:

; 3153 : 
; 3154 :         /*---------------------------------------------------------------*/
; 3155 :         /* DISABLE                                                       */
; 3156 :         /*---------------------------------------------------------------*/
; 3157 :         case 0x2F:
; 3158 :                 DBGMSG(1024, "HHCTN149D %4.4X:TCPNJE CCW DISABLE\n",

  005fc	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00601	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00604	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0060a	c1 e8 0f	 shr	 eax, 15
  0060d	83 e0 01	 and	 eax, 1
  00610	85 c0		 test	 eax, eax
  00612	74 14		 je	 SHORT $LN41@tcpnje_exe
  00614	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00619	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0061f	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00624	85 c0		 test	 eax, eax
  00626	75 14		 jne	 SHORT $LN40@tcpnje_exe
$LN41@tcpnje_exe:
  00628	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0062d	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00633	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00638	85 c0		 test	 eax, eax
  0063a	74 1b		 je	 SHORT $LN39@tcpnje_exe
$LN40@tcpnje_exe:
  0063c	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00644	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00648	8b d0		 mov	 edx, eax
  0064a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160662
  00651	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN39@tcpnje_exe:

; 3159 :                         dev->devnum);
; 3160 : 
; 3161 :                 if (tn->state == CLOSED)

  00657	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0065c	83 b8 54 01 00
	00 00		 cmp	 DWORD PTR [rax+340], 0
  00663	75 29		 jne	 SHORT $LN42@tcpnje_exe

; 3162 :                 {
; 3163 :                     *unitstat = CSW_CE | CSW_DE;

  00665	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  0066d	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3164 :                     tn->enabled = 0;

  00670	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00675	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0067b	83 e0 fe	 and	 eax, -2			; fffffffeH
  0067e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  00683	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 3165 :                     break;

  00689	e9 c1 33 00 00	 jmp	 $LN14@tcpnje_exe
$LN42@tcpnje_exe:

; 3166 :                 }
; 3167 :                 tn->curpending = TCPNJE_PEND_DISABLE;

  0068e	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00693	c6 80 60 01 00
	00 05		 mov	 BYTE PTR [rax+352], 5

; 3168 : 
; 3169 :                 /* Tell worker thread to go execute DISABLE and wait for it to complete */
; 3170 :                 if (!tcpnje_wakeup_and_wait(tn, 0))

  0069a	33 d2		 xor	 edx, edx
  0069c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  006a1	e8 00 00 00 00	 call	 tcpnje_wakeup_and_wait
  006a6	85 c0		 test	 eax, eax
  006a8	75 42		 jne	 SHORT $LN43@tcpnje_exe

; 3171 :                 {
; 3172 :                     /* If thread is not running, indicate something is wrong */
; 3173 :                     *unitstat = CSW_CE | CSW_DE | CSW_UC;

  006aa	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  006b2	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3174 :                     dev->sense[0] = SENSE_IR;

  006b5	b8 01 00 00 00	 mov	 eax, 1
  006ba	48 6b c0 00	 imul	 rax, rax, 0
  006be	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  006c6	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 3175 :                     dev->sense[1] = 0;

  006ce	b8 01 00 00 00	 mov	 eax, 1
  006d3	48 6b c0 01	 imul	 rax, rax, 1
  006d7	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  006df	c6 84 01 64 03
	00 00 00	 mov	 BYTE PTR [rcx+rax+868], 0

; 3176 :                     break;

  006e7	e9 63 33 00 00	 jmp	 $LN14@tcpnje_exe
$LN43@tcpnje_exe:

; 3177 :                 }
; 3178 : 
; 3179 :                 tn->enabled = 0;

  006ec	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  006f1	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  006f7	83 e0 fe	 and	 eax, -2			; fffffffeH
  006fa	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  006ff	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 3180 :                 *unitstat = CSW_CE | CSW_DE;

  00705	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  0070d	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3181 :                 break;

  00710	e9 3a 33 00 00	 jmp	 $LN14@tcpnje_exe
$LN44@tcpnje_exe:

; 3182 :         /*---------------------------------------------------------------*/
; 3183 :         /* SET MODE                                                      */
; 3184 :         /*---------------------------------------------------------------*/
; 3185 :         case 0x23:
; 3186 :                 DBGMSG(1024, "HHCTN150D %4.4X:TCPNJE CCW SET MODE %s\n",

  00715	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0071a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0071d	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00723	c1 e8 0f	 shr	 eax, 15
  00726	83 e0 01	 and	 eax, 1
  00729	85 c0		 test	 eax, eax
  0072b	74 14		 je	 SHORT $LN47@tcpnje_exe
  0072d	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00732	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00738	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  0073d	85 c0		 test	 eax, eax
  0073f	75 14		 jne	 SHORT $LN46@tcpnje_exe
$LN47@tcpnje_exe:
  00741	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00746	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0074c	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00751	85 c0		 test	 eax, eax
  00753	74 5f		 je	 SHORT $LN45@tcpnje_exe
$LN46@tcpnje_exe:
  00755	b8 01 00 00 00	 mov	 eax, 1
  0075a	48 6b c0 00	 imul	 rax, rax, 0
  0075e	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  00766	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0076a	83 e0 40	 and	 eax, 64			; 00000040H
  0076d	85 c0		 test	 eax, eax
  0076f	74 11		 je	 SHORT $LN308@tcpnje_exe
  00771	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160669
  00778	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv333[rsp], rax
  00780	eb 0f		 jmp	 SHORT $LN309@tcpnje_exe
$LN308@tcpnje_exe:
  00782	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160670
  00789	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv333[rsp], rax
$LN309@tcpnje_exe:
  00791	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00799	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0079d	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR tv333[rsp]
  007a5	8b d0		 mov	 edx, eax
  007a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160671
  007ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN45@tcpnje_exe:

; 3187 :                         dev->devnum, iobuf[0] & 0x40 ? "EIB" : "NO EIB");
; 3188 : 
; 3189 :                 num = 1;

  007b4	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR num$[rsp], 1

; 3190 :                 *residual = count - num;

  007bc	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  007c0	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  007c7	2b c8		 sub	 ecx, eax
  007c9	8b c1		 mov	 eax, ecx
  007cb	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  007d3	89 01		 mov	 DWORD PTR [rcx], eax

; 3191 :                 *unitstat = CSW_CE | CSW_DE;

  007d5	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  007dd	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3192 : 
; 3193 :                 tn->eibmode = (iobuf[0] & 0x40) ? 1 : 0;

  007e0	b8 01 00 00 00	 mov	 eax, 1
  007e5	48 6b c0 00	 imul	 rax, rax, 0
  007e9	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  007f1	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  007f5	83 e0 40	 and	 eax, 64			; 00000040H
  007f8	85 c0		 test	 eax, eax
  007fa	74 0a		 je	 SHORT $LN310@tcpnje_exe
  007fc	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR tv346[rsp], 1
  00804	eb 08		 jmp	 SHORT $LN311@tcpnje_exe
$LN310@tcpnje_exe:
  00806	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv346[rsp], 0
$LN311@tcpnje_exe:
  0080e	8b 44 24 68	 mov	 eax, DWORD PTR tv346[rsp]
  00812	83 e0 01	 and	 eax, 1
  00815	d1 e0		 shl	 eax, 1
  00817	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0081c	8b 89 64 01 00
	00		 mov	 ecx, DWORD PTR [rcx+356]
  00822	83 e1 fd	 and	 ecx, -3			; fffffffdH
  00825	0b c8		 or	 ecx, eax
  00827	8b c1		 mov	 eax, ecx
  00829	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0082e	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 3194 :                 break;

  00834	e9 16 32 00 00	 jmp	 $LN14@tcpnje_exe
$LN48@tcpnje_exe:

; 3195 : 
; 3196 :         /*---------------------------------------------------------------*/
; 3197 :         /* DIAL                                                          */
; 3198 :         /* Info on DIAL DATA :                                           */
; 3199 :         /* Dial character formats :                                      */
; 3200 :         /*                        x x x x 0 0 0 0 : 0                    */
; 3201 :         /*                            ........                           */
; 3202 :         /*                        x x x x 1 0 0 1 : 9                    */
; 3203 :         /*                        x x x x 1 1 0 0 : SEP                  */
; 3204 :         /*                        x x x x 1 1 0 1 : EON                  */
; 3205 :         /* EON is ignored                                                */
; 3206 :         /* format is : AAA/SEP/BBB/SEP/CCC/SEP/DDD/SEP/PPPP              */
; 3207 :         /*          where A,B,C,D,P are numbers from 0 to 9              */
; 3208 :         /* This perfoms an outgoing call to AAA.BBB.CCC.DDD port PPPP    */
; 3209 :         /*---------------------------------------------------------------*/
; 3210 :         /* NOTE:  DIAL is mostly as it was in commadpt with tweaks to    */
; 3211 :         /*        adapt it to the TCPNJE environment.  It is most        */
; 3212 :         /*        unlikely to function correctly without further work.   */
; 3213 :         /*        I will look into getting it working if interest is     */
; 3214 :         /*        expressed in making use of it.                         */
; 3215 :         /*---------------------------------------------------------------*/
; 3216 :         case 0x29:
; 3217 :                 DBGMSG(1024, "HHCTN151D %4.4X:TCPNJE - CCW DIAL\n",

  00839	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0083e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00841	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00847	c1 e8 0f	 shr	 eax, 15
  0084a	83 e0 01	 and	 eax, 1
  0084d	85 c0		 test	 eax, eax
  0084f	74 14		 je	 SHORT $LN51@tcpnje_exe
  00851	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00856	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0085c	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00861	85 c0		 test	 eax, eax
  00863	75 14		 jne	 SHORT $LN50@tcpnje_exe
$LN51@tcpnje_exe:
  00865	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0086a	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00870	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00875	85 c0		 test	 eax, eax
  00877	74 1b		 je	 SHORT $LN49@tcpnje_exe
$LN50@tcpnje_exe:
  00879	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00881	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00885	8b d0		 mov	 edx, eax
  00887	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160676
  0088e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN49@tcpnje_exe:

; 3218 :                         dev->devnum);
; 3219 : 
; 3220 :                 /* The line must have dial-out capability */
; 3221 :                 if (!tn->dialout)

  00894	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00899	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0089f	c1 e8 03	 shr	 eax, 3
  008a2	83 e0 01	 and	 eax, 1
  008a5	85 c0		 test	 eax, eax
  008a7	75 42		 jne	 SHORT $LN52@tcpnje_exe

; 3222 :                 {
; 3223 :                     *unitstat = CSW_CE | CSW_DE | CSW_UC;

  008a9	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  008b1	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3224 :                     dev->sense[0] = SENSE_CR;

  008b4	b8 01 00 00 00	 mov	 eax, 1
  008b9	48 6b c0 00	 imul	 rax, rax, 0
  008bd	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  008c5	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 3225 :                     dev->sense[1] = 0x04;

  008cd	b8 01 00 00 00	 mov	 eax, 1
  008d2	48 6b c0 01	 imul	 rax, rax, 1
  008d6	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  008de	c6 84 01 64 03
	00 00 04	 mov	 BYTE PTR [rcx+rax+868], 4

; 3226 :                     break;

  008e6	e9 64 31 00 00	 jmp	 $LN14@tcpnje_exe
$LN52@tcpnje_exe:

; 3227 :                 }
; 3228 :                 /* The line must be disabled */
; 3229 :                 if (tn->enabled)

  008eb	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  008f0	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  008f6	83 e0 01	 and	 eax, 1
  008f9	85 c0		 test	 eax, eax
  008fb	74 42		 je	 SHORT $LN53@tcpnje_exe

; 3230 :                 {
; 3231 :                     *unitstat = CSW_CE | CSW_DE | CSW_UC;

  008fd	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00905	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3232 :                     dev->sense[0] = SENSE_CR;

  00908	b8 01 00 00 00	 mov	 eax, 1
  0090d	48 6b c0 00	 imul	 rax, rax, 0
  00911	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00919	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 3233 :                     dev->sense[1] = 0x05;

  00921	b8 01 00 00 00	 mov	 eax, 1
  00926	48 6b c0 01	 imul	 rax, rax, 1
  0092a	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00932	c6 84 01 64 03
	00 00 05	 mov	 BYTE PTR [rcx+rax+868], 5

; 3234 :                     break;

  0093a	e9 10 31 00 00	 jmp	 $LN14@tcpnje_exe
$LN53@tcpnje_exe:

; 3235 :                 }
; 3236 : 
; 3237 :                 DBGMSG(1, "HHCTN077W %4.4X:TCPNJE - DIAL operation is not currently supported by TCPNJE\n",

  0093f	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00944	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00947	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0094d	c1 e8 0f	 shr	 eax, 15
  00950	83 e0 01	 and	 eax, 1
  00953	85 c0		 test	 eax, eax
  00955	74 12		 je	 SHORT $LN56@tcpnje_exe
  00957	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0095c	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00962	83 e0 01	 and	 eax, 1
  00965	85 c0		 test	 eax, eax
  00967	75 12		 jne	 SHORT $LN55@tcpnje_exe
$LN56@tcpnje_exe:
  00969	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0096e	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00974	83 e0 01	 and	 eax, 1
  00977	85 c0		 test	 eax, eax
  00979	74 1b		 je	 SHORT $LN54@tcpnje_exe
$LN55@tcpnje_exe:
  0097b	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00983	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00987	8b d0		 mov	 edx, eax
  00989	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160682
  00990	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN54@tcpnje_exe:

; 3238 :                         dev->devnum);
; 3239 : 
; 3240 :                 num = count > sizeof(tn->dialdata) ? sizeof(tn->dialdata) : count;

  00996	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  0099d	48 83 f8 20	 cmp	 rax, 32			; 00000020H
  009a1	76 0e		 jbe	 SHORT $LN312@tcpnje_exe
  009a3	48 c7 84 24 98
	00 00 00 20 00
	00 00		 mov	 QWORD PTR tv404[rsp], 32 ; 00000020H
  009af	eb 0f		 jmp	 SHORT $LN313@tcpnje_exe
$LN312@tcpnje_exe:
  009b1	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  009b8	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv404[rsp], rax
$LN313@tcpnje_exe:
  009c0	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv404[rsp]
  009c7	89 44 24 38	 mov	 DWORD PTR num$[rsp], eax

; 3241 :                 memcpy(tn->dialdata, iobuf, num);

  009cb	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  009cf	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  009d4	48 83 c1 10	 add	 rcx, 16
  009d8	48 8b f9	 mov	 rdi, rcx
  009db	48 8b b4 24 b8
	01 00 00	 mov	 rsi, QWORD PTR iobuf$[rsp]
  009e3	8b c8		 mov	 ecx, eax
  009e5	f3 a4		 rep movsb

; 3242 :                 tn->curpending = TCPNJE_PEND_DIAL;

  009e7	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  009ec	c6 80 60 01 00
	00 04		 mov	 BYTE PTR [rax+352], 4

; 3243 : 
; 3244 :                 /* Tell worker thread to DIAL and wait for it to complete */
; 3245 :                 if (!tcpnje_wakeup_and_wait(tn, 0))

  009f3	33 d2		 xor	 edx, edx
  009f5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  009fa	e8 00 00 00 00	 call	 tcpnje_wakeup_and_wait
  009ff	85 c0		 test	 eax, eax
  00a01	75 42		 jne	 SHORT $LN57@tcpnje_exe

; 3246 :                 {
; 3247 :                     /* If thread is not running, indicate something is wrong */
; 3248 :                     *unitstat = CSW_CE | CSW_DE | CSW_UC;

  00a03	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00a0b	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3249 :                     dev->sense[0] = SENSE_IR;

  00a0e	b8 01 00 00 00	 mov	 eax, 1
  00a13	48 6b c0 00	 imul	 rax, rax, 0
  00a17	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00a1f	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 3250 :                     dev->sense[1] = 0;

  00a27	b8 01 00 00 00	 mov	 eax, 1
  00a2c	48 6b c0 01	 imul	 rax, rax, 1
  00a30	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00a38	c6 84 01 64 03
	00 00 00	 mov	 BYTE PTR [rcx+rax+868], 0

; 3251 :                     break;

  00a40	e9 0a 30 00 00	 jmp	 $LN14@tcpnje_exe
$LN57@tcpnje_exe:

; 3252 :                 }
; 3253 : 
; 3254 :                 *residual = count - num;

  00a45	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  00a49	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  00a50	2b c8		 sub	 ecx, eax
  00a52	8b c1		 mov	 eax, ecx
  00a54	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  00a5c	89 01		 mov	 DWORD PTR [rcx], eax

; 3255 :                 if (tn->haltpending)

  00a5e	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00a63	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00a69	c1 e8 06	 shr	 eax, 6
  00a6c	83 e0 01	 and	 eax, 1
  00a6f	85 c0		 test	 eax, eax
  00a71	74 29		 je	 SHORT $LN58@tcpnje_exe

; 3256 :                 {
; 3257 :                     *unitstat = CSW_CE | CSW_DE | CSW_UX;

  00a73	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00a7b	c6 00 0d	 mov	 BYTE PTR [rax], 13

; 3258 :                     tn->haltpending = 0;

  00a7e	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00a83	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00a89	83 e0 bf	 and	 eax, -65		; ffffffbfH
  00a8c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  00a91	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 3259 :                     break;

  00a97	e9 b3 2f 00 00	 jmp	 $LN14@tcpnje_exe
$LN58@tcpnje_exe:

; 3260 :                 }
; 3261 :                 if (tn->state < NJECONPRI)

  00a9c	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00aa1	83 b8 54 01 00
	00 08		 cmp	 DWORD PTR [rax+340], 8
  00aa8	7d 58		 jge	 SHORT $LN59@tcpnje_exe

; 3262 :                 {
; 3263 :                     *unitstat = CSW_CE | CSW_DE | CSW_UC;

  00aaa	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00ab2	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3264 :                     dev->sense[0] = SENSE_IR;

  00ab5	b8 01 00 00 00	 mov	 eax, 1
  00aba	48 6b c0 00	 imul	 rax, rax, 0
  00abe	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00ac6	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 3265 :                     dev->sense[1] = 0;

  00ace	b8 01 00 00 00	 mov	 eax, 1
  00ad3	48 6b c0 01	 imul	 rax, rax, 1
  00ad7	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00adf	c6 84 01 64 03
	00 00 00	 mov	 BYTE PTR [rcx+rax+868], 0

; 3266 :                     tn->enabled = 0;

  00ae7	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00aec	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00af2	83 e0 fe	 and	 eax, -2			; fffffffeH
  00af5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  00afa	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 3267 :                 }

  00b00	eb 24		 jmp	 SHORT $LN60@tcpnje_exe
$LN59@tcpnje_exe:

; 3268 :                 else
; 3269 :                 {
; 3270 :                     *unitstat = CSW_CE | CSW_DE;

  00b02	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00b0a	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3271 :                     tn->enabled = 1;

  00b0d	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00b12	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00b18	83 c8 01	 or	 eax, 1
  00b1b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  00b20	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax
$LN60@tcpnje_exe:

; 3272 :                 }
; 3273 :                 break;

  00b26	e9 24 2f 00 00	 jmp	 $LN14@tcpnje_exe
$LN61@tcpnje_exe:

; 3274 : 
; 3275 :         /*---------------------------------------------------------------*/
; 3276 :         /* READ                                                          */
; 3277 :         /*---------------------------------------------------------------*/
; 3278 :         case 0x02:
; 3279 :                 DBGMSG(1024, "HHCTN152D %4.4X:TCPNJE CCW READ count %d\n",

  00b2b	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00b30	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00b33	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00b39	c1 e8 0f	 shr	 eax, 15
  00b3c	83 e0 01	 and	 eax, 1
  00b3f	85 c0		 test	 eax, eax
  00b41	74 14		 je	 SHORT $LN64@tcpnje_exe
  00b43	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00b48	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00b4e	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00b53	85 c0		 test	 eax, eax
  00b55	75 14		 jne	 SHORT $LN63@tcpnje_exe
$LN64@tcpnje_exe:
  00b57	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00b5c	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00b62	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00b67	85 c0		 test	 eax, eax
  00b69	74 23		 je	 SHORT $LN62@tcpnje_exe
$LN63@tcpnje_exe:
  00b6b	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b73	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00b77	44 8b 84 24 a0
	01 00 00	 mov	 r8d, DWORD PTR count$[rsp]
  00b7f	8b d0		 mov	 edx, eax
  00b81	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160691
  00b88	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN62@tcpnje_exe:

; 3280 :                         dev->devnum, count);
; 3281 : 
; 3282 :                 /*  Read strategy is complicated in order to avoid       */
; 3283 :                 /*  delaying transmission of files being sent in one     */
; 3284 :                 /*  direction while the link is idle in the other        */
; 3285 :                 /*  direction, to avoid files being sent in opposite     */
; 3286 :                 /*  directions at the same time interfering with each    */
; 3287 :                 /*  other or getting delayed and to avoid wasting        */
; 3288 :                 /*  resources in tight loops when the link is idle in    */
; 3289 :                 /*  both directions.  It is also necessary to implement  */
; 3290 :                 /*  flow control.  This is how it is supposed to work:   */
; 3291 :                 /*                                                       */
; 3292 :                 /*  - Check for any data remaining in input buffer from  */
; 3293 :                 /*    a previous read.                                   */
; 3294 :                 /*  - If no data, using a very short timeout, check for  */
; 3295 :                 /*    incoming data not yet read from the TCP/IP stack.  */
; 3296 :                 /*  - If no data and outgoing buffers have been written  */
; 3297 :                 /*    out but not acknowledged, fake an acknowledgement. */
; 3298 :                 /*  - If there was no outgoing data to acknowledge, try  */
; 3299 :                 /*    reading from the network with a longer timeout.    */
; 3300 :                 /*  - If the read times out and the link is connected    */
; 3301 :                 /*    and signed on, fake an acknowledgement anyway.     */
; 3302 :                 /*  - If link is not signed on, fail with timeout error. */
; 3303 :                 /*                                                       */
; 3304 :                 /*  For each buffer presented to RSCS, alter the FCS     */
; 3305 :                 /*  according to whether outgoing data from RSCS can be  */
; 3306 :                 /*  accepted at the moment.                              */
; 3307 : 
; 3308 :                 /* Check the line is enabled */
; 3309 :                 if (!tn->enabled)

  00b8e	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00b93	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00b99	83 e0 01	 and	 eax, 1
  00b9c	85 c0		 test	 eax, eax
  00b9e	75 53		 jne	 SHORT $LN65@tcpnje_exe

; 3310 :                 {
; 3311 :                     *residual = count;

  00ba0	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  00ba8	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  00baf	89 08		 mov	 DWORD PTR [rax], ecx

; 3312 :                     *unitstat = CSW_CE | CSW_DE | CSW_UC;

  00bb1	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00bb9	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3313 :                     dev->sense[0] = SENSE_CR;

  00bbc	b8 01 00 00 00	 mov	 eax, 1
  00bc1	48 6b c0 00	 imul	 rax, rax, 0
  00bc5	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00bcd	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 3314 :                     dev->sense[1] = 0x06;

  00bd5	b8 01 00 00 00	 mov	 eax, 1
  00bda	48 6b c0 01	 imul	 rax, rax, 1
  00bde	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00be6	c6 84 01 64 03
	00 00 06	 mov	 BYTE PTR [rcx+rax+868], 6

; 3315 :                     break;

  00bee	e9 5c 2e 00 00	 jmp	 $LN14@tcpnje_exe
$LN65@tcpnje_exe:

; 3316 :                 }
; 3317 : 
; 3318 :                 /* Data lost condition cleared by read (if it was ever set)  */
; 3319 :                 tn->datalostcond = 0;

  00bf3	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00bf8	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00bfe	0f ba f0 0f	 btr	 eax, 15
  00c02	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  00c07	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 3320 : 
; 3321 :                 /* If link partner has gone away, tell RSCS to stop link.    */
; 3322 :                 if (tn->signoff)

  00c0d	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00c12	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00c18	c1 e8 0e	 shr	 eax, 14
  00c1b	83 e0 01	 and	 eax, 1
  00c1e	85 c0		 test	 eax, eax
  00c20	0f 84 9d 01 00
	00		 je	 $LN66@tcpnje_exe

; 3323 :                 {
; 3324 :                     num = count < sizeof(signoff) ? count : sizeof(signoff);

  00c26	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  00c2d	48 83 f8 0a	 cmp	 rax, 10
  00c31	73 11		 jae	 SHORT $LN314@tcpnje_exe
  00c33	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  00c3a	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv481[rsp], rax
  00c42	eb 0c		 jmp	 SHORT $LN315@tcpnje_exe
$LN314@tcpnje_exe:
  00c44	48 c7 84 24 a0
	00 00 00 0a 00
	00 00		 mov	 QWORD PTR tv481[rsp], 10
$LN315@tcpnje_exe:
  00c50	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv481[rsp]
  00c57	89 44 24 38	 mov	 DWORD PTR num$[rsp], eax

; 3325 :                     memcpy(iobuf, signoff, num);

  00c5b	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  00c5f	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR signoff$[rsp]
  00c67	48 8b bc 24 b8
	01 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  00c6f	48 8b f1	 mov	 rsi, rcx
  00c72	8b c8		 mov	 ecx, eax
  00c74	f3 a4		 rep movsb

; 3326 :                     if (tn->holdoutgoing)

  00c76	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00c7b	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00c81	c1 e8 09	 shr	 eax, 9
  00c84	83 e0 01	 and	 eax, 1
  00c87	85 c0		 test	 eax, eax
  00c89	74 26		 je	 SHORT $LN67@tcpnje_exe

; 3327 :                     {
; 3328 :                         /* Outgoing buffers are full.  Fix FCS to stop RSCS sending more */
; 3329 :                         tpb->fcs[0] = 0xc0;

  00c8b	b8 01 00 00 00	 mov	 eax, 1
  00c90	48 6b c0 00	 imul	 rax, rax, 0
  00c94	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  00c99	c6 44 01 03 c0	 mov	 BYTE PTR [rcx+rax+3], 192 ; 000000c0H

; 3330 :                         tpb->fcs[1] = 0x80;

  00c9e	b8 01 00 00 00	 mov	 eax, 1
  00ca3	48 6b c0 01	 imul	 rax, rax, 1
  00ca7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  00cac	c6 44 01 03 80	 mov	 BYTE PTR [rcx+rax+3], 128 ; 00000080H
$LN67@tcpnje_exe:

; 3331 :                     }
; 3332 : 
; 3333 :                     DBGMSG(2048, "HHCTN078I %4.4X:TCPNJE READ - inserting signoff BCB: %2.2X FCS: %2.2X%2.2X\n",

  00cb1	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00cb6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00cb9	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00cbf	c1 e8 0f	 shr	 eax, 15
  00cc2	83 e0 01	 and	 eax, 1
  00cc5	85 c0		 test	 eax, eax
  00cc7	74 14		 je	 SHORT $LN70@tcpnje_exe
  00cc9	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00cce	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00cd4	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00cd9	85 c0		 test	 eax, eax
  00cdb	75 14		 jne	 SHORT $LN69@tcpnje_exe
$LN70@tcpnje_exe:
  00cdd	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00ce2	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00ce8	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00ced	85 c0		 test	 eax, eax
  00cef	74 54		 je	 SHORT $LN68@tcpnje_exe
$LN69@tcpnje_exe:
  00cf1	b8 01 00 00 00	 mov	 eax, 1
  00cf6	48 6b c0 01	 imul	 rax, rax, 1
  00cfa	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  00cff	0f b6 44 01 03	 movzx	 eax, BYTE PTR [rcx+rax+3]
  00d04	b9 01 00 00 00	 mov	 ecx, 1
  00d09	48 6b c9 00	 imul	 rcx, rcx, 0
  00d0d	48 8b 54 24 40	 mov	 rdx, QWORD PTR tpb$[rsp]
  00d12	0f b6 4c 0a 03	 movzx	 ecx, BYTE PTR [rdx+rcx+3]
  00d17	48 8b 54 24 40	 mov	 rdx, QWORD PTR tpb$[rsp]
  00d1c	0f b6 52 02	 movzx	 edx, BYTE PTR [rdx+2]
  00d20	48 8b bc 24 80
	01 00 00	 mov	 rdi, QWORD PTR dev$[rsp]
  00d28	0f b7 7f 48	 movzx	 edi, WORD PTR [rdi+72]
  00d2c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00d30	44 8b c9	 mov	 r9d, ecx
  00d33	44 8b c2	 mov	 r8d, edx
  00d36	8b d7		 mov	 edx, edi
  00d38	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160698
  00d3f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN68@tcpnje_exe:

; 3334 :                             dev->devnum, tpb->bcb, tpb->fcs[0], tpb->fcs[1]);
; 3335 : 
; 3336 :                     if (count < sizeof(signoff))

  00d45	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  00d4c	48 83 f8 0a	 cmp	 rax, 10
  00d50	73 0b		 jae	 SHORT $LN71@tcpnje_exe

; 3337 :                     {
; 3338 :                         *more = 1;

  00d52	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR more$[rsp]
  00d5a	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN71@tcpnje_exe:

; 3339 :                     }
; 3340 :                     *residual = count - num;

  00d5d	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  00d61	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  00d68	2b c8		 sub	 ecx, eax
  00d6a	8b c1		 mov	 eax, ecx
  00d6c	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  00d74	89 01		 mov	 DWORD PTR [rcx], eax

; 3341 :                     *unitstat = CSW_CE | CSW_DE;

  00d76	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00d7e	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3342 :                     logdump("Read S", dev, iobuf, num);

  00d81	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  00d85	44 8b c8	 mov	 r9d, eax
  00d88	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR iobuf$[rsp]
  00d90	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00d98	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160700
  00d9f	e8 00 00 00 00	 call	 logdump

; 3343 :                     tn->signoff = 0;

  00da4	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00da9	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00daf	0f ba f0 0e	 btr	 eax, 14
  00db3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  00db8	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 3344 :                     break;

  00dbe	e9 8c 2c 00 00	 jmp	 $LN14@tcpnje_exe
$LN66@tcpnje_exe:

; 3345 :                 }
; 3346 : 
; 3347 :                 /* Check if input is suspended due to receipt of an FCS from */
; 3348 :                 /* RSCS with one or more streams disabled or the wait-a-bit  */
; 3349 :                 /* bit set.  If so, don't pass any incoming data this time.  */
; 3350 :                 if (tn->holdincoming)

  00dc3	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00dc8	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00dce	c1 e8 08	 shr	 eax, 8
  00dd1	83 e0 01	 and	 eax, 1
  00dd4	85 c0		 test	 eax, eax
  00dd6	0f 84 83 01 00
	00		 je	 $LN72@tcpnje_exe

; 3351 :                 {
; 3352 :                     /* Reply to RSCS with a null buffer instead of real data.*/
; 3353 :                     /* Use a null buffer instead of DLE ACK0 in order that   */
; 3354 :                     /* we do not inadvertently tell RSCS to send more data   */
; 3355 :                     /* out when outgoing data is held due to lack of buffers.*/
; 3356 :                     num = count < sizeof(nullbuffer) ? count : sizeof(nullbuffer);

  00ddc	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  00de3	48 83 f8 08	 cmp	 rax, 8
  00de7	73 11		 jae	 SHORT $LN316@tcpnje_exe
  00de9	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  00df0	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv545[rsp], rax
  00df8	eb 0c		 jmp	 SHORT $LN317@tcpnje_exe
$LN316@tcpnje_exe:
  00dfa	48 c7 84 24 a8
	00 00 00 08 00
	00 00		 mov	 QWORD PTR tv545[rsp], 8
$LN317@tcpnje_exe:
  00e06	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR tv545[rsp]
  00e0d	89 44 24 38	 mov	 DWORD PTR num$[rsp], eax

; 3357 :                     memcpy(iobuf, nullbuffer, num);

  00e11	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  00e15	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR nullbuffer$[rsp]
  00e1d	48 8b bc 24 b8
	01 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  00e25	48 8b f1	 mov	 rsi, rcx
  00e28	8b c8		 mov	 ecx, eax
  00e2a	f3 a4		 rep movsb

; 3358 :                     if (tn->holdoutgoing)

  00e2c	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00e31	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00e37	c1 e8 09	 shr	 eax, 9
  00e3a	83 e0 01	 and	 eax, 1
  00e3d	85 c0		 test	 eax, eax
  00e3f	74 26		 je	 SHORT $LN73@tcpnje_exe

; 3359 :                     {
; 3360 :                         /* Outgoing buffers are full.  Fix FCS to stop RSCS sending more */
; 3361 :                         tpb->fcs[0] = 0xc0;

  00e41	b8 01 00 00 00	 mov	 eax, 1
  00e46	48 6b c0 00	 imul	 rax, rax, 0
  00e4a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  00e4f	c6 44 01 03 c0	 mov	 BYTE PTR [rcx+rax+3], 192 ; 000000c0H

; 3362 :                         tpb->fcs[1] = 0x80;

  00e54	b8 01 00 00 00	 mov	 eax, 1
  00e59	48 6b c0 01	 imul	 rax, rax, 1
  00e5d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  00e62	c6 44 01 03 80	 mov	 BYTE PTR [rcx+rax+3], 128 ; 00000080H
$LN73@tcpnje_exe:

; 3363 :                     }
; 3364 : 
; 3365 :                     DBGMSG(2048, "HHCTN153D %4.4X:TCPNJE READ - inserting incoming null buffer BCB: %2.2X FCS: %2.2X%2.2X because incoming data is currently held\n",

  00e67	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00e6c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00e6f	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00e75	c1 e8 0f	 shr	 eax, 15
  00e78	83 e0 01	 and	 eax, 1
  00e7b	85 c0		 test	 eax, eax
  00e7d	74 14		 je	 SHORT $LN76@tcpnje_exe
  00e7f	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00e84	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00e8a	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00e8f	85 c0		 test	 eax, eax
  00e91	75 14		 jne	 SHORT $LN75@tcpnje_exe
$LN76@tcpnje_exe:
  00e93	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00e98	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00e9e	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00ea3	85 c0		 test	 eax, eax
  00ea5	74 54		 je	 SHORT $LN74@tcpnje_exe
$LN75@tcpnje_exe:
  00ea7	b8 01 00 00 00	 mov	 eax, 1
  00eac	48 6b c0 01	 imul	 rax, rax, 1
  00eb0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  00eb5	0f b6 44 01 03	 movzx	 eax, BYTE PTR [rcx+rax+3]
  00eba	b9 01 00 00 00	 mov	 ecx, 1
  00ebf	48 6b c9 00	 imul	 rcx, rcx, 0
  00ec3	48 8b 54 24 40	 mov	 rdx, QWORD PTR tpb$[rsp]
  00ec8	0f b6 4c 0a 03	 movzx	 ecx, BYTE PTR [rdx+rcx+3]
  00ecd	48 8b 54 24 40	 mov	 rdx, QWORD PTR tpb$[rsp]
  00ed2	0f b6 52 02	 movzx	 edx, BYTE PTR [rdx+2]
  00ed6	48 8b bc 24 80
	01 00 00	 mov	 rdi, QWORD PTR dev$[rsp]
  00ede	0f b7 7f 48	 movzx	 edi, WORD PTR [rdi+72]
  00ee2	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00ee6	44 8b c9	 mov	 r9d, ecx
  00ee9	44 8b c2	 mov	 r8d, edx
  00eec	8b d7		 mov	 edx, edi
  00eee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160706
  00ef5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN74@tcpnje_exe:

; 3366 :                             dev->devnum, tpb->bcb, tpb->fcs[0], tpb->fcs[1]);
; 3367 : 
; 3368 :                     if (count < sizeof(nullbuffer))

  00efb	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  00f02	48 83 f8 08	 cmp	 rax, 8
  00f06	73 0b		 jae	 SHORT $LN77@tcpnje_exe

; 3369 :                     {
; 3370 :                         *more = 1;

  00f08	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR more$[rsp]
  00f10	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN77@tcpnje_exe:

; 3371 :                     }
; 3372 :                     *residual = count - num;

  00f13	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  00f17	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  00f1e	2b c8		 sub	 ecx, eax
  00f20	8b c1		 mov	 eax, ecx
  00f22	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  00f2a	89 01		 mov	 DWORD PTR [rcx], eax

; 3373 :                     *unitstat = CSW_CE | CSW_DE;

  00f2c	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00f34	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3374 :                     logdump("Read H", dev, iobuf, num);

  00f37	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  00f3b	44 8b c8	 mov	 r9d, eax
  00f3e	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR iobuf$[rsp]
  00f46	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00f4e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160708
  00f55	e8 00 00 00 00	 call	 logdump

; 3375 :                     break;

  00f5a	e9 f0 2a 00 00	 jmp	 $LN14@tcpnje_exe
$LN72@tcpnje_exe:

; 3376 :                 }
; 3377 : 
; 3378 :                 /* Check for any remaining data in the input buffer from */
; 3379 :                 /* a previous read operation.  There likely will be some */
; 3380 :                 /* because each TTB can contain multiple TTRs.  We need  */
; 3381 :                 /* to get these sent on to RSCS before we accept more    */
; 3382 :                 /* data from the network, otherwise we will rapidly run  */
; 3383 :                 /* out of buffer space.                                  */
; 3384 :                 if (!tn->tcpinbuf.valid || (tn->tcpinbuf.valid &&

  00f5f	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00f64	0f b6 80 d8 00
	00 00		 movzx	 eax, BYTE PTR [rax+216]
  00f6b	85 c0		 test	 eax, eax
  00f6d	74 2c		 je	 SHORT $LN79@tcpnje_exe
  00f6f	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00f74	0f b6 80 d8 00
	00 00		 movzx	 eax, BYTE PTR [rax+216]
  00f7b	85 c0		 test	 eax, eax
  00f7d	0f 84 fc 00 00
	00		 je	 $LN78@tcpnje_exe
  00f83	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00f88	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00f8f	0f b7 40 0a	 movzx	 eax, WORD PTR [rax+10]
  00f93	85 c0		 test	 eax, eax
  00f95	0f 85 e4 00 00
	00		 jne	 $LN78@tcpnje_exe
$LN79@tcpnje_exe:

; 3385 :                    (tn->tcpinbuf.outptr.block->record.ttr.length == 0)))
; 3386 :                 {
; 3387 :                     /* Nothing in the local buffer.  Do a quick    */
; 3388 :                     /* poll to see if there is any incoming data   */
; 3389 :                     /* waiting in the TCP/IP stack buffer.         */
; 3390 :                     tn->curpending = TCPNJE_PEND_READ;

  00f9b	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00fa0	c6 80 60 01 00
	00 01		 mov	 BYTE PTR [rax+352], 1

; 3391 :                     /* Set minimum timeout to ensure response ASAP */
; 3392 :                     tn->timeout = -1;

  00fa7	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00fac	c7 80 2c 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+300], -1

; 3393 : 
; 3394 :                     /* Tell worker thread to get more data and wait for it to do this */
; 3395 :                     if (!tcpnje_wakeup_and_wait(tn, 0))

  00fb6	33 d2		 xor	 edx, edx
  00fb8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  00fbd	e8 00 00 00 00	 call	 tcpnje_wakeup_and_wait
  00fc2	85 c0		 test	 eax, eax
  00fc4	75 42		 jne	 SHORT $LN80@tcpnje_exe

; 3396 :                     {
; 3397 :                         /* If thread is not running, indicate something is wrong */
; 3398 :                         *unitstat = CSW_CE | CSW_DE | CSW_UC;

  00fc6	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00fce	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3399 :                         dev->sense[0] = SENSE_IR;

  00fd1	b8 01 00 00 00	 mov	 eax, 1
  00fd6	48 6b c0 00	 imul	 rax, rax, 0
  00fda	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00fe2	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 3400 :                         dev->sense[1] = 0;

  00fea	b8 01 00 00 00	 mov	 eax, 1
  00fef	48 6b c0 01	 imul	 rax, rax, 1
  00ff3	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00ffb	c6 84 01 64 03
	00 00 00	 mov	 BYTE PTR [rcx+rax+868], 0

; 3401 :                         break;

  01003	e9 47 2a 00 00	 jmp	 $LN14@tcpnje_exe
$LN80@tcpnje_exe:

; 3402 :                     }
; 3403 : 
; 3404 :                     /* Point to the first record in the new buffer */
; 3405 :                     if (tn->tcpinbuf.valid)

  01008	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0100d	0f b6 80 d8 00
	00 00		 movzx	 eax, BYTE PTR [rax+216]
  01014	85 c0		 test	 eax, eax
  01016	74 18		 je	 SHORT $LN81@tcpnje_exe

; 3406 :                     {
; 3407 :                         tn->tcpinbuf.outptr.address =

  01018	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0101d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  01022	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  01029	48 89 88 c8 00
	00 00		 mov	 QWORD PTR [rax+200], rcx
$LN81@tcpnje_exe:

; 3408 :                             tn->tcpinbuf.base.address;
; 3409 :                     }
; 3410 : 
; 3411 :                     /* If the I/O was halted - indicate Unit Exception */
; 3412 :                     if (tn->haltpending)

  01030	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01035	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0103b	c1 e8 06	 shr	 eax, 6
  0103e	83 e0 01	 and	 eax, 1
  01041	85 c0		 test	 eax, eax
  01043	74 3a		 je	 SHORT $LN82@tcpnje_exe

; 3413 :                     {
; 3414 :                         *residual = count;

  01045	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  0104d	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  01054	89 08		 mov	 DWORD PTR [rax], ecx

; 3415 :                         *unitstat = CSW_CE | CSW_DE | CSW_UX;

  01056	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  0105e	c6 00 0d	 mov	 BYTE PTR [rax], 13

; 3416 :                         tn->haltpending = 0;

  01061	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01066	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0106c	83 e0 bf	 and	 eax, -65		; ffffffbfH
  0106f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  01074	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 3417 :                         break;

  0107a	e9 d0 29 00 00	 jmp	 $LN14@tcpnje_exe
$LN82@tcpnje_exe:
$LN78@tcpnje_exe:

; 3418 :                     }
; 3419 :                 }
; 3420 : 
; 3421 :                 /* If there wasn't any data waiting in incoming network  */
; 3422 :                 /* buffers but we are connected and signed on, check if  */
; 3423 :                 /* there are any outgoing buffers which have not yet     */
; 3424 :                 /* been ACKed to RSCS.  If so, use a null buffer to      */
; 3425 :                 /* present an ACK to RSCS and avoid delay due to timeout.*/
; 3426 : 
; 3427 :                 if (!tn->tcpinbuf.valid || (tn->tcpinbuf.valid &&

  0107f	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01084	0f b6 80 d8 00
	00 00		 movzx	 eax, BYTE PTR [rax+216]
  0108b	85 c0		 test	 eax, eax
  0108d	74 2c		 je	 SHORT $LN84@tcpnje_exe
  0108f	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01094	0f b6 80 d8 00
	00 00		 movzx	 eax, BYTE PTR [rax+216]
  0109b	85 c0		 test	 eax, eax
  0109d	0f 84 c7 02 00
	00		 je	 $LN83@tcpnje_exe
  010a3	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  010a8	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  010af	0f b7 40 0a	 movzx	 eax, WORD PTR [rax+10]
  010b3	85 c0		 test	 eax, eax
  010b5	0f 85 af 02 00
	00		 jne	 $LN83@tcpnje_exe
$LN84@tcpnje_exe:

; 3428 :                    (tn->tcpinbuf.outptr.block->record.ttr.length == 0)))
; 3429 :                 {
; 3430 :                     if ((tn->state > NJEACKRCD) && (tn->ackcount > 0))

  010bb	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  010c0	83 b8 54 01 00
	00 07		 cmp	 DWORD PTR [rax+340], 7
  010c7	0f 8e b2 01 00
	00		 jle	 $LN85@tcpnje_exe
  010cd	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  010d2	83 b8 08 01 00
	00 00		 cmp	 DWORD PTR [rax+264], 0
  010d9	0f 8e a0 01 00
	00		 jle	 $LN85@tcpnje_exe

; 3431 :                     {
; 3432 :                         /* Present null buffer to RSCS to avoid timeout  */
; 3433 :                         num = count < sizeof(nullbuffer) ? count : sizeof(nullbuffer);

  010df	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  010e6	48 83 f8 08	 cmp	 rax, 8
  010ea	73 11		 jae	 SHORT $LN318@tcpnje_exe
  010ec	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  010f3	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv650[rsp], rax
  010fb	eb 0c		 jmp	 SHORT $LN319@tcpnje_exe
$LN318@tcpnje_exe:
  010fd	48 c7 84 24 b0
	00 00 00 08 00
	00 00		 mov	 QWORD PTR tv650[rsp], 8
$LN319@tcpnje_exe:
  01109	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR tv650[rsp]
  01110	89 44 24 38	 mov	 DWORD PTR num$[rsp], eax

; 3434 :                         memcpy(iobuf, nullbuffer, num);

  01114	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  01118	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR nullbuffer$[rsp]
  01120	48 8b bc 24 b8
	01 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  01128	48 8b f1	 mov	 rsi, rcx
  0112b	8b c8		 mov	 ecx, eax
  0112d	f3 a4		 rep movsb

; 3435 :                         if (tn->holdoutgoing)

  0112f	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01134	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0113a	c1 e8 09	 shr	 eax, 9
  0113d	83 e0 01	 and	 eax, 1
  01140	85 c0		 test	 eax, eax
  01142	74 26		 je	 SHORT $LN87@tcpnje_exe

; 3436 :                         {
; 3437 :                             /* Outgoing buffers are full.  Fix FCS to stop RSCS sending more */
; 3438 :                             tpb->fcs[0] = 0xc0;

  01144	b8 01 00 00 00	 mov	 eax, 1
  01149	48 6b c0 00	 imul	 rax, rax, 0
  0114d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  01152	c6 44 01 03 c0	 mov	 BYTE PTR [rcx+rax+3], 192 ; 000000c0H

; 3439 :                             tpb->fcs[1] = 0x80;

  01157	b8 01 00 00 00	 mov	 eax, 1
  0115c	48 6b c0 01	 imul	 rax, rax, 1
  01160	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  01165	c6 44 01 03 80	 mov	 BYTE PTR [rcx+rax+3], 128 ; 00000080H
$LN87@tcpnje_exe:

; 3440 :                         }
; 3441 : 
; 3442 :                         DBGMSG(2048, "HHCTN154D %4.4X:TCPNJE READ - inserting incoming null buffer BCB: %2.2X FCS: %2.2X%2.2X in lieu of ACK\n",

  0116a	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0116f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01172	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01178	c1 e8 0f	 shr	 eax, 15
  0117b	83 e0 01	 and	 eax, 1
  0117e	85 c0		 test	 eax, eax
  01180	74 14		 je	 SHORT $LN90@tcpnje_exe
  01182	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01187	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0118d	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  01192	85 c0		 test	 eax, eax
  01194	75 14		 jne	 SHORT $LN89@tcpnje_exe
$LN90@tcpnje_exe:
  01196	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0119b	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  011a1	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  011a6	85 c0		 test	 eax, eax
  011a8	74 54		 je	 SHORT $LN88@tcpnje_exe
$LN89@tcpnje_exe:
  011aa	b8 01 00 00 00	 mov	 eax, 1
  011af	48 6b c0 01	 imul	 rax, rax, 1
  011b3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  011b8	0f b6 44 01 03	 movzx	 eax, BYTE PTR [rcx+rax+3]
  011bd	b9 01 00 00 00	 mov	 ecx, 1
  011c2	48 6b c9 00	 imul	 rcx, rcx, 0
  011c6	48 8b 54 24 40	 mov	 rdx, QWORD PTR tpb$[rsp]
  011cb	0f b6 4c 0a 03	 movzx	 ecx, BYTE PTR [rdx+rcx+3]
  011d0	48 8b 54 24 40	 mov	 rdx, QWORD PTR tpb$[rsp]
  011d5	0f b6 52 02	 movzx	 edx, BYTE PTR [rdx+2]
  011d9	48 8b bc 24 80
	01 00 00	 mov	 rdi, QWORD PTR dev$[rsp]
  011e1	0f b7 7f 48	 movzx	 edi, WORD PTR [rdi+72]
  011e5	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  011e9	44 8b c9	 mov	 r9d, ecx
  011ec	44 8b c2	 mov	 r8d, edx
  011ef	8b d7		 mov	 edx, edi
  011f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160722
  011f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN88@tcpnje_exe:

; 3443 :                                 dev->devnum, tpb->bcb, tpb->fcs[0], tpb->fcs[1]);
; 3444 : 
; 3445 :                         if (count < sizeof(nullbuffer))

  011fe	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  01205	48 83 f8 08	 cmp	 rax, 8
  01209	73 0b		 jae	 SHORT $LN91@tcpnje_exe

; 3446 :                         {
; 3447 :                             *more = 1;

  0120b	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR more$[rsp]
  01213	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN91@tcpnje_exe:

; 3448 :                         }
; 3449 :                         *residual = count - num;

  01216	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  0121a	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  01221	2b c8		 sub	 ecx, eax
  01223	8b c1		 mov	 eax, ecx
  01225	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  0122d	89 01		 mov	 DWORD PTR [rcx], eax

; 3450 :                         *unitstat = CSW_CE | CSW_DE;

  0122f	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  01237	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3451 :                         logdump("Read A", dev, iobuf, num);

  0123a	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  0123e	44 8b c8	 mov	 r9d, eax
  01241	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR iobuf$[rsp]
  01249	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  01251	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160724
  01258	e8 00 00 00 00	 call	 logdump

; 3452 :                         /* Count this response as one ACK */
; 3453 :                         tn->ackcount--;

  0125d	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01262	8b 80 08 01 00
	00		 mov	 eax, DWORD PTR [rax+264]
  01268	ff c8		 dec	 eax
  0126a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0126f	89 81 08 01 00
	00		 mov	 DWORD PTR [rcx+264], eax

; 3454 :                         break;

  01275	e9 d5 27 00 00	 jmp	 $LN14@tcpnje_exe

; 3455 :                     }

  0127a	e9 eb 00 00 00	 jmp	 $LN86@tcpnje_exe
$LN85@tcpnje_exe:

; 3456 :                     else
; 3457 :                     {
; 3458 :                         /* If not connected and signed on or RSCS has not */
; 3459 :                         /* sent out anything that has not been ACKed, we  */
; 3460 :                         /* just have to wait for real data to arrive or   */
; 3461 :                         /* time out after a number of seconds.            */
; 3462 :                         tn->curpending = TCPNJE_PEND_READ;

  0127f	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01284	c6 80 60 01 00
	00 01		 mov	 BYTE PTR [rax+352], 1

; 3463 :                         /* Set normal read timeout (typically 3 seconds)  */
; 3464 :                         tn->timeout = tn->rto;

  0128b	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01290	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  01295	8b 89 34 01 00
	00		 mov	 ecx, DWORD PTR [rcx+308]
  0129b	89 88 2c 01 00
	00		 mov	 DWORD PTR [rax+300], ecx

; 3465 : 
; 3466 :                         /* Tell worker thread to get more data.  Wait for it to do this. */
; 3467 :                         if (!tcpnje_wakeup_and_wait(tn, 0))

  012a1	33 d2		 xor	 edx, edx
  012a3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  012a8	e8 00 00 00 00	 call	 tcpnje_wakeup_and_wait
  012ad	85 c0		 test	 eax, eax
  012af	75 42		 jne	 SHORT $LN92@tcpnje_exe

; 3468 :                         {
; 3469 :                             /* If thread is not running, indicate something is wrong */
; 3470 :                             *unitstat = CSW_CE | CSW_DE | CSW_UC;

  012b1	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  012b9	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3471 :                             dev->sense[0] = SENSE_IR;

  012bc	b8 01 00 00 00	 mov	 eax, 1
  012c1	48 6b c0 00	 imul	 rax, rax, 0
  012c5	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  012cd	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 3472 :                             dev->sense[1] = 0;

  012d5	b8 01 00 00 00	 mov	 eax, 1
  012da	48 6b c0 01	 imul	 rax, rax, 1
  012de	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  012e6	c6 84 01 64 03
	00 00 00	 mov	 BYTE PTR [rcx+rax+868], 0

; 3473 :                             break;

  012ee	e9 5c 27 00 00	 jmp	 $LN14@tcpnje_exe
$LN92@tcpnje_exe:

; 3474 :                         }
; 3475 : 
; 3476 :                         /* Point to the first record in the new buffer    */
; 3477 :                         if (tn->tcpinbuf.valid)

  012f3	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  012f8	0f b6 80 d8 00
	00 00		 movzx	 eax, BYTE PTR [rax+216]
  012ff	85 c0		 test	 eax, eax
  01301	74 18		 je	 SHORT $LN93@tcpnje_exe

; 3478 :                         {
; 3479 :                             tn->tcpinbuf.outptr.address =

  01303	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01308	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0130d	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  01314	48 89 88 c8 00
	00 00		 mov	 QWORD PTR [rax+200], rcx
$LN93@tcpnje_exe:

; 3480 :                                 tn->tcpinbuf.base.address;
; 3481 :                         }
; 3482 : 
; 3483 :                         /* If the I/O was halted - indicate Unit Exception */
; 3484 :                         if (tn->haltpending)

  0131b	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01320	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  01326	c1 e8 06	 shr	 eax, 6
  01329	83 e0 01	 and	 eax, 1
  0132c	85 c0		 test	 eax, eax
  0132e	74 3a		 je	 SHORT $LN94@tcpnje_exe

; 3485 :                         {
; 3486 :                             *residual = count;

  01330	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  01338	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  0133f	89 08		 mov	 DWORD PTR [rax], ecx

; 3487 :                             *unitstat = CSW_CE | CSW_DE | CSW_UX;

  01341	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  01349	c6 00 0d	 mov	 BYTE PTR [rax], 13

; 3488 :                             tn->haltpending = 0;

  0134c	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01351	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  01357	83 e0 bf	 and	 eax, -65		; ffffffbfH
  0135a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0135f	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 3489 :                             break;

  01365	e9 e5 26 00 00	 jmp	 $LN14@tcpnje_exe
$LN94@tcpnje_exe:
$LN86@tcpnje_exe:
$LN83@tcpnje_exe:

; 3490 :                         }
; 3491 :                     }
; 3492 :                 }
; 3493 : 
; 3494 :                 /* If there is still no data is present - some seconds    */
; 3495 :                 /* have passed without receiving data from the network.   */
; 3496 :                 if (!tn->tcpinbuf.valid || (tn->tcpinbuf.valid &&

  0136a	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0136f	0f b6 80 d8 00
	00 00		 movzx	 eax, BYTE PTR [rax+216]
  01376	85 c0		 test	 eax, eax
  01378	74 2c		 je	 SHORT $LN96@tcpnje_exe
  0137a	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0137f	0f b6 80 d8 00
	00 00		 movzx	 eax, BYTE PTR [rax+216]
  01386	85 c0		 test	 eax, eax
  01388	0f 84 4f 02 00
	00		 je	 $LN95@tcpnje_exe
  0138e	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01393	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  0139a	0f b7 40 0a	 movzx	 eax, WORD PTR [rax+10]
  0139e	85 c0		 test	 eax, eax
  013a0	0f 85 37 02 00
	00		 jne	 $LN95@tcpnje_exe
$LN96@tcpnje_exe:

; 3497 :                    (tn->tcpinbuf.outptr.block->record.ttr.length == 0)))
; 3498 :                 {
; 3499 :                     /* If we are connected and signed on, as last resort  */
; 3500 :                     /* fake an incoming DLE ACK0 or null buffer instead   */
; 3501 :                     /* of failing with a timeout which will cause grief.  */
; 3502 :                     if (tn->state > NJEACKRCD)

  013a6	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  013ab	83 b8 54 01 00
	00 07		 cmp	 DWORD PTR [rax+340], 7
  013b2	0f 8e 83 01 00
	00		 jle	 $LN97@tcpnje_exe

; 3503 :                     {
; 3504 :                         /* Present null buffer to RSCS to avoid timeout  */
; 3505 :                         num = count < sizeof(nullbuffer) ? count : sizeof(nullbuffer);

  013b8	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  013bf	48 83 f8 08	 cmp	 rax, 8
  013c3	73 11		 jae	 SHORT $LN320@tcpnje_exe
  013c5	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  013cc	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv748[rsp], rax
  013d4	eb 0c		 jmp	 SHORT $LN321@tcpnje_exe
$LN320@tcpnje_exe:
  013d6	48 c7 84 24 88
	00 00 00 08 00
	00 00		 mov	 QWORD PTR tv748[rsp], 8
$LN321@tcpnje_exe:
  013e2	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv748[rsp]
  013e9	89 44 24 38	 mov	 DWORD PTR num$[rsp], eax

; 3506 :                         memcpy(iobuf, nullbuffer, num);

  013ed	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  013f1	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR nullbuffer$[rsp]
  013f9	48 8b bc 24 b8
	01 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  01401	48 8b f1	 mov	 rsi, rcx
  01404	8b c8		 mov	 ecx, eax
  01406	f3 a4		 rep movsb

; 3507 :                         if (tn->holdoutgoing)

  01408	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0140d	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  01413	c1 e8 09	 shr	 eax, 9
  01416	83 e0 01	 and	 eax, 1
  01419	85 c0		 test	 eax, eax
  0141b	74 26		 je	 SHORT $LN99@tcpnje_exe

; 3508 :                         {
; 3509 :                             /* Outgoing buffers are full.  Fix FCS to stop RSCS sending more */
; 3510 :                             tpb->fcs[0] = 0xc0;

  0141d	b8 01 00 00 00	 mov	 eax, 1
  01422	48 6b c0 00	 imul	 rax, rax, 0
  01426	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  0142b	c6 44 01 03 c0	 mov	 BYTE PTR [rcx+rax+3], 192 ; 000000c0H

; 3511 :                             tpb->fcs[1] = 0x80;

  01430	b8 01 00 00 00	 mov	 eax, 1
  01435	48 6b c0 01	 imul	 rax, rax, 1
  01439	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  0143e	c6 44 01 03 80	 mov	 BYTE PTR [rcx+rax+3], 128 ; 00000080H
$LN99@tcpnje_exe:

; 3512 :                         }
; 3513 : 
; 3514 :                         DBGMSG(2048, "HHCTN155D %4.4X:TCPNJE READ - inserting incoming null buffer BCB: %2.2X FCS: %2.2X%2.2X in lieu of timeout\n",

  01443	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01448	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0144b	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01451	c1 e8 0f	 shr	 eax, 15
  01454	83 e0 01	 and	 eax, 1
  01457	85 c0		 test	 eax, eax
  01459	74 14		 je	 SHORT $LN102@tcpnje_exe
  0145b	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01460	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01466	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  0146b	85 c0		 test	 eax, eax
  0146d	75 14		 jne	 SHORT $LN101@tcpnje_exe
$LN102@tcpnje_exe:
  0146f	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01474	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0147a	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  0147f	85 c0		 test	 eax, eax
  01481	74 54		 je	 SHORT $LN100@tcpnje_exe
$LN101@tcpnje_exe:
  01483	b8 01 00 00 00	 mov	 eax, 1
  01488	48 6b c0 01	 imul	 rax, rax, 1
  0148c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  01491	0f b6 44 01 03	 movzx	 eax, BYTE PTR [rcx+rax+3]
  01496	b9 01 00 00 00	 mov	 ecx, 1
  0149b	48 6b c9 00	 imul	 rcx, rcx, 0
  0149f	48 8b 54 24 40	 mov	 rdx, QWORD PTR tpb$[rsp]
  014a4	0f b6 4c 0a 03	 movzx	 ecx, BYTE PTR [rdx+rcx+3]
  014a9	48 8b 54 24 40	 mov	 rdx, QWORD PTR tpb$[rsp]
  014ae	0f b6 52 02	 movzx	 edx, BYTE PTR [rdx+2]
  014b2	48 8b bc 24 80
	01 00 00	 mov	 rdi, QWORD PTR dev$[rsp]
  014ba	0f b7 7f 48	 movzx	 edi, WORD PTR [rdi+72]
  014be	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  014c2	44 8b c9	 mov	 r9d, ecx
  014c5	44 8b c2	 mov	 r8d, edx
  014c8	8b d7		 mov	 edx, edi
  014ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160736
  014d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN100@tcpnje_exe:

; 3515 :                                     dev->devnum, tpb->bcb, tpb->fcs[0], tpb->fcs[1]);
; 3516 : 
; 3517 :                         if (count < sizeof(nullbuffer))

  014d7	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  014de	48 83 f8 08	 cmp	 rax, 8
  014e2	73 0b		 jae	 SHORT $LN103@tcpnje_exe

; 3518 :                         {
; 3519 :                             *more = 1;

  014e4	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR more$[rsp]
  014ec	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN103@tcpnje_exe:

; 3520 :                         }
; 3521 :                         *residual = count - num;

  014ef	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  014f3	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  014fa	2b c8		 sub	 ecx, eax
  014fc	8b c1		 mov	 eax, ecx
  014fe	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  01506	89 01		 mov	 DWORD PTR [rcx], eax

; 3522 :                         *unitstat = CSW_CE | CSW_DE;

  01508	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  01510	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3523 :                         logdump("Read T", dev, iobuf, num);

  01513	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  01517	44 8b c8	 mov	 r9d, eax
  0151a	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR iobuf$[rsp]
  01522	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0152a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160738
  01531	e8 00 00 00 00	 call	 logdump

; 3524 :                     }

  01536	e9 9d 00 00 00	 jmp	 $LN98@tcpnje_exe
$LN97@tcpnje_exe:

; 3525 :                     else
; 3526 : #if 0
; 3527 :                     {
; 3528 :                         /* No options left. Fail with timeout. */
; 3529 :                         *residual = count;
; 3530 :                         *unitstat = CSW_DE | CSW_CE | CSW_UC;
; 3531 :                         dev->sense[0] = 0x01;
; 3532 :                         dev->sense[1] = 0xe3;
; 3533 :                     }
; 3534 : #else
; 3535 :                     {
; 3536 :                         /* Try replying with DLE NAK (somewhat randomly chosen as something
; 3537 :                            that is not DLE ACK0) instead of timing out.  This results in
; 3538 :                            less whinges on the Hercules console due to device unit checks
; 3539 :                            without making RSCS think it has successfully connected.        */
; 3540 : 
; 3541 :                         num = count < 2 ? count : 2;

  0153b	83 bc 24 a0 01
	00 00 02	 cmp	 DWORD PTR count$[rsp], 2
  01543	73 0d		 jae	 SHORT $LN322@tcpnje_exe
  01545	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  0154c	89 44 24 6c	 mov	 DWORD PTR tv803[rsp], eax
  01550	eb 08		 jmp	 SHORT $LN323@tcpnje_exe
$LN322@tcpnje_exe:
  01552	c7 44 24 6c 02
	00 00 00	 mov	 DWORD PTR tv803[rsp], 2
$LN323@tcpnje_exe:
  0155a	8b 44 24 6c	 mov	 eax, DWORD PTR tv803[rsp]
  0155e	89 44 24 38	 mov	 DWORD PTR num$[rsp], eax

; 3542 :                         memcpy(iobuf, DLE NAK, num);

  01562	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  01566	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160739
  0156d	48 8b bc 24 b8
	01 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  01575	48 8b f1	 mov	 rsi, rcx
  01578	8b c8		 mov	 ecx, eax
  0157a	f3 a4		 rep movsb

; 3543 : 
; 3544 :                         if (count < 2)

  0157c	83 bc 24 a0 01
	00 00 02	 cmp	 DWORD PTR count$[rsp], 2
  01584	73 0b		 jae	 SHORT $LN104@tcpnje_exe

; 3545 :                         {
; 3546 :                             *more = 1;

  01586	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR more$[rsp]
  0158e	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN104@tcpnje_exe:

; 3547 :                         }
; 3548 :                         *residual = count - num;

  01591	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  01595	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  0159c	2b c8		 sub	 ecx, eax
  0159e	8b c1		 mov	 eax, ecx
  015a0	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  015a8	89 01		 mov	 DWORD PTR [rcx], eax

; 3549 :                         *unitstat = CSW_CE | CSW_DE;

  015aa	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  015b2	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3550 :                         logdump("Read N", dev, iobuf, num);

  015b5	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  015b9	44 8b c8	 mov	 r9d, eax
  015bc	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR iobuf$[rsp]
  015c4	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  015cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160741
  015d3	e8 00 00 00 00	 call	 logdump
$LN98@tcpnje_exe:

; 3551 :                     }
; 3552 : #endif
; 3553 :                     break;

  015d8	e9 72 24 00 00	 jmp	 $LN14@tcpnje_exe
$LN95@tcpnje_exe:

; 3554 :                 }
; 3555 : 
; 3556 :                 /* At this point there is data available.  */
; 3557 :                 /* Get the length of the next record.      */
; 3558 :                 TTRlength = ntohs(tn->tcpinbuf.outptr.block->record.ttr.length);

  015dd	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  015e2	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  015e9	0f b7 48 0a	 movzx	 ecx, WORD PTR [rax+10]
  015ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ntohs
  015f3	0f b7 c0	 movzx	 eax, ax
  015f6	89 44 24 48	 mov	 DWORD PTR TTRlength$[rsp], eax

; 3559 : 
; 3560 :                 /* Now copy the actual record from the input buffer into iobuf */
; 3561 :                 num = count < TTRlength ? count : TTRlength;

  015fa	8b 44 24 48	 mov	 eax, DWORD PTR TTRlength$[rsp]
  015fe	39 84 24 a0 01
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  01605	73 0d		 jae	 SHORT $LN324@tcpnje_exe
  01607	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  0160e	89 44 24 70	 mov	 DWORD PTR tv823[rsp], eax
  01612	eb 08		 jmp	 SHORT $LN325@tcpnje_exe
$LN324@tcpnje_exe:
  01614	8b 44 24 48	 mov	 eax, DWORD PTR TTRlength$[rsp]
  01618	89 44 24 70	 mov	 DWORD PTR tv823[rsp], eax
$LN325@tcpnje_exe:
  0161c	8b 44 24 70	 mov	 eax, DWORD PTR tv823[rsp]
  01620	89 44 24 38	 mov	 DWORD PTR num$[rsp], eax

; 3562 :                 memcpy(iobuf, &tn->tcpinbuf.outptr.block->record.tpb, num);

  01624	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  01628	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0162d	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  01634	48 83 c1 0c	 add	 rcx, 12
  01638	48 8b bc 24 b8
	01 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  01640	48 8b f1	 mov	 rsi, rcx
  01643	8b c8		 mov	 ecx, eax
  01645	f3 a4		 rep movsb

; 3563 : 
; 3564 :                 /* Check if we snagged an incoming NCC J response signon  */
; 3565 :                 /* record and modify the connection state accordingly.    */
; 3566 :                 /* Also check NCC I initial signon records in case the    */
; 3567 :                 /* other end has requested use of the PREPARE mode option */
; 3568 :                 /* which is not currently supported and if so, reset the  */
; 3569 :                 /* bit corresponding to that option in case the RSCS at   */
; 3570 :                 /* our end decides to go with it.  If the same option is  */
; 3571 :                 /* set in an incoming J record, something is badly wrong. */
; 3572 :                 /* Also take note of the buffer size specified on an      */
; 3573 :                 /* incoming J record as this is the buffer size the two   */
; 3574 :                 /* link ends have negotiated to use.  */
; 3575 :                 if ((TTRlength > 6) && (tn->tcpinbuf.outptr.block->record.tpb.rcb == 0xf0))

  01647	83 7c 24 48 06	 cmp	 DWORD PTR TTRlength$[rsp], 6
  0164c	0f 86 0f 06 00
	00		 jbe	 $LN105@tcpnje_exe
  01652	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01657	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  0165e	0f b6 40 11	 movzx	 eax, BYTE PTR [rax+17]
  01662	3d f0 00 00 00	 cmp	 eax, 240		; 000000f0H
  01667	0f 85 f4 05 00
	00		 jne	 $LN105@tcpnje_exe

; 3576 :                 {
; 3577 :                     if ((tn->tcpinbuf.outptr.block->record.tpb.srcb == 0xc9) &&

  0166d	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01672	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  01679	0f b6 40 12	 movzx	 eax, BYTE PTR [rax+18]
  0167d	3d c9 00 00 00	 cmp	 eax, 201		; 000000c9H
  01682	0f 85 d3 02 00
	00		 jne	 $LN106@tcpnje_exe
  01688	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0168d	83 b8 54 01 00
	00 06		 cmp	 DWORD PTR [rax+340], 6
  01694	75 15		 jne	 SHORT $LN109@tcpnje_exe
  01696	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0169b	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  016a1	c1 e8 0c	 shr	 eax, 12
  016a4	83 e0 01	 and	 eax, 1
  016a7	85 c0		 test	 eax, eax
  016a9	74 2b		 je	 SHORT $LN108@tcpnje_exe
$LN109@tcpnje_exe:
  016ab	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  016b0	83 b8 54 01 00
	00 07		 cmp	 DWORD PTR [rax+340], 7
  016b7	0f 85 9e 02 00
	00		 jne	 $LN106@tcpnje_exe
  016bd	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  016c2	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  016c8	c1 e8 0c	 shr	 eax, 12
  016cb	83 e0 01	 and	 eax, 1
  016ce	85 c0		 test	 eax, eax
  016d0	0f 84 85 02 00
	00		 je	 $LN106@tcpnje_exe
$LN108@tcpnje_exe:

; 3578 :                        (((tn->state == NJEACKSNT) && !tn->synnaksent) ||
; 3579 :                         ((tn->state == NJEACKRCD) && tn->synnaksent)))
; 3580 :                     {
; 3581 :                         char nodestring[9];
; 3582 : 
; 3583 :                         /* SRCB == I Initial signon record received */
; 3584 :                         if (TTRlength > (5 + 0x0b))

  016d6	83 7c 24 48 10	 cmp	 DWORD PTR TTRlength$[rsp], 16
  016db	0f 86 b6 00 00
	00		 jbe	 $LN110@tcpnje_exe

; 3585 :                         {
; 3586 :                             DBGMSG(64, "HHCTN079I %4.4X:TCPNJE - received initial signon request for RSCS link %s - connection state %s\n",

  016e1	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  016e6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  016e9	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  016ef	c1 e8 0f	 shr	 eax, 15
  016f2	83 e0 01	 and	 eax, 1
  016f5	85 c0		 test	 eax, eax
  016f7	74 12		 je	 SHORT $LN113@tcpnje_exe
  016f9	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  016fe	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01704	83 e0 40	 and	 eax, 64			; 00000040H
  01707	85 c0		 test	 eax, eax
  01709	75 12		 jne	 SHORT $LN112@tcpnje_exe
$LN113@tcpnje_exe:
  0170b	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01710	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01716	83 e0 40	 and	 eax, 64			; 00000040H
  01719	85 c0		 test	 eax, eax
  0171b	74 7a		 je	 SHORT $LN111@tcpnje_exe
$LN112@tcpnje_exe:
  0171d	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01722	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  01729	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv866[rsp], rax
  01731	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  01738	48 89 8c 24 c0
	00 00 00	 mov	 QWORD PTR tv2299[rsp], rcx
  01740	48 8b 54 24 30	 mov	 rdx, QWORD PTR tn$[rsp]
  01745	48 8b 92 c8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+200]
  0174c	48 83 c2 14	 add	 rdx, 20
  01750	4c 8b c2	 mov	 r8, rdx
  01753	ba 09 00 00 00	 mov	 edx, 9
  01758	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR nodestring$3[rsp]
  01760	e8 00 00 00 00	 call	 guest_to_host_string
  01765	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0176d	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  01771	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR tv2299[rsp]
  01779	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR tv866[rsp]
  01781	4c 8b 0c d7	 mov	 r9, QWORD PTR [rdi+rdx*8]
  01785	4c 8b c0	 mov	 r8, rax
  01788	8b d1		 mov	 edx, ecx
  0178a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160751
  01791	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN111@tcpnje_exe:
$LN110@tcpnje_exe:

; 3587 :                                 dev->devnum, guest_to_host_string(nodestring, sizeof(nodestring),
; 3588 :                                 tn->tcpinbuf.outptr.block->record.tpb.nccinode), tcpnje_state_text[tn->state]);
; 3589 :                         }
; 3590 :                         if (TTRlength > (5 + 0x13))

  01797	83 7c 24 48 18	 cmp	 DWORD PTR TTRlength$[rsp], 24
  0179c	0f 86 cd 00 00
	00		 jbe	 $LN114@tcpnje_exe

; 3591 :                         {
; 3592 :                             U16 tpbufsize;
; 3593 : 
; 3594 :                             /* The following contortion is due to improper alignment in I/J signon records */
; 3595 :                             tpbufsize = (tn->tcpinbuf.outptr.block->record.tpb.nccibfsz[0] << 8)

  017a2	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  017a7	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  017ae	b9 01 00 00 00	 mov	 ecx, 1
  017b3	48 6b c9 00	 imul	 rcx, rcx, 0
  017b7	0f b6 44 08 23	 movzx	 eax, BYTE PTR [rax+rcx+35]
  017bc	c1 e0 08	 shl	 eax, 8
  017bf	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  017c4	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  017cb	ba 01 00 00 00	 mov	 edx, 1
  017d0	48 6b d2 01	 imul	 rdx, rdx, 1
  017d4	0f b6 4c 11 23	 movzx	 ecx, BYTE PTR [rcx+rdx+35]
  017d9	03 c1		 add	 eax, ecx
  017db	66 89 44 24 50	 mov	 WORD PTR tpbufsize$1[rsp], ax

; 3596 :                                        + tn->tcpinbuf.outptr.block->record.tpb.nccibfsz[1];
; 3597 :                             DBGMSG(64, "HHCTN080I %4.4X:TCPNJE - received TPbuffer size requested by RSCS link %s: %d\n",

  017e0	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  017e5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  017e8	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  017ee	c1 e8 0f	 shr	 eax, 15
  017f1	83 e0 01	 and	 eax, 1
  017f4	85 c0		 test	 eax, eax
  017f6	74 12		 je	 SHORT $LN117@tcpnje_exe
  017f8	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  017fd	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01803	83 e0 40	 and	 eax, 64			; 00000040H
  01806	85 c0		 test	 eax, eax
  01808	75 12		 jne	 SHORT $LN116@tcpnje_exe
$LN117@tcpnje_exe:
  0180a	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0180f	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01815	83 e0 40	 and	 eax, 64			; 00000040H
  01818	85 c0		 test	 eax, eax
  0181a	74 53		 je	 SHORT $LN115@tcpnje_exe
$LN116@tcpnje_exe:
  0181c	0f b7 44 24 50	 movzx	 eax, WORD PTR tpbufsize$1[rsp]
  01821	89 44 24 74	 mov	 DWORD PTR tv906[rsp], eax
  01825	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0182a	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  01831	48 83 c1 14	 add	 rcx, 20
  01835	4c 8b c1	 mov	 r8, rcx
  01838	ba 09 00 00 00	 mov	 edx, 9
  0183d	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR nodestring$3[rsp]
  01845	e8 00 00 00 00	 call	 guest_to_host_string
  0184a	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01852	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  01856	8b 54 24 74	 mov	 edx, DWORD PTR tv906[rsp]
  0185a	44 8b ca	 mov	 r9d, edx
  0185d	4c 8b c0	 mov	 r8, rax
  01860	8b d1		 mov	 edx, ecx
  01862	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160756
  01869	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN115@tcpnje_exe:
$LN114@tcpnje_exe:

; 3598 :                                     dev->devnum, guest_to_host_string(nodestring, sizeof(nodestring),
; 3599 :                                     tn->tcpinbuf.outptr.block->record.tpb.nccinode), tpbufsize);
; 3600 :                         }
; 3601 :                         /* If the other end has requested the PREPARE feature, reset it as we can't do that */
; 3602 :                         if ((TTRlength > (5 + 0x25)) && (tn->tcpinbuf.outptr.block->record.tpb.nccifeat[0] & 0x80))

  0186f	83 7c 24 48 2a	 cmp	 DWORD PTR TTRlength$[rsp], 42 ; 0000002aH
  01874	0f 86 dc 00 00
	00		 jbe	 $LN118@tcpnje_exe
  0187a	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0187f	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  01886	b9 01 00 00 00	 mov	 ecx, 1
  0188b	48 6b c9 00	 imul	 rcx, rcx, 0
  0188f	0f b6 44 08 36	 movzx	 eax, BYTE PTR [rax+rcx+54]
  01894	25 80 00 00 00	 and	 eax, 128		; 00000080H
  01899	85 c0		 test	 eax, eax
  0189b	0f 84 b5 00 00
	00		 je	 $LN118@tcpnje_exe

; 3603 :                         {
; 3604 :                             tn->tcpinbuf.outptr.block->record.tpb.nccifeat[0] &= 0x7f;

  018a1	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  018a6	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  018ad	b9 01 00 00 00	 mov	 ecx, 1
  018b2	48 6b c9 00	 imul	 rcx, rcx, 0
  018b6	0f b6 44 08 36	 movzx	 eax, BYTE PTR [rax+rcx+54]
  018bb	83 e0 7f	 and	 eax, 127		; 0000007fH
  018be	b9 01 00 00 00	 mov	 ecx, 1
  018c3	48 6b c9 00	 imul	 rcx, rcx, 0
  018c7	48 8b 54 24 30	 mov	 rdx, QWORD PTR tn$[rsp]
  018cc	48 8b 92 c8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+200]
  018d3	88 44 0a 36	 mov	 BYTE PTR [rdx+rcx+54], al

; 3605 :                             DBGMSG(64, "HHCTN081I %4.4X:TCPNJE - resetting request by RSCS link %s for unsupported PREPARE protocol\n",

  018d7	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  018dc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  018df	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  018e5	c1 e8 0f	 shr	 eax, 15
  018e8	83 e0 01	 and	 eax, 1
  018eb	85 c0		 test	 eax, eax
  018ed	74 12		 je	 SHORT $LN121@tcpnje_exe
  018ef	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  018f4	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  018fa	83 e0 40	 and	 eax, 64			; 00000040H
  018fd	85 c0		 test	 eax, eax
  018ff	75 12		 jne	 SHORT $LN120@tcpnje_exe
$LN121@tcpnje_exe:
  01901	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01906	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0190c	83 e0 40	 and	 eax, 64			; 00000040H
  0190f	85 c0		 test	 eax, eax
  01911	74 43		 je	 SHORT $LN119@tcpnje_exe
$LN120@tcpnje_exe:
  01913	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01918	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  0191f	48 83 c0 14	 add	 rax, 20
  01923	4c 8b c0	 mov	 r8, rax
  01926	ba 09 00 00 00	 mov	 edx, 9
  0192b	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR nodestring$3[rsp]
  01933	e8 00 00 00 00	 call	 guest_to_host_string
  01938	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01940	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  01944	4c 8b c0	 mov	 r8, rax
  01947	8b d1		 mov	 edx, ecx
  01949	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160761
  01950	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN119@tcpnje_exe:
$LN118@tcpnje_exe:

; 3606 :                                     dev->devnum, guest_to_host_string(nodestring, sizeof(nodestring),
; 3607 :                                     tn->tcpinbuf.outptr.block->record.tpb.nccinode));
; 3608 :                         }
; 3609 :                     }

  01956	e9 06 03 00 00	 jmp	 $LN107@tcpnje_exe
$LN106@tcpnje_exe:

; 3610 :                     else if ((tn->tcpinbuf.outptr.block->record.tpb.srcb == 0xd1) &&

  0195b	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01960	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  01967	0f b6 40 12	 movzx	 eax, BYTE PTR [rax+18]
  0196b	3d d1 00 00 00	 cmp	 eax, 209		; 000000d1H
  01970	0f 85 eb 02 00
	00		 jne	 $LN122@tcpnje_exe
  01976	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0197b	83 b8 54 01 00
	00 07		 cmp	 DWORD PTR [rax+340], 7
  01982	75 15		 jne	 SHORT $LN124@tcpnje_exe
  01984	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01989	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0198f	c1 e8 0b	 shr	 eax, 11
  01992	83 e0 01	 and	 eax, 1
  01995	85 c0		 test	 eax, eax
  01997	74 2b		 je	 SHORT $LN123@tcpnje_exe
$LN124@tcpnje_exe:
  01999	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0199e	83 b8 54 01 00
	00 06		 cmp	 DWORD PTR [rax+340], 6
  019a5	0f 85 b6 02 00
	00		 jne	 $LN122@tcpnje_exe
  019ab	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  019b0	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  019b6	c1 e8 0b	 shr	 eax, 11
  019b9	83 e0 01	 and	 eax, 1
  019bc	85 c0		 test	 eax, eax
  019be	0f 84 9d 02 00
	00		 je	 $LN122@tcpnje_exe
$LN123@tcpnje_exe:

; 3611 :                             (((tn->state == NJEACKRCD) && !tn->synnakreceived) ||
; 3612 :                              ((tn->state == NJEACKSNT) && tn->synnakreceived)))
; 3613 : 
; 3614 :                     {
; 3615 :                         char nodestring[9];
; 3616 : 
; 3617 :                         /* SRCB == J Response signon record received */
; 3618 :                         tn->state = NJECONPRI;

  019c4	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  019c9	c7 80 54 01 00
	00 08 00 00 00	 mov	 DWORD PTR [rax+340], 8

; 3619 :                         if (TTRlength > (5 + 0x0b))

  019d3	83 7c 24 48 10	 cmp	 DWORD PTR TTRlength$[rsp], 16
  019d8	0f 86 b6 00 00
	00		 jbe	 $LN125@tcpnje_exe

; 3620 :                         {
; 3621 :                             DBGMSG(64, "HHCTN082I %4.4X:TCPNJE - received response signon for RSCS link %s - connection state %s\n",

  019de	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  019e3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  019e6	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  019ec	c1 e8 0f	 shr	 eax, 15
  019ef	83 e0 01	 and	 eax, 1
  019f2	85 c0		 test	 eax, eax
  019f4	74 12		 je	 SHORT $LN128@tcpnje_exe
  019f6	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  019fb	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01a01	83 e0 40	 and	 eax, 64			; 00000040H
  01a04	85 c0		 test	 eax, eax
  01a06	75 12		 jne	 SHORT $LN127@tcpnje_exe
$LN128@tcpnje_exe:
  01a08	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01a0d	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01a13	83 e0 40	 and	 eax, 64			; 00000040H
  01a16	85 c0		 test	 eax, eax
  01a18	74 7a		 je	 SHORT $LN126@tcpnje_exe
$LN127@tcpnje_exe:
  01a1a	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01a1f	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  01a26	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv990[rsp], rax
  01a2e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  01a35	48 89 8c 24 d0
	00 00 00	 mov	 QWORD PTR tv2303[rsp], rcx
  01a3d	48 8b 54 24 30	 mov	 rdx, QWORD PTR tn$[rsp]
  01a42	48 8b 92 c8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+200]
  01a49	48 83 c2 14	 add	 rdx, 20
  01a4d	4c 8b c2	 mov	 r8, rdx
  01a50	ba 09 00 00 00	 mov	 edx, 9
  01a55	48 8d 8c 24 28
	01 00 00	 lea	 rcx, QWORD PTR nodestring$4[rsp]
  01a5d	e8 00 00 00 00	 call	 guest_to_host_string
  01a62	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01a6a	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  01a6e	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR tv2303[rsp]
  01a76	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR tv990[rsp]
  01a7e	4c 8b 0c d7	 mov	 r9, QWORD PTR [rdi+rdx*8]
  01a82	4c 8b c0	 mov	 r8, rax
  01a85	8b d1		 mov	 edx, ecx
  01a87	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160769
  01a8e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN126@tcpnje_exe:
$LN125@tcpnje_exe:

; 3622 :                                 dev->devnum, guest_to_host_string(nodestring, sizeof(nodestring),
; 3623 :                                 tn->tcpinbuf.outptr.block->record.tpb.nccinode), tcpnje_state_text[tn->state]);
; 3624 :                         }
; 3625 :                         if (TTRlength > (5 + 0x13))

  01a94	83 7c 24 48 18	 cmp	 DWORD PTR TTRlength$[rsp], 24
  01a99	0f 86 db 00 00
	00		 jbe	 $LN129@tcpnje_exe

; 3626 :                         {
; 3627 :                             /* The following contortion is due to improper alignment in I/J signon records */
; 3628 :                             tn->tpbufsize = (tn->tcpinbuf.outptr.block->record.tpb.nccibfsz[0] << 8)

  01a9f	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01aa4	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  01aab	b9 01 00 00 00	 mov	 ecx, 1
  01ab0	48 6b c9 00	 imul	 rcx, rcx, 0
  01ab4	0f b6 44 08 23	 movzx	 eax, BYTE PTR [rax+rcx+35]
  01ab9	c1 e0 08	 shl	 eax, 8
  01abc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  01ac1	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  01ac8	ba 01 00 00 00	 mov	 edx, 1
  01acd	48 6b d2 01	 imul	 rdx, rdx, 1
  01ad1	0f b6 4c 11 23	 movzx	 ecx, BYTE PTR [rcx+rdx+35]
  01ad6	03 c1		 add	 eax, ecx
  01ad8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  01add	66 89 81 5e 01
	00 00		 mov	 WORD PTR [rcx+350], ax

; 3629 :                                                     + tn->tcpinbuf.outptr.block->record.tpb.nccibfsz[1];
; 3630 :                             DBGMSG(64, "HHCTN083I %4.4X:TCPNJE - received TPbuffer size negotiated by RSCS link %s: %d\n",

  01ae4	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01ae9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01aec	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01af2	c1 e8 0f	 shr	 eax, 15
  01af5	83 e0 01	 and	 eax, 1
  01af8	85 c0		 test	 eax, eax
  01afa	74 12		 je	 SHORT $LN132@tcpnje_exe
  01afc	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01b01	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01b07	83 e0 40	 and	 eax, 64			; 00000040H
  01b0a	85 c0		 test	 eax, eax
  01b0c	75 12		 jne	 SHORT $LN131@tcpnje_exe
$LN132@tcpnje_exe:
  01b0e	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01b13	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01b19	83 e0 40	 and	 eax, 64			; 00000040H
  01b1c	85 c0		 test	 eax, eax
  01b1e	74 5a		 je	 SHORT $LN130@tcpnje_exe
$LN131@tcpnje_exe:
  01b20	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01b25	0f b7 80 5e 01
	00 00		 movzx	 eax, WORD PTR [rax+350]
  01b2c	89 44 24 78	 mov	 DWORD PTR tv1032[rsp], eax
  01b30	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  01b35	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  01b3c	48 83 c1 14	 add	 rcx, 20
  01b40	4c 8b c1	 mov	 r8, rcx
  01b43	ba 09 00 00 00	 mov	 edx, 9
  01b48	48 8d 8c 24 28
	01 00 00	 lea	 rcx, QWORD PTR nodestring$4[rsp]
  01b50	e8 00 00 00 00	 call	 guest_to_host_string
  01b55	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01b5d	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  01b61	8b 54 24 78	 mov	 edx, DWORD PTR tv1032[rsp]
  01b65	44 8b ca	 mov	 r9d, edx
  01b68	4c 8b c0	 mov	 r8, rax
  01b6b	8b d1		 mov	 edx, ecx
  01b6d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160774
  01b74	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN130@tcpnje_exe:
$LN129@tcpnje_exe:

; 3631 :                                     dev->devnum, guest_to_host_string(nodestring, sizeof(nodestring),
; 3632 :                                     tn->tcpinbuf.outptr.block->record.tpb.nccinode), tn->tpbufsize);
; 3633 :                         }
; 3634 :                         /* If the other end set the prepare flag, it's going against our request */
; 3635 :                         if ((TTRlength > (5 + 0x25)) && (tn->tcpinbuf.outptr.block->record.tpb.nccifeat[0] & 0x80))

  01b7a	83 7c 24 48 2a	 cmp	 DWORD PTR TTRlength$[rsp], 42 ; 0000002aH
  01b7f	0f 86 dc 00 00
	00		 jbe	 $LN133@tcpnje_exe
  01b85	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01b8a	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  01b91	b9 01 00 00 00	 mov	 ecx, 1
  01b96	48 6b c9 00	 imul	 rcx, rcx, 0
  01b9a	0f b6 44 08 36	 movzx	 eax, BYTE PTR [rax+rcx+54]
  01b9f	25 80 00 00 00	 and	 eax, 128		; 00000080H
  01ba4	85 c0		 test	 eax, eax
  01ba6	0f 84 b5 00 00
	00		 je	 $LN133@tcpnje_exe

; 3636 :                         {
; 3637 :                             DBGMSG(16, "HHCTN084E %4.4X:TCPNJE - attempt by RSCS link %s to force use of unsupported PREPARE protocol\n",

  01bac	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01bb1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01bb4	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01bba	c1 e8 0f	 shr	 eax, 15
  01bbd	83 e0 01	 and	 eax, 1
  01bc0	85 c0		 test	 eax, eax
  01bc2	74 12		 je	 SHORT $LN136@tcpnje_exe
  01bc4	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01bc9	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01bcf	83 e0 10	 and	 eax, 16
  01bd2	85 c0		 test	 eax, eax
  01bd4	75 12		 jne	 SHORT $LN135@tcpnje_exe
$LN136@tcpnje_exe:
  01bd6	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01bdb	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01be1	83 e0 10	 and	 eax, 16
  01be4	85 c0		 test	 eax, eax
  01be6	74 43		 je	 SHORT $LN134@tcpnje_exe
$LN135@tcpnje_exe:
  01be8	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01bed	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  01bf4	48 83 c0 14	 add	 rax, 20
  01bf8	4c 8b c0	 mov	 r8, rax
  01bfb	ba 09 00 00 00	 mov	 edx, 9
  01c00	48 8d 8c 24 28
	01 00 00	 lea	 rcx, QWORD PTR nodestring$4[rsp]
  01c08	e8 00 00 00 00	 call	 guest_to_host_string
  01c0d	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01c15	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  01c19	4c 8b c0	 mov	 r8, rax
  01c1c	8b d1		 mov	 edx, ecx
  01c1e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160779
  01c25	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN134@tcpnje_exe:

; 3638 :                                     dev->devnum, guest_to_host_string(nodestring, sizeof(nodestring),
; 3639 :                                     tn->tcpinbuf.outptr.block->record.tpb.nccinode));
; 3640 :                             tn->tcpinbuf.outptr.block->record.tpb.nccifeat[0] &= 0x7f;

  01c2b	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01c30	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  01c37	b9 01 00 00 00	 mov	 ecx, 1
  01c3c	48 6b c9 00	 imul	 rcx, rcx, 0
  01c40	0f b6 44 08 36	 movzx	 eax, BYTE PTR [rax+rcx+54]
  01c45	83 e0 7f	 and	 eax, 127		; 0000007fH
  01c48	b9 01 00 00 00	 mov	 ecx, 1
  01c4d	48 6b c9 00	 imul	 rcx, rcx, 0
  01c51	48 8b 54 24 30	 mov	 rdx, QWORD PTR tn$[rsp]
  01c56	48 8b 92 c8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+200]
  01c5d	88 44 0a 36	 mov	 BYTE PTR [rdx+rcx+54], al
$LN133@tcpnje_exe:
$LN122@tcpnje_exe:
$LN107@tcpnje_exe:
$LN105@tcpnje_exe:

; 3641 :                         }
; 3642 :                     }
; 3643 :                 }
; 3644 : 
; 3645 :                 /* If this record contains an FCS, the VMNET equipvelant at the other end will have acted  */
; 3646 :                 /* on it already.  If it requests transmission be stopped and we pass it on to our RSCS,   */
; 3647 :                 /* we will get all hung up so we should set the FCS to cause RSCS to proceed as normal.    */
; 3648 :                 /* On the other hand, if our outgoing TCP/IP buffers are full, we need to set the FCS so   */
; 3649 :                 /* that RSCS doesn't attempt to send out any more data for now.                            */
; 3650 :                 if (TTRlength >= 6)

  01c61	83 7c 24 48 06	 cmp	 DWORD PTR TTRlength$[rsp], 6
  01c66	0f 82 fa 00 00
	00		 jb	 $LN137@tcpnje_exe

; 3651 :                 {
; 3652 :                     if (tn->holdoutgoing)

  01c6c	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01c71	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  01c77	c1 e8 09	 shr	 eax, 9
  01c7a	83 e0 01	 and	 eax, 1
  01c7d	85 c0		 test	 eax, eax
  01c7f	74 28		 je	 SHORT $LN138@tcpnje_exe

; 3653 :                     {
; 3654 :                         tpb->fcs[0] = 0xc0;

  01c81	b8 01 00 00 00	 mov	 eax, 1
  01c86	48 6b c0 00	 imul	 rax, rax, 0
  01c8a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  01c8f	c6 44 01 03 c0	 mov	 BYTE PTR [rcx+rax+3], 192 ; 000000c0H

; 3655 :                         tpb->fcs[1] = 0x80;

  01c94	b8 01 00 00 00	 mov	 eax, 1
  01c99	48 6b c0 01	 imul	 rax, rax, 1
  01c9d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  01ca2	c6 44 01 03 80	 mov	 BYTE PTR [rcx+rax+3], 128 ; 00000080H

; 3656 :                     }

  01ca7	eb 26		 jmp	 SHORT $LN139@tcpnje_exe
$LN138@tcpnje_exe:

; 3657 :                     else
; 3658 :                     {
; 3659 :                         tpb->fcs[0] = 0x8f;

  01ca9	b8 01 00 00 00	 mov	 eax, 1
  01cae	48 6b c0 00	 imul	 rax, rax, 0
  01cb2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  01cb7	c6 44 01 03 8f	 mov	 BYTE PTR [rcx+rax+3], 143 ; 0000008fH

; 3660 :                         tpb->fcs[1] = 0xcf;

  01cbc	b8 01 00 00 00	 mov	 eax, 1
  01cc1	48 6b c0 01	 imul	 rax, rax, 1
  01cc5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  01cca	c6 44 01 03 cf	 mov	 BYTE PTR [rcx+rax+3], 207 ; 000000cfH
$LN139@tcpnje_exe:

; 3661 :                     }
; 3662 :                     /* Also check for FASTOPEN flag set and if so, note which stream it has been applied to */
; 3663 :                     if ((tn->tcpinbuf.outptr.block->record.ttr.flags&0x80) && (num >= 7))

  01ccf	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01cd4	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  01cdb	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  01cdf	25 80 00 00 00	 and	 eax, 128		; 00000080H
  01ce4	85 c0		 test	 eax, eax
  01ce6	74 7e		 je	 SHORT $LN140@tcpnje_exe
  01ce8	83 7c 24 38 07	 cmp	 DWORD PTR num$[rsp], 7
  01ced	72 77		 jb	 SHORT $LN140@tcpnje_exe

; 3664 :                     {
; 3665 :                         DBGMSG(16, "HHCTN085W %4.4X:TCPNJE READ - Link partner issued FASTOPEN request for stream %2.2X.  Implementation at this end is incomplete.\n",

  01cef	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01cf4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01cf7	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01cfd	c1 e8 0f	 shr	 eax, 15
  01d00	83 e0 01	 and	 eax, 1
  01d03	85 c0		 test	 eax, eax
  01d05	74 12		 je	 SHORT $LN143@tcpnje_exe
  01d07	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01d0c	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01d12	83 e0 10	 and	 eax, 16
  01d15	85 c0		 test	 eax, eax
  01d17	75 12		 jne	 SHORT $LN142@tcpnje_exe
$LN143@tcpnje_exe:
  01d19	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01d1e	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01d24	83 e0 10	 and	 eax, 16
  01d27	85 c0		 test	 eax, eax
  01d29	74 27		 je	 SHORT $LN141@tcpnje_exe
$LN142@tcpnje_exe:
  01d2b	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  01d30	0f b6 40 06	 movzx	 eax, BYTE PTR [rax+6]
  01d34	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01d3c	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  01d40	44 8b c0	 mov	 r8d, eax
  01d43	8b d1		 mov	 edx, ecx
  01d45	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160787
  01d4c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN141@tcpnje_exe:

; 3666 :                                 dev->devnum, tpb->srcb);
; 3667 :                         tn->fastopen = tpb->srcb;

  01d52	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01d57	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  01d5c	0f b6 49 06	 movzx	 ecx, BYTE PTR [rcx+6]
  01d60	88 88 61 01 00
	00		 mov	 BYTE PTR [rax+353], cl
$LN140@tcpnje_exe:
$LN137@tcpnje_exe:

; 3668 :                     }
; 3669 :                 }
; 3670 : 
; 3671 :                 /* Point to next record after this one */
; 3672 :                 tn->tcpinbuf.outptr.address += SIZEOF_TTR + TTRlength;

  01d66	8b 44 24 48	 mov	 eax, DWORD PTR TTRlength$[rsp]
  01d6a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  01d6f	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  01d76	48 8d 44 08 04	 lea	 rax, QWORD PTR [rax+rcx+4]
  01d7b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  01d80	48 89 81 c8 00
	00 00		 mov	 QWORD PTR [rcx+200], rax

; 3673 : 
; 3674 :                 /* Count the data received.  Some overhead is included */
; 3675 :                 /* and some data is not counted due to compression.    */
; 3676 : 
; 3677 :                 if (num > 2)

  01d87	83 7c 24 38 02	 cmp	 DWORD PTR num$[rsp], 2
  01d8c	76 32		 jbe	 SHORT $LN144@tcpnje_exe

; 3678 :                 {
; 3679 :                     tn->inbytecount += num;

  01d8e	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01d93	8b 80 10 01 00
	00		 mov	 eax, DWORD PTR [rax+272]
  01d99	03 44 24 38	 add	 eax, DWORD PTR num$[rsp]
  01d9d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  01da2	89 81 10 01 00
	00		 mov	 DWORD PTR [rcx+272], eax

; 3680 :                     tn->inbuffcount++;

  01da8	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01dad	8b 80 0c 01 00
	00		 mov	 eax, DWORD PTR [rax+268]
  01db3	ff c0		 inc	 eax
  01db5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  01dba	89 81 0c 01 00
	00		 mov	 DWORD PTR [rcx+268], eax
$LN144@tcpnje_exe:

; 3681 :                 }
; 3682 : 
; 3683 :                 /* If the buffer started with DLE STX, fake DLE ETB after it. */
; 3684 :                 if (!memcmp(tpb->start, DLE STX, 2) && ((num + 2) <= count))

  01dc0	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  01dc5	41 b8 02 00 00
	00		 mov	 r8d, 2
  01dcb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160790
  01dd2	48 8b c8	 mov	 rcx, rax
  01dd5	e8 00 00 00 00	 call	 memcmp
  01dda	85 c0		 test	 eax, eax
  01ddc	0f 85 d4 00 00
	00		 jne	 $LN145@tcpnje_exe
  01de2	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  01de6	83 c0 02	 add	 eax, 2
  01de9	3b 84 24 a0 01
	00 00		 cmp	 eax, DWORD PTR count$[rsp]
  01df0	0f 87 c0 00 00
	00		 ja	 $LN145@tcpnje_exe

; 3685 :                 {
; 3686 :                     DBGMSG(4096, "HHCTN170D %4.4X:TCPNJE READ - adding DLE ETB to end of buffer\n", dev->devnum);

  01df6	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01dfb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01dfe	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01e04	c1 e8 0f	 shr	 eax, 15
  01e07	83 e0 01	 and	 eax, 1
  01e0a	85 c0		 test	 eax, eax
  01e0c	74 14		 je	 SHORT $LN148@tcpnje_exe
  01e0e	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01e13	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01e19	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  01e1e	85 c0		 test	 eax, eax
  01e20	75 14		 jne	 SHORT $LN147@tcpnje_exe
$LN148@tcpnje_exe:
  01e22	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01e27	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01e2d	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  01e32	85 c0		 test	 eax, eax
  01e34	74 1b		 je	 SHORT $LN146@tcpnje_exe
$LN147@tcpnje_exe:
  01e36	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01e3e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01e42	8b d0		 mov	 edx, eax
  01e44	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160794
  01e4b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN146@tcpnje_exe:

; 3687 : 
; 3688 :                     iobuf[num++] = *DLE;

  01e51	b8 01 00 00 00	 mov	 eax, 1
  01e56	48 6b c0 00	 imul	 rax, rax, 0
  01e5a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160795
  01e61	8b 54 24 38	 mov	 edx, DWORD PTR num$[rsp]
  01e65	48 8b bc 24 b8
	01 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  01e6d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01e71	88 04 17	 mov	 BYTE PTR [rdi+rdx], al
  01e74	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  01e78	ff c0		 inc	 eax
  01e7a	89 44 24 38	 mov	 DWORD PTR num$[rsp], eax

; 3689 :                     iobuf[num++] = *ETB;

  01e7e	b8 01 00 00 00	 mov	 eax, 1
  01e83	48 6b c0 00	 imul	 rax, rax, 0
  01e87	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160796
  01e8e	8b 54 24 38	 mov	 edx, DWORD PTR num$[rsp]
  01e92	48 8b bc 24 b8
	01 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  01e9a	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01e9e	88 04 17	 mov	 BYTE PTR [rdi+rdx], al
  01ea1	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  01ea5	ff c0		 inc	 eax
  01ea7	89 44 24 38	 mov	 DWORD PTR num$[rsp], eax

; 3690 :                     TTRlength += 2;

  01eab	8b 44 24 48	 mov	 eax, DWORD PTR TTRlength$[rsp]
  01eaf	83 c0 02	 add	 eax, 2
  01eb2	89 44 24 48	 mov	 DWORD PTR TTRlength$[rsp], eax
$LN145@tcpnje_exe:

; 3691 :                 }
; 3692 : 
; 3693 :                 if (count < TTRlength)

  01eb6	8b 44 24 48	 mov	 eax, DWORD PTR TTRlength$[rsp]
  01eba	39 84 24 a0 01
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  01ec1	73 0b		 jae	 SHORT $LN149@tcpnje_exe

; 3694 :                 {
; 3695 :                     *more = 1;

  01ec3	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR more$[rsp]
  01ecb	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN149@tcpnje_exe:

; 3696 :                 }
; 3697 : 
; 3698 :                 *residual = count - num;

  01ece	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  01ed2	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  01ed9	2b c8		 sub	 ecx, eax
  01edb	8b c1		 mov	 eax, ecx
  01edd	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  01ee5	89 01		 mov	 DWORD PTR [rcx], eax

; 3699 :                 *unitstat = CSW_CE | CSW_DE;

  01ee7	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  01eef	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3700 : 
; 3701 :                 logdump("Read  ", dev, iobuf, num);

  01ef2	8b 44 24 38	 mov	 eax, DWORD PTR num$[rsp]
  01ef6	44 8b c8	 mov	 r9d, eax
  01ef9	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR iobuf$[rsp]
  01f01	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  01f09	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160798
  01f10	e8 00 00 00 00	 call	 logdump

; 3702 : 
; 3703 :                 /* Check for SYN NAK indicating the other end wants to be secondary */
; 3704 :                 if ((TTRlength == 2) && !memcmp(tpb->start, SYN NAK, 2))

  01f15	83 7c 24 48 02	 cmp	 DWORD PTR TTRlength$[rsp], 2
  01f1a	0f 85 b1 00 00
	00		 jne	 $LN150@tcpnje_exe
  01f20	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  01f25	41 b8 02 00 00
	00		 mov	 r8d, 2
  01f2b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160800
  01f32	48 8b c8	 mov	 rcx, rax
  01f35	e8 00 00 00 00	 call	 memcmp
  01f3a	85 c0		 test	 eax, eax
  01f3c	0f 85 8f 00 00
	00		 jne	 $LN150@tcpnje_exe

; 3705 :                 {
; 3706 :                     tn->synnakreceived = 1;

  01f42	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01f47	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  01f4d	0f ba e8 0b	 bts	 eax, 11
  01f51	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  01f56	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 3707 : 
; 3708 :                     DBGMSG(4096, "HHCTN169D %4.4X:TCPNJE READ - incoming SYN NAK - Connection state: %s\n",

  01f5c	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01f61	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01f64	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01f6a	c1 e8 0f	 shr	 eax, 15
  01f6d	83 e0 01	 and	 eax, 1
  01f70	85 c0		 test	 eax, eax
  01f72	74 14		 je	 SHORT $LN153@tcpnje_exe
  01f74	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01f79	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01f7f	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  01f84	85 c0		 test	 eax, eax
  01f86	75 14		 jne	 SHORT $LN152@tcpnje_exe
$LN153@tcpnje_exe:
  01f88	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01f8d	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01f93	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  01f98	85 c0		 test	 eax, eax
  01f9a	74 30		 je	 SHORT $LN151@tcpnje_exe
$LN152@tcpnje_exe:
  01f9c	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01fa1	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  01fa8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  01faf	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  01fb7	0f b7 52 48	 movzx	 edx, WORD PTR [rdx+72]
  01fbb	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  01fbf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160804
  01fc6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN151@tcpnje_exe:

; 3709 :                            dev->devnum, tcpnje_state_text[tn->state]);
; 3710 : 
; 3711 :                     break;

  01fcc	e9 7e 1a 00 00	 jmp	 $LN14@tcpnje_exe
$LN150@tcpnje_exe:

; 3712 :                 }
; 3713 : 
; 3714 :                 /* Receipt of this buffer will serve as ACK for an outgoing buffer */
; 3715 :                 if (tn->ackcount > 0)

  01fd1	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01fd6	83 b8 08 01 00
	00 00		 cmp	 DWORD PTR [rax+264], 0
  01fdd	7e 18		 jle	 SHORT $LN154@tcpnje_exe

; 3716 :                 {
; 3717 :                     tn->ackcount--;

  01fdf	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  01fe4	8b 80 08 01 00
	00		 mov	 eax, DWORD PTR [rax+264]
  01fea	ff c8		 dec	 eax
  01fec	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  01ff1	89 81 08 01 00
	00		 mov	 DWORD PTR [rcx+264], eax
$LN154@tcpnje_exe:

; 3718 :                 }
; 3719 : 
; 3720 :                 break;

  01ff7	e9 53 1a 00 00	 jmp	 $LN14@tcpnje_exe
$LN155@tcpnje_exe:

; 3721 : 
; 3722 :         /*---------------------------------------------------------------*/
; 3723 :         /* WRITE                                                         */
; 3724 :         /*---------------------------------------------------------------*/
; 3725 :         case 0x01:
; 3726 :                 DBGMSG(1024, "HHCTN156D %4.4X:TCPNJE CCW WRITE count %d\n",

  01ffc	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02001	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02004	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0200a	c1 e8 0f	 shr	 eax, 15
  0200d	83 e0 01	 and	 eax, 1
  02010	85 c0		 test	 eax, eax
  02012	74 14		 je	 SHORT $LN158@tcpnje_exe
  02014	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02019	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0201f	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  02024	85 c0		 test	 eax, eax
  02026	75 14		 jne	 SHORT $LN157@tcpnje_exe
$LN158@tcpnje_exe:
  02028	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0202d	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  02033	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  02038	85 c0		 test	 eax, eax
  0203a	74 23		 je	 SHORT $LN156@tcpnje_exe
$LN157@tcpnje_exe:
  0203c	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02044	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02048	44 8b 84 24 a0
	01 00 00	 mov	 r8d, DWORD PTR count$[rsp]
  02050	8b d0		 mov	 edx, eax
  02052	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160810
  02059	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN156@tcpnje_exe:

; 3727 :                         dev->devnum, count);
; 3728 : 
; 3729 :                 /* Write strategy is as follows:                         */
; 3730 :                 /*                                                       */
; 3731 :                 /* - Check FCS in buffer coming from RSCS and flag it    */
; 3732 :                 /*   if RSCS does not want incoming data for now.        */
; 3733 :                 /* - Drop outgoing null buffers, SYN SYN SYN SYN or      */
; 3734 :                 /*   DLE ETB sequences. Also drop DLE ACK0 if signed on. */
; 3735 :                 /* - If the data to be written doesn't fit in the output */
; 3736 :                 /*   buffer, send the buffer.                            */
; 3737 :                 /* - Put the data to be sent in the buffer.              */
; 3738 :                 /* - If the remaining space in the buffer is less than   */
; 3739 :                 /*   the size of a TPbuffer, send the buffer.            */
; 3740 :                 /* - If RSCS has gone idle, send the buffer.             */
; 3741 :                 /* - If a keepalive is due, send the (empty) buffer.     */
; 3742 : 
; 3743 :                 logdump("Write ", dev, iobuf, count);

  0205f	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  02066	44 8b c8	 mov	 r9d, eax
  02069	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR iobuf$[rsp]
  02071	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  02079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160811
  02080	e8 00 00 00 00	 call	 logdump

; 3744 : 
; 3745 :                 /* Check if the line has been enabled */
; 3746 :                 if (!tn->enabled)

  02085	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0208a	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  02090	83 e0 01	 and	 eax, 1
  02093	85 c0		 test	 eax, eax
  02095	75 53		 jne	 SHORT $LN159@tcpnje_exe

; 3747 :                 {
; 3748 :                     *residual = count;

  02097	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  0209f	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  020a6	89 08		 mov	 DWORD PTR [rax], ecx

; 3749 :                     *unitstat = CSW_CE | CSW_DE | CSW_UC;

  020a8	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  020b0	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3750 :                     dev->sense[0] = SENSE_CR;

  020b3	b8 01 00 00 00	 mov	 eax, 1
  020b8	48 6b c0 00	 imul	 rax, rax, 0
  020bc	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  020c4	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 3751 :                     dev->sense[1] = 0;

  020cc	b8 01 00 00 00	 mov	 eax, 1
  020d1	48 6b c0 01	 imul	 rax, rax, 1
  020d5	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  020dd	c6 84 01 64 03
	00 00 00	 mov	 BYTE PTR [rcx+rax+868], 0

; 3752 :                     break;

  020e5	e9 65 19 00 00	 jmp	 $LN14@tcpnje_exe
$LN159@tcpnje_exe:

; 3753 :                 }
; 3754 : 
; 3755 : #if defined(TCPNJE_CDWMERGE_KLUDGE)
; 3756 :                 /* Check for a write of SYN SYN SYN SYN that channel.c has already appended
; 3757 :                    a chained write to, despite being told not to by dev->cdwmerge = 0.       */
; 3758 :                 if  ((count > 4) && !memcmp(iobuf, SYN SYN SYN SYN, 4))

  020ea	83 bc 24 a0 01
	00 00 04	 cmp	 DWORD PTR count$[rsp], 4
  020f2	0f 86 bf 00 00
	00		 jbe	 $LN160@tcpnje_exe
  020f8	41 b8 04 00 00
	00		 mov	 r8d, 4
  020fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160814
  02105	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  0210d	e8 00 00 00 00	 call	 memcmp
  02112	85 c0		 test	 eax, eax
  02114	0f 85 9d 00 00
	00		 jne	 $LN160@tcpnje_exe

; 3759 :                 {
; 3760 :                     DBGMSG(4096, "HHCTN157D %4.4X:TCPNJE WRITE - kludge dropping outgoing SYN SYN SYN SYN. Connection state: %s\n",

  0211a	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0211f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02122	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02128	c1 e8 0f	 shr	 eax, 15
  0212b	83 e0 01	 and	 eax, 1
  0212e	85 c0		 test	 eax, eax
  02130	74 14		 je	 SHORT $LN163@tcpnje_exe
  02132	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02137	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0213d	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  02142	85 c0		 test	 eax, eax
  02144	75 14		 jne	 SHORT $LN162@tcpnje_exe
$LN163@tcpnje_exe:
  02146	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0214b	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  02151	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  02156	85 c0		 test	 eax, eax
  02158	74 30		 je	 SHORT $LN161@tcpnje_exe
$LN162@tcpnje_exe:
  0215a	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0215f	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  02166	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  0216d	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  02175	0f b7 52 48	 movzx	 edx, WORD PTR [rdx+72]
  02179	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  0217d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160818
  02184	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN161@tcpnje_exe:

; 3761 :                             dev->devnum, tcpnje_state_text[tn->state]);
; 3762 : 
; 3763 :                     tpb = (struct TPB *)&iobuf[4];

  0218a	b8 01 00 00 00	 mov	 eax, 1
  0218f	48 6b c0 04	 imul	 rax, rax, 4
  02193	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  0219b	48 03 c8	 add	 rcx, rax
  0219e	48 8b c1	 mov	 rax, rcx
  021a1	48 89 44 24 40	 mov	 QWORD PTR tpb$[rsp], rax

; 3764 :                     count -= 4;

  021a6	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  021ad	83 e8 04	 sub	 eax, 4
  021b0	89 84 24 a0 01
	00 00		 mov	 DWORD PTR count$[rsp], eax
$LN160@tcpnje_exe:

; 3765 :                 }
; 3766 : #endif /* TCPNJE_CDWMERGE_KLUDGE */
; 3767 : 
; 3768 :                 /* Perform various checks on outgoing buffers that contain BCB and FCS bytes */
; 3769 :                 if (count >= 6)

  021b7	83 bc 24 a0 01
	00 00 06	 cmp	 DWORD PTR count$[rsp], 6
  021bf	0f 82 3b 0b 00
	00		 jb	 $LN164@tcpnje_exe

; 3770 :                 {
; 3771 :                     /* Check FCS in case RSCS is trying to stop incoming data */
; 3772 :                     /* 8FCF => all is good.  Anything else => bad.            */
; 3773 :                     if ((tpb->fcs[0] == 0x8f) && (tpb->fcs[1] == 0xcf))

  021c5	b8 01 00 00 00	 mov	 eax, 1
  021ca	48 6b c0 00	 imul	 rax, rax, 0
  021ce	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  021d3	0f b6 44 01 03	 movzx	 eax, BYTE PTR [rcx+rax+3]
  021d8	3d 8f 00 00 00	 cmp	 eax, 143		; 0000008fH
  021dd	0f 85 db 00 00
	00		 jne	 $LN165@tcpnje_exe
  021e3	b8 01 00 00 00	 mov	 eax, 1
  021e8	48 6b c0 01	 imul	 rax, rax, 1
  021ec	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  021f1	0f b6 44 01 03	 movzx	 eax, BYTE PTR [rcx+rax+3]
  021f6	3d cf 00 00 00	 cmp	 eax, 207		; 000000cfH
  021fb	0f 85 bd 00 00
	00		 jne	 $LN165@tcpnje_exe

; 3774 :                     {
; 3775 :                         if (tn->holdincoming)

  02201	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02206	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0220c	c1 e8 08	 shr	 eax, 8
  0220f	83 e0 01	 and	 eax, 1
  02212	85 c0		 test	 eax, eax
  02214	0f 84 85 00 00
	00		 je	 $LN167@tcpnje_exe

; 3776 :                         {
; 3777 :                             DBGMSG(2048, "HHCTN158D %4.4X:TCPNJE WRITE - Resuming incoming data due to outgoing FCS %2.2X%2.2X\n",

  0221a	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0221f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02222	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02228	c1 e8 0f	 shr	 eax, 15
  0222b	83 e0 01	 and	 eax, 1
  0222e	85 c0		 test	 eax, eax
  02230	74 14		 je	 SHORT $LN170@tcpnje_exe
  02232	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02237	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0223d	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  02242	85 c0		 test	 eax, eax
  02244	75 14		 jne	 SHORT $LN169@tcpnje_exe
$LN170@tcpnje_exe:
  02246	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0224b	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  02251	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  02256	85 c0		 test	 eax, eax
  02258	74 45		 je	 SHORT $LN168@tcpnje_exe
$LN169@tcpnje_exe:
  0225a	b8 01 00 00 00	 mov	 eax, 1
  0225f	48 6b c0 01	 imul	 rax, rax, 1
  02263	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  02268	0f b6 44 01 03	 movzx	 eax, BYTE PTR [rcx+rax+3]
  0226d	b9 01 00 00 00	 mov	 ecx, 1
  02272	48 6b c9 00	 imul	 rcx, rcx, 0
  02276	48 8b 54 24 40	 mov	 rdx, QWORD PTR tpb$[rsp]
  0227b	0f b6 4c 0a 03	 movzx	 ecx, BYTE PTR [rdx+rcx+3]
  02280	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  02288	0f b7 52 48	 movzx	 edx, WORD PTR [rdx+72]
  0228c	44 8b c8	 mov	 r9d, eax
  0228f	44 8b c1	 mov	 r8d, ecx
  02292	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160826
  02299	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN168@tcpnje_exe:
$LN167@tcpnje_exe:

; 3778 :                                     dev->devnum, tpb->fcs[0], tpb->fcs[1]);
; 3779 :                         }
; 3780 :                         tn->holdincoming = 0;

  0229f	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  022a4	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  022aa	0f ba f0 08	 btr	 eax, 8
  022ae	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  022b3	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 3781 :                     }

  022b9	e9 b8 00 00 00	 jmp	 $LN166@tcpnje_exe
$LN165@tcpnje_exe:

; 3782 :                     else
; 3783 :                     {
; 3784 :                         if (!tn->holdincoming)

  022be	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  022c3	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  022c9	c1 e8 08	 shr	 eax, 8
  022cc	83 e0 01	 and	 eax, 1
  022cf	85 c0		 test	 eax, eax
  022d1	0f 85 85 00 00
	00		 jne	 $LN171@tcpnje_exe

; 3785 :                         {
; 3786 :                             DBGMSG(2048, "HHCTN159D %4.4X:TCPNJE WRITE - Holding incoming data due to outgoing FCS %2.2X%2.2X\n",

  022d7	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  022dc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  022df	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  022e5	c1 e8 0f	 shr	 eax, 15
  022e8	83 e0 01	 and	 eax, 1
  022eb	85 c0		 test	 eax, eax
  022ed	74 14		 je	 SHORT $LN174@tcpnje_exe
  022ef	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  022f4	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  022fa	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  022ff	85 c0		 test	 eax, eax
  02301	75 14		 jne	 SHORT $LN173@tcpnje_exe
$LN174@tcpnje_exe:
  02303	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02308	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0230e	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  02313	85 c0		 test	 eax, eax
  02315	74 45		 je	 SHORT $LN172@tcpnje_exe
$LN173@tcpnje_exe:
  02317	b8 01 00 00 00	 mov	 eax, 1
  0231c	48 6b c0 01	 imul	 rax, rax, 1
  02320	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  02325	0f b6 44 01 03	 movzx	 eax, BYTE PTR [rcx+rax+3]
  0232a	b9 01 00 00 00	 mov	 ecx, 1
  0232f	48 6b c9 00	 imul	 rcx, rcx, 0
  02333	48 8b 54 24 40	 mov	 rdx, QWORD PTR tpb$[rsp]
  02338	0f b6 4c 0a 03	 movzx	 ecx, BYTE PTR [rdx+rcx+3]
  0233d	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  02345	0f b7 52 48	 movzx	 edx, WORD PTR [rdx+72]
  02349	44 8b c8	 mov	 r9d, eax
  0234c	44 8b c1	 mov	 r8d, ecx
  0234f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160831
  02356	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN172@tcpnje_exe:
$LN171@tcpnje_exe:

; 3787 :                                     dev->devnum, tpb->fcs[0], tpb->fcs[1]);
; 3788 :                         }
; 3789 :                         tn->holdincoming = 1;

  0235c	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02361	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  02367	0f ba e8 08	 bts	 eax, 8
  0236b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  02370	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax
$LN166@tcpnje_exe:

; 3790 :                     }
; 3791 :                     /* Is the wait-a-bit bit set? */
; 3792 :                     if (tpb->fcs[0] & 0x40)

  02376	b8 01 00 00 00	 mov	 eax, 1
  0237b	48 6b c0 00	 imul	 rax, rax, 0
  0237f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  02384	0f b6 44 01 03	 movzx	 eax, BYTE PTR [rcx+rax+3]
  02389	83 e0 40	 and	 eax, 64			; 00000040H
  0238c	85 c0		 test	 eax, eax
  0238e	0f 84 9f 00 00
	00		 je	 $LN175@tcpnje_exe

; 3793 :                     {
; 3794 :                         tn->waitabit = 1;

  02394	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02399	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0239f	0f ba e8 07	 bts	 eax, 7
  023a3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  023a8	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 3795 : 
; 3796 :                         DBGMSG(2048, "HHCTN160D %4.4X:TCPNJE WRITE - RSCS sent FCS %2.2X%2.2X with wait-a-bit bit set\n",

  023ae	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  023b3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  023b6	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  023bc	c1 e8 0f	 shr	 eax, 15
  023bf	83 e0 01	 and	 eax, 1
  023c2	85 c0		 test	 eax, eax
  023c4	74 14		 je	 SHORT $LN178@tcpnje_exe
  023c6	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  023cb	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  023d1	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  023d6	85 c0		 test	 eax, eax
  023d8	75 14		 jne	 SHORT $LN177@tcpnje_exe
$LN178@tcpnje_exe:
  023da	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  023df	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  023e5	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  023ea	85 c0		 test	 eax, eax
  023ec	74 45		 je	 SHORT $LN176@tcpnje_exe
$LN177@tcpnje_exe:
  023ee	b8 01 00 00 00	 mov	 eax, 1
  023f3	48 6b c0 01	 imul	 rax, rax, 1
  023f7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  023fc	0f b6 44 01 03	 movzx	 eax, BYTE PTR [rcx+rax+3]
  02401	b9 01 00 00 00	 mov	 ecx, 1
  02406	48 6b c9 00	 imul	 rcx, rcx, 0
  0240a	48 8b 54 24 40	 mov	 rdx, QWORD PTR tpb$[rsp]
  0240f	0f b6 4c 0a 03	 movzx	 ecx, BYTE PTR [rdx+rcx+3]
  02414	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0241c	0f b7 52 48	 movzx	 edx, WORD PTR [rdx+72]
  02420	44 8b c8	 mov	 r9d, eax
  02423	44 8b c1	 mov	 r8d, ecx
  02426	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160836
  0242d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN176@tcpnje_exe:
$LN175@tcpnje_exe:

; 3797 :                                 dev->devnum, tpb->fcs[0], tpb->fcs[1]);
; 3798 : 
; 3799 : #if 0
; 3800 :                         /* Ask the worker thread to wait a few seconds */
; 3801 :                         /* Holding up the write while we wait probably */
; 3802 :                         /* does not help RSCS to deal with incoming    */
; 3803 :                         /* data but it'll do until I think of          */
; 3804 :                         /* something better to do.                     */
; 3805 :                         tn->curpending = TCPNJE_PEND_WAIT;
; 3806 : 
; 3807 :                         /* Wake-up the worker thread */
; 3808 :                         tcpnje_wakeup_and_wait(tn, 0);
; 3809 : 
; 3810 :                         tn->waitabit = 0;
; 3811 : #endif
; 3812 :                     }
; 3813 :                     /* If this is a null buffer, no need to send it to the other end */
; 3814 :                     if (count == 6)

  02433	83 bc 24 a0 01
	00 00 06	 cmp	 DWORD PTR count$[rsp], 6
  0243b	0f 85 d6 00 00
	00		 jne	 $LN179@tcpnje_exe

; 3815 :                     {
; 3816 :                         DBGMSG(2048, "HHCTN161D %4.4X:TCPNJE WRITE - Dropping outgoing null buffer BCB: %2.2X FCS: %2.2X%2.2X\n",

  02441	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02446	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02449	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0244f	c1 e8 0f	 shr	 eax, 15
  02452	83 e0 01	 and	 eax, 1
  02455	85 c0		 test	 eax, eax
  02457	74 14		 je	 SHORT $LN182@tcpnje_exe
  02459	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0245e	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  02464	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  02469	85 c0		 test	 eax, eax
  0246b	75 14		 jne	 SHORT $LN181@tcpnje_exe
$LN182@tcpnje_exe:
  0246d	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02472	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  02478	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  0247d	85 c0		 test	 eax, eax
  0247f	74 54		 je	 SHORT $LN180@tcpnje_exe
$LN181@tcpnje_exe:
  02481	b8 01 00 00 00	 mov	 eax, 1
  02486	48 6b c0 01	 imul	 rax, rax, 1
  0248a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  0248f	0f b6 44 01 03	 movzx	 eax, BYTE PTR [rcx+rax+3]
  02494	b9 01 00 00 00	 mov	 ecx, 1
  02499	48 6b c9 00	 imul	 rcx, rcx, 0
  0249d	48 8b 54 24 40	 mov	 rdx, QWORD PTR tpb$[rsp]
  024a2	0f b6 4c 0a 03	 movzx	 ecx, BYTE PTR [rdx+rcx+3]
  024a7	48 8b 54 24 40	 mov	 rdx, QWORD PTR tpb$[rsp]
  024ac	0f b6 52 02	 movzx	 edx, BYTE PTR [rdx+2]
  024b0	48 8b bc 24 80
	01 00 00	 mov	 rdi, QWORD PTR dev$[rsp]
  024b8	0f b7 7f 48	 movzx	 edi, WORD PTR [rdi+72]
  024bc	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  024c0	44 8b c9	 mov	 r9d, ecx
  024c3	44 8b c2	 mov	 r8d, edx
  024c6	8b d7		 mov	 edx, edi
  024c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160841
  024cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN180@tcpnje_exe:

; 3817 :                                 dev->devnum, tpb->bcb, tpb->fcs[0], tpb->fcs[1]);
; 3818 : 
; 3819 :                         *residual = 0;

  024d5	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  024dd	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 3820 :                         *unitstat = CSW_CE | CSW_DE;

  024e3	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  024eb	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3821 :                         /* Flag that the next outgoing BCB will not be what the other end expects    */
; 3822 :                         tn->resetoutbcb = 1;

  024ee	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  024f3	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  024f9	0f ba e8 0a	 bts	 eax, 10
  024fd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  02502	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 3823 : 
; 3824 :                         /* RSCS has no real data to send out if it sent a null buffer.  In order to  */
; 3825 :                         /* avoid causing delays, we should send the accumulated output buffer out    */
; 3826 :                         /* now instead of waiting around until RSCS has something else to send out.  */
; 3827 :                         tcpnje_flush(tn);

  02508	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0250d	e8 00 00 00 00	 call	 tcpnje_flush

; 3828 :                         break;

  02512	e9 38 15 00 00	 jmp	 $LN14@tcpnje_exe
$LN179@tcpnje_exe:

; 3829 :                     }
; 3830 :                     /* If we have already dropped something containing a BCB, reset the BCB this time */
; 3831 :                     if (tn->resetoutbcb)

  02517	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0251c	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  02522	c1 e8 0a	 shr	 eax, 10
  02525	83 e0 01	 and	 eax, 1
  02528	85 c0		 test	 eax, eax
  0252a	0f 84 32 01 00
	00		 je	 $LN183@tcpnje_exe

; 3832 :                     {
; 3833 :                         /* I am not very clear on how this works.  It appears that setting the reset */
; 3834 :                         /* flag in this BCB causes this BCB to not be flagged as in error if not in  */
; 3835 :                         /* sequence with the last one received and also causes this BCB to be become */
; 3836 :                         /* the BCB that RSCS expects to find in the next buffer it receives.         */
; 3837 :                         /* Anyway, if I set the reset flag and make the BCB count the same as the    */
; 3838 :                         /* last one received plus one, RSCS seems to be relatively happy.  If the    */
; 3839 :                         /* reset bit is already set by the time it gets here, all bets are off.  If  */
; 3840 :                         /* the ignore bit is set, it's probably not a problem (yet).                 */
; 3841 :                         if (tpb->bcb & 0x30)

  02530	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  02535	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  02539	83 e0 30	 and	 eax, 48			; 00000030H
  0253c	85 c0		 test	 eax, eax
  0253e	74 78		 je	 SHORT $LN184@tcpnje_exe

; 3842 :                         {
; 3843 :                             if (tpb->bcb & 0x20)

  02540	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  02545	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  02549	83 e0 20	 and	 eax, 32			; 00000020H
  0254c	85 c0		 test	 eax, eax
  0254e	74 63		 je	 SHORT $LN186@tcpnje_exe

; 3844 :                             {
; 3845 :                                 DBGMSG(16, "HHCTN086W %4.4X:TCPNJE WRITE - Received BCB with reset bit set from RSCS: %2.2X\n",

  02550	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02555	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02558	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0255e	c1 e8 0f	 shr	 eax, 15
  02561	83 e0 01	 and	 eax, 1
  02564	85 c0		 test	 eax, eax
  02566	74 12		 je	 SHORT $LN189@tcpnje_exe
  02568	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0256d	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  02573	83 e0 10	 and	 eax, 16
  02576	85 c0		 test	 eax, eax
  02578	75 12		 jne	 SHORT $LN188@tcpnje_exe
$LN189@tcpnje_exe:
  0257a	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0257f	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  02585	83 e0 10	 and	 eax, 16
  02588	85 c0		 test	 eax, eax
  0258a	74 27		 je	 SHORT $LN187@tcpnje_exe
$LN188@tcpnje_exe:
  0258c	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  02591	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  02595	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0259d	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  025a1	44 8b c0	 mov	 r8d, eax
  025a4	8b d1		 mov	 edx, ecx
  025a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160849
  025ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN187@tcpnje_exe:
$LN186@tcpnje_exe:

; 3846 :                                         dev->devnum, tpb->bcb);
; 3847 :                             }
; 3848 :                         }

  025b3	e9 90 00 00 00	 jmp	 $LN185@tcpnje_exe
$LN184@tcpnje_exe:

; 3849 :                         else
; 3850 :                         {
; 3851 :                             tpb->bcb = (tpb->bcb & 0xf0) | 0x20 | ((tpb->bcb + 1) & 0x0f);

  025b8	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  025bd	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  025c1	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  025c6	83 c8 20	 or	 eax, 32			; 00000020H
  025c9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  025ce	0f b6 49 02	 movzx	 ecx, BYTE PTR [rcx+2]
  025d2	ff c1		 inc	 ecx
  025d4	83 e1 0f	 and	 ecx, 15
  025d7	0b c1		 or	 eax, ecx
  025d9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  025de	88 41 02	 mov	 BYTE PTR [rcx+2], al

; 3852 : 
; 3853 :                             DBGMSG(2048, "HHCTN162D %4.4X:TCPNJE WRITE - Resetting outgoing BCB to %2.2X\n",

  025e1	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  025e6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  025e9	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  025ef	c1 e8 0f	 shr	 eax, 15
  025f2	83 e0 01	 and	 eax, 1
  025f5	85 c0		 test	 eax, eax
  025f7	74 14		 je	 SHORT $LN192@tcpnje_exe
  025f9	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  025fe	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  02604	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  02609	85 c0		 test	 eax, eax
  0260b	75 14		 jne	 SHORT $LN191@tcpnje_exe
$LN192@tcpnje_exe:
  0260d	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02612	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  02618	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  0261d	85 c0		 test	 eax, eax
  0261f	74 27		 je	 SHORT $LN190@tcpnje_exe
$LN191@tcpnje_exe:
  02621	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  02626	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  0262a	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02632	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  02636	44 8b c0	 mov	 r8d, eax
  02639	8b d1		 mov	 edx, ecx
  0263b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160853
  02642	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN190@tcpnje_exe:
$LN185@tcpnje_exe:

; 3854 :                                     dev->devnum, tpb->bcb);
; 3855 :                         }
; 3856 :                         tn->resetoutbcb = 0;

  02648	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0264d	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  02653	0f ba f0 0a	 btr	 eax, 10
  02657	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0265c	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax
$LN183@tcpnje_exe:

; 3857 :                     }
; 3858 :                     /* Also check for "permssion to open stream" response  */
; 3859 :                     /* going out and suppress it if FASTOPEN flag was used */
; 3860 :                     /* on the "open stream" request.  This falls short of  */
; 3861 :                     /* the full response called for but it is better than  */
; 3862 :                     /* doing nothing at all.                               */
; 3863 :                     if ((count >= 7) && (tpb->rcb == 0xa0) && (tn->fastopen == tpb->srcb))

  02662	83 bc 24 a0 01
	00 00 07	 cmp	 DWORD PTR count$[rsp], 7
  0266a	0f 82 df 00 00
	00		 jb	 $LN193@tcpnje_exe
  02670	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  02675	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  02679	3d a0 00 00 00	 cmp	 eax, 160		; 000000a0H
  0267e	0f 85 cb 00 00
	00		 jne	 $LN193@tcpnje_exe
  02684	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02689	0f b6 80 61 01
	00 00		 movzx	 eax, BYTE PTR [rax+353]
  02690	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  02695	0f b6 49 06	 movzx	 ecx, BYTE PTR [rcx+6]
  02699	3b c1		 cmp	 eax, ecx
  0269b	0f 85 ae 00 00
	00		 jne	 $LN193@tcpnje_exe

; 3864 :                     {
; 3865 :                         DBGMSG(2048, "HHCTN087I %4.4X:TCPNJE WRITE - Permission to open stream %2.2X suppressed due to preceeding FASTOPEN\n",

  026a1	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  026a6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  026a9	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  026af	c1 e8 0f	 shr	 eax, 15
  026b2	83 e0 01	 and	 eax, 1
  026b5	85 c0		 test	 eax, eax
  026b7	74 14		 je	 SHORT $LN196@tcpnje_exe
  026b9	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  026be	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  026c4	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  026c9	85 c0		 test	 eax, eax
  026cb	75 14		 jne	 SHORT $LN195@tcpnje_exe
$LN196@tcpnje_exe:
  026cd	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  026d2	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  026d8	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  026dd	85 c0		 test	 eax, eax
  026df	74 2a		 je	 SHORT $LN194@tcpnje_exe
$LN195@tcpnje_exe:
  026e1	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  026e6	0f b6 80 61 01
	00 00		 movzx	 eax, BYTE PTR [rax+353]
  026ed	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  026f5	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  026f9	44 8b c0	 mov	 r8d, eax
  026fc	8b d1		 mov	 edx, ecx
  026fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160858
  02705	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN194@tcpnje_exe:

; 3866 :                                 dev->devnum, tn->fastopen);
; 3867 :                         tn->fastopen = 0;

  0270b	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02710	c6 80 61 01 00
	00 00		 mov	 BYTE PTR [rax+353], 0

; 3868 :                         tn->resetoutbcb = 1;

  02717	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0271c	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  02722	0f ba e8 0a	 bts	 eax, 10
  02726	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0272b	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 3869 :                         *residual = 0;

  02731	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  02739	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 3870 :                         *unitstat = CSW_CE | CSW_DE;

  0273f	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  02747	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3871 :                         break;

  0274a	e9 00 13 00 00	 jmp	 $LN14@tcpnje_exe
$LN193@tcpnje_exe:

; 3872 :                     }
; 3873 :                     /* Are we sending an outgoing NCC I initial signon     */
; 3874 :                     /* record? Did RSCS request the PREPARE feature?       */
; 3875 :                     /* If so, reset it as we are not currently able to     */
; 3876 :                     /* provide this feature.                               */
; 3877 : 
; 3878 :                     if ((tpb->rcb == 0xf0) && (tpb->srcb == 0xc9) &&

  0274f	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  02754	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  02758	3d f0 00 00 00	 cmp	 eax, 240		; 000000f0H
  0275d	0f 85 b3 02 00
	00		 jne	 $LN197@tcpnje_exe
  02763	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  02768	0f b6 40 06	 movzx	 eax, BYTE PTR [rax+6]
  0276c	3d c9 00 00 00	 cmp	 eax, 201		; 000000c9H
  02771	0f 85 9f 02 00
	00		 jne	 $LN197@tcpnje_exe
  02777	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0277c	83 b8 54 01 00
	00 07		 cmp	 DWORD PTR [rax+340], 7
  02783	75 15		 jne	 SHORT $LN199@tcpnje_exe
  02785	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0278a	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  02790	c1 e8 0b	 shr	 eax, 11
  02793	83 e0 01	 and	 eax, 1
  02796	85 c0		 test	 eax, eax
  02798	74 2b		 je	 SHORT $LN198@tcpnje_exe
$LN199@tcpnje_exe:
  0279a	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0279f	83 b8 54 01 00
	00 06		 cmp	 DWORD PTR [rax+340], 6
  027a6	0f 85 6a 02 00
	00		 jne	 $LN197@tcpnje_exe
  027ac	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  027b1	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  027b7	c1 e8 0b	 shr	 eax, 11
  027ba	83 e0 01	 and	 eax, 1
  027bd	85 c0		 test	 eax, eax
  027bf	0f 84 51 02 00
	00		 je	 $LN197@tcpnje_exe
$LN198@tcpnje_exe:

; 3879 :                        (((tn->state == NJEACKRCD) && !tn->synnakreceived) ||
; 3880 :                         ((tn->state == NJEACKSNT) && tn->synnakreceived)))
; 3881 :                     {
; 3882 :                         char nodestring[9];
; 3883 : 
; 3884 :                         if (count >= (5 + 0x0b))

  027c5	83 bc 24 a0 01
	00 00 10	 cmp	 DWORD PTR count$[rsp], 16
  027cd	0f 82 af 00 00
	00		 jb	 $LN200@tcpnje_exe

; 3885 :                         {
; 3886 :                             DBGMSG(64, "HHCTN088I %4.4X:TCPNJE - sending initial signon for local RSCS name %s.  Connection state %s\n",

  027d3	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  027d8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  027db	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  027e1	c1 e8 0f	 shr	 eax, 15
  027e4	83 e0 01	 and	 eax, 1
  027e7	85 c0		 test	 eax, eax
  027e9	74 12		 je	 SHORT $LN203@tcpnje_exe
  027eb	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  027f0	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  027f6	83 e0 40	 and	 eax, 64			; 00000040H
  027f9	85 c0		 test	 eax, eax
  027fb	75 12		 jne	 SHORT $LN202@tcpnje_exe
$LN203@tcpnje_exe:
  027fd	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02802	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  02808	83 e0 40	 and	 eax, 64			; 00000040H
  0280b	85 c0		 test	 eax, eax
  0280d	74 73		 je	 SHORT $LN201@tcpnje_exe
$LN202@tcpnje_exe:
  0280f	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02814	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  0281b	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv1584[rsp], rax
  02823	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  0282a	48 89 8c 24 e0
	00 00 00	 mov	 QWORD PTR tv2308[rsp], rcx
  02832	48 8b 54 24 40	 mov	 rdx, QWORD PTR tpb$[rsp]
  02837	48 83 c2 08	 add	 rdx, 8
  0283b	4c 8b c2	 mov	 r8, rdx
  0283e	ba 09 00 00 00	 mov	 edx, 9
  02843	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR nodestring$5[rsp]
  0284b	e8 00 00 00 00	 call	 guest_to_host_string
  02850	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02858	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  0285c	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR tv2308[rsp]
  02864	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR tv1584[rsp]
  0286c	4c 8b 0c d7	 mov	 r9, QWORD PTR [rdi+rdx*8]
  02870	4c 8b c0	 mov	 r8, rax
  02873	8b d1		 mov	 edx, ecx
  02875	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160866
  0287c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN201@tcpnje_exe:
$LN200@tcpnje_exe:

; 3887 :                                 dev->devnum, guest_to_host_string(nodestring, sizeof(nodestring), tpb->nccinode),
; 3888 :                                 tcpnje_state_text[tn->state]);
; 3889 :                         }
; 3890 : 
; 3891 :                         if (count >= (5 + 0x14))

  02882	83 bc 24 a0 01
	00 00 19	 cmp	 DWORD PTR count$[rsp], 25
  0288a	0f 82 b8 00 00
	00		 jb	 $LN204@tcpnje_exe

; 3892 :                         {
; 3893 :                             U16 tpbufsize;
; 3894 : 
; 3895 :                             /* The following contortion is required because */
; 3896 :                             /* of incorrect alignment in I/J signon records */
; 3897 :                             tpbufsize = (tpb->nccibfsz[0] << 8) + tpb->nccibfsz[1];

  02890	b8 01 00 00 00	 mov	 eax, 1
  02895	48 6b c0 00	 imul	 rax, rax, 0
  02899	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  0289e	0f b6 44 01 17	 movzx	 eax, BYTE PTR [rcx+rax+23]
  028a3	c1 e0 08	 shl	 eax, 8
  028a6	b9 01 00 00 00	 mov	 ecx, 1
  028ab	48 6b c9 01	 imul	 rcx, rcx, 1
  028af	48 8b 54 24 40	 mov	 rdx, QWORD PTR tpb$[rsp]
  028b4	0f b6 4c 0a 17	 movzx	 ecx, BYTE PTR [rdx+rcx+23]
  028b9	03 c1		 add	 eax, ecx
  028bb	66 89 44 24 54	 mov	 WORD PTR tpbufsize$2[rsp], ax

; 3898 :                             DBGMSG(64, "HHCTN089I %4.4X:TCPNJE - sending TPbuffer size requested by local RSCS name %s: %d\n",

  028c0	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  028c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  028c8	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  028ce	c1 e8 0f	 shr	 eax, 15
  028d1	83 e0 01	 and	 eax, 1
  028d4	85 c0		 test	 eax, eax
  028d6	74 12		 je	 SHORT $LN207@tcpnje_exe
  028d8	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  028dd	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  028e3	83 e0 40	 and	 eax, 64			; 00000040H
  028e6	85 c0		 test	 eax, eax
  028e8	75 12		 jne	 SHORT $LN206@tcpnje_exe
$LN207@tcpnje_exe:
  028ea	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  028ef	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  028f5	83 e0 40	 and	 eax, 64			; 00000040H
  028f8	85 c0		 test	 eax, eax
  028fa	74 4c		 je	 SHORT $LN205@tcpnje_exe
$LN206@tcpnje_exe:
  028fc	0f b7 44 24 54	 movzx	 eax, WORD PTR tpbufsize$2[rsp]
  02901	89 44 24 7c	 mov	 DWORD PTR tv1621[rsp], eax
  02905	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  0290a	48 83 c1 08	 add	 rcx, 8
  0290e	4c 8b c1	 mov	 r8, rcx
  02911	ba 09 00 00 00	 mov	 edx, 9
  02916	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR nodestring$5[rsp]
  0291e	e8 00 00 00 00	 call	 guest_to_host_string
  02923	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0292b	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  0292f	8b 54 24 7c	 mov	 edx, DWORD PTR tv1621[rsp]
  02933	44 8b ca	 mov	 r9d, edx
  02936	4c 8b c0	 mov	 r8, rax
  02939	8b d1		 mov	 edx, ecx
  0293b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160871
  02942	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN205@tcpnje_exe:
$LN204@tcpnje_exe:

; 3899 :                                     dev->devnum, guest_to_host_string(nodestring, sizeof(nodestring), tpb->nccinode), tpbufsize);
; 3900 :                         }
; 3901 : 
; 3902 :                         if ((count >= (5 + 0x25)) && (tpb->nccifeat[0] & 0x80))

  02948	83 bc 24 a0 01
	00 00 2a	 cmp	 DWORD PTR count$[rsp], 42 ; 0000002aH
  02950	0f 82 c0 00 00
	00		 jb	 $LN208@tcpnje_exe
  02956	b8 01 00 00 00	 mov	 eax, 1
  0295b	48 6b c0 00	 imul	 rax, rax, 0
  0295f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  02964	0f b6 44 01 2a	 movzx	 eax, BYTE PTR [rcx+rax+42]
  02969	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0296e	85 c0		 test	 eax, eax
  02970	0f 84 a0 00 00
	00		 je	 $LN208@tcpnje_exe

; 3903 :                         {
; 3904 :                             DBGMSG(64, "HHCTN090I %4.4X:TCPNJE - resetting unsupported PREPARE feature requested by local RSCS name %s\n",

  02976	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0297b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0297e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02984	c1 e8 0f	 shr	 eax, 15
  02987	83 e0 01	 and	 eax, 1
  0298a	85 c0		 test	 eax, eax
  0298c	74 12		 je	 SHORT $LN211@tcpnje_exe
  0298e	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02993	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  02999	83 e0 40	 and	 eax, 64			; 00000040H
  0299c	85 c0		 test	 eax, eax
  0299e	75 12		 jne	 SHORT $LN210@tcpnje_exe
$LN211@tcpnje_exe:
  029a0	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  029a5	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  029ab	83 e0 40	 and	 eax, 64			; 00000040H
  029ae	85 c0		 test	 eax, eax
  029b0	74 3c		 je	 SHORT $LN209@tcpnje_exe
$LN210@tcpnje_exe:
  029b2	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  029b7	48 83 c0 08	 add	 rax, 8
  029bb	4c 8b c0	 mov	 r8, rax
  029be	ba 09 00 00 00	 mov	 edx, 9
  029c3	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR nodestring$5[rsp]
  029cb	e8 00 00 00 00	 call	 guest_to_host_string
  029d0	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  029d8	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  029dc	4c 8b c0	 mov	 r8, rax
  029df	8b d1		 mov	 edx, ecx
  029e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160876
  029e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN209@tcpnje_exe:

; 3905 :                                     dev->devnum, guest_to_host_string(nodestring, sizeof(nodestring), tpb->nccinode));
; 3906 :                             tpb->nccifeat[0] &= 0x7f;

  029ee	b8 01 00 00 00	 mov	 eax, 1
  029f3	48 6b c0 00	 imul	 rax, rax, 0
  029f7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  029fc	0f b6 44 01 2a	 movzx	 eax, BYTE PTR [rcx+rax+42]
  02a01	83 e0 7f	 and	 eax, 127		; 0000007fH
  02a04	b9 01 00 00 00	 mov	 ecx, 1
  02a09	48 6b c9 00	 imul	 rcx, rcx, 0
  02a0d	48 8b 54 24 40	 mov	 rdx, QWORD PTR tpb$[rsp]
  02a12	88 44 0a 2a	 mov	 BYTE PTR [rdx+rcx+42], al
$LN208@tcpnje_exe:
$LN197@tcpnje_exe:

; 3907 :                         }
; 3908 :                     }
; 3909 :                     /* Are we sending an outgoing NCC J response signon    */
; 3910 :                     /* record?  If so, note the change in connection state */
; 3911 :                     if ((tpb->rcb == 0xf0) && (tpb->srcb == 0xd1) &&

  02a16	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  02a1b	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  02a1f	3d f0 00 00 00	 cmp	 eax, 240		; 000000f0H
  02a24	0f 85 d6 02 00
	00		 jne	 $LN212@tcpnje_exe
  02a2a	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  02a2f	0f b6 40 06	 movzx	 eax, BYTE PTR [rax+6]
  02a33	3d d1 00 00 00	 cmp	 eax, 209		; 000000d1H
  02a38	0f 85 c2 02 00
	00		 jne	 $LN212@tcpnje_exe
  02a3e	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02a43	83 b8 54 01 00
	00 06		 cmp	 DWORD PTR [rax+340], 6
  02a4a	75 15		 jne	 SHORT $LN214@tcpnje_exe
  02a4c	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02a51	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  02a57	c1 e8 0c	 shr	 eax, 12
  02a5a	83 e0 01	 and	 eax, 1
  02a5d	85 c0		 test	 eax, eax
  02a5f	74 2b		 je	 SHORT $LN213@tcpnje_exe
$LN214@tcpnje_exe:
  02a61	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02a66	83 b8 54 01 00
	00 07		 cmp	 DWORD PTR [rax+340], 7
  02a6d	0f 85 8d 02 00
	00		 jne	 $LN212@tcpnje_exe
  02a73	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02a78	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  02a7e	c1 e8 0c	 shr	 eax, 12
  02a81	83 e0 01	 and	 eax, 1
  02a84	85 c0		 test	 eax, eax
  02a86	0f 84 74 02 00
	00		 je	 $LN212@tcpnje_exe
$LN213@tcpnje_exe:

; 3912 :                        (((tn->state == NJEACKSNT) && !tn->synnaksent) ||
; 3913 :                         ((tn->state == NJEACKRCD) && tn->synnaksent)))
; 3914 :                     {
; 3915 :                         char nodestring[9];
; 3916 : 
; 3917 :                         tn->state = NJECONSEC;

  02a8c	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02a91	c7 80 54 01 00
	00 09 00 00 00	 mov	 DWORD PTR [rax+340], 9

; 3918 : 
; 3919 :                         if (count >= (5 + 0x0b))

  02a9b	83 bc 24 a0 01
	00 00 10	 cmp	 DWORD PTR count$[rsp], 16
  02aa3	0f 82 af 00 00
	00		 jb	 $LN215@tcpnje_exe

; 3920 :                         {
; 3921 :                             DBGMSG(64, "HHCTN091I %4.4X:TCPNJE - sending response signon for local RSCS name %s.  Connection state %s\n",

  02aa9	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02aae	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02ab1	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02ab7	c1 e8 0f	 shr	 eax, 15
  02aba	83 e0 01	 and	 eax, 1
  02abd	85 c0		 test	 eax, eax
  02abf	74 12		 je	 SHORT $LN218@tcpnje_exe
  02ac1	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02ac6	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  02acc	83 e0 40	 and	 eax, 64			; 00000040H
  02acf	85 c0		 test	 eax, eax
  02ad1	75 12		 jne	 SHORT $LN217@tcpnje_exe
$LN218@tcpnje_exe:
  02ad3	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02ad8	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  02ade	83 e0 40	 and	 eax, 64			; 00000040H
  02ae1	85 c0		 test	 eax, eax
  02ae3	74 73		 je	 SHORT $LN216@tcpnje_exe
$LN217@tcpnje_exe:
  02ae5	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02aea	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  02af1	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv1702[rsp], rax
  02af9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  02b00	48 89 8c 24 f0
	00 00 00	 mov	 QWORD PTR tv2309[rsp], rcx
  02b08	48 8b 54 24 40	 mov	 rdx, QWORD PTR tpb$[rsp]
  02b0d	48 83 c2 08	 add	 rdx, 8
  02b11	4c 8b c2	 mov	 r8, rdx
  02b14	ba 09 00 00 00	 mov	 edx, 9
  02b19	48 8d 8c 24 48
	01 00 00	 lea	 rcx, QWORD PTR nodestring$6[rsp]
  02b21	e8 00 00 00 00	 call	 guest_to_host_string
  02b26	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02b2e	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  02b32	48 8b bc 24 f0
	00 00 00	 mov	 rdi, QWORD PTR tv2309[rsp]
  02b3a	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR tv1702[rsp]
  02b42	4c 8b 0c d7	 mov	 r9, QWORD PTR [rdi+rdx*8]
  02b46	4c 8b c0	 mov	 r8, rax
  02b49	8b d1		 mov	 edx, ecx
  02b4b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160884
  02b52	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN216@tcpnje_exe:
$LN215@tcpnje_exe:

; 3922 :                                 dev->devnum, guest_to_host_string(nodestring, sizeof(nodestring), tpb->nccinode),
; 3923 :                                 tcpnje_state_text[tn->state]);
; 3924 :                         }
; 3925 : 
; 3926 :                         if (count >= (5 + 0x14))

  02b58	83 bc 24 a0 01
	00 00 19	 cmp	 DWORD PTR count$[rsp], 25
  02b60	0f 82 cc 00 00
	00		 jb	 $LN219@tcpnje_exe

; 3927 :                         {
; 3928 :                             /* The following contortion is required because */
; 3929 :                             /* of incorrect alignment in I/J signon records */
; 3930 :                             tn->tpbufsize = (tpb->nccibfsz[0] << 8) + tpb->nccibfsz[1];

  02b66	b8 01 00 00 00	 mov	 eax, 1
  02b6b	48 6b c0 00	 imul	 rax, rax, 0
  02b6f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  02b74	0f b6 44 01 17	 movzx	 eax, BYTE PTR [rcx+rax+23]
  02b79	c1 e0 08	 shl	 eax, 8
  02b7c	b9 01 00 00 00	 mov	 ecx, 1
  02b81	48 6b c9 01	 imul	 rcx, rcx, 1
  02b85	48 8b 54 24 40	 mov	 rdx, QWORD PTR tpb$[rsp]
  02b8a	0f b6 4c 0a 17	 movzx	 ecx, BYTE PTR [rdx+rcx+23]
  02b8f	03 c1		 add	 eax, ecx
  02b91	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  02b96	66 89 81 5e 01
	00 00		 mov	 WORD PTR [rcx+350], ax

; 3931 :                             DBGMSG(64, "HHCTN092I %4.4X:TCPNJE - sending TPbuffer size negotiated by local RSCS name %s: %d\n",

  02b9d	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02ba2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02ba5	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02bab	c1 e8 0f	 shr	 eax, 15
  02bae	83 e0 01	 and	 eax, 1
  02bb1	85 c0		 test	 eax, eax
  02bb3	74 12		 je	 SHORT $LN222@tcpnje_exe
  02bb5	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02bba	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  02bc0	83 e0 40	 and	 eax, 64			; 00000040H
  02bc3	85 c0		 test	 eax, eax
  02bc5	75 12		 jne	 SHORT $LN221@tcpnje_exe
$LN222@tcpnje_exe:
  02bc7	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02bcc	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  02bd2	83 e0 40	 and	 eax, 64			; 00000040H
  02bd5	85 c0		 test	 eax, eax
  02bd7	74 59		 je	 SHORT $LN220@tcpnje_exe
$LN221@tcpnje_exe:
  02bd9	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02bde	0f b7 80 5e 01
	00 00		 movzx	 eax, WORD PTR [rax+350]
  02be5	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv1741[rsp], eax
  02bec	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  02bf1	48 83 c1 08	 add	 rcx, 8
  02bf5	4c 8b c1	 mov	 r8, rcx
  02bf8	ba 09 00 00 00	 mov	 edx, 9
  02bfd	48 8d 8c 24 48
	01 00 00	 lea	 rcx, QWORD PTR nodestring$6[rsp]
  02c05	e8 00 00 00 00	 call	 guest_to_host_string
  02c0a	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02c12	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  02c16	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR tv1741[rsp]
  02c1d	44 8b ca	 mov	 r9d, edx
  02c20	4c 8b c0	 mov	 r8, rax
  02c23	8b d1		 mov	 edx, ecx
  02c25	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160889
  02c2c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN220@tcpnje_exe:
$LN219@tcpnje_exe:

; 3932 :                                     dev->devnum, guest_to_host_string(nodestring, sizeof(nodestring), tpb->nccinode),
; 3933 :                                     tn->tpbufsize);
; 3934 :                         }
; 3935 :                         if ((count >= (5 + 0x25)) && (tpb->nccifeat[0] & 0x80))

  02c32	83 bc 24 a0 01
	00 00 2a	 cmp	 DWORD PTR count$[rsp], 42 ; 0000002aH
  02c3a	0f 82 c0 00 00
	00		 jb	 $LN223@tcpnje_exe
  02c40	b8 01 00 00 00	 mov	 eax, 1
  02c45	48 6b c0 00	 imul	 rax, rax, 0
  02c49	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  02c4e	0f b6 44 01 2a	 movzx	 eax, BYTE PTR [rcx+rax+42]
  02c53	25 80 00 00 00	 and	 eax, 128		; 00000080H
  02c58	85 c0		 test	 eax, eax
  02c5a	0f 84 a0 00 00
	00		 je	 $LN223@tcpnje_exe

; 3936 :                         {
; 3937 :                             DBGMSG(16, "HHCTN093W %4.4X:TCPNJE - resetting forced use of unsuppored PREPARE protocol by local RSCS name %s\n",

  02c60	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02c65	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02c68	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02c6e	c1 e8 0f	 shr	 eax, 15
  02c71	83 e0 01	 and	 eax, 1
  02c74	85 c0		 test	 eax, eax
  02c76	74 12		 je	 SHORT $LN226@tcpnje_exe
  02c78	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02c7d	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  02c83	83 e0 10	 and	 eax, 16
  02c86	85 c0		 test	 eax, eax
  02c88	75 12		 jne	 SHORT $LN225@tcpnje_exe
$LN226@tcpnje_exe:
  02c8a	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02c8f	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  02c95	83 e0 10	 and	 eax, 16
  02c98	85 c0		 test	 eax, eax
  02c9a	74 3c		 je	 SHORT $LN224@tcpnje_exe
$LN225@tcpnje_exe:
  02c9c	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  02ca1	48 83 c0 08	 add	 rax, 8
  02ca5	4c 8b c0	 mov	 r8, rax
  02ca8	ba 09 00 00 00	 mov	 edx, 9
  02cad	48 8d 8c 24 48
	01 00 00	 lea	 rcx, QWORD PTR nodestring$6[rsp]
  02cb5	e8 00 00 00 00	 call	 guest_to_host_string
  02cba	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02cc2	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  02cc6	4c 8b c0	 mov	 r8, rax
  02cc9	8b d1		 mov	 edx, ecx
  02ccb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160894
  02cd2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN224@tcpnje_exe:

; 3938 :                                     dev->devnum, guest_to_host_string(nodestring, sizeof(nodestring), tpb->nccinode));
; 3939 :                             tpb->nccifeat[0] &= 0x7f;

  02cd8	b8 01 00 00 00	 mov	 eax, 1
  02cdd	48 6b c0 00	 imul	 rax, rax, 0
  02ce1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tpb$[rsp]
  02ce6	0f b6 44 01 2a	 movzx	 eax, BYTE PTR [rcx+rax+42]
  02ceb	83 e0 7f	 and	 eax, 127		; 0000007fH
  02cee	b9 01 00 00 00	 mov	 ecx, 1
  02cf3	48 6b c9 00	 imul	 rcx, rcx, 0
  02cf7	48 8b 54 24 40	 mov	 rdx, QWORD PTR tpb$[rsp]
  02cfc	88 44 0a 2a	 mov	 BYTE PTR [rdx+rcx+42], al
$LN223@tcpnje_exe:
$LN212@tcpnje_exe:
$LN164@tcpnje_exe:

; 3940 :                         }
; 3941 :                     }
; 3942 :                 }
; 3943 :                 /* Check if we have an opened path */
; 3944 :                 if (tn->state < TCPCONACT)

  02d00	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02d05	83 b8 54 01 00
	00 03		 cmp	 DWORD PTR [rax+340], 3
  02d0c	0f 8d 7c 01 00
	00		 jge	 $LN227@tcpnje_exe

; 3945 :                 {
; 3946 :                     /* Is this an attempt to get connected? */
; 3947 :                     if ((count != 2) || (memcmp(tpb->start, SOH ENQ, 2) && memcmp(tpb->start, SYN NAK, 2)))

  02d12	83 bc 24 a0 01
	00 00 02	 cmp	 DWORD PTR count$[rsp], 2
  02d1a	75 44		 jne	 SHORT $LN229@tcpnje_exe
  02d1c	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  02d21	41 b8 02 00 00
	00		 mov	 r8d, 2
  02d27	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160898
  02d2e	48 8b c8	 mov	 rcx, rax
  02d31	e8 00 00 00 00	 call	 memcmp
  02d36	85 c0		 test	 eax, eax
  02d38	0f 84 c6 00 00
	00		 je	 $LN228@tcpnje_exe
  02d3e	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  02d43	41 b8 02 00 00
	00		 mov	 r8d, 2
  02d49	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160899
  02d50	48 8b c8	 mov	 rcx, rax
  02d53	e8 00 00 00 00	 call	 memcmp
  02d58	85 c0		 test	 eax, eax
  02d5a	0f 84 a4 00 00
	00		 je	 $LN228@tcpnje_exe
$LN229@tcpnje_exe:

; 3948 :                     {
; 3949 :                         DBGMSG(64, "HHCTN094W %4.4X:TCPNJE WRITE - Attempting to send other than SOH ENQ or SYN NAK when not connected. Connection state: %s\n",

  02d60	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02d65	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02d68	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02d6e	c1 e8 0f	 shr	 eax, 15
  02d71	83 e0 01	 and	 eax, 1
  02d74	85 c0		 test	 eax, eax
  02d76	74 12		 je	 SHORT $LN232@tcpnje_exe
  02d78	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02d7d	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  02d83	83 e0 40	 and	 eax, 64			; 00000040H
  02d86	85 c0		 test	 eax, eax
  02d88	75 12		 jne	 SHORT $LN231@tcpnje_exe
$LN232@tcpnje_exe:
  02d8a	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02d8f	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  02d95	83 e0 40	 and	 eax, 64			; 00000040H
  02d98	85 c0		 test	 eax, eax
  02d9a	74 30		 je	 SHORT $LN230@tcpnje_exe
$LN231@tcpnje_exe:
  02d9c	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02da1	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  02da8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  02daf	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  02db7	0f b7 52 48	 movzx	 edx, WORD PTR [rdx+72]
  02dbb	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  02dbf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160903
  02dc6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN230@tcpnje_exe:

; 3950 :                                 dev->devnum, tcpnje_state_text[tn->state]);
; 3951 :                         /* RSCS must be confused.  Send it a signoff at next read.  */
; 3952 :                         tn->signoff = 1;

  02dcc	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02dd1	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  02dd7	0f ba e8 0e	 bts	 eax, 14
  02ddb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  02de0	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 3953 :                         /* Drop write as connecting now will only cause more confusion */
; 3954 :                         *residual = 0;

  02de6	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  02dee	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 3955 :                         *unitstat = CSW_CE | CSW_DE;

  02df4	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  02dfc	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3956 :                         break;

  02dff	e9 4b 0c 00 00	 jmp	 $LN14@tcpnje_exe
$LN228@tcpnje_exe:

; 3957 :                     }
; 3958 : 
; 3959 :                     /* Not connected and sending SOH ENQ or SYN NAK. Try to connect. */
; 3960 :                     tn->curpending = TCPNJE_PEND_CONNECT;

  02e04	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02e09	c6 80 60 01 00
	00 03		 mov	 BYTE PTR [rax+352], 3

; 3961 : 
; 3962 :                     /* Wakeup worker thread and wait for it to complete CONNECT */
; 3963 :                     if (!tcpnje_wakeup_and_wait(tn, 0))

  02e10	33 d2		 xor	 edx, edx
  02e12	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  02e17	e8 00 00 00 00	 call	 tcpnje_wakeup_and_wait
  02e1c	85 c0		 test	 eax, eax
  02e1e	75 42		 jne	 SHORT $LN233@tcpnje_exe

; 3964 :                     {
; 3965 :                         /* If thread is not running, indicate something is wrong */
; 3966 :                         *unitstat = CSW_CE | CSW_DE | CSW_UC;

  02e20	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  02e28	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3967 :                         dev->sense[0] = SENSE_IR;

  02e2b	b8 01 00 00 00	 mov	 eax, 1
  02e30	48 6b c0 00	 imul	 rax, rax, 0
  02e34	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02e3c	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 3968 :                         dev->sense[1] = 0;

  02e44	b8 01 00 00 00	 mov	 eax, 1
  02e49	48 6b c0 01	 imul	 rax, rax, 1
  02e4d	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02e55	c6 84 01 64 03
	00 00 00	 mov	 BYTE PTR [rcx+rax+868], 0

; 3969 :                         break;

  02e5d	e9 ed 0b 00 00	 jmp	 $LN14@tcpnje_exe
$LN233@tcpnje_exe:

; 3970 :                     }
; 3971 : 
; 3972 :                     /* Did we connect? */
; 3973 :                     if (tn->state < NJEACKSNT)

  02e62	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02e67	83 b8 54 01 00
	00 06		 cmp	 DWORD PTR [rax+340], 6
  02e6e	7d 1e		 jge	 SHORT $LN234@tcpnje_exe

; 3974 :                     {
; 3975 :                         /* Connect failed. Pretend the write worked */
; 3976 :                         *residual = 0;

  02e70	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  02e78	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 3977 :                         *unitstat = CSW_CE | CSW_DE;

  02e7e	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  02e86	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3978 :                         break;

  02e89	e9 c1 0b 00 00	 jmp	 $LN14@tcpnje_exe
$LN234@tcpnje_exe:
$LN227@tcpnje_exe:

; 3979 :                     }
; 3980 :                 }
; 3981 :                 /* Is this SYN SYN SYN SYN? */
; 3982 :                 if  ((count == 4) && !memcmp(iobuf, SYN SYN SYN SYN, 4))

  02e8e	83 bc 24 a0 01
	00 00 04	 cmp	 DWORD PTR count$[rsp], 4
  02e96	0f 85 b0 00 00
	00		 jne	 $LN235@tcpnje_exe
  02e9c	41 b8 04 00 00
	00		 mov	 r8d, 4
  02ea2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160907
  02ea9	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  02eb1	e8 00 00 00 00	 call	 memcmp
  02eb6	85 c0		 test	 eax, eax
  02eb8	0f 85 8e 00 00
	00		 jne	 $LN235@tcpnje_exe

; 3983 :                 {
; 3984 :                     DBGMSG(4096, "HHCTN157D %4.4X:TCPNJE WRITE - dropping outgoing SYN SYN SYN SYN. Connection state: %s\n",

  02ebe	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02ec3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02ec6	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02ecc	c1 e8 0f	 shr	 eax, 15
  02ecf	83 e0 01	 and	 eax, 1
  02ed2	85 c0		 test	 eax, eax
  02ed4	74 14		 je	 SHORT $LN238@tcpnje_exe
  02ed6	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02edb	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  02ee1	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  02ee6	85 c0		 test	 eax, eax
  02ee8	75 14		 jne	 SHORT $LN237@tcpnje_exe
$LN238@tcpnje_exe:
  02eea	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02eef	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  02ef5	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  02efa	85 c0		 test	 eax, eax
  02efc	74 30		 je	 SHORT $LN236@tcpnje_exe
$LN237@tcpnje_exe:
  02efe	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02f03	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  02f0a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  02f11	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  02f19	0f b7 52 48	 movzx	 edx, WORD PTR [rdx+72]
  02f1d	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  02f21	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160911
  02f28	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN236@tcpnje_exe:

; 3985 :                             dev->devnum, tcpnje_state_text[tn->state]);
; 3986 : 
; 3987 :                     /* Yes. Drop it on the floor.  It would get eaten at the far end anyway. */
; 3988 :                     *residual = 0;

  02f2e	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  02f36	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 3989 :                     *unitstat = CSW_CE | CSW_DE;

  02f3c	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  02f44	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3990 :                     break;

  02f47	e9 03 0b 00 00	 jmp	 $LN14@tcpnje_exe
$LN235@tcpnje_exe:

; 3991 :                 }
; 3992 :                 /* Drop DLE ETB as these are not used in TCPNJE protocol. */
; 3993 :                 /* They will be recreated at the receiving end using the  */
; 3994 :                 /* TTR length. We could have RSCS neither send nor expect */
; 3995 :                 /* them but then we would lose compatibility with the     */
; 3996 :                 /* real(ish) 2703 (if we still have it).                  */
; 3997 :                 if ((count == 2) && !memcmp(tpb->start, DLE ETB, 2))

  02f4c	83 bc 24 a0 01
	00 00 02	 cmp	 DWORD PTR count$[rsp], 2
  02f54	0f 85 d6 00 00
	00		 jne	 $LN239@tcpnje_exe
  02f5a	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  02f5f	41 b8 02 00 00
	00		 mov	 r8d, 2
  02f65	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160913
  02f6c	48 8b c8	 mov	 rcx, rax
  02f6f	e8 00 00 00 00	 call	 memcmp
  02f74	85 c0		 test	 eax, eax
  02f76	0f 85 b4 00 00
	00		 jne	 $LN239@tcpnje_exe

; 3998 :                 {
; 3999 :                     DBGMSG(4096, "HHCTN163D %4.4X:TCPNJE WRITE - dropping outgoing DLE ETB - connection state %s\n",

  02f7c	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02f81	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02f84	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02f8a	c1 e8 0f	 shr	 eax, 15
  02f8d	83 e0 01	 and	 eax, 1
  02f90	85 c0		 test	 eax, eax
  02f92	74 14		 je	 SHORT $LN242@tcpnje_exe
  02f94	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02f99	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  02f9f	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  02fa4	85 c0		 test	 eax, eax
  02fa6	75 14		 jne	 SHORT $LN241@tcpnje_exe
$LN242@tcpnje_exe:
  02fa8	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02fad	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  02fb3	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  02fb8	85 c0		 test	 eax, eax
  02fba	74 30		 je	 SHORT $LN240@tcpnje_exe
$LN241@tcpnje_exe:
  02fbc	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02fc1	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  02fc8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  02fcf	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  02fd7	0f b7 52 48	 movzx	 edx, WORD PTR [rdx+72]
  02fdb	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  02fdf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160917
  02fe6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN240@tcpnje_exe:

; 4000 :                             dev->devnum, tcpnje_state_text[tn->state]);
; 4001 : 
; 4002 :                     /* If we are connected and signed on, count this as an        */
; 4003 :                     /* outgoing buffer which should have an ACK faked for it so   */
; 4004 :                     /* the read following this write is not delayed by waiting    */
; 4005 :                     /* for a timeout when not idle.                               */
; 4006 :                     if (tn->state > NJEACKRCD)

  02fec	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02ff1	83 b8 54 01 00
	00 07		 cmp	 DWORD PTR [rax+340], 7
  02ff8	7e 18		 jle	 SHORT $LN243@tcpnje_exe

; 4007 :                     {
; 4008 :                         tn->ackcount++;

  02ffa	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  02fff	8b 80 08 01 00
	00		 mov	 eax, DWORD PTR [rax+264]
  03005	ff c0		 inc	 eax
  03007	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0300c	89 81 08 01 00
	00		 mov	 DWORD PTR [rcx+264], eax
$LN243@tcpnje_exe:

; 4009 :                     }
; 4010 :                     *residual = 0;

  03012	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  0301a	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 4011 :                     *unitstat = CSW_CE | CSW_DE;

  03020	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  03028	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 4012 :                     break;

  0302b	e9 1f 0a 00 00	 jmp	 $LN14@tcpnje_exe
$LN239@tcpnje_exe:

; 4013 :                 }
; 4014 :                 /* If we are connected and signed on, we can take some shortcuts  */
; 4015 :                 if (tn->state > NJEACKRCD)

  03030	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03035	83 b8 54 01 00
	00 07		 cmp	 DWORD PTR [rax+340], 7
  0303c	0f 8e c8 00 00
	00		 jle	 $LN244@tcpnje_exe

; 4016 :                 {
; 4017 :                     /* If we are attempting to send DLE ACK0 then drop it as      */
; 4018 :                     /* the other end will fake it for us.                         */
; 4019 :                     if ((count == 2) && !memcmp(tpb->start, DLE ACK0, 2))

  03042	83 bc 24 a0 01
	00 00 02	 cmp	 DWORD PTR count$[rsp], 2
  0304a	0f 85 ba 00 00
	00		 jne	 $LN245@tcpnje_exe
  03050	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  03055	41 b8 02 00 00
	00		 mov	 r8d, 2
  0305b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160921
  03062	48 8b c8	 mov	 rcx, rax
  03065	e8 00 00 00 00	 call	 memcmp
  0306a	85 c0		 test	 eax, eax
  0306c	0f 85 98 00 00
	00		 jne	 $LN245@tcpnje_exe

; 4020 :                     {
; 4021 :                         DBGMSG(4096, "HHCTN164D %4.4X:TCPNJE WRITE - Dropping outgoing DLE ACK0 - Connection state %s\n",

  03072	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03077	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0307a	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  03080	c1 e8 0f	 shr	 eax, 15
  03083	83 e0 01	 and	 eax, 1
  03086	85 c0		 test	 eax, eax
  03088	74 14		 je	 SHORT $LN248@tcpnje_exe
  0308a	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0308f	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  03095	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  0309a	85 c0		 test	 eax, eax
  0309c	75 14		 jne	 SHORT $LN247@tcpnje_exe
$LN248@tcpnje_exe:
  0309e	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  030a3	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  030a9	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  030ae	85 c0		 test	 eax, eax
  030b0	74 30		 je	 SHORT $LN246@tcpnje_exe
$LN247@tcpnje_exe:
  030b2	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  030b7	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  030be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  030c5	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  030cd	0f b7 52 48	 movzx	 edx, WORD PTR [rdx+72]
  030d1	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  030d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160925
  030dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN246@tcpnje_exe:

; 4022 :                                 dev->devnum, tcpnje_state_text[tn->state]);
; 4023 : 
; 4024 :                         *residual = 0;

  030e2	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  030ea	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 4025 :                         *unitstat = CSW_CE | CSW_DE;

  030f0	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  030f8	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 4026 : 
; 4027 :                         /* RSCS has no real data to send out if it sent DLE ACK0. */
; 4028 :                         /* In order to avoid causing delays, we should send the   */
; 4029 :                         /* accumulated output buffer out now instead of waiting   */
; 4030 :                         /* around until RSCS has something else to send out.      */
; 4031 :                         tcpnje_flush(tn);

  030fb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  03100	e8 00 00 00 00	 call	 tcpnje_flush

; 4032 :                         break;

  03105	e9 45 09 00 00	 jmp	 $LN14@tcpnje_exe
$LN245@tcpnje_exe:
$LN244@tcpnje_exe:

; 4033 :                     }
; 4034 :                 }
; 4035 :                 /* Is this an attempt to become primary when we have already accepted the other end as primary?  Usually */
; 4036 :                 /* the end which connects out and sends the TCPNJE OPEN and receives the TCPNJE ACK then sends SOH ENQ   */
; 4037 :                 /* in an attempt to become primary.  If the other end is in this state, we are in the NJE ACK sent state */
; 4038 :                 /* and we want to avoid trying to become primary as well.  However, the other end can instead send       */
; 4039 :                 /* SYN NAK in an attempt to become secondary.  So, if we have seen an incoming SYN NAK, allow us to send */
; 4040 :                 /* out SOH ENQ to become primary.                                                                        */
; 4041 :                 if  ((count == 2) && !memcmp(tpb->start, SOH ENQ, 2) && (tn->state == NJEACKSNT) && !tn->synnakreceived)

  0310a	83 bc 24 a0 01
	00 00 02	 cmp	 DWORD PTR count$[rsp], 2
  03112	0f 85 db 00 00
	00		 jne	 $LN249@tcpnje_exe
  03118	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  0311d	41 b8 02 00 00
	00		 mov	 r8d, 2
  03123	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160927
  0312a	48 8b c8	 mov	 rcx, rax
  0312d	e8 00 00 00 00	 call	 memcmp
  03132	85 c0		 test	 eax, eax
  03134	0f 85 b9 00 00
	00		 jne	 $LN249@tcpnje_exe
  0313a	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0313f	83 b8 54 01 00
	00 06		 cmp	 DWORD PTR [rax+340], 6
  03146	0f 85 a7 00 00
	00		 jne	 $LN249@tcpnje_exe
  0314c	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03151	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  03157	c1 e8 0b	 shr	 eax, 11
  0315a	83 e0 01	 and	 eax, 1
  0315d	85 c0		 test	 eax, eax
  0315f	0f 85 8e 00 00
	00		 jne	 $LN249@tcpnje_exe

; 4042 :                 {
; 4043 :                     /* Other end is going to be primary.  Drop data and pretend write succeeded. */
; 4044 : 
; 4045 :                     DBGMSG(4096, "HHCTN165D %4.4X:TCPNJE WRITE - dropping outgoing SOH ENQ - Connection state: %s\n",

  03165	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0316a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0316d	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  03173	c1 e8 0f	 shr	 eax, 15
  03176	83 e0 01	 and	 eax, 1
  03179	85 c0		 test	 eax, eax
  0317b	74 14		 je	 SHORT $LN252@tcpnje_exe
  0317d	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03182	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  03188	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  0318d	85 c0		 test	 eax, eax
  0318f	75 14		 jne	 SHORT $LN251@tcpnje_exe
$LN252@tcpnje_exe:
  03191	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03196	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0319c	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  031a1	85 c0		 test	 eax, eax
  031a3	74 30		 je	 SHORT $LN250@tcpnje_exe
$LN251@tcpnje_exe:
  031a5	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  031aa	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  031b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  031b8	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  031c0	0f b7 52 48	 movzx	 edx, WORD PTR [rdx+72]
  031c4	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  031c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160931
  031cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN250@tcpnje_exe:

; 4046 :                            dev->devnum, tcpnje_state_text[tn->state]);
; 4047 : 
; 4048 :                     *residual = 0;

  031d5	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  031dd	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 4049 :                     *unitstat = CSW_CE | CSW_DE;

  031e3	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  031eb	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 4050 :                     break;

  031ee	e9 5c 08 00 00	 jmp	 $LN14@tcpnje_exe
$LN249@tcpnje_exe:

; 4051 :                 }
; 4052 : 
; 4053 :                 /* Check for SYN NAK indicating this end wants to be secondary (this has not been tested) */
; 4054 :                 if ((count == 2) && !memcmp(tpb->start, SYN NAK, 2) && (tn->state == NJEACKRCD) && !tn->synnaksent)

  031f3	83 bc 24 a0 01
	00 00 02	 cmp	 DWORD PTR count$[rsp], 2
  031fb	0f 85 d7 00 00
	00		 jne	 $LN253@tcpnje_exe
  03201	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  03206	41 b8 02 00 00
	00		 mov	 r8d, 2
  0320c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160933
  03213	48 8b c8	 mov	 rcx, rax
  03216	e8 00 00 00 00	 call	 memcmp
  0321b	85 c0		 test	 eax, eax
  0321d	0f 85 b5 00 00
	00		 jne	 $LN253@tcpnje_exe
  03223	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03228	83 b8 54 01 00
	00 07		 cmp	 DWORD PTR [rax+340], 7
  0322f	0f 85 a3 00 00
	00		 jne	 $LN253@tcpnje_exe
  03235	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0323a	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  03240	c1 e8 0c	 shr	 eax, 12
  03243	83 e0 01	 and	 eax, 1
  03246	85 c0		 test	 eax, eax
  03248	0f 85 8a 00 00
	00		 jne	 $LN253@tcpnje_exe

; 4055 :                 {
; 4056 :                     tn->synnaksent = 1;

  0324e	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03253	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  03259	0f ba e8 0c	 bts	 eax, 12
  0325d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  03262	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 4057 : 
; 4058 :                     DBGMSG(4096, "HHCTN171D %4.4X:TCPNJE WRITE - outgoing SYN NAK - Connection state: %s\n",

  03268	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0326d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  03270	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  03276	c1 e8 0f	 shr	 eax, 15
  03279	83 e0 01	 and	 eax, 1
  0327c	85 c0		 test	 eax, eax
  0327e	74 14		 je	 SHORT $LN256@tcpnje_exe
  03280	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03285	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0328b	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  03290	85 c0		 test	 eax, eax
  03292	75 14		 jne	 SHORT $LN255@tcpnje_exe
$LN256@tcpnje_exe:
  03294	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03299	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0329f	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  032a4	85 c0		 test	 eax, eax
  032a6	74 30		 je	 SHORT $LN254@tcpnje_exe
$LN255@tcpnje_exe:
  032a8	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  032ad	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  032b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  032bb	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  032c3	0f b7 52 48	 movzx	 edx, WORD PTR [rdx+72]
  032c7	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  032cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160937
  032d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN254@tcpnje_exe:
$LN253@tcpnje_exe:

; 4059 :                            dev->devnum, tcpnje_state_text[tn->state]);
; 4060 :                 }
; 4061 : 
; 4062 :                 /* Check if the I/O was interrupted */
; 4063 :                 if (tn->haltpending)

  032d8	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  032dd	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  032e3	c1 e8 06	 shr	 eax, 6
  032e6	83 e0 01	 and	 eax, 1
  032e9	85 c0		 test	 eax, eax
  032eb	74 3a		 je	 SHORT $LN257@tcpnje_exe

; 4064 :                 {
; 4065 :                     tn->haltpending = 0;

  032ed	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  032f2	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  032f8	83 e0 bf	 and	 eax, -65		; ffffffbfH
  032fb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  03300	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 4066 :                     *residual = count;

  03306	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  0330e	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  03315	89 08		 mov	 DWORD PTR [rax], ecx

; 4067 :                     *unitstat = CSW_CE | CSW_DE | CSW_UX;

  03317	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  0331f	c6 00 0d	 mov	 BYTE PTR [rax], 13

; 4068 :                     break;

  03322	e9 28 07 00 00	 jmp	 $LN14@tcpnje_exe
$LN257@tcpnje_exe:

; 4069 :                 }
; 4070 : 
; 4071 :                 /* At this point, we have used up every possible excuse not to send data to the  */
; 4072 :                 /* network except for putting it in a buffer and leaving it there to send later. */
; 4073 : 
; 4074 :                 /* Is there room in the output buffer for this record */
; 4075 :                 if (tn->tcpoutbuf.inptr.address - tn->tcpoutbuf.base.address +
; 4076 :                     2 * SIZEOF_TTR + count > tn->tcpoutbuf.size)

  03327	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0332c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  03331	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  03338	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  0333f	48 2b c1	 sub	 rax, rcx
  03342	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  03349	48 8d 44 08 08	 lea	 rax, QWORD PTR [rax+rcx+8]
  0334e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  03353	48 3b 81 f8 00
	00 00		 cmp	 rax, QWORD PTR [rcx+248]
  0335a	76 0a		 jbe	 SHORT $LN258@tcpnje_exe

; 4077 :                 {
; 4078 :                     /* No room in the buffer.  Send out the current buffer first.    */
; 4079 :                     tcpnje_flush(tn);

  0335c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  03361	e8 00 00 00 00	 call	 tcpnje_flush
$LN258@tcpnje_exe:

; 4080 :                 }
; 4081 : 
; 4082 :                 /* Is there room in the buffer now? If not, there may be a problem.  */
; 4083 :                 if (tn->tcpoutbuf.inptr.address - tn->tcpoutbuf.base.address +
; 4084 :                     2 * SIZEOF_TTR + count > tn->tcpoutbuf.size)

  03366	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0336b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  03370	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  03377	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  0337e	48 2b c1	 sub	 rax, rcx
  03381	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  03388	48 8d 44 08 08	 lea	 rax, QWORD PTR [rax+rcx+8]
  0338d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  03392	48 3b 81 f8 00
	00 00		 cmp	 rax, QWORD PTR [rcx+248]
  03399	0f 86 b2 00 00
	00		 jbe	 $LN259@tcpnje_exe

; 4085 :                 {
; 4086 :                     /* All we can do now is have the write fail.  Believe it or not, */
; 4087 :                     /* it appears that RSCS will cope and retry the same write again */
; 4088 :                     /* and all will still be well, at least for some RSCS versions.  */
; 4089 :                     /* I'm not looking forward to trying this with a CTC though.     */
; 4090 :                     DBGMSG(16, "HHCTN095E %4.4X:TCPNJE WRITE - outgoing record size %d will not fit in output buffer\n",

  0339f	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  033a4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  033a7	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  033ad	c1 e8 0f	 shr	 eax, 15
  033b0	83 e0 01	 and	 eax, 1
  033b3	85 c0		 test	 eax, eax
  033b5	74 12		 je	 SHORT $LN262@tcpnje_exe
  033b7	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  033bc	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  033c2	83 e0 10	 and	 eax, 16
  033c5	85 c0		 test	 eax, eax
  033c7	75 12		 jne	 SHORT $LN261@tcpnje_exe
$LN262@tcpnje_exe:
  033c9	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  033ce	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  033d4	83 e0 10	 and	 eax, 16
  033d7	85 c0		 test	 eax, eax
  033d9	74 23		 je	 SHORT $LN260@tcpnje_exe
$LN261@tcpnje_exe:
  033db	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  033e3	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  033e7	44 8b 84 24 a0
	01 00 00	 mov	 r8d, DWORD PTR count$[rsp]
  033ef	8b d0		 mov	 edx, eax
  033f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160944
  033f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN260@tcpnje_exe:

; 4091 :                             dev->devnum, count);
; 4092 : 
; 4093 :                     *residual = count;

  033fe	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  03406	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  0340d	89 08		 mov	 DWORD PTR [rax], ecx

; 4094 :                     *unitstat = CSW_CE | CSW_DE | CSW_UC;

  0340f	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  03417	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 4095 :                     dev->sense[0] = SENSE_IR;

  0341a	b8 01 00 00 00	 mov	 eax, 1
  0341f	48 6b c0 00	 imul	 rax, rax, 0
  03423	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0342b	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 4096 :                     dev->sense[1] = 0;

  03433	b8 01 00 00 00	 mov	 eax, 1
  03438	48 6b c0 01	 imul	 rax, rax, 1
  0343c	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03444	c6 84 01 64 03
	00 00 00	 mov	 BYTE PTR [rcx+rax+868], 0

; 4097 :                     break;

  0344c	e9 fe 05 00 00	 jmp	 $LN14@tcpnje_exe
$LN259@tcpnje_exe:

; 4098 :                 }
; 4099 : 
; 4100 :                 /* If the last buffer is still in the process of being sent, this    */
; 4101 :                 /* record can't be put into it yet.  Hopefully this situation should */
; 4102 :                 /* not arise because RSCS should already have been told to stop      */
; 4103 :                 /* sending out data.  However, if it does, the only option is to     */
; 4104 :                 /* fail.  See comments just above.                                   */
; 4105 : 
; 4106 :                 if (!tn->holdoutgoing)

  03451	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03456	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0345c	c1 e8 09	 shr	 eax, 9
  0345f	83 e0 01	 and	 eax, 1
  03462	85 c0		 test	 eax, eax
  03464	0f 85 95 01 00
	00		 jne	 $LN263@tcpnje_exe

; 4107 :                 {
; 4108 :                     /* Put TTR header for this record into the output buffer */
; 4109 :                     tn->tcpoutbuf.inptr.block->record.ttr.flags = 0;

  0346a	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0346f	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  03476	c6 40 08 00	 mov	 BYTE PTR [rax+8], 0

; 4110 :                     tn->tcpoutbuf.inptr.block->record.ttr.unused = 0;

  0347a	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0347f	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  03486	c6 40 09 00	 mov	 BYTE PTR [rax+9], 0

; 4111 :                     tn->tcpoutbuf.inptr.block->record.ttr.length = htons(count);

  0348a	0f b7 8c 24 a0
	01 00 00	 movzx	 ecx, WORD PTR count$[rsp]
  03492	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_htons
  03498	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0349d	48 8b 89 e8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+232]
  034a4	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax

; 4112 : 
; 4113 :                     /* Put the actual data to be written into the output buffer */
; 4114 :                     memcpy(&tn->tcpoutbuf.inptr.block->record.tpb, tpb, count);

  034a8	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  034af	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  034b4	48 8b 89 e8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+232]
  034bb	48 83 c1 0c	 add	 rcx, 12
  034bf	48 8b f9	 mov	 rdi, rcx
  034c2	48 8b 74 24 40	 mov	 rsi, QWORD PTR tpb$[rsp]
  034c7	8b c8		 mov	 ecx, eax
  034c9	f3 a4		 rep movsb

; 4115 :                     tn->tcpoutbuf.inptr.address += SIZEOF_TTR + count;

  034cb	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  034d2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  034d7	48 8b 89 e8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+232]
  034de	48 8d 44 08 04	 lea	 rax, QWORD PTR [rax+rcx+4]
  034e3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  034e8	48 89 81 e8 00
	00 00		 mov	 QWORD PTR [rcx+232], rax

; 4116 : 
; 4117 :                     /* Count the data to be transmitted.  Some overhead is included */
; 4118 :                     /* and some data is not counted due to compression.    */
; 4119 : 
; 4120 :                     if (count > 2)

  034ef	83 bc 24 a0 01
	00 00 02	 cmp	 DWORD PTR count$[rsp], 2
  034f7	76 35		 jbe	 SHORT $LN265@tcpnje_exe

; 4121 :                     {
; 4122 :                         tn->outbytecount += count;

  034f9	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  034fe	8b 80 18 01 00
	00		 mov	 eax, DWORD PTR [rax+280]
  03504	03 84 24 a0 01
	00 00		 add	 eax, DWORD PTR count$[rsp]
  0350b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  03510	89 81 18 01 00
	00		 mov	 DWORD PTR [rcx+280], eax

; 4123 :                         tn->outbuffcount++;

  03516	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0351b	8b 80 14 01 00
	00		 mov	 eax, DWORD PTR [rax+276]
  03521	ff c0		 inc	 eax
  03523	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  03528	89 81 14 01 00
	00		 mov	 DWORD PTR [rcx+276], eax
$LN265@tcpnje_exe:

; 4124 :                     }
; 4125 : 
; 4126 :                     /* If we are not yet signed on, we must send the buffer now.     */
; 4127 :                     /* Same if RSCS has send a control function, signoff for example.*/
; 4128 :                     /* If we are signed on, we can accumulate records and not send   */
; 4129 :                     /* until RSCS stops sending out data for the moment.  If it      */
; 4130 :                     /* appears that the next record to be written might not fit in   */
; 4131 :                     /* the buffer, we should send the buffer out now in order to     */
; 4132 :                     /* take the opportunity to tell RSCS not to send more data out   */
; 4133 :                     /* before the next write happens when it is too late.            */
; 4134 :                     if ((tn->state < NJECONPRI) || (tpb->rcb == 0xf0))

  0352e	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03533	83 b8 54 01 00
	00 08		 cmp	 DWORD PTR [rax+340], 8
  0353a	7c 10		 jl	 SHORT $LN268@tcpnje_exe
  0353c	48 8b 44 24 40	 mov	 rax, QWORD PTR tpb$[rsp]
  03541	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  03545	3d f0 00 00 00	 cmp	 eax, 240		; 000000f0H
  0354a	75 0f		 jne	 SHORT $LN266@tcpnje_exe
$LN268@tcpnje_exe:

; 4135 :                     {
; 4136 :                         tcpnje_flush(tn);

  0354c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  03551	e8 00 00 00 00	 call	 tcpnje_flush

; 4137 :                     }

  03556	e9 9f 00 00 00	 jmp	 $LN267@tcpnje_exe
$LN266@tcpnje_exe:

; 4138 :                     else if (tn->tcpoutbuf.inptr.address - tn->tcpoutbuf.base.address +
; 4139 :                         2 * SIZEOF_TTR + tn->tpbufsize > tn->tcpoutbuf.size)

  0355b	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03560	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  03565	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  0356c	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  03573	48 2b c1	 sub	 rax, rcx
  03576	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0357b	0f b7 89 5e 01
	00 00		 movzx	 ecx, WORD PTR [rcx+350]
  03582	48 8d 44 08 08	 lea	 rax, QWORD PTR [rax+rcx+8]
  03587	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0358c	48 3b 81 f8 00
	00 00		 cmp	 rax, QWORD PTR [rcx+248]
  03593	76 65		 jbe	 SHORT $LN269@tcpnje_exe

; 4140 :                     {
; 4141 :                         DBGMSG(2048, "HHCTN166D %4.4X:TCPNJE WRITE - Sending outgoing buffer as it is nearly full\n",

  03595	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0359a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0359d	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  035a3	c1 e8 0f	 shr	 eax, 15
  035a6	83 e0 01	 and	 eax, 1
  035a9	85 c0		 test	 eax, eax
  035ab	74 14		 je	 SHORT $LN272@tcpnje_exe
  035ad	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  035b2	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  035b8	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  035bd	85 c0		 test	 eax, eax
  035bf	75 14		 jne	 SHORT $LN271@tcpnje_exe
$LN272@tcpnje_exe:
  035c1	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  035c6	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  035cc	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  035d1	85 c0		 test	 eax, eax
  035d3	74 1b		 je	 SHORT $LN270@tcpnje_exe
$LN271@tcpnje_exe:
  035d5	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  035dd	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  035e1	8b d0		 mov	 edx, eax
  035e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160955
  035ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN270@tcpnje_exe:

; 4142 :                                dev->devnum);
; 4143 :                         tcpnje_flush(tn);

  035f0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  035f5	e8 00 00 00 00	 call	 tcpnje_flush
$LN269@tcpnje_exe:
$LN267@tcpnje_exe:

; 4144 :                     }
; 4145 :                 }

  035fa	e9 aa 00 00 00	 jmp	 $LN264@tcpnje_exe
$LN263@tcpnje_exe:

; 4146 :                 else
; 4147 :                 {
; 4148 :                     DBGMSG(16, "HHCTN096W %4.4X:TCPNJE WRITE - outgoing record cannot be buffered as buffer is busy\n",

  035ff	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03604	48 8b 00	 mov	 rax, QWORD PTR [rax]
  03607	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0360d	c1 e8 0f	 shr	 eax, 15
  03610	83 e0 01	 and	 eax, 1
  03613	85 c0		 test	 eax, eax
  03615	74 12		 je	 SHORT $LN275@tcpnje_exe
  03617	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0361c	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  03622	83 e0 10	 and	 eax, 16
  03625	85 c0		 test	 eax, eax
  03627	75 12		 jne	 SHORT $LN274@tcpnje_exe
$LN275@tcpnje_exe:
  03629	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0362e	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  03634	83 e0 10	 and	 eax, 16
  03637	85 c0		 test	 eax, eax
  03639	74 1b		 je	 SHORT $LN273@tcpnje_exe
$LN274@tcpnje_exe:
  0363b	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03643	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03647	8b d0		 mov	 edx, eax
  03649	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160959
  03650	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN273@tcpnje_exe:

; 4149 :                             dev->devnum);
; 4150 :                     *residual = count;

  03656	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  0365e	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  03665	89 08		 mov	 DWORD PTR [rax], ecx

; 4151 :                     *unitstat = CSW_CE | CSW_DE | CSW_UC;

  03667	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  0366f	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 4152 :                     dev->sense[0] = SENSE_IR;

  03672	b8 01 00 00 00	 mov	 eax, 1
  03677	48 6b c0 00	 imul	 rax, rax, 0
  0367b	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03683	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 4153 :                     dev->sense[1] = 0;

  0368b	b8 01 00 00 00	 mov	 eax, 1
  03690	48 6b c0 01	 imul	 rax, rax, 1
  03694	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0369c	c6 84 01 64 03
	00 00 00	 mov	 BYTE PTR [rcx+rax+868], 0

; 4154 :                     break;

  036a4	e9 a6 03 00 00	 jmp	 $LN14@tcpnje_exe
$LN264@tcpnje_exe:

; 4155 :                 }
; 4156 :                 /* All bytes dealt with, one way or another - residual = 0 */
; 4157 :                 *residual = 0;

  036a9	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  036b1	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 4158 :                 *unitstat = CSW_CE | CSW_DE;

  036b7	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  036bf	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 4159 :                 break;

  036c2	e9 88 03 00 00	 jmp	 $LN14@tcpnje_exe
$LN276@tcpnje_exe:

; 4160 : 
; 4161 :         /*---------------------------------------------------------------*/
; 4162 :         /* PREPARE                                                       */
; 4163 :         /* NOTE : DO NOT SET RESIDUAL to 0 : Otherwise, channel.c        */
; 4164 :         /*        will reflect a channel prot check - residual           */
; 4165 :         /*        should indicate NO data was transfered for this        */
; 4166 :         /*        pseudo-read operation                                  */
; 4167 :         /*---------------------------------------------------------------*/
; 4168 :         /* NOTE:  PREPARE is mostly as it was in commadpt with tweaks to */
; 4169 :         /*        adapt to the TCPNJE environment.  It is unlikely to    */
; 4170 :         /*        function correctly without further effort but I don't  */
; 4171 :         /*        know how it works and I have no way to test it.        */
; 4172 :         /*---------------------------------------------------------------*/
; 4173 :         case 0x06:
; 4174 :                 DBGMSG(1024, "HHCTN167D %4.4X:TCPNJE CCW PREPARE\n",

  036c7	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  036cc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  036cf	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  036d5	c1 e8 0f	 shr	 eax, 15
  036d8	83 e0 01	 and	 eax, 1
  036db	85 c0		 test	 eax, eax
  036dd	74 14		 je	 SHORT $LN279@tcpnje_exe
  036df	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  036e4	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  036ea	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  036ef	85 c0		 test	 eax, eax
  036f1	75 14		 jne	 SHORT $LN278@tcpnje_exe
$LN279@tcpnje_exe:
  036f3	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  036f8	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  036fe	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  03703	85 c0		 test	 eax, eax
  03705	74 1b		 je	 SHORT $LN277@tcpnje_exe
$LN278@tcpnje_exe:
  03707	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0370f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03713	8b d0		 mov	 edx, eax
  03715	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160964
  0371c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN277@tcpnje_exe:

; 4175 :                         dev->devnum);
; 4176 : 
; 4177 :                 *residual = count;

  03722	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  0372a	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  03731	89 08		 mov	 DWORD PTR [rax], ecx

; 4178 :                 /* PREPARE not allowed unless line is enabled */
; 4179 :                 if (!tn->enabled)

  03733	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03738	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0373e	83 e0 01	 and	 eax, 1
  03741	85 c0		 test	 eax, eax
  03743	75 42		 jne	 SHORT $LN280@tcpnje_exe

; 4180 :                 {
; 4181 :                     *unitstat = CSW_CE | CSW_DE | CSW_UC;

  03745	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  0374d	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 4182 :                     dev->sense[0] = SENSE_CR;

  03750	b8 01 00 00 00	 mov	 eax, 1
  03755	48 6b c0 00	 imul	 rax, rax, 0
  03759	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03761	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 4183 :                     dev->sense[1] = 0x06;

  03769	b8 01 00 00 00	 mov	 eax, 1
  0376e	48 6b c0 01	 imul	 rax, rax, 1
  03772	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0377a	c6 84 01 64 03
	00 00 06	 mov	 BYTE PTR [rcx+rax+868], 6

; 4184 :                     break;

  03782	e9 c8 02 00 00	 jmp	 $LN14@tcpnje_exe
$LN280@tcpnje_exe:

; 4185 :                 }
; 4186 : 
; 4187 :                 DBGMSG(1, "HHCTN097W %4.4X:TCPNJE - PREPARE operation is not supported by TCPNJE\n",

  03787	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0378c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0378f	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  03795	c1 e8 0f	 shr	 eax, 15
  03798	83 e0 01	 and	 eax, 1
  0379b	85 c0		 test	 eax, eax
  0379d	74 12		 je	 SHORT $LN283@tcpnje_exe
  0379f	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  037a4	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  037aa	83 e0 01	 and	 eax, 1
  037ad	85 c0		 test	 eax, eax
  037af	75 12		 jne	 SHORT $LN282@tcpnje_exe
$LN283@tcpnje_exe:
  037b1	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  037b6	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  037bc	83 e0 01	 and	 eax, 1
  037bf	85 c0		 test	 eax, eax
  037c1	74 1b		 je	 SHORT $LN281@tcpnje_exe
$LN282@tcpnje_exe:
  037c3	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  037cb	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  037cf	8b d0		 mov	 edx, eax
  037d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160969
  037d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN281@tcpnje_exe:

; 4188 :                         dev->devnum);
; 4189 : 
; 4190 :                 /* If data is present, prepare ends immediately */
; 4191 :                 if (tn->tcpinbuf.valid)

  037de	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  037e3	0f b6 80 d8 00
	00 00		 movzx	 eax, BYTE PTR [rax+216]
  037ea	85 c0		 test	 eax, eax
  037ec	74 10		 je	 SHORT $LN284@tcpnje_exe

; 4192 :                 {
; 4193 :                     *unitstat = CSW_CE | CSW_DE;

  037ee	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  037f6	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 4194 :                     break;

  037f9	e9 51 02 00 00	 jmp	 $LN14@tcpnje_exe
$LN284@tcpnje_exe:

; 4195 :                 }
; 4196 : 
; 4197 :                 /* Indicate to the worker thread to notify us when data arrives */
; 4198 :                 tn->curpending = TCPNJE_PEND_PREPARE;

  037fe	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03803	c6 80 60 01 00
	00 06		 mov	 BYTE PTR [rax+352], 6

; 4199 : 
; 4200 :                 /* Wakeup worker thread and wait for it to complete PREPARE */
; 4201 :                 if (!tcpnje_wakeup_and_wait(tn, 0))

  0380a	33 d2		 xor	 edx, edx
  0380c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  03811	e8 00 00 00 00	 call	 tcpnje_wakeup_and_wait
  03816	85 c0		 test	 eax, eax
  03818	75 42		 jne	 SHORT $LN285@tcpnje_exe

; 4202 :                 {
; 4203 :                     /* If thread is not running, indicate something is wrong */
; 4204 :                     *unitstat = CSW_CE | CSW_DE | CSW_UC;

  0381a	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  03822	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 4205 :                     dev->sense[0] = SENSE_IR;

  03825	b8 01 00 00 00	 mov	 eax, 1
  0382a	48 6b c0 00	 imul	 rax, rax, 0
  0382e	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03836	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 4206 :                     dev->sense[1] = 0;

  0383e	b8 01 00 00 00	 mov	 eax, 1
  03843	48 6b c0 01	 imul	 rax, rax, 1
  03847	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0384f	c6 84 01 64 03
	00 00 00	 mov	 BYTE PTR [rcx+rax+868], 0

; 4207 :                     break;

  03857	e9 f3 01 00 00	 jmp	 $LN14@tcpnje_exe
$LN285@tcpnje_exe:

; 4208 :                 }
; 4209 : 
; 4210 :                 /* If I/O was halted (this one happens often) */
; 4211 :                 if (tn->haltpending)

  0385c	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03861	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  03867	c1 e8 06	 shr	 eax, 6
  0386a	83 e0 01	 and	 eax, 1
  0386d	85 c0		 test	 eax, eax
  0386f	74 29		 je	 SHORT $LN286@tcpnje_exe

; 4212 :                 {
; 4213 :                     *unitstat = CSW_CE | CSW_DE | CSW_UX;

  03871	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  03879	c6 00 0d	 mov	 BYTE PTR [rax], 13

; 4214 :                     tn->haltpending = 0;

  0387c	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03881	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  03887	83 e0 bf	 and	 eax, -65		; ffffffbfH
  0388a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0388f	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 4215 :                     break;

  03895	e9 b5 01 00 00	 jmp	 $LN14@tcpnje_exe
$LN286@tcpnje_exe:

; 4216 :                 }
; 4217 : 
; 4218 :                 /* Check if the line is still connected */
; 4219 :                 if (tn->state <= NJEACKSNT)

  0389a	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0389f	83 b8 54 01 00
	00 06		 cmp	 DWORD PTR [rax+340], 6
  038a6	7f 42		 jg	 SHORT $LN287@tcpnje_exe

; 4220 :                 {
; 4221 :                     *unitstat = CSW_CE | CSW_DE | CSW_UC;

  038a8	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  038b0	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 4222 :                     dev->sense[0] = SENSE_IR;

  038b3	b8 01 00 00 00	 mov	 eax, 1
  038b8	48 6b c0 00	 imul	 rax, rax, 0
  038bc	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  038c4	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 4223 :                     dev->sense[1] = 0;

  038cc	b8 01 00 00 00	 mov	 eax, 1
  038d1	48 6b c0 01	 imul	 rax, rax, 1
  038d5	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  038dd	c6 84 01 64 03
	00 00 00	 mov	 BYTE PTR [rcx+rax+868], 0

; 4224 :                     break;

  038e5	e9 65 01 00 00	 jmp	 $LN14@tcpnje_exe
$LN287@tcpnje_exe:

; 4225 :                 }
; 4226 : 
; 4227 :                 /* Normal Prepare exit condition - data is present in the input buffer */
; 4228 :                 *unitstat = CSW_CE | CSW_DE;

  038ea	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  038f2	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 4229 :                 break;

  038f5	e9 55 01 00 00	 jmp	 $LN14@tcpnje_exe
$LN288@tcpnje_exe:

; 4230 : 
; 4231 :         /*---------------------------------------------------------------*/
; 4232 :         /* POLL Command                                                  */
; 4233 :         /*---------------------------------------------------------------*/
; 4234 :         case 0x09:
; 4235 :                 DBGMSG(1024, "HHCTN168D %4.4X:TCPNJE CCW POLL\n",

  038fa	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  038ff	48 8b 00	 mov	 rax, QWORD PTR [rax]
  03902	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  03908	c1 e8 0f	 shr	 eax, 15
  0390b	83 e0 01	 and	 eax, 1
  0390e	85 c0		 test	 eax, eax
  03910	74 14		 je	 SHORT $LN291@tcpnje_exe
  03912	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03917	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0391d	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  03922	85 c0		 test	 eax, eax
  03924	75 14		 jne	 SHORT $LN290@tcpnje_exe
$LN291@tcpnje_exe:
  03926	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0392b	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  03931	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  03936	85 c0		 test	 eax, eax
  03938	74 1b		 je	 SHORT $LN289@tcpnje_exe
$LN290@tcpnje_exe:
  0393a	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03942	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03946	8b d0		 mov	 edx, eax
  03948	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160978
  0394f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN289@tcpnje_exe:

; 4236 :                         dev->devnum);
; 4237 : 
; 4238 :                 /* Changing ring buffers to linear buffers for TCPNJE    */
; 4239 :                 /* and other modifications to the original commadpt      */
; 4240 :                 /* required many changes to the implementation of POLL.  */
; 4241 :                 /* POLL is not used by the RSCS in VM/370 so I thought   */
; 4242 :                 /* it better to take it out than expend a lot of effort  */
; 4243 :                 /* making a half baked attempt to support something I    */
; 4244 :                 /* I don't understand at all and can't test.             */
; 4245 :                 DBGMSG(1, "HHCTN098E %4.4X:TCPNJE - POLL operation is not supported by TCPNJE\n",

  03955	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0395a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0395d	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  03963	c1 e8 0f	 shr	 eax, 15
  03966	83 e0 01	 and	 eax, 1
  03969	85 c0		 test	 eax, eax
  0396b	74 12		 je	 SHORT $LN294@tcpnje_exe
  0396d	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03972	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  03978	83 e0 01	 and	 eax, 1
  0397b	85 c0		 test	 eax, eax
  0397d	75 12		 jne	 SHORT $LN293@tcpnje_exe
$LN294@tcpnje_exe:
  0397f	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03984	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0398a	83 e0 01	 and	 eax, 1
  0398d	85 c0		 test	 eax, eax
  0398f	74 1b		 je	 SHORT $LN292@tcpnje_exe
$LN293@tcpnje_exe:
  03991	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03999	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0399d	8b d0		 mov	 edx, eax
  0399f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160982
  039a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN292@tcpnje_exe:
$LN295@tcpnje_exe:

; 4246 :                         dev->devnum);
; 4247 :                 /* FALLTHRU */
; 4248 : 
; 4249 :         default:
; 4250 :         /*---------------------------------------------------------------*/
; 4251 :         /* INVALID OPERATION                                             */
; 4252 :         /*---------------------------------------------------------------*/
; 4253 : 
; 4254 :             DBGMSG(1024, "HHCTN098E %4.4X:TCPNJE - Invalid CCW opcode %2.2X\n",

  039ac	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  039b1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  039b4	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  039ba	c1 e8 0f	 shr	 eax, 15
  039bd	83 e0 01	 and	 eax, 1
  039c0	85 c0		 test	 eax, eax
  039c2	74 14		 je	 SHORT $LN298@tcpnje_exe
  039c4	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  039c9	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  039cf	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  039d4	85 c0		 test	 eax, eax
  039d6	75 14		 jne	 SHORT $LN297@tcpnje_exe
$LN298@tcpnje_exe:
  039d8	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  039dd	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  039e3	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  039e8	85 c0		 test	 eax, eax
  039ea	74 26		 je	 SHORT $LN296@tcpnje_exe
$LN297@tcpnje_exe:
  039ec	0f b6 84 24 88
	01 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  039f4	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  039fc	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  03a00	44 8b c0	 mov	 r8d, eax
  03a03	8b d1		 mov	 edx, ecx
  03a05	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160987
  03a0c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN296@tcpnje_exe:

; 4255 :                     dev->devnum, code);
; 4256 : 
; 4257 :             /* Set command reject sense byte, and unit check status */
; 4258 :             *unitstat = CSW_CE + CSW_DE + CSW_UC;

  03a12	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  03a1a	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 4259 :             dev->sense[0] = SENSE_CR;

  03a1d	b8 01 00 00 00	 mov	 eax, 1
  03a22	48 6b c0 00	 imul	 rax, rax, 0
  03a26	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03a2e	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 4260 :             dev->sense[1] = 0;

  03a36	b8 01 00 00 00	 mov	 eax, 1
  03a3b	48 6b c0 01	 imul	 rax, rax, 1
  03a3f	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03a47	c6 84 01 64 03
	00 00 00	 mov	 BYTE PTR [rcx+rax+868], 0
$LN14@tcpnje_exe:

; 4261 :             break;
; 4262 : 
; 4263 :     }
; 4264 :     release_lock(&tn->lock);

  03a4f	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  03a54	48 83 c0 60	 add	 rax, 96			; 00000060H
  03a58	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160988
  03a5f	48 8b c8	 mov	 rcx, rax
  03a62	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 4265 : }

  03a68	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  03a70	48 33 cc	 xor	 rcx, rsp
  03a73	e8 00 00 00 00	 call	 __security_check_cookie
  03a78	48 81 c4 68 01
	00 00		 add	 rsp, 360		; 00000168H
  03a7f	5f		 pop	 rdi
  03a80	5e		 pop	 rsi
  03a81	c3		 ret	 0
  03a82	66 90		 npad	 2
$LN327@tcpnje_exe:
  03a84	00 00 00 00	 DD	 $LN155@tcpnje_exe
  03a88	00 00 00 00	 DD	 $LN61@tcpnje_exe
  03a8c	00 00 00 00	 DD	 $LN19@tcpnje_exe
  03a90	00 00 00 00	 DD	 $LN23@tcpnje_exe
  03a94	00 00 00 00	 DD	 $LN276@tcpnje_exe
  03a98	00 00 00 00	 DD	 $LN288@tcpnje_exe
  03a9c	00 00 00 00	 DD	 $LN44@tcpnje_exe
  03aa0	00 00 00 00	 DD	 $LN31@tcpnje_exe
  03aa4	00 00 00 00	 DD	 $LN48@tcpnje_exe
  03aa8	00 00 00 00	 DD	 $LN38@tcpnje_exe
  03aac	00 00 00 00	 DD	 $LN27@tcpnje_exe
  03ab0	00 00 00 00	 DD	 $LN295@tcpnje_exe
$LN326@tcpnje_exe:
  03ab4	00		 DB	 0
  03ab5	01		 DB	 1
  03ab6	02		 DB	 2
  03ab7	03		 DB	 3
  03ab8	0b		 DB	 11
  03ab9	04		 DB	 4
  03aba	0b		 DB	 11
  03abb	0b		 DB	 11
  03abc	05		 DB	 5
  03abd	0b		 DB	 11
  03abe	0b		 DB	 11
  03abf	0b		 DB	 11
  03ac0	0b		 DB	 11
  03ac1	0b		 DB	 11
  03ac2	0b		 DB	 11
  03ac3	0b		 DB	 11
  03ac4	0b		 DB	 11
  03ac5	0b		 DB	 11
  03ac6	0b		 DB	 11
  03ac7	0b		 DB	 11
  03ac8	0b		 DB	 11
  03ac9	0b		 DB	 11
  03aca	0b		 DB	 11
  03acb	0b		 DB	 11
  03acc	0b		 DB	 11
  03acd	0b		 DB	 11
  03ace	0b		 DB	 11
  03acf	0b		 DB	 11
  03ad0	0b		 DB	 11
  03ad1	0b		 DB	 11
  03ad2	0b		 DB	 11
  03ad3	0b		 DB	 11
  03ad4	0b		 DB	 11
  03ad5	0b		 DB	 11
  03ad6	06		 DB	 6
  03ad7	0b		 DB	 11
  03ad8	0b		 DB	 11
  03ad9	0b		 DB	 11
  03ada	07		 DB	 7
  03adb	0b		 DB	 11
  03adc	08		 DB	 8
  03add	0b		 DB	 11
  03ade	0b		 DB	 11
  03adf	0b		 DB	 11
  03ae0	0b		 DB	 11
  03ae1	0b		 DB	 11
  03ae2	09		 DB	 9
  03ae3	0b		 DB	 11
  03ae4	0b		 DB	 11
  03ae5	0b		 DB	 11
  03ae6	0b		 DB	 11
  03ae7	0b		 DB	 11
  03ae8	0b		 DB	 11
  03ae9	0b		 DB	 11
  03aea	0b		 DB	 11
  03aeb	0b		 DB	 11
  03aec	0b		 DB	 11
  03aed	0b		 DB	 11
  03aee	0b		 DB	 11
  03aef	0b		 DB	 11
  03af0	0b		 DB	 11
  03af1	0b		 DB	 11
  03af2	0b		 DB	 11
  03af3	0b		 DB	 11
  03af4	0b		 DB	 11
  03af5	0b		 DB	 11
  03af6	0b		 DB	 11
  03af7	0b		 DB	 11
  03af8	0b		 DB	 11
  03af9	0b		 DB	 11
  03afa	0b		 DB	 11
  03afb	0b		 DB	 11
  03afc	0b		 DB	 11
  03afd	0b		 DB	 11
  03afe	0b		 DB	 11
  03aff	0b		 DB	 11
  03b00	0b		 DB	 11
  03b01	0b		 DB	 11
  03b02	0b		 DB	 11
  03b03	0b		 DB	 11
  03b04	0b		 DB	 11
  03b05	0b		 DB	 11
  03b06	0b		 DB	 11
  03b07	0b		 DB	 11
  03b08	0b		 DB	 11
  03b09	0b		 DB	 11
  03b0a	0b		 DB	 11
  03b0b	0b		 DB	 11
  03b0c	0b		 DB	 11
  03b0d	0b		 DB	 11
  03b0e	0b		 DB	 11
  03b0f	0b		 DB	 11
  03b10	0b		 DB	 11
  03b11	0b		 DB	 11
  03b12	0b		 DB	 11
  03b13	0b		 DB	 11
  03b14	0b		 DB	 11
  03b15	0b		 DB	 11
  03b16	0b		 DB	 11
  03b17	0b		 DB	 11
  03b18	0b		 DB	 11
  03b19	0b		 DB	 11
  03b1a	0b		 DB	 11
  03b1b	0b		 DB	 11
  03b1c	0b		 DB	 11
  03b1d	0b		 DB	 11
  03b1e	0b		 DB	 11
  03b1f	0b		 DB	 11
  03b20	0b		 DB	 11
  03b21	0b		 DB	 11
  03b22	0b		 DB	 11
  03b23	0b		 DB	 11
  03b24	0b		 DB	 11
  03b25	0b		 DB	 11
  03b26	0b		 DB	 11
  03b27	0b		 DB	 11
  03b28	0b		 DB	 11
  03b29	0b		 DB	 11
  03b2a	0b		 DB	 11
  03b2b	0b		 DB	 11
  03b2c	0b		 DB	 11
  03b2d	0b		 DB	 11
  03b2e	0b		 DB	 11
  03b2f	0b		 DB	 11
  03b30	0b		 DB	 11
  03b31	0b		 DB	 11
  03b32	0b		 DB	 11
  03b33	0b		 DB	 11
  03b34	0b		 DB	 11
  03b35	0b		 DB	 11
  03b36	0b		 DB	 11
  03b37	0b		 DB	 11
  03b38	0b		 DB	 11
  03b39	0b		 DB	 11
  03b3a	0b		 DB	 11
  03b3b	0b		 DB	 11
  03b3c	0b		 DB	 11
  03b3d	0b		 DB	 11
  03b3e	0b		 DB	 11
  03b3f	0b		 DB	 11
  03b40	0b		 DB	 11
  03b41	0b		 DB	 11
  03b42	0b		 DB	 11
  03b43	0b		 DB	 11
  03b44	0b		 DB	 11
  03b45	0b		 DB	 11
  03b46	0b		 DB	 11
  03b47	0b		 DB	 11
  03b48	0b		 DB	 11
  03b49	0b		 DB	 11
  03b4a	0b		 DB	 11
  03b4b	0b		 DB	 11
  03b4c	0b		 DB	 11
  03b4d	0b		 DB	 11
  03b4e	0b		 DB	 11
  03b4f	0b		 DB	 11
  03b50	0b		 DB	 11
  03b51	0b		 DB	 11
  03b52	0b		 DB	 11
  03b53	0b		 DB	 11
  03b54	0b		 DB	 11
  03b55	0b		 DB	 11
  03b56	0b		 DB	 11
  03b57	0b		 DB	 11
  03b58	0b		 DB	 11
  03b59	0b		 DB	 11
  03b5a	0b		 DB	 11
  03b5b	0b		 DB	 11
  03b5c	0b		 DB	 11
  03b5d	0b		 DB	 11
  03b5e	0b		 DB	 11
  03b5f	0b		 DB	 11
  03b60	0b		 DB	 11
  03b61	0b		 DB	 11
  03b62	0b		 DB	 11
  03b63	0b		 DB	 11
  03b64	0b		 DB	 11
  03b65	0b		 DB	 11
  03b66	0b		 DB	 11
  03b67	0b		 DB	 11
  03b68	0b		 DB	 11
  03b69	0b		 DB	 11
  03b6a	0b		 DB	 11
  03b6b	0b		 DB	 11
  03b6c	0b		 DB	 11
  03b6d	0b		 DB	 11
  03b6e	0b		 DB	 11
  03b6f	0b		 DB	 11
  03b70	0b		 DB	 11
  03b71	0b		 DB	 11
  03b72	0b		 DB	 11
  03b73	0b		 DB	 11
  03b74	0b		 DB	 11
  03b75	0b		 DB	 11
  03b76	0b		 DB	 11
  03b77	0b		 DB	 11
  03b78	0b		 DB	 11
  03b79	0b		 DB	 11
  03b7a	0b		 DB	 11
  03b7b	0b		 DB	 11
  03b7c	0b		 DB	 11
  03b7d	0b		 DB	 11
  03b7e	0b		 DB	 11
  03b7f	0b		 DB	 11
  03b80	0b		 DB	 11
  03b81	0b		 DB	 11
  03b82	0b		 DB	 11
  03b83	0b		 DB	 11
  03b84	0b		 DB	 11
  03b85	0b		 DB	 11
  03b86	0b		 DB	 11
  03b87	0b		 DB	 11
  03b88	0b		 DB	 11
  03b89	0b		 DB	 11
  03b8a	0b		 DB	 11
  03b8b	0b		 DB	 11
  03b8c	0b		 DB	 11
  03b8d	0b		 DB	 11
  03b8e	0b		 DB	 11
  03b8f	0b		 DB	 11
  03b90	0b		 DB	 11
  03b91	0b		 DB	 11
  03b92	0b		 DB	 11
  03b93	0b		 DB	 11
  03b94	0b		 DB	 11
  03b95	0b		 DB	 11
  03b96	0b		 DB	 11
  03b97	0a		 DB	 10
tcpnje_execute_ccw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
tn$ = 48
tcpnje_flush PROC

; 2986 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2987 :     /* Increment idle writes counter in case this is one.  It will   */
; 2988 :     /* get cleared shortly if it turns out not to be.                */
; 2989 :     tn->idlewrites++;

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0000e	8b 80 1c 01 00
	00		 mov	 eax, DWORD PTR [rax+284]
  00014	ff c0		 inc	 eax
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0001b	89 81 1c 01 00
	00		 mov	 DWORD PTR [rcx+284], eax

; 2990 : 
; 2991 :     /* Is there actually anything there to send out or is it about   */
; 2992 :     /* time we sent an empty TCPNJE block for keepalive?             */
; 2993 :     if ((tn->tcpoutbuf.inptr.address != tn->tcpoutbuf.base.address) ||

  00021	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00026	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0002b	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00032	48 39 88 e8 00
	00 00		 cmp	 QWORD PTR [rax+232], rcx
  00039	75 1c		 jne	 SHORT $LN3@tcpnje_flu
  0003b	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00040	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  00045	8b 89 20 01 00
	00		 mov	 ecx, DWORD PTR [rcx+288]
  0004b	39 88 1c 01 00
	00		 cmp	 DWORD PTR [rax+284], ecx
  00051	0f 86 0c 01 00
	00		 jbe	 $LN2@tcpnje_flu
$LN3@tcpnje_flu:

; 2994 :          (tn->idlewrites > tn->maxidlewrites))
; 2995 :     {
; 2996 :         /* If the holdoutgoing flag is set, the current buffer has   */
; 2997 :         /* already begun to be transmitted but has not been fully    */
; 2998 :         /* sent yet.  Therefore the terminating TTR has already been */
; 2999 :         /* added and the TTB has been filled in.  Just signal the    */
; 3000 :         /* worker thread to have another go at completing the        */
; 3001 :         /* transmission of the buffer and hope for the best.         */
; 3002 :         if (!tn->holdoutgoing)

  00057	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0005c	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00062	c1 e8 09	 shr	 eax, 9
  00065	83 e0 01	 and	 eax, 1
  00068	85 c0		 test	 eax, eax
  0006a	0f 85 cc 00 00
	00		 jne	 $LN4@tcpnje_flu

; 3003 :         {
; 3004 :             /* Add an all zeros TTR to the end of the output buffer  */
; 3005 :             tn->tcpoutbuf.inptr.block->record.ttr.flags = 0;

  00070	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00075	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  0007c	c6 40 08 00	 mov	 BYTE PTR [rax+8], 0

; 3006 :             tn->tcpoutbuf.inptr.block->record.ttr.unused = 0;

  00080	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00085	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  0008c	c6 40 09 00	 mov	 BYTE PTR [rax+9], 0

; 3007 :             tn->tcpoutbuf.inptr.block->record.ttr.length = 0;

  00090	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00095	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  0009c	33 c9		 xor	 ecx, ecx
  0009e	66 89 48 0a	 mov	 WORD PTR [rax+10], cx

; 3008 : 
; 3009 :             /* Account for the size of initial TTB and the final TTR */
; 3010 :             tn->tcpoutbuf.inptr.address += SIZEOF_TTB + SIZEOF_TTR;

  000a2	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  000a7	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  000ae	48 83 c0 0c	 add	 rax, 12
  000b2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  000b7	48 89 81 e8 00
	00 00		 mov	 QWORD PTR [rcx+232], rax

; 3011 : 
; 3012 :             /* Populate the TTB at the start of the output buffer    */
; 3013 :             tn->tcpoutbuf.base.ttb->flags = 0;

  000be	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  000c3	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  000ca	c6 00 00	 mov	 BYTE PTR [rax], 0

; 3014 :             tn->tcpoutbuf.base.ttb->unused = 0;

  000cd	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  000d2	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  000d9	c6 40 01 00	 mov	 BYTE PTR [rax+1], 0

; 3015 :             /* Store accumulated buffer count in network byte order  */
; 3016 :             tn->tcpoutbuf.base.ttb->length =

  000dd	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  000e2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  000e7	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  000ee	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  000f5	48 2b c1	 sub	 rax, rcx
  000f8	0f b7 c8	 movzx	 ecx, ax
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_htons
  00101	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  00106	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  0010d	66 89 41 02	 mov	 WORD PTR [rcx+2], ax

; 3017 :                 htons(tn->tcpoutbuf.inptr.address - tn->tcpoutbuf.base.address);
; 3018 :             tn->tcpoutbuf.base.ttb->reserved = 0;

  00111	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00116	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  0011d	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0

; 3019 : 
; 3020 :             /* Place output pointer at the start of the buffer       */
; 3021 :             tn->tcpoutbuf.outptr.address = tn->tcpoutbuf.base.address;

  00124	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00129	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0012e	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00135	48 89 88 f0 00
	00 00		 mov	 QWORD PTR [rax+240], rcx
$LN4@tcpnje_flu:

; 3022 :         }
; 3023 : 
; 3024 :         /* Reset keepalive counter */
; 3025 :         tn->idlewrites = 0;

  0013c	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00141	c7 80 1c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+284], 0

; 3026 :         tn->curpending = TCPNJE_PEND_WRITE;

  0014b	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00150	c6 80 60 01 00
	00 02		 mov	 BYTE PTR [rax+352], 2

; 3027 : 
; 3028 :         /* Wake-up the worker thread and wait for WRITE to complete */
; 3029 :         tcpnje_wakeup_and_wait(tn, 0);

  00157	33 d2		 xor	 edx, edx
  00159	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0015e	e8 00 00 00 00	 call	 tcpnje_wakeup_and_wait
$LN2@tcpnje_flu:

; 3030 : 
; 3031 :     }
; 3032 :     return;
; 3033 : }

  00163	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00167	c3		 ret	 0
tcpnje_flush ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
tn$ = 32
dev$ = 64
tcpnje_close_device PROC

; 2922 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2923 :     struct TCPNJE *tn;
; 2924 : 
; 2925 :     tn = (struct TCPNJE *) dev->commadpt;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0000e	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00015	48 89 44 24 20	 mov	 QWORD PTR tn$[rsp], rax

; 2926 : 
; 2927 :     if (dev->ccwtrace)

  0001a	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0001f	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00025	c1 e8 0f	 shr	 eax, 15
  00028	83 e0 01	 and	 eax, 1
  0002b	85 c0		 test	 eax, eax
  0002d	74 54		 je	 SHORT $LN2@tcpnje_clo

; 2928 :     {
; 2929 :         DBGMSG(1, "HHCTN142D %4.4X:TCPNJE - closing down\n", dev->devnum);

  0002f	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  00034	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00037	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0003d	c1 e8 0f	 shr	 eax, 15
  00040	83 e0 01	 and	 eax, 1
  00043	85 c0		 test	 eax, eax
  00045	74 12		 je	 SHORT $LN5@tcpnje_clo
  00047	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  0004c	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00052	83 e0 01	 and	 eax, 1
  00055	85 c0		 test	 eax, eax
  00057	75 12		 jne	 SHORT $LN4@tcpnje_clo
$LN5@tcpnje_clo:
  00059	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  0005e	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00064	83 e0 01	 and	 eax, 1
  00067	85 c0		 test	 eax, eax
  00069	74 18		 je	 SHORT $LN3@tcpnje_clo
$LN4@tcpnje_clo:
  0006b	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00070	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00074	8b d0		 mov	 edx, eax
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160557
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN3@tcpnje_clo:
$LN2@tcpnje_clo:

; 2930 :     }
; 2931 : 
; 2932 :     /* Attempt to gracefully close connection to remote link partner */
; 2933 :     tcpnje_close(tn->sfd, tn);

  00083	48 8b 54 24 20	 mov	 rdx, QWORD PTR tn$[rsp]
  00088	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  0008d	8b 88 3c 01 00
	00		 mov	 ecx, DWORD PTR [rax+316]
  00093	e8 00 00 00 00	 call	 tcpnje_close

; 2934 : 
; 2935 :     /* Terminate current I/O thread if necessary */
; 2936 :     if (dev->busy)

  00098	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0009d	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  000a3	c1 e8 13	 shr	 eax, 19
  000a6	83 e0 01	 and	 eax, 1
  000a9	85 c0		 test	 eax, eax
  000ab	74 0a		 je	 SHORT $LN6@tcpnje_clo

; 2937 :     {
; 2938 :         tcpnje_halt(dev);

  000ad	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  000b2	e8 00 00 00 00	 call	 tcpnje_halt
$LN6@tcpnje_clo:

; 2939 :     }
; 2940 : 
; 2941 :     /* Obtain the TCPNJE lock */
; 2942 :     obtain_lock(&tn->lock);

  000b7	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  000bc	48 83 c0 60	 add	 rax, 96			; 00000060H
  000c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160559
  000c7	48 8b c8	 mov	 rcx, rax
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 2943 : 
; 2944 :     /* Terminate worker thread if it is still up */
; 2945 :     if (tn->have_thread)

  000d0	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  000d5	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  000db	c1 e8 04	 shr	 eax, 4
  000de	83 e0 01	 and	 eax, 1
  000e1	85 c0		 test	 eax, eax
  000e3	74 3d		 je	 SHORT $LN7@tcpnje_clo

; 2946 :     {
; 2947 :         tn->curpending = TCPNJE_PEND_SHUTDOWN;

  000e5	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  000ea	c6 80 60 01 00
	00 0a		 mov	 BYTE PTR [rax+352], 10

; 2948 :         tcpnje_wakeup_and_wait(tn, 0);

  000f1	33 d2		 xor	 edx, edx
  000f3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tn$[rsp]
  000f8	e8 00 00 00 00	 call	 tcpnje_wakeup_and_wait

; 2949 :         tn->thread = (TID) - 1;

  000fd	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  00102	c7 40 48 ff ff
	ff ff		 mov	 DWORD PTR [rax+72], -1	; ffffffffH

; 2950 :         tn->have_thread = 0;

  00109	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  0010e	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00114	83 e0 ef	 and	 eax, -17		; ffffffefH
  00117	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tn$[rsp]
  0011c	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax
$LN7@tcpnje_clo:

; 2951 :     }
; 2952 : 
; 2953 : 
; 2954 :     /* Free all work storage */
; 2955 :     /* The TCPNJE lock will be released by the cleanup routine */
; 2956 :     tcpnje_clean_device(dev);

  00122	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00127	e8 00 00 00 00	 call	 tcpnje_clean_device

; 2957 : 
; 2958 :     /* Indicate to hercules the device is no longer opened */
; 2959 :     dev->fd = -1;

  0012c	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00131	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 2960 : 
; 2961 :     if (dev->ccwtrace)

  0013b	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00140	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00146	c1 e8 0f	 shr	 eax, 15
  00149	83 e0 01	 and	 eax, 1
  0014c	85 c0		 test	 eax, eax
  0014e	74 18		 je	 SHORT $LN8@tcpnje_clo

; 2962 :     {
; 2963 :         logmsg("HHCTN143D %4.4X:TCPNJE - closed down\n",

  00150	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00155	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00159	8b d0		 mov	 edx, eax
  0015b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160562
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN8@tcpnje_clo:

; 2964 :                 dev->devnum);
; 2965 :     }
; 2966 :     return 0;

  00168	33 c0		 xor	 eax, eax

; 2967 : }

  0016a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0016e	c3		 ret	 0
tcpnje_close_device ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
tn$ = 112
intemp$ = 120
tv141 = 124
tv150 = 128
$T1 = 136
tv163 = 144
tv88 = 152
tv94 = 160
tv134 = 168
tv143 = 176
tv166 = 184
lnodestring$ = 192
rnodestring$ = 208
filename$ = 224
__$ArrayPad$ = 496
dev$ = 528
class$ = 536
buflen$ = 544
buffer$ = 552
tcpnje_query_device PROC

; 2883 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 08 02
	00 00		 sub	 rsp, 520		; 00000208H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2884 : #if 0
; 2885 :     int dialstatus;
; 2886 : #endif
; 2887 :     struct in_addr intemp;
; 2888 :     struct TCPNJE *tn;
; 2889 :     char rnodestring[9], lnodestring[9];
; 2890 :     char    filename[ PATH_MAX + 1 ];
; 2891 : 
; 2892 :     tn = (struct TCPNJE *) dev->commadpt;

  0002d	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00035	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0003c	48 89 44 24 70	 mov	 QWORD PTR tn$[rsp], rax

; 2893 : 
; 2894 : #if 0
; 2895 :     dialstatus = tn->dialin + tn->dialout * 2;
; 2896 : #endif
; 2897 :     intemp.s_addr = tn->rhost;

  00041	48 8b 44 24 70	 mov	 rax, QWORD PTR tn$[rsp]
  00046	8b 40 44	 mov	 eax, DWORD PTR [rax+68]
  00049	89 44 24 78	 mov	 DWORD PTR intemp$[rsp], eax

; 2898 : 
; 2899 :     BEGIN_DEVICE_CLASS_QUERY( "LINE", dev, class, buflen, buffer);

  0004d	48 83 bc 24 18
	02 00 00 00	 cmp	 QWORD PTR class$[rsp], 0
  00056	74 12		 je	 SHORT $LN2@tcpnje_que
  00058	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR class$[rsp]
  00060	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160536
  00067	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN2@tcpnje_que:
  0006a	48 83 bc 24 10
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00073	74 20		 je	 SHORT $LN4@tcpnje_que
  00075	48 83 bc 24 18
	02 00 00 00	 cmp	 QWORD PTR class$[rsp], 0
  0007e	74 15		 je	 SHORT $LN4@tcpnje_que
  00080	83 bc 24 20 02
	00 00 00	 cmp	 DWORD PTR buflen$[rsp], 0
  00088	74 0b		 je	 SHORT $LN4@tcpnje_que
  0008a	48 83 bc 24 28
	02 00 00 00	 cmp	 QWORD PTR buffer$[rsp], 0
  00093	75 05		 jne	 SHORT $LN3@tcpnje_que
$LN4@tcpnje_que:
  00095	e9 4d 02 00 00	 jmp	 $LN1@tcpnje_que
$LN3@tcpnje_que:
  0009a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000a1	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  000a7	c1 e8 1a	 shr	 eax, 26
  000aa	83 e0 01	 and	 eax, 1
  000ad	85 c0		 test	 eax, eax
  000af	74 7e		 je	 SHORT $LN5@tcpnje_que
  000b1	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000b9	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  000bf	48 8b c8	 mov	 rcx, rax
  000c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_basename
  000c8	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  000ce	48 8b d0	 mov	 rdx, rax
  000d1	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  000d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160542
  000e6	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  000ee	e8 00 00 00 00	 call	 strcmp
  000f3	85 c0		 test	 eax, eax
  000f5	75 36		 jne	 SHORT $LN7@tcpnje_que
  000f7	b8 01 00 00 00	 mov	 eax, 1
  000fc	48 6b c0 00	 imul	 rax, rax, 0
  00100	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR $T1[rsp], rax
  00108	48 81 bc 24 88
	00 00 00 05 01
	00 00		 cmp	 QWORD PTR $T1[rsp], 261	; 00000105H
  00114	73 02		 jae	 SHORT $LN9@tcpnje_que
  00116	eb 05		 jmp	 SHORT $LN10@tcpnje_que
$LN9@tcpnje_que:
  00118	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN10@tcpnje_que:
  0011d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR $T1[rsp]
  00125	c6 84 04 e0 00
	00 00 00	 mov	 BYTE PTR filename$[rsp+rax], 0
$LN7@tcpnje_que:
  0012d	eb 25		 jmp	 SHORT $LN6@tcpnje_que
$LN5@tcpnje_que:
  0012f	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00137	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0013d	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00143	48 8b d0	 mov	 rdx, rax
  00146	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  0014e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
$LN6@tcpnje_que:

; 2900 : 
; 2901 :     snprintf(buffer, buflen, "TCPNJE %s %s RH=%s RP=%d RN=%s LP=%d LN=%s IN=%d OUT=%d OP=%s",

  00154	48 8b 44 24 70	 mov	 rax, QWORD PTR tn$[rsp]
  00159	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0015f	83 e0 01	 and	 eax, 1
  00162	85 c0		 test	 eax, eax
  00164	74 11		 je	 SHORT $LN11@tcpnje_que
  00166	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160543
  0016d	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv163[rsp], rax
  00175	eb 0f		 jmp	 SHORT $LN12@tcpnje_que
$LN11@tcpnje_que:
  00177	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160544
  0017e	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv163[rsp], rax
$LN12@tcpnje_que:
  00186	48 8b 44 24 70	 mov	 rax, QWORD PTR tn$[rsp]
  0018b	0f b6 80 60 01
	00 00		 movzx	 eax, BYTE PTR [rax+352]
  00192	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv94[rsp], rax
  0019a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_pendccw_text
  001a1	48 89 8c 24 98
	00 00 00	 mov	 QWORD PTR tv88[rsp], rcx
  001a9	48 8b 54 24 70	 mov	 rdx, QWORD PTR tn$[rsp]
  001ae	48 83 c2 30	 add	 rdx, 48			; 00000030H
  001b2	4c 8b c2	 mov	 r8, rdx
  001b5	ba 09 00 00 00	 mov	 edx, 9
  001ba	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  001c2	e8 00 00 00 00	 call	 guest_to_host_string
  001c7	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv134[rsp], rax
  001cf	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tn$[rsp]
  001d4	0f b7 89 58 01
	00 00		 movzx	 ecx, WORD PTR [rcx+344]
  001db	89 4c 24 7c	 mov	 DWORD PTR tv141[rsp], ecx
  001df	48 8b 54 24 70	 mov	 rdx, QWORD PTR tn$[rsp]
  001e4	48 83 c2 38	 add	 rdx, 56			; 00000038H
  001e8	4c 8b c2	 mov	 r8, rdx
  001eb	ba 09 00 00 00	 mov	 edx, 9
  001f0	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  001f8	e8 00 00 00 00	 call	 guest_to_host_string
  001fd	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv143[rsp], rax
  00205	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tn$[rsp]
  0020a	0f b7 89 5a 01
	00 00		 movzx	 ecx, WORD PTR [rcx+346]
  00211	89 8c 24 80 00
	00 00		 mov	 DWORD PTR tv150[rsp], ecx
  00218	8b 4c 24 78	 mov	 ecx, DWORD PTR intemp$[rsp]
  0021c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_ntoa
  00222	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tn$[rsp]
  00227	48 63 89 54 01
	00 00		 movsxd	 rcx, DWORD PTR [rcx+340]
  0022e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:tcpnje_state_text
  00235	4c 63 84 24 20
	02 00 00	 movsxd	 r8, DWORD PTR buflen$[rsp]
  0023d	4c 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv166[rsp], r8
  00245	4c 8b 94 24 98
	00 00 00	 mov	 r10, QWORD PTR tv88[rsp]
  0024d	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR tv94[rsp]
  00255	4f 8b 0c ca	 mov	 r9, QWORD PTR [r10+r9*8]
  00259	4c 89 4c 24 60	 mov	 QWORD PTR [rsp+96], r9
  0025e	4c 8b 4c 24 70	 mov	 r9, QWORD PTR tn$[rsp]
  00263	45 8b 89 18 01
	00 00		 mov	 r9d, DWORD PTR [r9+280]
  0026a	44 89 4c 24 58	 mov	 DWORD PTR [rsp+88], r9d
  0026f	4c 8b 4c 24 70	 mov	 r9, QWORD PTR tn$[rsp]
  00274	45 8b 89 10 01
	00 00		 mov	 r9d, DWORD PTR [r9+272]
  0027b	44 89 4c 24 50	 mov	 DWORD PTR [rsp+80], r9d
  00280	4c 8b 8c 24 a8
	00 00 00	 mov	 r9, QWORD PTR tv134[rsp]
  00288	4c 89 4c 24 48	 mov	 QWORD PTR [rsp+72], r9
  0028d	44 8b 4c 24 7c	 mov	 r9d, DWORD PTR tv141[rsp]
  00292	44 89 4c 24 40	 mov	 DWORD PTR [rsp+64], r9d
  00297	4c 8b 8c 24 b0
	00 00 00	 mov	 r9, QWORD PTR tv143[rsp]
  0029f	4c 89 4c 24 38	 mov	 QWORD PTR [rsp+56], r9
  002a4	44 8b 8c 24 80
	00 00 00	 mov	 r9d, DWORD PTR tv150[rsp]
  002ac	44 89 4c 24 30	 mov	 DWORD PTR [rsp+48], r9d
  002b1	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  002b6	48 8b 04 ca	 mov	 rax, QWORD PTR [rdx+rcx*8]
  002ba	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002bf	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR tv163[rsp]
  002c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160545
  002ce	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv166[rsp]
  002d6	48 8b d0	 mov	 rdx, rax
  002d9	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  002e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN1@tcpnje_que:
$LN8@tcpnje_que:

; 2902 :             tn->enabled ? "ENAB" : "DISA",
; 2903 :             tcpnje_state_text[tn->state],
; 2904 : #if 0
; 2905 :             dialstatus == 1 ? "IN" : (dialstatus == 2 ? "OUT" : "NO"),
; 2906 : #endif
; 2907 :             inet_ntoa(intemp),
; 2908 :             tn->rport,
; 2909 :             guest_to_host_string(rnodestring, sizeof(rnodestring), tn->rnode),
; 2910 :             tn->lport,
; 2911 :             guest_to_host_string(lnodestring, sizeof(lnodestring), tn->lnode),
; 2912 :             tn->inbytecount,
; 2913 :             tn->outbytecount,
; 2914 :             tcpnje_pendccw_text[tn->curpending]);
; 2915 : }

  002e7	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  002ef	48 33 cc	 xor	 rcx, rsp
  002f2	e8 00 00 00 00	 call	 __security_check_cookie
  002f7	48 81 c4 08 02
	00 00		 add	 rsp, 520		; 00000208H
  002fe	c3		 ret	 0
tcpnje_query_device ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
tn$ = 80
errcnt$ = 88
rc$ = 92
i$ = 96
j$ = 100
tv301 = 104
pc$ = 108
tv674 = 112
tv511 = 116
tv552 = 120
tv563 = 124
tv574 = 128
$T1 = 136
tv443 = 144
tv468 = 152
tv729 = 160
res$ = 176
thread_name$ = 256
__$ArrayPad$ = 288
dev$ = 320
argc$ = 328
argv$ = 336
tcpnje_init_handler PROC

; 2368 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2369 :     char thread_name[32];
; 2370 :     int i;
; 2371 :     u_int j;
; 2372 :     int rc;
; 2373 :     int pc; /* Parse code */
; 2374 :     int errcnt;
; 2375 : #if 0
; 2376 :     struct in_addr in_temp;
; 2377 :     char    *dialt;
; 2378 :     char        fmtbfr[64];
; 2379 : #endif
; 2380 : #if 0
; 2381 :     int ctospec;        /* CTO= Specified */
; 2382 : #endif
; 2383 :     struct TCPNJE *tn;
; 2384 :     union {
; 2385 :         int num;
; 2386 :         char text[80];
; 2387 :     } res;
; 2388 :         dev->devtype = 0x2703;

  00028	b8 03 27 00 00	 mov	 eax, 9987		; 00002703H
  0002d	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00035	66 89 41 4a	 mov	 WORD PTR [rcx+74], ax

; 2389 :         if (dev->ccwtrace)

  00039	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00041	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00047	c1 e8 0f	 shr	 eax, 15
  0004a	83 e0 01	 and	 eax, 1
  0004d	85 c0		 test	 eax, eax
  0004f	74 1b		 je	 SHORT $LN16@tcpnje_ini

; 2390 :         {
; 2391 :                 logmsg("HHCTN140D %4.4X:TCPNJE - initialisation starting\n",

  00051	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00059	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0005d	8b d0		 mov	 edx, eax
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160381
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN16@tcpnje_ini:

; 2392 :                         dev->devnum);
; 2393 :         }
; 2394 : 
; 2395 :         /* Request that channel.c does not combine buffers of data chained write CCWs.
; 2396 :            Sometimes, it does it anyway, whether we like it or not :-(
; 2397 :            Unfortunately, no method is provided to find out whether it will or not :-(
; 2398 :                                                                                          */
; 2399 :         dev->cdwmerge = 0;

  0006c	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00074	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0007a	0f ba f0 10	 btr	 eax, 16
  0007e	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00086	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 2400 : 
; 2401 :         rc = tcpnje_alloc_device(dev);

  0008c	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00094	e8 00 00 00 00	 call	 tcpnje_alloc_device
  00099	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax

; 2402 :         if (rc < 0)

  0009d	83 7c 24 5c 00	 cmp	 DWORD PTR rc$[rsp], 0
  000a2	7d 25		 jge	 SHORT $LN17@tcpnje_ini

; 2403 :         {
; 2404 :                 logmsg("HHCTN010E %4.4X:TCPNJE - initialisation not performed\n",

  000a4	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000ac	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  000b0	8b d0		 mov	 edx, eax
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160383
  000b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg

; 2405 :                         dev->devnum);
; 2406 :             return(-1);

  000bf	b8 ff ff ff ff	 mov	 eax, -1
  000c4	e9 be 13 00 00	 jmp	 $LN1@tcpnje_ini
$LN17@tcpnje_ini:

; 2407 :         }
; 2408 :         tn = (struct TCPNJE *) dev->commadpt;

  000c9	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000d1	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  000d8	48 89 44 24 50	 mov	 QWORD PTR tn$[rsp], rax

; 2409 : 
; 2410 :         DBGMSG(512, "HHCTN141D %4.4X:TCPNJE - Initialisation: Control block allocated\n",

  000dd	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  000e2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e5	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  000eb	c1 e8 0f	 shr	 eax, 15
  000ee	83 e0 01	 and	 eax, 1
  000f1	85 c0		 test	 eax, eax
  000f3	74 14		 je	 SHORT $LN20@tcpnje_ini
  000f5	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  000fa	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00100	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00105	85 c0		 test	 eax, eax
  00107	75 14		 jne	 SHORT $LN19@tcpnje_ini
$LN20@tcpnje_ini:
  00109	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  0010e	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00114	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00119	85 c0		 test	 eax, eax
  0011b	74 1b		 je	 SHORT $LN18@tcpnje_ini
$LN19@tcpnje_ini:
  0011d	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00125	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00129	8b d0		 mov	 edx, eax
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160387
  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN18@tcpnje_ini:

; 2411 :                         dev->devnum);
; 2412 : 
; 2413 :         errcnt = 0;

  00138	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR errcnt$[rsp], 0

; 2414 :         /*
; 2415 :          * Initialise ports & hosts
; 2416 :         */
; 2417 :         tn->pfd = -1;

  00140	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00145	c7 80 48 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+328], -1

; 2418 :         tn->afd = -1;

  0014f	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00154	c7 80 44 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+324], -1

; 2419 :         tn->sfd = -1;

  0015e	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00163	c7 80 3c 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+316], -1

; 2420 :         tn->lport = TCPNJE_DEFAULT_PORT;

  0016d	b8 af 00 00 00	 mov	 eax, 175		; 000000afH
  00172	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00177	66 89 81 58 01
	00 00		 mov	 WORD PTR [rcx+344], ax

; 2421 :         tn->rport = TCPNJE_DEFAULT_PORT;

  0017e	b8 af 00 00 00	 mov	 eax, 175		; 000000afH
  00183	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00188	66 89 81 5a 01
	00 00		 mov	 WORD PTR [rcx+346], ax

; 2422 :         tn->lhost = INADDR_ANY;

  0018f	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00194	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [rax+64], 0

; 2423 :         tn->rhost = INADDR_NONE;

  0019b	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  001a0	c7 40 44 ff ff
	ff ff		 mov	 DWORD PTR [rax+68], -1	; ffffffffH

; 2424 :         tn->dialin = 0;

  001a7	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  001ac	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  001b2	83 e0 fb	 and	 eax, -5			; fffffffbH
  001b5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  001ba	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 2425 :         tn->dialout = 0;

  001c0	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  001c5	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  001cb	83 e0 f7	 and	 eax, -9			; fffffff7H
  001ce	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  001d3	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 2426 :         tn->rto = 3000;        /* Read Time-Out in milis */

  001d9	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  001de	c7 80 34 01 00
	00 b8 0b 00 00	 mov	 DWORD PTR [rax+308], 3000 ; 00000bb8H

; 2427 :         tn->cto = 30000;       /* Connect Time-out in milis */

  001e8	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  001ed	c7 80 38 01 00
	00 30 75 00 00	 mov	 DWORD PTR [rax+312], 30000 ; 00007530H

; 2428 :         tn->debug = TCPNJE_DEFAULT_DEBUG;      /* Debug level bitmask */

  001f7	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  001fc	c7 80 50 01 00
	00 7f 00 00 00	 mov	 DWORD PTR [rax+336], 127 ; 0000007fH

; 2429 :         tn->trace = TCPNJE_DEFAULT_TRACE;      /* Trace level bitmask */

  00206	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  0020b	c7 80 4c 01 00
	00 ff ff 00 00	 mov	 DWORD PTR [rax+332], 65535 ; 0000ffffH

; 2430 :         tn->maxidlewrites = TCPNJE_DEFAULT_KEEPALIVE;

  00215	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  0021a	c7 80 20 01 00
	00 c8 00 00 00	 mov	 DWORD PTR [rax+288], 200 ; 000000c8H

; 2431 :         dev->bufsize = TCPNJE_DEFAULT_BUFSIZE;

  00224	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0022c	c7 80 d8 01 00
	00 00 20 00 00	 mov	 DWORD PTR [rax+472], 8192 ; 00002000H

; 2432 :         tn->listen = TCPNJE_DEFAULT_LISTEN;

  00236	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  0023b	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00241	0f ba e8 10	 bts	 eax, 16
  00245	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  0024a	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 2433 :         tn->connect = TCPNJE_DEFAULT_CONNECT;

  00250	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00255	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0025b	0f ba e8 11	 bts	 eax, 17
  0025f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00264	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 2434 : 
; 2435 :         for(i = 0; i < 8; i++)

  0026a	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00272	eb 0a		 jmp	 SHORT $LN4@tcpnje_ini
$LN2@tcpnje_ini:
  00274	8b 44 24 60	 mov	 eax, DWORD PTR i$[rsp]
  00278	ff c0		 inc	 eax
  0027a	89 44 24 60	 mov	 DWORD PTR i$[rsp], eax
$LN4@tcpnje_ini:
  0027e	83 7c 24 60 08	 cmp	 DWORD PTR i$[rsp], 8
  00283	7d 2e		 jge	 SHORT $LN3@tcpnje_ini

; 2436 :         {
; 2437 :             tn->lnode[i] = host_to_guest(' '); /* NJE local node name */

  00285	b1 20		 mov	 cl, 32			; 00000020H
  00287	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_host_to_guest
  0028d	48 63 4c 24 60	 movsxd	 rcx, DWORD PTR i$[rsp]
  00292	48 8b 54 24 50	 mov	 rdx, QWORD PTR tn$[rsp]
  00297	88 44 0a 30	 mov	 BYTE PTR [rdx+rcx+48], al

; 2438 :             tn->rnode[i] = host_to_guest(' '); /* NJE remote node name */

  0029b	b1 20		 mov	 cl, 32			; 00000020H
  0029d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_host_to_guest
  002a3	48 63 4c 24 60	 movsxd	 rcx, DWORD PTR i$[rsp]
  002a8	48 8b 54 24 50	 mov	 rdx, QWORD PTR tn$[rsp]
  002ad	88 44 0a 38	 mov	 BYTE PTR [rdx+rcx+56], al

; 2439 :         }

  002b1	eb c1		 jmp	 SHORT $LN2@tcpnje_ini
$LN3@tcpnje_ini:

; 2440 : #if 0
; 2441 :         ctospec = 0;
; 2442 : #endif
; 2443 : 
; 2444 :         if (argc < 1)

  002b3	83 bc 24 48 01
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  002bb	7d 20		 jge	 SHORT $LN21@tcpnje_ini

; 2445 :         {
; 2446 :             msg074e(tn, "device type");

  002bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160390
  002c4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  002c9	e8 00 00 00 00	 call	 msg074e

; 2447 :             errcnt++;

  002ce	8b 44 24 58	 mov	 eax, DWORD PTR errcnt$[rsp]
  002d2	ff c0		 inc	 eax
  002d4	89 44 24 58	 mov	 DWORD PTR errcnt$[rsp], eax

; 2448 :         }

  002d8	e9 fb 01 00 00	 jmp	 $LN22@tcpnje_ini
$LN21@tcpnje_ini:

; 2449 :         else if (!strcmp(argv[0], "2703") || !strcasecmp(argv[0], "BSC") || !strcasecmp(argv[0], "BISYNC"))

  002dd	b8 08 00 00 00	 mov	 eax, 8
  002e2	48 6b c0 00	 imul	 rax, rax, 0
  002e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160394
  002ed	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002f5	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  002f9	e8 00 00 00 00	 call	 strcmp
  002fe	85 c0		 test	 eax, eax
  00300	74 4c		 je	 SHORT $LN25@tcpnje_ini
  00302	b8 08 00 00 00	 mov	 eax, 8
  00307	48 6b c0 00	 imul	 rax, rax, 0
  0030b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160395
  00312	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0031a	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0031e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00324	85 c0		 test	 eax, eax
  00326	74 26		 je	 SHORT $LN25@tcpnje_ini
  00328	b8 08 00 00 00	 mov	 eax, 8
  0032d	48 6b c0 00	 imul	 rax, rax, 0
  00331	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160396
  00338	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00340	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00344	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0034a	85 c0		 test	 eax, eax
  0034c	75 16		 jne	 SHORT $LN23@tcpnje_ini
$LN25@tcpnje_ini:

; 2450 :         {
; 2451 :             dev->devtype = 0x2703;

  0034e	b8 03 27 00 00	 mov	 eax, 9987		; 00002703H
  00353	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0035b	66 89 41 4a	 mov	 WORD PTR [rcx+74], ax

; 2452 :         }

  0035f	e9 74 01 00 00	 jmp	 $LN24@tcpnje_ini
$LN23@tcpnje_ini:

; 2453 :         else if (!strcmp(argv[0], "3088") || !strcasecmp(argv[0], "CTC") || !strcasecmp(argv[0], "CTCA"))

  00364	b8 08 00 00 00	 mov	 eax, 8
  00369	48 6b c0 00	 imul	 rax, rax, 0
  0036d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160400
  00374	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0037c	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00380	e8 00 00 00 00	 call	 strcmp
  00385	85 c0		 test	 eax, eax
  00387	74 50		 je	 SHORT $LN28@tcpnje_ini
  00389	b8 08 00 00 00	 mov	 eax, 8
  0038e	48 6b c0 00	 imul	 rax, rax, 0
  00392	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160401
  00399	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003a1	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  003a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  003ab	85 c0		 test	 eax, eax
  003ad	74 2a		 je	 SHORT $LN28@tcpnje_ini
  003af	b8 08 00 00 00	 mov	 eax, 8
  003b4	48 6b c0 00	 imul	 rax, rax, 0
  003b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160402
  003bf	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003c7	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  003cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  003d1	85 c0		 test	 eax, eax
  003d3	0f 85 89 00 00
	00		 jne	 $LN26@tcpnje_ini
$LN28@tcpnje_ini:

; 2454 :         {
; 2455 :             dev->devtype = 0x3088;

  003d9	b8 88 30 00 00	 mov	 eax, 12424		; 00003088H
  003de	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003e6	66 89 41 4a	 mov	 WORD PTR [rcx+74], ax

; 2456 :             DBGMSG(2, "HHCTN075E %4.4X:TCPNJE - device type %s is not yet supported\n",

  003ea	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  003ef	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003f2	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  003f8	c1 e8 0f	 shr	 eax, 15
  003fb	83 e0 01	 and	 eax, 1
  003fe	85 c0		 test	 eax, eax
  00400	74 12		 je	 SHORT $LN31@tcpnje_ini
  00402	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00407	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0040d	83 e0 02	 and	 eax, 2
  00410	85 c0		 test	 eax, eax
  00412	75 12		 jne	 SHORT $LN30@tcpnje_ini
$LN31@tcpnje_ini:
  00414	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00419	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0041f	83 e0 02	 and	 eax, 2
  00422	85 c0		 test	 eax, eax
  00424	74 30		 je	 SHORT $LN29@tcpnje_ini
$LN30@tcpnje_ini:
  00426	b8 08 00 00 00	 mov	 eax, 8
  0042b	48 6b c0 00	 imul	 rax, rax, 0
  0042f	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00437	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  0043b	48 8b 94 24 50
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00443	4c 8b 04 02	 mov	 r8, QWORD PTR [rdx+rax]
  00447	8b d1		 mov	 edx, ecx
  00449	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160406
  00450	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN29@tcpnje_ini:

; 2457 :                         dev->devnum, argv[0]);
; 2458 :             errcnt++;

  00456	8b 44 24 58	 mov	 eax, DWORD PTR errcnt$[rsp]
  0045a	ff c0		 inc	 eax
  0045c	89 44 24 58	 mov	 DWORD PTR errcnt$[rsp], eax

; 2459 :         }

  00460	eb 76		 jmp	 SHORT $LN27@tcpnje_ini
$LN26@tcpnje_ini:

; 2460 :         else
; 2461 :         {
; 2462 :             DBGMSG(2, "HHCTN076E %4.4X:TCPNJE - device type %s is not valid\n",

  00462	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00467	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0046a	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00470	c1 e8 0f	 shr	 eax, 15
  00473	83 e0 01	 and	 eax, 1
  00476	85 c0		 test	 eax, eax
  00478	74 12		 je	 SHORT $LN34@tcpnje_ini
  0047a	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  0047f	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00485	83 e0 02	 and	 eax, 2
  00488	85 c0		 test	 eax, eax
  0048a	75 12		 jne	 SHORT $LN33@tcpnje_ini
$LN34@tcpnje_ini:
  0048c	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00491	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00497	83 e0 02	 and	 eax, 2
  0049a	85 c0		 test	 eax, eax
  0049c	74 30		 je	 SHORT $LN32@tcpnje_ini
$LN33@tcpnje_ini:
  0049e	b8 08 00 00 00	 mov	 eax, 8
  004a3	48 6b c0 00	 imul	 rax, rax, 0
  004a7	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  004af	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  004b3	48 8b 94 24 50
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  004bb	4c 8b 04 02	 mov	 r8, QWORD PTR [rdx+rax]
  004bf	8b d1		 mov	 edx, ecx
  004c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160410
  004c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN32@tcpnje_ini:

; 2463 :                         dev->devnum, argv[0]);
; 2464 :             errcnt++;

  004ce	8b 44 24 58	 mov	 eax, DWORD PTR errcnt$[rsp]
  004d2	ff c0		 inc	 eax
  004d4	89 44 24 58	 mov	 DWORD PTR errcnt$[rsp], eax
$LN27@tcpnje_ini:
$LN24@tcpnje_ini:
$LN22@tcpnje_ini:

; 2465 :         }
; 2466 : 
; 2467 :         for(i = 1; i < argc; i++)

  004d8	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  004e0	eb 0a		 jmp	 SHORT $LN7@tcpnje_ini
$LN5@tcpnje_ini:
  004e2	8b 44 24 60	 mov	 eax, DWORD PTR i$[rsp]
  004e6	ff c0		 inc	 eax
  004e8	89 44 24 60	 mov	 DWORD PTR i$[rsp], eax
$LN7@tcpnje_ini:
  004ec	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  004f3	39 44 24 60	 cmp	 DWORD PTR i$[rsp], eax
  004f7	0f 8d 39 08 00
	00		 jge	 $LN6@tcpnje_ini

; 2468 :         {
; 2469 :             pc = parser(ptab, argv[i], &res);

  004fd	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  00502	4c 8d 84 24 b0
	00 00 00	 lea	 r8, QWORD PTR res$[rsp]
  0050a	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00512	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00516	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:ptab
  0051d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_parser
  00523	89 44 24 6c	 mov	 DWORD PTR pc$[rsp], eax

; 2470 :             if (pc < 0)

  00527	83 7c 24 6c 00	 cmp	 DWORD PTR pc$[rsp], 0
  0052c	7d 77		 jge	 SHORT $LN35@tcpnje_ini

; 2471 :             {
; 2472 :                 DBGMSG(2, "HHCTN011E %4.4X:TCPNJE - error parsing %s\n",

  0052e	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00533	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00536	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0053c	c1 e8 0f	 shr	 eax, 15
  0053f	83 e0 01	 and	 eax, 1
  00542	85 c0		 test	 eax, eax
  00544	74 12		 je	 SHORT $LN38@tcpnje_ini
  00546	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  0054b	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00551	83 e0 02	 and	 eax, 2
  00554	85 c0		 test	 eax, eax
  00556	75 12		 jne	 SHORT $LN37@tcpnje_ini
$LN38@tcpnje_ini:
  00558	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  0055d	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00563	83 e0 02	 and	 eax, 2
  00566	85 c0		 test	 eax, eax
  00568	74 2c		 je	 SHORT $LN36@tcpnje_ini
$LN37@tcpnje_ini:
  0056a	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  0056f	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00577	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  0057b	48 8b 94 24 50
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00583	4c 8b 04 c2	 mov	 r8, QWORD PTR [rdx+rax*8]
  00587	8b d1		 mov	 edx, ecx
  00589	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160415
  00590	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN36@tcpnje_ini:

; 2473 :                         dev->devnum, argv[i]);
; 2474 :                 errcnt++;

  00596	8b 44 24 58	 mov	 eax, DWORD PTR errcnt$[rsp]
  0059a	ff c0		 inc	 eax
  0059c	89 44 24 58	 mov	 DWORD PTR errcnt$[rsp], eax

; 2475 :                 continue;

  005a0	e9 3d ff ff ff	 jmp	 $LN5@tcpnje_ini
$LN35@tcpnje_ini:

; 2476 :             }
; 2477 :             if (pc == 0)

  005a5	83 7c 24 6c 00	 cmp	 DWORD PTR pc$[rsp], 0
  005aa	75 77		 jne	 SHORT $LN39@tcpnje_ini

; 2478 :             {
; 2479 :                 DBGMSG(2, "HHCTN012E %4.4X:TCPNJE - unrecognized parameter %s\n",

  005ac	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  005b1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005b4	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  005ba	c1 e8 0f	 shr	 eax, 15
  005bd	83 e0 01	 and	 eax, 1
  005c0	85 c0		 test	 eax, eax
  005c2	74 12		 je	 SHORT $LN42@tcpnje_ini
  005c4	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  005c9	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  005cf	83 e0 02	 and	 eax, 2
  005d2	85 c0		 test	 eax, eax
  005d4	75 12		 jne	 SHORT $LN41@tcpnje_ini
$LN42@tcpnje_ini:
  005d6	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  005db	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  005e1	83 e0 02	 and	 eax, 2
  005e4	85 c0		 test	 eax, eax
  005e6	74 2c		 je	 SHORT $LN40@tcpnje_ini
$LN41@tcpnje_ini:
  005e8	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  005ed	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  005f5	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  005f9	48 8b 94 24 50
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00601	4c 8b 04 c2	 mov	 r8, QWORD PTR [rdx+rax*8]
  00605	8b d1		 mov	 edx, ecx
  00607	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160420
  0060e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN40@tcpnje_ini:

; 2480 :                         dev->devnum, argv[i]);
; 2481 :                 errcnt++;

  00614	8b 44 24 58	 mov	 eax, DWORD PTR errcnt$[rsp]
  00618	ff c0		 inc	 eax
  0061a	89 44 24 58	 mov	 DWORD PTR errcnt$[rsp], eax

; 2482 :                 continue;

  0061e	e9 bf fe ff ff	 jmp	 $LN5@tcpnje_ini
$LN39@tcpnje_ini:

; 2483 :             }
; 2484 :             switch(pc)

  00623	8b 44 24 6c	 mov	 eax, DWORD PTR pc$[rsp]
  00627	89 44 24 68	 mov	 DWORD PTR tv301[rsp], eax
  0062b	8b 44 24 68	 mov	 eax, DWORD PTR tv301[rsp]
  0062f	ff c8		 dec	 eax
  00631	89 44 24 68	 mov	 DWORD PTR tv301[rsp], eax
  00635	83 7c 24 68 0f	 cmp	 DWORD PTR tv301[rsp], 15
  0063a	0f 87 f1 06 00
	00		 ja	 $LN78@tcpnje_ini
  00640	48 63 44 24 68	 movsxd	 rax, DWORD PTR tv301[rsp]
  00645	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0064c	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN103@tcpnje_ini[rcx+rax*4]
  00653	48 03 c1	 add	 rax, rcx
  00656	ff e0		 jmp	 rax
$LN43@tcpnje_ini:

; 2485 :             {
; 2486 :                 case TCPNJE_KW_LPORT:
; 2487 :                     rc = tcpnje_getport(res.text);

  00658	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00660	e8 00 00 00 00	 call	 tcpnje_getport
  00665	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax

; 2488 :                     if (rc < 0)

  00669	83 7c 24 5c 00	 cmp	 DWORD PTR rc$[rsp], 0
  0066e	7d 28		 jge	 SHORT $LN44@tcpnje_ini

; 2489 :                     {
; 2490 :                         errcnt++;

  00670	8b 44 24 58	 mov	 eax, DWORD PTR errcnt$[rsp]
  00674	ff c0		 inc	 eax
  00676	89 44 24 58	 mov	 DWORD PTR errcnt$[rsp], eax

; 2491 :                         msg013e(tn, "LPORT", res.text);

  0067a	4c 8d 84 24 b0
	00 00 00	 lea	 r8, QWORD PTR res$[rsp]
  00682	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160423
  00689	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  0068e	e8 00 00 00 00	 call	 msg013e

; 2492 :                         break;

  00693	e9 99 06 00 00	 jmp	 $LN8@tcpnje_ini
$LN44@tcpnje_ini:

; 2493 :                     }
; 2494 :                     tn->lport = rc;

  00698	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  0069d	0f b7 4c 24 5c	 movzx	 ecx, WORD PTR rc$[rsp]
  006a2	66 89 88 58 01
	00 00		 mov	 WORD PTR [rax+344], cx

; 2495 :                     break;

  006a9	e9 83 06 00 00	 jmp	 $LN8@tcpnje_ini
$LN45@tcpnje_ini:

; 2496 :                 case TCPNJE_KW_LHOST:
; 2497 :                     if (strcmp(res.text, "*") == 0)

  006ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160426
  006b5	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  006bd	e8 00 00 00 00	 call	 strcmp
  006c2	85 c0		 test	 eax, eax
  006c4	75 11		 jne	 SHORT $LN46@tcpnje_ini

; 2498 :                     {
; 2499 :                         tn->lhost = INADDR_ANY;

  006c6	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  006cb	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [rax+64], 0

; 2500 :                         break;

  006d2	e9 5a 06 00 00	 jmp	 $LN8@tcpnje_ini
$LN46@tcpnje_ini:

; 2501 :                     }
; 2502 :                     rc = tcpnje_getaddr(&tn->lhost, res.text);

  006d7	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  006dc	48 83 c0 40	 add	 rax, 64			; 00000040H
  006e0	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR res$[rsp]
  006e8	48 8b c8	 mov	 rcx, rax
  006eb	e8 00 00 00 00	 call	 tcpnje_getaddr
  006f0	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax

; 2503 :                     if (rc != 0)

  006f4	83 7c 24 5c 00	 cmp	 DWORD PTR rc$[rsp], 0
  006f9	74 23		 je	 SHORT $LN47@tcpnje_ini

; 2504 :                     {
; 2505 :                         msg013e(tn, "LHOST", res.text);

  006fb	4c 8d 84 24 b0
	00 00 00	 lea	 r8, QWORD PTR res$[rsp]
  00703	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160428
  0070a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  0070f	e8 00 00 00 00	 call	 msg013e

; 2506 :                         errcnt++;

  00714	8b 44 24 58	 mov	 eax, DWORD PTR errcnt$[rsp]
  00718	ff c0		 inc	 eax
  0071a	89 44 24 58	 mov	 DWORD PTR errcnt$[rsp], eax
$LN47@tcpnje_ini:

; 2507 :                     }
; 2508 :                     break;

  0071e	e9 0e 06 00 00	 jmp	 $LN8@tcpnje_ini
$LN48@tcpnje_ini:

; 2509 :                 case TCPNJE_KW_RPORT:
; 2510 :                     rc = tcpnje_getport(res.text);

  00723	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  0072b	e8 00 00 00 00	 call	 tcpnje_getport
  00730	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax

; 2511 :                     if (rc < 0)

  00734	83 7c 24 5c 00	 cmp	 DWORD PTR rc$[rsp], 0
  00739	7d 28		 jge	 SHORT $LN49@tcpnje_ini

; 2512 :                     {
; 2513 :                         errcnt++;

  0073b	8b 44 24 58	 mov	 eax, DWORD PTR errcnt$[rsp]
  0073f	ff c0		 inc	 eax
  00741	89 44 24 58	 mov	 DWORD PTR errcnt$[rsp], eax

; 2514 :                         msg013e(tn, "RPORT", res.text);

  00745	4c 8d 84 24 b0
	00 00 00	 lea	 r8, QWORD PTR res$[rsp]
  0074d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160431
  00754	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00759	e8 00 00 00 00	 call	 msg013e

; 2515 :                         break;

  0075e	e9 ce 05 00 00	 jmp	 $LN8@tcpnje_ini
$LN49@tcpnje_ini:

; 2516 :                     }
; 2517 :                     tn->rport = rc;

  00763	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00768	0f b7 4c 24 5c	 movzx	 ecx, WORD PTR rc$[rsp]
  0076d	66 89 88 5a 01
	00 00		 mov	 WORD PTR [rax+346], cx

; 2518 :                     break;

  00774	e9 b8 05 00 00	 jmp	 $LN8@tcpnje_ini
$LN50@tcpnje_ini:

; 2519 :                 case TCPNJE_KW_RHOST:
; 2520 :                     if (strcmp(res.text, "*") == 0)

  00779	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160434
  00780	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00788	e8 00 00 00 00	 call	 strcmp
  0078d	85 c0		 test	 eax, eax
  0078f	75 11		 jne	 SHORT $LN51@tcpnje_ini

; 2521 :                     {
; 2522 :                         tn->rhost = INADDR_NONE;

  00791	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00796	c7 40 44 ff ff
	ff ff		 mov	 DWORD PTR [rax+68], -1	; ffffffffH

; 2523 :                         break;

  0079d	e9 8f 05 00 00	 jmp	 $LN8@tcpnje_ini
$LN51@tcpnje_ini:

; 2524 :                     }
; 2525 :                     rc = tcpnje_getaddr(&tn->rhost, res.text);

  007a2	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  007a7	48 83 c0 44	 add	 rax, 68			; 00000044H
  007ab	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR res$[rsp]
  007b3	48 8b c8	 mov	 rcx, rax
  007b6	e8 00 00 00 00	 call	 tcpnje_getaddr
  007bb	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax

; 2526 :                     if (rc != 0)

  007bf	83 7c 24 5c 00	 cmp	 DWORD PTR rc$[rsp], 0
  007c4	74 23		 je	 SHORT $LN52@tcpnje_ini

; 2527 :                     {
; 2528 :                         msg013e(tn, "RHOST", res.text);

  007c6	4c 8d 84 24 b0
	00 00 00	 lea	 r8, QWORD PTR res$[rsp]
  007ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160436
  007d5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  007da	e8 00 00 00 00	 call	 msg013e

; 2529 :                         errcnt++;

  007df	8b 44 24 58	 mov	 eax, DWORD PTR errcnt$[rsp]
  007e3	ff c0		 inc	 eax
  007e5	89 44 24 58	 mov	 DWORD PTR errcnt$[rsp], eax
$LN52@tcpnje_ini:

; 2530 :                     }
; 2531 :                     break;

  007e9	e9 43 05 00 00	 jmp	 $LN8@tcpnje_ini
$LN53@tcpnje_ini:

; 2532 :                 case TCPNJE_KW_READTO:
; 2533 :                     tn->rto = atoi(res.text);

  007ee	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  007f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  007fc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00801	89 81 34 01 00
	00		 mov	 DWORD PTR [rcx+308], eax

; 2534 :                     break;

  00807	e9 25 05 00 00	 jmp	 $LN8@tcpnje_ini
$LN54@tcpnje_ini:

; 2535 :                 case TCPNJE_KW_CONNECTTO:
; 2536 :                     tn->cto = atoi(res.text);

  0080c	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00814	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  0081a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  0081f	89 81 38 01 00
	00		 mov	 DWORD PTR [rcx+312], eax

; 2537 : #if 0
; 2538 :                     ctospec = 1;
; 2539 : #endif
; 2540 :                     break;

  00825	e9 07 05 00 00	 jmp	 $LN8@tcpnje_ini
$LN55@tcpnje_ini:

; 2541 :                 case TCPNJE_KW_KEEPALIVE:
; 2542 :                     tn->maxidlewrites = atoi(res.text);

  0082a	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00832	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00838	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  0083d	89 81 20 01 00
	00		 mov	 DWORD PTR [rcx+288], eax

; 2543 :                     break;

  00843	e9 e9 04 00 00	 jmp	 $LN8@tcpnje_ini
$LN56@tcpnje_ini:
$LN57@tcpnje_ini:

; 2544 :                 case TCPNJE_KW_SWITCHED:
; 2545 :                 case TCPNJE_KW_DIAL:
; 2546 :                     if (strcasecmp(res.text, "yes") == 0 || strcmp(res.text, "1") == 0 || strcasecmp(res.text, "inout") == 0)

  00848	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160444
  0084f	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00857	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0085d	85 c0		 test	 eax, eax
  0085f	74 31		 je	 SHORT $LN59@tcpnje_ini
  00861	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160445
  00868	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00870	e8 00 00 00 00	 call	 strcmp
  00875	85 c0		 test	 eax, eax
  00877	74 19		 je	 SHORT $LN59@tcpnje_ini
  00879	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160446
  00880	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00888	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0088e	85 c0		 test	 eax, eax
  00890	75 49		 jne	 SHORT $LN58@tcpnje_ini
$LN59@tcpnje_ini:

; 2547 :                     {
; 2548 :                         msg073w(tn, res.text);

  00892	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR res$[rsp]
  0089a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  0089f	e8 00 00 00 00	 call	 msg073w

; 2549 :                         tn->dialin = 1;

  008a4	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  008a9	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  008af	83 c8 04	 or	 eax, 4
  008b2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  008b7	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 2550 :                         tn->dialout = 1;

  008bd	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  008c2	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  008c8	83 c8 08	 or	 eax, 8
  008cb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  008d0	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 2551 :                         break;

  008d6	e9 56 04 00 00	 jmp	 $LN8@tcpnje_ini
$LN58@tcpnje_ini:

; 2552 :                     }
; 2553 :                     if (strcasecmp(res.text, "no") == 0 || strcmp(res.text, "0") == 0)

  008db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160449
  008e2	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  008ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  008f0	85 c0		 test	 eax, eax
  008f2	74 18		 je	 SHORT $LN61@tcpnje_ini
  008f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160450
  008fb	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00903	e8 00 00 00 00	 call	 strcmp
  00908	85 c0		 test	 eax, eax
  0090a	75 37		 jne	 SHORT $LN60@tcpnje_ini
$LN61@tcpnje_ini:

; 2554 :                     {
; 2555 :                         tn->dialin = 0;

  0090c	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00911	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00917	83 e0 fb	 and	 eax, -5			; fffffffbH
  0091a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  0091f	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 2556 :                         tn->dialout = 0;

  00925	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  0092a	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00930	83 e0 f7	 and	 eax, -9			; fffffff7H
  00933	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00938	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 2557 :                         break;

  0093e	e9 ee 03 00 00	 jmp	 $LN8@tcpnje_ini
$LN60@tcpnje_ini:

; 2558 :                     }
; 2559 :                     if (strcasecmp(res.text, "in") == 0)

  00943	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160452
  0094a	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00952	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00958	85 c0		 test	 eax, eax
  0095a	75 49		 jne	 SHORT $LN62@tcpnje_ini

; 2560 :                     {
; 2561 :                         msg073w(tn, res.text);

  0095c	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR res$[rsp]
  00964	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00969	e8 00 00 00 00	 call	 msg073w

; 2562 :                         tn->dialin = 1;

  0096e	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00973	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00979	83 c8 04	 or	 eax, 4
  0097c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00981	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 2563 :                         tn->dialout = 0;

  00987	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  0098c	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00992	83 e0 f7	 and	 eax, -9			; fffffff7H
  00995	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  0099a	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 2564 :                         break;

  009a0	e9 8c 03 00 00	 jmp	 $LN8@tcpnje_ini
$LN62@tcpnje_ini:

; 2565 :                     }
; 2566 :                     if (strcasecmp(res.text, "out") == 0)

  009a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160454
  009ac	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  009b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  009ba	85 c0		 test	 eax, eax
  009bc	75 49		 jne	 SHORT $LN63@tcpnje_ini

; 2567 :                     {
; 2568 :                         msg073w(tn, res.text);

  009be	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR res$[rsp]
  009c6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  009cb	e8 00 00 00 00	 call	 msg073w

; 2569 :                         tn->dialin = 0;

  009d0	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  009d5	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  009db	83 e0 fb	 and	 eax, -5			; fffffffbH
  009de	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  009e3	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 2570 :                         tn->dialout = 1;

  009e9	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  009ee	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  009f4	83 c8 08	 or	 eax, 8
  009f7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  009fc	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 2571 :                         break;

  00a02	e9 2a 03 00 00	 jmp	 $LN8@tcpnje_ini
$LN63@tcpnje_ini:

; 2572 :                     }
; 2573 :                     DBGMSG(2, "HHCTN014E %4.4X:TCPNJE - incorrect switched/dial specification %s; defaulting to DIAL=NO\n",

  00a07	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00a0c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00a0f	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00a15	c1 e8 0f	 shr	 eax, 15
  00a18	83 e0 01	 and	 eax, 1
  00a1b	85 c0		 test	 eax, eax
  00a1d	74 12		 je	 SHORT $LN66@tcpnje_ini
  00a1f	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00a24	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00a2a	83 e0 02	 and	 eax, 2
  00a2d	85 c0		 test	 eax, eax
  00a2f	75 12		 jne	 SHORT $LN65@tcpnje_ini
$LN66@tcpnje_ini:
  00a31	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00a36	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00a3c	83 e0 02	 and	 eax, 2
  00a3f	85 c0		 test	 eax, eax
  00a41	74 23		 je	 SHORT $LN64@tcpnje_ini
$LN65@tcpnje_ini:
  00a43	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a4b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00a4f	4c 8d 84 24 b0
	00 00 00	 lea	 r8, QWORD PTR res$[rsp]
  00a57	8b d0		 mov	 edx, eax
  00a59	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160458
  00a60	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN64@tcpnje_ini:

; 2574 :                             dev->devnum, res.text);
; 2575 :                     tn->dialin = 0;

  00a66	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00a6b	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00a71	83 e0 fb	 and	 eax, -5			; fffffffbH
  00a74	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00a79	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 2576 :                     tn->dialout = 0;

  00a7f	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00a84	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00a8a	83 e0 f7	 and	 eax, -9			; fffffff7H
  00a8d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00a92	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 2577 :                     break;

  00a98	e9 94 02 00 00	 jmp	 $LN8@tcpnje_ini
$LN67@tcpnje_ini:

; 2578 :                 case TCPNJE_KW_LNODE:
; 2579 :                     if (strlen(res.text) > 8)

  00a9d	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00aa5	e8 00 00 00 00	 call	 strlen
  00aaa	48 83 f8 08	 cmp	 rax, 8
  00aae	76 28		 jbe	 SHORT $LN68@tcpnje_ini

; 2580 :                     {
; 2581 :                         msg013e(tn, "LNODE", res.text);

  00ab0	4c 8d 84 24 b0
	00 00 00	 lea	 r8, QWORD PTR res$[rsp]
  00ab8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160461
  00abf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00ac4	e8 00 00 00 00	 call	 msg013e

; 2582 :                         errcnt++;

  00ac9	8b 44 24 58	 mov	 eax, DWORD PTR errcnt$[rsp]
  00acd	ff c0		 inc	 eax
  00acf	89 44 24 58	 mov	 DWORD PTR errcnt$[rsp], eax

; 2583 :                         break;

  00ad3	e9 59 02 00 00	 jmp	 $LN8@tcpnje_ini
$LN68@tcpnje_ini:

; 2584 :                     }
; 2585 :                     for(j = 0; j < strlen(res.text); j++)

  00ad8	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  00ae0	eb 0a		 jmp	 SHORT $LN12@tcpnje_ini
$LN10@tcpnje_ini:
  00ae2	8b 44 24 64	 mov	 eax, DWORD PTR j$[rsp]
  00ae6	ff c0		 inc	 eax
  00ae8	89 44 24 64	 mov	 DWORD PTR j$[rsp], eax
$LN12@tcpnje_ini:
  00aec	8b 44 24 64	 mov	 eax, DWORD PTR j$[rsp]
  00af0	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv443[rsp], rax
  00af8	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00b00	e8 00 00 00 00	 call	 strlen
  00b05	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv443[rsp]
  00b0d	48 3b c8	 cmp	 rcx, rax
  00b10	73 2c		 jae	 SHORT $LN11@tcpnje_ini

; 2586 :                     {
; 2587 :                         tn->lnode[j] = host_to_guest(toupper(res.text[j]));

  00b12	8b 44 24 64	 mov	 eax, DWORD PTR j$[rsp]
  00b16	0f be 84 04 b0
	00 00 00	 movsx	 eax, BYTE PTR res$[rsp+rax]
  00b1e	8b c8		 mov	 ecx, eax
  00b20	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_toupper
  00b26	0f b6 c8	 movzx	 ecx, al
  00b29	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_host_to_guest
  00b2f	8b 4c 24 64	 mov	 ecx, DWORD PTR j$[rsp]
  00b33	48 8b 54 24 50	 mov	 rdx, QWORD PTR tn$[rsp]
  00b38	88 44 0a 30	 mov	 BYTE PTR [rdx+rcx+48], al

; 2588 :                     }

  00b3c	eb a4		 jmp	 SHORT $LN10@tcpnje_ini
$LN11@tcpnje_ini:

; 2589 :                     break;

  00b3e	e9 ee 01 00 00	 jmp	 $LN8@tcpnje_ini
$LN69@tcpnje_ini:

; 2590 :                 case TCPNJE_KW_RNODE:
; 2591 :                     if (strlen(res.text) > 8)

  00b43	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00b4b	e8 00 00 00 00	 call	 strlen
  00b50	48 83 f8 08	 cmp	 rax, 8
  00b54	76 28		 jbe	 SHORT $LN70@tcpnje_ini

; 2592 :                     {
; 2593 :                         msg013e(tn, "RNODE", res.text);

  00b56	4c 8d 84 24 b0
	00 00 00	 lea	 r8, QWORD PTR res$[rsp]
  00b5e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160464
  00b65	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00b6a	e8 00 00 00 00	 call	 msg013e

; 2594 :                         errcnt++;

  00b6f	8b 44 24 58	 mov	 eax, DWORD PTR errcnt$[rsp]
  00b73	ff c0		 inc	 eax
  00b75	89 44 24 58	 mov	 DWORD PTR errcnt$[rsp], eax

; 2595 :                         break;

  00b79	e9 b3 01 00 00	 jmp	 $LN8@tcpnje_ini
$LN70@tcpnje_ini:

; 2596 :                     }
; 2597 :                     for(j = 0; j < strlen(res.text); j++)

  00b7e	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  00b86	eb 0a		 jmp	 SHORT $LN15@tcpnje_ini
$LN13@tcpnje_ini:
  00b88	8b 44 24 64	 mov	 eax, DWORD PTR j$[rsp]
  00b8c	ff c0		 inc	 eax
  00b8e	89 44 24 64	 mov	 DWORD PTR j$[rsp], eax
$LN15@tcpnje_ini:
  00b92	8b 44 24 64	 mov	 eax, DWORD PTR j$[rsp]
  00b96	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv468[rsp], rax
  00b9e	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00ba6	e8 00 00 00 00	 call	 strlen
  00bab	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv468[rsp]
  00bb3	48 3b c8	 cmp	 rcx, rax
  00bb6	73 2c		 jae	 SHORT $LN14@tcpnje_ini

; 2598 :                     {
; 2599 :                         tn->rnode[j] = host_to_guest(toupper(res.text[j]));

  00bb8	8b 44 24 64	 mov	 eax, DWORD PTR j$[rsp]
  00bbc	0f be 84 04 b0
	00 00 00	 movsx	 eax, BYTE PTR res$[rsp+rax]
  00bc4	8b c8		 mov	 ecx, eax
  00bc6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_toupper
  00bcc	0f b6 c8	 movzx	 ecx, al
  00bcf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_host_to_guest
  00bd5	8b 4c 24 64	 mov	 ecx, DWORD PTR j$[rsp]
  00bd9	48 8b 54 24 50	 mov	 rdx, QWORD PTR tn$[rsp]
  00bde	88 44 0a 38	 mov	 BYTE PTR [rdx+rcx+56], al

; 2600 :                     }

  00be2	eb a4		 jmp	 SHORT $LN13@tcpnje_ini
$LN14@tcpnje_ini:

; 2601 :                     break;

  00be4	e9 48 01 00 00	 jmp	 $LN8@tcpnje_ini
$LN71@tcpnje_ini:

; 2602 :                 case TCPNJE_KW_DEBUG:
; 2603 :                     if (atoi(res.text) < 1)

  00be9	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00bf1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00bf7	83 f8 01	 cmp	 eax, 1
  00bfa	7d 28		 jge	 SHORT $LN72@tcpnje_ini

; 2604 :                     {
; 2605 :                         msg013e(tn, "DEBUG", res.text);

  00bfc	4c 8d 84 24 b0
	00 00 00	 lea	 r8, QWORD PTR res$[rsp]
  00c04	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160467
  00c0b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00c10	e8 00 00 00 00	 call	 msg013e

; 2606 :                         errcnt++;

  00c15	8b 44 24 58	 mov	 eax, DWORD PTR errcnt$[rsp]
  00c19	ff c0		 inc	 eax
  00c1b	89 44 24 58	 mov	 DWORD PTR errcnt$[rsp], eax

; 2607 :                         break;

  00c1f	e9 0d 01 00 00	 jmp	 $LN8@tcpnje_ini
$LN72@tcpnje_ini:

; 2608 :                     }
; 2609 :                     tn->debug = atoi(res.text);

  00c24	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00c2c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00c32	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00c37	89 81 50 01 00
	00		 mov	 DWORD PTR [rcx+336], eax

; 2610 :                     break;

  00c3d	e9 ef 00 00 00	 jmp	 $LN8@tcpnje_ini
$LN73@tcpnje_ini:

; 2611 :                 case TCPNJE_KW_TRACE:
; 2612 :                     tn->trace = atoi(res.text);

  00c42	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00c4a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00c50	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00c55	89 81 4c 01 00
	00		 mov	 DWORD PTR [rcx+332], eax

; 2613 :                     break;

  00c5b	e9 d1 00 00 00	 jmp	 $LN8@tcpnje_ini
$LN74@tcpnje_ini:

; 2614 :                 case TCPNJE_KW_BUFSIZE:
; 2615 :                     if (atoi(res.text) < 1024)

  00c60	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00c68	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00c6e	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  00c73	7d 28		 jge	 SHORT $LN75@tcpnje_ini

; 2616 :                     {
; 2617 :                         msg013e(tn, "BUFSIZE", res.text);

  00c75	4c 8d 84 24 b0
	00 00 00	 lea	 r8, QWORD PTR res$[rsp]
  00c7d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160471
  00c84	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00c89	e8 00 00 00 00	 call	 msg013e

; 2618 :                         errcnt++;

  00c8e	8b 44 24 58	 mov	 eax, DWORD PTR errcnt$[rsp]
  00c92	ff c0		 inc	 eax
  00c94	89 44 24 58	 mov	 DWORD PTR errcnt$[rsp], eax

; 2619 :                         break;

  00c98	e9 94 00 00 00	 jmp	 $LN8@tcpnje_ini
$LN75@tcpnje_ini:

; 2620 :                     }
; 2621 :                     dev->bufsize = atoi(res.text);

  00c9d	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00ca5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00cab	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00cb3	89 81 d8 01 00
	00		 mov	 DWORD PTR [rcx+472], eax

; 2622 :                     break;

  00cb9	eb 76		 jmp	 SHORT $LN8@tcpnje_ini
$LN76@tcpnje_ini:

; 2623 :                 case TCPNJE_KW_LISTEN:
; 2624 :                     tn->listen = atoi(res.text);

  00cbb	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00cc3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00cc9	89 44 24 74	 mov	 DWORD PTR tv511[rsp], eax
  00ccd	8b 44 24 74	 mov	 eax, DWORD PTR tv511[rsp]
  00cd1	83 e0 01	 and	 eax, 1
  00cd4	c1 e0 10	 shl	 eax, 16
  00cd7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00cdc	8b 89 64 01 00
	00		 mov	 ecx, DWORD PTR [rcx+356]
  00ce2	0f ba f1 10	 btr	 ecx, 16
  00ce6	0b c8		 or	 ecx, eax
  00ce8	8b c1		 mov	 eax, ecx
  00cea	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00cef	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 2625 :                     break;

  00cf5	eb 3a		 jmp	 SHORT $LN8@tcpnje_ini
$LN77@tcpnje_ini:

; 2626 :                 case TCPNJE_KW_CONNECT:
; 2627 :                     tn->connect = atoi(res.text);

  00cf7	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00cff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00d05	89 44 24 78	 mov	 DWORD PTR tv552[rsp], eax
  00d09	8b 44 24 78	 mov	 eax, DWORD PTR tv552[rsp]
  00d0d	83 e0 01	 and	 eax, 1
  00d10	c1 e0 11	 shl	 eax, 17
  00d13	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00d18	8b 89 64 01 00
	00		 mov	 ecx, DWORD PTR [rcx+356]
  00d1e	0f ba f1 11	 btr	 ecx, 17
  00d22	0b c8		 or	 ecx, eax
  00d24	8b c1		 mov	 eax, ecx
  00d26	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00d2b	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax
$LN78@tcpnje_ini:
$LN8@tcpnje_ini:

; 2628 :                     break;
; 2629 :                 default:
; 2630 :                     break;
; 2631 :             }
; 2632 :         }

  00d31	e9 ac f7 ff ff	 jmp	 $LN5@tcpnje_ini
$LN6@tcpnje_ini:

; 2633 : 
; 2634 : #if 0
; 2635 :         /* lport, rport and lhost are defaulted and rhost is never essential (incoming connections will work)
; 2636 :            so these checks are not required */
; 2637 : 
; 2638 :         /*
; 2639 :          * Check parameters consistency
; 2640 :          * when DIAL=NO :
; 2641 :          *     lport must not be 0
; 2642 :          *     lhost may be anything
; 2643 :          *     rport must not be 0
; 2644 :          *     rhost must not be INADDR_NONE
; 2645 :          * when DIAL=IN or DIAL=INOUT
; 2646 :          *     lport must NOT be 0
; 2647 :          *     lhost may be anything
; 2648 :          *     rport MUST be 0
; 2649 :          *     rhost MUST be INADDR_NONE
; 2650 :          * when DIAL=OUT
; 2651 :          *     lport MUST be 0
; 2652 :          *     lhost MUST be INADDR_ANY
; 2653 :          *     rport MUST be 0
; 2654 :          *     rhost MUST be INADDR_NONE
; 2655 :         */
; 2656 :         switch(tn->dialin + tn->dialout * 2)
; 2657 :         {
; 2658 :                 case 0:
; 2659 :                     dialt = "NO";
; 2660 :                     break;
; 2661 :                 case 1:
; 2662 :                     dialt = "IN";
; 2663 :                     break;
; 2664 :                 case 2:
; 2665 :                     dialt = "OUT";
; 2666 :                     break;
; 2667 :                 case 3:
; 2668 :                     dialt = "INOUT";
; 2669 :                     break;
; 2670 :                 default:
; 2671 :                     dialt = "*ERR*";
; 2672 :                     break;
; 2673 :         }
; 2674 :         switch(tn->dialin + tn->dialout * 2)
; 2675 :         {
; 2676 :             case 0: /* DIAL = NO */
; 2677 :                 if (tn->lport == 0)
; 2678 :                 {
; 2679 :                     msg015e(tn, dialt, "LPORT");
; 2680 :                     errcnt++;
; 2681 :                 }
; 2682 :                 if (tn->rport == 0)
; 2683 :                 {
; 2684 :                     msg015e(tn, dialt, "RPORT");
; 2685 :                     errcnt++;
; 2686 :                 }
; 2687 :                 if (tn->rhost == INADDR_NONE)
; 2688 :                 {
; 2689 :                     msg015e(tn, dialt, "RHOST");
; 2690 :                     errcnt++;
; 2691 :                 }
; 2692 :                 break;
; 2693 :             case 1: /* DIAL = IN */
; 2694 :             case 3: /* DIAL = INOUT */
; 2695 :                 if (tn->lport == 0)
; 2696 :                 {
; 2697 :                     msg015e(tn, dialt, "LPORT");
; 2698 :                     errcnt++;
; 2699 :                 }
; 2700 :                 if (tn->rport != 0)
; 2701 :                 {
; 2702 :                     snprintf(fmtbfr, sizeof(fmtbfr), "%d", tn->rport);
; 2703 :                     msg016w017i(tn, dialt, "RPORT", fmtbfr);
; 2704 :                 }
; 2705 :                 if (tn->rhost != INADDR_NONE)
; 2706 :                 {
; 2707 :                     in_temp.s_addr = tn->rhost;
; 2708 :                     msg016w017i(tn, dialt, "RHOST", inet_ntoa(in_temp));
; 2709 :                     tn->rhost = INADDR_NONE;
; 2710 :                 }
; 2711 :                 break;
; 2712 :             case 2: /* DIAL = OUT */
; 2713 :                 if (tn->lport != 0)
; 2714 :                 {
; 2715 :                     snprintf(fmtbfr, sizeof(fmtbfr), "%d", tn->lport);
; 2716 :                     msg016w017i(tn, dialt, "LPORT", fmtbfr);
; 2717 :                     tn->lport = 0;
; 2718 :                 }
; 2719 :                 if (tn->rport != 0)
; 2720 :                 {
; 2721 :                     snprintf(fmtbfr, sizeof(fmtbfr), "%d", tn->rport);
; 2722 :                     msg016w017i(tn, dialt, "RPORT", fmtbfr);
; 2723 :                     tn->rport = 0;
; 2724 :                 }
; 2725 :                 if (tn->lhost != INADDR_ANY)    /* Actually it's more like INADDR_NONE */
; 2726 :                 {
; 2727 :                     in_temp.s_addr = tn->lhost;
; 2728 :                     msg016w017i(tn, dialt, "LHOST", inet_ntoa(in_temp));
; 2729 :                     tn->lhost = INADDR_ANY;
; 2730 :                 }
; 2731 :                 if (tn->rhost != INADDR_NONE)
; 2732 :                 {
; 2733 :                     in_temp.s_addr = tn->rhost;
; 2734 :                     msg016w017i(tn, dialt, "RHOST", inet_ntoa(in_temp));
; 2735 :                     tn->rhost = INADDR_NONE;
; 2736 :                 }
; 2737 :                 break;
; 2738 :         }
; 2739 : #endif
; 2740 :         if (tn->rnode[0] == host_to_guest(' '))

  00d36	b8 01 00 00 00	 mov	 eax, 1
  00d3b	48 6b c0 00	 imul	 rax, rax, 0
  00d3f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00d44	0f b6 44 01 38	 movzx	 eax, BYTE PTR [rcx+rax+56]
  00d49	89 44 24 7c	 mov	 DWORD PTR tv563[rsp], eax
  00d4d	b1 20		 mov	 cl, 32			; 00000020H
  00d4f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_host_to_guest
  00d55	0f b6 c0	 movzx	 eax, al
  00d58	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv563[rsp]
  00d5c	3b c8		 cmp	 ecx, eax
  00d5e	75 1b		 jne	 SHORT $LN79@tcpnje_ini

; 2741 :         {
; 2742 :             msg074e(tn, "RNODE");

  00d60	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160476
  00d67	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00d6c	e8 00 00 00 00	 call	 msg074e

; 2743 :             errcnt++;

  00d71	8b 44 24 58	 mov	 eax, DWORD PTR errcnt$[rsp]
  00d75	ff c0		 inc	 eax
  00d77	89 44 24 58	 mov	 DWORD PTR errcnt$[rsp], eax
$LN79@tcpnje_ini:

; 2744 :         }
; 2745 :         if (tn->lnode[0] == host_to_guest(' '))

  00d7b	b8 01 00 00 00	 mov	 eax, 1
  00d80	48 6b c0 00	 imul	 rax, rax, 0
  00d84	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00d89	0f b6 44 01 30	 movzx	 eax, BYTE PTR [rcx+rax+48]
  00d8e	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv574[rsp], eax
  00d95	b1 20		 mov	 cl, 32			; 00000020H
  00d97	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_host_to_guest
  00d9d	0f b6 c0	 movzx	 eax, al
  00da0	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv574[rsp]
  00da7	3b c8		 cmp	 ecx, eax
  00da9	75 1b		 jne	 SHORT $LN80@tcpnje_ini

; 2746 :         {
; 2747 :             msg074e(tn, "LNODE");

  00dab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160478
  00db2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00db7	e8 00 00 00 00	 call	 msg074e

; 2748 :             errcnt++;

  00dbc	8b 44 24 58	 mov	 eax, DWORD PTR errcnt$[rsp]
  00dc0	ff c0		 inc	 eax
  00dc2	89 44 24 58	 mov	 DWORD PTR errcnt$[rsp], eax
$LN80@tcpnje_ini:

; 2749 :         }
; 2750 :         if (errcnt > 0)

  00dc6	83 7c 24 58 00	 cmp	 DWORD PTR errcnt$[rsp], 0
  00dcb	7e 61		 jle	 SHORT $LN81@tcpnje_ini

; 2751 :         {
; 2752 :             DBGMSG(2, "HHCTN021I %4.4X:TCPNJE - initialisation failed due to previous errors\n",

  00dcd	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00dd2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00dd5	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00ddb	c1 e8 0f	 shr	 eax, 15
  00dde	83 e0 01	 and	 eax, 1
  00de1	85 c0		 test	 eax, eax
  00de3	74 12		 je	 SHORT $LN84@tcpnje_ini
  00de5	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00dea	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00df0	83 e0 02	 and	 eax, 2
  00df3	85 c0		 test	 eax, eax
  00df5	75 12		 jne	 SHORT $LN83@tcpnje_ini
$LN84@tcpnje_ini:
  00df7	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00dfc	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00e02	83 e0 02	 and	 eax, 2
  00e05	85 c0		 test	 eax, eax
  00e07	74 1b		 je	 SHORT $LN82@tcpnje_ini
$LN83@tcpnje_ini:
  00e09	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e11	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00e15	8b d0		 mov	 edx, eax
  00e17	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160483
  00e1e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN82@tcpnje_ini:

; 2753 :                     dev->devnum);
; 2754 :             return -1;

  00e24	b8 ff ff ff ff	 mov	 eax, -1
  00e29	e9 59 06 00 00	 jmp	 $LN1@tcpnje_ini
$LN81@tcpnje_ini:

; 2755 :         }
; 2756 : 
; 2757 :         /* Allocate device buffers */
; 2758 : 
; 2759 :         tn->ttcpasbuf.size = SIZEOF_TTC;

  00e2e	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00e33	48 c7 80 a8 00
	00 00 21 00 00
	00		 mov	 QWORD PTR [rax+168], 33	; 00000021H

; 2760 :         tn->ttcpasbuf.base.address = malloc(tn->ttcpasbuf.size);

  00e3e	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00e43	48 8b 88 a8 00
	00 00		 mov	 rcx, QWORD PTR [rax+168]
  00e4a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00e50	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00e55	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 2761 :         if (tn->ttcpasbuf.base.address == NULL)

  00e5c	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00e61	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  00e69	75 25		 jne	 SHORT $LN85@tcpnje_ini

; 2762 :         {
; 2763 :             logmsg("HHCTN024E %4.4X:TCPNJE - memory allocation failure for TCPNJE TTC passive open buffer\n",

  00e6b	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e73	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00e77	8b d0		 mov	 edx, eax
  00e79	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160485
  00e80	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg

; 2764 :                     dev->devnum);
; 2765 :             return -1;

  00e86	b8 ff ff ff ff	 mov	 eax, -1
  00e8b	e9 f7 05 00 00	 jmp	 $LN1@tcpnje_ini
$LN85@tcpnje_ini:

; 2766 :         }
; 2767 : 
; 2768 :         tn->ttcactbuf.size = SIZEOF_TTC;

  00e90	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00e95	48 c7 80 80 00
	00 00 21 00 00
	00		 mov	 QWORD PTR [rax+128], 33	; 00000021H

; 2769 :         tn->ttcactbuf.base.address = malloc(tn->ttcactbuf.size);

  00ea0	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00ea5	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00eac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00eb2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00eb7	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 2770 :         if (tn->ttcactbuf.base.address == NULL)

  00ebb	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00ec0	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00ec5	75 25		 jne	 SHORT $LN86@tcpnje_ini

; 2771 :         {
; 2772 :             logmsg("HHCTN025E %4.4X:TCPNJE - memory allocation failure for TCPNJE TTC active open buffer\n",

  00ec7	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ecf	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00ed3	8b d0		 mov	 edx, eax
  00ed5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160487
  00edc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg

; 2773 :                     dev->devnum);
; 2774 :             return -1;

  00ee2	b8 ff ff ff ff	 mov	 eax, -1
  00ee7	e9 9b 05 00 00	 jmp	 $LN1@tcpnje_ini
$LN86@tcpnje_ini:

; 2775 :         }
; 2776 : 
; 2777 :         tn->tcpinbuf.size = dev->bufsize;

  00eec	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ef4	48 63 80 d8 01
	00 00		 movsxd	 rax, DWORD PTR [rax+472]
  00efb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00f00	48 89 81 d0 00
	00 00		 mov	 QWORD PTR [rcx+208], rax

; 2778 :         tn->tcpinbuf.base.address = malloc(tn->tcpinbuf.size);

  00f07	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00f0c	48 8b 88 d0 00
	00 00		 mov	 rcx, QWORD PTR [rax+208]
  00f13	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00f19	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00f1e	48 89 81 b8 00
	00 00		 mov	 QWORD PTR [rcx+184], rax

; 2779 :         if (tn->tcpinbuf.base.address == NULL)

  00f25	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00f2a	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00f32	75 25		 jne	 SHORT $LN87@tcpnje_ini

; 2780 :         {
; 2781 :             logmsg("HHCTN026E %4.4X:TCPNJE - memory allocation failure for TCPNJE TTB/TTR input buffer\n",

  00f34	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f3c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00f40	8b d0		 mov	 edx, eax
  00f42	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160489
  00f49	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg

; 2782 :                     dev->devnum);
; 2783 :             return -1;

  00f4f	b8 ff ff ff ff	 mov	 eax, -1
  00f54	e9 2e 05 00 00	 jmp	 $LN1@tcpnje_ini
$LN87@tcpnje_ini:

; 2784 :         }
; 2785 : 
; 2786 :         tn->tcpoutbuf.size = dev->bufsize;

  00f59	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f61	48 63 80 d8 01
	00 00		 movsxd	 rax, DWORD PTR [rax+472]
  00f68	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00f6d	48 89 81 f8 00
	00 00		 mov	 QWORD PTR [rcx+248], rax

; 2787 :         tn->tcpoutbuf.base.address = malloc(tn->tcpoutbuf.size);

  00f74	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00f79	48 8b 88 f8 00
	00 00		 mov	 rcx, QWORD PTR [rax+248]
  00f80	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00f86	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00f8b	48 89 81 e0 00
	00 00		 mov	 QWORD PTR [rcx+224], rax

; 2788 :         if (tn->tcpoutbuf.base.address == NULL)

  00f92	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00f97	48 83 b8 e0 00
	00 00 00	 cmp	 QWORD PTR [rax+224], 0
  00f9f	75 25		 jne	 SHORT $LN88@tcpnje_ini

; 2789 :         {
; 2790 :             logmsg("HHCTN027E %4.4X:TCPNJE - memory allocation failure for TCPNJE TTB/TTR output buffer\n",

  00fa1	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00fa9	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00fad	8b d0		 mov	 edx, eax
  00faf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160491
  00fb6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg

; 2791 :                     dev->devnum);
; 2792 :             return -1;

  00fbc	b8 ff ff ff ff	 mov	 eax, -1
  00fc1	e9 c1 04 00 00	 jmp	 $LN1@tcpnje_ini
$LN88@tcpnje_ini:

; 2793 :         }
; 2794 : 
; 2795 :         dev->numsense = 2;

  00fc6	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00fce	c7 80 60 03 00
	00 02 00 00 00	 mov	 DWORD PTR [rax+864], 2

; 2796 :         memset(dev->sense, 0, sizeof(dev->sense));

  00fd8	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00fe0	48 05 64 03 00
	00		 add	 rax, 868		; 00000364H
  00fe6	48 8b f8	 mov	 rdi, rax
  00fe9	33 c0		 xor	 eax, eax
  00feb	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00ff0	f3 aa		 rep stosb

; 2797 : 
; 2798 :         /* Initialise various flags & statuses */
; 2799 :         tn->enabled = 0;

  00ff2	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00ff7	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00ffd	83 e0 fe	 and	 eax, -2			; fffffffeH
  01000	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  01005	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 2800 :         tn->state = CLOSED;

  0100b	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  01010	c7 80 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+340], 0

; 2801 :         dev->fd = 100;    /* Ensures 'close' function called by Hercules at device detach time */

  0101a	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01022	c7 80 ac 01 00
	00 64 00 00 00	 mov	 DWORD PTR [rax+428], 100 ; 00000064H

; 2802 : 
; 2803 :         /* Initialize the device identifier bytes */
; 2804 :         dev->numdevid = sysblk.legacysenseid ? 7 : 0;

  0102c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01033	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  01039	c1 e8 14	 shr	 eax, 20
  0103c	83 e0 01	 and	 eax, 1
  0103f	85 c0		 test	 eax, eax
  01041	74 0a		 je	 SHORT $LN99@tcpnje_ini
  01043	c7 44 24 70 07
	00 00 00	 mov	 DWORD PTR tv674[rsp], 7
  0104b	eb 08		 jmp	 SHORT $LN100@tcpnje_ini
$LN99@tcpnje_ini:
  0104d	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv674[rsp], 0
$LN100@tcpnje_ini:
  01055	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0105d	8b 4c 24 70	 mov	 ecx, DWORD PTR tv674[rsp]
  01061	89 88 64 04 00
	00		 mov	 DWORD PTR [rax+1124], ecx

; 2805 :         dev->devid[0] = 0xFF;

  01067	b8 01 00 00 00	 mov	 eax, 1
  0106c	48 6b c0 00	 imul	 rax, rax, 0
  01070	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01078	c6 84 01 68 04
	00 00 ff	 mov	 BYTE PTR [rcx+rax+1128], 255 ; 000000ffH

; 2806 :         dev->devid[1] = dev->devtype >> 8;

  01080	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01088	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  0108c	c1 f8 08	 sar	 eax, 8
  0108f	b9 01 00 00 00	 mov	 ecx, 1
  01094	48 6b c9 01	 imul	 rcx, rcx, 1
  01098	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  010a0	88 84 0a 68 04
	00 00		 mov	 BYTE PTR [rdx+rcx+1128], al

; 2807 :         dev->devid[2] = dev->devtype & 0xFF;

  010a7	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  010af	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  010b3	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  010b8	b9 01 00 00 00	 mov	 ecx, 1
  010bd	48 6b c9 02	 imul	 rcx, rcx, 2
  010c1	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  010c9	88 84 0a 68 04
	00 00		 mov	 BYTE PTR [rdx+rcx+1128], al

; 2808 :         dev->devid[3] = 0x00;

  010d0	b8 01 00 00 00	 mov	 eax, 1
  010d5	48 6b c0 03	 imul	 rax, rax, 3
  010d9	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  010e1	c6 84 01 68 04
	00 00 00	 mov	 BYTE PTR [rcx+rax+1128], 0

; 2809 :         dev->devid[4] = dev->devtype >> 8;

  010e9	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  010f1	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  010f5	c1 f8 08	 sar	 eax, 8
  010f8	b9 01 00 00 00	 mov	 ecx, 1
  010fd	48 6b c9 04	 imul	 rcx, rcx, 4
  01101	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  01109	88 84 0a 68 04
	00 00		 mov	 BYTE PTR [rdx+rcx+1128], al

; 2810 :         dev->devid[5] = dev->devtype & 0xFF;

  01110	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01118	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  0111c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01121	b9 01 00 00 00	 mov	 ecx, 1
  01126	48 6b c9 05	 imul	 rcx, rcx, 5
  0112a	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  01132	88 84 0a 68 04
	00 00		 mov	 BYTE PTR [rdx+rcx+1128], al

; 2811 :         dev->devid[6] = 0x00;

  01139	b8 01 00 00 00	 mov	 eax, 1
  0113e	48 6b c0 06	 imul	 rax, rax, 6
  01142	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0114a	c6 84 01 68 04
	00 00 00	 mov	 BYTE PTR [rcx+rax+1128], 0

; 2812 : 
; 2813 :         /* Initialize the TCPNJE lock */
; 2814 :         initialize_lock(&tn->lock);

  01152	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  01157	48 83 c0 60	 add	 rax, 96			; 00000060H
  0115b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160492
  01162	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160493
  01169	48 8b c8	 mov	 rcx, rax
  0116c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_lock

; 2815 : 
; 2816 :         /* Initialise thread->I/O & halt initiation EVB */
; 2817 :         initialize_condition(&tn->ipc);

  01172	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  01177	48 83 c0 50	 add	 rax, 80			; 00000050H
  0117b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160494
  01182	48 8b c8	 mov	 rcx, rax
  01185	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_condition

; 2818 :         initialize_condition(&tn->ipc_halt);

  0118b	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  01190	48 83 c0 58	 add	 rax, 88			; 00000058H
  01194	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160495
  0119b	48 8b c8	 mov	 rcx, rax
  0119e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_condition

; 2819 : 
; 2820 :         /* Allocate I/O -> Thread signaling pipe */
; 2821 :         if (create_pipe( tn->pipe ) < 0)

  011a4	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  011a9	48 05 24 01 00
	00		 add	 rax, 292		; 00000124H
  011af	4c 8b c8	 mov	 r9, rax
  011b2	45 33 c0	 xor	 r8d, r8d
  011b5	ba 01 00 00 00	 mov	 edx, 1
  011ba	b9 02 00 00 00	 mov	 ecx, 2
  011bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_socketpair
  011c5	85 c0		 test	 eax, eax
  011c7	7d 76		 jge	 SHORT $LN89@tcpnje_ini

; 2822 :         {
; 2823 :             // "Error in function %s: %s"
; 2824 :             WRMSG( HHC04000, "W", "create_pipe", strerror( errno ));

  011c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  011cf	8b 08		 mov	 ecx, DWORD PTR [rax]
  011d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  011d7	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv729[rsp], rax
  011df	b9 01 00 00 00	 mov	 ecx, 1
  011e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  011ea	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv729[rsp]
  011f2	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  011f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160497
  011fe	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01203	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160498
  0120a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0120f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160499
  01216	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0121b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01220	41 b9 03 00 00
	00		 mov	 r9d, 3
  01226	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160500
  0122d	ba 08 0b 00 00	 mov	 edx, 2824		; 00000b08H
  01232	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160501
  01239	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN89@tcpnje_ini:

; 2825 :         }
; 2826 : 
; 2827 : #if !defined(HYPERION_DEVHND_FORMAT)
; 2828 :         /* Point to the halt routine for HDV/HIO/HSCH handling */
; 2829 :         dev->halt_device = tcpnje_halt;
; 2830 : #endif /* !HYPERION_DEVHND_FORMAT */
; 2831 : 
; 2832 :         /* Obtain the TCPNJE lock */
; 2833 :         obtain_lock(&tn->lock);

  0123f	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  01244	48 83 c0 60	 add	 rax, 96			; 00000060H
  01248	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160502
  0124f	48 8b c8	 mov	 rcx, rax
  01252	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 2834 : 
; 2835 :         /* Indicate listen required if DIAL != OUT */
; 2836 :         if (tn->dialin ||

  01258	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  0125d	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  01263	c1 e8 02	 shr	 eax, 2
  01266	83 e0 01	 and	 eax, 1
  01269	85 c0		 test	 eax, eax
  0126b	75 2a		 jne	 SHORT $LN92@tcpnje_ini
  0126d	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  01272	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  01278	c1 e8 02	 shr	 eax, 2
  0127b	83 e0 01	 and	 eax, 1
  0127e	85 c0		 test	 eax, eax
  01280	75 30		 jne	 SHORT $LN90@tcpnje_ini
  01282	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  01287	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0128d	c1 e8 03	 shr	 eax, 3
  01290	83 e0 01	 and	 eax, 1
  01293	85 c0		 test	 eax, eax
  01295	75 1b		 jne	 SHORT $LN90@tcpnje_ini
$LN92@tcpnje_ini:

; 2837 :                 (!tn->dialin && !tn->dialout))
; 2838 :         {
; 2839 :             tn->dolisten = 1;

  01297	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  0129c	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  012a2	83 c8 20	 or	 eax, 32			; 00000020H
  012a5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  012aa	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 2840 :         }

  012b0	eb 19		 jmp	 SHORT $LN91@tcpnje_ini
$LN90@tcpnje_ini:

; 2841 :         else
; 2842 :         {
; 2843 :             tn->dolisten = 0;

  012b2	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  012b7	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  012bd	83 e0 df	 and	 eax, -33		; ffffffdfH
  012c0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  012c5	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax
$LN91@tcpnje_ini:

; 2844 :         }
; 2845 : 
; 2846 :         /* Start the async worker thread */
; 2847 : 
; 2848 :         /* Set thread-name for debugging purposes */
; 2849 :         MSGBUF(thread_name,

  012cb	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  012d3	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  012d7	44 8b c8	 mov	 r9d, eax
  012da	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160506
  012e1	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  012e6	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR thread_name$[rsp]
  012ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2850 :                  "tcpnje %4.4X thread", dev->devnum);
; 2851 :         thread_name[sizeof(thread_name) - 1] = 0;

  012f4	b8 01 00 00 00	 mov	 eax, 1
  012f9	48 6b c0 1f	 imul	 rax, rax, 31
  012fd	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR $T1[rsp], rax
  01305	48 83 bc 24 88
	00 00 00 20	 cmp	 QWORD PTR $T1[rsp], 32	; 00000020H
  0130e	73 02		 jae	 SHORT $LN101@tcpnje_ini
  01310	eb 05		 jmp	 SHORT $LN102@tcpnje_ini
$LN101@tcpnje_ini:
  01312	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN102@tcpnje_ini:
  01317	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR $T1[rsp]
  0131f	c6 84 04 00 01
	00 00 00	 mov	 BYTE PTR thread_name$[rsp+rax], 0

; 2852 : 
; 2853 :         tn->curpending = TCPNJE_PEND_TINIT;

  01327	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  0132c	c6 80 60 01 00
	00 08		 mov	 BYTE PTR [rax+352], 8

; 2854 :         rc = create_thread(&tn->thread, DETACHED, tcpnje_thread, tn, thread_name);

  01333	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0133a	48 05 88 10 00
	00		 add	 rax, 4232		; 00001088H
  01340	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  01345	48 83 c1 48	 add	 rcx, 72			; 00000048H
  01349	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160507
  01350	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  01355	48 8d 94 24 00
	01 00 00	 lea	 rdx, QWORD PTR thread_name$[rsp]
  0135d	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  01362	4c 8b 4c 24 50	 mov	 r9, QWORD PTR tn$[rsp]
  01367	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:tcpnje_thread
  0136e	48 8b d0	 mov	 rdx, rax
  01371	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  01377	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax

; 2855 :         if (rc)

  0137b	83 7c 24 5c 00	 cmp	 DWORD PTR rc$[rsp], 0
  01380	74 3d		 je	 SHORT $LN93@tcpnje_ini

; 2856 :         {
; 2857 :             logmsg("HHCTN022E TCPNJE - error creating communiction thread: %s\n", strerror(rc));

  01382	8b 4c 24 5c	 mov	 ecx, DWORD PTR rc$[rsp]
  01386	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0138c	48 8b d0	 mov	 rdx, rax
  0138f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160509
  01396	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg

; 2858 :             release_lock(&tn->lock);

  0139c	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  013a1	48 83 c0 60	 add	 rax, 96			; 00000060H
  013a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160510
  013ac	48 8b c8	 mov	 rcx, rax
  013af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2859 :             return -1;

  013b5	b8 ff ff ff ff	 mov	 eax, -1
  013ba	e9 c8 00 00 00	 jmp	 $LN1@tcpnje_ini
$LN93@tcpnje_ini:

; 2860 :         }
; 2861 :         tcpnje_wait(dev);

  013bf	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  013c7	e8 00 00 00 00	 call	 tcpnje_wait

; 2862 :         if (tn->curpending != TCPNJE_PEND_IDLE)

  013cc	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  013d1	0f b6 80 60 01
	00 00		 movzx	 eax, BYTE PTR [rax+352]
  013d8	85 c0		 test	 eax, eax
  013da	74 77		 je	 SHORT $LN94@tcpnje_ini

; 2863 :         {
; 2864 :             DBGMSG(1, "HHCTN019E %4.4X:TCPNJE communication thread did not initialise\n",

  013dc	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  013e1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  013e4	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  013ea	c1 e8 0f	 shr	 eax, 15
  013ed	83 e0 01	 and	 eax, 1
  013f0	85 c0		 test	 eax, eax
  013f2	74 12		 je	 SHORT $LN97@tcpnje_ini
  013f4	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  013f9	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  013ff	83 e0 01	 and	 eax, 1
  01402	85 c0		 test	 eax, eax
  01404	75 12		 jne	 SHORT $LN96@tcpnje_ini
$LN97@tcpnje_ini:
  01406	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  0140b	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01411	83 e0 01	 and	 eax, 1
  01414	85 c0		 test	 eax, eax
  01416	74 1b		 je	 SHORT $LN95@tcpnje_ini
$LN96@tcpnje_ini:
  01418	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01420	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01424	8b d0		 mov	 edx, eax
  01426	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160515
  0142d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN95@tcpnje_ini:

; 2865 :                     dev->devnum);
; 2866 :             /* Release the TCPNJE lock */
; 2867 :             release_lock(&tn->lock);

  01433	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  01438	48 83 c0 60	 add	 rax, 96			; 00000060H
  0143c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160516
  01443	48 8b c8	 mov	 rcx, rax
  01446	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2868 :             return -1;

  0144c	b8 ff ff ff ff	 mov	 eax, -1
  01451	eb 34		 jmp	 SHORT $LN1@tcpnje_ini
$LN94@tcpnje_ini:

; 2869 :         }
; 2870 :         tn->have_thread = 1;

  01453	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  01458	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0145e	83 c8 10	 or	 eax, 16
  01461	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  01466	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 2871 : 
; 2872 :         /* Release the TCPNJE lock */
; 2873 :         release_lock(&tn->lock);

  0146c	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  01471	48 83 c0 60	 add	 rax, 96			; 00000060H
  01475	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160517
  0147c	48 8b c8	 mov	 rcx, rax
  0147f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2874 :         /* Indicate succesfull completion */
; 2875 :         return 0;

  01485	33 c0		 xor	 eax, eax
$LN1@tcpnje_ini:
$LN98@tcpnje_ini:

; 2876 : }

  01487	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0148f	48 33 cc	 xor	 rcx, rsp
  01492	e8 00 00 00 00	 call	 __security_check_cookie
  01497	48 81 c4 30 01
	00 00		 add	 rsp, 304		; 00000130H
  0149e	5f		 pop	 rdi
  0149f	c3		 ret	 0
$LN103@tcpnje_ini:
  014a0	00 00 00 00	 DD	 $LN43@tcpnje_ini
  014a4	00 00 00 00	 DD	 $LN45@tcpnje_ini
  014a8	00 00 00 00	 DD	 $LN48@tcpnje_ini
  014ac	00 00 00 00	 DD	 $LN50@tcpnje_ini
  014b0	00 00 00 00	 DD	 $LN57@tcpnje_ini
  014b4	00 00 00 00	 DD	 $LN53@tcpnje_ini
  014b8	00 00 00 00	 DD	 $LN54@tcpnje_ini
  014bc	00 00 00 00	 DD	 $LN55@tcpnje_ini
  014c0	00 00 00 00	 DD	 $LN56@tcpnje_ini
  014c4	00 00 00 00	 DD	 $LN67@tcpnje_ini
  014c8	00 00 00 00	 DD	 $LN69@tcpnje_ini
  014cc	00 00 00 00	 DD	 $LN71@tcpnje_ini
  014d0	00 00 00 00	 DD	 $LN73@tcpnje_ini
  014d4	00 00 00 00	 DD	 $LN74@tcpnje_ini
  014d8	00 00 00 00	 DD	 $LN76@tcpnje_ini
  014dc	00 00 00 00	 DD	 $LN77@tcpnje_ini
tcpnje_init_handler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
tn$ = 48
kw$ = 56
msg074e	PROC

; 2360 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2361 :         DBGMSG(2, "HHCTN074E %4.4X:TCPNJE - %s has not been specified\n",

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0001c	c1 e8 0f	 shr	 eax, 15
  0001f	83 e0 01	 and	 eax, 1
  00022	85 c0		 test	 eax, eax
  00024	74 12		 je	 SHORT $LN4@msg074e
  00026	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0002b	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00031	83 e0 02	 and	 eax, 2
  00034	85 c0		 test	 eax, eax
  00036	75 12		 jne	 SHORT $LN3@msg074e
$LN4@msg074e:
  00038	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0003d	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00043	83 e0 02	 and	 eax, 2
  00046	85 c0		 test	 eax, eax
  00048	74 20		 je	 SHORT $LN2@msg074e
$LN3@msg074e:
  0004a	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0004f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00052	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00056	4c 8b 44 24 38	 mov	 r8, QWORD PTR kw$[rsp]
  0005b	8b d0		 mov	 edx, eax
  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160338
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN2@msg074e:

; 2362 :                 tn->dev->devnum, kw);
; 2363 : }

  0006a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006e	c3		 ret	 0
msg074e	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
tn$ = 48
kv$ = 56
msg073w	PROC

; 2355 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2356 :         DBGMSG(2, "HHCTN073W %4.4X:TCPNJE - DIAL/SWITCHED=%s is not currently supported by TCPNJE\n",

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0001c	c1 e8 0f	 shr	 eax, 15
  0001f	83 e0 01	 and	 eax, 1
  00022	85 c0		 test	 eax, eax
  00024	74 12		 je	 SHORT $LN4@msg073w
  00026	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0002b	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00031	83 e0 02	 and	 eax, 2
  00034	85 c0		 test	 eax, eax
  00036	75 12		 jne	 SHORT $LN3@msg073w
$LN4@msg073w:
  00038	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0003d	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00043	83 e0 02	 and	 eax, 2
  00046	85 c0		 test	 eax, eax
  00048	74 20		 je	 SHORT $LN2@msg073w
$LN3@msg073w:
  0004a	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  0004f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00052	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00056	4c 8b 44 24 38	 mov	 r8, QWORD PTR kv$[rsp]
  0005b	8b d0		 mov	 edx, eax
  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160328
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN2@msg073w:

; 2357 :                 tn->dev->devnum, kv);
; 2358 : }

  0006a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006e	c3		 ret	 0
msg073w	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
tn$ = 48
kw$ = 56
kv$ = 64
msg013e	PROC

; 2336 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2337 :         DBGMSG(2, "HHCTN013E %4.4X:TCPNJE - incorrect %s specification %s\n",

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00018	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001b	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00021	c1 e8 0f	 shr	 eax, 15
  00024	83 e0 01	 and	 eax, 1
  00027	85 c0		 test	 eax, eax
  00029	74 12		 je	 SHORT $LN4@msg013e
  0002b	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00030	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00036	83 e0 02	 and	 eax, 2
  00039	85 c0		 test	 eax, eax
  0003b	75 12		 jne	 SHORT $LN3@msg013e
$LN4@msg013e:
  0003d	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00042	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00048	83 e0 02	 and	 eax, 2
  0004b	85 c0		 test	 eax, eax
  0004d	74 25		 je	 SHORT $LN2@msg013e
$LN3@msg013e:
  0004f	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00054	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00057	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0005b	4c 8b 4c 24 40	 mov	 r9, QWORD PTR kv$[rsp]
  00060	4c 8b 44 24 38	 mov	 r8, QWORD PTR kw$[rsp]
  00065	8b d0		 mov	 edx, eax
  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160318
  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN2@msg013e:

; 2338 :                 tn->dev->devnum, kw, kv);
; 2339 : }

  00074	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00078	c3		 ret	 0
msg013e	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
tn$ = 32
dev$ = 64
tcpnje_halt PROC

; 2309 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2310 :     struct TCPNJE *tn;
; 2311 : 
; 2312 :     if (!dev->busy)

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0000e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00014	c1 e8 13	 shr	 eax, 19
  00017	83 e0 01	 and	 eax, 1
  0001a	85 c0		 test	 eax, eax
  0001c	75 02		 jne	 SHORT $LN2@tcpnje_hal

; 2313 :     {
; 2314 :         return;

  0001e	eb 71		 jmp	 SHORT $LN1@tcpnje_hal
$LN2@tcpnje_hal:

; 2315 :     }
; 2316 : 
; 2317 :     tn = (struct TCPNJE *) dev->commadpt;

  00020	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00025	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0002c	48 89 44 24 20	 mov	 QWORD PTR tn$[rsp], rax

; 2318 : 
; 2319 :     obtain_lock(&tn->lock);

  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  00036	48 83 c0 60	 add	 rax, 96			; 00000060H
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160304
  00041	48 8b c8	 mov	 rcx, rax
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 2320 :     tcpnje_wakeup(tn, 1);

  0004a	b2 01		 mov	 dl, 1
  0004c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tn$[rsp]
  00051	e8 00 00 00 00	 call	 tcpnje_wakeup

; 2321 :     /* Due to the mysteries of the host OS scheduling */
; 2322 :     /* the wait_condition may or may not exit after   */
; 2323 :     /* the CCW executor thread relinquishes control   */
; 2324 :     /* This however should not be of any concern      */
; 2325 :     /*                                                */
; 2326 :     /* but returning from the wait guarantees that    */
; 2327 :     /* the working thread will (or has) notified      */
; 2328 :     /* the CCW executor to terminate the current I/O  */
; 2329 :     wait_condition(&tn->ipc_halt, &tn->lock);

  00056	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  0005b	48 83 c0 60	 add	 rax, 96			; 00000060H
  0005f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tn$[rsp]
  00064	48 83 c1 58	 add	 rcx, 88			; 00000058H
  00068	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160305
  0006f	48 8b d0	 mov	 rdx, rax
  00072	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_wait_condition

; 2330 :     release_lock(&tn->lock);

  00078	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  0007d	48 83 c0 60	 add	 rax, 96			; 00000060H
  00081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160306
  00088	48 8b c8	 mov	 rcx, rax
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock
$LN1@tcpnje_hal:

; 2331 : }

  00091	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00095	c3		 ret	 0
tcpnje_halt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
tn$ = 48
code$ = 56
tcpnje_wakeup_and_wait PROC

; 2294 : {

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2295 :     /* No point in bothering the thread if it is not there */
; 2296 :     if (tn->have_thread)

  0000d	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00012	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00018	c1 e8 04	 shr	 eax, 4
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 31		 je	 SHORT $LN2@tcpnje_wak

; 2297 :     {
; 2298 :         tcpnje_wakeup(tn, code);

  00022	0f b6 54 24 38	 movzx	 edx, BYTE PTR code$[rsp]
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0002c	e8 00 00 00 00	 call	 tcpnje_wakeup

; 2299 :         wait_condition(&tn->ipc, &tn->lock);

  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00036	48 83 c0 60	 add	 rax, 96			; 00000060H
  0003a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tn$[rsp]
  0003f	48 83 c1 50	 add	 rcx, 80			; 00000050H
  00043	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160296
  0004a	48 8b d0	 mov	 rdx, rax
  0004d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_wait_condition
$LN2@tcpnje_wak:

; 2300 :     }
; 2301 : 
; 2302 :     return tn->have_thread;

  00053	48 8b 44 24 30	 mov	 rax, QWORD PTR tn$[rsp]
  00058	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0005e	c1 e8 04	 shr	 eax, 4
  00061	83 e0 01	 and	 eax, 1

; 2303 : }

  00064	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00068	c3		 ret	 0
tcpnje_wakeup_and_wait ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
tn$ = 32
dev$ = 64
tcpnje_wait PROC

; 2282 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2283 :     struct TCPNJE *tn;
; 2284 : 
; 2285 :     tn = (struct TCPNJE *) dev->commadpt;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0000e	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00015	48 89 44 24 20	 mov	 QWORD PTR tn$[rsp], rax

; 2286 :     wait_condition(&tn->ipc, &tn->lock);

  0001a	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  0001f	48 83 c0 60	 add	 rax, 96			; 00000060H
  00023	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tn$[rsp]
  00028	48 83 c1 50	 add	 rcx, 80			; 00000050H
  0002c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160288
  00033	48 8b d0	 mov	 rdx, rax
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_wait_condition

; 2287 : }

  0003c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00040	c3		 ret	 0
tcpnje_wait ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
tn$ = 64
devnum$ = 72
maxfd$ = 76
selectcount$ = 80
rc$ = 84
pipecom$ = 88
tempfd$ = 92
eintrcount$ = 96
tn_shutdown$ = 100
writecont$ = 104
errorcount100$ = 108
errorcount067$ = 112
tv155 = 116
TTBlength$ = 120
init_signaled$ = 124
seltv$ = 128
tv218 = 136
tv293 = 140
tv341 = 144
tv407 = 148
tv489 = 152
tv499 = 156
tv508 = 160
tv518 = 164
tv674 = 168
tv701 = 172
tv828 = 176
tv982 = 180
remlength$ = 184
tv171 = 188
tv180 = 192
tv$ = 200
tv960 = 208
tv1273 = 212
soerrsize$ = 216
soerror$ = 220
intmp$ = 224
tvcopy$ = 232
tv81 = 240
tv87 = 248
tv375 = 256
tv887 = 264
tv944 = 272
tv947 = 280
tv953 = 288
remaddr$ = 296
rfd$ = 320
wfd$ = 8528
xfd$ = 16736
rnodestring$ = 24944
lnodestring$ = 24960
__$ArrayPad$ = 24976
vtn$ = 25008
tcpnje_thread PROC

; 1416 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	b8 a8 61 00 00	 mov	 eax, 25000		; 000061a8H
  0000a	e8 00 00 00 00	 call	 __chkstk
  0000f	48 2b e0	 sub	 rsp, rax
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 84 24 90
	61 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1417 :     struct TCPNJE *tn;                 /* Work TN Control Block Pointer     */
; 1418 :     int devnum;                 /* device number copy for convenience*/
; 1419 :     int rc;                     /* return code from various rtns     */
; 1420 :     int selectcount;            /* Count of reasons select() returned*/
; 1421 :     int tempfd;                 /* FileDesc to accept connections    */
; 1422 :     int writecont;              /* Write contention active           */
; 1423 :     int soerror;                /* getsockopt SOERROR value          */
; 1424 :     int maxfd;                  /* highest FD for select             */
; 1425 :     int tn_shutdown;            /* Thread shutdown internal flag     */
; 1426 :     int init_signaled;          /* Thread initialisation signaled    */
; 1427 :     int TTBlength = 0;          /* Length of TTB in host byte order  */

  00024	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR TTBlength$[rsp], 0

; 1428 :     int eintrcount = 0;         /* Number of times EINTR occured     */

  0002c	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR eintrcount$[rsp], 0

; 1429 :     int errorcount067 = 0;      /* Number of times HHCTN067E issued  */

  00034	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR errorcount067$[rsp], 0

; 1430 :     int errorcount100 = 0;      /* Number of times HHCTN100E issued  */

  0003c	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR errorcount100$[rsp], 0

; 1431 :     struct sockaddr_in remaddr;                /* For accept()       */
; 1432 :     unsigned int remlength = sizeof(remaddr);  /* also for accept()  */

  00044	c7 84 24 b8 00
	00 00 10 00 00
	00		 mov	 DWORD PTR remlength$[rsp], 16

; 1433 :     struct      in_addr intmp;  /* To print ip address in error msgs */
; 1434 :     socklen_t   soerrsize;      /* Size for getsockopt               */
; 1435 :     struct timeval tv;          /* select timeout structure          */
; 1436 :     struct timeval tvcopy;      /* copy of select timeout structure  */
; 1437 :     struct timeval *seltv;      /* ptr to the timeout structure      */
; 1438 :     fd_set      rfd, wfd, xfd;  /* SELECT File Descriptor Sets       */
; 1439 :     BYTE        pipecom;        /* Byte read from IPC pipe           */
; 1440 :     char lnodestring[9];        /* Displayable local node name       */
; 1441 :     char rnodestring[9];        /* Displayable remote node name      */
; 1442 :     /*---------------------END OF DECLARES---------------------------*/
; 1443 : 
; 1444 :     /* fetch the TCPNJE structure */
; 1445 :     tn = (struct TCPNJE *)vtn;

  0004f	48 8b 84 24 b0
	61 00 00	 mov	 rax, QWORD PTR vtn$[rsp]
  00057	48 89 44 24 40	 mov	 QWORD PTR tn$[rsp], rax

; 1446 : 
; 1447 :     /* Obtain the TCPNJE lock */
; 1448 :     obtain_lock(&tn->lock);

  0005c	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00061	48 83 c0 60	 add	 rax, 96			; 00000060H
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159984
  0006c	48 8b c8	 mov	 rcx, rax
  0006f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 1449 : 
; 1450 :     /* get a work copy of devnum (for messages) */
; 1451 :     devnum = tn->dev->devnum;

  00075	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00081	89 44 24 48	 mov	 DWORD PTR devnum$[rsp], eax

; 1452 : 
; 1453 :     /* reset shutdown flag */
; 1454 :     tn_shutdown = 0;

  00085	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tn_shutdown$[rsp], 0

; 1455 : 
; 1456 :     init_signaled = 0;

  0008d	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR init_signaled$[rsp], 0

; 1457 : 
; 1458 :     DBGMSG(1, "HHCTN002I %4.4X:TCPNJE - networking thread "TIDPAT" started for link %s - %s\n",

  00095	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0009a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009d	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  000a3	c1 e8 0f	 shr	 eax, 15
  000a6	83 e0 01	 and	 eax, 1
  000a9	85 c0		 test	 eax, eax
  000ab	74 12		 je	 SHORT $LN16@tcpnje_thr
  000ad	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  000b2	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  000b8	83 e0 01	 and	 eax, 1
  000bb	85 c0		 test	 eax, eax
  000bd	75 12		 jne	 SHORT $LN15@tcpnje_thr
$LN16@tcpnje_thr:
  000bf	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  000c4	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  000ca	83 e0 01	 and	 eax, 1
  000cd	85 c0		 test	 eax, eax
  000cf	74 7e		 je	 SHORT $LN14@tcpnje_thr
$LN15@tcpnje_thr:
  000d1	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  000d6	48 83 c0 38	 add	 rax, 56			; 00000038H
  000da	4c 8b c0	 mov	 r8, rax
  000dd	ba 09 00 00 00	 mov	 edx, 9
  000e2	48 8d 8c 24 70
	61 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  000ea	e8 00 00 00 00	 call	 guest_to_host_string
  000ef	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv81[rsp], rax
  000f7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  000fc	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00100	4c 8b c1	 mov	 r8, rcx
  00103	ba 09 00 00 00	 mov	 edx, 9
  00108	48 8d 8c 24 80
	61 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  00110	e8 00 00 00 00	 call	 guest_to_host_string
  00115	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv87[rsp], rax
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fthread_self
  00123	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv81[rsp]
  0012b	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00130	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv87[rsp]
  00138	4c 8b c9	 mov	 r9, rcx
  0013b	44 8b c0	 mov	 r8d, eax
  0013e	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159988
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN14@tcpnje_thr:

; 1459 :             devnum, thread_id(), guest_to_host_string(lnodestring, sizeof(lnodestring), tn->lnode),
; 1460 :                                  guest_to_host_string(rnodestring, sizeof(rnodestring), tn->rnode));
; 1461 : 
; 1462 :     if (!init_signaled)

  0014f	83 7c 24 7c 00	 cmp	 DWORD PTR init_signaled$[rsp], 0
  00154	75 2d		 jne	 SHORT $LN17@tcpnje_thr

; 1463 :     {
; 1464 :         tn->curpending = TCPNJE_PEND_IDLE;

  00156	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0015b	c6 80 60 01 00
	00 00		 mov	 BYTE PTR [rax+352], 0

; 1465 :         signal_condition(&tn->ipc);

  00162	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00167	48 83 c0 50	 add	 rax, 80			; 00000050H
  0016b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159990
  00172	48 8b c8	 mov	 rcx, rax
  00175	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1466 :         init_signaled = 1;

  0017b	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR init_signaled$[rsp], 1
$LN17@tcpnje_thr:

; 1467 :     }
; 1468 : 
; 1469 :     /* The MAIN select loop */
; 1470 :     /* It will listen on the following sockets : */
; 1471 :     /* tn->lfd : The listen socket */
; 1472 :     /* tn->sfd :
; 1473 :      *         read : When a connect, read, prepare or DIAL command is in effect
; 1474 :      *        write : When a write contention occurs
; 1475 :      * tn->pipe[0] : Always
; 1476 :      *
; 1477 :      * A 3 Seconds timer is started for a read operation
; 1478 :      */
; 1479 : 
; 1480 :     writecont = 0;             /* Ensure write contention flag is not set */

  00183	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR writecont$[rsp], 0
$LN271@tcpnje_thr:
$LN270@tcpnje_thr:
$LN2@tcpnje_thr:

; 1481 : 
; 1482 :     while(!tn_shutdown)

  0018b	83 7c 24 64 00	 cmp	 DWORD PTR tn_shutdown$[rsp], 0
  00190	0f 85 ca 25 00
	00		 jne	 $LN3@tcpnje_thr

; 1483 :     {
; 1484 :         FD_ZERO(&rfd);

  00196	c7 84 24 40 01
	00 00 00 00 00
	00		 mov	 DWORD PTR rfd$[rsp], 0

; 1485 :         FD_ZERO(&wfd);

  001a1	c7 84 24 50 21
	00 00 00 00 00
	00		 mov	 DWORD PTR wfd$[rsp], 0

; 1486 :         FD_ZERO(&xfd);

  001ac	c7 84 24 60 41
	00 00 00 00 00
	00		 mov	 DWORD PTR xfd$[rsp], 0

; 1487 :         maxfd = 0;

  001b7	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR maxfd$[rsp], 0

; 1488 :         seltv = NULL;

  001bf	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR seltv$[rsp], 0

; 1489 : 
; 1490 :         DBGMSG(512, "HHCTN124D %4.4X:TCPNJE - top of loop - Operation = %s\n",

  001cb	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  001d0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001d3	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  001d9	c1 e8 0f	 shr	 eax, 15
  001dc	83 e0 01	 and	 eax, 1
  001df	85 c0		 test	 eax, eax
  001e1	74 14		 je	 SHORT $LN20@tcpnje_thr
  001e3	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  001e8	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  001ee	25 00 02 00 00	 and	 eax, 512		; 00000200H
  001f3	85 c0		 test	 eax, eax
  001f5	75 14		 jne	 SHORT $LN19@tcpnje_thr
$LN20@tcpnje_thr:
  001f7	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  001fc	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00202	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00207	85 c0		 test	 eax, eax
  00209	74 28		 je	 SHORT $LN18@tcpnje_thr
$LN19@tcpnje_thr:
  0020b	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00210	0f b6 80 60 01
	00 00		 movzx	 eax, BYTE PTR [rax+352]
  00217	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_pendccw_text
  0021e	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  00222	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  00226	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159994
  0022d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN18@tcpnje_thr:

; 1491 :                 devnum, tcpnje_pendccw_text[tn->curpending]);
; 1492 : 
; 1493 :         switch(tn->curpending)

  00233	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00238	0f b6 80 60 01
	00 00		 movzx	 eax, BYTE PTR [rax+352]
  0023f	89 44 24 74	 mov	 DWORD PTR tv155[rsp], eax
  00243	8b 44 24 74	 mov	 eax, DWORD PTR tv155[rsp]
  00247	ff c8		 dec	 eax
  00249	89 44 24 74	 mov	 DWORD PTR tv155[rsp], eax
  0024d	83 7c 24 74 09	 cmp	 DWORD PTR tv155[rsp], 9
  00252	0f 87 be 0a 00
	00		 ja	 $LN77@tcpnje_thr
  00258	48 63 44 24 74	 movsxd	 rax, DWORD PTR tv155[rsp]
  0025d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00264	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN272@tcpnje_thr[rcx+rax*4]
  0026b	48 03 c1	 add	 rax, rcx
  0026e	ff e0		 jmp	 rax
$LN21@tcpnje_thr:

; 1494 :         {
; 1495 :             case TCPNJE_PEND_SHUTDOWN:
; 1496 :                 tn_shutdown = 1;

  00270	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR tn_shutdown$[rsp], 1

; 1497 :                 break;

  00278	e9 99 0a 00 00	 jmp	 $LN4@tcpnje_thr

; 1498 :             case TCPNJE_PEND_IDLE:
; 1499 :                 break;

  0027d	e9 94 0a 00 00	 jmp	 $LN4@tcpnje_thr
$LN23@tcpnje_thr:

; 1500 :             case TCPNJE_PEND_READ:
; 1501 :                 /* Flag that we don't have a complete buffer yet */
; 1502 :                 tn->tcpinbuf.valid = 0;

  00282	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00287	c6 80 d8 00 00
	00 00		 mov	 BYTE PTR [rax+216], 0

; 1503 : 
; 1504 :                 /* If we're not connected, we're not going to get any data */
; 1505 :                 if (tn->state < TCPCONACT)

  0028e	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00293	83 b8 54 01 00
	00 03		 cmp	 DWORD PTR [rax+340], 3
  0029a	7d 2a		 jge	 SHORT $LN24@tcpnje_thr

; 1506 :                 {
; 1507 :                     tn->curpending = TCPNJE_PEND_IDLE;

  0029c	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  002a1	c6 80 60 01 00
	00 00		 mov	 BYTE PTR [rax+352], 0

; 1508 :                     signal_condition(&tn->ipc);

  002a8	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  002ad	48 83 c0 50	 add	 rax, 80			; 00000050H
  002b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160000
  002b8	48 8b c8	 mov	 rcx, rax
  002bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1509 :                 }

  002c1	e9 e4 00 00 00	 jmp	 $LN25@tcpnje_thr
$LN24@tcpnje_thr:

; 1510 :                 /* If we are connected but don't have any data, get some */
; 1511 :                 else
; 1512 :                 {
; 1513 :                     /* Be sure not to set bits for connections which are gone */
; 1514 :                     if (tn->afd >= 0)

  002c6	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  002cb	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [rax+324], 0
  002d2	7c 54		 jl	 SHORT $LN26@tcpnje_thr

; 1515 :                     {
; 1516 :                         FD_SET(tn->afd, &rfd);

  002d4	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  002dc	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  002e1	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  002e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1517 :                         maxfd = maxfd < tn->afd ? tn->afd : maxfd;

  002ed	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  002f2	8b 80 44 01 00
	00		 mov	 eax, DWORD PTR [rax+324]
  002f8	39 44 24 4c	 cmp	 DWORD PTR maxfd$[rsp], eax
  002fc	7d 14		 jge	 SHORT $LN248@tcpnje_thr
  002fe	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00303	8b 80 44 01 00
	00		 mov	 eax, DWORD PTR [rax+324]
  00309	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv171[rsp], eax
  00310	eb 0b		 jmp	 SHORT $LN249@tcpnje_thr
$LN248@tcpnje_thr:
  00312	8b 44 24 4c	 mov	 eax, DWORD PTR maxfd$[rsp]
  00316	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv171[rsp], eax
$LN249@tcpnje_thr:
  0031d	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR tv171[rsp]
  00324	89 44 24 4c	 mov	 DWORD PTR maxfd$[rsp], eax
$LN26@tcpnje_thr:

; 1518 :                     }
; 1519 :                     if (tn->sfd >= 0)

  00328	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0032d	83 b8 3c 01 00
	00 00		 cmp	 DWORD PTR [rax+316], 0
  00334	7c 54		 jl	 SHORT $LN27@tcpnje_thr

; 1520 :                     {
; 1521 :                         FD_SET(tn->sfd, &rfd);

  00336	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  0033e	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00343	8b 88 3c 01 00
	00		 mov	 ecx, DWORD PTR [rax+316]
  00349	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1522 :                         maxfd = maxfd < tn->sfd ? tn->sfd : maxfd;

  0034f	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00354	8b 80 3c 01 00
	00		 mov	 eax, DWORD PTR [rax+316]
  0035a	39 44 24 4c	 cmp	 DWORD PTR maxfd$[rsp], eax
  0035e	7d 14		 jge	 SHORT $LN250@tcpnje_thr
  00360	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00365	8b 80 3c 01 00
	00		 mov	 eax, DWORD PTR [rax+316]
  0036b	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv180[rsp], eax
  00372	eb 0b		 jmp	 SHORT $LN251@tcpnje_thr
$LN250@tcpnje_thr:
  00374	8b 44 24 4c	 mov	 eax, DWORD PTR maxfd$[rsp]
  00378	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv180[rsp], eax
$LN251@tcpnje_thr:
  0037f	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR tv180[rsp]
  00386	89 44 24 4c	 mov	 DWORD PTR maxfd$[rsp], eax
$LN27@tcpnje_thr:

; 1523 :                     }
; 1524 :                     /* Set timeout */
; 1525 :                     seltv = tcpnje_setto(&tv, tn->timeout);

  0038a	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0038f	8b 90 2c 01 00
	00		 mov	 edx, DWORD PTR [rax+300]
  00395	48 8d 8c 24 c8
	00 00 00	 lea	 rcx, QWORD PTR tv$[rsp]
  0039d	e8 00 00 00 00	 call	 tcpnje_setto
  003a2	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR seltv$[rsp], rax
$LN25@tcpnje_thr:

; 1526 :                 }
; 1527 :                 break;

  003aa	e9 67 09 00 00	 jmp	 $LN4@tcpnje_thr
$LN28@tcpnje_thr:

; 1528 :             case TCPNJE_PEND_WRITE:
; 1529 :                 rc = tcpnje_write(tn->sfd, &tn->tcpoutbuf, tn);

  003af	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  003b4	48 05 e0 00 00
	00		 add	 rax, 224		; 000000e0H
  003ba	4c 8b 44 24 40	 mov	 r8, QWORD PTR tn$[rsp]
  003bf	48 8b d0	 mov	 rdx, rax
  003c2	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  003c7	8b 88 3c 01 00
	00		 mov	 ecx, DWORD PTR [rax+316]
  003cd	e8 00 00 00 00	 call	 tcpnje_write
  003d2	89 44 24 54	 mov	 DWORD PTR rc$[rsp], eax

; 1530 :                 if (rc > 0)

  003d6	83 7c 24 54 00	 cmp	 DWORD PTR rc$[rsp], 0
  003db	7e 0a		 jle	 SHORT $LN29@tcpnje_thr

; 1531 :                 {
; 1532 :                     /* Write blocked.  Flag retry required. */
; 1533 :                     writecont = 1;

  003dd	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR writecont$[rsp], 1

; 1534 :                 }

  003e5	eb 08		 jmp	 SHORT $LN30@tcpnje_thr
$LN29@tcpnje_thr:

; 1535 :                 else
; 1536 :                 {
; 1537 :                     /* Write succeeded or error occurred */
; 1538 :                     writecont = 0;

  003e7	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR writecont$[rsp], 0
$LN30@tcpnje_thr:

; 1539 :                 }
; 1540 : 
; 1541 :                 /* Advise CCW exec to move on whether write completed or not */
; 1542 :                 tn->curpending = TCPNJE_PEND_IDLE;

  003ef	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  003f4	c6 80 60 01 00
	00 00		 mov	 BYTE PTR [rax+352], 0

; 1543 :                 signal_condition(&tn->ipc);

  003fb	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00400	48 83 c0 50	 add	 rax, 80			; 00000050H
  00404	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160006
  0040b	48 8b c8	 mov	 rcx, rax
  0040e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1544 :                 break;

  00414	e9 fd 08 00 00	 jmp	 $LN4@tcpnje_thr
$LN31@tcpnje_thr:

; 1545 :             case TCPNJE_PEND_DIAL:
; 1546 :                 if (tn->state >= TCPCONSNT)

  00419	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0041e	83 b8 54 01 00
	00 02		 cmp	 DWORD PTR [rax+340], 2
  00425	7c 2a		 jl	 SHORT $LN32@tcpnje_thr

; 1547 :                 {
; 1548 :                     tn->curpending = TCPNJE_PEND_IDLE;

  00427	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0042c	c6 80 60 01 00
	00 00		 mov	 BYTE PTR [rax+352], 0

; 1549 :                     signal_condition(&tn->ipc);

  00433	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00438	48 83 c0 50	 add	 rax, 80			; 00000050H
  0043c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160009
  00443	48 8b c8	 mov	 rcx, rax
  00446	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1550 :                     break;

  0044c	e9 c5 08 00 00	 jmp	 $LN4@tcpnje_thr
$LN32@tcpnje_thr:

; 1551 :                 }
; 1552 :                 rc = tcpnje_initiate_userdial(tn);

  00451	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  00456	e8 00 00 00 00	 call	 tcpnje_initiate_userdial
  0045b	89 44 24 54	 mov	 DWORD PTR rc$[rsp], eax

; 1553 :                 if (rc != 0 || (rc == 0 && tn->state >= TCPCONSNT))

  0045f	83 7c 24 54 00	 cmp	 DWORD PTR rc$[rsp], 0
  00464	75 15		 jne	 SHORT $LN34@tcpnje_thr
  00466	83 7c 24 54 00	 cmp	 DWORD PTR rc$[rsp], 0
  0046b	75 38		 jne	 SHORT $LN33@tcpnje_thr
  0046d	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00472	83 b8 54 01 00
	00 02		 cmp	 DWORD PTR [rax+340], 2
  00479	7c 2a		 jl	 SHORT $LN33@tcpnje_thr
$LN34@tcpnje_thr:

; 1554 :                 {
; 1555 :                     tn->curpending = TCPNJE_PEND_IDLE;

  0047b	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00480	c6 80 60 01 00
	00 00		 mov	 BYTE PTR [rax+352], 0

; 1556 :                     signal_condition(&tn->ipc);

  00487	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0048c	48 83 c0 50	 add	 rax, 80			; 00000050H
  00490	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160012
  00497	48 8b c8	 mov	 rcx, rax
  0049a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1557 :                     break;

  004a0	e9 71 08 00 00	 jmp	 $LN4@tcpnje_thr
$LN33@tcpnje_thr:

; 1558 :                 }
; 1559 :                 FD_SET(tn->sfd, &wfd);

  004a5	48 8d 94 24 50
	21 00 00	 lea	 rdx, QWORD PTR wfd$[rsp]
  004ad	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  004b2	8b 88 3c 01 00
	00		 mov	 ecx, DWORD PTR [rax+316]
  004b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1560 :                 maxfd = maxfd < tn->sfd ? tn->sfd : maxfd;

  004be	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  004c3	8b 80 3c 01 00
	00		 mov	 eax, DWORD PTR [rax+316]
  004c9	39 44 24 4c	 cmp	 DWORD PTR maxfd$[rsp], eax
  004cd	7d 14		 jge	 SHORT $LN252@tcpnje_thr
  004cf	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  004d4	8b 80 3c 01 00
	00		 mov	 eax, DWORD PTR [rax+316]
  004da	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv218[rsp], eax
  004e1	eb 0b		 jmp	 SHORT $LN253@tcpnje_thr
$LN252@tcpnje_thr:
  004e3	8b 44 24 4c	 mov	 eax, DWORD PTR maxfd$[rsp]
  004e7	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv218[rsp], eax
$LN253@tcpnje_thr:
  004ee	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv218[rsp]
  004f5	89 44 24 4c	 mov	 DWORD PTR maxfd$[rsp], eax

; 1561 : #if defined(_MSVC_)
; 1562 :                 FD_SET(tn->sfd, &xfd);

  004f9	48 8d 94 24 60
	41 00 00	 lea	 rdx, QWORD PTR xfd$[rsp]
  00501	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00506	8b 88 3c 01 00
	00		 mov	 ecx, DWORD PTR [rax+316]
  0050c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1563 : #endif /* defined(_MSVC_) */
; 1564 :                 break;

  00512	e9 ff 07 00 00	 jmp	 $LN4@tcpnje_thr
$LN35@tcpnje_thr:

; 1565 :             case TCPNJE_PEND_CONNECT:
; 1566 :                 /* If connection is not yet open, reset everything to starting values first */
; 1567 :                 if (tn->state == CLOSED)

  00517	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0051c	83 b8 54 01 00
	00 00		 cmp	 DWORD PTR [rax+340], 0
  00523	0f 85 a2 01 00
	00		 jne	 $LN36@tcpnje_thr

; 1568 :                 {
; 1569 :                     /* Initialise output buffer pointers */
; 1570 :                     tn->tcpoutbuf.outptr.address = tn->tcpoutbuf.base.address;

  00529	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0052e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  00533	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  0053a	48 89 88 f0 00
	00 00		 mov	 QWORD PTR [rax+240], rcx

; 1571 :                     tn->tcpoutbuf.inptr.address = tn->tcpoutbuf.base.address;

  00541	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00546	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  0054b	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00552	48 89 88 e8 00
	00 00		 mov	 QWORD PTR [rax+232], rcx

; 1572 :                     /* Initialise input buffer pointer */
; 1573 :                     tn->tcpinbuf.outptr.address = tn->tcpinbuf.base.address;

  00559	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0055e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  00563	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0056a	48 89 88 c8 00
	00 00		 mov	 QWORD PTR [rax+200], rcx

; 1574 :                     /* Initialise input buffer valid flag */
; 1575 :                     tn->tcpinbuf.valid = 0;

  00571	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00576	c6 80 d8 00 00
	00 00		 mov	 BYTE PTR [rax+216], 0

; 1576 :                     /* Reset the input suspended due to FCS flag */
; 1577 :                     tn->holdincoming = 0;

  0057d	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00582	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00588	0f ba f0 08	 btr	 eax, 8
  0058c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  00591	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 1578 :                     /* Reset output suspended due to write contention */
; 1579 :                     tn->holdoutgoing = 0;

  00597	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0059c	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  005a2	0f ba f0 09	 btr	 eax, 9
  005a6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  005ab	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 1580 :                     /* Reset FASTOPEN issued for stream n */
; 1581 :                     tn->fastopen = 0;

  005b1	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  005b6	c6 80 61 01 00
	00 00		 mov	 BYTE PTR [rax+353], 0

; 1582 :                     /* Reset wait-a-bit bit set flag */
; 1583 :                     tn->waitabit = 0;

  005bd	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  005c2	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  005c8	0f ba f0 07	 btr	 eax, 7
  005cc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  005d1	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 1584 :                     /* Reset the reset BCB flag */
; 1585 :                     tn->resetoutbcb = 0;

  005d7	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  005dc	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  005e2	0f ba f0 0a	 btr	 eax, 10
  005e6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  005eb	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 1586 :                     /* Reset the SYN NAK received / sent flags */
; 1587 :                     tn->synnakreceived = 0;

  005f1	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  005f6	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  005fc	0f ba f0 0b	 btr	 eax, 11
  00600	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  00605	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 1588 :                     tn->synnaksent = 0;

  0060b	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00610	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00616	0f ba f0 0c	 btr	 eax, 12
  0061a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  0061f	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 1589 :                     /* Reset the outgoing buffers not yet ACKed count */
; 1590 :                     tn->ackcount = 0;

  00625	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0062a	c7 80 08 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+264], 0

; 1591 :                     /* Reset the send signoff to RSCS flag */
; 1592 :                     tn->signoff = 0;

  00634	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00639	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0063f	0f ba f0 0e	 btr	 eax, 14
  00643	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  00648	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 1593 :                     /* Clear idle writes counter */
; 1594 :                     tn->idlewrites = 0;

  0064e	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00653	c7 80 1c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+284], 0

; 1595 :                     /* Reset data count statistics */
; 1596 :                     tn->inbuffcount = 0;

  0065d	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00662	c7 80 0c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+268], 0

; 1597 :                     tn->inbytecount = 0;

  0066c	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00671	c7 80 10 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+272], 0

; 1598 :                     tn->outbuffcount = 0;

  0067b	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00680	c7 80 14 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+276], 0

; 1599 :                     tn->outbytecount = 0;

  0068a	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0068f	c7 80 18 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+280], 0

; 1600 :                     /* Reset counts of various errors */
; 1601 :                     errorcount067 = 0;

  00699	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR errorcount067$[rsp], 0

; 1602 :                     errorcount100 = 0;

  006a1	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR errorcount100$[rsp], 0

; 1603 :                     /* Estimate buffer size to use until RSCS negotiates it */
; 1604 :                     tn->tpbufsize = tn->tcpoutbuf.size/2;

  006a9	33 d2		 xor	 edx, edx
  006ab	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  006b0	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  006b7	b9 02 00 00 00	 mov	 ecx, 2
  006bc	48 f7 f1	 div	 rcx
  006bf	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  006c4	66 89 81 5e 01
	00 00		 mov	 WORD PTR [rcx+350], ax
$LN36@tcpnje_thr:

; 1605 :                 }
; 1606 :                 /* Are we supposed to be listening for incoming connections? */
; 1607 :                 /* if this is a DIAL=OUT only line, no listen is necessary */
; 1608 :                 if (tn->dolisten && (tn->listening != 2))

  006cb	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  006d0	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  006d6	c1 e8 05	 shr	 eax, 5
  006d9	83 e0 01	 and	 eax, 1
  006dc	85 c0		 test	 eax, eax
  006de	74 3d		 je	 SHORT $LN37@tcpnje_thr
  006e0	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  006e5	0f b6 80 62 01
	00 00		 movzx	 eax, BYTE PTR [rax+354]
  006ec	83 f8 02	 cmp	 eax, 2
  006ef	74 2c		 je	 SHORT $LN37@tcpnje_thr

; 1609 :                 {
; 1610 :                     rc = tcpnje_listen(tn);

  006f1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  006f6	e8 00 00 00 00	 call	 tcpnje_listen
  006fb	89 44 24 54	 mov	 DWORD PTR rc$[rsp], eax

; 1611 : 
; 1612 :                     /* Was a shutdown signalled while we were trying to set up listening port? */
; 1613 :                     if (tn->curpending == TCPNJE_PEND_SHUTDOWN)

  006ff	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00704	0f b6 80 60 01
	00 00		 movzx	 eax, BYTE PTR [rax+352]
  0070b	83 f8 0a	 cmp	 eax, 10
  0070e	75 0d		 jne	 SHORT $LN38@tcpnje_thr

; 1614 :                     {
; 1615 :                         tn_shutdown = 1;

  00710	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR tn_shutdown$[rsp], 1

; 1616 :                         break;

  00718	e9 f9 05 00 00	 jmp	 $LN4@tcpnje_thr
$LN38@tcpnje_thr:
$LN37@tcpnje_thr:

; 1617 :                     }
; 1618 : 
; 1619 :                     /* Put up with something going wrong with the listening port for now.
; 1620 :                        If the outgoing call succeeds, it won't be needed anyway.           */
; 1621 : 
; 1622 :                 }
; 1623 :                 /* Are we already connected? */
; 1624 :                 if (tn->state >= NJEACKSNT)

  0071d	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00722	83 b8 54 01 00
	00 06		 cmp	 DWORD PTR [rax+340], 6
  00729	7c 2a		 jl	 SHORT $LN39@tcpnje_thr

; 1625 :                 {
; 1626 :                     /* This is as far as we can go without READ & WRITE */
; 1627 :                     tn->curpending = TCPNJE_PEND_IDLE;

  0072b	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00730	c6 80 60 01 00
	00 00		 mov	 BYTE PTR [rax+352], 0

; 1628 :                     signal_condition(&tn->ipc);

  00737	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0073c	48 83 c0 50	 add	 rax, 80			; 00000050H
  00740	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160018
  00747	48 8b c8	 mov	 rcx, rax
  0074a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1629 :                     break;

  00750	e9 c1 05 00 00	 jmp	 $LN4@tcpnje_thr
$LN39@tcpnje_thr:

; 1630 :                 }
; 1631 :                 /* Set a timeout in case we don't get connected */
; 1632 :                 seltv = tcpnje_setto(&tv, tn->cto);

  00755	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0075a	8b 90 38 01 00
	00		 mov	 edx, DWORD PTR [rax+312]
  00760	48 8d 8c 24 c8
	00 00 00	 lea	 rcx, QWORD PTR tv$[rsp]
  00768	e8 00 00 00 00	 call	 tcpnje_setto
  0076d	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR seltv$[rsp], rax

; 1633 :                 switch(tn->dialin + tn->dialout * 2)

  00775	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0077a	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00780	c1 e8 02	 shr	 eax, 2
  00783	83 e0 01	 and	 eax, 1
  00786	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  0078b	8b 89 64 01 00
	00		 mov	 ecx, DWORD PTR [rcx+356]
  00791	c1 e9 03	 shr	 ecx, 3
  00794	83 e1 01	 and	 ecx, 1
  00797	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  0079a	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv293[rsp], eax
  007a1	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR tv293[rsp], 0
  007a9	74 13		 je	 SHORT $LN40@tcpnje_thr
  007ab	83 bc 24 8c 00
	00 00 02	 cmp	 DWORD PTR tv293[rsp], 2
  007b3	0f 84 e3 02 00
	00		 je	 $LN62@tcpnje_thr
  007b9	e9 dc 02 00 00	 jmp	 $LN59@tcpnje_thr
$LN40@tcpnje_thr:

; 1634 :                 {
; 1635 :                     case 0: /* DIAL=NO */
; 1636 :                         /* callissued is set here when the call */
; 1637 :                         /* actually failed. But we want to time */
; 1638 :                         /* a bit for program issuing WRITES in  */
; 1639 :                         /* a tight loop                         */
; 1640 :                         if (tn->callissued)

  007be	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  007c3	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  007c9	c1 e8 0d	 shr	 eax, 13
  007cc	83 e0 01	 and	 eax, 1
  007cf	85 c0		 test	 eax, eax
  007d1	74 25		 je	 SHORT $LN41@tcpnje_thr

; 1641 :                         {
; 1642 :                             seltv = tcpnje_setto(&tv, tn->cto);

  007d3	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  007d8	8b 90 38 01 00
	00		 mov	 edx, DWORD PTR [rax+312]
  007de	48 8d 8c 24 c8
	00 00 00	 lea	 rcx, QWORD PTR tv$[rsp]
  007e6	e8 00 00 00 00	 call	 tcpnje_setto
  007eb	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR seltv$[rsp], rax

; 1643 :                             break;

  007f3	e9 c9 02 00 00	 jmp	 $LN6@tcpnje_thr
$LN41@tcpnje_thr:

; 1644 :                         }
; 1645 :                         /* Do not try to connect now if already connecting */
; 1646 :                         if (tn->state < TCPCONSNT)

  007f8	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  007fd	83 b8 54 01 00
	00 02		 cmp	 DWORD PTR [rax+340], 2
  00804	0f 8d 8e 02 00
	00		 jge	 $LN42@tcpnje_thr

; 1647 :                         {
; 1648 :                             /* Issue a Connect out */
; 1649 :                             DBGMSG(128, "HHCTN054I %4.4X:TCPNJE - making outgoing leased line connection\n",

  0080a	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0080f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00812	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00818	c1 e8 0f	 shr	 eax, 15
  0081b	83 e0 01	 and	 eax, 1
  0081e	85 c0		 test	 eax, eax
  00820	74 14		 je	 SHORT $LN45@tcpnje_thr
  00822	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00827	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0082d	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00832	85 c0		 test	 eax, eax
  00834	75 14		 jne	 SHORT $LN44@tcpnje_thr
$LN45@tcpnje_thr:
  00836	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0083b	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00841	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00846	85 c0		 test	 eax, eax
  00848	74 11		 je	 SHORT $LN43@tcpnje_thr
$LN44@tcpnje_thr:
  0084a	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  0084e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160025
  00855	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN43@tcpnje_thr:

; 1650 :                                     devnum);
; 1651 :                             rc = tcpnje_connout(tn);

  0085b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  00860	e8 00 00 00 00	 call	 tcpnje_connout
  00865	89 44 24 54	 mov	 DWORD PTR rc$[rsp], eax

; 1652 :                             if (rc == 0)

  00869	83 7c 24 54 00	 cmp	 DWORD PTR rc$[rsp], 0
  0086e	0f 85 57 01 00
	00		 jne	 $LN46@tcpnje_thr

; 1653 :                             {
; 1654 :                                 /* Call issued */
; 1655 :                                 if (tn->state == TCPCONACT)

  00874	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00879	83 b8 54 01 00
	00 03		 cmp	 DWORD PTR [rax+340], 3
  00880	75 45		 jne	 SHORT $LN48@tcpnje_thr

; 1656 :                                 {
; 1657 :                                     /* Call completed immediately.  Send TCPNJE OPEN request */
; 1658 :                                     tcpnje_ttc(tn->afd, TCPNJE_OPEN, 0, tn);

  00882	4c 8b 4c 24 40	 mov	 r9, QWORD PTR tn$[rsp]
  00887	45 33 c0	 xor	 r8d, r8d
  0088a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:TCPNJE_OPEN
  00891	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00896	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  0089c	e8 00 00 00 00	 call	 tcpnje_ttc

; 1659 :                                     tn->state = NJEOPNSNT;

  008a1	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  008a6	c7 80 54 01 00
	00 05 00 00 00	 mov	 DWORD PTR [rax+340], 5

; 1660 :                                     /* Prepare to receive incoming TCPNJE ACK */
; 1661 :                                     tn->ttcactbuf.inptr.address = tn->ttcactbuf.base.address;

  008b0	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  008b5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  008ba	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  008be	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 1662 :                                 }

  008c2	e9 ff 00 00 00	 jmp	 $LN49@tcpnje_thr
$LN48@tcpnje_thr:

; 1663 :                                 else if (tn->state == TCPCONSNT)

  008c7	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  008cc	83 b8 54 01 00
	00 02		 cmp	 DWORD PTR [rax+340], 2
  008d3	0f 85 89 00 00
	00		 jne	 $LN50@tcpnje_thr

; 1664 :                                 {
; 1665 :                                     /* Call initiated - FD will be ready */
; 1666 :                                     /* for writing when the connect ends */
; 1667 :                                     /* getsockopt/SOERROR will tell if   */
; 1668 :                                     /* the call was sucessfull or not    */
; 1669 :                                     FD_SET(tn->afd, &wfd);

  008d9	48 8d 94 24 50
	21 00 00	 lea	 rdx, QWORD PTR wfd$[rsp]
  008e1	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  008e6	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  008ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1670 : #if defined(_MSVC_)
; 1671 :                                     FD_SET(tn->afd, &xfd);

  008f2	48 8d 94 24 60
	41 00 00	 lea	 rdx, QWORD PTR xfd$[rsp]
  008fa	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  008ff	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  00905	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1672 : #endif /* defined(_MSVC_) */
; 1673 :                                     maxfd = maxfd < tn->afd ? tn->afd : maxfd;

  0090b	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00910	8b 80 44 01 00
	00		 mov	 eax, DWORD PTR [rax+324]
  00916	39 44 24 4c	 cmp	 DWORD PTR maxfd$[rsp], eax
  0091a	7d 14		 jge	 SHORT $LN254@tcpnje_thr
  0091c	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00921	8b 80 44 01 00
	00		 mov	 eax, DWORD PTR [rax+324]
  00927	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv341[rsp], eax
  0092e	eb 0b		 jmp	 SHORT $LN255@tcpnje_thr
$LN254@tcpnje_thr:
  00930	8b 44 24 4c	 mov	 eax, DWORD PTR maxfd$[rsp]
  00934	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv341[rsp], eax
$LN255@tcpnje_thr:
  0093b	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR tv341[rsp]
  00942	89 44 24 4c	 mov	 DWORD PTR maxfd$[rsp], eax

; 1674 :                                     tn->callissued = 1;

  00946	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0094b	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00951	0f ba e8 0d	 bts	 eax, 13
  00955	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  0095a	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 1675 :                                 }

  00960	eb 64		 jmp	 SHORT $LN51@tcpnje_thr
$LN50@tcpnje_thr:

; 1676 :                                 else
; 1677 :                                 {
; 1678 :                                     DBGMSG(1, "HHCTN055W %4.4X:TCPNJE - unexpected state after outgoing call: %s\n",

  00962	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00967	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0096a	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00970	c1 e8 0f	 shr	 eax, 15
  00973	83 e0 01	 and	 eax, 1
  00976	85 c0		 test	 eax, eax
  00978	74 12		 je	 SHORT $LN54@tcpnje_thr
  0097a	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0097f	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00985	83 e0 01	 and	 eax, 1
  00988	85 c0		 test	 eax, eax
  0098a	75 12		 jne	 SHORT $LN53@tcpnje_thr
$LN54@tcpnje_thr:
  0098c	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00991	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00997	83 e0 01	 and	 eax, 1
  0099a	85 c0		 test	 eax, eax
  0099c	74 28		 je	 SHORT $LN52@tcpnje_thr
$LN53@tcpnje_thr:
  0099e	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  009a3	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  009aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  009b1	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  009b5	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  009b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160035
  009c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN52@tcpnje_thr:
$LN51@tcpnje_thr:
$LN49@tcpnje_thr:

; 1679 :                                             devnum, tcpnje_state_text[tn->state]);
; 1680 :                                 }
; 1681 : 
; 1682 :                             }

  009c6	e9 cd 00 00 00	 jmp	 $LN47@tcpnje_thr
$LN46@tcpnje_thr:

; 1683 :                             /* Call did not succeed                                 */
; 1684 :                             /* Manual says : on a leased line, if DSR is not up     */
; 1685 :                             /* the terminate enable after a timeout.. That is       */
; 1686 :                             /* what the call just did (although the time out        */
; 1687 :                             /* was probably instantaneous)                          */
; 1688 :                             /* This is the equivalent of the comm equipment         */
; 1689 :                             /* being offline                                        */
; 1690 :                             /*       INITIATE A 3 SECOND TIMEOUT                    */
; 1691 :                             /* to prevent OSes from issuing a loop of WRITES       */
; 1692 :                             else
; 1693 :                             {
; 1694 :                                 if (rc != 999)

  009cb	81 7c 24 54 e7
	03 00 00	 cmp	 DWORD PTR rc$[rsp], 999	; 000003e7H
  009d3	0f 84 9f 00 00
	00		 je	 $LN55@tcpnje_thr

; 1695 :                                     DBGMSG(32, "HHCTN007W %4.4X:TCPNJE - outgoing connection for link %s - %s failed or deferred\n",

  009d9	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  009de	48 8b 00	 mov	 rax, QWORD PTR [rax]
  009e1	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  009e7	c1 e8 0f	 shr	 eax, 15
  009ea	83 e0 01	 and	 eax, 1
  009ed	85 c0		 test	 eax, eax
  009ef	74 12		 je	 SHORT $LN58@tcpnje_thr
  009f1	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  009f6	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  009fc	83 e0 20	 and	 eax, 32			; 00000020H
  009ff	85 c0		 test	 eax, eax
  00a01	75 12		 jne	 SHORT $LN57@tcpnje_thr
$LN58@tcpnje_thr:
  00a03	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00a08	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00a0e	83 e0 20	 and	 eax, 32			; 00000020H
  00a11	85 c0		 test	 eax, eax
  00a13	74 63		 je	 SHORT $LN56@tcpnje_thr
$LN57@tcpnje_thr:
  00a15	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00a1a	48 83 c0 38	 add	 rax, 56			; 00000038H
  00a1e	4c 8b c0	 mov	 r8, rax
  00a21	ba 09 00 00 00	 mov	 edx, 9
  00a26	48 8d 8c 24 70
	61 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  00a2e	e8 00 00 00 00	 call	 guest_to_host_string
  00a33	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv375[rsp], rax
  00a3b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  00a40	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00a44	4c 8b c1	 mov	 r8, rcx
  00a47	ba 09 00 00 00	 mov	 edx, 9
  00a4c	48 8d 8c 24 80
	61 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  00a54	e8 00 00 00 00	 call	 guest_to_host_string
  00a59	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv375[rsp]
  00a61	4c 8b c9	 mov	 r9, rcx
  00a64	4c 8b c0	 mov	 r8, rax
  00a67	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  00a6b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160040
  00a72	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN56@tcpnje_thr:
$LN55@tcpnje_thr:

; 1696 :                                             devnum, guest_to_host_string(lnodestring, sizeof(lnodestring), tn->lnode),
; 1697 :                                                     guest_to_host_string(rnodestring, sizeof(rnodestring), tn->rnode));
; 1698 :                                 seltv = tcpnje_setto(&tv, tn->cto);

  00a78	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00a7d	8b 90 38 01 00
	00		 mov	 edx, DWORD PTR [rax+312]
  00a83	48 8d 8c 24 c8
	00 00 00	 lea	 rcx, QWORD PTR tv$[rsp]
  00a8b	e8 00 00 00 00	 call	 tcpnje_setto
  00a90	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR seltv$[rsp], rax
$LN47@tcpnje_thr:
$LN42@tcpnje_thr:

; 1699 :                             }
; 1700 :                         }
; 1701 :                         break;

  00a98	eb 27		 jmp	 SHORT $LN6@tcpnje_thr
$LN59@tcpnje_thr:

; 1702 :                     default:
; 1703 :                     case 3: /* DIAL=INOUT */
; 1704 :                     case 1: /* DIAL=IN */
; 1705 :                         /* Wait forever */
; 1706 :                         break;

  00a9a	eb 25		 jmp	 SHORT $LN6@tcpnje_thr
$LN62@tcpnje_thr:

; 1707 :                     case 2: /* DIAL=OUT */
; 1708 :                         /* Makes no sense                               */
; 1709 :                         /* line must be enabled through a DIAL command  */
; 1710 : 
; 1711 :                         /* Signal connect has completed */
; 1712 :                         tn->curpending = TCPNJE_PEND_IDLE;

  00a9c	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00aa1	c6 80 60 01 00
	00 00		 mov	 BYTE PTR [rax+352], 0

; 1713 :                         signal_condition(&tn->ipc);

  00aa8	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00aad	48 83 c0 50	 add	 rax, 80			; 00000050H
  00ab1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160045
  00ab8	48 8b c8	 mov	 rcx, rax
  00abb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition
$LN6@tcpnje_thr:

; 1714 :                         break;
; 1715 :                 /* For cases not DIAL=OUT, the listen is already started */
; 1716 :                 }
; 1717 : 
; 1718 :                 /* If we are waiting on TCPNJE ACK. tell select()*/
; 1719 :                 if (tn->state == NJEOPNSNT)

  00ac1	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00ac6	83 b8 54 01 00
	00 05		 cmp	 DWORD PTR [rax+340], 5
  00acd	75 54		 jne	 SHORT $LN63@tcpnje_thr

; 1720 :                 {
; 1721 :                     FD_SET(tn->afd, &rfd);

  00acf	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  00ad7	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00adc	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  00ae2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1722 :                     maxfd = maxfd < tn->afd ? tn->afd : maxfd;

  00ae8	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00aed	8b 80 44 01 00
	00		 mov	 eax, DWORD PTR [rax+324]
  00af3	39 44 24 4c	 cmp	 DWORD PTR maxfd$[rsp], eax
  00af7	7d 14		 jge	 SHORT $LN256@tcpnje_thr
  00af9	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00afe	8b 80 44 01 00
	00		 mov	 eax, DWORD PTR [rax+324]
  00b04	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv407[rsp], eax
  00b0b	eb 0b		 jmp	 SHORT $LN257@tcpnje_thr
$LN256@tcpnje_thr:
  00b0d	8b 44 24 4c	 mov	 eax, DWORD PTR maxfd$[rsp]
  00b11	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv407[rsp], eax
$LN257@tcpnje_thr:
  00b18	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR tv407[rsp]
  00b1f	89 44 24 4c	 mov	 DWORD PTR maxfd$[rsp], eax
$LN63@tcpnje_thr:

; 1723 :                 }
; 1724 :                 break;

  00b23	e9 ee 01 00 00	 jmp	 $LN4@tcpnje_thr
$LN64@tcpnje_thr:

; 1725 : 
; 1726 :                 /* The CCW Executor says : DISABLE */
; 1727 :             case TCPNJE_PEND_DISABLE:
; 1728 :                 if (tn->listening > 1)

  00b28	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00b2d	0f b6 80 62 01
	00 00		 movzx	 eax, BYTE PTR [rax+354]
  00b34	83 f8 01	 cmp	 eax, 1
  00b37	7e 71		 jle	 SHORT $LN65@tcpnje_thr

; 1729 :                 {
; 1730 :                     DBGMSG(128, "HHCTN056I %4.4X:TCPNJE - closing listening socket due to DISABLE\n",

  00b39	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00b3e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00b41	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00b47	c1 e8 0f	 shr	 eax, 15
  00b4a	83 e0 01	 and	 eax, 1
  00b4d	85 c0		 test	 eax, eax
  00b4f	74 14		 je	 SHORT $LN68@tcpnje_thr
  00b51	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00b56	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00b5c	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00b61	85 c0		 test	 eax, eax
  00b63	75 14		 jne	 SHORT $LN67@tcpnje_thr
$LN68@tcpnje_thr:
  00b65	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00b6a	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00b70	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00b75	85 c0		 test	 eax, eax
  00b77	74 11		 je	 SHORT $LN66@tcpnje_thr
$LN67@tcpnje_thr:
  00b79	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  00b7d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160052
  00b84	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN66@tcpnje_thr:

; 1731 :                             devnum);
; 1732 :                     close_socket(tn->lfd);

  00b8a	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00b8f	8b 88 40 01 00
	00		 mov	 ecx, DWORD PTR [rax+320]
  00b95	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1733 :                     tn->lfd = -1;

  00b9b	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00ba0	c7 80 40 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+320], -1
$LN65@tcpnje_thr:

; 1734 :                 }
; 1735 :                 tn->listening = 0;

  00baa	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00baf	c6 80 62 01 00
	00 00		 mov	 BYTE PTR [rax+354], 0

; 1736 : 
; 1737 :                 if (tn->state >= TCPCONSNT)

  00bb6	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00bbb	83 b8 54 01 00
	00 02		 cmp	 DWORD PTR [rax+340], 2
  00bc2	0f 8c b1 00 00
	00		 jl	 $LN69@tcpnje_thr

; 1738 :                 {
; 1739 :                     DBGMSG(128, "HHCTN057I %4.4X:TCPNJE - closing connection socket due to DISABLE\n",

  00bc8	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00bcd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00bd0	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00bd6	c1 e8 0f	 shr	 eax, 15
  00bd9	83 e0 01	 and	 eax, 1
  00bdc	85 c0		 test	 eax, eax
  00bde	74 14		 je	 SHORT $LN72@tcpnje_thr
  00be0	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00be5	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00beb	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00bf0	85 c0		 test	 eax, eax
  00bf2	75 14		 jne	 SHORT $LN71@tcpnje_thr
$LN72@tcpnje_thr:
  00bf4	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00bf9	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00bff	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00c04	85 c0		 test	 eax, eax
  00c06	74 11		 je	 SHORT $LN70@tcpnje_thr
$LN71@tcpnje_thr:
  00c08	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  00c0c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160057
  00c13	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN70@tcpnje_thr:

; 1740 :                             devnum);
; 1741 :                     close_socket(tn->pfd);

  00c19	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00c1e	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  00c24	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1742 :                     tn->pfd = -1;

  00c2a	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00c2f	c7 80 48 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+328], -1

; 1743 :                     close_socket(tn->afd);

  00c39	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00c3e	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  00c44	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1744 :                     tn->afd = -1;

  00c4a	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00c4f	c7 80 44 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+324], -1

; 1745 :                     close_socket(tn->sfd);

  00c59	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00c5e	8b 88 3c 01 00
	00		 mov	 ecx, DWORD PTR [rax+316]
  00c64	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1746 :                     tn->sfd = -1;

  00c6a	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00c6f	c7 80 3c 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+316], -1
$LN69@tcpnje_thr:

; 1747 :                 }
; 1748 :                 tn->state = CLOSED;

  00c79	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00c7e	c7 80 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+340], 0

; 1749 :                 tn->curpending = TCPNJE_PEND_IDLE;

  00c88	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00c8d	c6 80 60 01 00
	00 00		 mov	 BYTE PTR [rax+352], 0

; 1750 :                 signal_condition(&tn->ipc);

  00c94	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00c99	48 83 c0 50	 add	 rax, 80			; 00000050H
  00c9d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160058
  00ca4	48 8b c8	 mov	 rcx, rax
  00ca7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1751 :                 break;

  00cad	eb 67		 jmp	 SHORT $LN4@tcpnje_thr
$LN73@tcpnje_thr:

; 1752 : 
; 1753 :                 /* A PREPARE has been issued */
; 1754 :             case TCPNJE_PEND_PREPARE:
; 1755 :                 if ((tn->state < TCPCONACT) || tn->tcpinbuf.valid)

  00caf	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00cb4	83 b8 54 01 00
	00 03		 cmp	 DWORD PTR [rax+340], 3
  00cbb	7c 10		 jl	 SHORT $LN75@tcpnje_thr
  00cbd	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00cc2	0f b6 80 d8 00
	00 00		 movzx	 eax, BYTE PTR [rax+216]
  00cc9	85 c0		 test	 eax, eax
  00ccb	74 27		 je	 SHORT $LN74@tcpnje_thr
$LN75@tcpnje_thr:

; 1756 :                 {
; 1757 :                     tn->curpending = TCPNJE_PEND_IDLE;

  00ccd	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00cd2	c6 80 60 01 00
	00 00		 mov	 BYTE PTR [rax+352], 0

; 1758 :                     signal_condition(&tn->ipc);

  00cd9	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00cde	48 83 c0 50	 add	 rax, 80			; 00000050H
  00ce2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160062
  00ce9	48 8b c8	 mov	 rcx, rax
  00cec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1759 :                     break;

  00cf2	eb 22		 jmp	 SHORT $LN4@tcpnje_thr
$LN74@tcpnje_thr:

; 1760 :                 }
; 1761 :                 break;

  00cf4	eb 20		 jmp	 SHORT $LN4@tcpnje_thr
$LN76@tcpnje_thr:

; 1762 :                 /* RSCS has sent out an FCS with the wait-a-bit bit set */
; 1763 :             case TCPNJE_PEND_WAIT:
; 1764 :                 /* Set time out */
; 1765 :                 seltv = tcpnje_setto(&tv, tn->rto);

  00cf6	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00cfb	8b 90 34 01 00
	00		 mov	 edx, DWORD PTR [rax+308]
  00d01	48 8d 8c 24 c8
	00 00 00	 lea	 rcx, QWORD PTR tv$[rsp]
  00d09	e8 00 00 00 00	 call	 tcpnje_setto
  00d0e	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR seltv$[rsp], rax
$LN77@tcpnje_thr:
$LN4@tcpnje_thr:

; 1766 :                 break;
; 1767 :                 /* Don't know - shouldn't be here anyway */
; 1768 :             default:
; 1769 :                 break;
; 1770 :         }
; 1771 : 
; 1772 :         /* If TCPNJE is shutting down, exit the loop now */
; 1773 :         if (tn_shutdown)

  00d16	83 7c 24 64 00	 cmp	 DWORD PTR tn_shutdown$[rsp], 0
  00d1b	74 2a		 je	 SHORT $LN78@tcpnje_thr

; 1774 :         {
; 1775 :             tn->curpending = TCPNJE_PEND_IDLE;

  00d1d	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00d22	c6 80 60 01 00
	00 00		 mov	 BYTE PTR [rax+352], 0

; 1776 :             signal_condition(&tn->ipc);

  00d29	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00d2e	48 83 c0 50	 add	 rax, 80			; 00000050H
  00d32	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160066
  00d39	48 8b c8	 mov	 rcx, rax
  00d3c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1777 :             break;

  00d42	e9 19 1a 00 00	 jmp	 $LN3@tcpnje_thr
$LN78@tcpnje_thr:

; 1778 :         }
; 1779 : 
; 1780 :         /* Set the IPC pipe in the select() */
; 1781 :         FD_SET(tn->pipe[0], &rfd);

  00d47	b8 04 00 00 00	 mov	 eax, 4
  00d4c	48 6b c0 00	 imul	 rax, rax, 0
  00d50	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  00d58	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  00d5d	8b 8c 01 24 01
	00 00		 mov	 ecx, DWORD PTR [rcx+rax+292]
  00d64	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1782 :         maxfd = maxfd < tn->pipe[0] ? tn->pipe[0] : maxfd;

  00d6a	b8 04 00 00 00	 mov	 eax, 4
  00d6f	48 6b c0 00	 imul	 rax, rax, 0
  00d73	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  00d78	8b 84 01 24 01
	00 00		 mov	 eax, DWORD PTR [rcx+rax+292]
  00d7f	39 44 24 4c	 cmp	 DWORD PTR maxfd$[rsp], eax
  00d83	7d 1e		 jge	 SHORT $LN258@tcpnje_thr
  00d85	b8 04 00 00 00	 mov	 eax, 4
  00d8a	48 6b c0 00	 imul	 rax, rax, 0
  00d8e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  00d93	8b 84 01 24 01
	00 00		 mov	 eax, DWORD PTR [rcx+rax+292]
  00d9a	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv489[rsp], eax
  00da1	eb 0b		 jmp	 SHORT $LN259@tcpnje_thr
$LN258@tcpnje_thr:
  00da3	8b 44 24 4c	 mov	 eax, DWORD PTR maxfd$[rsp]
  00da7	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv489[rsp], eax
$LN259@tcpnje_thr:
  00dae	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv489[rsp]
  00db5	89 44 24 4c	 mov	 DWORD PTR maxfd$[rsp], eax

; 1783 : 
; 1784 :         /* If we are actually listening for connections, tell select() */
; 1785 :         if (tn->listening > 1)

  00db9	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00dbe	0f b6 80 62 01
	00 00		 movzx	 eax, BYTE PTR [rax+354]
  00dc5	83 f8 01	 cmp	 eax, 1
  00dc8	0f 8e b6 00 00
	00		 jle	 $LN79@tcpnje_thr

; 1786 :         {
; 1787 :             FD_SET(tn->lfd, &rfd);

  00dce	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  00dd6	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00ddb	8b 88 40 01 00
	00		 mov	 ecx, DWORD PTR [rax+320]
  00de1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1788 :             maxfd = maxfd < tn->lfd ? tn->lfd : maxfd;

  00de7	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00dec	8b 80 40 01 00
	00		 mov	 eax, DWORD PTR [rax+320]
  00df2	39 44 24 4c	 cmp	 DWORD PTR maxfd$[rsp], eax
  00df6	7d 14		 jge	 SHORT $LN260@tcpnje_thr
  00df8	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00dfd	8b 80 40 01 00
	00		 mov	 eax, DWORD PTR [rax+320]
  00e03	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv499[rsp], eax
  00e0a	eb 0b		 jmp	 SHORT $LN261@tcpnje_thr
$LN260@tcpnje_thr:
  00e0c	8b 44 24 4c	 mov	 eax, DWORD PTR maxfd$[rsp]
  00e10	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv499[rsp], eax
$LN261@tcpnje_thr:
  00e17	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR tv499[rsp]
  00e1e	89 44 24 4c	 mov	 DWORD PTR maxfd$[rsp], eax

; 1789 : 
; 1790 :             /* A TCPNJE OPEN might arrive any time an incoming connection is active. Tell select() */
; 1791 :             if (tn->pfd >= 0)

  00e22	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00e27	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [rax+328], 0
  00e2e	7c 54		 jl	 SHORT $LN80@tcpnje_thr

; 1792 :             {
; 1793 :                 FD_SET(tn->pfd, &rfd);

  00e30	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  00e38	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00e3d	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  00e43	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1794 :                 maxfd = maxfd < tn->pfd ? tn->pfd : maxfd;

  00e49	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00e4e	8b 80 48 01 00
	00		 mov	 eax, DWORD PTR [rax+328]
  00e54	39 44 24 4c	 cmp	 DWORD PTR maxfd$[rsp], eax
  00e58	7d 14		 jge	 SHORT $LN262@tcpnje_thr
  00e5a	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00e5f	8b 80 48 01 00
	00		 mov	 eax, DWORD PTR [rax+328]
  00e65	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv508[rsp], eax
  00e6c	eb 0b		 jmp	 SHORT $LN263@tcpnje_thr
$LN262@tcpnje_thr:
  00e6e	8b 44 24 4c	 mov	 eax, DWORD PTR maxfd$[rsp]
  00e72	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv508[rsp], eax
$LN263@tcpnje_thr:
  00e79	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv508[rsp]
  00e80	89 44 24 4c	 mov	 DWORD PTR maxfd$[rsp], eax
$LN80@tcpnje_thr:
$LN79@tcpnje_thr:

; 1795 :             }
; 1796 :         }
; 1797 : 
; 1798 :         /* If we are waiting for a write contention to clear, tell select() to watch for it. */
; 1799 :         if (writecont && tn->sfd >= 0)

  00e84	83 7c 24 68 00	 cmp	 DWORD PTR writecont$[rsp], 0
  00e89	74 62		 je	 SHORT $LN81@tcpnje_thr
  00e8b	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00e90	83 b8 3c 01 00
	00 00		 cmp	 DWORD PTR [rax+316], 0
  00e97	7c 54		 jl	 SHORT $LN81@tcpnje_thr

; 1800 :         {
; 1801 :             FD_SET(tn->sfd, &wfd);

  00e99	48 8d 94 24 50
	21 00 00	 lea	 rdx, QWORD PTR wfd$[rsp]
  00ea1	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00ea6	8b 88 3c 01 00
	00		 mov	 ecx, DWORD PTR [rax+316]
  00eac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1802 :             maxfd = maxfd < tn->sfd ? tn->sfd : maxfd;

  00eb2	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00eb7	8b 80 3c 01 00
	00		 mov	 eax, DWORD PTR [rax+316]
  00ebd	39 44 24 4c	 cmp	 DWORD PTR maxfd$[rsp], eax
  00ec1	7d 14		 jge	 SHORT $LN264@tcpnje_thr
  00ec3	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00ec8	8b 80 3c 01 00
	00		 mov	 eax, DWORD PTR [rax+316]
  00ece	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv518[rsp], eax
  00ed5	eb 0b		 jmp	 SHORT $LN265@tcpnje_thr
$LN264@tcpnje_thr:
  00ed7	8b 44 24 4c	 mov	 eax, DWORD PTR maxfd$[rsp]
  00edb	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv518[rsp], eax
$LN265@tcpnje_thr:
  00ee2	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR tv518[rsp]
  00ee9	89 44 24 4c	 mov	 DWORD PTR maxfd$[rsp], eax
$LN81@tcpnje_thr:

; 1803 :         }
; 1804 : 
; 1805 :         /* The the MAX File Desc for Arg 1 of SELECT */
; 1806 :         maxfd++;

  00eed	8b 44 24 4c	 mov	 eax, DWORD PTR maxfd$[rsp]
  00ef1	ff c0		 inc	 eax
  00ef3	89 44 24 4c	 mov	 DWORD PTR maxfd$[rsp], eax

; 1807 : 
; 1808 :         DBGMSG(512, "HHCTN125D %4.4X:TCPNJE - Entering select(). Operation: %s\n",

  00ef7	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00efc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00eff	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00f05	c1 e8 0f	 shr	 eax, 15
  00f08	83 e0 01	 and	 eax, 1
  00f0b	85 c0		 test	 eax, eax
  00f0d	74 14		 je	 SHORT $LN84@tcpnje_thr
  00f0f	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00f14	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00f1a	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00f1f	85 c0		 test	 eax, eax
  00f21	75 14		 jne	 SHORT $LN83@tcpnje_thr
$LN84@tcpnje_thr:
  00f23	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00f28	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00f2e	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00f33	85 c0		 test	 eax, eax
  00f35	74 28		 je	 SHORT $LN82@tcpnje_thr
$LN83@tcpnje_thr:
  00f37	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00f3c	0f b6 80 60 01
	00 00		 movzx	 eax, BYTE PTR [rax+352]
  00f43	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_pendccw_text
  00f4a	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  00f4e	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  00f52	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160073
  00f59	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN82@tcpnje_thr:

; 1809 :                 devnum, tcpnje_pendccw_text[tn->curpending]);
; 1810 : 
; 1811 :         /* Release the TN Lock before the select - all FDs addressed by the select are only */
; 1812 :         /* handled by the thread, and communication from CCW Executor/others to this thread */
; 1813 :         /* is via the pipe, which queues the info                                           */
; 1814 :         release_lock(&tn->lock);

  00f5f	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00f64	48 83 c0 60	 add	 rax, 96			; 00000060H
  00f68	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160074
  00f6f	48 8b c8	 mov	 rcx, rax
  00f72	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 1815 : 
; 1816 :         /* Linux may mangle the timeout value so grab a copy for when we need it later */
; 1817 :         tvcopy = tv;

  00f78	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR tv$[rsp]
  00f80	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tvcopy$[rsp], rax

; 1818 : 
; 1819 :         selectcount = select(maxfd, &rfd, &wfd, &xfd, seltv);

  00f88	c7 44 24 30 1b
	07 00 00	 mov	 DWORD PTR [rsp+48], 1819 ; 0000071bH
  00f90	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160075
  00f97	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00f9c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR seltv$[rsp]
  00fa4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00fa9	4c 8d 8c 24 60
	41 00 00	 lea	 r9, QWORD PTR xfd$[rsp]
  00fb1	4c 8d 84 24 50
	21 00 00	 lea	 r8, QWORD PTR wfd$[rsp]
  00fb9	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  00fc1	8b 4c 24 4c	 mov	 ecx, DWORD PTR maxfd$[rsp]
  00fc5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_select
  00fcb	89 44 24 50	 mov	 DWORD PTR selectcount$[rsp], eax

; 1820 : 
; 1821 :         /* Get the TCPNJE lock back */
; 1822 :         obtain_lock(&tn->lock);

  00fcf	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00fd4	48 83 c0 60	 add	 rax, 96			; 00000060H
  00fd8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160076
  00fdf	48 8b c8	 mov	 rcx, rax
  00fe2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 1823 : 
; 1824 :         DBGMSG(512, "HHCTN126D %4.4X:TCPNJE - select() returned %d\n",

  00fe8	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  00fed	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00ff0	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00ff6	c1 e8 0f	 shr	 eax, 15
  00ff9	83 e0 01	 and	 eax, 1
  00ffc	85 c0		 test	 eax, eax
  00ffe	74 14		 je	 SHORT $LN87@tcpnje_thr
  01000	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01005	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0100b	25 00 02 00 00	 and	 eax, 512		; 00000200H
  01010	85 c0		 test	 eax, eax
  01012	75 14		 jne	 SHORT $LN86@tcpnje_thr
$LN87@tcpnje_thr:
  01014	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01019	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0101f	25 00 02 00 00	 and	 eax, 512		; 00000200H
  01024	85 c0		 test	 eax, eax
  01026	74 16		 je	 SHORT $LN85@tcpnje_thr
$LN86@tcpnje_thr:
  01028	44 8b 44 24 50	 mov	 r8d, DWORD PTR selectcount$[rsp]
  0102d	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  01031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160080
  01038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN85@tcpnje_thr:

; 1825 :                 devnum, selectcount);
; 1826 : 
; 1827 :         if (selectcount == -1)

  0103e	83 7c 24 50 ff	 cmp	 DWORD PTR selectcount$[rsp], -1
  01043	0f 85 e1 00 00
	00		 jne	 $LN88@tcpnje_thr

; 1828 :         {
; 1829 :             if (errno == EINTR)

  01049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0104f	83 38 04	 cmp	 DWORD PTR [rax], 4
  01052	75 73		 jne	 SHORT $LN89@tcpnje_thr

; 1830 :             {
; 1831 :                 eintrcount++;

  01054	8b 44 24 60	 mov	 eax, DWORD PTR eintrcount$[rsp]
  01058	ff c0		 inc	 eax
  0105a	89 44 24 60	 mov	 DWORD PTR eintrcount$[rsp], eax

; 1832 :                 if ((eintrcount % 1000) == 0)

  0105e	8b 44 24 60	 mov	 eax, DWORD PTR eintrcount$[rsp]
  01062	99		 cdq
  01063	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  01068	f7 f9		 idiv	 ecx
  0106a	8b c2		 mov	 eax, edx
  0106c	85 c0		 test	 eax, eax
  0106e	75 52		 jne	 SHORT $LN90@tcpnje_thr

; 1833 :                 {
; 1834 :                     DBGMSG(1, "HHCTN058W %4.4X:TCPNJE - select() unexpectedly interrupted %d times in a row\n",

  01070	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01075	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01078	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0107e	c1 e8 0f	 shr	 eax, 15
  01081	83 e0 01	 and	 eax, 1
  01084	85 c0		 test	 eax, eax
  01086	74 12		 je	 SHORT $LN93@tcpnje_thr
  01088	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0108d	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01093	83 e0 01	 and	 eax, 1
  01096	85 c0		 test	 eax, eax
  01098	75 12		 jne	 SHORT $LN92@tcpnje_thr
$LN93@tcpnje_thr:
  0109a	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0109f	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  010a5	83 e0 01	 and	 eax, 1
  010a8	85 c0		 test	 eax, eax
  010aa	74 16		 je	 SHORT $LN91@tcpnje_thr
$LN92@tcpnje_thr:
  010ac	44 8b 44 24 60	 mov	 r8d, DWORD PTR eintrcount$[rsp]
  010b1	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  010b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160087
  010bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN91@tcpnje_thr:
$LN90@tcpnje_thr:

; 1835 :                               devnum, eintrcount);
; 1836 :                 }
; 1837 :                 continue;

  010c2	e9 c4 f0 ff ff	 jmp	 $LN2@tcpnje_thr
$LN89@tcpnje_thr:

; 1838 :             }
; 1839 :             DBGMSG(1, "HHCTN006E %4.4X:TCPNJE - select() error : %s\n", devnum, strerror(HSO_errno));

  010c7	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  010cc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  010cf	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  010d5	c1 e8 0f	 shr	 eax, 15
  010d8	83 e0 01	 and	 eax, 1
  010db	85 c0		 test	 eax, eax
  010dd	74 12		 je	 SHORT $LN96@tcpnje_thr
  010df	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  010e4	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  010ea	83 e0 01	 and	 eax, 1
  010ed	85 c0		 test	 eax, eax
  010ef	75 12		 jne	 SHORT $LN95@tcpnje_thr
$LN96@tcpnje_thr:
  010f1	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  010f6	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  010fc	83 e0 01	 and	 eax, 1
  010ff	85 c0		 test	 eax, eax
  01101	74 22		 je	 SHORT $LN94@tcpnje_thr
$LN95@tcpnje_thr:
  01103	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  01109	8b c8		 mov	 ecx, eax
  0110b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  01111	4c 8b c0	 mov	 r8, rax
  01114	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  01118	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160091
  0111f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN94@tcpnje_thr:

; 1840 :             break;

  01125	e9 36 16 00 00	 jmp	 $LN3@tcpnje_thr
$LN88@tcpnje_thr:

; 1841 :         }
; 1842 :         eintrcount = 0;

  0112a	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR eintrcount$[rsp], 0

; 1843 : 
; 1844 :         /* Select timed out */
; 1845 :         if (selectcount == 0)

  01132	83 7c 24 50 00	 cmp	 DWORD PTR selectcount$[rsp], 0
  01137	0f 85 a5 00 00
	00		 jne	 $LN97@tcpnje_thr

; 1846 :         {
; 1847 :             DBGMSG(512, "HHCTN127D %4.4X:TCPNJE - select() timeout after %ld seconds %ld microseconds\n",

  0113d	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01142	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01145	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0114b	c1 e8 0f	 shr	 eax, 15
  0114e	83 e0 01	 and	 eax, 1
  01151	85 c0		 test	 eax, eax
  01153	74 14		 je	 SHORT $LN100@tcpnje_thr
  01155	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0115a	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01160	25 00 02 00 00	 and	 eax, 512		; 00000200H
  01165	85 c0		 test	 eax, eax
  01167	75 14		 jne	 SHORT $LN99@tcpnje_thr
$LN100@tcpnje_thr:
  01169	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0116e	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01174	25 00 02 00 00	 and	 eax, 512		; 00000200H
  01179	85 c0		 test	 eax, eax
  0117b	74 21		 je	 SHORT $LN98@tcpnje_thr
$LN99@tcpnje_thr:
  0117d	44 8b 8c 24 ec
	00 00 00	 mov	 r9d, DWORD PTR tvcopy$[rsp+4]
  01185	44 8b 84 24 e8
	00 00 00	 mov	 r8d, DWORD PTR tvcopy$[rsp]
  0118d	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  01191	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160096
  01198	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN98@tcpnje_thr:

; 1848 :                         devnum, tvcopy.tv_sec, tvcopy.tv_usec);
; 1849 : 
; 1850 :             /* Reset Call issued flag */
; 1851 :             tn->callissued = 0;

  0119e	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  011a3	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  011a9	0f ba f0 0d	 btr	 eax, 13
  011ad	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  011b2	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 1852 : 
; 1853 :             /* timeout condition */
; 1854 :             signal_condition(&tn->ipc);

  011b8	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  011bd	48 83 c0 50	 add	 rax, 80			; 00000050H
  011c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160097
  011c8	48 8b c8	 mov	 rcx, rax
  011cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1855 :             tn->curpending = TCPNJE_PEND_IDLE;

  011d1	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  011d6	c6 80 60 01 00
	00 00		 mov	 BYTE PTR [rax+352], 0

; 1856 : 
; 1857 :             /* If nothing else triggered select() to return, there is not much point in checking anything else now */
; 1858 :             continue;

  011dd	e9 a9 ef ff ff	 jmp	 $LN270@tcpnje_thr
$LN97@tcpnje_thr:

; 1859 :         }
; 1860 : 
; 1861 :         if (selectcount && FD_ISSET(tn->pipe[0], &rfd))

  011e2	83 7c 24 50 00	 cmp	 DWORD PTR selectcount$[rsp], 0
  011e7	0f 84 fe 02 00
	00		 je	 $LN101@tcpnje_thr
  011ed	b8 04 00 00 00	 mov	 eax, 4
  011f2	48 6b c0 00	 imul	 rax, rax, 0
  011f6	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  011fe	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  01203	8b 8c 01 24 01
	00 00		 mov	 ecx, DWORD PTR [rcx+rax+292]
  0120a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  01210	85 c0		 test	 eax, eax
  01212	0f 84 d3 02 00
	00		 je	 $LN101@tcpnje_thr

; 1862 :         {
; 1863 :             /* One of the causes of select() returning accounted for */
; 1864 :             selectcount--;

  01218	8b 44 24 50	 mov	 eax, DWORD PTR selectcount$[rsp]
  0121c	ff c8		 dec	 eax
  0121e	89 44 24 50	 mov	 DWORD PTR selectcount$[rsp], eax

; 1865 : 
; 1866 :             rc = read_pipe(tn->pipe[0], &pipecom, 1);

  01222	b8 04 00 00 00	 mov	 eax, 4
  01227	48 6b c0 00	 imul	 rax, rax, 0
  0122b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  01230	48 63 84 01 24
	01 00 00	 movsxd	 rax, DWORD PTR [rcx+rax+292]
  01238	45 33 c9	 xor	 r9d, r9d
  0123b	41 b8 01 00 00
	00		 mov	 r8d, 1
  01241	48 8d 54 24 58	 lea	 rdx, QWORD PTR pipecom$[rsp]
  01246	48 8b c8	 mov	 rcx, rax
  01249	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_recv
  0124f	89 44 24 54	 mov	 DWORD PTR rc$[rsp], eax

; 1867 :             if (rc == 0)

  01253	83 7c 24 54 00	 cmp	 DWORD PTR rc$[rsp], 0
  01258	75 5e		 jne	 SHORT $LN102@tcpnje_thr

; 1868 :             {
; 1869 :                 DBGMSG(512, "HHCTN128D %4.4X:TCPNJE - IPC Pipe closed\n", devnum);

  0125a	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0125f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01262	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01268	c1 e8 0f	 shr	 eax, 15
  0126b	83 e0 01	 and	 eax, 1
  0126e	85 c0		 test	 eax, eax
  01270	74 14		 je	 SHORT $LN105@tcpnje_thr
  01272	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01277	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0127d	25 00 02 00 00	 and	 eax, 512		; 00000200H
  01282	85 c0		 test	 eax, eax
  01284	75 14		 jne	 SHORT $LN104@tcpnje_thr
$LN105@tcpnje_thr:
  01286	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0128b	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01291	25 00 02 00 00	 and	 eax, 512		; 00000200H
  01296	85 c0		 test	 eax, eax
  01298	74 11		 je	 SHORT $LN103@tcpnje_thr
$LN104@tcpnje_thr:
  0129a	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  0129e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160103
  012a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN103@tcpnje_thr:

; 1870 : 
; 1871 :                 /* Pipe closed : terminate thread & release TCPNJE lock */
; 1872 :                 tn_shutdown = 1;

  012ab	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR tn_shutdown$[rsp], 1

; 1873 :                 /* Exit the main while loop containing select() */
; 1874 :                 break;

  012b3	e9 a8 14 00 00	 jmp	 $LN3@tcpnje_thr
$LN102@tcpnje_thr:

; 1875 :             }
; 1876 : 
; 1877 :             DBGMSG(512, "HHCTN129D %4.4X:TCPNJE - IPC Pipe Data ; code = %d\n", devnum, pipecom);

  012b8	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  012bd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  012c0	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  012c6	c1 e8 0f	 shr	 eax, 15
  012c9	83 e0 01	 and	 eax, 1
  012cc	85 c0		 test	 eax, eax
  012ce	74 14		 je	 SHORT $LN108@tcpnje_thr
  012d0	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  012d5	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  012db	25 00 02 00 00	 and	 eax, 512		; 00000200H
  012e0	85 c0		 test	 eax, eax
  012e2	75 14		 jne	 SHORT $LN107@tcpnje_thr
$LN108@tcpnje_thr:
  012e4	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  012e9	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  012ef	25 00 02 00 00	 and	 eax, 512		; 00000200H
  012f4	85 c0		 test	 eax, eax
  012f6	74 19		 je	 SHORT $LN106@tcpnje_thr
$LN107@tcpnje_thr:
  012f8	0f b6 44 24 58	 movzx	 eax, BYTE PTR pipecom$[rsp]
  012fd	44 8b c0	 mov	 r8d, eax
  01300	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  01304	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160107
  0130b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN106@tcpnje_thr:

; 1878 : 
; 1879 :             switch(pipecom)

  01311	0f b6 44 24 58	 movzx	 eax, BYTE PTR pipecom$[rsp]
  01316	88 84 24 a8 00
	00 00		 mov	 BYTE PTR tv674[rsp], al
  0131d	80 bc 24 a8 00
	00 00 01	 cmp	 BYTE PTR tv674[rsp], 1
  01325	74 18		 je	 SHORT $LN110@tcpnje_thr
  01327	80 bc 24 a8 00
	00 00 02	 cmp	 BYTE PTR tv674[rsp], 2
  0132f	0f 84 4e 01 00
	00		 je	 $LN116@tcpnje_thr
  01335	e9 b1 01 00 00	 jmp	 $LN120@tcpnje_thr

; 1880 :             {
; 1881 :                 case 0: /* redrive select */
; 1882 :                         /* occurs when a new CCW is being executed */
; 1883 :                     break;

  0133a	e9 ac 01 00 00	 jmp	 $LN8@tcpnje_thr
$LN110@tcpnje_thr:

; 1884 :                 case 1: /* Halt current I/O */
; 1885 :                     tn->callissued = 0;

  0133f	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01344	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0134a	0f ba f0 0d	 btr	 eax, 13
  0134e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  01353	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 1886 :                     if (tn->curpending == TCPNJE_PEND_DIAL)

  01359	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0135e	0f b6 80 60 01
	00 00		 movzx	 eax, BYTE PTR [rax+352]
  01365	83 f8 04	 cmp	 eax, 4
  01368	0f 85 ab 00 00
	00		 jne	 $LN111@tcpnje_thr

; 1887 :                     {
; 1888 :                         DBGMSG(128, "HHCTN130D %4.4X:TCPNJE - Closing socket due to halt\n",

  0136e	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01373	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01376	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0137c	c1 e8 0f	 shr	 eax, 15
  0137f	83 e0 01	 and	 eax, 1
  01382	85 c0		 test	 eax, eax
  01384	74 14		 je	 SHORT $LN114@tcpnje_thr
  01386	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0138b	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01391	25 80 00 00 00	 and	 eax, 128		; 00000080H
  01396	85 c0		 test	 eax, eax
  01398	75 14		 jne	 SHORT $LN113@tcpnje_thr
$LN114@tcpnje_thr:
  0139a	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0139f	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  013a5	25 80 00 00 00	 and	 eax, 128		; 00000080H
  013aa	85 c0		 test	 eax, eax
  013ac	74 11		 je	 SHORT $LN112@tcpnje_thr
$LN113@tcpnje_thr:
  013ae	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  013b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160114
  013b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN112@tcpnje_thr:

; 1889 :                                 devnum);
; 1890 :                         close_socket(tn->sfd);

  013bf	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  013c4	8b 88 3c 01 00
	00		 mov	 ecx, DWORD PTR [rax+316]
  013ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1891 :                         tn->sfd = -1;

  013d0	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  013d5	c7 80 3c 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+316], -1

; 1892 :                         tn->state = tn->listening ? TCPLISTEN : CLOSED;

  013df	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  013e4	0f b6 80 62 01
	00 00		 movzx	 eax, BYTE PTR [rax+354]
  013eb	85 c0		 test	 eax, eax
  013ed	74 0d		 je	 SHORT $LN266@tcpnje_thr
  013ef	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv701[rsp], 1
  013fa	eb 0b		 jmp	 SHORT $LN267@tcpnje_thr
$LN266@tcpnje_thr:
  013fc	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv701[rsp], 0
$LN267@tcpnje_thr:
  01407	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0140c	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR tv701[rsp]
  01413	89 88 54 01 00
	00		 mov	 DWORD PTR [rax+340], ecx
$LN111@tcpnje_thr:

; 1893 :                     }
; 1894 : 
; 1895 :                     if (tn->curpending != TCPNJE_PEND_DISABLE)

  01419	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0141e	0f b6 80 60 01
	00 00		 movzx	 eax, BYTE PTR [rax+352]
  01425	83 f8 05	 cmp	 eax, 5
  01428	74 3e		 je	 SHORT $LN115@tcpnje_thr

; 1896 :                     {
; 1897 :                         /* I'm not sure if it's supposed to be possible to halt a DISABLE CCW and if it is, whether
; 1898 :                            the disable should return with UX set or not.  From observation, it appears that allowing
; 1899 :                            a DISABLE to be halted (at least in the case where UX is not set) may cause RSCS to think
; 1900 :                            the line has been disabled when it has not.  Therefore, I am going to pretend that the
; 1901 :                            DISABLE had already completed by the time the time the halt was processed.               */
; 1902 : 
; 1903 :                         tn->curpending = TCPNJE_PEND_IDLE;

  0142a	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0142f	c6 80 60 01 00
	00 00		 mov	 BYTE PTR [rax+352], 0

; 1904 :                         tn->haltpending = 1;

  01436	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0143b	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  01441	83 c8 40	 or	 eax, 64			; 00000040H
  01444	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  01449	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 1905 :                         signal_condition(&tn->ipc);

  0144f	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01454	48 83 c0 50	 add	 rax, 80			; 00000050H
  01458	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160116
  0145f	48 8b c8	 mov	 rcx, rax
  01462	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition
$LN115@tcpnje_thr:

; 1906 :                     }
; 1907 : 
; 1908 :                     signal_condition(&tn->ipc_halt);    /* Tell the halt initiator */

  01468	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0146d	48 83 c0 58	 add	 rax, 88			; 00000058H
  01471	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160117
  01478	48 8b c8	 mov	 rcx, rax
  0147b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1909 :                     break;

  01481	eb 68		 jmp	 SHORT $LN8@tcpnje_thr
$LN116@tcpnje_thr:

; 1910 : 
; 1911 :                 case 2: /* TCPNJE OPEN for this device received by listener on another device */
; 1912 :                     DBGMSG(256, "HHCTN059I %4.4X:TCPNJE - TCPNJE OPEN redirected from another device. Connection state: %s\n",

  01483	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01488	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0148b	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01491	c1 e8 0f	 shr	 eax, 15
  01494	83 e0 01	 and	 eax, 1
  01497	85 c0		 test	 eax, eax
  01499	74 14		 je	 SHORT $LN119@tcpnje_thr
  0149b	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  014a0	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  014a6	25 00 01 00 00	 and	 eax, 256		; 00000100H
  014ab	85 c0		 test	 eax, eax
  014ad	75 14		 jne	 SHORT $LN118@tcpnje_thr
$LN119@tcpnje_thr:
  014af	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  014b4	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  014ba	25 00 01 00 00	 and	 eax, 256		; 00000100H
  014bf	85 c0		 test	 eax, eax
  014c1	74 28		 je	 SHORT $LN117@tcpnje_thr
$LN118@tcpnje_thr:
  014c3	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  014c8	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  014cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  014d6	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  014da	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  014de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160122
  014e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN117@tcpnje_thr:
$LN120@tcpnje_thr:
$LN8@tcpnje_thr:
$LN101@tcpnje_thr:

; 1913 :                               devnum, tcpnje_state_text[tn->state]);
; 1914 :                     break;
; 1915 :                 default:
; 1916 :                     break;
; 1917 :             }
; 1918 :         }
; 1919 : 
; 1920 :         if (selectcount && (tn->sfd >= 0) && FD_ISSET(tn->sfd, &wfd))

  014eb	83 7c 24 50 00	 cmp	 DWORD PTR selectcount$[rsp], 0
  014f0	0f 84 cf 00 00
	00		 je	 $LN121@tcpnje_thr
  014f6	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  014fb	83 b8 3c 01 00
	00 00		 cmp	 DWORD PTR [rax+316], 0
  01502	0f 8c bd 00 00
	00		 jl	 $LN121@tcpnje_thr
  01508	48 8d 94 24 50
	21 00 00	 lea	 rdx, QWORD PTR wfd$[rsp]
  01510	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01515	8b 88 3c 01 00
	00		 mov	 ecx, DWORD PTR [rax+316]
  0151b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  01521	85 c0		 test	 eax, eax
  01523	0f 84 9c 00 00
	00		 je	 $LN121@tcpnje_thr

; 1921 :         {
; 1922 :             if (writecont)

  01529	83 7c 24 68 00	 cmp	 DWORD PTR writecont$[rsp], 0
  0152e	0f 84 91 00 00
	00		 je	 $LN122@tcpnje_thr

; 1923 :             {
; 1924 :                 DBGMSG(128, "HHCTN131D %4.4X:TCPNJE - Write buffer space available.  Retrying last write.\n",

  01534	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01539	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0153c	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01542	c1 e8 0f	 shr	 eax, 15
  01545	83 e0 01	 and	 eax, 1
  01548	85 c0		 test	 eax, eax
  0154a	74 14		 je	 SHORT $LN125@tcpnje_thr
  0154c	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01551	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01557	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0155c	85 c0		 test	 eax, eax
  0155e	75 14		 jne	 SHORT $LN124@tcpnje_thr
$LN125@tcpnje_thr:
  01560	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01565	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0156b	25 80 00 00 00	 and	 eax, 128		; 00000080H
  01570	85 c0		 test	 eax, eax
  01572	74 11		 je	 SHORT $LN123@tcpnje_thr
$LN124@tcpnje_thr:
  01574	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  01578	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160129
  0157f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN123@tcpnje_thr:

; 1925 :                         devnum);
; 1926 : 
; 1927 :                 /* One of the causes of select() returning accounted for */
; 1928 :                 selectcount--;

  01585	8b 44 24 50	 mov	 eax, DWORD PTR selectcount$[rsp]
  01589	ff c8		 dec	 eax
  0158b	89 44 24 50	 mov	 DWORD PTR selectcount$[rsp], eax

; 1929 : 
; 1930 :                 rc = tcpnje_write(tn->sfd, &tn->tcpoutbuf, tn);

  0158f	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01594	48 05 e0 00 00
	00		 add	 rax, 224		; 000000e0H
  0159a	4c 8b 44 24 40	 mov	 r8, QWORD PTR tn$[rsp]
  0159f	48 8b d0	 mov	 rdx, rax
  015a2	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  015a7	8b 88 3c 01 00
	00		 mov	 ecx, DWORD PTR [rax+316]
  015ad	e8 00 00 00 00	 call	 tcpnje_write
  015b2	89 44 24 54	 mov	 DWORD PTR rc$[rsp], eax

; 1931 :                 if (rc == 0)

  015b6	83 7c 24 54 00	 cmp	 DWORD PTR rc$[rsp], 0
  015bb	75 08		 jne	 SHORT $LN126@tcpnje_thr

; 1932 :                 {
; 1933 :                     /* Write completed successfully */
; 1934 :                     writecont = 0;

  015bd	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR writecont$[rsp], 0
$LN126@tcpnje_thr:
$LN122@tcpnje_thr:
$LN121@tcpnje_thr:

; 1935 :                 }
; 1936 :             }
; 1937 :         }
; 1938 : 
; 1939 :         /* Did a connection attempt complete? */
; 1940 :         if (selectcount && (tn->afd >= 0) && (FD_ISSET(tn->afd, &wfd)

  015c5	83 7c 24 50 00	 cmp	 DWORD PTR selectcount$[rsp], 0
  015ca	0f 84 95 04 00
	00		 je	 $LN127@tcpnje_thr
  015d0	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  015d5	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [rax+324], 0
  015dc	0f 8c 83 04 00
	00		 jl	 $LN127@tcpnje_thr
  015e2	48 8d 94 24 50
	21 00 00	 lea	 rdx, QWORD PTR wfd$[rsp]
  015ea	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  015ef	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  015f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  015fb	85 c0		 test	 eax, eax
  015fd	75 21		 jne	 SHORT $LN128@tcpnje_thr
  015ff	48 8d 94 24 60
	41 00 00	 lea	 rdx, QWORD PTR xfd$[rsp]
  01607	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0160c	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  01612	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  01618	85 c0		 test	 eax, eax
  0161a	0f 84 45 04 00
	00		 je	 $LN127@tcpnje_thr
$LN128@tcpnje_thr:

; 1941 : #if defined(_MSVC_)
; 1942 :                                           ||  FD_ISSET(tn->afd, &xfd)
; 1943 : #endif /* defined(_MSVC_) */
; 1944 :                                                                      ))
; 1945 :         {
; 1946 :             DBGMSG(256, "HHCTN132D %4.4X:TCPNJE - connection event\n", devnum);

  01620	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01625	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01628	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0162e	c1 e8 0f	 shr	 eax, 15
  01631	83 e0 01	 and	 eax, 1
  01634	85 c0		 test	 eax, eax
  01636	74 14		 je	 SHORT $LN131@tcpnje_thr
  01638	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0163d	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01643	25 00 01 00 00	 and	 eax, 256		; 00000100H
  01648	85 c0		 test	 eax, eax
  0164a	75 14		 jne	 SHORT $LN130@tcpnje_thr
$LN131@tcpnje_thr:
  0164c	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01651	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01657	25 00 01 00 00	 and	 eax, 256		; 00000100H
  0165c	85 c0		 test	 eax, eax
  0165e	74 11		 je	 SHORT $LN129@tcpnje_thr
$LN130@tcpnje_thr:
  01660	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  01664	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160136
  0166b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN129@tcpnje_thr:

; 1947 : 
; 1948 :             /* One of the causes of select() returning accounted for */
; 1949 :             selectcount--;

  01671	8b 44 24 50	 mov	 eax, DWORD PTR selectcount$[rsp]
  01675	ff c8		 dec	 eax
  01677	89 44 24 50	 mov	 DWORD PTR selectcount$[rsp], eax

; 1950 : 
; 1951 :             switch(tn->curpending)

  0167b	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01680	0f b6 80 60 01
	00 00		 movzx	 eax, BYTE PTR [rax+352]
  01687	88 84 24 b0 00
	00 00		 mov	 BYTE PTR tv828[rsp], al
  0168e	80 bc 24 b0 00
	00 00 03	 cmp	 BYTE PTR tv828[rsp], 3
  01696	74 0f		 je	 SHORT $LN133@tcpnje_thr
  01698	80 bc 24 b0 00
	00 00 04	 cmp	 BYTE PTR tv828[rsp], 4
  016a0	74 05		 je	 SHORT $LN132@tcpnje_thr
  016a2	e9 be 03 00 00	 jmp	 $LN150@tcpnje_thr
$LN132@tcpnje_thr:
$LN133@tcpnje_thr:

; 1952 :             {
; 1953 :                 case TCPNJE_PEND_DIAL:
; 1954 :                 case TCPNJE_PEND_CONNECT:  /* Leased line connect case */
; 1955 : 
; 1956 :                 soerrsize = sizeof(soerror);

  016a7	c7 84 24 d8 00
	00 00 04 00 00
	00		 mov	 DWORD PTR soerrsize$[rsp], 4

; 1957 :                 getsockopt(tn->afd, SOL_SOCKET, SO_ERROR, (GETSET_SOCKOPT_T*)&soerror, &soerrsize);

  016b2	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  016b7	48 63 80 44 01
	00 00		 movsxd	 rax, DWORD PTR [rax+324]
  016be	48 8d 8c 24 d8
	00 00 00	 lea	 rcx, QWORD PTR soerrsize$[rsp]
  016c6	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  016cb	4c 8d 8c 24 dc
	00 00 00	 lea	 r9, QWORD PTR soerror$[rsp]
  016d3	41 b8 07 10 00
	00		 mov	 r8d, 4103		; 00001007H
  016d9	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  016de	48 8b c8	 mov	 rcx, rax
  016e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getsockopt

; 1958 : 
; 1959 : #if defined(_MSVC_)
; 1960 :                 if (FD_ISSET(tn->afd, &wfd))

  016e7	48 8d 94 24 50
	21 00 00	 lea	 rdx, QWORD PTR wfd$[rsp]
  016ef	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  016f4	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  016fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  01700	85 c0		 test	 eax, eax
  01702	0f 84 6f 01 00
	00		 je	 $LN134@tcpnje_thr

; 1961 : #else /* defined(_MSVC_) */
; 1962 :                 if (soerror == 0)
; 1963 : #endif /* defined(_MSVC_) */
; 1964 :                 {
; 1965 :                     if (tn->state == TCPCONSNT)

  01708	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0170d	83 b8 54 01 00
	00 02		 cmp	 DWORD PTR [rax+340], 2
  01714	0f 85 f4 00 00
	00		 jne	 $LN136@tcpnje_thr

; 1966 :                     {
; 1967 :                         tn->state = TCPCONACT;

  0171a	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0171f	c7 80 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [rax+340], 3

; 1968 :                         DBGMSG(128, "HHCTN133D %4.4X:TCPNJE - outgoing call connected for link %s - %s\n",

  01729	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0172e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01731	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01737	c1 e8 0f	 shr	 eax, 15
  0173a	83 e0 01	 and	 eax, 1
  0173d	85 c0		 test	 eax, eax
  0173f	74 14		 je	 SHORT $LN140@tcpnje_thr
  01741	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01746	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0174c	25 80 00 00 00	 and	 eax, 128		; 00000080H
  01751	85 c0		 test	 eax, eax
  01753	75 14		 jne	 SHORT $LN139@tcpnje_thr
$LN140@tcpnje_thr:
  01755	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0175a	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01760	25 80 00 00 00	 and	 eax, 128		; 00000080H
  01765	85 c0		 test	 eax, eax
  01767	74 63		 je	 SHORT $LN138@tcpnje_thr
$LN139@tcpnje_thr:
  01769	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0176e	48 83 c0 38	 add	 rax, 56			; 00000038H
  01772	4c 8b c0	 mov	 r8, rax
  01775	ba 09 00 00 00	 mov	 edx, 9
  0177a	48 8d 8c 24 70
	61 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  01782	e8 00 00 00 00	 call	 guest_to_host_string
  01787	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv887[rsp], rax
  0178f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  01794	48 83 c1 30	 add	 rcx, 48			; 00000030H
  01798	4c 8b c1	 mov	 r8, rcx
  0179b	ba 09 00 00 00	 mov	 edx, 9
  017a0	48 8d 8c 24 80
	61 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  017a8	e8 00 00 00 00	 call	 guest_to_host_string
  017ad	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv887[rsp]
  017b5	4c 8b c9	 mov	 r9, rcx
  017b8	4c 8b c0	 mov	 r8, rax
  017bb	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  017bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160146
  017c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN138@tcpnje_thr:

; 1969 :                                 devnum, guest_to_host_string(lnodestring, sizeof(lnodestring), tn->lnode),
; 1970 :                                         guest_to_host_string(rnodestring, sizeof(rnodestring), tn->rnode));
; 1971 : 
; 1972 :                         /* Connect successful. Send TCPNJE OPEN request. */
; 1973 :                         tcpnje_ttc(tn->afd, TCPNJE_OPEN, 0, tn);

  017cc	4c 8b 4c 24 40	 mov	 r9, QWORD PTR tn$[rsp]
  017d1	45 33 c0	 xor	 r8d, r8d
  017d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:TCPNJE_OPEN
  017db	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  017e0	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  017e6	e8 00 00 00 00	 call	 tcpnje_ttc

; 1974 :                         tn->state = NJEOPNSNT;

  017eb	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  017f0	c7 80 54 01 00
	00 05 00 00 00	 mov	 DWORD PTR [rax+340], 5

; 1975 :                         /* Prepare to receive incoming TCPNJE ACK */
; 1976 :                         tn->ttcactbuf.inptr.address = tn->ttcactbuf.base.address;

  017fa	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  017ff	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  01804	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  01808	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 1977 :                     }

  0180c	eb 64		 jmp	 SHORT $LN137@tcpnje_thr
$LN136@tcpnje_thr:

; 1978 :                     else
; 1979 :                     {
; 1980 :                         DBGMSG(1, "HHCTN060W %4.4X:TCPNJE - unexpected state %s after outgoing call connected\n",

  0180e	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01813	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01816	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0181c	c1 e8 0f	 shr	 eax, 15
  0181f	83 e0 01	 and	 eax, 1
  01822	85 c0		 test	 eax, eax
  01824	74 12		 je	 SHORT $LN143@tcpnje_thr
  01826	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0182b	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01831	83 e0 01	 and	 eax, 1
  01834	85 c0		 test	 eax, eax
  01836	75 12		 jne	 SHORT $LN142@tcpnje_thr
$LN143@tcpnje_thr:
  01838	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0183d	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01843	83 e0 01	 and	 eax, 1
  01846	85 c0		 test	 eax, eax
  01848	74 28		 je	 SHORT $LN141@tcpnje_thr
$LN142@tcpnje_thr:
  0184a	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0184f	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  01856	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  0185d	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  01861	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  01865	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160150
  0186c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN141@tcpnje_thr:
$LN137@tcpnje_thr:

; 1981 :                                 devnum, tcpnje_state_text[tn->state]);
; 1982 :                     }
; 1983 :                 }

  01872	e9 ee 01 00 00	 jmp	 $LN135@tcpnje_thr
$LN134@tcpnje_thr:

; 1984 :                 else
; 1985 : #if defined(_MSVC_)
; 1986 :                 if (FD_ISSET(tn->afd, &xfd))

  01877	48 8d 94 24 60
	41 00 00	 lea	 rdx, QWORD PTR xfd$[rsp]
  0187f	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01884	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  0188a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  01890	85 c0		 test	 eax, eax
  01892	0f 84 cd 01 00
	00		 je	 $LN144@tcpnje_thr

; 1987 : #else /* defined(_MSVC_) */
; 1988 :                 if (soerror != 0)
; 1989 : #endif /* defined(_MSVC_) */
; 1990 :                 {
; 1991 :                     intmp.s_addr = tn->rhost;

  01898	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0189d	8b 40 44	 mov	 eax, DWORD PTR [rax+68]
  018a0	89 84 24 e0 00
	00 00		 mov	 DWORD PTR intmp$[rsp], eax

; 1992 :                     DBGMSG(32, "HHCTN061W %4.4X:TCPNJE - outgoing call to %s:%d for link %s - %s failed: %s\n",

  018a7	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  018ac	48 8b 00	 mov	 rax, QWORD PTR [rax]
  018af	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  018b5	c1 e8 0f	 shr	 eax, 15
  018b8	83 e0 01	 and	 eax, 1
  018bb	85 c0		 test	 eax, eax
  018bd	74 12		 je	 SHORT $LN147@tcpnje_thr
  018bf	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  018c4	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  018ca	83 e0 20	 and	 eax, 32			; 00000020H
  018cd	85 c0		 test	 eax, eax
  018cf	75 16		 jne	 SHORT $LN146@tcpnje_thr
$LN147@tcpnje_thr:
  018d1	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  018d6	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  018dc	83 e0 20	 and	 eax, 32			; 00000020H
  018df	85 c0		 test	 eax, eax
  018e1	0f 84 c6 00 00
	00		 je	 $LN145@tcpnje_thr
$LN146@tcpnje_thr:
  018e7	8b 8c 24 dc 00
	00 00		 mov	 ecx, DWORD PTR soerror$[rsp]
  018ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  018f4	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv944[rsp], rax
  018fc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  01901	48 83 c1 38	 add	 rcx, 56			; 00000038H
  01905	4c 8b c1	 mov	 r8, rcx
  01908	ba 09 00 00 00	 mov	 edx, 9
  0190d	48 8d 8c 24 70
	61 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  01915	e8 00 00 00 00	 call	 guest_to_host_string
  0191a	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv947[rsp], rax
  01922	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  01927	48 83 c1 30	 add	 rcx, 48			; 00000030H
  0192b	4c 8b c1	 mov	 r8, rcx
  0192e	ba 09 00 00 00	 mov	 edx, 9
  01933	48 8d 8c 24 80
	61 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  0193b	e8 00 00 00 00	 call	 guest_to_host_string
  01940	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv953[rsp], rax
  01948	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  0194d	0f b7 89 5a 01
	00 00		 movzx	 ecx, WORD PTR [rcx+346]
  01954	89 8c 24 d0 00
	00 00		 mov	 DWORD PTR tv960[rsp], ecx
  0195b	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR intmp$[rsp]
  01962	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_ntoa
  01968	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tv944[rsp]
  01970	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01975	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv947[rsp]
  0197d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01982	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv953[rsp]
  0198a	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0198f	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR tv960[rsp]
  01996	44 8b c9	 mov	 r9d, ecx
  01999	4c 8b c0	 mov	 r8, rax
  0199c	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  019a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160155
  019a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN145@tcpnje_thr:

; 1993 :                         devnum, inet_ntoa(intmp), tn->rport,
; 1994 :                         guest_to_host_string(lnodestring, sizeof(lnodestring), tn->lnode),
; 1995 :                         guest_to_host_string(rnodestring, sizeof(rnodestring), tn->rnode), strerror(soerror));
; 1996 :                     if (tn->curpending == TCPNJE_PEND_CONNECT)

  019ad	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  019b2	0f b6 80 60 01
	00 00		 movzx	 eax, BYTE PTR [rax+352]
  019b9	83 f8 03	 cmp	 eax, 3
  019bc	75 1a		 jne	 SHORT $LN148@tcpnje_thr

; 1997 :                     {
; 1998 :                         /* Ensure top of the loop doesn't restart a new call */
; 1999 :                         /* but starts a 3 second timer instead               */
; 2000 :                         tn->callissued = 1;

  019be	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  019c3	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  019c9	0f ba e8 0d	 bts	 eax, 13
  019cd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  019d2	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax
$LN148@tcpnje_thr:

; 2001 :                     }
; 2002 :                     close_socket(tn->afd);

  019d8	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  019dd	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  019e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 2003 :                     tn->afd = -1;

  019e9	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  019ee	c7 80 44 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+324], -1

; 2004 :                     if (tn->state == TCPCONSNT)

  019f8	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  019fd	83 b8 54 01 00
	00 02		 cmp	 DWORD PTR [rax+340], 2
  01a04	75 3a		 jne	 SHORT $LN149@tcpnje_thr

; 2005 :                     {
; 2006 :                         tn->state = tn->listening ? TCPLISTEN : CLOSED;

  01a06	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01a0b	0f b6 80 62 01
	00 00		 movzx	 eax, BYTE PTR [rax+354]
  01a12	85 c0		 test	 eax, eax
  01a14	74 0d		 je	 SHORT $LN268@tcpnje_thr
  01a16	c7 84 24 b4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv982[rsp], 1
  01a21	eb 0b		 jmp	 SHORT $LN269@tcpnje_thr
$LN268@tcpnje_thr:
  01a23	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv982[rsp], 0
$LN269@tcpnje_thr:
  01a2e	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01a33	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv982[rsp]
  01a3a	89 88 54 01 00
	00		 mov	 DWORD PTR [rax+340], ecx
$LN149@tcpnje_thr:

; 2007 :                     }
; 2008 :                     signal_condition(&tn->ipc);

  01a40	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01a45	48 83 c0 50	 add	 rax, 80			; 00000050H
  01a49	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160158
  01a50	48 8b c8	 mov	 rcx, rax
  01a53	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 2009 :                     tn->curpending = TCPNJE_PEND_IDLE;

  01a59	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01a5e	c6 80 60 01 00
	00 00		 mov	 BYTE PTR [rax+352], 0
$LN144@tcpnje_thr:
$LN135@tcpnje_thr:
$LN150@tcpnje_thr:
$LN127@tcpnje_thr:

; 2010 :                 }
; 2011 :                 break;
; 2012 : 
; 2013 :                 default:
; 2014 :                 break;
; 2015 :             }
; 2016 :         }
; 2017 : 
; 2018 :         /* Are we expecting real data rather than TCPNJE connection overhead? */
; 2019 :         if (selectcount && (tn->state >= NJEACKSNT) && (tn->sfd >= 0) && FD_ISSET(tn->sfd, &rfd))

  01a65	83 7c 24 50 00	 cmp	 DWORD PTR selectcount$[rsp], 0
  01a6a	0f 84 00 03 00
	00		 je	 $LN151@tcpnje_thr
  01a70	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01a75	83 b8 54 01 00
	00 06		 cmp	 DWORD PTR [rax+340], 6
  01a7c	0f 8c ee 02 00
	00		 jl	 $LN151@tcpnje_thr
  01a82	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01a87	83 b8 3c 01 00
	00 00		 cmp	 DWORD PTR [rax+316], 0
  01a8e	0f 8c dc 02 00
	00		 jl	 $LN151@tcpnje_thr
  01a94	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  01a9c	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01aa1	8b 88 3c 01 00
	00		 mov	 ecx, DWORD PTR [rax+316]
  01aa7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  01aad	85 c0		 test	 eax, eax
  01aaf	0f 84 bb 02 00
	00		 je	 $LN151@tcpnje_thr

; 2020 :         {
; 2021 :             DBGMSG(128, "HHCTN134D %4.4X:TCPNJE - inbound data. Connection state: %s\n",

  01ab5	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01aba	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01abd	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01ac3	c1 e8 0f	 shr	 eax, 15
  01ac6	83 e0 01	 and	 eax, 1
  01ac9	85 c0		 test	 eax, eax
  01acb	74 14		 je	 SHORT $LN154@tcpnje_thr
  01acd	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01ad2	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01ad8	25 80 00 00 00	 and	 eax, 128		; 00000080H
  01add	85 c0		 test	 eax, eax
  01adf	75 14		 jne	 SHORT $LN153@tcpnje_thr
$LN154@tcpnje_thr:
  01ae1	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01ae6	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01aec	25 80 00 00 00	 and	 eax, 128		; 00000080H
  01af1	85 c0		 test	 eax, eax
  01af3	74 28		 je	 SHORT $LN152@tcpnje_thr
$LN153@tcpnje_thr:
  01af5	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01afa	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  01b01	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  01b08	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  01b0c	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  01b10	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160164
  01b17	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN152@tcpnje_thr:

; 2022 :                     devnum, tcpnje_state_text[tn->state]);
; 2023 : 
; 2024 :             /* One of the causes of select() returning accounted for */
; 2025 :             selectcount--;

  01b1d	8b 44 24 50	 mov	 eax, DWORD PTR selectcount$[rsp]
  01b21	ff c8		 dec	 eax
  01b23	89 44 24 50	 mov	 DWORD PTR selectcount$[rsp], eax

; 2026 : 
; 2027 :             rc = tcpnje_read(tn->sfd, &tn->tcpinbuf, SIZEOF_TTB, tn);

  01b27	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01b2c	48 05 b8 00 00
	00		 add	 rax, 184		; 000000b8H
  01b32	4c 8b 4c 24 40	 mov	 r9, QWORD PTR tn$[rsp]
  01b37	41 b8 08 00 00
	00		 mov	 r8d, 8
  01b3d	48 8b d0	 mov	 rdx, rax
  01b40	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01b45	8b 88 3c 01 00
	00		 mov	 ecx, DWORD PTR [rax+316]
  01b4b	e8 00 00 00 00	 call	 tcpnje_read
  01b50	89 44 24 54	 mov	 DWORD PTR rc$[rsp], eax

; 2028 : 
; 2029 :             /* Have we read in a complete TTB yet? */
; 2030 :             if (rc == 0)

  01b54	83 7c 24 54 00	 cmp	 DWORD PTR rc$[rsp], 0
  01b59	0f 85 8a 00 00
	00		 jne	 $LN155@tcpnje_thr

; 2031 :             {
; 2032 :                 /* We now have the exact number of bytes in the TTB.
; 2033 :                    Get the size of the whole block from it.           */
; 2034 :                 TTBlength = ntohs(tn->tcpinbuf.base.ttb->length);

  01b5f	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01b64	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  01b6b	0f b7 48 02	 movzx	 ecx, WORD PTR [rax+2]
  01b6f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ntohs
  01b75	0f b7 c0	 movzx	 eax, ax
  01b78	89 44 24 78	 mov	 DWORD PTR TTBlength$[rsp], eax

; 2035 : 
; 2036 :                 DBGMSG(2048, "HHCTN135D %4.4X:TCPNJE incoming TTB, length %d. Connection state %s\n",

  01b7c	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01b81	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01b84	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01b8a	c1 e8 0f	 shr	 eax, 15
  01b8d	83 e0 01	 and	 eax, 1
  01b90	85 c0		 test	 eax, eax
  01b92	74 14		 je	 SHORT $LN158@tcpnje_thr
  01b94	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01b99	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01b9f	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  01ba4	85 c0		 test	 eax, eax
  01ba6	75 14		 jne	 SHORT $LN157@tcpnje_thr
$LN158@tcpnje_thr:
  01ba8	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01bad	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01bb3	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  01bb8	85 c0		 test	 eax, eax
  01bba	74 2d		 je	 SHORT $LN156@tcpnje_thr
$LN157@tcpnje_thr:
  01bbc	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01bc1	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  01bc8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  01bcf	4c 8b 0c c1	 mov	 r9, QWORD PTR [rcx+rax*8]
  01bd3	44 8b 44 24 78	 mov	 r8d, DWORD PTR TTBlength$[rsp]
  01bd8	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  01bdc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160169
  01be3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN156@tcpnje_thr:
$LN155@tcpnje_thr:

; 2037 :                             devnum, TTBlength, tcpnje_state_text[tn->state]);
; 2038 :             }
; 2039 : 
; 2040 :             if (rc >= 0)

  01be9	83 7c 24 54 00	 cmp	 DWORD PTR rc$[rsp], 0
  01bee	0f 8c 7c 01 00
	00		 jl	 $LN159@tcpnje_thr

; 2041 :             {
; 2042 :                 /* We have at least the TTB and possibly more.
; 2043 :                    Now ensure the block is completely read in */
; 2044 :                 rc = tcpnje_read(tn->sfd, &tn->tcpinbuf, TTBlength, tn);

  01bf4	48 63 44 24 78	 movsxd	 rax, DWORD PTR TTBlength$[rsp]
  01bf9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  01bfe	48 81 c1 b8 00
	00 00		 add	 rcx, 184		; 000000b8H
  01c05	4c 8b 4c 24 40	 mov	 r9, QWORD PTR tn$[rsp]
  01c0a	4c 8b c0	 mov	 r8, rax
  01c0d	48 8b d1	 mov	 rdx, rcx
  01c10	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01c15	8b 88 3c 01 00
	00		 mov	 ecx, DWORD PTR [rax+316]
  01c1b	e8 00 00 00 00	 call	 tcpnje_read
  01c20	89 44 24 54	 mov	 DWORD PTR rc$[rsp], eax

; 2045 : 
; 2046 :                 DBGMSG(2048, "HHCTN136D %4.4X:TCPNJE - bytes required %d - read so far %ld. Connection state %s\n",

  01c24	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01c29	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01c2c	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01c32	c1 e8 0f	 shr	 eax, 15
  01c35	83 e0 01	 and	 eax, 1
  01c38	85 c0		 test	 eax, eax
  01c3a	74 14		 je	 SHORT $LN162@tcpnje_thr
  01c3c	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01c41	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01c47	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  01c4c	85 c0		 test	 eax, eax
  01c4e	75 14		 jne	 SHORT $LN161@tcpnje_thr
$LN162@tcpnje_thr:
  01c50	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01c55	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01c5b	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  01c60	85 c0		 test	 eax, eax
  01c62	74 50		 je	 SHORT $LN160@tcpnje_thr
$LN161@tcpnje_thr:
  01c64	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01c69	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  01c70	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  01c77	48 8b 54 24 40	 mov	 rdx, QWORD PTR tn$[rsp]
  01c7c	4c 8b 44 24 40	 mov	 r8, QWORD PTR tn$[rsp]
  01c81	4d 8b 80 b8 00
	00 00		 mov	 r8, QWORD PTR [r8+184]
  01c88	48 8b 92 c0 00
	00 00		 mov	 rdx, QWORD PTR [rdx+192]
  01c8f	49 2b d0	 sub	 rdx, r8
  01c92	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  01c96	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01c9b	4c 8b ca	 mov	 r9, rdx
  01c9e	44 8b 44 24 78	 mov	 r8d, DWORD PTR TTBlength$[rsp]
  01ca3	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  01ca7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160174
  01cae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN160@tcpnje_thr:

; 2047 :                         devnum, TTBlength, tn->tcpinbuf.inptr.address - tn->tcpinbuf.base.address, tcpnje_state_text[tn->state]);
; 2048 : 
; 2049 :                 if (rc == 0)

  01cb4	83 7c 24 54 00	 cmp	 DWORD PTR rc$[rsp], 0
  01cb9	0f 85 b1 00 00
	00		 jne	 $LN163@tcpnje_thr

; 2050 :                 {
; 2051 :                     /* We have now received a complete TCPNJE buffer so advise
; 2052 :                        CCW executor that there is now data available to read. */
; 2053 :                     tn->tcpinbuf.valid = 1;

  01cbf	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01cc4	c6 80 d8 00 00
	00 01		 mov	 BYTE PTR [rax+216], 1

; 2054 : 
; 2055 :                     tn->curpending = TCPNJE_PEND_IDLE;

  01ccb	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01cd0	c6 80 60 01 00
	00 00		 mov	 BYTE PTR [rax+352], 0

; 2056 :                     signal_condition(&tn->ipc);

  01cd7	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01cdc	48 83 c0 50	 add	 rax, 80			; 00000050H
  01ce0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160176
  01ce7	48 8b c8	 mov	 rcx, rax
  01cea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 2057 : 
; 2058 :                     DBGMSG(2048, "HHCTN137D %4.4X:TCPNJE - TTB read complete. Connection state %s\n",

  01cf0	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01cf5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01cf8	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01cfe	c1 e8 0f	 shr	 eax, 15
  01d01	83 e0 01	 and	 eax, 1
  01d04	85 c0		 test	 eax, eax
  01d06	74 14		 je	 SHORT $LN166@tcpnje_thr
  01d08	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01d0d	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01d13	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  01d18	85 c0		 test	 eax, eax
  01d1a	75 14		 jne	 SHORT $LN165@tcpnje_thr
$LN166@tcpnje_thr:
  01d1c	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01d21	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01d27	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  01d2c	85 c0		 test	 eax, eax
  01d2e	74 28		 je	 SHORT $LN164@tcpnje_thr
$LN165@tcpnje_thr:
  01d30	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01d35	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  01d3c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  01d43	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  01d47	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  01d4b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160180
  01d52	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN164@tcpnje_thr:

; 2059 :                             devnum, tcpnje_state_text[tn->state]);
; 2060 : 
; 2061 :                     /* Prepare to receive next incoming TTB */
; 2062 :                     tn->tcpinbuf.inptr.address = tn->tcpinbuf.base.address;

  01d58	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01d5d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  01d62	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  01d69	48 89 88 c0 00
	00 00		 mov	 QWORD PTR [rax+192], rcx
$LN163@tcpnje_thr:
$LN159@tcpnje_thr:
$LN151@tcpnje_thr:

; 2063 :                 }
; 2064 :             }
; 2065 :         }
; 2066 : 
; 2067 :         /* Any incoming TCPNJE requests? */
; 2068 :         if (selectcount && (tn->pfd >= 0) && FD_ISSET(tn->pfd, &rfd))

  01d70	83 7c 24 50 00	 cmp	 DWORD PTR selectcount$[rsp], 0
  01d75	0f 84 e4 01 00
	00		 je	 $LN167@tcpnje_thr
  01d7b	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01d80	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [rax+328], 0
  01d87	0f 8c d2 01 00
	00		 jl	 $LN167@tcpnje_thr
  01d8d	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  01d95	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01d9a	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  01da0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  01da6	85 c0		 test	 eax, eax
  01da8	0f 84 b1 01 00
	00		 je	 $LN167@tcpnje_thr

; 2069 :         {
; 2070 :             DBGMSG(256, "HHCTN138D %4.4X:TCPNJE - passive open TCPNJE protocol traffic. Connection state: %s\n",

  01dae	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01db3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01db6	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01dbc	c1 e8 0f	 shr	 eax, 15
  01dbf	83 e0 01	 and	 eax, 1
  01dc2	85 c0		 test	 eax, eax
  01dc4	74 14		 je	 SHORT $LN170@tcpnje_thr
  01dc6	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01dcb	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01dd1	25 00 01 00 00	 and	 eax, 256		; 00000100H
  01dd6	85 c0		 test	 eax, eax
  01dd8	75 14		 jne	 SHORT $LN169@tcpnje_thr
$LN170@tcpnje_thr:
  01dda	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01ddf	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01de5	25 00 01 00 00	 and	 eax, 256		; 00000100H
  01dea	85 c0		 test	 eax, eax
  01dec	74 28		 je	 SHORT $LN168@tcpnje_thr
$LN169@tcpnje_thr:
  01dee	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01df3	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  01dfa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  01e01	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  01e05	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  01e09	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160185
  01e10	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN168@tcpnje_thr:

; 2071 :                 devnum, tcpnje_state_text[tn->state]);
; 2072 : 
; 2073 :             /* One of the causes of select() returning accounted for */
; 2074 :             selectcount--;

  01e16	8b 44 24 50	 mov	 eax, DWORD PTR selectcount$[rsp]
  01e1a	ff c8		 dec	 eax
  01e1c	89 44 24 50	 mov	 DWORD PTR selectcount$[rsp], eax

; 2075 : 
; 2076 :             /* Receive the incoming TCPNJE request */
; 2077 :             rc = tcpnje_read(tn->pfd, &tn->ttcpasbuf, SIZEOF_TTC, tn);

  01e20	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01e25	48 05 90 00 00
	00		 add	 rax, 144		; 00000090H
  01e2b	4c 8b 4c 24 40	 mov	 r9, QWORD PTR tn$[rsp]
  01e30	41 b8 21 00 00
	00		 mov	 r8d, 33			; 00000021H
  01e36	48 8b d0	 mov	 rdx, rax
  01e39	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01e3e	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  01e44	e8 00 00 00 00	 call	 tcpnje_read
  01e49	89 44 24 54	 mov	 DWORD PTR rc$[rsp], eax

; 2078 : 
; 2079 :             /* Did we get the complete TTC? If not, wait for more before doing anything */
; 2080 :             if (rc == 0)

  01e4d	83 7c 24 54 00	 cmp	 DWORD PTR rc$[rsp], 0
  01e52	75 35		 jne	 SHORT $LN171@tcpnje_thr

; 2081 :             {
; 2082 :                 /* Deal with the TCPNJE OPEN or whatever request */
; 2083 :                 tcpnje_process_request(&tn->ttcpasbuf, tn);

  01e54	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01e59	48 05 90 00 00
	00		 add	 rax, 144		; 00000090H
  01e5f	48 8b 54 24 40	 mov	 rdx, QWORD PTR tn$[rsp]
  01e64	48 8b c8	 mov	 rcx, rax
  01e67	e8 00 00 00 00	 call	 tcpnje_process_request

; 2084 : 
; 2085 :                 /* Reset buffer pointer for next time something arrives */
; 2086 :                 tn->ttcpasbuf.inptr.address = tn->ttcpasbuf.base.address;

  01e6c	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01e71	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  01e76	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  01e7d	48 89 88 98 00
	00 00		 mov	 QWORD PTR [rax+152], rcx

; 2087 :             }

  01e84	e9 d6 00 00 00	 jmp	 $LN172@tcpnje_thr
$LN171@tcpnje_thr:

; 2088 :             else if (rc > 0)

  01e89	83 7c 24 54 00	 cmp	 DWORD PTR rc$[rsp], 0
  01e8e	0f 8e cb 00 00
	00		 jle	 $LN173@tcpnje_thr

; 2089 :             {
; 2090 :                 if (errorcount100 < TCPNJE_MAX_ERRORCOUNT)

  01e94	83 7c 24 6c 05	 cmp	 DWORD PTR errorcount100$[rsp], 5
  01e99	7d 66		 jge	 SHORT $LN174@tcpnje_thr

; 2091 :                 {
; 2092 :                     DBGMSG(2, "HHCTN100E %4.4X:TCPNJE - Excess connection traffic. Connection state: %s\n",

  01e9b	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01ea0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01ea3	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01ea9	c1 e8 0f	 shr	 eax, 15
  01eac	83 e0 01	 and	 eax, 1
  01eaf	85 c0		 test	 eax, eax
  01eb1	74 12		 je	 SHORT $LN178@tcpnje_thr
  01eb3	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01eb8	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01ebe	83 e0 02	 and	 eax, 2
  01ec1	85 c0		 test	 eax, eax
  01ec3	75 12		 jne	 SHORT $LN177@tcpnje_thr
$LN178@tcpnje_thr:
  01ec5	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01eca	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01ed0	83 e0 02	 and	 eax, 2
  01ed3	85 c0		 test	 eax, eax
  01ed5	74 28		 je	 SHORT $LN176@tcpnje_thr
$LN177@tcpnje_thr:
  01ed7	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01edc	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  01ee3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  01eea	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  01eee	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  01ef2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160194
  01ef9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN176@tcpnje_thr:

; 2093 :                         devnum, tcpnje_state_text[tn->state]);
; 2094 :                 }

  01eff	eb 54		 jmp	 SHORT $LN175@tcpnje_thr
$LN174@tcpnje_thr:

; 2095 :                 else if (errorcount100 == TCPNJE_MAX_ERRORCOUNT)

  01f01	83 7c 24 6c 05	 cmp	 DWORD PTR errorcount100$[rsp], 5
  01f06	75 4d		 jne	 SHORT $LN179@tcpnje_thr

; 2096 :                 {
; 2097 :                     DBGMSG(1, "HHCTN099W %4.4X:TCPNJE - repeating messages suppressed.\n",

  01f08	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01f0d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01f10	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01f16	c1 e8 0f	 shr	 eax, 15
  01f19	83 e0 01	 and	 eax, 1
  01f1c	85 c0		 test	 eax, eax
  01f1e	74 12		 je	 SHORT $LN182@tcpnje_thr
  01f20	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01f25	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01f2b	83 e0 01	 and	 eax, 1
  01f2e	85 c0		 test	 eax, eax
  01f30	75 12		 jne	 SHORT $LN181@tcpnje_thr
$LN182@tcpnje_thr:
  01f32	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01f37	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01f3d	83 e0 01	 and	 eax, 1
  01f40	85 c0		 test	 eax, eax
  01f42	74 11		 je	 SHORT $LN180@tcpnje_thr
$LN181@tcpnje_thr:
  01f44	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  01f48	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160199
  01f4f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN180@tcpnje_thr:
$LN179@tcpnje_thr:
$LN175@tcpnje_thr:

; 2098 :                                 devnum);
; 2099 :                 }
; 2100 : 
; 2101 :                 errorcount100++;

  01f55	8b 44 24 6c	 mov	 eax, DWORD PTR errorcount100$[rsp]
  01f59	ff c0		 inc	 eax
  01f5b	89 44 24 6c	 mov	 DWORD PTR errorcount100$[rsp], eax
$LN173@tcpnje_thr:
$LN172@tcpnje_thr:
$LN167@tcpnje_thr:

; 2102 :             }
; 2103 :         }
; 2104 : 
; 2105 :         /* Any incoming TCPNJE replies */
; 2106 :         if (selectcount && (tn->afd >=0) && FD_ISSET(tn->afd, &rfd))

  01f5f	83 7c 24 50 00	 cmp	 DWORD PTR selectcount$[rsp], 0
  01f64	0f 84 05 01 00
	00		 je	 $LN183@tcpnje_thr
  01f6a	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01f6f	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [rax+324], 0
  01f76	0f 8c f3 00 00
	00		 jl	 $LN183@tcpnje_thr
  01f7c	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  01f84	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01f89	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  01f8f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  01f95	85 c0		 test	 eax, eax
  01f97	0f 84 d2 00 00
	00		 je	 $LN183@tcpnje_thr

; 2107 :         {
; 2108 :             DBGMSG(256, "HHCTN139D %4.4X:TCPNJE - active open TCPNJE protocol traffic. Connection state: %s\n",

  01f9d	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01fa2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01fa5	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01fab	c1 e8 0f	 shr	 eax, 15
  01fae	83 e0 01	 and	 eax, 1
  01fb1	85 c0		 test	 eax, eax
  01fb3	74 14		 je	 SHORT $LN186@tcpnje_thr
  01fb5	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01fba	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01fc0	25 00 01 00 00	 and	 eax, 256		; 00000100H
  01fc5	85 c0		 test	 eax, eax
  01fc7	75 14		 jne	 SHORT $LN185@tcpnje_thr
$LN186@tcpnje_thr:
  01fc9	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01fce	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01fd4	25 00 01 00 00	 and	 eax, 256		; 00000100H
  01fd9	85 c0		 test	 eax, eax
  01fdb	74 28		 je	 SHORT $LN184@tcpnje_thr
$LN185@tcpnje_thr:
  01fdd	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  01fe2	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  01fe9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  01ff0	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  01ff4	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  01ff8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160204
  01fff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN184@tcpnje_thr:

; 2109 :                 devnum, tcpnje_state_text[tn->state]);
; 2110 : 
; 2111 :             /* One of the causes of select() returning accounted for */
; 2112 :             selectcount--;

  02005	8b 44 24 50	 mov	 eax, DWORD PTR selectcount$[rsp]
  02009	ff c8		 dec	 eax
  0200b	89 44 24 50	 mov	 DWORD PTR selectcount$[rsp], eax

; 2113 : 
; 2114 :             /* Receive the incoming TCPNJE reply */
; 2115 :             rc = tcpnje_read(tn->afd, &tn->ttcactbuf, SIZEOF_TTC, tn);

  0200f	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02014	48 83 c0 68	 add	 rax, 104		; 00000068H
  02018	4c 8b 4c 24 40	 mov	 r9, QWORD PTR tn$[rsp]
  0201d	41 b8 21 00 00
	00		 mov	 r8d, 33			; 00000021H
  02023	48 8b d0	 mov	 rdx, rax
  02026	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0202b	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  02031	e8 00 00 00 00	 call	 tcpnje_read
  02036	89 44 24 54	 mov	 DWORD PTR rc$[rsp], eax

; 2116 : 
; 2117 :             /* Did we get the complete TTC? If not, wait for more before doing anything */
; 2118 :             if (rc == 0)

  0203a	83 7c 24 54 00	 cmp	 DWORD PTR rc$[rsp], 0
  0203f	75 2e		 jne	 SHORT $LN187@tcpnje_thr

; 2119 :             {
; 2120 :                 /* Process the incoming TCPNJE ACK, NAK or whatever */
; 2121 :                 tcpnje_process_reply(&tn->ttcactbuf, tn);

  02041	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02046	48 83 c0 68	 add	 rax, 104		; 00000068H
  0204a	48 8b 54 24 40	 mov	 rdx, QWORD PTR tn$[rsp]
  0204f	48 8b c8	 mov	 rcx, rax
  02052	e8 00 00 00 00	 call	 tcpnje_process_reply

; 2122 : 
; 2123 :                 /* Reset buffer pointer for next time something arrives */
; 2124 :                 tn->ttcpasbuf.inptr.address = tn->ttcpasbuf.base.address;

  02057	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0205c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  02061	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  02068	48 89 88 98 00
	00 00		 mov	 QWORD PTR [rax+152], rcx
$LN187@tcpnje_thr:
$LN183@tcpnje_thr:
$LN12@tcpnje_thr:

; 2125 :             }
; 2126 :         }
; 2127 : 
; 2128 :         /* Has an incoming call arrived? */
; 2129 :         while (selectcount && (tn->listening > 1) && FD_ISSET(tn->lfd, &rfd))

  0206f	83 7c 24 50 00	 cmp	 DWORD PTR selectcount$[rsp], 0
  02074	0f 84 c1 03 00
	00		 je	 $LN13@tcpnje_thr
  0207a	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0207f	0f b6 80 62 01
	00 00		 movzx	 eax, BYTE PTR [rax+354]
  02086	83 f8 01	 cmp	 eax, 1
  02089	0f 8e ac 03 00
	00		 jle	 $LN13@tcpnje_thr
  0208f	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  02097	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0209c	8b 88 40 01 00
	00		 mov	 ecx, DWORD PTR [rax+320]
  020a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  020a8	85 c0		 test	 eax, eax
  020aa	0f 84 8b 03 00
	00		 je	 $LN13@tcpnje_thr

; 2130 :         {
; 2131 :             /* This while block is really an if block with multiple exits */
; 2132 : 
; 2133 :             /* One of the causes of select() returning accounted for */
; 2134 :             selectcount--;

  020b0	8b 44 24 50	 mov	 eax, DWORD PTR selectcount$[rsp]
  020b4	ff c8		 dec	 eax
  020b6	89 44 24 50	 mov	 DWORD PTR selectcount$[rsp], eax

; 2135 : 
; 2136 :             /* Incoming connection to listener.  Not much choice but to accept it */
; 2137 :             tempfd = accept(tn->lfd, (struct sockaddr *)&remaddr, &remlength);

  020ba	4c 8d 84 24 b8
	00 00 00	 lea	 r8, QWORD PTR remlength$[rsp]
  020c2	48 8d 94 24 28
	01 00 00	 lea	 rdx, QWORD PTR remaddr$[rsp]
  020ca	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  020cf	8b 88 40 01 00
	00		 mov	 ecx, DWORD PTR [rax+320]
  020d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_accept
  020db	89 44 24 5c	 mov	 DWORD PTR tempfd$[rsp], eax

; 2138 :             if (tempfd < 0)

  020df	83 7c 24 5c 00	 cmp	 DWORD PTR tempfd$[rsp], 0
  020e4	7d 63		 jge	 SHORT $LN188@tcpnje_thr

; 2139 :             {
; 2140 :                 DBGMSG(4, "HHCTN062E %4.4X:TCPNJE - incoming connection - accept failed: %s\n",

  020e6	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  020eb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  020ee	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  020f4	c1 e8 0f	 shr	 eax, 15
  020f7	83 e0 01	 and	 eax, 1
  020fa	85 c0		 test	 eax, eax
  020fc	74 12		 je	 SHORT $LN191@tcpnje_thr
  020fe	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02103	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  02109	83 e0 04	 and	 eax, 4
  0210c	85 c0		 test	 eax, eax
  0210e	75 12		 jne	 SHORT $LN190@tcpnje_thr
$LN191@tcpnje_thr:
  02110	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02115	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0211b	83 e0 04	 and	 eax, 4
  0211e	85 c0		 test	 eax, eax
  02120	74 22		 je	 SHORT $LN189@tcpnje_thr
$LN190@tcpnje_thr:
  02122	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  02128	8b c8		 mov	 ecx, eax
  0212a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  02130	4c 8b c0	 mov	 r8, rax
  02133	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  02137	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160210
  0213e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN189@tcpnje_thr:

; 2141 :                         devnum, strerror(HSO_errno));
; 2142 :                 break;

  02144	e9 f2 02 00 00	 jmp	 $LN13@tcpnje_thr
$LN188@tcpnje_thr:

; 2143 :             }
; 2144 : 
; 2145 :             /* Try to find out where the call is coming from */
; 2146 :             if (remlength == sizeof(remaddr))

  02149	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR remlength$[rsp]
  02150	48 83 f8 10	 cmp	 rax, 16
  02154	0f 85 85 00 00
	00		 jne	 $LN192@tcpnje_thr

; 2147 :             {
; 2148 :                 DBGMSG(128, "HHCTN008I %4.4X:TCPNJE - incoming connection from %s:%d\n",

  0215a	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0215f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02162	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02168	c1 e8 0f	 shr	 eax, 15
  0216b	83 e0 01	 and	 eax, 1
  0216e	85 c0		 test	 eax, eax
  02170	74 14		 je	 SHORT $LN196@tcpnje_thr
  02172	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02177	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0217d	25 80 00 00 00	 and	 eax, 128		; 00000080H
  02182	85 c0		 test	 eax, eax
  02184	75 14		 jne	 SHORT $LN195@tcpnje_thr
$LN196@tcpnje_thr:
  02186	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0218b	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  02191	25 80 00 00 00	 and	 eax, 128		; 00000080H
  02196	85 c0		 test	 eax, eax
  02198	74 43		 je	 SHORT $LN194@tcpnje_thr
$LN195@tcpnje_thr:
  0219a	0f b7 8c 24 2a
	01 00 00	 movzx	 ecx, WORD PTR remaddr$[rsp+2]
  021a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ntohs
  021a8	0f b7 c0	 movzx	 eax, ax
  021ab	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv1273[rsp], eax
  021b2	8b 8c 24 2c 01
	00 00		 mov	 ecx, DWORD PTR remaddr$[rsp+4]
  021b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_ntoa
  021bf	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR tv1273[rsp]
  021c6	44 8b c9	 mov	 r9d, ecx
  021c9	4c 8b c0	 mov	 r8, rax
  021cc	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  021d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160216
  021d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN194@tcpnje_thr:

; 2149 :                         devnum, inet_ntoa(remaddr.sin_addr), ntohs(remaddr.sin_port));
; 2150 :             }

  021dd	eb 51		 jmp	 SHORT $LN193@tcpnje_thr
$LN192@tcpnje_thr:

; 2151 :             else
; 2152 :             {
; 2153 :                 DBGMSG(128, "HHCTN063I %4.4X:TCPNJE - incoming connection\n",

  021df	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  021e4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  021e7	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  021ed	c1 e8 0f	 shr	 eax, 15
  021f0	83 e0 01	 and	 eax, 1
  021f3	85 c0		 test	 eax, eax
  021f5	74 14		 je	 SHORT $LN199@tcpnje_thr
  021f7	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  021fc	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  02202	25 80 00 00 00	 and	 eax, 128		; 00000080H
  02207	85 c0		 test	 eax, eax
  02209	75 14		 jne	 SHORT $LN198@tcpnje_thr
$LN199@tcpnje_thr:
  0220b	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02210	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  02216	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0221b	85 c0		 test	 eax, eax
  0221d	74 11		 je	 SHORT $LN197@tcpnje_thr
$LN198@tcpnje_thr:
  0221f	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  02223	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160220
  0222a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN197@tcpnje_thr:
$LN193@tcpnje_thr:

; 2154 :                         devnum);
; 2155 :             }
; 2156 :             /* Check the line type & current operation */
; 2157 : 
; 2158 :             /* if DIAL=IN or DIAL=INOUT or DIAL=NO */
; 2159 :             if (tn->dialin || (tn->dialin + tn->dialout == 0))

  02230	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02235	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0223b	c1 e8 02	 shr	 eax, 2
  0223e	83 e0 01	 and	 eax, 1
  02241	85 c0		 test	 eax, eax
  02243	75 2c		 jne	 SHORT $LN201@tcpnje_thr
  02245	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0224a	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  02250	c1 e8 02	 shr	 eax, 2
  02253	83 e0 01	 and	 eax, 1
  02256	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  0225b	8b 89 64 01 00
	00		 mov	 ecx, DWORD PTR [rcx+356]
  02261	c1 e9 03	 shr	 ecx, 3
  02264	83 e1 01	 and	 ecx, 1
  02267	03 c1		 add	 eax, ecx
  02269	85 c0		 test	 eax, eax
  0226b	0f 85 68 01 00
	00		 jne	 $LN200@tcpnje_thr
$LN201@tcpnje_thr:

; 2160 :             {
; 2161 :                 /* Are we already dealing with an incoming connection? */
; 2162 :                 if (tn->pfd >= 0)

  02271	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02276	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [rax+328], 0
  0227d	7c 60		 jl	 SHORT $LN202@tcpnje_thr

; 2163 :                 {
; 2164 :                     /* Let's deal with the existing one first - shouldn't take long anyway. */
; 2165 :                     DBGMSG(512, "HHCTN064W %4.4X:TCPNJE - rejecting incoming connection due to connection already in progress\n",

  0227f	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02284	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02287	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0228d	c1 e8 0f	 shr	 eax, 15
  02290	83 e0 01	 and	 eax, 1
  02293	85 c0		 test	 eax, eax
  02295	74 14		 je	 SHORT $LN205@tcpnje_thr
  02297	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0229c	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  022a2	25 00 02 00 00	 and	 eax, 512		; 00000200H
  022a7	85 c0		 test	 eax, eax
  022a9	75 14		 jne	 SHORT $LN204@tcpnje_thr
$LN205@tcpnje_thr:
  022ab	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  022b0	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  022b6	25 00 02 00 00	 and	 eax, 512		; 00000200H
  022bb	85 c0		 test	 eax, eax
  022bd	74 11		 je	 SHORT $LN203@tcpnje_thr
$LN204@tcpnje_thr:
  022bf	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  022c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160227
  022ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN203@tcpnje_thr:

; 2166 :                             devnum);
; 2167 :                     close_socket(tempfd);

  022d0	8b 4c 24 5c	 mov	 ecx, DWORD PTR tempfd$[rsp]
  022d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 2168 :                     break;

  022da	e9 5c 01 00 00	 jmp	 $LN13@tcpnje_thr
$LN202@tcpnje_thr:

; 2169 :                 }
; 2170 : 
; 2171 :                 /* Turn non-blocking I/O on */
; 2172 :                 /* set socket to NON-blocking mode */
; 2173 :                 rc = socket_set_blocking_mode(tempfd, 0);

  022df	33 d2		 xor	 edx, edx
  022e1	8b 4c 24 5c	 mov	 ecx, DWORD PTR tempfd$[rsp]
  022e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_socket_set_blocking_mode
  022eb	89 44 24 54	 mov	 DWORD PTR rc$[rsp], eax

; 2174 :                 if (rc < 0)

  022ef	83 7c 24 54 00	 cmp	 DWORD PTR rc$[rsp], 0
  022f4	7d 77		 jge	 SHORT $LN206@tcpnje_thr

; 2175 :                 {
; 2176 :                    DBGMSG(4, "HHCTN065E %4.4X:TCPNJE - error setting socket for incoming call to non-blocking : %s\n",

  022f6	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  022fb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  022fe	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02304	c1 e8 0f	 shr	 eax, 15
  02307	83 e0 01	 and	 eax, 1
  0230a	85 c0		 test	 eax, eax
  0230c	74 12		 je	 SHORT $LN209@tcpnje_thr
  0230e	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02313	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  02319	83 e0 04	 and	 eax, 4
  0231c	85 c0		 test	 eax, eax
  0231e	75 12		 jne	 SHORT $LN208@tcpnje_thr
$LN209@tcpnje_thr:
  02320	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02325	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0232b	83 e0 04	 and	 eax, 4
  0232e	85 c0		 test	 eax, eax
  02330	74 2c		 je	 SHORT $LN207@tcpnje_thr
$LN208@tcpnje_thr:
  02332	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  02338	8b c8		 mov	 ecx, eax
  0233a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  02340	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  02345	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  02348	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  0234c	4c 8b c0	 mov	 r8, rax
  0234f	8b d1		 mov	 edx, ecx
  02351	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160232
  02358	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN207@tcpnje_thr:

; 2177 :                                     tn->dev->devnum, strerror(HSO_errno));
; 2178 :                    close_socket(tempfd);

  0235e	8b 4c 24 5c	 mov	 ecx, DWORD PTR tempfd$[rsp]
  02362	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 2179 :                    break;

  02368	e9 ce 00 00 00	 jmp	 $LN13@tcpnje_thr
$LN206@tcpnje_thr:

; 2180 :                 }
; 2181 : 
; 2182 :                 tn->pfd = tempfd;

  0236d	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02372	8b 4c 24 5c	 mov	 ecx, DWORD PTR tempfd$[rsp]
  02376	89 88 48 01 00
	00		 mov	 DWORD PTR [rax+328], ecx

; 2183 :                 disable_nagle(tn->pfd);

  0237c	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02381	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  02387	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_disable_nagle

; 2184 : 
; 2185 :                 /* Don't mess up any existing connection in case this one is not for us or doesn't work out */
; 2186 :                 if (tn->state == TCPLISTEN) tn->state = TCPCONPAS;

  0238d	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02392	83 b8 54 01 00
	00 01		 cmp	 DWORD PTR [rax+340], 1
  02399	75 0f		 jne	 SHORT $LN210@tcpnje_thr
  0239b	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  023a0	c7 80 54 01 00
	00 04 00 00 00	 mov	 DWORD PTR [rax+340], 4
$LN210@tcpnje_thr:

; 2187 : 
; 2188 :                 /* Prepare to receive incoming TCPNJE OPEN */
; 2189 :                 tn->ttcpasbuf.inptr.address = tn->ttcpasbuf.base.address;

  023aa	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  023af	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  023b4	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  023bb	48 89 88 98 00
	00 00		 mov	 QWORD PTR [rax+152], rcx

; 2190 : 
; 2191 :                 /* if this is a leased line, accept the */
; 2192 :                 /* call anyway                          */
; 2193 :                 if (tn->dialin == 0)

  023c2	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  023c7	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  023cd	c1 e8 02	 shr	 eax, 2
  023d0	83 e0 01	 and	 eax, 1
  023d3	85 c0		 test	 eax, eax
  023d5	75 02		 jne	 SHORT $LN211@tcpnje_thr

; 2194 :                 {
; 2195 :                    break;

  023d7	eb 62		 jmp	 SHORT $LN13@tcpnje_thr
$LN211@tcpnje_thr:
$LN200@tcpnje_thr:

; 2196 :                 }
; 2197 :             }
; 2198 :             /* All other cases : just reject the call */
; 2199 :             DBGMSG(512, "HHCTN066W %4.4X:TCPNJE - rejecting unexpected incoming call\n",

  023d9	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  023de	48 8b 00	 mov	 rax, QWORD PTR [rax]
  023e1	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  023e7	c1 e8 0f	 shr	 eax, 15
  023ea	83 e0 01	 and	 eax, 1
  023ed	85 c0		 test	 eax, eax
  023ef	74 14		 je	 SHORT $LN214@tcpnje_thr
  023f1	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  023f6	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  023fc	25 00 02 00 00	 and	 eax, 512		; 00000200H
  02401	85 c0		 test	 eax, eax
  02403	75 14		 jne	 SHORT $LN213@tcpnje_thr
$LN214@tcpnje_thr:
  02405	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0240a	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  02410	25 00 02 00 00	 and	 eax, 512		; 00000200H
  02415	85 c0		 test	 eax, eax
  02417	74 11		 je	 SHORT $LN212@tcpnje_thr
$LN213@tcpnje_thr:
  02419	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  0241d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160238
  02424	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN212@tcpnje_thr:

; 2200 :                     devnum);
; 2201 :             close_socket(tempfd);

  0242a	8b 4c 24 5c	 mov	 ecx, DWORD PTR tempfd$[rsp]
  0242e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 2202 : 
; 2203 :             break;

  02434	eb 05		 jmp	 SHORT $LN13@tcpnje_thr

; 2204 :         }

  02436	e9 34 fc ff ff	 jmp	 $LN12@tcpnje_thr
$LN13@tcpnje_thr:

; 2205 : 
; 2206 :         /* All the causes of select() returning should be dealt with by now */
; 2207 :         if (selectcount)

  0243b	83 7c 24 50 00	 cmp	 DWORD PTR selectcount$[rsp], 0
  02440	0f 84 15 03 00
	00		 je	 $LN215@tcpnje_thr

; 2208 :         {
; 2209 :             if (errorcount067 < TCPNJE_MAX_ERRORCOUNT)

  02446	83 7c 24 70 05	 cmp	 DWORD PTR errorcount067$[rsp], 5
  0244b	0f 8d ac 02 00
	00		 jge	 $LN216@tcpnje_thr

; 2210 :             {
; 2211 :                 /* Something unexpected has gone wrong, as opposed to something expected */
; 2212 : 
; 2213 :                 DBGMSG(1, "HHCTN067E %4.4X:TCPNJE - possible logic error.  Outstanding count from select(): %d\n",

  02451	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02456	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02459	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0245f	c1 e8 0f	 shr	 eax, 15
  02462	83 e0 01	 and	 eax, 1
  02465	85 c0		 test	 eax, eax
  02467	74 12		 je	 SHORT $LN220@tcpnje_thr
  02469	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0246e	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  02474	83 e0 01	 and	 eax, 1
  02477	85 c0		 test	 eax, eax
  02479	75 12		 jne	 SHORT $LN219@tcpnje_thr
$LN220@tcpnje_thr:
  0247b	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02480	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  02486	83 e0 01	 and	 eax, 1
  02489	85 c0		 test	 eax, eax
  0248b	74 16		 je	 SHORT $LN218@tcpnje_thr
$LN219@tcpnje_thr:
  0248d	44 8b 44 24 50	 mov	 r8d, DWORD PTR selectcount$[rsp]
  02492	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  02496	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160245
  0249d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN218@tcpnje_thr:

; 2214 :                             devnum, selectcount);
; 2215 : 
; 2216 :                 /* Lets try to diagnose some possible causes of this anomaly */
; 2217 : 
; 2218 :                 if ((tn->sfd >= 0) && FD_ISSET(tn->sfd, &wfd))

  024a3	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  024a8	83 b8 3c 01 00
	00 00		 cmp	 DWORD PTR [rax+316], 0
  024af	7c 6a		 jl	 SHORT $LN221@tcpnje_thr
  024b1	48 8d 94 24 50
	21 00 00	 lea	 rdx, QWORD PTR wfd$[rsp]
  024b9	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  024be	8b 88 3c 01 00
	00		 mov	 ecx, DWORD PTR [rax+316]
  024c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  024ca	85 c0		 test	 eax, eax
  024cc	74 4d		 je	 SHORT $LN221@tcpnje_thr

; 2219 :                     DBGMSG(1, "HHCTN068W %4.4X:TCPNJE - unexpected return from select() due to write event on data connection\n",

  024ce	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  024d3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  024d6	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  024dc	c1 e8 0f	 shr	 eax, 15
  024df	83 e0 01	 and	 eax, 1
  024e2	85 c0		 test	 eax, eax
  024e4	74 12		 je	 SHORT $LN224@tcpnje_thr
  024e6	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  024eb	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  024f1	83 e0 01	 and	 eax, 1
  024f4	85 c0		 test	 eax, eax
  024f6	75 12		 jne	 SHORT $LN223@tcpnje_thr
$LN224@tcpnje_thr:
  024f8	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  024fd	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  02503	83 e0 01	 and	 eax, 1
  02506	85 c0		 test	 eax, eax
  02508	74 11		 je	 SHORT $LN222@tcpnje_thr
$LN223@tcpnje_thr:
  0250a	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  0250e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160250
  02515	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN222@tcpnje_thr:
$LN221@tcpnje_thr:

; 2220 :                             devnum);
; 2221 : 
; 2222 :                 if ((tn->pfd >= 0) && FD_ISSET(tn->pfd, &rfd))

  0251b	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02520	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [rax+328], 0
  02527	7c 6a		 jl	 SHORT $LN225@tcpnje_thr
  02529	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  02531	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02536	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  0253c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  02542	85 c0		 test	 eax, eax
  02544	74 4d		 je	 SHORT $LN225@tcpnje_thr

; 2223 :                     DBGMSG(1, "HHCTN069W %4.4X:TCPNJE - unexpected connection traffic received on incoming connection\n",

  02546	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0254b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0254e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02554	c1 e8 0f	 shr	 eax, 15
  02557	83 e0 01	 and	 eax, 1
  0255a	85 c0		 test	 eax, eax
  0255c	74 12		 je	 SHORT $LN228@tcpnje_thr
  0255e	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02563	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  02569	83 e0 01	 and	 eax, 1
  0256c	85 c0		 test	 eax, eax
  0256e	75 12		 jne	 SHORT $LN227@tcpnje_thr
$LN228@tcpnje_thr:
  02570	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02575	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0257b	83 e0 01	 and	 eax, 1
  0257e	85 c0		 test	 eax, eax
  02580	74 11		 je	 SHORT $LN226@tcpnje_thr
$LN227@tcpnje_thr:
  02582	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  02586	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160255
  0258d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN226@tcpnje_thr:
$LN225@tcpnje_thr:

; 2224 :                             devnum);
; 2225 : 
; 2226 :                 if ((tn->afd >=0) && FD_ISSET(tn->afd, &rfd))

  02593	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02598	83 b8 44 01 00
	00 00		 cmp	 DWORD PTR [rax+324], 0
  0259f	7c 6a		 jl	 SHORT $LN229@tcpnje_thr
  025a1	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  025a9	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  025ae	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  025b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  025ba	85 c0		 test	 eax, eax
  025bc	74 4d		 je	 SHORT $LN229@tcpnje_thr

; 2227 :                     DBGMSG(1, "HHCTN070W %4.4X:TCPNJE - unexpected connection traffic received on outgoing connection\n",

  025be	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  025c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  025c6	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  025cc	c1 e8 0f	 shr	 eax, 15
  025cf	83 e0 01	 and	 eax, 1
  025d2	85 c0		 test	 eax, eax
  025d4	74 12		 je	 SHORT $LN232@tcpnje_thr
  025d6	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  025db	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  025e1	83 e0 01	 and	 eax, 1
  025e4	85 c0		 test	 eax, eax
  025e6	75 12		 jne	 SHORT $LN231@tcpnje_thr
$LN232@tcpnje_thr:
  025e8	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  025ed	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  025f3	83 e0 01	 and	 eax, 1
  025f6	85 c0		 test	 eax, eax
  025f8	74 11		 je	 SHORT $LN230@tcpnje_thr
$LN231@tcpnje_thr:
  025fa	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  025fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160260
  02605	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN230@tcpnje_thr:
$LN229@tcpnje_thr:

; 2228 :                             devnum);
; 2229 : 
; 2230 :                 if ((tn->sfd >= 0) && FD_ISSET(tn->sfd, &rfd))

  0260b	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02610	83 b8 3c 01 00
	00 00		 cmp	 DWORD PTR [rax+316], 0
  02617	7c 6a		 jl	 SHORT $LN233@tcpnje_thr
  02619	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  02621	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02626	8b 88 3c 01 00
	00		 mov	 ecx, DWORD PTR [rax+316]
  0262c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  02632	85 c0		 test	 eax, eax
  02634	74 4d		 je	 SHORT $LN233@tcpnje_thr

; 2231 :                     DBGMSG(1, "HHCTN071W %4.4X:TCPNJE - traffic received on data connection when not in connected state\n",

  02636	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0263b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0263e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02644	c1 e8 0f	 shr	 eax, 15
  02647	83 e0 01	 and	 eax, 1
  0264a	85 c0		 test	 eax, eax
  0264c	74 12		 je	 SHORT $LN236@tcpnje_thr
  0264e	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02653	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  02659	83 e0 01	 and	 eax, 1
  0265c	85 c0		 test	 eax, eax
  0265e	75 12		 jne	 SHORT $LN235@tcpnje_thr
$LN236@tcpnje_thr:
  02660	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02665	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0266b	83 e0 01	 and	 eax, 1
  0266e	85 c0		 test	 eax, eax
  02670	74 11		 je	 SHORT $LN234@tcpnje_thr
$LN235@tcpnje_thr:
  02672	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  02676	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160265
  0267d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN234@tcpnje_thr:
$LN233@tcpnje_thr:

; 2232 :                             devnum);
; 2233 : 
; 2234 :                 if ((tn->lfd >= 0) && FD_ISSET(tn->lfd, &rfd))

  02683	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02688	83 b8 40 01 00
	00 00		 cmp	 DWORD PTR [rax+320], 0
  0268f	7c 6a		 jl	 SHORT $LN237@tcpnje_thr
  02691	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  02699	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0269e	8b 88 40 01 00
	00		 mov	 ecx, DWORD PTR [rax+320]
  026a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  026aa	85 c0		 test	 eax, eax
  026ac	74 4d		 je	 SHORT $LN237@tcpnje_thr

; 2235 :                     DBGMSG(1, "HHCTN072W %4.4X:TCPNJE - traffic received on listener port when not listening\n",

  026ae	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  026b3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  026b6	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  026bc	c1 e8 0f	 shr	 eax, 15
  026bf	83 e0 01	 and	 eax, 1
  026c2	85 c0		 test	 eax, eax
  026c4	74 12		 je	 SHORT $LN240@tcpnje_thr
  026c6	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  026cb	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  026d1	83 e0 01	 and	 eax, 1
  026d4	85 c0		 test	 eax, eax
  026d6	75 12		 jne	 SHORT $LN239@tcpnje_thr
$LN240@tcpnje_thr:
  026d8	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  026dd	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  026e3	83 e0 01	 and	 eax, 1
  026e6	85 c0		 test	 eax, eax
  026e8	74 11		 je	 SHORT $LN238@tcpnje_thr
$LN239@tcpnje_thr:
  026ea	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  026ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160270
  026f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN238@tcpnje_thr:
$LN237@tcpnje_thr:

; 2236 :                             devnum);
; 2237 : 
; 2238 :                 /* If it wasn't one of the above, it was probably a socket file descriptor
; 2239 :                    that was closed and set to -1.  Who knows which one and how though.      */
; 2240 :             }

  026fb	eb 54		 jmp	 SHORT $LN217@tcpnje_thr
$LN216@tcpnje_thr:

; 2241 :             else if (errorcount067 == TCPNJE_MAX_ERRORCOUNT)

  026fd	83 7c 24 70 05	 cmp	 DWORD PTR errorcount067$[rsp], 5
  02702	75 4d		 jne	 SHORT $LN241@tcpnje_thr

; 2242 :             {
; 2243 :                 DBGMSG(1, "HHCTN099W %4.4X:TCPNJE - repeating messages suppressed.\n",

  02704	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02709	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0270c	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02712	c1 e8 0f	 shr	 eax, 15
  02715	83 e0 01	 and	 eax, 1
  02718	85 c0		 test	 eax, eax
  0271a	74 12		 je	 SHORT $LN244@tcpnje_thr
  0271c	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02721	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  02727	83 e0 01	 and	 eax, 1
  0272a	85 c0		 test	 eax, eax
  0272c	75 12		 jne	 SHORT $LN243@tcpnje_thr
$LN244@tcpnje_thr:
  0272e	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02733	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  02739	83 e0 01	 and	 eax, 1
  0273c	85 c0		 test	 eax, eax
  0273e	74 11		 je	 SHORT $LN242@tcpnje_thr
$LN243@tcpnje_thr:
  02740	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  02744	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160275
  0274b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN242@tcpnje_thr:
$LN241@tcpnje_thr:
$LN217@tcpnje_thr:

; 2244 :                             devnum);
; 2245 :             }
; 2246 : 
; 2247 :             errorcount067++;

  02751	8b 44 24 70	 mov	 eax, DWORD PTR errorcount067$[rsp]
  02755	ff c0		 inc	 eax
  02757	89 44 24 70	 mov	 DWORD PTR errorcount067$[rsp], eax
$LN215@tcpnje_thr:

; 2248 :         }
; 2249 :     }

  0275b	e9 2b da ff ff	 jmp	 $LN271@tcpnje_thr
$LN3@tcpnje_thr:

; 2250 : 
; 2251 :     /* If thread is exiting due to an error, release any I/O thread waiting on it, otherwise it will hang forever */
; 2252 :     if ((tn->curpending != TCPNJE_PEND_IDLE) && (tn->curpending != TCPNJE_PEND_SHUTDOWN))

  02760	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02765	0f b6 80 60 01
	00 00		 movzx	 eax, BYTE PTR [rax+352]
  0276c	85 c0		 test	 eax, eax
  0276e	74 2a		 je	 SHORT $LN245@tcpnje_thr
  02770	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02775	0f b6 80 60 01
	00 00		 movzx	 eax, BYTE PTR [rax+352]
  0277c	83 f8 0a	 cmp	 eax, 10
  0277f	74 19		 je	 SHORT $LN245@tcpnje_thr

; 2253 :     {
; 2254 :         signal_condition(&tn->ipc);

  02781	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  02786	48 83 c0 50	 add	 rax, 80			; 00000050H
  0278a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160277
  02791	48 8b c8	 mov	 rcx, rax
  02794	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition
$LN245@tcpnje_thr:

; 2255 :     }
; 2256 : 
; 2257 :     tn->curpending = TCPNJE_PEND_CLOSED;

  0279a	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  0279f	c6 80 60 01 00
	00 09		 mov	 BYTE PTR [rax+352], 9

; 2258 :     /* Check if we already signaled the init process  */
; 2259 :     if (!init_signaled)

  027a6	83 7c 24 7c 00	 cmp	 DWORD PTR init_signaled$[rsp], 0
  027ab	75 19		 jne	 SHORT $LN246@tcpnje_thr

; 2260 :     {
; 2261 :         signal_condition(&tn->ipc);

  027ad	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  027b2	48 83 c0 50	 add	 rax, 80			; 00000050H
  027b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160279
  027bd	48 8b c8	 mov	 rcx, rax
  027c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition
$LN246@tcpnje_thr:

; 2262 :     }
; 2263 :     /* TCPNJE is shutting down - terminate the thread */
; 2264 :     /* NOTE : the requestor was already notified upon */
; 2265 :     /*        detection of PEND_SHTDOWN. However      */
; 2266 :     /*        the requestor will only run when the    */
; 2267 :     /*        lock is released, because back          */
; 2268 :     /*        notification was made while holding     */
; 2269 :     /*        the lock                                */
; 2270 :     logmsg("HHCTN009I %4.4X:TCPNJE - networking thread terminated\n",

  027c6	8b 54 24 48	 mov	 edx, DWORD PTR devnum$[rsp]
  027ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160280
  027d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg

; 2271 :             devnum);
; 2272 :     tn->have_thread = 0;

  027d7	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  027dc	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  027e2	83 e0 ef	 and	 eax, -17		; ffffffefH
  027e5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tn$[rsp]
  027ea	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax

; 2273 :     release_lock(&tn->lock);

  027f0	48 8b 44 24 40	 mov	 rax, QWORD PTR tn$[rsp]
  027f5	48 83 c0 60	 add	 rax, 96			; 00000060H
  027f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160281
  02800	48 8b c8	 mov	 rcx, rax
  02803	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2274 :     return NULL;

  02809	33 c0		 xor	 eax, eax

; 2275 : }

  0280b	48 8b 8c 24 90
	61 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  02813	48 33 cc	 xor	 rcx, rsp
  02816	e8 00 00 00 00	 call	 __security_check_cookie
  0281b	48 81 c4 a8 61
	00 00		 add	 rsp, 25000		; 000061a8H
  02822	c3		 ret	 0
  02823	90		 npad	 1
$LN272@tcpnje_thr:
  02824	00 00 00 00	 DD	 $LN23@tcpnje_thr
  02828	00 00 00 00	 DD	 $LN28@tcpnje_thr
  0282c	00 00 00 00	 DD	 $LN35@tcpnje_thr
  02830	00 00 00 00	 DD	 $LN31@tcpnje_thr
  02834	00 00 00 00	 DD	 $LN64@tcpnje_thr
  02838	00 00 00 00	 DD	 $LN73@tcpnje_thr
  0283c	00 00 00 00	 DD	 $LN76@tcpnje_thr
  02840	00 00 00 00	 DD	 $LN77@tcpnje_thr
  02844	00 00 00 00	 DD	 $LN77@tcpnje_thr
  02848	00 00 00 00	 DD	 $LN21@tcpnje_thr
tcpnje_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
tv234 = 48
tv281 = 52
tv330 = 56
tv374 = 60
timenow$1 = 64
tv75 = 72
tv82 = 80
tv201 = 88
tv208 = 96
tv248 = 104
tv255 = 112
tv342 = 120
tv349 = 128
rnodestring$ = 136
lnodestring$ = 152
typestring$ = 168
__$ArrayPad$ = 184
buffer$ = 208
tn$ = 216
tcpnje_process_reply PROC

; 1312 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1313 :     char typestring[9], lnodestring[9], rnodestring[9];
; 1314 : 
; 1315 :     DBGMSG(256, "HHCTN109D %4.4X:TCPNJE - processing TCPNJE %s received for link %s - %s",

  00023	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0002b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00034	c1 e8 0f	 shr	 eax, 15
  00037	83 e0 01	 and	 eax, 1
  0003a	85 c0		 test	 eax, eax
  0003c	74 17		 je	 SHORT $LN4@tcpnje_pro
  0003e	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00046	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0004c	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00051	85 c0		 test	 eax, eax
  00053	75 1b		 jne	 SHORT $LN3@tcpnje_pro
$LN4@tcpnje_pro:
  00055	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0005d	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00063	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00068	85 c0		 test	 eax, eax
  0006a	0f 84 a5 00 00
	00		 je	 $LN2@tcpnje_pro
$LN3@tcpnje_pro:
  00070	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  00078	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007b	48 83 c0 08	 add	 rax, 8
  0007f	4c 8b c0	 mov	 r8, rax
  00082	ba 09 00 00 00	 mov	 edx, 9
  00087	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  0008f	e8 00 00 00 00	 call	 guest_to_host_string
  00094	48 89 44 24 48	 mov	 QWORD PTR tv75[rsp], rax
  00099	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  000a1	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a4	48 83 c1 14	 add	 rcx, 20
  000a8	4c 8b c1	 mov	 r8, rcx
  000ab	ba 09 00 00 00	 mov	 edx, 9
  000b0	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  000b8	e8 00 00 00 00	 call	 guest_to_host_string
  000bd	48 89 44 24 50	 mov	 QWORD PTR tv82[rsp], rax
  000c2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  000ca	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000cd	4c 8b c1	 mov	 r8, rcx
  000d0	ba 09 00 00 00	 mov	 edx, 9
  000d5	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR typestring$[rsp]
  000dd	e8 00 00 00 00	 call	 guest_to_host_string
  000e2	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  000ea	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ed	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  000f1	48 8b 54 24 48	 mov	 rdx, QWORD PTR tv75[rsp]
  000f6	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  000fb	48 8b 54 24 50	 mov	 rdx, QWORD PTR tv82[rsp]
  00100	4c 8b ca	 mov	 r9, rdx
  00103	4c 8b c0	 mov	 r8, rax
  00106	8b d1		 mov	 edx, ecx
  00108	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159897
  0010f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN2@tcpnje_pro:

; 1316 :                   tn->dev->devnum, guest_to_host_string(typestring, sizeof(typestring), buffer->base.ttc->type),
; 1317 :                               guest_to_host_string(lnodestring, sizeof(lnodestring), buffer->base.ttc->ohost),
; 1318 :                               guest_to_host_string(rnodestring, sizeof(rnodestring), buffer->base.ttc->rhost));
; 1319 : 
; 1320 :     if (!memcmp(buffer->base.ttc->type, TCPNJE_NAK, sizeof(buffer->base.ttc->type)))

  00115	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  0011d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00120	41 b8 08 00 00
	00		 mov	 r8d, 8
  00126	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:TCPNJE_NAK
  0012d	48 8b c8	 mov	 rcx, rax
  00130	e8 00 00 00 00	 call	 memcmp
  00135	85 c0		 test	 eax, eax
  00137	75 69		 jne	 SHORT $LN5@tcpnje_pro

; 1321 :     {
; 1322 :         DBGMSG(256, " reason code %d\n", buffer->base.ttc->r);

  00139	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00141	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00144	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0014a	c1 e8 0f	 shr	 eax, 15
  0014d	83 e0 01	 and	 eax, 1
  00150	85 c0		 test	 eax, eax
  00152	74 17		 je	 SHORT $LN9@tcpnje_pro
  00154	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0015c	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00162	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00167	85 c0		 test	 eax, eax
  00169	75 17		 jne	 SHORT $LN8@tcpnje_pro
$LN9@tcpnje_pro:
  0016b	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00173	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00179	25 00 01 00 00	 and	 eax, 256		; 00000100H
  0017e	85 c0		 test	 eax, eax
  00180	74 1e		 je	 SHORT $LN7@tcpnje_pro
$LN8@tcpnje_pro:
  00182	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  0018a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0018d	0f b6 40 20	 movzx	 eax, BYTE PTR [rax+32]
  00191	8b d0		 mov	 edx, eax
  00193	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159903
  0019a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN7@tcpnje_pro:

; 1323 :     }

  001a0	eb 56		 jmp	 SHORT $LN6@tcpnje_pro
$LN5@tcpnje_pro:

; 1324 :     else
; 1325 :     {
; 1326 :         DBGMSG(256, "\n");

  001a2	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  001aa	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001ad	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  001b3	c1 e8 0f	 shr	 eax, 15
  001b6	83 e0 01	 and	 eax, 1
  001b9	85 c0		 test	 eax, eax
  001bb	74 17		 je	 SHORT $LN12@tcpnje_pro
  001bd	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  001c5	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  001cb	25 00 01 00 00	 and	 eax, 256		; 00000100H
  001d0	85 c0		 test	 eax, eax
  001d2	75 17		 jne	 SHORT $LN11@tcpnje_pro
$LN12@tcpnje_pro:
  001d4	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  001dc	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  001e2	25 00 01 00 00	 and	 eax, 256		; 00000100H
  001e7	85 c0		 test	 eax, eax
  001e9	74 0d		 je	 SHORT $LN10@tcpnje_pro
$LN11@tcpnje_pro:
  001eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159907
  001f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN10@tcpnje_pro:
$LN6@tcpnje_pro:

; 1327 :     }
; 1328 : 
; 1329 :     /* Do the names of both ends of the link correspond with an OPEN we would have sent out? */
; 1330 :     if ((memcmp(tn->rnode, buffer->base.ttc->rhost, sizeof(buffer->base.ttc->rhost))) ||

  001f8	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  00200	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00203	48 83 c0 08	 add	 rax, 8
  00207	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  0020f	48 83 c1 38	 add	 rcx, 56			; 00000038H
  00213	41 b8 08 00 00
	00		 mov	 r8d, 8
  00219	48 8b d0	 mov	 rdx, rax
  0021c	e8 00 00 00 00	 call	 memcmp
  00221	85 c0		 test	 eax, eax
  00223	75 31		 jne	 SHORT $LN14@tcpnje_pro
  00225	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  0022d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00230	48 83 c0 14	 add	 rax, 20
  00234	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  0023c	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00240	41 b8 08 00 00
	00		 mov	 r8d, 8
  00246	48 8b d0	 mov	 rdx, rax
  00249	e8 00 00 00 00	 call	 memcmp
  0024e	85 c0		 test	 eax, eax
  00250	0f 84 54 01 00
	00		 je	 $LN13@tcpnje_pro
$LN14@tcpnje_pro:

; 1331 :         (memcmp(tn->lnode, buffer->base.ttc->ohost, sizeof(buffer->base.ttc->ohost))))
; 1332 :     {
; 1333 :         DBGMSG(256, "HHCTN121D %4.4X:TCPNJE - ignoring TCPNJE %s received for unrecognised link %s - %s\n",

  00256	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0025e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00261	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00267	c1 e8 0f	 shr	 eax, 15
  0026a	83 e0 01	 and	 eax, 1
  0026d	85 c0		 test	 eax, eax
  0026f	74 17		 je	 SHORT $LN17@tcpnje_pro
  00271	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00279	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0027f	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00284	85 c0		 test	 eax, eax
  00286	75 1b		 jne	 SHORT $LN16@tcpnje_pro
$LN17@tcpnje_pro:
  00288	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00290	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00296	25 00 01 00 00	 and	 eax, 256		; 00000100H
  0029b	85 c0		 test	 eax, eax
  0029d	0f 84 a5 00 00
	00		 je	 $LN15@tcpnje_pro
$LN16@tcpnje_pro:
  002a3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  002ab	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002ae	48 83 c0 08	 add	 rax, 8
  002b2	4c 8b c0	 mov	 r8, rax
  002b5	ba 09 00 00 00	 mov	 edx, 9
  002ba	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  002c2	e8 00 00 00 00	 call	 guest_to_host_string
  002c7	48 89 44 24 58	 mov	 QWORD PTR tv201[rsp], rax
  002cc	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  002d4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  002d7	48 83 c1 14	 add	 rcx, 20
  002db	4c 8b c1	 mov	 r8, rcx
  002de	ba 09 00 00 00	 mov	 edx, 9
  002e3	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  002eb	e8 00 00 00 00	 call	 guest_to_host_string
  002f0	48 89 44 24 60	 mov	 QWORD PTR tv208[rsp], rax
  002f5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  002fd	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00300	4c 8b c1	 mov	 r8, rcx
  00303	ba 09 00 00 00	 mov	 edx, 9
  00308	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR typestring$[rsp]
  00310	e8 00 00 00 00	 call	 guest_to_host_string
  00315	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  0031d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00320	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00324	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv201[rsp]
  00329	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0032e	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv208[rsp]
  00333	4c 8b ca	 mov	 r9, rdx
  00336	4c 8b c0	 mov	 r8, rax
  00339	8b d1		 mov	 edx, ecx
  0033b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159913
  00342	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN15@tcpnje_pro:

; 1334 :                       tn->dev->devnum, guest_to_host_string(typestring, sizeof(typestring), buffer->base.ttc->type),
; 1335 :                                   guest_to_host_string(lnodestring, sizeof(lnodestring), buffer->base.ttc->ohost),
; 1336 :                                   guest_to_host_string(rnodestring, sizeof(rnodestring), buffer->base.ttc->rhost));
; 1337 :         close_socket(tn->afd);

  00348	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00350	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  00356	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1338 :         tn->afd = -1;

  0035c	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00364	c7 80 44 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+324], -1

; 1339 :         tn->state = tn->listening ? TCPLISTEN : CLOSED;

  0036e	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00376	0f b6 80 62 01
	00 00		 movzx	 eax, BYTE PTR [rax+354]
  0037d	85 c0		 test	 eax, eax
  0037f	74 0a		 je	 SHORT $LN32@tcpnje_pro
  00381	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv234[rsp], 1
  00389	eb 08		 jmp	 SHORT $LN33@tcpnje_pro
$LN32@tcpnje_pro:
  0038b	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv234[rsp], 0
$LN33@tcpnje_pro:
  00393	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0039b	8b 4c 24 30	 mov	 ecx, DWORD PTR tv234[rsp]
  0039f	89 88 54 01 00
	00		 mov	 DWORD PTR [rax+340], ecx

; 1340 :         return;

  003a5	e9 56 04 00 00	 jmp	 $LN1@tcpnje_pro
$LN13@tcpnje_pro:

; 1341 :     }
; 1342 : 
; 1343 :     /* Are we expecting a TCPNJE ACK or NAK ie has a TCPNJE OPEN been sent out for this link? */
; 1344 :     if (tn->state != NJEOPNSNT)

  003aa	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  003b2	83 b8 54 01 00
	00 05		 cmp	 DWORD PTR [rax+340], 5
  003b9	0f 84 54 01 00
	00		 je	 $LN18@tcpnje_pro

; 1345 :     {
; 1346 :         DBGMSG(256, "HHCTN122D %4.4X:TCPNJE - ignoring unexpected TCPNJE %s received for link %s - %s\n",

  003bf	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  003c7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003ca	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  003d0	c1 e8 0f	 shr	 eax, 15
  003d3	83 e0 01	 and	 eax, 1
  003d6	85 c0		 test	 eax, eax
  003d8	74 17		 je	 SHORT $LN21@tcpnje_pro
  003da	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  003e2	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  003e8	25 00 01 00 00	 and	 eax, 256		; 00000100H
  003ed	85 c0		 test	 eax, eax
  003ef	75 1b		 jne	 SHORT $LN20@tcpnje_pro
$LN21@tcpnje_pro:
  003f1	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  003f9	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  003ff	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00404	85 c0		 test	 eax, eax
  00406	0f 84 a5 00 00
	00		 je	 $LN19@tcpnje_pro
$LN20@tcpnje_pro:
  0040c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  00414	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00417	48 83 c0 08	 add	 rax, 8
  0041b	4c 8b c0	 mov	 r8, rax
  0041e	ba 09 00 00 00	 mov	 edx, 9
  00423	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  0042b	e8 00 00 00 00	 call	 guest_to_host_string
  00430	48 89 44 24 68	 mov	 QWORD PTR tv248[rsp], rax
  00435	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  0043d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00440	48 83 c1 14	 add	 rcx, 20
  00444	4c 8b c1	 mov	 r8, rcx
  00447	ba 09 00 00 00	 mov	 edx, 9
  0044c	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  00454	e8 00 00 00 00	 call	 guest_to_host_string
  00459	48 89 44 24 70	 mov	 QWORD PTR tv255[rsp], rax
  0045e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00466	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00469	4c 8b c1	 mov	 r8, rcx
  0046c	ba 09 00 00 00	 mov	 edx, 9
  00471	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR typestring$[rsp]
  00479	e8 00 00 00 00	 call	 guest_to_host_string
  0047e	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00486	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00489	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  0048d	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv248[rsp]
  00492	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  00497	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv255[rsp]
  0049c	4c 8b ca	 mov	 r9, rdx
  0049f	4c 8b c0	 mov	 r8, rax
  004a2	8b d1		 mov	 edx, ecx
  004a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159918
  004ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN19@tcpnje_pro:

; 1347 :                       tn->dev->devnum, guest_to_host_string(typestring, sizeof(typestring), buffer->base.ttc->type),
; 1348 :                                   guest_to_host_string(lnodestring, sizeof(lnodestring), buffer->base.ttc->ohost),
; 1349 :                                   guest_to_host_string(rnodestring, sizeof(rnodestring), buffer->base.ttc->rhost));
; 1350 : 
; 1351 :         close_socket(tn->afd);

  004b1	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  004b9	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  004bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1352 :         tn->afd = -1;

  004c5	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  004cd	c7 80 44 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+324], -1

; 1353 :         tn->state = tn->listening ? TCPLISTEN : CLOSED;

  004d7	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  004df	0f b6 80 62 01
	00 00		 movzx	 eax, BYTE PTR [rax+354]
  004e6	85 c0		 test	 eax, eax
  004e8	74 0a		 je	 SHORT $LN34@tcpnje_pro
  004ea	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv281[rsp], 1
  004f2	eb 08		 jmp	 SHORT $LN35@tcpnje_pro
$LN34@tcpnje_pro:
  004f4	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv281[rsp], 0
$LN35@tcpnje_pro:
  004fc	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00504	8b 4c 24 34	 mov	 ecx, DWORD PTR tv281[rsp]
  00508	89 88 54 01 00
	00		 mov	 DWORD PTR [rax+340], ecx

; 1354 :         return;

  0050e	e9 ed 02 00 00	 jmp	 $LN1@tcpnje_pro
$LN18@tcpnje_pro:

; 1355 :     }
; 1356 : 
; 1357 :     if (!memcmp(buffer->base.ttc->type, TCPNJE_ACK, sizeof(buffer->base.ttc->type)))

  00513	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  0051b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0051e	41 b8 08 00 00
	00		 mov	 r8d, 8
  00524	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:TCPNJE_ACK
  0052b	48 8b c8	 mov	 rcx, rax
  0052e	e8 00 00 00 00	 call	 memcmp
  00533	85 c0		 test	 eax, eax
  00535	75 51		 jne	 SHORT $LN22@tcpnje_pro

; 1358 :     {
; 1359 :         tn->state = NJEACKRCD;

  00537	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0053f	c7 80 54 01 00
	00 07 00 00 00	 mov	 DWORD PTR [rax+340], 7

; 1360 : 
; 1361 :         /* TCPNJE OPEN sequence complete. Transfer connection to main I/O code. */
; 1362 :         tn->sfd = tn->afd;

  00549	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00551	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00559	8b 89 44 01 00
	00		 mov	 ecx, DWORD PTR [rcx+324]
  0055f	89 88 3c 01 00
	00		 mov	 DWORD PTR [rax+316], ecx

; 1363 : 
; 1364 :         /* Prepare to receive the first TTB */
; 1365 :         tn->tcpinbuf.inptr.address = tn->tcpinbuf.base.address;

  00565	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0056d	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00575	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0057c	48 89 88 c0 00
	00 00		 mov	 QWORD PTR [rax+192], rcx

; 1366 :     }

  00583	e9 66 02 00 00	 jmp	 $LN23@tcpnje_pro
$LN22@tcpnje_pro:

; 1367 :     else if (!memcmp(buffer->base.ttc->type, TCPNJE_NAK, sizeof(buffer->base.ttc->type)))

  00588	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  00590	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00593	41 b8 08 00 00
	00		 mov	 r8d, 8
  00599	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:TCPNJE_NAK
  005a0	48 8b c8	 mov	 rcx, rax
  005a3	e8 00 00 00 00	 call	 memcmp
  005a8	85 c0		 test	 eax, eax
  005aa	0f 85 ff 00 00
	00		 jne	 $LN24@tcpnje_pro

; 1368 :     {
; 1369 :         /* Was NAK because of unrecognised link or other end was also trying an active open? */
; 1370 :         if (buffer->base.ttc->r != 2)

  005b0	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  005b8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005bb	0f b6 40 20	 movzx	 eax, BYTE PTR [rax+32]
  005bf	83 f8 02	 cmp	 eax, 2
  005c2	0f 84 85 00 00
	00		 je	 $LN26@tcpnje_pro

; 1371 :         {
; 1372 :             struct timeval timenow;
; 1373 : 
; 1374 :             /* Make sort-of random number of from current time */
; 1375 :             gettimeofday(&timenow, NULL);

  005c8	33 d2		 xor	 edx, edx
  005ca	48 8d 4c 24 40	 lea	 rcx, QWORD PTR timenow$1[rsp]
  005cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_gettimeofday

; 1376 : 
; 1377 :             /* Only retry active open after randomish number of attempts */
; 1378 :             tn->activeopendelay = (timenow.tv_sec + timenow.tv_usec) & 3;

  005d5	8b 44 24 44	 mov	 eax, DWORD PTR timenow$1[rsp+4]
  005d9	8b 4c 24 40	 mov	 ecx, DWORD PTR timenow$1[rsp]
  005dd	03 c8		 add	 ecx, eax
  005df	8b c1		 mov	 eax, ecx
  005e1	83 e0 03	 and	 eax, 3
  005e4	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  005ec	89 81 30 01 00
	00		 mov	 DWORD PTR [rcx+304], eax

; 1379 : 
; 1380 :             /* However, if we got bashed by a NAK 3, restart the listener and
; 1381 :                give active connecting a good long pause */
; 1382 :             if (buffer->base.ttc->r == 3)

  005f2	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  005fa	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005fd	0f b6 40 20	 movzx	 eax, BYTE PTR [rax+32]
  00601	83 f8 03	 cmp	 eax, 3
  00604	75 47		 jne	 SHORT $LN27@tcpnje_pro

; 1383 :             {
; 1384 :                 tn->activeopendelay = 20;

  00606	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0060e	c7 80 30 01 00
	00 14 00 00 00	 mov	 DWORD PTR [rax+304], 20

; 1385 :                 close_socket(tn->lfd);

  00618	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00620	8b 88 40 01 00
	00		 mov	 ecx, DWORD PTR [rax+320]
  00626	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1386 :                 tn->lfd = -1;

  0062c	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00634	c7 80 40 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+320], -1

; 1387 :                 tn->listening = 0;

  0063e	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00646	c6 80 62 01 00
	00 00		 mov	 BYTE PTR [rax+354], 0
$LN27@tcpnje_pro:
$LN26@tcpnje_pro:

; 1388 :             }
; 1389 :         }
; 1390 : 
; 1391 :         close_socket(tn->afd);

  0064d	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00655	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  0065b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1392 :         tn->afd = -1;

  00661	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00669	c7 80 44 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+324], -1

; 1393 :         tn->state = tn->listening ? TCPLISTEN : CLOSED;

  00673	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0067b	0f b6 80 62 01
	00 00		 movzx	 eax, BYTE PTR [rax+354]
  00682	85 c0		 test	 eax, eax
  00684	74 0a		 je	 SHORT $LN36@tcpnje_pro
  00686	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv330[rsp], 1
  0068e	eb 08		 jmp	 SHORT $LN37@tcpnje_pro
$LN36@tcpnje_pro:
  00690	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv330[rsp], 0
$LN37@tcpnje_pro:
  00698	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  006a0	8b 4c 24 38	 mov	 ecx, DWORD PTR tv330[rsp]
  006a4	89 88 54 01 00
	00		 mov	 DWORD PTR [rax+340], ecx

; 1394 :     }

  006aa	e9 3f 01 00 00	 jmp	 $LN25@tcpnje_pro
$LN24@tcpnje_pro:

; 1395 :     else
; 1396 :     {
; 1397 :         DBGMSG(8, "HHCTN123D %4.4X:TCPNJE - unrecognised or unexpected TCPNJE control statement \"%s\" received for link %s - %s\n",

  006af	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  006b7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006ba	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  006c0	c1 e8 0f	 shr	 eax, 15
  006c3	83 e0 01	 and	 eax, 1
  006c6	85 c0		 test	 eax, eax
  006c8	74 15		 je	 SHORT $LN30@tcpnje_pro
  006ca	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  006d2	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  006d8	83 e0 08	 and	 eax, 8
  006db	85 c0		 test	 eax, eax
  006dd	75 19		 jne	 SHORT $LN29@tcpnje_pro
$LN30@tcpnje_pro:
  006df	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  006e7	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  006ed	83 e0 08	 and	 eax, 8
  006f0	85 c0		 test	 eax, eax
  006f2	0f 84 ab 00 00
	00		 je	 $LN28@tcpnje_pro
$LN29@tcpnje_pro:
  006f8	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  00700	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00703	48 83 c0 08	 add	 rax, 8
  00707	4c 8b c0	 mov	 r8, rax
  0070a	ba 09 00 00 00	 mov	 edx, 9
  0070f	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  00717	e8 00 00 00 00	 call	 guest_to_host_string
  0071c	48 89 44 24 78	 mov	 QWORD PTR tv342[rsp], rax
  00721	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00729	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0072c	48 83 c1 14	 add	 rcx, 20
  00730	4c 8b c1	 mov	 r8, rcx
  00733	ba 09 00 00 00	 mov	 edx, 9
  00738	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  00740	e8 00 00 00 00	 call	 guest_to_host_string
  00745	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv349[rsp], rax
  0074d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00755	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00758	4c 8b c1	 mov	 r8, rcx
  0075b	ba 09 00 00 00	 mov	 edx, 9
  00760	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR typestring$[rsp]
  00768	e8 00 00 00 00	 call	 guest_to_host_string
  0076d	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00775	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00778	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  0077c	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv342[rsp]
  00781	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  00786	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv349[rsp]
  0078e	4c 8b ca	 mov	 r9, rdx
  00791	4c 8b c0	 mov	 r8, rax
  00794	8b d1		 mov	 edx, ecx
  00796	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159928
  0079d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN28@tcpnje_pro:

; 1398 :                       tn->dev->devnum, guest_to_host_string(typestring, sizeof(typestring), buffer->base.ttc->type),
; 1399 :                                   guest_to_host_string(lnodestring, sizeof(lnodestring), buffer->base.ttc->ohost),
; 1400 :                                   guest_to_host_string(rnodestring, sizeof(rnodestring), buffer->base.ttc->rhost));
; 1401 :         close_socket(tn->afd);

  007a3	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  007ab	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  007b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1402 :         tn->state = tn->listening ? TCPLISTEN : CLOSED;

  007b7	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  007bf	0f b6 80 62 01
	00 00		 movzx	 eax, BYTE PTR [rax+354]
  007c6	85 c0		 test	 eax, eax
  007c8	74 0a		 je	 SHORT $LN38@tcpnje_pro
  007ca	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv374[rsp], 1
  007d2	eb 08		 jmp	 SHORT $LN39@tcpnje_pro
$LN38@tcpnje_pro:
  007d4	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv374[rsp], 0
$LN39@tcpnje_pro:
  007dc	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  007e4	8b 4c 24 3c	 mov	 ecx, DWORD PTR tv374[rsp]
  007e8	89 88 54 01 00
	00		 mov	 DWORD PTR [rax+340], ecx
$LN25@tcpnje_pro:
$LN23@tcpnje_pro:

; 1403 :     }
; 1404 : 
; 1405 :     /* Whatever happened, we are finished with this socket file descriptor now */
; 1406 :     tn->afd = -1;

  007ee	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  007f6	c7 80 44 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+324], -1
$LN1@tcpnje_pro:

; 1407 : 
; 1408 :     return;
; 1409 : 
; 1410 : }

  00800	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00808	48 33 cc	 xor	 rcx, rsp
  0080b	e8 00 00 00 00	 call	 __security_check_cookie
  00810	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00817	c3		 ret	 0
tcpnje_process_reply ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
othertn$1 = 48
otherdev$2 = 56
tv437 = 64
tv497 = 68
tv577 = 72
found$3 = 76
tv623 = 80
tv750 = 84
tv803 = 88
socknamelen$4 = 92
rc$5 = 96
tv197 = 100
tv325 = 104
tv363 = 108
tv404 = 112
tv461 = 116
tv545 = 120
tv75 = 128
tv82 = 136
tv249 = 144
tv327 = 152
tv365 = 160
tv406 = 168
tv463 = 176
tv547 = 184
tv590 = 192
tv637 = 200
tv675 = 208
tv716 = 216
tv815 = 224
tv765 = 232
tv769 = 240
sockname$6 = 248
rnodestring$ = 264
lnodestring$ = 280
typestring$ = 296
__$ArrayPad$ = 312
buffer$ = 336
tn$ = 344
tcpnje_process_request PROC

; 1050 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1051 :     char typestring[9], lnodestring[9], rnodestring[9];
; 1052 : 
; 1053 :     DBGMSG(256, "HHCTN109D %4.4X:TCPNJE - processing TCPNJE %s received for link %s - %s",

  00023	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0002b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00034	c1 e8 0f	 shr	 eax, 15
  00037	83 e0 01	 and	 eax, 1
  0003a	85 c0		 test	 eax, eax
  0003c	74 17		 je	 SHORT $LN7@tcpnje_pro
  0003e	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00046	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0004c	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00051	85 c0		 test	 eax, eax
  00053	75 1b		 jne	 SHORT $LN6@tcpnje_pro
$LN7@tcpnje_pro:
  00055	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0005d	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00063	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00068	85 c0		 test	 eax, eax
  0006a	0f 84 b1 00 00
	00		 je	 $LN5@tcpnje_pro
$LN6@tcpnje_pro:
  00070	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  00078	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007b	48 83 c0 08	 add	 rax, 8
  0007f	4c 8b c0	 mov	 r8, rax
  00082	ba 09 00 00 00	 mov	 edx, 9
  00087	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  0008f	e8 00 00 00 00	 call	 guest_to_host_string
  00094	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv75[rsp], rax
  0009c	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 83 c1 14	 add	 rcx, 20
  000ab	4c 8b c1	 mov	 r8, rcx
  000ae	ba 09 00 00 00	 mov	 edx, 9
  000b3	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  000bb	e8 00 00 00 00	 call	 guest_to_host_string
  000c0	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv82[rsp], rax
  000c8	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  000d0	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d3	4c 8b c1	 mov	 r8, rcx
  000d6	ba 09 00 00 00	 mov	 edx, 9
  000db	48 8d 8c 24 28
	01 00 00	 lea	 rcx, QWORD PTR typestring$[rsp]
  000e3	e8 00 00 00 00	 call	 guest_to_host_string
  000e8	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  000f0	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000f3	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  000f7	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv75[rsp]
  000ff	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  00104	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv82[rsp]
  0010c	4c 8b ca	 mov	 r9, rdx
  0010f	4c 8b c0	 mov	 r8, rax
  00112	8b d1		 mov	 edx, ecx
  00114	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159790
  0011b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN5@tcpnje_pro:

; 1054 :                   tn->dev->devnum, guest_to_host_string(typestring, sizeof(typestring), buffer->base.ttc->type),
; 1055 :                               guest_to_host_string(lnodestring, sizeof(lnodestring), buffer->base.ttc->ohost),
; 1056 :                               guest_to_host_string(rnodestring, sizeof(rnodestring), buffer->base.ttc->rhost));
; 1057 : 
; 1058 :     DBGMSG(256, "\n");

  00121	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00129	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0012c	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00132	c1 e8 0f	 shr	 eax, 15
  00135	83 e0 01	 and	 eax, 1
  00138	85 c0		 test	 eax, eax
  0013a	74 17		 je	 SHORT $LN10@tcpnje_pro
  0013c	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00144	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0014a	25 00 01 00 00	 and	 eax, 256		; 00000100H
  0014f	85 c0		 test	 eax, eax
  00151	75 17		 jne	 SHORT $LN9@tcpnje_pro
$LN10@tcpnje_pro:
  00153	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0015b	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00161	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00166	85 c0		 test	 eax, eax
  00168	74 0d		 je	 SHORT $LN8@tcpnje_pro
$LN9@tcpnje_pro:
  0016a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159794
  00171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN8@tcpnje_pro:

; 1059 : 
; 1060 :     /* Is this really an OPEN request? */
; 1061 :     if (memcmp(buffer->base.ttc->type, TCPNJE_OPEN, sizeof(buffer->base.ttc->type)))

  00177	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  0017f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00182	41 b8 08 00 00
	00		 mov	 r8d, 8
  00188	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:TCPNJE_OPEN
  0018f	48 8b c8	 mov	 rcx, rax
  00192	e8 00 00 00 00	 call	 memcmp
  00197	85 c0		 test	 eax, eax
  00199	0f 84 bf 01 00
	00		 je	 $LN11@tcpnje_pro

; 1062 :     {
; 1063 :         struct sockaddr_in sockname;
; 1064 :         int rc;
; 1065 : 
; 1066 : #if defined(_MSVC_)
; 1067 :         int socknamelen;
; 1068 : #else /* defined(_MSVC_) */
; 1069 :         socklen_t socknamelen;
; 1070 : #endif /* defined(_MSVC_) */
; 1071 : 
; 1072 :         DBGMSG(8, "HHCTN123D %4.4X:TCPNJE - unrecognised TCPNJE control statement \"%s\"", tn->dev->devnum,

  0019f	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  001a7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001aa	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  001b0	c1 e8 0f	 shr	 eax, 15
  001b3	83 e0 01	 and	 eax, 1
  001b6	85 c0		 test	 eax, eax
  001b8	74 15		 je	 SHORT $LN14@tcpnje_pro
  001ba	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  001c2	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  001c8	83 e0 08	 and	 eax, 8
  001cb	85 c0		 test	 eax, eax
  001cd	75 15		 jne	 SHORT $LN13@tcpnje_pro
$LN14@tcpnje_pro:
  001cf	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  001d7	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  001dd	83 e0 08	 and	 eax, 8
  001e0	85 c0		 test	 eax, eax
  001e2	74 41		 je	 SHORT $LN12@tcpnje_pro
$LN13@tcpnje_pro:
  001e4	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  001ec	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001ef	4c 8b c0	 mov	 r8, rax
  001f2	ba 09 00 00 00	 mov	 edx, 9
  001f7	48 8d 8c 24 28
	01 00 00	 lea	 rcx, QWORD PTR typestring$[rsp]
  001ff	e8 00 00 00 00	 call	 guest_to_host_string
  00204	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  0020c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0020f	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00213	4c 8b c0	 mov	 r8, rax
  00216	8b d1		 mov	 edx, ecx
  00218	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159799
  0021f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN12@tcpnje_pro:

; 1073 :                       guest_to_host_string(typestring, sizeof(typestring), buffer->base.ttc->type));
; 1074 : 
; 1075 :         /* Get ip address and port of remote end of the connection */
; 1076 :         socknamelen = sizeof(sockname);

  00225	c7 44 24 5c 10
	00 00 00	 mov	 DWORD PTR socknamelen$4[rsp], 16

; 1077 :         rc = getpeername(tn->pfd, (struct sockaddr *) &sockname, &socknamelen);

  0022d	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00235	48 63 80 48 01
	00 00		 movsxd	 rax, DWORD PTR [rax+328]
  0023c	4c 8d 44 24 5c	 lea	 r8, QWORD PTR socknamelen$4[rsp]
  00241	48 8d 94 24 f8
	00 00 00	 lea	 rdx, QWORD PTR sockname$6[rsp]
  00249	48 8b c8	 mov	 rcx, rax
  0024c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getpeername
  00252	89 44 24 60	 mov	 DWORD PTR rc$5[rsp], eax

; 1078 :         if (!rc)

  00256	83 7c 24 60 00	 cmp	 DWORD PTR rc$5[rsp], 0
  0025b	0f 85 80 00 00
	00		 jne	 $LN15@tcpnje_pro

; 1079 :         {
; 1080 :             DBGMSG(8, " received from %s:%d\n", inet_ntoa(sockname.sin_addr), ntohs(sockname.sin_port));

  00261	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00269	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0026c	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00272	c1 e8 0f	 shr	 eax, 15
  00275	83 e0 01	 and	 eax, 1
  00278	85 c0		 test	 eax, eax
  0027a	74 15		 je	 SHORT $LN19@tcpnje_pro
  0027c	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00284	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0028a	83 e0 08	 and	 eax, 8
  0028d	85 c0		 test	 eax, eax
  0028f	75 15		 jne	 SHORT $LN18@tcpnje_pro
$LN19@tcpnje_pro:
  00291	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00299	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0029f	83 e0 08	 and	 eax, 8
  002a2	85 c0		 test	 eax, eax
  002a4	74 39		 je	 SHORT $LN17@tcpnje_pro
$LN18@tcpnje_pro:
  002a6	0f b7 8c 24 fa
	00 00 00	 movzx	 ecx, WORD PTR sockname$6[rsp+2]
  002ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ntohs
  002b4	0f b7 c0	 movzx	 eax, ax
  002b7	89 44 24 64	 mov	 DWORD PTR tv197[rsp], eax
  002bb	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR sockname$6[rsp+4]
  002c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_ntoa
  002c8	8b 4c 24 64	 mov	 ecx, DWORD PTR tv197[rsp]
  002cc	44 8b c1	 mov	 r8d, ecx
  002cf	48 8b d0	 mov	 rdx, rax
  002d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159805
  002d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN17@tcpnje_pro:

; 1081 :         }

  002df	eb 52		 jmp	 SHORT $LN16@tcpnje_pro
$LN15@tcpnje_pro:

; 1082 :         else
; 1083 :         {
; 1084 :             DBGMSG(8, "\n");

  002e1	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  002e9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002ec	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  002f2	c1 e8 0f	 shr	 eax, 15
  002f5	83 e0 01	 and	 eax, 1
  002f8	85 c0		 test	 eax, eax
  002fa	74 15		 je	 SHORT $LN22@tcpnje_pro
  002fc	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00304	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0030a	83 e0 08	 and	 eax, 8
  0030d	85 c0		 test	 eax, eax
  0030f	75 15		 jne	 SHORT $LN21@tcpnje_pro
$LN22@tcpnje_pro:
  00311	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00319	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0031f	83 e0 08	 and	 eax, 8
  00322	85 c0		 test	 eax, eax
  00324	74 0d		 je	 SHORT $LN20@tcpnje_pro
$LN21@tcpnje_pro:
  00326	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159809
  0032d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN20@tcpnje_pro:
$LN16@tcpnje_pro:

; 1085 :         }
; 1086 : 
; 1087 :         close_socket(tn->pfd);

  00333	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0033b	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  00341	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1088 :         tn->pfd = -1;

  00347	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0034f	c7 80 48 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+328], -1

; 1089 :         return;

  00359	e9 c2 11 00 00	 jmp	 $LN1@tcpnje_pro
$LN11@tcpnje_pro:

; 1090 :     }
; 1091 : 
; 1092 :     /* Do the names of both ends specified in the OPEN request correspond with what we have? */
; 1093 :     if ((memcmp(tn->rnode, buffer->base.ttc->rhost, sizeof(buffer->base.ttc->rhost))) ||

  0035e	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  00366	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00369	48 83 c0 08	 add	 rax, 8
  0036d	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00375	48 83 c1 38	 add	 rcx, 56			; 00000038H
  00379	41 b8 08 00 00
	00		 mov	 r8d, 8
  0037f	48 8b d0	 mov	 rdx, rax
  00382	e8 00 00 00 00	 call	 memcmp
  00387	85 c0		 test	 eax, eax
  00389	75 31		 jne	 SHORT $LN24@tcpnje_pro
  0038b	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  00393	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00396	48 83 c0 14	 add	 rax, 20
  0039a	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  003a2	48 83 c1 30	 add	 rcx, 48			; 00000030H
  003a6	41 b8 08 00 00
	00		 mov	 r8d, 8
  003ac	48 8b d0	 mov	 rdx, rax
  003af	e8 00 00 00 00	 call	 memcmp
  003b4	85 c0		 test	 eax, eax
  003b6	0f 84 4a 0b 00
	00		 je	 $LN23@tcpnje_pro
$LN24@tcpnje_pro:

; 1094 :         (memcmp(tn->lnode, buffer->base.ttc->ohost, sizeof(buffer->base.ttc->ohost))))
; 1095 :     {
; 1096 :         /* One or both doesn't match. Maybe some other TCPNJE device has the specified link? */
; 1097 :         DEVBLK *otherdev;
; 1098 :         int found = 0;

  003bc	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR found$3[rsp], 0

; 1099 : 
; 1100 :         DBGMSG(256, "HHCTN110D %4.4X:TCPNJE - link %s - %s is not handled by this device. Checking other TCPNJE devices.\n",

  003c4	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  003cc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003cf	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  003d5	c1 e8 0f	 shr	 eax, 15
  003d8	83 e0 01	 and	 eax, 1
  003db	85 c0		 test	 eax, eax
  003dd	74 17		 je	 SHORT $LN27@tcpnje_pro
  003df	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  003e7	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  003ed	25 00 01 00 00	 and	 eax, 256		; 00000100H
  003f2	85 c0		 test	 eax, eax
  003f4	75 17		 jne	 SHORT $LN26@tcpnje_pro
$LN27@tcpnje_pro:
  003f6	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  003fe	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00404	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00409	85 c0		 test	 eax, eax
  0040b	74 7c		 je	 SHORT $LN25@tcpnje_pro
$LN26@tcpnje_pro:
  0040d	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  00415	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00418	48 83 c0 08	 add	 rax, 8
  0041c	4c 8b c0	 mov	 r8, rax
  0041f	ba 09 00 00 00	 mov	 edx, 9
  00424	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  0042c	e8 00 00 00 00	 call	 guest_to_host_string
  00431	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv249[rsp], rax
  00439	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00441	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00444	48 83 c1 14	 add	 rcx, 20
  00448	4c 8b c1	 mov	 r8, rcx
  0044b	ba 09 00 00 00	 mov	 edx, 9
  00450	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  00458	e8 00 00 00 00	 call	 guest_to_host_string
  0045d	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00465	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00468	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  0046c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tv249[rsp]
  00474	4c 8b ca	 mov	 r9, rdx
  00477	4c 8b c0	 mov	 r8, rax
  0047a	8b d1		 mov	 edx, ecx
  0047c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159815
  00483	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN25@tcpnje_pro:

; 1101 :                       tn->dev->devnum, guest_to_host_string(lnodestring, sizeof(lnodestring), buffer->base.ttc->ohost),
; 1102 :                                   guest_to_host_string(rnodestring, sizeof(rnodestring), buffer->base.ttc->rhost));
; 1103 : 
; 1104 :         /* Check other devices */
; 1105 :         for (otherdev = sysblk.firstdev; otherdev; otherdev = otherdev->nextdev)

  00489	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00490	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  00497	48 89 44 24 38	 mov	 QWORD PTR otherdev$2[rsp], rax
  0049c	eb 0e		 jmp	 SHORT $LN4@tcpnje_pro
$LN2@tcpnje_pro:
  0049e	48 8b 44 24 38	 mov	 rax, QWORD PTR otherdev$2[rsp]
  004a3	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  004a7	48 89 44 24 38	 mov	 QWORD PTR otherdev$2[rsp], rax
$LN4@tcpnje_pro:
  004ac	48 83 7c 24 38
	00		 cmp	 QWORD PTR otherdev$2[rsp], 0
  004b2	0f 84 e3 08 00
	00		 je	 $LN3@tcpnje_pro

; 1106 :         {
; 1107 :             struct TCPNJE *othertn;
; 1108 : 
; 1109 :             othertn = (struct TCPNJE *) otherdev->commadpt;

  004b8	48 8b 44 24 38	 mov	 rax, QWORD PTR otherdev$2[rsp]
  004bd	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  004c4	48 89 44 24 30	 mov	 QWORD PTR othertn$1[rsp], rax

; 1110 : 
; 1111 :             /* Is this a TCPNJE device? (Do not force match of last character of blockname which is the minor version) */
; 1112 :             if (otherdev->allocated && ((otherdev->devtype == 0x2703) || (otherdev->devtype == 0x3088)) && otherdev->commadpt &&

  004c9	48 8b 44 24 38	 mov	 rax, QWORD PTR otherdev$2[rsp]
  004ce	83 78 40 00	 cmp	 DWORD PTR [rax+64], 0
  004d2	0f 84 be 08 00
	00		 je	 $LN28@tcpnje_pro
  004d8	48 8b 44 24 38	 mov	 rax, QWORD PTR otherdev$2[rsp]
  004dd	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  004e1	3d 03 27 00 00	 cmp	 eax, 9987		; 00002703H
  004e6	74 14		 je	 SHORT $LN29@tcpnje_pro
  004e8	48 8b 44 24 38	 mov	 rax, QWORD PTR otherdev$2[rsp]
  004ed	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  004f1	3d 88 30 00 00	 cmp	 eax, 12424		; 00003088H
  004f6	0f 85 9a 08 00
	00		 jne	 $LN28@tcpnje_pro
$LN29@tcpnje_pro:
  004fc	48 8b 44 24 38	 mov	 rax, QWORD PTR otherdev$2[rsp]
  00501	48 83 b8 68 11
	00 00 00	 cmp	 QWORD PTR [rax+4456], 0
  00509	0f 84 87 08 00
	00		 je	 $LN28@tcpnje_pro
  0050f	48 8b 44 24 30	 mov	 rax, QWORD PTR othertn$1[rsp]
  00514	48 83 c0 08	 add	 rax, 8
  00518	41 b8 07 00 00
	00		 mov	 r8d, 7
  0051e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159818
  00525	48 8b c8	 mov	 rcx, rax
  00528	e8 00 00 00 00	 call	 memcmp
  0052d	85 c0		 test	 eax, eax
  0052f	0f 85 61 08 00
	00		 jne	 $LN28@tcpnje_pro

; 1113 :                 !memcmp(othertn->blockname, TCPNJE_VERSION, sizeof(othertn->blockname) - 1))
; 1114 :             {
; 1115 :                 /* Have we found ourselves, which we've already checked? */
; 1116 :                 if (othertn == tn) continue;

  00535	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0053d	48 39 44 24 30	 cmp	 QWORD PTR othertn$1[rsp], rax
  00542	75 05		 jne	 SHORT $LN30@tcpnje_pro
  00544	e9 55 ff ff ff	 jmp	 $LN2@tcpnje_pro
$LN30@tcpnje_pro:

; 1117 : 
; 1118 :                 /* Is the other device listening for incoming connections? */
; 1119 :                 if (othertn->state >= TCPLISTEN)

  00549	48 8b 44 24 30	 mov	 rax, QWORD PTR othertn$1[rsp]
  0054e	83 b8 54 01 00
	00 01		 cmp	 DWORD PTR [rax+340], 1
  00555	0f 8c 3b 08 00
	00		 jl	 $LN31@tcpnje_pro

; 1120 :                 {
; 1121 :                     /* Are names of both ends of the link correct? */
; 1122 :                     if ((memcmp(buffer->base.ttc->rhost, othertn->rnode, sizeof(buffer->base.ttc->rhost))) ||

  0055b	48 8b 44 24 30	 mov	 rax, QWORD PTR othertn$1[rsp]
  00560	48 83 c0 38	 add	 rax, 56			; 00000038H
  00564	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  0056c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0056f	48 83 c1 08	 add	 rcx, 8
  00573	41 b8 08 00 00
	00		 mov	 r8d, 8
  00579	48 8b d0	 mov	 rdx, rax
  0057c	e8 00 00 00 00	 call	 memcmp
  00581	85 c0		 test	 eax, eax
  00583	75 2a		 jne	 SHORT $LN33@tcpnje_pro
  00585	48 8b 44 24 30	 mov	 rax, QWORD PTR othertn$1[rsp]
  0058a	48 83 c0 30	 add	 rax, 48			; 00000030H
  0058e	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00596	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00599	48 83 c1 14	 add	 rcx, 20
  0059d	41 b8 08 00 00
	00		 mov	 r8d, 8
  005a3	48 8b d0	 mov	 rdx, rax
  005a6	e8 00 00 00 00	 call	 memcmp
  005ab	85 c0		 test	 eax, eax
  005ad	74 05		 je	 SHORT $LN32@tcpnje_pro
$LN33@tcpnje_pro:

; 1123 :                         (memcmp(buffer->base.ttc->ohost, othertn->lnode, sizeof(buffer->base.ttc->ohost))))
; 1124 :                     {
; 1125 :                         /* No. Skip on to next device. */
; 1126 :                         continue;

  005af	e9 ea fe ff ff	 jmp	 $LN2@tcpnje_pro
$LN32@tcpnje_pro:

; 1127 :                     }
; 1128 : 
; 1129 :                     DBGMSG(256, "HHCTN111D %4.4X:TCPNJE - processing TCPNJE OPEN received for link %s - %s on device %4.4X\n",

  005b4	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  005bc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005bf	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  005c5	c1 e8 0f	 shr	 eax, 15
  005c8	83 e0 01	 and	 eax, 1
  005cb	85 c0		 test	 eax, eax
  005cd	74 17		 je	 SHORT $LN36@tcpnje_pro
  005cf	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  005d7	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  005dd	25 00 01 00 00	 and	 eax, 256		; 00000100H
  005e2	85 c0		 test	 eax, eax
  005e4	75 1b		 jne	 SHORT $LN35@tcpnje_pro
$LN36@tcpnje_pro:
  005e6	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  005ee	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  005f4	25 00 01 00 00	 and	 eax, 256		; 00000100H
  005f9	85 c0		 test	 eax, eax
  005fb	0f 84 91 00 00
	00		 je	 $LN34@tcpnje_pro
$LN35@tcpnje_pro:
  00601	48 8b 44 24 38	 mov	 rax, QWORD PTR otherdev$2[rsp]
  00606	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0060a	89 44 24 68	 mov	 DWORD PTR tv325[rsp], eax
  0060e	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00616	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00619	48 83 c1 08	 add	 rcx, 8
  0061d	4c 8b c1	 mov	 r8, rcx
  00620	ba 09 00 00 00	 mov	 edx, 9
  00625	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  0062d	e8 00 00 00 00	 call	 guest_to_host_string
  00632	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv327[rsp], rax
  0063a	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00642	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00645	48 83 c1 14	 add	 rcx, 20
  00649	4c 8b c1	 mov	 r8, rcx
  0064c	ba 09 00 00 00	 mov	 edx, 9
  00651	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  00659	e8 00 00 00 00	 call	 guest_to_host_string
  0065e	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00666	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00669	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  0066d	8b 54 24 68	 mov	 edx, DWORD PTR tv325[rsp]
  00671	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  00675	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR tv327[rsp]
  0067d	4c 8b ca	 mov	 r9, rdx
  00680	4c 8b c0	 mov	 r8, rax
  00683	8b d1		 mov	 edx, ecx
  00685	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159826
  0068c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN34@tcpnje_pro:

; 1130 :                               tn->dev->devnum, guest_to_host_string(lnodestring, sizeof(lnodestring), buffer->base.ttc->ohost),
; 1131 :                                           guest_to_host_string(rnodestring, sizeof(rnodestring), buffer->base.ttc->rhost),
; 1132 :                               otherdev->devnum);
; 1133 : 
; 1134 :                     obtain_lock(&othertn->lock);

  00692	48 8b 44 24 30	 mov	 rax, QWORD PTR othertn$1[rsp]
  00697	48 83 c0 60	 add	 rax, 96			; 00000060H
  0069b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159827
  006a2	48 8b c8	 mov	 rcx, rax
  006a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 1135 : 
; 1136 :                     /* Is the other device's link already connected? */
; 1137 :                     if (othertn->state >= NJECONPRI)

  006ab	48 8b 44 24 30	 mov	 rax, QWORD PTR othertn$1[rsp]
  006b0	83 b8 54 01 00
	00 08		 cmp	 DWORD PTR [rax+340], 8
  006b7	0f 8c 85 02 00
	00		 jl	 $LN37@tcpnje_pro

; 1138 :                     {
; 1139 :                         DBGMSG(256, "HHCTN112D %4.4X:TCPNJE - rejecting incoming TCPNJE OPEN for link %s - %s on device %4.4X : already connected\n",

  006bd	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  006c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006c8	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  006ce	c1 e8 0f	 shr	 eax, 15
  006d1	83 e0 01	 and	 eax, 1
  006d4	85 c0		 test	 eax, eax
  006d6	74 17		 je	 SHORT $LN40@tcpnje_pro
  006d8	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  006e0	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  006e6	25 00 01 00 00	 and	 eax, 256		; 00000100H
  006eb	85 c0		 test	 eax, eax
  006ed	75 1b		 jne	 SHORT $LN39@tcpnje_pro
$LN40@tcpnje_pro:
  006ef	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  006f7	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  006fd	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00702	85 c0		 test	 eax, eax
  00704	0f 84 91 00 00
	00		 je	 $LN38@tcpnje_pro
$LN39@tcpnje_pro:
  0070a	48 8b 44 24 38	 mov	 rax, QWORD PTR otherdev$2[rsp]
  0070f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00713	89 44 24 6c	 mov	 DWORD PTR tv363[rsp], eax
  00717	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  0071f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00722	48 83 c1 08	 add	 rcx, 8
  00726	4c 8b c1	 mov	 r8, rcx
  00729	ba 09 00 00 00	 mov	 edx, 9
  0072e	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  00736	e8 00 00 00 00	 call	 guest_to_host_string
  0073b	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv365[rsp], rax
  00743	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  0074b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0074e	48 83 c1 14	 add	 rcx, 20
  00752	4c 8b c1	 mov	 r8, rcx
  00755	ba 09 00 00 00	 mov	 edx, 9
  0075a	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  00762	e8 00 00 00 00	 call	 guest_to_host_string
  00767	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  0076f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00772	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00776	8b 54 24 6c	 mov	 edx, DWORD PTR tv363[rsp]
  0077a	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  0077e	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR tv365[rsp]
  00786	4c 8b ca	 mov	 r9, rdx
  00789	4c 8b c0	 mov	 r8, rax
  0078c	8b d1		 mov	 edx, ecx
  0078e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159832
  00795	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN38@tcpnje_pro:

; 1140 :                               tn->dev->devnum, guest_to_host_string(lnodestring, sizeof(lnodestring), buffer->base.ttc->ohost),
; 1141 :                                           guest_to_host_string(rnodestring, sizeof(rnodestring), buffer->base.ttc->rhost),
; 1142 :                               otherdev->devnum);
; 1143 :                         /* No. Reply with NAK.  Reason code 2 */
; 1144 :                         tcpnje_ttc(tn->pfd, TCPNJE_NAK, 2, tn);

  0079b	4c 8b 8c 24 58
	01 00 00	 mov	 r9, QWORD PTR tn$[rsp]
  007a3	41 b8 02 00 00
	00		 mov	 r8d, 2
  007a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:TCPNJE_NAK
  007b0	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  007b8	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  007be	e8 00 00 00 00	 call	 tcpnje_ttc

; 1145 :                         close_socket(tn->pfd);

  007c3	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  007cb	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  007d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1146 :                         tn->pfd = -1;

  007d7	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  007df	c7 80 48 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+328], -1

; 1147 : 
; 1148 :                         /* Also kill the link which is assumed to be already failed but unnoticed */
; 1149 :                         DBGMSG(256, "HHCTN113D %4.4X:TCPNJE - closing link %s - %s on device %4.4X due to unexpected TCPNJE OPEN received for same\n",

  007e9	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  007f1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  007f4	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  007fa	c1 e8 0f	 shr	 eax, 15
  007fd	83 e0 01	 and	 eax, 1
  00800	85 c0		 test	 eax, eax
  00802	74 17		 je	 SHORT $LN43@tcpnje_pro
  00804	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0080c	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00812	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00817	85 c0		 test	 eax, eax
  00819	75 1b		 jne	 SHORT $LN42@tcpnje_pro
$LN43@tcpnje_pro:
  0081b	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00823	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00829	25 00 01 00 00	 and	 eax, 256		; 00000100H
  0082e	85 c0		 test	 eax, eax
  00830	0f 84 91 00 00
	00		 je	 $LN41@tcpnje_pro
$LN42@tcpnje_pro:
  00836	48 8b 44 24 38	 mov	 rax, QWORD PTR otherdev$2[rsp]
  0083b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0083f	89 44 24 70	 mov	 DWORD PTR tv404[rsp], eax
  00843	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  0084b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0084e	48 83 c1 08	 add	 rcx, 8
  00852	4c 8b c1	 mov	 r8, rcx
  00855	ba 09 00 00 00	 mov	 edx, 9
  0085a	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  00862	e8 00 00 00 00	 call	 guest_to_host_string
  00867	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv406[rsp], rax
  0086f	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00877	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0087a	48 83 c1 14	 add	 rcx, 20
  0087e	4c 8b c1	 mov	 r8, rcx
  00881	ba 09 00 00 00	 mov	 edx, 9
  00886	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  0088e	e8 00 00 00 00	 call	 guest_to_host_string
  00893	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  0089b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0089e	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  008a2	8b 54 24 70	 mov	 edx, DWORD PTR tv404[rsp]
  008a6	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  008aa	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR tv406[rsp]
  008b2	4c 8b ca	 mov	 r9, rdx
  008b5	4c 8b c0	 mov	 r8, rax
  008b8	8b d1		 mov	 edx, ecx
  008ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159836
  008c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN41@tcpnje_pro:

; 1150 :                               tn->dev->devnum, guest_to_host_string(lnodestring, sizeof(lnodestring), buffer->base.ttc->ohost),
; 1151 :                                           guest_to_host_string(rnodestring, sizeof(rnodestring), buffer->base.ttc->rhost),
; 1152 :                               otherdev->devnum);
; 1153 : 
; 1154 :                         tcpnje_close(othertn->sfd, othertn);

  008c7	48 8b 54 24 30	 mov	 rdx, QWORD PTR othertn$1[rsp]
  008cc	48 8b 44 24 30	 mov	 rax, QWORD PTR othertn$1[rsp]
  008d1	8b 88 3c 01 00
	00		 mov	 ecx, DWORD PTR [rax+316]
  008d7	e8 00 00 00 00	 call	 tcpnje_close

; 1155 : 
; 1156 :                         release_lock(&othertn->lock);

  008dc	48 8b 44 24 30	 mov	 rax, QWORD PTR othertn$1[rsp]
  008e1	48 83 c0 60	 add	 rax, 96			; 00000060H
  008e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159837
  008ec	48 8b c8	 mov	 rcx, rax
  008ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 1157 : 
; 1158 :                         if (tn->state == TCPCONPAS) tn->state = tn->listening ? TCPLISTEN : CLOSED;

  008f5	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  008fd	83 b8 54 01 00
	00 04		 cmp	 DWORD PTR [rax+340], 4
  00904	75 37		 jne	 SHORT $LN44@tcpnje_pro
  00906	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0090e	0f b6 80 62 01
	00 00		 movzx	 eax, BYTE PTR [rax+354]
  00915	85 c0		 test	 eax, eax
  00917	74 0a		 je	 SHORT $LN80@tcpnje_pro
  00919	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv437[rsp], 1
  00921	eb 08		 jmp	 SHORT $LN81@tcpnje_pro
$LN80@tcpnje_pro:
  00923	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv437[rsp], 0
$LN81@tcpnje_pro:
  0092b	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00933	8b 4c 24 40	 mov	 ecx, DWORD PTR tv437[rsp]
  00937	89 88 54 01 00
	00		 mov	 DWORD PTR [rax+340], ecx
$LN44@tcpnje_pro:

; 1159 :                         return;

  0093d	e9 de 0b 00 00	 jmp	 $LN1@tcpnje_pro
$LN37@tcpnje_pro:

; 1160 :                     }
; 1161 : 
; 1162 :                     /* Is the other device already doing an active open? */
; 1163 :                     if ((othertn->state == TCPCONSNT) || (othertn->state == TCPCONACT) ||
; 1164 :                         (othertn->state == NJEOPNSNT) || (othertn->state == NJEACKRCD))

  00942	48 8b 44 24 30	 mov	 rax, QWORD PTR othertn$1[rsp]
  00947	83 b8 54 01 00
	00 02		 cmp	 DWORD PTR [rax+340], 2
  0094e	74 2e		 je	 SHORT $LN46@tcpnje_pro
  00950	48 8b 44 24 30	 mov	 rax, QWORD PTR othertn$1[rsp]
  00955	83 b8 54 01 00
	00 03		 cmp	 DWORD PTR [rax+340], 3
  0095c	74 20		 je	 SHORT $LN46@tcpnje_pro
  0095e	48 8b 44 24 30	 mov	 rax, QWORD PTR othertn$1[rsp]
  00963	83 b8 54 01 00
	00 05		 cmp	 DWORD PTR [rax+340], 5
  0096a	74 12		 je	 SHORT $LN46@tcpnje_pro
  0096c	48 8b 44 24 30	 mov	 rax, QWORD PTR othertn$1[rsp]
  00971	83 b8 54 01 00
	00 07		 cmp	 DWORD PTR [rax+340], 7
  00978	0f 85 a7 01 00
	00		 jne	 $LN45@tcpnje_pro
$LN46@tcpnje_pro:

; 1165 :                     {
; 1166 :                         release_lock(&othertn->lock);

  0097e	48 8b 44 24 30	 mov	 rax, QWORD PTR othertn$1[rsp]
  00983	48 83 c0 60	 add	 rax, 96			; 00000060H
  00987	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159841
  0098e	48 8b c8	 mov	 rcx, rax
  00991	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 1167 :                         DBGMSG(256, "HHCTN114D %4.4X:TCPNJE - rejecting incoming TCPNJE OPEN for link %s - %s on device %4.4X : already doing active open\n",

  00997	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0099f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  009a2	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  009a8	c1 e8 0f	 shr	 eax, 15
  009ab	83 e0 01	 and	 eax, 1
  009ae	85 c0		 test	 eax, eax
  009b0	74 17		 je	 SHORT $LN49@tcpnje_pro
  009b2	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  009ba	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  009c0	25 00 01 00 00	 and	 eax, 256		; 00000100H
  009c5	85 c0		 test	 eax, eax
  009c7	75 1b		 jne	 SHORT $LN48@tcpnje_pro
$LN49@tcpnje_pro:
  009c9	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  009d1	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  009d7	25 00 01 00 00	 and	 eax, 256		; 00000100H
  009dc	85 c0		 test	 eax, eax
  009de	0f 84 91 00 00
	00		 je	 $LN47@tcpnje_pro
$LN48@tcpnje_pro:
  009e4	48 8b 44 24 38	 mov	 rax, QWORD PTR otherdev$2[rsp]
  009e9	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  009ed	89 44 24 74	 mov	 DWORD PTR tv461[rsp], eax
  009f1	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  009f9	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  009fc	48 83 c1 08	 add	 rcx, 8
  00a00	4c 8b c1	 mov	 r8, rcx
  00a03	ba 09 00 00 00	 mov	 edx, 9
  00a08	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  00a10	e8 00 00 00 00	 call	 guest_to_host_string
  00a15	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv463[rsp], rax
  00a1d	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00a25	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00a28	48 83 c1 14	 add	 rcx, 20
  00a2c	4c 8b c1	 mov	 r8, rcx
  00a2f	ba 09 00 00 00	 mov	 edx, 9
  00a34	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  00a3c	e8 00 00 00 00	 call	 guest_to_host_string
  00a41	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00a49	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00a4c	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00a50	8b 54 24 74	 mov	 edx, DWORD PTR tv461[rsp]
  00a54	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  00a58	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR tv463[rsp]
  00a60	4c 8b ca	 mov	 r9, rdx
  00a63	4c 8b c0	 mov	 r8, rax
  00a66	8b d1		 mov	 edx, ecx
  00a68	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159845
  00a6f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN47@tcpnje_pro:

; 1168 :                               tn->dev->devnum, guest_to_host_string(lnodestring, sizeof(lnodestring), buffer->base.ttc->ohost),
; 1169 :                                           guest_to_host_string(rnodestring, sizeof(rnodestring), buffer->base.ttc->rhost),
; 1170 :                               otherdev->devnum);
; 1171 :                         /* No. Reply with NAK.  Reason code 3 */
; 1172 :                         tcpnje_ttc(tn->pfd, TCPNJE_NAK, 3, tn);

  00a75	4c 8b 8c 24 58
	01 00 00	 mov	 r9, QWORD PTR tn$[rsp]
  00a7d	41 b8 03 00 00
	00		 mov	 r8d, 3
  00a83	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:TCPNJE_NAK
  00a8a	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00a92	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  00a98	e8 00 00 00 00	 call	 tcpnje_ttc

; 1173 :                         close_socket(tn->pfd);

  00a9d	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00aa5	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  00aab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1174 :                         tn->pfd = -1;

  00ab1	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00ab9	c7 80 48 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+328], -1

; 1175 :                         close_socket(tn->afd);

  00ac3	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00acb	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  00ad1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1176 :                         tn->afd = -1;

  00ad7	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00adf	c7 80 44 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+324], -1

; 1177 :                         tn->state = tn->listening ? TCPLISTEN : CLOSED;

  00ae9	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00af1	0f b6 80 62 01
	00 00		 movzx	 eax, BYTE PTR [rax+354]
  00af8	85 c0		 test	 eax, eax
  00afa	74 0a		 je	 SHORT $LN82@tcpnje_pro
  00afc	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv497[rsp], 1
  00b04	eb 08		 jmp	 SHORT $LN83@tcpnje_pro
$LN82@tcpnje_pro:
  00b06	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv497[rsp], 0
$LN83@tcpnje_pro:
  00b0e	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00b16	8b 4c 24 44	 mov	 ecx, DWORD PTR tv497[rsp]
  00b1a	89 88 54 01 00
	00		 mov	 DWORD PTR [rax+340], ecx

; 1178 :                         return;

  00b20	e9 fb 09 00 00	 jmp	 $LN1@tcpnje_pro
$LN45@tcpnje_pro:

; 1179 :                     }
; 1180 : 
; 1181 :                     /* Is the other device already processing an incoming connection? */
; 1182 :                     if (othertn->pfd >= 0)

  00b25	48 8b 44 24 30	 mov	 rax, QWORD PTR othertn$1[rsp]
  00b2a	83 b8 48 01 00
	00 00		 cmp	 DWORD PTR [rax+328], 0
  00b31	0f 8c 93 00 00
	00		 jl	 $LN50@tcpnje_pro

; 1183 :                     {
; 1184 :                         /* Drop it! */
; 1185 :                         DBGMSG(256, "HHCTN115D %4.4X:TCPNJE - Interrupting incoming connection in progress on device %4.4X\n",

  00b37	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00b3f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00b42	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00b48	c1 e8 0f	 shr	 eax, 15
  00b4b	83 e0 01	 and	 eax, 1
  00b4e	85 c0		 test	 eax, eax
  00b50	74 17		 je	 SHORT $LN53@tcpnje_pro
  00b52	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00b5a	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00b60	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00b65	85 c0		 test	 eax, eax
  00b67	75 17		 jne	 SHORT $LN52@tcpnje_pro
$LN53@tcpnje_pro:
  00b69	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00b71	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00b77	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00b7c	85 c0		 test	 eax, eax
  00b7e	74 2a		 je	 SHORT $LN51@tcpnje_pro
$LN52@tcpnje_pro:
  00b80	48 8b 44 24 38	 mov	 rax, QWORD PTR otherdev$2[rsp]
  00b85	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00b89	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00b91	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00b94	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00b98	44 8b c0	 mov	 r8d, eax
  00b9b	8b d1		 mov	 edx, ecx
  00b9d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159850
  00ba4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN51@tcpnje_pro:

; 1186 :                                  tn->dev->devnum, otherdev->devnum);
; 1187 :                         close_socket(othertn->pfd);

  00baa	48 8b 44 24 30	 mov	 rax, QWORD PTR othertn$1[rsp]
  00baf	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  00bb5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1188 :                         othertn->pfd = -1;

  00bbb	48 8b 44 24 30	 mov	 rax, QWORD PTR othertn$1[rsp]
  00bc0	c7 80 48 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+328], -1
$LN50@tcpnje_pro:

; 1189 :                     }
; 1190 : 
; 1191 :                     /* Send TCPNJE ACK on behalf of other device */
; 1192 :                     tcpnje_ttc(tn->pfd, TCPNJE_ACK, 0, tn);

  00bca	4c 8b 8c 24 58
	01 00 00	 mov	 r9, QWORD PTR tn$[rsp]
  00bd2	45 33 c0	 xor	 r8d, r8d
  00bd5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:TCPNJE_ACK
  00bdc	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00be4	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  00bea	e8 00 00 00 00	 call	 tcpnje_ttc

; 1193 :                     othertn->state = NJEACKSNT;

  00bef	48 8b 44 24 30	 mov	 rax, QWORD PTR othertn$1[rsp]
  00bf4	c7 80 54 01 00
	00 06 00 00 00	 mov	 DWORD PTR [rax+340], 6

; 1194 : 
; 1195 :                     /* TCPNJE OPEN sequence complete. Transfer connection to main I/O code. */
; 1196 :                     othertn->sfd = tn->pfd;

  00bfe	48 8b 44 24 30	 mov	 rax, QWORD PTR othertn$1[rsp]
  00c03	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00c0b	8b 89 48 01 00
	00		 mov	 ecx, DWORD PTR [rcx+328]
  00c11	89 88 3c 01 00
	00		 mov	 DWORD PTR [rax+316], ecx

; 1197 :                     tn->pfd = -1;

  00c17	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00c1f	c7 80 48 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+328], -1

; 1198 : 
; 1199 :                     /* Prepare to receive the first TTB */
; 1200 :                     othertn->tcpinbuf.inptr.address = othertn->tcpinbuf.base.address;

  00c29	48 8b 44 24 30	 mov	 rax, QWORD PTR othertn$1[rsp]
  00c2e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR othertn$1[rsp]
  00c33	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00c3a	48 89 88 c0 00
	00 00		 mov	 QWORD PTR [rax+192], rcx

; 1201 : 
; 1202 :                     DBGMSG(256, "HHCTN053I %4.4X:TCPNJE - passing TCPNJE OPEN for link %s - %s to device %4.4X\n",

  00c41	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00c49	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00c4c	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00c52	c1 e8 0f	 shr	 eax, 15
  00c55	83 e0 01	 and	 eax, 1
  00c58	85 c0		 test	 eax, eax
  00c5a	74 17		 je	 SHORT $LN56@tcpnje_pro
  00c5c	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00c64	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00c6a	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00c6f	85 c0		 test	 eax, eax
  00c71	75 1b		 jne	 SHORT $LN55@tcpnje_pro
$LN56@tcpnje_pro:
  00c73	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00c7b	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00c81	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00c86	85 c0		 test	 eax, eax
  00c88	0f 84 91 00 00
	00		 je	 $LN54@tcpnje_pro
$LN55@tcpnje_pro:
  00c8e	48 8b 44 24 38	 mov	 rax, QWORD PTR otherdev$2[rsp]
  00c93	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00c97	89 44 24 78	 mov	 DWORD PTR tv545[rsp], eax
  00c9b	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00ca3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00ca6	48 83 c1 08	 add	 rcx, 8
  00caa	4c 8b c1	 mov	 r8, rcx
  00cad	ba 09 00 00 00	 mov	 edx, 9
  00cb2	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  00cba	e8 00 00 00 00	 call	 guest_to_host_string
  00cbf	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv547[rsp], rax
  00cc7	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00ccf	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00cd2	48 83 c1 14	 add	 rcx, 20
  00cd6	4c 8b c1	 mov	 r8, rcx
  00cd9	ba 09 00 00 00	 mov	 edx, 9
  00cde	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  00ce6	e8 00 00 00 00	 call	 guest_to_host_string
  00ceb	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00cf3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00cf6	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00cfa	8b 54 24 78	 mov	 edx, DWORD PTR tv545[rsp]
  00cfe	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  00d02	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR tv547[rsp]
  00d0a	4c 8b ca	 mov	 r9, rdx
  00d0d	4c 8b c0	 mov	 r8, rax
  00d10	8b d1		 mov	 edx, ecx
  00d12	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159854
  00d19	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN54@tcpnje_pro:

; 1203 :                               tn->dev->devnum, guest_to_host_string(lnodestring, sizeof(lnodestring), buffer->base.ttc->ohost),
; 1204 :                                           guest_to_host_string(rnodestring, sizeof(rnodestring), buffer->base.ttc->rhost),
; 1205 :                               otherdev->devnum);
; 1206 : 
; 1207 :                     /* Poke the other device to pick up the connection */
; 1208 :                     tcpnje_wakeup(othertn, 2);

  00d1f	b2 02		 mov	 dl, 2
  00d21	48 8b 4c 24 30	 mov	 rcx, QWORD PTR othertn$1[rsp]
  00d26	e8 00 00 00 00	 call	 tcpnje_wakeup

; 1209 : 
; 1210 :                     release_lock(&othertn->lock);

  00d2b	48 8b 44 24 30	 mov	 rax, QWORD PTR othertn$1[rsp]
  00d30	48 83 c0 60	 add	 rax, 96			; 00000060H
  00d34	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159855
  00d3b	48 8b c8	 mov	 rcx, rax
  00d3e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 1211 : 
; 1212 :                     /* Meanwhile, we go back to whatever we were doing */
; 1213 :                     if (tn->state == TCPCONPAS) tn->state = tn->listening ? TCPLISTEN : CLOSED;

  00d44	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00d4c	83 b8 54 01 00
	00 04		 cmp	 DWORD PTR [rax+340], 4
  00d53	75 37		 jne	 SHORT $LN57@tcpnje_pro
  00d55	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00d5d	0f b6 80 62 01
	00 00		 movzx	 eax, BYTE PTR [rax+354]
  00d64	85 c0		 test	 eax, eax
  00d66	74 0a		 je	 SHORT $LN84@tcpnje_pro
  00d68	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv577[rsp], 1
  00d70	eb 08		 jmp	 SHORT $LN85@tcpnje_pro
$LN84@tcpnje_pro:
  00d72	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv577[rsp], 0
$LN85@tcpnje_pro:
  00d7a	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00d82	8b 4c 24 48	 mov	 ecx, DWORD PTR tv577[rsp]
  00d86	89 88 54 01 00
	00		 mov	 DWORD PTR [rax+340], ecx
$LN57@tcpnje_pro:

; 1214 : 
; 1215 :                     found = 1;

  00d8c	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR found$3[rsp], 1

; 1216 : 
; 1217 :                     break;

  00d94	eb 05		 jmp	 SHORT $LN3@tcpnje_pro
$LN31@tcpnje_pro:
$LN28@tcpnje_pro:

; 1218 :                 }
; 1219 :             }
; 1220 :         }

  00d96	e9 03 f7 ff ff	 jmp	 $LN2@tcpnje_pro
$LN3@tcpnje_pro:

; 1221 : 
; 1222 :         if (!found)

  00d9b	83 7c 24 4c 00	 cmp	 DWORD PTR found$3[rsp], 0
  00da0	0f 85 5b 01 00
	00		 jne	 $LN58@tcpnje_pro

; 1223 :         {
; 1224 :             DBGMSG(256, "HHCTN116D %4.4X:TCPNJE - rejecting TCPNJE OPEN for unrecognised or inactive link %s - %s\n",

  00da6	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00dae	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00db1	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00db7	c1 e8 0f	 shr	 eax, 15
  00dba	83 e0 01	 and	 eax, 1
  00dbd	85 c0		 test	 eax, eax
  00dbf	74 17		 je	 SHORT $LN61@tcpnje_pro
  00dc1	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00dc9	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00dcf	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00dd4	85 c0		 test	 eax, eax
  00dd6	75 17		 jne	 SHORT $LN60@tcpnje_pro
$LN61@tcpnje_pro:
  00dd8	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00de0	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00de6	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00deb	85 c0		 test	 eax, eax
  00ded	74 7c		 je	 SHORT $LN59@tcpnje_pro
$LN60@tcpnje_pro:
  00def	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  00df7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00dfa	48 83 c0 08	 add	 rax, 8
  00dfe	4c 8b c0	 mov	 r8, rax
  00e01	ba 09 00 00 00	 mov	 edx, 9
  00e06	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  00e0e	e8 00 00 00 00	 call	 guest_to_host_string
  00e13	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv590[rsp], rax
  00e1b	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00e23	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00e26	48 83 c1 14	 add	 rcx, 20
  00e2a	4c 8b c1	 mov	 r8, rcx
  00e2d	ba 09 00 00 00	 mov	 edx, 9
  00e32	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  00e3a	e8 00 00 00 00	 call	 guest_to_host_string
  00e3f	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00e47	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00e4a	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00e4e	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR tv590[rsp]
  00e56	4c 8b ca	 mov	 r9, rdx
  00e59	4c 8b c0	 mov	 r8, rax
  00e5c	8b d1		 mov	 edx, ecx
  00e5e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159861
  00e65	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN59@tcpnje_pro:

; 1225 :                               tn->dev->devnum, guest_to_host_string(lnodestring, sizeof(lnodestring), buffer->base.ttc->ohost),
; 1226 :                                           guest_to_host_string(rnodestring, sizeof(rnodestring), buffer->base.ttc->rhost));
; 1227 : 
; 1228 :             /* No luck finding link anywhere. Reply with NAK.  Reason code 1. */
; 1229 :             tcpnje_ttc(tn->pfd, TCPNJE_NAK, 1, tn);

  00e6b	4c 8b 8c 24 58
	01 00 00	 mov	 r9, QWORD PTR tn$[rsp]
  00e73	41 b8 01 00 00
	00		 mov	 r8d, 1
  00e79	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:TCPNJE_NAK
  00e80	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00e88	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  00e8e	e8 00 00 00 00	 call	 tcpnje_ttc

; 1230 : 
; 1231 :             close_socket(tn->pfd);

  00e93	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00e9b	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  00ea1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1232 :             tn->pfd = -1;

  00ea7	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00eaf	c7 80 48 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+328], -1

; 1233 :             if (tn->state == TCPCONPAS) tn->state = tn->listening ? TCPLISTEN : CLOSED;

  00eb9	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00ec1	83 b8 54 01 00
	00 04		 cmp	 DWORD PTR [rax+340], 4
  00ec8	75 37		 jne	 SHORT $LN62@tcpnje_pro
  00eca	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00ed2	0f b6 80 62 01
	00 00		 movzx	 eax, BYTE PTR [rax+354]
  00ed9	85 c0		 test	 eax, eax
  00edb	74 0a		 je	 SHORT $LN86@tcpnje_pro
  00edd	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv623[rsp], 1
  00ee5	eb 08		 jmp	 SHORT $LN87@tcpnje_pro
$LN86@tcpnje_pro:
  00ee7	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv623[rsp], 0
$LN87@tcpnje_pro:
  00eef	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00ef7	8b 4c 24 50	 mov	 ecx, DWORD PTR tv623[rsp]
  00efb	89 88 54 01 00
	00		 mov	 DWORD PTR [rax+340], ecx
$LN62@tcpnje_pro:
$LN58@tcpnje_pro:

; 1234 :         }
; 1235 : 
; 1236 :         return;

  00f01	e9 1a 06 00 00	 jmp	 $LN1@tcpnje_pro
$LN23@tcpnje_pro:

; 1237 :     }
; 1238 : 
; 1239 :     /* Is the link already connected? */
; 1240 :     if (tn->state >= NJECONPRI)

  00f06	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00f0e	83 b8 54 01 00
	00 08		 cmp	 DWORD PTR [rax+340], 8
  00f15	0f 8c f8 01 00
	00		 jl	 $LN63@tcpnje_pro

; 1241 :     {
; 1242 :         DBGMSG(256, "HHCTN117D %4.4X:TCPNJE - rejecting incoming TCPNJE OPEN for link %s - %s : already connected\n",

  00f1b	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00f23	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00f26	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00f2c	c1 e8 0f	 shr	 eax, 15
  00f2f	83 e0 01	 and	 eax, 1
  00f32	85 c0		 test	 eax, eax
  00f34	74 17		 je	 SHORT $LN66@tcpnje_pro
  00f36	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00f3e	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00f44	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00f49	85 c0		 test	 eax, eax
  00f4b	75 17		 jne	 SHORT $LN65@tcpnje_pro
$LN66@tcpnje_pro:
  00f4d	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00f55	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00f5b	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00f60	85 c0		 test	 eax, eax
  00f62	74 7c		 je	 SHORT $LN64@tcpnje_pro
$LN65@tcpnje_pro:
  00f64	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  00f6c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00f6f	48 83 c0 08	 add	 rax, 8
  00f73	4c 8b c0	 mov	 r8, rax
  00f76	ba 09 00 00 00	 mov	 edx, 9
  00f7b	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  00f83	e8 00 00 00 00	 call	 guest_to_host_string
  00f88	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv637[rsp], rax
  00f90	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00f98	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00f9b	48 83 c1 14	 add	 rcx, 20
  00f9f	4c 8b c1	 mov	 r8, rcx
  00fa2	ba 09 00 00 00	 mov	 edx, 9
  00fa7	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  00faf	e8 00 00 00 00	 call	 guest_to_host_string
  00fb4	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00fbc	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00fbf	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00fc3	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR tv637[rsp]
  00fcb	4c 8b ca	 mov	 r9, rdx
  00fce	4c 8b c0	 mov	 r8, rax
  00fd1	8b d1		 mov	 edx, ecx
  00fd3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159867
  00fda	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN64@tcpnje_pro:

; 1243 :                        tn->dev->devnum, guest_to_host_string(lnodestring, sizeof(lnodestring), buffer->base.ttc->ohost),
; 1244 :                                    guest_to_host_string(rnodestring, sizeof(rnodestring), buffer->base.ttc->rhost));
; 1245 : 
; 1246 :         /* No. Reply with NAK.  Reason code 2 */
; 1247 :         tcpnje_ttc(tn->pfd, TCPNJE_NAK, 2, tn);

  00fe0	4c 8b 8c 24 58
	01 00 00	 mov	 r9, QWORD PTR tn$[rsp]
  00fe8	41 b8 02 00 00
	00		 mov	 r8d, 2
  00fee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:TCPNJE_NAK
  00ff5	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00ffd	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  01003	e8 00 00 00 00	 call	 tcpnje_ttc

; 1248 :         close_socket(tn->pfd);

  01008	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  01010	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  01016	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1249 :         tn->pfd = -1;

  0101c	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  01024	c7 80 48 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+328], -1

; 1250 : 
; 1251 :         /* Also kill the link which is assumed to be already failed but unnoticed */
; 1252 :         DBGMSG(256, "HHCTN118D %4.4X:TCPNJE - closing link %s - %s due to unexpected TCPNJE OPEN received for same\n",

  0102e	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  01036	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01039	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0103f	c1 e8 0f	 shr	 eax, 15
  01042	83 e0 01	 and	 eax, 1
  01045	85 c0		 test	 eax, eax
  01047	74 17		 je	 SHORT $LN69@tcpnje_pro
  01049	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  01051	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01057	25 00 01 00 00	 and	 eax, 256		; 00000100H
  0105c	85 c0		 test	 eax, eax
  0105e	75 17		 jne	 SHORT $LN68@tcpnje_pro
$LN69@tcpnje_pro:
  01060	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  01068	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0106e	25 00 01 00 00	 and	 eax, 256		; 00000100H
  01073	85 c0		 test	 eax, eax
  01075	74 7c		 je	 SHORT $LN67@tcpnje_pro
$LN68@tcpnje_pro:
  01077	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  0107f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01082	48 83 c0 08	 add	 rax, 8
  01086	4c 8b c0	 mov	 r8, rax
  01089	ba 09 00 00 00	 mov	 edx, 9
  0108e	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  01096	e8 00 00 00 00	 call	 guest_to_host_string
  0109b	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv675[rsp], rax
  010a3	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  010ab	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  010ae	48 83 c1 14	 add	 rcx, 20
  010b2	4c 8b c1	 mov	 r8, rcx
  010b5	ba 09 00 00 00	 mov	 edx, 9
  010ba	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  010c2	e8 00 00 00 00	 call	 guest_to_host_string
  010c7	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  010cf	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  010d2	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  010d6	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR tv675[rsp]
  010de	4c 8b ca	 mov	 r9, rdx
  010e1	4c 8b c0	 mov	 r8, rax
  010e4	8b d1		 mov	 edx, ecx
  010e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159871
  010ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN67@tcpnje_pro:

; 1253 :                        tn->dev->devnum, guest_to_host_string(lnodestring, sizeof(lnodestring), buffer->base.ttc->ohost),
; 1254 :                                    guest_to_host_string(rnodestring, sizeof(rnodestring), buffer->base.ttc->rhost));
; 1255 :         tcpnje_close(tn->sfd, tn);

  010f3	48 8b 94 24 58
	01 00 00	 mov	 rdx, QWORD PTR tn$[rsp]
  010fb	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  01103	8b 88 3c 01 00
	00		 mov	 ecx, DWORD PTR [rax+316]
  01109	e8 00 00 00 00	 call	 tcpnje_close

; 1256 : 
; 1257 :         return;

  0110e	e9 0d 04 00 00	 jmp	 $LN1@tcpnje_pro
$LN63@tcpnje_pro:

; 1258 :     }
; 1259 : 
; 1260 :     /* Are we already doing an active open? */
; 1261 :     if ((tn->state == TCPCONSNT) || (tn->state == TCPCONACT) || (tn->state == NJEOPNSNT) || (tn->state == NJEACKRCD))

  01113	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0111b	83 b8 54 01 00
	00 02		 cmp	 DWORD PTR [rax+340], 2
  01122	74 37		 je	 SHORT $LN71@tcpnje_pro
  01124	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0112c	83 b8 54 01 00
	00 03		 cmp	 DWORD PTR [rax+340], 3
  01133	74 26		 je	 SHORT $LN71@tcpnje_pro
  01135	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0113d	83 b8 54 01 00
	00 05		 cmp	 DWORD PTR [rax+340], 5
  01144	74 15		 je	 SHORT $LN71@tcpnje_pro
  01146	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0114e	83 b8 54 01 00
	00 07		 cmp	 DWORD PTR [rax+340], 7
  01155	0f 85 75 01 00
	00		 jne	 $LN70@tcpnje_pro
$LN71@tcpnje_pro:

; 1262 :     {
; 1263 :         DBGMSG(256, "HHCTN119D %4.4X:TCPNJE - rejecting incoming TCPNJE OPEN for link %s - %s : already doing active open\n",

  0115b	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  01163	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01166	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0116c	c1 e8 0f	 shr	 eax, 15
  0116f	83 e0 01	 and	 eax, 1
  01172	85 c0		 test	 eax, eax
  01174	74 17		 je	 SHORT $LN74@tcpnje_pro
  01176	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0117e	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  01184	25 00 01 00 00	 and	 eax, 256		; 00000100H
  01189	85 c0		 test	 eax, eax
  0118b	75 17		 jne	 SHORT $LN73@tcpnje_pro
$LN74@tcpnje_pro:
  0118d	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  01195	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0119b	25 00 01 00 00	 and	 eax, 256		; 00000100H
  011a0	85 c0		 test	 eax, eax
  011a2	74 7c		 je	 SHORT $LN72@tcpnje_pro
$LN73@tcpnje_pro:
  011a4	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR buffer$[rsp]
  011ac	48 8b 00	 mov	 rax, QWORD PTR [rax]
  011af	48 83 c0 08	 add	 rax, 8
  011b3	4c 8b c0	 mov	 r8, rax
  011b6	ba 09 00 00 00	 mov	 edx, 9
  011bb	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  011c3	e8 00 00 00 00	 call	 guest_to_host_string
  011c8	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv716[rsp], rax
  011d0	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  011d8	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  011db	48 83 c1 14	 add	 rcx, 20
  011df	4c 8b c1	 mov	 r8, rcx
  011e2	ba 09 00 00 00	 mov	 edx, 9
  011e7	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  011ef	e8 00 00 00 00	 call	 guest_to_host_string
  011f4	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  011fc	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  011ff	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  01203	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR tv716[rsp]
  0120b	4c 8b ca	 mov	 r9, rdx
  0120e	4c 8b c0	 mov	 r8, rax
  01211	8b d1		 mov	 edx, ecx
  01213	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159877
  0121a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN72@tcpnje_pro:

; 1264 :                        tn->dev->devnum, guest_to_host_string(lnodestring, sizeof(lnodestring), buffer->base.ttc->ohost),
; 1265 :                                    guest_to_host_string(rnodestring, sizeof(rnodestring), buffer->base.ttc->rhost));
; 1266 : 
; 1267 :         /* No. Reply with NAK.  Reason code 3 */
; 1268 :         tcpnje_ttc(tn->pfd, TCPNJE_NAK, 3, tn);

  01220	4c 8b 8c 24 58
	01 00 00	 mov	 r9, QWORD PTR tn$[rsp]
  01228	41 b8 03 00 00
	00		 mov	 r8d, 3
  0122e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:TCPNJE_NAK
  01235	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0123d	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  01243	e8 00 00 00 00	 call	 tcpnje_ttc

; 1269 :         close_socket(tn->pfd);

  01248	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  01250	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  01256	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1270 :         tn->pfd = -1;

  0125c	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  01264	c7 80 48 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+328], -1

; 1271 :         close_socket(tn->afd);

  0126e	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  01276	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  0127c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1272 :         tn->afd = -1;

  01282	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0128a	c7 80 44 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+324], -1

; 1273 :         tn->state = tn->listening ? TCPLISTEN : CLOSED;

  01294	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0129c	0f b6 80 62 01
	00 00		 movzx	 eax, BYTE PTR [rax+354]
  012a3	85 c0		 test	 eax, eax
  012a5	74 0a		 je	 SHORT $LN88@tcpnje_pro
  012a7	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv750[rsp], 1
  012af	eb 08		 jmp	 SHORT $LN89@tcpnje_pro
$LN88@tcpnje_pro:
  012b1	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv750[rsp], 0
$LN89@tcpnje_pro:
  012b9	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  012c1	8b 4c 24 54	 mov	 ecx, DWORD PTR tv750[rsp]
  012c5	89 88 54 01 00
	00		 mov	 DWORD PTR [rax+340], ecx

; 1274 :         return;

  012cb	e9 50 02 00 00	 jmp	 $LN1@tcpnje_pro
$LN70@tcpnje_pro:

; 1275 :     }
; 1276 : 
; 1277 :     /* Are we expecting a TCPNJE OPEN for this link? */
; 1278 :     if (tn->state != TCPCONPAS)

  012d0	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  012d8	83 b8 54 01 00
	00 04		 cmp	 DWORD PTR [rax+340], 4
  012df	0f 84 b8 01 00
	00		 je	 $LN75@tcpnje_pro

; 1279 :     {
; 1280 :         DBGMSG(256, "HHCTN120D %4.4X:TCPNJE - ignoring unexpected TCPNJE OPEN for link %s - %s while in connection state: %s\n",

  012e5	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  012ed	48 8b 00	 mov	 rax, QWORD PTR [rax]
  012f0	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  012f6	c1 e8 0f	 shr	 eax, 15
  012f9	83 e0 01	 and	 eax, 1
  012fc	85 c0		 test	 eax, eax
  012fe	74 17		 je	 SHORT $LN78@tcpnje_pro
  01300	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  01308	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0130e	25 00 01 00 00	 and	 eax, 256		; 00000100H
  01313	85 c0		 test	 eax, eax
  01315	75 1b		 jne	 SHORT $LN77@tcpnje_pro
$LN78@tcpnje_pro:
  01317	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0131f	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  01325	25 00 01 00 00	 and	 eax, 256		; 00000100H
  0132a	85 c0		 test	 eax, eax
  0132c	0f 84 bb 00 00
	00		 je	 $LN76@tcpnje_pro
$LN77@tcpnje_pro:
  01332	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0133a	48 63 80 54 01
	00 00		 movsxd	 rax, DWORD PTR [rax+340]
  01341	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv765[rsp], rax
  01349	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tcpnje_state_text
  01350	48 89 8c 24 e0
	00 00 00	 mov	 QWORD PTR tv815[rsp], rcx
  01358	48 8b 94 24 50
	01 00 00	 mov	 rdx, QWORD PTR buffer$[rsp]
  01360	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  01363	48 83 c2 08	 add	 rdx, 8
  01367	4c 8b c2	 mov	 r8, rdx
  0136a	ba 09 00 00 00	 mov	 edx, 9
  0136f	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  01377	e8 00 00 00 00	 call	 guest_to_host_string
  0137c	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv769[rsp], rax
  01384	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  0138c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0138f	48 83 c1 14	 add	 rcx, 20
  01393	4c 8b c1	 mov	 r8, rcx
  01396	ba 09 00 00 00	 mov	 edx, 9
  0139b	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  013a3	e8 00 00 00 00	 call	 guest_to_host_string
  013a8	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  013b0	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  013b3	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  013b7	4c 8b 84 24 e0
	00 00 00	 mov	 r8, QWORD PTR tv815[rsp]
  013bf	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR tv765[rsp]
  013c7	49 8b 14 d0	 mov	 rdx, QWORD PTR [r8+rdx*8]
  013cb	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  013d0	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR tv769[rsp]
  013d8	4c 8b ca	 mov	 r9, rdx
  013db	4c 8b c0	 mov	 r8, rax
  013de	8b d1		 mov	 edx, ecx
  013e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159882
  013e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN76@tcpnje_pro:

; 1281 :                        tn->dev->devnum, guest_to_host_string(lnodestring, sizeof(lnodestring), buffer->base.ttc->ohost),
; 1282 :                                    guest_to_host_string(rnodestring, sizeof(rnodestring), buffer->base.ttc->rhost),
; 1283 :                                    tcpnje_state_text[tn->state]);
; 1284 :         tcpnje_ttc(tn->pfd, TCPNJE_NAK, 3, tn);

  013ed	4c 8b 8c 24 58
	01 00 00	 mov	 r9, QWORD PTR tn$[rsp]
  013f5	41 b8 03 00 00
	00		 mov	 r8d, 3
  013fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:TCPNJE_NAK
  01402	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0140a	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  01410	e8 00 00 00 00	 call	 tcpnje_ttc

; 1285 :         close_socket(tn->pfd);

  01415	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0141d	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  01423	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1286 :         tn->pfd = -1;

  01429	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  01431	c7 80 48 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+328], -1

; 1287 :         close_socket(tn->afd);

  0143b	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  01443	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  01449	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1288 :         tn->afd = -1;

  0144f	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  01457	c7 80 44 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+324], -1

; 1289 :         tn->state = tn->listening ? TCPLISTEN : CLOSED;

  01461	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  01469	0f b6 80 62 01
	00 00		 movzx	 eax, BYTE PTR [rax+354]
  01470	85 c0		 test	 eax, eax
  01472	74 0a		 je	 SHORT $LN90@tcpnje_pro
  01474	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv803[rsp], 1
  0147c	eb 08		 jmp	 SHORT $LN91@tcpnje_pro
$LN90@tcpnje_pro:
  0147e	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv803[rsp], 0
$LN91@tcpnje_pro:
  01486	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0148e	8b 4c 24 58	 mov	 ecx, DWORD PTR tv803[rsp]
  01492	89 88 54 01 00
	00		 mov	 DWORD PTR [rax+340], ecx

; 1290 :         return;

  01498	e9 83 00 00 00	 jmp	 $LN1@tcpnje_pro
$LN75@tcpnje_pro:

; 1291 :     }
; 1292 : 
; 1293 :     /* Send TCPNJE ACK */
; 1294 :     tcpnje_ttc(tn->pfd, TCPNJE_ACK, 0, tn);

  0149d	4c 8b 8c 24 58
	01 00 00	 mov	 r9, QWORD PTR tn$[rsp]
  014a5	45 33 c0	 xor	 r8d, r8d
  014a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:TCPNJE_ACK
  014af	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  014b7	8b 88 48 01 00
	00		 mov	 ecx, DWORD PTR [rax+328]
  014bd	e8 00 00 00 00	 call	 tcpnje_ttc

; 1295 : 
; 1296 :     tn->state = NJEACKSNT;

  014c2	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  014ca	c7 80 54 01 00
	00 06 00 00 00	 mov	 DWORD PTR [rax+340], 6

; 1297 : 
; 1298 :     /* TCPNJE OPEN sequence complete. Transfer connection to main I/O code. */
; 1299 :     tn->sfd = tn->pfd;

  014d4	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  014dc	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  014e4	8b 89 48 01 00
	00		 mov	 ecx, DWORD PTR [rcx+328]
  014ea	89 88 3c 01 00
	00		 mov	 DWORD PTR [rax+316], ecx

; 1300 :     tn->pfd = -1;

  014f0	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  014f8	c7 80 48 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+328], -1

; 1301 : 
; 1302 :     /* Prepare to receive the first TTB */
; 1303 :     tn->tcpinbuf.inptr.address = tn->tcpinbuf.base.address;

  01502	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0150a	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  01512	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  01519	48 89 88 c0 00
	00 00		 mov	 QWORD PTR [rax+192], rcx
$LN1@tcpnje_pro:

; 1304 : 
; 1305 :     return;
; 1306 : }

  01520	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  01528	48 33 cc	 xor	 rcx, rsp
  0152b	e8 00 00 00 00	 call	 __security_check_cookie
  01530	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  01537	c3		 ret	 0
tcpnje_process_request ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
tv$ = 8
tmo$ = 16
tcpnje_setto PROC

; 1029 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1030 :     if (tmo != 0)

  00009	83 7c 24 10 00	 cmp	 DWORD PTR tmo$[rsp], 0
  0000e	74 56		 je	 SHORT $LN2@tcpnje_set

; 1031 :     {
; 1032 :         if (tmo < 0)

  00010	83 7c 24 10 00	 cmp	 DWORD PTR tmo$[rsp], 0
  00015	7d 19		 jge	 SHORT $LN3@tcpnje_set

; 1033 :         {
; 1034 :             tv->tv_sec = 0;

  00017	48 8b 44 24 08	 mov	 rax, QWORD PTR tv$[rsp]
  0001c	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 1035 :             tv->tv_usec = 1;

  00022	48 8b 44 24 08	 mov	 rax, QWORD PTR tv$[rsp]
  00027	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [rax+4], 1

; 1036 :         }

  0002e	eb 2f		 jmp	 SHORT $LN4@tcpnje_set
$LN3@tcpnje_set:

; 1037 :         else
; 1038 :         {
; 1039 :             tv->tv_sec = tmo / 1000;

  00030	8b 44 24 10	 mov	 eax, DWORD PTR tmo$[rsp]
  00034	99		 cdq
  00035	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  0003a	f7 f9		 idiv	 ecx
  0003c	48 8b 4c 24 08	 mov	 rcx, QWORD PTR tv$[rsp]
  00041	89 01		 mov	 DWORD PTR [rcx], eax

; 1040 :             tv->tv_usec = (tmo % 1000) * 1000;

  00043	8b 44 24 10	 mov	 eax, DWORD PTR tmo$[rsp]
  00047	99		 cdq
  00048	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  0004d	f7 f9		 idiv	 ecx
  0004f	8b c2		 mov	 eax, edx
  00051	69 c0 e8 03 00
	00		 imul	 eax, eax, 1000		; 000003e8H
  00057	48 8b 4c 24 08	 mov	 rcx, QWORD PTR tv$[rsp]
  0005c	89 41 04	 mov	 DWORD PTR [rcx+4], eax
$LN4@tcpnje_set:

; 1041 :         }
; 1042 :         return(tv);

  0005f	48 8b 44 24 08	 mov	 rax, QWORD PTR tv$[rsp]
  00064	eb 02		 jmp	 SHORT $LN1@tcpnje_set
$LN2@tcpnje_set:

; 1043 :     }
; 1044 :     return(NULL);

  00066	33 c0		 xor	 eax, eax
$LN1@tcpnje_set:

; 1045 : }

  00068	c3		 ret	 0
tcpnje_setto ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
i$1 = 48
rc$ = 52
socknamelen$ = 56
intmp$ = 60
$T2 = 64
$T3 = 72
tv160 = 80
tv200 = 88
tv255 = 96
tv262 = 104
sockname$ = 112
text$4 = 128
rnodestring$ = 144
lnodestring$ = 160
typestring$ = 176
__$ArrayPad$ = 192
fd$ = 224
type$ = 232
reason$ = 240
tn$ = 248
tcpnje_ttc PROC

; 912  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00021	48 33 c4	 xor	 rax, rsp
  00024	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 913  :     struct in_addr intmp;
; 914  :     struct sockaddr_in sockname;
; 915  : #if defined(_MSVC_)
; 916  :     int socknamelen;
; 917  : #else /* defined(_MSVC_) */
; 918  :     socklen_t socknamelen;
; 919  : #endif /* defined(_MSVC_) */
; 920  :     int rc;
; 921  :     char typestring[9], lnodestring[9], rnodestring[9];
; 922  : 
; 923  :     memcpy(&tn->ttcactbuf.base.ttc->type, type, sizeof(tn->ttcactbuf.base.ttc->type));

  0002c	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00034	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00038	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00040	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00043	48 89 08	 mov	 QWORD PTR [rax], rcx

; 924  : 
; 925  :     if (!memcmp(TCPNJE_OPEN, type, sizeof(tn->ttcactbuf.base.ttc->type)))

  00046	41 b8 08 00 00
	00		 mov	 r8d, 8
  0004c	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR type$[rsp]
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:TCPNJE_OPEN
  0005b	e8 00 00 00 00	 call	 memcmp
  00060	85 c0		 test	 eax, eax
  00062	0f 85 7f 02 00
	00		 jne	 $LN5@tcpnje_ttc

; 926  :     {
; 927  :         /* Get information required to fill in TTC for OPEN */
; 928  :         memcpy(&tn->ttcactbuf.base.ttc->rhost, tn->lnode, sizeof(tn->ttcactbuf.base.ttc->rhost));

  00068	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00070	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00074	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  0007c	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00080	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 929  :         memcpy(&tn->ttcactbuf.base.ttc->ohost, tn->rnode, sizeof(tn->ttcactbuf.base.ttc->ohost));

  00084	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0008c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00090	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00098	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  0009c	48 89 48 14	 mov	 QWORD PTR [rax+20], rcx

; 930  : 
; 931  :         /* Get ip address of this end of the connection */
; 932  :         socknamelen = sizeof(sockname);

  000a0	c7 44 24 38 10
	00 00 00	 mov	 DWORD PTR socknamelen$[rsp], 16

; 933  :         rc = getsockname(fd, (struct sockaddr *) &sockname, &socknamelen);

  000a8	48 63 84 24 e0
	00 00 00	 movsxd	 rax, DWORD PTR fd$[rsp]
  000b0	4c 8d 44 24 38	 lea	 r8, QWORD PTR socknamelen$[rsp]
  000b5	48 8d 54 24 70	 lea	 rdx, QWORD PTR sockname$[rsp]
  000ba	48 8b c8	 mov	 rcx, rax
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getsockname
  000c3	89 44 24 34	 mov	 DWORD PTR rc$[rsp], eax

; 934  :         if (!rc)

  000c7	83 7c 24 34 00	 cmp	 DWORD PTR rc$[rsp], 0
  000cc	75 18		 jne	 SHORT $LN7@tcpnje_ttc

; 935  :         {
; 936  :             tn->ttcactbuf.base.ttc->rip = sockname.sin_addr.s_addr;

  000ce	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  000d6	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000da	8b 4c 24 74	 mov	 ecx, DWORD PTR sockname$[rsp+4]
  000de	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 937  :         }

  000e1	e9 db 00 00 00	 jmp	 $LN8@tcpnje_ttc
$LN7@tcpnje_ttc:

; 938  :         else
; 939  :         {
; 940  :             /* Try using the address from the configuration if it looks reasonable */
; 941  :             if (tn->lhost != INADDR_NONE)

  000e6	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  000ee	83 78 40 ff	 cmp	 DWORD PTR [rax+64], -1	; ffffffffH
  000f2	74 1c		 je	 SHORT $LN9@tcpnje_ttc

; 942  :             {
; 943  :                 tn->ttcactbuf.base.ttc->rip = tn->lhost;

  000f4	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  000fc	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00100	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00108	8b 49 40	 mov	 ecx, DWORD PTR [rcx+64]
  0010b	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 944  :             }

  0010e	eb 13		 jmp	 SHORT $LN10@tcpnje_ttc
$LN9@tcpnje_ttc:

; 945  :             else
; 946  :             {
; 947  :                 tn->ttcactbuf.base.ttc->rip = INADDR_ANY;

  00110	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00118	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0011c	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0
$LN10@tcpnje_ttc:

; 948  :             }
; 949  :             intmp.s_addr = tn->ttcactbuf.base.ttc->rip;

  00123	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0012b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0012f	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00132	89 44 24 3c	 mov	 DWORD PTR intmp$[rsp], eax

; 950  :             DBGMSG(4, "HHCTN050W %4.4X:TCPNJE - Error obtaining local ip address for TCPNJE OPEN: %s. Using %s\n",

  00136	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0013e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00141	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00147	c1 e8 0f	 shr	 eax, 15
  0014a	83 e0 01	 and	 eax, 1
  0014d	85 c0		 test	 eax, eax
  0014f	74 15		 je	 SHORT $LN13@tcpnje_ttc
  00151	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00159	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0015f	83 e0 04	 and	 eax, 4
  00162	85 c0		 test	 eax, eax
  00164	75 15		 jne	 SHORT $LN12@tcpnje_ttc
$LN13@tcpnje_ttc:
  00166	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0016e	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00174	83 e0 04	 and	 eax, 4
  00177	85 c0		 test	 eax, eax
  00179	74 46		 je	 SHORT $LN11@tcpnje_ttc
$LN12@tcpnje_ttc:
  0017b	8b 4c 24 3c	 mov	 ecx, DWORD PTR intmp$[rsp]
  0017f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_ntoa
  00185	48 89 44 24 50	 mov	 QWORD PTR tv160[rsp], rax
  0018a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00190	8b c8		 mov	 ecx, eax
  00192	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00198	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  001a0	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001a3	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  001a7	48 8b 54 24 50	 mov	 rdx, QWORD PTR tv160[rsp]
  001ac	4c 8b ca	 mov	 r9, rdx
  001af	4c 8b c0	 mov	 r8, rax
  001b2	8b d1		 mov	 edx, ecx
  001b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159728
  001bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN11@tcpnje_ttc:
$LN8@tcpnje_ttc:

; 951  :                     tn->dev->devnum, strerror(HSO_errno), inet_ntoa(intmp));
; 952  :         }
; 953  : 
; 954  :         /* Get ip address of remote end of the connection */
; 955  :         socknamelen = sizeof(sockname);

  001c1	c7 44 24 38 10
	00 00 00	 mov	 DWORD PTR socknamelen$[rsp], 16

; 956  :         rc = getpeername(fd, (struct sockaddr *) &sockname, &socknamelen);

  001c9	48 63 84 24 e0
	00 00 00	 movsxd	 rax, DWORD PTR fd$[rsp]
  001d1	4c 8d 44 24 38	 lea	 r8, QWORD PTR socknamelen$[rsp]
  001d6	48 8d 54 24 70	 lea	 rdx, QWORD PTR sockname$[rsp]
  001db	48 8b c8	 mov	 rcx, rax
  001de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getpeername
  001e4	89 44 24 34	 mov	 DWORD PTR rc$[rsp], eax

; 957  :         if (!rc)

  001e8	83 7c 24 34 00	 cmp	 DWORD PTR rc$[rsp], 0
  001ed	75 18		 jne	 SHORT $LN14@tcpnje_ttc

; 958  :         {
; 959  :             tn->ttcactbuf.base.ttc->oip = sockname.sin_addr.s_addr;

  001ef	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  001f7	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  001fb	8b 4c 24 74	 mov	 ecx, DWORD PTR sockname$[rsp+4]
  001ff	89 48 1c	 mov	 DWORD PTR [rax+28], ecx

; 960  :         }

  00202	e9 db 00 00 00	 jmp	 $LN15@tcpnje_ttc
$LN14@tcpnje_ttc:

; 961  :         else
; 962  :         {
; 963  :             /* Try using the address from the configuration if it looks reasonable */
; 964  :             if (tn->rhost != INADDR_NONE)

  00207	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0020f	83 78 44 ff	 cmp	 DWORD PTR [rax+68], -1	; ffffffffH
  00213	74 1c		 je	 SHORT $LN16@tcpnje_ttc

; 965  :             {
; 966  :                 tn->ttcactbuf.base.ttc->oip = tn->rhost;

  00215	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0021d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00221	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00229	8b 49 44	 mov	 ecx, DWORD PTR [rcx+68]
  0022c	89 48 1c	 mov	 DWORD PTR [rax+28], ecx

; 967  :             }

  0022f	eb 13		 jmp	 SHORT $LN17@tcpnje_ttc
$LN16@tcpnje_ttc:

; 968  :             else
; 969  :             {
; 970  :                 tn->ttcactbuf.base.ttc->oip = INADDR_ANY;

  00231	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00239	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0023d	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [rax+28], 0
$LN17@tcpnje_ttc:

; 971  :             }
; 972  :             intmp.s_addr = tn->ttcactbuf.base.ttc->oip;

  00244	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0024c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00250	8b 40 1c	 mov	 eax, DWORD PTR [rax+28]
  00253	89 44 24 3c	 mov	 DWORD PTR intmp$[rsp], eax

; 973  :             DBGMSG(4, "HHCTN051W %4.4X:TCPNJE - Error obtaining remote ip address for TCPNJE OPEN: %s. Using %s\n",

  00257	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0025f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00262	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00268	c1 e8 0f	 shr	 eax, 15
  0026b	83 e0 01	 and	 eax, 1
  0026e	85 c0		 test	 eax, eax
  00270	74 15		 je	 SHORT $LN20@tcpnje_ttc
  00272	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0027a	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00280	83 e0 04	 and	 eax, 4
  00283	85 c0		 test	 eax, eax
  00285	75 15		 jne	 SHORT $LN19@tcpnje_ttc
$LN20@tcpnje_ttc:
  00287	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0028f	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00295	83 e0 04	 and	 eax, 4
  00298	85 c0		 test	 eax, eax
  0029a	74 46		 je	 SHORT $LN18@tcpnje_ttc
$LN19@tcpnje_ttc:
  0029c	8b 4c 24 3c	 mov	 ecx, DWORD PTR intmp$[rsp]
  002a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_ntoa
  002a6	48 89 44 24 58	 mov	 QWORD PTR tv200[rsp], rax
  002ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  002b1	8b c8		 mov	 ecx, eax
  002b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  002b9	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  002c1	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  002c4	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  002c8	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv200[rsp]
  002cd	4c 8b ca	 mov	 r9, rdx
  002d0	4c 8b c0	 mov	 r8, rax
  002d3	8b d1		 mov	 edx, ecx
  002d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159736
  002dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN18@tcpnje_ttc:
$LN15@tcpnje_ttc:

; 974  :                     tn->dev->devnum, strerror(HSO_errno), inet_ntoa(intmp));
; 975  :         }
; 976  :     }

  002e2	e9 88 00 00 00	 jmp	 $LN6@tcpnje_ttc
$LN5@tcpnje_ttc:

; 977  :     else
; 978  :     {
; 979  :         /* For ACK or NAK, use switched around information from the TTC we are replying to */
; 980  :         memcpy(&tn->ttcactbuf.base.ttc->rhost, tn->ttcpasbuf.base.ttc->ohost, sizeof(tn->ttcactbuf.base.ttc->rhost));

  002e7	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  002ef	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  002f6	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  002fe	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00302	48 8b 40 14	 mov	 rax, QWORD PTR [rax+20]
  00306	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 981  :         tn->ttcactbuf.base.ttc->rip = tn->ttcpasbuf.base.ttc->oip;

  0030a	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00312	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00319	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00321	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00325	8b 40 1c	 mov	 eax, DWORD PTR [rax+28]
  00328	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 982  :         memcpy(&tn->ttcactbuf.base.ttc->ohost, tn->ttcpasbuf.base.ttc->rhost, sizeof(tn->ttcactbuf.base.ttc->ohost));

  0032b	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00333	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0033a	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00342	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00346	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0034a	48 89 41 14	 mov	 QWORD PTR [rcx+20], rax

; 983  :         tn->ttcactbuf.base.ttc->oip = tn->ttcpasbuf.base.ttc->rip;

  0034e	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00356	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0035d	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00365	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00369	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0036c	89 41 1c	 mov	 DWORD PTR [rcx+28], eax
$LN6@tcpnje_ttc:

; 984  :     }
; 985  : 
; 986  :     tn->ttcactbuf.base.ttc->r = reason;

  0036f	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00377	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0037b	0f b6 8c 24 f0
	00 00 00	 movzx	 ecx, BYTE PTR reason$[rsp]
  00383	88 48 20	 mov	 BYTE PTR [rax+32], cl

; 987  : 
; 988  :     DBGMSG(256, "HHCTN108D %4.4X:TCPNJE - sending TCPNJE %s for link %s - %s",

  00386	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0038e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00391	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00397	c1 e8 0f	 shr	 eax, 15
  0039a	83 e0 01	 and	 eax, 1
  0039d	85 c0		 test	 eax, eax
  0039f	74 17		 je	 SHORT $LN23@tcpnje_ttc
  003a1	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  003a9	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  003af	25 00 01 00 00	 and	 eax, 256		; 00000100H
  003b4	85 c0		 test	 eax, eax
  003b6	75 1b		 jne	 SHORT $LN22@tcpnje_ttc
$LN23@tcpnje_ttc:
  003b8	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  003c0	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  003c6	25 00 01 00 00	 and	 eax, 256		; 00000100H
  003cb	85 c0		 test	 eax, eax
  003cd	0f 84 a1 00 00
	00		 je	 $LN21@tcpnje_ttc
$LN22@tcpnje_ttc:
  003d3	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  003db	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  003df	48 83 c0 14	 add	 rax, 20
  003e3	4c 8b c0	 mov	 r8, rax
  003e6	ba 09 00 00 00	 mov	 edx, 9
  003eb	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  003f3	e8 00 00 00 00	 call	 guest_to_host_string
  003f8	48 89 44 24 60	 mov	 QWORD PTR tv255[rsp], rax
  003fd	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00405	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00409	48 83 c1 08	 add	 rcx, 8
  0040d	4c 8b c1	 mov	 r8, rcx
  00410	ba 09 00 00 00	 mov	 edx, 9
  00415	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  0041d	e8 00 00 00 00	 call	 guest_to_host_string
  00422	48 89 44 24 68	 mov	 QWORD PTR tv262[rsp], rax
  00427	4c 8b 84 24 e8
	00 00 00	 mov	 r8, QWORD PTR type$[rsp]
  0042f	ba 09 00 00 00	 mov	 edx, 9
  00434	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR typestring$[rsp]
  0043c	e8 00 00 00 00	 call	 guest_to_host_string
  00441	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00449	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0044c	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00450	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv255[rsp]
  00455	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0045a	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv262[rsp]
  0045f	4c 8b ca	 mov	 r9, rdx
  00462	4c 8b c0	 mov	 r8, rax
  00465	8b d1		 mov	 edx, ecx
  00467	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159740
  0046e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN21@tcpnje_ttc:

; 989  :                     tn->dev->devnum, guest_to_host_string(typestring, sizeof(typestring), type),
; 990  :                     guest_to_host_string(lnodestring, sizeof(lnodestring), tn->ttcactbuf.base.ttc->rhost),
; 991  :                     guest_to_host_string(rnodestring, sizeof(rnodestring), tn->ttcactbuf.base.ttc->ohost));
; 992  : 
; 993  :     if (!memcmp(TCPNJE_NAK, type, sizeof(tn->ttcactbuf.base.ttc->type)))

  00474	41 b8 08 00 00
	00		 mov	 r8d, 8
  0047a	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR type$[rsp]
  00482	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:TCPNJE_NAK
  00489	e8 00 00 00 00	 call	 memcmp
  0048e	85 c0		 test	 eax, eax
  00490	75 5f		 jne	 SHORT $LN24@tcpnje_ttc

; 994  :     {
; 995  :         DBGMSG(256, " reason %d\n", reason);

  00492	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0049a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0049d	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  004a3	c1 e8 0f	 shr	 eax, 15
  004a6	83 e0 01	 and	 eax, 1
  004a9	85 c0		 test	 eax, eax
  004ab	74 17		 je	 SHORT $LN28@tcpnje_ttc
  004ad	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  004b5	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  004bb	25 00 01 00 00	 and	 eax, 256		; 00000100H
  004c0	85 c0		 test	 eax, eax
  004c2	75 17		 jne	 SHORT $LN27@tcpnje_ttc
$LN28@tcpnje_ttc:
  004c4	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  004cc	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  004d2	25 00 01 00 00	 and	 eax, 256		; 00000100H
  004d7	85 c0		 test	 eax, eax
  004d9	74 14		 je	 SHORT $LN26@tcpnje_ttc
$LN27@tcpnje_ttc:
  004db	8b 94 24 f0 00
	00 00		 mov	 edx, DWORD PTR reason$[rsp]
  004e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159746
  004e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN26@tcpnje_ttc:

; 996  :     }

  004ef	eb 56		 jmp	 SHORT $LN25@tcpnje_ttc
$LN24@tcpnje_ttc:

; 997  :     else
; 998  :     {
; 999  :         DBGMSG(256, "\n");

  004f1	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  004f9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  004fc	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00502	c1 e8 0f	 shr	 eax, 15
  00505	83 e0 01	 and	 eax, 1
  00508	85 c0		 test	 eax, eax
  0050a	74 17		 je	 SHORT $LN31@tcpnje_ttc
  0050c	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00514	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0051a	25 00 01 00 00	 and	 eax, 256		; 00000100H
  0051f	85 c0		 test	 eax, eax
  00521	75 17		 jne	 SHORT $LN30@tcpnje_ttc
$LN31@tcpnje_ttc:
  00523	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0052b	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00531	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00536	85 c0		 test	 eax, eax
  00538	74 0d		 je	 SHORT $LN29@tcpnje_ttc
$LN30@tcpnje_ttc:
  0053a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159750
  00541	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN29@tcpnje_ttc:
$LN25@tcpnje_ttc:

; 1000 :     }
; 1001 : 
; 1002 :     tn->ttcactbuf.inptr.address = tn->ttcactbuf.base.address + SIZEOF_TTC;

  00547	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0054f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00553	48 83 c0 21	 add	 rax, 33			; 00000021H
  00557	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  0055f	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 1003 :     tn->ttcactbuf.outptr.address = tn->ttcactbuf.base.address;

  00563	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0056b	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00573	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00577	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 1004 : 
; 1005 :     rc = tcpnje_write(fd, &tn->ttcactbuf, tn);

  0057b	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00583	48 83 c0 68	 add	 rax, 104		; 00000068H
  00587	4c 8b 84 24 f8
	00 00 00	 mov	 r8, QWORD PTR tn$[rsp]
  0058f	48 8b d0	 mov	 rdx, rax
  00592	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00599	e8 00 00 00 00	 call	 tcpnje_write
  0059e	89 44 24 34	 mov	 DWORD PTR rc$[rsp], eax

; 1006 :     if (rc)

  005a2	83 7c 24 34 00	 cmp	 DWORD PTR rc$[rsp], 0
  005a7	0f 84 18 01 00
	00		 je	 $LN32@tcpnje_ttc

; 1007 :     {
; 1008 :         u_int i;
; 1009 :         BYTE text[sizeof(tn->ttcactbuf.base.ttc->type) + 1];
; 1010 :         for(i = 0; i < sizeof(tn->ttcactbuf.base.ttc->type); i++)

  005ad	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  005b5	eb 0a		 jmp	 SHORT $LN4@tcpnje_ttc
$LN2@tcpnje_ttc:
  005b7	8b 44 24 30	 mov	 eax, DWORD PTR i$1[rsp]
  005bb	ff c0		 inc	 eax
  005bd	89 44 24 30	 mov	 DWORD PTR i$1[rsp], eax
$LN4@tcpnje_ttc:
  005c1	8b 44 24 30	 mov	 eax, DWORD PTR i$1[rsp]
  005c5	48 83 f8 08	 cmp	 rax, 8
  005c9	73 59		 jae	 SHORT $LN3@tcpnje_ttc

; 1011 :         {
; 1012 :             text[i] = guest_to_host(type[i]);

  005cb	8b 44 24 30	 mov	 eax, DWORD PTR i$1[rsp]
  005cf	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  005d7	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  005db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_guest_to_host
  005e1	8b 4c 24 30	 mov	 ecx, DWORD PTR i$1[rsp]
  005e5	88 84 0c 80 00
	00 00		 mov	 BYTE PTR text$4[rsp+rcx], al

; 1013 :             if (text[i] == ' ')

  005ec	8b 44 24 30	 mov	 eax, DWORD PTR i$1[rsp]
  005f0	0f b6 84 04 80
	00 00 00	 movzx	 eax, BYTE PTR text$4[rsp+rax]
  005f8	83 f8 20	 cmp	 eax, 32			; 00000020H
  005fb	75 25		 jne	 SHORT $LN33@tcpnje_ttc

; 1014 :             {
; 1015 :                 text[i] = '\0';

  005fd	8b 44 24 30	 mov	 eax, DWORD PTR i$1[rsp]
  00601	48 89 44 24 40	 mov	 QWORD PTR $T2[rsp], rax
  00606	48 83 7c 24 40
	09		 cmp	 QWORD PTR $T2[rsp], 9
  0060c	73 02		 jae	 SHORT $LN38@tcpnje_ttc
  0060e	eb 05		 jmp	 SHORT $LN39@tcpnje_ttc
$LN38@tcpnje_ttc:
  00610	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN39@tcpnje_ttc:
  00615	48 8b 44 24 40	 mov	 rax, QWORD PTR $T2[rsp]
  0061a	c6 84 04 80 00
	00 00 00	 mov	 BYTE PTR text$4[rsp+rax], 0
$LN33@tcpnje_ttc:

; 1016 :             }
; 1017 :         }

  00622	eb 93		 jmp	 SHORT $LN2@tcpnje_ttc
$LN3@tcpnje_ttc:

; 1018 :         text[i] = '\0';

  00624	8b 44 24 30	 mov	 eax, DWORD PTR i$1[rsp]
  00628	48 89 44 24 48	 mov	 QWORD PTR $T3[rsp], rax
  0062d	48 83 7c 24 48
	09		 cmp	 QWORD PTR $T3[rsp], 9
  00633	73 02		 jae	 SHORT $LN40@tcpnje_ttc
  00635	eb 05		 jmp	 SHORT $LN41@tcpnje_ttc
$LN40@tcpnje_ttc:
  00637	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN41@tcpnje_ttc:
  0063c	48 8b 44 24 48	 mov	 rax, QWORD PTR $T3[rsp]
  00641	c6 84 04 80 00
	00 00 00	 mov	 BYTE PTR text$4[rsp+rax], 0

; 1019 :         DBGMSG(8, "HHCTN052E %4.4X:TCPNJE - Error writing %s TTC to network: %s\n",

  00649	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00651	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00654	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0065a	c1 e8 0f	 shr	 eax, 15
  0065d	83 e0 01	 and	 eax, 1
  00660	85 c0		 test	 eax, eax
  00662	74 15		 je	 SHORT $LN36@tcpnje_ttc
  00664	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0066c	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00672	83 e0 08	 and	 eax, 8
  00675	85 c0		 test	 eax, eax
  00677	75 15		 jne	 SHORT $LN35@tcpnje_ttc
$LN36@tcpnje_ttc:
  00679	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00681	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00687	83 e0 08	 and	 eax, 8
  0068a	85 c0		 test	 eax, eax
  0068c	74 37		 je	 SHORT $LN34@tcpnje_ttc
$LN35@tcpnje_ttc:
  0068e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00694	8b c8		 mov	 ecx, eax
  00696	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0069c	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  006a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  006a7	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  006ab	4c 8b c8	 mov	 r9, rax
  006ae	4c 8d 84 24 80
	00 00 00	 lea	 r8, QWORD PTR text$4[rsp]
  006b6	8b d1		 mov	 edx, ecx
  006b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159756
  006bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN34@tcpnje_ttc:
$LN32@tcpnje_ttc:
$LN37@tcpnje_ttc:

; 1020 :                 tn->dev->devnum, text, strerror(HSO_errno));
; 1021 :     }
; 1022 : 
; 1023 :     return;
; 1024 : }

  006c5	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006cd	48 33 cc	 xor	 rcx, rsp
  006d0	e8 00 00 00 00	 call	 __security_check_cookie
  006d5	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  006dc	c3		 ret	 0
tcpnje_ttc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
part$ = 48
count$ = 52
done$ = 56
savederrno$ = 60
fd$ = 80
buffer$ = 88
tn$ = 96
tcpnje_write PROC

; 840  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 841  :     int count, part, done, savederrno;
; 842  : 
; 843  :     /* Find how much data we want to write this time around */
; 844  :     count = buffer->inptr.address - buffer->outptr.address;

  00012	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  00017	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buffer$[rsp]
  0001c	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00020	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00024	48 2b c1	 sub	 rax, rcx
  00027	89 44 24 34	 mov	 DWORD PTR count$[rsp], eax

; 845  :     part = count;

  0002b	8b 44 24 34	 mov	 eax, DWORD PTR count$[rsp]
  0002f	89 44 24 30	 mov	 DWORD PTR part$[rsp], eax
$LN2@tcpnje_wri:

; 846  : 
; 847  :     while(part > 0)

  00033	83 7c 24 30 00	 cmp	 DWORD PTR part$[rsp], 0
  00038	7e 7d		 jle	 SHORT $LN3@tcpnje_wri

; 848  :     {
; 849  :         done = send(fd, buffer->outptr.address, part, 0);

  0003a	48 63 44 24 50	 movsxd	 rax, DWORD PTR fd$[rsp]
  0003f	45 33 c9	 xor	 r9d, r9d
  00042	44 8b 44 24 30	 mov	 r8d, DWORD PTR part$[rsp]
  00047	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buffer$[rsp]
  0004c	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  00050	48 8b c8	 mov	 rcx, rax
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_send
  00059	89 44 24 38	 mov	 DWORD PTR done$[rsp], eax

; 850  : 
; 851  :         if (done < 0) break;

  0005d	83 7c 24 38 00	 cmp	 DWORD PTR done$[rsp], 0
  00062	7d 02		 jge	 SHORT $LN4@tcpnje_wri
  00064	eb 51		 jmp	 SHORT $LN3@tcpnje_wri
$LN4@tcpnje_wri:

; 852  : 
; 853  :         logdump("To net", tn->dev, buffer->outptr.address, done);

  00066	48 63 44 24 38	 movsxd	 rax, DWORD PTR done$[rsp]
  0006b	4c 8b c8	 mov	 r9, rax
  0006e	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  00073	4c 8b 40 10	 mov	 r8, QWORD PTR [rax+16]
  00077	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  0007c	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0007f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159665
  00086	e8 00 00 00 00	 call	 logdump

; 854  : 
; 855  :         buffer->outptr.address += done;

  0008b	48 63 44 24 38	 movsxd	 rax, DWORD PTR done$[rsp]
  00090	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buffer$[rsp]
  00095	48 03 41 10	 add	 rax, QWORD PTR [rcx+16]
  00099	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buffer$[rsp]
  0009e	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 856  :         part -= done;

  000a2	8b 44 24 38	 mov	 eax, DWORD PTR done$[rsp]
  000a6	8b 4c 24 30	 mov	 ecx, DWORD PTR part$[rsp]
  000aa	2b c8		 sub	 ecx, eax
  000ac	8b c1		 mov	 eax, ecx
  000ae	89 44 24 30	 mov	 DWORD PTR part$[rsp], eax

; 857  :     }

  000b2	e9 7c ff ff ff	 jmp	 $LN2@tcpnje_wri
$LN3@tcpnje_wri:

; 858  : 
; 859  :     savederrno = HSO_errno;   /* In case logmsg() mangles errno */

  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  000bd	89 44 24 3c	 mov	 DWORD PTR savederrno$[rsp], eax

; 860  : 
; 861  :     DBGMSG(128, "HHCTN105D %4.4X:TCPNJE - wrote %d out of %d bytes\n",

  000c1	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  000c6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c9	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  000cf	c1 e8 0f	 shr	 eax, 15
  000d2	83 e0 01	 and	 eax, 1
  000d5	85 c0		 test	 eax, eax
  000d7	74 14		 je	 SHORT $LN7@tcpnje_wri
  000d9	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  000de	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  000e4	25 80 00 00 00	 and	 eax, 128		; 00000080H
  000e9	85 c0		 test	 eax, eax
  000eb	75 14		 jne	 SHORT $LN6@tcpnje_wri
$LN7@tcpnje_wri:
  000ed	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  000f2	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  000f8	25 80 00 00 00	 and	 eax, 128		; 00000080H
  000fd	85 c0		 test	 eax, eax
  000ff	74 2f		 je	 SHORT $LN5@tcpnje_wri
$LN6@tcpnje_wri:
  00101	8b 44 24 30	 mov	 eax, DWORD PTR part$[rsp]
  00105	8b 4c 24 34	 mov	 ecx, DWORD PTR count$[rsp]
  00109	2b c8		 sub	 ecx, eax
  0010b	8b c1		 mov	 eax, ecx
  0010d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tn$[rsp]
  00112	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00115	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00119	44 8b 4c 24 34	 mov	 r9d, DWORD PTR count$[rsp]
  0011e	44 8b c0	 mov	 r8d, eax
  00121	8b d1		 mov	 edx, ecx
  00123	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159669
  0012a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN5@tcpnje_wri:

; 862  :             tn->dev->devnum, count - part, count);
; 863  : 
; 864  :     /* Did the whole buffer get written? */
; 865  :     if (part > 0)

  00130	83 7c 24 30 00	 cmp	 DWORD PTR part$[rsp], 0
  00135	0f 8e 52 01 00
	00		 jle	 $LN8@tcpnje_wri

; 866  :     {
; 867  :         if (0
; 868  : #ifndef WIN32
; 869  :              || EAGAIN == savederrno
; 870  : #endif
; 871  :              || HSO_EWOULDBLOCK == savederrno

  0013b	33 c0		 xor	 eax, eax
  0013d	85 c0		 test	 eax, eax
  0013f	75 0e		 jne	 SHORT $LN11@tcpnje_wri
  00141	81 7c 24 3c 33
	27 00 00	 cmp	 DWORD PTR savederrno$[rsp], 10035 ; 00002733H
  00149	0f 85 ae 00 00
	00		 jne	 $LN9@tcpnje_wri
$LN11@tcpnje_wri:

; 872  :            )
; 873  :         {
; 874  :             /* Contending for write on main data socket? */
; 875  :             if (!tn->holdoutgoing && (fd == tn->sfd))

  0014f	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  00154	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0015a	c1 e8 09	 shr	 eax, 9
  0015d	83 e0 01	 and	 eax, 1
  00160	85 c0		 test	 eax, eax
  00162	0f 85 86 00 00
	00		 jne	 $LN12@tcpnje_wri
  00168	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  0016d	8b 80 3c 01 00
	00		 mov	 eax, DWORD PTR [rax+316]
  00173	39 44 24 50	 cmp	 DWORD PTR fd$[rsp], eax
  00177	75 75		 jne	 SHORT $LN12@tcpnje_wri

; 876  :             {
; 877  :                 DBGMSG(128, "HHCTN106D %4.4X:TCPNJE - holding outgoing data transmission due to write contention\n",

  00179	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  0017e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00181	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00187	c1 e8 0f	 shr	 eax, 15
  0018a	83 e0 01	 and	 eax, 1
  0018d	85 c0		 test	 eax, eax
  0018f	74 14		 je	 SHORT $LN15@tcpnje_wri
  00191	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  00196	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0019c	25 80 00 00 00	 and	 eax, 128		; 00000080H
  001a1	85 c0		 test	 eax, eax
  001a3	75 14		 jne	 SHORT $LN14@tcpnje_wri
$LN15@tcpnje_wri:
  001a5	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  001aa	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  001b0	25 80 00 00 00	 and	 eax, 128		; 00000080H
  001b5	85 c0		 test	 eax, eax
  001b7	74 1b		 je	 SHORT $LN13@tcpnje_wri
$LN14@tcpnje_wri:
  001b9	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  001be	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001c1	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  001c5	8b d0		 mov	 edx, eax
  001c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159678
  001ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN13@tcpnje_wri:

; 878  :                         tn->dev->devnum);
; 879  :                 tn->holdoutgoing = 1;

  001d4	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  001d9	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  001df	0f ba e8 09	 bts	 eax, 9
  001e3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tn$[rsp]
  001e8	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax
$LN12@tcpnje_wri:

; 880  :             }
; 881  :             return 1;

  001ee	b8 01 00 00 00	 mov	 eax, 1
  001f3	e9 58 01 00 00	 jmp	 $LN1@tcpnje_wri

; 882  :         }

  001f8	e9 90 00 00 00	 jmp	 $LN10@tcpnje_wri
$LN9@tcpnje_wri:

; 883  :         else
; 884  :         {
; 885  :             DBGMSG(4, "HHCTN049E %4.4X:TCPNJE - Attempt to write %d bytes to output socket only wrote %d bytes. Error: %s\n",

  001fd	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  00202	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00205	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0020b	c1 e8 0f	 shr	 eax, 15
  0020e	83 e0 01	 and	 eax, 1
  00211	85 c0		 test	 eax, eax
  00213	74 12		 je	 SHORT $LN18@tcpnje_wri
  00215	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  0021a	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00220	83 e0 04	 and	 eax, 4
  00223	85 c0		 test	 eax, eax
  00225	75 12		 jne	 SHORT $LN17@tcpnje_wri
$LN18@tcpnje_wri:
  00227	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  0022c	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00232	83 e0 04	 and	 eax, 4
  00235	85 c0		 test	 eax, eax
  00237	74 3c		 je	 SHORT $LN16@tcpnje_wri
$LN17@tcpnje_wri:
  00239	8b 4c 24 3c	 mov	 ecx, DWORD PTR savederrno$[rsp]
  0023d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00243	8b 4c 24 30	 mov	 ecx, DWORD PTR part$[rsp]
  00247	8b 54 24 34	 mov	 edx, DWORD PTR count$[rsp]
  0024b	2b d1		 sub	 edx, ecx
  0024d	8b ca		 mov	 ecx, edx
  0024f	48 8b 54 24 60	 mov	 rdx, QWORD PTR tn$[rsp]
  00254	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00257	0f b7 52 48	 movzx	 edx, WORD PTR [rdx+72]
  0025b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00260	44 8b c9	 mov	 r9d, ecx
  00263	44 8b 44 24 34	 mov	 r8d, DWORD PTR count$[rsp]
  00268	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159682
  0026f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN16@tcpnje_wri:

; 886  :                     tn->dev->devnum, count, count - part, strerror(savederrno));
; 887  :             tcpnje_close(fd, tn);

  00275	48 8b 54 24 60	 mov	 rdx, QWORD PTR tn$[rsp]
  0027a	8b 4c 24 50	 mov	 ecx, DWORD PTR fd$[rsp]
  0027e	e8 00 00 00 00	 call	 tcpnje_close

; 888  :             return -1;

  00283	b8 ff ff ff ff	 mov	 eax, -1
  00288	e9 c3 00 00 00	 jmp	 $LN1@tcpnje_wri
$LN10@tcpnje_wri:
$LN8@tcpnje_wri:

; 889  :         }
; 890  :     }
; 891  : 
; 892  :     /* If write was completed successfully after previous contention or other */
; 893  :     /* reason for holding outgoing data on main data socket, resume sending.  */
; 894  :     if (tn->holdoutgoing && (fd == tn->sfd))

  0028d	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  00292	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00298	c1 e8 09	 shr	 eax, 9
  0029b	83 e0 01	 and	 eax, 1
  0029e	85 c0		 test	 eax, eax
  002a0	0f 84 86 00 00
	00		 je	 $LN19@tcpnje_wri
  002a6	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  002ab	8b 80 3c 01 00
	00		 mov	 eax, DWORD PTR [rax+316]
  002b1	39 44 24 50	 cmp	 DWORD PTR fd$[rsp], eax
  002b5	75 75		 jne	 SHORT $LN19@tcpnje_wri

; 895  :     {
; 896  :         DBGMSG(128, "HHCTN107D %4.4X:TCPNJE - resuming outgoing data transmission after successful network write\n",

  002b7	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  002bc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002bf	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  002c5	c1 e8 0f	 shr	 eax, 15
  002c8	83 e0 01	 and	 eax, 1
  002cb	85 c0		 test	 eax, eax
  002cd	74 14		 je	 SHORT $LN22@tcpnje_wri
  002cf	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  002d4	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  002da	25 80 00 00 00	 and	 eax, 128		; 00000080H
  002df	85 c0		 test	 eax, eax
  002e1	75 14		 jne	 SHORT $LN21@tcpnje_wri
$LN22@tcpnje_wri:
  002e3	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  002e8	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  002ee	25 80 00 00 00	 and	 eax, 128		; 00000080H
  002f3	85 c0		 test	 eax, eax
  002f5	74 1b		 je	 SHORT $LN20@tcpnje_wri
$LN21@tcpnje_wri:
  002f7	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  002fc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002ff	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00303	8b d0		 mov	 edx, eax
  00305	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159687
  0030c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN20@tcpnje_wri:

; 897  :                 tn->dev->devnum);
; 898  : 
; 899  :         tn->holdoutgoing = 0;

  00312	48 8b 44 24 60	 mov	 rax, QWORD PTR tn$[rsp]
  00317	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0031d	0f ba f0 09	 btr	 eax, 9
  00321	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tn$[rsp]
  00326	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax
$LN19@tcpnje_wri:

; 900  :     }
; 901  : 
; 902  :     /* Reset pointers to the beginning of the buffer for next time around */
; 903  :     buffer->outptr.address = buffer->base.address;

  0032c	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  00331	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buffer$[rsp]
  00336	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00339	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 904  :     buffer->inptr.address = buffer->base.address;

  0033d	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  00342	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buffer$[rsp]
  00347	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0034a	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 905  : 
; 906  :     return 0;

  0034e	33 c0		 xor	 eax, eax
$LN1@tcpnje_wri:

; 907  : }

  00350	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00354	c3		 ret	 0
tcpnje_write ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
tv188 = 32
done$ = 40
count$ = 48
fd$ = 80
buffer$ = 88
wanted$ = 96
tn$ = 104
tcpnje_read PROC

; 774  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 775  :     ssize_t done, count;
; 776  : 
; 777  :     if (wanted > buffer->size)

  00017	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  0001c	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00020	48 39 44 24 60	 cmp	 QWORD PTR wanted$[rsp], rax
  00025	76 6a		 jbe	 SHORT $LN2@tcpnje_rea

; 778  :     {
; 779  :         DBGMSG(1, "HHCTN046E %4.4X:TCPNJE - no room in input buffer for %d bytes requested. Stopping link.\n",

  00027	48 8b 44 24 68	 mov	 rax, QWORD PTR tn$[rsp]
  0002c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002f	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00035	c1 e8 0f	 shr	 eax, 15
  00038	83 e0 01	 and	 eax, 1
  0003b	85 c0		 test	 eax, eax
  0003d	74 12		 je	 SHORT $LN5@tcpnje_rea
  0003f	48 8b 44 24 68	 mov	 rax, QWORD PTR tn$[rsp]
  00044	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0004a	83 e0 01	 and	 eax, 1
  0004d	85 c0		 test	 eax, eax
  0004f	75 12		 jne	 SHORT $LN4@tcpnje_rea
$LN5@tcpnje_rea:
  00051	48 8b 44 24 68	 mov	 rax, QWORD PTR tn$[rsp]
  00056	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0005c	83 e0 01	 and	 eax, 1
  0005f	85 c0		 test	 eax, eax
  00061	74 20		 je	 SHORT $LN3@tcpnje_rea
$LN4@tcpnje_rea:
  00063	48 8b 44 24 68	 mov	 rax, QWORD PTR tn$[rsp]
  00068	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0006f	44 8b 44 24 60	 mov	 r8d, DWORD PTR wanted$[rsp]
  00074	8b d0		 mov	 edx, eax
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159632
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN3@tcpnje_rea:

; 780  :                 tn->dev->devnum, (int)wanted);
; 781  :         tcpnje_close(fd, tn);

  00083	48 8b 54 24 68	 mov	 rdx, QWORD PTR tn$[rsp]
  00088	8b 4c 24 50	 mov	 ecx, DWORD PTR fd$[rsp]
  0008c	e8 00 00 00 00	 call	 tcpnje_close
$LN2@tcpnje_rea:

; 782  :     }
; 783  :     count = buffer->inptr.address - buffer->base.address;

  00091	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  00096	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buffer$[rsp]
  0009b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0009e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000a2	48 2b c1	 sub	 rax, rcx
  000a5	48 89 44 24 30	 mov	 QWORD PTR count$[rsp], rax

; 784  :     if (count >= (ssize_t) wanted) return 1;

  000aa	48 8b 44 24 60	 mov	 rax, QWORD PTR wanted$[rsp]
  000af	48 39 44 24 30	 cmp	 QWORD PTR count$[rsp], rax
  000b4	7c 0a		 jl	 SHORT $LN6@tcpnje_rea
  000b6	b8 01 00 00 00	 mov	 eax, 1
  000bb	e9 a4 01 00 00	 jmp	 $LN1@tcpnje_rea
$LN6@tcpnje_rea:

; 785  : 
; 786  :     done = recv(fd, buffer->inptr.address, wanted - count, 0);

  000c0	48 8b 44 24 30	 mov	 rax, QWORD PTR count$[rsp]
  000c5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR wanted$[rsp]
  000ca	48 2b c8	 sub	 rcx, rax
  000cd	48 8b c1	 mov	 rax, rcx
  000d0	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR fd$[rsp]
  000d5	45 33 c9	 xor	 r9d, r9d
  000d8	44 8b c0	 mov	 r8d, eax
  000db	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  000e0	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_recv
  000ea	48 98		 cdqe
  000ec	48 89 44 24 28	 mov	 QWORD PTR done$[rsp], rax

; 787  : 
; 788  :     if (done > 0)

  000f1	48 83 7c 24 28
	00		 cmp	 QWORD PTR done$[rsp], 0
  000f7	7e 3e		 jle	 SHORT $LN7@tcpnje_rea

; 789  :     {
; 790  :         logdump("Fm net", tn->dev, buffer->inptr.address, done);

  000f9	4c 8b 4c 24 28	 mov	 r9, QWORD PTR done$[rsp]
  000fe	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  00103	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  00107	48 8b 44 24 68	 mov	 rax, QWORD PTR tn$[rsp]
  0010c	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0010f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159636
  00116	e8 00 00 00 00	 call	 logdump

; 791  :         buffer->inptr.address += done;

  0011b	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  00120	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00124	48 03 44 24 28	 add	 rax, QWORD PTR done$[rsp]
  00129	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buffer$[rsp]
  0012e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 792  :     }

  00132	e9 f1 00 00 00	 jmp	 $LN8@tcpnje_rea
$LN7@tcpnje_rea:

; 793  :     else
; 794  :     {
; 795  :         if (done < 0 && (

  00137	48 83 7c 24 28
	00		 cmp	 QWORD PTR done$[rsp], 0
  0013d	7d 12		 jge	 SHORT $LN9@tcpnje_rea
  0013f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00145	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  0014a	75 05		 jne	 SHORT $LN9@tcpnje_rea

; 796  : #ifndef WIN32
; 797  :             EAGAIN == errno ||
; 798  : #endif
; 799  :             HSO_EWOULDBLOCK == HSO_errno))
; 800  :         {
; 801  :             /* Do as close to nothing as possible */
; 802  :             ;
; 803  :         }

  0014c	e9 d7 00 00 00	 jmp	 $LN10@tcpnje_rea
$LN9@tcpnje_rea:

; 804  :         else
; 805  :         {
; 806  :             if (done == 0)

  00151	48 83 7c 24 28
	00		 cmp	 QWORD PTR done$[rsp], 0
  00157	75 59		 jne	 SHORT $LN11@tcpnje_rea

; 807  :             {
; 808  :                 DBGMSG(4, "HHCTN047W %4.4X:TCPNJE - connection unexpectedly closed by remote peer.\n",

  00159	48 8b 44 24 68	 mov	 rax, QWORD PTR tn$[rsp]
  0015e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00161	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00167	c1 e8 0f	 shr	 eax, 15
  0016a	83 e0 01	 and	 eax, 1
  0016d	85 c0		 test	 eax, eax
  0016f	74 12		 je	 SHORT $LN15@tcpnje_rea
  00171	48 8b 44 24 68	 mov	 rax, QWORD PTR tn$[rsp]
  00176	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0017c	83 e0 04	 and	 eax, 4
  0017f	85 c0		 test	 eax, eax
  00181	75 12		 jne	 SHORT $LN14@tcpnje_rea
$LN15@tcpnje_rea:
  00183	48 8b 44 24 68	 mov	 rax, QWORD PTR tn$[rsp]
  00188	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0018e	83 e0 04	 and	 eax, 4
  00191	85 c0		 test	 eax, eax
  00193	74 1b		 je	 SHORT $LN13@tcpnje_rea
$LN14@tcpnje_rea:
  00195	48 8b 44 24 68	 mov	 rax, QWORD PTR tn$[rsp]
  0019a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0019d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  001a1	8b d0		 mov	 edx, eax
  001a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159644
  001aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN13@tcpnje_rea:

; 809  :                         tn->dev->devnum);
; 810  :             }

  001b0	eb 68		 jmp	 SHORT $LN12@tcpnje_rea
$LN11@tcpnje_rea:

; 811  :             else
; 812  :             {
; 813  :                 DBGMSG(4, "HHCTN048E %4.4X:TCPNJE - error reading from socket: %s\n",

  001b2	48 8b 44 24 68	 mov	 rax, QWORD PTR tn$[rsp]
  001b7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001ba	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  001c0	c1 e8 0f	 shr	 eax, 15
  001c3	83 e0 01	 and	 eax, 1
  001c6	85 c0		 test	 eax, eax
  001c8	74 12		 je	 SHORT $LN18@tcpnje_rea
  001ca	48 8b 44 24 68	 mov	 rax, QWORD PTR tn$[rsp]
  001cf	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  001d5	83 e0 04	 and	 eax, 4
  001d8	85 c0		 test	 eax, eax
  001da	75 12		 jne	 SHORT $LN17@tcpnje_rea
$LN18@tcpnje_rea:
  001dc	48 8b 44 24 68	 mov	 rax, QWORD PTR tn$[rsp]
  001e1	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  001e7	83 e0 04	 and	 eax, 4
  001ea	85 c0		 test	 eax, eax
  001ec	74 2c		 je	 SHORT $LN16@tcpnje_rea
$LN17@tcpnje_rea:
  001ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  001f4	8b c8		 mov	 ecx, eax
  001f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  001fc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tn$[rsp]
  00201	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00204	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00208	4c 8b c0	 mov	 r8, rax
  0020b	8b d1		 mov	 edx, ecx
  0020d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159648
  00214	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN16@tcpnje_rea:
$LN12@tcpnje_rea:

; 814  :                         tn->dev->devnum, strerror(HSO_errno));
; 815  :             }
; 816  :             tcpnje_close(fd, tn);

  0021a	48 8b 54 24 68	 mov	 rdx, QWORD PTR tn$[rsp]
  0021f	8b 4c 24 50	 mov	 ecx, DWORD PTR fd$[rsp]
  00223	e8 00 00 00 00	 call	 tcpnje_close
$LN10@tcpnje_rea:
$LN8@tcpnje_rea:

; 817  :         }
; 818  :     }
; 819  :     return -((wanted - (buffer->inptr.address - buffer->base.address)) > 0);

  00228	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$[rsp]
  0022d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buffer$[rsp]
  00232	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00235	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00239	48 2b c1	 sub	 rax, rcx
  0023c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR wanted$[rsp]
  00241	48 2b c8	 sub	 rcx, rax
  00244	48 8b c1	 mov	 rax, rcx
  00247	48 85 c0	 test	 rax, rax
  0024a	76 0a		 jbe	 SHORT $LN20@tcpnje_rea
  0024c	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv188[rsp], 1
  00254	eb 08		 jmp	 SHORT $LN21@tcpnje_rea
$LN20@tcpnje_rea:
  00256	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv188[rsp], 0
$LN21@tcpnje_rea:
  0025e	8b 44 24 20	 mov	 eax, DWORD PTR tv188[rsp]
  00262	f7 d8		 neg	 eax
$LN1@tcpnje_rea:

; 820  : }

  00264	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00268	c3		 ret	 0
tcpnje_read ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
tv75 = 32
tv83 = 36
tv128 = 40
fd$ = 64
tn$ = 72
tcpnje_close PROC

; 715  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 716  :     if (fd >= 0)

  0000d	83 7c 24 40 00	 cmp	 DWORD PTR fd$[rsp], 0
  00012	0f 8c 76 01 00
	00		 jl	 $LN2@tcpnje_clo

; 717  :     {
; 718  :         close_socket(fd);

  00018	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 719  : 
; 720  :         if (fd == tn->pfd)

  00022	48 8b 44 24 48	 mov	 rax, QWORD PTR tn$[rsp]
  00027	8b 80 48 01 00
	00		 mov	 eax, DWORD PTR [rax+328]
  0002d	39 44 24 40	 cmp	 DWORD PTR fd$[rsp], eax
  00031	75 53		 jne	 SHORT $LN3@tcpnje_clo

; 721  :         {
; 722  :             tn->pfd = -1;

  00033	48 8b 44 24 48	 mov	 rax, QWORD PTR tn$[rsp]
  00038	c7 80 48 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+328], -1

; 723  :             if (tn->state == TCPCONPAS) tn->state = tn->listening ? TCPLISTEN : CLOSED;

  00042	48 8b 44 24 48	 mov	 rax, QWORD PTR tn$[rsp]
  00047	83 b8 54 01 00
	00 04		 cmp	 DWORD PTR [rax+340], 4
  0004e	75 31		 jne	 SHORT $LN5@tcpnje_clo
  00050	48 8b 44 24 48	 mov	 rax, QWORD PTR tn$[rsp]
  00055	0f b6 80 62 01
	00 00		 movzx	 eax, BYTE PTR [rax+354]
  0005c	85 c0		 test	 eax, eax
  0005e	74 0a		 je	 SHORT $LN12@tcpnje_clo
  00060	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  00068	eb 08		 jmp	 SHORT $LN13@tcpnje_clo
$LN12@tcpnje_clo:
  0006a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN13@tcpnje_clo:
  00072	48 8b 44 24 48	 mov	 rax, QWORD PTR tn$[rsp]
  00077	8b 4c 24 20	 mov	 ecx, DWORD PTR tv75[rsp]
  0007b	89 88 54 01 00
	00		 mov	 DWORD PTR [rax+340], ecx
$LN5@tcpnje_clo:

; 724  :         }

  00081	e9 08 01 00 00	 jmp	 $LN4@tcpnje_clo
$LN3@tcpnje_clo:

; 725  :         else if (fd == tn->afd)

  00086	48 8b 44 24 48	 mov	 rax, QWORD PTR tn$[rsp]
  0008b	8b 80 44 01 00
	00		 mov	 eax, DWORD PTR [rax+324]
  00091	39 44 24 40	 cmp	 DWORD PTR fd$[rsp], eax
  00095	75 45		 jne	 SHORT $LN6@tcpnje_clo

; 726  :         {
; 727  :             tn->afd = -1;

  00097	48 8b 44 24 48	 mov	 rax, QWORD PTR tn$[rsp]
  0009c	c7 80 44 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+324], -1

; 728  :             tn->state = tn->listening ? TCPLISTEN : CLOSED;

  000a6	48 8b 44 24 48	 mov	 rax, QWORD PTR tn$[rsp]
  000ab	0f b6 80 62 01
	00 00		 movzx	 eax, BYTE PTR [rax+354]
  000b2	85 c0		 test	 eax, eax
  000b4	74 0a		 je	 SHORT $LN14@tcpnje_clo
  000b6	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv83[rsp], 1
  000be	eb 08		 jmp	 SHORT $LN15@tcpnje_clo
$LN14@tcpnje_clo:
  000c0	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv83[rsp], 0
$LN15@tcpnje_clo:
  000c8	48 8b 44 24 48	 mov	 rax, QWORD PTR tn$[rsp]
  000cd	8b 4c 24 24	 mov	 ecx, DWORD PTR tv83[rsp]
  000d1	89 88 54 01 00
	00		 mov	 DWORD PTR [rax+340], ecx

; 729  :         }

  000d7	e9 b2 00 00 00	 jmp	 $LN7@tcpnje_clo
$LN6@tcpnje_clo:

; 730  :         else if (fd == tn->sfd)

  000dc	48 8b 44 24 48	 mov	 rax, QWORD PTR tn$[rsp]
  000e1	8b 80 3c 01 00
	00		 mov	 eax, DWORD PTR [rax+316]
  000e7	39 44 24 40	 cmp	 DWORD PTR fd$[rsp], eax
  000eb	0f 85 9d 00 00
	00		 jne	 $LN8@tcpnje_clo

; 731  :         {
; 732  :             tn->sfd = -1;

  000f1	48 8b 44 24 48	 mov	 rax, QWORD PTR tn$[rsp]
  000f6	c7 80 3c 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+316], -1

; 733  : 
; 734  :             /* Is RSCS connected to a remote link partner? */
; 735  :             if (tn->state>NJEACKRCD)

  00100	48 8b 44 24 48	 mov	 rax, QWORD PTR tn$[rsp]
  00105	83 b8 54 01 00
	00 07		 cmp	 DWORD PTR [rax+340], 7
  0010c	7e 1a		 jle	 SHORT $LN9@tcpnje_clo

; 736  :             {
; 737  :                 /* Send RSCS a signoff the next time it issues a read */
; 738  :                 tn->signoff = 1;

  0010e	48 8b 44 24 48	 mov	 rax, QWORD PTR tn$[rsp]
  00113	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00119	0f ba e8 0e	 bts	 eax, 14
  0011d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tn$[rsp]
  00122	89 81 64 01 00
	00		 mov	 DWORD PTR [rcx+356], eax
$LN9@tcpnje_clo:

; 739  :             }
; 740  :             tn->state = tn->listening ? TCPLISTEN : CLOSED;

  00128	48 8b 44 24 48	 mov	 rax, QWORD PTR tn$[rsp]
  0012d	0f b6 80 62 01
	00 00		 movzx	 eax, BYTE PTR [rax+354]
  00134	85 c0		 test	 eax, eax
  00136	74 0a		 je	 SHORT $LN16@tcpnje_clo
  00138	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv128[rsp], 1
  00140	eb 08		 jmp	 SHORT $LN17@tcpnje_clo
$LN16@tcpnje_clo:
  00142	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv128[rsp], 0
$LN17@tcpnje_clo:
  0014a	48 8b 44 24 48	 mov	 rax, QWORD PTR tn$[rsp]
  0014f	8b 4c 24 28	 mov	 ecx, DWORD PTR tv128[rsp]
  00153	89 88 54 01 00
	00		 mov	 DWORD PTR [rax+340], ecx

; 741  : 
; 742  :             /* If an operation is in progress, abort it and advise CCW exec  */
; 743  :             if (tn->curpending != TCPNJE_PEND_IDLE)

  00159	48 8b 44 24 48	 mov	 rax, QWORD PTR tn$[rsp]
  0015e	0f b6 80 60 01
	00 00		 movzx	 eax, BYTE PTR [rax+352]
  00165	85 c0		 test	 eax, eax
  00167	74 25		 je	 SHORT $LN10@tcpnje_clo

; 744  :             {
; 745  :                 tn->curpending = TCPNJE_PEND_IDLE;

  00169	48 8b 44 24 48	 mov	 rax, QWORD PTR tn$[rsp]
  0016e	c6 80 60 01 00
	00 00		 mov	 BYTE PTR [rax+352], 0

; 746  :                 signal_condition(&tn->ipc);

  00175	48 8b 44 24 48	 mov	 rax, QWORD PTR tn$[rsp]
  0017a	48 83 c0 50	 add	 rax, 80			; 00000050H
  0017e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159611
  00185	48 8b c8	 mov	 rcx, rax
  00188	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition
$LN10@tcpnje_clo:
$LN8@tcpnje_clo:
$LN7@tcpnje_clo:
$LN4@tcpnje_clo:
$LN2@tcpnje_clo:

; 747  :             }
; 748  :         }
; 749  :     }
; 750  : 
; 751  :     return;
; 752  : }

  0018e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00192	c3		 ret	 0
tcpnje_close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
tv74 = 80
tn$ = 112
code$ = 120
tcpnje_wakeup PROC

; 700  : {

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 701  :     if (write_pipe( tn->pipe[1], &code, 1 ) < 0)

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	48 6b c0 01	 imul	 rax, rax, 1
  00016	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tn$[rsp]
  0001b	48 63 84 01 24
	01 00 00	 movsxd	 rax, DWORD PTR [rcx+rax+292]
  00023	45 33 c9	 xor	 r9d, r9d
  00026	41 b8 01 00 00
	00		 mov	 r8d, 1
  0002c	48 8d 54 24 78	 lea	 rdx, QWORD PTR code$[rsp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_send
  0003a	85 c0		 test	 eax, eax
  0003c	7d 70		 jge	 SHORT $LN2@tcpnje_wak

; 702  :     {
; 703  :         // "Error in function %s: %s"
; 704  :         WRMSG( HHC04000, "W", "write_pipe", strerror( errno ));

  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00044	8b 08		 mov	 ecx, DWORD PTR [rax]
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0004c	48 89 44 24 50	 mov	 QWORD PTR tv74[rsp], rax
  00051	b9 01 00 00 00	 mov	 ecx, 1
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv74[rsp]
  00061	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159591
  0006d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159592
  00079	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159593
  00085	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0008a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0008f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00095	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159594
  0009c	ba c0 02 00 00	 mov	 edx, 704		; 000002c0H
  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159595
  000a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN2@tcpnje_wak:

; 705  :     }
; 706  : }

  000ae	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000b2	c3		 ret	 0
tcpnje_wakeup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
destport$ = 32
cur$ = 36
i$ = 40
incdata$ = 44
dotcount$ = 48
destip$ = 52
tv91 = 56
goteon$ = 60
tn$ = 80
tcpnje_initiate_userdial PROC

; 584  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 585  :     int dotcount;       /* Number of seps (the 4th is the port separator) */
; 586  :     int i;              /* work                                           */
; 587  :     int cur;            /* Current section                                */
; 588  :     in_addr_t   destip; /* Destination IP address                         */
; 589  :     U16 destport;       /* Destination TCP port                           */
; 590  :     int incdata;        /* Incorrect dial data found                      */
; 591  :     int goteon;         /* EON presence flag                              */
; 592  : 
; 593  :    /* See the DIAL CCW portion in execute_ccw for dial format information */
; 594  : 
; 595  :     incdata = 0;

  00009	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR incdata$[rsp], 0

; 596  :     goteon = 0;

  00011	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR goteon$[rsp], 0

; 597  :     dotcount = 0;

  00019	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR dotcount$[rsp], 0

; 598  :     cur = 0;

  00021	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR cur$[rsp], 0

; 599  :     destip = 0;

  00029	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR destip$[rsp], 0

; 600  :     for(i = 0; i < tn->dialcount; i++)

  00031	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00039	eb 0a		 jmp	 SHORT $LN4@tcpnje_ini
$LN2@tcpnje_ini:
  0003b	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  0003f	ff c0		 inc	 eax
  00041	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax
$LN4@tcpnje_ini:
  00045	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  0004a	0f b7 80 5c 01
	00 00		 movzx	 eax, WORD PTR [rax+348]
  00051	39 44 24 28	 cmp	 DWORD PTR i$[rsp], eax
  00055	0f 8d de 02 00
	00		 jge	 $LN3@tcpnje_ini

; 601  :     {
; 602  :         if (goteon)

  0005b	83 7c 24 3c 00	 cmp	 DWORD PTR goteon$[rsp], 0
  00060	74 64		 je	 SHORT $LN7@tcpnje_ini

; 603  :         {
; 604  :             /* EON MUST be last data byte */
; 605  : 
; 606  :             DBGMSG(2, "HHCTN039E %4.4X:TCPNJE - found data beyond EON\n",

  00062	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00067	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006a	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00070	c1 e8 0f	 shr	 eax, 15
  00073	83 e0 01	 and	 eax, 1
  00076	85 c0		 test	 eax, eax
  00078	74 12		 je	 SHORT $LN10@tcpnje_ini
  0007a	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  0007f	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00085	83 e0 02	 and	 eax, 2
  00088	85 c0		 test	 eax, eax
  0008a	75 12		 jne	 SHORT $LN9@tcpnje_ini
$LN10@tcpnje_ini:
  0008c	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00091	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00097	83 e0 02	 and	 eax, 2
  0009a	85 c0		 test	 eax, eax
  0009c	74 1b		 je	 SHORT $LN8@tcpnje_ini
$LN9@tcpnje_ini:
  0009e	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  000a3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a6	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  000aa	8b d0		 mov	 edx, eax
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159544
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN8@tcpnje_ini:

; 607  :                     tn->dev->devnum);
; 608  : 
; 609  :             incdata = 1;

  000b9	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR incdata$[rsp], 1

; 610  :             break;

  000c1	e9 73 02 00 00	 jmp	 $LN3@tcpnje_ini
$LN7@tcpnje_ini:

; 611  :         }
; 612  :         switch(tn->dialdata[i] & 0x0f)

  000c6	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  000cb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  000d0	0f b6 44 01 10	 movzx	 eax, BYTE PTR [rcx+rax+16]
  000d5	83 e0 0f	 and	 eax, 15
  000d8	89 44 24 38	 mov	 DWORD PTR tv91[rsp], eax
  000dc	8b 44 24 38	 mov	 eax, DWORD PTR tv91[rsp]
  000e0	83 e8 0a	 sub	 eax, 10
  000e3	89 44 24 38	 mov	 DWORD PTR tv91[rsp], eax
  000e7	83 7c 24 38 05	 cmp	 DWORD PTR tv91[rsp], 5
  000ec	0f 87 12 02 00
	00		 ja	 $LN32@tcpnje_ini
  000f2	48 63 44 24 38	 movsxd	 rax, DWORD PTR tv91[rsp]
  000f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  000fe	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN44@tcpnje_ini[rcx+rax*4]
  00105	48 03 c1	 add	 rax, rcx
  00108	ff e0		 jmp	 rax
$LN11@tcpnje_ini:

; 613  :         {
; 614  :             case 0x0d:  /* SEP */
; 615  :                 if (dotcount < 4)

  0010a	83 7c 24 30 04	 cmp	 DWORD PTR dotcount$[rsp], 4
  0010f	0f 8d 06 01 00
	00		 jge	 $LN12@tcpnje_ini

; 616  :                 {
; 617  :                     if (cur > 255)

  00115	81 7c 24 24 ff
	00 00 00	 cmp	 DWORD PTR cur$[rsp], 255 ; 000000ffH
  0011d	0f 8e c9 00 00
	00		 jle	 $LN14@tcpnje_ini

; 618  :                     {
; 619  :                         incdata = 1;

  00123	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR incdata$[rsp], 1

; 620  : 
; 621  :                         DBGMSG(2, "HHCTN040E %4.4X:TCPNJE - found incorrect IP address section at position %d\n",

  0012b	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00130	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00133	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00139	c1 e8 0f	 shr	 eax, 15
  0013c	83 e0 01	 and	 eax, 1
  0013f	85 c0		 test	 eax, eax
  00141	74 12		 je	 SHORT $LN17@tcpnje_ini
  00143	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00148	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0014e	83 e0 02	 and	 eax, 2
  00151	85 c0		 test	 eax, eax
  00153	75 12		 jne	 SHORT $LN16@tcpnje_ini
$LN17@tcpnje_ini:
  00155	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  0015a	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00160	83 e0 02	 and	 eax, 2
  00163	85 c0		 test	 eax, eax
  00165	74 24		 je	 SHORT $LN15@tcpnje_ini
$LN16@tcpnje_ini:
  00167	8b 44 24 30	 mov	 eax, DWORD PTR dotcount$[rsp]
  0016b	ff c0		 inc	 eax
  0016d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00172	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00175	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00179	44 8b c0	 mov	 r8d, eax
  0017c	8b d1		 mov	 edx, ecx
  0017e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159552
  00185	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN15@tcpnje_ini:

; 622  :                                 tn->dev->devnum, dotcount + 1);
; 623  :                         DBGMSG(2, "HHCTN041E %4.4X:TCPNJE - %d greater than 255\n",

  0018b	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00190	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00193	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00199	c1 e8 0f	 shr	 eax, 15
  0019c	83 e0 01	 and	 eax, 1
  0019f	85 c0		 test	 eax, eax
  001a1	74 12		 je	 SHORT $LN20@tcpnje_ini
  001a3	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  001a8	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  001ae	83 e0 02	 and	 eax, 2
  001b1	85 c0		 test	 eax, eax
  001b3	75 12		 jne	 SHORT $LN19@tcpnje_ini
$LN20@tcpnje_ini:
  001b5	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  001ba	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  001c0	83 e0 02	 and	 eax, 2
  001c3	85 c0		 test	 eax, eax
  001c5	74 20		 je	 SHORT $LN18@tcpnje_ini
$LN19@tcpnje_ini:
  001c7	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  001cc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001cf	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  001d3	44 8b 44 24 24	 mov	 r8d, DWORD PTR cur$[rsp]
  001d8	8b d0		 mov	 edx, eax
  001da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159556
  001e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN18@tcpnje_ini:

; 624  :                                 tn->dev->devnum, cur);
; 625  :                         break;

  001e7	e9 3f 01 00 00	 jmp	 $LN5@tcpnje_ini
$LN14@tcpnje_ini:

; 626  :                     }
; 627  :                     destip <<= 8;

  001ec	8b 44 24 34	 mov	 eax, DWORD PTR destip$[rsp]
  001f0	c1 e0 08	 shl	 eax, 8
  001f3	89 44 24 34	 mov	 DWORD PTR destip$[rsp], eax

; 628  :                     destip += cur;

  001f7	8b 44 24 24	 mov	 eax, DWORD PTR cur$[rsp]
  001fb	8b 4c 24 34	 mov	 ecx, DWORD PTR destip$[rsp]
  001ff	03 c8		 add	 ecx, eax
  00201	8b c1		 mov	 eax, ecx
  00203	89 44 24 34	 mov	 DWORD PTR destip$[rsp], eax

; 629  :                     cur = 0;

  00207	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR cur$[rsp], 0

; 630  :                     dotcount++;

  0020f	8b 44 24 30	 mov	 eax, DWORD PTR dotcount$[rsp]
  00213	ff c0		 inc	 eax
  00215	89 44 24 30	 mov	 DWORD PTR dotcount$[rsp], eax

; 631  :                 }

  00219	eb 64		 jmp	 SHORT $LN13@tcpnje_ini
$LN12@tcpnje_ini:

; 632  :                 else
; 633  :                 {
; 634  :                     incdata = 1;

  0021b	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR incdata$[rsp], 1

; 635  : 
; 636  :                     DBGMSG(2, "HHCTN042E %4.4X:TCPNJE - too many separators in dial data\n",

  00223	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00228	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0022b	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00231	c1 e8 0f	 shr	 eax, 15
  00234	83 e0 01	 and	 eax, 1
  00237	85 c0		 test	 eax, eax
  00239	74 12		 je	 SHORT $LN23@tcpnje_ini
  0023b	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00240	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00246	83 e0 02	 and	 eax, 2
  00249	85 c0		 test	 eax, eax
  0024b	75 12		 jne	 SHORT $LN22@tcpnje_ini
$LN23@tcpnje_ini:
  0024d	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00252	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00258	83 e0 02	 and	 eax, 2
  0025b	85 c0		 test	 eax, eax
  0025d	74 1b		 je	 SHORT $LN21@tcpnje_ini
$LN22@tcpnje_ini:
  0025f	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00264	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00267	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0026b	8b d0		 mov	 edx, eax
  0026d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159560
  00274	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN21@tcpnje_ini:

; 637  :                             tn->dev->devnum);
; 638  : 
; 639  :                     break;

  0027a	e9 ac 00 00 00	 jmp	 $LN5@tcpnje_ini
$LN13@tcpnje_ini:

; 640  :                 }
; 641  :                 break;

  0027f	e9 a7 00 00 00	 jmp	 $LN5@tcpnje_ini
$LN24@tcpnje_ini:

; 642  :             case 0x0c: /* EON */
; 643  :                 goteon = 1;

  00284	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR goteon$[rsp], 1

; 644  :                 break;

  0028c	e9 9a 00 00 00	 jmp	 $LN5@tcpnje_ini
$LN25@tcpnje_ini:
$LN26@tcpnje_ini:
$LN27@tcpnje_ini:
$LN28@tcpnje_ini:

; 645  : 
; 646  :                 /* A,B,E,F not valid */
; 647  :             case 0x0a:
; 648  :             case 0x0b:
; 649  :             case 0x0e:
; 650  :             case 0x0f:
; 651  :                 incdata = 1;

  00291	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR incdata$[rsp], 1

; 652  : 
; 653  :                 DBGMSG(2, "HHCTN043E %4.4X:TCPNJE - incorrect dial data byte %2.2x\n",

  00299	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  0029e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002a1	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  002a7	c1 e8 0f	 shr	 eax, 15
  002aa	83 e0 01	 and	 eax, 1
  002ad	85 c0		 test	 eax, eax
  002af	74 12		 je	 SHORT $LN31@tcpnje_ini
  002b1	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  002b6	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  002bc	83 e0 02	 and	 eax, 2
  002bf	85 c0		 test	 eax, eax
  002c1	75 12		 jne	 SHORT $LN30@tcpnje_ini
$LN31@tcpnje_ini:
  002c3	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  002c8	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  002ce	83 e0 02	 and	 eax, 2
  002d1	85 c0		 test	 eax, eax
  002d3	74 2d		 je	 SHORT $LN29@tcpnje_ini
$LN30@tcpnje_ini:
  002d5	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  002da	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  002df	0f b6 44 01 10	 movzx	 eax, BYTE PTR [rcx+rax+16]
  002e4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  002e9	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  002ec	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  002f0	44 8b c0	 mov	 r8d, eax
  002f3	8b d1		 mov	 edx, ecx
  002f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159569
  002fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN29@tcpnje_ini:

; 654  :                         tn->dev->devnum, tn->dialdata[i]);
; 655  : 
; 656  :                 break;

  00302	eb 27		 jmp	 SHORT $LN5@tcpnje_ini
$LN32@tcpnje_ini:

; 657  :             default:
; 658  :                 cur *= 10;

  00304	6b 44 24 24 0a	 imul	 eax, DWORD PTR cur$[rsp], 10
  00309	89 44 24 24	 mov	 DWORD PTR cur$[rsp], eax

; 659  :                 cur += tn->dialdata[i]&0x0f;

  0030d	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  00312	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00317	0f b6 44 01 10	 movzx	 eax, BYTE PTR [rcx+rax+16]
  0031c	83 e0 0f	 and	 eax, 15
  0031f	8b 4c 24 24	 mov	 ecx, DWORD PTR cur$[rsp]
  00323	03 c8		 add	 ecx, eax
  00325	8b c1		 mov	 eax, ecx
  00327	89 44 24 24	 mov	 DWORD PTR cur$[rsp], eax
$LN5@tcpnje_ini:

; 660  :                 break;
; 661  :         }
; 662  :         if (incdata)

  0032b	83 7c 24 2c 00	 cmp	 DWORD PTR incdata$[rsp], 0
  00330	74 02		 je	 SHORT $LN33@tcpnje_ini

; 663  :         {
; 664  :             break;

  00332	eb 05		 jmp	 SHORT $LN3@tcpnje_ini
$LN33@tcpnje_ini:

; 665  :         }
; 666  :     }

  00334	e9 02 fd ff ff	 jmp	 $LN2@tcpnje_ini
$LN3@tcpnje_ini:

; 667  :     if (incdata)

  00339	83 7c 24 2c 00	 cmp	 DWORD PTR incdata$[rsp], 0
  0033e	74 0a		 je	 SHORT $LN34@tcpnje_ini

; 668  :     {
; 669  :         return -1;

  00340	b8 ff ff ff ff	 mov	 eax, -1
  00345	e9 0b 01 00 00	 jmp	 $LN1@tcpnje_ini
$LN34@tcpnje_ini:

; 670  :     }
; 671  :     if (dotcount < 4)

  0034a	83 7c 24 30 04	 cmp	 DWORD PTR dotcount$[rsp], 4
  0034f	7d 66		 jge	 SHORT $LN35@tcpnje_ini

; 672  :     {
; 673  : 
; 674  :         DBGMSG(2, "HHCTN044E %4.4X:TCPNJE - not enough separators (only %d found) in dial data\n",

  00351	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00356	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00359	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0035f	c1 e8 0f	 shr	 eax, 15
  00362	83 e0 01	 and	 eax, 1
  00365	85 c0		 test	 eax, eax
  00367	74 12		 je	 SHORT $LN38@tcpnje_ini
  00369	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  0036e	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00374	83 e0 02	 and	 eax, 2
  00377	85 c0		 test	 eax, eax
  00379	75 12		 jne	 SHORT $LN37@tcpnje_ini
$LN38@tcpnje_ini:
  0037b	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00380	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00386	83 e0 02	 and	 eax, 2
  00389	85 c0		 test	 eax, eax
  0038b	74 20		 je	 SHORT $LN36@tcpnje_ini
$LN37@tcpnje_ini:
  0038d	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00392	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00395	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00399	44 8b 44 24 30	 mov	 r8d, DWORD PTR dotcount$[rsp]
  0039e	8b d0		 mov	 edx, eax
  003a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159577
  003a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN36@tcpnje_ini:

; 675  :                 tn->dev->devnum, dotcount);
; 676  : 
; 677  :         return -1;

  003ad	b8 ff ff ff ff	 mov	 eax, -1
  003b2	e9 9e 00 00 00	 jmp	 $LN1@tcpnje_ini
$LN35@tcpnje_ini:

; 678  :     }
; 679  :     if (cur > 65535)

  003b7	81 7c 24 24 ff
	ff 00 00	 cmp	 DWORD PTR cur$[rsp], 65535 ; 0000ffffH
  003bf	7e 63		 jle	 SHORT $LN39@tcpnje_ini

; 680  :     {
; 681  : 
; 682  :         DBGMSG(2, "HHCTN045E %4.4X:TCPNJE - destination TCP port %d exceeds maximum of 65535\n",

  003c1	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  003c6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003c9	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  003cf	c1 e8 0f	 shr	 eax, 15
  003d2	83 e0 01	 and	 eax, 1
  003d5	85 c0		 test	 eax, eax
  003d7	74 12		 je	 SHORT $LN42@tcpnje_ini
  003d9	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  003de	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  003e4	83 e0 02	 and	 eax, 2
  003e7	85 c0		 test	 eax, eax
  003e9	75 12		 jne	 SHORT $LN41@tcpnje_ini
$LN42@tcpnje_ini:
  003eb	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  003f0	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  003f6	83 e0 02	 and	 eax, 2
  003f9	85 c0		 test	 eax, eax
  003fb	74 20		 je	 SHORT $LN40@tcpnje_ini
$LN41@tcpnje_ini:
  003fd	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00402	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00405	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00409	44 8b 44 24 24	 mov	 r8d, DWORD PTR cur$[rsp]
  0040e	8b d0		 mov	 edx, eax
  00410	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159582
  00417	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN40@tcpnje_ini:

; 683  :                 tn->dev->devnum, cur);
; 684  : 
; 685  :         return -1;

  0041d	b8 ff ff ff ff	 mov	 eax, -1
  00422	eb 31		 jmp	 SHORT $LN1@tcpnje_ini
$LN39@tcpnje_ini:

; 686  :     }
; 687  :     destport = cur;

  00424	0f b7 44 24 24	 movzx	 eax, WORD PTR cur$[rsp]
  00429	66 89 44 24 20	 mov	 WORD PTR destport$[rsp], ax

; 688  :     /* Update RHOST/RPORT */
; 689  :     tn->rport = destport;

  0042e	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00433	0f b7 4c 24 20	 movzx	 ecx, WORD PTR destport$[rsp]
  00438	66 89 88 5a 01
	00 00		 mov	 WORD PTR [rax+346], cx

; 690  :     tn->rhost = destip;

  0043f	48 8b 44 24 50	 mov	 rax, QWORD PTR tn$[rsp]
  00444	8b 4c 24 34	 mov	 ecx, DWORD PTR destip$[rsp]
  00448	89 48 44	 mov	 DWORD PTR [rax+68], ecx

; 691  :     return(tcpnje_connout(tn));

  0044b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tn$[rsp]
  00450	e8 00 00 00 00	 call	 tcpnje_connout
$LN1@tcpnje_ini:

; 692  : }

  00455	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00459	c3		 ret	 0
  0045a	66 90		 npad	 2
$LN44@tcpnje_ini:
  0045c	00 00 00 00	 DD	 $LN25@tcpnje_ini
  00460	00 00 00 00	 DD	 $LN26@tcpnje_ini
  00464	00 00 00 00	 DD	 $LN24@tcpnje_ini
  00468	00 00 00 00	 DD	 $LN11@tcpnje_ini
  0046c	00 00 00 00	 DD	 $LN27@tcpnje_ini
  00470	00 00 00 00	 DD	 $LN28@tcpnje_ini
tcpnje_initiate_userdial ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
intmp$ = 64
rc$ = 68
tv314 = 72
tv244 = 76
tv295 = 80
tv339 = 84
tv91 = 88
tv231 = 96
tv237 = 104
tv278 = 112
tv282 = 120
tv288 = 128
tv326 = 136
tv332 = 144
sin$ = 152
rnodestring$ = 168
lnodestring$ = 184
__$ArrayPad$ = 200
tn$ = 224
tcpnje_connout PROC

; 485  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 486  :     int rc;
; 487  :     struct sockaddr_in     sin;
; 488  :     struct in_addr intmp;
; 489  :     char lnodestring[9], rnodestring[9];
; 490  : 
; 491  :     if (!tn->connect) return(999);

  0001e	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00026	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0002c	c1 e8 11	 shr	 eax, 17
  0002f	83 e0 01	 and	 eax, 1
  00032	85 c0		 test	 eax, eax
  00034	75 0a		 jne	 SHORT $LN2@tcpnje_con
  00036	b8 e7 03 00 00	 mov	 eax, 999		; 000003e7H
  0003b	e9 8f 07 00 00	 jmp	 $LN1@tcpnje_con
$LN2@tcpnje_con:

; 492  : 
; 493  :     sin.sin_family = AF_INET;

  00040	b8 02 00 00 00	 mov	 eax, 2
  00045	66 89 84 24 98
	00 00 00	 mov	 WORD PTR sin$[rsp], ax

; 494  :     sin.sin_addr.s_addr = tn->rhost;

  0004d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00055	8b 40 44	 mov	 eax, DWORD PTR [rax+68]
  00058	89 84 24 9c 00
	00 00		 mov	 DWORD PTR sin$[rsp+4], eax

; 495  :     sin.sin_port = htons(tn->rport);

  0005f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00067	0f b7 88 5a 01
	00 00		 movzx	 ecx, WORD PTR [rax+346]
  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_htons
  00074	66 89 84 24 9a
	00 00 00	 mov	 WORD PTR sin$[rsp+2], ax

; 496  : 
; 497  :     /* Are we randomly delaying to avoid colliding with other end's open attempts? */
; 498  :     if (tn->activeopendelay && tn->listen)

  0007c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00084	83 b8 30 01 00
	00 00		 cmp	 DWORD PTR [rax+304], 0
  0008b	0f 84 2f 01 00
	00		 je	 $LN3@tcpnje_con
  00091	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00099	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  0009f	c1 e8 10	 shr	 eax, 16
  000a2	83 e0 01	 and	 eax, 1
  000a5	85 c0		 test	 eax, eax
  000a7	0f 84 13 01 00
	00		 je	 $LN3@tcpnje_con

; 499  :     {
; 500  :         DBGMSG(256, "HHCTN033I %4.4X:TCPNJE - delaying link %s - %s active open for %d attempt(s)\n",

  000ad	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  000b5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000b8	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  000be	c1 e8 0f	 shr	 eax, 15
  000c1	83 e0 01	 and	 eax, 1
  000c4	85 c0		 test	 eax, eax
  000c6	74 17		 je	 SHORT $LN6@tcpnje_con
  000c8	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  000d0	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  000d6	25 00 01 00 00	 and	 eax, 256		; 00000100H
  000db	85 c0		 test	 eax, eax
  000dd	75 1b		 jne	 SHORT $LN5@tcpnje_con
$LN6@tcpnje_con:
  000df	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  000e7	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  000ed	25 00 01 00 00	 and	 eax, 256		; 00000100H
  000f2	85 c0		 test	 eax, eax
  000f4	0f 84 82 00 00
	00		 je	 $LN4@tcpnje_con
$LN5@tcpnje_con:
  000fa	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00102	48 83 c0 38	 add	 rax, 56			; 00000038H
  00106	4c 8b c0	 mov	 r8, rax
  00109	ba 09 00 00 00	 mov	 edx, 9
  0010e	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  00116	e8 00 00 00 00	 call	 guest_to_host_string
  0011b	48 89 44 24 58	 mov	 QWORD PTR tv91[rsp], rax
  00120	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00128	48 83 c1 30	 add	 rcx, 48			; 00000030H
  0012c	4c 8b c1	 mov	 r8, rcx
  0012f	ba 09 00 00 00	 mov	 edx, 9
  00134	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  0013c	e8 00 00 00 00	 call	 guest_to_host_string
  00141	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00149	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0014c	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00150	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR tn$[rsp]
  00158	8b 92 30 01 00
	00		 mov	 edx, DWORD PTR [rdx+304]
  0015e	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  00162	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv91[rsp]
  00167	4c 8b ca	 mov	 r9, rdx
  0016a	4c 8b c0	 mov	 r8, rax
  0016d	8b d1		 mov	 edx, ecx
  0016f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159489
  00176	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN4@tcpnje_con:

; 501  :                      tn->dev->devnum, guest_to_host_string(lnodestring, sizeof(lnodestring), tn->lnode),
; 502  :                                  guest_to_host_string(rnodestring, sizeof(rnodestring), tn->rnode), tn->activeopendelay);
; 503  :         if (tn->activeopendelay > 3) usleep(1000);

  0017c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00184	83 b8 30 01 00
	00 03		 cmp	 DWORD PTR [rax+304], 3
  0018b	7e 0b		 jle	 SHORT $LN7@tcpnje_con
  0018d	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00192	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_usleep
$LN7@tcpnje_con:

; 504  :         tn->activeopendelay--;

  00198	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  001a0	8b 80 30 01 00
	00		 mov	 eax, DWORD PTR [rax+304]
  001a6	ff c8		 dec	 eax
  001a8	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  001b0	89 81 30 01 00
	00		 mov	 DWORD PTR [rcx+304], eax

; 505  : 
; 506  :         /* Pretend we failed to connect */
; 507  :         return(-1);

  001b6	b8 ff ff ff ff	 mov	 eax, -1
  001bb	e9 0f 06 00 00	 jmp	 $LN1@tcpnje_con
$LN3@tcpnje_con:

; 508  :     }
; 509  : 
; 510  :     if (tn->rhost == INADDR_NONE)

  001c0	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  001c8	83 78 44 ff	 cmp	 DWORD PTR [rax+68], -1	; ffffffffH
  001cc	75 6d		 jne	 SHORT $LN8@tcpnje_con

; 511  :     {
; 512  :         DBGMSG(2, "HHCTN034W %4.4X:TCPNJE - cannot make outgoing connection.  Remote ip address not specified\n",

  001ce	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  001d6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001d9	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  001df	c1 e8 0f	 shr	 eax, 15
  001e2	83 e0 01	 and	 eax, 1
  001e5	85 c0		 test	 eax, eax
  001e7	74 15		 je	 SHORT $LN11@tcpnje_con
  001e9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  001f1	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  001f7	83 e0 02	 and	 eax, 2
  001fa	85 c0		 test	 eax, eax
  001fc	75 15		 jne	 SHORT $LN10@tcpnje_con
$LN11@tcpnje_con:
  001fe	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00206	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0020c	83 e0 02	 and	 eax, 2
  0020f	85 c0		 test	 eax, eax
  00211	74 1e		 je	 SHORT $LN9@tcpnje_con
$LN10@tcpnje_con:
  00213	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0021b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0021e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00222	8b d0		 mov	 edx, eax
  00224	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159495
  0022b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN9@tcpnje_con:

; 513  :                 tn->dev->devnum);
; 514  :         return(-1);

  00231	b8 ff ff ff ff	 mov	 eax, -1
  00236	e9 94 05 00 00	 jmp	 $LN1@tcpnje_con
$LN8@tcpnje_con:

; 515  :     }
; 516  : 
; 517  :     if (socket_is_socket(tn->afd))

  0023b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00243	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  00249	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_socket_is_socket
  0024f	85 c0		 test	 eax, eax
  00251	74 77		 je	 SHORT $LN12@tcpnje_con

; 518  :     {
; 519  :         DBGMSG(1, "HHCTN035W %4.4X:TCPNJE - closing outgoing socket as it is unexpectedly open\n",

  00253	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0025b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0025e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00264	c1 e8 0f	 shr	 eax, 15
  00267	83 e0 01	 and	 eax, 1
  0026a	85 c0		 test	 eax, eax
  0026c	74 15		 je	 SHORT $LN15@tcpnje_con
  0026e	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00276	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0027c	83 e0 01	 and	 eax, 1
  0027f	85 c0		 test	 eax, eax
  00281	75 15		 jne	 SHORT $LN14@tcpnje_con
$LN15@tcpnje_con:
  00283	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0028b	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00291	83 e0 01	 and	 eax, 1
  00294	85 c0		 test	 eax, eax
  00296	74 1e		 je	 SHORT $LN13@tcpnje_con
$LN14@tcpnje_con:
  00298	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  002a0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002a3	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  002a7	8b d0		 mov	 edx, eax
  002a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159500
  002b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN13@tcpnje_con:

; 520  :                 tn->dev->devnum);
; 521  :         close_socket(tn->afd);

  002b6	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  002be	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  002c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket
$LN12@tcpnje_con:

; 522  :     }
; 523  :     tn->afd = socket(AF_INET, SOCK_STREAM, 0);

  002ca	45 33 c0	 xor	 r8d, r8d
  002cd	ba 01 00 00 00	 mov	 edx, 1
  002d2	b9 02 00 00 00	 mov	 ecx, 2
  002d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_socket
  002dd	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  002e5	89 81 44 01 00
	00		 mov	 DWORD PTR [rcx+324], eax

; 524  :     /* set socket to NON-blocking mode */
; 525  :     rc = socket_set_blocking_mode(tn->afd, 0);

  002eb	33 d2		 xor	 edx, edx
  002ed	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  002f5	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  002fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_socket_set_blocking_mode
  00301	89 44 24 44	 mov	 DWORD PTR rc$[rsp], eax

; 526  :     if (rc < 0)

  00305	83 7c 24 44 00	 cmp	 DWORD PTR rc$[rsp], 0
  0030a	7d 7e		 jge	 SHORT $LN16@tcpnje_con

; 527  :     {
; 528  :         DBGMSG(4, "HHCTN036E %4.4X:TCPNJE - error setting socket for outgoing calls to non-blocking : %s\n",

  0030c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00314	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00317	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0031d	c1 e8 0f	 shr	 eax, 15
  00320	83 e0 01	 and	 eax, 1
  00323	85 c0		 test	 eax, eax
  00325	74 15		 je	 SHORT $LN19@tcpnje_con
  00327	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0032f	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00335	83 e0 04	 and	 eax, 4
  00338	85 c0		 test	 eax, eax
  0033a	75 15		 jne	 SHORT $LN18@tcpnje_con
$LN19@tcpnje_con:
  0033c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00344	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0034a	83 e0 04	 and	 eax, 4
  0034d	85 c0		 test	 eax, eax
  0034f	74 2f		 je	 SHORT $LN17@tcpnje_con
$LN18@tcpnje_con:
  00351	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00357	8b c8		 mov	 ecx, eax
  00359	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0035f	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00367	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0036a	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  0036e	4c 8b c0	 mov	 r8, rax
  00371	8b d1		 mov	 edx, ecx
  00373	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159505
  0037a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN17@tcpnje_con:

; 529  :                 tn->dev->devnum, strerror(HSO_errno));
; 530  :         return(-1);

  00380	b8 ff ff ff ff	 mov	 eax, -1
  00385	e9 45 04 00 00	 jmp	 $LN1@tcpnje_con
$LN16@tcpnje_con:

; 531  :     }
; 532  :     intmp.s_addr = tn->rhost;

  0038a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00392	8b 40 44	 mov	 eax, DWORD PTR [rax+68]
  00395	89 44 24 40	 mov	 DWORD PTR intmp$[rsp], eax

; 533  :     /* Last chance to avoid connecting both ways at the same time */
; 534  :     if (tn->state < TCPCONACT)

  00399	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  003a1	83 b8 54 01 00
	00 03		 cmp	 DWORD PTR [rax+340], 3
  003a8	0f 8d 0b 04 00
	00		 jge	 $LN20@tcpnje_con

; 535  :     {
; 536  :         DBGMSG(128, "HHCTN037I %4.4X:TCPNJE - connecting out to %s:%d for link %s - %s\n",

  003ae	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  003b6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003b9	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  003bf	c1 e8 0f	 shr	 eax, 15
  003c2	83 e0 01	 and	 eax, 1
  003c5	85 c0		 test	 eax, eax
  003c7	74 17		 je	 SHORT $LN23@tcpnje_con
  003c9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  003d1	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  003d7	25 80 00 00 00	 and	 eax, 128		; 00000080H
  003dc	85 c0		 test	 eax, eax
  003de	75 1b		 jne	 SHORT $LN22@tcpnje_con
$LN23@tcpnje_con:
  003e0	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  003e8	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  003ee	25 80 00 00 00	 and	 eax, 128		; 00000080H
  003f3	85 c0		 test	 eax, eax
  003f5	0f 84 a5 00 00
	00		 je	 $LN21@tcpnje_con
$LN22@tcpnje_con:
  003fb	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00403	48 83 c0 38	 add	 rax, 56			; 00000038H
  00407	4c 8b c0	 mov	 r8, rax
  0040a	ba 09 00 00 00	 mov	 edx, 9
  0040f	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  00417	e8 00 00 00 00	 call	 guest_to_host_string
  0041c	48 89 44 24 60	 mov	 QWORD PTR tv231[rsp], rax
  00421	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00429	48 83 c1 30	 add	 rcx, 48			; 00000030H
  0042d	4c 8b c1	 mov	 r8, rcx
  00430	ba 09 00 00 00	 mov	 edx, 9
  00435	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  0043d	e8 00 00 00 00	 call	 guest_to_host_string
  00442	48 89 44 24 68	 mov	 QWORD PTR tv237[rsp], rax
  00447	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  0044f	0f b7 89 5a 01
	00 00		 movzx	 ecx, WORD PTR [rcx+346]
  00456	89 4c 24 4c	 mov	 DWORD PTR tv244[rsp], ecx
  0045a	8b 4c 24 40	 mov	 ecx, DWORD PTR intmp$[rsp]
  0045e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_ntoa
  00464	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  0046c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0046f	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00473	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv231[rsp]
  00478	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  0047d	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv237[rsp]
  00482	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  00487	8b 54 24 4c	 mov	 edx, DWORD PTR tv244[rsp]
  0048b	44 8b ca	 mov	 r9d, edx
  0048e	4c 8b c0	 mov	 r8, rax
  00491	8b d1		 mov	 edx, ecx
  00493	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159510
  0049a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN21@tcpnje_con:

; 537  :                 tn->dev->devnum, inet_ntoa(intmp), tn->rport,
; 538  :                 guest_to_host_string(lnodestring, sizeof(lnodestring), tn->lnode),
; 539  :                 guest_to_host_string(rnodestring, sizeof(rnodestring), tn->rnode));
; 540  : 
; 541  :         rc = connect(tn->afd, (struct sockaddr *)&sin, sizeof(sin));

  004a0	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  004a8	48 63 80 44 01
	00 00		 movsxd	 rax, DWORD PTR [rax+324]
  004af	41 b8 10 00 00
	00		 mov	 r8d, 16
  004b5	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR sin$[rsp]
  004bd	48 8b c8	 mov	 rcx, rax
  004c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_connect
  004c6	89 44 24 44	 mov	 DWORD PTR rc$[rsp], eax

; 542  :         if (tn->state < TCPCONSNT) tn->state = TCPCONSNT;

  004ca	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  004d2	83 b8 54 01 00
	00 02		 cmp	 DWORD PTR [rax+340], 2
  004d9	7d 12		 jge	 SHORT $LN24@tcpnje_con
  004db	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  004e3	c7 80 54 01 00
	00 02 00 00 00	 mov	 DWORD PTR [rax+340], 2
$LN24@tcpnje_con:

; 543  :         if (rc < 0)

  004ed	83 7c 24 44 00	 cmp	 DWORD PTR rc$[rsp], 0
  004f2	0f 8d b1 01 00
	00		 jge	 $LN25@tcpnje_con

; 544  :         {
; 545  : #if defined(_MSVC_)
; 546  :             if (HSO_errno == HSO_EWOULDBLOCK)

  004f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  004fe	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  00503	75 0c		 jne	 SHORT $LN26@tcpnje_con

; 547  : #else /* defined(_MSVC_) */
; 548  :             if (HSO_errno == HSO_EINPROGRESS)
; 549  : #endif /* defined(_MSVC_) */
; 550  :             {
; 551  :                 return(0);

  00505	33 c0		 xor	 eax, eax
  00507	e9 c3 02 00 00	 jmp	 $LN1@tcpnje_con

; 552  :             }

  0050c	e9 98 01 00 00	 jmp	 $LN27@tcpnje_con
$LN26@tcpnje_con:

; 553  :             else
; 554  :             {
; 555  :                 intmp.s_addr = tn->rhost;

  00511	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00519	8b 40 44	 mov	 eax, DWORD PTR [rax+68]
  0051c	89 44 24 40	 mov	 DWORD PTR intmp$[rsp], eax

; 556  :                 DBGMSG(32, "HHCTN001W %4.4X:TCPNJE - connect out to %s:%d failed for link %s - %s : %s\n",

  00520	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00528	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0052b	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00531	c1 e8 0f	 shr	 eax, 15
  00534	83 e0 01	 and	 eax, 1
  00537	85 c0		 test	 eax, eax
  00539	74 15		 je	 SHORT $LN30@tcpnje_con
  0053b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00543	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00549	83 e0 20	 and	 eax, 32			; 00000020H
  0054c	85 c0		 test	 eax, eax
  0054e	75 19		 jne	 SHORT $LN29@tcpnje_con
$LN30@tcpnje_con:
  00550	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00558	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0055e	83 e0 20	 and	 eax, 32			; 00000020H
  00561	85 c0		 test	 eax, eax
  00563	0f 84 c8 00 00
	00		 je	 $LN28@tcpnje_con
$LN29@tcpnje_con:
  00569	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  0056f	8b c8		 mov	 ecx, eax
  00571	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00577	48 89 44 24 70	 mov	 QWORD PTR tv278[rsp], rax
  0057c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00584	48 83 c1 38	 add	 rcx, 56			; 00000038H
  00588	4c 8b c1	 mov	 r8, rcx
  0058b	ba 09 00 00 00	 mov	 edx, 9
  00590	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  00598	e8 00 00 00 00	 call	 guest_to_host_string
  0059d	48 89 44 24 78	 mov	 QWORD PTR tv282[rsp], rax
  005a2	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  005aa	48 83 c1 30	 add	 rcx, 48			; 00000030H
  005ae	4c 8b c1	 mov	 r8, rcx
  005b1	ba 09 00 00 00	 mov	 edx, 9
  005b6	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  005be	e8 00 00 00 00	 call	 guest_to_host_string
  005c3	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv288[rsp], rax
  005cb	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  005d3	0f b7 89 5a 01
	00 00		 movzx	 ecx, WORD PTR [rcx+346]
  005da	89 4c 24 50	 mov	 DWORD PTR tv295[rsp], ecx
  005de	8b 4c 24 40	 mov	 ecx, DWORD PTR intmp$[rsp]
  005e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_ntoa
  005e8	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  005f0	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  005f3	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  005f7	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv278[rsp]
  005fc	48 89 54 24 30	 mov	 QWORD PTR [rsp+48], rdx
  00601	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv282[rsp]
  00606	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  0060b	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv288[rsp]
  00613	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  00618	8b 54 24 50	 mov	 edx, DWORD PTR tv295[rsp]
  0061c	44 8b ca	 mov	 r9d, edx
  0061f	4c 8b c0	 mov	 r8, rax
  00622	8b d1		 mov	 edx, ecx
  00624	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159518
  0062b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN28@tcpnje_con:

; 557  :                         tn->dev->devnum, inet_ntoa(intmp), tn->rport,
; 558  :                         guest_to_host_string(lnodestring, sizeof(lnodestring), tn->lnode),
; 559  :                         guest_to_host_string(rnodestring, sizeof(rnodestring), tn->rnode), strerror(HSO_errno));
; 560  :                 close_socket(tn->afd);

  00631	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00639	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  0063f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 561  :                 tn->afd = -1;

  00645	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0064d	c7 80 44 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+324], -1

; 562  :                 if (tn->state == TCPCONSNT)

  00657	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0065f	83 b8 54 01 00
	00 02		 cmp	 DWORD PTR [rax+340], 2
  00666	75 37		 jne	 SHORT $LN31@tcpnje_con

; 563  :                 {
; 564  :                     tn->state = tn->listening ? TCPLISTEN : CLOSED;

  00668	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00670	0f b6 80 62 01
	00 00		 movzx	 eax, BYTE PTR [rax+354]
  00677	85 c0		 test	 eax, eax
  00679	74 0a		 je	 SHORT $LN36@tcpnje_con
  0067b	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv314[rsp], 1
  00683	eb 08		 jmp	 SHORT $LN37@tcpnje_con
$LN36@tcpnje_con:
  00685	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv314[rsp], 0
$LN37@tcpnje_con:
  0068d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00695	8b 4c 24 48	 mov	 ecx, DWORD PTR tv314[rsp]
  00699	89 88 54 01 00
	00		 mov	 DWORD PTR [rax+340], ecx
$LN31@tcpnje_con:

; 565  :                 }
; 566  :                 return(-1);

  0069f	b8 ff ff ff ff	 mov	 eax, -1
  006a4	e9 26 01 00 00	 jmp	 $LN1@tcpnje_con
$LN27@tcpnje_con:
$LN25@tcpnje_con:

; 567  :             }
; 568  :         }
; 569  :         DBGMSG(128, "HHCTN038I %4.4X:TCPNJE - connected out to %s:%d for link %s - %s\n",

  006a9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  006b1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006b4	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  006ba	c1 e8 0f	 shr	 eax, 15
  006bd	83 e0 01	 and	 eax, 1
  006c0	85 c0		 test	 eax, eax
  006c2	74 17		 je	 SHORT $LN34@tcpnje_con
  006c4	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  006cc	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  006d2	25 80 00 00 00	 and	 eax, 128		; 00000080H
  006d7	85 c0		 test	 eax, eax
  006d9	75 1b		 jne	 SHORT $LN33@tcpnje_con
$LN34@tcpnje_con:
  006db	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  006e3	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  006e9	25 80 00 00 00	 and	 eax, 128		; 00000080H
  006ee	85 c0		 test	 eax, eax
  006f0	0f 84 b1 00 00
	00		 je	 $LN32@tcpnje_con
$LN33@tcpnje_con:
  006f6	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  006fe	48 83 c0 38	 add	 rax, 56			; 00000038H
  00702	4c 8b c0	 mov	 r8, rax
  00705	ba 09 00 00 00	 mov	 edx, 9
  0070a	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR rnodestring$[rsp]
  00712	e8 00 00 00 00	 call	 guest_to_host_string
  00717	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv326[rsp], rax
  0071f	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00727	48 83 c1 30	 add	 rcx, 48			; 00000030H
  0072b	4c 8b c1	 mov	 r8, rcx
  0072e	ba 09 00 00 00	 mov	 edx, 9
  00733	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR lnodestring$[rsp]
  0073b	e8 00 00 00 00	 call	 guest_to_host_string
  00740	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv332[rsp], rax
  00748	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00750	0f b7 89 5a 01
	00 00		 movzx	 ecx, WORD PTR [rcx+346]
  00757	89 4c 24 54	 mov	 DWORD PTR tv339[rsp], ecx
  0075b	8b 4c 24 40	 mov	 ecx, DWORD PTR intmp$[rsp]
  0075f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_ntoa
  00765	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  0076d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00770	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00774	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv326[rsp]
  0077c	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  00781	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tv332[rsp]
  00789	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0078e	8b 54 24 54	 mov	 edx, DWORD PTR tv339[rsp]
  00792	44 8b ca	 mov	 r9d, edx
  00795	4c 8b c0	 mov	 r8, rax
  00798	8b d1		 mov	 edx, ecx
  0079a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159523
  007a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN32@tcpnje_con:

; 570  :                 tn->dev->devnum, inet_ntoa(intmp), tn->rport,
; 571  :                 guest_to_host_string(lnodestring, sizeof(lnodestring), tn->lnode),
; 572  :                 guest_to_host_string(rnodestring, sizeof(rnodestring), tn->rnode));
; 573  :         tn->state = TCPCONACT;

  007a7	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  007af	c7 80 54 01 00
	00 03 00 00 00	 mov	 DWORD PTR [rax+340], 3
$LN20@tcpnje_con:

; 574  :     }
; 575  :     disable_nagle(tn->afd);

  007b9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  007c1	8b 88 44 01 00
	00		 mov	 ecx, DWORD PTR [rax+324]
  007c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_disable_nagle

; 576  :     return(0);

  007cd	33 c0		 xor	 eax, eax
$LN1@tcpnje_con:

; 577  : }

  007cf	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  007d7	48 33 cc	 xor	 rcx, rsp
  007da	e8 00 00 00 00	 call	 __security_check_cookie
  007df	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  007e6	c3		 ret	 0
tcpnje_connout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
rc$ = 48
intmp$ = 52
savederrno$ = 56
sockopt$ = 60
tv247 = 64
tv298 = 68
tv358 = 72
tv294 = 80
tv328 = 88
sin$ = 96
__$ArrayPad$ = 112
tn$ = 144
tcpnje_listen PROC

; 357  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 44 24 70	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 358  :     struct sockaddr_in sin;     /* bind socket address structure     */
; 359  :     struct in_addr intmp;       /* to print ip address in error msgs */
; 360  :     int savederrno;
; 361  :     int sockopt;                /* Used for setsocketoption          */
; 362  :     int rc;                     /* return code from various rtns     */
; 363  : 
; 364  :     if (!tn->listen) return(999);

  0001b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00023	8b 80 64 01 00
	00		 mov	 eax, DWORD PTR [rax+356]
  00029	c1 e8 10	 shr	 eax, 16
  0002c	83 e0 01	 and	 eax, 1
  0002f	85 c0		 test	 eax, eax
  00031	75 0a		 jne	 SHORT $LN2@tcpnje_lis
  00033	b8 e7 03 00 00	 mov	 eax, 999		; 000003e7H
  00038	e9 c8 07 00 00	 jmp	 $LN1@tcpnje_lis
$LN2@tcpnje_lis:

; 365  : 
; 366  :     intmp.s_addr = tn->lhost;   /* To display ip addresses in msgs   */

  0003d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00045	8b 40 40	 mov	 eax, DWORD PTR [rax+64]
  00048	89 44 24 34	 mov	 DWORD PTR intmp$[rsp], eax

; 367  : 
; 368  :     /* Indicate that we are at least pretending to listen */
; 369  :     tn->listening = 1;

  0004c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00054	c6 80 62 01 00
	00 01		 mov	 BYTE PTR [rax+354], 1

; 370  :     if (tn->state < TCPLISTEN) tn->state = TCPLISTEN;

  0005b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00063	83 b8 54 01 00
	00 01		 cmp	 DWORD PTR [rax+340], 1
  0006a	7d 12		 jge	 SHORT $LN3@tcpnje_lis
  0006c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00074	c7 80 54 01 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+340], 1
$LN3@tcpnje_lis:

; 371  : 
; 372  :     /* Create the socket for a listen */
; 373  :     tn->lfd = socket(AF_INET, SOCK_STREAM, 0);

  0007e	45 33 c0	 xor	 r8d, r8d
  00081	ba 01 00 00 00	 mov	 edx, 1
  00086	b9 02 00 00 00	 mov	 ecx, 2
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_socket
  00091	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00099	89 81 40 01 00
	00		 mov	 DWORD PTR [rcx+320], eax

; 374  :     if (tn->lfd < 0)

  0009f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  000a7	83 b8 40 01 00
	00 00		 cmp	 DWORD PTR [rax+320], 0
  000ae	7d 7e		 jge	 SHORT $LN4@tcpnje_lis

; 375  :     {
; 376  :         DBGMSG(4, "HHCTN003E %4.4X:TCPNJE - cannot obtain socket for incoming calls : %s\n",

  000b0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  000b8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000bb	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  000c1	c1 e8 0f	 shr	 eax, 15
  000c4	83 e0 01	 and	 eax, 1
  000c7	85 c0		 test	 eax, eax
  000c9	74 15		 je	 SHORT $LN7@tcpnje_lis
  000cb	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  000d3	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  000d9	83 e0 04	 and	 eax, 4
  000dc	85 c0		 test	 eax, eax
  000de	75 15		 jne	 SHORT $LN6@tcpnje_lis
$LN7@tcpnje_lis:
  000e0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  000e8	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  000ee	83 e0 04	 and	 eax, 4
  000f1	85 c0		 test	 eax, eax
  000f3	74 2f		 je	 SHORT $LN5@tcpnje_lis
$LN6@tcpnje_lis:
  000f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  000fb	8b c8		 mov	 ecx, eax
  000fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00103	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  0010b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0010e	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00112	4c 8b c0	 mov	 r8, rax
  00115	8b d1		 mov	 edx, ecx
  00117	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159426
  0011e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN5@tcpnje_lis:

; 377  :                 tn->dev->devnum, strerror(HSO_errno));
; 378  :         return -1;

  00124	b8 ff ff ff ff	 mov	 eax, -1
  00129	e9 d7 06 00 00	 jmp	 $LN1@tcpnje_lis
$LN4@tcpnje_lis:

; 379  :     }
; 380  : 
; 381  :     if (!socket_is_socket(tn->lfd))

  0012e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00136	8b 88 40 01 00
	00		 mov	 ecx, DWORD PTR [rax+320]
  0013c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_socket_is_socket
  00142	85 c0		 test	 eax, eax
  00144	0f 85 a4 00 00
	00		 jne	 $LN8@tcpnje_lis

; 382  :     {
; 383  :         DBGMSG(4, "HHCTN028E %4.4X:TCPNJE - cannot use socket obtained for incoming calls : %s\n",

  0014a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00152	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00155	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0015b	c1 e8 0f	 shr	 eax, 15
  0015e	83 e0 01	 and	 eax, 1
  00161	85 c0		 test	 eax, eax
  00163	74 15		 je	 SHORT $LN11@tcpnje_lis
  00165	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0016d	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00173	83 e0 04	 and	 eax, 4
  00176	85 c0		 test	 eax, eax
  00178	75 15		 jne	 SHORT $LN10@tcpnje_lis
$LN11@tcpnje_lis:
  0017a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00182	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00188	83 e0 04	 and	 eax, 4
  0018b	85 c0		 test	 eax, eax
  0018d	74 2f		 je	 SHORT $LN9@tcpnje_lis
$LN10@tcpnje_lis:
  0018f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00195	8b c8		 mov	 ecx, eax
  00197	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0019d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  001a5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001a8	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  001ac	4c 8b c0	 mov	 r8, rax
  001af	8b d1		 mov	 edx, ecx
  001b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159431
  001b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN9@tcpnje_lis:

; 384  :                 tn->dev->devnum, strerror(HSO_errno));
; 385  :         close_socket(tn->lfd);

  001be	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  001c6	8b 88 40 01 00
	00		 mov	 ecx, DWORD PTR [rax+320]
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 386  :         tn->lfd = -1;

  001d2	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  001da	c7 80 40 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+320], -1

; 387  :         return -2;

  001e4	b8 fe ff ff ff	 mov	 eax, -2
  001e9	e9 17 06 00 00	 jmp	 $LN1@tcpnje_lis
$LN8@tcpnje_lis:

; 388  :     }
; 389  : 
; 390  :     /* Turn blocking I/O off */
; 391  :     /* set socket to NON-blocking mode */
; 392  :     rc = socket_set_blocking_mode(tn->lfd, 0);

  001ee	33 d2		 xor	 edx, edx
  001f0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  001f8	8b 88 40 01 00
	00		 mov	 ecx, DWORD PTR [rax+320]
  001fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_socket_set_blocking_mode
  00204	89 44 24 30	 mov	 DWORD PTR rc$[rsp], eax

; 393  :     if (rc < 0)

  00208	83 7c 24 30 00	 cmp	 DWORD PTR rc$[rsp], 0
  0020d	0f 8d a4 00 00
	00		 jge	 $LN12@tcpnje_lis

; 394  :     {
; 395  :         DBGMSG(4, "HHCTN029E %4.4X:TCPNJE - error setting socket for incoming calls to non-blocking : %s\n",

  00213	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0021b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0021e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00224	c1 e8 0f	 shr	 eax, 15
  00227	83 e0 01	 and	 eax, 1
  0022a	85 c0		 test	 eax, eax
  0022c	74 15		 je	 SHORT $LN15@tcpnje_lis
  0022e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00236	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0023c	83 e0 04	 and	 eax, 4
  0023f	85 c0		 test	 eax, eax
  00241	75 15		 jne	 SHORT $LN14@tcpnje_lis
$LN15@tcpnje_lis:
  00243	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0024b	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00251	83 e0 04	 and	 eax, 4
  00254	85 c0		 test	 eax, eax
  00256	74 2f		 je	 SHORT $LN13@tcpnje_lis
$LN14@tcpnje_lis:
  00258	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  0025e	8b c8		 mov	 ecx, eax
  00260	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00266	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  0026e	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00271	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00275	4c 8b c0	 mov	 r8, rax
  00278	8b d1		 mov	 edx, ecx
  0027a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159436
  00281	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN13@tcpnje_lis:

; 396  :                 tn->dev->devnum, strerror(HSO_errno));
; 397  :         close_socket(tn->lfd);

  00287	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0028f	8b 88 40 01 00
	00		 mov	 ecx, DWORD PTR [rax+320]
  00295	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 398  :         tn->lfd = -1;

  0029b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  002a3	c7 80 40 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+320], -1

; 399  :         return -3;

  002ad	b8 fd ff ff ff	 mov	 eax, -3
  002b2	e9 4e 05 00 00	 jmp	 $LN1@tcpnje_lis
$LN12@tcpnje_lis:

; 400  :     }
; 401  : 
; 402  :     /* Reuse the address regardless of any */
; 403  :     /* spurious connection on that port    */
; 404  :     sockopt = 1;

  002b7	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR sockopt$[rsp], 1

; 405  :     rc = setsockopt(tn->lfd, SOL_SOCKET, SO_REUSEADDR, (GETSET_SOCKOPT_T*)&sockopt, sizeof(sockopt));

  002bf	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  002c7	48 63 80 40 01
	00 00		 movsxd	 rax, DWORD PTR [rax+320]
  002ce	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  002d6	4c 8d 4c 24 3c	 lea	 r9, QWORD PTR sockopt$[rsp]
  002db	41 b8 04 00 00
	00		 mov	 r8d, 4
  002e1	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  002e6	48 8b c8	 mov	 rcx, rax
  002e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setsockopt
  002ef	89 44 24 30	 mov	 DWORD PTR rc$[rsp], eax

; 406  :     if (rc < 0)

  002f3	83 7c 24 30 00	 cmp	 DWORD PTR rc$[rsp], 0
  002f8	7d 74		 jge	 SHORT $LN16@tcpnje_lis

; 407  :     {
; 408  :         DBGMSG(4, "HHCTN030W %4.4X:TCPNJE - unable to set SO_REUSEADDR option on listening socket: %s\n",

  002fa	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00302	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00305	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0030b	c1 e8 0f	 shr	 eax, 15
  0030e	83 e0 01	 and	 eax, 1
  00311	85 c0		 test	 eax, eax
  00313	74 15		 je	 SHORT $LN19@tcpnje_lis
  00315	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0031d	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00323	83 e0 04	 and	 eax, 4
  00326	85 c0		 test	 eax, eax
  00328	75 15		 jne	 SHORT $LN18@tcpnje_lis
$LN19@tcpnje_lis:
  0032a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00332	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00338	83 e0 04	 and	 eax, 4
  0033b	85 c0		 test	 eax, eax
  0033d	74 2f		 je	 SHORT $LN17@tcpnje_lis
$LN18@tcpnje_lis:
  0033f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00345	8b c8		 mov	 ecx, eax
  00347	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0034d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00355	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00358	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  0035c	4c 8b c0	 mov	 r8, rax
  0035f	8b d1		 mov	 edx, ecx
  00361	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159441
  00368	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN17@tcpnje_lis:
$LN16@tcpnje_lis:

; 409  :                 tn->dev->devnum, strerror(HSO_errno));
; 410  :     }
; 411  : 
; 412  :     /* Bind the socket */
; 413  :     sin.sin_family = AF_INET;

  0036e	b8 02 00 00 00	 mov	 eax, 2
  00373	66 89 44 24 60	 mov	 WORD PTR sin$[rsp], ax

; 414  :     sin.sin_addr.s_addr = tn->lhost;

  00378	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00380	8b 40 40	 mov	 eax, DWORD PTR [rax+64]
  00383	89 44 24 64	 mov	 DWORD PTR sin$[rsp+4], eax

; 415  :     sin.sin_port = htons(tn->lport);

  00387	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0038f	0f b7 88 58 01
	00 00		 movzx	 ecx, WORD PTR [rax+344]
  00396	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_htons
  0039c	66 89 44 24 62	 mov	 WORD PTR sin$[rsp+2], ax

; 416  : 
; 417  :     /* Caller may want to listen on a privileged port such as 175, the standard TCPNJE/VMNET port */
; 418  :     if (tn->lport < 1024) SETMODE(ROOT);

  003a1	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  003a9	0f b7 80 58 01
	00 00		 movzx	 eax, WORD PTR [rax+344]

; 419  : 
; 420  :     rc = bind(tn->lfd, (struct sockaddr *)&sin, sizeof(sin));

  003b0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  003b8	48 63 80 40 01
	00 00		 movsxd	 rax, DWORD PTR [rax+320]
  003bf	41 b8 10 00 00
	00		 mov	 r8d, 16
  003c5	48 8d 54 24 60	 lea	 rdx, QWORD PTR sin$[rsp]
  003ca	48 8b c8	 mov	 rcx, rax
  003cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_bind
  003d3	89 44 24 30	 mov	 DWORD PTR rc$[rsp], eax

; 421  :     savederrno = HSO_errno;

  003d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  003dd	89 44 24 38	 mov	 DWORD PTR savederrno$[rsp], eax

; 422  : 
; 423  :     if (tn->lport < 1024) SETMODE(USER);

  003e1	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  003e9	0f b7 80 58 01
	00 00		 movzx	 eax, WORD PTR [rax+344]

; 424  : 
; 425  :     if (rc < 0)

  003f0	83 7c 24 30 00	 cmp	 DWORD PTR rc$[rsp], 0
  003f5	0f 8d 58 02 00
	00		 jge	 $LN22@tcpnje_lis

; 426  :     {
; 427  :         if (savederrno == HSO_EADDRINUSE)

  003fb	81 7c 24 38 40
	27 00 00	 cmp	 DWORD PTR savederrno$[rsp], 10048 ; 00002740H
  00403	0f 85 bf 00 00
	00		 jne	 $LN23@tcpnje_lis

; 428  :         {
; 429  :             DBGMSG(32, "HHCTN004W %4.4X:TCPNJE - listener: address/port combination %s:%d currently in use\n",

  00409	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00411	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00414	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0041a	c1 e8 0f	 shr	 eax, 15
  0041d	83 e0 01	 and	 eax, 1
  00420	85 c0		 test	 eax, eax
  00422	74 15		 je	 SHORT $LN27@tcpnje_lis
  00424	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0042c	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00432	83 e0 20	 and	 eax, 32			; 00000020H
  00435	85 c0		 test	 eax, eax
  00437	75 15		 jne	 SHORT $LN26@tcpnje_lis
$LN27@tcpnje_lis:
  00439	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00441	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00447	83 e0 20	 and	 eax, 32			; 00000020H
  0044a	85 c0		 test	 eax, eax
  0044c	74 45		 je	 SHORT $LN25@tcpnje_lis
$LN26@tcpnje_lis:
  0044e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00456	0f b7 80 58 01
	00 00		 movzx	 eax, WORD PTR [rax+344]
  0045d	89 44 24 40	 mov	 DWORD PTR tv247[rsp], eax
  00461	8b 4c 24 34	 mov	 ecx, DWORD PTR intmp$[rsp]
  00465	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_ntoa
  0046b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00473	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00476	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  0047a	8b 54 24 40	 mov	 edx, DWORD PTR tv247[rsp]
  0047e	44 8b ca	 mov	 r9d, edx
  00481	4c 8b c0	 mov	 r8, rax
  00484	8b d1		 mov	 edx, ecx
  00486	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159450
  0048d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN25@tcpnje_lis:

; 430  :                         tn->dev->devnum, inet_ntoa(intmp), tn->lport);
; 431  :             close_socket(tn->lfd);

  00493	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0049b	8b 88 40 01 00
	00		 mov	 ecx, DWORD PTR [rax+320]
  004a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 432  :             tn->lfd = -1;

  004a7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  004af	c7 80 40 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+320], -1

; 433  :             return -4;

  004b9	b8 fc ff ff ff	 mov	 eax, -4
  004be	e9 42 03 00 00	 jmp	 $LN1@tcpnje_lis

; 434  :         }

  004c3	e9 8b 01 00 00	 jmp	 $LN24@tcpnje_lis
$LN23@tcpnje_lis:

; 435  :         else if
; 436  : #if defined(__VMS)
; 437  :                 (savederrno == EPERM)
; 438  : #else /* __VMS */
; 439  :                 (savederrno == HSO_EACCES)

  004c8	81 7c 24 38 1d
	27 00 00	 cmp	 DWORD PTR savederrno$[rsp], 10013 ; 0000271dH
  004d0	0f 85 aa 00 00
	00		 jne	 $LN28@tcpnje_lis

; 440  : #endif /* __VMS */
; 441  :         {
; 442  :             DBGMSG(32, "HHCTN031W %4.4X:TCPNJE - no permission to bind privileged port %d for listen\n",

  004d6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  004de	48 8b 00	 mov	 rax, QWORD PTR [rax]
  004e1	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  004e7	c1 e8 0f	 shr	 eax, 15
  004ea	83 e0 01	 and	 eax, 1
  004ed	85 c0		 test	 eax, eax
  004ef	74 15		 je	 SHORT $LN32@tcpnje_lis
  004f1	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  004f9	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  004ff	83 e0 20	 and	 eax, 32			; 00000020H
  00502	85 c0		 test	 eax, eax
  00504	75 15		 jne	 SHORT $LN31@tcpnje_lis
$LN32@tcpnje_lis:
  00506	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0050e	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00514	83 e0 20	 and	 eax, 32			; 00000020H
  00517	85 c0		 test	 eax, eax
  00519	74 30		 je	 SHORT $LN30@tcpnje_lis
$LN31@tcpnje_lis:
  0051b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00523	0f b7 80 58 01
	00 00		 movzx	 eax, WORD PTR [rax+344]
  0052a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  00532	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00535	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00539	44 8b c0	 mov	 r8d, eax
  0053c	8b d1		 mov	 edx, ecx
  0053e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159456
  00545	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN30@tcpnje_lis:

; 443  :                         tn->dev->devnum, tn->lport);
; 444  :             close_socket(tn->lfd);

  0054b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00553	8b 88 40 01 00
	00		 mov	 ecx, DWORD PTR [rax+320]
  00559	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 445  :             tn->lfd = -1;

  0055f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00567	c7 80 40 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+320], -1

; 446  :             return -5;

  00571	b8 fb ff ff ff	 mov	 eax, -5
  00576	e9 8a 02 00 00	 jmp	 $LN1@tcpnje_lis

; 447  :         }

  0057b	e9 d3 00 00 00	 jmp	 $LN29@tcpnje_lis
$LN28@tcpnje_lis:

; 448  :         else
; 449  :         {
; 450  :             DBGMSG(4, "HHCTN018W %4.4X:TCPNJE - bind for incoming connections to %s:%d failed: %s\n",

  00580	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00588	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0058b	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00591	c1 e8 0f	 shr	 eax, 15
  00594	83 e0 01	 and	 eax, 1
  00597	85 c0		 test	 eax, eax
  00599	74 15		 je	 SHORT $LN35@tcpnje_lis
  0059b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  005a3	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  005a9	83 e0 04	 and	 eax, 4
  005ac	85 c0		 test	 eax, eax
  005ae	75 15		 jne	 SHORT $LN34@tcpnje_lis
$LN35@tcpnje_lis:
  005b0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  005b8	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  005be	83 e0 04	 and	 eax, 4
  005c1	85 c0		 test	 eax, eax
  005c3	74 5e		 je	 SHORT $LN33@tcpnje_lis
$LN34@tcpnje_lis:
  005c5	8b 4c 24 38	 mov	 ecx, DWORD PTR savederrno$[rsp]
  005c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  005cf	48 89 44 24 50	 mov	 QWORD PTR tv294[rsp], rax
  005d4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  005dc	0f b7 89 58 01
	00 00		 movzx	 ecx, WORD PTR [rcx+344]
  005e3	89 4c 24 44	 mov	 DWORD PTR tv298[rsp], ecx
  005e7	8b 4c 24 34	 mov	 ecx, DWORD PTR intmp$[rsp]
  005eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_ntoa
  005f1	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  005f9	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  005fc	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00600	48 8b 54 24 50	 mov	 rdx, QWORD PTR tv294[rsp]
  00605	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0060a	8b 54 24 44	 mov	 edx, DWORD PTR tv298[rsp]
  0060e	44 8b ca	 mov	 r9d, edx
  00611	4c 8b c0	 mov	 r8, rax
  00614	8b d1		 mov	 edx, ecx
  00616	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159460
  0061d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN33@tcpnje_lis:

; 451  :                          tn->dev->devnum, inet_ntoa(intmp), tn->lport, strerror(savederrno));
; 452  :             close_socket(tn->lfd);

  00623	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0062b	8b 88 40 01 00
	00		 mov	 ecx, DWORD PTR [rax+320]
  00631	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 453  :             tn->lfd = -1;

  00637	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0063f	c7 80 40 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+320], -1

; 454  :             return -6;

  00649	b8 fa ff ff ff	 mov	 eax, -6
  0064e	e9 b2 01 00 00	 jmp	 $LN1@tcpnje_lis
$LN29@tcpnje_lis:
$LN24@tcpnje_lis:
$LN22@tcpnje_lis:

; 455  :         }
; 456  :     }
; 457  : 
; 458  :     /* Start the listen */
; 459  :     if (listen(tn->lfd, 10))

  00653	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0065b	48 63 80 40 01
	00 00		 movsxd	 rax, DWORD PTR [rax+320]
  00662	ba 0a 00 00 00	 mov	 edx, 10
  00667	48 8b c8	 mov	 rcx, rax
  0066a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_listen
  00670	85 c0		 test	 eax, eax
  00672	0f 84 cb 00 00
	00		 je	 $LN36@tcpnje_lis

; 460  :     {
; 461  :         DBGMSG(4, "HHCTN032W %4.4X:TCPNJE - listen on %d:%s for incoming TCP connections failed: %s\n",

  00678	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00680	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00683	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00689	c1 e8 0f	 shr	 eax, 15
  0068c	83 e0 01	 and	 eax, 1
  0068f	85 c0		 test	 eax, eax
  00691	74 15		 je	 SHORT $LN39@tcpnje_lis
  00693	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0069b	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  006a1	83 e0 04	 and	 eax, 4
  006a4	85 c0		 test	 eax, eax
  006a6	75 15		 jne	 SHORT $LN38@tcpnje_lis
$LN39@tcpnje_lis:
  006a8	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  006b0	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  006b6	83 e0 04	 and	 eax, 4
  006b9	85 c0		 test	 eax, eax
  006bb	74 58		 je	 SHORT $LN37@tcpnje_lis
$LN38@tcpnje_lis:
  006bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  006c3	8b c8		 mov	 ecx, eax
  006c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  006cb	48 89 44 24 58	 mov	 QWORD PTR tv328[rsp], rax
  006d0	8b 4c 24 34	 mov	 ecx, DWORD PTR intmp$[rsp]
  006d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_ntoa
  006da	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  006e2	0f b7 89 58 01
	00 00		 movzx	 ecx, WORD PTR [rcx+344]
  006e9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tn$[rsp]
  006f1	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  006f4	0f b7 52 48	 movzx	 edx, WORD PTR [rdx+72]
  006f8	4c 8b 44 24 58	 mov	 r8, QWORD PTR tv328[rsp]
  006fd	4c 89 44 24 20	 mov	 QWORD PTR [rsp+32], r8
  00702	4c 8b c8	 mov	 r9, rax
  00705	44 8b c1	 mov	 r8d, ecx
  00708	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159465
  0070f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN37@tcpnje_lis:

; 462  :                     tn->dev->devnum, tn->lport, inet_ntoa(intmp), strerror(HSO_errno));
; 463  :         close_socket(tn->lfd);

  00715	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0071d	8b 88 40 01 00
	00		 mov	 ecx, DWORD PTR [rax+320]
  00723	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 464  :         tn->lfd = -1;

  00729	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00731	c7 80 40 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+320], -1

; 465  :         rc = -7;

  0073b	c7 44 24 30 f9
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -7
$LN36@tcpnje_lis:

; 466  :     }
; 467  : 
; 468  :     DBGMSG(128, "HHCTN005I %4.4X:TCPNJE - listening on %s:%d for incoming connections\n",

  00743	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0074b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0074e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00754	c1 e8 0f	 shr	 eax, 15
  00757	83 e0 01	 and	 eax, 1
  0075a	85 c0		 test	 eax, eax
  0075c	74 17		 je	 SHORT $LN42@tcpnje_lis
  0075e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00766	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  0076c	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00771	85 c0		 test	 eax, eax
  00773	75 17		 jne	 SHORT $LN41@tcpnje_lis
$LN42@tcpnje_lis:
  00775	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  0077d	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00783	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00788	85 c0		 test	 eax, eax
  0078a	74 45		 je	 SHORT $LN40@tcpnje_lis
$LN41@tcpnje_lis:
  0078c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  00794	0f b7 80 58 01
	00 00		 movzx	 eax, WORD PTR [rax+344]
  0079b	89 44 24 48	 mov	 DWORD PTR tv358[rsp], eax
  0079f	8b 4c 24 34	 mov	 ecx, DWORD PTR intmp$[rsp]
  007a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_ntoa
  007a9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tn$[rsp]
  007b1	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  007b4	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  007b8	8b 54 24 48	 mov	 edx, DWORD PTR tv358[rsp]
  007bc	44 8b ca	 mov	 r9d, edx
  007bf	4c 8b c0	 mov	 r8, rax
  007c2	8b d1		 mov	 edx, ecx
  007c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159469
  007cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN40@tcpnje_lis:

; 469  :             tn->dev->devnum, inet_ntoa(intmp), tn->lport);
; 470  : 
; 471  :     if (tn->state < TCPLISTEN) tn->state = TCPLISTEN;

  007d1	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  007d9	83 b8 54 01 00
	00 01		 cmp	 DWORD PTR [rax+340], 1
  007e0	7d 12		 jge	 SHORT $LN43@tcpnje_lis
  007e2	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  007ea	c7 80 54 01 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+340], 1
$LN43@tcpnje_lis:

; 472  : 
; 473  :     /* Indicate that we are listening for real */
; 474  :     tn->listening = 2;

  007f4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tn$[rsp]
  007fc	c6 80 62 01 00
	00 02		 mov	 BYTE PTR [rax+354], 2

; 475  : 
; 476  :     return 0;

  00803	33 c0		 xor	 eax, eax
$LN1@tcpnje_lis:

; 477  : }

  00805	48 8b 4c 24 70	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0080a	48 33 cc	 xor	 rcx, rsp
  0080d	e8 00 00 00 00	 call	 __security_check_cookie
  00812	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00819	c3		 ret	 0
tcpnje_listen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
in$ = 32
he$ = 40
ia$ = 80
txt$ = 88
tcpnje_getaddr PROC

; 325  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 326  :     struct hostent *he;
; 327  :     struct in_addr in;
; 328  : 
; 329  :     if (inet_aton(txt, &in))

  00010	48 8d 54 24 20	 lea	 rdx, QWORD PTR in$[rsp]
  00015	48 8b 4c 24 58	 mov	 rcx, QWORD PTR txt$[rsp]
  0001a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_aton
  00020	85 c0		 test	 eax, eax
  00022	74 0d		 je	 SHORT $LN2@tcpnje_get

; 330  :     {
; 331  :         memcpy(ia, &in.s_addr, sizeof(in.s_addr));

  00024	48 8b 44 24 50	 mov	 rax, QWORD PTR ia$[rsp]
  00029	8b 4c 24 20	 mov	 ecx, DWORD PTR in$[rsp]
  0002d	89 08		 mov	 DWORD PTR [rax], ecx

; 332  :     }

  0002f	eb 49		 jmp	 SHORT $LN3@tcpnje_get
$LN2@tcpnje_get:

; 333  :     else
; 334  :     {
; 335  :         he = gethostbyname(txt);

  00031	48 8b 4c 24 58	 mov	 rcx, QWORD PTR txt$[rsp]
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_gethostbyname
  0003c	48 89 44 24 28	 mov	 QWORD PTR he$[rsp], rax

; 336  :         if (he == NULL)

  00041	48 83 7c 24 28
	00		 cmp	 QWORD PTR he$[rsp], 0
  00047	75 07		 jne	 SHORT $LN4@tcpnje_get

; 337  :         {
; 338  :             return(-1);

  00049	b8 ff ff ff ff	 mov	 eax, -1
  0004e	eb 2c		 jmp	 SHORT $LN1@tcpnje_get
$LN4@tcpnje_get:

; 339  :         }
; 340  :         memcpy(ia, he->h_addr, he->h_length);

  00050	48 8b 44 24 28	 mov	 rax, QWORD PTR he$[rsp]
  00055	48 0f bf 40 12	 movsx	 rax, WORD PTR [rax+18]
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	48 8b 54 24 28	 mov	 rdx, QWORD PTR he$[rsp]
  00068	48 8b 52 18	 mov	 rdx, QWORD PTR [rdx+24]
  0006c	48 8b 7c 24 50	 mov	 rdi, QWORD PTR ia$[rsp]
  00071	48 8b 34 0a	 mov	 rsi, QWORD PTR [rdx+rcx]
  00075	48 8b c8	 mov	 rcx, rax
  00078	f3 a4		 rep movsb
$LN3@tcpnje_get:

; 341  :     }
; 342  :     return(0);

  0007a	33 c0		 xor	 eax, eax
$LN1@tcpnje_get:

; 343  : }

  0007c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00080	5f		 pop	 rdi
  00081	5e		 pop	 rsi
  00082	c3		 ret	 0
tcpnje_getaddr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
pno$ = 32
se$ = 40
txt$ = 64
tcpnje_getport PROC

; 306  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 307  :     int pno;
; 308  :     struct servent *se;
; 309  :     pno = atoi(txt);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR txt$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00014	89 44 24 20	 mov	 DWORD PTR pno$[rsp], eax

; 310  :     if (pno == 0)

  00018	83 7c 24 20 00	 cmp	 DWORD PTR pno$[rsp], 0
  0001d	75 33		 jne	 SHORT $LN2@tcpnje_get

; 311  :     {
; 312  :         se = getservbyname(txt, "tcp");

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159389
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR txt$[rsp]
  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getservbyname
  00031	48 89 44 24 28	 mov	 QWORD PTR se$[rsp], rax

; 313  :         if (se == NULL)

  00036	48 83 7c 24 28
	00		 cmp	 QWORD PTR se$[rsp], 0
  0003c	75 07		 jne	 SHORT $LN3@tcpnje_get

; 314  :         {
; 315  :             return -1;

  0003e	b8 ff ff ff ff	 mov	 eax, -1
  00043	eb 11		 jmp	 SHORT $LN1@tcpnje_get
$LN3@tcpnje_get:

; 316  :         }
; 317  :         pno = se->s_port;

  00045	48 8b 44 24 28	 mov	 rax, QWORD PTR se$[rsp]
  0004a	0f bf 40 18	 movsx	 eax, WORD PTR [rax+24]
  0004e	89 44 24 20	 mov	 DWORD PTR pno$[rsp], eax
$LN2@tcpnje_get:

; 318  :     }
; 319  :     return(pno);

  00052	8b 44 24 20	 mov	 eax, DWORD PTR pno$[rsp]
$LN1@tcpnje_get:

; 320  : }

  00056	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005a	c3		 ret	 0
tcpnje_getport ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
tn$ = 32
dev$ = 64
tcpnje_alloc_device PROC

; 278  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 279  :     struct TCPNJE *tn;
; 280  : 
; 281  :     dev->commadpt = malloc(sizeof(struct TCPNJE));

  0000a	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  0000f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  0001a	48 89 81 68 11
	00 00		 mov	 QWORD PTR [rcx+4456], rax

; 282  :     if (dev->commadpt == NULL)

  00021	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00026	48 83 b8 68 11
	00 00 00	 cmp	 QWORD PTR [rax+4456], 0
  0002e	75 1f		 jne	 SHORT $LN2@tcpnje_all

; 283  :     {
; 284  :         logmsg("HHCTN020E %4.4X:TCPNJE - memory allocation failure for main control block\n",

  00030	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00035	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00039	8b d0		 mov	 edx, eax
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159379
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg

; 285  :                 dev->devnum);
; 286  :         return -1;

  00048	b8 ff ff ff ff	 mov	 eax, -1
  0004d	eb 3e		 jmp	 SHORT $LN1@tcpnje_all
$LN2@tcpnje_all:

; 287  :     }
; 288  : 
; 289  :     tn = (struct TCPNJE *) dev->commadpt;

  0004f	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00054	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0005b	48 89 44 24 20	 mov	 QWORD PTR tn$[rsp], rax

; 290  : 
; 291  :     memset(tn, 0, sizeof(struct TCPNJE));

  00060	48 8b 7c 24 20	 mov	 rdi, QWORD PTR tn$[rsp]
  00065	33 c0		 xor	 eax, eax
  00067	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  0006c	f3 aa		 rep stosb

; 292  : 
; 293  :     memcpy(tn->blockname, TCPNJE_VERSION, sizeof(tn->blockname));

  0006e	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  00073	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR $SG159380
  0007a	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 294  : 
; 295  :     tn->dev = dev;

  0007e	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  00083	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00088	48 89 08	 mov	 QWORD PTR [rax], rcx

; 296  : 
; 297  :     return 0;

  0008b	33 c0		 xor	 eax, eax
$LN1@tcpnje_all:

; 298  : }

  0008d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00091	5f		 pop	 rdi
  00092	c3		 ret	 0
tcpnje_alloc_device ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
tn$ = 32
dev$ = 64
tcpnje_clean_device PROC

; 217  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 218  :     struct TCPNJE *tn;
; 219  : 
; 220  :     if (!dev)

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0000f	75 05		 jne	 SHORT $LN2@tcpnje_cle

; 221  :     {
; 222  :         /*
; 223  :          * Shouldn't happen.. But during shutdown, some weird
; 224  :          * things happen !
; 225  :          */
; 226  :         return;

  00011	e9 53 01 00 00	 jmp	 $LN1@tcpnje_cle
$LN2@tcpnje_cle:

; 227  :     }
; 228  : 
; 229  :     tn = (struct TCPNJE *) dev->commadpt;

  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0001b	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00022	48 89 44 24 20	 mov	 QWORD PTR tn$[rsp], rax

; 230  : 
; 231  :     if (tn != NULL)

  00027	48 83 7c 24 20
	00		 cmp	 QWORD PTR tn$[rsp], 0
  0002d	0f 84 1e 01 00
	00		 je	 $LN3@tcpnje_cle

; 232  :     {
; 233  :         if (tn->ttcpasbuf.base.address != NULL)

  00033	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  00038	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  00040	74 22		 je	 SHORT $LN5@tcpnje_cle

; 234  :         {
; 235  :             free(tn->ttcpasbuf.base.address);

  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  00047	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 236  :             tn->ttcpasbuf.base.address = NULL;

  00054	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  00059	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0
$LN5@tcpnje_cle:

; 237  :         }
; 238  :         if (tn->ttcactbuf.base.address != NULL)

  00064	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  00069	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0006e	74 1c		 je	 SHORT $LN6@tcpnje_cle

; 239  :         {
; 240  :             free(tn->ttcactbuf.base.address);

  00070	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  00075	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 241  :             tn->ttcactbuf.base.address = NULL;

  0007f	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  00084	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
$LN6@tcpnje_cle:

; 242  :         }
; 243  :         if (tn->tcpinbuf.base.address != NULL)

  0008c	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  00091	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00099	74 22		 je	 SHORT $LN7@tcpnje_cle

; 244  :         {
; 245  :             free(tn->tcpinbuf.base.address);

  0009b	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  000a0	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 246  :             tn->tcpinbuf.base.address = NULL;

  000ad	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  000b2	48 c7 80 b8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+184], 0
$LN7@tcpnje_cle:

; 247  :         }
; 248  :         if (tn->tcpoutbuf.base.address != NULL)

  000bd	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  000c2	48 83 b8 e0 00
	00 00 00	 cmp	 QWORD PTR [rax+224], 0
  000ca	74 22		 je	 SHORT $LN8@tcpnje_cle

; 249  :         {
; 250  :             free(tn->tcpoutbuf.base.address);

  000cc	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  000d1	48 8b 88 e0 00
	00 00		 mov	 rcx, QWORD PTR [rax+224]
  000d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 251  :             tn->tcpoutbuf.base.address = NULL;

  000de	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  000e3	48 c7 80 e0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+224], 0
$LN8@tcpnje_cle:

; 252  :         }
; 253  :         /* release the TCPNJE lock */
; 254  :         release_lock(&tn->lock);

  000ee	48 8b 44 24 20	 mov	 rax, QWORD PTR tn$[rsp]
  000f3	48 83 c0 60	 add	 rax, 96			; 00000060H
  000f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159365
  000fe	48 8b c8	 mov	 rcx, rax
  00101	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 255  : 
; 256  :         free(tn);

  00107	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tn$[rsp]
  0010c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 257  : 
; 258  :         dev->commadpt = NULL;

  00112	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00117	48 c7 80 68 11
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4456], 0

; 259  : 
; 260  :         if (dev->ccwtrace)

  00122	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00127	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0012d	c1 e8 0f	 shr	 eax, 15
  00130	83 e0 01	 and	 eax, 1
  00133	85 c0		 test	 eax, eax
  00135	74 18		 je	 SHORT $LN9@tcpnje_cle

; 261  :         {
; 262  :             logmsg("HHCTN104D %4.4X:TCPNJE - control block freed\n",

  00137	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0013c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00140	8b d0		 mov	 edx, eax
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159367
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN9@tcpnje_cle:

; 263  :                     dev->devnum);
; 264  :         }
; 265  :     }

  0014f	eb 18		 jmp	 SHORT $LN4@tcpnje_cle
$LN3@tcpnje_cle:

; 266  :     else
; 267  :     {
; 268  :         logmsg("HHCTN023E %4.4X:TCPNJE - control block not freed : not allocated\n",

  00151	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00156	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0015a	8b d0		 mov	 edx, eax
  0015c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159368
  00163	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN4@tcpnje_cle:
$LN1@tcpnje_cle:

; 269  :                 dev->devnum);
; 270  :     }
; 271  :     return;
; 272  : }

  00169	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0016d	c3		 ret	 0
tcpnje_clean_device ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
i$ = 32
string$ = 64
length$ = 72
ebcdic$ = 80
guest_to_host_string PROC

; 196  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 197  :     u_int i;
; 198  : 
; 199  :     for (i = 0; i < length - 1; i++)

  00013	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0001b	eb 0a		 jmp	 SHORT $LN4@guest_to_h
$LN2@guest_to_h:
  0001d	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00021	ff c0		 inc	 eax
  00023	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@guest_to_h:
  00027	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0002b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR length$[rsp]
  00030	48 ff c9	 dec	 rcx
  00033	48 3b c1	 cmp	 rax, rcx
  00036	73 6b		 jae	 SHORT $LN3@guest_to_h

; 200  :     {
; 201  :         string[i] = guest_to_host(ebcdic[i]);

  00038	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ebcdic$[rsp]
  00041	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_guest_to_host
  0004b	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  0004f	48 8b 54 24 40	 mov	 rdx, QWORD PTR string$[rsp]
  00054	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 202  : 
; 203  :         if (string[i] == ' ')

  00057	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0005b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR string$[rsp]
  00060	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00064	83 f8 20	 cmp	 eax, 32			; 00000020H
  00067	75 0f		 jne	 SHORT $LN5@guest_to_h

; 204  :             string[i] = '\0';

  00069	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0006d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR string$[rsp]
  00072	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
  00076	eb 26		 jmp	 SHORT $LN6@guest_to_h
$LN5@guest_to_h:

; 205  :         else if (!isprint(string[i]))

  00078	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0007c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR string$[rsp]
  00081	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00085	8b c8		 mov	 ecx, eax
  00087	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isprint
  0008d	85 c0		 test	 eax, eax
  0008f	75 0d		 jne	 SHORT $LN7@guest_to_h

; 206  :             string[i] = '.';

  00091	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00095	48 8b 4c 24 40	 mov	 rcx, QWORD PTR string$[rsp]
  0009a	c6 04 01 2e	 mov	 BYTE PTR [rcx+rax], 46	; 0000002eH
$LN7@guest_to_h:
$LN6@guest_to_h:

; 207  :     }

  0009e	e9 7a ff ff ff	 jmp	 $LN2@guest_to_h
$LN3@guest_to_h:

; 208  : 
; 209  :     string[length - 1] = '\0';

  000a3	48 8b 44 24 48	 mov	 rax, QWORD PTR length$[rsp]
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR string$[rsp]
  000ad	48 03 c8	 add	 rcx, rax
  000b0	48 8b c1	 mov	 rax, rcx
  000b3	c6 40 ff 00	 mov	 BYTE PTR [rax-1], 0

; 210  : 
; 211  :     return string;

  000b7	48 8b 44 24 40	 mov	 rax, QWORD PTR string$[rsp]

; 212  : }

  000bc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c0	c3		 ret	 0
guest_to_host_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tcpnje.c
_TEXT	SEGMENT
character$ = 48
j$ = 56
i$ = 64
tn$ = 72
txt$ = 96
dev$ = 104
bfr$ = 112
sz$ = 120
logdump	PROC

; 143  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 144  :     struct TCPNJE *tn;
; 145  :     size_t i, j;
; 146  :     BYTE character;
; 147  : 
; 148  :     tn = (struct TCPNJE *) dev->commadpt;

  00018	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0001d	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00024	48 89 44 24 48	 mov	 QWORD PTR tn$[rsp], rax

; 149  : 
; 150  :     if (!(dev->ccwtrace && (tn->trace & 8192)) && !(tn->debug & 8192))

  00029	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0002e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00034	c1 e8 0f	 shr	 eax, 15
  00037	83 e0 01	 and	 eax, 1
  0003a	85 c0		 test	 eax, eax
  0003c	74 14		 je	 SHORT $LN15@logdump
  0003e	48 8b 44 24 48	 mov	 rax, QWORD PTR tn$[rsp]
  00043	8b 80 4c 01 00
	00		 mov	 eax, DWORD PTR [rax+332]
  00049	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  0004e	85 c0		 test	 eax, eax
  00050	75 19		 jne	 SHORT $LN14@logdump
$LN15@logdump:
  00052	48 8b 44 24 48	 mov	 rax, QWORD PTR tn$[rsp]
  00057	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  0005d	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00062	85 c0		 test	 eax, eax
  00064	75 05		 jne	 SHORT $LN14@logdump

; 151  :     {
; 152  :         return;

  00066	e9 f9 01 00 00	 jmp	 $LN1@logdump
$LN14@logdump:

; 153  :     }
; 154  : 
; 155  :     logmsg("HHCTN101D %4.4X:%s\n",

  0006b	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00070	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00074	4c 8b 44 24 60	 mov	 r8, QWORD PTR txt$[rsp]
  00079	8b d0		 mov	 edx, eax
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159310
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg

; 156  :             dev->devnum, txt);
; 157  :     logmsg("HHCTN102D %4.4X:%s : Dump of %d (%x) byte(s)\n",

  00088	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0008d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00091	8b 4c 24 78	 mov	 ecx, DWORD PTR sz$[rsp]
  00095	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00099	44 8b 4c 24 78	 mov	 r9d, DWORD PTR sz$[rsp]
  0009e	4c 8b 44 24 60	 mov	 r8, QWORD PTR txt$[rsp]
  000a3	8b d0		 mov	 edx, eax
  000a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159311
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg

; 158  :             dev->devnum, txt, (int)sz, (int)sz);
; 159  :     for(i = 0; i < sz; i += 16)

  000b2	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000bb	eb 0e		 jmp	 SHORT $LN4@logdump
$LN2@logdump:
  000bd	48 8b 44 24 40	 mov	 rax, QWORD PTR i$[rsp]
  000c2	48 83 c0 10	 add	 rax, 16
  000c6	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax
$LN4@logdump:
  000cb	48 8b 44 24 78	 mov	 rax, QWORD PTR sz$[rsp]
  000d0	48 39 44 24 40	 cmp	 QWORD PTR i$[rsp], rax
  000d5	0f 83 89 01 00
	00		 jae	 $LN3@logdump

; 160  :     {
; 161  :         logmsg("HHCTN103D %4.4X:%s : %4.4X:",

  000db	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  000e0	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  000e4	44 8b 4c 24 40	 mov	 r9d, DWORD PTR i$[rsp]
  000e9	4c 8b 44 24 60	 mov	 r8, QWORD PTR txt$[rsp]
  000ee	8b d0		 mov	 edx, eax
  000f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159312
  000f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg

; 162  :                 dev->devnum, txt, (unsigned int)i);
; 163  :         for(j = 0; (j < 16) && ((i + j) < sz); j++)

  000fd	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR j$[rsp], 0
  00106	eb 0d		 jmp	 SHORT $LN7@logdump
$LN5@logdump:
  00108	48 8b 44 24 38	 mov	 rax, QWORD PTR j$[rsp]
  0010d	48 ff c0	 inc	 rax
  00110	48 89 44 24 38	 mov	 QWORD PTR j$[rsp], rax
$LN7@logdump:
  00115	48 83 7c 24 38
	10		 cmp	 QWORD PTR j$[rsp], 16
  0011b	73 65		 jae	 SHORT $LN6@logdump
  0011d	48 8b 44 24 38	 mov	 rax, QWORD PTR j$[rsp]
  00122	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  00127	48 03 c8	 add	 rcx, rax
  0012a	48 8b c1	 mov	 rax, rcx
  0012d	48 3b 44 24 78	 cmp	 rax, QWORD PTR sz$[rsp]
  00132	73 4e		 jae	 SHORT $LN6@logdump

; 164  :         {
; 165  :             if ((j % 4) == 0)

  00134	33 d2		 xor	 edx, edx
  00136	48 8b 44 24 38	 mov	 rax, QWORD PTR j$[rsp]
  0013b	b9 04 00 00 00	 mov	 ecx, 4
  00140	48 f7 f1	 div	 rcx
  00143	48 8b c2	 mov	 rax, rdx
  00146	48 85 c0	 test	 rax, rax
  00149	75 0d		 jne	 SHORT $LN16@logdump

; 166  :             {
; 167  :                 logmsg(" ");

  0014b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159314
  00152	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN16@logdump:

; 168  :             }
; 169  :             logmsg("%2.2X", bfr[i + j]);

  00158	48 8b 44 24 38	 mov	 rax, QWORD PTR j$[rsp]
  0015d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  00162	48 03 c8	 add	 rcx, rax
  00165	48 8b c1	 mov	 rax, rcx
  00168	48 8b 4c 24 70	 mov	 rcx, QWORD PTR bfr$[rsp]
  0016d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00171	8b d0		 mov	 edx, eax
  00173	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159315
  0017a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg

; 170  :         }

  00180	eb 86		 jmp	 SHORT $LN5@logdump
$LN6@logdump:

; 171  :         for(; j < 17; j++)

  00182	eb 0d		 jmp	 SHORT $LN10@logdump
$LN8@logdump:
  00184	48 8b 44 24 38	 mov	 rax, QWORD PTR j$[rsp]
  00189	48 ff c0	 inc	 rax
  0018c	48 89 44 24 38	 mov	 QWORD PTR j$[rsp], rax
$LN10@logdump:
  00191	48 83 7c 24 38
	11		 cmp	 QWORD PTR j$[rsp], 17
  00197	73 33		 jae	 SHORT $LN9@logdump

; 172  :         {
; 173  :             if ((j % 4) == 0)

  00199	33 d2		 xor	 edx, edx
  0019b	48 8b 44 24 38	 mov	 rax, QWORD PTR j$[rsp]
  001a0	b9 04 00 00 00	 mov	 ecx, 4
  001a5	48 f7 f1	 div	 rcx
  001a8	48 8b c2	 mov	 rax, rdx
  001ab	48 85 c0	 test	 rax, rax
  001ae	75 0d		 jne	 SHORT $LN17@logdump

; 174  :             {
; 175  :                 logmsg(" ");

  001b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159317
  001b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
$LN17@logdump:

; 176  :             }
; 177  :             logmsg("  ");

  001bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159318
  001c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg

; 178  :         }

  001ca	eb b8		 jmp	 SHORT $LN8@logdump
$LN9@logdump:

; 179  :         for(j = 0; (j < 16) && ((i + j) < sz); j++)

  001cc	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR j$[rsp], 0
  001d5	eb 0d		 jmp	 SHORT $LN13@logdump
$LN11@logdump:
  001d7	48 8b 44 24 38	 mov	 rax, QWORD PTR j$[rsp]
  001dc	48 ff c0	 inc	 rax
  001df	48 89 44 24 38	 mov	 QWORD PTR j$[rsp], rax
$LN13@logdump:
  001e4	48 83 7c 24 38
	10		 cmp	 QWORD PTR j$[rsp], 16
  001ea	73 66		 jae	 SHORT $LN12@logdump
  001ec	48 8b 44 24 38	 mov	 rax, QWORD PTR j$[rsp]
  001f1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  001f6	48 03 c8	 add	 rcx, rax
  001f9	48 8b c1	 mov	 rax, rcx
  001fc	48 3b 44 24 78	 cmp	 rax, QWORD PTR sz$[rsp]
  00201	73 4f		 jae	 SHORT $LN12@logdump

; 180  :         {
; 181  :             character = guest_to_host(bfr[i + j]);

  00203	48 8b 44 24 38	 mov	 rax, QWORD PTR j$[rsp]
  00208	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  0020d	48 03 c8	 add	 rcx, rax
  00210	48 8b c1	 mov	 rax, rcx
  00213	48 8b 4c 24 70	 mov	 rcx, QWORD PTR bfr$[rsp]
  00218	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  0021c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_guest_to_host
  00222	88 44 24 30	 mov	 BYTE PTR character$[rsp], al

; 182  :             if (!isprint(character)) character = '.';

  00226	0f b6 44 24 30	 movzx	 eax, BYTE PTR character$[rsp]
  0022b	8b c8		 mov	 ecx, eax
  0022d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isprint
  00233	85 c0		 test	 eax, eax
  00235	75 05		 jne	 SHORT $LN18@logdump
  00237	c6 44 24 30 2e	 mov	 BYTE PTR character$[rsp], 46 ; 0000002eH
$LN18@logdump:

; 183  :             logmsg("%c", character);

  0023c	0f b6 44 24 30	 movzx	 eax, BYTE PTR character$[rsp]
  00241	8b d0		 mov	 edx, eax
  00243	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159320
  0024a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg

; 184  :         }

  00250	eb 85		 jmp	 SHORT $LN11@logdump
$LN12@logdump:

; 185  :         logmsg("\n");

  00252	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159321
  00259	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg

; 186  :     }

  0025f	e9 59 fe ff ff	 jmp	 $LN2@logdump
$LN3@logdump:
$LN1@logdump:

; 187  : }

  00264	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00268	c3		 ret	 0
logdump	ENDP
_TEXT	ENDS
END
