; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG160331 DB	'none', 00H
	ORG $+3
$SG160332 DB	'index', 00H
	ORG $+2
$SG160333 DB	'count', 00H
	ORG $+2
$SG160334 DB	'key', 00H
$SG160335 DB	'data', 00H
	ORG $+3
$SG160336 DB	'eot', 00H
$SG161457 DB	'info', 00H
	ORG $+3
$SG161458 DB	'cpu', 00H
$SG161461 DB	'msg', 00H
$SG161459 DB	'traceopt', 00H
	ORG $+3
$SG161460 DB	'count', 00H
	ORG $+2
$SG161465 DB	'opcode', 00H
	ORG $+5
$SG161462 DB	'storage', 00H
$SG161463 DB	'date', 00H
	ORG $+3
$SG161464 DB	'time', 00H
	ORG $+3
$SG161466 DB	'msglvl', 00H
	ORG $+1
$SG161467 DB	'unit', 00H
	ORG $+3
$SG161468 DB	'codepage', 00H
_DATA	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
?hbuf_end@?4??print_op_stor@@9@9 DB 00H			; `print_op_stor'::`5'::hbuf_end
	DB	02H
	DB	04H
	DB	06H
	DB	08H
	DB	0bH
	DB	0dH
	DB	0fH
	DB	011H
	DB	014H
	DB	016H
	DB	018H
	DB	01aH
	DB	01dH
	DB	01fH
	DB	021H
	DB	023H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	_vsnprintf_s_l
PUBLIC	_vsnprintf_s
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	store_dw_noswap
PUBLIC	main
PUBLIC	__real@4059000000000000
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp_isprint:PROC
EXTRN	__imp_toupper:PROC
EXTRN	__imp__errno:PROC
EXTRN	strchr:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp_strpbrk:PROC
EXTRN	__imp_IsDebuggerPresent:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_realloc:PROC
EXTRN	__imp_exit:PROC
EXTRN	_byteswap_uint64:PROC
EXTRN	__imp_isatty:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_fopen:PROC
EXTRN	__imp_fread:PROC
EXTRN	__imp__fseeki64:PROC
EXTRN	__imp__ftelli64:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp___stdio_common_vsnprintf_s:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	__imp_fileno:PROC
EXTRN	__imp__difftime64:PROC
EXTRN	__imp__gmtime64:PROC
EXTRN	__imp__mktime64:PROC
EXTRN	__imp__time64:PROC
EXTRN	__imp_strlcpy:PROC
EXTRN	__imp_strlcat:PROC
EXTRN	__imp_timeval_subtract:PROC
EXTRN	__imp_trimloc:PROC
EXTRN	__imp_FormatTIMEVAL:PROC
EXTRN	__imp_fmt_S64:PROC
EXTRN	__imp_initialize_utility:PROC
EXTRN	__imp_rtrim:PROC
EXTRN	__imp_is_numeric:PROC
EXTRN	__imp_is_hex:PROC
EXTRN	__imp_is_hex_l:PROC
EXTRN	__imp_ptyp2short:PROC
EXTRN	__imp_do_make_psw64:PROC
EXTRN	__imp_PIC2Name:PROC
EXTRN	__imp_order2name:PROC
EXTRN	__imp_perc2name:PROC
EXTRN	__imp_FormatORB:PROC
EXTRN	__imp_are_big_endian:PROC
EXTRN	__imp_tf_are_swaps_needed:PROC
EXTRN	__imp_tf_swap_sys:PROC
EXTRN	__imp_tf_swap_hdr:PROC
EXTRN	__imp_tf_swap_rec:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_w32_fprintf:PROC
EXTRN	__imp_w32_fclose:PROC
EXTRN	__imp_valid_codepage_name:PROC
EXTRN	__imp_set_codepage:PROC
EXTRN	__imp_guest_to_host:PROC
EXTRN	__imp_str_guest_to_host:PROC
EXTRN	__imp_prt_guest_to_host:PROC
EXTRN	__imp_iprint_router_func:PROC
EXTRN	__imp_txf_why_str:PROC
EXTRN	__imp_the_real_panel_command:PROC
EXTRN	__imp_getopt_long:PROC
EXTRN	__imp_default_sns:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_logmsg:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memcmp:PROC
EXTRN	__imp_sysblk:BYTE
EXTRN	__imp_extgui:DWORD
EXTRN	__imp_opterr:DWORD
EXTRN	__imp_optind:DWORD
EXTRN	__imp_optarg:QWORD
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
pgm	DQ	01H DUP (?)
inf	DQ	01H DUP (?)
arg_errs DD	01H DUP (?)
info_only DB	01H DUP (?)
	ALIGN	4

regsfirst DB	01H DUP (?)
	ALIGN	4

noregs	DB	01H DUP (?)
	ALIGN	4

doendswap DB	01H DUP (?)
	ALIGN	4

out_istty DB	01H DUP (?)
	ALIGN	4

err_istty DB	01H DUP (?)
	ALIGN	8

filesize DQ	01H DUP (?)
cpu_map	DQ	01H DUP (?)
recnum	DQ	01H DUP (?)
fromrec	DQ	01H DUP (?)
totins	DQ	01H DUP (?)
totios	DQ	01H DUP (?)
pMsgMOPT DQ	01H DUP (?)
nMsgMOPT DD	01H DUP (?)
	ALIGN	8

pStorMOPT DQ	01H DUP (?)
nStorMOPT DD	01H DUP (?)
	ALIGN	8

pInstMOPT DQ	01H DUP (?)
nInstMOPT DD	01H DUP (?)
	ALIGN	8

pUnitMOPT DQ	01H DUP (?)
nUnitMOPT DD	01H DUP (?)
	ALIGN	8

beg_tim	DQ	01H DUP (?)
end_tim	DQ	01H DUP (?)
beg_dat	DQ	01H DUP (?)
end_dat	DQ	01H DUP (?)
prvcpuad DW	01H DUP (?)
	ALIGN	4

prvdevnum DW	01H DUP (?)
	ALIGN	4

pathname DB	0104H DUP (?)
iobuff	DB	010000H DUP (?)
all_recs DB	09a704H DUP (?)
ptyp_strs DB	0140H DUP (?)
?max_past@?2??is_time_wanted@@9@9 DQ 01H DUP (?)	; `is_time_wanted'::`3'::max_past
?psw_str@?1??fmt_psw_str@@9@9 DB 040H DUP (?)		; `fmt_psw_str'::`2'::psw_str
?psw_inst@?1??fmt_psw_inst_str@@9@9 DB 040H DUP (?)	; `fmt_psw_inst_str'::`2'::psw_inst
$SG159948 DB	01H DUP (?)
	ALIGN	4

?mnemonic_etc@?1??fmt_inst_name@@9@9 DB 080H DUP (?)	; `fmt_inst_name'::`2'::mnemonic_etc
$SG160175 DB	01H DUP (?)
	ALIGN	4

?both_buf@?1??fmtdata@@9@9 DB 060H DUP (?)		; `fmtdata'::`2'::both_buf
$SG160774 DB	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$_vsnprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$_vsnprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sscanf
pdata	ENDS
pdata	SEGMENT
$pdata$difftime DD imagerel difftime
	DD	imagerel difftime+35
	DD	imagerel $unwind$difftime
$pdata$gmtime DD imagerel gmtime
	DD	imagerel gmtime+25
	DD	imagerel $unwind$gmtime
$pdata$mktime DD imagerel mktime
	DD	imagerel mktime+25
	DD	imagerel $unwind$mktime
$pdata$time DD	imagerel time
	DD	imagerel time+25
	DD	imagerel $unwind$time
$pdata$DebuggerTrace DD imagerel DebuggerTrace
	DD	imagerel DebuggerTrace+247
	DD	imagerel $unwind$DebuggerTrace
$pdata$show_usage DD imagerel show_usage
	DD	imagerel show_usage+157
	DD	imagerel $unwind$show_usage
$pdata$show_file_progress DD imagerel show_file_progress
	DD	imagerel show_file_progress+482
	DD	imagerel $unwind$show_file_progress
$pdata$gotmask DD imagerel gotmask
	DD	imagerel gotmask+1541
	DD	imagerel $unwind$gotmask
$pdata$recsize DD imagerel recsize
	DD	imagerel recsize+1541
	DD	imagerel $unwind$recsize
$pdata$all_recs_ptr DD imagerel all_recs_ptr
	DD	imagerel all_recs_ptr+3177
	DD	imagerel $unwind$all_recs_ptr
$pdata$ptyp_str DD imagerel ptyp_str
	DD	imagerel ptyp_str+43
	DD	imagerel $unwind$ptyp_str
$pdata$tf_store_psw DD imagerel tf_store_psw
	DD	imagerel tf_store_psw+307
	DD	imagerel $unwind$tf_store_psw
$pdata$is_recnum_wanted DD imagerel is_recnum_wanted
	DD	imagerel is_recnum_wanted+86
	DD	imagerel $unwind$is_recnum_wanted
$pdata$is_msgnum_wanted DD imagerel is_msgnum_wanted
	DD	imagerel is_msgnum_wanted+86
	DD	imagerel $unwind$is_msgnum_wanted
$pdata$is_cpu_wanted DD imagerel is_cpu_wanted
	DD	imagerel is_cpu_wanted+118
	DD	imagerel $unwind$is_cpu_wanted
$pdata$is_time_wanted DD imagerel is_time_wanted
	DD	imagerel is_time_wanted+198
	DD	imagerel $unwind$is_time_wanted
$pdata$is_wanted_storage DD imagerel is_wanted_storage
	DD	imagerel is_wanted_storage+195
	DD	imagerel $unwind$is_wanted_storage
$pdata$is_wanted_operand DD imagerel is_wanted_operand
	DD	imagerel is_wanted_operand+239
	DD	imagerel $unwind$is_wanted_operand
$pdata$is_wanted_tf02326 DD imagerel is_wanted_tf02326
	DD	imagerel is_wanted_tf02326+210
	DD	imagerel $unwind$is_wanted_tf02326
$pdata$is_wanted_opcode DD imagerel is_wanted_opcode
	DD	imagerel is_wanted_opcode+243
	DD	imagerel $unwind$is_wanted_opcode
$pdata$is_wanted DD imagerel is_wanted
	DD	imagerel is_wanted+112
	DD	imagerel $unwind$is_wanted
$pdata$is_devnum_wanted DD imagerel is_devnum_wanted
	DD	imagerel is_devnum_wanted+224
	DD	imagerel $unwind$is_devnum_wanted
$pdata$tf_do_blank_sep DD imagerel tf_do_blank_sep
	DD	imagerel tf_do_blank_sep+114
	DD	imagerel $unwind$tf_do_blank_sep
$pdata$tf_dev_do_blank_sep DD imagerel tf_dev_do_blank_sep
	DD	imagerel tf_dev_do_blank_sep+119
	DD	imagerel $unwind$tf_dev_do_blank_sep
$pdata$print_TFSYS DD imagerel print_TFSYS
	DD	imagerel print_TFSYS+1549
	DD	imagerel $unwind$print_TFSYS
$pdata$print_gr_regs DD imagerel print_gr_regs
	DD	imagerel print_gr_regs+875
	DD	imagerel $unwind$print_gr_regs
$pdata$print_cr_regs DD imagerel print_cr_regs
	DD	imagerel print_cr_regs+841
	DD	imagerel $unwind$print_cr_regs
$pdata$print_ar_regs DD imagerel print_ar_regs
	DD	imagerel print_ar_regs+519
	DD	imagerel $unwind$print_ar_regs
$pdata$print_fpr_regs DD imagerel print_fpr_regs
	DD	imagerel print_fpr_regs+1240
	DD	imagerel $unwind$print_fpr_regs
$pdata$print_fpc_reg DD imagerel print_fpc_reg
	DD	imagerel print_fpc_reg+244
	DD	imagerel $unwind$print_fpc_reg
$pdata$print_all_available_regs DD imagerel print_all_available_regs
	DD	imagerel print_all_available_regs+363
	DD	imagerel $unwind$print_all_available_regs
$pdata$fmt_psw_str DD imagerel fmt_psw_str
	DD	imagerel fmt_psw_str+604
	DD	imagerel $unwind$fmt_psw_str
$pdata$fmt_psw_inst_str DD imagerel fmt_psw_inst_str
	DD	imagerel fmt_psw_inst_str+599
	DD	imagerel $unwind$fmt_psw_inst_str
$pdata$print_800_wait_state_psw DD imagerel print_800_wait_state_psw
	DD	imagerel print_800_wait_state_psw+288
	DD	imagerel $unwind$print_800_wait_state_psw
$pdata$print_801_program_interrupt DD imagerel print_801_program_interrupt
	DD	imagerel print_801_program_interrupt+601
	DD	imagerel $unwind$print_801_program_interrupt
$pdata$print_802_per_event DD imagerel print_802_per_event
	DD	imagerel print_802_per_event+593
	DD	imagerel $unwind$print_802_per_event
$pdata$print_803_pgm_int_loop DD imagerel print_803_pgm_int_loop
	DD	imagerel print_803_pgm_int_loop+268
	DD	imagerel $unwind$print_803_pgm_int_loop
$pdata$print_804_io_rupt_370 DD imagerel print_804_io_rupt_370
	DD	imagerel print_804_io_rupt_370+626
	DD	imagerel $unwind$print_804_io_rupt_370
$pdata$print_807_machine_check_interrupt DD imagerel print_807_machine_check_interrupt
	DD	imagerel print_807_machine_check_interrupt+258
	DD	imagerel $unwind$print_807_machine_check_interrupt
$pdata$print_808_store_status DD imagerel print_808_store_status
	DD	imagerel print_808_store_status+241
	DD	imagerel $unwind$print_808_store_status
$pdata$print_809_disabled_wait DD imagerel print_809_disabled_wait
	DD	imagerel print_809_disabled_wait+268
	DD	imagerel $unwind$print_809_disabled_wait
$pdata$print_811_arch_mode DD imagerel print_811_arch_mode
	DD	imagerel print_811_arch_mode+268
	DD	imagerel $unwind$print_811_arch_mode
$pdata$print_812_vect_online_370 DD imagerel print_812_vect_online_370
	DD	imagerel print_812_vect_online_370+241
	DD	imagerel $unwind$print_812_vect_online_370
$pdata$print_840_ext_rupt DD imagerel print_840_ext_rupt
	DD	imagerel print_840_ext_rupt+768
	DD	imagerel $unwind$print_840_ext_rupt
$pdata$print_844_blkio_rupt DD imagerel print_844_blkio_rupt
	DD	imagerel print_844_blkio_rupt+394
	DD	imagerel $unwind$print_844_blkio_rupt
$pdata$print_845_blkio_ext_rupt DD imagerel print_845_blkio_ext_rupt
	DD	imagerel print_845_blkio_ext_rupt+419
	DD	imagerel $unwind$print_845_blkio_ext_rupt
$pdata$print_846_srvsig_ext_rupt DD imagerel print_846_srvsig_ext_rupt
	DD	imagerel print_846_srvsig_ext_rupt+256
	DD	imagerel $unwind$print_846_srvsig_ext_rupt
$pdata$fmt_inst_name DD imagerel fmt_inst_name
	DD	imagerel fmt_inst_name+53
	DD	imagerel $unwind$fmt_inst_name
$pdata$print_op_stor DD imagerel print_op_stor
	DD	imagerel print_op_stor+1737
	DD	imagerel $unwind$print_op_stor
$pdata$print_storage_lines DD imagerel print_storage_lines
	DD	imagerel print_storage_lines+535
	DD	imagerel $unwind$print_storage_lines
$pdata$print_806_io_rupt DD imagerel print_806_io_rupt
	DD	imagerel print_806_io_rupt+529
	DD	imagerel $unwind$print_806_io_rupt
$pdata$print_814_sigp DD imagerel print_814_sigp
	DD	imagerel print_814_sigp+621
	DD	imagerel $unwind$print_814_sigp
$pdata$fmtdata DD imagerel fmtdata
	DD	imagerel fmtdata+890
	DD	imagerel $unwind$fmtdata
$pdata$print_TF00423 DD imagerel print_TF00423
	DD	imagerel print_TF00423+384
	DD	imagerel $unwind$print_TF00423
$pdata$print_TF00424 DD imagerel print_TF00424
	DD	imagerel print_TF00424+304
	DD	imagerel $unwind$print_TF00424
$pdata$print_TF00425 DD imagerel print_TF00425
	DD	imagerel print_TF00425+289
	DD	imagerel $unwind$print_TF00425
$pdata$print_TF00426 DD imagerel print_TF00426
	DD	imagerel print_TF00426+304
	DD	imagerel $unwind$print_TF00426
$pdata$print_TF00427 DD imagerel print_TF00427
	DD	imagerel print_TF00427+289
	DD	imagerel $unwind$print_TF00427
$pdata$print_TF00428 DD imagerel print_TF00428
	DD	imagerel print_TF00428+304
	DD	imagerel $unwind$print_TF00428
$pdata$print_TF00429 DD imagerel print_TF00429
	DD	imagerel print_TF00429+345
	DD	imagerel $unwind$print_TF00429
$pdata$print_TF00430 DD imagerel print_TF00430
	DD	imagerel print_TF00430+512
	DD	imagerel $unwind$print_TF00430
$pdata$print_TF00431 DD imagerel print_TF00431
	DD	imagerel print_TF00431+304
	DD	imagerel $unwind$print_TF00431
$pdata$print_TF00432 DD imagerel print_TF00432
	DD	imagerel print_TF00432+336
	DD	imagerel $unwind$print_TF00432
$pdata$print_TF00433 DD imagerel print_TF00433
	DD	imagerel print_TF00433+304
	DD	imagerel $unwind$print_TF00433
$pdata$print_TF00434 DD imagerel print_TF00434
	DD	imagerel print_TF00434+342
	DD	imagerel $unwind$print_TF00434
$pdata$print_TF00435 DD imagerel print_TF00435
	DD	imagerel print_TF00435+409
	DD	imagerel $unwind$print_TF00435
$pdata$print_TF00436 DD imagerel print_TF00436
	DD	imagerel print_TF00436+289
	DD	imagerel $unwind$print_TF00436
$pdata$print_TF00437 DD imagerel print_TF00437
	DD	imagerel print_TF00437+310
	DD	imagerel $unwind$print_TF00437
$pdata$print_TF00438 DD imagerel print_TF00438
	DD	imagerel print_TF00438+426
	DD	imagerel $unwind$print_TF00438
$pdata$print_TF00439 DD imagerel print_TF00439
	DD	imagerel print_TF00439+346
	DD	imagerel $unwind$print_TF00439
$pdata$print_TF00440 DD imagerel print_TF00440
	DD	imagerel print_TF00440+394
	DD	imagerel $unwind$print_TF00440
$pdata$print_TF00441 DD imagerel print_TF00441
	DD	imagerel print_TF00441+361
	DD	imagerel $unwind$print_TF00441
$pdata$print_TF00442 DD imagerel print_TF00442
	DD	imagerel print_TF00442+310
	DD	imagerel $unwind$print_TF00442
$pdata$print_TF00516 DD imagerel print_TF00516
	DD	imagerel print_TF00516+304
	DD	imagerel $unwind$print_TF00516
$pdata$print_TF00517 DD imagerel print_TF00517
	DD	imagerel print_TF00517+289
	DD	imagerel $unwind$print_TF00517
$pdata$print_TF00518 DD imagerel print_TF00518
	DD	imagerel print_TF00518+304
	DD	imagerel $unwind$print_TF00518
$pdata$print_TF00519 DD imagerel print_TF00519
	DD	imagerel print_TF00519+330
	DD	imagerel $unwind$print_TF00519
$pdata$print_TF00520 DD imagerel print_TF00520
	DD	imagerel print_TF00520+308
	DD	imagerel $unwind$print_TF00520
$pdata$print_TF01300 DD imagerel print_TF01300
	DD	imagerel print_TF01300+271
	DD	imagerel $unwind$print_TF01300
$pdata$print_TF01301 DD imagerel print_TF01301
	DD	imagerel print_TF01301+994
	DD	imagerel $unwind$print_TF01301
$pdata$print_TF01304 DD imagerel print_TF01304
	DD	imagerel print_TF01304+257
	DD	imagerel $unwind$print_TF01304
$pdata$print_TF01305 DD imagerel print_TF01305
	DD	imagerel print_TF01305+257
	DD	imagerel $unwind$print_TF01305
$pdata$print_TF01306 DD imagerel print_TF01306
	DD	imagerel print_TF01306+257
	DD	imagerel $unwind$print_TF01306
$pdata$print_TF01307 DD imagerel print_TF01307
	DD	imagerel print_TF01307+257
	DD	imagerel $unwind$print_TF01307
$pdata$print_TF01308 DD imagerel print_TF01308
	DD	imagerel print_TF01308+257
	DD	imagerel $unwind$print_TF01308
$pdata$print_TF01309 DD imagerel print_TF01309
	DD	imagerel print_TF01309+257
	DD	imagerel $unwind$print_TF01309
$pdata$print_TF01310 DD imagerel print_TF01310
	DD	imagerel print_TF01310+257
	DD	imagerel $unwind$print_TF01310
$pdata$print_TF01311 DD imagerel print_TF01311
	DD	imagerel print_TF01311+257
	DD	imagerel $unwind$print_TF01311
$pdata$print_TF01312 DD imagerel print_TF01312
	DD	imagerel print_TF01312+322
	DD	imagerel $unwind$print_TF01312
$pdata$print_TF01313 DD imagerel print_TF01313
	DD	imagerel print_TF01313+1938
	DD	imagerel $unwind$print_TF01313
$pdata$print_TF01315 DD imagerel print_TF01315
	DD	imagerel print_TF01315+618
	DD	imagerel $unwind$print_TF01315
$pdata$print_TF01316 DD imagerel print_TF01316
	DD	imagerel print_TF01316+569
	DD	imagerel $unwind$print_TF01316
$pdata$print_TF01317 DD imagerel print_TF01317
	DD	imagerel print_TF01317+646
	DD	imagerel $unwind$print_TF01317
$pdata$print_TF01318 DD imagerel print_TF01318
	DD	imagerel print_TF01318+271
	DD	imagerel $unwind$print_TF01318
$pdata$print_TF01320 DD imagerel print_TF01320
	DD	imagerel print_TF01320+257
	DD	imagerel $unwind$print_TF01320
$pdata$print_TF01321 DD imagerel print_TF01321
	DD	imagerel print_TF01321+257
	DD	imagerel $unwind$print_TF01321
$pdata$print_TF01329 DD imagerel print_TF01329
	DD	imagerel print_TF01329+257
	DD	imagerel $unwind$print_TF01329
$pdata$print_TF01330 DD imagerel print_TF01330
	DD	imagerel print_TF01330+257
	DD	imagerel $unwind$print_TF01330
$pdata$print_TF01331 DD imagerel print_TF01331
	DD	imagerel print_TF01331+257
	DD	imagerel $unwind$print_TF01331
$pdata$print_TF01332 DD imagerel print_TF01332
	DD	imagerel print_TF01332+257
	DD	imagerel $unwind$print_TF01332
$pdata$print_TF01333 DD imagerel print_TF01333
	DD	imagerel print_TF01333+271
	DD	imagerel $unwind$print_TF01333
$pdata$print_TF01334 DD imagerel print_TF01334
	DD	imagerel print_TF01334+342
	DD	imagerel $unwind$print_TF01334
$pdata$print_TF01336 DD imagerel print_TF01336
	DD	imagerel print_TF01336+307
	DD	imagerel $unwind$print_TF01336
$pdata$process_TF00800 DD imagerel process_TF00800
	DD	imagerel process_TF00800+88
	DD	imagerel $unwind$process_TF00800
$pdata$process_TF00801 DD imagerel process_TF00801
	DD	imagerel process_TF00801+88
	DD	imagerel $unwind$process_TF00801
$pdata$process_TF00802 DD imagerel process_TF00802
	DD	imagerel process_TF00802+88
	DD	imagerel $unwind$process_TF00802
$pdata$process_TF00803 DD imagerel process_TF00803
	DD	imagerel process_TF00803+88
	DD	imagerel $unwind$process_TF00803
$pdata$process_TF00804 DD imagerel process_TF00804
	DD	imagerel process_TF00804+88
	DD	imagerel $unwind$process_TF00804
$pdata$process_TF00806 DD imagerel process_TF00806
	DD	imagerel process_TF00806+88
	DD	imagerel $unwind$process_TF00806
$pdata$process_TF00807 DD imagerel process_TF00807
	DD	imagerel process_TF00807+88
	DD	imagerel $unwind$process_TF00807
$pdata$process_TF00808 DD imagerel process_TF00808
	DD	imagerel process_TF00808+88
	DD	imagerel $unwind$process_TF00808
$pdata$process_TF00809 DD imagerel process_TF00809
	DD	imagerel process_TF00809+88
	DD	imagerel $unwind$process_TF00809
$pdata$process_TF00811 DD imagerel process_TF00811
	DD	imagerel process_TF00811+88
	DD	imagerel $unwind$process_TF00811
$pdata$process_TF00812 DD imagerel process_TF00812
	DD	imagerel process_TF00812+88
	DD	imagerel $unwind$process_TF00812
$pdata$process_TF00814 DD imagerel process_TF00814
	DD	imagerel process_TF00814+88
	DD	imagerel $unwind$process_TF00814
$pdata$process_TF00840 DD imagerel process_TF00840
	DD	imagerel process_TF00840+88
	DD	imagerel $unwind$process_TF00840
$pdata$process_TF00844 DD imagerel process_TF00844
	DD	imagerel process_TF00844+88
	DD	imagerel $unwind$process_TF00844
$pdata$process_TF00845 DD imagerel process_TF00845
	DD	imagerel process_TF00845+88
	DD	imagerel $unwind$process_TF00845
$pdata$process_TF00846 DD imagerel process_TF00846
	DD	imagerel process_TF00846+88
	DD	imagerel $unwind$process_TF00846
$pdata$process_TF02269 DD imagerel process_TF02269
	DD	imagerel process_TF02269+423
	DD	imagerel $unwind$process_TF02269
$pdata$process_TF02324 DD imagerel process_TF02324
	DD	imagerel process_TF02324+795
	DD	imagerel $unwind$process_TF02324
$pdata$process_TF02326 DD imagerel process_TF02326
	DD	imagerel process_TF02326+299
	DD	imagerel $unwind$process_TF02326
$pdata$process_TF00423 DD imagerel process_TF00423
	DD	imagerel process_TF00423+108
	DD	imagerel $unwind$process_TF00423
$pdata$process_TF00424 DD imagerel process_TF00424
	DD	imagerel process_TF00424+108
	DD	imagerel $unwind$process_TF00424
$pdata$process_TF00425 DD imagerel process_TF00425
	DD	imagerel process_TF00425+108
	DD	imagerel $unwind$process_TF00425
$pdata$process_TF00426 DD imagerel process_TF00426
	DD	imagerel process_TF00426+108
	DD	imagerel $unwind$process_TF00426
$pdata$process_TF00427 DD imagerel process_TF00427
	DD	imagerel process_TF00427+108
	DD	imagerel $unwind$process_TF00427
$pdata$process_TF00428 DD imagerel process_TF00428
	DD	imagerel process_TF00428+108
	DD	imagerel $unwind$process_TF00428
$pdata$process_TF00429 DD imagerel process_TF00429
	DD	imagerel process_TF00429+108
	DD	imagerel $unwind$process_TF00429
$pdata$process_TF00430 DD imagerel process_TF00430
	DD	imagerel process_TF00430+108
	DD	imagerel $unwind$process_TF00430
$pdata$process_TF00431 DD imagerel process_TF00431
	DD	imagerel process_TF00431+108
	DD	imagerel $unwind$process_TF00431
$pdata$process_TF00432 DD imagerel process_TF00432
	DD	imagerel process_TF00432+108
	DD	imagerel $unwind$process_TF00432
$pdata$process_TF00433 DD imagerel process_TF00433
	DD	imagerel process_TF00433+108
	DD	imagerel $unwind$process_TF00433
$pdata$process_TF00434 DD imagerel process_TF00434
	DD	imagerel process_TF00434+108
	DD	imagerel $unwind$process_TF00434
$pdata$process_TF00435 DD imagerel process_TF00435
	DD	imagerel process_TF00435+108
	DD	imagerel $unwind$process_TF00435
$pdata$process_TF00436 DD imagerel process_TF00436
	DD	imagerel process_TF00436+108
	DD	imagerel $unwind$process_TF00436
$pdata$process_TF00437 DD imagerel process_TF00437
	DD	imagerel process_TF00437+108
	DD	imagerel $unwind$process_TF00437
$pdata$process_TF00438 DD imagerel process_TF00438
	DD	imagerel process_TF00438+108
	DD	imagerel $unwind$process_TF00438
$pdata$process_TF00439 DD imagerel process_TF00439
	DD	imagerel process_TF00439+108
	DD	imagerel $unwind$process_TF00439
$pdata$process_TF00440 DD imagerel process_TF00440
	DD	imagerel process_TF00440+108
	DD	imagerel $unwind$process_TF00440
$pdata$process_TF00441 DD imagerel process_TF00441
	DD	imagerel process_TF00441+108
	DD	imagerel $unwind$process_TF00441
$pdata$process_TF00442 DD imagerel process_TF00442
	DD	imagerel process_TF00442+108
	DD	imagerel $unwind$process_TF00442
$pdata$process_TF00516 DD imagerel process_TF00516
	DD	imagerel process_TF00516+108
	DD	imagerel $unwind$process_TF00516
$pdata$process_TF00517 DD imagerel process_TF00517
	DD	imagerel process_TF00517+108
	DD	imagerel $unwind$process_TF00517
$pdata$process_TF00518 DD imagerel process_TF00518
	DD	imagerel process_TF00518+108
	DD	imagerel $unwind$process_TF00518
$pdata$process_TF00519 DD imagerel process_TF00519
	DD	imagerel process_TF00519+108
	DD	imagerel $unwind$process_TF00519
$pdata$process_TF00520 DD imagerel process_TF00520
	DD	imagerel process_TF00520+108
	DD	imagerel $unwind$process_TF00520
$pdata$process_TF01300 DD imagerel process_TF01300
	DD	imagerel process_TF01300+108
	DD	imagerel $unwind$process_TF01300
$pdata$process_TF01301 DD imagerel process_TF01301
	DD	imagerel process_TF01301+108
	DD	imagerel $unwind$process_TF01301
$pdata$process_TF01304 DD imagerel process_TF01304
	DD	imagerel process_TF01304+108
	DD	imagerel $unwind$process_TF01304
$pdata$process_TF01305 DD imagerel process_TF01305
	DD	imagerel process_TF01305+108
	DD	imagerel $unwind$process_TF01305
$pdata$process_TF01306 DD imagerel process_TF01306
	DD	imagerel process_TF01306+108
	DD	imagerel $unwind$process_TF01306
$pdata$process_TF01307 DD imagerel process_TF01307
	DD	imagerel process_TF01307+108
	DD	imagerel $unwind$process_TF01307
$pdata$process_TF01308 DD imagerel process_TF01308
	DD	imagerel process_TF01308+108
	DD	imagerel $unwind$process_TF01308
$pdata$process_TF01309 DD imagerel process_TF01309
	DD	imagerel process_TF01309+108
	DD	imagerel $unwind$process_TF01309
$pdata$process_TF01310 DD imagerel process_TF01310
	DD	imagerel process_TF01310+108
	DD	imagerel $unwind$process_TF01310
$pdata$process_TF01311 DD imagerel process_TF01311
	DD	imagerel process_TF01311+108
	DD	imagerel $unwind$process_TF01311
$pdata$process_TF01312 DD imagerel process_TF01312
	DD	imagerel process_TF01312+108
	DD	imagerel $unwind$process_TF01312
$pdata$process_TF01313 DD imagerel process_TF01313
	DD	imagerel process_TF01313+108
	DD	imagerel $unwind$process_TF01313
$pdata$process_TF01315 DD imagerel process_TF01315
	DD	imagerel process_TF01315+108
	DD	imagerel $unwind$process_TF01315
$pdata$process_TF01316 DD imagerel process_TF01316
	DD	imagerel process_TF01316+108
	DD	imagerel $unwind$process_TF01316
$pdata$process_TF01317 DD imagerel process_TF01317
	DD	imagerel process_TF01317+108
	DD	imagerel $unwind$process_TF01317
$pdata$process_TF01318 DD imagerel process_TF01318
	DD	imagerel process_TF01318+108
	DD	imagerel $unwind$process_TF01318
$pdata$process_TF01320 DD imagerel process_TF01320
	DD	imagerel process_TF01320+108
	DD	imagerel $unwind$process_TF01320
$pdata$process_TF01321 DD imagerel process_TF01321
	DD	imagerel process_TF01321+108
	DD	imagerel $unwind$process_TF01321
$pdata$process_TF01329 DD imagerel process_TF01329
	DD	imagerel process_TF01329+108
	DD	imagerel $unwind$process_TF01329
$pdata$process_TF01330 DD imagerel process_TF01330
	DD	imagerel process_TF01330+108
	DD	imagerel $unwind$process_TF01330
$pdata$process_TF01331 DD imagerel process_TF01331
	DD	imagerel process_TF01331+108
	DD	imagerel $unwind$process_TF01331
$pdata$process_TF01332 DD imagerel process_TF01332
	DD	imagerel process_TF01332+108
	DD	imagerel $unwind$process_TF01332
$pdata$process_TF01333 DD imagerel process_TF01333
	DD	imagerel process_TF01333+108
	DD	imagerel $unwind$process_TF01333
$pdata$process_TF01334 DD imagerel process_TF01334
	DD	imagerel process_TF01334+108
	DD	imagerel $unwind$process_TF01334
$pdata$process_TF01336 DD imagerel process_TF01336
	DD	imagerel process_TF01336+108
	DD	imagerel $unwind$process_TF01336
$pdata$finish_reading_rec DD imagerel finish_reading_rec
	DD	imagerel finish_reading_rec+708
	DD	imagerel $unwind$finish_reading_rec
$pdata$process_args DD imagerel process_args
	DD	imagerel process_args+3359
	DD	imagerel $unwind$process_args
$pdata$main DD	imagerel $LN268
	DD	imagerel $LN268+5313
	DD	imagerel $unwind$main
$pdata$print_args DD imagerel print_args
	DD	imagerel print_args+414
	DD	imagerel $unwind$print_args
$pdata$parse_option_msglvl DD imagerel parse_option_msglvl
	DD	imagerel parse_option_msglvl+111
	DD	imagerel $unwind$parse_option_msglvl
$pdata$parse_option_cpu DD imagerel parse_option_cpu
	DD	imagerel parse_option_cpu+435
	DD	imagerel $unwind$parse_option_cpu
$pdata$parse_option_traceopt DD imagerel parse_option_traceopt
	DD	imagerel parse_option_traceopt+153
	DD	imagerel $unwind$parse_option_traceopt
$pdata$parse_option_count DD imagerel parse_option_count
	DD	imagerel parse_option_count+219
	DD	imagerel $unwind$parse_option_count
$pdata$parse_option_msg DD imagerel parse_option_msg
	DD	imagerel parse_option_msg+129
	DD	imagerel $unwind$parse_option_msg
$pdata$parse_option_storage DD imagerel parse_option_storage
	DD	imagerel parse_option_storage+133
	DD	imagerel $unwind$parse_option_storage
$pdata$parse_option_date DD imagerel parse_option_date
	DD	imagerel parse_option_date+267
	DD	imagerel $unwind$parse_option_date
$pdata$parse_option_time DD imagerel parse_option_time
	DD	imagerel parse_option_time+297
	DD	imagerel $unwind$parse_option_time
$pdata$parse_option_opcode DD imagerel parse_option_opcode
	DD	imagerel parse_option_opcode+133
	DD	imagerel $unwind$parse_option_opcode
$pdata$parse_option_unit DD imagerel parse_option_unit
	DD	imagerel parse_option_unit+129
	DD	imagerel $unwind$parse_option_unit
$pdata$parse_option_codepage DD imagerel parse_option_codepage
	DD	imagerel parse_option_codepage+65
	DD	imagerel $unwind$parse_option_codepage
$pdata$parse_tracefile DD imagerel parse_tracefile
	DD	imagerel parse_tracefile+723
	DD	imagerel $unwind$parse_tracefile
$pdata$time_zone_offset DD imagerel time_zone_offset
	DD	imagerel time_zone_offset+83
	DD	imagerel $unwind$time_zone_offset
$pdata$convert_opt_str DD imagerel convert_opt_str
	DD	imagerel convert_opt_str+351
	DD	imagerel $unwind$convert_opt_str
$pdata$parse_opt_str DD imagerel parse_opt_str
	DD	imagerel parse_opt_str+1767
	DD	imagerel $unwind$parse_opt_str
$pdata$parse_option_error DD imagerel parse_option_error
	DD	imagerel parse_option_error+124
	DD	imagerel $unwind$parse_option_error
$pdata$convert_storage_opt_str DD imagerel convert_storage_opt_str
	DD	imagerel convert_storage_opt_str+335
	DD	imagerel $unwind$convert_storage_opt_str
$pdata$parse_date_str DD imagerel parse_date_str
	DD	imagerel parse_date_str+814
	DD	imagerel $unwind$parse_date_str
$pdata$parse_time_str DD imagerel parse_time_str
	DD	imagerel parse_time_str+1093
	DD	imagerel $unwind$parse_time_str
$pdata$convert_opcode_opt_str DD imagerel convert_opcode_opt_str
	DD	imagerel convert_opcode_opt_str+423
	DD	imagerel $unwind$convert_opcode_opt_str
pdata	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
_DATA	SEGMENT
previnst DB	01H
?first_time@?1??finish_reading_rec@@9@9 DB 01H		; `finish_reading_rec'::`2'::first_time
	ORG $+5
torec	DQ	ffffffffffffffffH
$SG159101 DB	0aH, 00H
	ORG $+2
$SG159102 DB	'I', 00H
	ORG $+2
$SG159103 DB	'HHC03200%s Usage:  %s  [options...] tracefile', 0aH, 'HH'
	DB	'C03200I', 0aH, 'HHC03200I        [-i|--info]', 0aH, 'HHC03200'
	DB	'I        [-c|--cpu hh[[-hh][,hh]]', 0aH, 'HHC03200I        [-'
	DB	'r|--traceopt TRADITIONAL|REGSFIRST|NOREGS]', 0aH, 'HHC03200I '
	DB	'       [-n|--count nnnnnn[[-nnnnnn]|[.nnn]]', 0aH, 'HHC03200I'
	DB	'        [-e|--msg nnnnn[,nnnnn]', 0aH, 'HHC03200I        [-s|'
	DB	'--storage V|R:hhhhhh[[-hhhhhh]|[.hhh]]', 0aH, 'HHC03200I     '
	DB	'   [-d|--date YYYY/MM/DD-YYYY/MM/DD', 0aH, 'HHC03200I        '
	DB	'[-t|--time HH:MM:SS.nnnnnn-HH:MM:SS.nnnnnn', 0aH, 'HHC03200I '
	DB	'       [-o|--opcode hhhhhhhh[,hhxxhhxxhhhh]', 0aH, 'HHC03200I'
	DB	'        [-m|--msglvl xxxxx', 0aH, 'HHC03200I        [-u|--uni'
	DB	't uuuu[[-uuuu]|[.nnn]]', 0aH, 'HHC03200I        [-p|--codepag'
	DB	'e zzzzzzzz', 0aH, 'HHC03200I', 0aH, 'HHC03200I   -i   Print o'
	DB	'nly TFSYS header information then exit', 0aH, 'HHC03200I   -c'
	DB	'   Print only specified CPU(s)', 0aH, 'HHC03200I   -r   Print'
	DB	' registers trace option', 0aH, 'HHC03200I   -n   Print only r'
	DB	'ecords nnnnnn to nnnnnn (by count)', 0aH, 'HHC03200I   -e   P'
	DB	'rint only messages with specified message number', 0aH, 'HHC0'
	DB	'3200I   -s   Print only instructions that reference or modify'
	DB	0aH, 'HHC03200I        the specified ''V''irtual or ''R''eal s'
	DB	'torage range', 0aH, 'HHC03200I   -d   Print only records with'
	DB	'in specified date range', 0aH, 'HHC03200I   -t   Print only r'
	DB	'ecords within specified time range', 0aH, 'HHC03200I   -o   P'
	DB	'rint only specified instruction(s) (by opcode)', 0aH, 'HHC032'
	DB	'00I        Only as many bytes are checked as are specified', 0aH
	DB	'HHC03200I        Use ''x'' as wildcard for nibbles not to be '
	DB	'checked', 0aH, 'HHC03200I   -m   Modify Hercules ''msglvl'' s'
	DB	'etting', 0aH, 'HHC03200I   -u   Print only trace records for '
	DB	'specified I/O unit(s)', 0aH, 'HHC03200I   -p   Use EBCDIC/ASC'
	DB	'II codepage conversion table zzzzzzzz', 0aH, 00H
	ORG $+3
$SG159104 DB	'show_usage', 00H
	ORG $+1
$SG159106 DB	0aH, 00H
	ORG $+2
$SG159105 DB	'tfprint.c', 00H
	ORG $+2
$SG159119 DB	'ftell', 00H
	ORG $+2
$SG159120 DB	'E', 00H
	ORG $+2
$SG159121 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159122 DB	'show_file_progress', 00H
	ORG $+1
$SG159682 DB	0aH, 00H
	ORG $+2
$SG159123 DB	'tfprint.c', 00H
	ORG $+2
$SG159689 DB	0aH, 00H
	ORG $+2
$SG159126 DB	'PCT=%.0f', 0aH, 00H
	ORG $+2
$SG159707 DB	'I', 00H
	ORG $+2
$SG159130 DB	'%.0f%% of file processed...   [%s]', 0dH, 00H
$SG159711 DB	0aH, 00H
	ORG $+2
$SG159708 DB	'HHC03208%s Format-%c trace file created by: %s', 0aH, 00H
$SG159709 DB	'print_TFSYS', 00H
$SG159713 DB	'I', 00H
	ORG $+2
$SG159710 DB	'tfprint.c', 00H
	ORG $+2
$SG159712 DB	'began', 00H
	ORG $+2
$SG159717 DB	'I', 00H
	ORG $+2
$SG159714 DB	'HHC03209%s Trace %s: %s', 0aH, 00H
	ORG $+3
$SG159721 DB	'ended', 00H
	ORG $+2
$SG159722 DB	'I', 00H
	ORG $+2
$SG159715 DB	'print_TFSYS', 00H
$SG159728 DB	0aH, 00H
	ORG $+2
$SG159716 DB	'tfprint.c', 00H
	ORG $+2
$SG159726 DB	'%s%02X', 00H
	ORG $+1
$SG159729 DB	'BIG', 00H
$SG159718 DB	'HHC03211%s Trace count: ins=%s records, dev=%s records', 0aH
	DB	00H
$SG159719 DB	'print_TFSYS', 00H
$SG159732 DB	'I', 00H
	ORG $+2
$SG159720 DB	'tfprint.c', 00H
	ORG $+2
$SG159730 DB	'little', 00H
	ORG $+1
$SG159736 DB	'BIG', 00H
$SG159723 DB	'HHC03209%s Trace %s: %s', 0aH, 00H
	ORG $+3
$SG159737 DB	'little', 00H
	ORG $+1
$SG159739 DB	'I', 00H
	ORG $+2
$SG159724 DB	'print_TFSYS', 00H
$SG159743 DB	0aH, 00H
	ORG $+2
$SG159725 DB	'tfprint.c', 00H
	ORG $+2
$SG159731 DB	'file', 00H
	ORG $+3
$SG159744 DB	'W', 00H
	ORG $+2
$SG159733 DB	'HHC03221%s Endianness of %s = %s', 0aH, 00H
	ORG $+2
$SG159749 DB	'BIG', 00H
$SG159734 DB	'print_TFSYS', 00H
$SG159752 DB	'I', 00H
	ORG $+2
$SG159735 DB	'tfprint.c', 00H
	ORG $+2
$SG159738 DB	'host', 00H
	ORG $+3
$SG159750 DB	'little', 00H
	ORG $+1
$SG159756 DB	'BIG', 00H
$SG159740 DB	'HHC03221%s Endianness of %s = %s', 0aH, 00H
	ORG $+2
$SG159757 DB	'little', 00H
	ORG $+1
$SG159759 DB	'I', 00H
	ORG $+2
$SG159741 DB	'print_TFSYS', 00H
$SG159763 DB	'W', 00H
	ORG $+2
$SG159742 DB	'tfprint.c', 00H
	ORG $+6
$SG159746 DB	'print_TFSYS', 00H
$SG159751 DB	'file', 00H
	ORG $+7
$SG159745 DB	'HHC03222%s WARNING: possible performance impact due to e'
	DB	'ndianness!', 0aH, 00H
$SG159784 DB	0aH, 00H
	ORG $+2
$SG159747 DB	'tfprint.c', 00H
	ORG $+2
$SG159789 DB	'%s', 0aH, 00H
$SG159753 DB	'HHC03221%s Endianness of %s = %s', 0aH, 00H
	ORG $+2
$SG159793 DB	'%s', 0aH, 00H
$SG159754 DB	'print_TFSYS', 00H
$SG159816 DB	'%s', 0aH, 00H
$SG159755 DB	'tfprint.c', 00H
	ORG $+2
$SG159758 DB	'host', 00H
	ORG $+3
$SG159820 DB	'%s', 0aH, 00H
$SG159760 DB	'HHC03221%s Endianness of %s = %s', 0aH, 00H
	ORG $+2
$SG159837 DB	'%s', 0aH, 00H
$SG159761 DB	'print_TFSYS', 00H
$SG160049 DB	'W', 00H
	ORG $+2
$SG159762 DB	'tfprint.c', 00H
	ORG $+6
$SG159764 DB	'HHC03222%s WARNING: possible performance impact due to e'
	DB	'ndianness!', 0aH, 00H
$SG160134 DB	' ', 00H
	ORG $+2
$SG159765 DB	'print_TFSYS', 00H
$SG160192 DB	'%s', 0aH, 00H
$SG159766 DB	'tfprint.c', 00H
	ORG $+2
$SG160132 DB	'%s %s ', 00H
	ORG $+1
$SG160214 DB	'%s', 0aH, 00H
$SG159785 DB	'%s HHC02269I %s:', 00H
	ORG $+7
$SG159790 DB	'print_gr_regs', 00H
	ORG $+2
$SG159812 DB	'%s HHC02271I %s:', 00H
	ORG $+7
$SG159788 DB	'%s R%1.1X=%16.16llX R%1.1X=%16.16llX R%1.1X=%16.16llX R%'
	DB	'1.1X=%16.16llX', 00H
	ORG $+1
$SG159791 DB	'tfprint.c', 00H
	ORG $+2
$SG160133 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG160794 DB	0aH, 00H
	ORG $+2
$SG159792 DB	'%s GR%2.2d=%8.8X GR%2.2d=%8.8X GR%2.2d=%8.8X GR%2.2d=%8.'
	DB	'8X', 00H
	ORG $+1
$SG161078 DB	'E', 00H
	ORG $+2
$SG159794 DB	'print_gr_regs', 00H
	ORG $+2
$SG159795 DB	'tfprint.c', 00H
	ORG $+6
$SG159815 DB	'%s C%1.1X=%16.16llX C%1.1X=%16.16llX C%1.1X=%16.16llX C%'
	DB	'1.1X=%16.16llX', 00H
	ORG $+1
$SG159817 DB	'print_cr_regs', 00H
	ORG $+2
$SG159818 DB	'tfprint.c', 00H
	ORG $+2
$SG160246 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG161083 DB	'%hu', 00H
$SG159819 DB	'%s CR%2.2d=%8.8X CR%2.2d=%8.8X CR%2.2d=%8.8X CR%2.2d=%8.'
	DB	'8X', 00H
	ORG $+1
$SG161084 DB	'E', 00H
	ORG $+2
$SG159821 DB	'print_cr_regs', 00H
	ORG $+2
$SG159822 DB	'tfprint.c', 00H
	ORG $+2
$SG161201 DB	'E', 00H
	ORG $+2
$SG159835 DB	'%s HHC02272I %s:', 00H
	ORG $+3
$SG159947 DB	'SIE: ', 00H
	ORG $+2
$SG161207 DB	'E', 00H
	ORG $+2
$SG159836 DB	'%s AR%2.2d=%8.8X AR%2.2d=%8.8X AR%2.2d=%8.8X AR%2.2d=%8.'
	DB	'8X', 00H
	ORG $+1
$SG161213 DB	'E', 00H
	ORG $+2
$SG159838 DB	'print_ar_regs', 00H
	ORG $+2
$SG159839 DB	'tfprint.c', 00H
	ORG $+2
$SG161219 DB	'E', 00H
	ORG $+2
$SG159851 DB	'%s HHC02270I %s:', 00H
	ORG $+3
$SG160174 DB	'SIE: ', 00H
	ORG $+2
$SG161224 DB	'E', 00H
	ORG $+2
$SG159854 DB	'%s FP%u=%8.8X%8.8X FPR%u=%8.8X%8.8X', 00H
$SG161230 DB	'E', 00H
	ORG $+2
$SG159855 DB	'print_fpr_regs', 00H
	ORG $+1
$SG159856 DB	'tfprint.c', 00H
	ORG $+2
$SG161238 DB	'E', 00H
	ORG $+2
$SG159857 DB	'%s FP%u=%8.8X%8.8X FPR%u=%8.8X%8.8X', 00H
$SG161245 DB	'E', 00H
	ORG $+2
$SG159858 DB	'print_fpr_regs', 00H
	ORG $+1
$SG159859 DB	'tfprint.c', 00H
	ORG $+2
$SG161398 DB	'W', 00H
	ORG $+2
$SG159860 DB	'%s FPR0=%8.8X%8.8X FPR2=%8.8X%8.8X', 0aH, 00H
$SG161402 DB	0aH, 00H
	ORG $+2
$SG159861 DB	'print_fpr_regs', 00H
	ORG $+1
$SG159862 DB	'tfprint.c', 00H
	ORG $+2
$SG161404 DB	'I', 00H
	ORG $+2
$SG159863 DB	'%s FPR4=%8.8X%8.8X FPR6=%8.8X%8.8X', 0aH, 00H
$SG161409 DB	'I', 00H
	ORG $+2
$SG159864 DB	'print_fpr_regs', 00H
	ORG $+1
$SG159865 DB	'tfprint.c', 00H
	ORG $+2
$SG161426 DB	0aH, 00H
	ORG $+2
$SG159872 DB	'%s HHC02276I Floating point control register: %08X', 0aH
	DB	00H
$SG161431 DB	'%s', 00H
	ORG $+1
$SG159873 DB	'print_fpc_reg', 00H
	ORG $+2
$SG159874 DB	'tfprint.c', 00H
	ORG $+2
$SG161429 DB	'%s(%d)', 00H
	ORG $+1
$SG161433 DB	' ', 00H
	ORG $+2
$SG159899 DB	' %2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X', 00H
	ORG $+2
$SG161435 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG161436 DB	'"', 00H
	ORG $+2
$SG159900 DB	'%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%s', 00H
	ORG $+1
$SG161437 DB	'%s', 00H
	ORG $+1
$SG159921 DB	'%2.2X%2.2X        ', 00H
	ORG $+1
$SG161439 DB	'"', 00H
	ORG $+2
$SG159924 DB	'%2.2X%2.2X%2.2X%2.2X    ', 00H
	ORG $+3
$SG160210 DB	'%8.8X', 00H
	ORG $+2
$SG161440 DB	0aH, 0aH, 00H
	ORG $+1
$SG159927 DB	'%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X', 00H
	ORG $+1
$SG159928 DB	'PSW=%s INST=%s', 00H
	ORG $+1
$SG159934 DB	'%s HHC00800I Processor %s: loaded wait state PSW %s', 0aH
	DB	00H
	ORG $+3
$SG159935 DB	'print_800_wait_state_psw', 00H
	ORG $+3
$SG160773 DB	'SIE: ', 00H
	ORG $+2
$SG161533 DB	'E', 00H
	ORG $+2
$SG159936 DB	'tfprint.c', 00H
	ORG $+2
$SG161538 DB	'E', 00H
	ORG $+2
$SG159945 DB	' DXC=%2.2X', 00H
	ORG $+5
$SG159950 DB	'print_801_program_interrupt', 00H
$SG160777 DB	'%s%s', 0aH, 00H
	ORG $+6
$SG159949 DB	'%s HHC00801I Processor %s: %s%s interruption code %4.4X '
	DB	'ilc %d%s%s', 0aH, 00H
$SG161545 DB	'E', 00H
	ORG $+2
$SG159951 DB	'tfprint.c', 00H
	ORG $+6
$SG159962 DB	'print_802_per_event', 00H
	ORG $+4
$SG159961 DB	'%s HHC00802I Processor %s: PER event: code %4.4X perc %2'
	DB	'.2X=%s addr %16.16llX', 0aH, 00H
	ORG $+1
$SG159963 DB	'tfprint.c', 00H
	ORG $+6
$SG159964 DB	'%s HHC00802I Processor %s: PER event: code %4.4X perc %2'
	DB	'.2X=%s addr %8.8X', 0aH, 00H
	ORG $+1
$SG161551 DB	'E', 00H
	ORG $+2
$SG159965 DB	'print_802_per_event', 00H
$SG161557 DB	'E', 00H
	ORG $+2
$SG159966 DB	'tfprint.c', 00H
	ORG $+2
$SG161563 DB	'E', 00H
	ORG $+2
$SG159972 DB	'%s HHC00803I Processor %s: program interrupt loop PSW %s'
	DB	0aH, 00H
	ORG $+2
$SG161569 DB	'E', 00H
	ORG $+2
$SG159973 DB	'print_803_pgm_int_loop', 00H
	ORG $+1
$SG159974 DB	'tfprint.c', 00H
	ORG $+6
$SG159980 DB	'%s HHC00804I Processor %s: I/O interrupt code %1.1X:%4.4'
	DB	'X CSW %2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X', 0aH, 00H
	ORG $+3
$SG161206 DB	'TFSYS', 00H
	ORG $+2
$SG161575 DB	'E', 00H
	ORG $+2
$SG159981 DB	'print_804_io_rupt_370', 00H
	ORG $+2
$SG159982 DB	'tfprint.c', 00H
	ORG $+2
$SG161581 DB	'E', 00H
	ORG $+2
$SG159988 DB	'%s HHC00807I Processor %s: machine check code %16.16llu', 0aH
	DB	00H
	ORG $+3
$SG161244 DB	'TFHDR', 00H
	ORG $+2
$SG161587 DB	'E', 00H
	ORG $+2
$SG159989 DB	'print_807_machine_check_interrupt', 00H
	ORG $+2
$SG161593 DB	'E', 00H
	ORG $+2
$SG159990 DB	'tfprint.c', 00H
	ORG $+2
$SG161599 DB	'E', 00H
	ORG $+2
$SG159996 DB	'%s HHC00808I Processor %s: store status completed', 0aH, 00H
	ORG $+1
$SG161605 DB	'E', 00H
	ORG $+2
$SG159997 DB	'print_808_store_status', 00H
	ORG $+1
$SG159998 DB	'tfprint.c', 00H
	ORG $+2
$SG161611 DB	'E', 00H
	ORG $+2
$SG160004 DB	'%s HHC00809I Processor %s: disabled wait state %s', 0aH, 00H
	ORG $+1
$SG161616 DB	'E', 00H
	ORG $+2
$SG160005 DB	'print_809_disabled_wait', 00H
$SG160006 DB	'tfprint.c', 00H
	ORG $+2
$SG161625 DB	'E', 00H
	ORG $+2
$SG160012 DB	'%s HHC00811I Processor %s: architecture mode %s', 0aH, 00H
	ORG $+3
$SG161758 DB	'E', 00H
	ORG $+2
$SG160013 DB	'print_811_arch_mode', 00H
$SG162123 DB	'rbS', 00H
$SG160014 DB	'tfprint.c', 00H
	ORG $+2
$SG161798 DB	'NOREGS', 00H
	ORG $+1
$SG162124 DB	'E', 00H
	ORG $+2
$SG160020 DB	'%s HHC00812I Processor %s: vector facility online', 0aH, 00H
	ORG $+1
$SG162131 DB	'E', 00H
	ORG $+2
$SG160021 DB	'print_812_vect_online_370', 00H
	ORG $+2
$SG162138 DB	'E', 00H
	ORG $+2
$SG160022 DB	'tfprint.c', 00H
	ORG $+2
$SG162145 DB	'E', 00H
	ORG $+2
$SG160031 DB	'%s HHC0084?I Processor %s: External interrupt', 00H
	ORG $+2
$SG160033 DB	'%s: interrupt key', 0aH, 00H
	ORG $+5
$SG160034 DB	'print_840_ext_rupt', 00H
	ORG $+5
$SG160035 DB	'tfprint.c', 00H
	ORG $+6
$SG160037 DB	'%s: clock comparator', 0aH, 00H
	ORG $+2
$SG160038 DB	'print_840_ext_rupt', 00H
	ORG $+5
$SG160039 DB	'tfprint.c', 00H
	ORG $+6
$SG160041 DB	'%s: CPU timer=%16.16llX', 0aH, 00H
	ORG $+7
$SG160042 DB	'print_840_ext_rupt', 00H
	ORG $+5
$SG160043 DB	'tfprint.c', 00H
	ORG $+6
$SG160045 DB	'%s: interval timer', 0aH, 00H
	ORG $+4
$SG160046 DB	'print_840_ext_rupt', 00H
	ORG $+5
$SG160047 DB	'tfprint.c', 00H
	ORG $+6
$SG160051 DB	'print_840_ext_rupt', 00H
	ORG $+5
$SG160050 DB	'HHC03218%s Unsupported external interrupt: processor %s,'
	DB	' code %4.4hX', 0aH, 00H
	ORG $+2
$SG160052 DB	'tfprint.c', 00H
	ORG $+6
$SG160059 DB	'print_844_blkio_rupt', 00H
	ORG $+3
$SG160058 DB	'%s HHC00844I Processor %s: %1d:%04X: processing block I/'
	DB	'O interrupt: code %4.4X parm %16.16llX status %2.2X subcode %'
	DB	'2.2X', 0aH, 00H
	ORG $+5
$SG160060 DB	'tfprint.c', 00H
	ORG $+6
$SG160070 DB	'%s HHC00845I Processor %s: External interrupt: block I/O'
	DB	' %16.16llX', 0aH, 00H
	ORG $+4
$SG160071 DB	'print_845_blkio_ext_rupt', 00H
	ORG $+7
$SG160072 DB	'tfprint.c', 00H
	ORG $+6
$SG160128 DB	'V:%16.16llX:', 00H
	ORG $+3
$SG160135 DB	'%sTranslation exception %04.4hX (%s)', 0aH, 00H
	ORG $+2
$SG160073 DB	'%s HHC00845I Processor %s: External interrupt: block I/O'
	DB	' %8.8X', 0aH, 00H
$SG160074 DB	'print_845_blkio_ext_rupt', 00H
	ORG $+7
$SG160075 DB	'tfprint.c', 00H
	ORG $+6
$SG160081 DB	'%s HHC00846I Processor %s: External interrupt: service s'
	DB	'ignal %8.8X', 0aH, 00H
	ORG $+3
$SG160082 DB	'print_846_srvsig_ext_rupt', 00H
	ORG $+6
$SG160083 DB	'tfprint.c', 00H
	ORG $+6
$SG160129 DB	'V:%8.8X:', 00H
	ORG $+7
$SG160136 DB	'print_op_stor', 00H
	ORG $+2
$SG160137 DB	'tfprint.c', 00H
	ORG $+6
$SG160142 DB	'%-36.36s %-16.16s', 00H
	ORG $+6
$SG160140 DB	'%02.2X%02.2X%02.2X%02.2X %02.2X%02.2X%02.2X%02.2X %02.2X'
	DB	'%02.2X%02.2X%02.2X %02.2X%02.2X%02.2X%02.2X', 00H
	ORG $+4
$SG160145 DB	'%s%sR:%16.16llX:K:%02.2X=%s', 0aH, 00H
	ORG $+3
$SG160146 DB	'print_op_stor', 00H
	ORG $+2
$SG160147 DB	'tfprint.c', 00H
	ORG $+6
$SG160148 DB	'%s%sR:%8.8X:K:%02.2X=%s', 0aH, 00H
	ORG $+7
$SG160149 DB	'print_op_stor', 00H
	ORG $+2
$SG160150 DB	'tfprint.c', 00H
	ORG $+6
$SG160165 DB	'print_storage_lines', 00H
	ORG $+4
$SG160166 DB	'tfprint.c', 00H
	ORG $+6
$SG160167 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160169 DB	'print_storage_lines', 00H
	ORG $+4
$SG160170 DB	'tfprint.c', 00H
	ORG $+6
$SG160171 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160176 DB	'%s HHC02326I %s%s: ', 00H
	ORG $+4
$SG160187 DB	'HHC00805I', 00H
	ORG $+6
$SG160188 DB	'HHC00806I', 00H
	ORG $+6
$SG160189 DB	'%s %s Processor %s: I/O interrupt code %8.8X parm %8.8X', 00H
$SG160193 DB	'print_806_io_rupt', 00H
	ORG $+6
$SG160194 DB	'tfprint.c', 00H
	ORG $+6
$SG160195 DB	'%s id %8.8X', 0aH, 00H
	ORG $+3
$SG160196 DB	'print_806_io_rupt', 00H
	ORG $+6
$SG160197 DB	'tfprint.c', 00H
	ORG $+6
$SG160209 DB	'%16.16llX', 00H
	ORG $+6
$SG160215 DB	'print_814_sigp', 00H
	ORG $+1
$SG160217 DB	'%s status %8.8X', 0aH, 00H
	ORG $+7
$SG160211 DB	'%s HHC00814I Processor %s: SIGP %-32s (%02.2X) %s, PARM '
	DB	'%s: CC %d', 00H
	ORG $+6
$SG160216 DB	'tfprint.c', 00H
	ORG $+6
$SG160218 DB	'print_814_sigp', 00H
	ORG $+1
$SG160219 DB	'tfprint.c', 00H
	ORG $+6
$SG160240 DB	'%-40.40s%s', 00H
	ORG $+5
$SG160247 DB	'%s HHC00423I %1d:%04X CKD file %s: search key %s', 0aH, 00H
	ORG $+6
$SG160239 DB	' => %2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X %2.2X%2.2X'
	DB	'%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X', 00H
$SG160248 DB	'print_TF00423', 00H
	ORG $+2
$SG160249 DB	'tfprint.c', 00H
	ORG $+6
$SG160255 DB	'%s HHC00424I %1d:%04X CKD file %s: read trk %d cur trk %'
	DB	'd', 0aH, 00H
	ORG $+5
$SG160256 DB	'print_TF00424', 00H
	ORG $+2
$SG160257 DB	'tfprint.c', 00H
	ORG $+6
$SG160264 DB	'print_TF00425', 00H
	ORG $+2
orient	DQ	FLAT:$SG160331
	DQ	FLAT:$SG160332
	DQ	FLAT:$SG160333
	DQ	FLAT:$SG160334
	DQ	FLAT:$SG160335
	DQ	FLAT:$SG160336
$SG160358 DB	'%s HHC00436I %1d:%04X CKD file %s: read key %d bytes', 0aH
	DB	00H
	ORG $+2
$SG160263 DB	'%s HHC00425I %1d:%04X CKD file %s: read track updating t'
	DB	'rack %d', 0aH, 00H
	ORG $+7
$SG160265 DB	'tfprint.c', 00H
	ORG $+6
$SG160272 DB	'print_TF00426', 00H
	ORG $+2
$SG160366 DB	'%s HHC00437I %1d:%04X CKD file %s: read data %d bytes', 0aH
	DB	00H
	ORG $+1
$SG160271 DB	'%s HHC00426I %1d:%04X CKD file %s: read trk %d cache hit'
	DB	', using cache[%d]', 0aH, 00H
	ORG $+5
$SG160273 DB	'tfprint.c', 00H
	ORG $+6
$SG160279 DB	'%s HHC00427I %1d:%04X CKD file %s: read trk %d no availa'
	DB	'ble cache entry, waiting', 0aH, 00H
	ORG $+6
$SG160280 DB	'print_TF00427', 00H
	ORG $+2
$SG160281 DB	'tfprint.c', 00H
	ORG $+6
$SG160288 DB	'print_TF00428', 00H
	ORG $+2
$SG160406 DB	'%s HHC00442I %1d:%04X CKD file %s: set file mask %02X', 0aH
	DB	00H
	ORG $+1
$SG160287 DB	'%s HHC00428I %1d:%04X CKD file %s: read trk %d cache mis'
	DB	's, using cache[%d]', 0aH, 00H
	ORG $+4
$SG160289 DB	'tfprint.c', 00H
	ORG $+6
$SG160295 DB	'%s HHC00429I %1d:%04X CKD file %s: read trk %d reading f'
	DB	'ile %d offset %lld len %d', 0aH, 00H
	ORG $+5
$SG160296 DB	'print_TF00429', 00H
	ORG $+2
$SG160297 DB	'tfprint.c', 00H
	ORG $+6
$SG160304 DB	'print_TF00430', 00H
	ORG $+2
$SG160446 DB	'%s HHC00520I %1d:%04X FBA file %s: positioning to 0x%llX'
	DB	' %lld', 0aH, 00H
	ORG $+1
$SG160454 DB	'%s HHC01300I %1d:%04X CHAN: halt subchannel: cc=%d', 0aH
	DB	00H
	ORG $+4
$SG160303 DB	'%s HHC00430I %1d:%04X CKD file %s: read trk %d trkhdr %0'
	DB	'2X %02X%02X %02X%02X', 0aH, 00H
	ORG $+2
$SG160305 DB	'tfprint.c', 00H
	ORG $+6
$SG160311 DB	'%s HHC00431I %1d:%04X CKD file %s: seeking to cyl %d hea'
	DB	'd %d', 0aH, 00H
	ORG $+2
$SG160312 DB	'print_TF00431', 00H
	ORG $+2
$SG160313 DB	'tfprint.c', 00H
	ORG $+6
$SG160319 DB	'%s HHC00432I %1d:%04X CKD file %s: error: MT advance: lo'
	DB	'cate record %d file mask %02X', 0aH, 00H
	ORG $+1
$SG160320 DB	'print_TF00432', 00H
	ORG $+2
$SG160321 DB	'tfprint.c', 00H
	ORG $+6
$SG160328 DB	'print_TF00433', 00H
	ORG $+2
$SG160473 DB	'%s HHC01302I %1d:%04X CHAN: idaw %8.8X, len %3.3hX%s', 0aH
	DB	00H
	ORG $+2
$SG160327 DB	'%s HHC00433I %1d:%04X CKD file %s: MT advance to cyl(%d)'
	DB	' head(%d)', 0aH, 00H
	ORG $+5
$SG160329 DB	'tfprint.c', 00H
	ORG $+6
$SG160342 DB	'%s HHC00434I %1d:%04X CKD file %s: read count orientatio'
	DB	'n %s', 0aH, 00H
	ORG $+2
$SG160343 DB	'print_TF00434', 00H
	ORG $+2
$SG160344 DB	'tfprint.c', 00H
	ORG $+6
$SG160351 DB	'print_TF00435', 00H
	ORG $+2
$SG160490 DB	'%s HHC01304I %1d:%04X CHAN: attention signaled', 0aH, 00H
$SG160498 DB	'%s HHC01305I %1d:%04X CHAN: attention', 0aH, 00H
	ORG $+1
$SG160350 DB	'%s HHC00435I %1d:%04X CKD file %s: cyl %d head %d record'
	DB	' %d kl %d dl %d of %d', 0aH, 00H
	ORG $+1
$SG160352 DB	'tfprint.c', 00H
	ORG $+6
$SG160359 DB	'print_TF00436', 00H
	ORG $+2
$SG160360 DB	'tfprint.c', 00H
	ORG $+6
$SG160367 DB	'print_TF00437', 00H
	ORG $+2
$SG160368 DB	'tfprint.c', 00H
	ORG $+6
$SG160374 DB	'%s HHC00438I %1d:%04X CKD file %s: writing cyl %d head %'
	DB	'd record %d kl %d dl %d', 0aH, 00H
	ORG $+7
$SG160375 DB	'print_TF00438', 00H
	ORG $+2
$SG160376 DB	'tfprint.c', 00H
	ORG $+6
$SG160383 DB	'print_TF00439', 00H
	ORG $+2
$SG160506 DB	'%s HHC01306I %1d:%04X CHAN: initial status interrupt', 0aH
	DB	00H
	ORG $+2
$SG160382 DB	'%s HHC00439I %1d:%04X CKD file %s: setting track overflo'
	DB	'w flag for cyl %d head %d record %d', 0aH, 00H
	ORG $+3
$SG160384 DB	'tfprint.c', 00H
	ORG $+6
$SG160390 DB	'%s HHC00440I %1d:%04X CKD file %s: updating cyl %d head '
	DB	'%d record %d kl %d dl %d', 0aH, 00H
	ORG $+6
$SG160391 DB	'print_TF00440', 00H
	ORG $+2
$SG160392 DB	'tfprint.c', 00H
	ORG $+6
$SG160399 DB	'print_TF00441', 00H
	ORG $+2
$SG160514 DB	'%s HHC01307I %1d:%04X CHAN: attention completed', 0aH, 00H
	ORG $+7
$SG160398 DB	'%s HHC00441I %1d:%04X CKD file %s: updating cyl %d head '
	DB	'%d record %d dl %d', 0aH, 00H
	ORG $+4
$SG160400 DB	'tfprint.c', 00H
	ORG $+6
$SG160407 DB	'print_TF00442', 00H
	ORG $+2
$SG160408 DB	'tfprint.c', 00H
	ORG $+6
$SG160414 DB	'%s HHC00516I %1d:%04X FBA file %s: read blkgrp %d cache '
	DB	'hit, using cache[%d]', 0aH, 00H
	ORG $+2
$SG160415 DB	'print_TF00516', 00H
	ORG $+2
$SG160416 DB	'tfprint.c', 00H
	ORG $+6
$SG160422 DB	'%s HHC00517I %1d:%04X FBA file %s: read blkgrp %d no ava'
	DB	'ilable cache entry, waiting', 0aH, 00H
	ORG $+3
$SG160423 DB	'print_TF00517', 00H
	ORG $+2
$SG160424 DB	'tfprint.c', 00H
	ORG $+6
$SG160431 DB	'print_TF00518', 00H
	ORG $+2
$SG160538 DB	'%s HHC01310I %1d:%04X CHAN: suspended', 0aH, 00H
	ORG $+1
$SG160430 DB	'%s HHC00518I %1d:%04X FBA file %s: read blkgrp %d cache '
	DB	'miss, using cache[%d]', 0aH, 00H
	ORG $+1
$SG160432 DB	'tfprint.c', 00H
	ORG $+6
$SG160438 DB	'%s HHC00519I %1d:%04X FBA file %s: read blkgrp %d offset'
	DB	' %lld len %d', 0aH, 00H
	ORG $+2
$SG160439 DB	'print_TF00519', 00H
	ORG $+2
$SG160440 DB	'tfprint.c', 00H
	ORG $+6
$SG160447 DB	'print_TF00520', 00H
	ORG $+2
$SG160448 DB	'tfprint.c', 00H
	ORG $+6
$SG160455 DB	'print_TF01300', 00H
	ORG $+2
$SG160456 DB	'tfprint.c', 00H
	ORG $+6
$SG160474 DB	'print_TF01301', 00H
	ORG $+2
$SG160475 DB	'tfprint.c', 00H
	ORG $+6
$SG160477 DB	'%s HHC01303I %1d:%04X CHAN: idaw %16.16llX, len %4.4hX%s'
	DB	0aH, 00H
	ORG $+6
$SG160478 DB	'print_TF01301', 00H
	ORG $+2
$SG160479 DB	'tfprint.c', 00H
	ORG $+6
$SG160481 DB	'%s HHC01301I %1d:%04X CHAN: midaw %2.2X %4.4hX %16.16llX'
	DB	'%s', 0aH, 00H
	ORG $+4
$SG160482 DB	'print_TF01301', 00H
	ORG $+2
$SG160483 DB	'tfprint.c', 00H
	ORG $+6
$SG160491 DB	'print_TF01304', 00H
	ORG $+2
$SG160492 DB	'tfprint.c', 00H
	ORG $+6
$SG160499 DB	'print_TF01305', 00H
	ORG $+2
$SG160500 DB	'tfprint.c', 00H
	ORG $+6
$SG160507 DB	'print_TF01306', 00H
	ORG $+2
$SG160508 DB	'tfprint.c', 00H
	ORG $+6
$SG160515 DB	'print_TF01307', 00H
	ORG $+2
$SG160516 DB	'tfprint.c', 00H
	ORG $+6
$SG160522 DB	'%s HHC01308I %1d:%04X CHAN: clear completed', 0aH, 00H
	ORG $+3
$SG160523 DB	'print_TF01308', 00H
	ORG $+2
$SG160524 DB	'tfprint.c', 00H
	ORG $+6
$SG160530 DB	'%s HHC01309I %1d:%04X CHAN: halt completed', 0aH, 00H
	ORG $+4
$SG160531 DB	'print_TF01309', 00H
	ORG $+2
$SG160532 DB	'tfprint.c', 00H
	ORG $+6
$SG160539 DB	'print_TF01310', 00H
	ORG $+2
$SG160540 DB	'tfprint.c', 00H
	ORG $+6
$SG160546 DB	'%s HHC01311I %1d:%04X CHAN: resumed', 0aH, 00H
	ORG $+3
$SG160547 DB	'print_TF01311', 00H
	ORG $+2
$SG160548 DB	'tfprint.c', 00H
	ORG $+6
$SG160554 DB	'%s HHC01312I %1d:%04X CHAN: stat %2.2X%2.2X, count %4.4X'
	DB	0aH, 00H
	ORG $+6
$SG160555 DB	'print_TF01312', 00H
	ORG $+2
$SG160556 DB	'tfprint.c', 00H
	ORG $+6
$SG160562 DB	'%s HHC01313I %1d:%04X CHAN: sense %2.2X%2.2X%2.2X%2.2X %'
	DB	'2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X'
	DB	' %2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.'
	DB	'2X %2.2X%2.2X%2.2X%2.2X', 0aH, 00H
	ORG $+5
$SG160563 DB	'print_TF01313', 00H
	ORG $+2
$SG160564 DB	'tfprint.c', 00H
	ORG $+6
$SG160566 DB	'%s HHC01314I %1d:%04X CHAN: sense %s', 0aH, 00H
	ORG $+2
$SG160567 DB	'print_TF01313', 00H
	ORG $+2
$SG160568 DB	'tfprint.c', 00H
	ORG $+6
$SG160575 DB	'print_TF01315', 00H
	ORG $+2
$SG160622 DB	'%s HHC01329I %1d:%04X CHAN: halt I/O', 0aH, 00H
	ORG $+2
$SG160574 DB	'%s HHC01315I %1d:%04X CHAN: ccw %2.2X%2.2X%2.2X%2.2X %2.'
	DB	'2X%2.2X%2.2X%2.2X%s', 0aH, 00H
	ORG $+3
$SG160576 DB	'tfprint.c', 00H
	ORG $+6
$SG160582 DB	'%s HHC01316I %1d:%04X CHAN: csw %2.2X, stat %2.2X%2.2X, '
	DB	'count %2.2X%2.2X, ccw %2.2X%2.2X%2.2X', 0aH, 00H
	ORG $+1
$SG160583 DB	'print_TF01316', 00H
	ORG $+2
$SG160584 DB	'tfprint.c', 00H
	ORG $+6
$SG160590 DB	'%s HHC01317I %1d:%04X CHAN: scsw %2.2X%2.2X%2.2X%2.2X, s'
	DB	'tat %2.2X%2.2X, count %2.2X%2.2X, ccw %2.2X%2.2X%2.2X%2.2X', 0aH
	DB	00H
	ORG $+4
$SG160591 DB	'print_TF01317', 00H
	ORG $+2
$SG160592 DB	'tfprint.c', 00H
	ORG $+6
$SG160598 DB	'%s HHC01318I %1d:%04X CHAN: test I/O: cc=%d', 0aH, 00H
	ORG $+3
$SG160599 DB	'print_TF01318', 00H
	ORG $+2
$SG160600 DB	'tfprint.c', 00H
	ORG $+6
$SG160607 DB	'print_TF01320', 00H
	ORG $+2
$SG160654 DB	'%s HHC01333I %1d:%04X CHAN: resume subchannel: cc=%d', 0aH
	DB	00H
	ORG $+2
$SG160606 DB	'%s HHC01320I %1d:%04X CHAN: start I/O S/370 conversion t'
	DB	'o asynchronous operation started', 0aH, 00H
	ORG $+6
$SG160608 DB	'tfprint.c', 00H
	ORG $+6
$SG160614 DB	'%s HHC01321I %1d:%04X CHAN: start I/O S/370 conversion t'
	DB	'o asynchronous operation successful', 0aH, 00H
	ORG $+3
$SG160615 DB	'print_TF01321', 00H
	ORG $+2
$SG160616 DB	'tfprint.c', 00H
	ORG $+6
$SG160623 DB	'print_TF01329', 00H
	ORG $+2
$SG160624 DB	'tfprint.c', 00H
	ORG $+6
$SG160630 DB	'%s HHC01330I %1d:%04X CHAN: HIO modification executed: c'
	DB	'c=1', 0aH, 00H
	ORG $+3
$SG160631 DB	'print_TF01330', 00H
	ORG $+2
$SG160632 DB	'tfprint.c', 00H
	ORG $+6
$SG160638 DB	'%s HHC01331I %1d:%04X CHAN: clear subchannel', 0aH, 00H
	ORG $+2
$SG160639 DB	'print_TF01331', 00H
	ORG $+2
$SG160640 DB	'tfprint.c', 00H
	ORG $+6
$SG160646 DB	'%s HHC01332I %1d:%04X CHAN: halt subchannel', 0aH, 00H
	ORG $+3
$SG160647 DB	'print_TF01332', 00H
	ORG $+2
$SG160648 DB	'tfprint.c', 00H
	ORG $+6
$SG160655 DB	'print_TF01333', 00H
	ORG $+2
$SG160656 DB	'tfprint.c', 00H
	ORG $+6
$SG160663 DB	'%s HHC01334I %1d:%04X CHAN: ORB: %s', 0aH, 00H
	ORG $+3
$SG160664 DB	'print_TF01334', 00H
	ORG $+2
$SG160665 DB	'tfprint.c', 00H
	ORG $+6
$SG160672 DB	'print_TF01336', 00H
	ORG $+2
$SG160775 DB	'%s HHC02269E %s', 00H
$SG160776 DB	'Instruction fetch error', 00H
$SG160671 DB	'%s HHC01336I %1d:%04X CHAN: startio cc=2 (busy=%d startp'
	DB	'ending=%d)', 0aH, 00H
	ORG $+4
$SG160673 DB	'tfprint.c', 00H
	ORG $+6
$SG160778 DB	'process_TF02269', 00H
$SG160779 DB	'tfprint.c', 00H
	ORG $+6
$SG160795 DB	'%s HHC02324I %s: %s %s', 0aH, 00H
$SG160796 DB	'process_TF02324', 00H
$SG160797 DB	'tfprint.c', 00H
	ORG $+6
$SG160806 DB	'%s HHC02267I Real address is not valid', 0aH, 00H
$SG160807 DB	'process_TF02326', 00H
$SG160808 DB	'tfprint.c', 00H
	ORG $+6
$SG161079 DB	'HHC03206%s Error reading trace file: %s', 0aH, 00H
	ORG $+7
$SG161080 DB	'finish_reading_rec', 00H
	ORG $+5
$SG161081 DB	'tfprint.c', 00H
	ORG $+6
$SG161085 DB	'HHC03207%s Truncated %s record; aborting', 0aH, 00H
	ORG $+6
$SG161086 DB	'finish_reading_rec', 00H
	ORG $+5
$SG161087 DB	'tfprint.c', 00H
	ORG $+6
$SG161198 DB	'Print Trace File Utility', 00H
	ORG $+7
$SG161199 DB	'tfprint', 00H
$SG161202 DB	'HHC03206%s Error reading trace file: %s', 0aH, 00H
	ORG $+3
$SG161203 DB	'main', 00H
	ORG $+7
$SG161204 DB	'tfprint.c', 00H
	ORG $+6
$SG161208 DB	'HHC03207%s Truncated %s record; aborting', 0aH, 00H
	ORG $+2
$SG161209 DB	'main', 00H
	ORG $+7
$SG161210 DB	'tfprint.c', 00H
	ORG $+6
$SG161214 DB	'HHC03212%s File does not start with TFSYS record; aborti'
	DB	'ng', 0aH, 00H
$SG161215 DB	'main', 00H
	ORG $+7
$SG161216 DB	'tfprint.c', 00H
	ORG $+6
$SG161220 DB	'HHC03213%s Unsupported Trace File format: %%TF%c', 0aH, 00H
	ORG $+2
$SG161221 DB	'main', 00H
	ORG $+7
$SG161222 DB	'tfprint.c', 00H
	ORG $+6
$SG161225 DB	'HHC03210%s Incompatible MAX_CPU_ENGS', 0aH, 00H
	ORG $+2
$SG161226 DB	'main', 00H
	ORG $+3
$SG161227 DB	'tfprint.c', 00H
	ORG $+6
$SG161231 DB	'HHC03216%s Incompatible Hercules build architectures', 0aH
	DB	00H
	ORG $+2
$SG161232 DB	'main', 00H
	ORG $+3
$SG161233 DB	'tfprint.c', 00H
	ORG $+6
$SG161239 DB	'HHC03206%s Error reading trace file: %s', 0aH, 00H
	ORG $+3
$SG161240 DB	'main', 00H
	ORG $+7
$SG161241 DB	'tfprint.c', 00H
	ORG $+6
$SG161246 DB	'HHC03207%s Truncated %s record; aborting', 0aH, 00H
	ORG $+2
$SG161247 DB	'main', 00H
	ORG $+7
$SG161248 DB	'tfprint.c', 00H
	ORG $+6
$SG161399 DB	'HHC03214%s Unsupported Trace File record: msgnum %hu', 0aH
	DB	00H
	ORG $+2
$SG161400 DB	'main', 00H
	ORG $+3
$SG161401 DB	'tfprint.c', 00H
	ORG $+6
$SG161403 DB	'instructions', 00H
	ORG $+3
$SG161405 DB	'HHC03215%s %s %s printed', 0aH, 00H
	ORG $+2
$SG161406 DB	'main', 00H
	ORG $+7
$SG161407 DB	'tfprint.c', 00H
	ORG $+6
$SG161408 DB	'device I/O''s', 00H
	ORG $+3
$SG161410 DB	'HHC03215%s %s %s printed', 0aH, 00H
	ORG $+2
$SG161411 DB	'main', 00H
	ORG $+7
$SG161412 DB	'tfprint.c', 00H
	ORG $+6
$SG161428 DB	'tfprint.c', 00H
	ORG $+6
$SG161430 DB	'%-17.17s ', 00H
	ORG $+6
$SG161432 DB	'HHC03217I Args:', 00H
shortopts DB	':ic:r:n:e:s:d:t:o:m:u:p:', 00H
	ORG $+7
$SG161534 DB	'HHC03219%s Invalid/unsupported option: %s', 0aH, 00H
	ORG $+5
$SG161535 DB	'process_args', 00H
	ORG $+3
$SG161680 DB	'%llx', 00H
	ORG $+3
longopts DQ	FLAT:$SG161457
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	069H
	ORG $+4
	DQ	FLAT:$SG161458
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	063H
	ORG $+4
	DQ	FLAT:$SG161459
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	072H
	ORG $+4
	DQ	FLAT:$SG161460
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	06eH
	ORG $+4
	DQ	FLAT:$SG161461
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	065H
	ORG $+4
	DQ	FLAT:$SG161462
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	073H
	ORG $+4
	DQ	FLAT:$SG161463
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	064H
	ORG $+4
	DQ	FLAT:$SG161464
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	074H
	ORG $+4
	DQ	FLAT:$SG161465
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	06fH
	ORG $+4
	DQ	FLAT:$SG161466
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	06dH
	ORG $+4
	DQ	FLAT:$SG161467
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	075H
	ORG $+4
	DQ	FLAT:$SG161468
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DD	070H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DD	00H
	ORG $+4
$SG161536 DB	'tfprint.c', 00H
	ORG $+6
$SG161539 DB	'HHC03204%s Missing argument for option %s', 0aH, 00H
	ORG $+5
$SG161540 DB	'process_args', 00H
	ORG $+3
$SG161541 DB	'tfprint.c', 00H
	ORG $+6
$SG161546 DB	'HHC03204%s Missing argument for option %s', 0aH, 00H
	ORG $+5
$SG161547 DB	'process_args', 00H
	ORG $+3
$SG161548 DB	'tfprint.c', 00H
	ORG $+6
$SG161552 DB	'HHC03204%s Missing argument for option %s', 0aH, 00H
	ORG $+5
$SG161553 DB	'process_args', 00H
	ORG $+3
$SG161554 DB	'tfprint.c', 00H
	ORG $+6
$SG161558 DB	'HHC03204%s Missing argument for option %s', 0aH, 00H
	ORG $+5
$SG161559 DB	'process_args', 00H
	ORG $+3
$SG161560 DB	'tfprint.c', 00H
	ORG $+6
$SG161564 DB	'HHC03204%s Missing argument for option %s', 0aH, 00H
	ORG $+5
$SG161565 DB	'process_args', 00H
	ORG $+3
$SG161566 DB	'tfprint.c', 00H
	ORG $+6
$SG161570 DB	'HHC03204%s Missing argument for option %s', 0aH, 00H
	ORG $+5
$SG161571 DB	'process_args', 00H
	ORG $+3
$SG161572 DB	'tfprint.c', 00H
	ORG $+6
$SG161576 DB	'HHC03204%s Missing argument for option %s', 0aH, 00H
	ORG $+5
$SG161577 DB	'process_args', 00H
	ORG $+3
$SG161578 DB	'tfprint.c', 00H
	ORG $+6
$SG161582 DB	'HHC03204%s Missing argument for option %s', 0aH, 00H
	ORG $+5
$SG161583 DB	'process_args', 00H
	ORG $+3
$SG161584 DB	'tfprint.c', 00H
	ORG $+6
$SG161588 DB	'HHC03204%s Missing argument for option %s', 0aH, 00H
	ORG $+5
$SG161589 DB	'process_args', 00H
	ORG $+3
$SG161590 DB	'tfprint.c', 00H
	ORG $+6
$SG161594 DB	'HHC03204%s Missing argument for option %s', 0aH, 00H
	ORG $+5
$SG161595 DB	'process_args', 00H
	ORG $+3
$SG161596 DB	'tfprint.c', 00H
	ORG $+6
$SG161600 DB	'HHC03204%s Missing argument for option %s', 0aH, 00H
	ORG $+5
$SG161601 DB	'process_args', 00H
	ORG $+3
$SG161602 DB	'tfprint.c', 00H
	ORG $+6
$SG161606 DB	'HHC03204%s Missing argument for option %s', 0aH, 00H
	ORG $+5
$SG161607 DB	'process_args', 00H
	ORG $+3
$SG161608 DB	'tfprint.c', 00H
	ORG $+6
$SG161612 DB	'HHC03219%s Invalid/unsupported option: %s', 0aH, 00H
	ORG $+5
$SG161613 DB	'process_args', 00H
	ORG $+3
$SG161614 DB	'tfprint.c', 00H
	ORG $+6
$SG161617 DB	'HHC03201%s Missing input-file specification', 0aH, 00H
	ORG $+3
$SG161618 DB	'process_args', 00H
	ORG $+3
$SG161619 DB	'tfprint.c', 00H
	ORG $+6
$SG161626 DB	'HHC03220%s --date range is required when --time range sp'
	DB	'ecified', 0aH, 00H
	ORG $+7
$SG161627 DB	'process_args', 00H
	ORG $+3
$SG161628 DB	'tfprint.c', 00H
	ORG $+6
$SG161644 DB	'msglvl %s', 00H
	ORG $+6
$SG161681 DB	'convert_opt_str', 00H
$SG161682 DB	'tfprint.c', 00H
	ORG $+6
$SG161685 DB	'convert_opt_str', 00H
$SG161691 DB	'%llu', 00H
	ORG $+3
$SG161683 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG161686 DB	'tfprint.c', 00H
	ORG $+6
$SG161692 DB	'convert_opt_str', 00H
$SG161760 DB	'parse_option_error', 00H
	ORG $+5
$SG161687 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG161693 DB	'tfprint.c', 00H
	ORG $+6
$SG161696 DB	'convert_opt_str', 00H
$SG161853 DB	'%llx', 00H
	ORG $+3
$SG161694 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG161697 DB	'tfprint.c', 00H
	ORG $+6
$SG161759 DB	'HHC03205%s Option "%s" value "%s" is invalid', 0aH, 00H
	ORG $+2
$SG161854 DB	'convert_storage_opt_str', 00H
$SG161698 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG161761 DB	'tfprint.c', 00H
	ORG $+6
$SG161801 DB	'REGSFIRST', 00H
	ORG $+6
$SG161804 DB	'TRADITIONAL', 00H
	ORG $+4
$SG161855 DB	'tfprint.c', 00H
	ORG $+6
$SG161858 DB	'convert_storage_opt_str', 00H
$SG161856 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG161859 DB	'tfprint.c', 00H
	ORG $+2
$SG161908 DB	'%llu', 00H
	ORG $+7
$SG161860 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG161909 DB	'parse_date_str', 00H
	ORG $+1
$SG161910 DB	'tfprint.c', 00H
	ORG $+6
$SG161913 DB	'parse_date_str', 00H
	ORG $+1
$SG161918 DB	'%llu', 00H
	ORG $+3
$SG161911 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG161914 DB	'tfprint.c', 00H
	ORG $+6
$SG161919 DB	'parse_date_str', 00H
	ORG $+1
$SG161928 DB	'%llu', 00H
	ORG $+3
$SG161915 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG161920 DB	'tfprint.c', 00H
	ORG $+6
$SG161923 DB	'parse_date_str', 00H
	ORG $+1
$SG161993 DB	'%llu', 00H
	ORG $+3
$SG161921 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG161924 DB	'tfprint.c', 00H
	ORG $+6
$SG161929 DB	'parse_date_str', 00H
	ORG $+1
$SG162003 DB	'%llu', 00H
	ORG $+3
$SG161925 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG161930 DB	'tfprint.c', 00H
	ORG $+6
$SG161933 DB	'parse_date_str', 00H
	ORG $+1
$SG162013 DB	'%llu', 00H
	ORG $+3
$SG161931 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG161934 DB	'tfprint.c', 00H
	ORG $+6
$SG161994 DB	'parse_time_str', 00H
	ORG $+1
$SG162023 DB	'%llu', 00H
	ORG $+3
$SG161935 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG161995 DB	'tfprint.c', 00H
	ORG $+6
$SG161998 DB	'parse_time_str', 00H
	ORG $+1
$SG162125 DB	'HHC03202%s Error opening "%s": %s', 0aH, 00H
	ORG $+5
$SG161996 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG161999 DB	'tfprint.c', 00H
	ORG $+6
$SG162004 DB	'parse_time_str', 00H
	ORG $+1
$SG162126 DB	'parse_tracefile', 00H
$SG162130 DB	'fseek', 00H
	ORG $+2
$SG162000 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG162005 DB	'tfprint.c', 00H
	ORG $+6
$SG162008 DB	'parse_time_str', 00H
	ORG $+1
$SG162132 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG162006 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG162009 DB	'tfprint.c', 00H
	ORG $+6
$SG162014 DB	'parse_time_str', 00H
	ORG $+1
$SG162133 DB	'parse_tracefile', 00H
$SG162137 DB	'ftell', 00H
	ORG $+2
$SG162010 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG162015 DB	'tfprint.c', 00H
	ORG $+6
$SG162018 DB	'parse_time_str', 00H
	ORG $+1
$SG162139 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG162016 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG162019 DB	'tfprint.c', 00H
	ORG $+6
$SG162024 DB	'parse_time_str', 00H
	ORG $+1
$SG162140 DB	'parse_tracefile', 00H
$SG162144 DB	'fseek', 00H
	ORG $+2
$SG162020 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG162025 DB	'tfprint.c', 00H
	ORG $+6
$SG162028 DB	'parse_time_str', 00H
	ORG $+1
$SG162146 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG162026 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG162029 DB	'tfprint.c', 00H
	ORG $+6
$SG162147 DB	'parse_tracefile', 00H
	ORG $+8
$SG162030 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG162127 DB	'tfprint.c', 00H
	ORG $+6
$SG162134 DB	'tfprint.c', 00H
	ORG $+6
$SG162141 DB	'tfprint.c', 00H
	ORG $+6
$SG162148 DB	'tfprint.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:parse_time_str
	DD	01bH
	DD	042dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:parse_date_str
	DD	01bH
	DD	0316H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:parse_opt_str
	DD	024H
	DD	06d1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:parse_option_time
	DD	014H
	DD	0116H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:parse_option_date
	DD	014H
	DD	0f8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:parse_option_msglvl
	DD	013H
	DD	05dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_args
	DD	01aH
	DD	0189H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main
	DD	01bH
	DD	01285H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:finish_reading_rec
	DD	018H
	DD	02aaH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:process_TF02326
	DD	017H
	DD	0112H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:process_TF02324
	DD	017H
	DD	0302H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:process_TF02269
	DD	017H
	DD	018eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01336
	DD	017H
	DD	011aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01334
	DD	017H
	DD	013dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01333
	DD	017H
	DD	0f6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01332
	DD	017H
	DD	0e8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01331
	DD	017H
	DD	0e8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01330
	DD	017H
	DD	0e8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01329
	DD	017H
	DD	0e8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01321
	DD	017H
	DD	0e8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01320
	DD	017H
	DD	0e8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01318
	DD	017H
	DD	0f6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01317
	DD	022H
	DD	0262H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01316
	DD	01aH
	DD	021dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01315
	DD	01cH
	DD	024cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01313
	DD	022H
	DD	076eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01312
	DD	017H
	DD	0129H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01311
	DD	017H
	DD	0e8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01310
	DD	017H
	DD	0e8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01309
	DD	017H
	DD	0e8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01308
	DD	017H
	DD	0e8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01307
	DD	017H
	DD	0e8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01306
	DD	017H
	DD	0e8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01305
	DD	017H
	DD	0e8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01304
	DD	017H
	DD	0e8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01301
	DD	017H
	DD	03c9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF01300
	DD	017H
	DD	0f6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00520
	DD	017H
	DD	011bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00519
	DD	017H
	DD	0131H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00518
	DD	017H
	DD	0117H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00517
	DD	017H
	DD	0108H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00516
	DD	017H
	DD	0117H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00442
	DD	017H
	DD	011dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00441
	DD	017H
	DD	0150H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00440
	DD	017H
	DD	0171H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00439
	DD	017H
	DD	0141H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00438
	DD	017H
	DD	0191H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00437
	DD	017H
	DD	011dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00436
	DD	017H
	DD	0108H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00435
	DD	017H
	DD	0180H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00434
	DD	017H
	DD	013dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00433
	DD	017H
	DD	0117H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00432
	DD	017H
	DD	0137H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00431
	DD	017H
	DD	0117H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00430
	DD	018H
	DD	01e6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00429
	DD	017H
	DD	0140H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00428
	DD	017H
	DD	0117H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00427
	DD	017H
	DD	0108H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00426
	DD	017H
	DD	0117H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00425
	DD	017H
	DD	0108H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00424
	DD	017H
	DD	0117H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TF00423
	DD	017H
	DD	0167H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:fmtdata
	DD	026H
	DD	0356H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_814_sigp
	DD	017H
	DD	0254H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_806_io_rupt
	DD	017H
	DD	01f8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_storage_lines
	DD	016H
	DD	01feH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_op_stor
	DD	030H
	DD	06a5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_846_srvsig_ext_rupt
	DD	017H
	DD	0e7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_845_blkio_ext_rupt
	DD	017H
	DD	018aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_844_blkio_rupt
	DD	017H
	DD	0171H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_840_ext_rupt
	DD	017H
	DD	02e7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_812_vect_online_370
	DD	017H
	DD	0d8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_811_arch_mode
	DD	017H
	DD	0f3H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_809_disabled_wait
	DD	017H
	DD	0f3H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_808_store_status
	DD	017H
	DD	0d8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_807_machine_check_interrupt
	DD	017H
	DD	0e9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_804_io_rupt_370
	DD	01aH
	DD	0256H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_803_pgm_int_loop
	DD	017H
	DD	0f3H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_802_per_event
	DD	017H
	DD	0238H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_801_program_interrupt
	DD	017H
	DD	0240H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_800_wait_state_psw
	DD	017H
	DD	0107H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:fmt_psw_inst_str
	DD	025H
	DD	0241H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:fmt_psw_str
	DD	01cH
	DD	0242H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_fpc_reg
	DD	017H
	DD	0dbH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_fpr_regs
	DD	017H
	DD	04bfH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_ar_regs
	DD	017H
	DD	01eeH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_cr_regs
	DD	017H
	DD	0330H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_gr_regs
	DD	017H
	DD	0352H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:print_TFSYS
	DD	01bH
	DD	05f4H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:is_wanted_opcode
	DD	013H
	DD	0e1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:show_file_progress
	DD	013H
	DD	01c9H
voltbl	ENDS
xdata	SEGMENT
$unwind$difftime DD 010e01H
	DD	0420eH
$unwind$gmtime DD 010901H
	DD	04209H
$unwind$mktime DD 010901H
	DD	04209H
$unwind$time DD	010901H
	DD	04209H
$unwind$DebuggerTrace DD 011801H
	DD	0a218H
$unwind$show_usage DD 010401H
	DD	08204H
$unwind$show_file_progress DD 031b19H
	DD	0180109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$gotmask DD 010901H
	DD	02209H
$unwind$recsize DD 010901H
	DD	02209H
$unwind$all_recs_ptr DD 010e01H
	DD	0220eH
$unwind$ptyp_str DD 010801H
	DD	02208H
$unwind$tf_store_psw DD 011301H
	DD	08213H
$unwind$is_recnum_wanted DD 010401H
	DD	02204H
$unwind$is_msgnum_wanted DD 010801H
	DD	02208H
$unwind$is_cpu_wanted DD 010801H
	DD	02208H
$unwind$is_time_wanted DD 010901H
	DD	06209H
$unwind$is_wanted_storage DD 011801H
	DD	02218H
$unwind$is_wanted_operand DD 010e01H
	DD	0a20eH
$unwind$is_wanted_tf02326 DD 010901H
	DD	06209H
$unwind$is_wanted_opcode DD 011819H
	DD	08209H
	DD	imagerel __GSHandlerCheck
	DD	030H
$unwind$is_wanted DD 010901H
	DD	04209H
$unwind$is_devnum_wanted DD 010901H
	DD	02209H
$unwind$tf_do_blank_sep DD 010901H
	DD	04209H
$unwind$tf_dev_do_blank_sep DD 010901H
	DD	04209H
$unwind$print_TFSYS DD 032319H
	DD	02c0111H
	DD	0700aH
	DD	imagerel __GSHandlerCheck
	DD	0150H
$unwind$print_gr_regs DD 031f19H
	DD	030010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0170H
$unwind$print_cr_regs DD 031f19H
	DD	030010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0170H
$unwind$print_ar_regs DD 031f19H
	DD	030010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0170H
$unwind$print_fpr_regs DD 031f19H
	DD	030010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0170H
$unwind$print_fpc_reg DD 031f19H
	DD	014010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$print_all_available_regs DD 010801H
	DD	04208H
$unwind$fmt_psw_str DD 042419H
	DD	0170112H
	DD	0300a700bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$fmt_psw_inst_str DD 022a19H
	DD	07014f21bH
	DD	imagerel __GSHandlerCheck
	DD	078H
$unwind$print_800_wait_state_psw DD 031f19H
	DD	018010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$print_801_program_interrupt DD 031f19H
	DD	03e010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	01e0H
$unwind$print_802_per_event DD 031f19H
	DD	020010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0f0H
$unwind$print_803_pgm_int_loop DD 031f19H
	DD	018010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$print_804_io_rupt_370 DD 062219H
	DD	0230110H
	DD	060087009H
	DD	030065007H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$print_807_machine_check_interrupt DD 031f19H
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$print_808_store_status DD 031f19H
	DD	014010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$print_809_disabled_wait DD 031f19H
	DD	018010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$print_811_arch_mode DD 031f19H
	DD	018010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$print_812_vect_online_370 DD 031f19H
	DD	014010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$print_840_ext_rupt DD 031f19H
	DD	01e010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0e0H
$unwind$print_844_blkio_rupt DD 031f19H
	DD	01c010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$print_845_blkio_ext_rupt DD 031f19H
	DD	018010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$print_846_srvsig_ext_rupt DD 031f19H
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$fmt_inst_name DD 010d01H
	DD	0420dH
$unwind$print_op_stor DD 0a3819H
	DD	0470126H
	DD	0e01df01fH
	DD	0c019d01bH
	DD	060167017H
	DD	030145015H
	DD	imagerel __GSHandlerCheck
	DD	0220H
$unwind$print_storage_lines DD 031e19H
	DD	01a010cH
	DD	07005H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$print_806_io_rupt DD 031f19H
	DD	022010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$print_814_sigp DD 031f19H
	DD	02c010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0150H
$unwind$fmtdata DD 0a2e19H
	DD	027011cH
	DD	0e013f015H
	DD	0c00fd011H
	DD	0600c700dH
	DD	0300a500bH
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$print_TF00423 DD 031f19H
	DD	01c010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$print_TF00424 DD 031f19H
	DD	018010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$print_TF00425 DD 031f19H
	DD	018010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$print_TF00426 DD 031f19H
	DD	018010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$print_TF00427 DD 031f19H
	DD	018010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$print_TF00428 DD 031f19H
	DD	018010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$print_TF00429 DD 031f19H
	DD	01a010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$print_TF00430 DD 042019H
	DD	01f010eH
	DD	030067007H
	DD	imagerel __GSHandlerCheck
	DD	0e0H
$unwind$print_TF00431 DD 031f19H
	DD	018010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$print_TF00432 DD 031f19H
	DD	01a010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$print_TF00433 DD 031f19H
	DD	018010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$print_TF00434 DD 031f19H
	DD	01c010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$print_TF00435 DD 031f19H
	DD	01e010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0e0H
$unwind$print_TF00436 DD 031f19H
	DD	018010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$print_TF00437 DD 031f19H
	DD	01a010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$print_TF00438 DD 031f19H
	DD	01e010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0e0H
$unwind$print_TF00439 DD 031f19H
	DD	01c010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$print_TF00440 DD 031f19H
	DD	01e010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0e0H
$unwind$print_TF00441 DD 031f19H
	DD	01c010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$print_TF00442 DD 031f19H
	DD	01a010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$print_TF00516 DD 031f19H
	DD	018010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$print_TF00517 DD 031f19H
	DD	018010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$print_TF00518 DD 031f19H
	DD	018010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$print_TF00519 DD 031f19H
	DD	01a010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$print_TF00520 DD 031f19H
	DD	018010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$print_TF01300 DD 031f19H
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$print_TF01301 DD 031f19H
	DD	024010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$print_TF01304 DD 031f19H
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$print_TF01305 DD 031f19H
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$print_TF01306 DD 031f19H
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$print_TF01307 DD 031f19H
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$print_TF01308 DD 031f19H
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$print_TF01309 DD 031f19H
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$print_TF01310 DD 031f19H
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$print_TF01311 DD 031f19H
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$print_TF01312 DD 031f19H
	DD	01a010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$print_TF01313 DD 0a2a19H
	DD	0470118H
	DD	0e00ff011H
	DD	0c00bd00dH
	DD	060087009H
	DD	030065007H
	DD	imagerel __GSHandlerCheck
	DD	0220H
$unwind$print_TF01315 DD 072419H
	DD	0200112H
	DD	07009e00bH
	DD	050076008H
	DD	03006H
	DD	imagerel __GSHandlerCheck
	DD	0f0H
$unwind$print_TF01316 DD 062219H
	DD	0210110H
	DD	060087009H
	DD	030065007H
	DD	imagerel __GSHandlerCheck
	DD	0f0H
$unwind$print_TF01317 DD 0a2a19H
	DD	0250118H
	DD	0e00ff011H
	DD	0c00bd00dH
	DD	060087009H
	DD	030065007H
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$print_TF01318 DD 031f19H
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$print_TF01320 DD 031f19H
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$print_TF01321 DD 031f19H
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$print_TF01329 DD 031f19H
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$print_TF01330 DD 031f19H
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$print_TF01331 DD 031f19H
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$print_TF01332 DD 031f19H
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$print_TF01333 DD 031f19H
	DD	016010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$print_TF01334 DD 031f19H
	DD	026010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$print_TF01336 DD 031f19H
	DD	01a010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$process_TF00800 DD 010901H
	DD	04209H
$unwind$process_TF00801 DD 010901H
	DD	04209H
$unwind$process_TF00802 DD 010901H
	DD	04209H
$unwind$process_TF00803 DD 010901H
	DD	04209H
$unwind$process_TF00804 DD 010901H
	DD	04209H
$unwind$process_TF00806 DD 010901H
	DD	04209H
$unwind$process_TF00807 DD 010901H
	DD	04209H
$unwind$process_TF00808 DD 010901H
	DD	04209H
$unwind$process_TF00809 DD 010901H
	DD	04209H
$unwind$process_TF00811 DD 010901H
	DD	04209H
$unwind$process_TF00812 DD 010901H
	DD	04209H
$unwind$process_TF00814 DD 010901H
	DD	04209H
$unwind$process_TF00840 DD 010901H
	DD	04209H
$unwind$process_TF00844 DD 010901H
	DD	04209H
$unwind$process_TF00845 DD 010901H
	DD	04209H
$unwind$process_TF00846 DD 010901H
	DD	04209H
$unwind$process_TF02269 DD 031f19H
	DD	01c010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$process_TF02324 DD 031f19H
	DD	01a010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$process_TF02326 DD 031f19H
	DD	014010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$process_TF00423 DD 010901H
	DD	04209H
$unwind$process_TF00424 DD 010901H
	DD	04209H
$unwind$process_TF00425 DD 010901H
	DD	04209H
$unwind$process_TF00426 DD 010901H
	DD	04209H
$unwind$process_TF00427 DD 010901H
	DD	04209H
$unwind$process_TF00428 DD 010901H
	DD	04209H
$unwind$process_TF00429 DD 010901H
	DD	04209H
$unwind$process_TF00430 DD 010901H
	DD	04209H
$unwind$process_TF00431 DD 010901H
	DD	04209H
$unwind$process_TF00432 DD 010901H
	DD	04209H
$unwind$process_TF00433 DD 010901H
	DD	04209H
$unwind$process_TF00434 DD 010901H
	DD	04209H
$unwind$process_TF00435 DD 010901H
	DD	04209H
$unwind$process_TF00436 DD 010901H
	DD	04209H
$unwind$process_TF00437 DD 010901H
	DD	04209H
$unwind$process_TF00438 DD 010901H
	DD	04209H
$unwind$process_TF00439 DD 010901H
	DD	04209H
$unwind$process_TF00440 DD 010901H
	DD	04209H
$unwind$process_TF00441 DD 010901H
	DD	04209H
$unwind$process_TF00442 DD 010901H
	DD	04209H
$unwind$process_TF00516 DD 010901H
	DD	04209H
$unwind$process_TF00517 DD 010901H
	DD	04209H
$unwind$process_TF00518 DD 010901H
	DD	04209H
$unwind$process_TF00519 DD 010901H
	DD	04209H
$unwind$process_TF00520 DD 010901H
	DD	04209H
$unwind$process_TF01300 DD 010901H
	DD	04209H
$unwind$process_TF01301 DD 010901H
	DD	04209H
$unwind$process_TF01304 DD 010901H
	DD	04209H
$unwind$process_TF01305 DD 010901H
	DD	04209H
$unwind$process_TF01306 DD 010901H
	DD	04209H
$unwind$process_TF01307 DD 010901H
	DD	04209H
$unwind$process_TF01308 DD 010901H
	DD	04209H
$unwind$process_TF01309 DD 010901H
	DD	04209H
$unwind$process_TF01310 DD 010901H
	DD	04209H
$unwind$process_TF01311 DD 010901H
	DD	04209H
$unwind$process_TF01312 DD 010901H
	DD	04209H
$unwind$process_TF01313 DD 010901H
	DD	04209H
$unwind$process_TF01315 DD 010901H
	DD	04209H
$unwind$process_TF01316 DD 010901H
	DD	04209H
$unwind$process_TF01317 DD 010901H
	DD	04209H
$unwind$process_TF01318 DD 010901H
	DD	04209H
$unwind$process_TF01320 DD 010901H
	DD	04209H
$unwind$process_TF01321 DD 010901H
	DD	04209H
$unwind$process_TF01329 DD 010901H
	DD	04209H
$unwind$process_TF01330 DD 010901H
	DD	04209H
$unwind$process_TF01331 DD 010901H
	DD	04209H
$unwind$process_TF01332 DD 010901H
	DD	04209H
$unwind$process_TF01333 DD 010901H
	DD	04209H
$unwind$process_TF01334 DD 010901H
	DD	04209H
$unwind$process_TF01336 DD 010901H
	DD	04209H
$unwind$finish_reading_rec DD 042019H
	DD	013010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	088H
$unwind$process_args DD 021001H
	DD	01b0110H
$unwind$main DD	032319H
	DD	01e0111H
	DD	0700aH
	DD	imagerel __GSHandlerCheck
	DD	0e8H
$unwind$print_args DD 021f19H
	DD	0110110H
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$parse_option_msglvl DD 011819H
	DD	0e209H
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$parse_option_cpu DD 010901H
	DD	0c209H
$unwind$parse_option_traceopt DD 010901H
	DD	04209H
$unwind$parse_option_count DD 010901H
	DD	08209H
$unwind$parse_option_msg DD 010901H
	DD	08209H
$unwind$parse_option_storage DD 010901H
	DD	08209H
$unwind$parse_option_date DD 021919H
	DD	07006920aH
	DD	imagerel __GSHandlerCheck
	DD	048H
$unwind$parse_option_time DD 021919H
	DD	07006920aH
	DD	imagerel __GSHandlerCheck
	DD	048H
$unwind$parse_option_opcode DD 010901H
	DD	08209H
$unwind$parse_option_unit DD 010901H
	DD	08209H
$unwind$parse_option_codepage DD 010901H
	DD	04209H
$unwind$parse_tracefile DD 020c01H
	DD	011010cH
$unwind$time_zone_offset DD 010401H
	DD	08204H
$unwind$convert_opt_str DD 011701H
	DD	04217H
$unwind$parse_opt_str DD 022919H
	DD	07013f21aH
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$parse_option_error DD 010901H
	DD	0a209H
$unwind$convert_storage_opt_str DD 011701H
	DD	06217H
$unwind$parse_date_str DD 022319H
	DD	0130111H
	DD	imagerel __GSHandlerCheck
	DD	088H
$unwind$parse_time_str DD 022319H
	DD	0190111H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$convert_opcode_opt_str DD 011701H
	DD	08217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s_l DD 011801H
	DD	0a218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
c$ = 32
left_inst$ = 33
right_inst$ = 34
left_mask$ = 35
right_mask$ = 36
i$ = 40
n$ = 48
ishex$ = 80
str$ = 88
pU64$ = 96
pMOPT$ = 104
convert_opcode_opt_str PROC

; 3812 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3813 :     size_t  i, n;
; 3814 :     BYTE    left_inst, right_inst;
; 3815 :     BYTE    left_mask, right_mask;
; 3816 :     char    c;
; 3817 : 
; 3818 :     *pU64 = 0;                  // (not used)

  00017	48 8b 44 24 60	 mov	 rax, QWORD PTR pU64$[rsp]
  0001c	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 3819 : 
; 3820 :     if (!ishex)                 // Instructions always specified in hex

  00023	0f b6 44 24 50	 movzx	 eax, BYTE PTR ishex$[rsp]
  00028	85 c0		 test	 eax, eax
  0002a	75 07		 jne	 SHORT $LN5@convert_op

; 3821 :         return false;

  0002c	32 c0		 xor	 al, al
  0002e	e9 6f 01 00 00	 jmp	 $LN1@convert_op
$LN5@convert_op:

; 3822 : 
; 3823 :     if (1
; 3824 :         && (n = strlen( str )) != 4
; 3825 :         &&  n                  != 8
; 3826 :         &&  n                  != 12

  00033	33 c0		 xor	 eax, eax
  00035	83 f8 01	 cmp	 eax, 1
  00038	74 2e		 je	 SHORT $LN6@convert_op
  0003a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  0003f	e8 00 00 00 00	 call	 strlen
  00044	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax
  00049	48 83 7c 24 30
	04		 cmp	 QWORD PTR n$[rsp], 4
  0004f	74 17		 je	 SHORT $LN6@convert_op
  00051	48 83 7c 24 30
	08		 cmp	 QWORD PTR n$[rsp], 8
  00057	74 0f		 je	 SHORT $LN6@convert_op
  00059	48 83 7c 24 30
	0c		 cmp	 QWORD PTR n$[rsp], 12
  0005f	74 07		 je	 SHORT $LN6@convert_op

; 3827 :     )
; 3828 :         return false;               // Not proper length

  00061	32 c0		 xor	 al, al
  00063	e9 3a 01 00 00	 jmp	 $LN1@convert_op
$LN6@convert_op:

; 3829 : 
; 3830 :     for (i=0; i < n; i += 2)

  00068	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00071	eb 0e		 jmp	 SHORT $LN4@convert_op
$LN2@convert_op:
  00073	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00078	48 83 c0 02	 add	 rax, 2
  0007c	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN4@convert_op:
  00081	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  00086	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  0008b	0f 83 0f 01 00
	00		 jae	 $LN3@convert_op

; 3831 :     {
; 3832 :         c = toupper( str[i] );      // Left nibble

  00091	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00096	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  0009b	48 03 c8	 add	 rcx, rax
  0009e	48 8b c1	 mov	 rax, rcx
  000a1	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000a4	8b c8		 mov	 ecx, eax
  000a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_toupper
  000ac	88 44 24 20	 mov	 BYTE PTR c$[rsp], al

; 3833 : 
; 3834 :         if (is_hex_l( &c, 1 ))

  000b0	ba 01 00 00 00	 mov	 edx, 1
  000b5	48 8d 4c 24 20	 lea	 rcx, QWORD PTR c$[rsp]
  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_hex_l
  000c0	0f b6 c0	 movzx	 eax, al
  000c3	85 c0		 test	 eax, eax
  000c5	74 15		 je	 SHORT $LN7@convert_op

; 3835 :         {
; 3836 :             left_inst = c2x( c );

  000c7	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR c$[rsp]
  000cc	e8 00 00 00 00	 call	 c2x
  000d1	88 44 24 21	 mov	 BYTE PTR left_inst$[rsp], al

; 3837 :             left_mask = 0xF;

  000d5	c6 44 24 23 0f	 mov	 BYTE PTR left_mask$[rsp], 15

; 3838 :         }

  000da	eb 1b		 jmp	 SHORT $LN8@convert_op
$LN7@convert_op:

; 3839 :         else
; 3840 :         {
; 3841 :             if (c != 'X')

  000dc	0f be 44 24 20	 movsx	 eax, BYTE PTR c$[rsp]
  000e1	83 f8 58	 cmp	 eax, 88			; 00000058H
  000e4	74 07		 je	 SHORT $LN9@convert_op

; 3842 :                 return false;

  000e6	32 c0		 xor	 al, al
  000e8	e9 b5 00 00 00	 jmp	 $LN1@convert_op
$LN9@convert_op:

; 3843 :             left_inst = 0;

  000ed	c6 44 24 21 00	 mov	 BYTE PTR left_inst$[rsp], 0

; 3844 :             left_mask = 0;

  000f2	c6 44 24 23 00	 mov	 BYTE PTR left_mask$[rsp], 0
$LN8@convert_op:

; 3845 :         }
; 3846 : 
; 3847 :         c = toupper( str[i+1] );    // Right nibble

  000f7	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  000fc	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00101	48 03 c8	 add	 rcx, rax
  00104	48 8b c1	 mov	 rax, rcx
  00107	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  0010b	8b c8		 mov	 ecx, eax
  0010d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_toupper
  00113	88 44 24 20	 mov	 BYTE PTR c$[rsp], al

; 3848 : 
; 3849 :         if (is_hex_l( &c, 1 ))

  00117	ba 01 00 00 00	 mov	 edx, 1
  0011c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR c$[rsp]
  00121	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_hex_l
  00127	0f b6 c0	 movzx	 eax, al
  0012a	85 c0		 test	 eax, eax
  0012c	74 15		 je	 SHORT $LN10@convert_op

; 3850 :         {
; 3851 :             right_inst = c2x( c );

  0012e	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR c$[rsp]
  00133	e8 00 00 00 00	 call	 c2x
  00138	88 44 24 22	 mov	 BYTE PTR right_inst$[rsp], al

; 3852 :             right_mask = 0xF;

  0013c	c6 44 24 24 0f	 mov	 BYTE PTR right_mask$[rsp], 15

; 3853 :         }

  00141	eb 18		 jmp	 SHORT $LN11@convert_op
$LN10@convert_op:

; 3854 :         else
; 3855 :         {
; 3856 :             if (c != 'X')

  00143	0f be 44 24 20	 movsx	 eax, BYTE PTR c$[rsp]
  00148	83 f8 58	 cmp	 eax, 88			; 00000058H
  0014b	74 04		 je	 SHORT $LN12@convert_op

; 3857 :                 return false;

  0014d	32 c0		 xor	 al, al
  0014f	eb 51		 jmp	 SHORT $LN1@convert_op
$LN12@convert_op:

; 3858 :             right_inst = 0;

  00151	c6 44 24 22 00	 mov	 BYTE PTR right_inst$[rsp], 0

; 3859 :             right_mask = 0;

  00156	c6 44 24 24 00	 mov	 BYTE PTR right_mask$[rsp], 0
$LN11@convert_op:

; 3860 :         }
; 3861 : 
; 3862 :         pMOPT->icode[ i >> 1 ] = (left_inst << 4) | right_inst;

  0015b	0f b6 44 24 21	 movzx	 eax, BYTE PTR left_inst$[rsp]
  00160	c1 e0 04	 shl	 eax, 4
  00163	0f b6 4c 24 22	 movzx	 ecx, BYTE PTR right_inst$[rsp]
  00168	0b c1		 or	 eax, ecx
  0016a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  0016f	48 d1 e9	 shr	 rcx, 1
  00172	48 8b 54 24 68	 mov	 rdx, QWORD PTR pMOPT$[rsp]
  00177	88 44 0a 10	 mov	 BYTE PTR [rdx+rcx+16], al

; 3863 :         pMOPT->imask[ i >> 1 ] = (left_mask << 4) | right_mask;

  0017b	0f b6 44 24 23	 movzx	 eax, BYTE PTR left_mask$[rsp]
  00180	c1 e0 04	 shl	 eax, 4
  00183	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR right_mask$[rsp]
  00188	0b c1		 or	 eax, ecx
  0018a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  0018f	48 d1 e9	 shr	 rcx, 1
  00192	48 8b 54 24 68	 mov	 rdx, QWORD PTR pMOPT$[rsp]
  00197	88 44 0a 16	 mov	 BYTE PTR [rdx+rcx+22], al

; 3864 :     }

  0019b	e9 d3 fe ff ff	 jmp	 $LN2@convert_op
$LN3@convert_op:

; 3865 : 
; 3866 :     return true;

  001a0	b0 01		 mov	 al, 1
$LN1@convert_op:

; 3867 : }

  001a2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001a6	c3		 ret	 0
convert_opcode_opt_str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
c$ = 8
c2x	PROC

; 3807 : {

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl

; 3808 :     if (c <='9') return (c - '0') +  0;

  00004	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  00009	83 f8 39	 cmp	 eax, 57			; 00000039H
  0000c	7f 0c		 jg	 SHORT $LN2@c2x
  0000e	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  00013	83 e8 30	 sub	 eax, 48			; 00000030H
  00016	eb 0a		 jmp	 SHORT $LN1@c2x
  00018	eb 08		 jmp	 SHORT $LN3@c2x
$LN2@c2x:

; 3809 :     else         return (c - 'A') + 10;

  0001a	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  0001f	83 e8 37	 sub	 eax, 55			; 00000037H
$LN3@c2x:
$LN1@c2x:

; 3810 : }

  00022	c3		 ret	 0
c2x	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
NN$ = 32
pDot$ = 40
pCol2$ = 48
pCol1$ = 56
pHH$ = 64
pMM$ = 72
pSS$ = 80
pNN$ = 88
nn_len$ = 96
HH$ = 104
MM$ = 112
SS$ = 120
secs$ = 128
tm$ = 136
__$ArrayPad$ = 176
optstr$ = 208
tv$ = 216
parse_time_str PROC

; 3666 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 3667 :     char *pHH, *pCol1, *pMM, *pCol2, *pSS, *pDot, *pNN;
; 3668 :     U64    HH,           MM,           SS,          NN;
; 3669 :     TM     tm;
; 3670 :     time_t secs;
; 3671 :     size_t nn_len;
; 3672 : 
; 3673 :     if (!(pCol1 = strchr( pHH = optstr, ':' )))

  00023	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR optstr$[rsp]
  0002b	48 89 44 24 40	 mov	 QWORD PTR pHH$[rsp], rax
  00030	ba 3a 00 00 00	 mov	 edx, 58			; 0000003aH
  00035	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pHH$[rsp]
  0003a	e8 00 00 00 00	 call	 strchr
  0003f	48 89 44 24 38	 mov	 QWORD PTR pCol1$[rsp], rax
  00044	48 83 7c 24 38
	00		 cmp	 QWORD PTR pCol1$[rsp], 0
  0004a	75 07		 jne	 SHORT $LN29@parse_time

; 3674 :         return false;

  0004c	32 c0		 xor	 al, al
  0004e	e9 da 03 00 00	 jmp	 $LN1@parse_time
$LN29@parse_time:

; 3675 : 
; 3676 :     if (!(pCol2 = strchr( pMM = pCol1+1, ':' )))

  00053	48 8b 44 24 38	 mov	 rax, QWORD PTR pCol1$[rsp]
  00058	48 ff c0	 inc	 rax
  0005b	48 89 44 24 48	 mov	 QWORD PTR pMM$[rsp], rax
  00060	ba 3a 00 00 00	 mov	 edx, 58			; 0000003aH
  00065	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pMM$[rsp]
  0006a	e8 00 00 00 00	 call	 strchr
  0006f	48 89 44 24 30	 mov	 QWORD PTR pCol2$[rsp], rax
  00074	48 83 7c 24 30
	00		 cmp	 QWORD PTR pCol2$[rsp], 0
  0007a	75 07		 jne	 SHORT $LN30@parse_time

; 3677 :         return false;

  0007c	32 c0		 xor	 al, al
  0007e	e9 aa 03 00 00	 jmp	 $LN1@parse_time
$LN30@parse_time:

; 3678 : 
; 3679 :     if (!(pDot = strchr( pSS = pCol2+1, '.' )))

  00083	48 8b 44 24 30	 mov	 rax, QWORD PTR pCol2$[rsp]
  00088	48 ff c0	 inc	 rax
  0008b	48 89 44 24 50	 mov	 QWORD PTR pSS$[rsp], rax
  00090	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  00095	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pSS$[rsp]
  0009a	e8 00 00 00 00	 call	 strchr
  0009f	48 89 44 24 28	 mov	 QWORD PTR pDot$[rsp], rax
  000a4	48 83 7c 24 28
	00		 cmp	 QWORD PTR pDot$[rsp], 0
  000aa	75 07		 jne	 SHORT $LN31@parse_time

; 3680 :         return false;

  000ac	32 c0		 xor	 al, al
  000ae	e9 7a 03 00 00	 jmp	 $LN1@parse_time
$LN31@parse_time:

; 3681 : 
; 3682 :     pNN = pDot+1;

  000b3	48 8b 44 24 28	 mov	 rax, QWORD PTR pDot$[rsp]
  000b8	48 ff c0	 inc	 rax
  000bb	48 89 44 24 58	 mov	 QWORD PTR pNN$[rsp], rax

; 3683 : 
; 3684 :     *pCol1 = *pCol2 = *pDot = 0;

  000c0	48 8b 44 24 28	 mov	 rax, QWORD PTR pDot$[rsp]
  000c5	c6 00 00	 mov	 BYTE PTR [rax], 0
  000c8	48 8b 44 24 30	 mov	 rax, QWORD PTR pCol2$[rsp]
  000cd	c6 00 00	 mov	 BYTE PTR [rax], 0
  000d0	48 8b 44 24 38	 mov	 rax, QWORD PTR pCol1$[rsp]
  000d5	c6 00 00	 mov	 BYTE PTR [rax], 0

; 3685 : 
; 3686 :     if (0
; 3687 :         || !is_numeric( pHH )
; 3688 :         || !is_numeric( pMM )
; 3689 :         || !is_numeric( pSS )
; 3690 :         || !is_numeric( pNN )

  000d8	33 c0		 xor	 eax, eax
  000da	85 c0		 test	 eax, eax
  000dc	75 48		 jne	 SHORT $LN33@parse_time
  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pHH$[rsp]
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_numeric
  000e9	0f b6 c0	 movzx	 eax, al
  000ec	85 c0		 test	 eax, eax
  000ee	74 36		 je	 SHORT $LN33@parse_time
  000f0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pMM$[rsp]
  000f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_numeric
  000fb	0f b6 c0	 movzx	 eax, al
  000fe	85 c0		 test	 eax, eax
  00100	74 24		 je	 SHORT $LN33@parse_time
  00102	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pSS$[rsp]
  00107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_numeric
  0010d	0f b6 c0	 movzx	 eax, al
  00110	85 c0		 test	 eax, eax
  00112	74 12		 je	 SHORT $LN33@parse_time
  00114	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pNN$[rsp]
  00119	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_numeric
  0011f	0f b6 c0	 movzx	 eax, al
  00122	85 c0		 test	 eax, eax
  00124	75 07		 jne	 SHORT $LN32@parse_time
$LN33@parse_time:

; 3691 :     )
; 3692 :         return false;

  00126	32 c0		 xor	 al, al
  00128	e9 00 03 00 00	 jmp	 $LN1@parse_time
$LN32@parse_time:
$LN4@parse_time:

; 3693 : 
; 3694 :     VERIFY( sscanf( pHH, "%"SCNu64, &HH ) == 1 );

  0012d	4c 8d 44 24 68	 lea	 r8, QWORD PTR HH$[rsp]
  00132	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161993
  00139	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pHH$[rsp]
  0013e	e8 00 00 00 00	 call	 sscanf
  00143	83 f8 01	 cmp	 eax, 1
  00146	74 5c		 je	 SHORT $LN34@parse_time
$LN7@parse_time:
  00148	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG161994
  0014f	41 b8 6e 0e 00
	00		 mov	 r8d, 3694		; 00000e6eH
  00155	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161995
  0015c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161996
  00163	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00169	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0016f	85 c0		 test	 eax, eax
  00171	74 20		 je	 SHORT $LN35@parse_time
  00173	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG161998
  0017a	41 b8 6e 0e 00
	00		 mov	 r8d, 3694		; 00000e6eH
  00180	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161999
  00187	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162000
  0018e	e8 00 00 00 00	 call	 DebuggerTrace
$LN35@parse_time:
  00193	33 c0		 xor	 eax, eax
  00195	85 c0		 test	 eax, eax
  00197	75 af		 jne	 SHORT $LN7@parse_time
  00199	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0019f	85 c0		 test	 eax, eax
  001a1	74 01		 je	 SHORT $LN36@parse_time
  001a3	cc		 int	 3
$LN36@parse_time:
$LN34@parse_time:
  001a4	33 c0		 xor	 eax, eax
  001a6	85 c0		 test	 eax, eax
  001a8	75 83		 jne	 SHORT $LN4@parse_time
$LN10@parse_time:

; 3695 :     VERIFY( sscanf( pMM, "%"SCNu64, &MM ) == 1 );

  001aa	4c 8d 44 24 70	 lea	 r8, QWORD PTR MM$[rsp]
  001af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG162003
  001b6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pMM$[rsp]
  001bb	e8 00 00 00 00	 call	 sscanf
  001c0	83 f8 01	 cmp	 eax, 1
  001c3	74 5c		 je	 SHORT $LN37@parse_time
$LN13@parse_time:
  001c5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG162004
  001cc	41 b8 6f 0e 00
	00		 mov	 r8d, 3695		; 00000e6fH
  001d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG162005
  001d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162006
  001e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  001e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  001ec	85 c0		 test	 eax, eax
  001ee	74 20		 je	 SHORT $LN38@parse_time
  001f0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG162008
  001f7	41 b8 6f 0e 00
	00		 mov	 r8d, 3695		; 00000e6fH
  001fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG162009
  00204	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162010
  0020b	e8 00 00 00 00	 call	 DebuggerTrace
$LN38@parse_time:
  00210	33 c0		 xor	 eax, eax
  00212	85 c0		 test	 eax, eax
  00214	75 af		 jne	 SHORT $LN13@parse_time
  00216	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0021c	85 c0		 test	 eax, eax
  0021e	74 01		 je	 SHORT $LN39@parse_time
  00220	cc		 int	 3
$LN39@parse_time:
$LN37@parse_time:
  00221	33 c0		 xor	 eax, eax
  00223	85 c0		 test	 eax, eax
  00225	75 83		 jne	 SHORT $LN10@parse_time
$LN16@parse_time:

; 3696 :     VERIFY( sscanf( pSS, "%"SCNu64, &SS ) == 1 );

  00227	4c 8d 44 24 78	 lea	 r8, QWORD PTR SS$[rsp]
  0022c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG162013
  00233	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pSS$[rsp]
  00238	e8 00 00 00 00	 call	 sscanf
  0023d	83 f8 01	 cmp	 eax, 1
  00240	74 5c		 je	 SHORT $LN40@parse_time
$LN19@parse_time:
  00242	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG162014
  00249	41 b8 70 0e 00
	00		 mov	 r8d, 3696		; 00000e70H
  0024f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG162015
  00256	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162016
  0025d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00263	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00269	85 c0		 test	 eax, eax
  0026b	74 20		 je	 SHORT $LN41@parse_time
  0026d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG162018
  00274	41 b8 70 0e 00
	00		 mov	 r8d, 3696		; 00000e70H
  0027a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG162019
  00281	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162020
  00288	e8 00 00 00 00	 call	 DebuggerTrace
$LN41@parse_time:
  0028d	33 c0		 xor	 eax, eax
  0028f	85 c0		 test	 eax, eax
  00291	75 af		 jne	 SHORT $LN19@parse_time
  00293	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00299	85 c0		 test	 eax, eax
  0029b	74 01		 je	 SHORT $LN42@parse_time
  0029d	cc		 int	 3
$LN42@parse_time:
$LN40@parse_time:
  0029e	33 c0		 xor	 eax, eax
  002a0	85 c0		 test	 eax, eax
  002a2	75 83		 jne	 SHORT $LN16@parse_time
$LN22@parse_time:

; 3697 :     VERIFY( sscanf( pNN, "%"SCNu64, &NN ) == 1 );

  002a4	4c 8d 44 24 20	 lea	 r8, QWORD PTR NN$[rsp]
  002a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG162023
  002b0	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pNN$[rsp]
  002b5	e8 00 00 00 00	 call	 sscanf
  002ba	83 f8 01	 cmp	 eax, 1
  002bd	74 5c		 je	 SHORT $LN43@parse_time
$LN25@parse_time:
  002bf	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG162024
  002c6	41 b8 71 0e 00
	00		 mov	 r8d, 3697		; 00000e71H
  002cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG162025
  002d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162026
  002da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  002e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  002e6	85 c0		 test	 eax, eax
  002e8	74 20		 je	 SHORT $LN44@parse_time
  002ea	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG162028
  002f1	41 b8 71 0e 00
	00		 mov	 r8d, 3697		; 00000e71H
  002f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG162029
  002fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162030
  00305	e8 00 00 00 00	 call	 DebuggerTrace
$LN44@parse_time:
  0030a	33 c0		 xor	 eax, eax
  0030c	85 c0		 test	 eax, eax
  0030e	75 af		 jne	 SHORT $LN25@parse_time
  00310	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00316	85 c0		 test	 eax, eax
  00318	74 01		 je	 SHORT $LN45@parse_time
  0031a	cc		 int	 3
$LN45@parse_time:
$LN43@parse_time:
  0031b	33 c0		 xor	 eax, eax
  0031d	85 c0		 test	 eax, eax
  0031f	75 83		 jne	 SHORT $LN22@parse_time

; 3698 : 
; 3699 :     if (0
; 3700 :         || HH > 23
; 3701 :         || MM > 59
; 3702 :         || SS > 59
; 3703 :         || NN > 999999

  00321	33 c0		 xor	 eax, eax
  00323	85 c0		 test	 eax, eax
  00325	75 23		 jne	 SHORT $LN47@parse_time
  00327	48 83 7c 24 68
	17		 cmp	 QWORD PTR HH$[rsp], 23
  0032d	77 1b		 ja	 SHORT $LN47@parse_time
  0032f	48 83 7c 24 70
	3b		 cmp	 QWORD PTR MM$[rsp], 59	; 0000003bH
  00335	77 13		 ja	 SHORT $LN47@parse_time
  00337	48 83 7c 24 78
	3b		 cmp	 QWORD PTR SS$[rsp], 59	; 0000003bH
  0033d	77 0b		 ja	 SHORT $LN47@parse_time
  0033f	48 81 7c 24 20
	3f 42 0f 00	 cmp	 QWORD PTR NN$[rsp], 999999 ; 000f423fH
  00348	76 07		 jbe	 SHORT $LN46@parse_time
$LN47@parse_time:

; 3704 :     )
; 3705 :         return false;

  0034a	32 c0		 xor	 al, al
  0034c	e9 dc 00 00 00	 jmp	 $LN1@parse_time
$LN46@parse_time:

; 3706 : 
; 3707 :     tm.tm_hour  =  HH;          // Hours since midnight     - [0,23]

  00351	8b 44 24 68	 mov	 eax, DWORD PTR HH$[rsp]
  00355	89 84 24 90 00
	00 00		 mov	 DWORD PTR tm$[rsp+8], eax

; 3708 :     tm.tm_min   =  MM;          // Minutes after the hour   - [0,59]

  0035c	8b 44 24 70	 mov	 eax, DWORD PTR MM$[rsp]
  00360	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tm$[rsp+4], eax

; 3709 :     tm.tm_sec   =  SS;          // Seconds after the minute - [0,59]

  00367	8b 44 24 78	 mov	 eax, DWORD PTR SS$[rsp]
  0036b	89 84 24 88 00
	00 00		 mov	 DWORD PTR tm$[rsp], eax

; 3710 : 
; 3711 :     tm.tm_year  =  1970-1900;   // Years since 1900

  00372	c7 84 24 9c 00
	00 00 46 00 00
	00		 mov	 DWORD PTR tm$[rsp+20], 70 ; 00000046H

; 3712 :     tm.tm_mon   =  0;           // Months since January     - [0,11]

  0037d	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tm$[rsp+16], 0

; 3713 :     tm.tm_mday  =  1;           // Day of the month         - [1,31]

  00388	c7 84 24 94 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tm$[rsp+12], 1

; 3714 : 
; 3715 :     tm.tm_wday  =  0;           // Days since Sunday        - [0,6]

  00393	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tm$[rsp+24], 0

; 3716 :     tm.tm_yday  =  0;           // Days since January 1     - [0,365]

  0039e	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tm$[rsp+28], 0

; 3717 :     tm.tm_isdst = -1;           // Daylight savings time flag

  003a9	c7 84 24 a8 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tm$[rsp+32], -1

; 3718 : 
; 3719 :     if ((secs = mktime( &tm )) < 0)

  003b4	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR tm$[rsp]
  003bc	e8 00 00 00 00	 call	 mktime
  003c1	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR secs$[rsp], rax
  003c9	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR secs$[rsp], 0
  003d2	7d 04		 jge	 SHORT $LN48@parse_time

; 3720 :         return false;

  003d4	32 c0		 xor	 al, al
  003d6	eb 55		 jmp	 SHORT $LN1@parse_time
$LN48@parse_time:

; 3721 : 
; 3722 :     for (nn_len = strlen( pNN ); nn_len < 6; ++nn_len)

  003d8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pNN$[rsp]
  003dd	e8 00 00 00 00	 call	 strlen
  003e2	48 89 44 24 60	 mov	 QWORD PTR nn_len$[rsp], rax
  003e7	eb 0d		 jmp	 SHORT $LN28@parse_time
$LN26@parse_time:
  003e9	48 8b 44 24 60	 mov	 rax, QWORD PTR nn_len$[rsp]
  003ee	48 ff c0	 inc	 rax
  003f1	48 89 44 24 60	 mov	 QWORD PTR nn_len$[rsp], rax
$LN28@parse_time:
  003f6	48 83 7c 24 60
	06		 cmp	 QWORD PTR nn_len$[rsp], 6
  003fc	73 0d		 jae	 SHORT $LN27@parse_time

; 3723 :         NN *= 10;

  003fe	48 6b 44 24 20
	0a		 imul	 rax, QWORD PTR NN$[rsp], 10
  00404	48 89 44 24 20	 mov	 QWORD PTR NN$[rsp], rax
  00409	eb de		 jmp	 SHORT $LN26@parse_time
$LN27@parse_time:

; 3724 : 
; 3725 :     tv->tv_sec  = secs;

  0040b	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tv$[rsp]
  00413	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR secs$[rsp]
  0041a	89 08		 mov	 DWORD PTR [rax], ecx

; 3726 :     tv->tv_usec = NN;

  0041c	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tv$[rsp]
  00424	8b 4c 24 20	 mov	 ecx, DWORD PTR NN$[rsp]
  00428	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 3727 : 
; 3728 :     return true;

  0042b	b0 01		 mov	 al, 1
$LN1@parse_time:

; 3729 : }

  0042d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00435	48 33 cc	 xor	 rcx, rsp
  00438	e8 00 00 00 00	 call	 __security_check_cookie
  0043d	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00444	c3		 ret	 0
parse_time_str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
pSlash2$ = 32
pSlash1$ = 40
pYY$ = 48
pMM$ = 56
YY$ = 64
MM$ = 72
DD$ = 80
pDD$ = 88
tm$ = 96
__$ArrayPad$ = 136
optstr$ = 160
tt$ = 168
parse_date_str PROC

; 3608 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 3609 :     char *pYY, *pSlash1, *pMM, *pSlash2, *pDD;
; 3610 :     U64    YY,             MM,             DD;
; 3611 :     TM     tm;
; 3612 : 
; 3613 :     if (!(pSlash1 = strchr( pYY = optstr, '/' )))

  00023	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR optstr$[rsp]
  0002b	48 89 44 24 30	 mov	 QWORD PTR pYY$[rsp], rax
  00030	ba 2f 00 00 00	 mov	 edx, 47			; 0000002fH
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pYY$[rsp]
  0003a	e8 00 00 00 00	 call	 strchr
  0003f	48 89 44 24 28	 mov	 QWORD PTR pSlash1$[rsp], rax
  00044	48 83 7c 24 28
	00		 cmp	 QWORD PTR pSlash1$[rsp], 0
  0004a	75 07		 jne	 SHORT $LN20@parse_date

; 3614 :         return false;

  0004c	32 c0		 xor	 al, al
  0004e	e9 c3 02 00 00	 jmp	 $LN1@parse_date
$LN20@parse_date:

; 3615 : 
; 3616 :     if (!(pSlash2 = strchr( pMM = pSlash1+1, '/' )))

  00053	48 8b 44 24 28	 mov	 rax, QWORD PTR pSlash1$[rsp]
  00058	48 ff c0	 inc	 rax
  0005b	48 89 44 24 38	 mov	 QWORD PTR pMM$[rsp], rax
  00060	ba 2f 00 00 00	 mov	 edx, 47			; 0000002fH
  00065	48 8b 4c 24 38	 mov	 rcx, QWORD PTR pMM$[rsp]
  0006a	e8 00 00 00 00	 call	 strchr
  0006f	48 89 44 24 20	 mov	 QWORD PTR pSlash2$[rsp], rax
  00074	48 83 7c 24 20
	00		 cmp	 QWORD PTR pSlash2$[rsp], 0
  0007a	75 07		 jne	 SHORT $LN21@parse_date

; 3617 :         return false;

  0007c	32 c0		 xor	 al, al
  0007e	e9 93 02 00 00	 jmp	 $LN1@parse_date
$LN21@parse_date:

; 3618 : 
; 3619 :     pDD = pSlash2+1;

  00083	48 8b 44 24 20	 mov	 rax, QWORD PTR pSlash2$[rsp]
  00088	48 ff c0	 inc	 rax
  0008b	48 89 44 24 58	 mov	 QWORD PTR pDD$[rsp], rax

; 3620 : 
; 3621 :     *pSlash1 = *pSlash2 = 0;

  00090	48 8b 44 24 20	 mov	 rax, QWORD PTR pSlash2$[rsp]
  00095	c6 00 00	 mov	 BYTE PTR [rax], 0
  00098	48 8b 44 24 28	 mov	 rax, QWORD PTR pSlash1$[rsp]
  0009d	c6 00 00	 mov	 BYTE PTR [rax], 0

; 3622 : 
; 3623 :     if (0
; 3624 :         || !is_numeric( pYY )
; 3625 :         || !is_numeric( pMM )
; 3626 :         || !is_numeric( pDD )

  000a0	33 c0		 xor	 eax, eax
  000a2	85 c0		 test	 eax, eax
  000a4	75 36		 jne	 SHORT $LN23@parse_date
  000a6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pYY$[rsp]
  000ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_numeric
  000b1	0f b6 c0	 movzx	 eax, al
  000b4	85 c0		 test	 eax, eax
  000b6	74 24		 je	 SHORT $LN23@parse_date
  000b8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR pMM$[rsp]
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_numeric
  000c3	0f b6 c0	 movzx	 eax, al
  000c6	85 c0		 test	 eax, eax
  000c8	74 12		 je	 SHORT $LN23@parse_date
  000ca	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pDD$[rsp]
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_numeric
  000d5	0f b6 c0	 movzx	 eax, al
  000d8	85 c0		 test	 eax, eax
  000da	75 07		 jne	 SHORT $LN22@parse_date
$LN23@parse_date:

; 3627 :     )
; 3628 :         return false;

  000dc	32 c0		 xor	 al, al
  000de	e9 33 02 00 00	 jmp	 $LN1@parse_date
$LN22@parse_date:
$LN4@parse_date:

; 3629 : 
; 3630 :     VERIFY( sscanf( pYY, "%"SCNu64, &YY ) == 1 );

  000e3	4c 8d 44 24 40	 lea	 r8, QWORD PTR YY$[rsp]
  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161908
  000ef	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pYY$[rsp]
  000f4	e8 00 00 00 00	 call	 sscanf
  000f9	83 f8 01	 cmp	 eax, 1
  000fc	74 5c		 je	 SHORT $LN24@parse_date
$LN7@parse_date:
  000fe	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG161909
  00105	41 b8 2e 0e 00
	00		 mov	 r8d, 3630		; 00000e2eH
  0010b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161910
  00112	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161911
  00119	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0011f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00125	85 c0		 test	 eax, eax
  00127	74 20		 je	 SHORT $LN25@parse_date
  00129	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG161913
  00130	41 b8 2e 0e 00
	00		 mov	 r8d, 3630		; 00000e2eH
  00136	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161914
  0013d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161915
  00144	e8 00 00 00 00	 call	 DebuggerTrace
$LN25@parse_date:
  00149	33 c0		 xor	 eax, eax
  0014b	85 c0		 test	 eax, eax
  0014d	75 af		 jne	 SHORT $LN7@parse_date
  0014f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00155	85 c0		 test	 eax, eax
  00157	74 01		 je	 SHORT $LN26@parse_date
  00159	cc		 int	 3
$LN26@parse_date:
$LN24@parse_date:
  0015a	33 c0		 xor	 eax, eax
  0015c	85 c0		 test	 eax, eax
  0015e	75 83		 jne	 SHORT $LN4@parse_date
$LN10@parse_date:

; 3631 :     VERIFY( sscanf( pMM, "%"SCNu64, &MM ) == 1 );

  00160	4c 8d 44 24 48	 lea	 r8, QWORD PTR MM$[rsp]
  00165	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161918
  0016c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR pMM$[rsp]
  00171	e8 00 00 00 00	 call	 sscanf
  00176	83 f8 01	 cmp	 eax, 1
  00179	74 5c		 je	 SHORT $LN27@parse_date
$LN13@parse_date:
  0017b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG161919
  00182	41 b8 2f 0e 00
	00		 mov	 r8d, 3631		; 00000e2fH
  00188	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161920
  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161921
  00196	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0019c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  001a2	85 c0		 test	 eax, eax
  001a4	74 20		 je	 SHORT $LN28@parse_date
  001a6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG161923
  001ad	41 b8 2f 0e 00
	00		 mov	 r8d, 3631		; 00000e2fH
  001b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161924
  001ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161925
  001c1	e8 00 00 00 00	 call	 DebuggerTrace
$LN28@parse_date:
  001c6	33 c0		 xor	 eax, eax
  001c8	85 c0		 test	 eax, eax
  001ca	75 af		 jne	 SHORT $LN13@parse_date
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  001d2	85 c0		 test	 eax, eax
  001d4	74 01		 je	 SHORT $LN29@parse_date
  001d6	cc		 int	 3
$LN29@parse_date:
$LN27@parse_date:
  001d7	33 c0		 xor	 eax, eax
  001d9	85 c0		 test	 eax, eax
  001db	75 83		 jne	 SHORT $LN10@parse_date
$LN16@parse_date:

; 3632 :     VERIFY( sscanf( pDD, "%"SCNu64, &DD ) == 1 );

  001dd	4c 8d 44 24 50	 lea	 r8, QWORD PTR DD$[rsp]
  001e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161928
  001e9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pDD$[rsp]
  001ee	e8 00 00 00 00	 call	 sscanf
  001f3	83 f8 01	 cmp	 eax, 1
  001f6	74 5c		 je	 SHORT $LN30@parse_date
$LN19@parse_date:
  001f8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG161929
  001ff	41 b8 30 0e 00
	00		 mov	 r8d, 3632		; 00000e30H
  00205	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161930
  0020c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161931
  00213	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00219	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0021f	85 c0		 test	 eax, eax
  00221	74 20		 je	 SHORT $LN31@parse_date
  00223	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG161933
  0022a	41 b8 30 0e 00
	00		 mov	 r8d, 3632		; 00000e30H
  00230	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161934
  00237	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161935
  0023e	e8 00 00 00 00	 call	 DebuggerTrace
$LN31@parse_date:
  00243	33 c0		 xor	 eax, eax
  00245	85 c0		 test	 eax, eax
  00247	75 af		 jne	 SHORT $LN19@parse_date
  00249	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0024f	85 c0		 test	 eax, eax
  00251	74 01		 je	 SHORT $LN32@parse_date
  00253	cc		 int	 3
$LN32@parse_date:
$LN30@parse_date:
  00254	33 c0		 xor	 eax, eax
  00256	85 c0		 test	 eax, eax
  00258	75 83		 jne	 SHORT $LN16@parse_date

; 3633 : 
; 3634 :     if (0
; 3635 :         || YY <     1
; 3636 :         || YY >= 2038           // (2038 epoch bug)
; 3637 :         || MM <     1
; 3638 :         || MM >    12
; 3639 :         || DD <     1
; 3640 :         || DD >    31

  0025a	33 c0		 xor	 eax, eax
  0025c	85 c0		 test	 eax, eax
  0025e	75 33		 jne	 SHORT $LN34@parse_date
  00260	48 83 7c 24 40
	01		 cmp	 QWORD PTR YY$[rsp], 1
  00266	72 2b		 jb	 SHORT $LN34@parse_date
  00268	48 81 7c 24 40
	f6 07 00 00	 cmp	 QWORD PTR YY$[rsp], 2038 ; 000007f6H
  00271	73 20		 jae	 SHORT $LN34@parse_date
  00273	48 83 7c 24 48
	01		 cmp	 QWORD PTR MM$[rsp], 1
  00279	72 18		 jb	 SHORT $LN34@parse_date
  0027b	48 83 7c 24 48
	0c		 cmp	 QWORD PTR MM$[rsp], 12
  00281	77 10		 ja	 SHORT $LN34@parse_date
  00283	48 83 7c 24 50
	01		 cmp	 QWORD PTR DD$[rsp], 1
  00289	72 08		 jb	 SHORT $LN34@parse_date
  0028b	48 83 7c 24 50
	1f		 cmp	 QWORD PTR DD$[rsp], 31
  00291	76 04		 jbe	 SHORT $LN33@parse_date
$LN34@parse_date:

; 3641 :     )
; 3642 :         return false;

  00293	32 c0		 xor	 al, al
  00295	eb 7f		 jmp	 SHORT $LN1@parse_date
$LN33@parse_date:

; 3643 : 
; 3644 :     tm.tm_year  =  YY-1900;     // Years since 1900

  00297	48 8b 44 24 40	 mov	 rax, QWORD PTR YY$[rsp]
  0029c	48 2d 6c 07 00
	00		 sub	 rax, 1900		; 0000076cH
  002a2	89 44 24 74	 mov	 DWORD PTR tm$[rsp+20], eax

; 3645 :     tm.tm_mon   =  MM-1;        // Months since January     - [0,11]

  002a6	48 8b 44 24 48	 mov	 rax, QWORD PTR MM$[rsp]
  002ab	48 ff c8	 dec	 rax
  002ae	89 44 24 70	 mov	 DWORD PTR tm$[rsp+16], eax

; 3646 :     tm.tm_mday  =  DD;          // Day of the month         - [1,31]

  002b2	8b 44 24 50	 mov	 eax, DWORD PTR DD$[rsp]
  002b6	89 44 24 6c	 mov	 DWORD PTR tm$[rsp+12], eax

; 3647 : 
; 3648 :     tm.tm_hour  =  0;           // Hours since midnight     - [0,23]

  002ba	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tm$[rsp+8], 0

; 3649 :     tm.tm_min   =  0;           // Minutes after the hour   - [0,59]

  002c2	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tm$[rsp+4], 0

; 3650 :     tm.tm_sec   =  0;           // Seconds after the minute - [0,59]

  002ca	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tm$[rsp], 0

; 3651 : 
; 3652 :     tm.tm_wday  =  0;           // Days since Sunday        - [0,6]

  002d2	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tm$[rsp+24], 0

; 3653 :     tm.tm_yday  =  0;           // Days since January 1     - [0,365]

  002da	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tm$[rsp+28], 0

; 3654 :     tm.tm_isdst = -1;           // Daylight savings time flag

  002e2	c7 84 24 80 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tm$[rsp+32], -1

; 3655 : 
; 3656 :     if ((*tt = mktime( &tm )) < 0)

  002ed	48 8d 4c 24 60	 lea	 rcx, QWORD PTR tm$[rsp]
  002f2	e8 00 00 00 00	 call	 mktime
  002f7	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tt$[rsp]
  002ff	48 89 01	 mov	 QWORD PTR [rcx], rax
  00302	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tt$[rsp]
  0030a	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0030e	7d 04		 jge	 SHORT $LN35@parse_date

; 3657 :         return false;

  00310	32 c0		 xor	 al, al
  00312	eb 02		 jmp	 SHORT $LN1@parse_date
$LN35@parse_date:

; 3658 : 
; 3659 :     return true;

  00314	b0 01		 mov	 al, 1
$LN1@parse_date:

; 3660 : }

  00316	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0031e	48 33 cc	 xor	 rcx, rsp
  00321	e8 00 00 00 00	 call	 __security_check_cookie
  00326	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0032d	c3		 ret	 0
parse_date_str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
str0$1 = 32
tv84 = 36
ishex$ = 64
str$ = 72
pU64$ = 80
pMOPT$ = 88
convert_storage_opt_str PROC

; 3561 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3562 :     if (!ishex)                 // storage addrs must always be in hex

  00017	0f b6 44 24 40	 movzx	 eax, BYTE PTR ishex$[rsp]
  0001c	85 c0		 test	 eax, eax
  0001e	75 07		 jne	 SHORT $LN8@convert_st

; 3563 :         return false;

  00020	32 c0		 xor	 al, al
  00022	e9 23 01 00 00	 jmp	 $LN1@convert_st
$LN8@convert_st:

; 3564 : 
; 3565 :     if (str[1] == ':')

  00027	b8 01 00 00 00	 mov	 eax, 1
  0002c	48 6b c0 01	 imul	 rax, rax, 1
  00030	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  00035	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00039	83 f8 3a	 cmp	 eax, 58			; 0000003aH
  0003c	75 77		 jne	 SHORT $LN9@convert_st

; 3566 :     {
; 3567 :         char str0 = toupper( str[0] );

  0003e	b8 01 00 00 00	 mov	 eax, 1
  00043	48 6b c0 00	 imul	 rax, rax, 0
  00047	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  0004c	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00050	8b c8		 mov	 ecx, eax
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_toupper
  00058	88 44 24 20	 mov	 BYTE PTR str0$1[rsp], al

; 3568 : 
; 3569 :         if (1
; 3570 :             && str0 != 'V'      // Virtual address?
; 3571 :             && str0 != 'R'      // Real address?

  0005c	33 c0		 xor	 eax, eax
  0005e	83 f8 01	 cmp	 eax, 1
  00061	74 1b		 je	 SHORT $LN10@convert_st
  00063	0f be 44 24 20	 movsx	 eax, BYTE PTR str0$1[rsp]
  00068	83 f8 56	 cmp	 eax, 86			; 00000056H
  0006b	74 11		 je	 SHORT $LN10@convert_st
  0006d	0f be 44 24 20	 movsx	 eax, BYTE PTR str0$1[rsp]
  00072	83 f8 52	 cmp	 eax, 82			; 00000052H
  00075	74 07		 je	 SHORT $LN10@convert_st

; 3572 :         )
; 3573 :             return false;

  00077	32 c0		 xor	 al, al
  00079	e9 cc 00 00 00	 jmp	 $LN1@convert_st
$LN10@convert_st:

; 3574 : 
; 3575 :         pMOPT->isreal = (str0 == 'R');

  0007e	0f be 44 24 20	 movsx	 eax, BYTE PTR str0$1[rsp]
  00083	83 f8 52	 cmp	 eax, 82			; 00000052H
  00086	75 0a		 jne	 SHORT $LN16@convert_st
  00088	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
  00090	eb 08		 jmp	 SHORT $LN17@convert_st
$LN16@convert_st:
  00092	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
$LN17@convert_st:
  0009a	48 8b 44 24 58	 mov	 rax, QWORD PTR pMOPT$[rsp]
  0009f	0f b6 4c 24 24	 movzx	 ecx, BYTE PTR tv84[rsp]
  000a4	88 48 1d	 mov	 BYTE PTR [rax+29], cl

; 3576 :         str += 2; // (get past "V:" or "R:")

  000a7	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  000ac	48 83 c0 02	 add	 rax, 2
  000b0	48 89 44 24 48	 mov	 QWORD PTR str$[rsp], rax
$LN9@convert_st:

; 3577 :     }
; 3578 : 
; 3579 :     if (!is_hex( str ))

  000b5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_hex
  000c0	0f b6 c0	 movzx	 eax, al
  000c3	85 c0		 test	 eax, eax
  000c5	75 04		 jne	 SHORT $LN11@convert_st

; 3580 :         return false;

  000c7	32 c0		 xor	 al, al
  000c9	eb 7f		 jmp	 SHORT $LN1@convert_st
$LN11@convert_st:
$LN4@convert_st:

; 3581 : 
; 3582 :     VERIFY( sscanf( str, "%"SCNx64, pU64 ) == 1 );

  000cb	4c 8b 44 24 50	 mov	 r8, QWORD PTR pU64$[rsp]
  000d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161853
  000d7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR str$[rsp]
  000dc	e8 00 00 00 00	 call	 sscanf
  000e1	83 f8 01	 cmp	 eax, 1
  000e4	74 5c		 je	 SHORT $LN12@convert_st
$LN7@convert_st:
  000e6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG161854
  000ed	41 b8 fe 0d 00
	00		 mov	 r8d, 3582		; 00000dfeH
  000f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161855
  000fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161856
  00101	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0010d	85 c0		 test	 eax, eax
  0010f	74 20		 je	 SHORT $LN13@convert_st
  00111	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG161858
  00118	41 b8 fe 0d 00
	00		 mov	 r8d, 3582		; 00000dfeH
  0011e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161859
  00125	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161860
  0012c	e8 00 00 00 00	 call	 DebuggerTrace
$LN13@convert_st:
  00131	33 c0		 xor	 eax, eax
  00133	85 c0		 test	 eax, eax
  00135	75 af		 jne	 SHORT $LN7@convert_st
  00137	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0013d	85 c0		 test	 eax, eax
  0013f	74 01		 je	 SHORT $LN14@convert_st
  00141	cc		 int	 3
$LN14@convert_st:
$LN12@convert_st:
  00142	33 c0		 xor	 eax, eax
  00144	85 c0		 test	 eax, eax
  00146	75 83		 jne	 SHORT $LN4@convert_st

; 3583 :     return true;

  00148	b0 01		 mov	 al, 1
$LN1@convert_st:

; 3584 : }

  0014a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0014e	c3		 ret	 0
convert_storage_opt_str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
optname$ = 96
parse_option_error PROC

; 3417 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 3418 :     // "Option \"%s\" value \"%s\" is invalid"
; 3419 :     FWRMSG( stderr, HHC03205, "E", optname, optarg );

  00009	b9 02 00 00 00	 mov	 ecx, 2
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00014	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_optarg
  0001b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0001e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00023	48 8b 4c 24 60	 mov	 rcx, QWORD PTR optname$[rsp]
  00028	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161758
  00034	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161759
  00040	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00045	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00050	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161760
  00057	ba 5b 0d 00 00	 mov	 edx, 3419		; 00000d5bH
  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161761
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3420 :     arg_errs++;

  00069	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  0006f	ff c0		 inc	 eax
  00071	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax

; 3421 : }

  00077	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0007b	c3		 ret	 0
parse_option_error ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
range$ = 32
dotlen$ = 33
n$ = 36
i$ = 40
tv138 = 44
tv140 = 48
k$ = 52
$T1 = 56
$T2 = 64
$T3 = 72
work$ = 80
__$ArrayPad$ = 112
ishex$ = 144
rangeok$ = 152
optstr$ = 160
pCNVOPT$ = 168
ppMOPT$ = 176
nMOPT$ = 184
parse_opt_str PROC

; 3285 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	57		 push	 rdi
  00013	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00021	48 33 c4	 xor	 rax, rsp
  00024	48 89 44 24 70	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 3286 :     int   i, n, k;
; 3287 :     char  work[32] = {0};

  00029	48 8d 44 24 50	 lea	 rax, QWORD PTR work$[rsp]
  0002e	48 8b f8	 mov	 rdi, rax
  00031	33 c0		 xor	 eax, eax
  00033	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00038	f3 aa		 rep stosb

; 3288 :     bool  range = false;    // "xxx-xxx"

  0003a	c6 44 24 20 00	 mov	 BYTE PTR range$[rsp], 0

; 3289 :     bool  dotlen = false;   // "xxx.xxx"

  0003f	c6 44 24 21 00	 mov	 BYTE PTR dotlen$[rsp], 0

; 3290 : 
; 3291 :     *nMOPT = 0;

  00044	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  0004c	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 3292 :     *ppMOPT = malloc(   sizeof( MOPT ));

  00052	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0005d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  00065	48 89 01	 mov	 QWORD PTR [rcx], rax

; 3293 :     memset( *ppMOPT, 0, sizeof( MOPT ));

  00068	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR ppMOPT$[rsp]
  00070	48 8b 38	 mov	 rdi, QWORD PTR [rax]
  00073	33 c0		 xor	 eax, eax
  00075	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0007a	f3 aa		 rep stosb

; 3294 : 
; 3295 :     if (!pCNVOPT)                   // (if not specified)

  0007c	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR pCNVOPT$[rsp], 0
  00085	75 0f		 jne	 SHORT $LN5@parse_opt_

; 3296 :         pCNVOPT = &convert_opt_str; // (then use default)

  00087	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:convert_opt_str
  0008e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR pCNVOPT$[rsp], rax
$LN5@parse_opt_:

; 3297 : 
; 3298 :     for (i=0, n=0, k = strlen( optstr ); i < k; ++i)

  00096	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0009e	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  000a6	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR optstr$[rsp]
  000ae	e8 00 00 00 00	 call	 strlen
  000b3	89 44 24 34	 mov	 DWORD PTR k$[rsp], eax
  000b7	eb 0a		 jmp	 SHORT $LN4@parse_opt_
$LN2@parse_opt_:
  000b9	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  000bd	ff c0		 inc	 eax
  000bf	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax
$LN4@parse_opt_:
  000c3	8b 44 24 34	 mov	 eax, DWORD PTR k$[rsp]
  000c7	39 44 24 28	 cmp	 DWORD PTR i$[rsp], eax
  000cb	0f 8d fb 03 00
	00		 jge	 $LN3@parse_opt_

; 3299 :     {
; 3300 :         if (0
; 3301 :             || optstr[i] == '-'
; 3302 :             || optstr[i] == '.'

  000d1	33 c0		 xor	 eax, eax
  000d3	85 c0		 test	 eax, eax
  000d5	75 30		 jne	 SHORT $LN8@parse_opt_
  000d7	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  000dc	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR optstr$[rsp]
  000e4	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  000e8	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  000eb	74 1a		 je	 SHORT $LN8@parse_opt_
  000ed	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  000f2	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR optstr$[rsp]
  000fa	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  000fe	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00101	0f 85 11 01 00
	00		 jne	 $LN6@parse_opt_
$LN8@parse_opt_:

; 3303 :         )
; 3304 :         {
; 3305 :             if (!rangeok)           // Is range syntax allowed?

  00107	0f b6 84 24 98
	00 00 00	 movzx	 eax, BYTE PTR rangeok$[rsp]
  0010f	85 c0		 test	 eax, eax
  00111	75 07		 jne	 SHORT $LN9@parse_opt_

; 3306 :                 return false;       // No, error

  00113	32 c0		 xor	 al, al
  00115	e9 b7 05 00 00	 jmp	 $LN1@parse_opt_
$LN9@parse_opt_:

; 3307 : 
; 3308 :             work[n] = 0;            // Mark end of value string

  0011a	48 63 44 24 24	 movsxd	 rax, DWORD PTR n$[rsp]
  0011f	48 89 44 24 38	 mov	 QWORD PTR $T1[rsp], rax
  00124	48 83 7c 24 38
	20		 cmp	 QWORD PTR $T1[rsp], 32	; 00000020H
  0012a	73 02		 jae	 SHORT $LN29@parse_opt_
  0012c	eb 05		 jmp	 SHORT $LN30@parse_opt_
$LN29@parse_opt_:
  0012e	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN30@parse_opt_:
  00133	48 8b 44 24 38	 mov	 rax, QWORD PTR $T1[rsp]
  00138	c6 44 04 50 00	 mov	 BYTE PTR work$[rsp+rax], 0

; 3309 :             n = 0;                  // Next char begins new value

  0013d	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0

; 3310 : 
; 3311 :             if (range)              // Not first time here? ("xx-xx-xx")

  00145	0f b6 44 24 20	 movzx	 eax, BYTE PTR range$[rsp]
  0014a	85 c0		 test	 eax, eax
  0014c	74 07		 je	 SHORT $LN10@parse_opt_

; 3312 :                 return false;       // Yes, error

  0014e	32 c0		 xor	 al, al
  00150	e9 7c 05 00 00	 jmp	 $LN1@parse_opt_
$LN10@parse_opt_:

; 3313 : 
; 3314 :             range = true;           // Remember range delimiter seen

  00155	c6 44 24 20 01	 mov	 BYTE PTR range$[rsp], 1

; 3315 :             dotlen = (optstr[i] == '.');

  0015a	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  0015f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR optstr$[rsp]
  00167	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0016b	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0016e	75 0a		 jne	 SHORT $LN31@parse_opt_
  00170	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv138[rsp], 1
  00178	eb 08		 jmp	 SHORT $LN32@parse_opt_
$LN31@parse_opt_:
  0017a	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv138[rsp], 0
$LN32@parse_opt_:
  00182	83 7c 24 2c 00	 cmp	 DWORD PTR tv138[rsp], 0
  00187	75 0a		 jne	 SHORT $LN33@parse_opt_
  00189	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv140[rsp], 0
  00191	eb 08		 jmp	 SHORT $LN34@parse_opt_
$LN33@parse_opt_:
  00193	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv140[rsp], 1
$LN34@parse_opt_:
  0019b	0f b6 44 24 30	 movzx	 eax, BYTE PTR tv140[rsp]
  001a0	88 44 24 21	 mov	 BYTE PTR dotlen$[rsp], al

; 3316 : 
; 3317 :             // Save opt1 start of range
; 3318 : 
; 3319 :             (*ppMOPT)[ *nMOPT ].isrange = true;

  001a4	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  001ac	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  001af	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  001b3	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  001bb	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001be	c6 44 01 1c 01	 mov	 BYTE PTR [rcx+rax+28], 1

; 3320 : 
; 3321 :             if (!pCNVOPT( ishex, work, &(*ppMOPT)[ *nMOPT ].opt1, *ppMOPT ))

  001c3	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  001cb	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  001ce	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  001d2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  001da	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001dd	48 03 c8	 add	 rcx, rax
  001e0	48 8b c1	 mov	 rax, rcx
  001e3	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  001eb	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  001ee	4c 8b c0	 mov	 r8, rax
  001f1	48 8d 54 24 50	 lea	 rdx, QWORD PTR work$[rsp]
  001f6	0f b6 8c 24 90
	00 00 00	 movzx	 ecx, BYTE PTR ishex$[rsp]
  001fe	ff 94 24 a8 00
	00 00		 call	 QWORD PTR pCNVOPT$[rsp]
  00205	0f b6 c0	 movzx	 eax, al
  00208	85 c0		 test	 eax, eax
  0020a	75 07		 jne	 SHORT $LN11@parse_opt_

; 3322 :                 return false;

  0020c	32 c0		 xor	 al, al
  0020e	e9 be 04 00 00	 jmp	 $LN1@parse_opt_
$LN11@parse_opt_:

; 3323 :         }

  00213	e9 af 02 00 00	 jmp	 $LN7@parse_opt_
$LN6@parse_opt_:

; 3324 :         else if (optstr[i] == ',')

  00218	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  0021d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR optstr$[rsp]
  00225	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00229	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  0022c	0f 85 63 02 00
	00		 jne	 $LN12@parse_opt_

; 3325 :         {
; 3326 :             work[n] = 0;            // Mark end of value string

  00232	48 63 44 24 24	 movsxd	 rax, DWORD PTR n$[rsp]
  00237	48 89 44 24 40	 mov	 QWORD PTR $T2[rsp], rax
  0023c	48 83 7c 24 40
	20		 cmp	 QWORD PTR $T2[rsp], 32	; 00000020H
  00242	73 02		 jae	 SHORT $LN35@parse_opt_
  00244	eb 05		 jmp	 SHORT $LN36@parse_opt_
$LN35@parse_opt_:
  00246	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN36@parse_opt_:
  0024b	48 8b 44 24 40	 mov	 rax, QWORD PTR $T2[rsp]
  00250	c6 44 04 50 00	 mov	 BYTE PTR work$[rsp+rax], 0

; 3327 :             n = 0;                  // Next char begins new value

  00255	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0

; 3328 : 
; 3329 :             if (range)              // Was previous delimiter range?

  0025d	0f b6 44 24 20	 movzx	 eax, BYTE PTR range$[rsp]
  00262	85 c0		 test	 eax, eax
  00264	0f 84 4d 01 00
	00		 je	 $LN14@parse_opt_

; 3330 :             {
; 3331 :                 // Save opt2 end of range
; 3332 : 
; 3333 :                 (*ppMOPT)[ *nMOPT ].isrange = true;

  0026a	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  00272	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00275	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00279	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  00281	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00284	c6 44 01 1c 01	 mov	 BYTE PTR [rcx+rax+28], 1

; 3334 : 
; 3335 :                 if (!pCNVOPT( ishex, work, &(*ppMOPT)[ *nMOPT ].opt2, *ppMOPT ))

  00289	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  00291	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00294	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00298	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  002a0	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  002a3	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  002a8	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  002b0	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  002b3	4c 8b c0	 mov	 r8, rax
  002b6	48 8d 54 24 50	 lea	 rdx, QWORD PTR work$[rsp]
  002bb	0f b6 8c 24 90
	00 00 00	 movzx	 ecx, BYTE PTR ishex$[rsp]
  002c3	ff 94 24 a8 00
	00 00		 call	 QWORD PTR pCNVOPT$[rsp]
  002ca	0f b6 c0	 movzx	 eax, al
  002cd	85 c0		 test	 eax, eax
  002cf	75 07		 jne	 SHORT $LN16@parse_opt_

; 3336 :                     return false;

  002d1	32 c0		 xor	 al, al
  002d3	e9 f9 03 00 00	 jmp	 $LN1@parse_opt_
$LN16@parse_opt_:

; 3337 : 
; 3338 :                 if (dotlen)

  002d8	0f b6 44 24 21	 movzx	 eax, BYTE PTR dotlen$[rsp]
  002dd	85 c0		 test	 eax, eax
  002df	0f 84 c6 00 00
	00		 je	 $LN17@parse_opt_

; 3339 :                 {
; 3340 :                     if (!(*ppMOPT)[ *nMOPT ].opt2)

  002e5	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  002ed	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  002f0	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  002f4	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  002fc	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  002ff	48 83 7c 01 08
	00		 cmp	 QWORD PTR [rcx+rax+8], 0
  00305	75 07		 jne	 SHORT $LN18@parse_opt_

; 3341 :                         return false;

  00307	32 c0		 xor	 al, al
  00309	e9 c3 03 00 00	 jmp	 $LN1@parse_opt_
$LN18@parse_opt_:

; 3342 : 
; 3343 :                     (*ppMOPT)[ *nMOPT ].opt2 += (*ppMOPT)[ *nMOPT ].opt1;

  0030e	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  00316	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00319	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0031d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  00325	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00328	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR nMOPT$[rsp]
  00330	48 63 12	 movsxd	 rdx, DWORD PTR [rdx]
  00333	48 6b d2 20	 imul	 rdx, rdx, 32		; 00000020H
  00337	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR ppMOPT$[rsp]
  0033f	48 8b 3f	 mov	 rdi, QWORD PTR [rdi]
  00342	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  00347	48 03 04 17	 add	 rax, QWORD PTR [rdi+rdx]
  0034b	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR nMOPT$[rsp]
  00353	48 63 09	 movsxd	 rcx, DWORD PTR [rcx]
  00356	48 6b c9 20	 imul	 rcx, rcx, 32		; 00000020H
  0035a	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR ppMOPT$[rsp]
  00362	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00365	48 89 44 0a 08	 mov	 QWORD PTR [rdx+rcx+8], rax

; 3344 :                     (*ppMOPT)[ *nMOPT ].opt2--;

  0036a	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  00372	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00375	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00379	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  00381	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00384	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  00389	48 ff c8	 dec	 rax
  0038c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR nMOPT$[rsp]
  00394	48 63 09	 movsxd	 rcx, DWORD PTR [rcx]
  00397	48 6b c9 20	 imul	 rcx, rcx, 32		; 00000020H
  0039b	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR ppMOPT$[rsp]
  003a3	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  003a6	48 89 44 0a 08	 mov	 QWORD PTR [rdx+rcx+8], rax
$LN17@parse_opt_:

; 3345 :                 }
; 3346 : 
; 3347 :                 range = false;      // Range complete; reset flag

  003ab	c6 44 24 20 00	 mov	 BYTE PTR range$[rsp], 0

; 3348 :                 dotlen = false;     // Range complete; reset flag

  003b0	c6 44 24 21 00	 mov	 BYTE PTR dotlen$[rsp], 0

; 3349 :             }

  003b5	eb 6f		 jmp	 SHORT $LN15@parse_opt_
$LN14@parse_opt_:

; 3350 :             else
; 3351 :             {
; 3352 :                 // Save lone opt1 value
; 3353 : 
; 3354 :                 (*ppMOPT)[ *nMOPT ].isrange = false;

  003b7	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  003bf	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  003c2	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  003c6	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  003ce	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  003d1	c6 44 01 1c 00	 mov	 BYTE PTR [rcx+rax+28], 0

; 3355 : 
; 3356 :                 if (!pCNVOPT( ishex, work, &(*ppMOPT)[ *nMOPT ].opt1, *ppMOPT ))

  003d6	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  003de	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  003e1	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  003e5	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  003ed	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  003f0	48 03 c8	 add	 rcx, rax
  003f3	48 8b c1	 mov	 rax, rcx
  003f6	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  003fe	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00401	4c 8b c0	 mov	 r8, rax
  00404	48 8d 54 24 50	 lea	 rdx, QWORD PTR work$[rsp]
  00409	0f b6 8c 24 90
	00 00 00	 movzx	 ecx, BYTE PTR ishex$[rsp]
  00411	ff 94 24 a8 00
	00 00		 call	 QWORD PTR pCNVOPT$[rsp]
  00418	0f b6 c0	 movzx	 eax, al
  0041b	85 c0		 test	 eax, eax
  0041d	75 07		 jne	 SHORT $LN19@parse_opt_

; 3357 :                     return false;

  0041f	32 c0		 xor	 al, al
  00421	e9 ab 02 00 00	 jmp	 $LN1@parse_opt_
$LN19@parse_opt_:
$LN15@parse_opt_:

; 3358 :             }
; 3359 : 
; 3360 :             // Need another entry for next range or next lone value
; 3361 : 
; 3362 :             *nMOPT += 1;

  00426	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  0042e	8b 00		 mov	 eax, DWORD PTR [rax]
  00430	ff c0		 inc	 eax
  00432	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR nMOPT$[rsp]
  0043a	89 01		 mov	 DWORD PTR [rcx], eax

; 3363 :             *ppMOPT = realloc( *ppMOPT, (*nMOPT + 1) * sizeof( MOPT ));

  0043c	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  00444	8b 00		 mov	 eax, DWORD PTR [rax]
  00446	ff c0		 inc	 eax
  00448	48 98		 cdqe
  0044a	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0044e	48 8b d0	 mov	 rdx, rax
  00451	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR ppMOPT$[rsp]
  00459	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0045c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realloc
  00462	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  0046a	48 89 01	 mov	 QWORD PTR [rcx], rax

; 3364 :             memset( &(*ppMOPT)[ *nMOPT ], 0,  sizeof( MOPT ));

  0046d	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  00475	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00478	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0047c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  00484	48 03 01	 add	 rax, QWORD PTR [rcx]
  00487	48 8b f8	 mov	 rdi, rax
  0048a	33 c0		 xor	 eax, eax
  0048c	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00491	f3 aa		 rep stosb

; 3365 :         }

  00493	eb 32		 jmp	 SHORT $LN13@parse_opt_
$LN12@parse_opt_:

; 3366 :         else // (anything else is a value character)
; 3367 :         {
; 3368 :             if (n >= (int)sizeof( work)) // Room for another char in work?

  00495	83 7c 24 24 20	 cmp	 DWORD PTR n$[rsp], 32	; 00000020H
  0049a	7c 07		 jl	 SHORT $LN20@parse_opt_

; 3369 :                 return false;            // No, error

  0049c	32 c0		 xor	 al, al
  0049e	e9 2e 02 00 00	 jmp	 $LN1@parse_opt_
$LN20@parse_opt_:

; 3370 :             work[n++] = optstr[i];       // Save value character

  004a3	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  004a8	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR n$[rsp]
  004ad	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR optstr$[rsp]
  004b5	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  004b9	88 44 0c 50	 mov	 BYTE PTR work$[rsp+rcx], al
  004bd	8b 44 24 24	 mov	 eax, DWORD PTR n$[rsp]
  004c1	ff c0		 inc	 eax
  004c3	89 44 24 24	 mov	 DWORD PTR n$[rsp], eax
$LN13@parse_opt_:
$LN7@parse_opt_:

; 3371 :         }
; 3372 :     }

  004c7	e9 ed fb ff ff	 jmp	 $LN2@parse_opt_
$LN3@parse_opt_:

; 3373 : 
; 3374 :     // End of string reached. Convert final value.
; 3375 : 
; 3376 :     if (!n)                 // Can only occur if e.g. "xx," or "xx-"

  004cc	83 7c 24 24 00	 cmp	 DWORD PTR n$[rsp], 0
  004d1	75 07		 jne	 SHORT $LN21@parse_opt_

; 3377 :         return false;       // Syntax error

  004d3	32 c0		 xor	 al, al
  004d5	e9 f7 01 00 00	 jmp	 $LN1@parse_opt_
$LN21@parse_opt_:

; 3378 : 
; 3379 :     work[n] = 0;            // Mark end of value string

  004da	48 63 44 24 24	 movsxd	 rax, DWORD PTR n$[rsp]
  004df	48 89 44 24 48	 mov	 QWORD PTR $T3[rsp], rax
  004e4	48 83 7c 24 48
	20		 cmp	 QWORD PTR $T3[rsp], 32	; 00000020H
  004ea	73 02		 jae	 SHORT $LN37@parse_opt_
  004ec	eb 05		 jmp	 SHORT $LN38@parse_opt_
$LN37@parse_opt_:
  004ee	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN38@parse_opt_:
  004f3	48 8b 44 24 48	 mov	 rax, QWORD PTR $T3[rsp]
  004f8	c6 44 04 50 00	 mov	 BYTE PTR work$[rsp+rax], 0

; 3380 : 
; 3381 :     if (range)              // Was previous delimiter range?

  004fd	0f b6 44 24 20	 movzx	 eax, BYTE PTR range$[rsp]
  00502	85 c0		 test	 eax, eax
  00504	0f 84 43 01 00
	00		 je	 $LN22@parse_opt_

; 3382 :     {
; 3383 :         // Save opt2 end of range
; 3384 : 
; 3385 :         (*ppMOPT)[ *nMOPT ].isrange = true;

  0050a	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  00512	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00515	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00519	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  00521	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00524	c6 44 01 1c 01	 mov	 BYTE PTR [rcx+rax+28], 1

; 3386 : 
; 3387 :         if (!pCNVOPT( ishex, work, &(*ppMOPT)[ *nMOPT ].opt2, *ppMOPT ))

  00529	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  00531	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00534	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00538	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  00540	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00543	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  00548	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  00550	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00553	4c 8b c0	 mov	 r8, rax
  00556	48 8d 54 24 50	 lea	 rdx, QWORD PTR work$[rsp]
  0055b	0f b6 8c 24 90
	00 00 00	 movzx	 ecx, BYTE PTR ishex$[rsp]
  00563	ff 94 24 a8 00
	00 00		 call	 QWORD PTR pCNVOPT$[rsp]
  0056a	0f b6 c0	 movzx	 eax, al
  0056d	85 c0		 test	 eax, eax
  0056f	75 07		 jne	 SHORT $LN24@parse_opt_

; 3388 :             return false;

  00571	32 c0		 xor	 al, al
  00573	e9 59 01 00 00	 jmp	 $LN1@parse_opt_
$LN24@parse_opt_:

; 3389 : 
; 3390 :         if (dotlen)

  00578	0f b6 44 24 21	 movzx	 eax, BYTE PTR dotlen$[rsp]
  0057d	85 c0		 test	 eax, eax
  0057f	0f 84 c6 00 00
	00		 je	 $LN25@parse_opt_

; 3391 :         {
; 3392 :             if (!(*ppMOPT)[ *nMOPT ].opt2)

  00585	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  0058d	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00590	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00594	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  0059c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0059f	48 83 7c 01 08
	00		 cmp	 QWORD PTR [rcx+rax+8], 0
  005a5	75 07		 jne	 SHORT $LN26@parse_opt_

; 3393 :                 return false;

  005a7	32 c0		 xor	 al, al
  005a9	e9 23 01 00 00	 jmp	 $LN1@parse_opt_
$LN26@parse_opt_:

; 3394 : 
; 3395 :             (*ppMOPT)[ *nMOPT ].opt2 += (*ppMOPT)[ *nMOPT ].opt1;

  005ae	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  005b6	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  005b9	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  005bd	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  005c5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  005c8	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR nMOPT$[rsp]
  005d0	48 63 12	 movsxd	 rdx, DWORD PTR [rdx]
  005d3	48 6b d2 20	 imul	 rdx, rdx, 32		; 00000020H
  005d7	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR ppMOPT$[rsp]
  005df	48 8b 3f	 mov	 rdi, QWORD PTR [rdi]
  005e2	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  005e7	48 03 04 17	 add	 rax, QWORD PTR [rdi+rdx]
  005eb	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR nMOPT$[rsp]
  005f3	48 63 09	 movsxd	 rcx, DWORD PTR [rcx]
  005f6	48 6b c9 20	 imul	 rcx, rcx, 32		; 00000020H
  005fa	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR ppMOPT$[rsp]
  00602	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00605	48 89 44 0a 08	 mov	 QWORD PTR [rdx+rcx+8], rax

; 3396 :             (*ppMOPT)[ *nMOPT ].opt2--;

  0060a	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  00612	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00615	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00619	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  00621	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00624	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  00629	48 ff c8	 dec	 rax
  0062c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR nMOPT$[rsp]
  00634	48 63 09	 movsxd	 rcx, DWORD PTR [rcx]
  00637	48 6b c9 20	 imul	 rcx, rcx, 32		; 00000020H
  0063b	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR ppMOPT$[rsp]
  00643	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00646	48 89 44 0a 08	 mov	 QWORD PTR [rdx+rcx+8], rax
$LN25@parse_opt_:

; 3397 :         }
; 3398 :     }

  0064b	eb 6c		 jmp	 SHORT $LN23@parse_opt_
$LN22@parse_opt_:

; 3399 :     else
; 3400 :     {
; 3401 :         // Save opt1 only value
; 3402 : 
; 3403 :         (*ppMOPT)[ *nMOPT ].isrange = false;

  0064d	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  00655	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00658	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0065c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  00664	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00667	c6 44 01 1c 00	 mov	 BYTE PTR [rcx+rax+28], 0

; 3404 : 
; 3405 :         if (!pCNVOPT( ishex, work, &(*ppMOPT)[ *nMOPT ].opt1, *ppMOPT ))

  0066c	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  00674	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00677	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0067b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  00683	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00686	48 03 c8	 add	 rcx, rax
  00689	48 8b c1	 mov	 rax, rcx
  0068c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ppMOPT$[rsp]
  00694	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00697	4c 8b c0	 mov	 r8, rax
  0069a	48 8d 54 24 50	 lea	 rdx, QWORD PTR work$[rsp]
  0069f	0f b6 8c 24 90
	00 00 00	 movzx	 ecx, BYTE PTR ishex$[rsp]
  006a7	ff 94 24 a8 00
	00 00		 call	 QWORD PTR pCNVOPT$[rsp]
  006ae	0f b6 c0	 movzx	 eax, al
  006b1	85 c0		 test	 eax, eax
  006b3	75 04		 jne	 SHORT $LN27@parse_opt_

; 3406 :             return false;

  006b5	32 c0		 xor	 al, al
  006b7	eb 18		 jmp	 SHORT $LN1@parse_opt_
$LN27@parse_opt_:
$LN23@parse_opt_:

; 3407 :     }
; 3408 : 
; 3409 :     *nMOPT += 1;            // Account for last array entry

  006b9	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR nMOPT$[rsp]
  006c1	8b 00		 mov	 eax, DWORD PTR [rax]
  006c3	ff c0		 inc	 eax
  006c5	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR nMOPT$[rsp]
  006cd	89 01		 mov	 DWORD PTR [rcx], eax

; 3410 :     return true;            // Successful parse

  006cf	b0 01		 mov	 al, 1
$LN1@parse_opt_:
$LN28@parse_opt_:

; 3411 : }

  006d1	48 8b 4c 24 70	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006d6	48 33 cc	 xor	 rcx, rsp
  006d9	e8 00 00 00 00	 call	 __security_check_cookie
  006de	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  006e5	5f		 pop	 rdi
  006e6	c3		 ret	 0
parse_opt_str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
ishex$ = 48
str$ = 56
pU64$ = 64
pMOPT$ = 72
convert_opt_str PROC

; 3254 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00013	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@convert_op:

; 3255 :     UNREFERENCED( pMOPT );

  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@convert_op

; 3256 : 
; 3257 :     if (ishex)

  0001d	0f b6 44 24 30	 movzx	 eax, BYTE PTR ishex$[rsp]
  00022	85 c0		 test	 eax, eax
  00024	0f 84 9b 00 00
	00		 je	 $LN17@convert_op

; 3258 :     {
; 3259 :         if (!is_hex( str ))

  0002a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_hex
  00035	0f b6 c0	 movzx	 eax, al
  00038	85 c0		 test	 eax, eax
  0003a	75 07		 jne	 SHORT $LN19@convert_op

; 3260 :             return false;

  0003c	32 c0		 xor	 al, al
  0003e	e9 17 01 00 00	 jmp	 $LN1@convert_op
$LN19@convert_op:
$LN7@convert_op:

; 3261 :         VERIFY( sscanf( str, "%"SCNx64, pU64 ) == 1 );

  00043	4c 8b 44 24 40	 mov	 r8, QWORD PTR pU64$[rsp]
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161680
  0004f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00054	e8 00 00 00 00	 call	 sscanf
  00059	83 f8 01	 cmp	 eax, 1
  0005c	74 5c		 je	 SHORT $LN20@convert_op
$LN10@convert_op:
  0005e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG161681
  00065	41 b8 bd 0c 00
	00		 mov	 r8d, 3261		; 00000cbdH
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161682
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161683
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0007f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00085	85 c0		 test	 eax, eax
  00087	74 20		 je	 SHORT $LN21@convert_op
  00089	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG161685
  00090	41 b8 bd 0c 00
	00		 mov	 r8d, 3261		; 00000cbdH
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161686
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161687
  000a4	e8 00 00 00 00	 call	 DebuggerTrace
$LN21@convert_op:
  000a9	33 c0		 xor	 eax, eax
  000ab	85 c0		 test	 eax, eax
  000ad	75 af		 jne	 SHORT $LN10@convert_op
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000b5	85 c0		 test	 eax, eax
  000b7	74 01		 je	 SHORT $LN22@convert_op
  000b9	cc		 int	 3
$LN22@convert_op:
$LN20@convert_op:
  000ba	33 c0		 xor	 eax, eax
  000bc	85 c0		 test	 eax, eax
  000be	75 83		 jne	 SHORT $LN7@convert_op

; 3262 :     }

  000c0	e9 93 00 00 00	 jmp	 $LN18@convert_op
$LN17@convert_op:

; 3263 :     else
; 3264 :     {
; 3265 :         if (!is_numeric( str ))

  000c5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_numeric
  000d0	0f b6 c0	 movzx	 eax, al
  000d3	85 c0		 test	 eax, eax
  000d5	75 04		 jne	 SHORT $LN23@convert_op

; 3266 :             return false;

  000d7	32 c0		 xor	 al, al
  000d9	eb 7f		 jmp	 SHORT $LN1@convert_op
$LN23@convert_op:
$LN13@convert_op:

; 3267 :         VERIFY( sscanf( str, "%"SCNu64, pU64 ) == 1 );

  000db	4c 8b 44 24 40	 mov	 r8, QWORD PTR pU64$[rsp]
  000e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161691
  000e7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  000ec	e8 00 00 00 00	 call	 sscanf
  000f1	83 f8 01	 cmp	 eax, 1
  000f4	74 5c		 je	 SHORT $LN24@convert_op
$LN16@convert_op:
  000f6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG161692
  000fd	41 b8 c3 0c 00
	00		 mov	 r8d, 3267		; 00000cc3H
  00103	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161693
  0010a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161694
  00111	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00117	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0011d	85 c0		 test	 eax, eax
  0011f	74 20		 je	 SHORT $LN25@convert_op
  00121	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG161696
  00128	41 b8 c3 0c 00
	00		 mov	 r8d, 3267		; 00000cc3H
  0012e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161697
  00135	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161698
  0013c	e8 00 00 00 00	 call	 DebuggerTrace
$LN25@convert_op:
  00141	33 c0		 xor	 eax, eax
  00143	85 c0		 test	 eax, eax
  00145	75 af		 jne	 SHORT $LN16@convert_op
  00147	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0014d	85 c0		 test	 eax, eax
  0014f	74 01		 je	 SHORT $LN26@convert_op
  00151	cc		 int	 3
$LN26@convert_op:
$LN24@convert_op:
  00152	33 c0		 xor	 eax, eax
  00154	85 c0		 test	 eax, eax
  00156	75 83		 jne	 SHORT $LN13@convert_op
$LN18@convert_op:

; 3268 :     }
; 3269 :     return true;

  00158	b0 01		 mov	 al, 1
$LN1@convert_op:

; 3270 : }

  0015a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0015e	c3		 ret	 0
convert_opt_str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
pTM$ = 32
rawtime$ = 40
gmttime$ = 48
time_zone_offset PROC

; 3093 : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3094 :     time_t  gmttime;
; 3095 :     time_t  rawtime;
; 3096 :     TM*     pTM;
; 3097 : 
; 3098 :     rawtime = time( NULL );

  00004	33 c9		 xor	 ecx, ecx
  00006	e8 00 00 00 00	 call	 time
  0000b	48 89 44 24 28	 mov	 QWORD PTR rawtime$[rsp], rax

; 3099 :     pTM = gmtime( &rawtime );

  00010	48 8d 4c 24 28	 lea	 rcx, QWORD PTR rawtime$[rsp]
  00015	e8 00 00 00 00	 call	 gmtime
  0001a	48 89 44 24 20	 mov	 QWORD PTR pTM$[rsp], rax

; 3100 :     pTM->tm_isdst = -1;

  0001f	48 8b 44 24 20	 mov	 rax, QWORD PTR pTM$[rsp]
  00024	c7 40 20 ff ff
	ff ff		 mov	 DWORD PTR [rax+32], -1

; 3101 :     gmttime = mktime( pTM );

  0002b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pTM$[rsp]
  00030	e8 00 00 00 00	 call	 mktime
  00035	48 89 44 24 30	 mov	 QWORD PTR gmttime$[rsp], rax

; 3102 : 
; 3103 :     return (time_t) difftime( rawtime, gmttime );

  0003a	48 8b 54 24 30	 mov	 rdx, QWORD PTR gmttime$[rsp]
  0003f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR rawtime$[rsp]
  00044	e8 00 00 00 00	 call	 difftime
  00049	f2 48 0f 2c c0	 cvttsd2si rax, xmm0

; 3104 : }

  0004e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00052	c3		 ret	 0
time_zone_offset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
off_size$ = 80
tv72 = 88
tv92 = 96
tv142 = 104
tv162 = 112
filename$ = 144
parse_tracefile PROC

; 3919 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 3920 :     off_t  off_size;    // (file size)
; 3921 : 
; 3922 :     /* ALWAYS save the filename if it was provided to us */
; 3923 :     hostpath( pathname, filename, sizeof( pathname ));

  0000c	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00012	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pathname
  00021	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 3924 : 
; 3925 :     /* Don't bother opening it if we're going to be aborting anyway */
; 3926 :     if (arg_errs)

  00027	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR arg_errs, 0
  0002e	74 05		 je	 SHORT $LN2@parse_trac

; 3927 :         return;         // (quick exit)

  00030	e9 96 02 00 00	 jmp	 $LN1@parse_trac
$LN2@parse_trac:

; 3928 : 
; 3929 : #if defined( _MSVC_ )
; 3930 : #define FOPEN_MODE    "rbS"     // ('S' = cached sequential access)
; 3931 : #else
; 3932 : #define FOPEN_MODE    "rb"
; 3933 : #endif
; 3934 : 
; 3935 :     /* Otherwise open it and determine its size */
; 3936 :     if (!(inf = fopen( pathname, FOPEN_MODE )))

  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG162123
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pathname
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  00049	48 89 05 00 00
	00 00		 mov	 QWORD PTR inf, rax
  00050	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR inf, 0
  00058	0f 85 83 00 00
	00		 jne	 $LN3@parse_trac

; 3937 :     {
; 3938 :         // "Error opening \"%s\": %s"
; 3939 :         FWRMSG( stderr, HHC03202, "E", pathname, strerror( errno ));

  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00064	8b 08		 mov	 ecx, DWORD PTR [rax]
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0006c	48 89 44 24 58	 mov	 QWORD PTR tv72[rsp], rax
  00071	b9 02 00 00 00	 mov	 ecx, 2
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0007c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv72[rsp]
  00081	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pathname
  0008d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00092	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162124
  00099	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162125
  000a5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000aa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000af	41 b9 03 00 00
	00		 mov	 r9d, 3
  000b5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG162126
  000bc	ba 63 0f 00 00	 mov	 edx, 3939		; 00000f63H
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162127
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3940 :         arg_errs++;

  000ce	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  000d4	ff c0		 inc	 eax
  000d6	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax

; 3941 :     }

  000dc	e9 ea 01 00 00	 jmp	 $LN4@parse_trac
$LN3@parse_trac:

; 3942 :     else
; 3943 :     {
; 3944 :         /* Save file size */
; 3945 :         if (fseek( inf, 0, SEEK_END ) < 0)

  000e1	41 b8 02 00 00
	00		 mov	 r8d, 2
  000e7	33 d2		 xor	 edx, edx
  000e9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR inf
  000f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fseeki64
  000f6	85 c0		 test	 eax, eax
  000f8	0f 8d 83 00 00
	00		 jge	 $LN5@parse_trac

; 3946 :         {
; 3947 :             // "Error in function %s: %s"
; 3948 :             FWRMSG( stderr, HHC00075, "E", "fseek", strerror( errno ));

  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00104	8b 08		 mov	 ecx, DWORD PTR [rax]
  00106	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0010c	48 89 44 24 60	 mov	 QWORD PTR tv92[rsp], rax
  00111	b9 02 00 00 00	 mov	 ecx, 2
  00116	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0011c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv92[rsp]
  00121	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00126	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162130
  0012d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00132	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162131
  00139	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0013e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162132
  00145	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0014a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00155	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG162133
  0015c	ba 6c 0f 00 00	 mov	 edx, 3948		; 00000f6cH
  00161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162134
  00168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3949 :             arg_errs++;

  0016e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  00174	ff c0		 inc	 eax
  00176	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax

; 3950 :         }

  0017c	e9 4a 01 00 00	 jmp	 $LN6@parse_trac
$LN5@parse_trac:

; 3951 :         else
; 3952 :         {
; 3953 :             if ((off_size = ftell( inf )) < 0)

  00181	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR inf
  00188	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__ftelli64
  0018e	48 89 44 24 50	 mov	 QWORD PTR off_size$[rsp], rax
  00193	48 83 7c 24 50
	00		 cmp	 QWORD PTR off_size$[rsp], 0
  00199	0f 8d 83 00 00
	00		 jge	 $LN7@parse_trac

; 3954 :             {
; 3955 :                 // "Error in function %s: %s"
; 3956 :                 FWRMSG( stderr, HHC00075, "E", "ftell", strerror( errno ));

  0019f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  001a5	8b 08		 mov	 ecx, DWORD PTR [rax]
  001a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  001ad	48 89 44 24 68	 mov	 QWORD PTR tv142[rsp], rax
  001b2	b9 02 00 00 00	 mov	 ecx, 2
  001b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001bd	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv142[rsp]
  001c2	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162137
  001ce	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162138
  001da	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162139
  001e6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001eb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f0	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG162140
  001fd	ba 74 0f 00 00	 mov	 edx, 3956		; 00000f74H
  00202	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162141
  00209	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3957 :                 arg_errs++;

  0020f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  00215	ff c0		 inc	 eax
  00217	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax

; 3958 :             }

  0021d	e9 a9 00 00 00	 jmp	 $LN8@parse_trac
$LN7@parse_trac:

; 3959 :             else
; 3960 :             {
; 3961 :                 if (fseek( inf, 0, SEEK_SET ) < 0)

  00222	45 33 c0	 xor	 r8d, r8d
  00225	33 d2		 xor	 edx, edx
  00227	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR inf
  0022e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fseeki64
  00234	85 c0		 test	 eax, eax
  00236	0f 8d 80 00 00
	00		 jge	 $LN9@parse_trac

; 3962 :                 {
; 3963 :                     // "Error in function %s: %s"
; 3964 :                     FWRMSG( stderr, HHC00075, "E", "fseek", strerror( errno ));

  0023c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00242	8b 08		 mov	 ecx, DWORD PTR [rax]
  00244	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0024a	48 89 44 24 70	 mov	 QWORD PTR tv162[rsp], rax
  0024f	b9 02 00 00 00	 mov	 ecx, 2
  00254	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0025a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv162[rsp]
  0025f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00264	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162144
  0026b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00270	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162145
  00277	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0027c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162146
  00283	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00288	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0028d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00293	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG162147
  0029a	ba 7c 0f 00 00	 mov	 edx, 3964		; 00000f7cH
  0029f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG162148
  002a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3965 :                     arg_errs++;

  002ac	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  002b2	ff c0		 inc	 eax
  002b4	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax

; 3966 :                 }

  002ba	eb 0f		 jmp	 SHORT $LN10@parse_trac
$LN9@parse_trac:

; 3967 :                 else
; 3968 :                     filesize = (double) off_size;

  002bc	f2 48 0f 2a 44
	24 50		 cvtsi2sd xmm0, QWORD PTR off_size$[rsp]
  002c3	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR filesize, xmm0
$LN10@parse_trac:
$LN8@parse_trac:
$LN6@parse_trac:
$LN4@parse_trac:
$LN1@parse_trac:

; 3969 :             }
; 3970 :         }
; 3971 :     }
; 3972 : }

  002cb	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  002d2	c3		 ret	 0
parse_tracefile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
optname$ = 48
parse_option_codepage PROC

; 3908 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3909 :     if (!valid_codepage_name( optarg ))

  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  00010	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_valid_codepage_name
  00019	0f b6 c0	 movzx	 eax, al
  0001c	85 c0		 test	 eax, eax
  0001e	75 0c		 jne	 SHORT $LN2@parse_opti

; 3910 :         parse_option_error( optname );

  00020	48 8b 4c 24 30	 mov	 rcx, QWORD PTR optname$[rsp]
  00025	e8 00 00 00 00	 call	 parse_option_error
  0002a	eb 10		 jmp	 SHORT $LN3@parse_opti
$LN2@parse_opti:

; 3911 :     else
; 3912 :         set_codepage( optarg );

  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  00033	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_set_codepage
$LN3@parse_opti:

; 3913 : }

  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	c3		 ret	 0
parse_option_codepage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rangeok$ = 48
ishex$ = 49
optname$ = 80
parse_option_unit PROC

; 3891 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3892 :     bool ishex = true;

  00009	c6 44 24 31 01	 mov	 BYTE PTR ishex$[rsp], 1

; 3893 :     bool rangeok = true;

  0000e	c6 44 24 30 01	 mov	 BYTE PTR rangeok$[rsp], 1

; 3894 : 
; 3895 :     if (parse_opt_str( ishex, rangeok, optarg, NULL, &pUnitMOPT, &nUnitMOPT ))

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:nUnitMOPT
  0001a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:pUnitMOPT
  00026	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002b	45 33 c9	 xor	 r9d, r9d
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  00035	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00038	0f b6 54 24 30	 movzx	 edx, BYTE PTR rangeok$[rsp]
  0003d	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR ishex$[rsp]
  00042	e8 00 00 00 00	 call	 parse_opt_str
  00047	0f b6 c0	 movzx	 eax, al
  0004a	85 c0		 test	 eax, eax
  0004c	74 02		 je	 SHORT $LN2@parse_opti

; 3896 :         return;

  0004e	eb 2c		 jmp	 SHORT $LN1@parse_opti
$LN2@parse_opti:

; 3897 : 
; 3898 :     parse_option_error( optname );

  00050	48 8b 4c 24 50	 mov	 rcx, QWORD PTR optname$[rsp]
  00055	e8 00 00 00 00	 call	 parse_option_error

; 3899 :     free( pMsgMOPT );

  0005a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR pMsgMOPT
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 3900 :     pMsgMOPT = NULL;

  00067	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR pMsgMOPT, 0

; 3901 :     nMsgMOPT = 0;

  00072	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR nMsgMOPT, 0
$LN1@parse_opti:

; 3902 : }

  0007c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00080	c3		 ret	 0
parse_option_unit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rangeok$ = 48
ishex$ = 49
optname$ = 80
parse_option_opcode PROC

; 3873 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3874 :     bool ishex = true;

  00009	c6 44 24 31 01	 mov	 BYTE PTR ishex$[rsp], 1

; 3875 :     bool rangeok = false;

  0000e	c6 44 24 30 00	 mov	 BYTE PTR rangeok$[rsp], 0

; 3876 : 
; 3877 :     if (parse_opt_str( ishex, rangeok, optarg, &convert_opcode_opt_str,

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:nInstMOPT
  0001a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:pInstMOPT
  00026	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:convert_opcode_opt_str
  00032	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  00039	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  0003c	0f b6 54 24 30	 movzx	 edx, BYTE PTR rangeok$[rsp]
  00041	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR ishex$[rsp]
  00046	e8 00 00 00 00	 call	 parse_opt_str
  0004b	0f b6 c0	 movzx	 eax, al
  0004e	85 c0		 test	 eax, eax
  00050	74 02		 je	 SHORT $LN2@parse_opti

; 3878 :                        &pInstMOPT, &nInstMOPT ))
; 3879 :         return;

  00052	eb 2c		 jmp	 SHORT $LN1@parse_opti
$LN2@parse_opti:

; 3880 : 
; 3881 :     parse_option_error( optname );

  00054	48 8b 4c 24 50	 mov	 rcx, QWORD PTR optname$[rsp]
  00059	e8 00 00 00 00	 call	 parse_option_error

; 3882 :     free( pInstMOPT );

  0005e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR pInstMOPT
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 3883 :     pInstMOPT = NULL;

  0006b	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR pInstMOPT, 0

; 3884 :     nInstMOPT = 0;

  00076	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR nInstMOPT, 0
$LN1@parse_opti:

; 3885 : }

  00080	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00084	c3		 ret	 0
parse_option_opcode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
pDash$ = 32
begstr$ = 40
endstr$ = 56
__$ArrayPad$ = 72
optname$ = 96
parse_option_time PROC

; 3768 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00011	48 33 c4	 xor	 rax, rsp
  00014	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 3769 :     char  begstr[16] = {0};   // "HH:MM:SS.nnnnnn"

  00019	48 8d 44 24 28	 lea	 rax, QWORD PTR begstr$[rsp]
  0001e	48 8b f8	 mov	 rdi, rax
  00021	33 c0		 xor	 eax, eax
  00023	b9 10 00 00 00	 mov	 ecx, 16
  00028	f3 aa		 rep stosb

; 3770 :     char  endstr[16] = {0};   // "HH:MM:SS.nnnnnn"

  0002a	48 8d 44 24 38	 lea	 rax, QWORD PTR endstr$[rsp]
  0002f	48 8b f8	 mov	 rdi, rax
  00032	33 c0		 xor	 eax, eax
  00034	b9 10 00 00 00	 mov	 ecx, 16
  00039	f3 aa		 rep stosb

; 3771 :     char* pDash;
; 3772 : 
; 3773 :     if (!(pDash = strchr( optarg, '-' )))

  0003b	ba 2d 00 00 00	 mov	 edx, 45			; 0000002dH
  00040	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  00047	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0004a	e8 00 00 00 00	 call	 strchr
  0004f	48 89 44 24 20	 mov	 QWORD PTR pDash$[rsp], rax
  00054	48 83 7c 24 20
	00		 cmp	 QWORD PTR pDash$[rsp], 0
  0005a	75 05		 jne	 SHORT $LN2@parse_opti

; 3774 :         goto opt_error;

  0005c	e9 ab 00 00 00	 jmp	 $opt_error$9
$LN2@parse_opti:

; 3775 : 
; 3776 :     *pDash = 0;

  00061	48 8b 44 24 20	 mov	 rax, QWORD PTR pDash$[rsp]
  00066	c6 00 00	 mov	 BYTE PTR [rax], 0

; 3777 :     STRLCPY( begstr, optarg ); 

  00069	41 b8 10 00 00
	00		 mov	 r8d, 16
  0006f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  00076	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00079	48 8d 4c 24 28	 lea	 rcx, QWORD PTR begstr$[rsp]
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 3778 :     STRLCPY( endstr, pDash+1); 

  00084	48 8b 44 24 20	 mov	 rax, QWORD PTR pDash$[rsp]
  00089	48 ff c0	 inc	 rax
  0008c	41 b8 10 00 00
	00		 mov	 r8d, 16
  00092	48 8b d0	 mov	 rdx, rax
  00095	48 8d 4c 24 38	 lea	 rcx, QWORD PTR endstr$[rsp]
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 3779 :     *pDash = '-';

  000a0	48 8b 44 24 20	 mov	 rax, QWORD PTR pDash$[rsp]
  000a5	c6 00 2d	 mov	 BYTE PTR [rax], 45	; 0000002dH

; 3780 : 
; 3781 :     if (!parse_time_str( begstr, &beg_tim ))

  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:beg_tim
  000af	48 8d 4c 24 28	 lea	 rcx, QWORD PTR begstr$[rsp]
  000b4	e8 00 00 00 00	 call	 parse_time_str
  000b9	0f b6 c0	 movzx	 eax, al
  000bc	85 c0		 test	 eax, eax
  000be	75 02		 jne	 SHORT $LN3@parse_opti

; 3782 :         goto opt_error;

  000c0	eb 4a		 jmp	 SHORT $opt_error$9
$LN3@parse_opti:

; 3783 : 
; 3784 :     if (!parse_time_str( endstr, &end_tim ))

  000c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:end_tim
  000c9	48 8d 4c 24 38	 lea	 rcx, QWORD PTR endstr$[rsp]
  000ce	e8 00 00 00 00	 call	 parse_time_str
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	85 c0		 test	 eax, eax
  000d8	75 02		 jne	 SHORT $LN4@parse_opti

; 3785 :         goto opt_error;

  000da	eb 30		 jmp	 SHORT $opt_error$9
$LN4@parse_opti:

; 3786 : 
; 3787 :     // Validate parsed value
; 3788 : 
; 3789 :     if (beg_tim.tv_sec > end_tim.tv_sec)

  000dc	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR end_tim
  000e2	39 05 00 00 00
	00		 cmp	 DWORD PTR beg_tim, eax
  000e8	7e 02		 jle	 SHORT $LN5@parse_opti

; 3790 :         goto opt_error;

  000ea	eb 20		 jmp	 SHORT $opt_error$9
$LN5@parse_opti:

; 3791 : 
; 3792 :     if (beg_tim.tv_sec < end_tim.tv_sec)

  000ec	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR end_tim
  000f2	39 05 00 00 00
	00		 cmp	 DWORD PTR beg_tim, eax
  000f8	7d 02		 jge	 SHORT $LN6@parse_opti

; 3793 :         return;

  000fa	eb 1a		 jmp	 SHORT $LN1@parse_opti
$LN6@parse_opti:

; 3794 : 
; 3795 :     if (beg_tim.tv_usec <= end_tim.tv_usec)

  000fc	8b 05 04 00 00
	00		 mov	 eax, DWORD PTR end_tim+4
  00102	39 05 04 00 00
	00		 cmp	 DWORD PTR beg_tim+4, eax
  00108	7f 02		 jg	 SHORT $LN7@parse_opti

; 3796 :         return;

  0010a	eb 0a		 jmp	 SHORT $LN1@parse_opti
$LN7@parse_opti:
$opt_error$9:

; 3797 : 
; 3798 : opt_error:
; 3799 : 
; 3800 :     parse_option_error( optname );

  0010c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR optname$[rsp]
  00111	e8 00 00 00 00	 call	 parse_option_error
$LN1@parse_opti:

; 3801 : }

  00116	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0011b	48 33 cc	 xor	 rcx, rsp
  0011e	e8 00 00 00 00	 call	 __security_check_cookie
  00123	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00127	5f		 pop	 rdi
  00128	c3		 ret	 0
parse_option_time ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
pDash$ = 32
begstr$ = 40
endstr$ = 56
__$ArrayPad$ = 72
optname$ = 96
parse_option_date PROC

; 3735 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
  0000a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00011	48 33 c4	 xor	 rax, rsp
  00014	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 3736 :     char  begstr[11] = {0};   // "YYYY/MM/DD"

  00019	48 8d 44 24 28	 lea	 rax, QWORD PTR begstr$[rsp]
  0001e	48 8b f8	 mov	 rdi, rax
  00021	33 c0		 xor	 eax, eax
  00023	b9 0b 00 00 00	 mov	 ecx, 11
  00028	f3 aa		 rep stosb

; 3737 :     char  endstr[11] = {0};   // "YYYY/MM/DD"

  0002a	48 8d 44 24 38	 lea	 rax, QWORD PTR endstr$[rsp]
  0002f	48 8b f8	 mov	 rdi, rax
  00032	33 c0		 xor	 eax, eax
  00034	b9 0b 00 00 00	 mov	 ecx, 11
  00039	f3 aa		 rep stosb

; 3738 :     char* pDash;
; 3739 : 
; 3740 :     if (!(pDash = strchr( optarg, '-' )))

  0003b	ba 2d 00 00 00	 mov	 edx, 45			; 0000002dH
  00040	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  00047	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0004a	e8 00 00 00 00	 call	 strchr
  0004f	48 89 44 24 20	 mov	 QWORD PTR pDash$[rsp], rax
  00054	48 83 7c 24 20
	00		 cmp	 QWORD PTR pDash$[rsp], 0
  0005a	75 05		 jne	 SHORT $LN2@parse_opti

; 3741 :         goto opt_error;

  0005c	e9 8d 00 00 00	 jmp	 $opt_error$7
$LN2@parse_opti:

; 3742 : 
; 3743 :     *pDash = 0;

  00061	48 8b 44 24 20	 mov	 rax, QWORD PTR pDash$[rsp]
  00066	c6 00 00	 mov	 BYTE PTR [rax], 0

; 3744 :     STRLCPY( begstr, optarg ); 

  00069	41 b8 0b 00 00
	00		 mov	 r8d, 11
  0006f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  00076	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00079	48 8d 4c 24 28	 lea	 rcx, QWORD PTR begstr$[rsp]
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 3745 :     STRLCPY( endstr, pDash+1); 

  00084	48 8b 44 24 20	 mov	 rax, QWORD PTR pDash$[rsp]
  00089	48 ff c0	 inc	 rax
  0008c	41 b8 0b 00 00
	00		 mov	 r8d, 11
  00092	48 8b d0	 mov	 rdx, rax
  00095	48 8d 4c 24 38	 lea	 rcx, QWORD PTR endstr$[rsp]
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 3746 :     *pDash = '-';

  000a0	48 8b 44 24 20	 mov	 rax, QWORD PTR pDash$[rsp]
  000a5	c6 00 2d	 mov	 BYTE PTR [rax], 45	; 0000002dH

; 3747 : 
; 3748 :     if (!parse_date_str( begstr, &beg_dat ))

  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:beg_dat
  000af	48 8d 4c 24 28	 lea	 rcx, QWORD PTR begstr$[rsp]
  000b4	e8 00 00 00 00	 call	 parse_date_str
  000b9	0f b6 c0	 movzx	 eax, al
  000bc	85 c0		 test	 eax, eax
  000be	75 02		 jne	 SHORT $LN3@parse_opti

; 3749 :         goto opt_error;

  000c0	eb 2c		 jmp	 SHORT $opt_error$7
$LN3@parse_opti:

; 3750 : 
; 3751 :     if (!parse_date_str( endstr, &end_dat ))

  000c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:end_dat
  000c9	48 8d 4c 24 38	 lea	 rcx, QWORD PTR endstr$[rsp]
  000ce	e8 00 00 00 00	 call	 parse_date_str
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	85 c0		 test	 eax, eax
  000d8	75 02		 jne	 SHORT $LN4@parse_opti

; 3752 :         goto opt_error;

  000da	eb 12		 jmp	 SHORT $opt_error$7
$LN4@parse_opti:

; 3753 : 
; 3754 :     // Validate parsed value
; 3755 : 
; 3756 :     if (beg_dat <= end_dat)

  000dc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR end_dat
  000e3	48 39 05 00 00
	00 00		 cmp	 QWORD PTR beg_dat, rax
  000ea	7f 02		 jg	 SHORT $LN5@parse_opti

; 3757 :         return;

  000ec	eb 0a		 jmp	 SHORT $LN1@parse_opti
$LN5@parse_opti:
$opt_error$7:

; 3758 : 
; 3759 : opt_error:
; 3760 : 
; 3761 :     parse_option_error( optname );

  000ee	48 8b 4c 24 60	 mov	 rcx, QWORD PTR optname$[rsp]
  000f3	e8 00 00 00 00	 call	 parse_option_error
$LN1@parse_opti:

; 3762 : }

  000f8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000fd	48 33 cc	 xor	 rcx, rsp
  00100	e8 00 00 00 00	 call	 __security_check_cookie
  00105	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00109	5f		 pop	 rdi
  0010a	c3		 ret	 0
parse_option_date ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rangeok$ = 48
ishex$ = 49
optname$ = 80
parse_option_storage PROC

; 3590 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3591 :     bool ishex = true;

  00009	c6 44 24 31 01	 mov	 BYTE PTR ishex$[rsp], 1

; 3592 :     bool rangeok = true;

  0000e	c6 44 24 30 01	 mov	 BYTE PTR rangeok$[rsp], 1

; 3593 : 
; 3594 :     if (parse_opt_str( ishex, rangeok, optarg, &convert_storage_opt_str,

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:nStorMOPT
  0001a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:pStorMOPT
  00026	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:convert_storage_opt_str
  00032	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  00039	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  0003c	0f b6 54 24 30	 movzx	 edx, BYTE PTR rangeok$[rsp]
  00041	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR ishex$[rsp]
  00046	e8 00 00 00 00	 call	 parse_opt_str
  0004b	0f b6 c0	 movzx	 eax, al
  0004e	85 c0		 test	 eax, eax
  00050	74 02		 je	 SHORT $LN2@parse_opti

; 3595 :                        &pStorMOPT, &nStorMOPT ))
; 3596 :         return;

  00052	eb 2c		 jmp	 SHORT $LN1@parse_opti
$LN2@parse_opti:

; 3597 : 
; 3598 :     parse_option_error( optname );

  00054	48 8b 4c 24 50	 mov	 rcx, QWORD PTR optname$[rsp]
  00059	e8 00 00 00 00	 call	 parse_option_error

; 3599 :     free( pStorMOPT );

  0005e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR pStorMOPT
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 3600 :     pStorMOPT = NULL;

  0006b	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR pStorMOPT, 0

; 3601 :     nStorMOPT = 0;

  00076	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR nStorMOPT, 0
$LN1@parse_opti:

; 3602 : }

  00080	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00084	c3		 ret	 0
parse_option_storage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rangeok$ = 48
ishex$ = 49
optname$ = 80
parse_option_msg PROC

; 3544 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3545 :     bool ishex = false;

  00009	c6 44 24 31 00	 mov	 BYTE PTR ishex$[rsp], 0

; 3546 :     bool rangeok = false;

  0000e	c6 44 24 30 00	 mov	 BYTE PTR rangeok$[rsp], 0

; 3547 : 
; 3548 :     if (parse_opt_str( ishex, rangeok, optarg, NULL, &pMsgMOPT, &nMsgMOPT ))

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:nMsgMOPT
  0001a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:pMsgMOPT
  00026	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002b	45 33 c9	 xor	 r9d, r9d
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  00035	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00038	0f b6 54 24 30	 movzx	 edx, BYTE PTR rangeok$[rsp]
  0003d	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR ishex$[rsp]
  00042	e8 00 00 00 00	 call	 parse_opt_str
  00047	0f b6 c0	 movzx	 eax, al
  0004a	85 c0		 test	 eax, eax
  0004c	74 02		 je	 SHORT $LN2@parse_opti

; 3549 :         return;

  0004e	eb 2c		 jmp	 SHORT $LN1@parse_opti
$LN2@parse_opti:

; 3550 : 
; 3551 :     parse_option_error( optname );

  00050	48 8b 4c 24 50	 mov	 rcx, QWORD PTR optname$[rsp]
  00055	e8 00 00 00 00	 call	 parse_option_error

; 3552 :     free( pMsgMOPT );

  0005a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR pMsgMOPT
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 3553 :     pMsgMOPT = NULL;

  00067	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR pMsgMOPT, 0

; 3554 :     nMsgMOPT = 0;

  00072	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR nMsgMOPT, 0
$LN1@parse_opti:

; 3555 : }

  0007c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00080	c3		 ret	 0
parse_option_msg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rangeok$ = 48
ishex$ = 49
nMOPT$ = 52
pMOPT$ = 56
optname$ = 80
parse_option_count PROC

; 3503 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3504 :     MOPT* pMOPT = NULL;

  00009	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR pMOPT$[rsp], 0

; 3505 :     int   nMOPT = 0;

  00012	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR nMOPT$[rsp], 0

; 3506 :     bool  ishex = false;

  0001a	c6 44 24 31 00	 mov	 BYTE PTR ishex$[rsp], 0

; 3507 :     bool  rangeok = true;

  0001f	c6 44 24 30 01	 mov	 BYTE PTR rangeok$[rsp], 1

; 3508 : 
; 3509 :     if (0
; 3510 :         || !parse_opt_str( ishex, rangeok, optarg, NULL, &pMOPT, &nMOPT )
; 3511 :         || nMOPT != 1

  00024	33 c0		 xor	 eax, eax
  00026	85 c0		 test	 eax, eax
  00028	75 3e		 jne	 SHORT $LN3@parse_opti
  0002a	48 8d 44 24 34	 lea	 rax, QWORD PTR nMOPT$[rsp]
  0002f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00034	48 8d 44 24 38	 lea	 rax, QWORD PTR pMOPT$[rsp]
  00039	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003e	45 33 c9	 xor	 r9d, r9d
  00041	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  00048	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  0004b	0f b6 54 24 30	 movzx	 edx, BYTE PTR rangeok$[rsp]
  00050	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR ishex$[rsp]
  00055	e8 00 00 00 00	 call	 parse_opt_str
  0005a	0f b6 c0	 movzx	 eax, al
  0005d	85 c0		 test	 eax, eax
  0005f	74 07		 je	 SHORT $LN3@parse_opti
  00061	83 7c 24 34 01	 cmp	 DWORD PTR nMOPT$[rsp], 1
  00066	74 02		 je	 SHORT $LN2@parse_opti
$LN3@parse_opti:

; 3512 :     )
; 3513 :         goto opt_error;

  00068	eb 57		 jmp	 SHORT $opt_error$8
$LN2@parse_opti:

; 3514 : 
; 3515 :     if (pMOPT->isrange)

  0006a	48 8b 44 24 38	 mov	 rax, QWORD PTR pMOPT$[rsp]
  0006f	0f b6 40 1c	 movzx	 eax, BYTE PTR [rax+28]
  00073	85 c0		 test	 eax, eax
  00075	74 21		 je	 SHORT $LN4@parse_opti

; 3516 :     {
; 3517 :         fromrec = pMOPT->opt1;

  00077	48 8b 44 24 38	 mov	 rax, QWORD PTR pMOPT$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 89 05 00 00
	00 00		 mov	 QWORD PTR fromrec, rax

; 3518 :         torec   = pMOPT->opt2;

  00086	48 8b 44 24 38	 mov	 rax, QWORD PTR pMOPT$[rsp]
  0008b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0008f	48 89 05 00 00
	00 00		 mov	 QWORD PTR torec, rax

; 3519 :     }

  00096	eb 27		 jmp	 SHORT $LN5@parse_opti
$LN4@parse_opti:

; 3520 :     else
; 3521 :     {
; 3522 :         if (!pMOPT->opt1)

  00098	48 8b 44 24 38	 mov	 rax, QWORD PTR pMOPT$[rsp]
  0009d	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000a1	75 02		 jne	 SHORT $LN6@parse_opti

; 3523 :             goto opt_error;

  000a3	eb 1c		 jmp	 SHORT $opt_error$8
$LN6@parse_opti:

; 3524 : 
; 3525 :         fromrec = 0;

  000a5	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR fromrec, 0

; 3526 :         torec   = pMOPT->opt1;

  000b0	48 8b 44 24 38	 mov	 rax, QWORD PTR pMOPT$[rsp]
  000b5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000b8	48 89 05 00 00
	00 00		 mov	 QWORD PTR torec, rax
$LN5@parse_opti:

; 3527 :     }
; 3528 : 
; 3529 :     goto opt_return;

  000bf	eb 0a		 jmp	 SHORT $opt_return$9
$opt_error$8:

; 3530 : 
; 3531 : opt_error:
; 3532 : 
; 3533 :     parse_option_error( optname );

  000c1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR optname$[rsp]
  000c6	e8 00 00 00 00	 call	 parse_option_error
$opt_return$9:

; 3534 : 
; 3535 : opt_return:
; 3536 : 
; 3537 :     free( pMOPT );

  000cb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR pMOPT$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 3538 : }

  000d6	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000da	c3		 ret	 0
parse_option_count ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
optname$ = 48
parse_option_traceopt PROC

; 3477 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3478 :     if (str_caseless_eq( "NOREGS", optarg ))

  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  00010	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161798
  0001a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00020	85 c0		 test	 eax, eax
  00022	75 10		 jne	 SHORT $LN2@parse_opti

; 3479 :     {
; 3480 :         regsfirst = false;

  00024	c6 05 00 00 00
	00 00		 mov	 BYTE PTR regsfirst, 0

; 3481 :         noregs    = true;

  0002b	c6 05 00 00 00
	00 01		 mov	 BYTE PTR noregs, 1

; 3482 :     }

  00032	eb 60		 jmp	 SHORT $LN3@parse_opti
$LN2@parse_opti:

; 3483 :     else
; 3484 :     if (str_caseless_eq( "REGSFIRST", optarg ))

  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  0003b	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161801
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0004b	85 c0		 test	 eax, eax
  0004d	75 10		 jne	 SHORT $LN4@parse_opti

; 3485 :     {
; 3486 :         regsfirst = true;

  0004f	c6 05 00 00 00
	00 01		 mov	 BYTE PTR regsfirst, 1

; 3487 :         noregs    = false;

  00056	c6 05 00 00 00
	00 00		 mov	 BYTE PTR noregs, 0

; 3488 :     }

  0005d	eb 35		 jmp	 SHORT $LN5@parse_opti
$LN4@parse_opti:

; 3489 :     else
; 3490 :     if (str_caseless_eq( "TRADITIONAL", optarg ))

  0005f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  00066	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161804
  00070	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00076	85 c0		 test	 eax, eax
  00078	75 10		 jne	 SHORT $LN6@parse_opti

; 3491 :     {
; 3492 :         regsfirst = false;

  0007a	c6 05 00 00 00
	00 00		 mov	 BYTE PTR regsfirst, 0

; 3493 :         noregs    = false;

  00081	c6 05 00 00 00
	00 00		 mov	 BYTE PTR noregs, 0

; 3494 :     }

  00088	eb 0a		 jmp	 SHORT $LN7@parse_opti
$LN6@parse_opti:

; 3495 :     else
; 3496 :         parse_option_error( optname );

  0008a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR optname$[rsp]
  0008f	e8 00 00 00 00	 call	 parse_option_error
$LN7@parse_opti:
$LN5@parse_opti:
$LN3@parse_opti:

; 3497 : }

  00094	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00098	c3		 ret	 0
parse_option_traceopt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
i$ = 48
rangeok$ = 52
ishex$ = 53
cpu1$ = 56
pMOPT$ = 64
nMOPT$ = 72
cpu2$ = 76
tv162 = 80
tv173 = 88
optname$ = 112
parse_option_cpu PROC

; 3427 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 3428 :     MOPT* pMOPT = NULL;

  00009	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR pMOPT$[rsp], 0

; 3429 :     int   nMOPT = 0;

  00012	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR nMOPT$[rsp], 0

; 3430 :     int   i, cpu1, cpu2;
; 3431 :     bool  ishex = true;

  0001a	c6 44 24 35 01	 mov	 BYTE PTR ishex$[rsp], 1

; 3432 :     bool  rangeok = true;

  0001f	c6 44 24 34 01	 mov	 BYTE PTR rangeok$[rsp], 1

; 3433 : 
; 3434 :     if (!parse_opt_str( ishex, rangeok, optarg, NULL, &pMOPT, &nMOPT ))

  00024	48 8d 44 24 48	 lea	 rax, QWORD PTR nMOPT$[rsp]
  00029	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0002e	48 8d 44 24 40	 lea	 rax, QWORD PTR pMOPT$[rsp]
  00033	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00038	45 33 c9	 xor	 r9d, r9d
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  00042	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00045	0f b6 54 24 34	 movzx	 edx, BYTE PTR rangeok$[rsp]
  0004a	0f b6 4c 24 35	 movzx	 ecx, BYTE PTR ishex$[rsp]
  0004f	e8 00 00 00 00	 call	 parse_opt_str
  00054	0f b6 c0	 movzx	 eax, al
  00057	85 c0		 test	 eax, eax
  00059	75 05		 jne	 SHORT $LN8@parse_opti

; 3435 :         goto opt_error;

  0005b	e9 39 01 00 00	 jmp	 $opt_error$14
$LN8@parse_opti:

; 3436 : 
; 3437 :     for (i=0; i < nMOPT; ++i)

  00060	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00068	eb 0a		 jmp	 SHORT $LN4@parse_opti
$LN2@parse_opti:
  0006a	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0006e	ff c0		 inc	 eax
  00070	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN4@parse_opti:
  00074	8b 44 24 48	 mov	 eax, DWORD PTR nMOPT$[rsp]
  00078	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0007c	0f 8d 15 01 00
	00		 jge	 $LN3@parse_opti

; 3438 :     {
; 3439 :         if (0
; 3440 :             || pMOPT[i].opt1 >= MAX_CPU_ENGS
; 3441 :             || pMOPT[i].opt2 >= MAX_CPU_ENGS

  00082	33 c0		 xor	 eax, eax
  00084	85 c0		 test	 eax, eax
  00086	75 2b		 jne	 SHORT $LN10@parse_opti
  00088	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  0008d	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00091	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pMOPT$[rsp]
  00096	48 83 3c 01 40	 cmp	 QWORD PTR [rcx+rax], 64	; 00000040H
  0009b	73 16		 jae	 SHORT $LN10@parse_opti
  0009d	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  000a2	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  000a6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pMOPT$[rsp]
  000ab	48 83 7c 01 08
	40		 cmp	 QWORD PTR [rcx+rax+8], 64 ; 00000040H
  000b1	72 05		 jb	 SHORT $LN9@parse_opti
$LN10@parse_opti:

; 3442 :         )
; 3443 :             goto opt_error;

  000b3	e9 e1 00 00 00	 jmp	 $opt_error$14
$LN9@parse_opti:

; 3444 : 
; 3445 :         if (!pMOPT[i].isrange)

  000b8	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  000bd	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  000c1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pMOPT$[rsp]
  000c6	0f b6 44 01 1c	 movzx	 eax, BYTE PTR [rcx+rax+28]
  000cb	85 c0		 test	 eax, eax
  000cd	75 47		 jne	 SHORT $LN11@parse_opti

; 3446 :         {
; 3447 :             cpu1 = (int) pMOPT[i].opt1;

  000cf	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  000d4	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  000d8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pMOPT$[rsp]
  000dd	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000e0	89 44 24 38	 mov	 DWORD PTR cpu1$[rsp], eax

; 3448 :             cpu_map |= CPU_BIT( cpu1 );

  000e4	8b 44 24 38	 mov	 eax, DWORD PTR cpu1$[rsp]
  000e8	b9 01 00 00 00	 mov	 ecx, 1
  000ed	48 89 4c 24 50	 mov	 QWORD PTR tv162[rsp], rcx
  000f2	0f b6 c8	 movzx	 ecx, al
  000f5	48 8b 44 24 50	 mov	 rax, QWORD PTR tv162[rsp]
  000fa	48 d3 e0	 shl	 rax, cl
  000fd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR cpu_map
  00104	48 0b c8	 or	 rcx, rax
  00107	48 8b c1	 mov	 rax, rcx
  0010a	48 89 05 00 00
	00 00		 mov	 QWORD PTR cpu_map, rax

; 3449 :             continue;

  00111	e9 54 ff ff ff	 jmp	 $LN2@parse_opti
$LN11@parse_opti:

; 3450 :         }
; 3451 : 
; 3452 :         cpu1 = (int) pMOPT[i].opt1;

  00116	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  0011b	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0011f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pMOPT$[rsp]
  00124	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00127	89 44 24 38	 mov	 DWORD PTR cpu1$[rsp], eax

; 3453 :         cpu2 = (int) pMOPT[i].opt2;

  0012b	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00130	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00134	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pMOPT$[rsp]
  00139	8b 44 01 08	 mov	 eax, DWORD PTR [rcx+rax+8]
  0013d	89 44 24 4c	 mov	 DWORD PTR cpu2$[rsp], eax

; 3454 : 
; 3455 :         if (cpu1 > cpu2)

  00141	8b 44 24 4c	 mov	 eax, DWORD PTR cpu2$[rsp]
  00145	39 44 24 38	 cmp	 DWORD PTR cpu1$[rsp], eax
  00149	7e 02		 jle	 SHORT $LN12@parse_opti

; 3456 :             goto opt_error;

  0014b	eb 4c		 jmp	 SHORT $opt_error$14
$LN12@parse_opti:

; 3457 : 
; 3458 :         for (; cpu1 <= cpu2; ++cpu1)

  0014d	eb 0a		 jmp	 SHORT $LN7@parse_opti
$LN5@parse_opti:
  0014f	8b 44 24 38	 mov	 eax, DWORD PTR cpu1$[rsp]
  00153	ff c0		 inc	 eax
  00155	89 44 24 38	 mov	 DWORD PTR cpu1$[rsp], eax
$LN7@parse_opti:
  00159	8b 44 24 4c	 mov	 eax, DWORD PTR cpu2$[rsp]
  0015d	39 44 24 38	 cmp	 DWORD PTR cpu1$[rsp], eax
  00161	7f 2f		 jg	 SHORT $LN6@parse_opti

; 3459 :             cpu_map |= CPU_BIT( cpu1 );

  00163	8b 44 24 38	 mov	 eax, DWORD PTR cpu1$[rsp]
  00167	b9 01 00 00 00	 mov	 ecx, 1
  0016c	48 89 4c 24 58	 mov	 QWORD PTR tv173[rsp], rcx
  00171	0f b6 c8	 movzx	 ecx, al
  00174	48 8b 44 24 58	 mov	 rax, QWORD PTR tv173[rsp]
  00179	48 d3 e0	 shl	 rax, cl
  0017c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR cpu_map
  00183	48 0b c8	 or	 rcx, rax
  00186	48 8b c1	 mov	 rax, rcx
  00189	48 89 05 00 00
	00 00		 mov	 QWORD PTR cpu_map, rax
  00190	eb bd		 jmp	 SHORT $LN5@parse_opti
$LN6@parse_opti:

; 3460 :     }

  00192	e9 d3 fe ff ff	 jmp	 $LN2@parse_opti
$LN3@parse_opti:

; 3461 : 
; 3462 :     goto opt_return;

  00197	eb 0a		 jmp	 SHORT $opt_return$15
$opt_error$14:

; 3463 : 
; 3464 : opt_error:
; 3465 : 
; 3466 :     parse_option_error( optname );

  00199	48 8b 4c 24 70	 mov	 rcx, QWORD PTR optname$[rsp]
  0019e	e8 00 00 00 00	 call	 parse_option_error
$opt_return$15:

; 3467 : 
; 3468 : opt_return:
; 3469 : 
; 3470 :     free( pMOPT );

  001a3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pMOPT$[rsp]
  001a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 3471 : }

  001ae	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001b2	c3		 ret	 0
parse_option_cpu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
optname$ = 8
parse_option_info PROC

; 3228 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
$LN4@parse_opti:

; 3229 :     UNREFERENCED( optname );

  00005	33 c0		 xor	 eax, eax
  00007	85 c0		 test	 eax, eax
  00009	75 fa		 jne	 SHORT $LN4@parse_opti

; 3230 :     info_only = true;

  0000b	c6 05 00 00 00
	00 01		 mov	 BYTE PTR info_only, 1

; 3231 : }

  00012	c3		 ret	 0
parse_option_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
msglvl_cmd$ = 32
__$ArrayPad$ = 96
optname$ = 128
parse_option_msglvl PROC

; 3237 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 44 24 60	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@parse_opti:

; 3238 :     char msglvl_cmd[64];
; 3239 :     UNREFERENCED( optname );

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN4@parse_opti

; 3240 :     MSGBUF( msglvl_cmd, "msglvl %s", optarg );

  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  00025	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  00028	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161644
  0002f	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00034	48 8d 4c 24 20	 lea	 rcx, QWORD PTR msglvl_cmd$[rsp]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 3241 :     if ((S64)the_real_panel_command( msglvl_cmd ) < 0)

  0003f	48 8d 4c 24 20	 lea	 rcx, QWORD PTR msglvl_cmd$[rsp]
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_the_real_panel_command
  0004a	48 85 c0	 test	 rax, rax
  0004d	7d 0e		 jge	 SHORT $LN5@parse_opti

; 3242 :         arg_errs++;

  0004f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  00055	ff c0		 inc	 eax
  00057	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax
$LN5@parse_opti:

; 3243 : }

  0005d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00062	48 33 cc	 xor	 rcx, rsp
  00065	e8 00 00 00 00	 call	 __security_check_cookie
  0006a	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0006e	c3		 ret	 0
parse_option_msglvl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
hasblanks$ = 48
i$ = 52
tv92 = 56
tv94 = 60
wrk$1 = 64
prefix$2 = 88
__$ArrayPad$ = 112
argc$ = 144
argv$ = 152
print_args PROC

; 2936 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
  00010	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00017	48 33 c4	 xor	 rax, rsp
  0001a	48 89 44 24 70	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2937 :     // PROGRAMMING NOTE: I know of no other way to accomplish this!
; 2938 : 
; 2939 :     int i; bool hasblanks;
; 2940 : 
; 2941 :     printf( "\n" );

  0001f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161426
  00026	e8 00 00 00 00	 call	 printf

; 2942 : 
; 2943 :     /* If debug mode, show filename and line number prefix
; 2944 :        the same way the logmsg.c "vfwritemsg" function does. */
; 2945 :     if (MLVL( DEBUG ))

  0002b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00032	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  00038	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  0003d	85 c0		 test	 eax, eax
  0003f	74 5c		 je	 SHORT $LN5@print_args

; 2946 :     {
; 2947 :         char wrk    [ MLVL_DEBUG_PFXLEN + 2 ];
; 2948 :         char prefix [ MLVL_DEBUG_PFXLEN + 2 ];
; 2949 : 
; 2950 :         MSGBUF( wrk, "%s(%d)", TRIMLOC( __FILE__ ), __LINE__ );

  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161428
  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_trimloc
  0004e	c7 44 24 20 86
	0b 00 00	 mov	 DWORD PTR [rsp+32], 2950 ; 00000b86H
  00056	4c 8b c8	 mov	 r9, rax
  00059	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161429
  00060	ba 13 00 00 00	 mov	 edx, 19
  00065	48 8d 4c 24 40	 lea	 rcx, QWORD PTR wrk$1[rsp]
  0006a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2951 :         MSGBUF( prefix, MLVL_DEBUG_PFXFMT, wrk );

  00070	4c 8d 4c 24 40	 lea	 r9, QWORD PTR wrk$1[rsp]
  00075	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161430
  0007c	ba 13 00 00 00	 mov	 edx, 19
  00081	48 8d 4c 24 58	 lea	 rcx, QWORD PTR prefix$2[rsp]
  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2952 :         printf( "%s", prefix );

  0008c	48 8d 54 24 58	 lea	 rdx, QWORD PTR prefix$2[rsp]
  00091	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161431
  00098	e8 00 00 00 00	 call	 printf
$LN5@print_args:

; 2953 :     }
; 2954 : 
; 2955 :     // PROGRAMMING NOTE: we purposely do *NOT* try to print everything
; 2956 :     // into a buffer and then do one printf of that buffer since we do
; 2957 :     // not know how big that buffer should be. Some arguments could be
; 2958 :     // quite long! (Yeah, yeah, we COULD use malloc/realloc much like
; 2959 :     // BFR_VSNPRINTF does, but that would be overkill IMHO).
; 2960 : 
; 2961 :     // HHC03217 "Args: %s"
; 2962 :     printf( "HHC03217I Args:" );

  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161432
  000a4	e8 00 00 00 00	 call	 printf

; 2963 : 
; 2964 :     for (i=1; i < argc; ++i)

  000a9	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  000b1	eb 0a		 jmp	 SHORT $LN4@print_args
$LN2@print_args:
  000b3	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  000b7	ff c0		 inc	 eax
  000b9	89 44 24 34	 mov	 DWORD PTR i$[rsp], eax
$LN4@print_args:
  000bd	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  000c4	39 44 24 34	 cmp	 DWORD PTR i$[rsp], eax
  000c8	0f 8d af 00 00
	00		 jge	 $LN3@print_args

; 2965 :     {
; 2966 :         printf( " " );  // (separate arguments with a blank)

  000ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161433
  000d5	e8 00 00 00 00	 call	 printf

; 2967 : 
; 2968 :         if ((hasblanks = strpbrk( argv[i], WHITESPACE ) ? true : false))

  000da	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG161435
  000e6	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000ee	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  000f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strpbrk
  000f8	48 85 c0	 test	 rax, rax
  000fb	74 0a		 je	 SHORT $LN9@print_args
  000fd	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv92[rsp], 1
  00105	eb 08		 jmp	 SHORT $LN10@print_args
$LN9@print_args:
  00107	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
$LN10@print_args:
  0010f	83 7c 24 38 00	 cmp	 DWORD PTR tv92[rsp], 0
  00114	75 0a		 jne	 SHORT $LN11@print_args
  00116	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv94[rsp], 0
  0011e	eb 08		 jmp	 SHORT $LN12@print_args
$LN11@print_args:
  00120	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv94[rsp], 1
$LN12@print_args:
  00128	0f b6 44 24 3c	 movzx	 eax, BYTE PTR tv94[rsp]
  0012d	88 44 24 30	 mov	 BYTE PTR hasblanks$[rsp], al
  00131	0f b6 44 24 30	 movzx	 eax, BYTE PTR hasblanks$[rsp]
  00136	85 c0		 test	 eax, eax
  00138	74 0c		 je	 SHORT $LN6@print_args

; 2969 :             printf( "\"" ); // (enclose within quotes if needed)

  0013a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161436
  00141	e8 00 00 00 00	 call	 printf
$LN6@print_args:

; 2970 : 
; 2971 :         printf( "%s", argv[i] );  // (the argument, as-is)

  00146	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  0014b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00153	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00157	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161437
  0015e	e8 00 00 00 00	 call	 printf

; 2972 : 
; 2973 :         if (hasblanks)

  00163	0f b6 44 24 30	 movzx	 eax, BYTE PTR hasblanks$[rsp]
  00168	85 c0		 test	 eax, eax
  0016a	74 0c		 je	 SHORT $LN7@print_args

; 2974 :             printf( "\"" );

  0016c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161439
  00173	e8 00 00 00 00	 call	 printf
$LN7@print_args:

; 2975 :     }

  00178	e9 36 ff ff ff	 jmp	 $LN2@print_args
$LN3@print_args:

; 2976 : 
; 2977 :     printf( "\n\n" );

  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161440
  00184	e8 00 00 00 00	 call	 printf

; 2978 : }

  00189	48 8b 4c 24 70	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0018e	48 33 cc	 xor	 rcx, rsp
  00191	e8 00 00 00 00	 call	 __security_check_cookie
  00196	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0019d	c3		 ret	 0
print_args ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
hdr$ = 80
tv335 = 88
was_bigend$ = 92
sys$ = 96
bytes_read$ = 104
tv77 = 112
tv79 = 116
tv88 = 120
tv90 = 124
tv246 = 128
tv766 = 132
tv768 = 136
tv198 = 140
tv702 = 144
tv132 = 152
tv297 = 160
inscnt$1 = 168
tiocnt$2 = 200
__$ArrayPad$ = 232
argc$ = 256
argv$ = 264
main	PROC

; 2671 : {

$LN268:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	57		 push	 rdi
  0000a	48 81 ec f0 00
	00 00		 sub	 rsp, 240		; 000000f0H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2672 :     TFSYS*  sys         = NULL;     /* Ptr to SYSTEM record          */

  00023	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR sys$[rsp], 0

; 2673 :     TFHDR*  hdr         = NULL;     /* Ptr to record header          */

  0002c	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR hdr$[rsp], 0

; 2674 :     size_t  bytes_read  = 0;        /* Number of BYTES read          */

  00035	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR bytes_read$[rsp], 0

; 2675 :     bool    was_bigend  = false;    /* Endianness of TFSYS record    */

  0003e	c6 44 24 5c 00	 mov	 BYTE PTR was_bigend$[rsp], 0

; 2676 : 
; 2677 :     INITIALIZE_UTILITY( UTILITY_NAME, UTILITY_DESC, &pgm );

  00043	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:pgm
  0004a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG161198
  00056	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161199
  0005d	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00065	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_initialize_utility
  00072	89 84 24 00 01
	00 00		 mov	 DWORD PTR argc$[rsp], eax

; 2678 : 
; 2679 :     /* Save for later */
; 2680 :     out_istty = isatty( fileno( stdout )) ? true : false;

  00079	b9 01 00 00 00	 mov	 ecx, 1
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00084	48 8b c8	 mov	 rcx, rax
  00087	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  0008d	8b c8		 mov	 ecx, eax
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isatty
  00095	85 c0		 test	 eax, eax
  00097	74 0a		 je	 SHORT $LN171@main
  00099	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  000a1	eb 08		 jmp	 SHORT $LN172@main
$LN171@main:
  000a3	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN172@main:
  000ab	83 7c 24 70 00	 cmp	 DWORD PTR tv77[rsp], 0
  000b0	75 0a		 jne	 SHORT $LN173@main
  000b2	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv79[rsp], 0
  000ba	eb 08		 jmp	 SHORT $LN174@main
$LN173@main:
  000bc	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR tv79[rsp], 1
$LN174@main:
  000c4	0f b6 44 24 74	 movzx	 eax, BYTE PTR tv79[rsp]
  000c9	88 05 00 00 00
	00		 mov	 BYTE PTR out_istty, al

; 2681 :     err_istty = isatty( fileno( stderr )) ? true : false;

  000cf	b9 02 00 00 00	 mov	 ecx, 2
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000da	48 8b c8	 mov	 rcx, rax
  000dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  000e3	8b c8		 mov	 ecx, eax
  000e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isatty
  000eb	85 c0		 test	 eax, eax
  000ed	74 0a		 je	 SHORT $LN175@main
  000ef	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR tv88[rsp], 1
  000f7	eb 08		 jmp	 SHORT $LN176@main
$LN175@main:
  000f9	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
$LN176@main:
  00101	83 7c 24 78 00	 cmp	 DWORD PTR tv88[rsp], 0
  00106	75 0a		 jne	 SHORT $LN177@main
  00108	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv90[rsp], 0
  00110	eb 08		 jmp	 SHORT $LN178@main
$LN177@main:
  00112	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR tv90[rsp], 1
$LN178@main:
  0011a	0f b6 44 24 7c	 movzx	 eax, BYTE PTR tv90[rsp]
  0011f	88 05 00 00 00
	00		 mov	 BYTE PTR err_istty, al

; 2682 : 
; 2683 :     /* Process command-line arguments. Show help and exit if errors. */
; 2684 :     process_args( argc, argv );

  00125	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0012d	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  00134	e8 00 00 00 00	 call	 process_args

; 2685 : 
; 2686 :     /* Read Trace File TFSYS record */
; 2687 :     if ((bytes_read = fread( iobuff, 1, sizeof( TFSYS ), inf )) != sizeof( TFSYS ))

  00139	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR inf
  00140	41 b8 f0 00 00
	00		 mov	 r8d, 240		; 000000f0H
  00146	ba 01 00 00 00	 mov	 edx, 1
  0014b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:iobuff
  00152	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  00158	48 89 44 24 68	 mov	 QWORD PTR bytes_read$[rsp], rax
  0015d	48 81 7c 24 68
	f0 00 00 00	 cmp	 QWORD PTR bytes_read$[rsp], 240 ; 000000f0H
  00166	74 75		 je	 SHORT $LN6@main

; 2688 :     {
; 2689 :         // "Error reading trace file: %s"
; 2690 :         FWRMSG( stderr, HHC03206, "E", strerror( errno ));

  00168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0016e	8b 08		 mov	 ecx, DWORD PTR [rax]
  00170	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00176	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv132[rsp], rax
  0017e	b9 02 00 00 00	 mov	 ecx, 2
  00183	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00189	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv132[rsp]
  00191	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00196	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161201
  0019d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161202
  001a9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ae	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b3	41 b9 03 00 00
	00		 mov	 r9d, 3
  001b9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161203
  001c0	ba 82 0a 00 00	 mov	 edx, 2690		; 00000a82H
  001c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161204
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2691 :         exit( -1 );

  001d2	b9 ff ff ff ff	 mov	 ecx, -1
  001d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN6@main:

; 2692 :     }
; 2693 : 
; 2694 :     if (bytes_read < sizeof( TFSYS ))

  001dd	48 81 7c 24 68
	f0 00 00 00	 cmp	 QWORD PTR bytes_read$[rsp], 240 ; 000000f0H
  001e6	73 5e		 jae	 SHORT $LN7@main

; 2695 :     {
; 2696 :         // "Truncated %s record; aborting"
; 2697 :         FWRMSG( stderr, HHC03207, "E", "TFSYS" );

  001e8	b9 02 00 00 00	 mov	 ecx, 2
  001ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161206
  001fa	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161207
  00206	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0020b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161208
  00212	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00217	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0021c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00222	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161209
  00229	ba 89 0a 00 00	 mov	 edx, 2697		; 00000a89H
  0022e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161210
  00235	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2698 :         exit( -1 );

  0023b	b9 ff ff ff ff	 mov	 ecx, -1
  00240	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN7@main:

; 2699 :     }
; 2700 : 
; 2701 :     /* Point to the TFSYS record we just read */
; 2702 :     sys = (TFSYS*) iobuff;

  00246	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:iobuff
  0024d	48 89 44 24 60	 mov	 QWORD PTR sys$[rsp], rax

; 2703 : 
; 2704 :     /* Check the TFSYS record for compatibility */
; 2705 :     if (0
; 2706 :         || sys->ffmt[0] != '%'
; 2707 :         || sys->ffmt[1] != 'T'
; 2708 :         || sys->ffmt[2] != 'F'

  00252	33 c0		 xor	 eax, eax
  00254	85 c0		 test	 eax, eax
  00256	75 45		 jne	 SHORT $LN9@main
  00258	b8 01 00 00 00	 mov	 eax, 1
  0025d	48 6b c0 00	 imul	 rax, rax, 0
  00261	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sys$[rsp]
  00266	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0026a	83 f8 25	 cmp	 eax, 37			; 00000025H
  0026d	75 2e		 jne	 SHORT $LN9@main
  0026f	b8 01 00 00 00	 mov	 eax, 1
  00274	48 6b c0 01	 imul	 rax, rax, 1
  00278	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sys$[rsp]
  0027d	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00281	83 f8 54	 cmp	 eax, 84			; 00000054H
  00284	75 17		 jne	 SHORT $LN9@main
  00286	b8 01 00 00 00	 mov	 eax, 1
  0028b	48 6b c0 02	 imul	 rax, rax, 2
  0028f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sys$[rsp]
  00294	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00298	83 f8 46	 cmp	 eax, 70			; 00000046H
  0029b	74 52		 je	 SHORT $LN8@main
$LN9@main:

; 2709 :     )
; 2710 :     {
; 2711 :         // "File does not start with TFSYS record; aborting"
; 2712 :         FWRMSG( stderr, HHC03212, "E" );

  0029d	b9 02 00 00 00	 mov	 ecx, 2
  002a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161213
  002af	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161214
  002bb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002c0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002c5	41 b9 03 00 00
	00		 mov	 r9d, 3
  002cb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161215
  002d2	ba 98 0a 00 00	 mov	 edx, 2712		; 00000a98H
  002d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161216
  002de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2713 :         exit( -1 );

  002e4	b9 ff ff ff ff	 mov	 ecx, -1
  002e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN8@main:

; 2714 :     }
; 2715 : 
; 2716 :     if (0
; 2717 :         || sys->ffmt[3] < '0'
; 2718 :         || sys->ffmt[3] > TF_FMT

  002ef	33 c0		 xor	 eax, eax
  002f1	85 c0		 test	 eax, eax
  002f3	75 2e		 jne	 SHORT $LN11@main
  002f5	b8 01 00 00 00	 mov	 eax, 1
  002fa	48 6b c0 03	 imul	 rax, rax, 3
  002fe	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sys$[rsp]
  00303	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00307	83 f8 30	 cmp	 eax, 48			; 00000030H
  0030a	7c 17		 jl	 SHORT $LN11@main
  0030c	b8 01 00 00 00	 mov	 eax, 1
  00311	48 6b c0 03	 imul	 rax, rax, 3
  00315	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sys$[rsp]
  0031a	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0031e	83 f8 30	 cmp	 eax, 48			; 00000030H
  00321	7e 76		 jle	 SHORT $LN10@main
$LN11@main:

; 2719 :     )
; 2720 :     {
; 2721 :         // "Unsupported Trace File format: %%TF%c"
; 2722 :         FWRMSG( stderr, HHC03213, "E", sys->ffmt[3] );

  00323	b8 01 00 00 00	 mov	 eax, 1
  00328	48 6b c0 03	 imul	 rax, rax, 3
  0032c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sys$[rsp]
  00331	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00335	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv198[rsp], eax
  0033c	b9 02 00 00 00	 mov	 ecx, 2
  00341	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00347	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv198[rsp]
  0034e	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00352	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161219
  00359	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0035e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161220
  00365	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0036a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0036f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00375	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161221
  0037c	ba a2 0a 00 00	 mov	 edx, 2722		; 00000aa2H
  00381	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161222
  00388	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2723 :         exit( -1 );

  0038e	b9 ff ff ff ff	 mov	 ecx, -1
  00393	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN10@main:

; 2724 :     }
; 2725 : 
; 2726 :     if (sys->engs > MAX_CPU_ENGS)

  00399	48 8b 44 24 60	 mov	 rax, QWORD PTR sys$[rsp]
  0039e	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  003a2	83 f8 40	 cmp	 eax, 64			; 00000040H
  003a5	7e 52		 jle	 SHORT $LN12@main

; 2727 :     {
; 2728 :         // "Incompatible MAX_CPU_ENGS"
; 2729 :         FWRMSG( stderr, HHC03210, "E" );

  003a7	b9 02 00 00 00	 mov	 ecx, 2
  003ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161224
  003b9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161225
  003c5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003ca	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003cf	41 b9 03 00 00
	00		 mov	 r9d, 3
  003d5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161226
  003dc	ba a9 0a 00 00	 mov	 edx, 2729		; 00000aa9H
  003e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161227
  003e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2730 :         exit( -1 );

  003ee	b9 ff ff ff ff	 mov	 ecx, -1
  003f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN12@main:

; 2731 :     }
; 2732 : 
; 2733 :     if (0
; 2734 :         || sys->archnum0 != _ARCH_NUM_0
; 2735 :         || sys->archnum1 != _ARCH_NUM_1
; 2736 :         || sys->archnum2 != _ARCH_NUM_2

  003f9	33 c0		 xor	 eax, eax
  003fb	85 c0		 test	 eax, eax
  003fd	75 30		 jne	 SHORT $LN14@main
  003ff	48 8b 44 24 60	 mov	 rax, QWORD PTR sys$[rsp]
  00404	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  00408	3d 72 01 00 00	 cmp	 eax, 370		; 00000172H
  0040d	75 20		 jne	 SHORT $LN14@main
  0040f	48 8b 44 24 60	 mov	 rax, QWORD PTR sys$[rsp]
  00414	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00418	3d 86 01 00 00	 cmp	 eax, 390		; 00000186H
  0041d	75 10		 jne	 SHORT $LN14@main
  0041f	48 8b 44 24 60	 mov	 rax, QWORD PTR sys$[rsp]
  00424	0f b7 40 0a	 movzx	 eax, WORD PTR [rax+10]
  00428	3d 84 03 00 00	 cmp	 eax, 900		; 00000384H
  0042d	74 52		 je	 SHORT $LN13@main
$LN14@main:

; 2737 :     )
; 2738 :     {
; 2739 :         // "Incompatible Hercules build architectures"
; 2740 :         FWRMSG( stderr, HHC03216, "E" );

  0042f	b9 02 00 00 00	 mov	 ecx, 2
  00434	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0043a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161230
  00441	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00446	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161231
  0044d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00452	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00457	41 b9 03 00 00
	00		 mov	 r9d, 3
  0045d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161232
  00464	ba b4 0a 00 00	 mov	 edx, 2740		; 00000ab4H
  00469	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161233
  00470	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2741 :         exit( -1 );

  00476	b9 ff ff ff ff	 mov	 ecx, -1
  0047b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN13@main:

; 2742 :     }
; 2743 : 
; 2744 :     /* Save actual endianness of the file */
; 2745 :     was_bigend = sys->bigend;

  00481	48 8b 44 24 60	 mov	 rax, QWORD PTR sys$[rsp]
  00486	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  0048a	85 c0		 test	 eax, eax
  0048c	75 0d		 jne	 SHORT $LN179@main
  0048e	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv246[rsp], 0
  00499	eb 0b		 jmp	 SHORT $LN180@main
$LN179@main:
  0049b	c7 84 24 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv246[rsp], 1
$LN180@main:
  004a6	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR tv246[rsp]
  004ae	88 44 24 5c	 mov	 BYTE PTR was_bigend$[rsp], al

; 2746 : 
; 2747 :     /* Swap endianness of TFSYS record, if needed */
; 2748 :     if ((doendswap = tf_are_swaps_needed( sys )))

  004b2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sys$[rsp]
  004b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tf_are_swaps_needed
  004bd	88 05 00 00 00
	00		 mov	 BYTE PTR doendswap, al
  004c3	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR doendswap
  004ca	85 c0		 test	 eax, eax
  004cc	74 0b		 je	 SHORT $LN15@main

; 2749 :         tf_swap_sys( sys );

  004ce	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sys$[rsp]
  004d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tf_swap_sys
$LN15@main:

; 2750 : 
; 2751 :     /* Print TFSYS record information */
; 2752 :     print_TFSYS( sys, was_bigend );

  004d9	0f b6 54 24 5c	 movzx	 edx, BYTE PTR was_bigend$[rsp]
  004de	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sys$[rsp]
  004e3	e8 00 00 00 00	 call	 print_TFSYS

; 2753 : 
; 2754 :     if (info_only)

  004e8	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR info_only
  004ef	85 c0		 test	 eax, eax
  004f1	74 05		 je	 SHORT $LN16@main

; 2755 :         goto done;

  004f3	e9 27 0d 00 00	 jmp	 $done$269
$LN16@main:

; 2756 : 
; 2757 :     /* Now read and process trace file records until EOF is reached */
; 2758 :     hdr = (TFHDR*) iobuff;

  004f8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:iobuff
  004ff	48 89 44 24 50	 mov	 QWORD PTR hdr$[rsp], rax
$LN260@main:
$LN259@main:
$LN258@main:
$LN257@main:
$LN256@main:
$LN255@main:
$LN254@main:
$LN253@main:
$LN252@main:
$LN251@main:
$LN250@main:
$LN249@main:
$LN248@main:
$LN247@main:
$LN246@main:
$LN245@main:
$LN244@main:
$LN243@main:
$LN242@main:
$LN241@main:
$LN240@main:
$LN239@main:
$LN238@main:
$LN237@main:
$LN236@main:
$LN235@main:
$LN234@main:
$LN233@main:
$LN232@main:
$LN231@main:
$LN230@main:
$LN229@main:
$LN228@main:
$LN227@main:
$LN226@main:
$LN225@main:
$LN224@main:
$LN223@main:
$LN222@main:
$LN221@main:
$LN220@main:
$LN219@main:
$LN218@main:
$LN217@main:
$LN216@main:
$LN215@main:
$LN214@main:
$LN213@main:
$LN212@main:
$LN211@main:
$LN210@main:
$LN209@main:
$LN208@main:
$LN207@main:
$LN206@main:
$LN205@main:
$LN204@main:
$LN203@main:
$LN202@main:
$LN201@main:
$LN200@main:
$LN199@main:
$LN198@main:
$LN197@main:
$LN196@main:
$LN195@main:
$LN194@main:
$LN193@main:
$LN192@main:
$LN191@main:
$LN190@main:
$LN189@main:
$LN188@main:
$LN2@main:

; 2759 :     while (recnum < torec)

  00504	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR torec
  0050b	48 39 05 00 00
	00 00		 cmp	 QWORD PTR recnum, rax
  00512	0f 83 e4 0b 00
	00		 jae	 $LN3@main

; 2760 :     {
; 2761 :         /* Read just TFHDR for now, so we can identify record */
; 2762 :         if ((bytes_read = fread( hdr, 1, sizeof( TFHDR ), inf )) != sizeof( TFHDR ))

  00518	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR inf
  0051f	41 b8 18 00 00
	00		 mov	 r8d, 24
  00525	ba 01 00 00 00	 mov	 edx, 1
  0052a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  0052f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  00535	48 89 44 24 68	 mov	 QWORD PTR bytes_read$[rsp], rax
  0053a	48 83 7c 24 68
	18		 cmp	 QWORD PTR bytes_read$[rsp], 24
  00540	0f 84 82 00 00
	00		 je	 $LN17@main

; 2763 :         {
; 2764 :             /* Stop when EOF reached */
; 2765 :             if (!bytes_read)

  00546	48 83 7c 24 68
	00		 cmp	 QWORD PTR bytes_read$[rsp], 0
  0054c	75 05		 jne	 SHORT $LN18@main

; 2766 :                 break;

  0054e	e9 a9 0b 00 00	 jmp	 $LN3@main
$LN18@main:

; 2767 : 
; 2768 :             // "Error reading trace file: %s"
; 2769 :             FWRMSG( stderr, HHC03206, "E", strerror( errno ));

  00553	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00559	8b 08		 mov	 ecx, DWORD PTR [rax]
  0055b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00561	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv297[rsp], rax
  00569	b9 02 00 00 00	 mov	 ecx, 2
  0056e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00574	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv297[rsp]
  0057c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00581	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161238
  00588	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0058d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161239
  00594	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00599	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0059e	41 b9 03 00 00
	00		 mov	 r9d, 3
  005a4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161240
  005ab	ba d1 0a 00 00	 mov	 edx, 2769		; 00000ad1H
  005b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161241
  005b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2770 :             exit( -1 );

  005bd	b9 ff ff ff ff	 mov	 ecx, -1
  005c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN17@main:

; 2771 :         }
; 2772 : 
; 2773 :         /* Count records read and show progress */
; 2774 :         if (!(++recnum % 3000))

  005c8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR recnum
  005cf	48 ff c0	 inc	 rax
  005d2	48 89 05 00 00
	00 00		 mov	 QWORD PTR recnum, rax
  005d9	33 d2		 xor	 edx, edx
  005db	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR recnum
  005e2	b9 b8 0b 00 00	 mov	 ecx, 3000		; 00000bb8H
  005e7	48 f7 f1	 div	 rcx
  005ea	48 8b c2	 mov	 rax, rdx
  005ed	48 85 c0	 test	 rax, rax
  005f0	75 05		 jne	 SHORT $LN19@main

; 2775 :             show_file_progress();

  005f2	e8 00 00 00 00	 call	 show_file_progress
$LN19@main:

; 2776 : 
; 2777 :         /* Make sure we have a complete header to work with */
; 2778 :         if (bytes_read < sizeof( TFHDR ))

  005f7	48 83 7c 24 68
	18		 cmp	 QWORD PTR bytes_read$[rsp], 24
  005fd	73 5e		 jae	 SHORT $LN20@main

; 2779 :         {
; 2780 :             // "Truncated %s record; aborting"
; 2781 :             FWRMSG( stderr, HHC03207, "E", "TFHDR" );

  005ff	b9 02 00 00 00	 mov	 ecx, 2
  00604	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0060a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161244
  00611	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00616	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161245
  0061d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00622	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161246
  00629	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0062e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00633	41 b9 03 00 00
	00		 mov	 r9d, 3
  00639	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161247
  00640	ba dd 0a 00 00	 mov	 edx, 2781		; 00000addH
  00645	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161248
  0064c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2782 :             exit( -1 );

  00652	b9 ff ff ff ff	 mov	 ecx, -1
  00657	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN20@main:

; 2783 :         }
; 2784 : 
; 2785 :         /* Swap endianness of header, if needed */
; 2786 :         if (doendswap)

  0065d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR doendswap
  00664	85 c0		 test	 eax, eax
  00666	74 0b		 je	 SHORT $LN21@main

; 2787 :             tf_swap_hdr( hdr );

  00668	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  0066d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tf_swap_hdr
$LN21@main:

; 2788 : 
; 2789 :         /* Fix the 'cpuad' if this is a device trace record */
; 2790 :         if (hdr->cpuad == 0xFFFF)

  00673	48 8b 44 24 50	 mov	 rax, QWORD PTR hdr$[rsp]
  00678	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0067c	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  00681	75 0e		 jne	 SHORT $LN22@main

; 2791 :             hdr->cpuad = MAX_CPU_ENGS;

  00683	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00688	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  0068d	66 89 41 04	 mov	 WORD PTR [rcx+4], ax
$LN22@main:

; 2792 : 
; 2793 :         /* Switch based on header's message number */
; 2794 :         switch (hdr->msgnum)

  00691	48 8b 44 24 50	 mov	 rax, QWORD PTR hdr$[rsp]
  00696	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0069a	89 44 24 58	 mov	 DWORD PTR tv335[rsp], eax
  0069e	81 7c 24 58 20
	03 00 00	 cmp	 DWORD PTR tv335[rsp], 800 ; 00000320H
  006a6	7f 46		 jg	 SHORT $LN181@main
  006a8	81 7c 24 58 20
	03 00 00	 cmp	 DWORD PTR tv335[rsp], 800 ; 00000320H
  006b0	0f 84 08 01 00
	00		 je	 $LN23@main
  006b6	8b 44 24 58	 mov	 eax, DWORD PTR tv335[rsp]
  006ba	2d a7 01 00 00	 sub	 eax, 423		; 000001a7H
  006bf	89 44 24 58	 mov	 DWORD PTR tv335[rsp], eax
  006c3	83 7c 24 58 61	 cmp	 DWORD PTR tv335[rsp], 97 ; 00000061H
  006c8	0f 87 c7 09 00
	00		 ja	 $LN169@main
  006ce	48 63 44 24 58	 movsxd	 rax, DWORD PTR tv335[rsp]
  006d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  006da	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN266@main[rcx+rax]
  006e2	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN267@main[rcx+rax*4]
  006e9	48 03 c1	 add	 rax, rcx
  006ec	ff e0		 jmp	 rax
$LN181@main:
  006ee	81 7c 24 58 14
	05 00 00	 cmp	 DWORD PTR tv335[rsp], 1300 ; 00000514H
  006f6	7f 46		 jg	 SHORT $LN182@main
  006f8	81 7c 24 58 14
	05 00 00	 cmp	 DWORD PTR tv335[rsp], 1300 ; 00000514H
  00700	0f 84 88 06 00
	00		 je	 $LN119@main
  00706	8b 44 24 58	 mov	 eax, DWORD PTR tv335[rsp]
  0070a	2d 21 03 00 00	 sub	 eax, 801		; 00000321H
  0070f	89 44 24 58	 mov	 DWORD PTR tv335[rsp], eax
  00713	83 7c 24 58 2d	 cmp	 DWORD PTR tv335[rsp], 45 ; 0000002dH
  00718	0f 87 77 09 00
	00		 ja	 $LN169@main
  0071e	48 63 44 24 58	 movsxd	 rax, DWORD PTR tv335[rsp]
  00723	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0072a	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN264@main[rcx+rax]
  00732	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN265@main[rcx+rax*4]
  00739	48 03 c1	 add	 rax, rcx
  0073c	ff e0		 jmp	 rax
$LN182@main:
  0073e	81 7c 24 58 dd
	08 00 00	 cmp	 DWORD PTR tv335[rsp], 2269 ; 000008ddH
  00746	7f 3e		 jg	 SHORT $LN183@main
  00748	81 7c 24 58 dd
	08 00 00	 cmp	 DWORD PTR tv335[rsp], 2269 ; 000008ddH
  00750	0f 84 58 02 00
	00		 je	 $LN55@main
  00756	8b 44 24 58	 mov	 eax, DWORD PTR tv335[rsp]
  0075a	2d 15 05 00 00	 sub	 eax, 1301		; 00000515H
  0075f	89 44 24 58	 mov	 DWORD PTR tv335[rsp], eax
  00763	83 7c 24 58 23	 cmp	 DWORD PTR tv335[rsp], 35 ; 00000023H
  00768	0f 87 27 09 00
	00		 ja	 $LN169@main
  0076e	48 63 44 24 58	 movsxd	 rax, DWORD PTR tv335[rsp]
  00773	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0077a	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN263@main[rcx+rax*4]
  00781	48 03 c1	 add	 rax, rcx
  00784	ff e0		 jmp	 rax
$LN183@main:
  00786	8b 44 24 58	 mov	 eax, DWORD PTR tv335[rsp]
  0078a	2d de 08 00 00	 sub	 eax, 2270		; 000008deH
  0078f	89 44 24 58	 mov	 DWORD PTR tv335[rsp], eax
  00793	83 7c 24 58 38	 cmp	 DWORD PTR tv335[rsp], 56 ; 00000038H
  00798	0f 87 f7 08 00
	00		 ja	 $LN169@main
  0079e	48 63 44 24 58	 movsxd	 rax, DWORD PTR tv335[rsp]
  007a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  007aa	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN261@main[rcx+rax]
  007b2	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN262@main[rcx+rax*4]
  007b9	48 03 c1	 add	 rax, rcx
  007bc	ff e0		 jmp	 rax
$LN23@main:

; 2795 :         {
; 2796 : 
; 2797 : #define CASE_FOR_MSGNUM( _num )                                       \
; 2798 :                                                                       \
; 2799 :         case _num:                                                    \
; 2800 :         {                                                             \
; 2801 :             if (finish_reading_rec( _num ))                           \
; 2802 :                 process_TF0  ## _num( (TF0 ## _num*) hdr );           \
; 2803 :             continue;                                                 \
; 2804 :         }
; 2805 : 
; 2806 : #define CASE_FOR_MSGNUM0( _num )                                      \
; 2807 :                                                                       \
; 2808 :         /* (same as above except "TF00" instead of "TF0") */          \
; 2809 :         case _num:                                                    \
; 2810 :         {                                                             \
; 2811 :             if (finish_reading_rec( _num ))                           \
; 2812 :                 process_TF00 ## _num( (TF00 ## _num*) hdr );          \
; 2813 :             continue;                                                 \
; 2814 :         }
; 2815 : 
; 2816 :         // Instruction tracing...
; 2817 : 
; 2818 :         CASE_FOR_MSGNUM0( 800 ); // Wait State PSW

  007be	66 b9 20 03	 mov	 cx, 800			; 00000320H
  007c2	e8 00 00 00 00	 call	 finish_reading_rec
  007c7	0f b6 c0	 movzx	 eax, al
  007ca	85 c0		 test	 eax, eax
  007cc	74 0a		 je	 SHORT $LN24@main
  007ce	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  007d3	e8 00 00 00 00	 call	 process_TF00800
$LN24@main:
  007d8	e9 27 fd ff ff	 jmp	 $LN2@main
$LN25@main:

; 2819 :         CASE_FOR_MSGNUM0( 801 ); // Program Interrupt

  007dd	66 b9 21 03	 mov	 cx, 801			; 00000321H
  007e1	e8 00 00 00 00	 call	 finish_reading_rec
  007e6	0f b6 c0	 movzx	 eax, al
  007e9	85 c0		 test	 eax, eax
  007eb	74 0a		 je	 SHORT $LN26@main
  007ed	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  007f2	e8 00 00 00 00	 call	 process_TF00801
$LN26@main:
  007f7	e9 08 fd ff ff	 jmp	 $LN188@main
$LN27@main:

; 2820 :         CASE_FOR_MSGNUM0( 802 ); // PER event

  007fc	66 b9 22 03	 mov	 cx, 802			; 00000322H
  00800	e8 00 00 00 00	 call	 finish_reading_rec
  00805	0f b6 c0	 movzx	 eax, al
  00808	85 c0		 test	 eax, eax
  0080a	74 0a		 je	 SHORT $LN28@main
  0080c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00811	e8 00 00 00 00	 call	 process_TF00802
$LN28@main:
  00816	e9 e9 fc ff ff	 jmp	 $LN189@main
$LN29@main:

; 2821 :         CASE_FOR_MSGNUM0( 803 ); // Program interrupt loop

  0081b	66 b9 23 03	 mov	 cx, 803			; 00000323H
  0081f	e8 00 00 00 00	 call	 finish_reading_rec
  00824	0f b6 c0	 movzx	 eax, al
  00827	85 c0		 test	 eax, eax
  00829	74 0a		 je	 SHORT $LN30@main
  0082b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00830	e8 00 00 00 00	 call	 process_TF00803
$LN30@main:
  00835	e9 ca fc ff ff	 jmp	 $LN190@main
$LN31@main:

; 2822 :         CASE_FOR_MSGNUM0( 804 ); // I/O interrupt (S/370)

  0083a	66 b9 24 03	 mov	 cx, 804			; 00000324H
  0083e	e8 00 00 00 00	 call	 finish_reading_rec
  00843	0f b6 c0	 movzx	 eax, al
  00846	85 c0		 test	 eax, eax
  00848	74 0a		 je	 SHORT $LN32@main
  0084a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  0084f	e8 00 00 00 00	 call	 process_TF00804
$LN32@main:
  00854	e9 ab fc ff ff	 jmp	 $LN191@main
$LN33@main:

; 2823 :         CASE_FOR_MSGNUM0( 806 ); // I/O Interrupt

  00859	66 b9 26 03	 mov	 cx, 806			; 00000326H
  0085d	e8 00 00 00 00	 call	 finish_reading_rec
  00862	0f b6 c0	 movzx	 eax, al
  00865	85 c0		 test	 eax, eax
  00867	74 0a		 je	 SHORT $LN34@main
  00869	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  0086e	e8 00 00 00 00	 call	 process_TF00806
$LN34@main:
  00873	e9 8c fc ff ff	 jmp	 $LN192@main
$LN35@main:

; 2824 :         CASE_FOR_MSGNUM0( 807 ); // Machine Check Interrupt

  00878	66 b9 27 03	 mov	 cx, 807			; 00000327H
  0087c	e8 00 00 00 00	 call	 finish_reading_rec
  00881	0f b6 c0	 movzx	 eax, al
  00884	85 c0		 test	 eax, eax
  00886	74 0a		 je	 SHORT $LN36@main
  00888	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  0088d	e8 00 00 00 00	 call	 process_TF00807
$LN36@main:
  00892	e9 6d fc ff ff	 jmp	 $LN193@main
$LN37@main:

; 2825 :         CASE_FOR_MSGNUM0( 808 ); // Store Status

  00897	66 b9 28 03	 mov	 cx, 808			; 00000328H
  0089b	e8 00 00 00 00	 call	 finish_reading_rec
  008a0	0f b6 c0	 movzx	 eax, al
  008a3	85 c0		 test	 eax, eax
  008a5	74 0a		 je	 SHORT $LN38@main
  008a7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  008ac	e8 00 00 00 00	 call	 process_TF00808
$LN38@main:
  008b1	e9 4e fc ff ff	 jmp	 $LN194@main
$LN39@main:

; 2826 :         CASE_FOR_MSGNUM0( 809 ); // Disabled Wait State

  008b6	66 b9 29 03	 mov	 cx, 809			; 00000329H
  008ba	e8 00 00 00 00	 call	 finish_reading_rec
  008bf	0f b6 c0	 movzx	 eax, al
  008c2	85 c0		 test	 eax, eax
  008c4	74 0a		 je	 SHORT $LN40@main
  008c6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  008cb	e8 00 00 00 00	 call	 process_TF00809
$LN40@main:
  008d0	e9 2f fc ff ff	 jmp	 $LN195@main
$LN41@main:

; 2827 :         CASE_FOR_MSGNUM0( 811 ); // Architecture mode

  008d5	66 b9 2b 03	 mov	 cx, 811			; 0000032bH
  008d9	e8 00 00 00 00	 call	 finish_reading_rec
  008de	0f b6 c0	 movzx	 eax, al
  008e1	85 c0		 test	 eax, eax
  008e3	74 0a		 je	 SHORT $LN42@main
  008e5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  008ea	e8 00 00 00 00	 call	 process_TF00811
$LN42@main:
  008ef	e9 10 fc ff ff	 jmp	 $LN196@main
$LN43@main:

; 2828 :         CASE_FOR_MSGNUM0( 812 ); // Vector facility online (370/390)

  008f4	66 b9 2c 03	 mov	 cx, 812			; 0000032cH
  008f8	e8 00 00 00 00	 call	 finish_reading_rec
  008fd	0f b6 c0	 movzx	 eax, al
  00900	85 c0		 test	 eax, eax
  00902	74 0a		 je	 SHORT $LN44@main
  00904	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00909	e8 00 00 00 00	 call	 process_TF00812
$LN44@main:
  0090e	e9 f1 fb ff ff	 jmp	 $LN197@main
$LN45@main:

; 2829 :         CASE_FOR_MSGNUM0( 814 ); // Signal Processor

  00913	66 b9 2e 03	 mov	 cx, 814			; 0000032eH
  00917	e8 00 00 00 00	 call	 finish_reading_rec
  0091c	0f b6 c0	 movzx	 eax, al
  0091f	85 c0		 test	 eax, eax
  00921	74 0a		 je	 SHORT $LN46@main
  00923	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00928	e8 00 00 00 00	 call	 process_TF00814
$LN46@main:
  0092d	e9 d2 fb ff ff	 jmp	 $LN198@main
$LN47@main:

; 2830 :         CASE_FOR_MSGNUM0( 840 ); // External Interrupt

  00932	66 b9 48 03	 mov	 cx, 840			; 00000348H
  00936	e8 00 00 00 00	 call	 finish_reading_rec
  0093b	0f b6 c0	 movzx	 eax, al
  0093e	85 c0		 test	 eax, eax
  00940	74 0a		 je	 SHORT $LN48@main
  00942	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00947	e8 00 00 00 00	 call	 process_TF00840
$LN48@main:
  0094c	e9 b3 fb ff ff	 jmp	 $LN199@main
$LN49@main:

; 2831 :         CASE_FOR_MSGNUM0( 844 ); // Block I/O Interrupt

  00951	66 b9 4c 03	 mov	 cx, 844			; 0000034cH
  00955	e8 00 00 00 00	 call	 finish_reading_rec
  0095a	0f b6 c0	 movzx	 eax, al
  0095d	85 c0		 test	 eax, eax
  0095f	74 0a		 je	 SHORT $LN50@main
  00961	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00966	e8 00 00 00 00	 call	 process_TF00844
$LN50@main:
  0096b	e9 94 fb ff ff	 jmp	 $LN200@main
$LN51@main:

; 2832 :         CASE_FOR_MSGNUM0( 845 ); // Block I/O External interrupt

  00970	66 b9 4d 03	 mov	 cx, 845			; 0000034dH
  00974	e8 00 00 00 00	 call	 finish_reading_rec
  00979	0f b6 c0	 movzx	 eax, al
  0097c	85 c0		 test	 eax, eax
  0097e	74 0a		 je	 SHORT $LN52@main
  00980	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00985	e8 00 00 00 00	 call	 process_TF00845
$LN52@main:
  0098a	e9 75 fb ff ff	 jmp	 $LN201@main
$LN53@main:

; 2833 :         CASE_FOR_MSGNUM0( 846 ); // Service Signal External Interrupt

  0098f	66 b9 4e 03	 mov	 cx, 846			; 0000034eH
  00993	e8 00 00 00 00	 call	 finish_reading_rec
  00998	0f b6 c0	 movzx	 eax, al
  0099b	85 c0		 test	 eax, eax
  0099d	74 0a		 je	 SHORT $LN54@main
  0099f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  009a4	e8 00 00 00 00	 call	 process_TF00846
$LN54@main:
  009a9	e9 56 fb ff ff	 jmp	 $LN202@main
$LN55@main:

; 2834 : 
; 2835 :         CASE_FOR_MSGNUM( 2269 ); // General Registers

  009ae	66 b9 dd 08	 mov	 cx, 2269		; 000008ddH
  009b2	e8 00 00 00 00	 call	 finish_reading_rec
  009b7	0f b6 c0	 movzx	 eax, al
  009ba	85 c0		 test	 eax, eax
  009bc	74 0a		 je	 SHORT $LN56@main
  009be	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  009c3	e8 00 00 00 00	 call	 process_TF02269
$LN56@main:
  009c8	e9 37 fb ff ff	 jmp	 $LN203@main
$LN57@main:

; 2836 :         CASE_FOR_MSGNUM( 2270 ); // Floating Point Registers

  009cd	66 b9 de 08	 mov	 cx, 2270		; 000008deH
  009d1	e8 00 00 00 00	 call	 finish_reading_rec
  009d6	0f b6 c0	 movzx	 eax, al
  009d9	85 c0		 test	 eax, eax
  009db	74 0a		 je	 SHORT $LN58@main
  009dd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  009e2	e8 00 00 00 00	 call	 process_TF02270
$LN58@main:
  009e7	e9 18 fb ff ff	 jmp	 $LN204@main
$LN59@main:

; 2837 :         CASE_FOR_MSGNUM( 2271 ); // Control Registers

  009ec	66 b9 df 08	 mov	 cx, 2271		; 000008dfH
  009f0	e8 00 00 00 00	 call	 finish_reading_rec
  009f5	0f b6 c0	 movzx	 eax, al
  009f8	85 c0		 test	 eax, eax
  009fa	74 0a		 je	 SHORT $LN60@main
  009fc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00a01	e8 00 00 00 00	 call	 process_TF02271
$LN60@main:
  00a06	e9 f9 fa ff ff	 jmp	 $LN205@main
$LN61@main:

; 2838 :         CASE_FOR_MSGNUM( 2272 ); // Access Registers

  00a0b	66 b9 e0 08	 mov	 cx, 2272		; 000008e0H
  00a0f	e8 00 00 00 00	 call	 finish_reading_rec
  00a14	0f b6 c0	 movzx	 eax, al
  00a17	85 c0		 test	 eax, eax
  00a19	74 0a		 je	 SHORT $LN62@main
  00a1b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00a20	e8 00 00 00 00	 call	 process_TF02272
$LN62@main:
  00a25	e9 da fa ff ff	 jmp	 $LN206@main
$LN63@main:

; 2839 :         CASE_FOR_MSGNUM( 2276 ); // Floating Point Control Register

  00a2a	66 b9 e4 08	 mov	 cx, 2276		; 000008e4H
  00a2e	e8 00 00 00 00	 call	 finish_reading_rec
  00a33	0f b6 c0	 movzx	 eax, al
  00a36	85 c0		 test	 eax, eax
  00a38	74 0a		 je	 SHORT $LN64@main
  00a3a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00a3f	e8 00 00 00 00	 call	 process_TF02276
$LN64@main:
  00a44	e9 bb fa ff ff	 jmp	 $LN207@main
$LN65@main:

; 2840 :         CASE_FOR_MSGNUM( 2324 ); // Instruction Trace

  00a49	66 b9 14 09	 mov	 cx, 2324		; 00000914H
  00a4d	e8 00 00 00 00	 call	 finish_reading_rec
  00a52	0f b6 c0	 movzx	 eax, al
  00a55	85 c0		 test	 eax, eax
  00a57	74 0a		 je	 SHORT $LN66@main
  00a59	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00a5e	e8 00 00 00 00	 call	 process_TF02324
$LN66@main:
  00a63	e9 9c fa ff ff	 jmp	 $LN208@main
$LN67@main:

; 2841 :         CASE_FOR_MSGNUM( 2326 ); // Instruction Operands

  00a68	66 b9 16 09	 mov	 cx, 2326		; 00000916H
  00a6c	e8 00 00 00 00	 call	 finish_reading_rec
  00a71	0f b6 c0	 movzx	 eax, al
  00a74	85 c0		 test	 eax, eax
  00a76	74 0a		 je	 SHORT $LN68@main
  00a78	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00a7d	e8 00 00 00 00	 call	 process_TF02326
$LN68@main:
  00a82	e9 7d fa ff ff	 jmp	 $LN209@main
$LN69@main:

; 2842 : 
; 2843 :         // Device tracing ...
; 2844 : 
; 2845 :         CASE_FOR_MSGNUM0( 423 ); // Search key

  00a87	66 b9 a7 01	 mov	 cx, 423			; 000001a7H
  00a8b	e8 00 00 00 00	 call	 finish_reading_rec
  00a90	0f b6 c0	 movzx	 eax, al
  00a93	85 c0		 test	 eax, eax
  00a95	74 0a		 je	 SHORT $LN70@main
  00a97	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00a9c	e8 00 00 00 00	 call	 process_TF00423
$LN70@main:
  00aa1	e9 5e fa ff ff	 jmp	 $LN210@main
$LN71@main:

; 2846 :         CASE_FOR_MSGNUM0( 424 ); // Cur trk

  00aa6	66 b9 a8 01	 mov	 cx, 424			; 000001a8H
  00aaa	e8 00 00 00 00	 call	 finish_reading_rec
  00aaf	0f b6 c0	 movzx	 eax, al
  00ab2	85 c0		 test	 eax, eax
  00ab4	74 0a		 je	 SHORT $LN72@main
  00ab6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00abb	e8 00 00 00 00	 call	 process_TF00424
$LN72@main:
  00ac0	e9 3f fa ff ff	 jmp	 $LN211@main
$LN73@main:

; 2847 :         CASE_FOR_MSGNUM0( 425 ); // Updating track

  00ac5	66 b9 a9 01	 mov	 cx, 425			; 000001a9H
  00ac9	e8 00 00 00 00	 call	 finish_reading_rec
  00ace	0f b6 c0	 movzx	 eax, al
  00ad1	85 c0		 test	 eax, eax
  00ad3	74 0a		 je	 SHORT $LN74@main
  00ad5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00ada	e8 00 00 00 00	 call	 process_TF00425
$LN74@main:
  00adf	e9 20 fa ff ff	 jmp	 $LN212@main
$LN75@main:

; 2848 :         CASE_FOR_MSGNUM0( 426 ); // Cache hit

  00ae4	66 b9 aa 01	 mov	 cx, 426			; 000001aaH
  00ae8	e8 00 00 00 00	 call	 finish_reading_rec
  00aed	0f b6 c0	 movzx	 eax, al
  00af0	85 c0		 test	 eax, eax
  00af2	74 0a		 je	 SHORT $LN76@main
  00af4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00af9	e8 00 00 00 00	 call	 process_TF00426
$LN76@main:
  00afe	e9 01 fa ff ff	 jmp	 $LN213@main
$LN77@main:

; 2849 :         CASE_FOR_MSGNUM0( 427 ); // Unavailable cache

  00b03	66 b9 ab 01	 mov	 cx, 427			; 000001abH
  00b07	e8 00 00 00 00	 call	 finish_reading_rec
  00b0c	0f b6 c0	 movzx	 eax, al
  00b0f	85 c0		 test	 eax, eax
  00b11	74 0a		 je	 SHORT $LN78@main
  00b13	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00b18	e8 00 00 00 00	 call	 process_TF00427
$LN78@main:
  00b1d	e9 e2 f9 ff ff	 jmp	 $LN214@main
$LN79@main:

; 2850 :         CASE_FOR_MSGNUM0( 428 ); // Cache miss

  00b22	66 b9 ac 01	 mov	 cx, 428			; 000001acH
  00b26	e8 00 00 00 00	 call	 finish_reading_rec
  00b2b	0f b6 c0	 movzx	 eax, al
  00b2e	85 c0		 test	 eax, eax
  00b30	74 0a		 je	 SHORT $LN80@main
  00b32	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00b37	e8 00 00 00 00	 call	 process_TF00428
$LN80@main:
  00b3c	e9 c3 f9 ff ff	 jmp	 $LN215@main
$LN81@main:

; 2851 :         CASE_FOR_MSGNUM0( 429 ); // Offset

  00b41	66 b9 ad 01	 mov	 cx, 429			; 000001adH
  00b45	e8 00 00 00 00	 call	 finish_reading_rec
  00b4a	0f b6 c0	 movzx	 eax, al
  00b4d	85 c0		 test	 eax, eax
  00b4f	74 0a		 je	 SHORT $LN82@main
  00b51	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00b56	e8 00 00 00 00	 call	 process_TF00429
$LN82@main:
  00b5b	e9 a4 f9 ff ff	 jmp	 $LN216@main
$LN83@main:

; 2852 :         CASE_FOR_MSGNUM0( 430 ); // Trkhdr

  00b60	66 b9 ae 01	 mov	 cx, 430			; 000001aeH
  00b64	e8 00 00 00 00	 call	 finish_reading_rec
  00b69	0f b6 c0	 movzx	 eax, al
  00b6c	85 c0		 test	 eax, eax
  00b6e	74 0a		 je	 SHORT $LN84@main
  00b70	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00b75	e8 00 00 00 00	 call	 process_TF00430
$LN84@main:
  00b7a	e9 85 f9 ff ff	 jmp	 $LN217@main
$LN85@main:

; 2853 :         CASE_FOR_MSGNUM0( 431 ); // Seeking

  00b7f	66 b9 af 01	 mov	 cx, 431			; 000001afH
  00b83	e8 00 00 00 00	 call	 finish_reading_rec
  00b88	0f b6 c0	 movzx	 eax, al
  00b8b	85 c0		 test	 eax, eax
  00b8d	74 0a		 je	 SHORT $LN86@main
  00b8f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00b94	e8 00 00 00 00	 call	 process_TF00431
$LN86@main:
  00b99	e9 66 f9 ff ff	 jmp	 $LN218@main
$LN87@main:

; 2854 :         CASE_FOR_MSGNUM0( 432 ); // MT advance error

  00b9e	66 b9 b0 01	 mov	 cx, 432			; 000001b0H
  00ba2	e8 00 00 00 00	 call	 finish_reading_rec
  00ba7	0f b6 c0	 movzx	 eax, al
  00baa	85 c0		 test	 eax, eax
  00bac	74 0a		 je	 SHORT $LN88@main
  00bae	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00bb3	e8 00 00 00 00	 call	 process_TF00432
$LN88@main:
  00bb8	e9 47 f9 ff ff	 jmp	 $LN219@main
$LN89@main:

; 2855 :         CASE_FOR_MSGNUM0( 433 ); // MT advance

  00bbd	66 b9 b1 01	 mov	 cx, 433			; 000001b1H
  00bc1	e8 00 00 00 00	 call	 finish_reading_rec
  00bc6	0f b6 c0	 movzx	 eax, al
  00bc9	85 c0		 test	 eax, eax
  00bcb	74 0a		 je	 SHORT $LN90@main
  00bcd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00bd2	e8 00 00 00 00	 call	 process_TF00433
$LN90@main:
  00bd7	e9 28 f9 ff ff	 jmp	 $LN220@main
$LN91@main:

; 2856 :         CASE_FOR_MSGNUM0( 434 ); // Read count orientation

  00bdc	66 b9 b2 01	 mov	 cx, 434			; 000001b2H
  00be0	e8 00 00 00 00	 call	 finish_reading_rec
  00be5	0f b6 c0	 movzx	 eax, al
  00be8	85 c0		 test	 eax, eax
  00bea	74 0a		 je	 SHORT $LN92@main
  00bec	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00bf1	e8 00 00 00 00	 call	 process_TF00434
$LN92@main:
  00bf6	e9 09 f9 ff ff	 jmp	 $LN221@main
$LN93@main:

; 2857 :         CASE_FOR_MSGNUM0( 435 ); // Cyl head record kl dl

  00bfb	66 b9 b3 01	 mov	 cx, 435			; 000001b3H
  00bff	e8 00 00 00 00	 call	 finish_reading_rec
  00c04	0f b6 c0	 movzx	 eax, al
  00c07	85 c0		 test	 eax, eax
  00c09	74 0a		 je	 SHORT $LN94@main
  00c0b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00c10	e8 00 00 00 00	 call	 process_TF00435
$LN94@main:
  00c15	e9 ea f8 ff ff	 jmp	 $LN222@main
$LN95@main:

; 2858 :         CASE_FOR_MSGNUM0( 436 ); // Read key

  00c1a	66 b9 b4 01	 mov	 cx, 436			; 000001b4H
  00c1e	e8 00 00 00 00	 call	 finish_reading_rec
  00c23	0f b6 c0	 movzx	 eax, al
  00c26	85 c0		 test	 eax, eax
  00c28	74 0a		 je	 SHORT $LN96@main
  00c2a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00c2f	e8 00 00 00 00	 call	 process_TF00436
$LN96@main:
  00c34	e9 cb f8 ff ff	 jmp	 $LN223@main
$LN97@main:

; 2859 :         CASE_FOR_MSGNUM0( 437 ); // Read data

  00c39	66 b9 b5 01	 mov	 cx, 437			; 000001b5H
  00c3d	e8 00 00 00 00	 call	 finish_reading_rec
  00c42	0f b6 c0	 movzx	 eax, al
  00c45	85 c0		 test	 eax, eax
  00c47	74 0a		 je	 SHORT $LN98@main
  00c49	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00c4e	e8 00 00 00 00	 call	 process_TF00437
$LN98@main:
  00c53	e9 ac f8 ff ff	 jmp	 $LN224@main
$LN99@main:

; 2860 :         CASE_FOR_MSGNUM0( 438 ); // Write cyl head record kl dl

  00c58	66 b9 b6 01	 mov	 cx, 438			; 000001b6H
  00c5c	e8 00 00 00 00	 call	 finish_reading_rec
  00c61	0f b6 c0	 movzx	 eax, al
  00c64	85 c0		 test	 eax, eax
  00c66	74 0a		 je	 SHORT $LN100@main
  00c68	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00c6d	e8 00 00 00 00	 call	 process_TF00438
$LN100@main:
  00c72	e9 8d f8 ff ff	 jmp	 $LN225@main
$LN101@main:

; 2861 :         CASE_FOR_MSGNUM0( 439 ); // Set track overflow flag

  00c77	66 b9 b7 01	 mov	 cx, 439			; 000001b7H
  00c7b	e8 00 00 00 00	 call	 finish_reading_rec
  00c80	0f b6 c0	 movzx	 eax, al
  00c83	85 c0		 test	 eax, eax
  00c85	74 0a		 je	 SHORT $LN102@main
  00c87	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00c8c	e8 00 00 00 00	 call	 process_TF00439
$LN102@main:
  00c91	e9 6e f8 ff ff	 jmp	 $LN226@main
$LN103@main:

; 2862 :         CASE_FOR_MSGNUM0( 440 ); // Update cyl head record kl dl

  00c96	66 b9 b8 01	 mov	 cx, 440			; 000001b8H
  00c9a	e8 00 00 00 00	 call	 finish_reading_rec
  00c9f	0f b6 c0	 movzx	 eax, al
  00ca2	85 c0		 test	 eax, eax
  00ca4	74 0a		 je	 SHORT $LN104@main
  00ca6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00cab	e8 00 00 00 00	 call	 process_TF00440
$LN104@main:
  00cb0	e9 4f f8 ff ff	 jmp	 $LN227@main
$LN105@main:

; 2863 :         CASE_FOR_MSGNUM0( 441 ); // Update cyl head record dl

  00cb5	66 b9 b9 01	 mov	 cx, 441			; 000001b9H
  00cb9	e8 00 00 00 00	 call	 finish_reading_rec
  00cbe	0f b6 c0	 movzx	 eax, al
  00cc1	85 c0		 test	 eax, eax
  00cc3	74 0a		 je	 SHORT $LN106@main
  00cc5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00cca	e8 00 00 00 00	 call	 process_TF00441
$LN106@main:
  00ccf	e9 30 f8 ff ff	 jmp	 $LN228@main
$LN107@main:

; 2864 :         CASE_FOR_MSGNUM0( 442 ); // Set file mask

  00cd4	66 b9 ba 01	 mov	 cx, 442			; 000001baH
  00cd8	e8 00 00 00 00	 call	 finish_reading_rec
  00cdd	0f b6 c0	 movzx	 eax, al
  00ce0	85 c0		 test	 eax, eax
  00ce2	74 0a		 je	 SHORT $LN108@main
  00ce4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00ce9	e8 00 00 00 00	 call	 process_TF00442
$LN108@main:
  00cee	e9 11 f8 ff ff	 jmp	 $LN229@main
$LN109@main:

; 2865 : 
; 2866 :         CASE_FOR_MSGNUM0( 516 ); // Cache hit

  00cf3	66 b9 04 02	 mov	 cx, 516			; 00000204H
  00cf7	e8 00 00 00 00	 call	 finish_reading_rec
  00cfc	0f b6 c0	 movzx	 eax, al
  00cff	85 c0		 test	 eax, eax
  00d01	74 0a		 je	 SHORT $LN110@main
  00d03	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00d08	e8 00 00 00 00	 call	 process_TF00516
$LN110@main:
  00d0d	e9 f2 f7 ff ff	 jmp	 $LN230@main
$LN111@main:

; 2867 :         CASE_FOR_MSGNUM0( 517 ); // Unavailable cache

  00d12	66 b9 05 02	 mov	 cx, 517			; 00000205H
  00d16	e8 00 00 00 00	 call	 finish_reading_rec
  00d1b	0f b6 c0	 movzx	 eax, al
  00d1e	85 c0		 test	 eax, eax
  00d20	74 0a		 je	 SHORT $LN112@main
  00d22	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00d27	e8 00 00 00 00	 call	 process_TF00517
$LN112@main:
  00d2c	e9 d3 f7 ff ff	 jmp	 $LN231@main
$LN113@main:

; 2868 :         CASE_FOR_MSGNUM0( 518 ); // Cache miss

  00d31	66 b9 06 02	 mov	 cx, 518			; 00000206H
  00d35	e8 00 00 00 00	 call	 finish_reading_rec
  00d3a	0f b6 c0	 movzx	 eax, al
  00d3d	85 c0		 test	 eax, eax
  00d3f	74 0a		 je	 SHORT $LN114@main
  00d41	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00d46	e8 00 00 00 00	 call	 process_TF00518
$LN114@main:
  00d4b	e9 b4 f7 ff ff	 jmp	 $LN232@main
$LN115@main:

; 2869 :         CASE_FOR_MSGNUM0( 519 ); // Offset len

  00d50	66 b9 07 02	 mov	 cx, 519			; 00000207H
  00d54	e8 00 00 00 00	 call	 finish_reading_rec
  00d59	0f b6 c0	 movzx	 eax, al
  00d5c	85 c0		 test	 eax, eax
  00d5e	74 0a		 je	 SHORT $LN116@main
  00d60	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00d65	e8 00 00 00 00	 call	 process_TF00519
$LN116@main:
  00d6a	e9 95 f7 ff ff	 jmp	 $LN233@main
$LN117@main:

; 2870 :         CASE_FOR_MSGNUM0( 520 ); // Positioning

  00d6f	66 b9 08 02	 mov	 cx, 520			; 00000208H
  00d73	e8 00 00 00 00	 call	 finish_reading_rec
  00d78	0f b6 c0	 movzx	 eax, al
  00d7b	85 c0		 test	 eax, eax
  00d7d	74 0a		 je	 SHORT $LN118@main
  00d7f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00d84	e8 00 00 00 00	 call	 process_TF00520
$LN118@main:
  00d89	e9 76 f7 ff ff	 jmp	 $LN234@main
$LN119@main:

; 2871 : 
; 2872 :         CASE_FOR_MSGNUM( 1300 ); // Halt subchannel

  00d8e	66 b9 14 05	 mov	 cx, 1300		; 00000514H
  00d92	e8 00 00 00 00	 call	 finish_reading_rec
  00d97	0f b6 c0	 movzx	 eax, al
  00d9a	85 c0		 test	 eax, eax
  00d9c	74 0a		 je	 SHORT $LN120@main
  00d9e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00da3	e8 00 00 00 00	 call	 process_TF01300
$LN120@main:
  00da8	e9 57 f7 ff ff	 jmp	 $LN235@main
$LN121@main:

; 2873 :         CASE_FOR_MSGNUM( 1301 ); // IDAW/MIDAW

  00dad	66 b9 15 05	 mov	 cx, 1301		; 00000515H
  00db1	e8 00 00 00 00	 call	 finish_reading_rec
  00db6	0f b6 c0	 movzx	 eax, al
  00db9	85 c0		 test	 eax, eax
  00dbb	74 0a		 je	 SHORT $LN122@main
  00dbd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00dc2	e8 00 00 00 00	 call	 process_TF01301
$LN122@main:
  00dc7	e9 38 f7 ff ff	 jmp	 $LN236@main
$LN123@main:

; 2874 :         CASE_FOR_MSGNUM( 1304 ); // Attention signaled

  00dcc	66 b9 18 05	 mov	 cx, 1304		; 00000518H
  00dd0	e8 00 00 00 00	 call	 finish_reading_rec
  00dd5	0f b6 c0	 movzx	 eax, al
  00dd8	85 c0		 test	 eax, eax
  00dda	74 0a		 je	 SHORT $LN124@main
  00ddc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00de1	e8 00 00 00 00	 call	 process_TF01304
$LN124@main:
  00de6	e9 19 f7 ff ff	 jmp	 $LN237@main
$LN125@main:

; 2875 :         CASE_FOR_MSGNUM( 1305 ); // Attention

  00deb	66 b9 19 05	 mov	 cx, 1305		; 00000519H
  00def	e8 00 00 00 00	 call	 finish_reading_rec
  00df4	0f b6 c0	 movzx	 eax, al
  00df7	85 c0		 test	 eax, eax
  00df9	74 0a		 je	 SHORT $LN126@main
  00dfb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00e00	e8 00 00 00 00	 call	 process_TF01305
$LN126@main:
  00e05	e9 fa f6 ff ff	 jmp	 $LN238@main
$LN127@main:

; 2876 :         CASE_FOR_MSGNUM( 1306 ); // Initial status interrupt

  00e0a	66 b9 1a 05	 mov	 cx, 1306		; 0000051aH
  00e0e	e8 00 00 00 00	 call	 finish_reading_rec
  00e13	0f b6 c0	 movzx	 eax, al
  00e16	85 c0		 test	 eax, eax
  00e18	74 0a		 je	 SHORT $LN128@main
  00e1a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00e1f	e8 00 00 00 00	 call	 process_TF01306
$LN128@main:
  00e24	e9 db f6 ff ff	 jmp	 $LN239@main
$LN129@main:

; 2877 :         CASE_FOR_MSGNUM( 1307 ); // Attention completed

  00e29	66 b9 1b 05	 mov	 cx, 1307		; 0000051bH
  00e2d	e8 00 00 00 00	 call	 finish_reading_rec
  00e32	0f b6 c0	 movzx	 eax, al
  00e35	85 c0		 test	 eax, eax
  00e37	74 0a		 je	 SHORT $LN130@main
  00e39	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00e3e	e8 00 00 00 00	 call	 process_TF01307
$LN130@main:
  00e43	e9 bc f6 ff ff	 jmp	 $LN240@main
$LN131@main:

; 2878 :         CASE_FOR_MSGNUM( 1308 ); // Clear completed

  00e48	66 b9 1c 05	 mov	 cx, 1308		; 0000051cH
  00e4c	e8 00 00 00 00	 call	 finish_reading_rec
  00e51	0f b6 c0	 movzx	 eax, al
  00e54	85 c0		 test	 eax, eax
  00e56	74 0a		 je	 SHORT $LN132@main
  00e58	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00e5d	e8 00 00 00 00	 call	 process_TF01308
$LN132@main:
  00e62	e9 9d f6 ff ff	 jmp	 $LN241@main
$LN133@main:

; 2879 :         CASE_FOR_MSGNUM( 1309 ); // Halt completed

  00e67	66 b9 1d 05	 mov	 cx, 1309		; 0000051dH
  00e6b	e8 00 00 00 00	 call	 finish_reading_rec
  00e70	0f b6 c0	 movzx	 eax, al
  00e73	85 c0		 test	 eax, eax
  00e75	74 0a		 je	 SHORT $LN134@main
  00e77	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00e7c	e8 00 00 00 00	 call	 process_TF01309
$LN134@main:
  00e81	e9 7e f6 ff ff	 jmp	 $LN242@main
$LN135@main:

; 2880 :         CASE_FOR_MSGNUM( 1310 ); // Suspended

  00e86	66 b9 1e 05	 mov	 cx, 1310		; 0000051eH
  00e8a	e8 00 00 00 00	 call	 finish_reading_rec
  00e8f	0f b6 c0	 movzx	 eax, al
  00e92	85 c0		 test	 eax, eax
  00e94	74 0a		 je	 SHORT $LN136@main
  00e96	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00e9b	e8 00 00 00 00	 call	 process_TF01310
$LN136@main:
  00ea0	e9 5f f6 ff ff	 jmp	 $LN243@main
$LN137@main:

; 2881 :         CASE_FOR_MSGNUM( 1311 ); // Resumed

  00ea5	66 b9 1f 05	 mov	 cx, 1311		; 0000051fH
  00ea9	e8 00 00 00 00	 call	 finish_reading_rec
  00eae	0f b6 c0	 movzx	 eax, al
  00eb1	85 c0		 test	 eax, eax
  00eb3	74 0a		 je	 SHORT $LN138@main
  00eb5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00eba	e8 00 00 00 00	 call	 process_TF01311
$LN138@main:
  00ebf	e9 40 f6 ff ff	 jmp	 $LN244@main
$LN139@main:

; 2882 :         CASE_FOR_MSGNUM( 1312 ); // I/O stat

  00ec4	66 b9 20 05	 mov	 cx, 1312		; 00000520H
  00ec8	e8 00 00 00 00	 call	 finish_reading_rec
  00ecd	0f b6 c0	 movzx	 eax, al
  00ed0	85 c0		 test	 eax, eax
  00ed2	74 0a		 je	 SHORT $LN140@main
  00ed4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00ed9	e8 00 00 00 00	 call	 process_TF01312
$LN140@main:
  00ede	e9 21 f6 ff ff	 jmp	 $LN245@main
$LN141@main:

; 2883 :         CASE_FOR_MSGNUM( 1313 ); // Sense

  00ee3	66 b9 21 05	 mov	 cx, 1313		; 00000521H
  00ee7	e8 00 00 00 00	 call	 finish_reading_rec
  00eec	0f b6 c0	 movzx	 eax, al
  00eef	85 c0		 test	 eax, eax
  00ef1	74 0a		 je	 SHORT $LN142@main
  00ef3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00ef8	e8 00 00 00 00	 call	 process_TF01313
$LN142@main:
  00efd	e9 02 f6 ff ff	 jmp	 $LN246@main
$LN143@main:

; 2884 :         CASE_FOR_MSGNUM( 1315 ); // CCW

  00f02	66 b9 23 05	 mov	 cx, 1315		; 00000523H
  00f06	e8 00 00 00 00	 call	 finish_reading_rec
  00f0b	0f b6 c0	 movzx	 eax, al
  00f0e	85 c0		 test	 eax, eax
  00f10	74 0a		 je	 SHORT $LN144@main
  00f12	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00f17	e8 00 00 00 00	 call	 process_TF01315
$LN144@main:
  00f1c	e9 e3 f5 ff ff	 jmp	 $LN247@main
$LN145@main:

; 2885 :         CASE_FOR_MSGNUM( 1316 ); // CSW (370)

  00f21	66 b9 24 05	 mov	 cx, 1316		; 00000524H
  00f25	e8 00 00 00 00	 call	 finish_reading_rec
  00f2a	0f b6 c0	 movzx	 eax, al
  00f2d	85 c0		 test	 eax, eax
  00f2f	74 0a		 je	 SHORT $LN146@main
  00f31	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00f36	e8 00 00 00 00	 call	 process_TF01316
$LN146@main:
  00f3b	e9 c4 f5 ff ff	 jmp	 $LN248@main
$LN147@main:

; 2886 :         CASE_FOR_MSGNUM( 1317 ); // SCSW

  00f40	66 b9 25 05	 mov	 cx, 1317		; 00000525H
  00f44	e8 00 00 00 00	 call	 finish_reading_rec
  00f49	0f b6 c0	 movzx	 eax, al
  00f4c	85 c0		 test	 eax, eax
  00f4e	74 0a		 je	 SHORT $LN148@main
  00f50	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00f55	e8 00 00 00 00	 call	 process_TF01317
$LN148@main:
  00f5a	e9 a5 f5 ff ff	 jmp	 $LN249@main
$LN149@main:

; 2887 :         CASE_FOR_MSGNUM( 1318 ); // TEST I/O

  00f5f	66 b9 26 05	 mov	 cx, 1318		; 00000526H
  00f63	e8 00 00 00 00	 call	 finish_reading_rec
  00f68	0f b6 c0	 movzx	 eax, al
  00f6b	85 c0		 test	 eax, eax
  00f6d	74 0a		 je	 SHORT $LN150@main
  00f6f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00f74	e8 00 00 00 00	 call	 process_TF01318
$LN150@main:
  00f79	e9 86 f5 ff ff	 jmp	 $LN250@main
$LN151@main:

; 2888 :         CASE_FOR_MSGNUM( 1320 ); // S/370 SIO conversion started

  00f7e	66 b9 28 05	 mov	 cx, 1320		; 00000528H
  00f82	e8 00 00 00 00	 call	 finish_reading_rec
  00f87	0f b6 c0	 movzx	 eax, al
  00f8a	85 c0		 test	 eax, eax
  00f8c	74 0a		 je	 SHORT $LN152@main
  00f8e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00f93	e8 00 00 00 00	 call	 process_TF01320
$LN152@main:
  00f98	e9 67 f5 ff ff	 jmp	 $LN251@main
$LN153@main:

; 2889 :         CASE_FOR_MSGNUM( 1321 ); // S/370 SIO conversion success

  00f9d	66 b9 29 05	 mov	 cx, 1321		; 00000529H
  00fa1	e8 00 00 00 00	 call	 finish_reading_rec
  00fa6	0f b6 c0	 movzx	 eax, al
  00fa9	85 c0		 test	 eax, eax
  00fab	74 0a		 je	 SHORT $LN154@main
  00fad	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00fb2	e8 00 00 00 00	 call	 process_TF01321
$LN154@main:
  00fb7	e9 48 f5 ff ff	 jmp	 $LN252@main
$LN155@main:

; 2890 :         CASE_FOR_MSGNUM( 1329 ); // Halt I/O

  00fbc	66 b9 31 05	 mov	 cx, 1329		; 00000531H
  00fc0	e8 00 00 00 00	 call	 finish_reading_rec
  00fc5	0f b6 c0	 movzx	 eax, al
  00fc8	85 c0		 test	 eax, eax
  00fca	74 0a		 je	 SHORT $LN156@main
  00fcc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00fd1	e8 00 00 00 00	 call	 process_TF01329
$LN156@main:
  00fd6	e9 29 f5 ff ff	 jmp	 $LN253@main
$LN157@main:

; 2891 :         CASE_FOR_MSGNUM( 1330 ); // HIO modification

  00fdb	66 b9 32 05	 mov	 cx, 1330		; 00000532H
  00fdf	e8 00 00 00 00	 call	 finish_reading_rec
  00fe4	0f b6 c0	 movzx	 eax, al
  00fe7	85 c0		 test	 eax, eax
  00fe9	74 0a		 je	 SHORT $LN158@main
  00feb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  00ff0	e8 00 00 00 00	 call	 process_TF01330
$LN158@main:
  00ff5	e9 0a f5 ff ff	 jmp	 $LN254@main
$LN159@main:

; 2892 :         CASE_FOR_MSGNUM( 1331 ); // Clear subchannel

  00ffa	66 b9 33 05	 mov	 cx, 1331		; 00000533H
  00ffe	e8 00 00 00 00	 call	 finish_reading_rec
  01003	0f b6 c0	 movzx	 eax, al
  01006	85 c0		 test	 eax, eax
  01008	74 0a		 je	 SHORT $LN160@main
  0100a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  0100f	e8 00 00 00 00	 call	 process_TF01331
$LN160@main:
  01014	e9 eb f4 ff ff	 jmp	 $LN255@main
$LN161@main:

; 2893 :         CASE_FOR_MSGNUM( 1332 ); // Halt subchannel

  01019	66 b9 34 05	 mov	 cx, 1332		; 00000534H
  0101d	e8 00 00 00 00	 call	 finish_reading_rec
  01022	0f b6 c0	 movzx	 eax, al
  01025	85 c0		 test	 eax, eax
  01027	74 0a		 je	 SHORT $LN162@main
  01029	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  0102e	e8 00 00 00 00	 call	 process_TF01332
$LN162@main:
  01033	e9 cc f4 ff ff	 jmp	 $LN256@main
$LN163@main:

; 2894 :         CASE_FOR_MSGNUM( 1333 ); // Resume subchannel

  01038	66 b9 35 05	 mov	 cx, 1333		; 00000535H
  0103c	e8 00 00 00 00	 call	 finish_reading_rec
  01041	0f b6 c0	 movzx	 eax, al
  01044	85 c0		 test	 eax, eax
  01046	74 0a		 je	 SHORT $LN164@main
  01048	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  0104d	e8 00 00 00 00	 call	 process_TF01333
$LN164@main:
  01052	e9 ad f4 ff ff	 jmp	 $LN257@main
$LN165@main:

; 2895 :         CASE_FOR_MSGNUM( 1334 ); // ORB

  01057	66 b9 36 05	 mov	 cx, 1334		; 00000536H
  0105b	e8 00 00 00 00	 call	 finish_reading_rec
  01060	0f b6 c0	 movzx	 eax, al
  01063	85 c0		 test	 eax, eax
  01065	74 0a		 je	 SHORT $LN166@main
  01067	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  0106c	e8 00 00 00 00	 call	 process_TF01334
$LN166@main:
  01071	e9 8e f4 ff ff	 jmp	 $LN258@main
$LN167@main:

; 2896 :         CASE_FOR_MSGNUM( 1336 ); // Startio cc=2

  01076	66 b9 38 05	 mov	 cx, 1336		; 00000538H
  0107a	e8 00 00 00 00	 call	 finish_reading_rec
  0107f	0f b6 c0	 movzx	 eax, al
  01082	85 c0		 test	 eax, eax
  01084	74 0a		 je	 SHORT $LN168@main
  01086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hdr$[rsp]
  0108b	e8 00 00 00 00	 call	 process_TF01336
$LN168@main:
  01090	e9 6f f4 ff ff	 jmp	 $LN259@main
$LN169@main:

; 2897 : 
; 2898 :         default:
; 2899 : 
; 2900 :             // "Unsupported Trace File record: msgnum %"PRIu16
; 2901 :             FWRMSG( stderr, HHC03214, "W", hdr->msgnum );

  01095	48 8b 44 24 50	 mov	 rax, QWORD PTR hdr$[rsp]
  0109a	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0109e	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv702[rsp], eax
  010a5	b9 02 00 00 00	 mov	 ecx, 2
  010aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  010b0	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv702[rsp]
  010b7	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  010bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161398
  010c2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  010c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161399
  010ce	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  010d3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  010d8	41 b9 03 00 00
	00		 mov	 r9d, 3
  010de	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161400
  010e5	ba 55 0b 00 00	 mov	 edx, 2901		; 00000b55H
  010ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161401
  010f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2902 : 
; 2903 :         } /* end switch */
; 2904 :     } /* end while */

  010f7	e9 08 f4 ff ff	 jmp	 $LN260@main
$LN3@main:

; 2905 : 
; 2906 :     /* Show 100% of file processed */
; 2907 :     show_file_progress();

  010fc	e8 00 00 00 00	 call	 show_file_progress

; 2908 : 
; 2909 :     /* Print totals */
; 2910 :     {
; 2911 :         char inscnt[ 32] = {0};

  01101	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR inscnt$1[rsp]
  01109	48 8b f8	 mov	 rdi, rax
  0110c	33 c0		 xor	 eax, eax
  0110e	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  01113	f3 aa		 rep stosb

; 2912 :         char tiocnt[ 32] = {0};

  01115	48 8d 84 24 c8
	00 00 00	 lea	 rax, QWORD PTR tiocnt$2[rsp]
  0111d	48 8b f8	 mov	 rdi, rax
  01120	33 c0		 xor	 eax, eax
  01122	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  01127	f3 aa		 rep stosb

; 2913 : 
; 2914 :         fmt_S64( inscnt, (S64) totins );

  01129	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR totins
  01130	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR inscnt$1[rsp]
  01138	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmt_S64

; 2915 :         fmt_S64( tiocnt, (S64) totios );

  0113e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR totios
  01145	48 8d 8c 24 c8
	00 00 00	 lea	 rcx, QWORD PTR tiocnt$2[rsp]
  0114d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmt_S64

; 2916 : 
; 2917 :         printf( "\n" );

  01153	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161402
  0115a	e8 00 00 00 00	 call	 printf

; 2918 : 
; 2919 :         // "%s %s printed"
; 2920 :         FWRMSG( stdout, HHC03215, "I", inscnt, "instructions" );

  0115f	b9 01 00 00 00	 mov	 ecx, 1
  01164	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0116a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161403
  01171	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  01176	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR inscnt$1[rsp]
  0117e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01183	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161404
  0118a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0118f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161405
  01196	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0119b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  011a0	41 b9 03 00 00
	00		 mov	 r9d, 3
  011a6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161406
  011ad	ba 68 0b 00 00	 mov	 edx, 2920		; 00000b68H
  011b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161407
  011b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2921 :         FWRMSG( stdout, HHC03215, "I", tiocnt, "device I/O's" );

  011bf	b9 01 00 00 00	 mov	 ecx, 1
  011c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  011ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161408
  011d1	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  011d6	48 8d 8c 24 c8
	00 00 00	 lea	 rcx, QWORD PTR tiocnt$2[rsp]
  011de	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  011e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161409
  011ea	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  011ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161410
  011f6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  011fb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01200	41 b9 03 00 00
	00		 mov	 r9d, 3
  01206	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161411
  0120d	ba 69 0b 00 00	 mov	 edx, 2921		; 00000b69H
  01212	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161412
  01219	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$done$269:

; 2922 :     }
; 2923 : 
; 2924 : done:
; 2925 : 
; 2926 :     /* Close file and exit */
; 2927 :     fclose( inf );

  0121f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR inf
  01226	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fclose

; 2928 :     return info_only ? 0 : ((totins > 0 || totios > 0) ? 0 : 1);

  0122c	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR info_only
  01233	85 c0		 test	 eax, eax
  01235	74 0d		 je	 SHORT $LN186@main
  01237	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv768[rsp], 0
  01242	eb 3a		 jmp	 SHORT $LN187@main
$LN186@main:
  01244	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR totins, 0
  0124c	77 17		 ja	 SHORT $LN184@main
  0124e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR totios, 0
  01256	77 0d		 ja	 SHORT $LN184@main
  01258	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv766[rsp], 1
  01263	eb 0b		 jmp	 SHORT $LN185@main
$LN184@main:
  01265	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv766[rsp], 0
$LN185@main:
  01270	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR tv766[rsp]
  01277	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv768[rsp], eax
$LN187@main:
  0127e	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv768[rsp]
$LN170@main:

; 2929 : 
; 2930 : } /* end function main */

  01285	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0128d	48 33 cc	 xor	 rcx, rsp
  01290	e8 00 00 00 00	 call	 __security_check_cookie
  01295	48 81 c4 f0 00
	00 00		 add	 rsp, 240		; 000000f0H
  0129c	5f		 pop	 rdi
  0129d	c3		 ret	 0
  0129e	66 90		 npad	 2
$LN267@main:
  012a0	00 00 00 00	 DD	 $LN69@main
  012a4	00 00 00 00	 DD	 $LN71@main
  012a8	00 00 00 00	 DD	 $LN73@main
  012ac	00 00 00 00	 DD	 $LN75@main
  012b0	00 00 00 00	 DD	 $LN77@main
  012b4	00 00 00 00	 DD	 $LN79@main
  012b8	00 00 00 00	 DD	 $LN81@main
  012bc	00 00 00 00	 DD	 $LN83@main
  012c0	00 00 00 00	 DD	 $LN85@main
  012c4	00 00 00 00	 DD	 $LN87@main
  012c8	00 00 00 00	 DD	 $LN89@main
  012cc	00 00 00 00	 DD	 $LN91@main
  012d0	00 00 00 00	 DD	 $LN93@main
  012d4	00 00 00 00	 DD	 $LN95@main
  012d8	00 00 00 00	 DD	 $LN97@main
  012dc	00 00 00 00	 DD	 $LN99@main
  012e0	00 00 00 00	 DD	 $LN101@main
  012e4	00 00 00 00	 DD	 $LN103@main
  012e8	00 00 00 00	 DD	 $LN105@main
  012ec	00 00 00 00	 DD	 $LN107@main
  012f0	00 00 00 00	 DD	 $LN109@main
  012f4	00 00 00 00	 DD	 $LN111@main
  012f8	00 00 00 00	 DD	 $LN113@main
  012fc	00 00 00 00	 DD	 $LN115@main
  01300	00 00 00 00	 DD	 $LN117@main
  01304	00 00 00 00	 DD	 $LN169@main
$LN266@main:
  01308	00		 DB	 0
  01309	01		 DB	 1
  0130a	02		 DB	 2
  0130b	03		 DB	 3
  0130c	04		 DB	 4
  0130d	05		 DB	 5
  0130e	06		 DB	 6
  0130f	07		 DB	 7
  01310	08		 DB	 8
  01311	09		 DB	 9
  01312	0a		 DB	 10
  01313	0b		 DB	 11
  01314	0c		 DB	 12
  01315	0d		 DB	 13
  01316	0e		 DB	 14
  01317	0f		 DB	 15
  01318	10		 DB	 16
  01319	11		 DB	 17
  0131a	12		 DB	 18
  0131b	13		 DB	 19
  0131c	19		 DB	 25
  0131d	19		 DB	 25
  0131e	19		 DB	 25
  0131f	19		 DB	 25
  01320	19		 DB	 25
  01321	19		 DB	 25
  01322	19		 DB	 25
  01323	19		 DB	 25
  01324	19		 DB	 25
  01325	19		 DB	 25
  01326	19		 DB	 25
  01327	19		 DB	 25
  01328	19		 DB	 25
  01329	19		 DB	 25
  0132a	19		 DB	 25
  0132b	19		 DB	 25
  0132c	19		 DB	 25
  0132d	19		 DB	 25
  0132e	19		 DB	 25
  0132f	19		 DB	 25
  01330	19		 DB	 25
  01331	19		 DB	 25
  01332	19		 DB	 25
  01333	19		 DB	 25
  01334	19		 DB	 25
  01335	19		 DB	 25
  01336	19		 DB	 25
  01337	19		 DB	 25
  01338	19		 DB	 25
  01339	19		 DB	 25
  0133a	19		 DB	 25
  0133b	19		 DB	 25
  0133c	19		 DB	 25
  0133d	19		 DB	 25
  0133e	19		 DB	 25
  0133f	19		 DB	 25
  01340	19		 DB	 25
  01341	19		 DB	 25
  01342	19		 DB	 25
  01343	19		 DB	 25
  01344	19		 DB	 25
  01345	19		 DB	 25
  01346	19		 DB	 25
  01347	19		 DB	 25
  01348	19		 DB	 25
  01349	19		 DB	 25
  0134a	19		 DB	 25
  0134b	19		 DB	 25
  0134c	19		 DB	 25
  0134d	19		 DB	 25
  0134e	19		 DB	 25
  0134f	19		 DB	 25
  01350	19		 DB	 25
  01351	19		 DB	 25
  01352	19		 DB	 25
  01353	19		 DB	 25
  01354	19		 DB	 25
  01355	19		 DB	 25
  01356	19		 DB	 25
  01357	19		 DB	 25
  01358	19		 DB	 25
  01359	19		 DB	 25
  0135a	19		 DB	 25
  0135b	19		 DB	 25
  0135c	19		 DB	 25
  0135d	19		 DB	 25
  0135e	19		 DB	 25
  0135f	19		 DB	 25
  01360	19		 DB	 25
  01361	19		 DB	 25
  01362	19		 DB	 25
  01363	19		 DB	 25
  01364	19		 DB	 25
  01365	14		 DB	 20
  01366	15		 DB	 21
  01367	16		 DB	 22
  01368	17		 DB	 23
  01369	18		 DB	 24
  0136a	66 90		 npad	 2
$LN265@main:
  0136c	00 00 00 00	 DD	 $LN25@main
  01370	00 00 00 00	 DD	 $LN27@main
  01374	00 00 00 00	 DD	 $LN29@main
  01378	00 00 00 00	 DD	 $LN31@main
  0137c	00 00 00 00	 DD	 $LN33@main
  01380	00 00 00 00	 DD	 $LN35@main
  01384	00 00 00 00	 DD	 $LN37@main
  01388	00 00 00 00	 DD	 $LN39@main
  0138c	00 00 00 00	 DD	 $LN41@main
  01390	00 00 00 00	 DD	 $LN43@main
  01394	00 00 00 00	 DD	 $LN45@main
  01398	00 00 00 00	 DD	 $LN47@main
  0139c	00 00 00 00	 DD	 $LN49@main
  013a0	00 00 00 00	 DD	 $LN51@main
  013a4	00 00 00 00	 DD	 $LN53@main
  013a8	00 00 00 00	 DD	 $LN169@main
$LN264@main:
  013ac	00		 DB	 0
  013ad	01		 DB	 1
  013ae	02		 DB	 2
  013af	03		 DB	 3
  013b0	0f		 DB	 15
  013b1	04		 DB	 4
  013b2	05		 DB	 5
  013b3	06		 DB	 6
  013b4	07		 DB	 7
  013b5	0f		 DB	 15
  013b6	08		 DB	 8
  013b7	09		 DB	 9
  013b8	0f		 DB	 15
  013b9	0a		 DB	 10
  013ba	0f		 DB	 15
  013bb	0f		 DB	 15
  013bc	0f		 DB	 15
  013bd	0f		 DB	 15
  013be	0f		 DB	 15
  013bf	0f		 DB	 15
  013c0	0f		 DB	 15
  013c1	0f		 DB	 15
  013c2	0f		 DB	 15
  013c3	0f		 DB	 15
  013c4	0f		 DB	 15
  013c5	0f		 DB	 15
  013c6	0f		 DB	 15
  013c7	0f		 DB	 15
  013c8	0f		 DB	 15
  013c9	0f		 DB	 15
  013ca	0f		 DB	 15
  013cb	0f		 DB	 15
  013cc	0f		 DB	 15
  013cd	0f		 DB	 15
  013ce	0f		 DB	 15
  013cf	0f		 DB	 15
  013d0	0f		 DB	 15
  013d1	0f		 DB	 15
  013d2	0f		 DB	 15
  013d3	0b		 DB	 11
  013d4	0f		 DB	 15
  013d5	0f		 DB	 15
  013d6	0f		 DB	 15
  013d7	0c		 DB	 12
  013d8	0d		 DB	 13
  013d9	0e		 DB	 14
  013da	66 90		 npad	 2
$LN263@main:
  013dc	00 00 00 00	 DD	 $LN121@main
  013e0	00 00 00 00	 DD	 $LN169@main
  013e4	00 00 00 00	 DD	 $LN169@main
  013e8	00 00 00 00	 DD	 $LN123@main
  013ec	00 00 00 00	 DD	 $LN125@main
  013f0	00 00 00 00	 DD	 $LN127@main
  013f4	00 00 00 00	 DD	 $LN129@main
  013f8	00 00 00 00	 DD	 $LN131@main
  013fc	00 00 00 00	 DD	 $LN133@main
  01400	00 00 00 00	 DD	 $LN135@main
  01404	00 00 00 00	 DD	 $LN137@main
  01408	00 00 00 00	 DD	 $LN139@main
  0140c	00 00 00 00	 DD	 $LN141@main
  01410	00 00 00 00	 DD	 $LN169@main
  01414	00 00 00 00	 DD	 $LN143@main
  01418	00 00 00 00	 DD	 $LN145@main
  0141c	00 00 00 00	 DD	 $LN147@main
  01420	00 00 00 00	 DD	 $LN149@main
  01424	00 00 00 00	 DD	 $LN169@main
  01428	00 00 00 00	 DD	 $LN151@main
  0142c	00 00 00 00	 DD	 $LN153@main
  01430	00 00 00 00	 DD	 $LN169@main
  01434	00 00 00 00	 DD	 $LN169@main
  01438	00 00 00 00	 DD	 $LN169@main
  0143c	00 00 00 00	 DD	 $LN169@main
  01440	00 00 00 00	 DD	 $LN169@main
  01444	00 00 00 00	 DD	 $LN169@main
  01448	00 00 00 00	 DD	 $LN169@main
  0144c	00 00 00 00	 DD	 $LN155@main
  01450	00 00 00 00	 DD	 $LN157@main
  01454	00 00 00 00	 DD	 $LN159@main
  01458	00 00 00 00	 DD	 $LN161@main
  0145c	00 00 00 00	 DD	 $LN163@main
  01460	00 00 00 00	 DD	 $LN165@main
  01464	00 00 00 00	 DD	 $LN169@main
  01468	00 00 00 00	 DD	 $LN167@main
$LN262@main:
  0146c	00 00 00 00	 DD	 $LN57@main
  01470	00 00 00 00	 DD	 $LN59@main
  01474	00 00 00 00	 DD	 $LN61@main
  01478	00 00 00 00	 DD	 $LN63@main
  0147c	00 00 00 00	 DD	 $LN65@main
  01480	00 00 00 00	 DD	 $LN67@main
  01484	00 00 00 00	 DD	 $LN169@main
$LN261@main:
  01488	00		 DB	 0
  01489	01		 DB	 1
  0148a	02		 DB	 2
  0148b	06		 DB	 6
  0148c	06		 DB	 6
  0148d	06		 DB	 6
  0148e	03		 DB	 3
  0148f	06		 DB	 6
  01490	06		 DB	 6
  01491	06		 DB	 6
  01492	06		 DB	 6
  01493	06		 DB	 6
  01494	06		 DB	 6
  01495	06		 DB	 6
  01496	06		 DB	 6
  01497	06		 DB	 6
  01498	06		 DB	 6
  01499	06		 DB	 6
  0149a	06		 DB	 6
  0149b	06		 DB	 6
  0149c	06		 DB	 6
  0149d	06		 DB	 6
  0149e	06		 DB	 6
  0149f	06		 DB	 6
  014a0	06		 DB	 6
  014a1	06		 DB	 6
  014a2	06		 DB	 6
  014a3	06		 DB	 6
  014a4	06		 DB	 6
  014a5	06		 DB	 6
  014a6	06		 DB	 6
  014a7	06		 DB	 6
  014a8	06		 DB	 6
  014a9	06		 DB	 6
  014aa	06		 DB	 6
  014ab	06		 DB	 6
  014ac	06		 DB	 6
  014ad	06		 DB	 6
  014ae	06		 DB	 6
  014af	06		 DB	 6
  014b0	06		 DB	 6
  014b1	06		 DB	 6
  014b2	06		 DB	 6
  014b3	06		 DB	 6
  014b4	06		 DB	 6
  014b5	06		 DB	 6
  014b6	06		 DB	 6
  014b7	06		 DB	 6
  014b8	06		 DB	 6
  014b9	06		 DB	 6
  014ba	06		 DB	 6
  014bb	06		 DB	 6
  014bc	06		 DB	 6
  014bd	06		 DB	 6
  014be	04		 DB	 4
  014bf	06		 DB	 6
  014c0	05		 DB	 5
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv73 = 64
c$ = 68
tz_offset$1 = 72
tv75 = 80
tv90 = 88
tv143 = 96
tv164 = 104
tv185 = 112
tv206 = 120
tv227 = 128
tv248 = 136
tv301 = 144
tv322 = 152
tv343 = 160
tv364 = 168
tv385 = 176
tv414 = 184
tv422 = 192
argc$ = 224
argv$ = 232
process_args PROC

; 3110 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 3111 :     int  c = 0;

  00010	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR c$[rsp], 0

; 3112 : 
; 3113 :     /* First, show them exactly WHAT we'll be parsing... */
; 3114 :     print_args( argc, argv );

  00018	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00020	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  00027	e8 00 00 00 00	 call	 print_args

; 3115 : 
; 3116 :     // We'll print our own error messages thank you very much! */
; 3117 :     opterr = 0;

  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_opterr
  00033	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN2@process_ar:

; 3118 : 
; 3119 :     /* Parse the command-line... */
; 3120 :     for (; EOF != c;)

  00039	83 7c 24 44 ff	 cmp	 DWORD PTR c$[rsp], -1
  0003e	0f 84 a3 09 00
	00		 je	 $LN3@process_ar

; 3121 :     {
; 3122 :         switch (c = GET_OPTION())

  00044	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0004d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:longopts
  00054	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:shortopts
  0005b	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00063	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  0006a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getopt_long
  00070	89 44 24 44	 mov	 DWORD PTR c$[rsp], eax
  00074	8b 44 24 44	 mov	 eax, DWORD PTR c$[rsp]
  00078	89 44 24 40	 mov	 DWORD PTR tv73[rsp], eax
  0007c	8b 44 24 40	 mov	 eax, DWORD PTR tv73[rsp]
  00080	ff c0		 inc	 eax
  00082	89 44 24 40	 mov	 DWORD PTR tv73[rsp], eax
  00086	83 7c 24 40 76	 cmp	 DWORD PTR tv73[rsp], 118 ; 00000076H
  0008b	0f 87 ac 00 00
	00		 ja	 $LN12@process_ar
  00091	48 63 44 24 40	 movsxd	 rax, DWORD PTR tv73[rsp]
  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0009d	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN46@process_ar[rcx+rax]
  000a5	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN47@process_ar[rcx+rax*4]
  000ac	48 03 c1	 add	 rax, rcx
  000af	ff e0		 jmp	 rax
$LN9@process_ar:

; 3123 :         {
; 3124 :             case 0:     // getopt_long() set a variable for us;
; 3125 :                 break;  // do nothing and continue...

  000b1	e9 2c 09 00 00	 jmp	 $LN5@process_ar
$LN10@process_ar:

; 3126 : 
; 3127 :             case EOF:   // No more options! (i.e. we're done)
; 3128 :                 break;

  000b6	e9 27 09 00 00	 jmp	 $LN5@process_ar
$LN11@process_ar:

; 3129 : 
; 3130 :             case '?':   // Invalid/unsupported option
; 3131 :             {
; 3132 :                 // "Invalid/unsupported option: %s"
; 3133 :                 FWRMSG( stderr, HHC03219, "E", MISSING_OPTNAME );

  000bb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  000c2	8b 00		 mov	 eax, DWORD PTR [rax]
  000c4	ff c8		 dec	 eax
  000c6	48 98		 cdqe
  000c8	48 89 44 24 50	 mov	 QWORD PTR tv75[rsp], rax
  000cd	b9 02 00 00 00	 mov	 ecx, 2
  000d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000d8	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000e0	48 8b 54 24 50	 mov	 rdx, QWORD PTR tv75[rsp]
  000e5	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  000e9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161533
  000f5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161534
  00101	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00106	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0010b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00111	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161535
  00118	ba 3d 0c 00 00	 mov	 edx, 3133		; 00000c3dH
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161536
  00124	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3134 :                 arg_errs++;

  0012a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  00130	ff c0		 inc	 eax
  00132	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax

; 3135 :                 break;

  00138	e9 a5 08 00 00	 jmp	 $LN5@process_ar
$LN12@process_ar:

; 3136 :             }
; 3137 : 
; 3138 :             default:    // Missing option argument
; 3139 : 
; 3140 :                 // "Missing argument for option %s"
; 3141 :                 FWRMSG( stderr, HHC03204, "E", MISSING_OPTNAME );

  0013d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00144	8b 00		 mov	 eax, DWORD PTR [rax]
  00146	ff c8		 dec	 eax
  00148	48 98		 cdqe
  0014a	48 89 44 24 58	 mov	 QWORD PTR tv90[rsp], rax
  0014f	b9 02 00 00 00	 mov	 ecx, 2
  00154	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0015a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00162	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv90[rsp]
  00167	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  0016b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00170	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161538
  00177	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0017c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161539
  00183	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00188	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0018d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00193	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161540
  0019a	ba 45 0c 00 00	 mov	 edx, 3141		; 00000c45H
  0019f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161541
  001a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3142 :                 arg_errs++;

  001ac	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  001b2	ff c0		 inc	 eax
  001b4	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax

; 3143 :                 break;

  001ba	e9 23 08 00 00	 jmp	 $LN5@process_ar
$LN13@process_ar:

; 3144 : 
; 3145 :             case 'i': PARSE_OPTION_NOARG_CASE( info );

  001bf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  001c6	8b 00		 mov	 eax, DWORD PTR [rax]
  001c8	83 e8 02	 sub	 eax, 2
  001cb	48 98		 cdqe
  001cd	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001d5	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  001d9	e8 00 00 00 00	 call	 parse_option_info
  001de	e9 ff 07 00 00	 jmp	 $LN5@process_ar
$LN14@process_ar:

; 3146 : 
; 3147 :             case 'c': PARSE_OPTION_CASE( cpu      );

  001e3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  001ea	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  001ee	0f 85 82 00 00
	00		 jne	 $LN15@process_ar
  001f4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  001fb	8b 00		 mov	 eax, DWORD PTR [rax]
  001fd	ff c8		 dec	 eax
  001ff	48 98		 cdqe
  00201	48 89 44 24 60	 mov	 QWORD PTR tv143[rsp], rax
  00206	b9 02 00 00 00	 mov	 ecx, 2
  0020b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00211	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00219	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv143[rsp]
  0021e	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00222	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00227	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161545
  0022e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00233	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161546
  0023a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0023f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00244	41 b9 03 00 00
	00		 mov	 r9d, 3
  0024a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161547
  00251	ba 4b 0c 00 00	 mov	 edx, 3147		; 00000c4bH
  00256	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161548
  0025d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00263	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  00269	ff c0		 inc	 eax
  0026b	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax
  00271	e9 6c 07 00 00	 jmp	 $LN5@process_ar
$LN15@process_ar:
  00276	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  0027d	8b 00		 mov	 eax, DWORD PTR [rax]
  0027f	83 e8 02	 sub	 eax, 2
  00282	48 98		 cdqe
  00284	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0028c	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00290	e8 00 00 00 00	 call	 parse_option_cpu
  00295	e9 48 07 00 00	 jmp	 $LN5@process_ar
$LN16@process_ar:

; 3148 :             case 'r': PARSE_OPTION_CASE( traceopt );

  0029a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  002a1	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  002a5	0f 85 82 00 00
	00		 jne	 $LN17@process_ar
  002ab	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  002b2	8b 00		 mov	 eax, DWORD PTR [rax]
  002b4	ff c8		 dec	 eax
  002b6	48 98		 cdqe
  002b8	48 89 44 24 68	 mov	 QWORD PTR tv164[rsp], rax
  002bd	b9 02 00 00 00	 mov	 ecx, 2
  002c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002c8	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002d0	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv164[rsp]
  002d5	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  002d9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161551
  002e5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161552
  002f1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002f6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002fb	41 b9 03 00 00
	00		 mov	 r9d, 3
  00301	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161553
  00308	ba 4c 0c 00 00	 mov	 edx, 3148		; 00000c4cH
  0030d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161554
  00314	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0031a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  00320	ff c0		 inc	 eax
  00322	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax
  00328	e9 b5 06 00 00	 jmp	 $LN5@process_ar
$LN17@process_ar:
  0032d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00334	8b 00		 mov	 eax, DWORD PTR [rax]
  00336	83 e8 02	 sub	 eax, 2
  00339	48 98		 cdqe
  0033b	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00343	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00347	e8 00 00 00 00	 call	 parse_option_traceopt
  0034c	e9 91 06 00 00	 jmp	 $LN5@process_ar
$LN18@process_ar:

; 3149 :             case 'n': PARSE_OPTION_CASE( count    );

  00351	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  00358	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0035c	0f 85 82 00 00
	00		 jne	 $LN19@process_ar
  00362	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00369	8b 00		 mov	 eax, DWORD PTR [rax]
  0036b	ff c8		 dec	 eax
  0036d	48 98		 cdqe
  0036f	48 89 44 24 70	 mov	 QWORD PTR tv185[rsp], rax
  00374	b9 02 00 00 00	 mov	 ecx, 2
  00379	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0037f	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00387	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv185[rsp]
  0038c	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00390	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00395	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161557
  0039c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161558
  003a8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003ad	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003b2	41 b9 03 00 00
	00		 mov	 r9d, 3
  003b8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161559
  003bf	ba 4d 0c 00 00	 mov	 edx, 3149		; 00000c4dH
  003c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161560
  003cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  003d1	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  003d7	ff c0		 inc	 eax
  003d9	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax
  003df	e9 fe 05 00 00	 jmp	 $LN5@process_ar
$LN19@process_ar:
  003e4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  003eb	8b 00		 mov	 eax, DWORD PTR [rax]
  003ed	83 e8 02	 sub	 eax, 2
  003f0	48 98		 cdqe
  003f2	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003fa	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  003fe	e8 00 00 00 00	 call	 parse_option_count
  00403	e9 da 05 00 00	 jmp	 $LN5@process_ar
$LN20@process_ar:

; 3150 :             case 'e': PARSE_OPTION_CASE( msg      );

  00408	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  0040f	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00413	0f 85 82 00 00
	00		 jne	 $LN21@process_ar
  00419	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00420	8b 00		 mov	 eax, DWORD PTR [rax]
  00422	ff c8		 dec	 eax
  00424	48 98		 cdqe
  00426	48 89 44 24 78	 mov	 QWORD PTR tv206[rsp], rax
  0042b	b9 02 00 00 00	 mov	 ecx, 2
  00430	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00436	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0043e	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv206[rsp]
  00443	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00447	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0044c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161563
  00453	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00458	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161564
  0045f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00464	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00469	41 b9 03 00 00
	00		 mov	 r9d, 3
  0046f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161565
  00476	ba 4e 0c 00 00	 mov	 edx, 3150		; 00000c4eH
  0047b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161566
  00482	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00488	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  0048e	ff c0		 inc	 eax
  00490	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax
  00496	e9 47 05 00 00	 jmp	 $LN5@process_ar
$LN21@process_ar:
  0049b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  004a2	8b 00		 mov	 eax, DWORD PTR [rax]
  004a4	83 e8 02	 sub	 eax, 2
  004a7	48 98		 cdqe
  004a9	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004b1	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  004b5	e8 00 00 00 00	 call	 parse_option_msg
  004ba	e9 23 05 00 00	 jmp	 $LN5@process_ar
$LN22@process_ar:

; 3151 :             case 's': PARSE_OPTION_CASE( storage  );

  004bf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  004c6	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  004ca	0f 85 88 00 00
	00		 jne	 $LN23@process_ar
  004d0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  004d7	8b 00		 mov	 eax, DWORD PTR [rax]
  004d9	ff c8		 dec	 eax
  004db	48 98		 cdqe
  004dd	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv227[rsp], rax
  004e5	b9 02 00 00 00	 mov	 ecx, 2
  004ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004f0	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004f8	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv227[rsp]
  00500	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00504	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00509	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161569
  00510	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00515	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161570
  0051c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00521	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00526	41 b9 03 00 00
	00		 mov	 r9d, 3
  0052c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161571
  00533	ba 4f 0c 00 00	 mov	 edx, 3151		; 00000c4fH
  00538	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161572
  0053f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00545	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  0054b	ff c0		 inc	 eax
  0054d	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax
  00553	e9 8a 04 00 00	 jmp	 $LN5@process_ar
$LN23@process_ar:
  00558	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  0055f	8b 00		 mov	 eax, DWORD PTR [rax]
  00561	83 e8 02	 sub	 eax, 2
  00564	48 98		 cdqe
  00566	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0056e	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00572	e8 00 00 00 00	 call	 parse_option_storage
  00577	e9 66 04 00 00	 jmp	 $LN5@process_ar
$LN24@process_ar:

; 3152 :             case 'd': PARSE_OPTION_CASE( date     );

  0057c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  00583	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00587	0f 85 88 00 00
	00		 jne	 $LN25@process_ar
  0058d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00594	8b 00		 mov	 eax, DWORD PTR [rax]
  00596	ff c8		 dec	 eax
  00598	48 98		 cdqe
  0059a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv248[rsp], rax
  005a2	b9 02 00 00 00	 mov	 ecx, 2
  005a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005ad	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  005b5	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv248[rsp]
  005bd	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  005c1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161575
  005cd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161576
  005d9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005de	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005e3	41 b9 03 00 00
	00		 mov	 r9d, 3
  005e9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161577
  005f0	ba 50 0c 00 00	 mov	 edx, 3152		; 00000c50H
  005f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161578
  005fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00602	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  00608	ff c0		 inc	 eax
  0060a	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax
  00610	e9 cd 03 00 00	 jmp	 $LN5@process_ar
$LN25@process_ar:
  00615	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  0061c	8b 00		 mov	 eax, DWORD PTR [rax]
  0061e	83 e8 02	 sub	 eax, 2
  00621	48 98		 cdqe
  00623	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0062b	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0062f	e8 00 00 00 00	 call	 parse_option_date
  00634	e9 a9 03 00 00	 jmp	 $LN5@process_ar
$LN26@process_ar:

; 3153 :             case 't': PARSE_OPTION_CASE( time     );

  00639	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  00640	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00644	0f 85 88 00 00
	00		 jne	 $LN27@process_ar
  0064a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00651	8b 00		 mov	 eax, DWORD PTR [rax]
  00653	ff c8		 dec	 eax
  00655	48 98		 cdqe
  00657	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv301[rsp], rax
  0065f	b9 02 00 00 00	 mov	 ecx, 2
  00664	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0066a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00672	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tv301[rsp]
  0067a	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  0067e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00683	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161581
  0068a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0068f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161582
  00696	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0069b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006a0	41 b9 03 00 00
	00		 mov	 r9d, 3
  006a6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161583
  006ad	ba 51 0c 00 00	 mov	 edx, 3153		; 00000c51H
  006b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161584
  006b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  006bf	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  006c5	ff c0		 inc	 eax
  006c7	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax
  006cd	e9 10 03 00 00	 jmp	 $LN5@process_ar
$LN27@process_ar:
  006d2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  006d9	8b 00		 mov	 eax, DWORD PTR [rax]
  006db	83 e8 02	 sub	 eax, 2
  006de	48 98		 cdqe
  006e0	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  006e8	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  006ec	e8 00 00 00 00	 call	 parse_option_time
  006f1	e9 ec 02 00 00	 jmp	 $LN5@process_ar
$LN28@process_ar:

; 3154 :             case 'o': PARSE_OPTION_CASE( opcode   );

  006f6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  006fd	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00701	0f 85 88 00 00
	00		 jne	 $LN29@process_ar
  00707	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  0070e	8b 00		 mov	 eax, DWORD PTR [rax]
  00710	ff c8		 dec	 eax
  00712	48 98		 cdqe
  00714	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv322[rsp], rax
  0071c	b9 02 00 00 00	 mov	 ecx, 2
  00721	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00727	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0072f	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR tv322[rsp]
  00737	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  0073b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00740	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161587
  00747	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0074c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161588
  00753	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00758	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0075d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00763	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161589
  0076a	ba 52 0c 00 00	 mov	 edx, 3154		; 00000c52H
  0076f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161590
  00776	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0077c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  00782	ff c0		 inc	 eax
  00784	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax
  0078a	e9 53 02 00 00	 jmp	 $LN5@process_ar
$LN29@process_ar:
  0078f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00796	8b 00		 mov	 eax, DWORD PTR [rax]
  00798	83 e8 02	 sub	 eax, 2
  0079b	48 98		 cdqe
  0079d	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  007a5	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  007a9	e8 00 00 00 00	 call	 parse_option_opcode
  007ae	e9 2f 02 00 00	 jmp	 $LN5@process_ar
$LN30@process_ar:

; 3155 :             case 'm': PARSE_OPTION_CASE( msglvl   );

  007b3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  007ba	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  007be	0f 85 88 00 00
	00		 jne	 $LN31@process_ar
  007c4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  007cb	8b 00		 mov	 eax, DWORD PTR [rax]
  007cd	ff c8		 dec	 eax
  007cf	48 98		 cdqe
  007d1	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv343[rsp], rax
  007d9	b9 02 00 00 00	 mov	 ecx, 2
  007de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007e4	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  007ec	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR tv343[rsp]
  007f4	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  007f8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  007fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161593
  00804	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00809	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161594
  00810	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00815	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0081a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00820	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161595
  00827	ba 53 0c 00 00	 mov	 edx, 3155		; 00000c53H
  0082c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161596
  00833	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00839	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  0083f	ff c0		 inc	 eax
  00841	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax
  00847	e9 96 01 00 00	 jmp	 $LN5@process_ar
$LN31@process_ar:
  0084c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00853	8b 00		 mov	 eax, DWORD PTR [rax]
  00855	83 e8 02	 sub	 eax, 2
  00858	48 98		 cdqe
  0085a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00862	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00866	e8 00 00 00 00	 call	 parse_option_msglvl
  0086b	e9 72 01 00 00	 jmp	 $LN5@process_ar
$LN32@process_ar:

; 3156 :             case 'u': PARSE_OPTION_CASE( unit     );

  00870	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  00877	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0087b	0f 85 88 00 00
	00		 jne	 $LN33@process_ar
  00881	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00888	8b 00		 mov	 eax, DWORD PTR [rax]
  0088a	ff c8		 dec	 eax
  0088c	48 98		 cdqe
  0088e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv364[rsp], rax
  00896	b9 02 00 00 00	 mov	 ecx, 2
  0089b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008a1	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  008a9	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR tv364[rsp]
  008b1	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  008b5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  008ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161599
  008c1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161600
  008cd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008d2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008d7	41 b9 03 00 00
	00		 mov	 r9d, 3
  008dd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161601
  008e4	ba 54 0c 00 00	 mov	 edx, 3156		; 00000c54H
  008e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161602
  008f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  008f6	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  008fc	ff c0		 inc	 eax
  008fe	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax
  00904	e9 d9 00 00 00	 jmp	 $LN5@process_ar
$LN33@process_ar:
  00909	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00910	8b 00		 mov	 eax, DWORD PTR [rax]
  00912	83 e8 02	 sub	 eax, 2
  00915	48 98		 cdqe
  00917	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0091f	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00923	e8 00 00 00 00	 call	 parse_option_unit
  00928	e9 b5 00 00 00	 jmp	 $LN5@process_ar
$LN34@process_ar:

; 3157 :             case 'p': PARSE_OPTION_CASE( codepage );

  0092d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  00934	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00938	0f 85 85 00 00
	00		 jne	 $LN35@process_ar
  0093e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00945	8b 00		 mov	 eax, DWORD PTR [rax]
  00947	ff c8		 dec	 eax
  00949	48 98		 cdqe
  0094b	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv385[rsp], rax
  00953	b9 02 00 00 00	 mov	 ecx, 2
  00958	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0095e	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00966	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR tv385[rsp]
  0096e	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00972	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00977	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161605
  0097e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00983	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161606
  0098a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0098f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00994	41 b9 03 00 00
	00		 mov	 r9d, 3
  0099a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161607
  009a1	ba 55 0c 00 00	 mov	 edx, 3157		; 00000c55H
  009a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161608
  009ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  009b3	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  009b9	ff c0		 inc	 eax
  009bb	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax
  009c1	eb 1f		 jmp	 SHORT $LN5@process_ar
$LN35@process_ar:
  009c3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  009ca	8b 00		 mov	 eax, DWORD PTR [rax]
  009cc	83 e8 02	 sub	 eax, 2
  009cf	48 98		 cdqe
  009d1	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  009d9	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  009dd	e8 00 00 00 00	 call	 parse_option_codepage
$LN5@process_ar:

; 3158 : 
; 3159 :         } // end switch
; 3160 :     } // end for

  009e2	e9 52 f6 ff ff	 jmp	 $LN2@process_ar
$LN3@process_ar:

; 3161 : 
; 3162 :     /* Any non-option argument is presumed to be the tracefile name */
; 3163 :     if (argv[ optind ])

  009e7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  009ee	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  009f1	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  009f9	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  009fe	74 3f		 je	 SHORT $LN36@process_ar

; 3164 :         parse_tracefile( argv[ optind++ ]);

  00a00	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00a07	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00a0a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00a12	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00a16	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv414[rsp], rax
  00a1e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00a25	8b 00		 mov	 eax, DWORD PTR [rax]
  00a27	ff c0		 inc	 eax
  00a29	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_optind
  00a30	89 01		 mov	 DWORD PTR [rcx], eax
  00a32	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv414[rsp]
  00a3a	e8 00 00 00 00	 call	 parse_tracefile
$LN36@process_ar:

; 3165 : 
; 3166 :     /* Any arguments remaining on the command-line are errors */
; 3167 :     if (!arg_errs)

  00a3f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR arg_errs, 0
  00a46	0f 85 af 00 00
	00		 jne	 $LN37@process_ar
$LN7@process_ar:

; 3168 :     {
; 3169 :         while (optind < argc)

  00a4c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00a53	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  00a5a	39 08		 cmp	 DWORD PTR [rax], ecx
  00a5c	0f 8d 99 00 00
	00		 jge	 $LN8@process_ar

; 3170 :         {
; 3171 :             // "Invalid/unsupported option: %s"
; 3172 :             FWRMSG( stderr, HHC03219, "E", argv[ optind++ ] );

  00a62	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00a69	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00a6c	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00a74	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00a78	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv422[rsp], rax
  00a80	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00a87	8b 00		 mov	 eax, DWORD PTR [rax]
  00a89	ff c0		 inc	 eax
  00a8b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_optind
  00a92	89 01		 mov	 DWORD PTR [rcx], eax
  00a94	b9 02 00 00 00	 mov	 ecx, 2
  00a99	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a9f	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv422[rsp]
  00aa7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00aac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161611
  00ab3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ab8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161612
  00abf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ac4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ac9	41 b9 03 00 00
	00		 mov	 r9d, 3
  00acf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161613
  00ad6	ba 64 0c 00 00	 mov	 edx, 3172		; 00000c64H
  00adb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161614
  00ae2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3173 :             arg_errs++;

  00ae8	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  00aee	ff c0		 inc	 eax
  00af0	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax

; 3174 :         }

  00af6	e9 51 ff ff ff	 jmp	 $LN7@process_ar
$LN8@process_ar:
$LN37@process_ar:

; 3175 :     }
; 3176 : 
; 3177 :     /* The name of the input tracefile is required */
; 3178 :     if (!pathname[0])

  00afb	b8 01 00 00 00	 mov	 eax, 1
  00b00	48 6b c0 00	 imul	 rax, rax, 0
  00b04	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:pathname
  00b0b	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00b0f	85 c0		 test	 eax, eax
  00b11	75 55		 jne	 SHORT $LN38@process_ar

; 3179 :     {
; 3180 :         // "Missing input-file specification"
; 3181 :         FWRMSG( stderr, HHC03201, "E" );

  00b13	b9 02 00 00 00	 mov	 ecx, 2
  00b18	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b1e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161616
  00b25	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b2a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161617
  00b31	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b36	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b3b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b41	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161618
  00b48	ba 6d 0c 00 00	 mov	 edx, 3181		; 00000c6dH
  00b4d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161619
  00b54	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3182 :         arg_errs++;

  00b5a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  00b60	ff c0		 inc	 eax
  00b62	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax
$LN38@process_ar:

; 3183 :     }
; 3184 : 
; 3185 :     /* Fix 'beg_tim' and 'end_tim' as needed */
; 3186 :     if (beg_tim.tv_sec || beg_tim.tv_usec ||
; 3187 :         end_tim.tv_sec || end_tim.tv_usec)

  00b68	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR beg_tim, 0
  00b6f	75 1f		 jne	 SHORT $LN40@process_ar
  00b71	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR beg_tim+4, 0
  00b78	75 16		 jne	 SHORT $LN40@process_ar
  00b7a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR end_tim, 0
  00b81	75 0d		 jne	 SHORT $LN40@process_ar
  00b83	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR end_tim+4, 0
  00b8a	0f 84 c1 00 00
	00		 je	 $LN39@process_ar
$LN40@process_ar:

; 3188 :     {
; 3189 :         if (!beg_dat || !end_dat)

  00b90	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR beg_dat, 0
  00b98	74 0a		 je	 SHORT $LN43@process_ar
  00b9a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR end_dat, 0
  00ba2	75 57		 jne	 SHORT $LN41@process_ar
$LN43@process_ar:

; 3190 :         {
; 3191 :             // "--date range is required when --time range specified"
; 3192 :             FWRMSG( stderr, HHC03220, "E" );

  00ba4	b9 02 00 00 00	 mov	 ecx, 2
  00ba9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00baf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161625
  00bb6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00bbb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161626
  00bc2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00bc7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00bcc	41 b9 03 00 00
	00		 mov	 r9d, 3
  00bd2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161627
  00bd9	ba 78 0c 00 00	 mov	 edx, 3192		; 00000c78H
  00bde	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161628
  00be5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3193 :             arg_errs++;

  00beb	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR arg_errs
  00bf1	ff c0		 inc	 eax
  00bf3	89 05 00 00 00
	00		 mov	 DWORD PTR arg_errs, eax

; 3194 :         }

  00bf9	eb 56		 jmp	 SHORT $LN42@process_ar
$LN41@process_ar:

; 3195 :         else // (adjust beg/end date/time range)
; 3196 :         {
; 3197 :             time_t  tz_offset  = time_zone_offset();

  00bfb	e8 00 00 00 00	 call	 time_zone_offset
  00c00	48 89 44 24 48	 mov	 QWORD PTR tz_offset$1[rsp], rax

; 3198 : 
; 3199 :             /* Add date to time tange */
; 3200 :             beg_tim.tv_sec += beg_dat;

  00c05	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR beg_tim
  00c0c	48 03 05 00 00
	00 00		 add	 rax, QWORD PTR beg_dat
  00c13	89 05 00 00 00
	00		 mov	 DWORD PTR beg_tim, eax

; 3201 :             end_tim.tv_sec += end_dat;

  00c19	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR end_tim
  00c20	48 03 05 00 00
	00 00		 add	 rax, QWORD PTR end_dat
  00c27	89 05 00 00 00
	00		 mov	 DWORD PTR end_tim, eax

; 3202 : 
; 3203 :             /* Compensate for timezone */
; 3204 :             beg_tim.tv_sec += tz_offset;

  00c2d	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR beg_tim
  00c34	48 03 44 24 48	 add	 rax, QWORD PTR tz_offset$1[rsp]
  00c39	89 05 00 00 00
	00		 mov	 DWORD PTR beg_tim, eax

; 3205 :             end_tim.tv_sec += tz_offset;

  00c3f	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR end_tim
  00c46	48 03 44 24 48	 add	 rax, QWORD PTR tz_offset$1[rsp]
  00c4b	89 05 00 00 00
	00		 mov	 DWORD PTR end_tim, eax
$LN42@process_ar:
$LN39@process_ar:

; 3206 :         }
; 3207 :     }
; 3208 : 
; 3209 :     /* Terminate if any errors were detected */
; 3210 :     if (arg_errs)

  00c51	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR arg_errs, 0
  00c58	74 05		 je	 SHORT $LN44@process_ar

; 3211 :         show_usage();   // (does not return)

  00c5a	e8 00 00 00 00	 call	 show_usage
$LN44@process_ar:

; 3212 : 
; 3213 : } // end process_args

  00c5f	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00c66	c3		 ret	 0
  00c67	90		 npad	 1
$LN47@process_ar:
  00c68	00 00 00 00	 DD	 $LN10@process_ar
  00c6c	00 00 00 00	 DD	 $LN9@process_ar
  00c70	00 00 00 00	 DD	 $LN11@process_ar
  00c74	00 00 00 00	 DD	 $LN14@process_ar
  00c78	00 00 00 00	 DD	 $LN24@process_ar
  00c7c	00 00 00 00	 DD	 $LN20@process_ar
  00c80	00 00 00 00	 DD	 $LN13@process_ar
  00c84	00 00 00 00	 DD	 $LN30@process_ar
  00c88	00 00 00 00	 DD	 $LN18@process_ar
  00c8c	00 00 00 00	 DD	 $LN28@process_ar
  00c90	00 00 00 00	 DD	 $LN34@process_ar
  00c94	00 00 00 00	 DD	 $LN16@process_ar
  00c98	00 00 00 00	 DD	 $LN22@process_ar
  00c9c	00 00 00 00	 DD	 $LN26@process_ar
  00ca0	00 00 00 00	 DD	 $LN32@process_ar
  00ca4	00 00 00 00	 DD	 $LN12@process_ar
$LN46@process_ar:
  00ca8	00		 DB	 0
  00ca9	01		 DB	 1
  00caa	0f		 DB	 15
  00cab	0f		 DB	 15
  00cac	0f		 DB	 15
  00cad	0f		 DB	 15
  00cae	0f		 DB	 15
  00caf	0f		 DB	 15
  00cb0	0f		 DB	 15
  00cb1	0f		 DB	 15
  00cb2	0f		 DB	 15
  00cb3	0f		 DB	 15
  00cb4	0f		 DB	 15
  00cb5	0f		 DB	 15
  00cb6	0f		 DB	 15
  00cb7	0f		 DB	 15
  00cb8	0f		 DB	 15
  00cb9	0f		 DB	 15
  00cba	0f		 DB	 15
  00cbb	0f		 DB	 15
  00cbc	0f		 DB	 15
  00cbd	0f		 DB	 15
  00cbe	0f		 DB	 15
  00cbf	0f		 DB	 15
  00cc0	0f		 DB	 15
  00cc1	0f		 DB	 15
  00cc2	0f		 DB	 15
  00cc3	0f		 DB	 15
  00cc4	0f		 DB	 15
  00cc5	0f		 DB	 15
  00cc6	0f		 DB	 15
  00cc7	0f		 DB	 15
  00cc8	0f		 DB	 15
  00cc9	0f		 DB	 15
  00cca	0f		 DB	 15
  00ccb	0f		 DB	 15
  00ccc	0f		 DB	 15
  00ccd	0f		 DB	 15
  00cce	0f		 DB	 15
  00ccf	0f		 DB	 15
  00cd0	0f		 DB	 15
  00cd1	0f		 DB	 15
  00cd2	0f		 DB	 15
  00cd3	0f		 DB	 15
  00cd4	0f		 DB	 15
  00cd5	0f		 DB	 15
  00cd6	0f		 DB	 15
  00cd7	0f		 DB	 15
  00cd8	0f		 DB	 15
  00cd9	0f		 DB	 15
  00cda	0f		 DB	 15
  00cdb	0f		 DB	 15
  00cdc	0f		 DB	 15
  00cdd	0f		 DB	 15
  00cde	0f		 DB	 15
  00cdf	0f		 DB	 15
  00ce0	0f		 DB	 15
  00ce1	0f		 DB	 15
  00ce2	0f		 DB	 15
  00ce3	0f		 DB	 15
  00ce4	0f		 DB	 15
  00ce5	0f		 DB	 15
  00ce6	0f		 DB	 15
  00ce7	0f		 DB	 15
  00ce8	02		 DB	 2
  00ce9	0f		 DB	 15
  00cea	0f		 DB	 15
  00ceb	0f		 DB	 15
  00cec	0f		 DB	 15
  00ced	0f		 DB	 15
  00cee	0f		 DB	 15
  00cef	0f		 DB	 15
  00cf0	0f		 DB	 15
  00cf1	0f		 DB	 15
  00cf2	0f		 DB	 15
  00cf3	0f		 DB	 15
  00cf4	0f		 DB	 15
  00cf5	0f		 DB	 15
  00cf6	0f		 DB	 15
  00cf7	0f		 DB	 15
  00cf8	0f		 DB	 15
  00cf9	0f		 DB	 15
  00cfa	0f		 DB	 15
  00cfb	0f		 DB	 15
  00cfc	0f		 DB	 15
  00cfd	0f		 DB	 15
  00cfe	0f		 DB	 15
  00cff	0f		 DB	 15
  00d00	0f		 DB	 15
  00d01	0f		 DB	 15
  00d02	0f		 DB	 15
  00d03	0f		 DB	 15
  00d04	0f		 DB	 15
  00d05	0f		 DB	 15
  00d06	0f		 DB	 15
  00d07	0f		 DB	 15
  00d08	0f		 DB	 15
  00d09	0f		 DB	 15
  00d0a	0f		 DB	 15
  00d0b	0f		 DB	 15
  00d0c	03		 DB	 3
  00d0d	04		 DB	 4
  00d0e	05		 DB	 5
  00d0f	0f		 DB	 15
  00d10	0f		 DB	 15
  00d11	0f		 DB	 15
  00d12	06		 DB	 6
  00d13	0f		 DB	 15
  00d14	0f		 DB	 15
  00d15	0f		 DB	 15
  00d16	07		 DB	 7
  00d17	08		 DB	 8
  00d18	09		 DB	 9
  00d19	0a		 DB	 10
  00d1a	0f		 DB	 15
  00d1b	0b		 DB	 11
  00d1c	0c		 DB	 12
  00d1d	0d		 DB	 13
  00d1e	0e		 DB	 14
process_args ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
cpuad$ = 64
hdr$ = 72
amt$ = 80
bytes_read$ = 84
rec$ = 88
tv79 = 96
tv163 = 104
tv181 = 112
tv171 = 120
buf$1 = 128
__$ArrayPad$ = 136
msgnum$ = 176
finish_reading_rec PROC

; 2610 : {

  00000	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00015	48 33 c4	 xor	 rax, rsp
  00018	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2611 :     TFHDR* hdr        = NULL;         /* Ptr to record header        */

  00020	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR hdr$[rsp], 0

; 2612 :     BYTE*  rec        = NULL;         /* Ptr to remainder of record  */

  00029	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR rec$[rsp], 0

; 2613 :     int    amt        = 0;            /* Size of remainder of record */

  00032	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR amt$[rsp], 0

; 2614 :     int    bytes_read = 0;            /* Number of BYTES read so far */

  0003a	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR bytes_read$[rsp], 0

; 2615 :     U16    cpuad      = 0;            /* cpuad from TFHDR header     */

  00042	33 c0		 xor	 eax, eax
  00044	66 89 44 24 40	 mov	 WORD PTR cpuad$[rsp], ax

; 2616 : 
; 2617 :     static bool first_time = true;    /* First time switch           */
; 2618 : 
; 2619 :     hdr = (TFHDR*) iobuff;            /* point to begin of record    */

  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:iobuff
  00050	48 89 44 24 48	 mov	 QWORD PTR hdr$[rsp], rax

; 2620 :     rec = (BYTE*) (hdr + 1);          /* point past TFHDR to the rec */

  00055	48 8b 44 24 48	 mov	 rax, QWORD PTR hdr$[rsp]
  0005a	48 83 c0 18	 add	 rax, 24
  0005e	48 89 44 24 58	 mov	 QWORD PTR rec$[rsp], rax

; 2621 :     cpuad = (BYTE) hdr->cpuad;        /* which CPU this rec is for   */

  00063	48 8b 44 24 48	 mov	 rax, QWORD PTR hdr$[rsp]
  00068	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  0006c	66 89 44 24 40	 mov	 WORD PTR cpuad$[rsp], ax

; 2622 : 
; 2623 :     /* Read in the remainder of this record */
; 2624 :     amt = hdr->curr - sizeof( TFHDR );

  00071	48 8b 44 24 48	 mov	 rax, QWORD PTR hdr$[rsp]
  00076	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  0007a	48 83 e8 18	 sub	 rax, 24
  0007e	89 44 24 50	 mov	 DWORD PTR amt$[rsp], eax

; 2625 :     if ((bytes_read = fread( rec, 1, amt, inf )) < 0)

  00082	48 63 44 24 50	 movsxd	 rax, DWORD PTR amt$[rsp]
  00087	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR inf
  0008e	4c 8b c0	 mov	 r8, rax
  00091	ba 01 00 00 00	 mov	 edx, 1
  00096	48 8b 4c 24 58	 mov	 rcx, QWORD PTR rec$[rsp]
  0009b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  000a1	89 44 24 54	 mov	 DWORD PTR bytes_read$[rsp], eax
  000a5	83 7c 24 54 00	 cmp	 DWORD PTR bytes_read$[rsp], 0
  000aa	7d 6f		 jge	 SHORT $LN2@finish_rea

; 2626 :     {
; 2627 :         /* "Error reading trace file: %s" */
; 2628 :         FWRMSG( stderr, HHC03206, "E", strerror( errno ));

  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000b2	8b 08		 mov	 ecx, DWORD PTR [rax]
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  000ba	48 89 44 24 60	 mov	 QWORD PTR tv79[rsp], rax
  000bf	b9 02 00 00 00	 mov	 ecx, 2
  000c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000ca	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv79[rsp]
  000cf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161078
  000db	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161079
  000e7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000ec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f1	41 b9 03 00 00
	00		 mov	 r9d, 3
  000f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161080
  000fe	ba 44 0a 00 00	 mov	 edx, 2628		; 00000a44H
  00103	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161081
  0010a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2629 :         exit( -1 );

  00110	b9 ff ff ff ff	 mov	 ecx, -1
  00115	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN2@finish_rea:

; 2630 :     }
; 2631 : 
; 2632 :     if (bytes_read < amt)

  0011b	8b 44 24 50	 mov	 eax, DWORD PTR amt$[rsp]
  0011f	39 44 24 54	 cmp	 DWORD PTR bytes_read$[rsp], eax
  00123	0f 8d 84 00 00
	00		 jge	 $LN3@finish_rea

; 2633 :     {
; 2634 :         /* "Truncated %s record; aborting" */
; 2635 :         char buf[8];
; 2636 :         MSGBUF( buf, "%"PRIu16, msgnum );

  00129	0f b7 84 24 b0
	00 00 00	 movzx	 eax, WORD PTR msgnum$[rsp]
  00131	44 8b c8	 mov	 r9d, eax
  00134	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161083
  0013b	ba 08 00 00 00	 mov	 edx, 8
  00140	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$1[rsp]
  00148	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2637 :         FWRMSG( stderr, HHC03207, "E", buf );

  0014e	b9 02 00 00 00	 mov	 ecx, 2
  00153	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00159	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$1[rsp]
  00161	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00166	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161084
  0016d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00172	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161085
  00179	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0017e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00183	41 b9 03 00 00
	00		 mov	 r9d, 3
  00189	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG161086
  00190	ba 4d 0a 00 00	 mov	 edx, 2637		; 00000a4dH
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG161087
  0019c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2638 :         exit( -1 );

  001a2	b9 ff ff ff ff	 mov	 ecx, -1
  001a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN3@finish_rea:

; 2639 :     }
; 2640 : 
; 2641 :     /* Don't save this record if they're not interested in it */
; 2642 :     if (!is_wanted( hdr ))

  001ad	48 8b 4c 24 48	 mov	 rcx, QWORD PTR hdr$[rsp]
  001b2	e8 00 00 00 00	 call	 is_wanted
  001b7	0f b6 c0	 movzx	 eax, al
  001ba	85 c0		 test	 eax, eax
  001bc	75 07		 jne	 SHORT $LN4@finish_rea

; 2643 :         return false;

  001be	32 c0		 xor	 al, al
  001c0	e9 e5 00 00 00	 jmp	 $LN1@finish_rea
$LN4@finish_rea:

; 2644 : 
; 2645 :     /* Swap endianness of record if needed before saving it.
; 2646 :        Note that the TFHDR itself has already been swapped. */
; 2647 :     if (doendswap)

  001c5	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR doendswap
  001cc	85 c0		 test	 eax, eax
  001ce	74 13		 je	 SHORT $LN5@finish_rea

; 2648 :         tf_swap_rec( hdr, msgnum );

  001d0	0f b7 94 24 b0
	00 00 00	 movzx	 edx, WORD PTR msgnum$[rsp]
  001d8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR hdr$[rsp]
  001dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tf_swap_rec
$LN5@finish_rea:

; 2649 : 
; 2650 :     /* Initialize some printing variables so spacing works right */
; 2651 :     if (first_time)

  001e3	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?first_time@?1??finish_reading_rec@@9@9
  001ea	85 c0		 test	 eax, eax
  001ec	74 2b		 je	 SHORT $LN6@finish_rea

; 2652 :     {
; 2653 :         first_time = false;

  001ee	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?first_time@?1??finish_reading_rec@@9@9, 0

; 2654 :         prvdevnum  = ~hdr->devnum;

  001f5	48 8b 44 24 48	 mov	 rax, QWORD PTR hdr$[rsp]
  001fa	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  001fe	f7 d0		 not	 eax
  00200	66 89 05 00 00
	00 00		 mov	 WORD PTR prvdevnum, ax

; 2655 :         prvcpuad   = ~hdr->cpuad;

  00207	48 8b 44 24 48	 mov	 rax, QWORD PTR hdr$[rsp]
  0020c	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00210	f7 d0		 not	 eax
  00212	66 89 05 00 00
	00 00		 mov	 WORD PTR prvcpuad, ax
$LN6@finish_rea:

; 2656 :     }
; 2657 : 
; 2658 :     /* Save this record for possible later processing */
; 2659 :     memcpy( all_recs_ptr( cpuad, msgnum ), hdr, recsize( msgnum ));

  00219	0f b7 8c 24 b0
	00 00 00	 movzx	 ecx, WORD PTR msgnum$[rsp]
  00221	e8 00 00 00 00	 call	 recsize
  00226	48 89 44 24 68	 mov	 QWORD PTR tv163[rsp], rax
  0022b	0f b7 94 24 b0
	00 00 00	 movzx	 edx, WORD PTR msgnum$[rsp]
  00233	0f b7 4c 24 40	 movzx	 ecx, WORD PTR cpuad$[rsp]
  00238	e8 00 00 00 00	 call	 all_recs_ptr
  0023d	48 8b f8	 mov	 rdi, rax
  00240	48 8b 74 24 48	 mov	 rsi, QWORD PTR hdr$[rsp]
  00245	48 8b 44 24 68	 mov	 rax, QWORD PTR tv163[rsp]
  0024a	48 8b c8	 mov	 rcx, rax
  0024d	f3 a4		 rep movsb

; 2660 :     all_recs[ cpuad ].gotmask |= gotmask( msgnum );

  0024f	0f b7 44 24 40	 movzx	 eax, WORD PTR cpuad$[rsp]
  00254	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  0025b	48 89 44 24 78	 mov	 QWORD PTR tv171[rsp], rax
  00260	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  00267	48 89 4c 24 70	 mov	 QWORD PTR tv181[rsp], rcx
  0026c	0f b7 8c 24 b0
	00 00 00	 movzx	 ecx, WORD PTR msgnum$[rsp]
  00274	e8 00 00 00 00	 call	 gotmask
  00279	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv181[rsp]
  0027e	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv171[rsp]
  00283	8b 8c 11 00 26
	00 00		 mov	 ecx, DWORD PTR [rcx+rdx+9728]
  0028a	0b c8		 or	 ecx, eax
  0028c	8b c1		 mov	 eax, ecx
  0028e	0f b7 4c 24 40	 movzx	 ecx, WORD PTR cpuad$[rsp]
  00293	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  0029a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  002a1	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax

; 2661 :     return true;

  002a8	b0 01		 mov	 al, 1
$LN1@finish_rea:
$LN7@finish_rea:

; 2662 : }

  002aa	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  002b2	48 33 cc	 xor	 rcx, rsp
  002b5	e8 00 00 00 00	 call	 __security_check_cookie
  002ba	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  002c1	5f		 pop	 rdi
  002c2	5e		 pop	 rsi
  002c3	c3		 ret	 0
finish_reading_rec ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01336 PROC

; 2598 : PROCESS_DEV_RECORD_FUNC( 1336 ); // Startio cc=2

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01336
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01336 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01334 PROC

; 2597 : PROCESS_DEV_RECORD_FUNC( 1334 ); // ORB

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01334
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01334 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01333 PROC

; 2596 : PROCESS_DEV_RECORD_FUNC( 1333 ); // Resume subchannel

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01333
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01333 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01332 PROC

; 2595 : PROCESS_DEV_RECORD_FUNC( 1332 ); // Halt subchannel

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01332
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01332 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01331 PROC

; 2594 : PROCESS_DEV_RECORD_FUNC( 1331 ); // Clear subchannel

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01331
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01331 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01330 PROC

; 2593 : PROCESS_DEV_RECORD_FUNC( 1330 ); // HIO modification

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01330
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01330 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01329 PROC

; 2592 : PROCESS_DEV_RECORD_FUNC( 1329 ); // Halt I/O

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01329
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01329 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01321 PROC

; 2591 : PROCESS_DEV_RECORD_FUNC( 1321 ); // S/370 start I/O conversion success

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01321
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01321 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01320 PROC

; 2590 : PROCESS_DEV_RECORD_FUNC( 1320 ); // S/370 start I/O conversion started

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01320
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01320 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01318 PROC

; 2589 : PROCESS_DEV_RECORD_FUNC( 1318 ); // TEST I/O

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01318
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01318 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01317 PROC

; 2588 : PROCESS_DEV_RECORD_FUNC( 1317 ); // SCSW

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01317
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01317 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01316 PROC

; 2587 : PROCESS_DEV_RECORD_FUNC( 1316 ); // CSW (370)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01316
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01316 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01315 PROC

; 2586 : PROCESS_DEV_RECORD_FUNC( 1315 ); // CCW

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01315
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01315 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01313 PROC

; 2585 : PROCESS_DEV_RECORD_FUNC( 1313 ); // Sense

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01313
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01313 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01312 PROC

; 2584 : PROCESS_DEV_RECORD_FUNC( 1312 ); // I/O stat

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01312
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01312 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01311 PROC

; 2583 : PROCESS_DEV_RECORD_FUNC( 1311 ); // Resumed

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01311
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01311 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01310 PROC

; 2582 : PROCESS_DEV_RECORD_FUNC( 1310 ); // Suspended

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01310
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01310 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01309 PROC

; 2581 : PROCESS_DEV_RECORD_FUNC( 1309 ); // Halt completed

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01309
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01309 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01308 PROC

; 2580 : PROCESS_DEV_RECORD_FUNC( 1308 ); // Clear completed

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01308
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01308 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01307 PROC

; 2579 : PROCESS_DEV_RECORD_FUNC( 1307 ); // Attention completed

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01307
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01307 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01306 PROC

; 2578 : PROCESS_DEV_RECORD_FUNC( 1306 ); // Initial status interrupt

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01306
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01306 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01305 PROC

; 2577 : PROCESS_DEV_RECORD_FUNC( 1305 ); // Attention

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01305
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01305 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01304 PROC

; 2576 : PROCESS_DEV_RECORD_FUNC( 1304 ); // Attention signaled

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01304
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01304 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01301 PROC

; 2575 : PROCESS_DEV_RECORD_FUNC( 1301 ); // IDAW/MIDAW

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01301
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01301 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF01300 PROC

; 2574 : PROCESS_DEV_RECORD_FUNC( 1300 ); // Halt subchannel

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF01300
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF01300 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00520 PROC

; 2572 : PROCESS_DEV_RECORD_FUNC( 0520 ); // Positioning

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00520
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00520 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00519 PROC

; 2571 : PROCESS_DEV_RECORD_FUNC( 0519 ); // Offset len

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00519
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00519 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00518 PROC

; 2570 : PROCESS_DEV_RECORD_FUNC( 0518 ); // Cache miss

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00518
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00518 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00517 PROC

; 2569 : PROCESS_DEV_RECORD_FUNC( 0517 ); // Unavailable cache

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00517
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00517 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00516 PROC

; 2568 : PROCESS_DEV_RECORD_FUNC( 0516 ); // Cache hit

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00516
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00516 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00442 PROC

; 2566 : PROCESS_DEV_RECORD_FUNC( 0442 ); // Set file mask

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00442
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00442 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00441 PROC

; 2565 : PROCESS_DEV_RECORD_FUNC( 0441 ); // Update cyl head record dl

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00441
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00441 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00440 PROC

; 2564 : PROCESS_DEV_RECORD_FUNC( 0440 ); // Update cyl head record kl dl

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00440
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00440 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00439 PROC

; 2563 : PROCESS_DEV_RECORD_FUNC( 0439 ); // Set track overflow flag

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00439
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00439 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00438 PROC

; 2562 : PROCESS_DEV_RECORD_FUNC( 0438 ); // Write cyl head record kl dl

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00438
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00438 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00437 PROC

; 2561 : PROCESS_DEV_RECORD_FUNC( 0437 ); // Read data

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00437
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00437 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00436 PROC

; 2560 : PROCESS_DEV_RECORD_FUNC( 0436 ); // Read key

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00436
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00436 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00435 PROC

; 2559 : PROCESS_DEV_RECORD_FUNC( 0435 ); // Cyl head record kl dl

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00435
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00435 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00434 PROC

; 2558 : PROCESS_DEV_RECORD_FUNC( 0434 ); // Read count orientation

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00434
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00434 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00433 PROC

; 2557 : PROCESS_DEV_RECORD_FUNC( 0433 ); // MT advance

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00433
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00433 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00432 PROC

; 2556 : PROCESS_DEV_RECORD_FUNC( 0432 ); // MT advance error

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00432
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00432 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00431 PROC

; 2555 : PROCESS_DEV_RECORD_FUNC( 0431 ); // Seeking

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00431
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00431 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00430 PROC

; 2554 : PROCESS_DEV_RECORD_FUNC( 0430 ); // Trkhdr

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00430
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00430 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00429 PROC

; 2553 : PROCESS_DEV_RECORD_FUNC( 0429 ); // Offset

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00429
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00429 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00428 PROC

; 2552 : PROCESS_DEV_RECORD_FUNC( 0428 ); // Cache miss

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00428
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00428 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00427 PROC

; 2551 : PROCESS_DEV_RECORD_FUNC( 0427 ); // Unavailable cache

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00427
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00427 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00426 PROC

; 2550 : PROCESS_DEV_RECORD_FUNC( 0426 ); // Cache hit

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00426
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00426 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00425 PROC

; 2549 : PROCESS_DEV_RECORD_FUNC( 0425 ); // Updating track

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00425
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00425 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00424 PROC

; 2548 : PROCESS_DEV_RECORD_FUNC( 0424 ); // Cur trk

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00424
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00424 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00423 PROC

; 2547 : PROCESS_DEV_RECORD_FUNC( 0423 ); // Search key

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0000e	0f b7 48 12	 movzx	 ecx, WORD PTR [rax+18]
  00012	e8 00 00 00 00	 call	 is_devnum_wanted
  00017	0f b6 c0	 movzx	 eax, al
  0001a	85 c0		 test	 eax, eax
  0001c	74 0a		 je	 SHORT $LN2@process_TF
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  00023	e8 00 00 00 00	 call	 print_TF00423
$LN2@process_TF:
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  0002d	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00031	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003f	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00046	83 e0 fe	 and	 eax, -2			; fffffffeH
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0004e	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00052	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00060	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
process_TF00423 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv78 = 64
tim$1 = 80
__$ArrayPad$ = 144
rec$ = 176
process_TF02326 PROC

; 2513 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2514 :     if (!rec->valid)

  0001f	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00027	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  0002b	85 c0		 test	 eax, eax
  0002d	0f 85 df 00 00
	00		 jne	 $LN2@process_TF

; 2515 :     {
; 2516 :         char tim [ 64 ] = {0};  // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  00033	48 8d 44 24 50	 lea	 rax, QWORD PTR tim$1[rsp]
  00038	48 8b f8	 mov	 rdi, rax
  0003b	33 c0		 xor	 eax, eax
  0003d	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00042	f3 aa		 rep stosb

; 2517 : 
; 2518 :         FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  00044	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0004c	48 83 c0 08	 add	 rax, 8
  00050	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00056	48 8d 54 24 50	 lea	 rdx, QWORD PTR tim$1[rsp]
  0005b	48 8b c8	 mov	 rcx, rax
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 2519 :         tf_do_blank_sep( &rec->rhdr );

  00064	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0006c	48 8b c8	 mov	 rcx, rax
  0006f	e8 00 00 00 00	 call	 tf_do_blank_sep

; 2520 :         FLOGMSG( stdout, "%s HHC02267I Real address is not valid\n", &tim[ 11 ] );

  00074	b8 01 00 00 00	 mov	 eax, 1
  00079	48 6b c0 0b	 imul	 rax, rax, 11
  0007d	48 8d 44 04 50	 lea	 rax, QWORD PTR tim$1[rsp+rax]
  00082	48 89 44 24 40	 mov	 QWORD PTR tv78[rsp], rax
  00087	b9 01 00 00 00	 mov	 ecx, 1
  0008c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00092	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv78[rsp]
  00097	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160806
  000a3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000a8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ad	41 b9 03 00 00
	00		 mov	 r9d, 3
  000b3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160807
  000ba	ba d8 09 00 00	 mov	 edx, 2520		; 000009d8H
  000bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160808
  000c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2521 : 
; 2522 :         /* Reset ONLY *our* GOT flag and return */
; 2523 :         all_recs[ rec->rhdr.cpuad ].gotmask &= ~GOT_TF02326;

  000cc	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  000d4	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  000d8	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  000df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  000e6	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  000ed	0f ba f0 09	 btr	 eax, 9
  000f1	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000f9	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  000fd	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00104	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  0010b	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
$LN2@process_TF:

; 2524 :     }
; 2525 :     // Otherwise do nothing. operands normally printed by process_TF02324.
; 2526 : }

  00112	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0011a	48 33 cc	 xor	 rcx, rsp
  0011d	e8 00 00 00 00	 call	 __security_check_cookie
  00122	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  00129	5f		 pop	 rdi
  0012a	c3		 ret	 0
process_TF02326 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
cpuad$ = 80
tv159 = 88
tv141 = 96
tv152 = 104
tv162 = 112
tv166 = 120
tim$ = 128
__$ArrayPad$ = 192
rec$ = 224
process_TF02324 PROC

; 2427 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2428 :     char tim [ 64 ] = {0};  // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR tim$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb

; 2429 :     BYTE cpuad;
; 2430 : 
; 2431 :     /* (just a more covenient shorter variable name) */
; 2432 :     cpuad = (BYTE) rec->rhdr.cpuad;

  00033	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0003b	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  0003f	88 44 24 50	 mov	 BYTE PTR cpuad$[rsp], al

; 2433 : 
; 2434 :     /* Perform storage address filtering if requested */
; 2435 :     if (nStorMOPT)

  00043	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR nStorMOPT, 0
  0004a	74 76		 je	 SHORT $LN2@process_TF

; 2436 :     {
; 2437 :         if (0
; 2438 :             || !(all_recs[ cpuad ].gotmask & GOT_TF02326)
; 2439 :             || !is_wanted_tf02326( &all_recs[ cpuad ].tf02326 )

  0004c	33 c0		 xor	 eax, eax
  0004e	85 c0		 test	 eax, eax
  00050	75 4d		 jne	 SHORT $LN4@process_TF
  00052	0f b6 44 24 50	 movzx	 eax, BYTE PTR cpuad$[rsp]
  00057	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  00065	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  0006c	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00071	85 c0		 test	 eax, eax
  00073	74 2a		 je	 SHORT $LN4@process_TF
  00075	0f b6 44 24 50	 movzx	 eax, BYTE PTR cpuad$[rsp]
  0007a	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  00088	48 8d 84 01 48
	05 00 00	 lea	 rax, QWORD PTR [rcx+rax+1352]
  00090	48 8b c8	 mov	 rcx, rax
  00093	e8 00 00 00 00	 call	 is_wanted_tf02326
  00098	0f b6 c0	 movzx	 eax, al
  0009b	85 c0		 test	 eax, eax
  0009d	75 23		 jne	 SHORT $LN3@process_TF
$LN4@process_TF:

; 2440 :         )
; 2441 :         {
; 2442 :             /* Reset *all* GOT flags and return */
; 2443 :             all_recs[ cpuad ].gotmask = 0;

  0009f	0f b6 44 24 50	 movzx	 eax, BYTE PTR cpuad$[rsp]
  000a4	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  000b2	c7 84 01 00 26
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax+9728], 0

; 2444 :             return; // (not interested in this trace record)

  000bd	e9 40 02 00 00	 jmp	 $LN1@process_TF
$LN3@process_TF:
$LN2@process_TF:

; 2445 :         }
; 2446 :     }
; 2447 : 
; 2448 :     /* Perform opcode filtering if requested */
; 2449 :     if (nInstMOPT)

  000c2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR nInstMOPT, 0
  000c9	74 48		 je	 SHORT $LN5@process_TF

; 2450 :     {
; 2451 :         if (!is_wanted_opcode( &rec->inst[0] ))

  000cb	b8 01 00 00 00	 mov	 eax, 1
  000d0	48 6b c0 00	 imul	 rax, rax, 0
  000d4	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000dc	48 8d 44 01 48	 lea	 rax, QWORD PTR [rcx+rax+72]
  000e1	48 8b c8	 mov	 rcx, rax
  000e4	e8 00 00 00 00	 call	 is_wanted_opcode
  000e9	0f b6 c0	 movzx	 eax, al
  000ec	85 c0		 test	 eax, eax
  000ee	75 23		 jne	 SHORT $LN6@process_TF

; 2452 :         {
; 2453 :             /* Reset *all* GOT flags and return */
; 2454 :             all_recs[ cpuad ].gotmask = 0;

  000f0	0f b6 44 24 50	 movzx	 eax, BYTE PTR cpuad$[rsp]
  000f5	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  000fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  00103	c7 84 01 00 26
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax+9728], 0

; 2455 :             return; // (not interested in this trace record)

  0010e	e9 ef 01 00 00	 jmp	 $LN1@process_TF
$LN6@process_TF:
$LN5@process_TF:

; 2456 :         }
; 2457 :     }
; 2458 : 
; 2459 :     /* Count instruction records printed */
; 2460 :     ++totins;

  00113	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR totins
  0011a	48 ff c0	 inc	 rax
  0011d	48 89 05 00 00
	00 00		 mov	 QWORD PTR totins, rax

; 2461 : 
; 2462 :     /* Update previous values */
; 2463 :     prvcpuad  = rec->rhdr.cpuad;

  00124	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0012c	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00130	66 89 05 00 00
	00 00		 mov	 WORD PTR prvcpuad, ax

; 2464 :     prvdevnum = rec->rhdr.devnum;

  00137	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0013f	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  00143	66 89 05 00 00
	00 00		 mov	 WORD PTR prvdevnum, ax

; 2465 : 
; 2466 :     /* Print a blank line before printing each instruction so that
; 2467 :        there is a blank line between each printed instruction.
; 2468 : 
; 2469 :        PLEASE NOTE that we wish to treat each instruction that is
; 2470 :        printed as if it were a single line (even though multiple
; 2471 :        lines are always ptinted for each).
; 2472 :        
; 2473 :        Thus the "print_all_available_regs" function prints the blank
; 2474 :        line for us before it prints the registers, but only does so
; 2475 :        if the REGSFIRST option was specified. Otherwise it doesn't,
; 2476 :        so we need to do it ourselves here before printing the actual
; 2477 :        instruction line.
; 2478 :     */
; 2479 :     /* Print the registers line(s) if appropriate... */
; 2480 :     if (regsfirst && !noregs)              // (REGSFIRST?)

  0014a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR regsfirst
  00151	85 c0		 test	 eax, eax
  00153	74 17		 je	 SHORT $LN7@process_TF
  00155	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR noregs
  0015c	85 c0		 test	 eax, eax
  0015e	75 0c		 jne	 SHORT $LN7@process_TF

; 2481 :         print_all_available_regs( cpuad ); // (also prints blank line)

  00160	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR cpuad$[rsp]
  00165	e8 00 00 00 00	 call	 print_all_available_regs
  0016a	eb 0c		 jmp	 SHORT $LN8@process_TF
$LN7@process_TF:

; 2482 :     else
; 2483 :         printf("\n");                      // (blank line before inst)

  0016c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160794
  00173	e8 00 00 00 00	 call	 printf
$LN8@process_TF:

; 2484 : 
; 2485 :     /* Print the HHC02324 PSW and INST line... */
; 2486 :     FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  00178	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00180	48 83 c0 08	 add	 rax, 8
  00184	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0018a	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR tim$[rsp]
  00192	48 8b c8	 mov	 rcx, rax
  00195	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 2487 :     FLOGMSG( stdout, "%s HHC02324I %s: %s %s\n",

  0019b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  001a3	48 83 c0 48	 add	 rax, 72			; 00000048H
  001a7	48 8b d0	 mov	 rdx, rax
  001aa	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  001b2	0f b6 48 10	 movzx	 ecx, BYTE PTR [rax+16]
  001b6	e8 00 00 00 00	 call	 fmt_inst_name
  001bb	48 89 44 24 60	 mov	 QWORD PTR tv141[rsp], rax
  001c0	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  001c8	48 83 c1 48	 add	 rcx, 72			; 00000048H
  001cc	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  001d4	48 83 c2 18	 add	 rdx, 24
  001d8	48 89 54 24 58	 mov	 QWORD PTR tv159[rsp], rdx
  001dd	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  001e5	44 0f b6 4f 44	 movzx	 r9d, BYTE PTR [rdi+68]
  001ea	4c 8b c1	 mov	 r8, rcx
  001ed	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  001f5	0f b6 51 10	 movzx	 edx, BYTE PTR [rcx+16]
  001f9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv159[rsp]
  001fe	e8 00 00 00 00	 call	 fmt_psw_inst_str
  00203	48 89 44 24 68	 mov	 QWORD PTR tv152[rsp], rax
  00208	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR cpuad$[rsp]
  0020d	e8 00 00 00 00	 call	 ptyp_str
  00212	48 89 44 24 70	 mov	 QWORD PTR tv162[rsp], rax
  00217	b9 01 00 00 00	 mov	 ecx, 1
  0021c	48 6b c9 0b	 imul	 rcx, rcx, 11
  00220	48 8d 8c 0c 80
	00 00 00	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  00228	48 89 4c 24 78	 mov	 QWORD PTR tv166[rsp], rcx
  0022d	b9 01 00 00 00	 mov	 ecx, 1
  00232	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00238	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv141[rsp]
  0023d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00242	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv152[rsp]
  00247	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0024c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv162[rsp]
  00251	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00256	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv166[rsp]
  0025b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00260	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160795
  00267	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0026c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00271	41 b9 03 00 00
	00		 mov	 r9d, 3
  00277	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160796
  0027e	ba bc 09 00 00	 mov	 edx, 2492		; 000009bcH
  00283	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160797
  0028a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2488 :         &tim[ 11 ],
; 2489 :         ptyp_str( cpuad ),
; 2490 :         fmt_psw_inst_str( &rec->psw, rec->rhdr.arch_mode, rec->inst, rec->ilc ),
; 2491 :         fmt_inst_name( rec->rhdr.arch_mode, rec->inst )
; 2492 :     );
; 2493 : 
; 2494 :     /* Print the HHC02326 operand storage line(s)... */
; 2495 :     if (all_recs[ cpuad ].gotmask & GOT_TF02326)

  00290	0f b6 44 24 50	 movzx	 eax, BYTE PTR cpuad$[rsp]
  00295	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  0029c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  002a3	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  002aa	25 00 02 00 00	 and	 eax, 512		; 00000200H
  002af	85 c0		 test	 eax, eax
  002b1	74 0a		 je	 SHORT $LN9@process_TF

; 2496 :         print_storage_lines( cpuad );

  002b3	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR cpuad$[rsp]
  002b8	e8 00 00 00 00	 call	 print_storage_lines
$LN9@process_TF:

; 2497 : 
; 2498 :     /* Print the registers line(s) if appropriate... */
; 2499 :     if (!regsfirst && !noregs)

  002bd	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR regsfirst
  002c4	85 c0		 test	 eax, eax
  002c6	75 15		 jne	 SHORT $LN10@process_TF
  002c8	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR noregs
  002cf	85 c0		 test	 eax, eax
  002d1	75 0a		 jne	 SHORT $LN10@process_TF

; 2500 :         print_all_available_regs( cpuad );

  002d3	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR cpuad$[rsp]
  002d8	e8 00 00 00 00	 call	 print_all_available_regs
$LN10@process_TF:

; 2501 : 
; 2502 :     /* Remember we printed an instruction */
; 2503 :     previnst = true;

  002dd	c6 05 00 00 00
	00 01		 mov	 BYTE PTR previnst, 1

; 2504 : 
; 2505 :     /* Reset *all* GOT flags and return */
; 2506 :     all_recs[ cpuad ].gotmask = 0;

  002e4	0f b6 44 24 50	 movzx	 eax, BYTE PTR cpuad$[rsp]
  002e9	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  002f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  002f7	c7 84 01 00 26
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax+9728], 0
$LN1@process_TF:

; 2507 : }

  00302	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0030a	48 33 cc	 xor	 rcx, rsp
  0030d	e8 00 00 00 00	 call	 __security_check_cookie
  00312	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  00319	5f		 pop	 rdi
  0031a	c3		 ret	 0
process_TF02324 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv84 = 64
tim$1 = 80
buf$2 = 144
__$ArrayPad$ = 208
rec$ = 240
process_TF02269 PROC

; 2403 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2404 :     if (rec->ifetch_error)

  0001f	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00027	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  0002b	85 c0		 test	 eax, eax
  0002d	0f 84 5b 01 00
	00		 je	 $LN2@process_TF

; 2405 :     {
; 2406 :         char tim [ 64 ] = {0};  // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  00033	48 8d 44 24 50	 lea	 rax, QWORD PTR tim$1[rsp]
  00038	48 8b f8	 mov	 rdi, rax
  0003b	33 c0		 xor	 eax, eax
  0003d	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00042	f3 aa		 rep stosb

; 2407 :         char buf [ 64 ] = {0};  // "16:22:47.745999 HHC02269I SIE:"

  00044	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR buf$2[rsp]
  0004c	48 8b f8	 mov	 rdi, rax
  0004f	33 c0		 xor	 eax, eax
  00051	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00056	f3 aa		 rep stosb

; 2408 : 
; 2409 :         print_gr_regs( rec );     // print general purpose registers

  00058	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00060	e8 00 00 00 00	 call	 print_gr_regs

; 2410 : 
; 2411 :         // Display "Instruction Fetch Error" message
; 2412 :         FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  00065	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0006d	48 83 c0 08	 add	 rax, 8
  00071	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00077	48 8d 54 24 50	 lea	 rdx, QWORD PTR tim$1[rsp]
  0007c	48 8b c8	 mov	 rcx, rax
  0007f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 2413 :         MSGBUF( buf, "%s HHC02269E %s", &tim[ 11 ], rec->sie ? "SIE: " : "" );

  00085	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0008d	0f b6 40 19	 movzx	 eax, BYTE PTR [rax+25]
  00091	85 c0		 test	 eax, eax
  00093	74 0e		 je	 SHORT $LN4@process_TF
  00095	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160773
  0009c	48 89 44 24 40	 mov	 QWORD PTR tv84[rsp], rax
  000a1	eb 0c		 jmp	 SHORT $LN5@process_TF
$LN4@process_TF:
  000a3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160774
  000aa	48 89 44 24 40	 mov	 QWORD PTR tv84[rsp], rax
$LN5@process_TF:
  000af	b8 01 00 00 00	 mov	 eax, 1
  000b4	48 6b c0 0b	 imul	 rax, rax, 11
  000b8	48 8d 44 04 50	 lea	 rax, QWORD PTR tim$1[rsp+rax]
  000bd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv84[rsp]
  000c2	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000c7	4c 8b c8	 mov	 r9, rax
  000ca	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160775
  000d1	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000d6	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$2[rsp]
  000de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2414 :         tf_do_blank_sep( &rec->rhdr );

  000e4	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  000ec	48 8b c8	 mov	 rcx, rax
  000ef	e8 00 00 00 00	 call	 tf_do_blank_sep

; 2415 :         FLOGMSG( stderr, "%s%s\n", buf, "Instruction fetch error" );

  000f4	b9 02 00 00 00	 mov	 ecx, 2
  000f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160776
  00106	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0010b	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$2[rsp]
  00113	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00118	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160777
  0011f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00124	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00129	41 b9 03 00 00
	00		 mov	 r9d, 3
  0012f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160778
  00136	ba 6f 09 00 00	 mov	 edx, 2415		; 0000096fH
  0013b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160779
  00142	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2416 : 
; 2417 :         /* Reset ONLY *our* GOT flag and return */
; 2418 :         all_recs[ rec->rhdr.cpuad ].gotmask &= ~GOT_TF02269;

  00148	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00150	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00154	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  0015b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  00162	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00169	0f ba f0 0f	 btr	 eax, 15
  0016d	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00175	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  00179	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00180	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  00187	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax
$LN2@process_TF:

; 2419 :     }
; 2420 :     // Otherwise do nothing. Regs normally printed by process_TF02324.
; 2421 : }

  0018e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00196	48 33 cc	 xor	 rcx, rsp
  00199	e8 00 00 00 00	 call	 __security_check_cookie
  0019e	48 81 c4 e0 00
	00 00		 add	 rsp, 224		; 000000e0H
  001a5	5f		 pop	 rdi
  001a6	c3		 ret	 0
process_TF02269 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 8
process_TF02270 PROC

; 2394 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
$LN4@process_TF:

; 2395 :     UNREFERENCED( rec );

  00005	33 c0		 xor	 eax, eax
  00007	85 c0		 test	 eax, eax
  00009	75 fa		 jne	 SHORT $LN4@process_TF

; 2396 :     // Do nothing. Regs are printed by process_TF02324.
; 2397 : }

  0000b	c3		 ret	 0
process_TF02270 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 8
process_TF02276 PROC

; 2385 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
$LN4@process_TF:

; 2386 :     UNREFERENCED( rec );

  00005	33 c0		 xor	 eax, eax
  00007	85 c0		 test	 eax, eax
  00009	75 fa		 jne	 SHORT $LN4@process_TF

; 2387 :     // Do nothing. Regs are printed by process_TF02324.
; 2388 : }

  0000b	c3		 ret	 0
process_TF02276 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 8
process_TF02272 PROC

; 2376 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
$LN4@process_TF:

; 2377 :     UNREFERENCED( rec );

  00005	33 c0		 xor	 eax, eax
  00007	85 c0		 test	 eax, eax
  00009	75 fa		 jne	 SHORT $LN4@process_TF

; 2378 :     // Do nothing. Regs are printed by process_TF02324.
; 2379 : }

  0000b	c3		 ret	 0
process_TF02272 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 8
process_TF02271 PROC

; 2367 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
$LN4@process_TF:

; 2368 :     UNREFERENCED( rec );

  00005	33 c0		 xor	 eax, eax
  00007	85 c0		 test	 eax, eax
  00009	75 fa		 jne	 SHORT $LN4@process_TF

; 2369 :     // Do nothing. Regs are printed by process_TF02324.
; 2370 : }

  0000b	c3		 ret	 0
process_TF02271 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00846 PROC

; 2356 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2357 :     print_846_srvsig_ext_rupt( rec );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0000e	e8 00 00 00 00	 call	 print_846_srvsig_ext_rupt

; 2358 : 
; 2359 :     /* Reset ONLY *our* GOT flag and return */
; 2360 :     all_recs[ rec->rhdr.cpuad ].gotmask &= ~GOT_TF00846;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  00018	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0001c	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0002a	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00031	0f ba f0 10	 btr	 eax, 16
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0003a	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  0003e	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  0004c	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax

; 2361 : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
process_TF00846 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00845 PROC

; 2345 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2346 :     print_845_blkio_ext_rupt( rec );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0000e	e8 00 00 00 00	 call	 print_845_blkio_ext_rupt

; 2347 : 
; 2348 :     /* Reset ONLY *our* GOT flag and return */
; 2349 :     all_recs[ rec->rhdr.cpuad ].gotmask &= ~GOT_TF00845;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  00018	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0001c	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0002a	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00031	0f ba f0 11	 btr	 eax, 17
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0003a	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  0003e	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  0004c	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax

; 2350 : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
process_TF00845 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00844 PROC

; 2334 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2335 :     print_844_blkio_rupt( rec );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0000e	e8 00 00 00 00	 call	 print_844_blkio_rupt

; 2336 : 
; 2337 :     /* Reset ONLY *our* GOT flag and return */
; 2338 :     all_recs[ rec->rhdr.cpuad ].gotmask &= ~GOT_TF00844;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  00018	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0001c	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0002a	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00031	0f ba f0 12	 btr	 eax, 18
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0003a	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  0003e	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  0004c	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax

; 2339 : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
process_TF00844 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00840 PROC

; 2323 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2324 :     print_840_ext_rupt( rec );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0000e	e8 00 00 00 00	 call	 print_840_ext_rupt

; 2325 : 
; 2326 :     /* Reset ONLY *our* GOT flag and return */
; 2327 :     all_recs[ rec->rhdr.cpuad ].gotmask &= ~GOT_TF00840;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  00018	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0001c	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0002a	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00031	0f ba f0 13	 btr	 eax, 19
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0003a	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  0003e	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  0004c	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax

; 2328 : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
process_TF00840 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00814 PROC

; 2312 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2313 :     print_814_sigp( rec );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0000e	e8 00 00 00 00	 call	 print_814_sigp

; 2314 : 
; 2315 :     /* Reset ONLY *our* GOT flag and return */
; 2316 :     all_recs[ rec->rhdr.cpuad ].gotmask &= ~GOT_TF00814;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  00018	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0001c	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0002a	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00031	0f ba f0 14	 btr	 eax, 20
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0003a	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  0003e	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  0004c	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax

; 2317 : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
process_TF00814 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00812 PROC

; 2301 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2302 :     print_812_vect_online_370( rec );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0000e	e8 00 00 00 00	 call	 print_812_vect_online_370

; 2303 : 
; 2304 :     /* Reset ONLY *our* GOT flag and return */
; 2305 :     all_recs[ rec->rhdr.cpuad ].gotmask &= ~GOT_TF00812;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  00018	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0001c	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0002a	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00031	0f ba f0 15	 btr	 eax, 21
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0003a	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  0003e	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  0004c	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax

; 2306 : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
process_TF00812 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00811 PROC

; 2290 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2291 :     print_811_arch_mode( rec );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0000e	e8 00 00 00 00	 call	 print_811_arch_mode

; 2292 : 
; 2293 :     /* Reset ONLY *our* GOT flag and return */
; 2294 :     all_recs[ rec->rhdr.cpuad ].gotmask &= ~GOT_TF00811;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  00018	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0001c	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0002a	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00031	0f ba f0 16	 btr	 eax, 22
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0003a	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  0003e	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  0004c	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax

; 2295 : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
process_TF00811 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00809 PROC

; 2279 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2280 :     print_809_disabled_wait( rec );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0000e	e8 00 00 00 00	 call	 print_809_disabled_wait

; 2281 : 
; 2282 :     /* Reset ONLY *our* GOT flag and return */
; 2283 :     all_recs[ rec->rhdr.cpuad ].gotmask &= ~GOT_TF00809;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  00018	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0001c	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0002a	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00031	0f ba f0 17	 btr	 eax, 23
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0003a	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  0003e	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  0004c	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax

; 2284 : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
process_TF00809 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00808 PROC

; 2268 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2269 :     print_808_store_status( rec );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0000e	e8 00 00 00 00	 call	 print_808_store_status

; 2270 : 
; 2271 :     /* Reset ONLY *our* GOT flag and return */
; 2272 :     all_recs[ rec->rhdr.cpuad ].gotmask &= ~GOT_TF00808;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  00018	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0001c	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0002a	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00031	0f ba f0 18	 btr	 eax, 24
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0003a	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  0003e	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  0004c	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax

; 2273 : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
process_TF00808 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00807 PROC

; 2257 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2258 :     print_807_machine_check_interrupt( rec );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0000e	e8 00 00 00 00	 call	 print_807_machine_check_interrupt

; 2259 : 
; 2260 :     /* Reset ONLY *our* GOT flag and return */
; 2261 :     all_recs[ rec->rhdr.cpuad ].gotmask &= ~GOT_TF00807;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  00018	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0001c	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0002a	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00031	0f ba f0 19	 btr	 eax, 25
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0003a	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  0003e	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  0004c	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax

; 2262 : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
process_TF00807 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00806 PROC

; 2246 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2247 :     print_806_io_rupt( rec );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0000e	e8 00 00 00 00	 call	 print_806_io_rupt

; 2248 : 
; 2249 :     /* Reset ONLY *our* GOT flag and return */
; 2250 :     all_recs[ rec->rhdr.cpuad ].gotmask &= ~GOT_TF00806;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  00018	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0001c	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0002a	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00031	0f ba f0 1a	 btr	 eax, 26
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0003a	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  0003e	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  0004c	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax

; 2251 : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
process_TF00806 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00804 PROC

; 2235 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2236 :     print_804_io_rupt_370( rec );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0000e	e8 00 00 00 00	 call	 print_804_io_rupt_370

; 2237 : 
; 2238 :     /* Reset ONLY *our* GOT flag and return */
; 2239 :     all_recs[ rec->rhdr.cpuad ].gotmask &= ~GOT_TF00804;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  00018	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0001c	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0002a	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00031	0f ba f0 1b	 btr	 eax, 27
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0003a	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  0003e	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  0004c	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax

; 2240 : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
process_TF00804 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00803 PROC

; 2224 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2225 :     print_803_pgm_int_loop( rec );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0000e	e8 00 00 00 00	 call	 print_803_pgm_int_loop

; 2226 : 
; 2227 :     /* Reset ONLY *our* GOT flag and return */
; 2228 :     all_recs[ rec->rhdr.cpuad ].gotmask &= ~GOT_TF00803;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  00018	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0001c	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0002a	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00031	0f ba f0 1c	 btr	 eax, 28
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0003a	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  0003e	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  0004c	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax

; 2229 : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
process_TF00803 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00802 PROC

; 2213 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2214 :     print_802_per_event( rec );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0000e	e8 00 00 00 00	 call	 print_802_per_event

; 2215 : 
; 2216 :     /* Reset ONLY *our* GOT flag and return */
; 2217 :     all_recs[ rec->rhdr.cpuad ].gotmask &= ~GOT_TF00802;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  00018	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0001c	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0002a	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00031	0f ba f0 1d	 btr	 eax, 29
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0003a	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  0003e	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  0004c	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax

; 2218 : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
process_TF00802 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00801 PROC

; 2202 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2203 :     print_801_program_interrupt( rec );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0000e	e8 00 00 00 00	 call	 print_801_program_interrupt

; 2204 : 
; 2205 :     /* Reset ONLY *our* GOT flag and return */
; 2206 :     all_recs[ rec->rhdr.cpuad ].gotmask &= ~GOT_TF00801;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  00018	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0001c	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0002a	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00031	0f ba f0 1e	 btr	 eax, 30
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0003a	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  0003e	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  0004c	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax

; 2207 : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
process_TF00801 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
process_TF00800 PROC

; 2191 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2192 :     print_800_wait_state_psw( rec );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0000e	e8 00 00 00 00	 call	 print_800_wait_state_psw

; 2193 : 
; 2194 :     /* Reset ONLY *our* GOT flag and return */
; 2195 :     all_recs[ rec->rhdr.cpuad ].gotmask &= ~GOT_TF00800;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  00018	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0001c	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0002a	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00031	0f ba f0 1f	 btr	 eax, 31
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rec$[rsp]
  0003a	0f b7 49 04	 movzx	 ecx, WORD PTR [rcx+4]
  0003e	48 69 c9 04 26
	00 00		 imul	 rcx, rcx, 9732		; 00002604H
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:all_recs
  0004c	89 84 0a 00 26
	00 00		 mov	 DWORD PTR [rdx+rcx+9728], eax

; 2196 : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
process_TF00800 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 96
tv78 = 100
tv81 = 104
tv87 = 112
timstr$ = 128
__$ArrayPad$ = 192
rec$ = 224
print_TF01336 PROC

; 2178 : PRINT_DEV_FUNC( 1336 ), rec->busy, rec->startpending ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb
  00033	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0003b	48 83 c0 08	 add	 rax, 8
  0003f	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00045	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  0004d	48 8b c8	 mov	 rcx, rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00056	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00066	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0006e	0f b6 40 19	 movzx	 eax, BYTE PTR [rax+25]
  00072	89 44 24 60	 mov	 DWORD PTR tv75[rsp], eax
  00076	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0007e	0f b6 49 18	 movzx	 ecx, BYTE PTR [rcx+24]
  00082	89 4c 24 64	 mov	 DWORD PTR tv78[rsp], ecx
  00086	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  0008e	0f b7 52 12	 movzx	 edx, WORD PTR [rdx+18]
  00092	89 54 24 68	 mov	 DWORD PTR tv81[rsp], edx
  00096	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  0009e	0f b6 7f 11	 movzx	 edi, BYTE PTR [rdi+17]
  000a2	41 b8 01 00 00
	00		 mov	 r8d, 1
  000a8	4d 6b c0 0b	 imul	 r8, r8, 11
  000ac	4e 8d 84 04 80
	00 00 00	 lea	 r8, QWORD PTR timstr$[rsp+r8]
  000b4	4c 89 44 24 70	 mov	 QWORD PTR tv87[rsp], r8
  000b9	b9 01 00 00 00	 mov	 ecx, 1
  000be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000c4	8b 4c 24 60	 mov	 ecx, DWORD PTR tv75[rsp]
  000c8	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000cc	8b 4c 24 64	 mov	 ecx, DWORD PTR tv78[rsp]
  000d0	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  000d4	8b 4c 24 68	 mov	 ecx, DWORD PTR tv81[rsp]
  000d8	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000dc	89 7c 24 38	 mov	 DWORD PTR [rsp+56], edi
  000e0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv87[rsp]
  000e5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160671
  000f1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000fb	41 b9 03 00 00
	00		 mov	 r9d, 3
  00101	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160672
  00108	ba 82 08 00 00	 mov	 edx, 2178		; 00000882H
  0010d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160673
  00114	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0011a	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00122	48 33 cc	 xor	 rcx, rsp
  00125	e8 00 00 00 00	 call	 __security_check_cookie
  0012a	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  00131	5f		 pop	 rdi
  00132	c3		 ret	 0
print_TF01336 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv84 = 80
tv87 = 84
tv90 = 88
timstr$ = 96
msgbuf$ = 160
__$ArrayPad$ = 288
rec$ = 320
print_TF01334 PROC

; 2163 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2164 :     char timstr[ 64] = {0};    // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb

; 2165 :     char msgbuf[128] = {0};

  00030	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR msgbuf$[rsp]
  00038	48 8b f8	 mov	 rdi, rax
  0003b	33 c0		 xor	 eax, eax
  0003d	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00042	f3 aa		 rep stosb

; 2166 : 
; 2167 :     FormatTIMEVAL( &rec->rhdr.tod, timstr, sizeof( timstr ));

  00044	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0004c	48 83 c0 08	 add	 rax, 8
  00050	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00056	48 8d 54 24 60	 lea	 rdx, QWORD PTR timstr$[rsp]
  0005b	48 8b c8	 mov	 rcx, rax
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 2168 :     FormatORB( &rec->orb, msgbuf, sizeof( msgbuf ));

  00064	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0006c	48 83 c0 18	 add	 rax, 24
  00070	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  00076	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR msgbuf$[rsp]
  0007e	48 8b c8	 mov	 rcx, rax
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatORB

; 2169 : 
; 2170 :     // "%1d:%04X CHAN: ORB: %s"
; 2171 :     TF_DEV_FLOGMSG( 1334 ),

  00087	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0008f	48 8b c8	 mov	 rcx, rax
  00092	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00097	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0009f	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  000a3	89 44 24 50	 mov	 DWORD PTR tv84[rsp], eax
  000a7	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000af	0f b6 49 11	 movzx	 ecx, BYTE PTR [rcx+17]
  000b3	89 4c 24 54	 mov	 DWORD PTR tv87[rsp], ecx
  000b7	ba 01 00 00 00	 mov	 edx, 1
  000bc	48 6b d2 0b	 imul	 rdx, rdx, 11
  000c0	48 8d 54 14 60	 lea	 rdx, QWORD PTR timstr$[rsp+rdx]
  000c5	48 89 54 24 58	 mov	 QWORD PTR tv90[rsp], rdx
  000ca	b9 01 00 00 00	 mov	 ecx, 1
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000d5	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  000dd	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000e2	8b 4c 24 50	 mov	 ecx, DWORD PTR tv84[rsp]
  000e6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000ea	8b 4c 24 54	 mov	 ecx, DWORD PTR tv87[rsp]
  000ee	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000f2	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv90[rsp]
  000f7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160663
  00103	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00108	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0010d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00113	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160664
  0011a	ba 7c 08 00 00	 mov	 edx, 2172		; 0000087cH
  0011f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160665
  00126	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2172 :         rec->rhdr.lcss, rec->rhdr.devnum, msgbuf );
; 2173 : 
; 2174 :     ++totios;  // (count total device I/Os printed)

  0012c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR totios
  00133	48 ff c0	 inc	 rax
  00136	48 89 05 00 00
	00 00		 mov	 QWORD PTR totios, rax

; 2175 : }

  0013d	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00145	48 33 cc	 xor	 rcx, rsp
  00148	e8 00 00 00 00	 call	 __security_check_cookie
  0014d	48 81 c4 30 01
	00 00		 add	 rsp, 304		; 00000130H
  00154	5f		 pop	 rdi
  00155	c3		 ret	 0
print_TF01334 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 80
tv78 = 84
tv81 = 88
timstr$ = 96
__$ArrayPad$ = 160
rec$ = 192
print_TF01333 PROC

; 2157 : PRINT_DEV_FUNC( 1333 ), rec->cc ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 60	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  0006c	89 44 24 50	 mov	 DWORD PTR tv75[rsp], eax
  00070	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00078	0f b7 49 12	 movzx	 ecx, WORD PTR [rcx+18]
  0007c	89 4c 24 54	 mov	 DWORD PTR tv78[rsp], ecx
  00080	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00088	0f b6 52 11	 movzx	 edx, BYTE PTR [rdx+17]
  0008c	89 54 24 58	 mov	 DWORD PTR tv81[rsp], edx
  00090	bf 01 00 00 00	 mov	 edi, 1
  00095	48 6b ff 0b	 imul	 rdi, rdi, 11
  00099	48 8d 7c 3c 60	 lea	 rdi, QWORD PTR timstr$[rsp+rdi]
  0009e	b9 01 00 00 00	 mov	 ecx, 1
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a9	8b 4c 24 50	 mov	 ecx, DWORD PTR tv75[rsp]
  000ad	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  000b1	8b 4c 24 54	 mov	 ecx, DWORD PTR tv78[rsp]
  000b5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000b9	8b 4c 24 58	 mov	 ecx, DWORD PTR tv81[rsp]
  000bd	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000c1	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  000c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160654
  000cd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000d2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d7	41 b9 03 00 00
	00		 mov	 r9d, 3
  000dd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160655
  000e4	ba 6d 08 00 00	 mov	 edx, 2157		; 0000086dH
  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160656
  000f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  000f6	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000fe	48 33 cc	 xor	 rcx, rsp
  00101	e8 00 00 00 00	 call	 __security_check_cookie
  00106	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  0010d	5f		 pop	 rdi
  0010e	c3		 ret	 0
print_TF01333 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 80
tv78 = 84
tv81 = 88
timstr$ = 96
__$ArrayPad$ = 160
rec$ = 192
print_TF01332 PROC

; 2154 : PRINT_DEV_FUNC( 1332 )); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 60	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  0006c	89 44 24 50	 mov	 DWORD PTR tv75[rsp], eax
  00070	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00078	0f b6 49 11	 movzx	 ecx, BYTE PTR [rcx+17]
  0007c	89 4c 24 54	 mov	 DWORD PTR tv78[rsp], ecx
  00080	ba 01 00 00 00	 mov	 edx, 1
  00085	48 6b d2 0b	 imul	 rdx, rdx, 11
  00089	48 8d 54 14 60	 lea	 rdx, QWORD PTR timstr$[rsp+rdx]
  0008e	48 89 54 24 58	 mov	 QWORD PTR tv81[rsp], rdx
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009e	8b 4c 24 50	 mov	 ecx, DWORD PTR tv75[rsp]
  000a2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000a6	8b 4c 24 54	 mov	 ecx, DWORD PTR tv78[rsp]
  000aa	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000ae	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv81[rsp]
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160646
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160647
  000d6	ba 6a 08 00 00	 mov	 edx, 2154		; 0000086aH
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160648
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  000e8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f0	48 33 cc	 xor	 rcx, rsp
  000f3	e8 00 00 00 00	 call	 __security_check_cookie
  000f8	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
print_TF01332 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 80
tv78 = 84
tv81 = 88
timstr$ = 96
__$ArrayPad$ = 160
rec$ = 192
print_TF01331 PROC

; 2151 : PRINT_DEV_FUNC( 1331 )); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 60	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  0006c	89 44 24 50	 mov	 DWORD PTR tv75[rsp], eax
  00070	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00078	0f b6 49 11	 movzx	 ecx, BYTE PTR [rcx+17]
  0007c	89 4c 24 54	 mov	 DWORD PTR tv78[rsp], ecx
  00080	ba 01 00 00 00	 mov	 edx, 1
  00085	48 6b d2 0b	 imul	 rdx, rdx, 11
  00089	48 8d 54 14 60	 lea	 rdx, QWORD PTR timstr$[rsp+rdx]
  0008e	48 89 54 24 58	 mov	 QWORD PTR tv81[rsp], rdx
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009e	8b 4c 24 50	 mov	 ecx, DWORD PTR tv75[rsp]
  000a2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000a6	8b 4c 24 54	 mov	 ecx, DWORD PTR tv78[rsp]
  000aa	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000ae	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv81[rsp]
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160638
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160639
  000d6	ba 67 08 00 00	 mov	 edx, 2151		; 00000867H
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160640
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  000e8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f0	48 33 cc	 xor	 rcx, rsp
  000f3	e8 00 00 00 00	 call	 __security_check_cookie
  000f8	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
print_TF01331 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 80
tv78 = 84
tv81 = 88
timstr$ = 96
__$ArrayPad$ = 160
rec$ = 192
print_TF01330 PROC

; 2148 : PRINT_DEV_FUNC( 1330 )); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 60	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  0006c	89 44 24 50	 mov	 DWORD PTR tv75[rsp], eax
  00070	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00078	0f b6 49 11	 movzx	 ecx, BYTE PTR [rcx+17]
  0007c	89 4c 24 54	 mov	 DWORD PTR tv78[rsp], ecx
  00080	ba 01 00 00 00	 mov	 edx, 1
  00085	48 6b d2 0b	 imul	 rdx, rdx, 11
  00089	48 8d 54 14 60	 lea	 rdx, QWORD PTR timstr$[rsp+rdx]
  0008e	48 89 54 24 58	 mov	 QWORD PTR tv81[rsp], rdx
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009e	8b 4c 24 50	 mov	 ecx, DWORD PTR tv75[rsp]
  000a2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000a6	8b 4c 24 54	 mov	 ecx, DWORD PTR tv78[rsp]
  000aa	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000ae	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv81[rsp]
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160630
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160631
  000d6	ba 64 08 00 00	 mov	 edx, 2148		; 00000864H
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160632
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  000e8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f0	48 33 cc	 xor	 rcx, rsp
  000f3	e8 00 00 00 00	 call	 __security_check_cookie
  000f8	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
print_TF01330 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 80
tv78 = 84
tv81 = 88
timstr$ = 96
__$ArrayPad$ = 160
rec$ = 192
print_TF01329 PROC

; 2145 : PRINT_DEV_FUNC( 1329 )); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 60	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  0006c	89 44 24 50	 mov	 DWORD PTR tv75[rsp], eax
  00070	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00078	0f b6 49 11	 movzx	 ecx, BYTE PTR [rcx+17]
  0007c	89 4c 24 54	 mov	 DWORD PTR tv78[rsp], ecx
  00080	ba 01 00 00 00	 mov	 edx, 1
  00085	48 6b d2 0b	 imul	 rdx, rdx, 11
  00089	48 8d 54 14 60	 lea	 rdx, QWORD PTR timstr$[rsp+rdx]
  0008e	48 89 54 24 58	 mov	 QWORD PTR tv81[rsp], rdx
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009e	8b 4c 24 50	 mov	 ecx, DWORD PTR tv75[rsp]
  000a2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000a6	8b 4c 24 54	 mov	 ecx, DWORD PTR tv78[rsp]
  000aa	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000ae	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv81[rsp]
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160622
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160623
  000d6	ba 61 08 00 00	 mov	 edx, 2145		; 00000861H
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160624
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  000e8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f0	48 33 cc	 xor	 rcx, rsp
  000f3	e8 00 00 00 00	 call	 __security_check_cookie
  000f8	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
print_TF01329 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 80
tv78 = 84
tv81 = 88
timstr$ = 96
__$ArrayPad$ = 160
rec$ = 192
print_TF01321 PROC

; 2142 : PRINT_DEV_FUNC( 1321 )); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 60	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  0006c	89 44 24 50	 mov	 DWORD PTR tv75[rsp], eax
  00070	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00078	0f b6 49 11	 movzx	 ecx, BYTE PTR [rcx+17]
  0007c	89 4c 24 54	 mov	 DWORD PTR tv78[rsp], ecx
  00080	ba 01 00 00 00	 mov	 edx, 1
  00085	48 6b d2 0b	 imul	 rdx, rdx, 11
  00089	48 8d 54 14 60	 lea	 rdx, QWORD PTR timstr$[rsp+rdx]
  0008e	48 89 54 24 58	 mov	 QWORD PTR tv81[rsp], rdx
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009e	8b 4c 24 50	 mov	 ecx, DWORD PTR tv75[rsp]
  000a2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000a6	8b 4c 24 54	 mov	 ecx, DWORD PTR tv78[rsp]
  000aa	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000ae	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv81[rsp]
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160614
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160615
  000d6	ba 5e 08 00 00	 mov	 edx, 2142		; 0000085eH
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160616
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  000e8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f0	48 33 cc	 xor	 rcx, rsp
  000f3	e8 00 00 00 00	 call	 __security_check_cookie
  000f8	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
print_TF01321 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 80
tv78 = 84
tv81 = 88
timstr$ = 96
__$ArrayPad$ = 160
rec$ = 192
print_TF01320 PROC

; 2139 : PRINT_DEV_FUNC( 1320 )); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 60	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  0006c	89 44 24 50	 mov	 DWORD PTR tv75[rsp], eax
  00070	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00078	0f b6 49 11	 movzx	 ecx, BYTE PTR [rcx+17]
  0007c	89 4c 24 54	 mov	 DWORD PTR tv78[rsp], ecx
  00080	ba 01 00 00 00	 mov	 edx, 1
  00085	48 6b d2 0b	 imul	 rdx, rdx, 11
  00089	48 8d 54 14 60	 lea	 rdx, QWORD PTR timstr$[rsp+rdx]
  0008e	48 89 54 24 58	 mov	 QWORD PTR tv81[rsp], rdx
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009e	8b 4c 24 50	 mov	 ecx, DWORD PTR tv75[rsp]
  000a2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000a6	8b 4c 24 54	 mov	 ecx, DWORD PTR tv78[rsp]
  000aa	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000ae	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv81[rsp]
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160606
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160607
  000d6	ba 5b 08 00 00	 mov	 edx, 2139		; 0000085bH
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160608
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  000e8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f0	48 33 cc	 xor	 rcx, rsp
  000f3	e8 00 00 00 00	 call	 __security_check_cookie
  000f8	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
print_TF01320 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 80
tv78 = 84
tv81 = 88
timstr$ = 96
__$ArrayPad$ = 160
rec$ = 192
print_TF01318 PROC

; 2136 : PRINT_DEV_FUNC( 1318 ), rec->cc ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 60	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  0006c	89 44 24 50	 mov	 DWORD PTR tv75[rsp], eax
  00070	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00078	0f b7 49 12	 movzx	 ecx, WORD PTR [rcx+18]
  0007c	89 4c 24 54	 mov	 DWORD PTR tv78[rsp], ecx
  00080	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00088	0f b6 52 11	 movzx	 edx, BYTE PTR [rdx+17]
  0008c	89 54 24 58	 mov	 DWORD PTR tv81[rsp], edx
  00090	bf 01 00 00 00	 mov	 edi, 1
  00095	48 6b ff 0b	 imul	 rdi, rdi, 11
  00099	48 8d 7c 3c 60	 lea	 rdi, QWORD PTR timstr$[rsp+rdi]
  0009e	b9 01 00 00 00	 mov	 ecx, 1
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a9	8b 4c 24 50	 mov	 ecx, DWORD PTR tv75[rsp]
  000ad	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  000b1	8b 4c 24 54	 mov	 ecx, DWORD PTR tv78[rsp]
  000b5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000b9	8b 4c 24 58	 mov	 ecx, DWORD PTR tv81[rsp]
  000bd	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000c1	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  000c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160598
  000cd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000d2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d7	41 b9 03 00 00
	00		 mov	 r9d, 3
  000dd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160599
  000e4	ba 58 08 00 00	 mov	 edx, 2136		; 00000858H
  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160600
  000f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  000f6	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000fe	48 33 cc	 xor	 rcx, rsp
  00101	e8 00 00 00 00	 call	 __security_check_cookie
  00106	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  0010d	5f		 pop	 rdi
  0010e	c3		 ret	 0
print_TF01318 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv77 = 176
tv82 = 180
tv87 = 184
tv129 = 188
tv134 = 192
tv137 = 196
tv140 = 200
timstr$ = 208
__$ArrayPad$ = 272
rec$ = 368
print_TF01317 PROC

; 2130 : PRINT_DEV_FUNC( 1317 ), rec->scsw.flag0, rec->scsw.flag1, rec->scsw.flag2, rec->scsw.flag3

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	53		 push	 rbx
  00006	55		 push	 rbp
  00007	56		 push	 rsi
  00008	57		 push	 rdi
  00009	41 54		 push	 r12
  0000b	41 55		 push	 r13
  0000d	41 56		 push	 r14
  0000f	41 57		 push	 r15
  00011	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0002a	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0003c	f3 aa		 rep stosb
  0003e	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00046	48 83 c0 08	 add	 rax, 8
  0004a	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00050	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00061	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00069	48 8b c8	 mov	 rcx, rax
  0006c	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00071	b8 01 00 00 00	 mov	 eax, 1
  00076	48 6b c0 03	 imul	 rax, rax, 3
  0007a	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00082	0f b6 44 01 1c	 movzx	 eax, BYTE PTR [rcx+rax+28]
  00087	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv77[rsp], eax
  0008e	b9 01 00 00 00	 mov	 ecx, 1
  00093	48 6b c9 02	 imul	 rcx, rcx, 2
  00097	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  0009f	0f b6 4c 0a 1c	 movzx	 ecx, BYTE PTR [rdx+rcx+28]
  000a4	89 8c 24 b4 00
	00 00		 mov	 DWORD PTR tv82[rsp], ecx
  000ab	ba 01 00 00 00	 mov	 edx, 1
  000b0	48 6b d2 01	 imul	 rdx, rdx, 1
  000b4	48 8b bc 24 70
	01 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  000bc	0f b6 54 17 1c	 movzx	 edx, BYTE PTR [rdi+rdx+28]
  000c1	89 94 24 b8 00
	00 00		 mov	 DWORD PTR tv87[rsp], edx
  000c8	bf 01 00 00 00	 mov	 edi, 1
  000cd	48 6b ff 00	 imul	 rdi, rdi, 0
  000d1	4c 8b 84 24 70
	01 00 00	 mov	 r8, QWORD PTR rec$[rsp]
  000d9	41 0f b6 7c 38
	1c		 movzx	 edi, BYTE PTR [r8+rdi+28]
  000df	41 b8 01 00 00
	00		 mov	 r8d, 1
  000e5	4d 6b c0 01	 imul	 r8, r8, 1
  000e9	4c 8b 8c 24 70
	01 00 00	 mov	 r9, QWORD PTR rec$[rsp]
  000f1	47 0f b6 44 01
	22		 movzx	 r8d, BYTE PTR [r9+r8+34]
  000f7	44 89 84 24 bc
	00 00 00	 mov	 DWORD PTR tv129[rsp], r8d
  000ff	41 b9 01 00 00
	00		 mov	 r9d, 1
  00105	4d 6b c9 00	 imul	 r9, r9, 0
  00109	4c 8b 94 24 70
	01 00 00	 mov	 r10, QWORD PTR rec$[rsp]
  00111	47 0f b6 4c 0a
	22		 movzx	 r9d, BYTE PTR [r10+r9+34]
  00117	44 89 8c 24 c0
	00 00 00	 mov	 DWORD PTR tv134[rsp], r9d
  0011f	4c 8b 94 24 70
	01 00 00	 mov	 r10, QWORD PTR rec$[rsp]
  00127	45 0f b6 52 21	 movzx	 r10d, BYTE PTR [r10+33]
  0012c	44 89 94 24 c4
	00 00 00	 mov	 DWORD PTR tv137[rsp], r10d
  00134	4c 8b 9c 24 70
	01 00 00	 mov	 r11, QWORD PTR rec$[rsp]
  0013c	45 0f b6 5b 20	 movzx	 r11d, BYTE PTR [r11+32]
  00141	44 89 9c 24 c8
	00 00 00	 mov	 DWORD PTR tv140[rsp], r11d
  00149	48 8b 9c 24 70
	01 00 00	 mov	 rbx, QWORD PTR rec$[rsp]
  00151	0f b6 5b 1b	 movzx	 ebx, BYTE PTR [rbx+27]
  00155	48 8b b4 24 70
	01 00 00	 mov	 rsi, QWORD PTR rec$[rsp]
  0015d	0f b6 76 1a	 movzx	 esi, BYTE PTR [rsi+26]
  00161	48 8b ac 24 70
	01 00 00	 mov	 rbp, QWORD PTR rec$[rsp]
  00169	0f b6 6d 19	 movzx	 ebp, BYTE PTR [rbp+25]
  0016d	4c 8b b4 24 70
	01 00 00	 mov	 r14, QWORD PTR rec$[rsp]
  00175	45 0f b6 76 18	 movzx	 r14d, BYTE PTR [r14+24]
  0017a	4c 8b bc 24 70
	01 00 00	 mov	 r15, QWORD PTR rec$[rsp]
  00182	45 0f b7 7f 12	 movzx	 r15d, WORD PTR [r15+18]
  00187	4c 8b a4 24 70
	01 00 00	 mov	 r12, QWORD PTR rec$[rsp]
  0018f	45 0f b6 64 24
	11		 movzx	 r12d, BYTE PTR [r12+17]
  00195	41 bd 01 00 00
	00		 mov	 r13d, 1
  0019b	4d 6b ed 0b	 imul	 r13, r13, 11
  0019f	4e 8d ac 2c d0
	00 00 00	 lea	 r13, QWORD PTR timstr$[rsp+r13]
  001a7	b9 01 00 00 00	 mov	 ecx, 1
  001ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001b2	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR tv77[rsp]
  001b9	89 8c 24 a0 00
	00 00		 mov	 DWORD PTR [rsp+160], ecx
  001c0	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv82[rsp]
  001c7	89 8c 24 98 00
	00 00		 mov	 DWORD PTR [rsp+152], ecx
  001ce	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR tv87[rsp]
  001d5	89 8c 24 90 00
	00 00		 mov	 DWORD PTR [rsp+144], ecx
  001dc	89 bc 24 88 00
	00 00		 mov	 DWORD PTR [rsp+136], edi
  001e3	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR tv129[rsp]
  001ea	89 8c 24 80 00
	00 00		 mov	 DWORD PTR [rsp+128], ecx
  001f1	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR tv134[rsp]
  001f8	89 4c 24 78	 mov	 DWORD PTR [rsp+120], ecx
  001fc	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR tv137[rsp]
  00203	89 4c 24 70	 mov	 DWORD PTR [rsp+112], ecx
  00207	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR tv140[rsp]
  0020e	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  00212	89 5c 24 60	 mov	 DWORD PTR [rsp+96], ebx
  00216	89 74 24 58	 mov	 DWORD PTR [rsp+88], esi
  0021a	89 6c 24 50	 mov	 DWORD PTR [rsp+80], ebp
  0021e	44 89 74 24 48	 mov	 DWORD PTR [rsp+72], r14d
  00223	44 89 7c 24 40	 mov	 DWORD PTR [rsp+64], r15d
  00228	44 89 64 24 38	 mov	 DWORD PTR [rsp+56], r12d
  0022d	4c 89 6c 24 30	 mov	 QWORD PTR [rsp+48], r13
  00232	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160590
  00239	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0023e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00243	41 b9 03 00 00
	00		 mov	 r9d, 3
  00249	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160591
  00250	ba 55 08 00 00	 mov	 edx, 2133		; 00000855H
  00255	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160592
  0025c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2131 :         , rec->scsw.unitstat, rec->scsw.chanstat
; 2132 :         , rec->scsw.count[0], rec->scsw.count[1]
; 2133 :         , rec->scsw.ccwaddr[0], rec->scsw.ccwaddr[1], rec->scsw.ccwaddr[2], rec->scsw.ccwaddr[3] ); }

  00262	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0026a	48 33 cc	 xor	 rcx, rsp
  0026d	e8 00 00 00 00	 call	 __security_check_cookie
  00272	48 81 c4 28 01
	00 00		 add	 rsp, 296		; 00000128H
  00279	41 5f		 pop	 r15
  0027b	41 5e		 pop	 r14
  0027d	41 5d		 pop	 r13
  0027f	41 5c		 pop	 r12
  00281	5f		 pop	 rdi
  00282	5e		 pop	 rsi
  00283	5d		 pop	 rbp
  00284	5b		 pop	 rbx
  00285	c3		 ret	 0
print_TF01317 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv77 = 144
tv82 = 148
tv87 = 152
tv129 = 156
tv134 = 160
tv139 = 164
tv147 = 168
timstr$ = 176
__$ArrayPad$ = 240
rec$ = 304
print_TF01316 PROC

; 2124 : PRINT_DEV_FUNC( 1316 ), rec->csw[0]

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	53		 push	 rbx
  00006	55		 push	 rbp
  00007	56		 push	 rsi
  00008	57		 push	 rdi
  00009	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00010	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00017	48 33 c4	 xor	 rax, rsp
  0001a	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00022	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  0002a	48 8b f8	 mov	 rdi, rax
  0002d	33 c0		 xor	 eax, eax
  0002f	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00034	f3 aa		 rep stosb
  00036	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0003e	48 83 c0 08	 add	 rax, 8
  00042	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00048	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  00050	48 8b c8	 mov	 rcx, rax
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00059	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00061	48 8b c8	 mov	 rcx, rax
  00064	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00069	b8 01 00 00 00	 mov	 eax, 1
  0006e	48 6b c0 03	 imul	 rax, rax, 3
  00072	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0007a	0f b6 44 01 18	 movzx	 eax, BYTE PTR [rcx+rax+24]
  0007f	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv77[rsp], eax
  00086	b9 01 00 00 00	 mov	 ecx, 1
  0008b	48 6b c9 02	 imul	 rcx, rcx, 2
  0008f	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00097	0f b6 4c 0a 18	 movzx	 ecx, BYTE PTR [rdx+rcx+24]
  0009c	89 8c 24 94 00
	00 00		 mov	 DWORD PTR tv82[rsp], ecx
  000a3	ba 01 00 00 00	 mov	 edx, 1
  000a8	48 6b d2 01	 imul	 rdx, rdx, 1
  000ac	48 8b bc 24 30
	01 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  000b4	0f b6 54 17 18	 movzx	 edx, BYTE PTR [rdi+rdx+24]
  000b9	89 94 24 98 00
	00 00		 mov	 DWORD PTR tv87[rsp], edx
  000c0	bf 01 00 00 00	 mov	 edi, 1
  000c5	48 6b ff 07	 imul	 rdi, rdi, 7
  000c9	4c 8b 84 24 30
	01 00 00	 mov	 r8, QWORD PTR rec$[rsp]
  000d1	41 0f b6 7c 38
	18		 movzx	 edi, BYTE PTR [r8+rdi+24]
  000d7	41 b8 01 00 00
	00		 mov	 r8d, 1
  000dd	4d 6b c0 06	 imul	 r8, r8, 6
  000e1	4c 8b 8c 24 30
	01 00 00	 mov	 r9, QWORD PTR rec$[rsp]
  000e9	47 0f b6 44 01
	18		 movzx	 r8d, BYTE PTR [r9+r8+24]
  000ef	44 89 84 24 9c
	00 00 00	 mov	 DWORD PTR tv129[rsp], r8d
  000f7	41 b9 01 00 00
	00		 mov	 r9d, 1
  000fd	4d 6b c9 05	 imul	 r9, r9, 5
  00101	4c 8b 94 24 30
	01 00 00	 mov	 r10, QWORD PTR rec$[rsp]
  00109	47 0f b6 4c 0a
	18		 movzx	 r9d, BYTE PTR [r10+r9+24]
  0010f	44 89 8c 24 a0
	00 00 00	 mov	 DWORD PTR tv134[rsp], r9d
  00117	41 ba 01 00 00
	00		 mov	 r10d, 1
  0011d	4d 6b d2 04	 imul	 r10, r10, 4
  00121	4c 8b 9c 24 30
	01 00 00	 mov	 r11, QWORD PTR rec$[rsp]
  00129	47 0f b6 54 13
	18		 movzx	 r10d, BYTE PTR [r11+r10+24]
  0012f	44 89 94 24 a4
	00 00 00	 mov	 DWORD PTR tv139[rsp], r10d
  00137	41 bb 01 00 00
	00		 mov	 r11d, 1
  0013d	4d 6b db 00	 imul	 r11, r11, 0
  00141	48 8b 9c 24 30
	01 00 00	 mov	 rbx, QWORD PTR rec$[rsp]
  00149	42 0f b6 5c 1b
	18		 movzx	 ebx, BYTE PTR [rbx+r11+24]
  0014f	4c 8b 9c 24 30
	01 00 00	 mov	 r11, QWORD PTR rec$[rsp]
  00157	45 0f b7 5b 12	 movzx	 r11d, WORD PTR [r11+18]
  0015c	44 89 9c 24 a8
	00 00 00	 mov	 DWORD PTR tv147[rsp], r11d
  00164	48 8b b4 24 30
	01 00 00	 mov	 rsi, QWORD PTR rec$[rsp]
  0016c	0f b6 76 11	 movzx	 esi, BYTE PTR [rsi+17]
  00170	bd 01 00 00 00	 mov	 ebp, 1
  00175	48 6b ed 0b	 imul	 rbp, rbp, 11
  00179	48 8d ac 2c b0
	00 00 00	 lea	 rbp, QWORD PTR timstr$[rsp+rbp]
  00181	b9 01 00 00 00	 mov	 ecx, 1
  00186	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0018c	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv77[rsp]
  00193	89 8c 24 80 00
	00 00		 mov	 DWORD PTR [rsp+128], ecx
  0019a	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv82[rsp]
  001a1	89 4c 24 78	 mov	 DWORD PTR [rsp+120], ecx
  001a5	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv87[rsp]
  001ac	89 4c 24 70	 mov	 DWORD PTR [rsp+112], ecx
  001b0	89 7c 24 68	 mov	 DWORD PTR [rsp+104], edi
  001b4	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv129[rsp]
  001bb	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  001bf	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv134[rsp]
  001c6	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  001ca	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv139[rsp]
  001d1	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  001d5	89 5c 24 48	 mov	 DWORD PTR [rsp+72], ebx
  001d9	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv147[rsp]
  001e0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001e4	89 74 24 38	 mov	 DWORD PTR [rsp+56], esi
  001e8	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  001ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160582
  001f4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001f9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001fe	41 b9 03 00 00
	00		 mov	 r9d, 3
  00204	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160583
  0020b	ba 4f 08 00 00	 mov	 edx, 2127		; 0000084fH
  00210	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160584
  00217	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2125 :         , rec->csw[4], rec->csw[5]
; 2126 :         , rec->csw[6], rec->csw[7]
; 2127 :         , rec->csw[1], rec->csw[2], rec->csw[3] ); }

  0021d	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00225	48 33 cc	 xor	 rcx, rsp
  00228	e8 00 00 00 00	 call	 __security_check_cookie
  0022d	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  00234	5f		 pop	 rdi
  00235	5e		 pop	 rsi
  00236	5d		 pop	 rbp
  00237	5b		 pop	 rbx
  00238	c3		 ret	 0
print_TF01316 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv83 = 144
tv88 = 148
tv130 = 152
tv135 = 156
tv140 = 160
tv153 = 164
tv74 = 168
timstr$ = 176
__$ArrayPad$ = 240
rec$ = 304
print_TF01315 PROC

; 2110 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	53		 push	 rbx
  00006	55		 push	 rbp
  00007	56		 push	 rsi
  00008	57		 push	 rdi
  00009	41 56		 push	 r14
  0000b	48 81 ec 00 01
	00 00		 sub	 rsp, 256		; 00000100H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2111 :     char timstr [ 64 ] = {0};      // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  00024	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  0002c	48 8b f8	 mov	 rdi, rax
  0002f	33 c0		 xor	 eax, eax
  00031	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00036	f3 aa		 rep stosb

; 2112 : 
; 2113 :     FormatTIMEVAL( &rec->rhdr.tod, timstr, sizeof( timstr ));

  00038	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00040	48 83 c0 08	 add	 rax, 8
  00044	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0004a	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  00052	48 8b c8	 mov	 rcx, rax
  00055	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 2114 : 
; 2115 :     // "%1d:%04X CHAN: ccw %2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X%s"
; 2116 :     TF_DEV_FLOGMSG( 1315 ),

  0005b	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00063	48 8b c8	 mov	 rcx, rax
  00066	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  0006b	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00073	48 83 c0 28	 add	 rax, 40			; 00000028H
  00077	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0007f	0f b6 51 1e	 movzx	 edx, BYTE PTR [rcx+30]
  00083	48 8b c8	 mov	 rcx, rax
  00086	e8 00 00 00 00	 call	 fmtdata
  0008b	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv74[rsp], rax
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	48 6b c9 07	 imul	 rcx, rcx, 7
  0009c	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  000a4	0f b6 4c 0a 20	 movzx	 ecx, BYTE PTR [rdx+rcx+32]
  000a9	89 8c 24 90 00
	00 00		 mov	 DWORD PTR tv83[rsp], ecx
  000b0	ba 01 00 00 00	 mov	 edx, 1
  000b5	48 6b d2 06	 imul	 rdx, rdx, 6
  000b9	48 8b bc 24 30
	01 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  000c1	0f b6 54 17 20	 movzx	 edx, BYTE PTR [rdi+rdx+32]
  000c6	89 94 24 94 00
	00 00		 mov	 DWORD PTR tv88[rsp], edx
  000cd	bf 01 00 00 00	 mov	 edi, 1
  000d2	48 6b ff 05	 imul	 rdi, rdi, 5
  000d6	4c 8b 84 24 30
	01 00 00	 mov	 r8, QWORD PTR rec$[rsp]
  000de	41 0f b6 7c 38
	20		 movzx	 edi, BYTE PTR [r8+rdi+32]
  000e4	41 b8 01 00 00
	00		 mov	 r8d, 1
  000ea	4d 6b c0 04	 imul	 r8, r8, 4
  000ee	4c 8b 8c 24 30
	01 00 00	 mov	 r9, QWORD PTR rec$[rsp]
  000f6	47 0f b6 44 01
	20		 movzx	 r8d, BYTE PTR [r9+r8+32]
  000fc	44 89 84 24 98
	00 00 00	 mov	 DWORD PTR tv130[rsp], r8d
  00104	41 b9 01 00 00
	00		 mov	 r9d, 1
  0010a	4d 6b c9 03	 imul	 r9, r9, 3
  0010e	4c 8b 94 24 30
	01 00 00	 mov	 r10, QWORD PTR rec$[rsp]
  00116	47 0f b6 4c 0a
	20		 movzx	 r9d, BYTE PTR [r10+r9+32]
  0011c	44 89 8c 24 9c
	00 00 00	 mov	 DWORD PTR tv135[rsp], r9d
  00124	41 ba 01 00 00
	00		 mov	 r10d, 1
  0012a	4d 6b d2 02	 imul	 r10, r10, 2
  0012e	4c 8b 9c 24 30
	01 00 00	 mov	 r11, QWORD PTR rec$[rsp]
  00136	47 0f b6 54 13
	20		 movzx	 r10d, BYTE PTR [r11+r10+32]
  0013c	44 89 94 24 a0
	00 00 00	 mov	 DWORD PTR tv140[rsp], r10d
  00144	41 bb 01 00 00
	00		 mov	 r11d, 1
  0014a	4d 6b db 01	 imul	 r11, r11, 1
  0014e	48 8b 9c 24 30
	01 00 00	 mov	 rbx, QWORD PTR rec$[rsp]
  00156	42 0f b6 5c 1b
	20		 movzx	 ebx, BYTE PTR [rbx+r11+32]
  0015c	41 bb 01 00 00
	00		 mov	 r11d, 1
  00162	4d 6b db 00	 imul	 r11, r11, 0
  00166	48 8b b4 24 30
	01 00 00	 mov	 rsi, QWORD PTR rec$[rsp]
  0016e	42 0f b6 74 1e
	20		 movzx	 esi, BYTE PTR [rsi+r11+32]
  00174	4c 8b 9c 24 30
	01 00 00	 mov	 r11, QWORD PTR rec$[rsp]
  0017c	45 0f b7 5b 12	 movzx	 r11d, WORD PTR [r11+18]
  00181	44 89 9c 24 a4
	00 00 00	 mov	 DWORD PTR tv153[rsp], r11d
  00189	48 8b ac 24 30
	01 00 00	 mov	 rbp, QWORD PTR rec$[rsp]
  00191	0f b6 6d 11	 movzx	 ebp, BYTE PTR [rbp+17]
  00195	41 be 01 00 00
	00		 mov	 r14d, 1
  0019b	4d 6b f6 0b	 imul	 r14, r14, 11
  0019f	4e 8d b4 34 b0
	00 00 00	 lea	 r14, QWORD PTR timstr$[rsp+r14]
  001a7	b9 01 00 00 00	 mov	 ecx, 1
  001ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001b2	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv74[rsp]
  001ba	48 89 8c 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], rcx
  001c2	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv83[rsp]
  001c9	89 8c 24 80 00
	00 00		 mov	 DWORD PTR [rsp+128], ecx
  001d0	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv88[rsp]
  001d7	89 4c 24 78	 mov	 DWORD PTR [rsp+120], ecx
  001db	89 7c 24 70	 mov	 DWORD PTR [rsp+112], edi
  001df	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv130[rsp]
  001e6	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  001ea	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv135[rsp]
  001f1	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  001f5	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv140[rsp]
  001fc	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00200	89 5c 24 50	 mov	 DWORD PTR [rsp+80], ebx
  00204	89 74 24 48	 mov	 DWORD PTR [rsp+72], esi
  00208	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv153[rsp]
  0020f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00213	89 6c 24 38	 mov	 DWORD PTR [rsp+56], ebp
  00217	4c 89 74 24 30	 mov	 QWORD PTR [rsp+48], r14
  0021c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160574
  00223	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00228	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0022d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00233	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160575
  0023a	ba 48 08 00 00	 mov	 edx, 2120		; 00000848H
  0023f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160576
  00246	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2117 :         rec->rhdr.lcss, rec->rhdr.devnum, 
; 2118 :         rec->ccw[0], rec->ccw[1], rec->ccw[2], rec->ccw[3],
; 2119 :         rec->ccw[4], rec->ccw[5], rec->ccw[6], rec->ccw[7],
; 2120 :         fmtdata( rec->data, rec->amt ));
; 2121 : }

  0024c	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00254	48 33 cc	 xor	 rcx, rsp
  00257	e8 00 00 00 00	 call	 __security_check_cookie
  0025c	48 81 c4 00 01
	00 00		 add	 rsp, 256		; 00000100H
  00263	41 5e		 pop	 r14
  00265	5f		 pop	 rdi
  00266	5e		 pop	 rsi
  00267	5d		 pop	 rbp
  00268	5b		 pop	 rbx
  00269	c3		 ret	 0
print_TF01315 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv77 = 336
tv82 = 340
tv87 = 344
tv129 = 348
tv134 = 352
tv139 = 356
tv159 = 360
tv174 = 364
tv179 = 368
tv184 = 372
tv189 = 376
tv194 = 380
tv199 = 384
tv204 = 388
tv209 = 392
tv214 = 396
tv219 = 400
tv224 = 404
tv229 = 408
tv234 = 412
tv239 = 416
tv244 = 420
tv249 = 424
tv254 = 428
tv259 = 432
tv267 = 436
tv270 = 440
tv304 = 444
tv307 = 448
tv297 = 456
tv301 = 464
timstr$ = 480
__$ArrayPad$ = 544
rec$ = 640
print_TF01313 PROC

; 2079 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	53		 push	 rbx
  00006	55		 push	 rbp
  00007	56		 push	 rsi
  00008	57		 push	 rdi
  00009	41 54		 push	 r12
  0000b	41 55		 push	 r13
  0000d	41 56		 push	 r14
  0000f	41 57		 push	 r15
  00011	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2080 :     char timstr[ 64] = {0};    // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0002a	48 8d 84 24 e0
	01 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0003c	f3 aa		 rep stosb

; 2081 :     FormatTIMEVAL( &rec->rhdr.tod, timstr, sizeof( timstr ));

  0003e	48 8b 84 24 80
	02 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00046	48 83 c0 08	 add	 rax, 8
  0004a	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00050	48 8d 94 24 e0
	01 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 2082 : 
; 2083 :     // "%1d:%04X CHAN: sense %2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X"
; 2084 :     TF_DEV_FLOGMSG( 1313 ),

  00061	48 8b 84 24 80
	02 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00069	48 8b c8	 mov	 rcx, rax
  0006c	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00071	b8 01 00 00 00	 mov	 eax, 1
  00076	48 6b c0 1f	 imul	 rax, rax, 31
  0007a	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00082	0f b6 44 01 18	 movzx	 eax, BYTE PTR [rcx+rax+24]
  00087	89 84 24 50 01
	00 00		 mov	 DWORD PTR tv77[rsp], eax
  0008e	b9 01 00 00 00	 mov	 ecx, 1
  00093	48 6b c9 1e	 imul	 rcx, rcx, 30
  00097	48 8b 94 24 80
	02 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  0009f	0f b6 4c 0a 18	 movzx	 ecx, BYTE PTR [rdx+rcx+24]
  000a4	89 8c 24 54 01
	00 00		 mov	 DWORD PTR tv82[rsp], ecx
  000ab	ba 01 00 00 00	 mov	 edx, 1
  000b0	48 6b d2 1d	 imul	 rdx, rdx, 29
  000b4	48 8b bc 24 80
	02 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  000bc	0f b6 54 17 18	 movzx	 edx, BYTE PTR [rdi+rdx+24]
  000c1	89 94 24 58 01
	00 00		 mov	 DWORD PTR tv87[rsp], edx
  000c8	bf 01 00 00 00	 mov	 edi, 1
  000cd	48 6b ff 1c	 imul	 rdi, rdi, 28
  000d1	4c 8b 84 24 80
	02 00 00	 mov	 r8, QWORD PTR rec$[rsp]
  000d9	41 0f b6 7c 38
	18		 movzx	 edi, BYTE PTR [r8+rdi+24]
  000df	41 b8 01 00 00
	00		 mov	 r8d, 1
  000e5	4d 6b c0 1b	 imul	 r8, r8, 27
  000e9	4c 8b 8c 24 80
	02 00 00	 mov	 r9, QWORD PTR rec$[rsp]
  000f1	47 0f b6 44 01
	18		 movzx	 r8d, BYTE PTR [r9+r8+24]
  000f7	44 89 84 24 5c
	01 00 00	 mov	 DWORD PTR tv129[rsp], r8d
  000ff	41 b9 01 00 00
	00		 mov	 r9d, 1
  00105	4d 6b c9 1a	 imul	 r9, r9, 26
  00109	4c 8b 94 24 80
	02 00 00	 mov	 r10, QWORD PTR rec$[rsp]
  00111	47 0f b6 4c 0a
	18		 movzx	 r9d, BYTE PTR [r10+r9+24]
  00117	44 89 8c 24 60
	01 00 00	 mov	 DWORD PTR tv134[rsp], r9d
  0011f	41 ba 01 00 00
	00		 mov	 r10d, 1
  00125	4d 6b d2 19	 imul	 r10, r10, 25
  00129	4c 8b 9c 24 80
	02 00 00	 mov	 r11, QWORD PTR rec$[rsp]
  00131	47 0f b6 54 13
	18		 movzx	 r10d, BYTE PTR [r11+r10+24]
  00137	44 89 94 24 64
	01 00 00	 mov	 DWORD PTR tv139[rsp], r10d
  0013f	41 bb 01 00 00
	00		 mov	 r11d, 1
  00145	4d 6b db 18	 imul	 r11, r11, 24
  00149	48 8b 9c 24 80
	02 00 00	 mov	 rbx, QWORD PTR rec$[rsp]
  00151	42 0f b6 5c 1b
	18		 movzx	 ebx, BYTE PTR [rbx+r11+24]
  00157	41 bb 01 00 00
	00		 mov	 r11d, 1
  0015d	4d 6b db 17	 imul	 r11, r11, 23
  00161	48 8b b4 24 80
	02 00 00	 mov	 rsi, QWORD PTR rec$[rsp]
  00169	42 0f b6 74 1e
	18		 movzx	 esi, BYTE PTR [rsi+r11+24]
  0016f	41 bb 01 00 00
	00		 mov	 r11d, 1
  00175	4d 6b db 16	 imul	 r11, r11, 22
  00179	48 8b ac 24 80
	02 00 00	 mov	 rbp, QWORD PTR rec$[rsp]
  00181	41 0f b6 6c 2b
	18		 movzx	 ebp, BYTE PTR [r11+rbp+24]
  00187	41 bb 01 00 00
	00		 mov	 r11d, 1
  0018d	4d 6b db 15	 imul	 r11, r11, 21
  00191	4c 8b b4 24 80
	02 00 00	 mov	 r14, QWORD PTR rec$[rsp]
  00199	47 0f b6 5c 1e
	18		 movzx	 r11d, BYTE PTR [r14+r11+24]
  0019f	44 89 9c 24 68
	01 00 00	 mov	 DWORD PTR tv159[rsp], r11d
  001a7	41 be 01 00 00
	00		 mov	 r14d, 1
  001ad	4d 6b f6 14	 imul	 r14, r14, 20
  001b1	4c 8b bc 24 80
	02 00 00	 mov	 r15, QWORD PTR rec$[rsp]
  001b9	47 0f b6 74 37
	18		 movzx	 r14d, BYTE PTR [r15+r14+24]
  001bf	41 bf 01 00 00
	00		 mov	 r15d, 1
  001c5	4d 6b ff 13	 imul	 r15, r15, 19
  001c9	4c 8b a4 24 80
	02 00 00	 mov	 r12, QWORD PTR rec$[rsp]
  001d1	47 0f b6 7c 3c
	18		 movzx	 r15d, BYTE PTR [r12+r15+24]
  001d7	41 bc 01 00 00
	00		 mov	 r12d, 1
  001dd	4d 6b e4 12	 imul	 r12, r12, 18
  001e1	4c 8b ac 24 80
	02 00 00	 mov	 r13, QWORD PTR rec$[rsp]
  001e9	47 0f b6 64 2c
	18		 movzx	 r12d, BYTE PTR [r12+r13+24]
  001ef	44 89 a4 24 6c
	01 00 00	 mov	 DWORD PTR tv174[rsp], r12d
  001f7	41 bd 01 00 00
	00		 mov	 r13d, 1
  001fd	4d 6b ed 11	 imul	 r13, r13, 17
  00201	4c 8b a4 24 80
	02 00 00	 mov	 r12, QWORD PTR rec$[rsp]
  00209	47 0f b6 64 2c
	18		 movzx	 r12d, BYTE PTR [r12+r13+24]
  0020f	44 89 a4 24 70
	01 00 00	 mov	 DWORD PTR tv179[rsp], r12d
  00217	41 bd 01 00 00
	00		 mov	 r13d, 1
  0021d	4d 6b ed 10	 imul	 r13, r13, 16
  00221	4c 8b a4 24 80
	02 00 00	 mov	 r12, QWORD PTR rec$[rsp]
  00229	47 0f b6 64 2c
	18		 movzx	 r12d, BYTE PTR [r12+r13+24]
  0022f	44 89 a4 24 74
	01 00 00	 mov	 DWORD PTR tv184[rsp], r12d
  00237	41 bd 01 00 00
	00		 mov	 r13d, 1
  0023d	4d 6b ed 0f	 imul	 r13, r13, 15
  00241	4c 8b a4 24 80
	02 00 00	 mov	 r12, QWORD PTR rec$[rsp]
  00249	47 0f b6 64 2c
	18		 movzx	 r12d, BYTE PTR [r12+r13+24]
  0024f	44 89 a4 24 78
	01 00 00	 mov	 DWORD PTR tv189[rsp], r12d
  00257	41 bd 01 00 00
	00		 mov	 r13d, 1
  0025d	4d 6b ed 0e	 imul	 r13, r13, 14
  00261	4c 8b a4 24 80
	02 00 00	 mov	 r12, QWORD PTR rec$[rsp]
  00269	47 0f b6 64 2c
	18		 movzx	 r12d, BYTE PTR [r12+r13+24]
  0026f	44 89 a4 24 7c
	01 00 00	 mov	 DWORD PTR tv194[rsp], r12d
  00277	41 bd 01 00 00
	00		 mov	 r13d, 1
  0027d	4d 6b ed 0d	 imul	 r13, r13, 13
  00281	4c 8b a4 24 80
	02 00 00	 mov	 r12, QWORD PTR rec$[rsp]
  00289	47 0f b6 64 2c
	18		 movzx	 r12d, BYTE PTR [r12+r13+24]
  0028f	44 89 a4 24 80
	01 00 00	 mov	 DWORD PTR tv199[rsp], r12d
  00297	41 bd 01 00 00
	00		 mov	 r13d, 1
  0029d	4d 6b ed 0c	 imul	 r13, r13, 12
  002a1	4c 8b a4 24 80
	02 00 00	 mov	 r12, QWORD PTR rec$[rsp]
  002a9	47 0f b6 64 2c
	18		 movzx	 r12d, BYTE PTR [r12+r13+24]
  002af	44 89 a4 24 84
	01 00 00	 mov	 DWORD PTR tv204[rsp], r12d
  002b7	41 bd 01 00 00
	00		 mov	 r13d, 1
  002bd	4d 6b ed 0b	 imul	 r13, r13, 11
  002c1	4c 8b a4 24 80
	02 00 00	 mov	 r12, QWORD PTR rec$[rsp]
  002c9	47 0f b6 64 2c
	18		 movzx	 r12d, BYTE PTR [r12+r13+24]
  002cf	44 89 a4 24 88
	01 00 00	 mov	 DWORD PTR tv209[rsp], r12d
  002d7	41 bd 01 00 00
	00		 mov	 r13d, 1
  002dd	4d 6b ed 0a	 imul	 r13, r13, 10
  002e1	4c 8b a4 24 80
	02 00 00	 mov	 r12, QWORD PTR rec$[rsp]
  002e9	47 0f b6 64 2c
	18		 movzx	 r12d, BYTE PTR [r12+r13+24]
  002ef	44 89 a4 24 8c
	01 00 00	 mov	 DWORD PTR tv214[rsp], r12d
  002f7	41 bd 01 00 00
	00		 mov	 r13d, 1
  002fd	4d 6b ed 09	 imul	 r13, r13, 9
  00301	4c 8b a4 24 80
	02 00 00	 mov	 r12, QWORD PTR rec$[rsp]
  00309	47 0f b6 64 2c
	18		 movzx	 r12d, BYTE PTR [r12+r13+24]
  0030f	44 89 a4 24 90
	01 00 00	 mov	 DWORD PTR tv219[rsp], r12d
  00317	41 bd 01 00 00
	00		 mov	 r13d, 1
  0031d	4d 6b ed 08	 imul	 r13, r13, 8
  00321	4c 8b a4 24 80
	02 00 00	 mov	 r12, QWORD PTR rec$[rsp]
  00329	47 0f b6 64 2c
	18		 movzx	 r12d, BYTE PTR [r12+r13+24]
  0032f	44 89 a4 24 94
	01 00 00	 mov	 DWORD PTR tv224[rsp], r12d
  00337	41 bd 01 00 00
	00		 mov	 r13d, 1
  0033d	4d 6b ed 07	 imul	 r13, r13, 7
  00341	4c 8b a4 24 80
	02 00 00	 mov	 r12, QWORD PTR rec$[rsp]
  00349	47 0f b6 64 2c
	18		 movzx	 r12d, BYTE PTR [r12+r13+24]
  0034f	44 89 a4 24 98
	01 00 00	 mov	 DWORD PTR tv229[rsp], r12d
  00357	41 bd 01 00 00
	00		 mov	 r13d, 1
  0035d	4d 6b ed 06	 imul	 r13, r13, 6
  00361	4c 8b a4 24 80
	02 00 00	 mov	 r12, QWORD PTR rec$[rsp]
  00369	47 0f b6 64 2c
	18		 movzx	 r12d, BYTE PTR [r12+r13+24]
  0036f	44 89 a4 24 9c
	01 00 00	 mov	 DWORD PTR tv234[rsp], r12d
  00377	41 bd 01 00 00
	00		 mov	 r13d, 1
  0037d	4d 6b ed 05	 imul	 r13, r13, 5
  00381	4c 8b a4 24 80
	02 00 00	 mov	 r12, QWORD PTR rec$[rsp]
  00389	47 0f b6 64 2c
	18		 movzx	 r12d, BYTE PTR [r12+r13+24]
  0038f	44 89 a4 24 a0
	01 00 00	 mov	 DWORD PTR tv239[rsp], r12d
  00397	41 bd 01 00 00
	00		 mov	 r13d, 1
  0039d	4d 6b ed 04	 imul	 r13, r13, 4
  003a1	4c 8b a4 24 80
	02 00 00	 mov	 r12, QWORD PTR rec$[rsp]
  003a9	47 0f b6 64 2c
	18		 movzx	 r12d, BYTE PTR [r12+r13+24]
  003af	44 89 a4 24 a4
	01 00 00	 mov	 DWORD PTR tv244[rsp], r12d
  003b7	41 bd 01 00 00
	00		 mov	 r13d, 1
  003bd	4d 6b ed 03	 imul	 r13, r13, 3
  003c1	4c 8b a4 24 80
	02 00 00	 mov	 r12, QWORD PTR rec$[rsp]
  003c9	47 0f b6 64 2c
	18		 movzx	 r12d, BYTE PTR [r12+r13+24]
  003cf	44 89 a4 24 a8
	01 00 00	 mov	 DWORD PTR tv249[rsp], r12d
  003d7	41 bd 01 00 00
	00		 mov	 r13d, 1
  003dd	4d 6b ed 02	 imul	 r13, r13, 2
  003e1	4c 8b a4 24 80
	02 00 00	 mov	 r12, QWORD PTR rec$[rsp]
  003e9	47 0f b6 64 2c
	18		 movzx	 r12d, BYTE PTR [r12+r13+24]
  003ef	44 89 a4 24 ac
	01 00 00	 mov	 DWORD PTR tv254[rsp], r12d
  003f7	41 bd 01 00 00
	00		 mov	 r13d, 1
  003fd	4d 6b ed 01	 imul	 r13, r13, 1
  00401	4c 8b a4 24 80
	02 00 00	 mov	 r12, QWORD PTR rec$[rsp]
  00409	47 0f b6 64 2c
	18		 movzx	 r12d, BYTE PTR [r12+r13+24]
  0040f	44 89 a4 24 b0
	01 00 00	 mov	 DWORD PTR tv259[rsp], r12d
  00417	41 bd 01 00 00
	00		 mov	 r13d, 1
  0041d	4d 6b ed 00	 imul	 r13, r13, 0
  00421	4c 8b a4 24 80
	02 00 00	 mov	 r12, QWORD PTR rec$[rsp]
  00429	47 0f b6 64 2c
	18		 movzx	 r12d, BYTE PTR [r12+r13+24]
  0042f	4c 8b ac 24 80
	02 00 00	 mov	 r13, QWORD PTR rec$[rsp]
  00437	45 0f b7 6d 12	 movzx	 r13d, WORD PTR [r13+18]
  0043c	44 89 ac 24 b4
	01 00 00	 mov	 DWORD PTR tv267[rsp], r13d
  00444	4c 8b ac 24 80
	02 00 00	 mov	 r13, QWORD PTR rec$[rsp]
  0044c	45 0f b6 6d 11	 movzx	 r13d, BYTE PTR [r13+17]
  00451	44 89 ac 24 b8
	01 00 00	 mov	 DWORD PTR tv270[rsp], r13d
  00459	41 bd 01 00 00
	00		 mov	 r13d, 1
  0045f	4d 6b ed 0b	 imul	 r13, r13, 11
  00463	4e 8d ac 2c e0
	01 00 00	 lea	 r13, QWORD PTR timstr$[rsp+r13]
  0046b	b9 01 00 00 00	 mov	 ecx, 1
  00470	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00476	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR tv77[rsp]
  0047d	89 8c 24 40 01
	00 00		 mov	 DWORD PTR [rsp+320], ecx
  00484	8b 8c 24 54 01
	00 00		 mov	 ecx, DWORD PTR tv82[rsp]
  0048b	89 8c 24 38 01
	00 00		 mov	 DWORD PTR [rsp+312], ecx
  00492	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR tv87[rsp]
  00499	89 8c 24 30 01
	00 00		 mov	 DWORD PTR [rsp+304], ecx
  004a0	89 bc 24 28 01
	00 00		 mov	 DWORD PTR [rsp+296], edi
  004a7	8b 8c 24 5c 01
	00 00		 mov	 ecx, DWORD PTR tv129[rsp]
  004ae	89 8c 24 20 01
	00 00		 mov	 DWORD PTR [rsp+288], ecx
  004b5	8b 8c 24 60 01
	00 00		 mov	 ecx, DWORD PTR tv134[rsp]
  004bc	89 8c 24 18 01
	00 00		 mov	 DWORD PTR [rsp+280], ecx
  004c3	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR tv139[rsp]
  004ca	89 8c 24 10 01
	00 00		 mov	 DWORD PTR [rsp+272], ecx
  004d1	89 9c 24 08 01
	00 00		 mov	 DWORD PTR [rsp+264], ebx
  004d8	89 b4 24 00 01
	00 00		 mov	 DWORD PTR [rsp+256], esi
  004df	89 ac 24 f8 00
	00 00		 mov	 DWORD PTR [rsp+248], ebp
  004e6	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR tv159[rsp]
  004ed	89 8c 24 f0 00
	00 00		 mov	 DWORD PTR [rsp+240], ecx
  004f4	44 89 b4 24 e8
	00 00 00	 mov	 DWORD PTR [rsp+232], r14d
  004fc	44 89 bc 24 e0
	00 00 00	 mov	 DWORD PTR [rsp+224], r15d
  00504	8b 8c 24 6c 01
	00 00		 mov	 ecx, DWORD PTR tv174[rsp]
  0050b	89 8c 24 d8 00
	00 00		 mov	 DWORD PTR [rsp+216], ecx
  00512	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR tv179[rsp]
  00519	89 8c 24 d0 00
	00 00		 mov	 DWORD PTR [rsp+208], ecx
  00520	8b 8c 24 74 01
	00 00		 mov	 ecx, DWORD PTR tv184[rsp]
  00527	89 8c 24 c8 00
	00 00		 mov	 DWORD PTR [rsp+200], ecx
  0052e	8b 8c 24 78 01
	00 00		 mov	 ecx, DWORD PTR tv189[rsp]
  00535	89 8c 24 c0 00
	00 00		 mov	 DWORD PTR [rsp+192], ecx
  0053c	8b 8c 24 7c 01
	00 00		 mov	 ecx, DWORD PTR tv194[rsp]
  00543	89 8c 24 b8 00
	00 00		 mov	 DWORD PTR [rsp+184], ecx
  0054a	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR tv199[rsp]
  00551	89 8c 24 b0 00
	00 00		 mov	 DWORD PTR [rsp+176], ecx
  00558	8b 8c 24 84 01
	00 00		 mov	 ecx, DWORD PTR tv204[rsp]
  0055f	89 8c 24 a8 00
	00 00		 mov	 DWORD PTR [rsp+168], ecx
  00566	8b 8c 24 88 01
	00 00		 mov	 ecx, DWORD PTR tv209[rsp]
  0056d	89 8c 24 a0 00
	00 00		 mov	 DWORD PTR [rsp+160], ecx
  00574	8b 8c 24 8c 01
	00 00		 mov	 ecx, DWORD PTR tv214[rsp]
  0057b	89 8c 24 98 00
	00 00		 mov	 DWORD PTR [rsp+152], ecx
  00582	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR tv219[rsp]
  00589	89 8c 24 90 00
	00 00		 mov	 DWORD PTR [rsp+144], ecx
  00590	8b 8c 24 94 01
	00 00		 mov	 ecx, DWORD PTR tv224[rsp]
  00597	89 8c 24 88 00
	00 00		 mov	 DWORD PTR [rsp+136], ecx
  0059e	8b 8c 24 98 01
	00 00		 mov	 ecx, DWORD PTR tv229[rsp]
  005a5	89 8c 24 80 00
	00 00		 mov	 DWORD PTR [rsp+128], ecx
  005ac	8b 8c 24 9c 01
	00 00		 mov	 ecx, DWORD PTR tv234[rsp]
  005b3	89 4c 24 78	 mov	 DWORD PTR [rsp+120], ecx
  005b7	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR tv239[rsp]
  005be	89 4c 24 70	 mov	 DWORD PTR [rsp+112], ecx
  005c2	8b 8c 24 a4 01
	00 00		 mov	 ecx, DWORD PTR tv244[rsp]
  005c9	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  005cd	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR tv249[rsp]
  005d4	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  005d8	8b 8c 24 ac 01
	00 00		 mov	 ecx, DWORD PTR tv254[rsp]
  005df	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  005e3	8b 8c 24 b0 01
	00 00		 mov	 ecx, DWORD PTR tv259[rsp]
  005ea	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  005ee	44 89 64 24 48	 mov	 DWORD PTR [rsp+72], r12d
  005f3	8b 8c 24 b4 01
	00 00		 mov	 ecx, DWORD PTR tv267[rsp]
  005fa	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  005fe	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR tv270[rsp]
  00605	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00609	4c 89 6c 24 30	 mov	 QWORD PTR [rsp+48], r13
  0060e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160562
  00615	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0061a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0061f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00625	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160563
  0062c	ba 2d 08 00 00	 mov	 edx, 2093		; 0000082dH
  00631	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160564
  00638	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2085 :         rec->rhdr.lcss, rec->rhdr.devnum,
; 2086 :         rec->sense[ 0], rec->sense[ 1], rec->sense[ 2], rec->sense[ 3],
; 2087 :         rec->sense[ 4], rec->sense[ 5], rec->sense[ 6], rec->sense[ 7],
; 2088 :         rec->sense[ 8], rec->sense[ 9], rec->sense[10], rec->sense[11],
; 2089 :         rec->sense[12], rec->sense[13], rec->sense[14], rec->sense[15],
; 2090 :         rec->sense[16], rec->sense[17], rec->sense[18], rec->sense[19],
; 2091 :         rec->sense[20], rec->sense[21], rec->sense[22], rec->sense[23],
; 2092 :         rec->sense[24], rec->sense[25], rec->sense[26], rec->sense[27],
; 2093 :         rec->sense[28], rec->sense[29], rec->sense[30], rec->sense[31] );
; 2094 : 
; 2095 :     /* Use the device's interpretation of its own sense bytes if available.
; 2096 :        Otherwise format the default interpretation
; 2097 :     */
; 2098 :     if (!rec->sns[0])

  0063e	b8 01 00 00 00	 mov	 eax, 1
  00643	48 6b c0 00	 imul	 rax, rax, 0
  00647	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0064f	0f be 44 01 38	 movsx	 eax, BYTE PTR [rcx+rax+56]
  00654	85 c0		 test	 eax, eax
  00656	75 58		 jne	 SHORT $LN2@print_TF01

; 2099 :         default_sns( rec->sns, sizeof( rec->sns ), rec->sense[0], rec->sense[1] );

  00658	b8 01 00 00 00	 mov	 eax, 1
  0065d	48 6b c0 01	 imul	 rax, rax, 1
  00661	b9 01 00 00 00	 mov	 ecx, 1
  00666	48 6b c9 00	 imul	 rcx, rcx, 0
  0066a	48 8b 94 24 80
	02 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00672	48 83 c2 38	 add	 rdx, 56			; 00000038H
  00676	48 89 94 24 c8
	01 00 00	 mov	 QWORD PTR tv297[rsp], rdx
  0067e	48 8b 9c 24 80
	02 00 00	 mov	 rbx, QWORD PTR rec$[rsp]
  00686	44 0f b6 4c 03
	18		 movzx	 r9d, BYTE PTR [rbx+rax+24]
  0068c	48 8b 84 24 80
	02 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00694	44 0f b6 44 08
	18		 movzx	 r8d, BYTE PTR [rax+rcx+24]
  0069a	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0069f	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR tv297[rsp]
  006a7	48 8b c8	 mov	 rcx, rax
  006aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_default_sns
$LN2@print_TF01:

; 2100 : 
; 2101 :     // "%1d:%04X CHAN: sense %s"
; 2102 :     TF_DEV_FLOGMSG( 1314 ),

  006b0	48 8b 84 24 80
	02 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  006b8	48 8b c8	 mov	 rcx, rax
  006bb	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  006c0	48 8b 84 24 80
	02 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  006c8	48 83 c0 38	 add	 rax, 56			; 00000038H
  006cc	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv301[rsp], rax
  006d4	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  006dc	0f b7 49 12	 movzx	 ecx, WORD PTR [rcx+18]
  006e0	89 8c 24 bc 01
	00 00		 mov	 DWORD PTR tv304[rsp], ecx
  006e7	48 8b 94 24 80
	02 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  006ef	0f b6 52 11	 movzx	 edx, BYTE PTR [rdx+17]
  006f3	89 94 24 c0 01
	00 00		 mov	 DWORD PTR tv307[rsp], edx
  006fa	bb 01 00 00 00	 mov	 ebx, 1
  006ff	48 6b db 0b	 imul	 rbx, rbx, 11
  00703	48 8d 9c 1c e0
	01 00 00	 lea	 rbx, QWORD PTR timstr$[rsp+rbx]
  0070b	b9 01 00 00 00	 mov	 ecx, 1
  00710	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00716	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR tv301[rsp]
  0071e	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00723	8b 8c 24 bc 01
	00 00		 mov	 ecx, DWORD PTR tv304[rsp]
  0072a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0072e	8b 8c 24 c0 01
	00 00		 mov	 ecx, DWORD PTR tv307[rsp]
  00735	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00739	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  0073e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160566
  00745	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0074a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0074f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00755	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160567
  0075c	ba 37 08 00 00	 mov	 edx, 2103		; 00000837H
  00761	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160568
  00768	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2103 :         rec->rhdr.lcss, rec->rhdr.devnum, rec->sns );
; 2104 : }

  0076e	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00776	48 33 cc	 xor	 rcx, rsp
  00779	e8 00 00 00 00	 call	 __security_check_cookie
  0077e	48 81 c4 38 02
	00 00		 add	 rsp, 568		; 00000238H
  00785	41 5f		 pop	 r15
  00787	41 5e		 pop	 r14
  00789	41 5d		 pop	 r13
  0078b	41 5c		 pop	 r12
  0078d	5f		 pop	 rdi
  0078e	5e		 pop	 rsi
  0078f	5d		 pop	 rbp
  00790	5b		 pop	 rbx
  00791	c3		 ret	 0
print_TF01313 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv77 = 96
tv80 = 100
tv83 = 104
tv89 = 112
timstr$ = 128
__$ArrayPad$ = 192
rec$ = 224
print_TF01312 PROC

; 2073 : PRINT_DEV_FUNC( 1312 ), rec->unitstat, rec->chanstat, rec->residual ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb
  00033	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0003b	48 83 c0 08	 add	 rax, 8
  0003f	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00045	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  0004d	48 8b c8	 mov	 rcx, rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00056	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00066	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0006e	0f b6 40 1d	 movzx	 eax, BYTE PTR [rax+29]
  00072	89 44 24 60	 mov	 DWORD PTR tv77[rsp], eax
  00076	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0007e	0f b6 49 1c	 movzx	 ecx, BYTE PTR [rcx+28]
  00082	89 4c 24 64	 mov	 DWORD PTR tv80[rsp], ecx
  00086	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  0008e	0f b7 52 12	 movzx	 edx, WORD PTR [rdx+18]
  00092	89 54 24 68	 mov	 DWORD PTR tv83[rsp], edx
  00096	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  0009e	0f b6 7f 11	 movzx	 edi, BYTE PTR [rdi+17]
  000a2	41 b8 01 00 00
	00		 mov	 r8d, 1
  000a8	4d 6b c0 0b	 imul	 r8, r8, 11
  000ac	4e 8d 84 04 80
	00 00 00	 lea	 r8, QWORD PTR timstr$[rsp+r8]
  000b4	4c 89 44 24 70	 mov	 QWORD PTR tv89[rsp], r8
  000b9	b9 01 00 00 00	 mov	 ecx, 1
  000be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000c4	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000cc	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  000cf	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  000d3	8b 4c 24 60	 mov	 ecx, DWORD PTR tv77[rsp]
  000d7	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000db	8b 4c 24 64	 mov	 ecx, DWORD PTR tv80[rsp]
  000df	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  000e3	8b 4c 24 68	 mov	 ecx, DWORD PTR tv83[rsp]
  000e7	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000eb	89 7c 24 38	 mov	 DWORD PTR [rsp+56], edi
  000ef	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv89[rsp]
  000f4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160554
  00100	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00105	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0010a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00110	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160555
  00117	ba 19 08 00 00	 mov	 edx, 2073		; 00000819H
  0011c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160556
  00123	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00129	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00131	48 33 cc	 xor	 rcx, rsp
  00134	e8 00 00 00 00	 call	 __security_check_cookie
  00139	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  00140	5f		 pop	 rdi
  00141	c3		 ret	 0
print_TF01312 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 80
tv78 = 84
tv81 = 88
timstr$ = 96
__$ArrayPad$ = 160
rec$ = 192
print_TF01311 PROC

; 2070 : PRINT_DEV_FUNC( 1311 )); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 60	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  0006c	89 44 24 50	 mov	 DWORD PTR tv75[rsp], eax
  00070	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00078	0f b6 49 11	 movzx	 ecx, BYTE PTR [rcx+17]
  0007c	89 4c 24 54	 mov	 DWORD PTR tv78[rsp], ecx
  00080	ba 01 00 00 00	 mov	 edx, 1
  00085	48 6b d2 0b	 imul	 rdx, rdx, 11
  00089	48 8d 54 14 60	 lea	 rdx, QWORD PTR timstr$[rsp+rdx]
  0008e	48 89 54 24 58	 mov	 QWORD PTR tv81[rsp], rdx
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009e	8b 4c 24 50	 mov	 ecx, DWORD PTR tv75[rsp]
  000a2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000a6	8b 4c 24 54	 mov	 ecx, DWORD PTR tv78[rsp]
  000aa	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000ae	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv81[rsp]
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160546
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160547
  000d6	ba 16 08 00 00	 mov	 edx, 2070		; 00000816H
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160548
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  000e8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f0	48 33 cc	 xor	 rcx, rsp
  000f3	e8 00 00 00 00	 call	 __security_check_cookie
  000f8	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
print_TF01311 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 80
tv78 = 84
tv81 = 88
timstr$ = 96
__$ArrayPad$ = 160
rec$ = 192
print_TF01310 PROC

; 2067 : PRINT_DEV_FUNC( 1310 )); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 60	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  0006c	89 44 24 50	 mov	 DWORD PTR tv75[rsp], eax
  00070	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00078	0f b6 49 11	 movzx	 ecx, BYTE PTR [rcx+17]
  0007c	89 4c 24 54	 mov	 DWORD PTR tv78[rsp], ecx
  00080	ba 01 00 00 00	 mov	 edx, 1
  00085	48 6b d2 0b	 imul	 rdx, rdx, 11
  00089	48 8d 54 14 60	 lea	 rdx, QWORD PTR timstr$[rsp+rdx]
  0008e	48 89 54 24 58	 mov	 QWORD PTR tv81[rsp], rdx
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009e	8b 4c 24 50	 mov	 ecx, DWORD PTR tv75[rsp]
  000a2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000a6	8b 4c 24 54	 mov	 ecx, DWORD PTR tv78[rsp]
  000aa	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000ae	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv81[rsp]
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160538
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160539
  000d6	ba 13 08 00 00	 mov	 edx, 2067		; 00000813H
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160540
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  000e8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f0	48 33 cc	 xor	 rcx, rsp
  000f3	e8 00 00 00 00	 call	 __security_check_cookie
  000f8	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
print_TF01310 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 80
tv78 = 84
tv81 = 88
timstr$ = 96
__$ArrayPad$ = 160
rec$ = 192
print_TF01309 PROC

; 2064 : PRINT_DEV_FUNC( 1309 )); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 60	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  0006c	89 44 24 50	 mov	 DWORD PTR tv75[rsp], eax
  00070	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00078	0f b6 49 11	 movzx	 ecx, BYTE PTR [rcx+17]
  0007c	89 4c 24 54	 mov	 DWORD PTR tv78[rsp], ecx
  00080	ba 01 00 00 00	 mov	 edx, 1
  00085	48 6b d2 0b	 imul	 rdx, rdx, 11
  00089	48 8d 54 14 60	 lea	 rdx, QWORD PTR timstr$[rsp+rdx]
  0008e	48 89 54 24 58	 mov	 QWORD PTR tv81[rsp], rdx
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009e	8b 4c 24 50	 mov	 ecx, DWORD PTR tv75[rsp]
  000a2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000a6	8b 4c 24 54	 mov	 ecx, DWORD PTR tv78[rsp]
  000aa	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000ae	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv81[rsp]
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160530
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160531
  000d6	ba 10 08 00 00	 mov	 edx, 2064		; 00000810H
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160532
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  000e8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f0	48 33 cc	 xor	 rcx, rsp
  000f3	e8 00 00 00 00	 call	 __security_check_cookie
  000f8	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
print_TF01309 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 80
tv78 = 84
tv81 = 88
timstr$ = 96
__$ArrayPad$ = 160
rec$ = 192
print_TF01308 PROC

; 2061 : PRINT_DEV_FUNC( 1308 )); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 60	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  0006c	89 44 24 50	 mov	 DWORD PTR tv75[rsp], eax
  00070	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00078	0f b6 49 11	 movzx	 ecx, BYTE PTR [rcx+17]
  0007c	89 4c 24 54	 mov	 DWORD PTR tv78[rsp], ecx
  00080	ba 01 00 00 00	 mov	 edx, 1
  00085	48 6b d2 0b	 imul	 rdx, rdx, 11
  00089	48 8d 54 14 60	 lea	 rdx, QWORD PTR timstr$[rsp+rdx]
  0008e	48 89 54 24 58	 mov	 QWORD PTR tv81[rsp], rdx
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009e	8b 4c 24 50	 mov	 ecx, DWORD PTR tv75[rsp]
  000a2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000a6	8b 4c 24 54	 mov	 ecx, DWORD PTR tv78[rsp]
  000aa	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000ae	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv81[rsp]
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160522
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160523
  000d6	ba 0d 08 00 00	 mov	 edx, 2061		; 0000080dH
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160524
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  000e8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f0	48 33 cc	 xor	 rcx, rsp
  000f3	e8 00 00 00 00	 call	 __security_check_cookie
  000f8	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
print_TF01308 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 80
tv78 = 84
tv81 = 88
timstr$ = 96
__$ArrayPad$ = 160
rec$ = 192
print_TF01307 PROC

; 2058 : PRINT_DEV_FUNC( 1307 )); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 60	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  0006c	89 44 24 50	 mov	 DWORD PTR tv75[rsp], eax
  00070	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00078	0f b6 49 11	 movzx	 ecx, BYTE PTR [rcx+17]
  0007c	89 4c 24 54	 mov	 DWORD PTR tv78[rsp], ecx
  00080	ba 01 00 00 00	 mov	 edx, 1
  00085	48 6b d2 0b	 imul	 rdx, rdx, 11
  00089	48 8d 54 14 60	 lea	 rdx, QWORD PTR timstr$[rsp+rdx]
  0008e	48 89 54 24 58	 mov	 QWORD PTR tv81[rsp], rdx
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009e	8b 4c 24 50	 mov	 ecx, DWORD PTR tv75[rsp]
  000a2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000a6	8b 4c 24 54	 mov	 ecx, DWORD PTR tv78[rsp]
  000aa	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000ae	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv81[rsp]
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160514
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160515
  000d6	ba 0a 08 00 00	 mov	 edx, 2058		; 0000080aH
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160516
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  000e8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f0	48 33 cc	 xor	 rcx, rsp
  000f3	e8 00 00 00 00	 call	 __security_check_cookie
  000f8	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
print_TF01307 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 80
tv78 = 84
tv81 = 88
timstr$ = 96
__$ArrayPad$ = 160
rec$ = 192
print_TF01306 PROC

; 2055 : PRINT_DEV_FUNC( 1306 )); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 60	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  0006c	89 44 24 50	 mov	 DWORD PTR tv75[rsp], eax
  00070	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00078	0f b6 49 11	 movzx	 ecx, BYTE PTR [rcx+17]
  0007c	89 4c 24 54	 mov	 DWORD PTR tv78[rsp], ecx
  00080	ba 01 00 00 00	 mov	 edx, 1
  00085	48 6b d2 0b	 imul	 rdx, rdx, 11
  00089	48 8d 54 14 60	 lea	 rdx, QWORD PTR timstr$[rsp+rdx]
  0008e	48 89 54 24 58	 mov	 QWORD PTR tv81[rsp], rdx
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009e	8b 4c 24 50	 mov	 ecx, DWORD PTR tv75[rsp]
  000a2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000a6	8b 4c 24 54	 mov	 ecx, DWORD PTR tv78[rsp]
  000aa	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000ae	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv81[rsp]
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160506
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160507
  000d6	ba 07 08 00 00	 mov	 edx, 2055		; 00000807H
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160508
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  000e8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f0	48 33 cc	 xor	 rcx, rsp
  000f3	e8 00 00 00 00	 call	 __security_check_cookie
  000f8	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
print_TF01306 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 80
tv78 = 84
tv81 = 88
timstr$ = 96
__$ArrayPad$ = 160
rec$ = 192
print_TF01305 PROC

; 2052 : PRINT_DEV_FUNC( 1305 )); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 60	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  0006c	89 44 24 50	 mov	 DWORD PTR tv75[rsp], eax
  00070	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00078	0f b6 49 11	 movzx	 ecx, BYTE PTR [rcx+17]
  0007c	89 4c 24 54	 mov	 DWORD PTR tv78[rsp], ecx
  00080	ba 01 00 00 00	 mov	 edx, 1
  00085	48 6b d2 0b	 imul	 rdx, rdx, 11
  00089	48 8d 54 14 60	 lea	 rdx, QWORD PTR timstr$[rsp+rdx]
  0008e	48 89 54 24 58	 mov	 QWORD PTR tv81[rsp], rdx
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009e	8b 4c 24 50	 mov	 ecx, DWORD PTR tv75[rsp]
  000a2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000a6	8b 4c 24 54	 mov	 ecx, DWORD PTR tv78[rsp]
  000aa	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000ae	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv81[rsp]
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160498
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160499
  000d6	ba 04 08 00 00	 mov	 edx, 2052		; 00000804H
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160500
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  000e8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f0	48 33 cc	 xor	 rcx, rsp
  000f3	e8 00 00 00 00	 call	 __security_check_cookie
  000f8	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
print_TF01305 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 80
tv78 = 84
tv81 = 88
timstr$ = 96
__$ArrayPad$ = 160
rec$ = 192
print_TF01304 PROC

; 2049 : PRINT_DEV_FUNC( 1304 )); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 60	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  0006c	89 44 24 50	 mov	 DWORD PTR tv75[rsp], eax
  00070	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00078	0f b6 49 11	 movzx	 ecx, BYTE PTR [rcx+17]
  0007c	89 4c 24 54	 mov	 DWORD PTR tv78[rsp], ecx
  00080	ba 01 00 00 00	 mov	 edx, 1
  00085	48 6b d2 0b	 imul	 rdx, rdx, 11
  00089	48 8d 54 14 60	 lea	 rdx, QWORD PTR timstr$[rsp+rdx]
  0008e	48 89 54 24 58	 mov	 QWORD PTR tv81[rsp], rdx
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009e	8b 4c 24 50	 mov	 ecx, DWORD PTR tv75[rsp]
  000a2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000a6	8b 4c 24 54	 mov	 ecx, DWORD PTR tv78[rsp]
  000aa	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000ae	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv81[rsp]
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160490
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160491
  000d6	ba 01 08 00 00	 mov	 edx, 2049		; 00000801H
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160492
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  000e8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f0	48 33 cc	 xor	 rcx, rsp
  000f3	e8 00 00 00 00	 call	 __security_check_cookie
  000f8	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000ff	5f		 pop	 rdi
  00100	c3		 ret	 0
print_TF01304 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv74 = 112
tv84 = 116
tv89 = 120
tv146 = 124
tv151 = 128
tv178 = 132
tv181 = 136
tv187 = 140
tv77 = 144
tv95 = 152
tv139 = 160
tv157 = 168
tv169 = 176
tv190 = 184
p$1 = 192
timstr$ = 208
__$ArrayPad$ = 272
rec$ = 304
print_TF01301 PROC

; 2018 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 20 01
	00 00		 sub	 rsp, 288		; 00000120H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2019 :     char timstr[ 64] = {0};    // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb

; 2020 :     FormatTIMEVAL( &rec->rhdr.tod, timstr, sizeof( timstr ));

  00033	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0003b	48 83 c0 08	 add	 rax, 8
  0003f	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00045	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  0004d	48 8b c8	 mov	 rcx, rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 2021 : 
; 2022 :     switch (rec->type)

  00056	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0005e	0f b6 40 23	 movzx	 eax, BYTE PTR [rax+35]
  00062	88 44 24 70	 mov	 BYTE PTR tv74[rsp], al
  00066	80 7c 24 70 01	 cmp	 BYTE PTR tv74[rsp], 1
  0006b	74 1b		 je	 SHORT $LN7@print_TF01
  0006d	80 7c 24 70 02	 cmp	 BYTE PTR tv74[rsp], 2
  00072	0f 84 0b 01 00
	00		 je	 $LN8@print_TF01
  00078	80 7c 24 70 03	 cmp	 BYTE PTR tv74[rsp], 3
  0007d	0f 84 03 02 00
	00		 je	 $LN9@print_TF01
  00083	e9 24 03 00 00	 jmp	 $LN10@print_TF01
$LN7@print_TF01:

; 2023 :     {
; 2024 :     case PF_IDAW1:
; 2025 :         // "%1d:%04X CHAN: idaw %8.8"PRIX32", len %3.3"PRIX16"%s"
; 2026 :         TF_DEV_FLOGMSG( 1302 ),

  00088	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00090	48 8b c8	 mov	 rcx, rax
  00093	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00098	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  000a0	48 83 c0 28	 add	 rax, 40			; 00000028H
  000a4	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000ac	0f b6 51 22	 movzx	 edx, BYTE PTR [rcx+34]
  000b0	48 8b c8	 mov	 rcx, rax
  000b3	e8 00 00 00 00	 call	 fmtdata
  000b8	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv77[rsp], rax
  000c0	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000c8	0f b7 49 20	 movzx	 ecx, WORD PTR [rcx+32]
  000cc	89 4c 24 74	 mov	 DWORD PTR tv84[rsp], ecx
  000d0	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  000d8	0f b7 52 12	 movzx	 edx, WORD PTR [rdx+18]
  000dc	89 54 24 78	 mov	 DWORD PTR tv89[rsp], edx
  000e0	48 8b bc 24 30
	01 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  000e8	0f b6 7f 11	 movzx	 edi, BYTE PTR [rdi+17]
  000ec	41 b8 01 00 00
	00		 mov	 r8d, 1
  000f2	4d 6b c0 0b	 imul	 r8, r8, 11
  000f6	4e 8d 84 04 d0
	00 00 00	 lea	 r8, QWORD PTR timstr$[rsp+r8]
  000fe	4c 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv95[rsp], r8
  00106	b9 01 00 00 00	 mov	 ecx, 1
  0010b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00111	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv77[rsp]
  00119	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0011e	8b 4c 24 74	 mov	 ecx, DWORD PTR tv84[rsp]
  00122	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00126	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0012e	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  00131	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00135	8b 4c 24 78	 mov	 ecx, DWORD PTR tv89[rsp]
  00139	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0013d	89 7c 24 38	 mov	 DWORD PTR [rsp+56], edi
  00141	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv95[rsp]
  00149	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0014e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160473
  00155	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0015a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0015f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00165	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160474
  0016c	ba eb 07 00 00	 mov	 edx, 2027		; 000007ebH
  00171	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160475
  00178	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2027 :             rec->rhdr.lcss, rec->rhdr.devnum, (U32)rec->addr, rec->count, fmtdata( rec->data, rec->amt ));
; 2028 :         break;

  0017e	e9 46 02 00 00	 jmp	 $LN2@print_TF01
$LN8@print_TF01:

; 2029 : 
; 2030 :     case PF_IDAW2:
; 2031 : 
; 2032 :         // "%1d:%04X CHAN: idaw %16.16"PRIX64", len %4.4"PRIX16"%s"
; 2033 :         TF_DEV_FLOGMSG( 1303 ),

  00183	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0018b	48 8b c8	 mov	 rcx, rax
  0018e	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00193	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0019b	48 83 c0 28	 add	 rax, 40			; 00000028H
  0019f	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  001a7	0f b6 51 22	 movzx	 edx, BYTE PTR [rcx+34]
  001ab	48 8b c8	 mov	 rcx, rax
  001ae	e8 00 00 00 00	 call	 fmtdata
  001b3	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv139[rsp], rax
  001bb	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  001c3	0f b7 49 20	 movzx	 ecx, WORD PTR [rcx+32]
  001c7	89 4c 24 7c	 mov	 DWORD PTR tv146[rsp], ecx
  001cb	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  001d3	0f b7 52 12	 movzx	 edx, WORD PTR [rdx+18]
  001d7	89 94 24 80 00
	00 00		 mov	 DWORD PTR tv151[rsp], edx
  001de	48 8b bc 24 30
	01 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  001e6	0f b6 7f 11	 movzx	 edi, BYTE PTR [rdi+17]
  001ea	41 b8 01 00 00
	00		 mov	 r8d, 1
  001f0	4d 6b c0 0b	 imul	 r8, r8, 11
  001f4	4e 8d 84 04 d0
	00 00 00	 lea	 r8, QWORD PTR timstr$[rsp+r8]
  001fc	4c 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv157[rsp], r8
  00204	b9 01 00 00 00	 mov	 ecx, 1
  00209	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0020f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv139[rsp]
  00217	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0021c	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv146[rsp]
  00220	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00224	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0022c	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00230	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00235	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv151[rsp]
  0023c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00240	89 7c 24 38	 mov	 DWORD PTR [rsp+56], edi
  00244	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv157[rsp]
  0024c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00251	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160477
  00258	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0025d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00262	41 b9 03 00 00
	00		 mov	 r9d, 3
  00268	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160478
  0026f	ba f2 07 00 00	 mov	 edx, 2034		; 000007f2H
  00274	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160479
  0027b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2034 :             rec->rhdr.lcss, rec->rhdr.devnum, (U64)rec->addr, rec->count, fmtdata( rec->data, rec->amt ));
; 2035 :         break;

  00281	e9 43 01 00 00	 jmp	 $LN2@print_TF01
$LN9@print_TF01:

; 2036 : 
; 2037 :     case PF_MIDAW:
; 2038 : 
; 2039 :         // "%1d:%04X CHAN: midaw %2.2X %4.4"PRIX16" %16.16"PRIX64"%s"
; 2040 :         TF_DEV_FLOGMSG( 1301 ),

  00286	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0028e	48 8b c8	 mov	 rcx, rax
  00291	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00296	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0029e	48 83 c0 28	 add	 rax, 40			; 00000028H
  002a2	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  002aa	0f b6 51 22	 movzx	 edx, BYTE PTR [rcx+34]
  002ae	48 8b c8	 mov	 rcx, rax
  002b1	e8 00 00 00 00	 call	 fmtdata
  002b6	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv169[rsp], rax
  002be	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  002c6	0f b7 49 20	 movzx	 ecx, WORD PTR [rcx+32]
  002ca	89 8c 24 84 00
	00 00		 mov	 DWORD PTR tv178[rsp], ecx
  002d1	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  002d9	0f b6 52 24	 movzx	 edx, BYTE PTR [rdx+36]
  002dd	89 94 24 88 00
	00 00		 mov	 DWORD PTR tv181[rsp], edx
  002e4	48 8b bc 24 30
	01 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  002ec	0f b7 7f 12	 movzx	 edi, WORD PTR [rdi+18]
  002f0	4c 8b 84 24 30
	01 00 00	 mov	 r8, QWORD PTR rec$[rsp]
  002f8	45 0f b6 40 11	 movzx	 r8d, BYTE PTR [r8+17]
  002fd	44 89 84 24 8c
	00 00 00	 mov	 DWORD PTR tv187[rsp], r8d
  00305	41 b9 01 00 00
	00		 mov	 r9d, 1
  0030b	4d 6b c9 0b	 imul	 r9, r9, 11
  0030f	4e 8d 8c 0c d0
	00 00 00	 lea	 r9, QWORD PTR timstr$[rsp+r9]
  00317	4c 89 8c 24 b8
	00 00 00	 mov	 QWORD PTR tv190[rsp], r9
  0031f	b9 01 00 00 00	 mov	 ecx, 1
  00324	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0032a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv169[rsp]
  00332	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00337	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0033f	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00343	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00348	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv178[rsp]
  0034f	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00353	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv181[rsp]
  0035a	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  0035e	89 7c 24 40	 mov	 DWORD PTR [rsp+64], edi
  00362	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv187[rsp]
  00369	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0036d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv190[rsp]
  00375	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0037a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160481
  00381	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00386	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0038b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00391	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160482
  00398	ba f9 07 00 00	 mov	 edx, 2041		; 000007f9H
  0039d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160483
  003a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2041 :             rec->rhdr.lcss, rec->rhdr.devnum, rec->mflag, rec->count, (U64)rec->addr, fmtdata( rec->data, rec->amt ));
; 2042 :         break;

  003aa	eb 1d		 jmp	 SHORT $LN2@print_TF01
$LN10@print_TF01:
$LN6@print_TF01:

; 2043 : 
; 2044 :     default: CRASH(); UNREACHABLE_CODE( return );

  003ac	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR p$1[rsp], 0
  003b8	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR p$1[rsp]
  003c0	c6 00 00	 mov	 BYTE PTR [rax], 0
  003c3	33 c0		 xor	 eax, eax
  003c5	85 c0		 test	 eax, eax
  003c7	75 e3		 jne	 SHORT $LN6@print_TF01
$LN2@print_TF01:
$LN11@print_TF01:

; 2045 :     }
; 2046 : }

  003c9	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  003d1	48 33 cc	 xor	 rcx, rsp
  003d4	e8 00 00 00 00	 call	 __security_check_cookie
  003d9	48 81 c4 20 01
	00 00		 add	 rsp, 288		; 00000120H
  003e0	5f		 pop	 rdi
  003e1	c3		 ret	 0
print_TF01301 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 80
tv78 = 84
tv81 = 88
timstr$ = 96
__$ArrayPad$ = 160
rec$ = 192
print_TF01300 PROC

; 2012 : PRINT_DEV_FUNC( 1300 ), rec->cc ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 60	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  0006c	89 44 24 50	 mov	 DWORD PTR tv75[rsp], eax
  00070	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00078	0f b7 49 12	 movzx	 ecx, WORD PTR [rcx+18]
  0007c	89 4c 24 54	 mov	 DWORD PTR tv78[rsp], ecx
  00080	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00088	0f b6 52 11	 movzx	 edx, BYTE PTR [rdx+17]
  0008c	89 54 24 58	 mov	 DWORD PTR tv81[rsp], edx
  00090	bf 01 00 00 00	 mov	 edi, 1
  00095	48 6b ff 0b	 imul	 rdi, rdi, 11
  00099	48 8d 7c 3c 60	 lea	 rdi, QWORD PTR timstr$[rsp+rdi]
  0009e	b9 01 00 00 00	 mov	 ecx, 1
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a9	8b 4c 24 50	 mov	 ecx, DWORD PTR tv75[rsp]
  000ad	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  000b1	8b 4c 24 54	 mov	 ecx, DWORD PTR tv78[rsp]
  000b5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000b9	8b 4c 24 58	 mov	 ecx, DWORD PTR tv81[rsp]
  000bd	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000c1	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  000c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160454
  000cd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000d2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d7	41 b9 03 00 00
	00		 mov	 r9d, 3
  000dd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160455
  000e4	ba dc 07 00 00	 mov	 edx, 2012		; 000007dcH
  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160456
  000f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  000f6	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000fe	48 33 cc	 xor	 rcx, rsp
  00101	e8 00 00 00 00	 call	 __security_check_cookie
  00106	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  0010d	5f		 pop	 rdi
  0010e	c3		 ret	 0
print_TF01300 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv81 = 96
tv84 = 100
tv78 = 104
timstr$ = 112
__$ArrayPad$ = 176
rec$ = 208
print_TF00520 PROC

; 2004 : PRINT_DEV_FUNC0( 0520 ), rec->rba, rec->rba ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 70	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 70	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	48 83 c0 20	 add	 rax, 32			; 00000020H
  0006c	48 89 44 24 68	 mov	 QWORD PTR tv78[rsp], rax
  00071	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00079	0f b7 49 12	 movzx	 ecx, WORD PTR [rcx+18]
  0007d	89 4c 24 60	 mov	 DWORD PTR tv81[rsp], ecx
  00081	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00089	0f b6 52 11	 movzx	 edx, BYTE PTR [rdx+17]
  0008d	89 54 24 64	 mov	 DWORD PTR tv84[rsp], edx
  00091	bf 01 00 00 00	 mov	 edi, 1
  00096	48 6b ff 0b	 imul	 rdi, rdi, 11
  0009a	48 8d 7c 3c 70	 lea	 rdi, QWORD PTR timstr$[rsp+rdi]
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000aa	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000b2	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  000b6	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  000bb	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000c3	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  000c7	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  000cc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv78[rsp]
  000d1	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000d6	8b 4c 24 60	 mov	 ecx, DWORD PTR tv81[rsp]
  000da	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000de	8b 4c 24 64	 mov	 ecx, DWORD PTR tv84[rsp]
  000e2	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000e6	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  000eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160446
  000f2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000fc	41 b9 03 00 00
	00		 mov	 r9d, 3
  00102	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160447
  00109	ba d4 07 00 00	 mov	 edx, 2004		; 000007d4H
  0010e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160448
  00115	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0011b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00123	48 33 cc	 xor	 rcx, rsp
  00126	e8 00 00 00 00	 call	 __security_check_cookie
  0012b	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  00132	5f		 pop	 rdi
  00133	c3		 ret	 0
print_TF00520 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv83 = 112
tv86 = 116
tv80 = 120
timstr$ = 128
__$ArrayPad$ = 192
rec$ = 224
print_TF00519 PROC

; 2001 : PRINT_DEV_FUNC0( 0519 ), rec->blkgrp, rec->offset, rec->len ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb
  00033	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0003b	48 83 c0 08	 add	 rax, 8
  0003f	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00045	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  0004d	48 8b c8	 mov	 rcx, rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00056	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00066	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0006e	48 83 c0 28	 add	 rax, 40			; 00000028H
  00072	48 89 44 24 78	 mov	 QWORD PTR tv80[rsp], rax
  00077	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0007f	0f b7 49 12	 movzx	 ecx, WORD PTR [rcx+18]
  00083	89 4c 24 70	 mov	 DWORD PTR tv83[rsp], ecx
  00087	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  0008f	0f b6 52 11	 movzx	 edx, BYTE PTR [rdx+17]
  00093	89 54 24 74	 mov	 DWORD PTR tv86[rsp], edx
  00097	bf 01 00 00 00	 mov	 edi, 1
  0009c	48 6b ff 0b	 imul	 rdi, rdi, 11
  000a0	48 8d bc 3c 80
	00 00 00	 lea	 rdi, QWORD PTR timstr$[rsp+rdi]
  000a8	b9 01 00 00 00	 mov	 ecx, 1
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000b3	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000bb	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  000be	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  000c2	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000ca	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  000ce	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  000d3	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000db	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  000de	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000e2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv80[rsp]
  000e7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000ec	8b 4c 24 70	 mov	 ecx, DWORD PTR tv83[rsp]
  000f0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000f4	8b 4c 24 74	 mov	 ecx, DWORD PTR tv86[rsp]
  000f8	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000fc	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160438
  00108	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0010d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00112	41 b9 03 00 00
	00		 mov	 r9d, 3
  00118	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160439
  0011f	ba d1 07 00 00	 mov	 edx, 2001		; 000007d1H
  00124	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160440
  0012b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00131	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00139	48 33 cc	 xor	 rcx, rsp
  0013c	e8 00 00 00 00	 call	 __security_check_cookie
  00141	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  00148	5f		 pop	 rdi
  00149	c3		 ret	 0
print_TF00519 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv81 = 96
tv84 = 100
tv78 = 104
timstr$ = 112
__$ArrayPad$ = 176
rec$ = 208
print_TF00518 PROC

; 1998 : PRINT_DEV_FUNC0( 0518 ), rec->blkgrp, rec->idx ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 70	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 70	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	48 83 c0 20	 add	 rax, 32			; 00000020H
  0006c	48 89 44 24 68	 mov	 QWORD PTR tv78[rsp], rax
  00071	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00079	0f b7 49 12	 movzx	 ecx, WORD PTR [rcx+18]
  0007d	89 4c 24 60	 mov	 DWORD PTR tv81[rsp], ecx
  00081	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00089	0f b6 52 11	 movzx	 edx, BYTE PTR [rdx+17]
  0008d	89 54 24 64	 mov	 DWORD PTR tv84[rsp], edx
  00091	bf 01 00 00 00	 mov	 edi, 1
  00096	48 6b ff 0b	 imul	 rdi, rdi, 11
  0009a	48 8d 7c 3c 70	 lea	 rdi, QWORD PTR timstr$[rsp+rdi]
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000aa	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000b2	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  000b5	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  000b9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000c1	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  000c4	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000c8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv78[rsp]
  000cd	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000d2	8b 4c 24 60	 mov	 ecx, DWORD PTR tv81[rsp]
  000d6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000da	8b 4c 24 64	 mov	 ecx, DWORD PTR tv84[rsp]
  000de	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000e2	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160430
  000ee	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f8	41 b9 03 00 00
	00		 mov	 r9d, 3
  000fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160431
  00105	ba ce 07 00 00	 mov	 edx, 1998		; 000007ceH
  0010a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160432
  00111	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00117	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0011f	48 33 cc	 xor	 rcx, rsp
  00122	e8 00 00 00 00	 call	 __security_check_cookie
  00127	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0012e	5f		 pop	 rdi
  0012f	c3		 ret	 0
print_TF00518 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv79 = 96
tv82 = 100
tv76 = 104
timstr$ = 112
__$ArrayPad$ = 176
rec$ = 208
print_TF00517 PROC

; 1995 : PRINT_DEV_FUNC0( 0517 ), rec->blkgrp ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 70	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 70	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	48 83 c0 20	 add	 rax, 32			; 00000020H
  0006c	48 89 44 24 68	 mov	 QWORD PTR tv76[rsp], rax
  00071	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00079	0f b7 49 12	 movzx	 ecx, WORD PTR [rcx+18]
  0007d	89 4c 24 60	 mov	 DWORD PTR tv79[rsp], ecx
  00081	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00089	0f b6 52 11	 movzx	 edx, BYTE PTR [rdx+17]
  0008d	89 54 24 64	 mov	 DWORD PTR tv82[rsp], edx
  00091	bf 01 00 00 00	 mov	 edi, 1
  00096	48 6b ff 0b	 imul	 rdi, rdi, 11
  0009a	48 8d 7c 3c 70	 lea	 rdi, QWORD PTR timstr$[rsp+rdi]
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000aa	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000b2	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  000b5	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000b9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv76[rsp]
  000be	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000c3	8b 4c 24 60	 mov	 ecx, DWORD PTR tv79[rsp]
  000c7	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000cb	8b 4c 24 64	 mov	 ecx, DWORD PTR tv82[rsp]
  000cf	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000d3	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  000d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160422
  000df	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000e4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ef	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160423
  000f6	ba cb 07 00 00	 mov	 edx, 1995		; 000007cbH
  000fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160424
  00102	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00108	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00110	48 33 cc	 xor	 rcx, rsp
  00113	e8 00 00 00 00	 call	 __security_check_cookie
  00118	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0011f	5f		 pop	 rdi
  00120	c3		 ret	 0
print_TF00517 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv81 = 96
tv84 = 100
tv78 = 104
timstr$ = 112
__$ArrayPad$ = 176
rec$ = 208
print_TF00516 PROC

; 1992 : PRINT_DEV_FUNC0( 0516 ), rec->blkgrp, rec->idx ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 70	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 70	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	48 83 c0 20	 add	 rax, 32			; 00000020H
  0006c	48 89 44 24 68	 mov	 QWORD PTR tv78[rsp], rax
  00071	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00079	0f b7 49 12	 movzx	 ecx, WORD PTR [rcx+18]
  0007d	89 4c 24 60	 mov	 DWORD PTR tv81[rsp], ecx
  00081	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00089	0f b6 52 11	 movzx	 edx, BYTE PTR [rdx+17]
  0008d	89 54 24 64	 mov	 DWORD PTR tv84[rsp], edx
  00091	bf 01 00 00 00	 mov	 edi, 1
  00096	48 6b ff 0b	 imul	 rdi, rdi, 11
  0009a	48 8d 7c 3c 70	 lea	 rdi, QWORD PTR timstr$[rsp+rdi]
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000aa	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000b2	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  000b5	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  000b9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000c1	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  000c4	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000c8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv78[rsp]
  000cd	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000d2	8b 4c 24 60	 mov	 ecx, DWORD PTR tv81[rsp]
  000d6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000da	8b 4c 24 64	 mov	 ecx, DWORD PTR tv84[rsp]
  000de	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000e2	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160414
  000ee	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f8	41 b9 03 00 00
	00		 mov	 r9d, 3
  000fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160415
  00105	ba c8 07 00 00	 mov	 edx, 1992		; 000007c8H
  0010a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160416
  00111	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00117	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0011f	48 33 cc	 xor	 rcx, rsp
  00122	e8 00 00 00 00	 call	 __security_check_cookie
  00127	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0012e	5f		 pop	 rdi
  0012f	c3		 ret	 0
print_TF00516 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 96
tv80 = 100
tv77 = 104
tv86 = 112
timstr$ = 128
__$ArrayPad$ = 192
rec$ = 224
print_TF00442 PROC

; 1989 : PRINT_DEV_FUNC0( 0442 ), rec->mask ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb
  00033	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0003b	48 83 c0 08	 add	 rax, 8
  0003f	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00045	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  0004d	48 8b c8	 mov	 rcx, rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00056	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00066	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0006e	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  00072	89 44 24 60	 mov	 DWORD PTR tv75[rsp], eax
  00076	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0007e	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00082	48 89 4c 24 68	 mov	 QWORD PTR tv77[rsp], rcx
  00087	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  0008f	0f b7 52 12	 movzx	 edx, WORD PTR [rdx+18]
  00093	89 54 24 64	 mov	 DWORD PTR tv80[rsp], edx
  00097	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  0009f	0f b6 7f 11	 movzx	 edi, BYTE PTR [rdi+17]
  000a3	41 b8 01 00 00
	00		 mov	 r8d, 1
  000a9	4d 6b c0 0b	 imul	 r8, r8, 11
  000ad	4e 8d 84 04 80
	00 00 00	 lea	 r8, QWORD PTR timstr$[rsp+r8]
  000b5	4c 89 44 24 70	 mov	 QWORD PTR tv86[rsp], r8
  000ba	b9 01 00 00 00	 mov	 ecx, 1
  000bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000c5	8b 4c 24 60	 mov	 ecx, DWORD PTR tv75[rsp]
  000c9	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000cd	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv77[rsp]
  000d2	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000d7	8b 4c 24 64	 mov	 ecx, DWORD PTR tv80[rsp]
  000db	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000df	89 7c 24 38	 mov	 DWORD PTR [rsp+56], edi
  000e3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv86[rsp]
  000e8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160406
  000f4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000fe	41 b9 03 00 00
	00		 mov	 r9d, 3
  00104	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160407
  0010b	ba c5 07 00 00	 mov	 edx, 1989		; 000007c5H
  00110	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160408
  00117	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0011d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00125	48 33 cc	 xor	 rcx, rsp
  00128	e8 00 00 00 00	 call	 __security_check_cookie
  0012d	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  00134	5f		 pop	 rdi
  00135	c3		 ret	 0
print_TF00442 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 112
tv86 = 116
tv83 = 120
tv92 = 128
timstr$ = 144
__$ArrayPad$ = 208
rec$ = 240
print_TF00441 PROC

; 1986 : PRINT_DEV_FUNC0( 0441 ), rec->cyl, rec->head, rec->recnum, rec->datalen ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb
  00033	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0003b	48 83 c0 08	 add	 rax, 8
  0003f	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00045	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  0004d	48 8b c8	 mov	 rcx, rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00056	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00066	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0006e	0f b7 40 24	 movzx	 eax, WORD PTR [rax+36]
  00072	89 44 24 70	 mov	 DWORD PTR tv75[rsp], eax
  00076	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0007e	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00082	48 89 4c 24 78	 mov	 QWORD PTR tv83[rsp], rcx
  00087	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  0008f	0f b7 52 12	 movzx	 edx, WORD PTR [rdx+18]
  00093	89 54 24 74	 mov	 DWORD PTR tv86[rsp], edx
  00097	48 8b bc 24 f0
	00 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  0009f	0f b6 7f 11	 movzx	 edi, BYTE PTR [rdi+17]
  000a3	41 b8 01 00 00
	00		 mov	 r8d, 1
  000a9	4d 6b c0 0b	 imul	 r8, r8, 11
  000ad	4e 8d 84 04 90
	00 00 00	 lea	 r8, QWORD PTR timstr$[rsp+r8]
  000b5	4c 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv92[rsp], r8
  000bd	b9 01 00 00 00	 mov	 ecx, 1
  000c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000c8	8b 4c 24 70	 mov	 ecx, DWORD PTR tv75[rsp]
  000cc	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  000d0	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000d8	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  000db	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  000df	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000e7	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  000ea	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  000ee	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000f6	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  000f9	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000fd	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv83[rsp]
  00102	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00107	8b 4c 24 74	 mov	 ecx, DWORD PTR tv86[rsp]
  0010b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0010f	89 7c 24 38	 mov	 DWORD PTR [rsp+56], edi
  00113	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv92[rsp]
  0011b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00120	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160398
  00127	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0012c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00131	41 b9 03 00 00
	00		 mov	 r9d, 3
  00137	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160399
  0013e	ba c2 07 00 00	 mov	 edx, 1986		; 000007c2H
  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160400
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00150	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00158	48 33 cc	 xor	 rcx, rsp
  0015b	e8 00 00 00 00	 call	 __security_check_cookie
  00160	48 81 c4 e0 00
	00 00		 add	 rsp, 224		; 000000e0H
  00167	5f		 pop	 rdi
  00168	c3		 ret	 0
print_TF00441 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 128
tv88 = 132
tv85 = 136
tv94 = 144
timstr$ = 160
__$ArrayPad$ = 224
rec$ = 256
print_TF00440 PROC

; 1983 : PRINT_DEV_FUNC0( 0440 ), rec->cyl, rec->head, rec->recnum, rec->keylen, rec->datalen ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec f0 00
	00 00		 sub	 rsp, 240		; 000000f0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb
  00033	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0003b	48 83 c0 08	 add	 rax, 8
  0003f	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00045	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  0004d	48 8b c8	 mov	 rcx, rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00056	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00066	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0006e	0f b7 40 28	 movzx	 eax, WORD PTR [rax+40]
  00072	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv75[rsp], eax
  00079	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00081	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00085	48 89 8c 24 88
	00 00 00	 mov	 QWORD PTR tv85[rsp], rcx
  0008d	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00095	0f b7 52 12	 movzx	 edx, WORD PTR [rdx+18]
  00099	89 94 24 84 00
	00 00		 mov	 DWORD PTR tv88[rsp], edx
  000a0	48 8b bc 24 00
	01 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  000a8	0f b6 7f 11	 movzx	 edi, BYTE PTR [rdi+17]
  000ac	41 b8 01 00 00
	00		 mov	 r8d, 1
  000b2	4d 6b c0 0b	 imul	 r8, r8, 11
  000b6	4e 8d 84 04 a0
	00 00 00	 lea	 r8, QWORD PTR timstr$[rsp+r8]
  000be	4c 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv94[rsp], r8
  000c6	b9 01 00 00 00	 mov	 ecx, 1
  000cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000d1	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv75[rsp]
  000d8	89 4c 24 70	 mov	 DWORD PTR [rsp+112], ecx
  000dc	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000e4	8b 49 24	 mov	 ecx, DWORD PTR [rcx+36]
  000e7	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  000eb	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000f3	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  000f6	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  000fa	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00102	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  00105	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00109	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00111	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  00114	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00118	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv85[rsp]
  00120	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00125	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv88[rsp]
  0012c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00130	89 7c 24 38	 mov	 DWORD PTR [rsp+56], edi
  00134	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv94[rsp]
  0013c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00141	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160390
  00148	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0014d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00152	41 b9 03 00 00
	00		 mov	 r9d, 3
  00158	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160391
  0015f	ba bf 07 00 00	 mov	 edx, 1983		; 000007bfH
  00164	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160392
  0016b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00171	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00179	48 33 cc	 xor	 rcx, rsp
  0017c	e8 00 00 00 00	 call	 __security_check_cookie
  00181	48 81 c4 f0 00
	00 00		 add	 rsp, 240		; 000000f0H
  00188	5f		 pop	 rdi
  00189	c3		 ret	 0
print_TF00440 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 112
tv84 = 116
tv81 = 120
tv90 = 128
timstr$ = 144
__$ArrayPad$ = 208
rec$ = 240
print_TF00439 PROC

; 1980 : PRINT_DEV_FUNC0( 0439 ), rec->cyl, rec->head, rec->recnum ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb
  00033	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0003b	48 83 c0 08	 add	 rax, 8
  0003f	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00045	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  0004d	48 8b c8	 mov	 rcx, rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00056	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00066	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0006e	0f b6 40 20	 movzx	 eax, BYTE PTR [rax+32]
  00072	89 44 24 70	 mov	 DWORD PTR tv75[rsp], eax
  00076	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0007e	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00082	48 89 4c 24 78	 mov	 QWORD PTR tv81[rsp], rcx
  00087	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  0008f	0f b7 52 12	 movzx	 edx, WORD PTR [rdx+18]
  00093	89 54 24 74	 mov	 DWORD PTR tv84[rsp], edx
  00097	48 8b bc 24 f0
	00 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  0009f	0f b6 7f 11	 movzx	 edi, BYTE PTR [rdi+17]
  000a3	41 b8 01 00 00
	00		 mov	 r8d, 1
  000a9	4d 6b c0 0b	 imul	 r8, r8, 11
  000ad	4e 8d 84 04 90
	00 00 00	 lea	 r8, QWORD PTR timstr$[rsp+r8]
  000b5	4c 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv90[rsp], r8
  000bd	b9 01 00 00 00	 mov	 ecx, 1
  000c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000c8	8b 4c 24 70	 mov	 ecx, DWORD PTR tv75[rsp]
  000cc	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  000d0	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000d8	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  000db	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  000df	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000e7	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  000ea	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000ee	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv81[rsp]
  000f3	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000f8	8b 4c 24 74	 mov	 ecx, DWORD PTR tv84[rsp]
  000fc	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00100	89 7c 24 38	 mov	 DWORD PTR [rsp+56], edi
  00104	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv90[rsp]
  0010c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00111	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160382
  00118	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0011d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00122	41 b9 03 00 00
	00		 mov	 r9d, 3
  00128	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160383
  0012f	ba bc 07 00 00	 mov	 edx, 1980		; 000007bcH
  00134	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160384
  0013b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00141	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00149	48 33 cc	 xor	 rcx, rsp
  0014c	e8 00 00 00 00	 call	 __security_check_cookie
  00151	48 81 c4 e0 00
	00 00		 add	 rsp, 224		; 000000e0H
  00158	5f		 pop	 rdi
  00159	c3		 ret	 0
print_TF00439 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 128
tv78 = 132
tv81 = 136
tv90 = 140
tv93 = 144
tv128 = 152
timstr$ = 160
__$ArrayPad$ = 224
rec$ = 256
print_TF00438 PROC

; 1977 : PRINT_DEV_FUNC0( 0438 ), rec->cyl, rec->head, rec->recnum, rec->keylen, rec->datalen ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec f0 00
	00 00		 sub	 rsp, 240		; 000000f0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb
  00033	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0003b	48 83 c0 08	 add	 rax, 8
  0003f	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00045	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  0004d	48 8b c8	 mov	 rcx, rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00056	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00066	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0006e	0f b7 40 20	 movzx	 eax, WORD PTR [rax+32]
  00072	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv75[rsp], eax
  00079	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00081	0f b6 49 23	 movzx	 ecx, BYTE PTR [rcx+35]
  00085	89 8c 24 84 00
	00 00		 mov	 DWORD PTR tv78[rsp], ecx
  0008c	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00094	0f b6 52 22	 movzx	 edx, BYTE PTR [rdx+34]
  00098	89 94 24 88 00
	00 00		 mov	 DWORD PTR tv81[rsp], edx
  0009f	48 8b bc 24 00
	01 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  000a7	48 83 c7 28	 add	 rdi, 40			; 00000028H
  000ab	4c 8b 84 24 00
	01 00 00	 mov	 r8, QWORD PTR rec$[rsp]
  000b3	45 0f b7 40 12	 movzx	 r8d, WORD PTR [r8+18]
  000b8	44 89 84 24 8c
	00 00 00	 mov	 DWORD PTR tv90[rsp], r8d
  000c0	4c 8b 8c 24 00
	01 00 00	 mov	 r9, QWORD PTR rec$[rsp]
  000c8	45 0f b6 49 11	 movzx	 r9d, BYTE PTR [r9+17]
  000cd	44 89 8c 24 90
	00 00 00	 mov	 DWORD PTR tv93[rsp], r9d
  000d5	41 ba 01 00 00
	00		 mov	 r10d, 1
  000db	4d 6b d2 0b	 imul	 r10, r10, 11
  000df	4e 8d 94 14 a0
	00 00 00	 lea	 r10, QWORD PTR timstr$[rsp+r10]
  000e7	4c 89 94 24 98
	00 00 00	 mov	 QWORD PTR tv128[rsp], r10
  000ef	b9 01 00 00 00	 mov	 ecx, 1
  000f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000fa	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv75[rsp]
  00101	89 4c 24 70	 mov	 DWORD PTR [rsp+112], ecx
  00105	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv78[rsp]
  0010c	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  00110	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv81[rsp]
  00117	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  0011b	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00123	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  00126	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  0012a	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00132	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  00135	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00139	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  0013e	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv90[rsp]
  00145	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00149	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv93[rsp]
  00150	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00154	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv128[rsp]
  0015c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160374
  00168	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0016d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00172	41 b9 03 00 00
	00		 mov	 r9d, 3
  00178	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160375
  0017f	ba b9 07 00 00	 mov	 edx, 1977		; 000007b9H
  00184	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160376
  0018b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00191	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00199	48 33 cc	 xor	 rcx, rsp
  0019c	e8 00 00 00 00	 call	 __security_check_cookie
  001a1	48 81 c4 f0 00
	00 00		 add	 rsp, 240		; 000000f0H
  001a8	5f		 pop	 rdi
  001a9	c3		 ret	 0
print_TF00438 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 96
tv80 = 100
tv77 = 104
tv86 = 112
timstr$ = 128
__$ArrayPad$ = 192
rec$ = 224
print_TF00437 PROC

; 1974 : PRINT_DEV_FUNC0( 0437 ), rec->dl ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb
  00033	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0003b	48 83 c0 08	 add	 rax, 8
  0003f	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00045	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  0004d	48 8b c8	 mov	 rcx, rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00056	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00066	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0006e	0f b7 40 18	 movzx	 eax, WORD PTR [rax+24]
  00072	89 44 24 60	 mov	 DWORD PTR tv75[rsp], eax
  00076	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0007e	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00082	48 89 4c 24 68	 mov	 QWORD PTR tv77[rsp], rcx
  00087	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  0008f	0f b7 52 12	 movzx	 edx, WORD PTR [rdx+18]
  00093	89 54 24 64	 mov	 DWORD PTR tv80[rsp], edx
  00097	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  0009f	0f b6 7f 11	 movzx	 edi, BYTE PTR [rdi+17]
  000a3	41 b8 01 00 00
	00		 mov	 r8d, 1
  000a9	4d 6b c0 0b	 imul	 r8, r8, 11
  000ad	4e 8d 84 04 80
	00 00 00	 lea	 r8, QWORD PTR timstr$[rsp+r8]
  000b5	4c 89 44 24 70	 mov	 QWORD PTR tv86[rsp], r8
  000ba	b9 01 00 00 00	 mov	 ecx, 1
  000bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000c5	8b 4c 24 60	 mov	 ecx, DWORD PTR tv75[rsp]
  000c9	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000cd	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv77[rsp]
  000d2	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000d7	8b 4c 24 64	 mov	 ecx, DWORD PTR tv80[rsp]
  000db	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000df	89 7c 24 38	 mov	 DWORD PTR [rsp+56], edi
  000e3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv86[rsp]
  000e8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160366
  000f4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000fe	41 b9 03 00 00
	00		 mov	 r9d, 3
  00104	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160367
  0010b	ba b6 07 00 00	 mov	 edx, 1974		; 000007b6H
  00110	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160368
  00117	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0011d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00125	48 33 cc	 xor	 rcx, rsp
  00128	e8 00 00 00 00	 call	 __security_check_cookie
  0012d	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  00134	5f		 pop	 rdi
  00135	c3		 ret	 0
print_TF00437 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv79 = 96
tv82 = 100
tv76 = 104
timstr$ = 112
__$ArrayPad$ = 176
rec$ = 208
print_TF00436 PROC

; 1971 : PRINT_DEV_FUNC0( 0436 ), rec->kl ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 70	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 70	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	48 83 c0 20	 add	 rax, 32			; 00000020H
  0006c	48 89 44 24 68	 mov	 QWORD PTR tv76[rsp], rax
  00071	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00079	0f b7 49 12	 movzx	 ecx, WORD PTR [rcx+18]
  0007d	89 4c 24 60	 mov	 DWORD PTR tv79[rsp], ecx
  00081	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00089	0f b6 52 11	 movzx	 edx, BYTE PTR [rdx+17]
  0008d	89 54 24 64	 mov	 DWORD PTR tv82[rsp], edx
  00091	bf 01 00 00 00	 mov	 edi, 1
  00096	48 6b ff 0b	 imul	 rdi, rdi, 11
  0009a	48 8d 7c 3c 70	 lea	 rdi, QWORD PTR timstr$[rsp+rdi]
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000aa	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000b2	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  000b5	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000b9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv76[rsp]
  000be	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000c3	8b 4c 24 60	 mov	 ecx, DWORD PTR tv79[rsp]
  000c7	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000cb	8b 4c 24 64	 mov	 ecx, DWORD PTR tv82[rsp]
  000cf	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000d3	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  000d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160358
  000df	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000e4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ef	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160359
  000f6	ba b3 07 00 00	 mov	 edx, 1971		; 000007b3H
  000fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160360
  00102	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00108	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00110	48 33 cc	 xor	 rcx, rsp
  00113	e8 00 00 00 00	 call	 __security_check_cookie
  00118	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0011f	5f		 pop	 rdi
  00120	c3		 ret	 0
print_TF00436 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv77 = 128
tv90 = 132
tv87 = 136
tv128 = 144
timstr$ = 160
__$ArrayPad$ = 224
rec$ = 256
print_TF00435 PROC

; 1968 : PRINT_DEV_FUNC0( 0435 ), rec->cyl, rec->head, rec->record, rec->kl, rec->dl, rec->offset ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec f0 00
	00 00		 sub	 rsp, 240		; 000000f0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb
  00033	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0003b	48 83 c0 08	 add	 rax, 8
  0003f	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00045	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  0004d	48 8b c8	 mov	 rcx, rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00056	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00066	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0006e	0f b7 40 18	 movzx	 eax, WORD PTR [rax+24]
  00072	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv77[rsp], eax
  00079	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00081	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00085	48 89 8c 24 88
	00 00 00	 mov	 QWORD PTR tv87[rsp], rcx
  0008d	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00095	0f b7 52 12	 movzx	 edx, WORD PTR [rdx+18]
  00099	89 94 24 84 00
	00 00		 mov	 DWORD PTR tv90[rsp], edx
  000a0	48 8b bc 24 00
	01 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  000a8	0f b6 7f 11	 movzx	 edi, BYTE PTR [rdi+17]
  000ac	41 b8 01 00 00
	00		 mov	 r8d, 1
  000b2	4d 6b c0 0b	 imul	 r8, r8, 11
  000b6	4e 8d 84 04 a0
	00 00 00	 lea	 r8, QWORD PTR timstr$[rsp+r8]
  000be	4c 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv128[rsp], r8
  000c6	b9 01 00 00 00	 mov	 ecx, 1
  000cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000d1	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000d9	8b 49 2c	 mov	 ecx, DWORD PTR [rcx+44]
  000dc	89 4c 24 78	 mov	 DWORD PTR [rsp+120], ecx
  000e0	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv77[rsp]
  000e7	89 4c 24 70	 mov	 DWORD PTR [rsp+112], ecx
  000eb	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000f3	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  000f6	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  000fa	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00102	8b 49 24	 mov	 ecx, DWORD PTR [rcx+36]
  00105	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  00109	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00111	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  00114	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00118	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00120	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  00123	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00127	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv87[rsp]
  0012f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00134	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv90[rsp]
  0013b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0013f	89 7c 24 38	 mov	 DWORD PTR [rsp+56], edi
  00143	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv128[rsp]
  0014b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00150	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160350
  00157	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0015c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00161	41 b9 03 00 00
	00		 mov	 r9d, 3
  00167	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160351
  0016e	ba b0 07 00 00	 mov	 edx, 1968		; 000007b0H
  00173	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160352
  0017a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00180	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00188	48 33 cc	 xor	 rcx, rsp
  0018b	e8 00 00 00 00	 call	 __security_check_cookie
  00190	48 81 c4 f0 00
	00 00		 add	 rsp, 240		; 000000f0H
  00197	5f		 pop	 rdi
  00198	c3		 ret	 0
print_TF00435 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv85 = 96
tv130 = 104
tv75 = 112
tv79 = 120
tv88 = 128
timstr$ = 144
__$ArrayPad$ = 208
rec$ = 240
print_TF00434 PROC

; 1965 : PRINT_DEV_FUNC0( 0434 ), orient[ rec->orient ] ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb
  00033	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0003b	48 83 c0 08	 add	 rax, 8
  0003f	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00045	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  0004d	48 8b c8	 mov	 rcx, rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00056	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00066	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0006e	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  00072	48 89 44 24 70	 mov	 QWORD PTR tv75[rsp], rax
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:orient
  0007e	48 89 4c 24 68	 mov	 QWORD PTR tv130[rsp], rcx
  00083	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  0008b	48 83 c2 20	 add	 rdx, 32			; 00000020H
  0008f	48 89 54 24 78	 mov	 QWORD PTR tv79[rsp], rdx
  00094	48 8b bc 24 f0
	00 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  0009c	0f b7 7f 12	 movzx	 edi, WORD PTR [rdi+18]
  000a0	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR rec$[rsp]
  000a8	45 0f b6 40 11	 movzx	 r8d, BYTE PTR [r8+17]
  000ad	44 89 44 24 60	 mov	 DWORD PTR tv85[rsp], r8d
  000b2	41 b9 01 00 00
	00		 mov	 r9d, 1
  000b8	4d 6b c9 0b	 imul	 r9, r9, 11
  000bc	4e 8d 8c 0c 90
	00 00 00	 lea	 r9, QWORD PTR timstr$[rsp+r9]
  000c4	4c 89 8c 24 80
	00 00 00	 mov	 QWORD PTR tv88[rsp], r9
  000cc	b9 01 00 00 00	 mov	 ecx, 1
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000d7	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv130[rsp]
  000dc	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv75[rsp]
  000e1	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  000e5	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  000ea	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv79[rsp]
  000ef	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000f4	89 7c 24 40	 mov	 DWORD PTR [rsp+64], edi
  000f8	8b 4c 24 60	 mov	 ecx, DWORD PTR tv85[rsp]
  000fc	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00100	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv88[rsp]
  00108	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0010d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160342
  00114	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00119	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0011e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00124	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160343
  0012b	ba ad 07 00 00	 mov	 edx, 1965		; 000007adH
  00130	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160344
  00137	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0013d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00145	48 33 cc	 xor	 rcx, rsp
  00148	e8 00 00 00 00	 call	 __security_check_cookie
  0014d	48 81 c4 e0 00
	00 00		 add	 rsp, 224		; 000000e0H
  00154	5f		 pop	 rdi
  00155	c3		 ret	 0
print_TF00434 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv81 = 96
tv84 = 100
tv78 = 104
timstr$ = 112
__$ArrayPad$ = 176
rec$ = 208
print_TF00433 PROC

; 1961 : PRINT_DEV_FUNC0( 0433 ), rec->cyl, rec->head ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 70	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 70	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	48 83 c0 20	 add	 rax, 32			; 00000020H
  0006c	48 89 44 24 68	 mov	 QWORD PTR tv78[rsp], rax
  00071	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00079	0f b7 49 12	 movzx	 ecx, WORD PTR [rcx+18]
  0007d	89 4c 24 60	 mov	 DWORD PTR tv81[rsp], ecx
  00081	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00089	0f b6 52 11	 movzx	 edx, BYTE PTR [rdx+17]
  0008d	89 54 24 64	 mov	 DWORD PTR tv84[rsp], edx
  00091	bf 01 00 00 00	 mov	 edi, 1
  00096	48 6b ff 0b	 imul	 rdi, rdi, 11
  0009a	48 8d 7c 3c 70	 lea	 rdi, QWORD PTR timstr$[rsp+rdi]
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000aa	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000b2	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  000b5	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  000b9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000c1	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  000c4	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000c8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv78[rsp]
  000cd	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000d2	8b 4c 24 60	 mov	 ecx, DWORD PTR tv81[rsp]
  000d6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000da	8b 4c 24 64	 mov	 ecx, DWORD PTR tv84[rsp]
  000de	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000e2	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160327
  000ee	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f8	41 b9 03 00 00
	00		 mov	 r9d, 3
  000fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160328
  00105	ba a9 07 00 00	 mov	 edx, 1961		; 000007a9H
  0010a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160329
  00111	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00117	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0011f	48 33 cc	 xor	 rcx, rsp
  00122	e8 00 00 00 00	 call	 __security_check_cookie
  00127	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0012e	5f		 pop	 rdi
  0012f	c3		 ret	 0
print_TF00433 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 96
tv78 = 100
tv86 = 104
tv80 = 112
tv89 = 120
timstr$ = 128
__$ArrayPad$ = 192
rec$ = 224
print_TF00432 PROC

; 1958 : PRINT_DEV_FUNC0( 0432 ), rec->count, rec->mask ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb
  00033	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0003b	48 83 c0 08	 add	 rax, 8
  0003f	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00045	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  0004d	48 8b c8	 mov	 rcx, rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00056	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00066	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0006e	0f b6 40 19	 movzx	 eax, BYTE PTR [rax+25]
  00072	89 44 24 60	 mov	 DWORD PTR tv75[rsp], eax
  00076	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0007e	0f b6 49 18	 movzx	 ecx, BYTE PTR [rcx+24]
  00082	89 4c 24 64	 mov	 DWORD PTR tv78[rsp], ecx
  00086	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  0008e	48 83 c2 20	 add	 rdx, 32			; 00000020H
  00092	48 89 54 24 70	 mov	 QWORD PTR tv80[rsp], rdx
  00097	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  0009f	0f b7 7f 12	 movzx	 edi, WORD PTR [rdi+18]
  000a3	4c 8b 84 24 e0
	00 00 00	 mov	 r8, QWORD PTR rec$[rsp]
  000ab	45 0f b6 40 11	 movzx	 r8d, BYTE PTR [r8+17]
  000b0	44 89 44 24 68	 mov	 DWORD PTR tv86[rsp], r8d
  000b5	41 b9 01 00 00
	00		 mov	 r9d, 1
  000bb	4d 6b c9 0b	 imul	 r9, r9, 11
  000bf	4e 8d 8c 0c 80
	00 00 00	 lea	 r9, QWORD PTR timstr$[rsp+r9]
  000c7	4c 89 4c 24 78	 mov	 QWORD PTR tv89[rsp], r9
  000cc	b9 01 00 00 00	 mov	 ecx, 1
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000d7	8b 4c 24 60	 mov	 ecx, DWORD PTR tv75[rsp]
  000db	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  000df	8b 4c 24 64	 mov	 ecx, DWORD PTR tv78[rsp]
  000e3	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000e7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv80[rsp]
  000ec	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000f1	89 7c 24 40	 mov	 DWORD PTR [rsp+64], edi
  000f5	8b 4c 24 68	 mov	 ecx, DWORD PTR tv86[rsp]
  000f9	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000fd	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv89[rsp]
  00102	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00107	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160319
  0010e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00113	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00118	41 b9 03 00 00
	00		 mov	 r9d, 3
  0011e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160320
  00125	ba a6 07 00 00	 mov	 edx, 1958		; 000007a6H
  0012a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160321
  00131	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00137	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0013f	48 33 cc	 xor	 rcx, rsp
  00142	e8 00 00 00 00	 call	 __security_check_cookie
  00147	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  0014e	5f		 pop	 rdi
  0014f	c3		 ret	 0
print_TF00432 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv81 = 96
tv84 = 100
tv78 = 104
timstr$ = 112
__$ArrayPad$ = 176
rec$ = 208
print_TF00431 PROC

; 1955 : PRINT_DEV_FUNC0( 0431 ), rec->cyl, rec->head ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 70	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 70	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	48 83 c0 20	 add	 rax, 32			; 00000020H
  0006c	48 89 44 24 68	 mov	 QWORD PTR tv78[rsp], rax
  00071	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00079	0f b7 49 12	 movzx	 ecx, WORD PTR [rcx+18]
  0007d	89 4c 24 60	 mov	 DWORD PTR tv81[rsp], ecx
  00081	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00089	0f b6 52 11	 movzx	 edx, BYTE PTR [rdx+17]
  0008d	89 54 24 64	 mov	 DWORD PTR tv84[rsp], edx
  00091	bf 01 00 00 00	 mov	 edi, 1
  00096	48 6b ff 0b	 imul	 rdi, rdi, 11
  0009a	48 8d 7c 3c 70	 lea	 rdi, QWORD PTR timstr$[rsp+rdi]
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000aa	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000b2	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  000b5	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  000b9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000c1	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  000c4	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000c8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv78[rsp]
  000cd	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000d2	8b 4c 24 60	 mov	 ecx, DWORD PTR tv81[rsp]
  000d6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000da	8b 4c 24 64	 mov	 ecx, DWORD PTR tv84[rsp]
  000de	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000e2	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160311
  000ee	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f8	41 b9 03 00 00
	00		 mov	 r9d, 3
  000fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160312
  00105	ba a3 07 00 00	 mov	 edx, 1955		; 000007a3H
  0010a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160313
  00111	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00117	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0011f	48 33 cc	 xor	 rcx, rsp
  00122	e8 00 00 00 00	 call	 __security_check_cookie
  00127	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0012e	5f		 pop	 rdi
  0012f	c3		 ret	 0
print_TF00431 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv77 = 128
tv82 = 132
tv87 = 136
tv129 = 140
tv136 = 144
tv139 = 148
tv133 = 152
timstr$ = 160
__$ArrayPad$ = 224
rec$ = 272
print_TF00430 PROC

; 1952 : PRINT_DEV_FUNC0( 0430 ), rec->trk, rec->buf[0], rec->buf[1], rec->buf[2], rec->buf[3], rec->buf[4] ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	53		 push	 rbx
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00015	48 33 c4	 xor	 rax, rsp
  00018	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00020	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  00028	48 8b f8	 mov	 rdi, rax
  0002b	33 c0		 xor	 eax, eax
  0002d	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00032	f3 aa		 rep stosb
  00034	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0003c	48 83 c0 08	 add	 rax, 8
  00040	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00046	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  0004e	48 8b c8	 mov	 rcx, rax
  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00057	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0005f	48 8b c8	 mov	 rcx, rax
  00062	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00067	b8 01 00 00 00	 mov	 eax, 1
  0006c	48 6b c0 04	 imul	 rax, rax, 4
  00070	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00078	0f b6 44 01 1c	 movzx	 eax, BYTE PTR [rcx+rax+28]
  0007d	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv77[rsp], eax
  00084	b9 01 00 00 00	 mov	 ecx, 1
  00089	48 6b c9 03	 imul	 rcx, rcx, 3
  0008d	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00095	0f b6 4c 0a 1c	 movzx	 ecx, BYTE PTR [rdx+rcx+28]
  0009a	89 8c 24 84 00
	00 00		 mov	 DWORD PTR tv82[rsp], ecx
  000a1	ba 01 00 00 00	 mov	 edx, 1
  000a6	48 6b d2 02	 imul	 rdx, rdx, 2
  000aa	48 8b bc 24 10
	01 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  000b2	0f b6 54 17 1c	 movzx	 edx, BYTE PTR [rdi+rdx+28]
  000b7	89 94 24 88 00
	00 00		 mov	 DWORD PTR tv87[rsp], edx
  000be	bf 01 00 00 00	 mov	 edi, 1
  000c3	48 6b ff 01	 imul	 rdi, rdi, 1
  000c7	4c 8b 84 24 10
	01 00 00	 mov	 r8, QWORD PTR rec$[rsp]
  000cf	41 0f b6 7c 38
	1c		 movzx	 edi, BYTE PTR [r8+rdi+28]
  000d5	41 b8 01 00 00
	00		 mov	 r8d, 1
  000db	4d 6b c0 00	 imul	 r8, r8, 0
  000df	4c 8b 8c 24 10
	01 00 00	 mov	 r9, QWORD PTR rec$[rsp]
  000e7	47 0f b6 44 01
	1c		 movzx	 r8d, BYTE PTR [r9+r8+28]
  000ed	44 89 84 24 8c
	00 00 00	 mov	 DWORD PTR tv129[rsp], r8d
  000f5	4c 8b 8c 24 10
	01 00 00	 mov	 r9, QWORD PTR rec$[rsp]
  000fd	49 83 c1 28	 add	 r9, 40			; 00000028H
  00101	4c 89 8c 24 98
	00 00 00	 mov	 QWORD PTR tv133[rsp], r9
  00109	4c 8b 94 24 10
	01 00 00	 mov	 r10, QWORD PTR rec$[rsp]
  00111	45 0f b7 52 12	 movzx	 r10d, WORD PTR [r10+18]
  00116	44 89 94 24 90
	00 00 00	 mov	 DWORD PTR tv136[rsp], r10d
  0011e	4c 8b 9c 24 10
	01 00 00	 mov	 r11, QWORD PTR rec$[rsp]
  00126	45 0f b6 5b 11	 movzx	 r11d, BYTE PTR [r11+17]
  0012b	44 89 9c 24 94
	00 00 00	 mov	 DWORD PTR tv139[rsp], r11d
  00133	bb 01 00 00 00	 mov	 ebx, 1
  00138	48 6b db 0b	 imul	 rbx, rbx, 11
  0013c	48 8d 9c 1c a0
	00 00 00	 lea	 rbx, QWORD PTR timstr$[rsp+rbx]
  00144	b9 01 00 00 00	 mov	 ecx, 1
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0014f	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv77[rsp]
  00156	89 4c 24 78	 mov	 DWORD PTR [rsp+120], ecx
  0015a	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv82[rsp]
  00161	89 4c 24 70	 mov	 DWORD PTR [rsp+112], ecx
  00165	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv87[rsp]
  0016c	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  00170	89 7c 24 60	 mov	 DWORD PTR [rsp+96], edi
  00174	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv129[rsp]
  0017b	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  0017f	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00187	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  0018a	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  0018e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv133[rsp]
  00196	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0019b	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv136[rsp]
  001a2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001a6	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv139[rsp]
  001ad	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  001b1	48 89 5c 24 30	 mov	 QWORD PTR [rsp+48], rbx
  001b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160303
  001bd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001c2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001c7	41 b9 03 00 00
	00		 mov	 r9d, 3
  001cd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160304
  001d4	ba a0 07 00 00	 mov	 edx, 1952		; 000007a0H
  001d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160305
  001e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  001e6	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001ee	48 33 cc	 xor	 rcx, rsp
  001f1	e8 00 00 00 00	 call	 __security_check_cookie
  001f6	48 81 c4 f8 00
	00 00		 add	 rsp, 248		; 000000f8H
  001fd	5f		 pop	 rdi
  001fe	5b		 pop	 rbx
  001ff	c3		 ret	 0
print_TF00430 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv85 = 112
tv88 = 116
tv82 = 120
timstr$ = 128
__$ArrayPad$ = 192
rec$ = 224
print_TF00429 PROC

; 1949 : PRINT_DEV_FUNC0( 0429 ), rec->trk, rec->fnum, rec->offset, rec->len ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb
  00033	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0003b	48 83 c0 08	 add	 rax, 8
  0003f	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00045	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  0004d	48 8b c8	 mov	 rcx, rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00056	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00066	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0006e	48 83 c0 30	 add	 rax, 48			; 00000030H
  00072	48 89 44 24 78	 mov	 QWORD PTR tv82[rsp], rax
  00077	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0007f	0f b7 49 12	 movzx	 ecx, WORD PTR [rcx+18]
  00083	89 4c 24 70	 mov	 DWORD PTR tv85[rsp], ecx
  00087	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  0008f	0f b6 52 11	 movzx	 edx, BYTE PTR [rdx+17]
  00093	89 54 24 74	 mov	 DWORD PTR tv88[rsp], edx
  00097	bf 01 00 00 00	 mov	 edi, 1
  0009c	48 6b ff 0b	 imul	 rdi, rdi, 11
  000a0	48 8d bc 3c 80
	00 00 00	 lea	 rdi, QWORD PTR timstr$[rsp+rdi]
  000a8	b9 01 00 00 00	 mov	 ecx, 1
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000b3	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000bb	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  000be	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  000c2	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000ca	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  000ce	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  000d3	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000db	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  000de	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  000e2	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000ea	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  000ed	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000f1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv82[rsp]
  000f6	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000fb	8b 4c 24 70	 mov	 ecx, DWORD PTR tv85[rsp]
  000ff	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00103	8b 4c 24 74	 mov	 ecx, DWORD PTR tv88[rsp]
  00107	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0010b	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  00110	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160295
  00117	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0011c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00121	41 b9 03 00 00
	00		 mov	 r9d, 3
  00127	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160296
  0012e	ba 9d 07 00 00	 mov	 edx, 1949		; 0000079dH
  00133	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160297
  0013a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00140	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00148	48 33 cc	 xor	 rcx, rsp
  0014b	e8 00 00 00 00	 call	 __security_check_cookie
  00150	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  00157	5f		 pop	 rdi
  00158	c3		 ret	 0
print_TF00429 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv81 = 96
tv84 = 100
tv78 = 104
timstr$ = 112
__$ArrayPad$ = 176
rec$ = 208
print_TF00428 PROC

; 1946 : PRINT_DEV_FUNC0( 0428 ), rec->trk, rec->idx ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 70	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 70	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	48 83 c0 20	 add	 rax, 32			; 00000020H
  0006c	48 89 44 24 68	 mov	 QWORD PTR tv78[rsp], rax
  00071	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00079	0f b7 49 12	 movzx	 ecx, WORD PTR [rcx+18]
  0007d	89 4c 24 60	 mov	 DWORD PTR tv81[rsp], ecx
  00081	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00089	0f b6 52 11	 movzx	 edx, BYTE PTR [rdx+17]
  0008d	89 54 24 64	 mov	 DWORD PTR tv84[rsp], edx
  00091	bf 01 00 00 00	 mov	 edi, 1
  00096	48 6b ff 0b	 imul	 rdi, rdi, 11
  0009a	48 8d 7c 3c 70	 lea	 rdi, QWORD PTR timstr$[rsp+rdi]
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000aa	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000b2	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  000b5	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  000b9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000c1	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  000c4	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000c8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv78[rsp]
  000cd	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000d2	8b 4c 24 60	 mov	 ecx, DWORD PTR tv81[rsp]
  000d6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000da	8b 4c 24 64	 mov	 ecx, DWORD PTR tv84[rsp]
  000de	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000e2	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160287
  000ee	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f8	41 b9 03 00 00
	00		 mov	 r9d, 3
  000fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160288
  00105	ba 9a 07 00 00	 mov	 edx, 1946		; 0000079aH
  0010a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160289
  00111	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00117	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0011f	48 33 cc	 xor	 rcx, rsp
  00122	e8 00 00 00 00	 call	 __security_check_cookie
  00127	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0012e	5f		 pop	 rdi
  0012f	c3		 ret	 0
print_TF00428 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv79 = 96
tv82 = 100
tv76 = 104
timstr$ = 112
__$ArrayPad$ = 176
rec$ = 208
print_TF00427 PROC

; 1943 : PRINT_DEV_FUNC0( 0427 ), rec->trk ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 70	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 70	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	48 83 c0 20	 add	 rax, 32			; 00000020H
  0006c	48 89 44 24 68	 mov	 QWORD PTR tv76[rsp], rax
  00071	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00079	0f b7 49 12	 movzx	 ecx, WORD PTR [rcx+18]
  0007d	89 4c 24 60	 mov	 DWORD PTR tv79[rsp], ecx
  00081	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00089	0f b6 52 11	 movzx	 edx, BYTE PTR [rdx+17]
  0008d	89 54 24 64	 mov	 DWORD PTR tv82[rsp], edx
  00091	bf 01 00 00 00	 mov	 edi, 1
  00096	48 6b ff 0b	 imul	 rdi, rdi, 11
  0009a	48 8d 7c 3c 70	 lea	 rdi, QWORD PTR timstr$[rsp+rdi]
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000aa	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000b2	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  000b5	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000b9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv76[rsp]
  000be	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000c3	8b 4c 24 60	 mov	 ecx, DWORD PTR tv79[rsp]
  000c7	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000cb	8b 4c 24 64	 mov	 ecx, DWORD PTR tv82[rsp]
  000cf	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000d3	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  000d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160279
  000df	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000e4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ef	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160280
  000f6	ba 97 07 00 00	 mov	 edx, 1943		; 00000797H
  000fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160281
  00102	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00108	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00110	48 33 cc	 xor	 rcx, rsp
  00113	e8 00 00 00 00	 call	 __security_check_cookie
  00118	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0011f	5f		 pop	 rdi
  00120	c3		 ret	 0
print_TF00427 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv81 = 96
tv84 = 100
tv78 = 104
timstr$ = 112
__$ArrayPad$ = 176
rec$ = 208
print_TF00426 PROC

; 1940 : PRINT_DEV_FUNC0( 0426 ), rec->trk, rec->idx ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 70	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 70	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	48 83 c0 20	 add	 rax, 32			; 00000020H
  0006c	48 89 44 24 68	 mov	 QWORD PTR tv78[rsp], rax
  00071	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00079	0f b7 49 12	 movzx	 ecx, WORD PTR [rcx+18]
  0007d	89 4c 24 60	 mov	 DWORD PTR tv81[rsp], ecx
  00081	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00089	0f b6 52 11	 movzx	 edx, BYTE PTR [rdx+17]
  0008d	89 54 24 64	 mov	 DWORD PTR tv84[rsp], edx
  00091	bf 01 00 00 00	 mov	 edi, 1
  00096	48 6b ff 0b	 imul	 rdi, rdi, 11
  0009a	48 8d 7c 3c 70	 lea	 rdi, QWORD PTR timstr$[rsp+rdi]
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000aa	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000b2	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  000b5	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  000b9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000c1	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  000c4	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000c8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv78[rsp]
  000cd	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000d2	8b 4c 24 60	 mov	 ecx, DWORD PTR tv81[rsp]
  000d6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000da	8b 4c 24 64	 mov	 ecx, DWORD PTR tv84[rsp]
  000de	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000e2	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160271
  000ee	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f8	41 b9 03 00 00
	00		 mov	 r9d, 3
  000fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160272
  00105	ba 94 07 00 00	 mov	 edx, 1940		; 00000794H
  0010a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160273
  00111	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00117	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0011f	48 33 cc	 xor	 rcx, rsp
  00122	e8 00 00 00 00	 call	 __security_check_cookie
  00127	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0012e	5f		 pop	 rdi
  0012f	c3		 ret	 0
print_TF00426 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv79 = 96
tv82 = 100
tv76 = 104
timstr$ = 112
__$ArrayPad$ = 176
rec$ = 208
print_TF00425 PROC

; 1937 : PRINT_DEV_FUNC0( 0425 ), rec->bufcur ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 70	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 70	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	48 83 c0 20	 add	 rax, 32			; 00000020H
  0006c	48 89 44 24 68	 mov	 QWORD PTR tv76[rsp], rax
  00071	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00079	0f b7 49 12	 movzx	 ecx, WORD PTR [rcx+18]
  0007d	89 4c 24 60	 mov	 DWORD PTR tv79[rsp], ecx
  00081	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00089	0f b6 52 11	 movzx	 edx, BYTE PTR [rdx+17]
  0008d	89 54 24 64	 mov	 DWORD PTR tv82[rsp], edx
  00091	bf 01 00 00 00	 mov	 edi, 1
  00096	48 6b ff 0b	 imul	 rdi, rdi, 11
  0009a	48 8d 7c 3c 70	 lea	 rdi, QWORD PTR timstr$[rsp+rdi]
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000aa	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000b2	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  000b5	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000b9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv76[rsp]
  000be	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000c3	8b 4c 24 60	 mov	 ecx, DWORD PTR tv79[rsp]
  000c7	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000cb	8b 4c 24 64	 mov	 ecx, DWORD PTR tv82[rsp]
  000cf	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000d3	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  000d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160263
  000df	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000e4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ef	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160264
  000f6	ba 91 07 00 00	 mov	 edx, 1937		; 00000791H
  000fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160265
  00102	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00108	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00110	48 33 cc	 xor	 rcx, rsp
  00113	e8 00 00 00 00	 call	 __security_check_cookie
  00118	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0011f	5f		 pop	 rdi
  00120	c3		 ret	 0
print_TF00425 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv81 = 96
tv84 = 100
tv78 = 104
timstr$ = 112
__$ArrayPad$ = 176
rec$ = 208
print_TF00424 PROC

; 1934 : PRINT_DEV_FUNC0( 0424 ), rec->trk, rec->bufcur ); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 44 24 70	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb
  00030	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 70	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00050	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00060	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	48 83 c0 20	 add	 rax, 32			; 00000020H
  0006c	48 89 44 24 68	 mov	 QWORD PTR tv78[rsp], rax
  00071	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00079	0f b7 49 12	 movzx	 ecx, WORD PTR [rcx+18]
  0007d	89 4c 24 60	 mov	 DWORD PTR tv81[rsp], ecx
  00081	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00089	0f b6 52 11	 movzx	 edx, BYTE PTR [rdx+17]
  0008d	89 54 24 64	 mov	 DWORD PTR tv84[rsp], edx
  00091	bf 01 00 00 00	 mov	 edi, 1
  00096	48 6b ff 0b	 imul	 rdi, rdi, 11
  0009a	48 8d 7c 3c 70	 lea	 rdi, QWORD PTR timstr$[rsp+rdi]
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000aa	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000b2	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  000b5	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  000b9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000c1	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  000c4	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000c8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv78[rsp]
  000cd	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000d2	8b 4c 24 60	 mov	 ecx, DWORD PTR tv81[rsp]
  000d6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000da	8b 4c 24 64	 mov	 ecx, DWORD PTR tv84[rsp]
  000de	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000e2	48 89 7c 24 30	 mov	 QWORD PTR [rsp+48], rdi
  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160255
  000ee	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f8	41 b9 03 00 00
	00		 mov	 r9d, 3
  000fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160256
  00105	ba 8e 07 00 00	 mov	 edx, 1934		; 0000078eH
  0010a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160257
  00111	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00117	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0011f	48 33 cc	 xor	 rcx, rsp
  00122	e8 00 00 00 00	 call	 __security_check_cookie
  00127	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0012e	5f		 pop	 rdi
  0012f	c3		 ret	 0
print_TF00424 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv89 = 96
tv82 = 104
tv74 = 112
tv86 = 120
tv95 = 128
timstr$ = 144
__$ArrayPad$ = 208
rec$ = 240
print_TF00423 PROC

; 1931 : PRINT_DEV_FUNC0( 0423 ), RTRIM( str_guest_to_host( rec->key, rec->key, rec->kl ))); }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0001f	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb
  00033	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0003b	48 83 c0 08	 add	 rax, 8
  0003f	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00045	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  0004d	48 8b c8	 mov	 rcx, rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL
  00056	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 tf_dev_do_blank_sep
  00066	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0006e	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  00072	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0007a	48 83 c1 19	 add	 rcx, 25
  0007e	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00086	48 83 c2 19	 add	 rdx, 25
  0008a	48 89 54 24 68	 mov	 QWORD PTR tv82[rsp], rdx
  0008f	44 8b c0	 mov	 r8d, eax
  00092	48 8b d1	 mov	 rdx, rcx
  00095	48 8b 44 24 68	 mov	 rax, QWORD PTR tv82[rsp]
  0009a	48 8b c8	 mov	 rcx, rax
  0009d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_str_guest_to_host
  000a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160246
  000aa	48 8b c8	 mov	 rcx, rax
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rtrim
  000b3	48 89 44 24 70	 mov	 QWORD PTR tv74[rsp], rax
  000b8	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000c0	48 83 c1 48	 add	 rcx, 72			; 00000048H
  000c4	48 89 4c 24 78	 mov	 QWORD PTR tv86[rsp], rcx
  000c9	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  000d1	0f b7 52 12	 movzx	 edx, WORD PTR [rdx+18]
  000d5	89 54 24 60	 mov	 DWORD PTR tv89[rsp], edx
  000d9	48 8b bc 24 f0
	00 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  000e1	0f b6 7f 11	 movzx	 edi, BYTE PTR [rdi+17]
  000e5	41 b8 01 00 00
	00		 mov	 r8d, 1
  000eb	4d 6b c0 0b	 imul	 r8, r8, 11
  000ef	4e 8d 84 04 90
	00 00 00	 lea	 r8, QWORD PTR timstr$[rsp+r8]
  000f7	4c 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv95[rsp], r8
  000ff	b9 01 00 00 00	 mov	 ecx, 1
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0010a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv74[rsp]
  0010f	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00114	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv86[rsp]
  00119	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0011e	8b 4c 24 60	 mov	 ecx, DWORD PTR tv89[rsp]
  00122	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00126	89 7c 24 38	 mov	 DWORD PTR [rsp+56], edi
  0012a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv95[rsp]
  00132	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00137	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160247
  0013e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00143	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00148	41 b9 03 00 00
	00		 mov	 r9d, 3
  0014e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160248
  00155	ba 8b 07 00 00	 mov	 edx, 1931		; 0000078bH
  0015a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160249
  00161	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00167	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0016f	48 33 cc	 xor	 rcx, rsp
  00172	e8 00 00 00 00	 call	 __security_check_cookie
  00177	48 81 c4 e0 00
	00 00		 add	 rsp, 224		; 000000e0H
  0017e	5f		 pop	 rdi
  0017f	c3		 ret	 0
print_TF00423 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv167 = 160
tv171 = 164
$T1 = 168
$T2 = 176
p$3 = 184
char_buf$ = 192
byte_buf$ = 224
__$ArrayPad$ = 288
data$ = 384
amt$ = 392
fmtdata	PROC

; 1892 : {

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	53		 push	 rbx
  0000a	55		 push	 rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	41 54		 push	 r12
  0000f	41 55		 push	 r13
  00011	41 56		 push	 r14
  00013	41 57		 push	 r15
  00015	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1893 :     static char both_buf[96] = {0};
; 1894 :            char byte_buf[64] = {0};

  0002e	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR byte_buf$[rsp]
  00036	48 8b f8	 mov	 rdi, rax
  00039	33 c0		 xor	 eax, eax
  0003b	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00040	f3 aa		 rep stosb

; 1895 :            char char_buf[32] = {0};

  00042	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR char_buf$[rsp]
  0004a	48 8b f8	 mov	 rdi, rax
  0004d	33 c0		 xor	 eax, eax
  0004f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00054	f3 aa		 rep stosb

; 1896 : 
; 1897 :     if (amt > 16) CRASH();  // (sanity check)

  00056	0f b6 84 24 88
	01 00 00	 movzx	 eax, BYTE PTR amt$[rsp]
  0005e	83 f8 10	 cmp	 eax, 16
  00061	7e 1d		 jle	 SHORT $LN5@fmtdata
$LN4@fmtdata:
  00063	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR p$3[rsp], 0
  0006f	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR p$3[rsp]
  00077	c6 00 00	 mov	 BYTE PTR [rax], 0
  0007a	33 c0		 xor	 eax, eax
  0007c	85 c0		 test	 eax, eax
  0007e	75 e3		 jne	 SHORT $LN4@fmtdata
$LN5@fmtdata:

; 1898 : 
; 1899 :     if (!amt)   // (might be e.g. TIC, which doesn't xfer any data)

  00080	0f b6 84 24 88
	01 00 00	 movzx	 eax, BYTE PTR amt$[rsp]
  00088	85 c0		 test	 eax, eax
  0008a	75 42		 jne	 SHORT $LN6@fmtdata

; 1900 :     {
; 1901 :         both_buf[0] = 0;

  0008c	b8 01 00 00 00	 mov	 eax, 1
  00091	48 6b c0 00	 imul	 rax, rax, 0
  00095	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR $T1[rsp], rax
  0009d	48 83 bc 24 a8
	00 00 00 60	 cmp	 QWORD PTR $T1[rsp], 96	; 00000060H
  000a6	73 02		 jae	 SHORT $LN8@fmtdata
  000a8	eb 05		 jmp	 SHORT $LN9@fmtdata
$LN8@fmtdata:
  000aa	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN9@fmtdata:
  000af	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?both_buf@?1??fmtdata@@9@9
  000b6	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR $T1[rsp]
  000be	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0

; 1902 :         return both_buf;

  000c2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?both_buf@?1??fmtdata@@9@9
  000c9	e9 88 02 00 00	 jmp	 $LN1@fmtdata
$LN6@fmtdata:

; 1903 :     }
; 1904 : 
; 1905 :     MSGBUF( byte_buf, " => %2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X",

  000ce	b8 01 00 00 00	 mov	 eax, 1
  000d3	48 6b c0 0f	 imul	 rax, rax, 15
  000d7	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR data$[rsp]
  000df	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000e3	b9 01 00 00 00	 mov	 ecx, 1
  000e8	48 6b c9 0e	 imul	 rcx, rcx, 14
  000ec	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR data$[rsp]
  000f4	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000f8	ba 01 00 00 00	 mov	 edx, 1
  000fd	48 6b d2 0d	 imul	 rdx, rdx, 13
  00101	48 8b bc 24 80
	01 00 00	 mov	 rdi, QWORD PTR data$[rsp]
  00109	0f b6 14 17	 movzx	 edx, BYTE PTR [rdi+rdx]
  0010d	bf 01 00 00 00	 mov	 edi, 1
  00112	48 6b ff 0c	 imul	 rdi, rdi, 12
  00116	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR data$[rsp]
  0011e	41 0f b6 3c 38	 movzx	 edi, BYTE PTR [r8+rdi]
  00123	41 b8 01 00 00
	00		 mov	 r8d, 1
  00129	4d 6b c0 0b	 imul	 r8, r8, 11
  0012d	4c 8b 8c 24 80
	01 00 00	 mov	 r9, QWORD PTR data$[rsp]
  00135	47 0f b6 04 01	 movzx	 r8d, BYTE PTR [r9+r8]
  0013a	41 b9 01 00 00
	00		 mov	 r9d, 1
  00140	4d 6b c9 0a	 imul	 r9, r9, 10
  00144	4c 8b 94 24 80
	01 00 00	 mov	 r10, QWORD PTR data$[rsp]
  0014c	47 0f b6 0c 0a	 movzx	 r9d, BYTE PTR [r10+r9]
  00151	41 ba 01 00 00
	00		 mov	 r10d, 1
  00157	4d 6b d2 09	 imul	 r10, r10, 9
  0015b	4c 8b 9c 24 80
	01 00 00	 mov	 r11, QWORD PTR data$[rsp]
  00163	47 0f b6 14 13	 movzx	 r10d, BYTE PTR [r11+r10]
  00168	41 bb 01 00 00
	00		 mov	 r11d, 1
  0016e	4d 6b db 08	 imul	 r11, r11, 8
  00172	48 8b 9c 24 80
	01 00 00	 mov	 rbx, QWORD PTR data$[rsp]
  0017a	42 0f b6 1c 1b	 movzx	 ebx, BYTE PTR [rbx+r11]
  0017f	41 bb 01 00 00
	00		 mov	 r11d, 1
  00185	4d 6b db 07	 imul	 r11, r11, 7
  00189	48 8b b4 24 80
	01 00 00	 mov	 rsi, QWORD PTR data$[rsp]
  00191	42 0f b6 34 1e	 movzx	 esi, BYTE PTR [rsi+r11]
  00196	41 bb 01 00 00
	00		 mov	 r11d, 1
  0019c	4d 6b db 06	 imul	 r11, r11, 6
  001a0	48 8b ac 24 80
	01 00 00	 mov	 rbp, QWORD PTR data$[rsp]
  001a8	41 0f b6 2c 2b	 movzx	 ebp, BYTE PTR [r11+rbp]
  001ad	41 bb 01 00 00
	00		 mov	 r11d, 1
  001b3	4d 6b db 05	 imul	 r11, r11, 5
  001b7	4c 8b b4 24 80
	01 00 00	 mov	 r14, QWORD PTR data$[rsp]
  001bf	47 0f b6 1c 1e	 movzx	 r11d, BYTE PTR [r14+r11]
  001c4	41 be 01 00 00
	00		 mov	 r14d, 1
  001ca	4d 6b f6 04	 imul	 r14, r14, 4
  001ce	4c 8b bc 24 80
	01 00 00	 mov	 r15, QWORD PTR data$[rsp]
  001d6	47 0f b6 34 37	 movzx	 r14d, BYTE PTR [r15+r14]
  001db	41 bf 01 00 00
	00		 mov	 r15d, 1
  001e1	4d 6b ff 03	 imul	 r15, r15, 3
  001e5	4c 8b a4 24 80
	01 00 00	 mov	 r12, QWORD PTR data$[rsp]
  001ed	47 0f b6 3c 3c	 movzx	 r15d, BYTE PTR [r12+r15]
  001f2	41 bc 01 00 00
	00		 mov	 r12d, 1
  001f8	4d 6b e4 02	 imul	 r12, r12, 2
  001fc	4c 8b ac 24 80
	01 00 00	 mov	 r13, QWORD PTR data$[rsp]
  00204	47 0f b6 24 2c	 movzx	 r12d, BYTE PTR [r12+r13]
  00209	44 89 a4 24 a0
	00 00 00	 mov	 DWORD PTR tv167[rsp], r12d
  00211	41 bd 01 00 00
	00		 mov	 r13d, 1
  00217	4d 6b ed 01	 imul	 r13, r13, 1
  0021b	4c 8b a4 24 80
	01 00 00	 mov	 r12, QWORD PTR data$[rsp]
  00223	47 0f b6 24 2c	 movzx	 r12d, BYTE PTR [r12+r13]
  00228	44 89 a4 24 a4
	00 00 00	 mov	 DWORD PTR tv171[rsp], r12d
  00230	41 bd 01 00 00
	00		 mov	 r13d, 1
  00236	4d 6b ed 00	 imul	 r13, r13, 0
  0023a	4c 8b a4 24 80
	01 00 00	 mov	 r12, QWORD PTR data$[rsp]
  00242	47 0f b6 24 2c	 movzx	 r12d, BYTE PTR [r12+r13]
  00247	89 84 24 90 00
	00 00		 mov	 DWORD PTR [rsp+144], eax
  0024e	89 8c 24 88 00
	00 00		 mov	 DWORD PTR [rsp+136], ecx
  00255	89 94 24 80 00
	00 00		 mov	 DWORD PTR [rsp+128], edx
  0025c	89 7c 24 78	 mov	 DWORD PTR [rsp+120], edi
  00260	44 89 44 24 70	 mov	 DWORD PTR [rsp+112], r8d
  00265	44 89 4c 24 68	 mov	 DWORD PTR [rsp+104], r9d
  0026a	44 89 54 24 60	 mov	 DWORD PTR [rsp+96], r10d
  0026f	89 5c 24 58	 mov	 DWORD PTR [rsp+88], ebx
  00273	89 74 24 50	 mov	 DWORD PTR [rsp+80], esi
  00277	89 6c 24 48	 mov	 DWORD PTR [rsp+72], ebp
  0027b	44 89 5c 24 40	 mov	 DWORD PTR [rsp+64], r11d
  00280	44 89 74 24 38	 mov	 DWORD PTR [rsp+56], r14d
  00285	44 89 7c 24 30	 mov	 DWORD PTR [rsp+48], r15d
  0028a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv167[rsp]
  00291	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00295	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR tv171[rsp]
  0029c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  002a0	45 8b cc	 mov	 r9d, r12d
  002a3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160239
  002aa	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  002af	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR byte_buf$[rsp]
  002b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1906 :         data[0], data[1], data[ 2], data[ 3], data[ 4], data[ 5], data[ 6], data[ 7],
; 1907 :         data[8], data[9], data[10], data[11], data[12], data[13], data[14], data[15]
; 1908 :     );
; 1909 : 
; 1910 :     // Truncate according to passed len (the below accounts for the
; 1911 :     // 4 char " => " prefix, plus the 2 printed hex characters for
; 1912 :     // each byte, plus the blank/space after every 4 printed bytes.
; 1913 : 
; 1914 :     byte_buf[ 4 + (amt << 1) + (amt >> 2) ] = 0;

  002bd	0f b6 84 24 88
	01 00 00	 movzx	 eax, BYTE PTR amt$[rsp]
  002c5	0f b6 8c 24 88
	01 00 00	 movzx	 ecx, BYTE PTR amt$[rsp]
  002cd	c1 f9 02	 sar	 ecx, 2
  002d0	8d 44 41 04	 lea	 eax, DWORD PTR [rcx+rax*2+4]
  002d4	48 98		 cdqe
  002d6	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR $T2[rsp], rax
  002de	48 83 bc 24 b0
	00 00 00 40	 cmp	 QWORD PTR $T2[rsp], 64	; 00000040H
  002e7	73 02		 jae	 SHORT $LN10@fmtdata
  002e9	eb 05		 jmp	 SHORT $LN11@fmtdata
$LN10@fmtdata:
  002eb	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN11@fmtdata:
  002f0	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR $T2[rsp]
  002f8	c6 84 04 e0 00
	00 00 00	 mov	 BYTE PTR byte_buf$[rsp+rax], 0

; 1915 : 
; 1916 :     // Now format the character representation of those bytes
; 1917 : 
; 1918 :     prt_guest_to_host( data, char_buf, amt );

  00300	0f b6 84 24 88
	01 00 00	 movzx	 eax, BYTE PTR amt$[rsp]
  00308	44 8b c0	 mov	 r8d, eax
  0030b	48 8d 94 24 c0
	00 00 00	 lea	 rdx, QWORD PTR char_buf$[rsp]
  00313	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR data$[rsp]
  0031b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_prt_guest_to_host

; 1919 : 
; 1920 :     MSGBUF( both_buf, "%-40.40s%s", byte_buf, char_buf );

  00321	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR char_buf$[rsp]
  00329	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0032e	4c 8d 8c 24 e0
	00 00 00	 lea	 r9, QWORD PTR byte_buf$[rsp]
  00336	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160240
  0033d	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  00342	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?both_buf@?1??fmtdata@@9@9
  00349	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1921 : 
; 1922 :     return both_buf;

  0034f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?both_buf@?1??fmtdata@@9@9
$LN1@fmtdata:
$LN7@fmtdata:

; 1923 : }

  00356	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0035e	48 33 cc	 xor	 rcx, rsp
  00361	e8 00 00 00 00	 call	 __security_check_cookie
  00366	48 81 c4 38 01
	00 00		 add	 rsp, 312		; 00000138H
  0036d	41 5f		 pop	 r15
  0036f	41 5e		 pop	 r14
  00371	41 5d		 pop	 r13
  00373	41 5c		 pop	 r12
  00375	5f		 pop	 rdi
  00376	5e		 pop	 rsi
  00377	5d		 pop	 rbp
  00378	5b		 pop	 rbx
  00379	c3		 ret	 0
fmtdata	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv95 = 80
tv135 = 84
tv130 = 88
tv137 = 96
prm$ = 104
tim$ = 144
pfx$ = 208
__$ArrayPad$ = 336
rec$ = 368
print_814_sigp PROC

; 1855 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 60 01
	00 00		 sub	 rsp, 352		; 00000160H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1856 :     char tim [  64 ]  = {0};    // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR tim$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb

; 1857 :     char prm [  32 ]  = {0};

  00033	48 8d 44 24 68	 lea	 rax, QWORD PTR prm$[rsp]
  00038	48 8b f8	 mov	 rdi, rax
  0003b	33 c0		 xor	 eax, eax
  0003d	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00042	f3 aa		 rep stosb

; 1858 :     char pfx [ 128 ]  = {0};

  00044	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR pfx$[rsp]
  0004c	48 8b f8	 mov	 rdi, rax
  0004f	33 c0		 xor	 eax, eax
  00051	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00056	f3 aa		 rep stosb

; 1859 : 
; 1860 :     FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  00058	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00060	48 83 c0 08	 add	 rax, 8
  00064	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0006a	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR tim$[rsp]
  00072	48 8b c8	 mov	 rcx, rax
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1861 : 
; 1862 :     if (ARCH_900_IDX == rec->rhdr.arch_mode)

  0007b	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00083	0f b6 40 10	 movzx	 eax, BYTE PTR [rax+16]
  00087	83 f8 02	 cmp	 eax, 2
  0008a	75 25		 jne	 SHORT $LN2@print_814_

; 1863 :         MSGBUF( prm, "%16.16"PRIX64, (U64) rec->parm );

  0008c	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00094	4c 8b 48 20	 mov	 r9, QWORD PTR [rax+32]
  00098	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160209
  0009f	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  000a4	48 8d 4c 24 68	 lea	 rcx, QWORD PTR prm$[rsp]
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  000af	eb 23		 jmp	 SHORT $LN3@print_814_
$LN2@print_814_:

; 1864 :     else
; 1865 :         MSGBUF( prm, "%8.8"PRIX32, (U32) rec->parm );

  000b1	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  000b9	44 8b 48 20	 mov	 r9d, DWORD PTR [rax+32]
  000bd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160210
  000c4	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  000c9	48 8d 4c 24 68	 lea	 rcx, QWORD PTR prm$[rsp]
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN3@print_814_:

; 1866 : 
; 1867 :     // "Processor %s: CC %d%s"
; 1868 :     MSGBUF( pfx, "%s HHC00814I Processor %s: SIGP %-32s (%02.2X) %s, PARM %s: CC %d",

  000d4	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  000dc	0f b6 40 1b	 movzx	 eax, BYTE PTR [rax+27]
  000e0	89 44 24 50	 mov	 DWORD PTR tv95[rsp], eax
  000e4	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000ec	0f b6 49 18	 movzx	 ecx, BYTE PTR [rcx+24]
  000f0	e8 00 00 00 00	 call	 ptyp_str
  000f5	48 89 44 24 58	 mov	 QWORD PTR tv130[rsp], rax
  000fa	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00102	0f b6 49 1a	 movzx	 ecx, BYTE PTR [rcx+26]
  00106	89 4c 24 54	 mov	 DWORD PTR tv135[rsp], ecx
  0010a	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00112	0f b6 4a 1a	 movzx	 ecx, BYTE PTR [rdx+26]
  00116	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_order2name
  0011c	48 89 44 24 60	 mov	 QWORD PTR tv137[rsp], rax
  00121	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00129	0f b6 49 04	 movzx	 ecx, BYTE PTR [rcx+4]
  0012d	e8 00 00 00 00	 call	 ptyp_str
  00132	b9 01 00 00 00	 mov	 ecx, 1
  00137	48 6b c9 0b	 imul	 rcx, rcx, 11
  0013b	48 8d 8c 0c 90
	00 00 00	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  00143	8b 54 24 50	 mov	 edx, DWORD PTR tv95[rsp]
  00147	89 54 24 48	 mov	 DWORD PTR [rsp+72], edx
  0014b	48 8d 54 24 68	 lea	 rdx, QWORD PTR prm$[rsp]
  00150	48 89 54 24 40	 mov	 QWORD PTR [rsp+64], rdx
  00155	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv130[rsp]
  0015a	48 89 54 24 38	 mov	 QWORD PTR [rsp+56], rdx
  0015f	8b 54 24 54	 mov	 edx, DWORD PTR tv135[rsp]
  00163	89 54 24 30	 mov	 DWORD PTR [rsp+48], edx
  00167	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv137[rsp]
  0016c	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  00171	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00176	4c 8b c9	 mov	 r9, rcx
  00179	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160211
  00180	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00185	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR pfx$[rsp]
  0018d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1869 :         &tim[ 11 ], ptyp_str( rec->rhdr.cpuad ),
; 1870 :         order2name( rec->order ), rec->order,
; 1871 :         ptyp_str( rec->cpad ), prm, rec->cc );
; 1872 : 
; 1873 :     tf_do_blank_sep( &rec->rhdr );

  00193	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0019b	48 8b c8	 mov	 rcx, rax
  0019e	e8 00 00 00 00	 call	 tf_do_blank_sep

; 1874 : 
; 1875 :     if (rec->got_status)

  001a3	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  001ab	0f b6 40 28	 movzx	 eax, BYTE PTR [rax+40]
  001af	85 c0		 test	 eax, eax
  001b1	74 4a		 je	 SHORT $LN4@print_814_

; 1876 :         FLOGMSG( stdout, "%s\n", pfx );

  001b3	b9 01 00 00 00	 mov	 ecx, 1
  001b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001be	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR pfx$[rsp]
  001c6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160214
  001d2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001d7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001dc	41 b9 03 00 00
	00		 mov	 r9d, 3
  001e2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160215
  001e9	ba 54 07 00 00	 mov	 edx, 1876		; 00000754H
  001ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160216
  001f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  001fb	eb 57		 jmp	 SHORT $LN5@print_814_
$LN4@print_814_:

; 1877 :     else
; 1878 :         FLOGMSG( stdout, "%s status %8.8X\n", pfx, rec->status );

  001fd	b9 01 00 00 00	 mov	 ecx, 1
  00202	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00208	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00210	8b 49 1c	 mov	 ecx, DWORD PTR [rcx+28]
  00213	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00217	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR pfx$[rsp]
  0021f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00224	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160217
  0022b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00230	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00235	41 b9 03 00 00
	00		 mov	 r9d, 3
  0023b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160218
  00242	ba 56 07 00 00	 mov	 edx, 1878		; 00000756H
  00247	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160219
  0024e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN5@print_814_:

; 1879 : }

  00254	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0025c	48 33 cc	 xor	 rcx, rsp
  0025f	e8 00 00 00 00	 call	 __security_check_cookie
  00264	48 81 c4 60 01
	00 00		 add	 rsp, 352		; 00000160H
  0026b	5f		 pop	 rdi
  0026c	c3		 ret	 0
print_814_sigp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
is370$ = 64
tv75 = 68
tv77 = 72
tv81 = 80
msgid$ = 88
tim$ = 96
pfx$ = 160
__$ArrayPad$ = 256
rec$ = 288
print_806_io_rupt PROC

; 1823 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 10 01
	00 00		 sub	 rsp, 272		; 00000110H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1824 :     char tim [ 64 ]  = {0};  // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR tim$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb

; 1825 :     char pfx [ 96 ]  = {0};

  00030	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR pfx$[rsp]
  00038	48 8b f8	 mov	 rdi, rax
  0003b	33 c0		 xor	 eax, eax
  0003d	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00042	f3 aa		 rep stosb

; 1826 : 
; 1827 :     bool is370 = (ARCH_370_IDX == rec->rhdr.arch_mode);

  00044	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0004c	0f b6 40 10	 movzx	 eax, BYTE PTR [rax+16]
  00050	85 c0		 test	 eax, eax
  00052	75 0a		 jne	 SHORT $LN5@print_806_
  00054	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  0005c	eb 08		 jmp	 SHORT $LN6@print_806_
$LN5@print_806_:
  0005e	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN6@print_806_:
  00066	83 7c 24 44 00	 cmp	 DWORD PTR tv75[rsp], 0
  0006b	75 0a		 jne	 SHORT $LN7@print_806_
  0006d	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
  00075	eb 08		 jmp	 SHORT $LN8@print_806_
$LN7@print_806_:
  00077	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
$LN8@print_806_:
  0007f	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv77[rsp]
  00084	88 44 24 40	 mov	 BYTE PTR is370$[rsp], al

; 1828 : 
; 1829 :     const char* msgid = is370 ? "HHC00805I"

  00088	0f b6 44 24 40	 movzx	 eax, BYTE PTR is370$[rsp]
  0008d	85 c0		 test	 eax, eax
  0008f	74 0e		 je	 SHORT $LN9@print_806_
  00091	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160187
  00098	48 89 44 24 50	 mov	 QWORD PTR tv81[rsp], rax
  0009d	eb 0c		 jmp	 SHORT $LN10@print_806_
$LN9@print_806_:
  0009f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160188
  000a6	48 89 44 24 50	 mov	 QWORD PTR tv81[rsp], rax
$LN10@print_806_:
  000ab	48 8b 44 24 50	 mov	 rax, QWORD PTR tv81[rsp]
  000b0	48 89 44 24 58	 mov	 QWORD PTR msgid$[rsp], rax

; 1830 :                               : "HHC00806I";
; 1831 : 
; 1832 :     FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  000b5	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  000bd	48 83 c0 08	 add	 rax, 8
  000c1	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  000c7	48 8d 54 24 60	 lea	 rdx, QWORD PTR tim$[rsp]
  000cc	48 8b c8	 mov	 rcx, rax
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1833 : 
; 1834 :     // HHC00805 "Processor %s%02X: I/O interrupt code %8.8X parm %8.8X"
; 1835 :     // HHC00806 "Processor %s%02X: I/O interrupt code %8.8X parm %8.8X id %8.8X"
; 1836 : 
; 1837 :     tf_do_blank_sep( &rec->rhdr );

  000d5	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  000dd	48 8b c8	 mov	 rcx, rax
  000e0	e8 00 00 00 00	 call	 tf_do_blank_sep

; 1838 : 
; 1839 :     MSGBUF( pfx, "%s %s Processor %s: I/O interrupt code %8.8X parm %8.8X",

  000e5	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  000ed	0f b6 48 04	 movzx	 ecx, BYTE PTR [rax+4]
  000f1	e8 00 00 00 00	 call	 ptyp_str
  000f6	b9 01 00 00 00	 mov	 ecx, 1
  000fb	48 6b c9 0b	 imul	 rcx, rcx, 11
  000ff	48 8d 4c 0c 60	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  00104	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  0010c	8b 52 1c	 mov	 edx, DWORD PTR [rdx+28]
  0010f	89 54 24 38	 mov	 DWORD PTR [rsp+56], edx
  00113	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  0011b	8b 52 18	 mov	 edx, DWORD PTR [rdx+24]
  0011e	89 54 24 30	 mov	 DWORD PTR [rsp+48], edx
  00122	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00127	48 8b 44 24 58	 mov	 rax, QWORD PTR msgid$[rsp]
  0012c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00131	4c 8b c9	 mov	 r9, rcx
  00134	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160189
  0013b	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  00140	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR pfx$[rsp]
  00148	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1840 :         &tim[ 11 ], msgid, ptyp_str( rec->rhdr.cpuad ), rec->ioid, rec->ioparm );
; 1841 : 
; 1842 :     if (is370)

  0014e	0f b6 44 24 40	 movzx	 eax, BYTE PTR is370$[rsp]
  00153	85 c0		 test	 eax, eax
  00155	74 4a		 je	 SHORT $LN2@print_806_

; 1843 :         // "Processor %s%02X: I/O interrupt code %8.8X parm %8.8X"
; 1844 :         FLOGMSG( stdout, "%s\n", pfx );

  00157	b9 01 00 00 00	 mov	 ecx, 1
  0015c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00162	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR pfx$[rsp]
  0016a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0016f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160192
  00176	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0017b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00180	41 b9 03 00 00
	00		 mov	 r9d, 3
  00186	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160193
  0018d	ba 34 07 00 00	 mov	 edx, 1844		; 00000734H
  00192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160194
  00199	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0019f	eb 57		 jmp	 SHORT $LN3@print_806_
$LN2@print_806_:

; 1845 :     else
; 1846 :         // "Processor %s%02X: I/O interrupt code %8.8X parm %8.8X id %8.8X"
; 1847 :         FLOGMSG( stdout, "%s id %8.8X\n", pfx, rec->iointid );

  001a1	b9 01 00 00 00	 mov	 ecx, 1
  001a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001ac	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  001b4	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  001b7	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  001bb	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR pfx$[rsp]
  001c3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160195
  001cf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001d4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001d9	41 b9 03 00 00
	00		 mov	 r9d, 3
  001df	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160196
  001e6	ba 37 07 00 00	 mov	 edx, 1847		; 00000737H
  001eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160197
  001f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN3@print_806_:

; 1848 : }

  001f8	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00200	48 33 cc	 xor	 rcx, rsp
  00203	e8 00 00 00 00	 call	 __security_check_cookie
  00208	48 81 c4 10 01
	00 00		 add	 rsp, 272		; 00000110H
  0020f	5f		 pop	 rdi
  00210	c3		 ret	 0
print_806_io_rupt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
rec$ = 48
tv142 = 56
pfx$ = 64
tim$ = 128
__$ArrayPad$ = 192
cpuad$ = 224
print_storage_lines PROC

; 1797 : {

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00004	57		 push	 rdi
  00005	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1798 :     TF02326* rec;
; 1799 :     char tim[ 64 ]  = {0};  // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001e	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR tim$[rsp]
  00026	48 8b f8	 mov	 rdi, rax
  00029	33 c0		 xor	 eax, eax
  0002b	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00030	f3 aa		 rep stosb

; 1800 :     char pfx[ 64 ]  = {0};  // "16:22:48.753999 HHC02326I IP05: "

  00032	48 8d 44 24 40	 lea	 rax, QWORD PTR pfx$[rsp]
  00037	48 8b f8	 mov	 rdi, rax
  0003a	33 c0		 xor	 eax, eax
  0003c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00041	f3 aa		 rep stosb
$LN4@print_stor:

; 1801 : 
; 1802 :     ASSERT(( all_recs[ cpuad ].gotmask & GOT_TF02326 ));

  00043	0f b6 84 24 e0
	00 00 00	 movzx	 eax, BYTE PTR cpuad$[rsp]
  0004b	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00052	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  00059	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00060	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00065	85 c0		 test	 eax, eax
  00067	75 5c		 jne	 SHORT $LN8@print_stor
$LN7@print_stor:
  00069	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160165
  00070	41 b8 0a 07 00
	00		 mov	 r8d, 1802		; 0000070aH
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160166
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160167
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0008a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00090	85 c0		 test	 eax, eax
  00092	74 20		 je	 SHORT $LN9@print_stor
  00094	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160169
  0009b	41 b8 0a 07 00
	00		 mov	 r8d, 1802		; 0000070aH
  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160170
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160171
  000af	e8 00 00 00 00	 call	 DebuggerTrace
$LN9@print_stor:
  000b4	33 c0		 xor	 eax, eax
  000b6	85 c0		 test	 eax, eax
  000b8	75 af		 jne	 SHORT $LN7@print_stor
  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000c0	85 c0		 test	 eax, eax
  000c2	74 01		 je	 SHORT $LN10@print_stor
  000c4	cc		 int	 3
$LN10@print_stor:
$LN8@print_stor:
  000c5	33 c0		 xor	 eax, eax
  000c7	85 c0		 test	 eax, eax
  000c9	0f 85 74 ff ff
	ff		 jne	 $LN4@print_stor

; 1803 :     rec = &all_recs[ cpuad ].tf02326;

  000cf	0f b6 84 24 e0
	00 00 00	 movzx	 eax, BYTE PTR cpuad$[rsp]
  000d7	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  000de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  000e5	48 8d 84 01 48
	05 00 00	 lea	 rax, QWORD PTR [rcx+rax+1352]
  000ed	48 89 44 24 30	 mov	 QWORD PTR rec$[rsp], rax

; 1804 : 
; 1805 :     if (!rec->valid)

  000f2	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  000f7	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]
  000fb	85 c0		 test	 eax, eax
  000fd	75 05		 jne	 SHORT $LN11@print_stor

; 1806 :         return;

  000ff	e9 fa 00 00 00	 jmp	 $LN1@print_stor
$LN11@print_stor:

; 1807 : 
; 1808 :     FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  00104	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  00109	48 83 c0 08	 add	 rax, 8
  0010d	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00113	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR tim$[rsp]
  0011b	48 8b c8	 mov	 rcx, rax
  0011e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1809 :     MSGBUF( pfx, "%s HHC02326I %s%s: ", &tim[ 11 ],

  00124	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  00129	0f b6 40 19	 movzx	 eax, BYTE PTR [rax+25]
  0012d	85 c0		 test	 eax, eax
  0012f	74 0e		 je	 SHORT $LN15@print_stor
  00131	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160174
  00138	48 89 44 24 38	 mov	 QWORD PTR tv142[rsp], rax
  0013d	eb 0c		 jmp	 SHORT $LN16@print_stor
$LN15@print_stor:
  0013f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160175
  00146	48 89 44 24 38	 mov	 QWORD PTR tv142[rsp], rax
$LN16@print_stor:
  0014b	0f b6 8c 24 e0
	00 00 00	 movzx	 ecx, BYTE PTR cpuad$[rsp]
  00153	e8 00 00 00 00	 call	 ptyp_str
  00158	b9 01 00 00 00	 mov	 ecx, 1
  0015d	48 6b c9 0b	 imul	 rcx, rcx, 11
  00161	48 8d 8c 0c 80
	00 00 00	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  00169	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0016e	48 8b 44 24 38	 mov	 rax, QWORD PTR tv142[rsp]
  00173	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00178	4c 8b c9	 mov	 r9, rcx
  0017b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160176
  00182	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00187	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pfx$[rsp]
  0018c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1810 :         rec->sie ? "SIE: " : "", ptyp_str( cpuad ));
; 1811 : 
; 1812 :     if (rec->b1 >= 0)

  00192	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  00197	0f bf 40 1c	 movsx	 eax, WORD PTR [rax+28]
  0019b	85 c0		 test	 eax, eax
  0019d	7c 29		 jl	 SHORT $LN12@print_stor

; 1813 :         print_op_stor( pfx, rec->rhdr.arch_mode, rec->real_mode, &rec->op1 );

  0019f	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  001a4	48 83 c0 20	 add	 rax, 32			; 00000020H
  001a8	4c 8b c8	 mov	 r9, rax
  001ab	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  001b0	44 0f b6 40 1a	 movzx	 r8d, BYTE PTR [rax+26]
  001b5	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  001ba	0f b6 50 10	 movzx	 edx, BYTE PTR [rax+16]
  001be	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pfx$[rsp]
  001c3	e8 00 00 00 00	 call	 print_op_stor
$LN12@print_stor:

; 1814 : 
; 1815 :     if (rec->b2 >= 0)

  001c8	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  001cd	0f bf 40 1e	 movsx	 eax, WORD PTR [rax+30]
  001d1	85 c0		 test	 eax, eax
  001d3	7c 29		 jl	 SHORT $LN13@print_stor

; 1816 :         print_op_stor( pfx, rec->rhdr.arch_mode, rec->real_mode, &rec->op2 );

  001d5	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  001da	48 83 c0 48	 add	 rax, 72			; 00000048H
  001de	4c 8b c8	 mov	 r9, rax
  001e1	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  001e6	44 0f b6 40 1a	 movzx	 r8d, BYTE PTR [rax+26]
  001eb	48 8b 44 24 30	 mov	 rax, QWORD PTR rec$[rsp]
  001f0	0f b6 50 10	 movzx	 edx, BYTE PTR [rax+16]
  001f4	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pfx$[rsp]
  001f9	e8 00 00 00 00	 call	 print_op_stor
$LN13@print_stor:
$LN1@print_stor:

; 1817 : }

  001fe	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00206	48 33 cc	 xor	 rcx, rsp
  00209	e8 00 00 00 00	 call	 __security_check_cookie
  0020e	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  00215	5f		 pop	 rdi
  00216	c3		 ret	 0
print_storage_lines ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
i$1 = 160
c$2 = 161
tv132 = 164
tv227 = 168
tv232 = 172
tv279 = 176
tv295 = 180
$T3 = 184
$T4 = 192
$T5 = 200
tv84 = 208
p$6 = 216
cbuf$7 = 224
vadr$ = 248
hbuf$8 = 288
stor$ = 352
pfx_and_vadr$9 = 416
__$ArrayPad$ = 544
pfx$ = 640
arch_mode$ = 648
real_mode$ = 656
op$ = 664
print_op_stor PROC

; 1707 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	53		 push	 rbx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	41 54		 push	 r12
  00019	41 55		 push	 r13
  0001b	41 56		 push	 r14
  0001d	41 57		 push	 r15
  0001f	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  00026	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002d	48 33 c4	 xor	 rax, rsp
  00030	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1708 :     char vadr[ 32 ];
; 1709 :     char stor[ 64 ];
; 1710 : 
; 1711 :     /* First, format just the virtual address part... */
; 1712 :     if (real_mode)

  00038	0f b6 84 24 90
	02 00 00	 movzx	 eax, BYTE PTR real_mode$[rsp]
  00040	85 c0		 test	 eax, eax
  00042	74 35		 je	 SHORT $LN8@print_op_s

; 1713 :         vadr[0] = 0;

  00044	b8 01 00 00 00	 mov	 eax, 1
  00049	48 6b c0 00	 imul	 rax, rax, 0
  0004d	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR $T3[rsp], rax
  00055	48 83 bc 24 b8
	00 00 00 20	 cmp	 QWORD PTR $T3[rsp], 32	; 00000020H
  0005e	73 02		 jae	 SHORT $LN20@print_op_s
  00060	eb 05		 jmp	 SHORT $LN21@print_op_s
$LN20@print_op_s:
  00062	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN21@print_op_s:
  00067	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR $T3[rsp]
  0006f	c6 84 04 f8 00
	00 00 00	 mov	 BYTE PTR vadr$[rsp+rax], 0
  00077	eb 59		 jmp	 SHORT $LN9@print_op_s
$LN8@print_op_s:

; 1714 :     else
; 1715 :     {
; 1716 :         if (ARCH_900_IDX == arch_mode)

  00079	0f b6 84 24 88
	02 00 00	 movzx	 eax, BYTE PTR arch_mode$[rsp]
  00081	83 f8 02	 cmp	 eax, 2
  00084	75 27		 jne	 SHORT $LN10@print_op_s

; 1717 :             MSGBUF( vadr, "V:%16.16"PRIX64":", op->vaddr );

  00086	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR op$[rsp]
  0008e	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  00091	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160128
  00098	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0009d	48 8d 8c 24 f8
	00 00 00	 lea	 rcx, QWORD PTR vadr$[rsp]
  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  000ab	eb 25		 jmp	 SHORT $LN11@print_op_s
$LN10@print_op_s:

; 1718 :         else
; 1719 :             MSGBUF( vadr, "V:%8.8"PRIX32":", (U32)op->vaddr );

  000ad	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR op$[rsp]
  000b5	44 8b 08	 mov	 r9d, DWORD PTR [rax]
  000b8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160129
  000bf	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  000c4	48 8d 8c 24 f8
	00 00 00	 lea	 rcx, QWORD PTR vadr$[rsp]
  000cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN11@print_op_s:
$LN9@print_op_s:

; 1720 :     }
; 1721 : 
; 1722 :     /* Next, print the real address and storage part... */
; 1723 :     if (op->xcode)

  000d2	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR op$[rsp]
  000da	0f b7 40 20	 movzx	 eax, WORD PTR [rax+32]
  000de	85 c0		 test	 eax, eax
  000e0	0f 84 f3 00 00
	00		 je	 $LN12@print_op_s

; 1724 :     {
; 1725 :         char pfx_and_vadr[128];
; 1726 : 
; 1727 :         MSGBUF(  pfx_and_vadr, "%s %s ", pfx, vadr );

  000e6	48 8d 84 24 f8
	00 00 00	 lea	 rax, QWORD PTR vadr$[rsp]
  000ee	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f3	4c 8b 8c 24 80
	02 00 00	 mov	 r9, QWORD PTR pfx$[rsp]
  000fb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160132
  00102	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00107	48 8d 8c 24 a0
	01 00 00	 lea	 rcx, QWORD PTR pfx_and_vadr$9[rsp]
  0010f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1728 : 
; 1729 :         RTRIM(   pfx_and_vadr );        // (vadr likely empty)

  00115	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160133
  0011c	48 8d 8c 24 a0
	01 00 00	 lea	 rcx, QWORD PTR pfx_and_vadr$9[rsp]
  00124	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rtrim

; 1730 :         STRLCAT( pfx_and_vadr, " " );   // (blank is expected)

  0012a	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  00130	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160134
  00137	48 8d 8c 24 a0
	01 00 00	 lea	 rcx, QWORD PTR pfx_and_vadr$9[rsp]
  0013f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 1731 : 
; 1732 :         FLOGMSG( stdout, "%sTranslation exception %04.4"PRIX16" (%s)\n",

  00145	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR op$[rsp]
  0014d	0f b7 40 20	 movzx	 eax, WORD PTR [rax+32]
  00151	8b c8		 mov	 ecx, eax
  00153	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PIC2Name
  00159	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv84[rsp], rax
  00161	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR op$[rsp]
  00169	0f b7 49 20	 movzx	 ecx, WORD PTR [rcx+32]
  0016d	89 8c 24 a4 00
	00 00		 mov	 DWORD PTR tv132[rsp], ecx
  00174	b9 01 00 00 00	 mov	 ecx, 1
  00179	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0017f	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tv84[rsp]
  00187	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0018c	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv132[rsp]
  00193	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00197	48 8d 8c 24 a0
	01 00 00	 lea	 rcx, QWORD PTR pfx_and_vadr$9[rsp]
  0019f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160135
  001ab	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001b0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b5	41 b9 03 00 00
	00		 mov	 r9d, 3
  001bb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160136
  001c2	ba c5 06 00 00	 mov	 edx, 1733		; 000006c5H
  001c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160137
  001ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1733 :             pfx_and_vadr, op->xcode, PIC2Name( op->xcode ));
; 1734 :     }

  001d4	e9 cc 04 00 00	 jmp	 $LN13@print_op_s
$LN12@print_op_s:

; 1735 :     else
; 1736 :     {
; 1737 :         char hbuf[64] = {0};   // hex buffer

  001d9	48 8d 84 24 20
	01 00 00	 lea	 rax, QWORD PTR hbuf$8[rsp]
  001e1	48 8b f8	 mov	 rdi, rax
  001e4	33 c0		 xor	 eax, eax
  001e6	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  001eb	f3 aa		 rep stosb

; 1738 :         char cbuf[17] = {0};   // char buffer

  001ed	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR cbuf$7[rsp]
  001f5	48 8b f8	 mov	 rdi, rax
  001f8	33 c0		 xor	 eax, eax
  001fa	b9 11 00 00 00	 mov	 ecx, 17
  001ff	f3 aa		 rep stosb

; 1739 :         BYTE i, c;
; 1740 : 
; 1741 :         // (table where to place our null in hbuf)
; 1742 :         static const BYTE hbuf_end[ 17 ] = {  0,
; 1743 :                                               2,  4,  6,  8,
; 1744 :                                              11, 13, 15, 17,
; 1745 :                                              20, 22, 24, 26,
; 1746 :                                              29, 31, 33, 35 };
; 1747 : 
; 1748 :         if (op->amt < 1 || op->amt > 16) CRASH(); // (sanity check)

  00201	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR op$[rsp]
  00209	0f b6 40 23	 movzx	 eax, BYTE PTR [rax+35]
  0020d	83 f8 01	 cmp	 eax, 1
  00210	7c 11		 jl	 SHORT $LN15@print_op_s
  00212	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR op$[rsp]
  0021a	0f b6 40 23	 movzx	 eax, BYTE PTR [rax+35]
  0021e	83 f8 10	 cmp	 eax, 16
  00221	7e 1d		 jle	 SHORT $LN14@print_op_s
$LN15@print_op_s:
$LN4@print_op_s:
  00223	48 c7 84 24 d8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR p$6[rsp], 0
  0022f	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR p$6[rsp]
  00237	c6 00 00	 mov	 BYTE PTR [rax], 0
  0023a	33 c0		 xor	 eax, eax
  0023c	85 c0		 test	 eax, eax
  0023e	75 e3		 jne	 SHORT $LN4@print_op_s
$LN14@print_op_s:

; 1749 : 
; 1750 :         // (more efficient to print everything than to loop)
; 1751 :         MSGBUF( hbuf,

  00240	b8 01 00 00 00	 mov	 eax, 1
  00245	48 6b c0 0f	 imul	 rax, rax, 15
  00249	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR op$[rsp]
  00251	0f b6 44 01 10	 movzx	 eax, BYTE PTR [rcx+rax+16]
  00256	b9 01 00 00 00	 mov	 ecx, 1
  0025b	48 6b c9 0e	 imul	 rcx, rcx, 14
  0025f	48 8b 94 24 98
	02 00 00	 mov	 rdx, QWORD PTR op$[rsp]
  00267	0f b6 4c 0a 10	 movzx	 ecx, BYTE PTR [rdx+rcx+16]
  0026c	ba 01 00 00 00	 mov	 edx, 1
  00271	48 6b d2 0d	 imul	 rdx, rdx, 13
  00275	48 8b bc 24 98
	02 00 00	 mov	 rdi, QWORD PTR op$[rsp]
  0027d	0f b6 54 17 10	 movzx	 edx, BYTE PTR [rdi+rdx+16]
  00282	bf 01 00 00 00	 mov	 edi, 1
  00287	48 6b ff 0c	 imul	 rdi, rdi, 12
  0028b	4c 8b 84 24 98
	02 00 00	 mov	 r8, QWORD PTR op$[rsp]
  00293	41 0f b6 7c 38
	10		 movzx	 edi, BYTE PTR [r8+rdi+16]
  00299	41 b8 01 00 00
	00		 mov	 r8d, 1
  0029f	4d 6b c0 0b	 imul	 r8, r8, 11
  002a3	4c 8b 8c 24 98
	02 00 00	 mov	 r9, QWORD PTR op$[rsp]
  002ab	47 0f b6 44 01
	10		 movzx	 r8d, BYTE PTR [r9+r8+16]
  002b1	41 b9 01 00 00
	00		 mov	 r9d, 1
  002b7	4d 6b c9 0a	 imul	 r9, r9, 10
  002bb	4c 8b 94 24 98
	02 00 00	 mov	 r10, QWORD PTR op$[rsp]
  002c3	47 0f b6 4c 0a
	10		 movzx	 r9d, BYTE PTR [r10+r9+16]
  002c9	41 ba 01 00 00
	00		 mov	 r10d, 1
  002cf	4d 6b d2 09	 imul	 r10, r10, 9
  002d3	4c 8b 9c 24 98
	02 00 00	 mov	 r11, QWORD PTR op$[rsp]
  002db	47 0f b6 54 13
	10		 movzx	 r10d, BYTE PTR [r11+r10+16]
  002e1	41 bb 01 00 00
	00		 mov	 r11d, 1
  002e7	4d 6b db 08	 imul	 r11, r11, 8
  002eb	48 8b 9c 24 98
	02 00 00	 mov	 rbx, QWORD PTR op$[rsp]
  002f3	42 0f b6 5c 1b
	10		 movzx	 ebx, BYTE PTR [rbx+r11+16]
  002f9	41 bb 01 00 00
	00		 mov	 r11d, 1
  002ff	4d 6b db 07	 imul	 r11, r11, 7
  00303	48 8b b4 24 98
	02 00 00	 mov	 rsi, QWORD PTR op$[rsp]
  0030b	42 0f b6 74 1e
	10		 movzx	 esi, BYTE PTR [rsi+r11+16]
  00311	41 bb 01 00 00
	00		 mov	 r11d, 1
  00317	4d 6b db 06	 imul	 r11, r11, 6
  0031b	48 8b ac 24 98
	02 00 00	 mov	 rbp, QWORD PTR op$[rsp]
  00323	41 0f b6 6c 2b
	10		 movzx	 ebp, BYTE PTR [r11+rbp+16]
  00329	41 bb 01 00 00
	00		 mov	 r11d, 1
  0032f	4d 6b db 05	 imul	 r11, r11, 5
  00333	4c 8b b4 24 98
	02 00 00	 mov	 r14, QWORD PTR op$[rsp]
  0033b	47 0f b6 5c 1e
	10		 movzx	 r11d, BYTE PTR [r14+r11+16]
  00341	41 be 01 00 00
	00		 mov	 r14d, 1
  00347	4d 6b f6 04	 imul	 r14, r14, 4
  0034b	4c 8b bc 24 98
	02 00 00	 mov	 r15, QWORD PTR op$[rsp]
  00353	47 0f b6 74 37
	10		 movzx	 r14d, BYTE PTR [r15+r14+16]
  00359	41 bf 01 00 00
	00		 mov	 r15d, 1
  0035f	4d 6b ff 03	 imul	 r15, r15, 3
  00363	4c 8b a4 24 98
	02 00 00	 mov	 r12, QWORD PTR op$[rsp]
  0036b	47 0f b6 7c 3c
	10		 movzx	 r15d, BYTE PTR [r12+r15+16]
  00371	41 bc 01 00 00
	00		 mov	 r12d, 1
  00377	4d 6b e4 02	 imul	 r12, r12, 2
  0037b	4c 8b ac 24 98
	02 00 00	 mov	 r13, QWORD PTR op$[rsp]
  00383	47 0f b6 64 2c
	10		 movzx	 r12d, BYTE PTR [r12+r13+16]
  00389	44 89 a4 24 a8
	00 00 00	 mov	 DWORD PTR tv227[rsp], r12d
  00391	41 bd 01 00 00
	00		 mov	 r13d, 1
  00397	4d 6b ed 01	 imul	 r13, r13, 1
  0039b	4c 8b a4 24 98
	02 00 00	 mov	 r12, QWORD PTR op$[rsp]
  003a3	47 0f b6 64 2c
	10		 movzx	 r12d, BYTE PTR [r12+r13+16]
  003a9	44 89 a4 24 ac
	00 00 00	 mov	 DWORD PTR tv232[rsp], r12d
  003b1	41 bd 01 00 00
	00		 mov	 r13d, 1
  003b7	4d 6b ed 00	 imul	 r13, r13, 0
  003bb	4c 8b a4 24 98
	02 00 00	 mov	 r12, QWORD PTR op$[rsp]
  003c3	47 0f b6 64 2c
	10		 movzx	 r12d, BYTE PTR [r12+r13+16]
  003c9	89 84 24 90 00
	00 00		 mov	 DWORD PTR [rsp+144], eax
  003d0	89 8c 24 88 00
	00 00		 mov	 DWORD PTR [rsp+136], ecx
  003d7	89 94 24 80 00
	00 00		 mov	 DWORD PTR [rsp+128], edx
  003de	89 7c 24 78	 mov	 DWORD PTR [rsp+120], edi
  003e2	44 89 44 24 70	 mov	 DWORD PTR [rsp+112], r8d
  003e7	44 89 4c 24 68	 mov	 DWORD PTR [rsp+104], r9d
  003ec	44 89 54 24 60	 mov	 DWORD PTR [rsp+96], r10d
  003f1	89 5c 24 58	 mov	 DWORD PTR [rsp+88], ebx
  003f5	89 74 24 50	 mov	 DWORD PTR [rsp+80], esi
  003f9	89 6c 24 48	 mov	 DWORD PTR [rsp+72], ebp
  003fd	44 89 5c 24 40	 mov	 DWORD PTR [rsp+64], r11d
  00402	44 89 74 24 38	 mov	 DWORD PTR [rsp+56], r14d
  00407	44 89 7c 24 30	 mov	 DWORD PTR [rsp+48], r15d
  0040c	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR tv227[rsp]
  00413	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00417	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR tv232[rsp]
  0041e	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00422	45 8b cc	 mov	 r9d, r12d
  00425	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160140
  0042c	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00431	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR hbuf$8[rsp]
  00439	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1752 : 
; 1753 :             "%02.2X%02.2X%02.2X%02.2X "
; 1754 :             "%02.2X%02.2X%02.2X%02.2X "
; 1755 :             "%02.2X%02.2X%02.2X%02.2X "
; 1756 :             "%02.2X%02.2X%02.2X%02.2X",
; 1757 : 
; 1758 :             op->stor[ 0], op->stor[ 1], op->stor[ 2], op->stor[ 3],
; 1759 :             op->stor[ 4], op->stor[ 5], op->stor[ 6], op->stor[ 7],
; 1760 :             op->stor[ 8], op->stor[ 9], op->stor[10], op->stor[11],
; 1761 :             op->stor[12], op->stor[13], op->stor[14], op->stor[15]
; 1762 :         );
; 1763 : 
; 1764 :         hbuf[ hbuf_end[ op->amt ]] = 0;

  0043f	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR op$[rsp]
  00447	0f b6 40 23	 movzx	 eax, BYTE PTR [rax+35]
  0044b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hbuf_end@?4??print_op_stor@@9@9
  00452	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00456	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR $T4[rsp], rax
  0045e	48 83 bc 24 c0
	00 00 00 40	 cmp	 QWORD PTR $T4[rsp], 64	; 00000040H
  00467	73 02		 jae	 SHORT $LN22@print_op_s
  00469	eb 05		 jmp	 SHORT $LN23@print_op_s
$LN22@print_op_s:
  0046b	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN23@print_op_s:
  00470	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR $T4[rsp]
  00478	c6 84 04 20 01
	00 00 00	 mov	 BYTE PTR hbuf$8[rsp+rax], 0

; 1765 : 
; 1766 :         // (more efficient to loop on this one!)
; 1767 :         for (i=0; i < op->amt; i++)

  00480	c6 84 24 a0 00
	00 00 00	 mov	 BYTE PTR i$1[rsp], 0
  00488	eb 11		 jmp	 SHORT $LN7@print_op_s
$LN5@print_op_s:
  0048a	0f b6 84 24 a0
	00 00 00	 movzx	 eax, BYTE PTR i$1[rsp]
  00492	fe c0		 inc	 al
  00494	88 84 24 a0 00
	00 00		 mov	 BYTE PTR i$1[rsp], al
$LN7@print_op_s:
  0049b	0f b6 84 24 a0
	00 00 00	 movzx	 eax, BYTE PTR i$1[rsp]
  004a3	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR op$[rsp]
  004ab	0f b6 49 23	 movzx	 ecx, BYTE PTR [rcx+35]
  004af	3b c1		 cmp	 eax, ecx
  004b1	7d 57		 jge	 SHORT $LN6@print_op_s

; 1768 :         {
; 1769 :             c = guest_to_host( op->stor[ i ]);

  004b3	0f b6 84 24 a0
	00 00 00	 movzx	 eax, BYTE PTR i$1[rsp]
  004bb	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR op$[rsp]
  004c3	0f b6 4c 01 10	 movzx	 ecx, BYTE PTR [rcx+rax+16]
  004c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_guest_to_host
  004ce	88 84 24 a1 00
	00 00		 mov	 BYTE PTR c$2[rsp], al

; 1770 :             if (!isprint( c )) c = '.';

  004d5	0f b6 84 24 a1
	00 00 00	 movzx	 eax, BYTE PTR c$2[rsp]
  004dd	8b c8		 mov	 ecx, eax
  004df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isprint
  004e5	85 c0		 test	 eax, eax
  004e7	75 08		 jne	 SHORT $LN16@print_op_s
  004e9	c6 84 24 a1 00
	00 00 2e	 mov	 BYTE PTR c$2[rsp], 46	; 0000002eH
$LN16@print_op_s:

; 1771 :             cbuf[ i ] = c;

  004f1	0f b6 84 24 a0
	00 00 00	 movzx	 eax, BYTE PTR i$1[rsp]
  004f9	0f b6 8c 24 a1
	00 00 00	 movzx	 ecx, BYTE PTR c$2[rsp]
  00501	88 8c 04 e0 00
	00 00		 mov	 BYTE PTR cbuf$7[rsp+rax], cl

; 1772 :         }

  00508	eb 80		 jmp	 SHORT $LN5@print_op_s
$LN6@print_op_s:

; 1773 : 
; 1774 :         cbuf[ op->amt ] = 0;

  0050a	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR op$[rsp]
  00512	0f b6 40 23	 movzx	 eax, BYTE PTR [rax+35]
  00516	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR $T5[rsp], rax
  0051e	48 83 bc 24 c8
	00 00 00 11	 cmp	 QWORD PTR $T5[rsp], 17
  00527	73 02		 jae	 SHORT $LN24@print_op_s
  00529	eb 05		 jmp	 SHORT $LN25@print_op_s
$LN24@print_op_s:
  0052b	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN25@print_op_s:
  00530	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR $T5[rsp]
  00538	c6 84 04 e0 00
	00 00 00	 mov	 BYTE PTR cbuf$7[rsp+rax], 0

; 1775 : 
; 1776 :         /* Now format both fixed-width pieces together */
; 1777 :         MSGBUF( stor, "%-36.36s %-16.16s", hbuf, cbuf);

  00540	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR cbuf$7[rsp]
  00548	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0054d	4c 8d 8c 24 20
	01 00 00	 lea	 r9, QWORD PTR hbuf$8[rsp]
  00555	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160142
  0055c	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00561	48 8d 8c 24 60
	01 00 00	 lea	 rcx, QWORD PTR stor$[rsp]
  00569	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1778 : 
; 1779 :         /* And finally print all pieces together as one line */
; 1780 :         if (ARCH_900_IDX == arch_mode)

  0056f	0f b6 84 24 88
	02 00 00	 movzx	 eax, BYTE PTR arch_mode$[rsp]
  00577	83 f8 02	 cmp	 eax, 2
  0057a	0f 85 96 00 00
	00		 jne	 $LN17@print_op_s

; 1781 :         {
; 1782 :             FLOGMSG( stdout, "%s%sR:%16.16"PRIX64":K:%02.2X=%s\n",

  00580	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR op$[rsp]
  00588	0f b6 40 22	 movzx	 eax, BYTE PTR [rax+34]
  0058c	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv279[rsp], eax
  00593	b9 01 00 00 00	 mov	 ecx, 1
  00598	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0059e	48 8d 8c 24 60
	01 00 00	 lea	 rcx, QWORD PTR stor$[rsp]
  005a6	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  005ab	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR tv279[rsp]
  005b2	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  005b6	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR op$[rsp]
  005be	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  005c2	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  005c7	48 8d 8c 24 f8
	00 00 00	 lea	 rcx, QWORD PTR vadr$[rsp]
  005cf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005d4	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR pfx$[rsp]
  005dc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160145
  005e8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005ed	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005f2	41 b9 03 00 00
	00		 mov	 r9d, 3
  005f8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160146
  005ff	ba f7 06 00 00	 mov	 edx, 1783		; 000006f7H
  00604	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160147
  0060b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1783 :                 pfx, vadr, op->raddr, op->skey, stor );
; 1784 :         }

  00611	e9 8f 00 00 00	 jmp	 $LN18@print_op_s
$LN17@print_op_s:

; 1785 :         else
; 1786 :         {
; 1787 :             FLOGMSG( stdout, "%s%sR:%8.8"PRIX32":K:%02.2X=%s\n",

  00616	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR op$[rsp]
  0061e	0f b6 40 22	 movzx	 eax, BYTE PTR [rax+34]
  00622	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv295[rsp], eax
  00629	b9 01 00 00 00	 mov	 ecx, 1
  0062e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00634	48 8d 8c 24 60
	01 00 00	 lea	 rcx, QWORD PTR stor$[rsp]
  0063c	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00641	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv295[rsp]
  00648	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  0064c	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR op$[rsp]
  00654	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00657	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0065b	48 8d 8c 24 f8
	00 00 00	 lea	 rcx, QWORD PTR vadr$[rsp]
  00663	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00668	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR pfx$[rsp]
  00670	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00675	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160148
  0067c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00681	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00686	41 b9 03 00 00
	00		 mov	 r9d, 3
  0068c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160149
  00693	ba fc 06 00 00	 mov	 edx, 1788		; 000006fcH
  00698	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160150
  0069f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN18@print_op_s:
$LN13@print_op_s:
$LN19@print_op_s:

; 1788 :                 pfx, vadr, (U32)op->raddr, op->skey, stor );
; 1789 :         }
; 1790 :     }
; 1791 : }

  006a5	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006ad	48 33 cc	 xor	 rcx, rsp
  006b0	e8 00 00 00 00	 call	 __security_check_cookie
  006b5	48 81 c4 38 02
	00 00		 add	 rsp, 568		; 00000238H
  006bc	41 5f		 pop	 r15
  006be	41 5e		 pop	 r14
  006c0	41 5d		 pop	 r13
  006c2	41 5c		 pop	 r12
  006c4	5f		 pop	 rdi
  006c5	5e		 pop	 rsi
  006c6	5d		 pop	 rbp
  006c7	5b		 pop	 rbx
  006c8	c3		 ret	 0
print_op_stor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
arch_mode$ = 48
inst$ = 56
fmt_inst_name PROC

; 1697 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1698 :     static char mnemonic_etc[ 128 ] = {0};
; 1699 :     PRINT_INST( arch_mode, inst, mnemonic_etc );

  0000d	0f b6 44 24 30	 movzx	 eax, BYTE PTR arch_mode$[rsp]
  00012	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?mnemonic_etc@?1??fmt_inst_name@@9@9
  00019	45 33 c0	 xor	 r8d, r8d
  0001c	48 8b 54 24 38	 mov	 rdx, QWORD PTR inst$[rsp]
  00021	8b c8		 mov	 ecx, eax
  00023	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_iprint_router_func

; 1700 :     return mnemonic_etc;

  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?mnemonic_etc@?1??fmt_inst_name@@9@9

; 1701 : }

  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00034	c3		 ret	 0
fmt_inst_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv76 = 80
tv81 = 88
tim$ = 96
__$ArrayPad$ = 160
rec$ = 192
print_846_srvsig_ext_rupt PROC

; 1681 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1682 :     char tim [ 64 ]  = {0};  // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR tim$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb

; 1683 : 
; 1684 :     FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  00030	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 60	 lea	 rdx, QWORD PTR tim$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1685 : 
; 1686 :     // "Processor %s%02X: External interrupt: service signal %8.8X"
; 1687 :     tf_do_blank_sep( &rec->rhdr );

  00050	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_do_blank_sep

; 1688 :     FLOGMSG( stdout,

  00060	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b6 48 04	 movzx	 ecx, BYTE PTR [rax+4]
  0006c	e8 00 00 00 00	 call	 ptyp_str
  00071	48 89 44 24 50	 mov	 QWORD PTR tv76[rsp], rax
  00076	b9 01 00 00 00	 mov	 ecx, 1
  0007b	48 6b c9 0b	 imul	 rcx, rcx, 11
  0007f	48 8d 4c 0c 60	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  00084	48 89 4c 24 58	 mov	 QWORD PTR tv81[rsp], rcx
  00089	b9 01 00 00 00	 mov	 ecx, 1
  0008e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00094	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0009c	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  0009f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000a3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv76[rsp]
  000a8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000ad	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv81[rsp]
  000b2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160081
  000be	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c8	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160082
  000d5	ba 9a 06 00 00	 mov	 edx, 1690		; 0000069aH
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160083
  000e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1689 :         "%s HHC00846I Processor %s: External interrupt: service signal %8.8X\n",
; 1690 :         &tim[ 11 ], ptyp_str( rec->rhdr.cpuad ), rec->servparm );
; 1691 : }

  000e7	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000ef	48 33 cc	 xor	 rcx, rsp
  000f2	e8 00 00 00 00	 call	 __security_check_cookie
  000f7	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  000fe	5f		 pop	 rdi
  000ff	c3		 ret	 0
print_846_srvsig_ext_rupt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv79 = 80
tv84 = 88
tv128 = 96
tv133 = 104
tim$ = 112
__$ArrayPad$ = 176
rec$ = 208
print_845_blkio_ext_rupt PROC

; 1658 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1659 :     char tim [ 64 ]  = {0};  // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 44 24 70	 lea	 rax, QWORD PTR tim$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb

; 1660 : 
; 1661 :     FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  00030	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 70	 lea	 rdx, QWORD PTR tim$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1662 : 
; 1663 :     tf_do_blank_sep( &rec->rhdr );

  00050	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_do_blank_sep

; 1664 : 
; 1665 :     if (rec->biosubcd == 0x07)

  00060	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b6 40 20	 movzx	 eax, BYTE PTR [rax+32]
  0006c	83 f8 07	 cmp	 eax, 7
  0006f	0f 85 8e 00 00
	00		 jne	 $LN2@print_845_

; 1666 :         // "Processor %s%02X: External interrupt: block I/O %s"
; 1667 :         FLOGMSG( stdout,

  00075	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0007d	0f b6 48 04	 movzx	 ecx, BYTE PTR [rax+4]
  00081	e8 00 00 00 00	 call	 ptyp_str
  00086	48 89 44 24 50	 mov	 QWORD PTR tv79[rsp], rax
  0008b	b9 01 00 00 00	 mov	 ecx, 1
  00090	48 6b c9 0b	 imul	 rcx, rcx, 11
  00094	48 8d 4c 0c 70	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  00099	48 89 4c 24 58	 mov	 QWORD PTR tv84[rsp], rcx
  0009e	b9 01 00 00 00	 mov	 ecx, 1
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000b1	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  000b5	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000ba	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv79[rsp]
  000bf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000c4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv84[rsp]
  000c9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160070
  000d5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000da	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000df	41 b9 03 00 00
	00		 mov	 r9d, 3
  000e5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160071
  000ec	ba 85 06 00 00	 mov	 edx, 1669		; 00000685H
  000f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160072
  000f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  000fe	e9 87 00 00 00	 jmp	 $LN3@print_845_
$LN2@print_845_:

; 1668 :             "%s HHC00845I Processor %s: External interrupt: block I/O %16.16"PRIX64"\n",
; 1669 :             &tim[ 11 ], ptyp_str( rec->rhdr.cpuad ), (U64)rec->bioparm );
; 1670 :     else
; 1671 :         // "Processor %s%02X: External interrupt: block I/O %s"
; 1672 :         FLOGMSG( stdout,

  00103	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0010b	0f b6 48 04	 movzx	 ecx, BYTE PTR [rax+4]
  0010f	e8 00 00 00 00	 call	 ptyp_str
  00114	48 89 44 24 60	 mov	 QWORD PTR tv128[rsp], rax
  00119	b9 01 00 00 00	 mov	 ecx, 1
  0011e	48 6b c9 0b	 imul	 rcx, rcx, 11
  00122	48 8d 4c 0c 70	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  00127	48 89 4c 24 68	 mov	 QWORD PTR tv133[rsp], rcx
  0012c	b9 01 00 00 00	 mov	 ecx, 1
  00131	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00137	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0013f	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  00142	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00146	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv128[rsp]
  0014b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00150	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv133[rsp]
  00155	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0015a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160073
  00161	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00166	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0016b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00171	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160074
  00178	ba 8a 06 00 00	 mov	 edx, 1674		; 0000068aH
  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160075
  00184	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN3@print_845_:

; 1673 :             "%s HHC00845I Processor %s: External interrupt: block I/O %8.8"PRIX32"\n",
; 1674 :             &tim[ 11 ], ptyp_str( rec->rhdr.cpuad ), (U32)rec->bioparm );
; 1675 : }

  0018a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00192	48 33 cc	 xor	 rcx, rsp
  00195	e8 00 00 00 00	 call	 __security_check_cookie
  0019a	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  001a1	5f		 pop	 rdi
  001a2	c3		 ret	 0
print_845_blkio_ext_rupt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv75 = 112
tv78 = 116
tv83 = 120
tv89 = 124
tv91 = 128
tv128 = 136
tim$ = 144
__$ArrayPad$ = 208
rec$ = 240
print_844_blkio_rupt PROC

; 1641 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1642 :     char tim [ 64 ]  = {0};  // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR tim$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb

; 1643 : 
; 1644 :     FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  00033	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0003b	48 83 c0 08	 add	 rax, 8
  0003f	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00045	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR tim$[rsp]
  0004d	48 8b c8	 mov	 rcx, rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1645 : 
; 1646 :     // "Processor %s%02X: %1d:%04X: processing block I/O interrupt: code %4.4X parm %16.16"PRIX64" status %2.2X subcode %2.2X"
; 1647 :     tf_do_blank_sep( &rec->rhdr );

  00056	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 tf_do_blank_sep

; 1648 :     FLOGMSG( stdout,

  00066	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0006e	0f b6 40 23	 movzx	 eax, BYTE PTR [rax+35]
  00072	89 44 24 70	 mov	 DWORD PTR tv75[rsp], eax
  00076	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0007e	0f b6 49 22	 movzx	 ecx, BYTE PTR [rcx+34]
  00082	89 4c 24 74	 mov	 DWORD PTR tv78[rsp], ecx
  00086	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  0008e	0f b7 52 20	 movzx	 edx, WORD PTR [rdx+32]
  00092	89 54 24 78	 mov	 DWORD PTR tv83[rsp], edx
  00096	48 8b bc 24 f0
	00 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  0009e	0f b7 7f 12	 movzx	 edi, WORD PTR [rdi+18]
  000a2	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR rec$[rsp]
  000aa	45 0f b6 40 11	 movzx	 r8d, BYTE PTR [r8+17]
  000af	44 89 44 24 7c	 mov	 DWORD PTR tv89[rsp], r8d
  000b4	4c 8b 8c 24 f0
	00 00 00	 mov	 r9, QWORD PTR rec$[rsp]
  000bc	41 0f b6 49 04	 movzx	 ecx, BYTE PTR [r9+4]
  000c1	e8 00 00 00 00	 call	 ptyp_str
  000c6	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv91[rsp], rax
  000ce	b9 01 00 00 00	 mov	 ecx, 1
  000d3	48 6b c9 0b	 imul	 rcx, rcx, 11
  000d7	48 8d 8c 0c 90
	00 00 00	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  000df	48 89 8c 24 88
	00 00 00	 mov	 QWORD PTR tv128[rsp], rcx
  000e7	b9 01 00 00 00	 mov	 ecx, 1
  000ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000f2	8b 4c 24 70	 mov	 ecx, DWORD PTR tv75[rsp]
  000f6	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  000fa	8b 4c 24 74	 mov	 ecx, DWORD PTR tv78[rsp]
  000fe	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  00102	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0010a	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  0010e	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00113	8b 4c 24 78	 mov	 ecx, DWORD PTR tv83[rsp]
  00117	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  0011b	89 7c 24 48	 mov	 DWORD PTR [rsp+72], edi
  0011f	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv89[rsp]
  00123	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00127	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv91[rsp]
  0012f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00134	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv128[rsp]
  0013c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00141	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160058
  00148	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0014d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00152	41 b9 03 00 00
	00		 mov	 r9d, 3
  00158	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160059
  0015f	ba 73 06 00 00	 mov	 edx, 1651		; 00000673H
  00164	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160060
  0016b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1649 :         "%s HHC00844I Processor %s: %1d:%04X: processing block I/O interrupt: code %4.4X parm %16.16"PRIX64" status %2.2X subcode %2.2X\n",
; 1650 :         &tim[ 11 ], ptyp_str( rec->rhdr.cpuad ), rec->rhdr.lcss, rec->rhdr.devnum,
; 1651 :         rec->servcode, rec->bioparm, rec->biostat, rec->biosubcd );
; 1652 : }

  00171	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00179	48 33 cc	 xor	 rcx, rsp
  0017c	e8 00 00 00 00	 call	 __security_check_cookie
  00181	48 81 c4 e0 00
	00 00		 add	 rsp, 224		; 000000e0H
  00188	5f		 pop	 rdi
  00189	c3		 ret	 0
print_844_blkio_rupt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv90 = 80
tv170 = 84
tv172 = 88
pfx$ = 96
tim$ = 160
__$ArrayPad$ = 224
rec$ = 256
print_840_ext_rupt PROC

; 1588 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec f0 00
	00 00		 sub	 rsp, 240		; 000000f0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1589 :     char tim [ 64 ]  = {0};  // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR tim$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb

; 1590 :     char pfx [ 64 ]  = {0};

  00033	48 8d 44 24 60	 lea	 rax, QWORD PTR pfx$[rsp]
  00038	48 8b f8	 mov	 rdi, rax
  0003b	33 c0		 xor	 eax, eax
  0003d	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00042	f3 aa		 rep stosb

; 1591 : 
; 1592 :     FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  00044	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0004c	48 83 c0 08	 add	 rax, 8
  00050	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00056	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR tim$[rsp]
  0005e	48 8b c8	 mov	 rcx, rax
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1593 : 
; 1594 :     MSGBUF( pfx, "%s HHC0084?I Processor %s: External interrupt",

  00067	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0006f	0f b6 48 04	 movzx	 ecx, BYTE PTR [rax+4]
  00073	e8 00 00 00 00	 call	 ptyp_str
  00078	b9 01 00 00 00	 mov	 ecx, 1
  0007d	48 6b c9 0b	 imul	 rcx, rcx, 11
  00081	48 8d 8c 0c a0
	00 00 00	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  00089	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0008e	4c 8b c9	 mov	 r9, rcx
  00091	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160031
  00098	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0009d	48 8d 4c 24 60	 lea	 rcx, QWORD PTR pfx$[rsp]
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1595 :         &tim[ 11 ], ptyp_str( rec->rhdr.cpuad ));
; 1596 : 
; 1597 :     tf_do_blank_sep( &rec->rhdr );

  000a8	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  000b0	48 8b c8	 mov	 rcx, rax
  000b3	e8 00 00 00 00	 call	 tf_do_blank_sep

; 1598 : 
; 1599 :     switch (rec->icode)

  000b8	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  000c0	0f b7 40 20	 movzx	 eax, WORD PTR [rax+32]
  000c4	89 44 24 50	 mov	 DWORD PTR tv90[rsp], eax
  000c8	83 7c 24 50 40	 cmp	 DWORD PTR tv90[rsp], 64	; 00000040H
  000cd	74 2b		 je	 SHORT $LN4@print_840_
  000cf	81 7c 24 50 80
	00 00 00	 cmp	 DWORD PTR tv90[rsp], 128 ; 00000080H
  000d7	0f 84 36 01 00
	00		 je	 $LN7@print_840_
  000dd	81 7c 24 50 04
	10 00 00	 cmp	 DWORD PTR tv90[rsp], 4100 ; 00001004H
  000e5	74 6b		 je	 SHORT $LN5@print_840_
  000e7	81 7c 24 50 05
	10 00 00	 cmp	 DWORD PTR tv90[rsp], 4101 ; 00001005H
  000ef	0f 84 b5 00 00
	00		 je	 $LN6@print_840_
  000f5	e9 6e 01 00 00	 jmp	 $LN8@print_840_
$LN4@print_840_:

; 1600 :     {
; 1601 :         case EXT_INTERRUPT_KEY_INTERRUPT:
; 1602 : 
; 1603 :             // "Processor %s%02X: External interrupt: interrupt key"
; 1604 :             pfx[23] = '0'; // HHC00840I

  000fa	b8 01 00 00 00	 mov	 eax, 1
  000ff	48 6b c0 17	 imul	 rax, rax, 23
  00103	c6 44 04 60 30	 mov	 BYTE PTR pfx$[rsp+rax], 48 ; 00000030H

; 1605 :             FLOGMSG( stdout, "%s: interrupt key\n", pfx );

  00108	b9 01 00 00 00	 mov	 ecx, 1
  0010d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00113	48 8d 4c 24 60	 lea	 rcx, QWORD PTR pfx$[rsp]
  00118	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160033
  00124	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00129	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0012e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00134	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160034
  0013b	ba 45 06 00 00	 mov	 edx, 1605		; 00000645H
  00140	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160035
  00147	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1606 :             break;

  0014d	e9 95 01 00 00	 jmp	 $LN2@print_840_
$LN5@print_840_:

; 1607 : 
; 1608 :         case EXT_CLOCK_COMPARATOR_INTERRUPT:
; 1609 : 
; 1610 :             // "Processor %s%02X: External interrupt: clock comparator"
; 1611 :             pfx[23] = '1'; // HHC00841I

  00152	b8 01 00 00 00	 mov	 eax, 1
  00157	48 6b c0 17	 imul	 rax, rax, 23
  0015b	c6 44 04 60 31	 mov	 BYTE PTR pfx$[rsp+rax], 49 ; 00000031H

; 1612 :             FLOGMSG( stdout, "%s: clock comparator\n", pfx );

  00160	b9 01 00 00 00	 mov	 ecx, 1
  00165	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0016b	48 8d 4c 24 60	 lea	 rcx, QWORD PTR pfx$[rsp]
  00170	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00175	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160037
  0017c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00181	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00186	41 b9 03 00 00
	00		 mov	 r9d, 3
  0018c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160038
  00193	ba 4c 06 00 00	 mov	 edx, 1612		; 0000064cH
  00198	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160039
  0019f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1613 :             break;

  001a5	e9 3d 01 00 00	 jmp	 $LN2@print_840_
$LN6@print_840_:

; 1614 : 
; 1615 :         case EXT_CPU_TIMER_INTERRUPT:
; 1616 : 
; 1617 :             // "Processor %s%02X: External interrupt: CPU timer=%16.16"PRIX64
; 1618 :             pfx[23] = '2'; // HHC00842I

  001aa	b8 01 00 00 00	 mov	 eax, 1
  001af	48 6b c0 17	 imul	 rax, rax, 23
  001b3	c6 44 04 60 32	 mov	 BYTE PTR pfx$[rsp+rax], 50 ; 00000032H

; 1619 :             FLOGMSG( stdout, "%s: CPU timer=%16.16"PRIX64"\n", pfx, rec->cpu_timer );

  001b8	b9 01 00 00 00	 mov	 ecx, 1
  001bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001c3	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  001cb	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  001cf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d4	48 8d 4c 24 60	 lea	 rcx, QWORD PTR pfx$[rsp]
  001d9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160041
  001e5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ea	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ef	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160042
  001fc	ba 53 06 00 00	 mov	 edx, 1619		; 00000653H
  00201	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160043
  00208	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1620 :             break;

  0020e	e9 d4 00 00 00	 jmp	 $LN2@print_840_
$LN7@print_840_:

; 1621 :             
; 1622 :         case EXT_INTERVAL_TIMER_INTERRUPT:
; 1623 : 
; 1624 :             // "Processor %s%02X: External interrupt: interval timer"
; 1625 :             pfx[23] = '3'; // HHC00843I

  00213	b8 01 00 00 00	 mov	 eax, 1
  00218	48 6b c0 17	 imul	 rax, rax, 23
  0021c	c6 44 04 60 33	 mov	 BYTE PTR pfx$[rsp+rax], 51 ; 00000033H

; 1626 :             FLOGMSG( stdout, "%s: interval timer\n", pfx );

  00221	b9 01 00 00 00	 mov	 ecx, 1
  00226	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0022c	48 8d 4c 24 60	 lea	 rcx, QWORD PTR pfx$[rsp]
  00231	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00236	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160045
  0023d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00242	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00247	41 b9 03 00 00
	00		 mov	 r9d, 3
  0024d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160046
  00254	ba 5a 06 00 00	 mov	 edx, 1626		; 0000065aH
  00259	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160047
  00260	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1627 :             break;

  00266	eb 7f		 jmp	 SHORT $LN2@print_840_
$LN8@print_840_:

; 1628 : 
; 1629 :         default:
; 1630 : 
; 1631 :             // "Unsupported external interrupt: processor %s, code %4.4"PRIX16
; 1632 :             FWRMSG( stderr, HHC03218, "W", ptyp_str( rec->rhdr.cpuad ), rec->icode );

  00268	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00270	0f b7 40 20	 movzx	 eax, WORD PTR [rax+32]
  00274	89 44 24 54	 mov	 DWORD PTR tv170[rsp], eax
  00278	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00280	0f b6 49 04	 movzx	 ecx, BYTE PTR [rcx+4]
  00284	e8 00 00 00 00	 call	 ptyp_str
  00289	48 89 44 24 58	 mov	 QWORD PTR tv172[rsp], rax
  0028e	b9 02 00 00 00	 mov	 ecx, 2
  00293	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00299	8b 4c 24 54	 mov	 ecx, DWORD PTR tv170[rsp]
  0029d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  002a1	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv172[rsp]
  002a6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160049
  002b2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160050
  002be	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002c3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002c8	41 b9 03 00 00
	00		 mov	 r9d, 3
  002ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160051
  002d5	ba 60 06 00 00	 mov	 edx, 1632		; 00000660H
  002da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160052
  002e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN2@print_840_:

; 1633 :             break;
; 1634 :     }
; 1635 : }

  002e7	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  002ef	48 33 cc	 xor	 rcx, rsp
  002f2	e8 00 00 00 00	 call	 __security_check_cookie
  002f7	48 81 c4 f0 00
	00 00		 add	 rsp, 240		; 000000f0H
  002fe	5f		 pop	 rdi
  002ff	c3		 ret	 0
print_840_ext_rupt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv74 = 64
tv79 = 72
tim$ = 80
__$ArrayPad$ = 144
rec$ = 176
print_812_vect_online_370 PROC

; 1572 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1573 :     char tim [ 64 ]  = {0};  // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 44 24 50	 lea	 rax, QWORD PTR tim$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb

; 1574 : 
; 1575 :     FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  00030	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 50	 lea	 rdx, QWORD PTR tim$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1576 : 
; 1577 :     // "Processor %s%02X: vector facility online"
; 1578 :     tf_do_blank_sep( &rec->rhdr );

  00050	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_do_blank_sep

; 1579 :     FLOGMSG( stdout,

  00060	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b6 48 04	 movzx	 ecx, BYTE PTR [rax+4]
  0006c	e8 00 00 00 00	 call	 ptyp_str
  00071	48 89 44 24 40	 mov	 QWORD PTR tv74[rsp], rax
  00076	b9 01 00 00 00	 mov	 ecx, 1
  0007b	48 6b c9 0b	 imul	 rcx, rcx, 11
  0007f	48 8d 4c 0c 50	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  00084	48 89 4c 24 48	 mov	 QWORD PTR tv79[rsp], rcx
  00089	b9 01 00 00 00	 mov	 ecx, 1
  0008e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00094	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv74[rsp]
  00099	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0009e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv79[rsp]
  000a3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160020
  000af	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000b4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000bf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160021
  000c6	ba 2d 06 00 00	 mov	 edx, 1581		; 0000062dH
  000cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160022
  000d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1580 :         "%s HHC00812I Processor %s: vector facility online\n",
; 1581 :         &tim[ 11 ], ptyp_str( rec->rhdr.cpuad ) );
; 1582 : }

  000d8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000e0	48 33 cc	 xor	 rcx, rsp
  000e3	e8 00 00 00 00	 call	 __security_check_cookie
  000e8	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  000ef	5f		 pop	 rdi
  000f0	c3		 ret	 0
print_812_vect_online_370 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv74 = 80
tv76 = 88
tv81 = 96
tim$ = 112
__$ArrayPad$ = 176
rec$ = 208
print_811_arch_mode PROC

; 1556 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1557 :     char tim [ 64 ]  = {0};  // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 44 24 70	 lea	 rax, QWORD PTR tim$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb

; 1558 : 
; 1559 :     FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  00030	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 70	 lea	 rdx, QWORD PTR tim$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1560 : 
; 1561 :     // "Processor %s%02X: architecture mode %s"
; 1562 :     tf_do_blank_sep( &rec->rhdr );

  00050	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_do_blank_sep

; 1563 :     FLOGMSG( stdout,

  00060	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	48 83 c0 18	 add	 rax, 24
  0006c	48 89 44 24 50	 mov	 QWORD PTR tv74[rsp], rax
  00071	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00079	0f b6 49 04	 movzx	 ecx, BYTE PTR [rcx+4]
  0007d	e8 00 00 00 00	 call	 ptyp_str
  00082	48 89 44 24 58	 mov	 QWORD PTR tv76[rsp], rax
  00087	b9 01 00 00 00	 mov	 ecx, 1
  0008c	48 6b c9 0b	 imul	 rcx, rcx, 11
  00090	48 8d 4c 0c 70	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  00095	48 89 4c 24 60	 mov	 QWORD PTR tv81[rsp], rcx
  0009a	b9 01 00 00 00	 mov	 ecx, 1
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv74[rsp]
  000aa	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000af	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv76[rsp]
  000b4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000b9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv81[rsp]
  000be	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160012
  000ca	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000cf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d4	41 b9 03 00 00
	00		 mov	 r9d, 3
  000da	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160013
  000e1	ba 1d 06 00 00	 mov	 edx, 1565		; 0000061dH
  000e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160014
  000ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1564 :         "%s HHC00811I Processor %s: architecture mode %s\n",
; 1565 :         &tim[ 11 ], ptyp_str( rec->rhdr.cpuad ), rec->archname );
; 1566 : }

  000f3	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000fb	48 33 cc	 xor	 rcx, rsp
  000fe	e8 00 00 00 00	 call	 __security_check_cookie
  00103	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0010a	5f		 pop	 rdi
  0010b	c3		 ret	 0
print_811_arch_mode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv74 = 80
tv76 = 88
tv81 = 96
tim$ = 112
__$ArrayPad$ = 176
rec$ = 208
print_809_disabled_wait PROC

; 1540 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1541 :     char tim [ 64 ]  = {0};  // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 44 24 70	 lea	 rax, QWORD PTR tim$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb

; 1542 : 
; 1543 :     FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  00030	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 70	 lea	 rdx, QWORD PTR tim$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1544 : 
; 1545 :     // "Processor %s%02X: disabled wait state %s"
; 1546 :     tf_do_blank_sep( &rec->rhdr );

  00050	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_do_blank_sep

; 1547 :     FLOGMSG( stdout,

  00060	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	48 83 c0 18	 add	 rax, 24
  0006c	48 89 44 24 50	 mov	 QWORD PTR tv74[rsp], rax
  00071	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00079	0f b6 49 04	 movzx	 ecx, BYTE PTR [rcx+4]
  0007d	e8 00 00 00 00	 call	 ptyp_str
  00082	48 89 44 24 58	 mov	 QWORD PTR tv76[rsp], rax
  00087	b9 01 00 00 00	 mov	 ecx, 1
  0008c	48 6b c9 0b	 imul	 rcx, rcx, 11
  00090	48 8d 4c 0c 70	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  00095	48 89 4c 24 60	 mov	 QWORD PTR tv81[rsp], rcx
  0009a	b9 01 00 00 00	 mov	 ecx, 1
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv74[rsp]
  000aa	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000af	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv76[rsp]
  000b4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000b9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv81[rsp]
  000be	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160004
  000ca	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000cf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d4	41 b9 03 00 00
	00		 mov	 r9d, 3
  000da	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160005
  000e1	ba 0d 06 00 00	 mov	 edx, 1549		; 0000060dH
  000e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160006
  000ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1548 :         "%s HHC00809I Processor %s: disabled wait state %s\n",
; 1549 :         &tim[ 11 ], ptyp_str( rec->rhdr.cpuad ), rec->str );
; 1550 : }

  000f3	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000fb	48 33 cc	 xor	 rcx, rsp
  000fe	e8 00 00 00 00	 call	 __security_check_cookie
  00103	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0010a	5f		 pop	 rdi
  0010b	c3		 ret	 0
print_809_disabled_wait ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv74 = 64
tv79 = 72
tim$ = 80
__$ArrayPad$ = 144
rec$ = 176
print_808_store_status PROC

; 1524 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1525 :     char tim [ 64 ]  = {0};  // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 44 24 50	 lea	 rax, QWORD PTR tim$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb

; 1526 : 
; 1527 :     FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  00030	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 50	 lea	 rdx, QWORD PTR tim$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1528 : 
; 1529 :     // "Processor %s%02X: store status completed"
; 1530 :     tf_do_blank_sep( &rec->rhdr );

  00050	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_do_blank_sep

; 1531 :     FLOGMSG( stdout,

  00060	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b6 48 04	 movzx	 ecx, BYTE PTR [rax+4]
  0006c	e8 00 00 00 00	 call	 ptyp_str
  00071	48 89 44 24 40	 mov	 QWORD PTR tv74[rsp], rax
  00076	b9 01 00 00 00	 mov	 ecx, 1
  0007b	48 6b c9 0b	 imul	 rcx, rcx, 11
  0007f	48 8d 4c 0c 50	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  00084	48 89 4c 24 48	 mov	 QWORD PTR tv79[rsp], rcx
  00089	b9 01 00 00 00	 mov	 ecx, 1
  0008e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00094	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv74[rsp]
  00099	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0009e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv79[rsp]
  000a3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159996
  000af	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000b4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000bf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159997
  000c6	ba fd 05 00 00	 mov	 edx, 1533		; 000005fdH
  000cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159998
  000d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1532 :         "%s HHC00808I Processor %s: store status completed\n",
; 1533 :         &tim[ 11 ], ptyp_str( rec->rhdr.cpuad ) );
; 1534 : }

  000d8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000e0	48 33 cc	 xor	 rcx, rsp
  000e3	e8 00 00 00 00	 call	 __security_check_cookie
  000e8	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  000ef	5f		 pop	 rdi
  000f0	c3		 ret	 0
print_808_store_status ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv76 = 80
tv81 = 88
tim$ = 96
__$ArrayPad$ = 160
rec$ = 192
print_807_machine_check_interrupt PROC

; 1508 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1509 :     char tim [ 64 ]  = {0};  // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 44 24 60	 lea	 rax, QWORD PTR tim$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb

; 1510 : 
; 1511 :     FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  00030	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 60	 lea	 rdx, QWORD PTR tim$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1512 : 
; 1513 :     // "Processor %s%02X: machine check code %16.16"PRIu64
; 1514 :     tf_do_blank_sep( &rec->rhdr );

  00050	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_do_blank_sep

; 1515 :     FLOGMSG( stdout,

  00060	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	0f b6 48 04	 movzx	 ecx, BYTE PTR [rax+4]
  0006c	e8 00 00 00 00	 call	 ptyp_str
  00071	48 89 44 24 50	 mov	 QWORD PTR tv76[rsp], rax
  00076	b9 01 00 00 00	 mov	 ecx, 1
  0007b	48 6b c9 0b	 imul	 rcx, rcx, 11
  0007f	48 8d 4c 0c 60	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  00084	48 89 4c 24 58	 mov	 QWORD PTR tv81[rsp], rcx
  00089	b9 01 00 00 00	 mov	 ecx, 1
  0008e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00094	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0009c	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  000a0	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000a5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv76[rsp]
  000aa	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000af	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv81[rsp]
  000b4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159988
  000c0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ca	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159989
  000d7	ba ed 05 00 00	 mov	 edx, 1517		; 000005edH
  000dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159990
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1516 :         "%s HHC00807I Processor %s: machine check code %16.16"PRIu64"\n",
; 1517 :         &tim[ 11 ], ptyp_str( rec->rhdr.cpuad ), rec->mcic );
; 1518 : }

  000e9	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f1	48 33 cc	 xor	 rcx, rsp
  000f4	e8 00 00 00 00	 call	 __security_check_cookie
  000f9	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  00100	5f		 pop	 rdi
  00101	c3		 ret	 0
print_807_machine_check_interrupt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv77 = 144
tv82 = 148
tv87 = 152
tv129 = 156
tv134 = 160
tv139 = 164
tv147 = 168
tv152 = 176
tv157 = 184
tim$ = 192
__$ArrayPad$ = 256
rec$ = 320
print_804_io_rupt_370 PROC

; 1489 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	53		 push	 rbx
  00006	55		 push	 rbp
  00007	56		 push	 rsi
  00008	57		 push	 rdi
  00009	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00010	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00017	48 33 c4	 xor	 rax, rsp
  0001a	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1490 :     char tim [ 64 ]  = {0};  // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  00022	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR tim$[rsp]
  0002a	48 8b f8	 mov	 rdi, rax
  0002d	33 c0		 xor	 eax, eax
  0002f	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00034	f3 aa		 rep stosb

; 1491 : 
; 1492 :     FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  00036	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0003e	48 83 c0 08	 add	 rax, 8
  00042	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00048	48 8d 94 24 c0
	00 00 00	 lea	 rdx, QWORD PTR tim$[rsp]
  00050	48 8b c8	 mov	 rcx, rax
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1493 : 
; 1494 :     // "Processor %s%02X: I/O interrupt code %1.1X:%4.4X CSW %2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X"
; 1495 :     tf_do_blank_sep( &rec->rhdr );

  00059	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00061	48 8b c8	 mov	 rcx, rax
  00064	e8 00 00 00 00	 call	 tf_do_blank_sep

; 1496 :     FLOGMSG( stdout,

  00069	b8 01 00 00 00	 mov	 eax, 1
  0006e	48 6b c0 07	 imul	 rax, rax, 7
  00072	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0007a	0f b6 44 01 18	 movzx	 eax, BYTE PTR [rcx+rax+24]
  0007f	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv77[rsp], eax
  00086	b9 01 00 00 00	 mov	 ecx, 1
  0008b	48 6b c9 06	 imul	 rcx, rcx, 6
  0008f	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  00097	0f b6 4c 0a 18	 movzx	 ecx, BYTE PTR [rdx+rcx+24]
  0009c	89 8c 24 94 00
	00 00		 mov	 DWORD PTR tv82[rsp], ecx
  000a3	ba 01 00 00 00	 mov	 edx, 1
  000a8	48 6b d2 05	 imul	 rdx, rdx, 5
  000ac	48 8b bc 24 40
	01 00 00	 mov	 rdi, QWORD PTR rec$[rsp]
  000b4	0f b6 54 17 18	 movzx	 edx, BYTE PTR [rdi+rdx+24]
  000b9	89 94 24 98 00
	00 00		 mov	 DWORD PTR tv87[rsp], edx
  000c0	bf 01 00 00 00	 mov	 edi, 1
  000c5	48 6b ff 04	 imul	 rdi, rdi, 4
  000c9	4c 8b 84 24 40
	01 00 00	 mov	 r8, QWORD PTR rec$[rsp]
  000d1	41 0f b6 7c 38
	18		 movzx	 edi, BYTE PTR [r8+rdi+24]
  000d7	41 b8 01 00 00
	00		 mov	 r8d, 1
  000dd	4d 6b c0 03	 imul	 r8, r8, 3
  000e1	4c 8b 8c 24 40
	01 00 00	 mov	 r9, QWORD PTR rec$[rsp]
  000e9	47 0f b6 44 01
	18		 movzx	 r8d, BYTE PTR [r9+r8+24]
  000ef	44 89 84 24 9c
	00 00 00	 mov	 DWORD PTR tv129[rsp], r8d
  000f7	41 b9 01 00 00
	00		 mov	 r9d, 1
  000fd	4d 6b c9 02	 imul	 r9, r9, 2
  00101	4c 8b 94 24 40
	01 00 00	 mov	 r10, QWORD PTR rec$[rsp]
  00109	47 0f b6 4c 0a
	18		 movzx	 r9d, BYTE PTR [r10+r9+24]
  0010f	44 89 8c 24 a0
	00 00 00	 mov	 DWORD PTR tv134[rsp], r9d
  00117	41 ba 01 00 00
	00		 mov	 r10d, 1
  0011d	4d 6b d2 01	 imul	 r10, r10, 1
  00121	4c 8b 9c 24 40
	01 00 00	 mov	 r11, QWORD PTR rec$[rsp]
  00129	47 0f b6 54 13
	18		 movzx	 r10d, BYTE PTR [r11+r10+24]
  0012f	44 89 94 24 a4
	00 00 00	 mov	 DWORD PTR tv139[rsp], r10d
  00137	41 bb 01 00 00
	00		 mov	 r11d, 1
  0013d	4d 6b db 00	 imul	 r11, r11, 0
  00141	48 8b 9c 24 40
	01 00 00	 mov	 rbx, QWORD PTR rec$[rsp]
  00149	42 0f b6 5c 1b
	18		 movzx	 ebx, BYTE PTR [rbx+r11+24]
  0014f	4c 8b 9c 24 40
	01 00 00	 mov	 r11, QWORD PTR rec$[rsp]
  00157	45 0f b7 5b 20	 movzx	 r11d, WORD PTR [r11+32]
  0015c	44 89 9c 24 a8
	00 00 00	 mov	 DWORD PTR tv147[rsp], r11d
  00164	48 8b b4 24 40
	01 00 00	 mov	 rsi, QWORD PTR rec$[rsp]
  0016c	0f b6 76 11	 movzx	 esi, BYTE PTR [rsi+17]
  00170	48 8b ac 24 40
	01 00 00	 mov	 rbp, QWORD PTR rec$[rsp]
  00178	0f b6 4d 04	 movzx	 ecx, BYTE PTR [rbp+4]
  0017c	e8 00 00 00 00	 call	 ptyp_str
  00181	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv152[rsp], rax
  00189	b9 01 00 00 00	 mov	 ecx, 1
  0018e	48 6b c9 0b	 imul	 rcx, rcx, 11
  00192	48 8d 8c 0c c0
	00 00 00	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  0019a	48 89 8c 24 b8
	00 00 00	 mov	 QWORD PTR tv157[rsp], rcx
  001a2	b9 01 00 00 00	 mov	 ecx, 1
  001a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001ad	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv77[rsp]
  001b4	89 8c 24 88 00
	00 00		 mov	 DWORD PTR [rsp+136], ecx
  001bb	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv82[rsp]
  001c2	89 8c 24 80 00
	00 00		 mov	 DWORD PTR [rsp+128], ecx
  001c9	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv87[rsp]
  001d0	89 4c 24 78	 mov	 DWORD PTR [rsp+120], ecx
  001d4	89 7c 24 70	 mov	 DWORD PTR [rsp+112], edi
  001d8	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv129[rsp]
  001df	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  001e3	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv134[rsp]
  001ea	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  001ee	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv139[rsp]
  001f5	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  001f9	89 5c 24 50	 mov	 DWORD PTR [rsp+80], ebx
  001fd	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv147[rsp]
  00204	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00208	89 74 24 40	 mov	 DWORD PTR [rsp+64], esi
  0020c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv152[rsp]
  00214	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00219	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv157[rsp]
  00221	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00226	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159980
  0022d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00232	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00237	41 b9 03 00 00
	00		 mov	 r9d, 3
  0023d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159981
  00244	ba dd 05 00 00	 mov	 edx, 1501		; 000005ddH
  00249	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159982
  00250	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1497 :         "%s HHC00804I Processor %s: I/O interrupt code %1.1X:%4.4X "
; 1498 :         "CSW %2.2X%2.2X%2.2X%2.2X %2.2X%2.2X%2.2X%2.2X\n",
; 1499 :         &tim[ 11 ], ptyp_str( rec->rhdr.cpuad ),
; 1500 :         rec->rhdr.lcss, rec->ioid, rec->csw[0], rec->csw[1], rec->csw[2], rec->csw[3],
; 1501 :                               rec->csw[4], rec->csw[5], rec->csw[6], rec->csw[7] );
; 1502 : }

  00256	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0025e	48 33 cc	 xor	 rcx, rsp
  00261	e8 00 00 00 00	 call	 __security_check_cookie
  00266	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  0026d	5f		 pop	 rdi
  0026e	5e		 pop	 rsi
  0026f	5d		 pop	 rbp
  00270	5b		 pop	 rbx
  00271	c3		 ret	 0
print_804_io_rupt_370 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv74 = 80
tv76 = 88
tv81 = 96
tim$ = 112
__$ArrayPad$ = 176
rec$ = 208
print_803_pgm_int_loop PROC

; 1473 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1474 :     char tim [ 64 ]  = {0};  // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 44 24 70	 lea	 rax, QWORD PTR tim$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb

; 1475 : 
; 1476 :     FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  00030	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 70	 lea	 rdx, QWORD PTR tim$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1477 : 
; 1478 :     // "Processor %s%02X: program interrupt loop PSW %s"
; 1479 :     tf_do_blank_sep( &rec->rhdr );

  00050	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_do_blank_sep

; 1480 :     FLOGMSG( stdout,

  00060	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	48 83 c0 18	 add	 rax, 24
  0006c	48 89 44 24 50	 mov	 QWORD PTR tv74[rsp], rax
  00071	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00079	0f b6 49 04	 movzx	 ecx, BYTE PTR [rcx+4]
  0007d	e8 00 00 00 00	 call	 ptyp_str
  00082	48 89 44 24 58	 mov	 QWORD PTR tv76[rsp], rax
  00087	b9 01 00 00 00	 mov	 ecx, 1
  0008c	48 6b c9 0b	 imul	 rcx, rcx, 11
  00090	48 8d 4c 0c 70	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  00095	48 89 4c 24 60	 mov	 QWORD PTR tv81[rsp], rcx
  0009a	b9 01 00 00 00	 mov	 ecx, 1
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv74[rsp]
  000aa	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000af	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv76[rsp]
  000b4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000b9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv81[rsp]
  000be	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159972
  000ca	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000cf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d4	41 b9 03 00 00
	00		 mov	 r9d, 3
  000da	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159973
  000e1	ba ca 05 00 00	 mov	 edx, 1482		; 000005caH
  000e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159974
  000ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1481 :         "%s HHC00803I Processor %s: program interrupt loop PSW %s\n",
; 1482 :         &tim[ 11 ], ptyp_str( rec->rhdr.cpuad ), rec->str );
; 1483 : }

  000f3	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000fb	48 33 cc	 xor	 rcx, rsp
  000fe	e8 00 00 00 00	 call	 __security_check_cookie
  00103	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0010a	5f		 pop	 rdi
  0010b	c3		 ret	 0
print_803_pgm_int_loop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv89 = 96
tv144 = 100
tv93 = 104
tv130 = 112
tv148 = 120
tv153 = 128
percname$ = 136
tim$ = 176
__$ArrayPad$ = 240
rec$ = 272
print_802_per_event PROC

; 1441 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 00 01
	00 00		 sub	 rsp, 256		; 00000100H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1442 :     char tim [ 64 ]  = {0};  // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR tim$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb

; 1443 :     char percname[ 32 ] = {0};

  00033	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR percname$[rsp]
  0003b	48 8b f8	 mov	 rdi, rax
  0003e	33 c0		 xor	 eax, eax
  00040	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00045	f3 aa		 rep stosb

; 1444 : 
; 1445 :     FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  00047	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0004f	48 83 c0 08	 add	 rax, 8
  00053	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00059	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR tim$[rsp]
  00061	48 8b c8	 mov	 rcx, rax
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1446 : 
; 1447 :     perc2name( rec->perc, percname, sizeof( percname ));

  0006a	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00070	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR percname$[rsp]
  00078	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00080	0f b6 48 24	 movzx	 ecx, BYTE PTR [rax+36]
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_perc2name

; 1448 : 
; 1449 :     tf_do_blank_sep( &rec->rhdr );

  0008a	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00092	48 8b c8	 mov	 rcx, rax
  00095	e8 00 00 00 00	 call	 tf_do_blank_sep

; 1450 : 
; 1451 :     if (ARCH_900_IDX == rec->rhdr.arch_mode)

  0009a	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  000a2	0f b6 40 10	 movzx	 eax, BYTE PTR [rax+16]
  000a6	83 f8 02	 cmp	 eax, 2
  000a9	0f 85 c5 00 00
	00		 jne	 $LN2@print_802_

; 1452 :     {
; 1453 :         // "Processor %s%02X: PER event: code %4.4X perc %2.2X=%s addr "F_VADR
; 1454 :         FLOGMSG( stdout,

  000af	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  000b7	0f b7 40 24	 movzx	 eax, WORD PTR [rax+36]
  000bb	89 44 24 60	 mov	 DWORD PTR tv89[rsp], eax
  000bf	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000c7	0f b6 49 04	 movzx	 ecx, BYTE PTR [rcx+4]
  000cb	e8 00 00 00 00	 call	 ptyp_str
  000d0	48 89 44 24 68	 mov	 QWORD PTR tv93[rsp], rax
  000d5	b9 01 00 00 00	 mov	 ecx, 1
  000da	48 6b c9 0b	 imul	 rcx, rcx, 11
  000de	48 8d 8c 0c b0
	00 00 00	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  000e6	48 89 4c 24 70	 mov	 QWORD PTR tv130[rsp], rcx
  000eb	b9 01 00 00 00	 mov	 ecx, 1
  000f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000f6	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  000fe	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00102	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00107	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR percname$[rsp]
  0010f	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00114	8b 4c 24 60	 mov	 ecx, DWORD PTR tv89[rsp]
  00118	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  0011c	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00124	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  00127	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0012b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv93[rsp]
  00130	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00135	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv130[rsp]
  0013a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0013f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159961
  00146	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0014b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00150	41 b9 03 00 00
	00		 mov	 r9d, 3
  00156	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159962
  0015d	ba b1 05 00 00	 mov	 edx, 1457		; 000005b1H
  00162	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159963
  00169	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1455 :             "%s HHC00802I Processor %s: PER event: code %4.4X perc %2.2X=%s addr %16.16"PRIX64"\n",
; 1456 :             &tim[ 11 ], ptyp_str( rec->rhdr.cpuad ),
; 1457 :             rec->pcode, rec->perc, percname, rec->ia );
; 1458 :     }

  0016f	e9 c4 00 00 00	 jmp	 $LN3@print_802_
$LN2@print_802_:

; 1459 :     else // (390/370)
; 1460 :     {
; 1461 :         // "Processor %s%02X: PER event: code %4.4X perc %2.2X=%s addr "F_VADR
; 1462 :         FLOGMSG( stdout,

  00174	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0017c	0f b7 40 24	 movzx	 eax, WORD PTR [rax+36]
  00180	89 44 24 64	 mov	 DWORD PTR tv144[rsp], eax
  00184	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0018c	0f b6 49 04	 movzx	 ecx, BYTE PTR [rcx+4]
  00190	e8 00 00 00 00	 call	 ptyp_str
  00195	48 89 44 24 78	 mov	 QWORD PTR tv148[rsp], rax
  0019a	b9 01 00 00 00	 mov	 ecx, 1
  0019f	48 6b c9 0b	 imul	 rcx, rcx, 11
  001a3	48 8d 8c 0c b0
	00 00 00	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  001ab	48 89 8c 24 80
	00 00 00	 mov	 QWORD PTR tv153[rsp], rcx
  001b3	b9 01 00 00 00	 mov	 ecx, 1
  001b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001be	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  001c6	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  001c9	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  001cd	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR percname$[rsp]
  001d5	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  001da	8b 4c 24 64	 mov	 ecx, DWORD PTR tv144[rsp]
  001de	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  001e2	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  001ea	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  001ed	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001f1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv148[rsp]
  001f6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001fb	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv153[rsp]
  00203	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00208	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159964
  0020f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00214	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00219	41 b9 03 00 00
	00		 mov	 r9d, 3
  0021f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159965
  00226	ba b9 05 00 00	 mov	 edx, 1465		; 000005b9H
  0022b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159966
  00232	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN3@print_802_:

; 1463 :             "%s HHC00802I Processor %s: PER event: code %4.4X perc %2.2X=%s addr %8.8"PRIX32"\n",
; 1464 :             &tim[ 11 ], ptyp_str( rec->rhdr.cpuad ),
; 1465 :             rec->pcode, rec->perc, percname, (U32) rec->ia );
; 1466 :     }
; 1467 : }

  00238	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00240	48 33 cc	 xor	 rcx, rsp
  00243	e8 00 00 00 00	 call	 __security_check_cookie
  00248	48 81 c4 00 01
	00 00		 add	 rsp, 256		; 00000100H
  0024f	5f		 pop	 rdi
  00250	c3		 ret	 0
print_802_per_event ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv136 = 112
tv139 = 116
tv150 = 120
tv141 = 128
tv152 = 136
tv157 = 144
dxcstr$ = 152
timstr$ = 160
whystr$ = 224
__$ArrayPad$ = 480
rec$ = 512
print_801_program_interrupt PROC

; 1407 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec f0 01
	00 00		 sub	 rsp, 496		; 000001f0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1408 :     char timstr [  64 ]  = {0};   // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR timstr$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb

; 1409 :     char dxcstr [   8 ]  = {0};   // data exception code if PGM_DATA_EXCEPTION

  00033	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR dxcstr$[rsp]
  0003b	48 8b f8	 mov	 rdi, rax
  0003e	33 c0		 xor	 eax, eax
  00040	b9 08 00 00 00	 mov	 ecx, 8
  00045	f3 aa		 rep stosb

; 1410 :     char whystr [ 256 ]  = {0};   // TXF "why" string if txf pgmint

  00047	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR whystr$[rsp]
  0004f	48 8b f8	 mov	 rdi, rax
  00052	33 c0		 xor	 eax, eax
  00054	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00059	f3 aa		 rep stosb

; 1411 : 
; 1412 :     FormatTIMEVAL( &rec->rhdr.tod, timstr, sizeof( timstr ));

  0005b	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00063	48 83 c0 08	 add	 rax, 8
  00067	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0006d	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR timstr$[rsp]
  00075	48 8b c8	 mov	 rcx, rax
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1413 : 
; 1414 :     if ((rec->pcode & 0xFF) == PGM_DATA_EXCEPTION)

  0007e	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00086	0f b7 40 18	 movzx	 eax, WORD PTR [rax+24]
  0008a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0008f	83 f8 07	 cmp	 eax, 7
  00092	75 26		 jne	 SHORT $LN2@print_801_

; 1415 :        MSGBUF( dxcstr, " DXC=%2.2X", rec->dxc );

  00094	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0009c	44 8b 48 1c	 mov	 r9d, DWORD PTR [rax+28]
  000a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159945
  000a7	ba 08 00 00 00	 mov	 edx, 8
  000ac	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR dxcstr$[rsp]
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN2@print_801_:

; 1416 : 
; 1417 :     if ((rec->pcode & PGM_TXF_EVENT) && rec->why)

  000ba	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  000c2	0f b7 40 18	 movzx	 eax, WORD PTR [rax+24]
  000c6	25 00 02 00 00	 and	 eax, 512		; 00000200H
  000cb	85 c0		 test	 eax, eax
  000cd	74 2d		 je	 SHORT $LN3@print_801_
  000cf	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  000d7	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  000db	74 1f		 je	 SHORT $LN3@print_801_

; 1418 :         txf_why_str( whystr, sizeof( whystr ), rec->why );

  000dd	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  000e5	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000e9	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  000ee	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR whystr$[rsp]
  000f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_txf_why_str
$LN3@print_801_:

; 1419 : 
; 1420 :     // "Processor %s%02X: %s%s%s interruption code %4.4X ilc %d%s%s"
; 1421 :     tf_do_blank_sep( &rec->rhdr );

  000fc	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00104	48 8b c8	 mov	 rcx, rax
  00107	e8 00 00 00 00	 call	 tf_do_blank_sep

; 1422 :     FLOGMSG( stdout,

  0010c	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00114	0f b6 40 1a	 movzx	 eax, BYTE PTR [rax+26]
  00118	85 c0		 test	 eax, eax
  0011a	74 0e		 je	 SHORT $LN5@print_801_
  0011c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159947
  00123	48 89 44 24 78	 mov	 QWORD PTR tv150[rsp], rax
  00128	eb 0c		 jmp	 SHORT $LN6@print_801_
$LN5@print_801_:
  0012a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159948
  00131	48 89 44 24 78	 mov	 QWORD PTR tv150[rsp], rax
$LN6@print_801_:
  00136	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0013e	0f b6 40 1b	 movzx	 eax, BYTE PTR [rax+27]
  00142	89 44 24 70	 mov	 DWORD PTR tv136[rsp], eax
  00146	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0014e	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  00152	89 4c 24 74	 mov	 DWORD PTR tv139[rsp], ecx
  00156	48 8b 94 24 00
	02 00 00	 mov	 rdx, QWORD PTR rec$[rsp]
  0015e	0f b7 52 18	 movzx	 edx, WORD PTR [rdx+24]
  00162	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  00168	8b ca		 mov	 ecx, edx
  0016a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PIC2Name
  00170	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv141[rsp], rax
  00178	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00180	0f b6 49 04	 movzx	 ecx, BYTE PTR [rcx+4]
  00184	e8 00 00 00 00	 call	 ptyp_str
  00189	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv152[rsp], rax
  00191	b9 01 00 00 00	 mov	 ecx, 1
  00196	48 6b c9 0b	 imul	 rcx, rcx, 11
  0019a	48 8d 8c 0c a0
	00 00 00	 lea	 rcx, QWORD PTR timstr$[rsp+rcx]
  001a2	48 89 8c 24 90
	00 00 00	 mov	 QWORD PTR tv157[rsp], rcx
  001aa	b9 01 00 00 00	 mov	 ecx, 1
  001af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001b5	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR whystr$[rsp]
  001bd	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  001c2	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR dxcstr$[rsp]
  001ca	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  001cf	8b 4c 24 70	 mov	 ecx, DWORD PTR tv136[rsp]
  001d3	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  001d7	8b 4c 24 74	 mov	 ecx, DWORD PTR tv139[rsp]
  001db	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  001df	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv141[rsp]
  001e7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  001ec	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv150[rsp]
  001f1	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001f6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv152[rsp]
  001fe	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00203	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv157[rsp]
  0020b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00210	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159949
  00217	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0021c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00221	41 b9 03 00 00
	00		 mov	 r9d, 3
  00227	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159950
  0022e	ba 9a 05 00 00	 mov	 edx, 1434		; 0000059aH
  00233	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159951
  0023a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1423 : 
; 1424 :         "%s HHC00801I Processor %s: %s%s interruption code %4.4X ilc %d%s%s\n",
; 1425 : 
; 1426 :         &timstr[ 11 ],
; 1427 :         ptyp_str( rec->rhdr.cpuad ),
; 1428 :         rec->sie ? "SIE: " : "",
; 1429 :         PIC2Name( rec->pcode & 0xFF ),
; 1430 :         rec->pcode,
; 1431 :         rec->ilc,
; 1432 :         dxcstr,
; 1433 :         whystr
; 1434 :     );
; 1435 : }

  00240	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00248	48 33 cc	 xor	 rcx, rsp
  0024b	e8 00 00 00 00	 call	 __security_check_cookie
  00250	48 81 c4 f0 01
	00 00		 add	 rsp, 496		; 000001f0H
  00257	5f		 pop	 rdi
  00258	c3		 ret	 0
print_801_program_interrupt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv74 = 80
tv80 = 88
tv85 = 96
timstr$ = 112
__$ArrayPad$ = 176
rec$ = 208
print_800_wait_state_psw PROC

; 1386 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1387 :     char timstr[ 64 ] = {0};    // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 44 24 70	 lea	 rax, QWORD PTR timstr$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb

; 1388 : 
; 1389 :     FormatTIMEVAL( &rec->rhdr.tod, timstr, sizeof( timstr ));

  00030	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00042	48 8d 54 24 70	 lea	 rdx, QWORD PTR timstr$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1390 : 
; 1391 :     // "Processor %s%02X: loaded wait state PSW %s"
; 1392 :     tf_do_blank_sep( &rec->rhdr );

  00050	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 tf_do_blank_sep

; 1393 :     FLOGMSG( stdout,

  00060	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00068	48 83 c0 18	 add	 rax, 24
  0006c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00074	0f b6 51 10	 movzx	 edx, BYTE PTR [rcx+16]
  00078	48 8b c8	 mov	 rcx, rax
  0007b	e8 00 00 00 00	 call	 fmt_psw_str
  00080	48 89 44 24 50	 mov	 QWORD PTR tv74[rsp], rax
  00085	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0008d	0f b6 49 04	 movzx	 ecx, BYTE PTR [rcx+4]
  00091	e8 00 00 00 00	 call	 ptyp_str
  00096	48 89 44 24 58	 mov	 QWORD PTR tv80[rsp], rax
  0009b	b9 01 00 00 00	 mov	 ecx, 1
  000a0	48 6b c9 0b	 imul	 rcx, rcx, 11
  000a4	48 8d 4c 0c 70	 lea	 rcx, QWORD PTR timstr$[rsp+rcx]
  000a9	48 89 4c 24 60	 mov	 QWORD PTR tv85[rsp], rcx
  000ae	b9 01 00 00 00	 mov	 ecx, 1
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000b9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv74[rsp]
  000be	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000c3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv80[rsp]
  000c8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000cd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv85[rsp]
  000d2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159934
  000de	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000e3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e8	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ee	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159935
  000f5	ba 78 05 00 00	 mov	 edx, 1400		; 00000578H
  000fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159936
  00101	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1394 : 
; 1395 :         "%s HHC00800I Processor %s: loaded wait state PSW %s\n",
; 1396 : 
; 1397 :         &timstr[ 11 ],
; 1398 :         ptyp_str( rec->rhdr.cpuad ),
; 1399 :         fmt_psw_str( &rec->psw, rec->rhdr.arch_mode )
; 1400 :     );
; 1401 : }

  00107	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0010f	48 33 cc	 xor	 rcx, rsp
  00112	e8 00 00 00 00	 call	 __security_check_cookie
  00117	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0011e	5f		 pop	 rdi
  0011f	c3		 ret	 0
print_800_wait_state_psw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
p$1 = 80
inst_str$ = 88
__$ArrayPad$ = 120
psw$ = 144
arch_mode$ = 152
inst$ = 160
real_ilc$ = 168
fmt_psw_inst_str PROC

; 1360 : {

  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	57		 push	 rdi
  00014	48 81 ec 80 00
	00 00		 sub	 rsp, 128		; 00000080H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 44 24 78	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1361 :     static char psw_inst[ 64 ] = {0};
; 1362 :            char inst_str[ 32 ] = {0};

  0002a	48 8d 44 24 58	 lea	 rax, QWORD PTR inst_str$[rsp]
  0002f	48 8b f8	 mov	 rdi, rax
  00032	33 c0		 xor	 eax, eax
  00034	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00039	f3 aa		 rep stosb

; 1363 : 
; 1364 :     if (2 == real_ilc)

  0003b	0f b6 84 24 a8
	00 00 00	 movzx	 eax, BYTE PTR real_ilc$[rsp]
  00043	83 f8 02	 cmp	 eax, 2
  00046	75 4d		 jne	 SHORT $LN5@fmt_psw_in

; 1365 :         MSGBUF( inst_str, "%2.2X%2.2X        ",

  00048	b8 01 00 00 00	 mov	 eax, 1
  0004d	48 6b c0 01	 imul	 rax, rax, 1
  00051	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00059	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0005d	b9 01 00 00 00	 mov	 ecx, 1
  00062	48 6b c9 00	 imul	 rcx, rcx, 0
  00066	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  0006e	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00072	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00076	44 8b c9	 mov	 r9d, ecx
  00079	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159921
  00080	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00085	48 8d 4c 24 58	 lea	 rcx, QWORD PTR inst_str$[rsp]
  0008a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00090	e9 6a 01 00 00	 jmp	 $LN6@fmt_psw_in
$LN5@fmt_psw_in:

; 1366 :             inst[0], inst[1] );
; 1367 :     else if (4 == real_ilc)

  00095	0f b6 84 24 a8
	00 00 00	 movzx	 eax, BYTE PTR real_ilc$[rsp]
  0009d	83 f8 04	 cmp	 eax, 4
  000a0	0f 85 80 00 00
	00		 jne	 $LN7@fmt_psw_in

; 1368 :         MSGBUF( inst_str, "%2.2X%2.2X%2.2X%2.2X    ",

  000a6	b8 01 00 00 00	 mov	 eax, 1
  000ab	48 6b c0 03	 imul	 rax, rax, 3
  000af	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000b7	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000bb	b9 01 00 00 00	 mov	 ecx, 1
  000c0	48 6b c9 02	 imul	 rcx, rcx, 2
  000c4	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000cc	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000d0	ba 01 00 00 00	 mov	 edx, 1
  000d5	48 6b d2 01	 imul	 rdx, rdx, 1
  000d9	48 8b bc 24 a0
	00 00 00	 mov	 rdi, QWORD PTR inst$[rsp]
  000e1	0f b6 14 17	 movzx	 edx, BYTE PTR [rdi+rdx]
  000e5	bf 01 00 00 00	 mov	 edi, 1
  000ea	48 6b ff 00	 imul	 rdi, rdi, 0
  000ee	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR inst$[rsp]
  000f6	41 0f b6 3c 38	 movzx	 edi, BYTE PTR [r8+rdi]
  000fb	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000ff	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00103	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  00107	44 8b cf	 mov	 r9d, edi
  0010a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159924
  00111	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00116	48 8d 4c 24 58	 lea	 rcx, QWORD PTR inst_str$[rsp]
  0011b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00121	e9 d9 00 00 00	 jmp	 $LN8@fmt_psw_in
$LN7@fmt_psw_in:

; 1369 :             inst[0], inst[1], inst[2], inst[3] );
; 1370 :     else if (6 == real_ilc)

  00126	0f b6 84 24 a8
	00 00 00	 movzx	 eax, BYTE PTR real_ilc$[rsp]
  0012e	83 f8 06	 cmp	 eax, 6
  00131	0f 85 b1 00 00
	00		 jne	 $LN9@fmt_psw_in

; 1371 :         MSGBUF( inst_str, "%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X",

  00137	b8 01 00 00 00	 mov	 eax, 1
  0013c	48 6b c0 05	 imul	 rax, rax, 5
  00140	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00148	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0014c	b9 01 00 00 00	 mov	 ecx, 1
  00151	48 6b c9 04	 imul	 rcx, rcx, 4
  00155	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  0015d	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00161	ba 01 00 00 00	 mov	 edx, 1
  00166	48 6b d2 03	 imul	 rdx, rdx, 3
  0016a	48 8b bc 24 a0
	00 00 00	 mov	 rdi, QWORD PTR inst$[rsp]
  00172	0f b6 14 17	 movzx	 edx, BYTE PTR [rdi+rdx]
  00176	bf 01 00 00 00	 mov	 edi, 1
  0017b	48 6b ff 02	 imul	 rdi, rdi, 2
  0017f	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR inst$[rsp]
  00187	41 0f b6 3c 38	 movzx	 edi, BYTE PTR [r8+rdi]
  0018c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00192	4d 6b c0 01	 imul	 r8, r8, 1
  00196	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR inst$[rsp]
  0019e	47 0f b6 04 01	 movzx	 r8d, BYTE PTR [r9+r8]
  001a3	41 b9 01 00 00
	00		 mov	 r9d, 1
  001a9	4d 6b c9 00	 imul	 r9, r9, 0
  001ad	4c 8b 94 24 a0
	00 00 00	 mov	 r10, QWORD PTR inst$[rsp]
  001b5	47 0f b6 0c 0a	 movzx	 r9d, BYTE PTR [r10+r9]
  001ba	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  001be	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  001c2	89 54 24 30	 mov	 DWORD PTR [rsp+48], edx
  001c6	89 7c 24 28	 mov	 DWORD PTR [rsp+40], edi
  001ca	44 89 44 24 20	 mov	 DWORD PTR [rsp+32], r8d
  001cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159927
  001d6	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  001db	48 8d 4c 24 58	 lea	 rcx, QWORD PTR inst_str$[rsp]
  001e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  001e6	eb 17		 jmp	 SHORT $LN10@fmt_psw_in
$LN9@fmt_psw_in:
$LN4@fmt_psw_in:

; 1372 :             inst[0], inst[1], inst[2], inst[3], inst[4], inst[5] );
; 1373 :     else
; 1374 :         CRASH();

  001e8	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR p$1[rsp], 0
  001f1	48 8b 44 24 50	 mov	 rax, QWORD PTR p$1[rsp]
  001f6	c6 00 00	 mov	 BYTE PTR [rax], 0
  001f9	33 c0		 xor	 eax, eax
  001fb	85 c0		 test	 eax, eax
  001fd	75 e9		 jne	 SHORT $LN4@fmt_psw_in
$LN10@fmt_psw_in:
$LN8@fmt_psw_in:
$LN6@fmt_psw_in:

; 1375 : 
; 1376 :     MSGBUF( psw_inst, "PSW=%s INST=%s",

  001ff	0f b6 94 24 98
	00 00 00	 movzx	 edx, BYTE PTR arch_mode$[rsp]
  00207	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR psw$[rsp]
  0020f	e8 00 00 00 00	 call	 fmt_psw_str
  00214	48 8d 4c 24 58	 lea	 rcx, QWORD PTR inst_str$[rsp]
  00219	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0021e	4c 8b c8	 mov	 r9, rax
  00221	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159928
  00228	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0022d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?psw_inst@?1??fmt_psw_inst_str@@9@9
  00234	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1377 :         fmt_psw_str( psw, arch_mode ), inst_str );
; 1378 : 
; 1379 :     return psw_inst;

  0023a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?psw_inst@?1??fmt_psw_inst_str@@9@9

; 1380 : }

  00241	48 8b 4c 24 78	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00246	48 33 cc	 xor	 rcx, rsp
  00249	e8 00 00 00 00	 call	 __security_check_cookie
  0024e	48 81 c4 80 00
	00 00		 add	 rsp, 128		; 00000080H
  00255	5f		 pop	 rdi
  00256	c3		 ret	 0
fmt_psw_inst_str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
b$ = 96
$T1 = 104
qword$ = 112
psw_str2$ = 128
__$ArrayPad$ = 160
psw$ = 208
arch_mode$ = 216
fmt_psw_str PROC

; 1335 : {

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	53		 push	 rbx
  0000a	57		 push	 rdi
  0000b	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1336 :     QWORD  qword;
; 1337 :     BYTE*  b = (BYTE*) &qword;

  00024	48 8d 44 24 70	 lea	 rax, QWORD PTR qword$[rsp]
  00029	48 89 44 24 60	 mov	 QWORD PTR b$[rsp], rax

; 1338 : 
; 1339 :     static char   psw_str [ 64 ];
; 1340 :            char   psw_str2[ 32 ];
; 1341 : 
; 1342 :     tf_store_psw( psw, &qword, arch_mode );

  0002e	44 0f b6 84 24
	d8 00 00 00	 movzx	 r8d, BYTE PTR arch_mode$[rsp]
  00037	48 8d 54 24 70	 lea	 rdx, QWORD PTR qword$[rsp]
  0003c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR psw$[rsp]
  00044	e8 00 00 00 00	 call	 tf_store_psw

; 1343 : 
; 1344 :     if (ARCH_900_IDX == arch_mode)

  00049	0f b6 84 24 d8
	00 00 00	 movzx	 eax, BYTE PTR arch_mode$[rsp]
  00051	83 f8 02	 cmp	 eax, 2
  00054	0f 85 d9 00 00
	00		 jne	 $LN2@fmt_psw_st

; 1345 :         MSGBUF( psw_str2, " %2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X",

  0005a	b8 01 00 00 00	 mov	 eax, 1
  0005f	48 6b c0 0f	 imul	 rax, rax, 15
  00063	48 8b 4c 24 60	 mov	 rcx, QWORD PTR b$[rsp]
  00068	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0006c	b9 01 00 00 00	 mov	 ecx, 1
  00071	48 6b c9 0e	 imul	 rcx, rcx, 14
  00075	48 8b 54 24 60	 mov	 rdx, QWORD PTR b$[rsp]
  0007a	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0007e	ba 01 00 00 00	 mov	 edx, 1
  00083	48 6b d2 0d	 imul	 rdx, rdx, 13
  00087	4c 8b 44 24 60	 mov	 r8, QWORD PTR b$[rsp]
  0008c	41 0f b6 14 10	 movzx	 edx, BYTE PTR [r8+rdx]
  00091	41 b8 01 00 00
	00		 mov	 r8d, 1
  00097	4d 6b c0 0c	 imul	 r8, r8, 12
  0009b	4c 8b 4c 24 60	 mov	 r9, QWORD PTR b$[rsp]
  000a0	47 0f b6 04 01	 movzx	 r8d, BYTE PTR [r9+r8]
  000a5	41 b9 01 00 00
	00		 mov	 r9d, 1
  000ab	4d 6b c9 0b	 imul	 r9, r9, 11
  000af	4c 8b 54 24 60	 mov	 r10, QWORD PTR b$[rsp]
  000b4	47 0f b6 0c 0a	 movzx	 r9d, BYTE PTR [r10+r9]
  000b9	41 ba 01 00 00
	00		 mov	 r10d, 1
  000bf	4d 6b d2 0a	 imul	 r10, r10, 10
  000c3	4c 8b 5c 24 60	 mov	 r11, QWORD PTR b$[rsp]
  000c8	47 0f b6 14 13	 movzx	 r10d, BYTE PTR [r11+r10]
  000cd	41 bb 01 00 00
	00		 mov	 r11d, 1
  000d3	4d 6b db 09	 imul	 r11, r11, 9
  000d7	48 8b 5c 24 60	 mov	 rbx, QWORD PTR b$[rsp]
  000dc	42 0f b6 1c 1b	 movzx	 ebx, BYTE PTR [rbx+r11]
  000e1	41 bb 01 00 00
	00		 mov	 r11d, 1
  000e7	4d 6b db 08	 imul	 r11, r11, 8
  000eb	48 8b 7c 24 60	 mov	 rdi, QWORD PTR b$[rsp]
  000f0	42 0f b6 3c 1f	 movzx	 edi, BYTE PTR [rdi+r11]
  000f5	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  000f9	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  000fd	89 54 24 40	 mov	 DWORD PTR [rsp+64], edx
  00101	44 89 44 24 38	 mov	 DWORD PTR [rsp+56], r8d
  00106	44 89 4c 24 30	 mov	 DWORD PTR [rsp+48], r9d
  0010b	44 89 54 24 28	 mov	 DWORD PTR [rsp+40], r10d
  00110	89 5c 24 20	 mov	 DWORD PTR [rsp+32], ebx
  00114	44 8b cf	 mov	 r9d, edi
  00117	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159899
  0011e	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00123	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR psw_str2$[rsp]
  0012b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00131	eb 2a		 jmp	 SHORT $LN3@fmt_psw_st
$LN2@fmt_psw_st:

; 1346 :                 b[8], b[9], b[10], b[11], b[12], b[13], b[14], b[15] );
; 1347 :     else
; 1348 :         psw_str2[0] = 0;

  00133	b8 01 00 00 00	 mov	 eax, 1
  00138	48 6b c0 00	 imul	 rax, rax, 0
  0013c	48 89 44 24 68	 mov	 QWORD PTR $T1[rsp], rax
  00141	48 83 7c 24 68
	20		 cmp	 QWORD PTR $T1[rsp], 32	; 00000020H
  00147	73 02		 jae	 SHORT $LN5@fmt_psw_st
  00149	eb 05		 jmp	 SHORT $LN6@fmt_psw_st
$LN5@fmt_psw_st:
  0014b	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN6@fmt_psw_st:
  00150	48 8b 44 24 68	 mov	 rax, QWORD PTR $T1[rsp]
  00155	c6 84 04 80 00
	00 00 00	 mov	 BYTE PTR psw_str2$[rsp+rax], 0
$LN3@fmt_psw_st:

; 1349 : 
; 1350 :     MSGBUF( psw_str, "%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%s",

  0015d	b8 01 00 00 00	 mov	 eax, 1
  00162	48 6b c0 07	 imul	 rax, rax, 7
  00166	48 8b 4c 24 60	 mov	 rcx, QWORD PTR b$[rsp]
  0016b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0016f	b9 01 00 00 00	 mov	 ecx, 1
  00174	48 6b c9 06	 imul	 rcx, rcx, 6
  00178	48 8b 54 24 60	 mov	 rdx, QWORD PTR b$[rsp]
  0017d	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00181	ba 01 00 00 00	 mov	 edx, 1
  00186	48 6b d2 05	 imul	 rdx, rdx, 5
  0018a	48 8b 5c 24 60	 mov	 rbx, QWORD PTR b$[rsp]
  0018f	0f b6 14 13	 movzx	 edx, BYTE PTR [rbx+rdx]
  00193	bb 01 00 00 00	 mov	 ebx, 1
  00198	48 6b db 04	 imul	 rbx, rbx, 4
  0019c	48 8b 7c 24 60	 mov	 rdi, QWORD PTR b$[rsp]
  001a1	0f b6 1c 1f	 movzx	 ebx, BYTE PTR [rdi+rbx]
  001a5	bf 01 00 00 00	 mov	 edi, 1
  001aa	48 6b ff 03	 imul	 rdi, rdi, 3
  001ae	4c 8b 44 24 60	 mov	 r8, QWORD PTR b$[rsp]
  001b3	41 0f b6 3c 38	 movzx	 edi, BYTE PTR [r8+rdi]
  001b8	41 b8 01 00 00
	00		 mov	 r8d, 1
  001be	4d 6b c0 02	 imul	 r8, r8, 2
  001c2	4c 8b 4c 24 60	 mov	 r9, QWORD PTR b$[rsp]
  001c7	47 0f b6 04 01	 movzx	 r8d, BYTE PTR [r9+r8]
  001cc	41 b9 01 00 00
	00		 mov	 r9d, 1
  001d2	4d 6b c9 01	 imul	 r9, r9, 1
  001d6	4c 8b 54 24 60	 mov	 r10, QWORD PTR b$[rsp]
  001db	47 0f b6 0c 0a	 movzx	 r9d, BYTE PTR [r10+r9]
  001e0	41 ba 01 00 00
	00		 mov	 r10d, 1
  001e6	4d 6b d2 00	 imul	 r10, r10, 0
  001ea	4c 8b 5c 24 60	 mov	 r11, QWORD PTR b$[rsp]
  001ef	47 0f b6 14 13	 movzx	 r10d, BYTE PTR [r11+r10]
  001f4	4c 8d 9c 24 80
	00 00 00	 lea	 r11, QWORD PTR psw_str2$[rsp]
  001fc	4c 89 5c 24 58	 mov	 QWORD PTR [rsp+88], r11
  00201	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00205	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00209	89 54 24 40	 mov	 DWORD PTR [rsp+64], edx
  0020d	89 5c 24 38	 mov	 DWORD PTR [rsp+56], ebx
  00211	89 7c 24 30	 mov	 DWORD PTR [rsp+48], edi
  00215	44 89 44 24 28	 mov	 DWORD PTR [rsp+40], r8d
  0021a	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  0021f	45 8b ca	 mov	 r9d, r10d
  00222	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159900
  00229	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0022e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?psw_str@?1??fmt_psw_str@@9@9
  00235	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1351 :             b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7], psw_str2 );
; 1352 : 
; 1353 :     return psw_str;

  0023b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?psw_str@?1??fmt_psw_str@@9@9
$LN4@fmt_psw_st:

; 1354 : }

  00242	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0024a	48 33 cc	 xor	 rcx, rsp
  0024d	e8 00 00 00 00	 call	 __security_check_cookie
  00252	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00259	5f		 pop	 rdi
  0025a	5b		 pop	 rbx
  0025b	c3		 ret	 0
fmt_psw_str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
cpuad$ = 48
print_all_available_regs PROC

; 1309 : {

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1310 :     // General Purpose Registers
; 1311 :     if (all_recs[ cpuad ].gotmask  &  GOT_TF02269)

  00008	0f b6 44 24 30	 movzx	 eax, BYTE PTR cpuad$[rsp]
  0000d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0001b	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00022	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00027	85 c0		 test	 eax, eax
  00029	74 23		 je	 SHORT $LN2@print_all_

; 1312 :         print_gr_regs( &all_recs[ cpuad ].tf02269 );

  0002b	0f b6 44 24 30	 movzx	 eax, BYTE PTR cpuad$[rsp]
  00030	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0003e	48 8d 84 01 a8
	02 00 00	 lea	 rax, QWORD PTR [rcx+rax+680]
  00046	48 8b c8	 mov	 rcx, rax
  00049	e8 00 00 00 00	 call	 print_gr_regs
$LN2@print_all_:

; 1313 : 
; 1314 :     // Control Registers
; 1315 :     if (all_recs[ cpuad ].gotmask  &  GOT_TF02271)

  0004e	0f b6 44 24 30	 movzx	 eax, BYTE PTR cpuad$[rsp]
  00053	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  00061	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  00068	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  0006d	85 c0		 test	 eax, eax
  0006f	74 23		 je	 SHORT $LN3@print_all_

; 1316 :         print_cr_regs( &all_recs[ cpuad ].tf02271 );

  00071	0f b6 44 24 30	 movzx	 eax, BYTE PTR cpuad$[rsp]
  00076	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  00084	48 8d 84 01 e8
	03 00 00	 lea	 rax, QWORD PTR [rcx+rax+1000]
  0008c	48 8b c8	 mov	 rcx, rax
  0008f	e8 00 00 00 00	 call	 print_cr_regs
$LN3@print_all_:

; 1317 : 
; 1318 :     // Access Registers
; 1319 :     if (all_recs[ cpuad ].gotmask  &  GOT_TF02272)

  00094	0f b6 44 24 30	 movzx	 eax, BYTE PTR cpuad$[rsp]
  00099	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  000a7	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  000ae	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  000b3	85 c0		 test	 eax, eax
  000b5	74 23		 je	 SHORT $LN4@print_all_

; 1320 :         print_ar_regs( &all_recs[ cpuad ].tf02272 );

  000b7	0f b6 44 24 30	 movzx	 eax, BYTE PTR cpuad$[rsp]
  000bc	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  000ca	48 8d 84 01 80
	04 00 00	 lea	 rax, QWORD PTR [rcx+rax+1152]
  000d2	48 8b c8	 mov	 rcx, rax
  000d5	e8 00 00 00 00	 call	 print_ar_regs
$LN4@print_all_:

; 1321 : 
; 1322 :     // Floating Point Control Register
; 1323 :     if (all_recs[ cpuad ].gotmask  &  GOT_TF02276)

  000da	0f b6 44 24 30	 movzx	 eax, BYTE PTR cpuad$[rsp]
  000df	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  000e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  000ed	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  000f4	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  000f9	85 c0		 test	 eax, eax
  000fb	74 23		 je	 SHORT $LN5@print_all_

; 1324 :         print_fpc_reg( &all_recs[ cpuad ].tf02276 );

  000fd	0f b6 44 24 30	 movzx	 eax, BYTE PTR cpuad$[rsp]
  00102	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  00110	48 8d 84 01 d8
	04 00 00	 lea	 rax, QWORD PTR [rcx+rax+1240]
  00118	48 8b c8	 mov	 rcx, rax
  0011b	e8 00 00 00 00	 call	 print_fpc_reg
$LN5@print_all_:

; 1325 : 
; 1326 :     // Floating Point Registers
; 1327 :     if (all_recs[ cpuad ].gotmask  &   GOT_TF02270)

  00120	0f b6 44 24 30	 movzx	 eax, BYTE PTR cpuad$[rsp]
  00125	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  0012c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  00133	8b 84 01 00 26
	00 00		 mov	 eax, DWORD PTR [rcx+rax+9728]
  0013a	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  0013f	85 c0		 test	 eax, eax
  00141	74 23		 je	 SHORT $LN6@print_all_

; 1328 :         print_fpr_regs( &all_recs[ cpuad ].tf02270 );

  00143	0f b6 44 24 30	 movzx	 eax, BYTE PTR cpuad$[rsp]
  00148	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  0014f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  00156	48 8d 84 01 48
	03 00 00	 lea	 rax, QWORD PTR [rcx+rax+840]
  0015e	48 8b c8	 mov	 rcx, rax
  00161	e8 00 00 00 00	 call	 print_fpr_regs
$LN6@print_all_:

; 1329 : }

  00166	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0016a	c3		 ret	 0
print_all_available_regs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv80 = 64
timstr$1 = 80
__$ArrayPad$ = 144
rec$ = 176
print_fpc_reg PROC

; 1294 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1295 :     if (rec->afp)

  0001f	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00027	0f b6 40 1c	 movzx	 eax, BYTE PTR [rax+28]
  0002b	85 c0		 test	 eax, eax
  0002d	0f 84 a8 00 00
	00		 je	 $LN2@print_fpc_

; 1296 :     {
; 1297 :         char timstr[ 64 ] = {0};   // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  00033	48 8d 44 24 50	 lea	 rax, QWORD PTR timstr$1[rsp]
  00038	48 8b f8	 mov	 rdi, rax
  0003b	33 c0		 xor	 eax, eax
  0003d	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00042	f3 aa		 rep stosb

; 1298 :         FormatTIMEVAL( &rec->rhdr.tod, timstr, sizeof( timstr ));

  00044	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0004c	48 83 c0 08	 add	 rax, 8
  00050	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00056	48 8d 54 24 50	 lea	 rdx, QWORD PTR timstr$1[rsp]
  0005b	48 8b c8	 mov	 rcx, rax
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1299 :         // "Floating point control register: %08"PRIX32
; 1300 :         TF_FLOGMSG( 2276 ),

  00064	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0006c	48 8b c8	 mov	 rcx, rax
  0006f	e8 00 00 00 00	 call	 tf_do_blank_sep
  00074	b8 01 00 00 00	 mov	 eax, 1
  00079	48 6b c0 0b	 imul	 rax, rax, 11
  0007d	48 8d 44 04 50	 lea	 rax, QWORD PTR timstr$1[rsp+rax]
  00082	48 89 44 24 40	 mov	 QWORD PTR tv80[rsp], rax
  00087	b9 01 00 00 00	 mov	 ecx, 1
  0008c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00092	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0009a	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  0009d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000a1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv80[rsp]
  000a6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159872
  000b2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000b7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000bc	41 b9 03 00 00
	00		 mov	 r9d, 3
  000c2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159873
  000c9	ba 15 05 00 00	 mov	 edx, 1301		; 00000515H
  000ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159874
  000d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN2@print_fpc_:

; 1301 :             rec->fpc );
; 1302 :     }
; 1303 : }

  000db	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000e3	48 33 cc	 xor	 rcx, rsp
  000e6	e8 00 00 00 00	 call	 __security_check_cookie
  000eb	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  000f2	5f		 pop	 rdi
  000f3	c3		 ret	 0
print_fpc_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
r$ = 112
i$ = 116
tv136 = 120
tv172 = 124
tv186 = 128
tv94 = 136
tv132 = 144
tv146 = 152
tv162 = 160
tv168 = 168
tv182 = 176
tv198 = 184
tv202 = 192
tv206 = 200
tv223 = 208
tv227 = 216
tv231 = 224
pfx$ = 240
tim$ = 304
__$ArrayPad$ = 368
rec$ = 400
print_fpr_regs PROC

; 1256 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 80 01
	00 00		 sub	 rsp, 384		; 00000180H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1257 :     char tim [ 64 ]  = {0};     // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 84 24 30
	01 00 00	 lea	 rax, QWORD PTR tim$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb

; 1258 :     char pfx [ 64 ]  = {0};     // "16:22:47.745999 HHC02269I CP00:"

  00033	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR pfx$[rsp]
  0003b	48 8b f8	 mov	 rdi, rax
  0003e	33 c0		 xor	 eax, eax
  00040	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00045	f3 aa		 rep stosb

; 1259 : 
; 1260 :     int  i, r;                  // (work for iterating)
; 1261 : 
; 1262 :     FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  00047	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0004f	48 83 c0 08	 add	 rax, 8
  00053	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00059	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR tim$[rsp]
  00061	48 8b c8	 mov	 rcx, rax
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1263 :     MSGBUF( pfx, "%s HHC02270I %s:", &tim[ 11 ], ptyp_str( rec->rhdr.cpuad ));

  0006a	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00072	0f b6 48 04	 movzx	 ecx, BYTE PTR [rax+4]
  00076	e8 00 00 00 00	 call	 ptyp_str
  0007b	b9 01 00 00 00	 mov	 ecx, 1
  00080	48 6b c9 0b	 imul	 rcx, rcx, 11
  00084	48 8d 8c 0c 30
	01 00 00	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  0008c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00091	4c 8b c9	 mov	 r9, rcx
  00094	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159851
  0009b	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000a0	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR pfx$[rsp]
  000a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1264 : 
; 1265 :     if (rec->afp)

  000ae	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  000b6	0f b6 80 98 00
	00 00		 movzx	 eax, BYTE PTR [rax+152]
  000bd	85 c0		 test	 eax, eax
  000bf	0f 84 42 02 00
	00		 je	 $LN5@print_fpr_

; 1266 :     {
; 1267 :         for (i=0, r=0; i < 4; r += 4, i++)

  000c5	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000cd	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR r$[rsp], 0
  000d5	eb 15		 jmp	 SHORT $LN4@print_fpr_
$LN2@print_fpr_:
  000d7	8b 44 24 70	 mov	 eax, DWORD PTR r$[rsp]
  000db	83 c0 04	 add	 eax, 4
  000de	89 44 24 70	 mov	 DWORD PTR r$[rsp], eax
  000e2	8b 44 24 74	 mov	 eax, DWORD PTR i$[rsp]
  000e6	ff c0		 inc	 eax
  000e8	89 44 24 74	 mov	 DWORD PTR i$[rsp], eax
$LN4@print_fpr_:
  000ec	83 7c 24 74 04	 cmp	 DWORD PTR i$[rsp], 4
  000f1	0f 8d 0b 02 00
	00		 jge	 $LN3@print_fpr_

; 1268 :         {
; 1269 :             FLOGMSG( stdout, "%s FP%u=%8.8X%8.8X FPR%u=%8.8X%8.8X",

  000f7	8b 44 24 70	 mov	 eax, DWORD PTR r$[rsp]
  000fb	83 c0 05	 add	 eax, 5
  000fe	48 98		 cdqe
  00100	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv94[rsp], rax
  00108	8b 4c 24 70	 mov	 ecx, DWORD PTR r$[rsp]
  0010c	83 c1 04	 add	 ecx, 4
  0010f	48 63 c9	 movsxd	 rcx, ecx
  00112	48 89 8c 24 90
	00 00 00	 mov	 QWORD PTR tv132[rsp], rcx
  0011a	8b 54 24 70	 mov	 edx, DWORD PTR r$[rsp]
  0011e	83 c2 02	 add	 edx, 2
  00121	89 54 24 78	 mov	 DWORD PTR tv136[rsp], edx
  00125	8b 7c 24 70	 mov	 edi, DWORD PTR r$[rsp]
  00129	ff c7		 inc	 edi
  0012b	48 63 ff	 movsxd	 rdi, edi
  0012e	44 8b 44 24 70	 mov	 r8d, DWORD PTR r$[rsp]
  00133	4d 63 c0	 movsxd	 r8, r8d
  00136	4c 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv146[rsp], r8
  0013e	b9 01 00 00 00	 mov	 ecx, 1
  00143	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00149	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00151	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv94[rsp]
  00159	8b 4c 91 18	 mov	 ecx, DWORD PTR [rcx+rdx*4+24]
  0015d	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  00161	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00169	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tv132[rsp]
  00171	8b 4c 91 18	 mov	 ecx, DWORD PTR [rcx+rdx*4+24]
  00175	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00179	8b 4c 24 78	 mov	 ecx, DWORD PTR tv136[rsp]
  0017d	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00181	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00189	8b 4c b9 18	 mov	 ecx, DWORD PTR [rcx+rdi*4+24]
  0018d	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00191	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00199	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR tv146[rsp]
  001a1	8b 4c 91 18	 mov	 ecx, DWORD PTR [rcx+rdx*4+24]
  001a5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001a9	8b 4c 24 70	 mov	 ecx, DWORD PTR r$[rsp]
  001ad	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  001b1	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR pfx$[rsp]
  001b9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159854
  001c5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ca	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001cf	41 b9 03 00 00
	00		 mov	 r9d, 3
  001d5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159855
  001dc	ba f8 04 00 00	 mov	 edx, 1272		; 000004f8H
  001e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159856
  001e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1270 :                 pfx, r+0, rec->fpr[ r+0 ], rec->fpr[ r+1 ],
; 1271 :                      r+2, rec->fpr[ r+4 ], rec->fpr[ r+5 ]
; 1272 :             );
; 1273 : 
; 1274 :             FLOGMSG( stdout, "%s FP%u=%8.8X%8.8X FPR%u=%8.8X%8.8X",

  001ee	8b 44 24 70	 mov	 eax, DWORD PTR r$[rsp]
  001f2	83 c0 07	 add	 eax, 7
  001f5	48 98		 cdqe
  001f7	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv162[rsp], rax
  001ff	8b 4c 24 70	 mov	 ecx, DWORD PTR r$[rsp]
  00203	83 c1 06	 add	 ecx, 6
  00206	48 63 c9	 movsxd	 rcx, ecx
  00209	48 89 8c 24 a8
	00 00 00	 mov	 QWORD PTR tv168[rsp], rcx
  00211	8b 54 24 70	 mov	 edx, DWORD PTR r$[rsp]
  00215	83 c2 03	 add	 edx, 3
  00218	89 54 24 7c	 mov	 DWORD PTR tv172[rsp], edx
  0021c	8b 7c 24 70	 mov	 edi, DWORD PTR r$[rsp]
  00220	83 c7 03	 add	 edi, 3
  00223	48 63 ff	 movsxd	 rdi, edi
  00226	44 8b 44 24 70	 mov	 r8d, DWORD PTR r$[rsp]
  0022b	41 83 c0 02	 add	 r8d, 2
  0022f	4d 63 c0	 movsxd	 r8, r8d
  00232	4c 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv182[rsp], r8
  0023a	44 8b 4c 24 70	 mov	 r9d, DWORD PTR r$[rsp]
  0023f	41 ff c1	 inc	 r9d
  00242	44 89 8c 24 80
	00 00 00	 mov	 DWORD PTR tv186[rsp], r9d
  0024a	b9 01 00 00 00	 mov	 ecx, 1
  0024f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00255	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0025d	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR tv162[rsp]
  00265	8b 4c 91 18	 mov	 ecx, DWORD PTR [rcx+rdx*4+24]
  00269	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  0026d	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00275	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR tv168[rsp]
  0027d	8b 4c 91 18	 mov	 ecx, DWORD PTR [rcx+rdx*4+24]
  00281	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00285	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv172[rsp]
  00289	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  0028d	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00295	8b 4c b9 18	 mov	 ecx, DWORD PTR [rcx+rdi*4+24]
  00299	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  0029d	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  002a5	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR tv182[rsp]
  002ad	8b 4c 91 18	 mov	 ecx, DWORD PTR [rcx+rdx*4+24]
  002b1	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  002b5	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv186[rsp]
  002bc	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  002c0	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR pfx$[rsp]
  002c8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159857
  002d4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002d9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002de	41 b9 03 00 00
	00		 mov	 r9d, 3
  002e4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159858
  002eb	ba fd 04 00 00	 mov	 edx, 1277		; 000004fdH
  002f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159859
  002f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1275 :                 pfx, r+1, rec->fpr[ r+2 ], rec->fpr[ r+3 ],
; 1276 :                      r+3, rec->fpr[ r+6 ], rec->fpr[ r+7 ]
; 1277 :             );
; 1278 :         }

  002fd	e9 d5 fd ff ff	 jmp	 $LN2@print_fpr_
$LN3@print_fpr_:

; 1279 :     }

  00302	e9 b8 01 00 00	 jmp	 $LN6@print_fpr_
$LN5@print_fpr_:

; 1280 :     else
; 1281 :     {
; 1282 :         FLOGMSG( stdout, "%s FPR0=%8.8X%8.8X FPR2=%8.8X%8.8X\n",

  00307	b8 04 00 00 00	 mov	 eax, 4
  0030c	48 6b c0 03	 imul	 rax, rax, 3
  00310	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv198[rsp], rax
  00318	b9 04 00 00 00	 mov	 ecx, 4
  0031d	48 6b c9 02	 imul	 rcx, rcx, 2
  00321	48 89 8c 24 c0
	00 00 00	 mov	 QWORD PTR tv202[rsp], rcx
  00329	ba 04 00 00 00	 mov	 edx, 4
  0032e	48 6b d2 01	 imul	 rdx, rdx, 1
  00332	48 89 94 24 c8
	00 00 00	 mov	 QWORD PTR tv206[rsp], rdx
  0033a	bf 04 00 00 00	 mov	 edi, 4
  0033f	48 6b ff 00	 imul	 rdi, rdi, 0
  00343	b9 01 00 00 00	 mov	 ecx, 1
  00348	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0034e	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00356	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR tv198[rsp]
  0035e	8b 4c 11 18	 mov	 ecx, DWORD PTR [rcx+rdx+24]
  00362	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00366	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0036e	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR tv202[rsp]
  00376	8b 4c 11 18	 mov	 ecx, DWORD PTR [rcx+rdx+24]
  0037a	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  0037e	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00386	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR tv206[rsp]
  0038e	8b 4c 11 18	 mov	 ecx, DWORD PTR [rcx+rdx+24]
  00392	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00396	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0039e	8b 4c 39 18	 mov	 ecx, DWORD PTR [rcx+rdi+24]
  003a2	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003a6	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR pfx$[rsp]
  003ae	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159860
  003ba	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003bf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003c4	41 b9 03 00 00
	00		 mov	 r9d, 3
  003ca	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159861
  003d1	ba 03 05 00 00	 mov	 edx, 1283		; 00000503H
  003d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159862
  003dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1283 :             pfx, rec->fpr[0], rec->fpr[1], rec->fpr[2], rec->fpr[3] );
; 1284 : 
; 1285 :         FLOGMSG( stdout, "%s FPR4=%8.8X%8.8X FPR6=%8.8X%8.8X\n",

  003e3	b8 04 00 00 00	 mov	 eax, 4
  003e8	48 6b c0 07	 imul	 rax, rax, 7
  003ec	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv223[rsp], rax
  003f4	b9 04 00 00 00	 mov	 ecx, 4
  003f9	48 6b c9 06	 imul	 rcx, rcx, 6
  003fd	48 89 8c 24 d8
	00 00 00	 mov	 QWORD PTR tv227[rsp], rcx
  00405	ba 04 00 00 00	 mov	 edx, 4
  0040a	48 6b d2 05	 imul	 rdx, rdx, 5
  0040e	48 89 94 24 e0
	00 00 00	 mov	 QWORD PTR tv231[rsp], rdx
  00416	bf 04 00 00 00	 mov	 edi, 4
  0041b	48 6b ff 04	 imul	 rdi, rdi, 4
  0041f	b9 01 00 00 00	 mov	 ecx, 1
  00424	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0042a	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00432	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR tv223[rsp]
  0043a	8b 4c 11 18	 mov	 ecx, DWORD PTR [rcx+rdx+24]
  0043e	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00442	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0044a	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR tv227[rsp]
  00452	8b 4c 11 18	 mov	 ecx, DWORD PTR [rcx+rdx+24]
  00456	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  0045a	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00462	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR tv231[rsp]
  0046a	8b 4c 11 18	 mov	 ecx, DWORD PTR [rcx+rdx+24]
  0046e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00472	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  0047a	8b 4c 39 18	 mov	 ecx, DWORD PTR [rcx+rdi+24]
  0047e	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00482	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR pfx$[rsp]
  0048a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0048f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159863
  00496	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0049b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004a0	41 b9 03 00 00
	00		 mov	 r9d, 3
  004a6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159864
  004ad	ba 06 05 00 00	 mov	 edx, 1286		; 00000506H
  004b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159865
  004b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN6@print_fpr_:

; 1286 :             pfx, rec->fpr[4], rec->fpr[5], rec->fpr[6], rec->fpr[7] );
; 1287 :     }
; 1288 : }

  004bf	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  004c7	48 33 cc	 xor	 rcx, rsp
  004ca	e8 00 00 00 00	 call	 __security_check_cookie
  004cf	48 81 c4 80 01
	00 00		 add	 rsp, 384		; 00000180H
  004d6	5f		 pop	 rdi
  004d7	c3		 ret	 0
print_fpr_regs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
r$ = 96
i$ = 100
tim$ = 112
pfx$ = 176
buf$ = 240
__$ArrayPad$ = 368
rec$ = 400
print_ar_regs PROC

; 1217 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 80 01
	00 00		 sub	 rsp, 384		; 00000180H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1218 :     char tim [ 64 ]  = {0};     // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 44 24 70	 lea	 rax, QWORD PTR tim$[rsp]
  00024	48 8b f8	 mov	 rdi, rax
  00027	33 c0		 xor	 eax, eax
  00029	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0002e	f3 aa		 rep stosb

; 1219 :     char pfx [ 64 ]  = {0};     // "16:22:47.745999 HHC02269I CP00:"

  00030	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR pfx$[rsp]
  00038	48 8b f8	 mov	 rdi, rax
  0003b	33 c0		 xor	 eax, eax
  0003d	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00042	f3 aa		 rep stosb

; 1220 :     char buf [ 128 ] = {0};     // " R0=0000000000000000 ..."

  00044	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR buf$[rsp]
  0004c	48 8b f8	 mov	 rdi, rax
  0004f	33 c0		 xor	 eax, eax
  00051	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00056	f3 aa		 rep stosb

; 1221 : 
; 1222 :     int  i, r;                  // (work for iterating)
; 1223 : 
; 1224 :     FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  00058	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00060	48 83 c0 08	 add	 rax, 8
  00064	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0006a	48 8d 54 24 70	 lea	 rdx, QWORD PTR tim$[rsp]
  0006f	48 8b c8	 mov	 rcx, rax
  00072	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1225 :     MSGBUF( pfx, "%s HHC02272I %s:", &tim[ 11 ], ptyp_str( rec->rhdr.cpuad ));

  00078	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00080	0f b6 48 04	 movzx	 ecx, BYTE PTR [rax+4]
  00084	e8 00 00 00 00	 call	 ptyp_str
  00089	b9 01 00 00 00	 mov	 ecx, 1
  0008e	48 6b c9 0b	 imul	 rcx, rcx, 11
  00092	48 8d 4c 0c 70	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  00097	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0009c	4c 8b c9	 mov	 r9, rcx
  0009f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159835
  000a6	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000ab	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR pfx$[rsp]
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1226 : 
; 1227 :     for (i=0, r=0; i < 4; r += 4, i++)

  000b9	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000c1	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR r$[rsp], 0
  000c9	eb 15		 jmp	 SHORT $LN4@print_ar_r
$LN2@print_ar_r:
  000cb	8b 44 24 60	 mov	 eax, DWORD PTR r$[rsp]
  000cf	83 c0 04	 add	 eax, 4
  000d2	89 44 24 60	 mov	 DWORD PTR r$[rsp], eax
  000d6	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  000da	ff c0		 inc	 eax
  000dc	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN4@print_ar_r:
  000e0	83 7c 24 64 04	 cmp	 DWORD PTR i$[rsp], 4
  000e5	0f 8d 03 01 00
	00		 jge	 $LN3@print_ar_r

; 1228 :     {
; 1229 :         MSGBUF

  000eb	8b 44 24 60	 mov	 eax, DWORD PTR r$[rsp]
  000ef	83 c0 03	 add	 eax, 3
  000f2	48 98		 cdqe
  000f4	8b 4c 24 60	 mov	 ecx, DWORD PTR r$[rsp]
  000f8	83 c1 03	 add	 ecx, 3
  000fb	8b 54 24 60	 mov	 edx, DWORD PTR r$[rsp]
  000ff	83 c2 02	 add	 edx, 2
  00102	48 63 d2	 movsxd	 rdx, edx
  00105	8b 7c 24 60	 mov	 edi, DWORD PTR r$[rsp]
  00109	83 c7 02	 add	 edi, 2
  0010c	44 8b 44 24 60	 mov	 r8d, DWORD PTR r$[rsp]
  00111	41 ff c0	 inc	 r8d
  00114	4d 63 c0	 movsxd	 r8, r8d
  00117	44 8b 4c 24 60	 mov	 r9d, DWORD PTR r$[rsp]
  0011c	41 ff c1	 inc	 r9d
  0011f	44 8b 54 24 60	 mov	 r10d, DWORD PTR r$[rsp]
  00124	4d 63 d2	 movsxd	 r10, r10d
  00127	4c 8b 9c 24 90
	01 00 00	 mov	 r11, QWORD PTR rec$[rsp]
  0012f	41 8b 44 83 18	 mov	 eax, DWORD PTR [r11+rax*4+24]
  00134	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  00138	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  0013c	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00144	8b 44 90 18	 mov	 eax, DWORD PTR [rax+rdx*4+24]
  00148	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0014c	89 7c 24 40	 mov	 DWORD PTR [rsp+64], edi
  00150	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00158	42 8b 44 80 18	 mov	 eax, DWORD PTR [rax+r8*4+24]
  0015d	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00161	44 89 4c 24 30	 mov	 DWORD PTR [rsp+48], r9d
  00166	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  0016e	42 8b 44 90 18	 mov	 eax, DWORD PTR [rax+r10*4+24]
  00173	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00177	8b 44 24 60	 mov	 eax, DWORD PTR r$[rsp]
  0017b	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0017f	4c 8d 8c 24 b0
	00 00 00	 lea	 r9, QWORD PTR pfx$[rsp]
  00187	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159836
  0018e	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00193	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0019b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1230 :         (
; 1231 :             buf,
; 1232 : 
; 1233 :             "%s"
; 1234 : 
; 1235 :             " AR%2.2d=%8.8"PRIX32
; 1236 :             " AR%2.2d=%8.8"PRIX32
; 1237 :             " AR%2.2d=%8.8"PRIX32
; 1238 :             " AR%2.2d=%8.8"PRIX32,
; 1239 : 
; 1240 :             pfx,
; 1241 : 
; 1242 :             r+0, rec->ar[ r+0 ],
; 1243 :             r+1, rec->ar[ r+1 ],
; 1244 :             r+2, rec->ar[ r+2 ],
; 1245 :             r+3, rec->ar[ r+3 ]
; 1246 :         );
; 1247 : 
; 1248 :         FLOGMSG( stdout, "%s\n", buf );

  001a1	b9 01 00 00 00	 mov	 ecx, 1
  001a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001ac	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  001b4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159837
  001c0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001c5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ca	41 b9 03 00 00
	00		 mov	 r9d, 3
  001d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159838
  001d7	ba e0 04 00 00	 mov	 edx, 1248		; 000004e0H
  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159839
  001e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1249 :     }

  001e9	e9 dd fe ff ff	 jmp	 $LN2@print_ar_r
$LN3@print_ar_r:

; 1250 : }

  001ee	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001f6	48 33 cc	 xor	 rcx, rsp
  001f9	e8 00 00 00 00	 call	 __security_check_cookie
  001fe	48 81 c4 80 01
	00 00		 add	 rsp, 384		; 00000180H
  00205	5f		 pop	 rdi
  00206	c3		 ret	 0
print_ar_regs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
r$ = 96
i$ = 100
gr$ = 104
pfx$ = 112
tim$ = 176
buf$ = 240
__$ArrayPad$ = 368
rec$ = 400
print_cr_regs PROC

; 1145 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 80 01
	00 00		 sub	 rsp, 384		; 00000180H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1146 :     char tim [ 64 ]  = {0};     // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR tim$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb

; 1147 :     char pfx [ 64 ]  = {0};     // "16:22:47.745999 HHC02269I CP00:"

  00033	48 8d 44 24 70	 lea	 rax, QWORD PTR pfx$[rsp]
  00038	48 8b f8	 mov	 rdi, rax
  0003b	33 c0		 xor	 eax, eax
  0003d	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00042	f3 aa		 rep stosb

; 1148 :     char buf [ 128 ] = {0};     // " R0=0000000000000000 ..."

  00044	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR buf$[rsp]
  0004c	48 8b f8	 mov	 rdi, rax
  0004f	33 c0		 xor	 eax, eax
  00051	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00056	f3 aa		 rep stosb

; 1149 : 
; 1150 :     int  i, r;                  // (work for iterating)
; 1151 :     DW*  gr;                    // (so GR_G/GR_L macros work right)
; 1152 : 
; 1153 :     gr = rec->cr;               // (so GR_G/GR_L macros work right)

  00058	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00060	48 83 c0 18	 add	 rax, 24
  00064	48 89 44 24 68	 mov	 QWORD PTR gr$[rsp], rax

; 1154 : 
; 1155 :     FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  00069	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00071	48 83 c0 08	 add	 rax, 8
  00075	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0007b	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR tim$[rsp]
  00083	48 8b c8	 mov	 rcx, rax
  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1156 :     MSGBUF( pfx, "%s HHC02271I %s:", &tim[ 11 ], ptyp_str( rec->rhdr.cpuad ));

  0008c	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00094	0f b6 48 04	 movzx	 ecx, BYTE PTR [rax+4]
  00098	e8 00 00 00 00	 call	 ptyp_str
  0009d	b9 01 00 00 00	 mov	 ecx, 1
  000a2	48 6b c9 0b	 imul	 rcx, rcx, 11
  000a6	48 8d 8c 0c b0
	00 00 00	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  000ae	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b3	4c 8b c9	 mov	 r9, rcx
  000b6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159812
  000bd	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000c2	48 8d 4c 24 70	 lea	 rcx, QWORD PTR pfx$[rsp]
  000c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1157 : 
; 1158 :     if (ARCH_900_IDX == rec->rhdr.arch_mode)

  000cd	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  000d5	0f b6 40 10	 movzx	 eax, BYTE PTR [rax+16]
  000d9	83 f8 02	 cmp	 eax, 2
  000dc	0f 85 2c 01 00
	00		 jne	 $LN8@print_cr_r

; 1159 :     {
; 1160 :         for (i=0, r=0; i < 4; r += 4, i++)

  000e2	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000ea	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR r$[rsp], 0
  000f2	eb 15		 jmp	 SHORT $LN4@print_cr_r
$LN2@print_cr_r:
  000f4	8b 44 24 60	 mov	 eax, DWORD PTR r$[rsp]
  000f8	83 c0 04	 add	 eax, 4
  000fb	89 44 24 60	 mov	 DWORD PTR r$[rsp], eax
  000ff	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  00103	ff c0		 inc	 eax
  00105	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN4@print_cr_r:
  00109	83 7c 24 64 04	 cmp	 DWORD PTR i$[rsp], 4
  0010e	0f 8d f5 00 00
	00		 jge	 $LN3@print_cr_r

; 1161 :         {
; 1162 :             MSGBUF

  00114	8b 44 24 60	 mov	 eax, DWORD PTR r$[rsp]
  00118	83 c0 03	 add	 eax, 3
  0011b	48 98		 cdqe
  0011d	8b 4c 24 60	 mov	 ecx, DWORD PTR r$[rsp]
  00121	83 c1 03	 add	 ecx, 3
  00124	8b 54 24 60	 mov	 edx, DWORD PTR r$[rsp]
  00128	83 c2 02	 add	 edx, 2
  0012b	48 63 d2	 movsxd	 rdx, edx
  0012e	8b 7c 24 60	 mov	 edi, DWORD PTR r$[rsp]
  00132	83 c7 02	 add	 edi, 2
  00135	44 8b 44 24 60	 mov	 r8d, DWORD PTR r$[rsp]
  0013a	41 ff c0	 inc	 r8d
  0013d	4d 63 c0	 movsxd	 r8, r8d
  00140	44 8b 4c 24 60	 mov	 r9d, DWORD PTR r$[rsp]
  00145	41 ff c1	 inc	 r9d
  00148	44 8b 54 24 60	 mov	 r10d, DWORD PTR r$[rsp]
  0014d	4d 63 d2	 movsxd	 r10, r10d
  00150	4c 8b 5c 24 68	 mov	 r11, QWORD PTR gr$[rsp]
  00155	49 8b 04 c3	 mov	 rax, QWORD PTR [r11+rax*8]
  00159	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  0015e	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00162	48 8b 44 24 68	 mov	 rax, QWORD PTR gr$[rsp]
  00167	48 8b 04 d0	 mov	 rax, QWORD PTR [rax+rdx*8]
  0016b	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00170	89 7c 24 40	 mov	 DWORD PTR [rsp+64], edi
  00174	48 8b 44 24 68	 mov	 rax, QWORD PTR gr$[rsp]
  00179	4a 8b 04 c0	 mov	 rax, QWORD PTR [rax+r8*8]
  0017d	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00182	44 89 4c 24 30	 mov	 DWORD PTR [rsp+48], r9d
  00187	48 8b 44 24 68	 mov	 rax, QWORD PTR gr$[rsp]
  0018c	4a 8b 04 d0	 mov	 rax, QWORD PTR [rax+r10*8]
  00190	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00195	8b 44 24 60	 mov	 eax, DWORD PTR r$[rsp]
  00199	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0019d	4c 8d 4c 24 70	 lea	 r9, QWORD PTR pfx$[rsp]
  001a2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159815
  001a9	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  001ae	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  001b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1163 :             (
; 1164 :                 buf,
; 1165 : 
; 1166 :                 "%s"
; 1167 : 
; 1168 :                 " C%1.1X=%16.16"PRIX64
; 1169 :                 " C%1.1X=%16.16"PRIX64
; 1170 :                 " C%1.1X=%16.16"PRIX64
; 1171 :                 " C%1.1X=%16.16"PRIX64,
; 1172 : 
; 1173 :                 pfx,
; 1174 : 
; 1175 :                 r+0, GR_G( r+0 ),
; 1176 :                 r+1, GR_G( r+1 ),
; 1177 :                 r+2, GR_G( r+2 ),
; 1178 :                 r+3, GR_G( r+3 )
; 1179 : 
; 1180 :             );
; 1181 : 
; 1182 :             FLOGMSG( stdout, "%s\n", buf );

  001bc	b9 01 00 00 00	 mov	 ecx, 1
  001c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001c7	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  001cf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159816
  001db	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001e0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001e5	41 b9 03 00 00
	00		 mov	 r9d, 3
  001eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159817
  001f2	ba 9e 04 00 00	 mov	 edx, 1182		; 0000049eH
  001f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159818
  001fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1183 :         }

  00204	e9 eb fe ff ff	 jmp	 $LN2@print_cr_r
$LN3@print_cr_r:

; 1184 :     }

  00209	e9 22 01 00 00	 jmp	 $LN9@print_cr_r
$LN8@print_cr_r:

; 1185 :     else
; 1186 :     {
; 1187 :         for (i=0, r=0; i < 4; r += 4, i++)

  0020e	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00216	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR r$[rsp], 0
  0021e	eb 15		 jmp	 SHORT $LN7@print_cr_r
$LN5@print_cr_r:
  00220	8b 44 24 60	 mov	 eax, DWORD PTR r$[rsp]
  00224	83 c0 04	 add	 eax, 4
  00227	89 44 24 60	 mov	 DWORD PTR r$[rsp], eax
  0022b	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  0022f	ff c0		 inc	 eax
  00231	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN7@print_cr_r:
  00235	83 7c 24 64 04	 cmp	 DWORD PTR i$[rsp], 4
  0023a	0f 8d f0 00 00
	00		 jge	 $LN6@print_cr_r

; 1188 :         {
; 1189 :             MSGBUF

  00240	8b 44 24 60	 mov	 eax, DWORD PTR r$[rsp]
  00244	83 c0 03	 add	 eax, 3
  00247	48 98		 cdqe
  00249	8b 4c 24 60	 mov	 ecx, DWORD PTR r$[rsp]
  0024d	83 c1 03	 add	 ecx, 3
  00250	8b 54 24 60	 mov	 edx, DWORD PTR r$[rsp]
  00254	83 c2 02	 add	 edx, 2
  00257	48 63 d2	 movsxd	 rdx, edx
  0025a	8b 7c 24 60	 mov	 edi, DWORD PTR r$[rsp]
  0025e	83 c7 02	 add	 edi, 2
  00261	44 8b 44 24 60	 mov	 r8d, DWORD PTR r$[rsp]
  00266	41 ff c0	 inc	 r8d
  00269	4d 63 c0	 movsxd	 r8, r8d
  0026c	44 8b 4c 24 60	 mov	 r9d, DWORD PTR r$[rsp]
  00271	41 ff c1	 inc	 r9d
  00274	44 8b 54 24 60	 mov	 r10d, DWORD PTR r$[rsp]
  00279	4d 63 d2	 movsxd	 r10, r10d
  0027c	4c 8b 5c 24 68	 mov	 r11, QWORD PTR gr$[rsp]
  00281	41 8b 04 c3	 mov	 eax, DWORD PTR [r11+rax*8]
  00285	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  00289	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  0028d	48 8b 44 24 68	 mov	 rax, QWORD PTR gr$[rsp]
  00292	8b 04 d0	 mov	 eax, DWORD PTR [rax+rdx*8]
  00295	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  00299	89 7c 24 40	 mov	 DWORD PTR [rsp+64], edi
  0029d	48 8b 44 24 68	 mov	 rax, QWORD PTR gr$[rsp]
  002a2	42 8b 04 c0	 mov	 eax, DWORD PTR [rax+r8*8]
  002a6	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  002aa	44 89 4c 24 30	 mov	 DWORD PTR [rsp+48], r9d
  002af	48 8b 44 24 68	 mov	 rax, QWORD PTR gr$[rsp]
  002b4	42 8b 04 d0	 mov	 eax, DWORD PTR [rax+r10*8]
  002b8	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  002bc	8b 44 24 60	 mov	 eax, DWORD PTR r$[rsp]
  002c0	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  002c4	4c 8d 4c 24 70	 lea	 r9, QWORD PTR pfx$[rsp]
  002c9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159819
  002d0	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  002d5	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  002dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1190 :             (
; 1191 :                 buf,
; 1192 : 
; 1193 :                 "%s"
; 1194 : 
; 1195 :                 " CR%2.2d=%8.8"PRIX32
; 1196 :                 " CR%2.2d=%8.8"PRIX32
; 1197 :                 " CR%2.2d=%8.8"PRIX32
; 1198 :                 " CR%2.2d=%8.8"PRIX32,
; 1199 : 
; 1200 :                 pfx,
; 1201 : 
; 1202 :                 r+0, GR_L( r+0 ),
; 1203 :                 r+1, GR_L( r+1 ),
; 1204 :                 r+2, GR_L( r+2 ),
; 1205 :                 r+3, GR_L( r+3 )
; 1206 :             );
; 1207 : 
; 1208 :             FLOGMSG( stdout, "%s\n", buf );

  002e3	b9 01 00 00 00	 mov	 ecx, 1
  002e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002ee	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  002f6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159820
  00302	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00307	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0030c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00312	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159821
  00319	ba b8 04 00 00	 mov	 edx, 1208		; 000004b8H
  0031e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159822
  00325	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1209 :         }

  0032b	e9 f0 fe ff ff	 jmp	 $LN5@print_cr_r
$LN6@print_cr_r:
$LN9@print_cr_r:

; 1210 :     }
; 1211 : }

  00330	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00338	48 33 cc	 xor	 rcx, rsp
  0033b	e8 00 00 00 00	 call	 __security_check_cookie
  00340	48 81 c4 80 01
	00 00		 add	 rsp, 384		; 00000180H
  00347	5f		 pop	 rdi
  00348	c3		 ret	 0
print_cr_regs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
r$ = 96
i$ = 100
gr$ = 104
pfx$ = 112
tim$ = 176
buf$ = 240
__$ArrayPad$ = 368
rec$ = 400
print_gr_regs PROC

; 1070 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 80 01
	00 00		 sub	 rsp, 384		; 00000180H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1071 :     char tim [ 64 ]  = {0};     // "YYYY-MM-DD HH:MM:SS.uuuuuu"

  0001f	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR tim$[rsp]
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00031	f3 aa		 rep stosb

; 1072 :     char pfx [ 64 ]  = {0};     // "16:22:47.745999 HHC02269I CP00:"

  00033	48 8d 44 24 70	 lea	 rax, QWORD PTR pfx$[rsp]
  00038	48 8b f8	 mov	 rdi, rax
  0003b	33 c0		 xor	 eax, eax
  0003d	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00042	f3 aa		 rep stosb

; 1073 :     char buf [ 128 ] = {0};     // " R0=0000000000000000 ..."

  00044	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR buf$[rsp]
  0004c	48 8b f8	 mov	 rdi, rax
  0004f	33 c0		 xor	 eax, eax
  00051	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00056	f3 aa		 rep stosb

; 1074 : 
; 1075 :     int  i, r;                  // (work for iterating)
; 1076 :     DW*  gr;                    // (so GR_G/GR_L macros work right)
; 1077 : 
; 1078 :     gr = rec->gr;               // (so GR_G/GR_L macros work right)

  00058	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00060	48 83 c0 20	 add	 rax, 32			; 00000020H
  00064	48 89 44 24 68	 mov	 QWORD PTR gr$[rsp], rax

; 1079 : 
; 1080 :     if (regsfirst && !noregs)

  00069	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR regsfirst
  00070	85 c0		 test	 eax, eax
  00072	74 17		 je	 SHORT $LN8@print_gr_r
  00074	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR noregs
  0007b	85 c0		 test	 eax, eax
  0007d	75 0c		 jne	 SHORT $LN8@print_gr_r

; 1081 :         printf("\n");           // (blank line before inst)

  0007f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159784
  00086	e8 00 00 00 00	 call	 printf
$LN8@print_gr_r:

; 1082 : 
; 1083 :     FormatTIMEVAL( &rec->rhdr.tod, tim, sizeof( tim ));

  0008b	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  00093	48 83 c0 08	 add	 rax, 8
  00097	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0009d	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR tim$[rsp]
  000a5	48 8b c8	 mov	 rcx, rax
  000a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1084 :     MSGBUF( pfx, "%s HHC02269I %s:", &tim[ 11 ], ptyp_str( rec->rhdr.cpuad ));

  000ae	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  000b6	0f b6 48 04	 movzx	 ecx, BYTE PTR [rax+4]
  000ba	e8 00 00 00 00	 call	 ptyp_str
  000bf	b9 01 00 00 00	 mov	 ecx, 1
  000c4	48 6b c9 0b	 imul	 rcx, rcx, 11
  000c8	48 8d 8c 0c b0
	00 00 00	 lea	 rcx, QWORD PTR tim$[rsp+rcx]
  000d0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d5	4c 8b c9	 mov	 r9, rcx
  000d8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159785
  000df	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000e4	48 8d 4c 24 70	 lea	 rcx, QWORD PTR pfx$[rsp]
  000e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1085 : 
; 1086 :     if (ARCH_900_IDX == rec->rhdr.arch_mode)

  000ef	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR rec$[rsp]
  000f7	0f b6 40 10	 movzx	 eax, BYTE PTR [rax+16]
  000fb	83 f8 02	 cmp	 eax, 2
  000fe	0f 85 2c 01 00
	00		 jne	 $LN9@print_gr_r

; 1087 :     {
; 1088 :         for (i=0, r=0; i < 4; r += 4, i++)

  00104	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0010c	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR r$[rsp], 0
  00114	eb 15		 jmp	 SHORT $LN4@print_gr_r
$LN2@print_gr_r:
  00116	8b 44 24 60	 mov	 eax, DWORD PTR r$[rsp]
  0011a	83 c0 04	 add	 eax, 4
  0011d	89 44 24 60	 mov	 DWORD PTR r$[rsp], eax
  00121	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  00125	ff c0		 inc	 eax
  00127	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN4@print_gr_r:
  0012b	83 7c 24 64 04	 cmp	 DWORD PTR i$[rsp], 4
  00130	0f 8d f5 00 00
	00		 jge	 $LN3@print_gr_r

; 1089 :         {
; 1090 :             MSGBUF

  00136	8b 44 24 60	 mov	 eax, DWORD PTR r$[rsp]
  0013a	83 c0 03	 add	 eax, 3
  0013d	48 98		 cdqe
  0013f	8b 4c 24 60	 mov	 ecx, DWORD PTR r$[rsp]
  00143	83 c1 03	 add	 ecx, 3
  00146	8b 54 24 60	 mov	 edx, DWORD PTR r$[rsp]
  0014a	83 c2 02	 add	 edx, 2
  0014d	48 63 d2	 movsxd	 rdx, edx
  00150	8b 7c 24 60	 mov	 edi, DWORD PTR r$[rsp]
  00154	83 c7 02	 add	 edi, 2
  00157	44 8b 44 24 60	 mov	 r8d, DWORD PTR r$[rsp]
  0015c	41 ff c0	 inc	 r8d
  0015f	4d 63 c0	 movsxd	 r8, r8d
  00162	44 8b 4c 24 60	 mov	 r9d, DWORD PTR r$[rsp]
  00167	41 ff c1	 inc	 r9d
  0016a	44 8b 54 24 60	 mov	 r10d, DWORD PTR r$[rsp]
  0016f	4d 63 d2	 movsxd	 r10, r10d
  00172	4c 8b 5c 24 68	 mov	 r11, QWORD PTR gr$[rsp]
  00177	49 8b 04 c3	 mov	 rax, QWORD PTR [r11+rax*8]
  0017b	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  00180	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00184	48 8b 44 24 68	 mov	 rax, QWORD PTR gr$[rsp]
  00189	48 8b 04 d0	 mov	 rax, QWORD PTR [rax+rdx*8]
  0018d	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00192	89 7c 24 40	 mov	 DWORD PTR [rsp+64], edi
  00196	48 8b 44 24 68	 mov	 rax, QWORD PTR gr$[rsp]
  0019b	4a 8b 04 c0	 mov	 rax, QWORD PTR [rax+r8*8]
  0019f	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  001a4	44 89 4c 24 30	 mov	 DWORD PTR [rsp+48], r9d
  001a9	48 8b 44 24 68	 mov	 rax, QWORD PTR gr$[rsp]
  001ae	4a 8b 04 d0	 mov	 rax, QWORD PTR [rax+r10*8]
  001b2	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001b7	8b 44 24 60	 mov	 eax, DWORD PTR r$[rsp]
  001bb	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  001bf	4c 8d 4c 24 70	 lea	 r9, QWORD PTR pfx$[rsp]
  001c4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159788
  001cb	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  001d0	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  001d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1091 :             (
; 1092 :                 buf,
; 1093 : 
; 1094 :                 "%s"
; 1095 : 
; 1096 :                 " R%1.1X=%16.16"PRIX64
; 1097 :                 " R%1.1X=%16.16"PRIX64
; 1098 :                 " R%1.1X=%16.16"PRIX64
; 1099 :                 " R%1.1X=%16.16"PRIX64,
; 1100 : 
; 1101 :                 pfx,
; 1102 : 
; 1103 :                 r+0, GR_G( r+0 ),
; 1104 :                 r+1, GR_G( r+1 ),
; 1105 :                 r+2, GR_G( r+2 ),
; 1106 :                 r+3, GR_G( r+3 )
; 1107 : 
; 1108 :             );
; 1109 : 
; 1110 :             FLOGMSG( stdout, "%s\n", buf );

  001de	b9 01 00 00 00	 mov	 ecx, 1
  001e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001e9	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  001f1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159789
  001fd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00202	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00207	41 b9 03 00 00
	00		 mov	 r9d, 3
  0020d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159790
  00214	ba 56 04 00 00	 mov	 edx, 1110		; 00000456H
  00219	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159791
  00220	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1111 :         }

  00226	e9 eb fe ff ff	 jmp	 $LN2@print_gr_r
$LN3@print_gr_r:

; 1112 :     }

  0022b	e9 22 01 00 00	 jmp	 $LN10@print_gr_r
$LN9@print_gr_r:

; 1113 :     else
; 1114 :     {
; 1115 :         for (i=0, r=0; i < 4; r += 4, i++)

  00230	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00238	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR r$[rsp], 0
  00240	eb 15		 jmp	 SHORT $LN7@print_gr_r
$LN5@print_gr_r:
  00242	8b 44 24 60	 mov	 eax, DWORD PTR r$[rsp]
  00246	83 c0 04	 add	 eax, 4
  00249	89 44 24 60	 mov	 DWORD PTR r$[rsp], eax
  0024d	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  00251	ff c0		 inc	 eax
  00253	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN7@print_gr_r:
  00257	83 7c 24 64 04	 cmp	 DWORD PTR i$[rsp], 4
  0025c	0f 8d f0 00 00
	00		 jge	 $LN6@print_gr_r

; 1116 :         {
; 1117 :             MSGBUF

  00262	8b 44 24 60	 mov	 eax, DWORD PTR r$[rsp]
  00266	83 c0 03	 add	 eax, 3
  00269	48 98		 cdqe
  0026b	8b 4c 24 60	 mov	 ecx, DWORD PTR r$[rsp]
  0026f	83 c1 03	 add	 ecx, 3
  00272	8b 54 24 60	 mov	 edx, DWORD PTR r$[rsp]
  00276	83 c2 02	 add	 edx, 2
  00279	48 63 d2	 movsxd	 rdx, edx
  0027c	8b 7c 24 60	 mov	 edi, DWORD PTR r$[rsp]
  00280	83 c7 02	 add	 edi, 2
  00283	44 8b 44 24 60	 mov	 r8d, DWORD PTR r$[rsp]
  00288	41 ff c0	 inc	 r8d
  0028b	4d 63 c0	 movsxd	 r8, r8d
  0028e	44 8b 4c 24 60	 mov	 r9d, DWORD PTR r$[rsp]
  00293	41 ff c1	 inc	 r9d
  00296	44 8b 54 24 60	 mov	 r10d, DWORD PTR r$[rsp]
  0029b	4d 63 d2	 movsxd	 r10, r10d
  0029e	4c 8b 5c 24 68	 mov	 r11, QWORD PTR gr$[rsp]
  002a3	41 8b 04 c3	 mov	 eax, DWORD PTR [r11+rax*8]
  002a7	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  002ab	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  002af	48 8b 44 24 68	 mov	 rax, QWORD PTR gr$[rsp]
  002b4	8b 04 d0	 mov	 eax, DWORD PTR [rax+rdx*8]
  002b7	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  002bb	89 7c 24 40	 mov	 DWORD PTR [rsp+64], edi
  002bf	48 8b 44 24 68	 mov	 rax, QWORD PTR gr$[rsp]
  002c4	42 8b 04 c0	 mov	 eax, DWORD PTR [rax+r8*8]
  002c8	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  002cc	44 89 4c 24 30	 mov	 DWORD PTR [rsp+48], r9d
  002d1	48 8b 44 24 68	 mov	 rax, QWORD PTR gr$[rsp]
  002d6	42 8b 04 d0	 mov	 eax, DWORD PTR [rax+r10*8]
  002da	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  002de	8b 44 24 60	 mov	 eax, DWORD PTR r$[rsp]
  002e2	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  002e6	4c 8d 4c 24 70	 lea	 r9, QWORD PTR pfx$[rsp]
  002eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159792
  002f2	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  002f7	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  002ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1118 :             (
; 1119 :                 buf,
; 1120 : 
; 1121 :                 "%s"
; 1122 : 
; 1123 :                 " GR%2.2d=%8.8"PRIX32
; 1124 :                 " GR%2.2d=%8.8"PRIX32
; 1125 :                 " GR%2.2d=%8.8"PRIX32
; 1126 :                 " GR%2.2d=%8.8"PRIX32,
; 1127 : 
; 1128 :                 pfx,
; 1129 : 
; 1130 :                 r+0, GR_L( r+0 ),
; 1131 :                 r+1, GR_L( r+1 ),
; 1132 :                 r+2, GR_L( r+2 ),
; 1133 :                 r+3, GR_L( r+3 )
; 1134 :             );
; 1135 : 
; 1136 :             FLOGMSG( stdout, "%s\n", buf );

  00305	b9 01 00 00 00	 mov	 ecx, 1
  0030a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00310	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00318	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0031d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159793
  00324	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00329	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0032e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00334	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159794
  0033b	ba 70 04 00 00	 mov	 edx, 1136		; 00000470H
  00340	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159795
  00347	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1137 :         }

  0034d	e9 f0 fe ff ff	 jmp	 $LN5@print_gr_r
$LN6@print_gr_r:
$LN10@print_gr_r:

; 1138 :     }
; 1139 : }

  00352	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0035a	48 33 cc	 xor	 rcx, rsp
  0035d	e8 00 00 00 00	 call	 __security_check_cookie
  00362	48 81 c4 80 01
	00 00		 add	 rsp, 384		; 00000180H
  00369	5f		 pop	 rdi
  0036a	c3		 ret	 0
print_gr_regs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
ptyp$ = 80
i$ = 84
tv81 = 88
tv193 = 96
tv208 = 104
tv268 = 112
tv283 = 120
tv64 = 128
str$ = 136
devcnt$ = 144
inscnt$ = 176
buffer$ = 208
__$ArrayPad$ = 336
sys$ = 368
was_bigend$ = 376
print_TFSYS PROC

; 999  : {

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 81 ec 60 01
	00 00		 sub	 rsp, 352		; 00000160H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1000 :     // PROGRAMMING NOTE: the TFSYS record passed to us was already
; 1001 :     // swapped into our native endian format before we were called.
; 1002 : 
; 1003 :     int i;
; 1004 :     BYTE ptyp;
; 1005 :     const char* str;
; 1006 :     char buffer[128] = {0};

  00023	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR buffer$[rsp]
  0002b	48 8b f8	 mov	 rdi, rax
  0002e	33 c0		 xor	 eax, eax
  00030	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00035	f3 aa		 rep stosb

; 1007 :     char inscnt[ 32] = {0};

  00037	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR inscnt$[rsp]
  0003f	48 8b f8	 mov	 rdi, rax
  00042	33 c0		 xor	 eax, eax
  00044	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00049	f3 aa		 rep stosb

; 1008 :     char devcnt[ 32] = {0};

  0004b	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR devcnt$[rsp]
  00053	48 8b f8	 mov	 rdi, rax
  00056	33 c0		 xor	 eax, eax
  00058	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0005d	f3 aa		 rep stosb

; 1009 : 
; 1010 :     // "Format-%c trace file created by: %s"
; 1011 :     WRMSG( HHC03208, "I", sys->ffmt[3], sys->version );

  0005f	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR sys$[rsp]
  00067	48 83 c0 30	 add	 rax, 48			; 00000030H
  0006b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv64[rsp], rax
  00073	b9 01 00 00 00	 mov	 ecx, 1
  00078	48 6b c9 03	 imul	 rcx, rcx, 3
  0007c	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR sys$[rsp]
  00084	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  00088	89 4c 24 58	 mov	 DWORD PTR tv81[rsp], ecx
  0008c	b9 01 00 00 00	 mov	 ecx, 1
  00091	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00097	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv64[rsp]
  0009f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000a4	8b 4c 24 58	 mov	 ecx, DWORD PTR tv81[rsp]
  000a8	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159707
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159708
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159709
  000d6	ba f3 03 00 00	 mov	 edx, 1011		; 000003f3H
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159710
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1012 : 
; 1013 :     printf( "\n" );

  000e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159711
  000ef	e8 00 00 00 00	 call	 printf

; 1014 : 
; 1015 :     // "Trace %s: %s"
; 1016 :     FormatTIMEVAL( &sys->beg_tod, buffer, sizeof( buffer ));

  000f4	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR sys$[rsp]
  000fc	48 83 c0 10	 add	 rax, 16
  00100	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  00106	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR buffer$[rsp]
  0010e	48 8b c8	 mov	 rcx, rax
  00111	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1017 :     WRMSG( HHC03209, "I", "began", buffer );

  00117	b9 01 00 00 00	 mov	 ecx, 1
  0011c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00122	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buffer$[rsp]
  0012a	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0012f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159712
  00136	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0013b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159713
  00142	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00147	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159714
  0014e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00153	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00158	41 b9 03 00 00
	00		 mov	 r9d, 3
  0015e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159715
  00165	ba f9 03 00 00	 mov	 edx, 1017		; 000003f9H
  0016a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159716
  00171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1018 : 
; 1019 :     // "Trace count: ins=%s records, dev=%s records"
; 1020 :     fmt_S64( inscnt, (S64) sys->tot_ins );

  00177	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR sys$[rsp]
  0017f	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  00183	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR inscnt$[rsp]
  0018b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmt_S64

; 1021 :     fmt_S64( devcnt, (S64) sys->tot_dev );

  00191	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR sys$[rsp]
  00199	48 8b 50 28	 mov	 rdx, QWORD PTR [rax+40]
  0019d	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR devcnt$[rsp]
  001a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmt_S64

; 1022 :     WRMSG( HHC03211, "I", inscnt, devcnt );

  001ab	b9 01 00 00 00	 mov	 ecx, 1
  001b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001b6	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR devcnt$[rsp]
  001be	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001c3	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR inscnt$[rsp]
  001cb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159717
  001d7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159718
  001e3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001e8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ed	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159719
  001fa	ba fe 03 00 00	 mov	 edx, 1022		; 000003feH
  001ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159720
  00206	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1023 : 
; 1024 :     // "Trace %s: %s"
; 1025 :     FormatTIMEVAL( &sys->end_tod, buffer, sizeof( buffer ));

  0020c	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR sys$[rsp]
  00214	48 83 c0 18	 add	 rax, 24
  00218	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  0021e	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR buffer$[rsp]
  00226	48 8b c8	 mov	 rcx, rax
  00229	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 1026 :     WRMSG( HHC03209, "I", "ended", buffer );

  0022f	b9 01 00 00 00	 mov	 ecx, 1
  00234	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0023a	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buffer$[rsp]
  00242	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00247	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159721
  0024e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00253	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159722
  0025a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0025f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159723
  00266	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0026b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00270	41 b9 03 00 00
	00		 mov	 r9d, 3
  00276	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159724
  0027d	ba 02 04 00 00	 mov	 edx, 1026		; 00000402H
  00282	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159725
  00289	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1027 : 
; 1028 :     /* Build pre-formatted processor type strings for all CPUs */
; 1029 :     for (i=0; i < MAX_CPU_ENGS; ++i)

  0028f	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00297	eb 0a		 jmp	 SHORT $LN4@print_TFSY
$LN2@print_TFSY:
  00299	8b 44 24 54	 mov	 eax, DWORD PTR i$[rsp]
  0029d	ff c0		 inc	 eax
  0029f	89 44 24 54	 mov	 DWORD PTR i$[rsp], eax
$LN4@print_TFSY:
  002a3	83 7c 24 54 40	 cmp	 DWORD PTR i$[rsp], 64	; 00000040H
  002a8	7d 69		 jge	 SHORT $LN3@print_TFSY

; 1030 :     {
; 1031 :         ptyp = sys->ptyp[ i ];

  002aa	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  002af	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR sys$[rsp]
  002b7	0f b6 84 01 b0
	00 00 00	 movzx	 eax, BYTE PTR [rcx+rax+176]
  002bf	88 44 24 50	 mov	 BYTE PTR ptyp$[rsp], al

; 1032 :         str  = ptyp2short( ptyp );

  002c3	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR ptyp$[rsp]
  002c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  002ce	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR str$[rsp], rax

; 1033 :         // (Note: '5' because e.g. "CPnn" = 4 chars + NULL)
; 1034 :         snprintf( ptyp_strs[ i ], 5, "%s%02X", str, i );

  002d6	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  002db	48 6b c0 05	 imul	 rax, rax, 5
  002df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:ptyp_strs
  002e6	48 03 c8	 add	 rcx, rax
  002e9	48 8b c1	 mov	 rax, rcx
  002ec	8b 4c 24 54	 mov	 ecx, DWORD PTR i$[rsp]
  002f0	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  002f4	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR str$[rsp]
  002fc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159726
  00303	ba 05 00 00 00	 mov	 edx, 5
  00308	48 8b c8	 mov	 rcx, rax
  0030b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1035 :     }

  00311	eb 86		 jmp	 SHORT $LN2@print_TFSY
$LN3@print_TFSY:

; 1036 : 
; 1037 :     if (doendswap)

  00313	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR doendswap
  0031a	85 c0		 test	 eax, eax
  0031c	0f 84 d2 02 00
	00		 je	 $LN5@print_TFSY

; 1038 :     {
; 1039 :         printf( "\n" );

  00322	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159728
  00329	e8 00 00 00 00	 call	 printf

; 1040 : 
; 1041 :         // "Endianness of %s = %s"
; 1042 :         WRMSG( HHC03221, "I", "file", was_bigend       ? "BIG" : "little" );

  0032e	0f b6 84 24 78
	01 00 00	 movzx	 eax, BYTE PTR was_bigend$[rsp]
  00336	85 c0		 test	 eax, eax
  00338	74 0e		 je	 SHORT $LN8@print_TFSY
  0033a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159729
  00341	48 89 44 24 60	 mov	 QWORD PTR tv193[rsp], rax
  00346	eb 0c		 jmp	 SHORT $LN9@print_TFSY
$LN8@print_TFSY:
  00348	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159730
  0034f	48 89 44 24 60	 mov	 QWORD PTR tv193[rsp], rax
$LN9@print_TFSY:
  00354	b9 01 00 00 00	 mov	 ecx, 1
  00359	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0035f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv193[rsp]
  00364	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00369	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159731
  00370	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00375	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159732
  0037c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00381	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159733
  00388	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0038d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00392	41 b9 03 00 00
	00		 mov	 r9d, 3
  00398	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159734
  0039f	ba 12 04 00 00	 mov	 edx, 1042		; 00000412H
  003a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159735
  003ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1043 :         WRMSG( HHC03221, "I", "host", are_big_endian() ? "BIG" : "little" );

  003b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_are_big_endian
  003b7	0f b6 c0	 movzx	 eax, al
  003ba	85 c0		 test	 eax, eax
  003bc	74 0e		 je	 SHORT $LN10@print_TFSY
  003be	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159736
  003c5	48 89 44 24 68	 mov	 QWORD PTR tv208[rsp], rax
  003ca	eb 0c		 jmp	 SHORT $LN11@print_TFSY
$LN10@print_TFSY:
  003cc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159737
  003d3	48 89 44 24 68	 mov	 QWORD PTR tv208[rsp], rax
$LN11@print_TFSY:
  003d8	b9 01 00 00 00	 mov	 ecx, 1
  003dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003e3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv208[rsp]
  003e8	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159738
  003f4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159739
  00400	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00405	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159740
  0040c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00411	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00416	41 b9 03 00 00
	00		 mov	 r9d, 3
  0041c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159741
  00423	ba 13 04 00 00	 mov	 edx, 1043		; 00000413H
  00428	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159742
  0042f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1044 : 
; 1045 :         // "WARNING: possible performance impact due to endianness!"
; 1046 :         printf( "\n" );

  00435	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159743
  0043c	e8 00 00 00 00	 call	 printf

; 1047 :         WRMSG( HHC03222, "W" );

  00441	b9 01 00 00 00	 mov	 ecx, 1
  00446	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0044c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159744
  00453	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00458	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159745
  0045f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00464	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00469	41 b9 03 00 00
	00		 mov	 r9d, 3
  0046f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159746
  00476	ba 17 04 00 00	 mov	 edx, 1047		; 00000417H
  0047b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159747
  00482	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1048 : 
; 1049 :         /* If stdout was redirected to a file (very likely true), but
; 1050 :            stderr was not (i.e. is still a terminal, also very likely
; 1051 :            true) then print the above messages again, but this time
; 1052 :            to stderr so that they can see them on their terminal.
; 1053 :         */
; 1054 :         if (!out_istty && err_istty)

  00488	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR out_istty
  0048f	85 c0		 test	 eax, eax
  00491	0f 85 5d 01 00
	00		 jne	 $LN6@print_TFSY
  00497	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR err_istty
  0049e	85 c0		 test	 eax, eax
  004a0	0f 84 4e 01 00
	00		 je	 $LN6@print_TFSY

; 1055 :         {
; 1056 :             // "Endianness of %s = %s"
; 1057 :             FWRMSG( stderr, HHC03221, "I", "file", was_bigend       ? "BIG" : "little" );

  004a6	0f b6 84 24 78
	01 00 00	 movzx	 eax, BYTE PTR was_bigend$[rsp]
  004ae	85 c0		 test	 eax, eax
  004b0	74 0e		 je	 SHORT $LN12@print_TFSY
  004b2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159749
  004b9	48 89 44 24 70	 mov	 QWORD PTR tv268[rsp], rax
  004be	eb 0c		 jmp	 SHORT $LN13@print_TFSY
$LN12@print_TFSY:
  004c0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159750
  004c7	48 89 44 24 70	 mov	 QWORD PTR tv268[rsp], rax
$LN13@print_TFSY:
  004cc	b9 02 00 00 00	 mov	 ecx, 2
  004d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004d7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv268[rsp]
  004dc	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  004e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159751
  004e8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159752
  004f4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159753
  00500	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00505	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0050a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00510	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159754
  00517	ba 21 04 00 00	 mov	 edx, 1057		; 00000421H
  0051c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159755
  00523	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1058 :             FWRMSG( stderr, HHC03221, "I", "host", are_big_endian() ? "BIG" : "little" );

  00529	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_are_big_endian
  0052f	0f b6 c0	 movzx	 eax, al
  00532	85 c0		 test	 eax, eax
  00534	74 0e		 je	 SHORT $LN14@print_TFSY
  00536	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159756
  0053d	48 89 44 24 78	 mov	 QWORD PTR tv283[rsp], rax
  00542	eb 0c		 jmp	 SHORT $LN15@print_TFSY
$LN14@print_TFSY:
  00544	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159757
  0054b	48 89 44 24 78	 mov	 QWORD PTR tv283[rsp], rax
$LN15@print_TFSY:
  00550	b9 02 00 00 00	 mov	 ecx, 2
  00555	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0055b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv283[rsp]
  00560	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00565	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159758
  0056c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00571	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159759
  00578	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0057d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159760
  00584	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00589	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0058e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00594	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159761
  0059b	ba 22 04 00 00	 mov	 edx, 1058		; 00000422H
  005a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159762
  005a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1059 : 
; 1060 :             // "WARNING: possible performance impact due to endianness!"
; 1061 :             FWRMSG( stderr, HHC03222, "W" );

  005ad	b9 02 00 00 00	 mov	 ecx, 2
  005b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159763
  005bf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159764
  005cb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005d0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005d5	41 b9 03 00 00
	00		 mov	 r9d, 3
  005db	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159765
  005e2	ba 25 04 00 00	 mov	 edx, 1061		; 00000425H
  005e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159766
  005ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN6@print_TFSY:
$LN5@print_TFSY:

; 1062 :         }
; 1063 :     }
; 1064 : }

  005f4	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  005fc	48 33 cc	 xor	 rcx, rsp
  005ff	e8 00 00 00 00	 call	 __security_check_cookie
  00604	48 81 c4 60 01
	00 00		 add	 rsp, 352		; 00000160H
  0060b	5f		 pop	 rdi
  0060c	c3		 ret	 0
print_TFSYS ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
hdr$ = 48
tf_dev_do_blank_sep PROC

; 930  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 931  :     if (0
; 932  :         || prvcpuad < MAX_CPU_ENGS      // (prev not device record?)
; 933  :         || prvdevnum != hdr->devnum     // (or not for same device?)
; 934  :         || hdr->msgnum == 1334          // (or ORB = start new I/O?)

  00009	33 c0		 xor	 eax, eax
  0000b	85 c0		 test	 eax, eax
  0000d	75 30		 jne	 SHORT $LN3@tf_dev_do_
  0000f	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR prvcpuad
  00016	83 f8 40	 cmp	 eax, 64			; 00000040H
  00019	7c 24		 jl	 SHORT $LN3@tf_dev_do_
  0001b	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR prvdevnum
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR hdr$[rsp]
  00027	0f b7 49 12	 movzx	 ecx, WORD PTR [rcx+18]
  0002b	3b c1		 cmp	 eax, ecx
  0002d	75 10		 jne	 SHORT $LN3@tf_dev_do_
  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR hdr$[rsp]
  00034	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  00038	3d 36 05 00 00	 cmp	 eax, 1334		; 00000536H
  0003d	75 0c		 jne	 SHORT $LN2@tf_dev_do_
$LN3@tf_dev_do_:

; 935  :     )
; 936  :         printf("\n");                   // (separate from previous)

  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159689
  00046	e8 00 00 00 00	 call	 printf
$LN2@tf_dev_do_:

; 937  : 
; 938  :     prvcpuad  = hdr->cpuad;

  0004b	48 8b 44 24 30	 mov	 rax, QWORD PTR hdr$[rsp]
  00050	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00054	66 89 05 00 00
	00 00		 mov	 WORD PTR prvcpuad, ax

; 939  :     prvdevnum = hdr->devnum;

  0005b	48 8b 44 24 30	 mov	 rax, QWORD PTR hdr$[rsp]
  00060	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  00064	66 89 05 00 00
	00 00		 mov	 WORD PTR prvdevnum, ax

; 940  :     previnst  = false;

  0006b	c6 05 00 00 00
	00 00		 mov	 BYTE PTR previnst, 0

; 941  : }

  00072	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00076	c3		 ret	 0
tf_dev_do_blank_sep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
hdr$ = 48
tf_do_blank_sep PROC

; 911  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 912  :     if (0
; 913  :         || prvcpuad >= MAX_CPU_ENGS     // (prev was device record?)
; 914  :         || hdr->cpuad != prvcpuad       // (or not same CPU?)
; 915  :         || previnst                     // (or was "instruction"?)

  00009	33 c0		 xor	 eax, eax
  0000b	85 c0		 test	 eax, eax
  0000d	75 2b		 jne	 SHORT $LN3@tf_do_blan
  0000f	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR prvcpuad
  00016	83 f8 40	 cmp	 eax, 64			; 00000040H
  00019	7d 1f		 jge	 SHORT $LN3@tf_do_blan
  0001b	48 8b 44 24 30	 mov	 rax, QWORD PTR hdr$[rsp]
  00020	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00024	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR prvcpuad
  0002b	3b c1		 cmp	 eax, ecx
  0002d	75 0b		 jne	 SHORT $LN3@tf_do_blan
  0002f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR previnst
  00036	85 c0		 test	 eax, eax
  00038	74 0c		 je	 SHORT $LN2@tf_do_blan
$LN3@tf_do_blan:

; 916  :     )
; 917  :         printf("\n");                   // (separate from previous)

  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159682
  00041	e8 00 00 00 00	 call	 printf
$LN2@tf_do_blan:

; 918  : 
; 919  :     // (else prv NOT dev, *AND* same cpu, *AND* not "instruction")
; 920  : 
; 921  :     prvcpuad  = hdr->cpuad;

  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR hdr$[rsp]
  0004b	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  0004f	66 89 05 00 00
	00 00		 mov	 WORD PTR prvcpuad, ax

; 922  :     prvdevnum = hdr->devnum;

  00056	48 8b 44 24 30	 mov	 rax, QWORD PTR hdr$[rsp]
  0005b	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  0005f	66 89 05 00 00
	00 00		 mov	 WORD PTR prvdevnum, ax

; 923  :     previnst  = false;

  00066	c6 05 00 00 00
	00 00		 mov	 BYTE PTR previnst, 0

; 924  : }

  0006d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00071	c3		 ret	 0
tf_do_blank_sep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
i$ = 0
tv92 = 4
tv94 = 8
devnum$ = 32
is_devnum_wanted PROC

; 877  : {

  00000	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  00005	48 83 ec 18	 sub	 rsp, 24

; 878  :     int i;
; 879  : 
; 880  :     for (i=0; i < nUnitMOPT; ++i)

  00009	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
  00010	eb 08		 jmp	 SHORT $LN4@is_devnum_
$LN2@is_devnum_:
  00012	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00015	ff c0		 inc	 eax
  00017	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@is_devnum_:
  0001a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR nUnitMOPT
  00020	39 04 24	 cmp	 DWORD PTR i$[rsp], eax
  00023	7d 7d		 jge	 SHORT $LN3@is_devnum_

; 881  :     {
; 882  :         if (pUnitMOPT[i].isrange)

  00025	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00029	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0002d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR pUnitMOPT
  00034	0f b6 44 01 1c	 movzx	 eax, BYTE PTR [rcx+rax+28]
  00039	85 c0		 test	 eax, eax
  0003b	74 42		 je	 SHORT $LN5@is_devnum_

; 883  :         {
; 884  :             if (1
; 885  :                 && devnum >= pUnitMOPT[i].opt1
; 886  :                 && devnum <= pUnitMOPT[i].opt2

  0003d	33 c0		 xor	 eax, eax
  0003f	83 f8 01	 cmp	 eax, 1
  00042	74 39		 je	 SHORT $LN7@is_devnum_
  00044	0f b7 44 24 20	 movzx	 eax, WORD PTR devnum$[rsp]
  00049	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  0004d	48 6b c9 20	 imul	 rcx, rcx, 32		; 00000020H
  00051	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR pUnitMOPT
  00058	48 3b 04 0a	 cmp	 rax, QWORD PTR [rdx+rcx]
  0005c	72 1f		 jb	 SHORT $LN7@is_devnum_
  0005e	0f b7 44 24 20	 movzx	 eax, WORD PTR devnum$[rsp]
  00063	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  00067	48 6b c9 20	 imul	 rcx, rcx, 32		; 00000020H
  0006b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR pUnitMOPT
  00072	48 3b 44 0a 08	 cmp	 rax, QWORD PTR [rdx+rcx+8]
  00077	77 04		 ja	 SHORT $LN7@is_devnum_

; 887  :             )
; 888  :                 return true;

  00079	b0 01		 mov	 al, 1
  0007b	eb 5e		 jmp	 SHORT $LN1@is_devnum_
$LN7@is_devnum_:

; 889  :         }

  0007d	eb 1e		 jmp	 SHORT $LN6@is_devnum_
$LN5@is_devnum_:

; 890  :         else
; 891  :         {
; 892  :             if (devnum == pUnitMOPT[i].opt1)

  0007f	0f b7 44 24 20	 movzx	 eax, WORD PTR devnum$[rsp]
  00084	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  00088	48 6b c9 20	 imul	 rcx, rcx, 32		; 00000020H
  0008c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR pUnitMOPT
  00093	48 3b 04 0a	 cmp	 rax, QWORD PTR [rdx+rcx]
  00097	75 04		 jne	 SHORT $LN8@is_devnum_

; 893  :                 return true;

  00099	b0 01		 mov	 al, 1
  0009b	eb 3e		 jmp	 SHORT $LN1@is_devnum_
$LN8@is_devnum_:
$LN6@is_devnum_:

; 894  :         }
; 895  :     }

  0009d	e9 70 ff ff ff	 jmp	 $LN2@is_devnum_
$LN3@is_devnum_:

; 896  :     return nUnitMOPT ? false: true;

  000a2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR nUnitMOPT, 0
  000a9	74 0a		 je	 SHORT $LN10@is_devnum_
  000ab	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
  000b3	eb 08		 jmp	 SHORT $LN11@is_devnum_
$LN10@is_devnum_:
  000b5	c7 44 24 04 01
	00 00 00	 mov	 DWORD PTR tv92[rsp], 1
$LN11@is_devnum_:
  000bd	83 7c 24 04 00	 cmp	 DWORD PTR tv92[rsp], 0
  000c2	75 0a		 jne	 SHORT $LN12@is_devnum_
  000c4	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR tv94[rsp], 0
  000cc	eb 08		 jmp	 SHORT $LN13@is_devnum_
$LN12@is_devnum_:
  000ce	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR tv94[rsp], 1
$LN13@is_devnum_:
  000d6	0f b6 44 24 08	 movzx	 eax, BYTE PTR tv94[rsp]
$LN1@is_devnum_:

; 897  : }

  000db	48 83 c4 18	 add	 rsp, 24
  000df	c3		 ret	 0
is_devnum_wanted ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
hdr$ = 48
is_wanted PROC

; 857  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 858  :     if (!is_recnum_wanted())

  00009	e8 00 00 00 00	 call	 is_recnum_wanted
  0000e	0f b6 c0	 movzx	 eax, al
  00011	85 c0		 test	 eax, eax
  00013	75 04		 jne	 SHORT $LN2@is_wanted

; 859  :         return false;

  00015	32 c0		 xor	 al, al
  00017	eb 52		 jmp	 SHORT $LN1@is_wanted
$LN2@is_wanted:

; 860  : 
; 861  :     if (!is_msgnum_wanted( hdr->msgnum ))

  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR hdr$[rsp]
  0001e	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  00022	8b c8		 mov	 ecx, eax
  00024	e8 00 00 00 00	 call	 is_msgnum_wanted
  00029	0f b6 c0	 movzx	 eax, al
  0002c	85 c0		 test	 eax, eax
  0002e	75 04		 jne	 SHORT $LN3@is_wanted

; 862  :         return false;

  00030	32 c0		 xor	 al, al
  00032	eb 37		 jmp	 SHORT $LN1@is_wanted
$LN3@is_wanted:

; 863  : 
; 864  :     if (!is_cpu_wanted( hdr->cpuad ))

  00034	48 8b 44 24 30	 mov	 rax, QWORD PTR hdr$[rsp]
  00039	0f b6 48 04	 movzx	 ecx, BYTE PTR [rax+4]
  0003d	e8 00 00 00 00	 call	 is_cpu_wanted
  00042	0f b6 c0	 movzx	 eax, al
  00045	85 c0		 test	 eax, eax
  00047	75 04		 jne	 SHORT $LN4@is_wanted

; 865  :         return false;

  00049	32 c0		 xor	 al, al
  0004b	eb 1e		 jmp	 SHORT $LN1@is_wanted
$LN4@is_wanted:

; 866  : 
; 867  :     if (!is_time_wanted( &hdr->tod ))

  0004d	48 8b 44 24 30	 mov	 rax, QWORD PTR hdr$[rsp]
  00052	48 83 c0 08	 add	 rax, 8
  00056	48 8b c8	 mov	 rcx, rax
  00059	e8 00 00 00 00	 call	 is_time_wanted
  0005e	0f b6 c0	 movzx	 eax, al
  00061	85 c0		 test	 eax, eax
  00063	75 04		 jne	 SHORT $LN5@is_wanted

; 868  :         return false;

  00065	32 c0		 xor	 al, al
  00067	eb 02		 jmp	 SHORT $LN1@is_wanted
$LN5@is_wanted:

; 869  : 
; 870  :     return true;

  00069	b0 01		 mov	 al, 1
$LN1@is_wanted:

; 871  : }

  0006b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006f	c3		 ret	 0
is_wanted ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
n$ = 32
i$ = 36
masked_inst$ = 40
__$ArrayPad$ = 48
p$ = 80
is_wanted_opcode PROC

; 836  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 837  :     int   i, n;
; 838  :     BYTE  masked_inst[6];
; 839  : 
; 840  :     for (i=0; i < nInstMOPT; ++i)

  00018	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00020	eb 0a		 jmp	 SHORT $LN4@is_wanted_
$LN2@is_wanted_:
  00022	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00026	ff c0		 inc	 eax
  00028	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@is_wanted_:
  0002c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR nInstMOPT
  00032	39 44 24 24	 cmp	 DWORD PTR i$[rsp], eax
  00036	0f 8d a3 00 00
	00		 jge	 $LN3@is_wanted_

; 841  :     {
; 842  :         /* Build masked copy of instruction */
; 843  :         for (n=0; n < 6; ++n)

  0003c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  00044	eb 0a		 jmp	 SHORT $LN7@is_wanted_
$LN5@is_wanted_:
  00046	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  0004a	ff c0		 inc	 eax
  0004c	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax
$LN7@is_wanted_:
  00050	83 7c 24 20 06	 cmp	 DWORD PTR n$[rsp], 6
  00055	7d 3b		 jge	 SHORT $LN6@is_wanted_

; 844  :             masked_inst[n] = p[n] & pInstMOPT[i].imask[n];

  00057	48 63 44 24 20	 movsxd	 rax, DWORD PTR n$[rsp]
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p$[rsp]
  00061	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00065	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  0006a	48 6b c9 20	 imul	 rcx, rcx, 32		; 00000020H
  0006e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR pInstMOPT
  00075	48 03 d1	 add	 rdx, rcx
  00078	48 8b ca	 mov	 rcx, rdx
  0007b	48 63 54 24 20	 movsxd	 rdx, DWORD PTR n$[rsp]
  00080	0f b6 4c 11 16	 movzx	 ecx, BYTE PTR [rcx+rdx+22]
  00085	23 c1		 and	 eax, ecx
  00087	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR n$[rsp]
  0008c	88 44 0c 28	 mov	 BYTE PTR masked_inst$[rsp+rcx], al
  00090	eb b4		 jmp	 SHORT $LN5@is_wanted_
$LN6@is_wanted_:

; 845  : 
; 846  :         // Compare masked copy with what they're intrested in */
; 847  :         if (memcmp( &masked_inst[0], &pInstMOPT[i].icode[0], 6 ) == 0)

  00092	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00097	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0009b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR pInstMOPT
  000a2	48 03 c8	 add	 rcx, rax
  000a5	48 8b c1	 mov	 rax, rcx
  000a8	b9 01 00 00 00	 mov	 ecx, 1
  000ad	48 6b c9 00	 imul	 rcx, rcx, 0
  000b1	48 8d 44 08 10	 lea	 rax, QWORD PTR [rax+rcx+16]
  000b6	b9 01 00 00 00	 mov	 ecx, 1
  000bb	48 6b c9 00	 imul	 rcx, rcx, 0
  000bf	48 8d 4c 0c 28	 lea	 rcx, QWORD PTR masked_inst$[rsp+rcx]
  000c4	41 b8 06 00 00
	00		 mov	 r8d, 6
  000ca	48 8b d0	 mov	 rdx, rax
  000cd	e8 00 00 00 00	 call	 memcmp
  000d2	85 c0		 test	 eax, eax
  000d4	75 04		 jne	 SHORT $LN8@is_wanted_

; 848  :             return true;

  000d6	b0 01		 mov	 al, 1
  000d8	eb 07		 jmp	 SHORT $LN1@is_wanted_
$LN8@is_wanted_:

; 849  :     }

  000da	e9 43 ff ff ff	 jmp	 $LN2@is_wanted_
$LN3@is_wanted_:

; 850  :     return false;

  000df	32 c0		 xor	 al, al
$LN1@is_wanted_:

; 851  : }

  000e1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000e6	48 33 cc	 xor	 rcx, rsp
  000e9	e8 00 00 00 00	 call	 __security_check_cookie
  000ee	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f2	c3		 ret	 0
is_wanted_opcode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
i$ = 32
pTF02326$ = 64
is_wanted_tf02326 PROC

; 813  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 814  :     int i;
; 815  : 
; 816  :     if (pTF02326->b1 >= 0)

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR pTF02326$[rsp]
  0000e	0f bf 40 1c	 movsx	 eax, WORD PTR [rax+28]
  00012	85 c0		 test	 eax, eax
  00014	7c 54		 jl	 SHORT $LN8@is_wanted_

; 817  :     {
; 818  :         for (i=0; i < nStorMOPT; ++i)

  00016	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0001e	eb 0a		 jmp	 SHORT $LN4@is_wanted_
$LN2@is_wanted_:
  00020	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00024	ff c0		 inc	 eax
  00026	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@is_wanted_:
  0002a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR nStorMOPT
  00030	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  00034	7d 34		 jge	 SHORT $LN3@is_wanted_

; 819  :             if (is_wanted_operand( &pStorMOPT[i], &pTF02326->op1 ))

  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR pTF02326$[rsp]
  0003b	48 83 c0 20	 add	 rax, 32			; 00000020H
  0003f	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00044	48 6b c9 20	 imul	 rcx, rcx, 32		; 00000020H
  00048	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR pStorMOPT
  0004f	48 03 d1	 add	 rdx, rcx
  00052	48 8b ca	 mov	 rcx, rdx
  00055	48 8b d0	 mov	 rdx, rax
  00058	e8 00 00 00 00	 call	 is_wanted_operand
  0005d	0f b6 c0	 movzx	 eax, al
  00060	85 c0		 test	 eax, eax
  00062	74 04		 je	 SHORT $LN9@is_wanted_

; 820  :                 return true;

  00064	b0 01		 mov	 al, 1
  00066	eb 65		 jmp	 SHORT $LN1@is_wanted_
$LN9@is_wanted_:
  00068	eb b6		 jmp	 SHORT $LN2@is_wanted_
$LN3@is_wanted_:
$LN8@is_wanted_:

; 821  :     }
; 822  : 
; 823  :     if (pTF02326->b2 >= 0)

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR pTF02326$[rsp]
  0006f	0f bf 40 1e	 movsx	 eax, WORD PTR [rax+30]
  00073	85 c0		 test	 eax, eax
  00075	7c 54		 jl	 SHORT $LN10@is_wanted_

; 824  :     {
; 825  :         for (i=0; i < nStorMOPT; ++i)

  00077	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0007f	eb 0a		 jmp	 SHORT $LN7@is_wanted_
$LN5@is_wanted_:
  00081	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00085	ff c0		 inc	 eax
  00087	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN7@is_wanted_:
  0008b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR nStorMOPT
  00091	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  00095	7d 34		 jge	 SHORT $LN6@is_wanted_

; 826  :             if (is_wanted_operand( &pStorMOPT[i], &pTF02326->op2 ))

  00097	48 8b 44 24 40	 mov	 rax, QWORD PTR pTF02326$[rsp]
  0009c	48 83 c0 48	 add	 rax, 72			; 00000048H
  000a0	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  000a5	48 6b c9 20	 imul	 rcx, rcx, 32		; 00000020H
  000a9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR pStorMOPT
  000b0	48 03 d1	 add	 rdx, rcx
  000b3	48 8b ca	 mov	 rcx, rdx
  000b6	48 8b d0	 mov	 rdx, rax
  000b9	e8 00 00 00 00	 call	 is_wanted_operand
  000be	0f b6 c0	 movzx	 eax, al
  000c1	85 c0		 test	 eax, eax
  000c3	74 04		 je	 SHORT $LN11@is_wanted_

; 827  :                 return true;

  000c5	b0 01		 mov	 al, 1
  000c7	eb 04		 jmp	 SHORT $LN1@is_wanted_
$LN11@is_wanted_:
  000c9	eb b6		 jmp	 SHORT $LN5@is_wanted_
$LN6@is_wanted_:
$LN10@is_wanted_:

; 828  :     }
; 829  :     return false;

  000cb	32 c0		 xor	 al, al
$LN1@is_wanted_:

; 830  : }

  000cd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d1	c3		 ret	 0
is_wanted_tf02326 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv80 = 32
tv89 = 40
inst_amt$ = 48
pinst_addr$ = 56
want_amt$ = 64
want_addr$ = 72
pMOPT$ = 96
pTFOP$ = 104
is_wanted_operand PROC

; 786  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 787  :     U64*  pinst_addr;
; 788  :     U64    inst_amt;
; 789  :     U64    want_addr;
; 790  :     U64    want_amt;
; 791  : 
; 792  :     /* Make sure we even HAVE a storage address to examine! */
; 793  :     if (0
; 794  :         || (1
; 795  :             && pMOPT->isreal    // Real address filtering specified?
; 796  :             && pTFOP->xcode     // But no real address available?
; 797  :            )
; 798  :         || !(inst_amt = pTFOP->amt)

  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 37		 jne	 SHORT $LN3@is_wanted_
  00014	33 c0		 xor	 eax, eax
  00016	83 f8 01	 cmp	 eax, 1
  00019	74 1a		 je	 SHORT $LN4@is_wanted_
  0001b	48 8b 44 24 60	 mov	 rax, QWORD PTR pMOPT$[rsp]
  00020	0f b6 40 1d	 movzx	 eax, BYTE PTR [rax+29]
  00024	85 c0		 test	 eax, eax
  00026	74 0d		 je	 SHORT $LN4@is_wanted_
  00028	48 8b 44 24 68	 mov	 rax, QWORD PTR pTFOP$[rsp]
  0002d	0f b7 40 20	 movzx	 eax, WORD PTR [rax+32]
  00031	85 c0		 test	 eax, eax
  00033	75 16		 jne	 SHORT $LN3@is_wanted_
$LN4@is_wanted_:
  00035	48 8b 44 24 68	 mov	 rax, QWORD PTR pTFOP$[rsp]
  0003a	0f b6 40 23	 movzx	 eax, BYTE PTR [rax+35]
  0003e	48 89 44 24 30	 mov	 QWORD PTR inst_amt$[rsp], rax
  00043	48 83 7c 24 30
	00		 cmp	 QWORD PTR inst_amt$[rsp], 0
  00049	75 07		 jne	 SHORT $LN2@is_wanted_
$LN3@is_wanted_:

; 799  :     )
; 800  :         return false;

  0004b	32 c0		 xor	 al, al
  0004d	e9 98 00 00 00	 jmp	 $LN1@is_wanted_
$LN2@is_wanted_:

; 801  : 
; 802  :     pinst_addr = pMOPT->isreal ? &pTFOP->raddr : &pTFOP->vaddr;

  00052	48 8b 44 24 60	 mov	 rax, QWORD PTR pMOPT$[rsp]
  00057	0f b6 40 1d	 movzx	 eax, BYTE PTR [rax+29]
  0005b	85 c0		 test	 eax, eax
  0005d	74 10		 je	 SHORT $LN6@is_wanted_
  0005f	48 8b 44 24 68	 mov	 rax, QWORD PTR pTFOP$[rsp]
  00064	48 83 c0 08	 add	 rax, 8
  00068	48 89 44 24 20	 mov	 QWORD PTR tv80[rsp], rax
  0006d	eb 0a		 jmp	 SHORT $LN7@is_wanted_
$LN6@is_wanted_:
  0006f	48 8b 44 24 68	 mov	 rax, QWORD PTR pTFOP$[rsp]
  00074	48 89 44 24 20	 mov	 QWORD PTR tv80[rsp], rax
$LN7@is_wanted_:
  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR tv80[rsp]
  0007e	48 89 44 24 38	 mov	 QWORD PTR pinst_addr$[rsp], rax

; 803  : 
; 804  :     want_addr = pMOPT->opt1;

  00083	48 8b 44 24 60	 mov	 rax, QWORD PTR pMOPT$[rsp]
  00088	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008b	48 89 44 24 48	 mov	 QWORD PTR want_addr$[rsp], rax

; 805  :     want_amt  = pMOPT->isrange ? (pMOPT->opt2 - pMOPT->opt1) + 1 : 1;

  00090	48 8b 44 24 60	 mov	 rax, QWORD PTR pMOPT$[rsp]
  00095	0f b6 40 1c	 movzx	 eax, BYTE PTR [rax+28]
  00099	85 c0		 test	 eax, eax
  0009b	74 1e		 je	 SHORT $LN8@is_wanted_
  0009d	48 8b 44 24 60	 mov	 rax, QWORD PTR pMOPT$[rsp]
  000a2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMOPT$[rsp]
  000a7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000aa	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000ae	48 2b c1	 sub	 rax, rcx
  000b1	48 ff c0	 inc	 rax
  000b4	48 89 44 24 28	 mov	 QWORD PTR tv89[rsp], rax
  000b9	eb 09		 jmp	 SHORT $LN9@is_wanted_
$LN8@is_wanted_:
  000bb	48 c7 44 24 28
	01 00 00 00	 mov	 QWORD PTR tv89[rsp], 1
$LN9@is_wanted_:
  000c4	48 8b 44 24 28	 mov	 rax, QWORD PTR tv89[rsp]
  000c9	48 89 44 24 40	 mov	 QWORD PTR want_amt$[rsp], rax

; 806  : 
; 807  :     return is_wanted_storage( want_addr, want_amt, *pinst_addr, inst_amt );

  000ce	4c 8b 4c 24 30	 mov	 r9, QWORD PTR inst_amt$[rsp]
  000d3	48 8b 44 24 38	 mov	 rax, QWORD PTR pinst_addr$[rsp]
  000d8	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  000db	48 8b 54 24 40	 mov	 rdx, QWORD PTR want_amt$[rsp]
  000e0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR want_addr$[rsp]
  000e5	e8 00 00 00 00	 call	 is_wanted_storage
$LN1@is_wanted_:

; 808  : }

  000ea	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000ee	c3		 ret	 0
is_wanted_operand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
within_want_range$ = 0
tv79 = 4
tv81 = 8
want_addr$ = 32
want_amt$ = 40
inst_addr$ = 48
inst_amt$ = 56
is_wanted_storage PROC

; 768  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 18	 sub	 rsp, 24

; 769  :     bool within_want_range =

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 73		 jne	 SHORT $LN4@is_wanted_
  0001e	33 c0		 xor	 eax, eax
  00020	83 f8 01	 cmp	 eax, 1
  00023	74 22		 je	 SHORT $LN3@is_wanted_
  00025	48 8b 44 24 20	 mov	 rax, QWORD PTR want_addr$[rsp]
  0002a	48 39 44 24 30	 cmp	 QWORD PTR inst_addr$[rsp], rax
  0002f	72 16		 jb	 SHORT $LN3@is_wanted_
  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR want_addr$[rsp]
  00036	48 8b 4c 24 28	 mov	 rcx, QWORD PTR want_amt$[rsp]
  0003b	48 8d 44 08 ff	 lea	 rax, QWORD PTR [rax+rcx-1]
  00040	48 39 44 24 30	 cmp	 QWORD PTR inst_addr$[rsp], rax
  00045	76 4a		 jbe	 SHORT $LN4@is_wanted_
$LN3@is_wanted_:
  00047	33 c0		 xor	 eax, eax
  00049	83 f8 01	 cmp	 eax, 1
  0004c	74 39		 je	 SHORT $LN5@is_wanted_
  0004e	48 8b 44 24 30	 mov	 rax, QWORD PTR inst_addr$[rsp]
  00053	48 8b 4c 24 38	 mov	 rcx, QWORD PTR inst_amt$[rsp]
  00058	48 8d 44 08 ff	 lea	 rax, QWORD PTR [rax+rcx-1]
  0005d	48 3b 44 24 20	 cmp	 rax, QWORD PTR want_addr$[rsp]
  00062	72 23		 jb	 SHORT $LN5@is_wanted_
  00064	48 8b 44 24 30	 mov	 rax, QWORD PTR inst_addr$[rsp]
  00069	48 8b 4c 24 38	 mov	 rcx, QWORD PTR inst_amt$[rsp]
  0006e	48 8d 44 08 ff	 lea	 rax, QWORD PTR [rax+rcx-1]
  00073	48 8b 4c 24 20	 mov	 rcx, QWORD PTR want_addr$[rsp]
  00078	48 8b 54 24 28	 mov	 rdx, QWORD PTR want_amt$[rsp]
  0007d	48 8d 4c 11 ff	 lea	 rcx, QWORD PTR [rcx+rdx-1]
  00082	48 3b c1	 cmp	 rax, rcx
  00085	76 0a		 jbe	 SHORT $LN4@is_wanted_
$LN5@is_wanted_:
  00087	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR tv79[rsp], 0
  0008f	eb 08		 jmp	 SHORT $LN6@is_wanted_
$LN4@is_wanted_:
  00091	c7 44 24 04 01
	00 00 00	 mov	 DWORD PTR tv79[rsp], 1
$LN6@is_wanted_:
  00099	83 7c 24 04 00	 cmp	 DWORD PTR tv79[rsp], 0
  0009e	75 0a		 jne	 SHORT $LN7@is_wanted_
  000a0	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR tv81[rsp], 0
  000a8	eb 08		 jmp	 SHORT $LN8@is_wanted_
$LN7@is_wanted_:
  000aa	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR tv81[rsp], 1
$LN8@is_wanted_:
  000b2	0f b6 44 24 08	 movzx	 eax, BYTE PTR tv81[rsp]
  000b7	88 04 24	 mov	 BYTE PTR within_want_range$[rsp], al

; 770  :     (0
; 771  :      || (1
; 772  :          && inst_addr >=  want_addr
; 773  :          && inst_addr <= (want_addr + want_amt - 1)
; 774  :         )
; 775  :      || (1
; 776  :          && (inst_addr + inst_amt - 1) >=  want_addr
; 777  :          && (inst_addr + inst_amt - 1) <= (want_addr + want_amt - 1)
; 778  :         )
; 779  :     );
; 780  :     return within_want_range;

  000ba	0f b6 04 24	 movzx	 eax, BYTE PTR within_want_range$[rsp]

; 781  : }

  000be	48 83 c4 18	 add	 rsp, 24
  000c2	c3		 ret	 0
is_wanted_storage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
dif_tim$1 = 32
past_beg$2 = 40
pTV$ = 64
is_time_wanted PROC

; 728  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 729  :     if (0
; 730  :         || beg_tim.tv_sec       // if a
; 731  :         || beg_tim.tv_usec      // ... time
; 732  :         || end_tim.tv_sec       // ...... range
; 733  :         || end_tim.tv_usec      // .........was specified

  00009	33 c0		 xor	 eax, eax
  0000b	85 c0		 test	 eax, eax
  0000d	75 28		 jne	 SHORT $LN3@is_time_wa
  0000f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR beg_tim, 0
  00016	75 1f		 jne	 SHORT $LN3@is_time_wa
  00018	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR beg_tim+4, 0
  0001f	75 16		 jne	 SHORT $LN3@is_time_wa
  00021	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR end_tim, 0
  00028	75 0d		 jne	 SHORT $LN3@is_time_wa
  0002a	83 3d 04 00 00
	00 00		 cmp	 DWORD PTR end_tim+4, 0
  00031	0f 84 88 00 00
	00		 je	 $LN2@is_time_wa
$LN3@is_time_wa:

; 734  :     )
; 735  :     {
; 736  :         /* Then we need to check further */
; 737  : 
; 738  :         static U64 max_past = 0;    // (usecs)
; 739  :                U64 past_beg;        // (usecs; work)
; 740  :                TIMEVAL dif_tim;     // (work)
; 741  : 
; 742  :         if (!max_past)              // (first time here?)

  00037	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?max_past@?2??is_time_wanted@@9@9, 0
  0003f	75 34		 jne	 SHORT $LN4@is_time_wa

; 743  :         {
; 744  :             /* Calculate requested time range in usecs */
; 745  :             timeval_subtract( &beg_tim, &end_tim, &dif_tim );

  00041	4c 8d 44 24 20	 lea	 r8, QWORD PTR dif_tim$1[rsp]
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:end_tim
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:beg_tim
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_timeval_subtract

; 746  :             max_past = ((U64)dif_tim.tv_sec * 1000000) + dif_tim.tv_usec;

  0005a	48 63 44 24 20	 movsxd	 rax, DWORD PTR dif_tim$1[rsp]
  0005f	48 69 c0 40 42
	0f 00		 imul	 rax, rax, 1000000	; 000f4240H
  00066	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR dif_tim$1[rsp+4]
  0006b	48 03 c1	 add	 rax, rcx
  0006e	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?max_past@?2??is_time_wanted@@9@9, rax
$LN4@is_time_wa:

; 747  :         }
; 748  : 
; 749  :         /* Calculate how far past begin time this record's time is */
; 750  :         if (timeval_subtract( &beg_tim, pTV, &dif_tim ) < 0)

  00075	4c 8d 44 24 20	 lea	 r8, QWORD PTR dif_tim$1[rsp]
  0007a	48 8b 54 24 40	 mov	 rdx, QWORD PTR pTV$[rsp]
  0007f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:beg_tim
  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_timeval_subtract
  0008c	85 c0		 test	 eax, eax
  0008e	7d 04		 jge	 SHORT $LN5@is_time_wa

; 751  :             return false; // (we haven't reached begin time yet)

  00090	32 c0		 xor	 al, al
  00092	eb 2d		 jmp	 SHORT $LN1@is_time_wa
$LN5@is_time_wa:

; 752  : 
; 753  :         past_beg = ((U64)dif_tim.tv_sec * 1000000) + dif_tim.tv_usec;

  00094	48 63 44 24 20	 movsxd	 rax, DWORD PTR dif_tim$1[rsp]
  00099	48 69 c0 40 42
	0f 00		 imul	 rax, rax, 1000000	; 000f4240H
  000a0	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR dif_tim$1[rsp+4]
  000a5	48 03 c1	 add	 rax, rcx
  000a8	48 89 44 24 28	 mov	 QWORD PTR past_beg$2[rsp], rax

; 754  : 
; 755  :         /* Not interested if outside of specified range */
; 756  :         if (past_beg > max_past)

  000ad	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?max_past@?2??is_time_wanted@@9@9
  000b4	48 39 44 24 28	 cmp	 QWORD PTR past_beg$2[rsp], rax
  000b9	76 04		 jbe	 SHORT $LN6@is_time_wa

; 757  :             return false;

  000bb	32 c0		 xor	 al, al
  000bd	eb 02		 jmp	 SHORT $LN1@is_time_wa
$LN6@is_time_wa:
$LN2@is_time_wa:

; 758  :     }
; 759  : 
; 760  :     return true;

  000bf	b0 01		 mov	 al, 1
$LN1@is_time_wa:

; 761  : }

  000c1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c5	c3		 ret	 0
is_time_wanted ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv70 = 0
tv72 = 4
tv77 = 8
cpu$ = 32
is_cpu_wanted PROC

; 717  : {

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00004	48 83 ec 18	 sub	 rsp, 24

; 718  :     return (0

  00008	33 c0		 xor	 eax, eax
  0000a	85 c0		 test	 eax, eax
  0000c	75 3f		 jne	 SHORT $LN3@is_cpu_wan
  0000e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR cpu_map, 0
  00016	74 35		 je	 SHORT $LN3@is_cpu_wan
  00018	0f b6 44 24 20	 movzx	 eax, BYTE PTR cpu$[rsp]
  0001d	b9 01 00 00 00	 mov	 ecx, 1
  00022	48 89 4c 24 08	 mov	 QWORD PTR tv77[rsp], rcx
  00027	0f b6 c8	 movzx	 ecx, al
  0002a	48 8b 44 24 08	 mov	 rax, QWORD PTR tv77[rsp]
  0002f	48 d3 e0	 shl	 rax, cl
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR cpu_map
  00039	48 23 c8	 and	 rcx, rax
  0003c	48 8b c1	 mov	 rax, rcx
  0003f	48 85 c0	 test	 rax, rax
  00042	75 09		 jne	 SHORT $LN3@is_cpu_wan
  00044	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv70[rsp], 0
  0004b	eb 07		 jmp	 SHORT $LN4@is_cpu_wan
$LN3@is_cpu_wan:
  0004d	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv70[rsp], 1
$LN4@is_cpu_wan:
  00054	83 3c 24 00	 cmp	 DWORD PTR tv70[rsp], 0
  00058	75 0a		 jne	 SHORT $LN5@is_cpu_wan
  0005a	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
  00062	eb 08		 jmp	 SHORT $LN6@is_cpu_wan
$LN5@is_cpu_wan:
  00064	c7 44 24 04 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
$LN6@is_cpu_wan:
  0006c	0f b6 44 24 04	 movzx	 eax, BYTE PTR tv72[rsp]

; 719  :         || cpu_map == 0                 // (all CPUs)
; 720  :         || cpu_map & CPU_BIT( cpu )     // (this CPU)
; 721  :     );
; 722  : }

  00071	48 83 c4 18	 add	 rsp, 24
  00075	c3		 ret	 0
is_cpu_wanted ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
i$ = 0
msgnum$ = 32
is_msgnum_wanted PROC

; 700  : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 18	 sub	 rsp, 24

; 701  :     int i;
; 702  : 
; 703  :     if (!nMsgMOPT)          // If not filtering by message number

  00008	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR nMsgMOPT, 0
  0000f	75 04		 jne	 SHORT $LN5@is_msgnum_

; 704  :         return true;        // Then all messages are wanted

  00011	b0 01		 mov	 al, 1
  00013	eb 3c		 jmp	 SHORT $LN1@is_msgnum_
$LN5@is_msgnum_:

; 705  : 
; 706  :     for (i=0; i < nMsgMOPT; ++i)

  00015	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
  0001c	eb 08		 jmp	 SHORT $LN4@is_msgnum_
$LN2@is_msgnum_:
  0001e	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00021	ff c0		 inc	 eax
  00023	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@is_msgnum_:
  00026	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR nMsgMOPT
  0002c	39 04 24	 cmp	 DWORD PTR i$[rsp], eax
  0002f	7d 1e		 jge	 SHORT $LN3@is_msgnum_

; 707  :         if (msgnum == (int)pMsgMOPT[i].opt1)

  00031	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00035	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00039	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR pMsgMOPT
  00040	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00043	39 44 24 20	 cmp	 DWORD PTR msgnum$[rsp], eax
  00047	75 04		 jne	 SHORT $LN6@is_msgnum_

; 708  :             return true;

  00049	b0 01		 mov	 al, 1
  0004b	eb 04		 jmp	 SHORT $LN1@is_msgnum_
$LN6@is_msgnum_:
  0004d	eb cf		 jmp	 SHORT $LN2@is_msgnum_
$LN3@is_msgnum_:

; 709  : 
; 710  :     return false;           // It's not one they're interested in

  0004f	32 c0		 xor	 al, al
$LN1@is_msgnum_:

; 711  : }

  00051	48 83 c4 18	 add	 rsp, 24
  00055	c3		 ret	 0
is_msgnum_wanted ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv66 = 0
tv68 = 4
is_recnum_wanted PROC

; 692  : {

  00000	48 83 ec 18	 sub	 rsp, 24

; 693  :     return (recnum >= fromrec && recnum <= torec);

  00004	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR fromrec
  0000b	48 39 05 00 00
	00 00		 cmp	 QWORD PTR recnum, rax
  00012	72 19		 jb	 SHORT $LN3@is_recnum_
  00014	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR torec
  0001b	48 39 05 00 00
	00 00		 cmp	 QWORD PTR recnum, rax
  00022	77 09		 ja	 SHORT $LN3@is_recnum_
  00024	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv66[rsp], 1
  0002b	eb 07		 jmp	 SHORT $LN4@is_recnum_
$LN3@is_recnum_:
  0002d	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv66[rsp], 0
$LN4@is_recnum_:
  00034	83 3c 24 00	 cmp	 DWORD PTR tv66[rsp], 0
  00038	75 0a		 jne	 SHORT $LN5@is_recnum_
  0003a	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
  00042	eb 08		 jmp	 SHORT $LN6@is_recnum_
$LN5@is_recnum_:
  00044	c7 44 24 04 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
$LN6@is_recnum_:
  0004c	0f b6 44 24 04	 movzx	 eax, BYTE PTR tv68[rsp]

; 694  : }

  00051	48 83 c4 18	 add	 rsp, 24
  00055	c3		 ret	 0
is_recnum_wanted ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
arch$ = 32
tv65 = 36
tv79 = 40
addr$ = 48
p$1 = 56
psw$ = 80
qw$ = 88
arch_mode$ = 96
tf_store_psw PROC

; 653  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 654  :     BYTE*  addr;
; 655  :     int    arch;
; 656  : 
; 657  :     addr = (BYTE*) qw;

  00013	48 8b 44 24 58	 mov	 rax, QWORD PTR qw$[rsp]
  00018	48 89 44 24 30	 mov	 QWORD PTR addr$[rsp], rax

; 658  : 
; 659  :     switch (arch_mode)

  0001d	0f b6 44 24 60	 movzx	 eax, BYTE PTR arch_mode$[rsp]
  00022	88 44 24 24	 mov	 BYTE PTR tv65[rsp], al
  00026	80 7c 24 24 00	 cmp	 BYTE PTR tv65[rsp], 0
  0002b	74 10		 je	 SHORT $LN7@tf_store_p
  0002d	80 7c 24 24 01	 cmp	 BYTE PTR tv65[rsp], 1
  00032	74 13		 je	 SHORT $LN8@tf_store_p
  00034	80 7c 24 24 02	 cmp	 BYTE PTR tv65[rsp], 2
  00039	74 16		 je	 SHORT $LN9@tf_store_p
  0003b	eb 1e		 jmp	 SHORT $LN10@tf_store_p
$LN7@tf_store_p:

; 660  :     {
; 661  : #if defined(     _370 )
; 662  :         case ARCH_370_IDX: arch = 370; break;

  0003d	c7 44 24 20 72
	01 00 00	 mov	 DWORD PTR arch$[rsp], 370 ; 00000172H
  00045	eb 2b		 jmp	 SHORT $LN2@tf_store_p
$LN8@tf_store_p:

; 663  : #endif
; 664  : #if defined(     _390 )
; 665  :         case ARCH_390_IDX: arch = 390; break;

  00047	c7 44 24 20 86
	01 00 00	 mov	 DWORD PTR arch$[rsp], 390 ; 00000186H
  0004f	eb 21		 jmp	 SHORT $LN2@tf_store_p
$LN9@tf_store_p:

; 666  : #endif
; 667  : #if defined(     _900 )
; 668  :         case ARCH_900_IDX: arch = 900; break;

  00051	c7 44 24 20 84
	03 00 00	 mov	 DWORD PTR arch$[rsp], 900 ; 00000384H
  00059	eb 17		 jmp	 SHORT $LN2@tf_store_p
$LN10@tf_store_p:
$LN6@tf_store_p:

; 669  : #endif
; 670  :         default: CRASH(); UNREACHABLE_CODE( return );

  0005b	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR p$1[rsp], 0
  00064	48 8b 44 24 38	 mov	 rax, QWORD PTR p$1[rsp]
  00069	c6 00 00	 mov	 BYTE PTR [rax], 0
  0006c	33 c0		 xor	 eax, eax
  0006e	85 c0		 test	 eax, eax
  00070	75 e9		 jne	 SHORT $LN6@tf_store_p
$LN2@tf_store_p:

; 671  :     }
; 672  : 
; 673  :     if (arch == 370)

  00072	81 7c 24 20 72
	01 00 00	 cmp	 DWORD PTR arch$[rsp], 370 ; 00000172H
  0007a	75 58		 jne	 SHORT $LN11@tf_store_p

; 674  :         STORE_DW( addr + 0, do_make_psw64( psw, psw->ilc, arch, !ECMODE( psw )));

  0007c	48 8b 44 24 50	 mov	 rax, QWORD PTR psw$[rsp]
  00081	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00085	83 e0 08	 and	 eax, 8
  00088	85 c0		 test	 eax, eax
  0008a	75 0a		 jne	 SHORT $LN15@tf_store_p
  0008c	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv79[rsp], 1
  00094	eb 08		 jmp	 SHORT $LN16@tf_store_p
$LN15@tf_store_p:
  00096	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv79[rsp], 0
$LN16@tf_store_p:
  0009e	44 0f b6 4c 24
	28		 movzx	 r9d, BYTE PTR tv79[rsp]
  000a4	44 8b 44 24 20	 mov	 r8d, DWORD PTR arch$[rsp]
  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR psw$[rsp]
  000ae	0f b6 50 22	 movzx	 edx, BYTE PTR [rax+34]
  000b2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR psw$[rsp]
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_do_make_psw64
  000bd	48 8b c8	 mov	 rcx, rax
  000c0	e8 00 00 00 00	 call	 _byteswap_uint64
  000c5	48 8b d0	 mov	 rdx, rax
  000c8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR addr$[rsp]
  000cd	e8 00 00 00 00	 call	 store_dw_noswap
  000d2	eb 31		 jmp	 SHORT $LN12@tf_store_p
$LN11@tf_store_p:

; 675  :     else
; 676  :         STORE_DW( addr + 0, do_make_psw64( psw, psw->ilc, arch, false ));

  000d4	45 33 c9	 xor	 r9d, r9d
  000d7	44 8b 44 24 20	 mov	 r8d, DWORD PTR arch$[rsp]
  000dc	48 8b 44 24 50	 mov	 rax, QWORD PTR psw$[rsp]
  000e1	0f b6 50 22	 movzx	 edx, BYTE PTR [rax+34]
  000e5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR psw$[rsp]
  000ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_do_make_psw64
  000f0	48 8b c8	 mov	 rcx, rax
  000f3	e8 00 00 00 00	 call	 _byteswap_uint64
  000f8	48 8b d0	 mov	 rdx, rax
  000fb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR addr$[rsp]
  00100	e8 00 00 00 00	 call	 store_dw_noswap
$LN12@tf_store_p:

; 677  : 
; 678  :     if (arch == 900)

  00105	81 7c 24 20 84
	03 00 00	 cmp	 DWORD PTR arch$[rsp], 900 ; 00000384H
  0010d	75 1f		 jne	 SHORT $LN13@tf_store_p

; 679  :         STORE_DW( addr + 8, psw->IA_G );

  0010f	48 8b 44 24 50	 mov	 rax, QWORD PTR psw$[rsp]
  00114	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00118	e8 00 00 00 00	 call	 _byteswap_uint64
  0011d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR addr$[rsp]
  00122	48 83 c1 08	 add	 rcx, 8
  00126	48 8b d0	 mov	 rdx, rax
  00129	e8 00 00 00 00	 call	 store_dw_noswap
$LN13@tf_store_p:
$LN14@tf_store_p:

; 680  : }

  0012e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00132	c3		 ret	 0
tf_store_psw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
cpnn$ = 0
cpuad$ = 32
ptyp_str PROC

; 644  : {

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00004	48 83 ec 18	 sub	 rsp, 24

; 645  :     const char* cpnn = ptyp_strs[ cpuad ];

  00008	0f b6 44 24 20	 movzx	 eax, BYTE PTR cpuad$[rsp]
  0000d	48 6b c0 05	 imul	 rax, rax, 5
  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:ptyp_strs
  00018	48 03 c8	 add	 rcx, rax
  0001b	48 8b c1	 mov	 rax, rcx
  0001e	48 89 04 24	 mov	 QWORD PTR cpnn$[rsp], rax

; 646  :     return cpnn;

  00022	48 8b 04 24	 mov	 rax, QWORD PTR cpnn$[rsp]

; 647  : }

  00026	48 83 c4 18	 add	 rsp, 24
  0002a	c3		 ret	 0
ptyp_str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv65 = 0
p$1 = 8
cpuad$ = 32
msgnum$ = 40
all_recs_ptr PROC

; 547  : {

  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 548  :     switch (msgnum)

  0000e	0f b7 44 24 28	 movzx	 eax, WORD PTR msgnum$[rsp]
  00013	89 04 24	 mov	 DWORD PTR tv65[rsp], eax
  00016	81 3c 24 20 03
	00 00		 cmp	 DWORD PTR tv65[rsp], 800 ; 00000320H
  0001d	7f 41		 jg	 SHORT $LN82@all_recs_p
  0001f	81 3c 24 20 03
	00 00		 cmp	 DWORD PTR tv65[rsp], 800 ; 00000320H
  00026	0f 84 f4 00 00
	00		 je	 $LN7@all_recs_p
  0002c	8b 04 24	 mov	 eax, DWORD PTR tv65[rsp]
  0002f	2d a7 01 00 00	 sub	 eax, 423		; 000001a7H
  00034	89 04 24	 mov	 DWORD PTR tv65[rsp], eax
  00037	83 3c 24 61	 cmp	 DWORD PTR tv65[rsp], 97	; 00000061H
  0003b	0f 87 eb 09 00
	00		 ja	 $LN80@all_recs_p
  00041	48 63 04 24	 movsxd	 rax, DWORD PTR tv65[rsp]
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0004c	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN90@all_recs_p[rcx+rax]
  00054	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN91@all_recs_p[rcx+rax*4]
  0005b	48 03 c1	 add	 rax, rcx
  0005e	ff e0		 jmp	 rax
$LN82@all_recs_p:
  00060	81 3c 24 14 05
	00 00		 cmp	 DWORD PTR tv65[rsp], 1300 ; 00000514H
  00067	7f 41		 jg	 SHORT $LN83@all_recs_p
  00069	81 3c 24 14 05
	00 00		 cmp	 DWORD PTR tv65[rsp], 1300 ; 00000514H
  00070	0f 84 a2 06 00
	00		 je	 $LN55@all_recs_p
  00076	8b 04 24	 mov	 eax, DWORD PTR tv65[rsp]
  00079	2d 21 03 00 00	 sub	 eax, 801		; 00000321H
  0007e	89 04 24	 mov	 DWORD PTR tv65[rsp], eax
  00081	83 3c 24 2d	 cmp	 DWORD PTR tv65[rsp], 45	; 0000002dH
  00085	0f 87 a1 09 00
	00		 ja	 $LN80@all_recs_p
  0008b	48 63 04 24	 movsxd	 rax, DWORD PTR tv65[rsp]
  0008f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00096	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN88@all_recs_p[rcx+rax]
  0009e	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN89@all_recs_p[rcx+rax*4]
  000a5	48 03 c1	 add	 rax, rcx
  000a8	ff e0		 jmp	 rax
$LN83@all_recs_p:
  000aa	81 3c 24 dd 08
	00 00		 cmp	 DWORD PTR tv65[rsp], 2269 ; 000008ddH
  000b1	7f 39		 jg	 SHORT $LN84@all_recs_p
  000b3	81 3c 24 dd 08
	00 00		 cmp	 DWORD PTR tv65[rsp], 2269 ; 000008ddH
  000ba	0f 84 58 02 00
	00		 je	 $LN23@all_recs_p
  000c0	8b 04 24	 mov	 eax, DWORD PTR tv65[rsp]
  000c3	2d 15 05 00 00	 sub	 eax, 1301		; 00000515H
  000c8	89 04 24	 mov	 DWORD PTR tv65[rsp], eax
  000cb	83 3c 24 23	 cmp	 DWORD PTR tv65[rsp], 35	; 00000023H
  000cf	0f 87 57 09 00
	00		 ja	 $LN80@all_recs_p
  000d5	48 63 04 24	 movsxd	 rax, DWORD PTR tv65[rsp]
  000d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  000e0	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN87@all_recs_p[rcx+rax*4]
  000e7	48 03 c1	 add	 rax, rcx
  000ea	ff e0		 jmp	 rax
$LN84@all_recs_p:
  000ec	8b 04 24	 mov	 eax, DWORD PTR tv65[rsp]
  000ef	2d de 08 00 00	 sub	 eax, 2270		; 000008deH
  000f4	89 04 24	 mov	 DWORD PTR tv65[rsp], eax
  000f7	83 3c 24 38	 cmp	 DWORD PTR tv65[rsp], 56	; 00000038H
  000fb	0f 87 2b 09 00
	00		 ja	 $LN80@all_recs_p
  00101	48 63 04 24	 movsxd	 rax, DWORD PTR tv65[rsp]
  00105	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0010c	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN85@all_recs_p[rcx+rax]
  00114	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN86@all_recs_p[rcx+rax*4]
  0011b	48 03 c1	 add	 rax, rcx
  0011e	ff e0		 jmp	 rax
$LN7@all_recs_p:

; 549  :     {
; 550  :     // Instruction tracing...
; 551  : 
; 552  :     case  800: return &all_recs[ cpuad ].tf00800;

  00120	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  00125	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  0012c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  00133	48 03 c8	 add	 rcx, rax
  00136	48 8b c1	 mov	 rax, rcx
  00139	e9 05 09 00 00	 jmp	 $LN1@all_recs_p
$LN8@all_recs_p:

; 553  :     case  801: return &all_recs[ cpuad ].tf00801;

  0013e	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  00143	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  0014a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  00151	48 8d 44 01 48	 lea	 rax, QWORD PTR [rcx+rax+72]
  00156	e9 e8 08 00 00	 jmp	 $LN1@all_recs_p
$LN9@all_recs_p:

; 554  :     case  802: return &all_recs[ cpuad ].tf00802;

  0015b	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  00160	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00167	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0016e	48 8d 44 01 70	 lea	 rax, QWORD PTR [rcx+rax+112]
  00173	e9 cb 08 00 00	 jmp	 $LN1@all_recs_p
$LN10@all_recs_p:

; 555  :     case  803: return &all_recs[ cpuad ].tf00803;

  00178	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0017d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00184	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0018b	48 8d 84 01 98
	00 00 00	 lea	 rax, QWORD PTR [rcx+rax+152]
  00193	e9 ab 08 00 00	 jmp	 $LN1@all_recs_p
$LN11@all_recs_p:

; 556  :     case  804: return &all_recs[ cpuad ].tf00804;

  00198	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0019d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  001a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  001ab	48 8d 84 01 c0
	00 00 00	 lea	 rax, QWORD PTR [rcx+rax+192]
  001b3	e9 8b 08 00 00	 jmp	 $LN1@all_recs_p
$LN12@all_recs_p:

; 557  :     case  806: return &all_recs[ cpuad ].tf00806;

  001b8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  001bd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  001c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  001cb	48 8d 84 01 e8
	00 00 00	 lea	 rax, QWORD PTR [rcx+rax+232]
  001d3	e9 6b 08 00 00	 jmp	 $LN1@all_recs_p
$LN13@all_recs_p:

; 558  :     case  807: return &all_recs[ cpuad ].tf00807;

  001d8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  001dd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  001e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  001eb	48 8d 84 01 10
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax+272]
  001f3	e9 4b 08 00 00	 jmp	 $LN1@all_recs_p
$LN14@all_recs_p:

; 559  :     case  808: return &all_recs[ cpuad ].tf00808;

  001f8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  001fd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00204	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0020b	48 8d 84 01 40
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax+320]
  00213	e9 2b 08 00 00	 jmp	 $LN1@all_recs_p
$LN15@all_recs_p:

; 560  :     case  809: return &all_recs[ cpuad ].tf00809;

  00218	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0021d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00224	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0022b	48 8d 84 01 68
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax+360]
  00233	e9 0b 08 00 00	 jmp	 $LN1@all_recs_p
$LN16@all_recs_p:

; 561  :     case  811: return &all_recs[ cpuad ].tf00811;

  00238	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0023d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00244	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0024b	48 8d 84 01 90
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax+400]
  00253	e9 eb 07 00 00	 jmp	 $LN1@all_recs_p
$LN17@all_recs_p:

; 562  :     case  812: return &all_recs[ cpuad ].tf00812;

  00258	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0025d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00264	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0026b	48 8d 84 01 b8
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax+440]
  00273	e9 cb 07 00 00	 jmp	 $LN1@all_recs_p
$LN18@all_recs_p:

; 563  :     case  814: return &all_recs[ cpuad ].tf00814;

  00278	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0027d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00284	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0028b	48 8d 84 01 e0
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax+480]
  00293	e9 ab 07 00 00	 jmp	 $LN1@all_recs_p
$LN19@all_recs_p:

; 564  :     case  840: return &all_recs[ cpuad ].tf00840;

  00298	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0029d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  002a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  002ab	48 8d 84 01 10
	02 00 00	 lea	 rax, QWORD PTR [rcx+rax+528]
  002b3	e9 8b 07 00 00	 jmp	 $LN1@all_recs_p
$LN20@all_recs_p:

; 565  :     case  844: return &all_recs[ cpuad ].tf00844;

  002b8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  002bd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  002c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  002cb	48 8d 84 01 38
	02 00 00	 lea	 rax, QWORD PTR [rcx+rax+568]
  002d3	e9 6b 07 00 00	 jmp	 $LN1@all_recs_p
$LN21@all_recs_p:

; 566  :     case  845: return &all_recs[ cpuad ].tf00845;

  002d8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  002dd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  002e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  002eb	48 8d 84 01 60
	02 00 00	 lea	 rax, QWORD PTR [rcx+rax+608]
  002f3	e9 4b 07 00 00	 jmp	 $LN1@all_recs_p
$LN22@all_recs_p:

; 567  :     case  846: return &all_recs[ cpuad ].tf00846;

  002f8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  002fd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00304	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0030b	48 8d 84 01 88
	02 00 00	 lea	 rax, QWORD PTR [rcx+rax+648]
  00313	e9 2b 07 00 00	 jmp	 $LN1@all_recs_p
$LN23@all_recs_p:

; 568  : 
; 569  :     case 2269: return &all_recs[ cpuad ].tf02269;

  00318	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0031d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00324	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0032b	48 8d 84 01 a8
	02 00 00	 lea	 rax, QWORD PTR [rcx+rax+680]
  00333	e9 0b 07 00 00	 jmp	 $LN1@all_recs_p
$LN24@all_recs_p:

; 570  :     case 2270: return &all_recs[ cpuad ].tf02270;

  00338	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0033d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00344	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0034b	48 8d 84 01 48
	03 00 00	 lea	 rax, QWORD PTR [rcx+rax+840]
  00353	e9 eb 06 00 00	 jmp	 $LN1@all_recs_p
$LN25@all_recs_p:

; 571  :     case 2271: return &all_recs[ cpuad ].tf02271;

  00358	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0035d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00364	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0036b	48 8d 84 01 e8
	03 00 00	 lea	 rax, QWORD PTR [rcx+rax+1000]
  00373	e9 cb 06 00 00	 jmp	 $LN1@all_recs_p
$LN26@all_recs_p:

; 572  :     case 2272: return &all_recs[ cpuad ].tf02272;

  00378	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0037d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00384	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0038b	48 8d 84 01 80
	04 00 00	 lea	 rax, QWORD PTR [rcx+rax+1152]
  00393	e9 ab 06 00 00	 jmp	 $LN1@all_recs_p
$LN27@all_recs_p:

; 573  :     case 2276: return &all_recs[ cpuad ].tf02276;

  00398	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0039d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  003a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  003ab	48 8d 84 01 d8
	04 00 00	 lea	 rax, QWORD PTR [rcx+rax+1240]
  003b3	e9 8b 06 00 00	 jmp	 $LN1@all_recs_p
$LN28@all_recs_p:

; 574  :     case 2324: return &all_recs[ cpuad ].tf02324;

  003b8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  003bd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  003c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  003cb	48 8d 84 01 f8
	04 00 00	 lea	 rax, QWORD PTR [rcx+rax+1272]
  003d3	e9 6b 06 00 00	 jmp	 $LN1@all_recs_p
$LN29@all_recs_p:

; 575  :     case 2326: return &all_recs[ cpuad ].tf02326;

  003d8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  003dd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  003e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  003eb	48 8d 84 01 48
	05 00 00	 lea	 rax, QWORD PTR [rcx+rax+1352]
  003f3	e9 4b 06 00 00	 jmp	 $LN1@all_recs_p
$LN30@all_recs_p:

; 576  : 
; 577  :     // Device tracing...
; 578  : 
; 579  :     case  423: return &all_recs[ cpuad ].tf00423;

  003f8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  003fd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00404	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0040b	48 8d 84 01 b8
	05 00 00	 lea	 rax, QWORD PTR [rcx+rax+1464]
  00413	e9 2b 06 00 00	 jmp	 $LN1@all_recs_p
$LN31@all_recs_p:

; 580  :     case  424: return &all_recs[ cpuad ].tf00424;

  00418	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0041d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00424	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0042b	48 8d 84 01 00
	07 00 00	 lea	 rax, QWORD PTR [rcx+rax+1792]
  00433	e9 0b 06 00 00	 jmp	 $LN1@all_recs_p
$LN32@all_recs_p:

; 581  :     case  425: return &all_recs[ cpuad ].tf00425;

  00438	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0043d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00444	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0044b	48 8d 84 01 20
	08 00 00	 lea	 rax, QWORD PTR [rcx+rax+2080]
  00453	e9 eb 05 00 00	 jmp	 $LN1@all_recs_p
$LN33@all_recs_p:

; 582  :     case  426: return &all_recs[ cpuad ].tf00426;

  00458	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0045d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00464	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0046b	48 8d 84 01 40
	09 00 00	 lea	 rax, QWORD PTR [rcx+rax+2368]
  00473	e9 cb 05 00 00	 jmp	 $LN1@all_recs_p
$LN34@all_recs_p:

; 583  :     case  427: return &all_recs[ cpuad ].tf00427;

  00478	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0047d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00484	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0048b	48 8d 84 01 60
	0a 00 00	 lea	 rax, QWORD PTR [rcx+rax+2656]
  00493	e9 ab 05 00 00	 jmp	 $LN1@all_recs_p
$LN35@all_recs_p:

; 584  :     case  428: return &all_recs[ cpuad ].tf00428;

  00498	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0049d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  004a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  004ab	48 8d 84 01 80
	0b 00 00	 lea	 rax, QWORD PTR [rcx+rax+2944]
  004b3	e9 8b 05 00 00	 jmp	 $LN1@all_recs_p
$LN36@all_recs_p:

; 585  :     case  429: return &all_recs[ cpuad ].tf00429;

  004b8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  004bd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  004c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  004cb	48 8d 84 01 a0
	0c 00 00	 lea	 rax, QWORD PTR [rcx+rax+3232]
  004d3	e9 6b 05 00 00	 jmp	 $LN1@all_recs_p
$LN37@all_recs_p:

; 586  :     case  430: return &all_recs[ cpuad ].tf00430;

  004d8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  004dd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  004e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  004eb	48 8d 84 01 d0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3536]
  004f3	e9 4b 05 00 00	 jmp	 $LN1@all_recs_p
$LN38@all_recs_p:

; 587  :     case  431: return &all_recs[ cpuad ].tf00431;

  004f8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  004fd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00504	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0050b	48 8d 84 01 f8
	0e 00 00	 lea	 rax, QWORD PTR [rcx+rax+3832]
  00513	e9 2b 05 00 00	 jmp	 $LN1@all_recs_p
$LN39@all_recs_p:

; 588  :     case  432: return &all_recs[ cpuad ].tf00432;

  00518	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0051d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00524	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0052b	48 8d 84 01 18
	10 00 00	 lea	 rax, QWORD PTR [rcx+rax+4120]
  00533	e9 0b 05 00 00	 jmp	 $LN1@all_recs_p
$LN40@all_recs_p:

; 589  :     case  433: return &all_recs[ cpuad ].tf00433;

  00538	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0053d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00544	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0054b	48 8d 84 01 38
	11 00 00	 lea	 rax, QWORD PTR [rcx+rax+4408]
  00553	e9 eb 04 00 00	 jmp	 $LN1@all_recs_p
$LN41@all_recs_p:

; 590  :     case  434: return &all_recs[ cpuad ].tf00434;

  00558	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0055d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00564	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0056b	48 8d 84 01 58
	12 00 00	 lea	 rax, QWORD PTR [rcx+rax+4696]
  00573	e9 cb 04 00 00	 jmp	 $LN1@all_recs_p
$LN42@all_recs_p:

; 591  :     case  435: return &all_recs[ cpuad ].tf00435;

  00578	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0057d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00584	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0058b	48 8d 84 01 78
	13 00 00	 lea	 rax, QWORD PTR [rcx+rax+4984]
  00593	e9 ab 04 00 00	 jmp	 $LN1@all_recs_p
$LN43@all_recs_p:

; 592  :     case  436: return &all_recs[ cpuad ].tf00436;

  00598	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0059d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  005a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  005ab	48 8d 84 01 a8
	14 00 00	 lea	 rax, QWORD PTR [rcx+rax+5288]
  005b3	e9 8b 04 00 00	 jmp	 $LN1@all_recs_p
$LN44@all_recs_p:

; 593  :     case  437: return &all_recs[ cpuad ].tf00437;

  005b8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  005bd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  005c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  005cb	48 8d 84 01 c8
	15 00 00	 lea	 rax, QWORD PTR [rcx+rax+5576]
  005d3	e9 6b 04 00 00	 jmp	 $LN1@all_recs_p
$LN45@all_recs_p:

; 594  :     case  438: return &all_recs[ cpuad ].tf00438;

  005d8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  005dd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  005e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  005eb	48 8d 84 01 e8
	16 00 00	 lea	 rax, QWORD PTR [rcx+rax+5864]
  005f3	e9 4b 04 00 00	 jmp	 $LN1@all_recs_p
$LN46@all_recs_p:

; 595  :     case  439: return &all_recs[ cpuad ].tf00439;

  005f8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  005fd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00604	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0060b	48 8d 84 01 10
	18 00 00	 lea	 rax, QWORD PTR [rcx+rax+6160]
  00613	e9 2b 04 00 00	 jmp	 $LN1@all_recs_p
$LN47@all_recs_p:

; 596  :     case  440: return &all_recs[ cpuad ].tf00440;

  00618	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0061d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00624	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0062b	48 8d 84 01 38
	19 00 00	 lea	 rax, QWORD PTR [rcx+rax+6456]
  00633	e9 0b 04 00 00	 jmp	 $LN1@all_recs_p
$LN48@all_recs_p:

; 597  :     case  441: return &all_recs[ cpuad ].tf00441;

  00638	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0063d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00644	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0064b	48 8d 84 01 68
	1a 00 00	 lea	 rax, QWORD PTR [rcx+rax+6760]
  00653	e9 eb 03 00 00	 jmp	 $LN1@all_recs_p
$LN49@all_recs_p:

; 598  :     case  442: return &all_recs[ cpuad ].tf00442;

  00658	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0065d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00664	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0066b	48 8d 84 01 90
	1b 00 00	 lea	 rax, QWORD PTR [rcx+rax+7056]
  00673	e9 cb 03 00 00	 jmp	 $LN1@all_recs_p
$LN50@all_recs_p:

; 599  : 
; 600  :     case  516: return &all_recs[ cpuad ].tf00516;

  00678	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0067d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00684	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0068b	48 8d 84 01 b0
	1c 00 00	 lea	 rax, QWORD PTR [rcx+rax+7344]
  00693	e9 ab 03 00 00	 jmp	 $LN1@all_recs_p
$LN51@all_recs_p:

; 601  :     case  517: return &all_recs[ cpuad ].tf00517;

  00698	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0069d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  006a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  006ab	48 8d 84 01 d0
	1d 00 00	 lea	 rax, QWORD PTR [rcx+rax+7632]
  006b3	e9 8b 03 00 00	 jmp	 $LN1@all_recs_p
$LN52@all_recs_p:

; 602  :     case  518: return &all_recs[ cpuad ].tf00518;

  006b8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  006bd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  006c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  006cb	48 8d 84 01 f0
	1e 00 00	 lea	 rax, QWORD PTR [rcx+rax+7920]
  006d3	e9 6b 03 00 00	 jmp	 $LN1@all_recs_p
$LN53@all_recs_p:

; 603  :     case  519: return &all_recs[ cpuad ].tf00519;

  006d8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  006dd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  006e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  006eb	48 8d 84 01 10
	20 00 00	 lea	 rax, QWORD PTR [rcx+rax+8208]
  006f3	e9 4b 03 00 00	 jmp	 $LN1@all_recs_p
$LN54@all_recs_p:

; 604  :     case  520: return &all_recs[ cpuad ].tf00520;

  006f8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  006fd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00704	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0070b	48 8d 84 01 38
	21 00 00	 lea	 rax, QWORD PTR [rcx+rax+8504]
  00713	e9 2b 03 00 00	 jmp	 $LN1@all_recs_p
$LN55@all_recs_p:

; 605  : 
; 606  :     case 1300: return &all_recs[ cpuad ].tf01300;

  00718	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0071d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00724	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0072b	48 8d 84 01 58
	22 00 00	 lea	 rax, QWORD PTR [rcx+rax+8792]
  00733	e9 0b 03 00 00	 jmp	 $LN1@all_recs_p
$LN56@all_recs_p:

; 607  :     case 1301: return &all_recs[ cpuad ].tf01301;

  00738	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0073d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00744	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0074b	48 8d 84 01 78
	22 00 00	 lea	 rax, QWORD PTR [rcx+rax+8824]
  00753	e9 eb 02 00 00	 jmp	 $LN1@all_recs_p
$LN57@all_recs_p:

; 608  :     case 1304: return &all_recs[ cpuad ].tf01304;

  00758	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0075d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00764	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0076b	48 8d 84 01 b0
	22 00 00	 lea	 rax, QWORD PTR [rcx+rax+8880]
  00773	e9 cb 02 00 00	 jmp	 $LN1@all_recs_p
$LN58@all_recs_p:

; 609  :     case 1305: return &all_recs[ cpuad ].tf01305;

  00778	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0077d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00784	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0078b	48 8d 84 01 c8
	22 00 00	 lea	 rax, QWORD PTR [rcx+rax+8904]
  00793	e9 ab 02 00 00	 jmp	 $LN1@all_recs_p
$LN59@all_recs_p:

; 610  :     case 1306: return &all_recs[ cpuad ].tf01306;

  00798	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0079d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  007a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  007ab	48 8d 84 01 e0
	22 00 00	 lea	 rax, QWORD PTR [rcx+rax+8928]
  007b3	e9 8b 02 00 00	 jmp	 $LN1@all_recs_p
$LN60@all_recs_p:

; 611  :     case 1307: return &all_recs[ cpuad ].tf01307;

  007b8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  007bd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  007c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  007cb	48 8d 84 01 f8
	22 00 00	 lea	 rax, QWORD PTR [rcx+rax+8952]
  007d3	e9 6b 02 00 00	 jmp	 $LN1@all_recs_p
$LN61@all_recs_p:

; 612  :     case 1308: return &all_recs[ cpuad ].tf01308;

  007d8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  007dd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  007e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  007eb	48 8d 84 01 10
	23 00 00	 lea	 rax, QWORD PTR [rcx+rax+8976]
  007f3	e9 4b 02 00 00	 jmp	 $LN1@all_recs_p
$LN62@all_recs_p:

; 613  :     case 1309: return &all_recs[ cpuad ].tf01309;

  007f8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  007fd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00804	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0080b	48 8d 84 01 28
	23 00 00	 lea	 rax, QWORD PTR [rcx+rax+9000]
  00813	e9 2b 02 00 00	 jmp	 $LN1@all_recs_p
$LN63@all_recs_p:

; 614  :     case 1310: return &all_recs[ cpuad ].tf01310;

  00818	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0081d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00824	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0082b	48 8d 84 01 40
	23 00 00	 lea	 rax, QWORD PTR [rcx+rax+9024]
  00833	e9 0b 02 00 00	 jmp	 $LN1@all_recs_p
$LN64@all_recs_p:

; 615  :     case 1311: return &all_recs[ cpuad ].tf01311;

  00838	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0083d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00844	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0084b	48 8d 84 01 58
	23 00 00	 lea	 rax, QWORD PTR [rcx+rax+9048]
  00853	e9 eb 01 00 00	 jmp	 $LN1@all_recs_p
$LN65@all_recs_p:

; 616  :     case 1312: return &all_recs[ cpuad ].tf01312;

  00858	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0085d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00864	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0086b	48 8d 84 01 70
	23 00 00	 lea	 rax, QWORD PTR [rcx+rax+9072]
  00873	e9 cb 01 00 00	 jmp	 $LN1@all_recs_p
$LN66@all_recs_p:

; 617  :     case 1313: return &all_recs[ cpuad ].tf01313;

  00878	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0087d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00884	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0088b	48 8d 84 01 a0
	23 00 00	 lea	 rax, QWORD PTR [rcx+rax+9120]
  00893	e9 ab 01 00 00	 jmp	 $LN1@all_recs_p
$LN67@all_recs_p:

; 618  :     case 1315: return &all_recs[ cpuad ].tf01315;

  00898	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0089d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  008a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  008ab	48 8d 84 01 58
	24 00 00	 lea	 rax, QWORD PTR [rcx+rax+9304]
  008b3	e9 8b 01 00 00	 jmp	 $LN1@all_recs_p
$LN68@all_recs_p:

; 619  :     case 1316: return &all_recs[ cpuad ].tf01316;

  008b8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  008bd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  008c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  008cb	48 8d 84 01 90
	24 00 00	 lea	 rax, QWORD PTR [rcx+rax+9360]
  008d3	e9 6b 01 00 00	 jmp	 $LN1@all_recs_p
$LN69@all_recs_p:

; 620  :     case 1317: return &all_recs[ cpuad ].tf01317;

  008d8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  008dd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  008e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  008eb	48 8d 84 01 b0
	24 00 00	 lea	 rax, QWORD PTR [rcx+rax+9392]
  008f3	e9 4b 01 00 00	 jmp	 $LN1@all_recs_p
$LN70@all_recs_p:

; 621  :     case 1318: return &all_recs[ cpuad ].tf01318;

  008f8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  008fd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00904	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0090b	48 8d 84 01 d8
	24 00 00	 lea	 rax, QWORD PTR [rcx+rax+9432]
  00913	e9 2b 01 00 00	 jmp	 $LN1@all_recs_p
$LN71@all_recs_p:

; 622  :     case 1320: return &all_recs[ cpuad ].tf01320;

  00918	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0091d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00924	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0092b	48 8d 84 01 f8
	24 00 00	 lea	 rax, QWORD PTR [rcx+rax+9464]
  00933	e9 0b 01 00 00	 jmp	 $LN1@all_recs_p
$LN72@all_recs_p:

; 623  :     case 1321: return &all_recs[ cpuad ].tf01321;

  00938	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0093d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00944	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0094b	48 8d 84 01 10
	25 00 00	 lea	 rax, QWORD PTR [rcx+rax+9488]
  00953	e9 eb 00 00 00	 jmp	 $LN1@all_recs_p
$LN73@all_recs_p:

; 624  :     case 1329: return &all_recs[ cpuad ].tf01329;

  00958	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0095d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00964	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0096b	48 8d 84 01 28
	25 00 00	 lea	 rax, QWORD PTR [rcx+rax+9512]
  00973	e9 cb 00 00 00	 jmp	 $LN1@all_recs_p
$LN74@all_recs_p:

; 625  :     case 1330: return &all_recs[ cpuad ].tf01330;

  00978	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0097d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00984	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  0098b	48 8d 84 01 40
	25 00 00	 lea	 rax, QWORD PTR [rcx+rax+9536]
  00993	e9 ab 00 00 00	 jmp	 $LN1@all_recs_p
$LN75@all_recs_p:

; 626  :     case 1331: return &all_recs[ cpuad ].tf01331;

  00998	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  0099d	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  009a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  009ab	48 8d 84 01 58
	25 00 00	 lea	 rax, QWORD PTR [rcx+rax+9560]
  009b3	e9 8b 00 00 00	 jmp	 $LN1@all_recs_p
$LN76@all_recs_p:

; 627  :     case 1332: return &all_recs[ cpuad ].tf01332;

  009b8	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  009bd	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  009c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  009cb	48 8d 84 01 70
	25 00 00	 lea	 rax, QWORD PTR [rcx+rax+9584]
  009d3	eb 6e		 jmp	 SHORT $LN1@all_recs_p
$LN77@all_recs_p:

; 628  :     case 1333: return &all_recs[ cpuad ].tf01333;

  009d5	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  009da	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  009e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  009e8	48 8d 84 01 88
	25 00 00	 lea	 rax, QWORD PTR [rcx+rax+9608]
  009f0	eb 51		 jmp	 SHORT $LN1@all_recs_p
$LN78@all_recs_p:

; 629  :     case 1334: return &all_recs[ cpuad ].tf01334;

  009f2	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  009f7	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  009fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  00a05	48 8d 84 01 a8
	25 00 00	 lea	 rax, QWORD PTR [rcx+rax+9640]
  00a0d	eb 34		 jmp	 SHORT $LN1@all_recs_p
$LN79@all_recs_p:

; 630  :     case 1336: return &all_recs[ cpuad ].tf01336;

  00a0f	0f b7 44 24 20	 movzx	 eax, WORD PTR cpuad$[rsp]
  00a14	48 69 c0 04 26
	00 00		 imul	 rax, rax, 9732		; 00002604H
  00a1b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:all_recs
  00a22	48 8d 84 01 e0
	25 00 00	 lea	 rax, QWORD PTR [rcx+rax+9696]
  00a2a	eb 17		 jmp	 SHORT $LN1@all_recs_p
$LN80@all_recs_p:
$LN6@all_recs_p:

; 631  : 
; 632  :     default: CRASH(); UNREACHABLE_CODE( return NULL );

  00a2c	48 c7 44 24 08
	00 00 00 00	 mov	 QWORD PTR p$1[rsp], 0
  00a35	48 8b 44 24 08	 mov	 rax, QWORD PTR p$1[rsp]
  00a3a	c6 00 00	 mov	 BYTE PTR [rax], 0
  00a3d	33 c0		 xor	 eax, eax
  00a3f	85 c0		 test	 eax, eax
  00a41	75 e9		 jne	 SHORT $LN6@all_recs_p
$LN1@all_recs_p:
$LN81@all_recs_p:

; 633  :     }
; 634  : }

  00a43	48 83 c4 18	 add	 rsp, 24
  00a47	c3		 ret	 0
$LN91@all_recs_p:
  00a48	00 00 00 00	 DD	 $LN30@all_recs_p
  00a4c	00 00 00 00	 DD	 $LN31@all_recs_p
  00a50	00 00 00 00	 DD	 $LN32@all_recs_p
  00a54	00 00 00 00	 DD	 $LN33@all_recs_p
  00a58	00 00 00 00	 DD	 $LN34@all_recs_p
  00a5c	00 00 00 00	 DD	 $LN35@all_recs_p
  00a60	00 00 00 00	 DD	 $LN36@all_recs_p
  00a64	00 00 00 00	 DD	 $LN37@all_recs_p
  00a68	00 00 00 00	 DD	 $LN38@all_recs_p
  00a6c	00 00 00 00	 DD	 $LN39@all_recs_p
  00a70	00 00 00 00	 DD	 $LN40@all_recs_p
  00a74	00 00 00 00	 DD	 $LN41@all_recs_p
  00a78	00 00 00 00	 DD	 $LN42@all_recs_p
  00a7c	00 00 00 00	 DD	 $LN43@all_recs_p
  00a80	00 00 00 00	 DD	 $LN44@all_recs_p
  00a84	00 00 00 00	 DD	 $LN45@all_recs_p
  00a88	00 00 00 00	 DD	 $LN46@all_recs_p
  00a8c	00 00 00 00	 DD	 $LN47@all_recs_p
  00a90	00 00 00 00	 DD	 $LN48@all_recs_p
  00a94	00 00 00 00	 DD	 $LN49@all_recs_p
  00a98	00 00 00 00	 DD	 $LN50@all_recs_p
  00a9c	00 00 00 00	 DD	 $LN51@all_recs_p
  00aa0	00 00 00 00	 DD	 $LN52@all_recs_p
  00aa4	00 00 00 00	 DD	 $LN53@all_recs_p
  00aa8	00 00 00 00	 DD	 $LN54@all_recs_p
  00aac	00 00 00 00	 DD	 $LN80@all_recs_p
$LN90@all_recs_p:
  00ab0	00		 DB	 0
  00ab1	01		 DB	 1
  00ab2	02		 DB	 2
  00ab3	03		 DB	 3
  00ab4	04		 DB	 4
  00ab5	05		 DB	 5
  00ab6	06		 DB	 6
  00ab7	07		 DB	 7
  00ab8	08		 DB	 8
  00ab9	09		 DB	 9
  00aba	0a		 DB	 10
  00abb	0b		 DB	 11
  00abc	0c		 DB	 12
  00abd	0d		 DB	 13
  00abe	0e		 DB	 14
  00abf	0f		 DB	 15
  00ac0	10		 DB	 16
  00ac1	11		 DB	 17
  00ac2	12		 DB	 18
  00ac3	13		 DB	 19
  00ac4	19		 DB	 25
  00ac5	19		 DB	 25
  00ac6	19		 DB	 25
  00ac7	19		 DB	 25
  00ac8	19		 DB	 25
  00ac9	19		 DB	 25
  00aca	19		 DB	 25
  00acb	19		 DB	 25
  00acc	19		 DB	 25
  00acd	19		 DB	 25
  00ace	19		 DB	 25
  00acf	19		 DB	 25
  00ad0	19		 DB	 25
  00ad1	19		 DB	 25
  00ad2	19		 DB	 25
  00ad3	19		 DB	 25
  00ad4	19		 DB	 25
  00ad5	19		 DB	 25
  00ad6	19		 DB	 25
  00ad7	19		 DB	 25
  00ad8	19		 DB	 25
  00ad9	19		 DB	 25
  00ada	19		 DB	 25
  00adb	19		 DB	 25
  00adc	19		 DB	 25
  00add	19		 DB	 25
  00ade	19		 DB	 25
  00adf	19		 DB	 25
  00ae0	19		 DB	 25
  00ae1	19		 DB	 25
  00ae2	19		 DB	 25
  00ae3	19		 DB	 25
  00ae4	19		 DB	 25
  00ae5	19		 DB	 25
  00ae6	19		 DB	 25
  00ae7	19		 DB	 25
  00ae8	19		 DB	 25
  00ae9	19		 DB	 25
  00aea	19		 DB	 25
  00aeb	19		 DB	 25
  00aec	19		 DB	 25
  00aed	19		 DB	 25
  00aee	19		 DB	 25
  00aef	19		 DB	 25
  00af0	19		 DB	 25
  00af1	19		 DB	 25
  00af2	19		 DB	 25
  00af3	19		 DB	 25
  00af4	19		 DB	 25
  00af5	19		 DB	 25
  00af6	19		 DB	 25
  00af7	19		 DB	 25
  00af8	19		 DB	 25
  00af9	19		 DB	 25
  00afa	19		 DB	 25
  00afb	19		 DB	 25
  00afc	19		 DB	 25
  00afd	19		 DB	 25
  00afe	19		 DB	 25
  00aff	19		 DB	 25
  00b00	19		 DB	 25
  00b01	19		 DB	 25
  00b02	19		 DB	 25
  00b03	19		 DB	 25
  00b04	19		 DB	 25
  00b05	19		 DB	 25
  00b06	19		 DB	 25
  00b07	19		 DB	 25
  00b08	19		 DB	 25
  00b09	19		 DB	 25
  00b0a	19		 DB	 25
  00b0b	19		 DB	 25
  00b0c	19		 DB	 25
  00b0d	14		 DB	 20
  00b0e	15		 DB	 21
  00b0f	16		 DB	 22
  00b10	17		 DB	 23
  00b11	18		 DB	 24
  00b12	66 90		 npad	 2
$LN89@all_recs_p:
  00b14	00 00 00 00	 DD	 $LN8@all_recs_p
  00b18	00 00 00 00	 DD	 $LN9@all_recs_p
  00b1c	00 00 00 00	 DD	 $LN10@all_recs_p
  00b20	00 00 00 00	 DD	 $LN11@all_recs_p
  00b24	00 00 00 00	 DD	 $LN12@all_recs_p
  00b28	00 00 00 00	 DD	 $LN13@all_recs_p
  00b2c	00 00 00 00	 DD	 $LN14@all_recs_p
  00b30	00 00 00 00	 DD	 $LN15@all_recs_p
  00b34	00 00 00 00	 DD	 $LN16@all_recs_p
  00b38	00 00 00 00	 DD	 $LN17@all_recs_p
  00b3c	00 00 00 00	 DD	 $LN18@all_recs_p
  00b40	00 00 00 00	 DD	 $LN19@all_recs_p
  00b44	00 00 00 00	 DD	 $LN20@all_recs_p
  00b48	00 00 00 00	 DD	 $LN21@all_recs_p
  00b4c	00 00 00 00	 DD	 $LN22@all_recs_p
  00b50	00 00 00 00	 DD	 $LN80@all_recs_p
$LN88@all_recs_p:
  00b54	00		 DB	 0
  00b55	01		 DB	 1
  00b56	02		 DB	 2
  00b57	03		 DB	 3
  00b58	0f		 DB	 15
  00b59	04		 DB	 4
  00b5a	05		 DB	 5
  00b5b	06		 DB	 6
  00b5c	07		 DB	 7
  00b5d	0f		 DB	 15
  00b5e	08		 DB	 8
  00b5f	09		 DB	 9
  00b60	0f		 DB	 15
  00b61	0a		 DB	 10
  00b62	0f		 DB	 15
  00b63	0f		 DB	 15
  00b64	0f		 DB	 15
  00b65	0f		 DB	 15
  00b66	0f		 DB	 15
  00b67	0f		 DB	 15
  00b68	0f		 DB	 15
  00b69	0f		 DB	 15
  00b6a	0f		 DB	 15
  00b6b	0f		 DB	 15
  00b6c	0f		 DB	 15
  00b6d	0f		 DB	 15
  00b6e	0f		 DB	 15
  00b6f	0f		 DB	 15
  00b70	0f		 DB	 15
  00b71	0f		 DB	 15
  00b72	0f		 DB	 15
  00b73	0f		 DB	 15
  00b74	0f		 DB	 15
  00b75	0f		 DB	 15
  00b76	0f		 DB	 15
  00b77	0f		 DB	 15
  00b78	0f		 DB	 15
  00b79	0f		 DB	 15
  00b7a	0f		 DB	 15
  00b7b	0b		 DB	 11
  00b7c	0f		 DB	 15
  00b7d	0f		 DB	 15
  00b7e	0f		 DB	 15
  00b7f	0c		 DB	 12
  00b80	0d		 DB	 13
  00b81	0e		 DB	 14
  00b82	66 90		 npad	 2
$LN87@all_recs_p:
  00b84	00 00 00 00	 DD	 $LN56@all_recs_p
  00b88	00 00 00 00	 DD	 $LN80@all_recs_p
  00b8c	00 00 00 00	 DD	 $LN80@all_recs_p
  00b90	00 00 00 00	 DD	 $LN57@all_recs_p
  00b94	00 00 00 00	 DD	 $LN58@all_recs_p
  00b98	00 00 00 00	 DD	 $LN59@all_recs_p
  00b9c	00 00 00 00	 DD	 $LN60@all_recs_p
  00ba0	00 00 00 00	 DD	 $LN61@all_recs_p
  00ba4	00 00 00 00	 DD	 $LN62@all_recs_p
  00ba8	00 00 00 00	 DD	 $LN63@all_recs_p
  00bac	00 00 00 00	 DD	 $LN64@all_recs_p
  00bb0	00 00 00 00	 DD	 $LN65@all_recs_p
  00bb4	00 00 00 00	 DD	 $LN66@all_recs_p
  00bb8	00 00 00 00	 DD	 $LN80@all_recs_p
  00bbc	00 00 00 00	 DD	 $LN67@all_recs_p
  00bc0	00 00 00 00	 DD	 $LN68@all_recs_p
  00bc4	00 00 00 00	 DD	 $LN69@all_recs_p
  00bc8	00 00 00 00	 DD	 $LN70@all_recs_p
  00bcc	00 00 00 00	 DD	 $LN80@all_recs_p
  00bd0	00 00 00 00	 DD	 $LN71@all_recs_p
  00bd4	00 00 00 00	 DD	 $LN72@all_recs_p
  00bd8	00 00 00 00	 DD	 $LN80@all_recs_p
  00bdc	00 00 00 00	 DD	 $LN80@all_recs_p
  00be0	00 00 00 00	 DD	 $LN80@all_recs_p
  00be4	00 00 00 00	 DD	 $LN80@all_recs_p
  00be8	00 00 00 00	 DD	 $LN80@all_recs_p
  00bec	00 00 00 00	 DD	 $LN80@all_recs_p
  00bf0	00 00 00 00	 DD	 $LN80@all_recs_p
  00bf4	00 00 00 00	 DD	 $LN73@all_recs_p
  00bf8	00 00 00 00	 DD	 $LN74@all_recs_p
  00bfc	00 00 00 00	 DD	 $LN75@all_recs_p
  00c00	00 00 00 00	 DD	 $LN76@all_recs_p
  00c04	00 00 00 00	 DD	 $LN77@all_recs_p
  00c08	00 00 00 00	 DD	 $LN78@all_recs_p
  00c0c	00 00 00 00	 DD	 $LN80@all_recs_p
  00c10	00 00 00 00	 DD	 $LN79@all_recs_p
$LN86@all_recs_p:
  00c14	00 00 00 00	 DD	 $LN24@all_recs_p
  00c18	00 00 00 00	 DD	 $LN25@all_recs_p
  00c1c	00 00 00 00	 DD	 $LN26@all_recs_p
  00c20	00 00 00 00	 DD	 $LN27@all_recs_p
  00c24	00 00 00 00	 DD	 $LN28@all_recs_p
  00c28	00 00 00 00	 DD	 $LN29@all_recs_p
  00c2c	00 00 00 00	 DD	 $LN80@all_recs_p
$LN85@all_recs_p:
  00c30	00		 DB	 0
  00c31	01		 DB	 1
  00c32	02		 DB	 2
  00c33	06		 DB	 6
  00c34	06		 DB	 6
  00c35	06		 DB	 6
  00c36	03		 DB	 3
  00c37	06		 DB	 6
  00c38	06		 DB	 6
  00c39	06		 DB	 6
  00c3a	06		 DB	 6
  00c3b	06		 DB	 6
  00c3c	06		 DB	 6
  00c3d	06		 DB	 6
  00c3e	06		 DB	 6
  00c3f	06		 DB	 6
  00c40	06		 DB	 6
  00c41	06		 DB	 6
  00c42	06		 DB	 6
  00c43	06		 DB	 6
  00c44	06		 DB	 6
  00c45	06		 DB	 6
  00c46	06		 DB	 6
  00c47	06		 DB	 6
  00c48	06		 DB	 6
  00c49	06		 DB	 6
  00c4a	06		 DB	 6
  00c4b	06		 DB	 6
  00c4c	06		 DB	 6
  00c4d	06		 DB	 6
  00c4e	06		 DB	 6
  00c4f	06		 DB	 6
  00c50	06		 DB	 6
  00c51	06		 DB	 6
  00c52	06		 DB	 6
  00c53	06		 DB	 6
  00c54	06		 DB	 6
  00c55	06		 DB	 6
  00c56	06		 DB	 6
  00c57	06		 DB	 6
  00c58	06		 DB	 6
  00c59	06		 DB	 6
  00c5a	06		 DB	 6
  00c5b	06		 DB	 6
  00c5c	06		 DB	 6
  00c5d	06		 DB	 6
  00c5e	06		 DB	 6
  00c5f	06		 DB	 6
  00c60	06		 DB	 6
  00c61	06		 DB	 6
  00c62	06		 DB	 6
  00c63	06		 DB	 6
  00c64	06		 DB	 6
  00c65	06		 DB	 6
  00c66	04		 DB	 4
  00c67	06		 DB	 6
  00c68	05		 DB	 5
all_recs_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv65 = 0
p$1 = 8
msgnum$ = 32
recsize	PROC

; 454  : {

  00000	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  00005	48 83 ec 18	 sub	 rsp, 24

; 455  :     switch (msgnum)

  00009	0f b7 44 24 20	 movzx	 eax, WORD PTR msgnum$[rsp]
  0000e	89 04 24	 mov	 DWORD PTR tv65[rsp], eax
  00011	81 3c 24 20 03
	00 00		 cmp	 DWORD PTR tv65[rsp], 800 ; 00000320H
  00018	7f 41		 jg	 SHORT $LN82@recsize
  0001a	81 3c 24 20 03
	00 00		 cmp	 DWORD PTR tv65[rsp], 800 ; 00000320H
  00021	0f 84 f4 00 00
	00		 je	 $LN7@recsize
  00027	8b 04 24	 mov	 eax, DWORD PTR tv65[rsp]
  0002a	2d a7 01 00 00	 sub	 eax, 423		; 000001a7H
  0002f	89 04 24	 mov	 DWORD PTR tv65[rsp], eax
  00032	83 3c 24 61	 cmp	 DWORD PTR tv65[rsp], 97	; 00000061H
  00036	0f 87 8c 03 00
	00		 ja	 $LN80@recsize
  0003c	48 63 04 24	 movsxd	 rax, DWORD PTR tv65[rsp]
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00047	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN90@recsize[rcx+rax]
  0004f	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN91@recsize[rcx+rax*4]
  00056	48 03 c1	 add	 rax, rcx
  00059	ff e0		 jmp	 rax
$LN82@recsize:
  0005b	81 3c 24 14 05
	00 00		 cmp	 DWORD PTR tv65[rsp], 1300 ; 00000514H
  00062	7f 41		 jg	 SHORT $LN83@recsize
  00064	81 3c 24 14 05
	00 00		 cmp	 DWORD PTR tv65[rsp], 1300 ; 00000514H
  0006b	0f 84 8a 02 00
	00		 je	 $LN55@recsize
  00071	8b 04 24	 mov	 eax, DWORD PTR tv65[rsp]
  00074	2d 21 03 00 00	 sub	 eax, 801		; 00000321H
  00079	89 04 24	 mov	 DWORD PTR tv65[rsp], eax
  0007c	83 3c 24 2d	 cmp	 DWORD PTR tv65[rsp], 45	; 0000002dH
  00080	0f 87 42 03 00
	00		 ja	 $LN80@recsize
  00086	48 63 04 24	 movsxd	 rax, DWORD PTR tv65[rsp]
  0008a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00091	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN88@recsize[rcx+rax]
  00099	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN89@recsize[rcx+rax*4]
  000a0	48 03 c1	 add	 rax, rcx
  000a3	ff e0		 jmp	 rax
$LN83@recsize:
  000a5	81 3c 24 dd 08
	00 00		 cmp	 DWORD PTR tv65[rsp], 2269 ; 000008ddH
  000ac	7f 39		 jg	 SHORT $LN84@recsize
  000ae	81 3c 24 dd 08
	00 00		 cmp	 DWORD PTR tv65[rsp], 2269 ; 000008ddH
  000b5	0f 84 00 01 00
	00		 je	 $LN23@recsize
  000bb	8b 04 24	 mov	 eax, DWORD PTR tv65[rsp]
  000be	2d 15 05 00 00	 sub	 eax, 1301		; 00000515H
  000c3	89 04 24	 mov	 DWORD PTR tv65[rsp], eax
  000c6	83 3c 24 23	 cmp	 DWORD PTR tv65[rsp], 35	; 00000023H
  000ca	0f 87 f8 02 00
	00		 ja	 $LN80@recsize
  000d0	48 63 04 24	 movsxd	 rax, DWORD PTR tv65[rsp]
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  000db	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN87@recsize[rcx+rax*4]
  000e2	48 03 c1	 add	 rax, rcx
  000e5	ff e0		 jmp	 rax
$LN84@recsize:
  000e7	8b 04 24	 mov	 eax, DWORD PTR tv65[rsp]
  000ea	2d de 08 00 00	 sub	 eax, 2270		; 000008deH
  000ef	89 04 24	 mov	 DWORD PTR tv65[rsp], eax
  000f2	83 3c 24 38	 cmp	 DWORD PTR tv65[rsp], 56	; 00000038H
  000f6	0f 87 cc 02 00
	00		 ja	 $LN80@recsize
  000fc	48 63 04 24	 movsxd	 rax, DWORD PTR tv65[rsp]
  00100	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00107	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN85@recsize[rcx+rax]
  0010f	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN86@recsize[rcx+rax*4]
  00116	48 03 c1	 add	 rax, rcx
  00119	ff e0		 jmp	 rax
$LN7@recsize:

; 456  :     {
; 457  :     // Instruction tracing...
; 458  : 
; 459  :     case  800: return sizeof( TF00800 );

  0011b	b8 48 00 00 00	 mov	 eax, 72			; 00000048H
  00120	e9 ba 02 00 00	 jmp	 $LN1@recsize
$LN8@recsize:

; 460  :     case  801: return sizeof( TF00801 );

  00125	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  0012a	e9 b0 02 00 00	 jmp	 $LN1@recsize
$LN9@recsize:

; 461  :     case  802: return sizeof( TF00802 );

  0012f	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  00134	e9 a6 02 00 00	 jmp	 $LN1@recsize
$LN10@recsize:

; 462  :     case  803: return sizeof( TF00803 );

  00139	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  0013e	e9 9c 02 00 00	 jmp	 $LN1@recsize
$LN11@recsize:

; 463  :     case  804: return sizeof( TF00804 );

  00143	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  00148	e9 92 02 00 00	 jmp	 $LN1@recsize
$LN12@recsize:

; 464  :     case  806: return sizeof( TF00806 );

  0014d	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  00152	e9 88 02 00 00	 jmp	 $LN1@recsize
$LN13@recsize:

; 465  :     case  807: return sizeof( TF00807 );

  00157	b8 30 00 00 00	 mov	 eax, 48			; 00000030H
  0015c	e9 7e 02 00 00	 jmp	 $LN1@recsize
$LN14@recsize:

; 466  :     case  808: return sizeof( TF00808 );

  00161	b8 18 00 00 00	 mov	 eax, 24
  00166	e9 74 02 00 00	 jmp	 $LN1@recsize
$LN15@recsize:

; 467  :     case  809: return sizeof( TF00809 );

  0016b	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00170	e9 6a 02 00 00	 jmp	 $LN1@recsize
$LN16@recsize:

; 468  :     case  811: return sizeof( TF00811 );

  00175	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0017a	e9 60 02 00 00	 jmp	 $LN1@recsize
$LN17@recsize:

; 469  :     case  812: return sizeof( TF00812 );

  0017f	b8 18 00 00 00	 mov	 eax, 24
  00184	e9 56 02 00 00	 jmp	 $LN1@recsize
$LN18@recsize:

; 470  :     case  814: return sizeof( TF00814 );

  00189	b8 30 00 00 00	 mov	 eax, 48			; 00000030H
  0018e	e9 4c 02 00 00	 jmp	 $LN1@recsize
$LN19@recsize:

; 471  :     case  840: return sizeof( TF00840 );

  00193	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  00198	e9 42 02 00 00	 jmp	 $LN1@recsize
$LN20@recsize:

; 472  :     case  844: return sizeof( TF00844 );

  0019d	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  001a2	e9 38 02 00 00	 jmp	 $LN1@recsize
$LN21@recsize:

; 473  :     case  845: return sizeof( TF00845 );

  001a7	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  001ac	e9 2e 02 00 00	 jmp	 $LN1@recsize
$LN22@recsize:

; 474  :     case  846: return sizeof( TF00846 );

  001b1	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  001b6	e9 24 02 00 00	 jmp	 $LN1@recsize
$LN23@recsize:

; 475  : 
; 476  :     case 2269: return sizeof( TF02269 );

  001bb	b8 a0 00 00 00	 mov	 eax, 160		; 000000a0H
  001c0	e9 1a 02 00 00	 jmp	 $LN1@recsize
$LN24@recsize:

; 477  :     case 2270: return sizeof( TF02270 );

  001c5	b8 a0 00 00 00	 mov	 eax, 160		; 000000a0H
  001ca	e9 10 02 00 00	 jmp	 $LN1@recsize
$LN25@recsize:

; 478  :     case 2271: return sizeof( TF02271 );

  001cf	b8 98 00 00 00	 mov	 eax, 152		; 00000098H
  001d4	e9 06 02 00 00	 jmp	 $LN1@recsize
$LN26@recsize:

; 479  :     case 2272: return sizeof( TF02272 );

  001d9	b8 58 00 00 00	 mov	 eax, 88			; 00000058H
  001de	e9 fc 01 00 00	 jmp	 $LN1@recsize
$LN27@recsize:

; 480  :     case 2276: return sizeof( TF02276 );

  001e3	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  001e8	e9 f2 01 00 00	 jmp	 $LN1@recsize
$LN28@recsize:

; 481  :     case 2324: return sizeof( TF02324 );

  001ed	b8 50 00 00 00	 mov	 eax, 80			; 00000050H
  001f2	e9 e8 01 00 00	 jmp	 $LN1@recsize
$LN29@recsize:

; 482  :     case 2326: return sizeof( TF02326 );

  001f7	b8 70 00 00 00	 mov	 eax, 112		; 00000070H
  001fc	e9 de 01 00 00	 jmp	 $LN1@recsize
$LN30@recsize:

; 483  : 
; 484  :     // Device tracing...
; 485  : 
; 486  :     case  423: return sizeof( TF00423 );

  00201	b8 48 01 00 00	 mov	 eax, 328		; 00000148H
  00206	e9 d4 01 00 00	 jmp	 $LN1@recsize
$LN31@recsize:

; 487  :     case  424: return sizeof( TF00424 );

  0020b	b8 20 01 00 00	 mov	 eax, 288		; 00000120H
  00210	e9 ca 01 00 00	 jmp	 $LN1@recsize
$LN32@recsize:

; 488  :     case  425: return sizeof( TF00425 );

  00215	b8 20 01 00 00	 mov	 eax, 288		; 00000120H
  0021a	e9 c0 01 00 00	 jmp	 $LN1@recsize
$LN33@recsize:

; 489  :     case  426: return sizeof( TF00426 );

  0021f	b8 20 01 00 00	 mov	 eax, 288		; 00000120H
  00224	e9 b6 01 00 00	 jmp	 $LN1@recsize
$LN34@recsize:

; 490  :     case  427: return sizeof( TF00427 );

  00229	b8 20 01 00 00	 mov	 eax, 288		; 00000120H
  0022e	e9 ac 01 00 00	 jmp	 $LN1@recsize
$LN35@recsize:

; 491  :     case  428: return sizeof( TF00428 );

  00233	b8 20 01 00 00	 mov	 eax, 288		; 00000120H
  00238	e9 a2 01 00 00	 jmp	 $LN1@recsize
$LN36@recsize:

; 492  :     case  429: return sizeof( TF00429 );

  0023d	b8 30 01 00 00	 mov	 eax, 304		; 00000130H
  00242	e9 98 01 00 00	 jmp	 $LN1@recsize
$LN37@recsize:

; 493  :     case  430: return sizeof( TF00430 );

  00247	b8 28 01 00 00	 mov	 eax, 296		; 00000128H
  0024c	e9 8e 01 00 00	 jmp	 $LN1@recsize
$LN38@recsize:

; 494  :     case  431: return sizeof( TF00431 );

  00251	b8 20 01 00 00	 mov	 eax, 288		; 00000120H
  00256	e9 84 01 00 00	 jmp	 $LN1@recsize
$LN39@recsize:

; 495  :     case  432: return sizeof( TF00432 );

  0025b	b8 20 01 00 00	 mov	 eax, 288		; 00000120H
  00260	e9 7a 01 00 00	 jmp	 $LN1@recsize
$LN40@recsize:

; 496  :     case  433: return sizeof( TF00433 );

  00265	b8 20 01 00 00	 mov	 eax, 288		; 00000120H
  0026a	e9 70 01 00 00	 jmp	 $LN1@recsize
$LN41@recsize:

; 497  :     case  434: return sizeof( TF00434 );

  0026f	b8 20 01 00 00	 mov	 eax, 288		; 00000120H
  00274	e9 66 01 00 00	 jmp	 $LN1@recsize
$LN42@recsize:

; 498  :     case  435: return sizeof( TF00435 );

  00279	b8 30 01 00 00	 mov	 eax, 304		; 00000130H
  0027e	e9 5c 01 00 00	 jmp	 $LN1@recsize
$LN43@recsize:

; 499  :     case  436: return sizeof( TF00436 );

  00283	b8 20 01 00 00	 mov	 eax, 288		; 00000120H
  00288	e9 52 01 00 00	 jmp	 $LN1@recsize
$LN44@recsize:

; 500  :     case  437: return sizeof( TF00437 );

  0028d	b8 20 01 00 00	 mov	 eax, 288		; 00000120H
  00292	e9 48 01 00 00	 jmp	 $LN1@recsize
$LN45@recsize:

; 501  :     case  438: return sizeof( TF00438 );

  00297	b8 28 01 00 00	 mov	 eax, 296		; 00000128H
  0029c	e9 3e 01 00 00	 jmp	 $LN1@recsize
$LN46@recsize:

; 502  :     case  439: return sizeof( TF00439 );

  002a1	b8 28 01 00 00	 mov	 eax, 296		; 00000128H
  002a6	e9 34 01 00 00	 jmp	 $LN1@recsize
$LN47@recsize:

; 503  :     case  440: return sizeof( TF00440 );

  002ab	b8 30 01 00 00	 mov	 eax, 304		; 00000130H
  002b0	e9 2a 01 00 00	 jmp	 $LN1@recsize
$LN48@recsize:

; 504  :     case  441: return sizeof( TF00441 );

  002b5	b8 28 01 00 00	 mov	 eax, 296		; 00000128H
  002ba	e9 20 01 00 00	 jmp	 $LN1@recsize
$LN49@recsize:

; 505  :     case  442: return sizeof( TF00442 );

  002bf	b8 20 01 00 00	 mov	 eax, 288		; 00000120H
  002c4	e9 16 01 00 00	 jmp	 $LN1@recsize
$LN50@recsize:

; 506  : 
; 507  :     case  516: return sizeof( TF00516 );

  002c9	b8 20 01 00 00	 mov	 eax, 288		; 00000120H
  002ce	e9 0c 01 00 00	 jmp	 $LN1@recsize
$LN51@recsize:

; 508  :     case  517: return sizeof( TF00517 );

  002d3	b8 20 01 00 00	 mov	 eax, 288		; 00000120H
  002d8	e9 02 01 00 00	 jmp	 $LN1@recsize
$LN52@recsize:

; 509  :     case  518: return sizeof( TF00518 );

  002dd	b8 20 01 00 00	 mov	 eax, 288		; 00000120H
  002e2	e9 f8 00 00 00	 jmp	 $LN1@recsize
$LN53@recsize:

; 510  :     case  519: return sizeof( TF00519 );

  002e7	b8 28 01 00 00	 mov	 eax, 296		; 00000128H
  002ec	e9 ee 00 00 00	 jmp	 $LN1@recsize
$LN54@recsize:

; 511  :     case  520: return sizeof( TF00520 );

  002f1	b8 20 01 00 00	 mov	 eax, 288		; 00000120H
  002f6	e9 e4 00 00 00	 jmp	 $LN1@recsize
$LN55@recsize:

; 512  : 
; 513  :     case 1300: return sizeof( TF01300 );

  002fb	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00300	e9 da 00 00 00	 jmp	 $LN1@recsize
$LN56@recsize:

; 514  :     case 1301: return sizeof( TF01301 );

  00305	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  0030a	e9 d0 00 00 00	 jmp	 $LN1@recsize
$LN57@recsize:

; 515  :     case 1304: return sizeof( TF01304 );

  0030f	b8 18 00 00 00	 mov	 eax, 24
  00314	e9 c6 00 00 00	 jmp	 $LN1@recsize
$LN58@recsize:

; 516  :     case 1305: return sizeof( TF01305 );

  00319	b8 18 00 00 00	 mov	 eax, 24
  0031e	e9 bc 00 00 00	 jmp	 $LN1@recsize
$LN59@recsize:

; 517  :     case 1306: return sizeof( TF01306 );

  00323	b8 18 00 00 00	 mov	 eax, 24
  00328	e9 b2 00 00 00	 jmp	 $LN1@recsize
$LN60@recsize:

; 518  :     case 1307: return sizeof( TF01307 );

  0032d	b8 18 00 00 00	 mov	 eax, 24
  00332	e9 a8 00 00 00	 jmp	 $LN1@recsize
$LN61@recsize:

; 519  :     case 1308: return sizeof( TF01308 );

  00337	b8 18 00 00 00	 mov	 eax, 24
  0033c	e9 9e 00 00 00	 jmp	 $LN1@recsize
$LN62@recsize:

; 520  :     case 1309: return sizeof( TF01309 );

  00341	b8 18 00 00 00	 mov	 eax, 24
  00346	e9 94 00 00 00	 jmp	 $LN1@recsize
$LN63@recsize:

; 521  :     case 1310: return sizeof( TF01310 );

  0034b	b8 18 00 00 00	 mov	 eax, 24
  00350	e9 8a 00 00 00	 jmp	 $LN1@recsize
$LN64@recsize:

; 522  :     case 1311: return sizeof( TF01311 );

  00355	b8 18 00 00 00	 mov	 eax, 24
  0035a	e9 80 00 00 00	 jmp	 $LN1@recsize
$LN65@recsize:

; 523  :     case 1312: return sizeof( TF01312 );

  0035f	b8 30 00 00 00	 mov	 eax, 48			; 00000030H
  00364	eb 79		 jmp	 SHORT $LN1@recsize
$LN66@recsize:

; 524  :     case 1313: return sizeof( TF01313 );

  00366	b8 b8 00 00 00	 mov	 eax, 184		; 000000b8H
  0036b	eb 72		 jmp	 SHORT $LN1@recsize
$LN67@recsize:

; 525  :     case 1315: return sizeof( TF01315 );

  0036d	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  00372	eb 6b		 jmp	 SHORT $LN1@recsize
$LN68@recsize:

; 526  :     case 1316: return sizeof( TF01316 );

  00374	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00379	eb 64		 jmp	 SHORT $LN1@recsize
$LN69@recsize:

; 527  :     case 1317: return sizeof( TF01317 );

  0037b	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  00380	eb 5d		 jmp	 SHORT $LN1@recsize
$LN70@recsize:

; 528  :     case 1318: return sizeof( TF01318 );

  00382	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00387	eb 56		 jmp	 SHORT $LN1@recsize
$LN71@recsize:

; 529  :     case 1320: return sizeof( TF01320 );

  00389	b8 18 00 00 00	 mov	 eax, 24
  0038e	eb 4f		 jmp	 SHORT $LN1@recsize
$LN72@recsize:

; 530  :     case 1321: return sizeof( TF01321 );

  00390	b8 18 00 00 00	 mov	 eax, 24
  00395	eb 48		 jmp	 SHORT $LN1@recsize
$LN73@recsize:

; 531  :     case 1329: return sizeof( TF01329 );

  00397	b8 18 00 00 00	 mov	 eax, 24
  0039c	eb 41		 jmp	 SHORT $LN1@recsize
$LN74@recsize:

; 532  :     case 1330: return sizeof( TF01330 );

  0039e	b8 18 00 00 00	 mov	 eax, 24
  003a3	eb 3a		 jmp	 SHORT $LN1@recsize
$LN75@recsize:

; 533  :     case 1331: return sizeof( TF01331 );

  003a5	b8 18 00 00 00	 mov	 eax, 24
  003aa	eb 33		 jmp	 SHORT $LN1@recsize
$LN76@recsize:

; 534  :     case 1332: return sizeof( TF01332 );

  003ac	b8 18 00 00 00	 mov	 eax, 24
  003b1	eb 2c		 jmp	 SHORT $LN1@recsize
$LN77@recsize:

; 535  :     case 1333: return sizeof( TF01333 );

  003b3	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  003b8	eb 25		 jmp	 SHORT $LN1@recsize
$LN78@recsize:

; 536  :     case 1334: return sizeof( TF01334 );

  003ba	b8 38 00 00 00	 mov	 eax, 56			; 00000038H
  003bf	eb 1e		 jmp	 SHORT $LN1@recsize
$LN79@recsize:

; 537  :     case 1336: return sizeof( TF01336 );

  003c1	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  003c6	eb 17		 jmp	 SHORT $LN1@recsize
$LN80@recsize:
$LN6@recsize:

; 538  : 
; 539  :     default: CRASH(); UNREACHABLE_CODE( return 0 );

  003c8	48 c7 44 24 08
	00 00 00 00	 mov	 QWORD PTR p$1[rsp], 0
  003d1	48 8b 44 24 08	 mov	 rax, QWORD PTR p$1[rsp]
  003d6	c6 00 00	 mov	 BYTE PTR [rax], 0
  003d9	33 c0		 xor	 eax, eax
  003db	85 c0		 test	 eax, eax
  003dd	75 e9		 jne	 SHORT $LN6@recsize
$LN1@recsize:
$LN81@recsize:

; 540  :     }
; 541  : }

  003df	48 83 c4 18	 add	 rsp, 24
  003e3	c3		 ret	 0
$LN91@recsize:
  003e4	00 00 00 00	 DD	 $LN30@recsize
  003e8	00 00 00 00	 DD	 $LN31@recsize
  003ec	00 00 00 00	 DD	 $LN32@recsize
  003f0	00 00 00 00	 DD	 $LN33@recsize
  003f4	00 00 00 00	 DD	 $LN34@recsize
  003f8	00 00 00 00	 DD	 $LN35@recsize
  003fc	00 00 00 00	 DD	 $LN36@recsize
  00400	00 00 00 00	 DD	 $LN37@recsize
  00404	00 00 00 00	 DD	 $LN38@recsize
  00408	00 00 00 00	 DD	 $LN39@recsize
  0040c	00 00 00 00	 DD	 $LN40@recsize
  00410	00 00 00 00	 DD	 $LN41@recsize
  00414	00 00 00 00	 DD	 $LN42@recsize
  00418	00 00 00 00	 DD	 $LN43@recsize
  0041c	00 00 00 00	 DD	 $LN44@recsize
  00420	00 00 00 00	 DD	 $LN45@recsize
  00424	00 00 00 00	 DD	 $LN46@recsize
  00428	00 00 00 00	 DD	 $LN47@recsize
  0042c	00 00 00 00	 DD	 $LN48@recsize
  00430	00 00 00 00	 DD	 $LN49@recsize
  00434	00 00 00 00	 DD	 $LN50@recsize
  00438	00 00 00 00	 DD	 $LN51@recsize
  0043c	00 00 00 00	 DD	 $LN52@recsize
  00440	00 00 00 00	 DD	 $LN53@recsize
  00444	00 00 00 00	 DD	 $LN54@recsize
  00448	00 00 00 00	 DD	 $LN80@recsize
$LN90@recsize:
  0044c	00		 DB	 0
  0044d	01		 DB	 1
  0044e	02		 DB	 2
  0044f	03		 DB	 3
  00450	04		 DB	 4
  00451	05		 DB	 5
  00452	06		 DB	 6
  00453	07		 DB	 7
  00454	08		 DB	 8
  00455	09		 DB	 9
  00456	0a		 DB	 10
  00457	0b		 DB	 11
  00458	0c		 DB	 12
  00459	0d		 DB	 13
  0045a	0e		 DB	 14
  0045b	0f		 DB	 15
  0045c	10		 DB	 16
  0045d	11		 DB	 17
  0045e	12		 DB	 18
  0045f	13		 DB	 19
  00460	19		 DB	 25
  00461	19		 DB	 25
  00462	19		 DB	 25
  00463	19		 DB	 25
  00464	19		 DB	 25
  00465	19		 DB	 25
  00466	19		 DB	 25
  00467	19		 DB	 25
  00468	19		 DB	 25
  00469	19		 DB	 25
  0046a	19		 DB	 25
  0046b	19		 DB	 25
  0046c	19		 DB	 25
  0046d	19		 DB	 25
  0046e	19		 DB	 25
  0046f	19		 DB	 25
  00470	19		 DB	 25
  00471	19		 DB	 25
  00472	19		 DB	 25
  00473	19		 DB	 25
  00474	19		 DB	 25
  00475	19		 DB	 25
  00476	19		 DB	 25
  00477	19		 DB	 25
  00478	19		 DB	 25
  00479	19		 DB	 25
  0047a	19		 DB	 25
  0047b	19		 DB	 25
  0047c	19		 DB	 25
  0047d	19		 DB	 25
  0047e	19		 DB	 25
  0047f	19		 DB	 25
  00480	19		 DB	 25
  00481	19		 DB	 25
  00482	19		 DB	 25
  00483	19		 DB	 25
  00484	19		 DB	 25
  00485	19		 DB	 25
  00486	19		 DB	 25
  00487	19		 DB	 25
  00488	19		 DB	 25
  00489	19		 DB	 25
  0048a	19		 DB	 25
  0048b	19		 DB	 25
  0048c	19		 DB	 25
  0048d	19		 DB	 25
  0048e	19		 DB	 25
  0048f	19		 DB	 25
  00490	19		 DB	 25
  00491	19		 DB	 25
  00492	19		 DB	 25
  00493	19		 DB	 25
  00494	19		 DB	 25
  00495	19		 DB	 25
  00496	19		 DB	 25
  00497	19		 DB	 25
  00498	19		 DB	 25
  00499	19		 DB	 25
  0049a	19		 DB	 25
  0049b	19		 DB	 25
  0049c	19		 DB	 25
  0049d	19		 DB	 25
  0049e	19		 DB	 25
  0049f	19		 DB	 25
  004a0	19		 DB	 25
  004a1	19		 DB	 25
  004a2	19		 DB	 25
  004a3	19		 DB	 25
  004a4	19		 DB	 25
  004a5	19		 DB	 25
  004a6	19		 DB	 25
  004a7	19		 DB	 25
  004a8	19		 DB	 25
  004a9	14		 DB	 20
  004aa	15		 DB	 21
  004ab	16		 DB	 22
  004ac	17		 DB	 23
  004ad	18		 DB	 24
  004ae	66 90		 npad	 2
$LN89@recsize:
  004b0	00 00 00 00	 DD	 $LN8@recsize
  004b4	00 00 00 00	 DD	 $LN9@recsize
  004b8	00 00 00 00	 DD	 $LN10@recsize
  004bc	00 00 00 00	 DD	 $LN11@recsize
  004c0	00 00 00 00	 DD	 $LN12@recsize
  004c4	00 00 00 00	 DD	 $LN13@recsize
  004c8	00 00 00 00	 DD	 $LN14@recsize
  004cc	00 00 00 00	 DD	 $LN15@recsize
  004d0	00 00 00 00	 DD	 $LN16@recsize
  004d4	00 00 00 00	 DD	 $LN17@recsize
  004d8	00 00 00 00	 DD	 $LN18@recsize
  004dc	00 00 00 00	 DD	 $LN19@recsize
  004e0	00 00 00 00	 DD	 $LN20@recsize
  004e4	00 00 00 00	 DD	 $LN21@recsize
  004e8	00 00 00 00	 DD	 $LN22@recsize
  004ec	00 00 00 00	 DD	 $LN80@recsize
$LN88@recsize:
  004f0	00		 DB	 0
  004f1	01		 DB	 1
  004f2	02		 DB	 2
  004f3	03		 DB	 3
  004f4	0f		 DB	 15
  004f5	04		 DB	 4
  004f6	05		 DB	 5
  004f7	06		 DB	 6
  004f8	07		 DB	 7
  004f9	0f		 DB	 15
  004fa	08		 DB	 8
  004fb	09		 DB	 9
  004fc	0f		 DB	 15
  004fd	0a		 DB	 10
  004fe	0f		 DB	 15
  004ff	0f		 DB	 15
  00500	0f		 DB	 15
  00501	0f		 DB	 15
  00502	0f		 DB	 15
  00503	0f		 DB	 15
  00504	0f		 DB	 15
  00505	0f		 DB	 15
  00506	0f		 DB	 15
  00507	0f		 DB	 15
  00508	0f		 DB	 15
  00509	0f		 DB	 15
  0050a	0f		 DB	 15
  0050b	0f		 DB	 15
  0050c	0f		 DB	 15
  0050d	0f		 DB	 15
  0050e	0f		 DB	 15
  0050f	0f		 DB	 15
  00510	0f		 DB	 15
  00511	0f		 DB	 15
  00512	0f		 DB	 15
  00513	0f		 DB	 15
  00514	0f		 DB	 15
  00515	0f		 DB	 15
  00516	0f		 DB	 15
  00517	0b		 DB	 11
  00518	0f		 DB	 15
  00519	0f		 DB	 15
  0051a	0f		 DB	 15
  0051b	0c		 DB	 12
  0051c	0d		 DB	 13
  0051d	0e		 DB	 14
  0051e	66 90		 npad	 2
$LN87@recsize:
  00520	00 00 00 00	 DD	 $LN56@recsize
  00524	00 00 00 00	 DD	 $LN80@recsize
  00528	00 00 00 00	 DD	 $LN80@recsize
  0052c	00 00 00 00	 DD	 $LN57@recsize
  00530	00 00 00 00	 DD	 $LN58@recsize
  00534	00 00 00 00	 DD	 $LN59@recsize
  00538	00 00 00 00	 DD	 $LN60@recsize
  0053c	00 00 00 00	 DD	 $LN61@recsize
  00540	00 00 00 00	 DD	 $LN62@recsize
  00544	00 00 00 00	 DD	 $LN63@recsize
  00548	00 00 00 00	 DD	 $LN64@recsize
  0054c	00 00 00 00	 DD	 $LN65@recsize
  00550	00 00 00 00	 DD	 $LN66@recsize
  00554	00 00 00 00	 DD	 $LN80@recsize
  00558	00 00 00 00	 DD	 $LN67@recsize
  0055c	00 00 00 00	 DD	 $LN68@recsize
  00560	00 00 00 00	 DD	 $LN69@recsize
  00564	00 00 00 00	 DD	 $LN70@recsize
  00568	00 00 00 00	 DD	 $LN80@recsize
  0056c	00 00 00 00	 DD	 $LN71@recsize
  00570	00 00 00 00	 DD	 $LN72@recsize
  00574	00 00 00 00	 DD	 $LN80@recsize
  00578	00 00 00 00	 DD	 $LN80@recsize
  0057c	00 00 00 00	 DD	 $LN80@recsize
  00580	00 00 00 00	 DD	 $LN80@recsize
  00584	00 00 00 00	 DD	 $LN80@recsize
  00588	00 00 00 00	 DD	 $LN80@recsize
  0058c	00 00 00 00	 DD	 $LN80@recsize
  00590	00 00 00 00	 DD	 $LN73@recsize
  00594	00 00 00 00	 DD	 $LN74@recsize
  00598	00 00 00 00	 DD	 $LN75@recsize
  0059c	00 00 00 00	 DD	 $LN76@recsize
  005a0	00 00 00 00	 DD	 $LN77@recsize
  005a4	00 00 00 00	 DD	 $LN78@recsize
  005a8	00 00 00 00	 DD	 $LN80@recsize
  005ac	00 00 00 00	 DD	 $LN79@recsize
$LN86@recsize:
  005b0	00 00 00 00	 DD	 $LN24@recsize
  005b4	00 00 00 00	 DD	 $LN25@recsize
  005b8	00 00 00 00	 DD	 $LN26@recsize
  005bc	00 00 00 00	 DD	 $LN27@recsize
  005c0	00 00 00 00	 DD	 $LN28@recsize
  005c4	00 00 00 00	 DD	 $LN29@recsize
  005c8	00 00 00 00	 DD	 $LN80@recsize
$LN85@recsize:
  005cc	00		 DB	 0
  005cd	01		 DB	 1
  005ce	02		 DB	 2
  005cf	06		 DB	 6
  005d0	06		 DB	 6
  005d1	06		 DB	 6
  005d2	03		 DB	 3
  005d3	06		 DB	 6
  005d4	06		 DB	 6
  005d5	06		 DB	 6
  005d6	06		 DB	 6
  005d7	06		 DB	 6
  005d8	06		 DB	 6
  005d9	06		 DB	 6
  005da	06		 DB	 6
  005db	06		 DB	 6
  005dc	06		 DB	 6
  005dd	06		 DB	 6
  005de	06		 DB	 6
  005df	06		 DB	 6
  005e0	06		 DB	 6
  005e1	06		 DB	 6
  005e2	06		 DB	 6
  005e3	06		 DB	 6
  005e4	06		 DB	 6
  005e5	06		 DB	 6
  005e6	06		 DB	 6
  005e7	06		 DB	 6
  005e8	06		 DB	 6
  005e9	06		 DB	 6
  005ea	06		 DB	 6
  005eb	06		 DB	 6
  005ec	06		 DB	 6
  005ed	06		 DB	 6
  005ee	06		 DB	 6
  005ef	06		 DB	 6
  005f0	06		 DB	 6
  005f1	06		 DB	 6
  005f2	06		 DB	 6
  005f3	06		 DB	 6
  005f4	06		 DB	 6
  005f5	06		 DB	 6
  005f6	06		 DB	 6
  005f7	06		 DB	 6
  005f8	06		 DB	 6
  005f9	06		 DB	 6
  005fa	06		 DB	 6
  005fb	06		 DB	 6
  005fc	06		 DB	 6
  005fd	06		 DB	 6
  005fe	06		 DB	 6
  005ff	06		 DB	 6
  00600	06		 DB	 6
  00601	06		 DB	 6
  00602	04		 DB	 4
  00603	06		 DB	 6
  00604	05		 DB	 5
recsize	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
tv65 = 0
p$1 = 8
msgnum$ = 32
gotmask	PROC

; 361  : {

  00000	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  00005	48 83 ec 18	 sub	 rsp, 24

; 362  :     switch (msgnum)

  00009	0f b7 44 24 20	 movzx	 eax, WORD PTR msgnum$[rsp]
  0000e	89 04 24	 mov	 DWORD PTR tv65[rsp], eax
  00011	81 3c 24 20 03
	00 00		 cmp	 DWORD PTR tv65[rsp], 800 ; 00000320H
  00018	7f 41		 jg	 SHORT $LN82@gotmask
  0001a	81 3c 24 20 03
	00 00		 cmp	 DWORD PTR tv65[rsp], 800 ; 00000320H
  00021	0f 84 f4 00 00
	00		 je	 $LN7@gotmask
  00027	8b 04 24	 mov	 eax, DWORD PTR tv65[rsp]
  0002a	2d a7 01 00 00	 sub	 eax, 423		; 000001a7H
  0002f	89 04 24	 mov	 DWORD PTR tv65[rsp], eax
  00032	83 3c 24 61	 cmp	 DWORD PTR tv65[rsp], 97	; 00000061H
  00036	0f 87 8c 03 00
	00		 ja	 $LN80@gotmask
  0003c	48 63 04 24	 movsxd	 rax, DWORD PTR tv65[rsp]
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00047	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN90@gotmask[rcx+rax]
  0004f	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN91@gotmask[rcx+rax*4]
  00056	48 03 c1	 add	 rax, rcx
  00059	ff e0		 jmp	 rax
$LN82@gotmask:
  0005b	81 3c 24 14 05
	00 00		 cmp	 DWORD PTR tv65[rsp], 1300 ; 00000514H
  00062	7f 41		 jg	 SHORT $LN83@gotmask
  00064	81 3c 24 14 05
	00 00		 cmp	 DWORD PTR tv65[rsp], 1300 ; 00000514H
  0006b	0f 84 8a 02 00
	00		 je	 $LN55@gotmask
  00071	8b 04 24	 mov	 eax, DWORD PTR tv65[rsp]
  00074	2d 21 03 00 00	 sub	 eax, 801		; 00000321H
  00079	89 04 24	 mov	 DWORD PTR tv65[rsp], eax
  0007c	83 3c 24 2d	 cmp	 DWORD PTR tv65[rsp], 45	; 0000002dH
  00080	0f 87 42 03 00
	00		 ja	 $LN80@gotmask
  00086	48 63 04 24	 movsxd	 rax, DWORD PTR tv65[rsp]
  0008a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00091	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN88@gotmask[rcx+rax]
  00099	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN89@gotmask[rcx+rax*4]
  000a0	48 03 c1	 add	 rax, rcx
  000a3	ff e0		 jmp	 rax
$LN83@gotmask:
  000a5	81 3c 24 dd 08
	00 00		 cmp	 DWORD PTR tv65[rsp], 2269 ; 000008ddH
  000ac	7f 39		 jg	 SHORT $LN84@gotmask
  000ae	81 3c 24 dd 08
	00 00		 cmp	 DWORD PTR tv65[rsp], 2269 ; 000008ddH
  000b5	0f 84 00 01 00
	00		 je	 $LN23@gotmask
  000bb	8b 04 24	 mov	 eax, DWORD PTR tv65[rsp]
  000be	2d 15 05 00 00	 sub	 eax, 1301		; 00000515H
  000c3	89 04 24	 mov	 DWORD PTR tv65[rsp], eax
  000c6	83 3c 24 23	 cmp	 DWORD PTR tv65[rsp], 35	; 00000023H
  000ca	0f 87 f8 02 00
	00		 ja	 $LN80@gotmask
  000d0	48 63 04 24	 movsxd	 rax, DWORD PTR tv65[rsp]
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  000db	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN87@gotmask[rcx+rax*4]
  000e2	48 03 c1	 add	 rax, rcx
  000e5	ff e0		 jmp	 rax
$LN84@gotmask:
  000e7	8b 04 24	 mov	 eax, DWORD PTR tv65[rsp]
  000ea	2d de 08 00 00	 sub	 eax, 2270		; 000008deH
  000ef	89 04 24	 mov	 DWORD PTR tv65[rsp], eax
  000f2	83 3c 24 38	 cmp	 DWORD PTR tv65[rsp], 56	; 00000038H
  000f6	0f 87 cc 02 00
	00		 ja	 $LN80@gotmask
  000fc	48 63 04 24	 movsxd	 rax, DWORD PTR tv65[rsp]
  00100	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00107	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN85@gotmask[rcx+rax]
  0010f	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN86@gotmask[rcx+rax*4]
  00116	48 03 c1	 add	 rax, rcx
  00119	ff e0		 jmp	 rax
$LN7@gotmask:

; 363  :     {
; 364  :     // Instruction tracing...
; 365  : 
; 366  :     case  800: return GOT_TF00800;

  0011b	b8 00 00 00 80	 mov	 eax, -2147483648	; 80000000H
  00120	e9 ba 02 00 00	 jmp	 $LN1@gotmask
$LN8@gotmask:

; 367  :     case  801: return GOT_TF00801;

  00125	b8 00 00 00 40	 mov	 eax, 1073741824		; 40000000H
  0012a	e9 b0 02 00 00	 jmp	 $LN1@gotmask
$LN9@gotmask:

; 368  :     case  802: return GOT_TF00802;

  0012f	b8 00 00 00 20	 mov	 eax, 536870912		; 20000000H
  00134	e9 a6 02 00 00	 jmp	 $LN1@gotmask
$LN10@gotmask:

; 369  :     case  803: return GOT_TF00803;

  00139	b8 00 00 00 10	 mov	 eax, 268435456		; 10000000H
  0013e	e9 9c 02 00 00	 jmp	 $LN1@gotmask
$LN11@gotmask:

; 370  :     case  804: return GOT_TF00804;

  00143	b8 00 00 00 08	 mov	 eax, 134217728		; 08000000H
  00148	e9 92 02 00 00	 jmp	 $LN1@gotmask
$LN12@gotmask:

; 371  :     case  806: return GOT_TF00806;

  0014d	b8 00 00 00 04	 mov	 eax, 67108864		; 04000000H
  00152	e9 88 02 00 00	 jmp	 $LN1@gotmask
$LN13@gotmask:

; 372  :     case  807: return GOT_TF00807;

  00157	b8 00 00 00 02	 mov	 eax, 33554432		; 02000000H
  0015c	e9 7e 02 00 00	 jmp	 $LN1@gotmask
$LN14@gotmask:

; 373  :     case  808: return GOT_TF00808;

  00161	b8 00 00 00 01	 mov	 eax, 16777216		; 01000000H
  00166	e9 74 02 00 00	 jmp	 $LN1@gotmask
$LN15@gotmask:

; 374  :     case  809: return GOT_TF00809;

  0016b	b8 00 00 80 00	 mov	 eax, 8388608		; 00800000H
  00170	e9 6a 02 00 00	 jmp	 $LN1@gotmask
$LN16@gotmask:

; 375  :     case  811: return GOT_TF00811;

  00175	b8 00 00 40 00	 mov	 eax, 4194304		; 00400000H
  0017a	e9 60 02 00 00	 jmp	 $LN1@gotmask
$LN17@gotmask:

; 376  :     case  812: return GOT_TF00812;

  0017f	b8 00 00 20 00	 mov	 eax, 2097152		; 00200000H
  00184	e9 56 02 00 00	 jmp	 $LN1@gotmask
$LN18@gotmask:

; 377  :     case  814: return GOT_TF00814;

  00189	b8 00 00 10 00	 mov	 eax, 1048576		; 00100000H
  0018e	e9 4c 02 00 00	 jmp	 $LN1@gotmask
$LN19@gotmask:

; 378  :     case  840: return GOT_TF00840;

  00193	b8 00 00 08 00	 mov	 eax, 524288		; 00080000H
  00198	e9 42 02 00 00	 jmp	 $LN1@gotmask
$LN20@gotmask:

; 379  :     case  844: return GOT_TF00844;

  0019d	b8 00 00 04 00	 mov	 eax, 262144		; 00040000H
  001a2	e9 38 02 00 00	 jmp	 $LN1@gotmask
$LN21@gotmask:

; 380  :     case  845: return GOT_TF00845;

  001a7	b8 00 00 02 00	 mov	 eax, 131072		; 00020000H
  001ac	e9 2e 02 00 00	 jmp	 $LN1@gotmask
$LN22@gotmask:

; 381  :     case  846: return GOT_TF00846;

  001b1	b8 00 00 01 00	 mov	 eax, 65536		; 00010000H
  001b6	e9 24 02 00 00	 jmp	 $LN1@gotmask
$LN23@gotmask:

; 382  : 
; 383  :     case 2269: return GOT_TF02269;

  001bb	b8 00 80 00 00	 mov	 eax, 32768		; 00008000H
  001c0	e9 1a 02 00 00	 jmp	 $LN1@gotmask
$LN24@gotmask:

; 384  :     case 2270: return GOT_TF02270;

  001c5	b8 00 40 00 00	 mov	 eax, 16384		; 00004000H
  001ca	e9 10 02 00 00	 jmp	 $LN1@gotmask
$LN25@gotmask:

; 385  :     case 2271: return GOT_TF02271;

  001cf	b8 00 20 00 00	 mov	 eax, 8192		; 00002000H
  001d4	e9 06 02 00 00	 jmp	 $LN1@gotmask
$LN26@gotmask:

; 386  :     case 2272: return GOT_TF02272;

  001d9	b8 00 10 00 00	 mov	 eax, 4096		; 00001000H
  001de	e9 fc 01 00 00	 jmp	 $LN1@gotmask
$LN27@gotmask:

; 387  :     case 2276: return GOT_TF02276;

  001e3	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  001e8	e9 f2 01 00 00	 jmp	 $LN1@gotmask
$LN28@gotmask:

; 388  :     case 2324: return GOT_TF02324;

  001ed	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  001f2	e9 e8 01 00 00	 jmp	 $LN1@gotmask
$LN29@gotmask:

; 389  :     case 2326: return GOT_TF02326;

  001f7	b8 00 02 00 00	 mov	 eax, 512		; 00000200H
  001fc	e9 de 01 00 00	 jmp	 $LN1@gotmask
$LN30@gotmask:

; 390  : 
; 391  :     // Device tracing...
; 392  : 
; 393  :     case  423: return GOT_TF00423;

  00201	b8 01 00 00 00	 mov	 eax, 1
  00206	e9 d4 01 00 00	 jmp	 $LN1@gotmask
$LN31@gotmask:

; 394  :     case  424: return GOT_TF00424;

  0020b	b8 01 00 00 00	 mov	 eax, 1
  00210	e9 ca 01 00 00	 jmp	 $LN1@gotmask
$LN32@gotmask:

; 395  :     case  425: return GOT_TF00425;

  00215	b8 01 00 00 00	 mov	 eax, 1
  0021a	e9 c0 01 00 00	 jmp	 $LN1@gotmask
$LN33@gotmask:

; 396  :     case  426: return GOT_TF00426;

  0021f	b8 01 00 00 00	 mov	 eax, 1
  00224	e9 b6 01 00 00	 jmp	 $LN1@gotmask
$LN34@gotmask:

; 397  :     case  427: return GOT_TF00427;

  00229	b8 01 00 00 00	 mov	 eax, 1
  0022e	e9 ac 01 00 00	 jmp	 $LN1@gotmask
$LN35@gotmask:

; 398  :     case  428: return GOT_TF00428;

  00233	b8 01 00 00 00	 mov	 eax, 1
  00238	e9 a2 01 00 00	 jmp	 $LN1@gotmask
$LN36@gotmask:

; 399  :     case  429: return GOT_TF00429;

  0023d	b8 01 00 00 00	 mov	 eax, 1
  00242	e9 98 01 00 00	 jmp	 $LN1@gotmask
$LN37@gotmask:

; 400  :     case  430: return GOT_TF00430;

  00247	b8 01 00 00 00	 mov	 eax, 1
  0024c	e9 8e 01 00 00	 jmp	 $LN1@gotmask
$LN38@gotmask:

; 401  :     case  431: return GOT_TF00431;

  00251	b8 01 00 00 00	 mov	 eax, 1
  00256	e9 84 01 00 00	 jmp	 $LN1@gotmask
$LN39@gotmask:

; 402  :     case  432: return GOT_TF00432;

  0025b	b8 01 00 00 00	 mov	 eax, 1
  00260	e9 7a 01 00 00	 jmp	 $LN1@gotmask
$LN40@gotmask:

; 403  :     case  433: return GOT_TF00433;

  00265	b8 01 00 00 00	 mov	 eax, 1
  0026a	e9 70 01 00 00	 jmp	 $LN1@gotmask
$LN41@gotmask:

; 404  :     case  434: return GOT_TF00434;

  0026f	b8 01 00 00 00	 mov	 eax, 1
  00274	e9 66 01 00 00	 jmp	 $LN1@gotmask
$LN42@gotmask:

; 405  :     case  435: return GOT_TF00435;

  00279	b8 01 00 00 00	 mov	 eax, 1
  0027e	e9 5c 01 00 00	 jmp	 $LN1@gotmask
$LN43@gotmask:

; 406  :     case  436: return GOT_TF00436;

  00283	b8 01 00 00 00	 mov	 eax, 1
  00288	e9 52 01 00 00	 jmp	 $LN1@gotmask
$LN44@gotmask:

; 407  :     case  437: return GOT_TF00437;

  0028d	b8 01 00 00 00	 mov	 eax, 1
  00292	e9 48 01 00 00	 jmp	 $LN1@gotmask
$LN45@gotmask:

; 408  :     case  438: return GOT_TF00438;

  00297	b8 01 00 00 00	 mov	 eax, 1
  0029c	e9 3e 01 00 00	 jmp	 $LN1@gotmask
$LN46@gotmask:

; 409  :     case  439: return GOT_TF00439;

  002a1	b8 01 00 00 00	 mov	 eax, 1
  002a6	e9 34 01 00 00	 jmp	 $LN1@gotmask
$LN47@gotmask:

; 410  :     case  440: return GOT_TF00440;

  002ab	b8 01 00 00 00	 mov	 eax, 1
  002b0	e9 2a 01 00 00	 jmp	 $LN1@gotmask
$LN48@gotmask:

; 411  :     case  441: return GOT_TF00441;

  002b5	b8 01 00 00 00	 mov	 eax, 1
  002ba	e9 20 01 00 00	 jmp	 $LN1@gotmask
$LN49@gotmask:

; 412  :     case  442: return GOT_TF00442;

  002bf	b8 01 00 00 00	 mov	 eax, 1
  002c4	e9 16 01 00 00	 jmp	 $LN1@gotmask
$LN50@gotmask:

; 413  : 
; 414  :     case  516: return GOT_TF00516;

  002c9	b8 01 00 00 00	 mov	 eax, 1
  002ce	e9 0c 01 00 00	 jmp	 $LN1@gotmask
$LN51@gotmask:

; 415  :     case  517: return GOT_TF00517;

  002d3	b8 01 00 00 00	 mov	 eax, 1
  002d8	e9 02 01 00 00	 jmp	 $LN1@gotmask
$LN52@gotmask:

; 416  :     case  518: return GOT_TF00518;

  002dd	b8 01 00 00 00	 mov	 eax, 1
  002e2	e9 f8 00 00 00	 jmp	 $LN1@gotmask
$LN53@gotmask:

; 417  :     case  519: return GOT_TF00519;

  002e7	b8 01 00 00 00	 mov	 eax, 1
  002ec	e9 ee 00 00 00	 jmp	 $LN1@gotmask
$LN54@gotmask:

; 418  :     case  520: return GOT_TF00520;

  002f1	b8 01 00 00 00	 mov	 eax, 1
  002f6	e9 e4 00 00 00	 jmp	 $LN1@gotmask
$LN55@gotmask:

; 419  : 
; 420  :     case 1300: return GOT_TF01300;

  002fb	b8 01 00 00 00	 mov	 eax, 1
  00300	e9 da 00 00 00	 jmp	 $LN1@gotmask
$LN56@gotmask:

; 421  :     case 1301: return GOT_TF01301;

  00305	b8 01 00 00 00	 mov	 eax, 1
  0030a	e9 d0 00 00 00	 jmp	 $LN1@gotmask
$LN57@gotmask:

; 422  :     case 1304: return GOT_TF01304;

  0030f	b8 01 00 00 00	 mov	 eax, 1
  00314	e9 c6 00 00 00	 jmp	 $LN1@gotmask
$LN58@gotmask:

; 423  :     case 1305: return GOT_TF01305;

  00319	b8 01 00 00 00	 mov	 eax, 1
  0031e	e9 bc 00 00 00	 jmp	 $LN1@gotmask
$LN59@gotmask:

; 424  :     case 1306: return GOT_TF01306;

  00323	b8 01 00 00 00	 mov	 eax, 1
  00328	e9 b2 00 00 00	 jmp	 $LN1@gotmask
$LN60@gotmask:

; 425  :     case 1307: return GOT_TF01307;

  0032d	b8 01 00 00 00	 mov	 eax, 1
  00332	e9 a8 00 00 00	 jmp	 $LN1@gotmask
$LN61@gotmask:

; 426  :     case 1308: return GOT_TF01308;

  00337	b8 01 00 00 00	 mov	 eax, 1
  0033c	e9 9e 00 00 00	 jmp	 $LN1@gotmask
$LN62@gotmask:

; 427  :     case 1309: return GOT_TF01309;

  00341	b8 01 00 00 00	 mov	 eax, 1
  00346	e9 94 00 00 00	 jmp	 $LN1@gotmask
$LN63@gotmask:

; 428  :     case 1310: return GOT_TF01310;

  0034b	b8 01 00 00 00	 mov	 eax, 1
  00350	e9 8a 00 00 00	 jmp	 $LN1@gotmask
$LN64@gotmask:

; 429  :     case 1311: return GOT_TF01311;

  00355	b8 01 00 00 00	 mov	 eax, 1
  0035a	e9 80 00 00 00	 jmp	 $LN1@gotmask
$LN65@gotmask:

; 430  :     case 1312: return GOT_TF01312;

  0035f	b8 01 00 00 00	 mov	 eax, 1
  00364	eb 79		 jmp	 SHORT $LN1@gotmask
$LN66@gotmask:

; 431  :     case 1313: return GOT_TF01313;

  00366	b8 01 00 00 00	 mov	 eax, 1
  0036b	eb 72		 jmp	 SHORT $LN1@gotmask
$LN67@gotmask:

; 432  :     case 1315: return GOT_TF01315;

  0036d	b8 01 00 00 00	 mov	 eax, 1
  00372	eb 6b		 jmp	 SHORT $LN1@gotmask
$LN68@gotmask:

; 433  :     case 1316: return GOT_TF01316;

  00374	b8 01 00 00 00	 mov	 eax, 1
  00379	eb 64		 jmp	 SHORT $LN1@gotmask
$LN69@gotmask:

; 434  :     case 1317: return GOT_TF01317;

  0037b	b8 01 00 00 00	 mov	 eax, 1
  00380	eb 5d		 jmp	 SHORT $LN1@gotmask
$LN70@gotmask:

; 435  :     case 1318: return GOT_TF01318;

  00382	b8 01 00 00 00	 mov	 eax, 1
  00387	eb 56		 jmp	 SHORT $LN1@gotmask
$LN71@gotmask:

; 436  :     case 1320: return GOT_TF01320;

  00389	b8 01 00 00 00	 mov	 eax, 1
  0038e	eb 4f		 jmp	 SHORT $LN1@gotmask
$LN72@gotmask:

; 437  :     case 1321: return GOT_TF01321;

  00390	b8 01 00 00 00	 mov	 eax, 1
  00395	eb 48		 jmp	 SHORT $LN1@gotmask
$LN73@gotmask:

; 438  :     case 1329: return GOT_TF01329;

  00397	b8 01 00 00 00	 mov	 eax, 1
  0039c	eb 41		 jmp	 SHORT $LN1@gotmask
$LN74@gotmask:

; 439  :     case 1330: return GOT_TF01330;

  0039e	b8 01 00 00 00	 mov	 eax, 1
  003a3	eb 3a		 jmp	 SHORT $LN1@gotmask
$LN75@gotmask:

; 440  :     case 1331: return GOT_TF01331;

  003a5	b8 01 00 00 00	 mov	 eax, 1
  003aa	eb 33		 jmp	 SHORT $LN1@gotmask
$LN76@gotmask:

; 441  :     case 1332: return GOT_TF01332;

  003ac	b8 01 00 00 00	 mov	 eax, 1
  003b1	eb 2c		 jmp	 SHORT $LN1@gotmask
$LN77@gotmask:

; 442  :     case 1333: return GOT_TF01333;

  003b3	b8 01 00 00 00	 mov	 eax, 1
  003b8	eb 25		 jmp	 SHORT $LN1@gotmask
$LN78@gotmask:

; 443  :     case 1334: return GOT_TF01334;

  003ba	b8 01 00 00 00	 mov	 eax, 1
  003bf	eb 1e		 jmp	 SHORT $LN1@gotmask
$LN79@gotmask:

; 444  :     case 1336: return GOT_TF01336;

  003c1	b8 01 00 00 00	 mov	 eax, 1
  003c6	eb 17		 jmp	 SHORT $LN1@gotmask
$LN80@gotmask:
$LN6@gotmask:

; 445  : 
; 446  :     default: CRASH(); UNREACHABLE_CODE( return 0 );

  003c8	48 c7 44 24 08
	00 00 00 00	 mov	 QWORD PTR p$1[rsp], 0
  003d1	48 8b 44 24 08	 mov	 rax, QWORD PTR p$1[rsp]
  003d6	c6 00 00	 mov	 BYTE PTR [rax], 0
  003d9	33 c0		 xor	 eax, eax
  003db	85 c0		 test	 eax, eax
  003dd	75 e9		 jne	 SHORT $LN6@gotmask
$LN1@gotmask:
$LN81@gotmask:

; 447  :     }
; 448  : }

  003df	48 83 c4 18	 add	 rsp, 24
  003e3	c3		 ret	 0
$LN91@gotmask:
  003e4	00 00 00 00	 DD	 $LN30@gotmask
  003e8	00 00 00 00	 DD	 $LN31@gotmask
  003ec	00 00 00 00	 DD	 $LN32@gotmask
  003f0	00 00 00 00	 DD	 $LN33@gotmask
  003f4	00 00 00 00	 DD	 $LN34@gotmask
  003f8	00 00 00 00	 DD	 $LN35@gotmask
  003fc	00 00 00 00	 DD	 $LN36@gotmask
  00400	00 00 00 00	 DD	 $LN37@gotmask
  00404	00 00 00 00	 DD	 $LN38@gotmask
  00408	00 00 00 00	 DD	 $LN39@gotmask
  0040c	00 00 00 00	 DD	 $LN40@gotmask
  00410	00 00 00 00	 DD	 $LN41@gotmask
  00414	00 00 00 00	 DD	 $LN42@gotmask
  00418	00 00 00 00	 DD	 $LN43@gotmask
  0041c	00 00 00 00	 DD	 $LN44@gotmask
  00420	00 00 00 00	 DD	 $LN45@gotmask
  00424	00 00 00 00	 DD	 $LN46@gotmask
  00428	00 00 00 00	 DD	 $LN47@gotmask
  0042c	00 00 00 00	 DD	 $LN48@gotmask
  00430	00 00 00 00	 DD	 $LN49@gotmask
  00434	00 00 00 00	 DD	 $LN50@gotmask
  00438	00 00 00 00	 DD	 $LN51@gotmask
  0043c	00 00 00 00	 DD	 $LN52@gotmask
  00440	00 00 00 00	 DD	 $LN53@gotmask
  00444	00 00 00 00	 DD	 $LN54@gotmask
  00448	00 00 00 00	 DD	 $LN80@gotmask
$LN90@gotmask:
  0044c	00		 DB	 0
  0044d	01		 DB	 1
  0044e	02		 DB	 2
  0044f	03		 DB	 3
  00450	04		 DB	 4
  00451	05		 DB	 5
  00452	06		 DB	 6
  00453	07		 DB	 7
  00454	08		 DB	 8
  00455	09		 DB	 9
  00456	0a		 DB	 10
  00457	0b		 DB	 11
  00458	0c		 DB	 12
  00459	0d		 DB	 13
  0045a	0e		 DB	 14
  0045b	0f		 DB	 15
  0045c	10		 DB	 16
  0045d	11		 DB	 17
  0045e	12		 DB	 18
  0045f	13		 DB	 19
  00460	19		 DB	 25
  00461	19		 DB	 25
  00462	19		 DB	 25
  00463	19		 DB	 25
  00464	19		 DB	 25
  00465	19		 DB	 25
  00466	19		 DB	 25
  00467	19		 DB	 25
  00468	19		 DB	 25
  00469	19		 DB	 25
  0046a	19		 DB	 25
  0046b	19		 DB	 25
  0046c	19		 DB	 25
  0046d	19		 DB	 25
  0046e	19		 DB	 25
  0046f	19		 DB	 25
  00470	19		 DB	 25
  00471	19		 DB	 25
  00472	19		 DB	 25
  00473	19		 DB	 25
  00474	19		 DB	 25
  00475	19		 DB	 25
  00476	19		 DB	 25
  00477	19		 DB	 25
  00478	19		 DB	 25
  00479	19		 DB	 25
  0047a	19		 DB	 25
  0047b	19		 DB	 25
  0047c	19		 DB	 25
  0047d	19		 DB	 25
  0047e	19		 DB	 25
  0047f	19		 DB	 25
  00480	19		 DB	 25
  00481	19		 DB	 25
  00482	19		 DB	 25
  00483	19		 DB	 25
  00484	19		 DB	 25
  00485	19		 DB	 25
  00486	19		 DB	 25
  00487	19		 DB	 25
  00488	19		 DB	 25
  00489	19		 DB	 25
  0048a	19		 DB	 25
  0048b	19		 DB	 25
  0048c	19		 DB	 25
  0048d	19		 DB	 25
  0048e	19		 DB	 25
  0048f	19		 DB	 25
  00490	19		 DB	 25
  00491	19		 DB	 25
  00492	19		 DB	 25
  00493	19		 DB	 25
  00494	19		 DB	 25
  00495	19		 DB	 25
  00496	19		 DB	 25
  00497	19		 DB	 25
  00498	19		 DB	 25
  00499	19		 DB	 25
  0049a	19		 DB	 25
  0049b	19		 DB	 25
  0049c	19		 DB	 25
  0049d	19		 DB	 25
  0049e	19		 DB	 25
  0049f	19		 DB	 25
  004a0	19		 DB	 25
  004a1	19		 DB	 25
  004a2	19		 DB	 25
  004a3	19		 DB	 25
  004a4	19		 DB	 25
  004a5	19		 DB	 25
  004a6	19		 DB	 25
  004a7	19		 DB	 25
  004a8	19		 DB	 25
  004a9	14		 DB	 20
  004aa	15		 DB	 21
  004ab	16		 DB	 22
  004ac	17		 DB	 23
  004ad	18		 DB	 24
  004ae	66 90		 npad	 2
$LN89@gotmask:
  004b0	00 00 00 00	 DD	 $LN8@gotmask
  004b4	00 00 00 00	 DD	 $LN9@gotmask
  004b8	00 00 00 00	 DD	 $LN10@gotmask
  004bc	00 00 00 00	 DD	 $LN11@gotmask
  004c0	00 00 00 00	 DD	 $LN12@gotmask
  004c4	00 00 00 00	 DD	 $LN13@gotmask
  004c8	00 00 00 00	 DD	 $LN14@gotmask
  004cc	00 00 00 00	 DD	 $LN15@gotmask
  004d0	00 00 00 00	 DD	 $LN16@gotmask
  004d4	00 00 00 00	 DD	 $LN17@gotmask
  004d8	00 00 00 00	 DD	 $LN18@gotmask
  004dc	00 00 00 00	 DD	 $LN19@gotmask
  004e0	00 00 00 00	 DD	 $LN20@gotmask
  004e4	00 00 00 00	 DD	 $LN21@gotmask
  004e8	00 00 00 00	 DD	 $LN22@gotmask
  004ec	00 00 00 00	 DD	 $LN80@gotmask
$LN88@gotmask:
  004f0	00		 DB	 0
  004f1	01		 DB	 1
  004f2	02		 DB	 2
  004f3	03		 DB	 3
  004f4	0f		 DB	 15
  004f5	04		 DB	 4
  004f6	05		 DB	 5
  004f7	06		 DB	 6
  004f8	07		 DB	 7
  004f9	0f		 DB	 15
  004fa	08		 DB	 8
  004fb	09		 DB	 9
  004fc	0f		 DB	 15
  004fd	0a		 DB	 10
  004fe	0f		 DB	 15
  004ff	0f		 DB	 15
  00500	0f		 DB	 15
  00501	0f		 DB	 15
  00502	0f		 DB	 15
  00503	0f		 DB	 15
  00504	0f		 DB	 15
  00505	0f		 DB	 15
  00506	0f		 DB	 15
  00507	0f		 DB	 15
  00508	0f		 DB	 15
  00509	0f		 DB	 15
  0050a	0f		 DB	 15
  0050b	0f		 DB	 15
  0050c	0f		 DB	 15
  0050d	0f		 DB	 15
  0050e	0f		 DB	 15
  0050f	0f		 DB	 15
  00510	0f		 DB	 15
  00511	0f		 DB	 15
  00512	0f		 DB	 15
  00513	0f		 DB	 15
  00514	0f		 DB	 15
  00515	0f		 DB	 15
  00516	0f		 DB	 15
  00517	0b		 DB	 11
  00518	0f		 DB	 15
  00519	0f		 DB	 15
  0051a	0f		 DB	 15
  0051b	0c		 DB	 12
  0051c	0d		 DB	 13
  0051d	0e		 DB	 14
  0051e	66 90		 npad	 2
$LN87@gotmask:
  00520	00 00 00 00	 DD	 $LN56@gotmask
  00524	00 00 00 00	 DD	 $LN80@gotmask
  00528	00 00 00 00	 DD	 $LN80@gotmask
  0052c	00 00 00 00	 DD	 $LN57@gotmask
  00530	00 00 00 00	 DD	 $LN58@gotmask
  00534	00 00 00 00	 DD	 $LN59@gotmask
  00538	00 00 00 00	 DD	 $LN60@gotmask
  0053c	00 00 00 00	 DD	 $LN61@gotmask
  00540	00 00 00 00	 DD	 $LN62@gotmask
  00544	00 00 00 00	 DD	 $LN63@gotmask
  00548	00 00 00 00	 DD	 $LN64@gotmask
  0054c	00 00 00 00	 DD	 $LN65@gotmask
  00550	00 00 00 00	 DD	 $LN66@gotmask
  00554	00 00 00 00	 DD	 $LN80@gotmask
  00558	00 00 00 00	 DD	 $LN67@gotmask
  0055c	00 00 00 00	 DD	 $LN68@gotmask
  00560	00 00 00 00	 DD	 $LN69@gotmask
  00564	00 00 00 00	 DD	 $LN70@gotmask
  00568	00 00 00 00	 DD	 $LN80@gotmask
  0056c	00 00 00 00	 DD	 $LN71@gotmask
  00570	00 00 00 00	 DD	 $LN72@gotmask
  00574	00 00 00 00	 DD	 $LN80@gotmask
  00578	00 00 00 00	 DD	 $LN80@gotmask
  0057c	00 00 00 00	 DD	 $LN80@gotmask
  00580	00 00 00 00	 DD	 $LN80@gotmask
  00584	00 00 00 00	 DD	 $LN80@gotmask
  00588	00 00 00 00	 DD	 $LN80@gotmask
  0058c	00 00 00 00	 DD	 $LN80@gotmask
  00590	00 00 00 00	 DD	 $LN73@gotmask
  00594	00 00 00 00	 DD	 $LN74@gotmask
  00598	00 00 00 00	 DD	 $LN75@gotmask
  0059c	00 00 00 00	 DD	 $LN76@gotmask
  005a0	00 00 00 00	 DD	 $LN77@gotmask
  005a4	00 00 00 00	 DD	 $LN78@gotmask
  005a8	00 00 00 00	 DD	 $LN80@gotmask
  005ac	00 00 00 00	 DD	 $LN79@gotmask
$LN86@gotmask:
  005b0	00 00 00 00	 DD	 $LN24@gotmask
  005b4	00 00 00 00	 DD	 $LN25@gotmask
  005b8	00 00 00 00	 DD	 $LN26@gotmask
  005bc	00 00 00 00	 DD	 $LN27@gotmask
  005c0	00 00 00 00	 DD	 $LN28@gotmask
  005c4	00 00 00 00	 DD	 $LN29@gotmask
  005c8	00 00 00 00	 DD	 $LN80@gotmask
$LN85@gotmask:
  005cc	00		 DB	 0
  005cd	01		 DB	 1
  005ce	02		 DB	 2
  005cf	06		 DB	 6
  005d0	06		 DB	 6
  005d1	06		 DB	 6
  005d2	03		 DB	 3
  005d3	06		 DB	 6
  005d4	06		 DB	 6
  005d5	06		 DB	 6
  005d6	06		 DB	 6
  005d7	06		 DB	 6
  005d8	06		 DB	 6
  005d9	06		 DB	 6
  005da	06		 DB	 6
  005db	06		 DB	 6
  005dc	06		 DB	 6
  005dd	06		 DB	 6
  005de	06		 DB	 6
  005df	06		 DB	 6
  005e0	06		 DB	 6
  005e1	06		 DB	 6
  005e2	06		 DB	 6
  005e3	06		 DB	 6
  005e4	06		 DB	 6
  005e5	06		 DB	 6
  005e6	06		 DB	 6
  005e7	06		 DB	 6
  005e8	06		 DB	 6
  005e9	06		 DB	 6
  005ea	06		 DB	 6
  005eb	06		 DB	 6
  005ec	06		 DB	 6
  005ed	06		 DB	 6
  005ee	06		 DB	 6
  005ef	06		 DB	 6
  005f0	06		 DB	 6
  005f1	06		 DB	 6
  005f2	06		 DB	 6
  005f3	06		 DB	 6
  005f4	06		 DB	 6
  005f5	06		 DB	 6
  005f6	06		 DB	 6
  005f7	06		 DB	 6
  005f8	06		 DB	 6
  005f9	06		 DB	 6
  005fa	06		 DB	 6
  005fb	06		 DB	 6
  005fc	06		 DB	 6
  005fd	06		 DB	 6
  005fe	06		 DB	 6
  005ff	06		 DB	 6
  00600	06		 DB	 6
  00601	06		 DB	 6
  00602	04		 DB	 4
  00603	06		 DB	 6
  00604	05		 DB	 5
gotmask	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
i$1 = 80
percent$ = 88
currpos$ = 96
$T2 = 104
tv67 = 112
scale$3 = 120
__$ArrayPad$ = 176
show_file_progress PROC

; 127  : {

  00000	40 57		 push	 rdi
  00002	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 128  :     off_t   currpos;
; 129  :     double  percent;
; 130  : 
; 131  :     if ((currpos = ftell( inf )) < 0)

  0001b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR inf
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__ftelli64
  00028	48 89 44 24 60	 mov	 QWORD PTR currpos$[rsp], rax
  0002d	48 83 7c 24 60
	00		 cmp	 QWORD PTR currpos$[rsp], 0
  00033	7d 7b		 jge	 SHORT $LN5@show_file_

; 132  :     {
; 133  :         // "Error in function %s: %s"
; 134  :         FWRMSG( stderr, HHC00075, "E", "ftell", strerror( errno ));

  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0003b	8b 08		 mov	 ecx, DWORD PTR [rax]
  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00043	48 89 44 24 70	 mov	 QWORD PTR tv67[rsp], rax
  00048	b9 02 00 00 00	 mov	 ecx, 2
  0004d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00053	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv67[rsp]
  00058	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159119
  00064	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159120
  00070	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159121
  0007c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00081	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00086	41 b9 03 00 00
	00		 mov	 r9d, 3
  0008c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159122
  00093	ba 86 00 00 00	 mov	 edx, 134		; 00000086H
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159123
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 135  :         exit( -1 );

  000a5	b9 ff ff ff ff	 mov	 ecx, -1
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN5@show_file_:

; 136  :     }
; 137  : 
; 138  :     percent = ((double) currpos) / filesize;

  000b0	f2 48 0f 2a 44
	24 60		 cvtsi2sd xmm0, QWORD PTR currpos$[rsp]
  000b7	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR filesize
  000bf	f2 0f 11 44 24
	58		 movsd	 QWORD PTR percent$[rsp], xmm0

; 139  :     percent *= 100.0;

  000c5	f2 0f 10 44 24
	58		 movsd	 xmm0, QWORD PTR percent$[rsp]
  000cb	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4059000000000000
  000d3	f2 0f 11 44 24
	58		 movsd	 QWORD PTR percent$[rsp], xmm0

; 140  : 
; 141  :     if (extgui)

  000d9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  000e0	83 38 00	 cmp	 DWORD PTR [rax], 0
  000e3	74 2b		 je	 SHORT $LN6@show_file_

; 142  :         fprintf( stderr, "PCT=%.0f\n", percent );

  000e5	b9 02 00 00 00	 mov	 ecx, 2
  000ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000f0	f2 0f 10 54 24
	58		 movsd	 xmm2, QWORD PTR percent$[rsp]
  000f6	66 49 0f 7e d0	 movq	 r8, xmm2
  000fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159126
  00102	48 8b c8	 mov	 rcx, rax
  00105	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
  0010b	e9 b9 00 00 00	 jmp	 $LN7@show_file_
$LN6@show_file_:

; 143  :     else if (err_istty)

  00110	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR err_istty
  00117	85 c0		 test	 eax, eax
  00119	0f 84 aa 00 00
	00		 je	 $LN8@show_file_

; 144  :     {
; 145  :         char scale[50+1];
; 146  :         int i;
; 147  : 
; 148  :         /* Draw a nice scale too */
; 149  :         memset( scale, '.', 50 );

  0011f	48 8d 44 24 78	 lea	 rax, QWORD PTR scale$3[rsp]
  00124	48 8b f8	 mov	 rdi, rax
  00127	b8 2e 00 00 00	 mov	 eax, 46			; 0000002eH
  0012c	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00131	f3 aa		 rep stosb

; 150  :         for (i=1; i <= 50; ++i)         // (50 = 2 percent per position)

  00133	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR i$1[rsp], 1
  0013b	eb 0a		 jmp	 SHORT $LN4@show_file_
$LN2@show_file_:
  0013d	8b 44 24 50	 mov	 eax, DWORD PTR i$1[rsp]
  00141	ff c0		 inc	 eax
  00143	89 44 24 50	 mov	 DWORD PTR i$1[rsp], eax
$LN4@show_file_:
  00147	83 7c 24 50 32	 cmp	 DWORD PTR i$1[rsp], 50	; 00000032H
  0014c	7f 29		 jg	 SHORT $LN3@show_file_

; 151  :         {
; 152  :             if (percent >= (i << 1))    // (percent greater than here?)

  0014e	8b 44 24 50	 mov	 eax, DWORD PTR i$1[rsp]
  00152	d1 e0		 shl	 eax, 1
  00154	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00158	f2 0f 10 4c 24
	58		 movsd	 xmm1, QWORD PTR percent$[rsp]
  0015e	66 0f 2f c8	 comisd	 xmm1, xmm0
  00162	72 0f		 jb	 SHORT $LN9@show_file_

; 153  :                 scale[i-1] = '*';

  00164	8b 44 24 50	 mov	 eax, DWORD PTR i$1[rsp]
  00168	ff c8		 dec	 eax
  0016a	48 98		 cdqe
  0016c	c6 44 04 78 2a	 mov	 BYTE PTR scale$3[rsp+rax], 42 ; 0000002aH
  00171	eb 02		 jmp	 SHORT $LN10@show_file_
$LN9@show_file_:

; 154  :             else
; 155  :                 break;

  00173	eb 02		 jmp	 SHORT $LN3@show_file_
$LN10@show_file_:

; 156  :         }

  00175	eb c6		 jmp	 SHORT $LN2@show_file_
$LN3@show_file_:

; 157  :         scale[50] = 0;

  00177	b8 01 00 00 00	 mov	 eax, 1
  0017c	48 6b c0 32	 imul	 rax, rax, 50		; 00000032H
  00180	48 89 44 24 68	 mov	 QWORD PTR $T2[rsp], rax
  00185	48 83 7c 24 68
	33		 cmp	 QWORD PTR $T2[rsp], 51	; 00000033H
  0018b	73 02		 jae	 SHORT $LN12@show_file_
  0018d	eb 05		 jmp	 SHORT $LN13@show_file_
$LN12@show_file_:
  0018f	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN13@show_file_:
  00194	48 8b 44 24 68	 mov	 rax, QWORD PTR $T2[rsp]
  00199	c6 44 04 78 00	 mov	 BYTE PTR scale$3[rsp+rax], 0

; 158  : 
; 159  :         fprintf( stderr, "%.0f%% of file processed...   [%s]\r",

  0019e	b9 02 00 00 00	 mov	 ecx, 2
  001a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001a9	4c 8d 4c 24 78	 lea	 r9, QWORD PTR scale$3[rsp]
  001ae	f2 0f 10 54 24
	58		 movsd	 xmm2, QWORD PTR percent$[rsp]
  001b4	66 49 0f 7e d0	 movq	 r8, xmm2
  001b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159130
  001c0	48 8b c8	 mov	 rcx, rax
  001c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN8@show_file_:
$LN7@show_file_:
$LN11@show_file_:

; 160  :             percent, scale );
; 161  :     }
; 162  : }

  001c9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001d1	48 33 cc	 xor	 rcx, rsp
  001d4	e8 00 00 00 00	 call	 __security_check_cookie
  001d9	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  001e0	5f		 pop	 rdi
  001e1	c3		 ret	 0
show_file_progress ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfprint.c
_TEXT	SEGMENT
show_usage PROC

; 116  : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 117  :     fprintf( stderr, "\n" );

  00004	b9 02 00 00 00	 mov	 ecx, 2
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159101
  00016	48 8b c8	 mov	 rcx, rax
  00019	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf

; 118  :     FWRMSG( stderr, HHC03200, "I", pgm );

  0001f	b9 02 00 00 00	 mov	 ecx, 2
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0002a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR pgm
  00031	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159102
  0003d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159103
  00049	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0004e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00053	41 b9 03 00 00
	00		 mov	 r9d, 3
  00059	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159104
  00060	ba 76 00 00 00	 mov	 edx, 118		; 00000076H
  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159105
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 119  :     fprintf( stderr, "\n" );

  00072	b9 02 00 00 00	 mov	 ecx, 2
  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159106
  00084	48 8b c8	 mov	 rcx, rax
  00087	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf

; 120  :     exit( -1 );

  0008d	b9 ff ff ff ff	 mov	 ecx, -1
  00092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN2@show_usage:

; 121  : }

  00098	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009c	c3		 ret	 0
show_usage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_dw_noswap
_TEXT	SEGMENT
ptr$ = 8
value$ = 16
store_dw_noswap PROC					; COMDAT

; 834  :     inline void store_dw_noswap(void *ptr, U64 value) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 835  :       memcpy((BYTE *)ptr, (BYTE *)&value, 8);

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR ptr$[rsp]
  0000f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR value$[rsp]
  00014	48 89 08	 mov	 QWORD PTR [rax], rcx

; 836  :     }

  00017	c3		 ret	 0
store_dw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dbgtrace.h
_TEXT	SEGMENT
buffsize$ = 48
rc$ = 52
chunksize$ = 56
buffer$ = 64
args$ = 72
fmt$ = 96
DebuggerTrace PROC

; 94   :   static inline void DebuggerTrace(char* fmt, ...) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 95   :       const int chunksize = 512;

  00018	c7 44 24 38 00
	02 00 00	 mov	 DWORD PTR chunksize$[rsp], 512 ; 00000200H

; 96   :       int buffsize = 0;

  00020	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR buffsize$[rsp], 0

; 97   :       char* buffer = NULL;

  00028	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR buffer$[rsp], 0

; 98   :       int rc = -1;

  00031	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 99   :       va_list args;
; 100  :       va_start( args, fmt );

  00039	48 8d 44 24 68	 lea	 rax, QWORD PTR fmt$[rsp+8]
  0003e	48 89 44 24 48	 mov	 QWORD PTR args$[rsp], rax
$LN9@DebuggerTr:
$LN4@DebuggerTr:

; 101  :       do {
; 102  :           if (buffer) free( buffer );

  00043	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00049	74 0b		 je	 SHORT $LN5@DebuggerTr
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN5@DebuggerTr:

; 103  :           buffsize += chunksize;

  00056	8b 44 24 38	 mov	 eax, DWORD PTR chunksize$[rsp]
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0005e	03 c8		 add	 ecx, eax
  00060	8b c1		 mov	 eax, ecx
  00062	89 44 24 30	 mov	 DWORD PTR buffsize$[rsp], eax

; 104  :           buffer = malloc( buffsize + 1 );

  00066	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  0006a	ff c0		 inc	 eax
  0006c	48 98		 cdqe
  0006e	48 8b c8	 mov	 rcx, rax
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00077	48 89 44 24 40	 mov	 QWORD PTR buffer$[rsp], rax

; 105  :           if (!buffer) BREAK_INTO_DEBUGGER();

  0007c	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00082	75 01		 jne	 SHORT $LN6@DebuggerTr
  00084	cc		 int	 3
$LN6@DebuggerTr:

; 106  :           rc = _vsnprintf_s( buffer, buffsize+1, buffsize, fmt, args);

  00085	48 63 44 24 30	 movsxd	 rax, DWORD PTR buffsize$[rsp]
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0008e	ff c1		 inc	 ecx
  00090	48 63 c9	 movsxd	 rcx, ecx
  00093	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00098	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0009d	4c 8b 4c 24 60	 mov	 r9, QWORD PTR fmt$[rsp]
  000a2	4c 8b c0	 mov	 r8, rax
  000a5	48 8b d1	 mov	 rdx, rcx
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000ad	e8 00 00 00 00	 call	 _vsnprintf_s
  000b2	89 44 24 34	 mov	 DWORD PTR rc$[rsp], eax

; 107  :       } while (rc < 0 || rc >= buffsize);

  000b6	83 7c 24 34 00	 cmp	 DWORD PTR rc$[rsp], 0
  000bb	7c 86		 jl	 SHORT $LN4@DebuggerTr
  000bd	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  000c1	39 44 24 34	 cmp	 DWORD PTR rc$[rsp], eax
  000c5	0f 8d 78 ff ff
	ff		 jge	 $LN9@DebuggerTr

; 108  :       OutputDebugStringA( buffer ); /* send to debugger pane */

  000cb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 109  :       if (buffer) free( buffer );

  000d6	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  000dc	74 0b		 je	 SHORT $LN7@DebuggerTr
  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@DebuggerTr:

; 110  :       va_end( args );

  000e9	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0

; 111  :   }

  000f2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f6	c3		 ret	 0
DebuggerTrace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\time.h
_TEXT	SEGMENT
_Time$ = 48
time	PROC

; 521  :         {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 522  :             return _time64(_Time);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64

; 523  :         }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\time.h
_TEXT	SEGMENT
_Tm$ = 48
mktime	PROC

; 514  :         {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 515  :             return _mktime64(_Tm);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Tm$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__mktime64

; 516  :         }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
mktime	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\time.h
_TEXT	SEGMENT
_Time$ = 48
gmtime	PROC

; 490  :         {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 491  :             return _gmtime64(_Time);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__gmtime64

; 492  :         }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
gmtime	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\time.h
_TEXT	SEGMENT
_Time1$ = 48
_Time2$ = 56
difftime PROC

; 483  :         {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 484  :             return _difftime64(_Time1, _Time2);

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Time2$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time1$[rsp]
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__difftime64

; 485  :         }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
difftime ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sscanf	PROC						; COMDAT

; 2247 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsscanf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2252 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2253 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2254 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2152 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2153 :         return __stdio_common_vsscanf(

  00018	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  0003d	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_MaxCount$ = 80
_Format$ = 88
_ArgList$ = 96
_vsnprintf_s PROC					; COMDAT

; 1598 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1599 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00022	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0002b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Format$[rsp]
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR _MaxCount$[rsp]
  00035	48 8b 54 24 48	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0003f	e8 00 00 00 00	 call	 _vsnprintf_s_l

; 1600 :     }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
_vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s_l
_TEXT	SEGMENT
_Result$ = 64
tv74 = 68
_Buffer$ = 96
_BufferCount$ = 104
_MaxCount$ = 112
_Format$ = 120
_Locale$ = 128
_ArgList$ = 136
_vsnprintf_s_l PROC					; COMDAT

; 1577 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1578 :         int const _Result = __stdio_common_vsnprintf_s(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00032	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00037	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Format$[rsp]
  0003c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00041	4c 8b 4c 24 70	 mov	 r9, QWORD PTR _MaxCount$[rsp]
  00046	4c 8b 44 24 68	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  0004b	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00050	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsnprintf_s
  00059	89 44 24 40	 mov	 DWORD PTR _Result$[rsp], eax

; 1579 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1580 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1581 : 
; 1582 :         return _Result < 0 ? -1 : _Result;

  0005d	83 7c 24 40 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00062	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  00064	c7 44 24 44 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  0006c	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0006e	8b 44 24 40	 mov	 eax, DWORD PTR _Result$[rsp]
  00072	89 44 24 44	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  00076	8b 44 24 44	 mov	 eax, DWORD PTR tv74[rsp]

; 1583 :     }

  0007a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0007e	c3		 ret	 0
_vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Format$ = 64
printf	PROC						; COMDAT

; 956  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 48	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00022	b9 01 00 00 00	 mov	 ecx, 1
  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0002d	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00032	45 33 c0	 xor	 r8d, r8d
  00035	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Format$[rsp]
  0003a	48 8b c8	 mov	 rcx, rax
  0003d	e8 00 00 00 00	 call	 _vfprintf_l
  00042	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 961  :         __crt_va_end(_ArgList);

  00046	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 962  :         return _Result;

  0004f	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 963  :     }

  00053	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00057	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 644  :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  0002c	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00031	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Stream$[rsp]
  00036	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf

; 646  :     }

  0003f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00043	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00007	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
