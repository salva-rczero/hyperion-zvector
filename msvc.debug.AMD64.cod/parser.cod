; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	parser
EXTRN	__imp__stricmp:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	strtok_r:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sscanf
pdata	ENDS
pdata	SEGMENT
$pdata$parser DD imagerel $LN11
	DD	imagerel $LN11+250
	DD	imagerel $unwind$parser
pdata	ENDS
_DATA	SEGMENT
$SG159079 DB	'=', 00H
	ORG $+2
$SG159080 DB	'=', 00H
_DATA	ENDS
xdata	SEGMENT
$unwind$parser DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\parser.c
_TEXT	SEGMENT
ndx$ = 32
val$ = 40
strtok_str$ = 48
key$ = 56
pp$ = 80
str$ = 88
res$ = 96
parser	PROC

; 116  : {

$LN11:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 117  :     int ndx;
; 118  :     char *key;
; 119  :     char *val;
; 120  :     char *strtok_str = NULL;

  00013	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR strtok_str$[rsp], 0

; 121  : 
; 122  :     ndx = 1;

  0001c	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR ndx$[rsp], 1

; 123  :     key = strtok_r(  str, "=", &strtok_str );

  00024	4c 8d 44 24 30	 lea	 r8, QWORD PTR strtok_str$[rsp]
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159079
  00030	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00035	e8 00 00 00 00	 call	 strtok_r
  0003a	48 89 44 24 38	 mov	 QWORD PTR key$[rsp], rax

; 124  :     val = strtok_r( NULL, "=", &strtok_str  );

  0003f	4c 8d 44 24 30	 lea	 r8, QWORD PTR strtok_str$[rsp]
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159080
  0004b	33 c9		 xor	 ecx, ecx
  0004d	e8 00 00 00 00	 call	 strtok_r
  00052	48 89 44 24 28	 mov	 QWORD PTR val$[rsp], rax
$LN2@parser:

; 125  : 
; 126  :     while( pp->key != NULL )

  00057	48 8b 44 24 50	 mov	 rax, QWORD PTR pp$[rsp]
  0005c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00060	0f 84 8d 00 00
	00		 je	 $LN3@parser

; 127  :     {
; 128  :         if( strcasecmp( key, pp->key ) == 0 )

  00066	48 8b 44 24 50	 mov	 rax, QWORD PTR pp$[rsp]
  0006b	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0006e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$[rsp]
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00079	85 c0		 test	 eax, eax
  0007b	75 59		 jne	 SHORT $LN4@parser

; 129  :         {
; 130  :             if( pp->fmt == NULL )

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR pp$[rsp]
  00082	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00087	75 12		 jne	 SHORT $LN5@parser

; 131  :             {
; 132  :                 if( val != NULL )

  00089	48 83 7c 24 28
	00		 cmp	 QWORD PTR val$[rsp], 0
  0008f	74 08		 je	 SHORT $LN7@parser

; 133  :                 {
; 134  :                     return( -ndx );

  00091	8b 44 24 20	 mov	 eax, DWORD PTR ndx$[rsp]
  00095	f7 d8		 neg	 eax
  00097	eb 5c		 jmp	 SHORT $LN1@parser
$LN7@parser:

; 135  :                 }
; 136  :             }

  00099	eb 35		 jmp	 SHORT $LN6@parser
$LN5@parser:

; 137  :             else
; 138  :             {
; 139  :                 if( val == NULL )

  0009b	48 83 7c 24 28
	00		 cmp	 QWORD PTR val$[rsp], 0
  000a1	75 08		 jne	 SHORT $LN8@parser

; 140  :                 {
; 141  :                     return( -ndx );

  000a3	8b 44 24 20	 mov	 eax, DWORD PTR ndx$[rsp]
  000a7	f7 d8		 neg	 eax
  000a9	eb 4a		 jmp	 SHORT $LN1@parser
$LN8@parser:

; 142  :                 }
; 143  : 
; 144  :                 if( sscanf( val, pp->fmt, res ) != 1 )

  000ab	4c 8b 44 24 60	 mov	 r8, QWORD PTR res$[rsp]
  000b0	48 8b 44 24 50	 mov	 rax, QWORD PTR pp$[rsp]
  000b5	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  000b9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR val$[rsp]
  000be	e8 00 00 00 00	 call	 sscanf
  000c3	83 f8 01	 cmp	 eax, 1
  000c6	74 08		 je	 SHORT $LN9@parser

; 145  :                 {
; 146  :                     return( -ndx );

  000c8	8b 44 24 20	 mov	 eax, DWORD PTR ndx$[rsp]
  000cc	f7 d8		 neg	 eax
  000ce	eb 25		 jmp	 SHORT $LN1@parser
$LN9@parser:
$LN6@parser:

; 147  :                 }
; 148  :             }
; 149  : 
; 150  :             return( ndx );

  000d0	8b 44 24 20	 mov	 eax, DWORD PTR ndx$[rsp]
  000d4	eb 1f		 jmp	 SHORT $LN1@parser
$LN4@parser:

; 151  :         }
; 152  :         pp++;

  000d6	48 8b 44 24 50	 mov	 rax, QWORD PTR pp$[rsp]
  000db	48 83 c0 10	 add	 rax, 16
  000df	48 89 44 24 50	 mov	 QWORD PTR pp$[rsp], rax

; 153  :         ndx++;

  000e4	8b 44 24 20	 mov	 eax, DWORD PTR ndx$[rsp]
  000e8	ff c0		 inc	 eax
  000ea	89 44 24 20	 mov	 DWORD PTR ndx$[rsp], eax

; 154  :     }

  000ee	e9 64 ff ff ff	 jmp	 $LN2@parser
$LN3@parser:

; 155  : 
; 156  :     return( 0 );

  000f3	33 c0		 xor	 eax, eax
$LN1@parser:

; 157  : }

  000f5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f9	c3		 ret	 0
parser	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sscanf	PROC						; COMDAT

; 2247 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsscanf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2252 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2253 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2254 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2152 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2153 :         return __stdio_common_vsscanf(

  00018	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  0003d	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00007	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
END
