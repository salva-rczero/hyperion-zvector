; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	curpos
PUBLIC	prevpos
_BSS	SEGMENT
curpos	DD	01H DUP (?)
prevpos	DD	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	main
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp__errno:PROC
EXTRN	__imp_exit:PROC
EXTRN	__imp_atoi:PROC
EXTRN	__imp_close:PROC
EXTRN	__imp_read:PROC
EXTRN	__imp_write:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_initialize_utility:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_w32_fprintf:PROC
EXTRN	__imp_w32_hopen:PROC
EXTRN	__imp_guest_to_host:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memcmp:PROC
EXTRN	__imp_extgui:DWORD
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
buf	DB	0200000H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN48
	DD	imagerel $LN48+3470
	DD	imagerel $unwind$main
pdata	ENDS
_DATA	SEGMENT
vollbl	DB	0e5H, 0d6H, 0d3H, 00H
hdrlbl	DB	0c8H, 0c4H, 0d9H, 00H
eoflbl	DB	0c5H, 0d6H, 0c6H, 00H
eovlbl	DB	0c5H, 0d6H, 0e5H, 00H
$SG169253 DB	'Split AWS tape into pieces', 00H
	ORG $+5
$SG169254 DB	'tapesplt', 00H
	ORG $+3
$SG169257 DB	'I', 00H
	ORG $+2
$SG169258 DB	'HHC02725%s Usage: %s infilename outfilename [nnn] [outfi'
	DB	'lename [nnn]] ...', 0aH, 'HHC02725I ''nnn'' specifies how man'
	DB	'y tapemark-separated files to copy to the', 0aH, 'HHC02725I s'
	DB	'pecified outfilename. If nnn is not given 32767 is used inste'
	DB	'ad.', 0aH, 00H
	ORG $+2
$SG169259 DB	'main', 00H
	ORG $+3
$SG169262 DB	'E', 00H
	ORG $+2
$SG169260 DB	'tapesplt.c', 00H
	ORG $+1
$SG169266 DB	'I', 00H
	ORG $+2
$SG169263 DB	'HHC02715%s Tape %s: Error opening: errno=%d: %s', 0aH, 00H
	ORG $+3
$SG169264 DB	'main', 00H
	ORG $+3
$SG169271 DB	'E', 00H
	ORG $+2
$SG169265 DB	'tapesplt.c', 00H
	ORG $+1
$SG169279 DB	'E', 00H
	ORG $+2
$SG169267 DB	'HHC02740%s File %s: writing output file', 0aH, 00H
	ORG $+3
$SG169268 DB	'main', 00H
	ORG $+3
$SG169285 DB	'E', 00H
	ORG $+2
$SG169269 DB	'tapesplt.c', 00H
	ORG $+1
$SG169294 DB	'I', 00H
	ORG $+2
$SG169272 DB	'HHC02715%s Tape %s: Error opening: errno=%d: %s', 0aH, 00H
	ORG $+3
$SG169273 DB	'main', 00H
	ORG $+3
$SG169300 DB	'E', 00H
	ORG $+2
$SG169274 DB	'tapesplt.c', 00H
	ORG $+1
$SG169307 DB	'I', 00H
	ORG $+2
$SG169278 DB	'AWSTAPE', 00H
$SG169280 DB	'HHC02707%s File %s: Error reading %s header: rc=%d, errn'
	DB	'o=%d: %s', 0aH, 00H
	ORG $+2
$SG169281 DB	'main', 00H
	ORG $+3
$SG169316 DB	'E', 00H
	ORG $+2
$SG169282 DB	'tapesplt.c', 00H
	ORG $+1
$SG169321 DB	'E', 00H
	ORG $+2
$SG169284 DB	'AWSTAPE', 00H
$SG169286 DB	'HHC02741%s File %s: Error, incomplete %s header', 0aH, 00H
	ORG $+3
$SG169287 DB	'main', 00H
	ORG $+3
$SG169327 DB	'E', 00H
	ORG $+2
$SG169288 DB	'tapesplt.c', 00H
	ORG $+1
$SG169337 DB	'E', 00H
	ORG $+2
$SG169292 DB	'IPOS=%ld', 0aH, 00H
	ORG $+2
$SG169343 DB	'I', 00H
	ORG $+2
$SG169295 DB	'HHC02704%s End of tape', 0aH, 00H
$SG169296 DB	'main', 00H
	ORG $+3
$SG169297 DB	'tapesplt.c', 00H
	ORG $+5
$SG169299 DB	'AWSTAPE', 00H
$SG169301 DB	'HHC02711%s File %s: Error writing %s header: rc=%d, errn'
	DB	'o=%d: %s', 0aH, 00H
	ORG $+2
$SG169302 DB	'main', 00H
	ORG $+7
$SG169303 DB	'tapesplt.c', 00H
	ORG $+5
$SG169308 DB	'HHC02721%s File No. %u: Blocks=%u, Bytes=%lld, Block siz'
	DB	'e min=%u, max=%u, avg=%u', 0aH, 00H
	ORG $+2
$SG169309 DB	'main', 00H
	ORG $+7
$SG169310 DB	'tapesplt.c', 00H
	ORG $+5
$SG169315 DB	'AWSTAPE', 00H
$SG169318 DB	'main', 00H
	ORG $+3
$SG169317 DB	'HHC02709%s File %s: Error reading %s data block: rc=%d, '
	DB	'errno=%d: %s', 0aH, 00H
	ORG $+2
$SG169319 DB	'tapesplt.c', 00H
	ORG $+1
$SG169323 DB	'main', 00H
	ORG $+7
$SG169322 DB	'HHC02742%s File %s: Error, incomplete final data block: '
	DB	'expected %d bytes, read %d', 0aH, 00H
	ORG $+4
$SG169324 DB	'tapesplt.c', 00H
	ORG $+5
$SG169326 DB	'AWSTAPE', 00H
$SG169328 DB	'HHC02743%s File %s: Error, %s header block without data', 0aH
	DB	00H
	ORG $+3
$SG169329 DB	'main', 00H
	ORG $+7
$SG169330 DB	'tapesplt.c', 00H
	ORG $+5
$SG169334 DB	'IPOS=%ld', 0aH, 00H
	ORG $+6
$SG169336 DB	'AWSTAPE', 00H
$SG169338 DB	'HHC02712%s File %s: Error writing %s data block: rc=%d, '
	DB	'errno=%d: %s', 0aH, 00H
	ORG $+2
$SG169339 DB	'main', 00H
	ORG $+3
$SG169340 DB	'tapesplt.c', 00H
	ORG $+5
$SG169344 DB	'HHC02722%s Tape Label: %s', 0aH, 00H
	ORG $+1
$SG169345 DB	'main', 00H
	ORG $+7
$SG169346 DB	'tapesplt.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main
	DD	01cH
	DD	0d74H
voltbl	ENDS
xdata	SEGMENT
$unwind$main DD	042419H
	DD	0590112H
	DD	0600a700bH
	DD	imagerel __GSHandlerCheck
	DD	02b0H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapesplt.c
_TEXT	SEGMENT
len$ = 112
curblkl$ = 116
blkcount$ = 120
outfilenum$ = 124
rc$ = 128
i$ = 132
minblksz$ = 136
outfd$ = 140
infd$ = 144
maxblksz$ = 148
fileno$ = 152
outfilecount$ = 156
infilename$ = 160
files2copy$ = 168
file_bytes$ = 176
outfilename$ = 184
tv318 = 192
$T1 = 200
pgm$ = 208
tv94 = 216
tv130 = 224
tv166 = 232
tv170 = 240
tv196 = 248
tv200 = 256
tv288 = 264
tv292 = 272
tv355 = 280
tv359 = 288
tv419 = 296
tv423 = 304
awshdr$ = 312
labelrec$ = 320
pathname$ = 416
__$ArrayPad$ = 688
argc$ = 736
argv$ = 744
main	PROC

; 41   : {

$LN48:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	56		 push	 rsi
  0000a	57		 push	 rdi
  0000b	48 81 ec c8 02
	00 00		 sub	 rsp, 712		; 000002c8H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 42   : char           *pgm;                    /* less any extension (.ext) */
; 43   : int             rc;                     /* Return code               */
; 44   : int             i;                      /* Array subscript           */
; 45   : int             len;                    /* Block length              */
; 46   : char           *infilename;             /* -> Input file name        */
; 47   : char           *outfilename;            /* -> Current out file name  */
; 48   : int             infd = -1;              /* Input file descriptor     */

  00024	c7 84 24 90 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR infd$[rsp], -1

; 49   : int             outfd = -1;             /* Current out file desc     */

  0002f	c7 84 24 8c 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR outfd$[rsp], -1

; 50   : int             fileno;                 /* Tape file number          */
; 51   : int             blkcount;               /* Block count               */
; 52   : int             curblkl;                /* Current block length      */
; 53   : int             minblksz;               /* Minimum block size        */
; 54   : int             maxblksz;               /* Maximum block size        */
; 55   : int64_t         file_bytes;             /* File byte count           */
; 56   : int             outfilenum;             /* Current out file# in argv */
; 57   : int             outfilecount;           /* Current # files copied    */
; 58   : int             files2copy;             /* Current # files to copy   */
; 59   : BYTE            labelrec[81];           /* Standard label (ASCIIZ)   */
; 60   : AWSTAPE_BLKHDR  awshdr;                 /* AWSTAPE block header      */
; 61   : char            pathname[MAX_PATH];     /* file path in host format  */
; 62   : 
; 63   :     INITIALIZE_UTILITY( UTILITY_NAME, UTILITY_DESC, &pgm );

  0003a	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR pgm$[rsp]
  00042	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00047	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169253
  0004e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169254
  00055	48 8b 94 24 e8
	02 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0005d	8b 8c 24 e0 02
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_initialize_utility
  0006a	89 84 24 e0 02
	00 00		 mov	 DWORD PTR argc$[rsp], eax

; 64   : 
; 65   :     /* The only argument is the tape image file name */
; 66   :     if (argc > 3 && argv[1] != NULL)

  00071	83 bc 24 e0 02
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00079	7e 37		 jle	 SHORT $LN17@main
  0007b	b8 08 00 00 00	 mov	 eax, 8
  00080	48 6b c0 01	 imul	 rax, rax, 1
  00084	48 8b 8c 24 e8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0008c	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00091	74 1f		 je	 SHORT $LN17@main

; 67   :     {
; 68   :         infilename = argv[1];

  00093	b8 08 00 00 00	 mov	 eax, 8
  00098	48 6b c0 01	 imul	 rax, rax, 1
  0009c	48 8b 8c 24 e8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000a4	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000a8	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR infilename$[rsp], rax

; 69   :     }

  000b0	eb 5f		 jmp	 SHORT $LN18@main
$LN17@main:

; 70   :     else
; 71   :     {
; 72   :         // "Usage: %s ...
; 73   :         WRMSG( HHC02725, "I", pgm );

  000b2	b9 01 00 00 00	 mov	 ecx, 1
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000bd	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  000c5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169257
  000d1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169258
  000dd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000e2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e7	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ed	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169259
  000f4	ba 49 00 00 00	 mov	 edx, 73			; 00000049H
  000f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169260
  00100	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 74   :         exit (1);

  00106	b9 01 00 00 00	 mov	 ecx, 1
  0010b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN18@main:

; 75   :     }
; 76   : 
; 77   :     /* Open the tape device */
; 78   :     hostpath(pathname, infilename, sizeof(pathname));

  00111	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00117	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR infilename$[rsp]
  0011f	48 8d 8c 24 a0
	01 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  00127	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 79   :     infd = HOPEN (pathname, O_RDONLY | O_BINARY);

  0012d	ba 00 80 00 00	 mov	 edx, 32768		; 00008000H
  00132	48 8d 8c 24 a0
	01 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  0013a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  00140	89 84 24 90 00
	00 00		 mov	 DWORD PTR infd$[rsp], eax

; 80   :     if (infd < 0)

  00147	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR infd$[rsp], 0
  0014f	0f 8d 9e 00 00
	00		 jge	 $LN19@main

; 81   :     {
; 82   :         // "Tape %s: Error opening: errno=%d: %s"
; 83   :         FWRMSG( stderr, HHC02715, "E", infilename, errno, strerror( errno ));

  00155	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0015b	8b 08		 mov	 ecx, DWORD PTR [rax]
  0015d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00163	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv94[rsp], rax
  0016b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00171	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv130[rsp], rax
  00179	b9 02 00 00 00	 mov	 ecx, 2
  0017e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00184	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tv94[rsp]
  0018c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00191	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tv130[rsp]
  00199	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0019b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0019f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR infilename$[rsp]
  001a7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169262
  001b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169263
  001bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  001cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169264
  001d6	ba 53 00 00 00	 mov	 edx, 83			; 00000053H
  001db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169265
  001e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 84   :         exit (2);

  001e8	b9 02 00 00 00	 mov	 ecx, 2
  001ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN19@main:

; 85   :     }
; 86   : 
; 87   :     /* Copy blocks from input to output files */
; 88   :     fileno = 1;

  001f3	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR fileno$[rsp], 1

; 89   :     blkcount = 0;

  001fe	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR blkcount$[rsp], 0

; 90   :     minblksz = 0;

  00206	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR minblksz$[rsp], 0

; 91   :     maxblksz = 0;

  00211	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR maxblksz$[rsp], 0

; 92   :     file_bytes = 0;

  0021c	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR file_bytes$[rsp], 0

; 93   :     len = 0;

  00228	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR len$[rsp], 0

; 94   : 
; 95   :     for (outfilenum = 2; outfilenum < argc; outfilenum += 2)

  00230	c7 44 24 7c 02
	00 00 00	 mov	 DWORD PTR outfilenum$[rsp], 2
  00238	eb 0b		 jmp	 SHORT $LN4@main
$LN2@main:
  0023a	8b 44 24 7c	 mov	 eax, DWORD PTR outfilenum$[rsp]
  0023e	83 c0 02	 add	 eax, 2
  00241	89 44 24 7c	 mov	 DWORD PTR outfilenum$[rsp], eax
$LN4@main:
  00245	8b 84 24 e0 02
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  0024c	39 44 24 7c	 cmp	 DWORD PTR outfilenum$[rsp], eax
  00250	0f 8d 0f 0b 00
	00		 jge	 $LN3@main

; 96   :     {
; 97   :         outfilename = argv[outfilenum];

  00256	48 63 44 24 7c	 movsxd	 rax, DWORD PTR outfilenum$[rsp]
  0025b	48 8b 8c 24 e8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00263	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00267	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR outfilename$[rsp], rax

; 98   :         // "File %s: writing output file"
; 99   :         WRMSG( HHC02740, "I", outfilename );

  0026f	b9 01 00 00 00	 mov	 ecx, 1
  00274	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0027a	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR outfilename$[rsp]
  00282	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00287	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169266
  0028e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00293	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169267
  0029a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0029f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002a4	41 b9 03 00 00
	00		 mov	 r9d, 3
  002aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169268
  002b1	ba 63 00 00 00	 mov	 edx, 99			; 00000063H
  002b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169269
  002bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 100  :         hostpath(pathname, outfilename, sizeof(pathname));

  002c3	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  002c9	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR outfilename$[rsp]
  002d1	48 8d 8c 24 a0
	01 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  002d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 101  :         outfd = HOPEN (pathname, O_WRONLY | O_CREAT | O_BINARY | O_TRUNC,

  002df	41 b8 80 01 00
	00		 mov	 r8d, 384		; 00000180H
  002e5	ba 01 83 00 00	 mov	 edx, 33537		; 00008301H
  002ea	48 8d 8c 24 a0
	01 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  002f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  002f8	89 84 24 8c 00
	00 00		 mov	 DWORD PTR outfd$[rsp], eax

; 102  :                         S_IRUSR | S_IWUSR | S_IRGRP);
; 103  : 
; 104  :         if (outfd < 0)

  002ff	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR outfd$[rsp], 0
  00307	0f 8d 9e 00 00
	00		 jge	 $LN20@main

; 105  :         {
; 106  :             // "Tape %s: Error opening: errno=%d: %s"
; 107  :             FWRMSG( stderr, HHC02715, "E", outfilename, errno, strerror( errno ));

  0030d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00313	8b 08		 mov	 ecx, DWORD PTR [rax]
  00315	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0031b	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv166[rsp], rax
  00323	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00329	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv170[rsp], rax
  00331	b9 02 00 00 00	 mov	 ecx, 2
  00336	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0033c	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR tv166[rsp]
  00344	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00349	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv170[rsp]
  00351	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00353	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00357	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR outfilename$[rsp]
  0035f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00364	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169271
  0036b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00370	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169272
  00377	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0037c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00381	41 b9 03 00 00
	00		 mov	 r9d, 3
  00387	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169273
  0038e	ba 6b 00 00 00	 mov	 edx, 107		; 0000006bH
  00393	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169274
  0039a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 108  :             exit (3);

  003a0	b9 03 00 00 00	 mov	 ecx, 3
  003a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN20@main:

; 109  :         }
; 110  : 
; 111  :         if (outfilenum == argc)

  003ab	8b 84 24 e0 02
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  003b2	39 44 24 7c	 cmp	 DWORD PTR outfilenum$[rsp], eax
  003b6	75 0d		 jne	 SHORT $LN21@main

; 112  :         {
; 113  :             /* count not specified for last file, so use big number */
; 114  :             files2copy = 32767;

  003b8	c7 84 24 a8 00
	00 00 ff 7f 00
	00		 mov	 DWORD PTR files2copy$[rsp], 32767 ; 00007fffH

; 115  :         }

  003c3	eb 21		 jmp	 SHORT $LN22@main
$LN21@main:

; 116  :         else
; 117  :         {
; 118  :             files2copy = atoi(argv[outfilenum + 1]);

  003c5	8b 44 24 7c	 mov	 eax, DWORD PTR outfilenum$[rsp]
  003c9	ff c0		 inc	 eax
  003cb	48 98		 cdqe
  003cd	48 8b 8c 24 e8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003d5	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  003d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  003df	89 84 24 a8 00
	00 00		 mov	 DWORD PTR files2copy$[rsp], eax
$LN22@main:

; 119  :         }
; 120  : 
; 121  :         /* Copy just that many files */
; 122  :         for (outfilecount = 0; outfilecount < files2copy; )

  003e6	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR outfilecount$[rsp], 0
$LN5@main:
  003f1	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR files2copy$[rsp]
  003f8	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR outfilecount$[rsp], eax
  003ff	0f 8d 4e 09 00
	00		 jge	 $LN6@main

; 123  :         {
; 124  :             /* Read a block from the tape */
; 125  :             len = read (infd, buf, sizeof(AWSTAPE_BLKHDR));

  00405	41 b8 06 00 00
	00		 mov	 r8d, 6
  0040b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:buf
  00412	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR infd$[rsp]
  00419	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  0041f	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax

; 126  :             if (len < 0)

  00423	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  00428	0f 8d b2 00 00
	00		 jge	 $LN23@main

; 127  :             {
; 128  :                 // "File %s: Error reading %s header: rc=%d, errno=%d: %s"
; 129  :                 FWRMSG( stderr, HHC02707, "E", infilename, "AWSTAPE", len, errno, strerror( errno ));

  0042e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00434	8b 08		 mov	 ecx, DWORD PTR [rax]
  00436	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0043c	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv196[rsp], rax
  00444	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0044a	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv200[rsp], rax
  00452	b9 02 00 00 00	 mov	 ecx, 2
  00457	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0045d	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv196[rsp]
  00465	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0046a	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv200[rsp]
  00472	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00474	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00478	8b 4c 24 70	 mov	 ecx, DWORD PTR len$[rsp]
  0047c	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00480	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169278
  00487	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0048c	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR infilename$[rsp]
  00494	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00499	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169279
  004a0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169280
  004ac	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004b1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004b6	41 b9 03 00 00
	00		 mov	 r9d, 3
  004bc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169281
  004c3	ba 81 00 00 00	 mov	 edx, 129		; 00000081H
  004c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169282
  004cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 130  :                 exit (4);

  004d5	b9 04 00 00 00	 mov	 ecx, 4
  004da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN23@main:

; 131  :             }
; 132  : 
; 133  :             /* Did we finish too soon? */
; 134  :             if ((len > 0) && (len < (int)sizeof(AWSTAPE_BLKHDR)))

  004e0	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  004e5	7e 72		 jle	 SHORT $LN24@main
  004e7	83 7c 24 70 06	 cmp	 DWORD PTR len$[rsp], 6
  004ec	7d 6b		 jge	 SHORT $LN24@main

; 135  :             {
; 136  :                 // "File %s: Error, incomplete %s header"
; 137  :                 FWRMSG( stderr, HHC02741, "E", infilename, "AWSTAPE" );

  004ee	b9 02 00 00 00	 mov	 ecx, 2
  004f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169284
  00500	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00505	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR infilename$[rsp]
  0050d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00512	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169285
  00519	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0051e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169286
  00525	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0052a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0052f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00535	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169287
  0053c	ba 89 00 00 00	 mov	 edx, 137		; 00000089H
  00541	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169288
  00548	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 138  :                 exit(5);

  0054e	b9 05 00 00 00	 mov	 ecx, 5
  00553	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN24@main:

; 139  :             }
; 140  : 
; 141  :             if (extgui)

  00559	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00560	83 38 00	 cmp	 DWORD PTR [rax], 0
  00563	74 6f		 je	 SHORT $LN25@main

; 142  :             {
; 143  :                 curpos += len;

  00565	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  00569	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR curpos
  0056f	03 c8		 add	 ecx, eax
  00571	8b c1		 mov	 eax, ecx
  00573	89 05 00 00 00
	00		 mov	 DWORD PTR curpos, eax

; 144  :                 /* Report progress every nnnK */
; 145  :                 if( ( curpos & PROGRESS_MASK ) != ( prevpos & PROGRESS_MASK ) )

  00579	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR curpos
  0057f	25 00 00 fc ff	 and	 eax, -262144		; fffffffffffc0000H
  00584	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR prevpos
  0058a	81 e1 00 00 fc
	ff		 and	 ecx, -262144		; fffffffffffc0000H
  00590	3b c1		 cmp	 eax, ecx
  00592	74 40		 je	 SHORT $LN26@main

; 146  :                 {
; 147  :                     prevpos = curpos;

  00594	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR curpos
  0059a	89 05 00 00 00
	00		 mov	 DWORD PTR prevpos, eax
$LN10@main:

; 148  :                     EXTGUIMSG( "IPOS=%ld\n", curpos );

  005a0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  005a7	83 38 00	 cmp	 DWORD PTR [rax], 0
  005aa	74 22		 je	 SHORT $LN27@main
  005ac	b9 02 00 00 00	 mov	 ecx, 2
  005b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005b7	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR curpos
  005be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169292
  005c5	48 8b c8	 mov	 rcx, rax
  005c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN27@main:
  005ce	33 c0		 xor	 eax, eax
  005d0	85 c0		 test	 eax, eax
  005d2	75 cc		 jne	 SHORT $LN10@main
$LN26@main:
$LN25@main:

; 149  :                 }
; 150  :             }
; 151  : 
; 152  :             /* Check for end of tape. */
; 153  :             if (len == 0)

  005d4	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  005d9	75 4c		 jne	 SHORT $LN28@main

; 154  :             {
; 155  :                 // "End of tape"
; 156  :                 WRMSG( HHC02704, "I" );

  005db	b9 01 00 00 00	 mov	 ecx, 1
  005e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169294
  005ed	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169295
  005f9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005fe	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00603	41 b9 03 00 00
	00		 mov	 r9d, 3
  00609	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169296
  00610	ba 9c 00 00 00	 mov	 edx, 156		; 0000009cH
  00615	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169297
  0061c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 157  :                 break;

  00622	e9 2c 07 00 00	 jmp	 $LN6@main
$LN28@main:

; 158  :             }
; 159  : 
; 160  :             /* Copy the header to the output file. */
; 161  :             rc = write(outfd, buf, sizeof(AWSTAPE_BLKHDR));

  00627	41 b8 06 00 00
	00		 mov	 r8d, 6
  0062d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:buf
  00634	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR outfd$[rsp]
  0063b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  00641	89 84 24 80 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax

; 162  :             if (rc < (int)sizeof(AWSTAPE_BLKHDR))

  00648	83 bc 24 80 00
	00 00 06	 cmp	 DWORD PTR rc$[rsp], 6
  00650	0f 8d b5 00 00
	00		 jge	 $LN29@main

; 163  :             {
; 164  :                 // "File %s: Error writing %s header: rc=%d, errno=%d: %s"
; 165  :                 FWRMSG( stderr, HHC02711, "E", outfilename, "AWSTAPE", rc, errno, strerror( errno ));

  00656	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0065c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0065e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00664	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv288[rsp], rax
  0066c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00672	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv292[rsp], rax
  0067a	b9 02 00 00 00	 mov	 ecx, 2
  0067f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00685	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv288[rsp]
  0068d	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00692	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tv292[rsp]
  0069a	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0069c	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  006a0	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR rc$[rsp]
  006a7	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  006ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169299
  006b2	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  006b7	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR outfilename$[rsp]
  006bf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169300
  006cb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169301
  006d7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006dc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006e1	41 b9 03 00 00
	00		 mov	 r9d, 3
  006e7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169302
  006ee	ba a5 00 00 00	 mov	 edx, 165		; 000000a5H
  006f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169303
  006fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 166  :                 exit(6);

  00700	b9 06 00 00 00	 mov	 ecx, 6
  00705	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN29@main:

; 167  :             }
; 168  : 
; 169  :             /* Parse the block header */
; 170  :             memcpy(&awshdr, buf, sizeof(AWSTAPE_BLKHDR));

  0070b	48 8d 84 24 38
	01 00 00	 lea	 rax, QWORD PTR awshdr$[rsp]
  00713	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:buf
  0071a	48 8b f8	 mov	 rdi, rax
  0071d	48 8b f1	 mov	 rsi, rcx
  00720	b9 06 00 00 00	 mov	 ecx, 6
  00725	f3 a4		 rep movsb

; 171  : 
; 172  :             /* Tapemark? */
; 173  :             if ((awshdr.flags1 & AWSTAPE_FLAG1_TAPEMARK) != 0)

  00727	0f b6 84 24 3c
	01 00 00	 movzx	 eax, BYTE PTR awshdr$[rsp+4]
  0072f	83 e0 40	 and	 eax, 64			; 00000040H
  00732	85 c0		 test	 eax, eax
  00734	0f 84 f5 00 00
	00		 je	 $LN30@main

; 174  :             {
; 175  :                 /* Print summary of current file */
; 176  :                 if (blkcount)

  0073a	83 7c 24 78 00	 cmp	 DWORD PTR blkcount$[rsp], 0
  0073f	0f 84 9b 00 00
	00		 je	 $LN32@main

; 177  :                     // "File No. %u: Blocks=%u, Bytes=%"PRId64", Block size min=%u, max=%u, avg=%u"
; 178  :                     WRMSG( HHC02721, "I", fileno, blkcount, file_bytes, minblksz, maxblksz, (int)file_bytes/blkcount );

  00745	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR file_bytes$[rsp]
  0074c	99		 cdq
  0074d	f7 7c 24 78	 idiv	 DWORD PTR blkcount$[rsp]
  00751	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv318[rsp], eax
  00758	b9 01 00 00 00	 mov	 ecx, 1
  0075d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00763	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR tv318[rsp]
  0076a	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  0076e	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR maxblksz$[rsp]
  00775	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00779	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR minblksz$[rsp]
  00780	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00784	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR file_bytes$[rsp]
  0078c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00791	8b 4c 24 78	 mov	 ecx, DWORD PTR blkcount$[rsp]
  00795	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00799	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR fileno$[rsp]
  007a0	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  007a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169307
  007ab	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169308
  007b7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007bc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007c1	41 b9 03 00 00
	00		 mov	 r9d, 3
  007c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169309
  007ce	ba b2 00 00 00	 mov	 edx, 178		; 000000b2H
  007d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169310
  007da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN32@main:

; 179  : 
; 180  :                 /* Reset counters for next file */
; 181  :                 fileno++;

  007e0	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR fileno$[rsp]
  007e7	ff c0		 inc	 eax
  007e9	89 84 24 98 00
	00 00		 mov	 DWORD PTR fileno$[rsp], eax

; 182  :                 minblksz = 0;

  007f0	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR minblksz$[rsp], 0

; 183  :                 maxblksz = 0;

  007fb	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR maxblksz$[rsp], 0

; 184  :                 blkcount = 0;

  00806	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR blkcount$[rsp], 0

; 185  :                 file_bytes = 0;

  0080e	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR file_bytes$[rsp], 0

; 186  : 
; 187  :                 /* Count the file we just copied. */
; 188  :                 outfilecount++;

  0081a	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR outfilecount$[rsp]
  00821	ff c0		 inc	 eax
  00823	89 84 24 9c 00
	00 00		 mov	 DWORD PTR outfilecount$[rsp], eax

; 189  : 
; 190  :             }

  0082a	e9 1f 05 00 00	 jmp	 $LN31@main
$LN30@main:

; 191  :             else /* if(tapemark) */
; 192  :             {
; 193  :                 /* Count blocks and block sizes */
; 194  :                 blkcount++;

  0082f	8b 44 24 78	 mov	 eax, DWORD PTR blkcount$[rsp]
  00833	ff c0		 inc	 eax
  00835	89 44 24 78	 mov	 DWORD PTR blkcount$[rsp], eax

; 195  :                 curblkl = awshdr.curblkl[0] + (awshdr.curblkl[1] << 8);

  00839	b8 01 00 00 00	 mov	 eax, 1
  0083e	48 6b c0 00	 imul	 rax, rax, 0
  00842	0f b6 84 04 38
	01 00 00	 movzx	 eax, BYTE PTR awshdr$[rsp+rax]
  0084a	b9 01 00 00 00	 mov	 ecx, 1
  0084f	48 6b c9 01	 imul	 rcx, rcx, 1
  00853	0f b6 8c 0c 38
	01 00 00	 movzx	 ecx, BYTE PTR awshdr$[rsp+rcx]
  0085b	c1 e1 08	 shl	 ecx, 8
  0085e	03 c1		 add	 eax, ecx
  00860	89 44 24 74	 mov	 DWORD PTR curblkl$[rsp], eax

; 196  :                 if (curblkl > maxblksz) maxblksz = curblkl;

  00864	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR maxblksz$[rsp]
  0086b	39 44 24 74	 cmp	 DWORD PTR curblkl$[rsp], eax
  0086f	7e 0b		 jle	 SHORT $LN33@main
  00871	8b 44 24 74	 mov	 eax, DWORD PTR curblkl$[rsp]
  00875	89 84 24 94 00
	00 00		 mov	 DWORD PTR maxblksz$[rsp], eax
$LN33@main:

; 197  :                 if (minblksz == 0 || curblkl < minblksz) minblksz = curblkl;

  0087c	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR minblksz$[rsp], 0
  00884	74 0d		 je	 SHORT $LN35@main
  00886	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR minblksz$[rsp]
  0088d	39 44 24 74	 cmp	 DWORD PTR curblkl$[rsp], eax
  00891	7d 0b		 jge	 SHORT $LN34@main
$LN35@main:
  00893	8b 44 24 74	 mov	 eax, DWORD PTR curblkl$[rsp]
  00897	89 84 24 88 00
	00 00		 mov	 DWORD PTR minblksz$[rsp], eax
$LN34@main:

; 198  : 
; 199  :                 file_bytes += curblkl;

  0089e	48 63 44 24 74	 movsxd	 rax, DWORD PTR curblkl$[rsp]
  008a3	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR file_bytes$[rsp]
  008ab	48 03 c8	 add	 rcx, rax
  008ae	48 8b c1	 mov	 rax, rcx
  008b1	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR file_bytes$[rsp], rax

; 200  : 
; 201  :                 /* Read the data block. */
; 202  :                 len = read (infd, buf, curblkl);

  008b9	44 8b 44 24 74	 mov	 r8d, DWORD PTR curblkl$[rsp]
  008be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:buf
  008c5	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR infd$[rsp]
  008cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  008d2	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax

; 203  :                 if (len < 0)

  008d6	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  008db	0f 8d b5 00 00
	00		 jge	 $LN36@main

; 204  :                 {
; 205  :                     // "File %s: Error reading %s data block: rc=%d, errno=%d: %s"
; 206  :                     FWRMSG( stderr, HHC02709, "E", infilename, "AWSTAPE", rc, errno, strerror( errno ));

  008e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  008e7	8b 08		 mov	 ecx, DWORD PTR [rax]
  008e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  008ef	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv355[rsp], rax
  008f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  008fd	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv359[rsp], rax
  00905	b9 02 00 00 00	 mov	 ecx, 2
  0090a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00910	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv355[rsp]
  00918	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0091d	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv359[rsp]
  00925	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00927	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  0092b	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR rc$[rsp]
  00932	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00936	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169315
  0093d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00942	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR infilename$[rsp]
  0094a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0094f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169316
  00956	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0095b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169317
  00962	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00967	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0096c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00972	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169318
  00979	ba ce 00 00 00	 mov	 edx, 206		; 000000ceH
  0097e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169319
  00985	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 207  :                     exit (7);

  0098b	b9 07 00 00 00	 mov	 ecx, 7
  00990	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN36@main:

; 208  :                 }
; 209  : 
; 210  :                 /* Did we finish too soon? */
; 211  :                 if ((len > 0) && (len < curblkl))

  00996	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  0099b	7e 79		 jle	 SHORT $LN37@main
  0099d	8b 44 24 74	 mov	 eax, DWORD PTR curblkl$[rsp]
  009a1	39 44 24 70	 cmp	 DWORD PTR len$[rsp], eax
  009a5	7d 6f		 jge	 SHORT $LN37@main

; 212  :                 {
; 213  :                     // "File %s: Error, incomplete final data block: expected %d bytes, read %d"
; 214  :                     FWRMSG( stderr, HHC02742, "E", infilename, curblkl, len );

  009a7	b9 02 00 00 00	 mov	 ecx, 2
  009ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009b2	8b 4c 24 70	 mov	 ecx, DWORD PTR len$[rsp]
  009b6	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  009ba	8b 4c 24 74	 mov	 ecx, DWORD PTR curblkl$[rsp]
  009be	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  009c2	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR infilename$[rsp]
  009ca	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  009cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169321
  009d6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  009db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169322
  009e2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  009e7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009ec	41 b9 03 00 00
	00		 mov	 r9d, 3
  009f2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169323
  009f9	ba d6 00 00 00	 mov	 edx, 214		; 000000d6H
  009fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169324
  00a05	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 215  :                     exit(8);

  00a0b	b9 08 00 00 00	 mov	 ecx, 8
  00a10	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN37@main:

; 216  :                 }
; 217  : 
; 218  :                 /* Check for end of tape */
; 219  :                 if (len == 0)

  00a16	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  00a1b	75 6b		 jne	 SHORT $LN38@main

; 220  :                 {
; 221  :                     // "File %s: Error, %s header block without data"
; 222  :                     FWRMSG( stderr, HHC02743, "E", infilename, "AWSTAPE" );

  00a1d	b9 02 00 00 00	 mov	 ecx, 2
  00a22	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a28	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169326
  00a2f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00a34	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR infilename$[rsp]
  00a3c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a41	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169327
  00a48	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a4d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169328
  00a54	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a59	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a5e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a64	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169329
  00a6b	ba de 00 00 00	 mov	 edx, 222		; 000000deH
  00a70	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169330
  00a77	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 223  :                     exit(9);

  00a7d	b9 09 00 00 00	 mov	 ecx, 9
  00a82	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN38@main:

; 224  :                 }
; 225  : 
; 226  :                 if (extgui)

  00a88	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00a8f	83 38 00	 cmp	 DWORD PTR [rax], 0
  00a92	74 6f		 je	 SHORT $LN39@main

; 227  :                 {
; 228  :                     curpos += len;

  00a94	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  00a98	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR curpos
  00a9e	03 c8		 add	 ecx, eax
  00aa0	8b c1		 mov	 eax, ecx
  00aa2	89 05 00 00 00
	00		 mov	 DWORD PTR curpos, eax

; 229  :                     /* Report progress every nnnK */
; 230  :                     if( ( curpos & PROGRESS_MASK ) != ( prevpos & PROGRESS_MASK ) )

  00aa8	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR curpos
  00aae	25 00 00 fc ff	 and	 eax, -262144		; fffffffffffc0000H
  00ab3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR prevpos
  00ab9	81 e1 00 00 fc
	ff		 and	 ecx, -262144		; fffffffffffc0000H
  00abf	3b c1		 cmp	 eax, ecx
  00ac1	74 40		 je	 SHORT $LN40@main

; 231  :                     {
; 232  :                         prevpos = curpos;

  00ac3	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR curpos
  00ac9	89 05 00 00 00
	00		 mov	 DWORD PTR prevpos, eax
$LN13@main:

; 233  :                         EXTGUIMSG( "IPOS=%ld\n", curpos );

  00acf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00ad6	83 38 00	 cmp	 DWORD PTR [rax], 0
  00ad9	74 22		 je	 SHORT $LN41@main
  00adb	b9 02 00 00 00	 mov	 ecx, 2
  00ae0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00ae6	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR curpos
  00aed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169334
  00af4	48 8b c8	 mov	 rcx, rax
  00af7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN41@main:
  00afd	33 c0		 xor	 eax, eax
  00aff	85 c0		 test	 eax, eax
  00b01	75 cc		 jne	 SHORT $LN13@main
$LN40@main:
$LN39@main:

; 234  :                     }
; 235  :                 }
; 236  : 
; 237  :                 /* Copy the header to the output file. */
; 238  :                 rc = write(outfd, buf, len);

  00b03	44 8b 44 24 70	 mov	 r8d, DWORD PTR len$[rsp]
  00b08	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:buf
  00b0f	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR outfd$[rsp]
  00b16	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  00b1c	89 84 24 80 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax

; 239  :                 if (rc < len)

  00b23	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  00b27	39 84 24 80 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  00b2e	0f 8d b5 00 00
	00		 jge	 $LN42@main

; 240  :                 {
; 241  :                     // "File %s: Error writing %s data block: rc=%d, errno=%d: %s"
; 242  :                     FWRMSG( stderr, HHC02712, "E", outfilename, "AWSTAPE", rc, errno, strerror( errno ));

  00b34	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00b3a	8b 08		 mov	 ecx, DWORD PTR [rax]
  00b3c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00b42	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv419[rsp], rax
  00b4a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00b50	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv423[rsp], rax
  00b58	b9 02 00 00 00	 mov	 ecx, 2
  00b5d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b63	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR tv419[rsp]
  00b6b	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00b70	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR tv423[rsp]
  00b78	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00b7a	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00b7e	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR rc$[rsp]
  00b85	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00b89	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169336
  00b90	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00b95	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR outfilename$[rsp]
  00b9d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00ba2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169337
  00ba9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00bae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169338
  00bb5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00bba	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00bbf	41 b9 03 00 00
	00		 mov	 r9d, 3
  00bc5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169339
  00bcc	ba f2 00 00 00	 mov	 edx, 242		; 000000f2H
  00bd1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169340
  00bd8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 243  :                     exit(10);

  00bde	b9 0a 00 00 00	 mov	 ecx, 10
  00be3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN42@main:

; 244  :                 }
; 245  : 
; 246  :                 /* Print standard labels */
; 247  :                 if (len == 80 && blkcount < 4
; 248  :                     && (memcmp(buf, vollbl, 3) == 0

  00be9	83 7c 24 70 50	 cmp	 DWORD PTR len$[rsp], 80	; 00000050H
  00bee	0f 85 5a 01 00
	00		 jne	 $LN43@main
  00bf4	83 7c 24 78 04	 cmp	 DWORD PTR blkcount$[rsp], 4
  00bf9	0f 8d 4f 01 00
	00		 jge	 $LN43@main
  00bff	41 b8 03 00 00
	00		 mov	 r8d, 3
  00c05	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:vollbl
  00c0c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:buf
  00c13	e8 00 00 00 00	 call	 memcmp
  00c18	85 c0		 test	 eax, eax
  00c1a	74 5b		 je	 SHORT $LN44@main
  00c1c	41 b8 03 00 00
	00		 mov	 r8d, 3
  00c22	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:hdrlbl
  00c29	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:buf
  00c30	e8 00 00 00 00	 call	 memcmp
  00c35	85 c0		 test	 eax, eax
  00c37	74 3e		 je	 SHORT $LN44@main
  00c39	41 b8 03 00 00
	00		 mov	 r8d, 3
  00c3f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:eoflbl
  00c46	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:buf
  00c4d	e8 00 00 00 00	 call	 memcmp
  00c52	85 c0		 test	 eax, eax
  00c54	74 21		 je	 SHORT $LN44@main
  00c56	41 b8 03 00 00
	00		 mov	 r8d, 3
  00c5c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:eovlbl
  00c63	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:buf
  00c6a	e8 00 00 00 00	 call	 memcmp
  00c6f	85 c0		 test	 eax, eax
  00c71	0f 85 d7 00 00
	00		 jne	 $LN43@main
$LN44@main:

; 249  :                         || memcmp(buf, hdrlbl, 3) == 0
; 250  :                         || memcmp(buf, eoflbl, 3) == 0
; 251  :                         || memcmp(buf, eovlbl, 3) == 0))
; 252  :                 {
; 253  :                     for (i=0; i < 80; i++)

  00c77	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  00c82	eb 10		 jmp	 SHORT $LN16@main
$LN14@main:
  00c84	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  00c8b	ff c0		 inc	 eax
  00c8d	89 84 24 84 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN16@main:
  00c94	83 bc 24 84 00
	00 00 50	 cmp	 DWORD PTR i$[rsp], 80	; 00000050H
  00c9c	7d 2a		 jge	 SHORT $LN15@main

; 254  :                         labelrec[i] = guest_to_host(buf[i]);

  00c9e	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00ca6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:buf
  00cad	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  00cb1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_guest_to_host
  00cb7	48 63 8c 24 84
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  00cbf	88 84 0c 40 01
	00 00		 mov	 BYTE PTR labelrec$[rsp+rcx], al
  00cc6	eb bc		 jmp	 SHORT $LN14@main
$LN15@main:

; 255  :                     labelrec[i] = '\0';

  00cc8	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00cd0	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR $T1[rsp], rax
  00cd8	48 83 bc 24 c8
	00 00 00 51	 cmp	 QWORD PTR $T1[rsp], 81	; 00000051H
  00ce1	73 02		 jae	 SHORT $LN46@main
  00ce3	eb 05		 jmp	 SHORT $LN47@main
$LN46@main:
  00ce5	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN47@main:
  00cea	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR $T1[rsp]
  00cf2	c6 84 04 40 01
	00 00 00	 mov	 BYTE PTR labelrec$[rsp+rax], 0

; 256  :                     // "Tape Label: %s"
; 257  :                     WRMSG( HHC02722, "I", labelrec );

  00cfa	b9 01 00 00 00	 mov	 ecx, 1
  00cff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00d05	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR labelrec$[rsp]
  00d0d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00d12	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169343
  00d19	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00d1e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169344
  00d25	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00d2a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d2f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00d35	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169345
  00d3c	ba 01 01 00 00	 mov	 edx, 257		; 00000101H
  00d41	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169346
  00d48	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN43@main:
$LN31@main:

; 258  :                 }
; 259  : 
; 260  :             } /* end if(tapemark) */
; 261  : 
; 262  :         } /* end for(outfilecount) */

  00d4e	e9 9e f6 ff ff	 jmp	 $LN5@main
$LN6@main:

; 263  : 
; 264  :         close(outfd);

  00d53	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR outfd$[rsp]
  00d5a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 265  : 
; 266  :     } /* end for(outfilenum) */

  00d60	e9 d5 f4 ff ff	 jmp	 $LN2@main
$LN3@main:

; 267  : 
; 268  :     /* Close files and exit */
; 269  :     close (infd);

  00d65	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR infd$[rsp]
  00d6c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 270  : 
; 271  :     return 0;

  00d72	33 c0		 xor	 eax, eax
$LN45@main:

; 272  : 
; 273  : } /* end function main */

  00d74	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00d7c	48 33 cc	 xor	 rcx, rsp
  00d7f	e8 00 00 00 00	 call	 __security_check_cookie
  00d84	48 81 c4 c8 02
	00 00		 add	 rsp, 712		; 000002c8H
  00d8b	5f		 pop	 rdi
  00d8c	5e		 pop	 rsi
  00d8d	c3		 ret	 0
main	ENDP
_TEXT	ENDS
END
