; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
VOL1_KEYA DB	056H
	DB	04fH
	DB	04cH
	DB	031H
VOL1_KEY DB	0e5H
	DB	0d6H
	DB	0d3H
	DB	0f1H
IPL1_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f1H
IPL2_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f2H
iplpsw	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
iplccw1	DB	06H
	DB	00H
	DB	03aH
	DB	098H
	DB	060H
	DB	00H
	DB	00H
	DB	060H
iplccw2	DB	08H
	DB	00H
	DB	03aH
	DB	098H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
noiplpsw DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
noiplccw1 DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
noiplccw2 DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
ipl2data DB	07H
	DB	00H
	DB	03aH
	DB	0b8H
	DB	040H
	DB	00H
	DB	00H
	DB	06H
	DB	031H
	DB	00H
	DB	03aH
	DB	0beH
	DB	040H
	DB	00H
	DB	00H
	DB	05H
	DB	08H
	DB	00H
	DB	03aH
	DB	0a0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	00H
	DB	07fH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
CONST	ENDS
PUBLIC	syntax
PUBLIC	main
EXTRN	__imp__errno:PROC
EXTRN	__imp__lseeki64:PROC
EXTRN	__imp_close:PROC
EXTRN	__imp_read:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_initialize_utility:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_w32_hopen:PROC
EXTRN	__imp_cckd64_swapend:PROC
EXTRN	__imp_cckd64_chkdsk:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_is_dh_devid_typ:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
pdata	SEGMENT
$pdata$syntax DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$syntax
$pdata$main DD	imagerel $LN79
	DD	imagerel $LN79+3730
	DD	imagerel $unwind$main
pdata	ENDS
_DATA	SEGMENT
$SG159626 DB	'Swap ''endianness'' of a CCKD64 file', 00H
	ORG $+5
$SG159627 DB	'cckdswap64', 00H
	ORG $+1
$SG159639 DB	'open()', 00H
	ORG $+1
$SG159640 DB	'E', 00H
	ORG $+2
$SG159641 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG159642 DB	'main', 00H
	ORG $+3
$SG159646 DB	'read()', 00H
	ORG $+1
$SG159647 DB	'E', 00H
	ORG $+2
$SG159643 DB	'cckdswap64.c', 00H
	ORG $+3
$SG159645 DB	'incomplete', 00H
	ORG $+5
$SG159648 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG159649 DB	'main', 00H
	ORG $+3
$SG159652 DB	'E', 00H
	ORG $+2
$SG159650 DB	'cckdswap64.c', 00H
	ORG $+3
$SG159653 DB	'HHC00356%s %1d:%04X CCKD file %s: not a compressed dasd '
	DB	'file', 0aH, 00H
	ORG $+2
$SG159654 DB	'main', 00H
	ORG $+3
$SG159655 DB	'cckdswap64.c', 00H
	ORG $+3
$SG159657 DB	'incomplete', 00H
	ORG $+1
$SG159658 DB	'read()', 00H
	ORG $+1
$SG159659 DB	'E', 00H
	ORG $+2
$SG159660 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG159661 DB	'main', 00H
	ORG $+3
$SG159664 DB	'E', 00H
	ORG $+2
$SG159662 DB	'cckdswap64.c', 00H
	ORG $+3
$SG159665 DB	'HHC00352%s %1d:%04X CCKD file %s: opened bit is on, use '
	DB	'-f', 0aH, 00H
$SG159666 DB	'main', 00H
	ORG $+3
$SG159669 DB	'E', 00H
	ORG $+2
$SG159667 DB	'cckdswap64.c', 00H
	ORG $+3
$SG159670 DB	'HHC00353%s %1d:%04X CCKD file %s: check disk errors', 0aH
	DB	00H
	ORG $+3
$SG159671 DB	'main', 00H
	ORG $+3
$SG159672 DB	'cckdswap64.c', 00H
	ORG $+3
$SG159674 DB	'lseek()', 00H
$SG159675 DB	'E', 00H
	ORG $+2
$SG159677 DB	'main', 00H
	ORG $+7
$SG159676 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG159681 DB	'read()', 00H
	ORG $+1
$SG159682 DB	'E', 00H
	ORG $+2
$SG159678 DB	'cckdswap64.c', 00H
	ORG $+3
$SG159680 DB	'incomplete', 00H
	ORG $+5
$SG159683 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG159684 DB	'main', 00H
	ORG $+3
$SG159689 DB	'I', 00H
	ORG $+2
$SG159685 DB	'cckdswap64.c', 00H
	ORG $+3
$SG159687 DB	'little-endian', 00H
	ORG $+2
$SG159688 DB	'big-endian', 00H
	ORG $+1
$SG159694 DB	'E', 00H
	ORG $+2
$SG159690 DB	'HHC00357%s %1d:%04X CCKD file %s: converting to %s', 0aH
	DB	00H
$SG159691 DB	'main', 00H
	ORG $+3
$SG159701 DB	'I', 00H
	ORG $+2
$SG159692 DB	'cckdswap64.c', 00H
	ORG $+3
$SG159695 DB	'HHC00378%s %1d:%04X CCKD file %s: error during swap', 0aH
	DB	00H
	ORG $+3
$SG159696 DB	'main', 00H
	ORG $+3
$SG159697 DB	'cckdswap64.c', 00H
	ORG $+3
$SG159702 DB	'HHC02495%s Usage: %s [-f] [-n] file1 [file2 ...]', 0aH, 'H'
	DB	'HC02495I   file    name of CCKD file', 0aH, 'HHC02495I Option'
	DB	's:', 0aH, 'HHC02495I   -f      force check even if OPENED bit'
	DB	' is on', 0aH, 'HHC02495I   -0      minimal checking (default)'
	DB	0aH, 'HHC02495I   -1      normal  checking', 0aH, 'HHC02495I  '
	DB	' -2      intermediate checking', 0aH, 'HHC02495I   -3      ma'
	DB	'ximal checking', 0aH, 00H
	ORG $+1
$SG159703 DB	'syntax', 00H
	ORG $+1
$SG159704 DB	'cckdswap64.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main
	DD	021H
	DD	0e79H
voltbl	ENDS
xdata	SEGMENT
$unwind$syntax DD 010901H
	DD	08209H
$unwind$main DD	032919H
	DD	04240117H
	DD	0700aH
	DD	imagerel __GSHandlerCheck
	DD	02110H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdswap64.c
_TEXT	SEGMENT
dev$ = 112
rc$ = 120
tv83 = 124
i$ = 128
tv182 = 132
tv188 = 136
tv219 = 140
tv225 = 144
tv248 = 148
tv254 = 152
tv290 = 156
tv296 = 160
force$ = 164
tv318 = 168
tv324 = 172
level$ = 176
tv348 = 180
tv354 = 184
tv384 = 188
tv390 = 192
tv455 = 196
tv461 = 200
tv487 = 204
tv493 = 208
tv512 = 212
tv518 = 216
tv167 = 220
pgm$ = 224
bigend$ = 232
tv210 = 240
tv281 = 248
tv414 = 256
tv480 = 264
tv172 = 272
tv177 = 280
tv214 = 288
tv243 = 296
tv285 = 304
tv313 = 312
tv343 = 320
tv373 = 328
tv379 = 336
tv450 = 344
tv482 = 352
tv507 = 360
cdevhdr$ = 368
devhdr$ = 880
devblk$ = 1392
__$ArrayPad$ = 8464
argc$ = 8496
argv$ = 8504
main	PROC

; 27   : {

$LN79:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	57		 push	 rdi
  0000a	b8 20 21 00 00	 mov	 eax, 8480		; 00002120H
  0000f	e8 00 00 00 00	 call	 __chkstk
  00014	48 2b e0	 sub	 rsp, rax
  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001e	48 33 c4	 xor	 rax, rsp
  00021	48 89 84 24 10
	21 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 28   : char           *pgm;                    /* less any extension (.ext) */
; 29   : CKD_DEVHDR      devhdr;                 /* CKD device header         */
; 30   : CCKD64_DEVHDR   cdevhdr;                /* Compressed CKD device hdr */
; 31   : int             level = 0;              /* Chkdsk level              */

  00029	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR level$[rsp], 0

; 32   : int             force = 0;              /* 1=swap if OPENED bit on   */

  00034	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR force$[rsp], 0

; 33   : int             rc;                     /* Return code               */
; 34   : int             i;                      /* Index                     */
; 35   : int             bigend;                 /* 1=big-endian file         */
; 36   : DEVBLK          devblk;                 /* DEVBLK                    */
; 37   : DEVBLK         *dev=&devblk;            /* -> DEVBLK                 */

  0003f	48 8d 84 24 70
	05 00 00	 lea	 rax, QWORD PTR devblk$[rsp]
  00047	48 89 44 24 70	 mov	 QWORD PTR dev$[rsp], rax

; 38   : 
; 39   :     INITIALIZE_UTILITY( UTILITY_NAME, UTILITY_DESC, &pgm );

  0004c	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR pgm$[rsp]
  00054	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00059	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159626
  00060	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159627
  00067	48 8b 94 24 38
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006f	8b 8c 24 30 21
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_initialize_utility
  0007c	89 84 24 30 21
	00 00		 mov	 DWORD PTR argc$[rsp], eax

; 40   : 
; 41   :     /* parse the arguments */
; 42   :     for (argc--, argv++ ; argc > 0 ; argc--, argv++)

  00083	8b 84 24 30 21
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  0008a	ff c8		 dec	 eax
  0008c	89 84 24 30 21
	00 00		 mov	 DWORD PTR argc$[rsp], eax
  00093	48 8b 84 24 38
	21 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0009b	48 83 c0 08	 add	 rax, 8
  0009f	48 89 84 24 38
	21 00 00	 mov	 QWORD PTR argv$[rsp], rax
  000a7	eb 24		 jmp	 SHORT $LN4@main
$LN2@main:
  000a9	8b 84 24 30 21
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  000b0	ff c8		 dec	 eax
  000b2	89 84 24 30 21
	00 00		 mov	 DWORD PTR argc$[rsp], eax
  000b9	48 8b 84 24 38
	21 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000c1	48 83 c0 08	 add	 rax, 8
  000c5	48 89 84 24 38
	21 00 00	 mov	 QWORD PTR argv$[rsp], rax
$LN4@main:
  000cd	83 bc 24 30 21
	00 00 00	 cmp	 DWORD PTR argc$[rsp], 0
  000d5	0f 8e 28 01 00
	00		 jle	 $LN3@main

; 43   :     {
; 44   :         if(**argv != '-') break;

  000db	48 8b 84 24 38
	21 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000e3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e6	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000e9	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  000ec	74 05		 je	 SHORT $LN10@main
  000ee	e9 10 01 00 00	 jmp	 $LN3@main
$LN10@main:

; 45   : 
; 46   :         switch(argv[0][1])

  000f3	b8 08 00 00 00	 mov	 eax, 8
  000f8	48 6b c0 00	 imul	 rax, rax, 0
  000fc	b9 01 00 00 00	 mov	 ecx, 1
  00101	48 6b c9 01	 imul	 rcx, rcx, 1
  00105	48 8b 94 24 38
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0010d	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00111	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00115	88 44 24 7c	 mov	 BYTE PTR tv83[rsp], al
  00119	80 7c 24 7c 30	 cmp	 BYTE PTR tv83[rsp], 48	; 00000030H
  0011e	74 21		 je	 SHORT $LN11@main
  00120	80 7c 24 7c 31	 cmp	 BYTE PTR tv83[rsp], 49	; 00000031H
  00125	74 1a		 je	 SHORT $LN12@main
  00127	80 7c 24 7c 32	 cmp	 BYTE PTR tv83[rsp], 50	; 00000032H
  0012c	74 13		 je	 SHORT $LN13@main
  0012e	80 7c 24 7c 33	 cmp	 BYTE PTR tv83[rsp], 51	; 00000033H
  00133	74 0c		 je	 SHORT $LN14@main
  00135	80 7c 24 7c 66	 cmp	 BYTE PTR tv83[rsp], 102	; 00000066H
  0013a	74 6b		 je	 SHORT $LN16@main
  0013c	e9 ab 00 00 00	 jmp	 $LN18@main
$LN11@main:
$LN12@main:
$LN13@main:
$LN14@main:

; 47   :         {
; 48   :             case '0':
; 49   :             case '1':
; 50   :             case '2':
; 51   :             case '3':  if (argv[0][2] != '\0') return syntax( pgm );

  00141	b8 08 00 00 00	 mov	 eax, 8
  00146	48 6b c0 00	 imul	 rax, rax, 0
  0014a	b9 01 00 00 00	 mov	 ecx, 1
  0014f	48 6b c9 02	 imul	 rcx, rcx, 2
  00153	48 8b 94 24 38
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0015b	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015f	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  00163	85 c0		 test	 eax, eax
  00165	74 12		 je	 SHORT $LN15@main
  00167	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  0016f	e8 00 00 00 00	 call	 syntax
  00174	e9 00 0d 00 00	 jmp	 $LN1@main
$LN15@main:

; 52   :                        level = (argv[0][1] & 0xf);

  00179	b8 08 00 00 00	 mov	 eax, 8
  0017e	48 6b c0 00	 imul	 rax, rax, 0
  00182	b9 01 00 00 00	 mov	 ecx, 1
  00187	48 6b c9 01	 imul	 rcx, rcx, 1
  0018b	48 8b 94 24 38
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00193	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00197	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  0019b	83 e0 0f	 and	 eax, 15
  0019e	89 84 24 b0 00
	00 00		 mov	 DWORD PTR level$[rsp], eax

; 53   :                        break;

  001a5	eb 57		 jmp	 SHORT $LN5@main
$LN16@main:

; 54   :             case 'f':  if (argv[0][2] != '\0') return syntax( pgm );

  001a7	b8 08 00 00 00	 mov	 eax, 8
  001ac	48 6b c0 00	 imul	 rax, rax, 0
  001b0	b9 01 00 00 00	 mov	 ecx, 1
  001b5	48 6b c9 02	 imul	 rcx, rcx, 2
  001b9	48 8b 94 24 38
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  001c1	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  001c5	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  001c9	85 c0		 test	 eax, eax
  001cb	74 12		 je	 SHORT $LN17@main
  001cd	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  001d5	e8 00 00 00 00	 call	 syntax
  001da	e9 9a 0c 00 00	 jmp	 $LN1@main
$LN17@main:

; 55   :                        force = 1;

  001df	c7 84 24 a4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR force$[rsp], 1

; 56   :                        break;

  001ea	eb 12		 jmp	 SHORT $LN5@main
$LN18@main:

; 57   :             default:   return syntax( pgm );

  001ec	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  001f4	e8 00 00 00 00	 call	 syntax
  001f9	e9 7b 0c 00 00	 jmp	 $LN1@main
$LN5@main:

; 58   :         }
; 59   :     }

  001fe	e9 a6 fe ff ff	 jmp	 $LN2@main
$LN3@main:

; 60   : 
; 61   :     if (argc < 1) return syntax( pgm );

  00203	83 bc 24 30 21
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0020b	7d 12		 jge	 SHORT $LN19@main
  0020d	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  00215	e8 00 00 00 00	 call	 syntax
  0021a	e9 5a 0c 00 00	 jmp	 $LN1@main
$LN19@main:

; 62   : 
; 63   :     for (i=0; i < argc; i++)

  0021f	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  0022a	eb 10		 jmp	 SHORT $LN9@main
$LN7@main:
  0022c	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  00233	ff c0		 inc	 eax
  00235	89 84 24 80 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN9@main:
  0023c	8b 84 24 30 21
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  00243	39 84 24 80 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  0024a	0f 8d 27 0c 00
	00		 jge	 $LN8@main

; 64   :     {
; 65   :         memset( dev, 0, sizeof( DEVBLK ));

  00250	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dev$[rsp]
  00255	33 c0		 xor	 eax, eax
  00257	b9 a0 1b 00 00	 mov	 ecx, 7072		; 00001ba0H
  0025c	f3 aa		 rep stosb

; 66   :         dev->batch = 1;

  0025e	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00263	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00269	0f ba e8 0a	 bts	 eax, 10
  0026d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00272	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 67   : 
; 68   :         /* open the input file */
; 69   :         hostpath( dev->filename, argv[i], sizeof( dev->filename ));

  00278	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00280	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00285	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0028c	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00292	48 8b 94 24 38
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0029a	48 8b 14 c2	 mov	 rdx, QWORD PTR [rdx+rax*8]
  0029e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 70   : 
; 71   :         if ((dev->fd = HOPEN( dev->filename, O_RDWR | O_BINARY )) < 0)

  002a4	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  002a9	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  002af	ba 02 80 00 00	 mov	 edx, 32770		; 00008002H
  002b4	48 8b c8	 mov	 rcx, rax
  002b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  002bd	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv167[rsp], eax
  002c4	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  002c9	8b 8c 24 dc 00
	00 00		 mov	 ecx, DWORD PTR tv167[rsp]
  002d0	89 88 ac 01 00
	00		 mov	 DWORD PTR [rax+428], ecx
  002d6	83 bc 24 dc 00
	00 00 00	 cmp	 DWORD PTR tv167[rsp], 0
  002de	0f 8d fe 00 00
	00		 jge	 $LN20@main

; 72   :         {
; 73   :             // "%1d:%04X CCKD file %s: error in function %s: %s"
; 74   :             FWRMSG( stderr, HHC00354, "E", LCSS_DEVNUM,

  002e4	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  002ea	74 12		 je	 SHORT $LN31@main
  002ec	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  002f1	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  002f5	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv182[rsp], eax
  002fc	eb 0b		 jmp	 SHORT $LN32@main
$LN31@main:
  002fe	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv182[rsp], 0
$LN32@main:
  00309	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0030f	74 14		 je	 SHORT $LN33@main
  00311	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00316	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0031a	d1 f8		 sar	 eax, 1
  0031c	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv188[rsp], eax
  00323	eb 0b		 jmp	 SHORT $LN34@main
$LN33@main:
  00325	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv188[rsp], 0
$LN34@main:
  00330	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00336	8b 08		 mov	 ecx, DWORD PTR [rax]
  00338	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0033e	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv172[rsp], rax
  00346	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0034b	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00352	48 89 8c 24 18
	01 00 00	 mov	 QWORD PTR tv177[rsp], rcx
  0035a	b9 02 00 00 00	 mov	 ecx, 2
  0035f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00365	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tv172[rsp]
  0036d	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00372	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159639
  00379	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0037e	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv177[rsp]
  00386	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0038b	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv182[rsp]
  00392	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00396	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv188[rsp]
  0039d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159640
  003a8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159641
  003b4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003b9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003be	41 b9 03 00 00
	00		 mov	 r9d, 3
  003c4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159642
  003cb	ba 4b 00 00 00	 mov	 edx, 75			; 0000004bH
  003d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159643
  003d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 75   :                 dev->filename, "open()", strerror( errno ));
; 76   :             continue;

  003dd	e9 4a fe ff ff	 jmp	 $LN7@main
$LN20@main:

; 77   :         }
; 78   : 
; 79   :         /* read the CKD device header */
; 80   :         if ((rc = read( dev->fd, &devhdr, CKD_DEVHDR_SIZE )) < CKD_DEVHDR_SIZE)

  003e2	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  003e8	48 8d 94 24 70
	03 00 00	 lea	 rdx, QWORD PTR devhdr$[rsp]
  003f0	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  003f5	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  003fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00401	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  00405	48 63 44 24 78	 movsxd	 rax, DWORD PTR rc$[rsp]
  0040a	48 3d 00 02 00
	00		 cmp	 rax, 512		; 00000200H
  00410	0f 8d 2f 01 00
	00		 jge	 $LN21@main

; 81   :         {
; 82   :             // "%1d:%04X CCKD file %s: error in function %s at offset 0x%16.16"PRIX64": %s"
; 83   :             FWRMSG( stderr, HHC00355, "E", LCSS_DEVNUM,

  00416	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  0041b	7d 18		 jge	 SHORT $LN35@main
  0041d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00423	8b 08		 mov	 ecx, DWORD PTR [rax]
  00425	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0042b	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv210[rsp], rax
  00433	eb 0f		 jmp	 SHORT $LN36@main
$LN35@main:
  00435	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159645
  0043c	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv210[rsp], rax
$LN36@main:
  00444	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0044a	74 12		 je	 SHORT $LN37@main
  0044c	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00451	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00455	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv219[rsp], eax
  0045c	eb 0b		 jmp	 SHORT $LN38@main
$LN37@main:
  0045e	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv219[rsp], 0
$LN38@main:
  00469	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0046f	74 14		 je	 SHORT $LN39@main
  00471	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00476	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0047a	d1 f8		 sar	 eax, 1
  0047c	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv225[rsp], eax
  00483	eb 0b		 jmp	 SHORT $LN40@main
$LN39@main:
  00485	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv225[rsp], 0
$LN40@main:
  00490	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00495	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0049b	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv214[rsp], rax
  004a3	b9 02 00 00 00	 mov	 ecx, 2
  004a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004ae	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv210[rsp]
  004b6	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  004bb	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  004c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159646
  004cb	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  004d0	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv214[rsp]
  004d8	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  004dd	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv219[rsp]
  004e4	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  004e8	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv225[rsp]
  004ef	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  004f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159647
  004fa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159648
  00506	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0050b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00510	41 b9 03 00 00
	00		 mov	 r9d, 3
  00516	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159649
  0051d	ba 54 00 00 00	 mov	 edx, 84			; 00000054H
  00522	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159650
  00529	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 84   :                 dev->filename, "read()", (U64) 0, rc < 0 ? strerror( errno ) : "incomplete" );
; 85   :             close( dev->fd );

  0052f	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00534	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  0053a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 86   :             continue;

  00540	e9 e7 fc ff ff	 jmp	 $LN7@main
$LN21@main:

; 87   :         }
; 88   : 
; 89   :         if (!is_dh_devid_typ( devhdr.dh_devid, ANY64_CMP_OR_SF_TYP ))

  00545	ba 60 00 60 00	 mov	 edx, 6291552		; 00600060H
  0054a	48 8d 8c 24 70
	03 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp]
  00552	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_dh_devid_typ
  00558	0f b6 c0	 movzx	 eax, al
  0055b	85 c0		 test	 eax, eax
  0055d	0f 85 df 00 00
	00		 jne	 $LN22@main

; 90   :         {
; 91   :             // "%1d:%04X CCKD file %s: not a compressed dasd file"
; 92   :             FWRMSG( stderr, HHC00356, "E", LCSS_DEVNUM, dev->filename );

  00563	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00569	74 12		 je	 SHORT $LN41@main
  0056b	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00570	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00574	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv248[rsp], eax
  0057b	eb 0b		 jmp	 SHORT $LN42@main
$LN41@main:
  0057d	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv248[rsp], 0
$LN42@main:
  00588	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0058e	74 14		 je	 SHORT $LN43@main
  00590	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00595	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00599	d1 f8		 sar	 eax, 1
  0059b	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv254[rsp], eax
  005a2	eb 0b		 jmp	 SHORT $LN44@main
$LN43@main:
  005a4	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv254[rsp], 0
$LN44@main:
  005af	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  005b4	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  005ba	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv243[rsp], rax
  005c2	b9 02 00 00 00	 mov	 ecx, 2
  005c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005cd	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR tv243[rsp]
  005d5	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  005da	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv248[rsp]
  005e1	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  005e5	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv254[rsp]
  005ec	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  005f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159652
  005f7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159653
  00603	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00608	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0060d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00613	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159654
  0061a	ba 5c 00 00 00	 mov	 edx, 92			; 0000005cH
  0061f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159655
  00626	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 93   :             close( dev->fd );

  0062c	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00631	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00637	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 94   :             continue;

  0063d	e9 ea fb ff ff	 jmp	 $LN7@main
$LN22@main:

; 95   :         }
; 96   : 
; 97   :         dev->cckd64 = 1;

  00642	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00647	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  0064e	0c 01		 or	 al, 1
  00650	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00655	88 81 10 13 00
	00		 mov	 BYTE PTR [rcx+4880], al

; 98   : 
; 99   :         /* read the compressed CKD device header */
; 100  :         if ((rc = read (dev->fd, &cdevhdr, CCKD64_DEVHDR_SIZE)) < CCKD64_DEVHDR_SIZE)

  0065b	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  00661	48 8d 94 24 70
	01 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  00669	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0066e	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00674	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  0067a	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  0067e	48 63 44 24 78	 movsxd	 rax, DWORD PTR rc$[rsp]
  00683	48 3d 00 02 00
	00		 cmp	 rax, 512		; 00000200H
  00689	0f 8d 2f 01 00
	00		 jge	 $LN23@main

; 101  :         {
; 102  :             // "%1d:%04X CCKD file %s: error in function %s at offset 0x%16.16"PRIX64": %s"
; 103  :             FWRMSG( stderr, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  0068f	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  00694	7d 18		 jge	 SHORT $LN45@main
  00696	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0069c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0069e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  006a4	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv281[rsp], rax
  006ac	eb 0f		 jmp	 SHORT $LN46@main
$LN45@main:
  006ae	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159657
  006b5	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv281[rsp], rax
$LN46@main:
  006bd	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  006c3	74 12		 je	 SHORT $LN47@main
  006c5	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  006ca	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  006ce	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv290[rsp], eax
  006d5	eb 0b		 jmp	 SHORT $LN48@main
$LN47@main:
  006d7	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv290[rsp], 0
$LN48@main:
  006e2	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  006e8	74 14		 je	 SHORT $LN49@main
  006ea	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  006ef	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  006f3	d1 f8		 sar	 eax, 1
  006f5	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv296[rsp], eax
  006fc	eb 0b		 jmp	 SHORT $LN50@main
$LN49@main:
  006fe	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv296[rsp], 0
$LN50@main:
  00709	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0070e	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00714	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv285[rsp], rax
  0071c	b9 02 00 00 00	 mov	 ecx, 2
  00721	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00727	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv281[rsp]
  0072f	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00734	48 c7 44 24 58
	00 02 00 00	 mov	 QWORD PTR [rsp+88], 512	; 00000200H
  0073d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159658
  00744	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00749	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR tv285[rsp]
  00751	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00756	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv290[rsp]
  0075d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00761	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv296[rsp]
  00768	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0076c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159659
  00773	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00778	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159660
  0077f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00784	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00789	41 b9 03 00 00
	00		 mov	 r9d, 3
  0078f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159661
  00796	ba 68 00 00 00	 mov	 edx, 104		; 00000068H
  0079b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159662
  007a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 104  :                     "read()", (U64)CCKD64_DEVHDR_POS, rc < 0 ? strerror( errno ) : "incomplete" );
; 105  :             close (dev->fd);

  007a8	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  007ad	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  007b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 106  :             continue;

  007b9	e9 6e fa ff ff	 jmp	 $LN7@main
$LN23@main:

; 107  :         }
; 108  : 
; 109  :         /* Check the OPENED bit */
; 110  :         if (!force && (cdevhdr.cdh_opts & CCKD_OPT_OPENED))

  007be	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR force$[rsp], 0
  007c6	0f 85 f4 00 00
	00		 jne	 $LN24@main
  007cc	0f b6 84 24 73
	01 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  007d4	25 80 00 00 00	 and	 eax, 128		; 00000080H
  007d9	85 c0		 test	 eax, eax
  007db	0f 84 df 00 00
	00		 je	 $LN24@main

; 111  :         {
; 112  :             // "%1d:%04X CCKD file %s: opened bit is on, use -f"
; 113  :             FWRMSG( stderr, HHC00352, "E", LCSS_DEVNUM, dev->filename );

  007e1	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  007e7	74 12		 je	 SHORT $LN51@main
  007e9	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  007ee	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  007f2	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv318[rsp], eax
  007f9	eb 0b		 jmp	 SHORT $LN52@main
$LN51@main:
  007fb	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv318[rsp], 0
$LN52@main:
  00806	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0080c	74 14		 je	 SHORT $LN53@main
  0080e	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00813	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00817	d1 f8		 sar	 eax, 1
  00819	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv324[rsp], eax
  00820	eb 0b		 jmp	 SHORT $LN54@main
$LN53@main:
  00822	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv324[rsp], 0
$LN54@main:
  0082d	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00832	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00838	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv313[rsp], rax
  00840	b9 02 00 00 00	 mov	 ecx, 2
  00845	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0084b	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR tv313[rsp]
  00853	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00858	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv318[rsp]
  0085f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00863	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR tv324[rsp]
  0086a	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0086e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159664
  00875	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0087a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159665
  00881	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00886	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0088b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00891	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159666
  00898	ba 71 00 00 00	 mov	 edx, 113		; 00000071H
  0089d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159667
  008a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 114  :             close (dev->fd);

  008aa	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  008af	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  008b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 115  :             continue;

  008bb	e9 6c f9 ff ff	 jmp	 $LN7@main
$LN24@main:

; 116  :         }
; 117  : 
; 118  :         /* get the byte order of the file */
; 119  :         bigend = (cdevhdr.cdh_opts & CCKD_OPT_BIGEND);

  008c0	0f b6 84 24 73
	01 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  008c8	83 e0 02	 and	 eax, 2
  008cb	89 84 24 e8 00
	00 00		 mov	 DWORD PTR bigend$[rsp], eax

; 120  : 
; 121  :         /* call chkdsk */
; 122  :         if (cckd64_chkdsk (dev, level) < 0)

  008d2	8b 94 24 b0 00
	00 00		 mov	 edx, DWORD PTR level$[rsp]
  008d9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  008de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cckd64_chkdsk
  008e4	85 c0		 test	 eax, eax
  008e6	0f 8d df 00 00
	00		 jge	 $LN25@main

; 123  :         {
; 124  :             // "%1d:%04X CCKD file %s: check disk errors"
; 125  :             FWRMSG( stderr, HHC00353, "E", LCSS_DEVNUM, dev->filename );

  008ec	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  008f2	74 12		 je	 SHORT $LN55@main
  008f4	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  008f9	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  008fd	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv348[rsp], eax
  00904	eb 0b		 jmp	 SHORT $LN56@main
$LN55@main:
  00906	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv348[rsp], 0
$LN56@main:
  00911	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00917	74 14		 je	 SHORT $LN57@main
  00919	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0091e	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00922	d1 f8		 sar	 eax, 1
  00924	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv354[rsp], eax
  0092b	eb 0b		 jmp	 SHORT $LN58@main
$LN57@main:
  0092d	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv354[rsp], 0
$LN58@main:
  00938	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0093d	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00943	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv343[rsp], rax
  0094b	b9 02 00 00 00	 mov	 ecx, 2
  00950	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00956	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR tv343[rsp]
  0095e	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00963	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv348[rsp]
  0096a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0096e	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR tv354[rsp]
  00975	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00979	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159669
  00980	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00985	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159670
  0098c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00991	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00996	41 b9 03 00 00
	00		 mov	 r9d, 3
  0099c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159671
  009a3	ba 7d 00 00 00	 mov	 edx, 125		; 0000007dH
  009a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159672
  009af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 126  :             close (dev->fd);

  009b5	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  009ba	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  009c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 127  :             continue;

  009c6	e9 61 f8 ff ff	 jmp	 $LN7@main
$LN25@main:

; 128  :         }
; 129  : 
; 130  :         /* re-read the compressed CKD device header */
; 131  :         if (lseek (dev->fd, CCKD64_DEVHDR_POS, SEEK_SET) < 0)

  009cb	45 33 c0	 xor	 r8d, r8d
  009ce	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  009d3	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  009d8	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  009de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  009e4	48 85 c0	 test	 rax, rax
  009e7	0f 8d 18 01 00
	00		 jge	 $LN26@main

; 132  :         {
; 133  :             // "%1d:%04X CCKD file %s: error in function %s at offset 0x%16.16"PRIX64": %s"
; 134  :             FWRMSG( stderr, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  009ed	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  009f3	74 12		 je	 SHORT $LN59@main
  009f5	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  009fa	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  009fe	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv384[rsp], eax
  00a05	eb 0b		 jmp	 SHORT $LN60@main
$LN59@main:
  00a07	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv384[rsp], 0
$LN60@main:
  00a12	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00a18	74 14		 je	 SHORT $LN61@main
  00a1a	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00a1f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00a23	d1 f8		 sar	 eax, 1
  00a25	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv390[rsp], eax
  00a2c	eb 0b		 jmp	 SHORT $LN62@main
$LN61@main:
  00a2e	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv390[rsp], 0
$LN62@main:
  00a39	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00a3f	8b 08		 mov	 ecx, DWORD PTR [rax]
  00a41	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00a47	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv373[rsp], rax
  00a4f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00a54	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00a5b	48 89 8c 24 50
	01 00 00	 mov	 QWORD PTR tv379[rsp], rcx
  00a63	b9 02 00 00 00	 mov	 ecx, 2
  00a68	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a6e	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR tv373[rsp]
  00a76	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00a7b	48 c7 44 24 58
	00 02 00 00	 mov	 QWORD PTR [rsp+88], 512	; 00000200H
  00a84	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159674
  00a8b	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00a90	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR tv379[rsp]
  00a98	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00a9d	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR tv384[rsp]
  00aa4	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00aa8	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR tv390[rsp]
  00aaf	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00ab3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159675
  00aba	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00abf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159676
  00ac6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00acb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ad0	41 b9 03 00 00
	00		 mov	 r9d, 3
  00ad6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159677
  00add	ba 87 00 00 00	 mov	 edx, 135		; 00000087H
  00ae2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159678
  00ae9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 135  :                     "lseek()", (U64)CCKD64_DEVHDR_POS, strerror( errno ));
; 136  :             close (dev->fd);

  00aef	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00af4	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00afa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 137  :             continue;

  00b00	e9 27 f7 ff ff	 jmp	 $LN7@main
$LN26@main:

; 138  :         }
; 139  :         if ((rc = read (dev->fd, &cdevhdr, CCKD64_DEVHDR_SIZE)) < CCKD64_DEVHDR_SIZE)

  00b05	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  00b0b	48 8d 94 24 70
	01 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  00b13	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00b18	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00b1e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00b24	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  00b28	48 63 44 24 78	 movsxd	 rax, DWORD PTR rc$[rsp]
  00b2d	48 3d 00 02 00
	00		 cmp	 rax, 512		; 00000200H
  00b33	0f 8d 2f 01 00
	00		 jge	 $LN27@main

; 140  :         {
; 141  :             // "%1d:%04X CCKD file %s: error in function %s at offset 0x%16.16"PRIX64": %s"
; 142  :             FWRMSG( stderr, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  00b39	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  00b3e	7d 18		 jge	 SHORT $LN63@main
  00b40	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00b46	8b 08		 mov	 ecx, DWORD PTR [rax]
  00b48	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00b4e	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv414[rsp], rax
  00b56	eb 0f		 jmp	 SHORT $LN64@main
$LN63@main:
  00b58	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159680
  00b5f	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv414[rsp], rax
$LN64@main:
  00b67	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00b6d	74 12		 je	 SHORT $LN65@main
  00b6f	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00b74	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00b78	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv455[rsp], eax
  00b7f	eb 0b		 jmp	 SHORT $LN66@main
$LN65@main:
  00b81	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv455[rsp], 0
$LN66@main:
  00b8c	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00b92	74 14		 je	 SHORT $LN67@main
  00b94	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00b99	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00b9d	d1 f8		 sar	 eax, 1
  00b9f	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv461[rsp], eax
  00ba6	eb 0b		 jmp	 SHORT $LN68@main
$LN67@main:
  00ba8	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv461[rsp], 0
$LN68@main:
  00bb3	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00bb8	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00bbe	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv450[rsp], rax
  00bc6	b9 02 00 00 00	 mov	 ecx, 2
  00bcb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00bd1	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv414[rsp]
  00bd9	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00bde	48 c7 44 24 58
	00 02 00 00	 mov	 QWORD PTR [rsp+88], 512	; 00000200H
  00be7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159681
  00bee	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00bf3	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tv450[rsp]
  00bfb	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00c00	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR tv455[rsp]
  00c07	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00c0b	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR tv461[rsp]
  00c12	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00c16	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159682
  00c1d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c22	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159683
  00c29	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c2e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c33	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c39	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159684
  00c40	ba 8f 00 00 00	 mov	 edx, 143		; 0000008fH
  00c45	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159685
  00c4c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 143  :                     "read()", (U64)CCKD64_DEVHDR_POS, rc < 0 ? strerror( errno ) : "incomplete" );
; 144  :             close (dev->fd);

  00c52	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00c57	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00c5d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 145  :             continue;

  00c63	e9 c4 f5 ff ff	 jmp	 $LN7@main
$LN27@main:

; 146  :         }
; 147  : 
; 148  :         /* swap the byte order of the file if chkdsk didn't do it for us */
; 149  :         if (bigend == (cdevhdr.cdh_opts & CCKD_OPT_BIGEND))

  00c68	0f b6 84 24 73
	01 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  00c70	83 e0 02	 and	 eax, 2
  00c73	39 84 24 e8 00
	00 00		 cmp	 DWORD PTR bigend$[rsp], eax
  00c7a	0f 85 e1 01 00
	00		 jne	 $LN28@main

; 150  :         {
; 151  :             // "%1d:%04X CCKD file %s: converting to %s"
; 152  :             WRMSG( HHC00357, "I", LCSS_DEVNUM, dev->filename,

  00c80	0f b6 84 24 73
	01 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  00c88	83 e0 02	 and	 eax, 2
  00c8b	85 c0		 test	 eax, eax
  00c8d	74 11		 je	 SHORT $LN69@main
  00c8f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159687
  00c96	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv480[rsp], rax
  00c9e	eb 0f		 jmp	 SHORT $LN70@main
$LN69@main:
  00ca0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159688
  00ca7	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv480[rsp], rax
$LN70@main:
  00caf	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00cb5	74 12		 je	 SHORT $LN71@main
  00cb7	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00cbc	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00cc0	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv487[rsp], eax
  00cc7	eb 0b		 jmp	 SHORT $LN72@main
$LN71@main:
  00cc9	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv487[rsp], 0
$LN72@main:
  00cd4	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00cda	74 14		 je	 SHORT $LN73@main
  00cdc	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00ce1	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00ce5	d1 f8		 sar	 eax, 1
  00ce7	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv493[rsp], eax
  00cee	eb 0b		 jmp	 SHORT $LN74@main
$LN73@main:
  00cf0	c7 84 24 d0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv493[rsp], 0
$LN74@main:
  00cfb	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00d00	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00d06	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv482[rsp], rax
  00d0e	b9 01 00 00 00	 mov	 ecx, 1
  00d13	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00d19	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv480[rsp]
  00d21	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00d26	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR tv482[rsp]
  00d2e	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00d33	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR tv487[rsp]
  00d3a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00d3e	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR tv493[rsp]
  00d45	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00d49	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159689
  00d50	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00d55	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159690
  00d5c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00d61	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d66	41 b9 03 00 00
	00		 mov	 r9d, 3
  00d6c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159691
  00d73	ba 9a 00 00 00	 mov	 edx, 154		; 0000009aH
  00d78	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159692
  00d7f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 153  :                     (cdevhdr.cdh_opts & CCKD_OPT_BIGEND) ?
; 154  :                         "little-endian" : "big-endian" );
; 155  : 
; 156  :             if (cckd64_swapend (dev) < 0)

  00d85	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00d8a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cckd64_swapend
  00d90	85 c0		 test	 eax, eax
  00d92	0f 8d c9 00 00
	00		 jge	 $LN29@main

; 157  :                 // "%1d:%04X CCKD file %s: error during swap"
; 158  :                 FWRMSG( stderr, HHC00378, "E", LCSS_DEVNUM, dev->filename );

  00d98	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00d9e	74 12		 je	 SHORT $LN75@main
  00da0	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00da5	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00da9	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv512[rsp], eax
  00db0	eb 0b		 jmp	 SHORT $LN76@main
$LN75@main:
  00db2	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv512[rsp], 0
$LN76@main:
  00dbd	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00dc3	74 14		 je	 SHORT $LN77@main
  00dc5	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00dca	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00dce	d1 f8		 sar	 eax, 1
  00dd0	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv518[rsp], eax
  00dd7	eb 0b		 jmp	 SHORT $LN78@main
$LN77@main:
  00dd9	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv518[rsp], 0
$LN78@main:
  00de4	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00de9	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00def	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv507[rsp], rax
  00df7	b9 02 00 00 00	 mov	 ecx, 2
  00dfc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00e02	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR tv507[rsp]
  00e0a	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00e0f	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR tv512[rsp]
  00e16	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00e1a	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR tv518[rsp]
  00e21	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00e25	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159694
  00e2c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00e31	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159695
  00e38	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00e3d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e42	41 b9 03 00 00
	00		 mov	 r9d, 3
  00e48	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159696
  00e4f	ba 9e 00 00 00	 mov	 edx, 158		; 0000009eH
  00e54	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159697
  00e5b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN29@main:
$LN28@main:

; 159  :         }
; 160  : 
; 161  :         close (dev->fd);

  00e61	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00e66	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00e6c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 162  : 
; 163  :     } /* for each arg */

  00e72	e9 b5 f3 ff ff	 jmp	 $LN7@main
$LN8@main:

; 164  : 
; 165  :     return 0;

  00e77	33 c0		 xor	 eax, eax
$LN1@main:

; 166  : } /* end main */

  00e79	48 8b 8c 24 10
	21 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00e81	48 33 cc	 xor	 rcx, rsp
  00e84	e8 00 00 00 00	 call	 __security_check_cookie
  00e89	48 81 c4 20 21
	00 00		 add	 rsp, 8480		; 00002120H
  00e90	5f		 pop	 rdi
  00e91	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdswap64.c
_TEXT	SEGMENT
pgm$ = 80
syntax	PROC

; 169  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 170  :     WRMSG( HHC02495, "I", pgm );

  00009	b9 01 00 00 00	 mov	 ecx, 1
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00014	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pgm$[rsp]
  00019	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159701
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159702
  00031	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00036	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00041	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159703
  00048	ba aa 00 00 00	 mov	 edx, 170		; 000000aaH
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159704
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 171  :     return -1;

  0005a	b8 ff ff ff ff	 mov	 eax, -1

; 172  : } /* end function syntax */

  0005f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00063	c3		 ret	 0
syntax	ENDP
_TEXT	ENDS
END
