; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG206368 DB	'STARTUP', 00H
$SG206369 DB	'ON', 00H
	ORG $+1
$SG206370 DB	'OFF', 00H
$SG207650 DB	'3270', 00H
	ORG $+3
$SG207744 DB	'3278', 00H
_DATA	ENDS
CONST	SEGMENT
?quitdelay_usecs@?1??quit_thread@@9@9 DD 09c40H		; `quit_thread'::`2'::quitdelay_usecs
?count@?1??ssd_cmd@@9@9 DW 00H				; `ssd_cmd'::`2'::count
?unit@?1??ssd_cmd@@9@9 DB 00H				; `ssd_cmd'::`2'::unit
	ORG $+1
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsnprintf_l
PUBLIC	_vsprintf_l
PUBLIC	_vsnprintf_s_l
PUBLIC	_vsnprintf_s
PUBLIC	sprintf
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	quit_cmd
PUBLIC	quitmout_cmd
PUBLIC	devinit_cmd
PUBLIC	qproc_cmd
PUBLIC	_get_storekey_ptr
PUBLIC	_get_storekey1_ptr
PUBLIC	_get_storekey2_ptr
PUBLIC	s370__get_storage_key
PUBLIC	s370__and_storage_key
PUBLIC	s370__or_storage_key
PUBLIC	s370_fquest_cmd
PUBLIC	s370_fonoff_cmd
PUBLIC	s390__get_storage_key
PUBLIC	s390__and_storage_key
PUBLIC	s390__or_storage_key
PUBLIC	s390_fquest_cmd
PUBLIC	s390_fonoff_cmd
PUBLIC	z900__get_storage_key
PUBLIC	z900__and_storage_key
PUBLIC	z900__or_storage_key
PUBLIC	z900_get_4K_storage_key
PUBLIC	z900_fquest_cmd
PUBLIC	z900_fonoff_cmd
PUBLIC	$test_cmd
PUBLIC	maxrates_cmd
PUBLIC	msg_cmd
PUBLIC	comment_cmd
PUBLIC	History
PUBLIC	log_cmd
PUBLIC	logopt_cmd
PUBLIC	uptime_cmd
PUBLIC	version_cmd
PUBLIC	cctape_cmd
PUBLIC	fcb_cmd
PUBLIC	start_cmd
PUBLIC	g_cmd
PUBLIC	stop_cmd
PUBLIC	quiet_cmd
PUBLIC	iodelay_cmd
PUBLIC	autoinit_cmd
PUBLIC	automount_cmd
PUBLIC	scsimount_cmd
PUBLIC	cckd_cmd
PUBLIC	ctc_cmd
PUBLIC	ptp_cmd
PUBLIC	qeth_cmd
PUBLIC	tt32_cmd
PUBLIC	sclproot_cmd
PUBLIC	engines_cmd
PUBLIC	sysepoch_cmd
PUBLIC	yroffset_cmd
PUBLIC	tzoffset_cmd
PUBLIC	qstor_cmd
PUBLIC	mainsize_cmd
PUBLIC	xpndsize_cmd
PUBLIC	hercnice_cmd
PUBLIC	hercprio_cmd
PUBLIC	cpuprio_cmd
PUBLIC	devprio_cmd
PUBLIC	todprio_cmd
PUBLIC	srvprio_cmd
PUBLIC	netdev_cmd
PUBLIC	numcpu_cmd
PUBLIC	maxcpu_cmd
PUBLIC	cnslport_cmd
PUBLIC	sysgport_cmd
PUBLIC	http_cmd
PUBLIC	toddrag_cmd
PUBLIC	panopt_cmd
PUBLIC	panrate_cmd
PUBLIC	pantitle_cmd
PUBLIC	sh_cmd
PUBLIC	pgmprdos_cmd
PUBLIC	diag8_cmd
PUBLIC	shcmdopt_cmd
PUBLIC	legacysenseid_cmd
PUBLIC	cp_updt_cmd
PUBLIC	codepage_cmd
PUBLIC	stsi_model_cmd
PUBLIC	stsi_plant_cmd
PUBLIC	stsi_manufacturer_cmd
PUBLIC	shrdport_cmd
PUBLIC	lparname_cmd
PUBLIC	lparnum_cmd
PUBLIC	cpuverid_cmd
PUBLIC	cpumodel_cmd
PUBLIC	cpuserial_cmd
PUBLIC	cpuidfmt_cmd
PUBLIC	loadparm_cmd
PUBLIC	devlist_cmd
PUBLIC	qd_cmd
PUBLIC	attach_cmd
PUBLIC	detach_cmd
PUBLIC	define_cmd
PUBLIC	pgmtrace_cmd
PUBLIC	ostailor_cmd
PUBLIC	k_cmd
PUBLIC	ds_cmd
PUBLIC	devtmax_cmd
PUBLIC	sf_cmd
PUBLIC	mounted_tape_reinit_cmd
PUBLIC	mt_cmd
PUBLIC	savecore_cmd
PUBLIC	defsym_cmd
PUBLIC	delsym_cmd
PUBLIC	fquest_cmd
PUBLIC	OnOffCommand
PUBLIC	cmdsep_cmd
PUBLIC	ssd_cmd
PUBLIC	scpecho_cmd
PUBLIC	scpimply_cmd
PUBLIC	ldmod_cmd
PUBLIC	rmmod_cmd
PUBLIC	lsmod_cmd
PUBLIC	lsdep_cmd
PUBLIC	lsequ_cmd
PUBLIC	modpath_cmd
PUBLIC	ecpsvm_cmd
PUBLIC	herclogo_cmd
PUBLIC	sizeof_cmd
PUBLIC	conkpalv_cmd
PUBLIC	msglevel_cmd
PUBLIC	qcpuid_cmd
PUBLIC	qpfkeys_cmd
PUBLIC	qpid_cmd
PUBLIC	qports_cmd
PUBLIC	cmdlvl_cmd
PUBLIC	__real@3f1a36e2eb1c432d
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@40c3880000000000
PUBLIC	__real@bff0000000000000
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp_isupper:PROC
EXTRN	__imp_isdigit:PROC
EXTRN	__imp_isspace:PROC
EXTRN	__imp_isalnum:PROC
EXTRN	__imp_isprint:PROC
EXTRN	__imp_toupper:PROC
EXTRN	__imp__errno:PROC
EXTRN	memmove:PROC
EXTRN	strchr:PROC
EXTRN	strcmp:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp_strncmp:PROC
EXTRN	__imp__strnicmp:PROC
EXTRN	__imp_strncpy:PROC
EXTRN	__imp_strpbrk:PROC
EXTRN	__imp_strdup:PROC
EXTRN	__imp_IsDebuggerPresent:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_qsort:PROC
EXTRN	abs:PROC
EXTRN	__imp_rand:PROC
EXTRN	__imp_atoi:PROC
EXTRN	__imp_strtol:PROC
EXTRN	__imp_strtoul:PROC
EXTRN	__imp_WSAGetLastError:PROC
EXTRN	__imp_access:PROC
EXTRN	__imp_close:PROC
EXTRN	__imp_write:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vsprintf:PROC
EXTRN	__imp___stdio_common_vsnprintf_s:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	__imp__ctime64:PROC
EXTRN	__imp__difftime64:PROC
EXTRN	__imp__localtime64:PROC
EXTRN	__imp__time64:PROC
EXTRN	__imp_raise:PROC
EXTRN	__imp_getcwd:PROC
EXTRN	__imp_fthread_self:PROC
EXTRN	__imp_hthread_initialize_lock:PROC
EXTRN	__imp_hthread_obtain_lock:PROC
EXTRN	__imp_hthread_release_lock:PROC
EXTRN	__imp_hthread_destroy_lock:PROC
EXTRN	__imp_hthread_signal_condition:PROC
EXTRN	__imp_hthread_broadcast_condition:PROC
EXTRN	__imp_hthread_wait_condition:PROC
EXTRN	__imp_hthread_create_thread:PROC
EXTRN	__imp_hthread_join_thread:PROC
EXTRN	__imp_hthread_set_lock_name:PROC
EXTRN	__imp_display_version:PROC
EXTRN	__imp_display_build_options:PROC
EXTRN	__imp_display_extpkg_vers:PROC
EXTRN	__imp_get_symbol:PROC
EXTRN	__imp_set_symbol:PROC
EXTRN	__imp_del_symbol:PROC
EXTRN	__imp_list_all_symbols:PROC
EXTRN	__imp_strlcpy:PROC
EXTRN	__imp_strlcat:PROC
EXTRN	__imp_fmt_memsize:PROC
EXTRN	__imp_fmt_memsize_KB:PROC
EXTRN	__imp_fmt_memsize_MB:PROC
EXTRN	__imp_FormatFCB:PROC
EXTRN	__imp_FormatCCTAPE:PROC
EXTRN	__imp_rtrim:PROC
EXTRN	__imp_trim:PROC
EXTRN	__imp_ptyp2short:PROC
EXTRN	__imp_short2ptyp:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_strtok_r:PROC
EXTRN	__imp_nanosleep:PROC
EXTRN	__imp_usleep:PROC
EXTRN	__imp_sleep:PROC
EXTRN	__imp_sched_yield:PROC
EXTRN	__imp_getrusage:PROC
EXTRN	__imp_realpath:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_set_socket_keepalive:PROC
EXTRN	__imp_get_socket_keepalive:PROC
EXTRN	__imp_expand_environ_vars:PROC
EXTRN	__imp_w32_socket:PROC
EXTRN	__imp_w32_close_socket:PROC
EXTRN	__imp_w32_inet_ntop:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_w32_hopen:PROC
EXTRN	__imp_w32_basename:PROC
EXTRN	set_tod_steering:PROC
EXTRN	get_tod_steering:PROC
EXTRN	__imp_query_codepage:PROC
EXTRN	__imp_valid_codepage_name:PROC
EXTRN	__imp_set_codepage:PROC
EXTRN	__imp_update_codepage:PROC
EXTRN	__imp_guest_to_host:PROC
EXTRN	__imp_buf_guest_to_host:PROC
EXTRN	__imp_str_guest_to_host:PROC
EXTRN	__imp_log_sethrdcpy:PROC
EXTRN	__imp_log_dsphrdcpy:PROC
EXTRN	__imp_hdl_setpath:PROC
EXTRN	__imp_hdl_getpath:PROC
EXTRN	__imp_hdl_loadmod:PROC
EXTRN	__imp_hdl_freemod:PROC
EXTRN	__imp_hdl_listmods:PROC
EXTRN	__imp_hdl_listdeps:PROC
EXTRN	__imp_hdl_listequs:PROC
EXTRN	__imp_dasd_build_ckd_subsys_status:PROC
EXTRN	set_sce_dir:PROC
EXTRN	get_sce_dir:PROC
EXTRN	txf_model_warning:PROC
EXTRN	init_sysblk_netdev:PROC
EXTRN	find_device_by_devnum:PROC
EXTRN	detach_device:PROC
EXTRN	define_device:PROC
EXTRN	configure_numcpu:PROC
EXTRN	configure_maxcpu:PROC
EXTRN	configure_storage:PROC
EXTRN	configure_xstorage:PROC
EXTRN	adjust_mainsize:PROC
EXTRN	configure_shrdport:PROC
EXTRN	parse_and_attach_devices:PROC
EXTRN	parse_single_devnum:PROC
EXTRN	parse_single_devnum_silent:PROC
EXTRN	parse_devnums:PROC
EXTRN	readlogo:PROC
EXTRN	clearlogo:PROC
EXTRN	parse_conkpalv:PROC
EXTRN	is_diag_instr:PROC
EXTRN	set_console_title:PROC
EXTRN	set_panel_colors:PROC
EXTRN	start_cmd_cpu:PROC
EXTRN	stop_cmd_cpu:PROC
EXTRN	setAllCpuIds_lock:PROC
EXTRN	resetAllCpuIds:PROC
EXTRN	setOperationMode:PROC
EXTRN	enable_lparmode:PROC
EXTRN	losc_set:PROC
EXTRN	http_command:PROC
EXTRN	http_get_port:PROC
EXTRN	http_get_portauth:PROC
EXTRN	set_lparname:PROC
EXTRN	str_lparname:PROC
EXTRN	set_manufacturer:PROC
EXTRN	str_manufacturer:PROC
EXTRN	set_plant:PROC
EXTRN	str_plant:PROC
EXTRN	set_model:PROC
EXTRN	str_modelhard:PROC
EXTRN	str_modelcapa:PROC
EXTRN	str_modelperm:PROC
EXTRN	str_modeltemp:PROC
EXTRN	bld_sysib_sequence:PROC
EXTRN	configure_epoch:PROC
EXTRN	configure_yroffset:PROC
EXTRN	configure_tzoffset:PROC
EXTRN	signal_quiesce:PROC
EXTRN	herc_system:PROC
EXTRN	do_shutdown:PROC
EXTRN	display_subchannel:PROC
EXTRN	parse_range:PROC
EXTRN	get_connected_client:PROC
EXTRN	device_attention:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_logmsg:PROC
EXTRN	history_remove:PROC
EXTRN	history_relative_line:PROC
EXTRN	history_absolute_line:PROC
EXTRN	history_show:PROC
EXTRN	__imp_cckd_command:PROC
EXTRN	__imp_cckd_print_itrace:PROC
EXTRN	__imp_cckd_sf_add:PROC
EXTRN	__imp_cckd_sf_remove:PROC
EXTRN	__imp_cckd_sf_comp:PROC
EXTRN	__imp_cckd_sf_chk:PROC
EXTRN	__imp_cckd_sf_stats:PROC
EXTRN	ecpsvm_command:PROC
EXTRN	device_thread:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_sysblk:BYTE
EXTRN	__imp_extgui:DWORD
EXTRN	maxrates_rpt_intvl:DWORD
EXTRN	curr_high_mips_rate:DWORD
EXTRN	curr_high_sios_rate:DWORD
EXTRN	prev_high_mips_rate:DWORD
EXTRN	prev_high_sios_rate:DWORD
EXTRN	curr_int_start_time:QWORD
EXTRN	prev_int_start_time:QWORD
EXTRN	__imp_debug_tt32_stats:QWORD
EXTRN	__imp_debug_tt32_tracing:QWORD
EXTRN	history_requested:DWORD
EXTRN	__imp_cckdblk:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
$SG181525 DB	01H DUP (?)
	ALIGN	4

$SG191610 DB	01H DUP (?)
	ALIGN	4

$SG204572 DB	01H DUP (?)
	ALIGN	8

?testlock@?1??test_locks_thread@@9@9 DQ 01H DUP (?)	; `test_locks_thread'::`2'::testlock
deadlocks_a DQ	01H DUP (?)
deadlocks_b DQ	01H DUP (?)
deadlocks_c DQ	01H DUP (?)
?tid@?6??$test_cmd@@9@9 DD 01H DUP (?)			; `$test_cmd'::`7'::tid
?tid@?BB@??$test_cmd@@9@9 DD 01H DUP (?)		; `$test_cmd'::`17'::tid
?testlock@?BF@??$test_cmd@@9@9 DQ 01H DUP (?)		; `$test_cmd'::`21'::testlock
?testlock@?BG@??$test_cmd@@9@9 DQ 01H DUP (?)		; `$test_cmd'::`22'::testlock
?testlock@?BH@??$test_cmd@@9@9 DQ 01H DUP (?)		; `$test_cmd'::`23'::testlock
$SG204784 DB	01H DUP (?)
	ALIGN	4

$SG204987 DB	01H DUP (?)
	ALIGN	4

?tid@?1??quit_cmd@@9@9 DD 01H DUP (?)			; `quit_cmd'::`2'::tid
$SG205193 DB	01H DUP (?)
	ALIGN	4

$SG205348 DB	01H DUP (?)
	ALIGN	4

$SG205391 DB	01H DUP (?)
	ALIGN	4

$SG205393 DB	01H DUP (?)
	ALIGN	4

$SG205401 DB	01H DUP (?)
	ALIGN	4

$SG205731 DB	01H DUP (?)
	ALIGN	4

?cwd@?BG@??automount_cmd@@9@9 DB 0104H DUP (?)		; `automount_cmd'::`22'::cwd
?cwd@?CM@??automount_cmd@@9@9 DB 0104H DUP (?)		; `automount_cmd'::`44'::cwd
$SG206010 DB	01H DUP (?)
	ALIGN	4

$SG206031 DB	01H DUP (?)
	ALIGN	4

$SG206095 DB	01H DUP (?)
	ALIGN	4

$SG206197 DB	01H DUP (?)
	ALIGN	4

$SG206214 DB	01H DUP (?)
	ALIGN	4

$SG207666 DB	01H DUP (?)
	ALIGN	4

$SG207764 DB	01H DUP (?)
	ALIGN	4

$SG207908 DB	01H DUP (?)
	ALIGN	4

$SG207909 DB	01H DUP (?)
	ALIGN	4

$SG207967 DB	01H DUP (?)
	ALIGN	4

$SG207976 DB	01H DUP (?)
	ALIGN	4

$SG207977 DB	01H DUP (?)
	ALIGN	4

$SG208142 DB	01H DUP (?)
	ALIGN	4

$SG208191 DB	01H DUP (?)
	ALIGN	4

$SG208197 DB	01H DUP (?)
	ALIGN	4

$SG208206 DB	01H DUP (?)
	ALIGN	4

$SG208251 DB	01H DUP (?)
	ALIGN	4

$SG208257 DB	01H DUP (?)
	ALIGN	4

$SG208266 DB	01H DUP (?)
	ALIGN	4

$SG208307 DB	01H DUP (?)
	ALIGN	4

$SG208442 DB	01H DUP (?)
	ALIGN	4

$SG208444 DB	01H DUP (?)
	ALIGN	4

$SG208446 DB	01H DUP (?)
	ALIGN	4

$SG208448 DB	01H DUP (?)
	ALIGN	4

$SG208483 DB	01H DUP (?)
	ALIGN	4

$SG208817 DB	01H DUP (?)
	ALIGN	4

$SG209014 DB	01H DUP (?)
	ALIGN	4

$SG209144 DB	01H DUP (?)
	ALIGN	4

$SG209185 DB	01H DUP (?)
	ALIGN	4

$SG209187 DB	01H DUP (?)
	ALIGN	4

$SG209189 DB	01H DUP (?)
	ALIGN	4

$SG209916 DB	01H DUP (?)
	ALIGN	4

$SG209980 DB	01H DUP (?)
	ALIGN	4

$SG210208 DB	01H DUP (?)
	ALIGN	4

$SG210209 DB	01H DUP (?)
	ALIGN	4

$SG210211 DB	01H DUP (?)
	ALIGN	4

$SG210212 DB	01H DUP (?)
	ALIGN	4

$SG210588 DB	01H DUP (?)
	ALIGN	4

$SG210767 DB	01H DUP (?)
	ALIGN	4

$SG210801 DB	01H DUP (?)
	ALIGN	4

$SG210809 DB	01H DUP (?)
	ALIGN	4

$SG210846 DB	01H DUP (?)
	ALIGN	4

$SG210961 DB	01H DUP (?)
	ALIGN	4

$SG211008 DB	01H DUP (?)
	ALIGN	4

$SG211550 DB	01H DUP (?)
	ALIGN	4

$SG211556 DB	01H DUP (?)
	ALIGN	4

$SG211592 DB	01H DUP (?)
	ALIGN	4

$SG211695 DB	01H DUP (?)
	ALIGN	4

$SG211884 DB	01H DUP (?)
	ALIGN	4

$SG211893 DB	01H DUP (?)
	ALIGN	4

$SG211910 DB	01H DUP (?)
	ALIGN	4

$SG211924 DB	01H DUP (?)
	ALIGN	4

$SG211992 DB	01H DUP (?)
	ALIGN	4

$SG211998 DB	01H DUP (?)
	ALIGN	4

$SG212051 DB	01H DUP (?)
	ALIGN	4

$SG212060 DB	01H DUP (?)
	ALIGN	4

$SG212139 DB	01H DUP (?)
	ALIGN	4

$SG212141 DB	01H DUP (?)
	ALIGN	4

$SG212143 DB	01H DUP (?)
	ALIGN	4

$SG212145 DB	01H DUP (?)
	ALIGN	4

$SG212147 DB	01H DUP (?)
	ALIGN	4

$SG212149 DB	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+118
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$_vsnprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$_vsnprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sscanf
pdata	ENDS
pdata	SEGMENT
$pdata$ctime DD	imagerel ctime
	DD	imagerel ctime+25
	DD	imagerel $unwind$ctime
$pdata$difftime DD imagerel difftime
	DD	imagerel difftime+35
	DD	imagerel $unwind$difftime
$pdata$localtime DD imagerel localtime
	DD	imagerel localtime+25
	DD	imagerel $unwind$localtime
$pdata$time DD	imagerel time
	DD	imagerel time+25
	DD	imagerel $unwind$time
$pdata$DebuggerTrace DD imagerel DebuggerTrace
	DD	imagerel DebuggerTrace+247
	DD	imagerel $unwind$DebuggerTrace
$pdata$strabbrev DD imagerel strabbrev
	DD	imagerel strabbrev+218
	DD	imagerel $unwind$strabbrev
$pdata$strcaseabbrev DD imagerel strcaseabbrev
	DD	imagerel strcaseabbrev+320
	DD	imagerel $unwind$strcaseabbrev
$pdata$strupper DD imagerel strupper
	DD	imagerel strupper+114
	DD	imagerel $unwind$strupper
$pdata$strnupper DD imagerel strnupper
	DD	imagerel strnupper+150
	DD	imagerel $unwind$strnupper
$pdata$quit_cmd DD imagerel $LN24
	DD	imagerel $LN24+438
	DD	imagerel $unwind$quit_cmd
$pdata$quitmout_cmd DD imagerel $LN15
	DD	imagerel $LN15+808
	DD	imagerel $unwind$quitmout_cmd
$pdata$devinit_cmd DD imagerel $LN42
	DD	imagerel $LN42+1888
	DD	imagerel $unwind$devinit_cmd
$pdata$qproc_cmd DD imagerel $LN43
	DD	imagerel $LN43+2513
	DD	imagerel $unwind$qproc_cmd
$pdata$wakeup_cpu DD imagerel wakeup_cpu
	DD	imagerel wakeup_cpu+44
	DD	imagerel $unwind$wakeup_cpu
$pdata$Interrupt_Lock_Obtained DD imagerel Interrupt_Lock_Obtained
	DD	imagerel Interrupt_Lock_Obtained+269
	DD	imagerel $unwind$Interrupt_Lock_Obtained
$pdata$Obtain_Interrupt_Lock DD imagerel Obtain_Interrupt_Lock
	DD	imagerel Obtain_Interrupt_Lock+88
	DD	imagerel $unwind$Obtain_Interrupt_Lock
$pdata$Release_Interrupt_Lock DD imagerel Release_Interrupt_Lock
	DD	imagerel Release_Interrupt_Lock+71
	DD	imagerel $unwind$Release_Interrupt_Lock
$pdata$are_any_cpus_started_intlock_held DD imagerel are_any_cpus_started_intlock_held
	DD	imagerel are_any_cpus_started_intlock_held+118
	DD	imagerel $unwind$are_any_cpus_started_intlock_held
$pdata$are_any_cpus_started DD imagerel are_any_cpus_started
	DD	imagerel are_any_cpus_started+51
	DD	imagerel $unwind$are_any_cpus_started
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_get_storekey_ptr DD imagerel $LN5
	DD	imagerel $LN5+104
	DD	imagerel $unwind$_get_storekey_ptr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370__get_storage_key DD imagerel $LN8
	DD	imagerel $LN8+118
	DD	imagerel $unwind$s370__get_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370__and_storage_key DD imagerel $LN8
	DD	imagerel $LN8+176
	DD	imagerel $unwind$s370__and_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370__or_storage_key DD imagerel $LN8
	DD	imagerel $LN8+170
	DD	imagerel $unwind$s370__or_storage_key
pdata	ENDS
pdata	SEGMENT
$pdata$s370_fquest_cmd DD imagerel $LN14
	DD	imagerel $LN14+532
	DD	imagerel $unwind$s370_fquest_cmd
$pdata$s370_fonoff_cmd DD imagerel $LN16
	DD	imagerel $LN16+696
	DD	imagerel $unwind$s370_fonoff_cmd
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390__get_storage_key DD imagerel $LN8
	DD	imagerel $LN8+107
	DD	imagerel $unwind$s390__get_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390__and_storage_key DD imagerel $LN8
	DD	imagerel $LN8+165
	DD	imagerel $unwind$s390__and_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390__or_storage_key DD imagerel $LN8
	DD	imagerel $LN8+159
	DD	imagerel $unwind$s390__or_storage_key
pdata	ENDS
pdata	SEGMENT
$pdata$s390_fquest_cmd DD imagerel $LN14
	DD	imagerel $LN14+532
	DD	imagerel $unwind$s390_fquest_cmd
$pdata$s390_fonoff_cmd DD imagerel $LN16
	DD	imagerel $LN16+696
	DD	imagerel $unwind$s390_fonoff_cmd
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900__get_storage_key DD imagerel $LN8
	DD	imagerel $LN8+107
	DD	imagerel $unwind$z900__get_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900__and_storage_key DD imagerel $LN8
	DD	imagerel $LN8+165
	DD	imagerel $unwind$z900__and_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900__or_storage_key DD imagerel $LN8
	DD	imagerel $LN8+159
	DD	imagerel $unwind$z900__or_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_get_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$z900_get_4K_storage_key
pdata	ENDS
pdata	SEGMENT
$pdata$z900_fquest_cmd DD imagerel $LN14
	DD	imagerel $LN14+532
	DD	imagerel $unwind$z900_fquest_cmd
$pdata$z900_fonoff_cmd DD imagerel $LN16
	DD	imagerel $LN16+696
	DD	imagerel $unwind$z900_fonoff_cmd
$pdata$test_thread DD imagerel test_thread
	DD	imagerel test_thread+270
	DD	imagerel $unwind$test_thread
$pdata$test_locks_thread DD imagerel test_locks_thread
	DD	imagerel test_locks_thread+69
	DD	imagerel $unwind$test_locks_thread
$pdata$deadlocks_1 DD imagerel deadlocks_1
	DD	imagerel deadlocks_1+202
	DD	imagerel $unwind$deadlocks_1
$pdata$deadlocks_2 DD imagerel deadlocks_2
	DD	imagerel deadlocks_2+202
	DD	imagerel $unwind$deadlocks_2
$pdata$deadlocks_3 DD imagerel deadlocks_3
	DD	imagerel deadlocks_3+202
	DD	imagerel $unwind$deadlocks_3
$pdata$$test_cmd DD imagerel $LN86
	DD	imagerel $LN86+2783
	DD	imagerel $unwind$$test_cmd
$pdata$devnotfound_msg DD imagerel devnotfound_msg
	DD	imagerel devnotfound_msg+129
	DD	imagerel $unwind$devnotfound_msg
$pdata$missing_devnum DD imagerel missing_devnum
	DD	imagerel missing_devnum+80
	DD	imagerel $unwind$missing_devnum
$pdata$maxrates_cmd DD imagerel $LN33
	DD	imagerel $LN33+2679
	DD	imagerel $unwind$maxrates_cmd
$pdata$message_cmd DD imagerel message_cmd
	DD	imagerel message_cmd+648
	DD	imagerel $unwind$message_cmd
$pdata$msg_cmd DD imagerel $LN13
	DD	imagerel $LN13+348
	DD	imagerel $unwind$msg_cmd
$pdata$quit_thread DD imagerel quit_thread
	DD	imagerel quit_thread+39
	DD	imagerel $unwind$quit_thread
$pdata$History DD imagerel $LN19
	DD	imagerel $LN19+266
	DD	imagerel $unwind$History
$pdata$log_cmd DD imagerel $LN14
	DD	imagerel $LN14+435
	DD	imagerel $unwind$log_cmd
$pdata$logopt_cmd DD imagerel $LN34
	DD	imagerel $LN34+1287
	DD	imagerel $unwind$logopt_cmd
$pdata$uptime_cmd DD imagerel $LN18
	DD	imagerel $LN18+912
	DD	imagerel $unwind$uptime_cmd
$pdata$version_cmd DD imagerel $LN8
	DD	imagerel $LN8+231
	DD	imagerel $unwind$version_cmd
$pdata$cctape_cmd DD imagerel $LN11
	DD	imagerel $LN11+759
	DD	imagerel $unwind$cctape_cmd
$pdata$fcb_cmd DD imagerel $LN11
	DD	imagerel $LN11+774
	DD	imagerel $unwind$fcb_cmd
$pdata$start_cmd DD imagerel $LN27
	DD	imagerel $LN27+1423
	DD	imagerel $unwind$start_cmd
$pdata$g_cmd DD	imagerel $LN19
	DD	imagerel $LN19+519
	DD	imagerel $unwind$g_cmd
$pdata$stop_cmd DD imagerel $LN17
	DD	imagerel $LN17+698
	DD	imagerel $unwind$stop_cmd
$pdata$quiet_cmd DD imagerel $LN21
	DD	imagerel $LN21+471
	DD	imagerel $unwind$quiet_cmd
$pdata$iodelay_cmd DD imagerel $LN18
	DD	imagerel $LN18+833
	DD	imagerel $unwind$iodelay_cmd
$pdata$autoinit_cmd DD imagerel $LN25
	DD	imagerel $LN25+847
	DD	imagerel $unwind$autoinit_cmd
$pdata$check_define_default_automount_dir DD imagerel check_define_default_automount_dir
	DD	imagerel check_define_default_automount_dir+683
	DD	imagerel $unwind$check_define_default_automount_dir
$pdata$add_tamdir DD imagerel add_tamdir
	DD	imagerel add_tamdir+958
	DD	imagerel $unwind$add_tamdir
$pdata$automount_cmd DD imagerel $LN107
	DD	imagerel $LN107+5452
	DD	imagerel $unwind$automount_cmd
$pdata$try_scsi_refresh DD imagerel try_scsi_refresh
	DD	imagerel try_scsi_refresh+164
	DD	imagerel $unwind$try_scsi_refresh
$pdata$scsimount_cmd DD imagerel $LN60
	DD	imagerel $LN60+2652
	DD	imagerel $unwind$scsimount_cmd
$pdata$cckd_cmd DD imagerel $LN10
	DD	imagerel $LN10+341
	DD	imagerel $unwind$cckd_cmd
$pdata$ctc_cmd DD imagerel $LN118
	DD	imagerel $LN118+3866
	DD	imagerel $unwind$ctc_cmd
$pdata$ptp_cmd DD imagerel $LN56
	DD	imagerel $LN56+2449
	DD	imagerel $unwind$ptp_cmd
$pdata$qeth_cmd DD imagerel $LN117
	DD	imagerel $LN117+5353
	DD	imagerel $unwind$qeth_cmd
$pdata$tt32_cmd DD imagerel $LN35
	DD	imagerel $LN35+2327
	DD	imagerel $unwind$tt32_cmd
$pdata$sclproot_cmd DD imagerel $LN18
	DD	imagerel $LN18+715
	DD	imagerel $unwind$sclproot_cmd
$pdata$engines_cmd DD imagerel $LN26
	DD	imagerel $LN26+1195
	DD	imagerel $unwind$engines_cmd
$pdata$sysepoch_cmd DD imagerel $LN23
	DD	imagerel $LN23+885
	DD	imagerel $unwind$sysepoch_cmd
$pdata$yroffset_cmd DD imagerel $LN19
	DD	imagerel $LN19+690
	DD	imagerel $unwind$yroffset_cmd
$pdata$tzoffset_cmd DD imagerel $LN19
	DD	imagerel $LN19+722
	DD	imagerel $unwind$tzoffset_cmd
$pdata$qstor_cmd DD imagerel $LN22
	DD	imagerel $LN22+864
	DD	imagerel $unwind$qstor_cmd
$pdata$mainsize_cmd DD imagerel $LN41
	DD	imagerel $LN41+1984
	DD	imagerel $unwind$mainsize_cmd
$pdata$xpndsize_cmd DD imagerel $LN41
	DD	imagerel $LN41+1676
	DD	imagerel $unwind$xpndsize_cmd
$pdata$deprecated_cmd DD imagerel deprecated_cmd
	DD	imagerel deprecated_cmd+129
	DD	imagerel $unwind$deprecated_cmd
$pdata$hercnice_cmd DD imagerel $LN9
	DD	imagerel $LN9+58
	DD	imagerel $unwind$hercnice_cmd
$pdata$hercprio_cmd DD imagerel $LN9
	DD	imagerel $LN9+58
	DD	imagerel $unwind$hercprio_cmd
$pdata$cpuprio_cmd DD imagerel $LN9
	DD	imagerel $LN9+58
	DD	imagerel $unwind$cpuprio_cmd
$pdata$devprio_cmd DD imagerel $LN9
	DD	imagerel $LN9+58
	DD	imagerel $unwind$devprio_cmd
$pdata$todprio_cmd DD imagerel $LN9
	DD	imagerel $LN9+58
	DD	imagerel $unwind$todprio_cmd
$pdata$srvprio_cmd DD imagerel $LN9
	DD	imagerel $LN9+58
	DD	imagerel $unwind$srvprio_cmd
$pdata$netdev_cmd DD imagerel $LN16
	DD	imagerel $LN16+687
	DD	imagerel $unwind$netdev_cmd
$pdata$numcpu_cmd DD imagerel $LN22
	DD	imagerel $LN22+1257
	DD	imagerel $unwind$numcpu_cmd
$pdata$maxcpu_cmd DD imagerel $LN22
	DD	imagerel $LN22+1108
	DD	imagerel $unwind$maxcpu_cmd
$pdata$cnslport_cmd DD imagerel $LN35
	DD	imagerel $LN35+1840
	DD	imagerel $unwind$cnslport_cmd
$pdata$sysgport_cmd DD imagerel $LN44
	DD	imagerel $LN44+2199
	DD	imagerel $unwind$sysgport_cmd
$pdata$http_cmd DD imagerel $LN6
	DD	imagerel $LN6+83
	DD	imagerel $unwind$http_cmd
$pdata$toddrag_cmd DD imagerel $LN16
	DD	imagerel $LN16+960
	DD	imagerel $unwind$toddrag_cmd
$pdata$panopt_cmd DD imagerel $LN73
	DD	imagerel $LN73+2880
	DD	imagerel $unwind$panopt_cmd
$pdata$panrate_cmd DD imagerel $LN22
	DD	imagerel $LN22+1231
	DD	imagerel $unwind$panrate_cmd
$pdata$pantitle_cmd DD imagerel $LN20
	DD	imagerel $LN20+876
	DD	imagerel $unwind$pantitle_cmd
$pdata$sh_cmd DD imagerel $LN15
	DD	imagerel $LN15+225
	DD	imagerel $unwind$sh_cmd
$pdata$pgmprdos_cmd DD imagerel $LN17
	DD	imagerel $LN17+504
	DD	imagerel $unwind$pgmprdos_cmd
$pdata$diag8_cmd DD imagerel $LN33
	DD	imagerel $LN33+1262
	DD	imagerel $unwind$diag8_cmd
$pdata$shcmdopt_cmd DD imagerel $LN32
	DD	imagerel $LN32+1150
	DD	imagerel $unwind$shcmdopt_cmd
$pdata$legacysenseid_cmd DD imagerel $LN24
	DD	imagerel $LN24+1000
	DD	imagerel $unwind$legacysenseid_cmd
$pdata$cp_updt_cmd DD imagerel $LN25
	DD	imagerel $LN25+1013
	DD	imagerel $unwind$cp_updt_cmd
$pdata$codepage_cmd DD imagerel $LN18
	DD	imagerel $LN18+526
	DD	imagerel $unwind$codepage_cmd
$pdata$stsi_model_cmd DD imagerel $LN29
	DD	imagerel $LN29+1984
	DD	imagerel $unwind$stsi_model_cmd
$pdata$stsi_plant_cmd DD imagerel $LN21
	DD	imagerel $LN21+1223
	DD	imagerel $unwind$stsi_plant_cmd
$pdata$stsi_manufacturer_cmd DD imagerel $LN21
	DD	imagerel $LN21+1223
	DD	imagerel $unwind$stsi_manufacturer_cmd
$pdata$shrdport_cmd DD imagerel $LN22
	DD	imagerel $LN22+1101
	DD	imagerel $unwind$shrdport_cmd
$pdata$lparname_cmd DD imagerel $LN14
	DD	imagerel $LN14+606
	DD	imagerel $unwind$lparname_cmd
$pdata$lparnum_cmd DD imagerel $LN38
	DD	imagerel $LN38+1751
	DD	imagerel $unwind$lparnum_cmd
$pdata$cpuverid_cmd DD imagerel $LN21
	DD	imagerel $LN21+1280
	DD	imagerel $unwind$cpuverid_cmd
$pdata$cpumodel_cmd DD imagerel $LN19
	DD	imagerel $LN19+1105
	DD	imagerel $unwind$cpumodel_cmd
$pdata$cpuserial_cmd DD imagerel $LN17
	DD	imagerel $LN17+1069
	DD	imagerel $unwind$cpuserial_cmd
$pdata$cpuidfmt_cmd DD imagerel $LN34
	DD	imagerel $LN34+2183
	DD	imagerel $unwind$cpuidfmt_cmd
$pdata$loadparm_cmd DD imagerel $LN14
	DD	imagerel $LN14+614
	DD	imagerel $unwind$loadparm_cmd
$pdata$SortDevBlkPtrsAscendingByDevnum DD imagerel SortDevBlkPtrsAscendingByDevnum
	DD	imagerel SortDevBlkPtrsAscendingByDevnum+51
	DD	imagerel $unwind$SortDevBlkPtrsAscendingByDevnum
$pdata$is_devclass_name DD imagerel is_devclass_name
	DD	imagerel is_devclass_name+335
	DD	imagerel $unwind$is_devclass_name
$pdata$devlist_cmd DD imagerel $LN57
	DD	imagerel $LN57+2618
	DD	imagerel $unwind$devlist_cmd
$pdata$qd_cmd DD imagerel $LN94
	DD	imagerel $LN94+4324
	DD	imagerel $unwind$qd_cmd
$pdata$attach_cmd DD imagerel $LN7
	DD	imagerel $LN7+240
	DD	imagerel $unwind$attach_cmd
$pdata$detach_cmd DD imagerel $LN30
	DD	imagerel $LN30+1253
	DD	imagerel $unwind$detach_cmd
$pdata$define_cmd DD imagerel $LN10
	DD	imagerel $LN10+376
	DD	imagerel $unwind$define_cmd
$pdata$pgmtrace_cmd DD imagerel $LN26
	DD	imagerel $LN26+1476
	DD	imagerel $unwind$pgmtrace_cmd
$pdata$ostailor_cmd DD imagerel $LN81
	DD	imagerel $LN81+3282
	DD	imagerel $unwind$ostailor_cmd
$pdata$k_cmd DD	imagerel $LN7
	DD	imagerel $LN7+155
	DD	imagerel $unwind$k_cmd
$pdata$ds_cmd DD imagerel $LN11
	DD	imagerel $LN11+435
	DD	imagerel $unwind$ds_cmd
$pdata$devtmax_cmd DD imagerel $LN15
	DD	imagerel $LN15+895
	DD	imagerel $unwind$devtmax_cmd
$pdata$sf_cmd DD imagerel $LN59
	DD	imagerel $LN59+2589
	DD	imagerel $unwind$sf_cmd
$pdata$mounted_tape_reinit_cmd DD imagerel $LN24
	DD	imagerel $LN24+1000
	DD	imagerel $unwind$mounted_tape_reinit_cmd
$pdata$mt_cmd DD imagerel $LN167
	DD	imagerel $LN167+7176
	DD	imagerel $unwind$mt_cmd
$pdata$savecore_cmd DD imagerel $LN40
	DD	imagerel $LN40+3046
	DD	imagerel $unwind$savecore_cmd
$pdata$is_reserved_symbol DD imagerel is_reserved_symbol
	DD	imagerel is_reserved_symbol+751
	DD	imagerel $unwind$is_reserved_symbol
$pdata$defsym_cmd DD imagerel $LN12
	DD	imagerel $LN12+594
	DD	imagerel $unwind$defsym_cmd
$pdata$delsym_cmd DD imagerel $LN9
	DD	imagerel $LN9+473
	DD	imagerel $unwind$delsym_cmd
$pdata$fquest_cmd DD imagerel $LN21
	DD	imagerel $LN21+125
	DD	imagerel $unwind$fquest_cmd
$pdata$fonoff_cmd DD imagerel fonoff_cmd
	DD	imagerel fonoff_cmd+133
	DD	imagerel $unwind$fonoff_cmd
$pdata$OnOffCommand DD imagerel $LN63
	DD	imagerel $LN63+3873
	DD	imagerel $unwind$OnOffCommand
$pdata$cmdsep_cmd DD imagerel $LN27
	DD	imagerel $LN27+1505
	DD	imagerel $unwind$cmdsep_cmd
$pdata$ssd_cmd DD imagerel $LN12
	DD	imagerel $LN12+62
	DD	imagerel $unwind$ssd_cmd
$pdata$scpecho_cmd DD imagerel $LN23
	DD	imagerel $LN23+893
	DD	imagerel $unwind$scpecho_cmd
$pdata$scpimply_cmd DD imagerel $LN23
	DD	imagerel $LN23+893
	DD	imagerel $unwind$scpimply_cmd
$pdata$ldmod_cmd DD imagerel $LN15
	DD	imagerel $LN15+493
	DD	imagerel $unwind$ldmod_cmd
$pdata$rmmod_cmd DD imagerel $LN15
	DD	imagerel $LN15+491
	DD	imagerel $unwind$rmmod_cmd
$pdata$lsmod_cmd DD imagerel $LN13
	DD	imagerel $LN13+308
	DD	imagerel $unwind$lsmod_cmd
$pdata$lsdep_cmd DD imagerel $LN11
	DD	imagerel $LN11+231
	DD	imagerel $unwind$lsdep_cmd
$pdata$lsequ_cmd DD imagerel $LN11
	DD	imagerel $LN11+229
	DD	imagerel $unwind$lsequ_cmd
$pdata$modpath_cmd DD imagerel $LN14
	DD	imagerel $LN14+574
	DD	imagerel $unwind$modpath_cmd
$pdata$ecpsvm_cmd DD imagerel $LN28
	DD	imagerel $LN28+1834
	DD	imagerel $unwind$ecpsvm_cmd
$pdata$herclogo_cmd DD imagerel $LN10
	DD	imagerel $LN10+649
	DD	imagerel $unwind$herclogo_cmd
$pdata$sizeof_cmd DD imagerel $LN12
	DD	imagerel $LN12+2608
	DD	imagerel $unwind$sizeof_cmd
$pdata$conkpalv_cmd DD imagerel $LN21
	DD	imagerel $LN21+1424
	DD	imagerel $unwind$conkpalv_cmd
$pdata$msglevel_cmd DD imagerel $LN35
	DD	imagerel $LN35+1390
	DD	imagerel $unwind$msglevel_cmd
$pdata$qcpuid_cpuid DD imagerel qcpuid_cpuid
	DD	imagerel qcpuid_cpuid+110
	DD	imagerel $unwind$qcpuid_cpuid
$pdata$qcpuid_cpcsi DD imagerel qcpuid_cpcsi
	DD	imagerel qcpuid_cpcsi+357
	DD	imagerel $unwind$qcpuid_cpcsi
$pdata$qcpuid_cmd DD imagerel $LN27
	DD	imagerel $LN27+1084
	DD	imagerel $unwind$qcpuid_cmd
$pdata$qpfkeys_cmd DD imagerel $LN15
	DD	imagerel $LN15+359
	DD	imagerel $unwind$qpfkeys_cmd
$pdata$qpid_cmd DD imagerel $LN13
	DD	imagerel $LN13+213
	DD	imagerel $unwind$qpid_cmd
$pdata$qports_cmd DD imagerel $LN23
	DD	imagerel $LN23+1373
	DD	imagerel $unwind$qports_cmd
$pdata$cmdlvl_cmd DD imagerel $LN51
	DD	imagerel $LN51+1610
	DD	imagerel $unwind$cmdlvl_cmd
pdata	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@40c3880000000000
CONST	SEGMENT
__real@40c3880000000000 DQ 040c3880000000000r	; 10000
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f1a36e2eb1c432d
CONST	SEGMENT
__real@3f1a36e2eb1c432d DQ 03f1a36e2eb1c432dr	; 0.0001
CONST	ENDS
_DATA	SEGMENT
	ORG $+3
$SG158966 DB	'C:\papa\MyGit\hyperion-zvector\hinlines.h:534', 00H
	ORG $+2
$SG158967 DB	'C:\papa\MyGit\hyperion-zvector\hinlines.h:538', 00H
	ORG $+2
$SG181485 DB	'hsccmd.c:94', 00H
$SG181489 DB	'I', 00H
	ORG $+2
$SG181490 DB	'HHC02390%s Storage %16.16llX-%16.16llX set to unusable', 0aH
	DB	00H
$SG181491 DB	's370_fquest_cmd', 00H
$SG181492 DB	'hsccmd.c', 00H
	ORG $+3
$SG181496 DB	'I', 00H
	ORG $+2
$SG181493 DB	'hsccmd.c:117', 00H
	ORG $+3
$SG181497 DB	'HHC02390%s Storage %16.16llX-%16.16llX set to unusable', 0aH
	DB	00H
$SG181498 DB	's370_fquest_cmd', 00H
$SG181499 DB	'hsccmd.c', 00H
	ORG $+3
$SG181501 DB	'I', 00H
	ORG $+2
$SG181502 DB	'HHC02391%s No unusable storage found', 0aH, 00H
	ORG $+2
$SG181503 DB	's370_fquest_cmd', 00H
$SG181504 DB	'hsccmd.c', 00H
	ORG $+3
$SG181526 DB	'E', 00H
	ORG $+2
$SG181524 DB	'%16.16llX', 00H
	ORG $+2
$SG181533 DB	'usable', 00H
	ORG $+1
$SG181535 DB	'I', 00H
	ORG $+2
$SG181527 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG191574 DB	'I', 00H
	ORG $+2
$SG181528 DB	's370_fonoff_cmd', 00H
$SG181529 DB	'hsccmd.c', 00H
	ORG $+3
$SG191581 DB	'I', 00H
	ORG $+2
$SG181532 DB	'Storage %16.16llX-%16.16llX', 00H
$SG191586 DB	'I', 00H
	ORG $+2
$SG181534 DB	'unusable', 00H
	ORG $+3
$SG191611 DB	'E', 00H
	ORG $+2
$SG181536 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG191620 DB	'I', 00H
	ORG $+2
$SG181537 DB	's370_fonoff_cmd', 00H
$SG181538 DB	'hsccmd.c', 00H
	ORG $+3
$SG191618 DB	'usable', 00H
	ORG $+1
$SG204536 DB	'I', 00H
	ORG $+2
$SG191570 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:94', 00H
	ORG $+1
$SG204543 DB	'I', 00H
	ORG $+2
$SG191575 DB	'HHC02390%s Storage %16.16llX-%16.16llX set to unusable', 0aH
	DB	00H
$SG191576 DB	's390_fquest_cmd', 00H
$SG191577 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG191578 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:117', 00H
$SG204548 DB	'I', 00H
	ORG $+2
$SG191582 DB	'HHC02390%s Storage %16.16llX-%16.16llX set to unusable', 0aH
	DB	00H
$SG191583 DB	's390_fquest_cmd', 00H
$SG191584 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG191587 DB	'HHC02391%s No unusable storage found', 0aH, 00H
	ORG $+2
$SG191588 DB	's390_fquest_cmd', 00H
$SG191589 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG191609 DB	'%16.16llX', 00H
	ORG $+2
$SG204573 DB	'E', 00H
	ORG $+2
$SG191612 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG204580 DB	'usable', 00H
	ORG $+1
$SG204582 DB	'I', 00H
	ORG $+2
$SG191613 DB	's390_fonoff_cmd', 00H
$SG191614 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG191617 DB	'Storage %16.16llX-%16.16llX', 00H
$SG204785 DB	'E', 00H
	ORG $+2
$SG191619 DB	'unusable', 00H
	ORG $+3
$SG204792 DB	'CRASH', 00H
	ORG $+2
$SG204802 DB	'a', 00H
	ORG $+2
$SG191621 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG204803 DB	'b', 00H
	ORG $+2
$SG191622 DB	's390_fonoff_cmd', 00H
$SG191623 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204532 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:94', 00H
	ORG $+1
$SG204804 DB	'c', 00H
	ORG $+2
$SG204537 DB	'HHC02390%s Storage %16.16llX-%16.16llX set to unusable', 0aH
	DB	00H
$SG204538 DB	'z900_fquest_cmd', 00H
$SG204539 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204540 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:117', 00H
$SG204807 DB	'#1', 00H
	ORG $+1
$SG204544 DB	'HHC02390%s Storage %16.16llX-%16.16llX set to unusable', 0aH
	DB	00H
$SG204545 DB	'z900_fquest_cmd', 00H
$SG204546 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204549 DB	'HHC02391%s No unusable storage found', 0aH, 00H
	ORG $+2
$SG204550 DB	'z900_fquest_cmd', 00H
$SG204551 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204571 DB	'%16.16llX', 00H
	ORG $+2
$SG204818 DB	'#2', 00H
	ORG $+1
$SG204574 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG204829 DB	'#3', 00H
	ORG $+1
$SG204575 DB	'z900_fonoff_cmd', 00H
$SG204576 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204579 DB	'Storage %16.16llX-%16.16llX', 00H
$SG204886 DB	'E', 00H
	ORG $+2
$SG204581 DB	'unusable', 00H
	ORG $+3
$SG204840 DB	'LOCKS', 00H
	ORG $+2
$SG204854 DB	'LOCKS2', 00H
	ORG $+1
$SG204916 DB	'E', 00H
	ORG $+2
$SG204583 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG204921 DB	'E', 00H
	ORG $+2
$SG204584 DB	'z900_fonoff_cmd', 00H
$SG204585 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204613 DB	'*** $test thread %8.8x: sleeping for %d seconds...', 0aH
	DB	00H
$SG204931 DB	'E', 00H
	ORG $+2
$SG204614 DB	'test_thread', 00H
$SG204937 DB	'E', 00H
	ORG $+2
$SG204615 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204616 DB	'*** $test thread %8.8x: %d second sleep done; rc=%d', 0aH
	DB	00H
	ORG $+3
$SG204617 DB	'test_thread', 00H
$SG204988 DB	'E', 00H
	ORG $+2
$SG204618 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204629 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:256', 00H
$SG204996 DB	'I', 00H
	ORG $+2
$SG204630 DB	'&testlock', 00H
	ORG $+2
$SG204862 DB	'LOCKS3', 00H
	ORG $+1
$SG205004 DB	'I', 00H
	ORG $+2
$SG204631 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:257', 00H
$SG205013 DB	'E', 00H
	ORG $+2
$SG204655 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:272', 00H
$SG205018 DB	'I', 00H
	ORG $+2
$SG204657 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:276', 00H
$SG205031 DB	'I', 00H
	ORG $+2
$SG204659 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:280', 00H
$SG205037 DB	'I', 00H
	ORG $+2
$SG204660 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:282', 00H
$SG205042 DB	'I', 00H
	ORG $+2
$SG204681 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:292', 00H
$SG205047 DB	'I', 00H
	ORG $+2
$SG204683 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:296', 00H
$SG205052 DB	'I', 00H
	ORG $+2
$SG204685 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:300', 00H
$SG205057 DB	'I', 00H
	ORG $+2
$SG204686 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:302', 00H
$SG205062 DB	'I', 00H
	ORG $+2
$SG204707 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:312', 00H
$SG205067 DB	'I', 00H
	ORG $+2
$SG204709 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:316', 00H
$SG205073 DB	'E', 00H
	ORG $+2
$SG204711 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:320', 00H
$SG205102 DB	'AT', 00H
	ORG $+1
$SG204712 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:322', 00H
$SG205115 DB	'%s', 0aH, 00H
$SG204783 DB	'WRONG! Perhaps you meant ''runtest'' instead?', 00H
$SG205134 DB	'E', 00H
	ORG $+2
$SG204786 DB	'HHC00001%s %s%s', 0aH, 00H
	ORG $+3
$SG204872 DB	'LOCKS4', 00H
	ORG $+1
$SG205194 DB	'E', 00H
	ORG $+2
$SG204787 DB	'$test_cmd', 00H
	ORG $+2
$SG204902 DB	'SIGFPE', 00H
	ORG $+1
$SG205230 DB	'%d', 00H
	ORG $+1
$SG204788 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204795 DB	'DEADLOCK', 00H
	ORG $+3
$SG204905 DB	'SIGILL', 00H
	ORG $+1
$SG205231 DB	'I', 00H
	ORG $+2
$SG204796 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:354', 00H
$SG205239 DB	'E', 00H
	ORG $+2
$SG204797 DB	'&deadlocks_a', 00H
	ORG $+3
$SG204798 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:355', 00H
$SG205243 DB	'%d', 00H
	ORG $+1
$SG204799 DB	'&deadlocks_b', 00H
	ORG $+3
$SG204800 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:356', 00H
$SG205244 DB	'I', 00H
	ORG $+2
$SG204801 DB	'&deadlocks_c', 00H
	ORG $+3
$SG204806 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:362', 00H
$SG205288 DB	'E', 00H
	ORG $+2
$SG204808 DB	'$test_cmd', 00H
	ORG $+2
$SG205138 DB	'MSGNOH', 00H
	ORG $+1
$SG205296 DB	'off', 00H
$SG204809 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204810 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG204812 DB	'$test_cmd', 00H
	ORG $+2
$SG205299 DB	'I', 00H
	ORG $+2
$SG204813 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204814 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG204817 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:363', 00H
$SG205303 DB	'I', 00H
	ORG $+2
$SG204819 DB	'$test_cmd', 00H
	ORG $+2
$SG205336 DB	'I', 00H
	ORG $+2
$SG204820 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204821 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG204823 DB	'$test_cmd', 00H
	ORG $+2
$SG205349 DB	'E', 00H
	ORG $+2
$SG204824 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204825 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG204828 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:364', 00H
$SG205358 DB	'I', 00H
	ORG $+2
$SG204830 DB	'$test_cmd', 00H
	ORG $+2
$SG205384 DB	'E', 00H
	ORG $+2
$SG204831 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204832 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG204834 DB	'$test_cmd', 00H
	ORG $+2
$SG205390 DB	's', 00H
	ORG $+2
$SG204835 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204836 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG204842 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:371', 00H
$SG205392 DB	's', 00H
	ORG $+2
$SG204843 DB	'test_locks_thread', 00H
	ORG $+2
$SG205394 DB	'I', 00H
	ORG $+2
$SG204844 DB	'$test_cmd', 00H
	ORG $+2
$SG205400 DB	's', 00H
	ORG $+2
$SG204845 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204849 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204846 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG204848 DB	'$test_cmd', 00H
	ORG $+6
$SG204855 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:377', 00H
$SG204879 DB	'NANO', 00H
	ORG $+7
$SG204850 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG204856 DB	'&testlock', 00H
	ORG $+2
$SG205402 DB	'I', 00H
	ORG $+2
$SG204857 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:378', 00H
$SG205406 DB	'I', 00H
	ORG $+2
$SG204858 DB	'&testlock', 00H
	ORG $+2
$SG205425 DB	'E', 00H
	ORG $+2
$SG204859 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:379', 00H
$SG205448 DB	'E', 00H
	ORG $+2
$SG204863 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:385', 00H
$SG205455 DB	'PRT', 00H
$SG204864 DB	'&testlock', 00H
	ORG $+2
$SG205457 DB	'E', 00H
	ORG $+2
$SG204865 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:386', 00H
$SG205463 DB	'E', 00H
	ORG $+2
$SG204866 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:387', 00H
$SG205467 DB	'I', 00H
	ORG $+2
$SG204867 DB	'&testlock', 00H
	ORG $+2
$SG205462 DB	'cctape', 00H
	ORG $+1
$SG205490 DB	'E', 00H
	ORG $+2
$SG204868 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:388', 00H
$SG205497 DB	'PRT', 00H
$SG204869 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:389', 00H
$SG205499 DB	'E', 00H
	ORG $+2
$SG204873 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:395', 00H
$SG205504 DB	'fcb', 00H
$SG204874 DB	'&testlock', 00H
	ORG $+2
$SG205505 DB	'E', 00H
	ORG $+2
$SG204875 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:396', 00H
$SG205509 DB	'I', 00H
	ORG $+2
$SG204876 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:397', 00H
$SG205544 DB	'PRT', 00H
$SG204880 DB	'*** $test command: creating threads...', 0aH, 00H
$SG204881 DB	'$test_cmd', 00H
	ORG $+2
$SG205545 DB	'PCH', 00H
$SG204882 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204884 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:414', 00H
$SG205550 DB	'I', 00H
	ORG $+2
$SG204885 DB	'test_thread', 00H
$SG205556 DB	'E', 00H
	ORG $+2
$SG204887 DB	'HHC00102%s Error in function create_thread(): %s', 0aH, 00H
	ORG $+2
$SG205562 DB	'E', 00H
	ORG $+2
$SG204888 DB	'$test_cmd', 00H
	ORG $+2
$SG205568 DB	'E', 00H
	ORG $+2
$SG204889 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204892 DB	'*** $test command: waiting for threads to exit...', 0aH, 00H
	ORG $+1
$SG205574 DB	'W', 00H
	ORG $+2
$SG204893 DB	'$test_cmd', 00H
	ORG $+2
$SG205579 DB	'E', 00H
	ORG $+2
$SG204894 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204896 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:432', 00H
$SG205583 DB	'E', 00H
	ORG $+2
$SG204897 DB	'*** $test command: test complete.', 0aH, 00H
	ORG $+1
$SG205622 DB	'E', 00H
	ORG $+2
$SG204898 DB	'$test_cmd', 00H
	ORG $+2
$SG205654 DB	'PRT', 00H
$SG204899 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204908 DB	'SIGSEGV', 00H
$SG204911 DB	'SIGUSR1', 00H
$SG204914 DB	'SIGUSR2', 00H
$SG204915 DB	': unknown test', 00H
	ORG $+1
$SG204917 DB	'HHC00001%s %s%s', 0aH, 00H
	ORG $+3
$SG205002 DB	'RESET', 00H
	ORG $+2
$SG205655 DB	'PCH', 00H
$SG204918 DB	'$test_cmd', 00H
	ORG $+2
$SG205656 DB	'I', 00H
	ORG $+2
$SG204919 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204920 DB	': missing argument', 00H
	ORG $+1
$SG205661 DB	'E', 00H
	ORG $+2
$SG204922 DB	'HHC00001%s %s%s', 0aH, 00H
	ORG $+3
$SG205003 DB	'Done!', 00H
	ORG $+2
$SG205665 DB	'E', 00H
	ORG $+2
$SG204923 DB	'$test_cmd', 00H
	ORG $+2
$SG205691 DB	'W', 00H
	ORG $+2
$SG204924 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204932 DB	'HHC02200%s %1d:%04X device not found', 0aH, 00H
	ORG $+2
$SG204933 DB	'devnotfound_msg', 00H
$SG204934 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204938 DB	'HHC02201%s Device number missing', 0aH, 00H
	ORG $+2
$SG205697 DB	'I', 00H
	ORG $+2
$SG204939 DB	'missing_devnum', 00H
	ORG $+1
$SG204940 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204989 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG205721 DB	'E', 00H
	ORG $+2
$SG204990 DB	'maxrates_cmd', 00H
	ORG $+3
$SG204991 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG204994 DB	'midnight', 00H
	ORG $+3
$SG205192 DB	'FORCE', 00H
	ORG $+2
$SG205732 DB	'E', 00H
	ORG $+2
$SG204995 DB	'midnight', 00H
	ORG $+3
$SG205335 DB	'%s %s', 00H
	ORG $+2
$SG205737 DB	'I', 00H
	ORG $+2
$SG204997 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG205741 DB	'%d', 00H
	ORG $+1
$SG204998 DB	'maxrates_cmd', 00H
	ORG $+3
$SG204999 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205005 DB	'HHC02268%s %s', 0aH, 00H
	ORG $+1
$SG205006 DB	'maxrates_cmd', 00H
	ORG $+3
$SG205007 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205011 DB	'%d%c', 00H
	ORG $+3
$SG205012 DB	': invalid maxrates interval', 00H
$SG205742 DB	'I', 00H
	ORG $+2
$SG205014 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG205765 DB	'ON', 00H
	ORG $+1
$SG205015 DB	'maxrates_cmd', 00H
	ORG $+3
$SG205016 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205017 DB	'%d minutes', 00H
	ORG $+1
$SG205768 DB	'OFF', 00H
$SG205019 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG205769 DB	'E', 00H
	ORG $+2
$SG205020 DB	'maxrates_cmd', 00H
	ORG $+3
$SG205021 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205030 DB	'Highest observed MIPS and IO/s rates:', 00H
	ORG $+2
$SG205032 DB	'HHC02268%s %s', 0aH, 00H
	ORG $+1
$SG205033 DB	'maxrates_cmd', 00H
	ORG $+3
$SG205034 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205036 DB	'From %s to %s', 00H
	ORG $+2
$SG205038 DB	'HHC02268%s %s', 0aH, 00H
	ORG $+1
$SG205039 DB	'maxrates_cmd', 00H
	ORG $+3
$SG205040 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205041 DB	'MIPS: %d.%02d', 00H
	ORG $+2
$SG205043 DB	'HHC02268%s %s', 0aH, 00H
	ORG $+1
$SG205044 DB	'maxrates_cmd', 00H
	ORG $+3
$SG205045 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205046 DB	'IO/s: %d', 00H
	ORG $+3
$SG205357 DB	'%s %s', 00H
	ORG $+2
$SG205775 DB	'E', 00H
	ORG $+2
$SG205048 DB	'HHC02268%s %s', 0aH, 00H
	ORG $+1
$SG205049 DB	'maxrates_cmd', 00H
	ORG $+3
$SG205050 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205051 DB	'From %s to %s', 00H
	ORG $+2
$SG205053 DB	'HHC02268%s %s', 0aH, 00H
	ORG $+1
$SG205054 DB	'maxrates_cmd', 00H
	ORG $+3
$SG205055 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205056 DB	'MIPS: %d.%02d', 00H
	ORG $+2
$SG205058 DB	'HHC02268%s %s', 0aH, 00H
	ORG $+1
$SG205059 DB	'maxrates_cmd', 00H
	ORG $+3
$SG205060 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205061 DB	'IO/s: %d', 00H
	ORG $+3
$SG205624 DB	'g_cmd', 00H
	ORG $+2
$SG205781 DB	'ON', 00H
	ORG $+1
$SG205063 DB	'HHC02268%s %s', 0aH, 00H
	ORG $+1
$SG205064 DB	'maxrates_cmd', 00H
	ORG $+3
$SG205065 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205066 DB	'Current interval is %d minutes', 00H
	ORG $+1
$SG205068 DB	'HHC02268%s %s', 0aH, 00H
	ORG $+1
$SG205069 DB	'maxrates_cmd', 00H
	ORG $+3
$SG205070 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205071 DB	'zero length', 00H
$SG205782 DB	'OFF', 00H
$SG205072 DB	'strdup()', 00H
	ORG $+3
$SG205783 DB	'I', 00H
	ORG $+2
$SG205074 DB	'HHC02219%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG205075 DB	'maxrates_cmd', 00H
	ORG $+3
$SG205076 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205113 DB	'HERCULES', 00H
	ORG $+3
$SG205788 DB	'ON', 00H
	ORG $+1
$SG205114 DB	' %2.2d:%2.2d:%2.2d  * MSG FROM %s: %s', 00H
	ORG $+2
$SG205116 DB	'message_cmd', 00H
$SG205789 DB	'OFF', 00H
$SG205117 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205136 DB	'msg_cmd', 00H
$SG205135 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG205790 DB	'I', 00H
	ORG $+2
$SG205137 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205195 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG205815 DB	'E', 00H
	ORG $+2
$SG205196 DB	'quit_cmd', 00H
	ORG $+3
$SG205829 DB	'/', 00H
	ORG $+2
$SG205197 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205200 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:787', 00H
$SG205830 DB	'/', 00H
	ORG $+2
$SG205201 DB	'quit_thread', 00H
$SG205831 DB	'I', 00H
	ORG $+2
$SG205202 DB	'quit_cmd', 00H
	ORG $+3
$SG205865 DB	'/', 00H
	ORG $+2
$SG205203 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205207 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205204 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG205206 DB	'quit_cmd', 00H
	ORG $+7
$SG205232 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG205208 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG205233 DB	'quitmout_cmd', 00H
	ORG $+3
$SG205234 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205240 DB	'HHC02211%s Invalid argument(s). Type ''help %s'' for ass'
	DB	'istance.', 0aH, 00H
$SG205241 DB	'quitmout_cmd', 00H
	ORG $+3
$SG205242 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205245 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG205866 DB	'/', 00H
	ORG $+2
$SG205246 DB	'quitmout_cmd', 00H
	ORG $+3
$SG205247 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205289 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG205962 DB	'E', 00H
	ORG $+2
$SG205290 DB	'log_cmd', 00H
$SG205291 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205300 DB	'HHC02106%s Logger: log switched off', 0aH, 00H
	ORG $+3
$SG205301 DB	'log_cmd', 00H
$SG205302 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205304 DB	'HHC02105%s Logger: log to %s', 0aH, 00H
	ORG $+2
$SG205305 DB	'log_cmd', 00H
$SG205306 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205331 DB	'TIMESTAMP', 00H
	ORG $+2
$SG205969 DB	'E', 00H
	ORG $+2
$SG205332 DB	'NOTIMESTAMP', 00H
$SG205974 DB	'E', 00H
	ORG $+2
$SG205333 DB	'DATESTAMP', 00H
	ORG $+2
$SG205978 DB	'I', 00H
	ORG $+2
$SG205334 DB	'NODATESTAMP', 00H
$SG205984 DB	'add', 00H
$SG205337 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG205338 DB	'logopt_cmd', 00H
	ORG $+1
$SG205988 DB	'E', 00H
	ORG $+2
$SG205339 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205341 DB	'DATESTAMP', 00H
	ORG $+2
$SG205993 DB	'E', 00H
	ORG $+2
$SG205343 DB	'NODATESTAMP', 00H
$SG205998 DB	'E', 00H
	ORG $+2
$SG205345 DB	'TIMESTAMP', 00H
	ORG $+2
$SG206004 DB	'E', 00H
	ORG $+2
$SG205347 DB	'NOTIMESTAMP', 00H
$SG206011 DB	'E', 00H
	ORG $+2
$SG205350 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG206017 DB	'E', 00H
	ORG $+2
$SG205351 DB	'logopt_cmd', 00H
	ORG $+1
$SG206023 DB	'E', 00H
	ORG $+2
$SG205352 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205353 DB	'TIMESTAMP', 00H
	ORG $+2
$SG206033 DB	'I', 00H
	ORG $+2
$SG205354 DB	'NOTIMESTAMP', 00H
$SG206048 DB	'/', 00H
	ORG $+2
$SG205355 DB	'DATESTAMP', 00H
	ORG $+2
$SG206049 DB	'/', 00H
	ORG $+2
$SG205356 DB	'NODATESTAMP', 00H
$SG206053 DB	'E', 00H
	ORG $+2
$SG205359 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG206058 DB	'I', 00H
	ORG $+2
$SG205360 DB	'logopt_cmd', 00H
	ORG $+1
$SG206064 DB	'del', 00H
$SG205361 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205387 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205385 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG206068 DB	'E', 00H
	ORG $+2
$SG205386 DB	'uptime_cmd', 00H
	ORG $+1
$SG206073 DB	'E', 00H
	ORG $+2
$SG205395 DB	'HHC02206%s Uptime %u week%s, %u day%s, %02u:%02u:%02u', 0aH
	DB	00H
	ORG $+1
$SG205396 DB	'uptime_cmd', 00H
	ORG $+1
$SG206087 DB	'/', 00H
	ORG $+2
$SG205397 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205403 DB	'HHC02207%s Uptime %u day%s, %02u:%02u:%02u', 0aH, 00H
$SG206088 DB	'/', 00H
	ORG $+2
$SG205404 DB	'uptime_cmd', 00H
	ORG $+1
$SG206090 DB	'/', 00H
	ORG $+2
$SG205405 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205407 DB	'HHC02208%s Uptime %02u:%02u:%02u', 0aH, 00H
	ORG $+2
$SG206091 DB	'/', 00H
	ORG $+2
$SG205408 DB	'uptime_cmd', 00H
	ORG $+1
$SG206097 DB	'I', 00H
	ORG $+2
$SG205409 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205426 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG206116 DB	'/', 00H
	ORG $+2
$SG205427 DB	'version_cmd', 00H
$SG206117 DB	'/', 00H
	ORG $+2
$SG205428 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205449 DB	'HHC02201%s Device number missing', 0aH, 00H
	ORG $+2
$SG206121 DB	'E', 00H
	ORG $+2
$SG205450 DB	'cctape_cmd', 00H
	ORG $+1
$SG206126 DB	'I', 00H
	ORG $+2
$SG205451 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205456 DB	'printer', 00H
$SG205458 DB	'HHC02209%s %1d:%04X device is not a %s', 0aH, 00H
$SG205459 DB	'cctape_cmd', 00H
	ORG $+1
$SG206133 DB	'E', 00H
	ORG $+2
$SG205460 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205464 DB	'HHC02239%s command ''%s'' invalid for device type %04X', 0aH
	DB	00H
	ORG $+2
$SG205465 DB	'cctape_cmd', 00H
	ORG $+1
$SG206137 DB	'E', 00H
	ORG $+2
$SG205466 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205468 DB	'HHC02210%s %1d:%04X %s', 0aH, 00H
$SG205469 DB	'cctape_cmd', 00H
	ORG $+1
$SG206141 DB	'E', 00H
	ORG $+2
$SG205470 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205491 DB	'HHC02201%s Device number missing', 0aH, 00H
	ORG $+2
$SG206200 DB	'E', 00H
	ORG $+2
$SG205492 DB	'fcb_cmd', 00H
$SG205493 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205498 DB	'printer', 00H
$SG205500 DB	'HHC02209%s %1d:%04X device is not a %s', 0aH, 00H
$SG205501 DB	'fcb_cmd', 00H
$SG205502 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205506 DB	'HHC02239%s command ''%s'' invalid for device type %04X', 0aH
	DB	00H
	ORG $+2
$SG205507 DB	'fcb_cmd', 00H
$SG205508 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205510 DB	'HHC02210%s %1d:%04X %s', 0aH, 00H
$SG205511 DB	'fcb_cmd', 00H
$SG205512 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205551 DB	'HHC02212%s %1d:%04X device started', 0aH, 00H
$SG206207 DB	'no', 00H
	ORG $+1
$SG205552 DB	'start_cmd', 00H
	ORG $+2
$SG206210 DB	'yes', 00H
$SG205553 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205555 DB	': busy or interrupt pending', 00H
$SG206215 DB	'E', 00H
	ORG $+2
$SG205557 DB	'HHC02213%s %1d:%04X device not started%s', 0aH, 00H
	ORG $+2
$SG206220 DB	'I', 00H
	ORG $+2
$SG205558 DB	'start_cmd', 00H
	ORG $+2
$SG206227 DB	'%d', 00H
	ORG $+1
$SG205559 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205561 DB	': attention request rejected', 00H
	ORG $+3
$SG205563 DB	'HHC02213%s %1d:%04X device not started%s', 0aH, 00H
	ORG $+2
$SG206228 DB	'I', 00H
	ORG $+2
$SG205564 DB	'start_cmd', 00H
	ORG $+2
$SG206232 DB	'NO', 00H
	ORG $+1
$SG205565 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205567 DB	': subchannel not enabled', 00H
	ORG $+3
$SG206233 DB	'I', 00H
	ORG $+2
$SG205569 DB	'HHC02213%s %1d:%04X device not started%s', 0aH, 00H
	ORG $+2
$SG206239 DB	'IS', 00H
	ORG $+1
$SG205570 DB	'start_cmd', 00H
	ORG $+2
$SG206240 DB	'is NOT', 00H
	ORG $+1
$SG206242 DB	'I', 00H
	ORG $+2
$SG205571 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205573 DB	': already started', 00H
	ORG $+2
$SG206264 DB	'non', 00H
$SG205575 DB	'HHC02213%s %1d:%04X device not started%s', 0aH, 00H
	ORG $+2
$SG206266 DB	'un', 00H
	ORG $+1
$SG205576 DB	'start_cmd', 00H
	ORG $+2
$SG206268 DB	'??', 00H
	ORG $+1
$SG205577 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205578 DB	'printer or punch', 00H
	ORG $+3
$SG206270 DB	'Mount', 00H
	ORG $+2
$SG206272 DB	'I', 00H
	ORG $+2
$SG205580 DB	'HHC02209%s %1d:%04X device is not a %s', 0aH, 00H
$SG205581 DB	'start_cmd', 00H
	ORG $+2
$SG206277 DB	'I', 00H
	ORG $+2
$SG205582 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205584 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG206297 DB	' ', 09H, 00H
	ORG $+1
$SG205585 DB	'start_cmd', 00H
	ORG $+2
$SG206298 DB	'E', 00H
	ORG $+2
$SG205586 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205617 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:1284', 00H
	ORG $+3
$SG205620 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:1292', 00H
	ORG $+3
$SG205621 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:1295', 00H
	ORG $+3
$SG205623 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG206365 DB	'on', 00H
	ORG $+1
$SG205625 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205657 DB	'HHC02214%s %1d:%04X device stopped', 0aH, 00H
$SG206367 DB	'off', 00H
$SG205658 DB	'stop_cmd', 00H
	ORG $+3
$SG206357 DB	'debug', 00H
	ORG $+2
$SG206381 DB	'I', 00H
	ORG $+2
$SG205659 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205660 DB	'printer or punch', 00H
	ORG $+3
$SG206389 DB	'ALL', 00H
$SG205662 DB	'HHC02209%s %1d:%04X device is not a %s', 0aH, 00H
$SG205663 DB	'stop_cmd', 00H
	ORG $+3
$SG206396 DB	'trace', 00H
	ORG $+2
$SG206409 DB	'E', 00H
	ORG $+2
$SG205664 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205668 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205666 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG206429 DB	'on ALL', 00H
	ORG $+1
$SG206432 DB	'I', 00H
	ORG $+2
$SG205667 DB	'stop_cmd', 00H
	ORG $+3
$SG206453 DB	'E', 00H
	ORG $+2
$SG205692 DB	'HHC02215%s Command quiet ignored: external GUI active', 0aH
	DB	00H
	ORG $+1
$SG205693 DB	'quiet_cmd', 00H
	ORG $+2
$SG206460 DB	'LCS', 00H
$SG205694 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205695 DB	'DISABLED', 00H
	ORG $+3
$SG206461 DB	'PTP', 00H
$SG205696 DB	'ENABLED', 00H
$SG205698 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG205699 DB	'quiet_cmd', 00H
	ORG $+2
$SG206464 DB	'ON', 00H
	ORG $+1
$SG205700 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205722 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG205723 DB	'iodelay_cmd', 00H
$SG206465 DB	'OFF', 00H
$SG205724 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205730 DB	'%d%c', 00H
	ORG $+3
$SG205733 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG206468 DB	'I', 00H
	ORG $+2
$SG205734 DB	'iodelay_cmd', 00H
$SG206514 DB	'on', 00H
	ORG $+1
$SG205735 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205738 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG206517 DB	'off', 00H
$SG205739 DB	'iodelay_cmd', 00H
$SG206518 DB	'E', 00H
	ORG $+2
$SG205740 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205743 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG205744 DB	'iodelay_cmd', 00H
$SG206522 DB	'E', 00H
	ORG $+2
$SG205745 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205770 DB	'HHC17000%s Missing or invalid argument(s)', 0aH, 00H
	ORG $+1
$SG206529 DB	'all', 00H
$SG205771 DB	'autoinit_cmd', 00H
	ORG $+3
$SG205772 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205776 DB	'HHC17000%s Missing or invalid argument(s)', 0aH, 00H
	ORG $+1
$SG206532 DB	'E', 00H
	ORG $+2
$SG205777 DB	'autoinit_cmd', 00H
	ORG $+3
$SG205778 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205784 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG205785 DB	'autoinit_cmd', 00H
	ORG $+3
$SG205786 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205791 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG206553 DB	'ccw', 00H
$SG205792 DB	'autoinit_cmd', 00H
	ORG $+3
$SG205793 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205814 DB	'malloc(%d)', 00H
	ORG $+1
$SG206556 DB	'E', 00H
	ORG $+2
$SG205816 DB	'HHC01430%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG205817 DB	'check_define_default_automount_dir', 00H
	ORG $+1
$SG206560 DB	'E', 00H
	ORG $+2
$SG205818 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205820 DB	'check_define_default_automount_dir', 00H
	ORG $+1
$SG206570 DB	'I', 00H
	ORG $+2
$SG205821 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205822 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG205824 DB	'check_define_default_automount_dir', 00H
	ORG $+1
$SG206577 DB	'PTP', 00H
$SG205825 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205832 DB	'HHC01447%s Default allowed AUTOMOUNT directory: %s', 0aH
	DB	00H
	ORG $+4
$SG205826 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG205833 DB	'check_define_default_automount_dir', 00H
	ORG $+1
$SG206578 DB	'E', 00H
	ORG $+2
$SG205834 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205965 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205963 DB	'HHC02202%s Missing argument(s). Type ''help %s'' for ass'
	DB	'istance.', 0aH, 00H
$SG205964 DB	'automount_cmd', 00H
	ORG $+2
$SG205967 DB	'list', 00H
	ORG $+3
$SG205971 DB	'automount_cmd', 00H
	ORG $+2
$SG205972 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205970 DB	'HHC02202%s Missing argument(s). Type ''help %s'' for ass'
	DB	'istance.', 0aH, 00H
$SG205975 DB	'HHC02216%s Empty list', 0aH, 00H
	ORG $+1
$SG205976 DB	'automount_cmd', 00H
	ORG $+2
$SG205977 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205979 DB	'HHC02217%s %c%s', 0aH, 00H
	ORG $+3
$SG206509 DB	'debug', 00H
	ORG $+2
$SG206541 DB	'packet', 00H
	ORG $+1
$SG206582 DB	'PTP', 00H
$SG205980 DB	'automount_cmd', 00H
	ORG $+2
$SG205981 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205989 DB	'HHC02202%s Missing argument(s). Type ''help %s'' for ass'
	DB	'istance.', 0aH, 00H
$SG205990 DB	'automount_cmd', 00H
	ORG $+2
$SG205991 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205996 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG205994 DB	'HHC02202%s Missing argument(s). Type ''help %s'' for ass'
	DB	'istance.', 0aH, 00H
$SG205995 DB	'automount_cmd', 00H
	ORG $+2
$SG205999 DB	'HHC02218%s Logic error', 0aH, 00H
$SG206000 DB	'automount_cmd', 00H
	ORG $+2
$SG206001 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206003 DB	'malloc()', 00H
	ORG $+3
$SG206547 DB	'expand', 00H
	ORG $+1
$SG206583 DB	'ON', 00H
	ORG $+1
$SG206005 DB	'HHC02219%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG206006 DB	'automount_cmd', 00H
	ORG $+2
$SG206007 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206012 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG206550 DB	'updown', 00H
	ORG $+1
$SG206584 DB	'OFF', 00H
$SG206013 DB	'automount_cmd', 00H
	ORG $+2
$SG206014 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206016 DB	': ''conflicts with previous specification''', 00H
	ORG $+2
$SG206567 DB	'on ALL', 00H
	ORG $+1
$SG206587 DB	'I', 00H
	ORG $+2
$SG206018 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG206591 DB	'E', 00H
	ORG $+2
$SG206019 DB	'automount_cmd', 00H
	ORG $+2
$SG206020 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206022 DB	': ''duplicates previous specification''', 00H
	ORG $+2
$SG206024 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG206652 DB	'on', 00H
	ORG $+1
$SG206025 DB	'automount_cmd', 00H
	ORG $+2
$SG206026 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206028 DB	'disallowed', 00H
	ORG $+1
$SG206655 DB	'off', 00H
$SG206029 DB	'allowed', 00H
$SG206030 DB	'default ', 00H
	ORG $+3
$SG206647 DB	'debug', 00H
	ORG $+2
$SG206656 DB	'E', 00H
	ORG $+2
$SG206032 DB	'%s%s automount directory', 00H
	ORG $+3
$SG206660 DB	'E', 00H
	ORG $+2
$SG206034 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG206035 DB	'automount_cmd', 00H
	ORG $+2
$SG206036 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206039 DB	'automount_cmd', 00H
	ORG $+2
$SG206040 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206044 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206041 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG206043 DB	'automount_cmd', 00H
	ORG $+2
$SG206054 DB	'HHC02219%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG206045 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG206052 DB	'malloc(%d)', 00H
	ORG $+1
$SG206667 DB	'all', 00H
$SG206055 DB	'automount_cmd', 00H
	ORG $+2
$SG206056 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206057 DB	'default automount directory', 00H
$SG206670 DB	'E', 00H
	ORG $+2
$SG206059 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG206060 DB	'automount_cmd', 00H
	ORG $+2
$SG206061 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206069 DB	'HHC02202%s Missing argument(s). Type ''help %s'' for ass'
	DB	'istance.', 0aH, 00H
$SG206070 DB	'automount_cmd', 00H
	ORG $+2
$SG206071 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206076 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206074 DB	'HHC02202%s Missing argument(s). Type ''help %s'' for ass'
	DB	'istance.', 0aH, 00H
$SG206075 DB	'automount_cmd', 00H
	ORG $+2
$SG206096 DB	', list now empty', 00H
	ORG $+3
$SG206681 DB	'ccw', 00H
$SG206098 DB	'HHC02220%s Entry deleted%s', 0aH, 00H
$SG206713 DB	'E', 00H
	ORG $+2
$SG206099 DB	'automount_cmd', 00H
	ORG $+2
$SG206100 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206107 DB	'automount_cmd', 00H
	ORG $+2
$SG206108 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206112 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206109 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG206111 DB	'automount_cmd', 00H
	ORG $+2
$SG206122 DB	'HHC02219%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG206113 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG206120 DB	'malloc(%d)', 00H
	ORG $+1
$SG206717 DB	'E', 00H
	ORG $+2
$SG206123 DB	'automount_cmd', 00H
	ORG $+2
$SG206124 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206125 DB	'default automount directory', 00H
$SG206726 DB	'E', 00H
	ORG $+2
$SG206127 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG206128 DB	'automount_cmd', 00H
	ORG $+2
$SG206129 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206134 DB	'HHC02216%s Empty list', 0aH, 00H
	ORG $+1
$SG206135 DB	'automount_cmd', 00H
	ORG $+2
$SG206136 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206138 DB	'HHC02221%s Entry not found', 0aH, 00H
$SG206733 DB	'I', 00H
	ORG $+2
$SG206139 DB	'automount_cmd', 00H
	ORG $+2
$SG206140 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206142 DB	'HHC02222%s Unsupported function', 0aH, 00H
	ORG $+3
$SG206690 DB	'expand', 00H
	ORG $+1
$SG206741 DB	'E', 00H
	ORG $+2
$SG206143 DB	'automount_cmd', 00H
	ORG $+2
$SG206144 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206157 DB	'try_scsi_refresh', 00H
	ORG $+3
$SG206696 DB	'packet', 00H
	ORG $+1
$SG206746 DB	'ON', 00H
	ORG $+1
$SG206158 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206161 DB	'try_scsi_refresh', 00H
	ORG $+7
$SG206159 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG206162 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206163 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG206202 DB	'scsimount_cmd', 00H
	ORG $+2
$SG206203 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206201 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG206213 DB	'%d%c', 00H
	ORG $+3
$SG206699 DB	'queues', 00H
	ORG $+1
$SG206747 DB	'OFF', 00H
$SG206216 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG206708 DB	'updown', 00H
	ORG $+1
$SG206750 DB	'I', 00H
	ORG $+2
$SG206217 DB	'scsimount_cmd', 00H
	ORG $+2
$SG206218 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206221 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG206760 DB	'all', 00H
$SG206222 DB	'scsimount_cmd', 00H
	ORG $+2
$SG206223 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206229 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG206230 DB	'scsimount_cmd', 00H
	ORG $+2
$SG206231 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206234 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG206235 DB	'scsimount_cmd', 00H
	ORG $+2
$SG206236 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206241 DB	'thread %s active for drive %u:%4.4X = %s', 00H
	ORG $+3
$SG206702 DB	'sbale', 00H
	ORG $+2
$SG206730 DB	'ON ALL', 00H
	ORG $+1
$SG206767 DB	'E', 00H
	ORG $+2
$SG206243 DB	'HHC02275%s SCSI auto-mount: %s', 0aH, 00H
$SG206244 DB	'scsimount_cmd', 00H
	ORG $+2
$SG206245 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206260 DB	'ascii-standard', 00H
	ORG $+1
$SG206262 DB	'standard', 00H
	ORG $+3
$SG206771 DB	'E', 00H
	ORG $+2
$SG206271 DB	'Dismount', 00H
	ORG $+7
$SG206273 DB	'HHC02223%s %s of %s-labeled volume %s pending for drive '
	DB	'%u:%4.4X %s', 0aH, 00H
	ORG $+3
$SG206274 DB	'scsimount_cmd', 00H
	ORG $+2
$SG206275 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206276 DB	'no requests pending for drive %u:%4.4X = %s.', 00H
	ORG $+3
$SG206278 DB	'HHC02275%s SCSI auto-mount: %s', 0aH, 00H
$SG206279 DB	'scsimount_cmd', 00H
	ORG $+2
$SG206280 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206301 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206299 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG206776 DB	'E', 00H
	ORG $+2
$SG206300 DB	'cckd_cmd', 00H
	ORG $+3
$SG206787 DB	'I', 00H
	ORG $+2
?yes_startup@?M@??ctc_cmd@@9@9 DQ FLAT:$SG206368	; `ctc_cmd'::`12'::yes_startup
?yes_on@?M@??ctc_cmd@@9@9 DQ FLAT:$SG206369		; `ctc_cmd'::`12'::yes_on
?no_off@?M@??ctc_cmd@@9@9 DQ FLAT:$SG206370		; `ctc_cmd'::`12'::no_off
$SG206362 DB	'startup', 00H
$SG206382 DB	'HHC00903%s %1d:%04X: CTC DEBUG is %s', 0aH, 00H
	ORG $+2
$SG206383 DB	'ctc_cmd', 00H
$SG206384 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206403 DB	'discard', 00H
$SG206411 DB	'ctc_cmd', 00H
$SG206410 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG206792 DB	'I', 00H
	ORG $+2
$SG206412 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206428 DB	'startup ALL', 00H
$SG206797 DB	'I', 00H
	ORG $+2
$SG206430 DB	'off ALL', 00H
$SG206431 DB	'CTC DEBUG', 00H
	ORG $+2
$SG206802 DB	'I', 00H
	ORG $+2
$SG206433 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG206808 DB	'E', 00H
	ORG $+2
$SG206434 DB	'ctc_cmd', 00H
$SG206435 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206452 DB	'supported CTCI, LSC, PTP or CTCE', 00H
	ORG $+3
$SG206812 DB	'E', 00H
	ORG $+2
$SG206454 DB	'HHC02209%s %1d:%04X device is not a %s', 0aH, 00H
$SG206455 DB	'ctc_cmd', 00H
$SG206456 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206458 DB	' group (%d devices)', 00H
$SG206459 DB	'CTCE', 00H
	ORG $+3
$SG206462 DB	'CTCI', 00H
	ORG $+3
$SG206842 DB	'E', 00H
	ORG $+2
$SG206463 DB	'STARTUP', 00H
$SG206466 DB	'%s for %s device %1d:%04X%s', 00H
$SG206850 DB	'E', 00H
	ORG $+2
$SG206467 DB	'CTC DEBUG', 00H
	ORG $+2
$SG206857 DB	'OSA', 00H
$SG206469 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG206862 DB	'E', 00H
	ORG $+2
$SG206470 DB	'ctc_cmd', 00H
$SG206471 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206520 DB	'ptp_cmd', 00H
$SG206519 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG206869 DB	'E', 00H
	ORG $+2
$SG206521 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206523 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG206876 DB	'E', 00H
	ORG $+2
$SG206524 DB	'ptp_cmd', 00H
$SG206525 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206534 DB	'ptp_cmd', 00H
$SG206533 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG206884 DB	'I', 00H
	ORG $+2
$SG206535 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206544 DB	'data', 00H
	ORG $+3
$SG206558 DB	'ptp_cmd', 00H
$SG206557 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG206890 DB	'E', 00H
	ORG $+2
$SG206559 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206561 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG206897 DB	'E', 00H
	ORG $+2
$SG206562 DB	'ptp_cmd', 00H
$SG206563 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206568 DB	'off ALL', 00H
$SG206569 DB	'PTP DEBUG', 00H
	ORG $+2
$SG206905 DB	'I', 00H
	ORG $+2
$SG206571 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG206911 DB	'E', 00H
	ORG $+2
$SG206572 DB	'ptp_cmd', 00H
$SG206573 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206579 DB	'HHC02209%s %1d:%04X device is not a %s', 0aH, 00H
$SG206580 DB	'ptp_cmd', 00H
$SG206581 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206585 DB	'%s for %s device %1d:%04X pair', 00H
	ORG $+1
$SG206586 DB	'PTP DEBUG', 00H
	ORG $+2
$SG206915 DB	'E', 00H
	ORG $+2
$SG206588 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG206945 DB	'I', 00H
	ORG $+2
$SG206589 DB	'ptp_cmd', 00H
$SG206590 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206593 DB	'ptp_cmd', 00H
$SG206592 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG206954 DB	'I', 00H
	ORG $+2
$SG206594 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206657 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG206960 DB	'I', 00H
	ORG $+2
$SG206658 DB	'qeth_cmd', 00H
	ORG $+3
$SG206847 DB	'STATS', 00H
	ORG $+2
$SG206991 DB	',', 00H
	ORG $+2
$SG206659 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206663 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206661 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG206996 DB	'E', 00H
	ORG $+2
$SG206662 DB	'qeth_cmd', 00H
	ORG $+7
$SG206673 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206671 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG207002 DB	'CP', 00H
	ORG $+1
$SG206672 DB	'qeth_cmd', 00H
	ORG $+3
$SG206684 DB	'data', 00H
	ORG $+3
$SG206874 DB	'DEBUG', 00H
	ORG $+2
$SG207003 DB	'CP', 00H
	ORG $+1
$SG206687 DB	'dropped', 00H
$SG206693 DB	'interupts', 00H
	ORG $+2
$SG206705 DB	'siga', 00H
	ORG $+7
$SG206716 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206714 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG207006 DB	'CF', 00H
	ORG $+1
$SG206715 DB	'qeth_cmd', 00H
	ORG $+7
$SG206720 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206718 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG207007 DB	'CF', 00H
	ORG $+1
$SG206719 DB	'qeth_cmd', 00H
	ORG $+3
$SG206725 DB	'QETH', 00H
	ORG $+3
$SG207010 DB	'IL', 00H
	ORG $+1
$SG206727 DB	'HHC02347%s No %s devices found', 0aH, 00H
$SG206728 DB	'qeth_cmd', 00H
	ORG $+3
$SG207011 DB	'IL', 00H
	ORG $+1
$SG206729 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206731 DB	'OFF ALL', 00H
$SG206732 DB	'QETH DEBUG', 00H
	ORG $+1
$SG207014 DB	'AP', 00H
	ORG $+1
$SG206734 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG207015 DB	'AP', 00H
	ORG $+1
$SG206735 DB	'qeth_cmd', 00H
	ORG $+3
$SG207018 DB	'IP', 00H
	ORG $+1
$SG206736 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206740 DB	'QETH', 00H
	ORG $+3
$SG206742 DB	'HHC02209%s %1d:%04X device is not a %s', 0aH, 00H
$SG206743 DB	'qeth_cmd', 00H
	ORG $+3
$SG207019 DB	'IP', 00H
	ORG $+1
$SG206744 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206745 DB	'QETH', 00H
	ORG $+3
$SG206748 DB	'%s for %s device %1d:%04X group', 00H
$SG206749 DB	'QETH DEBUG', 00H
	ORG $+1
$SG207020 DB	'E', 00H
	ORG $+2
$SG206751 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG207024 DB	'I', 00H
	ORG $+2
$SG206752 DB	'qeth_cmd', 00H
	ORG $+3
$SG207028 DB	',', 00H
	ORG $+2
$SG206753 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206755 DB	'addr', 00H
	ORG $+3
$SG206766 DB	'QETH', 00H
	ORG $+3
$SG206768 DB	'HHC02209%s %1d:%04X device is not a %s', 0aH, 00H
$SG206769 DB	'qeth_cmd', 00H
	ORG $+3
$SG207029 DB	'E', 00H
	ORG $+2
$SG206770 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206772 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG207061 DB	'E', 00H
	ORG $+2
$SG206773 DB	'qeth_cmd', 00H
	ORG $+3
$SG207074 DB	'E', 00H
	ORG $+2
$SG206774 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206777 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG207079 DB	'E', 00H
	ORG $+2
$SG206778 DB	'qeth_cmd', 00H
	ORG $+3
$SG207087 DB	'E', 00H
	ORG $+2
$SG206779 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206786 DB	'%2.2X:%2.2X:%2.2X:%2.2X:%2.2X:%2.2X', 00H
$SG206807 DB	'QETH', 00H
	ORG $+7
$SG206788 DB	'HHC02344%s %s device %1d:%04X group has registered MAC a'
	DB	'ddress %s', 0aH, 00H
	ORG $+1
$SG207118 DB	'E', 00H
	ORG $+2
$SG206789 DB	'qeth_cmd', 00H
	ORG $+3
$SG207123 DB	'I', 00H
	ORG $+2
$SG206790 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206793 DB	'HHC02345%s %s device %1d:%04X group has registered IP ad'
	DB	'dress %s', 0aH, 00H
	ORG $+2
$SG207127 DB	'E', 00H
	ORG $+2
$SG206794 DB	'qeth_cmd', 00H
	ORG $+3
$SG207158 DB	'E', 00H
	ORG $+2
$SG206795 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206798 DB	'HHC02345%s %s device %1d:%04X group has registered IP ad'
	DB	'dress %s', 0aH, 00H
	ORG $+2
$SG207163 DB	'I', 00H
	ORG $+2
$SG206799 DB	'qeth_cmd', 00H
	ORG $+3
$SG207167 DB	'E', 00H
	ORG $+2
$SG206800 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206803 DB	'HHC02346%s %s device %1d:%04X group has no registered MA'
	DB	'C or IP addresses', 0aH, 00H
	ORG $+1
$SG207232 DB	'E', 00H
	ORG $+2
$SG206804 DB	'qeth_cmd', 00H
	ORG $+3
$SG207224 DB	'qstor', 00H
	ORG $+2
$SG207249 DB	'E', 00H
	ORG $+2
$SG206805 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206809 DB	'HHC02347%s No %s devices found', 0aH, 00H
$SG206810 DB	'qeth_cmd', 00H
	ORG $+3
$SG207254 DB	'E', 00H
	ORG $+2
$SG206811 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206815 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206813 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG207261 DB	'E', 00H
	ORG $+2
$SG206814 DB	'qeth_cmd', 00H
	ORG $+3
$SG207271 DB	'E', 00H
	ORG $+2
$SG206840 DB	'. Type ''help %s'' for assistance', 00H
$SG206845 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206843 DB	'HHC02202%s Missing argument(s). Type ''help %s'' for ass'
	DB	'istance.', 0aH, 00H
$SG206844 DB	'tt32_cmd', 00H
	ORG $+3
$SG207275 DB	'E', 00H
	ORG $+2
$SG206851 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG207319 DB	'E', 00H
	ORG $+2
$SG206852 DB	'tt32_cmd', 00H
	ORG $+3
$SG207312 DB	'qstor', 00H
	ORG $+2
$SG207338 DB	'E', 00H
	ORG $+2
$SG206853 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206859 DB	'CTCA', 00H
	ORG $+3
$SG206860 DB	'8232', 00H
	ORG $+3
$SG206861 DB	'supported CTCI, LCS or OSA device', 00H
	ORG $+2
$SG207345 DB	'E', 00H
	ORG $+2
$SG206863 DB	'HHC02209%s %1d:%04X device is not a %s', 0aH, 00H
$SG206864 DB	'tt32_cmd', 00H
	ORG $+3
$SG207358 DB	'E', 00H
	ORG $+2
$SG206865 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206867 DB	'function itself is NULL', 00H
$SG206868 DB	'debug_tt32_stats()', 00H
	ORG $+1
$SG207362 DB	'E', 00H
	ORG $+2
$SG206870 DB	'HHC02219%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG206871 DB	'tt32_cmd', 00H
	ORG $+3
$SG207371 DB	'W', 00H
	ORG $+2
$SG206872 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206877 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG207478 DB	'I', 00H
	ORG $+2
$SG206878 DB	'tt32_cmd', 00H
	ORG $+3
$SG207483 DB	'E', 00H
	ORG $+2
$SG206879 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206881 DB	'enabled', 00H
$SG206882 DB	'disabled', 00H
	ORG $+3
$SG207487 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG207489 DB	'I', 00H
	ORG $+2
$SG206883 DB	'TT32 DEBUG', 00H
	ORG $+1
$SG207515 DB	'E', 00H
	ORG $+2
$SG206885 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG207520 DB	'%d', 00H
	ORG $+1
$SG206886 DB	'tt32_cmd', 00H
	ORG $+3
$SG207521 DB	'I', 00H
	ORG $+2
$SG206887 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206888 DB	'function itself is NULL', 00H
$SG206889 DB	'debug_tt32_tracing()', 00H
	ORG $+3
$SG206891 DB	'HHC02219%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG206892 DB	'tt32_cmd', 00H
	ORG $+3
$SG207528 DB	'%hu%c', 00H
	ORG $+2
$SG207529 DB	'E', 00H
	ORG $+2
$SG206893 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206895 DB	'NODEBUG', 00H
$SG206898 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG207535 DB	'E', 00H
	ORG $+2
$SG206899 DB	'tt32_cmd', 00H
	ORG $+3
$SG207541 DB	'%d', 00H
	ORG $+1
$SG206900 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206902 DB	'enabled', 00H
$SG206903 DB	'disabled', 00H
	ORG $+3
$SG207542 DB	'I', 00H
	ORG $+2
$SG206904 DB	'TT32 DEBUG', 00H
	ORG $+1
$SG207547 DB	'E', 00H
	ORG $+2
$SG206906 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG207552 DB	'E', 00H
	ORG $+2
$SG206907 DB	'tt32_cmd', 00H
	ORG $+3
$SG207578 DB	'E', 00H
	ORG $+2
$SG206908 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206909 DB	'function itself is NULL', 00H
$SG206910 DB	'debug_tt32_tracing()', 00H
	ORG $+3
$SG206912 DB	'HHC02219%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG206913 DB	'tt32_cmd', 00H
	ORG $+3
$SG207583 DB	'%d', 00H
	ORG $+1
$SG206914 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206916 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG207584 DB	'I', 00H
	ORG $+2
$SG206917 DB	'tt32_cmd', 00H
	ORG $+3
$SG207592 DB	'%hu%c', 00H
	ORG $+2
$SG207593 DB	'E', 00H
	ORG $+2
$SG206918 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206941 DB	'NONE', 00H
	ORG $+3
$SG206944 DB	'NONE', 00H
	ORG $+3
$SG206946 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG207599 DB	'%d', 00H
	ORG $+1
$SG206947 DB	'sclproot_cmd', 00H
	ORG $+3
$SG206948 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206953 DB	'"%s"', 00H
	ORG $+3
$SG206955 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG206956 DB	'sclproot_cmd', 00H
	ORG $+3
$SG206957 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206958 DB	'disabled', 00H
	ORG $+3
$SG207600 DB	'I', 00H
	ORG $+2
$SG206959 DB	'SCLP disk I/O', 00H
	ORG $+2
$SG206961 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG206962 DB	'sclproot_cmd', 00H
	ORG $+3
$SG206963 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG206995 DB	'%d%c', 00H
	ORG $+3
$SG206997 DB	'HHC01456%s Invalid syntax %s for %s', 0aH, 00H
	ORG $+3
$SG206998 DB	'engines_cmd', 00H
$SG207605 DB	'E', 00H
	ORG $+2
$SG206999 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207021 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG207022 DB	'engines_cmd', 00H
$SG207610 DB	'E', 00H
	ORG $+2
$SG207023 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207025 DB	'HHC00827%s Processor %s%02X: engine %02X type %1d set: %'
	DB	's', 0aH, 00H
	ORG $+1
$SG207654 DB	'E', 00H
	ORG $+2
$SG207026 DB	'engines_cmd', 00H
$SG207668 DB	'I', 00H
	ORG $+2
$SG207027 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207030 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG207031 DB	'engines_cmd', 00H
$SG207675 DB	'E', 00H
	ORG $+2
$SG207032 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207062 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG207063 DB	'sysepoch_cmd', 00H
	ORG $+3
$SG207064 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207070 DB	'%d%c', 00H
	ORG $+3
$SG207075 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG207076 DB	'sysepoch_cmd', 00H
	ORG $+3
$SG207077 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207078 DB	'1900|1960', 00H
	ORG $+6
$SG207081 DB	'sysepoch_cmd', 00H
	ORG $+3
$SG207082 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207080 DB	'HHC01457%s Valid years for %s are %s; other values no lo'
	DB	'nger supported', 0aH, 00H
$SG207086 DB	'%d%c', 00H
	ORG $+3
$SG207088 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG207089 DB	'sysepoch_cmd', 00H
	ORG $+3
$SG207090 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207117 DB	'%d%c', 00H
	ORG $+3
$SG207119 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG207120 DB	'yroffset_cmd', 00H
	ORG $+3
$SG207121 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207124 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG207683 DB	'E', 00H
	ORG $+2
$SG207125 DB	'yroffset_cmd', 00H
	ORG $+3
$SG207126 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207128 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG207129 DB	'yroffset_cmd', 00H
	ORG $+3
$SG207130 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207157 DB	'%d%c', 00H
	ORG $+3
$SG207159 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG207160 DB	'tzoffset_cmd', 00H
	ORG $+3
$SG207161 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207164 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG207691 DB	'E', 00H
	ORG $+2
$SG207165 DB	'tzoffset_cmd', 00H
	ORG $+3
$SG207166 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207168 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG207169 DB	'tzoffset_cmd', 00H
	ORG $+3
$SG207170 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207222 DB	'qstor    main', 00H
	ORG $+2
$SG207226 DB	'main', 00H
	ORG $+3
$SG207229 DB	'%llu%c%c', 00H
	ORG $+3
$SG207697 DB	'W', 00H
	ORG $+2
$SG207233 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG207234 DB	'mainsize_cmd', 00H
	ORG $+3
$SG207235 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207250 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG207251 DB	'mainsize_cmd', 00H
	ORG $+3
$SG207252 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207255 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG207256 DB	'mainsize_cmd', 00H
	ORG $+3
$SG207257 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207260 DB	'UNLOCKED', 00H
	ORG $+3
$SG207701 DB	'I', 00H
	ORG $+2
$SG207262 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG207263 DB	'mainsize_cmd', 00H
	ORG $+3
$SG207264 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207272 DB	'HHC02389%s CPUs must be offline or stopped', 0aH, 00H
$SG207748 DB	'E', 00H
	ORG $+2
$SG207273 DB	'mainsize_cmd', 00H
	ORG $+3
$SG207274 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207276 DB	'HHC02388%s Configure storage error %d', 0aH, 00H
	ORG $+1
$SG207277 DB	'mainsize_cmd', 00H
	ORG $+3
$SG207278 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207314 DB	'xpnd', 00H
	ORG $+3
$SG207316 DB	'qstor xpnd', 00H
	ORG $+1
$SG207766 DB	'I', 00H
	ORG $+2
$SG207317 DB	'%llu%c%c', 00H
	ORG $+3
$SG207773 DB	'I', 00H
	ORG $+2
$SG207320 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG207321 DB	'xpndsize_cmd', 00H
	ORG $+3
$SG207322 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207339 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG207340 DB	'xpndsize_cmd', 00H
	ORG $+3
$SG207341 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207344 DB	'UNLOCKED', 00H
	ORG $+3
$SG207779 DB	'NO', 00H
	ORG $+1
$SG207346 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG207347 DB	'xpndsize_cmd', 00H
	ORG $+3
$SG207348 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207355 DB	'qstor xpnd', 00H
	ORG $+1
$SG207783 DB	'E', 00H
	ORG $+2
$SG207359 DB	'HHC02389%s CPUs must be offline or stopped', 0aH, 00H
$SG207791 DB	'E', 00H
	ORG $+2
$SG207360 DB	'xpndsize_cmd', 00H
	ORG $+3
$SG207361 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207363 DB	'HHC02387%s Configure expanded storage error %d', 0aH, 00H
$SG207364 DB	'xpndsize_cmd', 00H
	ORG $+3
$SG207365 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207370 DB	' and ignored.', 00H
	ORG $+2
$SG207372 DB	'HHC02256%s Command ''%s'' is deprecated%s', 0aH, 00H
	ORG $+3
$SG207799 DB	'E', 00H
	ORG $+2
$SG207373 DB	'deprecated_cmd', 00H
	ORG $+1
$SG207374 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207477 DB	'(empty)', 00H
$SG207479 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG207480 DB	'netdev_cmd', 00H
	ORG $+1
$SG207805 DB	'W', 00H
	ORG $+2
$SG207481 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207484 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG207485 DB	'netdev_cmd', 00H
	ORG $+1
$SG207810 DB	'NO', 00H
	ORG $+1
$SG207486 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207488 DB	'(empty)', 00H
$SG207490 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG207811 DB	'I', 00H
	ORG $+2
$SG207491 DB	'netdev_cmd', 00H
	ORG $+1
$SG207845 DB	'E', 00H
	ORG $+2
$SG207492 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207516 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG207517 DB	'numcpu_cmd', 00H
	ORG $+1
$SG207851 DB	'%lf', 00H
$SG207518 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207522 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG207523 DB	'numcpu_cmd', 00H
	ORG $+1
$SG207855 DB	'I', 00H
	ORG $+2
$SG207524 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207530 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG207531 DB	'numcpu_cmd', 00H
	ORG $+1
$SG207859 DB	'E', 00H
	ORG $+2
$SG207532 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207534 DB	'; NUMCPU must be <= MAXCPU', 00H
	ORG $+1
$SG207863 DB	'%lf', 00H
$SG207536 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG207864 DB	'I', 00H
	ORG $+2
$SG207537 DB	'numcpu_cmd', 00H
	ORG $+1
$SG207907 DB	'"', 00H
	ORG $+2
$SG207538 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207543 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG207911 DB	'NO', 00H
	ORG $+1
$SG207544 DB	'numcpu_cmd', 00H
	ORG $+1
$SG207918 DB	'I', 00H
	ORG $+2
$SG207545 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207548 DB	'HHC02389%s CPUs must be offline or stopped', 0aH, 00H
$SG207923 DB	'E', 00H
	ORG $+2
$SG207549 DB	'numcpu_cmd', 00H
	ORG $+1
$SG207951 DB	'%d', 00H
	ORG $+1
$SG207550 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207553 DB	'HHC02386%s Configure CPU error %d', 0aH, 00H
	ORG $+1
$SG207956 DB	'%s', 00H
	ORG $+1
$SG207554 DB	'numcpu_cmd', 00H
	ORG $+1
$SG207958 DB	'%d', 00H
	ORG $+1
$SG207555 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207579 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG207580 DB	'maxcpu_cmd', 00H
	ORG $+1
$SG207960 DB	'E', 00H
	ORG $+2
$SG207581 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207585 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG207586 DB	'maxcpu_cmd', 00H
	ORG $+1
$SG207968 DB	'E', 00H
	ORG $+2
$SG207587 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207594 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG207595 DB	'maxcpu_cmd', 00H
	ORG $+1
$SG207975 DB	'"', 00H
	ORG $+2
$SG207596 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207601 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG207979 DB	'NO', 00H
	ORG $+1
$SG207602 DB	'maxcpu_cmd', 00H
	ORG $+1
$SG207986 DB	'I', 00H
	ORG $+2
$SG207603 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207606 DB	'HHC02389%s CPUs must be offline or stopped', 0aH, 00H
$SG208014 DB	'W', 00H
	ORG $+2
$SG207607 DB	'maxcpu_cmd', 00H
	ORG $+1
$SG208019 DB	'E', 00H
	ORG $+2
$SG207608 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207611 DB	'HHC02386%s Configure CPU error %d', 0aH, 00H
	ORG $+1
$SG208031 DB	'%d', 00H
	ORG $+1
$SG207612 DB	'maxcpu_cmd', 00H
	ORG $+1
$SG208036 DB	'%s', 00H
	ORG $+1
$SG207613 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
?def_port@?1??cnslport_cmd@@9@9 DQ FLAT:$SG207650	; `cnslport_cmd'::`2'::def_port
$SG207655 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG207656 DB	'cnslport_cmd', 00H
	ORG $+3
$SG207657 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207662 DB	'on port %s', 00H
	ORG $+1
$SG208038 DB	'%d', 00H
	ORG $+1
$SG207665 DB	'for host %s on port %s', 00H
	ORG $+1
$SG207667 DB	'Console', 00H
$SG207669 DB	'HHC17001%s %s server %slistening %s', 0aH, 00H
	ORG $+3
$SG207670 DB	'cnslport_cmd', 00H
	ORG $+3
$SG207671 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207676 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG207677 DB	'cnslport_cmd', 00H
	ORG $+3
$SG207678 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207684 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG207685 DB	'cnslport_cmd', 00H
	ORG $+3
$SG207686 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207690 DB	'SYSGPORT', 00H
	ORG $+3
$SG207906 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG208040 DB	'E', 00H
	ORG $+2
$SG207692 DB	'HHC01453%s %s cannot be the same as %s', 0aH, 00H
$SG207693 DB	'cnslport_cmd', 00H
	ORG $+3
$SG207694 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207698 DB	'HHC01452%s Default port %s being used for %s', 0aH, 00H
	ORG $+2
$SG207699 DB	'cnslport_cmd', 00H
	ORG $+3
$SG207700 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207702 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG208045 DB	'I', 00H
	ORG $+2
$SG207703 DB	'cnslport_cmd', 00H
	ORG $+3
$SG207704 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
?def_port@?1??sysgport_cmd@@9@9 DQ FLAT:$SG207744	; `sysgport_cmd'::`2'::def_port
$SG207749 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG207750 DB	'sysgport_cmd', 00H
	ORG $+3
$SG207751 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207756 DB	'on port %s', 00H
	ORG $+1
$SG208049 DB	'%d', 00H
	ORG $+1
$SG207760 DB	'for host %s on port %s', 00H
	ORG $+1
$SG207765 DB	'SYSG console', 00H
	ORG $+3
$SG207767 DB	'HHC17001%s %s server %slistening %s', 0aH, 00H
	ORG $+3
$SG207768 DB	'sysgport_cmd', 00H
	ORG $+3
$SG207769 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207770 DB	'on any port', 00H
$SG207771 DB	'NOT ', 00H
	ORG $+3
$SG207913 DB	'LIGHT', 00H
	ORG $+2
$SG207914 DB	'(err!)', 00H
	ORG $+1
$SG208050 DB	'I', 00H
	ORG $+2
$SG207772 DB	'SYSG console', 00H
	ORG $+3
$SG207774 DB	'HHC17001%s %s server %slistening %s', 0aH, 00H
	ORG $+3
$SG207775 DB	'sysgport_cmd', 00H
	ORG $+3
$SG207776 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207784 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG207785 DB	'sysgport_cmd', 00H
	ORG $+3
$SG207786 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207792 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG207793 DB	'sysgport_cmd', 00H
	ORG $+3
$SG207794 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207798 DB	'CNSLPORT', 00H
	ORG $+3
$SG207950 DB	'RATE=', 00H
	ORG $+2
$SG207966 DB	'TITLE=', 00H
	ORG $+1
$SG208073 DB	'W', 00H
	ORG $+2
$SG207800 DB	'HHC01453%s %s cannot be the same as %s', 0aH, 00H
$SG207801 DB	'sysgport_cmd', 00H
	ORG $+3
$SG207802 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207806 DB	'HHC01452%s Default port %s being used for %s', 0aH, 00H
	ORG $+2
$SG207807 DB	'sysgport_cmd', 00H
	ORG $+3
$SG207808 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207812 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG208078 DB	'E', 00H
	ORG $+2
$SG207813 DB	'sysgport_cmd', 00H
	ORG $+3
$SG207814 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207848 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207846 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG207974 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG208086 DB	'I', 00H
	ORG $+2
$SG207847 DB	'toddrag_cmd', 00H
$SG208091 DB	'I', 00H
	ORG $+2
$SG207856 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG208113 DB	'E', 00H
	ORG $+2
$SG207857 DB	'toddrag_cmd', 00H
$SG208143 DB	'E', 00H
	ORG $+2
$SG207858 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207860 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG207861 DB	'toddrag_cmd', 00H
$SG208147 DB	'E', 00H
	ORG $+2
$SG207862 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207865 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG207866 DB	'toddrag_cmd', 00H
$SG208173 DB	'E', 00H
	ORG $+2
$SG207867 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207910 DB	'(default)', 00H
	ORG $+2
$SG207912 DB	'DARK', 00H
	ORG $+3
$SG207981 DB	'LIGHT', 00H
	ORG $+2
$SG207982 DB	'(err!)', 00H
	ORG $+1
$SG208192 DB	'E', 00H
	ORG $+2
$SG207915 DB	'NAMEONLY', 00H
	ORG $+3
$SG208085 DB	'(none)', 00H
	ORG $+1
$SG208198 DB	'NO', 00H
	ORG $+1
$SG207916 DB	'FULLPATH', 00H
	ORG $+3
$SG208090 DB	'(none)', 00H
	ORG $+1
$SG208199 DB	'EN', 00H
	ORG $+1
$SG207917 DB	'%s RATE=%d MSGCOLOR=%s %sTITLE=%s%s', 00H
$SG208200 DB	'DIS', 00H
$SG207919 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG207920 DB	'panopt_cmd', 00H
	ORG $+1
$SG208202 DB	'I', 00H
	ORG $+2
$SG207921 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207924 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG208115 DB	'sh_cmd', 00H
	ORG $+1
$SG208207 DB	'NO', 00H
	ORG $+1
$SG207925 DB	'panopt_cmd', 00H
	ORG $+1
$SG208208 DB	'EN', 00H
	ORG $+1
$SG207926 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207929 DB	'NAMEONLY', 00H
	ORG $+3
$SG208184 DB	'noecho', 00H
	ORG $+1
$SG208209 DB	'DIS', 00H
$SG207932 DB	'FULLPATH', 00H
	ORG $+3
$SG208187 DB	'enable', 00H
	ORG $+1
$SG208212 DB	'I', 00H
	ORG $+2
$SG207935 DB	'MSGCOLOR=NO', 00H
$SG208252 DB	'E', 00H
	ORG $+2
$SG207938 DB	'MSGCOLOR=DARK', 00H
	ORG $+2
$SG207941 DB	'MSGCOLOR=LIGHT', 00H
	ORG $+1
$SG207944 DB	'RATE=FAST', 00H
	ORG $+2
$SG208241 DB	'enable', 00H
	ORG $+1
$SG208258 DB	'NO', 00H
	ORG $+1
$SG207947 DB	'RATE=SLOW', 00H
	ORG $+2
$SG208259 DB	'EN', 00H
	ORG $+1
$SG207957 DB	'; not numeric value', 00H
$SG208260 DB	'DIS', 00H
$SG207959 DB	'; not within range %d to %d inclusive', 00H
	ORG $+2
$SG207961 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG208262 DB	'I', 00H
	ORG $+2
$SG207962 DB	'panopt_cmd', 00H
	ORG $+1
$SG208267 DB	'NO', 00H
	ORG $+1
$SG207963 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207969 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG208268 DB	'EN', 00H
	ORG $+1
$SG207970 DB	'panopt_cmd', 00H
	ORG $+1
$SG208269 DB	'DIS', 00H
$SG207971 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG207978 DB	'(default)', 00H
	ORG $+2
$SG207980 DB	'DARK', 00H
	ORG $+3
$SG208244 DB	'diag8', 00H
	ORG $+2
$SG208271 DB	'I', 00H
	ORG $+2
$SG207983 DB	'NAMEONLY', 00H
	ORG $+3
$SG208291 DB	'E', 00H
	ORG $+2
$SG207984 DB	'FULLPATH', 00H
	ORG $+3
$SG208300 DB	'enable', 00H
	ORG $+1
$SG208301 DB	'on', 00H
	ORG $+1
$SG207985 DB	'%s RATE=%d MSGCOLOR=%s %sTITLE=%s%s', 00H
$SG208306 DB	'off', 00H
$SG207987 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG208308 DB	'E', 00H
	ORG $+2
$SG207988 DB	'panopt_cmd', 00H
	ORG $+1
$SG208315 DB	'I', 00H
	ORG $+2
$SG207989 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208013 DB	'; use PANOPT RATE=xxx instead', 00H
	ORG $+2
$SG208015 DB	'HHC02256%s Command ''%s'' is deprecated%s', 0aH, 00H
	ORG $+3
$SG208321 DB	'I', 00H
	ORG $+2
$SG208016 DB	'panrate_cmd', 00H
$SG208347 DB	'dsp', 00H
$SG208017 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208020 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG208359 DB	'export', 00H
	ORG $+1
$SG208364 DB	'E', 00H
	ORG $+2
$SG208021 DB	'panrate_cmd', 00H
$SG208394 DB	'I', 00H
	ORG $+2
$SG208022 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208027 DB	'FAST', 00H
	ORG $+3
$SG208030 DB	'SLOW', 00H
	ORG $+3
$SG208037 DB	'; not numeric value', 00H
$SG208398 DB	'E', 00H
	ORG $+2
$SG208039 DB	'; not within range %d to 5000 inclusive', 00H
$SG208041 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG208363 DB	'import', 00H
	ORG $+1
$SG208453 DB	'E', 00H
	ORG $+2
$SG208042 DB	'panrate_cmd', 00H
$SG208460 DB	'E', 00H
	ORG $+2
$SG208043 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208046 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG208470 DB	'E', 00H
	ORG $+2
$SG208047 DB	'panrate_cmd', 00H
$SG208479 DB	'E', 00H
	ORG $+2
$SG208048 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208051 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG208052 DB	'panrate_cmd', 00H
$SG208484 DB	'E', 00H
	ORG $+2
$SG208053 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208072 DB	'; use PANOPT TITLE=xxx instead', 00H
	ORG $+1
$SG208074 DB	'HHC02256%s Command ''%s'' is deprecated%s', 0aH, 00H
	ORG $+3
$SG208339 DB	'reset', 00H
	ORG $+2
$SG208393 DB	'(NULL)', 00H
	ORG $+1
$SG208491 DB	'I', 00H
	ORG $+2
$SG208075 DB	'pantitle_cmd', 00H
	ORG $+3
$SG208076 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208079 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG208496 DB	'I', 00H
	ORG $+2
$SG208080 DB	'pantitle_cmd', 00H
	ORG $+3
$SG208081 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208087 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG208520 DB	'E', 00H
	ORG $+2
$SG208088 DB	'pantitle_cmd', 00H
	ORG $+3
$SG208089 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208092 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG208093 DB	'pantitle_cmd', 00H
	ORG $+3
$SG208094 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208114 DB	'HHC02227%s Shell/Exec commands are disabled', 0aH, 00H
	ORG $+3
$SG208116 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208137 DB	'LICENSED', 00H
	ORG $+3
$SG208355 DB	'alter', 00H
	ORG $+2
$SG208526 DB	'I', 00H
	ORG $+2
$SG208138 DB	'LICENCED', 00H
	ORG $+3
$SG208388 DB	'MAINT', 00H
	ORG $+2
$SG208532 DB	'E', 00H
	ORG $+2
$SG208141 DB	'RESTRICTED', 00H
	ORG $+1
$SG208539 DB	'E', 00H
	ORG $+2
$SG208144 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG208545 DB	'E', 00H
	ORG $+2
$SG208145 DB	'pgmprdos_cmd', 00H
	ORG $+3
$SG208146 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208148 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG208149 DB	'pgmprdos_cmd', 00H
	ORG $+3
$SG208150 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208174 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG208175 DB	'diag8_cmd', 00H
	ORG $+2
$SG208550 DB	'I', 00H
	ORG $+2
$SG208176 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208181 DB	'echo', 00H
	ORG $+3
$SG208190 DB	'disable', 00H
$SG208193 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG208574 DB	'E', 00H
	ORG $+2
$SG208194 DB	'diag8_cmd', 00H
	ORG $+2
$SG208580 DB	'I', 00H
	ORG $+2
$SG208195 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208201 DB	'%sABLE  %sECHO', 00H
	ORG $+1
$SG208203 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG208586 DB	'E', 00H
	ORG $+2
$SG208204 DB	'diag8_cmd', 00H
	ORG $+2
$SG208593 DB	'E', 00H
	ORG $+2
$SG208205 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208210 DB	'%sABLE  %sECHO', 00H
	ORG $+1
$SG208211 DB	'DIAG8CMD', 00H
	ORG $+3
$SG208490 DB	'MODEL', 00H
	ORG $+2
$SG208599 DB	'E', 00H
	ORG $+2
$SG208213 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG208214 DB	'diag8_cmd', 00H
	ORG $+2
$SG208604 DB	'I', 00H
	ORG $+2
$SG208215 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208247 DB	'disable', 00H
$SG208250 DB	'nodiag8', 00H
$SG208253 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
?default_shrdport@?1??shrdport_cmd@@9@9 DD 0f96H	; `shrdport_cmd'::`2'::default_shrdport
$SG208254 DB	'shcmdopt_cmd', 00H
	ORG $+3
$SG208255 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208261 DB	'%sABLE  %sDIAG8', 00H
$SG208263 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG208630 DB	'E', 00H
	ORG $+2
$SG208264 DB	'shcmdopt_cmd', 00H
	ORG $+3
$SG208265 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208270 DB	'%sABLE  %sDIAG8', 00H
$SG208272 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG208273 DB	'shcmdopt_cmd', 00H
	ORG $+3
$SG208274 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208292 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG208293 DB	'legacysenseid_cmd', 00H
	ORG $+2
$SG208635 DB	'%hu', 00H
$SG208294 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208305 DB	'disable', 00H
$SG208309 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG208636 DB	'I', 00H
	ORG $+2
$SG208310 DB	'legacysenseid_cmd', 00H
	ORG $+2
$SG208651 DB	'E', 00H
	ORG $+2
$SG208311 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208313 DB	'enabled', 00H
$SG208314 DB	'disabled', 00H
	ORG $+3
$SG208642 DB	'START', 00H
	ORG $+2
$SG208656 DB	'%hu', 00H
$SG208316 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG208657 DB	'I', 00H
	ORG $+2
$SG208317 DB	'legacysenseid_cmd', 00H
	ORG $+2
$SG208678 DB	'E', 00H
	ORG $+2
$SG208318 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208319 DB	'enabled', 00H
$SG208320 DB	'disabled', 00H
	ORG $+3
$SG208648 DB	'%hu%c', 00H
	ORG $+2
$SG208683 DB	'I', 00H
	ORG $+2
$SG208322 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG208323 DB	'legacysenseid_cmd', 00H
	ORG $+2
$SG208689 DB	'I', 00H
	ORG $+2
$SG208324 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208343 DB	'reference', 00H
	ORG $+2
$SG208719 DB	'E', 00H
	ORG $+2
$SG208348 DB	'display', 00H
$SG208351 DB	'test', 00H
	ORG $+3
$SG208365 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG208729 DB	'I', 00H
	ORG $+2
$SG208366 DB	'cp_updt_cmd', 00H
$SG208740 DB	'E', 00H
	ORG $+2
$SG208367 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208395 DB	'HHC01476%s Codepage is %s', 0aH, 00H
	ORG $+1
$SG208756 DB	'E', 00H
	ORG $+2
$SG208396 DB	'codepage_cmd', 00H
	ORG $+3
$SG208397 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208401 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208399 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG208766 DB	'1', 00H
	ORG $+2
$SG208400 DB	'codepage_cmd', 00H
	ORG $+3
$SG208434 DB	'hardware', 00H
	ORG $+3
$SG208728 DB	'BASIC', 00H
	ORG $+2
$SG208767 DB	'0', 00H
	ORG $+2
$SG208436 DB	'capacity', 00H
	ORG $+3
$SG208438 DB	'perm', 00H
	ORG $+3
$SG208440 DB	'temp', 00H
	ORG $+3
$SG208736 DB	'%hx%c', 00H
	ORG $+2
$SG208773 DB	'I', 00H
	ORG $+2
$SG208454 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG208455 DB	'stsi_model_cmd', 00H
	ORG $+1
$SG208456 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208459 DB	'; argument > 16 characters', 00H
	ORG $+1
$SG208799 DB	'E', 00H
	ORG $+2
$SG208461 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG208805 DB	'I', 00H
	ORG $+2
$SG208462 DB	'stsi_model_cmd', 00H
	ORG $+1
$SG208463 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208468 DB	'%s-model = <%s>', 00H
$SG208469 DB	'; argument contains an invalid character (0-9 and upperc'
	DB	'ase A-Z only)', 00H
	ORG $+2
$SG208471 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG208812 DB	'I', 00H
	ORG $+2
$SG208472 DB	'stsi_model_cmd', 00H
	ORG $+1
$SG208473 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208477 DB	'%s-model = <%s>', 00H
$SG208480 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+6
$SG208478 DB	'; argument contains an invalid character (0-9 and upperc'
	DB	'ase A-Z only)', 00H
	ORG $+2
$SG208481 DB	'stsi_model_cmd', 00H
	ORG $+1
$SG208482 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208485 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG208818 DB	'E', 00H
	ORG $+2
$SG208486 DB	'stsi_model_cmd', 00H
	ORG $+1
$SG208487 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208489 DB	'hardware(%s) capacity(%s) perm(%s) temp(%s)', 00H
$SG208826 DB	'W', 00H
	ORG $+2
$SG208492 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG208832 DB	'E', 00H
	ORG $+2
$SG208493 DB	'stsi_model_cmd', 00H
	ORG $+1
$SG208494 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208495 DB	'hardware(%s) capacity(%s) perm(%s) temp(%s)', 00H
$SG208856 DB	'E', 00H
	ORG $+2
$SG208497 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG208498 DB	'stsi_model_cmd', 00H
	ORG $+1
$SG208499 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208521 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG208522 DB	'stsi_plant_cmd', 00H
	ORG $+1
$SG208523 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208527 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG208528 DB	'stsi_plant_cmd', 00H
	ORG $+1
$SG208529 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208531 DB	'; argument > 4 characters', 00H
	ORG $+2
$SG208862 DB	'I', 00H
	ORG $+2
$SG208533 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG208873 DB	'I', 00H
	ORG $+2
$SG208534 DB	'stsi_plant_cmd', 00H
	ORG $+1
$SG208535 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208538 DB	'; argument contains an invalid character (0-9 and upperc'
	DB	'ase A-Z only)', 00H
	ORG $+2
$SG208540 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG208877 DB	'E', 00H
	ORG $+2
$SG208541 DB	'stsi_plant_cmd', 00H
	ORG $+1
$SG208542 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208546 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+6
$SG208544 DB	'; argument contains an invalid character (0-9 and upperc'
	DB	'ase A-Z only)', 00H
	ORG $+2
$SG208547 DB	'stsi_plant_cmd', 00H
	ORG $+1
$SG208548 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208551 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG208903 DB	'E', 00H
	ORG $+2
$SG208552 DB	'stsi_plant_cmd', 00H
	ORG $+1
$SG208553 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208575 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG208576 DB	'stsi_manufacturer_cmd', 00H
	ORG $+2
$SG208577 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208581 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG208582 DB	'stsi_manufacturer_cmd', 00H
	ORG $+2
$SG208583 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208585 DB	'; argument > 16 characters', 00H
	ORG $+1
$SG208909 DB	'I', 00H
	ORG $+2
$SG208587 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG208920 DB	'I', 00H
	ORG $+2
$SG208588 DB	'stsi_manufacturer_cmd', 00H
	ORG $+2
$SG208589 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208594 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+6
$SG208592 DB	'; argument contains an invalid character (0-9 and upperc'
	DB	'ase A-Z only)', 00H
	ORG $+2
$SG208595 DB	'stsi_manufacturer_cmd', 00H
	ORG $+2
$SG208596 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208600 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+6
$SG208598 DB	'; argument contains an invalid character (0-9 and upperc'
	DB	'ase A-Z only)', 00H
	ORG $+2
$SG208601 DB	'stsi_manufacturer_cmd', 00H
	ORG $+2
$SG208602 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208605 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG208924 DB	'E', 00H
	ORG $+2
$SG208606 DB	'stsi_manufacturer_cmd', 00H
	ORG $+2
$SG208607 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208631 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG208632 DB	'shrdport_cmd', 00H
	ORG $+3
$SG208633 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208637 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG208638 DB	'shrdport_cmd', 00H
	ORG $+3
$SG208639 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208645 DB	'STOP', 00H
	ORG $+3
$SG208652 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG208653 DB	'shrdport_cmd', 00H
	ORG $+3
$SG208654 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208658 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG208952 DB	'E', 00H
	ORG $+2
$SG208659 DB	'shrdport_cmd', 00H
	ORG $+3
$SG208660 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208681 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208679 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG208959 DB	'%d', 00H
	ORG $+1
$SG208680 DB	'lparname_cmd', 00H
	ORG $+3
$SG208684 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG208685 DB	'lparname_cmd', 00H
	ORG $+3
$SG208686 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208687 DB	'LPARNAME', 00H
	ORG $+3
$SG208753 DB	'BASIC', 00H
	ORG $+2
$SG208961 DB	'I', 00H
	ORG $+2
$SG208690 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG208967 DB	'%u', 00H
	ORG $+1
$SG208691 DB	'lparname_cmd', 00H
	ORG $+3
$SG208692 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208722 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208720 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG208970 DB	'E', 00H
	ORG $+2
$SG208721 DB	'lparnum_cmd', 00H
$SG208726 DB	'%02X', 00H
	ORG $+3
$SG208727 DB	'%01X', 00H
	ORG $+3
$SG208764 DB	'BASIC', 00H
	ORG $+2
$SG208976 DB	'E', 00H
	ORG $+2
$SG208730 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG208731 DB	'lparnum_cmd', 00H
$SG208985 DB	'E', 00H
	ORG $+2
$SG208732 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208739 DB	': must be 1 to 10 (hex) for ARCHMODE S370', 00H
	ORG $+2
$SG208991 DB	'E', 00H
	ORG $+2
$SG208741 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG209002 DB	'E', 00H
	ORG $+2
$SG208742 DB	'lparnum_cmd', 00H
$SG209008 DB	'E', 00H
	ORG $+2
$SG208743 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208744 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:5446', 00H
	ORG $+3
$SG208754 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:5468', 00H
	ORG $+3
$SG208755 DB	': must be BASIC, 1 to F (hex) or 00 to FF (hex)', 00H
$SG208757 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG209015 DB	'E', 00H
	ORG $+2
$SG208758 DB	'lparnum_cmd', 00H
$SG209023 DB	'%d', 00H
	ORG $+1
$SG208759 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208760 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:5484', 00H
	ORG $+3
$SG208765 DB	'BASIC', 00H
	ORG $+2
$SG208768 DB	'%02X', 00H
	ORG $+3
$SG208769 DB	'%01X', 00H
	ORG $+3
$SG208770 DB	'CPUIDFMT', 00H
	ORG $+3
$SG208816 DB	'FORCE', 00H
	ORG $+2
$SG209027 DB	'I', 00H
	ORG $+2
$SG208771 DB	'LPARNUM', 00H
$SG208774 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG209047 DB	'E', 00H
	ORG $+2
$SG208775 DB	'lparnum_cmd', 00H
$SG209054 DB	'I', 00H
	ORG $+2
$SG208776 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208800 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG208801 DB	'cpuverid_cmd', 00H
	ORG $+3
$SG208802 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208804 DB	'%02X', 00H
	ORG $+3
$SG208806 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG208807 DB	'cpuverid_cmd', 00H
	ORG $+3
$SG208808 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208811 DB	'%x%c', 00H
	ORG $+3
$SG208819 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG209058 DB	'I', 00H
	ORG $+2
$SG208820 DB	'cpuverid_cmd', 00H
	ORG $+3
$SG208821 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208823 DB	'%02X', 00H
	ORG $+3
$SG208824 DB	'CPUVERID', 00H
	ORG $+3
$SG208960 DB	'BASIC', 00H
	ORG $+2
$SG209078 DB	'CON', 00H
$SG208827 DB	'%02X (FORCED)', 00H
	ORG $+2
$SG208829 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG209081 DB	'DSP', 00H
$SG208830 DB	'cpuverid_cmd', 00H
	ORG $+3
$SG208831 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208833 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG208834 DB	'cpuverid_cmd', 00H
	ORG $+3
$SG208835 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208857 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG208858 DB	'cpumodel_cmd', 00H
	ORG $+3
$SG208859 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208861 DB	'%04X', 00H
	ORG $+3
$SG208863 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG208864 DB	'cpumodel_cmd', 00H
	ORG $+3
$SG208865 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208868 DB	'%x%c', 00H
	ORG $+3
$SG208870 DB	'%04X', 00H
	ORG $+3
$SG208871 DB	'CPUMODEL', 00H
	ORG $+3
$SG208999 DB	'BASIC', 00H
	ORG $+2
$SG209082 DB	'FCP', 00H
$SG208874 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG209084 DB	'OSA', 00H
$SG208875 DB	'cpumodel_cmd', 00H
	ORG $+3
$SG208876 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208878 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG208879 DB	'cpumodel_cmd', 00H
	ORG $+3
$SG208880 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208904 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG208905 DB	'cpuserial_cmd', 00H
	ORG $+2
$SG208906 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208908 DB	'%06X', 00H
	ORG $+3
$SG208910 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG208911 DB	'cpuserial_cmd', 00H
	ORG $+2
$SG208912 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208915 DB	'%x%c', 00H
	ORG $+3
$SG208917 DB	'%06X', 00H
	ORG $+3
$SG208918 DB	'CPUSERIAL', 00H
	ORG $+2
$SG209085 DB	'PCH', 00H
$SG208921 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG209086 DB	'PRT', 00H
$SG208922 DB	'cpuserial_cmd', 00H
	ORG $+2
$SG208923 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208925 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG208926 DB	'cpuserial_cmd', 00H
	ORG $+2
$SG208927 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208953 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG208954 DB	'cpuidfmt_cmd', 00H
	ORG $+3
$SG208955 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208962 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG208963 DB	'cpuidfmt_cmd', 00H
	ORG $+3
$SG208964 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208969 DB	': must be either 0 or 1', 00H
$SG208971 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG209087 DB	'RDR', 00H
$SG208972 DB	'cpuidfmt_cmd', 00H
	ORG $+3
$SG208973 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208975 DB	': not in LPAR mode', 00H
	ORG $+1
$SG209155 DB	'E', 00H
	ORG $+2
$SG208977 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG209181 DB	'SYSG  ', 00H
	ORG $+1
$SG209182 DB	'%s', 00H
	ORG $+1
$SG208978 DB	'cpuidfmt_cmd', 00H
	ORG $+3
$SG208979 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208984 DB	': LPAR number not in range of 1 to 10 (hex)', 00H
$SG209191 DB	'I', 00H
	ORG $+2
$SG208986 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG209199 DB	'I', 00H
	ORG $+2
$SG208987 DB	'cpuidfmt_cmd', 00H
	ORG $+3
$SG208988 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208990 DB	': must be 0 for System/370', 00H
	ORG $+1
$SG209204 DB	'I', 00H
	ORG $+2
$SG208992 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG209210 DB	'W', 00H
	ORG $+2
$SG208993 DB	'cpuidfmt_cmd', 00H
	ORG $+3
$SG208994 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG208995 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:5798', 00H
	ORG $+3
$SG209001 DB	': In LPAR mode', 00H
	ORG $+1
$SG209003 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG209215 DB	'W', 00H
	ORG $+2
$SG209004 DB	'cpuidfmt_cmd', 00H
	ORG $+3
$SG209005 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209007 DB	'to change CPUIDFMT', 00H
	ORG $+1
$SG209291 DB	'E', 00H
	ORG $+2
$SG209009 DB	'HHC02253%s All CPU''s must be stopped %s', 0aH, 00H
	ORG $+3
$SG209024 DB	'BASIC', 00H
	ORG $+2
$SG209293 DB	'qd_cmd', 00H
	ORG $+1
$SG209297 DB	'E', 00H
	ORG $+2
$SG209010 DB	'cpuidfmt_cmd', 00H
	ORG $+3
$SG209011 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209012 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:5828', 00H
	ORG $+3
$SG209016 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG209299 DB	'qd_cmd', 00H
	ORG $+1
$SG209315 DB	'E', 00H
	ORG $+2
$SG209017 DB	'cpuidfmt_cmd', 00H
	ORG $+3
$SG209018 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209019 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:5845', 00H
	ORG $+3
$SG209025 DB	'CPUIDFMT', 00H
	ORG $+3
$SG209186 DB	'busy ', 00H
	ORG $+2
$SG209317 DB	'qd_cmd', 00H
	ORG $+1
$SG209323 DB	'W', 00H
	ORG $+2
$SG209028 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG209332 DB	'I', 00H
	ORG $+2
$SG209029 DB	'cpuidfmt_cmd', 00H
	ORG $+3
$SG209030 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209048 DB	'HHC01455%s Invalid number of arguments for %s', 0aH, 00H
	ORG $+1
$SG209049 DB	'loadparm_cmd', 00H
	ORG $+3
$SG209050 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209055 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG209338 DB	' ', 00H
	ORG $+2
$SG209056 DB	'loadparm_cmd', 00H
	ORG $+3
$SG209057 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209059 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG209060 DB	'loadparm_cmd', 00H
	ORG $+3
$SG209061 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209077 DB	'CHAN', 00H
	ORG $+3
$SG209079 DB	'CTCA', 00H
	ORG $+3
$SG209080 DB	'DASD', 00H
	ORG $+3
$SG209083 DB	'LINE', 00H
	ORG $+3
$SG209088 DB	'TAPE', 00H
	ORG $+3
$SG209150 DB	'sysg', 00H
	ORG $+3
$SG209154 DB	'malloc(%d)', 00H
	ORG $+1
$SG209340 DB	'I', 00H
	ORG $+2
$SG209156 DB	'HHC02219%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG209157 DB	'devlist_cmd', 00H
$SG209349 DB	'I', 00H
	ORG $+2
$SG209158 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209168 DB	'devlist_cmd', 00H
$SG209355 DB	' ', 00H
	ORG $+2
$SG209169 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209173 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209170 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG209172 DB	'devlist_cmd', 00H
$SG209188 DB	'open ', 00H
	ORG $+6
$SG209174 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG209183 DB	'%1d:%04X', 00H
	ORG $+3
$SG209325 DB	'qd_cmd', 00H
	ORG $+1
$SG209357 DB	'I', 00H
	ORG $+2
$SG209184 DB	'pending ', 00H
	ORG $+3
$SG209334 DB	'qd_cmd', 00H
	ORG $+1
$SG209367 DB	'I', 00H
	ORG $+2
$SG209190 DB	'%s %4.4X %s %s%s%s', 00H
	ORG $+1
$SG209373 DB	' ', 00H
	ORG $+2
$SG209192 DB	'HHC02279%s %s', 0aH, 00H
	ORG $+1
$SG209193 DB	'devlist_cmd', 00H
$SG209376 DB	'I', 00H
	ORG $+2
$SG209194 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209198 DB	'     (client %s (%s) connected)', 00H
$SG209200 DB	'HHC02279%s %s', 0aH, 00H
	ORG $+1
$SG209201 DB	'devlist_cmd', 00H
$SG209385 DB	'I', 00H
	ORG $+2
$SG209202 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209203 DB	'     (no one currently connected)', 00H
	ORG $+2
$SG209342 DB	'qd_cmd', 00H
	ORG $+1
$SG209391 DB	' ', 00H
	ORG $+2
$SG209205 DB	'HHC02279%s %s', 0aH, 00H
	ORG $+1
$SG209206 DB	'devlist_cmd', 00H
$SG209393 DB	'I', 00H
	ORG $+2
$SG209207 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209211 DB	'HHC02237%s Not all devices shown (max %d)', 0aH, 00H
	ORG $+1
$SG209398 DB	'W', 00H
	ORG $+2
$SG209212 DB	'devlist_cmd', 00H
$SG209415 DB	'E', 00H
	ORG $+2
$SG209213 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209216 DB	'HHC02312%s Empty list', 0aH, 00H
	ORG $+1
$SG209217 DB	'devlist_cmd', 00H
$SG209455 DB	'E', 00H
	ORG $+2
$SG209218 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209292 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG209351 DB	'qd_cmd', 00H
	ORG $+1
$SG209462 DB	'E', 00H
	ORG $+2
$SG209294 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209296 DB	'malloc(%d)', 00H
	ORG $+1
$SG209475 DB	'E', 00H
	ORG $+2
$SG209298 DB	'HHC02219%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG209300 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209318 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209316 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG209359 DB	'qd_cmd', 00H
	ORG $+1
$SG209484 DB	'E', 00H
	ORG $+2
$SG209324 DB	'HHC02312%s Empty list', 0aH, 00H
	ORG $+1
$SG209326 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209330 DB	'%1d:%04X SNSID 00 ', 00H
	ORG $+1
$SG209508 DB	'E', 00H
	ORG $+2
$SG209333 DB	'HHC02280%s %s', 0aH, 00H
	ORG $+1
$SG209335 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209336 DB	'             %2.2X ', 00H
$SG209339 DB	'%2.2X', 00H
	ORG $+2
$SG209369 DB	'qd_cmd', 00H
	ORG $+1
$SG209515 DB	'E', 00H
	ORG $+2
$SG209341 DB	'HHC02280%s %s', 0aH, 00H
	ORG $+1
$SG209343 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209347 DB	'%1d:%04X RDC   00 ', 00H
	ORG $+1
$SG209546 DB	'I', 00H
	ORG $+2
$SG209350 DB	'HHC02280%s %s', 0aH, 00H
	ORG $+1
$SG209352 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209353 DB	'             %2.2X ', 00H
$SG209356 DB	'%2.2X', 00H
	ORG $+2
$SG209378 DB	'qd_cmd', 00H
	ORG $+1
$SG209553 DB	'I', 00H
	ORG $+2
$SG209358 DB	'HHC02280%s %s', 0aH, 00H
	ORG $+1
$SG209360 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209364 DB	'%1d:%04X RCD   00 ', 00H
	ORG $+1
$SG209366 DB	' |%s|', 00H
	ORG $+2
$SG209387 DB	'qd_cmd', 00H
	ORG $+1
$SG209558 DB	'I', 00H
	ORG $+2
$SG209368 DB	'HHC02280%s %s', 0aH, 00H
	ORG $+1
$SG209370 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209371 DB	'             %2.2X ', 00H
$SG209374 DB	'%2.2X', 00H
	ORG $+2
$SG209375 DB	' |%s|', 00H
	ORG $+2
$SG209395 DB	'qd_cmd', 00H
	ORG $+1
$SG209563 DB	'I', 00H
	ORG $+2
$SG209377 DB	'HHC02280%s %s', 0aH, 00H
	ORG $+1
$SG209379 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209383 DB	'%1d:%04X SNSS  00 ', 00H
	ORG $+1
$SG209568 DB	'I', 00H
	ORG $+2
$SG209386 DB	'HHC02280%s %s', 0aH, 00H
	ORG $+1
$SG209388 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209389 DB	'             %2.2X ', 00H
$SG209392 DB	'%2.2X', 00H
	ORG $+2
$SG209400 DB	'qd_cmd', 00H
	ORG $+1
$SG209572 DB	'I', 00H
	ORG $+2
$SG209394 DB	'HHC02280%s %s', 0aH, 00H
	ORG $+1
$SG209396 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209399 DB	'HHC02237%s Not all devices shown (max %d)', 0aH, 00H
	ORG $+1
$SG209577 DB	'E', 00H
	ORG $+2
$SG209401 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209416 DB	'HHC02202%s Missing argument(s). Type ''help %s'' for ass'
	DB	'istance.', 0aH, 00H
$SG209417 DB	'attach_cmd', 00H
	ORG $+1
$SG209584 DB	'E', 00H
	ORG $+2
$SG209418 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209454 DB	'FORCE', 00H
	ORG $+2
$SG209456 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG209461 DB	'device', 00H
	ORG $+1
$SG209591 DB	'E', 00H
	ORG $+2
$SG209457 DB	'detach_cmd', 00H
	ORG $+1
$SG209625 DB	'E', 00H
	ORG $+2
$SG209458 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209463 DB	'HHC01464%s %1d:%04X %s does not exist', 0aH, 00H
	ORG $+1
$SG209464 DB	'detach_cmd', 00H
	ORG $+1
$SG209631 DB	'VM', 00H
	ORG $+1
$SG209465 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209468 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:6489', 00H
	ORG $+3
$SG209470 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:6497', 00H
	ORG $+3
$SG209472 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:6502', 00H
	ORG $+3
$SG209474 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:6504', 00H
	ORG $+3
$SG209476 DB	'HHC02231%s %1d:%04X busy or interrupt pending', 0aH, 00H
	ORG $+1
$SG209477 DB	'detach_cmd', 00H
	ORG $+1
$SG209647 DB	'VSE', 00H
$SG209478 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209481 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:6520', 00H
	ORG $+3
$SG209483 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:6522', 00H
	ORG $+3
$SG209485 DB	'HHC02231%s %1d:%04X busy or interrupt pending', 0aH, 00H
	ORG $+1
$SG209486 DB	'detach_cmd', 00H
	ORG $+1
$SG209663 DB	'VM+', 00H
$SG209487 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209488 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:6530', 00H
	ORG $+3
$SG209490 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:6540', 00H
	ORG $+3
$SG209511 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209509 DB	'HHC02202%s Missing argument(s). Type ''help %s'' for ass'
	DB	'istance.', 0aH, 00H
$SG209510 DB	'define_cmd', 00H
	ORG $+5
$SG209516 DB	'HHC02238%s Device numbers can only be redefined within t'
	DB	'he same Logical Channel SubSystem', 0aH, 00H
	ORG $+1
$SG209681 DB	'+', 00H
	ORG $+2
$SG209517 DB	'define_cmd', 00H
	ORG $+1
$SG209685 DB	'%s', 00H
	ORG $+1
$SG209518 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209545 DB	'pgmtrace == all', 00H
$SG209547 DB	'HHC02281%s %s', 0aH, 00H
	ORG $+1
$SG209548 DB	'pgmtrace_cmd', 00H
	ORG $+3
$SG209549 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209552 DB	'pgmtrace == none', 00H
	ORG $+3
$SG209635 DB	'QUIET', 00H
	ORG $+2
$SG209639 DB	'OS/390', 00H
	ORG $+1
$SG209686 DB	'I', 00H
	ORG $+2
$SG209554 DB	'HHC02281%s %s', 0aH, 00H
	ORG $+1
$SG209555 DB	'pgmtrace_cmd', 00H
	ORG $+3
$SG209556 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209557 DB	'* = Tracing suppressed; otherwise tracing enabled', 00H
	ORG $+2
$SG209667 DB	'QUIET+', 00H
	ORG $+1
$SG209696 DB	'VM', 00H
	ORG $+1
$SG209559 DB	'HHC02281%s %s', 0aH, 00H
	ORG $+1
$SG209560 DB	'pgmtrace_cmd', 00H
	ORG $+3
$SG209561 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209566 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209562 DB	'00000000000000011111111111111112222222222222222333333333'
	DB	'33333334', 00H
	ORG $+3
$SG209643 DB	'LINUX', 00H
	ORG $+2
$SG209671 DB	'OS390+', 00H
	ORG $+1
$SG209726 DB	'VSE', 00H
$SG209564 DB	'HHC02281%s %s', 0aH, 00H
	ORG $+1
$SG209565 DB	'pgmtrace_cmd', 00H
	ORG $+3
$SG209569 DB	'HHC02281%s %s', 0aH, 00H
	ORG $+1
$SG209571 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209567 DB	'123456789ABCDEF0123456789ABCDEF0123456789ABCDEF012345678'
	DB	'9ABCDEF0', 00H
	ORG $+3
$SG209649 DB	'z/VSE', 00H
	ORG $+2
$SG209675 DB	'LINUX+', 00H
	ORG $+1
$SG209731 DB	'E', 00H
	ORG $+2
$SG209570 DB	'pgmtrace_cmd', 00H
	ORG $+3
$SG209573 DB	'HHC02281%s %s', 0aH, 00H
	ORG $+1
$SG209574 DB	'pgmtrace_cmd', 00H
	ORG $+3
$SG209575 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209578 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG209680 DB	'z/VSE+', 00H
	ORG $+1
$SG209751 DB	'E', 00H
	ORG $+2
$SG209579 DB	'pgmtrace_cmd', 00H
	ORG $+3
$SG209580 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209582 DB	'%x%c', 00H
	ORG $+3
$SG209583 DB	': program interrupt number is invalid', 00H
	ORG $+2
$SG209585 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG209723 DB	'OS/390', 00H
	ORG $+1
$SG209774 DB	'E', 00H
	ORG $+2
$SG209586 DB	'pgmtrace_cmd', 00H
	ORG $+3
$SG209587 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209590 DB	': program interrupt number is out of range', 00H
	ORG $+1
$SG209781 DB	'%s', 00H
	ORG $+1
$SG209592 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG209776 DB	'ds_cmd', 00H
	ORG $+1
$SG209804 DB	'E', 00H
	ORG $+2
$SG209593 DB	'pgmtrace_cmd', 00H
	ORG $+3
$SG209594 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209628 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209626 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG209782 DB	'ds_cmd', 00H
	ORG $+1
$SG209810 DB	'%d', 00H
	ORG $+1
$SG209627 DB	'ostailor_cmd', 00H
	ORG $+3
$SG209633 DB	'DEFAULT', 00H
$SG209637 DB	'NULL', 00H
	ORG $+3
$SG209641 DB	'z/OS', 00H
	ORG $+3
$SG209645 DB	'OpenSolaris', 00H
$SG209814 DB	'E', 00H
	ORG $+2
$SG209665 DB	'DEFAULT+', 00H
	ORG $+3
$SG209669 DB	'NULL+', 00H
	ORG $+2
$SG209673 DB	'ZOS+', 00H
	ORG $+3
$SG209708 DB	'QUIET', 00H
	ORG $+2
$SG209824 DB	'E', 00H
	ORG $+2
$SG209677 DB	'OPENSOLARIS+', 00H
	ORG $+3
$SG209679 DB	'VSE+', 00H
	ORG $+3
$SG209684 DB	'Custom(0x%16.16llX)', 00H
$SG209830 DB	'I', 00H
	ORG $+2
$SG209687 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG209688 DB	'ostailor_cmd', 00H
	ORG $+3
$SG209689 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209699 DB	'Z/VM', 00H
	ORG $+3
$SG209702 DB	'NONE', 00H
	ORG $+3
$SG209705 DB	'DEFAULT', 00H
$SG209711 DB	'NULL', 00H
	ORG $+3
$SG209714 DB	'Z/OS', 00H
	ORG $+3
$SG209717 DB	'OpenSolaris', 00H
$SG209720 DB	'LINUX', 00H
	ORG $+2
$SG209729 DB	'Z/VSE', 00H
	ORG $+2
$SG209867 DB	'E', 00H
	ORG $+2
$SG209730 DB	': unknown OS tailor specification', 00H
	ORG $+2
$SG209869 DB	'sf_cmd', 00H
	ORG $+1
$SG209877 DB	'*', 00H
	ORG $+2
$SG209732 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG209879 DB	'E', 00H
	ORG $+2
$SG209733 DB	'ostailor_cmd', 00H
	ORG $+3
$SG209734 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209753 DB	'k_cmd', 00H
	ORG $+2
$SG209752 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG209881 DB	'sf_cmd', 00H
	ORG $+1
$SG209887 DB	'E', 00H
	ORG $+2
$SG209754 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209777 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209775 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG209889 DB	'sf_cmd', 00H
	ORG $+1
$SG209902 DB	'E', 00H
	ORG $+2
$SG209780 DB	'HHC02268I ', 00H
	ORG $+1
$SG209911 DB	'E', 00H
	ORG $+2
$SG209783 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209807 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209805 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG209904 DB	'sf_cmd', 00H
	ORG $+1
$SG209917 DB	'E', 00H
	ORG $+2
$SG209806 DB	'devtmax_cmd', 00H
$SG209964 DB	'E', 00H
	ORG $+2
$SG209813 DB	': must be -1 to n', 00H
	ORG $+2
$SG209913 DB	'sf_cmd', 00H
	ORG $+1
$SG209981 DB	'E', 00H
	ORG $+2
$SG209815 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG209919 DB	'sf_cmd', 00H
	ORG $+1
$SG209988 DB	'I', 00H
	ORG $+2
$SG209816 DB	'devtmax_cmd', 00H
$SG209994 DB	'I', 00H
	ORG $+2
$SG209817 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209818 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:6931', 00H
	ORG $+3
$SG209821 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:6936', 00H
	ORG $+3
$SG209822 DB	'idle device thread', 00H
	ORG $+1
$SG210066 DB	'E', 00H
	ORG $+2
$SG209825 DB	'HHC00102%s Error in function create_thread(): %s', 0aH, 00H
	ORG $+2
$SG209979 DB	'enable', 00H
	ORG $+1
$SG210071 DB	'E', 00H
	ORG $+2
$SG209826 DB	'devtmax_cmd', 00H
$SG210076 DB	'rew', 00H
$SG209827 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209828 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:6943', 00H
	ORG $+3
$SG209829 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:6944', 00H
	ORG $+3
$SG209833 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209831 DB	'HHC02242%s Max device threads: %d, current: %d, most: %d'
	DB	', waiting: %d, total I/Os queued: %d', 0aH, 00H
	ORG $+2
$SG209832 DB	'devtmax_cmd', 00H
$SG209865 DB	'+-cdk', 00H
	ORG $+2
$SG210068 DB	'mt_cmd', 00H
	ORG $+1
$SG210077 DB	'fsf', 00H
$SG209866 DB	': must be ''sf+'', ''sf-'', ''sfc'', ''sfk'' or ''sfd''', 00H
	ORG $+2
$SG209868 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG210073 DB	'mt_cmd', 00H
	ORG $+1
$SG210078 DB	'bsf', 00H
$SG209870 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209880 DB	'HHC02216%s Empty list', 0aH, 00H
	ORG $+1
$SG209882 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209886 DB	'cckd device', 00H
$SG210079 DB	'fsr', 00H
$SG209888 DB	'HHC02209%s %1d:%04X device is not a %s', 0aH, 00H
$SG209890 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209894 DB	'NOMERGE', 00H
$SG209897 DB	'MERGE', 00H
	ORG $+2
$SG209900 DB	'FORCE', 00H
	ORG $+2
$SG209901 DB	': operand must be ''merge'', ''nomerge'' or ''force''', 00H
$SG209903 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG210080 DB	'bsr', 00H
$SG209905 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209909 DB	'%d%c', 00H
	ORG $+3
$SG209910 DB	': operand must be a number -1 .. 4', 00H
	ORG $+1
$SG210081 DB	'asf', 00H
$SG209912 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG210082 DB	'wtm', 00H
$SG209914 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209918 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG210083 DB	'dse', 00H
$SG209920 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209930 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7109', 00H
	ORG $+3
$SG209931 DB	'sf+ command', 00H
$SG210086 DB	'E', 00H
	ORG $+2
$SG209934 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7110', 00H
	ORG $+3
$SG209935 DB	'sf- command', 00H
$SG210091 DB	'rew', 00H
$SG209938 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7111', 00H
	ORG $+3
$SG209939 DB	'sfc command', 00H
$SG210094 DB	'E', 00H
	ORG $+2
$SG209942 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7112', 00H
	ORG $+3
$SG209943 DB	'sfd command', 00H
$SG210098 DB	'%d', 00H
	ORG $+1
$SG209946 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7113', 00H
	ORG $+3
$SG209947 DB	'sfk command', 00H
	ORG $+4
$SG209965 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG210088 DB	'mt_cmd', 00H
	ORG $+1
$SG210102 DB	'E', 00H
	ORG $+2
$SG209966 DB	'mounted_tape_reinit_cmd', 00H
$SG209967 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209973 DB	'disallow', 00H
	ORG $+3
$SG209978 DB	'allow', 00H
	ORG $+2
$SG210096 DB	'mt_cmd', 00H
	ORG $+1
$SG210113 DB	'E', 00H
	ORG $+2
$SG209974 DB	'disable', 00H
$SG209982 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG210104 DB	'mt_cmd', 00H
	ORG $+1
$SG210131 DB	'E', 00H
	ORG $+2
$SG209983 DB	'mounted_tape_reinit_cmd', 00H
$SG209984 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209986 DB	'disabled', 00H
	ORG $+3
$SG210084 DB	'dvol1', 00H
	ORG $+2
$SG210115 DB	'mt_cmd', 00H
	ORG $+1
$SG210147 DB	'E', 00H
	ORG $+2
$SG209987 DB	'enabled', 00H
$SG209989 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG210153 DB	'rew', 00H
$SG209990 DB	'mounted_tape_reinit_cmd', 00H
$SG209991 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG209992 DB	'disabled', 00H
	ORG $+3
$SG210119 DB	'mt_cmd', 00H
	ORG $+1
$SG210156 DB	'E', 00H
	ORG $+2
$SG209993 DB	'enabled', 00H
$SG209995 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG209996 DB	'mounted_tape_reinit_cmd', 00H
$SG209997 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210069 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210067 DB	'HHC02202%s Missing argument(s). Type ''help %s'' for ass'
	DB	'istance.', 0aH, 00H
$SG210072 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG210123 DB	'mt_cmd', 00H
	ORG $+1
$SG210163 DB	'fsf', 00H
$SG210074 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210085 DB	'. Type ''help mt'' for assistance.', 00H
	ORG $+3
$SG210133 DB	'mt_cmd', 00H
	ORG $+1
$SG210167 DB	'bsf', 00H
$SG210087 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG210137 DB	'mt_cmd', 00H
	ORG $+1
$SG210171 DB	'fsr', 00H
$SG210089 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210093 DB	'; not in range of 1-9999', 00H
	ORG $+3
$SG210141 DB	'mt_cmd', 00H
	ORG $+1
$SG210175 DB	'bsr', 00H
$SG210095 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG210149 DB	'mt_cmd', 00H
	ORG $+1
$SG210179 DB	'asf', 00H
$SG210097 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210101 DB	'; not in range of 1-9999', 00H
	ORG $+3
$SG210158 DB	'mt_cmd', 00H
	ORG $+1
$SG210187 DB	'E', 00H
	ORG $+2
$SG210103 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG210189 DB	'mt_cmd', 00H
	ORG $+1
$SG210196 DB	'E', 00H
	ORG $+2
$SG210105 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210108 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7233', 00H
	ORG $+3
$SG210112 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7240', 00H
	ORG $+3
$SG210114 DB	'HHC02231%s %1d:%04X busy or interrupt pending', 0aH, 00H
	ORG $+1
$SG210116 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210120 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210121 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG210124 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210125 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG210128 DB	'TAPE', 00H
	ORG $+3
$SG210129 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7251', 00H
	ORG $+3
$SG210130 DB	'TAPE', 00H
	ORG $+3
$SG210132 DB	'HHC02209%s %1d:%04X device is not a %s', 0aH, 00H
$SG210134 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210138 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210139 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG210142 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210143 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG210146 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7260', 00H
	ORG $+3
$SG210148 DB	'HHC02298%s %1d:%04X drive is empty', 0aH, 00H
$SG210210 DB	'"', 00H
	ORG $+2
$SG210150 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210159 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210157 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG210184 DB	'dvol1', 00H
	ORG $+6
$SG210188 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG210198 DB	'mt_cmd', 00H
	ORG $+1
$SG210215 DB	'I', 00H
	ORG $+2
$SG210190 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210195 DB	'Out of memory', 00H
	ORG $+2
$SG210197 DB	'HHC02801%s %1d:%04X %s failed; %s', 0aH, 00H
	ORG $+1
$SG210219 DB	'I', 00H
	ORG $+2
$SG210199 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210203 DB	'VOL1', 00H
	ORG $+3
$SG210206 DB	'VOL1', 00H
	ORG $+3
$SG210207 DB	' (ASCII LABELED) ', 00H
	ORG $+2
$SG210217 DB	'mt_cmd', 00H
	ORG $+1
$SG210223 DB	'I', 00H
	ORG $+2
$SG210213 DB	', Owner = "', 00H
$SG210228 DB	'E', 00H
	ORG $+2
$SG210214 DB	'%s%s%s%s%s', 00H
	ORG $+1
$SG210234 DB	'wtm', 00H
$SG210216 DB	'HHC02805%s %1d:%04X Volser = %s', 0aH, 00H
	ORG $+3
$SG210221 DB	'mt_cmd', 00H
	ORG $+1
$SG210238 DB	'E', 00H
	ORG $+2
$SG210218 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210220 DB	'HHC02806%s %1d:%04X Unlabeled tape', 0aH, 00H
$SG210245 DB	'dse', 00H
$SG210222 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210224 DB	'HHC02806%s %1d:%04X Unlabeled tape', 0aH, 00H
$SG210225 DB	'mt_cmd', 00H
	ORG $+1
$SG210248 DB	'E', 00H
	ORG $+2
$SG210226 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210227 DB	'Tape not at BOT', 00H
$SG210229 DB	'HHC02801%s %1d:%04X %s failed; %s', 0aH, 00H
	ORG $+1
$SG210230 DB	'mt_cmd', 00H
	ORG $+1
$SG210255 DB	'E', 00H
	ORG $+2
$SG210231 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210239 DB	'HHC02804%s %1d:%04X File protect enabled', 0aH, 00H
	ORG $+2
$SG210240 DB	'mt_cmd', 00H
	ORG $+1
$SG210262 DB	'I', 00H
	ORG $+2
$SG210241 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210249 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG210250 DB	'mt_cmd', 00H
	ORG $+1
$SG210267 DB	'E', 00H
	ORG $+2
$SG210251 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210256 DB	'HHC02804%s %1d:%04X File protect enabled', 0aH, 00H
	ORG $+2
$SG210257 DB	'mt_cmd', 00H
	ORG $+1
$SG210272 DB	'I', 00H
	ORG $+2
$SG210258 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210263 DB	'HHC02800%s %1d:%04X %s complete', 0aH, 00H
	ORG $+3
$SG210264 DB	'mt_cmd', 00H
	ORG $+1
$SG210276 DB	'I', 00H
	ORG $+2
$SG210265 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210266 DB	'rc = %d', 00H
$SG210268 DB	'HHC02801%s %1d:%04X %s failed; %s', 0aH, 00H
	ORG $+1
$SG210269 DB	'mt_cmd', 00H
	ORG $+1
$SG210327 DB	'E', 00H
	ORG $+2
$SG210270 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210271 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7483', 00H
	ORG $+3
$SG210273 DB	'HHC02802%s %1d:%04X Current file number %d', 0aH, 00H
$SG210274 DB	'mt_cmd', 00H
	ORG $+1
$SG210340 DB	'E', 00H
	ORG $+2
$SG210275 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210277 DB	'HHC02803%s %1d:%04X Current block number %d', 0aH, 00H
	ORG $+3
$SG210278 DB	'mt_cmd', 00H
	ORG $+1
$SG210279 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210328 DB	'HHC02202%s Missing argument(s). Type ''help %s'' for ass'
	DB	'istance.', 0aH, 00H
$SG210329 DB	'devinit_cmd', 00H
$SG210358 DB	'E', 00H
	ORG $+2
$SG210330 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210333 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7527', 00H
	ORG $+3
$SG210335 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7536', 00H
	ORG $+3
$SG210336 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7538', 00H
	ORG $+3
$SG210339 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7547', 00H
	ORG $+3
$SG210341 DB	'HHC02231%s %1d:%04X busy or interrupt pending', 0aH, 00H
	ORG $+1
$SG210342 DB	'devinit_cmd', 00H
$SG210362 DB	'I', 00H
	ORG $+2
$SG210343 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210359 DB	'HHC02244%s %1d:%04X device initialization failed', 0aH, 00H
	ORG $+2
$SG210423 DB	'E', 00H
	ORG $+2
$SG210360 DB	'devinit_cmd', 00H
$SG210431 DB	'W', 00H
	ORG $+2
$SG210361 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210363 DB	'HHC02245%s %1d:%04X device initialized', 0aH, 00H
$SG210364 DB	'devinit_cmd', 00H
$SG210446 DB	'E', 00H
	ORG $+2
$SG210365 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210366 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7612', 00H
	ORG $+3
$SG210424 DB	'HHC02202%s Missing argument(s). Type ''help %s'' for ass'
	DB	'istance.', 0aH, 00H
$SG210425 DB	'savecore_cmd', 00H
	ORG $+3
$SG210426 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210427 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7660', 00H
	ORG $+3
$SG210429 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7664', 00H
	ORG $+3
$SG210430 DB	'online', 00H
	ORG $+1
$SG210432 DB	'HHC00816%s Processor %s%02X: processor is not %s', 0aH, 00H
	ORG $+2
$SG210443 DB	'%llx%c', 00H
	ORG $+1
$SG210456 DB	'E', 00H
	ORG $+2
$SG210433 DB	'savecore_cmd', 00H
	ORG $+3
$SG210434 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210444 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7694', 00H
	ORG $+3
$SG210445 DB	': invalid starting address', 00H
	ORG $+1
$SG210466 DB	'E', 00H
	ORG $+2
$SG210447 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG210463 DB	'%llx%c', 00H
	ORG $+1
$SG210472 DB	'E', 00H
	ORG $+2
$SG210448 DB	'savecore_cmd', 00H
	ORG $+3
$SG210449 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210455 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7719', 00H
	ORG $+3
$SG210457 DB	'HHC02246%s Savecore: no modified storage found', 0aH, 00H
$SG210458 DB	'savecore_cmd', 00H
	ORG $+3
$SG210459 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210464 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7728', 00H
	ORG $+3
$SG210465 DB	': invalid ending address', 00H
	ORG $+3
$SG210480 DB	'W', 00H
	ORG $+2
$SG210467 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG210486 DB	'I', 00H
	ORG $+2
$SG210468 DB	'savecore_cmd', 00H
	ORG $+3
$SG210469 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210471 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7738', 00H
	ORG $+3
$SG210473 DB	'HHC02247%s Operation rejected: CPU not stopped', 0aH, 00H
$SG210474 DB	'savecore_cmd', 00H
	ORG $+3
$SG210475 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210477 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7747', 00H
	ORG $+3
$SG210478 DB	'%16.16llX-%16.16llX', 00H
$SG210493 DB	'E', 00H
	ORG $+2
$SG210479 DB	': invalid range', 00H
$SG210481 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG210492 DB	'open()', 00H
	ORG $+1
$SG210500 DB	'E', 00H
	ORG $+2
$SG210482 DB	'savecore_cmd', 00H
	ORG $+3
$SG210483 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210484 DB	'%llX', 00H
	ORG $+3
$SG210485 DB	'%llX', 00H
	ORG $+3
$SG210487 DB	'HHC02248%s Saving locations %s-%s to file %s', 0aH, 00H
	ORG $+2
$SG210488 DB	'savecore_cmd', 00H
	ORG $+3
$SG210489 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210491 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7768', 00H
	ORG $+3
$SG210494 DB	'HHC02219%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG210495 DB	'savecore_cmd', 00H
	ORG $+3
$SG210496 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210499 DB	'write()', 00H
$SG210501 DB	'HHC02219%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG210502 DB	'savecore_cmd', 00H
	ORG $+3
$SG210503 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210505 DB	'incomplete', 00H
	ORG $+1
$SG210507 DB	'E', 00H
	ORG $+2
$SG210506 DB	'write()', 00H
$SG210508 DB	'HHC02219%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG210509 DB	'savecore_cmd', 00H
	ORG $+3
$SG210510 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210512 DB	'saved', 00H
	ORG $+2
$SG210513 DB	'I', 00H
	ORG $+2
$SG210518 DB	'I', 00H
	ORG $+2
$SG210514 DB	'HHC02317%s %s bytes %s so far...', 0aH, 00H
	ORG $+2
$SG210529 DB	'CUU', 00H
$SG210515 DB	'savecore_cmd', 00H
	ORG $+3
$SG210516 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210517 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:7823', 00H
	ORG $+3
$SG210519 DB	'HHC02249%s Operation complete', 0aH, 00H
	ORG $+1
$SG210520 DB	'savecore_cmd', 00H
	ORG $+3
$SG210521 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210526 DB	'ARCHMODE', 00H
	ORG $+3
$SG210527 DB	'BDATE', 00H
	ORG $+2
$SG210528 DB	'BTIME', 00H
	ORG $+2
$SG210530 DB	'CCUU', 00H
	ORG $+3
$SG210531 DB	'CSS', 00H
$SG210532 DB	'CPUMODEL', 00H
	ORG $+3
$SG210533 DB	'CPUID', 00H
	ORG $+2
$SG210539 DB	'HOSTOS', 00H
	ORG $+1
$SG210573 DB	'E', 00H
	ORG $+2
$SG210534 DB	'CPUSERIAL', 00H
	ORG $+2
$SG210578 DB	'E', 00H
	ORG $+2
$SG210535 DB	'CPUVERID', 00H
	ORG $+3
$SG210536 DB	'DATE', 00H
	ORG $+3
$SG210537 DB	'DEVN', 00H
	ORG $+3
$SG210584 DB	'E', 00H
	ORG $+2
$SG210538 DB	'HOSTNAME', 00H
	ORG $+3
$SG210604 DB	'E', 00H
	ORG $+2
$SG210540 DB	'HOSTOSREL', 00H
	ORG $+2
$SG210610 DB	'E', 00H
	ORG $+2
$SG210541 DB	'HOSTOSVER', 00H
	ORG $+2
$SG210615 DB	'E', 00H
	ORG $+2
$SG210542 DB	'HOSTARCH', 00H
	ORG $+3
$SG210737 DB	'ON', 00H
	ORG $+1
$SG210543 DB	'HOSTNUMCPUS', 00H
$SG210738 DB	'OFF', 00H
$SG210544 DB	'LPARNUM', 00H
$SG210545 DB	'LPARNAME', 00H
	ORG $+3
$SG210742 DB	'online', 00H
	ORG $+1
$SG210743 DB	'W', 00H
	ORG $+2
$SG210546 DB	'MODPATH', 00H
$SG210547 DB	'MODNAME', 00H
$SG210548 DB	'SYSLEVEL', 00H
	ORG $+3
$SG210759 DB	'E', 00H
	ORG $+2
$SG210549 DB	'SYSTYPE', 00H
$SG210550 DB	'SYSNAME', 00H
$SG210551 DB	'SYSPLEX', 00H
$SG210552 DB	'TIME', 00H
	ORG $+3
$SG210553 DB	'VERSION', 00H
$SG210572 DB	'strdup()', 00H
	ORG $+3
$SG210768 DB	'E', 00H
	ORG $+2
$SG210574 DB	'HHC02219%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG210575 DB	'defsym_cmd', 00H
	ORG $+1
$SG210778 DB	'E', 00H
	ORG $+2
$SG210576 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210579 DB	'HHC02197%s Symbol name %s is reserved', 0aH, 00H
	ORG $+1
$SG210580 DB	'defsym_cmd', 00H
	ORG $+1
$SG210785 DB	'I', 00H
	ORG $+2
$SG210581 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210583 DB	': DEFSYM requires a single value (use quotes if necessar'
	DB	'y)', 00H
	ORG $+1
$SG210802 DB	'E', 00H
	ORG $+2
$SG210585 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG210810 DB	'E', 00H
	ORG $+2
$SG210586 DB	'defsym_cmd', 00H
	ORG $+1
$SG210817 DB	'E', 00H
	ORG $+2
$SG210587 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210605 DB	'HHC02202%s Missing argument(s). Type ''help %s'' for ass'
	DB	'istance.', 0aH, 00H
$SG210606 DB	'delsym_cmd', 00H
	ORG $+1
$SG210827 DB	'I', 00H
	ORG $+2
$SG210607 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210609 DB	'strdup()', 00H
	ORG $+3
$SG210807 DB	'%hu%c', 00H
	ORG $+2
$SG210840 DB	'I', 00H
	ORG $+2
$SG210611 DB	'HHC02219%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG210612 DB	'delsym_cmd', 00H
	ORG $+1
$SG210847 DB	'E', 00H
	ORG $+2
$SG210613 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210616 DB	'HHC02197%s Symbol name %s is reserved', 0aH, 00H
	ORG $+1
$SG210617 DB	'delsym_cmd', 00H
	ORG $+1
$SG210876 DB	'I', 00H
	ORG $+2
$SG210618 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210739 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:8059', 00H
	ORG $+3
$SG210741 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:8063', 00H
	ORG $+3
$SG210744 DB	'HHC00816%s Processor %s%02X: processor is not %s', 0aH, 00H
	ORG $+2
$SG210880 DB	'I', 00H
	ORG $+2
$SG210745 DB	'OnOffCommand', 00H
	ORG $+3
$SG210746 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210748 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:8076', 00H
	ORG $+3
$SG210758 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:8109', 00H
	ORG $+3
$SG210760 DB	'HHC02226%s No dasd devices found', 0aH, 00H
	ORG $+2
$SG210886 DB	'off', 00H
$SG210761 DB	'OnOffCommand', 00H
	ORG $+3
$SG210762 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210763 DB	'%s for all dasd devices', 00H
$SG210766 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:8120', 00H
	ORG $+3
$SG210769 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG210887 DB	'OFF', 00H
$SG210770 DB	'OnOffCommand', 00H
	ORG $+3
$SG210771 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210773 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:8136', 00H
	ORG $+3
$SG210775 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:8143', 00H
	ORG $+3
$SG210777 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:8151', 00H
	ORG $+3
$SG210779 DB	'HHC02225%s %1d:%04X is not a dasd device', 0aH, 00H
	ORG $+2
$SG210888 DB	'I', 00H
	ORG $+2
$SG210780 DB	'OnOffCommand', 00H
	ORG $+3
$SG210781 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210782 DB	'%s for device %1d:%04X', 00H
	ORG $+1
$SG210783 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:8164', 00H
	ORG $+3
$SG210784 DB	'CKD key trace', 00H
	ORG $+2
$SG210786 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG210898 DB	'E', 00H
	ORG $+2
$SG210787 DB	'OnOffCommand', 00H
	ORG $+3
$SG210788 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210797 DB	'%s for all CPUs', 00H
$SG210800 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:8201', 00H
	ORG $+3
$SG210803 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG210902 DB	'I', 00H
	ORG $+2
$SG210804 DB	'OnOffCommand', 00H
	ORG $+3
$SG210805 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210808 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:8219', 00H
	ORG $+3
$SG210811 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG210908 DB	'E', 00H
	ORG $+2
$SG210812 DB	'OnOffCommand', 00H
	ORG $+3
$SG210813 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210816 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:8232', 00H
	ORG $+3
$SG210818 DB	'HHC02254%s CPU %02X is not online', 0aH, 00H
	ORG $+1
$SG210913 DB	'E', 00H
	ORG $+2
$SG210819 DB	'OnOffCommand', 00H
	ORG $+3
$SG210820 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210824 DB	'%s for %s%02X', 00H
	ORG $+2
$SG210825 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:8268', 00H
	ORG $+3
$SG210826 DB	'CPU tracing', 00H
$SG210957 DB	'on', 00H
	ORG $+1
$SG210828 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG210960 DB	'off', 00H
$SG210829 DB	'OnOffCommand', 00H
	ORG $+3
$SG210830 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210834 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:8290', 00H
	ORG $+3
$SG210837 DB	'ORB trace', 00H
	ORG $+2
$SG210962 DB	'E', 00H
	ORG $+2
$SG210838 DB	'CCW trace', 00H
	ORG $+2
$SG210967 DB	'E', 00H
	ORG $+2
$SG210839 DB	'%s for %1d:%04X', 00H
$SG210841 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG210973 DB	'ON', 00H
	ORG $+1
$SG210842 DB	'OnOffCommand', 00H
	ORG $+3
$SG210843 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210844 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:8308', 00H
	ORG $+3
$SG210845 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c:8312', 00H
	ORG $+3
$SG210848 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG210974 DB	'OFF', 00H
$SG210849 DB	'OnOffCommand', 00H
	ORG $+3
$SG210850 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210875 DB	'Not set', 00H
$SG210877 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG210878 DB	'cmdsep_cmd', 00H
	ORG $+1
$SG210975 DB	'I', 00H
	ORG $+2
$SG210879 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210881 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG210882 DB	'cmdsep_cmd', 00H
	ORG $+1
$SG210979 DB	'ON', 00H
	ORG $+1
$SG210883 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210889 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG210980 DB	'OFF', 00H
$SG210890 DB	'cmdsep_cmd', 00H
	ORG $+1
$SG210981 DB	'I', 00H
	ORG $+2
$SG210891 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210897 DB	'; ''.'', ''-'', and ''!'' are invalid characters', 00H
	ORG $+1
$SG211004 DB	'on', 00H
	ORG $+1
$SG210899 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG211007 DB	'off', 00H
$SG210900 DB	'cmdsep_cmd', 00H
	ORG $+1
$SG211009 DB	'E', 00H
	ORG $+2
$SG210901 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210903 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG211014 DB	'E', 00H
	ORG $+2
$SG210904 DB	'cmdsep_cmd', 00H
	ORG $+1
$SG211020 DB	'ON', 00H
	ORG $+1
$SG210905 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210911 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210909 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG211021 DB	'OFF', 00H
$SG210910 DB	'cmdsep_cmd', 00H
	ORG $+1
$SG211022 DB	'I', 00H
	ORG $+2
$SG210912 DB	', must be a single character', 00H
	ORG $+3
$SG210914 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG211026 DB	'ON', 00H
	ORG $+1
$SG210915 DB	'cmdsep_cmd', 00H
	ORG $+1
$SG211027 DB	'OFF', 00H
$SG210916 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210963 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG211028 DB	'I', 00H
	ORG $+2
$SG210964 DB	'scpecho_cmd', 00H
$SG211052 DB	'E', 00H
	ORG $+2
$SG210965 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210970 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210968 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG211056 DB	'I', 00H
	ORG $+2
$SG210969 DB	'scpecho_cmd', 00H
$SG211061 DB	'I', 00H
	ORG $+2
$SG210976 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG210977 DB	'scpecho_cmd', 00H
$SG211085 DB	'E', 00H
	ORG $+2
$SG210978 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG210982 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG211089 DB	'I', 00H
	ORG $+2
$SG210983 DB	'scpecho_cmd', 00H
$SG211094 DB	'I', 00H
	ORG $+2
$SG210984 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211010 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+2
$SG211117 DB	'ALL', 00H
$SG211011 DB	'scpimply_cmd', 00H
	ORG $+3
$SG211012 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211015 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG211118 DB	'E', 00H
	ORG $+2
$SG211016 DB	'scpimply_cmd', 00H
	ORG $+3
$SG211017 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211023 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG211024 DB	'scpimply_cmd', 00H
	ORG $+3
$SG211025 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211029 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG211138 DB	'E', 00H
	ORG $+2
$SG211030 DB	'scpimply_cmd', 00H
	ORG $+3
$SG211031 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211053 DB	'HHC01525%s HDL: usage: %s <module>', 0aH, 00H
$SG211158 DB	'E', 00H
	ORG $+2
$SG211054 DB	'ldmod_cmd', 00H
	ORG $+2
$SG211179 DB	'E', 00H
	ORG $+2
$SG211055 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211057 DB	'HHC01526%s HDL: loading module %s...', 0aH, 00H
	ORG $+2
$SG211058 DB	'ldmod_cmd', 00H
	ORG $+2
$SG211185 DB	'I', 00H
	ORG $+2
$SG211059 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211062 DB	'HHC01527%s HDL: module %s loaded', 0aH, 00H
	ORG $+2
$SG211190 DB	'I', 00H
	ORG $+2
$SG211063 DB	'ldmod_cmd', 00H
	ORG $+2
$SG211216 DB	'evm', 00H
$SG211064 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211086 DB	'HHC01525%s HDL: usage: %s <module>', 0aH, 00H
$SG211219 DB	'W', 00H
	ORG $+2
$SG211087 DB	'rmmod_cmd', 00H
	ORG $+2
$SG211225 DB	'no', 00H
	ORG $+1
$SG211088 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211090 DB	'HHC01528%s HDL: unloading module %s...', 0aH, 00H
$SG211091 DB	'rmmod_cmd', 00H
	ORG $+2
$SG211228 DB	'I', 00H
	ORG $+2
$SG211092 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211095 DB	'HHC01529%s HDL: module %s unloaded', 0aH, 00H
$SG211234 DB	'yes', 00H
$SG211096 DB	'rmmod_cmd', 00H
	ORG $+2
$SG211238 DB	'%s', 00H
	ORG $+1
$SG211097 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211121 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211119 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG211243 DB	'%s', 00H
	ORG $+1
$SG211120 DB	'lsmod_cmd', 00H
	ORG $+6
$SG211141 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211139 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG211246 DB	'notrap', 00H
	ORG $+1
$SG211248 DB	'%s', 00H
	ORG $+1
$SG211140 DB	'lsdep_cmd', 00H
	ORG $+6
$SG211159 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG211249 DB	'E', 00H
	ORG $+2
$SG211160 DB	'lsequ_cmd', 00H
	ORG $+2
$SG211254 DB	'I', 00H
	ORG $+2
$SG211161 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211180 DB	'HHC01530%s HDL: incorrect syntax. Enter "help %s" for as'
	DB	'sistance', 0aH, 00H
	ORG $+2
$SG211264 DB	'W', 00H
	ORG $+2
$SG211181 DB	'modpath_cmd', 00H
$SG211269 DB	'I', 00H
	ORG $+2
$SG211182 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211186 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG211187 DB	'modpath_cmd', 00H
$SG211291 DB	'E', 00H
	ORG $+2
$SG211188 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211191 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG211299 DB	'E', 00H
	ORG $+2
$SG211192 DB	'modpath_cmd', 00H
$SG211420 DB	'I', 00H
	ORG $+2
$SG211193 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211217 DB	'ecps:vm', 00H
$SG211218 DB	'; use ECPSVM instead', 00H
	ORG $+3
$SG211220 DB	'HHC02256%s Command ''%s'' is deprecated%s', 0aH, 00H
	ORG $+3
$SG211260 DB	'level', 00H
	ORG $+2
$SG211296 DB	'%s%c%s', 00H
	ORG $+1
$SG211425 DB	'I', 00H
	ORG $+2
$SG211221 DB	'ecpsvm_cmd', 00H
	ORG $+1
$SG211430 DB	'I', 00H
	ORG $+2
$SG211222 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211227 DB	'disabled', 00H
	ORG $+3
$SG211435 DB	'I', 00H
	ORG $+2
$SG211229 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG211440 DB	'I', 00H
	ORG $+2
$SG211230 DB	'ecpsvm_cmd', 00H
	ORG $+1
$SG211445 DB	'I', 00H
	ORG $+2
$SG211231 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211237 DB	'enabled, trap support enabled', 00H
	ORG $+2
$SG211241 DB	'trap', 00H
	ORG $+3
$SG211242 DB	'enabled, trap support enabled', 00H
	ORG $+2
$SG211247 DB	'enabled, trap support disabled', 00H
	ORG $+1
$SG211250 DB	'HHC01721%s Unknown ECPS:VM subcommand %s', 0aH, 00H
	ORG $+2
$SG211450 DB	'I', 00H
	ORG $+2
$SG211251 DB	'ecpsvm_cmd', 00H
	ORG $+1
$SG211455 DB	'I', 00H
	ORG $+2
$SG211252 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211255 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG211460 DB	'I', 00H
	ORG $+2
$SG211256 DB	'ecpsvm_cmd', 00H
	ORG $+1
$SG211465 DB	'I', 00H
	ORG $+2
$SG211257 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211263 DB	'%d%c', 00H
	ORG $+3
$SG211267 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211265 DB	'HHC01723%s Invalid ECPS:VM level value : %s. Default of '
	DB	'20 used', 0aH, 00H
	ORG $+3
$SG211470 DB	'I', 00H
	ORG $+2
$SG211266 DB	'ecpsvm_cmd', 00H
	ORG $+1
$SG211475 DB	'I', 00H
	ORG $+2
$SG211268 DB	'enabled: level %d', 00H
	ORG $+2
$SG211480 DB	'I', 00H
	ORG $+2
$SG211270 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG211485 DB	'I', 00H
	ORG $+2
$SG211271 DB	'ecpsvm_cmd', 00H
	ORG $+1
$SG211490 DB	'I', 00H
	ORG $+2
$SG211272 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211294 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211292 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+2
$SG211495 DB	'I', 00H
	ORG $+2
$SG211293 DB	'herclogo_cmd', 00H
	ORG $+3
$SG211298 DB	'fopen()', 00H
$SG211300 DB	'HHC01430%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG211301 DB	'herclogo_cmd', 00H
	ORG $+3
$SG211302 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211419 DB	'(unsigned short) ......', 00H
$SG211421 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211500 DB	'I', 00H
	ORG $+2
$SG211422 DB	'sizeof_cmd', 00H
	ORG $+1
$SG211505 DB	'I', 00H
	ORG $+2
$SG211423 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211424 DB	'(void*) ...............', 00H
$SG211426 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211510 DB	'I', 00H
	ORG $+2
$SG211427 DB	'sizeof_cmd', 00H
	ORG $+1
$SG211515 DB	'I', 00H
	ORG $+2
$SG211428 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211429 DB	'(unsigned int) ........', 00H
$SG211431 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211520 DB	'I', 00H
	ORG $+2
$SG211432 DB	'sizeof_cmd', 00H
	ORG $+1
$SG211525 DB	'I', 00H
	ORG $+2
$SG211433 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211434 DB	'(long) ................', 00H
$SG211436 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211530 DB	'I', 00H
	ORG $+2
$SG211437 DB	'sizeof_cmd', 00H
	ORG $+1
$SG211535 DB	'I', 00H
	ORG $+2
$SG211438 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211439 DB	'(long long) ...........', 00H
$SG211441 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211540 DB	'I', 00H
	ORG $+2
$SG211442 DB	'sizeof_cmd', 00H
	ORG $+1
$SG211545 DB	'I', 00H
	ORG $+2
$SG211443 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211444 DB	'(size_t) ..............', 00H
$SG211446 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211551 DB	'I', 00H
	ORG $+2
$SG211447 DB	'sizeof_cmd', 00H
	ORG $+1
$SG211557 DB	'I', 00H
	ORG $+2
$SG211448 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211449 DB	'(off_t) ...............', 00H
$SG211451 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211585 DB	'W', 00H
	ORG $+2
$SG211452 DB	'sizeof_cmd', 00H
	ORG $+1
$SG211593 DB	'E', 00H
	ORG $+2
$SG211453 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211454 DB	'FILENAME_MAX ..........', 00H
$SG211456 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211599 DB	'E', 00H
	ORG $+2
$SG211457 DB	'sizeof_cmd', 00H
	ORG $+1
$SG211607 DB	'E', 00H
	ORG $+2
$SG211458 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211459 DB	'PATH_MAX ..............', 00H
$SG211461 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211612 DB	'W', 00H
	ORG $+2
$SG211462 DB	'sizeof_cmd', 00H
	ORG $+1
$SG211618 DB	'E', 00H
	ORG $+2
$SG211463 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211464 DB	'SYSBLK ................', 00H
$SG211466 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211626 DB	'I', 00H
	ORG $+2
$SG211467 DB	'sizeof_cmd', 00H
	ORG $+1
$SG211631 DB	'I', 00H
	ORG $+2
$SG211468 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211469 DB	'REGS ..................', 00H
$SG211471 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211654 DB	'E', 00H
	ORG $+2
$SG211472 DB	'sizeof_cmd', 00H
	ORG $+1
$SG211696 DB	'E', 00H
	ORG $+2
$SG211473 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211474 DB	'REGS (copy len) .......', 00H
$SG211476 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211664 DB	'-TERSE', 00H
	ORG $+1
$SG211712 DB	'I', 00H
	ORG $+2
$SG211477 DB	'sizeof_cmd', 00H
	ORG $+1
$SG211722 DB	'I', 00H
	ORG $+2
$SG211478 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211479 DB	'PSW ...................', 00H
$SG211481 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211669 DB	'+TERSE', 00H
	ORG $+1
$SG211735 DB	'I', 00H
	ORG $+2
$SG211482 DB	'sizeof_cmd', 00H
	ORG $+1
$SG211769 DB	'E', 00H
	ORG $+2
$SG211483 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211484 DB	'DEVBLK ................', 00H
$SG211486 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211675 DB	'+DEBUG', 00H
	ORG $+1
$SG211776 DB	'ALL', 00H
$SG211487 DB	'sizeof_cmd', 00H
	ORG $+1
$SG211781 DB	'E', 00H
	ORG $+2
$SG211488 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211489 DB	'TLB entry .............', 00H
$SG211491 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211682 DB	'-DEBUG', 00H
	ORG $+1
$SG211815 DB	'E', 00H
	ORG $+2
$SG211492 DB	'sizeof_cmd', 00H
	ORG $+1
$SG211823 DB	'I', 00H
	ORG $+2
$SG211493 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211494 DB	'TLB table .............', 00H
$SG211496 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211703 DB	' terse', 00H
	ORG $+1
$SG211845 DB	'E', 00H
	ORG $+2
$SG211497 DB	'sizeof_cmd', 00H
	ORG $+1
$SG211849 DB	'I', 00H
	ORG $+2
$SG211498 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211499 DB	'CPU_BITMAP ............', 00H
$SG211501 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211706 DB	' debug', 00H
	ORG $+1
$SG211879 DB	'E', 00H
	ORG $+2
$SG211502 DB	'sizeof_cmd', 00H
	ORG $+1
$SG211886 DB	'I', 00H
	ORG $+2
$SG211503 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211504 DB	'FD_SETSIZE ............', 00H
$SG211506 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211785 DB	'SYSBLK', 00H
	ORG $+1
$SG211895 DB	'I', 00H
	ORG $+2
$SG211507 DB	'sizeof_cmd', 00H
	ORG $+1
$SG211900 DB	'I', 00H
	ORG $+2
$SG211508 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211509 DB	'TID ...................', 00H
$SG211511 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211788 DB	'%s%02X', 00H
	ORG $+1
$SG211912 DB	'I', 00H
	ORG $+2
$SG211512 DB	'sizeof_cmd', 00H
	ORG $+1
$SG211926 DB	'I', 00H
	ORG $+2
$SG211513 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211514 DB	'STFL_IBM_LAST_BIT .....', 00H
$SG211516 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211790 DB	'SYSBLK', 00H
	ORG $+1
$SG211983 DB	'E', 00H
	ORG $+2
$SG211517 DB	'sizeof_cmd', 00H
	ORG $+1
$SG211987 DB	'I', 00H
	ORG $+2
$SG211518 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211519 DB	'STFL_IBM_BY_SIZE ......', 00H
$SG211521 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211793 DB	'%s%02X', 00H
	ORG $+1
$SG211993 DB	'I', 00H
	ORG $+2
$SG211522 DB	'sizeof_cmd', 00H
	ORG $+1
$SG212009 DB	'I', 00H
	ORG $+2
$SG211523 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211524 DB	'STFL_IBM_DW_SIZE ......', 00H
$SG211526 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG211819 DB	'PF%02d', 00H
	ORG $+1
$SG212013 DB	'I', 00H
	ORG $+2
$SG211527 DB	'sizeof_cmd', 00H
	ORG $+1
$SG212046 DB	'E', 00H
	ORG $+2
$SG211528 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211529 DB	'STFL_HERC_FIRST_BIT ...', 00H
$SG211531 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG212055 DB	'I', 00H
	ORG $+2
$SG211532 DB	'sizeof_cmd', 00H
	ORG $+1
$SG212064 DB	'I', 00H
	ORG $+2
$SG211533 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211534 DB	'STFL_HERC_LAST_BIT ....', 00H
$SG211536 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG212097 DB	'ALL', 00H
$SG211537 DB	'sizeof_cmd', 00H
	ORG $+1
$SG212118 DB	'E', 00H
	ORG $+2
$SG211538 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211539 DB	'STFL_HERC_BY_SIZE .....', 00H
$SG211541 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG212126 DB	'ALL', 00H
$SG211542 DB	'sizeof_cmd', 00H
	ORG $+1
$SG212127 DB	'I', 00H
	ORG $+2
$SG211543 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211544 DB	'STFL_HERC_DW_SIZE .....', 00H
$SG211546 DB	'HHC02257%s %s%7d', 0aH, 00H
	ORG $+2
$SG212134 DB	'I', 00H
	ORG $+2
$SG211547 DB	'sizeof_cmd', 00H
	ORG $+1
$SG212152 DB	'I', 00H
	ORG $+2
$SG211548 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211549 DB	'TIDPAT ................ %8.8x', 00H
	ORG $+2
$SG211552 DB	'HHC00001%s %s%s', 0aH, 00H
	ORG $+3
$SG211668 DB	'TERSE', 00H
	ORG $+2
$SG212138 DB	'DEBUG ', 00H
	ORG $+5
$SG211553 DB	'sizeof_cmd', 00H
	ORG $+5
$SG211554 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211555 DB	'SCN_TIDPAT ............ %x', 00H
	ORG $+5
$SG211558 DB	'HHC00001%s %s%s', 0aH, 00H
	ORG $+7
$SG211559 DB	'sizeof_cmd', 00H
	ORG $+5
$SG211560 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211588 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211586 DB	'HHC02323%s This build of Hercules has only partial TCP k'
	DB	'eepalive support', 0aH, 00H
	ORG $+6
$SG211587 DB	'conkpalv_cmd', 00H
	ORG $+3
$SG211594 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+6
$SG211595 DB	'conkpalv_cmd', 00H
	ORG $+3
$SG211596 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211598 DB	'socket()', 00H
	ORG $+7
$SG211600 DB	'HHC02219%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG211601 DB	'conkpalv_cmd', 00H
	ORG $+3
$SG211602 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211606 DB	'set_socket_keepalive()', 00H
	ORG $+1
$SG211608 DB	'HHC02219%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG211609 DB	'conkpalv_cmd', 00H
	ORG $+3
$SG211610 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211613 DB	'HHC02320%s Not all TCP keepalive settings honored', 0aH, 00H
	ORG $+5
$SG211614 DB	'conkpalv_cmd', 00H
	ORG $+3
$SG211615 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211617 DB	'get_socket_keepalive()', 00H
	ORG $+1
$SG211619 DB	'HHC02219%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG211620 DB	'conkpalv_cmd', 00H
	ORG $+3
$SG211621 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211622 DB	'(%d,%d,%d)', 00H
	ORG $+5
$SG211625 DB	'conkpalv', 00H
	ORG $+7
$SG211627 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
	ORG $+4
$SG211628 DB	'conkpalv_cmd', 00H
	ORG $+3
$SG211629 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211630 DB	'conkpalv', 00H
	ORG $+7
$SG211632 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG211633 DB	'conkpalv_cmd', 00H
	ORG $+3
$SG211634 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211655 DB	'HHC17000%s Missing or invalid argument(s)', 0aH, 00H
	ORG $+5
$SG211656 DB	'msglevel_cmd', 00H
	ORG $+3
$SG211657 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211662 DB	'VERBOSE', 00H
$SG211663 DB	'+VERBOSE', 00H
	ORG $+7
$SG211670 DB	'-VERBOSE', 00H
	ORG $+3
$SG211674 DB	'DEBUG', 00H
	ORG $+6
$SG211676 DB	'-NODEBUG', 00H
	ORG $+7
$SG211680 DB	'NODEBUG', 00H
$SG211681 DB	'+NODEBUG', 00H
	ORG $+7
$SG211686 DB	'EMSGLOC', 00H
$SG211687 DB	'+EMSGLOC', 00H
	ORG $+7
$SG211688 DB	'-NOEMSGLOC', 00H
	ORG $+5
$SG211692 DB	'NOEMSGLOC', 00H
	ORG $+6
$SG211693 DB	'+NOEMSGLOC', 00H
	ORG $+5
$SG211694 DB	'-EMSGLOC', 00H
	ORG $+7
$SG211697 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+6
$SG211698 DB	'msglevel_cmd', 00H
	ORG $+3
$SG211699 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211702 DB	' verbose', 00H
	ORG $+7
$SG211707 DB	' nodebug', 00H
	ORG $+7
$SG211710 DB	' emsgloc', 00H
	ORG $+7
$SG211711 DB	' noemsgloc', 00H
	ORG $+5
$SG211713 DB	'HHC17012%s MSGLEVEL = %s', 0aH, 00H
	ORG $+6
$SG211714 DB	'msglevel_cmd', 00H
	ORG $+3
$SG211715 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211723 DB	'HHC17004%s %-6s: CPUID  = %16.16llX', 0aH, 00H
	ORG $+3
$SG211724 DB	'qcpuid_cpuid', 00H
	ORG $+3
$SG211725 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211736 DB	'HHC17005%s %-6s: CPC SI = %4.4X.%s.%s.%s.%s', 0aH, 00H
	ORG $+3
$SG211737 DB	'qcpuid_cpcsi', 00H
	ORG $+3
$SG211738 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211770 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+6
$SG211771 DB	'qcpuid_cmd', 00H
	ORG $+5
$SG211772 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211779 DB	'%x%c', 00H
	ORG $+3
$SG211780 DB	': target processor is invalid', 00H
	ORG $+2
$SG211782 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+6
$SG211783 DB	'qcpuid_cmd', 00H
	ORG $+5
$SG211784 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211816 DB	'HHC17000%s Missing or invalid argument(s)', 0aH, 00H
	ORG $+5
$SG211817 DB	'qpfkeys_cmd', 00H
	ORG $+4
$SG211818 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211822 DB	'UNDEFINED', 00H
	ORG $+6
$SG211824 DB	'HHC17199%s %.4s %s', 0aH, 00H
	ORG $+4
$SG211825 DB	'qpfkeys_cmd', 00H
	ORG $+4
$SG211826 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211846 DB	'HHC17000%s Missing or invalid argument(s)', 0aH, 00H
	ORG $+5
$SG211847 DB	'qpid_cmd', 00H
	ORG $+7
$SG211848 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211850 DB	'HHC17013%s Process ID = %d', 0aH, 00H
	ORG $+4
$SG211851 DB	'qpid_cmd', 00H
	ORG $+7
$SG211852 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211880 DB	'HHC17000%s Missing or invalid argument(s)', 0aH, 00H
	ORG $+5
$SG211881 DB	'qports_cmd', 00H
	ORG $+5
$SG211882 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211883 DB	'on port %s with %s', 00H
	ORG $+1
$SG211885 DB	'HTTP', 00H
	ORG $+7
$SG211887 DB	'HHC17001%s %s server %slistening %s', 0aH, 00H
	ORG $+3
$SG211888 DB	'qports_cmd', 00H
	ORG $+5
$SG211889 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211892 DB	'on port %u', 00H
	ORG $+5
$SG211894 DB	'Shared DASD', 00H
	ORG $+4
$SG211896 DB	'HHC17001%s %s server %slistening %s', 0aH, 00H
	ORG $+3
$SG211897 DB	'qports_cmd', 00H
	ORG $+5
$SG211898 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211899 DB	'Shared DASD', 00H
	ORG $+4
$SG211901 DB	'HHC17002%s %s server inactive', 0aH, 00H
	ORG $+1
$SG211902 DB	'qports_cmd', 00H
	ORG $+5
$SG211903 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211906 DB	'on port %s', 00H
	ORG $+5
$SG211909 DB	'for host %s on port %s', 00H
	ORG $+1
$SG211911 DB	'Console', 00H
$SG211913 DB	'HHC17001%s %s server %slistening %s', 0aH, 00H
	ORG $+3
$SG211914 DB	'qports_cmd', 00H
	ORG $+5
$SG211915 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211919 DB	'on port %s', 00H
	ORG $+5
$SG211922 DB	'for host %s on port %s', 00H
	ORG $+1
$SG211923 DB	'NOT ', 00H
	ORG $+3
$SG211925 DB	'SYSG console', 00H
	ORG $+3
$SG211927 DB	'HHC17001%s %s server %slistening %s', 0aH, 00H
	ORG $+3
$SG211928 DB	'qports_cmd', 00H
	ORG $+5
$SG211929 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211984 DB	'HHC17000%s Missing or invalid argument(s)', 0aH, 00H
	ORG $+5
$SG211985 DB	'qproc_cmd', 00H
	ORG $+6
$SG211986 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211990 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG211988 DB	'HHC17007%s NumCPU = %2.2d, NumVEC = %2.2d, ReservedCPU ='
	DB	' %2.2d, MaxCPU = %2.2d', 0aH, 00H
$SG211989 DB	'qproc_cmd', 00H
	ORG $+6
$SG211994 DB	'HHC17008%s Avgproc  %2.2d %3.3d%%; MIPS[%4d.%2.2d]; SIOS'
	DB	'[%6d]%s', 0aH, 00H
	ORG $+7
$SG211995 DB	'qproc_cmd', 00H
	ORG $+6
$SG211996 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG212003 DB	'%llu/', 00H
	ORG $+2
$SG212007 DB	'%llu/', 00H
	ORG $+2
$SG212008 DB	' - Host Kernel(%s%02d:%02d:%02d.%03d) User(%s%02d:%02d:%'
	DB	'02d.%03d)', 00H
	ORG $+6
$SG212012 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG212010 DB	'HHC17009%s PROC %s%2.2X %c %3.3d%%; MIPS[%4d.%2.2d]; SIO'
	DB	'S[%6d]%s', 0aH, 00H
	ORG $+6
$SG212011 DB	'qproc_cmd', 00H
	ORG $+6
$SG212014 DB	'HHC17010%s  - Started        : Stopping        * Stopped'
	DB	0aH, 00H
	ORG $+6
$SG212015 DB	'qproc_cmd', 00H
	ORG $+6
$SG212016 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG212039 DB	'MAINSIZE', 00H
	ORG $+7
$SG212043 DB	'XPNDSIZE', 00H
	ORG $+7
$SG212044 DB	'EXPANDED', 00H
	ORG $+7
$SG212045 DB	'; either ''mainsize'' or ''xpndsize'' is valid', 00H
	ORG $+5
$SG212047 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+6
$SG212048 DB	'qstor_cmd', 00H
	ORG $+6
$SG212049 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG212052 DB	'not ', 00H
	ORG $+3
$SG212053 DB	'main', 00H
	ORG $+3
$SG212054 DB	'MAIN', 00H
	ORG $+3
$SG212056 DB	'HHC17003%s %-8s storage is %s (%ssize); storage is %sloc'
	DB	'ked', 0aH, 00H
	ORG $+3
$SG212057 DB	'qstor_cmd', 00H
	ORG $+6
$SG212058 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG212061 DB	'not ', 00H
	ORG $+3
$SG212062 DB	'xpnd', 00H
	ORG $+3
$SG212063 DB	'EXPANDED', 00H
	ORG $+7
$SG212065 DB	'HHC17003%s %-8s storage is %s (%ssize); storage is %sloc'
	DB	'ked', 0aH, 00H
	ORG $+3
$SG212066 DB	'qstor_cmd', 00H
	ORG $+6
$SG212067 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG212102 DB	'OPERATOR', 00H
	ORG $+7
$SG212105 DB	'MAINTENANCE', 00H
	ORG $+4
$SG212108 DB	'PROGRAMMER', 00H
	ORG $+5
$SG212111 DB	'CONFIGURATION', 00H
	ORG $+2
$SG212114 DB	'DEVELOPER', 00H
	ORG $+2
$SG212117 DB	'DEBUG', 00H
	ORG $+6
$SG212119 DB	'HHC01605%s Invalid cmdlevel option: %s', 0aH, 00H
$SG212120 DB	'cmdlvl_cmd', 00H
	ORG $+5
$SG212121 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG212128 DB	'HHC01606%s cmdlevel[%2.2X] is %s', 0aH, 00H
	ORG $+6
$SG212129 DB	'cmdlvl_cmd', 00H
	ORG $+5
$SG212130 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG212133 DB	'NONE', 00H
	ORG $+3
$SG212135 DB	'HHC01606%s cmdlevel[%2.2X] is %s', 0aH, 00H
	ORG $+6
$SG212136 DB	'cmdlvl_cmd', 00H
	ORG $+5
$SG212137 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
$SG212140 DB	'DEVELOPER ', 00H
	ORG $+5
$SG212142 DB	'CONFIGURATION ', 00H
	ORG $+1
$SG212144 DB	'PROGRAMMER ', 00H
	ORG $+4
$SG212146 DB	'MAINTENANCE ', 00H
	ORG $+3
$SG212148 DB	'OPERATOR ', 00H
	ORG $+6
$SG212150 DB	'%s%s%s%s%s%s', 00H
	ORG $+3
$SG212153 DB	'HHC01606%s cmdlevel[%2.2X] is %s', 0aH, 00H
	ORG $+6
$SG212154 DB	'cmdlvl_cmd', 00H
	ORG $+5
$SG212155 DB	'C:\papa\MyGit\hyperion-zvector\hsccmd.c', 00H
_DATA	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_get_4K_storage_key DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900__or_storage_key DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900__and_storage_key DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900__get_storage_key DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390__or_storage_key DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390__and_storage_key DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390__get_storage_key DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370__or_storage_key DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370__and_storage_key DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370__get_storage_key DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_get_storekey_ptr DD 010d01H
	DD	0220dH
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cmdlvl_cmd
	DD	01fH
	DD	0632H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:qports_cmd
	DD	01fH
	DD	0545H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:qpfkeys_cmd
	DD	01cH
	DD	0155H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:qcpuid_cmd
	DD	01fH
	DD	0424H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:qcpuid_cpcsi
	DD	01bH
	DD	014dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:msglevel_cmd
	DD	020H
	DD	0555H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:conkpalv_cmd
	DD	01fH
	DD	0578H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:herclogo_cmd
	DD	020H
	DD	0270H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_cmd
	DD	01fH
	DD	0712H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:OnOffCommand
	DD	01fH
	DD	0f09H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:savecore_cmd
	DD	01fH
	DD	0bceH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mt_cmd
	DD	020H
	DD	01befH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ds_cmd
	DD	025H
	DD	019bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ostailor_cmd
	DD	020H
	DD	0cb9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:pgmtrace_cmd
	DD	01fH
	DD	05acH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:qd_cmd
	DD	01fH
	DD	010ccH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:devlist_cmd
	DD	020H
	DD	0a21H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cpuidfmt_cmd
	DD	01fH
	DD	086fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cpuserial_cmd
	DD	01fH
	DD	0415H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cpumodel_cmd
	DD	01fH
	DD	0439H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cpuverid_cmd
	DD	01fH
	DD	04e8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:lparnum_cmd
	DD	01fH
	DD	06bfH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:shrdport_cmd
	DD	020H
	DD	0434H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stsi_model_cmd
	DD	01fH
	DD	07a8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:shcmdopt_cmd
	DD	01fH
	DD	0466H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:diag8_cmd
	DD	01fH
	DD	04d6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:panrate_cmd
	DD	01fH
	DD	04b7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:panopt_cmd
	DD	01fH
	DD	0b28H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:toddrag_cmd
	DD	01fH
	DD	03a8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:sysgport_cmd
	DD	01fH
	DD	087fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cnslport_cmd
	DD	01fH
	DD	0718H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:maxcpu_cmd
	DD	01fH
	DD	043cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:numcpu_cmd
	DD	01fH
	DD	04d1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:xpndsize_cmd
	DD	01fH
	DD	0628H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mainsize_cmd
	DD	01fH
	DD	075aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:qstor_cmd
	DD	01fH
	DD	0348H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:sclproot_cmd
	DD	01fH
	DD	02b3H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:tt32_cmd
	DD	01fH
	DD	08ffH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:qeth_cmd
	DD	01fH
	DD	014d1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ptp_cmd
	DD	01fH
	DD	0979H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ctc_cmd
	DD	020H
	DD	0f01H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:scsimount_cmd
	DD	01fH
	DD	0a44H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:automount_cmd
	DD	020H
	DD	0151bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:add_tamdir
	DD	01cH
	DD	03a5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:check_define_default_automount_dir
	DD	011H
	DD	0293H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iodelay_cmd
	DD	01fH
	DD	0329H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:fcb_cmd
	DD	01fH
	DD	02eeH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cctape_cmd
	DD	01fH
	DD	02dfH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:logopt_cmd
	DD	01fH
	DD	04efH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:message_cmd
	DD	024H
	DD	0270H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:maxrates_cmd
	DD	01fH
	DD	0a5fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:$test_cmd
	DD	01fH
	DD	0ac7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:test_thread
	DD	016H
	DD	0f9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:z900_fonoff_cmd
	DD	01bH
	DD	02a0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s390_fonoff_cmd
	DD	01bH
	DD	02a0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s370_fonoff_cmd
	DD	01bH
	DD	02a0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:qproc_cmd
	DD	01fH
	DD	09b9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:quitmout_cmd
	DD	020H
	DD	030fH
voltbl	ENDS
xdata	SEGMENT
$unwind$ctime DD 010901H
	DD	04209H
$unwind$difftime DD 010e01H
	DD	0420eH
$unwind$localtime DD 010901H
	DD	04209H
$unwind$time DD	010901H
	DD	04209H
$unwind$DebuggerTrace DD 011801H
	DD	0a218H
$unwind$strabbrev DD 011301H
	DD	04213H
$unwind$strcaseabbrev DD 011301H
	DD	08213H
$unwind$strupper DD 010e01H
	DD	0620eH
$unwind$strnupper DD 011301H
	DD	08213H
$unwind$quit_cmd DD 011201H
	DD	0c212H
$unwind$quitmout_cmd DD 032819H
	DD	0120116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	088H
$unwind$devinit_cmd DD 021501H
	DD	0170115H
$unwind$qproc_cmd DD 022719H
	DD	0430115H
	DD	imagerel __GSHandlerCheck
	DD	0200H
$unwind$wakeup_cpu DD 010e01H
	DD	0420eH
$unwind$Interrupt_Lock_Obtained DD 010e01H
	DD	0420eH
$unwind$Obtain_Interrupt_Lock DD 010e01H
	DD	0420eH
$unwind$Release_Interrupt_Lock DD 010e01H
	DD	0420eH
$unwind$are_any_cpus_started_intlock_held DD 010401H
	DD	02204H
$unwind$are_any_cpus_started DD 010401H
	DD	06204H
$unwind$s370_fquest_cmd DD 020701H
	DD	0110107H
$unwind$s370_fonoff_cmd DD 022319H
	DD	01d0111H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$s390_fquest_cmd DD 020701H
	DD	0110107H
$unwind$s390_fonoff_cmd DD 022319H
	DD	01d0111H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$z900_fquest_cmd DD 020701H
	DD	0110107H
$unwind$z900_fonoff_cmd DD 022319H
	DD	01d0111H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$test_thread DD 021b19H
	DD	011010cH
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$test_locks_thread DD 010901H
	DD	04209H
$unwind$deadlocks_1 DD 010901H
	DD	06209H
$unwind$deadlocks_2 DD 010901H
	DD	06209H
$unwind$deadlocks_3 DD 010901H
	DD	06209H
$unwind$$test_cmd DD 022719H
	DD	0190115H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$devnotfound_msg DD 010e01H
	DD	0c20eH
$unwind$missing_devnum DD 010401H
	DD	08204H
$unwind$maxrates_cmd DD 022719H
	DD	02d0115H
	DD	imagerel __GSHandlerCheck
	DD	0150H
$unwind$message_cmd DD 022c19H
	DD	033011aH
	DD	imagerel __GSHandlerCheck
	DD	0180H
$unwind$msg_cmd DD 011201H
	DD	0c212H
$unwind$quit_thread DD 010901H
	DD	04209H
$unwind$History DD 011201H
	DD	06212H
$unwind$log_cmd DD 011201H
	DD	0c212H
$unwind$logopt_cmd DD 022719H
	DD	0210115H
	DD	imagerel __GSHandlerCheck
	DD	0f0H
$unwind$uptime_cmd DD 021501H
	DD	0190115H
$unwind$version_cmd DD 011201H
	DD	0a212H
$unwind$cctape_cmd DD 022719H
	DD	0330115H
	DD	imagerel __GSHandlerCheck
	DD	0180H
$unwind$fcb_cmd DD 022719H
	DD	0330115H
	DD	imagerel __GSHandlerCheck
	DD	0180H
$unwind$start_cmd DD 021501H
	DD	0170115H
$unwind$g_cmd DD 011201H
	DD	0c212H
$unwind$stop_cmd DD 021501H
	DD	0130115H
$unwind$quiet_cmd DD 011201H
	DD	0e212H
$unwind$iodelay_cmd DD 022719H
	DD	0130115H
	DD	imagerel __GSHandlerCheck
	DD	088H
$unwind$autoinit_cmd DD 011201H
	DD	0e212H
$unwind$check_define_default_automount_dir DD 021919H
	DD	0390107H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
$unwind$add_tamdir DD 032419H
	DD	04c0112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0250H
$unwind$automount_cmd DD 032819H
	DD	0e20116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	0700H
$unwind$try_scsi_refresh DD 010901H
	DD	08209H
$unwind$scsimount_cmd DD 022719H
	DD	0670115H
	DD	imagerel __GSHandlerCheck
	DD	0320H
$unwind$cckd_cmd DD 011201H
	DD	0e212H
$unwind$ctc_cmd DD 032819H
	DD	03e0116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	01e0H
$unwind$ptp_cmd DD 022719H
	DD	02f0115H
	DD	imagerel __GSHandlerCheck
	DD	0160H
$unwind$qeth_cmd DD 022719H
	DD	03f0115H
	DD	imagerel __GSHandlerCheck
	DD	01e0H
$unwind$tt32_cmd DD 022719H
	DD	0230115H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$sclproot_cmd DD 022719H
	DD	03d0115H
	DD	imagerel __GSHandlerCheck
	DD	01d0H
$unwind$engines_cmd DD 021501H
	DD	0170115H
$unwind$sysepoch_cmd DD 021501H
	DD	0130115H
$unwind$yroffset_cmd DD 021501H
	DD	0130115H
$unwind$tzoffset_cmd DD 021501H
	DD	0130115H
$unwind$qstor_cmd DD 022719H
	DD	0250115H
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$mainsize_cmd DD 022719H
	DD	0210115H
	DD	imagerel __GSHandlerCheck
	DD	0f0H
$unwind$xpndsize_cmd DD 022719H
	DD	01f0115H
	DD	imagerel __GSHandlerCheck
	DD	0e0H
$unwind$deprecated_cmd DD 010901H
	DD	0c209H
$unwind$hercnice_cmd DD 011201H
	DD	04212H
$unwind$hercprio_cmd DD 011201H
	DD	04212H
$unwind$cpuprio_cmd DD 011201H
	DD	04212H
$unwind$devprio_cmd DD 011201H
	DD	04212H
$unwind$todprio_cmd DD 011201H
	DD	04212H
$unwind$srvprio_cmd DD 011201H
	DD	04212H
$unwind$netdev_cmd DD 021501H
	DD	0110115H
$unwind$numcpu_cmd DD 022719H
	DD	0190115H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$maxcpu_cmd DD 022719H
	DD	0170115H
	DD	imagerel __GSHandlerCheck
	DD	0a8H
$unwind$cnslport_cmd DD 022719H
	DD	02b0115H
	DD	imagerel __GSHandlerCheck
	DD	0140H
$unwind$sysgport_cmd DD 022719H
	DD	02d0115H
	DD	imagerel __GSHandlerCheck
	DD	0150H
$unwind$http_cmd DD 011201H
	DD	06212H
$unwind$toddrag_cmd DD 022719H
	DD	0170115H
	DD	imagerel __GSHandlerCheck
	DD	0a8H
$unwind$panopt_cmd DD 022719H
	DD	0530115H
	DD	imagerel __GSHandlerCheck
	DD	0280H
$unwind$panrate_cmd DD 022719H
	DD	0210115H
	DD	imagerel __GSHandlerCheck
	DD	0f0H
$unwind$pantitle_cmd DD 021501H
	DD	0130115H
$unwind$sh_cmd DD 011201H
	DD	0a212H
$unwind$pgmprdos_cmd DD 011201H
	DD	0c212H
$unwind$diag8_cmd DD 022719H
	DD	0190115H
	DD	imagerel __GSHandlerCheck
	DD	0b8H
$unwind$shcmdopt_cmd DD 022719H
	DD	0190115H
	DD	imagerel __GSHandlerCheck
	DD	0b8H
$unwind$legacysenseid_cmd DD 021501H
	DD	0110115H
$unwind$cp_updt_cmd DD 011201H
	DD	0a212H
$unwind$codepage_cmd DD 011201H
	DD	0c212H
$unwind$stsi_model_cmd DD 022719H
	DD	0550115H
	DD	imagerel __GSHandlerCheck
	DD	0290H
$unwind$stsi_plant_cmd DD 021501H
	DD	0150115H
$unwind$stsi_manufacturer_cmd DD 021501H
	DD	0150115H
$unwind$shrdport_cmd DD 032819H
	DD	0140116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$lparname_cmd DD 021501H
	DD	0110115H
$unwind$lparnum_cmd DD 022719H
	DD	01d0115H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$cpuverid_cmd DD 022719H
	DD	0170115H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$cpumodel_cmd DD 022719H
	DD	0150115H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$cpuserial_cmd DD 022719H
	DD	0130115H
	DD	imagerel __GSHandlerCheck
	DD	088H
$unwind$cpuidfmt_cmd DD 022719H
	DD	01d0115H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$loadparm_cmd DD 021501H
	DD	0110115H
$unwind$SortDevBlkPtrsAscendingByDevnum DD 010e01H
	DD	0220eH
$unwind$is_devclass_name DD 010901H
	DD	06209H
$unwind$devlist_cmd DD 032819H
	DD	01220116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	0900H
$unwind$qd_cmd DD 022719H
	DD	0590115H
	DD	imagerel __GSHandlerCheck
	DD	02b0H
$unwind$attach_cmd DD 011201H
	DD	0c212H
$unwind$detach_cmd DD 021501H
	DD	0150115H
$unwind$define_cmd DD 011201H
	DD	0c212H
$unwind$pgmtrace_cmd DD 022719H
	DD	0230115H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$ostailor_cmd DD 032819H
	DD	0280116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$k_cmd DD 011201H
	DD	0a212H
$unwind$ds_cmd DD 022d19H
	DD	020f011bH
	DD	imagerel __GSHandlerCheck
	DD	01060H
$unwind$devtmax_cmd DD 021501H
	DD	0130115H
$unwind$sf_cmd DD 021501H
	DD	01d0115H
$unwind$mounted_tape_reinit_cmd DD 021501H
	DD	0110115H
$unwind$mt_cmd DD 032819H
	DD	0440116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	0210H
$unwind$savecore_cmd DD 022719H
	DD	0510115H
	DD	imagerel __GSHandlerCheck
	DD	0270H
$unwind$is_reserved_symbol DD 010901H
	DD	06209H
$unwind$defsym_cmd DD 021501H
	DD	0110115H
$unwind$delsym_cmd DD 011201H
	DD	0e212H
$unwind$fquest_cmd DD 011201H
	DD	06212H
$unwind$fonoff_cmd DD 010e01H
	DD	0620eH
$unwind$OnOffCommand DD 022719H
	DD	0330115H
	DD	imagerel __GSHandlerCheck
	DD	0180H
$unwind$cmdsep_cmd DD 021501H
	DD	0170115H
$unwind$ssd_cmd DD 011201H
	DD	04212H
$unwind$scpecho_cmd DD 021501H
	DD	0110115H
$unwind$scpimply_cmd DD 021501H
	DD	0110115H
$unwind$ldmod_cmd DD 011201H
	DD	0c212H
$unwind$rmmod_cmd DD 011201H
	DD	0c212H
$unwind$lsmod_cmd DD 011201H
	DD	0a212H
$unwind$lsdep_cmd DD 011201H
	DD	0a212H
$unwind$lsequ_cmd DD 011201H
	DD	0a212H
$unwind$modpath_cmd DD 021501H
	DD	0110115H
$unwind$ecpsvm_cmd DD 022719H
	DD	01d0115H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$herclogo_cmd DD 032819H
	DD	0760116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	03a0H
$unwind$sizeof_cmd DD 011201H
	DD	0a212H
$unwind$conkpalv_cmd DD 022719H
	DD	0190115H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$msglevel_cmd DD 032819H
	DD	01a0116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$qcpuid_cpuid DD 010e01H
	DD	0a20eH
$unwind$qcpuid_cpcsi DD 022319H
	DD	0190111H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$qcpuid_cmd DD 022719H
	DD	0150115H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$qpfkeys_cmd DD 012119H
	DD	0e212H
	DD	imagerel __GSHandlerCheck
	DD	068H
$unwind$qpid_cmd DD 011201H
	DD	08212H
$unwind$qports_cmd DD 022719H
	DD	01d0115H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$cmdlvl_cmd DD 022719H
	DD	02b0115H
	DD	imagerel __GSHandlerCheck
	DD	0140H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s_l DD 011801H
	DD	0a218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 011801H
	DD	08218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
option$1 = 80
merged_options$2 = 81
on$3 = 82
i$4 = 84
p$5 = 88
tv183 = 96
tv199 = 100
tv291 = 104
tv215 = 112
tv221 = 120
tv227 = 128
tv233 = 136
tv239 = 144
tv245 = 152
$T6 = 160
tv153 = 168
level$7 = 176
buf$8 = 192
__$ArrayPad$ = 320
argc$ = 352
argv$ = 360
cmdline$ = 368
cmdlvl_cmd PROC

; 9550 : {

$LN51:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@cmdlvl_cmd:

; 9551 :     UNREFERENCED( cmdline );

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@cmdlvl_cmd

; 9552 : 
; 9553 :     if (argc > 1)

  0002d	83 bc 24 60 01
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00035	0f 8e 9e 02 00
	00		 jle	 $LN8@cmdlvl_cmd

; 9554 :     {
; 9555 :         char*  p;
; 9556 :         int    i;
; 9557 :         char   level[16];
; 9558 :         BYTE   on;
; 9559 :         BYTE   option;
; 9560 :         BYTE   merged_options  = sysblk.sysgroup;

  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00042	0f b6 80 2d 11
	00 00		 movzx	 eax, BYTE PTR [rax+4397]
  00049	88 44 24 51	 mov	 BYTE PTR merged_options$2[rsp], al

; 9561 : 
; 9562 :         for (i=1; i < argc; i++)

  0004d	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR i$4[rsp], 1
  00055	eb 0a		 jmp	 SHORT $LN7@cmdlvl_cmd
$LN5@cmdlvl_cmd:
  00057	8b 44 24 54	 mov	 eax, DWORD PTR i$4[rsp]
  0005b	ff c0		 inc	 eax
  0005d	89 44 24 54	 mov	 DWORD PTR i$4[rsp], eax
$LN7@cmdlvl_cmd:
  00061	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  00068	39 44 24 54	 cmp	 DWORD PTR i$4[rsp], eax
  0006c	0f 8d 55 02 00
	00		 jge	 $LN6@cmdlvl_cmd

; 9563 :         {
; 9564 :             p = argv[i];

  00072	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$4[rsp]
  00077	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0007f	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00083	48 89 44 24 58	 mov	 QWORD PTR p$5[rsp], rax

; 9565 : 
; 9566 :            if (p[0] == '-')

  00088	b8 01 00 00 00	 mov	 eax, 1
  0008d	48 6b c0 00	 imul	 rax, rax, 0
  00091	48 8b 4c 24 58	 mov	 rcx, QWORD PTR p$5[rsp]
  00096	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0009a	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0009d	75 14		 jne	 SHORT $LN9@cmdlvl_cmd

; 9567 :            {
; 9568 :                 on = FALSE;

  0009f	c6 44 24 52 00	 mov	 BYTE PTR on$3[rsp], 0

; 9569 :                 p++;

  000a4	48 8b 44 24 58	 mov	 rax, QWORD PTR p$5[rsp]
  000a9	48 ff c0	 inc	 rax
  000ac	48 89 44 24 58	 mov	 QWORD PTR p$5[rsp], rax

; 9570 :             }

  000b1	eb 30		 jmp	 SHORT $LN10@cmdlvl_cmd
$LN9@cmdlvl_cmd:

; 9571 :             else if (p[0] == '+')

  000b3	b8 01 00 00 00	 mov	 eax, 1
  000b8	48 6b c0 00	 imul	 rax, rax, 0
  000bc	48 8b 4c 24 58	 mov	 rcx, QWORD PTR p$5[rsp]
  000c1	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  000c5	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  000c8	75 14		 jne	 SHORT $LN11@cmdlvl_cmd

; 9572 :             {
; 9573 :                 on = TRUE;

  000ca	c6 44 24 52 01	 mov	 BYTE PTR on$3[rsp], 1

; 9574 :                 p++;

  000cf	48 8b 44 24 58	 mov	 rax, QWORD PTR p$5[rsp]
  000d4	48 ff c0	 inc	 rax
  000d7	48 89 44 24 58	 mov	 QWORD PTR p$5[rsp], rax

; 9575 :             }

  000dc	eb 05		 jmp	 SHORT $LN12@cmdlvl_cmd
$LN11@cmdlvl_cmd:

; 9576 :             else
; 9577 :                 on = TRUE;

  000de	c6 44 24 52 01	 mov	 BYTE PTR on$3[rsp], 1
$LN12@cmdlvl_cmd:
$LN10@cmdlvl_cmd:

; 9578 : 
; 9579 :             strupper( level, p );

  000e3	48 8b 54 24 58	 mov	 rdx, QWORD PTR p$5[rsp]
  000e8	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR level$7[rsp]
  000f0	e8 00 00 00 00	 call	 strupper

; 9580 : 
; 9581 :             if (strabbrev( "ALL", level, 1 ))

  000f5	41 b8 01 00 00
	00		 mov	 r8d, 1
  000fb	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR level$7[rsp]
  00103	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212097
  0010a	e8 00 00 00 00	 call	 strabbrev
  0010f	85 c0		 test	 eax, eax
  00111	74 1a		 je	 SHORT $LN13@cmdlvl_cmd

; 9582 :             {
; 9583 :                 if (on)                                      option =  SYSGROUP_SYSALL;

  00113	0f b6 44 24 52	 movzx	 eax, BYTE PTR on$3[rsp]
  00118	85 c0		 test	 eax, eax
  0011a	74 07		 je	 SHORT $LN15@cmdlvl_cmd
  0011c	c6 44 24 50 7f	 mov	 BYTE PTR option$1[rsp], 127 ; 0000007fH
  00121	eb 05		 jmp	 SHORT $LN16@cmdlvl_cmd
$LN15@cmdlvl_cmd:

; 9584 :                 else                                         option = ~SYSGROUP_SYSNONE;

  00123	c6 44 24 50 f7	 mov	 BYTE PTR option$1[rsp], 247 ; 000000f7H
$LN16@cmdlvl_cmd:

; 9585 :             }

  00128	e9 64 01 00 00	 jmp	 $LN14@cmdlvl_cmd
$LN13@cmdlvl_cmd:

; 9586 :             else if (strabbrev( "OPERATOR",      level, 4 )) option = SYSGROUP_SYSOPER;

  0012d	41 b8 04 00 00
	00		 mov	 r8d, 4
  00133	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR level$7[rsp]
  0013b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212102
  00142	e8 00 00 00 00	 call	 strabbrev
  00147	85 c0		 test	 eax, eax
  00149	74 0a		 je	 SHORT $LN17@cmdlvl_cmd
  0014b	c6 44 24 50 01	 mov	 BYTE PTR option$1[rsp], 1
  00150	e9 3c 01 00 00	 jmp	 $LN18@cmdlvl_cmd
$LN17@cmdlvl_cmd:

; 9587 :             else if (strabbrev( "MAINTENANCE",   level, 5 )) option = SYSGROUP_SYSMAINT;

  00155	41 b8 05 00 00
	00		 mov	 r8d, 5
  0015b	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR level$7[rsp]
  00163	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212105
  0016a	e8 00 00 00 00	 call	 strabbrev
  0016f	85 c0		 test	 eax, eax
  00171	74 0a		 je	 SHORT $LN19@cmdlvl_cmd
  00173	c6 44 24 50 02	 mov	 BYTE PTR option$1[rsp], 2
  00178	e9 14 01 00 00	 jmp	 $LN20@cmdlvl_cmd
$LN19@cmdlvl_cmd:

; 9588 :             else if (strabbrev( "PROGRAMMER",    level, 4 )) option = SYSGROUP_SYSPROG;

  0017d	41 b8 04 00 00
	00		 mov	 r8d, 4
  00183	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR level$7[rsp]
  0018b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212108
  00192	e8 00 00 00 00	 call	 strabbrev
  00197	85 c0		 test	 eax, eax
  00199	74 0a		 je	 SHORT $LN21@cmdlvl_cmd
  0019b	c6 44 24 50 04	 mov	 BYTE PTR option$1[rsp], 4
  001a0	e9 ec 00 00 00	 jmp	 $LN22@cmdlvl_cmd
$LN21@cmdlvl_cmd:

; 9589 :             else if (strabbrev( "CONFIGURATION", level, 6 )) option = SYSGROUP_SYSCONFIG;

  001a5	41 b8 06 00 00
	00		 mov	 r8d, 6
  001ab	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR level$7[rsp]
  001b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212111
  001ba	e8 00 00 00 00	 call	 strabbrev
  001bf	85 c0		 test	 eax, eax
  001c1	74 0a		 je	 SHORT $LN23@cmdlvl_cmd
  001c3	c6 44 24 50 10	 mov	 BYTE PTR option$1[rsp], 16
  001c8	e9 c4 00 00 00	 jmp	 $LN24@cmdlvl_cmd
$LN23@cmdlvl_cmd:

; 9590 :             else if (strabbrev( "DEVELOPER",     level, 3 )) option = SYSGROUP_SYSDEVEL;

  001cd	41 b8 03 00 00
	00		 mov	 r8d, 3
  001d3	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR level$7[rsp]
  001db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212114
  001e2	e8 00 00 00 00	 call	 strabbrev
  001e7	85 c0		 test	 eax, eax
  001e9	74 0a		 je	 SHORT $LN25@cmdlvl_cmd
  001eb	c6 44 24 50 20	 mov	 BYTE PTR option$1[rsp], 32 ; 00000020H
  001f0	e9 9c 00 00 00	 jmp	 $LN26@cmdlvl_cmd
$LN25@cmdlvl_cmd:

; 9591 :             else if (strabbrev( "DEBUG",         level, 3 )) option = SYSGROUP_SYSDEBUG;

  001f5	41 b8 03 00 00
	00		 mov	 r8d, 3
  001fb	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR level$7[rsp]
  00203	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212117
  0020a	e8 00 00 00 00	 call	 strabbrev
  0020f	85 c0		 test	 eax, eax
  00211	74 07		 je	 SHORT $LN27@cmdlvl_cmd
  00213	c6 44 24 50 40	 mov	 BYTE PTR option$1[rsp], 64 ; 00000040H
  00218	eb 77		 jmp	 SHORT $LN28@cmdlvl_cmd
$LN27@cmdlvl_cmd:

; 9592 :             else
; 9593 :             {
; 9594 :                 // "Invalid cmdlevel option: %s"
; 9595 :                 WRMSG( HHC01605,"E", argv[i] );

  0021a	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$4[rsp]
  0021f	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv153[rsp], rax
  00227	b9 01 00 00 00	 mov	 ecx, 1
  0022c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00232	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0023a	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR tv153[rsp]
  00242	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00246	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0024b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212118
  00252	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00257	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212119
  0025e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00263	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00268	41 b9 03 00 00
	00		 mov	 r9d, 3
  0026e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG212120
  00275	ba 7b 25 00 00	 mov	 edx, 9595		; 0000257bH
  0027a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212121
  00281	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9596 :                 return -1;

  00287	b8 ff ff ff ff	 mov	 eax, -1
  0028c	e9 a1 03 00 00	 jmp	 $LN1@cmdlvl_cmd
$LN28@cmdlvl_cmd:
$LN26@cmdlvl_cmd:
$LN24@cmdlvl_cmd:
$LN22@cmdlvl_cmd:
$LN20@cmdlvl_cmd:
$LN18@cmdlvl_cmd:
$LN14@cmdlvl_cmd:

; 9597 :             }
; 9598 : 
; 9599 :             if (on) merged_options |=  option;

  00291	0f b6 44 24 52	 movzx	 eax, BYTE PTR on$3[rsp]
  00296	85 c0		 test	 eax, eax
  00298	74 14		 je	 SHORT $LN29@cmdlvl_cmd
  0029a	0f b6 44 24 50	 movzx	 eax, BYTE PTR option$1[rsp]
  0029f	0f b6 4c 24 51	 movzx	 ecx, BYTE PTR merged_options$2[rsp]
  002a4	0b c8		 or	 ecx, eax
  002a6	8b c1		 mov	 eax, ecx
  002a8	88 44 24 51	 mov	 BYTE PTR merged_options$2[rsp], al
  002ac	eb 14		 jmp	 SHORT $LN30@cmdlvl_cmd
$LN29@cmdlvl_cmd:

; 9600 :             else    merged_options &= ~option;

  002ae	0f b6 44 24 50	 movzx	 eax, BYTE PTR option$1[rsp]
  002b3	f7 d0		 not	 eax
  002b5	0f b6 4c 24 51	 movzx	 ecx, BYTE PTR merged_options$2[rsp]
  002ba	23 c8		 and	 ecx, eax
  002bc	8b c1		 mov	 eax, ecx
  002be	88 44 24 51	 mov	 BYTE PTR merged_options$2[rsp], al
$LN30@cmdlvl_cmd:

; 9601 :         }

  002c2	e9 90 fd ff ff	 jmp	 $LN5@cmdlvl_cmd
$LN6@cmdlvl_cmd:

; 9602 : 
; 9603 :         sysblk.sysgroup = merged_options;

  002c7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002ce	0f b6 4c 24 51	 movzx	 ecx, BYTE PTR merged_options$2[rsp]
  002d3	88 88 2d 11 00
	00		 mov	 BYTE PTR [rax+4397], cl
$LN8@cmdlvl_cmd:

; 9604 :     }
; 9605 : 
; 9606 :     /* Display the current/new value */
; 9607 : 
; 9608 :     if (sysblk.sysgroup == SYSGROUP_SYSALL)

  002d9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002e0	0f b6 80 2d 11
	00 00		 movzx	 eax, BYTE PTR [rax+4397]
  002e7	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  002ea	75 72		 jne	 SHORT $LN31@cmdlvl_cmd

; 9609 :     {
; 9610 :         // "cmdlevel[%2.2X] is %s"
; 9611 :         WRMSG( HHC01606, "I", sysblk.sysgroup, "ALL" );

  002ec	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002f3	0f b6 80 2d 11
	00 00		 movzx	 eax, BYTE PTR [rax+4397]
  002fa	89 44 24 60	 mov	 DWORD PTR tv183[rsp], eax
  002fe	b9 01 00 00 00	 mov	 ecx, 1
  00303	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00309	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212126
  00310	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00315	8b 4c 24 60	 mov	 ecx, DWORD PTR tv183[rsp]
  00319	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0031d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212127
  00324	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00329	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212128
  00330	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00335	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0033a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00340	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG212129
  00347	ba 8b 25 00 00	 mov	 edx, 9611		; 0000258bH
  0034c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212130
  00353	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9612 :     }

  00359	e9 d2 02 00 00	 jmp	 $LN32@cmdlvl_cmd
$LN31@cmdlvl_cmd:

; 9613 :     else if (sysblk.sysgroup == SYSGROUP_SYSNONE)

  0035e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00365	0f b6 80 2d 11
	00 00		 movzx	 eax, BYTE PTR [rax+4397]
  0036c	83 f8 08	 cmp	 eax, 8
  0036f	75 72		 jne	 SHORT $LN33@cmdlvl_cmd

; 9614 :     {
; 9615 :         // "cmdlevel[%2.2X] is %s"
; 9616 :         WRMSG( HHC01606, "I", sysblk.sysgroup, "NONE" );

  00371	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00378	0f b6 80 2d 11
	00 00		 movzx	 eax, BYTE PTR [rax+4397]
  0037f	89 44 24 64	 mov	 DWORD PTR tv199[rsp], eax
  00383	b9 01 00 00 00	 mov	 ecx, 1
  00388	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0038e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212133
  00395	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0039a	8b 4c 24 64	 mov	 ecx, DWORD PTR tv199[rsp]
  0039e	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212134
  003a9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212135
  003b5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003ba	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003bf	41 b9 03 00 00
	00		 mov	 r9d, 3
  003c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG212136
  003cc	ba 90 25 00 00	 mov	 edx, 9616		; 00002590H
  003d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212137
  003d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9617 :     }

  003de	e9 4d 02 00 00	 jmp	 $LN34@cmdlvl_cmd
$LN33@cmdlvl_cmd:

; 9618 :     else
; 9619 :     {
; 9620 :         char buf[128];
; 9621 : 
; 9622 :         MSGBUF( buf, "%s%s%s%s%s%s",

  003e3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  003ea	0f b6 80 2d 11
	00 00		 movzx	 eax, BYTE PTR [rax+4397]
  003f1	83 e0 40	 and	 eax, 64			; 00000040H
  003f4	85 c0		 test	 eax, eax
  003f6	74 0e		 je	 SHORT $LN37@cmdlvl_cmd
  003f8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG212138
  003ff	48 89 44 24 70	 mov	 QWORD PTR tv215[rsp], rax
  00404	eb 0c		 jmp	 SHORT $LN38@cmdlvl_cmd
$LN37@cmdlvl_cmd:
  00406	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG212139
  0040d	48 89 44 24 70	 mov	 QWORD PTR tv215[rsp], rax
$LN38@cmdlvl_cmd:
  00412	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00419	0f b6 80 2d 11
	00 00		 movzx	 eax, BYTE PTR [rax+4397]
  00420	83 e0 20	 and	 eax, 32			; 00000020H
  00423	85 c0		 test	 eax, eax
  00425	74 0e		 je	 SHORT $LN39@cmdlvl_cmd
  00427	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG212140
  0042e	48 89 44 24 78	 mov	 QWORD PTR tv221[rsp], rax
  00433	eb 0c		 jmp	 SHORT $LN40@cmdlvl_cmd
$LN39@cmdlvl_cmd:
  00435	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG212141
  0043c	48 89 44 24 78	 mov	 QWORD PTR tv221[rsp], rax
$LN40@cmdlvl_cmd:
  00441	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00448	0f b6 80 2d 11
	00 00		 movzx	 eax, BYTE PTR [rax+4397]
  0044f	83 e0 10	 and	 eax, 16
  00452	85 c0		 test	 eax, eax
  00454	74 11		 je	 SHORT $LN41@cmdlvl_cmd
  00456	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG212142
  0045d	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv227[rsp], rax
  00465	eb 0f		 jmp	 SHORT $LN42@cmdlvl_cmd
$LN41@cmdlvl_cmd:
  00467	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG212143
  0046e	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv227[rsp], rax
$LN42@cmdlvl_cmd:
  00476	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0047d	0f b6 80 2d 11
	00 00		 movzx	 eax, BYTE PTR [rax+4397]
  00484	83 e0 04	 and	 eax, 4
  00487	85 c0		 test	 eax, eax
  00489	74 11		 je	 SHORT $LN43@cmdlvl_cmd
  0048b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG212144
  00492	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv233[rsp], rax
  0049a	eb 0f		 jmp	 SHORT $LN44@cmdlvl_cmd
$LN43@cmdlvl_cmd:
  0049c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG212145
  004a3	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv233[rsp], rax
$LN44@cmdlvl_cmd:
  004ab	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  004b2	0f b6 80 2d 11
	00 00		 movzx	 eax, BYTE PTR [rax+4397]
  004b9	83 e0 02	 and	 eax, 2
  004bc	85 c0		 test	 eax, eax
  004be	74 11		 je	 SHORT $LN45@cmdlvl_cmd
  004c0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG212146
  004c7	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv239[rsp], rax
  004cf	eb 0f		 jmp	 SHORT $LN46@cmdlvl_cmd
$LN45@cmdlvl_cmd:
  004d1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG212147
  004d8	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv239[rsp], rax
$LN46@cmdlvl_cmd:
  004e0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  004e7	0f b6 80 2d 11
	00 00		 movzx	 eax, BYTE PTR [rax+4397]
  004ee	83 e0 01	 and	 eax, 1
  004f1	85 c0		 test	 eax, eax
  004f3	74 11		 je	 SHORT $LN47@cmdlvl_cmd
  004f5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG212148
  004fc	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv245[rsp], rax
  00504	eb 0f		 jmp	 SHORT $LN48@cmdlvl_cmd
$LN47@cmdlvl_cmd:
  00506	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG212149
  0050d	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv245[rsp], rax
$LN48@cmdlvl_cmd:
  00515	48 8b 44 24 70	 mov	 rax, QWORD PTR tv215[rsp]
  0051a	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  0051f	48 8b 44 24 78	 mov	 rax, QWORD PTR tv221[rsp]
  00524	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00529	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv227[rsp]
  00531	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00536	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv233[rsp]
  0053e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00543	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv239[rsp]
  0054b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00550	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR tv245[rsp]
  00558	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG212150
  0055f	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00564	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR buf$8[rsp]
  0056c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 9623 : 
; 9624 :             (sysblk.sysgroup & SYSGROUP_SYSOPER  ) ? "OPERATOR "      : "",
; 9625 :             (sysblk.sysgroup & SYSGROUP_SYSMAINT ) ? "MAINTENANCE "   : "",
; 9626 :             (sysblk.sysgroup & SYSGROUP_SYSPROG  ) ? "PROGRAMMER "    : "",
; 9627 :             (sysblk.sysgroup & SYSGROUP_SYSCONFIG) ? "CONFIGURATION " : "",
; 9628 :             (sysblk.sysgroup & SYSGROUP_SYSDEVEL ) ? "DEVELOPER "     : "",
; 9629 :             (sysblk.sysgroup & SYSGROUP_SYSDEBUG ) ? "DEBUG "         : ""
; 9630 :         );
; 9631 : 
; 9632 :         if (    strlen( buf ) > 1)

  00572	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR buf$8[rsp]
  0057a	e8 00 00 00 00	 call	 strlen
  0057f	48 83 f8 01	 cmp	 rax, 1
  00583	76 3d		 jbe	 SHORT $LN35@cmdlvl_cmd

; 9633 :             buf[strlen( buf ) - 1] = 0;

  00585	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR buf$8[rsp]
  0058d	e8 00 00 00 00	 call	 strlen
  00592	48 ff c8	 dec	 rax
  00595	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR $T6[rsp], rax
  0059d	48 81 bc 24 a0
	00 00 00 80 00
	00 00		 cmp	 QWORD PTR $T6[rsp], 128	; 00000080H
  005a9	73 02		 jae	 SHORT $LN49@cmdlvl_cmd
  005ab	eb 05		 jmp	 SHORT $LN50@cmdlvl_cmd
$LN49@cmdlvl_cmd:
  005ad	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN50@cmdlvl_cmd:
  005b2	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR $T6[rsp]
  005ba	c6 84 04 c0 00
	00 00 00	 mov	 BYTE PTR buf$8[rsp+rax], 0
$LN35@cmdlvl_cmd:

; 9634 : 
; 9635 :         // "cmdlevel[%2.2X] is %s"
; 9636 :         WRMSG( HHC01606, "I", sysblk.sysgroup, buf );

  005c2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  005c9	0f b6 80 2d 11
	00 00		 movzx	 eax, BYTE PTR [rax+4397]
  005d0	89 44 24 68	 mov	 DWORD PTR tv291[rsp], eax
  005d4	b9 01 00 00 00	 mov	 ecx, 1
  005d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005df	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR buf$8[rsp]
  005e7	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  005ec	8b 4c 24 68	 mov	 ecx, DWORD PTR tv291[rsp]
  005f0	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  005f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212152
  005fb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00600	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212153
  00607	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0060c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00611	41 b9 03 00 00
	00		 mov	 r9d, 3
  00617	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG212154
  0061e	ba a4 25 00 00	 mov	 edx, 9636		; 000025a4H
  00623	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212155
  0062a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN34@cmdlvl_cmd:
$LN32@cmdlvl_cmd:

; 9637 :     }
; 9638 : 
; 9639 :     return 0;

  00630	33 c0		 xor	 eax, eax
$LN1@cmdlvl_cmd:
$LN36@cmdlvl_cmd:

; 9640 : }

  00632	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0063a	48 33 cc	 xor	 rcx, rsp
  0063d	e8 00 00 00 00	 call	 __security_check_cookie
  00642	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  00649	c3		 ret	 0
cmdlvl_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
serv$1 = 80
serv$2 = 88
port$3 = 96
port$4 = 104
host$5 = 112
host$6 = 120
tv264 = 128
tv77 = 136
buf$ = 144
__$ArrayPad$ = 208
argc$ = 240
argv$ = 248
cmdline$ = 256
qports_cmd PROC

; 9241 : {

$LN23:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@qports_cmd:

; 9242 :     char buf[64];
; 9243 : 
; 9244 :     UNREFERENCED( cmdline );

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@qports_cmd
$LN7@qports_cmd:

; 9245 :     UNREFERENCED( argv );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN7@qports_cmd

; 9246 : 
; 9247 :     if (argc != 1)

  00033	83 bc 24 f0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0003b	74 51		 je	 SHORT $LN8@qports_cmd

; 9248 :     {
; 9249 :         // "Missing or invalid argument(s)"
; 9250 :         WRMSG( HHC17000, "E" );

  0003d	b9 01 00 00 00	 mov	 ecx, 1
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211879
  0004f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211880
  0005b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00060	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00065	41 b9 03 00 00
	00		 mov	 r9d, 3
  0006b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211881
  00072	ba 22 24 00 00	 mov	 edx, 9250		; 00002422H
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211882
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9251 :         return -1;

  00084	b8 ff ff ff ff	 mov	 eax, -1
  00089	e9 b7 04 00 00	 jmp	 $LN1@qports_cmd
$LN8@qports_cmd:

; 9252 :     }
; 9253 : 
; 9254 : 
; 9255 :     // HTTP SERVER...
; 9256 : 
; 9257 :     MSGBUF( buf, "on port %s with %s", http_get_port(), http_get_portauth() );

  0008e	e8 00 00 00 00	 call	 http_get_portauth
  00093	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv77[rsp], rax
  0009b	e8 00 00 00 00	 call	 http_get_port
  000a0	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv77[rsp]
  000a8	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000ad	4c 8b c8	 mov	 r9, rax
  000b0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211883
  000b7	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000bc	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  000c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 9258 : 
; 9259 :     // "%s server %slistening %s"
; 9260 :     WRMSG( HHC17001, "I", "HTTP", "", buf );

  000ca	b9 01 00 00 00	 mov	 ecx, 1
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000d5	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  000dd	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211884
  000e9	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211885
  000f5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211886
  00101	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00106	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211887
  0010d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00112	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00117	41 b9 03 00 00
	00		 mov	 r9d, 3
  0011d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211888
  00124	ba 2c 24 00 00	 mov	 edx, 9260		; 0000242cH
  00129	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211889
  00130	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9261 : 
; 9262 : 
; 9263 :     // SHARED DASD SERVER...
; 9264 : 
; 9265 : #if defined( OPTION_SHARED_DEVICES )
; 9266 : 
; 9267 :     if (sysblk.shrdport > 0)

  00136	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0013d	0f b7 80 ac 13
	00 00		 movzx	 eax, WORD PTR [rax+5036]
  00144	85 c0		 test	 eax, eax
  00146	0f 8e 99 00 00
	00		 jle	 $LN9@qports_cmd

; 9268 :     {
; 9269 :         MSGBUF( buf, "on port %u", sysblk.shrdport );

  0014c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00153	0f b7 80 ac 13
	00 00		 movzx	 eax, WORD PTR [rax+5036]
  0015a	44 8b c8	 mov	 r9d, eax
  0015d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211892
  00164	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00169	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 9270 : 
; 9271 :         // "%s server %slistening %s"
; 9272 :         WRMSG( HHC17001, "I", "Shared DASD", "", buf );

  00177	b9 01 00 00 00	 mov	 ecx, 1
  0017c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00182	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0018a	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211893
  00196	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0019b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211894
  001a2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211895
  001ae	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211896
  001ba	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001bf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001c4	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ca	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211897
  001d1	ba 38 24 00 00	 mov	 edx, 9272		; 00002438H
  001d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211898
  001dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9273 :     }

  001e3	eb 53		 jmp	 SHORT $LN10@qports_cmd
$LN9@qports_cmd:

; 9274 :     else
; 9275 :     {
; 9276 :         // "%s server inactive"
; 9277 :         WRMSG( HHC17002, "I", "Shared DASD" );

  001e5	b9 01 00 00 00	 mov	 ecx, 1
  001ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211899
  001f7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211900
  00203	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00208	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211901
  0020f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00214	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00219	41 b9 03 00 00
	00		 mov	 r9d, 3
  0021f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211902
  00226	ba 3d 24 00 00	 mov	 edx, 9277		; 0000243dH
  0022b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211903
  00232	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN10@qports_cmd:

; 9278 :     }
; 9279 : #else // !defined( OPTION_SHARED_DEVICES )
; 9280 : 
; 9281 :     // "%s support not included in this engine build"
; 9282 :     WRMSG( HHC17015, "I", "Shared DASD" );
; 9283 : 
; 9284 : #endif // defined( OPTION_SHARED_DEVICES )
; 9285 : 
; 9286 : 
; 9287 :     // CONSOLE...
; 9288 : 
; 9289 :     if (!strchr( sysblk.cnslport, ':' ))

  00238	ba 3a 00 00 00	 mov	 edx, 58			; 0000003aH
  0023d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00244	48 8b 88 e8 13
	00 00		 mov	 rcx, QWORD PTR [rax+5096]
  0024b	e8 00 00 00 00	 call	 strchr
  00250	48 85 c0	 test	 rax, rax
  00253	75 2d		 jne	 SHORT $LN11@qports_cmd

; 9290 :     {
; 9291 :         MSGBUF( buf, "on port %s", sysblk.cnslport );

  00255	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0025c	4c 8b 88 e8 13
	00 00		 mov	 r9, QWORD PTR [rax+5096]
  00263	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211906
  0026a	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0026f	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00277	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 9292 :     }

  0027d	e9 9d 00 00 00	 jmp	 $LN12@qports_cmd
$LN11@qports_cmd:

; 9293 :     else
; 9294 :     {
; 9295 :         char* serv;
; 9296 :         char* host = NULL;

  00282	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR host$5[rsp], 0

; 9297 :         char* port = strdup( sysblk.cnslport );

  0028b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00292	48 8b 88 e8 13
	00 00		 mov	 rcx, QWORD PTR [rax+5096]
  00299	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0029f	48 89 44 24 60	 mov	 QWORD PTR port$3[rsp], rax

; 9298 : 
; 9299 :         if ((serv = strchr( port, ':' )))

  002a4	ba 3a 00 00 00	 mov	 edx, 58			; 0000003aH
  002a9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR port$3[rsp]
  002ae	e8 00 00 00 00	 call	 strchr
  002b3	48 89 44 24 50	 mov	 QWORD PTR serv$1[rsp], rax
  002b8	48 83 7c 24 50
	00		 cmp	 QWORD PTR serv$1[rsp], 0
  002be	74 2b		 je	 SHORT $LN13@qports_cmd

; 9300 :         {
; 9301 :             *serv++ = '\0';

  002c0	48 8b 44 24 50	 mov	 rax, QWORD PTR serv$1[rsp]
  002c5	c6 00 00	 mov	 BYTE PTR [rax], 0
  002c8	48 8b 44 24 50	 mov	 rax, QWORD PTR serv$1[rsp]
  002cd	48 ff c0	 inc	 rax
  002d0	48 89 44 24 50	 mov	 QWORD PTR serv$1[rsp], rax

; 9302 :             if (*port)

  002d5	48 8b 44 24 60	 mov	 rax, QWORD PTR port$3[rsp]
  002da	0f be 00	 movsx	 eax, BYTE PTR [rax]
  002dd	85 c0		 test	 eax, eax
  002df	74 0a		 je	 SHORT $LN14@qports_cmd

; 9303 :                 host = port;

  002e1	48 8b 44 24 60	 mov	 rax, QWORD PTR port$3[rsp]
  002e6	48 89 44 24 70	 mov	 QWORD PTR host$5[rsp], rax
$LN14@qports_cmd:
$LN13@qports_cmd:

; 9304 :         }
; 9305 : 
; 9306 :         MSGBUF( buf, "for host %s on port %s", host, serv );

  002eb	48 8b 44 24 50	 mov	 rax, QWORD PTR serv$1[rsp]
  002f0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002f5	4c 8b 4c 24 70	 mov	 r9, QWORD PTR host$5[rsp]
  002fa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211909
  00301	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00306	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0030e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 9307 :         free( port );

  00314	48 8b 4c 24 60	 mov	 rcx, QWORD PTR port$3[rsp]
  00319	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN12@qports_cmd:

; 9308 :     }
; 9309 : 
; 9310 :     // "%s server %slistening %s"
; 9311 :     WRMSG( HHC17001, "I", "Console", "", buf );

  0031f	b9 01 00 00 00	 mov	 ecx, 1
  00324	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0032a	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00332	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00337	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211910
  0033e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00343	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211911
  0034a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0034f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211912
  00356	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0035b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211913
  00362	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00367	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0036c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00372	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211914
  00379	ba 5f 24 00 00	 mov	 edx, 9311		; 0000245fH
  0037e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211915
  00385	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9312 : 
; 9313 : 
; 9314 :     // SYSG CONSOLE...
; 9315 : 
; 9316 :     if (sysblk.sysgport)

  0038b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00392	48 83 b8 f0 13
	00 00 00	 cmp	 QWORD PTR [rax+5104], 0
  0039a	0f 84 a3 01 00
	00		 je	 $LN15@qports_cmd

; 9317 :     {
; 9318 :         if (!strchr( sysblk.sysgport, ':' ))

  003a0	ba 3a 00 00 00	 mov	 edx, 58			; 0000003aH
  003a5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  003ac	48 8b 88 f0 13
	00 00		 mov	 rcx, QWORD PTR [rax+5104]
  003b3	e8 00 00 00 00	 call	 strchr
  003b8	48 85 c0	 test	 rax, rax
  003bb	75 2d		 jne	 SHORT $LN16@qports_cmd

; 9319 :         {
; 9320 :             MSGBUF( buf, "on port %s", sysblk.sysgport );

  003bd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  003c4	4c 8b 88 f0 13
	00 00		 mov	 r9, QWORD PTR [rax+5104]
  003cb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211919
  003d2	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  003d7	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  003df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 9321 :         }

  003e5	e9 9d 00 00 00	 jmp	 $LN17@qports_cmd
$LN16@qports_cmd:

; 9322 :         else
; 9323 :         {
; 9324 :             char* serv;
; 9325 :             char* host = NULL;

  003ea	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR host$6[rsp], 0

; 9326 :             char* port = strdup( sysblk.sysgport );

  003f3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  003fa	48 8b 88 f0 13
	00 00		 mov	 rcx, QWORD PTR [rax+5104]
  00401	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00407	48 89 44 24 68	 mov	 QWORD PTR port$4[rsp], rax

; 9327 : 
; 9328 :             if ((serv = strchr( port, ':' )))

  0040c	ba 3a 00 00 00	 mov	 edx, 58			; 0000003aH
  00411	48 8b 4c 24 68	 mov	 rcx, QWORD PTR port$4[rsp]
  00416	e8 00 00 00 00	 call	 strchr
  0041b	48 89 44 24 58	 mov	 QWORD PTR serv$2[rsp], rax
  00420	48 83 7c 24 58
	00		 cmp	 QWORD PTR serv$2[rsp], 0
  00426	74 2b		 je	 SHORT $LN18@qports_cmd

; 9329 :             {
; 9330 :                 *serv++ = '\0';

  00428	48 8b 44 24 58	 mov	 rax, QWORD PTR serv$2[rsp]
  0042d	c6 00 00	 mov	 BYTE PTR [rax], 0
  00430	48 8b 44 24 58	 mov	 rax, QWORD PTR serv$2[rsp]
  00435	48 ff c0	 inc	 rax
  00438	48 89 44 24 58	 mov	 QWORD PTR serv$2[rsp], rax

; 9331 :                 if (*port)

  0043d	48 8b 44 24 68	 mov	 rax, QWORD PTR port$4[rsp]
  00442	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00445	85 c0		 test	 eax, eax
  00447	74 0a		 je	 SHORT $LN19@qports_cmd

; 9332 :                     host = port;

  00449	48 8b 44 24 68	 mov	 rax, QWORD PTR port$4[rsp]
  0044e	48 89 44 24 78	 mov	 QWORD PTR host$6[rsp], rax
$LN19@qports_cmd:
$LN18@qports_cmd:

; 9333 :             }
; 9334 : 
; 9335 :             MSGBUF( buf, "for host %s on port %s", host, serv );

  00453	48 8b 44 24 58	 mov	 rax, QWORD PTR serv$2[rsp]
  00458	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0045d	4c 8b 4c 24 78	 mov	 r9, QWORD PTR host$6[rsp]
  00462	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211922
  00469	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0046e	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00476	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 9336 :             free( port );

  0047c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR port$4[rsp]
  00481	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN17@qports_cmd:

; 9337 :         }
; 9338 : 
; 9339 :         // "%s server %slistening %s"
; 9340 :         WRMSG( HHC17001, "I", "SYSG console",

  00487	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0048e	48 83 b8 c8 11
	00 00 00	 cmp	 QWORD PTR [rax+4552], 0
  00496	74 2f		 je	 SHORT $LN21@qports_cmd
  00498	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0049f	48 8b 80 c8 11
	00 00		 mov	 rax, QWORD PTR [rax+4552]
  004a6	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  004ac	c1 e8 05	 shr	 eax, 5
  004af	83 e0 01	 and	 eax, 1
  004b2	85 c0		 test	 eax, eax
  004b4	74 11		 je	 SHORT $LN21@qports_cmd
  004b6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG211923
  004bd	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv264[rsp], rax
  004c5	eb 0f		 jmp	 SHORT $LN22@qports_cmd
$LN21@qports_cmd:
  004c7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG211924
  004ce	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv264[rsp], rax
$LN22@qports_cmd:
  004d6	b9 01 00 00 00	 mov	 ecx, 1
  004db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004e1	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  004e9	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  004ee	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv264[rsp]
  004f6	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  004fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211925
  00502	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00507	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211926
  0050e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00513	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211927
  0051a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0051f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00524	41 b9 03 00 00
	00		 mov	 r9d, 3
  0052a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211928
  00531	ba 7d 24 00 00	 mov	 edx, 9341		; 0000247dH
  00536	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211929
  0053d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN15@qports_cmd:

; 9341 :             sysblk.sysgdev && sysblk.sysgdev->connected ? "NOT " : "", buf );
; 9342 :     }
; 9343 : 
; 9344 :     return 0;

  00543	33 c0		 xor	 eax, eax
$LN1@qports_cmd:

; 9345 : }

  00545	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0054d	48 33 cc	 xor	 rcx, rsp
  00550	e8 00 00 00 00	 call	 __security_check_cookie
  00555	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  0055c	c3		 ret	 0
qports_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
argc$ = 80
argv$ = 88
cmdline$ = 96
qpid_cmd PROC

; 9219 : {

$LN13:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@qpid_cmd:

; 9220 :     UNREFERENCED( cmdline );

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@qpid_cmd
$LN7@qpid_cmd:

; 9221 :     UNREFERENCED( argv );

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN7@qpid_cmd
$LN10@qpid_cmd:

; 9222 :     UNREFERENCED( argc );

  0001e	33 c0		 xor	 eax, eax
  00020	85 c0		 test	 eax, eax
  00022	75 fa		 jne	 SHORT $LN10@qpid_cmd

; 9223 : 
; 9224 :     if (argc != 1)

  00024	83 7c 24 50 01	 cmp	 DWORD PTR argc$[rsp], 1
  00029	74 4e		 je	 SHORT $LN11@qpid_cmd

; 9225 :     {
; 9226 :         // "Missing or invalid argument(s)"
; 9227 :         WRMSG( HHC17000, "E" );

  0002b	b9 01 00 00 00	 mov	 ecx, 1
  00030	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211845
  0003d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211846
  00049	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0004e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00053	41 b9 03 00 00
	00		 mov	 r9d, 3
  00059	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211847
  00060	ba 0b 24 00 00	 mov	 edx, 9227		; 0000240bH
  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211848
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9228 :         return -1;

  00072	b8 ff ff ff ff	 mov	 eax, -1
  00077	eb 57		 jmp	 SHORT $LN1@qpid_cmd
$LN11@qpid_cmd:

; 9229 :     }
; 9230 : 
; 9231 :     // "Process ID = %d"
; 9232 :     WRMSG( HHC17013, "I", sysblk.hercules_pid );

  00079	b9 01 00 00 00	 mov	 ecx, 1
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00084	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0008b	8b 49 6c	 mov	 ecx, DWORD PTR [rcx+108]
  0008e	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00092	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211849
  00099	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211850
  000a5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000aa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000af	41 b9 03 00 00
	00		 mov	 r9d, 3
  000b5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211851
  000bc	ba 10 24 00 00	 mov	 edx, 9232		; 00002410H
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211852
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9233 : 
; 9234 :     return 0;

  000ce	33 c0		 xor	 eax, eax
$LN1@qpid_cmd:

; 9235 : }

  000d0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d4	c3		 ret	 0
qpid_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
i$ = 80
pszVAL$ = 88
szPF$ = 96
__$ArrayPad$ = 104
argc$ = 128
argv$ = 136
cmdline$ = 144
qpfkeys_cmd PROC

; 9183 : {

$LN15:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 44 24 68	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@qpfkeys_cm:

; 9184 :     const char*  pszVAL;
; 9185 :     int          i;
; 9186 :     char         szPF[6];
; 9187 : 
; 9188 :     UNREFERENCED( cmdline );

  00021	33 c0		 xor	 eax, eax
  00023	85 c0		 test	 eax, eax
  00025	75 fa		 jne	 SHORT $LN4@qpfkeys_cm
$LN7@qpfkeys_cm:

; 9189 :     UNREFERENCED( argv );

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN7@qpfkeys_cm

; 9190 : 
; 9191 :     if (argc != 1)

  0002d	83 bc 24 80 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00035	74 51		 je	 SHORT $LN11@qpfkeys_cm

; 9192 :     {
; 9193 :         // "Missing or invalid argument(s)"
; 9194 :         WRMSG( HHC17000, "E" );

  00037	b9 01 00 00 00	 mov	 ecx, 1
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211815
  00049	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211816
  00055	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0005a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00065	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211817
  0006c	ba ea 23 00 00	 mov	 edx, 9194		; 000023eaH
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211818
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9195 :         return -1;

  0007e	b8 ff ff ff ff	 mov	 eax, -1
  00083	e9 cd 00 00 00	 jmp	 $LN1@qpfkeys_cm
$LN11@qpfkeys_cm:

; 9196 :     }
; 9197 : 
; 9198 : #if defined( _MSVC_ )
; 9199 :     for (i=1; i <= 48; i++)

  00088	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  00090	eb 0a		 jmp	 SHORT $LN10@qpfkeys_cm
$LN8@qpfkeys_cm:
  00092	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  00096	ff c0		 inc	 eax
  00098	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN10@qpfkeys_cm:
  0009c	83 7c 24 50 30	 cmp	 DWORD PTR i$[rsp], 48	; 00000030H
  000a1	0f 8f ac 00 00
	00		 jg	 $LN9@qpfkeys_cm

; 9200 : #else // *Nix
; 9201 :     for (i=1; i <= 20; i++)
; 9202 : #endif
; 9203 :     {
; 9204 :         MSGBUF( szPF, "PF%02d", i );                    // (name)

  000a7	44 8b 4c 24 50	 mov	 r9d, DWORD PTR i$[rsp]
  000ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211819
  000b3	ba 06 00 00 00	 mov	 edx, 6
  000b8	48 8d 4c 24 60	 lea	 rcx, QWORD PTR szPF$[rsp]
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 9205 :         if (!(pszVAL = get_symbol( szPF )) || !*pszVAL) // (value)

  000c3	48 8d 4c 24 60	 lea	 rcx, QWORD PTR szPF$[rsp]
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_get_symbol
  000ce	48 89 44 24 58	 mov	 QWORD PTR pszVAL$[rsp], rax
  000d3	48 83 7c 24 58
	00		 cmp	 QWORD PTR pszVAL$[rsp], 0
  000d9	74 0c		 je	 SHORT $LN13@qpfkeys_cm
  000db	48 8b 44 24 58	 mov	 rax, QWORD PTR pszVAL$[rsp]
  000e0	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000e3	85 c0		 test	 eax, eax
  000e5	75 0c		 jne	 SHORT $LN12@qpfkeys_cm
$LN13@qpfkeys_cm:

; 9206 :             pszVAL = "UNDEFINED";

  000e7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG211822
  000ee	48 89 44 24 58	 mov	 QWORD PTR pszVAL$[rsp], rax
$LN12@qpfkeys_cm:

; 9207 : 
; 9208 :         // "%.4s %s"
; 9209 :         WRMSG( HHC17199, "I", szPF, pszVAL );

  000f3	b9 01 00 00 00	 mov	 ecx, 1
  000f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000fe	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pszVAL$[rsp]
  00103	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00108	48 8d 4c 24 60	 lea	 rcx, QWORD PTR szPF$[rsp]
  0010d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00112	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211823
  00119	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0011e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211824
  00125	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0012a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0012f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00135	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211825
  0013c	ba f9 23 00 00	 mov	 edx, 9209		; 000023f9H
  00141	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211826
  00148	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9210 :     }

  0014e	e9 3f ff ff ff	 jmp	 $LN8@qpfkeys_cm
$LN9@qpfkeys_cm:

; 9211 : 
; 9212 :     return 0;

  00153	33 c0		 xor	 eax, eax
$LN1@qpfkeys_cm:

; 9213 : }

  00155	48 8b 4c 24 68	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0015a	48 33 cc	 xor	 rcx, rsp
  0015d	e8 00 00 00 00	 call	 __security_check_cookie
  00162	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00166	c3		 ret	 0
qpfkeys_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
cpu$ = 80
cpunum$ = 84
c$ = 88
regs$ = 96
tv170 = 104
tv207 = 108
tv69 = 112
tv138 = 120
buf$ = 128
__$ArrayPad$ = 144
argc$ = 176
argv$ = 184
cmdline$ = 192
qcpuid_cmd PROC

; 9104 : {

$LN27:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 9105 :     REGS* regs;
; 9106 :     int   cpu, cpunum = sysblk.pcpu;

  00027	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0002e	8b 80 54 13 00
	00		 mov	 eax, DWORD PTR [rax+4948]
  00034	89 44 24 54	 mov	 DWORD PTR cpunum$[rsp], eax
$LN4@qcpuid_cmd:

; 9107 :     char  buf[16];
; 9108 :     BYTE  c;
; 9109 : 
; 9110 :     UNREFERENCED( cmdline );

  00038	33 c0		 xor	 eax, eax
  0003a	85 c0		 test	 eax, eax
  0003c	75 fa		 jne	 SHORT $LN4@qcpuid_cmd
$LN7@qcpuid_cmd:

; 9111 :     UNREFERENCED( argv );

  0003e	33 c0		 xor	 eax, eax
  00040	85 c0		 test	 eax, eax
  00042	75 fa		 jne	 SHORT $LN7@qcpuid_cmd

; 9112 : 
; 9113 :     if (argc < 1 || argc > 2)

  00044	83 bc 24 b0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0004c	7c 0a		 jl	 SHORT $LN15@qcpuid_cmd
  0004e	83 bc 24 b0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00056	7e 75		 jle	 SHORT $LN14@qcpuid_cmd
$LN15@qcpuid_cmd:

; 9114 :     {
; 9115 :         // "Invalid command usage. Type 'help %s' for assistance."
; 9116 :         WRMSG( HHC02299, "E", argv[0] );

  00058	b8 08 00 00 00	 mov	 eax, 8
  0005d	48 6b c0 00	 imul	 rax, rax, 0
  00061	48 89 44 24 70	 mov	 QWORD PTR tv69[rsp], rax
  00066	b9 01 00 00 00	 mov	 ecx, 1
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00071	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00079	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv69[rsp]
  0007e	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00082	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211769
  0008e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211770
  0009a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0009f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a4	41 b9 03 00 00
	00		 mov	 r9d, 3
  000aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211771
  000b1	ba 9c 23 00 00	 mov	 edx, 9116		; 0000239cH
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211772
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9117 :         return -1;

  000c3	b8 ff ff ff ff	 mov	 eax, -1
  000c8	e9 57 03 00 00	 jmp	 $LN1@qcpuid_cmd
$LN14@qcpuid_cmd:

; 9118 :     }
; 9119 : 
; 9120 :     if (argc == 2)

  000cd	83 bc 24 b0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000d5	0f 85 1f 01 00
	00		 jne	 $LN16@qcpuid_cmd

; 9121 :     {
; 9122 :         if (strcasecmp( argv[1], "ALL" ) == 0)

  000db	b8 08 00 00 00	 mov	 eax, 8
  000e0	48 6b c0 01	 imul	 rax, rax, 1
  000e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG211776
  000eb	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000f3	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  000fd	85 c0		 test	 eax, eax
  000ff	75 0d		 jne	 SHORT $LN17@qcpuid_cmd

; 9123 :             cpunum = -1;

  00101	c7 44 24 54 ff
	ff ff ff	 mov	 DWORD PTR cpunum$[rsp], -1
  00109	e9 ec 00 00 00	 jmp	 $LN18@qcpuid_cmd
$LN17@qcpuid_cmd:

; 9124 :         else if (0
; 9125 :             || sscanf( argv[1], "%x%c", &cpunum, &c) != 1
; 9126 :             || cpunum < 0
; 9127 :             || cpunum >= sysblk.hicpu
; 9128 :             || !IS_CPU_ONLINE( cpunum )

  0010e	33 c0		 xor	 eax, eax
  00110	85 c0		 test	 eax, eax
  00112	75 65		 jne	 SHORT $LN20@qcpuid_cmd
  00114	b8 08 00 00 00	 mov	 eax, 8
  00119	48 6b c0 01	 imul	 rax, rax, 1
  0011d	4c 8d 4c 24 58	 lea	 r9, QWORD PTR c$[rsp]
  00122	4c 8d 44 24 54	 lea	 r8, QWORD PTR cpunum$[rsp]
  00127	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG211779
  0012e	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00136	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0013a	e8 00 00 00 00	 call	 sscanf
  0013f	83 f8 01	 cmp	 eax, 1
  00142	75 35		 jne	 SHORT $LN20@qcpuid_cmd
  00144	83 7c 24 54 00	 cmp	 DWORD PTR cpunum$[rsp], 0
  00149	7c 2e		 jl	 SHORT $LN20@qcpuid_cmd
  0014b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00152	8b 80 08 01 00
	00		 mov	 eax, DWORD PTR [rax+264]
  00158	39 44 24 54	 cmp	 DWORD PTR cpunum$[rsp], eax
  0015c	7d 1b		 jge	 SHORT $LN20@qcpuid_cmd
  0015e	48 63 44 24 54	 movsxd	 rax, DWORD PTR cpunum$[rsp]
  00163	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0016a	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00173	0f 85 81 00 00
	00		 jne	 $LN19@qcpuid_cmd
$LN20@qcpuid_cmd:

; 9129 :         )
; 9130 :         {
; 9131 :             // "Invalid argument %s%s"
; 9132 :             WRMSG( HHC02205, "E", argv[1], ": target processor is invalid" );

  00179	b8 08 00 00 00	 mov	 eax, 8
  0017e	48 6b c0 01	 imul	 rax, rax, 1
  00182	48 89 44 24 78	 mov	 QWORD PTR tv138[rsp], rax
  00187	b9 01 00 00 00	 mov	 ecx, 1
  0018c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211780
  00199	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0019e	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001a6	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv138[rsp]
  001ab	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001af	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211781
  001bb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211782
  001c7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001cc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001d1	41 b9 03 00 00
	00		 mov	 r9d, 3
  001d7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211783
  001de	ba ac 23 00 00	 mov	 edx, 9132		; 000023acH
  001e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211784
  001ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9133 :             return -1;

  001f0	b8 ff ff ff ff	 mov	 eax, -1
  001f5	e9 2a 02 00 00	 jmp	 $LN1@qcpuid_cmd
$LN19@qcpuid_cmd:
$LN18@qcpuid_cmd:
$LN16@qcpuid_cmd:

; 9134 :         }
; 9135 :     }
; 9136 : 
; 9137 :     /* Show 'CPUID' from SYSBLK */
; 9138 :     qcpuid_cpuid( sysblk.cpuid, "SYSBLK" );

  001fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG211785
  00201	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00208	48 8b 88 c8 00
	00 00		 mov	 rcx, QWORD PTR [rax+200]
  0020f	e8 00 00 00 00	 call	 qcpuid_cpuid

; 9139 : 
; 9140 :     /* Show 'CPUID' from REGS */
; 9141 :     for (cpu=0; cpu < sysblk.hicpu; cpu++)

  00214	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR cpu$[rsp], 0
  0021c	eb 0a		 jmp	 SHORT $LN10@qcpuid_cmd
$LN8@qcpuid_cmd:
  0021e	8b 44 24 50	 mov	 eax, DWORD PTR cpu$[rsp]
  00222	ff c0		 inc	 eax
  00224	89 44 24 50	 mov	 DWORD PTR cpu$[rsp], eax
$LN10@qcpuid_cmd:
  00228	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0022f	8b 80 08 01 00
	00		 mov	 eax, DWORD PTR [rax+264]
  00235	39 44 24 50	 cmp	 DWORD PTR cpu$[rsp], eax
  00239	0f 8d c5 00 00
	00		 jge	 $LN9@qcpuid_cmd

; 9142 :     {
; 9143 :         if (1
; 9144 :             && IS_CPU_ONLINE( cpu )
; 9145 :             && (cpunum < 0 || cpu == cpunum)

  0023f	33 c0		 xor	 eax, eax
  00241	83 f8 01	 cmp	 eax, 1
  00244	0f 84 b5 00 00
	00		 je	 $LN21@qcpuid_cmd
  0024a	48 63 44 24 50	 movsxd	 rax, DWORD PTR cpu$[rsp]
  0024f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00256	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  0025f	0f 84 9a 00 00
	00		 je	 $LN21@qcpuid_cmd
  00265	83 7c 24 54 00	 cmp	 DWORD PTR cpunum$[rsp], 0
  0026a	7c 0e		 jl	 SHORT $LN22@qcpuid_cmd
  0026c	8b 44 24 54	 mov	 eax, DWORD PTR cpunum$[rsp]
  00270	39 44 24 50	 cmp	 DWORD PTR cpu$[rsp], eax
  00274	0f 85 85 00 00
	00		 jne	 $LN21@qcpuid_cmd
$LN22@qcpuid_cmd:

; 9146 :         )
; 9147 :         {
; 9148 :             regs = sysblk.regs[ cpu ];

  0027a	48 63 44 24 50	 movsxd	 rax, DWORD PTR cpu$[rsp]
  0027f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00286	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0028e	48 89 44 24 60	 mov	 QWORD PTR regs$[rsp], rax

; 9149 :             MSGBUF( buf, "%s%02X",

  00293	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  00298	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  0029f	89 44 24 68	 mov	 DWORD PTR tv170[rsp], eax
  002a3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  002a8	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  002af	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  002b6	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  002be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  002c4	8b 4c 24 68	 mov	 ecx, DWORD PTR tv170[rsp]
  002c8	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  002cc	4c 8b c8	 mov	 r9, rax
  002cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211788
  002d6	ba 10 00 00 00	 mov	 edx, 16
  002db	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  002e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 9150 :                 PTYPSTR( regs->cpuad ), regs->cpuad );
; 9151 :             qcpuid_cpuid( regs->cpuid, buf );

  002e9	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  002f1	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  002f6	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  002fa	e8 00 00 00 00	 call	 qcpuid_cpuid
$LN21@qcpuid_cmd:

; 9152 :         }
; 9153 :     }

  002ff	e9 1a ff ff ff	 jmp	 $LN8@qcpuid_cmd
$LN9@qcpuid_cmd:

; 9154 : 
; 9155 :     if (ARCH_370_IDX != sysblk.arch_mode)

  00304	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0030b	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [rax+136], 0
  00312	0f 84 0a 01 00
	00		 je	 $LN23@qcpuid_cmd

; 9156 :     {
; 9157 :         /* Show 'CPC SI' information from SYSBLK */
; 9158 :         qcpuid_cpcsi( sysblk.cpuid, "SYSBLK" );

  00318	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG211790
  0031f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00326	48 8b 88 c8 00
	00 00		 mov	 rcx, QWORD PTR [rax+200]
  0032d	e8 00 00 00 00	 call	 qcpuid_cpcsi

; 9159 : 
; 9160 :         /* Show 'CPC SI' information from REGS */
; 9161 :         for (cpu=0; cpu < sysblk.hicpu; cpu++)

  00332	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR cpu$[rsp], 0
  0033a	eb 0a		 jmp	 SHORT $LN13@qcpuid_cmd
$LN11@qcpuid_cmd:
  0033c	8b 44 24 50	 mov	 eax, DWORD PTR cpu$[rsp]
  00340	ff c0		 inc	 eax
  00342	89 44 24 50	 mov	 DWORD PTR cpu$[rsp], eax
$LN13@qcpuid_cmd:
  00346	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0034d	8b 80 08 01 00
	00		 mov	 eax, DWORD PTR [rax+264]
  00353	39 44 24 50	 cmp	 DWORD PTR cpu$[rsp], eax
  00357	0f 8d c5 00 00
	00		 jge	 $LN12@qcpuid_cmd

; 9162 :         {
; 9163 :             if (1
; 9164 :                 && IS_CPU_ONLINE( cpu )
; 9165 :                 && (cpunum < 0 || cpu == cpunum)

  0035d	33 c0		 xor	 eax, eax
  0035f	83 f8 01	 cmp	 eax, 1
  00362	0f 84 b5 00 00
	00		 je	 $LN24@qcpuid_cmd
  00368	48 63 44 24 50	 movsxd	 rax, DWORD PTR cpu$[rsp]
  0036d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00374	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  0037d	0f 84 9a 00 00
	00		 je	 $LN24@qcpuid_cmd
  00383	83 7c 24 54 00	 cmp	 DWORD PTR cpunum$[rsp], 0
  00388	7c 0e		 jl	 SHORT $LN25@qcpuid_cmd
  0038a	8b 44 24 54	 mov	 eax, DWORD PTR cpunum$[rsp]
  0038e	39 44 24 50	 cmp	 DWORD PTR cpu$[rsp], eax
  00392	0f 85 85 00 00
	00		 jne	 $LN24@qcpuid_cmd
$LN25@qcpuid_cmd:

; 9166 :             )
; 9167 :             {
; 9168 :                 regs = sysblk.regs[ cpu ];

  00398	48 63 44 24 50	 movsxd	 rax, DWORD PTR cpu$[rsp]
  0039d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  003a4	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  003ac	48 89 44 24 60	 mov	 QWORD PTR regs$[rsp], rax

; 9169 :                 MSGBUF( buf, "%s%02X",

  003b1	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  003b6	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  003bd	89 44 24 6c	 mov	 DWORD PTR tv207[rsp], eax
  003c1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  003c6	0f b7 89 3c 08
	00 00		 movzx	 ecx, WORD PTR [rcx+2108]
  003cd	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  003d4	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  003dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  003e2	8b 4c 24 6c	 mov	 ecx, DWORD PTR tv207[rsp]
  003e6	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  003ea	4c 8b c8	 mov	 r9, rax
  003ed	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211793
  003f4	ba 10 00 00 00	 mov	 edx, 16
  003f9	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00401	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 9170 :                     PTYPSTR( regs->cpuad ), regs->cpuad );
; 9171 :                 qcpuid_cpcsi( regs->cpuid, buf );

  00407	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  0040f	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  00414	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00418	e8 00 00 00 00	 call	 qcpuid_cpcsi
$LN24@qcpuid_cmd:

; 9172 :             }
; 9173 :         }

  0041d	e9 1a ff ff ff	 jmp	 $LN11@qcpuid_cmd
$LN12@qcpuid_cmd:
$LN23@qcpuid_cmd:

; 9174 :     }
; 9175 : 
; 9176 :     return 0;

  00422	33 c0		 xor	 eax, eax
$LN1@qcpuid_cmd:

; 9177 : }

  00424	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0042c	48 33 cc	 xor	 rcx, rsp
  0042f	e8 00 00 00 00	 call	 __security_check_cookie
  00434	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0043b	c3		 ret	 0
qcpuid_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
machinetype$ = 112
tv81 = 116
$T1 = 120
tv75 = 128
tv77 = 136
tv79 = 144
seqc$ = 152
__$ArrayPad$ = 176
cpuid$ = 208
source$ = 216
qcpuid_cpcsi PROC

; 9087 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 9088 :     U16   machinetype = (cpuid >> 16) & 0xFFFF;

  00023	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR cpuid$[rsp]
  0002b	48 c1 e8 10	 shr	 rax, 16
  0002f	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  00035	66 89 44 24 70	 mov	 WORD PTR machinetype$[rsp], ax

; 9089 :     BYTE  seqc[16+1];
; 9090 : 
; 9091 :     bld_sysib_sequence( seqc );

  0003a	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR seqc$[rsp]
  00042	e8 00 00 00 00	 call	 bld_sysib_sequence

; 9092 :     buf_guest_to_host( seqc, seqc, 16 );

  00047	41 b8 10 00 00
	00		 mov	 r8d, 16
  0004d	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR seqc$[rsp]
  00055	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR seqc$[rsp]
  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_buf_guest_to_host

; 9093 :     seqc[16] = 0;

  00063	b8 01 00 00 00	 mov	 eax, 1
  00068	48 6b c0 10	 imul	 rax, rax, 16
  0006c	48 89 44 24 78	 mov	 QWORD PTR $T1[rsp], rax
  00071	48 83 7c 24 78
	11		 cmp	 QWORD PTR $T1[rsp], 17
  00077	73 02		 jae	 SHORT $LN3@qcpuid_cpc
  00079	eb 05		 jmp	 SHORT $LN4@qcpuid_cpc
$LN3@qcpuid_cpc:
  0007b	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN4@qcpuid_cpc:
  00080	48 8b 44 24 78	 mov	 rax, QWORD PTR $T1[rsp]
  00085	c6 84 04 98 00
	00 00 00	 mov	 BYTE PTR seqc$[rsp+rax], 0

; 9094 : 
; 9095 :     // "%-6s: CPC SI = %4.4X.%s.%s.%s.%s"
; 9096 :     WRMSG( HHC17005, "I",  source, machinetype,

  0008d	e8 00 00 00 00	 call	 str_plant
  00092	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv75[rsp], rax
  0009a	e8 00 00 00 00	 call	 str_manufacturer
  0009f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv77[rsp], rax
  000a7	e8 00 00 00 00	 call	 str_modelcapa
  000ac	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv79[rsp], rax
  000b4	0f b7 4c 24 70	 movzx	 ecx, WORD PTR machinetype$[rsp]
  000b9	89 4c 24 74	 mov	 DWORD PTR tv81[rsp], ecx
  000bd	b9 01 00 00 00	 mov	 ecx, 1
  000c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000c8	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR seqc$[rsp]
  000d0	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  000d5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv75[rsp]
  000dd	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  000e2	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv77[rsp]
  000ea	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  000ef	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv79[rsp]
  000f7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000fc	8b 4c 24 74	 mov	 ecx, DWORD PTR tv81[rsp]
  00100	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00104	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR source$[rsp]
  0010c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00111	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211735
  00118	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211736
  00124	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00129	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0012e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00134	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211737
  0013b	ba 89 23 00 00	 mov	 edx, 9097		; 00002389H
  00140	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211738
  00147	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN2@qcpuid_cpc:

; 9097 :         str_modelcapa(), str_manufacturer(), str_plant(), seqc );
; 9098 : }

  0014d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00155	48 33 cc	 xor	 rcx, rsp
  00158	e8 00 00 00 00	 call	 __security_check_cookie
  0015d	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00164	c3		 ret	 0
qcpuid_cpcsi ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
cpuid$ = 96
source$ = 104
qcpuid_cpuid PROC

; 9081 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 9082 :     // "%-6s: CPUID  = %16.16"PRIX64
; 9083 :     WRMSG( HHC17004, "I",  source, cpuid );

  0000e	b9 01 00 00 00	 mov	 ecx, 1
  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00019	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cpuid$[rsp]
  0001e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00023	48 8b 4c 24 68	 mov	 rcx, QWORD PTR source$[rsp]
  00028	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211722
  00034	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211723
  00040	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00045	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00050	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211724
  00057	ba 7b 23 00 00	 mov	 edx, 9083		; 0000237bH
  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211725
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9084 : }

  00069	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0006d	c3		 ret	 0
qcpuid_cpuid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
msglvl$1 = 80
i$2 = 84
tv224 = 88
tv298 = 96
upperarg$3 = 104
msgbuf$ = 128
__$ArrayPad$ = 192
argc$ = 224
argv$ = 232
cmdline$ = 240
msglevel_cmd PROC

; 8993 : {

$LN35:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 81 ec d0 00
	00 00		 sub	 rsp, 208		; 000000d0H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 8994 :     char msgbuf[64] = {0};

  00028	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR msgbuf$[rsp]
  00030	48 8b f8	 mov	 rdi, rax
  00033	33 c0		 xor	 eax, eax
  00035	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0003a	f3 aa		 rep stosb
$LN4@msglevel_c:

; 8995 : 
; 8996 :     UNREFERENCED( cmdline );

  0003c	33 c0		 xor	 eax, eax
  0003e	85 c0		 test	 eax, eax
  00040	75 fa		 jne	 SHORT $LN4@msglevel_c

; 8997 : 
; 8998 :     if ( argc < 1 )

  00042	83 bc 24 e0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0004a	7d 51		 jge	 SHORT $LN8@msglevel_c

; 8999 :     {
; 9000 :         // "Missing or invalid argument(s)"
; 9001 :         WRMSG( HHC17000, "E" );

  0004c	b9 01 00 00 00	 mov	 ecx, 1
  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211654
  0005e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211655
  0006a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0006f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00074	41 b9 03 00 00
	00		 mov	 r9d, 3
  0007a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211656
  00081	ba 29 23 00 00	 mov	 edx, 9001		; 00002329H
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211657
  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9002 :         return -1;

  00093	b8 ff ff ff ff	 mov	 eax, -1
  00098	e9 b8 04 00 00	 jmp	 $LN1@msglevel_c
$LN8@msglevel_c:

; 9003 :     }
; 9004 : 
; 9005 :     if ( argc > 1 )

  0009d	83 bc 24 e0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  000a5	0f 8e 57 03 00
	00		 jle	 $LN9@msglevel_c

; 9006 :     {
; 9007 :         char upperarg[16];
; 9008 :         int  msglvl = sysblk.msglvl;

  000ab	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000b2	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  000b8	89 44 24 50	 mov	 DWORD PTR msglvl$1[rsp], eax

; 9009 :         int  i;
; 9010 : 
; 9011 :         for (i=1; i < argc; i++)

  000bc	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR i$2[rsp], 1
  000c4	eb 0a		 jmp	 SHORT $LN7@msglevel_c
$LN5@msglevel_c:
  000c6	8b 44 24 54	 mov	 eax, DWORD PTR i$2[rsp]
  000ca	ff c0		 inc	 eax
  000cc	89 44 24 54	 mov	 DWORD PTR i$2[rsp], eax
$LN7@msglevel_c:
  000d0	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  000d7	39 44 24 54	 cmp	 DWORD PTR i$2[rsp], eax
  000db	0f 8d 21 03 00
	00		 jge	 $LN6@msglevel_c

; 9012 :         {
; 9013 :             strnupper( upperarg, argv[i], sizeof( upperarg ));

  000e1	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$2[rsp]
  000e6	41 b8 10 00 00
	00		 mov	 r8d, 16
  000ec	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000f4	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  000f8	48 8d 4c 24 68	 lea	 rcx, QWORD PTR upperarg$3[rsp]
  000fd	e8 00 00 00 00	 call	 strnupper

; 9014 : 
; 9015 :             if (0
; 9016 :                 || strabbrev(  "VERBOSE", upperarg, 1 )
; 9017 :                 || strabbrev( "+VERBOSE", upperarg, 2 )
; 9018 :                 || strabbrev( "-TERSE",   upperarg, 2 )

  00102	33 c0		 xor	 eax, eax
  00104	85 c0		 test	 eax, eax
  00106	75 51		 jne	 SHORT $LN12@msglevel_c
  00108	41 b8 01 00 00
	00		 mov	 r8d, 1
  0010e	48 8d 54 24 68	 lea	 rdx, QWORD PTR upperarg$3[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211662
  0011a	e8 00 00 00 00	 call	 strabbrev
  0011f	85 c0		 test	 eax, eax
  00121	75 36		 jne	 SHORT $LN12@msglevel_c
  00123	41 b8 02 00 00
	00		 mov	 r8d, 2
  00129	48 8d 54 24 68	 lea	 rdx, QWORD PTR upperarg$3[rsp]
  0012e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211663
  00135	e8 00 00 00 00	 call	 strabbrev
  0013a	85 c0		 test	 eax, eax
  0013c	75 1b		 jne	 SHORT $LN12@msglevel_c
  0013e	41 b8 02 00 00
	00		 mov	 r8d, 2
  00144	48 8d 54 24 68	 lea	 rdx, QWORD PTR upperarg$3[rsp]
  00149	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211664
  00150	e8 00 00 00 00	 call	 strabbrev
  00155	85 c0		 test	 eax, eax
  00157	74 11		 je	 SHORT $LN10@msglevel_c
$LN12@msglevel_c:

; 9019 :             )
; 9020 :                 msglvl |= MLVL_VERBOSE;

  00159	8b 44 24 50	 mov	 eax, DWORD PTR msglvl$1[rsp]
  0015d	0f ba e8 1f	 bts	 eax, 31
  00161	89 44 24 50	 mov	 DWORD PTR msglvl$1[rsp], eax
  00165	e9 82 02 00 00	 jmp	 $LN11@msglevel_c
$LN10@msglevel_c:

; 9021 :             else
; 9022 :             if (0
; 9023 :                 || strabbrev(  "TERSE",   upperarg, 1 )
; 9024 :                 || strabbrev( "+TERSE",   upperarg, 2 )
; 9025 :                 || strabbrev( "-VERBOSE", upperarg, 2 )

  0016a	33 c0		 xor	 eax, eax
  0016c	85 c0		 test	 eax, eax
  0016e	75 51		 jne	 SHORT $LN15@msglevel_c
  00170	41 b8 01 00 00
	00		 mov	 r8d, 1
  00176	48 8d 54 24 68	 lea	 rdx, QWORD PTR upperarg$3[rsp]
  0017b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211668
  00182	e8 00 00 00 00	 call	 strabbrev
  00187	85 c0		 test	 eax, eax
  00189	75 36		 jne	 SHORT $LN15@msglevel_c
  0018b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00191	48 8d 54 24 68	 lea	 rdx, QWORD PTR upperarg$3[rsp]
  00196	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211669
  0019d	e8 00 00 00 00	 call	 strabbrev
  001a2	85 c0		 test	 eax, eax
  001a4	75 1b		 jne	 SHORT $LN15@msglevel_c
  001a6	41 b8 02 00 00
	00		 mov	 r8d, 2
  001ac	48 8d 54 24 68	 lea	 rdx, QWORD PTR upperarg$3[rsp]
  001b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211670
  001b8	e8 00 00 00 00	 call	 strabbrev
  001bd	85 c0		 test	 eax, eax
  001bf	74 11		 je	 SHORT $LN13@msglevel_c
$LN15@msglevel_c:

; 9026 :             )
; 9027 :                 msglvl &= ~MLVL_VERBOSE;

  001c1	8b 44 24 50	 mov	 eax, DWORD PTR msglvl$1[rsp]
  001c5	0f ba f0 1f	 btr	 eax, 31
  001c9	89 44 24 50	 mov	 DWORD PTR msglvl$1[rsp], eax
  001cd	e9 1a 02 00 00	 jmp	 $LN14@msglevel_c
$LN13@msglevel_c:

; 9028 :             else
; 9029 :             if (0
; 9030 :                 || strabbrev(    "DEBUG", upperarg, 1 )
; 9031 :                 || strabbrev(   "+DEBUG", upperarg, 2 )
; 9032 :                 || strabbrev( "-NODEBUG", upperarg, 2 )

  001d2	33 c0		 xor	 eax, eax
  001d4	85 c0		 test	 eax, eax
  001d6	75 51		 jne	 SHORT $LN18@msglevel_c
  001d8	41 b8 01 00 00
	00		 mov	 r8d, 1
  001de	48 8d 54 24 68	 lea	 rdx, QWORD PTR upperarg$3[rsp]
  001e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211674
  001ea	e8 00 00 00 00	 call	 strabbrev
  001ef	85 c0		 test	 eax, eax
  001f1	75 36		 jne	 SHORT $LN18@msglevel_c
  001f3	41 b8 02 00 00
	00		 mov	 r8d, 2
  001f9	48 8d 54 24 68	 lea	 rdx, QWORD PTR upperarg$3[rsp]
  001fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211675
  00205	e8 00 00 00 00	 call	 strabbrev
  0020a	85 c0		 test	 eax, eax
  0020c	75 1b		 jne	 SHORT $LN18@msglevel_c
  0020e	41 b8 02 00 00
	00		 mov	 r8d, 2
  00214	48 8d 54 24 68	 lea	 rdx, QWORD PTR upperarg$3[rsp]
  00219	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211676
  00220	e8 00 00 00 00	 call	 strabbrev
  00225	85 c0		 test	 eax, eax
  00227	74 11		 je	 SHORT $LN16@msglevel_c
$LN18@msglevel_c:

; 9033 :             )
; 9034 :                 msglvl |= MLVL_DEBUG;

  00229	8b 44 24 50	 mov	 eax, DWORD PTR msglvl$1[rsp]
  0022d	0f ba e8 1e	 bts	 eax, 30
  00231	89 44 24 50	 mov	 DWORD PTR msglvl$1[rsp], eax
  00235	e9 b2 01 00 00	 jmp	 $LN17@msglevel_c
$LN16@msglevel_c:

; 9035 :             else
; 9036 :             if (0
; 9037 :                 || strabbrev(  "NODEBUG", upperarg, 1 )
; 9038 :                 || strabbrev( "+NODEBUG", upperarg, 1 )
; 9039 :                 || strabbrev(   "-DEBUG", upperarg, 2 )

  0023a	33 c0		 xor	 eax, eax
  0023c	85 c0		 test	 eax, eax
  0023e	75 51		 jne	 SHORT $LN21@msglevel_c
  00240	41 b8 01 00 00
	00		 mov	 r8d, 1
  00246	48 8d 54 24 68	 lea	 rdx, QWORD PTR upperarg$3[rsp]
  0024b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211680
  00252	e8 00 00 00 00	 call	 strabbrev
  00257	85 c0		 test	 eax, eax
  00259	75 36		 jne	 SHORT $LN21@msglevel_c
  0025b	41 b8 01 00 00
	00		 mov	 r8d, 1
  00261	48 8d 54 24 68	 lea	 rdx, QWORD PTR upperarg$3[rsp]
  00266	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211681
  0026d	e8 00 00 00 00	 call	 strabbrev
  00272	85 c0		 test	 eax, eax
  00274	75 1b		 jne	 SHORT $LN21@msglevel_c
  00276	41 b8 02 00 00
	00		 mov	 r8d, 2
  0027c	48 8d 54 24 68	 lea	 rdx, QWORD PTR upperarg$3[rsp]
  00281	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211682
  00288	e8 00 00 00 00	 call	 strabbrev
  0028d	85 c0		 test	 eax, eax
  0028f	74 11		 je	 SHORT $LN19@msglevel_c
$LN21@msglevel_c:

; 9040 :             )
; 9041 :                 msglvl &= ~MLVL_DEBUG;

  00291	8b 44 24 50	 mov	 eax, DWORD PTR msglvl$1[rsp]
  00295	0f ba f0 1e	 btr	 eax, 30
  00299	89 44 24 50	 mov	 DWORD PTR msglvl$1[rsp], eax
  0029d	e9 4a 01 00 00	 jmp	 $LN20@msglevel_c
$LN19@msglevel_c:

; 9042 :             else
; 9043 :             if (0
; 9044 :                 || strabbrev(    "EMSGLOC", upperarg, 1 )
; 9045 :                 || strabbrev(   "+EMSGLOC", upperarg, 2 )
; 9046 :                 || strabbrev( "-NOEMSGLOC", upperarg, 2 )

  002a2	33 c0		 xor	 eax, eax
  002a4	85 c0		 test	 eax, eax
  002a6	75 51		 jne	 SHORT $LN24@msglevel_c
  002a8	41 b8 01 00 00
	00		 mov	 r8d, 1
  002ae	48 8d 54 24 68	 lea	 rdx, QWORD PTR upperarg$3[rsp]
  002b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211686
  002ba	e8 00 00 00 00	 call	 strabbrev
  002bf	85 c0		 test	 eax, eax
  002c1	75 36		 jne	 SHORT $LN24@msglevel_c
  002c3	41 b8 02 00 00
	00		 mov	 r8d, 2
  002c9	48 8d 54 24 68	 lea	 rdx, QWORD PTR upperarg$3[rsp]
  002ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211687
  002d5	e8 00 00 00 00	 call	 strabbrev
  002da	85 c0		 test	 eax, eax
  002dc	75 1b		 jne	 SHORT $LN24@msglevel_c
  002de	41 b8 02 00 00
	00		 mov	 r8d, 2
  002e4	48 8d 54 24 68	 lea	 rdx, QWORD PTR upperarg$3[rsp]
  002e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211688
  002f0	e8 00 00 00 00	 call	 strabbrev
  002f5	85 c0		 test	 eax, eax
  002f7	74 11		 je	 SHORT $LN22@msglevel_c
$LN24@msglevel_c:

; 9047 :             )
; 9048 :                 msglvl |= MLVL_EMSGLOC;

  002f9	8b 44 24 50	 mov	 eax, DWORD PTR msglvl$1[rsp]
  002fd	0f ba e8 1d	 bts	 eax, 29
  00301	89 44 24 50	 mov	 DWORD PTR msglvl$1[rsp], eax
  00305	e9 e2 00 00 00	 jmp	 $LN23@msglevel_c
$LN22@msglevel_c:

; 9049 :             else
; 9050 :             if (0
; 9051 :                 || strabbrev(  "NOEMSGLOC", upperarg, 1 )
; 9052 :                 || strabbrev( "+NOEMSGLOC", upperarg, 2 )
; 9053 :                 || strabbrev(   "-EMSGLOC", upperarg, 2 )

  0030a	33 c0		 xor	 eax, eax
  0030c	85 c0		 test	 eax, eax
  0030e	75 51		 jne	 SHORT $LN27@msglevel_c
  00310	41 b8 01 00 00
	00		 mov	 r8d, 1
  00316	48 8d 54 24 68	 lea	 rdx, QWORD PTR upperarg$3[rsp]
  0031b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211692
  00322	e8 00 00 00 00	 call	 strabbrev
  00327	85 c0		 test	 eax, eax
  00329	75 36		 jne	 SHORT $LN27@msglevel_c
  0032b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00331	48 8d 54 24 68	 lea	 rdx, QWORD PTR upperarg$3[rsp]
  00336	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211693
  0033d	e8 00 00 00 00	 call	 strabbrev
  00342	85 c0		 test	 eax, eax
  00344	75 1b		 jne	 SHORT $LN27@msglevel_c
  00346	41 b8 02 00 00
	00		 mov	 r8d, 2
  0034c	48 8d 54 24 68	 lea	 rdx, QWORD PTR upperarg$3[rsp]
  00351	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211694
  00358	e8 00 00 00 00	 call	 strabbrev
  0035d	85 c0		 test	 eax, eax
  0035f	74 0e		 je	 SHORT $LN25@msglevel_c
$LN27@msglevel_c:

; 9054 :             )
; 9055 :                 msglvl &= ~MLVL_EMSGLOC;

  00361	8b 44 24 50	 mov	 eax, DWORD PTR msglvl$1[rsp]
  00365	0f ba f0 1d	 btr	 eax, 29
  00369	89 44 24 50	 mov	 DWORD PTR msglvl$1[rsp], eax
  0036d	eb 7d		 jmp	 SHORT $LN26@msglevel_c
$LN25@msglevel_c:

; 9056 :             else
; 9057 :             {
; 9058 :                 WRMSG( HHC02205, "E", argv[i], "" );

  0036f	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$2[rsp]
  00374	48 89 44 24 58	 mov	 QWORD PTR tv224[rsp], rax
  00379	b9 01 00 00 00	 mov	 ecx, 1
  0037e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00384	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211695
  0038b	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00390	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00398	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv224[rsp]
  0039d	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  003a1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211696
  003ad	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211697
  003b9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003be	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003c3	41 b9 03 00 00
	00		 mov	 r9d, 3
  003c9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211698
  003d0	ba 62 23 00 00	 mov	 edx, 9058		; 00002362H
  003d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211699
  003dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9059 :                 return -1;

  003e2	b8 ff ff ff ff	 mov	 eax, -1
  003e7	e9 69 01 00 00	 jmp	 $LN1@msglevel_c
$LN26@msglevel_c:
$LN23@msglevel_c:
$LN20@msglevel_c:
$LN17@msglevel_c:
$LN14@msglevel_c:
$LN11@msglevel_c:

; 9060 :             }
; 9061 :             sysblk.msglvl = msglvl;

  003ec	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  003f3	8b 4c 24 50	 mov	 ecx, DWORD PTR msglvl$1[rsp]
  003f7	89 88 80 75 01
	00		 mov	 DWORD PTR [rax+95616], ecx

; 9062 :         }

  003fd	e9 c4 fc ff ff	 jmp	 $LN5@msglevel_c
$LN6@msglevel_c:
$LN9@msglevel_c:

; 9063 :     }
; 9064 : 
; 9065 :     if (MLVL( VERBOSE )) STRLCAT( msgbuf, " verbose"   );

  00402	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00409	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  0040f	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00414	85 c0		 test	 eax, eax
  00416	74 1d		 je	 SHORT $LN28@msglevel_c
  00418	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0041e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG211702
  00425	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0042d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
  00433	eb 1b		 jmp	 SHORT $LN29@msglevel_c
$LN28@msglevel_c:

; 9066 :     else                 STRLCAT( msgbuf, " terse"     );

  00435	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0043b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG211703
  00442	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0044a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN29@msglevel_c:

; 9067 :     if (MLVL( DEBUG   )) STRLCAT( msgbuf, " debug"     );

  00450	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00457	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  0045d	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00462	85 c0		 test	 eax, eax
  00464	74 1d		 je	 SHORT $LN30@msglevel_c
  00466	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0046c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG211706
  00473	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0047b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
  00481	eb 1b		 jmp	 SHORT $LN31@msglevel_c
$LN30@msglevel_c:

; 9068 :     else                 STRLCAT( msgbuf, " nodebug"   );

  00483	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00489	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG211707
  00490	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00498	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN31@msglevel_c:

; 9069 :     if (MLVL( EMSGLOC )) STRLCAT( msgbuf, " emsgloc"   );

  0049e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  004a5	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  004ab	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  004b0	85 c0		 test	 eax, eax
  004b2	74 1d		 je	 SHORT $LN32@msglevel_c
  004b4	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  004ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG211710
  004c1	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  004c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
  004cf	eb 1b		 jmp	 SHORT $LN33@msglevel_c
$LN32@msglevel_c:

; 9070 :     else                 STRLCAT( msgbuf, " noemsgloc" );

  004d1	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  004d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG211711
  004de	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  004e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN33@msglevel_c:

; 9071 : 
; 9072 :     WRMSG( HHC17012, "I", &msgbuf[1] );

  004ec	b8 01 00 00 00	 mov	 eax, 1
  004f1	48 6b c0 01	 imul	 rax, rax, 1
  004f5	48 8d 84 04 80
	00 00 00	 lea	 rax, QWORD PTR msgbuf$[rsp+rax]
  004fd	48 89 44 24 60	 mov	 QWORD PTR tv298[rsp], rax
  00502	b9 01 00 00 00	 mov	 ecx, 1
  00507	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0050d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv298[rsp]
  00512	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00517	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211712
  0051e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00523	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211713
  0052a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0052f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00534	41 b9 03 00 00
	00		 mov	 r9d, 3
  0053a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211714
  00541	ba 70 23 00 00	 mov	 edx, 9072		; 00002370H
  00546	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211715
  0054d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9073 : 
; 9074 :     return 0;

  00553	33 c0		 xor	 eax, eax
$LN1@msglevel_c:

; 9075 : }

  00555	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0055d	48 33 cc	 xor	 rcx, rsp
  00560	e8 00 00 00 00	 call	 __security_check_cookie
  00565	48 81 c4 d0 00
	00 00		 add	 rsp, 208		; 000000d0H
  0056c	5f		 pop	 rdi
  0056d	c3		 ret	 0
msglevel_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
sfd$ = 80
idle$ = 84
intv$ = 88
cnt$ = 92
rc$ = 96
tv130 = 104
tv147 = 112
tv171 = 120
tv202 = 128
buf$ = 136
__$ArrayPad$ = 176
argc$ = 208
argv$ = 216
cmdline$ = 224
conkpalv_cmd PROC

; 8878 : {

$LN21:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@conkpalv_c:

; 8879 : #if !defined( HAVE_BASIC_KEEPALIVE )
; 8880 : 
; 8881 :     UNREFERENCED( argc );
; 8882 :     UNREFERENCED( argv );
; 8883 :     UNREFERENCED( cmdline );
; 8884 : 
; 8885 :     // "This build of Hercules does not support TCP keepalive"
; 8886 :     WRMSG( HHC02321, "E" );
; 8887 :     return -1;
; 8888 : 
; 8889 : #else // basic, partial or full: must attempt setting keepalive
; 8890 : 
; 8891 :     char buf[40];
; 8892 :     int rc, sfd, idle, intv, cnt;
; 8893 : 
; 8894 :     UNREFERENCED( cmdline );

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@conkpalv_c
$LN7@conkpalv_c:

; 8895 : 
; 8896 :     UPPER_ARGV_0( argv );

  0002d	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00036	74 47		 je	 SHORT $LN8@conkpalv_c
  00038	b8 08 00 00 00	 mov	 eax, 8
  0003d	48 6b c0 00	 imul	 rax, rax, 0
  00041	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00049	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0004e	74 2f		 je	 SHORT $LN8@conkpalv_c
  00050	b8 08 00 00 00	 mov	 eax, 8
  00055	48 6b c0 00	 imul	 rax, rax, 0
  00059	b9 08 00 00 00	 mov	 ecx, 8
  0005e	48 6b c9 00	 imul	 rcx, rcx, 0
  00062	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006a	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0006e	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00076	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0007a	e8 00 00 00 00	 call	 strupper
$LN8@conkpalv_c:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 a8		 jne	 SHORT $LN7@conkpalv_c

; 8897 : 
; 8898 :   #if !defined( HAVE_FULL_KEEPALIVE ) && !defined( HAVE_PARTIAL_KEEPALIVE )
; 8899 : 
; 8900 :     // "This build of Hercules has only basic TCP keepalive support"
; 8901 :     WRMSG( HHC02322, "W" );
; 8902 : 
; 8903 :   #elif !defined( HAVE_FULL_KEEPALIVE )
; 8904 : 
; 8905 :     // "This build of Hercules has only partial TCP keepalive support"
; 8906 :     WRMSG( HHC02323, "W" );

  00085	b9 01 00 00 00	 mov	 ecx, 1
  0008a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00090	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211585
  00097	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211586
  000a3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000a8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ad	41 b9 03 00 00
	00		 mov	 r9d, 3
  000b3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211587
  000ba	ba ca 22 00 00	 mov	 edx, 8906		; 000022caH
  000bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211588
  000c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8907 : 
; 8908 :   #endif // (basic or partial)
; 8909 : 
; 8910 :     /* Validate and parse the arguments passed to us */
; 8911 :     if (0
; 8912 :         || !(argc == 2 || argc < 2)
; 8913 :         ||  (argc == 2 && parse_conkpalv( argv[1], &idle, &intv, &cnt ) != 0)

  000cc	33 c0		 xor	 eax, eax
  000ce	85 c0		 test	 eax, eax
  000d0	75 53		 jne	 SHORT $LN10@conkpalv_c
  000d2	83 bc 24 d0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000da	74 0a		 je	 SHORT $LN11@conkpalv_c
  000dc	83 bc 24 d0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000e4	7d 3f		 jge	 SHORT $LN10@conkpalv_c
$LN11@conkpalv_c:
  000e6	83 bc 24 d0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000ee	0f 85 b2 00 00
	00		 jne	 $LN9@conkpalv_c
  000f4	b8 08 00 00 00	 mov	 eax, 8
  000f9	48 6b c0 01	 imul	 rax, rax, 1
  000fd	4c 8d 4c 24 5c	 lea	 r9, QWORD PTR cnt$[rsp]
  00102	4c 8d 44 24 58	 lea	 r8, QWORD PTR intv$[rsp]
  00107	48 8d 54 24 54	 lea	 rdx, QWORD PTR idle$[rsp]
  0010c	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00114	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00118	e8 00 00 00 00	 call	 parse_conkpalv
  0011d	85 c0		 test	 eax, eax
  0011f	0f 84 81 00 00
	00		 je	 $LN9@conkpalv_c
$LN10@conkpalv_c:

; 8914 :     )
; 8915 :     {
; 8916 :         // "Invalid argument %s%s"
; 8917 :         WRMSG( HHC02205, "E", argv[1], "" );

  00125	b8 08 00 00 00	 mov	 eax, 8
  0012a	48 6b c0 01	 imul	 rax, rax, 1
  0012e	48 89 44 24 68	 mov	 QWORD PTR tv130[rsp], rax
  00133	b9 01 00 00 00	 mov	 ecx, 1
  00138	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0013e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211592
  00145	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0014a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00152	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv130[rsp]
  00157	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0015b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00160	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211593
  00167	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0016c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211594
  00173	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00178	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0017d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00183	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211595
  0018a	ba d5 22 00 00	 mov	 edx, 8917		; 000022d5H
  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211596
  00196	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8918 :         return -1;

  0019c	b8 ff ff ff ff	 mov	 eax, -1
  001a1	e9 d2 03 00 00	 jmp	 $LN1@conkpalv_c
$LN9@conkpalv_c:

; 8919 :     }
; 8920 : 
; 8921 :     /* Need a socket for setting/getting */
; 8922 :     sfd = socket( AF_INET, SOCK_STREAM, 0 );

  001a6	45 33 c0	 xor	 r8d, r8d
  001a9	ba 01 00 00 00	 mov	 edx, 1
  001ae	b9 02 00 00 00	 mov	 ecx, 2
  001b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_socket
  001b9	89 44 24 50	 mov	 DWORD PTR sfd$[rsp], eax

; 8923 : 
; 8924 :     if (sfd < 0)

  001bd	83 7c 24 50 00	 cmp	 DWORD PTR sfd$[rsp], 0
  001c2	7d 7a		 jge	 SHORT $LN12@conkpalv_c

; 8925 :     {
; 8926 :         // "Error in function %s: %s"
; 8927 :         WRMSG( HHC02219, "E", "socket()", strerror( HSO_errno ));

  001c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  001ca	8b c8		 mov	 ecx, eax
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  001d2	48 89 44 24 70	 mov	 QWORD PTR tv147[rsp], rax
  001d7	b9 01 00 00 00	 mov	 ecx, 1
  001dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001e2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv147[rsp]
  001e7	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211598
  001f3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211599
  001ff	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00204	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211600
  0020b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00210	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00215	41 b9 03 00 00
	00		 mov	 r9d, 3
  0021b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211601
  00222	ba df 22 00 00	 mov	 edx, 8927		; 000022dfH
  00227	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211602
  0022e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8928 :         return -1;

  00234	b8 ff ff ff ff	 mov	 eax, -1
  00239	e9 3a 03 00 00	 jmp	 $LN1@conkpalv_c
$LN12@conkpalv_c:

; 8929 :     }
; 8930 : 
; 8931 :     /*
; 8932 :     **  Set the requested values. Note since all sockets start out
; 8933 :     **  with default values, we must also set the keepalive values
; 8934 :     **  to our desired default values first (unless we are setting
; 8935 :     **  new default values) before retrieving the values that will
; 8936 :     **  actually be used (or are already in use) by the system.
; 8937 :     */
; 8938 :     if (argc < 2)

  0023e	83 bc 24 d0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00246	7d 33		 jge	 SHORT $LN13@conkpalv_c

; 8939 :     {
; 8940 :         /* Try using the existing default values */
; 8941 :         idle = sysblk.kaidle;

  00248	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0024f	8b 80 b0 10 00
	00		 mov	 eax, DWORD PTR [rax+4272]
  00255	89 44 24 54	 mov	 DWORD PTR idle$[rsp], eax

; 8942 :         intv = sysblk.kaintv;

  00259	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00260	8b 80 b4 10 00
	00		 mov	 eax, DWORD PTR [rax+4276]
  00266	89 44 24 58	 mov	 DWORD PTR intv$[rsp], eax

; 8943 :         cnt  = sysblk.kacnt;

  0026a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00271	8b 80 b8 10 00
	00		 mov	 eax, DWORD PTR [rax+4280]
  00277	89 44 24 5c	 mov	 DWORD PTR cnt$[rsp], eax
$LN13@conkpalv_c:

; 8944 :     }
; 8945 : 
; 8946 :     /* Set new or existing default keepalive values */
; 8947 :     if ((rc = set_socket_keepalive( sfd, idle, intv, cnt )) < 0)

  0027b	44 8b 4c 24 5c	 mov	 r9d, DWORD PTR cnt$[rsp]
  00280	44 8b 44 24 58	 mov	 r8d, DWORD PTR intv$[rsp]
  00285	8b 54 24 54	 mov	 edx, DWORD PTR idle$[rsp]
  00289	8b 4c 24 50	 mov	 ecx, DWORD PTR sfd$[rsp]
  0028d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_set_socket_keepalive
  00293	89 44 24 60	 mov	 DWORD PTR rc$[rsp], eax
  00297	83 7c 24 60 00	 cmp	 DWORD PTR rc$[rsp], 0
  0029c	0f 8d 86 00 00
	00		 jge	 $LN14@conkpalv_c

; 8948 :     {
; 8949 :         // "Error in function %s: %s"
; 8950 :         WRMSG( HHC02219, "E", "set_socket_keepalive()", strerror( HSO_errno ));

  002a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  002a8	8b c8		 mov	 ecx, eax
  002aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  002b0	48 89 44 24 78	 mov	 QWORD PTR tv171[rsp], rax
  002b5	b9 01 00 00 00	 mov	 ecx, 1
  002ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002c0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv171[rsp]
  002c5	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211606
  002d1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211607
  002dd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211608
  002e9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002ee	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002f3	41 b9 03 00 00
	00		 mov	 r9d, 3
  002f9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211609
  00300	ba f6 22 00 00	 mov	 edx, 8950		; 000022f6H
  00305	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211610
  0030c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8951 :         close_socket( sfd );

  00312	8b 4c 24 50	 mov	 ecx, DWORD PTR sfd$[rsp]
  00316	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 8952 :         return -1;

  0031c	b8 ff ff ff ff	 mov	 eax, -1
  00321	e9 52 02 00 00	 jmp	 $LN1@conkpalv_c

; 8953 :     }

  00326	eb 4e		 jmp	 SHORT $LN15@conkpalv_c
$LN14@conkpalv_c:

; 8954 :     else if (rc > 0)

  00328	83 7c 24 60 00	 cmp	 DWORD PTR rc$[rsp], 0
  0032d	7e 47		 jle	 SHORT $LN16@conkpalv_c

; 8955 :     {
; 8956 :         // "Not all TCP keepalive settings honored"
; 8957 :         WRMSG( HHC02320, "W" );

  0032f	b9 01 00 00 00	 mov	 ecx, 1
  00334	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0033a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211612
  00341	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00346	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211613
  0034d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00352	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00357	41 b9 03 00 00
	00		 mov	 r9d, 3
  0035d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211614
  00364	ba fd 22 00 00	 mov	 edx, 8957		; 000022fdH
  00369	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211615
  00370	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN16@conkpalv_c:
$LN15@conkpalv_c:

; 8958 :     }
; 8959 : 
; 8960 :     /* Retrieve the system's current keepalive values */
; 8961 :     if (get_socket_keepalive( sfd, &idle, &intv, &cnt ) < 0)

  00376	4c 8d 4c 24 5c	 lea	 r9, QWORD PTR cnt$[rsp]
  0037b	4c 8d 44 24 58	 lea	 r8, QWORD PTR intv$[rsp]
  00380	48 8d 54 24 54	 lea	 rdx, QWORD PTR idle$[rsp]
  00385	8b 4c 24 50	 mov	 ecx, DWORD PTR sfd$[rsp]
  00389	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_get_socket_keepalive
  0038f	85 c0		 test	 eax, eax
  00391	0f 8d 8a 00 00
	00		 jge	 $LN17@conkpalv_c

; 8962 :     {
; 8963 :         WRMSG( HHC02219, "E", "get_socket_keepalive()", strerror( HSO_errno ));

  00397	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  0039d	8b c8		 mov	 ecx, eax
  0039f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  003a5	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv202[rsp], rax
  003ad	b9 01 00 00 00	 mov	 ecx, 1
  003b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003b8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv202[rsp]
  003c0	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211617
  003cc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211618
  003d8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211619
  003e4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003e9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003ee	41 b9 03 00 00
	00		 mov	 r9d, 3
  003f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211620
  003fb	ba 03 23 00 00	 mov	 edx, 8963		; 00002303H
  00400	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211621
  00407	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8964 :         close_socket( sfd );

  0040d	8b 4c 24 50	 mov	 ecx, DWORD PTR sfd$[rsp]
  00411	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 8965 :         return -1;

  00417	b8 ff ff ff ff	 mov	 eax, -1
  0041c	e9 57 01 00 00	 jmp	 $LN1@conkpalv_c
$LN17@conkpalv_c:

; 8966 :     }
; 8967 :     close_socket( sfd );

  00421	8b 4c 24 50	 mov	 ecx, DWORD PTR sfd$[rsp]
  00425	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 8968 : 
; 8969 :     /* Update SYSBLK with the values the system is actually using */
; 8970 :     sysblk.kaidle = idle;

  0042b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00432	8b 4c 24 54	 mov	 ecx, DWORD PTR idle$[rsp]
  00436	89 88 b0 10 00
	00		 mov	 DWORD PTR [rax+4272], ecx

; 8971 :     sysblk.kaintv = intv;

  0043c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00443	8b 4c 24 58	 mov	 ecx, DWORD PTR intv$[rsp]
  00447	89 88 b4 10 00
	00		 mov	 DWORD PTR [rax+4276], ecx

; 8972 :     sysblk.kacnt  = cnt;

  0044d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00454	8b 4c 24 5c	 mov	 ecx, DWORD PTR cnt$[rsp]
  00458	89 88 b8 10 00
	00		 mov	 DWORD PTR [rax+4280], ecx

; 8973 : 
; 8974 :     /* Now report the values that are actually being used */
; 8975 :     MSGBUF( buf, "(%d,%d,%d)", sysblk.kaidle, sysblk.kaintv, sysblk.kacnt );

  0045e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00465	8b 80 b8 10 00
	00		 mov	 eax, DWORD PTR [rax+4280]
  0046b	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0046f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00476	8b 80 b4 10 00
	00		 mov	 eax, DWORD PTR [rax+4276]
  0047c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00480	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00487	44 8b 88 b0 10
	00 00		 mov	 r9d, DWORD PTR [rax+4272]
  0048e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211622
  00495	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  0049a	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  004a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 8976 : 
; 8977 :     if (argc == 2)

  004a8	83 bc 24 d0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  004b0	75 62		 jne	 SHORT $LN18@conkpalv_c

; 8978 :         // "%-14s set to %s"
; 8979 :         WRMSG( HHC02204, "I", "conkpalv", buf );

  004b2	b9 01 00 00 00	 mov	 ecx, 1
  004b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004bd	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  004c5	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  004ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211625
  004d1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211626
  004dd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211627
  004e9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004ee	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004f3	41 b9 03 00 00
	00		 mov	 r9d, 3
  004f9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211628
  00500	ba 13 23 00 00	 mov	 edx, 8979		; 00002313H
  00505	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211629
  0050c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00512	eb 60		 jmp	 SHORT $LN19@conkpalv_c
$LN18@conkpalv_c:

; 8980 :     else
; 8981 :         // "%-14s: %s"
; 8982 :         WRMSG( HHC02203, "I", "conkpalv", buf );

  00514	b9 01 00 00 00	 mov	 ecx, 1
  00519	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0051f	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00527	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0052c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211630
  00533	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00538	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211631
  0053f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00544	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211632
  0054b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00550	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00555	41 b9 03 00 00
	00		 mov	 r9d, 3
  0055b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211633
  00562	ba 16 23 00 00	 mov	 edx, 8982		; 00002316H
  00567	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211634
  0056e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN19@conkpalv_c:

; 8983 : 
; 8984 :     return rc;

  00574	8b 44 24 60	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@conkpalv_c:

; 8985 : 
; 8986 : #endif // (KEEPALIVE)
; 8987 : }

  00578	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00580	48 33 cc	 xor	 rcx, rsp
  00583	e8 00 00 00 00	 call	 __security_check_cookie
  00588	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  0058f	c3		 ret	 0
conkpalv_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
argc$ = 96
argv$ = 104
cmdline$ = 112
sizeof_cmd PROC

; 8819 : {

$LN12:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@sizeof_cmd:

; 8820 :     UNREFERENCED( cmdline );

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@sizeof_cmd
$LN7@sizeof_cmd:

; 8821 :     UNREFERENCED( argc );

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN7@sizeof_cmd
$LN10@sizeof_cmd:

; 8822 :     UNREFERENCED( argv );

  0001e	33 c0		 xor	 eax, eax
  00020	85 c0		 test	 eax, eax
  00022	75 fa		 jne	 SHORT $LN10@sizeof_cmd

; 8823 : 
; 8824 :     // HHC02257 "%s%7d"
; 8825 : 
; 8826 :     WRMSG( HHC02257, "I", "(unsigned short) ......", (int) sizeof( unsigned short ));

  00024	b9 01 00 00 00	 mov	 ecx, 1
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0002f	c7 44 24 40 02
	00 00 00	 mov	 DWORD PTR [rsp+64], 2
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211419
  0003e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211420
  0004a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211421
  00056	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0005b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00060	41 b9 03 00 00
	00		 mov	 r9d, 3
  00066	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211422
  0006d	ba 7a 22 00 00	 mov	 edx, 8826		; 0000227aH
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211423
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8827 :     WRMSG( HHC02257, "I", "(void*) ...............", (int) sizeof( void*          ));

  0007f	b9 01 00 00 00	 mov	 ecx, 1
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0008a	c7 44 24 40 08
	00 00 00	 mov	 DWORD PTR [rsp+64], 8
  00092	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211424
  00099	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211425
  000a5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211426
  000b1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000b6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000bb	41 b9 03 00 00
	00		 mov	 r9d, 3
  000c1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211427
  000c8	ba 7b 22 00 00	 mov	 edx, 8827		; 0000227bH
  000cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211428
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8828 :     WRMSG( HHC02257, "I", "(unsigned int) ........", (int) sizeof( unsigned int   ));

  000da	b9 01 00 00 00	 mov	 ecx, 1
  000df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000e5	c7 44 24 40 04
	00 00 00	 mov	 DWORD PTR [rsp+64], 4
  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211429
  000f4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211430
  00100	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00105	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211431
  0010c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00111	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00116	41 b9 03 00 00
	00		 mov	 r9d, 3
  0011c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211432
  00123	ba 7c 22 00 00	 mov	 edx, 8828		; 0000227cH
  00128	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211433
  0012f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8829 :     WRMSG( HHC02257, "I", "(long) ................", (int) sizeof( long           ));

  00135	b9 01 00 00 00	 mov	 ecx, 1
  0013a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00140	c7 44 24 40 04
	00 00 00	 mov	 DWORD PTR [rsp+64], 4
  00148	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211434
  0014f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00154	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211435
  0015b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00160	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211436
  00167	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0016c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00171	41 b9 03 00 00
	00		 mov	 r9d, 3
  00177	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211437
  0017e	ba 7d 22 00 00	 mov	 edx, 8829		; 0000227dH
  00183	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211438
  0018a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8830 :     WRMSG( HHC02257, "I", "(long long) ...........", (int) sizeof( long long      ));

  00190	b9 01 00 00 00	 mov	 ecx, 1
  00195	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0019b	c7 44 24 40 08
	00 00 00	 mov	 DWORD PTR [rsp+64], 8
  001a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211439
  001aa	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211440
  001b6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211441
  001c2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001c7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001cc	41 b9 03 00 00
	00		 mov	 r9d, 3
  001d2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211442
  001d9	ba 7e 22 00 00	 mov	 edx, 8830		; 0000227eH
  001de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211443
  001e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8831 :     WRMSG( HHC02257, "I", "(size_t) ..............", (int) sizeof( size_t         ));

  001eb	b9 01 00 00 00	 mov	 ecx, 1
  001f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001f6	c7 44 24 40 08
	00 00 00	 mov	 DWORD PTR [rsp+64], 8
  001fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211444
  00205	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0020a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211445
  00211	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00216	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211446
  0021d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00222	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00227	41 b9 03 00 00
	00		 mov	 r9d, 3
  0022d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211447
  00234	ba 7f 22 00 00	 mov	 edx, 8831		; 0000227fH
  00239	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211448
  00240	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8832 :     WRMSG( HHC02257, "I", "(off_t) ...............", (int) sizeof( off_t          ));

  00246	b9 01 00 00 00	 mov	 ecx, 1
  0024b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00251	c7 44 24 40 08
	00 00 00	 mov	 DWORD PTR [rsp+64], 8
  00259	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211449
  00260	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00265	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211450
  0026c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00271	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211451
  00278	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0027d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00282	41 b9 03 00 00
	00		 mov	 r9d, 3
  00288	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211452
  0028f	ba 80 22 00 00	 mov	 edx, 8832		; 00002280H
  00294	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211453
  0029b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8833 :     WRMSG( HHC02257, "I", "FILENAME_MAX ..........", (int) FILENAME_MAX            );

  002a1	b9 01 00 00 00	 mov	 ecx, 1
  002a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002ac	c7 44 24 40 04
	01 00 00	 mov	 DWORD PTR [rsp+64], 260	; 00000104H
  002b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211454
  002bb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211455
  002c7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211456
  002d3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002d8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002dd	41 b9 03 00 00
	00		 mov	 r9d, 3
  002e3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211457
  002ea	ba 81 22 00 00	 mov	 edx, 8833		; 00002281H
  002ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211458
  002f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8834 :     WRMSG( HHC02257, "I", "PATH_MAX ..............", (int) PATH_MAX                );

  002fc	b9 01 00 00 00	 mov	 ecx, 1
  00301	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00307	c7 44 24 40 04
	01 00 00	 mov	 DWORD PTR [rsp+64], 260	; 00000104H
  0030f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211459
  00316	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0031b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211460
  00322	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00327	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211461
  0032e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00333	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00338	41 b9 03 00 00
	00		 mov	 r9d, 3
  0033e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211462
  00345	ba 82 22 00 00	 mov	 edx, 8834		; 00002282H
  0034a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211463
  00351	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8835 :     WRMSG( HHC02257, "I", "SYSBLK ................", (int) sizeof( SYSBLK         ));

  00357	b9 01 00 00 00	 mov	 ecx, 1
  0035c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00362	c7 44 24 40 00
	76 01 00	 mov	 DWORD PTR [rsp+64], 95744 ; 00017600H
  0036a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211464
  00371	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00376	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211465
  0037d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00382	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211466
  00389	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0038e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00393	41 b9 03 00 00
	00		 mov	 r9d, 3
  00399	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211467
  003a0	ba 83 22 00 00	 mov	 edx, 8835		; 00002283H
  003a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211468
  003ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8836 :     WRMSG( HHC02257, "I", "REGS ..................", (int) sizeof( REGS           ));

  003b2	b9 01 00 00 00	 mov	 ecx, 1
  003b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003bd	c7 44 24 40 80
	60 01 00	 mov	 DWORD PTR [rsp+64], 90240 ; 00016080H
  003c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211469
  003cc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211470
  003d8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211471
  003e4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003e9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003ee	41 b9 03 00 00
	00		 mov	 r9d, 3
  003f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211472
  003fb	ba 84 22 00 00	 mov	 edx, 8836		; 00002284H
  00400	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211473
  00407	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8837 :     WRMSG( HHC02257, "I", "REGS (copy len) .......", (int) sysblk.regs_copy_len    );

  0040d	b9 01 00 00 00	 mov	 ecx, 1
  00412	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00418	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0041f	8b 89 90 14 00
	00		 mov	 ecx, DWORD PTR [rcx+5264]
  00425	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00429	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211474
  00430	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00435	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211475
  0043c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00441	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211476
  00448	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0044d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00452	41 b9 03 00 00
	00		 mov	 r9d, 3
  00458	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211477
  0045f	ba 85 22 00 00	 mov	 edx, 8837		; 00002285H
  00464	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211478
  0046b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8838 :     WRMSG( HHC02257, "I", "PSW ...................", (int) sizeof( PSW            ));

  00471	b9 01 00 00 00	 mov	 ecx, 1
  00476	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0047c	c7 44 24 40 28
	00 00 00	 mov	 DWORD PTR [rsp+64], 40	; 00000028H
  00484	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211479
  0048b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00490	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211480
  00497	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0049c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211481
  004a3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004a8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004ad	41 b9 03 00 00
	00		 mov	 r9d, 3
  004b3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211482
  004ba	ba 86 22 00 00	 mov	 edx, 8838		; 00002286H
  004bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211483
  004c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8839 :     WRMSG( HHC02257, "I", "DEVBLK ................", (int) sizeof( DEVBLK         ));

  004cc	b9 01 00 00 00	 mov	 ecx, 1
  004d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004d7	c7 44 24 40 a0
	1b 00 00	 mov	 DWORD PTR [rsp+64], 7072 ; 00001ba0H
  004df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211484
  004e6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211485
  004f2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211486
  004fe	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00503	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00508	41 b9 03 00 00
	00		 mov	 r9d, 3
  0050e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211487
  00515	ba 87 22 00 00	 mov	 edx, 8839		; 00002287H
  0051a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211488
  00521	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8840 :     WRMSG( HHC02257, "I", "TLB entry .............", (int) sizeof( TLB ) / TLBN    );

  00527	b9 01 00 00 00	 mov	 ecx, 1
  0052c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00532	c7 44 24 40 2c
	00 00 00	 mov	 DWORD PTR [rsp+64], 44	; 0000002cH
  0053a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211489
  00541	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00546	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211490
  0054d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00552	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211491
  00559	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0055e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00563	41 b9 03 00 00
	00		 mov	 r9d, 3
  00569	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211492
  00570	ba 88 22 00 00	 mov	 edx, 8840		; 00002288H
  00575	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211493
  0057c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8841 :     WRMSG( HHC02257, "I", "TLB table .............", (int) sizeof( TLB            ));

  00582	b9 01 00 00 00	 mov	 ecx, 1
  00587	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0058d	c7 44 24 40 00
	b0 00 00	 mov	 DWORD PTR [rsp+64], 45056 ; 0000b000H
  00595	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211494
  0059c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211495
  005a8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211496
  005b4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005b9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005be	41 b9 03 00 00
	00		 mov	 r9d, 3
  005c4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211497
  005cb	ba 89 22 00 00	 mov	 edx, 8841		; 00002289H
  005d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211498
  005d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8842 :     WRMSG( HHC02257, "I", "CPU_BITMAP ............", (int) sizeof( CPU_BITMAP     ));

  005dd	b9 01 00 00 00	 mov	 ecx, 1
  005e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005e8	c7 44 24 40 08
	00 00 00	 mov	 DWORD PTR [rsp+64], 8
  005f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211499
  005f7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211500
  00603	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00608	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211501
  0060f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00614	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00619	41 b9 03 00 00
	00		 mov	 r9d, 3
  0061f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211502
  00626	ba 8a 22 00 00	 mov	 edx, 8842		; 0000228aH
  0062b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211503
  00632	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8843 :     WRMSG( HHC02257, "I", "FD_SETSIZE ............", (int) FD_SETSIZE              );

  00638	b9 01 00 00 00	 mov	 ecx, 1
  0063d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00643	c7 44 24 40 00
	04 00 00	 mov	 DWORD PTR [rsp+64], 1024 ; 00000400H
  0064b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211504
  00652	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00657	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211505
  0065e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00663	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211506
  0066a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0066f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00674	41 b9 03 00 00
	00		 mov	 r9d, 3
  0067a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211507
  00681	ba 8b 22 00 00	 mov	 edx, 8843		; 0000228bH
  00686	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211508
  0068d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8844 :     WRMSG( HHC02257, "I", "TID ...................", (int) sizeof( TID            ));

  00693	b9 01 00 00 00	 mov	 ecx, 1
  00698	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0069e	c7 44 24 40 04
	00 00 00	 mov	 DWORD PTR [rsp+64], 4
  006a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211509
  006ad	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211510
  006b9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211511
  006c5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006ca	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006cf	41 b9 03 00 00
	00		 mov	 r9d, 3
  006d5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211512
  006dc	ba 8c 22 00 00	 mov	 edx, 8844		; 0000228cH
  006e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211513
  006e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8845 :     WRMSG( HHC02257, "I", "STFL_IBM_LAST_BIT .....", (int) STFL_IBM_LAST_BIT );

  006ee	b9 01 00 00 00	 mov	 ecx, 1
  006f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006f9	c7 44 24 40 c8
	00 00 00	 mov	 DWORD PTR [rsp+64], 200	; 000000c8H
  00701	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211514
  00708	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0070d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211515
  00714	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00719	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211516
  00720	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00725	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0072a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00730	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211517
  00737	ba 8d 22 00 00	 mov	 edx, 8845		; 0000228dH
  0073c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211518
  00743	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8846 :     WRMSG( HHC02257, "I", "STFL_IBM_BY_SIZE ......", (int) STFL_IBM_BY_SIZE );

  00749	b9 01 00 00 00	 mov	 ecx, 1
  0074e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00754	c7 44 24 40 19
	00 00 00	 mov	 DWORD PTR [rsp+64], 25
  0075c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211519
  00763	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00768	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211520
  0076f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00774	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211521
  0077b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00780	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00785	41 b9 03 00 00
	00		 mov	 r9d, 3
  0078b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211522
  00792	ba 8e 22 00 00	 mov	 edx, 8846		; 0000228eH
  00797	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211523
  0079e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8847 :     WRMSG( HHC02257, "I", "STFL_IBM_DW_SIZE ......", (int) STFL_IBM_DW_SIZE );

  007a4	b9 01 00 00 00	 mov	 ecx, 1
  007a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007af	c7 44 24 40 04
	00 00 00	 mov	 DWORD PTR [rsp+64], 4
  007b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211524
  007be	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  007c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211525
  007ca	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211526
  007d6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007db	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007e0	41 b9 03 00 00
	00		 mov	 r9d, 3
  007e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211527
  007ed	ba 8f 22 00 00	 mov	 edx, 8847		; 0000228fH
  007f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211528
  007f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8848 :     WRMSG( HHC02257, "I", "STFL_HERC_FIRST_BIT ...", (int) STFL_HERC_FIRST_BIT );

  007ff	b9 01 00 00 00	 mov	 ecx, 1
  00804	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0080a	c7 44 24 40 00
	01 00 00	 mov	 DWORD PTR [rsp+64], 256	; 00000100H
  00812	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211529
  00819	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0081e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211530
  00825	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0082a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211531
  00831	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00836	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0083b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00841	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211532
  00848	ba 90 22 00 00	 mov	 edx, 8848		; 00002290H
  0084d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211533
  00854	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8849 :     WRMSG( HHC02257, "I", "STFL_HERC_LAST_BIT ....", (int) STFL_HERC_LAST_BIT );

  0085a	b9 01 00 00 00	 mov	 ecx, 1
  0085f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00865	c7 44 24 40 12
	01 00 00	 mov	 DWORD PTR [rsp+64], 274	; 00000112H
  0086d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211534
  00874	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00879	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211535
  00880	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00885	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211536
  0088c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00891	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00896	41 b9 03 00 00
	00		 mov	 r9d, 3
  0089c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211537
  008a3	ba 91 22 00 00	 mov	 edx, 8849		; 00002291H
  008a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211538
  008af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8850 :     WRMSG( HHC02257, "I", "STFL_HERC_BY_SIZE .....", (int) STFL_HERC_BY_SIZE );

  008b5	b9 01 00 00 00	 mov	 ecx, 1
  008ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008c0	c7 44 24 40 23
	00 00 00	 mov	 DWORD PTR [rsp+64], 35	; 00000023H
  008c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211539
  008cf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  008d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211540
  008db	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211541
  008e7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008ec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008f1	41 b9 03 00 00
	00		 mov	 r9d, 3
  008f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211542
  008fe	ba 92 22 00 00	 mov	 edx, 8850		; 00002292H
  00903	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211543
  0090a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8851 :     WRMSG( HHC02257, "I", "STFL_HERC_DW_SIZE .....", (int) STFL_HERC_DW_SIZE );

  00910	b9 01 00 00 00	 mov	 ecx, 1
  00915	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0091b	c7 44 24 40 05
	00 00 00	 mov	 DWORD PTR [rsp+64], 5
  00923	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211544
  0092a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0092f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211545
  00936	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0093b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211546
  00942	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00947	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0094c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00952	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211547
  00959	ba 93 22 00 00	 mov	 edx, 8851		; 00002293H
  0095e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211548
  00965	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8852 : 
; 8853 :     // HHC00001 "%s%s"
; 8854 : 
; 8855 :     WRMSG( HHC00001, "I", "", "TIDPAT ................ " TIDPAT );

  0096b	b9 01 00 00 00	 mov	 ecx, 1
  00970	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00976	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211549
  0097d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00982	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211550
  00989	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0098e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211551
  00995	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0099a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211552
  009a1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  009a6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009ab	41 b9 03 00 00
	00		 mov	 r9d, 3
  009b1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211553
  009b8	ba 97 22 00 00	 mov	 edx, 8855		; 00002297H
  009bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211554
  009c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8856 :     WRMSG( HHC00001, "I", "", "SCN_TIDPAT ............ " SCN_TIDPAT );

  009ca	b9 01 00 00 00	 mov	 ecx, 1
  009cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211555
  009dc	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  009e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211556
  009e8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  009ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211557
  009f4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  009f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211558
  00a00	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a05	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a0a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a10	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211559
  00a17	ba 98 22 00 00	 mov	 edx, 8856		; 00002298H
  00a1c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211560
  00a23	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8857 : 
; 8858 :     return 0;

  00a29	33 c0		 xor	 eax, eax

; 8859 : }

  00a2b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00a2f	c3		 ret	 0
sizeof_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
rc$ = 80
tv72 = 88
tv154 = 96
fn$ = 112
altfn$1 = 384
pathname$2 = 656
__$ArrayPad$ = 928
argc$ = 960
argv$ = 968
cmdline$ = 976
herclogo_cmd PROC

; 8772 : {

$LN10:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 81 ec b0 03
	00 00		 sub	 rsp, 944		; 000003b0H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 a0
	03 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 8773 :     int rc = 0;

  00028	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0

; 8774 :     char    fn[FILENAME_MAX];
; 8775 : 
; 8776 :     memset(fn,0,sizeof(fn));

  00030	48 8d 44 24 70	 lea	 rax, QWORD PTR fn$[rsp]
  00035	48 8b f8	 mov	 rdi, rax
  00038	33 c0		 xor	 eax, eax
  0003a	b9 04 01 00 00	 mov	 ecx, 260		; 00000104H
  0003f	f3 aa		 rep stosb
$LN4@herclogo_c:

; 8777 : 
; 8778 :     UNREFERENCED(cmdline);

  00041	33 c0		 xor	 eax, eax
  00043	85 c0		 test	 eax, eax
  00045	75 fa		 jne	 SHORT $LN4@herclogo_c

; 8779 : 
; 8780 :     if ( argc < 2 )

  00047	83 bc 24 c0 03
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0004f	7d 1e		 jge	 SHORT $LN5@herclogo_c

; 8781 :     {
; 8782 :         sysblk.logofile=NULL;

  00051	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00058	48 c7 80 00 14
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+5120], 0

; 8783 :         clearlogo();

  00063	e8 00 00 00 00	 call	 clearlogo

; 8784 :         return 0;

  00068	33 c0		 xor	 eax, eax
  0006a	e9 01 02 00 00	 jmp	 $LN1@herclogo_c
$LN5@herclogo_c:

; 8785 :     }
; 8786 :     if ( argc > 3 )

  0006f	83 bc 24 c0 03
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00077	7e 75		 jle	 SHORT $LN6@herclogo_c

; 8787 :     {
; 8788 :         WRMSG( HHC02299, "E", argv[0] );

  00079	b8 08 00 00 00	 mov	 eax, 8
  0007e	48 6b c0 00	 imul	 rax, rax, 0
  00082	48 89 44 24 58	 mov	 QWORD PTR tv72[rsp], rax
  00087	b9 01 00 00 00	 mov	 ecx, 1
  0008c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00092	48 8b 8c 24 c8
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0009a	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv72[rsp]
  0009f	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000a3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211291
  000af	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211292
  000bb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c5	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211293
  000d2	ba 54 22 00 00	 mov	 edx, 8788		; 00002254H
  000d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211294
  000de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8789 :         return -1;

  000e4	b8 ff ff ff ff	 mov	 eax, -1
  000e9	e9 82 01 00 00	 jmp	 $LN1@herclogo_c
$LN6@herclogo_c:

; 8790 :     }
; 8791 : 
; 8792 :     hostpath(fn,argv[1],sizeof(fn));

  000ee	b8 08 00 00 00	 mov	 eax, 8
  000f3	48 6b c0 01	 imul	 rax, rax, 1
  000f7	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  000fd	48 8b 8c 24 c8
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00105	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00109	48 8d 4c 24 70	 lea	 rcx, QWORD PTR fn$[rsp]
  0010e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 8793 : 
; 8794 :     rc = readlogo(fn);

  00114	48 8d 4c 24 70	 lea	 rcx, QWORD PTR fn$[rsp]
  00119	e8 00 00 00 00	 call	 readlogo
  0011e	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 8795 : 
; 8796 :     if ( rc == -1 && strcasecmp(fn,basename(fn)) == 0
; 8797 :                   && strlen(sysblk.hercules_pgmpath) > 0 )

  00122	83 7c 24 50 ff	 cmp	 DWORD PTR rc$[rsp], -1
  00127	0f 85 ae 00 00
	00		 jne	 $LN7@herclogo_c
  0012d	48 8d 4c 24 70	 lea	 rcx, QWORD PTR fn$[rsp]
  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_basename
  00138	48 8b d0	 mov	 rdx, rax
  0013b	48 8d 4c 24 70	 lea	 rcx, QWORD PTR fn$[rsp]
  00140	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00146	85 c0		 test	 eax, eax
  00148	0f 85 8d 00 00
	00		 jne	 $LN7@herclogo_c
  0014e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00155	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00159	e8 00 00 00 00	 call	 strlen
  0015e	48 85 c0	 test	 rax, rax
  00161	76 78		 jbe	 SHORT $LN7@herclogo_c

; 8798 :     {
; 8799 :         char altfn[FILENAME_MAX];
; 8800 :         char pathname[MAX_PATH];
; 8801 : 
; 8802 :         memset(altfn,0,sizeof(altfn));

  00163	48 8d 84 24 80
	01 00 00	 lea	 rax, QWORD PTR altfn$1[rsp]
  0016b	48 8b f8	 mov	 rdi, rax
  0016e	33 c0		 xor	 eax, eax
  00170	b9 04 01 00 00	 mov	 ecx, 260		; 00000104H
  00175	f3 aa		 rep stosb

; 8803 : 
; 8804 :         MSGBUF(altfn,"%s%c%s", sysblk.hercules_pgmpath, PATHSEPC, fn);

  00177	48 8d 44 24 70	 lea	 rax, QWORD PTR fn$[rsp]
  0017c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00181	c7 44 24 20 2f
	00 00 00	 mov	 DWORD PTR [rsp+32], 47	; 0000002fH
  00189	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00190	4c 8b 48 38	 mov	 r9, QWORD PTR [rax+56]
  00194	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211296
  0019b	ba 04 01 00 00	 mov	 edx, 260		; 00000104H
  001a0	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR altfn$1[rsp]
  001a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 8805 :         hostpath(pathname,altfn,sizeof(pathname));

  001ae	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  001b4	48 8d 94 24 80
	01 00 00	 lea	 rdx, QWORD PTR altfn$1[rsp]
  001bc	48 8d 8c 24 90
	02 00 00	 lea	 rcx, QWORD PTR pathname$2[rsp]
  001c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 8806 :         rc = readlogo(pathname);

  001ca	48 8d 8c 24 90
	02 00 00	 lea	 rcx, QWORD PTR pathname$2[rsp]
  001d2	e8 00 00 00 00	 call	 readlogo
  001d7	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
$LN7@herclogo_c:

; 8807 :     }
; 8808 : 
; 8809 :     if ( rc == -1 && MLVL(VERBOSE) )

  001db	83 7c 24 50 ff	 cmp	 DWORD PTR rc$[rsp], -1
  001e0	0f 85 86 00 00
	00		 jne	 $LN8@herclogo_c
  001e6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001ed	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  001f3	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001f8	85 c0		 test	 eax, eax
  001fa	74 70		 je	 SHORT $LN8@herclogo_c

; 8810 :         WRMSG( HHC01430, "E", "fopen()", strerror(errno) );

  001fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00202	8b 08		 mov	 ecx, DWORD PTR [rax]
  00204	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0020a	48 89 44 24 60	 mov	 QWORD PTR tv154[rsp], rax
  0020f	b9 01 00 00 00	 mov	 ecx, 1
  00214	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0021a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv154[rsp]
  0021f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00224	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211298
  0022b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00230	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211299
  00237	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0023c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211300
  00243	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00248	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00253	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211301
  0025a	ba 6a 22 00 00	 mov	 edx, 8810		; 0000226aH
  0025f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211302
  00266	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN8@herclogo_c:

; 8811 : 
; 8812 :     return rc;

  0026c	8b 44 24 50	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@herclogo_c:

; 8813 : }

  00270	48 8b 8c 24 a0
	03 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00278	48 33 cc	 xor	 rcx, rsp
  0027b	e8 00 00 00 00	 call	 __security_check_cookie
  00280	48 81 c4 b0 03
	00 00		 add	 rsp, 944		; 000003b0H
  00287	5f		 pop	 rdi
  00288	c3		 ret	 0
herclogo_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
lvl$1 = 80
c$2 = 84
rc$ = 88
err$3 = 92
tv92 = 96
tv151 = 104
tv206 = 112
tv227 = 120
tv288 = 128
tv316 = 136
msgbuf$ = 144
__$ArrayPad$ = 208
argc$ = 240
argv$ = 248
cmdline$ = 256
ecpsvm_cmd PROC

; 8663 : {

$LN28:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 8664 :     int rc = 0;

  00027	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN4@ecpsvm_cmd:

; 8665 :     char msgbuf[64];
; 8666 : 
; 8667 :     UNREFERENCED( cmdline );

  0002f	33 c0		 xor	 eax, eax
  00031	85 c0		 test	 eax, eax
  00033	75 fa		 jne	 SHORT $LN4@ecpsvm_cmd
$LN7@ecpsvm_cmd:

; 8668 : 
; 8669 :     UPPER_ARGV_0( argv );

  00035	48 83 bc 24 f8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  0003e	74 47		 je	 SHORT $LN8@ecpsvm_cmd
  00040	b8 08 00 00 00	 mov	 eax, 8
  00045	48 6b c0 00	 imul	 rax, rax, 0
  00049	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00051	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00056	74 2f		 je	 SHORT $LN8@ecpsvm_cmd
  00058	b8 08 00 00 00	 mov	 eax, 8
  0005d	48 6b c0 00	 imul	 rax, rax, 0
  00061	b9 08 00 00 00	 mov	 ecx, 8
  00066	48 6b c9 00	 imul	 rcx, rcx, 0
  0006a	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00072	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00076	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0007e	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00082	e8 00 00 00 00	 call	 strupper
$LN8@ecpsvm_cmd:
  00087	33 c0		 xor	 eax, eax
  00089	85 c0		 test	 eax, eax
  0008b	75 a8		 jne	 SHORT $LN7@ecpsvm_cmd

; 8670 : 
; 8671 :     // EVM      ...     (deprecated)
; 8672 :     // ECPS:VM  ...     (deprecated)
; 8673 :     if (0
; 8674 :         || CMD( argv[0], evm,     3 )
; 8675 :         || CMD( argv[0], ecps:vm, 7 )

  0008d	33 c0		 xor	 eax, eax
  0008f	85 c0		 test	 eax, eax
  00091	75 56		 jne	 SHORT $LN10@ecpsvm_cmd
  00093	b8 08 00 00 00	 mov	 eax, 8
  00098	48 6b c0 00	 imul	 rax, rax, 0
  0009c	41 b8 03 00 00
	00		 mov	 r8d, 3
  000a2	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000aa	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211216
  000b5	e8 00 00 00 00	 call	 strcaseabbrev
  000ba	85 c0		 test	 eax, eax
  000bc	75 2b		 jne	 SHORT $LN10@ecpsvm_cmd
  000be	b8 08 00 00 00	 mov	 eax, 8
  000c3	48 6b c0 00	 imul	 rax, rax, 0
  000c7	41 b8 07 00 00
	00		 mov	 r8d, 7
  000cd	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000d5	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211217
  000e0	e8 00 00 00 00	 call	 strcaseabbrev
  000e5	85 c0		 test	 eax, eax
  000e7	74 77		 je	 SHORT $LN9@ecpsvm_cmd
$LN10@ecpsvm_cmd:

; 8676 :     )
; 8677 :     {
; 8678 :         // "Command '%s' is deprecated%s"
; 8679 :         WRMSG( HHC02256, "W", argv[0], "; use ECPSVM instead" );

  000e9	b8 08 00 00 00	 mov	 eax, 8
  000ee	48 6b c0 00	 imul	 rax, rax, 0
  000f2	48 89 44 24 60	 mov	 QWORD PTR tv92[rsp], rax
  000f7	b9 01 00 00 00	 mov	 ecx, 1
  000fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00102	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211218
  00109	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0010e	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00116	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv92[rsp]
  0011b	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0011f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00124	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211219
  0012b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00130	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211220
  00137	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0013c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00141	41 b9 03 00 00
	00		 mov	 r9d, 3
  00147	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211221
  0014e	ba e7 21 00 00	 mov	 edx, 8679		; 000021e7H
  00153	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211222
  0015a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN9@ecpsvm_cmd:

; 8680 :         // (fall through to process their command anyway)
; 8681 :     }
; 8682 : 
; 8683 :     // ECPSVM NO
; 8684 :     if (argc == 2 && CMD( argv[1], no, 2 ))

  00160	83 bc 24 f0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00168	0f 85 df 00 00
	00		 jne	 $LN11@ecpsvm_cmd
  0016e	b8 08 00 00 00	 mov	 eax, 8
  00173	48 6b c0 01	 imul	 rax, rax, 1
  00177	41 b8 02 00 00
	00		 mov	 r8d, 2
  0017d	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00185	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211225
  00190	e8 00 00 00 00	 call	 strcaseabbrev
  00195	85 c0		 test	 eax, eax
  00197	0f 84 b0 00 00
	00		 je	 $LN11@ecpsvm_cmd

; 8685 :     {
; 8686 :         sysblk.ecpsvm.available = FALSE;

  0019d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001a4	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  001aa	0f ba f0 11	 btr	 eax, 17
  001ae	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001b5	89 81 44 13 00
	00		 mov	 DWORD PTR [rcx+4932], eax

; 8687 : 
; 8688 :         if (MLVL( VERBOSE ))

  001bb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001c2	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  001c8	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001cd	85 c0		 test	 eax, eax
  001cf	74 77		 je	 SHORT $LN13@ecpsvm_cmd

; 8689 :         {
; 8690 :             // "%-14s set to %s"
; 8691 :             WRMSG( HHC02204, "I", argv[0], "disabled" );

  001d1	b8 08 00 00 00	 mov	 eax, 8
  001d6	48 6b c0 00	 imul	 rax, rax, 0
  001da	48 89 44 24 68	 mov	 QWORD PTR tv151[rsp], rax
  001df	b9 01 00 00 00	 mov	 ecx, 1
  001e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211227
  001f1	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001f6	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001fe	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv151[rsp]
  00203	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00207	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0020c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211228
  00213	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00218	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211229
  0021f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00224	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00229	41 b9 03 00 00
	00		 mov	 r9d, 3
  0022f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211230
  00236	ba f3 21 00 00	 mov	 edx, 8691		; 000021f3H
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211231
  00242	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN13@ecpsvm_cmd:

; 8692 :         }
; 8693 :     }

  00248	e9 c1 04 00 00	 jmp	 $LN12@ecpsvm_cmd
$LN11@ecpsvm_cmd:

; 8694 :     // ECPSVM YES [TRAP|NOTRAP]
; 8695 :     else if (argc >= 2 && CMD( argv[1], yes, 3 ))

  0024d	83 bc 24 f0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00255	0f 8c 97 02 00
	00		 jl	 $LN14@ecpsvm_cmd
  0025b	b8 08 00 00 00	 mov	 eax, 8
  00260	48 6b c0 01	 imul	 rax, rax, 1
  00264	41 b8 03 00 00
	00		 mov	 r8d, 3
  0026a	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00272	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00276	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211234
  0027d	e8 00 00 00 00	 call	 strcaseabbrev
  00282	85 c0		 test	 eax, eax
  00284	0f 84 68 02 00
	00		 je	 $LN14@ecpsvm_cmd

; 8696 :     {
; 8697 :         int err = 0;

  0028a	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR err$3[rsp], 0

; 8698 : 
; 8699 :         sysblk.ecpsvm.available = TRUE;

  00292	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00299	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  0029f	0f ba e8 11	 bts	 eax, 17
  002a3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  002aa	89 81 44 13 00
	00		 mov	 DWORD PTR [rcx+4932], eax

; 8700 : 
; 8701 :         if (argc == 2)

  002b0	83 bc 24 f0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  002b8	75 44		 jne	 SHORT $LN16@ecpsvm_cmd

; 8702 :         {
; 8703 :             sysblk.ecpsvm.enabletrap = TRUE;

  002ba	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002c1	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  002c7	0f ba e8 12	 bts	 eax, 18
  002cb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  002d2	89 81 44 13 00
	00		 mov	 DWORD PTR [rcx+4932], eax

; 8704 :             MSGBUF( msgbuf, "%s", "enabled, trap support enabled" );

  002d8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG211237
  002df	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211238
  002e6	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  002eb	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  002f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 8705 :         }

  002f9	e9 56 01 00 00	 jmp	 $LN17@ecpsvm_cmd
$LN16@ecpsvm_cmd:

; 8706 :         else // (argc == 3)
; 8707 :         {
; 8708 :             if (CMD( argv[2], trap, 4 ))

  002fe	b8 08 00 00 00	 mov	 eax, 8
  00303	48 6b c0 02	 imul	 rax, rax, 2
  00307	41 b8 04 00 00
	00		 mov	 r8d, 4
  0030d	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00315	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00319	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211241
  00320	e8 00 00 00 00	 call	 strcaseabbrev
  00325	85 c0		 test	 eax, eax
  00327	74 44		 je	 SHORT $LN18@ecpsvm_cmd

; 8709 :             {
; 8710 :                 sysblk.ecpsvm.enabletrap = TRUE;

  00329	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00330	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00336	0f ba e8 12	 bts	 eax, 18
  0033a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00341	89 81 44 13 00
	00		 mov	 DWORD PTR [rcx+4932], eax

; 8711 :                 MSGBUF( msgbuf, "%s", "enabled, trap support enabled" );

  00347	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG211242
  0034e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211243
  00355	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0035a	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00362	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 8712 :             }

  00368	e9 e7 00 00 00	 jmp	 $LN19@ecpsvm_cmd
$LN18@ecpsvm_cmd:

; 8713 :             else if (CMD( argv[2], notrap, 6 ))

  0036d	b8 08 00 00 00	 mov	 eax, 8
  00372	48 6b c0 02	 imul	 rax, rax, 2
  00376	41 b8 06 00 00
	00		 mov	 r8d, 6
  0037c	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00384	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00388	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211246
  0038f	e8 00 00 00 00	 call	 strcaseabbrev
  00394	85 c0		 test	 eax, eax
  00396	74 41		 je	 SHORT $LN20@ecpsvm_cmd

; 8714 :             {
; 8715 :                 sysblk.ecpsvm.enabletrap = FALSE;

  00398	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0039f	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  003a5	0f ba f0 12	 btr	 eax, 18
  003a9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  003b0	89 81 44 13 00
	00		 mov	 DWORD PTR [rcx+4932], eax

; 8716 :                 MSGBUF( msgbuf, "%s", "enabled, trap support disabled" );

  003b6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG211247
  003bd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211248
  003c4	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  003c9	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  003d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 8717 :             }

  003d7	eb 7b		 jmp	 SHORT $LN21@ecpsvm_cmd
$LN20@ecpsvm_cmd:

; 8718 :             else
; 8719 :             {
; 8720 :                 err = 1;

  003d9	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR err$3[rsp], 1

; 8721 :                 // "Unknown ECPS:VM subcommand %s"
; 8722 :                 WRMSG( HHC01721, "E", argv[2] );

  003e1	b8 08 00 00 00	 mov	 eax, 8
  003e6	48 6b c0 02	 imul	 rax, rax, 2
  003ea	48 89 44 24 70	 mov	 QWORD PTR tv206[rsp], rax
  003ef	b9 01 00 00 00	 mov	 ecx, 1
  003f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003fa	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00402	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv206[rsp]
  00407	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0040b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00410	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211249
  00417	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0041c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211250
  00423	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00428	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0042d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00433	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211251
  0043a	ba 12 22 00 00	 mov	 edx, 8722		; 00002212H
  0043f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211252
  00446	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8723 :                 rc = -1;

  0044c	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN21@ecpsvm_cmd:
$LN19@ecpsvm_cmd:
$LN17@ecpsvm_cmd:

; 8724 :             }
; 8725 :         }
; 8726 : 
; 8727 :         if (!err && MLVL( VERBOSE ))

  00454	83 7c 24 5c 00	 cmp	 DWORD PTR err$3[rsp], 0
  00459	0f 85 8e 00 00
	00		 jne	 $LN22@ecpsvm_cmd
  0045f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00466	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  0046c	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00471	85 c0		 test	 eax, eax
  00473	74 78		 je	 SHORT $LN22@ecpsvm_cmd

; 8728 :         {
; 8729 :             // "%-14s set to %s"
; 8730 :             WRMSG( HHC02204, "I", argv[0], msgbuf );

  00475	b8 08 00 00 00	 mov	 eax, 8
  0047a	48 6b c0 00	 imul	 rax, rax, 0
  0047e	48 89 44 24 78	 mov	 QWORD PTR tv227[rsp], rax
  00483	b9 01 00 00 00	 mov	 ecx, 1
  00488	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0048e	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00496	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0049b	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004a3	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv227[rsp]
  004a8	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  004ac	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211254
  004b8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211255
  004c4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004c9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004ce	41 b9 03 00 00
	00		 mov	 r9d, 3
  004d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211256
  004db	ba 1a 22 00 00	 mov	 edx, 8730		; 0000221aH
  004e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211257
  004e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN22@ecpsvm_cmd:

; 8731 :         }
; 8732 :     }

  004ed	e9 1c 02 00 00	 jmp	 $LN15@ecpsvm_cmd
$LN14@ecpsvm_cmd:

; 8733 :     // ECPSVM LEVEL n
; 8734 :     else if (argc >= 2 && CMD( argv[1], level, 5 ))

  004f2	83 bc 24 f0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  004fa	0f 8c f6 01 00
	00		 jl	 $LN23@ecpsvm_cmd
  00500	b8 08 00 00 00	 mov	 eax, 8
  00505	48 6b c0 01	 imul	 rax, rax, 1
  00509	41 b8 05 00 00
	00		 mov	 r8d, 5
  0050f	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00517	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0051b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211260
  00522	e8 00 00 00 00	 call	 strcaseabbrev
  00527	85 c0		 test	 eax, eax
  00529	0f 84 c7 01 00
	00		 je	 $LN23@ecpsvm_cmd

; 8735 :     {
; 8736 :         int lvl = 20;

  0052f	c7 44 24 50 14
	00 00 00	 mov	 DWORD PTR lvl$1[rsp], 20

; 8737 : 
; 8738 :         if (argc == 3)

  00537	83 bc 24 f0 00
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  0053f	0f 85 a9 00 00
	00		 jne	 $LN25@ecpsvm_cmd

; 8739 :         {
; 8740 :             BYTE c;
; 8741 : 
; 8742 :             if (sscanf( argv[2], "%d%c", &lvl, &c ) != 1)

  00545	b8 08 00 00 00	 mov	 eax, 8
  0054a	48 6b c0 02	 imul	 rax, rax, 2
  0054e	4c 8d 4c 24 54	 lea	 r9, QWORD PTR c$2[rsp]
  00553	4c 8d 44 24 50	 lea	 r8, QWORD PTR lvl$1[rsp]
  00558	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG211263
  0055f	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00567	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0056b	e8 00 00 00 00	 call	 sscanf
  00570	83 f8 01	 cmp	 eax, 1
  00573	74 79		 je	 SHORT $LN26@ecpsvm_cmd

; 8743 :             {
; 8744 :                 // "Invalid ECPS:VM level value : %s. Default of 20 used"
; 8745 :                 WRMSG( HHC01723, "W", argv[2] );

  00575	b8 08 00 00 00	 mov	 eax, 8
  0057a	48 6b c0 02	 imul	 rax, rax, 2
  0057e	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv288[rsp], rax
  00586	b9 01 00 00 00	 mov	 ecx, 1
  0058b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00591	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00599	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv288[rsp]
  005a1	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  005a5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211264
  005b1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211265
  005bd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005c2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005c7	41 b9 03 00 00
	00		 mov	 r9d, 3
  005cd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211266
  005d4	ba 29 22 00 00	 mov	 edx, 8745		; 00002229H
  005d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211267
  005e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8746 :                 lvl = 20;

  005e6	c7 44 24 50 14
	00 00 00	 mov	 DWORD PTR lvl$1[rsp], 20
$LN26@ecpsvm_cmd:
$LN25@ecpsvm_cmd:

; 8747 :             }
; 8748 :         }
; 8749 : 
; 8750 :         sysblk.ecpsvm.level      = lvl;

  005ee	8b 44 24 50	 mov	 eax, DWORD PTR lvl$1[rsp]
  005f2	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  005f7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  005fe	8b 89 44 13 00
	00		 mov	 ecx, DWORD PTR [rcx+4932]
  00604	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  0060a	0b c8		 or	 ecx, eax
  0060c	8b c1		 mov	 eax, ecx
  0060e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00615	89 81 44 13 00
	00		 mov	 DWORD PTR [rcx+4932], eax

; 8751 :         sysblk.ecpsvm.available  = TRUE;

  0061b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00622	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00628	0f ba e8 11	 bts	 eax, 17
  0062c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00633	89 81 44 13 00
	00		 mov	 DWORD PTR [rcx+4932], eax

; 8752 :         sysblk.ecpsvm.enabletrap = FALSE;

  00639	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00640	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00646	0f ba f0 12	 btr	 eax, 18
  0064a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00651	89 81 44 13 00
	00		 mov	 DWORD PTR [rcx+4932], eax

; 8753 : 
; 8754 :         MSGBUF( msgbuf, "enabled: level %d", lvl );

  00657	44 8b 4c 24 50	 mov	 r9d, DWORD PTR lvl$1[rsp]
  0065c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211268
  00663	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00668	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00670	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 8755 :         // "%-14s set to %s"
; 8756 :         WRMSG( HHC02204, "I", argv[0], msgbuf );

  00676	b8 08 00 00 00	 mov	 eax, 8
  0067b	48 6b c0 00	 imul	 rax, rax, 0
  0067f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv316[rsp], rax
  00687	b9 01 00 00 00	 mov	 ecx, 1
  0068c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00692	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0069a	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0069f	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  006a7	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv316[rsp]
  006af	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  006b3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211269
  006bf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211270
  006cb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006d0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006d5	41 b9 03 00 00
	00		 mov	 r9d, 3
  006db	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211271
  006e2	ba 34 22 00 00	 mov	 edx, 8756		; 00002234H
  006e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211272
  006ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8757 :     }

  006f4	eb 18		 jmp	 SHORT $LN24@ecpsvm_cmd
$LN23@ecpsvm_cmd:

; 8758 :     else
; 8759 :     {
; 8760 :         // Some other subcommand (help, stats, enable, debug, etc)
; 8761 :         rc = ecpsvm_command( argc, argv );

  006f6	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  006fe	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  00705	e8 00 00 00 00	 call	 ecpsvm_command
  0070a	89 44 24 58	 mov	 DWORD PTR rc$[rsp], eax
$LN24@ecpsvm_cmd:
$LN15@ecpsvm_cmd:
$LN12@ecpsvm_cmd:

; 8762 :     }
; 8763 : 
; 8764 :     return rc;

  0070e	8b 44 24 58	 mov	 eax, DWORD PTR rc$[rsp]

; 8765 : }

  00712	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0071a	48 33 cc	 xor	 rcx, rsp
  0071d	e8 00 00 00 00	 call	 __security_check_cookie
  00722	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  00729	c3		 ret	 0
ecpsvm_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
rc$1 = 80
tv77 = 88
tv90 = 96
tv92 = 104
tv141 = 112
tv143 = 120
argc$ = 144
argv$ = 152
cmdline$ = 160
modpath_cmd PROC

; 8627 : {

$LN14:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
$LN4@modpath_cm:

; 8628 :     UNREFERENCED( cmdline );

  00015	33 c0		 xor	 eax, eax
  00017	85 c0		 test	 eax, eax
  00019	75 fa		 jne	 SHORT $LN4@modpath_cm
$LN7@modpath_cm:

; 8629 : 
; 8630 :     UPPER_ARGV_0( argv );

  0001b	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00024	74 47		 je	 SHORT $LN8@modpath_cm
  00026	b8 08 00 00 00	 mov	 eax, 8
  0002b	48 6b c0 00	 imul	 rax, rax, 0
  0002f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00037	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0003c	74 2f		 je	 SHORT $LN8@modpath_cm
  0003e	b8 08 00 00 00	 mov	 eax, 8
  00043	48 6b c0 00	 imul	 rax, rax, 0
  00047	b9 08 00 00 00	 mov	 ecx, 8
  0004c	48 6b c9 00	 imul	 rcx, rcx, 0
  00050	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00058	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0005c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00064	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00068	e8 00 00 00 00	 call	 strupper
$LN8@modpath_cm:
  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 a8		 jne	 SHORT $LN7@modpath_cm

; 8631 : 
; 8632 :     if (argc > 2)

  00073	83 bc 24 90 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0007b	7e 75		 jle	 SHORT $LN9@modpath_cm

; 8633 :     {
; 8634 :         // "HDL: incorrect syntax. Enter \"help %s\" for assistance"
; 8635 :         WRMSG( HHC01530, "E", argv[0] );

  0007d	b8 08 00 00 00	 mov	 eax, 8
  00082	48 6b c0 00	 imul	 rax, rax, 0
  00086	48 89 44 24 58	 mov	 QWORD PTR tv77[rsp], rax
  0008b	b9 01 00 00 00	 mov	 ecx, 1
  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00096	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0009e	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv77[rsp]
  000a3	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000a7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211179
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211180
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211181
  000d6	ba bb 21 00 00	 mov	 edx, 8635		; 000021bbH
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211182
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8636 :         return -1;

  000e8	b8 ff ff ff ff	 mov	 eax, -1
  000ed	e9 44 01 00 00	 jmp	 $LN1@modpath_cm
$LN9@modpath_cm:

; 8637 :     }
; 8638 : 
; 8639 :     if (argc < 2)

  000f2	83 bc 24 90 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000fa	0f 8d 85 00 00
	00		 jge	 $LN10@modpath_cm

; 8640 :     {
; 8641 :         // "%-14s: %s"
; 8642 :         WRMSG( HHC02203, "I", argv[0], hdl_getpath() );

  00100	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hdl_getpath
  00106	48 89 44 24 60	 mov	 QWORD PTR tv90[rsp], rax
  0010b	b9 08 00 00 00	 mov	 ecx, 8
  00110	48 6b c9 00	 imul	 rcx, rcx, 0
  00114	48 89 4c 24 68	 mov	 QWORD PTR tv92[rsp], rcx
  00119	b9 01 00 00 00	 mov	 ecx, 1
  0011e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00124	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv90[rsp]
  00129	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0012e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00136	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv92[rsp]
  0013b	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0013f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00144	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211185
  0014b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00150	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211186
  00157	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0015c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00161	41 b9 03 00 00
	00		 mov	 r9d, 3
  00167	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211187
  0016e	ba c2 21 00 00	 mov	 edx, 8642		; 000021c2H
  00173	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211188
  0017a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8643 :     }

  00180	e9 af 00 00 00	 jmp	 $LN11@modpath_cm
$LN10@modpath_cm:

; 8644 :     else
; 8645 :     {
; 8646 :         int rc = hdl_setpath( argv[1] );

  00185	b8 08 00 00 00	 mov	 eax, 8
  0018a	48 6b c0 01	 imul	 rax, rax, 1
  0018e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00196	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0019a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hdl_setpath
  001a0	89 44 24 50	 mov	 DWORD PTR rc$1[rsp], eax

; 8647 : 
; 8648 :         if (rc != 0)

  001a4	83 7c 24 50 00	 cmp	 DWORD PTR rc$1[rsp], 0
  001a9	74 09		 je	 SHORT $LN12@modpath_cm

; 8649 :             return rc;  // (error or warning message already issued)

  001ab	8b 44 24 50	 mov	 eax, DWORD PTR rc$1[rsp]
  001af	e9 82 00 00 00	 jmp	 $LN1@modpath_cm
$LN12@modpath_cm:

; 8650 : 
; 8651 :         // "%-14s set to %s"
; 8652 :         WRMSG( HHC02204, "I", argv[0], hdl_getpath() );

  001b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hdl_getpath
  001ba	48 89 44 24 70	 mov	 QWORD PTR tv141[rsp], rax
  001bf	b9 08 00 00 00	 mov	 ecx, 8
  001c4	48 6b c9 00	 imul	 rcx, rcx, 0
  001c8	48 89 4c 24 78	 mov	 QWORD PTR tv143[rsp], rcx
  001cd	b9 01 00 00 00	 mov	 ecx, 1
  001d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001d8	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv141[rsp]
  001dd	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001e2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001ea	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv143[rsp]
  001ef	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001f3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211190
  001ff	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00204	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211191
  0020b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00210	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00215	41 b9 03 00 00
	00		 mov	 r9d, 3
  0021b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211192
  00222	ba cc 21 00 00	 mov	 edx, 8652		; 000021ccH
  00227	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211193
  0022e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN11@modpath_cm:

; 8653 :     }
; 8654 : 
; 8655 :     return 0;

  00234	33 c0		 xor	 eax, eax
$LN1@modpath_cm:

; 8656 : }

  00236	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0023d	c3		 ret	 0
modpath_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv77 = 64
argc$ = 96
argv$ = 104
cmdline$ = 112
lsequ_cmd PROC

; 8608 : {

$LN11:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@lsequ_cmd:

; 8609 :     UNREFERENCED( cmdline );

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@lsequ_cmd
$LN7@lsequ_cmd:

; 8610 : 
; 8611 :     UPPER_ARGV_0( argv );

  00018	48 83 7c 24 68
	00		 cmp	 QWORD PTR argv$[rsp], 0
  0001e	74 3e		 je	 SHORT $LN8@lsequ_cmd
  00020	b8 08 00 00 00	 mov	 eax, 8
  00025	48 6b c0 00	 imul	 rax, rax, 0
  00029	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  0002e	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00033	74 29		 je	 SHORT $LN8@lsequ_cmd
  00035	b8 08 00 00 00	 mov	 eax, 8
  0003a	48 6b c0 00	 imul	 rax, rax, 0
  0003e	b9 08 00 00 00	 mov	 ecx, 8
  00043	48 6b c9 00	 imul	 rcx, rcx, 0
  00047	48 8b 54 24 68	 mov	 rdx, QWORD PTR argv$[rsp]
  0004c	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00050	48 8b 44 24 68	 mov	 rax, QWORD PTR argv$[rsp]
  00055	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00059	e8 00 00 00 00	 call	 strupper
$LN8@lsequ_cmd:
  0005e	33 c0		 xor	 eax, eax
  00060	85 c0		 test	 eax, eax
  00062	75 b4		 jne	 SHORT $LN7@lsequ_cmd

; 8612 : 
; 8613 :     if (argc != 1)

  00064	83 7c 24 60 01	 cmp	 DWORD PTR argc$[rsp], 1
  00069	74 6f		 je	 SHORT $LN9@lsequ_cmd

; 8614 :     {
; 8615 :         // "Invalid command usage. Type 'help %s' for assistance."
; 8616 :         WRMSG( HHC02299, "E", argv[0] );

  0006b	b8 08 00 00 00	 mov	 eax, 8
  00070	48 6b c0 00	 imul	 rax, rax, 0
  00074	48 89 44 24 40	 mov	 QWORD PTR tv77[rsp], rax
  00079	b9 01 00 00 00	 mov	 ecx, 1
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00084	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  00089	48 8b 54 24 40	 mov	 rdx, QWORD PTR tv77[rsp]
  0008e	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00092	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211158
  0009e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211159
  000aa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000af	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b4	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211160
  000c1	ba a8 21 00 00	 mov	 edx, 8616		; 000021a8H
  000c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211161
  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8617 :         return -1;

  000d3	b8 ff ff ff ff	 mov	 eax, -1
  000d8	eb 06		 jmp	 SHORT $LN1@lsequ_cmd
$LN9@lsequ_cmd:

; 8618 :     }
; 8619 : 
; 8620 :     return hdl_listequs();

  000da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hdl_listequs
$LN1@lsequ_cmd:

; 8621 : }

  000e0	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000e4	c3		 ret	 0
lsequ_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv77 = 64
argc$ = 96
argv$ = 104
cmdline$ = 112
lsdep_cmd PROC

; 8588 : {

$LN11:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@lsdep_cmd:

; 8589 :     UNREFERENCED( cmdline );

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@lsdep_cmd
$LN7@lsdep_cmd:

; 8590 : 
; 8591 :     UPPER_ARGV_0( argv );

  00018	48 83 7c 24 68
	00		 cmp	 QWORD PTR argv$[rsp], 0
  0001e	74 3e		 je	 SHORT $LN8@lsdep_cmd
  00020	b8 08 00 00 00	 mov	 eax, 8
  00025	48 6b c0 00	 imul	 rax, rax, 0
  00029	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  0002e	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00033	74 29		 je	 SHORT $LN8@lsdep_cmd
  00035	b8 08 00 00 00	 mov	 eax, 8
  0003a	48 6b c0 00	 imul	 rax, rax, 0
  0003e	b9 08 00 00 00	 mov	 ecx, 8
  00043	48 6b c9 00	 imul	 rcx, rcx, 0
  00047	48 8b 54 24 68	 mov	 rdx, QWORD PTR argv$[rsp]
  0004c	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00050	48 8b 44 24 68	 mov	 rax, QWORD PTR argv$[rsp]
  00055	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00059	e8 00 00 00 00	 call	 strupper
$LN8@lsdep_cmd:
  0005e	33 c0		 xor	 eax, eax
  00060	85 c0		 test	 eax, eax
  00062	75 b4		 jne	 SHORT $LN7@lsdep_cmd

; 8592 : 
; 8593 :     if (argc != 1)

  00064	83 7c 24 60 01	 cmp	 DWORD PTR argc$[rsp], 1
  00069	74 6f		 je	 SHORT $LN9@lsdep_cmd

; 8594 :     {
; 8595 :         // "Invalid command usage. Type 'help %s' for assistance."
; 8596 :         WRMSG( HHC02299, "E", argv[0] );

  0006b	b8 08 00 00 00	 mov	 eax, 8
  00070	48 6b c0 00	 imul	 rax, rax, 0
  00074	48 89 44 24 40	 mov	 QWORD PTR tv77[rsp], rax
  00079	b9 01 00 00 00	 mov	 ecx, 1
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00084	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  00089	48 8b 54 24 40	 mov	 rdx, QWORD PTR tv77[rsp]
  0008e	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00092	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211138
  0009e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211139
  000aa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000af	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b4	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211140
  000c1	ba 94 21 00 00	 mov	 edx, 8596		; 00002194H
  000c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211141
  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8597 :         return -1;

  000d3	b8 ff ff ff ff	 mov	 eax, -1
  000d8	eb 08		 jmp	 SHORT $LN1@lsdep_cmd
$LN9@lsdep_cmd:

; 8598 :     }
; 8599 : 
; 8600 :     hdl_listdeps();

  000da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hdl_listdeps

; 8601 :     return 0;

  000e0	33 c0		 xor	 eax, eax
$LN1@lsdep_cmd:

; 8602 : }

  000e2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000e6	c3		 ret	 0
lsdep_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
flags$ = 64
tv86 = 72
argc$ = 96
argv$ = 104
cmdline$ = 112
lsmod_cmd PROC

; 8558 : {

$LN13:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 8559 :     int flags = HDL_LIST_DEFAULT;

  00012	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR flags$[rsp], 0
$LN4@lsmod_cmd:

; 8560 : 
; 8561 :     UNREFERENCED( cmdline );

  0001a	33 c0		 xor	 eax, eax
  0001c	85 c0		 test	 eax, eax
  0001e	75 fa		 jne	 SHORT $LN4@lsmod_cmd
$LN7@lsmod_cmd:

; 8562 : 
; 8563 :     UPPER_ARGV_0( argv );

  00020	48 83 7c 24 68
	00		 cmp	 QWORD PTR argv$[rsp], 0
  00026	74 3e		 je	 SHORT $LN8@lsmod_cmd
  00028	b8 08 00 00 00	 mov	 eax, 8
  0002d	48 6b c0 00	 imul	 rax, rax, 0
  00031	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  00036	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0003b	74 29		 je	 SHORT $LN8@lsmod_cmd
  0003d	b8 08 00 00 00	 mov	 eax, 8
  00042	48 6b c0 00	 imul	 rax, rax, 0
  00046	b9 08 00 00 00	 mov	 ecx, 8
  0004b	48 6b c9 00	 imul	 rcx, rcx, 0
  0004f	48 8b 54 24 68	 mov	 rdx, QWORD PTR argv$[rsp]
  00054	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00058	48 8b 44 24 68	 mov	 rax, QWORD PTR argv$[rsp]
  0005d	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00061	e8 00 00 00 00	 call	 strupper
$LN8@lsmod_cmd:
  00066	33 c0		 xor	 eax, eax
  00068	85 c0		 test	 eax, eax
  0006a	75 b4		 jne	 SHORT $LN7@lsmod_cmd

; 8564 : 
; 8565 :     if (argc > 1)

  0006c	83 7c 24 60 01	 cmp	 DWORD PTR argc$[rsp], 1
  00071	0f 8e ac 00 00
	00		 jle	 $LN9@lsmod_cmd

; 8566 :     {
; 8567 :         if (0
; 8568 :             || argc > 2
; 8569 :             || !CMD( argv[1], ALL, 3 )

  00077	33 c0		 xor	 eax, eax
  00079	85 c0		 test	 eax, eax
  0007b	75 2f		 jne	 SHORT $LN11@lsmod_cmd
  0007d	83 7c 24 60 02	 cmp	 DWORD PTR argc$[rsp], 2
  00082	7f 28		 jg	 SHORT $LN11@lsmod_cmd
  00084	b8 08 00 00 00	 mov	 eax, 8
  00089	48 6b c0 01	 imul	 rax, rax, 1
  0008d	41 b8 03 00 00
	00		 mov	 r8d, 3
  00093	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  00098	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211117
  000a3	e8 00 00 00 00	 call	 strcaseabbrev
  000a8	85 c0		 test	 eax, eax
  000aa	75 6f		 jne	 SHORT $LN10@lsmod_cmd
$LN11@lsmod_cmd:

; 8570 :         )
; 8571 :         {
; 8572 :             // "Invalid command usage. Type 'help %s' for assistance."
; 8573 :             WRMSG( HHC02299, "E", argv[0] );

  000ac	b8 08 00 00 00	 mov	 eax, 8
  000b1	48 6b c0 00	 imul	 rax, rax, 0
  000b5	48 89 44 24 48	 mov	 QWORD PTR tv86[rsp], rax
  000ba	b9 01 00 00 00	 mov	 ecx, 1
  000bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000c5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  000ca	48 8b 54 24 48	 mov	 rdx, QWORD PTR tv86[rsp]
  000cf	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000d3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211118
  000df	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211119
  000eb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f5	41 b9 03 00 00
	00		 mov	 r9d, 3
  000fb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211120
  00102	ba 7d 21 00 00	 mov	 edx, 8573		; 0000217dH
  00107	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211121
  0010e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8574 :             return -1;

  00114	b8 ff ff ff ff	 mov	 eax, -1
  00119	eb 14		 jmp	 SHORT $LN1@lsmod_cmd
$LN10@lsmod_cmd:

; 8575 :         }
; 8576 : 
; 8577 :         flags = HDL_LIST_ALL;

  0011b	c7 44 24 40 00
	00 00 80	 mov	 DWORD PTR flags$[rsp], -2147483648 ; ffffffff80000000H
$LN9@lsmod_cmd:

; 8578 :     }
; 8579 : 
; 8580 :     hdl_listmods( flags );

  00123	8b 4c 24 40	 mov	 ecx, DWORD PTR flags$[rsp]
  00127	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hdl_listmods

; 8581 :     return 0;

  0012d	33 c0		 xor	 eax, eax
$LN1@lsmod_cmd:

; 8582 : }

  0012f	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00133	c3		 ret	 0
lsmod_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
i$ = 64
tv77 = 72
tv91 = 80
tv142 = 88
argc$ = 112
argv$ = 120
cmdline$ = 128
rmmod_cmd PROC

; 8527 : {

$LN15:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@rmmod_cmd:

; 8528 :     int  i;
; 8529 : 
; 8530 :     UNREFERENCED( cmdline );

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@rmmod_cmd
$LN7@rmmod_cmd:

; 8531 : 
; 8532 :     UPPER_ARGV_0( argv );

  00018	48 83 7c 24 78
	00		 cmp	 QWORD PTR argv$[rsp], 0
  0001e	74 3e		 je	 SHORT $LN11@rmmod_cmd
  00020	b8 08 00 00 00	 mov	 eax, 8
  00025	48 6b c0 00	 imul	 rax, rax, 0
  00029	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  0002e	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00033	74 29		 je	 SHORT $LN11@rmmod_cmd
  00035	b8 08 00 00 00	 mov	 eax, 8
  0003a	48 6b c0 00	 imul	 rax, rax, 0
  0003e	b9 08 00 00 00	 mov	 ecx, 8
  00043	48 6b c9 00	 imul	 rcx, rcx, 0
  00047	48 8b 54 24 78	 mov	 rdx, QWORD PTR argv$[rsp]
  0004c	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00050	48 8b 44 24 78	 mov	 rax, QWORD PTR argv$[rsp]
  00055	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00059	e8 00 00 00 00	 call	 strupper
$LN11@rmmod_cmd:
  0005e	33 c0		 xor	 eax, eax
  00060	85 c0		 test	 eax, eax
  00062	75 b4		 jne	 SHORT $LN7@rmmod_cmd

; 8533 : 
; 8534 :     if (argc <= 1)

  00064	83 7c 24 70 01	 cmp	 DWORD PTR argc$[rsp], 1
  00069	7f 72		 jg	 SHORT $LN12@rmmod_cmd

; 8535 :     {
; 8536 :         // "HDL: usage: %s <module>"
; 8537 :         WRMSG( HHC01525, "E", argv[ 0 ]);

  0006b	b8 08 00 00 00	 mov	 eax, 8
  00070	48 6b c0 00	 imul	 rax, rax, 0
  00074	48 89 44 24 48	 mov	 QWORD PTR tv77[rsp], rax
  00079	b9 01 00 00 00	 mov	 ecx, 1
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00084	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00089	48 8b 54 24 48	 mov	 rdx, QWORD PTR tv77[rsp]
  0008e	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00092	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211085
  0009e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211086
  000aa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000af	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b4	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211087
  000c1	ba 59 21 00 00	 mov	 edx, 8537		; 00002159H
  000c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211088
  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8538 :         return -1;

  000d3	b8 ff ff ff ff	 mov	 eax, -1
  000d8	e9 09 01 00 00	 jmp	 $LN1@rmmod_cmd
$LN12@rmmod_cmd:

; 8539 :     }
; 8540 : 
; 8541 :     for (i=1; i < argc; i++)

  000dd	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  000e5	eb 0a		 jmp	 SHORT $LN10@rmmod_cmd
$LN8@rmmod_cmd:
  000e7	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  000eb	ff c0		 inc	 eax
  000ed	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN10@rmmod_cmd:
  000f1	8b 44 24 70	 mov	 eax, DWORD PTR argc$[rsp]
  000f5	39 44 24 40	 cmp	 DWORD PTR i$[rsp], eax
  000f9	0f 8d e5 00 00
	00		 jge	 $LN9@rmmod_cmd

; 8542 :     {
; 8543 :         // "HDL: unloading module %s..."
; 8544 :         WRMSG( HHC01528, "I", argv[ i ]);

  000ff	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00104	48 89 44 24 50	 mov	 QWORD PTR tv91[rsp], rax
  00109	b9 01 00 00 00	 mov	 ecx, 1
  0010e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00114	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00119	48 8b 54 24 50	 mov	 rdx, QWORD PTR tv91[rsp]
  0011e	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00122	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00127	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211089
  0012e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00133	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211090
  0013a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0013f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00144	41 b9 03 00 00
	00		 mov	 r9d, 3
  0014a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211091
  00151	ba 60 21 00 00	 mov	 edx, 8544		; 00002160H
  00156	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211092
  0015d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8545 : 
; 8546 :         if (hdl_freemod( argv[ i ]) == 0)

  00163	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00168	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  0016d	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hdl_freemod
  00177	85 c0		 test	 eax, eax
  00179	75 64		 jne	 SHORT $LN13@rmmod_cmd

; 8547 :             // "HDL: module %s unloaded"
; 8548 :             WRMSG( HHC01529, "I", argv[ i ]);

  0017b	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00180	48 89 44 24 58	 mov	 QWORD PTR tv142[rsp], rax
  00185	b9 01 00 00 00	 mov	 ecx, 1
  0018a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00190	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00195	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv142[rsp]
  0019a	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  0019e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211094
  001aa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211095
  001b6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001bb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001c0	41 b9 03 00 00
	00		 mov	 r9d, 3
  001c6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211096
  001cd	ba 64 21 00 00	 mov	 edx, 8548		; 00002164H
  001d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211097
  001d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN13@rmmod_cmd:

; 8549 :     }

  001df	e9 03 ff ff ff	 jmp	 $LN8@rmmod_cmd
$LN9@rmmod_cmd:

; 8550 : 
; 8551 :     return 0;

  001e4	33 c0		 xor	 eax, eax
$LN1@rmmod_cmd:

; 8552 : }

  001e6	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001ea	c3		 ret	 0
rmmod_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
i$ = 64
tv77 = 72
tv91 = 80
tv143 = 88
argc$ = 112
argv$ = 120
cmdline$ = 128
ldmod_cmd PROC

; 8496 : {

$LN15:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@ldmod_cmd:

; 8497 :     int  i;
; 8498 : 
; 8499 :     UNREFERENCED( cmdline );

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@ldmod_cmd
$LN7@ldmod_cmd:

; 8500 : 
; 8501 :     UPPER_ARGV_0( argv );

  00018	48 83 7c 24 78
	00		 cmp	 QWORD PTR argv$[rsp], 0
  0001e	74 3e		 je	 SHORT $LN11@ldmod_cmd
  00020	b8 08 00 00 00	 mov	 eax, 8
  00025	48 6b c0 00	 imul	 rax, rax, 0
  00029	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  0002e	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00033	74 29		 je	 SHORT $LN11@ldmod_cmd
  00035	b8 08 00 00 00	 mov	 eax, 8
  0003a	48 6b c0 00	 imul	 rax, rax, 0
  0003e	b9 08 00 00 00	 mov	 ecx, 8
  00043	48 6b c9 00	 imul	 rcx, rcx, 0
  00047	48 8b 54 24 78	 mov	 rdx, QWORD PTR argv$[rsp]
  0004c	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00050	48 8b 44 24 78	 mov	 rax, QWORD PTR argv$[rsp]
  00055	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00059	e8 00 00 00 00	 call	 strupper
$LN11@ldmod_cmd:
  0005e	33 c0		 xor	 eax, eax
  00060	85 c0		 test	 eax, eax
  00062	75 b4		 jne	 SHORT $LN7@ldmod_cmd

; 8502 : 
; 8503 :     if (argc <= 1)

  00064	83 7c 24 70 01	 cmp	 DWORD PTR argc$[rsp], 1
  00069	7f 72		 jg	 SHORT $LN12@ldmod_cmd

; 8504 :     {
; 8505 :         // "HDL: usage: %s <module>"
; 8506 :         WRMSG( HHC01525, "E", argv[ 0 ]);

  0006b	b8 08 00 00 00	 mov	 eax, 8
  00070	48 6b c0 00	 imul	 rax, rax, 0
  00074	48 89 44 24 48	 mov	 QWORD PTR tv77[rsp], rax
  00079	b9 01 00 00 00	 mov	 ecx, 1
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00084	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00089	48 8b 54 24 48	 mov	 rdx, QWORD PTR tv77[rsp]
  0008e	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00092	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211052
  0009e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211053
  000aa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000af	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b4	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211054
  000c1	ba 3a 21 00 00	 mov	 edx, 8506		; 0000213aH
  000c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211055
  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8507 :         return -1;

  000d3	b8 ff ff ff ff	 mov	 eax, -1
  000d8	e9 0b 01 00 00	 jmp	 $LN1@ldmod_cmd
$LN12@ldmod_cmd:

; 8508 :     }
; 8509 : 
; 8510 :     for (i=1; i < argc; i++)

  000dd	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  000e5	eb 0a		 jmp	 SHORT $LN10@ldmod_cmd
$LN8@ldmod_cmd:
  000e7	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  000eb	ff c0		 inc	 eax
  000ed	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN10@ldmod_cmd:
  000f1	8b 44 24 70	 mov	 eax, DWORD PTR argc$[rsp]
  000f5	39 44 24 40	 cmp	 DWORD PTR i$[rsp], eax
  000f9	0f 8d e7 00 00
	00		 jge	 $LN9@ldmod_cmd

; 8511 :     {
; 8512 :         // "HDL: loading module %s..."
; 8513 :         WRMSG( HHC01526, "I", argv[ i ]);

  000ff	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00104	48 89 44 24 50	 mov	 QWORD PTR tv91[rsp], rax
  00109	b9 01 00 00 00	 mov	 ecx, 1
  0010e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00114	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00119	48 8b 54 24 50	 mov	 rdx, QWORD PTR tv91[rsp]
  0011e	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00122	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00127	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211056
  0012e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00133	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211057
  0013a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0013f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00144	41 b9 03 00 00
	00		 mov	 r9d, 3
  0014a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211058
  00151	ba 41 21 00 00	 mov	 edx, 8513		; 00002141H
  00156	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211059
  0015d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8514 : 
; 8515 :         if (hdl_loadmod( argv[i], 0 ) == 0)

  00163	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00168	33 d2		 xor	 edx, edx
  0016a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  0016f	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00173	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hdl_loadmod
  00179	85 c0		 test	 eax, eax
  0017b	75 64		 jne	 SHORT $LN13@ldmod_cmd

; 8516 :             // "HDL: module %s loaded"
; 8517 :             WRMSG( HHC01527, "I", argv[ i ]);

  0017d	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00182	48 89 44 24 58	 mov	 QWORD PTR tv143[rsp], rax
  00187	b9 01 00 00 00	 mov	 ecx, 1
  0018c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00192	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00197	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv143[rsp]
  0019c	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  001a0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211061
  001ac	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211062
  001b8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001bd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001c2	41 b9 03 00 00
	00		 mov	 r9d, 3
  001c8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211063
  001cf	ba 45 21 00 00	 mov	 edx, 8517		; 00002145H
  001d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211064
  001db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN13@ldmod_cmd:

; 8518 :     }

  001e1	e9 01 ff ff ff	 jmp	 $LN8@ldmod_cmd
$LN9@ldmod_cmd:

; 8519 : 
; 8520 :     return 0;

  001e6	33 c0		 xor	 eax, eax
$LN1@ldmod_cmd:

; 8521 : }

  001e8	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001ec	c3		 ret	 0
ldmod_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv160 = 80
tv178 = 88
tv130 = 96
tv143 = 104
tv162 = 112
tv180 = 120
argc$ = 144
argv$ = 152
cmdline$ = 160
scpimply_cmd PROC

; 8461 : {

$LN23:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
$LN4@scpimply_c:

; 8462 :     UNREFERENCED(cmdline);

  00015	33 c0		 xor	 eax, eax
  00017	85 c0		 test	 eax, eax
  00019	75 fa		 jne	 SHORT $LN4@scpimply_c
$LN7@scpimply_c:

; 8463 : 
; 8464 :     UPPER_ARGV_0( argv );

  0001b	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00024	74 47		 je	 SHORT $LN8@scpimply_c
  00026	b8 08 00 00 00	 mov	 eax, 8
  0002b	48 6b c0 00	 imul	 rax, rax, 0
  0002f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00037	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0003c	74 2f		 je	 SHORT $LN8@scpimply_c
  0003e	b8 08 00 00 00	 mov	 eax, 8
  00043	48 6b c0 00	 imul	 rax, rax, 0
  00047	b9 08 00 00 00	 mov	 ecx, 8
  0004c	48 6b c9 00	 imul	 rcx, rcx, 0
  00050	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00058	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0005c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00064	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00068	e8 00 00 00 00	 call	 strupper
$LN8@scpimply_c:
  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 a8		 jne	 SHORT $LN7@scpimply_c

; 8465 : 
; 8466 :     if ( argc == 2 )

  00073	83 bc 24 90 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0007b	0f 85 17 01 00
	00		 jne	 $LN9@scpimply_c

; 8467 :     {
; 8468 :         if ( CMD(argv[1],on,2) )

  00081	b8 08 00 00 00	 mov	 eax, 8
  00086	48 6b c0 01	 imul	 rax, rax, 1
  0008a	41 b8 02 00 00
	00		 mov	 r8d, 2
  00090	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00098	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211004
  000a3	e8 00 00 00 00	 call	 strcaseabbrev
  000a8	85 c0		 test	 eax, eax
  000aa	74 22		 je	 SHORT $LN11@scpimply_c

; 8469 :             sysblk.scpimply = TRUE;

  000ac	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000b3	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  000b9	83 c8 40	 or	 eax, 64			; 00000040H
  000bc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000c3	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax
  000c9	e9 c8 00 00 00	 jmp	 $LN12@scpimply_c
$LN11@scpimply_c:

; 8470 :         else if ( CMD(argv[1],off,3) )

  000ce	b8 08 00 00 00	 mov	 eax, 8
  000d3	48 6b c0 01	 imul	 rax, rax, 1
  000d7	41 b8 03 00 00
	00		 mov	 r8d, 3
  000dd	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000e5	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211007
  000f0	e8 00 00 00 00	 call	 strcaseabbrev
  000f5	85 c0		 test	 eax, eax
  000f7	74 1f		 je	 SHORT $LN13@scpimply_c

; 8471 :             sysblk.scpimply = FALSE;

  000f9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00100	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00106	83 e0 bf	 and	 eax, -65		; ffffffbfH
  00109	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00110	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax
  00116	eb 7e		 jmp	 SHORT $LN14@scpimply_c
$LN13@scpimply_c:

; 8472 :         else
; 8473 :         {
; 8474 :             WRMSG( HHC02205, "E", argv[1], "" );

  00118	b8 08 00 00 00	 mov	 eax, 8
  0011d	48 6b c0 01	 imul	 rax, rax, 1
  00121	48 89 44 24 60	 mov	 QWORD PTR tv130[rsp], rax
  00126	b9 01 00 00 00	 mov	 ecx, 1
  0012b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00131	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211008
  00138	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0013d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00145	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv130[rsp]
  0014a	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0014e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00153	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211009
  0015a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0015f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211010
  00166	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0016b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00170	41 b9 03 00 00
	00		 mov	 r9d, 3
  00176	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211011
  0017d	ba 1a 21 00 00	 mov	 edx, 8474		; 0000211aH
  00182	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211012
  00189	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8475 :             return 0;

  0018f	33 c0		 xor	 eax, eax
  00191	e9 df 01 00 00	 jmp	 $LN1@scpimply_c
$LN14@scpimply_c:
$LN12@scpimply_c:

; 8476 :         }
; 8477 :     }

  00196	eb 7c		 jmp	 SHORT $LN10@scpimply_c
$LN9@scpimply_c:

; 8478 :     else if ( argc > 2 )

  00198	83 bc 24 90 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  001a0	7e 72		 jle	 SHORT $LN15@scpimply_c

; 8479 :     {
; 8480 :         WRMSG( HHC02299, "E", argv[0] );

  001a2	b8 08 00 00 00	 mov	 eax, 8
  001a7	48 6b c0 00	 imul	 rax, rax, 0
  001ab	48 89 44 24 68	 mov	 QWORD PTR tv143[rsp], rax
  001b0	b9 01 00 00 00	 mov	 ecx, 1
  001b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001bb	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001c3	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv143[rsp]
  001c8	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001cc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211014
  001d8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211015
  001e4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001e9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ee	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211016
  001fb	ba 20 21 00 00	 mov	 edx, 8480		; 00002120H
  00200	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211017
  00207	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8481 :         return 0;

  0020d	33 c0		 xor	 eax, eax
  0020f	e9 61 01 00 00	 jmp	 $LN1@scpimply_c
$LN15@scpimply_c:
$LN10@scpimply_c:

; 8482 :     }
; 8483 : 
; 8484 :     if ( argc == 1 )

  00214	83 bc 24 90 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0021c	0f 85 ab 00 00
	00		 jne	 $LN16@scpimply_c

; 8485 :         WRMSG(HHC02203, "I", argv[0], (sysblk.scpimply ? "ON" : "OFF") );

  00222	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00229	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  0022f	c1 e8 06	 shr	 eax, 6
  00232	83 e0 01	 and	 eax, 1
  00235	85 c0		 test	 eax, eax
  00237	74 0e		 je	 SHORT $LN19@scpimply_c
  00239	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG211020
  00240	48 89 44 24 50	 mov	 QWORD PTR tv160[rsp], rax
  00245	eb 0c		 jmp	 SHORT $LN20@scpimply_c
$LN19@scpimply_c:
  00247	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG211021
  0024e	48 89 44 24 50	 mov	 QWORD PTR tv160[rsp], rax
$LN20@scpimply_c:
  00253	b8 08 00 00 00	 mov	 eax, 8
  00258	48 6b c0 00	 imul	 rax, rax, 0
  0025c	48 89 44 24 70	 mov	 QWORD PTR tv162[rsp], rax
  00261	b9 01 00 00 00	 mov	 ecx, 1
  00266	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0026c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv160[rsp]
  00271	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00276	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0027e	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv162[rsp]
  00283	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00287	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0028c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211022
  00293	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00298	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211023
  0029f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002a4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002a9	41 b9 03 00 00
	00		 mov	 r9d, 3
  002af	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211024
  002b6	ba 25 21 00 00	 mov	 edx, 8485		; 00002125H
  002bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211025
  002c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  002c8	e9 a6 00 00 00	 jmp	 $LN17@scpimply_c
$LN16@scpimply_c:

; 8486 :     else
; 8487 :         WRMSG(HHC02204, "I", argv[0], (sysblk.scpimply ? "ON" : "OFF") );

  002cd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002d4	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  002da	c1 e8 06	 shr	 eax, 6
  002dd	83 e0 01	 and	 eax, 1
  002e0	85 c0		 test	 eax, eax
  002e2	74 0e		 je	 SHORT $LN21@scpimply_c
  002e4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG211026
  002eb	48 89 44 24 58	 mov	 QWORD PTR tv178[rsp], rax
  002f0	eb 0c		 jmp	 SHORT $LN22@scpimply_c
$LN21@scpimply_c:
  002f2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG211027
  002f9	48 89 44 24 58	 mov	 QWORD PTR tv178[rsp], rax
$LN22@scpimply_c:
  002fe	b8 08 00 00 00	 mov	 eax, 8
  00303	48 6b c0 00	 imul	 rax, rax, 0
  00307	48 89 44 24 78	 mov	 QWORD PTR tv180[rsp], rax
  0030c	b9 01 00 00 00	 mov	 ecx, 1
  00311	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00317	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv178[rsp]
  0031c	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00321	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00329	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv180[rsp]
  0032e	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00332	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00337	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211028
  0033e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00343	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211029
  0034a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0034f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00354	41 b9 03 00 00
	00		 mov	 r9d, 3
  0035a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211030
  00361	ba 27 21 00 00	 mov	 edx, 8487		; 00002127H
  00366	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211031
  0036d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@scpimply_c:

; 8488 :     return 0;

  00373	33 c0		 xor	 eax, eax
$LN1@scpimply_c:

; 8489 : }

  00375	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0037c	c3		 ret	 0
scpimply_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv160 = 80
tv178 = 88
tv130 = 96
tv143 = 104
tv162 = 112
tv180 = 120
argc$ = 144
argv$ = 152
cmdline$ = 160
scpecho_cmd PROC

; 8426 : {

$LN23:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
$LN4@scpecho_cm:

; 8427 :     UNREFERENCED(cmdline);

  00015	33 c0		 xor	 eax, eax
  00017	85 c0		 test	 eax, eax
  00019	75 fa		 jne	 SHORT $LN4@scpecho_cm
$LN7@scpecho_cm:

; 8428 : 
; 8429 :     UPPER_ARGV_0( argv );

  0001b	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00024	74 47		 je	 SHORT $LN8@scpecho_cm
  00026	b8 08 00 00 00	 mov	 eax, 8
  0002b	48 6b c0 00	 imul	 rax, rax, 0
  0002f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00037	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0003c	74 2f		 je	 SHORT $LN8@scpecho_cm
  0003e	b8 08 00 00 00	 mov	 eax, 8
  00043	48 6b c0 00	 imul	 rax, rax, 0
  00047	b9 08 00 00 00	 mov	 ecx, 8
  0004c	48 6b c9 00	 imul	 rcx, rcx, 0
  00050	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00058	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0005c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00064	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00068	e8 00 00 00 00	 call	 strupper
$LN8@scpecho_cm:
  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 a8		 jne	 SHORT $LN7@scpecho_cm

; 8430 : 
; 8431 :     if ( argc == 2 )

  00073	83 bc 24 90 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0007b	0f 85 17 01 00
	00		 jne	 $LN9@scpecho_cm

; 8432 :     {
; 8433 :         if ( CMD(argv[1],on,2)  )

  00081	b8 08 00 00 00	 mov	 eax, 8
  00086	48 6b c0 01	 imul	 rax, rax, 1
  0008a	41 b8 02 00 00
	00		 mov	 r8d, 2
  00090	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00098	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210957
  000a3	e8 00 00 00 00	 call	 strcaseabbrev
  000a8	85 c0		 test	 eax, eax
  000aa	74 22		 je	 SHORT $LN11@scpecho_cm

; 8434 :             sysblk.scpecho = TRUE;

  000ac	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000b3	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  000b9	83 c8 20	 or	 eax, 32			; 00000020H
  000bc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000c3	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax
  000c9	e9 c8 00 00 00	 jmp	 $LN12@scpecho_cm
$LN11@scpecho_cm:

; 8435 :         else if ( CMD(argv[1],off,3) )

  000ce	b8 08 00 00 00	 mov	 eax, 8
  000d3	48 6b c0 01	 imul	 rax, rax, 1
  000d7	41 b8 03 00 00
	00		 mov	 r8d, 3
  000dd	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000e5	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210960
  000f0	e8 00 00 00 00	 call	 strcaseabbrev
  000f5	85 c0		 test	 eax, eax
  000f7	74 1f		 je	 SHORT $LN13@scpecho_cm

; 8436 :             sysblk.scpecho = FALSE;

  000f9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00100	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00106	83 e0 df	 and	 eax, -33		; ffffffdfH
  00109	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00110	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax
  00116	eb 7e		 jmp	 SHORT $LN14@scpecho_cm
$LN13@scpecho_cm:

; 8437 :         else
; 8438 :         {
; 8439 :             WRMSG( HHC02205, "E", argv[1], "" );

  00118	b8 08 00 00 00	 mov	 eax, 8
  0011d	48 6b c0 01	 imul	 rax, rax, 1
  00121	48 89 44 24 60	 mov	 QWORD PTR tv130[rsp], rax
  00126	b9 01 00 00 00	 mov	 ecx, 1
  0012b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00131	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210961
  00138	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0013d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00145	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv130[rsp]
  0014a	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0014e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00153	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210962
  0015a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0015f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210963
  00166	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0016b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00170	41 b9 03 00 00
	00		 mov	 r9d, 3
  00176	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210964
  0017d	ba f7 20 00 00	 mov	 edx, 8439		; 000020f7H
  00182	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210965
  00189	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8440 :             return 0;

  0018f	33 c0		 xor	 eax, eax
  00191	e9 df 01 00 00	 jmp	 $LN1@scpecho_cm
$LN14@scpecho_cm:
$LN12@scpecho_cm:

; 8441 :         }
; 8442 :     }

  00196	eb 7c		 jmp	 SHORT $LN10@scpecho_cm
$LN9@scpecho_cm:

; 8443 :     else if ( argc > 2 )

  00198	83 bc 24 90 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  001a0	7e 72		 jle	 SHORT $LN15@scpecho_cm

; 8444 :     {
; 8445 :         WRMSG( HHC02299, "E", argv[0] );

  001a2	b8 08 00 00 00	 mov	 eax, 8
  001a7	48 6b c0 00	 imul	 rax, rax, 0
  001ab	48 89 44 24 68	 mov	 QWORD PTR tv143[rsp], rax
  001b0	b9 01 00 00 00	 mov	 ecx, 1
  001b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001bb	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001c3	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv143[rsp]
  001c8	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001cc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210967
  001d8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210968
  001e4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001e9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ee	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210969
  001fb	ba fd 20 00 00	 mov	 edx, 8445		; 000020fdH
  00200	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210970
  00207	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8446 :         return 0;

  0020d	33 c0		 xor	 eax, eax
  0020f	e9 61 01 00 00	 jmp	 $LN1@scpecho_cm
$LN15@scpecho_cm:
$LN10@scpecho_cm:

; 8447 :     }
; 8448 :     if ( argc == 1 )

  00214	83 bc 24 90 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0021c	0f 85 ab 00 00
	00		 jne	 $LN16@scpecho_cm

; 8449 :         WRMSG(HHC02203, "I", argv[0], (sysblk.scpecho ? "ON" : "OFF") );

  00222	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00229	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  0022f	c1 e8 05	 shr	 eax, 5
  00232	83 e0 01	 and	 eax, 1
  00235	85 c0		 test	 eax, eax
  00237	74 0e		 je	 SHORT $LN19@scpecho_cm
  00239	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG210973
  00240	48 89 44 24 50	 mov	 QWORD PTR tv160[rsp], rax
  00245	eb 0c		 jmp	 SHORT $LN20@scpecho_cm
$LN19@scpecho_cm:
  00247	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG210974
  0024e	48 89 44 24 50	 mov	 QWORD PTR tv160[rsp], rax
$LN20@scpecho_cm:
  00253	b8 08 00 00 00	 mov	 eax, 8
  00258	48 6b c0 00	 imul	 rax, rax, 0
  0025c	48 89 44 24 70	 mov	 QWORD PTR tv162[rsp], rax
  00261	b9 01 00 00 00	 mov	 ecx, 1
  00266	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0026c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv160[rsp]
  00271	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00276	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0027e	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv162[rsp]
  00283	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00287	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0028c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210975
  00293	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00298	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210976
  0029f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002a4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002a9	41 b9 03 00 00
	00		 mov	 r9d, 3
  002af	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210977
  002b6	ba 01 21 00 00	 mov	 edx, 8449		; 00002101H
  002bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210978
  002c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  002c8	e9 a6 00 00 00	 jmp	 $LN17@scpecho_cm
$LN16@scpecho_cm:

; 8450 :     else
; 8451 :         WRMSG(HHC02204, "I", argv[0], (sysblk.scpecho ? "ON" : "OFF") );

  002cd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002d4	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  002da	c1 e8 05	 shr	 eax, 5
  002dd	83 e0 01	 and	 eax, 1
  002e0	85 c0		 test	 eax, eax
  002e2	74 0e		 je	 SHORT $LN21@scpecho_cm
  002e4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG210979
  002eb	48 89 44 24 58	 mov	 QWORD PTR tv178[rsp], rax
  002f0	eb 0c		 jmp	 SHORT $LN22@scpecho_cm
$LN21@scpecho_cm:
  002f2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG210980
  002f9	48 89 44 24 58	 mov	 QWORD PTR tv178[rsp], rax
$LN22@scpecho_cm:
  002fe	b8 08 00 00 00	 mov	 eax, 8
  00303	48 6b c0 00	 imul	 rax, rax, 0
  00307	48 89 44 24 78	 mov	 QWORD PTR tv180[rsp], rax
  0030c	b9 01 00 00 00	 mov	 ecx, 1
  00311	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00317	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv178[rsp]
  0031c	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00321	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00329	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv180[rsp]
  0032e	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00332	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00337	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210981
  0033e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00343	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210982
  0034a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0034f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00354	41 b9 03 00 00
	00		 mov	 r9d, 3
  0035a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210983
  00361	ba 03 21 00 00	 mov	 edx, 8451		; 00002103H
  00366	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210984
  0036d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@scpecho_cm:

; 8452 : 
; 8453 :     return 0;

  00373	33 c0		 xor	 eax, eax
$LN1@scpecho_cm:

; 8454 : }

  00375	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0037c	c3		 ret	 0
scpecho_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
argc$ = 48
argv$ = 56
cmdline$ = 64
ssd_cmd	PROC

; 8408 : {

$LN12:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@ssd_cmd:

; 8409 :     static const U16  count = 0;  // SCLP_READ_EVENT_DATA return value
; 8410 :     static const BYTE unit  = 0;  // SCLP_READ_EVENT_DATA return value
; 8411 : 
; 8412 :     UNREFERENCED( argc );

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@ssd_cmd
$LN7@ssd_cmd:

; 8413 :     UNREFERENCED( argv );

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN7@ssd_cmd
$LN10@ssd_cmd:

; 8414 :     UNREFERENCED( cmdline );

  0001e	33 c0		 xor	 eax, eax
  00020	85 c0		 test	 eax, eax
  00022	75 fa		 jne	 SHORT $LN10@ssd_cmd

; 8415 : 
; 8416 :     signal_quiesce( count, unit );    // (notify guest of shutdown)

  00024	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?unit@?1??ssd_cmd@@9@9
  0002b	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR ?count@?1??ssd_cmd@@9@9
  00032	e8 00 00 00 00	 call	 signal_quiesce

; 8417 : 
; 8418 :     return 0;

  00037	33 c0		 xor	 eax, eax

; 8419 : }

  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
ssd_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
sepchar$1 = 80
sepchar$2 = 84
rc$ = 88
$T3 = 96
$T4 = 104
tv81 = 112
tv131 = 120
tv153 = 128
tv192 = 136
tv215 = 144
tv228 = 152
tv241 = 160
argc$ = 192
argv$ = 200
cmdline$ = 208
cmdsep_cmd PROC

; 8323 : {

$LN27:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 8324 :     int rc = 0;

  00015	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN4@cmdsep_cmd:

; 8325 : 
; 8326 :     UNREFERENCED( cmdline );

  0001d	33 c0		 xor	 eax, eax
  0001f	85 c0		 test	 eax, eax
  00021	75 fa		 jne	 SHORT $LN4@cmdsep_cmd
$LN7@cmdsep_cmd:

; 8327 : 
; 8328 :     UPPER_ARGV_0( argv );

  00023	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  0002c	74 47		 je	 SHORT $LN8@cmdsep_cmd
  0002e	b8 08 00 00 00	 mov	 eax, 8
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0003f	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00044	74 2f		 je	 SHORT $LN8@cmdsep_cmd
  00046	b8 08 00 00 00	 mov	 eax, 8
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	b9 08 00 00 00	 mov	 ecx, 8
  00054	48 6b c9 00	 imul	 rcx, rcx, 0
  00058	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00060	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00064	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0006c	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00070	e8 00 00 00 00	 call	 strupper
$LN8@cmdsep_cmd:
  00075	33 c0		 xor	 eax, eax
  00077	85 c0		 test	 eax, eax
  00079	75 a8		 jne	 SHORT $LN7@cmdsep_cmd

; 8329 : 
; 8330 :     // Display current setting if requested
; 8331 : 
; 8332 :     if (argc == 1)

  0007b	83 bc 24 c0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00083	0f 85 45 01 00
	00		 jne	 $LN9@cmdsep_cmd

; 8333 :     {
; 8334 :         if (!sysblk.cmdsep)

  00089	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00090	0f be 80 2c 11
	00 00		 movsx	 eax, BYTE PTR [rax+4396]
  00097	85 c0		 test	 eax, eax
  00099	75 7c		 jne	 SHORT $LN11@cmdsep_cmd

; 8335 :         {
; 8336 :             // "%-14s: %s"
; 8337 :             WRMSG( HHC02203, "I", argv[0], "Not set" );

  0009b	b8 08 00 00 00	 mov	 eax, 8
  000a0	48 6b c0 00	 imul	 rax, rax, 0
  000a4	48 89 44 24 70	 mov	 QWORD PTR tv81[rsp], rax
  000a9	b9 01 00 00 00	 mov	 ecx, 1
  000ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210875
  000bb	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000c0	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000c8	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv81[rsp]
  000cd	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000d1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210876
  000dd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210877
  000e9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000ee	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f3	41 b9 03 00 00
	00		 mov	 r9d, 3
  000f9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210878
  00100	ba 91 20 00 00	 mov	 edx, 8337		; 00002091H
  00105	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210879
  0010c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8338 :         }

  00112	e9 b2 00 00 00	 jmp	 $LN12@cmdsep_cmd
$LN11@cmdsep_cmd:

; 8339 :         else
; 8340 :         {
; 8341 :             char sepchar[2];
; 8342 : 
; 8343 :             sepchar[0] = sysblk.cmdsep;

  00117	b8 01 00 00 00	 mov	 eax, 1
  0011c	48 6b c0 00	 imul	 rax, rax, 0
  00120	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00127	0f b6 89 2c 11
	00 00		 movzx	 ecx, BYTE PTR [rcx+4396]
  0012e	88 4c 04 50	 mov	 BYTE PTR sepchar$1[rsp+rax], cl

; 8344 :             sepchar[1] = 0;

  00132	48 c7 44 24 60
	01 00 00 00	 mov	 QWORD PTR $T3[rsp], 1
  0013b	48 83 7c 24 60
	02		 cmp	 QWORD PTR $T3[rsp], 2
  00141	73 02		 jae	 SHORT $LN23@cmdsep_cmd
  00143	eb 05		 jmp	 SHORT $LN24@cmdsep_cmd
$LN23@cmdsep_cmd:
  00145	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN24@cmdsep_cmd:
  0014a	48 8b 44 24 60	 mov	 rax, QWORD PTR $T3[rsp]
  0014f	c6 44 04 50 00	 mov	 BYTE PTR sepchar$1[rsp+rax], 0

; 8345 : 
; 8346 :             // "%-14s: %s"
; 8347 :             WRMSG( HHC02203, "I", argv[0], sepchar );

  00154	b8 08 00 00 00	 mov	 eax, 8
  00159	48 6b c0 00	 imul	 rax, rax, 0
  0015d	48 89 44 24 78	 mov	 QWORD PTR tv131[rsp], rax
  00162	b9 01 00 00 00	 mov	 ecx, 1
  00167	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0016d	48 8d 4c 24 50	 lea	 rcx, QWORD PTR sepchar$1[rsp]
  00172	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00177	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0017f	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv131[rsp]
  00184	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00188	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0018d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210880
  00194	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00199	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210881
  001a0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001a5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001aa	41 b9 03 00 00
	00		 mov	 r9d, 3
  001b0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210882
  001b7	ba 9b 20 00 00	 mov	 edx, 8347		; 0000209bH
  001bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210883
  001c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN12@cmdsep_cmd:

; 8348 :         }
; 8349 :     }

  001c9	e9 07 04 00 00	 jmp	 $LN10@cmdsep_cmd
$LN9@cmdsep_cmd:

; 8350 : 
; 8351 :     // Disable
; 8352 : 
; 8353 :     else if (argc == 2 && CMD( argv[1], off, 3 ))

  001ce	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  001d6	0f 85 bf 00 00
	00		 jne	 $LN13@cmdsep_cmd
  001dc	b8 08 00 00 00	 mov	 eax, 8
  001e1	48 6b c0 01	 imul	 rax, rax, 1
  001e5	41 b8 03 00 00
	00		 mov	 r8d, 3
  001eb	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001f3	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  001f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210886
  001fe	e8 00 00 00 00	 call	 strcaseabbrev
  00203	85 c0		 test	 eax, eax
  00205	0f 84 90 00 00
	00		 je	 $LN13@cmdsep_cmd

; 8354 :     {
; 8355 :         sysblk.cmdsep = 0;

  0020b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00212	c6 80 2c 11 00
	00 00		 mov	 BYTE PTR [rax+4396], 0

; 8356 : 
; 8357 :         // "%-14s set to %s"
; 8358 :         WRMSG( HHC02204, "I", argv[0], "OFF" );

  00219	b8 08 00 00 00	 mov	 eax, 8
  0021e	48 6b c0 00	 imul	 rax, rax, 0
  00222	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv153[rsp], rax
  0022a	b9 01 00 00 00	 mov	 ecx, 1
  0022f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00235	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210887
  0023c	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00241	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00249	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv153[rsp]
  00251	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00255	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0025a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210888
  00261	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00266	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210889
  0026d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00272	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00277	41 b9 03 00 00
	00		 mov	 r9d, 3
  0027d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210890
  00284	ba a6 20 00 00	 mov	 edx, 8358		; 000020a6H
  00289	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210891
  00290	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8359 :     }

  00296	e9 3a 03 00 00	 jmp	 $LN14@cmdsep_cmd
$LN13@cmdsep_cmd:

; 8360 : 
; 8361 :     // Enable
; 8362 : 
; 8363 :     else if (argc == 2 && argv[1][1] == 0)

  0029b	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  002a3	0f 85 1f 02 00
	00		 jne	 $LN15@cmdsep_cmd
  002a9	b8 08 00 00 00	 mov	 eax, 8
  002ae	48 6b c0 01	 imul	 rax, rax, 1
  002b2	b9 01 00 00 00	 mov	 ecx, 1
  002b7	48 6b c9 01	 imul	 rcx, rcx, 1
  002bb	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  002c3	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  002c7	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  002cb	85 c0		 test	 eax, eax
  002cd	0f 85 f5 01 00
	00		 jne	 $LN15@cmdsep_cmd

; 8364 :     {
; 8365 :         /* Reject invalid separator characters */
; 8366 :         if (0
; 8367 :             || argv[1][0] == '-'
; 8368 :             || argv[1][0] == '.'
; 8369 :             || argv[1][0] == '!'

  002d3	33 c0		 xor	 eax, eax
  002d5	85 c0		 test	 eax, eax
  002d7	75 79		 jne	 SHORT $LN19@cmdsep_cmd
  002d9	b8 08 00 00 00	 mov	 eax, 8
  002de	48 6b c0 01	 imul	 rax, rax, 1
  002e2	b9 01 00 00 00	 mov	 ecx, 1
  002e7	48 6b c9 00	 imul	 rcx, rcx, 0
  002eb	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  002f3	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  002f7	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  002fb	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  002fe	74 52		 je	 SHORT $LN19@cmdsep_cmd
  00300	b8 08 00 00 00	 mov	 eax, 8
  00305	48 6b c0 01	 imul	 rax, rax, 1
  00309	b9 01 00 00 00	 mov	 ecx, 1
  0030e	48 6b c9 00	 imul	 rcx, rcx, 0
  00312	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0031a	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0031e	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  00322	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00325	74 2b		 je	 SHORT $LN19@cmdsep_cmd
  00327	b8 08 00 00 00	 mov	 eax, 8
  0032c	48 6b c0 01	 imul	 rax, rax, 1
  00330	b9 01 00 00 00	 mov	 ecx, 1
  00335	48 6b c9 00	 imul	 rcx, rcx, 0
  00339	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00341	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00345	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  00349	83 f8 21	 cmp	 eax, 33			; 00000021H
  0034c	0f 85 8a 00 00
	00		 jne	 $LN17@cmdsep_cmd
$LN19@cmdsep_cmd:

; 8370 :         )
; 8371 :         {
; 8372 :             // "Invalid argument %s%s"
; 8373 :             WRMSG( HHC02205, "E", argv[1], "; '.', '-', and '!' are invalid characters" );

  00352	b8 08 00 00 00	 mov	 eax, 8
  00357	48 6b c0 01	 imul	 rax, rax, 1
  0035b	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv192[rsp], rax
  00363	b9 01 00 00 00	 mov	 ecx, 1
  00368	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0036e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210897
  00375	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0037a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00382	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv192[rsp]
  0038a	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0038e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00393	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210898
  0039a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0039f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210899
  003a6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003ab	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003b0	41 b9 03 00 00
	00		 mov	 r9d, 3
  003b6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210900
  003bd	ba b5 20 00 00	 mov	 edx, 8373		; 000020b5H
  003c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210901
  003c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8374 :             rc = -1;

  003cf	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 8375 :         }

  003d7	e9 e7 00 00 00	 jmp	 $LN18@cmdsep_cmd
$LN17@cmdsep_cmd:

; 8376 :         else
; 8377 :         {
; 8378 :             char sepchar[2];
; 8379 : 
; 8380 :             sepchar[0] = sysblk.cmdsep = argv[1][0];

  003dc	b8 08 00 00 00	 mov	 eax, 8
  003e1	48 6b c0 01	 imul	 rax, rax, 1
  003e5	b9 01 00 00 00	 mov	 ecx, 1
  003ea	48 6b c9 00	 imul	 rcx, rcx, 0
  003ee	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  003f6	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  003fa	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00401	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00405	88 82 2c 11 00
	00		 mov	 BYTE PTR [rdx+4396], al
  0040b	b8 01 00 00 00	 mov	 eax, 1
  00410	48 6b c0 00	 imul	 rax, rax, 0
  00414	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0041b	0f b6 89 2c 11
	00 00		 movzx	 ecx, BYTE PTR [rcx+4396]
  00422	88 4c 04 54	 mov	 BYTE PTR sepchar$2[rsp+rax], cl

; 8381 :             sepchar[1] = 0;

  00426	48 c7 44 24 68
	01 00 00 00	 mov	 QWORD PTR $T4[rsp], 1
  0042f	48 83 7c 24 68
	02		 cmp	 QWORD PTR $T4[rsp], 2
  00435	73 02		 jae	 SHORT $LN25@cmdsep_cmd
  00437	eb 05		 jmp	 SHORT $LN26@cmdsep_cmd
$LN25@cmdsep_cmd:
  00439	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN26@cmdsep_cmd:
  0043e	48 8b 44 24 68	 mov	 rax, QWORD PTR $T4[rsp]
  00443	c6 44 04 54 00	 mov	 BYTE PTR sepchar$2[rsp+rax], 0

; 8382 : 
; 8383 :             // "%-14s set to %s"
; 8384 :             WRMSG( HHC02204, "I", argv[0], sepchar );

  00448	b8 08 00 00 00	 mov	 eax, 8
  0044d	48 6b c0 00	 imul	 rax, rax, 0
  00451	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv215[rsp], rax
  00459	b9 01 00 00 00	 mov	 ecx, 1
  0045e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00464	48 8d 4c 24 54	 lea	 rcx, QWORD PTR sepchar$2[rsp]
  00469	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0046e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00476	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tv215[rsp]
  0047e	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00482	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00487	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210902
  0048e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00493	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210903
  0049a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0049f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004a4	41 b9 03 00 00
	00		 mov	 r9d, 3
  004aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210904
  004b1	ba c0 20 00 00	 mov	 edx, 8384		; 000020c0H
  004b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210905
  004bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN18@cmdsep_cmd:

; 8385 :         }
; 8386 :     }

  004c3	e9 0d 01 00 00	 jmp	 $LN16@cmdsep_cmd
$LN15@cmdsep_cmd:

; 8387 :     else if (argc > 2)

  004c8	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  004d0	7e 7e		 jle	 SHORT $LN20@cmdsep_cmd

; 8388 :     {
; 8389 :         // "Invalid command usage. Type 'help %s' for assistance."
; 8390 :         WRMSG( HHC02299, "E", argv[0] );

  004d2	b8 08 00 00 00	 mov	 eax, 8
  004d7	48 6b c0 00	 imul	 rax, rax, 0
  004db	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv228[rsp], rax
  004e3	b9 01 00 00 00	 mov	 ecx, 1
  004e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004ee	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004f6	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR tv228[rsp]
  004fe	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00502	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00507	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210908
  0050e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00513	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210909
  0051a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0051f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00524	41 b9 03 00 00
	00		 mov	 r9d, 3
  0052a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210910
  00531	ba c6 20 00 00	 mov	 edx, 8390		; 000020c6H
  00536	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210911
  0053d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8391 :         rc = -1;

  00543	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 8392 :     }

  0054b	e9 85 00 00 00	 jmp	 $LN21@cmdsep_cmd
$LN20@cmdsep_cmd:

; 8393 :     else
; 8394 :     {
; 8395 :         // "Invalid argument %s%s"
; 8396 :         WRMSG( HHC02205, "E", argv[1], ", must be a single character" );

  00550	b8 08 00 00 00	 mov	 eax, 8
  00555	48 6b c0 01	 imul	 rax, rax, 1
  00559	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv241[rsp], rax
  00561	b9 01 00 00 00	 mov	 ecx, 1
  00566	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0056c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210912
  00573	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00578	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00580	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR tv241[rsp]
  00588	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0058c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00591	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210913
  00598	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0059d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210914
  005a4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005a9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005ae	41 b9 03 00 00
	00		 mov	 r9d, 3
  005b4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210915
  005bb	ba cc 20 00 00	 mov	 edx, 8396		; 000020ccH
  005c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210916
  005c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8397 :         rc = -1;

  005cd	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN21@cmdsep_cmd:
$LN16@cmdsep_cmd:
$LN14@cmdsep_cmd:
$LN10@cmdsep_cmd:

; 8398 :     }
; 8399 : 
; 8400 :     return rc;

  005d5	8b 44 24 58	 mov	 eax, DWORD PTR rc$[rsp]
$LN22@cmdsep_cmd:

; 8401 : }

  005d9	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  005e0	c3		 ret	 0
cmdsep_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
plus_enable_on$ = 80
cpu16$1 = 84
cmd$ = 88
cpu$2 = 96
bFound$3 = 100
trace_cpu$4 = 101
devnum$5 = 104
lcss$6 = 108
dev$ = 112
devnum$ = 120
lcss$ = 124
c$7 = 128
onoroff$ = 136
p$8 = 144
p$9 = 152
rc$10 = 160
tv265 = 164
tv267 = 168
tv469 = 172
tv520 = 176
typ$11 = 184
tv83 = 192
regs$ = 200
buf$12 = 208
buf$13 = 256
buf$14 = 320
__$ArrayPad$ = 384
argc$ = 416
argv$ = 424
cmdline$ = 432
OnOffCommand PROC

; 8036 : {

$LN63:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 98 01
	00 00		 sub	 rsp, 408		; 00000198H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 8037 :     char*   cmd = cmdline;              /* (just a shorter name)     */

  00027	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR cmdline$[rsp]
  0002f	48 89 44 24 58	 mov	 QWORD PTR cmd$[rsp], rax
$LN4@OnOffComma:

; 8038 :     bool    plus_enable_on;             /* true == x+, false == x-   */
; 8039 :     char*   onoroff;                    /* x+ == "on", x- == "off"   */
; 8040 :     DEVBLK* dev;
; 8041 :     U16     devnum;
; 8042 :     U16     lcss;
; 8043 :     REGS*   regs;
; 8044 : 
; 8045 :     UNREFERENCED( argc );

  00034	33 c0		 xor	 eax, eax
  00036	85 c0		 test	 eax, eax
  00038	75 fa		 jne	 SHORT $LN4@OnOffComma
$LN7@OnOffComma:

; 8046 :     UNREFERENCED( argv );

  0003a	33 c0		 xor	 eax, eax
  0003c	85 c0		 test	 eax, eax
  0003e	75 fa		 jne	 SHORT $LN7@OnOffComma

; 8047 : 
; 8048 :     if (cmd[1] == '+')

  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	48 6b c0 01	 imul	 rax, rax, 1
  00049	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  0004e	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00052	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  00055	75 16		 jne	 SHORT $LN23@OnOffComma

; 8049 :     {
; 8050 :         plus_enable_on = true;

  00057	c6 44 24 50 01	 mov	 BYTE PTR plus_enable_on$[rsp], 1

; 8051 :         onoroff = "ON";

  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG210737
  00063	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR onoroff$[rsp], rax

; 8052 :     }

  0006b	eb 14		 jmp	 SHORT $LN24@OnOffComma
$LN23@OnOffComma:

; 8053 :     else
; 8054 :     {
; 8055 :         plus_enable_on = false;

  0006d	c6 44 24 50 00	 mov	 BYTE PTR plus_enable_on$[rsp], 0

; 8056 :         onoroff = "OFF";

  00072	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG210738
  00079	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR onoroff$[rsp], rax
$LN24@OnOffComma:

; 8057 :     }
; 8058 : 
; 8059 :     OBTAIN_INTLOCK( NULL );

  00081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210739
  00088	33 c9		 xor	 ecx, ecx
  0008a	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 8060 :     {
; 8061 :         if (!IS_CPU_ONLINE( sysblk.pcpu ))

  0008f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00096	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0009d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000a4	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  000ad	0f 85 b1 00 00
	00		 jne	 $LN25@OnOffComma

; 8062 :         {
; 8063 :             RELEASE_INTLOCK( NULL );

  000b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210741
  000ba	33 c9		 xor	 ecx, ecx
  000bc	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 8064 :             // "Processor %s%02X: processor is not %s"
; 8065 :             WRMSG( HHC00816, "W", PTYPSTR( sysblk.pcpu ), sysblk.pcpu, "online" );

  000c1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000c8	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  000cf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000d6	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  000de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  000e4	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv83[rsp], rax
  000ec	b9 01 00 00 00	 mov	 ecx, 1
  000f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210742
  000fe	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00103	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0010a	8b 89 54 13 00
	00		 mov	 ecx, DWORD PTR [rcx+4948]
  00110	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00114	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv83[rsp]
  0011c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210743
  00128	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0012d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210744
  00134	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00139	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0013e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00144	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210745
  0014b	ba 81 1f 00 00	 mov	 edx, 8065		; 00001f81H
  00150	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210746
  00157	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8066 :             return 0;

  0015d	33 c0		 xor	 eax, eax
  0015f	e9 a5 0d 00 00	 jmp	 $LN1@OnOffComma
$LN25@OnOffComma:

; 8067 :         }
; 8068 : 
; 8069 :         regs = sysblk.regs[ sysblk.pcpu ];

  00164	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0016b	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00172	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00179	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00181	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR regs$[rsp], rax

; 8070 : 
; 8071 :         // f- and f+ commands - mark 4K page frame as -unusable or +usable
; 8072 : 
; 8073 :         if (cmd[0] == 'f')

  00189	b8 01 00 00 00	 mov	 eax, 1
  0018e	48 6b c0 00	 imul	 rax, rax, 0
  00192	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  00197	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0019b	83 f8 66	 cmp	 eax, 102		; 00000066H
  0019e	75 36		 jne	 SHORT $LN26@OnOffComma

; 8074 :         {
; 8075 :             int rc = fonoff_cmd( regs, cmdline );

  001a0	48 8b 94 24 b0
	01 00 00	 mov	 rdx, QWORD PTR cmdline$[rsp]
  001a8	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001b0	e8 00 00 00 00	 call	 fonoff_cmd
  001b5	89 84 24 a0 00
	00 00		 mov	 DWORD PTR rc$10[rsp], eax

; 8076 :             RELEASE_INTLOCK( NULL );

  001bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210748
  001c3	33 c9		 xor	 ecx, ecx
  001c5	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 8077 :             return rc;

  001ca	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR rc$10[rsp]
  001d1	e9 33 0d 00 00	 jmp	 $LN1@OnOffComma
$LN26@OnOffComma:

; 8078 :         }
; 8079 : 
; 8080 :         // t+ckd [devnum] and t-ckd [devnum] commands - turn CKD Search Key tracing on/off
; 8081 : 
; 8082 :         if (1
; 8083 :             && (cmd[0] == 't')
; 8084 :             && (cmd[2] == 'c' || cmd[2] == 'C')
; 8085 :             && (cmd[3] == 'k' || cmd[3] == 'K')
; 8086 :             && (cmd[4] == 'd' || cmd[4] == 'D')
; 8087 :             && (cmd[5] ==  0  || cmd[5] == ' ')

  001d6	33 c0		 xor	 eax, eax
  001d8	83 f8 01	 cmp	 eax, 1
  001db	0f 84 db 04 00
	00		 je	 $LN27@OnOffComma
  001e1	b8 01 00 00 00	 mov	 eax, 1
  001e6	48 6b c0 00	 imul	 rax, rax, 0
  001ea	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  001ef	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  001f3	83 f8 74	 cmp	 eax, 116		; 00000074H
  001f6	0f 85 c0 04 00
	00		 jne	 $LN27@OnOffComma
  001fc	b8 01 00 00 00	 mov	 eax, 1
  00201	48 6b c0 02	 imul	 rax, rax, 2
  00205	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  0020a	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0020e	83 f8 63	 cmp	 eax, 99			; 00000063H
  00211	74 1b		 je	 SHORT $LN28@OnOffComma
  00213	b8 01 00 00 00	 mov	 eax, 1
  00218	48 6b c0 02	 imul	 rax, rax, 2
  0021c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  00221	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00225	83 f8 43	 cmp	 eax, 67			; 00000043H
  00228	0f 85 8e 04 00
	00		 jne	 $LN27@OnOffComma
$LN28@OnOffComma:
  0022e	b8 01 00 00 00	 mov	 eax, 1
  00233	48 6b c0 03	 imul	 rax, rax, 3
  00237	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  0023c	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00240	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  00243	74 1b		 je	 SHORT $LN29@OnOffComma
  00245	b8 01 00 00 00	 mov	 eax, 1
  0024a	48 6b c0 03	 imul	 rax, rax, 3
  0024e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  00253	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00257	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  0025a	0f 85 5c 04 00
	00		 jne	 $LN27@OnOffComma
$LN29@OnOffComma:
  00260	b8 01 00 00 00	 mov	 eax, 1
  00265	48 6b c0 04	 imul	 rax, rax, 4
  00269	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  0026e	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00272	83 f8 64	 cmp	 eax, 100		; 00000064H
  00275	74 1b		 je	 SHORT $LN30@OnOffComma
  00277	b8 01 00 00 00	 mov	 eax, 1
  0027c	48 6b c0 04	 imul	 rax, rax, 4
  00280	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  00285	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00289	83 f8 44	 cmp	 eax, 68			; 00000044H
  0028c	0f 85 2a 04 00
	00		 jne	 $LN27@OnOffComma
$LN30@OnOffComma:
  00292	b8 01 00 00 00	 mov	 eax, 1
  00297	48 6b c0 05	 imul	 rax, rax, 5
  0029b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  002a0	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  002a4	85 c0		 test	 eax, eax
  002a6	74 1b		 je	 SHORT $LN31@OnOffComma
  002a8	b8 01 00 00 00	 mov	 eax, 1
  002ad	48 6b c0 05	 imul	 rax, rax, 5
  002b1	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  002b6	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  002ba	83 f8 20	 cmp	 eax, 32			; 00000020H
  002bd	0f 85 f9 03 00
	00		 jne	 $LN27@OnOffComma
$LN31@OnOffComma:

; 8088 :         )
; 8089 :         {
; 8090 :             char buf[64];   // (results message buffer)
; 8091 : 
; 8092 :             if (cmd[5] ==  0) // (just "t+ckd" without any device number)

  002c3	b8 01 00 00 00	 mov	 eax, 1
  002c8	48 6b c0 05	 imul	 rax, rax, 5
  002cc	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  002d1	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  002d5	85 c0		 test	 eax, eax
  002d7	0f 85 09 01 00
	00		 jne	 $LN32@OnOffComma

; 8093 :             {
; 8094 :                 // Enable/disable CKD Search Key tracing for all CKD devices...
; 8095 : 
; 8096 :                 bool bFound = false;

  002dd	c6 44 24 64 00	 mov	 BYTE PTR bFound$3[rsp], 0

; 8097 : 
; 8098 :                 for (dev = sysblk.firstdev; dev != NULL; dev = dev->nextdev)

  002e2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002e9	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  002f0	48 89 44 24 70	 mov	 QWORD PTR dev$[rsp], rax
  002f5	eb 0e		 jmp	 SHORT $LN10@OnOffComma
$LN8@OnOffComma:
  002f7	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  002fc	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00300	48 89 44 24 70	 mov	 QWORD PTR dev$[rsp], rax
$LN10@OnOffComma:
  00305	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0030b	74 4a		 je	 SHORT $LN9@OnOffComma

; 8099 :                 {
; 8100 :                     if (dev->devchar[10] == DEVCLASS_DASD)

  0030d	b8 01 00 00 00	 mov	 eax, 1
  00312	48 6b c0 0a	 imul	 rax, rax, 10
  00316	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0031b	0f b6 84 01 6c
	05 00 00	 movzx	 eax, BYTE PTR [rcx+rax+1388]
  00323	83 f8 20	 cmp	 eax, 32			; 00000020H
  00326	75 2d		 jne	 SHORT $LN34@OnOffComma

; 8101 :                     {
; 8102 :                         bFound = true;

  00328	c6 44 24 64 01	 mov	 BYTE PTR bFound$3[rsp], 1

; 8103 :                         dev->ckdkeytrace = plus_enable_on;

  0032d	0f b6 44 24 50	 movzx	 eax, BYTE PTR plus_enable_on$[rsp]
  00332	83 e0 01	 and	 eax, 1
  00335	c1 e0 02	 shl	 eax, 2
  00338	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0033d	8b 89 f8 05 00
	00		 mov	 ecx, DWORD PTR [rcx+1528]
  00343	83 e1 fb	 and	 ecx, -5			; fffffffbH
  00346	0b c8		 or	 ecx, eax
  00348	8b c1		 mov	 eax, ecx
  0034a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0034f	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax
$LN34@OnOffComma:

; 8104 :                     }
; 8105 :                 }

  00355	eb a0		 jmp	 SHORT $LN8@OnOffComma
$LN9@OnOffComma:

; 8106 : 
; 8107 :                 if (!bFound)

  00357	0f b6 44 24 64	 movzx	 eax, BYTE PTR bFound$3[rsp]
  0035c	85 c0		 test	 eax, eax
  0035e	75 5f		 jne	 SHORT $LN35@OnOffComma

; 8108 :                 {
; 8109 :                     RELEASE_INTLOCK( NULL );

  00360	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210758
  00367	33 c9		 xor	 ecx, ecx
  00369	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 8110 :                     // "No dasd devices found"
; 8111 :                     WRMSG( HHC02226, "E" );

  0036e	b9 01 00 00 00	 mov	 ecx, 1
  00373	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00379	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210759
  00380	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00385	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210760
  0038c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00391	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00396	41 b9 03 00 00
	00		 mov	 r9d, 3
  0039c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210761
  003a3	ba af 1f 00 00	 mov	 edx, 8111		; 00001fafH
  003a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210762
  003af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8112 :                     return -1;

  003b5	b8 ff ff ff ff	 mov	 eax, -1
  003ba	e9 4a 0b 00 00	 jmp	 $LN1@OnOffComma
$LN35@OnOffComma:

; 8113 :                 }
; 8114 : 
; 8115 :                 // Build results message
; 8116 :                 MSGBUF( buf, "%s for all dasd devices", onoroff );

  003bf	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR onoroff$[rsp]
  003c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210763
  003ce	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  003d3	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR buf$13[rsp]
  003db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 8117 :             }

  003e1	e9 61 02 00 00	 jmp	 $LN33@OnOffComma
$LN32@OnOffComma:

; 8118 :             else if (cmd[5] != ' ')

  003e6	b8 01 00 00 00	 mov	 eax, 1
  003eb	48 6b c0 05	 imul	 rax, rax, 5
  003ef	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  003f4	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  003f8	83 f8 20	 cmp	 eax, 32			; 00000020H
  003fb	74 7a		 je	 SHORT $LN36@OnOffComma

; 8119 :             {
; 8120 :                 RELEASE_INTLOCK( NULL );

  003fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210766
  00404	33 c9		 xor	 ecx, ecx
  00406	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 8121 :                 // "Invalid argument %s%s"
; 8122 :                 WRMSG( HHC02205, "E", cmd, "" );

  0040b	b9 01 00 00 00	 mov	 ecx, 1
  00410	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00416	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210767
  0041d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00422	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  00427	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0042c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210768
  00433	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00438	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210769
  0043f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00444	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00449	41 b9 03 00 00
	00		 mov	 r9d, 3
  0044f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210770
  00456	ba ba 1f 00 00	 mov	 edx, 8122		; 00001fbaH
  0045b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210771
  00462	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8123 :                 return -1;

  00468	b8 ff ff ff ff	 mov	 eax, -1
  0046d	e9 97 0a 00 00	 jmp	 $LN1@OnOffComma

; 8124 :             }

  00472	e9 d0 01 00 00	 jmp	 $LN37@OnOffComma
$LN36@OnOffComma:

; 8125 :             else // (optional device number presumably specified)
; 8126 :             {
; 8127 :                 const char* p;
; 8128 :                 U16 lcss, devnum;
; 8129 : 
; 8130 :                 // Position to start of devnum operand
; 8131 :                 for (p = &cmd[6]; *p && *p == ' '; ++p);

  00477	b8 01 00 00 00	 mov	 eax, 1
  0047c	48 6b c0 06	 imul	 rax, rax, 6
  00480	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  00485	48 03 c8	 add	 rcx, rax
  00488	48 8b c1	 mov	 rax, rcx
  0048b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR p$8[rsp], rax
  00493	eb 13		 jmp	 SHORT $LN13@OnOffComma
$LN11@OnOffComma:
  00495	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR p$8[rsp]
  0049d	48 ff c0	 inc	 rax
  004a0	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR p$8[rsp], rax
$LN13@OnOffComma:
  004a8	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR p$8[rsp]
  004b0	0f be 00	 movsx	 eax, BYTE PTR [rax]
  004b3	85 c0		 test	 eax, eax
  004b5	74 12		 je	 SHORT $LN12@OnOffComma
  004b7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR p$8[rsp]
  004bf	0f be 00	 movsx	 eax, BYTE PTR [rax]
  004c2	83 f8 20	 cmp	 eax, 32			; 00000020H
  004c5	75 02		 jne	 SHORT $LN12@OnOffComma
  004c7	eb cc		 jmp	 SHORT $LN11@OnOffComma
$LN12@OnOffComma:

; 8132 : 
; 8133 :                 // Parse the device number
; 8134 :                 if (parse_single_devnum( p, &lcss, &devnum ) < 0)

  004c9	4c 8d 44 24 68	 lea	 r8, QWORD PTR devnum$5[rsp]
  004ce	48 8d 54 24 6c	 lea	 rdx, QWORD PTR lcss$6[rsp]
  004d3	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR p$8[rsp]
  004db	e8 00 00 00 00	 call	 parse_single_devnum
  004e0	85 c0		 test	 eax, eax
  004e2	7d 18		 jge	 SHORT $LN38@OnOffComma

; 8135 :                 {
; 8136 :                     RELEASE_INTLOCK( NULL );

  004e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210773
  004eb	33 c9		 xor	 ecx, ecx
  004ed	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 8137 :                     return -1;  // (error message already displayed)

  004f2	b8 ff ff ff ff	 mov	 eax, -1
  004f7	e9 0d 0a 00 00	 jmp	 $LN1@OnOffComma
$LN38@OnOffComma:

; 8138 :                 }
; 8139 : 
; 8140 :                 // Validate device number
; 8141 :                 if (!(dev = find_device_by_devnum( lcss, devnum )))

  004fc	0f b7 54 24 68	 movzx	 edx, WORD PTR devnum$5[rsp]
  00501	0f b7 4c 24 6c	 movzx	 ecx, WORD PTR lcss$6[rsp]
  00506	e8 00 00 00 00	 call	 find_device_by_devnum
  0050b	48 89 44 24 70	 mov	 QWORD PTR dev$[rsp], rax
  00510	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00516	75 27		 jne	 SHORT $LN39@OnOffComma

; 8142 :                 {
; 8143 :                     RELEASE_INTLOCK( NULL );

  00518	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210775
  0051f	33 c9		 xor	 ecx, ecx
  00521	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 8144 :                     // HHC02200 "%1d:%04X device not found"
; 8145 :                     devnotfound_msg( lcss, devnum );

  00526	0f b7 54 24 68	 movzx	 edx, WORD PTR devnum$5[rsp]
  0052b	0f b7 4c 24 6c	 movzx	 ecx, WORD PTR lcss$6[rsp]
  00530	e8 00 00 00 00	 call	 devnotfound_msg

; 8146 :                     return -1;

  00535	b8 ff ff ff ff	 mov	 eax, -1
  0053a	e9 ca 09 00 00	 jmp	 $LN1@OnOffComma
$LN39@OnOffComma:

; 8147 :                 }
; 8148 : 
; 8149 :                 if (dev->devchar[10] != DEVCLASS_DASD)

  0053f	b8 01 00 00 00	 mov	 eax, 1
  00544	48 6b c0 0a	 imul	 rax, rax, 10
  00548	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0054d	0f b6 84 01 6c
	05 00 00	 movzx	 eax, BYTE PTR [rcx+rax+1388]
  00555	83 f8 20	 cmp	 eax, 32			; 00000020H
  00558	0f 84 8d 00 00
	00		 je	 $LN40@OnOffComma

; 8150 :                 {
; 8151 :                     RELEASE_INTLOCK( NULL );

  0055e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210777
  00565	33 c9		 xor	 ecx, ecx
  00567	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 8152 :                     // "%1d:%04X is not a dasd device"
; 8153 :                     WRMSG( HHC02225, "E", lcss, devnum );

  0056c	0f b7 44 24 68	 movzx	 eax, WORD PTR devnum$5[rsp]
  00571	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv265[rsp], eax
  00578	0f b7 4c 24 6c	 movzx	 ecx, WORD PTR lcss$6[rsp]
  0057d	89 8c 24 a8 00
	00 00		 mov	 DWORD PTR tv267[rsp], ecx
  00584	b9 01 00 00 00	 mov	 ecx, 1
  00589	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0058f	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv265[rsp]
  00596	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0059a	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv267[rsp]
  005a1	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  005a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210778
  005ac	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210779
  005b8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005bd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005c2	41 b9 03 00 00
	00		 mov	 r9d, 3
  005c8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210780
  005cf	ba d9 1f 00 00	 mov	 edx, 8153		; 00001fd9H
  005d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210781
  005db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8154 :                     return -1;

  005e1	b8 ff ff ff ff	 mov	 eax, -1
  005e6	e9 1e 09 00 00	 jmp	 $LN1@OnOffComma
$LN40@OnOffComma:

; 8155 :                 }
; 8156 : 
; 8157 :                 // Enable/disable CKD Search Key tracing for this device
; 8158 :                 dev->ckdkeytrace = plus_enable_on;

  005eb	0f b6 44 24 50	 movzx	 eax, BYTE PTR plus_enable_on$[rsp]
  005f0	83 e0 01	 and	 eax, 1
  005f3	c1 e0 02	 shl	 eax, 2
  005f6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  005fb	8b 89 f8 05 00
	00		 mov	 ecx, DWORD PTR [rcx+1528]
  00601	83 e1 fb	 and	 ecx, -5			; fffffffbH
  00604	0b c8		 or	 ecx, eax
  00606	8b c1		 mov	 eax, ecx
  00608	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0060d	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 8159 : 
; 8160 :                 // Build results message
; 8161 :                 MSGBUF( buf, "%s for device %1d:%04X", onoroff, lcss, devnum );

  00613	0f b7 44 24 68	 movzx	 eax, WORD PTR devnum$5[rsp]
  00618	0f b7 4c 24 6c	 movzx	 ecx, WORD PTR lcss$6[rsp]
  0061d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00621	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00625	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR onoroff$[rsp]
  0062d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210782
  00634	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00639	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR buf$13[rsp]
  00641	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN37@OnOffComma:
$LN33@OnOffComma:

; 8162 :             }
; 8163 : 
; 8164 :             RELEASE_INTLOCK( NULL );

  00647	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210783
  0064e	33 c9		 xor	 ecx, ecx
  00650	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 8165 : 
; 8166 :             // "%-14s set to %s"
; 8167 :             WRMSG( HHC02204, "I", "CKD key trace", buf );

  00655	b9 01 00 00 00	 mov	 ecx, 1
  0065a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00660	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR buf$13[rsp]
  00668	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0066d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210784
  00674	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00679	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210785
  00680	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00685	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210786
  0068c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00691	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00696	41 b9 03 00 00
	00		 mov	 r9d, 3
  0069c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210787
  006a3	ba e7 1f 00 00	 mov	 edx, 8167		; 00001fe7H
  006a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210788
  006af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8168 :             return 0;

  006b5	33 c0		 xor	 eax, eax
  006b7	e9 4d 08 00 00	 jmp	 $LN1@OnOffComma
$LN27@OnOffComma:

; 8169 :         }
; 8170 : 
; 8171 :         // "t+cpu [cpunum]" command - turn instruction tracing on/off for CPU(s)...
; 8172 : 
; 8173 :         if (1
; 8174 :             && (cmd[0] == 't')
; 8175 :             && (cmd[2] == 'c' || cmd[2] == 'C')
; 8176 :             && (cmd[3] == 'p' || cmd[3] == 'P')
; 8177 :             && (cmd[4] == 'u' || cmd[4] == 'U')
; 8178 :             && (cmd[5] ==  0  || cmd[5] == ' ')

  006bc	33 c0		 xor	 eax, eax
  006be	83 f8 01	 cmp	 eax, 1
  006c1	0f 84 cb 05 00
	00		 je	 $LN41@OnOffComma
  006c7	b8 01 00 00 00	 mov	 eax, 1
  006cc	48 6b c0 00	 imul	 rax, rax, 0
  006d0	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  006d5	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  006d9	83 f8 74	 cmp	 eax, 116		; 00000074H
  006dc	0f 85 b0 05 00
	00		 jne	 $LN41@OnOffComma
  006e2	b8 01 00 00 00	 mov	 eax, 1
  006e7	48 6b c0 02	 imul	 rax, rax, 2
  006eb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  006f0	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  006f4	83 f8 63	 cmp	 eax, 99			; 00000063H
  006f7	74 1b		 je	 SHORT $LN42@OnOffComma
  006f9	b8 01 00 00 00	 mov	 eax, 1
  006fe	48 6b c0 02	 imul	 rax, rax, 2
  00702	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  00707	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0070b	83 f8 43	 cmp	 eax, 67			; 00000043H
  0070e	0f 85 7e 05 00
	00		 jne	 $LN41@OnOffComma
$LN42@OnOffComma:
  00714	b8 01 00 00 00	 mov	 eax, 1
  00719	48 6b c0 03	 imul	 rax, rax, 3
  0071d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  00722	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00726	83 f8 70	 cmp	 eax, 112		; 00000070H
  00729	74 1b		 je	 SHORT $LN43@OnOffComma
  0072b	b8 01 00 00 00	 mov	 eax, 1
  00730	48 6b c0 03	 imul	 rax, rax, 3
  00734	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  00739	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0073d	83 f8 50	 cmp	 eax, 80			; 00000050H
  00740	0f 85 4c 05 00
	00		 jne	 $LN41@OnOffComma
$LN43@OnOffComma:
  00746	b8 01 00 00 00	 mov	 eax, 1
  0074b	48 6b c0 04	 imul	 rax, rax, 4
  0074f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  00754	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00758	83 f8 75	 cmp	 eax, 117		; 00000075H
  0075b	74 1b		 je	 SHORT $LN44@OnOffComma
  0075d	b8 01 00 00 00	 mov	 eax, 1
  00762	48 6b c0 04	 imul	 rax, rax, 4
  00766	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  0076b	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0076f	83 f8 55	 cmp	 eax, 85			; 00000055H
  00772	0f 85 1a 05 00
	00		 jne	 $LN41@OnOffComma
$LN44@OnOffComma:
  00778	b8 01 00 00 00	 mov	 eax, 1
  0077d	48 6b c0 05	 imul	 rax, rax, 5
  00781	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  00786	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0078a	85 c0		 test	 eax, eax
  0078c	74 1b		 je	 SHORT $LN45@OnOffComma
  0078e	b8 01 00 00 00	 mov	 eax, 1
  00793	48 6b c0 05	 imul	 rax, rax, 5
  00797	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  0079c	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  007a0	83 f8 20	 cmp	 eax, 32			; 00000020H
  007a3	0f 85 e9 04 00
	00		 jne	 $LN41@OnOffComma
$LN45@OnOffComma:

; 8179 :         )
; 8180 :         {
; 8181 :             int cpu;
; 8182 :             char buf[64];   // (results message buffer)
; 8183 : 
; 8184 :             if (cmd[5] ==  0) // (just "t+cpu" without any CPU number)

  007a9	b8 01 00 00 00	 mov	 eax, 1
  007ae	48 6b c0 05	 imul	 rax, rax, 5
  007b2	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  007b7	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  007bb	85 c0		 test	 eax, eax
  007bd	0f 85 d9 00 00
	00		 jne	 $LN46@OnOffComma

; 8185 :             {
; 8186 :                 // Enable/disable instruction tracing for all CPUs...
; 8187 : 
; 8188 :                 sysblk.insttrace = plus_enable_on;

  007c3	0f b6 44 24 50	 movzx	 eax, BYTE PTR plus_enable_on$[rsp]
  007c8	83 e0 01	 and	 eax, 1
  007cb	c1 e0 08	 shl	 eax, 8
  007ce	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  007d5	8b 89 94 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4756]
  007db	0f ba f1 08	 btr	 ecx, 8
  007df	0b c8		 or	 ecx, eax
  007e1	8b c1		 mov	 eax, ecx
  007e3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  007ea	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax

; 8189 : 
; 8190 :                 for (cpu=0; cpu < sysblk.maxcpu; cpu++)

  007f0	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR cpu$2[rsp], 0
  007f8	eb 0a		 jmp	 SHORT $LN16@OnOffComma
$LN14@OnOffComma:
  007fa	8b 44 24 60	 mov	 eax, DWORD PTR cpu$2[rsp]
  007fe	ff c0		 inc	 eax
  00800	89 44 24 60	 mov	 DWORD PTR cpu$2[rsp], eax
$LN16@OnOffComma:
  00804	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0080b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00811	39 44 24 60	 cmp	 DWORD PTR cpu$2[rsp], eax
  00815	7d 5e		 jge	 SHORT $LN15@OnOffComma

; 8191 :                 {
; 8192 :                     if (IS_CPU_ONLINE( cpu ))

  00817	48 63 44 24 60	 movsxd	 rax, DWORD PTR cpu$2[rsp]
  0081c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00823	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  0082c	74 45		 je	 SHORT $LN48@OnOffComma

; 8193 :                         sysblk.regs[ cpu ]->insttrace = plus_enable_on;

  0082e	48 63 44 24 60	 movsxd	 rax, DWORD PTR cpu$2[rsp]
  00833	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0083a	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00842	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR plus_enable_on$[rsp]
  00847	83 e1 01	 and	 ecx, 1
  0084a	c1 e1 0f	 shl	 ecx, 15
  0084d	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  00853	0f ba f0 0f	 btr	 eax, 15
  00857	0b c1		 or	 eax, ecx
  00859	48 63 4c 24 60	 movsxd	 rcx, DWORD PTR cpu$2[rsp]
  0085e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00865	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  0086d	89 81 28 07 00
	00		 mov	 DWORD PTR [rcx+1832], eax
$LN48@OnOffComma:

; 8194 :                 }

  00873	eb 85		 jmp	 SHORT $LN14@OnOffComma
$LN15@OnOffComma:

; 8195 : 
; 8196 :                 // Build results message
; 8197 :                 MSGBUF( buf, "%s for all CPUs", onoroff );

  00875	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR onoroff$[rsp]
  0087d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210797
  00884	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00889	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR buf$14[rsp]
  00891	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 8198 :             }

  00897	e9 81 03 00 00	 jmp	 $LN47@OnOffComma
$LN46@OnOffComma:

; 8199 :             else if (cmd[5] != ' ')

  0089c	b8 01 00 00 00	 mov	 eax, 1
  008a1	48 6b c0 05	 imul	 rax, rax, 5
  008a5	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  008aa	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  008ae	83 f8 20	 cmp	 eax, 32			; 00000020H
  008b1	74 7a		 je	 SHORT $LN49@OnOffComma

; 8200 :             {
; 8201 :                 RELEASE_INTLOCK( NULL );

  008b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210800
  008ba	33 c9		 xor	 ecx, ecx
  008bc	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 8202 :                 // "Invalid argument %s%s"
; 8203 :                 WRMSG( HHC02205, "E", cmd, "" );

  008c1	b9 01 00 00 00	 mov	 ecx, 1
  008c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210801
  008d3	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  008d8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  008dd	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  008e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210802
  008e9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210803
  008f5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008fa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008ff	41 b9 03 00 00
	00		 mov	 r9d, 3
  00905	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210804
  0090c	ba 0b 20 00 00	 mov	 edx, 8203		; 0000200bH
  00911	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210805
  00918	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8204 :                 return -1;

  0091e	b8 ff ff ff ff	 mov	 eax, -1
  00923	e9 e1 05 00 00	 jmp	 $LN1@OnOffComma

; 8205 :             }

  00928	e9 f0 02 00 00	 jmp	 $LN50@OnOffComma
$LN49@OnOffComma:

; 8206 :             else // (optional CPU number presumably specified)
; 8207 :             {
; 8208 :                 const char* p;
; 8209 :                 U16 cpu16;
; 8210 :                 BYTE c;
; 8211 :                 bool trace_cpu = false;

  0092d	c6 44 24 65 00	 mov	 BYTE PTR trace_cpu$4[rsp], 0

; 8212 : 
; 8213 :                 // Position to start of cpunum operand
; 8214 :                 for (p = &cmd[6]; *p && *p == ' '; ++p);

  00932	b8 01 00 00 00	 mov	 eax, 1
  00937	48 6b c0 06	 imul	 rax, rax, 6
  0093b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  00940	48 03 c8	 add	 rcx, rax
  00943	48 8b c1	 mov	 rax, rcx
  00946	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR p$9[rsp], rax
  0094e	eb 13		 jmp	 SHORT $LN19@OnOffComma
$LN17@OnOffComma:
  00950	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR p$9[rsp]
  00958	48 ff c0	 inc	 rax
  0095b	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR p$9[rsp], rax
$LN19@OnOffComma:
  00963	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR p$9[rsp]
  0096b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0096e	85 c0		 test	 eax, eax
  00970	74 12		 je	 SHORT $LN18@OnOffComma
  00972	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR p$9[rsp]
  0097a	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0097d	83 f8 20	 cmp	 eax, 32			; 00000020H
  00980	75 02		 jne	 SHORT $LN18@OnOffComma
  00982	eb cc		 jmp	 SHORT $LN17@OnOffComma
$LN18@OnOffComma:

; 8215 : 
; 8216 :                 // Parse the CPU number
; 8217 :                 if (sscanf( p, "%hu%c", &cpu16, &c ) != 1)

  00984	4c 8d 8c 24 80
	00 00 00	 lea	 r9, QWORD PTR c$7[rsp]
  0098c	4c 8d 44 24 54	 lea	 r8, QWORD PTR cpu16$1[rsp]
  00991	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210807
  00998	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR p$9[rsp]
  009a0	e8 00 00 00 00	 call	 sscanf
  009a5	83 f8 01	 cmp	 eax, 1
  009a8	74 75		 je	 SHORT $LN51@OnOffComma

; 8218 :                 {
; 8219 :                     RELEASE_INTLOCK( NULL );

  009aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210808
  009b1	33 c9		 xor	 ecx, ecx
  009b3	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 8220 :                     // "Invalid argument %s%s"
; 8221 :                     WRMSG( HHC02205, "E", cmd, "" );

  009b8	b9 01 00 00 00	 mov	 ecx, 1
  009bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210809
  009ca	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  009cf	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  009d4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  009d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210810
  009e0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  009e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210811
  009ec	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  009f1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009f6	41 b9 03 00 00
	00		 mov	 r9d, 3
  009fc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210812
  00a03	ba 1d 20 00 00	 mov	 edx, 8221		; 0000201dH
  00a08	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210813
  00a0f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8222 :                     return -1;

  00a15	b8 ff ff ff ff	 mov	 eax, -1
  00a1a	e9 ea 04 00 00	 jmp	 $LN1@OnOffComma
$LN51@OnOffComma:

; 8223 :                 }
; 8224 : 
; 8225 :                 // Validate CPU number
; 8226 :                 if (0
; 8227 :                     || cpu16 >= MAX_CPU_ENGS
; 8228 :                     || cpu16 >= sysblk.maxcpu
; 8229 :                     || !IS_CPU_ONLINE( cpu16 )

  00a1f	33 c0		 xor	 eax, eax
  00a21	85 c0		 test	 eax, eax
  00a23	75 35		 jne	 SHORT $LN53@OnOffComma
  00a25	0f b7 44 24 54	 movzx	 eax, WORD PTR cpu16$1[rsp]
  00a2a	83 f8 40	 cmp	 eax, 64			; 00000040H
  00a2d	7d 2b		 jge	 SHORT $LN53@OnOffComma
  00a2f	0f b7 44 24 54	 movzx	 eax, WORD PTR cpu16$1[rsp]
  00a34	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00a3b	3b 81 00 01 00
	00		 cmp	 eax, DWORD PTR [rcx+256]
  00a41	7d 17		 jge	 SHORT $LN53@OnOffComma
  00a43	0f b7 44 24 54	 movzx	 eax, WORD PTR cpu16$1[rsp]
  00a48	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00a4f	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00a58	75 76		 jne	 SHORT $LN52@OnOffComma
$LN53@OnOffComma:

; 8230 :                 )
; 8231 :                 {
; 8232 :                     RELEASE_INTLOCK( NULL );

  00a5a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210816
  00a61	33 c9		 xor	 ecx, ecx
  00a63	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 8233 :                     // "CPU %02X is not online"
; 8234 :                     WRMSG( HHC02254, "E", cpu16 );

  00a68	0f b7 44 24 54	 movzx	 eax, WORD PTR cpu16$1[rsp]
  00a6d	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv469[rsp], eax
  00a74	b9 01 00 00 00	 mov	 ecx, 1
  00a79	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a7f	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR tv469[rsp]
  00a86	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00a8a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210817
  00a91	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a96	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210818
  00a9d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00aa2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00aa7	41 b9 03 00 00
	00		 mov	 r9d, 3
  00aad	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210819
  00ab4	ba 2a 20 00 00	 mov	 edx, 8234		; 0000202aH
  00ab9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210820
  00ac0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8235 :                     return -1;

  00ac6	b8 ff ff ff ff	 mov	 eax, -1
  00acb	e9 39 04 00 00	 jmp	 $LN1@OnOffComma
$LN52@OnOffComma:

; 8236 :                 }
; 8237 : 
; 8238 :                 // Enable/disable instruction tracing for this CPU
; 8239 :                 sysblk.regs[ cpu16 ]->insttrace = plus_enable_on;

  00ad0	0f b7 44 24 54	 movzx	 eax, WORD PTR cpu16$1[rsp]
  00ad5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00adc	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00ae4	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR plus_enable_on$[rsp]
  00ae9	83 e1 01	 and	 ecx, 1
  00aec	c1 e1 0f	 shl	 ecx, 15
  00aef	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  00af5	0f ba f0 0f	 btr	 eax, 15
  00af9	0b c1		 or	 eax, ecx
  00afb	0f b7 4c 24 54	 movzx	 ecx, WORD PTR cpu16$1[rsp]
  00b00	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00b07	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  00b0f	89 81 28 07 00
	00		 mov	 DWORD PTR [rcx+1832], eax

; 8240 : 
; 8241 :                 // Disable/enable overall instruction tracing depending
; 8242 :                 // on whether it's now enabled/disabled for all CPUs or
; 8243 :                 // not. (i.e. if it's enabled for some CPUs but not for
; 8244 :                 // others or vice-versa, then overall tracing should be
; 8245 :                 // enabled. Otherwise if it's not enabled for any CPU,
; 8246 :                 // then it should be disabled.)
; 8247 : 
; 8248 :                 for (cpu=0; cpu < sysblk.maxcpu; cpu++)

  00b15	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR cpu$2[rsp], 0
  00b1d	eb 0a		 jmp	 SHORT $LN22@OnOffComma
$LN20@OnOffComma:
  00b1f	8b 44 24 60	 mov	 eax, DWORD PTR cpu$2[rsp]
  00b23	ff c0		 inc	 eax
  00b25	89 44 24 60	 mov	 DWORD PTR cpu$2[rsp], eax
$LN22@OnOffComma:
  00b29	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00b30	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00b36	39 44 24 60	 cmp	 DWORD PTR cpu$2[rsp], eax
  00b3a	7d 62		 jge	 SHORT $LN21@OnOffComma

; 8249 :                 {
; 8250 :                     if (IS_CPU_ONLINE( cpu ))

  00b3c	48 63 44 24 60	 movsxd	 rax, DWORD PTR cpu$2[rsp]
  00b41	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00b48	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00b51	74 49		 je	 SHORT $LN54@OnOffComma

; 8251 :                     {
; 8252 :                         if (sysblk.regs[ cpu ]->insttrace)

  00b53	48 63 44 24 60	 movsxd	 rax, DWORD PTR cpu$2[rsp]
  00b58	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00b5f	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00b67	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  00b6d	c1 e8 0f	 shr	 eax, 15
  00b70	83 e0 01	 and	 eax, 1
  00b73	85 c0		 test	 eax, eax
  00b75	74 25		 je	 SHORT $LN55@OnOffComma

; 8253 :                         {
; 8254 :                             trace_cpu = true;

  00b77	c6 44 24 65 01	 mov	 BYTE PTR trace_cpu$4[rsp], 1

; 8255 :                             sysblk.insttrace = 1;

  00b7c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00b83	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00b89	0f ba e8 08	 bts	 eax, 8
  00b8d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00b94	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax

; 8256 :                             break;

  00b9a	eb 02		 jmp	 SHORT $LN21@OnOffComma
$LN55@OnOffComma:
$LN54@OnOffComma:

; 8257 :                         }
; 8258 :                     }
; 8259 :                 }

  00b9c	eb 81		 jmp	 SHORT $LN20@OnOffComma
$LN21@OnOffComma:

; 8260 : 
; 8261 :                 if (!trace_cpu)

  00b9e	0f b6 44 24 65	 movzx	 eax, BYTE PTR trace_cpu$4[rsp]
  00ba3	85 c0		 test	 eax, eax
  00ba5	75 1e		 jne	 SHORT $LN56@OnOffComma

; 8262 :                     sysblk.insttrace = 0;

  00ba7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00bae	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00bb4	0f ba f0 08	 btr	 eax, 8
  00bb8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00bbf	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax
$LN56@OnOffComma:

; 8263 : 
; 8264 :                 // Build results message
; 8265 :                 MSGBUF( buf, "%s for %s%02X", onoroff, ptyp2short( sysblk.ptyp[ cpu16 ] ), cpu16 );

  00bc5	0f b7 44 24 54	 movzx	 eax, WORD PTR cpu16$1[rsp]
  00bca	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv520[rsp], eax
  00bd1	0f b7 4c 24 54	 movzx	 ecx, WORD PTR cpu16$1[rsp]
  00bd6	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00bdd	0f b6 8c 0a 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rdx+rcx+2888]
  00be5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  00beb	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR tv520[rsp]
  00bf2	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00bf6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00bfb	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR onoroff$[rsp]
  00c03	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210824
  00c0a	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00c0f	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR buf$14[rsp]
  00c17	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN50@OnOffComma:
$LN47@OnOffComma:

; 8266 :             }
; 8267 : 
; 8268 :             RELEASE_INTLOCK( NULL );

  00c1d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210825
  00c24	33 c9		 xor	 ecx, ecx
  00c26	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 8269 : 
; 8270 :             // "%-14s set to %s"
; 8271 :             WRMSG( HHC02204, "I", "CPU tracing", buf );

  00c2b	b9 01 00 00 00	 mov	 ecx, 1
  00c30	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c36	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR buf$14[rsp]
  00c3e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00c43	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210826
  00c4a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00c4f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210827
  00c56	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c5b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210828
  00c62	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c67	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c6c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c72	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210829
  00c79	ba 4f 20 00 00	 mov	 edx, 8271		; 0000204fH
  00c7e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210830
  00c85	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8272 :             return 0;

  00c8b	33 c0		 xor	 eax, eax
  00c8d	e9 77 02 00 00	 jmp	 $LN1@OnOffComma
$LN41@OnOffComma:

; 8273 :         }
; 8274 : 
; 8275 :         // o+devn and o-devn commands - turn ORB tracing on/off
; 8276 :         // t+devn and t-devn commands - turn CCW tracing on/off
; 8277 : 
; 8278 :         if (1
; 8279 :             && (cmd[0] == 'o' || cmd[0] == 't')
; 8280 :             && parse_single_devnum_silent( &cmd[2], &lcss, &devnum ) == 0

  00c92	33 c0		 xor	 eax, eax
  00c94	83 f8 01	 cmp	 eax, 1
  00c97	0f 84 fc 01 00
	00		 je	 $LN57@OnOffComma
  00c9d	b8 01 00 00 00	 mov	 eax, 1
  00ca2	48 6b c0 00	 imul	 rax, rax, 0
  00ca6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  00cab	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00caf	83 f8 6f	 cmp	 eax, 111		; 0000006fH
  00cb2	74 1b		 je	 SHORT $LN58@OnOffComma
  00cb4	b8 01 00 00 00	 mov	 eax, 1
  00cb9	48 6b c0 00	 imul	 rax, rax, 0
  00cbd	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  00cc2	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00cc6	83 f8 74	 cmp	 eax, 116		; 00000074H
  00cc9	0f 85 ca 01 00
	00		 jne	 $LN57@OnOffComma
$LN58@OnOffComma:
  00ccf	b8 01 00 00 00	 mov	 eax, 1
  00cd4	48 6b c0 02	 imul	 rax, rax, 2
  00cd8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  00cdd	48 03 c8	 add	 rcx, rax
  00ce0	48 8b c1	 mov	 rax, rcx
  00ce3	4c 8d 44 24 78	 lea	 r8, QWORD PTR devnum$[rsp]
  00ce8	48 8d 54 24 7c	 lea	 rdx, QWORD PTR lcss$[rsp]
  00ced	48 8b c8	 mov	 rcx, rax
  00cf0	e8 00 00 00 00	 call	 parse_single_devnum_silent
  00cf5	85 c0		 test	 eax, eax
  00cf7	0f 85 9c 01 00
	00		 jne	 $LN57@OnOffComma

; 8281 :         )
; 8282 :         {
; 8283 :             char* typ;
; 8284 :             char buf[40];
; 8285 : 
; 8286 :             if (!(dev = find_device_by_devnum( lcss, devnum )))

  00cfd	0f b7 54 24 78	 movzx	 edx, WORD PTR devnum$[rsp]
  00d02	0f b7 4c 24 7c	 movzx	 ecx, WORD PTR lcss$[rsp]
  00d07	e8 00 00 00 00	 call	 find_device_by_devnum
  00d0c	48 89 44 24 70	 mov	 QWORD PTR dev$[rsp], rax
  00d11	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00d17	75 27		 jne	 SHORT $LN59@OnOffComma

; 8287 :             {
; 8288 :                 // HHC02200 "%1d:%04X device not found"
; 8289 :                 devnotfound_msg( lcss, devnum );

  00d19	0f b7 54 24 78	 movzx	 edx, WORD PTR devnum$[rsp]
  00d1e	0f b7 4c 24 7c	 movzx	 ecx, WORD PTR lcss$[rsp]
  00d23	e8 00 00 00 00	 call	 devnotfound_msg

; 8290 :                 RELEASE_INTLOCK( NULL );

  00d28	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210834
  00d2f	33 c9		 xor	 ecx, ecx
  00d31	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 8291 :                 return -1;

  00d36	b8 ff ff ff ff	 mov	 eax, -1
  00d3b	e9 c9 01 00 00	 jmp	 $LN1@OnOffComma
$LN59@OnOffComma:

; 8292 :             }
; 8293 : 
; 8294 :             if (cmd[0] == 'o')

  00d40	b8 01 00 00 00	 mov	 eax, 1
  00d45	48 6b c0 00	 imul	 rax, rax, 0
  00d49	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  00d4e	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00d52	83 f8 6f	 cmp	 eax, 111		; 0000006fH
  00d55	75 3a		 jne	 SHORT $LN60@OnOffComma

; 8295 :             {
; 8296 :                 typ = "ORB trace";

  00d57	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG210837
  00d5e	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR typ$11[rsp], rax

; 8297 :                 dev->orbtrace = plus_enable_on;

  00d66	0f b6 44 24 50	 movzx	 eax, BYTE PTR plus_enable_on$[rsp]
  00d6b	83 e0 01	 and	 eax, 1
  00d6e	c1 e0 0e	 shl	 eax, 14
  00d71	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00d76	8b 89 f8 05 00
	00		 mov	 ecx, DWORD PTR [rcx+1528]
  00d7c	0f ba f1 0e	 btr	 ecx, 14
  00d80	0b c8		 or	 ecx, eax
  00d82	8b c1		 mov	 eax, ecx
  00d84	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00d89	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 8298 :             }

  00d8f	eb 61		 jmp	 SHORT $LN61@OnOffComma
$LN60@OnOffComma:

; 8299 :             else // (cmd[0] == 't')
; 8300 :             {
; 8301 :                 typ = "CCW trace";

  00d91	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG210838
  00d98	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR typ$11[rsp], rax

; 8302 :                 dev->orbtrace = plus_enable_on;

  00da0	0f b6 44 24 50	 movzx	 eax, BYTE PTR plus_enable_on$[rsp]
  00da5	83 e0 01	 and	 eax, 1
  00da8	c1 e0 0e	 shl	 eax, 14
  00dab	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00db0	8b 89 f8 05 00
	00		 mov	 ecx, DWORD PTR [rcx+1528]
  00db6	0f ba f1 0e	 btr	 ecx, 14
  00dba	0b c8		 or	 ecx, eax
  00dbc	8b c1		 mov	 eax, ecx
  00dbe	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00dc3	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 8303 :                 dev->ccwtrace = plus_enable_on;

  00dc9	0f b6 44 24 50	 movzx	 eax, BYTE PTR plus_enable_on$[rsp]
  00dce	83 e0 01	 and	 eax, 1
  00dd1	c1 e0 0f	 shl	 eax, 15
  00dd4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00dd9	8b 89 f8 05 00
	00		 mov	 ecx, DWORD PTR [rcx+1528]
  00ddf	0f ba f1 0f	 btr	 ecx, 15
  00de3	0b c8		 or	 ecx, eax
  00de5	8b c1		 mov	 eax, ecx
  00de7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00dec	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax
$LN61@OnOffComma:

; 8304 :             }
; 8305 :             MSGBUF( buf, "%s for %1d:%04X", typ, lcss, devnum );

  00df2	0f b7 44 24 78	 movzx	 eax, WORD PTR devnum$[rsp]
  00df7	0f b7 4c 24 7c	 movzx	 ecx, WORD PTR lcss$[rsp]
  00dfc	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00e00	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00e04	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR typ$11[rsp]
  00e0c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210839
  00e13	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00e18	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$12[rsp]
  00e20	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 8306 :             // "%-14s set to %s"
; 8307 :             WRMSG( HHC02204, "I", buf, onoroff );

  00e26	b9 01 00 00 00	 mov	 ecx, 1
  00e2b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00e31	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR onoroff$[rsp]
  00e39	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00e3e	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$12[rsp]
  00e46	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00e4b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210840
  00e52	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00e57	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210841
  00e5e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00e63	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e68	41 b9 03 00 00
	00		 mov	 r9d, 3
  00e6e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210842
  00e75	ba 73 20 00 00	 mov	 edx, 8307		; 00002073H
  00e7a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210843
  00e81	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8308 :             RELEASE_INTLOCK( NULL );

  00e87	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210844
  00e8e	33 c9		 xor	 ecx, ecx
  00e90	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 8309 :             return 0;

  00e95	33 c0		 xor	 eax, eax
  00e97	eb 70		 jmp	 SHORT $LN1@OnOffComma
$LN57@OnOffComma:

; 8310 :         }
; 8311 :     }
; 8312 :     RELEASE_INTLOCK( NULL );

  00e99	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210845
  00ea0	33 c9		 xor	 ecx, ecx
  00ea2	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 8313 : 
; 8314 :     // "Invalid argument %s%s"
; 8315 :     WRMSG( HHC02205, "E", cmd, "" );

  00ea7	b9 01 00 00 00	 mov	 ecx, 1
  00eac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00eb2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210846
  00eb9	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00ebe	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cmd$[rsp]
  00ec3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00ec8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210847
  00ecf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ed4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210848
  00edb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ee0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ee5	41 b9 03 00 00
	00		 mov	 r9d, 3
  00eeb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210849
  00ef2	ba 7b 20 00 00	 mov	 edx, 8315		; 0000207bH
  00ef7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210850
  00efe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 8316 :     return -1;

  00f04	b8 ff ff ff ff	 mov	 eax, -1
$LN1@OnOffComma:

; 8317 : }

  00f09	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00f11	48 33 cc	 xor	 rcx, rsp
  00f14	e8 00 00 00 00	 call	 __security_check_cookie
  00f19	48 81 c4 98 01
	00 00		 add	 rsp, 408		; 00000198H
  00f20	c3		 ret	 0
OnOffCommand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv65 = 32
p$1 = 40
regs$ = 64
cmdline$ = 72
fonoff_cmd PROC

; 8012 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 8013 :     switch (sysblk.arch_mode)

  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00015	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0001b	89 44 24 20	 mov	 DWORD PTR tv65[rsp], eax
  0001f	83 7c 24 20 00	 cmp	 DWORD PTR tv65[rsp], 0
  00024	74 10		 je	 SHORT $LN7@fonoff_cmd
  00026	83 7c 24 20 01	 cmp	 DWORD PTR tv65[rsp], 1
  0002b	74 1a		 je	 SHORT $LN8@fonoff_cmd
  0002d	83 7c 24 20 02	 cmp	 DWORD PTR tv65[rsp], 2
  00032	74 24		 je	 SHORT $LN9@fonoff_cmd
  00034	eb 33		 jmp	 SHORT $LN10@fonoff_cmd
$LN7@fonoff_cmd:

; 8014 :     {
; 8015 : #if defined(     _370 )
; 8016 :         case ARCH_370_IDX:
; 8017 :           return s370_fonoff_cmd( regs, cmdline );

  00036	48 8b 54 24 48	 mov	 rdx, QWORD PTR cmdline$[rsp]
  0003b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  00040	e8 00 00 00 00	 call	 s370_fonoff_cmd
  00045	eb 39		 jmp	 SHORT $LN1@fonoff_cmd
$LN8@fonoff_cmd:

; 8018 : #endif
; 8019 : #if defined(     _390 )
; 8020 :         case ARCH_390_IDX:
; 8021 :           return s390_fonoff_cmd( regs, cmdline );

  00047	48 8b 54 24 48	 mov	 rdx, QWORD PTR cmdline$[rsp]
  0004c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  00051	e8 00 00 00 00	 call	 s390_fonoff_cmd
  00056	eb 28		 jmp	 SHORT $LN1@fonoff_cmd
$LN9@fonoff_cmd:

; 8022 : #endif
; 8023 : #if defined(     _900 )
; 8024 :         case ARCH_900_IDX:
; 8025 :           return z900_fonoff_cmd( regs, cmdline );

  00058	48 8b 54 24 48	 mov	 rdx, QWORD PTR cmdline$[rsp]
  0005d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  00062	e8 00 00 00 00	 call	 z900_fonoff_cmd
  00067	eb 17		 jmp	 SHORT $LN1@fonoff_cmd
$LN10@fonoff_cmd:
$LN6@fonoff_cmd:

; 8026 : #endif
; 8027 :         default: CRASH();

  00069	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR p$1[rsp], 0
  00072	48 8b 44 24 28	 mov	 rax, QWORD PTR p$1[rsp]
  00077	c6 00 00	 mov	 BYTE PTR [rax], 0
  0007a	33 c0		 xor	 eax, eax
  0007c	85 c0		 test	 eax, eax
  0007e	75 e9		 jne	 SHORT $LN6@fonoff_cmd
$LN1@fonoff_cmd:
$LN11@fonoff_cmd:

; 8028 :     }
; 8029 :     UNREACHABLE_CODE( return -1 );
; 8030 : }

  00080	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00084	c3		 ret	 0
fonoff_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv68 = 32
p$1 = 40
argc$ = 64
argv$ = 72
cmdline$ = 80
fquest_cmd PROC

; 7984 : {

$LN21:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@fquest_cmd:

; 7985 :     UNREFERENCED( argc );

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@fquest_cmd
$LN7@fquest_cmd:

; 7986 :     UNREFERENCED( argv );

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN7@fquest_cmd
$LN10@fquest_cmd:

; 7987 :     UNREFERENCED( cmdline );

  0001e	33 c0		 xor	 eax, eax
  00020	85 c0		 test	 eax, eax
  00022	75 fa		 jne	 SHORT $LN10@fquest_cmd

; 7988 : 
; 7989 :     switch (sysblk.arch_mode)

  00024	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0002b	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00031	89 44 24 20	 mov	 DWORD PTR tv68[rsp], eax
  00035	83 7c 24 20 00	 cmp	 DWORD PTR tv68[rsp], 0
  0003a	74 10		 je	 SHORT $LN16@fquest_cmd
  0003c	83 7c 24 20 01	 cmp	 DWORD PTR tv68[rsp], 1
  00041	74 10		 je	 SHORT $LN17@fquest_cmd
  00043	83 7c 24 20 02	 cmp	 DWORD PTR tv68[rsp], 2
  00048	74 10		 je	 SHORT $LN18@fquest_cmd
  0004a	eb 15		 jmp	 SHORT $LN19@fquest_cmd
$LN16@fquest_cmd:

; 7990 :     {
; 7991 : #if defined(     _370 )
; 7992 :         case ARCH_370_IDX:
; 7993 :           return s370_fquest_cmd();

  0004c	e8 00 00 00 00	 call	 s370_fquest_cmd
  00051	eb 25		 jmp	 SHORT $LN1@fquest_cmd
$LN17@fquest_cmd:

; 7994 : #endif
; 7995 : #if defined(     _390 )
; 7996 :         case ARCH_390_IDX:
; 7997 :           return s390_fquest_cmd();

  00053	e8 00 00 00 00	 call	 s390_fquest_cmd
  00058	eb 1e		 jmp	 SHORT $LN1@fquest_cmd
$LN18@fquest_cmd:

; 7998 : #endif
; 7999 : #if defined(     _900 )
; 8000 :         case ARCH_900_IDX:
; 8001 :           return z900_fquest_cmd();

  0005a	e8 00 00 00 00	 call	 z900_fquest_cmd
  0005f	eb 17		 jmp	 SHORT $LN1@fquest_cmd
$LN19@fquest_cmd:
$LN15@fquest_cmd:

; 8002 : #endif
; 8003 :         default: CRASH();

  00061	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR p$1[rsp], 0
  0006a	48 8b 44 24 28	 mov	 rax, QWORD PTR p$1[rsp]
  0006f	c6 00 00	 mov	 BYTE PTR [rax], 0
  00072	33 c0		 xor	 eax, eax
  00074	85 c0		 test	 eax, eax
  00076	75 e9		 jne	 SHORT $LN15@fquest_cmd
$LN1@fquest_cmd:
$LN20@fquest_cmd:

; 8004 :     }
; 8005 :     UNREACHABLE_CODE( return -1 );
; 8006 : }

  00078	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007c	c3		 ret	 0
fquest_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
sym$ = 80
tv66 = 88
tv83 = 96
argc$ = 128
argv$ = 136
cmdline$ = 144
delsym_cmd PROC

; 7940 : {

$LN9:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 78	 sub	 rsp, 120		; 00000078H
$LN4@delsym_cmd:

; 7941 :     char* sym;
; 7942 : 
; 7943 :     UNREFERENCED( cmdline );

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@delsym_cmd

; 7944 : 
; 7945 :     if (argc != 2)

  00018	83 bc 24 80 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00020	74 75		 je	 SHORT $LN5@delsym_cmd

; 7946 :     {
; 7947 :         // "Missing argument(s). Type 'help %s' for assistance."
; 7948 :         WRMSG( HHC02202, "E", argv[0] );

  00022	b8 08 00 00 00	 mov	 eax, 8
  00027	48 6b c0 00	 imul	 rax, rax, 0
  0002b	48 89 44 24 58	 mov	 QWORD PTR tv66[rsp], rax
  00030	b9 01 00 00 00	 mov	 ecx, 1
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0003b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00043	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv66[rsp]
  00048	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0004c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210604
  00058	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210605
  00064	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00069	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00074	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210606
  0007b	ba 0c 1f 00 00	 mov	 edx, 7948		; 00001f0cH
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210607
  00087	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7949 :         return -1;

  0008d	b8 ff ff ff ff	 mov	 eax, -1
  00092	e9 3d 01 00 00	 jmp	 $LN1@delsym_cmd
$LN5@delsym_cmd:

; 7950 :     }
; 7951 : 
; 7952 :     /* point to symbol name */
; 7953 :     sym = strdup( argv[1] );

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000a8	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  000b2	48 89 44 24 50	 mov	 QWORD PTR sym$[rsp], rax

; 7954 : 
; 7955 :     if (!sym)

  000b7	48 83 7c 24 50
	00		 cmp	 QWORD PTR sym$[rsp], 0
  000bd	75 7a		 jne	 SHORT $LN6@delsym_cmd

; 7956 :     {
; 7957 :         // "Error in function %s: %s"
; 7958 :         WRMSG( HHC02219, "E", "strdup()", strerror( errno ));

  000bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000c5	8b 08		 mov	 ecx, DWORD PTR [rax]
  000c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  000cd	48 89 44 24 60	 mov	 QWORD PTR tv83[rsp], rax
  000d2	b9 01 00 00 00	 mov	 ecx, 1
  000d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000dd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv83[rsp]
  000e2	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210609
  000ee	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210610
  000fa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210611
  00106	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0010b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00110	41 b9 03 00 00
	00		 mov	 r9d, 3
  00116	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210612
  0011d	ba 16 1f 00 00	 mov	 edx, 7958		; 00001f16H
  00122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210613
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7959 :         return -1;

  0012f	b8 ff ff ff ff	 mov	 eax, -1
  00134	e9 9b 00 00 00	 jmp	 $LN1@delsym_cmd
$LN6@delsym_cmd:

; 7960 :     }
; 7961 : 
; 7962 : #if defined( CASELESS_SYMBOLS )
; 7963 :     strupper( sym, sym );

  00139	48 8b 54 24 50	 mov	 rdx, QWORD PTR sym$[rsp]
  0013e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR sym$[rsp]
  00143	e8 00 00 00 00	 call	 strupper

; 7964 : #endif
; 7965 : 
; 7966 :     if (is_reserved_symbol( sym ))

  00148	48 8b 4c 24 50	 mov	 rcx, QWORD PTR sym$[rsp]
  0014d	e8 00 00 00 00	 call	 is_reserved_symbol
  00152	0f b6 c0	 movzx	 eax, al
  00155	85 c0		 test	 eax, eax
  00157	74 63		 je	 SHORT $LN7@delsym_cmd

; 7967 :     {
; 7968 :         // "Symbol name %s is reserved"
; 7969 :         WRMSG( HHC02197, "E", sym );

  00159	b9 01 00 00 00	 mov	 ecx, 1
  0015e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00164	48 8b 4c 24 50	 mov	 rcx, QWORD PTR sym$[rsp]
  00169	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0016e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210615
  00175	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0017a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210616
  00181	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00186	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0018b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00191	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210617
  00198	ba 21 1f 00 00	 mov	 edx, 7969		; 00001f21H
  0019d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210618
  001a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7970 :         free( sym );

  001aa	48 8b 4c 24 50	 mov	 rcx, QWORD PTR sym$[rsp]
  001af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 7971 :         return -1;

  001b5	b8 ff ff ff ff	 mov	 eax, -1
  001ba	eb 18		 jmp	 SHORT $LN1@delsym_cmd
$LN7@delsym_cmd:

; 7972 :     }
; 7973 : 
; 7974 :     /* Delete the symbol */
; 7975 :     del_symbol( sym );

  001bc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR sym$[rsp]
  001c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_del_symbol

; 7976 :     free( sym );

  001c7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR sym$[rsp]
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 7977 :     return 0;

  001d2	33 c0		 xor	 eax, eax
$LN1@delsym_cmd:

; 7978 : }

  001d4	48 83 c4 78	 add	 rsp, 120		; 00000078H
  001d8	c3		 ret	 0
delsym_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
sym$ = 80
tv152 = 88
tv71 = 96
tv136 = 104
value$ = 112
argc$ = 144
argv$ = 152
cmdline$ = 160
defsym_cmd PROC

; 7885 : {

$LN12:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
$LN4@defsym_cmd:

; 7886 :     char*  sym;
; 7887 :     char*  value;
; 7888 : 
; 7889 :     UNREFERENCED( cmdline );

  00015	33 c0		 xor	 eax, eax
  00017	85 c0		 test	 eax, eax
  00019	75 fa		 jne	 SHORT $LN4@defsym_cmd

; 7890 : 
; 7891 :     if (argc < 2)

  0001b	83 bc 24 90 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00023	7d 0d		 jge	 SHORT $LN5@defsym_cmd

; 7892 :     {
; 7893 :         list_all_symbols();

  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_list_all_symbols

; 7894 :         return 0;

  0002b	33 c0		 xor	 eax, eax
  0002d	e9 18 02 00 00	 jmp	 $LN1@defsym_cmd
$LN5@defsym_cmd:

; 7895 :     }
; 7896 : 
; 7897 :     /* point to symbol name */
; 7898 :     sym = strdup( argv[1] );

  00032	b8 08 00 00 00	 mov	 eax, 8
  00037	48 6b c0 01	 imul	 rax, rax, 1
  0003b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00043	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0004d	48 89 44 24 50	 mov	 QWORD PTR sym$[rsp], rax

; 7899 : 
; 7900 :     if (!sym)

  00052	48 83 7c 24 50
	00		 cmp	 QWORD PTR sym$[rsp], 0
  00058	75 7a		 jne	 SHORT $LN6@defsym_cmd

; 7901 :     {
; 7902 :         // "Error in function %s: %s"
; 7903 :         WRMSG( HHC02219, "E", "strdup()", strerror( errno ));

  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00060	8b 08		 mov	 ecx, DWORD PTR [rax]
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00068	48 89 44 24 60	 mov	 QWORD PTR tv71[rsp], rax
  0006d	b9 01 00 00 00	 mov	 ecx, 1
  00072	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00078	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv71[rsp]
  0007d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210572
  00089	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210573
  00095	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210574
  000a1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000a6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ab	41 b9 03 00 00
	00		 mov	 r9d, 3
  000b1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210575
  000b8	ba df 1e 00 00	 mov	 edx, 7903		; 00001edfH
  000bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210576
  000c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7904 :         return -1;

  000ca	b8 ff ff ff ff	 mov	 eax, -1
  000cf	e9 76 01 00 00	 jmp	 $LN1@defsym_cmd
$LN6@defsym_cmd:

; 7905 :     }
; 7906 : 
; 7907 : #if defined( CASELESS_SYMBOLS )
; 7908 :     strupper( sym, sym );

  000d4	48 8b 54 24 50	 mov	 rdx, QWORD PTR sym$[rsp]
  000d9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR sym$[rsp]
  000de	e8 00 00 00 00	 call	 strupper

; 7909 : #endif
; 7910 : 
; 7911 :     if (is_reserved_symbol( sym ))

  000e3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR sym$[rsp]
  000e8	e8 00 00 00 00	 call	 is_reserved_symbol
  000ed	0f b6 c0	 movzx	 eax, al
  000f0	85 c0		 test	 eax, eax
  000f2	74 66		 je	 SHORT $LN7@defsym_cmd

; 7912 :     {
; 7913 :         // "Symbol name %s is reserved"
; 7914 :         WRMSG( HHC02197, "E", sym );

  000f4	b9 01 00 00 00	 mov	 ecx, 1
  000f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000ff	48 8b 4c 24 50	 mov	 rcx, QWORD PTR sym$[rsp]
  00104	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210578
  00110	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210579
  0011c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00121	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00126	41 b9 03 00 00
	00		 mov	 r9d, 3
  0012c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210580
  00133	ba ea 1e 00 00	 mov	 edx, 7914		; 00001eeaH
  00138	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210581
  0013f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7915 :         free( sym );

  00145	48 8b 4c 24 50	 mov	 rcx, QWORD PTR sym$[rsp]
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 7916 :         return -1;

  00150	b8 ff ff ff ff	 mov	 eax, -1
  00155	e9 f0 00 00 00	 jmp	 $LN1@defsym_cmd
$LN7@defsym_cmd:

; 7917 :     }
; 7918 : 
; 7919 :     if (argc > 3)

  0015a	83 bc 24 90 00
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00162	0f 8e 89 00 00
	00		 jle	 $LN8@defsym_cmd

; 7920 :     {
; 7921 :         // "Invalid argument %s%s"
; 7922 :         WRMSG( HHC02205, "E", argv[2], ": DEFSYM requires a single value (use quotes if necessary)" );

  00168	b8 08 00 00 00	 mov	 eax, 8
  0016d	48 6b c0 02	 imul	 rax, rax, 2
  00171	48 89 44 24 68	 mov	 QWORD PTR tv136[rsp], rax
  00176	b9 01 00 00 00	 mov	 ecx, 1
  0017b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00181	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210583
  00188	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0018d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00195	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv136[rsp]
  0019a	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0019e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210584
  001aa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210585
  001b6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001bb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001c0	41 b9 03 00 00
	00		 mov	 r9d, 3
  001c6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210586
  001cd	ba f2 1e 00 00	 mov	 edx, 7922		; 00001ef2H
  001d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210587
  001d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7923 :         free( sym );

  001df	48 8b 4c 24 50	 mov	 rcx, QWORD PTR sym$[rsp]
  001e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 7924 :         return -1;

  001ea	b8 ff ff ff ff	 mov	 eax, -1
  001ef	eb 59		 jmp	 SHORT $LN1@defsym_cmd
$LN8@defsym_cmd:

; 7925 :     }
; 7926 : 
; 7927 :     /* Point to symbol value if specified, otherwise set to blank */
; 7928 :     value = (argc > 2) ? argv[2] : "";

  001f1	83 bc 24 90 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  001f9	7e 1c		 jle	 SHORT $LN10@defsym_cmd
  001fb	b8 08 00 00 00	 mov	 eax, 8
  00200	48 6b c0 02	 imul	 rax, rax, 2
  00204	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0020c	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00210	48 89 44 24 58	 mov	 QWORD PTR tv152[rsp], rax
  00215	eb 0c		 jmp	 SHORT $LN11@defsym_cmd
$LN10@defsym_cmd:
  00217	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG210588
  0021e	48 89 44 24 58	 mov	 QWORD PTR tv152[rsp], rax
$LN11@defsym_cmd:
  00223	48 8b 44 24 58	 mov	 rax, QWORD PTR tv152[rsp]
  00228	48 89 44 24 70	 mov	 QWORD PTR value$[rsp], rax

; 7929 : 
; 7930 :     /* Define the symbol */
; 7931 :     set_symbol( sym, value );

  0022d	48 8b 54 24 70	 mov	 rdx, QWORD PTR value$[rsp]
  00232	48 8b 4c 24 50	 mov	 rcx, QWORD PTR sym$[rsp]
  00237	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_set_symbol

; 7932 :     free( sym );

  0023d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR sym$[rsp]
  00242	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 7933 :     return 0;

  00248	33 c0		 xor	 eax, eax
$LN1@defsym_cmd:

; 7934 : }

  0024a	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00251	c3		 ret	 0
defsym_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv209 = 32
sym$ = 64
is_reserved_symbol PROC

; 7845 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 7846 :     // PROGRAMMING NOTE: please TRY to keep the below
; 7847 :     // in at least *approximate* alphabetical order!
; 7848 : 
; 7849 :     return (0

  00009	33 c0		 xor	 eax, eax
  0000b	85 c0		 test	 eax, eax
  0000d	0f 85 ca 02 00
	00		 jne	 $LN3@is_reserve
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210526
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  0001f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00025	85 c0		 test	 eax, eax
  00027	0f 84 b0 02 00
	00		 je	 $LN3@is_reserve
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210527
  00034	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0003f	85 c0		 test	 eax, eax
  00041	0f 84 96 02 00
	00		 je	 $LN3@is_reserve
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210528
  0004e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00059	85 c0		 test	 eax, eax
  0005b	0f 84 7c 02 00
	00		 je	 $LN3@is_reserve
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210529
  00068	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00073	85 c0		 test	 eax, eax
  00075	0f 84 62 02 00
	00		 je	 $LN3@is_reserve
  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210530
  00082	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  00087	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0008d	85 c0		 test	 eax, eax
  0008f	0f 84 48 02 00
	00		 je	 $LN3@is_reserve
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210531
  0009c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  000a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  000a7	85 c0		 test	 eax, eax
  000a9	0f 84 2e 02 00
	00		 je	 $LN3@is_reserve
  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210532
  000b6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  000bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  000c1	85 c0		 test	 eax, eax
  000c3	0f 84 14 02 00
	00		 je	 $LN3@is_reserve
  000c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210533
  000d0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  000d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  000db	85 c0		 test	 eax, eax
  000dd	0f 84 fa 01 00
	00		 je	 $LN3@is_reserve
  000e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210534
  000ea	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  000ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  000f5	85 c0		 test	 eax, eax
  000f7	0f 84 e0 01 00
	00		 je	 $LN3@is_reserve
  000fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210535
  00104	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0010f	85 c0		 test	 eax, eax
  00111	0f 84 c6 01 00
	00		 je	 $LN3@is_reserve
  00117	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210536
  0011e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  00123	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00129	85 c0		 test	 eax, eax
  0012b	0f 84 ac 01 00
	00		 je	 $LN3@is_reserve
  00131	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210537
  00138	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  0013d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00143	85 c0		 test	 eax, eax
  00145	0f 84 92 01 00
	00		 je	 $LN3@is_reserve
  0014b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210538
  00152	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  00157	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0015d	85 c0		 test	 eax, eax
  0015f	0f 84 78 01 00
	00		 je	 $LN3@is_reserve
  00165	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210539
  0016c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  00171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00177	85 c0		 test	 eax, eax
  00179	0f 84 5e 01 00
	00		 je	 $LN3@is_reserve
  0017f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210540
  00186	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  0018b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00191	85 c0		 test	 eax, eax
  00193	0f 84 44 01 00
	00		 je	 $LN3@is_reserve
  00199	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210541
  001a0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  001a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  001ab	85 c0		 test	 eax, eax
  001ad	0f 84 2a 01 00
	00		 je	 $LN3@is_reserve
  001b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210542
  001ba	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  001c5	85 c0		 test	 eax, eax
  001c7	0f 84 10 01 00
	00		 je	 $LN3@is_reserve
  001cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210543
  001d4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  001d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  001df	85 c0		 test	 eax, eax
  001e1	0f 84 f6 00 00
	00		 je	 $LN3@is_reserve
  001e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210544
  001ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  001f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  001f9	85 c0		 test	 eax, eax
  001fb	0f 84 dc 00 00
	00		 je	 $LN3@is_reserve
  00201	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210545
  00208	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  0020d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00213	85 c0		 test	 eax, eax
  00215	0f 84 c2 00 00
	00		 je	 $LN3@is_reserve
  0021b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210546
  00222	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  00227	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0022d	85 c0		 test	 eax, eax
  0022f	0f 84 a8 00 00
	00		 je	 $LN3@is_reserve
  00235	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210547
  0023c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  00241	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00247	85 c0		 test	 eax, eax
  00249	0f 84 8e 00 00
	00		 je	 $LN3@is_reserve
  0024f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210548
  00256	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  0025b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00261	85 c0		 test	 eax, eax
  00263	74 78		 je	 SHORT $LN3@is_reserve
  00265	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210549
  0026c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  00271	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00277	85 c0		 test	 eax, eax
  00279	74 62		 je	 SHORT $LN3@is_reserve
  0027b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210550
  00282	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  00287	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0028d	85 c0		 test	 eax, eax
  0028f	74 4c		 je	 SHORT $LN3@is_reserve
  00291	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210551
  00298	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  0029d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  002a3	85 c0		 test	 eax, eax
  002a5	74 36		 je	 SHORT $LN3@is_reserve
  002a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210552
  002ae	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  002b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  002b9	85 c0		 test	 eax, eax
  002bb	74 20		 je	 SHORT $LN3@is_reserve
  002bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210553
  002c4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sym$[rsp]
  002c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  002cf	85 c0		 test	 eax, eax
  002d1	74 0a		 je	 SHORT $LN3@is_reserve
  002d3	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv209[rsp], 0
  002db	eb 08		 jmp	 SHORT $LN4@is_reserve
$LN3@is_reserve:
  002dd	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv209[rsp], 1
$LN4@is_reserve:
  002e5	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv209[rsp]

; 7850 :         || SYMCMP( sym, "ARCHMODE"    ) == 0
; 7851 :         || SYMCMP( sym, "BDATE"       ) == 0
; 7852 :         || SYMCMP( sym, "BTIME"       ) == 0
; 7853 :         || SYMCMP( sym, "CUU"         ) == 0
; 7854 :         || SYMCMP( sym, "CCUU"        ) == 0
; 7855 :         || SYMCMP( sym, "CSS"         ) == 0
; 7856 :         || SYMCMP( sym, "CPUMODEL"    ) == 0
; 7857 :         || SYMCMP( sym, "CPUID"       ) == 0
; 7858 :         || SYMCMP( sym, "CPUSERIAL"   ) == 0
; 7859 :         || SYMCMP( sym, "CPUVERID"    ) == 0
; 7860 :         || SYMCMP( sym, "DATE"        ) == 0
; 7861 :         || SYMCMP( sym, "DEVN"        ) == 0
; 7862 :         || SYMCMP( sym, "HOSTNAME"    ) == 0
; 7863 :         || SYMCMP( sym, "HOSTOS"      ) == 0
; 7864 :         || SYMCMP( sym, "HOSTOSREL"   ) == 0
; 7865 :         || SYMCMP( sym, "HOSTOSVER"   ) == 0
; 7866 :         || SYMCMP( sym, "HOSTARCH"    ) == 0
; 7867 :         || SYMCMP( sym, "HOSTNUMCPUS" ) == 0
; 7868 :         || SYMCMP( sym, "LPARNUM"     ) == 0
; 7869 :         || SYMCMP( sym, "LPARNAME"    ) == 0
; 7870 :         || SYMCMP( sym, "MODPATH"     ) == 0
; 7871 :         || SYMCMP( sym, "MODNAME"     ) == 0
; 7872 :         || SYMCMP( sym, "SYSLEVEL"    ) == 0
; 7873 :         || SYMCMP( sym, "SYSTYPE"     ) == 0
; 7874 :         || SYMCMP( sym, "SYSNAME"     ) == 0
; 7875 :         || SYMCMP( sym, "SYSPLEX"     ) == 0
; 7876 :         || SYMCMP( sym, "TIME"        ) == 0
; 7877 :         || SYMCMP( sym, "VERSION"     ) == 0
; 7878 :     );
; 7879 : }

  002ea	48 83 c4 38	 add	 rsp, 56			; 00000038H
  002ee	c3		 ret	 0
is_reserved_symbol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
aaddr$ = 80
c$ = 88
chunk$ = 92
aaddr2$ = 96
fd$ = 104
loadaddr$ = 112
written$ = 120
work64$ = 128
total$ = 136
saved_errno$1 = 144
saved$ = 152
fname$ = 160
regs$ = 168
curtime$ = 176
begtime$ = 184
tv66 = 192
tv135 = 200
tv365 = 208
tv397 = 216
tv465 = 224
fmt_mem$ = 232
buf2$2 = 240
buf1$3 = 272
buf$4 = 304
pathname$ = 352
__$ArrayPad$ = 624
argc$ = 656
argv$ = 664
cmdline$ = 672
savecore_cmd PROC

; 7631 : {

$LN40:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 88 02
	00 00		 sub	 rsp, 648		; 00000288H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 70
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@savecore_c:

; 7632 : REGS *regs;
; 7633 : 
; 7634 :     char   *fname;                      /* -> File name (ASCIIZ)     */
; 7635 :     char   *loadaddr;                   /* loadcore memory address   */
; 7636 :     U64     work64;                     /* 64-bit work variable      */
; 7637 :     RADR    aaddr;                      /* Absolute storage address  */
; 7638 :     RADR    aaddr2;                     /* Absolute storage address  */
; 7639 :     int     fd;                         /* File descriptor           */
; 7640 :     U32     chunk;                      /* Bytes to write this time  */
; 7641 :     U32     written;                    /* Bytes written this time   */
; 7642 :     U64     total;                      /* Total bytes to be written */
; 7643 :     U64     saved;                      /* Total bytes saved so far  */
; 7644 :     BYTE    c;                          /* (dummy sscanf work area)  */
; 7645 :     char    pathname[MAX_PATH];         /* fname in host path format */
; 7646 :     time_t  begtime, curtime;           /* progress messages times   */
; 7647 :     char    fmt_mem[8];                 /* #of M/G/etc. saved so far */
; 7648 : 
; 7649 :     UNREFERENCED(cmdline);

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@savecore_c

; 7650 : 
; 7651 :     if (argc < 2)

  0002d	83 bc 24 90 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00035	7d 7b		 jge	 SHORT $LN14@savecore_c

; 7652 :     {
; 7653 :         // "Missing argument(s). Type 'help %s' for assistance."
; 7654 :         WRMSG(HHC02202,"E", argv[0] );

  00037	b8 08 00 00 00	 mov	 eax, 8
  0003c	48 6b c0 00	 imul	 rax, rax, 0
  00040	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv66[rsp], rax
  00048	b9 01 00 00 00	 mov	 ecx, 1
  0004d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00053	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0005b	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR tv66[rsp]
  00063	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00067	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210423
  00073	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00078	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210424
  0007f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00084	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00089	41 b9 03 00 00
	00		 mov	 r9d, 3
  0008f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210425
  00096	ba e6 1d 00 00	 mov	 edx, 7654		; 00001de6H
  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210426
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7655 :         return -1;

  000a8	b8 ff ff ff ff	 mov	 eax, -1
  000ad	e9 1c 0b 00 00	 jmp	 $LN1@savecore_c
$LN14@savecore_c:

; 7656 :     }
; 7657 : 
; 7658 :     fname = argv[1];

  000b2	b8 08 00 00 00	 mov	 eax, 8
  000b7	48 6b c0 01	 imul	 rax, rax, 1
  000bb	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000c3	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000c7	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR fname$[rsp], rax

; 7659 : 
; 7660 :     obtain_lock(&sysblk.cpulock[sysblk.pcpu]);

  000cf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000d6	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  000dd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000e4	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  000ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210427
  000f3	48 8b c8	 mov	 rcx, rax
  000f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 7661 : 
; 7662 :     if (!IS_CPU_ONLINE(sysblk.pcpu))

  000fc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00103	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0010a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00111	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  0011a	0f 85 d0 00 00
	00		 jne	 $LN15@savecore_c

; 7663 :     {
; 7664 :         release_lock(&sysblk.cpulock[sysblk.pcpu]);

  00120	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00127	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0012e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00135	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0013d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210429
  00144	48 8b c8	 mov	 rcx, rax
  00147	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 7665 :         // "Processor %s%02X: processor is not %s"
; 7666 :         WRMSG(HHC00816, "W", PTYPSTR(sysblk.pcpu), sysblk.pcpu, "online");

  0014d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00154	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0015b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00162	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  0016a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  00170	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv135[rsp], rax
  00178	b9 01 00 00 00	 mov	 ecx, 1
  0017d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00183	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210430
  0018a	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0018f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00196	8b 89 54 13 00
	00		 mov	 ecx, DWORD PTR [rcx+4948]
  0019c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001a0	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR tv135[rsp]
  001a8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210431
  001b4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210432
  001c0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001c5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ca	41 b9 03 00 00
	00		 mov	 r9d, 3
  001d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210433
  001d7	ba f2 1d 00 00	 mov	 edx, 7666		; 00001df2H
  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210434
  001e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7667 :         return 0;

  001e9	33 c0		 xor	 eax, eax
  001eb	e9 de 09 00 00	 jmp	 $LN1@savecore_c
$LN15@savecore_c:

; 7668 :     }
; 7669 : 
; 7670 :     regs = sysblk.regs[sysblk.pcpu];

  001f0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001f7	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  001fe	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00205	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0020d	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR regs$[rsp], rax

; 7671 : 
; 7672 :     if (argc < 3 || '*' == *(loadaddr = argv[2]))

  00215	83 bc 24 90 02
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  0021d	7c 27		 jl	 SHORT $LN18@savecore_c
  0021f	b8 08 00 00 00	 mov	 eax, 8
  00224	48 6b c0 02	 imul	 rax, rax, 2
  00228	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00230	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00234	48 89 44 24 70	 mov	 QWORD PTR loadaddr$[rsp], rax
  00239	48 8b 44 24 70	 mov	 rax, QWORD PTR loadaddr$[rsp]
  0023e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00241	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  00244	75 7b		 jne	 SHORT $LN16@savecore_c
$LN18@savecore_c:

; 7673 :     {
; 7674 :         /* Locate the first modified (changed) page */
; 7675 :         for
; 7676 :         (
; 7677 :             aaddr = 0;

  00246	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR aaddr$[rsp], 0
  0024f	eb 10		 jmp	 SHORT $LN7@savecore_c
$LN5@savecore_c:

; 7680 :             aaddr += STORAGE_KEY_4K_PAGESIZE

  00251	48 8b 44 24 50	 mov	 rax, QWORD PTR aaddr$[rsp]
  00256	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  0025c	48 89 44 24 50	 mov	 QWORD PTR aaddr$[rsp], rax
$LN7@savecore_c:

; 7678 :             aaddr < sysblk.mainsize
; 7679 :                 && !(ARCH_DEP( get_4K_storage_key )( aaddr ) & STORKEY_CHANGE);

  00261	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00268	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0026f	48 39 44 24 50	 cmp	 QWORD PTR aaddr$[rsp], rax
  00274	73 16		 jae	 SHORT $LN6@savecore_c
  00276	48 8b 4c 24 50	 mov	 rcx, QWORD PTR aaddr$[rsp]
  0027b	e8 00 00 00 00	 call	 z900_get_4K_storage_key
  00280	0f b6 c0	 movzx	 eax, al
  00283	83 e0 02	 and	 eax, 2
  00286	85 c0		 test	 eax, eax
  00288	75 02		 jne	 SHORT $LN6@savecore_c

; 7681 :         )
; 7682 :         {
; 7683 :             ;   /* (nop) */
; 7684 :         }

  0028a	eb c5		 jmp	 SHORT $LN5@savecore_c
$LN6@savecore_c:

; 7685 : 
; 7686 :         if (aaddr >= sysblk.mainsize)

  0028c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00293	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0029a	48 39 44 24 50	 cmp	 QWORD PTR aaddr$[rsp], rax
  0029f	72 0b		 jb	 SHORT $LN19@savecore_c

; 7687 :             aaddr = 0;

  002a1	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR aaddr$[rsp], 0
  002aa	eb 10		 jmp	 SHORT $LN20@savecore_c
$LN19@savecore_c:

; 7688 :         else
; 7689 :             aaddr &= ~0xFFF;

  002ac	48 8b 44 24 50	 mov	 rax, QWORD PTR aaddr$[rsp]
  002b1	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  002b7	48 89 44 24 50	 mov	 QWORD PTR aaddr$[rsp], rax
$LN20@savecore_c:

; 7690 :     }

  002bc	e9 e2 00 00 00	 jmp	 $LN17@savecore_c
$LN16@savecore_c:

; 7691 :     else if (sscanf(loadaddr, "%"SCNx64"%c", &work64, &c) !=1
; 7692 :         || work64 >= (U64) sysblk.mainsize )

  002c1	4c 8d 4c 24 58	 lea	 r9, QWORD PTR c$[rsp]
  002c6	4c 8d 84 24 80
	00 00 00	 lea	 r8, QWORD PTR work64$[rsp]
  002ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210443
  002d5	48 8b 4c 24 70	 mov	 rcx, QWORD PTR loadaddr$[rsp]
  002da	e8 00 00 00 00	 call	 sscanf
  002df	83 f8 01	 cmp	 eax, 1
  002e2	75 1c		 jne	 SHORT $LN23@savecore_c
  002e4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002eb	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  002f2	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR work64$[rsp], rax
  002fa	0f 82 96 00 00
	00		 jb	 $LN21@savecore_c
$LN23@savecore_c:

; 7693 :     {
; 7694 :         release_lock(&sysblk.cpulock[sysblk.pcpu]);

  00300	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00307	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  0030e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00315	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  0031d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210444
  00324	48 8b c8	 mov	 rcx, rax
  00327	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 7695 :         // "Invalid argument %s%s"
; 7696 :         WRMSG(HHC02205, "E", loadaddr, ": invalid starting address" );

  0032d	b9 01 00 00 00	 mov	 ecx, 1
  00332	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00338	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210445
  0033f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00344	48 8b 4c 24 70	 mov	 rcx, QWORD PTR loadaddr$[rsp]
  00349	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0034e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210446
  00355	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0035a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210447
  00361	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00366	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0036b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00371	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210448
  00378	ba 10 1e 00 00	 mov	 edx, 7696		; 00001e10H
  0037d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210449
  00384	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7697 :         return -1;

  0038a	b8 ff ff ff ff	 mov	 eax, -1
  0038f	e9 3a 08 00 00	 jmp	 $LN1@savecore_c

; 7698 :     }

  00394	eb 0d		 jmp	 SHORT $LN22@savecore_c
$LN21@savecore_c:

; 7699 :     else
; 7700 :         aaddr = (RADR) work64;

  00396	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR work64$[rsp]
  0039e	48 89 44 24 50	 mov	 QWORD PTR aaddr$[rsp], rax
$LN22@savecore_c:
$LN17@savecore_c:

; 7701 : 
; 7702 :     if (argc < 4 || '*' == *(loadaddr = argv[3]))

  003a3	83 bc 24 90 02
	00 00 04	 cmp	 DWORD PTR argc$[rsp], 4
  003ab	7c 2b		 jl	 SHORT $LN26@savecore_c
  003ad	b8 08 00 00 00	 mov	 eax, 8
  003b2	48 6b c0 03	 imul	 rax, rax, 3
  003b6	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003be	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  003c2	48 89 44 24 70	 mov	 QWORD PTR loadaddr$[rsp], rax
  003c7	48 8b 44 24 70	 mov	 rax, QWORD PTR loadaddr$[rsp]
  003cc	0f be 00	 movsx	 eax, BYTE PTR [rax]
  003cf	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  003d2	0f 85 f2 00 00
	00		 jne	 $LN24@savecore_c
$LN26@savecore_c:

; 7703 :     {
; 7704 :         /* Locate the last modified (changed) page */
; 7705 :         for
; 7706 :         (
; 7707 :             aaddr2 = sysblk.mainsize - STORAGE_KEY_4K_PAGESIZE;

  003d8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  003df	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  003e6	48 2d 00 10 00
	00		 sub	 rax, 4096		; 00001000H
  003ec	48 89 44 24 60	 mov	 QWORD PTR aaddr2$[rsp], rax
  003f1	eb 10		 jmp	 SHORT $LN10@savecore_c
$LN8@savecore_c:

; 7710 :             aaddr2 -= STORAGE_KEY_4K_PAGESIZE)

  003f3	48 8b 44 24 60	 mov	 rax, QWORD PTR aaddr2$[rsp]
  003f8	48 2d 00 10 00
	00		 sub	 rax, 4096		; 00001000H
  003fe	48 89 44 24 60	 mov	 QWORD PTR aaddr2$[rsp], rax
$LN10@savecore_c:

; 7708 :             aaddr2 > 0
; 7709 :               && !(ARCH_DEP( get_4K_storage_key )( aaddr2 ) & STORKEY_CHANGE);

  00403	48 83 7c 24 60
	00		 cmp	 QWORD PTR aaddr2$[rsp], 0
  00409	76 16		 jbe	 SHORT $LN9@savecore_c
  0040b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR aaddr2$[rsp]
  00410	e8 00 00 00 00	 call	 z900_get_4K_storage_key
  00415	0f b6 c0	 movzx	 eax, al
  00418	83 e0 02	 and	 eax, 2
  0041b	85 c0		 test	 eax, eax
  0041d	75 02		 jne	 SHORT $LN9@savecore_c

; 7711 :         {
; 7712 :             ;   /* (nop) */
; 7713 :         }

  0041f	eb d2		 jmp	 SHORT $LN8@savecore_c
$LN9@savecore_c:

; 7714 : 
; 7715 :         if (ARCH_DEP( get_4K_storage_key )( aaddr2 ) & STORKEY_CHANGE)

  00421	48 8b 4c 24 60	 mov	 rcx, QWORD PTR aaddr2$[rsp]
  00426	e8 00 00 00 00	 call	 z900_get_4K_storage_key
  0042b	0f b6 c0	 movzx	 eax, al
  0042e	83 e0 02	 and	 eax, 2
  00431	85 c0		 test	 eax, eax
  00433	74 12		 je	 SHORT $LN27@savecore_c

; 7716 :             aaddr2 |= 0xFFF;

  00435	48 8b 44 24 60	 mov	 rax, QWORD PTR aaddr2$[rsp]
  0043a	48 0d ff 0f 00
	00		 or	 rax, 4095		; 00000fffH
  00440	48 89 44 24 60	 mov	 QWORD PTR aaddr2$[rsp], rax
  00445	eb 7e		 jmp	 SHORT $LN28@savecore_c
$LN27@savecore_c:

; 7717 :         else
; 7718 :         {
; 7719 :             release_lock(&sysblk.cpulock[sysblk.pcpu]);

  00447	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0044e	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00455	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0045c	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00464	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210455
  0046b	48 8b c8	 mov	 rcx, rax
  0046e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 7720 :             // "Savecore: no modified storage found"
; 7721 :             WRMSG(HHC02246, "E");

  00474	b9 01 00 00 00	 mov	 ecx, 1
  00479	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0047f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210456
  00486	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0048b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210457
  00492	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00497	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0049c	41 b9 03 00 00
	00		 mov	 r9d, 3
  004a2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210458
  004a9	ba 29 1e 00 00	 mov	 edx, 7721		; 00001e29H
  004ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210459
  004b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7722 :             return -1;

  004bb	b8 ff ff ff ff	 mov	 eax, -1
  004c0	e9 09 07 00 00	 jmp	 $LN1@savecore_c
$LN28@savecore_c:

; 7723 :         }
; 7724 :     }

  004c5	e9 e2 00 00 00	 jmp	 $LN25@savecore_c
$LN24@savecore_c:

; 7725 :     else if (sscanf(loadaddr, "%"SCNx64"%c", &work64, &c) !=1
; 7726 :         || work64 >= (U64) sysblk.mainsize )

  004ca	4c 8d 4c 24 58	 lea	 r9, QWORD PTR c$[rsp]
  004cf	4c 8d 84 24 80
	00 00 00	 lea	 r8, QWORD PTR work64$[rsp]
  004d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210463
  004de	48 8b 4c 24 70	 mov	 rcx, QWORD PTR loadaddr$[rsp]
  004e3	e8 00 00 00 00	 call	 sscanf
  004e8	83 f8 01	 cmp	 eax, 1
  004eb	75 1c		 jne	 SHORT $LN31@savecore_c
  004ed	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  004f4	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  004fb	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR work64$[rsp], rax
  00503	0f 82 96 00 00
	00		 jb	 $LN29@savecore_c
$LN31@savecore_c:

; 7727 :     {
; 7728 :         release_lock(&sysblk.cpulock[sysblk.pcpu]);

  00509	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00510	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00517	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0051e	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00526	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210464
  0052d	48 8b c8	 mov	 rcx, rax
  00530	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 7729 :         // "Invalid argument %s%s"
; 7730 :         WRMSG(HHC02205, "E", loadaddr, ": invalid ending address" );

  00536	b9 01 00 00 00	 mov	 ecx, 1
  0053b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00541	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210465
  00548	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0054d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR loadaddr$[rsp]
  00552	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00557	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210466
  0055e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00563	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210467
  0056a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0056f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00574	41 b9 03 00 00
	00		 mov	 r9d, 3
  0057a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210468
  00581	ba 32 1e 00 00	 mov	 edx, 7730		; 00001e32H
  00586	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210469
  0058d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7731 :         return -1;

  00593	b8 ff ff ff ff	 mov	 eax, -1
  00598	e9 31 06 00 00	 jmp	 $LN1@savecore_c

; 7732 :     }

  0059d	eb 0d		 jmp	 SHORT $LN30@savecore_c
$LN29@savecore_c:

; 7733 :     else
; 7734 :         aaddr2 = (RADR) work64;

  0059f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR work64$[rsp]
  005a7	48 89 44 24 60	 mov	 QWORD PTR aaddr2$[rsp], rax
$LN30@savecore_c:
$LN25@savecore_c:

; 7735 : 
; 7736 :     if (CPUSTATE_STOPPED != regs->cpustate)

  005ac	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005b4	0f b6 40 60	 movzx	 eax, BYTE PTR [rax+96]
  005b8	83 f8 03	 cmp	 eax, 3
  005bb	74 7e		 je	 SHORT $LN32@savecore_c

; 7737 :     {
; 7738 :         release_lock(&sysblk.cpulock[sysblk.pcpu]);

  005bd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  005c4	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  005cb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  005d2	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  005da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210471
  005e1	48 8b c8	 mov	 rcx, rax
  005e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 7739 :         // "Operation rejected: CPU not stopped"
; 7740 :         WRMSG(HHC02247, "E");

  005ea	b9 01 00 00 00	 mov	 ecx, 1
  005ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210472
  005fc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00601	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210473
  00608	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0060d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00612	41 b9 03 00 00
	00		 mov	 r9d, 3
  00618	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210474
  0061f	ba 3c 1e 00 00	 mov	 edx, 7740		; 00001e3cH
  00624	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210475
  0062b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7741 :         return -1;

  00631	b8 ff ff ff ff	 mov	 eax, -1
  00636	e9 93 05 00 00	 jmp	 $LN1@savecore_c
$LN32@savecore_c:

; 7742 :     }
; 7743 : 
; 7744 :     if (aaddr > aaddr2)

  0063b	48 8b 44 24 60	 mov	 rax, QWORD PTR aaddr2$[rsp]
  00640	48 39 44 24 50	 cmp	 QWORD PTR aaddr$[rsp], rax
  00645	0f 86 c0 00 00
	00		 jbe	 $LN33@savecore_c

; 7745 :     {
; 7746 :         char buf[40];
; 7747 :         release_lock(&sysblk.cpulock[sysblk.pcpu]);

  0064b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00652	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00659	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00660	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00668	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210477
  0066f	48 8b c8	 mov	 rcx, rax
  00672	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 7748 :         MSGBUF( buf, "%16.16"PRIX64"-%16.16"PRIX64, (U64) aaddr, (U64) aaddr2);

  00678	48 8b 44 24 60	 mov	 rax, QWORD PTR aaddr2$[rsp]
  0067d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00682	4c 8b 4c 24 50	 mov	 r9, QWORD PTR aaddr$[rsp]
  00687	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210478
  0068e	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00693	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR buf$4[rsp]
  0069b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 7749 :         // "Invalid argument %s%s"
; 7750 :         WRMSG(HHC02205, "W", buf, ": invalid range" );

  006a1	b9 01 00 00 00	 mov	 ecx, 1
  006a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210479
  006b3	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  006b8	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR buf$4[rsp]
  006c0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210480
  006cc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210481
  006d8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006dd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006e2	41 b9 03 00 00
	00		 mov	 r9d, 3
  006e8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210482
  006ef	ba 46 1e 00 00	 mov	 edx, 7750		; 00001e46H
  006f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210483
  006fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7751 :         return -1;

  00701	b8 ff ff ff ff	 mov	 eax, -1
  00706	e9 c3 04 00 00	 jmp	 $LN1@savecore_c
$LN33@savecore_c:

; 7752 :     }
; 7753 : 
; 7754 :     // "Saving locations %016X-%016X to file %s"
; 7755 :     {
; 7756 :         char buf1[32];
; 7757 :         char buf2[32];
; 7758 :         MSGBUF( buf1, "%"PRIX64, (U64) aaddr );

  0070b	4c 8b 4c 24 50	 mov	 r9, QWORD PTR aaddr$[rsp]
  00710	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210484
  00717	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0071c	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR buf1$3[rsp]
  00724	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 7759 :         MSGBUF( buf2, "%"PRIX64, (U64) aaddr2 );

  0072a	4c 8b 4c 24 60	 mov	 r9, QWORD PTR aaddr2$[rsp]
  0072f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210485
  00736	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0073b	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR buf2$2[rsp]
  00743	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 7760 :         WRMSG(HHC02248, "I", buf1, buf2, fname );

  00749	b9 01 00 00 00	 mov	 ecx, 1
  0074e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00754	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fname$[rsp]
  0075c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00761	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR buf2$2[rsp]
  00769	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0076e	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR buf1$3[rsp]
  00776	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0077b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210486
  00782	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00787	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210487
  0078e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00793	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00798	41 b9 03 00 00
	00		 mov	 r9d, 3
  0079e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210488
  007a5	ba 50 1e 00 00	 mov	 edx, 7760		; 00001e50H
  007aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210489
  007b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7761 :     }
; 7762 : 
; 7763 :     hostpath(pathname, fname, sizeof(pathname));

  007b7	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  007bd	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR fname$[rsp]
  007c5	48 8d 8c 24 60
	01 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  007cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 7764 : 
; 7765 :     if ((fd = HOPEN(pathname, O_CREAT|O_WRONLY|O_EXCL|O_BINARY, S_IREAD|S_IWRITE|S_IRGRP)) < 0)

  007d3	41 b8 80 01 00
	00		 mov	 r8d, 384		; 00000180H
  007d9	ba 01 85 00 00	 mov	 edx, 34049		; 00008501H
  007de	48 8d 8c 24 60
	01 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  007e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  007ec	89 44 24 68	 mov	 DWORD PTR fd$[rsp], eax
  007f0	83 7c 24 68 00	 cmp	 DWORD PTR fd$[rsp], 0
  007f5	0f 8d bb 00 00
	00		 jge	 $LN34@savecore_c

; 7766 :     {
; 7767 :         int saved_errno = errno;

  007fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00801	8b 00		 mov	 eax, DWORD PTR [rax]
  00803	89 84 24 90 00
	00 00		 mov	 DWORD PTR saved_errno$1[rsp], eax

; 7768 :         release_lock(&sysblk.cpulock[sysblk.pcpu]);

  0080a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00811	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00818	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0081f	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00827	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210491
  0082e	48 8b c8	 mov	 rcx, rax
  00831	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 7769 :         // "Error in function %s: %s"
; 7770 :         WRMSG(HHC02219, "E", "open()", strerror(saved_errno) );

  00837	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR saved_errno$1[rsp]
  0083e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00844	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv365[rsp], rax
  0084c	b9 01 00 00 00	 mov	 ecx, 1
  00851	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00857	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tv365[rsp]
  0085f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00864	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210492
  0086b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00870	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210493
  00877	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0087c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210494
  00883	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00888	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0088d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00893	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210495
  0089a	ba 5a 1e 00 00	 mov	 edx, 7770		; 00001e5aH
  0089f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210496
  008a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7771 :         return -1;

  008ac	b8 ff ff ff ff	 mov	 eax, -1
  008b1	e9 18 03 00 00	 jmp	 $LN1@savecore_c
$LN34@savecore_c:

; 7772 :     }
; 7773 : 
; 7774 :     /* Calculate total number of bytes to be written */
; 7775 :     total = ((U64)aaddr2 - (U64)aaddr) + 1;

  008b6	48 8b 44 24 50	 mov	 rax, QWORD PTR aaddr$[rsp]
  008bb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR aaddr2$[rsp]
  008c0	48 2b c8	 sub	 rcx, rax
  008c3	48 8b c1	 mov	 rax, rcx
  008c6	48 ff c0	 inc	 rax
  008c9	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR total$[rsp], rax

; 7776 :     saved = 0;

  008d1	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR saved$[rsp], 0

; 7777 : 
; 7778 :     /* Save start time */
; 7779 :     time( &begtime );

  008dd	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR begtime$[rsp]
  008e5	e8 00 00 00 00	 call	 time
$LN13@savecore_c:

; 7780 : 
; 7781 :     /* Write smaller more manageable chunks until all is written */
; 7782 :     do
; 7783 :     {
; 7784 :         chunk = (64 * ONE_MEGABYTE);

  008ea	c7 44 24 5c 00
	00 00 04	 mov	 DWORD PTR chunk$[rsp], 67108864 ; 04000000H

; 7785 : 
; 7786 :         if (chunk > total)

  008f2	8b 44 24 5c	 mov	 eax, DWORD PTR chunk$[rsp]
  008f6	48 3b 84 24 88
	00 00 00	 cmp	 rax, QWORD PTR total$[rsp]
  008fe	76 0b		 jbe	 SHORT $LN35@savecore_c

; 7787 :             chunk = total;

  00900	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR total$[rsp]
  00907	89 44 24 5c	 mov	 DWORD PTR chunk$[rsp], eax
$LN35@savecore_c:

; 7788 : 
; 7789 :         written = write( fd, regs->mainstor + aaddr, chunk );

  0090b	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00913	48 8b 80 48 08
	00 00		 mov	 rax, QWORD PTR [rax+2120]
  0091a	48 03 44 24 50	 add	 rax, QWORD PTR aaddr$[rsp]
  0091f	44 8b 44 24 5c	 mov	 r8d, DWORD PTR chunk$[rsp]
  00924	48 8b d0	 mov	 rdx, rax
  00927	8b 4c 24 68	 mov	 ecx, DWORD PTR fd$[rsp]
  0092b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  00931	89 44 24 78	 mov	 DWORD PTR written$[rsp], eax

; 7790 : 
; 7791 :         if ((S32)written < 0)

  00935	83 7c 24 78 00	 cmp	 DWORD PTR written$[rsp], 0
  0093a	0f 8d 80 00 00
	00		 jge	 $LN36@savecore_c

; 7792 :         {
; 7793 :             // "Error in function %s: %s"
; 7794 :             WRMSG(HHC02219, "E", "write()", strerror(errno) );

  00940	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00946	8b 08		 mov	 ecx, DWORD PTR [rax]
  00948	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0094e	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv397[rsp], rax
  00956	b9 01 00 00 00	 mov	 ecx, 1
  0095b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00961	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tv397[rsp]
  00969	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0096e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210499
  00975	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0097a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210500
  00981	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00986	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210501
  0098d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00992	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00997	41 b9 03 00 00
	00		 mov	 r9d, 3
  0099d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210502
  009a4	ba 72 1e 00 00	 mov	 edx, 7794		; 00001e72H
  009a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210503
  009b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7795 :             return -1;

  009b6	b8 ff ff ff ff	 mov	 eax, -1
  009bb	e9 0e 02 00 00	 jmp	 $LN1@savecore_c
$LN36@savecore_c:

; 7796 :         }
; 7797 : 
; 7798 :         if (written < chunk)

  009c0	8b 44 24 5c	 mov	 eax, DWORD PTR chunk$[rsp]
  009c4	39 44 24 78	 cmp	 DWORD PTR written$[rsp], eax
  009c8	73 69		 jae	 SHORT $LN37@savecore_c

; 7799 :         {
; 7800 :             // "Error in function %s: %s"
; 7801 :             WRMSG(HHC02219, "E", "write()", "incomplete" );

  009ca	b9 01 00 00 00	 mov	 ecx, 1
  009cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210505
  009dc	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  009e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210506
  009e8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  009ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210507
  009f4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  009f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210508
  00a00	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a05	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a0a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a10	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210509
  00a17	ba 79 1e 00 00	 mov	 edx, 7801		; 00001e79H
  00a1c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210510
  00a23	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7802 :             return -1;

  00a29	b8 ff ff ff ff	 mov	 eax, -1
  00a2e	e9 9b 01 00 00	 jmp	 $LN1@savecore_c
$LN37@savecore_c:

; 7803 :         }
; 7804 : 
; 7805 :         aaddr += chunk;

  00a33	8b 44 24 5c	 mov	 eax, DWORD PTR chunk$[rsp]
  00a37	48 8b 4c 24 50	 mov	 rcx, QWORD PTR aaddr$[rsp]
  00a3c	48 03 c8	 add	 rcx, rax
  00a3f	48 8b c1	 mov	 rax, rcx
  00a42	48 89 44 24 50	 mov	 QWORD PTR aaddr$[rsp], rax

; 7806 :         saved += chunk;

  00a47	8b 44 24 5c	 mov	 eax, DWORD PTR chunk$[rsp]
  00a4b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR saved$[rsp]
  00a53	48 03 c8	 add	 rcx, rax
  00a56	48 8b c1	 mov	 rax, rcx
  00a59	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR saved$[rsp], rax

; 7807 : 
; 7808 :         /* Time for progress message? */
; 7809 :         time( &curtime );

  00a61	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR curtime$[rsp]
  00a69	e8 00 00 00 00	 call	 time

; 7810 :         if (difftime( curtime, begtime ) > 2.0)

  00a6e	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR begtime$[rsp]
  00a76	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR curtime$[rsp]
  00a7e	e8 00 00 00 00	 call	 difftime
  00a83	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4000000000000000
  00a8b	0f 86 94 00 00
	00		 jbe	 $LN38@savecore_c

; 7811 :         {
; 7812 :             begtime = curtime;

  00a91	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR curtime$[rsp]
  00a99	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR begtime$[rsp], rax

; 7813 :             // "%s bytes %s so far..."
; 7814 :             WRMSG( HHC02317, "I",

  00aa1	41 b8 08 00 00
	00		 mov	 r8d, 8
  00aa7	48 8d 94 24 e8
	00 00 00	 lea	 rdx, QWORD PTR fmt_mem$[rsp]
  00aaf	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR saved$[rsp]
  00ab7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmt_memsize
  00abd	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv465[rsp], rax
  00ac5	b9 01 00 00 00	 mov	 ecx, 1
  00aca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00ad0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210512
  00ad7	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00adc	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tv465[rsp]
  00ae4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00ae9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210513
  00af0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00af5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210514
  00afc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b01	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b06	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b0c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210515
  00b13	ba 88 1e 00 00	 mov	 edx, 7816		; 00001e88H
  00b18	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210516
  00b1f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN38@savecore_c:

; 7815 :                 fmt_memsize( saved, fmt_mem, sizeof( fmt_mem )),
; 7816 :                     "saved" );
; 7817 :         }
; 7818 :     }
; 7819 :     while ((total -= chunk) > 0);

  00b25	8b 44 24 5c	 mov	 eax, DWORD PTR chunk$[rsp]
  00b29	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR total$[rsp]
  00b31	48 2b c8	 sub	 rcx, rax
  00b34	48 8b c1	 mov	 rax, rcx
  00b37	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR total$[rsp], rax
  00b3f	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR total$[rsp], 0
  00b48	0f 87 9c fd ff
	ff		 ja	 $LN13@savecore_c

; 7820 : 
; 7821 :     close(fd);

  00b4e	8b 4c 24 68	 mov	 ecx, DWORD PTR fd$[rsp]
  00b52	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 7822 : 
; 7823 :     release_lock(&sysblk.cpulock[sysblk.pcpu]);

  00b58	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00b5f	48 63 80 54 13
	00 00		 movsxd	 rax, DWORD PTR [rax+4948]
  00b66	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00b6d	48 8d 84 c1 48
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax*8+328]
  00b75	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210517
  00b7c	48 8b c8	 mov	 rcx, rax
  00b7f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 7824 : 
; 7825 :     // "Operation complete"
; 7826 :     WRMSG(HHC02249, "I");

  00b85	b9 01 00 00 00	 mov	 ecx, 1
  00b8a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b90	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210518
  00b97	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b9c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210519
  00ba3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ba8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00bad	41 b9 03 00 00
	00		 mov	 r9d, 3
  00bb3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210520
  00bba	ba 92 1e 00 00	 mov	 edx, 7826		; 00001e92H
  00bbf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210521
  00bc6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7827 : 
; 7828 :     return 0;

  00bcc	33 c0		 xor	 eax, eax
$LN1@savecore_c:

; 7829 : }

  00bce	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00bd6	48 33 cc	 xor	 rcx, rsp
  00bd9	e8 00 00 00 00	 call	 __security_check_cookie
  00bde	48 81 c4 88 02
	00 00		 add	 rsp, 648		; 00000288H
  00be5	c3		 ret	 0
savecore_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
code$ = 96
dev$ = 104
unitstat$ = 112
rc$ = 116
count$ = 120
devnum$ = 124
lcss$ = 128
msg$ = 132
sLABEL$1 = 136
tv626 = 144
tv632 = 148
a$2 = 152
tv712 = 156
tv718 = 160
tv732 = 164
tv770 = 168
tv784 = 172
tv790 = 176
tv815 = 180
tv821 = 184
tv850 = 188
tv856 = 192
tv916 = 196
tv922 = 200
tv952 = 204
tv958 = 208
tv980 = 212
tv986 = 216
tv1038 = 220
tv1044 = 224
tv1060 = 228
tv1066 = 232
tv425 = 236
tv431 = 240
tv380 = 244
tv382 = 248
tv1033 = 252
tv331 = 256
tv336 = 260
tv688 = 264
tv693 = 272
tv698 = 280
tv703 = 288
tv66 = 296
tv79 = 304
tv187 = 312
tv224 = 320
tv244 = 328
devclass$ = 336
tv482 = 344
tv599 = 352
tv620 = 360
tv809 = 368
tv893 = 376
tv946 = 384
tv974 = 392
volser$3 = 400
owner$4 = 408
msgbuf$5 = 424
msgbuf$6 = 464
__$ArrayPad$ = 528
argc$ = 560
argv$ = 568
cmdline$ = 576
mt_cmd	PROC

; 7160 : {

$LN167:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 81 ec 20 02
	00 00		 sub	 rsp, 544		; 00000220H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 7161 : DEVBLK*  dev;
; 7162 : U16      devnum;
; 7163 : U16      lcss;
; 7164 : int      rc, msg = TRUE;

  00028	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR msg$[rsp], 1

; 7165 : int      count = 1;

  00033	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR count$[rsp], 1

; 7166 : char*    devclass;
; 7167 : BYTE     unitstat, code = 0;

  0003b	c6 44 24 60 00	 mov	 BYTE PTR code$[rsp], 0
$LN4@mt_cmd:

; 7168 : 
; 7169 : 
; 7170 :     UNREFERENCED(cmdline);

  00040	33 c0		 xor	 eax, eax
  00042	85 c0		 test	 eax, eax
  00044	75 fa		 jne	 SHORT $LN4@mt_cmd

; 7171 : 
; 7172 :     if (argc < 3)

  00046	83 bc 24 30 02
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  0004e	7d 7b		 jge	 SHORT $LN38@mt_cmd

; 7173 :     {
; 7174 :         WRMSG(HHC02202,"E", argv[0] );

  00050	b8 08 00 00 00	 mov	 eax, 8
  00055	48 6b c0 00	 imul	 rax, rax, 0
  00059	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv66[rsp], rax
  00061	b9 01 00 00 00	 mov	 ecx, 1
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0006c	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00074	48 8b 94 24 28
	01 00 00	 mov	 rdx, QWORD PTR tv66[rsp]
  0007c	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00080	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00085	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210066
  0008c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00091	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210067
  00098	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0009d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a2	41 b9 03 00 00
	00		 mov	 r9d, 3
  000a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210068
  000af	ba 06 1c 00 00	 mov	 edx, 7174		; 00001c06H
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210069
  000bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7175 :         return -1;

  000c1	b8 ff ff ff ff	 mov	 eax, -1
  000c6	e9 24 1b 00 00	 jmp	 $LN1@mt_cmd
$LN38@mt_cmd:

; 7176 :     }
; 7177 : 
; 7178 :     if (argc > 4)

  000cb	83 bc 24 30 02
	00 00 04	 cmp	 DWORD PTR argc$[rsp], 4
  000d3	7e 7b		 jle	 SHORT $LN39@mt_cmd

; 7179 :     {
; 7180 :         WRMSG(HHC02299,"E", argv[0]);

  000d5	b8 08 00 00 00	 mov	 eax, 8
  000da	48 6b c0 00	 imul	 rax, rax, 0
  000de	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv79[rsp], rax
  000e6	b9 01 00 00 00	 mov	 ecx, 1
  000eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000f1	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000f9	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR tv79[rsp]
  00101	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00105	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0010a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210071
  00111	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00116	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210072
  0011d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00122	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00127	41 b9 03 00 00
	00		 mov	 r9d, 3
  0012d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210073
  00134	ba 0c 1c 00 00	 mov	 edx, 7180		; 00001c0cH
  00139	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210074
  00140	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7181 :         return -1;

  00146	b8 ff ff ff ff	 mov	 eax, -1
  0014b	e9 9f 1a 00 00	 jmp	 $LN1@mt_cmd
$LN39@mt_cmd:

; 7182 :     }
; 7183 :     if ( !( ( CMD(argv[2],rew,3) ) ||

  00150	b8 08 00 00 00	 mov	 eax, 8
  00155	48 6b c0 02	 imul	 rax, rax, 2
  00159	41 b8 03 00 00
	00		 mov	 r8d, 3
  0015f	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00167	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0016b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210076
  00172	e8 00 00 00 00	 call	 strcaseabbrev
  00177	85 c0		 test	 eax, eax
  00179	0f 85 ff 01 00
	00		 jne	 $LN40@mt_cmd
  0017f	b8 08 00 00 00	 mov	 eax, 8
  00184	48 6b c0 02	 imul	 rax, rax, 2
  00188	41 b8 03 00 00
	00		 mov	 r8d, 3
  0018e	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00196	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0019a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210077
  001a1	e8 00 00 00 00	 call	 strcaseabbrev
  001a6	85 c0		 test	 eax, eax
  001a8	0f 85 d0 01 00
	00		 jne	 $LN40@mt_cmd
  001ae	b8 08 00 00 00	 mov	 eax, 8
  001b3	48 6b c0 02	 imul	 rax, rax, 2
  001b7	41 b8 03 00 00
	00		 mov	 r8d, 3
  001bd	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001c5	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  001c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210078
  001d0	e8 00 00 00 00	 call	 strcaseabbrev
  001d5	85 c0		 test	 eax, eax
  001d7	0f 85 a1 01 00
	00		 jne	 $LN40@mt_cmd
  001dd	b8 08 00 00 00	 mov	 eax, 8
  001e2	48 6b c0 02	 imul	 rax, rax, 2
  001e6	41 b8 03 00 00
	00		 mov	 r8d, 3
  001ec	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001f4	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  001f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210079
  001ff	e8 00 00 00 00	 call	 strcaseabbrev
  00204	85 c0		 test	 eax, eax
  00206	0f 85 72 01 00
	00		 jne	 $LN40@mt_cmd
  0020c	b8 08 00 00 00	 mov	 eax, 8
  00211	48 6b c0 02	 imul	 rax, rax, 2
  00215	41 b8 03 00 00
	00		 mov	 r8d, 3
  0021b	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00223	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00227	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210080
  0022e	e8 00 00 00 00	 call	 strcaseabbrev
  00233	85 c0		 test	 eax, eax
  00235	0f 85 43 01 00
	00		 jne	 $LN40@mt_cmd
  0023b	b8 08 00 00 00	 mov	 eax, 8
  00240	48 6b c0 02	 imul	 rax, rax, 2
  00244	41 b8 03 00 00
	00		 mov	 r8d, 3
  0024a	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00252	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00256	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210081
  0025d	e8 00 00 00 00	 call	 strcaseabbrev
  00262	85 c0		 test	 eax, eax
  00264	0f 85 14 01 00
	00		 jne	 $LN40@mt_cmd
  0026a	b8 08 00 00 00	 mov	 eax, 8
  0026f	48 6b c0 02	 imul	 rax, rax, 2
  00273	41 b8 03 00 00
	00		 mov	 r8d, 3
  00279	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00281	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00285	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210082
  0028c	e8 00 00 00 00	 call	 strcaseabbrev
  00291	85 c0		 test	 eax, eax
  00293	0f 85 e5 00 00
	00		 jne	 $LN40@mt_cmd
  00299	b8 08 00 00 00	 mov	 eax, 8
  0029e	48 6b c0 02	 imul	 rax, rax, 2
  002a2	41 b8 03 00 00
	00		 mov	 r8d, 3
  002a8	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002b0	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  002b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210083
  002bb	e8 00 00 00 00	 call	 strcaseabbrev
  002c0	85 c0		 test	 eax, eax
  002c2	0f 85 b6 00 00
	00		 jne	 $LN40@mt_cmd
  002c8	b8 08 00 00 00	 mov	 eax, 8
  002cd	48 6b c0 02	 imul	 rax, rax, 2
  002d1	41 b8 04 00 00
	00		 mov	 r8d, 4
  002d7	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002df	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  002e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210084
  002ea	e8 00 00 00 00	 call	 strcaseabbrev
  002ef	85 c0		 test	 eax, eax
  002f1	0f 85 87 00 00
	00		 jne	 $LN40@mt_cmd

; 7184 :             ( CMD(argv[2],fsf,3) ) ||
; 7185 :             ( CMD(argv[2],bsf,3) ) ||
; 7186 :             ( CMD(argv[2],fsr,3) ) ||
; 7187 :             ( CMD(argv[2],bsr,3) ) ||
; 7188 :             ( CMD(argv[2],asf,3) ) ||
; 7189 :             ( CMD(argv[2],wtm,3) ) ||
; 7190 :             ( CMD(argv[2],dse,3) ) ||
; 7191 :             ( CMD(argv[2],dvol1,4) )
; 7192 :           )
; 7193 :        )
; 7194 :     {
; 7195 :         WRMSG( HHC02205, "E", argv[2], ". Type 'help mt' for assistance.");

  002f7	b8 08 00 00 00	 mov	 eax, 8
  002fc	48 6b c0 02	 imul	 rax, rax, 2
  00300	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv187[rsp], rax
  00308	b9 01 00 00 00	 mov	 ecx, 1
  0030d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00313	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210085
  0031a	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0031f	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00327	48 8b 94 24 38
	01 00 00	 mov	 rdx, QWORD PTR tv187[rsp]
  0032f	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00333	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00338	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210086
  0033f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00344	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210087
  0034b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00350	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00355	41 b9 03 00 00
	00		 mov	 r9d, 3
  0035b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210088
  00362	ba 1b 1c 00 00	 mov	 edx, 7195		; 00001c1bH
  00367	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210089
  0036e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7196 :         return -1;

  00374	b8 ff ff ff ff	 mov	 eax, -1
  00379	e9 71 18 00 00	 jmp	 $LN1@mt_cmd
$LN40@mt_cmd:

; 7197 :     }
; 7198 : 
; 7199 :     if ( argc == 4  && !( CMD(argv[2],rew,3) ) )

  0037e	83 bc 24 30 02
	00 00 04	 cmp	 DWORD PTR argc$[rsp], 4
  00386	0f 85 e3 01 00
	00		 jne	 $LN41@mt_cmd
  0038c	b8 08 00 00 00	 mov	 eax, 8
  00391	48 6b c0 02	 imul	 rax, rax, 2
  00395	41 b8 03 00 00
	00		 mov	 r8d, 3
  0039b	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003a3	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  003a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210091
  003ae	e8 00 00 00 00	 call	 strcaseabbrev
  003b3	85 c0		 test	 eax, eax
  003b5	0f 85 b4 01 00
	00		 jne	 $LN41@mt_cmd

; 7200 :     {
; 7201 :         for (rc = 0; rc < (int)strlen(argv[3]); rc++)

  003bb	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
  003c3	eb 0a		 jmp	 SHORT $LN7@mt_cmd
$LN5@mt_cmd:
  003c5	8b 44 24 74	 mov	 eax, DWORD PTR rc$[rsp]
  003c9	ff c0		 inc	 eax
  003cb	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax
$LN7@mt_cmd:
  003cf	b8 08 00 00 00	 mov	 eax, 8
  003d4	48 6b c0 03	 imul	 rax, rax, 3
  003d8	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003e0	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  003e4	e8 00 00 00 00	 call	 strlen
  003e9	39 44 24 74	 cmp	 DWORD PTR rc$[rsp], eax
  003ed	0f 8d ba 00 00
	00		 jge	 $LN6@mt_cmd

; 7202 :         {
; 7203 :             if ( !isdigit(argv[3][rc]) )

  003f3	b8 08 00 00 00	 mov	 eax, 8
  003f8	48 6b c0 03	 imul	 rax, rax, 3
  003fc	48 63 4c 24 74	 movsxd	 rcx, DWORD PTR rc$[rsp]
  00401	48 8b 94 24 38
	02 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00409	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0040d	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  00411	8b c8		 mov	 ecx, eax
  00413	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  00419	85 c0		 test	 eax, eax
  0041b	0f 85 87 00 00
	00		 jne	 $LN42@mt_cmd

; 7204 :             {
; 7205 :                 WRMSG( HHC02205, "E", argv[3], "; not in range of 1-9999");

  00421	b8 08 00 00 00	 mov	 eax, 8
  00426	48 6b c0 03	 imul	 rax, rax, 3
  0042a	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv224[rsp], rax
  00432	b9 01 00 00 00	 mov	 ecx, 1
  00437	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0043d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210093
  00444	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00449	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00451	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR tv224[rsp]
  00459	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0045d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00462	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210094
  00469	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0046e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210095
  00475	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0047a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0047f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00485	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210096
  0048c	ba 25 1c 00 00	 mov	 edx, 7205		; 00001c25H
  00491	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210097
  00498	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7206 :                 return -1;

  0049e	b8 ff ff ff ff	 mov	 eax, -1
  004a3	e9 47 17 00 00	 jmp	 $LN1@mt_cmd
$LN42@mt_cmd:

; 7207 :             }
; 7208 :         }

  004a8	e9 18 ff ff ff	 jmp	 $LN5@mt_cmd
$LN6@mt_cmd:

; 7209 :         sscanf(argv[3],"%d", &count);

  004ad	b8 08 00 00 00	 mov	 eax, 8
  004b2	48 6b c0 03	 imul	 rax, rax, 3
  004b6	4c 8d 44 24 78	 lea	 r8, QWORD PTR count$[rsp]
  004bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210098
  004c2	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004ca	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  004ce	e8 00 00 00 00	 call	 sscanf

; 7210 :         if ( count < 1 || count > 9999 )

  004d3	83 7c 24 78 01	 cmp	 DWORD PTR count$[rsp], 1
  004d8	7c 0e		 jl	 SHORT $LN44@mt_cmd
  004da	81 7c 24 78 0f
	27 00 00	 cmp	 DWORD PTR count$[rsp], 9999 ; 0000270fH
  004e2	0f 8e 87 00 00
	00		 jle	 $LN43@mt_cmd
$LN44@mt_cmd:

; 7211 :         {
; 7212 :             WRMSG( HHC02205, "E", argv[3], "; not in range of 1-9999");

  004e8	b8 08 00 00 00	 mov	 eax, 8
  004ed	48 6b c0 03	 imul	 rax, rax, 3
  004f1	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv244[rsp], rax
  004f9	b9 01 00 00 00	 mov	 ecx, 1
  004fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00504	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210101
  0050b	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00510	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00518	48 8b 94 24 48
	01 00 00	 mov	 rdx, QWORD PTR tv244[rsp]
  00520	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00524	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00529	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210102
  00530	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00535	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210103
  0053c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00541	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00546	41 b9 03 00 00
	00		 mov	 r9d, 3
  0054c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210104
  00553	ba 2c 1c 00 00	 mov	 edx, 7212		; 00001c2cH
  00558	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210105
  0055f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7213 :             return -1;

  00565	b8 ff ff ff ff	 mov	 eax, -1
  0056a	e9 80 16 00 00	 jmp	 $LN1@mt_cmd
$LN43@mt_cmd:
$LN41@mt_cmd:

; 7214 :         }
; 7215 :     }
; 7216 : 
; 7217 :     rc = parse_single_devnum( argv[1], &lcss, &devnum );

  0056f	b8 08 00 00 00	 mov	 eax, 8
  00574	48 6b c0 01	 imul	 rax, rax, 1
  00578	4c 8d 44 24 7c	 lea	 r8, QWORD PTR devnum$[rsp]
  0057d	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR lcss$[rsp]
  00585	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0058d	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00591	e8 00 00 00 00	 call	 parse_single_devnum
  00596	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 7218 : 
; 7219 :     if ( rc < 0)

  0059a	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  0059f	7d 0a		 jge	 SHORT $LN45@mt_cmd

; 7220 :     {
; 7221 :         return -1;

  005a1	b8 ff ff ff ff	 mov	 eax, -1
  005a6	e9 44 16 00 00	 jmp	 $LN1@mt_cmd
$LN45@mt_cmd:

; 7222 :     }
; 7223 : 
; 7224 : 
; 7225 :     if (!(dev = find_device_by_devnum (lcss, devnum)))

  005ab	0f b7 54 24 7c	 movzx	 edx, WORD PTR devnum$[rsp]
  005b0	0f b7 8c 24 80
	00 00 00	 movzx	 ecx, WORD PTR lcss$[rsp]
  005b8	e8 00 00 00 00	 call	 find_device_by_devnum
  005bd	48 89 44 24 68	 mov	 QWORD PTR dev$[rsp], rax
  005c2	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  005c8	75 1c		 jne	 SHORT $LN46@mt_cmd

; 7226 :     {
; 7227 :         // HHC02200 "%1d:%04X device not found"
; 7228 :         devnotfound_msg(lcss,devnum);

  005ca	0f b7 54 24 7c	 movzx	 edx, WORD PTR devnum$[rsp]
  005cf	0f b7 8c 24 80
	00 00 00	 movzx	 ecx, WORD PTR lcss$[rsp]
  005d7	e8 00 00 00 00	 call	 devnotfound_msg

; 7229 :         return -1;

  005dc	b8 ff ff ff ff	 mov	 eax, -1
  005e1	e9 09 16 00 00	 jmp	 $LN1@mt_cmd
$LN46@mt_cmd:

; 7230 :     }
; 7231 : 
; 7232 :     /* Obtain the device lock */
; 7233 :     obtain_lock (&dev->lock);

  005e6	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  005eb	48 83 c0 38	 add	 rax, 56			; 00000038H
  005ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210108
  005f6	48 8b c8	 mov	 rcx, rax
  005f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 7234 : 
; 7235 :     /* Reject if device is busy or interrupt pending */
; 7236 :     if ( dev->busy || IOPENDING(dev) || (dev->scsw.flag3 & SCSW3_SC_PEND))

  005ff	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00604	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0060a	c1 e8 13	 shr	 eax, 19
  0060d	83 e0 01	 and	 eax, 1
  00610	85 c0		 test	 eax, eax
  00612	75 6b		 jne	 SHORT $LN48@mt_cmd
  00614	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00619	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0061f	c1 e8 16	 shr	 eax, 22
  00622	83 e0 01	 and	 eax, 1
  00625	85 c0		 test	 eax, eax
  00627	75 56		 jne	 SHORT $LN48@mt_cmd
  00629	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0062e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00634	c1 e8 17	 shr	 eax, 23
  00637	83 e0 01	 and	 eax, 1
  0063a	85 c0		 test	 eax, eax
  0063c	75 41		 jne	 SHORT $LN48@mt_cmd
  0063e	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00643	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00649	c1 e8 18	 shr	 eax, 24
  0064c	83 e0 01	 and	 eax, 1
  0064f	85 c0		 test	 eax, eax
  00651	75 2c		 jne	 SHORT $LN48@mt_cmd
  00653	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00658	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0065e	c1 e8 1b	 shr	 eax, 27
  00661	83 e0 01	 and	 eax, 1
  00664	85 c0		 test	 eax, eax
  00666	75 17		 jne	 SHORT $LN48@mt_cmd
  00668	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0066d	0f b6 80 0b 03
	00 00		 movzx	 eax, BYTE PTR [rax+779]
  00674	83 e0 01	 and	 eax, 1
  00677	85 c0		 test	 eax, eax
  00679	0f 84 b3 00 00
	00		 je	 $LN47@mt_cmd
$LN48@mt_cmd:

; 7237 :     {
; 7238 :         if (!sysblk.sys_reset)      // is the system in a reset status?

  0067f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00686	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  0068c	83 e0 01	 and	 eax, 1
  0068f	85 c0		 test	 eax, eax
  00691	0f 85 9b 00 00
	00		 jne	 $LN49@mt_cmd

; 7239 :         {
; 7240 :             release_lock (&dev->lock);

  00697	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0069c	48 83 c0 38	 add	 rax, 56			; 00000038H
  006a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210112
  006a7	48 8b c8	 mov	 rcx, rax
  006aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 7241 :             WRMSG(HHC02231, "E", lcss, devnum );

  006b0	0f b7 44 24 7c	 movzx	 eax, WORD PTR devnum$[rsp]
  006b5	89 84 24 00 01
	00 00		 mov	 DWORD PTR tv331[rsp], eax
  006bc	0f b7 8c 24 80
	00 00 00	 movzx	 ecx, WORD PTR lcss$[rsp]
  006c4	89 8c 24 04 01
	00 00		 mov	 DWORD PTR tv336[rsp], ecx
  006cb	b9 01 00 00 00	 mov	 ecx, 1
  006d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006d6	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR tv331[rsp]
  006dd	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  006e1	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR tv336[rsp]
  006e8	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  006ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210113
  006f3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210114
  006ff	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00704	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00709	41 b9 03 00 00
	00		 mov	 r9d, 3
  0070f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210115
  00716	ba 49 1c 00 00	 mov	 edx, 7241		; 00001c49H
  0071b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210116
  00722	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7242 :             return -1;

  00728	b8 ff ff ff ff	 mov	 eax, -1
  0072d	e9 bd 14 00 00	 jmp	 $LN1@mt_cmd
$LN49@mt_cmd:
$LN47@mt_cmd:
$LN10@mt_cmd:

; 7243 :         }
; 7244 :     }
; 7245 : 
; 7246 :     ASSERT( dev->hnd && dev->hnd->query );

  00732	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00737	48 83 b8 90 02
	00 00 00	 cmp	 QWORD PTR [rax+656], 0
  0073f	74 13		 je	 SHORT $LN51@mt_cmd
  00741	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00746	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  0074d	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  00752	75 5c		 jne	 SHORT $LN50@mt_cmd
$LN51@mt_cmd:
$LN13@mt_cmd:
  00754	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG210119
  0075b	41 b8 4e 1c 00
	00		 mov	 r8d, 7246		; 00001c4eH
  00761	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210120
  00768	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210121
  0076f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00775	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0077b	85 c0		 test	 eax, eax
  0077d	74 20		 je	 SHORT $LN52@mt_cmd
  0077f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG210123
  00786	41 b8 4e 1c 00
	00		 mov	 r8d, 7246		; 00001c4eH
  0078c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210124
  00793	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210125
  0079a	e8 00 00 00 00	 call	 DebuggerTrace
$LN52@mt_cmd:
  0079f	33 c0		 xor	 eax, eax
  007a1	85 c0		 test	 eax, eax
  007a3	75 af		 jne	 SHORT $LN13@mt_cmd
  007a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  007ab	85 c0		 test	 eax, eax
  007ad	74 01		 je	 SHORT $LN53@mt_cmd
  007af	cc		 int	 3
$LN53@mt_cmd:
$LN50@mt_cmd:
  007b0	33 c0		 xor	 eax, eax
  007b2	85 c0		 test	 eax, eax
  007b4	0f 85 78 ff ff
	ff		 jne	 $LN10@mt_cmd

; 7247 :     dev->hnd->query( dev, &devclass, 0, NULL );

  007ba	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  007bf	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  007c6	45 33 c9	 xor	 r9d, r9d
  007c9	45 33 c0	 xor	 r8d, r8d
  007cc	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR devclass$[rsp]
  007d4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  007d9	ff 50 18	 call	 QWORD PTR [rax+24]

; 7248 : 
; 7249 :     if ( strcmp(devclass,"TAPE") != 0 )

  007dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210128
  007e3	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR devclass$[rsp]
  007eb	e8 00 00 00 00	 call	 strcmp
  007f0	85 c0		 test	 eax, eax
  007f2	0f 84 a7 00 00
	00		 je	 $LN54@mt_cmd

; 7250 :     {
; 7251 :         release_lock (&dev->lock);

  007f8	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  007fd	48 83 c0 38	 add	 rax, 56			; 00000038H
  00801	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210129
  00808	48 8b c8	 mov	 rcx, rax
  0080b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 7252 :         WRMSG(HHC02209, "E", lcss, devnum, "TAPE" );

  00811	0f b7 44 24 7c	 movzx	 eax, WORD PTR devnum$[rsp]
  00816	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv380[rsp], eax
  0081d	0f b7 8c 24 80
	00 00 00	 movzx	 ecx, WORD PTR lcss$[rsp]
  00825	89 8c 24 f8 00
	00 00		 mov	 DWORD PTR tv382[rsp], ecx
  0082c	b9 01 00 00 00	 mov	 ecx, 1
  00831	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00837	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210130
  0083e	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00843	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR tv380[rsp]
  0084a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0084e	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR tv382[rsp]
  00855	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00859	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210131
  00860	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00865	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210132
  0086c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00871	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00876	41 b9 03 00 00
	00		 mov	 r9d, 3
  0087c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210133
  00883	ba 54 1c 00 00	 mov	 edx, 7252		; 00001c54H
  00888	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210134
  0088f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7253 :         return -1;

  00895	b8 ff ff ff ff	 mov	 eax, -1
  0089a	e9 50 13 00 00	 jmp	 $LN1@mt_cmd
$LN54@mt_cmd:
$LN16@mt_cmd:

; 7254 : 
; 7255 :     }
; 7256 : 
; 7257 :     ASSERT( dev->tmh && dev->tmh->tapeloaded );

  0089f	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  008a4	48 83 b8 e0 10
	00 00 00	 cmp	 QWORD PTR [rax+4320], 0
  008ac	74 13		 je	 SHORT $LN56@mt_cmd
  008ae	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  008b3	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  008ba	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  008bf	75 5c		 jne	 SHORT $LN55@mt_cmd
$LN56@mt_cmd:
$LN19@mt_cmd:
  008c1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG210137
  008c8	41 b8 59 1c 00
	00		 mov	 r8d, 7257		; 00001c59H
  008ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210138
  008d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210139
  008dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  008e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  008e8	85 c0		 test	 eax, eax
  008ea	74 20		 je	 SHORT $LN57@mt_cmd
  008ec	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG210141
  008f3	41 b8 59 1c 00
	00		 mov	 r8d, 7257		; 00001c59H
  008f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210142
  00900	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210143
  00907	e8 00 00 00 00	 call	 DebuggerTrace
$LN57@mt_cmd:
  0090c	33 c0		 xor	 eax, eax
  0090e	85 c0		 test	 eax, eax
  00910	75 af		 jne	 SHORT $LN19@mt_cmd
  00912	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00918	85 c0		 test	 eax, eax
  0091a	74 01		 je	 SHORT $LN58@mt_cmd
  0091c	cc		 int	 3
$LN58@mt_cmd:
$LN55@mt_cmd:
  0091d	33 c0		 xor	 eax, eax
  0091f	85 c0		 test	 eax, eax
  00921	0f 85 78 ff ff
	ff		 jne	 $LN16@mt_cmd

; 7258 :     if ( !dev->tmh->tapeloaded( dev, NULL, 0 ) )

  00927	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0092c	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00933	45 33 c0	 xor	 r8d, r8d
  00936	33 d2		 xor	 edx, edx
  00938	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  0093d	ff 50 70	 call	 QWORD PTR [rax+112]
  00940	85 c0		 test	 eax, eax
  00942	0f 85 cc 00 00
	00		 jne	 $LN59@mt_cmd

; 7259 :     {
; 7260 :         release_lock (&dev->lock);

  00948	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0094d	48 83 c0 38	 add	 rax, 56			; 00000038H
  00951	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210146
  00958	48 8b c8	 mov	 rcx, rax
  0095b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 7261 :         WRMSG(HHC02298, "E", LCSS_DEVNUM);

  00961	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00967	74 12		 je	 SHORT $LN111@mt_cmd
  00969	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0096e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00972	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv425[rsp], eax
  00979	eb 0b		 jmp	 SHORT $LN112@mt_cmd
$LN111@mt_cmd:
  0097b	c7 84 24 ec 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv425[rsp], 0
$LN112@mt_cmd:
  00986	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0098c	74 14		 je	 SHORT $LN113@mt_cmd
  0098e	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00993	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00997	d1 f8		 sar	 eax, 1
  00999	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv431[rsp], eax
  009a0	eb 0b		 jmp	 SHORT $LN114@mt_cmd
$LN113@mt_cmd:
  009a2	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv431[rsp], 0
$LN114@mt_cmd:
  009ad	b9 01 00 00 00	 mov	 ecx, 1
  009b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009b8	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR tv425[rsp]
  009bf	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  009c3	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR tv431[rsp]
  009ca	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  009ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210147
  009d5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  009da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210148
  009e1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  009e6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009eb	41 b9 03 00 00
	00		 mov	 r9d, 3
  009f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210149
  009f8	ba 5d 1c 00 00	 mov	 edx, 7261		; 00001c5dH
  009fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210150
  00a04	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7262 :         return -1;

  00a0a	b8 ff ff ff ff	 mov	 eax, -1
  00a0f	e9 db 11 00 00	 jmp	 $LN1@mt_cmd
$LN59@mt_cmd:

; 7263 :     }
; 7264 : 
; 7265 :     if ( CMD(argv[2],rew,3) )

  00a14	b8 08 00 00 00	 mov	 eax, 8
  00a19	48 6b c0 02	 imul	 rax, rax, 2
  00a1d	41 b8 03 00 00
	00		 mov	 r8d, 3
  00a23	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00a2b	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00a2f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210153
  00a36	e8 00 00 00 00	 call	 strcaseabbrev
  00a3b	85 c0		 test	 eax, eax
  00a3d	0f 84 d0 00 00
	00		 je	 $LN60@mt_cmd

; 7266 :     {
; 7267 :         if (argc > 3)

  00a43	83 bc 24 30 02
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00a4b	7e 7e		 jle	 SHORT $LN62@mt_cmd

; 7268 :         {
; 7269 :             WRMSG(HHC02299,"E", argv[0]);

  00a4d	b8 08 00 00 00	 mov	 eax, 8
  00a52	48 6b c0 00	 imul	 rax, rax, 0
  00a56	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv482[rsp], rax
  00a5e	b9 01 00 00 00	 mov	 ecx, 1
  00a63	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a69	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00a71	48 8b 94 24 58
	01 00 00	 mov	 rdx, QWORD PTR tv482[rsp]
  00a79	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00a7d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a82	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210156
  00a89	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a8e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210157
  00a95	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a9a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a9f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00aa5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210158
  00aac	ba 65 1c 00 00	 mov	 edx, 7269		; 00001c65H
  00ab1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210159
  00ab8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7270 :             msg = FALSE;

  00abe	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR msg$[rsp], 0

; 7271 :         }

  00ac9	eb 43		 jmp	 SHORT $LN63@mt_cmd
$LN62@mt_cmd:

; 7272 :         else
; 7273 :         {
; 7274 :             rc = dev->tmh->rewind( dev, &unitstat, code);

  00acb	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00ad0	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00ad7	44 0f b6 44 24
	60		 movzx	 r8d, BYTE PTR code$[rsp]
  00add	48 8d 54 24 70	 lea	 rdx, QWORD PTR unitstat$[rsp]
  00ae2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  00ae7	ff 50 28	 call	 QWORD PTR [rax+40]
  00aea	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 7275 : 
; 7276 :             if ( rc == 0 )

  00aee	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  00af3	75 19		 jne	 SHORT $LN64@mt_cmd

; 7277 :             {
; 7278 :                 dev->eotwarning = 0;

  00af5	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00afa	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00b00	83 e0 df	 and	 eax, -33		; ffffffdfH
  00b03	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  00b08	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax
$LN64@mt_cmd:
$LN63@mt_cmd:

; 7279 :             }
; 7280 :         }
; 7281 :     }

  00b0e	e9 52 0d 00 00	 jmp	 $LN61@mt_cmd
$LN60@mt_cmd:

; 7282 :     else if ( CMD(argv[2],fsf,3) )

  00b13	b8 08 00 00 00	 mov	 eax, 8
  00b18	48 6b c0 02	 imul	 rax, rax, 2
  00b1c	41 b8 03 00 00
	00		 mov	 r8d, 3
  00b22	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00b2a	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00b2e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210163
  00b35	e8 00 00 00 00	 call	 strcaseabbrev
  00b3a	85 c0		 test	 eax, eax
  00b3c	74 46		 je	 SHORT $LN65@mt_cmd

; 7283 :     {
; 7284 :         for ( ; count >= 1; count-- )

  00b3e	eb 0a		 jmp	 SHORT $LN22@mt_cmd
$LN20@mt_cmd:
  00b40	8b 44 24 78	 mov	 eax, DWORD PTR count$[rsp]
  00b44	ff c8		 dec	 eax
  00b46	89 44 24 78	 mov	 DWORD PTR count$[rsp], eax
$LN22@mt_cmd:
  00b4a	83 7c 24 78 01	 cmp	 DWORD PTR count$[rsp], 1
  00b4f	7c 2e		 jl	 SHORT $LN21@mt_cmd

; 7285 :         {
; 7286 :             rc = dev->tmh->fsf( dev, &unitstat, code);

  00b51	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00b56	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00b5d	44 0f b6 44 24
	60		 movzx	 r8d, BYTE PTR code$[rsp]
  00b63	48 8d 54 24 70	 lea	 rdx, QWORD PTR unitstat$[rsp]
  00b68	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  00b6d	ff 50 48	 call	 QWORD PTR [rax+72]
  00b70	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 7287 : 
; 7288 :             if ( rc < 0 )

  00b74	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  00b79	7d 02		 jge	 SHORT $LN67@mt_cmd

; 7289 :             {
; 7290 :                 break;

  00b7b	eb 02		 jmp	 SHORT $LN21@mt_cmd
$LN67@mt_cmd:

; 7291 :             }
; 7292 :         }

  00b7d	eb c1		 jmp	 SHORT $LN20@mt_cmd
$LN21@mt_cmd:

; 7293 :     }

  00b7f	e9 e1 0c 00 00	 jmp	 $LN66@mt_cmd
$LN65@mt_cmd:

; 7294 :     else if ( CMD(argv[2],bsf,3) )

  00b84	b8 08 00 00 00	 mov	 eax, 8
  00b89	48 6b c0 02	 imul	 rax, rax, 2
  00b8d	41 b8 03 00 00
	00		 mov	 r8d, 3
  00b93	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00b9b	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00b9f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210167
  00ba6	e8 00 00 00 00	 call	 strcaseabbrev
  00bab	85 c0		 test	 eax, eax
  00bad	74 46		 je	 SHORT $LN68@mt_cmd

; 7295 :     {
; 7296 :         for ( ; count >= 1; count-- )

  00baf	eb 0a		 jmp	 SHORT $LN25@mt_cmd
$LN23@mt_cmd:
  00bb1	8b 44 24 78	 mov	 eax, DWORD PTR count$[rsp]
  00bb5	ff c8		 dec	 eax
  00bb7	89 44 24 78	 mov	 DWORD PTR count$[rsp], eax
$LN25@mt_cmd:
  00bbb	83 7c 24 78 01	 cmp	 DWORD PTR count$[rsp], 1
  00bc0	7c 2e		 jl	 SHORT $LN24@mt_cmd

; 7297 :         {
; 7298 :             rc = dev->tmh->bsf( dev, &unitstat, code);

  00bc2	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00bc7	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00bce	44 0f b6 44 24
	60		 movzx	 r8d, BYTE PTR code$[rsp]
  00bd4	48 8d 54 24 70	 lea	 rdx, QWORD PTR unitstat$[rsp]
  00bd9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  00bde	ff 50 40	 call	 QWORD PTR [rax+64]
  00be1	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 7299 : 
; 7300 :             if ( rc < 0 )

  00be5	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  00bea	7d 02		 jge	 SHORT $LN70@mt_cmd

; 7301 :             {
; 7302 :                 break;

  00bec	eb 02		 jmp	 SHORT $LN24@mt_cmd
$LN70@mt_cmd:

; 7303 :             }
; 7304 :         }

  00bee	eb c1		 jmp	 SHORT $LN23@mt_cmd
$LN24@mt_cmd:

; 7305 :     }

  00bf0	e9 70 0c 00 00	 jmp	 $LN69@mt_cmd
$LN68@mt_cmd:

; 7306 :     else if ( CMD(argv[2],fsr,3) )

  00bf5	b8 08 00 00 00	 mov	 eax, 8
  00bfa	48 6b c0 02	 imul	 rax, rax, 2
  00bfe	41 b8 03 00 00
	00		 mov	 r8d, 3
  00c04	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00c0c	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00c10	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210171
  00c17	e8 00 00 00 00	 call	 strcaseabbrev
  00c1c	85 c0		 test	 eax, eax
  00c1e	74 46		 je	 SHORT $LN71@mt_cmd

; 7307 :     {
; 7308 :         for ( ; count >= 1; count-- )

  00c20	eb 0a		 jmp	 SHORT $LN28@mt_cmd
$LN26@mt_cmd:
  00c22	8b 44 24 78	 mov	 eax, DWORD PTR count$[rsp]
  00c26	ff c8		 dec	 eax
  00c28	89 44 24 78	 mov	 DWORD PTR count$[rsp], eax
$LN28@mt_cmd:
  00c2c	83 7c 24 78 01	 cmp	 DWORD PTR count$[rsp], 1
  00c31	7c 2e		 jl	 SHORT $LN27@mt_cmd

; 7309 :         {
; 7310 :             rc = dev->tmh->fsb( dev, &unitstat, code);

  00c33	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00c38	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00c3f	44 0f b6 44 24
	60		 movzx	 r8d, BYTE PTR code$[rsp]
  00c45	48 8d 54 24 70	 lea	 rdx, QWORD PTR unitstat$[rsp]
  00c4a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  00c4f	ff 50 38	 call	 QWORD PTR [rax+56]
  00c52	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 7311 : 
; 7312 :             if ( rc <= 0 )

  00c56	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  00c5b	7f 02		 jg	 SHORT $LN73@mt_cmd

; 7313 :             {
; 7314 :                 break;

  00c5d	eb 02		 jmp	 SHORT $LN27@mt_cmd
$LN73@mt_cmd:

; 7315 :             }
; 7316 :         }

  00c5f	eb c1		 jmp	 SHORT $LN26@mt_cmd
$LN27@mt_cmd:

; 7317 :     }

  00c61	e9 ff 0b 00 00	 jmp	 $LN72@mt_cmd
$LN71@mt_cmd:

; 7318 :     else if ( CMD(argv[2],bsr,3) )

  00c66	b8 08 00 00 00	 mov	 eax, 8
  00c6b	48 6b c0 02	 imul	 rax, rax, 2
  00c6f	41 b8 03 00 00
	00		 mov	 r8d, 3
  00c75	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00c7d	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00c81	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210175
  00c88	e8 00 00 00 00	 call	 strcaseabbrev
  00c8d	85 c0		 test	 eax, eax
  00c8f	74 46		 je	 SHORT $LN74@mt_cmd

; 7319 :     {
; 7320 :         for ( ; count >= 1; count-- )

  00c91	eb 0a		 jmp	 SHORT $LN31@mt_cmd
$LN29@mt_cmd:
  00c93	8b 44 24 78	 mov	 eax, DWORD PTR count$[rsp]
  00c97	ff c8		 dec	 eax
  00c99	89 44 24 78	 mov	 DWORD PTR count$[rsp], eax
$LN31@mt_cmd:
  00c9d	83 7c 24 78 01	 cmp	 DWORD PTR count$[rsp], 1
  00ca2	7c 2e		 jl	 SHORT $LN30@mt_cmd

; 7321 :         {
; 7322 :             rc = dev->tmh->bsb( dev, &unitstat, code);

  00ca4	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00ca9	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00cb0	44 0f b6 44 24
	60		 movzx	 r8d, BYTE PTR code$[rsp]
  00cb6	48 8d 54 24 70	 lea	 rdx, QWORD PTR unitstat$[rsp]
  00cbb	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  00cc0	ff 50 30	 call	 QWORD PTR [rax+48]
  00cc3	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 7323 : 
; 7324 :             if ( rc < 0 )

  00cc7	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  00ccc	7d 02		 jge	 SHORT $LN76@mt_cmd

; 7325 :             {
; 7326 :                 break;

  00cce	eb 02		 jmp	 SHORT $LN30@mt_cmd
$LN76@mt_cmd:

; 7327 :             }
; 7328 :         }

  00cd0	eb c1		 jmp	 SHORT $LN29@mt_cmd
$LN30@mt_cmd:

; 7329 :     }

  00cd2	e9 8e 0b 00 00	 jmp	 $LN75@mt_cmd
$LN74@mt_cmd:

; 7330 :     else if ( CMD(argv[2],asf,3) )

  00cd7	b8 08 00 00 00	 mov	 eax, 8
  00cdc	48 6b c0 02	 imul	 rax, rax, 2
  00ce0	41 b8 03 00 00
	00		 mov	 r8d, 3
  00ce6	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00cee	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00cf2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210179
  00cf9	e8 00 00 00 00	 call	 strcaseabbrev
  00cfe	85 c0		 test	 eax, eax
  00d00	74 70		 je	 SHORT $LN77@mt_cmd

; 7331 :     {
; 7332 :         rc = dev->tmh->rewind( dev, &unitstat, code);

  00d02	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00d07	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00d0e	44 0f b6 44 24
	60		 movzx	 r8d, BYTE PTR code$[rsp]
  00d14	48 8d 54 24 70	 lea	 rdx, QWORD PTR unitstat$[rsp]
  00d19	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  00d1e	ff 50 28	 call	 QWORD PTR [rax+40]
  00d21	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 7333 :         if ( rc == 0 )

  00d25	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  00d2a	75 41		 jne	 SHORT $LN79@mt_cmd

; 7334 :         {
; 7335 :             for ( ; count > 1; count-- )

  00d2c	eb 0a		 jmp	 SHORT $LN34@mt_cmd
$LN32@mt_cmd:
  00d2e	8b 44 24 78	 mov	 eax, DWORD PTR count$[rsp]
  00d32	ff c8		 dec	 eax
  00d34	89 44 24 78	 mov	 DWORD PTR count$[rsp], eax
$LN34@mt_cmd:
  00d38	83 7c 24 78 01	 cmp	 DWORD PTR count$[rsp], 1
  00d3d	7e 2e		 jle	 SHORT $LN33@mt_cmd

; 7336 :             {
; 7337 :                 rc = dev->tmh->fsf( dev, &unitstat, code);

  00d3f	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00d44	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00d4b	44 0f b6 44 24
	60		 movzx	 r8d, BYTE PTR code$[rsp]
  00d51	48 8d 54 24 70	 lea	 rdx, QWORD PTR unitstat$[rsp]
  00d56	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  00d5b	ff 50 48	 call	 QWORD PTR [rax+72]
  00d5e	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 7338 : 
; 7339 :                 if ( rc < 0 )

  00d62	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  00d67	7d 02		 jge	 SHORT $LN80@mt_cmd

; 7340 :                 {
; 7341 :                     break;

  00d69	eb 02		 jmp	 SHORT $LN33@mt_cmd
$LN80@mt_cmd:

; 7342 :                 }
; 7343 :             }

  00d6b	eb c1		 jmp	 SHORT $LN32@mt_cmd
$LN33@mt_cmd:
$LN79@mt_cmd:

; 7344 :         }
; 7345 :     }

  00d6d	e9 f3 0a 00 00	 jmp	 $LN78@mt_cmd
$LN77@mt_cmd:

; 7346 :     else if ( CMD(argv[2],dvol1,4) )

  00d72	b8 08 00 00 00	 mov	 eax, 8
  00d77	48 6b c0 02	 imul	 rax, rax, 2
  00d7b	41 b8 04 00 00
	00		 mov	 r8d, 4
  00d81	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00d89	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00d8d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210184
  00d94	e8 00 00 00 00	 call	 strcaseabbrev
  00d99	85 c0		 test	 eax, eax
  00d9b	0f 84 4d 07 00
	00		 je	 $LN81@mt_cmd

; 7347 :     {
; 7348 :         if (argc > 3)

  00da1	83 bc 24 30 02
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00da9	0f 8e 81 00 00
	00		 jle	 $LN83@mt_cmd

; 7349 :         {
; 7350 :             WRMSG(HHC02299,"E", argv[0]);

  00daf	b8 08 00 00 00	 mov	 eax, 8
  00db4	48 6b c0 00	 imul	 rax, rax, 0
  00db8	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv599[rsp], rax
  00dc0	b9 01 00 00 00	 mov	 ecx, 1
  00dc5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00dcb	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00dd3	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR tv599[rsp]
  00ddb	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00ddf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00de4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210187
  00deb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00df0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210188
  00df7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00dfc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e01	41 b9 03 00 00
	00		 mov	 r9d, 3
  00e07	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210189
  00e0e	ba b6 1c 00 00	 mov	 edx, 7350		; 00001cb6H
  00e13	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210190
  00e1a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7351 :             msg = FALSE;

  00e20	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR msg$[rsp], 0

; 7352 :         }

  00e2b	e9 b9 06 00 00	 jmp	 $LN84@mt_cmd
$LN83@mt_cmd:

; 7353 :         else
; 7354 :         {
; 7355 :             if ( dev->blockid == 0 )

  00e30	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00e35	83 b8 04 10 00
	00 00		 cmp	 DWORD PTR [rax+4100], 0
  00e3c	0f 85 bd 05 00
	00		 jne	 $LN85@mt_cmd

; 7356 :             {
; 7357 :                 BYTE *sLABEL = malloc( MAX_TAPE_BLKSIZE );

  00e42	b9 00 00 20 00	 mov	 ecx, 2097152		; 00200000H
  00e47	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00e4d	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR sLABEL$1[rsp], rax

; 7358 : 
; 7359 :                 if (!sLABEL)

  00e55	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR sLABEL$1[rsp], 0
  00e5e	0f 85 ef 00 00
	00		 jne	 $LN87@mt_cmd

; 7360 :                 {
; 7361 :                     WRMSG( HHC02801, "E", LCSS_DEVNUM, argv[2], "Out of memory" );

  00e64	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00e6a	74 12		 je	 SHORT $LN115@mt_cmd
  00e6c	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00e71	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00e75	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv626[rsp], eax
  00e7c	eb 0b		 jmp	 SHORT $LN116@mt_cmd
$LN115@mt_cmd:
  00e7e	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv626[rsp], 0
$LN116@mt_cmd:
  00e89	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00e8f	74 14		 je	 SHORT $LN117@mt_cmd
  00e91	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00e96	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00e9a	d1 f8		 sar	 eax, 1
  00e9c	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv632[rsp], eax
  00ea3	eb 0b		 jmp	 SHORT $LN118@mt_cmd
$LN117@mt_cmd:
  00ea5	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv632[rsp], 0
$LN118@mt_cmd:
  00eb0	b8 08 00 00 00	 mov	 eax, 8
  00eb5	48 6b c0 02	 imul	 rax, rax, 2
  00eb9	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv620[rsp], rax
  00ec1	b9 01 00 00 00	 mov	 ecx, 1
  00ec6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00ecc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210195
  00ed3	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00ed8	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00ee0	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR tv620[rsp]
  00ee8	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00eec	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00ef1	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv626[rsp]
  00ef8	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00efc	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv632[rsp]
  00f03	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00f07	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210196
  00f0e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00f13	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210197
  00f1a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00f1f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00f24	41 b9 03 00 00
	00		 mov	 r9d, 3
  00f2a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210198
  00f31	ba c1 1c 00 00	 mov	 edx, 7361		; 00001cc1H
  00f36	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210199
  00f3d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7362 :                     msg = FALSE;

  00f43	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR msg$[rsp], 0

; 7363 :                 }

  00f4e	e9 a7 04 00 00	 jmp	 $LN88@mt_cmd
$LN87@mt_cmd:

; 7364 :                 else
; 7365 :                 {
; 7366 :                     rc = dev->tmh->read( dev, sLABEL, &unitstat, code );

  00f53	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00f58	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00f5f	44 0f b6 4c 24
	60		 movzx	 r9d, BYTE PTR code$[rsp]
  00f65	4c 8d 44 24 70	 lea	 r8, QWORD PTR unitstat$[rsp]
  00f6a	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR sLABEL$1[rsp]
  00f72	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  00f77	ff 50 18	 call	 QWORD PTR [rax+24]
  00f7a	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 7367 : 
; 7368 :                     if ( rc == 80 )

  00f7e	83 7c 24 74 50	 cmp	 DWORD PTR rc$[rsp], 80	; 00000050H
  00f83	0f 85 97 03 00
	00		 jne	 $LN89@mt_cmd

; 7369 :                     {
; 7370 :                         int a = TRUE;

  00f89	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR a$2[rsp], 1

; 7371 :                         if ( strncmp( (char *)sLABEL, "VOL1", 4 ) != 0 )

  00f94	41 b8 04 00 00
	00		 mov	 r8d, 4
  00f9a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210203
  00fa1	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR sLABEL$1[rsp]
  00fa9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncmp
  00faf	85 c0		 test	 eax, eax
  00fb1	74 27		 je	 SHORT $LN91@mt_cmd

; 7372 :                         {
; 7373 :                             str_guest_to_host( sLABEL, sLABEL, 51 );

  00fb3	41 b8 33 00 00
	00		 mov	 r8d, 51			; 00000033H
  00fb9	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR sLABEL$1[rsp]
  00fc1	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR sLABEL$1[rsp]
  00fc9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_str_guest_to_host

; 7374 :                             a = FALSE;

  00fcf	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR a$2[rsp], 0
$LN91@mt_cmd:

; 7375 :                         }
; 7376 : 
; 7377 :                         if ( strncmp( (char *)sLABEL, "VOL1", 4 ) == 0 )

  00fda	41 b8 04 00 00
	00		 mov	 r8d, 4
  00fe0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210206
  00fe7	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR sLABEL$1[rsp]
  00fef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncmp
  00ff5	85 c0		 test	 eax, eax
  00ff7	0f 85 75 02 00
	00		 jne	 $LN92@mt_cmd

; 7378 :                         {
; 7379 :                             char msgbuf[64];
; 7380 :                             char volser[7];
; 7381 :                             char owner[15];
; 7382 : 
; 7383 :                             memset( msgbuf, 0, sizeof(msgbuf) );

  00ffd	48 8d 84 24 d0
	01 00 00	 lea	 rax, QWORD PTR msgbuf$6[rsp]
  01005	48 8b f8	 mov	 rdi, rax
  01008	33 c0		 xor	 eax, eax
  0100a	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0100f	f3 aa		 rep stosb

; 7384 :                             memset( volser, 0, sizeof(volser) );

  01011	48 8d 84 24 90
	01 00 00	 lea	 rax, QWORD PTR volser$3[rsp]
  01019	48 8b f8	 mov	 rdi, rax
  0101c	33 c0		 xor	 eax, eax
  0101e	b9 07 00 00 00	 mov	 ecx, 7
  01023	f3 aa		 rep stosb

; 7385 :                             memset( owner,  0, sizeof(owner)  );

  01025	48 8d 84 24 98
	01 00 00	 lea	 rax, QWORD PTR owner$4[rsp]
  0102d	48 8b f8	 mov	 rdi, rax
  01030	33 c0		 xor	 eax, eax
  01032	b9 0f 00 00 00	 mov	 ecx, 15
  01037	f3 aa		 rep stosb

; 7386 : 
; 7387 :                             strncpy( volser, (char*)&sLABEL[04],  6 );

  01039	b8 01 00 00 00	 mov	 eax, 1
  0103e	48 6b c0 04	 imul	 rax, rax, 4
  01042	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR sLABEL$1[rsp]
  0104a	48 03 c8	 add	 rcx, rax
  0104d	48 8b c1	 mov	 rax, rcx
  01050	41 b8 06 00 00
	00		 mov	 r8d, 6
  01056	48 8b d0	 mov	 rdx, rax
  01059	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR volser$3[rsp]
  01061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncpy

; 7388 :                             strncpy( owner,  (char*)&sLABEL[37], 14 );

  01067	b8 01 00 00 00	 mov	 eax, 1
  0106c	48 6b c0 25	 imul	 rax, rax, 37		; 00000025H
  01070	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR sLABEL$1[rsp]
  01078	48 03 c8	 add	 rcx, rax
  0107b	48 8b c1	 mov	 rax, rcx
  0107e	41 b8 0e 00 00
	00		 mov	 r8d, 14
  01084	48 8b d0	 mov	 rdx, rax
  01087	48 8d 8c 24 98
	01 00 00	 lea	 rcx, QWORD PTR owner$4[rsp]
  0108f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncpy

; 7389 : 
; 7390 :                             MSGBUF( msgbuf, "%s%s%s%s%s",

  01095	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR a$2[rsp], 0
  0109d	74 11		 je	 SHORT $LN119@mt_cmd
  0109f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG210207
  010a6	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv688[rsp], rax
  010ae	eb 0f		 jmp	 SHORT $LN120@mt_cmd
$LN119@mt_cmd:
  010b0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG210208
  010b7	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv688[rsp], rax
$LN120@mt_cmd:
  010bf	48 8d 8c 24 98
	01 00 00	 lea	 rcx, QWORD PTR owner$4[rsp]
  010c7	e8 00 00 00 00	 call	 strlen
  010cc	48 85 c0	 test	 rax, rax
  010cf	75 11		 jne	 SHORT $LN121@mt_cmd
  010d1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG210209
  010d8	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv693[rsp], rax
  010e0	eb 0f		 jmp	 SHORT $LN122@mt_cmd
$LN121@mt_cmd:
  010e2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG210210
  010e9	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv693[rsp], rax
$LN122@mt_cmd:
  010f1	48 8d 8c 24 98
	01 00 00	 lea	 rcx, QWORD PTR owner$4[rsp]
  010f9	e8 00 00 00 00	 call	 strlen
  010fe	48 85 c0	 test	 rax, rax
  01101	75 11		 jne	 SHORT $LN123@mt_cmd
  01103	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG210211
  0110a	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv698[rsp], rax
  01112	eb 10		 jmp	 SHORT $LN124@mt_cmd
$LN123@mt_cmd:
  01114	48 8d 84 24 98
	01 00 00	 lea	 rax, QWORD PTR owner$4[rsp]
  0111c	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv698[rsp], rax
$LN124@mt_cmd:
  01124	48 8d 8c 24 98
	01 00 00	 lea	 rcx, QWORD PTR owner$4[rsp]
  0112c	e8 00 00 00 00	 call	 strlen
  01131	48 85 c0	 test	 rax, rax
  01134	75 11		 jne	 SHORT $LN125@mt_cmd
  01136	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG210212
  0113d	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv703[rsp], rax
  01145	eb 0f		 jmp	 SHORT $LN126@mt_cmd
$LN125@mt_cmd:
  01147	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG210213
  0114e	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv703[rsp], rax
$LN126@mt_cmd:
  01156	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR tv688[rsp]
  0115e	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  01163	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR tv693[rsp]
  0116b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  01170	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR tv698[rsp]
  01178	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0117d	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR tv703[rsp]
  01185	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0118a	4c 8d 8c 24 90
	01 00 00	 lea	 r9, QWORD PTR volser$3[rsp]
  01192	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210214
  01199	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0119e	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$6[rsp]
  011a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 7391 :                                             volser,
; 7392 :                                             strlen(owner) == 0? "":", Owner = \"",
; 7393 :                                             strlen(owner) == 0? "": owner,
; 7394 :                                             strlen(owner) == 0? "": "\"",
; 7395 :                                             a ? " (ASCII LABELED) ": "" );
; 7396 : 
; 7397 :                             WRMSG( HHC02805, "I", LCSS_DEVNUM, msgbuf );

  011ac	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  011b2	74 12		 je	 SHORT $LN127@mt_cmd
  011b4	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  011b9	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  011bd	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv712[rsp], eax
  011c4	eb 0b		 jmp	 SHORT $LN128@mt_cmd
$LN127@mt_cmd:
  011c6	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv712[rsp], 0
$LN128@mt_cmd:
  011d1	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  011d7	74 14		 je	 SHORT $LN129@mt_cmd
  011d9	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  011de	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  011e2	d1 f8		 sar	 eax, 1
  011e4	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv718[rsp], eax
  011eb	eb 0b		 jmp	 SHORT $LN130@mt_cmd
$LN129@mt_cmd:
  011ed	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv718[rsp], 0
$LN130@mt_cmd:
  011f8	b9 01 00 00 00	 mov	 ecx, 1
  011fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01203	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$6[rsp]
  0120b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01210	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv712[rsp]
  01217	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0121b	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv718[rsp]
  01222	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01226	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210215
  0122d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01232	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210216
  01239	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0123e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01243	41 b9 03 00 00
	00		 mov	 r9d, 3
  01249	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210217
  01250	ba e5 1c 00 00	 mov	 edx, 7397		; 00001ce5H
  01255	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210218
  0125c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7398 :                             msg = FALSE;

  01262	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR msg$[rsp], 0

; 7399 :                         }

  0126d	e9 a9 00 00 00	 jmp	 $LN93@mt_cmd
$LN92@mt_cmd:

; 7400 :                         else
; 7401 :                             WRMSG( HHC02806, "I", LCSS_DEVNUM );

  01272	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  01278	74 12		 je	 SHORT $LN131@mt_cmd
  0127a	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0127f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01283	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv732[rsp], eax
  0128a	eb 0b		 jmp	 SHORT $LN132@mt_cmd
$LN131@mt_cmd:
  0128c	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv732[rsp], 0
$LN132@mt_cmd:
  01297	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0129d	74 14		 je	 SHORT $LN133@mt_cmd
  0129f	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  012a4	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  012a8	d1 f8		 sar	 eax, 1
  012aa	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv770[rsp], eax
  012b1	eb 0b		 jmp	 SHORT $LN134@mt_cmd
$LN133@mt_cmd:
  012b3	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv770[rsp], 0
$LN134@mt_cmd:
  012be	b9 01 00 00 00	 mov	 ecx, 1
  012c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  012c9	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv732[rsp]
  012d0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  012d4	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv770[rsp]
  012db	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  012df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210219
  012e6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  012eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210220
  012f2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  012f7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  012fc	41 b9 03 00 00
	00		 mov	 r9d, 3
  01302	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210221
  01309	ba e9 1c 00 00	 mov	 edx, 7401		; 00001ce9H
  0130e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210222
  01315	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN93@mt_cmd:

; 7402 :                     }

  0131b	e9 a9 00 00 00	 jmp	 $LN90@mt_cmd
$LN89@mt_cmd:

; 7403 :                     else
; 7404 :                     {
; 7405 :                         WRMSG( HHC02806, "I", LCSS_DEVNUM );

  01320	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  01326	74 12		 je	 SHORT $LN135@mt_cmd
  01328	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0132d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01331	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv784[rsp], eax
  01338	eb 0b		 jmp	 SHORT $LN136@mt_cmd
$LN135@mt_cmd:
  0133a	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv784[rsp], 0
$LN136@mt_cmd:
  01345	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0134b	74 14		 je	 SHORT $LN137@mt_cmd
  0134d	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01352	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01356	d1 f8		 sar	 eax, 1
  01358	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv790[rsp], eax
  0135f	eb 0b		 jmp	 SHORT $LN138@mt_cmd
$LN137@mt_cmd:
  01361	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv790[rsp], 0
$LN138@mt_cmd:
  0136c	b9 01 00 00 00	 mov	 ecx, 1
  01371	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01377	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR tv784[rsp]
  0137e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01382	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR tv790[rsp]
  01389	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0138d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210223
  01394	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01399	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210224
  013a0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  013a5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  013aa	41 b9 03 00 00
	00		 mov	 r9d, 3
  013b0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210225
  013b7	ba ed 1c 00 00	 mov	 edx, 7405		; 00001cedH
  013bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210226
  013c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN90@mt_cmd:

; 7406 :                     }
; 7407 : 
; 7408 :                     rc = dev->tmh->rewind( dev, &unitstat, code);

  013c9	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  013ce	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  013d5	44 0f b6 44 24
	60		 movzx	 r8d, BYTE PTR code$[rsp]
  013db	48 8d 54 24 70	 lea	 rdx, QWORD PTR unitstat$[rsp]
  013e0	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  013e5	ff 50 28	 call	 QWORD PTR [rax+40]
  013e8	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 7409 : 
; 7410 :                     free( sLABEL );

  013ec	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR sLABEL$1[rsp]
  013f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN88@mt_cmd:

; 7411 :                 }
; 7412 :             }

  013fa	e9 ea 00 00 00	 jmp	 $LN86@mt_cmd
$LN85@mt_cmd:

; 7413 :             else
; 7414 :             {
; 7415 :                 WRMSG( HHC02801, "E", LCSS_DEVNUM, argv[2], "Tape not at BOT" );

  013ff	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  01405	74 12		 je	 SHORT $LN139@mt_cmd
  01407	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0140c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01410	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv815[rsp], eax
  01417	eb 0b		 jmp	 SHORT $LN140@mt_cmd
$LN139@mt_cmd:
  01419	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv815[rsp], 0
$LN140@mt_cmd:
  01424	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0142a	74 14		 je	 SHORT $LN141@mt_cmd
  0142c	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01431	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01435	d1 f8		 sar	 eax, 1
  01437	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv821[rsp], eax
  0143e	eb 0b		 jmp	 SHORT $LN142@mt_cmd
$LN141@mt_cmd:
  01440	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv821[rsp], 0
$LN142@mt_cmd:
  0144b	b8 08 00 00 00	 mov	 eax, 8
  01450	48 6b c0 02	 imul	 rax, rax, 2
  01454	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR tv809[rsp], rax
  0145c	b9 01 00 00 00	 mov	 ecx, 1
  01461	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01467	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210227
  0146e	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01473	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0147b	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR tv809[rsp]
  01483	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  01487	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0148c	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv815[rsp]
  01493	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01497	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR tv821[rsp]
  0149e	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  014a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210228
  014a9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  014ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210229
  014b5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  014ba	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  014bf	41 b9 03 00 00
	00		 mov	 r9d, 3
  014c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210230
  014cc	ba f7 1c 00 00	 mov	 edx, 7415		; 00001cf7H
  014d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210231
  014d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7416 :                 msg = FALSE;

  014de	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR msg$[rsp], 0
$LN86@mt_cmd:
$LN84@mt_cmd:

; 7417 :             }
; 7418 :         }
; 7419 :     }

  014e9	e9 77 03 00 00	 jmp	 $LN82@mt_cmd
$LN81@mt_cmd:

; 7420 :     else if ( CMD(argv[2],wtm,3) )

  014ee	b8 08 00 00 00	 mov	 eax, 8
  014f3	48 6b c0 02	 imul	 rax, rax, 2
  014f7	41 b8 03 00 00
	00		 mov	 r8d, 3
  014fd	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01505	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  01509	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210234
  01510	e8 00 00 00 00	 call	 strcaseabbrev
  01515	85 c0		 test	 eax, eax
  01517	0f 84 65 01 00
	00		 je	 $LN94@mt_cmd

; 7421 :     {
; 7422 :         if ( dev->readonly || dev->tdparms.logical_readonly )

  0151d	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01522	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  01528	d1 e8		 shr	 eax, 1
  0152a	83 e0 01	 and	 eax, 1
  0152d	85 c0		 test	 eax, eax
  0152f	75 19		 jne	 SHORT $LN98@mt_cmd
  01531	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01536	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  0153c	c1 e8 0b	 shr	 eax, 11
  0153f	83 e0 01	 and	 eax, 1
  01542	85 c0		 test	 eax, eax
  01544	0f 84 b6 00 00
	00		 je	 $LN96@mt_cmd
$LN98@mt_cmd:

; 7423 :         {
; 7424 :             WRMSG( HHC02804, "E", LCSS_DEVNUM );

  0154a	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  01550	74 12		 je	 SHORT $LN143@mt_cmd
  01552	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01557	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0155b	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv850[rsp], eax
  01562	eb 0b		 jmp	 SHORT $LN144@mt_cmd
$LN143@mt_cmd:
  01564	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv850[rsp], 0
$LN144@mt_cmd:
  0156f	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  01575	74 14		 je	 SHORT $LN145@mt_cmd
  01577	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0157c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01580	d1 f8		 sar	 eax, 1
  01582	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv856[rsp], eax
  01589	eb 0b		 jmp	 SHORT $LN146@mt_cmd
$LN145@mt_cmd:
  0158b	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv856[rsp], 0
$LN146@mt_cmd:
  01596	b9 01 00 00 00	 mov	 ecx, 1
  0159b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  015a1	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR tv850[rsp]
  015a8	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  015ac	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR tv856[rsp]
  015b3	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  015b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210238
  015be	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  015c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210239
  015ca	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  015cf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  015d4	41 b9 03 00 00
	00		 mov	 r9d, 3
  015da	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210240
  015e1	ba 00 1d 00 00	 mov	 edx, 7424		; 00001d00H
  015e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210241
  015ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7425 :             msg = FALSE;

  015f3	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR msg$[rsp], 0

; 7426 :         }

  015fe	eb 7d		 jmp	 SHORT $LN97@mt_cmd
$LN96@mt_cmd:

; 7427 :         else
; 7428 :         {
; 7429 :             for ( ; count >= 1; count-- )

  01600	eb 0a		 jmp	 SHORT $LN37@mt_cmd
$LN35@mt_cmd:
  01602	8b 44 24 78	 mov	 eax, DWORD PTR count$[rsp]
  01606	ff c8		 dec	 eax
  01608	89 44 24 78	 mov	 DWORD PTR count$[rsp], eax
$LN37@mt_cmd:
  0160c	83 7c 24 78 01	 cmp	 DWORD PTR count$[rsp], 1
  01611	7c 4b		 jl	 SHORT $LN36@mt_cmd

; 7430 :             {
; 7431 :                 rc = dev->tmh->wtm( dev, &unitstat, code);

  01613	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01618	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  0161f	44 0f b6 44 24
	60		 movzx	 r8d, BYTE PTR code$[rsp]
  01625	48 8d 54 24 70	 lea	 rdx, QWORD PTR unitstat$[rsp]
  0162a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  0162f	ff 50 50	 call	 QWORD PTR [rax+80]
  01632	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 7432 : 
; 7433 :                 if ( rc >= 0 )

  01636	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  0163b	7c 1d		 jl	 SHORT $LN99@mt_cmd

; 7434 :                 {
; 7435 :                     dev->curfilen++;

  0163d	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01642	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  01649	66 ff c0	 inc	 ax
  0164c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  01651	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 7436 :                 }

  01658	eb 02		 jmp	 SHORT $LN100@mt_cmd
$LN99@mt_cmd:

; 7437 :                 else
; 7438 :                 {
; 7439 :                     break;

  0165a	eb 02		 jmp	 SHORT $LN36@mt_cmd
$LN100@mt_cmd:

; 7440 :                 }
; 7441 :             }

  0165c	eb a4		 jmp	 SHORT $LN35@mt_cmd
$LN36@mt_cmd:

; 7442 : 
; 7443 :             dev->tmh->sync( dev, &unitstat, code );

  0165e	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01663	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  0166a	44 0f b6 44 24
	60		 movzx	 r8d, BYTE PTR code$[rsp]
  01670	48 8d 54 24 70	 lea	 rdx, QWORD PTR unitstat$[rsp]
  01675	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  0167a	ff 50 58	 call	 QWORD PTR [rax+88]
$LN97@mt_cmd:

; 7444 :         }
; 7445 :     }

  0167d	e9 e3 01 00 00	 jmp	 $LN95@mt_cmd
$LN94@mt_cmd:

; 7446 :     else if ( CMD(argv[2],dse,3) )

  01682	b8 08 00 00 00	 mov	 eax, 8
  01687	48 6b c0 02	 imul	 rax, rax, 2
  0168b	41 b8 03 00 00
	00		 mov	 r8d, 3
  01691	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01699	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0169d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210245
  016a4	e8 00 00 00 00	 call	 strcaseabbrev
  016a9	85 c0		 test	 eax, eax
  016ab	0f 84 b4 01 00
	00		 je	 $LN101@mt_cmd

; 7447 :     {
; 7448 :         if (argc > 3)

  016b1	83 bc 24 30 02
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  016b9	0f 8e 81 00 00
	00		 jle	 $LN102@mt_cmd

; 7449 :         {
; 7450 :             WRMSG(HHC02299,"E", argv[0]);

  016bf	b8 08 00 00 00	 mov	 eax, 8
  016c4	48 6b c0 00	 imul	 rax, rax, 0
  016c8	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv893[rsp], rax
  016d0	b9 01 00 00 00	 mov	 ecx, 1
  016d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  016db	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  016e3	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR tv893[rsp]
  016eb	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  016ef	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  016f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210248
  016fb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01700	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210249
  01707	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0170c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01711	41 b9 03 00 00
	00		 mov	 r9d, 3
  01717	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210250
  0171e	ba 1a 1d 00 00	 mov	 edx, 7450		; 00001d1aH
  01723	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210251
  0172a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7451 :             msg = FALSE;

  01730	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR msg$[rsp], 0

; 7452 :         }

  0173b	e9 25 01 00 00	 jmp	 $LN103@mt_cmd
$LN102@mt_cmd:

; 7453 :         else
; 7454 :         {
; 7455 :             if ( dev->readonly || dev->tdparms.logical_readonly )

  01740	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01745	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0174b	d1 e8		 shr	 eax, 1
  0174d	83 e0 01	 and	 eax, 1
  01750	85 c0		 test	 eax, eax
  01752	75 19		 jne	 SHORT $LN106@mt_cmd
  01754	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01759	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  0175f	c1 e8 0b	 shr	 eax, 11
  01762	83 e0 01	 and	 eax, 1
  01765	85 c0		 test	 eax, eax
  01767	0f 84 b6 00 00
	00		 je	 $LN104@mt_cmd
$LN106@mt_cmd:

; 7456 :             {
; 7457 :                 WRMSG( HHC02804, "E", LCSS_DEVNUM );

  0176d	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  01773	74 12		 je	 SHORT $LN147@mt_cmd
  01775	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0177a	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0177e	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv916[rsp], eax
  01785	eb 0b		 jmp	 SHORT $LN148@mt_cmd
$LN147@mt_cmd:
  01787	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv916[rsp], 0
$LN148@mt_cmd:
  01792	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  01798	74 14		 je	 SHORT $LN149@mt_cmd
  0179a	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0179f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  017a3	d1 f8		 sar	 eax, 1
  017a5	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv922[rsp], eax
  017ac	eb 0b		 jmp	 SHORT $LN150@mt_cmd
$LN149@mt_cmd:
  017ae	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv922[rsp], 0
$LN150@mt_cmd:
  017b9	b9 01 00 00 00	 mov	 ecx, 1
  017be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  017c4	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR tv916[rsp]
  017cb	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  017cf	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR tv922[rsp]
  017d6	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  017da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210255
  017e1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  017e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210256
  017ed	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  017f2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  017f7	41 b9 03 00 00
	00		 mov	 r9d, 3
  017fd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210257
  01804	ba 21 1d 00 00	 mov	 edx, 7457		; 00001d21H
  01809	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210258
  01810	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7458 :                 msg = FALSE;

  01816	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR msg$[rsp], 0

; 7459 :             }

  01821	eb 42		 jmp	 SHORT $LN105@mt_cmd
$LN104@mt_cmd:

; 7460 :             else
; 7461 :             {
; 7462 :                 rc = dev->tmh->dse( dev, &unitstat, code);

  01823	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01828	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  0182f	44 0f b6 44 24
	60		 movzx	 r8d, BYTE PTR code$[rsp]
  01835	48 8d 54 24 70	 lea	 rdx, QWORD PTR unitstat$[rsp]
  0183a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  0183f	ff 50 60	 call	 QWORD PTR [rax+96]
  01842	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 7463 : 
; 7464 :                 dev->tmh->sync( dev, &unitstat, code );

  01846	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0184b	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  01852	44 0f b6 44 24
	60		 movzx	 r8d, BYTE PTR code$[rsp]
  01858	48 8d 54 24 70	 lea	 rdx, QWORD PTR unitstat$[rsp]
  0185d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  01862	ff 50 58	 call	 QWORD PTR [rax+88]
$LN105@mt_cmd:
$LN103@mt_cmd:
$LN101@mt_cmd:
$LN95@mt_cmd:
$LN82@mt_cmd:
$LN78@mt_cmd:
$LN75@mt_cmd:
$LN72@mt_cmd:
$LN69@mt_cmd:
$LN66@mt_cmd:
$LN61@mt_cmd:

; 7465 :             }
; 7466 :         }
; 7467 :     }
; 7468 : 
; 7469 :     if ( msg )

  01865	83 bc 24 84 00
	00 00 00	 cmp	 DWORD PTR msg$[rsp], 0
  0186d	0f 84 e2 01 00
	00		 je	 $LN107@mt_cmd

; 7470 :     {
; 7471 :         if ( rc >= 0 )

  01873	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  01878	0f 8c d8 00 00
	00		 jl	 $LN108@mt_cmd

; 7472 :         {
; 7473 :             WRMSG( HHC02800, "I", LCSS_DEVNUM, argv[2] );

  0187e	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  01884	74 12		 je	 SHORT $LN151@mt_cmd
  01886	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0188b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0188f	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv952[rsp], eax
  01896	eb 0b		 jmp	 SHORT $LN152@mt_cmd
$LN151@mt_cmd:
  01898	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv952[rsp], 0
$LN152@mt_cmd:
  018a3	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  018a9	74 14		 je	 SHORT $LN153@mt_cmd
  018ab	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  018b0	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  018b4	d1 f8		 sar	 eax, 1
  018b6	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv958[rsp], eax
  018bd	eb 0b		 jmp	 SHORT $LN154@mt_cmd
$LN153@mt_cmd:
  018bf	c7 84 24 d0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv958[rsp], 0
$LN154@mt_cmd:
  018ca	b8 08 00 00 00	 mov	 eax, 8
  018cf	48 6b c0 02	 imul	 rax, rax, 2
  018d3	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR tv946[rsp], rax
  018db	b9 01 00 00 00	 mov	 ecx, 1
  018e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  018e6	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  018ee	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR tv946[rsp]
  018f6	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  018fa	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  018ff	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR tv952[rsp]
  01906	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0190a	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR tv958[rsp]
  01911	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01915	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210262
  0191c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01921	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210263
  01928	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0192d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01932	41 b9 03 00 00
	00		 mov	 r9d, 3
  01938	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210264
  0193f	ba 31 1d 00 00	 mov	 edx, 7473		; 00001d31H
  01944	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210265
  0194b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7474 :         }

  01951	e9 ff 00 00 00	 jmp	 $LN109@mt_cmd
$LN108@mt_cmd:

; 7475 :         else
; 7476 :         {
; 7477 :             char msgbuf[32];
; 7478 :             MSGBUF( msgbuf, "rc = %d", rc );

  01956	44 8b 4c 24 74	 mov	 r9d, DWORD PTR rc$[rsp]
  0195b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210266
  01962	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  01967	48 8d 8c 24 a8
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$5[rsp]
  0196f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 7479 :             WRMSG( HHC02801, "E", LCSS_DEVNUM, argv[2], msgbuf );

  01975	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0197b	74 12		 je	 SHORT $LN155@mt_cmd
  0197d	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01982	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01986	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv980[rsp], eax
  0198d	eb 0b		 jmp	 SHORT $LN156@mt_cmd
$LN155@mt_cmd:
  0198f	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv980[rsp], 0
$LN156@mt_cmd:
  0199a	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  019a0	74 14		 je	 SHORT $LN157@mt_cmd
  019a2	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  019a7	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  019ab	d1 f8		 sar	 eax, 1
  019ad	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv986[rsp], eax
  019b4	eb 0b		 jmp	 SHORT $LN158@mt_cmd
$LN157@mt_cmd:
  019b6	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv986[rsp], 0
$LN158@mt_cmd:
  019c1	b8 08 00 00 00	 mov	 eax, 8
  019c6	48 6b c0 02	 imul	 rax, rax, 2
  019ca	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR tv974[rsp], rax
  019d2	b9 01 00 00 00	 mov	 ecx, 1
  019d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  019dd	48 8d 8c 24 a8
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$5[rsp]
  019e5	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  019ea	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  019f2	48 8b 94 24 88
	01 00 00	 mov	 rdx, QWORD PTR tv974[rsp]
  019fa	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  019fe	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01a03	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR tv980[rsp]
  01a0a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01a0e	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR tv986[rsp]
  01a15	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01a19	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210267
  01a20	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01a25	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210268
  01a2c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01a31	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01a36	41 b9 03 00 00
	00		 mov	 r9d, 3
  01a3c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210269
  01a43	ba 37 1d 00 00	 mov	 edx, 7479		; 00001d37H
  01a48	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210270
  01a4f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN109@mt_cmd:
$LN107@mt_cmd:

; 7480 :         }
; 7481 :     }
; 7482 : 
; 7483 :     release_lock (&dev->lock);

  01a55	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01a5a	48 83 c0 38	 add	 rax, 56			; 00000038H
  01a5e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210271
  01a65	48 8b c8	 mov	 rcx, rax
  01a68	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 7484 : 
; 7485 :     WRMSG( HHC02802, "I", LCSS_DEVNUM, dev->curfilen );

  01a6e	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  01a74	74 12		 je	 SHORT $LN159@mt_cmd
  01a76	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01a7b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01a7f	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv1038[rsp], eax
  01a86	eb 0b		 jmp	 SHORT $LN160@mt_cmd
$LN159@mt_cmd:
  01a88	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1038[rsp], 0
$LN160@mt_cmd:
  01a93	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  01a99	74 14		 je	 SHORT $LN161@mt_cmd
  01a9b	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01aa0	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01aa4	d1 f8		 sar	 eax, 1
  01aa6	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv1044[rsp], eax
  01aad	eb 0b		 jmp	 SHORT $LN162@mt_cmd
$LN161@mt_cmd:
  01aaf	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1044[rsp], 0
$LN162@mt_cmd:
  01aba	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01abf	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  01ac6	89 84 24 fc 00
	00 00		 mov	 DWORD PTR tv1033[rsp], eax
  01acd	b9 01 00 00 00	 mov	 ecx, 1
  01ad2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01ad8	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR tv1033[rsp]
  01adf	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  01ae3	8b 8c 24 dc 00
	00 00		 mov	 ecx, DWORD PTR tv1038[rsp]
  01aea	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01aee	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR tv1044[rsp]
  01af5	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01af9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210272
  01b00	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01b05	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210273
  01b0c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01b11	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01b16	41 b9 03 00 00
	00		 mov	 r9d, 3
  01b1c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210274
  01b23	ba 3d 1d 00 00	 mov	 edx, 7485		; 00001d3dH
  01b28	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210275
  01b2f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7486 :     WRMSG( HHC02803, "I", LCSS_DEVNUM, dev->blockid  );

  01b35	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  01b3b	74 12		 je	 SHORT $LN163@mt_cmd
  01b3d	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01b42	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01b46	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv1060[rsp], eax
  01b4d	eb 0b		 jmp	 SHORT $LN164@mt_cmd
$LN163@mt_cmd:
  01b4f	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1060[rsp], 0
$LN164@mt_cmd:
  01b5a	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  01b60	74 14		 je	 SHORT $LN165@mt_cmd
  01b62	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01b67	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01b6b	d1 f8		 sar	 eax, 1
  01b6d	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv1066[rsp], eax
  01b74	eb 0b		 jmp	 SHORT $LN166@mt_cmd
$LN165@mt_cmd:
  01b76	c7 84 24 e8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1066[rsp], 0
$LN166@mt_cmd:
  01b81	b9 01 00 00 00	 mov	 ecx, 1
  01b86	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01b8c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  01b91	8b 89 04 10 00
	00		 mov	 ecx, DWORD PTR [rcx+4100]
  01b97	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  01b9b	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR tv1060[rsp]
  01ba2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01ba6	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR tv1066[rsp]
  01bad	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01bb1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210276
  01bb8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01bbd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210277
  01bc4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01bc9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01bce	41 b9 03 00 00
	00		 mov	 r9d, 3
  01bd4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210278
  01bdb	ba 3e 1d 00 00	 mov	 edx, 7486		; 00001d3eH
  01be0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210279
  01be7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7487 : 
; 7488 :     return 0;

  01bed	33 c0		 xor	 eax, eax
$LN1@mt_cmd:

; 7489 : }

  01bef	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  01bf7	48 33 cc	 xor	 rcx, rsp
  01bfa	e8 00 00 00 00	 call	 __security_check_cookie
  01bff	48 81 c4 20 02
	00 00		 add	 rsp, 544		; 00000220H
  01c06	5f		 pop	 rdi
  01c07	c3		 ret	 0
mt_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv176 = 80
tv194 = 88
tv77 = 96
tv157 = 104
tv178 = 112
tv196 = 120
argc$ = 144
argv$ = 152
cmdline$ = 160
mounted_tape_reinit_cmd PROC

; 7123 : {

$LN24:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
$LN4@mounted_ta:

; 7124 :     UNREFERENCED(cmdline);

  00015	33 c0		 xor	 eax, eax
  00017	85 c0		 test	 eax, eax
  00019	75 fa		 jne	 SHORT $LN4@mounted_ta
$LN7@mounted_ta:

; 7125 : 
; 7126 :     UPPER_ARGV_0( argv );

  0001b	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00024	74 47		 je	 SHORT $LN8@mounted_ta
  00026	b8 08 00 00 00	 mov	 eax, 8
  0002b	48 6b c0 00	 imul	 rax, rax, 0
  0002f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00037	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0003c	74 2f		 je	 SHORT $LN8@mounted_ta
  0003e	b8 08 00 00 00	 mov	 eax, 8
  00043	48 6b c0 00	 imul	 rax, rax, 0
  00047	b9 08 00 00 00	 mov	 ecx, 8
  0004c	48 6b c9 00	 imul	 rcx, rcx, 0
  00050	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00058	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0005c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00064	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00068	e8 00 00 00 00	 call	 strupper
$LN8@mounted_ta:
  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 a8		 jne	 SHORT $LN7@mounted_ta

; 7127 : 
; 7128 :     if ( argc > 2 )

  00073	83 bc 24 90 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0007b	7e 75		 jle	 SHORT $LN9@mounted_ta

; 7129 :     {
; 7130 :         WRMSG( HHC02299, "E", argv[0] );

  0007d	b8 08 00 00 00	 mov	 eax, 8
  00082	48 6b c0 00	 imul	 rax, rax, 0
  00086	48 89 44 24 60	 mov	 QWORD PTR tv77[rsp], rax
  0008b	b9 01 00 00 00	 mov	 ecx, 1
  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00096	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0009e	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv77[rsp]
  000a3	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000a7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209964
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209965
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209966
  000d6	ba da 1b 00 00	 mov	 edx, 7130		; 00001bdaH
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209967
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7131 :         return -1;

  000e8	b8 ff ff ff ff	 mov	 eax, -1
  000ed	e9 ee 02 00 00	 jmp	 $LN1@mounted_ta
$LN9@mounted_ta:

; 7132 :     }
; 7133 : 
; 7134 :     if ( argc == 2 )

  000f2	83 bc 24 90 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000fa	0f 85 38 02 00
	00		 jne	 $LN10@mounted_ta

; 7135 :     {
; 7136 :         if ( CMD(argv[1],disallow,4) || CMD(argv[1],disable,4) )

  00100	b8 08 00 00 00	 mov	 eax, 8
  00105	48 6b c0 01	 imul	 rax, rax, 1
  00109	41 b8 04 00 00
	00		 mov	 r8d, 4
  0010f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00117	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0011b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209973
  00122	e8 00 00 00 00	 call	 strcaseabbrev
  00127	85 c0		 test	 eax, eax
  00129	75 2b		 jne	 SHORT $LN14@mounted_ta
  0012b	b8 08 00 00 00	 mov	 eax, 8
  00130	48 6b c0 01	 imul	 rax, rax, 1
  00134	41 b8 04 00 00
	00		 mov	 r8d, 4
  0013a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00142	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00146	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209974
  0014d	e8 00 00 00 00	 call	 strcaseabbrev
  00152	85 c0		 test	 eax, eax
  00154	74 23		 je	 SHORT $LN12@mounted_ta
$LN14@mounted_ta:

; 7137 :             sysblk.nomountedtapereinit = TRUE;

  00156	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0015d	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00163	0f ba e8 12	 bts	 eax, 18
  00167	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0016e	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax
  00174	e9 fa 00 00 00	 jmp	 $LN13@mounted_ta
$LN12@mounted_ta:

; 7138 :         else if ( CMD(argv[1],allow,3) || CMD(argv[1],enable,3) )

  00179	b8 08 00 00 00	 mov	 eax, 8
  0017e	48 6b c0 01	 imul	 rax, rax, 1
  00182	41 b8 03 00 00
	00		 mov	 r8d, 3
  00188	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00190	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00194	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209978
  0019b	e8 00 00 00 00	 call	 strcaseabbrev
  001a0	85 c0		 test	 eax, eax
  001a2	75 2b		 jne	 SHORT $LN17@mounted_ta
  001a4	b8 08 00 00 00	 mov	 eax, 8
  001a9	48 6b c0 01	 imul	 rax, rax, 1
  001ad	41 b8 03 00 00
	00		 mov	 r8d, 3
  001b3	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001bb	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  001bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209979
  001c6	e8 00 00 00 00	 call	 strcaseabbrev
  001cb	85 c0		 test	 eax, eax
  001cd	74 23		 je	 SHORT $LN15@mounted_ta
$LN17@mounted_ta:

; 7139 :             sysblk.nomountedtapereinit = FALSE;

  001cf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001d6	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  001dc	0f ba f0 12	 btr	 eax, 18
  001e0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001e7	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax
  001ed	e9 81 00 00 00	 jmp	 $LN16@mounted_ta
$LN15@mounted_ta:

; 7140 :         else
; 7141 :         {
; 7142 :             WRMSG(HHC02205, "E", argv[1], "");

  001f2	b8 08 00 00 00	 mov	 eax, 8
  001f7	48 6b c0 01	 imul	 rax, rax, 1
  001fb	48 89 44 24 68	 mov	 QWORD PTR tv157[rsp], rax
  00200	b9 01 00 00 00	 mov	 ecx, 1
  00205	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0020b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209980
  00212	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00217	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0021f	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv157[rsp]
  00224	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00228	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0022d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209981
  00234	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00239	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209982
  00240	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00245	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00250	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209983
  00257	ba e6 1b 00 00	 mov	 edx, 7142		; 00001be6H
  0025c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209984
  00263	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7143 :             return -1;

  00269	b8 ff ff ff ff	 mov	 eax, -1
  0026e	e9 6d 01 00 00	 jmp	 $LN1@mounted_ta
$LN16@mounted_ta:
$LN13@mounted_ta:

; 7144 :         }
; 7145 :         if ( MLVL(VERBOSE) )

  00273	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0027a	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  00280	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00285	85 c0		 test	 eax, eax
  00287	0f 84 a6 00 00
	00		 je	 $LN18@mounted_ta

; 7146 :             WRMSG(HHC02204, "I", argv[0],

  0028d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00294	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  0029a	c1 e8 12	 shr	 eax, 18
  0029d	83 e0 01	 and	 eax, 1
  002a0	85 c0		 test	 eax, eax
  002a2	74 0e		 je	 SHORT $LN20@mounted_ta
  002a4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209986
  002ab	48 89 44 24 50	 mov	 QWORD PTR tv176[rsp], rax
  002b0	eb 0c		 jmp	 SHORT $LN21@mounted_ta
$LN20@mounted_ta:
  002b2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209987
  002b9	48 89 44 24 50	 mov	 QWORD PTR tv176[rsp], rax
$LN21@mounted_ta:
  002be	b8 08 00 00 00	 mov	 eax, 8
  002c3	48 6b c0 00	 imul	 rax, rax, 0
  002c7	48 89 44 24 70	 mov	 QWORD PTR tv178[rsp], rax
  002cc	b9 01 00 00 00	 mov	 ecx, 1
  002d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002d7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv176[rsp]
  002dc	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002e1	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002e9	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv178[rsp]
  002ee	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  002f2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209988
  002fe	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00303	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209989
  0030a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0030f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00314	41 b9 03 00 00
	00		 mov	 r9d, 3
  0031a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209990
  00321	ba eb 1b 00 00	 mov	 edx, 7147		; 00001bebH
  00326	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209991
  0032d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN18@mounted_ta:

; 7147 :                   sysblk.nomountedtapereinit?"disabled":"enabled");
; 7148 :     }

  00333	e9 a6 00 00 00	 jmp	 $LN11@mounted_ta
$LN10@mounted_ta:

; 7149 :     else
; 7150 :         WRMSG(HHC02203, "I", argv[0],

  00338	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0033f	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00345	c1 e8 12	 shr	 eax, 18
  00348	83 e0 01	 and	 eax, 1
  0034b	85 c0		 test	 eax, eax
  0034d	74 0e		 je	 SHORT $LN22@mounted_ta
  0034f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209992
  00356	48 89 44 24 58	 mov	 QWORD PTR tv194[rsp], rax
  0035b	eb 0c		 jmp	 SHORT $LN23@mounted_ta
$LN22@mounted_ta:
  0035d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209993
  00364	48 89 44 24 58	 mov	 QWORD PTR tv194[rsp], rax
$LN23@mounted_ta:
  00369	b8 08 00 00 00	 mov	 eax, 8
  0036e	48 6b c0 00	 imul	 rax, rax, 0
  00372	48 89 44 24 78	 mov	 QWORD PTR tv196[rsp], rax
  00377	b9 01 00 00 00	 mov	 ecx, 1
  0037c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00382	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv194[rsp]
  00387	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0038c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00394	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv196[rsp]
  00399	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0039d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209994
  003a9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209995
  003b5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003ba	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003bf	41 b9 03 00 00
	00		 mov	 r9d, 3
  003c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209996
  003cc	ba ef 1b 00 00	 mov	 edx, 7151		; 00001befH
  003d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209997
  003d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN11@mounted_ta:

; 7151 :               sysblk.nomountedtapereinit?"disabled":"enabled");
; 7152 : 
; 7153 :     return 0;

  003de	33 c0		 xor	 eax, eax
$LN1@mounted_ta:

; 7154 : }

  003e0	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  003e7	c3		 ret	 0
mounted_tape_reinit_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
action$ = 80
dev$ = 88
devnum$ = 96
lcss$ = 100
flag$ = 104
level$ = 108
tv346 = 112
tid$ = 116
c$ = 120
tv277 = 124
tv285 = 128
tv325 = 132
tv333 = 136
devascii$ = 144
cckd$1 = 152
rc$ = 160
tv176 = 164
tv178 = 168
tv80 = 176
tv214 = 184
tv243 = 192
tv259 = 200
cckd$2 = 208
argc$ = 240
argv$ = 248
cmdline$ = 256
sf_cmd	PROC

; 6958 : {

$LN59:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H

; 6959 : char     action;                        /* Action character `+-cd'   */
; 6960 : char*    devascii;                      /* -> Device name            */
; 6961 : DEVBLK*  dev;                           /* -> Device block           */
; 6962 : U16      devnum;                        /* Device number             */
; 6963 : U16      lcss;                          /* Logical CSS               */
; 6964 : int      flag = 1;                      /* sf- flag (default merge)  */

  00015	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR flag$[rsp], 1

; 6965 : int      level = 2;                     /* sfk level (default 2)     */

  0001d	c7 44 24 6c 02
	00 00 00	 mov	 DWORD PTR level$[rsp], 2
$LN4@sf_cmd:

; 6966 : TID      tid;                           /* sf command thread id      */
; 6967 : char     c;                             /* work for sscan            */
; 6968 : int      rc;
; 6969 : 
; 6970 :     UNREFERENCED( cmdline );

  00025	33 c0		 xor	 eax, eax
  00027	85 c0		 test	 eax, eax
  00029	75 fa		 jne	 SHORT $LN4@sf_cmd

; 6971 : 
; 6972 :     if (strlen( argv[0] ) < 3 || !strchr( "+-cdk", argv[0][2] ))

  0002b	b8 08 00 00 00	 mov	 eax, 8
  00030	48 6b c0 00	 imul	 rax, rax, 0
  00034	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0003c	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00040	e8 00 00 00 00	 call	 strlen
  00045	48 83 f8 03	 cmp	 rax, 3
  00049	72 39		 jb	 SHORT $LN11@sf_cmd
  0004b	b8 08 00 00 00	 mov	 eax, 8
  00050	48 6b c0 00	 imul	 rax, rax, 0
  00054	b9 01 00 00 00	 mov	 ecx, 1
  00059	48 6b c9 02	 imul	 rcx, rcx, 2
  0005d	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00065	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00069	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  0006d	8b d0		 mov	 edx, eax
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209865
  00076	e8 00 00 00 00	 call	 strchr
  0007b	48 85 c0	 test	 rax, rax
  0007e	0f 85 87 00 00
	00		 jne	 $LN10@sf_cmd
$LN11@sf_cmd:

; 6973 :     {
; 6974 :         // "Invalid argument %s%s"
; 6975 :         WRMSG( HHC02205, "E", argv[0],

  00084	b8 08 00 00 00	 mov	 eax, 8
  00089	48 6b c0 00	 imul	 rax, rax, 0
  0008d	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv80[rsp], rax
  00095	b9 01 00 00 00	 mov	 ecx, 1
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209866
  000a7	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000ac	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000b4	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR tv80[rsp]
  000bc	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000c0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209867
  000cc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209868
  000d8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000dd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e2	41 b9 03 00 00
	00		 mov	 r9d, 3
  000e8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209869
  000ef	ba 40 1b 00 00	 mov	 edx, 6976		; 00001b40H
  000f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209870
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6976 :             ": must be 'sf+', 'sf-', 'sfc', 'sfk' or 'sfd'" );
; 6977 :         return -1;

  00101	b8 ff ff ff ff	 mov	 eax, -1
  00106	e9 0a 09 00 00	 jmp	 $LN1@sf_cmd
$LN10@sf_cmd:

; 6978 :     }
; 6979 : 
; 6980 :     action = argv[0][2];

  0010b	b8 08 00 00 00	 mov	 eax, 8
  00110	48 6b c0 00	 imul	 rax, rax, 0
  00114	b9 01 00 00 00	 mov	 ecx, 1
  00119	48 6b c9 02	 imul	 rcx, rcx, 2
  0011d	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00125	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00129	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0012d	88 44 24 50	 mov	 BYTE PTR action$[rsp], al

; 6981 :     /*
; 6982 :      * device name either follows the action character or is the
; 6983 :      * next operand
; 6984 :      */
; 6985 :     if (strlen( argv[0] ) > 3)

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 00	 imul	 rax, rax, 0
  0013a	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00142	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00146	e8 00 00 00 00	 call	 strlen
  0014b	48 83 f8 03	 cmp	 rax, 3
  0014f	76 23		 jbe	 SHORT $LN12@sf_cmd

; 6986 :         devascii = argv[0] + 3;

  00151	b8 08 00 00 00	 mov	 eax, 8
  00156	48 6b c0 00	 imul	 rax, rax, 0
  0015a	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00162	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00166	48 83 c0 03	 add	 rax, 3
  0016a	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR devascii$[rsp], rax
  00172	eb 65		 jmp	 SHORT $LN13@sf_cmd
$LN12@sf_cmd:

; 6987 :     else
; 6988 :     {
; 6989 :         argv++;  argc--;

  00174	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0017c	48 83 c0 08	 add	 rax, 8
  00180	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR argv$[rsp], rax
  00188	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  0018f	ff c8		 dec	 eax
  00191	89 84 24 f0 00
	00 00		 mov	 DWORD PTR argc$[rsp], eax

; 6990 : 
; 6991 :         if (argc <= 0 || !(devascii = argv[0]))

  00198	83 bc 24 f0 00
	00 00 00	 cmp	 DWORD PTR argc$[rsp], 0
  001a0	7e 28		 jle	 SHORT $LN15@sf_cmd
  001a2	b8 08 00 00 00	 mov	 eax, 8
  001a7	48 6b c0 00	 imul	 rax, rax, 0
  001ab	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001b3	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  001b7	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR devascii$[rsp], rax
  001bf	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR devascii$[rsp], 0
  001c8	75 0f		 jne	 SHORT $LN14@sf_cmd
$LN15@sf_cmd:

; 6992 :         {
; 6993 :             // HHC02201 "Device number missing"
; 6994 :             missing_devnum();

  001ca	e8 00 00 00 00	 call	 missing_devnum

; 6995 :             return -1;

  001cf	b8 ff ff ff ff	 mov	 eax, -1
  001d4	e9 3c 08 00 00	 jmp	 $LN1@sf_cmd
$LN14@sf_cmd:
$LN13@sf_cmd:

; 6996 :         }
; 6997 :     }
; 6998 : 
; 6999 :     /* device name can be '*' meaning all cckd devices */
; 7000 :     if (strcmp( devascii, "*" ) == 0)

  001d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209877
  001e0	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR devascii$[rsp]
  001e8	e8 00 00 00 00	 call	 strcmp
  001ed	85 c0		 test	 eax, eax
  001ef	0f 85 a3 00 00
	00		 jne	 $LN16@sf_cmd

; 7001 :     {
; 7002 :         /* Verify that at least one cckd device exists in the configuration */
; 7003 :         for (dev = sysblk.firstdev; dev && !dev->cckd_ext; dev = dev->nextdev);

  001f5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001fc	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  00203	48 89 44 24 58	 mov	 QWORD PTR dev$[rsp], rax
  00208	eb 0e		 jmp	 SHORT $LN7@sf_cmd
$LN5@sf_cmd:
  0020a	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0020f	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00213	48 89 44 24 58	 mov	 QWORD PTR dev$[rsp], rax
$LN7@sf_cmd:
  00218	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0021e	74 11		 je	 SHORT $LN6@sf_cmd
  00220	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00225	48 83 b8 08 13
	00 00 00	 cmp	 QWORD PTR [rax+4872], 0
  0022d	75 02		 jne	 SHORT $LN6@sf_cmd
  0022f	eb d9		 jmp	 SHORT $LN5@sf_cmd
$LN6@sf_cmd:

; 7004 :             /* nothing */
; 7005 : 
; 7006 :         if (!dev)       // (did we find any cckd devices?)

  00231	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00237	75 51		 jne	 SHORT $LN18@sf_cmd

; 7007 :         {
; 7008 :             // "Empty list"
; 7009 :             WRMSG( HHC02216, "E" );

  00239	b9 01 00 00 00	 mov	 ecx, 1
  0023e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00244	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209879
  0024b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00250	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209880
  00257	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0025c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00261	41 b9 03 00 00
	00		 mov	 r9d, 3
  00267	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209881
  0026e	ba 61 1b 00 00	 mov	 edx, 7009		; 00001b61H
  00273	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209882
  0027a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7010 :             return -1;

  00280	b8 ff ff ff ff	 mov	 eax, -1
  00285	e9 8b 07 00 00	 jmp	 $LN1@sf_cmd
$LN18@sf_cmd:

; 7011 :         }
; 7012 :         dev = NULL;

  0028a	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR dev$[rsp], 0

; 7013 :     }

  00293	e9 01 01 00 00	 jmp	 $LN17@sf_cmd
$LN16@sf_cmd:

; 7014 :     else
; 7015 :     {
; 7016 :         if (parse_single_devnum( devascii, &lcss, &devnum ) < 0)

  00298	4c 8d 44 24 60	 lea	 r8, QWORD PTR devnum$[rsp]
  0029d	48 8d 54 24 64	 lea	 rdx, QWORD PTR lcss$[rsp]
  002a2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR devascii$[rsp]
  002aa	e8 00 00 00 00	 call	 parse_single_devnum
  002af	85 c0		 test	 eax, eax
  002b1	7d 0a		 jge	 SHORT $LN19@sf_cmd

; 7017 :             return -1;

  002b3	b8 ff ff ff ff	 mov	 eax, -1
  002b8	e9 58 07 00 00	 jmp	 $LN1@sf_cmd
$LN19@sf_cmd:

; 7018 : 
; 7019 :         if (!(dev = find_device_by_devnum ( lcss, devnum )))

  002bd	0f b7 54 24 60	 movzx	 edx, WORD PTR devnum$[rsp]
  002c2	0f b7 4c 24 64	 movzx	 ecx, WORD PTR lcss$[rsp]
  002c7	e8 00 00 00 00	 call	 find_device_by_devnum
  002cc	48 89 44 24 58	 mov	 QWORD PTR dev$[rsp], rax
  002d1	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  002d7	75 22		 jne	 SHORT $LN20@sf_cmd

; 7020 :         {
; 7021 :             // HHC02200 "%1d:%04X device not found"
; 7022 :             rc = devnotfound_msg( lcss, devnum );

  002d9	0f b7 54 24 60	 movzx	 edx, WORD PTR devnum$[rsp]
  002de	0f b7 4c 24 64	 movzx	 ecx, WORD PTR lcss$[rsp]
  002e3	e8 00 00 00 00	 call	 devnotfound_msg
  002e8	89 84 24 a0 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax

; 7023 :             return rc;

  002ef	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR rc$[rsp]
  002f6	e9 1a 07 00 00	 jmp	 $LN1@sf_cmd
$LN20@sf_cmd:

; 7024 :         }
; 7025 : 
; 7026 :         if (!dev->cckd_ext)

  002fb	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00300	48 83 b8 08 13
	00 00 00	 cmp	 QWORD PTR [rax+4872], 0
  00308	0f 85 8b 00 00
	00		 jne	 $LN21@sf_cmd

; 7027 :         {
; 7028 :             // "%1d:%04X device is not a %s"
; 7029 :             WRMSG( HHC02209, "E", lcss, devnum, "cckd device" );

  0030e	0f b7 44 24 60	 movzx	 eax, WORD PTR devnum$[rsp]
  00313	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv176[rsp], eax
  0031a	0f b7 4c 24 64	 movzx	 ecx, WORD PTR lcss$[rsp]
  0031f	89 8c 24 a8 00
	00 00		 mov	 DWORD PTR tv178[rsp], ecx
  00326	b9 01 00 00 00	 mov	 ecx, 1
  0032b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00331	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209886
  00338	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0033d	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv176[rsp]
  00344	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00348	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv178[rsp]
  0034f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00353	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209887
  0035a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0035f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209888
  00366	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0036b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00370	41 b9 03 00 00
	00		 mov	 r9d, 3
  00376	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209889
  0037d	ba 75 1b 00 00	 mov	 edx, 7029		; 00001b75H
  00382	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209890
  00389	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7030 :             return -1;

  0038f	b8 ff ff ff ff	 mov	 eax, -1
  00394	e9 7c 06 00 00	 jmp	 $LN1@sf_cmd
$LN21@sf_cmd:
$LN17@sf_cmd:

; 7031 :         }
; 7032 :     }
; 7033 : 
; 7034 :     /* For 'sf-' the operand can be 'nomerge', 'merge' or 'force' */
; 7035 :     if (action == '-' && argc > 1)

  00399	0f be 44 24 50	 movsx	 eax, BYTE PTR action$[rsp]
  0039e	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  003a1	0f 85 61 01 00
	00		 jne	 $LN22@sf_cmd
  003a7	83 bc 24 f0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  003af	0f 8e 53 01 00
	00		 jle	 $LN22@sf_cmd

; 7036 :     {
; 7037 :              if (CMD( argv[1], NOMERGE, 5 )) flag = 0;

  003b5	b8 08 00 00 00	 mov	 eax, 8
  003ba	48 6b c0 01	 imul	 rax, rax, 1
  003be	41 b8 05 00 00
	00		 mov	 r8d, 5
  003c4	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003cc	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  003d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209894
  003d7	e8 00 00 00 00	 call	 strcaseabbrev
  003dc	85 c0		 test	 eax, eax
  003de	74 0d		 je	 SHORT $LN23@sf_cmd
  003e0	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR flag$[rsp], 0
  003e8	e9 f7 00 00 00	 jmp	 $LN24@sf_cmd
$LN23@sf_cmd:

; 7038 :         else if (CMD( argv[1], MERGE,   3 )) flag = 1;

  003ed	b8 08 00 00 00	 mov	 eax, 8
  003f2	48 6b c0 01	 imul	 rax, rax, 1
  003f6	41 b8 03 00 00
	00		 mov	 r8d, 3
  003fc	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00404	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00408	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209897
  0040f	e8 00 00 00 00	 call	 strcaseabbrev
  00414	85 c0		 test	 eax, eax
  00416	74 0d		 je	 SHORT $LN25@sf_cmd
  00418	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR flag$[rsp], 1
  00420	e9 bf 00 00 00	 jmp	 $LN26@sf_cmd
$LN25@sf_cmd:

; 7039 :         else if (CMD( argv[1], FORCE,   5 )) flag = 2;

  00425	b8 08 00 00 00	 mov	 eax, 8
  0042a	48 6b c0 01	 imul	 rax, rax, 1
  0042e	41 b8 05 00 00
	00		 mov	 r8d, 5
  00434	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0043c	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00440	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209900
  00447	e8 00 00 00 00	 call	 strcaseabbrev
  0044c	85 c0		 test	 eax, eax
  0044e	74 0d		 je	 SHORT $LN27@sf_cmd
  00450	c7 44 24 68 02
	00 00 00	 mov	 DWORD PTR flag$[rsp], 2
  00458	e9 87 00 00 00	 jmp	 $LN28@sf_cmd
$LN27@sf_cmd:

; 7040 :         else
; 7041 :         {
; 7042 :             // "Invalid argument %s%s"
; 7043 :             WRMSG( HHC02205, "E", argv[1],

  0045d	b8 08 00 00 00	 mov	 eax, 8
  00462	48 6b c0 01	 imul	 rax, rax, 1
  00466	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv214[rsp], rax
  0046e	b9 01 00 00 00	 mov	 ecx, 1
  00473	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00479	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209901
  00480	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00485	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0048d	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR tv214[rsp]
  00495	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00499	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0049e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209902
  004a5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209903
  004b1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004b6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004bb	41 b9 03 00 00
	00		 mov	 r9d, 3
  004c1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209904
  004c8	ba 84 1b 00 00	 mov	 edx, 7044		; 00001b84H
  004cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209905
  004d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7044 :                 ": operand must be 'merge', 'nomerge' or 'force'" );
; 7045 :             return -1;

  004da	b8 ff ff ff ff	 mov	 eax, -1
  004df	e9 31 05 00 00	 jmp	 $LN1@sf_cmd
$LN28@sf_cmd:
$LN26@sf_cmd:
$LN24@sf_cmd:

; 7046 :         }
; 7047 : 
; 7048 :         argv++;  argc--;

  004e4	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  004ec	48 83 c0 08	 add	 rax, 8
  004f0	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR argv$[rsp], rax
  004f8	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  004ff	ff c8		 dec	 eax
  00501	89 84 24 f0 00
	00 00		 mov	 DWORD PTR argc$[rsp], eax
$LN22@sf_cmd:

; 7049 :     }
; 7050 : 
; 7051 :     /* For 'sfk' the operand is an integer -1 .. 4 */
; 7052 :     if (action == 'k' && argc > 1)

  00508	0f be 44 24 50	 movsx	 eax, BYTE PTR action$[rsp]
  0050d	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  00510	0f 85 01 01 00
	00		 jne	 $LN29@sf_cmd
  00516	83 bc 24 f0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0051e	0f 8e f3 00 00
	00		 jle	 $LN29@sf_cmd

; 7053 :     {
; 7054 :         if (0
; 7055 :             || sscanf( argv[1], "%d%c", &level, &c ) != 1
; 7056 :             || level < -1
; 7057 :             || level >  4

  00524	33 c0		 xor	 eax, eax
  00526	85 c0		 test	 eax, eax
  00528	75 42		 jne	 SHORT $LN31@sf_cmd
  0052a	b8 08 00 00 00	 mov	 eax, 8
  0052f	48 6b c0 01	 imul	 rax, rax, 1
  00533	4c 8d 4c 24 78	 lea	 r9, QWORD PTR c$[rsp]
  00538	4c 8d 44 24 6c	 lea	 r8, QWORD PTR level$[rsp]
  0053d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209909
  00544	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0054c	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00550	e8 00 00 00 00	 call	 sscanf
  00555	83 f8 01	 cmp	 eax, 1
  00558	75 12		 jne	 SHORT $LN31@sf_cmd
  0055a	83 7c 24 6c ff	 cmp	 DWORD PTR level$[rsp], -1
  0055f	7c 0b		 jl	 SHORT $LN31@sf_cmd
  00561	83 7c 24 6c 04	 cmp	 DWORD PTR level$[rsp], 4
  00566	0f 8e 87 00 00
	00		 jle	 $LN30@sf_cmd
$LN31@sf_cmd:

; 7058 :         )
; 7059 :         {
; 7060 :             // "Invalid argument %s%s"
; 7061 :             WRMSG( HHC02205, "E", argv[1],

  0056c	b8 08 00 00 00	 mov	 eax, 8
  00571	48 6b c0 01	 imul	 rax, rax, 1
  00575	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv243[rsp], rax
  0057d	b9 01 00 00 00	 mov	 ecx, 1
  00582	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00588	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209910
  0058f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00594	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0059c	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR tv243[rsp]
  005a4	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  005a8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209911
  005b4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209912
  005c0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005c5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005ca	41 b9 03 00 00
	00		 mov	 r9d, 3
  005d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209913
  005d7	ba 96 1b 00 00	 mov	 edx, 7062		; 00001b96H
  005dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209914
  005e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7062 :                 ": operand must be a number -1 .. 4" );
; 7063 :             return -1;

  005e9	b8 ff ff ff ff	 mov	 eax, -1
  005ee	e9 22 04 00 00	 jmp	 $LN1@sf_cmd
$LN30@sf_cmd:

; 7064 :         }
; 7065 : 
; 7066 :         argv++;  argc--;

  005f3	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  005fb	48 83 c0 08	 add	 rax, 8
  005ff	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR argv$[rsp], rax
  00607	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  0060e	ff c8		 dec	 eax
  00610	89 84 24 f0 00
	00 00		 mov	 DWORD PTR argc$[rsp], eax
$LN29@sf_cmd:

; 7067 :     }
; 7068 : 
; 7069 :     /* No other operands allowed */
; 7070 :     if (argc > 1)

  00617	83 bc 24 f0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0061f	0f 8e 87 00 00
	00		 jle	 $LN32@sf_cmd

; 7071 :     {
; 7072 :         // "Invalid argument %s%s"
; 7073 :         WRMSG( HHC02205, "E", argv[1], "" );

  00625	b8 08 00 00 00	 mov	 eax, 8
  0062a	48 6b c0 01	 imul	 rax, rax, 1
  0062e	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv259[rsp], rax
  00636	b9 01 00 00 00	 mov	 ecx, 1
  0063b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00641	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209916
  00648	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0064d	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00655	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR tv259[rsp]
  0065d	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00661	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00666	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209917
  0066d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00672	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209918
  00679	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0067e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00683	41 b9 03 00 00
	00		 mov	 r9d, 3
  00689	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209919
  00690	ba a1 1b 00 00	 mov	 edx, 7073		; 00001ba1H
  00695	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209920
  0069c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7074 :         return -1;

  006a2	b8 ff ff ff ff	 mov	 eax, -1
  006a7	e9 69 03 00 00	 jmp	 $LN1@sf_cmd
$LN32@sf_cmd:

; 7075 :     }
; 7076 : 
; 7077 :     /* Set sf- flags in either cckdblk or the cckd extension */
; 7078 :     if (action == '-')

  006ac	0f be 44 24 50	 movsx	 eax, BYTE PTR action$[rsp]
  006b1	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  006b4	0f 85 40 01 00
	00		 jne	 $LN33@sf_cmd

; 7079 :     {
; 7080 :         if (dev)

  006ba	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  006c0	0f 84 a4 00 00
	00		 je	 $LN35@sf_cmd

; 7081 :         {
; 7082 :             CCKD_EXT*  cckd   = dev->cckd_ext;

  006c6	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  006cb	48 8b 80 08 13
	00 00		 mov	 rax, QWORD PTR [rax+4872]
  006d2	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR cckd$1[rsp], rax

; 7083 : 
; 7084 :             cckd->sfmerge = (flag == 1);

  006da	83 7c 24 68 01	 cmp	 DWORD PTR flag$[rsp], 1
  006df	75 0a		 jne	 SHORT $LN51@sf_cmd
  006e1	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR tv277[rsp], 1
  006e9	eb 08		 jmp	 SHORT $LN52@sf_cmd
$LN51@sf_cmd:
  006eb	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv277[rsp], 0
$LN52@sf_cmd:
  006f3	8b 44 24 7c	 mov	 eax, DWORD PTR tv277[rsp]
  006f7	83 e0 01	 and	 eax, 1
  006fa	c1 e0 09	 shl	 eax, 9
  006fd	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR cckd$1[rsp]
  00705	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00708	0f ba f1 09	 btr	 ecx, 9
  0070c	0b c8		 or	 ecx, eax
  0070e	8b c1		 mov	 eax, ecx
  00710	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR cckd$1[rsp]
  00718	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 7085 :             cckd->sfforce = (flag == 2);

  0071b	83 7c 24 68 02	 cmp	 DWORD PTR flag$[rsp], 2
  00720	75 0d		 jne	 SHORT $LN53@sf_cmd
  00722	c7 84 24 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv285[rsp], 1
  0072d	eb 0b		 jmp	 SHORT $LN54@sf_cmd
$LN53@sf_cmd:
  0072f	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv285[rsp], 0
$LN54@sf_cmd:
  0073a	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR tv285[rsp]
  00741	83 e0 01	 and	 eax, 1
  00744	c1 e0 0a	 shl	 eax, 10
  00747	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR cckd$1[rsp]
  0074f	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00752	0f ba f1 0a	 btr	 ecx, 10
  00756	0b c8		 or	 ecx, eax
  00758	8b c1		 mov	 eax, ecx
  0075a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR cckd$1[rsp]
  00762	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 7086 :         }

  00765	e9 8e 00 00 00	 jmp	 $LN36@sf_cmd
$LN35@sf_cmd:

; 7087 :         else
; 7088 :         {
; 7089 :             cckdblk.sfmerge = (flag == 1);

  0076a	83 7c 24 68 01	 cmp	 DWORD PTR flag$[rsp], 1
  0076f	75 0d		 jne	 SHORT $LN55@sf_cmd
  00771	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv325[rsp], 1
  0077c	eb 0b		 jmp	 SHORT $LN56@sf_cmd
$LN55@sf_cmd:
  0077e	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv325[rsp], 0
$LN56@sf_cmd:
  00789	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR tv325[rsp]
  00790	83 e0 01	 and	 eax, 1
  00793	c1 e0 03	 shl	 eax, 3
  00796	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_cckdblk
  0079d	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  007a0	83 e1 f7	 and	 ecx, -9			; fffffff7H
  007a3	0b c8		 or	 ecx, eax
  007a5	8b c1		 mov	 eax, ecx
  007a7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_cckdblk
  007ae	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 7090 :             cckdblk.sfforce = (flag == 2);

  007b1	83 7c 24 68 02	 cmp	 DWORD PTR flag$[rsp], 2
  007b6	75 0d		 jne	 SHORT $LN57@sf_cmd
  007b8	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv333[rsp], 1
  007c3	eb 0b		 jmp	 SHORT $LN58@sf_cmd
$LN57@sf_cmd:
  007c5	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv333[rsp], 0
$LN58@sf_cmd:
  007d0	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv333[rsp]
  007d7	83 e0 01	 and	 eax, 1
  007da	c1 e0 04	 shl	 eax, 4
  007dd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_cckdblk
  007e4	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  007e7	83 e1 ef	 and	 ecx, -17		; ffffffefH
  007ea	0b c8		 or	 ecx, eax
  007ec	8b c1		 mov	 eax, ecx
  007ee	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_cckdblk
  007f5	89 41 10	 mov	 DWORD PTR [rcx+16], eax
$LN36@sf_cmd:

; 7091 :         }
; 7092 :     }

  007f8	eb 45		 jmp	 SHORT $LN34@sf_cmd
$LN33@sf_cmd:

; 7093 :     /* Set sfk level in either cckdblk or the cckd extension */
; 7094 :     else if (action == 'k')

  007fa	0f be 44 24 50	 movsx	 eax, BYTE PTR action$[rsp]
  007ff	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  00802	75 3b		 jne	 SHORT $LN37@sf_cmd

; 7095 :     {
; 7096 :         if (dev)

  00804	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0080a	74 25		 je	 SHORT $LN38@sf_cmd

; 7097 :         {
; 7098 :             CCKD_EXT*  cckd   = dev->cckd_ext;

  0080c	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00811	48 8b 80 08 13
	00 00		 mov	 rax, QWORD PTR [rax+4872]
  00818	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR cckd$2[rsp], rax

; 7099 : 
; 7100 :             cckd->sflevel = level;

  00820	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR cckd$2[rsp]
  00828	8b 4c 24 6c	 mov	 ecx, DWORD PTR level$[rsp]
  0082c	89 48 0c	 mov	 DWORD PTR [rax+12], ecx

; 7101 :         }

  0082f	eb 0e		 jmp	 SHORT $LN39@sf_cmd
$LN38@sf_cmd:

; 7102 :         else
; 7103 :             cckdblk.sflevel = level;

  00831	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_cckdblk
  00838	8b 4c 24 6c	 mov	 ecx, DWORD PTR level$[rsp]
  0083c	89 48 14	 mov	 DWORD PTR [rax+20], ecx
$LN39@sf_cmd:
$LN37@sf_cmd:
$LN34@sf_cmd:

; 7104 :     }
; 7105 : 
; 7106 :     /* Process the command */
; 7107 :     switch (action)

  0083f	0f b6 44 24 50	 movzx	 eax, BYTE PTR action$[rsp]
  00844	88 44 24 70	 mov	 BYTE PTR tv346[rsp], al
  00848	80 7c 24 70 2b	 cmp	 BYTE PTR tv346[rsp], 43	; 0000002bH
  0084d	74 2d		 je	 SHORT $LN40@sf_cmd
  0084f	80 7c 24 70 2d	 cmp	 BYTE PTR tv346[rsp], 45	; 0000002dH
  00854	74 79		 je	 SHORT $LN42@sf_cmd
  00856	80 7c 24 70 63	 cmp	 BYTE PTR tv346[rsp], 99	; 00000063H
  0085b	0f 84 c1 00 00
	00		 je	 $LN44@sf_cmd
  00861	80 7c 24 70 64	 cmp	 BYTE PTR tv346[rsp], 100 ; 00000064H
  00866	0f 84 09 01 00
	00		 je	 $LN46@sf_cmd
  0086c	80 7c 24 70 6b	 cmp	 BYTE PTR tv346[rsp], 107 ; 0000006bH
  00871	0f 84 4e 01 00
	00		 je	 $LN48@sf_cmd
  00877	e9 97 01 00 00	 jmp	 $LN8@sf_cmd
$LN40@sf_cmd:

; 7108 :     {
; 7109 :         case '+': if (create_thread( &tid, DETACHED, cckd_sf_add,    dev, "sf+ command" )) cckd_sf_add   ( dev ); break;

  0087c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00883	48 05 88 10 00
	00		 add	 rax, 4232		; 00001088H
  00889	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209930
  00890	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00895	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209931
  0089c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  008a1	4c 8b 4c 24 58	 mov	 r9, QWORD PTR dev$[rsp]
  008a6	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_cckd_sf_add
  008ad	48 8b d0	 mov	 rdx, rax
  008b0	48 8d 4c 24 74	 lea	 rcx, QWORD PTR tid$[rsp]
  008b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  008bb	85 c0		 test	 eax, eax
  008bd	74 0b		 je	 SHORT $LN41@sf_cmd
  008bf	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  008c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cckd_sf_add
$LN41@sf_cmd:
  008ca	e9 44 01 00 00	 jmp	 $LN8@sf_cmd
$LN42@sf_cmd:

; 7110 :         case '-': if (create_thread( &tid, DETACHED, cckd_sf_remove, dev, "sf- command" )) cckd_sf_remove( dev ); break;

  008cf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  008d6	48 05 88 10 00
	00		 add	 rax, 4232		; 00001088H
  008dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209934
  008e3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209935
  008ef	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  008f4	4c 8b 4c 24 58	 mov	 r9, QWORD PTR dev$[rsp]
  008f9	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_cckd_sf_remove
  00900	48 8b d0	 mov	 rdx, rax
  00903	48 8d 4c 24 74	 lea	 rcx, QWORD PTR tid$[rsp]
  00908	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  0090e	85 c0		 test	 eax, eax
  00910	74 0b		 je	 SHORT $LN43@sf_cmd
  00912	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  00917	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cckd_sf_remove
$LN43@sf_cmd:
  0091d	e9 f1 00 00 00	 jmp	 $LN8@sf_cmd
$LN44@sf_cmd:

; 7111 :         case 'c': if (create_thread( &tid, DETACHED, cckd_sf_comp,   dev, "sfc command" )) cckd_sf_comp  ( dev ); break;

  00922	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00929	48 05 88 10 00
	00		 add	 rax, 4232		; 00001088H
  0092f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209938
  00936	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0093b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209939
  00942	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00947	4c 8b 4c 24 58	 mov	 r9, QWORD PTR dev$[rsp]
  0094c	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_cckd_sf_comp
  00953	48 8b d0	 mov	 rdx, rax
  00956	48 8d 4c 24 74	 lea	 rcx, QWORD PTR tid$[rsp]
  0095b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  00961	85 c0		 test	 eax, eax
  00963	74 0b		 je	 SHORT $LN45@sf_cmd
  00965	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  0096a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cckd_sf_comp
$LN45@sf_cmd:
  00970	e9 9e 00 00 00	 jmp	 $LN8@sf_cmd
$LN46@sf_cmd:

; 7112 :         case 'd': if (create_thread( &tid, DETACHED, cckd_sf_stats,  dev, "sfd command" )) cckd_sf_stats ( dev ); break;

  00975	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0097c	48 05 88 10 00
	00		 add	 rax, 4232		; 00001088H
  00982	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209942
  00989	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0098e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209943
  00995	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0099a	4c 8b 4c 24 58	 mov	 r9, QWORD PTR dev$[rsp]
  0099f	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_cckd_sf_stats
  009a6	48 8b d0	 mov	 rdx, rax
  009a9	48 8d 4c 24 74	 lea	 rcx, QWORD PTR tid$[rsp]
  009ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  009b4	85 c0		 test	 eax, eax
  009b6	74 0b		 je	 SHORT $LN47@sf_cmd
  009b8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  009bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cckd_sf_stats
$LN47@sf_cmd:
  009c3	eb 4e		 jmp	 SHORT $LN8@sf_cmd
$LN48@sf_cmd:

; 7113 :         case 'k': if (create_thread( &tid, DETACHED, cckd_sf_chk,    dev, "sfk command" )) cckd_sf_chk   ( dev ); break;

  009c5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  009cc	48 05 88 10 00
	00		 add	 rax, 4232		; 00001088H
  009d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209946
  009d9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  009de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209947
  009e5	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  009ea	4c 8b 4c 24 58	 mov	 r9, QWORD PTR dev$[rsp]
  009ef	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_cckd_sf_chk
  009f6	48 8b d0	 mov	 rdx, rax
  009f9	48 8d 4c 24 74	 lea	 rcx, QWORD PTR tid$[rsp]
  009fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  00a04	85 c0		 test	 eax, eax
  00a06	74 0b		 je	 SHORT $LN49@sf_cmd
  00a08	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  00a0d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cckd_sf_chk
$LN49@sf_cmd:
$LN8@sf_cmd:

; 7114 :     }
; 7115 : 
; 7116 :     return 0;

  00a13	33 c0		 xor	 eax, eax
$LN1@sf_cmd:

; 7117 : }

  00a15	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  00a1c	c3		 ret	 0
sf_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
devtmax$ = 96
rc$1 = 100
tid$ = 104
tv66 = 112
tv87 = 120
tv150 = 128
argc$ = 160
argv$ = 168
cmdline$ = 176
devtmax_cmd PROC

; 6904 : {

$LN15:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 6905 :     int devtmax = -2;

  00015	c7 44 24 60 fe
	ff ff ff	 mov	 DWORD PTR devtmax$[rsp], -2
$LN4@devtmax_cm:

; 6906 : 
; 6907 :     TID tid;
; 6908 : 
; 6909 :     UNREFERENCED(cmdline);

  0001d	33 c0		 xor	 eax, eax
  0001f	85 c0		 test	 eax, eax
  00021	75 fa		 jne	 SHORT $LN4@devtmax_cm

; 6910 :     if ( argc > 2 )

  00023	83 bc 24 a0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0002b	7e 7a		 jle	 SHORT $LN5@devtmax_cm

; 6911 :     {
; 6912 :         WRMSG( HHC02299, "E", argv[0] );

  0002d	b8 08 00 00 00	 mov	 eax, 8
  00032	48 6b c0 00	 imul	 rax, rax, 0
  00036	48 89 44 24 70	 mov	 QWORD PTR tv66[rsp], rax
  0003b	b9 01 00 00 00	 mov	 ecx, 1
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00046	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0004e	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv66[rsp]
  00053	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00057	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209804
  00063	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209805
  0006f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00074	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00079	41 b9 03 00 00
	00		 mov	 r9d, 3
  0007f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209806
  00086	ba 00 1b 00 00	 mov	 edx, 6912		; 00001b00H
  0008b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209807
  00092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6913 :         return -1;

  00098	b8 ff ff ff ff	 mov	 eax, -1
  0009d	e9 d5 02 00 00	 jmp	 $LN1@devtmax_cm

; 6914 :     }

  000a2	e9 ce 02 00 00	 jmp	 $LN6@devtmax_cm
$LN5@devtmax_cm:

; 6915 :     else if ( argc == 2 )

  000a7	83 bc 24 a0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000af	0f 85 24 02 00
	00		 jne	 $LN7@devtmax_cm

; 6916 :     {
; 6917 :         sscanf(argv[1], "%d", &devtmax);

  000b5	b8 08 00 00 00	 mov	 eax, 8
  000ba	48 6b c0 01	 imul	 rax, rax, 1
  000be	4c 8d 44 24 60	 lea	 r8, QWORD PTR devtmax$[rsp]
  000c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209810
  000ca	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000d2	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000d6	e8 00 00 00 00	 call	 sscanf

; 6918 : 
; 6919 :         if (devtmax >= -1)

  000db	83 7c 24 60 ff	 cmp	 DWORD PTR devtmax$[rsp], -1
  000e0	7c 16		 jl	 SHORT $LN9@devtmax_cm

; 6920 :             sysblk.devtmax = devtmax;

  000e2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000e9	8b 4c 24 60	 mov	 ecx, DWORD PTR devtmax$[rsp]
  000ed	89 88 50 12 00
	00		 mov	 DWORD PTR [rax+4688], ecx
  000f3	e9 81 00 00 00	 jmp	 $LN10@devtmax_cm
$LN9@devtmax_cm:

; 6921 :         else
; 6922 :         {
; 6923 :             WRMSG(HHC02205, "E", argv[1], ": must be -1 to n");

  000f8	b8 08 00 00 00	 mov	 eax, 8
  000fd	48 6b c0 01	 imul	 rax, rax, 1
  00101	48 89 44 24 78	 mov	 QWORD PTR tv87[rsp], rax
  00106	b9 01 00 00 00	 mov	 ecx, 1
  0010b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00111	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209813
  00118	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0011d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00125	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv87[rsp]
  0012a	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0012e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00133	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209814
  0013a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0013f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209815
  00146	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0014b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00150	41 b9 03 00 00
	00		 mov	 r9d, 3
  00156	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209816
  0015d	ba 0b 1b 00 00	 mov	 edx, 6923		; 00001b0bH
  00162	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209817
  00169	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6924 :             return -1;

  0016f	b8 ff ff ff ff	 mov	 eax, -1
  00174	e9 fe 01 00 00	 jmp	 $LN1@devtmax_cm
$LN10@devtmax_cm:

; 6925 :         }
; 6926 : 
; 6927 :         /* Create a new device thread if the I/O queue is not NULL
; 6928 :            and more threads can be created */
; 6929 : 
; 6930 :         /* the IOQ lock is obtained in order to write to sysblk.devtwait */
; 6931 :         obtain_lock(&sysblk.ioqlock);

  00179	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00180	48 05 38 12 00
	00		 add	 rax, 4664		; 00001238H
  00186	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209818
  0018d	48 8b c8	 mov	 rcx, rax
  00190	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 6932 :         if (sysblk.ioq && (!sysblk.devtmax || sysblk.devtnbr < sysblk.devtmax))

  00196	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0019d	48 83 b8 30 12
	00 00 00	 cmp	 QWORD PTR [rax+4656], 0
  001a5	0f 84 de 00 00
	00		 je	 $LN11@devtmax_cm
  001ab	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001b2	83 b8 50 12 00
	00 00		 cmp	 DWORD PTR [rax+4688], 0
  001b9	74 20		 je	 SHORT $LN12@devtmax_cm
  001bb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001c2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001c9	8b 89 50 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4688]
  001cf	39 88 4c 12 00
	00		 cmp	 DWORD PTR [rax+4684], ecx
  001d5	0f 8d ae 00 00
	00		 jge	 $LN11@devtmax_cm
$LN12@devtmax_cm:

; 6933 :         {
; 6934 :             int rc;
; 6935 : 
; 6936 :             rc = create_thread(&tid, DETACHED, device_thread, NULL, "idle device thread");

  001db	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001e2	48 05 88 10 00
	00		 add	 rax, 4232		; 00001088H
  001e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209821
  001ef	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209822
  001fb	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00200	45 33 c9	 xor	 r9d, r9d
  00203	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:device_thread
  0020a	48 8b d0	 mov	 rdx, rax
  0020d	48 8d 4c 24 68	 lea	 rcx, QWORD PTR tid$[rsp]
  00212	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  00218	89 44 24 64	 mov	 DWORD PTR rc$1[rsp], eax

; 6937 :             if (rc)

  0021c	83 7c 24 64 00	 cmp	 DWORD PTR rc$1[rsp], 0
  00221	74 66		 je	 SHORT $LN13@devtmax_cm

; 6938 :                 WRMSG(HHC00102, "E", strerror(rc));

  00223	8b 4c 24 64	 mov	 ecx, DWORD PTR rc$1[rsp]
  00227	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0022d	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv150[rsp], rax
  00235	b9 01 00 00 00	 mov	 ecx, 1
  0023a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00240	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv150[rsp]
  00248	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0024d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209824
  00254	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00259	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209825
  00260	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00265	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0026a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00270	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209826
  00277	ba 1a 1b 00 00	 mov	 edx, 6938		; 00001b1aH
  0027c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209827
  00283	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN13@devtmax_cm:
$LN11@devtmax_cm:

; 6939 :         }
; 6940 : 
; 6941 :         /* Wakeup threads in case they need to terminate */
; 6942 :         sysblk.devtwait=0;

  00289	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00290	c7 80 48 12 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4680], 0

; 6943 :         broadcast_condition (&sysblk.ioqcond);

  0029a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002a1	48 05 40 12 00
	00		 add	 rax, 4672		; 00001240H
  002a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209828
  002ae	48 8b c8	 mov	 rcx, rax
  002b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_broadcast_condition

; 6944 :         release_lock(&sysblk.ioqlock);

  002b7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002be	48 05 38 12 00
	00		 add	 rax, 4664		; 00001238H
  002c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209829
  002cb	48 8b c8	 mov	 rcx, rax
  002ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 6945 :     }

  002d4	e9 9c 00 00 00	 jmp	 $LN8@devtmax_cm
$LN7@devtmax_cm:

; 6946 :     else
; 6947 :         WRMSG(HHC02242, "I",

  002d9	b9 01 00 00 00	 mov	 ecx, 1
  002de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002e4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  002eb	8b 89 58 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4696]
  002f1	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  002f5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  002fc	8b 89 48 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4680]
  00302	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00306	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0030d	8b 89 54 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4692]
  00313	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00317	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0031e	8b 89 4c 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4684]
  00324	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00328	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0032f	8b 89 50 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4688]
  00335	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00339	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209830
  00340	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00345	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209831
  0034c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00351	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00356	41 b9 03 00 00
	00		 mov	 r9d, 3
  0035c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209832
  00363	ba 25 1b 00 00	 mov	 edx, 6949		; 00001b25H
  00368	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209833
  0036f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN8@devtmax_cm:
$LN6@devtmax_cm:

; 6948 :             sysblk.devtmax, sysblk.devtnbr, sysblk.devthwm,
; 6949 :             sysblk.devtwait, sysblk.devtunavail );
; 6950 : 
; 6951 :     return 0;

  00375	33 c0		 xor	 eax, eax
$LN1@devtmax_cm:

; 6952 : }

  00377	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0037e	c3		 ret	 0
devtmax_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
devnum$ = 64
lcss$ = 68
rc$ = 72
dev$ = 80
tv67 = 88
buf$ = 96
__$ArrayPad$ = 4192
argc$ = 4224
argv$ = 4232
cmdline$ = 4240
ds_cmd	PROC

; 6859 : {

$LN11:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	b8 78 10 00 00	 mov	 eax, 4216		; 00001078H
  00013	e8 00 00 00 00	 call	 __chkstk
  00018	48 2b e0	 sub	 rsp, rax
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 60
	10 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@ds_cmd:

; 6860 : DEVBLK*  dev;
; 6861 : U16      devnum;
; 6862 : U16      lcss;
; 6863 : int rc;
; 6864 : char buf[4096];
; 6865 : 
; 6866 :     UNREFERENCED(cmdline);

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@ds_cmd

; 6867 : 
; 6868 :     if (argc < 2)

  00033	83 bc 24 80 10
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0003b	7d 11		 jge	 SHORT $LN5@ds_cmd

; 6869 :     {
; 6870 :         missing_devnum();

  0003d	e8 00 00 00 00	 call	 missing_devnum

; 6871 :         return -1;

  00042	b8 ff ff ff ff	 mov	 eax, -1
  00047	e9 4f 01 00 00	 jmp	 $LN1@ds_cmd

; 6872 :     }

  0004c	eb 7f		 jmp	 SHORT $LN6@ds_cmd
$LN5@ds_cmd:

; 6873 :     else if ( argc > 2 )

  0004e	83 bc 24 80 10
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00056	7e 75		 jle	 SHORT $LN7@ds_cmd

; 6874 :     {
; 6875 :         WRMSG( HHC02299, "E", argv[0] );

  00058	b8 08 00 00 00	 mov	 eax, 8
  0005d	48 6b c0 00	 imul	 rax, rax, 0
  00061	48 89 44 24 58	 mov	 QWORD PTR tv67[rsp], rax
  00066	b9 01 00 00 00	 mov	 ecx, 1
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00071	48 8b 8c 24 88
	10 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00079	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv67[rsp]
  0007e	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00082	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209774
  0008e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209775
  0009a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0009f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a4	41 b9 03 00 00
	00		 mov	 r9d, 3
  000aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209776
  000b1	ba db 1a 00 00	 mov	 edx, 6875		; 00001adbH
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209777
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6876 :         return -1;

  000c3	b8 ff ff ff ff	 mov	 eax, -1
  000c8	e9 ce 00 00 00	 jmp	 $LN1@ds_cmd
$LN7@ds_cmd:
$LN6@ds_cmd:

; 6877 :     }
; 6878 : 
; 6879 :     rc=parse_single_devnum(argv[1],&lcss,&devnum);

  000cd	b8 08 00 00 00	 mov	 eax, 8
  000d2	48 6b c0 01	 imul	 rax, rax, 1
  000d6	4c 8d 44 24 40	 lea	 r8, QWORD PTR devnum$[rsp]
  000db	48 8d 54 24 44	 lea	 rdx, QWORD PTR lcss$[rsp]
  000e0	48 8b 8c 24 88
	10 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000e8	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000ec	e8 00 00 00 00	 call	 parse_single_devnum
  000f1	89 44 24 48	 mov	 DWORD PTR rc$[rsp], eax

; 6880 : 
; 6881 :     if (rc<0)

  000f5	83 7c 24 48 00	 cmp	 DWORD PTR rc$[rsp], 0
  000fa	7d 0a		 jge	 SHORT $LN8@ds_cmd

; 6882 :     {
; 6883 :         return -1;

  000fc	b8 ff ff ff ff	 mov	 eax, -1
  00101	e9 95 00 00 00	 jmp	 $LN1@ds_cmd
$LN8@ds_cmd:

; 6884 :     }
; 6885 : 
; 6886 :     if (!(dev = find_device_by_devnum (lcss,devnum)))

  00106	0f b7 54 24 40	 movzx	 edx, WORD PTR devnum$[rsp]
  0010b	0f b7 4c 24 44	 movzx	 ecx, WORD PTR lcss$[rsp]
  00110	e8 00 00 00 00	 call	 find_device_by_devnum
  00115	48 89 44 24 50	 mov	 QWORD PTR dev$[rsp], rax
  0011a	48 83 7c 24 50
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00120	75 16		 jne	 SHORT $LN9@ds_cmd

; 6887 :     {
; 6888 :         // HHC02200 "%1d:%04X device not found"
; 6889 :         devnotfound_msg(lcss,devnum);

  00122	0f b7 54 24 40	 movzx	 edx, WORD PTR devnum$[rsp]
  00127	0f b7 4c 24 44	 movzx	 ecx, WORD PTR lcss$[rsp]
  0012c	e8 00 00 00 00	 call	 devnotfound_msg

; 6890 :         return -1;

  00131	b8 ff ff ff ff	 mov	 eax, -1
  00136	eb 63		 jmp	 SHORT $LN1@ds_cmd
$LN9@ds_cmd:

; 6891 :     }
; 6892 : 
; 6893 :     display_subchannel (dev, buf, sizeof(buf), "HHC02268I ");

  00138	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG209780
  0013f	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  00145	48 8d 54 24 60	 lea	 rdx, QWORD PTR buf$[rsp]
  0014a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  0014f	e8 00 00 00 00	 call	 display_subchannel

; 6894 :     LOGMSG( "%s", buf );

  00154	b9 01 00 00 00	 mov	 ecx, 1
  00159	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0015f	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00164	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00169	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209781
  00170	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00175	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0017a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00180	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209782
  00187	ba ee 1a 00 00	 mov	 edx, 6894		; 00001aeeH
  0018c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209783
  00193	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6895 : 
; 6896 :     return 0;

  00199	33 c0		 xor	 eax, eax
$LN1@ds_cmd:

; 6897 : }

  0019b	48 8b 8c 24 60
	10 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001a3	48 33 cc	 xor	 rcx, rsp
  001a6	e8 00 00 00 00	 call	 __security_check_cookie
  001ab	48 81 c4 78 10
	00 00		 add	 rsp, 4216		; 00001078H
  001b2	c3		 ret	 0
ds_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv66 = 64
argc$ = 96
argv$ = 104
cmdline$ = 112
k_cmd	PROC

; 6840 : {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@k_cmd:

; 6841 :     UNREFERENCED( cmdline );

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@k_cmd

; 6842 : 
; 6843 :     if (argc > 1)

  00018	83 7c 24 60 01	 cmp	 DWORD PTR argc$[rsp], 1
  0001d	7e 6f		 jle	 SHORT $LN5@k_cmd

; 6844 :     {
; 6845 :         // "Invalid command usage. Type 'help %s' for assistance."
; 6846 :         WRMSG( HHC02299, "E", argv[0] );

  0001f	b8 08 00 00 00	 mov	 eax, 8
  00024	48 6b c0 00	 imul	 rax, rax, 0
  00028	48 89 44 24 40	 mov	 QWORD PTR tv66[rsp], rax
  0002d	b9 01 00 00 00	 mov	 ecx, 1
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00038	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  0003d	48 8b 54 24 40	 mov	 rdx, QWORD PTR tv66[rsp]
  00042	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00046	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209751
  00052	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209752
  0005e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00063	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00068	41 b9 03 00 00
	00		 mov	 r9d, 3
  0006e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209753
  00075	ba be 1a 00 00	 mov	 edx, 6846		; 00001abeH
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209754
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6847 :         return -1;

  00087	b8 ff ff ff ff	 mov	 eax, -1
  0008c	eb 08		 jmp	 SHORT $LN1@k_cmd
$LN5@k_cmd:

; 6848 :     }
; 6849 : 
; 6850 :     cckd_print_itrace();

  0008e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cckd_print_itrace

; 6851 : 
; 6852 :     return 0;

  00094	33 c0		 xor	 eax, eax
$LN1@k_cmd:

; 6853 : }

  00096	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0009a	c3		 ret	 0
k_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
b_on$ = 80
b_off$ = 81
nolrasoe$ = 82
ostailor$ = 88
ost$ = 96
test_pgminttr$1 = 104
mask$ = 112
tv253 = 120
tv255 = 128
tv77 = 136
vse$2 = 144
tv273 = 152
tv394 = 160
msgbuf2$3 = 176
msgbuf$4 = 240
__$ArrayPad$ = 304
argc$ = 336
argv$ = 344
cmdline$ = 352
ostailor_cmd PROC

; 6666 : {

$LN81:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 81 ec 40 01
	00 00		 sub	 rsp, 320		; 00000140H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 6667 :     char*  ostailor  = NULL;        /* (work variable)              */

  00028	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR ostailor$[rsp], 0

; 6668 :     U64    mask      = 0;           /* OS_xxx... pgminttr bits      */

  00031	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR mask$[rsp], 0

; 6669 :     U32    ost       = 0;           /* OSTAILOR_xxx... setting flag */

  0003a	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR ost$[rsp], 0

; 6670 :     bool   b_on      = false;       /* "+ostailor" specified        */

  00042	c6 44 24 50 00	 mov	 BYTE PTR b_on$[rsp], 0

; 6671 :     bool   b_off     = false;       /* "-ostailor" specified        */

  00047	c6 44 24 51 00	 mov	 BYTE PTR b_off$[rsp], 0

; 6672 :     bool   nolrasoe  = false;       /* true == No trace LRA Special */

  0004c	c6 44 24 52 00	 mov	 BYTE PTR nolrasoe$[rsp], 0
$LN4@ostailor_c:

; 6673 :                                     /*         Operation Exceptions */
; 6674 :     UNREFERENCED( cmdline );

  00051	33 c0		 xor	 eax, eax
  00053	85 c0		 test	 eax, eax
  00055	75 fa		 jne	 SHORT $LN4@ostailor_c
$LN7@ostailor_c:

; 6675 :     UPPER_ARGV_0( argv );

  00057	48 83 bc 24 58
	01 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00060	74 47		 je	 SHORT $LN8@ostailor_c
  00062	b8 08 00 00 00	 mov	 eax, 8
  00067	48 6b c0 00	 imul	 rax, rax, 0
  0006b	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00073	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00078	74 2f		 je	 SHORT $LN8@ostailor_c
  0007a	b8 08 00 00 00	 mov	 eax, 8
  0007f	48 6b c0 00	 imul	 rax, rax, 0
  00083	b9 08 00 00 00	 mov	 ecx, 8
  00088	48 6b c9 00	 imul	 rcx, rcx, 0
  0008c	48 8b 94 24 58
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00094	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00098	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000a0	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  000a4	e8 00 00 00 00	 call	 strupper
$LN8@ostailor_c:
  000a9	33 c0		 xor	 eax, eax
  000ab	85 c0		 test	 eax, eax
  000ad	75 a8		 jne	 SHORT $LN7@ostailor_c

; 6676 : 
; 6677 :     /* Error if more than one argument */
; 6678 :     if (argc > 2)

  000af	83 bc 24 50 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000b7	7e 7b		 jle	 SHORT $LN9@ostailor_c

; 6679 :     {
; 6680 :         // "Invalid command usage. Type 'help %s' for assistance."
; 6681 :         WRMSG( HHC02299, "E", argv[0] );

  000b9	b8 08 00 00 00	 mov	 eax, 8
  000be	48 6b c0 00	 imul	 rax, rax, 0
  000c2	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv77[rsp], rax
  000ca	b9 01 00 00 00	 mov	 ecx, 1
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000d5	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000dd	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv77[rsp]
  000e5	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000e9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209625
  000f5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209626
  00101	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00106	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0010b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00111	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209627
  00118	ba 19 1a 00 00	 mov	 edx, 6681		; 00001a19H
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209628
  00124	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6682 :         return -1;

  0012a	b8 ff ff ff ff	 mov	 eax, -1
  0012f	e9 85 0b 00 00	 jmp	 $LN1@ostailor_c
$LN9@ostailor_c:

; 6683 :     }
; 6684 : 
; 6685 :     /* If no arguments, display the current setting */
; 6686 :     if (argc < 2)

  00134	83 bc 24 50 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0013c	0f 8d a0 06 00
	00		 jge	 $LN10@ostailor_c

; 6687 :     {
; 6688 :         char   msgbuf [64] = {0};

  00142	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR msgbuf$4[rsp]
  0014a	48 8b f8	 mov	 rdi, rax
  0014d	33 c0		 xor	 eax, eax
  0014f	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00154	f3 aa		 rep stosb

; 6689 :         char   msgbuf2[64] = {0};

  00156	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR msgbuf2$3[rsp]
  0015e	48 8b f8	 mov	 rdi, rax
  00161	33 c0		 xor	 eax, eax
  00163	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00168	f3 aa		 rep stosb

; 6690 : 
; 6691 :         if (sysblk.pgminttr == OS_VM          ) ostailor = "VM";

  0016a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00171	48 b9 fc 7f de
	f7 ff ff ff 7f	 mov	 rcx, 9223372036718362620 ; 7ffffffff7de7ffcH
  0017b	48 39 88 48 13
	00 00		 cmp	 QWORD PTR [rax+4936], rcx
  00182	75 0c		 jne	 SHORT $LN11@ostailor_c
  00184	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209631
  0018b	48 89 44 24 58	 mov	 QWORD PTR ostailor$[rsp], rax
$LN11@ostailor_c:

; 6692 : 
; 6693 :         if (sysblk.pgminttr == OS_DEFAULT     ) ostailor = "DEFAULT";

  00190	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00197	48 b9 ff 7f de
	f7 ff ff ff 7f	 mov	 rcx, 9223372036718362623 ; 7ffffffff7de7fffH
  001a1	48 39 88 48 13
	00 00		 cmp	 QWORD PTR [rax+4936], rcx
  001a8	75 0c		 jne	 SHORT $LN12@ostailor_c
  001aa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209633
  001b1	48 89 44 24 58	 mov	 QWORD PTR ostailor$[rsp], rax
$LN12@ostailor_c:

; 6694 :         if (sysblk.pgminttr == OS_QUIET       ) ostailor = "QUIET";

  001b6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001bd	48 83 b8 48 13
	00 00 00	 cmp	 QWORD PTR [rax+4936], 0
  001c5	75 0c		 jne	 SHORT $LN13@ostailor_c
  001c7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209635
  001ce	48 89 44 24 58	 mov	 QWORD PTR ostailor$[rsp], rax
$LN13@ostailor_c:

; 6695 :         if (sysblk.pgminttr == OS_NULL        ) ostailor = "NULL";

  001d3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001da	48 83 b8 48 13
	00 00 ff	 cmp	 QWORD PTR [rax+4936], -1
  001e2	75 0c		 jne	 SHORT $LN14@ostailor_c
  001e4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209637
  001eb	48 89 44 24 58	 mov	 QWORD PTR ostailor$[rsp], rax
$LN14@ostailor_c:

; 6696 : 
; 6697 :         if (sysblk.pgminttr == OS_OS390       ) ostailor = "OS/390";

  001f0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001f7	48 b9 fd 7f de
	f7 ff 73 f6 7f	 mov	 rcx, 9220684830300078077 ; 7ff673fff7de7ffdH
  00201	48 39 88 48 13
	00 00		 cmp	 QWORD PTR [rax+4936], rcx
  00208	75 0c		 jne	 SHORT $LN15@ostailor_c
  0020a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209639
  00211	48 89 44 24 58	 mov	 QWORD PTR ostailor$[rsp], rax
$LN15@ostailor_c:

; 6698 :         if (sysblk.pgminttr == OS_ZOS         ) ostailor = "z/OS";

  00216	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0021d	48 b9 b7 7f de
	f7 ff 73 76 7b	 mov	 rcx, 8896425657129402295 ; 7b7673fff7de7fb7H
  00227	48 39 88 48 13
	00 00		 cmp	 QWORD PTR [rax+4936], rcx
  0022e	75 0c		 jne	 SHORT $LN16@ostailor_c
  00230	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209641
  00237	48 89 44 24 58	 mov	 QWORD PTR ostailor$[rsp], rax
$LN16@ostailor_c:

; 6699 :         if (sysblk.pgminttr == OS_LINUX       ) ostailor = "LINUX";

  0023c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00243	48 b9 f7 7f de
	f7 ff ff ff 78	 mov	 rcx, 8718968878452867063 ; 78fffffff7de7ff7H
  0024d	48 39 88 48 13
	00 00		 cmp	 QWORD PTR [rax+4936], rcx
  00254	75 0c		 jne	 SHORT $LN17@ostailor_c
  00256	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209643
  0025d	48 89 44 24 58	 mov	 QWORD PTR ostailor$[rsp], rax
$LN17@ostailor_c:

; 6700 :         if (sysblk.pgminttr == OS_OPENSOLARIS ) ostailor = "OpenSolaris";

  00262	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00269	48 b9 f7 7f de
	ff ff ff ff f8	 mov	 rcx, -504403158267691017 ; f8ffffffffde7ff7H
  00273	48 39 88 48 13
	00 00		 cmp	 QWORD PTR [rax+4936], rcx
  0027a	75 0c		 jne	 SHORT $LN18@ostailor_c
  0027c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209645
  00283	48 89 44 24 58	 mov	 QWORD PTR ostailor$[rsp], rax
$LN18@ostailor_c:

; 6701 : 
; 6702 :         if (sysblk.pgminttr == OS_VSE
; 6703 :                           && !sysblk.nolrasoe ) ostailor = "VSE";

  00288	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0028f	48 b9 ff 7f de
	f7 ff 73 f6 7f	 mov	 rcx, 9220684830300078079 ; 7ff673fff7de7fffH
  00299	48 39 88 48 13
	00 00		 cmp	 QWORD PTR [rax+4936], rcx
  002a0	75 23		 jne	 SHORT $LN19@ostailor_c
  002a2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002a9	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  002af	c1 e8 18	 shr	 eax, 24
  002b2	83 e0 01	 and	 eax, 1
  002b5	85 c0		 test	 eax, eax
  002b7	75 0c		 jne	 SHORT $LN19@ostailor_c
  002b9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209647
  002c0	48 89 44 24 58	 mov	 QWORD PTR ostailor$[rsp], rax
$LN19@ostailor_c:

; 6704 :         if (sysblk.pgminttr == OS_VSE
; 6705 :                           &&  sysblk.nolrasoe ) ostailor = "z/VSE";

  002c5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002cc	48 b9 ff 7f de
	f7 ff 73 f6 7f	 mov	 rcx, 9220684830300078079 ; 7ff673fff7de7fffH
  002d6	48 39 88 48 13
	00 00		 cmp	 QWORD PTR [rax+4936], rcx
  002dd	75 23		 jne	 SHORT $LN20@ostailor_c
  002df	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002e6	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  002ec	c1 e8 18	 shr	 eax, 24
  002ef	83 e0 01	 and	 eax, 1
  002f2	85 c0		 test	 eax, eax
  002f4	74 0c		 je	 SHORT $LN20@ostailor_c
  002f6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209649
  002fd	48 89 44 24 58	 mov	 QWORD PTR ostailor$[rsp], rax
$LN20@ostailor_c:

; 6706 : 
; 6707 :         /* If no exact OSTAILOR match, check if maybe sysblk.ostailor
; 6708 :            identifies a verifiable previous "+OSTAILOR" setting. */
; 6709 :         if (!ostailor)

  00302	48 83 7c 24 58
	00		 cmp	 QWORD PTR ostailor$[rsp], 0
  00308	0f 85 fe 03 00
	00		 jne	 $LN21@ostailor_c

; 6710 :         {
; 6711 :             /* Is existing OSTAILOR value still valid? */
; 6712 :             if (sysblk.ostailor)

  0030e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00315	83 b8 50 13 00
	00 00		 cmp	 DWORD PTR [rax+4944], 0
  0031c	0f 84 ea 03 00
	00		 je	 $LN22@ostailor_c

; 6713 :             {
; 6714 :                 /* Yes, verify that it's still accurate */
; 6715 : 
; 6716 :                 U64 test_pgminttr = OS_NULL; // (0xFFFFFFFFFFFFFFFFULL)

  00322	48 c7 44 24 68
	ff ff ff ff	 mov	 QWORD PTR test_pgminttr$1[rsp], -1

; 6717 : 
; 6718 :                 if (sysblk.ostailor & OSTAILOR_VM         ) test_pgminttr &= OS_VM;

  0032b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00332	8b 80 50 13 00
	00		 mov	 eax, DWORD PTR [rax+4944]
  00338	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0033d	85 c0		 test	 eax, eax
  0033f	74 1a		 je	 SHORT $LN23@ostailor_c
  00341	48 b8 fc 7f de
	f7 ff ff ff 7f	 mov	 rax, 9223372036718362620 ; 7ffffffff7de7ffcH
  0034b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR test_pgminttr$1[rsp]
  00350	48 23 c8	 and	 rcx, rax
  00353	48 8b c1	 mov	 rax, rcx
  00356	48 89 44 24 68	 mov	 QWORD PTR test_pgminttr$1[rsp], rax
$LN23@ostailor_c:

; 6719 : 
; 6720 :                 if (sysblk.ostailor & OSTAILOR_DEFAULT    ) test_pgminttr &= OS_DEFAULT;

  0035b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00362	8b 80 50 13 00
	00		 mov	 eax, DWORD PTR [rax+4944]
  00368	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  0036d	85 c0		 test	 eax, eax
  0036f	74 1a		 je	 SHORT $LN24@ostailor_c
  00371	48 b8 ff 7f de
	f7 ff ff ff 7f	 mov	 rax, 9223372036718362623 ; 7ffffffff7de7fffH
  0037b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR test_pgminttr$1[rsp]
  00380	48 23 c8	 and	 rcx, rax
  00383	48 8b c1	 mov	 rax, rcx
  00386	48 89 44 24 68	 mov	 QWORD PTR test_pgminttr$1[rsp], rax
$LN24@ostailor_c:

; 6721 :                 if (sysblk.ostailor & OSTAILOR_QUIET      ) test_pgminttr &= OS_QUIET;

  0038b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00392	8b 80 50 13 00
	00		 mov	 eax, DWORD PTR [rax+4944]
  00398	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0039d	85 c0		 test	 eax, eax
  0039f	74 0e		 je	 SHORT $LN25@ostailor_c
  003a1	48 8b 44 24 68	 mov	 rax, QWORD PTR test_pgminttr$1[rsp]
  003a6	48 83 e0 00	 and	 rax, 0
  003aa	48 89 44 24 68	 mov	 QWORD PTR test_pgminttr$1[rsp], rax
$LN25@ostailor_c:

; 6722 :                 if (sysblk.ostailor & OSTAILOR_NULL       ) test_pgminttr &= OS_NULL;

  003af	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  003b6	8b 80 50 13 00
	00		 mov	 eax, DWORD PTR [rax+4944]
  003bc	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  003c1	85 c0		 test	 eax, eax
  003c3	74 0a		 je	 SHORT $LN26@ostailor_c
  003c5	48 8b 44 24 68	 mov	 rax, QWORD PTR test_pgminttr$1[rsp]
  003ca	48 89 44 24 68	 mov	 QWORD PTR test_pgminttr$1[rsp], rax
$LN26@ostailor_c:

; 6723 : 
; 6724 :                 if (sysblk.ostailor & OSTAILOR_OS390      ) test_pgminttr &= OS_OS390;

  003cf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  003d6	8b 80 50 13 00
	00		 mov	 eax, DWORD PTR [rax+4944]
  003dc	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003e1	85 c0		 test	 eax, eax
  003e3	74 1a		 je	 SHORT $LN27@ostailor_c
  003e5	48 b8 fd 7f de
	f7 ff 73 f6 7f	 mov	 rax, 9220684830300078077 ; 7ff673fff7de7ffdH
  003ef	48 8b 4c 24 68	 mov	 rcx, QWORD PTR test_pgminttr$1[rsp]
  003f4	48 23 c8	 and	 rcx, rax
  003f7	48 8b c1	 mov	 rax, rcx
  003fa	48 89 44 24 68	 mov	 QWORD PTR test_pgminttr$1[rsp], rax
$LN27@ostailor_c:

; 6725 :                 if (sysblk.ostailor & OSTAILOR_ZOS        ) test_pgminttr &= OS_ZOS;

  003ff	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00406	8b 80 50 13 00
	00		 mov	 eax, DWORD PTR [rax+4944]
  0040c	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00411	85 c0		 test	 eax, eax
  00413	74 1a		 je	 SHORT $LN28@ostailor_c
  00415	48 b8 b7 7f de
	f7 ff 73 76 7b	 mov	 rax, 8896425657129402295 ; 7b7673fff7de7fb7H
  0041f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR test_pgminttr$1[rsp]
  00424	48 23 c8	 and	 rcx, rax
  00427	48 8b c1	 mov	 rax, rcx
  0042a	48 89 44 24 68	 mov	 QWORD PTR test_pgminttr$1[rsp], rax
$LN28@ostailor_c:

; 6726 :                 if (sysblk.ostailor & OSTAILOR_LINUX      ) test_pgminttr &= OS_LINUX;

  0042f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00436	8b 80 50 13 00
	00		 mov	 eax, DWORD PTR [rax+4944]
  0043c	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  00441	85 c0		 test	 eax, eax
  00443	74 1a		 je	 SHORT $LN29@ostailor_c
  00445	48 b8 f7 7f de
	f7 ff ff ff 78	 mov	 rax, 8718968878452867063 ; 78fffffff7de7ff7H
  0044f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR test_pgminttr$1[rsp]
  00454	48 23 c8	 and	 rcx, rax
  00457	48 8b c1	 mov	 rax, rcx
  0045a	48 89 44 24 68	 mov	 QWORD PTR test_pgminttr$1[rsp], rax
$LN29@ostailor_c:

; 6727 :                 if (sysblk.ostailor & OSTAILOR_OPENSOLARIS) test_pgminttr &= OS_OPENSOLARIS;

  0045f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00466	8b 80 50 13 00
	00		 mov	 eax, DWORD PTR [rax+4944]
  0046c	25 00 00 80 00	 and	 eax, 8388608		; 00800000H
  00471	85 c0		 test	 eax, eax
  00473	74 1a		 je	 SHORT $LN30@ostailor_c
  00475	48 b8 f7 7f de
	ff ff ff ff f8	 mov	 rax, -504403158267691017 ; f8ffffffffde7ff7H
  0047f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR test_pgminttr$1[rsp]
  00484	48 23 c8	 and	 rcx, rax
  00487	48 8b c1	 mov	 rax, rcx
  0048a	48 89 44 24 68	 mov	 QWORD PTR test_pgminttr$1[rsp], rax
$LN30@ostailor_c:

; 6728 : 
; 6729 :                 if (sysblk.ostailor & OSTAILOR_VSE        ) test_pgminttr &= OS_VSE;

  0048f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00496	8b 80 50 13 00
	00		 mov	 eax, DWORD PTR [rax+4944]
  0049c	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  004a1	85 c0		 test	 eax, eax
  004a3	74 1a		 je	 SHORT $LN31@ostailor_c
  004a5	48 b8 ff 7f de
	f7 ff 73 f6 7f	 mov	 rax, 9220684830300078079 ; 7ff673fff7de7fffH
  004af	48 8b 4c 24 68	 mov	 rcx, QWORD PTR test_pgminttr$1[rsp]
  004b4	48 23 c8	 and	 rcx, rax
  004b7	48 8b c1	 mov	 rax, rcx
  004ba	48 89 44 24 68	 mov	 QWORD PTR test_pgminttr$1[rsp], rax
$LN31@ostailor_c:

; 6730 : 
; 6731 :                 /* Is sysblk.ostailor still accurate? */
; 6732 :                 if (sysblk.pgminttr == test_pgminttr)

  004bf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  004c6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR test_pgminttr$1[rsp]
  004cb	48 39 88 48 13
	00 00		 cmp	 QWORD PTR [rax+4936], rcx
  004d2	0f 85 34 02 00
	00		 jne	 $LN32@ostailor_c

; 6733 :                 {
; 6734 :                     /* Yep! Format current "xxx+yyy" OSTAILOR setting */
; 6735 : 
; 6736 :                     if (sysblk.ostailor & OSTAILOR_VM         ) STRLCAT( msgbuf2, "VM"          "+" );

  004d8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  004df	8b 80 50 13 00
	00		 mov	 eax, DWORD PTR [rax+4944]
  004e5	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  004ea	85 c0		 test	 eax, eax
  004ec	74 1b		 je	 SHORT $LN33@ostailor_c
  004ee	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  004f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209663
  004fb	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf2$3[rsp]
  00503	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN33@ostailor_c:

; 6737 : 
; 6738 :                     if (sysblk.ostailor & OSTAILOR_DEFAULT    ) STRLCAT( msgbuf2, "DEFAULT"     "+" );

  00509	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00510	8b 80 50 13 00
	00		 mov	 eax, DWORD PTR [rax+4944]
  00516	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  0051b	85 c0		 test	 eax, eax
  0051d	74 1b		 je	 SHORT $LN34@ostailor_c
  0051f	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00525	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209665
  0052c	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf2$3[rsp]
  00534	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN34@ostailor_c:

; 6739 :                     if (sysblk.ostailor & OSTAILOR_QUIET      ) STRLCAT( msgbuf2, "QUIET"       "+" );

  0053a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00541	8b 80 50 13 00
	00		 mov	 eax, DWORD PTR [rax+4944]
  00547	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0054c	85 c0		 test	 eax, eax
  0054e	74 1b		 je	 SHORT $LN35@ostailor_c
  00550	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00556	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209667
  0055d	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf2$3[rsp]
  00565	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN35@ostailor_c:

; 6740 :                     if (sysblk.ostailor & OSTAILOR_NULL       ) STRLCAT( msgbuf2, "NULL"        "+" );

  0056b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00572	8b 80 50 13 00
	00		 mov	 eax, DWORD PTR [rax+4944]
  00578	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  0057d	85 c0		 test	 eax, eax
  0057f	74 1b		 je	 SHORT $LN36@ostailor_c
  00581	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00587	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209669
  0058e	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf2$3[rsp]
  00596	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN36@ostailor_c:

; 6741 : 
; 6742 :                     if (sysblk.ostailor & OSTAILOR_OS390      ) STRLCAT( msgbuf2, "OS390"       "+" );

  0059c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  005a3	8b 80 50 13 00
	00		 mov	 eax, DWORD PTR [rax+4944]
  005a9	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  005ae	85 c0		 test	 eax, eax
  005b0	74 1b		 je	 SHORT $LN37@ostailor_c
  005b2	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  005b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209671
  005bf	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf2$3[rsp]
  005c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN37@ostailor_c:

; 6743 :                     if (sysblk.ostailor & OSTAILOR_ZOS        ) STRLCAT( msgbuf2, "ZOS"         "+" );

  005cd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  005d4	8b 80 50 13 00
	00		 mov	 eax, DWORD PTR [rax+4944]
  005da	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  005df	85 c0		 test	 eax, eax
  005e1	74 1b		 je	 SHORT $LN38@ostailor_c
  005e3	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  005e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209673
  005f0	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf2$3[rsp]
  005f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN38@ostailor_c:

; 6744 :                     if (sysblk.ostailor & OSTAILOR_LINUX      ) STRLCAT( msgbuf2, "LINUX"       "+" );

  005fe	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00605	8b 80 50 13 00
	00		 mov	 eax, DWORD PTR [rax+4944]
  0060b	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  00610	85 c0		 test	 eax, eax
  00612	74 1b		 je	 SHORT $LN39@ostailor_c
  00614	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0061a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209675
  00621	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf2$3[rsp]
  00629	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN39@ostailor_c:

; 6745 :                     if (sysblk.ostailor & OSTAILOR_OPENSOLARIS) STRLCAT( msgbuf2, "OPENSOLARIS" "+" );

  0062f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00636	8b 80 50 13 00
	00		 mov	 eax, DWORD PTR [rax+4944]
  0063c	25 00 00 80 00	 and	 eax, 8388608		; 00800000H
  00641	85 c0		 test	 eax, eax
  00643	74 1b		 je	 SHORT $LN40@ostailor_c
  00645	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0064b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209677
  00652	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf2$3[rsp]
  0065a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN40@ostailor_c:

; 6746 : 
; 6747 :                     if (sysblk.ostailor & OSTAILOR_VSE        )

  00660	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00667	8b 80 50 13 00
	00		 mov	 eax, DWORD PTR [rax+4944]
  0066d	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00672	85 c0		 test	 eax, eax
  00674	74 7c		 je	 SHORT $LN41@ostailor_c

; 6748 :                     {
; 6749 :                         char* vse = !sysblk.nolrasoe ? "VSE+" : "z/VSE+";

  00676	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0067d	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00683	c1 e8 18	 shr	 eax, 24
  00686	83 e0 01	 and	 eax, 1
  00689	85 c0		 test	 eax, eax
  0068b	75 0a		 jne	 SHORT $LN77@ostailor_c
  0068d	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR tv253[rsp], 1
  00695	eb 08		 jmp	 SHORT $LN78@ostailor_c
$LN77@ostailor_c:
  00697	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv253[rsp], 0
$LN78@ostailor_c:
  0069f	83 7c 24 78 00	 cmp	 DWORD PTR tv253[rsp], 0
  006a4	74 11		 je	 SHORT $LN79@ostailor_c
  006a6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209679
  006ad	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv255[rsp], rax
  006b5	eb 0f		 jmp	 SHORT $LN80@ostailor_c
$LN79@ostailor_c:
  006b7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209680
  006be	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv255[rsp], rax
$LN80@ostailor_c:
  006c6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv255[rsp]
  006ce	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR vse$2[rsp], rax

; 6750 :                         STRLCAT( msgbuf2, vse );

  006d6	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  006dc	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR vse$2[rsp]
  006e4	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf2$3[rsp]
  006ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN41@ostailor_c:

; 6751 :                     }
; 6752 : 
; 6753 :                     /* (remove trailing "+") */
; 6754 :                     ostailor = rtrim( msgbuf2, "+" );

  006f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209681
  006f9	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf2$3[rsp]
  00701	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rtrim
  00707	48 89 44 24 58	 mov	 QWORD PTR ostailor$[rsp], rax
$LN32@ostailor_c:
$LN22@ostailor_c:
$LN21@ostailor_c:

; 6755 :                 }
; 6756 :             }
; 6757 :         }
; 6758 : 
; 6759 :         if (!ostailor)

  0070c	48 83 7c 24 58
	00		 cmp	 QWORD PTR ostailor$[rsp], 0
  00712	75 2a		 jne	 SHORT $LN42@ostailor_c

; 6760 :             MSGBUF( msgbuf, "Custom(0x%16.16"PRIX64")", sysblk.pgminttr );

  00714	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0071b	4c 8b 88 48 13
	00 00		 mov	 r9, QWORD PTR [rax+4936]
  00722	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209684
  00729	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0072e	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$4[rsp]
  00736	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  0073c	eb 1f		 jmp	 SHORT $LN43@ostailor_c
$LN42@ostailor_c:

; 6761 :         else
; 6762 :             MSGBUF( msgbuf, "%s", ostailor );

  0073e	4c 8b 4c 24 58	 mov	 r9, QWORD PTR ostailor$[rsp]
  00743	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209685
  0074a	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0074f	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$4[rsp]
  00757	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN43@ostailor_c:

; 6763 : 
; 6764 :         // "%-14s: %s"
; 6765 :         WRMSG( HHC02203, "I", argv[0], msgbuf );

  0075d	b8 08 00 00 00	 mov	 eax, 8
  00762	48 6b c0 00	 imul	 rax, rax, 0
  00766	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv273[rsp], rax
  0076e	b9 01 00 00 00	 mov	 ecx, 1
  00773	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00779	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$4[rsp]
  00781	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00786	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0078e	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR tv273[rsp]
  00796	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0079a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0079f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209686
  007a6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209687
  007b2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007b7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007bc	41 b9 03 00 00
	00		 mov	 r9d, 3
  007c2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209688
  007c9	ba 6d 1a 00 00	 mov	 edx, 6765		; 00001a6dH
  007ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209689
  007d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6766 :         return 0;

  007db	33 c0		 xor	 eax, eax
  007dd	e9 d7 04 00 00	 jmp	 $LN1@ostailor_c
$LN10@ostailor_c:

; 6767 :     }
; 6768 : 
; 6769 :     /* Otherwise the single argument specifies the ostailor setting */
; 6770 : 
; 6771 :     ostailor = argv[1];

  007e2	b8 08 00 00 00	 mov	 eax, 8
  007e7	48 6b c0 01	 imul	 rax, rax, 1
  007eb	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  007f3	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  007f7	48 89 44 24 58	 mov	 QWORD PTR ostailor$[rsp], rax

; 6772 : 
; 6773 :     if (ostailor[0] == '+')

  007fc	b8 01 00 00 00	 mov	 eax, 1
  00801	48 6b c0 00	 imul	 rax, rax, 0
  00805	48 8b 4c 24 58	 mov	 rcx, QWORD PTR ostailor$[rsp]
  0080a	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0080e	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  00811	75 19		 jne	 SHORT $LN44@ostailor_c

; 6774 :     {
; 6775 :         b_on  = true;

  00813	c6 44 24 50 01	 mov	 BYTE PTR b_on$[rsp], 1

; 6776 :         b_off = false;

  00818	c6 44 24 51 00	 mov	 BYTE PTR b_off$[rsp], 0

; 6777 :         ostailor++;

  0081d	48 8b 44 24 58	 mov	 rax, QWORD PTR ostailor$[rsp]
  00822	48 ff c0	 inc	 rax
  00825	48 89 44 24 58	 mov	 QWORD PTR ostailor$[rsp], rax

; 6778 :     }

  0082a	eb 3a		 jmp	 SHORT $LN45@ostailor_c
$LN44@ostailor_c:

; 6779 :     else if (ostailor[0] == '-')

  0082c	b8 01 00 00 00	 mov	 eax, 1
  00831	48 6b c0 00	 imul	 rax, rax, 0
  00835	48 8b 4c 24 58	 mov	 rcx, QWORD PTR ostailor$[rsp]
  0083a	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0083e	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00841	75 19		 jne	 SHORT $LN46@ostailor_c

; 6780 :     {
; 6781 :         b_on  = false;

  00843	c6 44 24 50 00	 mov	 BYTE PTR b_on$[rsp], 0

; 6782 :         b_off = true;

  00848	c6 44 24 51 01	 mov	 BYTE PTR b_off$[rsp], 1

; 6783 :         ostailor++;

  0084d	48 8b 44 24 58	 mov	 rax, QWORD PTR ostailor$[rsp]
  00852	48 ff c0	 inc	 rax
  00855	48 89 44 24 58	 mov	 QWORD PTR ostailor$[rsp], rax

; 6784 :     }

  0085a	eb 0a		 jmp	 SHORT $LN47@ostailor_c
$LN46@ostailor_c:

; 6785 :     else
; 6786 :     {
; 6787 :         b_on  = false;

  0085c	c6 44 24 50 00	 mov	 BYTE PTR b_on$[rsp], 0

; 6788 :         b_off = false;

  00861	c6 44 24 51 00	 mov	 BYTE PTR b_off$[rsp], 0
$LN47@ostailor_c:
$LN45@ostailor_c:

; 6789 :     }
; 6790 : 
; 6791 :     nolrasoe = sysblk.nolrasoe;

  00866	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0086d	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00873	c1 e8 18	 shr	 eax, 24
  00876	83 e0 01	 and	 eax, 1
  00879	88 44 24 52	 mov	 BYTE PTR nolrasoe$[rsp], al

; 6792 : 
; 6793 :          if (CMD( ostailor, VM,      2 ))     { ost = OSTAILOR_VM;          mask = OS_VM;          }

  0087d	41 b8 02 00 00
	00		 mov	 r8d, 2
  00883	48 8b 54 24 58	 mov	 rdx, QWORD PTR ostailor$[rsp]
  00888	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209696
  0088f	e8 00 00 00 00	 call	 strcaseabbrev
  00894	85 c0		 test	 eax, eax
  00896	74 1c		 je	 SHORT $LN48@ostailor_c
  00898	c7 44 24 60 00
	00 00 02	 mov	 DWORD PTR ost$[rsp], 33554432 ; 02000000H
  008a0	48 b8 fc 7f de
	f7 ff ff ff 7f	 mov	 rax, 9223372036718362620 ; 7ffffffff7de7ffcH
  008aa	48 89 44 24 70	 mov	 QWORD PTR mask$[rsp], rax
  008af	e9 0a 03 00 00	 jmp	 $LN49@ostailor_c
$LN48@ostailor_c:

; 6794 :     else if (CMD( ostailor, Z/VM,    4 ))     { ost = OSTAILOR_VM;          mask = OS_VM;          }

  008b4	41 b8 04 00 00
	00		 mov	 r8d, 4
  008ba	48 8b 54 24 58	 mov	 rdx, QWORD PTR ostailor$[rsp]
  008bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209699
  008c6	e8 00 00 00 00	 call	 strcaseabbrev
  008cb	85 c0		 test	 eax, eax
  008cd	74 1c		 je	 SHORT $LN50@ostailor_c
  008cf	c7 44 24 60 00
	00 00 02	 mov	 DWORD PTR ost$[rsp], 33554432 ; 02000000H
  008d7	48 b8 fc 7f de
	f7 ff ff ff 7f	 mov	 rax, 9223372036718362620 ; 7ffffffff7de7ffcH
  008e1	48 89 44 24 70	 mov	 QWORD PTR mask$[rsp], rax
  008e6	e9 d3 02 00 00	 jmp	 $LN51@ostailor_c
$LN50@ostailor_c:

; 6795 : 
; 6796 :     else if (CMD( ostailor, NONE,    4 ))     { ost = OSTAILOR_DEFAULT;     mask = OS_DEFAULT; b_on = false; b_off = false; }

  008eb	41 b8 04 00 00
	00		 mov	 r8d, 4
  008f1	48 8b 54 24 58	 mov	 rdx, QWORD PTR ostailor$[rsp]
  008f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209702
  008fd	e8 00 00 00 00	 call	 strcaseabbrev
  00902	85 c0		 test	 eax, eax
  00904	74 26		 je	 SHORT $LN52@ostailor_c
  00906	c7 44 24 60 00
	00 00 20	 mov	 DWORD PTR ost$[rsp], 536870912 ; 20000000H
  0090e	48 b8 ff 7f de
	f7 ff ff ff 7f	 mov	 rax, 9223372036718362623 ; 7ffffffff7de7fffH
  00918	48 89 44 24 70	 mov	 QWORD PTR mask$[rsp], rax
  0091d	c6 44 24 50 00	 mov	 BYTE PTR b_on$[rsp], 0
  00922	c6 44 24 51 00	 mov	 BYTE PTR b_off$[rsp], 0
  00927	e9 92 02 00 00	 jmp	 $LN53@ostailor_c
$LN52@ostailor_c:

; 6797 :     else if (CMD( ostailor, DEFAULT, 3 ))     { ost = OSTAILOR_DEFAULT;     mask = OS_DEFAULT; b_on = false; b_off = false; }

  0092c	41 b8 03 00 00
	00		 mov	 r8d, 3
  00932	48 8b 54 24 58	 mov	 rdx, QWORD PTR ostailor$[rsp]
  00937	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209705
  0093e	e8 00 00 00 00	 call	 strcaseabbrev
  00943	85 c0		 test	 eax, eax
  00945	74 26		 je	 SHORT $LN54@ostailor_c
  00947	c7 44 24 60 00
	00 00 20	 mov	 DWORD PTR ost$[rsp], 536870912 ; 20000000H
  0094f	48 b8 ff 7f de
	f7 ff ff ff 7f	 mov	 rax, 9223372036718362623 ; 7ffffffff7de7fffH
  00959	48 89 44 24 70	 mov	 QWORD PTR mask$[rsp], rax
  0095e	c6 44 24 50 00	 mov	 BYTE PTR b_on$[rsp], 0
  00963	c6 44 24 51 00	 mov	 BYTE PTR b_off$[rsp], 0
  00968	e9 51 02 00 00	 jmp	 $LN55@ostailor_c
$LN54@ostailor_c:

; 6798 :     else if (CMD( ostailor, QUIET,   5 ))     { ost = OSTAILOR_QUIET;       mask = OS_QUIET;   b_on = false; b_off = false; }

  0096d	41 b8 05 00 00
	00		 mov	 r8d, 5
  00973	48 8b 54 24 58	 mov	 rdx, QWORD PTR ostailor$[rsp]
  00978	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209708
  0097f	e8 00 00 00 00	 call	 strcaseabbrev
  00984	85 c0		 test	 eax, eax
  00986	74 20		 je	 SHORT $LN56@ostailor_c
  00988	c7 44 24 60 00
	00 00 80	 mov	 DWORD PTR ost$[rsp], -2147483648 ; 80000000H
  00990	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR mask$[rsp], 0
  00999	c6 44 24 50 00	 mov	 BYTE PTR b_on$[rsp], 0
  0099e	c6 44 24 51 00	 mov	 BYTE PTR b_off$[rsp], 0
  009a3	e9 16 02 00 00	 jmp	 $LN57@ostailor_c
$LN56@ostailor_c:

; 6799 :     else if (CMD( ostailor, NULL,    4 ))     { ost = OSTAILOR_NULL;        mask = OS_NULL;    b_on = false; b_off = false; }

  009a8	41 b8 04 00 00
	00		 mov	 r8d, 4
  009ae	48 8b 54 24 58	 mov	 rdx, QWORD PTR ostailor$[rsp]
  009b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209711
  009ba	e8 00 00 00 00	 call	 strcaseabbrev
  009bf	85 c0		 test	 eax, eax
  009c1	74 20		 je	 SHORT $LN58@ostailor_c
  009c3	c7 44 24 60 00
	00 00 40	 mov	 DWORD PTR ost$[rsp], 1073741824 ; 40000000H
  009cb	48 c7 44 24 70
	ff ff ff ff	 mov	 QWORD PTR mask$[rsp], -1
  009d4	c6 44 24 50 00	 mov	 BYTE PTR b_on$[rsp], 0
  009d9	c6 44 24 51 00	 mov	 BYTE PTR b_off$[rsp], 0
  009de	e9 db 01 00 00	 jmp	 $LN59@ostailor_c
$LN58@ostailor_c:

; 6800 : 
; 6801 :     else if (CMD( ostailor, Z/OS,    4 ))     { ost = OSTAILOR_ZOS;         mask = OS_ZOS;         }

  009e3	41 b8 04 00 00
	00		 mov	 r8d, 4
  009e9	48 8b 54 24 58	 mov	 rdx, QWORD PTR ostailor$[rsp]
  009ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209714
  009f5	e8 00 00 00 00	 call	 strcaseabbrev
  009fa	85 c0		 test	 eax, eax
  009fc	74 1c		 je	 SHORT $LN60@ostailor_c
  009fe	c7 44 24 60 00
	00 00 08	 mov	 DWORD PTR ost$[rsp], 134217728 ; 08000000H
  00a06	48 b8 b7 7f de
	f7 ff 73 76 7b	 mov	 rax, 8896425657129402295 ; 7b7673fff7de7fb7H
  00a10	48 89 44 24 70	 mov	 QWORD PTR mask$[rsp], rax
  00a15	e9 a4 01 00 00	 jmp	 $LN61@ostailor_c
$LN60@ostailor_c:

; 6802 :     else if (CMD( ostailor, OpenSolaris, 4 )) { ost = OSTAILOR_OPENSOLARIS; mask = OS_OPENSOLARIS; }

  00a1a	41 b8 04 00 00
	00		 mov	 r8d, 4
  00a20	48 8b 54 24 58	 mov	 rdx, QWORD PTR ostailor$[rsp]
  00a25	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209717
  00a2c	e8 00 00 00 00	 call	 strcaseabbrev
  00a31	85 c0		 test	 eax, eax
  00a33	74 1c		 je	 SHORT $LN62@ostailor_c
  00a35	c7 44 24 60 00
	00 80 00	 mov	 DWORD PTR ost$[rsp], 8388608 ; 00800000H
  00a3d	48 b8 f7 7f de
	ff ff ff ff f8	 mov	 rax, -504403158267691017 ; f8ffffffffde7ff7H
  00a47	48 89 44 24 70	 mov	 QWORD PTR mask$[rsp], rax
  00a4c	e9 6d 01 00 00	 jmp	 $LN63@ostailor_c
$LN62@ostailor_c:

; 6803 :     else if (CMD( ostailor, LINUX,   2 ))     { ost = OSTAILOR_LINUX;       mask = OS_LINUX;       }

  00a51	41 b8 02 00 00
	00		 mov	 r8d, 2
  00a57	48 8b 54 24 58	 mov	 rdx, QWORD PTR ostailor$[rsp]
  00a5c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209720
  00a63	e8 00 00 00 00	 call	 strcaseabbrev
  00a68	85 c0		 test	 eax, eax
  00a6a	74 1c		 je	 SHORT $LN64@ostailor_c
  00a6c	c7 44 24 60 00
	00 00 01	 mov	 DWORD PTR ost$[rsp], 16777216 ; 01000000H
  00a74	48 b8 f7 7f de
	f7 ff ff ff 78	 mov	 rax, 8718968878452867063 ; 78fffffff7de7ff7H
  00a7e	48 89 44 24 70	 mov	 QWORD PTR mask$[rsp], rax
  00a83	e9 36 01 00 00	 jmp	 $LN65@ostailor_c
$LN64@ostailor_c:

; 6804 :     else if (CMD( ostailor, OS/390,  2 ))     { ost = OSTAILOR_OS390;       mask = OS_OS390;       }

  00a88	41 b8 02 00 00
	00		 mov	 r8d, 2
  00a8e	48 8b 54 24 58	 mov	 rdx, QWORD PTR ostailor$[rsp]
  00a93	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209723
  00a9a	e8 00 00 00 00	 call	 strcaseabbrev
  00a9f	85 c0		 test	 eax, eax
  00aa1	74 1c		 je	 SHORT $LN66@ostailor_c
  00aa3	c7 44 24 60 00
	00 00 10	 mov	 DWORD PTR ost$[rsp], 268435456 ; 10000000H
  00aab	48 b8 fd 7f de
	f7 ff 73 f6 7f	 mov	 rax, 9220684830300078077 ; 7ff673fff7de7ffdH
  00ab5	48 89 44 24 70	 mov	 QWORD PTR mask$[rsp], rax
  00aba	e9 ff 00 00 00	 jmp	 $LN67@ostailor_c
$LN66@ostailor_c:

; 6805 : 
; 6806 :     else if (CMD( ostailor, VSE,     2 ))     { ost = OSTAILOR_VSE;         mask = OS_VSE;     nolrasoe = false; }

  00abf	41 b8 02 00 00
	00		 mov	 r8d, 2
  00ac5	48 8b 54 24 58	 mov	 rdx, QWORD PTR ostailor$[rsp]
  00aca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209726
  00ad1	e8 00 00 00 00	 call	 strcaseabbrev
  00ad6	85 c0		 test	 eax, eax
  00ad8	74 21		 je	 SHORT $LN68@ostailor_c
  00ada	c7 44 24 60 00
	00 00 04	 mov	 DWORD PTR ost$[rsp], 67108864 ; 04000000H
  00ae2	48 b8 ff 7f de
	f7 ff 73 f6 7f	 mov	 rax, 9220684830300078079 ; 7ff673fff7de7fffH
  00aec	48 89 44 24 70	 mov	 QWORD PTR mask$[rsp], rax
  00af1	c6 44 24 52 00	 mov	 BYTE PTR nolrasoe$[rsp], 0
  00af6	e9 c3 00 00 00	 jmp	 $LN69@ostailor_c
$LN68@ostailor_c:

; 6807 :     else if (CMD( ostailor, Z/VSE,   4 ))     { ost = OSTAILOR_VSE;         mask = OS_VSE;     nolrasoe = true;  }

  00afb	41 b8 04 00 00
	00		 mov	 r8d, 4
  00b01	48 8b 54 24 58	 mov	 rdx, QWORD PTR ostailor$[rsp]
  00b06	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209729
  00b0d	e8 00 00 00 00	 call	 strcaseabbrev
  00b12	85 c0		 test	 eax, eax
  00b14	74 21		 je	 SHORT $LN70@ostailor_c
  00b16	c7 44 24 60 00
	00 00 04	 mov	 DWORD PTR ost$[rsp], 67108864 ; 04000000H
  00b1e	48 b8 ff 7f de
	f7 ff 73 f6 7f	 mov	 rax, 9220684830300078079 ; 7ff673fff7de7fffH
  00b28	48 89 44 24 70	 mov	 QWORD PTR mask$[rsp], rax
  00b2d	c6 44 24 52 01	 mov	 BYTE PTR nolrasoe$[rsp], 1
  00b32	e9 87 00 00 00	 jmp	 $LN71@ostailor_c
$LN70@ostailor_c:

; 6808 :     else
; 6809 :     {
; 6810 :         // "Invalid argument %s%s"
; 6811 :         WRMSG( HHC02205, "E", argv[1], ": unknown OS tailor specification" );

  00b37	b8 08 00 00 00	 mov	 eax, 8
  00b3c	48 6b c0 01	 imul	 rax, rax, 1
  00b40	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv394[rsp], rax
  00b48	b9 01 00 00 00	 mov	 ecx, 1
  00b4d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b53	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209730
  00b5a	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00b5f	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00b67	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR tv394[rsp]
  00b6f	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00b73	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00b78	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209731
  00b7f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b84	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209732
  00b8b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b90	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b95	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b9b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209733
  00ba2	ba 9b 1a 00 00	 mov	 edx, 6811		; 00001a9bH
  00ba7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209734
  00bae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6812 :         return -1;

  00bb4	b8 ff ff ff ff	 mov	 eax, -1
  00bb9	e9 fb 00 00 00	 jmp	 $LN1@ostailor_c
$LN71@ostailor_c:
$LN69@ostailor_c:
$LN67@ostailor_c:
$LN65@ostailor_c:
$LN63@ostailor_c:
$LN61@ostailor_c:
$LN59@ostailor_c:
$LN57@ostailor_c:
$LN55@ostailor_c:
$LN53@ostailor_c:
$LN51@ostailor_c:
$LN49@ostailor_c:

; 6813 :     }
; 6814 : 
; 6815 :     if (b_on)

  00bbe	0f b6 44 24 50	 movzx	 eax, BYTE PTR b_on$[rsp]
  00bc3	85 c0		 test	 eax, eax
  00bc5	74 46		 je	 SHORT $LN72@ostailor_c

; 6816 :     {
; 6817 :         sysblk.ostailor |= ost;

  00bc7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00bce	8b 4c 24 60	 mov	 ecx, DWORD PTR ost$[rsp]
  00bd2	8b 80 50 13 00
	00		 mov	 eax, DWORD PTR [rax+4944]
  00bd8	0b c1		 or	 eax, ecx
  00bda	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00be1	89 81 50 13 00
	00		 mov	 DWORD PTR [rcx+4944], eax

; 6818 :         sysblk.pgminttr &= mask;

  00be7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00bee	48 8b 4c 24 70	 mov	 rcx, QWORD PTR mask$[rsp]
  00bf3	48 8b 80 48 13
	00 00		 mov	 rax, QWORD PTR [rax+4936]
  00bfa	48 23 c1	 and	 rax, rcx
  00bfd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00c04	48 89 81 48 13
	00 00		 mov	 QWORD PTR [rcx+4936], rax

; 6819 :     }

  00c0b	eb 7d		 jmp	 SHORT $LN73@ostailor_c
$LN72@ostailor_c:

; 6820 :     else if (b_off)

  00c0d	0f b6 44 24 51	 movzx	 eax, BYTE PTR b_off$[rsp]
  00c12	85 c0		 test	 eax, eax
  00c14	74 50		 je	 SHORT $LN74@ostailor_c

; 6821 :     {
; 6822 :         sysblk.ostailor &= ~ost;

  00c16	8b 44 24 60	 mov	 eax, DWORD PTR ost$[rsp]
  00c1a	f7 d0		 not	 eax
  00c1c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00c23	8b 89 50 13 00
	00		 mov	 ecx, DWORD PTR [rcx+4944]
  00c29	23 c8		 and	 ecx, eax
  00c2b	8b c1		 mov	 eax, ecx
  00c2d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00c34	89 81 50 13 00
	00		 mov	 DWORD PTR [rcx+4944], eax

; 6823 :         sysblk.pgminttr |= ~mask;

  00c3a	48 8b 44 24 70	 mov	 rax, QWORD PTR mask$[rsp]
  00c3f	48 f7 d0	 not	 rax
  00c42	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00c49	48 8b 89 48 13
	00 00		 mov	 rcx, QWORD PTR [rcx+4936]
  00c50	48 0b c8	 or	 rcx, rax
  00c53	48 8b c1	 mov	 rax, rcx
  00c56	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00c5d	48 89 81 48 13
	00 00		 mov	 QWORD PTR [rcx+4936], rax

; 6824 :     }

  00c64	eb 24		 jmp	 SHORT $LN75@ostailor_c
$LN74@ostailor_c:

; 6825 :     else
; 6826 :     {
; 6827 :         sysblk.ostailor = ost;

  00c66	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00c6d	8b 4c 24 60	 mov	 ecx, DWORD PTR ost$[rsp]
  00c71	89 88 50 13 00
	00		 mov	 DWORD PTR [rax+4944], ecx

; 6828 :         sysblk.pgminttr = mask;

  00c77	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00c7e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR mask$[rsp]
  00c83	48 89 88 48 13
	00 00		 mov	 QWORD PTR [rax+4936], rcx
$LN75@ostailor_c:
$LN73@ostailor_c:

; 6829 :     }
; 6830 : 
; 6831 :     sysblk.nolrasoe = nolrasoe;

  00c8a	0f b6 44 24 52	 movzx	 eax, BYTE PTR nolrasoe$[rsp]
  00c8f	83 e0 01	 and	 eax, 1
  00c92	c1 e0 18	 shl	 eax, 24
  00c95	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00c9c	8b 89 94 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4756]
  00ca2	0f ba f1 18	 btr	 ecx, 24
  00ca6	0b c8		 or	 ecx, eax
  00ca8	8b c1		 mov	 eax, ecx
  00caa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00cb1	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax

; 6832 : 
; 6833 :     return 0;

  00cb7	33 c0		 xor	 eax, eax
$LN1@ostailor_c:

; 6834 : }

  00cb9	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00cc1	48 33 cc	 xor	 rcx, rsp
  00cc4	e8 00 00 00 00	 call	 __security_check_cookie
  00cc9	48 81 c4 40 01
	00 00		 add	 rsp, 320		; 00000140H
  00cd0	5f		 pop	 rdi
  00cd1	c3		 ret	 0
ostailor_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
i$1 = 80
c$ = 84
abs_rupt_num$ = 88
tv131 = 92
rupt_num$ = 96
$T2 = 104
rupt_mask$ = 112
tv310 = 120
tv177 = 128
tv230 = 136
tv248 = 144
tv353 = 152
prev_sysblk_pgminttr$ = 160
flags$3 = 176
__$ArrayPad$ = 256
argc$ = 288
argv$ = 296
cmdline$ = 304
pgmtrace_cmd PROC

; 6587 : {

$LN26:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@pgmtrace_c:

; 6588 :     U64   rupt_mask;
; 6589 :     U64   prev_sysblk_pgminttr;
; 6590 :     int   abs_rupt_num;
; 6591 :     int       rupt_num;
; 6592 :     BYTE  c;
; 6593 : 
; 6594 :     UNREFERENCED( cmdline );

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@pgmtrace_c

; 6595 : 
; 6596 :     /* No arguments = query current settings */
; 6597 :     if (argc < 2)

  0002d	83 bc 24 20 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00035	0f 8d c7 02 00
	00		 jge	 $LN8@pgmtrace_c

; 6598 :     {
; 6599 :              if (OS_NULL  == sysblk.pgminttr) WRMSG( HHC02281, "I", "pgmtrace == all"  );

  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00042	48 83 b8 48 13
	00 00 ff	 cmp	 QWORD PTR [rax+4936], -1
  0004a	75 58		 jne	 SHORT $LN10@pgmtrace_c
  0004c	b9 01 00 00 00	 mov	 ecx, 1
  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209545
  0005e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209546
  0006a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209547
  00076	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0007b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00080	41 b9 03 00 00
	00		 mov	 r9d, 3
  00086	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209548
  0008d	ba c7 19 00 00	 mov	 edx, 6599		; 000019c7H
  00092	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209549
  00099	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0009f	e9 52 02 00 00	 jmp	 $LN11@pgmtrace_c
$LN10@pgmtrace_c:

; 6600 :         else if (OS_QUIET == sysblk.pgminttr) WRMSG( HHC02281, "I", "pgmtrace == none" );

  000a4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000ab	48 83 b8 48 13
	00 00 00	 cmp	 QWORD PTR [rax+4936], 0
  000b3	75 58		 jne	 SHORT $LN12@pgmtrace_c
  000b5	b9 01 00 00 00	 mov	 ecx, 1
  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209552
  000c7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209553
  000d3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209554
  000df	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000e4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ef	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209555
  000f6	ba c8 19 00 00	 mov	 edx, 6600		; 000019c8H
  000fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209556
  00102	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00108	e9 e9 01 00 00	 jmp	 $LN13@pgmtrace_c
$LN12@pgmtrace_c:

; 6601 :         else
; 6602 :         {
; 6603 :             char flags[64+1]; int i;
; 6604 : 
; 6605 :             for (i=0; i < 64; i++)

  0010d	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  00115	eb 0a		 jmp	 SHORT $LN7@pgmtrace_c
$LN5@pgmtrace_c:
  00117	8b 44 24 50	 mov	 eax, DWORD PTR i$1[rsp]
  0011b	ff c0		 inc	 eax
  0011d	89 44 24 50	 mov	 DWORD PTR i$1[rsp], eax
$LN7@pgmtrace_c:
  00121	83 7c 24 50 40	 cmp	 DWORD PTR i$1[rsp], 64	; 00000040H
  00126	7d 57		 jge	 SHORT $LN6@pgmtrace_c

; 6606 :                 flags[i] = (sysblk.pgminttr & (1ULL << i)) ? ' ' : '*';

  00128	8b 44 24 50	 mov	 eax, DWORD PTR i$1[rsp]
  0012c	b9 01 00 00 00	 mov	 ecx, 1
  00131	48 89 4c 24 78	 mov	 QWORD PTR tv310[rsp], rcx
  00136	0f b6 c8	 movzx	 ecx, al
  00139	48 8b 44 24 78	 mov	 rax, QWORD PTR tv310[rsp]
  0013e	48 d3 e0	 shl	 rax, cl
  00141	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00148	48 8b 89 48 13
	00 00		 mov	 rcx, QWORD PTR [rcx+4936]
  0014f	48 23 c8	 and	 rcx, rax
  00152	48 8b c1	 mov	 rax, rcx
  00155	48 85 c0	 test	 rax, rax
  00158	74 0a		 je	 SHORT $LN22@pgmtrace_c
  0015a	c7 44 24 5c 20
	00 00 00	 mov	 DWORD PTR tv131[rsp], 32 ; 00000020H
  00162	eb 08		 jmp	 SHORT $LN23@pgmtrace_c
$LN22@pgmtrace_c:
  00164	c7 44 24 5c 2a
	00 00 00	 mov	 DWORD PTR tv131[rsp], 42 ; 0000002aH
$LN23@pgmtrace_c:
  0016c	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$1[rsp]
  00171	0f b6 4c 24 5c	 movzx	 ecx, BYTE PTR tv131[rsp]
  00176	88 8c 04 b0 00
	00 00		 mov	 BYTE PTR flags$3[rsp+rax], cl
  0017d	eb 98		 jmp	 SHORT $LN5@pgmtrace_c
$LN6@pgmtrace_c:

; 6607 : 
; 6608 :             flags[64] = 0;

  0017f	b8 01 00 00 00	 mov	 eax, 1
  00184	48 6b c0 40	 imul	 rax, rax, 64		; 00000040H
  00188	48 89 44 24 68	 mov	 QWORD PTR $T2[rsp], rax
  0018d	48 83 7c 24 68
	41		 cmp	 QWORD PTR $T2[rsp], 65	; 00000041H
  00193	73 02		 jae	 SHORT $LN24@pgmtrace_c
  00195	eb 05		 jmp	 SHORT $LN25@pgmtrace_c
$LN24@pgmtrace_c:
  00197	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN25@pgmtrace_c:
  0019c	48 8b 44 24 68	 mov	 rax, QWORD PTR $T2[rsp]
  001a1	c6 84 04 b0 00
	00 00 00	 mov	 BYTE PTR flags$3[rsp+rax], 0

; 6609 : 
; 6610 :             WRMSG( HHC02281, "I", "* = Tracing suppressed; otherwise tracing enabled" );

  001a9	b9 01 00 00 00	 mov	 ecx, 1
  001ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209557
  001bb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209558
  001c7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209559
  001d3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001d8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001dd	41 b9 03 00 00
	00		 mov	 r9d, 3
  001e3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209560
  001ea	ba d2 19 00 00	 mov	 edx, 6610		; 000019d2H
  001ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209561
  001f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6611 :             WRMSG( HHC02281, "I", "0000000000000001111111111111111222222222222222233333333333333334" );

  001fc	b9 01 00 00 00	 mov	 ecx, 1
  00201	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00207	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209562
  0020e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00213	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209563
  0021a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0021f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209564
  00226	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0022b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00230	41 b9 03 00 00
	00		 mov	 r9d, 3
  00236	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209565
  0023d	ba d3 19 00 00	 mov	 edx, 6611		; 000019d3H
  00242	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209566
  00249	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6612 :             WRMSG( HHC02281, "I", "123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0" );

  0024f	b9 01 00 00 00	 mov	 ecx, 1
  00254	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0025a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209567
  00261	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00266	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209568
  0026d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00272	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209569
  00279	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0027e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00283	41 b9 03 00 00
	00		 mov	 r9d, 3
  00289	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209570
  00290	ba d4 19 00 00	 mov	 edx, 6612		; 000019d4H
  00295	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209571
  0029c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6613 :             WRMSG( HHC02281, "I", flags );

  002a2	b9 01 00 00 00	 mov	 ecx, 1
  002a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002ad	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR flags$3[rsp]
  002b5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209572
  002c1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209573
  002cd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002d2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002d7	41 b9 03 00 00
	00		 mov	 r9d, 3
  002dd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209574
  002e4	ba d5 19 00 00	 mov	 edx, 6613		; 000019d5H
  002e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209575
  002f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN13@pgmtrace_c:
$LN11@pgmtrace_c:

; 6614 :         }
; 6615 :         return 0;

  002f6	33 c0		 xor	 eax, eax
  002f8	e9 af 02 00 00	 jmp	 $LN1@pgmtrace_c

; 6616 :     }

  002fd	e9 85 00 00 00	 jmp	 $LN9@pgmtrace_c
$LN8@pgmtrace_c:

; 6617 :     /* More than one argument = ERROR */
; 6618 :     else if (argc > 2)

  00302	83 bc 24 20 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0030a	7e 7b		 jle	 SHORT $LN14@pgmtrace_c

; 6619 :     {
; 6620 :         // "Invalid command usage. Type 'help %s' for assistance."
; 6621 :         WRMSG( HHC02299, "E", argv[0] );

  0030c	b8 08 00 00 00	 mov	 eax, 8
  00311	48 6b c0 00	 imul	 rax, rax, 0
  00315	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv177[rsp], rax
  0031d	b9 01 00 00 00	 mov	 ecx, 1
  00322	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00328	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00330	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv177[rsp]
  00338	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0033c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00341	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209577
  00348	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0034d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209578
  00354	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00359	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0035e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00364	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209579
  0036b	ba dd 19 00 00	 mov	 edx, 6621		; 000019ddH
  00370	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209580
  00377	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6622 :         return -1;

  0037d	b8 ff ff ff ff	 mov	 eax, -1
  00382	e9 25 02 00 00	 jmp	 $LN1@pgmtrace_c
$LN14@pgmtrace_c:
$LN9@pgmtrace_c:

; 6623 :     }
; 6624 : 
; 6625 :     /* Otherwise argument is interrupt number to be added or removed */
; 6626 :     if (sscanf( argv[1], "%x%c", &rupt_num, &c ) != 1)

  00387	b8 08 00 00 00	 mov	 eax, 8
  0038c	48 6b c0 01	 imul	 rax, rax, 1
  00390	4c 8d 4c 24 54	 lea	 r9, QWORD PTR c$[rsp]
  00395	4c 8d 44 24 60	 lea	 r8, QWORD PTR rupt_num$[rsp]
  0039a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209582
  003a1	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003a9	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  003ad	e8 00 00 00 00	 call	 sscanf
  003b2	83 f8 01	 cmp	 eax, 1
  003b5	0f 84 87 00 00
	00		 je	 $LN15@pgmtrace_c

; 6627 :     {
; 6628 :         // "Invalid argument %s%s"
; 6629 :         WRMSG( HHC02205, "E", argv[1], ": program interrupt number is invalid" );

  003bb	b8 08 00 00 00	 mov	 eax, 8
  003c0	48 6b c0 01	 imul	 rax, rax, 1
  003c4	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv230[rsp], rax
  003cc	b9 01 00 00 00	 mov	 ecx, 1
  003d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209583
  003de	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003e3	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003eb	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv230[rsp]
  003f3	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  003f7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209584
  00403	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00408	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209585
  0040f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00414	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00419	41 b9 03 00 00
	00		 mov	 r9d, 3
  0041f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209586
  00426	ba e5 19 00 00	 mov	 edx, 6629		; 000019e5H
  0042b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209587
  00432	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6630 :         return -1;

  00438	b8 ff ff ff ff	 mov	 eax, -1
  0043d	e9 6a 01 00 00	 jmp	 $LN1@pgmtrace_c
$LN15@pgmtrace_c:

; 6631 :     }
; 6632 : 
; 6633 :     if (0
; 6634 :         || (abs_rupt_num = abs( rupt_num )) < 1
; 6635 :         || (abs_rupt_num > 0x40)

  00442	33 c0		 xor	 eax, eax
  00444	85 c0		 test	 eax, eax
  00446	75 1f		 jne	 SHORT $LN17@pgmtrace_c
  00448	8b 4c 24 60	 mov	 ecx, DWORD PTR rupt_num$[rsp]
  0044c	e8 00 00 00 00	 call	 abs
  00451	89 44 24 58	 mov	 DWORD PTR abs_rupt_num$[rsp], eax
  00455	83 7c 24 58 01	 cmp	 DWORD PTR abs_rupt_num$[rsp], 1
  0045a	7c 0b		 jl	 SHORT $LN17@pgmtrace_c
  0045c	83 7c 24 58 40	 cmp	 DWORD PTR abs_rupt_num$[rsp], 64 ; 00000040H
  00461	0f 8e 87 00 00
	00		 jle	 $LN16@pgmtrace_c
$LN17@pgmtrace_c:

; 6636 :     )
; 6637 :     {
; 6638 :         // "Invalid argument %s%s"
; 6639 :         WRMSG( HHC02205, "E", argv[1], ": program interrupt number is out of range" );

  00467	b8 08 00 00 00	 mov	 eax, 8
  0046c	48 6b c0 01	 imul	 rax, rax, 1
  00470	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv248[rsp], rax
  00478	b9 01 00 00 00	 mov	 ecx, 1
  0047d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00483	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209590
  0048a	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0048f	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00497	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tv248[rsp]
  0049f	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  004a3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209591
  004af	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209592
  004bb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004c0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004c5	41 b9 03 00 00
	00		 mov	 r9d, 3
  004cb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209593
  004d2	ba ef 19 00 00	 mov	 edx, 6639		; 000019efH
  004d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209594
  004de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6640 :         return -1;

  004e4	b8 ff ff ff ff	 mov	 eax, -1
  004e9	e9 be 00 00 00	 jmp	 $LN1@pgmtrace_c
$LN16@pgmtrace_c:

; 6641 :     }
; 6642 : 
; 6643 :     /* Save current sysblk.pgminttr setting */
; 6644 :     prev_sysblk_pgminttr = sysblk.pgminttr;

  004ee	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  004f5	48 8b 80 48 13
	00 00		 mov	 rax, QWORD PTR [rax+4936]
  004fc	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR prev_sysblk_pgminttr$[rsp], rax

; 6645 : 
; 6646 :     /* Build mask for interruption code to be turned on or off */
; 6647 :     rupt_mask = (1ULL << (abs_rupt_num - 1));

  00504	8b 44 24 58	 mov	 eax, DWORD PTR abs_rupt_num$[rsp]
  00508	ff c8		 dec	 eax
  0050a	b9 01 00 00 00	 mov	 ecx, 1
  0050f	48 89 8c 24 98
	00 00 00	 mov	 QWORD PTR tv353[rsp], rcx
  00517	0f b6 c8	 movzx	 ecx, al
  0051a	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv353[rsp]
  00522	48 d3 e0	 shl	 rax, cl
  00525	48 89 44 24 70	 mov	 QWORD PTR rupt_mask$[rsp], rax

; 6648 : 
; 6649 :     /* Add or remove interruption code from program interrupt mask */
; 6650 :     if (rupt_num < 0)

  0052a	83 7c 24 60 00	 cmp	 DWORD PTR rupt_num$[rsp], 0
  0052f	7d 2c		 jge	 SHORT $LN18@pgmtrace_c

; 6651 :         sysblk.pgminttr &= ~rupt_mask;

  00531	48 8b 44 24 70	 mov	 rax, QWORD PTR rupt_mask$[rsp]
  00536	48 f7 d0	 not	 rax
  00539	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00540	48 8b 89 48 13
	00 00		 mov	 rcx, QWORD PTR [rcx+4936]
  00547	48 23 c8	 and	 rcx, rax
  0054a	48 8b c1	 mov	 rax, rcx
  0054d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00554	48 89 81 48 13
	00 00		 mov	 QWORD PTR [rcx+4936], rax
  0055b	eb 24		 jmp	 SHORT $LN19@pgmtrace_c
$LN18@pgmtrace_c:

; 6652 :     else
; 6653 :         sysblk.pgminttr |=  rupt_mask;

  0055d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00564	48 8b 4c 24 70	 mov	 rcx, QWORD PTR rupt_mask$[rsp]
  00569	48 8b 80 48 13
	00 00		 mov	 rax, QWORD PTR [rax+4936]
  00570	48 0b c1	 or	 rax, rcx
  00573	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0057a	48 89 81 48 13
	00 00		 mov	 QWORD PTR [rcx+4936], rax
$LN19@pgmtrace_c:

; 6654 : 
; 6655 :     /* Clear the ostailor settings flag if it's now inaccurate */
; 6656 :     if (sysblk.pgminttr != prev_sysblk_pgminttr)

  00581	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00588	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR prev_sysblk_pgminttr$[rsp]
  00590	48 39 88 48 13
	00 00		 cmp	 QWORD PTR [rax+4936], rcx
  00597	74 11		 je	 SHORT $LN20@pgmtrace_c

; 6657 :         sysblk.ostailor = 0;

  00599	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  005a0	c7 80 50 13 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4944], 0
$LN20@pgmtrace_c:

; 6658 : 
; 6659 :     return 0;

  005aa	33 c0		 xor	 eax, eax
$LN1@pgmtrace_c:
$LN21@pgmtrace_c:

; 6660 : }

  005ac	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  005b4	48 33 cc	 xor	 rcx, rsp
  005b7	e8 00 00 00 00	 call	 __security_check_cookie
  005bc	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  005c3	c3		 ret	 0
pgmtrace_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
lcss$ = 64
newlcss$ = 68
newdevn$ = 72
devnum$ = 76
rc$ = 80
tv66 = 88
argc$ = 112
argv$ = 120
cmdline$ = 128
define_cmd PROC

; 6549 : {

$LN10:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@define_cmd:

; 6550 : U16  devnum, newdevn;
; 6551 : U16 lcss,newlcss;
; 6552 : int rc;
; 6553 : 
; 6554 :     UNREFERENCED(cmdline);

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@define_cmd

; 6555 : 
; 6556 :     if (argc < 3)

  00018	83 7c 24 70 03	 cmp	 DWORD PTR argc$[rsp], 3
  0001d	7d 72		 jge	 SHORT $LN5@define_cmd

; 6557 :     {
; 6558 :         WRMSG(HHC02202, "E", argv[0] );

  0001f	b8 08 00 00 00	 mov	 eax, 8
  00024	48 6b c0 00	 imul	 rax, rax, 0
  00028	48 89 44 24 58	 mov	 QWORD PTR tv66[rsp], rax
  0002d	b9 01 00 00 00	 mov	 ecx, 1
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00038	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  0003d	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv66[rsp]
  00042	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00046	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209508
  00052	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209509
  0005e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00063	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00068	41 b9 03 00 00
	00		 mov	 r9d, 3
  0006e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209510
  00075	ba 9e 19 00 00	 mov	 edx, 6558		; 0000199eH
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209511
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6559 :         return -1;

  00087	b8 ff ff ff ff	 mov	 eax, -1
  0008c	e9 e2 00 00 00	 jmp	 $LN1@define_cmd
$LN5@define_cmd:

; 6560 :     }
; 6561 : 
; 6562 :     rc=parse_single_devnum(argv[1],&lcss,&devnum);

  00091	b8 08 00 00 00	 mov	 eax, 8
  00096	48 6b c0 01	 imul	 rax, rax, 1
  0009a	4c 8d 44 24 4c	 lea	 r8, QWORD PTR devnum$[rsp]
  0009f	48 8d 54 24 40	 lea	 rdx, QWORD PTR lcss$[rsp]
  000a4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  000a9	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000ad	e8 00 00 00 00	 call	 parse_single_devnum
  000b2	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 6563 :     if ( rc < 0 )

  000b6	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  000bb	7d 0a		 jge	 SHORT $LN6@define_cmd

; 6564 :     {
; 6565 :         return -1;

  000bd	b8 ff ff ff ff	 mov	 eax, -1
  000c2	e9 ac 00 00 00	 jmp	 $LN1@define_cmd
$LN6@define_cmd:

; 6566 :     }
; 6567 :     rc=parse_single_devnum(argv[2],&newlcss,&newdevn);

  000c7	b8 08 00 00 00	 mov	 eax, 8
  000cc	48 6b c0 02	 imul	 rax, rax, 2
  000d0	4c 8d 44 24 48	 lea	 r8, QWORD PTR newdevn$[rsp]
  000d5	48 8d 54 24 44	 lea	 rdx, QWORD PTR newlcss$[rsp]
  000da	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  000df	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000e3	e8 00 00 00 00	 call	 parse_single_devnum
  000e8	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 6568 :     if (rc<0)

  000ec	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  000f1	7d 07		 jge	 SHORT $LN7@define_cmd

; 6569 :     {
; 6570 :         return -1;

  000f3	b8 ff ff ff ff	 mov	 eax, -1
  000f8	eb 79		 jmp	 SHORT $LN1@define_cmd
$LN7@define_cmd:

; 6571 :     }
; 6572 :     if ( lcss != newlcss )

  000fa	0f b7 44 24 40	 movzx	 eax, WORD PTR lcss$[rsp]
  000ff	0f b7 4c 24 44	 movzx	 ecx, WORD PTR newlcss$[rsp]
  00104	3b c1		 cmp	 eax, ecx
  00106	74 4e		 je	 SHORT $LN8@define_cmd

; 6573 :     {
; 6574 :         WRMSG(HHC02238, "E");

  00108	b9 01 00 00 00	 mov	 ecx, 1
  0010d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209515
  0011a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0011f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209516
  00126	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0012b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00130	41 b9 03 00 00
	00		 mov	 r9d, 3
  00136	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209517
  0013d	ba ae 19 00 00	 mov	 edx, 6574		; 000019aeH
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209518
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6575 :         return -1;

  0014f	b8 ff ff ff ff	 mov	 eax, -1
  00154	eb 1d		 jmp	 SHORT $LN1@define_cmd
$LN8@define_cmd:

; 6576 :     }
; 6577 : 
; 6578 :     rc = define_device (lcss, devnum, newdevn);

  00156	44 0f b7 44 24
	48		 movzx	 r8d, WORD PTR newdevn$[rsp]
  0015c	0f b7 54 24 4c	 movzx	 edx, WORD PTR devnum$[rsp]
  00161	0f b7 4c 24 40	 movzx	 ecx, WORD PTR lcss$[rsp]
  00166	e8 00 00 00 00	 call	 define_device
  0016b	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 6579 : 
; 6580 :     return rc;

  0016f	8b 44 24 50	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@define_cmd:

; 6581 : }

  00173	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00177	c3		 ret	 0
define_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
intlock_needed$ = 80
force$ = 81
lcss$ = 84
devnum$ = 88
i$1 = 92
dev$ = 96
rc$ = 104
tv86 = 108
tv146 = 112
tv148 = 116
tv182 = 120
tv184 = 124
tv217 = 128
tv219 = 132
group$2 = 136
memdev$3 = 144
tv90 = 152
argc$ = 176
argv$ = 184
cmdline$ = 192
detach_cmd PROC

; 6432 : {

$LN30:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 6433 :     DEVBLK  *dev;
; 6434 :     U16      lcss, devnum;
; 6435 :     int      rc;
; 6436 :     bool     force           = false;

  00015	c6 44 24 51 00	 mov	 BYTE PTR force$[rsp], 0

; 6437 :     bool     intlock_needed  = false;

  0001a	c6 44 24 50 00	 mov	 BYTE PTR intlock_needed$[rsp], 0
$LN4@detach_cmd:

; 6438 : 
; 6439 :     UPPER_ARGV_0( argv );

  0001f	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00028	74 47		 je	 SHORT $LN11@detach_cmd
  0002a	b8 08 00 00 00	 mov	 eax, 8
  0002f	48 6b c0 00	 imul	 rax, rax, 0
  00033	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0003b	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00040	74 2f		 je	 SHORT $LN11@detach_cmd
  00042	b8 08 00 00 00	 mov	 eax, 8
  00047	48 6b c0 00	 imul	 rax, rax, 0
  0004b	b9 08 00 00 00	 mov	 ecx, 8
  00050	48 6b c9 00	 imul	 rcx, rcx, 0
  00054	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0005c	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00060	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00068	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0006c	e8 00 00 00 00	 call	 strupper
$LN11@detach_cmd:
  00071	33 c0		 xor	 eax, eax
  00073	85 c0		 test	 eax, eax
  00075	75 a8		 jne	 SHORT $LN4@detach_cmd
$LN7@detach_cmd:

; 6440 :     UNREFERENCED( cmdline );

  00077	33 c0		 xor	 eax, eax
  00079	85 c0		 test	 eax, eax
  0007b	75 fa		 jne	 SHORT $LN7@detach_cmd

; 6441 : 
; 6442 :     if (argc < 2)

  0007d	83 bc 24 b0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00085	7d 0f		 jge	 SHORT $LN12@detach_cmd

; 6443 :     {
; 6444 :         missing_devnum();

  00087	e8 00 00 00 00	 call	 missing_devnum

; 6445 :         return -1;

  0008c	b8 ff ff ff ff	 mov	 eax, -1
  00091	e9 47 04 00 00	 jmp	 $LN1@detach_cmd
$LN12@detach_cmd:

; 6446 :     }
; 6447 : 
; 6448 :     /* The 'FORCE' option allows busy devices to be detached.
; 6449 :        PLEASE NOTE that doing so is inherently DANGEROUS and
; 6450 :        can easily cause Hercules to CRASH!
; 6451 :     */
; 6452 :     if (argc > 2)

  00096	83 bc 24 b0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0009e	0f 8e d4 00 00
	00		 jle	 $LN13@detach_cmd

; 6453 :     {
; 6454 :         if (argc > 3 || !(force = CMD( argv[2], FORCE, 5 )))

  000a4	83 bc 24 b0 00
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  000ac	7f 4f		 jg	 SHORT $LN15@detach_cmd
  000ae	b8 08 00 00 00	 mov	 eax, 8
  000b3	48 6b c0 02	 imul	 rax, rax, 2
  000b7	41 b8 05 00 00
	00		 mov	 r8d, 5
  000bd	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000c5	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209454
  000d0	e8 00 00 00 00	 call	 strcaseabbrev
  000d5	85 c0		 test	 eax, eax
  000d7	75 0a		 jne	 SHORT $LN28@detach_cmd
  000d9	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv86[rsp], 0
  000e1	eb 08		 jmp	 SHORT $LN29@detach_cmd
$LN28@detach_cmd:
  000e3	c7 44 24 6c 01
	00 00 00	 mov	 DWORD PTR tv86[rsp], 1
$LN29@detach_cmd:
  000eb	0f b6 44 24 6c	 movzx	 eax, BYTE PTR tv86[rsp]
  000f0	88 44 24 51	 mov	 BYTE PTR force$[rsp], al
  000f4	0f b6 44 24 51	 movzx	 eax, BYTE PTR force$[rsp]
  000f9	85 c0		 test	 eax, eax
  000fb	75 7b		 jne	 SHORT $LN14@detach_cmd
$LN15@detach_cmd:

; 6455 :         {
; 6456 :             // "Invalid command usage. Type 'help %s' for assistance."
; 6457 :             WRMSG( HHC02299, "E", argv[0] );

  000fd	b8 08 00 00 00	 mov	 eax, 8
  00102	48 6b c0 00	 imul	 rax, rax, 0
  00106	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv90[rsp], rax
  0010e	b9 01 00 00 00	 mov	 ecx, 1
  00113	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00119	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00121	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR tv90[rsp]
  00129	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0012d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00132	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209455
  00139	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0013e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209456
  00145	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0014a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00155	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209457
  0015c	ba 39 19 00 00	 mov	 edx, 6457		; 00001939H
  00161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209458
  00168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6458 :             return -1;

  0016e	b8 ff ff ff ff	 mov	 eax, -1
  00173	e9 65 03 00 00	 jmp	 $LN1@detach_cmd
$LN14@detach_cmd:
$LN13@detach_cmd:

; 6459 :         }
; 6460 :     }
; 6461 : 
; 6462 :     if ((rc = parse_single_devnum( argv[1], &lcss, &devnum )) != 0)

  00178	b8 08 00 00 00	 mov	 eax, 8
  0017d	48 6b c0 01	 imul	 rax, rax, 1
  00181	4c 8d 44 24 58	 lea	 r8, QWORD PTR devnum$[rsp]
  00186	48 8d 54 24 54	 lea	 rdx, QWORD PTR lcss$[rsp]
  0018b	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00193	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00197	e8 00 00 00 00	 call	 parse_single_devnum
  0019c	89 44 24 68	 mov	 DWORD PTR rc$[rsp], eax
  001a0	83 7c 24 68 00	 cmp	 DWORD PTR rc$[rsp], 0
  001a5	74 0a		 je	 SHORT $LN16@detach_cmd

; 6463 :         return -1;  // (error message already issued)

  001a7	b8 ff ff ff ff	 mov	 eax, -1
  001ac	e9 2c 03 00 00	 jmp	 $LN1@detach_cmd
$LN16@detach_cmd:

; 6464 : 
; 6465 :     /* Find the device block */
; 6466 :     if (!(dev = find_device_by_devnum( lcss, devnum )))

  001b1	0f b7 54 24 58	 movzx	 edx, WORD PTR devnum$[rsp]
  001b6	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$[rsp]
  001bb	e8 00 00 00 00	 call	 find_device_by_devnum
  001c0	48 89 44 24 60	 mov	 QWORD PTR dev$[rsp], rax
  001c5	48 83 7c 24 60
	00		 cmp	 QWORD PTR dev$[rsp], 0
  001cb	75 7f		 jne	 SHORT $LN17@detach_cmd

; 6467 :     {
; 6468 :         // "%1d:%04X %s does not exist"
; 6469 :         WRMSG( HHC01464, "E", lcss, devnum, "device" );

  001cd	0f b7 44 24 58	 movzx	 eax, WORD PTR devnum$[rsp]
  001d2	89 44 24 70	 mov	 DWORD PTR tv146[rsp], eax
  001d6	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$[rsp]
  001db	89 4c 24 74	 mov	 DWORD PTR tv148[rsp], ecx
  001df	b9 01 00 00 00	 mov	 ecx, 1
  001e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209461
  001f1	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  001f6	8b 4c 24 70	 mov	 ecx, DWORD PTR tv146[rsp]
  001fa	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001fe	8b 4c 24 74	 mov	 ecx, DWORD PTR tv148[rsp]
  00202	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00206	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209462
  0020d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00212	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209463
  00219	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0021e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00223	41 b9 03 00 00
	00		 mov	 r9d, 3
  00229	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209464
  00230	ba 45 19 00 00	 mov	 edx, 6469		; 00001945H
  00235	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209465
  0023c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6470 :         return -1;

  00242	b8 ff ff ff ff	 mov	 eax, -1
  00247	e9 91 02 00 00	 jmp	 $LN1@detach_cmd
$LN17@detach_cmd:

; 6471 :     }
; 6472 : 
; 6473 :     /* PROGRAMMING NOTE: intlock needs to be held in order to generate
; 6474 :        a channel report, but since dev->lock is also obtained as part
; 6475 :        of normal detach processing, we must obtain intlock FIRST to
; 6476 :        prevent a deadlock with channel.c 'execute_ccw_chain'. (The two
; 6477 :        locks MUST be obtained in the same sequence: intlock FIRST and
; 6478 :        then dev->lock afterwards.)
; 6479 :     */
; 6480 :     /* Determine if a channel report will need to be generated */
; 6481 : #if defined( _FEATURE_CHANNEL_SUBSYSTEM )
; 6482 : #if defined( _370 )
; 6483 :     if (sysblk.arch_mode != ARCH_370_IDX)

  0024c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00253	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [rax+136], 0
  0025a	74 05		 je	 SHORT $LN18@detach_cmd

; 6484 : #endif
; 6485 :         intlock_needed = true;

  0025c	c6 44 24 50 01	 mov	 BYTE PTR intlock_needed$[rsp], 1
$LN18@detach_cmd:

; 6486 : #endif
; 6487 : 
; 6488 :     if (intlock_needed)

  00261	0f b6 44 24 50	 movzx	 eax, BYTE PTR intlock_needed$[rsp]
  00266	85 c0		 test	 eax, eax
  00268	74 0e		 je	 SHORT $LN19@detach_cmd

; 6489 :         OBTAIN_INTLOCK( NULL );

  0026a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209468
  00271	33 c9		 xor	 ecx, ecx
  00273	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock
$LN19@detach_cmd:

; 6490 : 
; 6491 :     /* Don't allow detaching devices which are still busy doing I/O.
; 6492 :        For grouped devices this includes *ANY* device in the group
; 6493 :        since all devices in the group will also be detached.
; 6494 :     */
; 6495 :     if (!force)

  00278	0f b6 44 24 51	 movzx	 eax, BYTE PTR force$[rsp]
  0027d	85 c0		 test	 eax, eax
  0027f	0f 85 2a 02 00
	00		 jne	 $LN20@detach_cmd

; 6496 :     {
; 6497 :         obtain_lock( &dev->lock );

  00285	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0028a	48 83 c0 38	 add	 rax, 56			; 00000038H
  0028e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209470
  00295	48 8b c8	 mov	 rcx, rax
  00298	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 6498 :         {
; 6499 :             /* Check if specified device is busy */
; 6500 :             if (dev->busy)

  0029e	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  002a3	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  002a9	c1 e8 13	 shr	 eax, 19
  002ac	83 e0 01	 and	 eax, 1
  002af	85 c0		 test	 eax, eax
  002b1	0f 84 a7 00 00
	00		 je	 $LN21@detach_cmd

; 6501 :             {
; 6502 :                 release_lock( &dev->lock );

  002b7	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  002bc	48 83 c0 38	 add	 rax, 56			; 00000038H
  002c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209472
  002c7	48 8b c8	 mov	 rcx, rax
  002ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 6503 :                 if (intlock_needed)

  002d0	0f b6 44 24 50	 movzx	 eax, BYTE PTR intlock_needed$[rsp]
  002d5	85 c0		 test	 eax, eax
  002d7	74 0e		 je	 SHORT $LN22@detach_cmd

; 6504 :                     RELEASE_INTLOCK( NULL );

  002d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209474
  002e0	33 c9		 xor	 ecx, ecx
  002e2	e8 00 00 00 00	 call	 Release_Interrupt_Lock
$LN22@detach_cmd:

; 6505 :                 // "%1d:%04X busy or interrupt pending"
; 6506 :                 WRMSG( HHC02231, "E", lcss, dev->devnum );

  002e7	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  002ec	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  002f0	89 44 24 78	 mov	 DWORD PTR tv182[rsp], eax
  002f4	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$[rsp]
  002f9	89 4c 24 7c	 mov	 DWORD PTR tv184[rsp], ecx
  002fd	b9 01 00 00 00	 mov	 ecx, 1
  00302	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00308	8b 4c 24 78	 mov	 ecx, DWORD PTR tv182[rsp]
  0030c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00310	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv184[rsp]
  00314	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00318	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209475
  0031f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00324	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209476
  0032b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00330	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00335	41 b9 03 00 00
	00		 mov	 r9d, 3
  0033b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209477
  00342	ba 6a 19 00 00	 mov	 edx, 6506		; 0000196aH
  00347	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209478
  0034e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6507 :                 return -1;

  00354	b8 ff ff ff ff	 mov	 eax, -1
  00359	e9 7f 01 00 00	 jmp	 $LN1@detach_cmd
$LN21@detach_cmd:

; 6508 :             }
; 6509 :             /* Check if any device in the group is busy */
; 6510 :             if (dev->group)

  0035e	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  00363	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00368	0f 84 28 01 00
	00		 je	 $LN23@detach_cmd

; 6511 :             {
; 6512 :                 DEVGRP*  group    = dev->group;

  0036e	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  00373	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00377	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR group$2[rsp], rax

; 6513 :                 DEVBLK*  memdev;
; 6514 :                 int  i;
; 6515 : 
; 6516 :                 for (i=0; i < group->acount; i++)

  0037f	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  00387	eb 0a		 jmp	 SHORT $LN10@detach_cmd
$LN8@detach_cmd:
  00389	8b 44 24 5c	 mov	 eax, DWORD PTR i$1[rsp]
  0038d	ff c0		 inc	 eax
  0038f	89 44 24 5c	 mov	 DWORD PTR i$1[rsp], eax
$LN10@detach_cmd:
  00393	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR group$2[rsp]
  0039b	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0039e	39 44 24 5c	 cmp	 DWORD PTR i$1[rsp], eax
  003a2	0f 8d ee 00 00
	00		 jge	 $LN9@detach_cmd

; 6517 :                 {
; 6518 :                     if ((memdev = group->memdev[i])->busy)

  003a8	48 63 44 24 5c	 movsxd	 rax, DWORD PTR i$1[rsp]
  003ad	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR group$2[rsp]
  003b5	48 8b 44 c1 10	 mov	 rax, QWORD PTR [rcx+rax*8+16]
  003ba	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR memdev$3[rsp], rax
  003c2	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR memdev$3[rsp]
  003ca	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  003d0	c1 e8 13	 shr	 eax, 19
  003d3	83 e0 01	 and	 eax, 1
  003d6	85 c0		 test	 eax, eax
  003d8	0f 84 b3 00 00
	00		 je	 $LN24@detach_cmd

; 6519 :                     {
; 6520 :                         release_lock( &dev->lock );

  003de	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  003e3	48 83 c0 38	 add	 rax, 56			; 00000038H
  003e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209481
  003ee	48 8b c8	 mov	 rcx, rax
  003f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 6521 :                         if (intlock_needed)

  003f7	0f b6 44 24 50	 movzx	 eax, BYTE PTR intlock_needed$[rsp]
  003fc	85 c0		 test	 eax, eax
  003fe	74 0e		 je	 SHORT $LN25@detach_cmd

; 6522 :                             RELEASE_INTLOCK( NULL );

  00400	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209483
  00407	33 c9		 xor	 ecx, ecx
  00409	e8 00 00 00 00	 call	 Release_Interrupt_Lock
$LN25@detach_cmd:

; 6523 :                         // "%1d:%04X busy or interrupt pending"
; 6524 :                         WRMSG( HHC02231, "E", lcss, memdev->devnum );

  0040e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR memdev$3[rsp]
  00416	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0041a	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv217[rsp], eax
  00421	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$[rsp]
  00426	89 8c 24 84 00
	00 00		 mov	 DWORD PTR tv219[rsp], ecx
  0042d	b9 01 00 00 00	 mov	 ecx, 1
  00432	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00438	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv217[rsp]
  0043f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00443	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv219[rsp]
  0044a	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0044e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209484
  00455	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0045a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209485
  00461	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00466	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0046b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00471	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209486
  00478	ba 7c 19 00 00	 mov	 edx, 6524		; 0000197cH
  0047d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209487
  00484	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6525 :                         return -1;

  0048a	b8 ff ff ff ff	 mov	 eax, -1
  0048f	eb 4c		 jmp	 SHORT $LN1@detach_cmd
$LN24@detach_cmd:

; 6526 :                     }
; 6527 :                 }

  00491	e9 f3 fe ff ff	 jmp	 $LN8@detach_cmd
$LN9@detach_cmd:
$LN23@detach_cmd:

; 6528 :             }
; 6529 :         }
; 6530 :         release_lock( &dev->lock );

  00496	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0049b	48 83 c0 38	 add	 rax, 56			; 00000038H
  0049f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209488
  004a6	48 8b c8	 mov	 rcx, rax
  004a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock
$LN20@detach_cmd:

; 6531 :     }
; 6532 : 
; 6533 :     /* Note: 'detach_device' will call 'detach_devblk' which obtains
; 6534 :        dev->lock and then issues the channel report if it's needed
; 6535 :        (which requires that intlock be held).
; 6536 :     */
; 6537 :     rc = detach_device( lcss, devnum );

  004af	0f b7 54 24 58	 movzx	 edx, WORD PTR devnum$[rsp]
  004b4	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$[rsp]
  004b9	e8 00 00 00 00	 call	 detach_device
  004be	89 44 24 68	 mov	 DWORD PTR rc$[rsp], eax

; 6538 : 
; 6539 :     if (intlock_needed)

  004c2	0f b6 44 24 50	 movzx	 eax, BYTE PTR intlock_needed$[rsp]
  004c7	85 c0		 test	 eax, eax
  004c9	74 0e		 je	 SHORT $LN26@detach_cmd

; 6540 :         RELEASE_INTLOCK( NULL );

  004cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209490
  004d2	33 c9		 xor	 ecx, ecx
  004d4	e8 00 00 00 00	 call	 Release_Interrupt_Lock
$LN26@detach_cmd:

; 6541 : 
; 6542 :     return rc;

  004d9	8b 44 24 68	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@detach_cmd:

; 6543 : }

  004dd	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  004e4	c3		 ret	 0
detach_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
rc$ = 64
tv66 = 72
tv87 = 80
argc$ = 112
argv$ = 120
cmdline$ = 128
attach_cmd PROC

; 6413 : {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@attach_cmd:

; 6414 :     int rc;
; 6415 : 
; 6416 :     UNREFERENCED(cmdline);

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@attach_cmd

; 6417 : 
; 6418 :     if (argc < 3)

  00018	83 7c 24 70 03	 cmp	 DWORD PTR argc$[rsp], 3
  0001d	7d 6f		 jge	 SHORT $LN5@attach_cmd

; 6419 :     {
; 6420 :         WRMSG(HHC02202, "E", argv[0] );

  0001f	b8 08 00 00 00	 mov	 eax, 8
  00024	48 6b c0 00	 imul	 rax, rax, 0
  00028	48 89 44 24 48	 mov	 QWORD PTR tv66[rsp], rax
  0002d	b9 01 00 00 00	 mov	 ecx, 1
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00038	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  0003d	48 8b 54 24 48	 mov	 rdx, QWORD PTR tv66[rsp]
  00042	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00046	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209415
  00052	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209416
  0005e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00063	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00068	41 b9 03 00 00
	00		 mov	 r9d, 3
  0006e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209417
  00075	ba 14 19 00 00	 mov	 edx, 6420		; 00001914H
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209418
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6421 :         return -1;

  00087	b8 ff ff ff ff	 mov	 eax, -1
  0008c	eb 5d		 jmp	 SHORT $LN1@attach_cmd
$LN5@attach_cmd:

; 6422 :     }
; 6423 :     rc = parse_and_attach_devices(argv[1],argv[2],argc-3,&argv[3]);

  0008e	b8 08 00 00 00	 mov	 eax, 8
  00093	48 6b c0 03	 imul	 rax, rax, 3
  00097	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  0009c	48 03 c8	 add	 rcx, rax
  0009f	48 8b c1	 mov	 rax, rcx
  000a2	8b 4c 24 70	 mov	 ecx, DWORD PTR argc$[rsp]
  000a6	83 e9 03	 sub	 ecx, 3
  000a9	ba 08 00 00 00	 mov	 edx, 8
  000ae	48 6b d2 02	 imul	 rdx, rdx, 2
  000b2	41 b8 08 00 00
	00		 mov	 r8d, 8
  000b8	4d 6b c0 01	 imul	 r8, r8, 1
  000bc	4c 89 44 24 50	 mov	 QWORD PTR tv87[rsp], r8
  000c1	4c 8b c8	 mov	 r9, rax
  000c4	44 8b c1	 mov	 r8d, ecx
  000c7	48 8b 44 24 78	 mov	 rax, QWORD PTR argv$[rsp]
  000cc	48 8b 14 10	 mov	 rdx, QWORD PTR [rax+rdx]
  000d0	48 8b 44 24 78	 mov	 rax, QWORD PTR argv$[rsp]
  000d5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv87[rsp]
  000da	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  000de	e8 00 00 00 00	 call	 parse_and_attach_devices
  000e3	89 44 24 40	 mov	 DWORD PTR rc$[rsp], eax

; 6424 : 
; 6425 :     return rc;

  000e7	8b 44 24 40	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@attach_cmd:

; 6426 : }

  000eb	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000ef	c3		 ret	 0
attach_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
len$ = 80
dev$ = 88
j$ = 96
bTooMany$ = 104
pDevBlkPtr$ = 112
nDevCount$ = 120
ssid$ = 128
i$ = 136
orig_pDevBlkPtrs$ = 144
tv255 = 152
tv261 = 156
tv322 = 160
tv328 = 164
tv429 = 168
tv435 = 172
tv496 = 176
tv530 = 180
tv536 = 184
num$ = 192
devncount$ = 200
qdclass$ = 208
devclass$ = 216
$T1 = 224
dnd$ = 232
tv66 = 248
tv84 = 256
tv204 = 264
cbuf$ = 272
buf$ = 304
iobuf$ = 432
__$ArrayPad$ = 688
argc$ = 720
argv$ = 728
cmdline$ = 736
qd_cmd	PROC

; 6153 : {

$LN94:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec c8 02
	00 00		 sub	 rsp, 712		; 000002c8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 6154 :     DEVBLK*   dev;
; 6155 :     DEVBLK**  pDevBlkPtr;
; 6156 :     DEVBLK**  orig_pDevBlkPtrs;
; 6157 :     size_t    devncount = 0;

  00027	48 c7 84 24 c8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR devncount$[rsp], 0

; 6158 :     size_t    nDevCount, i, j, num;
; 6159 :     int       bTooMany = 0;

  00033	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR bTooMany$[rsp], 0

; 6160 :     int       len = 0;

  0003b	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR len$[rsp], 0

; 6161 :     U16       ssid = 0;

  00043	33 c0		 xor	 eax, eax
  00045	66 89 84 24 80
	00 00 00	 mov	 WORD PTR ssid$[rsp], ax

; 6162 :     BYTE      iobuf[256];
; 6163 :     BYTE      cbuf[17];
; 6164 :     char      buf[128];
; 6165 : 
; 6166 :     DEVNUMSDESC  dnd;
; 6167 :     char*        qdclass  = NULL;

  0004d	48 c7 84 24 d0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR qdclass$[rsp], 0

; 6168 :     char*        devclass = NULL;

  00059	48 c7 84 24 d8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR devclass$[rsp], 0
$LN4@qd_cmd:

; 6169 : 
; 6170 :     UNREFERENCED( cmdline );

  00065	33 c0		 xor	 eax, eax
  00067	85 c0		 test	 eax, eax
  00069	75 fa		 jne	 SHORT $LN4@qd_cmd

; 6171 : 
; 6172 :     if (argc > 2)

  0006b	83 bc 24 d0 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00073	7e 7b		 jle	 SHORT $LN32@qd_cmd

; 6173 :     {
; 6174 :         // "Invalid command usage. Type 'help %s' for assistance."
; 6175 :         WRMSG( HHC02299, "E", argv[0] );

  00075	b8 08 00 00 00	 mov	 eax, 8
  0007a	48 6b c0 00	 imul	 rax, rax, 0
  0007e	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv66[rsp], rax
  00086	b9 01 00 00 00	 mov	 ecx, 1
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00091	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00099	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR tv66[rsp]
  000a1	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000a5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209291
  000b1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209292
  000bd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c7	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209293
  000d4	ba 1f 18 00 00	 mov	 edx, 6175		; 0000181fH
  000d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209294
  000e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6176 :         return -1;

  000e6	b8 ff ff ff ff	 mov	 eax, -1
  000eb	e9 dc 0f 00 00	 jmp	 $LN1@qd_cmd
$LN32@qd_cmd:

; 6177 :     }
; 6178 : 
; 6179 :     // Allocate work area
; 6180 : 
; 6181 :     if (!(orig_pDevBlkPtrs = malloc( sizeof( DEVBLK* ) * MAX_DEVLIST_DEVICES )))

  000f0	b9 00 00 08 00	 mov	 ecx, 524288		; 00080000H
  000f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  000fb	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR orig_pDevBlkPtrs$[rsp], rax
  00103	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR orig_pDevBlkPtrs$[rsp], 0
  0010c	0f 85 a1 00 00
	00		 jne	 $LN33@qd_cmd

; 6182 :     {
; 6183 :         // "Error in function %s: %s"
; 6184 :         MSGBUF( buf, "malloc(%d)", (int)( sizeof( DEVBLK* ) * MAX_DEVLIST_DEVICES ));

  00112	41 b9 00 00 08
	00		 mov	 r9d, 524288		; 00080000H
  00118	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209296
  0011f	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00124	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0012c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 6185 :         WRMSG( HHC02219, "E", buf, strerror( errno ));

  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00138	8b 08		 mov	 ecx, DWORD PTR [rax]
  0013a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00140	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv84[rsp], rax
  00148	b9 01 00 00 00	 mov	 ecx, 1
  0014d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00153	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv84[rsp]
  0015b	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00160	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00168	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0016d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209297
  00174	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00179	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209298
  00180	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00185	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0018a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00190	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209299
  00197	ba 29 18 00 00	 mov	 edx, 6185		; 00001829H
  0019c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209300
  001a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6186 :         return -1;

  001a9	b8 ff ff ff ff	 mov	 eax, -1
  001ae	e9 19 0f 00 00	 jmp	 $LN1@qd_cmd
$LN33@qd_cmd:

; 6187 :     }
; 6188 : 
; 6189 :     nDevCount = 0;

  001b3	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR nDevCount$[rsp], 0

; 6190 :     pDevBlkPtr = orig_pDevBlkPtrs;

  001bc	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR orig_pDevBlkPtrs$[rsp]
  001c4	48 89 44 24 70	 mov	 QWORD PTR pDevBlkPtr$[rsp], rax

; 6191 : 
; 6192 :     if (argc == 2)

  001c9	83 bc 24 d0 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  001d1	0f 85 38 03 00
	00		 jne	 $LN34@qd_cmd

; 6193 :     {
; 6194 :         if (is_devclass_name( argv[1] ))

  001d7	b8 08 00 00 00	 mov	 eax, 8
  001dc	48 6b c0 01	 imul	 rax, rax, 1
  001e0	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001e8	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  001ec	e8 00 00 00 00	 call	 is_devclass_name
  001f1	0f b6 c0	 movzx	 eax, al
  001f4	85 c0		 test	 eax, eax
  001f6	0f 84 eb 00 00
	00		 je	 $LN36@qd_cmd

; 6195 :         {
; 6196 :             qdclass = argv[1];

  001fc	b8 08 00 00 00	 mov	 eax, 8
  00201	48 6b c0 01	 imul	 rax, rax, 1
  00205	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0020d	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00211	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR qdclass$[rsp], rax

; 6197 : 
; 6198 :             // Gather requested devices by class
; 6199 : 
; 6200 :             for (dev = sysblk.firstdev; dev && !bTooMany; dev = dev->nextdev)

  00219	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00220	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  00227	48 89 44 24 58	 mov	 QWORD PTR dev$[rsp], rax
  0022c	eb 0e		 jmp	 SHORT $LN7@qd_cmd
$LN5@qd_cmd:
  0022e	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00233	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00237	48 89 44 24 58	 mov	 QWORD PTR dev$[rsp], rax
$LN7@qd_cmd:
  0023c	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00242	0f 84 9a 00 00
	00		 je	 $LN6@qd_cmd
  00248	83 7c 24 68 00	 cmp	 DWORD PTR bTooMany$[rsp], 0
  0024d	0f 85 8f 00 00
	00		 jne	 $LN6@qd_cmd

; 6201 :             {
; 6202 :                 if (!dev->allocated)

  00253	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00258	83 78 40 00	 cmp	 DWORD PTR [rax+64], 0
  0025c	75 02		 jne	 SHORT $LN38@qd_cmd

; 6203 :                     continue;

  0025e	eb ce		 jmp	 SHORT $LN5@qd_cmd
$LN38@qd_cmd:

; 6204 : 
; 6205 :                 dev->hnd->query( dev, &devclass, 0, NULL );

  00260	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00265	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  0026c	45 33 c9	 xor	 r9d, r9d
  0026f	45 33 c0	 xor	 r8d, r8d
  00272	48 8d 94 24 d8
	00 00 00	 lea	 rdx, QWORD PTR devclass$[rsp]
  0027a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  0027f	ff 50 18	 call	 QWORD PTR [rax+24]

; 6206 : 
; 6207 :                 if (strcasecmp( devclass, qdclass ) != 0)

  00282	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR qdclass$[rsp]
  0028a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR devclass$[rsp]
  00292	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00298	85 c0		 test	 eax, eax
  0029a	74 02		 je	 SHORT $LN39@qd_cmd

; 6208 :                     continue;

  0029c	eb 90		 jmp	 SHORT $LN5@qd_cmd
$LN39@qd_cmd:

; 6209 : 
; 6210 :                 if (nDevCount < MAX_DEVLIST_DEVICES)

  0029e	48 81 7c 24 78
	00 00 01 00	 cmp	 QWORD PTR nDevCount$[rsp], 65536 ; 00010000H
  002a7	73 2a		 jae	 SHORT $LN40@qd_cmd

; 6211 :                 {
; 6212 :                     *pDevBlkPtr = dev;      // (save ptr to DEVBLK)

  002a9	48 8b 44 24 70	 mov	 rax, QWORD PTR pDevBlkPtr$[rsp]
  002ae	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  002b3	48 89 08	 mov	 QWORD PTR [rax], rcx

; 6213 :                     nDevCount++;            // (count array entries)

  002b6	48 8b 44 24 78	 mov	 rax, QWORD PTR nDevCount$[rsp]
  002bb	48 ff c0	 inc	 rax
  002be	48 89 44 24 78	 mov	 QWORD PTR nDevCount$[rsp], rax

; 6214 :                     pDevBlkPtr++;           // (bump to next entry)

  002c3	48 8b 44 24 70	 mov	 rax, QWORD PTR pDevBlkPtr$[rsp]
  002c8	48 83 c0 08	 add	 rax, 8
  002cc	48 89 44 24 70	 mov	 QWORD PTR pDevBlkPtr$[rsp], rax

; 6215 :                 }

  002d1	eb 0a		 jmp	 SHORT $LN41@qd_cmd
$LN40@qd_cmd:

; 6216 :                 else
; 6217 :                 {
; 6218 :                     bTooMany = 1;           // (no more room)

  002d3	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR bTooMany$[rsp], 1

; 6219 :                     break;                  // (no more room)

  002db	eb 05		 jmp	 SHORT $LN6@qd_cmd
$LN41@qd_cmd:

; 6220 :                 }
; 6221 :             }

  002dd	e9 4c ff ff ff	 jmp	 $LN5@qd_cmd
$LN6@qd_cmd:

; 6222 :         }

  002e2	e9 23 02 00 00	 jmp	 $LN37@qd_cmd
$LN36@qd_cmd:

; 6223 :         else if ((devncount = parse_devnums( argv[1], &dnd )) > 0)

  002e7	b8 08 00 00 00	 mov	 eax, 8
  002ec	48 6b c0 01	 imul	 rax, rax, 1
  002f0	48 8d 94 24 e8
	00 00 00	 lea	 rdx, QWORD PTR dnd$[rsp]
  002f8	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00300	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00304	e8 00 00 00 00	 call	 parse_devnums
  00309	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR devncount$[rsp], rax
  00311	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR devncount$[rsp], 0
  0031a	0f 86 61 01 00
	00		 jbe	 $LN42@qd_cmd

; 6224 :         {
; 6225 :             ssid = LCSS_TO_SSID( dnd.lcss );

  00320	0f b6 84 24 e8
	00 00 00	 movzx	 eax, BYTE PTR dnd$[rsp]
  00328	d1 e0		 shl	 eax, 1
  0032a	83 c8 01	 or	 eax, 1
  0032d	66 89 84 24 80
	00 00 00	 mov	 WORD PTR ssid$[rsp], ax

; 6226 : 
; 6227 :             // Gather requested devices by devnum(s)
; 6228 : 
; 6229 :             for (dev = sysblk.firstdev; dev && !bTooMany; dev = dev->nextdev)

  00335	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0033c	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  00343	48 89 44 24 58	 mov	 QWORD PTR dev$[rsp], rax
  00348	eb 0e		 jmp	 SHORT $LN10@qd_cmd
$LN8@qd_cmd:
  0034a	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0034f	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00353	48 89 44 24 58	 mov	 QWORD PTR dev$[rsp], rax
$LN10@qd_cmd:
  00358	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0035e	0f 84 0a 01 00
	00		 je	 $LN9@qd_cmd
  00364	83 7c 24 68 00	 cmp	 DWORD PTR bTooMany$[rsp], 0
  00369	0f 85 ff 00 00
	00		 jne	 $LN9@qd_cmd

; 6230 :             {
; 6231 :                 if (!dev->allocated)

  0036f	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00374	83 78 40 00	 cmp	 DWORD PTR [rax+64], 0
  00378	75 02		 jne	 SHORT $LN44@qd_cmd

; 6232 :                     continue;

  0037a	eb ce		 jmp	 SHORT $LN8@qd_cmd
$LN44@qd_cmd:

; 6233 : 
; 6234 :                 for (i=0; i < devncount && !bTooMany; i++)

  0037c	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  00388	eb 13		 jmp	 SHORT $LN13@qd_cmd
$LN11@qd_cmd:
  0038a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  00392	48 ff c0	 inc	 rax
  00395	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN13@qd_cmd:
  0039d	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR devncount$[rsp]
  003a5	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  003ad	0f 83 b6 00 00
	00		 jae	 $LN12@qd_cmd
  003b3	83 7c 24 68 00	 cmp	 DWORD PTR bTooMany$[rsp], 0
  003b8	0f 85 ab 00 00
	00		 jne	 $LN12@qd_cmd

; 6235 :                 {
; 6236 :                     if (1
; 6237 :                         && dev->ssid == ssid
; 6238 :                         && dev->devnum >= dnd.da[i].cuu1
; 6239 :                         && dev->devnum <= dnd.da[i].cuu2

  003be	33 c0		 xor	 eax, eax
  003c0	83 f8 01	 cmp	 eax, 1
  003c3	0f 84 9b 00 00
	00		 je	 $LN45@qd_cmd
  003c9	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  003ce	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  003d2	0f b7 8c 24 80
	00 00 00	 movzx	 ecx, WORD PTR ssid$[rsp]
  003da	3b c1		 cmp	 eax, ecx
  003dc	0f 85 82 00 00
	00		 jne	 $LN45@qd_cmd
  003e2	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  003e7	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  003eb	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR dnd$[rsp+8]
  003f3	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR i$[rsp]
  003fb	0f b7 0c 91	 movzx	 ecx, WORD PTR [rcx+rdx*4]
  003ff	3b c1		 cmp	 eax, ecx
  00401	7c 61		 jl	 SHORT $LN45@qd_cmd
  00403	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00408	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0040c	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR dnd$[rsp+8]
  00414	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR i$[rsp]
  0041c	0f b7 4c 91 02	 movzx	 ecx, WORD PTR [rcx+rdx*4+2]
  00421	3b c1		 cmp	 eax, ecx
  00423	7f 3f		 jg	 SHORT $LN45@qd_cmd

; 6240 :                     )
; 6241 :                     {
; 6242 :                         if (nDevCount < MAX_DEVLIST_DEVICES)

  00425	48 81 7c 24 78
	00 00 01 00	 cmp	 QWORD PTR nDevCount$[rsp], 65536 ; 00010000H
  0042e	73 2a		 jae	 SHORT $LN46@qd_cmd

; 6243 :                         {
; 6244 :                             *pDevBlkPtr = dev;      // (save ptr to DEVBLK)

  00430	48 8b 44 24 70	 mov	 rax, QWORD PTR pDevBlkPtr$[rsp]
  00435	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  0043a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 6245 :                             nDevCount++;            // (count array entries)

  0043d	48 8b 44 24 78	 mov	 rax, QWORD PTR nDevCount$[rsp]
  00442	48 ff c0	 inc	 rax
  00445	48 89 44 24 78	 mov	 QWORD PTR nDevCount$[rsp], rax

; 6246 :                             pDevBlkPtr++;           // (bump to next entry)

  0044a	48 8b 44 24 70	 mov	 rax, QWORD PTR pDevBlkPtr$[rsp]
  0044f	48 83 c0 08	 add	 rax, 8
  00453	48 89 44 24 70	 mov	 QWORD PTR pDevBlkPtr$[rsp], rax

; 6247 :                         }

  00458	eb 08		 jmp	 SHORT $LN47@qd_cmd
$LN46@qd_cmd:

; 6248 :                         else
; 6249 :                             bTooMany = 1;           // (no more room)

  0045a	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR bTooMany$[rsp], 1
$LN47@qd_cmd:

; 6250 :                         break;                      // (we found our device)

  00462	eb 05		 jmp	 SHORT $LN12@qd_cmd
$LN45@qd_cmd:

; 6251 :                     }
; 6252 :                 }

  00464	e9 21 ff ff ff	 jmp	 $LN11@qd_cmd
$LN12@qd_cmd:

; 6253 :             }

  00469	e9 dc fe ff ff	 jmp	 $LN8@qd_cmd
$LN9@qd_cmd:

; 6254 : 
; 6255 :             free( dnd.da );

  0046e	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR dnd$[rsp+8]
  00476	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 6256 :         }

  0047c	e9 89 00 00 00	 jmp	 $LN43@qd_cmd
$LN42@qd_cmd:

; 6257 :         else
; 6258 :         {
; 6259 :             // "Invalid command usage. Type 'help %s' for assistance."
; 6260 :             WRMSG( HHC02299, "E", argv[0] );

  00481	b8 08 00 00 00	 mov	 eax, 8
  00486	48 6b c0 00	 imul	 rax, rax, 0
  0048a	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv204[rsp], rax
  00492	b9 01 00 00 00	 mov	 ecx, 1
  00497	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0049d	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004a5	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR tv204[rsp]
  004ad	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  004b1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209315
  004bd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209316
  004c9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004ce	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004d3	41 b9 03 00 00
	00		 mov	 r9d, 3
  004d9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209317
  004e0	ba 74 18 00 00	 mov	 edx, 6260		; 00001874H
  004e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209318
  004ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6261 :             free( orig_pDevBlkPtrs );

  004f2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR orig_pDevBlkPtrs$[rsp]
  004fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 6262 :             return -1;

  00500	b8 ff ff ff ff	 mov	 eax, -1
  00505	e9 c2 0b 00 00	 jmp	 $LN1@qd_cmd
$LN43@qd_cmd:
$LN37@qd_cmd:

; 6263 :         }
; 6264 :     }

  0050a	e9 80 00 00 00	 jmp	 $LN35@qd_cmd
$LN34@qd_cmd:

; 6265 :     else
; 6266 :     {
; 6267 :         // Gather *ALL* devices
; 6268 : 
; 6269 :         for (dev = sysblk.firstdev; dev && !bTooMany; dev = dev->nextdev)

  0050f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00516	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  0051d	48 89 44 24 58	 mov	 QWORD PTR dev$[rsp], rax
  00522	eb 0e		 jmp	 SHORT $LN16@qd_cmd
$LN14@qd_cmd:
  00524	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00529	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0052d	48 89 44 24 58	 mov	 QWORD PTR dev$[rsp], rax
$LN16@qd_cmd:
  00532	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00538	74 55		 je	 SHORT $LN15@qd_cmd
  0053a	83 7c 24 68 00	 cmp	 DWORD PTR bTooMany$[rsp], 0
  0053f	75 4e		 jne	 SHORT $LN15@qd_cmd

; 6270 :         {
; 6271 :             if (!dev->allocated)

  00541	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00546	83 78 40 00	 cmp	 DWORD PTR [rax+64], 0
  0054a	75 02		 jne	 SHORT $LN48@qd_cmd

; 6272 :                 continue;

  0054c	eb d6		 jmp	 SHORT $LN14@qd_cmd
$LN48@qd_cmd:

; 6273 : 
; 6274 :             if (nDevCount < MAX_DEVLIST_DEVICES)

  0054e	48 81 7c 24 78
	00 00 01 00	 cmp	 QWORD PTR nDevCount$[rsp], 65536 ; 00010000H
  00557	73 2a		 jae	 SHORT $LN49@qd_cmd

; 6275 :             {
; 6276 :                 *pDevBlkPtr = dev;      // (save ptr to DEVBLK)

  00559	48 8b 44 24 70	 mov	 rax, QWORD PTR pDevBlkPtr$[rsp]
  0055e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  00563	48 89 08	 mov	 QWORD PTR [rax], rcx

; 6277 :                 nDevCount++;            // (count array entries)

  00566	48 8b 44 24 78	 mov	 rax, QWORD PTR nDevCount$[rsp]
  0056b	48 ff c0	 inc	 rax
  0056e	48 89 44 24 78	 mov	 QWORD PTR nDevCount$[rsp], rax

; 6278 :                 pDevBlkPtr++;           // (bump to next entry)

  00573	48 8b 44 24 70	 mov	 rax, QWORD PTR pDevBlkPtr$[rsp]
  00578	48 83 c0 08	 add	 rax, 8
  0057c	48 89 44 24 70	 mov	 QWORD PTR pDevBlkPtr$[rsp], rax

; 6279 :             }

  00581	eb 0a		 jmp	 SHORT $LN50@qd_cmd
$LN49@qd_cmd:

; 6280 :             else
; 6281 :             {
; 6282 :                 bTooMany = 1;           // (no more room)

  00583	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR bTooMany$[rsp], 1

; 6283 :                 break;                  // (no more room)

  0058b	eb 02		 jmp	 SHORT $LN15@qd_cmd
$LN50@qd_cmd:

; 6284 :             }
; 6285 :         }

  0058d	eb 95		 jmp	 SHORT $LN14@qd_cmd
$LN15@qd_cmd:
$LN35@qd_cmd:

; 6286 :     }
; 6287 : 
; 6288 :     if (!nDevCount)

  0058f	48 83 7c 24 78
	00		 cmp	 QWORD PTR nDevCount$[rsp], 0
  00595	75 5c		 jne	 SHORT $LN51@qd_cmd

; 6289 :     {
; 6290 :         // "Empty list"
; 6291 :         WRMSG( HHC02312, "W" );

  00597	b9 01 00 00 00	 mov	 ecx, 1
  0059c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209323
  005a9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209324
  005b5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005ba	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005bf	41 b9 03 00 00
	00		 mov	 r9d, 3
  005c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209325
  005cc	ba 93 18 00 00	 mov	 edx, 6291		; 00001893H
  005d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209326
  005d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6292 :         free( orig_pDevBlkPtrs );

  005de	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR orig_pDevBlkPtrs$[rsp]
  005e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 6293 :         return 0;

  005ec	33 c0		 xor	 eax, eax
  005ee	e9 d9 0a 00 00	 jmp	 $LN1@qd_cmd
$LN51@qd_cmd:

; 6294 :     }
; 6295 : 
; 6296 :     // Sort the DEVBLK pointers into ascending sequence by device number.
; 6297 : 
; 6298 :     qsort( orig_pDevBlkPtrs, nDevCount, sizeof(DEVBLK*), SortDevBlkPtrsAscendingByDevnum );

  005f3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:SortDevBlkPtrsAscendingByDevnum
  005fa	41 b8 08 00 00
	00		 mov	 r8d, 8
  00600	48 8b 54 24 78	 mov	 rdx, QWORD PTR nDevCount$[rsp]
  00605	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR orig_pDevBlkPtrs$[rsp]
  0060d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 6299 : 
; 6300 :     // Now use our sorted array of DEVBLK pointers
; 6301 :     // to display our sorted list of devices...
; 6302 : 
; 6303 :     for (i = nDevCount, pDevBlkPtr = orig_pDevBlkPtrs; i; --i, pDevBlkPtr++)

  00613	48 8b 44 24 78	 mov	 rax, QWORD PTR nDevCount$[rsp]
  00618	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
  00620	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR orig_pDevBlkPtrs$[rsp]
  00628	48 89 44 24 70	 mov	 QWORD PTR pDevBlkPtr$[rsp], rax
  0062d	eb 21		 jmp	 SHORT $LN19@qd_cmd
$LN17@qd_cmd:
  0062f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  00637	48 ff c8	 dec	 rax
  0063a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
  00642	48 8b 44 24 70	 mov	 rax, QWORD PTR pDevBlkPtr$[rsp]
  00647	48 83 c0 08	 add	 rax, 8
  0064b	48 89 44 24 70	 mov	 QWORD PTR pDevBlkPtr$[rsp], rax
$LN19@qd_cmd:
  00650	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR i$[rsp], 0
  00659	0f 84 00 0a 00
	00		 je	 $LN18@qd_cmd

; 6304 :     {
; 6305 :         dev = *pDevBlkPtr;                  // --> DEVBLK

  0065f	48 8b 44 24 70	 mov	 rax, QWORD PTR pDevBlkPtr$[rsp]
  00664	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00667	48 89 44 24 58	 mov	 QWORD PTR dev$[rsp], rax

; 6306 : 
; 6307 :         /* Display sense-id */
; 6308 :         if (dev->numdevid)

  0066c	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00671	83 b8 64 04 00
	00 00		 cmp	 DWORD PTR [rax+1124], 0
  00678	0f 84 1b 02 00
	00		 je	 $LN52@qd_cmd

; 6309 :         {
; 6310 :             for (j=0; j < dev->numdevid; j++)

  0067e	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR j$[rsp], 0
  00687	eb 0d		 jmp	 SHORT $LN22@qd_cmd
$LN20@qd_cmd:
  00689	48 8b 44 24 60	 mov	 rax, QWORD PTR j$[rsp]
  0068e	48 ff c0	 inc	 rax
  00691	48 89 44 24 60	 mov	 QWORD PTR j$[rsp], rax
$LN22@qd_cmd:
  00696	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0069b	8b 80 64 04 00
	00		 mov	 eax, DWORD PTR [rax+1124]
  006a1	48 39 44 24 60	 cmp	 QWORD PTR j$[rsp], rax
  006a6	0f 83 99 01 00
	00		 jae	 $LN21@qd_cmd

; 6311 :             {
; 6312 :                 if (j == 0)

  006ac	48 83 7c 24 60
	00		 cmp	 QWORD PTR j$[rsp], 0
  006b2	0f 85 82 00 00
	00		 jne	 $LN53@qd_cmd

; 6313 :                     len = MSGBUF( buf, "%1d:%04X SNSID 00 ", LCSS_DEVNUM );

  006b8	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  006be	74 12		 je	 SHORT $LN74@qd_cmd
  006c0	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  006c5	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  006c9	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv255[rsp], eax
  006d0	eb 0b		 jmp	 SHORT $LN75@qd_cmd
$LN74@qd_cmd:
  006d2	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv255[rsp], 0
$LN75@qd_cmd:
  006dd	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  006e3	74 14		 je	 SHORT $LN76@qd_cmd
  006e5	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  006ea	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  006ee	d1 f8		 sar	 eax, 1
  006f0	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv261[rsp], eax
  006f7	eb 0b		 jmp	 SHORT $LN77@qd_cmd
$LN76@qd_cmd:
  006f9	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv261[rsp], 0
$LN77@qd_cmd:
  00704	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv255[rsp]
  0070b	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0070f	44 8b 8c 24 9c
	00 00 00	 mov	 r9d, DWORD PTR tv261[rsp]
  00717	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209330
  0071e	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00723	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0072b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00731	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax
  00735	e9 88 00 00 00	 jmp	 $LN54@qd_cmd
$LN53@qd_cmd:

; 6314 :                 else if (j % 16 == 0)

  0073a	33 d2		 xor	 edx, edx
  0073c	48 8b 44 24 60	 mov	 rax, QWORD PTR j$[rsp]
  00741	b9 10 00 00 00	 mov	 ecx, 16
  00746	48 f7 f1	 div	 rcx
  00749	48 8b c2	 mov	 rax, rdx
  0074c	48 85 c0	 test	 rax, rax
  0074f	75 71		 jne	 SHORT $LN55@qd_cmd

; 6315 :                 {
; 6316 :                     // "%s" // qd command
; 6317 :                     WRMSG( HHC02280, "I", buf );

  00751	b9 01 00 00 00	 mov	 ecx, 1
  00756	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0075c	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00764	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00769	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209332
  00770	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00775	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209333
  0077c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00781	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00786	41 b9 03 00 00
	00		 mov	 r9d, 3
  0078c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209334
  00793	ba ad 18 00 00	 mov	 edx, 6317		; 000018adH
  00798	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209335
  0079f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6318 :                     len = sprintf( buf, "             %2.2X ", (int) j );

  007a5	44 8b 44 24 60	 mov	 r8d, DWORD PTR j$[rsp]
  007aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209336
  007b1	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  007b9	e8 00 00 00 00	 call	 sprintf
  007be	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax
$LN55@qd_cmd:
$LN54@qd_cmd:

; 6319 :                 }
; 6320 :                 if (j % 4 == 0)

  007c2	33 d2		 xor	 edx, edx
  007c4	48 8b 44 24 60	 mov	 rax, QWORD PTR j$[rsp]
  007c9	b9 04 00 00 00	 mov	 ecx, 4
  007ce	48 f7 f1	 div	 rcx
  007d1	48 8b c2	 mov	 rax, rdx
  007d4	48 85 c0	 test	 rax, rax
  007d7	75 28		 jne	 SHORT $LN56@qd_cmd

; 6321 :                     len += sprintf( buf + len, " " );

  007d9	48 63 44 24 50	 movsxd	 rax, DWORD PTR len$[rsp]
  007de	48 8d 84 04 30
	01 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  007e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209338
  007ed	48 8b c8	 mov	 rcx, rax
  007f0	e8 00 00 00 00	 call	 sprintf
  007f5	8b 4c 24 50	 mov	 ecx, DWORD PTR len$[rsp]
  007f9	03 c8		 add	 ecx, eax
  007fb	8b c1		 mov	 eax, ecx
  007fd	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax
$LN56@qd_cmd:

; 6322 :                 len += sprintf( buf + len, "%2.2X", dev->devid[j] );

  00801	48 8b 44 24 60	 mov	 rax, QWORD PTR j$[rsp]
  00806	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  0080b	48 03 c8	 add	 rcx, rax
  0080e	48 8b c1	 mov	 rax, rcx
  00811	0f b6 80 68 04
	00 00		 movzx	 eax, BYTE PTR [rax+1128]
  00818	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR len$[rsp]
  0081d	48 8d 8c 0c 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp+rcx]
  00825	44 8b c0	 mov	 r8d, eax
  00828	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209339
  0082f	e8 00 00 00 00	 call	 sprintf
  00834	8b 4c 24 50	 mov	 ecx, DWORD PTR len$[rsp]
  00838	03 c8		 add	 ecx, eax
  0083a	8b c1		 mov	 eax, ecx
  0083c	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax

; 6323 :             }

  00840	e9 44 fe ff ff	 jmp	 $LN20@qd_cmd
$LN21@qd_cmd:

; 6324 :             // "%s" // qd command
; 6325 :             WRMSG( HHC02280, "I", buf );

  00845	b9 01 00 00 00	 mov	 ecx, 1
  0084a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00850	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00858	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0085d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209340
  00864	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00869	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209341
  00870	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00875	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0087a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00880	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209342
  00887	ba b5 18 00 00	 mov	 edx, 6325		; 000018b5H
  0088c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209343
  00893	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN52@qd_cmd:

; 6326 :         }
; 6327 : 
; 6328 :         /* Display device characteristics */
; 6329 :         if (dev->numdevchar)

  00899	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0089e	83 b8 68 05 00
	00 00		 cmp	 DWORD PTR [rax+1384], 0
  008a5	0f 84 1b 02 00
	00		 je	 $LN57@qd_cmd

; 6330 :         {
; 6331 :             for (j=0; j < dev->numdevchar; j++)

  008ab	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR j$[rsp], 0
  008b4	eb 0d		 jmp	 SHORT $LN25@qd_cmd
$LN23@qd_cmd:
  008b6	48 8b 44 24 60	 mov	 rax, QWORD PTR j$[rsp]
  008bb	48 ff c0	 inc	 rax
  008be	48 89 44 24 60	 mov	 QWORD PTR j$[rsp], rax
$LN25@qd_cmd:
  008c3	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  008c8	8b 80 68 05 00
	00		 mov	 eax, DWORD PTR [rax+1384]
  008ce	48 39 44 24 60	 cmp	 QWORD PTR j$[rsp], rax
  008d3	0f 83 99 01 00
	00		 jae	 $LN24@qd_cmd

; 6332 :             {
; 6333 :                 if (j == 0)

  008d9	48 83 7c 24 60
	00		 cmp	 QWORD PTR j$[rsp], 0
  008df	0f 85 82 00 00
	00		 jne	 $LN58@qd_cmd

; 6334 :                     len = MSGBUF( buf, "%1d:%04X RDC   00 ", LCSS_DEVNUM );

  008e5	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  008eb	74 12		 je	 SHORT $LN78@qd_cmd
  008ed	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  008f2	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  008f6	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv322[rsp], eax
  008fd	eb 0b		 jmp	 SHORT $LN79@qd_cmd
$LN78@qd_cmd:
  008ff	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv322[rsp], 0
$LN79@qd_cmd:
  0090a	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00910	74 14		 je	 SHORT $LN80@qd_cmd
  00912	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00917	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0091b	d1 f8		 sar	 eax, 1
  0091d	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv328[rsp], eax
  00924	eb 0b		 jmp	 SHORT $LN81@qd_cmd
$LN80@qd_cmd:
  00926	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv328[rsp], 0
$LN81@qd_cmd:
  00931	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv322[rsp]
  00938	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0093c	44 8b 8c 24 a4
	00 00 00	 mov	 r9d, DWORD PTR tv328[rsp]
  00944	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209347
  0094b	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00950	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00958	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  0095e	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax
  00962	e9 88 00 00 00	 jmp	 $LN59@qd_cmd
$LN58@qd_cmd:

; 6335 :                 else if (j % 16 == 0)

  00967	33 d2		 xor	 edx, edx
  00969	48 8b 44 24 60	 mov	 rax, QWORD PTR j$[rsp]
  0096e	b9 10 00 00 00	 mov	 ecx, 16
  00973	48 f7 f1	 div	 rcx
  00976	48 8b c2	 mov	 rax, rdx
  00979	48 85 c0	 test	 rax, rax
  0097c	75 71		 jne	 SHORT $LN60@qd_cmd

; 6336 :                 {
; 6337 :                     // "%s" // qd command
; 6338 :                     WRMSG( HHC02280, "I", buf );

  0097e	b9 01 00 00 00	 mov	 ecx, 1
  00983	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00989	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00991	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00996	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209349
  0099d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  009a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209350
  009a9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  009ae	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009b3	41 b9 03 00 00
	00		 mov	 r9d, 3
  009b9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209351
  009c0	ba c2 18 00 00	 mov	 edx, 6338		; 000018c2H
  009c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209352
  009cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6339 :                     len = sprintf( buf, "             %2.2X ", (int) j );

  009d2	44 8b 44 24 60	 mov	 r8d, DWORD PTR j$[rsp]
  009d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209353
  009de	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  009e6	e8 00 00 00 00	 call	 sprintf
  009eb	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax
$LN60@qd_cmd:
$LN59@qd_cmd:

; 6340 :                 }
; 6341 :                 if (j % 4 == 0)

  009ef	33 d2		 xor	 edx, edx
  009f1	48 8b 44 24 60	 mov	 rax, QWORD PTR j$[rsp]
  009f6	b9 04 00 00 00	 mov	 ecx, 4
  009fb	48 f7 f1	 div	 rcx
  009fe	48 8b c2	 mov	 rax, rdx
  00a01	48 85 c0	 test	 rax, rax
  00a04	75 28		 jne	 SHORT $LN61@qd_cmd

; 6342 :                     len += sprintf( buf + len, " " );

  00a06	48 63 44 24 50	 movsxd	 rax, DWORD PTR len$[rsp]
  00a0b	48 8d 84 04 30
	01 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  00a13	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209355
  00a1a	48 8b c8	 mov	 rcx, rax
  00a1d	e8 00 00 00 00	 call	 sprintf
  00a22	8b 4c 24 50	 mov	 ecx, DWORD PTR len$[rsp]
  00a26	03 c8		 add	 ecx, eax
  00a28	8b c1		 mov	 eax, ecx
  00a2a	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax
$LN61@qd_cmd:

; 6343 :                 len += sprintf( buf + len, "%2.2X", dev->devchar[j] );

  00a2e	48 8b 44 24 60	 mov	 rax, QWORD PTR j$[rsp]
  00a33	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  00a38	48 03 c8	 add	 rcx, rax
  00a3b	48 8b c1	 mov	 rax, rcx
  00a3e	0f b6 80 6c 05
	00 00		 movzx	 eax, BYTE PTR [rax+1388]
  00a45	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR len$[rsp]
  00a4a	48 8d 8c 0c 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp+rcx]
  00a52	44 8b c0	 mov	 r8d, eax
  00a55	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209356
  00a5c	e8 00 00 00 00	 call	 sprintf
  00a61	8b 4c 24 50	 mov	 ecx, DWORD PTR len$[rsp]
  00a65	03 c8		 add	 ecx, eax
  00a67	8b c1		 mov	 eax, ecx
  00a69	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax

; 6344 :             }

  00a6d	e9 44 fe ff ff	 jmp	 $LN23@qd_cmd
$LN24@qd_cmd:

; 6345 :             // "%s" // qd command
; 6346 :             WRMSG( HHC02280, "I", buf );

  00a72	b9 01 00 00 00	 mov	 ecx, 1
  00a77	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a7d	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00a85	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a8a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209357
  00a91	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a96	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209358
  00a9d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00aa2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00aa7	41 b9 03 00 00
	00		 mov	 r9d, 3
  00aad	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209359
  00ab4	ba ca 18 00 00	 mov	 edx, 6346		; 000018caH
  00ab9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209360
  00ac0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN57@qd_cmd:

; 6347 :         }
; 6348 : 
; 6349 :         /* Display configuration data */
; 6350 :         if (dev->rcd && (num = dev->rcd( dev, iobuf, 256 )) > 0)

  00ac6	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00acb	48 83 b8 b8 02
	00 00 00	 cmp	 QWORD PTR [rax+696], 0
  00ad3	0f 84 3c 03 00
	00		 je	 $LN62@qd_cmd
  00ad9	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  00adf	48 8d 94 24 b0
	01 00 00	 lea	 rdx, QWORD PTR iobuf$[rsp]
  00ae7	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  00aec	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00af1	ff 90 b8 02 00
	00		 call	 QWORD PTR [rax+696]
  00af7	48 98		 cdqe
  00af9	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR num$[rsp], rax
  00b01	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR num$[rsp], 0
  00b0a	0f 86 05 03 00
	00		 jbe	 $LN62@qd_cmd

; 6351 :         {
; 6352 :             cbuf[ sizeof( cbuf ) - 1 ] = 0;

  00b10	b8 01 00 00 00	 mov	 eax, 1
  00b15	48 6b c0 10	 imul	 rax, rax, 16
  00b19	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR $T1[rsp], rax
  00b21	48 83 bc 24 e0
	00 00 00 11	 cmp	 QWORD PTR $T1[rsp], 17
  00b2a	73 02		 jae	 SHORT $LN82@qd_cmd
  00b2c	eb 05		 jmp	 SHORT $LN83@qd_cmd
$LN82@qd_cmd:
  00b2e	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN83@qd_cmd:
  00b33	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR $T1[rsp]
  00b3b	c6 84 04 10 01
	00 00 00	 mov	 BYTE PTR cbuf$[rsp+rax], 0

; 6353 : 
; 6354 :             for (j=0; j < num; j++)

  00b43	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR j$[rsp], 0
  00b4c	eb 0d		 jmp	 SHORT $LN28@qd_cmd
$LN26@qd_cmd:
  00b4e	48 8b 44 24 60	 mov	 rax, QWORD PTR j$[rsp]
  00b53	48 ff c0	 inc	 rax
  00b56	48 89 44 24 60	 mov	 QWORD PTR j$[rsp], rax
$LN28@qd_cmd:
  00b5b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR num$[rsp]
  00b63	48 39 44 24 60	 cmp	 QWORD PTR j$[rsp], rax
  00b68	0f 83 23 02 00
	00		 jae	 $LN27@qd_cmd

; 6355 :             {
; 6356 :                 if (j == 0)

  00b6e	48 83 7c 24 60
	00		 cmp	 QWORD PTR j$[rsp], 0
  00b74	75 79		 jne	 SHORT $LN63@qd_cmd

; 6357 :                     len = sprintf( buf, "%1d:%04X RCD   00 ", LCSS_DEVNUM );

  00b76	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00b7c	74 12		 je	 SHORT $LN84@qd_cmd
  00b7e	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00b83	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00b87	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv429[rsp], eax
  00b8e	eb 0b		 jmp	 SHORT $LN85@qd_cmd
$LN84@qd_cmd:
  00b90	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv429[rsp], 0
$LN85@qd_cmd:
  00b9b	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00ba1	74 14		 je	 SHORT $LN86@qd_cmd
  00ba3	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00ba8	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00bac	d1 f8		 sar	 eax, 1
  00bae	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv435[rsp], eax
  00bb5	eb 0b		 jmp	 SHORT $LN87@qd_cmd
$LN86@qd_cmd:
  00bb7	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv435[rsp], 0
$LN87@qd_cmd:
  00bc2	44 8b 8c 24 a8
	00 00 00	 mov	 r9d, DWORD PTR tv429[rsp]
  00bca	44 8b 84 24 ac
	00 00 00	 mov	 r8d, DWORD PTR tv435[rsp]
  00bd2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209364
  00bd9	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00be1	e8 00 00 00 00	 call	 sprintf
  00be6	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax
  00bea	e9 bc 00 00 00	 jmp	 $LN64@qd_cmd
$LN63@qd_cmd:

; 6358 :                 else if (j % 16 == 0)

  00bef	33 d2		 xor	 edx, edx
  00bf1	48 8b 44 24 60	 mov	 rax, QWORD PTR j$[rsp]
  00bf6	b9 10 00 00 00	 mov	 ecx, 16
  00bfb	48 f7 f1	 div	 rcx
  00bfe	48 8b c2	 mov	 rax, rdx
  00c01	48 85 c0	 test	 rax, rax
  00c04	0f 85 a1 00 00
	00		 jne	 $LN65@qd_cmd

; 6359 :                 {
; 6360 :                     len += sprintf( buf + len, " |%s|", cbuf );

  00c0a	48 63 44 24 50	 movsxd	 rax, DWORD PTR len$[rsp]
  00c0f	48 8d 84 04 30
	01 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  00c17	4c 8d 84 24 10
	01 00 00	 lea	 r8, QWORD PTR cbuf$[rsp]
  00c1f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209366
  00c26	48 8b c8	 mov	 rcx, rax
  00c29	e8 00 00 00 00	 call	 sprintf
  00c2e	8b 4c 24 50	 mov	 ecx, DWORD PTR len$[rsp]
  00c32	03 c8		 add	 ecx, eax
  00c34	8b c1		 mov	 eax, ecx
  00c36	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax

; 6361 :                     // "%s" // qd command
; 6362 :                     WRMSG( HHC02280, "I", buf );

  00c3a	b9 01 00 00 00	 mov	 ecx, 1
  00c3f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c45	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00c4d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00c52	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209367
  00c59	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c5e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209368
  00c65	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c6a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c6f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c75	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209369
  00c7c	ba da 18 00 00	 mov	 edx, 6362		; 000018daH
  00c81	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209370
  00c88	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6363 :                     len = sprintf( buf, "             %2.2X ", (int) j );

  00c8e	44 8b 44 24 60	 mov	 r8d, DWORD PTR j$[rsp]
  00c93	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209371
  00c9a	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00ca2	e8 00 00 00 00	 call	 sprintf
  00ca7	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax
$LN65@qd_cmd:
$LN64@qd_cmd:

; 6364 :                 }
; 6365 :                 if (j % 4 == 0)

  00cab	33 d2		 xor	 edx, edx
  00cad	48 8b 44 24 60	 mov	 rax, QWORD PTR j$[rsp]
  00cb2	b9 04 00 00 00	 mov	 ecx, 4
  00cb7	48 f7 f1	 div	 rcx
  00cba	48 8b c2	 mov	 rax, rdx
  00cbd	48 85 c0	 test	 rax, rax
  00cc0	75 28		 jne	 SHORT $LN66@qd_cmd

; 6366 :                     len += sprintf( buf + len, " " );

  00cc2	48 63 44 24 50	 movsxd	 rax, DWORD PTR len$[rsp]
  00cc7	48 8d 84 04 30
	01 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  00ccf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209373
  00cd6	48 8b c8	 mov	 rcx, rax
  00cd9	e8 00 00 00 00	 call	 sprintf
  00cde	8b 4c 24 50	 mov	 ecx, DWORD PTR len$[rsp]
  00ce2	03 c8		 add	 ecx, eax
  00ce4	8b c1		 mov	 eax, ecx
  00ce6	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax
$LN66@qd_cmd:

; 6367 :                 len += sprintf( buf + len, "%2.2X", iobuf[j] );

  00cea	48 8b 44 24 60	 mov	 rax, QWORD PTR j$[rsp]
  00cef	0f b6 84 04 b0
	01 00 00	 movzx	 eax, BYTE PTR iobuf$[rsp+rax]
  00cf7	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR len$[rsp]
  00cfc	48 8d 8c 0c 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp+rcx]
  00d04	44 8b c0	 mov	 r8d, eax
  00d07	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209374
  00d0e	e8 00 00 00 00	 call	 sprintf
  00d13	8b 4c 24 50	 mov	 ecx, DWORD PTR len$[rsp]
  00d17	03 c8		 add	 ecx, eax
  00d19	8b c1		 mov	 eax, ecx
  00d1b	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax

; 6368 :                 cbuf[ j % 16 ] = isprint( guest_to_host( iobuf[j] )) ? guest_to_host( iobuf[j] ) : '.';

  00d1f	48 8b 44 24 60	 mov	 rax, QWORD PTR j$[rsp]
  00d24	0f b6 8c 04 b0
	01 00 00	 movzx	 ecx, BYTE PTR iobuf$[rsp+rax]
  00d2c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_guest_to_host
  00d32	0f b6 c0	 movzx	 eax, al
  00d35	8b c8		 mov	 ecx, eax
  00d37	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isprint
  00d3d	85 c0		 test	 eax, eax
  00d3f	74 1f		 je	 SHORT $LN88@qd_cmd
  00d41	48 8b 44 24 60	 mov	 rax, QWORD PTR j$[rsp]
  00d46	0f b6 8c 04 b0
	01 00 00	 movzx	 ecx, BYTE PTR iobuf$[rsp+rax]
  00d4e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_guest_to_host
  00d54	0f b6 c0	 movzx	 eax, al
  00d57	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv496[rsp], eax
  00d5e	eb 0b		 jmp	 SHORT $LN89@qd_cmd
$LN88@qd_cmd:
  00d60	c7 84 24 b0 00
	00 00 2e 00 00
	00		 mov	 DWORD PTR tv496[rsp], 46 ; 0000002eH
$LN89@qd_cmd:
  00d6b	33 d2		 xor	 edx, edx
  00d6d	48 8b 44 24 60	 mov	 rax, QWORD PTR j$[rsp]
  00d72	b9 10 00 00 00	 mov	 ecx, 16
  00d77	48 f7 f1	 div	 rcx
  00d7a	48 8b c2	 mov	 rax, rdx
  00d7d	0f b6 8c 24 b0
	00 00 00	 movzx	 ecx, BYTE PTR tv496[rsp]
  00d85	88 8c 04 10 01
	00 00		 mov	 BYTE PTR cbuf$[rsp+rax], cl

; 6369 :             }

  00d8c	e9 bd fd ff ff	 jmp	 $LN26@qd_cmd
$LN27@qd_cmd:

; 6370 :             len += sprintf( buf + len, " |%s|", cbuf );

  00d91	48 63 44 24 50	 movsxd	 rax, DWORD PTR len$[rsp]
  00d96	48 8d 84 04 30
	01 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  00d9e	4c 8d 84 24 10
	01 00 00	 lea	 r8, QWORD PTR cbuf$[rsp]
  00da6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209375
  00dad	48 8b c8	 mov	 rcx, rax
  00db0	e8 00 00 00 00	 call	 sprintf
  00db5	8b 4c 24 50	 mov	 ecx, DWORD PTR len$[rsp]
  00db9	03 c8		 add	 ecx, eax
  00dbb	8b c1		 mov	 eax, ecx
  00dbd	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax

; 6371 :             // "%s" // qd command
; 6372 :             WRMSG( HHC02280, "I", buf );

  00dc1	b9 01 00 00 00	 mov	 ecx, 1
  00dc6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00dcc	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00dd4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00dd9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209376
  00de0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00de5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209377
  00dec	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00df1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00df6	41 b9 03 00 00
	00		 mov	 r9d, 3
  00dfc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209378
  00e03	ba e4 18 00 00	 mov	 edx, 6372		; 000018e4H
  00e08	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209379
  00e0f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN62@qd_cmd:

; 6373 :         }
; 6374 : 
; 6375 :         /* If dasd, display subsystem status */
; 6376 :         if (dev->ckdcyls && (num = dasd_build_ckd_subsys_status( dev, iobuf, 44 )) > 0)

  00e15	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00e1a	83 b8 b8 12 00
	00 00		 cmp	 DWORD PTR [rax+4792], 0
  00e21	0f 84 33 02 00
	00		 je	 $LN67@qd_cmd
  00e27	41 b8 2c 00 00
	00		 mov	 r8d, 44			; 0000002cH
  00e2d	48 8d 94 24 b0
	01 00 00	 lea	 rdx, QWORD PTR iobuf$[rsp]
  00e35	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  00e3a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_dasd_build_ckd_subsys_status
  00e40	48 98		 cdqe
  00e42	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR num$[rsp], rax
  00e4a	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR num$[rsp], 0
  00e53	0f 86 01 02 00
	00		 jbe	 $LN67@qd_cmd

; 6377 :         {
; 6378 :             for (j=0; j < num; j++)

  00e59	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR j$[rsp], 0
  00e62	eb 0d		 jmp	 SHORT $LN31@qd_cmd
$LN29@qd_cmd:
  00e64	48 8b 44 24 60	 mov	 rax, QWORD PTR j$[rsp]
  00e69	48 ff c0	 inc	 rax
  00e6c	48 89 44 24 60	 mov	 QWORD PTR j$[rsp], rax
$LN31@qd_cmd:
  00e71	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR num$[rsp]
  00e79	48 39 44 24 60	 cmp	 QWORD PTR j$[rsp], rax
  00e7e	0f 83 82 01 00
	00		 jae	 $LN30@qd_cmd

; 6379 :             {
; 6380 :                 if (j == 0)

  00e84	48 83 7c 24 60
	00		 cmp	 QWORD PTR j$[rsp], 0
  00e8a	75 79		 jne	 SHORT $LN68@qd_cmd

; 6381 :                     len = sprintf( buf, "%1d:%04X SNSS  00 ", LCSS_DEVNUM );

  00e8c	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00e92	74 12		 je	 SHORT $LN90@qd_cmd
  00e94	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00e99	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00e9d	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv530[rsp], eax
  00ea4	eb 0b		 jmp	 SHORT $LN91@qd_cmd
$LN90@qd_cmd:
  00ea6	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv530[rsp], 0
$LN91@qd_cmd:
  00eb1	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00eb7	74 14		 je	 SHORT $LN92@qd_cmd
  00eb9	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00ebe	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00ec2	d1 f8		 sar	 eax, 1
  00ec4	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv536[rsp], eax
  00ecb	eb 0b		 jmp	 SHORT $LN93@qd_cmd
$LN92@qd_cmd:
  00ecd	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv536[rsp], 0
$LN93@qd_cmd:
  00ed8	44 8b 8c 24 b4
	00 00 00	 mov	 r9d, DWORD PTR tv530[rsp]
  00ee0	44 8b 84 24 b8
	00 00 00	 mov	 r8d, DWORD PTR tv536[rsp]
  00ee8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209383
  00eef	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00ef7	e8 00 00 00 00	 call	 sprintf
  00efc	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax
  00f00	e9 88 00 00 00	 jmp	 $LN69@qd_cmd
$LN68@qd_cmd:

; 6382 :                 else if (j % 16 == 0)

  00f05	33 d2		 xor	 edx, edx
  00f07	48 8b 44 24 60	 mov	 rax, QWORD PTR j$[rsp]
  00f0c	b9 10 00 00 00	 mov	 ecx, 16
  00f11	48 f7 f1	 div	 rcx
  00f14	48 8b c2	 mov	 rax, rdx
  00f17	48 85 c0	 test	 rax, rax
  00f1a	75 71		 jne	 SHORT $LN70@qd_cmd

; 6383 :                 {
; 6384 :                     // "%s" // qd command
; 6385 :                     WRMSG( HHC02280, "I", buf );

  00f1c	b9 01 00 00 00	 mov	 ecx, 1
  00f21	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00f27	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00f2f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00f34	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209385
  00f3b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00f40	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209386
  00f47	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00f4c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00f51	41 b9 03 00 00
	00		 mov	 r9d, 3
  00f57	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209387
  00f5e	ba f1 18 00 00	 mov	 edx, 6385		; 000018f1H
  00f63	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209388
  00f6a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6386 :                     len = sprintf( buf, "             %2.2X ", (int) j );

  00f70	44 8b 44 24 60	 mov	 r8d, DWORD PTR j$[rsp]
  00f75	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209389
  00f7c	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00f84	e8 00 00 00 00	 call	 sprintf
  00f89	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax
$LN70@qd_cmd:
$LN69@qd_cmd:

; 6387 :                 }
; 6388 :                 if (j % 4 == 0)

  00f8d	33 d2		 xor	 edx, edx
  00f8f	48 8b 44 24 60	 mov	 rax, QWORD PTR j$[rsp]
  00f94	b9 04 00 00 00	 mov	 ecx, 4
  00f99	48 f7 f1	 div	 rcx
  00f9c	48 8b c2	 mov	 rax, rdx
  00f9f	48 85 c0	 test	 rax, rax
  00fa2	75 28		 jne	 SHORT $LN71@qd_cmd

; 6389 :                     len += sprintf( buf + len, " " );

  00fa4	48 63 44 24 50	 movsxd	 rax, DWORD PTR len$[rsp]
  00fa9	48 8d 84 04 30
	01 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  00fb1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209391
  00fb8	48 8b c8	 mov	 rcx, rax
  00fbb	e8 00 00 00 00	 call	 sprintf
  00fc0	8b 4c 24 50	 mov	 ecx, DWORD PTR len$[rsp]
  00fc4	03 c8		 add	 ecx, eax
  00fc6	8b c1		 mov	 eax, ecx
  00fc8	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax
$LN71@qd_cmd:

; 6390 :                 len += sprintf( buf + len, "%2.2X", iobuf[j] );

  00fcc	48 8b 44 24 60	 mov	 rax, QWORD PTR j$[rsp]
  00fd1	0f b6 84 04 b0
	01 00 00	 movzx	 eax, BYTE PTR iobuf$[rsp+rax]
  00fd9	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR len$[rsp]
  00fde	48 8d 8c 0c 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp+rcx]
  00fe6	44 8b c0	 mov	 r8d, eax
  00fe9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209392
  00ff0	e8 00 00 00 00	 call	 sprintf
  00ff5	8b 4c 24 50	 mov	 ecx, DWORD PTR len$[rsp]
  00ff9	03 c8		 add	 ecx, eax
  00ffb	8b c1		 mov	 eax, ecx
  00ffd	89 44 24 50	 mov	 DWORD PTR len$[rsp], eax

; 6391 :             }

  01001	e9 5e fe ff ff	 jmp	 $LN29@qd_cmd
$LN30@qd_cmd:

; 6392 :             // "%s" // qd command
; 6393 :             WRMSG( HHC02280, "I", buf );

  01006	b9 01 00 00 00	 mov	 ecx, 1
  0100b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01011	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  01019	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0101e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209393
  01025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0102a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209394
  01031	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01036	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0103b	41 b9 03 00 00
	00		 mov	 r9d, 3
  01041	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209395
  01048	ba f9 18 00 00	 mov	 edx, 6393		; 000018f9H
  0104d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209396
  01054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN67@qd_cmd:

; 6394 :         }
; 6395 :     }

  0105a	e9 d0 f5 ff ff	 jmp	 $LN17@qd_cmd
$LN18@qd_cmd:

; 6396 : 
; 6397 :     free( orig_pDevBlkPtrs );

  0105f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR orig_pDevBlkPtrs$[rsp]
  01067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 6398 : 
; 6399 :     if (bTooMany)

  0106d	83 7c 24 68 00	 cmp	 DWORD PTR bTooMany$[rsp], 0
  01072	74 56		 je	 SHORT $LN72@qd_cmd

; 6400 :     {
; 6401 :         // "Not all devices shown (max %d)"
; 6402 :         WRMSG( HHC02237, "W", MAX_DEVLIST_DEVICES );

  01074	b9 01 00 00 00	 mov	 ecx, 1
  01079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0107f	c7 44 24 38 00
	00 01 00	 mov	 DWORD PTR [rsp+56], 65536 ; 00010000H
  01087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209398
  0108e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209399
  0109a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0109f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  010a4	41 b9 03 00 00
	00		 mov	 r9d, 3
  010aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209400
  010b1	ba 02 19 00 00	 mov	 edx, 6402		; 00001902H
  010b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209401
  010bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6403 :         return -1;      // (treat as error)

  010c3	b8 ff ff ff ff	 mov	 eax, -1
  010c8	eb 02		 jmp	 SHORT $LN1@qd_cmd
$LN72@qd_cmd:

; 6404 :     }
; 6405 : 
; 6406 :     return 0;

  010ca	33 c0		 xor	 eax, eax
$LN1@qd_cmd:
$LN73@qd_cmd:

; 6407 : }

  010cc	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  010d4	48 33 cc	 xor	 rcx, rsp
  010d7	e8 00 00 00 00	 call	 __security_check_cookie
  010dc	48 81 c4 c8 02
	00 00		 add	 rsp, 712		; 000002c8H
  010e3	c3		 ret	 0
qd_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
dev$ = 80
ssid$ = 88
lcss$ = 92
devnum$ = 96
dev_found$ = 100
i$ = 104
single_devnum$ = 112
bTooMany$ = 116
nDevCount$ = 120
pDevBlkPtr$ = 128
orig_pDevBlkPtrs$ = 136
devncount$ = 144
clientip$1 = 152
cnt$ = 160
tv310 = 168
tv316 = 176
tv320 = 184
clientname$2 = 192
dnd$ = 200
tv174 = 216
devclass$ = 224
devtype$ = 232
cdevnum$ = 240
buf$ = 256
devstat$ = 1280
__$ArrayPad$ = 2304
argc$ = 2336
argv$ = 2344
cmdline$ = 2352
devlist_cmd PROC

; 5933 : {

$LN57:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 81 ec 10 09
	00 00		 sub	 rsp, 2320		; 00000910H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 00
	09 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 5934 :     DEVBLK*   dev;
; 5935 :     char*     devclass;
; 5936 :     char      devstat[1024];
; 5937 :     char      devtype[8] = "";

  00028	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR $SG209144
  0002f	88 84 24 e8 00
	00 00		 mov	 BYTE PTR devtype$[rsp], al
  00036	48 8d 84 24 e9
	00 00 00	 lea	 rax, QWORD PTR devtype$[rsp+1]
  0003e	48 8b f8	 mov	 rdi, rax
  00041	33 c0		 xor	 eax, eax
  00043	b9 07 00 00 00	 mov	 ecx, 7
  00048	f3 aa		 rep stosb

; 5938 :     DEVBLK**  pDevBlkPtr;
; 5939 :     DEVBLK**  orig_pDevBlkPtrs;
; 5940 :     size_t    nDevCount, i, cnt;
; 5941 :     int       bTooMany = FALSE;

  0004a	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR bTooMany$[rsp], 0

; 5942 :     U16       lcss;
; 5943 :     U16       ssid=0;

  00052	33 c0		 xor	 eax, eax
  00054	66 89 44 24 58	 mov	 WORD PTR ssid$[rsp], ax

; 5944 :     U16       devnum;
; 5945 :     int       single_devnum = FALSE;

  00059	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR single_devnum$[rsp], 0

; 5946 :     char      buf[1024];
; 5947 :     char      cdevnum[8];
; 5948 : 
; 5949 :     DEVNUMSDESC  dnd;
; 5950 :     size_t       devncount = 0;

  00061	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR devncount$[rsp], 0

; 5951 :     int          dev_found = FALSE;

  0006d	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR dev_found$[rsp], 0
$LN4@devlist_cm:

; 5952 : 
; 5953 :     UNREFERENCED( cmdline );

  00075	33 c0		 xor	 eax, eax
  00077	85 c0		 test	 eax, eax
  00079	75 fa		 jne	 SHORT $LN4@devlist_cm

; 5954 : 
; 5955 :     if (1
; 5956 :         && argc == 2
; 5957 :         && strlen( argv[1] ) >= 3
; 5958 :         && strlen( argv[1] ) <= 4

  0007b	33 c0		 xor	 eax, eax
  0007d	83 f8 01	 cmp	 eax, 1
  00080	0f 84 91 00 00
	00		 je	 $LN20@devlist_cm
  00086	83 bc 24 20 09
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0008e	0f 85 83 00 00
	00		 jne	 $LN20@devlist_cm
  00094	b8 08 00 00 00	 mov	 eax, 8
  00099	48 6b c0 01	 imul	 rax, rax, 1
  0009d	48 8b 8c 24 28
	09 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000a5	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000a9	e8 00 00 00 00	 call	 strlen
  000ae	48 83 f8 03	 cmp	 rax, 3
  000b2	72 63		 jb	 SHORT $LN20@devlist_cm
  000b4	b8 08 00 00 00	 mov	 eax, 8
  000b9	48 6b c0 01	 imul	 rax, rax, 1
  000bd	48 8b 8c 24 28
	09 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000c5	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000c9	e8 00 00 00 00	 call	 strlen
  000ce	48 83 f8 04	 cmp	 rax, 4
  000d2	77 43		 ja	 SHORT $LN20@devlist_cm

; 5959 :     )
; 5960 :     {
; 5961 :         if (is_devclass_name(  argv[1] ))

  000d4	b8 08 00 00 00	 mov	 eax, 8
  000d9	48 6b c0 01	 imul	 rax, rax, 1
  000dd	48 8b 8c 24 28
	09 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000e5	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000e9	e8 00 00 00 00	 call	 is_devclass_name
  000ee	0f b6 c0	 movzx	 eax, al
  000f1	85 c0		 test	 eax, eax
  000f3	74 22		 je	 SHORT $LN21@devlist_cm

; 5962 :             strupper( devtype, argv[1] );

  000f5	b8 08 00 00 00	 mov	 eax, 8
  000fa	48 6b c0 01	 imul	 rax, rax, 1
  000fe	48 8b 8c 24 28
	09 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00106	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0010a	48 8d 8c 24 e8
	00 00 00	 lea	 rcx, QWORD PTR devtype$[rsp]
  00112	e8 00 00 00 00	 call	 strupper
$LN21@devlist_cm:
$LN20@devlist_cm:

; 5963 :     }
; 5964 : 
; 5965 :     if (argc >= 2 && !strlen( devtype ))

  00117	83 bc 24 20 09
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0011f	0f 8c 0a 01 00
	00		 jl	 $LN22@devlist_cm
  00125	48 8d 8c 24 e8
	00 00 00	 lea	 rcx, QWORD PTR devtype$[rsp]
  0012d	e8 00 00 00 00	 call	 strlen
  00132	48 85 c0	 test	 rax, rax
  00135	0f 85 f4 00 00
	00		 jne	 $LN22@devlist_cm

; 5966 :     {
; 5967 :         // We now also support multiple CCUU addresses.
; 5968 :         if (1
; 5969 :             && str_caseless_ne( argv[1], "sysg" )
; 5970 :             && (devncount = parse_devnums( argv[1], &dnd )) > 0

  0013b	33 c0		 xor	 eax, eax
  0013d	83 f8 01	 cmp	 eax, 1
  00140	74 6f		 je	 SHORT $LN23@devlist_cm
  00142	b8 08 00 00 00	 mov	 eax, 8
  00147	48 6b c0 01	 imul	 rax, rax, 1
  0014b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209150
  00152	48 8b 8c 24 28
	09 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0015a	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0015e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00164	85 c0		 test	 eax, eax
  00166	74 49		 je	 SHORT $LN23@devlist_cm
  00168	b8 08 00 00 00	 mov	 eax, 8
  0016d	48 6b c0 01	 imul	 rax, rax, 1
  00171	48 8d 94 24 c8
	00 00 00	 lea	 rdx, QWORD PTR dnd$[rsp]
  00179	48 8b 8c 24 28
	09 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00181	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00185	e8 00 00 00 00	 call	 parse_devnums
  0018a	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR devncount$[rsp], rax
  00192	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR devncount$[rsp], 0
  0019b	76 14		 jbe	 SHORT $LN23@devlist_cm

; 5971 :         )
; 5972 :         {
; 5973 :             ssid = LCSS_TO_SSID( dnd.lcss );

  0019d	0f b6 84 24 c8
	00 00 00	 movzx	 eax, BYTE PTR dnd$[rsp]
  001a5	d1 e0		 shl	 eax, 1
  001a7	83 c8 01	 or	 eax, 1
  001aa	66 89 44 24 58	 mov	 WORD PTR ssid$[rsp], ax

; 5974 :         }

  001af	eb 7e		 jmp	 SHORT $LN24@devlist_cm
$LN23@devlist_cm:

; 5975 :         else
; 5976 :         {
; 5977 :             single_devnum = TRUE;

  001b1	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR single_devnum$[rsp], 1

; 5978 : 
; 5979 :             if ( parse_single_devnum( argv[1], &lcss, &devnum ) < 0 )

  001b9	b8 08 00 00 00	 mov	 eax, 8
  001be	48 6b c0 01	 imul	 rax, rax, 1
  001c2	4c 8d 44 24 60	 lea	 r8, QWORD PTR devnum$[rsp]
  001c7	48 8d 54 24 5c	 lea	 rdx, QWORD PTR lcss$[rsp]
  001cc	48 8b 8c 24 28
	09 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001d4	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  001d8	e8 00 00 00 00	 call	 parse_single_devnum
  001dd	85 c0		 test	 eax, eax
  001df	7d 0a		 jge	 SHORT $LN25@devlist_cm

; 5980 :             {
; 5981 :                 // (error message already issued)
; 5982 :                 return -1;

  001e1	b8 ff ff ff ff	 mov	 eax, -1
  001e6	e9 36 08 00 00	 jmp	 $LN1@devlist_cm
$LN25@devlist_cm:

; 5983 :             }
; 5984 : 
; 5985 :             if (!(dev = find_device_by_devnum( lcss, devnum )))

  001eb	0f b7 54 24 60	 movzx	 edx, WORD PTR devnum$[rsp]
  001f0	0f b7 4c 24 5c	 movzx	 ecx, WORD PTR lcss$[rsp]
  001f5	e8 00 00 00 00	 call	 find_device_by_devnum
  001fa	48 89 44 24 50	 mov	 QWORD PTR dev$[rsp], rax
  001ff	48 83 7c 24 50
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00205	75 19		 jne	 SHORT $LN26@devlist_cm

; 5986 :             {
; 5987 :                 // HHC02200 "%1d:%04X device not found"
; 5988 :                 devnotfound_msg( lcss, devnum );

  00207	0f b7 54 24 60	 movzx	 edx, WORD PTR devnum$[rsp]
  0020c	0f b7 4c 24 5c	 movzx	 ecx, WORD PTR lcss$[rsp]
  00211	e8 00 00 00 00	 call	 devnotfound_msg

; 5989 :                 return -1;

  00216	b8 ff ff ff ff	 mov	 eax, -1
  0021b	e9 01 08 00 00	 jmp	 $LN1@devlist_cm
$LN26@devlist_cm:

; 5990 :             }
; 5991 : 
; 5992 :             ssid = LCSS_TO_SSID( lcss );

  00220	0f b7 44 24 5c	 movzx	 eax, WORD PTR lcss$[rsp]
  00225	d1 e0		 shl	 eax, 1
  00227	83 c8 01	 or	 eax, 1
  0022a	66 89 44 24 58	 mov	 WORD PTR ssid$[rsp], ax
$LN24@devlist_cm:
$LN22@devlist_cm:

; 5993 :         }
; 5994 :     }
; 5995 : 
; 5996 :     // Since we wish to display the list of devices in ascending device
; 5997 :     // number order, we build our own private sorted array of DEVBLK
; 5998 :     // pointers and use that instead to make the devlist command wholly
; 5999 :     // immune from the actual order/sequence of the actual DEVBLK chain.
; 6000 : 
; 6001 :     // Note too that there is no lock to lock access to ALL device blocks
; 6002 :     // (even though there really SHOULD be). The only lock there is is one
; 6003 :     // to lock an individual DEVBLK (which doesn't do us much good here).
; 6004 : 
; 6005 :     if (!(orig_pDevBlkPtrs = malloc( sizeof( DEVBLK* ) * MAX_DEVLIST_DEVICES )))

  0022f	b9 00 00 08 00	 mov	 ecx, 524288		; 00080000H
  00234	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0023a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR orig_pDevBlkPtrs$[rsp], rax
  00242	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR orig_pDevBlkPtrs$[rsp], 0
  0024b	0f 85 a1 00 00
	00		 jne	 $LN27@devlist_cm

; 6006 :     {
; 6007 :         MSGBUF( buf, "malloc(%d)", (int)( sizeof( DEVBLK* ) * MAX_DEVLIST_DEVICES ));

  00251	41 b9 00 00 08
	00		 mov	 r9d, 524288		; 00080000H
  00257	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209154
  0025e	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  00263	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0026b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 6008 :         WRMSG( HHC02219, "E", buf, strerror( errno ));

  00271	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00277	8b 08		 mov	 ecx, DWORD PTR [rax]
  00279	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0027f	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv174[rsp], rax
  00287	b9 01 00 00 00	 mov	 ecx, 1
  0028c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00292	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tv174[rsp]
  0029a	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0029f	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  002a7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209155
  002b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209156
  002bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  002cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209157
  002d6	ba 78 17 00 00	 mov	 edx, 6008		; 00001778H
  002db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209158
  002e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6009 :         return -1;

  002e8	b8 ff ff ff ff	 mov	 eax, -1
  002ed	e9 2f 07 00 00	 jmp	 $LN1@devlist_cm
$LN27@devlist_cm:

; 6010 :     }
; 6011 : 
; 6012 :     nDevCount = 0;

  002f2	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR nDevCount$[rsp], 0

; 6013 :     pDevBlkPtr = orig_pDevBlkPtrs;

  002fb	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR orig_pDevBlkPtrs$[rsp]
  00303	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pDevBlkPtr$[rsp], rax

; 6014 : 
; 6015 :     for (dev = sysblk.firstdev; dev && nDevCount <= MAX_DEVLIST_DEVICES; dev = dev->nextdev)

  0030b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00312	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  00319	48 89 44 24 50	 mov	 QWORD PTR dev$[rsp], rax
  0031e	eb 0e		 jmp	 SHORT $LN7@devlist_cm
$LN5@devlist_cm:
  00320	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  00325	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00329	48 89 44 24 50	 mov	 QWORD PTR dev$[rsp], rax
$LN7@devlist_cm:
  0032e	48 83 7c 24 50
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00334	0f 84 58 01 00
	00		 je	 $LN6@devlist_cm
  0033a	48 81 7c 24 78
	00 00 01 00	 cmp	 QWORD PTR nDevCount$[rsp], 65536 ; 00010000H
  00343	0f 87 49 01 00
	00		 ja	 $LN6@devlist_cm

; 6016 :     {
; 6017 :         if (dev->allocated)  // (valid device?)

  00349	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  0034e	83 78 40 00	 cmp	 DWORD PTR [rax+64], 0
  00352	0f 84 35 01 00
	00		 je	 $LN28@devlist_cm

; 6018 :         {
; 6019 :             if (single_devnum && (dev->ssid != ssid || dev->devnum != devnum))

  00358	83 7c 24 70 00	 cmp	 DWORD PTR single_devnum$[rsp], 0
  0035d	74 26		 je	 SHORT $LN29@devlist_cm
  0035f	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  00364	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00368	0f b7 4c 24 58	 movzx	 ecx, WORD PTR ssid$[rsp]
  0036d	3b c1		 cmp	 eax, ecx
  0036f	75 12		 jne	 SHORT $LN30@devlist_cm
  00371	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  00376	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0037a	0f b7 4c 24 60	 movzx	 ecx, WORD PTR devnum$[rsp]
  0037f	3b c1		 cmp	 eax, ecx
  00381	74 02		 je	 SHORT $LN29@devlist_cm
$LN30@devlist_cm:

; 6020 :                 continue;

  00383	eb 9b		 jmp	 SHORT $LN5@devlist_cm
$LN29@devlist_cm:

; 6021 : 
; 6022 :             // Multiple devnum support is active when devncount > 0,
; 6023 :             // otherwise we are in single devnum or ALL devnum mode.
; 6024 :             for (i=0, dev_found=FALSE; dev_found==FALSE && i < devncount && !bTooMany; i++)

  00385	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0038e	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR dev_found$[rsp], 0
  00396	eb 0d		 jmp	 SHORT $LN10@devlist_cm
$LN8@devlist_cm:
  00398	48 8b 44 24 68	 mov	 rax, QWORD PTR i$[rsp]
  0039d	48 ff c0	 inc	 rax
  003a0	48 89 44 24 68	 mov	 QWORD PTR i$[rsp], rax
$LN10@devlist_cm:
  003a5	83 7c 24 64 00	 cmp	 DWORD PTR dev_found$[rsp], 0
  003aa	75 79		 jne	 SHORT $LN9@devlist_cm
  003ac	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR devncount$[rsp]
  003b4	48 39 44 24 68	 cmp	 QWORD PTR i$[rsp], rax
  003b9	73 6a		 jae	 SHORT $LN9@devlist_cm
  003bb	83 7c 24 74 00	 cmp	 DWORD PTR bTooMany$[rsp], 0
  003c0	75 63		 jne	 SHORT $LN9@devlist_cm

; 6025 :             {
; 6026 :                 if (1
; 6027 :                     && dev->ssid == ssid
; 6028 :                     && dev->devnum >= dnd.da[i].cuu1
; 6029 :                     && dev->devnum <= dnd.da[i].cuu2

  003c2	33 c0		 xor	 eax, eax
  003c4	83 f8 01	 cmp	 eax, 1
  003c7	74 57		 je	 SHORT $LN31@devlist_cm
  003c9	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  003ce	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  003d2	0f b7 4c 24 58	 movzx	 ecx, WORD PTR ssid$[rsp]
  003d7	3b c1		 cmp	 eax, ecx
  003d9	75 45		 jne	 SHORT $LN31@devlist_cm
  003db	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  003e0	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  003e4	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dnd$[rsp+8]
  003ec	48 8b 54 24 68	 mov	 rdx, QWORD PTR i$[rsp]
  003f1	0f b7 0c 91	 movzx	 ecx, WORD PTR [rcx+rdx*4]
  003f5	3b c1		 cmp	 eax, ecx
  003f7	7c 27		 jl	 SHORT $LN31@devlist_cm
  003f9	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  003fe	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00402	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dnd$[rsp+8]
  0040a	48 8b 54 24 68	 mov	 rdx, QWORD PTR i$[rsp]
  0040f	0f b7 4c 91 02	 movzx	 ecx, WORD PTR [rcx+rdx*4+2]
  00414	3b c1		 cmp	 eax, ecx
  00416	7f 08		 jg	 SHORT $LN31@devlist_cm

; 6030 :                 )
; 6031 :                     dev_found = TRUE;

  00418	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR dev_found$[rsp], 1
$LN31@devlist_cm:

; 6032 :             }

  00420	e9 73 ff ff ff	 jmp	 $LN8@devlist_cm
$LN9@devlist_cm:

; 6033 :             if (devncount > 0 && dev_found == FALSE)

  00425	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR devncount$[rsp], 0
  0042e	76 0c		 jbe	 SHORT $LN32@devlist_cm
  00430	83 7c 24 64 00	 cmp	 DWORD PTR dev_found$[rsp], 0
  00435	75 05		 jne	 SHORT $LN32@devlist_cm

; 6034 :                 continue;

  00437	e9 e4 fe ff ff	 jmp	 $LN5@devlist_cm
$LN32@devlist_cm:

; 6035 : 
; 6036 :             if (nDevCount < MAX_DEVLIST_DEVICES)

  0043c	48 81 7c 24 78
	00 00 01 00	 cmp	 QWORD PTR nDevCount$[rsp], 65536 ; 00010000H
  00445	73 3c		 jae	 SHORT $LN33@devlist_cm

; 6037 :             {
; 6038 :                 *pDevBlkPtr = dev;      // (save ptr to DEVBLK)

  00447	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pDevBlkPtr$[rsp]
  0044f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  00454	48 89 08	 mov	 QWORD PTR [rax], rcx

; 6039 :                 nDevCount++;            // (count array entries)

  00457	48 8b 44 24 78	 mov	 rax, QWORD PTR nDevCount$[rsp]
  0045c	48 ff c0	 inc	 rax
  0045f	48 89 44 24 78	 mov	 QWORD PTR nDevCount$[rsp], rax

; 6040 :                 pDevBlkPtr++;           // (bump to next entry)

  00464	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pDevBlkPtr$[rsp]
  0046c	48 83 c0 08	 add	 rax, 8
  00470	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pDevBlkPtr$[rsp], rax

; 6041 : 
; 6042 :                 if (single_devnum)

  00478	83 7c 24 70 00	 cmp	 DWORD PTR single_devnum$[rsp], 0
  0047d	74 02		 je	 SHORT $LN35@devlist_cm

; 6043 :                     break;

  0047f	eb 11		 jmp	 SHORT $LN6@devlist_cm
$LN35@devlist_cm:

; 6044 :             }

  00481	eb 0a		 jmp	 SHORT $LN34@devlist_cm
$LN33@devlist_cm:

; 6045 :             else
; 6046 :             {
; 6047 :                 bTooMany = TRUE;        // (no more room)

  00483	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR bTooMany$[rsp], 1

; 6048 :                 break;                  // (no more room)

  0048b	eb 05		 jmp	 SHORT $LN6@devlist_cm
$LN34@devlist_cm:
$LN28@devlist_cm:

; 6049 :             }
; 6050 :         }
; 6051 :     }

  0048d	e9 8e fe ff ff	 jmp	 $LN5@devlist_cm
$LN6@devlist_cm:
$LN13@devlist_cm:

; 6052 : 
; 6053 :     ASSERT( nDevCount <= MAX_DEVLIST_DEVICES );   // (sanity check)

  00492	48 81 7c 24 78
	00 00 01 00	 cmp	 QWORD PTR nDevCount$[rsp], 65536 ; 00010000H
  0049b	76 5c		 jbe	 SHORT $LN36@devlist_cm
$LN16@devlist_cm:
  0049d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG209168
  004a4	41 b8 a5 17 00
	00		 mov	 r8d, 6053		; 000017a5H
  004aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209169
  004b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209170
  004b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  004be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  004c4	85 c0		 test	 eax, eax
  004c6	74 20		 je	 SHORT $LN37@devlist_cm
  004c8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG209172
  004cf	41 b8 a5 17 00
	00		 mov	 r8d, 6053		; 000017a5H
  004d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209173
  004dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209174
  004e3	e8 00 00 00 00	 call	 DebuggerTrace
$LN37@devlist_cm:
  004e8	33 c0		 xor	 eax, eax
  004ea	85 c0		 test	 eax, eax
  004ec	75 af		 jne	 SHORT $LN16@devlist_cm
  004ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  004f4	85 c0		 test	 eax, eax
  004f6	74 01		 je	 SHORT $LN38@devlist_cm
  004f8	cc		 int	 3
$LN38@devlist_cm:
$LN36@devlist_cm:
  004f9	33 c0		 xor	 eax, eax
  004fb	85 c0		 test	 eax, eax
  004fd	75 93		 jne	 SHORT $LN13@devlist_cm

; 6054 : 
; 6055 :     // Sort the DEVBLK pointers into ascending sequence by device number.
; 6056 : 
; 6057 :     qsort( orig_pDevBlkPtrs, nDevCount, sizeof( DEVBLK* ), SortDevBlkPtrsAscendingByDevnum );

  004ff	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:SortDevBlkPtrsAscendingByDevnum
  00506	41 b8 08 00 00
	00		 mov	 r8d, 8
  0050c	48 8b 54 24 78	 mov	 rdx, QWORD PTR nDevCount$[rsp]
  00511	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR orig_pDevBlkPtrs$[rsp]
  00519	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 6058 : 
; 6059 :     // Now use our sorted array of DEVBLK pointers
; 6060 :     // to display our sorted list of devices...
; 6061 : 
; 6062 :     cnt = 0;

  0051f	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR cnt$[rsp], 0

; 6063 : 
; 6064 :     for (i = nDevCount, pDevBlkPtr = orig_pDevBlkPtrs; i; --i, pDevBlkPtr++)

  0052b	48 8b 44 24 78	 mov	 rax, QWORD PTR nDevCount$[rsp]
  00530	48 89 44 24 68	 mov	 QWORD PTR i$[rsp], rax
  00535	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR orig_pDevBlkPtrs$[rsp]
  0053d	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pDevBlkPtr$[rsp], rax
  00545	eb 21		 jmp	 SHORT $LN19@devlist_cm
$LN17@devlist_cm:
  00547	48 8b 44 24 68	 mov	 rax, QWORD PTR i$[rsp]
  0054c	48 ff c8	 dec	 rax
  0054f	48 89 44 24 68	 mov	 QWORD PTR i$[rsp], rax
  00554	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pDevBlkPtr$[rsp]
  0055c	48 83 c0 08	 add	 rax, 8
  00560	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pDevBlkPtr$[rsp], rax
$LN19@devlist_cm:
  00568	48 83 7c 24 68
	00		 cmp	 QWORD PTR i$[rsp], 0
  0056e	0f 84 ce 03 00
	00		 je	 $LN18@devlist_cm

; 6065 :     {
; 6066 :         dev = *pDevBlkPtr;                  // --> DEVBLK

  00574	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pDevBlkPtr$[rsp]
  0057c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0057f	48 89 44 24 50	 mov	 QWORD PTR dev$[rsp], rax

; 6067 : 
; 6068 :         /* Call device handler's query definition function */
; 6069 : 
; 6070 : #if defined( OPTION_SCSI_TAPE )
; 6071 :         if (TAPEDEVT_SCSITAPE == dev->tapedevt)

  00584	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  00589	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00590	83 f8 03	 cmp	 eax, 3
  00593	75 0a		 jne	 SHORT $LN39@devlist_cm

; 6072 :             try_scsi_refresh( dev );  // (see comments in function)

  00595	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  0059a	e8 00 00 00 00	 call	 try_scsi_refresh
$LN39@devlist_cm:

; 6073 : #endif
; 6074 :         dev->hnd->query( dev, &devclass, sizeof( devstat ), devstat );

  0059f	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  005a4	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  005ab	4c 8d 8c 24 00
	05 00 00	 lea	 r9, QWORD PTR devstat$[rsp]
  005b3	41 b8 00 04 00
	00		 mov	 r8d, 1024		; 00000400H
  005b9	48 8d 94 24 e0
	00 00 00	 lea	 rdx, QWORD PTR devclass$[rsp]
  005c1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  005c6	ff 50 18	 call	 QWORD PTR [rax+24]

; 6075 : 
; 6076 :         if (0
; 6077 :             || strlen(     devtype ) == 0
; 6078 :             || strcasecmp( devtype, devclass ) == 0

  005c9	33 c0		 xor	 eax, eax
  005cb	85 c0		 test	 eax, eax
  005cd	75 30		 jne	 SHORT $LN41@devlist_cm
  005cf	48 8d 8c 24 e8
	00 00 00	 lea	 rcx, QWORD PTR devtype$[rsp]
  005d7	e8 00 00 00 00	 call	 strlen
  005dc	48 85 c0	 test	 rax, rax
  005df	74 1e		 je	 SHORT $LN41@devlist_cm
  005e1	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR devclass$[rsp]
  005e9	48 8d 8c 24 e8
	00 00 00	 lea	 rcx, QWORD PTR devtype$[rsp]
  005f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  005f7	85 c0		 test	 eax, eax
  005f9	0f 85 3e 03 00
	00		 jne	 $LN40@devlist_cm
$LN41@devlist_cm:

; 6079 :         )
; 6080 :         {
; 6081 :             cnt++;

  005ff	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR cnt$[rsp]
  00607	48 ff c0	 inc	 rax
  0060a	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR cnt$[rsp], rax

; 6082 : 
; 6083 :             /* Display the device definition and status */
; 6084 :             if (dev == sysblk.sysgdev)

  00612	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00619	48 8b 80 c8 11
	00 00		 mov	 rax, QWORD PTR [rax+4552]
  00620	48 39 44 24 50	 cmp	 QWORD PTR dev$[rsp], rax
  00625	75 23		 jne	 SHORT $LN42@devlist_cm

; 6085 :                 MSGBUF( cdevnum, "%s", "SYSG  " );

  00627	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG209181
  0062e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209182
  00635	ba 08 00 00 00	 mov	 edx, 8
  0063a	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR cdevnum$[rsp]
  00642	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00648	eb 35		 jmp	 SHORT $LN43@devlist_cm
$LN42@devlist_cm:

; 6086 :             else
; 6087 :                 MSGBUF( cdevnum, "%1d:%04X", SSID_TO_LCSS( dev->ssid ),

  0064a	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  0064f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00653	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  00658	0f b7 49 44	 movzx	 ecx, WORD PTR [rcx+68]
  0065c	d1 f9		 sar	 ecx, 1
  0065e	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00662	44 8b c9	 mov	 r9d, ecx
  00665	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209183
  0066c	ba 08 00 00 00	 mov	 edx, 8
  00671	48 8d 8c 24 f0
	00 00 00	 lea	 rcx, QWORD PTR cdevnum$[rsp]
  00679	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN43@devlist_cm:

; 6088 :                     dev->devnum );
; 6089 : 
; 6090 :             MSGBUF( buf, "%s %4.4X %s %s%s%s"

  0067f	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  00684	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0068a	c1 e8 16	 shr	 eax, 22
  0068d	83 e0 01	 and	 eax, 1
  00690	85 c0		 test	 eax, eax
  00692	75 50		 jne	 SHORT $LN51@devlist_cm
  00694	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  00699	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0069f	c1 e8 17	 shr	 eax, 23
  006a2	83 e0 01	 and	 eax, 1
  006a5	85 c0		 test	 eax, eax
  006a7	75 3b		 jne	 SHORT $LN51@devlist_cm
  006a9	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  006ae	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  006b4	c1 e8 18	 shr	 eax, 24
  006b7	83 e0 01	 and	 eax, 1
  006ba	85 c0		 test	 eax, eax
  006bc	75 26		 jne	 SHORT $LN51@devlist_cm
  006be	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  006c3	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  006c9	c1 e8 1b	 shr	 eax, 27
  006cc	83 e0 01	 and	 eax, 1
  006cf	85 c0		 test	 eax, eax
  006d1	75 11		 jne	 SHORT $LN51@devlist_cm
  006d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209185
  006da	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv310[rsp], rax
  006e2	eb 0f		 jmp	 SHORT $LN52@devlist_cm
$LN51@devlist_cm:
  006e4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209184
  006eb	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv310[rsp], rax
$LN52@devlist_cm:
  006f3	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  006f8	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  006fe	c1 e8 13	 shr	 eax, 19
  00701	83 e0 01	 and	 eax, 1
  00704	85 c0		 test	 eax, eax
  00706	74 11		 je	 SHORT $LN53@devlist_cm
  00708	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209186
  0070f	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv316[rsp], rax
  00717	eb 0f		 jmp	 SHORT $LN54@devlist_cm
$LN53@devlist_cm:
  00719	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209187
  00720	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv316[rsp], rax
$LN54@devlist_cm:
  00728	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  0072d	83 b8 ac 01 00
	00 02		 cmp	 DWORD PTR [rax+428], 2
  00734	7e 11		 jle	 SHORT $LN55@devlist_cm
  00736	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209188
  0073d	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv320[rsp], rax
  00745	eb 0f		 jmp	 SHORT $LN56@devlist_cm
$LN55@devlist_cm:
  00747	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG209189
  0074e	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv320[rsp], rax
$LN56@devlist_cm:
  00756	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  0075b	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  0075f	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv310[rsp]
  00767	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0076c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv316[rsp]
  00774	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00779	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv320[rsp]
  00781	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00786	48 8d 8c 24 00
	05 00 00	 lea	 rcx, QWORD PTR devstat$[rsp]
  0078e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00793	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00797	4c 8d 8c 24 f0
	00 00 00	 lea	 r9, QWORD PTR cdevnum$[rsp]
  0079f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209190
  007a6	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  007ab	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  007b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 6091 :                 , cdevnum
; 6092 :                 , dev->devtype
; 6093 :                 , devstat
; 6094 :                 , dev->fd   >  2   ? "open "    : ""
; 6095 :                 , dev->busy        ? "busy "    : ""
; 6096 :                 , IOPENDING( dev ) ? "pending " : ""
; 6097 :             );
; 6098 : 
; 6099 :             // "%s" // devlist command
; 6100 :             WRMSG( HHC02279, "I", buf );

  007b9	b9 01 00 00 00	 mov	 ecx, 1
  007be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007c4	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  007cc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  007d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209191
  007d8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209192
  007e4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007e9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007ee	41 b9 03 00 00
	00		 mov	 r9d, 3
  007f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209193
  007fb	ba d4 17 00 00	 mov	 edx, 6100		; 000017d4H
  00800	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209194
  00807	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6101 : 
; 6102 :             if (dev->bs)

  0080d	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  00812	48 83 b8 b8 01
	00 00 00	 cmp	 QWORD PTR [rax+440], 0
  0081a	0f 84 1d 01 00
	00		 je	 $LN44@devlist_cm

; 6103 :             {
; 6104 :                 char *clientip, *clientname;
; 6105 : 
; 6106 :                 get_connected_client( dev, &clientip, &clientname );

  00820	4c 8d 84 24 c0
	00 00 00	 lea	 r8, QWORD PTR clientname$2[rsp]
  00828	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR clientip$1[rsp]
  00830	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  00835	e8 00 00 00 00	 call	 get_connected_client

; 6107 : 
; 6108 :                 if (clientip)

  0083a	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR clientip$1[rsp], 0
  00843	0f 84 85 00 00
	00		 je	 $LN45@devlist_cm

; 6109 :                 {
; 6110 :                     MSGBUF( buf, "     (client %s (%s) connected)",

  00849	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR clientname$2[rsp]
  00851	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00856	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR clientip$1[rsp]
  0085e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209198
  00865	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  0086a	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00872	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 6111 :                         clientip, clientname );
; 6112 : 
; 6113 :                     // "%s" // devlist command
; 6114 :                     WRMSG( HHC02279, "I", buf );

  00878	b9 01 00 00 00	 mov	 ecx, 1
  0087d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00883	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0088b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00890	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209199
  00897	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0089c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209200
  008a3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008a8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008ad	41 b9 03 00 00
	00		 mov	 r9d, 3
  008b3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209201
  008ba	ba e2 17 00 00	 mov	 edx, 6114		; 000017e2H
  008bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209202
  008c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6115 :                 }

  008cc	eb 53		 jmp	 SHORT $LN46@devlist_cm
$LN45@devlist_cm:

; 6116 :                 else
; 6117 :                 {
; 6118 :                     // "%s" // devlist command
; 6119 :                     WRMSG( HHC02279, "I", "     (no one currently connected)" );

  008ce	b9 01 00 00 00	 mov	 ecx, 1
  008d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209203
  008e0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  008e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209204
  008ec	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209205
  008f8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008fd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00902	41 b9 03 00 00
	00		 mov	 r9d, 3
  00908	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209206
  0090f	ba e7 17 00 00	 mov	 edx, 6119		; 000017e7H
  00914	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209207
  0091b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN46@devlist_cm:

; 6120 :                 }
; 6121 : 
; 6122 :                 free( clientip );

  00921	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR clientip$1[rsp]
  00929	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 6123 :                 free( clientname );

  0092f	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR clientname$2[rsp]
  00937	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN44@devlist_cm:
$LN40@devlist_cm:

; 6124 :             }
; 6125 :         }
; 6126 :     }

  0093d	e9 05 fc ff ff	 jmp	 $LN17@devlist_cm
$LN18@devlist_cm:

; 6127 : 
; 6128 :     free( orig_pDevBlkPtrs );

  00942	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR orig_pDevBlkPtrs$[rsp]
  0094a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 6129 :     if (devncount > 0)

  00950	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR devncount$[rsp], 0
  00959	76 0e		 jbe	 SHORT $LN47@devlist_cm

; 6130 :         free( dnd.da );

  0095b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dnd$[rsp+8]
  00963	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN47@devlist_cm:

; 6131 : 
; 6132 :     if (bTooMany)

  00969	83 7c 24 74 00	 cmp	 DWORD PTR bTooMany$[rsp], 0
  0096e	74 56		 je	 SHORT $LN48@devlist_cm

; 6133 :     {
; 6134 :         // "Not all devices shown (max %d)"
; 6135 :         WRMSG( HHC02237, "W", MAX_DEVLIST_DEVICES );

  00970	b9 01 00 00 00	 mov	 ecx, 1
  00975	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0097b	c7 44 24 38 00
	00 01 00	 mov	 DWORD PTR [rsp+56], 65536 ; 00010000H
  00983	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209210
  0098a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0098f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209211
  00996	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0099b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009a0	41 b9 03 00 00
	00		 mov	 r9d, 3
  009a6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209212
  009ad	ba f7 17 00 00	 mov	 edx, 6135		; 000017f7H
  009b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209213
  009b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6136 :         return 2;      // (treat as warning)

  009bf	b8 02 00 00 00	 mov	 eax, 2
  009c4	eb 5b		 jmp	 SHORT $LN1@devlist_cm
$LN48@devlist_cm:

; 6137 :     }
; 6138 : 
; 6139 :     if (cnt == 0)

  009c6	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR cnt$[rsp], 0
  009cf	75 4e		 jne	 SHORT $LN49@devlist_cm

; 6140 :     {
; 6141 :         // "Empty list"
; 6142 :         WRMSG( HHC02312, "W" );

  009d1	b9 01 00 00 00	 mov	 ecx, 1
  009d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209215
  009e3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  009e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209216
  009ef	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  009f4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009f9	41 b9 03 00 00
	00		 mov	 r9d, 3
  009ff	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209217
  00a06	ba fe 17 00 00	 mov	 edx, 6142		; 000017feH
  00a0b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209218
  00a12	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 6143 :         return 1;

  00a18	b8 01 00 00 00	 mov	 eax, 1
  00a1d	eb 02		 jmp	 SHORT $LN1@devlist_cm
$LN49@devlist_cm:

; 6144 :     }
; 6145 : 
; 6146 :     return 0;

  00a1f	33 c0		 xor	 eax, eax
$LN1@devlist_cm:

; 6147 : }

  00a21	48 8b 8c 24 00
	09 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00a29	48 33 cc	 xor	 rcx, rsp
  00a2c	e8 00 00 00 00	 call	 __security_check_cookie
  00a31	48 81 c4 10 09
	00 00		 add	 rsp, 2320		; 00000910H
  00a38	5f		 pop	 rdi
  00a39	c3		 ret	 0
devlist_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv145 = 32
name$ = 64
is_devclass_name PROC

; 5912 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 5913 :     return (0

  00009	33 c0		 xor	 eax, eax
  0000b	85 c0		 test	 eax, eax
  0000d	0f 85 2a 01 00
	00		 jne	 $LN3@is_devclas
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209077
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  0001f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00025	85 c0		 test	 eax, eax
  00027	0f 84 10 01 00
	00		 je	 $LN3@is_devclas
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209078
  00034	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0003f	85 c0		 test	 eax, eax
  00041	0f 84 f6 00 00
	00		 je	 $LN3@is_devclas
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209079
  0004e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00059	85 c0		 test	 eax, eax
  0005b	0f 84 dc 00 00
	00		 je	 $LN3@is_devclas
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209080
  00068	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00073	85 c0		 test	 eax, eax
  00075	0f 84 c2 00 00
	00		 je	 $LN3@is_devclas
  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209081
  00082	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  00087	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0008d	85 c0		 test	 eax, eax
  0008f	0f 84 a8 00 00
	00		 je	 $LN3@is_devclas
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209082
  0009c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  000a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  000a7	85 c0		 test	 eax, eax
  000a9	0f 84 8e 00 00
	00		 je	 $LN3@is_devclas
  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209083
  000b6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  000bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  000c1	85 c0		 test	 eax, eax
  000c3	74 78		 je	 SHORT $LN3@is_devclas
  000c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209084
  000cc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  000d7	85 c0		 test	 eax, eax
  000d9	74 62		 je	 SHORT $LN3@is_devclas
  000db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209085
  000e2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  000ed	85 c0		 test	 eax, eax
  000ef	74 4c		 je	 SHORT $LN3@is_devclas
  000f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209086
  000f8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  000fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00103	85 c0		 test	 eax, eax
  00105	74 36		 je	 SHORT $LN3@is_devclas
  00107	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209087
  0010e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  00113	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00119	85 c0		 test	 eax, eax
  0011b	74 20		 je	 SHORT $LN3@is_devclas
  0011d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209088
  00124	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0012f	85 c0		 test	 eax, eax
  00131	74 0a		 je	 SHORT $LN3@is_devclas
  00133	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv145[rsp], 0
  0013b	eb 08		 jmp	 SHORT $LN4@is_devclas
$LN3@is_devclas:
  0013d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv145[rsp], 1
$LN4@is_devclas:
  00145	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv145[rsp]

; 5914 :         || strcasecmp( name, "CHAN" ) == 0
; 5915 :         || strcasecmp( name, "CON"  ) == 0
; 5916 :         || strcasecmp( name, "CTCA" ) == 0
; 5917 :         || strcasecmp( name, "DASD" ) == 0
; 5918 :         || strcasecmp( name, "DSP"  ) == 0
; 5919 :         || strcasecmp( name, "FCP"  ) == 0
; 5920 :         || strcasecmp( name, "LINE" ) == 0
; 5921 :         || strcasecmp( name, "OSA"  ) == 0
; 5922 :         || strcasecmp( name, "PCH"  ) == 0
; 5923 :         || strcasecmp( name, "PRT"  ) == 0
; 5924 :         || strcasecmp( name, "RDR"  ) == 0
; 5925 :         || strcasecmp( name, "TAPE" ) == 0
; 5926 :     );
; 5927 : }

  0014a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0014e	c3		 ret	 0
is_devclass_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
rc$ = 0
pDevBlkPtr1$ = 32
pDevBlkPtr2$ = 40
SortDevBlkPtrsAscendingByDevnum PROC

; 5903 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 5904 :     int rc;
; 5905 : 
; 5906 :     rc = (int)((*(DEVBLK**)pDevBlkPtr1)->devnum) -

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR pDevBlkPtr1$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0001a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pDevBlkPtr2$[rsp]
  0001f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00022	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  00026	2b c1		 sub	 eax, ecx
  00028	89 04 24	 mov	 DWORD PTR rc$[rsp], eax

; 5907 :          (int)((*(DEVBLK**)pDevBlkPtr2)->devnum);
; 5908 :     return rc;

  0002b	8b 04 24	 mov	 eax, DWORD PTR rc$[rsp]

; 5909 : }

  0002e	48 83 c4 18	 add	 rsp, 24
  00032	c3		 ret	 0
SortDevBlkPtrsAscendingByDevnum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv77 = 80
tv131 = 88
tv133 = 96
tv145 = 104
tv147 = 112
argc$ = 144
argv$ = 152
cmdline$ = 160
loadparm_cmd PROC

; 5873 : {

$LN14:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
$LN4@loadparm_c:

; 5874 :     UNREFERENCED( cmdline );

  00015	33 c0		 xor	 eax, eax
  00017	85 c0		 test	 eax, eax
  00019	75 fa		 jne	 SHORT $LN4@loadparm_c
$LN7@loadparm_c:

; 5875 :     UPPER_ARGV_0( argv );

  0001b	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00024	74 47		 je	 SHORT $LN8@loadparm_c
  00026	b8 08 00 00 00	 mov	 eax, 8
  0002b	48 6b c0 00	 imul	 rax, rax, 0
  0002f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00037	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0003c	74 2f		 je	 SHORT $LN8@loadparm_c
  0003e	b8 08 00 00 00	 mov	 eax, 8
  00043	48 6b c0 00	 imul	 rax, rax, 0
  00047	b9 08 00 00 00	 mov	 ecx, 8
  0004c	48 6b c9 00	 imul	 rcx, rcx, 0
  00050	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00058	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0005c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00064	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00068	e8 00 00 00 00	 call	 strupper
$LN8@loadparm_c:
  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 a8		 jne	 SHORT $LN7@loadparm_c

; 5876 : 
; 5877 :     /* Update the default loadparm value if operand is specified */
; 5878 :     if (argc > 2)

  00073	83 bc 24 90 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0007b	7e 75		 jle	 SHORT $LN9@loadparm_c

; 5879 :     {
; 5880 :         // "Invalid number of arguments for %s"
; 5881 :         WRMSG( HHC01455, "E", argv[0] );

  0007d	b8 08 00 00 00	 mov	 eax, 8
  00082	48 6b c0 00	 imul	 rax, rax, 0
  00086	48 89 44 24 50	 mov	 QWORD PTR tv77[rsp], rax
  0008b	b9 01 00 00 00	 mov	 ecx, 1
  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00096	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0009e	48 8b 54 24 50	 mov	 rdx, QWORD PTR tv77[rsp]
  000a3	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000a7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209047
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209048
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209049
  000d6	ba f9 16 00 00	 mov	 edx, 5881		; 000016f9H
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209050
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5882 :         return -1;

  000e8	b8 ff ff ff ff	 mov	 eax, -1
  000ed	e9 6c 01 00 00	 jmp	 $LN1@loadparm_c
$LN9@loadparm_c:

; 5883 :     }
; 5884 : 
; 5885 :     if (argc == 2)

  000f2	83 bc 24 90 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000fa	0f 85 d5 00 00
	00		 jne	 $LN10@loadparm_c

; 5886 :     {
; 5887 :         STRLCPY( sysblk.loadparm, argv[1] );

  00100	b8 08 00 00 00	 mov	 eax, 8
  00105	48 6b c0 01	 imul	 rax, rax, 1
  00109	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00110	48 81 c1 38 13
	00 00		 add	 rcx, 4920		; 00001338H
  00117	41 b8 09 00 00
	00		 mov	 r8d, 9
  0011d	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00125	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 5888 :         if (MLVL( VERBOSE ))

  0012f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00136	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  0013c	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00141	85 c0		 test	 eax, eax
  00143	0f 84 87 00 00
	00		 je	 $LN12@loadparm_c

; 5889 :             // "%-14s set to %s"
; 5890 :             WRMSG( HHC02204, "I", argv[0], sysblk.loadparm );

  00149	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00150	48 05 38 13 00
	00		 add	 rax, 4920		; 00001338H
  00156	48 89 44 24 58	 mov	 QWORD PTR tv131[rsp], rax
  0015b	b9 08 00 00 00	 mov	 ecx, 8
  00160	48 6b c9 00	 imul	 rcx, rcx, 0
  00164	48 89 4c 24 60	 mov	 QWORD PTR tv133[rsp], rcx
  00169	b9 01 00 00 00	 mov	 ecx, 1
  0016e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00174	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv131[rsp]
  00179	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0017e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00186	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv133[rsp]
  0018b	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0018f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00194	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209054
  0019b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209055
  001a7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ac	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b1	41 b9 03 00 00
	00		 mov	 r9d, 3
  001b7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209056
  001be	ba 02 17 00 00	 mov	 edx, 5890		; 00001702H
  001c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209057
  001ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN12@loadparm_c:

; 5891 :     }

  001d0	e9 87 00 00 00	 jmp	 $LN11@loadparm_c
$LN10@loadparm_c:

; 5892 :     else
; 5893 :         // "%-14s: %s"
; 5894 :         WRMSG( HHC02203, "I", argv[0], sysblk.loadparm );

  001d5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001dc	48 05 38 13 00
	00		 add	 rax, 4920		; 00001338H
  001e2	48 89 44 24 68	 mov	 QWORD PTR tv145[rsp], rax
  001e7	b9 08 00 00 00	 mov	 ecx, 8
  001ec	48 6b c9 00	 imul	 rcx, rcx, 0
  001f0	48 89 4c 24 70	 mov	 QWORD PTR tv147[rsp], rcx
  001f5	b9 01 00 00 00	 mov	 ecx, 1
  001fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00200	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv145[rsp]
  00205	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0020a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00212	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv147[rsp]
  00217	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0021b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00220	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209058
  00227	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0022c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209059
  00233	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00238	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0023d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00243	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209060
  0024a	ba 06 17 00 00	 mov	 edx, 5894		; 00001706H
  0024f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209061
  00256	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN11@loadparm_c:

; 5895 : 
; 5896 :     return 0;

  0025c	33 c0		 xor	 eax, eax
$LN1@loadparm_c:

; 5897 : }

  0025e	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00265	c3		 ret	 0
loadparm_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
resetSuccessful$ = 80
fmt$ = 84
arglen$ = 88
tv78 = 96
tv136 = 104
tv163 = 112
tv179 = 120
tv199 = 128
tv214 = 136
tv244 = 144
tv310 = 152
tv345 = 160
chfmt$ = 168
__$ArrayPad$ = 208
argc$ = 240
argv$ = 248
cmdline$ = 256
cpuidfmt_cmd PROC

; 5724 : {

$LN34:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@cpuidfmt_c:

; 5725 :     size_t  arglen;
; 5726 :     u_int   fmt;
; 5727 :     char    chfmt[40];
; 5728 :     BYTE    resetSuccessful;
; 5729 : 
; 5730 :     UNREFERENCED( cmdline);

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@cpuidfmt_c
$LN7@cpuidfmt_c:

; 5731 : 
; 5732 :     UPPER_ARGV_0( argv );

  0002d	48 83 bc 24 f8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00036	74 47		 je	 SHORT $LN8@cpuidfmt_c
  00038	b8 08 00 00 00	 mov	 eax, 8
  0003d	48 6b c0 00	 imul	 rax, rax, 0
  00041	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00049	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0004e	74 2f		 je	 SHORT $LN8@cpuidfmt_c
  00050	b8 08 00 00 00	 mov	 eax, 8
  00055	48 6b c0 00	 imul	 rax, rax, 0
  00059	b9 08 00 00 00	 mov	 ecx, 8
  0005e	48 6b c9 00	 imul	 rcx, rcx, 0
  00062	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006a	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0006e	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00076	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0007a	e8 00 00 00 00	 call	 strupper
$LN8@cpuidfmt_c:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 a8		 jne	 SHORT $LN7@cpuidfmt_c

; 5733 : 
; 5734 :     if (argc < 1 || argc > 2)

  00085	83 bc 24 f0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0008d	7c 0a		 jl	 SHORT $LN10@cpuidfmt_c
  0008f	83 bc 24 f0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00097	7e 75		 jle	 SHORT $LN9@cpuidfmt_c
$LN10@cpuidfmt_c:

; 5735 :     {
; 5736 :         // "Invalid number of arguments for %s"
; 5737 :         WRMSG( HHC01455, "E", argv[0] );

  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	48 89 44 24 60	 mov	 QWORD PTR tv78[rsp], rax
  000a7	b9 01 00 00 00	 mov	 ecx, 1
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000b2	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000ba	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv78[rsp]
  000bf	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000c3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208952
  000cf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208953
  000db	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000e0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e5	41 b9 03 00 00
	00		 mov	 r9d, 3
  000eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208954
  000f2	ba 69 16 00 00	 mov	 edx, 5737		; 00001669H
  000f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208955
  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5738 :         return -1;

  00104	b8 ff ff ff ff	 mov	 eax, -1
  00109	e9 61 07 00 00	 jmp	 $LN1@cpuidfmt_c
$LN9@cpuidfmt_c:

; 5739 :     }
; 5740 : 
; 5741 :     /* Display CPUIDFMT*/
; 5742 :     if (argc == 1)

  0010e	83 bc 24 f0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00116	0f 85 db 00 00
	00		 jne	 $LN11@cpuidfmt_c

; 5743 :     {
; 5744 :         if (sysblk.lparmode)

  0011c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00123	8b 80 ec 00 00
	00		 mov	 eax, DWORD PTR [rax+236]
  00129	83 e0 01	 and	 eax, 1
  0012c	85 c0		 test	 eax, eax
  0012e	74 2d		 je	 SHORT $LN12@cpuidfmt_c

; 5745 :             MSGBUF( chfmt, "%d", sysblk.cpuidfmt );

  00130	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00137	0f b6 80 d7 00
	00 00		 movzx	 eax, BYTE PTR [rax+215]
  0013e	44 8b c8	 mov	 r9d, eax
  00141	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208959
  00148	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  0014d	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR chfmt$[rsp]
  00155	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  0015b	eb 1b		 jmp	 SHORT $LN13@cpuidfmt_c
$LN12@cpuidfmt_c:

; 5746 :         else
; 5747 :             STRLCPY( chfmt, "BASIC" );

  0015d	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  00163	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG208960
  0016a	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR chfmt$[rsp]
  00172	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
$LN13@cpuidfmt_c:

; 5748 : 
; 5749 :         // "%-14s: %s"
; 5750 :         WRMSG( HHC02203, "I", argv[0], chfmt );

  00178	b8 08 00 00 00	 mov	 eax, 8
  0017d	48 6b c0 00	 imul	 rax, rax, 0
  00181	48 89 44 24 68	 mov	 QWORD PTR tv136[rsp], rax
  00186	b9 01 00 00 00	 mov	 ecx, 1
  0018b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00191	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR chfmt$[rsp]
  00199	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0019e	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001a6	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv136[rsp]
  001ab	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001af	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208961
  001bb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208962
  001c7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001cc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001d1	41 b9 03 00 00
	00		 mov	 r9d, 3
  001d7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208963
  001de	ba 76 16 00 00	 mov	 edx, 5750		; 00001676H
  001e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208964
  001ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5751 :         return 0;

  001f0	33 c0		 xor	 eax, eax
  001f2	e9 78 06 00 00	 jmp	 $LN1@cpuidfmt_c
$LN11@cpuidfmt_c:

; 5752 :     }
; 5753 : 
; 5754 :     arglen = strlen( argv[1] );

  001f7	b8 08 00 00 00	 mov	 eax, 8
  001fc	48 6b c0 01	 imul	 rax, rax, 1
  00200	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00208	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0020c	e8 00 00 00 00	 call	 strlen
  00211	48 89 44 24 58	 mov	 QWORD PTR arglen$[rsp], rax

; 5755 : 
; 5756 :     /* Update the CPUIDFMT */
; 5757 :     if (1
; 5758 :         && arglen == 1
; 5759 :         && sscanf( argv[1], "%u", &fmt ) == 1

  00216	33 c0		 xor	 eax, eax
  00218	83 f8 01	 cmp	 eax, 1
  0021b	0f 84 f9 02 00
	00		 je	 $LN14@cpuidfmt_c
  00221	48 83 7c 24 58
	01		 cmp	 QWORD PTR arglen$[rsp], 1
  00227	0f 85 ed 02 00
	00		 jne	 $LN14@cpuidfmt_c
  0022d	b8 08 00 00 00	 mov	 eax, 8
  00232	48 6b c0 01	 imul	 rax, rax, 1
  00236	4c 8d 44 24 54	 lea	 r8, QWORD PTR fmt$[rsp]
  0023b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG208967
  00242	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0024a	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0024e	e8 00 00 00 00	 call	 sscanf
  00253	83 f8 01	 cmp	 eax, 1
  00256	0f 85 be 02 00
	00		 jne	 $LN14@cpuidfmt_c

; 5760 :     )
; 5761 :     {
; 5762 :         if (fmt > 1)

  0025c	83 7c 24 54 01	 cmp	 DWORD PTR fmt$[rsp], 1
  00261	0f 86 81 00 00
	00		 jbe	 $LN16@cpuidfmt_c

; 5763 :         {
; 5764 :             // "Invalid argument %s%s"
; 5765 :             WRMSG( HHC02205, "E", argv[1], ": must be either 0 or 1" );

  00267	b8 08 00 00 00	 mov	 eax, 8
  0026c	48 6b c0 01	 imul	 rax, rax, 1
  00270	48 89 44 24 70	 mov	 QWORD PTR tv163[rsp], rax
  00275	b9 01 00 00 00	 mov	 ecx, 1
  0027a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00280	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208969
  00287	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0028c	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00294	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv163[rsp]
  00299	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0029d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208970
  002a9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208971
  002b5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002ba	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002bf	41 b9 03 00 00
	00		 mov	 r9d, 3
  002c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208972
  002cc	ba 85 16 00 00	 mov	 edx, 5765		; 00001685H
  002d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208973
  002d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5766 :             return -1;

  002de	b8 ff ff ff ff	 mov	 eax, -1
  002e3	e9 87 05 00 00	 jmp	 $LN1@cpuidfmt_c
$LN16@cpuidfmt_c:

; 5767 :         }
; 5768 : 
; 5769 :         if (!sysblk.lparmode)

  002e8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002ef	8b 80 ec 00 00
	00		 mov	 eax, DWORD PTR [rax+236]
  002f5	83 e0 01	 and	 eax, 1
  002f8	85 c0		 test	 eax, eax
  002fa	0f 85 81 00 00
	00		 jne	 $LN17@cpuidfmt_c

; 5770 :         {
; 5771 :             // "Invalid argument %s%s"
; 5772 :             WRMSG( HHC02205, "E", argv[1],": not in LPAR mode" );

  00300	b8 08 00 00 00	 mov	 eax, 8
  00305	48 6b c0 01	 imul	 rax, rax, 1
  00309	48 89 44 24 78	 mov	 QWORD PTR tv179[rsp], rax
  0030e	b9 01 00 00 00	 mov	 ecx, 1
  00313	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00319	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208975
  00320	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00325	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0032d	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv179[rsp]
  00332	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00336	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0033b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208976
  00342	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00347	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208977
  0034e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00353	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00358	41 b9 03 00 00
	00		 mov	 r9d, 3
  0035e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208978
  00365	ba 8c 16 00 00	 mov	 edx, 5772		; 0000168cH
  0036a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208979
  00371	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5773 :             return -1;

  00377	b8 ff ff ff ff	 mov	 eax, -1
  0037c	e9 ee 04 00 00	 jmp	 $LN1@cpuidfmt_c
$LN17@cpuidfmt_c:

; 5774 :         }
; 5775 : 
; 5776 :         /* Setting format-0 cpuid format? */
; 5777 :         if (!fmt)

  00381	83 7c 24 54 00	 cmp	 DWORD PTR fmt$[rsp], 0
  00386	0f 85 b5 00 00
	00		 jne	 $LN18@cpuidfmt_c

; 5778 :         {
; 5779 :             if (!sysblk.lparnum || sysblk.lparnum > 16)

  0038c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00393	0f b7 80 f0 00
	00 00		 movzx	 eax, WORD PTR [rax+240]
  0039a	85 c0		 test	 eax, eax
  0039c	74 17		 je	 SHORT $LN21@cpuidfmt_c
  0039e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  003a5	0f b7 80 f0 00
	00 00		 movzx	 eax, WORD PTR [rax+240]
  003ac	83 f8 10	 cmp	 eax, 16
  003af	0f 8e 87 00 00
	00		 jle	 $LN20@cpuidfmt_c
$LN21@cpuidfmt_c:

; 5780 :             {
; 5781 :                 // "Invalid argument %s%s"
; 5782 :                 WRMSG( HHC02205, "E", argv[1],": LPAR number not in range of 1 to 10 (hex)" );

  003b5	b8 08 00 00 00	 mov	 eax, 8
  003ba	48 6b c0 01	 imul	 rax, rax, 1
  003be	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv199[rsp], rax
  003c6	b9 01 00 00 00	 mov	 ecx, 1
  003cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208984
  003d8	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003dd	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003e5	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv199[rsp]
  003ed	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  003f1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208985
  003fd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00402	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208986
  00409	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0040e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00413	41 b9 03 00 00
	00		 mov	 r9d, 3
  00419	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208987
  00420	ba 96 16 00 00	 mov	 edx, 5782		; 00001696H
  00425	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208988
  0042c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5783 :                 return -1;

  00432	b8 ff ff ff ff	 mov	 eax, -1
  00437	e9 33 04 00 00	 jmp	 $LN1@cpuidfmt_c
$LN20@cpuidfmt_c:

; 5784 :             }
; 5785 :         }

  0043c	e9 9b 00 00 00	 jmp	 $LN19@cpuidfmt_c
$LN18@cpuidfmt_c:

; 5786 :         else /* Setting format-1 cpuid format */
; 5787 :         {
; 5788 :             if (ARCH_370_IDX == sysblk.arch_mode)

  00441	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00448	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [rax+136], 0
  0044f	0f 85 87 00 00
	00		 jne	 $LN22@cpuidfmt_c

; 5789 :             {
; 5790 :                 // "Invalid argument %s%s"
; 5791 :                 WRMSG( HHC02205, "E", argv[1], ": must be 0 for System/370" );

  00455	b8 08 00 00 00	 mov	 eax, 8
  0045a	48 6b c0 01	 imul	 rax, rax, 1
  0045e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv214[rsp], rax
  00466	b9 01 00 00 00	 mov	 ecx, 1
  0046b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00471	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208990
  00478	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0047d	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00485	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv214[rsp]
  0048d	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00491	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00496	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208991
  0049d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208992
  004a9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004ae	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004b3	41 b9 03 00 00
	00		 mov	 r9d, 3
  004b9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208993
  004c0	ba 9f 16 00 00	 mov	 edx, 5791		; 0000169fH
  004c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208994
  004cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5792 :                 return -1;

  004d2	b8 ff ff ff ff	 mov	 eax, -1
  004d7	e9 93 03 00 00	 jmp	 $LN1@cpuidfmt_c
$LN22@cpuidfmt_c:
$LN19@cpuidfmt_c:

; 5793 :             }
; 5794 :         }
; 5795 : 
; 5796 :         /* Update the CPUIDFMT and reset all CPU Ids */
; 5797 : 
; 5798 :         OBTAIN_INTLOCK( NULL );

  004dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG208995
  004e3	33 c9		 xor	 ecx, ecx
  004e5	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 5799 : 
; 5800 :         if (sysblk.cpuidfmt != fmt)

  004ea	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  004f1	0f b6 80 d7 00
	00 00		 movzx	 eax, BYTE PTR [rax+215]
  004f8	3b 44 24 54	 cmp	 eax, DWORD PTR fmt$[rsp]
  004fc	74 17		 je	 SHORT $LN23@cpuidfmt_c

; 5801 :         {
; 5802 :             sysblk.cpuidfmt = fmt;

  004fe	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00505	0f b6 4c 24 54	 movzx	 ecx, BYTE PTR fmt$[rsp]
  0050a	88 88 d7 00 00
	00		 mov	 BYTE PTR [rax+215], cl

; 5803 :             setOperationMode();

  00510	e8 00 00 00 00	 call	 setOperationMode
$LN23@cpuidfmt_c:

; 5804 :         }
; 5805 :     }

  00515	e9 24 02 00 00	 jmp	 $LN15@cpuidfmt_c
$LN14@cpuidfmt_c:

; 5806 :     else if (1
; 5807 :         && arglen == 5
; 5808 :         && strcasecmp( argv[1], "BASIC" ) == 0

  0051a	33 c0		 xor	 eax, eax
  0051c	83 f8 01	 cmp	 eax, 1
  0051f	0f 84 92 01 00
	00		 je	 $LN24@cpuidfmt_c
  00525	48 83 7c 24 58
	05		 cmp	 QWORD PTR arglen$[rsp], 5
  0052b	0f 85 86 01 00
	00		 jne	 $LN24@cpuidfmt_c
  00531	b8 08 00 00 00	 mov	 eax, 8
  00536	48 6b c0 01	 imul	 rax, rax, 1
  0053a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG208999
  00541	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00549	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0054d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00553	85 c0		 test	 eax, eax
  00555	0f 85 5c 01 00
	00		 jne	 $LN24@cpuidfmt_c

; 5809 :     )
; 5810 :     {
; 5811 :         if (sysblk.lparmode)

  0055b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00562	8b 80 ec 00 00
	00		 mov	 eax, DWORD PTR [rax+236]
  00568	83 e0 01	 and	 eax, 1
  0056b	85 c0		 test	 eax, eax
  0056d	0f 84 87 00 00
	00		 je	 $LN26@cpuidfmt_c

; 5812 :         {
; 5813 :             // "Invalid argument %s%s"
; 5814 :             WRMSG( HHC02205, "E", argv[1],": In LPAR mode" );

  00573	b8 08 00 00 00	 mov	 eax, 8
  00578	48 6b c0 01	 imul	 rax, rax, 1
  0057c	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv244[rsp], rax
  00584	b9 01 00 00 00	 mov	 ecx, 1
  00589	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0058f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209001
  00596	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0059b	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  005a3	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tv244[rsp]
  005ab	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  005af	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209002
  005bb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209003
  005c7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005cc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005d1	41 b9 03 00 00
	00		 mov	 r9d, 3
  005d7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209004
  005de	ba b6 16 00 00	 mov	 edx, 5814		; 000016b6H
  005e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209005
  005ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5815 :             return -1;

  005f0	b8 ff ff ff ff	 mov	 eax, -1
  005f5	e9 75 02 00 00	 jmp	 $LN1@cpuidfmt_c
$LN26@cpuidfmt_c:

; 5816 :         }
; 5817 : 
; 5818 :         /* Make sure all CPUs are deconfigured or stopped */
; 5819 :         if (are_any_cpus_started())

  005fa	e8 00 00 00 00	 call	 are_any_cpus_started
  005ff	0f b6 c0	 movzx	 eax, al
  00602	85 c0		 test	 eax, eax
  00604	74 5d		 je	 SHORT $LN27@cpuidfmt_c

; 5820 :         {
; 5821 :             // "All CPU's must be stopped %s"
; 5822 :             WRMSG( HHC02253, "E", "to change CPUIDFMT" );

  00606	b9 01 00 00 00	 mov	 ecx, 1
  0060b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00611	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209007
  00618	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0061d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209008
  00624	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00629	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209009
  00630	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00635	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0063a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00640	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209010
  00647	ba be 16 00 00	 mov	 edx, 5822		; 000016beH
  0064c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209011
  00653	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5823 :             return HERRCPUONL;

  00659	b8 fd ff ff ff	 mov	 eax, -3
  0065e	e9 0c 02 00 00	 jmp	 $LN1@cpuidfmt_c
$LN27@cpuidfmt_c:

; 5824 :         }
; 5825 : 
; 5826 :         /* Update the CPUIDFMT and reset all CPU Ids */
; 5827 : 
; 5828 :         OBTAIN_INTLOCK( NULL );

  00663	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209012
  0066a	33 c9		 xor	 ecx, ecx
  0066c	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 5829 : 
; 5830 :         if (sysblk.cpuidfmt)

  00671	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00678	0f b6 80 d7 00
	00 00		 movzx	 eax, BYTE PTR [rax+215]
  0067f	85 c0		 test	 eax, eax
  00681	74 2f		 je	 SHORT $LN28@cpuidfmt_c

; 5831 :         {
; 5832 :             sysblk.cpuidfmt = 0;

  00683	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0068a	c6 80 d7 00 00
	00 00		 mov	 BYTE PTR [rax+215], 0

; 5833 :             sysblk.lparnum  = 0;

  00691	33 c0		 xor	 eax, eax
  00693	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0069a	66 89 81 f0 00
	00 00		 mov	 WORD PTR [rcx+240], ax

; 5834 :             sysblk.operation_mode = om_basic;

  006a1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  006a8	c7 80 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+232], 0
$LN28@cpuidfmt_c:

; 5835 :         }
; 5836 :     }

  006b2	e9 87 00 00 00	 jmp	 $LN25@cpuidfmt_c
$LN24@cpuidfmt_c:

; 5837 :     else
; 5838 :     {
; 5839 :         // "Invalid argument %s%s"
; 5840 :         WRMSG( HHC02205, "E", argv[1], "" );

  006b7	b8 08 00 00 00	 mov	 eax, 8
  006bc	48 6b c0 01	 imul	 rax, rax, 1
  006c0	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv310[rsp], rax
  006c8	b9 01 00 00 00	 mov	 ecx, 1
  006cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209014
  006da	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  006df	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  006e7	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR tv310[rsp]
  006ef	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  006f3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209015
  006ff	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00704	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209016
  0070b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00710	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00715	41 b9 03 00 00
	00		 mov	 r9d, 3
  0071b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209017
  00722	ba d0 16 00 00	 mov	 edx, 5840		; 000016d0H
  00727	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209018
  0072e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5841 :         return -1;

  00734	b8 ff ff ff ff	 mov	 eax, -1
  00739	e9 31 01 00 00	 jmp	 $LN1@cpuidfmt_c
$LN25@cpuidfmt_c:
$LN15@cpuidfmt_c:

; 5842 :     }
; 5843 : 
; 5844 :     resetSuccessful = resetAllCpuIds();

  0073e	e8 00 00 00 00	 call	 resetAllCpuIds
  00743	88 44 24 50	 mov	 BYTE PTR resetSuccessful$[rsp], al

; 5845 :     RELEASE_INTLOCK( NULL );

  00747	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209019
  0074e	33 c9		 xor	 ecx, ecx
  00750	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 5846 : 
; 5847 :     /* Abort if unable to successfully reset all CPU Ids */
; 5848 :     if (!resetSuccessful)

  00755	0f b6 44 24 50	 movzx	 eax, BYTE PTR resetSuccessful$[rsp]
  0075a	85 c0		 test	 eax, eax
  0075c	75 0a		 jne	 SHORT $LN29@cpuidfmt_c

; 5849 :         return -1;

  0075e	b8 ff ff ff ff	 mov	 eax, -1
  00763	e9 07 01 00 00	 jmp	 $LN1@cpuidfmt_c
$LN29@cpuidfmt_c:

; 5850 : 
; 5851 :     /* Report successful results */
; 5852 : 
; 5853 :     if (sysblk.lparmode)

  00768	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0076f	8b 80 ec 00 00
	00		 mov	 eax, DWORD PTR [rax+236]
  00775	83 e0 01	 and	 eax, 1
  00778	85 c0		 test	 eax, eax
  0077a	74 2d		 je	 SHORT $LN30@cpuidfmt_c

; 5854 :         MSGBUF( chfmt, "%d", sysblk.cpuidfmt );

  0077c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00783	0f b6 80 d7 00
	00 00		 movzx	 eax, BYTE PTR [rax+215]
  0078a	44 8b c8	 mov	 r9d, eax
  0078d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209023
  00794	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00799	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR chfmt$[rsp]
  007a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  007a7	eb 1b		 jmp	 SHORT $LN31@cpuidfmt_c
$LN30@cpuidfmt_c:

; 5855 :     else
; 5856 :         STRLCPY( chfmt, "BASIC" );

  007a9	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  007af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG209024
  007b6	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR chfmt$[rsp]
  007be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
$LN31@cpuidfmt_c:

; 5857 : 
; 5858 :     set_symbol( "CPUIDFMT", chfmt );

  007c4	48 8d 94 24 a8
	00 00 00	 lea	 rdx, QWORD PTR chfmt$[rsp]
  007cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209025
  007d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_set_symbol

; 5859 : 
; 5860 :     if (MLVL( VERBOSE ))

  007d9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  007e0	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  007e6	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  007eb	85 c0		 test	 eax, eax
  007ed	74 7e		 je	 SHORT $LN32@cpuidfmt_c

; 5861 :     {
; 5862 :         // "%-14s set to %s"
; 5863 :         WRMSG( HHC02204, "I", argv[0], chfmt );

  007ef	b8 08 00 00 00	 mov	 eax, 8
  007f4	48 6b c0 00	 imul	 rax, rax, 0
  007f8	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv345[rsp], rax
  00800	b9 01 00 00 00	 mov	 ecx, 1
  00805	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0080b	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR chfmt$[rsp]
  00813	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00818	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00820	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR tv345[rsp]
  00828	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0082c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00831	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209027
  00838	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0083d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209028
  00844	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00849	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0084e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00854	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG209029
  0085b	ba e7 16 00 00	 mov	 edx, 5863		; 000016e7H
  00860	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG209030
  00867	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN32@cpuidfmt_c:

; 5864 :     }
; 5865 : 
; 5866 :     return 0;

  0086d	33 c0		 xor	 eax, eax
$LN1@cpuidfmt_c:

; 5867 : }

  0086f	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00877	48 33 cc	 xor	 rcx, rsp
  0087a	e8 00 00 00 00	 call	 __security_check_cookie
  0087f	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  00886	c3		 ret	 0
cpuidfmt_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
cpuserial$ = 80
c$ = 84
tv78 = 88
tv132 = 96
tv185 = 104
tv197 = 112
tv200 = 120
chserial$ = 128
__$ArrayPad$ = 136
argc$ = 160
argv$ = 168
cmdline$ = 176
cpuserial_cmd PROC

; 5662 : {

$LN17:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@cpuserial_:

; 5663 :     U32   cpuserial;
; 5664 :     char  chserial[8];
; 5665 :     BYTE  c;
; 5666 : 
; 5667 :     UNREFERENCED( cmdline );

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@cpuserial_
$LN7@cpuserial_:

; 5668 : 
; 5669 :     UPPER_ARGV_0( argv );

  0002d	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00036	74 47		 je	 SHORT $LN8@cpuserial_
  00038	b8 08 00 00 00	 mov	 eax, 8
  0003d	48 6b c0 00	 imul	 rax, rax, 0
  00041	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00049	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0004e	74 2f		 je	 SHORT $LN8@cpuserial_
  00050	b8 08 00 00 00	 mov	 eax, 8
  00055	48 6b c0 00	 imul	 rax, rax, 0
  00059	b9 08 00 00 00	 mov	 ecx, 8
  0005e	48 6b c9 00	 imul	 rcx, rcx, 0
  00062	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006a	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0006e	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00076	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0007a	e8 00 00 00 00	 call	 strupper
$LN8@cpuserial_:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 a8		 jne	 SHORT $LN7@cpuserial_

; 5670 : 
; 5671 :     if (argc < 1 || argc > 2)

  00085	83 bc 24 a0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0008d	7c 0a		 jl	 SHORT $LN10@cpuserial_
  0008f	83 bc 24 a0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00097	7e 75		 jle	 SHORT $LN9@cpuserial_
$LN10@cpuserial_:

; 5672 :     {
; 5673 :         // "Invalid number of arguments for %s"
; 5674 :         WRMSG( HHC01455, "E", argv[0] );

  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	48 89 44 24 58	 mov	 QWORD PTR tv78[rsp], rax
  000a7	b9 01 00 00 00	 mov	 ecx, 1
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000b2	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000ba	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv78[rsp]
  000bf	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000c3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208903
  000cf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208904
  000db	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000e0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e5	41 b9 03 00 00
	00		 mov	 r9d, 3
  000eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208905
  000f2	ba 2a 16 00 00	 mov	 edx, 5674		; 0000162aH
  000f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208906
  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5675 :         return -1;

  00104	b8 ff ff ff ff	 mov	 eax, -1
  00109	e9 07 03 00 00	 jmp	 $LN1@cpuserial_
$LN9@cpuserial_:

; 5676 :     }
; 5677 : 
; 5678 :     /* Display CPU serial */
; 5679 :     if (argc == 1)

  0010e	83 bc 24 a0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00116	0f 85 c1 00 00
	00		 jne	 $LN11@cpuserial_

; 5680 :     {
; 5681 :         cpuserial = (U32) ((sysblk.cpuid & 0x00FFFFFF00000000ULL) >> 32);

  0011c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00123	48 b9 00 00 00
	00 ff ff ff 00	 mov	 rcx, 72057589742960640	; 00ffffff00000000H
  0012d	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00134	48 23 c1	 and	 rax, rcx
  00137	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  0013b	89 44 24 50	 mov	 DWORD PTR cpuserial$[rsp], eax

; 5682 :         MSGBUF( chserial, "%06X", cpuserial );

  0013f	44 8b 4c 24 50	 mov	 r9d, DWORD PTR cpuserial$[rsp]
  00144	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208908
  0014b	ba 08 00 00 00	 mov	 edx, 8
  00150	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR chserial$[rsp]
  00158	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 5683 : 
; 5684 :         // "%-14s: %s"
; 5685 :         WRMSG( HHC02203, "I", argv[0], chserial );

  0015e	b8 08 00 00 00	 mov	 eax, 8
  00163	48 6b c0 00	 imul	 rax, rax, 0
  00167	48 89 44 24 60	 mov	 QWORD PTR tv132[rsp], rax
  0016c	b9 01 00 00 00	 mov	 ecx, 1
  00171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00177	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR chserial$[rsp]
  0017f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00184	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0018c	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv132[rsp]
  00191	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00195	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0019a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208909
  001a1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208910
  001ad	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001b2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b7	41 b9 03 00 00
	00		 mov	 r9d, 3
  001bd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208911
  001c4	ba 35 16 00 00	 mov	 edx, 5685		; 00001635H
  001c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208912
  001d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5686 :         return 0;

  001d6	33 c0		 xor	 eax, eax
  001d8	e9 38 02 00 00	 jmp	 $LN1@cpuserial_
$LN11@cpuserial_:

; 5687 :     }
; 5688 : 
; 5689 :     /* Update CPU serial */
; 5690 :     if (1
; 5691 :         && (strlen( argv[1] ) >= 1)
; 5692 :         && (strlen( argv[1] ) <= 6)
; 5693 :         && (sscanf( argv[1], "%x%c", &cpuserial, &c ) == 1)

  001dd	33 c0		 xor	 eax, eax
  001df	83 f8 01	 cmp	 eax, 1
  001e2	0f 84 95 01 00
	00		 je	 $LN12@cpuserial_
  001e8	b8 08 00 00 00	 mov	 eax, 8
  001ed	48 6b c0 01	 imul	 rax, rax, 1
  001f1	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001f9	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  001fd	e8 00 00 00 00	 call	 strlen
  00202	48 83 f8 01	 cmp	 rax, 1
  00206	0f 82 71 01 00
	00		 jb	 $LN12@cpuserial_
  0020c	b8 08 00 00 00	 mov	 eax, 8
  00211	48 6b c0 01	 imul	 rax, rax, 1
  00215	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0021d	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00221	e8 00 00 00 00	 call	 strlen
  00226	48 83 f8 06	 cmp	 rax, 6
  0022a	0f 87 4d 01 00
	00		 ja	 $LN12@cpuserial_
  00230	b8 08 00 00 00	 mov	 eax, 8
  00235	48 6b c0 01	 imul	 rax, rax, 1
  00239	4c 8d 4c 24 54	 lea	 r9, QWORD PTR c$[rsp]
  0023e	4c 8d 44 24 50	 lea	 r8, QWORD PTR cpuserial$[rsp]
  00243	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG208915
  0024a	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00252	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00256	e8 00 00 00 00	 call	 sscanf
  0025b	83 f8 01	 cmp	 eax, 1
  0025e	0f 85 19 01 00
	00		 jne	 $LN12@cpuserial_

; 5694 :     )
; 5695 :     {
; 5696 :         /* Update all CPU IDs */
; 5697 :         if (!setAllCpuIds_lock( -1, -1, cpuserial, -1, false ))

  00264	c6 44 24 20 00	 mov	 BYTE PTR [rsp+32], 0
  00269	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  0026f	44 8b 44 24 50	 mov	 r8d, DWORD PTR cpuserial$[rsp]
  00274	66 ba ff ff	 mov	 dx, -1
  00278	b9 ff ff ff ff	 mov	 ecx, -1
  0027d	e8 00 00 00 00	 call	 setAllCpuIds_lock
  00282	0f b6 c0	 movzx	 eax, al
  00285	85 c0		 test	 eax, eax
  00287	75 0a		 jne	 SHORT $LN14@cpuserial_

; 5698 :             return -1;

  00289	b8 ff ff ff ff	 mov	 eax, -1
  0028e	e9 82 01 00 00	 jmp	 $LN1@cpuserial_
$LN14@cpuserial_:

; 5699 : 
; 5700 :         /* Show them the now newly-updated SYSBLK value */
; 5701 :         cpuserial = (U32) ((sysblk.cpuid & 0x00FFFFFF00000000ULL) >> 32);

  00293	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0029a	48 b9 00 00 00
	00 ff ff ff 00	 mov	 rcx, 72057589742960640	; 00ffffff00000000H
  002a4	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  002ab	48 23 c1	 and	 rax, rcx
  002ae	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  002b2	89 44 24 50	 mov	 DWORD PTR cpuserial$[rsp], eax

; 5702 :         MSGBUF( chserial, "%06X", cpuserial );

  002b6	44 8b 4c 24 50	 mov	 r9d, DWORD PTR cpuserial$[rsp]
  002bb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208917
  002c2	ba 08 00 00 00	 mov	 edx, 8
  002c7	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR chserial$[rsp]
  002cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 5703 : 
; 5704 :         set_symbol( "CPUSERIAL", chserial );

  002d5	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR chserial$[rsp]
  002dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208918
  002e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_set_symbol

; 5705 : 
; 5706 :         if (MLVL( VERBOSE ))

  002ea	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002f1	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  002f7	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  002fc	85 c0		 test	 eax, eax
  002fe	74 78		 je	 SHORT $LN15@cpuserial_

; 5707 :             // "%-14s set to %s"
; 5708 :             WRMSG( HHC02204, "I", argv[0], chserial );

  00300	b8 08 00 00 00	 mov	 eax, 8
  00305	48 6b c0 00	 imul	 rax, rax, 0
  00309	48 89 44 24 68	 mov	 QWORD PTR tv185[rsp], rax
  0030e	b9 01 00 00 00	 mov	 ecx, 1
  00313	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00319	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR chserial$[rsp]
  00321	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00326	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0032e	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv185[rsp]
  00333	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00337	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0033c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208920
  00343	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00348	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208921
  0034f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00354	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00359	41 b9 03 00 00
	00		 mov	 r9d, 3
  0035f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208922
  00366	ba 4c 16 00 00	 mov	 edx, 5708		; 0000164cH
  0036b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208923
  00372	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN15@cpuserial_:

; 5709 :     }

  00378	e9 96 00 00 00	 jmp	 $LN13@cpuserial_
$LN12@cpuserial_:

; 5710 :     else
; 5711 :     {
; 5712 :         // "Invalid value %s specified for %s"
; 5713 :         WRMSG( HHC01451, "E", argv[1], argv[0] );

  0037d	b8 08 00 00 00	 mov	 eax, 8
  00382	48 6b c0 00	 imul	 rax, rax, 0
  00386	48 89 44 24 70	 mov	 QWORD PTR tv197[rsp], rax
  0038b	b9 08 00 00 00	 mov	 ecx, 8
  00390	48 6b c9 01	 imul	 rcx, rcx, 1
  00394	48 89 4c 24 78	 mov	 QWORD PTR tv200[rsp], rcx
  00399	b9 01 00 00 00	 mov	 ecx, 1
  0039e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003a4	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003ac	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv197[rsp]
  003b1	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  003b5	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003ba	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003c2	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv200[rsp]
  003c7	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  003cb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208924
  003d7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208925
  003e3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003e8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003ed	41 b9 03 00 00
	00		 mov	 r9d, 3
  003f3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208926
  003fa	ba 51 16 00 00	 mov	 edx, 5713		; 00001651H
  003ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208927
  00406	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5714 :         return -1;

  0040c	b8 ff ff ff ff	 mov	 eax, -1
  00411	eb 02		 jmp	 SHORT $LN1@cpuserial_
$LN13@cpuserial_:

; 5715 :     }
; 5716 : 
; 5717 :     return 0;

  00413	33 c0		 xor	 eax, eax
$LN1@cpuserial_:

; 5718 : }

  00415	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0041d	48 33 cc	 xor	 rcx, rsp
  00420	e8 00 00 00 00	 call	 __security_check_cookie
  00425	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0042c	c3		 ret	 0
cpuserial_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
c$ = 80
tv201 = 84
cpumodel$ = 88
tv78 = 96
tv130 = 104
tv181 = 112
tv204 = 120
tv207 = 128
chmodel$ = 136
__$ArrayPad$ = 144
argc$ = 176
argv$ = 184
cmdline$ = 192
cpumodel_cmd PROC

; 5597 : {

$LN19:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@cpumodel_c:

; 5598 :     U32   cpumodel;
; 5599 :     char  chmodel[8];
; 5600 :     BYTE  c;
; 5601 : 
; 5602 :     UNREFERENCED( cmdline );

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@cpumodel_c
$LN7@cpumodel_c:

; 5603 : 
; 5604 :     UPPER_ARGV_0( argv );

  0002d	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00036	74 47		 je	 SHORT $LN8@cpumodel_c
  00038	b8 08 00 00 00	 mov	 eax, 8
  0003d	48 6b c0 00	 imul	 rax, rax, 0
  00041	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00049	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0004e	74 2f		 je	 SHORT $LN8@cpumodel_c
  00050	b8 08 00 00 00	 mov	 eax, 8
  00055	48 6b c0 00	 imul	 rax, rax, 0
  00059	b9 08 00 00 00	 mov	 ecx, 8
  0005e	48 6b c9 00	 imul	 rcx, rcx, 0
  00062	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006a	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0006e	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00076	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0007a	e8 00 00 00 00	 call	 strupper
$LN8@cpumodel_c:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 a8		 jne	 SHORT $LN7@cpumodel_c

; 5605 : 
; 5606 :     if (argc < 1 || argc > 2)

  00085	83 bc 24 b0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0008d	7c 0a		 jl	 SHORT $LN10@cpumodel_c
  0008f	83 bc 24 b0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00097	7e 75		 jle	 SHORT $LN9@cpumodel_c
$LN10@cpumodel_c:

; 5607 :     {
; 5608 :         // "Invalid number of arguments for %s"
; 5609 :         WRMSG( HHC01455, "E", argv[0] );

  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	48 89 44 24 60	 mov	 QWORD PTR tv78[rsp], rax
  000a7	b9 01 00 00 00	 mov	 ecx, 1
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000b2	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000ba	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv78[rsp]
  000bf	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000c3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208856
  000cf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208857
  000db	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000e0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e5	41 b9 03 00 00
	00		 mov	 r9d, 3
  000eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208858
  000f2	ba e9 15 00 00	 mov	 edx, 5609		; 000015e9H
  000f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208859
  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5610 :         return -1;

  00104	b8 ff ff ff ff	 mov	 eax, -1
  00109	e9 2b 03 00 00	 jmp	 $LN1@cpumodel_c
$LN9@cpumodel_c:

; 5611 :     }
; 5612 : 
; 5613 :     /* Display CPU model */
; 5614 :     if (argc == 1)

  0010e	83 bc 24 b0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00116	0f 85 aa 00 00
	00		 jne	 $LN11@cpumodel_c

; 5615 :     {
; 5616 :         MSGBUF( chmodel, "%04X", sysblk.cpumodel );

  0011c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00123	0f b7 80 d4 00
	00 00		 movzx	 eax, WORD PTR [rax+212]
  0012a	44 8b c8	 mov	 r9d, eax
  0012d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208861
  00134	ba 08 00 00 00	 mov	 edx, 8
  00139	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR chmodel$[rsp]
  00141	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 5617 : 
; 5618 :         // "%-14s: %s"
; 5619 :         WRMSG( HHC02203, "I", argv[0], chmodel );

  00147	b8 08 00 00 00	 mov	 eax, 8
  0014c	48 6b c0 00	 imul	 rax, rax, 0
  00150	48 89 44 24 68	 mov	 QWORD PTR tv130[rsp], rax
  00155	b9 01 00 00 00	 mov	 ecx, 1
  0015a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00160	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR chmodel$[rsp]
  00168	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0016d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00175	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv130[rsp]
  0017a	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0017e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00183	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208862
  0018a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208863
  00196	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0019b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a0	41 b9 03 00 00
	00		 mov	 r9d, 3
  001a6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208864
  001ad	ba f3 15 00 00	 mov	 edx, 5619		; 000015f3H
  001b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208865
  001b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5620 :         return 0;

  001bf	33 c0		 xor	 eax, eax
  001c1	e9 73 02 00 00	 jmp	 $LN1@cpumodel_c
$LN11@cpumodel_c:

; 5621 :     }
; 5622 : 
; 5623 :     /* Update CPU model */
; 5624 :     if (1
; 5625 :         && (strlen( argv[1] ) >= 2)
; 5626 :         && (strlen( argv[1] ) <= 4)
; 5627 :         && (sscanf( argv[1], "%x%c", &cpumodel, &c ) == 1)

  001c6	33 c0		 xor	 eax, eax
  001c8	83 f8 01	 cmp	 eax, 1
  001cb	0f 84 ca 01 00
	00		 je	 $LN12@cpumodel_c
  001d1	b8 08 00 00 00	 mov	 eax, 8
  001d6	48 6b c0 01	 imul	 rax, rax, 1
  001da	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001e2	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  001e6	e8 00 00 00 00	 call	 strlen
  001eb	48 83 f8 02	 cmp	 rax, 2
  001ef	0f 82 a6 01 00
	00		 jb	 $LN12@cpumodel_c
  001f5	b8 08 00 00 00	 mov	 eax, 8
  001fa	48 6b c0 01	 imul	 rax, rax, 1
  001fe	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00206	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0020a	e8 00 00 00 00	 call	 strlen
  0020f	48 83 f8 04	 cmp	 rax, 4
  00213	0f 87 82 01 00
	00		 ja	 $LN12@cpumodel_c
  00219	b8 08 00 00 00	 mov	 eax, 8
  0021e	48 6b c0 01	 imul	 rax, rax, 1
  00222	4c 8d 4c 24 50	 lea	 r9, QWORD PTR c$[rsp]
  00227	4c 8d 44 24 58	 lea	 r8, QWORD PTR cpumodel$[rsp]
  0022c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG208868
  00233	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0023b	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0023f	e8 00 00 00 00	 call	 sscanf
  00244	83 f8 01	 cmp	 eax, 1
  00247	0f 85 4e 01 00
	00		 jne	 $LN12@cpumodel_c

; 5628 :     )
; 5629 :     {
; 5630 :         /* Update all CPU IDs */
; 5631 :         if (!setAllCpuIds_lock( cpumodel, -1, -1, -1, false ))

  0024d	c6 44 24 20 00	 mov	 BYTE PTR [rsp+32], 0
  00252	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  00258	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  0025e	66 ba ff ff	 mov	 dx, -1
  00262	8b 4c 24 58	 mov	 ecx, DWORD PTR cpumodel$[rsp]
  00266	e8 00 00 00 00	 call	 setAllCpuIds_lock
  0026b	0f b6 c0	 movzx	 eax, al
  0026e	85 c0		 test	 eax, eax
  00270	75 0a		 jne	 SHORT $LN14@cpumodel_c

; 5632 :             return -1;

  00272	b8 ff ff ff ff	 mov	 eax, -1
  00277	e9 bd 01 00 00	 jmp	 $LN1@cpumodel_c
$LN14@cpumodel_c:

; 5633 : 
; 5634 :         MSGBUF( chmodel, "%04X", sysblk.cpumodel );

  0027c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00283	0f b7 80 d4 00
	00 00		 movzx	 eax, WORD PTR [rax+212]
  0028a	44 8b c8	 mov	 r9d, eax
  0028d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208870
  00294	ba 08 00 00 00	 mov	 edx, 8
  00299	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR chmodel$[rsp]
  002a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 5635 : 
; 5636 :         set_symbol( "CPUMODEL", chmodel );

  002a7	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR chmodel$[rsp]
  002af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208871
  002b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_set_symbol

; 5637 : 
; 5638 :         if (MLVL( VERBOSE ))

  002bc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002c3	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  002c9	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  002ce	85 c0		 test	 eax, eax
  002d0	0f 84 c0 00 00
	00		 je	 $LN15@cpumodel_c

; 5639 :         {
; 5640 :             // "%-14s set to %s"
; 5641 :             WRMSG( HHC02204, "I", argv[0], chmodel );

  002d6	b8 08 00 00 00	 mov	 eax, 8
  002db	48 6b c0 00	 imul	 rax, rax, 0
  002df	48 89 44 24 70	 mov	 QWORD PTR tv181[rsp], rax
  002e4	b9 01 00 00 00	 mov	 ecx, 1
  002e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002ef	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR chmodel$[rsp]
  002f7	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002fc	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00304	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv181[rsp]
  00309	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0030d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00312	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208873
  00319	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0031e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208874
  00325	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0032a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0032f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00335	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208875
  0033c	ba 09 16 00 00	 mov	 edx, 5641		; 00001609H
  00341	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208876
  00348	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5642 : 
; 5643 : #if defined( _FEATURE_073_TRANSACT_EXEC_FACILITY )
; 5644 :             txf_model_warning( FACILITY_ENABLED_ARCH( 073_TRANSACT_EXEC, ARCH_900_IDX ));

  0034e	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  00353	48 6b c0 02	 imul	 rax, rax, 2
  00357	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0035e	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00366	b9 01 00 00 00	 mov	 ecx, 1
  0036b	48 6b c9 09	 imul	 rcx, rcx, 9
  0036f	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00373	83 e0 40	 and	 eax, 64			; 00000040H
  00376	85 c0		 test	 eax, eax
  00378	75 0a		 jne	 SHORT $LN17@cpumodel_c
  0037a	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv201[rsp], 0
  00382	eb 08		 jmp	 SHORT $LN18@cpumodel_c
$LN17@cpumodel_c:
  00384	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv201[rsp], 1
$LN18@cpumodel_c:
  0038c	0f b6 4c 24 54	 movzx	 ecx, BYTE PTR tv201[rsp]
  00391	e8 00 00 00 00	 call	 txf_model_warning
$LN15@cpumodel_c:

; 5645 : #endif
; 5646 :         }
; 5647 :     }

  00396	e9 9c 00 00 00	 jmp	 $LN13@cpumodel_c
$LN12@cpumodel_c:

; 5648 :     else
; 5649 :     {
; 5650 :         // "Invalid value %s specified for %s"
; 5651 :         WRMSG( HHC01451, "E", argv[1], argv[0] );

  0039b	b8 08 00 00 00	 mov	 eax, 8
  003a0	48 6b c0 00	 imul	 rax, rax, 0
  003a4	48 89 44 24 78	 mov	 QWORD PTR tv204[rsp], rax
  003a9	b9 08 00 00 00	 mov	 ecx, 8
  003ae	48 6b c9 01	 imul	 rcx, rcx, 1
  003b2	48 89 8c 24 80
	00 00 00	 mov	 QWORD PTR tv207[rsp], rcx
  003ba	b9 01 00 00 00	 mov	 ecx, 1
  003bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003c5	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003cd	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv204[rsp]
  003d2	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  003d6	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003db	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003e3	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv207[rsp]
  003eb	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  003ef	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208877
  003fb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00400	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208878
  00407	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0040c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00411	41 b9 03 00 00
	00		 mov	 r9d, 3
  00417	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208879
  0041e	ba 13 16 00 00	 mov	 edx, 5651		; 00001613H
  00423	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208880
  0042a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5652 :         return -1;

  00430	b8 ff ff ff ff	 mov	 eax, -1
  00435	eb 02		 jmp	 SHORT $LN1@cpumodel_c
$LN13@cpumodel_c:

; 5653 :     }
; 5654 : 
; 5655 :     return 0;

  00437	33 c0		 xor	 eax, eax
$LN1@cpumodel_c:

; 5656 : }

  00439	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00441	48 33 cc	 xor	 rcx, rsp
  00444	e8 00 00 00 00	 call	 __security_check_cookie
  00449	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00450	c3		 ret	 0
cpumodel_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
force$1 = 80
c$ = 81
version$ = 84
sev$2 = 88
tv78 = 96
tv130 = 104
tv165 = 112
tv205 = 120
tv217 = 128
tv220 = 136
chversion$ = 144
__$ArrayPad$ = 160
argc$ = 192
argv$ = 200
cmdline$ = 208
cpuverid_cmd PROC

; 5518 : {

$LN21:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@cpuverid_c:

; 5519 :     U32   version;
; 5520 :     char  chversion[16];
; 5521 :     BYTE  c;
; 5522 : 
; 5523 :     UNREFERENCED( cmdline );

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@cpuverid_c
$LN7@cpuverid_c:

; 5524 : 
; 5525 :     UPPER_ARGV_0( argv );

  0002d	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00036	74 47		 je	 SHORT $LN8@cpuverid_c
  00038	b8 08 00 00 00	 mov	 eax, 8
  0003d	48 6b c0 00	 imul	 rax, rax, 0
  00041	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00049	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0004e	74 2f		 je	 SHORT $LN8@cpuverid_c
  00050	b8 08 00 00 00	 mov	 eax, 8
  00055	48 6b c0 00	 imul	 rax, rax, 0
  00059	b9 08 00 00 00	 mov	 ecx, 8
  0005e	48 6b c9 00	 imul	 rcx, rcx, 0
  00062	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006a	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0006e	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00076	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0007a	e8 00 00 00 00	 call	 strupper
$LN8@cpuverid_c:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 a8		 jne	 SHORT $LN7@cpuverid_c

; 5526 : 
; 5527 :     if (argc < 1 || argc > 3)

  00085	83 bc 24 c0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0008d	7c 0a		 jl	 SHORT $LN10@cpuverid_c
  0008f	83 bc 24 c0 00
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00097	7e 75		 jle	 SHORT $LN9@cpuverid_c
$LN10@cpuverid_c:

; 5528 :     {
; 5529 :         // "Invalid number of arguments for %s"
; 5530 :         WRMSG( HHC01455, "E", argv[0] );

  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	48 89 44 24 60	 mov	 QWORD PTR tv78[rsp], rax
  000a7	b9 01 00 00 00	 mov	 ecx, 1
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000b2	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000ba	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv78[rsp]
  000bf	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000c3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208799
  000cf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208800
  000db	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000e0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e5	41 b9 03 00 00
	00		 mov	 r9d, 3
  000eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208801
  000f2	ba 9a 15 00 00	 mov	 edx, 5530		; 0000159aH
  000f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208802
  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5531 :         return -1;

  00104	b8 ff ff ff ff	 mov	 eax, -1
  00109	e9 da 03 00 00	 jmp	 $LN1@cpuverid_c
$LN9@cpuverid_c:

; 5532 :     }
; 5533 : 
; 5534 :     /* Display CPU version */
; 5535 :     if (argc == 1)

  0010e	83 bc 24 c0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00116	0f 85 aa 00 00
	00		 jne	 $LN11@cpuverid_c

; 5536 :     {
; 5537 :         MSGBUF( chversion, "%02X", sysblk.cpuversion );

  0011c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00123	0f b6 80 d6 00
	00 00		 movzx	 eax, BYTE PTR [rax+214]
  0012a	44 8b c8	 mov	 r9d, eax
  0012d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208804
  00134	ba 10 00 00 00	 mov	 edx, 16
  00139	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR chversion$[rsp]
  00141	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 5538 : 
; 5539 :         // "%-14s: %s"
; 5540 :         WRMSG( HHC02203, "I", argv[0], chversion );

  00147	b8 08 00 00 00	 mov	 eax, 8
  0014c	48 6b c0 00	 imul	 rax, rax, 0
  00150	48 89 44 24 68	 mov	 QWORD PTR tv130[rsp], rax
  00155	b9 01 00 00 00	 mov	 ecx, 1
  0015a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00160	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR chversion$[rsp]
  00168	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0016d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00175	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv130[rsp]
  0017a	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0017e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00183	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208805
  0018a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208806
  00196	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0019b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a0	41 b9 03 00 00
	00		 mov	 r9d, 3
  001a6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208807
  001ad	ba a4 15 00 00	 mov	 edx, 5540		; 000015a4H
  001b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208808
  001b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5541 :         return 0;

  001bf	33 c0		 xor	 eax, eax
  001c1	e9 22 03 00 00	 jmp	 $LN1@cpuverid_c
$LN11@cpuverid_c:

; 5542 :     }
; 5543 : 
; 5544 :     /* Update CPU version */
; 5545 :     if (1
; 5546 :         && (strlen( argv[1] ) == 2)
; 5547 :         && (sscanf( argv[1], "%x%c", &version, &c ) == 1)

  001c6	33 c0		 xor	 eax, eax
  001c8	83 f8 01	 cmp	 eax, 1
  001cb	0f 84 73 02 00
	00		 je	 $LN12@cpuverid_c
  001d1	b8 08 00 00 00	 mov	 eax, 8
  001d6	48 6b c0 01	 imul	 rax, rax, 1
  001da	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001e2	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  001e6	e8 00 00 00 00	 call	 strlen
  001eb	48 83 f8 02	 cmp	 rax, 2
  001ef	0f 85 4f 02 00
	00		 jne	 $LN12@cpuverid_c
  001f5	b8 08 00 00 00	 mov	 eax, 8
  001fa	48 6b c0 01	 imul	 rax, rax, 1
  001fe	4c 8d 4c 24 51	 lea	 r9, QWORD PTR c$[rsp]
  00203	4c 8d 44 24 54	 lea	 r8, QWORD PTR version$[rsp]
  00208	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG208811
  0020f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00217	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0021b	e8 00 00 00 00	 call	 sscanf
  00220	83 f8 01	 cmp	 eax, 1
  00223	0f 85 1b 02 00
	00		 jne	 $LN12@cpuverid_c

; 5548 :     )
; 5549 :     {
; 5550 :         bool force = false;

  00229	c6 44 24 50 00	 mov	 BYTE PTR force$1[rsp], 0

; 5551 :         char* sev = "I";

  0022e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208812
  00235	48 89 44 24 58	 mov	 QWORD PTR sev$2[rsp], rax

; 5552 : 
; 5553 :         /* Check for 'FORCE' option */
; 5554 :         if (argc == 3)

  0023a	83 bc 24 c0 00
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00242	0f 85 b6 00 00
	00		 jne	 $LN14@cpuverid_c

; 5555 :         {
; 5556 :             if (CMD( argv[2], FORCE, 5 ))

  00248	b8 08 00 00 00	 mov	 eax, 8
  0024d	48 6b c0 02	 imul	 rax, rax, 2
  00251	41 b8 05 00 00
	00		 mov	 r8d, 5
  00257	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0025f	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00263	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208816
  0026a	e8 00 00 00 00	 call	 strcaseabbrev
  0026f	85 c0		 test	 eax, eax
  00271	74 0a		 je	 SHORT $LN15@cpuverid_c

; 5557 :                 force = true;

  00273	c6 44 24 50 01	 mov	 BYTE PTR force$1[rsp], 1
  00278	e9 81 00 00 00	 jmp	 $LN16@cpuverid_c
$LN15@cpuverid_c:

; 5558 :             else
; 5559 :             {
; 5560 :                 // "Invalid argument %s%s"
; 5561 :                 WRMSG( HHC02205, "E", argv[2], "" );

  0027d	b8 08 00 00 00	 mov	 eax, 8
  00282	48 6b c0 02	 imul	 rax, rax, 2
  00286	48 89 44 24 70	 mov	 QWORD PTR tv165[rsp], rax
  0028b	b9 01 00 00 00	 mov	 ecx, 1
  00290	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00296	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208817
  0029d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002a2	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002aa	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv165[rsp]
  002af	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  002b3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208818
  002bf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208819
  002cb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002d0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002d5	41 b9 03 00 00
	00		 mov	 r9d, 3
  002db	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208820
  002e2	ba b9 15 00 00	 mov	 edx, 5561		; 000015b9H
  002e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208821
  002ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5562 :                 return -1;

  002f4	b8 ff ff ff ff	 mov	 eax, -1
  002f9	e9 ea 01 00 00	 jmp	 $LN1@cpuverid_c
$LN16@cpuverid_c:
$LN14@cpuverid_c:

; 5563 :             }
; 5564 :         }
; 5565 : 
; 5566 :         /* Update all CPU identifiers */
; 5567 :         if (!setAllCpuIds_lock( -1, version, -1, -1, force ))

  002fe	0f b6 44 24 50	 movzx	 eax, BYTE PTR force$1[rsp]
  00303	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00307	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  0030d	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  00313	0f b7 54 24 54	 movzx	 edx, WORD PTR version$[rsp]
  00318	b9 ff ff ff ff	 mov	 ecx, -1
  0031d	e8 00 00 00 00	 call	 setAllCpuIds_lock
  00322	0f b6 c0	 movzx	 eax, al
  00325	85 c0		 test	 eax, eax
  00327	75 0a		 jne	 SHORT $LN17@cpuverid_c

; 5568 :             return -1;

  00329	b8 ff ff ff ff	 mov	 eax, -1
  0032e	e9 b5 01 00 00	 jmp	 $LN1@cpuverid_c
$LN17@cpuverid_c:

; 5569 : 
; 5570 :         MSGBUF( chversion,"%02X", sysblk.cpuversion );

  00333	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0033a	0f b6 80 d6 00
	00 00		 movzx	 eax, BYTE PTR [rax+214]
  00341	44 8b c8	 mov	 r9d, eax
  00344	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208823
  0034b	ba 10 00 00 00	 mov	 edx, 16
  00350	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR chversion$[rsp]
  00358	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 5571 :         set_symbol( "CPUVERID", chversion );

  0035e	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR chversion$[rsp]
  00366	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208824
  0036d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_set_symbol

; 5572 : 
; 5573 :         if (force)

  00373	0f b6 44 24 50	 movzx	 eax, BYTE PTR force$1[rsp]
  00378	85 c0		 test	 eax, eax
  0037a	74 37		 je	 SHORT $LN18@cpuverid_c

; 5574 :         {
; 5575 :             sev = "W";

  0037c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208826
  00383	48 89 44 24 58	 mov	 QWORD PTR sev$2[rsp], rax

; 5576 :             MSGBUF( chversion,"%02X (FORCED)", sysblk.cpuversion );

  00388	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0038f	0f b6 80 d6 00
	00 00		 movzx	 eax, BYTE PTR [rax+214]
  00396	44 8b c8	 mov	 r9d, eax
  00399	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208827
  003a0	ba 10 00 00 00	 mov	 edx, 16
  003a5	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR chversion$[rsp]
  003ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN18@cpuverid_c:

; 5577 :         }
; 5578 : 
; 5579 :         if (MLVL( VERBOSE ))

  003b3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  003ba	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  003c0	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  003c5	85 c0		 test	 eax, eax
  003c7	74 76		 je	 SHORT $LN19@cpuverid_c

; 5580 :             // "%-14s set to %s"
; 5581 :             WRMSG( HHC02204, sev, argv[0], chversion );

  003c9	b8 08 00 00 00	 mov	 eax, 8
  003ce	48 6b c0 00	 imul	 rax, rax, 0
  003d2	48 89 44 24 78	 mov	 QWORD PTR tv205[rsp], rax
  003d7	b9 01 00 00 00	 mov	 ecx, 1
  003dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003e2	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR chversion$[rsp]
  003ea	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003ef	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003f7	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv205[rsp]
  003fc	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00400	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00405	48 8b 4c 24 58	 mov	 rcx, QWORD PTR sev$2[rsp]
  0040a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0040f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208829
  00416	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0041b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00420	41 b9 03 00 00
	00		 mov	 r9d, 3
  00426	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208830
  0042d	ba cd 15 00 00	 mov	 edx, 5581		; 000015cdH
  00432	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208831
  00439	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN19@cpuverid_c:

; 5582 :     }

  0043f	e9 a2 00 00 00	 jmp	 $LN13@cpuverid_c
$LN12@cpuverid_c:

; 5583 :     else
; 5584 :     {
; 5585 :         // "Invalid value %s specified for %s"
; 5586 :         WRMSG( HHC01451, "E", argv[1], argv[0] );

  00444	b8 08 00 00 00	 mov	 eax, 8
  00449	48 6b c0 00	 imul	 rax, rax, 0
  0044d	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv217[rsp], rax
  00455	b9 08 00 00 00	 mov	 ecx, 8
  0045a	48 6b c9 01	 imul	 rcx, rcx, 1
  0045e	48 89 8c 24 88
	00 00 00	 mov	 QWORD PTR tv220[rsp], rcx
  00466	b9 01 00 00 00	 mov	 ecx, 1
  0046b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00471	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00479	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv217[rsp]
  00481	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00485	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0048a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00492	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv220[rsp]
  0049a	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0049e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208832
  004aa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208833
  004b6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004bb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004c0	41 b9 03 00 00
	00		 mov	 r9d, 3
  004c6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208834
  004cd	ba d2 15 00 00	 mov	 edx, 5586		; 000015d2H
  004d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208835
  004d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5587 :         return -1;

  004df	b8 ff ff ff ff	 mov	 eax, -1
  004e4	eb 02		 jmp	 SHORT $LN1@cpuverid_c
$LN13@cpuverid_c:

; 5588 :     }
; 5589 : 
; 5590 :     return 0;

  004e6	33 c0		 xor	 eax, eax
$LN1@cpuverid_c:

; 5591 : }

  004e8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  004f0	48 33 cc	 xor	 rcx, rsp
  004f3	e8 00 00 00 00	 call	 __security_check_cookie
  004f8	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  004ff	c3		 ret	 0
cpuverid_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
lparnum$ = 80
resetSuccessful$ = 84
c$ = 85
arglen$ = 88
tv133 = 96
tv248 = 104
tv289 = 112
tv78 = 120
tv140 = 128
tv175 = 136
tv218 = 144
tv300 = 152
chcpuidfmt$ = 160
chlparnum$ = 184
__$ArrayPad$ = 208
argc$ = 240
argv$ = 248
cmdline$ = 256
lparnum_cmd PROC

; 5394 : {

$LN38:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@lparnum_cm:

; 5395 :     size_t  arglen;
; 5396 :     U16     lparnum;
; 5397 :     char    chlparnum[20];
; 5398 :     char    chcpuidfmt[20];
; 5399 :     BYTE    c;
; 5400 :     BYTE    resetSuccessful;
; 5401 : 
; 5402 :     UNREFERENCED( cmdline );

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@lparnum_cm
$LN7@lparnum_cm:

; 5403 : 
; 5404 :     UPPER_ARGV_0( argv );

  0002d	48 83 bc 24 f8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00036	74 47		 je	 SHORT $LN8@lparnum_cm
  00038	b8 08 00 00 00	 mov	 eax, 8
  0003d	48 6b c0 00	 imul	 rax, rax, 0
  00041	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00049	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0004e	74 2f		 je	 SHORT $LN8@lparnum_cm
  00050	b8 08 00 00 00	 mov	 eax, 8
  00055	48 6b c0 00	 imul	 rax, rax, 0
  00059	b9 08 00 00 00	 mov	 ecx, 8
  0005e	48 6b c9 00	 imul	 rcx, rcx, 0
  00062	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006a	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0006e	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00076	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0007a	e8 00 00 00 00	 call	 strupper
$LN8@lparnum_cm:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 a8		 jne	 SHORT $LN7@lparnum_cm

; 5405 : 
; 5406 :     if (argc < 1 || argc > 2)

  00085	83 bc 24 f0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0008d	7c 0a		 jl	 SHORT $LN10@lparnum_cm
  0008f	83 bc 24 f0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00097	7e 75		 jle	 SHORT $LN9@lparnum_cm
$LN10@lparnum_cm:

; 5407 :     {
; 5408 :         // "Invalid command usage. Type 'help %s' for assistance."
; 5409 :         WRMSG( HHC02299, "E", argv[0] );

  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	48 89 44 24 78	 mov	 QWORD PTR tv78[rsp], rax
  000a7	b9 01 00 00 00	 mov	 ecx, 1
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000b2	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000ba	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv78[rsp]
  000bf	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000c3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208719
  000cf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208720
  000db	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000e0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e5	41 b9 03 00 00
	00		 mov	 r9d, 3
  000eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208721
  000f2	ba 21 15 00 00	 mov	 edx, 5409		; 00001521H
  000f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208722
  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5410 :         return -1;

  00104	b8 ff ff ff ff	 mov	 eax, -1
  00109	e9 b1 05 00 00	 jmp	 $LN1@lparnum_cm
$LN9@lparnum_cm:

; 5411 :     }
; 5412 : 
; 5413 :     /* Display LPAR identification number */
; 5414 :     if (argc == 1)

  0010e	83 bc 24 f0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00116	0f 85 0b 01 00
	00		 jne	 $LN11@lparnum_cm

; 5415 :     {
; 5416 :         if (sysblk.lparmode)

  0011c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00123	8b 80 ec 00 00
	00		 mov	 eax, DWORD PTR [rax+236]
  00129	83 e0 01	 and	 eax, 1
  0012c	85 c0		 test	 eax, eax
  0012e	74 57		 je	 SHORT $LN12@lparnum_cm

; 5417 :             MSGBUF( chcpuidfmt, sysblk.cpuidfmt ? "%02X" : "%01X",

  00130	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00137	0f b6 80 d7 00
	00 00		 movzx	 eax, BYTE PTR [rax+215]
  0013e	85 c0		 test	 eax, eax
  00140	74 0e		 je	 SHORT $LN32@lparnum_cm
  00142	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208726
  00149	48 89 44 24 60	 mov	 QWORD PTR tv133[rsp], rax
  0014e	eb 0c		 jmp	 SHORT $LN33@lparnum_cm
$LN32@lparnum_cm:
  00150	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208727
  00157	48 89 44 24 60	 mov	 QWORD PTR tv133[rsp], rax
$LN33@lparnum_cm:
  0015c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00163	0f b7 80 f0 00
	00 00		 movzx	 eax, WORD PTR [rax+240]
  0016a	44 8b c8	 mov	 r9d, eax
  0016d	4c 8b 44 24 60	 mov	 r8, QWORD PTR tv133[rsp]
  00172	ba 14 00 00 00	 mov	 edx, 20
  00177	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR chcpuidfmt$[rsp]
  0017f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00185	eb 1b		 jmp	 SHORT $LN13@lparnum_cm
$LN12@lparnum_cm:

; 5418 :                     sysblk.lparnum );
; 5419 :         else
; 5420 :             STRLCPY( chcpuidfmt, "BASIC" );

  00187	41 b8 14 00 00
	00		 mov	 r8d, 20
  0018d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG208728
  00194	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR chcpuidfmt$[rsp]
  0019c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
$LN13@lparnum_cm:

; 5421 : 
; 5422 :         // "%-14s: %s"
; 5423 :         WRMSG( HHC02203, "I", argv[0], chcpuidfmt );

  001a2	b8 08 00 00 00	 mov	 eax, 8
  001a7	48 6b c0 00	 imul	 rax, rax, 0
  001ab	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv140[rsp], rax
  001b3	b9 01 00 00 00	 mov	 ecx, 1
  001b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001be	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR chcpuidfmt$[rsp]
  001c6	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001cb	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001d3	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv140[rsp]
  001db	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001df	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208729
  001eb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208730
  001f7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001fc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00201	41 b9 03 00 00
	00		 mov	 r9d, 3
  00207	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208731
  0020e	ba 2f 15 00 00	 mov	 edx, 5423		; 0000152fH
  00213	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208732
  0021a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5424 :         return 0;

  00220	33 c0		 xor	 eax, eax
  00222	e9 98 04 00 00	 jmp	 $LN1@lparnum_cm
$LN11@lparnum_cm:

; 5425 :     }
; 5426 : 
; 5427 :     arglen = strlen( argv[1] );

  00227	b8 08 00 00 00	 mov	 eax, 8
  0022c	48 6b c0 01	 imul	 rax, rax, 1
  00230	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00238	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0023c	e8 00 00 00 00	 call	 strlen
  00241	48 89 44 24 58	 mov	 QWORD PTR arglen$[rsp], rax

; 5428 : 
; 5429 :     /* Update LPAR identification number */
; 5430 :     if (1
; 5431 :         && (arglen == 1 || arglen == 2)
; 5432 :         && sscanf( argv[1], "%hx%c", &lparnum, &c ) == 1

  00246	33 c0		 xor	 eax, eax
  00248	83 f8 01	 cmp	 eax, 1
  0024b	0f 84 9a 01 00
	00		 je	 $LN14@lparnum_cm
  00251	48 83 7c 24 58
	01		 cmp	 QWORD PTR arglen$[rsp], 1
  00257	74 0c		 je	 SHORT $LN16@lparnum_cm
  00259	48 83 7c 24 58
	02		 cmp	 QWORD PTR arglen$[rsp], 2
  0025f	0f 85 86 01 00
	00		 jne	 $LN14@lparnum_cm
$LN16@lparnum_cm:
  00265	b8 08 00 00 00	 mov	 eax, 8
  0026a	48 6b c0 01	 imul	 rax, rax, 1
  0026e	4c 8d 4c 24 55	 lea	 r9, QWORD PTR c$[rsp]
  00273	4c 8d 44 24 50	 lea	 r8, QWORD PTR lparnum$[rsp]
  00278	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG208736
  0027f	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00287	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0028b	e8 00 00 00 00	 call	 sscanf
  00290	83 f8 01	 cmp	 eax, 1
  00293	0f 85 52 01 00
	00		 jne	 $LN14@lparnum_cm

; 5433 :     )
; 5434 :     {
; 5435 :         if (1
; 5436 :             && ARCH_370_IDX == sysblk.arch_mode
; 5437 :             && (lparnum == 0 || lparnum > 16)

  00299	33 c0		 xor	 eax, eax
  0029b	83 f8 01	 cmp	 eax, 1
  0029e	0f 84 b2 00 00
	00		 je	 $LN17@lparnum_cm
  002a4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002ab	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [rax+136], 0
  002b2	0f 85 9e 00 00
	00		 jne	 $LN17@lparnum_cm
  002b8	0f b7 44 24 50	 movzx	 eax, WORD PTR lparnum$[rsp]
  002bd	85 c0		 test	 eax, eax
  002bf	74 0e		 je	 SHORT $LN18@lparnum_cm
  002c1	0f b7 44 24 50	 movzx	 eax, WORD PTR lparnum$[rsp]
  002c6	83 f8 10	 cmp	 eax, 16
  002c9	0f 8e 87 00 00
	00		 jle	 $LN17@lparnum_cm
$LN18@lparnum_cm:

; 5438 :         )
; 5439 :         {
; 5440 :             // "Invalid argument %s%s"
; 5441 :             WRMSG( HHC02205, "E", argv[1], ": must be 1 to 10 (hex) for ARCHMODE S370" );

  002cf	b8 08 00 00 00	 mov	 eax, 8
  002d4	48 6b c0 01	 imul	 rax, rax, 1
  002d8	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv175[rsp], rax
  002e0	b9 01 00 00 00	 mov	 ecx, 1
  002e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208739
  002f2	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002f7	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002ff	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv175[rsp]
  00307	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0030b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00310	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208740
  00317	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0031c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208741
  00323	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00328	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0032d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00333	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208742
  0033a	ba 41 15 00 00	 mov	 edx, 5441		; 00001541H
  0033f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208743
  00346	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5442 :             return -1;

  0034c	b8 ff ff ff ff	 mov	 eax, -1
  00351	e9 69 03 00 00	 jmp	 $LN1@lparnum_cm
$LN17@lparnum_cm:

; 5443 :         }
; 5444 : 
; 5445 :         /* Set new LPAR number, CPU ID format and operation mode */
; 5446 :         OBTAIN_INTLOCK( NULL );

  00356	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG208744
  0035d	33 c9		 xor	 ecx, ecx
  0035f	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 5447 :         enable_lparmode( true );

  00364	b1 01		 mov	 cl, 1
  00366	e8 00 00 00 00	 call	 enable_lparmode

; 5448 :         sysblk.lparnum = lparnum;

  0036b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00372	0f b7 4c 24 50	 movzx	 ecx, WORD PTR lparnum$[rsp]
  00377	66 89 88 f0 00
	00 00		 mov	 WORD PTR [rax+240], cx

; 5449 : 
; 5450 :         if (lparnum == 0)

  0037e	0f b7 44 24 50	 movzx	 eax, WORD PTR lparnum$[rsp]
  00383	85 c0		 test	 eax, eax
  00385	75 10		 jne	 SHORT $LN19@lparnum_cm

; 5451 :             sysblk.cpuidfmt = 1;

  00387	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0038e	c6 80 d7 00 00
	00 01		 mov	 BYTE PTR [rax+215], 1
  00395	eb 4a		 jmp	 SHORT $LN20@lparnum_cm
$LN19@lparnum_cm:

; 5452 :         else if (sysblk.cpuidfmt)

  00397	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0039e	0f b6 80 d7 00
	00 00		 movzx	 eax, BYTE PTR [rax+215]
  003a5	85 c0		 test	 eax, eax
  003a7	74 18		 je	 SHORT $LN21@lparnum_cm

; 5453 :         {
; 5454 :             if (arglen == 1)

  003a9	48 83 7c 24 58
	01		 cmp	 QWORD PTR arglen$[rsp], 1
  003af	75 0e		 jne	 SHORT $LN23@lparnum_cm

; 5455 :                 sysblk.cpuidfmt = 0;

  003b1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  003b8	c6 80 d7 00 00
	00 00		 mov	 BYTE PTR [rax+215], 0
$LN23@lparnum_cm:

; 5456 :         }

  003bf	eb 20		 jmp	 SHORT $LN22@lparnum_cm
$LN21@lparnum_cm:

; 5457 :         else if (arglen == 2 && lparnum != 16)

  003c1	48 83 7c 24 58
	02		 cmp	 QWORD PTR arglen$[rsp], 2
  003c7	75 18		 jne	 SHORT $LN24@lparnum_cm
  003c9	0f b7 44 24 50	 movzx	 eax, WORD PTR lparnum$[rsp]
  003ce	83 f8 10	 cmp	 eax, 16
  003d1	74 0e		 je	 SHORT $LN24@lparnum_cm

; 5458 :             sysblk.cpuidfmt = 1;

  003d3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  003da	c6 80 d7 00 00
	00 01		 mov	 BYTE PTR [rax+215], 1
$LN24@lparnum_cm:
$LN22@lparnum_cm:
$LN20@lparnum_cm:

; 5459 : 
; 5460 :         setOperationMode();

  003e1	e8 00 00 00 00	 call	 setOperationMode

; 5461 :     }

  003e6	e9 05 01 00 00	 jmp	 $LN15@lparnum_cm
$LN14@lparnum_cm:

; 5462 :     else if (1
; 5463 :         && arglen == 5
; 5464 :         && strcasecmp( argv[1], "BASIC" ) == 0

  003eb	33 c0		 xor	 eax, eax
  003ed	83 f8 01	 cmp	 eax, 1
  003f0	74 77		 je	 SHORT $LN25@lparnum_cm
  003f2	48 83 7c 24 58
	05		 cmp	 QWORD PTR arglen$[rsp], 5
  003f8	75 6f		 jne	 SHORT $LN25@lparnum_cm
  003fa	b8 08 00 00 00	 mov	 eax, 8
  003ff	48 6b c0 01	 imul	 rax, rax, 1
  00403	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG208753
  0040a	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00412	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00416	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0041c	85 c0		 test	 eax, eax
  0041e	75 49		 jne	 SHORT $LN25@lparnum_cm

; 5465 :     )
; 5466 :     {
; 5467 :         /* Set new LPAR number, CPU ID format and operation mode */
; 5468 :         OBTAIN_INTLOCK( NULL );

  00420	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG208754
  00427	33 c9		 xor	 ecx, ecx
  00429	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 5469 :         enable_lparmode( false );

  0042e	33 c9		 xor	 ecx, ecx
  00430	e8 00 00 00 00	 call	 enable_lparmode

; 5470 :         sysblk.lparnum  = 0;

  00435	33 c0		 xor	 eax, eax
  00437	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0043e	66 89 81 f0 00
	00 00		 mov	 WORD PTR [rcx+240], ax

; 5471 :         sysblk.cpuidfmt = 0;

  00445	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0044c	c6 80 d7 00 00
	00 00		 mov	 BYTE PTR [rax+215], 0

; 5472 :         sysblk.operation_mode = om_basic;

  00453	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0045a	c7 80 e8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+232], 0

; 5473 :     }

  00464	e9 87 00 00 00	 jmp	 $LN26@lparnum_cm
$LN25@lparnum_cm:

; 5474 :     else
; 5475 :     {
; 5476 :         // "Invalid argument %s%s"
; 5477 :         WRMSG( HHC02205, "E", argv[1],

  00469	b8 08 00 00 00	 mov	 eax, 8
  0046e	48 6b c0 01	 imul	 rax, rax, 1
  00472	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv218[rsp], rax
  0047a	b9 01 00 00 00	 mov	 ecx, 1
  0047f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00485	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208755
  0048c	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00491	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00499	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tv218[rsp]
  004a1	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  004a5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208756
  004b1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208757
  004bd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004c2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004c7	41 b9 03 00 00
	00		 mov	 r9d, 3
  004cd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208758
  004d4	ba 66 15 00 00	 mov	 edx, 5478		; 00001566H
  004d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208759
  004e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5478 :             ": must be BASIC, 1 to F (hex) or 00 to FF (hex)" );
; 5479 :         return -1;

  004e6	b8 ff ff ff ff	 mov	 eax, -1
  004eb	e9 cf 01 00 00	 jmp	 $LN1@lparnum_cm
$LN26@lparnum_cm:
$LN15@lparnum_cm:

; 5480 :     }
; 5481 : 
; 5482 :     /* Update all CPU IDs to reflect new LPARNUM */
; 5483 :     resetSuccessful = resetAllCpuIds();

  004f0	e8 00 00 00 00	 call	 resetAllCpuIds
  004f5	88 44 24 54	 mov	 BYTE PTR resetSuccessful$[rsp], al

; 5484 :     RELEASE_INTLOCK( NULL );

  004f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG208760
  00500	33 c9		 xor	 ecx, ecx
  00502	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 5485 : 
; 5486 :     /* Abort if unable to successfully reset all CPU Ids */
; 5487 :     if (!resetSuccessful)

  00507	0f b6 44 24 54	 movzx	 eax, BYTE PTR resetSuccessful$[rsp]
  0050c	85 c0		 test	 eax, eax
  0050e	75 0a		 jne	 SHORT $LN27@lparnum_cm

; 5488 :         return -1;

  00510	b8 ff ff ff ff	 mov	 eax, -1
  00515	e9 a5 01 00 00	 jmp	 $LN1@lparnum_cm
$LN27@lparnum_cm:

; 5489 : 
; 5490 :     /* Report successful results */
; 5491 :     if (om_basic == sysblk.operation_mode)

  0051a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00521	83 b8 e8 00 00
	00 00		 cmp	 DWORD PTR [rax+232], 0
  00528	75 3b		 jne	 SHORT $LN28@lparnum_cm

; 5492 :     {
; 5493 :         STRLCPY( chcpuidfmt, "BASIC" );

  0052a	41 b8 14 00 00
	00		 mov	 r8d, 20
  00530	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG208764
  00537	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR chcpuidfmt$[rsp]
  0053f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 5494 :         STRLCPY( chlparnum,  "BASIC" );

  00545	41 b8 14 00 00
	00		 mov	 r8d, 20
  0054b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG208765
  00552	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR chlparnum$[rsp]
  0055a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 5495 :     }

  00560	e9 9a 00 00 00	 jmp	 $LN29@lparnum_cm
$LN28@lparnum_cm:

; 5496 :     else // LPAR mode
; 5497 :     {
; 5498 :         STRLCPY( chcpuidfmt, sysblk.cpuidfmt ? "1"    : "0" );

  00565	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0056c	0f b6 80 d7 00
	00 00		 movzx	 eax, BYTE PTR [rax+215]
  00573	85 c0		 test	 eax, eax
  00575	74 0e		 je	 SHORT $LN34@lparnum_cm
  00577	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208766
  0057e	48 89 44 24 68	 mov	 QWORD PTR tv248[rsp], rax
  00583	eb 0c		 jmp	 SHORT $LN35@lparnum_cm
$LN34@lparnum_cm:
  00585	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208767
  0058c	48 89 44 24 68	 mov	 QWORD PTR tv248[rsp], rax
$LN35@lparnum_cm:
  00591	41 b8 14 00 00
	00		 mov	 r8d, 20
  00597	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv248[rsp]
  0059c	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR chcpuidfmt$[rsp]
  005a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 5499 :         MSGBUF(  chlparnum,  sysblk.cpuidfmt ? "%02X" : "%01X", sysblk.lparnum );

  005aa	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  005b1	0f b6 80 d7 00
	00 00		 movzx	 eax, BYTE PTR [rax+215]
  005b8	85 c0		 test	 eax, eax
  005ba	74 0e		 je	 SHORT $LN36@lparnum_cm
  005bc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208768
  005c3	48 89 44 24 70	 mov	 QWORD PTR tv289[rsp], rax
  005c8	eb 0c		 jmp	 SHORT $LN37@lparnum_cm
$LN36@lparnum_cm:
  005ca	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208769
  005d1	48 89 44 24 70	 mov	 QWORD PTR tv289[rsp], rax
$LN37@lparnum_cm:
  005d6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  005dd	0f b7 80 f0 00
	00 00		 movzx	 eax, WORD PTR [rax+240]
  005e4	44 8b c8	 mov	 r9d, eax
  005e7	4c 8b 44 24 70	 mov	 r8, QWORD PTR tv289[rsp]
  005ec	ba 14 00 00 00	 mov	 edx, 20
  005f1	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR chlparnum$[rsp]
  005f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN29@lparnum_cm:

; 5500 :     }
; 5501 : 
; 5502 :     set_symbol( "CPUIDFMT", chcpuidfmt );

  005ff	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR chcpuidfmt$[rsp]
  00607	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208770
  0060e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_set_symbol

; 5503 :     set_symbol( "LPARNUM",  chlparnum  );

  00614	48 8d 94 24 b8
	00 00 00	 lea	 rdx, QWORD PTR chlparnum$[rsp]
  0061c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208771
  00623	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_set_symbol

; 5504 : 
; 5505 :     if (MLVL( VERBOSE ))

  00629	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00630	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  00636	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0063b	85 c0		 test	 eax, eax
  0063d	74 7e		 je	 SHORT $LN30@lparnum_cm

; 5506 :     {
; 5507 :         // "%-14s set to %s"
; 5508 :         WRMSG( HHC02204, "I", argv[0], chlparnum );

  0063f	b8 08 00 00 00	 mov	 eax, 8
  00644	48 6b c0 00	 imul	 rax, rax, 0
  00648	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv300[rsp], rax
  00650	b9 01 00 00 00	 mov	 ecx, 1
  00655	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0065b	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR chlparnum$[rsp]
  00663	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00668	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00670	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR tv300[rsp]
  00678	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0067c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00681	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208773
  00688	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0068d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208774
  00694	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00699	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0069e	41 b9 03 00 00
	00		 mov	 r9d, 3
  006a4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208775
  006ab	ba 84 15 00 00	 mov	 edx, 5508		; 00001584H
  006b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208776
  006b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN30@lparnum_cm:

; 5509 :     }
; 5510 : 
; 5511 :     return 0;

  006bd	33 c0		 xor	 eax, eax
$LN1@lparnum_cm:

; 5512 : }

  006bf	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006c7	48 33 cc	 xor	 rcx, rsp
  006ca	e8 00 00 00 00	 call	 __security_check_cookie
  006cf	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  006d6	c3		 ret	 0
lparnum_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv78 = 80
tv91 = 88
tv93 = 96
tv146 = 104
tv148 = 112
argc$ = 144
argv$ = 152
cmdline$ = 160
lparname_cmd PROC

; 5360 : {

$LN14:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
$LN4@lparname_c:

; 5361 :     UNREFERENCED( cmdline );

  00015	33 c0		 xor	 eax, eax
  00017	85 c0		 test	 eax, eax
  00019	75 fa		 jne	 SHORT $LN4@lparname_c
$LN7@lparname_c:

; 5362 : 
; 5363 :     UPPER_ARGV_0( argv );

  0001b	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00024	74 47		 je	 SHORT $LN8@lparname_c
  00026	b8 08 00 00 00	 mov	 eax, 8
  0002b	48 6b c0 00	 imul	 rax, rax, 0
  0002f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00037	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0003c	74 2f		 je	 SHORT $LN8@lparname_c
  0003e	b8 08 00 00 00	 mov	 eax, 8
  00043	48 6b c0 00	 imul	 rax, rax, 0
  00047	b9 08 00 00 00	 mov	 ecx, 8
  0004c	48 6b c9 00	 imul	 rcx, rcx, 0
  00050	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00058	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0005c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00064	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00068	e8 00 00 00 00	 call	 strupper
$LN8@lparname_c:
  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 a8		 jne	 SHORT $LN7@lparname_c

; 5364 : 
; 5365 :     if (argc < 1 || argc > 2)

  00073	83 bc 24 90 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0007b	7c 0a		 jl	 SHORT $LN10@lparname_c
  0007d	83 bc 24 90 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00085	7e 75		 jle	 SHORT $LN9@lparname_c
$LN10@lparname_c:

; 5366 :     {
; 5367 :         // "Invalid command usage. Type 'help %s' for assistance."
; 5368 :         WRMSG( HHC02299, "E", argv[0] );

  00087	b8 08 00 00 00	 mov	 eax, 8
  0008c	48 6b c0 00	 imul	 rax, rax, 0
  00090	48 89 44 24 50	 mov	 QWORD PTR tv78[rsp], rax
  00095	b9 01 00 00 00	 mov	 ecx, 1
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000a8	48 8b 54 24 50	 mov	 rdx, QWORD PTR tv78[rsp]
  000ad	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000b1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208678
  000bd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208679
  000c9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000ce	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d3	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208680
  000e0	ba f8 14 00 00	 mov	 edx, 5368		; 000014f8H
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208681
  000ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5369 :         return -1;

  000f2	b8 ff ff ff ff	 mov	 eax, -1
  000f7	e9 5a 01 00 00	 jmp	 $LN1@lparname_c
$LN9@lparname_c:

; 5370 :     }
; 5371 : 
; 5372 :     if (argc == 1)

  000fc	83 bc 24 90 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00104	0f 85 86 00 00
	00		 jne	 $LN11@lparname_c

; 5373 :     {
; 5374 :         // "%-14s: %s"
; 5375 :         WRMSG(HHC02203, "I", argv[0], str_lparname());

  0010a	e8 00 00 00 00	 call	 str_lparname
  0010f	48 89 44 24 58	 mov	 QWORD PTR tv91[rsp], rax
  00114	b9 08 00 00 00	 mov	 ecx, 8
  00119	48 6b c9 00	 imul	 rcx, rcx, 0
  0011d	48 89 4c 24 60	 mov	 QWORD PTR tv93[rsp], rcx
  00122	b9 01 00 00 00	 mov	 ecx, 1
  00127	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0012d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv91[rsp]
  00132	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00137	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0013f	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv93[rsp]
  00144	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00148	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0014d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208683
  00154	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00159	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208684
  00160	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00165	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0016a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00170	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208685
  00177	ba ff 14 00 00	 mov	 edx, 5375		; 000014ffH
  0017c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208686
  00183	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5376 :         return 0;

  00189	33 c0		 xor	 eax, eax
  0018b	e9 c6 00 00 00	 jmp	 $LN1@lparname_c
$LN11@lparname_c:

; 5377 :     }
; 5378 : 
; 5379 :     set_lparname( argv[1] );

  00190	b8 08 00 00 00	 mov	 eax, 8
  00195	48 6b c0 01	 imul	 rax, rax, 1
  00199	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001a1	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  001a5	e8 00 00 00 00	 call	 set_lparname

; 5380 : 
; 5381 :     set_symbol( "LPARNAME", str_lparname() );

  001aa	e8 00 00 00 00	 call	 str_lparname
  001af	48 8b d0	 mov	 rdx, rax
  001b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208687
  001b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_set_symbol

; 5382 : 
; 5383 :     if (MLVL( VERBOSE ))

  001bf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001c6	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  001cc	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001d1	85 c0		 test	 eax, eax
  001d3	74 7f		 je	 SHORT $LN12@lparname_c

; 5384 :         // "%-14s set to %s"
; 5385 :         WRMSG( HHC02204, "I", argv[0], str_lparname() );

  001d5	e8 00 00 00 00	 call	 str_lparname
  001da	48 89 44 24 68	 mov	 QWORD PTR tv146[rsp], rax
  001df	b9 08 00 00 00	 mov	 ecx, 8
  001e4	48 6b c9 00	 imul	 rcx, rcx, 0
  001e8	48 89 4c 24 70	 mov	 QWORD PTR tv148[rsp], rcx
  001ed	b9 01 00 00 00	 mov	 ecx, 1
  001f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001f8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv146[rsp]
  001fd	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00202	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0020a	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv148[rsp]
  0020f	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00213	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00218	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208689
  0021f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00224	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208690
  0022b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00230	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00235	41 b9 03 00 00
	00		 mov	 r9d, 3
  0023b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208691
  00242	ba 09 15 00 00	 mov	 edx, 5385		; 00001509H
  00247	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208692
  0024e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN12@lparname_c:

; 5386 : 
; 5387 :     return 0;

  00254	33 c0		 xor	 eax, eax
$LN1@lparname_c:

; 5388 : }

  00256	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0025d	c3		 ret	 0
lparname_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
shrdport$ = 80
c$ = 84
tv82 = 88
tv134 = 96
tv184 = 104
tv187 = 112
tv209 = 120
buf$ = 128
__$ArrayPad$ = 144
argc$ = 176
argv$ = 184
cmdline$ = 192
shrdport_cmd PROC

; 5295 : {

$LN22:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 5296 :     static int default_shrdport = SHARED_DEFAULT_PORT;
; 5297 :     U16  shrdport;
; 5298 :     BYTE c;
; 5299 :     char buf[16] = {0};

  00028	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR buf$[rsp]
  00030	48 8b f8	 mov	 rdi, rax
  00033	33 c0		 xor	 eax, eax
  00035	b9 10 00 00 00	 mov	 ecx, 16
  0003a	f3 aa		 rep stosb
$LN4@shrdport_c:

; 5300 : 
; 5301 :     UNREFERENCED( cmdline );

  0003c	33 c0		 xor	 eax, eax
  0003e	85 c0		 test	 eax, eax
  00040	75 fa		 jne	 SHORT $LN4@shrdport_c
$LN7@shrdport_c:

; 5302 : 
; 5303 :     UPPER_ARGV_0( argv );

  00042	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  0004b	74 47		 je	 SHORT $LN8@shrdport_c
  0004d	b8 08 00 00 00	 mov	 eax, 8
  00052	48 6b c0 00	 imul	 rax, rax, 0
  00056	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0005e	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00063	74 2f		 je	 SHORT $LN8@shrdport_c
  00065	b8 08 00 00 00	 mov	 eax, 8
  0006a	48 6b c0 00	 imul	 rax, rax, 0
  0006e	b9 08 00 00 00	 mov	 ecx, 8
  00073	48 6b c9 00	 imul	 rcx, rcx, 0
  00077	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0007f	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00083	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0008b	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0008f	e8 00 00 00 00	 call	 strupper
$LN8@shrdport_c:
  00094	33 c0		 xor	 eax, eax
  00096	85 c0		 test	 eax, eax
  00098	75 a8		 jne	 SHORT $LN7@shrdport_c

; 5304 : 
; 5305 :     /* Check for correct number of arguments */
; 5306 :     if (argc < 1 || argc > 2)

  0009a	83 bc 24 b0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  000a2	7c 0a		 jl	 SHORT $LN10@shrdport_c
  000a4	83 bc 24 b0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000ac	7e 75		 jle	 SHORT $LN9@shrdport_c
$LN10@shrdport_c:

; 5307 :     {
; 5308 :         // "Invalid number of arguments for %s"
; 5309 :         WRMSG( HHC01455, "E", argv[0] );

  000ae	b8 08 00 00 00	 mov	 eax, 8
  000b3	48 6b c0 00	 imul	 rax, rax, 0
  000b7	48 89 44 24 58	 mov	 QWORD PTR tv82[rsp], rax
  000bc	b9 01 00 00 00	 mov	 ecx, 1
  000c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000c7	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000cf	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv82[rsp]
  000d4	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000d8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208630
  000e4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208631
  000f0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000fa	41 b9 03 00 00
	00		 mov	 r9d, 3
  00100	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208632
  00107	ba bd 14 00 00	 mov	 edx, 5309		; 000014bdH
  0010c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208633
  00113	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5310 :         return -1;

  00119	b8 ff ff ff ff	 mov	 eax, -1
  0011e	e9 11 03 00 00	 jmp	 $LN1@shrdport_c
$LN9@shrdport_c:

; 5311 :     }
; 5312 : 
; 5313 :     /* Report current shared device port number */
; 5314 :     if (argc < 2)

  00123	83 bc 24 b0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0012b	0f 8d aa 00 00
	00		 jge	 $LN11@shrdport_c

; 5315 :     {
; 5316 :         // "%-14s: %s"
; 5317 :         MSGBUF( buf, "%hu", sysblk.shrdport );

  00131	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00138	0f b7 80 ac 13
	00 00		 movzx	 eax, WORD PTR [rax+5036]
  0013f	44 8b c8	 mov	 r9d, eax
  00142	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208635
  00149	ba 10 00 00 00	 mov	 edx, 16
  0014e	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00156	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 5318 :         WRMSG( HHC02203, "I", argv[0], buf );

  0015c	b8 08 00 00 00	 mov	 eax, 8
  00161	48 6b c0 00	 imul	 rax, rax, 0
  00165	48 89 44 24 60	 mov	 QWORD PTR tv134[rsp], rax
  0016a	b9 01 00 00 00	 mov	 ecx, 1
  0016f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00175	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0017d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00182	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0018a	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv134[rsp]
  0018f	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00193	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00198	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208636
  0019f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208637
  001ab	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001b0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b5	41 b9 03 00 00
	00		 mov	 r9d, 3
  001bb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208638
  001c2	ba c6 14 00 00	 mov	 edx, 5318		; 000014c6H
  001c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208639
  001ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5319 :         return 0;

  001d4	33 c0		 xor	 eax, eax
  001d6	e9 59 02 00 00	 jmp	 $LN1@shrdport_c
$LN11@shrdport_c:

; 5320 :     }
; 5321 : 
; 5322 :     /* Update shared device port number */
; 5323 :     if (CMD( argv[1], START, 5 ))

  001db	b8 08 00 00 00	 mov	 eax, 8
  001e0	48 6b c0 01	 imul	 rax, rax, 1
  001e4	41 b8 05 00 00
	00		 mov	 r8d, 5
  001ea	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001f2	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  001f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208642
  001fd	e8 00 00 00 00	 call	 strcaseabbrev
  00202	85 c0		 test	 eax, eax
  00204	74 11		 je	 SHORT $LN12@shrdport_c

; 5324 :         configure_shrdport( default_shrdport );

  00206	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR ?default_shrdport@?1??shrdport_cmd@@9@9
  0020d	e8 00 00 00 00	 call	 configure_shrdport
  00212	e9 5e 01 00 00	 jmp	 $LN13@shrdport_c
$LN12@shrdport_c:

; 5325 :     else
; 5326 :     if (CMD( argv[1], STOP, 4 ))

  00217	b8 08 00 00 00	 mov	 eax, 8
  0021c	48 6b c0 01	 imul	 rax, rax, 1
  00220	41 b8 04 00 00
	00		 mov	 r8d, 4
  00226	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0022e	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00232	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208645
  00239	e8 00 00 00 00	 call	 strcaseabbrev
  0023e	85 c0		 test	 eax, eax
  00240	74 0c		 je	 SHORT $LN14@shrdport_c

; 5327 :         configure_shrdport( 0 );

  00242	33 c9		 xor	 ecx, ecx
  00244	e8 00 00 00 00	 call	 configure_shrdport
  00249	e9 27 01 00 00	 jmp	 $LN15@shrdport_c
$LN14@shrdport_c:

; 5328 :     else
; 5329 :     if (1
; 5330 :         && strlen(  argv[1] ) >= 1
; 5331 :         && sscanf( argv[1], "%hu%c", &shrdport, &c ) == 1
; 5332 :         && (shrdport >= 1024 || shrdport == 0)

  0024e	33 c0		 xor	 eax, eax
  00250	83 f8 01	 cmp	 eax, 1
  00253	0f 84 83 00 00
	00		 je	 $LN16@shrdport_c
  00259	b8 08 00 00 00	 mov	 eax, 8
  0025e	48 6b c0 01	 imul	 rax, rax, 1
  00262	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0026a	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0026e	e8 00 00 00 00	 call	 strlen
  00273	48 83 f8 01	 cmp	 rax, 1
  00277	72 63		 jb	 SHORT $LN16@shrdport_c
  00279	b8 08 00 00 00	 mov	 eax, 8
  0027e	48 6b c0 01	 imul	 rax, rax, 1
  00282	4c 8d 4c 24 54	 lea	 r9, QWORD PTR c$[rsp]
  00287	4c 8d 44 24 50	 lea	 r8, QWORD PTR shrdport$[rsp]
  0028c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG208648
  00293	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0029b	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0029f	e8 00 00 00 00	 call	 sscanf
  002a4	83 f8 01	 cmp	 eax, 1
  002a7	75 33		 jne	 SHORT $LN16@shrdport_c
  002a9	0f b7 44 24 50	 movzx	 eax, WORD PTR shrdport$[rsp]
  002ae	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  002b3	7d 09		 jge	 SHORT $LN18@shrdport_c
  002b5	0f b7 44 24 50	 movzx	 eax, WORD PTR shrdport$[rsp]
  002ba	85 c0		 test	 eax, eax
  002bc	75 1e		 jne	 SHORT $LN16@shrdport_c
$LN18@shrdport_c:

; 5333 :     )
; 5334 :     {
; 5335 :         if (!configure_shrdport( shrdport ))

  002be	0f b7 4c 24 50	 movzx	 ecx, WORD PTR shrdport$[rsp]
  002c3	e8 00 00 00 00	 call	 configure_shrdport
  002c8	85 c0		 test	 eax, eax
  002ca	75 0b		 jne	 SHORT $LN19@shrdport_c

; 5336 :             default_shrdport = shrdport;

  002cc	0f b7 44 24 50	 movzx	 eax, WORD PTR shrdport$[rsp]
  002d1	89 05 00 00 00
	00		 mov	 DWORD PTR ?default_shrdport@?1??shrdport_cmd@@9@9, eax
$LN19@shrdport_c:

; 5337 :     }

  002d7	e9 99 00 00 00	 jmp	 $LN17@shrdport_c
$LN16@shrdport_c:

; 5338 :     else
; 5339 :     {
; 5340 :         // "Invalid value %s specified for %s"
; 5341 :         WRMSG( HHC01451, "E", argv[1], argv[0] );

  002dc	b8 08 00 00 00	 mov	 eax, 8
  002e1	48 6b c0 00	 imul	 rax, rax, 0
  002e5	48 89 44 24 68	 mov	 QWORD PTR tv184[rsp], rax
  002ea	b9 08 00 00 00	 mov	 ecx, 8
  002ef	48 6b c9 01	 imul	 rcx, rcx, 1
  002f3	48 89 4c 24 70	 mov	 QWORD PTR tv187[rsp], rcx
  002f8	b9 01 00 00 00	 mov	 ecx, 1
  002fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00303	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0030b	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv184[rsp]
  00310	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00314	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00319	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00321	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv187[rsp]
  00326	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0032a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0032f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208651
  00336	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0033b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208652
  00342	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00347	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0034c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00352	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208653
  00359	ba dd 14 00 00	 mov	 edx, 5341		; 000014ddH
  0035e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208654
  00365	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5342 :         return 1;

  0036b	b8 01 00 00 00	 mov	 eax, 1
  00370	e9 bf 00 00 00	 jmp	 $LN1@shrdport_c
$LN17@shrdport_c:
$LN15@shrdport_c:
$LN13@shrdport_c:

; 5343 :     }
; 5344 : 
; 5345 :     if (MLVL( VERBOSE ))

  00375	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0037c	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  00382	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00387	85 c0		 test	 eax, eax
  00389	0f 84 a3 00 00
	00		 je	 $LN20@shrdport_c

; 5346 :     {
; 5347 :         MSGBUF( buf, "%hu", sysblk.shrdport );

  0038f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00396	0f b7 80 ac 13
	00 00		 movzx	 eax, WORD PTR [rax+5036]
  0039d	44 8b c8	 mov	 r9d, eax
  003a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208656
  003a7	ba 10 00 00 00	 mov	 edx, 16
  003ac	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  003b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 5348 :         // "%-14s set to %s"
; 5349 :         WRMSG( HHC02204, "I", argv[0], buf );

  003ba	b8 08 00 00 00	 mov	 eax, 8
  003bf	48 6b c0 00	 imul	 rax, rax, 0
  003c3	48 89 44 24 78	 mov	 QWORD PTR tv209[rsp], rax
  003c8	b9 01 00 00 00	 mov	 ecx, 1
  003cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003d3	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  003db	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003e0	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003e8	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv209[rsp]
  003ed	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  003f1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208657
  003fd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00402	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208658
  00409	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0040e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00413	41 b9 03 00 00
	00		 mov	 r9d, 3
  00419	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208659
  00420	ba e5 14 00 00	 mov	 edx, 5349		; 000014e5H
  00425	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208660
  0042c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN20@shrdport_c:

; 5350 :     }
; 5351 : 
; 5352 :     return 0;

  00432	33 c0		 xor	 eax, eax
$LN1@shrdport_c:

; 5353 : }

  00434	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0043c	48 33 cc	 xor	 rcx, rsp
  0043f	e8 00 00 00 00	 call	 __security_check_cookie
  00444	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  0044b	5f		 pop	 rdi
  0044c	c3		 ret	 0
shrdport_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
i$1 = 80
tv77 = 88
tv90 = 96
tv92 = 104
tv142 = 112
tv185 = 120
tv203 = 128
tv218 = 136
tv220 = 144
argc$ = 176
argv$ = 184
cmdline$ = 192
stsi_manufacturer_cmd PROC

; 5236 : {

$LN21:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
$LN4@stsi_manuf:

; 5237 :     UNREFERENCED( cmdline );

  00015	33 c0		 xor	 eax, eax
  00017	85 c0		 test	 eax, eax
  00019	75 fa		 jne	 SHORT $LN4@stsi_manuf
$LN7@stsi_manuf:

; 5238 :     UPPER_ARGV_0( argv );

  0001b	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00024	74 47		 je	 SHORT $LN11@stsi_manuf
  00026	b8 08 00 00 00	 mov	 eax, 8
  0002b	48 6b c0 00	 imul	 rax, rax, 0
  0002f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00037	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0003c	74 2f		 je	 SHORT $LN11@stsi_manuf
  0003e	b8 08 00 00 00	 mov	 eax, 8
  00043	48 6b c0 00	 imul	 rax, rax, 0
  00047	b9 08 00 00 00	 mov	 ecx, 8
  0004c	48 6b c9 00	 imul	 rcx, rcx, 0
  00050	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00058	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0005c	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00064	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00068	e8 00 00 00 00	 call	 strupper
$LN11@stsi_manuf:
  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 a8		 jne	 SHORT $LN7@stsi_manuf

; 5239 : 
; 5240 :     /* Update manufacturer name if operand is specified */
; 5241 :     if (argc > 2)

  00073	83 bc 24 b0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0007b	7e 75		 jle	 SHORT $LN12@stsi_manuf

; 5242 :     {
; 5243 :         // "Invalid number of arguments for %s"
; 5244 :         WRMSG( HHC01455, "E", argv[0] );

  0007d	b8 08 00 00 00	 mov	 eax, 8
  00082	48 6b c0 00	 imul	 rax, rax, 0
  00086	48 89 44 24 58	 mov	 QWORD PTR tv77[rsp], rax
  0008b	b9 01 00 00 00	 mov	 ecx, 1
  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00096	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0009e	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv77[rsp]
  000a3	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000a7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208574
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208575
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208576
  000d6	ba 7c 14 00 00	 mov	 edx, 5244		; 0000147cH
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208577
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5245 :         return -1;

  000e8	b8 ff ff ff ff	 mov	 eax, -1
  000ed	e9 cd 03 00 00	 jmp	 $LN1@stsi_manuf
$LN12@stsi_manuf:

; 5246 :     }
; 5247 : 
; 5248 :     if (argc == 1)  /* (no argument == query current value?) */

  000f2	83 bc 24 b0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  000fa	0f 85 84 00 00
	00		 jne	 $LN13@stsi_manuf

; 5249 :     {
; 5250 :         // "%-14s: %s"
; 5251 :         WRMSG( HHC02203, "I", argv[0], str_manufacturer() );

  00100	e8 00 00 00 00	 call	 str_manufacturer
  00105	48 89 44 24 60	 mov	 QWORD PTR tv90[rsp], rax
  0010a	b9 08 00 00 00	 mov	 ecx, 8
  0010f	48 6b c9 00	 imul	 rcx, rcx, 0
  00113	48 89 4c 24 68	 mov	 QWORD PTR tv92[rsp], rcx
  00118	b9 01 00 00 00	 mov	 ecx, 1
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00123	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv90[rsp]
  00128	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0012d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00135	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv92[rsp]
  0013a	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0013e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208580
  0014a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0014f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208581
  00156	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0015b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00160	41 b9 03 00 00
	00		 mov	 r9d, 3
  00166	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208582
  0016d	ba 83 14 00 00	 mov	 edx, 5251		; 00001483H
  00172	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208583
  00179	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5252 :     }

  0017f	e9 39 03 00 00	 jmp	 $LN14@stsi_manuf
$LN13@stsi_manuf:

; 5253 :     else
; 5254 :     {
; 5255 :         size_t i;
; 5256 : 
; 5257 :         if (strlen (argv[1] ) > 16)

  00184	b8 08 00 00 00	 mov	 eax, 8
  00189	48 6b c0 01	 imul	 rax, rax, 1
  0018d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00195	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00199	e8 00 00 00 00	 call	 strlen
  0019e	48 83 f8 10	 cmp	 rax, 16
  001a2	0f 86 81 00 00
	00		 jbe	 $LN15@stsi_manuf

; 5258 :         {
; 5259 :             // "Invalid argument %s%s"
; 5260 :             WRMSG( HHC02205, "E", argv[1], "; argument > 16 characters" );

  001a8	b8 08 00 00 00	 mov	 eax, 8
  001ad	48 6b c0 01	 imul	 rax, rax, 1
  001b1	48 89 44 24 70	 mov	 QWORD PTR tv142[rsp], rax
  001b6	b9 01 00 00 00	 mov	 ecx, 1
  001bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208585
  001c8	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001cd	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001d5	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv142[rsp]
  001da	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001de	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208586
  001ea	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208587
  001f6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001fb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00200	41 b9 03 00 00
	00		 mov	 r9d, 3
  00206	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208588
  0020d	ba 8c 14 00 00	 mov	 edx, 5260		; 0000148cH
  00212	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208589
  00219	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5261 :             return -1;

  0021f	b8 ff ff ff ff	 mov	 eax, -1
  00224	e9 96 02 00 00	 jmp	 $LN1@stsi_manuf
$LN15@stsi_manuf:

; 5262 :         }
; 5263 : 
; 5264 :         for (i=0; i < strlen( argv[1] ); i++)

  00229	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR i$1[rsp], 0
  00232	eb 0d		 jmp	 SHORT $LN10@stsi_manuf
$LN8@stsi_manuf:
  00234	48 8b 44 24 50	 mov	 rax, QWORD PTR i$1[rsp]
  00239	48 ff c0	 inc	 rax
  0023c	48 89 44 24 50	 mov	 QWORD PTR i$1[rsp], rax
$LN10@stsi_manuf:
  00241	b8 08 00 00 00	 mov	 eax, 8
  00246	48 6b c0 01	 imul	 rax, rax, 1
  0024a	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00252	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00256	e8 00 00 00 00	 call	 strlen
  0025b	48 39 44 24 50	 cmp	 QWORD PTR i$1[rsp], rax
  00260	0f 83 09 01 00
	00		 jae	 $LN9@stsi_manuf

; 5265 :         {
; 5266 :             if (isalnum( argv[1][i] ) &&

  00266	b8 08 00 00 00	 mov	 eax, 8
  0026b	48 6b c0 01	 imul	 rax, rax, 1
  0026f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00277	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0027b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR i$1[rsp]
  00280	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  00284	8b c8		 mov	 ecx, eax
  00286	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isalnum
  0028c	85 c0		 test	 eax, eax
  0028e	74 59		 je	 SHORT $LN16@stsi_manuf
  00290	b8 08 00 00 00	 mov	 eax, 8
  00295	48 6b c0 01	 imul	 rax, rax, 1
  00299	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002a1	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  002a5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR i$1[rsp]
  002aa	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  002ae	8b c8		 mov	 ecx, eax
  002b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isupper
  002b6	85 c0		 test	 eax, eax
  002b8	75 2a		 jne	 SHORT $LN17@stsi_manuf
  002ba	b8 08 00 00 00	 mov	 eax, 8
  002bf	48 6b c0 01	 imul	 rax, rax, 1
  002c3	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002cb	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  002cf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR i$1[rsp]
  002d4	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  002d8	8b c8		 mov	 ecx, eax
  002da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  002e0	85 c0		 test	 eax, eax
  002e2	74 05		 je	 SHORT $LN16@stsi_manuf
$LN17@stsi_manuf:

; 5267 :                (isupper( argv[1][i] ) || isdigit( argv[1][i] )))
; 5268 :                 continue;

  002e4	e9 4b ff ff ff	 jmp	 $LN8@stsi_manuf
$LN16@stsi_manuf:

; 5269 : 
; 5270 :             // "Invalid argument %s%s"
; 5271 :             WRMSG( HHC02205, "E", argv[1], "; argument contains an invalid character (0-9 and uppercase A-Z only)" );

  002e9	b8 08 00 00 00	 mov	 eax, 8
  002ee	48 6b c0 01	 imul	 rax, rax, 1
  002f2	48 89 44 24 78	 mov	 QWORD PTR tv185[rsp], rax
  002f7	b9 01 00 00 00	 mov	 ecx, 1
  002fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00302	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208592
  00309	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0030e	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00316	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv185[rsp]
  0031b	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0031f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00324	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208593
  0032b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00330	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208594
  00337	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0033c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00341	41 b9 03 00 00
	00		 mov	 r9d, 3
  00347	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208595
  0034e	ba 97 14 00 00	 mov	 edx, 5271		; 00001497H
  00353	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208596
  0035a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5272 :             return -1;

  00360	b8 ff ff ff ff	 mov	 eax, -1
  00365	e9 55 01 00 00	 jmp	 $LN1@stsi_manuf

; 5273 :         }

  0036a	e9 c5 fe ff ff	 jmp	 $LN8@stsi_manuf
$LN9@stsi_manuf:

; 5274 : 
; 5275 :         if (set_manufacturer( argv[1] ) < 0)

  0036f	b8 08 00 00 00	 mov	 eax, 8
  00374	48 6b c0 01	 imul	 rax, rax, 1
  00378	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00380	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00384	e8 00 00 00 00	 call	 set_manufacturer
  00389	85 c0		 test	 eax, eax
  0038b	0f 8d 87 00 00
	00		 jge	 $LN18@stsi_manuf

; 5276 :         {
; 5277 :             // "Invalid argument %s%s"
; 5278 :             WRMSG( HHC02205, "E", argv[1], "; argument contains an invalid character (0-9 and uppercase A-Z only)");

  00391	b8 08 00 00 00	 mov	 eax, 8
  00396	48 6b c0 01	 imul	 rax, rax, 1
  0039a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv203[rsp], rax
  003a2	b9 01 00 00 00	 mov	 ecx, 1
  003a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208598
  003b4	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003b9	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003c1	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv203[rsp]
  003c9	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  003cd	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208599
  003d9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208600
  003e5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003ea	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003ef	41 b9 03 00 00
	00		 mov	 r9d, 3
  003f5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208601
  003fc	ba 9e 14 00 00	 mov	 edx, 5278		; 0000149eH
  00401	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208602
  00408	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5279 :             return -1;

  0040e	b8 ff ff ff ff	 mov	 eax, -1
  00413	e9 a7 00 00 00	 jmp	 $LN1@stsi_manuf
$LN18@stsi_manuf:

; 5280 :         }
; 5281 : 
; 5282 :         if (MLVL( VERBOSE ))

  00418	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0041f	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  00425	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0042a	85 c0		 test	 eax, eax
  0042c	0f 84 8b 00 00
	00		 je	 $LN19@stsi_manuf

; 5283 :             // "%-14s set to %s"
; 5284 :             WRMSG( HHC02204, "I", argv[0], str_manufacturer() );

  00432	e8 00 00 00 00	 call	 str_manufacturer
  00437	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv218[rsp], rax
  0043f	b9 08 00 00 00	 mov	 ecx, 8
  00444	48 6b c9 00	 imul	 rcx, rcx, 0
  00448	48 89 8c 24 90
	00 00 00	 mov	 QWORD PTR tv220[rsp], rcx
  00450	b9 01 00 00 00	 mov	 ecx, 1
  00455	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0045b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv218[rsp]
  00463	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00468	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00470	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tv220[rsp]
  00478	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0047c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00481	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208604
  00488	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0048d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208605
  00494	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00499	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0049e	41 b9 03 00 00
	00		 mov	 r9d, 3
  004a4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208606
  004ab	ba a4 14 00 00	 mov	 edx, 5284		; 000014a4H
  004b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208607
  004b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN19@stsi_manuf:
$LN14@stsi_manuf:

; 5285 :     }
; 5286 : 
; 5287 :     return 0;

  004bd	33 c0		 xor	 eax, eax
$LN1@stsi_manuf:

; 5288 : }

  004bf	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  004c6	c3		 ret	 0
stsi_manufacturer_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
i$1 = 80
tv77 = 88
tv90 = 96
tv92 = 104
tv142 = 112
tv185 = 120
tv203 = 128
tv218 = 136
tv220 = 144
argc$ = 176
argv$ = 184
cmdline$ = 192
stsi_plant_cmd PROC

; 5178 : {

$LN21:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
$LN4@stsi_plant:

; 5179 :     UNREFERENCED( cmdline );

  00015	33 c0		 xor	 eax, eax
  00017	85 c0		 test	 eax, eax
  00019	75 fa		 jne	 SHORT $LN4@stsi_plant
$LN7@stsi_plant:

; 5180 :     UPPER_ARGV_0( argv );

  0001b	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00024	74 47		 je	 SHORT $LN11@stsi_plant
  00026	b8 08 00 00 00	 mov	 eax, 8
  0002b	48 6b c0 00	 imul	 rax, rax, 0
  0002f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00037	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0003c	74 2f		 je	 SHORT $LN11@stsi_plant
  0003e	b8 08 00 00 00	 mov	 eax, 8
  00043	48 6b c0 00	 imul	 rax, rax, 0
  00047	b9 08 00 00 00	 mov	 ecx, 8
  0004c	48 6b c9 00	 imul	 rcx, rcx, 0
  00050	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00058	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0005c	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00064	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00068	e8 00 00 00 00	 call	 strupper
$LN11@stsi_plant:
  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 a8		 jne	 SHORT $LN7@stsi_plant

; 5181 : 
; 5182 :     /* Update plant name if operand is specified */
; 5183 :     if (argc > 2)

  00073	83 bc 24 b0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0007b	7e 75		 jle	 SHORT $LN12@stsi_plant

; 5184 :     {
; 5185 :         // "Invalid number of arguments for %s"
; 5186 :         WRMSG( HHC01455, "E", argv[0] );

  0007d	b8 08 00 00 00	 mov	 eax, 8
  00082	48 6b c0 00	 imul	 rax, rax, 0
  00086	48 89 44 24 58	 mov	 QWORD PTR tv77[rsp], rax
  0008b	b9 01 00 00 00	 mov	 ecx, 1
  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00096	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0009e	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv77[rsp]
  000a3	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000a7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208520
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208521
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208522
  000d6	ba 42 14 00 00	 mov	 edx, 5186		; 00001442H
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208523
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5187 :         return -1;

  000e8	b8 ff ff ff ff	 mov	 eax, -1
  000ed	e9 cd 03 00 00	 jmp	 $LN1@stsi_plant
$LN12@stsi_plant:

; 5188 :     }
; 5189 : 
; 5190 :     if (argc == 1)  /* (no argument == query current value?) */

  000f2	83 bc 24 b0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  000fa	0f 85 84 00 00
	00		 jne	 $LN13@stsi_plant

; 5191 :     {
; 5192 :         // "%-14s: %s"
; 5193 :         WRMSG( HHC02203, "I", argv[0], str_plant() );

  00100	e8 00 00 00 00	 call	 str_plant
  00105	48 89 44 24 60	 mov	 QWORD PTR tv90[rsp], rax
  0010a	b9 08 00 00 00	 mov	 ecx, 8
  0010f	48 6b c9 00	 imul	 rcx, rcx, 0
  00113	48 89 4c 24 68	 mov	 QWORD PTR tv92[rsp], rcx
  00118	b9 01 00 00 00	 mov	 ecx, 1
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00123	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv90[rsp]
  00128	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0012d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00135	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv92[rsp]
  0013a	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0013e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208526
  0014a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0014f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208527
  00156	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0015b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00160	41 b9 03 00 00
	00		 mov	 r9d, 3
  00166	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208528
  0016d	ba 49 14 00 00	 mov	 edx, 5193		; 00001449H
  00172	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208529
  00179	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5194 :     }

  0017f	e9 39 03 00 00	 jmp	 $LN14@stsi_plant
$LN13@stsi_plant:

; 5195 :     else
; 5196 :     {
; 5197 :         size_t i;
; 5198 : 
; 5199 :         if (strlen( argv[1] ) > 4)

  00184	b8 08 00 00 00	 mov	 eax, 8
  00189	48 6b c0 01	 imul	 rax, rax, 1
  0018d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00195	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00199	e8 00 00 00 00	 call	 strlen
  0019e	48 83 f8 04	 cmp	 rax, 4
  001a2	0f 86 81 00 00
	00		 jbe	 $LN15@stsi_plant

; 5200 :         {
; 5201 :             // "Invalid argument %s%s"
; 5202 :             WRMSG( HHC02205, "E", argv[1], "; argument > 4 characters" );

  001a8	b8 08 00 00 00	 mov	 eax, 8
  001ad	48 6b c0 01	 imul	 rax, rax, 1
  001b1	48 89 44 24 70	 mov	 QWORD PTR tv142[rsp], rax
  001b6	b9 01 00 00 00	 mov	 ecx, 1
  001bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208531
  001c8	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001cd	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001d5	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv142[rsp]
  001da	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001de	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208532
  001ea	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208533
  001f6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001fb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00200	41 b9 03 00 00
	00		 mov	 r9d, 3
  00206	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208534
  0020d	ba 52 14 00 00	 mov	 edx, 5202		; 00001452H
  00212	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208535
  00219	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5203 :             return -1;

  0021f	b8 ff ff ff ff	 mov	 eax, -1
  00224	e9 96 02 00 00	 jmp	 $LN1@stsi_plant
$LN15@stsi_plant:

; 5204 :         }
; 5205 : 
; 5206 :         for (i=0; i < strlen( argv[1] ); i++)

  00229	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR i$1[rsp], 0
  00232	eb 0d		 jmp	 SHORT $LN10@stsi_plant
$LN8@stsi_plant:
  00234	48 8b 44 24 50	 mov	 rax, QWORD PTR i$1[rsp]
  00239	48 ff c0	 inc	 rax
  0023c	48 89 44 24 50	 mov	 QWORD PTR i$1[rsp], rax
$LN10@stsi_plant:
  00241	b8 08 00 00 00	 mov	 eax, 8
  00246	48 6b c0 01	 imul	 rax, rax, 1
  0024a	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00252	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00256	e8 00 00 00 00	 call	 strlen
  0025b	48 39 44 24 50	 cmp	 QWORD PTR i$1[rsp], rax
  00260	0f 83 09 01 00
	00		 jae	 $LN9@stsi_plant

; 5207 :         {
; 5208 :             if (isalnum( argv[1][i] ) &&

  00266	b8 08 00 00 00	 mov	 eax, 8
  0026b	48 6b c0 01	 imul	 rax, rax, 1
  0026f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00277	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0027b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR i$1[rsp]
  00280	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  00284	8b c8		 mov	 ecx, eax
  00286	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isalnum
  0028c	85 c0		 test	 eax, eax
  0028e	74 59		 je	 SHORT $LN16@stsi_plant
  00290	b8 08 00 00 00	 mov	 eax, 8
  00295	48 6b c0 01	 imul	 rax, rax, 1
  00299	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002a1	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  002a5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR i$1[rsp]
  002aa	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  002ae	8b c8		 mov	 ecx, eax
  002b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isupper
  002b6	85 c0		 test	 eax, eax
  002b8	75 2a		 jne	 SHORT $LN17@stsi_plant
  002ba	b8 08 00 00 00	 mov	 eax, 8
  002bf	48 6b c0 01	 imul	 rax, rax, 1
  002c3	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002cb	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  002cf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR i$1[rsp]
  002d4	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  002d8	8b c8		 mov	 ecx, eax
  002da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  002e0	85 c0		 test	 eax, eax
  002e2	74 05		 je	 SHORT $LN16@stsi_plant
$LN17@stsi_plant:

; 5209 :                (isupper( argv[1][i] ) || isdigit( argv[1][i] )))
; 5210 :                 continue;

  002e4	e9 4b ff ff ff	 jmp	 $LN8@stsi_plant
$LN16@stsi_plant:

; 5211 : 
; 5212 :             // "Invalid argument %s%s"
; 5213 :             WRMSG( HHC02205, "E", argv[1], "; argument contains an invalid character (0-9 and uppercase A-Z only)" );

  002e9	b8 08 00 00 00	 mov	 eax, 8
  002ee	48 6b c0 01	 imul	 rax, rax, 1
  002f2	48 89 44 24 78	 mov	 QWORD PTR tv185[rsp], rax
  002f7	b9 01 00 00 00	 mov	 ecx, 1
  002fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00302	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208538
  00309	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0030e	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00316	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv185[rsp]
  0031b	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0031f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00324	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208539
  0032b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00330	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208540
  00337	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0033c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00341	41 b9 03 00 00
	00		 mov	 r9d, 3
  00347	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208541
  0034e	ba 5d 14 00 00	 mov	 edx, 5213		; 0000145dH
  00353	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208542
  0035a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5214 :             return -1;

  00360	b8 ff ff ff ff	 mov	 eax, -1
  00365	e9 55 01 00 00	 jmp	 $LN1@stsi_plant

; 5215 :         }

  0036a	e9 c5 fe ff ff	 jmp	 $LN8@stsi_plant
$LN9@stsi_plant:

; 5216 : 
; 5217 :         if (set_plant( argv[1] ) < 0)

  0036f	b8 08 00 00 00	 mov	 eax, 8
  00374	48 6b c0 01	 imul	 rax, rax, 1
  00378	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00380	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00384	e8 00 00 00 00	 call	 set_plant
  00389	85 c0		 test	 eax, eax
  0038b	0f 8d 87 00 00
	00		 jge	 $LN18@stsi_plant

; 5218 :         {
; 5219 :             // "Invalid argument %s%s"
; 5220 :             WRMSG( HHC02205, "E", argv[1], "; argument contains an invalid character (0-9 and uppercase A-Z only)" );

  00391	b8 08 00 00 00	 mov	 eax, 8
  00396	48 6b c0 01	 imul	 rax, rax, 1
  0039a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv203[rsp], rax
  003a2	b9 01 00 00 00	 mov	 ecx, 1
  003a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208544
  003b4	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003b9	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003c1	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv203[rsp]
  003c9	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  003cd	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208545
  003d9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208546
  003e5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003ea	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003ef	41 b9 03 00 00
	00		 mov	 r9d, 3
  003f5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208547
  003fc	ba 64 14 00 00	 mov	 edx, 5220		; 00001464H
  00401	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208548
  00408	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5221 :             return -1;

  0040e	b8 ff ff ff ff	 mov	 eax, -1
  00413	e9 a7 00 00 00	 jmp	 $LN1@stsi_plant
$LN18@stsi_plant:

; 5222 :         }
; 5223 : 
; 5224 :         if (MLVL( VERBOSE ))

  00418	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0041f	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  00425	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0042a	85 c0		 test	 eax, eax
  0042c	0f 84 8b 00 00
	00		 je	 $LN19@stsi_plant

; 5225 :             // "%-14s set to %s"
; 5226 :             WRMSG( HHC02204, "I", argv[0], str_plant() );

  00432	e8 00 00 00 00	 call	 str_plant
  00437	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv218[rsp], rax
  0043f	b9 08 00 00 00	 mov	 ecx, 8
  00444	48 6b c9 00	 imul	 rcx, rcx, 0
  00448	48 89 8c 24 90
	00 00 00	 mov	 QWORD PTR tv220[rsp], rcx
  00450	b9 01 00 00 00	 mov	 ecx, 1
  00455	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0045b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv218[rsp]
  00463	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00468	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00470	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tv220[rsp]
  00478	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0047c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00481	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208550
  00488	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0048d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208551
  00494	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00499	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0049e	41 b9 03 00 00
	00		 mov	 r9d, 3
  004a4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208552
  004ab	ba 6a 14 00 00	 mov	 edx, 5226		; 0000146aH
  004b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208553
  004b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN19@stsi_plant:
$LN14@stsi_plant:

; 5227 :     }
; 5228 : 
; 5229 :     return 0;

  004bd	33 c0		 xor	 eax, eax
$LN1@stsi_plant:

; 5230 : }

  004bf	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  004c6	c3		 ret	 0
stsi_plant_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
m$1 = 80
n$2 = 84
rc$3 = 88
i$4 = 96
len$5 = 104
tv78 = 112
tv142 = 120
tv231 = 128
tv262 = 136
tv278 = 144
tv280 = 152
tv282 = 160
tv332 = 168
tv334 = 176
tv336 = 184
tv343 = 192
model$ = 200
model_name$ = 232
msgbuf$6 = 272
msgbuf$7 = 336
msgbuf$8 = 400
msgbuf$9 = 528
__$ArrayPad$ = 656
argc$ = 688
argv$ = 696
cmdline$ = 704
stsi_model_cmd PROC

; 5068 : {

$LN29:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec a8 02
	00 00		 sub	 rsp, 680		; 000002a8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 5069 :     const char* model_name[4] = { "hardware", "capacity", "perm", "temp" };

  00027	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208434
  0002e	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR model_name$[rsp], rax
  00036	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208436
  0003d	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR model_name$[rsp+8], rax
  00045	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208438
  0004c	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR model_name$[rsp+16], rax
  00054	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208440
  0005b	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR model_name$[rsp+24], rax

; 5070 :     char*            model[4] = { "",         "",         "",     "" };

  00063	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208442
  0006a	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR model$[rsp], rax
  00072	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208444
  00079	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR model$[rsp+8], rax
  00081	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208446
  00088	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR model$[rsp+16], rax
  00090	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208448
  00097	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR model$[rsp+24], rax
$LN4@stsi_model:

; 5071 : 
; 5072 :     UNREFERENCED( cmdline );

  0009f	33 c0		 xor	 eax, eax
  000a1	85 c0		 test	 eax, eax
  000a3	75 fa		 jne	 SHORT $LN4@stsi_model
$LN7@stsi_model:

; 5073 :     UPPER_ARGV_0( argv );

  000a5	48 83 bc 24 b8
	02 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  000ae	74 47		 je	 SHORT $LN14@stsi_model
  000b0	b8 08 00 00 00	 mov	 eax, 8
  000b5	48 6b c0 00	 imul	 rax, rax, 0
  000b9	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000c1	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  000c6	74 2f		 je	 SHORT $LN14@stsi_model
  000c8	b8 08 00 00 00	 mov	 eax, 8
  000cd	48 6b c0 00	 imul	 rax, rax, 0
  000d1	b9 08 00 00 00	 mov	 ecx, 8
  000d6	48 6b c9 00	 imul	 rcx, rcx, 0
  000da	48 8b 94 24 b8
	02 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  000e2	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  000e6	48 8b 84 24 b8
	02 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000ee	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  000f2	e8 00 00 00 00	 call	 strupper
$LN14@stsi_model:
  000f7	33 c0		 xor	 eax, eax
  000f9	85 c0		 test	 eax, eax
  000fb	75 a8		 jne	 SHORT $LN7@stsi_model

; 5074 : 
; 5075 :     /* Update model name if operand is specified */
; 5076 : 
; 5077 :     if (argc > 1)

  000fd	83 bc 24 b0 02
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00105	0f 8e ad 05 00
	00		 jle	 $LN15@stsi_model

; 5078 :     {
; 5079 :         int rc, m, n;
; 5080 : 
; 5081 :         /* Validate argument count */
; 5082 : 
; 5083 :         if (argc > 5)

  0010b	83 bc 24 b0 02
	00 00 05	 cmp	 DWORD PTR argc$[rsp], 5
  00113	7e 75		 jle	 SHORT $LN17@stsi_model

; 5084 :         {
; 5085 :             // "Invalid number of arguments for %s"
; 5086 :             WRMSG( HHC01455, "E", argv[0] );

  00115	b8 08 00 00 00	 mov	 eax, 8
  0011a	48 6b c0 00	 imul	 rax, rax, 0
  0011e	48 89 44 24 70	 mov	 QWORD PTR tv78[rsp], rax
  00123	b9 01 00 00 00	 mov	 ecx, 1
  00128	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0012e	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00136	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv78[rsp]
  0013b	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0013f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00144	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208453
  0014b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00150	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208454
  00157	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0015c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00161	41 b9 03 00 00
	00		 mov	 r9d, 3
  00167	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208455
  0016e	ba de 13 00 00	 mov	 edx, 5086		; 000013deH
  00173	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208456
  0017a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5087 :             return -1;

  00180	b8 ff ff ff ff	 mov	 eax, -1
  00185	e9 1e 06 00 00	 jmp	 $LN1@stsi_model
$LN17@stsi_model:

; 5088 :         }
; 5089 : 
; 5090 :         /* Validate and set new model and capacity
; 5091 :            numbers according to arguments */
; 5092 :         for (m=0, n=1; n < argc; m++, n++)

  0018a	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR m$1[rsp], 0
  00192	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR n$2[rsp], 1
  0019a	eb 14		 jmp	 SHORT $LN10@stsi_model
$LN8@stsi_model:
  0019c	8b 44 24 50	 mov	 eax, DWORD PTR m$1[rsp]
  001a0	ff c0		 inc	 eax
  001a2	89 44 24 50	 mov	 DWORD PTR m$1[rsp], eax
  001a6	8b 44 24 54	 mov	 eax, DWORD PTR n$2[rsp]
  001aa	ff c0		 inc	 eax
  001ac	89 44 24 54	 mov	 DWORD PTR n$2[rsp], eax
$LN10@stsi_model:
  001b0	8b 84 24 b0 02
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  001b7	39 44 24 54	 cmp	 DWORD PTR n$2[rsp], eax
  001bb	0f 8d 60 02 00
	00		 jge	 $LN9@stsi_model

; 5093 :         {
; 5094 :             size_t len, i;
; 5095 : 
; 5096 :             if (!argv[n])

  001c1	48 63 44 24 54	 movsxd	 rax, DWORD PTR n$2[rsp]
  001c6	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001ce	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  001d3	75 05		 jne	 SHORT $LN18@stsi_model

; 5097 :                 break;

  001d5	e9 47 02 00 00	 jmp	 $LN9@stsi_model
$LN18@stsi_model:

; 5098 : 
; 5099 :             model[m] = argv[n];

  001da	48 63 44 24 54	 movsxd	 rax, DWORD PTR n$2[rsp]
  001df	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR m$1[rsp]
  001e4	48 8b 94 24 b8
	02 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  001ec	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  001f0	48 89 84 cc c8
	00 00 00	 mov	 QWORD PTR model$[rsp+rcx*8], rax

; 5100 :             len = strlen( model[m] );

  001f8	48 63 44 24 50	 movsxd	 rax, DWORD PTR m$1[rsp]
  001fd	48 8b 8c c4 c8
	00 00 00	 mov	 rcx, QWORD PTR model$[rsp+rax*8]
  00205	e8 00 00 00 00	 call	 strlen
  0020a	48 89 44 24 68	 mov	 QWORD PTR len$5[rsp], rax

; 5101 : 
; 5102 :             if (len > 16)

  0020f	48 83 7c 24 68
	10		 cmp	 QWORD PTR len$5[rsp], 16
  00215	76 79		 jbe	 SHORT $LN19@stsi_model

; 5103 :             {
; 5104 :                 // "Invalid argument %s%s"
; 5105 :                 WRMSG( HHC02205, "E", model[n], "; argument > 16 characters" );

  00217	48 63 44 24 54	 movsxd	 rax, DWORD PTR n$2[rsp]
  0021c	48 89 44 24 78	 mov	 QWORD PTR tv142[rsp], rax
  00221	b9 01 00 00 00	 mov	 ecx, 1
  00226	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0022c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208459
  00233	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00238	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv142[rsp]
  0023d	48 8b 8c cc c8
	00 00 00	 mov	 rcx, QWORD PTR model$[rsp+rcx*8]
  00245	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0024a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208460
  00251	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00256	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208461
  0025d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00262	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00267	41 b9 03 00 00
	00		 mov	 r9d, 3
  0026d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208462
  00274	ba f1 13 00 00	 mov	 edx, 5105		; 000013f1H
  00279	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208463
  00280	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5106 :                 return -1;

  00286	b8 ff ff ff ff	 mov	 eax, -1
  0028b	e9 18 05 00 00	 jmp	 $LN1@stsi_model
$LN19@stsi_model:

; 5107 :             }
; 5108 : 
; 5109 :             /* Normal handling?  (i.e. is special handling character
; 5110 :                "*" or "=" NOT specified for this field?)
; 5111 :             */
; 5112 :             if (!(len == 1 && (model[m][0] == '*' || model[m][0] == '=')))

  00290	48 83 7c 24 68
	01		 cmp	 QWORD PTR len$5[rsp], 1
  00296	75 46		 jne	 SHORT $LN21@stsi_model
  00298	48 63 44 24 50	 movsxd	 rax, DWORD PTR m$1[rsp]
  0029d	b9 01 00 00 00	 mov	 ecx, 1
  002a2	48 6b c9 00	 imul	 rcx, rcx, 0
  002a6	48 8b 84 c4 c8
	00 00 00	 mov	 rax, QWORD PTR model$[rsp+rax*8]
  002ae	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  002b2	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  002b5	0f 84 61 01 00
	00		 je	 $LN20@stsi_model
  002bb	48 63 44 24 50	 movsxd	 rax, DWORD PTR m$1[rsp]
  002c0	b9 01 00 00 00	 mov	 ecx, 1
  002c5	48 6b c9 00	 imul	 rcx, rcx, 0
  002c9	48 8b 84 c4 c8
	00 00 00	 mov	 rax, QWORD PTR model$[rsp+rax*8]
  002d1	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  002d5	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  002d8	0f 84 3e 01 00
	00		 je	 $LN20@stsi_model
$LN21@stsi_model:

; 5113 :             {
; 5114 :                 for (i=0; i < len; i++)

  002de	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR i$4[rsp], 0
  002e7	eb 0d		 jmp	 SHORT $LN13@stsi_model
$LN11@stsi_model:
  002e9	48 8b 44 24 60	 mov	 rax, QWORD PTR i$4[rsp]
  002ee	48 ff c0	 inc	 rax
  002f1	48 89 44 24 60	 mov	 QWORD PTR i$4[rsp], rax
$LN13@stsi_model:
  002f6	48 8b 44 24 68	 mov	 rax, QWORD PTR len$5[rsp]
  002fb	48 39 44 24 60	 cmp	 QWORD PTR i$4[rsp], rax
  00300	0f 83 16 01 00
	00		 jae	 $LN12@stsi_model

; 5115 :                 {
; 5116 :                     if (!isalnum( model[m][i] ) ||

  00306	48 63 44 24 50	 movsxd	 rax, DWORD PTR m$1[rsp]
  0030b	48 8b 84 c4 c8
	00 00 00	 mov	 rax, QWORD PTR model$[rsp+rax*8]
  00313	48 8b 4c 24 60	 mov	 rcx, QWORD PTR i$4[rsp]
  00318	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  0031c	8b c8		 mov	 ecx, eax
  0031e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isalnum
  00324	85 c0		 test	 eax, eax
  00326	74 4c		 je	 SHORT $LN23@stsi_model
  00328	48 63 44 24 50	 movsxd	 rax, DWORD PTR m$1[rsp]
  0032d	48 8b 84 c4 c8
	00 00 00	 mov	 rax, QWORD PTR model$[rsp+rax*8]
  00335	48 8b 4c 24 60	 mov	 rcx, QWORD PTR i$4[rsp]
  0033a	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  0033e	8b c8		 mov	 ecx, eax
  00340	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isupper
  00346	85 c0		 test	 eax, eax
  00348	0f 85 c9 00 00
	00		 jne	 $LN22@stsi_model
  0034e	48 63 44 24 50	 movsxd	 rax, DWORD PTR m$1[rsp]
  00353	48 8b 84 c4 c8
	00 00 00	 mov	 rax, QWORD PTR model$[rsp+rax*8]
  0035b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR i$4[rsp]
  00360	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  00364	8b c8		 mov	 ecx, eax
  00366	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  0036c	85 c0		 test	 eax, eax
  0036e	0f 85 a3 00 00
	00		 jne	 $LN22@stsi_model
$LN23@stsi_model:

; 5117 :                        (!isupper( model[m][i] ) && !isdigit( model[m][i] )))
; 5118 :                     {
; 5119 :                         char msgbuf[64];
; 5120 :                         MSGBUF( msgbuf, "%s-model = <%s>", model_name[m], model[m] );

  00374	48 63 44 24 50	 movsxd	 rax, DWORD PTR m$1[rsp]
  00379	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR m$1[rsp]
  0037e	48 8b 84 c4 c8
	00 00 00	 mov	 rax, QWORD PTR model$[rsp+rax*8]
  00386	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0038b	4c 8b 8c cc e8
	00 00 00	 mov	 r9, QWORD PTR model_name$[rsp+rcx*8]
  00393	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208468
  0039a	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0039f	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$6[rsp]
  003a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 5121 : 
; 5122 :                         // "Invalid argument %s%s"
; 5123 :                         WRMSG( HHC02205, "E", msgbuf, "; argument contains an invalid character (0-9 and uppercase A-Z only)"  );

  003ad	b9 01 00 00 00	 mov	 ecx, 1
  003b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208469
  003bf	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003c4	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$6[rsp]
  003cc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208470
  003d8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208471
  003e4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003e9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003ee	41 b9 03 00 00
	00		 mov	 r9d, 3
  003f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208472
  003fb	ba 03 14 00 00	 mov	 edx, 5123		; 00001403H
  00400	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208473
  00407	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5124 :                         return -1;

  0040d	b8 ff ff ff ff	 mov	 eax, -1
  00412	e9 91 03 00 00	 jmp	 $LN1@stsi_model
$LN22@stsi_model:

; 5125 :                     }
; 5126 :                 }

  00417	e9 cd fe ff ff	 jmp	 $LN11@stsi_model
$LN12@stsi_model:
$LN20@stsi_model:

; 5127 :             }
; 5128 :         }

  0041c	e9 7b fd ff ff	 jmp	 $LN8@stsi_model
$LN9@stsi_model:

; 5129 : 
; 5130 :         /* TRY setting their requested values... */
; 5131 : 
; 5132 :         if ((rc = set_model( model[0], model[1], model[2], model[3] )) != 0)

  00421	b8 08 00 00 00	 mov	 eax, 8
  00426	48 6b c0 03	 imul	 rax, rax, 3
  0042a	b9 08 00 00 00	 mov	 ecx, 8
  0042f	48 6b c9 02	 imul	 rcx, rcx, 2
  00433	ba 08 00 00 00	 mov	 edx, 8
  00438	48 6b d2 01	 imul	 rdx, rdx, 1
  0043c	41 b8 08 00 00
	00		 mov	 r8d, 8
  00442	4d 6b c0 00	 imul	 r8, r8, 0
  00446	4c 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv231[rsp], r8
  0044e	4c 8b 8c 04 c8
	00 00 00	 mov	 r9, QWORD PTR model$[rsp+rax]
  00456	4c 8b 84 0c c8
	00 00 00	 mov	 r8, QWORD PTR model$[rsp+rcx]
  0045e	48 8b 94 14 c8
	00 00 00	 mov	 rdx, QWORD PTR model$[rsp+rdx]
  00466	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv231[rsp]
  0046e	48 8b 8c 04 c8
	00 00 00	 mov	 rcx, QWORD PTR model$[rsp+rax]
  00476	e8 00 00 00 00	 call	 set_model
  0047b	89 44 24 58	 mov	 DWORD PTR rc$3[rsp], eax
  0047f	83 7c 24 58 00	 cmp	 DWORD PTR rc$3[rsp], 0
  00484	0f 84 3f 01 00
	00		 je	 $LN24@stsi_model

; 5133 :         {
; 5134 :             /* A non-zero return code indicates which field was bad */
; 5135 : 
; 5136 :             if (rc > 0 && rc <= 4)

  0048a	83 7c 24 58 00	 cmp	 DWORD PTR rc$3[rsp], 0
  0048f	0f 8e ad 00 00
	00		 jle	 $LN25@stsi_model
  00495	83 7c 24 58 04	 cmp	 DWORD PTR rc$3[rsp], 4
  0049a	0f 8f a2 00 00
	00		 jg	 $LN25@stsi_model

; 5137 :             {
; 5138 :                 char msgbuf[64];
; 5139 :                 MSGBUF( msgbuf, "%s-model = <%s>", model_name[rc-1], model[rc-1] );

  004a0	8b 44 24 58	 mov	 eax, DWORD PTR rc$3[rsp]
  004a4	ff c8		 dec	 eax
  004a6	48 98		 cdqe
  004a8	8b 4c 24 58	 mov	 ecx, DWORD PTR rc$3[rsp]
  004ac	ff c9		 dec	 ecx
  004ae	48 63 c9	 movsxd	 rcx, ecx
  004b1	48 8b 84 c4 c8
	00 00 00	 mov	 rax, QWORD PTR model$[rsp+rax*8]
  004b9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004be	4c 8b 8c cc e8
	00 00 00	 mov	 r9, QWORD PTR model_name$[rsp+rcx*8]
  004c6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208477
  004cd	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  004d2	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$7[rsp]
  004da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 5140 : 
; 5141 :                 // "Invalid argument %s%s"
; 5142 :                 WRMSG( HHC02205, "E", msgbuf, "; argument contains an invalid character (0-9 and uppercase A-Z only)" );

  004e0	b9 01 00 00 00	 mov	 ecx, 1
  004e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208478
  004f2	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  004f7	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$7[rsp]
  004ff	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00504	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208479
  0050b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00510	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208480
  00517	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0051c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00521	41 b9 03 00 00
	00		 mov	 r9d, 3
  00527	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208481
  0052e	ba 16 14 00 00	 mov	 edx, 5142		; 00001416H
  00533	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208482
  0053a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5143 :             }

  00540	eb 7d		 jmp	 SHORT $LN26@stsi_model
$LN25@stsi_model:

; 5144 :             else
; 5145 :                 // "Invalid argument %s%s"
; 5146 :                 WRMSG( HHC02205, "E", argv[0], "" );

  00542	b8 08 00 00 00	 mov	 eax, 8
  00547	48 6b c0 00	 imul	 rax, rax, 0
  0054b	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv262[rsp], rax
  00553	b9 01 00 00 00	 mov	 ecx, 1
  00558	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0055e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208483
  00565	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0056a	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00572	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv262[rsp]
  0057a	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0057e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00583	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208484
  0058a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0058f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208485
  00596	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0059b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005a0	41 b9 03 00 00
	00		 mov	 r9d, 3
  005a6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208486
  005ad	ba 1a 14 00 00	 mov	 edx, 5146		; 0000141aH
  005b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208487
  005b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN26@stsi_model:

; 5147 : 
; 5148 :             return -1;

  005bf	b8 ff ff ff ff	 mov	 eax, -1
  005c4	e9 df 01 00 00	 jmp	 $LN1@stsi_model
$LN24@stsi_model:

; 5149 :         }
; 5150 : 
; 5151 :         /* Success: show them the results */
; 5152 : 
; 5153 :         if (MLVL( VERBOSE ))

  005c9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  005d0	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  005d6	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  005db	85 c0		 test	 eax, eax
  005dd	0f 84 d0 00 00
	00		 je	 $LN27@stsi_model

; 5154 :         {
; 5155 :             char msgbuf[128];
; 5156 :             MSGBUF( msgbuf, "hardware(%s) capacity(%s) perm(%s) temp(%s)",

  005e3	e8 00 00 00 00	 call	 str_modeltemp
  005e8	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv278[rsp], rax
  005f0	e8 00 00 00 00	 call	 str_modelperm
  005f5	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv280[rsp], rax
  005fd	e8 00 00 00 00	 call	 str_modelcapa
  00602	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv282[rsp], rax
  0060a	e8 00 00 00 00	 call	 str_modelhard
  0060f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv278[rsp]
  00617	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0061c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv280[rsp]
  00624	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00629	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv282[rsp]
  00631	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00636	4c 8b c8	 mov	 r9, rax
  00639	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208489
  00640	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00645	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$8[rsp]
  0064d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 5157 :                             str_modelhard(), str_modelcapa(), str_modelperm(), str_modeltemp() );
; 5158 :             // "%-14s set to %s"
; 5159 :             WRMSG( HHC02204, "I", "MODEL", msgbuf );

  00653	b9 01 00 00 00	 mov	 ecx, 1
  00658	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0065e	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$8[rsp]
  00666	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0066b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208490
  00672	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00677	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208491
  0067e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00683	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208492
  0068a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0068f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00694	41 b9 03 00 00
	00		 mov	 r9d, 3
  0069a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208493
  006a1	ba 27 14 00 00	 mov	 edx, 5159		; 00001427H
  006a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208494
  006ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN27@stsi_model:

; 5160 :         }
; 5161 :     }

  006b3	e9 ee 00 00 00	 jmp	 $LN16@stsi_model
$LN15@stsi_model:

; 5162 :     else /* (no arguments == query current values) */
; 5163 :     {
; 5164 :         char msgbuf[128];
; 5165 :         MSGBUF( msgbuf, "hardware(%s) capacity(%s) perm(%s) temp(%s)",

  006b8	e8 00 00 00 00	 call	 str_modeltemp
  006bd	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv332[rsp], rax
  006c5	e8 00 00 00 00	 call	 str_modelperm
  006ca	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv334[rsp], rax
  006d2	e8 00 00 00 00	 call	 str_modelcapa
  006d7	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv336[rsp], rax
  006df	e8 00 00 00 00	 call	 str_modelhard
  006e4	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv332[rsp]
  006ec	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006f1	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv334[rsp]
  006f9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006fe	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv336[rsp]
  00706	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0070b	4c 8b c8	 mov	 r9, rax
  0070e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208495
  00715	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0071a	48 8d 8c 24 10
	02 00 00	 lea	 rcx, QWORD PTR msgbuf$9[rsp]
  00722	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 5166 :                         str_modelhard(), str_modelcapa(), str_modelperm(), str_modeltemp() );
; 5167 :         // "%-14s: %s"
; 5168 :         WRMSG( HHC02203, "I", argv[0], msgbuf );

  00728	b8 08 00 00 00	 mov	 eax, 8
  0072d	48 6b c0 00	 imul	 rax, rax, 0
  00731	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv343[rsp], rax
  00739	b9 01 00 00 00	 mov	 ecx, 1
  0073e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00744	48 8d 8c 24 10
	02 00 00	 lea	 rcx, QWORD PTR msgbuf$9[rsp]
  0074c	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00751	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00759	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR tv343[rsp]
  00761	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00765	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0076a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208496
  00771	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00776	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208497
  0077d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00782	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00787	41 b9 03 00 00
	00		 mov	 r9d, 3
  0078d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208498
  00794	ba 30 14 00 00	 mov	 edx, 5168		; 00001430H
  00799	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208499
  007a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN16@stsi_model:

; 5169 :     }
; 5170 : 
; 5171 :     return 0;

  007a6	33 c0		 xor	 eax, eax
$LN1@stsi_model:

; 5172 : }

  007a8	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  007b0	48 33 cc	 xor	 rcx, rsp
  007b3	e8 00 00 00 00	 call	 __security_check_cookie
  007b8	48 81 c4 a8 02
	00 00		 add	 rsp, 680		; 000002a8H
  007bf	c3		 ret	 0
stsi_model_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
rc$ = 64
cp$1 = 72
tv135 = 80
tv146 = 88
argc$ = 112
argv$ = 120
cmdline$ = 128
codepage_cmd PROC

; 5029 : {

$LN18:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 5030 :     int rc = 0;

  00012	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN4@codepage_c:

; 5031 : 
; 5032 :     UNREFERENCED( cmdline );

  0001a	33 c0		 xor	 eax, eax
  0001c	85 c0		 test	 eax, eax
  0001e	75 fa		 jne	 SHORT $LN4@codepage_c
$LN7@codepage_c:

; 5033 :     UPPER_ARGV_0( argv );

  00020	48 83 7c 24 78
	00		 cmp	 QWORD PTR argv$[rsp], 0
  00026	74 3e		 je	 SHORT $LN8@codepage_c
  00028	b8 08 00 00 00	 mov	 eax, 8
  0002d	48 6b c0 00	 imul	 rax, rax, 0
  00031	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00036	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0003b	74 29		 je	 SHORT $LN8@codepage_c
  0003d	b8 08 00 00 00	 mov	 eax, 8
  00042	48 6b c0 00	 imul	 rax, rax, 0
  00046	b9 08 00 00 00	 mov	 ecx, 8
  0004b	48 6b c9 00	 imul	 rcx, rcx, 0
  0004f	48 8b 54 24 78	 mov	 rdx, QWORD PTR argv$[rsp]
  00054	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00058	48 8b 44 24 78	 mov	 rax, QWORD PTR argv$[rsp]
  0005d	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00061	e8 00 00 00 00	 call	 strupper
$LN8@codepage_c:
  00066	33 c0		 xor	 eax, eax
  00068	85 c0		 test	 eax, eax
  0006a	75 b4		 jne	 SHORT $LN7@codepage_c

; 5034 : 
; 5035 :     /* passthru to cp_updt_cmd */
; 5036 :     if (argc >= 2 && CMD( argv[1], MAINT, 1 ))

  0006c	83 7c 24 70 02	 cmp	 DWORD PTR argc$[rsp], 2
  00071	7c 5a		 jl	 SHORT $LN9@codepage_c
  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 01	 imul	 rax, rax, 1
  0007c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00082	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00087	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0008b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208388
  00092	e8 00 00 00 00	 call	 strcaseabbrev
  00097	85 c0		 test	 eax, eax
  00099	74 32		 je	 SHORT $LN9@codepage_c

; 5037 :     {
; 5038 :         argc--;

  0009b	8b 44 24 70	 mov	 eax, DWORD PTR argc$[rsp]
  0009f	ff c8		 dec	 eax
  000a1	89 44 24 70	 mov	 DWORD PTR argc$[rsp], eax

; 5039 :         argv++;

  000a5	48 8b 44 24 78	 mov	 rax, QWORD PTR argv$[rsp]
  000aa	48 83 c0 08	 add	 rax, 8
  000ae	48 89 44 24 78	 mov	 QWORD PTR argv$[rsp], rax

; 5040 :         rc = cp_updt_cmd( argc, argv, NULL );

  000b3	45 33 c0	 xor	 r8d, r8d
  000b6	48 8b 54 24 78	 mov	 rdx, QWORD PTR argv$[rsp]
  000bb	8b 4c 24 70	 mov	 ecx, DWORD PTR argc$[rsp]
  000bf	e8 00 00 00 00	 call	 cp_updt_cmd
  000c4	89 44 24 40	 mov	 DWORD PTR rc$[rsp], eax

; 5041 :     }

  000c8	e9 38 01 00 00	 jmp	 $LN10@codepage_c
$LN9@codepage_c:

; 5042 :     else if (argc == 2 && valid_codepage_name( argv[1] ))

  000cd	83 7c 24 70 02	 cmp	 DWORD PTR argc$[rsp], 2
  000d2	75 3c		 jne	 SHORT $LN11@codepage_c
  000d4	b8 08 00 00 00	 mov	 eax, 8
  000d9	48 6b c0 01	 imul	 rax, rax, 1
  000dd	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  000e2	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_valid_codepage_name
  000ec	0f b6 c0	 movzx	 eax, al
  000ef	85 c0		 test	 eax, eax
  000f1	74 1d		 je	 SHORT $LN11@codepage_c

; 5043 :     {
; 5044 :         /* Update codepage if valid operand is specified */
; 5045 :         set_codepage( argv[1] );

  000f3	b8 08 00 00 00	 mov	 eax, 8
  000f8	48 6b c0 01	 imul	 rax, rax, 1
  000fc	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00101	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00105	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_set_codepage

; 5046 :     }

  0010b	e9 f5 00 00 00	 jmp	 $LN12@codepage_c
$LN11@codepage_c:

; 5047 :     else if (argc == 1)

  00110	83 7c 24 70 01	 cmp	 DWORD PTR argc$[rsp], 1
  00115	75 7e		 jne	 SHORT $LN13@codepage_c

; 5048 :     {
; 5049 :         const char* cp = query_codepage();

  00117	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_query_codepage
  0011d	48 89 44 24 48	 mov	 QWORD PTR cp$1[rsp], rax

; 5050 :         // "Codepage is %s"
; 5051 :         WRMSG( HHC01476, "I", cp ? cp : "(NULL)" );

  00122	48 83 7c 24 48
	00		 cmp	 QWORD PTR cp$1[rsp], 0
  00128	74 0c		 je	 SHORT $LN16@codepage_c
  0012a	48 8b 44 24 48	 mov	 rax, QWORD PTR cp$1[rsp]
  0012f	48 89 44 24 50	 mov	 QWORD PTR tv135[rsp], rax
  00134	eb 0c		 jmp	 SHORT $LN17@codepage_c
$LN16@codepage_c:
  00136	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208393
  0013d	48 89 44 24 50	 mov	 QWORD PTR tv135[rsp], rax
$LN17@codepage_c:
  00142	b9 01 00 00 00	 mov	 ecx, 1
  00147	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0014d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv135[rsp]
  00152	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00157	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208394
  0015e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00163	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208395
  0016a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0016f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00174	41 b9 03 00 00
	00		 mov	 r9d, 3
  0017a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208396
  00181	ba bb 13 00 00	 mov	 edx, 5051		; 000013bbH
  00186	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208397
  0018d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5052 :     }

  00193	eb 70		 jmp	 SHORT $LN14@codepage_c
$LN13@codepage_c:

; 5053 :     else
; 5054 :     {
; 5055 :         // "Invalid command usage. Type 'help %s' for assistance."
; 5056 :         WRMSG( HHC02299, "E", argv[0] );

  00195	b8 08 00 00 00	 mov	 eax, 8
  0019a	48 6b c0 00	 imul	 rax, rax, 0
  0019e	48 89 44 24 58	 mov	 QWORD PTR tv146[rsp], rax
  001a3	b9 01 00 00 00	 mov	 ecx, 1
  001a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001ae	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  001b3	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv146[rsp]
  001b8	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001bc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208398
  001c8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208399
  001d4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001d9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001de	41 b9 03 00 00
	00		 mov	 r9d, 3
  001e4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208400
  001eb	ba c0 13 00 00	 mov	 edx, 5056		; 000013c0H
  001f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208401
  001f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5057 :         rc = -1;

  001fd	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN14@codepage_c:
$LN12@codepage_c:
$LN10@codepage_c:

; 5058 :     }
; 5059 : 
; 5060 :     return rc;

  00205	8b 44 24 40	 mov	 eax, DWORD PTR rc$[rsp]

; 5061 : }

  00209	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0020d	c3		 ret	 0
codepage_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
rc$ = 64
tv220 = 72
argc$ = 96
argv$ = 104
cmdline$ = 112
cp_updt_cmd PROC

; 4957 : {

$LN25:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 4958 :     int     rc = 0;

  00012	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN4@cp_updt_cm:

; 4959 : 
; 4960 :     UNREFERENCED(cmdline);

  0001a	33 c0		 xor	 eax, eax
  0001c	85 c0		 test	 eax, eax
  0001e	75 fa		 jne	 SHORT $LN4@cp_updt_cm

; 4961 : 
; 4962 :     /*  This is coded in this manner in case additional checks are
; 4963 :      *  made later.
; 4964 :      */
; 4965 : 
; 4966 :     if ( argc == 2 && CMD(argv[1],reset,5) )

  00020	83 7c 24 60 02	 cmp	 DWORD PTR argc$[rsp], 2
  00025	75 6a		 jne	 SHORT $LN5@cp_updt_cm
  00027	b8 08 00 00 00	 mov	 eax, 8
  0002c	48 6b c0 01	 imul	 rax, rax, 1
  00030	41 b8 05 00 00
	00		 mov	 r8d, 5
  00036	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  0003b	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208339
  00046	e8 00 00 00 00	 call	 strcaseabbrev
  0004b	85 c0		 test	 eax, eax
  0004d	74 42		 je	 SHORT $LN5@cp_updt_cm

; 4967 :     {
; 4968 :         argc--;

  0004f	8b 44 24 60	 mov	 eax, DWORD PTR argc$[rsp]
  00053	ff c8		 dec	 eax
  00055	89 44 24 60	 mov	 DWORD PTR argc$[rsp], eax

; 4969 :         argv++;

  00059	48 8b 44 24 68	 mov	 rax, QWORD PTR argv$[rsp]
  0005e	48 83 c0 08	 add	 rax, 8
  00062	48 89 44 24 68	 mov	 QWORD PTR argv$[rsp], rax

; 4970 : 
; 4971 :         rc = update_codepage( argc, argv, argv[0] );

  00067	b8 08 00 00 00	 mov	 eax, 8
  0006c	48 6b c0 00	 imul	 rax, rax, 0
  00070	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  00075	4c 8b 04 01	 mov	 r8, QWORD PTR [rcx+rax]
  00079	48 8b 54 24 68	 mov	 rdx, QWORD PTR argv$[rsp]
  0007e	8b 4c 24 60	 mov	 ecx, DWORD PTR argc$[rsp]
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_update_codepage
  00088	89 44 24 40	 mov	 DWORD PTR rc$[rsp], eax

; 4972 :     }

  0008c	e9 5b 03 00 00	 jmp	 $LN6@cp_updt_cm
$LN5@cp_updt_cm:

; 4973 :     else if ( ( argc == 2 || argc == 3 ) && CMD(argv[1],reference,3) )

  00091	83 7c 24 60 02	 cmp	 DWORD PTR argc$[rsp], 2
  00096	74 07		 je	 SHORT $LN9@cp_updt_cm
  00098	83 7c 24 60 03	 cmp	 DWORD PTR argc$[rsp], 3
  0009d	75 6a		 jne	 SHORT $LN7@cp_updt_cm
$LN9@cp_updt_cm:
  0009f	b8 08 00 00 00	 mov	 eax, 8
  000a4	48 6b c0 01	 imul	 rax, rax, 1
  000a8	41 b8 03 00 00
	00		 mov	 r8d, 3
  000ae	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  000b3	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208343
  000be	e8 00 00 00 00	 call	 strcaseabbrev
  000c3	85 c0		 test	 eax, eax
  000c5	74 42		 je	 SHORT $LN7@cp_updt_cm

; 4974 :     {
; 4975 :         argc--;

  000c7	8b 44 24 60	 mov	 eax, DWORD PTR argc$[rsp]
  000cb	ff c8		 dec	 eax
  000cd	89 44 24 60	 mov	 DWORD PTR argc$[rsp], eax

; 4976 :         argv++;

  000d1	48 8b 44 24 68	 mov	 rax, QWORD PTR argv$[rsp]
  000d6	48 83 c0 08	 add	 rax, 8
  000da	48 89 44 24 68	 mov	 QWORD PTR argv$[rsp], rax

; 4977 : 
; 4978 :         rc = update_codepage( argc, argv, argv[0] );

  000df	b8 08 00 00 00	 mov	 eax, 8
  000e4	48 6b c0 00	 imul	 rax, rax, 0
  000e8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  000ed	4c 8b 04 01	 mov	 r8, QWORD PTR [rcx+rax]
  000f1	48 8b 54 24 68	 mov	 rdx, QWORD PTR argv$[rsp]
  000f6	8b 4c 24 60	 mov	 ecx, DWORD PTR argc$[rsp]
  000fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_update_codepage
  00100	89 44 24 40	 mov	 DWORD PTR rc$[rsp], eax

; 4979 :     }

  00104	e9 e3 02 00 00	 jmp	 $LN8@cp_updt_cm
$LN7@cp_updt_cm:

; 4980 :     else if ( ( argc == 3 ) && ( CMD(argv[1],dsp,3) || CMD(argv[1],display,3) ) )

  00109	83 7c 24 60 03	 cmp	 DWORD PTR argc$[rsp], 3
  0010e	0f 85 92 00 00
	00		 jne	 $LN10@cp_updt_cm
  00114	b8 08 00 00 00	 mov	 eax, 8
  00119	48 6b c0 01	 imul	 rax, rax, 1
  0011d	41 b8 03 00 00
	00		 mov	 r8d, 3
  00123	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  00128	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0012c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208347
  00133	e8 00 00 00 00	 call	 strcaseabbrev
  00138	85 c0		 test	 eax, eax
  0013a	75 28		 jne	 SHORT $LN12@cp_updt_cm
  0013c	b8 08 00 00 00	 mov	 eax, 8
  00141	48 6b c0 01	 imul	 rax, rax, 1
  00145	41 b8 03 00 00
	00		 mov	 r8d, 3
  0014b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  00150	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00154	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208348
  0015b	e8 00 00 00 00	 call	 strcaseabbrev
  00160	85 c0		 test	 eax, eax
  00162	74 42		 je	 SHORT $LN10@cp_updt_cm
$LN12@cp_updt_cm:

; 4981 :     {
; 4982 :         argc--;

  00164	8b 44 24 60	 mov	 eax, DWORD PTR argc$[rsp]
  00168	ff c8		 dec	 eax
  0016a	89 44 24 60	 mov	 DWORD PTR argc$[rsp], eax

; 4983 :         argv++;

  0016e	48 8b 44 24 68	 mov	 rax, QWORD PTR argv$[rsp]
  00173	48 83 c0 08	 add	 rax, 8
  00177	48 89 44 24 68	 mov	 QWORD PTR argv$[rsp], rax

; 4984 : 
; 4985 :         rc = update_codepage( argc, argv, argv[0] );

  0017c	b8 08 00 00 00	 mov	 eax, 8
  00181	48 6b c0 00	 imul	 rax, rax, 0
  00185	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  0018a	4c 8b 04 01	 mov	 r8, QWORD PTR [rcx+rax]
  0018e	48 8b 54 24 68	 mov	 rdx, QWORD PTR argv$[rsp]
  00193	8b 4c 24 60	 mov	 ecx, DWORD PTR argc$[rsp]
  00197	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_update_codepage
  0019d	89 44 24 40	 mov	 DWORD PTR rc$[rsp], eax

; 4986 :     }

  001a1	e9 46 02 00 00	 jmp	 $LN11@cp_updt_cm
$LN10@cp_updt_cm:

; 4987 :     else if ( ( argc == 2 ) && CMD(argv[1],test,4) )

  001a6	83 7c 24 60 02	 cmp	 DWORD PTR argc$[rsp], 2
  001ab	75 6a		 jne	 SHORT $LN13@cp_updt_cm
  001ad	b8 08 00 00 00	 mov	 eax, 8
  001b2	48 6b c0 01	 imul	 rax, rax, 1
  001b6	41 b8 04 00 00
	00		 mov	 r8d, 4
  001bc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  001c1	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  001c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208351
  001cc	e8 00 00 00 00	 call	 strcaseabbrev
  001d1	85 c0		 test	 eax, eax
  001d3	74 42		 je	 SHORT $LN13@cp_updt_cm

; 4988 :     {
; 4989 :         argc--;

  001d5	8b 44 24 60	 mov	 eax, DWORD PTR argc$[rsp]
  001d9	ff c8		 dec	 eax
  001db	89 44 24 60	 mov	 DWORD PTR argc$[rsp], eax

; 4990 :         argv++;

  001df	48 8b 44 24 68	 mov	 rax, QWORD PTR argv$[rsp]
  001e4	48 83 c0 08	 add	 rax, 8
  001e8	48 89 44 24 68	 mov	 QWORD PTR argv$[rsp], rax

; 4991 : 
; 4992 :         rc = update_codepage( argc, argv, argv[0] );

  001ed	b8 08 00 00 00	 mov	 eax, 8
  001f2	48 6b c0 00	 imul	 rax, rax, 0
  001f6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  001fb	4c 8b 04 01	 mov	 r8, QWORD PTR [rcx+rax]
  001ff	48 8b 54 24 68	 mov	 rdx, QWORD PTR argv$[rsp]
  00204	8b 4c 24 60	 mov	 ecx, DWORD PTR argc$[rsp]
  00208	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_update_codepage
  0020e	89 44 24 40	 mov	 DWORD PTR rc$[rsp], eax

; 4993 :     }

  00212	e9 d5 01 00 00	 jmp	 $LN14@cp_updt_cm
$LN13@cp_updt_cm:

; 4994 :     else if ( ( argc == 4 || argc == 6 ) && CMD(argv[1],alter,3) )

  00217	83 7c 24 60 04	 cmp	 DWORD PTR argc$[rsp], 4
  0021c	74 07		 je	 SHORT $LN17@cp_updt_cm
  0021e	83 7c 24 60 06	 cmp	 DWORD PTR argc$[rsp], 6
  00223	75 6a		 jne	 SHORT $LN15@cp_updt_cm
$LN17@cp_updt_cm:
  00225	b8 08 00 00 00	 mov	 eax, 8
  0022a	48 6b c0 01	 imul	 rax, rax, 1
  0022e	41 b8 03 00 00
	00		 mov	 r8d, 3
  00234	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  00239	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0023d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208355
  00244	e8 00 00 00 00	 call	 strcaseabbrev
  00249	85 c0		 test	 eax, eax
  0024b	74 42		 je	 SHORT $LN15@cp_updt_cm

; 4995 :     {
; 4996 :         argc--;

  0024d	8b 44 24 60	 mov	 eax, DWORD PTR argc$[rsp]
  00251	ff c8		 dec	 eax
  00253	89 44 24 60	 mov	 DWORD PTR argc$[rsp], eax

; 4997 :         argv++;

  00257	48 8b 44 24 68	 mov	 rax, QWORD PTR argv$[rsp]
  0025c	48 83 c0 08	 add	 rax, 8
  00260	48 89 44 24 68	 mov	 QWORD PTR argv$[rsp], rax

; 4998 : 
; 4999 :         rc = update_codepage( argc, argv, argv[0] );

  00265	b8 08 00 00 00	 mov	 eax, 8
  0026a	48 6b c0 00	 imul	 rax, rax, 0
  0026e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  00273	4c 8b 04 01	 mov	 r8, QWORD PTR [rcx+rax]
  00277	48 8b 54 24 68	 mov	 rdx, QWORD PTR argv$[rsp]
  0027c	8b 4c 24 60	 mov	 ecx, DWORD PTR argc$[rsp]
  00280	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_update_codepage
  00286	89 44 24 40	 mov	 DWORD PTR rc$[rsp], eax

; 5000 :     }

  0028a	e9 5d 01 00 00	 jmp	 $LN16@cp_updt_cm
$LN15@cp_updt_cm:

; 5001 :     else if ( ( argc == 4 || argc == 6 ) && CMD(argv[1],export,3) )

  0028f	83 7c 24 60 04	 cmp	 DWORD PTR argc$[rsp], 4
  00294	74 07		 je	 SHORT $LN20@cp_updt_cm
  00296	83 7c 24 60 06	 cmp	 DWORD PTR argc$[rsp], 6
  0029b	75 6a		 jne	 SHORT $LN18@cp_updt_cm
$LN20@cp_updt_cm:
  0029d	b8 08 00 00 00	 mov	 eax, 8
  002a2	48 6b c0 01	 imul	 rax, rax, 1
  002a6	41 b8 03 00 00
	00		 mov	 r8d, 3
  002ac	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  002b1	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  002b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208359
  002bc	e8 00 00 00 00	 call	 strcaseabbrev
  002c1	85 c0		 test	 eax, eax
  002c3	74 42		 je	 SHORT $LN18@cp_updt_cm

; 5002 :     {
; 5003 :         argc--;

  002c5	8b 44 24 60	 mov	 eax, DWORD PTR argc$[rsp]
  002c9	ff c8		 dec	 eax
  002cb	89 44 24 60	 mov	 DWORD PTR argc$[rsp], eax

; 5004 :         argv++;

  002cf	48 8b 44 24 68	 mov	 rax, QWORD PTR argv$[rsp]
  002d4	48 83 c0 08	 add	 rax, 8
  002d8	48 89 44 24 68	 mov	 QWORD PTR argv$[rsp], rax

; 5005 : 
; 5006 :         rc = update_codepage( argc, argv, argv[0] );

  002dd	b8 08 00 00 00	 mov	 eax, 8
  002e2	48 6b c0 00	 imul	 rax, rax, 0
  002e6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  002eb	4c 8b 04 01	 mov	 r8, QWORD PTR [rcx+rax]
  002ef	48 8b 54 24 68	 mov	 rdx, QWORD PTR argv$[rsp]
  002f4	8b 4c 24 60	 mov	 ecx, DWORD PTR argc$[rsp]
  002f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_update_codepage
  002fe	89 44 24 40	 mov	 DWORD PTR rc$[rsp], eax

; 5007 :     }

  00302	e9 e5 00 00 00	 jmp	 $LN19@cp_updt_cm
$LN18@cp_updt_cm:

; 5008 :     else if ( ( argc == 4 || argc == 6 ) && CMD(argv[1],import,3) )

  00307	83 7c 24 60 04	 cmp	 DWORD PTR argc$[rsp], 4
  0030c	74 07		 je	 SHORT $LN23@cp_updt_cm
  0030e	83 7c 24 60 06	 cmp	 DWORD PTR argc$[rsp], 6
  00313	75 67		 jne	 SHORT $LN21@cp_updt_cm
$LN23@cp_updt_cm:
  00315	b8 08 00 00 00	 mov	 eax, 8
  0031a	48 6b c0 01	 imul	 rax, rax, 1
  0031e	41 b8 03 00 00
	00		 mov	 r8d, 3
  00324	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  00329	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0032d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208363
  00334	e8 00 00 00 00	 call	 strcaseabbrev
  00339	85 c0		 test	 eax, eax
  0033b	74 3f		 je	 SHORT $LN21@cp_updt_cm

; 5009 :     {
; 5010 :         argc--;

  0033d	8b 44 24 60	 mov	 eax, DWORD PTR argc$[rsp]
  00341	ff c8		 dec	 eax
  00343	89 44 24 60	 mov	 DWORD PTR argc$[rsp], eax

; 5011 :         argv++;

  00347	48 8b 44 24 68	 mov	 rax, QWORD PTR argv$[rsp]
  0034c	48 83 c0 08	 add	 rax, 8
  00350	48 89 44 24 68	 mov	 QWORD PTR argv$[rsp], rax

; 5012 : 
; 5013 :         rc = update_codepage( argc, argv, argv[0] );

  00355	b8 08 00 00 00	 mov	 eax, 8
  0035a	48 6b c0 00	 imul	 rax, rax, 0
  0035e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  00363	4c 8b 04 01	 mov	 r8, QWORD PTR [rcx+rax]
  00367	48 8b 54 24 68	 mov	 rdx, QWORD PTR argv$[rsp]
  0036c	8b 4c 24 60	 mov	 ecx, DWORD PTR argc$[rsp]
  00370	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_update_codepage
  00376	89 44 24 40	 mov	 DWORD PTR rc$[rsp], eax

; 5014 :     }

  0037a	eb 70		 jmp	 SHORT $LN22@cp_updt_cm
$LN21@cp_updt_cm:

; 5015 :     else
; 5016 :     {
; 5017 :         WRMSG( HHC02299, "E", argv[0] );

  0037c	b8 08 00 00 00	 mov	 eax, 8
  00381	48 6b c0 00	 imul	 rax, rax, 0
  00385	48 89 44 24 48	 mov	 QWORD PTR tv220[rsp], rax
  0038a	b9 01 00 00 00	 mov	 ecx, 1
  0038f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00395	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  0039a	48 8b 54 24 48	 mov	 rdx, QWORD PTR tv220[rsp]
  0039f	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  003a3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208364
  003af	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208365
  003bb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003c0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003c5	41 b9 03 00 00
	00		 mov	 r9d, 3
  003cb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208366
  003d2	ba 99 13 00 00	 mov	 edx, 5017		; 00001399H
  003d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208367
  003de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5018 :         rc = -1;

  003e4	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN22@cp_updt_cm:
$LN19@cp_updt_cm:
$LN16@cp_updt_cm:
$LN14@cp_updt_cm:
$LN11@cp_updt_cm:
$LN8@cp_updt_cm:
$LN6@cp_updt_cm:

; 5019 :     }
; 5020 : 
; 5021 :     return rc;

  003ec	8b 44 24 40	 mov	 eax, DWORD PTR rc$[rsp]

; 5022 : }

  003f0	48 83 c4 58	 add	 rsp, 88			; 00000058H
  003f4	c3		 ret	 0
cp_updt_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv176 = 80
tv194 = 88
tv77 = 96
tv157 = 104
tv178 = 112
tv196 = 120
argc$ = 144
argv$ = 152
cmdline$ = 160
legacysenseid_cmd PROC

; 4910 : {

$LN24:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
$LN4@legacysens:

; 4911 :     UNREFERENCED(cmdline);

  00015	33 c0		 xor	 eax, eax
  00017	85 c0		 test	 eax, eax
  00019	75 fa		 jne	 SHORT $LN4@legacysens
$LN7@legacysens:

; 4912 : 
; 4913 :     UPPER_ARGV_0( argv );

  0001b	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00024	74 47		 je	 SHORT $LN8@legacysens
  00026	b8 08 00 00 00	 mov	 eax, 8
  0002b	48 6b c0 00	 imul	 rax, rax, 0
  0002f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00037	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0003c	74 2f		 je	 SHORT $LN8@legacysens
  0003e	b8 08 00 00 00	 mov	 eax, 8
  00043	48 6b c0 00	 imul	 rax, rax, 0
  00047	b9 08 00 00 00	 mov	 ecx, 8
  0004c	48 6b c9 00	 imul	 rcx, rcx, 0
  00050	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00058	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0005c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00064	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00068	e8 00 00 00 00	 call	 strupper
$LN8@legacysens:
  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 a8		 jne	 SHORT $LN7@legacysens

; 4914 : 
; 4915 :     /* Parse Legacy SenseID option */
; 4916 :     if ( argc > 2 )

  00073	83 bc 24 90 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0007b	7e 75		 jle	 SHORT $LN9@legacysens

; 4917 :     {
; 4918 :         WRMSG( HHC01455, "E", argv[0] );

  0007d	b8 08 00 00 00	 mov	 eax, 8
  00082	48 6b c0 00	 imul	 rax, rax, 0
  00086	48 89 44 24 60	 mov	 QWORD PTR tv77[rsp], rax
  0008b	b9 01 00 00 00	 mov	 ecx, 1
  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00096	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0009e	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv77[rsp]
  000a3	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000a7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208291
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208292
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208293
  000d6	ba 36 13 00 00	 mov	 edx, 4918		; 00001336H
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208294
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4919 :         return -1;

  000e8	b8 ff ff ff ff	 mov	 eax, -1
  000ed	e9 ee 02 00 00	 jmp	 $LN1@legacysens
$LN9@legacysens:

; 4920 :     }
; 4921 : 
; 4922 :     if ( argc == 2 )

  000f2	83 bc 24 90 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000fa	0f 85 38 02 00
	00		 jne	 $LN10@legacysens

; 4923 :     {
; 4924 :         if ( CMD(argv[1],enable,3) || CMD(argv[1],on,2) )

  00100	b8 08 00 00 00	 mov	 eax, 8
  00105	48 6b c0 01	 imul	 rax, rax, 1
  00109	41 b8 03 00 00
	00		 mov	 r8d, 3
  0010f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00117	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0011b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208300
  00122	e8 00 00 00 00	 call	 strcaseabbrev
  00127	85 c0		 test	 eax, eax
  00129	75 2b		 jne	 SHORT $LN14@legacysens
  0012b	b8 08 00 00 00	 mov	 eax, 8
  00130	48 6b c0 01	 imul	 rax, rax, 1
  00134	41 b8 02 00 00
	00		 mov	 r8d, 2
  0013a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00142	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00146	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208301
  0014d	e8 00 00 00 00	 call	 strcaseabbrev
  00152	85 c0		 test	 eax, eax
  00154	74 23		 je	 SHORT $LN12@legacysens
$LN14@legacysens:

; 4925 :             sysblk.legacysenseid = TRUE;

  00156	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0015d	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00163	0f ba e8 14	 bts	 eax, 20
  00167	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0016e	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax
  00174	e9 fa 00 00 00	 jmp	 $LN13@legacysens
$LN12@legacysens:

; 4926 :         else if ( CMD(argv[1],disable,4) || CMD(argv[1],off,3) )

  00179	b8 08 00 00 00	 mov	 eax, 8
  0017e	48 6b c0 01	 imul	 rax, rax, 1
  00182	41 b8 04 00 00
	00		 mov	 r8d, 4
  00188	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00190	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00194	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208305
  0019b	e8 00 00 00 00	 call	 strcaseabbrev
  001a0	85 c0		 test	 eax, eax
  001a2	75 2b		 jne	 SHORT $LN17@legacysens
  001a4	b8 08 00 00 00	 mov	 eax, 8
  001a9	48 6b c0 01	 imul	 rax, rax, 1
  001ad	41 b8 03 00 00
	00		 mov	 r8d, 3
  001b3	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001bb	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  001bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208306
  001c6	e8 00 00 00 00	 call	 strcaseabbrev
  001cb	85 c0		 test	 eax, eax
  001cd	74 23		 je	 SHORT $LN15@legacysens
$LN17@legacysens:

; 4927 :             sysblk.legacysenseid = FALSE;

  001cf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001d6	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  001dc	0f ba f0 14	 btr	 eax, 20
  001e0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001e7	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax
  001ed	e9 81 00 00 00	 jmp	 $LN16@legacysens
$LN15@legacysens:

; 4928 :         else
; 4929 :         {
; 4930 :             WRMSG( HHC02205, "E", argv[1] , "" );

  001f2	b8 08 00 00 00	 mov	 eax, 8
  001f7	48 6b c0 01	 imul	 rax, rax, 1
  001fb	48 89 44 24 68	 mov	 QWORD PTR tv157[rsp], rax
  00200	b9 01 00 00 00	 mov	 ecx, 1
  00205	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0020b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208307
  00212	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00217	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0021f	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv157[rsp]
  00224	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00228	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0022d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208308
  00234	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00239	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208309
  00240	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00245	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00250	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208310
  00257	ba 42 13 00 00	 mov	 edx, 4930		; 00001342H
  0025c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208311
  00263	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4931 :             return -1;

  00269	b8 ff ff ff ff	 mov	 eax, -1
  0026e	e9 6d 01 00 00	 jmp	 $LN1@legacysens
$LN16@legacysens:
$LN13@legacysens:

; 4932 :         }
; 4933 :         if ( MLVL(VERBOSE) )

  00273	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0027a	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  00280	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00285	85 c0		 test	 eax, eax
  00287	0f 84 a6 00 00
	00		 je	 $LN18@legacysens

; 4934 :             WRMSG( HHC02204, "I", argv[0],

  0028d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00294	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  0029a	c1 e8 14	 shr	 eax, 20
  0029d	83 e0 01	 and	 eax, 1
  002a0	85 c0		 test	 eax, eax
  002a2	74 0e		 je	 SHORT $LN20@legacysens
  002a4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208313
  002ab	48 89 44 24 50	 mov	 QWORD PTR tv176[rsp], rax
  002b0	eb 0c		 jmp	 SHORT $LN21@legacysens
$LN20@legacysens:
  002b2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208314
  002b9	48 89 44 24 50	 mov	 QWORD PTR tv176[rsp], rax
$LN21@legacysens:
  002be	b8 08 00 00 00	 mov	 eax, 8
  002c3	48 6b c0 00	 imul	 rax, rax, 0
  002c7	48 89 44 24 70	 mov	 QWORD PTR tv178[rsp], rax
  002cc	b9 01 00 00 00	 mov	 ecx, 1
  002d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002d7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv176[rsp]
  002dc	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002e1	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002e9	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv178[rsp]
  002ee	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  002f2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208315
  002fe	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00303	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208316
  0030a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0030f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00314	41 b9 03 00 00
	00		 mov	 r9d, 3
  0031a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208317
  00321	ba 47 13 00 00	 mov	 edx, 4935		; 00001347H
  00326	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208318
  0032d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN18@legacysens:

; 4935 :                    sysblk.legacysenseid ? "enabled" : "disabled" );
; 4936 :     }

  00333	e9 a6 00 00 00	 jmp	 $LN11@legacysens
$LN10@legacysens:

; 4937 :     else
; 4938 :         WRMSG( HHC02203, "I", argv[0], sysblk.legacysenseid ? "enabled" : "disabled" );

  00338	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0033f	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00345	c1 e8 14	 shr	 eax, 20
  00348	83 e0 01	 and	 eax, 1
  0034b	85 c0		 test	 eax, eax
  0034d	74 0e		 je	 SHORT $LN22@legacysens
  0034f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208319
  00356	48 89 44 24 58	 mov	 QWORD PTR tv194[rsp], rax
  0035b	eb 0c		 jmp	 SHORT $LN23@legacysens
$LN22@legacysens:
  0035d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208320
  00364	48 89 44 24 58	 mov	 QWORD PTR tv194[rsp], rax
$LN23@legacysens:
  00369	b8 08 00 00 00	 mov	 eax, 8
  0036e	48 6b c0 00	 imul	 rax, rax, 0
  00372	48 89 44 24 78	 mov	 QWORD PTR tv196[rsp], rax
  00377	b9 01 00 00 00	 mov	 ecx, 1
  0037c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00382	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv194[rsp]
  00387	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0038c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00394	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv196[rsp]
  00399	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0039d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208321
  003a9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208322
  003b5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003ba	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003bf	41 b9 03 00 00
	00		 mov	 r9d, 3
  003c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208323
  003cc	ba 4a 13 00 00	 mov	 edx, 4938		; 0000134aH
  003d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208324
  003d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN11@legacysens:

; 4939 : 
; 4940 :     return 0;

  003de	33 c0		 xor	 eax, eax
$LN1@legacysens:

; 4941 : }

  003e0	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  003e7	c3		 ret	 0
legacysenseid_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
shcmdopt$1 = 80
i$ = 84
tv179 = 88
tv185 = 96
tv207 = 104
tv213 = 112
tv157 = 120
tv190 = 128
tv218 = 136
buf$ = 144
__$ArrayPad$ = 184
argc$ = 208
argv$ = 216
cmdline$ = 224
shcmdopt_cmd PROC

; 4852 : {

$LN32:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@shcmdopt_c:

; 4853 :     int i;
; 4854 :     char buf[40];
; 4855 : 
; 4856 :     UNREFERENCED( cmdline );

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@shcmdopt_c
$LN7@shcmdopt_c:

; 4857 : 
; 4858 :     UPPER_ARGV_0( argv );

  0002d	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00036	74 47		 je	 SHORT $LN11@shcmdopt_c
  00038	b8 08 00 00 00	 mov	 eax, 8
  0003d	48 6b c0 00	 imul	 rax, rax, 0
  00041	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00049	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0004e	74 2f		 je	 SHORT $LN11@shcmdopt_c
  00050	b8 08 00 00 00	 mov	 eax, 8
  00055	48 6b c0 00	 imul	 rax, rax, 0
  00059	b9 08 00 00 00	 mov	 ecx, 8
  0005e	48 6b c9 00	 imul	 rcx, rcx, 0
  00062	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006a	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0006e	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00076	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0007a	e8 00 00 00 00	 call	 strupper
$LN11@shcmdopt_c:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 a8		 jne	 SHORT $LN7@shcmdopt_c

; 4859 : 
; 4860 :     if (argc > 1)

  00085	83 bc 24 d0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0008d	0f 8e cc 02 00
	00		 jle	 $LN12@shcmdopt_c

; 4861 :     {
; 4862 :         BYTE shcmdopt = sysblk.shcmdopt;

  00093	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0009a	0f b6 80 2f 11
	00 00		 movzx	 eax, BYTE PTR [rax+4399]
  000a1	88 44 24 50	 mov	 BYTE PTR shcmdopt$1[rsp], al

; 4863 : 
; 4864 :         for (i=1; i < argc; i++)

  000a5	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  000ad	eb 0a		 jmp	 SHORT $LN10@shcmdopt_c
$LN8@shcmdopt_c:
  000af	8b 44 24 54	 mov	 eax, DWORD PTR i$[rsp]
  000b3	ff c0		 inc	 eax
  000b5	89 44 24 54	 mov	 DWORD PTR i$[rsp], eax
$LN10@shcmdopt_c:
  000b9	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  000c0	39 44 24 54	 cmp	 DWORD PTR i$[rsp], eax
  000c4	0f 8d 5f 01 00
	00		 jge	 $LN9@shcmdopt_c

; 4865 :         {
; 4866 :                  if (CMD( argv[i], enable,  3 )) shcmdopt |= SHCMDOPT_ENABLE;

  000ca	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  000cf	41 b8 03 00 00
	00		 mov	 r8d, 3
  000d5	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000dd	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208241
  000e8	e8 00 00 00 00	 call	 strcaseabbrev
  000ed	85 c0		 test	 eax, eax
  000ef	74 11		 je	 SHORT $LN14@shcmdopt_c
  000f1	0f b6 44 24 50	 movzx	 eax, BYTE PTR shcmdopt$1[rsp]
  000f6	83 c8 01	 or	 eax, 1
  000f9	88 44 24 50	 mov	 BYTE PTR shcmdopt$1[rsp], al
  000fd	e9 22 01 00 00	 jmp	 $LN15@shcmdopt_c
$LN14@shcmdopt_c:

; 4867 :             else if (CMD( argv[i], diag8,   4 )) shcmdopt |= SHCMDOPT_DIAG8;

  00102	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  00107	41 b8 04 00 00
	00		 mov	 r8d, 4
  0010d	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00115	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00119	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208244
  00120	e8 00 00 00 00	 call	 strcaseabbrev
  00125	85 c0		 test	 eax, eax
  00127	74 11		 je	 SHORT $LN16@shcmdopt_c
  00129	0f b6 44 24 50	 movzx	 eax, BYTE PTR shcmdopt$1[rsp]
  0012e	83 c8 02	 or	 eax, 2
  00131	88 44 24 50	 mov	 BYTE PTR shcmdopt$1[rsp], al
  00135	e9 ea 00 00 00	 jmp	 $LN17@shcmdopt_c
$LN16@shcmdopt_c:

; 4868 :             else if (CMD( argv[i], disable, 4 )) shcmdopt &= ~SHCMDOPT_ENABLE;

  0013a	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  0013f	41 b8 04 00 00
	00		 mov	 r8d, 4
  00145	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0014d	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00151	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208247
  00158	e8 00 00 00 00	 call	 strcaseabbrev
  0015d	85 c0		 test	 eax, eax
  0015f	74 11		 je	 SHORT $LN18@shcmdopt_c
  00161	0f b6 44 24 50	 movzx	 eax, BYTE PTR shcmdopt$1[rsp]
  00166	83 e0 fe	 and	 eax, -2
  00169	88 44 24 50	 mov	 BYTE PTR shcmdopt$1[rsp], al
  0016d	e9 b2 00 00 00	 jmp	 $LN19@shcmdopt_c
$LN18@shcmdopt_c:

; 4869 :             else if (CMD( argv[i], nodiag8, 6 )) shcmdopt &= ~SHCMDOPT_DIAG8;

  00172	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  00177	41 b8 06 00 00
	00		 mov	 r8d, 6
  0017d	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00185	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208250
  00190	e8 00 00 00 00	 call	 strcaseabbrev
  00195	85 c0		 test	 eax, eax
  00197	74 0e		 je	 SHORT $LN20@shcmdopt_c
  00199	0f b6 44 24 50	 movzx	 eax, BYTE PTR shcmdopt$1[rsp]
  0019e	83 e0 fd	 and	 eax, -3
  001a1	88 44 24 50	 mov	 BYTE PTR shcmdopt$1[rsp], al
  001a5	eb 7d		 jmp	 SHORT $LN21@shcmdopt_c
$LN20@shcmdopt_c:

; 4870 :             else
; 4871 :             {
; 4872 :                 // "Invalid argument %s%s"
; 4873 :                 WRMSG( HHC02205, "E", argv[i], "" );

  001a7	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  001ac	48 89 44 24 78	 mov	 QWORD PTR tv157[rsp], rax
  001b1	b9 01 00 00 00	 mov	 ecx, 1
  001b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208251
  001c3	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001c8	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001d0	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv157[rsp]
  001d5	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  001d9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208252
  001e5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208253
  001f1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001f6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001fb	41 b9 03 00 00
	00		 mov	 r9d, 3
  00201	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208254
  00208	ba 09 13 00 00	 mov	 edx, 4873		; 00001309H
  0020d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208255
  00214	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4874 :                 return -1;

  0021a	b8 ff ff ff ff	 mov	 eax, -1
  0021f	e9 42 02 00 00	 jmp	 $LN1@shcmdopt_c
$LN21@shcmdopt_c:
$LN19@shcmdopt_c:
$LN17@shcmdopt_c:
$LN15@shcmdopt_c:

; 4875 :             }
; 4876 :         }

  00224	e9 86 fe ff ff	 jmp	 $LN8@shcmdopt_c
$LN9@shcmdopt_c:

; 4877 : 
; 4878 :         /* Update sysblk */
; 4879 :         sysblk.shcmdopt = shcmdopt;

  00229	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00230	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR shcmdopt$1[rsp]
  00235	88 88 2f 11 00
	00		 mov	 BYTE PTR [rax+4399], cl

; 4880 : 
; 4881 :         if (MLVL( VERBOSE ))

  0023b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00242	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  00248	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0024d	85 c0		 test	 eax, eax
  0024f	0f 84 05 01 00
	00		 je	 $LN22@shcmdopt_c

; 4882 :         {
; 4883 :             MSGBUF( buf, "%sABLE  %sDIAG8"

  00255	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0025c	0f b6 80 2f 11
	00 00		 movzx	 eax, BYTE PTR [rax+4399]
  00263	83 e0 02	 and	 eax, 2
  00266	85 c0		 test	 eax, eax
  00268	74 0e		 je	 SHORT $LN24@shcmdopt_c
  0026a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208257
  00271	48 89 44 24 58	 mov	 QWORD PTR tv179[rsp], rax
  00276	eb 0c		 jmp	 SHORT $LN25@shcmdopt_c
$LN24@shcmdopt_c:
  00278	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208258
  0027f	48 89 44 24 58	 mov	 QWORD PTR tv179[rsp], rax
$LN25@shcmdopt_c:
  00284	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0028b	0f b6 80 2f 11
	00 00		 movzx	 eax, BYTE PTR [rax+4399]
  00292	83 e0 01	 and	 eax, 1
  00295	85 c0		 test	 eax, eax
  00297	74 0e		 je	 SHORT $LN26@shcmdopt_c
  00299	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208259
  002a0	48 89 44 24 60	 mov	 QWORD PTR tv185[rsp], rax
  002a5	eb 0c		 jmp	 SHORT $LN27@shcmdopt_c
$LN26@shcmdopt_c:
  002a7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208260
  002ae	48 89 44 24 60	 mov	 QWORD PTR tv185[rsp], rax
$LN27@shcmdopt_c:
  002b3	48 8b 44 24 58	 mov	 rax, QWORD PTR tv179[rsp]
  002b8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002bd	4c 8b 4c 24 60	 mov	 r9, QWORD PTR tv185[rsp]
  002c2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208261
  002c9	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  002ce	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  002d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4884 :                 , (sysblk.shcmdopt & SHCMDOPT_ENABLE) ? "EN" : "DIS"
; 4885 :                 , (sysblk.shcmdopt & SHCMDOPT_DIAG8)  ? ""   : "NO"
; 4886 :             );
; 4887 : 
; 4888 :             // "%-14s set to %s"
; 4889 :             WRMSG( HHC02204, "I", argv[0], buf );

  002dc	b8 08 00 00 00	 mov	 eax, 8
  002e1	48 6b c0 00	 imul	 rax, rax, 0
  002e5	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv190[rsp], rax
  002ed	b9 01 00 00 00	 mov	 ecx, 1
  002f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002f8	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00300	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00305	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0030d	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv190[rsp]
  00315	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00319	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0031e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208262
  00325	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0032a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208263
  00331	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00336	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0033b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00341	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208264
  00348	ba 19 13 00 00	 mov	 edx, 4889		; 00001319H
  0034d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208265
  00354	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN22@shcmdopt_c:

; 4890 :         }
; 4891 :     }

  0035a	e9 05 01 00 00	 jmp	 $LN13@shcmdopt_c
$LN12@shcmdopt_c:

; 4892 :     else
; 4893 :     {
; 4894 :         MSGBUF( buf, "%sABLE  %sDIAG8"

  0035f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00366	0f b6 80 2f 11
	00 00		 movzx	 eax, BYTE PTR [rax+4399]
  0036d	83 e0 02	 and	 eax, 2
  00370	85 c0		 test	 eax, eax
  00372	74 0e		 je	 SHORT $LN28@shcmdopt_c
  00374	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208266
  0037b	48 89 44 24 68	 mov	 QWORD PTR tv207[rsp], rax
  00380	eb 0c		 jmp	 SHORT $LN29@shcmdopt_c
$LN28@shcmdopt_c:
  00382	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208267
  00389	48 89 44 24 68	 mov	 QWORD PTR tv207[rsp], rax
$LN29@shcmdopt_c:
  0038e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00395	0f b6 80 2f 11
	00 00		 movzx	 eax, BYTE PTR [rax+4399]
  0039c	83 e0 01	 and	 eax, 1
  0039f	85 c0		 test	 eax, eax
  003a1	74 0e		 je	 SHORT $LN30@shcmdopt_c
  003a3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208268
  003aa	48 89 44 24 70	 mov	 QWORD PTR tv213[rsp], rax
  003af	eb 0c		 jmp	 SHORT $LN31@shcmdopt_c
$LN30@shcmdopt_c:
  003b1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208269
  003b8	48 89 44 24 70	 mov	 QWORD PTR tv213[rsp], rax
$LN31@shcmdopt_c:
  003bd	48 8b 44 24 68	 mov	 rax, QWORD PTR tv207[rsp]
  003c2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003c7	4c 8b 4c 24 70	 mov	 r9, QWORD PTR tv213[rsp]
  003cc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208270
  003d3	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  003d8	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  003e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4895 :             , (sysblk.shcmdopt & SHCMDOPT_ENABLE) ? "EN" : "DIS"
; 4896 :             , (sysblk.shcmdopt & SHCMDOPT_DIAG8)  ? ""   : "NO"
; 4897 :         );
; 4898 : 
; 4899 :         // "%-14s: %s"
; 4900 :         WRMSG( HHC02203, "I", argv[0], buf );

  003e6	b8 08 00 00 00	 mov	 eax, 8
  003eb	48 6b c0 00	 imul	 rax, rax, 0
  003ef	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv218[rsp], rax
  003f7	b9 01 00 00 00	 mov	 ecx, 1
  003fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00402	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0040a	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0040f	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00417	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv218[rsp]
  0041f	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00423	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00428	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208271
  0042f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00434	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208272
  0043b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00440	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00445	41 b9 03 00 00
	00		 mov	 r9d, 3
  0044b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208273
  00452	ba 24 13 00 00	 mov	 edx, 4900		; 00001324H
  00457	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208274
  0045e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN13@shcmdopt_c:

; 4901 :     }
; 4902 : 
; 4903 :     return 0;

  00464	33 c0		 xor	 eax, eax
$LN1@shcmdopt_c:

; 4904 : }

  00466	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0046e	48 33 cc	 xor	 rcx, rsp
  00471	e8 00 00 00 00	 call	 __security_check_cookie
  00476	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  0047d	c3		 ret	 0
shcmdopt_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
diag8opt$1 = 80
i$ = 84
tv192 = 88
tv198 = 96
tv220 = 104
tv226 = 112
tv77 = 120
tv170 = 128
tv203 = 136
buf$ = 144
__$ArrayPad$ = 184
argc$ = 208
argv$ = 216
cmdline$ = 224
diag8_cmd PROC

; 4780 : {

$LN33:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@diag8_cmd:

; 4781 :     int i;
; 4782 :     char buf[40];
; 4783 : 
; 4784 :     UNREFERENCED( cmdline );

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@diag8_cmd
$LN7@diag8_cmd:

; 4785 : 
; 4786 :     UPPER_ARGV_0( argv );

  0002d	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00036	74 47		 je	 SHORT $LN11@diag8_cmd
  00038	b8 08 00 00 00	 mov	 eax, 8
  0003d	48 6b c0 00	 imul	 rax, rax, 0
  00041	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00049	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0004e	74 2f		 je	 SHORT $LN11@diag8_cmd
  00050	b8 08 00 00 00	 mov	 eax, 8
  00055	48 6b c0 00	 imul	 rax, rax, 0
  00059	b9 08 00 00 00	 mov	 ecx, 8
  0005e	48 6b c9 00	 imul	 rcx, rcx, 0
  00062	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006a	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0006e	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00076	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0007a	e8 00 00 00 00	 call	 strupper
$LN11@diag8_cmd:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 a8		 jne	 SHORT $LN7@diag8_cmd

; 4787 : 
; 4788 :     if (argc > 3)

  00085	83 bc 24 d0 00
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  0008d	7e 75		 jle	 SHORT $LN12@diag8_cmd

; 4789 :     {
; 4790 :         // "Invalid number of arguments for %s"
; 4791 :         WRMSG( HHC01455, "E", argv[0] );

  0008f	b8 08 00 00 00	 mov	 eax, 8
  00094	48 6b c0 00	 imul	 rax, rax, 0
  00098	48 89 44 24 78	 mov	 QWORD PTR tv77[rsp], rax
  0009d	b9 01 00 00 00	 mov	 ecx, 1
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a8	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000b0	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv77[rsp]
  000b5	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000b9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208173
  000c5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208174
  000d1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000d6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000db	41 b9 03 00 00
	00		 mov	 r9d, 3
  000e1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208175
  000e8	ba b7 12 00 00	 mov	 edx, 4791		; 000012b7H
  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208176
  000f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4792 :         return -1;

  000fa	b8 ff ff ff ff	 mov	 eax, -1
  000ff	e9 d2 03 00 00	 jmp	 $LN1@diag8_cmd
$LN12@diag8_cmd:

; 4793 :     }
; 4794 : 
; 4795 :     /* Did they enter any arguments to the command? */
; 4796 :     if (argc > 1)

  00104	83 bc 24 d0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0010c	0f 8e d9 02 00
	00		 jle	 $LN13@diag8_cmd

; 4797 :     {
; 4798 :         BYTE diag8opt = sysblk.diag8opt;

  00112	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00119	0f b6 80 2e 11
	00 00		 movzx	 eax, BYTE PTR [rax+4398]
  00120	88 44 24 50	 mov	 BYTE PTR diag8opt$1[rsp], al

; 4799 : 
; 4800 :         /* Parse diag8cmd argument(s) */
; 4801 :         for (i=1; i < argc; i++)

  00124	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  0012c	eb 0a		 jmp	 SHORT $LN10@diag8_cmd
$LN8@diag8_cmd:
  0012e	8b 44 24 54	 mov	 eax, DWORD PTR i$[rsp]
  00132	ff c0		 inc	 eax
  00134	89 44 24 54	 mov	 DWORD PTR i$[rsp], eax
$LN10@diag8_cmd:
  00138	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  0013f	39 44 24 54	 cmp	 DWORD PTR i$[rsp], eax
  00143	0f 8d 6a 01 00
	00		 jge	 $LN9@diag8_cmd

; 4802 :         {
; 4803 :             if (CMD( argv[i], echo, 4 ))

  00149	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  0014e	41 b8 04 00 00
	00		 mov	 r8d, 4
  00154	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0015c	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00160	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208181
  00167	e8 00 00 00 00	 call	 strcaseabbrev
  0016c	85 c0		 test	 eax, eax
  0016e	74 12		 je	 SHORT $LN15@diag8_cmd

; 4804 :                 diag8opt |= DIAG8CMD_ECHO;

  00170	0f b6 44 24 50	 movzx	 eax, BYTE PTR diag8opt$1[rsp]
  00175	0f ba e8 07	 bts	 eax, 7
  00179	88 44 24 50	 mov	 BYTE PTR diag8opt$1[rsp], al
  0017d	e9 2c 01 00 00	 jmp	 $LN16@diag8_cmd
$LN15@diag8_cmd:

; 4805 :             else
; 4806 :             if (CMD( argv[i], noecho, 6 ))

  00182	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  00187	41 b8 06 00 00
	00		 mov	 r8d, 6
  0018d	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00195	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00199	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208184
  001a0	e8 00 00 00 00	 call	 strcaseabbrev
  001a5	85 c0		 test	 eax, eax
  001a7	74 12		 je	 SHORT $LN17@diag8_cmd

; 4807 :                 diag8opt &= ~DIAG8CMD_ECHO;

  001a9	0f b6 44 24 50	 movzx	 eax, BYTE PTR diag8opt$1[rsp]
  001ae	0f ba f0 07	 btr	 eax, 7
  001b2	88 44 24 50	 mov	 BYTE PTR diag8opt$1[rsp], al
  001b6	e9 f3 00 00 00	 jmp	 $LN18@diag8_cmd
$LN17@diag8_cmd:

; 4808 :             else
; 4809 :             if (CMD( argv[i], enable, 3 ))

  001bb	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  001c0	41 b8 03 00 00
	00		 mov	 r8d, 3
  001c6	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001ce	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  001d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208187
  001d9	e8 00 00 00 00	 call	 strcaseabbrev
  001de	85 c0		 test	 eax, eax
  001e0	74 11		 je	 SHORT $LN19@diag8_cmd

; 4810 :                 diag8opt |= DIAG8CMD_ENABLE;

  001e2	0f b6 44 24 50	 movzx	 eax, BYTE PTR diag8opt$1[rsp]
  001e7	83 c8 01	 or	 eax, 1
  001ea	88 44 24 50	 mov	 BYTE PTR diag8opt$1[rsp], al
  001ee	e9 bb 00 00 00	 jmp	 $LN20@diag8_cmd
$LN19@diag8_cmd:

; 4811 :             else
; 4812 :             if (CMD( argv[i], disable, 4 ))

  001f3	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  001f8	41 b8 04 00 00
	00		 mov	 r8d, 4
  001fe	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00206	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0020a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208190
  00211	e8 00 00 00 00	 call	 strcaseabbrev
  00216	85 c0		 test	 eax, eax
  00218	74 11		 je	 SHORT $LN21@diag8_cmd

; 4813 :                 diag8opt &= ~DIAG8CMD_ENABLE;

  0021a	0f b6 44 24 50	 movzx	 eax, BYTE PTR diag8opt$1[rsp]
  0021f	83 e0 fe	 and	 eax, -2
  00222	88 44 24 50	 mov	 BYTE PTR diag8opt$1[rsp], al
  00226	e9 83 00 00 00	 jmp	 $LN22@diag8_cmd
$LN21@diag8_cmd:

; 4814 :             else
; 4815 :             {
; 4816 :                 // "Invalid argument %s%s"
; 4817 :                 WRMSG( HHC02205, "E", argv[i], "" );

  0022b	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  00230	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv170[rsp], rax
  00238	b9 01 00 00 00	 mov	 ecx, 1
  0023d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00243	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208191
  0024a	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0024f	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00257	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv170[rsp]
  0025f	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00263	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00268	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208192
  0026f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00274	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208193
  0027b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00280	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00285	41 b9 03 00 00
	00		 mov	 r9d, 3
  0028b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208194
  00292	ba d1 12 00 00	 mov	 edx, 4817		; 000012d1H
  00297	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208195
  0029e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4818 :                 return -1;

  002a4	b8 ff ff ff ff	 mov	 eax, -1
  002a9	e9 28 02 00 00	 jmp	 $LN1@diag8_cmd
$LN22@diag8_cmd:
$LN20@diag8_cmd:
$LN18@diag8_cmd:
$LN16@diag8_cmd:

; 4819 :             }
; 4820 :         }

  002ae	e9 7b fe ff ff	 jmp	 $LN8@diag8_cmd
$LN9@diag8_cmd:

; 4821 : 
; 4822 :         /* Update sysblk */
; 4823 :         sysblk.diag8opt = diag8opt;

  002b3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002ba	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR diag8opt$1[rsp]
  002bf	88 88 2e 11 00
	00		 mov	 BYTE PTR [rax+4398], cl

; 4824 : 
; 4825 :         if (MLVL( VERBOSE ))

  002c5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002cc	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  002d2	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  002d7	85 c0		 test	 eax, eax
  002d9	0f 84 07 01 00
	00		 je	 $LN23@diag8_cmd

; 4826 :         {
; 4827 :             MSGBUF( buf, "%sABLE  %sECHO",

  002df	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002e6	0f b6 80 2e 11
	00 00		 movzx	 eax, BYTE PTR [rax+4398]
  002ed	25 80 00 00 00	 and	 eax, 128		; 00000080H
  002f2	85 c0		 test	 eax, eax
  002f4	74 0e		 je	 SHORT $LN25@diag8_cmd
  002f6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208197
  002fd	48 89 44 24 58	 mov	 QWORD PTR tv192[rsp], rax
  00302	eb 0c		 jmp	 SHORT $LN26@diag8_cmd
$LN25@diag8_cmd:
  00304	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208198
  0030b	48 89 44 24 58	 mov	 QWORD PTR tv192[rsp], rax
$LN26@diag8_cmd:
  00310	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00317	0f b6 80 2e 11
	00 00		 movzx	 eax, BYTE PTR [rax+4398]
  0031e	83 e0 01	 and	 eax, 1
  00321	85 c0		 test	 eax, eax
  00323	74 0e		 je	 SHORT $LN27@diag8_cmd
  00325	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208199
  0032c	48 89 44 24 60	 mov	 QWORD PTR tv198[rsp], rax
  00331	eb 0c		 jmp	 SHORT $LN28@diag8_cmd
$LN27@diag8_cmd:
  00333	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208200
  0033a	48 89 44 24 60	 mov	 QWORD PTR tv198[rsp], rax
$LN28@diag8_cmd:
  0033f	48 8b 44 24 58	 mov	 rax, QWORD PTR tv192[rsp]
  00344	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00349	4c 8b 4c 24 60	 mov	 r9, QWORD PTR tv198[rsp]
  0034e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208201
  00355	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  0035a	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00362	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4828 :                 (sysblk.diag8opt & DIAG8CMD_ENABLE) ? "EN" : "DIS",
; 4829 :                 (sysblk.diag8opt & DIAG8CMD_ECHO)   ? ""   : "NO" );
; 4830 : 
; 4831 :             // "%-14s set to %s"
; 4832 :             WRMSG( HHC02204, "I", argv[0], buf );

  00368	b8 08 00 00 00	 mov	 eax, 8
  0036d	48 6b c0 00	 imul	 rax, rax, 0
  00371	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv203[rsp], rax
  00379	b9 01 00 00 00	 mov	 ecx, 1
  0037e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00384	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0038c	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00391	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00399	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv203[rsp]
  003a1	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  003a5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208202
  003b1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208203
  003bd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003c2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003c7	41 b9 03 00 00
	00		 mov	 r9d, 3
  003cd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208204
  003d4	ba e0 12 00 00	 mov	 edx, 4832		; 000012e0H
  003d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208205
  003e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN23@diag8_cmd:

; 4833 :         }
; 4834 :     }

  003e6	e9 e9 00 00 00	 jmp	 $LN14@diag8_cmd
$LN13@diag8_cmd:

; 4835 :     else /* Display current diag8cmd settings */
; 4836 :     {
; 4837 :         MSGBUF( buf, "%sABLE  %sECHO",

  003eb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  003f2	0f b6 80 2e 11
	00 00		 movzx	 eax, BYTE PTR [rax+4398]
  003f9	25 80 00 00 00	 and	 eax, 128		; 00000080H
  003fe	85 c0		 test	 eax, eax
  00400	74 0e		 je	 SHORT $LN29@diag8_cmd
  00402	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208206
  00409	48 89 44 24 68	 mov	 QWORD PTR tv220[rsp], rax
  0040e	eb 0c		 jmp	 SHORT $LN30@diag8_cmd
$LN29@diag8_cmd:
  00410	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208207
  00417	48 89 44 24 68	 mov	 QWORD PTR tv220[rsp], rax
$LN30@diag8_cmd:
  0041c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00423	0f b6 80 2e 11
	00 00		 movzx	 eax, BYTE PTR [rax+4398]
  0042a	83 e0 01	 and	 eax, 1
  0042d	85 c0		 test	 eax, eax
  0042f	74 0e		 je	 SHORT $LN31@diag8_cmd
  00431	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208208
  00438	48 89 44 24 70	 mov	 QWORD PTR tv226[rsp], rax
  0043d	eb 0c		 jmp	 SHORT $LN32@diag8_cmd
$LN31@diag8_cmd:
  0043f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208209
  00446	48 89 44 24 70	 mov	 QWORD PTR tv226[rsp], rax
$LN32@diag8_cmd:
  0044b	48 8b 44 24 68	 mov	 rax, QWORD PTR tv220[rsp]
  00450	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00455	4c 8b 4c 24 70	 mov	 r9, QWORD PTR tv226[rsp]
  0045a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208210
  00461	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00466	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0046e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4838 :             (sysblk.diag8opt & DIAG8CMD_ENABLE) ? "EN" : "DIS",
; 4839 :             (sysblk.diag8opt & DIAG8CMD_ECHO)   ? ""   : "NO" );
; 4840 : 
; 4841 :         // "%-14s: %s"
; 4842 :         WRMSG( HHC02203, "I", "DIAG8CMD", buf );

  00474	b9 01 00 00 00	 mov	 ecx, 1
  00479	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0047f	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00487	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0048c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208211
  00493	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00498	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208212
  0049f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208213
  004ab	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004b0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004b5	41 b9 03 00 00
	00		 mov	 r9d, 3
  004bb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208214
  004c2	ba ea 12 00 00	 mov	 edx, 4842		; 000012eaH
  004c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208215
  004ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN14@diag8_cmd:

; 4843 :     }
; 4844 : 
; 4845 :     return 0;

  004d4	33 c0		 xor	 eax, eax
$LN1@diag8_cmd:

; 4846 : }

  004d6	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  004de	48 33 cc	 xor	 rcx, rsp
  004e1	e8 00 00 00 00	 call	 __security_check_cookie
  004e6	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  004ed	c3		 ret	 0
diag8_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv134 = 80
tv146 = 88
argc$ = 112
argv$ = 120
cmdline$ = 128
pgmprdos_cmd PROC

; 4740 : {

$LN17:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@pgmprdos_c:

; 4741 :     UNREFERENCED( cmdline );

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@pgmprdos_c
$LN7@pgmprdos_c:

; 4742 : 
; 4743 :     UPPER_ARGV_0( argv );

  00018	48 83 7c 24 78
	00		 cmp	 QWORD PTR argv$[rsp], 0
  0001e	74 3e		 je	 SHORT $LN8@pgmprdos_c
  00020	b8 08 00 00 00	 mov	 eax, 8
  00025	48 6b c0 00	 imul	 rax, rax, 0
  00029	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  0002e	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00033	74 29		 je	 SHORT $LN8@pgmprdos_c
  00035	b8 08 00 00 00	 mov	 eax, 8
  0003a	48 6b c0 00	 imul	 rax, rax, 0
  0003e	b9 08 00 00 00	 mov	 ecx, 8
  00043	48 6b c9 00	 imul	 rcx, rcx, 0
  00047	48 8b 54 24 78	 mov	 rdx, QWORD PTR argv$[rsp]
  0004c	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00050	48 8b 44 24 78	 mov	 rax, QWORD PTR argv$[rsp]
  00055	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00059	e8 00 00 00 00	 call	 strupper
$LN8@pgmprdos_c:
  0005e	33 c0		 xor	 eax, eax
  00060	85 c0		 test	 eax, eax
  00062	75 b4		 jne	 SHORT $LN7@pgmprdos_c

; 4744 : 
; 4745 :     /* Parse program product OS allowed */
; 4746 :     if (argc == 2)

  00064	83 7c 24 70 02	 cmp	 DWORD PTR argc$[rsp], 2
  00069	0f 85 13 01 00
	00		 jne	 $LN9@pgmprdos_c

; 4747 :     {
; 4748 :         if (0
; 4749 :             || CMD( argv[1], LICENSED, 3 )
; 4750 :             || CMD( argv[1], LICENCED, 3 )  // (alternate spelling)

  0006f	33 c0		 xor	 eax, eax
  00071	85 c0		 test	 eax, eax
  00073	75 50		 jne	 SHORT $LN13@pgmprdos_c
  00075	b8 08 00 00 00	 mov	 eax, 8
  0007a	48 6b c0 01	 imul	 rax, rax, 1
  0007e	41 b8 03 00 00
	00		 mov	 r8d, 3
  00084	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00089	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0008d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208137
  00094	e8 00 00 00 00	 call	 strcaseabbrev
  00099	85 c0		 test	 eax, eax
  0009b	75 28		 jne	 SHORT $LN13@pgmprdos_c
  0009d	b8 08 00 00 00	 mov	 eax, 8
  000a2	48 6b c0 01	 imul	 rax, rax, 1
  000a6	41 b8 03 00 00
	00		 mov	 r8d, 3
  000ac	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  000b1	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208138
  000bc	e8 00 00 00 00	 call	 strcaseabbrev
  000c1	85 c0		 test	 eax, eax
  000c3	74 0c		 je	 SHORT $LN11@pgmprdos_c
$LN13@pgmprdos_c:

; 4751 :         )
; 4752 :         {
; 4753 :             losc_set( PGM_PRD_OS_LICENSED );

  000c5	33 c9		 xor	 ecx, ecx
  000c7	e8 00 00 00 00	 call	 losc_set

; 4754 :         }

  000cc	e9 af 00 00 00	 jmp	 $LN12@pgmprdos_c
$LN11@pgmprdos_c:

; 4755 :         else if (CMD( argv[1], RESTRICTED, 3 ))

  000d1	b8 08 00 00 00	 mov	 eax, 8
  000d6	48 6b c0 01	 imul	 rax, rax, 1
  000da	41 b8 03 00 00
	00		 mov	 r8d, 3
  000e0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  000e5	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208141
  000f0	e8 00 00 00 00	 call	 strcaseabbrev
  000f5	85 c0		 test	 eax, eax
  000f7	74 0c		 je	 SHORT $LN14@pgmprdos_c

; 4756 :         {
; 4757 :             losc_set( PGM_PRD_OS_RESTRICTED );

  000f9	b9 04 00 00 00	 mov	 ecx, 4
  000fe	e8 00 00 00 00	 call	 losc_set

; 4758 :         }

  00103	eb 7b		 jmp	 SHORT $LN15@pgmprdos_c
$LN14@pgmprdos_c:

; 4759 :         else
; 4760 :         {
; 4761 :             // "Invalid argument %s%s"
; 4762 :             WRMSG( HHC02205, "E", argv[1], "" );

  00105	b8 08 00 00 00	 mov	 eax, 8
  0010a	48 6b c0 01	 imul	 rax, rax, 1
  0010e	48 89 44 24 50	 mov	 QWORD PTR tv134[rsp], rax
  00113	b9 01 00 00 00	 mov	 ecx, 1
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0011e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208142
  00125	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0012a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  0012f	48 8b 54 24 50	 mov	 rdx, QWORD PTR tv134[rsp]
  00134	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00138	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0013d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208143
  00144	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00149	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208144
  00150	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00155	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0015a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00160	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208145
  00167	ba 9a 12 00 00	 mov	 edx, 4762		; 0000129aH
  0016c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208146
  00173	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4763 :             return -1;

  00179	b8 ff ff ff ff	 mov	 eax, -1
  0017e	eb 73		 jmp	 SHORT $LN1@pgmprdos_c
$LN15@pgmprdos_c:
$LN12@pgmprdos_c:

; 4764 :         }
; 4765 :     }

  00180	eb 6f		 jmp	 SHORT $LN10@pgmprdos_c
$LN9@pgmprdos_c:

; 4766 :     else
; 4767 :     {
; 4768 :         // "Invalid number of arguments for %s"
; 4769 :         WRMSG( HHC01455, "E", argv[0] );

  00182	b8 08 00 00 00	 mov	 eax, 8
  00187	48 6b c0 00	 imul	 rax, rax, 0
  0018b	48 89 44 24 58	 mov	 QWORD PTR tv146[rsp], rax
  00190	b9 01 00 00 00	 mov	 ecx, 1
  00195	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0019b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  001a0	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv146[rsp]
  001a5	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001a9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208147
  001b5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208148
  001c1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001c6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001cb	41 b9 03 00 00
	00		 mov	 r9d, 3
  001d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208149
  001d8	ba a1 12 00 00	 mov	 edx, 4769		; 000012a1H
  001dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208150
  001e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4770 :         return -1;

  001ea	b8 ff ff ff ff	 mov	 eax, -1
  001ef	eb 02		 jmp	 SHORT $LN1@pgmprdos_c
$LN10@pgmprdos_c:

; 4771 :     }
; 4772 : 
; 4773 :     return 0;

  001f1	33 c0		 xor	 eax, eax
$LN1@pgmprdos_c:

; 4774 : }

  001f3	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001f7	c3		 ret	 0
pgmprdos_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv89 = 64
argc$ = 96
argv$ = 104
cmdline$ = 112
sh_cmd	PROC

; 4721 : {

$LN15:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@sh_cmd:

; 4722 :     UNREFERENCED( argc );

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@sh_cmd
$LN7@sh_cmd:

; 4723 :     UNREFERENCED( argv );

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN7@sh_cmd

; 4724 : 
; 4725 :     if (!(sysblk.shcmdopt & SHCMDOPT_ENABLE))

  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00025	0f b6 80 2f 11
	00 00		 movzx	 eax, BYTE PTR [rax+4399]
  0002c	83 e0 01	 and	 eax, 1
  0002f	85 c0		 test	 eax, eax
  00031	75 4e		 jne	 SHORT $LN11@sh_cmd

; 4726 :     {
; 4727 :         // "Shell/Exec commands are disabled"
; 4728 :         WRMSG( HHC02227, "E" );

  00033	b9 01 00 00 00	 mov	 ecx, 1
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208113
  00045	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208114
  00051	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00056	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00061	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208115
  00068	ba 78 12 00 00	 mov	 edx, 4728		; 00001278H
  0006d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208116
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4729 :         return -1;

  0007a	b8 ff ff ff ff	 mov	 eax, -1
  0007f	eb 5b		 jmp	 SHORT $LN1@sh_cmd
$LN11@sh_cmd:

; 4730 :     }
; 4731 : 
; 4732 :     for (cmdline += 2; isspace( *cmdline ); ++cmdline) /* (nop) */;

  00081	48 8b 44 24 70	 mov	 rax, QWORD PTR cmdline$[rsp]
  00086	48 83 c0 02	 add	 rax, 2
  0008a	48 89 44 24 70	 mov	 QWORD PTR cmdline$[rsp], rax
  0008f	eb 0d		 jmp	 SHORT $LN10@sh_cmd
$LN8@sh_cmd:
  00091	48 8b 44 24 70	 mov	 rax, QWORD PTR cmdline$[rsp]
  00096	48 ff c0	 inc	 rax
  00099	48 89 44 24 70	 mov	 QWORD PTR cmdline$[rsp], rax
$LN10@sh_cmd:
  0009e	48 8b 44 24 70	 mov	 rax, QWORD PTR cmdline$[rsp]
  000a3	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000a6	8b c8		 mov	 ecx, eax
  000a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isspace
  000ae	85 c0		 test	 eax, eax
  000b0	74 02		 je	 SHORT $LN9@sh_cmd
  000b2	eb dd		 jmp	 SHORT $LN8@sh_cmd
$LN9@sh_cmd:

; 4733 :     return (*cmdline) ? herc_system( cmdline ) : -1;

  000b4	48 8b 44 24 70	 mov	 rax, QWORD PTR cmdline$[rsp]
  000b9	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000bc	85 c0		 test	 eax, eax
  000be	74 10		 je	 SHORT $LN13@sh_cmd
  000c0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cmdline$[rsp]
  000c5	e8 00 00 00 00	 call	 herc_system
  000ca	89 44 24 40	 mov	 DWORD PTR tv89[rsp], eax
  000ce	eb 08		 jmp	 SHORT $LN14@sh_cmd
$LN13@sh_cmd:
  000d0	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR tv89[rsp], -1
$LN14@sh_cmd:
  000d8	8b 44 24 40	 mov	 eax, DWORD PTR tv89[rsp]
$LN1@sh_cmd:

; 4734 : }

  000dc	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000e0	c3		 ret	 0
sh_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv147 = 80
tv154 = 88
tv172 = 96
tv77 = 104
tv90 = 112
tv156 = 120
tv174 = 128
argc$ = 160
argv$ = 168
cmdline$ = 176
pantitle_cmd PROC

; 4681 : {

$LN20:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
$LN4@pantitle_c:

; 4682 :     UNREFERENCED( cmdline );

  00015	33 c0		 xor	 eax, eax
  00017	85 c0		 test	 eax, eax
  00019	75 fa		 jne	 SHORT $LN4@pantitle_c
$LN7@pantitle_c:

; 4683 :     UPPER_ARGV_0(  argv   );

  0001b	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00024	74 47		 je	 SHORT $LN8@pantitle_c
  00026	b8 08 00 00 00	 mov	 eax, 8
  0002b	48 6b c0 00	 imul	 rax, rax, 0
  0002f	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00037	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0003c	74 2f		 je	 SHORT $LN8@pantitle_c
  0003e	b8 08 00 00 00	 mov	 eax, 8
  00043	48 6b c0 00	 imul	 rax, rax, 0
  00047	b9 08 00 00 00	 mov	 ecx, 8
  0004c	48 6b c9 00	 imul	 rcx, rcx, 0
  00050	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00058	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0005c	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00064	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00068	e8 00 00 00 00	 call	 strupper
$LN8@pantitle_c:
  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 a8		 jne	 SHORT $LN7@pantitle_c

; 4684 : 
; 4685 :     // "Command '%s' is deprecated%s"
; 4686 :     WRMSG( HHC02256, "W", argv[0], "; use PANOPT TITLE=xxx instead" );

  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 00	 imul	 rax, rax, 0
  0007c	48 89 44 24 68	 mov	 QWORD PTR tv77[rsp], rax
  00081	b9 01 00 00 00	 mov	 ecx, 1
  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0008c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208072
  00093	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00098	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000a0	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv77[rsp]
  000a5	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000a9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208073
  000b5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208074
  000c1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000cb	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208075
  000d8	ba 4e 12 00 00	 mov	 edx, 4686		; 0000124eH
  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208076
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4687 : 
; 4688 :     if (argc > 2)

  000ea	83 bc 24 a0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000f2	7e 75		 jle	 SHORT $LN9@pantitle_c

; 4689 :     {
; 4690 :         // "Invalid command usage. Type 'help %s' for assistance."
; 4691 :         WRMSG( HHC02299, "E", argv[0] );

  000f4	b8 08 00 00 00	 mov	 eax, 8
  000f9	48 6b c0 00	 imul	 rax, rax, 0
  000fd	48 89 44 24 70	 mov	 QWORD PTR tv90[rsp], rax
  00102	b9 01 00 00 00	 mov	 ecx, 1
  00107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0010d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00115	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv90[rsp]
  0011a	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0011e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00123	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208078
  0012a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0012f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208079
  00136	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0013b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00140	41 b9 03 00 00
	00		 mov	 r9d, 3
  00146	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208080
  0014d	ba 53 12 00 00	 mov	 edx, 4691		; 00001253H
  00152	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208081
  00159	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4692 :         return -1;

  0015f	b8 ff ff ff ff	 mov	 eax, -1
  00164	e9 fb 01 00 00	 jmp	 $LN1@pantitle_c
$LN9@pantitle_c:

; 4693 :     }
; 4694 : 
; 4695 :     /* Update pantitle if operand is specified */
; 4696 :     if (argc == 2)

  00169	83 bc 24 a0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00171	0f 85 3e 01 00
	00		 jne	 $LN10@pantitle_c

; 4697 :     {
; 4698 :         free( sysblk.pantitle );

  00177	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0017e	48 8b 88 68 11
	00 00		 mov	 rcx, QWORD PTR [rax+4456]
  00185	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 4699 : 
; 4700 :         sysblk.pantitle = (strlen( argv[1] ) == 0) ? NULL : strdup( argv[1] );

  0018b	b8 08 00 00 00	 mov	 eax, 8
  00190	48 6b c0 01	 imul	 rax, rax, 1
  00194	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0019c	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  001a0	e8 00 00 00 00	 call	 strlen
  001a5	48 85 c0	 test	 rax, rax
  001a8	75 0b		 jne	 SHORT $LN14@pantitle_c
  001aa	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR tv147[rsp], 0
  001b3	eb 20		 jmp	 SHORT $LN15@pantitle_c
$LN14@pantitle_c:
  001b5	b8 08 00 00 00	 mov	 eax, 8
  001ba	48 6b c0 01	 imul	 rax, rax, 1
  001be	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001c6	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  001ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  001d0	48 89 44 24 50	 mov	 QWORD PTR tv147[rsp], rax
$LN15@pantitle_c:
  001d5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001dc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv147[rsp]
  001e1	48 89 88 68 11
	00 00		 mov	 QWORD PTR [rax+4456], rcx

; 4701 : 
; 4702 :         if (MLVL( VERBOSE ))

  001e8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001ef	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  001f5	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001fa	85 c0		 test	 eax, eax
  001fc	0f 84 a7 00 00
	00		 je	 $LN12@pantitle_c

; 4703 :             // "%-14s set to %s"
; 4704 :             WRMSG( HHC02204, "I", argv[0],

  00202	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00209	48 83 b8 68 11
	00 00 00	 cmp	 QWORD PTR [rax+4456], 0
  00211	74 15		 je	 SHORT $LN16@pantitle_c
  00213	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0021a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00221	48 89 44 24 58	 mov	 QWORD PTR tv154[rsp], rax
  00226	eb 0c		 jmp	 SHORT $LN17@pantitle_c
$LN16@pantitle_c:
  00228	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208085
  0022f	48 89 44 24 58	 mov	 QWORD PTR tv154[rsp], rax
$LN17@pantitle_c:
  00234	b8 08 00 00 00	 mov	 eax, 8
  00239	48 6b c0 00	 imul	 rax, rax, 0
  0023d	48 89 44 24 78	 mov	 QWORD PTR tv156[rsp], rax
  00242	b9 01 00 00 00	 mov	 ecx, 1
  00247	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0024d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv154[rsp]
  00252	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00257	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0025f	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv156[rsp]
  00264	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00268	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0026d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208086
  00274	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00279	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208087
  00280	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00285	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0028a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00290	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208088
  00297	ba 61 12 00 00	 mov	 edx, 4705		; 00001261H
  0029c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208089
  002a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN12@pantitle_c:

; 4705 :                 sysblk.pantitle ? sysblk.pantitle : "(none)" );
; 4706 : 
; 4707 :         set_console_title( NULL );

  002a9	33 c9		 xor	 ecx, ecx
  002ab	e8 00 00 00 00	 call	 set_console_title

; 4708 :     }

  002b0	e9 ad 00 00 00	 jmp	 $LN11@pantitle_c
$LN10@pantitle_c:

; 4709 :     else
; 4710 :         // "%-14s: %s"
; 4711 :         WRMSG( HHC02203, "I", argv[0],

  002b5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002bc	48 83 b8 68 11
	00 00 00	 cmp	 QWORD PTR [rax+4456], 0
  002c4	74 15		 je	 SHORT $LN18@pantitle_c
  002c6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002cd	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  002d4	48 89 44 24 60	 mov	 QWORD PTR tv172[rsp], rax
  002d9	eb 0c		 jmp	 SHORT $LN19@pantitle_c
$LN18@pantitle_c:
  002db	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG208090
  002e2	48 89 44 24 60	 mov	 QWORD PTR tv172[rsp], rax
$LN19@pantitle_c:
  002e7	b8 08 00 00 00	 mov	 eax, 8
  002ec	48 6b c0 00	 imul	 rax, rax, 0
  002f0	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv174[rsp], rax
  002f8	b9 01 00 00 00	 mov	 ecx, 1
  002fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00303	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv172[rsp]
  00308	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0030d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00315	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv174[rsp]
  0031d	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00321	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00326	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208091
  0032d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00332	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208092
  00339	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0033e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00343	41 b9 03 00 00
	00		 mov	 r9d, 3
  00349	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208093
  00350	ba 68 12 00 00	 mov	 edx, 4712		; 00001268H
  00355	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208094
  0035c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN11@pantitle_c:

; 4712 :             sysblk.pantitle ? sysblk.pantitle : "(none)" );
; 4713 : 
; 4714 :     return 0;

  00362	33 c0		 xor	 eax, eax
$LN1@pantitle_c:

; 4715 : }

  00364	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0036b	c3		 ret	 0
pantitle_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
trate$1 = 80
rc$2 = 84
tv77 = 88
tv90 = 96
tv193 = 104
tv196 = 112
tv214 = 120
buf$3 = 128
msgbuf$ = 152
buf2$4 = 176
__$ArrayPad$ = 240
argc$ = 272
argv$ = 280
cmdline$ = 288
panrate_cmd PROC

; 4611 : {

$LN22:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@panrate_cm:

; 4612 :     char msgbuf[16];
; 4613 : 
; 4614 :     UNREFERENCED( cmdline );

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@panrate_cm
$LN7@panrate_cm:

; 4615 :     UPPER_ARGV_0(  argv   );

  0002d	48 83 bc 24 18
	01 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00036	74 47		 je	 SHORT $LN8@panrate_cm
  00038	b8 08 00 00 00	 mov	 eax, 8
  0003d	48 6b c0 00	 imul	 rax, rax, 0
  00041	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00049	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0004e	74 2f		 je	 SHORT $LN8@panrate_cm
  00050	b8 08 00 00 00	 mov	 eax, 8
  00055	48 6b c0 00	 imul	 rax, rax, 0
  00059	b9 08 00 00 00	 mov	 ecx, 8
  0005e	48 6b c9 00	 imul	 rcx, rcx, 0
  00062	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006a	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0006e	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00076	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0007a	e8 00 00 00 00	 call	 strupper
$LN8@panrate_cm:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 a8		 jne	 SHORT $LN7@panrate_cm

; 4616 : 
; 4617 :     // "Command '%s' is deprecated%s"
; 4618 :     WRMSG( HHC02256, "W", argv[0], "; use PANOPT RATE=xxx instead" );

  00085	b8 08 00 00 00	 mov	 eax, 8
  0008a	48 6b c0 00	 imul	 rax, rax, 0
  0008e	48 89 44 24 58	 mov	 QWORD PTR tv77[rsp], rax
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208013
  000a5	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000aa	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000b2	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv77[rsp]
  000b7	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000bb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208014
  000c7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208015
  000d3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000d8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000dd	41 b9 03 00 00
	00		 mov	 r9d, 3
  000e3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208016
  000ea	ba 0a 12 00 00	 mov	 edx, 4618		; 0000120aH
  000ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208017
  000f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4619 : 
; 4620 :     if (argc > 2)

  000fc	83 bc 24 10 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00104	7e 75		 jle	 SHORT $LN9@panrate_cm

; 4621 :     {
; 4622 :         // "Invalid command usage. Type 'help %s' for assistance."
; 4623 :         WRMSG( HHC02299, "E", argv[0] );

  00106	b8 08 00 00 00	 mov	 eax, 8
  0010b	48 6b c0 00	 imul	 rax, rax, 0
  0010f	48 89 44 24 60	 mov	 QWORD PTR tv90[rsp], rax
  00114	b9 01 00 00 00	 mov	 ecx, 1
  00119	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0011f	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00127	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv90[rsp]
  0012c	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00130	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00135	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208019
  0013c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00141	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208020
  00148	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0014d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00152	41 b9 03 00 00
	00		 mov	 r9d, 3
  00158	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208021
  0015f	ba 0f 12 00 00	 mov	 edx, 4623		; 0000120fH
  00164	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208022
  0016b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4624 :         return -1;

  00171	b8 ff ff ff ff	 mov	 eax, -1
  00176	e9 3c 03 00 00	 jmp	 $LN1@panrate_cm
$LN9@panrate_cm:

; 4625 :     }
; 4626 : 
; 4627 :     if (argc == 2)

  0017b	83 bc 24 10 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00183	0f 85 8c 02 00
	00		 jne	 $LN10@panrate_cm

; 4628 :     {
; 4629 :         if      (CMD( argv[1], FAST, 4 )) sysblk.panrate = PANEL_REFRESH_RATE_FAST;

  00189	b8 08 00 00 00	 mov	 eax, 8
  0018e	48 6b c0 01	 imul	 rax, rax, 1
  00192	41 b8 04 00 00
	00		 mov	 r8d, 4
  00198	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001a0	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  001a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208027
  001ab	e8 00 00 00 00	 call	 strcaseabbrev
  001b0	85 c0		 test	 eax, eax
  001b2	74 16		 je	 SHORT $LN12@panrate_cm
  001b4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001bb	c7 80 30 11 00
	00 32 00 00 00	 mov	 DWORD PTR [rax+4400], 50 ; 00000032H
  001c5	e9 9d 01 00 00	 jmp	 $LN13@panrate_cm
$LN12@panrate_cm:

; 4630 :         else if (CMD( argv[1], SLOW, 4 )) sysblk.panrate = PANEL_REFRESH_RATE_SLOW;

  001ca	b8 08 00 00 00	 mov	 eax, 8
  001cf	48 6b c0 01	 imul	 rax, rax, 1
  001d3	41 b8 04 00 00
	00		 mov	 r8d, 4
  001d9	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001e1	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  001e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208030
  001ec	e8 00 00 00 00	 call	 strcaseabbrev
  001f1	85 c0		 test	 eax, eax
  001f3	74 16		 je	 SHORT $LN14@panrate_cm
  001f5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001fc	c7 80 30 11 00
	00 f4 01 00 00	 mov	 DWORD PTR [rax+4400], 500 ; 000001f4H
  00206	e9 5c 01 00 00	 jmp	 $LN15@panrate_cm
$LN14@panrate_cm:

; 4631 :         else
; 4632 :         {
; 4633 :             int trate = 0;

  0020b	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR trate$1[rsp], 0

; 4634 :             int rc;
; 4635 : 
; 4636 :             rc = sscanf( argv[1], "%d", &trate );

  00213	b8 08 00 00 00	 mov	 eax, 8
  00218	48 6b c0 01	 imul	 rax, rax, 1
  0021c	4c 8d 44 24 50	 lea	 r8, QWORD PTR trate$1[rsp]
  00221	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG208031
  00228	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00230	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00234	e8 00 00 00 00	 call	 sscanf
  00239	89 44 24 54	 mov	 DWORD PTR rc$2[rsp], eax

; 4637 : 
; 4638 :             if (rc > 0 && trate >= (1000 / CLK_TCK) && trate <= 5000)

  0023d	83 7c 24 54 00	 cmp	 DWORD PTR rc$2[rsp], 0
  00242	7e 27		 jle	 SHORT $LN16@panrate_cm
  00244	83 7c 24 50 01	 cmp	 DWORD PTR trate$1[rsp], 1
  00249	7c 20		 jl	 SHORT $LN16@panrate_cm
  0024b	81 7c 24 50 88
	13 00 00	 cmp	 DWORD PTR trate$1[rsp], 5000 ; 00001388H
  00253	7f 16		 jg	 SHORT $LN16@panrate_cm

; 4639 :                 sysblk.panrate = trate;

  00255	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0025c	8b 4c 24 50	 mov	 ecx, DWORD PTR trate$1[rsp]
  00260	89 88 30 11 00
	00		 mov	 DWORD PTR [rax+4400], ecx
  00266	e9 fc 00 00 00	 jmp	 $LN17@panrate_cm
$LN16@panrate_cm:

; 4640 :             else // error
; 4641 :             {
; 4642 :                 char buf[20];
; 4643 :                 char buf2[64];
; 4644 : 
; 4645 :                 if (rc == 0)

  0026b	83 7c 24 54 00	 cmp	 DWORD PTR rc$2[rsp], 0
  00270	75 4b		 jne	 SHORT $LN18@panrate_cm

; 4646 :                 {
; 4647 :                     MSGBUF( buf, "%s", argv[1] );

  00272	b8 08 00 00 00	 mov	 eax, 8
  00277	48 6b c0 01	 imul	 rax, rax, 1
  0027b	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00283	4c 8b 0c 01	 mov	 r9, QWORD PTR [rcx+rax]
  00287	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208036
  0028e	ba 14 00 00 00	 mov	 edx, 20
  00293	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$3[rsp]
  0029b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4648 :                     MSGBUF( buf2, "; not numeric value" );

  002a1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208037
  002a8	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  002ad	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR buf2$4[rsp]
  002b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4649 :                 }

  002bb	eb 3f		 jmp	 SHORT $LN19@panrate_cm
$LN18@panrate_cm:

; 4650 :                 else
; 4651 :                 {
; 4652 :                     MSGBUF( buf, "%d", trate );

  002bd	44 8b 4c 24 50	 mov	 r9d, DWORD PTR trate$1[rsp]
  002c2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208038
  002c9	ba 14 00 00 00	 mov	 edx, 20
  002ce	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$3[rsp]
  002d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4653 :                     MSGBUF( buf2, "; not within range %d to 5000 inclusive",

  002dc	41 b9 01 00 00
	00		 mov	 r9d, 1
  002e2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208039
  002e9	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  002ee	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR buf2$4[rsp]
  002f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN19@panrate_cm:

; 4654 :                         (1000 / (int) CLK_TCK ));
; 4655 :                 }
; 4656 : 
; 4657 :                 // "Invalid argument %s%s"
; 4658 :                 WRMSG( HHC02205, "E", buf, buf2 );

  002fc	b9 01 00 00 00	 mov	 ecx, 1
  00301	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00307	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR buf2$4[rsp]
  0030f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00314	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$3[rsp]
  0031c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00321	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208040
  00328	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0032d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208041
  00334	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00339	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0033e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00344	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208042
  0034b	ba 32 12 00 00	 mov	 edx, 4658		; 00001232H
  00350	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208043
  00357	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4659 :                 return -1;

  0035d	b8 ff ff ff ff	 mov	 eax, -1
  00362	e9 50 01 00 00	 jmp	 $LN1@panrate_cm
$LN17@panrate_cm:
$LN15@panrate_cm:
$LN13@panrate_cm:

; 4660 :             }
; 4661 :         }
; 4662 : 
; 4663 :         if (MLVL( VERBOSE ))

  00367	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0036e	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  00374	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00379	85 c0		 test	 eax, eax
  0037b	0f 84 8f 00 00
	00		 je	 $LN20@panrate_cm

; 4664 :             // "%-14s set to %s"
; 4665 :             WRMSG( HHC02204, "I", argv[0], argv[1] );

  00381	b8 08 00 00 00	 mov	 eax, 8
  00386	48 6b c0 01	 imul	 rax, rax, 1
  0038a	48 89 44 24 68	 mov	 QWORD PTR tv193[rsp], rax
  0038f	b9 08 00 00 00	 mov	 ecx, 8
  00394	48 6b c9 00	 imul	 rcx, rcx, 0
  00398	48 89 4c 24 70	 mov	 QWORD PTR tv196[rsp], rcx
  0039d	b9 01 00 00 00	 mov	 ecx, 1
  003a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003a8	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003b0	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv193[rsp]
  003b5	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  003b9	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003be	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003c6	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv196[rsp]
  003cb	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  003cf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208045
  003db	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208046
  003e7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003ec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003f1	41 b9 03 00 00
	00		 mov	 r9d, 3
  003f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208047
  003fe	ba 39 12 00 00	 mov	 edx, 4665		; 00001239H
  00403	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208048
  0040a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN20@panrate_cm:

; 4666 :     }

  00410	e9 a0 00 00 00	 jmp	 $LN11@panrate_cm
$LN10@panrate_cm:

; 4667 :     else
; 4668 :     {
; 4669 :         MSGBUF( msgbuf, "%d", sysblk.panrate );

  00415	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0041c	44 8b 88 30 11
	00 00		 mov	 r9d, DWORD PTR [rax+4400]
  00423	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208049
  0042a	ba 10 00 00 00	 mov	 edx, 16
  0042f	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00437	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4670 :         // "%-14s: %s"
; 4671 :         WRMSG( HHC02203, "I", argv[0], msgbuf );

  0043d	b8 08 00 00 00	 mov	 eax, 8
  00442	48 6b c0 00	 imul	 rax, rax, 0
  00446	48 89 44 24 78	 mov	 QWORD PTR tv214[rsp], rax
  0044b	b9 01 00 00 00	 mov	 ecx, 1
  00450	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00456	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0045e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00463	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0046b	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv214[rsp]
  00470	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00474	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00479	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208050
  00480	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00485	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208051
  0048c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00491	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00496	41 b9 03 00 00
	00		 mov	 r9d, 3
  0049c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG208052
  004a3	ba 3f 12 00 00	 mov	 edx, 4671		; 0000123fH
  004a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG208053
  004af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN11@panrate_cm:

; 4672 :     }
; 4673 : 
; 4674 :     return 0;

  004b5	33 c0		 xor	 eax, eax
$LN1@panrate_cm:

; 4675 : }

  004b7	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  004bf	48 33 cc	 xor	 rcx, rsp
  004c2	e8 00 00 00 00	 call	 __security_check_cookie
  004c7	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  004ce	c3		 ret	 0
panrate_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
i$ = 80
devnameonly$ = 84
rate$1 = 88
panrate$ = 92
pan_colors$ = 96
tv70 = 100
tv72 = 104
rc$2 = 108
pantitle$ = 112
tv93 = 120
tv95 = 128
tv142 = 136
tv143 = 144
tv133 = 152
quote$3 = 160
tv144 = 168
tv152 = 176
tv368 = 184
tv379 = 192
tv381 = 200
tv396 = 208
tv397 = 216
tv387 = 224
quote$4 = 232
tv398 = 240
tv406 = 248
tv157 = 256
tv170 = 264
tv337 = 272
tv411 = 280
buf$5 = 288
buf2$6 = 320
buf$ = 384
__$ArrayPad$ = 640
argc$ = 672
argv$ = 680
cmdline$ = 688
panopt_cmd PROC

; 4472 : {

$LN73:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 98 02
	00 00		 sub	 rsp, 664		; 00000298H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 80
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 4473 :     char*  pantitle     = NULL;

  00027	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR pantitle$[rsp], 0

; 4474 :     int    panrate      = sysblk.panrate;

  00030	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00037	8b 80 30 11 00
	00		 mov	 eax, DWORD PTR [rax+4400]
  0003d	89 44 24 5c	 mov	 DWORD PTR panrate$[rsp], eax

; 4475 :     int    pan_colors   = sysblk.pan_colors;

  00041	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00048	8b 80 34 11 00
	00		 mov	 eax, DWORD PTR [rax+4404]
  0004e	89 44 24 60	 mov	 DWORD PTR pan_colors$[rsp], eax

; 4476 :     bool   devnameonly  = sysblk.devnameonly ? true : false;

  00052	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00059	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  0005f	c1 e8 1a	 shr	 eax, 26
  00062	83 e0 01	 and	 eax, 1
  00065	85 c0		 test	 eax, eax
  00067	74 0a		 je	 SHORT $LN39@panopt_cmd
  00069	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR tv70[rsp], 1
  00071	eb 08		 jmp	 SHORT $LN40@panopt_cmd
$LN39@panopt_cmd:
  00073	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
$LN40@panopt_cmd:
  0007b	83 7c 24 64 00	 cmp	 DWORD PTR tv70[rsp], 0
  00080	75 0a		 jne	 SHORT $LN41@panopt_cmd
  00082	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
  0008a	eb 08		 jmp	 SHORT $LN42@panopt_cmd
$LN41@panopt_cmd:
  0008c	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
$LN42@panopt_cmd:
  00094	0f b6 44 24 68	 movzx	 eax, BYTE PTR tv72[rsp]
  00099	88 44 24 54	 mov	 BYTE PTR devnameonly$[rsp], al
$LN4@panopt_cmd:

; 4477 :     char   buf[256];
; 4478 :     int    i;
; 4479 : 
; 4480 :     UNREFERENCED( cmdline );

  0009d	33 c0		 xor	 eax, eax
  0009f	85 c0		 test	 eax, eax
  000a1	75 fa		 jne	 SHORT $LN4@panopt_cmd
$LN7@panopt_cmd:

; 4481 :     UPPER_ARGV_0(  argv   );

  000a3	48 83 bc 24 a8
	02 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  000ac	74 47		 je	 SHORT $LN11@panopt_cmd
  000ae	b8 08 00 00 00	 mov	 eax, 8
  000b3	48 6b c0 00	 imul	 rax, rax, 0
  000b7	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000bf	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  000c4	74 2f		 je	 SHORT $LN11@panopt_cmd
  000c6	b8 08 00 00 00	 mov	 eax, 8
  000cb	48 6b c0 00	 imul	 rax, rax, 0
  000cf	b9 08 00 00 00	 mov	 ecx, 8
  000d4	48 6b c9 00	 imul	 rcx, rcx, 0
  000d8	48 8b 94 24 a8
	02 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  000e0	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  000e4	48 8b 84 24 a8
	02 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000ec	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  000f0	e8 00 00 00 00	 call	 strupper
$LN11@panopt_cmd:
  000f5	33 c0		 xor	 eax, eax
  000f7	85 c0		 test	 eax, eax
  000f9	75 a8		 jne	 SHORT $LN7@panopt_cmd

; 4482 : 
; 4483 :     // panopt [FULLPATH|NAMEONLY] [RATE=nnn] [MSGCOLOR=NO|DARK|LIGHT] [TITLE=xxx]
; 4484 : 
; 4485 :     if (argc <= 1)

  000fb	83 bc 24 a0 02
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00103	0f 8f 66 02 00
	00		 jg	 $LN12@panopt_cmd

; 4486 :     {
; 4487 :         /* Display current settings */
; 4488 : 
; 4489 :         char* quote = sysblk.pantitle ?

  00109	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00110	48 83 b8 68 11
	00 00 00	 cmp	 QWORD PTR [rax+4456], 0
  00118	74 49		 je	 SHORT $LN45@panopt_cmd
  0011a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG207906
  00121	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00128	48 8b 88 68 11
	00 00		 mov	 rcx, QWORD PTR [rax+4456]
  0012f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strpbrk
  00135	48 85 c0	 test	 rax, rax
  00138	74 0e		 je	 SHORT $LN43@panopt_cmd
  0013a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207907
  00141	48 89 44 24 78	 mov	 QWORD PTR tv93[rsp], rax
  00146	eb 0c		 jmp	 SHORT $LN44@panopt_cmd
$LN43@panopt_cmd:
  00148	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207908
  0014f	48 89 44 24 78	 mov	 QWORD PTR tv93[rsp], rax
$LN44@panopt_cmd:
  00154	48 8b 44 24 78	 mov	 rax, QWORD PTR tv93[rsp]
  00159	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv95[rsp], rax
  00161	eb 0f		 jmp	 SHORT $LN46@panopt_cmd
$LN45@panopt_cmd:
  00163	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207909
  0016a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv95[rsp], rax
$LN46@panopt_cmd:
  00172	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv95[rsp]
  0017a	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR quote$3[rsp], rax

; 4490 :             strpbrk( sysblk.pantitle, WHITESPACE ) ? "\"" : "" : "";
; 4491 : 
; 4492 :         MSGBUF( buf, "%s RATE=%d MSGCOLOR=%s %sTITLE=%s%s"

  00182	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00189	48 83 b8 68 11
	00 00 00	 cmp	 QWORD PTR [rax+4456], 0
  00191	74 18		 je	 SHORT $LN47@panopt_cmd
  00193	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0019a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  001a1	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv133[rsp], rax
  001a9	eb 0f		 jmp	 SHORT $LN48@panopt_cmd
$LN47@panopt_cmd:
  001ab	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207910
  001b2	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv133[rsp], rax
$LN48@panopt_cmd:
  001ba	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001c1	83 b8 34 11 00
	00 00		 cmp	 DWORD PTR [rax+4404], 0
  001c8	75 11		 jne	 SHORT $LN53@panopt_cmd
  001ca	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207911
  001d1	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv144[rsp], rax
  001d9	eb 71		 jmp	 SHORT $LN54@panopt_cmd
$LN53@panopt_cmd:
  001db	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001e2	83 b8 34 11 00
	00 01		 cmp	 DWORD PTR [rax+4404], 1
  001e9	75 11		 jne	 SHORT $LN51@panopt_cmd
  001eb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207912
  001f2	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv143[rsp], rax
  001fa	eb 40		 jmp	 SHORT $LN52@panopt_cmd
$LN51@panopt_cmd:
  001fc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00203	83 b8 34 11 00
	00 02		 cmp	 DWORD PTR [rax+4404], 2
  0020a	75 11		 jne	 SHORT $LN49@panopt_cmd
  0020c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207913
  00213	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv142[rsp], rax
  0021b	eb 0f		 jmp	 SHORT $LN50@panopt_cmd
$LN49@panopt_cmd:
  0021d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207914
  00224	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv142[rsp], rax
$LN50@panopt_cmd:
  0022c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv142[rsp]
  00234	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv143[rsp], rax
$LN52@panopt_cmd:
  0023c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv143[rsp]
  00244	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv144[rsp], rax
$LN54@panopt_cmd:
  0024c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00253	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00259	c1 e8 1a	 shr	 eax, 26
  0025c	83 e0 01	 and	 eax, 1
  0025f	85 c0		 test	 eax, eax
  00261	74 11		 je	 SHORT $LN55@panopt_cmd
  00263	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207915
  0026a	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv152[rsp], rax
  00272	eb 0f		 jmp	 SHORT $LN56@panopt_cmd
$LN55@panopt_cmd:
  00274	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207916
  0027b	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv152[rsp], rax
$LN56@panopt_cmd:
  00283	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR quote$3[rsp]
  0028b	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00290	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv133[rsp]
  00298	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0029d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR quote$3[rsp]
  002a5	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  002aa	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tv144[rsp]
  002b2	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  002b7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002be	8b 80 30 11 00
	00		 mov	 eax, DWORD PTR [rax+4400]
  002c4	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  002c8	4c 8b 8c 24 b0
	00 00 00	 mov	 r9, QWORD PTR tv152[rsp]
  002d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207917
  002d7	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  002dc	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  002e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4493 :             , sysblk.devnameonly ? "NAMEONLY" : "FULLPATH"
; 4494 :             , sysblk.panrate
; 4495 :             , sysblk.pan_colors == PANC_NONE  ? "NO"    :
; 4496 :               sysblk.pan_colors == PANC_DARK  ? "DARK"  :
; 4497 :               sysblk.pan_colors == PANC_LIGHT ? "LIGHT" : "(err!)"
; 4498 :             , quote , sysblk.pantitle ? sysblk.pantitle : "(default)" , quote
; 4499 :         );
; 4500 : 
; 4501 :         // "%-14s: %s"
; 4502 :         WRMSG( HHC02203, "I", argv[0], buf );

  002ea	b8 08 00 00 00	 mov	 eax, 8
  002ef	48 6b c0 00	 imul	 rax, rax, 0
  002f3	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv157[rsp], rax
  002fb	b9 01 00 00 00	 mov	 ecx, 1
  00300	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00306	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0030e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00313	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0031b	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR tv157[rsp]
  00323	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00327	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0032c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207918
  00333	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00338	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207919
  0033f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00344	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00349	41 b9 03 00 00
	00		 mov	 r9d, 3
  0034f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207920
  00356	ba 96 11 00 00	 mov	 edx, 4502		; 00001196H
  0035b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207921
  00362	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4503 :         return 0;

  00368	33 c0		 xor	 eax, eax
  0036a	e9 b9 07 00 00	 jmp	 $LN1@panopt_cmd
$LN12@panopt_cmd:

; 4504 :     }
; 4505 : 
; 4506 :     /* Too many arguments? */
; 4507 :     if (argc > 5)

  0036f	83 bc 24 a0 02
	00 00 05	 cmp	 DWORD PTR argc$[rsp], 5
  00377	7e 7b		 jle	 SHORT $LN13@panopt_cmd

; 4508 :     {
; 4509 :         // "Invalid command usage. Type 'help %s' for assistance."
; 4510 :         WRMSG( HHC02299, "E", argv[0] );

  00379	b8 08 00 00 00	 mov	 eax, 8
  0037e	48 6b c0 00	 imul	 rax, rax, 0
  00382	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv170[rsp], rax
  0038a	b9 01 00 00 00	 mov	 ecx, 1
  0038f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00395	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0039d	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR tv170[rsp]
  003a5	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  003a9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207923
  003b5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207924
  003c1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003c6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003cb	41 b9 03 00 00
	00		 mov	 r9d, 3
  003d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207925
  003d8	ba 9e 11 00 00	 mov	 edx, 4510		; 0000119eH
  003dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207926
  003e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4511 :         return -1;

  003ea	b8 ff ff ff ff	 mov	 eax, -1
  003ef	e9 34 07 00 00	 jmp	 $LN1@panopt_cmd
$LN13@panopt_cmd:

; 4512 :     }
; 4513 : 
; 4514 :     /* Examine each argument in turn */
; 4515 :     for (i=1; i < argc; i++)

  003f4	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  003fc	eb 0a		 jmp	 SHORT $LN10@panopt_cmd
$LN8@panopt_cmd:
  003fe	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  00402	ff c0		 inc	 eax
  00404	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN10@panopt_cmd:
  00408	8b 84 24 a0 02
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  0040f	39 44 24 50	 cmp	 DWORD PTR i$[rsp], eax
  00413	0f 8d ce 03 00
	00		 jge	 $LN9@panopt_cmd

; 4516 :     {
; 4517 :         if      (CMD( argv[i], NAMEONLY,        4 )) devnameonly = true;

  00419	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  0041e	41 b8 04 00 00
	00		 mov	 r8d, 4
  00424	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0042c	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00430	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207929
  00437	e8 00 00 00 00	 call	 strcaseabbrev
  0043c	85 c0		 test	 eax, eax
  0043e	74 0a		 je	 SHORT $LN14@panopt_cmd
  00440	c6 44 24 54 01	 mov	 BYTE PTR devnameonly$[rsp], 1
  00445	e9 98 03 00 00	 jmp	 $LN15@panopt_cmd
$LN14@panopt_cmd:

; 4518 :         else if (CMD( argv[i], FULLPATH,        4 )) devnameonly = false;

  0044a	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  0044f	41 b8 04 00 00
	00		 mov	 r8d, 4
  00455	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0045d	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00461	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207932
  00468	e8 00 00 00 00	 call	 strcaseabbrev
  0046d	85 c0		 test	 eax, eax
  0046f	74 0a		 je	 SHORT $LN16@panopt_cmd
  00471	c6 44 24 54 00	 mov	 BYTE PTR devnameonly$[rsp], 0
  00476	e9 67 03 00 00	 jmp	 $LN17@panopt_cmd
$LN16@panopt_cmd:

; 4519 :         else if (CMD( argv[i], MSGCOLOR=NO,    11 )) pan_colors  = PANC_NONE;

  0047b	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  00480	41 b8 0b 00 00
	00		 mov	 r8d, 11
  00486	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0048e	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00492	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207935
  00499	e8 00 00 00 00	 call	 strcaseabbrev
  0049e	85 c0		 test	 eax, eax
  004a0	74 0d		 je	 SHORT $LN18@panopt_cmd
  004a2	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR pan_colors$[rsp], 0
  004aa	e9 33 03 00 00	 jmp	 $LN19@panopt_cmd
$LN18@panopt_cmd:

; 4520 :         else if (CMD( argv[i], MSGCOLOR=DARK,  13 )) pan_colors  = PANC_DARK;

  004af	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  004b4	41 b8 0d 00 00
	00		 mov	 r8d, 13
  004ba	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004c2	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  004c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207938
  004cd	e8 00 00 00 00	 call	 strcaseabbrev
  004d2	85 c0		 test	 eax, eax
  004d4	74 0d		 je	 SHORT $LN20@panopt_cmd
  004d6	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR pan_colors$[rsp], 1
  004de	e9 ff 02 00 00	 jmp	 $LN21@panopt_cmd
$LN20@panopt_cmd:

; 4521 :         else if (CMD( argv[i], MSGCOLOR=LIGHT, 14 )) pan_colors  = PANC_LIGHT;

  004e3	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  004e8	41 b8 0e 00 00
	00		 mov	 r8d, 14
  004ee	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004f6	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  004fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207941
  00501	e8 00 00 00 00	 call	 strcaseabbrev
  00506	85 c0		 test	 eax, eax
  00508	74 0d		 je	 SHORT $LN22@panopt_cmd
  0050a	c7 44 24 60 02
	00 00 00	 mov	 DWORD PTR pan_colors$[rsp], 2
  00512	e9 cb 02 00 00	 jmp	 $LN23@panopt_cmd
$LN22@panopt_cmd:

; 4522 :         else if (CMD( argv[i], RATE=FAST,       9 )) panrate = PANEL_REFRESH_RATE_FAST;

  00517	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  0051c	41 b8 09 00 00
	00		 mov	 r8d, 9
  00522	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0052a	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0052e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207944
  00535	e8 00 00 00 00	 call	 strcaseabbrev
  0053a	85 c0		 test	 eax, eax
  0053c	74 0d		 je	 SHORT $LN24@panopt_cmd
  0053e	c7 44 24 5c 32
	00 00 00	 mov	 DWORD PTR panrate$[rsp], 50 ; 00000032H
  00546	e9 97 02 00 00	 jmp	 $LN25@panopt_cmd
$LN24@panopt_cmd:

; 4523 :         else if (CMD( argv[i], RATE=SLOW,       9 )) panrate = PANEL_REFRESH_RATE_SLOW;

  0054b	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  00550	41 b8 09 00 00
	00		 mov	 r8d, 9
  00556	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0055e	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00562	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207947
  00569	e8 00 00 00 00	 call	 strcaseabbrev
  0056e	85 c0		 test	 eax, eax
  00570	74 0d		 je	 SHORT $LN26@panopt_cmd
  00572	c7 44 24 5c f4
	01 00 00	 mov	 DWORD PTR panrate$[rsp], 500 ; 000001f4H
  0057a	e9 63 02 00 00	 jmp	 $LN27@panopt_cmd
$LN26@panopt_cmd:

; 4524 :         else if (strncasecmp( argv[i], "RATE=", 5 ) == 0)

  0057f	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  00584	41 b8 05 00 00
	00		 mov	 r8d, 5
  0058a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG207950
  00591	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00599	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0059d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  005a3	85 c0		 test	 eax, eax
  005a5	0f 85 6d 01 00
	00		 jne	 $LN28@panopt_cmd

; 4525 :         {
; 4526 :             int rate = 0;

  005ab	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR rate$1[rsp], 0

; 4527 :             int rc = sscanf( argv[i]+5, "%d", &rate );

  005b3	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  005b8	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  005c0	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  005c4	48 83 c0 05	 add	 rax, 5
  005c8	4c 8d 44 24 58	 lea	 r8, QWORD PTR rate$1[rsp]
  005cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG207951
  005d4	48 8b c8	 mov	 rcx, rax
  005d7	e8 00 00 00 00	 call	 sscanf
  005dc	89 44 24 6c	 mov	 DWORD PTR rc$2[rsp], eax

; 4528 : 
; 4529 :             if (1
; 4530 :                 && rc > 0
; 4531 :                 && rate >= PANEL_REFRESH_RATE_MIN
; 4532 :                 && rate <= PANEL_REFRESH_RATE_MAX

  005e0	33 c0		 xor	 eax, eax
  005e2	83 f8 01	 cmp	 eax, 1
  005e5	74 25		 je	 SHORT $LN30@panopt_cmd
  005e7	83 7c 24 6c 00	 cmp	 DWORD PTR rc$2[rsp], 0
  005ec	7e 1e		 jle	 SHORT $LN30@panopt_cmd
  005ee	83 7c 24 58 01	 cmp	 DWORD PTR rate$1[rsp], 1
  005f3	7c 17		 jl	 SHORT $LN30@panopt_cmd
  005f5	81 7c 24 58 88
	13 00 00	 cmp	 DWORD PTR rate$1[rsp], 5000 ; 00001388H
  005fd	7f 0d		 jg	 SHORT $LN30@panopt_cmd

; 4533 :             )
; 4534 :             {
; 4535 :                 panrate = rate;

  005ff	8b 44 24 58	 mov	 eax, DWORD PTR rate$1[rsp]
  00603	89 44 24 5c	 mov	 DWORD PTR panrate$[rsp], eax

; 4536 :             }

  00607	e9 07 01 00 00	 jmp	 $LN31@panopt_cmd
$LN30@panopt_cmd:

; 4537 :             else
; 4538 :             {
; 4539 :                 char buf[20];
; 4540 :                 char buf2[64];
; 4541 : 
; 4542 :                 if (rc == 0)

  0060c	83 7c 24 6c 00	 cmp	 DWORD PTR rc$2[rsp], 0
  00611	75 4e		 jne	 SHORT $LN32@panopt_cmd

; 4543 :                 {
; 4544 :                     MSGBUF( buf, "%s", argv[i]+5 );

  00613	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  00618	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00620	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00624	48 83 c0 05	 add	 rax, 5
  00628	4c 8b c8	 mov	 r9, rax
  0062b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207956
  00632	ba 14 00 00 00	 mov	 edx, 20
  00637	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$5[rsp]
  0063f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4545 :                     MSGBUF( buf2, "; not numeric value" );

  00645	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207957
  0064c	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00651	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR buf2$6[rsp]
  00659	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4546 :                 }

  0065f	eb 47		 jmp	 SHORT $LN33@panopt_cmd
$LN32@panopt_cmd:

; 4547 :                 else
; 4548 :                 {
; 4549 :                     MSGBUF( buf, "%d", rate );

  00661	44 8b 4c 24 58	 mov	 r9d, DWORD PTR rate$1[rsp]
  00666	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207958
  0066d	ba 14 00 00 00	 mov	 edx, 20
  00672	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$5[rsp]
  0067a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4550 :                     MSGBUF( buf2, "; not within range %d to %d inclusive",

  00680	c7 44 24 20 88
	13 00 00	 mov	 DWORD PTR [rsp+32], 5000 ; 00001388H
  00688	41 b9 01 00 00
	00		 mov	 r9d, 1
  0068e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207959
  00695	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0069a	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR buf2$6[rsp]
  006a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN33@panopt_cmd:

; 4551 :                         (int)PANEL_REFRESH_RATE_MIN,
; 4552 :                         PANEL_REFRESH_RATE_MAX );
; 4553 :                 }
; 4554 : 
; 4555 :                 // "Invalid argument %s%s"
; 4556 :                 WRMSG( HHC02205, "E", buf, buf2 );

  006a8	b9 01 00 00 00	 mov	 ecx, 1
  006ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006b3	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR buf2$6[rsp]
  006bb	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  006c0	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$5[rsp]
  006c8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207960
  006d4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207961
  006e0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006e5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006ea	41 b9 03 00 00
	00		 mov	 r9d, 3
  006f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207962
  006f7	ba cc 11 00 00	 mov	 edx, 4556		; 000011ccH
  006fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207963
  00703	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4557 :                 return -1;

  00709	b8 ff ff ff ff	 mov	 eax, -1
  0070e	e9 15 04 00 00	 jmp	 $LN1@panopt_cmd
$LN31@panopt_cmd:

; 4558 :             }
; 4559 :         }

  00713	e9 ca 00 00 00	 jmp	 $LN29@panopt_cmd
$LN28@panopt_cmd:

; 4560 :         else if (strncasecmp( argv[i], "TITLE=", 6 ) == 0)

  00718	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  0071d	41 b8 06 00 00
	00		 mov	 r8d, 6
  00723	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG207966
  0072a	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00732	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00736	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  0073c	85 c0		 test	 eax, eax
  0073e	75 1f		 jne	 SHORT $LN34@panopt_cmd

; 4561 :         {
; 4562 :             pantitle = argv[i]+6;

  00740	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  00745	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0074d	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00751	48 83 c0 06	 add	 rax, 6
  00755	48 89 44 24 70	 mov	 QWORD PTR pantitle$[rsp], rax

; 4563 :         }

  0075a	e9 83 00 00 00	 jmp	 $LN35@panopt_cmd
$LN34@panopt_cmd:

; 4564 :         else
; 4565 :         {
; 4566 :             // "Invalid argument %s%s"
; 4567 :             WRMSG( HHC02205, "E", argv[i], "" );

  0075f	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  00764	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv337[rsp], rax
  0076c	b9 01 00 00 00	 mov	 ecx, 1
  00771	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00777	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207967
  0077e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00783	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0078b	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR tv337[rsp]
  00793	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00797	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0079c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207968
  007a3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207969
  007af	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007b4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007b9	41 b9 03 00 00
	00		 mov	 r9d, 3
  007bf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207970
  007c6	ba d7 11 00 00	 mov	 edx, 4567		; 000011d7H
  007cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207971
  007d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4568 :             return -1;

  007d8	b8 ff ff ff ff	 mov	 eax, -1
  007dd	e9 46 03 00 00	 jmp	 $LN1@panopt_cmd
$LN35@panopt_cmd:
$LN29@panopt_cmd:
$LN27@panopt_cmd:
$LN25@panopt_cmd:
$LN23@panopt_cmd:
$LN21@panopt_cmd:
$LN19@panopt_cmd:
$LN17@panopt_cmd:
$LN15@panopt_cmd:

; 4569 :         }
; 4570 :     }

  007e2	e9 17 fc ff ff	 jmp	 $LN8@panopt_cmd
$LN9@panopt_cmd:

; 4571 : 
; 4572 :     /* Update setting(s) */
; 4573 : 
; 4574 :     sysblk.panrate     = panrate;

  007e7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  007ee	8b 4c 24 5c	 mov	 ecx, DWORD PTR panrate$[rsp]
  007f2	89 88 30 11 00
	00		 mov	 DWORD PTR [rax+4400], ecx

; 4575 :     sysblk.pan_colors  = pan_colors;

  007f8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  007ff	8b 4c 24 60	 mov	 ecx, DWORD PTR pan_colors$[rsp]
  00803	89 88 34 11 00
	00		 mov	 DWORD PTR [rax+4404], ecx

; 4576 :     sysblk.devnameonly = devnameonly;

  00809	0f b6 44 24 54	 movzx	 eax, BYTE PTR devnameonly$[rsp]
  0080e	83 e0 01	 and	 eax, 1
  00811	c1 e0 1a	 shl	 eax, 26
  00814	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0081b	8b 89 94 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4756]
  00821	0f ba f1 1a	 btr	 ecx, 26
  00825	0b c8		 or	 ecx, eax
  00827	8b c1		 mov	 eax, ecx
  00829	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00830	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax

; 4577 : 
; 4578 :     if (pantitle)

  00836	48 83 7c 24 70
	00		 cmp	 QWORD PTR pantitle$[rsp], 0
  0083c	74 61		 je	 SHORT $LN36@panopt_cmd

; 4579 :     {
; 4580 :         free( sysblk.pantitle );

  0083e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00845	48 8b 88 68 11
	00 00		 mov	 rcx, QWORD PTR [rax+4456]
  0084c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 4581 :         sysblk.pantitle = (strlen( pantitle ) > 0) ? strdup( pantitle ) : NULL;

  00852	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pantitle$[rsp]
  00857	e8 00 00 00 00	 call	 strlen
  0085c	48 85 c0	 test	 rax, rax
  0085f	76 15		 jbe	 SHORT $LN57@panopt_cmd
  00861	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pantitle$[rsp]
  00866	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0086c	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv368[rsp], rax
  00874	eb 0c		 jmp	 SHORT $LN58@panopt_cmd
$LN57@panopt_cmd:
  00876	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv368[rsp], 0
$LN58@panopt_cmd:
  00882	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00889	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv368[rsp]
  00891	48 89 88 68 11
	00 00		 mov	 QWORD PTR [rax+4456], rcx

; 4582 :         set_console_title( NULL );

  00898	33 c9		 xor	 ecx, ecx
  0089a	e8 00 00 00 00	 call	 set_console_title
$LN36@panopt_cmd:

; 4583 :     }
; 4584 :     set_panel_colors();

  0089f	e8 00 00 00 00	 call	 set_panel_colors

; 4585 : 
; 4586 :     if (MLVL( VERBOSE ))

  008a4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  008ab	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  008b1	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  008b6	85 c0		 test	 eax, eax
  008b8	0f 84 68 02 00
	00		 je	 $LN37@panopt_cmd

; 4587 :     {
; 4588 :         char* quote = sysblk.pantitle ?

  008be	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  008c5	48 83 b8 68 11
	00 00 00	 cmp	 QWORD PTR [rax+4456], 0
  008cd	74 52		 je	 SHORT $LN61@panopt_cmd
  008cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG207974
  008d6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  008dd	48 8b 88 68 11
	00 00		 mov	 rcx, QWORD PTR [rax+4456]
  008e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strpbrk
  008ea	48 85 c0	 test	 rax, rax
  008ed	74 11		 je	 SHORT $LN59@panopt_cmd
  008ef	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207975
  008f6	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv379[rsp], rax
  008fe	eb 0f		 jmp	 SHORT $LN60@panopt_cmd
$LN59@panopt_cmd:
  00900	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207976
  00907	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv379[rsp], rax
$LN60@panopt_cmd:
  0090f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR tv379[rsp]
  00917	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv381[rsp], rax
  0091f	eb 0f		 jmp	 SHORT $LN62@panopt_cmd
$LN61@panopt_cmd:
  00921	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207977
  00928	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv381[rsp], rax
$LN62@panopt_cmd:
  00930	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR tv381[rsp]
  00938	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR quote$4[rsp], rax

; 4589 :             strpbrk( sysblk.pantitle, WHITESPACE ) ? "\"" : "" : "";
; 4590 : 
; 4591 :         MSGBUF( buf, "%s RATE=%d MSGCOLOR=%s %sTITLE=%s%s"

  00940	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00947	48 83 b8 68 11
	00 00 00	 cmp	 QWORD PTR [rax+4456], 0
  0094f	74 18		 je	 SHORT $LN63@panopt_cmd
  00951	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00958	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0095f	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv387[rsp], rax
  00967	eb 0f		 jmp	 SHORT $LN64@panopt_cmd
$LN63@panopt_cmd:
  00969	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207978
  00970	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv387[rsp], rax
$LN64@panopt_cmd:
  00978	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0097f	83 b8 34 11 00
	00 00		 cmp	 DWORD PTR [rax+4404], 0
  00986	75 11		 jne	 SHORT $LN69@panopt_cmd
  00988	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207979
  0098f	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv398[rsp], rax
  00997	eb 71		 jmp	 SHORT $LN70@panopt_cmd
$LN69@panopt_cmd:
  00999	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  009a0	83 b8 34 11 00
	00 01		 cmp	 DWORD PTR [rax+4404], 1
  009a7	75 11		 jne	 SHORT $LN67@panopt_cmd
  009a9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207980
  009b0	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv397[rsp], rax
  009b8	eb 40		 jmp	 SHORT $LN68@panopt_cmd
$LN67@panopt_cmd:
  009ba	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  009c1	83 b8 34 11 00
	00 02		 cmp	 DWORD PTR [rax+4404], 2
  009c8	75 11		 jne	 SHORT $LN65@panopt_cmd
  009ca	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207981
  009d1	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv396[rsp], rax
  009d9	eb 0f		 jmp	 SHORT $LN66@panopt_cmd
$LN65@panopt_cmd:
  009db	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207982
  009e2	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv396[rsp], rax
$LN66@panopt_cmd:
  009ea	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR tv396[rsp]
  009f2	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv397[rsp], rax
$LN68@panopt_cmd:
  009fa	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tv397[rsp]
  00a02	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv398[rsp], rax
$LN70@panopt_cmd:
  00a0a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00a11	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00a17	c1 e8 1a	 shr	 eax, 26
  00a1a	83 e0 01	 and	 eax, 1
  00a1d	85 c0		 test	 eax, eax
  00a1f	74 11		 je	 SHORT $LN71@panopt_cmd
  00a21	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207983
  00a28	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv406[rsp], rax
  00a30	eb 0f		 jmp	 SHORT $LN72@panopt_cmd
$LN71@panopt_cmd:
  00a32	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207984
  00a39	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv406[rsp], rax
$LN72@panopt_cmd:
  00a41	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR quote$4[rsp]
  00a49	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00a4e	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tv387[rsp]
  00a56	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00a5b	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR quote$4[rsp]
  00a63	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00a68	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR tv398[rsp]
  00a70	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00a75	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00a7c	8b 80 30 11 00
	00		 mov	 eax, DWORD PTR [rax+4400]
  00a82	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00a86	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR tv406[rsp]
  00a8e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207985
  00a95	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00a9a	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00aa2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4592 :             , sysblk.devnameonly ? "NAMEONLY" : "FULLPATH"
; 4593 :             , sysblk.panrate
; 4594 :             , sysblk.pan_colors == PANC_NONE  ? "NO"    :
; 4595 :               sysblk.pan_colors == PANC_DARK  ? "DARK"  :
; 4596 :               sysblk.pan_colors == PANC_LIGHT ? "LIGHT" : "(err!)"
; 4597 :             , quote , sysblk.pantitle ? sysblk.pantitle : "(default)" , quote
; 4598 :         );
; 4599 : 
; 4600 :         // "%-14s set to %s"
; 4601 :         WRMSG( HHC02204, "I", argv[0], buf );

  00aa8	b8 08 00 00 00	 mov	 eax, 8
  00aad	48 6b c0 00	 imul	 rax, rax, 0
  00ab1	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv411[rsp], rax
  00ab9	b9 01 00 00 00	 mov	 ecx, 1
  00abe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00ac4	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00acc	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00ad1	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00ad9	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR tv411[rsp]
  00ae1	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00ae5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00aea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207986
  00af1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00af6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207987
  00afd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b02	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b07	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b0d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207988
  00b14	ba f9 11 00 00	 mov	 edx, 4601		; 000011f9H
  00b19	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207989
  00b20	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN37@panopt_cmd:

; 4602 :     }
; 4603 : 
; 4604 :     return 0;

  00b26	33 c0		 xor	 eax, eax
$LN1@panopt_cmd:

; 4605 : }

  00b28	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00b30	48 33 cc	 xor	 rcx, rsp
  00b33	e8 00 00 00 00	 call	 __security_check_cookie
  00b38	48 81 c4 98 02
	00 00		 add	 rsp, 664		; 00000298H
  00b3f	c3		 ret	 0
panopt_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
toddrag$1 = 80
tv77 = 88
tv138 = 96
tv141 = 104
tv153 = 112
tv156 = 120
tv178 = 128
buf$2 = 136
__$ArrayPad$ = 168
argc$ = 192
argv$ = 200
cmdline$ = 208
toddrag_cmd PROC

; 4429 : {

$LN16:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@toddrag_cm:

; 4430 :     UNREFERENCED(cmdline);

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@toddrag_cm
$LN7@toddrag_cm:

; 4431 : 
; 4432 :     UPPER_ARGV_0( argv );

  0002d	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00036	74 47		 je	 SHORT $LN8@toddrag_cm
  00038	b8 08 00 00 00	 mov	 eax, 8
  0003d	48 6b c0 00	 imul	 rax, rax, 0
  00041	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00049	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0004e	74 2f		 je	 SHORT $LN8@toddrag_cm
  00050	b8 08 00 00 00	 mov	 eax, 8
  00055	48 6b c0 00	 imul	 rax, rax, 0
  00059	b9 08 00 00 00	 mov	 ecx, 8
  0005e	48 6b c9 00	 imul	 rcx, rcx, 0
  00062	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006a	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0006e	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00076	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0007a	e8 00 00 00 00	 call	 strupper
$LN8@toddrag_cm:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 a8		 jne	 SHORT $LN7@toddrag_cm

; 4433 : 
; 4434 :     if ( argc > 2 )

  00085	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0008d	7e 75		 jle	 SHORT $LN9@toddrag_cm

; 4435 :     {
; 4436 :         WRMSG( HHC02299, "E", argv[0] );

  0008f	b8 08 00 00 00	 mov	 eax, 8
  00094	48 6b c0 00	 imul	 rax, rax, 0
  00098	48 89 44 24 58	 mov	 QWORD PTR tv77[rsp], rax
  0009d	b9 01 00 00 00	 mov	 ecx, 1
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a8	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000b0	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv77[rsp]
  000b5	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000b9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207845
  000c5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207846
  000d1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000d6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000db	41 b9 03 00 00
	00		 mov	 r9d, 3
  000e1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207847
  000e8	ba 54 11 00 00	 mov	 edx, 4436		; 00001154H
  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207848
  000f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4437 :         return -1;

  000fa	b8 ff ff ff ff	 mov	 eax, -1
  000ff	e9 a4 02 00 00	 jmp	 $LN1@toddrag_cm
$LN9@toddrag_cm:

; 4438 :     }
; 4439 : 
; 4440 :     if ( argc == 2 )

  00104	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0010c	0f 85 d1 01 00
	00		 jne	 $LN10@toddrag_cm

; 4441 :     {
; 4442 :         double toddrag = -1.0;

  00112	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@bff0000000000000
  0011a	f2 0f 11 44 24
	50		 movsd	 QWORD PTR toddrag$1[rsp], xmm0

; 4443 : 
; 4444 :         sscanf(argv[1], "%lf", &toddrag);

  00120	b8 08 00 00 00	 mov	 eax, 8
  00125	48 6b c0 01	 imul	 rax, rax, 1
  00129	4c 8d 44 24 50	 lea	 r8, QWORD PTR toddrag$1[rsp]
  0012e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG207851
  00135	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0013d	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00141	e8 00 00 00 00	 call	 sscanf

; 4445 : 
; 4446 :         if (toddrag >= 0.0001 && toddrag <= 10000.0)

  00146	f2 0f 10 44 24
	50		 movsd	 xmm0, QWORD PTR toddrag$1[rsp]
  0014c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@3f1a36e2eb1c432d
  00154	0f 82 eb 00 00
	00		 jb	 $LN12@toddrag_cm
  0015a	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@40c3880000000000
  00162	66 0f 2f 44 24
	50		 comisd	 xmm0, QWORD PTR toddrag$1[rsp]
  00168	0f 82 d7 00 00
	00		 jb	 $LN12@toddrag_cm

; 4447 :         {
; 4448 :             /* Set clock steering based on drag factor */
; 4449 :             set_tod_steering(-(1.0-(1.0/toddrag)));

  0016e	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00176	f2 0f 5e 44 24
	50		 divsd	 xmm0, QWORD PTR toddrag$1[rsp]
  0017c	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00184	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00188	0f 28 c1	 movaps	 xmm0, xmm1
  0018b	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  00192	e8 00 00 00 00	 call	 set_tod_steering

; 4450 :             if ( MLVL(VERBOSE) )

  00197	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0019e	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  001a4	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001a9	85 c0		 test	 eax, eax
  001ab	0f 84 8f 00 00
	00		 je	 $LN14@toddrag_cm

; 4451 :                 WRMSG(HHC02204, "I", argv[0], argv[1] );

  001b1	b8 08 00 00 00	 mov	 eax, 8
  001b6	48 6b c0 01	 imul	 rax, rax, 1
  001ba	48 89 44 24 60	 mov	 QWORD PTR tv138[rsp], rax
  001bf	b9 08 00 00 00	 mov	 ecx, 8
  001c4	48 6b c9 00	 imul	 rcx, rcx, 0
  001c8	48 89 4c 24 68	 mov	 QWORD PTR tv141[rsp], rcx
  001cd	b9 01 00 00 00	 mov	 ecx, 1
  001d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001d8	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001e0	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv138[rsp]
  001e5	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001e9	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001ee	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001f6	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv141[rsp]
  001fb	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001ff	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00204	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207855
  0020b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00210	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207856
  00217	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0021c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00221	41 b9 03 00 00
	00		 mov	 r9d, 3
  00227	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207857
  0022e	ba 63 11 00 00	 mov	 edx, 4451		; 00001163H
  00233	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207858
  0023a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN14@toddrag_cm:

; 4452 :         }

  00240	e9 99 00 00 00	 jmp	 $LN13@toddrag_cm
$LN12@toddrag_cm:

; 4453 :         else
; 4454 :         {
; 4455 :             WRMSG( HHC01451, "E", argv[1], argv[0] );

  00245	b8 08 00 00 00	 mov	 eax, 8
  0024a	48 6b c0 00	 imul	 rax, rax, 0
  0024e	48 89 44 24 70	 mov	 QWORD PTR tv153[rsp], rax
  00253	b9 08 00 00 00	 mov	 ecx, 8
  00258	48 6b c9 01	 imul	 rcx, rcx, 1
  0025c	48 89 4c 24 78	 mov	 QWORD PTR tv156[rsp], rcx
  00261	b9 01 00 00 00	 mov	 ecx, 1
  00266	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0026c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00274	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv153[rsp]
  00279	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0027d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00282	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0028a	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv156[rsp]
  0028f	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00293	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00298	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207859
  0029f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207860
  002ab	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002b0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002b5	41 b9 03 00 00
	00		 mov	 r9d, 3
  002bb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207861
  002c2	ba 67 11 00 00	 mov	 edx, 4455		; 00001167H
  002c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207862
  002ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4456 :             return -1;

  002d4	b8 ff ff ff ff	 mov	 eax, -1
  002d9	e9 ca 00 00 00	 jmp	 $LN1@toddrag_cm
$LN13@toddrag_cm:

; 4457 :         }
; 4458 :     }

  002de	e9 c3 00 00 00	 jmp	 $LN11@toddrag_cm
$LN10@toddrag_cm:

; 4459 :     else
; 4460 :     {
; 4461 :         char buf[32];
; 4462 :         MSGBUF( buf, "%lf",(1.0/(1.0+get_tod_steering())));

  002e3	e8 00 00 00 00	 call	 get_tod_steering
  002e8	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  002f0	f2 0f 58 c8	 addsd	 xmm1, xmm0
  002f4	0f 28 c1	 movaps	 xmm0, xmm1
  002f7	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  002ff	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00303	0f 28 c1	 movaps	 xmm0, xmm1
  00306	0f 28 d8	 movaps	 xmm3, xmm0
  00309	66 49 0f 7e d9	 movq	 r9, xmm3
  0030e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207863
  00315	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0031a	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR buf$2[rsp]
  00322	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4463 :         WRMSG(HHC02203, "I", argv[0], buf);

  00328	b8 08 00 00 00	 mov	 eax, 8
  0032d	48 6b c0 00	 imul	 rax, rax, 0
  00331	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv178[rsp], rax
  00339	b9 01 00 00 00	 mov	 ecx, 1
  0033e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00344	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR buf$2[rsp]
  0034c	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00351	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00359	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv178[rsp]
  00361	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00365	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0036a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207864
  00371	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00376	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207865
  0037d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00382	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00387	41 b9 03 00 00
	00		 mov	 r9d, 3
  0038d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207866
  00394	ba 6f 11 00 00	 mov	 edx, 4463		; 0000116fH
  00399	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207867
  003a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN11@toddrag_cm:

; 4464 :     }
; 4465 :     return 0;

  003a6	33 c0		 xor	 eax, eax
$LN1@toddrag_cm:

; 4466 : }

  003a8	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  003b0	48 33 cc	 xor	 rcx, rsp
  003b3	e8 00 00 00 00	 call	 __security_check_cookie
  003b8	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  003bf	c3		 ret	 0
toddrag_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
rc$ = 32
argc$ = 64
argv$ = 72
cmdline$ = 80
http_cmd PROC

; 4412 : {

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4413 :     int     rc = 0;

  00012	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN4@http_cmd:

; 4414 : 
; 4415 :     UNREFERENCED(cmdline);

  0001a	33 c0		 xor	 eax, eax
  0001c	85 c0		 test	 eax, eax
  0001e	75 fa		 jne	 SHORT $LN4@http_cmd

; 4416 : 
; 4417 :     argc--;

  00020	8b 44 24 40	 mov	 eax, DWORD PTR argc$[rsp]
  00024	ff c8		 dec	 eax
  00026	89 44 24 40	 mov	 DWORD PTR argc$[rsp], eax

; 4418 :     argv++;

  0002a	48 8b 44 24 48	 mov	 rax, QWORD PTR argv$[rsp]
  0002f	48 83 c0 08	 add	 rax, 8
  00033	48 89 44 24 48	 mov	 QWORD PTR argv$[rsp], rax

; 4419 : 
; 4420 :     rc = http_command(argc, argv);

  00038	48 8b 54 24 48	 mov	 rdx, QWORD PTR argv$[rsp]
  0003d	8b 4c 24 40	 mov	 ecx, DWORD PTR argc$[rsp]
  00041	e8 00 00 00 00	 call	 http_command
  00046	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 4421 : 
; 4422 :     return rc;

  0004a	8b 44 24 20	 mov	 eax, DWORD PTR rc$[rsp]

; 4423 : }

  0004e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00052	c3		 ret	 0
http_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
disabled$ = 80
rc$ = 84
i$ = 88
port$1 = 96
serv$2 = 104
port$3 = 112
host$4 = 120
host$5 = 128
tv248 = 136
tv333 = 144
tv77 = 152
tv212 = 160
tv230 = 168
port$6 = 176
tv257 = 184
tv275 = 192
tv335 = 200
buf$7 = 208
__$ArrayPad$ = 336
argc$ = 368
argv$ = 376
cmdline$ = 384
sysgport_cmd PROC

; 4265 : {

$LN44:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 4266 :     static char const* def_port = "3278";
; 4267 :     bool disabled = false;

  00027	c6 44 24 50 00	 mov	 BYTE PTR disabled$[rsp], 0

; 4268 :     int rc = 0;

  0002c	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN4@sysgport_c:

; 4269 :     int i;
; 4270 : 
; 4271 :     UNREFERENCED( cmdline );

  00034	33 c0		 xor	 eax, eax
  00036	85 c0		 test	 eax, eax
  00038	75 fa		 jne	 SHORT $LN4@sysgport_c
$LN7@sysgport_c:

; 4272 :     UPPER_ARGV_0( argv );

  0003a	48 83 bc 24 78
	01 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00043	74 47		 je	 SHORT $LN11@sysgport_c
  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	48 6b c0 00	 imul	 rax, rax, 0
  0004e	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00056	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0005b	74 2f		 je	 SHORT $LN11@sysgport_c
  0005d	b8 08 00 00 00	 mov	 eax, 8
  00062	48 6b c0 00	 imul	 rax, rax, 0
  00066	b9 08 00 00 00	 mov	 ecx, 8
  0006b	48 6b c9 00	 imul	 rcx, rcx, 0
  0006f	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00077	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0007b	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00083	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00087	e8 00 00 00 00	 call	 strupper
$LN11@sysgport_c:
  0008c	33 c0		 xor	 eax, eax
  0008e	85 c0		 test	 eax, eax
  00090	75 a8		 jne	 SHORT $LN7@sysgport_c

; 4273 : 
; 4274 :     if (argc > 2)

  00092	83 bc 24 70 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0009a	7e 7e		 jle	 SHORT $LN12@sysgport_c

; 4275 :     {
; 4276 :         // "Invalid number of arguments for %s"
; 4277 :         WRMSG( HHC01455, "E", argv[0] );

  0009c	b8 08 00 00 00	 mov	 eax, 8
  000a1	48 6b c0 00	 imul	 rax, rax, 0
  000a5	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv77[rsp], rax
  000ad	b9 01 00 00 00	 mov	 ecx, 1
  000b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000b8	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000c0	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR tv77[rsp]
  000c8	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000cc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207748
  000d8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207749
  000e4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000e9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ee	41 b9 03 00 00
	00		 mov	 r9d, 3
  000f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207750
  000fb	ba b5 10 00 00	 mov	 edx, 4277		; 000010b5H
  00100	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207751
  00107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4278 :         rc = -1;

  0010d	c7 44 24 54 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 4279 :     }

  00115	e9 8c 04 00 00	 jmp	 $LN13@sysgport_c
$LN12@sysgport_c:

; 4280 :     else if (argc == 1) // Display current value

  0011a	83 bc 24 70 01
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00122	0f 85 52 02 00
	00		 jne	 $LN14@sysgport_c

; 4281 :     {
; 4282 :         char buf[128];
; 4283 : 
; 4284 :         if (sysblk.sysgport && strchr( sysblk.sysgport, ':' ) == NULL)

  00128	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0012f	48 83 b8 f0 13
	00 00 00	 cmp	 QWORD PTR [rax+5104], 0
  00137	74 4a		 je	 SHORT $LN16@sysgport_c
  00139	ba 3a 00 00 00	 mov	 edx, 58			; 0000003aH
  0013e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00145	48 8b 88 f0 13
	00 00		 mov	 rcx, QWORD PTR [rax+5104]
  0014c	e8 00 00 00 00	 call	 strchr
  00151	48 85 c0	 test	 rax, rax
  00154	75 2d		 jne	 SHORT $LN16@sysgport_c

; 4285 :         {
; 4286 :             MSGBUF( buf, "on port %s", sysblk.sysgport );

  00156	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0015d	4c 8b 88 f0 13
	00 00		 mov	 r9, QWORD PTR [rax+5104]
  00164	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207756
  0016b	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00170	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$7[rsp]
  00178	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4287 :         }

  0017e	e9 cd 00 00 00	 jmp	 $LN17@sysgport_c
$LN16@sysgport_c:

; 4288 :         else // (!sysblk.sysgport || host:port specified)
; 4289 :         {
; 4290 :             if (sysblk.sysgport)

  00183	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0018a	48 83 b8 f0 13
	00 00 00	 cmp	 QWORD PTR [rax+5104], 0
  00192	0f 84 b8 00 00
	00		 je	 $LN18@sysgport_c

; 4291 :             {
; 4292 :                 char* serv = NULL;

  00198	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR serv$2[rsp], 0

; 4293 :                 char* host = NULL;

  001a1	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR host$5[rsp], 0

; 4294 :                 char* port = NULL;

  001ad	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR port$3[rsp], 0

; 4295 : 
; 4296 :                 port = strdup( sysblk.sysgport );

  001b6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001bd	48 8b 88 f0 13
	00 00		 mov	 rcx, QWORD PTR [rax+5104]
  001c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  001ca	48 89 44 24 70	 mov	 QWORD PTR port$3[rsp], rax

; 4297 : 
; 4298 :                 if ((serv = strchr( port, ':' )))

  001cf	ba 3a 00 00 00	 mov	 edx, 58			; 0000003aH
  001d4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR port$3[rsp]
  001d9	e8 00 00 00 00	 call	 strchr
  001de	48 89 44 24 68	 mov	 QWORD PTR serv$2[rsp], rax
  001e3	48 83 7c 24 68
	00		 cmp	 QWORD PTR serv$2[rsp], 0
  001e9	74 2e		 je	 SHORT $LN19@sysgport_c

; 4299 :                 {
; 4300 :                     *serv++ = '\0';

  001eb	48 8b 44 24 68	 mov	 rax, QWORD PTR serv$2[rsp]
  001f0	c6 00 00	 mov	 BYTE PTR [rax], 0
  001f3	48 8b 44 24 68	 mov	 rax, QWORD PTR serv$2[rsp]
  001f8	48 ff c0	 inc	 rax
  001fb	48 89 44 24 68	 mov	 QWORD PTR serv$2[rsp], rax

; 4301 : 
; 4302 :                     if (*port)

  00200	48 8b 44 24 70	 mov	 rax, QWORD PTR port$3[rsp]
  00205	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00208	85 c0		 test	 eax, eax
  0020a	74 0d		 je	 SHORT $LN20@sysgport_c

; 4303 :                         host = port;

  0020c	48 8b 44 24 70	 mov	 rax, QWORD PTR port$3[rsp]
  00211	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR host$5[rsp], rax
$LN20@sysgport_c:
$LN19@sysgport_c:

; 4304 :                 }
; 4305 : 
; 4306 :                 MSGBUF( buf, "for host %s on port %s", host, serv );

  00219	48 8b 44 24 68	 mov	 rax, QWORD PTR serv$2[rsp]
  0021e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00223	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR host$5[rsp]
  0022b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207760
  00232	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00237	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$7[rsp]
  0023f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4307 :                 free( port );

  00245	48 8b 4c 24 70	 mov	 rcx, QWORD PTR port$3[rsp]
  0024a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN18@sysgport_c:
$LN17@sysgport_c:

; 4308 :             }
; 4309 :         }
; 4310 : 
; 4311 :         // If SYSGPORT specified -AND- no SYSG device connected yet...
; 4312 :         if (sysblk.sysgport && (!sysblk.sysgdev || !sysblk.sysgdev->connected))

  00250	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00257	48 83 b8 f0 13
	00 00 00	 cmp	 QWORD PTR [rax+5104], 0
  0025f	0f 84 9d 00 00
	00		 je	 $LN21@sysgport_c
  00265	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0026c	48 83 b8 c8 11
	00 00 00	 cmp	 QWORD PTR [rax+4552], 0
  00274	74 1e		 je	 SHORT $LN23@sysgport_c
  00276	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0027d	48 8b 80 c8 11
	00 00		 mov	 rax, QWORD PTR [rax+4552]
  00284	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0028a	c1 e8 05	 shr	 eax, 5
  0028d	83 e0 01	 and	 eax, 1
  00290	85 c0		 test	 eax, eax
  00292	75 6e		 jne	 SHORT $LN21@sysgport_c
$LN23@sysgport_c:

; 4313 :         {
; 4314 :             // "%s server %slistening %s"
; 4315 :             WRMSG( HHC17001, "I", "SYSG console", "", buf );

  00294	b9 01 00 00 00	 mov	 ecx, 1
  00299	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0029f	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$7[rsp]
  002a7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  002ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207764
  002b3	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207765
  002bf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207766
  002cb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207767
  002d7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002dc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e1	41 b9 03 00 00
	00		 mov	 r9d, 3
  002e7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207768
  002ee	ba db 10 00 00	 mov	 edx, 4315		; 000010dbH
  002f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207769
  002fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4316 :         }

  00300	eb 6b		 jmp	 SHORT $LN22@sysgport_c
$LN21@sysgport_c:

; 4317 :         else // SYSGPORT NOT specified -OR- SYSG device already connected
; 4318 :         {
; 4319 :             // "%s server %slistening %s"
; 4320 :             WRMSG( HHC17001, "I", "SYSG console", "NOT ", "on any port" );

  00302	b9 01 00 00 00	 mov	 ecx, 1
  00307	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0030d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207770
  00314	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00319	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207771
  00320	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00325	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207772
  0032c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00331	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207773
  00338	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0033d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207774
  00344	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00349	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0034e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00354	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207775
  0035b	ba e0 10 00 00	 mov	 edx, 4320		; 000010e0H
  00360	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207776
  00367	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN22@sysgport_c:

; 4321 :         }
; 4322 :         rc = 0;

  0036d	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0

; 4323 :     }

  00375	e9 2c 02 00 00	 jmp	 $LN15@sysgport_c
$LN14@sysgport_c:

; 4324 :     else // Set new value
; 4325 :     {
; 4326 :         if (str_caseless_eq( argv[1], "NO" ))

  0037a	b8 08 00 00 00	 mov	 eax, 8
  0037f	48 6b c0 01	 imul	 rax, rax, 1
  00383	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG207779
  0038a	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00392	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00396	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0039c	85 c0		 test	 eax, eax
  0039e	75 12		 jne	 SHORT $LN24@sysgport_c

; 4327 :         {
; 4328 :             disabled = true;

  003a0	c6 44 24 50 01	 mov	 BYTE PTR disabled$[rsp], 1

; 4329 :             rc = 1;

  003a5	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR rc$[rsp], 1

; 4330 :         }

  003ad	e9 f4 01 00 00	 jmp	 $LN25@sysgport_c
$LN24@sysgport_c:

; 4331 :         else
; 4332 :         {
; 4333 :             char* port;
; 4334 :             char* host = strdup( argv[1] );

  003b2	b8 08 00 00 00	 mov	 eax, 8
  003b7	48 6b c0 01	 imul	 rax, rax, 1
  003bb	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003c3	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  003c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  003cd	48 89 44 24 78	 mov	 QWORD PTR host$4[rsp], rax

; 4335 : 
; 4336 :             if ((port = strchr( host, ':' )) == NULL)

  003d2	ba 3a 00 00 00	 mov	 edx, 58			; 0000003aH
  003d7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR host$4[rsp]
  003dc	e8 00 00 00 00	 call	 strchr
  003e1	48 89 44 24 60	 mov	 QWORD PTR port$1[rsp], rax
  003e6	48 83 7c 24 60
	00		 cmp	 QWORD PTR port$1[rsp], 0
  003ec	75 0c		 jne	 SHORT $LN26@sysgport_c

; 4337 :                 port = host;

  003ee	48 8b 44 24 78	 mov	 rax, QWORD PTR host$4[rsp]
  003f3	48 89 44 24 60	 mov	 QWORD PTR port$1[rsp], rax
  003f8	eb 15		 jmp	 SHORT $LN27@sysgport_c
$LN26@sysgport_c:

; 4338 :             else
; 4339 :                 *port++ = '\0';

  003fa	48 8b 44 24 60	 mov	 rax, QWORD PTR port$1[rsp]
  003ff	c6 00 00	 mov	 BYTE PTR [rax], 0
  00402	48 8b 44 24 60	 mov	 rax, QWORD PTR port$1[rsp]
  00407	48 ff c0	 inc	 rax
  0040a	48 89 44 24 60	 mov	 QWORD PTR port$1[rsp], rax
$LN27@sysgport_c:

; 4340 : 
; 4341 :             for (i=0; i < (int) strlen( port ); i++)

  0040f	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00417	eb 0a		 jmp	 SHORT $LN10@sysgport_c
$LN8@sysgport_c:
  00419	8b 44 24 58	 mov	 eax, DWORD PTR i$[rsp]
  0041d	ff c0		 inc	 eax
  0041f	89 44 24 58	 mov	 DWORD PTR i$[rsp], eax
$LN10@sysgport_c:
  00423	48 8b 4c 24 60	 mov	 rcx, QWORD PTR port$1[rsp]
  00428	e8 00 00 00 00	 call	 strlen
  0042d	39 44 24 58	 cmp	 DWORD PTR i$[rsp], eax
  00431	0f 8d a8 00 00
	00		 jge	 $LN9@sysgport_c

; 4342 :             {
; 4343 :                 if (!isdigit( port[i] ))

  00437	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$[rsp]
  0043c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR port$1[rsp]
  00441	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00445	8b c8		 mov	 ecx, eax
  00447	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  0044d	85 c0		 test	 eax, eax
  0044f	0f 85 85 00 00
	00		 jne	 $LN28@sysgport_c

; 4344 :                 {
; 4345 :                     // "Invalid value %s specified for %s"
; 4346 :                     WRMSG( HHC01451, "E", port, argv[0] );

  00455	b8 08 00 00 00	 mov	 eax, 8
  0045a	48 6b c0 00	 imul	 rax, rax, 0
  0045e	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv212[rsp], rax
  00466	b9 01 00 00 00	 mov	 ecx, 1
  0046b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00471	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00479	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR tv212[rsp]
  00481	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00485	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0048a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR port$1[rsp]
  0048f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00494	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207783
  0049b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207784
  004a7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004ac	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004b1	41 b9 03 00 00
	00		 mov	 r9d, 3
  004b7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207785
  004be	ba fa 10 00 00	 mov	 edx, 4346		; 000010faH
  004c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207786
  004ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4347 :                     rc = -1;

  004d0	c7 44 24 54 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 4348 :                     break;

  004d8	eb 05		 jmp	 SHORT $LN9@sysgport_c
$LN28@sysgport_c:

; 4349 :                 }
; 4350 :             }

  004da	e9 3a ff ff ff	 jmp	 $LN8@sysgport_c
$LN9@sysgport_c:

; 4351 : 
; 4352 :             if (rc != -1)  // (if no parsing error)

  004df	83 7c 24 54 ff	 cmp	 DWORD PTR rc$[rsp], -1
  004e4	0f 84 b1 00 00
	00		 je	 $LN29@sysgport_c

; 4353 :             {
; 4354 :                 i = atoi( port );

  004ea	48 8b 4c 24 60	 mov	 rcx, QWORD PTR port$1[rsp]
  004ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  004f5	89 44 24 58	 mov	 DWORD PTR i$[rsp], eax

; 4355 : 
; 4356 :                 if (i < 0 || i > 65535)

  004f9	83 7c 24 58 00	 cmp	 DWORD PTR i$[rsp], 0
  004fe	7c 0e		 jl	 SHORT $LN32@sysgport_c
  00500	81 7c 24 58 ff
	ff 00 00	 cmp	 DWORD PTR i$[rsp], 65535 ; 0000ffffH
  00508	0f 8e 85 00 00
	00		 jle	 $LN30@sysgport_c
$LN32@sysgport_c:

; 4357 :                 {
; 4358 :                     // "Invalid value %s specified for %s"
; 4359 :                     WRMSG( HHC01451, "E", port, argv[0] );

  0050e	b8 08 00 00 00	 mov	 eax, 8
  00513	48 6b c0 00	 imul	 rax, rax, 0
  00517	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv230[rsp], rax
  0051f	b9 01 00 00 00	 mov	 ecx, 1
  00524	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0052a	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00532	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR tv230[rsp]
  0053a	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0053e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00543	48 8b 4c 24 60	 mov	 rcx, QWORD PTR port$1[rsp]
  00548	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0054d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207791
  00554	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00559	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207792
  00560	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00565	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0056a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00570	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207793
  00577	ba 07 11 00 00	 mov	 edx, 4359		; 00001107H
  0057c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207794
  00583	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4360 :                     rc = -1;

  00589	c7 44 24 54 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 4361 :                 }

  00591	eb 08		 jmp	 SHORT $LN31@sysgport_c
$LN30@sysgport_c:

; 4362 :                 else
; 4363 :                     rc = 1;

  00593	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR rc$[rsp], 1
$LN31@sysgport_c:
$LN29@sysgport_c:

; 4364 :             }
; 4365 : 
; 4366 :             free( host );

  0059b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR host$4[rsp]
  005a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN25@sysgport_c:
$LN15@sysgport_c:
$LN13@sysgport_c:

; 4367 :         }
; 4368 :     }
; 4369 : 
; 4370 :     if (rc != 0) // (new value specified or error)

  005a6	83 7c 24 54 00	 cmp	 DWORD PTR rc$[rsp], 0
  005ab	0f 84 ca 02 00
	00		 je	 $LN33@sysgport_c

; 4371 :     {
; 4372 :         const char* port = (rc == -1) ? def_port : argv[1];

  005b1	83 7c 24 54 ff	 cmp	 DWORD PTR rc$[rsp], -1
  005b6	75 11		 jne	 SHORT $LN40@sysgport_c
  005b8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?def_port@?1??sysgport_cmd@@9@9
  005bf	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv248[rsp], rax
  005c7	eb 1d		 jmp	 SHORT $LN41@sysgport_c
$LN40@sysgport_c:
  005c9	b8 08 00 00 00	 mov	 eax, 8
  005ce	48 6b c0 01	 imul	 rax, rax, 1
  005d2	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  005da	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  005de	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv248[rsp], rax
$LN41@sysgport_c:
  005e6	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv248[rsp]
  005ee	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR port$6[rsp], rax

; 4373 : 
; 4374 :         if (!disabled && str_eq( port, sysblk.cnslport ))

  005f6	0f b6 44 24 50	 movzx	 eax, BYTE PTR disabled$[rsp]
  005fb	85 c0		 test	 eax, eax
  005fd	0f 85 ad 00 00
	00		 jne	 $LN34@sysgport_c
  00603	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0060a	48 8b 90 e8 13
	00 00		 mov	 rdx, QWORD PTR [rax+5096]
  00611	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR port$6[rsp]
  00619	e8 00 00 00 00	 call	 strcmp
  0061e	85 c0		 test	 eax, eax
  00620	0f 85 8a 00 00
	00		 jne	 $LN34@sysgport_c

; 4375 :         {
; 4376 :             // "%s cannot be the same as %s"
; 4377 :             WRMSG( HHC01453, "E", argv[0], "CNSLPORT" );

  00626	b8 08 00 00 00	 mov	 eax, 8
  0062b	48 6b c0 00	 imul	 rax, rax, 0
  0062f	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv257[rsp], rax
  00637	b9 01 00 00 00	 mov	 ecx, 1
  0063c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00642	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207798
  00649	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0064e	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00656	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR tv257[rsp]
  0065e	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00662	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00667	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207799
  0066e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00673	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207800
  0067a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0067f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00684	41 b9 03 00 00
	00		 mov	 r9d, 3
  0068a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207801
  00691	ba 19 11 00 00	 mov	 edx, 4377		; 00001119H
  00696	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207802
  0069d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4378 :             rc = -1;

  006a3	c7 44 24 54 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 4379 :         }

  006ab	e9 cb 01 00 00	 jmp	 $LN35@sysgport_c
$LN34@sysgport_c:

; 4380 :         else // (disabled || port okay)
; 4381 :         {
; 4382 :             free( sysblk.sysgport );

  006b0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  006b7	48 8b 88 f0 13
	00 00		 mov	 rcx, QWORD PTR [rax+5104]
  006be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 4383 :             sysblk.sysgport = NULL;

  006c4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  006cb	48 c7 80 f0 13
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+5104], 0

; 4384 : 
; 4385 :             if (!disabled && rc == -1)

  006d6	0f b6 44 24 50	 movzx	 eax, BYTE PTR disabled$[rsp]
  006db	85 c0		 test	 eax, eax
  006dd	0f 85 b0 00 00
	00		 jne	 $LN36@sysgport_c
  006e3	83 7c 24 54 ff	 cmp	 DWORD PTR rc$[rsp], -1
  006e8	0f 85 a5 00 00
	00		 jne	 $LN36@sysgport_c

; 4386 :             {
; 4387 :                 // "Default port %s being used for %s"
; 4388 :                 WRMSG( HHC01452, "W", def_port, argv[0] );

  006ee	b8 08 00 00 00	 mov	 eax, 8
  006f3	48 6b c0 00	 imul	 rax, rax, 0
  006f7	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv275[rsp], rax
  006ff	b9 01 00 00 00	 mov	 ecx, 1
  00704	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0070a	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00712	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR tv275[rsp]
  0071a	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0071e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00723	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?def_port@?1??sysgport_cmd@@9@9
  0072a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0072f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207805
  00736	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0073b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207806
  00742	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00747	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0074c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00752	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207807
  00759	ba 24 11 00 00	 mov	 edx, 4388		; 00001124H
  0075e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207808
  00765	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4389 :                 sysblk.sysgport = strdup( def_port );

  0076b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?def_port@?1??sysgport_cmd@@9@9
  00772	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00778	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0077f	48 89 81 f0 13
	00 00		 mov	 QWORD PTR [rcx+5104], rax

; 4390 :                 rc = 1;

  00786	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR rc$[rsp], 1

; 4391 :             }

  0078e	e9 e8 00 00 00	 jmp	 $LN37@sysgport_c
$LN36@sysgport_c:

; 4392 :             else // (disabled || rc != -1)
; 4393 :             {
; 4394 :                 if (!disabled)

  00793	0f b6 44 24 50	 movzx	 eax, BYTE PTR disabled$[rsp]
  00798	85 c0		 test	 eax, eax
  0079a	75 29		 jne	 SHORT $LN38@sysgport_c

; 4395 :                     sysblk.sysgport = strdup( argv[1] );

  0079c	b8 08 00 00 00	 mov	 eax, 8
  007a1	48 6b c0 01	 imul	 rax, rax, 1
  007a5	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  007ad	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  007b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  007b7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  007be	48 89 81 f0 13
	00 00		 mov	 QWORD PTR [rcx+5104], rax
$LN38@sysgport_c:

; 4396 : 
; 4397 :                 // "%-14s set to %s"
; 4398 :                 WRMSG( HHC02204, "I", argv[0],

  007c5	0f b6 44 24 50	 movzx	 eax, BYTE PTR disabled$[rsp]
  007ca	85 c0		 test	 eax, eax
  007cc	74 11		 je	 SHORT $LN42@sysgport_c
  007ce	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207810
  007d5	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv333[rsp], rax
  007dd	eb 16		 jmp	 SHORT $LN43@sysgport_c
$LN42@sysgport_c:
  007df	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  007e6	48 8b 80 f0 13
	00 00		 mov	 rax, QWORD PTR [rax+5104]
  007ed	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv333[rsp], rax
$LN43@sysgport_c:
  007f5	b8 08 00 00 00	 mov	 eax, 8
  007fa	48 6b c0 00	 imul	 rax, rax, 0
  007fe	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv335[rsp], rax
  00806	b9 01 00 00 00	 mov	 ecx, 1
  0080b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00811	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv333[rsp]
  00819	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0081e	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00826	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR tv335[rsp]
  0082e	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00832	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00837	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207811
  0083e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00843	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207812
  0084a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0084f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00854	41 b9 03 00 00
	00		 mov	 r9d, 3
  0085a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207813
  00861	ba 2f 11 00 00	 mov	 edx, 4399		; 0000112fH
  00866	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207814
  0086d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4399 :                     disabled ? "NO" : sysblk.sysgport );
; 4400 :                 rc = 0;

  00873	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN37@sysgport_c:
$LN35@sysgport_c:
$LN33@sysgport_c:

; 4401 :             }
; 4402 :         }
; 4403 :     }
; 4404 : 
; 4405 :     return rc;

  0087b	8b 44 24 54	 mov	 eax, DWORD PTR rc$[rsp]

; 4406 : }

  0087f	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00887	48 33 cc	 xor	 rcx, rsp
  0088a	e8 00 00 00 00	 call	 __security_check_cookie
  0088f	48 81 c4 68 01
	00 00		 add	 rsp, 360		; 00000168H
  00896	c3		 ret	 0
sysgport_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
rc$ = 80
i$ = 84
port$1 = 88
serv$2 = 96
port$3 = 104
host$4 = 112
host$5 = 120
tv217 = 128
tv77 = 136
tv181 = 144
tv199 = 152
port$6 = 160
tv226 = 168
tv242 = 176
tv265 = 184
buf$7 = 192
__$ArrayPad$ = 320
argc$ = 352
argv$ = 360
cmdline$ = 368
cnslport_cmd PROC

; 4140 : {

$LN35:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 4141 :     static char const* def_port = "3270";
; 4142 :     int rc = 0;

  00027	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN4@cnslport_c:

; 4143 :     int i;
; 4144 : 
; 4145 :     UNREFERENCED( cmdline );

  0002f	33 c0		 xor	 eax, eax
  00031	85 c0		 test	 eax, eax
  00033	75 fa		 jne	 SHORT $LN4@cnslport_c
$LN7@cnslport_c:

; 4146 :     UPPER_ARGV_0( argv );

  00035	48 83 bc 24 68
	01 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  0003e	74 47		 je	 SHORT $LN11@cnslport_c
  00040	b8 08 00 00 00	 mov	 eax, 8
  00045	48 6b c0 00	 imul	 rax, rax, 0
  00049	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00051	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00056	74 2f		 je	 SHORT $LN11@cnslport_c
  00058	b8 08 00 00 00	 mov	 eax, 8
  0005d	48 6b c0 00	 imul	 rax, rax, 0
  00061	b9 08 00 00 00	 mov	 ecx, 8
  00066	48 6b c9 00	 imul	 rcx, rcx, 0
  0006a	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00072	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00076	48 8b 84 24 68
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0007e	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00082	e8 00 00 00 00	 call	 strupper
$LN11@cnslport_c:
  00087	33 c0		 xor	 eax, eax
  00089	85 c0		 test	 eax, eax
  0008b	75 a8		 jne	 SHORT $LN7@cnslport_c

; 4147 : 
; 4148 :     if (argc > 2)

  0008d	83 bc 24 60 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00095	7e 7e		 jle	 SHORT $LN12@cnslport_c

; 4149 :     {
; 4150 :         // "Invalid number of arguments for %s"
; 4151 :         WRMSG( HHC01455, "E", argv[0] );

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 00	 imul	 rax, rax, 0
  000a0	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv77[rsp], rax
  000a8	b9 01 00 00 00	 mov	 ecx, 1
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000b3	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000bb	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv77[rsp]
  000c3	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000c7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207654
  000d3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207655
  000df	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000e4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ef	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207656
  000f6	ba 37 10 00 00	 mov	 edx, 4151		; 00001037H
  000fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207657
  00102	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4152 :         rc = -1;

  00108	c7 44 24 50 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 4153 :     }

  00110	e9 62 03 00 00	 jmp	 $LN13@cnslport_c
$LN12@cnslport_c:

; 4154 :     else if (argc == 1)

  00115	83 bc 24 60 01
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0011d	0f 85 60 01 00
	00		 jne	 $LN14@cnslport_c

; 4155 :     {
; 4156 :         // Display current value
; 4157 : 
; 4158 :         char buf[128];
; 4159 : 
; 4160 :         if (strchr( sysblk.cnslport, ':' ) == NULL)

  00123	ba 3a 00 00 00	 mov	 edx, 58			; 0000003aH
  00128	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0012f	48 8b 88 e8 13
	00 00		 mov	 rcx, QWORD PTR [rax+5096]
  00136	e8 00 00 00 00	 call	 strchr
  0013b	48 85 c0	 test	 rax, rax
  0013e	75 2d		 jne	 SHORT $LN16@cnslport_c

; 4161 :         {
; 4162 :             MSGBUF( buf, "on port %s", sysblk.cnslport);

  00140	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00147	4c 8b 88 e8 13
	00 00		 mov	 r9, QWORD PTR [rax+5096]
  0014e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207662
  00155	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0015a	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR buf$7[rsp]
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4163 :         }

  00168	e9 9d 00 00 00	 jmp	 $LN17@cnslport_c
$LN16@cnslport_c:

; 4164 :         else
; 4165 :         {
; 4166 :             char* serv;
; 4167 :             char* host = NULL;

  0016d	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR host$5[rsp], 0

; 4168 :             char* port = strdup( sysblk.cnslport );

  00176	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0017d	48 8b 88 e8 13
	00 00		 mov	 rcx, QWORD PTR [rax+5096]
  00184	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0018a	48 89 44 24 68	 mov	 QWORD PTR port$3[rsp], rax

; 4169 : 
; 4170 :             if ((serv = strchr( port, ':' )))

  0018f	ba 3a 00 00 00	 mov	 edx, 58			; 0000003aH
  00194	48 8b 4c 24 68	 mov	 rcx, QWORD PTR port$3[rsp]
  00199	e8 00 00 00 00	 call	 strchr
  0019e	48 89 44 24 60	 mov	 QWORD PTR serv$2[rsp], rax
  001a3	48 83 7c 24 60
	00		 cmp	 QWORD PTR serv$2[rsp], 0
  001a9	74 2b		 je	 SHORT $LN18@cnslport_c

; 4171 :             {
; 4172 :                 *serv++ = '\0';

  001ab	48 8b 44 24 60	 mov	 rax, QWORD PTR serv$2[rsp]
  001b0	c6 00 00	 mov	 BYTE PTR [rax], 0
  001b3	48 8b 44 24 60	 mov	 rax, QWORD PTR serv$2[rsp]
  001b8	48 ff c0	 inc	 rax
  001bb	48 89 44 24 60	 mov	 QWORD PTR serv$2[rsp], rax

; 4173 : 
; 4174 :                 if (*port)

  001c0	48 8b 44 24 68	 mov	 rax, QWORD PTR port$3[rsp]
  001c5	0f be 00	 movsx	 eax, BYTE PTR [rax]
  001c8	85 c0		 test	 eax, eax
  001ca	74 0a		 je	 SHORT $LN19@cnslport_c

; 4175 :                     host = port;

  001cc	48 8b 44 24 68	 mov	 rax, QWORD PTR port$3[rsp]
  001d1	48 89 44 24 78	 mov	 QWORD PTR host$5[rsp], rax
$LN19@cnslport_c:
$LN18@cnslport_c:

; 4176 :             }
; 4177 : 
; 4178 :             MSGBUF( buf, "for host %s on port %s", host, serv);

  001d6	48 8b 44 24 60	 mov	 rax, QWORD PTR serv$2[rsp]
  001db	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001e0	4c 8b 4c 24 78	 mov	 r9, QWORD PTR host$5[rsp]
  001e5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207665
  001ec	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  001f1	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR buf$7[rsp]
  001f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4179 :             free( port );

  001ff	48 8b 4c 24 68	 mov	 rcx, QWORD PTR port$3[rsp]
  00204	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN17@cnslport_c:

; 4180 :         }
; 4181 : 
; 4182 :         // "%s server %slistening %s"
; 4183 :         WRMSG( HHC17001, "I", "Console", "", buf);

  0020a	b9 01 00 00 00	 mov	 ecx, 1
  0020f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00215	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR buf$7[rsp]
  0021d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00222	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207666
  00229	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0022e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207667
  00235	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0023a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207668
  00241	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00246	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207669
  0024d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00252	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00257	41 b9 03 00 00
	00		 mov	 r9d, 3
  0025d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207670
  00264	ba 57 10 00 00	 mov	 edx, 4183		; 00001057H
  00269	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207671
  00270	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4184 :         rc = 0;

  00276	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0

; 4185 :     }

  0027e	e9 f4 01 00 00	 jmp	 $LN15@cnslport_c
$LN14@cnslport_c:

; 4186 :     else
; 4187 :     {
; 4188 :         // Set new value
; 4189 : 
; 4190 :         char* port;
; 4191 :         char* host = strdup( argv[1] );

  00283	b8 08 00 00 00	 mov	 eax, 8
  00288	48 6b c0 01	 imul	 rax, rax, 1
  0028c	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00294	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00298	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0029e	48 89 44 24 70	 mov	 QWORD PTR host$4[rsp], rax

; 4192 : 
; 4193 :         if ((port = strchr( host, ':' )) == NULL)

  002a3	ba 3a 00 00 00	 mov	 edx, 58			; 0000003aH
  002a8	48 8b 4c 24 70	 mov	 rcx, QWORD PTR host$4[rsp]
  002ad	e8 00 00 00 00	 call	 strchr
  002b2	48 89 44 24 58	 mov	 QWORD PTR port$1[rsp], rax
  002b7	48 83 7c 24 58
	00		 cmp	 QWORD PTR port$1[rsp], 0
  002bd	75 0c		 jne	 SHORT $LN20@cnslport_c

; 4194 :             port = host;

  002bf	48 8b 44 24 70	 mov	 rax, QWORD PTR host$4[rsp]
  002c4	48 89 44 24 58	 mov	 QWORD PTR port$1[rsp], rax
  002c9	eb 15		 jmp	 SHORT $LN21@cnslport_c
$LN20@cnslport_c:

; 4195 :         else
; 4196 :             *port++ = '\0';

  002cb	48 8b 44 24 58	 mov	 rax, QWORD PTR port$1[rsp]
  002d0	c6 00 00	 mov	 BYTE PTR [rax], 0
  002d3	48 8b 44 24 58	 mov	 rax, QWORD PTR port$1[rsp]
  002d8	48 ff c0	 inc	 rax
  002db	48 89 44 24 58	 mov	 QWORD PTR port$1[rsp], rax
$LN21@cnslport_c:

; 4197 : 
; 4198 :         for (i=0; i < (int) strlen( port ); i++)

  002e0	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  002e8	eb 0a		 jmp	 SHORT $LN10@cnslport_c
$LN8@cnslport_c:
  002ea	8b 44 24 54	 mov	 eax, DWORD PTR i$[rsp]
  002ee	ff c0		 inc	 eax
  002f0	89 44 24 54	 mov	 DWORD PTR i$[rsp], eax
$LN10@cnslport_c:
  002f4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR port$1[rsp]
  002f9	e8 00 00 00 00	 call	 strlen
  002fe	39 44 24 54	 cmp	 DWORD PTR i$[rsp], eax
  00302	0f 8d a8 00 00
	00		 jge	 $LN9@cnslport_c

; 4199 :         {
; 4200 :             if (!isdigit( port[i] ))

  00308	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  0030d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR port$1[rsp]
  00312	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00316	8b c8		 mov	 ecx, eax
  00318	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  0031e	85 c0		 test	 eax, eax
  00320	0f 85 85 00 00
	00		 jne	 $LN22@cnslport_c

; 4201 :             {
; 4202 :                 // "Invalid value %s specified for %s"
; 4203 :                 WRMSG( HHC01451, "E", port, argv[0] );

  00326	b8 08 00 00 00	 mov	 eax, 8
  0032b	48 6b c0 00	 imul	 rax, rax, 0
  0032f	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv181[rsp], rax
  00337	b9 01 00 00 00	 mov	 ecx, 1
  0033c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00342	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0034a	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tv181[rsp]
  00352	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00356	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0035b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR port$1[rsp]
  00360	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00365	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207675
  0036c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00371	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207676
  00378	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0037d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00382	41 b9 03 00 00
	00		 mov	 r9d, 3
  00388	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207677
  0038f	ba 6b 10 00 00	 mov	 edx, 4203		; 0000106bH
  00394	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207678
  0039b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4204 :                 rc = -1;

  003a1	c7 44 24 50 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 4205 :                 break;

  003a9	eb 05		 jmp	 SHORT $LN9@cnslport_c
$LN22@cnslport_c:

; 4206 :             }
; 4207 :         }

  003ab	e9 3a ff ff ff	 jmp	 $LN8@cnslport_c
$LN9@cnslport_c:

; 4208 : 
; 4209 :         if (rc != -1)

  003b0	83 7c 24 50 ff	 cmp	 DWORD PTR rc$[rsp], -1
  003b5	0f 84 b1 00 00
	00		 je	 $LN23@cnslport_c

; 4210 :         {
; 4211 :             i = atoi( port );

  003bb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR port$1[rsp]
  003c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  003c6	89 44 24 54	 mov	 DWORD PTR i$[rsp], eax

; 4212 : 
; 4213 :             if (i < 0 || i > 65535)

  003ca	83 7c 24 54 00	 cmp	 DWORD PTR i$[rsp], 0
  003cf	7c 0e		 jl	 SHORT $LN26@cnslport_c
  003d1	81 7c 24 54 ff
	ff 00 00	 cmp	 DWORD PTR i$[rsp], 65535 ; 0000ffffH
  003d9	0f 8e 85 00 00
	00		 jle	 $LN24@cnslport_c
$LN26@cnslport_c:

; 4214 :             {
; 4215 :                 // "Invalid value %s specified for %s"
; 4216 :                 WRMSG( HHC01451, "E", port, argv[0] );

  003df	b8 08 00 00 00	 mov	 eax, 8
  003e4	48 6b c0 00	 imul	 rax, rax, 0
  003e8	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv199[rsp], rax
  003f0	b9 01 00 00 00	 mov	 ecx, 1
  003f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003fb	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00403	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR tv199[rsp]
  0040b	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0040f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00414	48 8b 4c 24 58	 mov	 rcx, QWORD PTR port$1[rsp]
  00419	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0041e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207683
  00425	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0042a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207684
  00431	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00436	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0043b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00441	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207685
  00448	ba 78 10 00 00	 mov	 edx, 4216		; 00001078H
  0044d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207686
  00454	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4217 :                 rc = -1;

  0045a	c7 44 24 50 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 4218 :             }

  00462	eb 08		 jmp	 SHORT $LN25@cnslport_c
$LN24@cnslport_c:

; 4219 :             else
; 4220 :                 rc = 1;

  00464	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR rc$[rsp], 1
$LN25@cnslport_c:
$LN23@cnslport_c:

; 4221 :         }
; 4222 : 
; 4223 :         free( host );

  0046c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR host$4[rsp]
  00471	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN15@cnslport_c:
$LN13@cnslport_c:

; 4224 :     }
; 4225 : 
; 4226 :     if (rc != 0)

  00477	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  0047c	0f 84 92 02 00
	00		 je	 $LN27@cnslport_c

; 4227 :     {
; 4228 :         const char* port = (rc == -1) ? def_port : argv[1];

  00482	83 7c 24 50 ff	 cmp	 DWORD PTR rc$[rsp], -1
  00487	75 11		 jne	 SHORT $LN33@cnslport_c
  00489	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?def_port@?1??cnslport_cmd@@9@9
  00490	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv217[rsp], rax
  00498	eb 1d		 jmp	 SHORT $LN34@cnslport_c
$LN33@cnslport_c:
  0049a	b8 08 00 00 00	 mov	 eax, 8
  0049f	48 6b c0 01	 imul	 rax, rax, 1
  004a3	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004ab	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  004af	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv217[rsp], rax
$LN34@cnslport_c:
  004b7	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv217[rsp]
  004bf	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR port$6[rsp], rax

; 4229 : 
; 4230 :         if (sysblk.sysgport && str_eq( port, sysblk.sysgport ))

  004c7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  004ce	48 83 b8 f0 13
	00 00 00	 cmp	 QWORD PTR [rax+5104], 0
  004d6	0f 84 ad 00 00
	00		 je	 $LN28@cnslport_c
  004dc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  004e3	48 8b 90 f0 13
	00 00		 mov	 rdx, QWORD PTR [rax+5104]
  004ea	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR port$6[rsp]
  004f2	e8 00 00 00 00	 call	 strcmp
  004f7	85 c0		 test	 eax, eax
  004f9	0f 85 8a 00 00
	00		 jne	 $LN28@cnslport_c

; 4231 :         {
; 4232 :             // "%s cannot be the same as %s"
; 4233 :             WRMSG( HHC01453, "E", argv[0], "SYSGPORT" );

  004ff	b8 08 00 00 00	 mov	 eax, 8
  00504	48 6b c0 00	 imul	 rax, rax, 0
  00508	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv226[rsp], rax
  00510	b9 01 00 00 00	 mov	 ecx, 1
  00515	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0051b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207690
  00522	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00527	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0052f	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR tv226[rsp]
  00537	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0053b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00540	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207691
  00547	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0054c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207692
  00553	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00558	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0055d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00563	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207693
  0056a	ba 89 10 00 00	 mov	 edx, 4233		; 00001089H
  0056f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207694
  00576	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4234 :             rc = -1;

  0057c	c7 44 24 50 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 4235 :         }

  00584	e9 8b 01 00 00	 jmp	 $LN29@cnslport_c
$LN28@cnslport_c:

; 4236 :         else
; 4237 :         {
; 4238 :             free( sysblk.cnslport );

  00589	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00590	48 8b 88 e8 13
	00 00		 mov	 rcx, QWORD PTR [rax+5096]
  00597	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 4239 :             sysblk.cnslport = NULL;

  0059d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  005a4	48 c7 80 e8 13
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+5096], 0

; 4240 : 
; 4241 :             if (rc == -1)

  005af	83 7c 24 50 ff	 cmp	 DWORD PTR rc$[rsp], -1
  005b4	0f 85 a5 00 00
	00		 jne	 $LN30@cnslport_c

; 4242 :             {
; 4243 :                 // "Default port %s being used for %s"
; 4244 :                 WRMSG( HHC01452, "W", def_port, argv[0] );

  005ba	b8 08 00 00 00	 mov	 eax, 8
  005bf	48 6b c0 00	 imul	 rax, rax, 0
  005c3	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv242[rsp], rax
  005cb	b9 01 00 00 00	 mov	 ecx, 1
  005d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005d6	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  005de	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR tv242[rsp]
  005e6	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  005ea	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  005ef	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?def_port@?1??cnslport_cmd@@9@9
  005f6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207697
  00602	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00607	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207698
  0060e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00613	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00618	41 b9 03 00 00
	00		 mov	 r9d, 3
  0061e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207699
  00625	ba 94 10 00 00	 mov	 edx, 4244		; 00001094H
  0062a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207700
  00631	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4245 :                 sysblk.cnslport = strdup( def_port );

  00637	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?def_port@?1??cnslport_cmd@@9@9
  0063e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00644	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0064b	48 89 81 e8 13
	00 00		 mov	 QWORD PTR [rcx+5096], rax

; 4246 :                 rc = 1;

  00652	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR rc$[rsp], 1

; 4247 :             }

  0065a	e9 b5 00 00 00	 jmp	 $LN31@cnslport_c
$LN30@cnslport_c:

; 4248 :             else
; 4249 :             {
; 4250 :                 sysblk.cnslport = strdup( argv[1] );

  0065f	b8 08 00 00 00	 mov	 eax, 8
  00664	48 6b c0 01	 imul	 rax, rax, 1
  00668	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00670	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00674	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0067a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00681	48 89 81 e8 13
	00 00		 mov	 QWORD PTR [rcx+5096], rax

; 4251 :                 rc = 0;

  00688	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0

; 4252 :                 // "%-14s set to %s"
; 4253 :                 WRMSG( HHC02204, "I", argv[0], sysblk.cnslport );

  00690	b8 08 00 00 00	 mov	 eax, 8
  00695	48 6b c0 00	 imul	 rax, rax, 0
  00699	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv265[rsp], rax
  006a1	b9 01 00 00 00	 mov	 ecx, 1
  006a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006ac	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  006b3	48 8b 89 e8 13
	00 00		 mov	 rcx, QWORD PTR [rcx+5096]
  006ba	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  006bf	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  006c7	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR tv265[rsp]
  006cf	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  006d3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207701
  006df	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207702
  006eb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006f0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006f5	41 b9 03 00 00
	00		 mov	 r9d, 3
  006fb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207703
  00702	ba 9d 10 00 00	 mov	 edx, 4253		; 0000109dH
  00707	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207704
  0070e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN31@cnslport_c:
$LN29@cnslport_c:
$LN27@cnslport_c:

; 4254 :             }
; 4255 :         }
; 4256 :     }
; 4257 : 
; 4258 :     return rc;

  00714	8b 44 24 50	 mov	 eax, DWORD PTR rc$[rsp]

; 4259 : }

  00718	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00720	48 33 cc	 xor	 rcx, rsp
  00723	e8 00 00 00 00	 call	 __security_check_cookie
  00728	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  0072f	c3		 ret	 0
cnslport_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
maxcpu$ = 80
c$ = 84
rc$ = 88
tv170 = 92
tv77 = 96
tv128 = 104
tv152 = 112
tv155 = 120
tv180 = 128
msgbuf$ = 136
__$ArrayPad$ = 168
argc$ = 192
argv$ = 200
cmdline$ = 208
maxcpu_cmd PROC

; 4061 : {

$LN22:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@maxcpu_cmd:

; 4062 :     int   rc;
; 4063 :     U16   maxcpu;
; 4064 :     char  msgbuf[32];
; 4065 :     BYTE  c;
; 4066 : 
; 4067 :     UNREFERENCED( cmdline );

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@maxcpu_cmd
$LN7@maxcpu_cmd:

; 4068 : 
; 4069 :     UPPER_ARGV_0( argv );

  0002d	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00036	74 47		 je	 SHORT $LN10@maxcpu_cmd
  00038	b8 08 00 00 00	 mov	 eax, 8
  0003d	48 6b c0 00	 imul	 rax, rax, 0
  00041	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00049	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0004e	74 2f		 je	 SHORT $LN10@maxcpu_cmd
  00050	b8 08 00 00 00	 mov	 eax, 8
  00055	48 6b c0 00	 imul	 rax, rax, 0
  00059	b9 08 00 00 00	 mov	 ecx, 8
  0005e	48 6b c9 00	 imul	 rcx, rcx, 0
  00062	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006a	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0006e	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00076	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0007a	e8 00 00 00 00	 call	 strupper
$LN10@maxcpu_cmd:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 a8		 jne	 SHORT $LN7@maxcpu_cmd

; 4070 : 
; 4071 :     /* Ensure only two arguments passed */
; 4072 :     if (argc > 2)

  00085	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0008d	7e 75		 jle	 SHORT $LN11@maxcpu_cmd

; 4073 :     {
; 4074 :         // "Invalid number of arguments for %s"
; 4075 :         WRMSG( HHC01455, "E", argv[0] );

  0008f	b8 08 00 00 00	 mov	 eax, 8
  00094	48 6b c0 00	 imul	 rax, rax, 0
  00098	48 89 44 24 60	 mov	 QWORD PTR tv77[rsp], rax
  0009d	b9 01 00 00 00	 mov	 ecx, 1
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a8	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000b0	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv77[rsp]
  000b5	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000b9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207578
  000c5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207579
  000d1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000d6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000db	41 b9 03 00 00
	00		 mov	 r9d, 3
  000e1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207580
  000e8	ba eb 0f 00 00	 mov	 edx, 4075		; 00000febH
  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207581
  000f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4076 :         return -1;

  000fa	b8 ff ff ff ff	 mov	 eax, -1
  000ff	e9 38 03 00 00	 jmp	 $LN1@maxcpu_cmd
$LN11@maxcpu_cmd:

; 4077 :     }
; 4078 : 
; 4079 :     /* Display current value */
; 4080 :     if (argc == 1)

  00104	83 bc 24 c0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0010c	0f 85 c3 00 00
	00		 jne	 $LN12@maxcpu_cmd

; 4081 :     {
; 4082 :         MSGBUF( msgbuf, "%d", sysblk.maxcpu );

  00112	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00119	44 8b 88 00 01
	00 00		 mov	 r9d, DWORD PTR [rax+256]
  00120	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207583
  00127	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0012c	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00134	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4083 : 
; 4084 :         // "%-14s: %s"
; 4085 :         WRMSG( HHC02203, "I", argv[0], msgbuf );

  0013a	b8 08 00 00 00	 mov	 eax, 8
  0013f	48 6b c0 00	 imul	 rax, rax, 0
  00143	48 89 44 24 68	 mov	 QWORD PTR tv128[rsp], rax
  00148	b9 01 00 00 00	 mov	 ecx, 1
  0014d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00153	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0015b	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00160	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00168	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv128[rsp]
  0016d	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00171	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00176	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207584
  0017d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00182	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207585
  00189	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0018e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00193	41 b9 03 00 00
	00		 mov	 r9d, 3
  00199	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207586
  001a0	ba f5 0f 00 00	 mov	 edx, 4085		; 00000ff5H
  001a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207587
  001ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4086 : 
; 4087 :         if (sysblk.maxcpu == 0)

  001b2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001b9	83 b8 00 01 00
	00 00		 cmp	 DWORD PTR [rax+256], 0
  001c0	75 0c		 jne	 SHORT $LN13@maxcpu_cmd

; 4088 :             return 1;   // warning?

  001c2	b8 01 00 00 00	 mov	 eax, 1
  001c7	e9 70 02 00 00	 jmp	 $LN1@maxcpu_cmd
  001cc	eb 07		 jmp	 SHORT $LN14@maxcpu_cmd
$LN13@maxcpu_cmd:

; 4089 :         else
; 4090 :             return 0;   // success

  001ce	33 c0		 xor	 eax, eax
  001d0	e9 67 02 00 00	 jmp	 $LN1@maxcpu_cmd
$LN14@maxcpu_cmd:
$LN12@maxcpu_cmd:

; 4091 :     }
; 4092 : 
; 4093 :     /* Parse maximum number of CPUs operand */
; 4094 :     if (sscanf( argv[1], "%hu%c", &maxcpu, &c ) != 1
; 4095 :         || maxcpu > MAX_CPU_ENGS)

  001d5	b8 08 00 00 00	 mov	 eax, 8
  001da	48 6b c0 01	 imul	 rax, rax, 1
  001de	4c 8d 4c 24 54	 lea	 r9, QWORD PTR c$[rsp]
  001e3	4c 8d 44 24 50	 lea	 r8, QWORD PTR maxcpu$[rsp]
  001e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG207592
  001ef	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001f7	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  001fb	e8 00 00 00 00	 call	 sscanf
  00200	83 f8 01	 cmp	 eax, 1
  00203	75 0e		 jne	 SHORT $LN16@maxcpu_cmd
  00205	0f b7 44 24 50	 movzx	 eax, WORD PTR maxcpu$[rsp]
  0020a	83 f8 40	 cmp	 eax, 64			; 00000040H
  0020d	0f 8e 99 00 00
	00		 jle	 $LN15@maxcpu_cmd
$LN16@maxcpu_cmd:

; 4096 :     {
; 4097 :         // "Invalid value %s specified for %s"
; 4098 :         WRMSG( HHC01451, "E", argv[1], argv[0] );

  00213	b8 08 00 00 00	 mov	 eax, 8
  00218	48 6b c0 00	 imul	 rax, rax, 0
  0021c	48 89 44 24 70	 mov	 QWORD PTR tv152[rsp], rax
  00221	b9 08 00 00 00	 mov	 ecx, 8
  00226	48 6b c9 01	 imul	 rcx, rcx, 1
  0022a	48 89 4c 24 78	 mov	 QWORD PTR tv155[rsp], rcx
  0022f	b9 01 00 00 00	 mov	 ecx, 1
  00234	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0023a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00242	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv152[rsp]
  00247	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0024b	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00250	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00258	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv155[rsp]
  0025d	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00261	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00266	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207593
  0026d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00272	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207594
  00279	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0027e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00283	41 b9 03 00 00
	00		 mov	 r9d, 3
  00289	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207595
  00290	ba 02 10 00 00	 mov	 edx, 4098		; 00001002H
  00295	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207596
  0029c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4099 :         return -1;

  002a2	b8 ff ff ff ff	 mov	 eax, -1
  002a7	e9 90 01 00 00	 jmp	 $LN1@maxcpu_cmd
$LN15@maxcpu_cmd:

; 4100 :     }
; 4101 : 
; 4102 :     /* Configure maximum number of online CPUs */
; 4103 :     rc = configure_maxcpu( maxcpu );

  002ac	0f b7 44 24 50	 movzx	 eax, WORD PTR maxcpu$[rsp]
  002b1	8b c8		 mov	 ecx, eax
  002b3	e8 00 00 00 00	 call	 configure_maxcpu
  002b8	89 44 24 58	 mov	 DWORD PTR rc$[rsp], eax

; 4104 : 
; 4105 :     switch (rc)

  002bc	8b 44 24 58	 mov	 eax, DWORD PTR rc$[rsp]
  002c0	89 44 24 5c	 mov	 DWORD PTR tv170[rsp], eax
  002c4	83 7c 24 5c fd	 cmp	 DWORD PTR tv170[rsp], -3
  002c9	0f 84 d1 00 00
	00		 je	 $LN19@maxcpu_cmd
  002cf	83 7c 24 5c 00	 cmp	 DWORD PTR tv170[rsp], 0
  002d4	74 05		 je	 SHORT $LN17@maxcpu_cmd
  002d6	e9 0e 01 00 00	 jmp	 $LN20@maxcpu_cmd
$LN17@maxcpu_cmd:

; 4106 :     {
; 4107 :         case 0:
; 4108 :         {
; 4109 :             if (MLVL( VERBOSE ))

  002db	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002e2	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  002e8	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  002ed	85 c0		 test	 eax, eax
  002ef	0f 84 a6 00 00
	00		 je	 $LN18@maxcpu_cmd

; 4110 :             {
; 4111 :                 MSGBUF( msgbuf, "%d", sysblk.maxcpu );

  002f5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002fc	44 8b 88 00 01
	00 00		 mov	 r9d, DWORD PTR [rax+256]
  00303	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207599
  0030a	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0030f	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00317	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4112 : 
; 4113 :                 // "%-14s set to %s"
; 4114 :                 WRMSG( HHC02204, "I", argv[0], msgbuf );

  0031d	b8 08 00 00 00	 mov	 eax, 8
  00322	48 6b c0 00	 imul	 rax, rax, 0
  00326	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv180[rsp], rax
  0032e	b9 01 00 00 00	 mov	 ecx, 1
  00333	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00339	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00341	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00346	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0034e	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv180[rsp]
  00356	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0035a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0035f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207600
  00366	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0036b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207601
  00372	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00377	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0037c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00382	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207602
  00389	ba 12 10 00 00	 mov	 edx, 4114		; 00001012H
  0038e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207603
  00395	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN18@maxcpu_cmd:

; 4115 :             }
; 4116 :         }
; 4117 :         break;

  0039b	e9 98 00 00 00	 jmp	 $LN8@maxcpu_cmd
$LN19@maxcpu_cmd:

; 4118 : 
; 4119 :         case HERRCPUONL:
; 4120 :         {
; 4121 :             // "CPUs must be offline or stopped"
; 4122 :             WRMSG( HHC02389, "E" );

  003a0	b9 01 00 00 00	 mov	 ecx, 1
  003a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207605
  003b2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207606
  003be	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003c3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003c8	41 b9 03 00 00
	00		 mov	 r9d, 3
  003ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207607
  003d5	ba 1a 10 00 00	 mov	 edx, 4122		; 0000101aH
  003da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207608
  003e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4123 :         }
; 4124 :         break;

  003e7	eb 4f		 jmp	 SHORT $LN8@maxcpu_cmd
$LN20@maxcpu_cmd:

; 4125 : 
; 4126 :         default:
; 4127 :         {
; 4128 :             // "Configure CPU error %d"
; 4129 :             WRMSG( HHC02386, "E", rc );

  003e9	b9 01 00 00 00	 mov	 ecx, 1
  003ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003f4	8b 4c 24 58	 mov	 ecx, DWORD PTR rc$[rsp]
  003f8	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207610
  00403	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00408	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207611
  0040f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00414	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00419	41 b9 03 00 00
	00		 mov	 r9d, 3
  0041f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207612
  00426	ba 21 10 00 00	 mov	 edx, 4129		; 00001021H
  0042b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207613
  00432	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN8@maxcpu_cmd:

; 4130 :         }
; 4131 :     }
; 4132 : 
; 4133 :     return rc;

  00438	8b 44 24 58	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@maxcpu_cmd:

; 4134 : }

  0043c	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00444	48 33 cc	 xor	 rcx, rsp
  00447	e8 00 00 00 00	 call	 __security_check_cookie
  0044c	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00453	c3		 ret	 0
maxcpu_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
numcpu$ = 80
c$ = 84
rc$ = 88
tv184 = 92
tv77 = 96
tv128 = 104
tv150 = 112
tv153 = 120
tv169 = 128
tv194 = 136
msgbuf$ = 144
__$ArrayPad$ = 176
argc$ = 208
argv$ = 216
cmdline$ = 224
numcpu_cmd PROC

; 3976 : {

$LN22:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@numcpu_cmd:

; 3977 :     int   rc;
; 3978 :     U16   numcpu;
; 3979 :     char  msgbuf[32];
; 3980 :     BYTE  c;
; 3981 : 
; 3982 :     UNREFERENCED( cmdline );

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@numcpu_cmd
$LN7@numcpu_cmd:

; 3983 : 
; 3984 :     UPPER_ARGV_0( argv );

  0002d	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00036	74 47		 je	 SHORT $LN10@numcpu_cmd
  00038	b8 08 00 00 00	 mov	 eax, 8
  0003d	48 6b c0 00	 imul	 rax, rax, 0
  00041	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00049	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0004e	74 2f		 je	 SHORT $LN10@numcpu_cmd
  00050	b8 08 00 00 00	 mov	 eax, 8
  00055	48 6b c0 00	 imul	 rax, rax, 0
  00059	b9 08 00 00 00	 mov	 ecx, 8
  0005e	48 6b c9 00	 imul	 rcx, rcx, 0
  00062	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006a	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0006e	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00076	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0007a	e8 00 00 00 00	 call	 strupper
$LN10@numcpu_cmd:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 a8		 jne	 SHORT $LN7@numcpu_cmd

; 3985 : 
; 3986 :     /* Ensure only two arguments passed */
; 3987 :     if (argc > 2)

  00085	83 bc 24 d0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0008d	7e 75		 jle	 SHORT $LN11@numcpu_cmd

; 3988 :     {
; 3989 :         // "Invalid number of arguments for %s"
; 3990 :         WRMSG( HHC01455, "E", argv[0] );

  0008f	b8 08 00 00 00	 mov	 eax, 8
  00094	48 6b c0 00	 imul	 rax, rax, 0
  00098	48 89 44 24 60	 mov	 QWORD PTR tv77[rsp], rax
  0009d	b9 01 00 00 00	 mov	 ecx, 1
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a8	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000b0	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv77[rsp]
  000b5	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000b9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207515
  000c5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207516
  000d1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000d6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000db	41 b9 03 00 00
	00		 mov	 r9d, 3
  000e1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207517
  000e8	ba 96 0f 00 00	 mov	 edx, 3990		; 00000f96H
  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207518
  000f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3991 :         return -1;

  000fa	b8 ff ff ff ff	 mov	 eax, -1
  000ff	e9 cd 03 00 00	 jmp	 $LN1@numcpu_cmd
$LN11@numcpu_cmd:

; 3992 :     }
; 3993 : 
; 3994 :     /* Display current value */
; 3995 :     if (argc == 1)

  00104	83 bc 24 d0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0010c	0f 85 c3 00 00
	00		 jne	 $LN12@numcpu_cmd

; 3996 :     {
; 3997 :         MSGBUF( msgbuf, "%d", sysblk.cpus );

  00112	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00119	44 8b 88 04 01
	00 00		 mov	 r9d, DWORD PTR [rax+260]
  00120	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207520
  00127	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0012c	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00134	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 3998 : 
; 3999 :         // "%-14s: %s"
; 4000 :         WRMSG( HHC02203, "I", argv[0], msgbuf );

  0013a	b8 08 00 00 00	 mov	 eax, 8
  0013f	48 6b c0 00	 imul	 rax, rax, 0
  00143	48 89 44 24 68	 mov	 QWORD PTR tv128[rsp], rax
  00148	b9 01 00 00 00	 mov	 ecx, 1
  0014d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00153	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0015b	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00160	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00168	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv128[rsp]
  0016d	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00171	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00176	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207521
  0017d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00182	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207522
  00189	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0018e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00193	41 b9 03 00 00
	00		 mov	 r9d, 3
  00199	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207523
  001a0	ba a0 0f 00 00	 mov	 edx, 4000		; 00000fa0H
  001a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207524
  001ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4001 : 
; 4002 :         if (sysblk.cpus == 0)

  001b2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001b9	83 b8 04 01 00
	00 00		 cmp	 DWORD PTR [rax+260], 0
  001c0	75 0c		 jne	 SHORT $LN13@numcpu_cmd

; 4003 :             return 1;   // warning?

  001c2	b8 01 00 00 00	 mov	 eax, 1
  001c7	e9 05 03 00 00	 jmp	 $LN1@numcpu_cmd
  001cc	eb 07		 jmp	 SHORT $LN14@numcpu_cmd
$LN13@numcpu_cmd:

; 4004 :         else
; 4005 :             return 0;   // success

  001ce	33 c0		 xor	 eax, eax
  001d0	e9 fc 02 00 00	 jmp	 $LN1@numcpu_cmd
$LN14@numcpu_cmd:
$LN12@numcpu_cmd:

; 4006 :     }
; 4007 : 
; 4008 :     /* Parse maximum number of CPUs operand */
; 4009 :     if (sscanf( argv[1], "%hu%c", &numcpu, &c ) != 1)

  001d5	b8 08 00 00 00	 mov	 eax, 8
  001da	48 6b c0 01	 imul	 rax, rax, 1
  001de	4c 8d 4c 24 54	 lea	 r9, QWORD PTR c$[rsp]
  001e3	4c 8d 44 24 50	 lea	 r8, QWORD PTR numcpu$[rsp]
  001e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG207528
  001ef	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001f7	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  001fb	e8 00 00 00 00	 call	 sscanf
  00200	83 f8 01	 cmp	 eax, 1
  00203	0f 84 99 00 00
	00		 je	 $LN15@numcpu_cmd

; 4010 :     {
; 4011 :         // "Invalid value %s specified for %s"
; 4012 :         WRMSG( HHC01451, "E", argv[1], argv[0] );

  00209	b8 08 00 00 00	 mov	 eax, 8
  0020e	48 6b c0 00	 imul	 rax, rax, 0
  00212	48 89 44 24 70	 mov	 QWORD PTR tv150[rsp], rax
  00217	b9 08 00 00 00	 mov	 ecx, 8
  0021c	48 6b c9 01	 imul	 rcx, rcx, 1
  00220	48 89 4c 24 78	 mov	 QWORD PTR tv153[rsp], rcx
  00225	b9 01 00 00 00	 mov	 ecx, 1
  0022a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00230	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00238	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv150[rsp]
  0023d	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00241	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00246	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0024e	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv153[rsp]
  00253	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00257	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0025c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207529
  00263	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00268	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207530
  0026f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00274	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00279	41 b9 03 00 00
	00		 mov	 r9d, 3
  0027f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207531
  00286	ba ac 0f 00 00	 mov	 edx, 4012		; 00000facH
  0028b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207532
  00292	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4013 :         return -1;

  00298	b8 ff ff ff ff	 mov	 eax, -1
  0029d	e9 2f 02 00 00	 jmp	 $LN1@numcpu_cmd
$LN15@numcpu_cmd:

; 4014 :     }
; 4015 : 
; 4016 :     if (numcpu > sysblk.maxcpu)

  002a2	0f b7 44 24 50	 movzx	 eax, WORD PTR numcpu$[rsp]
  002a7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  002ae	3b 81 00 01 00
	00		 cmp	 eax, DWORD PTR [rcx+256]
  002b4	0f 8e 87 00 00
	00		 jle	 $LN16@numcpu_cmd

; 4017 :     {
; 4018 :         // "Invalid argument %s%s"
; 4019 :         WRMSG( HHC02205, "E", argv[1], "; NUMCPU must be <= MAXCPU" );

  002ba	b8 08 00 00 00	 mov	 eax, 8
  002bf	48 6b c0 01	 imul	 rax, rax, 1
  002c3	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv169[rsp], rax
  002cb	b9 01 00 00 00	 mov	 ecx, 1
  002d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207534
  002dd	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002e2	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002ea	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv169[rsp]
  002f2	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  002f6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207535
  00302	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00307	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207536
  0030e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00313	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00318	41 b9 03 00 00
	00		 mov	 r9d, 3
  0031e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207537
  00325	ba b3 0f 00 00	 mov	 edx, 4019		; 00000fb3H
  0032a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207538
  00331	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4020 :         return -1;

  00337	b8 ff ff ff ff	 mov	 eax, -1
  0033c	e9 90 01 00 00	 jmp	 $LN1@numcpu_cmd
$LN16@numcpu_cmd:

; 4021 :     }
; 4022 : 
; 4023 :     /* Configure number of online CPUs */
; 4024 :     rc = configure_numcpu( numcpu );

  00341	0f b7 44 24 50	 movzx	 eax, WORD PTR numcpu$[rsp]
  00346	8b c8		 mov	 ecx, eax
  00348	e8 00 00 00 00	 call	 configure_numcpu
  0034d	89 44 24 58	 mov	 DWORD PTR rc$[rsp], eax

; 4025 : 
; 4026 :     switch (rc)

  00351	8b 44 24 58	 mov	 eax, DWORD PTR rc$[rsp]
  00355	89 44 24 5c	 mov	 DWORD PTR tv184[rsp], eax
  00359	83 7c 24 5c fd	 cmp	 DWORD PTR tv184[rsp], -3
  0035e	0f 84 d1 00 00
	00		 je	 $LN19@numcpu_cmd
  00364	83 7c 24 5c 00	 cmp	 DWORD PTR tv184[rsp], 0
  00369	74 05		 je	 SHORT $LN17@numcpu_cmd
  0036b	e9 0e 01 00 00	 jmp	 $LN20@numcpu_cmd
$LN17@numcpu_cmd:

; 4027 :     {
; 4028 :         case 0:
; 4029 :         {
; 4030 :             if (MLVL( VERBOSE ))

  00370	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00377	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  0037d	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00382	85 c0		 test	 eax, eax
  00384	0f 84 a6 00 00
	00		 je	 $LN18@numcpu_cmd

; 4031 :             {
; 4032 :                 MSGBUF( msgbuf, "%d", sysblk.cpus );

  0038a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00391	44 8b 88 04 01
	00 00		 mov	 r9d, DWORD PTR [rax+260]
  00398	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207541
  0039f	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  003a4	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  003ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4033 : 
; 4034 :                 // "%-14s set to %s"
; 4035 :                 WRMSG( HHC02204, "I", argv[0], msgbuf );

  003b2	b8 08 00 00 00	 mov	 eax, 8
  003b7	48 6b c0 00	 imul	 rax, rax, 0
  003bb	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv194[rsp], rax
  003c3	b9 01 00 00 00	 mov	 ecx, 1
  003c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003ce	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  003d6	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003db	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003e3	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv194[rsp]
  003eb	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  003ef	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207542
  003fb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00400	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207543
  00407	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0040c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00411	41 b9 03 00 00
	00		 mov	 r9d, 3
  00417	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207544
  0041e	ba c3 0f 00 00	 mov	 edx, 4035		; 00000fc3H
  00423	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207545
  0042a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN18@numcpu_cmd:

; 4036 :             }
; 4037 :         }
; 4038 :         break;

  00430	e9 98 00 00 00	 jmp	 $LN8@numcpu_cmd
$LN19@numcpu_cmd:

; 4039 : 
; 4040 :         case HERRCPUONL:
; 4041 :         {
; 4042 :             // "CPUs must be offline or stopped"
; 4043 :             WRMSG( HHC02389, "E" );

  00435	b9 01 00 00 00	 mov	 ecx, 1
  0043a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00440	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207547
  00447	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0044c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207548
  00453	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00458	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0045d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00463	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207549
  0046a	ba cb 0f 00 00	 mov	 edx, 4043		; 00000fcbH
  0046f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207550
  00476	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4044 :         }
; 4045 :         break;

  0047c	eb 4f		 jmp	 SHORT $LN8@numcpu_cmd
$LN20@numcpu_cmd:

; 4046 : 
; 4047 :         default:
; 4048 :         {
; 4049 :             // "Configure CPU error %d"
; 4050 :             WRMSG( HHC02386, "E", rc );

  0047e	b9 01 00 00 00	 mov	 ecx, 1
  00483	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00489	8b 4c 24 58	 mov	 ecx, DWORD PTR rc$[rsp]
  0048d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00491	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207552
  00498	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0049d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207553
  004a4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004a9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004ae	41 b9 03 00 00
	00		 mov	 r9d, 3
  004b4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207554
  004bb	ba d2 0f 00 00	 mov	 edx, 4050		; 00000fd2H
  004c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207555
  004c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN8@numcpu_cmd:

; 4051 :         }
; 4052 :     }
; 4053 : 
; 4054 :     return rc;

  004cd	8b 44 24 58	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@numcpu_cmd:

; 4055 : }

  004d1	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  004d9	48 33 cc	 xor	 rcx, rsp
  004dc	e8 00 00 00 00	 call	 __security_check_cookie
  004e1	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  004e8	c3		 ret	 0
numcpu_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
netdev$ = 80
tv82 = 88
tv155 = 96
tv84 = 104
tv129 = 112
tv157 = 120
argc$ = 144
argv$ = 152
cmdline$ = 160
netdev_cmd PROC

; 3927 : {

$LN16:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 3928 :     // Specifies the name (or for Windows, the IP or MAC address)
; 3929 :     // of the underlying default host network device to be used for
; 3930 :     // all Hercules communications devices unless overridden on
; 3931 :     // the device statement itself.
; 3932 :     //
; 3933 :     // The default for Linux is '/dev/net/tun'. The default for Apple
; 3934 :     // and FreeBSD is '/dev/tun'.
; 3935 :     //
; 3936 :     // The default for Windows is whatever SoftDevLabs's CTCI-WIN
; 3937 :     // product returns as its default CTCI-WIN host network adapter,
; 3938 :     // which for older versions of CTCI-WIN (3.5.0) is the first
; 3939 :     // network adapter returned by Windows in its adapter binding
; 3940 :     // order or for newer versions of CTCI-WIN (3.6.0) whatever is
; 3941 :     // defined as your default CTCI-WIN host network adapter.
; 3942 : 
; 3943 :     const char* netdev = DEF_NETDEV;

  00015	e8 00 00 00 00	 call	 init_sysblk_netdev
  0001a	48 89 44 24 50	 mov	 QWORD PTR netdev$[rsp], rax
$LN4@netdev_cmd:

; 3944 : 
; 3945 :     UNREFERENCED( cmdline );

  0001f	33 c0		 xor	 eax, eax
  00021	85 c0		 test	 eax, eax
  00023	75 fa		 jne	 SHORT $LN4@netdev_cmd
$LN7@netdev_cmd:

; 3946 : 
; 3947 :     UPPER_ARGV_0( argv );

  00025	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  0002e	74 47		 je	 SHORT $LN8@netdev_cmd
  00030	b8 08 00 00 00	 mov	 eax, 8
  00035	48 6b c0 00	 imul	 rax, rax, 0
  00039	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00041	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00046	74 2f		 je	 SHORT $LN8@netdev_cmd
  00048	b8 08 00 00 00	 mov	 eax, 8
  0004d	48 6b c0 00	 imul	 rax, rax, 0
  00051	b9 08 00 00 00	 mov	 ecx, 8
  00056	48 6b c9 00	 imul	 rcx, rcx, 0
  0005a	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00062	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00066	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0006e	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00072	e8 00 00 00 00	 call	 strupper
$LN8@netdev_cmd:
  00077	33 c0		 xor	 eax, eax
  00079	85 c0		 test	 eax, eax
  0007b	75 a8		 jne	 SHORT $LN7@netdev_cmd

; 3948 : 
; 3949 :     if (argc < 2)

  0007d	83 bc 24 90 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00085	0f 8d aa 00 00
	00		 jge	 $LN9@netdev_cmd

; 3950 :     {
; 3951 :         // "%-14s: %s"
; 3952 :         WRMSG( HHC02203, "I", argv[0], netdev[0] ?  netdev : "(empty)" );

  0008b	b8 01 00 00 00	 mov	 eax, 1
  00090	48 6b c0 00	 imul	 rax, rax, 0
  00094	48 8b 4c 24 50	 mov	 rcx, QWORD PTR netdev$[rsp]
  00099	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0009d	85 c0		 test	 eax, eax
  0009f	74 0c		 je	 SHORT $LN12@netdev_cmd
  000a1	48 8b 44 24 50	 mov	 rax, QWORD PTR netdev$[rsp]
  000a6	48 89 44 24 58	 mov	 QWORD PTR tv82[rsp], rax
  000ab	eb 0c		 jmp	 SHORT $LN13@netdev_cmd
$LN12@netdev_cmd:
  000ad	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207477
  000b4	48 89 44 24 58	 mov	 QWORD PTR tv82[rsp], rax
$LN13@netdev_cmd:
  000b9	b8 08 00 00 00	 mov	 eax, 8
  000be	48 6b c0 00	 imul	 rax, rax, 0
  000c2	48 89 44 24 68	 mov	 QWORD PTR tv84[rsp], rax
  000c7	b9 01 00 00 00	 mov	 ecx, 1
  000cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000d2	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv82[rsp]
  000d7	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000dc	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000e4	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv84[rsp]
  000e9	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000ed	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207478
  000f9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207479
  00105	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0010a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0010f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00115	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207480
  0011c	ba 70 0f 00 00	 mov	 edx, 3952		; 00000f70H
  00121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207481
  00128	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3953 :         return 0;

  0012e	33 c0		 xor	 eax, eax
  00130	e9 72 01 00 00	 jmp	 $LN1@netdev_cmd
$LN9@netdev_cmd:

; 3954 :     }
; 3955 : 
; 3956 :     if (argc > 2)

  00135	83 bc 24 90 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0013d	7e 75		 jle	 SHORT $LN10@netdev_cmd

; 3957 :     {
; 3958 :         // "Invalid number of arguments for %s"
; 3959 :         WRMSG( HHC01455, "E", argv[0] );

  0013f	b8 08 00 00 00	 mov	 eax, 8
  00144	48 6b c0 00	 imul	 rax, rax, 0
  00148	48 89 44 24 70	 mov	 QWORD PTR tv129[rsp], rax
  0014d	b9 01 00 00 00	 mov	 ecx, 1
  00152	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00158	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00160	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv129[rsp]
  00165	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00169	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0016e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207483
  00175	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0017a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207484
  00181	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00186	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0018b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00191	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207485
  00198	ba 77 0f 00 00	 mov	 edx, 3959		; 00000f77H
  0019d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207486
  001a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3960 :         return -1;

  001aa	b8 ff ff ff ff	 mov	 eax, -1
  001af	e9 f3 00 00 00	 jmp	 $LN1@netdev_cmd
$LN10@netdev_cmd:

; 3961 :     }
; 3962 : 
; 3963 :     netdev = TRIM( argv[1] );

  001b4	b8 08 00 00 00	 mov	 eax, 8
  001b9	48 6b c0 01	 imul	 rax, rax, 1
  001bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG207487
  001c4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001cc	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  001d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_trim
  001d6	48 89 44 24 50	 mov	 QWORD PTR netdev$[rsp], rax

; 3964 :     free( sysblk.netdev );

  001db	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001e2	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  001e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 3965 :     sysblk.netdev = strdup( netdev );

  001ec	48 8b 4c 24 50	 mov	 rcx, QWORD PTR netdev$[rsp]
  001f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  001f7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001fe	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 3966 : 
; 3967 :     // "%-14s set to %s"
; 3968 :     WRMSG( HHC02204, "I", argv[0], netdev[0] ?  netdev : "(empty)" );

  00202	b8 01 00 00 00	 mov	 eax, 1
  00207	48 6b c0 00	 imul	 rax, rax, 0
  0020b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR netdev$[rsp]
  00210	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00214	85 c0		 test	 eax, eax
  00216	74 0c		 je	 SHORT $LN14@netdev_cmd
  00218	48 8b 44 24 50	 mov	 rax, QWORD PTR netdev$[rsp]
  0021d	48 89 44 24 60	 mov	 QWORD PTR tv155[rsp], rax
  00222	eb 0c		 jmp	 SHORT $LN15@netdev_cmd
$LN14@netdev_cmd:
  00224	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207488
  0022b	48 89 44 24 60	 mov	 QWORD PTR tv155[rsp], rax
$LN15@netdev_cmd:
  00230	b8 08 00 00 00	 mov	 eax, 8
  00235	48 6b c0 00	 imul	 rax, rax, 0
  00239	48 89 44 24 78	 mov	 QWORD PTR tv157[rsp], rax
  0023e	b9 01 00 00 00	 mov	 ecx, 1
  00243	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00249	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv155[rsp]
  0024e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00253	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0025b	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv157[rsp]
  00260	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00264	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00269	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207489
  00270	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00275	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207490
  0027c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00281	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00286	41 b9 03 00 00
	00		 mov	 r9d, 3
  0028c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207491
  00293	ba 80 0f 00 00	 mov	 edx, 3968		; 00000f80H
  00298	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207492
  0029f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3969 :     return 0;

  002a5	33 c0		 xor	 eax, eax
$LN1@netdev_cmd:

; 3970 : }

  002a7	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  002ae	c3		 ret	 0
netdev_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
argc$ = 48
argv$ = 56
cmdline$ = 64
srvprio_cmd PROC

; 3874 : DEPRECATED_PRIONICE_CMD( srvprio_cmd  );

$LN9:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@srvprio_cm:
  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@srvprio_cm
$LN7@srvprio_cm:
  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN7@srvprio_cm
  0001e	b8 08 00 00 00	 mov	 eax, 8
  00023	48 6b c0 00	 imul	 rax, rax, 0
  00027	48 8b 4c 24 38	 mov	 rcx, QWORD PTR argv$[rsp]
  0002c	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00030	e8 00 00 00 00	 call	 deprecated_cmd
  00035	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00039	c3		 ret	 0
srvprio_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
argc$ = 48
argv$ = 56
cmdline$ = 64
todprio_cmd PROC

; 3873 : DEPRECATED_PRIONICE_CMD( todprio_cmd  );

$LN9:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@todprio_cm:
  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@todprio_cm
$LN7@todprio_cm:
  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN7@todprio_cm
  0001e	b8 08 00 00 00	 mov	 eax, 8
  00023	48 6b c0 00	 imul	 rax, rax, 0
  00027	48 8b 4c 24 38	 mov	 rcx, QWORD PTR argv$[rsp]
  0002c	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00030	e8 00 00 00 00	 call	 deprecated_cmd
  00035	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00039	c3		 ret	 0
todprio_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
argc$ = 48
argv$ = 56
cmdline$ = 64
devprio_cmd PROC

; 3872 : DEPRECATED_PRIONICE_CMD( devprio_cmd  );

$LN9:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@devprio_cm:
  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@devprio_cm
$LN7@devprio_cm:
  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN7@devprio_cm
  0001e	b8 08 00 00 00	 mov	 eax, 8
  00023	48 6b c0 00	 imul	 rax, rax, 0
  00027	48 8b 4c 24 38	 mov	 rcx, QWORD PTR argv$[rsp]
  0002c	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00030	e8 00 00 00 00	 call	 deprecated_cmd
  00035	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00039	c3		 ret	 0
devprio_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
argc$ = 48
argv$ = 56
cmdline$ = 64
cpuprio_cmd PROC

; 3871 : DEPRECATED_PRIONICE_CMD( cpuprio_cmd  );

$LN9:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@cpuprio_cm:
  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@cpuprio_cm
$LN7@cpuprio_cm:
  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN7@cpuprio_cm
  0001e	b8 08 00 00 00	 mov	 eax, 8
  00023	48 6b c0 00	 imul	 rax, rax, 0
  00027	48 8b 4c 24 38	 mov	 rcx, QWORD PTR argv$[rsp]
  0002c	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00030	e8 00 00 00 00	 call	 deprecated_cmd
  00035	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00039	c3		 ret	 0
cpuprio_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
argc$ = 48
argv$ = 56
cmdline$ = 64
hercprio_cmd PROC

; 3870 : DEPRECATED_PRIONICE_CMD( hercprio_cmd );

$LN9:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@hercprio_c:
  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@hercprio_c
$LN7@hercprio_c:
  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN7@hercprio_c
  0001e	b8 08 00 00 00	 mov	 eax, 8
  00023	48 6b c0 00	 imul	 rax, rax, 0
  00027	48 8b 4c 24 38	 mov	 rcx, QWORD PTR argv$[rsp]
  0002c	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00030	e8 00 00 00 00	 call	 deprecated_cmd
  00035	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00039	c3		 ret	 0
hercprio_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
argc$ = 48
argv$ = 56
cmdline$ = 64
hercnice_cmd PROC

; 3869 : DEPRECATED_PRIONICE_CMD( hercnice_cmd );

$LN9:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@hercnice_c:
  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@hercnice_c
$LN7@hercnice_c:
  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN7@hercnice_c
  0001e	b8 08 00 00 00	 mov	 eax, 8
  00023	48 6b c0 00	 imul	 rax, rax, 0
  00027	48 8b 4c 24 38	 mov	 rcx, QWORD PTR argv$[rsp]
  0002c	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00030	e8 00 00 00 00	 call	 deprecated_cmd
  00035	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00039	c3		 ret	 0
hercnice_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv65 = 80
argv0$ = 112
deprecated_cmd PROC

; 3854 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 3855 :     // "Command '%s' is deprecated%s"
; 3856 :     WRMSG( HHC02256, "W", STR2UPPER( argv0 ), " and ignored." );

  00009	48 8b 54 24 70	 mov	 rdx, QWORD PTR argv0$[rsp]
  0000e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR argv0$[rsp]
  00013	e8 00 00 00 00	 call	 strupper
  00018	48 89 44 24 50	 mov	 QWORD PTR tv65[rsp], rax
  0001d	b9 01 00 00 00	 mov	 ecx, 1
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207370
  0002f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00034	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv65[rsp]
  00039	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207371
  00045	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207372
  00051	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00056	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00061	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207373
  00068	ba 10 0f 00 00	 mov	 edx, 3856		; 00000f10H
  0006d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207374
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3857 :     return 0; // (return success to prevent error message)

  0007a	33 c0		 xor	 eax, eax

; 3858 : }

  0007c	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00080	c3		 ret	 0
deprecated_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
f$ = 80
shiftsize$1 = 88
c$ = 96
rc$ = 100
i$ = 104
tv133 = 108
xpndsize$ = 112
lockreq$ = 120
locktype$ = 124
tv128 = 128
sizeof_RADR$2 = 136
tv79 = 144
tv82 = 152
tv157 = 160
tv160 = 168
tv185 = 176
tv188 = 184
q_argv$ = 192
check$ = 208
__$ArrayPad$ = 224
argc$ = 256
argv$ = 264
cmdline$ = 272
xpndsize_cmd PROC

; 3709 : {

$LN41:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 3710 : U64     xpndsize;
; 3711 : BYTE    f = ' ', c = '\0';

  00027	c6 44 24 50 20	 mov	 BYTE PTR f$[rsp], 32	; 00000020H
  0002c	c6 44 24 60 00	 mov	 BYTE PTR c$[rsp], 0

; 3712 : int     rc;
; 3713 : u_int   i;
; 3714 : char    check[16];
; 3715 : char   *q_argv[2] = { "qstor", "xpnd" };

  00031	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207312
  00038	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR q_argv$[rsp], rax
  00040	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207314
  00047	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR q_argv$[rsp+8], rax

; 3716 : u_int   lockreq = 0;

  0004f	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR lockreq$[rsp], 0

; 3717 : u_int   locktype = 0;

  00057	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR locktype$[rsp], 0
$LN4@xpndsize_c:

; 3718 : 
; 3719 :     UNREFERENCED(cmdline);

  0005f	33 c0		 xor	 eax, eax
  00061	85 c0		 test	 eax, eax
  00063	75 fa		 jne	 SHORT $LN4@xpndsize_c

; 3720 : 
; 3721 :     if ( argc == 1 )

  00065	83 bc 24 00 01
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0006d	75 1e		 jne	 SHORT $LN10@xpndsize_c

; 3722 :     {
; 3723 :         return qstor_cmd( 2, q_argv, "qstor xpnd" );

  0006f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207316
  00076	48 8d 94 24 c0
	00 00 00	 lea	 rdx, QWORD PTR q_argv$[rsp]
  0007e	b9 02 00 00 00	 mov	 ecx, 2
  00083	e8 00 00 00 00	 call	 qstor_cmd
  00088	e9 9b 05 00 00	 jmp	 $LN1@xpndsize_c
$LN10@xpndsize_c:

; 3724 :     }
; 3725 : 
; 3726 :     /* Parse expanded storage size operand */
; 3727 :     rc = sscanf(argv[1], "%"SCNu64"%c%c", &xpndsize, &f, &c);

  0008d	b8 08 00 00 00	 mov	 eax, 8
  00092	48 6b c0 01	 imul	 rax, rax, 1
  00096	48 8d 4c 24 60	 lea	 rcx, QWORD PTR c$[rsp]
  0009b	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000a0	4c 8d 4c 24 50	 lea	 r9, QWORD PTR f$[rsp]
  000a5	4c 8d 44 24 70	 lea	 r8, QWORD PTR xpndsize$[rsp]
  000aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG207317
  000b1	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000b9	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000bd	e8 00 00 00 00	 call	 sscanf
  000c2	89 44 24 64	 mov	 DWORD PTR rc$[rsp], eax

; 3728 : 
; 3729 :     if (rc > 2 )

  000c6	83 7c 24 64 02	 cmp	 DWORD PTR rc$[rsp], 2
  000cb	0f 8e a5 00 00
	00		 jle	 $LN11@xpndsize_c

; 3730 :     {
; 3731 :         // "Invalid value %s specified for %s"
; 3732 :         WRMSG( HHC01451, "E", argv[1], argv[0] );

  000d1	b8 08 00 00 00	 mov	 eax, 8
  000d6	48 6b c0 00	 imul	 rax, rax, 0
  000da	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv79[rsp], rax
  000e2	b9 08 00 00 00	 mov	 ecx, 8
  000e7	48 6b c9 01	 imul	 rcx, rcx, 1
  000eb	48 89 8c 24 98
	00 00 00	 mov	 QWORD PTR tv82[rsp], rcx
  000f3	b9 01 00 00 00	 mov	 ecx, 1
  000f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000fe	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00106	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tv79[rsp]
  0010e	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00112	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00117	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0011f	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR tv82[rsp]
  00127	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0012b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00130	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207319
  00137	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207320
  00143	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00148	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00153	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207321
  0015a	ba 94 0e 00 00	 mov	 edx, 3732		; 00000e94H
  0015f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207322
  00166	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3733 :         return -1;

  0016c	b8 ff ff ff ff	 mov	 eax, -1
  00171	e9 b2 04 00 00	 jmp	 $LN1@xpndsize_c
$LN11@xpndsize_c:

; 3734 :     }
; 3735 : 
; 3736 :     /* Handle size suffix and suffix overflow */
; 3737 :     {
; 3738 :         U64 shiftsize = xpndsize;

  00176	48 8b 44 24 70	 mov	 rax, QWORD PTR xpndsize$[rsp]
  0017b	48 89 44 24 58	 mov	 QWORD PTR shiftsize$1[rsp], rax

; 3739 :         size_t sizeof_RADR = (ARCH_900_IDX == sysblk.arch_mode) ? sizeof(U64)

  00180	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00187	83 b8 88 00 00
	00 02		 cmp	 DWORD PTR [rax+136], 2
  0018e	75 0e		 jne	 SHORT $LN38@xpndsize_c
  00190	48 c7 84 24 80
	00 00 00 08 00
	00 00		 mov	 QWORD PTR tv128[rsp], 8
  0019c	eb 0c		 jmp	 SHORT $LN39@xpndsize_c
$LN38@xpndsize_c:
  0019e	48 c7 84 24 80
	00 00 00 04 00
	00 00		 mov	 QWORD PTR tv128[rsp], 4
$LN39@xpndsize_c:
  001aa	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv128[rsp]
  001b2	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR sizeof_RADR$2[rsp], rax

; 3740 :                                                             : sizeof(U32);
; 3741 :         if ( rc == 2 )

  001ba	83 7c 24 64 02	 cmp	 DWORD PTR rc$[rsp], 2
  001bf	0f 85 f0 00 00
	00		 jne	 $LN12@xpndsize_c

; 3742 :         {
; 3743 :             switch (toupper(f))

  001c5	0f b6 44 24 50	 movzx	 eax, BYTE PTR f$[rsp]
  001ca	8b c8		 mov	 ecx, eax
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_toupper
  001d2	89 44 24 6c	 mov	 DWORD PTR tv133[rsp], eax
  001d6	8b 44 24 6c	 mov	 eax, DWORD PTR tv133[rsp]
  001da	83 e8 42	 sub	 eax, 66			; 00000042H
  001dd	89 44 24 6c	 mov	 DWORD PTR tv133[rsp], eax
  001e1	83 7c 24 6c 12	 cmp	 DWORD PTR tv133[rsp], 18
  001e6	0f 87 b7 00 00
	00		 ja	 $LN22@xpndsize_c
  001ec	48 63 44 24 6c	 movsxd	 rax, DWORD PTR tv133[rsp]
  001f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  001f8	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN40@xpndsize_c[rcx+rax*4]
  001ff	48 03 c1	 add	 rax, rcx
  00202	ff e0		 jmp	 rax
$LN13@xpndsize_c:

; 3744 :             {
; 3745 :             case 'B':
; 3746 :                 shiftsize >>= SHIFT_MEBIBYTE;

  00204	48 8b 44 24 58	 mov	 rax, QWORD PTR shiftsize$1[rsp]
  00209	48 c1 e8 14	 shr	 rax, 20
  0020d	48 89 44 24 58	 mov	 QWORD PTR shiftsize$1[rsp], rax

; 3747 :                 if (xpndsize & 0x00000000000FFFFFULL)

  00212	48 8b 44 24 70	 mov	 rax, QWORD PTR xpndsize$[rsp]
  00217	48 25 ff ff 0f
	00		 and	 rax, 1048575		; 000fffffH
  0021d	48 85 c0	 test	 rax, rax
  00220	74 0d		 je	 SHORT $LN14@xpndsize_c

; 3748 :                     ++shiftsize;

  00222	48 8b 44 24 58	 mov	 rax, QWORD PTR shiftsize$1[rsp]
  00227	48 ff c0	 inc	 rax
  0022a	48 89 44 24 58	 mov	 QWORD PTR shiftsize$1[rsp], rax
$LN14@xpndsize_c:

; 3749 :                 break;

  0022f	e9 81 00 00 00	 jmp	 $LN5@xpndsize_c
$LN15@xpndsize_c:

; 3750 :             case 'K':
; 3751 :                 shiftsize >>= SHIFT_MEBIBYTE - SHIFT_KIBIBYTE;

  00234	48 8b 44 24 58	 mov	 rax, QWORD PTR shiftsize$1[rsp]
  00239	48 c1 e8 0a	 shr	 rax, 10
  0023d	48 89 44 24 58	 mov	 QWORD PTR shiftsize$1[rsp], rax

; 3752 :                 if (xpndsize & 0x00000000000003FFULL)

  00242	48 8b 44 24 70	 mov	 rax, QWORD PTR xpndsize$[rsp]
  00247	48 25 ff 03 00
	00		 and	 rax, 1023		; 000003ffH
  0024d	48 85 c0	 test	 rax, rax
  00250	74 0d		 je	 SHORT $LN16@xpndsize_c

; 3753 :                     ++shiftsize;

  00252	48 8b 44 24 58	 mov	 rax, QWORD PTR shiftsize$1[rsp]
  00257	48 ff c0	 inc	 rax
  0025a	48 89 44 24 58	 mov	 QWORD PTR shiftsize$1[rsp], rax
$LN16@xpndsize_c:

; 3754 :                 break;

  0025f	eb 54		 jmp	 SHORT $LN5@xpndsize_c
$LN17@xpndsize_c:

; 3755 :             case 'M':
; 3756 :                 break;

  00261	eb 52		 jmp	 SHORT $LN5@xpndsize_c
$LN18@xpndsize_c:

; 3757 :             case 'G':
; 3758 :                 shiftsize <<= SHIFT_GIBIBYTE - SHIFT_MEBIBYTE;

  00263	48 8b 44 24 58	 mov	 rax, QWORD PTR shiftsize$1[rsp]
  00268	48 c1 e0 0a	 shl	 rax, 10
  0026c	48 89 44 24 58	 mov	 QWORD PTR shiftsize$1[rsp], rax

; 3759 :                 break;

  00271	eb 42		 jmp	 SHORT $LN5@xpndsize_c
$LN19@xpndsize_c:

; 3760 :             case 'T':
; 3761 :                 shiftsize <<= SHIFT_TEBIBYTE - SHIFT_MEBIBYTE;

  00273	48 8b 44 24 58	 mov	 rax, QWORD PTR shiftsize$1[rsp]
  00278	48 c1 e0 14	 shl	 rax, 20
  0027c	48 89 44 24 58	 mov	 QWORD PTR shiftsize$1[rsp], rax

; 3762 :                 break;

  00281	eb 32		 jmp	 SHORT $LN5@xpndsize_c
$LN20@xpndsize_c:

; 3763 :             case 'P':
; 3764 :                 shiftsize <<= SHIFT_PEBIBYTE - SHIFT_MEBIBYTE;

  00283	48 8b 44 24 58	 mov	 rax, QWORD PTR shiftsize$1[rsp]
  00288	48 c1 e0 1e	 shl	 rax, 30
  0028c	48 89 44 24 58	 mov	 QWORD PTR shiftsize$1[rsp], rax

; 3765 :                 break;

  00291	eb 22		 jmp	 SHORT $LN5@xpndsize_c
$LN21@xpndsize_c:

; 3766 :             case 'E':
; 3767 :                 shiftsize <<= SHIFT_EXBIBYTE - SHIFT_MEBIBYTE;

  00293	48 8b 44 24 58	 mov	 rax, QWORD PTR shiftsize$1[rsp]
  00298	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  0029c	48 89 44 24 58	 mov	 QWORD PTR shiftsize$1[rsp], rax

; 3768 :                 break;

  002a1	eb 12		 jmp	 SHORT $LN5@xpndsize_c
$LN22@xpndsize_c:

; 3769 :             default:
; 3770 :                 /* Force error */
; 3771 :                 shiftsize = 0;

  002a3	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR shiftsize$1[rsp], 0

; 3772 :                 xpndsize = 1;

  002ac	48 c7 44 24 70
	01 00 00 00	 mov	 QWORD PTR xpndsize$[rsp], 1
$LN5@xpndsize_c:
$LN12@xpndsize_c:

; 3773 :                 break;
; 3774 :             }
; 3775 :         }
; 3776 : 
; 3777 :         if (0
; 3778 :             || (xpndsize && !shiftsize)               /* Overflow occurred */
; 3779 :             || (1
; 3780 :                 && sizeof_RADR <= sizeof(U32)         /* 32-bit addressing */
; 3781 :                 && shiftsize > 0x0000000000001000ULL  /* 4G maximum        */
; 3782 :                 )
; 3783 :             || (1

  002b5	33 c0		 xor	 eax, eax
  002b7	85 c0		 test	 eax, eax
  002b9	75 5c		 jne	 SHORT $LN24@xpndsize_c
  002bb	48 83 7c 24 70
	00		 cmp	 QWORD PTR xpndsize$[rsp], 0
  002c1	74 08		 je	 SHORT $LN25@xpndsize_c
  002c3	48 83 7c 24 58
	00		 cmp	 QWORD PTR shiftsize$1[rsp], 0
  002c9	74 4c		 je	 SHORT $LN24@xpndsize_c
$LN25@xpndsize_c:
  002cb	33 c0		 xor	 eax, eax
  002cd	83 f8 01	 cmp	 eax, 1
  002d0	74 16		 je	 SHORT $LN26@xpndsize_c
  002d2	48 83 bc 24 88
	00 00 00 04	 cmp	 QWORD PTR sizeof_RADR$2[rsp], 4
  002db	77 0b		 ja	 SHORT $LN26@xpndsize_c
  002dd	48 81 7c 24 58
	00 10 00 00	 cmp	 QWORD PTR shiftsize$1[rsp], 4096 ; 00001000H
  002e6	77 2f		 ja	 SHORT $LN24@xpndsize_c
$LN26@xpndsize_c:
  002e8	33 c0		 xor	 eax, eax
  002ea	83 f8 01	 cmp	 eax, 1
  002ed	0f 84 c9 00 00
	00		 je	 $LN23@xpndsize_c
  002f3	48 83 bc 24 88
	00 00 00 08	 cmp	 QWORD PTR sizeof_RADR$2[rsp], 8
  002fc	0f 82 ba 00 00
	00		 jb	 $LN23@xpndsize_c
  00302	48 b8 00 00 00
	00 00 10 00 00	 mov	 rax, 17592186044416	; 0000100000000000H
  0030c	48 39 44 24 58	 cmp	 QWORD PTR shiftsize$1[rsp], rax
  00311	0f 82 a5 00 00
	00		 jb	 $LN23@xpndsize_c
$LN24@xpndsize_c:

; 3784 :                 && sizeof_RADR >= sizeof(U64)         /* 32-bit addressing */
; 3785 :                 && shiftsize >= 0x0000100000000000ULL /* 16E-1 maximum     */
; 3786 :                 )
; 3787 :         )
; 3788 :         {
; 3789 :             // "Invalid value %s specified for %s"
; 3790 :             WRMSG( HHC01451, "E", argv[1], argv[0]);

  00317	b8 08 00 00 00	 mov	 eax, 8
  0031c	48 6b c0 00	 imul	 rax, rax, 0
  00320	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv157[rsp], rax
  00328	b9 08 00 00 00	 mov	 ecx, 8
  0032d	48 6b c9 01	 imul	 rcx, rcx, 1
  00331	48 89 8c 24 a8
	00 00 00	 mov	 QWORD PTR tv160[rsp], rcx
  00339	b9 01 00 00 00	 mov	 ecx, 1
  0033e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00344	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0034c	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR tv157[rsp]
  00354	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00358	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0035d	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00365	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR tv160[rsp]
  0036d	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00371	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00376	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207338
  0037d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00382	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207339
  00389	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0038e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00393	41 b9 03 00 00
	00		 mov	 r9d, 3
  00399	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207340
  003a0	ba ce 0e 00 00	 mov	 edx, 3790		; 00000eceH
  003a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207341
  003ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3791 :             return (-1);

  003b2	b8 ff ff ff ff	 mov	 eax, -1
  003b7	e9 6c 02 00 00	 jmp	 $LN1@xpndsize_c
$LN23@xpndsize_c:

; 3792 :         }
; 3793 : 
; 3794 :         xpndsize = shiftsize;

  003bc	48 8b 44 24 58	 mov	 rax, QWORD PTR shiftsize$1[rsp]
  003c1	48 89 44 24 70	 mov	 QWORD PTR xpndsize$[rsp], rax

; 3795 :     }
; 3796 : 
; 3797 :     /* Process options */
; 3798 :     for (i = 2; (int)i < argc; ++i)

  003c6	c7 44 24 68 02
	00 00 00	 mov	 DWORD PTR i$[rsp], 2
  003ce	eb 0a		 jmp	 SHORT $LN9@xpndsize_c
$LN7@xpndsize_c:
  003d0	8b 44 24 68	 mov	 eax, DWORD PTR i$[rsp]
  003d4	ff c0		 inc	 eax
  003d6	89 44 24 68	 mov	 DWORD PTR i$[rsp], eax
$LN9@xpndsize_c:
  003da	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  003e1	39 44 24 68	 cmp	 DWORD PTR i$[rsp], eax
  003e5	0f 8d fb 00 00
	00		 jge	 $LN8@xpndsize_c

; 3799 :     {
; 3800 :         strnupper(check, argv[i], (u_int)sizeof(check));

  003eb	8b 44 24 68	 mov	 eax, DWORD PTR i$[rsp]
  003ef	41 b8 10 00 00
	00		 mov	 r8d, 16
  003f5	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003fd	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00401	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR check$[rsp]
  00409	e8 00 00 00 00	 call	 strnupper

; 3801 : 
; 3802 : #if 0   // Interim - Storage is not locked yet in config.c
; 3803 :         if (strabbrev("LOCKED", check, 1) && xpndsize)
; 3804 :         {
; 3805 :             lockreq = 1;
; 3806 :             locktype = 1;
; 3807 :         }
; 3808 :         else
; 3809 : #endif
; 3810 :         if (strabbrev("UNLOCKED", check, 3))

  0040e	41 b8 03 00 00
	00		 mov	 r8d, 3
  00414	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR check$[rsp]
  0041c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207344
  00423	e8 00 00 00 00	 call	 strabbrev
  00428	85 c0		 test	 eax, eax
  0042a	74 15		 je	 SHORT $LN27@xpndsize_c

; 3811 :         {
; 3812 :             lockreq = 1;

  0042c	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR lockreq$[rsp], 1

; 3813 :             locktype = 0;

  00434	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR locktype$[rsp], 0

; 3814 :         }

  0043c	e9 a0 00 00 00	 jmp	 $LN28@xpndsize_c
$LN27@xpndsize_c:

; 3815 :         else
; 3816 :         {
; 3817 :             // "Invalid value %s specified for %s"
; 3818 :             WRMSG( HHC01451, "E", argv[i], argv[0] );

  00441	b8 08 00 00 00	 mov	 eax, 8
  00446	48 6b c0 00	 imul	 rax, rax, 0
  0044a	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv185[rsp], rax
  00452	8b 4c 24 68	 mov	 ecx, DWORD PTR i$[rsp]
  00456	48 89 8c 24 b8
	00 00 00	 mov	 QWORD PTR tv188[rsp], rcx
  0045e	b9 01 00 00 00	 mov	 ecx, 1
  00463	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00469	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00471	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR tv185[rsp]
  00479	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0047d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00482	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0048a	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR tv188[rsp]
  00492	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00496	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0049b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207345
  004a2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207346
  004ae	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004b3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004b8	41 b9 03 00 00
	00		 mov	 r9d, 3
  004be	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207347
  004c5	ba ea 0e 00 00	 mov	 edx, 3818		; 00000eeaH
  004ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207348
  004d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3819 :             return -1;

  004d7	b8 ff ff ff ff	 mov	 eax, -1
  004dc	e9 47 01 00 00	 jmp	 $LN1@xpndsize_c
$LN28@xpndsize_c:

; 3820 :         }
; 3821 :     }

  004e1	e9 ea fe ff ff	 jmp	 $LN7@xpndsize_c
$LN8@xpndsize_c:

; 3822 :     if (!xpndsize)

  004e6	48 83 7c 24 70
	00		 cmp	 QWORD PTR xpndsize$[rsp], 0
  004ec	75 1f		 jne	 SHORT $LN29@xpndsize_c

; 3823 :         sysblk.lock_xpndstor = 0;

  004ee	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  004f5	8b 80 b8 00 00
	00		 mov	 eax, DWORD PTR [rax+184]
  004fb	83 e0 fe	 and	 eax, -2			; fffffffeH
  004fe	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00505	89 81 b8 00 00
	00		 mov	 DWORD PTR [rcx+184], eax
  0050b	eb 2f		 jmp	 SHORT $LN30@xpndsize_c
$LN29@xpndsize_c:

; 3824 :     else if (lockreq)

  0050d	83 7c 24 78 00	 cmp	 DWORD PTR lockreq$[rsp], 0
  00512	74 28		 je	 SHORT $LN31@xpndsize_c

; 3825 :         sysblk.lock_xpndstor = locktype;

  00514	8b 44 24 7c	 mov	 eax, DWORD PTR locktype$[rsp]
  00518	83 e0 01	 and	 eax, 1
  0051b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00522	8b 89 b8 00 00
	00		 mov	 ecx, DWORD PTR [rcx+184]
  00528	83 e1 fe	 and	 ecx, -2			; fffffffeH
  0052b	0b c8		 or	 ecx, eax
  0052d	8b c1		 mov	 eax, ecx
  0052f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00536	89 81 b8 00 00
	00		 mov	 DWORD PTR [rcx+184], eax
$LN31@xpndsize_c:
$LN30@xpndsize_c:

; 3826 : 
; 3827 :     rc = configure_xstorage( xpndsize );

  0053c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR xpndsize$[rsp]
  00541	e8 00 00 00 00	 call	 configure_xstorage
  00546	89 44 24 64	 mov	 DWORD PTR rc$[rsp], eax

; 3828 :     if (rc >= 0)

  0054a	83 7c 24 64 00	 cmp	 DWORD PTR rc$[rsp], 0
  0054f	7c 34		 jl	 SHORT $LN32@xpndsize_c

; 3829 :     {
; 3830 :         if (MLVL( VERBOSE ))

  00551	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00558	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  0055e	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00563	85 c0		 test	 eax, eax
  00565	74 19		 je	 SHORT $LN34@xpndsize_c

; 3831 :             qstor_cmd( 2, q_argv, "qstor xpnd" );

  00567	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207355
  0056e	48 8d 94 24 c0
	00 00 00	 lea	 rdx, QWORD PTR q_argv$[rsp]
  00576	b9 02 00 00 00	 mov	 ecx, 2
  0057b	e8 00 00 00 00	 call	 qstor_cmd
$LN34@xpndsize_c:

; 3832 :     }

  00580	e9 9f 00 00 00	 jmp	 $LN33@xpndsize_c
$LN32@xpndsize_c:

; 3833 :     else
; 3834 :     {
; 3835 :         if (HERRCPUONL == rc)

  00585	83 7c 24 64 fd	 cmp	 DWORD PTR rc$[rsp], -3
  0058a	75 49		 jne	 SHORT $LN35@xpndsize_c

; 3836 :         {
; 3837 :             // "CPUs must be offline or stopped"
; 3838 :             WRMSG( HHC02389, "E" );

  0058c	b9 01 00 00 00	 mov	 ecx, 1
  00591	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00597	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207358
  0059e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207359
  005aa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005af	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005b4	41 b9 03 00 00
	00		 mov	 r9d, 3
  005ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207360
  005c1	ba fe 0e 00 00	 mov	 edx, 3838		; 00000efeH
  005c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207361
  005cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3839 :         }

  005d3	eb 4f		 jmp	 SHORT $LN36@xpndsize_c
$LN35@xpndsize_c:

; 3840 :         else
; 3841 :         {
; 3842 :             // "Configure expanded storage error %d"
; 3843 :             WRMSG( HHC02387, "E", rc );

  005d5	b9 01 00 00 00	 mov	 ecx, 1
  005da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005e0	8b 4c 24 64	 mov	 ecx, DWORD PTR rc$[rsp]
  005e4	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  005e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207362
  005ef	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207363
  005fb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00600	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00605	41 b9 03 00 00
	00		 mov	 r9d, 3
  0060b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207364
  00612	ba 03 0f 00 00	 mov	 edx, 3843		; 00000f03H
  00617	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207365
  0061e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN36@xpndsize_c:
$LN33@xpndsize_c:

; 3844 :         }
; 3845 :     }
; 3846 : 
; 3847 :     return rc;

  00624	8b 44 24 64	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@xpndsize_c:

; 3848 : }

  00628	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00630	48 33 cc	 xor	 rcx, rsp
  00633	e8 00 00 00 00	 call	 __security_check_cookie
  00638	48 81 c4 f8 00
	00 00		 add	 rsp, 248		; 000000f8H
  0063f	c3		 ret	 0
$LN40@xpndsize_c:
  00640	00 00 00 00	 DD	 $LN13@xpndsize_c
  00644	00 00 00 00	 DD	 $LN22@xpndsize_c
  00648	00 00 00 00	 DD	 $LN22@xpndsize_c
  0064c	00 00 00 00	 DD	 $LN21@xpndsize_c
  00650	00 00 00 00	 DD	 $LN22@xpndsize_c
  00654	00 00 00 00	 DD	 $LN18@xpndsize_c
  00658	00 00 00 00	 DD	 $LN22@xpndsize_c
  0065c	00 00 00 00	 DD	 $LN22@xpndsize_c
  00660	00 00 00 00	 DD	 $LN22@xpndsize_c
  00664	00 00 00 00	 DD	 $LN15@xpndsize_c
  00668	00 00 00 00	 DD	 $LN22@xpndsize_c
  0066c	00 00 00 00	 DD	 $LN17@xpndsize_c
  00670	00 00 00 00	 DD	 $LN22@xpndsize_c
  00674	00 00 00 00	 DD	 $LN22@xpndsize_c
  00678	00 00 00 00	 DD	 $LN20@xpndsize_c
  0067c	00 00 00 00	 DD	 $LN22@xpndsize_c
  00680	00 00 00 00	 DD	 $LN22@xpndsize_c
  00684	00 00 00 00	 DD	 $LN22@xpndsize_c
  00688	00 00 00 00	 DD	 $LN19@xpndsize_c
xpndsize_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
lock_mainstor$ = 80
mainsize_numpages$ = 88
f$ = 96
rc$ = 100
suffix_oflow_mask$1 = 104
c$ = 112
i$ = 116
tv142 = 120
mainsize$ = 128
qstor_cmdline$ = 136
tv91 = 144
tv94 = 152
tv170 = 160
tv173 = 168
tv191 = 176
tv194 = 184
tv219 = 192
tv222 = 200
qstor_args$ = 208
lockopt$ = 224
__$ArrayPad$ = 240
argc$ = 272
argv$ = 280
cmdline$ = 288
mainsize_cmd PROC

; 3536 : {

$LN41:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 3537 :     //  "MAINSIZE nnn[x]" --> 'nnn' = number, 'x' optional size suffix
; 3538 :     //
; 3539 :     //  If size suffix not given then 'nnn' is number of megabytes.
; 3540 :     //
; 3541 :     //  The value we calculate and pass to the configure_storage()
; 3542 :     //  function however, is always specified in number of 4K pages.
; 3543 : 
; 3544 :     char*  qstor_cmdline  =    "qstor    main"  ;

  00027	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207222
  0002e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR qstor_cmdline$[rsp], rax

; 3545 :     char*  qstor_args[2]  =  { "qstor", "main" };

  00036	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207224
  0003d	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR qstor_args$[rsp], rax
  00045	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG207226
  0004c	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR qstor_args$[rsp+8], rax

; 3546 : 
; 3547 :     U64    mainsize;                // (the 'nnn' value they gave us)
; 3548 :     U64    mainsize_numpages;       // (calculated from nnn + suffix)
; 3549 : 
; 3550 :     BYTE   f = ' ';                 // (optional size suffix)

  00054	c6 44 24 60 20	 mov	 BYTE PTR f$[rsp], 32	; 00000020H

; 3551 :     BYTE   c = '\0';                // (work for sscanf call)

  00059	c6 44 24 70 00	 mov	 BYTE PTR c$[rsp], 0

; 3552 : 
; 3553 :     char   lockopt[16];             // (LOCKED/UNLOCKED work)
; 3554 :     bool   lock_mainstor = false;   // (true == "LOCKED" given)

  0005e	c6 44 24 50 00	 mov	 BYTE PTR lock_mainstor$[rsp], 0
$LN4@mainsize_c:

; 3555 :     int    i, rc;                   // (work)
; 3556 : 
; 3557 :     UNREFERENCED( cmdline );

  00063	33 c0		 xor	 eax, eax
  00065	85 c0		 test	 eax, eax
  00067	75 fa		 jne	 SHORT $LN4@mainsize_c
$LN7@mainsize_c:

; 3558 :     UPPER_ARGV_0( argv );

  00069	48 83 bc 24 18
	01 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00072	74 47		 je	 SHORT $LN13@mainsize_c
  00074	b8 08 00 00 00	 mov	 eax, 8
  00079	48 6b c0 00	 imul	 rax, rax, 0
  0007d	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00085	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0008a	74 2f		 je	 SHORT $LN13@mainsize_c
  0008c	b8 08 00 00 00	 mov	 eax, 8
  00091	48 6b c0 00	 imul	 rax, rax, 0
  00095	b9 08 00 00 00	 mov	 ecx, 8
  0009a	48 6b c9 00	 imul	 rcx, rcx, 0
  0009e	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  000a6	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  000aa	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000b2	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  000b6	e8 00 00 00 00	 call	 strupper
$LN13@mainsize_c:
  000bb	33 c0		 xor	 eax, eax
  000bd	85 c0		 test	 eax, eax
  000bf	75 a8		 jne	 SHORT $LN7@mainsize_c

; 3559 : 
; 3560 :     if (argc < 2)

  000c1	83 bc 24 10 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000c9	7d 1f		 jge	 SHORT $LN14@mainsize_c

; 3561 :         return qstor_cmd( 2, qstor_args, qstor_cmdline );

  000cb	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR qstor_cmdline$[rsp]
  000d3	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR qstor_args$[rsp]
  000db	b9 02 00 00 00	 mov	 ecx, 2
  000e0	e8 00 00 00 00	 call	 qstor_cmd
  000e5	e9 70 06 00 00	 jmp	 $LN1@mainsize_c
$LN14@mainsize_c:

; 3562 : 
; 3563 :     /* Parse main storage size operand */
; 3564 :     rc = sscanf( argv[1], "%"SCNu64"%c%c", &mainsize, &f, &c );

  000ea	b8 08 00 00 00	 mov	 eax, 8
  000ef	48 6b c0 01	 imul	 rax, rax, 1
  000f3	48 8d 4c 24 70	 lea	 rcx, QWORD PTR c$[rsp]
  000f8	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000fd	4c 8d 4c 24 60	 lea	 r9, QWORD PTR f$[rsp]
  00102	4c 8d 84 24 80
	00 00 00	 lea	 r8, QWORD PTR mainsize$[rsp]
  0010a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG207229
  00111	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00119	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0011d	e8 00 00 00 00	 call	 sscanf
  00122	89 44 24 64	 mov	 DWORD PTR rc$[rsp], eax

; 3565 : 
; 3566 :     if (rc < 1 || rc > 2)

  00126	83 7c 24 64 01	 cmp	 DWORD PTR rc$[rsp], 1
  0012b	7c 0b		 jl	 SHORT $LN16@mainsize_c
  0012d	83 7c 24 64 02	 cmp	 DWORD PTR rc$[rsp], 2
  00132	0f 8e a5 00 00
	00		 jle	 $LN15@mainsize_c
$LN16@mainsize_c:

; 3567 :     {
; 3568 :         // "Invalid value %s specified for %s"
; 3569 :         WRMSG( HHC01451, "E", argv[1], argv[0] );

  00138	b8 08 00 00 00	 mov	 eax, 8
  0013d	48 6b c0 00	 imul	 rax, rax, 0
  00141	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv91[rsp], rax
  00149	b9 08 00 00 00	 mov	 ecx, 8
  0014e	48 6b c9 01	 imul	 rcx, rcx, 1
  00152	48 89 8c 24 98
	00 00 00	 mov	 QWORD PTR tv94[rsp], rcx
  0015a	b9 01 00 00 00	 mov	 ecx, 1
  0015f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00165	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0016d	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tv91[rsp]
  00175	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00179	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0017e	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00186	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR tv94[rsp]
  0018e	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00192	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00197	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207232
  0019e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207233
  001aa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001af	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b4	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207234
  001c1	ba f1 0d 00 00	 mov	 edx, 3569		; 00000df1H
  001c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207235
  001cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3570 :         return -1;

  001d3	b8 ff ff ff ff	 mov	 eax, -1
  001d8	e9 7d 05 00 00	 jmp	 $LN1@mainsize_c
$LN15@mainsize_c:

; 3571 :     }
; 3572 : 
; 3573 :     /* Handle size suffix and suffix overflow */
; 3574 :     {
; 3575 :         U64  suffix_oflow_mask  = 0xFFFFFFFFFFFFFFFFULL;

  001dd	48 c7 44 24 68
	ff ff ff ff	 mov	 QWORD PTR suffix_oflow_mask$1[rsp], -1

; 3576 : 
; 3577 :         mainsize_numpages = mainsize;  /* (converted to pages below) */

  001e6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mainsize$[rsp]
  001ee	48 89 44 24 58	 mov	 QWORD PTR mainsize_numpages$[rsp], rax

; 3578 : 
; 3579 :         if (rc == 2)

  001f3	83 7c 24 64 02	 cmp	 DWORD PTR rc$[rsp], 2
  001f8	0f 85 50 01 00
	00		 jne	 $LN17@mainsize_c

; 3580 :         {
; 3581 :             switch (toupper( f ))

  001fe	0f b6 44 24 60	 movzx	 eax, BYTE PTR f$[rsp]
  00203	8b c8		 mov	 ecx, eax
  00205	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_toupper
  0020b	89 44 24 78	 mov	 DWORD PTR tv142[rsp], eax
  0020f	8b 44 24 78	 mov	 eax, DWORD PTR tv142[rsp]
  00213	83 e8 42	 sub	 eax, 66			; 00000042H
  00216	89 44 24 78	 mov	 DWORD PTR tv142[rsp], eax
  0021a	83 7c 24 78 12	 cmp	 DWORD PTR tv142[rsp], 18
  0021f	0f 87 27 01 00
	00		 ja	 $LN8@mainsize_c
  00225	48 63 44 24 78	 movsxd	 rax, DWORD PTR tv142[rsp]
  0022a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00231	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN40@mainsize_c[rcx+rax*4]
  00238	48 03 c1	 add	 rax, rcx
  0023b	ff e0		 jmp	 rax
$LN19@mainsize_c:

; 3582 :             {
; 3583 :             case 'B':
; 3584 :                 suffix_oflow_mask = 0;

  0023d	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR suffix_oflow_mask$1[rsp], 0

; 3585 :                 mainsize_numpages >>= 12;

  00246	48 8b 44 24 58	 mov	 rax, QWORD PTR mainsize_numpages$[rsp]
  0024b	48 c1 e8 0c	 shr	 rax, 12
  0024f	48 89 44 24 58	 mov	 QWORD PTR mainsize_numpages$[rsp], rax

; 3586 :                 if (mainsize & 0x0FFF)

  00254	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mainsize$[rsp]
  0025c	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  00262	48 85 c0	 test	 rax, rax
  00265	74 0d		 je	 SHORT $LN20@mainsize_c

; 3587 :                     ++mainsize_numpages;

  00267	48 8b 44 24 58	 mov	 rax, QWORD PTR mainsize_numpages$[rsp]
  0026c	48 ff c0	 inc	 rax
  0026f	48 89 44 24 58	 mov	 QWORD PTR mainsize_numpages$[rsp], rax
$LN20@mainsize_c:

; 3588 :                 break;

  00274	e9 d3 00 00 00	 jmp	 $LN8@mainsize_c
$LN21@mainsize_c:

; 3589 : 
; 3590 :             case 'K':
; 3591 :                 suffix_oflow_mask <<= 55;

  00279	48 8b 44 24 68	 mov	 rax, QWORD PTR suffix_oflow_mask$1[rsp]
  0027e	48 c1 e0 37	 shl	 rax, 55			; 00000037H
  00282	48 89 44 24 68	 mov	 QWORD PTR suffix_oflow_mask$1[rsp], rax

; 3592 :                 mainsize_numpages >>= 2;

  00287	48 8b 44 24 58	 mov	 rax, QWORD PTR mainsize_numpages$[rsp]
  0028c	48 c1 e8 02	 shr	 rax, 2
  00290	48 89 44 24 58	 mov	 QWORD PTR mainsize_numpages$[rsp], rax

; 3593 :                 if (mainsize & 0x03)

  00295	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR mainsize$[rsp]
  0029d	48 83 e0 03	 and	 rax, 3
  002a1	48 85 c0	 test	 rax, rax
  002a4	74 0d		 je	 SHORT $LN22@mainsize_c

; 3594 :                     ++mainsize_numpages;

  002a6	48 8b 44 24 58	 mov	 rax, QWORD PTR mainsize_numpages$[rsp]
  002ab	48 ff c0	 inc	 rax
  002ae	48 89 44 24 58	 mov	 QWORD PTR mainsize_numpages$[rsp], rax
$LN22@mainsize_c:

; 3595 :                 break;

  002b3	e9 94 00 00 00	 jmp	 $LN8@mainsize_c
$LN23@mainsize_c:

; 3596 : 
; 3597 :             case 'M':
; 3598 :                 suffix_oflow_mask <<= 45;

  002b8	48 8b 44 24 68	 mov	 rax, QWORD PTR suffix_oflow_mask$1[rsp]
  002bd	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  002c1	48 89 44 24 68	 mov	 QWORD PTR suffix_oflow_mask$1[rsp], rax

; 3599 :                 mainsize_numpages <<= SHIFT_MEBIBYTE - SHIFT_4K;

  002c6	48 8b 44 24 58	 mov	 rax, QWORD PTR mainsize_numpages$[rsp]
  002cb	48 c1 e0 08	 shl	 rax, 8
  002cf	48 89 44 24 58	 mov	 QWORD PTR mainsize_numpages$[rsp], rax

; 3600 :                 break;

  002d4	eb 76		 jmp	 SHORT $LN8@mainsize_c
$LN24@mainsize_c:

; 3601 : 
; 3602 :             case 'G':
; 3603 :                 suffix_oflow_mask <<= 35;

  002d6	48 8b 44 24 68	 mov	 rax, QWORD PTR suffix_oflow_mask$1[rsp]
  002db	48 c1 e0 23	 shl	 rax, 35			; 00000023H
  002df	48 89 44 24 68	 mov	 QWORD PTR suffix_oflow_mask$1[rsp], rax

; 3604 :                 mainsize_numpages <<= SHIFT_GIBIBYTE - SHIFT_4K;

  002e4	48 8b 44 24 58	 mov	 rax, QWORD PTR mainsize_numpages$[rsp]
  002e9	48 c1 e0 12	 shl	 rax, 18
  002ed	48 89 44 24 58	 mov	 QWORD PTR mainsize_numpages$[rsp], rax

; 3605 :                 break;

  002f2	eb 58		 jmp	 SHORT $LN8@mainsize_c
$LN25@mainsize_c:

; 3606 : 
; 3607 :             case 'T':
; 3608 :                 suffix_oflow_mask <<= 25;

  002f4	48 8b 44 24 68	 mov	 rax, QWORD PTR suffix_oflow_mask$1[rsp]
  002f9	48 c1 e0 19	 shl	 rax, 25
  002fd	48 89 44 24 68	 mov	 QWORD PTR suffix_oflow_mask$1[rsp], rax

; 3609 :                 mainsize_numpages <<= SHIFT_TEBIBYTE - SHIFT_4K;

  00302	48 8b 44 24 58	 mov	 rax, QWORD PTR mainsize_numpages$[rsp]
  00307	48 c1 e0 1c	 shl	 rax, 28
  0030b	48 89 44 24 58	 mov	 QWORD PTR mainsize_numpages$[rsp], rax

; 3610 :                 break;

  00310	eb 3a		 jmp	 SHORT $LN8@mainsize_c
$LN26@mainsize_c:

; 3611 : 
; 3612 :             case 'P':
; 3613 :                 suffix_oflow_mask <<= 15;

  00312	48 8b 44 24 68	 mov	 rax, QWORD PTR suffix_oflow_mask$1[rsp]
  00317	48 c1 e0 0f	 shl	 rax, 15
  0031b	48 89 44 24 68	 mov	 QWORD PTR suffix_oflow_mask$1[rsp], rax

; 3614 :                 mainsize_numpages <<= SHIFT_PEBIBYTE - SHIFT_4K;

  00320	48 8b 44 24 58	 mov	 rax, QWORD PTR mainsize_numpages$[rsp]
  00325	48 c1 e0 26	 shl	 rax, 38			; 00000026H
  00329	48 89 44 24 58	 mov	 QWORD PTR mainsize_numpages$[rsp], rax

; 3615 :                 break;

  0032e	eb 1c		 jmp	 SHORT $LN8@mainsize_c
$LN27@mainsize_c:

; 3616 : 
; 3617 :             case 'E':
; 3618 :                 suffix_oflow_mask <<=  5;

  00330	48 8b 44 24 68	 mov	 rax, QWORD PTR suffix_oflow_mask$1[rsp]
  00335	48 c1 e0 05	 shl	 rax, 5
  00339	48 89 44 24 68	 mov	 QWORD PTR suffix_oflow_mask$1[rsp], rax

; 3619 :                 mainsize_numpages <<= SHIFT_EXBIBYTE - SHIFT_4K;

  0033e	48 8b 44 24 58	 mov	 rax, QWORD PTR mainsize_numpages$[rsp]
  00343	48 c1 e0 30	 shl	 rax, 48			; 00000030H
  00347	48 89 44 24 58	 mov	 QWORD PTR mainsize_numpages$[rsp], rax
$LN8@mainsize_c:

; 3620 :                 break;
; 3621 :             /*----------------------------------------------------------
; 3622 :             default:        // Force error
; 3623 :                 break;      // ...
; 3624 :             ----------------------------------------------------------*/
; 3625 :             }
; 3626 :         }

  0034c	eb 1c		 jmp	 SHORT $LN18@mainsize_c
$LN17@mainsize_c:

; 3627 :         else /* default is megabytes if no suffix  */
; 3628 :         {
; 3629 :             suffix_oflow_mask <<= 45;

  0034e	48 8b 44 24 68	 mov	 rax, QWORD PTR suffix_oflow_mask$1[rsp]
  00353	48 c1 e0 2d	 shl	 rax, 45			; 0000002dH
  00357	48 89 44 24 68	 mov	 QWORD PTR suffix_oflow_mask$1[rsp], rax

; 3630 :             mainsize_numpages <<= SHIFT_MEBIBYTE - SHIFT_4K;

  0035c	48 8b 44 24 58	 mov	 rax, QWORD PTR mainsize_numpages$[rsp]
  00361	48 c1 e0 08	 shl	 rax, 8
  00365	48 89 44 24 58	 mov	 QWORD PTR mainsize_numpages$[rsp], rax
$LN18@mainsize_c:

; 3631 :         }
; 3632 : 
; 3633 :         /* Error if more than 16E-1 or suffix use causes U64 overflow */
; 3634 :         if (0
; 3635 :             || mainsize_numpages >= 0x0010000000000000ULL // (over 16E-1)
; 3636 :             || (mainsize & suffix_oflow_mask)             // (too much)

  0036a	33 c0		 xor	 eax, eax
  0036c	85 c0		 test	 eax, eax
  0036e	75 2d		 jne	 SHORT $LN29@mainsize_c
  00370	48 b8 00 00 00
	00 00 00 10 00	 mov	 rax, 4503599627370496	; 0010000000000000H
  0037a	48 39 44 24 58	 cmp	 QWORD PTR mainsize_numpages$[rsp], rax
  0037f	73 1c		 jae	 SHORT $LN29@mainsize_c
  00381	48 8b 44 24 68	 mov	 rax, QWORD PTR suffix_oflow_mask$1[rsp]
  00386	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR mainsize$[rsp]
  0038e	48 23 c8	 and	 rcx, rax
  00391	48 8b c1	 mov	 rax, rcx
  00394	48 85 c0	 test	 rax, rax
  00397	0f 84 a5 00 00
	00		 je	 $LN28@mainsize_c
$LN29@mainsize_c:

; 3637 :         )
; 3638 :         {
; 3639 :             // "Invalid value %s specified for %s"
; 3640 :             WRMSG( HHC01451, "E", argv[1], argv[0]);

  0039d	b8 08 00 00 00	 mov	 eax, 8
  003a2	48 6b c0 00	 imul	 rax, rax, 0
  003a6	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv170[rsp], rax
  003ae	b9 08 00 00 00	 mov	 ecx, 8
  003b3	48 6b c9 01	 imul	 rcx, rcx, 1
  003b7	48 89 8c 24 a8
	00 00 00	 mov	 QWORD PTR tv173[rsp], rcx
  003bf	b9 01 00 00 00	 mov	 ecx, 1
  003c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003ca	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003d2	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR tv170[rsp]
  003da	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  003de	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003e3	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003eb	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR tv173[rsp]
  003f3	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  003f7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207249
  00403	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00408	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207250
  0040f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00414	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00419	41 b9 03 00 00
	00		 mov	 r9d, 3
  0041f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207251
  00426	ba 38 0e 00 00	 mov	 edx, 3640		; 00000e38H
  0042b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207252
  00432	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3641 :             return (-1);

  00438	b8 ff ff ff ff	 mov	 eax, -1
  0043d	e9 18 03 00 00	 jmp	 $LN1@mainsize_c
$LN28@mainsize_c:

; 3642 :         }
; 3643 : 
; 3644 :         mainsize = (mainsize_numpages << SHIFT_4K);

  00442	48 8b 44 24 58	 mov	 rax, QWORD PTR mainsize_numpages$[rsp]
  00447	48 c1 e0 0c	 shl	 rax, 12
  0044b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR mainsize$[rsp], rax

; 3645 : 
; 3646 :         // "mainsize_numpages" now holds mainsize value in #of 4K pages
; 3647 :         // and "mainsize" holds the equivalent value in number of bytes.
; 3648 :     }
; 3649 : 
; 3650 :     /* Validate requested storage size */
; 3651 :     if (adjust_mainsize( sysblk.arch_mode, mainsize ) != mainsize)

  00453	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR mainsize$[rsp]
  0045b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00462	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [rax+136]
  00468	e8 00 00 00 00	 call	 adjust_mainsize
  0046d	48 3b 84 24 80
	00 00 00	 cmp	 rax, QWORD PTR mainsize$[rsp]
  00475	0f 84 a5 00 00
	00		 je	 $LN30@mainsize_c

; 3652 :     {
; 3653 :         // "Invalid value %s specified for %s"
; 3654 :         WRMSG( HHC01451, "E", argv[1], argv[0] );

  0047b	b8 08 00 00 00	 mov	 eax, 8
  00480	48 6b c0 00	 imul	 rax, rax, 0
  00484	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv191[rsp], rax
  0048c	b9 08 00 00 00	 mov	 ecx, 8
  00491	48 6b c9 01	 imul	 rcx, rcx, 1
  00495	48 89 8c 24 b8
	00 00 00	 mov	 QWORD PTR tv194[rsp], rcx
  0049d	b9 01 00 00 00	 mov	 ecx, 1
  004a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004a8	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004b0	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR tv191[rsp]
  004b8	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  004bc	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  004c1	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004c9	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR tv194[rsp]
  004d1	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  004d5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207254
  004e1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207255
  004ed	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004f2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004f7	41 b9 03 00 00
	00		 mov	 r9d, 3
  004fd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207256
  00504	ba 46 0e 00 00	 mov	 edx, 3654		; 00000e46H
  00509	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207257
  00510	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3655 :         return -1;

  00516	b8 ff ff ff ff	 mov	 eax, -1
  0051b	e9 3a 02 00 00	 jmp	 $LN1@mainsize_c
$LN30@mainsize_c:

; 3656 :     }
; 3657 : 
; 3658 :     /* Process options */
; 3659 :     for (i=2; i < argc; ++i)

  00520	c7 44 24 74 02
	00 00 00	 mov	 DWORD PTR i$[rsp], 2
  00528	eb 0a		 jmp	 SHORT $LN12@mainsize_c
$LN10@mainsize_c:
  0052a	8b 44 24 74	 mov	 eax, DWORD PTR i$[rsp]
  0052e	ff c0		 inc	 eax
  00530	89 44 24 74	 mov	 DWORD PTR i$[rsp], eax
$LN12@mainsize_c:
  00534	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  0053b	39 44 24 74	 cmp	 DWORD PTR i$[rsp], eax
  0053f	0f 8d f2 00 00
	00		 jge	 $LN11@mainsize_c

; 3660 :     {
; 3661 :         strnupper( lockopt, argv[i], (u_int) sizeof( lockopt ));

  00545	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  0054a	41 b8 10 00 00
	00		 mov	 r8d, 16
  00550	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00558	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0055c	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR lockopt$[rsp]
  00564	e8 00 00 00 00	 call	 strnupper

; 3662 : 
; 3663 : #if 0   // TEMPORARILY DISABLED; config.c doesn't support locking storage yet)
; 3664 :         if (strabbrev( "LOCKED", lockopt, 1 ) && mainsize_numpages)
; 3665 :             lock_mainstor = true;
; 3666 :         else
; 3667 : #endif
; 3668 :         if (strabbrev( "UNLOCKED", lockopt, 3 ))

  00569	41 b8 03 00 00
	00		 mov	 r8d, 3
  0056f	48 8d 94 24 e0
	00 00 00	 lea	 rdx, QWORD PTR lockopt$[rsp]
  00577	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207260
  0057e	e8 00 00 00 00	 call	 strabbrev
  00583	85 c0		 test	 eax, eax
  00585	74 0a		 je	 SHORT $LN31@mainsize_c

; 3669 :             lock_mainstor = false;

  00587	c6 44 24 50 00	 mov	 BYTE PTR lock_mainstor$[rsp], 0
  0058c	e9 a1 00 00 00	 jmp	 $LN32@mainsize_c
$LN31@mainsize_c:

; 3670 :         else
; 3671 :         {
; 3672 :             // "Invalid value %s specified for %s"
; 3673 :             WRMSG( HHC01451, "E", argv[i], argv[0] );

  00591	b8 08 00 00 00	 mov	 eax, 8
  00596	48 6b c0 00	 imul	 rax, rax, 0
  0059a	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv219[rsp], rax
  005a2	48 63 4c 24 74	 movsxd	 rcx, DWORD PTR i$[rsp]
  005a7	48 89 8c 24 c8
	00 00 00	 mov	 QWORD PTR tv222[rsp], rcx
  005af	b9 01 00 00 00	 mov	 ecx, 1
  005b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005ba	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  005c2	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR tv219[rsp]
  005ca	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  005ce	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  005d3	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  005db	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR tv222[rsp]
  005e3	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  005e7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207261
  005f3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207262
  005ff	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00604	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00609	41 b9 03 00 00
	00		 mov	 r9d, 3
  0060f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207263
  00616	ba 59 0e 00 00	 mov	 edx, 3673		; 00000e59H
  0061b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207264
  00622	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3674 :             return -1;

  00628	b8 ff ff ff ff	 mov	 eax, -1
  0062d	e9 28 01 00 00	 jmp	 $LN1@mainsize_c
$LN32@mainsize_c:

; 3675 :         }
; 3676 :     }

  00632	e9 f3 fe ff ff	 jmp	 $LN10@mainsize_c
$LN11@mainsize_c:

; 3677 : 
; 3678 :     /* Set lock request ("UNLOCKED" forced when mainsize = 0) */
; 3679 :     if (!mainsize_numpages) lock_mainstor = false;

  00637	48 83 7c 24 58
	00		 cmp	 QWORD PTR mainsize_numpages$[rsp], 0
  0063d	75 05		 jne	 SHORT $LN33@mainsize_c
  0063f	c6 44 24 50 00	 mov	 BYTE PTR lock_mainstor$[rsp], 0
$LN33@mainsize_c:

; 3680 :     sysblk.lock_mainstor =  lock_mainstor;

  00644	0f b6 44 24 50	 movzx	 eax, BYTE PTR lock_mainstor$[rsp]
  00649	83 e0 01	 and	 eax, 1
  0064c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00653	8b 89 a8 00 00
	00		 mov	 ecx, DWORD PTR [rcx+168]
  00659	83 e1 fe	 and	 ecx, -2			; fffffffeH
  0065c	0b c8		 or	 ecx, eax
  0065e	8b c1		 mov	 eax, ecx
  00660	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00667	89 81 a8 00 00
	00		 mov	 DWORD PTR [rcx+168], eax

; 3681 : 
; 3682 :     /* Update main storage size */
; 3683 :     rc = configure_storage( mainsize_numpages );

  0066d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR mainsize_numpages$[rsp]
  00672	e8 00 00 00 00	 call	 configure_storage
  00677	89 44 24 64	 mov	 DWORD PTR rc$[rsp], eax

; 3684 : 
; 3685 :     if (rc >= 0)

  0067b	83 7c 24 64 00	 cmp	 DWORD PTR rc$[rsp], 0
  00680	7c 35		 jl	 SHORT $LN34@mainsize_c

; 3686 :     {
; 3687 :         if (MLVL( VERBOSE ))

  00682	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00689	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  0068f	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00694	85 c0		 test	 eax, eax
  00696	74 1a		 je	 SHORT $LN36@mainsize_c

; 3688 :             // Show them the results
; 3689 :             qstor_cmd( 2, qstor_args, qstor_cmdline );

  00698	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR qstor_cmdline$[rsp]
  006a0	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR qstor_args$[rsp]
  006a8	b9 02 00 00 00	 mov	 ecx, 2
  006ad	e8 00 00 00 00	 call	 qstor_cmd
$LN36@mainsize_c:

; 3690 :     }

  006b2	e9 9f 00 00 00	 jmp	 $LN35@mainsize_c
$LN34@mainsize_c:

; 3691 :     else if (HERRCPUONL == rc)

  006b7	83 7c 24 64 fd	 cmp	 DWORD PTR rc$[rsp], -3
  006bc	75 49		 jne	 SHORT $LN37@mainsize_c

; 3692 :     {
; 3693 :         // "CPUs must be offline or stopped"
; 3694 :         WRMSG( HHC02389, "E" );

  006be	b9 01 00 00 00	 mov	 ecx, 1
  006c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207271
  006d0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207272
  006dc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006e1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006e6	41 b9 03 00 00
	00		 mov	 r9d, 3
  006ec	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207273
  006f3	ba 6e 0e 00 00	 mov	 edx, 3694		; 00000e6eH
  006f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207274
  006ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3695 :     }

  00705	eb 4f		 jmp	 SHORT $LN38@mainsize_c
$LN37@mainsize_c:

; 3696 :     else
; 3697 :     {
; 3698 :         // "Configure storage error %d"
; 3699 :         WRMSG( HHC02388, "E", rc );

  00707	b9 01 00 00 00	 mov	 ecx, 1
  0070c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00712	8b 4c 24 64	 mov	 ecx, DWORD PTR rc$[rsp]
  00716	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0071a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207275
  00721	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00726	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207276
  0072d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00732	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00737	41 b9 03 00 00
	00		 mov	 r9d, 3
  0073d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207277
  00744	ba 73 0e 00 00	 mov	 edx, 3699		; 00000e73H
  00749	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207278
  00750	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN38@mainsize_c:
$LN35@mainsize_c:

; 3700 :     }
; 3701 : 
; 3702 :     return rc;

  00756	8b 44 24 64	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@mainsize_c:

; 3703 : }

  0075a	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00762	48 33 cc	 xor	 rcx, rsp
  00765	e8 00 00 00 00	 call	 __security_check_cookie
  0076a	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  00771	c3		 ret	 0
  00772	66 90		 npad	 2
$LN40@mainsize_c:
  00774	00 00 00 00	 DD	 $LN19@mainsize_c
  00778	00 00 00 00	 DD	 $LN8@mainsize_c
  0077c	00 00 00 00	 DD	 $LN8@mainsize_c
  00780	00 00 00 00	 DD	 $LN27@mainsize_c
  00784	00 00 00 00	 DD	 $LN8@mainsize_c
  00788	00 00 00 00	 DD	 $LN24@mainsize_c
  0078c	00 00 00 00	 DD	 $LN8@mainsize_c
  00790	00 00 00 00	 DD	 $LN8@mainsize_c
  00794	00 00 00 00	 DD	 $LN8@mainsize_c
  00798	00 00 00 00	 DD	 $LN21@mainsize_c
  0079c	00 00 00 00	 DD	 $LN8@mainsize_c
  007a0	00 00 00 00	 DD	 $LN23@mainsize_c
  007a4	00 00 00 00	 DD	 $LN8@mainsize_c
  007a8	00 00 00 00	 DD	 $LN8@mainsize_c
  007ac	00 00 00 00	 DD	 $LN26@mainsize_c
  007b0	00 00 00 00	 DD	 $LN8@mainsize_c
  007b4	00 00 00 00	 DD	 $LN8@mainsize_c
  007b8	00 00 00 00	 DD	 $LN8@mainsize_c
  007bc	00 00 00 00	 DD	 $LN25@mainsize_c
mainsize_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
display_xpnd$ = 96
display_main$ = 97
i$1 = 100
tv143 = 104
tv169 = 112
tv88 = 120
check$2 = 128
memsize$ = 144
__$ArrayPad$ = 272
argc$ = 304
argv$ = 312
cmdline$ = 320
qstor_cmd PROC

; 9492 : {

$LN22:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 9493 :     BYTE  display_main  = FALSE;

  00027	c6 44 24 61 00	 mov	 BYTE PTR display_main$[rsp], 0

; 9494 :     BYTE  display_xpnd  = FALSE;

  0002c	c6 44 24 60 00	 mov	 BYTE PTR display_xpnd$[rsp], 0
$LN4@qstor_cmd:

; 9495 : 
; 9496 :     char  memsize[128];
; 9497 : 
; 9498 :     UNREFERENCED( cmdline );

  00031	33 c0		 xor	 eax, eax
  00033	85 c0		 test	 eax, eax
  00035	75 fa		 jne	 SHORT $LN4@qstor_cmd

; 9499 : 
; 9500 :     if (argc < 2)

  00037	83 bc 24 30 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0003f	7d 13		 jge	 SHORT $LN8@qstor_cmd

; 9501 :         display_main  = display_xpnd  = TRUE;

  00041	c6 44 24 60 01	 mov	 BYTE PTR display_xpnd$[rsp], 1
  00046	0f b6 44 24 60	 movzx	 eax, BYTE PTR display_xpnd$[rsp]
  0004b	88 44 24 61	 mov	 BYTE PTR display_main$[rsp], al
  0004f	e9 3b 01 00 00	 jmp	 $LN9@qstor_cmd
$LN8@qstor_cmd:

; 9502 :     else
; 9503 :     {
; 9504 :         char  check[16];
; 9505 :         int   i;
; 9506 : 
; 9507 :         for (i=1; i < argc; i++)

  00054	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR i$1[rsp], 1
  0005c	eb 0a		 jmp	 SHORT $LN7@qstor_cmd
$LN5@qstor_cmd:
  0005e	8b 44 24 64	 mov	 eax, DWORD PTR i$1[rsp]
  00062	ff c0		 inc	 eax
  00064	89 44 24 64	 mov	 DWORD PTR i$1[rsp], eax
$LN7@qstor_cmd:
  00068	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  0006f	39 44 24 64	 cmp	 DWORD PTR i$1[rsp], eax
  00073	0f 8d 16 01 00
	00		 jge	 $LN6@qstor_cmd

; 9508 :         {
; 9509 :             strupper( check, argv[1] ); // Uppercase for multiple checks

  00079	b8 08 00 00 00	 mov	 eax, 8
  0007e	48 6b c0 01	 imul	 rax, rax, 1
  00082	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0008a	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0008e	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR check$2[rsp]
  00096	e8 00 00 00 00	 call	 strupper

; 9510 : 
; 9511 :                  if (strabbrev( "MAINSIZE", check, 1 )) display_main = TRUE;

  0009b	41 b8 01 00 00
	00		 mov	 r8d, 1
  000a1	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR check$2[rsp]
  000a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212039
  000b0	e8 00 00 00 00	 call	 strabbrev
  000b5	85 c0		 test	 eax, eax
  000b7	74 0a		 je	 SHORT $LN10@qstor_cmd
  000b9	c6 44 24 61 01	 mov	 BYTE PTR display_main$[rsp], 1
  000be	e9 c7 00 00 00	 jmp	 $LN11@qstor_cmd
$LN10@qstor_cmd:

; 9512 :             else if (strabbrev( "XPNDSIZE", check, 1 )
; 9513 :                  ||  strabbrev( "EXPANDED", check, 1 )) display_xpnd = TRUE;

  000c3	41 b8 01 00 00
	00		 mov	 r8d, 1
  000c9	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR check$2[rsp]
  000d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212043
  000d8	e8 00 00 00 00	 call	 strabbrev
  000dd	85 c0		 test	 eax, eax
  000df	75 1e		 jne	 SHORT $LN14@qstor_cmd
  000e1	41 b8 01 00 00
	00		 mov	 r8d, 1
  000e7	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR check$2[rsp]
  000ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212044
  000f6	e8 00 00 00 00	 call	 strabbrev
  000fb	85 c0		 test	 eax, eax
  000fd	74 0a		 je	 SHORT $LN12@qstor_cmd
$LN14@qstor_cmd:
  000ff	c6 44 24 60 01	 mov	 BYTE PTR display_xpnd$[rsp], 1
  00104	e9 81 00 00 00	 jmp	 $LN13@qstor_cmd
$LN12@qstor_cmd:

; 9514 :             else
; 9515 :             {
; 9516 :                 // "Invalid argument %s%s"
; 9517 :                 WRMSG( HHC02205, "E", argv[1], "; either 'mainsize' or 'xpndsize' is valid" );

  00109	b8 08 00 00 00	 mov	 eax, 8
  0010e	48 6b c0 01	 imul	 rax, rax, 1
  00112	48 89 44 24 78	 mov	 QWORD PTR tv88[rsp], rax
  00117	b9 01 00 00 00	 mov	 ecx, 1
  0011c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212045
  00129	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0012e	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00136	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv88[rsp]
  0013b	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0013f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00144	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212046
  0014b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00150	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212047
  00157	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0015c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00161	41 b9 03 00 00
	00		 mov	 r9d, 3
  00167	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG212048
  0016e	ba 2d 25 00 00	 mov	 edx, 9517		; 0000252dH
  00173	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212049
  0017a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9518 :                 return -1;

  00180	b8 ff ff ff ff	 mov	 eax, -1
  00185	e9 be 01 00 00	 jmp	 $LN1@qstor_cmd
$LN13@qstor_cmd:
$LN11@qstor_cmd:

; 9519 :             }
; 9520 :         }

  0018a	e9 cf fe ff ff	 jmp	 $LN5@qstor_cmd
$LN6@qstor_cmd:
$LN9@qstor_cmd:

; 9521 :     }
; 9522 : 
; 9523 :     if (display_main)

  0018f	0f b6 44 24 61	 movzx	 eax, BYTE PTR display_main$[rsp]
  00194	85 c0		 test	 eax, eax
  00196	0f 84 cf 00 00
	00		 je	 $LN15@qstor_cmd

; 9524 :     {
; 9525 :         fmt_memsize_KB( sysblk.mainsize >> SHIFT_KIBIBYTE,

  0019c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001a3	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  001aa	48 c1 e8 0a	 shr	 rax, 10
  001ae	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  001b4	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR memsize$[rsp]
  001bc	48 8b c8	 mov	 rcx, rax
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmt_memsize_KB

; 9526 :             memsize, sizeof( memsize ));
; 9527 : 
; 9528 :         // "%-8s storage is %s (%ssize); storage is %slocked"
; 9529 :         WRMSG( HHC17003, "I", "MAIN", memsize, "main",

  001c5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001cc	8b 80 a8 00 00
	00		 mov	 eax, DWORD PTR [rax+168]
  001d2	d1 e8		 shr	 eax, 1
  001d4	83 e0 01	 and	 eax, 1
  001d7	85 c0		 test	 eax, eax
  001d9	74 0e		 je	 SHORT $LN18@qstor_cmd
  001db	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG212051
  001e2	48 89 44 24 68	 mov	 QWORD PTR tv143[rsp], rax
  001e7	eb 0c		 jmp	 SHORT $LN19@qstor_cmd
$LN18@qstor_cmd:
  001e9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG212052
  001f0	48 89 44 24 68	 mov	 QWORD PTR tv143[rsp], rax
$LN19@qstor_cmd:
  001f5	b9 01 00 00 00	 mov	 ecx, 1
  001fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00200	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv143[rsp]
  00205	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0020a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212053
  00211	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00216	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR memsize$[rsp]
  0021e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00223	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212054
  0022a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212055
  00236	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212056
  00242	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00247	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00252	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG212057
  00259	ba 3a 25 00 00	 mov	 edx, 9530		; 0000253aH
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212058
  00265	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN15@qstor_cmd:

; 9530 :             sysblk.mainstor_locked ? "" : "not " );
; 9531 :     }
; 9532 : 
; 9533 :     if (display_xpnd)

  0026b	0f b6 44 24 60	 movzx	 eax, BYTE PTR display_xpnd$[rsp]
  00270	85 c0		 test	 eax, eax
  00272	0f 84 ce 00 00
	00		 je	 $LN16@qstor_cmd

; 9534 :     {
; 9535 :         fmt_memsize_MB( sysblk.xpndsize >> (SHIFT_MEBIBYTE - XSTORE_PAGESHIFT),

  00278	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0027f	8b 80 ac 00 00
	00		 mov	 eax, DWORD PTR [rax+172]
  00285	c1 e8 08	 shr	 eax, 8
  00288	8b c0		 mov	 eax, eax
  0028a	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  00290	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR memsize$[rsp]
  00298	8b c8		 mov	 ecx, eax
  0029a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmt_memsize_MB

; 9536 :             memsize, sizeof( memsize ));
; 9537 : 
; 9538 :         // "%-8s storage is %s (%ssize); storage is %slocked"
; 9539 :         WRMSG( HHC17003, "I", "EXPANDED", memsize, "xpnd",

  002a0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002a7	8b 80 b8 00 00
	00		 mov	 eax, DWORD PTR [rax+184]
  002ad	d1 e8		 shr	 eax, 1
  002af	83 e0 01	 and	 eax, 1
  002b2	85 c0		 test	 eax, eax
  002b4	74 0e		 je	 SHORT $LN20@qstor_cmd
  002b6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG212060
  002bd	48 89 44 24 70	 mov	 QWORD PTR tv169[rsp], rax
  002c2	eb 0c		 jmp	 SHORT $LN21@qstor_cmd
$LN20@qstor_cmd:
  002c4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG212061
  002cb	48 89 44 24 70	 mov	 QWORD PTR tv169[rsp], rax
$LN21@qstor_cmd:
  002d0	b9 01 00 00 00	 mov	 ecx, 1
  002d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002db	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv169[rsp]
  002e0	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  002e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212062
  002ec	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  002f1	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR memsize$[rsp]
  002f9	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212063
  00305	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0030a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212064
  00311	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00316	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212065
  0031d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00322	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00327	41 b9 03 00 00
	00		 mov	 r9d, 3
  0032d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG212066
  00334	ba 44 25 00 00	 mov	 edx, 9540		; 00002544H
  00339	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212067
  00340	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN16@qstor_cmd:

; 9540 :             sysblk.xpndstor_locked ? "" : "not " );
; 9541 :     }
; 9542 : 
; 9543 :     return 0;

  00346	33 c0		 xor	 eax, eax
$LN1@qstor_cmd:

; 9544 : }

  00348	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00350	48 33 cc	 xor	 rcx, rsp
  00353	e8 00 00 00 00	 call	 __security_check_cookie
  00358	48 81 c4 28 01
	00 00		 add	 rsp, 296		; 00000128H
  0035f	c3		 ret	 0
qstor_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
c$ = 80
tzoffset$ = 84
rc$ = 88
tv92 = 96
tv95 = 104
tv143 = 112
tv146 = 120
tv158 = 128
argc$ = 160
argv$ = 168
cmdline$ = 176
tzoffset_cmd PROC

; 3443 : {

$LN19:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 3444 : int rc = 0;

  00015	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN4@tzoffset_c:

; 3445 : S32 tzoffset;
; 3446 : BYTE c;
; 3447 : 
; 3448 :     UNREFERENCED(cmdline);

  0001d	33 c0		 xor	 eax, eax
  0001f	85 c0		 test	 eax, eax
  00021	75 fa		 jne	 SHORT $LN4@tzoffset_c
$LN7@tzoffset_c:

; 3449 : 
; 3450 :     UPPER_ARGV_0( argv );

  00023	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  0002c	74 47		 je	 SHORT $LN11@tzoffset_c
  0002e	b8 08 00 00 00	 mov	 eax, 8
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0003f	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00044	74 2f		 je	 SHORT $LN11@tzoffset_c
  00046	b8 08 00 00 00	 mov	 eax, 8
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	b9 08 00 00 00	 mov	 ecx, 8
  00054	48 6b c9 00	 imul	 rcx, rcx, 0
  00058	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00060	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00064	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0006c	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00070	e8 00 00 00 00	 call	 strupper
$LN11@tzoffset_c:
  00075	33 c0		 xor	 eax, eax
  00077	85 c0		 test	 eax, eax
  00079	75 a8		 jne	 SHORT $LN7@tzoffset_c

; 3451 : 
; 3452 :     /* Parse timezone offset operand */
; 3453 :     if ( argc == 2 )

  0007b	83 bc 24 a0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00083	0f 85 c4 01 00
	00		 jne	 $LN12@tzoffset_c
$LN8@tzoffset_c:

; 3454 :     {
; 3455 :         for ( ;; )
; 3456 :         {
; 3457 :             if (strlen(argv[1]) != 5
; 3458 :                 || sscanf(argv[1], "%d%c", &tzoffset, &c) != 1
; 3459 :                 || (tzoffset < -2359) || (tzoffset > 2359))

  00089	b8 08 00 00 00	 mov	 eax, 8
  0008e	48 6b c0 01	 imul	 rax, rax, 1
  00092	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0009a	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0009e	e8 00 00 00 00	 call	 strlen
  000a3	48 83 f8 05	 cmp	 rax, 5
  000a7	75 48		 jne	 SHORT $LN16@tzoffset_c
  000a9	b8 08 00 00 00	 mov	 eax, 8
  000ae	48 6b c0 01	 imul	 rax, rax, 1
  000b2	4c 8d 4c 24 50	 lea	 r9, QWORD PTR c$[rsp]
  000b7	4c 8d 44 24 54	 lea	 r8, QWORD PTR tzoffset$[rsp]
  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG207157
  000c3	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000cb	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000cf	e8 00 00 00 00	 call	 sscanf
  000d4	83 f8 01	 cmp	 eax, 1
  000d7	75 18		 jne	 SHORT $LN16@tzoffset_c
  000d9	81 7c 24 54 c9
	f6 ff ff	 cmp	 DWORD PTR tzoffset$[rsp], -2359 ; fffffffffffff6c9H
  000e1	7c 0e		 jl	 SHORT $LN16@tzoffset_c
  000e3	81 7c 24 54 37
	09 00 00	 cmp	 DWORD PTR tzoffset$[rsp], 2359 ; 00000937H
  000eb	0f 8e a1 00 00
	00		 jle	 $LN14@tzoffset_c
$LN16@tzoffset_c:

; 3460 :             {
; 3461 :                 WRMSG( HHC01451, "E", argv[1], argv[0] );

  000f1	b8 08 00 00 00	 mov	 eax, 8
  000f6	48 6b c0 00	 imul	 rax, rax, 0
  000fa	48 89 44 24 60	 mov	 QWORD PTR tv92[rsp], rax
  000ff	b9 08 00 00 00	 mov	 ecx, 8
  00104	48 6b c9 01	 imul	 rcx, rcx, 1
  00108	48 89 4c 24 68	 mov	 QWORD PTR tv95[rsp], rcx
  0010d	b9 01 00 00 00	 mov	 ecx, 1
  00112	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00118	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00120	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv92[rsp]
  00125	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00129	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0012e	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00136	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv95[rsp]
  0013b	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0013f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00144	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207158
  0014b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00150	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207159
  00157	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0015c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00161	41 b9 03 00 00
	00		 mov	 r9d, 3
  00167	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207160
  0016e	ba 85 0d 00 00	 mov	 edx, 3461		; 00000d85H
  00173	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207161
  0017a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3462 :                 rc = -1;

  00180	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 3463 :                 break;

  00188	e9 be 00 00 00	 jmp	 $LN9@tzoffset_c

; 3464 :             }

  0018d	e9 b2 00 00 00	 jmp	 $LN15@tzoffset_c
$LN14@tzoffset_c:

; 3465 :             else
; 3466 :             {
; 3467 :                 configure_tzoffset(tzoffset);

  00192	8b 4c 24 54	 mov	 ecx, DWORD PTR tzoffset$[rsp]
  00196	e8 00 00 00 00	 call	 configure_tzoffset

; 3468 :                 if ( MLVL( VERBOSE ) )

  0019b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001a2	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  001a8	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001ad	85 c0		 test	 eax, eax
  001af	0f 84 8f 00 00
	00		 je	 $LN17@tzoffset_c

; 3469 :                     WRMSG( HHC02204, "I", argv[0], argv[1] );

  001b5	b8 08 00 00 00	 mov	 eax, 8
  001ba	48 6b c0 01	 imul	 rax, rax, 1
  001be	48 89 44 24 70	 mov	 QWORD PTR tv143[rsp], rax
  001c3	b9 08 00 00 00	 mov	 ecx, 8
  001c8	48 6b c9 00	 imul	 rcx, rcx, 0
  001cc	48 89 4c 24 78	 mov	 QWORD PTR tv146[rsp], rcx
  001d1	b9 01 00 00 00	 mov	 ecx, 1
  001d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001dc	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001e4	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv143[rsp]
  001e9	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001ed	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001f2	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001fa	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv146[rsp]
  001ff	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00203	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00208	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207163
  0020f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00214	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207164
  0021b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00220	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00225	41 b9 03 00 00
	00		 mov	 r9d, 3
  0022b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207165
  00232	ba 8d 0d 00 00	 mov	 edx, 3469		; 00000d8dH
  00237	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207166
  0023e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@tzoffset_c:
$LN15@tzoffset_c:

; 3470 :             }
; 3471 :             break;

  00244	eb 05		 jmp	 SHORT $LN9@tzoffset_c

; 3472 :         }

  00246	e9 3e fe ff ff	 jmp	 $LN8@tzoffset_c
$LN9@tzoffset_c:

; 3473 :     }

  0024b	eb 79		 jmp	 SHORT $LN13@tzoffset_c
$LN12@tzoffset_c:

; 3474 :     else
; 3475 :     {
; 3476 :         WRMSG( HHC01455, "E", argv[0] );

  0024d	b8 08 00 00 00	 mov	 eax, 8
  00252	48 6b c0 00	 imul	 rax, rax, 0
  00256	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv158[rsp], rax
  0025e	b9 01 00 00 00	 mov	 ecx, 1
  00263	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00269	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00271	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv158[rsp]
  00279	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0027d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00282	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207167
  00289	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0028e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207168
  00295	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0029a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0029f	41 b9 03 00 00
	00		 mov	 r9d, 3
  002a5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207169
  002ac	ba 94 0d 00 00	 mov	 edx, 3476		; 00000d94H
  002b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207170
  002b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3477 :         rc = -1;

  002be	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN13@tzoffset_c:

; 3478 :     }
; 3479 : 
; 3480 :     return rc;

  002c6	8b 44 24 58	 mov	 eax, DWORD PTR rc$[rsp]

; 3481 : }

  002ca	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  002d1	c3		 ret	 0
tzoffset_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
c$ = 80
yroffset$ = 84
rc$ = 88
tv87 = 96
tv90 = 104
tv138 = 112
tv141 = 120
tv153 = 128
argc$ = 160
argv$ = 168
cmdline$ = 176
yroffset_cmd PROC

; 3400 : {

$LN19:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 3401 : int     rc  = 0;

  00015	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN4@yroffset_c:

; 3402 : S32     yroffset;
; 3403 : BYTE    c;
; 3404 : 
; 3405 :     UNREFERENCED(cmdline);

  0001d	33 c0		 xor	 eax, eax
  0001f	85 c0		 test	 eax, eax
  00021	75 fa		 jne	 SHORT $LN4@yroffset_c
$LN7@yroffset_c:

; 3406 : 
; 3407 :     UPPER_ARGV_0( argv );

  00023	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  0002c	74 47		 je	 SHORT $LN11@yroffset_c
  0002e	b8 08 00 00 00	 mov	 eax, 8
  00033	48 6b c0 00	 imul	 rax, rax, 0
  00037	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0003f	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00044	74 2f		 je	 SHORT $LN11@yroffset_c
  00046	b8 08 00 00 00	 mov	 eax, 8
  0004b	48 6b c0 00	 imul	 rax, rax, 0
  0004f	b9 08 00 00 00	 mov	 ecx, 8
  00054	48 6b c9 00	 imul	 rcx, rcx, 0
  00058	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00060	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00064	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0006c	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00070	e8 00 00 00 00	 call	 strupper
$LN11@yroffset_c:
  00075	33 c0		 xor	 eax, eax
  00077	85 c0		 test	 eax, eax
  00079	75 a8		 jne	 SHORT $LN7@yroffset_c

; 3408 : 
; 3409 :     /* Parse year offset operand */
; 3410 :     if ( argc == 2 )

  0007b	83 bc 24 a0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00083	0f 85 a4 01 00
	00		 jne	 $LN12@yroffset_c
$LN8@yroffset_c:

; 3411 :     {
; 3412 :         for ( ;; )
; 3413 :         {
; 3414 :             if (sscanf(argv[1], "%d%c", &yroffset, &c) != 1
; 3415 :                 || (yroffset < -142) || (yroffset > 142))

  00089	b8 08 00 00 00	 mov	 eax, 8
  0008e	48 6b c0 01	 imul	 rax, rax, 1
  00092	4c 8d 4c 24 50	 lea	 r9, QWORD PTR c$[rsp]
  00097	4c 8d 44 24 54	 lea	 r8, QWORD PTR yroffset$[rsp]
  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG207117
  000a3	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000ab	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000af	e8 00 00 00 00	 call	 sscanf
  000b4	83 f8 01	 cmp	 eax, 1
  000b7	75 18		 jne	 SHORT $LN16@yroffset_c
  000b9	81 7c 24 54 72
	ff ff ff	 cmp	 DWORD PTR yroffset$[rsp], -142 ; ffffffffffffff72H
  000c1	7c 0e		 jl	 SHORT $LN16@yroffset_c
  000c3	81 7c 24 54 8e
	00 00 00	 cmp	 DWORD PTR yroffset$[rsp], 142 ; 0000008eH
  000cb	0f 8e a1 00 00
	00		 jle	 $LN14@yroffset_c
$LN16@yroffset_c:

; 3416 :             {
; 3417 :                 WRMSG( HHC01451, "E", argv[1], argv[0] );

  000d1	b8 08 00 00 00	 mov	 eax, 8
  000d6	48 6b c0 00	 imul	 rax, rax, 0
  000da	48 89 44 24 60	 mov	 QWORD PTR tv87[rsp], rax
  000df	b9 08 00 00 00	 mov	 ecx, 8
  000e4	48 6b c9 01	 imul	 rcx, rcx, 1
  000e8	48 89 4c 24 68	 mov	 QWORD PTR tv90[rsp], rcx
  000ed	b9 01 00 00 00	 mov	 ecx, 1
  000f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000f8	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00100	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv87[rsp]
  00105	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00109	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0010e	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00116	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv90[rsp]
  0011b	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0011f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00124	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207118
  0012b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00130	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207119
  00137	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0013c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00141	41 b9 03 00 00
	00		 mov	 r9d, 3
  00147	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207120
  0014e	ba 59 0d 00 00	 mov	 edx, 3417		; 00000d59H
  00153	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207121
  0015a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3418 :                 rc = -1;

  00160	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 3419 :                 break;

  00168	e9 be 00 00 00	 jmp	 $LN9@yroffset_c

; 3420 :             }

  0016d	e9 b2 00 00 00	 jmp	 $LN15@yroffset_c
$LN14@yroffset_c:

; 3421 :             else
; 3422 :             {
; 3423 :                 configure_yroffset(yroffset);

  00172	8b 4c 24 54	 mov	 ecx, DWORD PTR yroffset$[rsp]
  00176	e8 00 00 00 00	 call	 configure_yroffset

; 3424 :                 if ( MLVL(VERBOSE) )

  0017b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00182	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  00188	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0018d	85 c0		 test	 eax, eax
  0018f	0f 84 8f 00 00
	00		 je	 $LN17@yroffset_c

; 3425 :                     WRMSG( HHC02204, "I", argv[0], argv[1] );

  00195	b8 08 00 00 00	 mov	 eax, 8
  0019a	48 6b c0 01	 imul	 rax, rax, 1
  0019e	48 89 44 24 70	 mov	 QWORD PTR tv138[rsp], rax
  001a3	b9 08 00 00 00	 mov	 ecx, 8
  001a8	48 6b c9 00	 imul	 rcx, rcx, 0
  001ac	48 89 4c 24 78	 mov	 QWORD PTR tv141[rsp], rcx
  001b1	b9 01 00 00 00	 mov	 ecx, 1
  001b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001bc	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001c4	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv138[rsp]
  001c9	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001cd	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001d2	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001da	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv141[rsp]
  001df	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001e3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207123
  001ef	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207124
  001fb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00200	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00205	41 b9 03 00 00
	00		 mov	 r9d, 3
  0020b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207125
  00212	ba 61 0d 00 00	 mov	 edx, 3425		; 00000d61H
  00217	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207126
  0021e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@yroffset_c:
$LN15@yroffset_c:

; 3426 :             }
; 3427 :             break;

  00224	eb 05		 jmp	 SHORT $LN9@yroffset_c

; 3428 :         }

  00226	e9 5e fe ff ff	 jmp	 $LN8@yroffset_c
$LN9@yroffset_c:

; 3429 :     }

  0022b	eb 79		 jmp	 SHORT $LN13@yroffset_c
$LN12@yroffset_c:

; 3430 :     else
; 3431 :     {
; 3432 :         WRMSG( HHC01455, "E", argv[0] );

  0022d	b8 08 00 00 00	 mov	 eax, 8
  00232	48 6b c0 00	 imul	 rax, rax, 0
  00236	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv153[rsp], rax
  0023e	b9 01 00 00 00	 mov	 ecx, 1
  00243	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00249	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00251	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv153[rsp]
  00259	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0025d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00262	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207127
  00269	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0026e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207128
  00275	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0027a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0027f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00285	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207129
  0028c	ba 68 0d 00 00	 mov	 edx, 3432		; 00000d68H
  00291	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207130
  00298	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3433 :         rc = -1;

  0029e	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN13@yroffset_c:

; 3434 :     }
; 3435 : 
; 3436 :     return rc;

  002a6	8b 44 24 58	 mov	 eax, DWORD PTR rc$[rsp]

; 3437 : }

  002aa	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  002b1	c3		 ret	 0
yroffset_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
c$ = 80
sysepoch$ = 84
yroffset$ = 88
rc$ = 92
ssysepoch$ = 96
syroffset$ = 104
tv67 = 112
tv130 = 120
tv144 = 128
tv165 = 136
argc$ = 160
argv$ = 168
cmdline$ = 176
sysepoch_cmd PROC

; 3336 : {

$LN23:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 3337 : int     rc          = 0;

  00015	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0

; 3338 : char   *ssysepoch   = NULL;

  0001d	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR ssysepoch$[rsp], 0

; 3339 : char   *syroffset   = NULL;

  00026	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR syroffset$[rsp], 0

; 3340 : int     sysepoch    = 1900;

  0002f	c7 44 24 54 6c
	07 00 00	 mov	 DWORD PTR sysepoch$[rsp], 1900 ; 0000076cH

; 3341 : S32     yroffset    = 0;

  00037	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR yroffset$[rsp], 0
$LN4@sysepoch_c:

; 3342 : BYTE    c;
; 3343 : 
; 3344 :     UNREFERENCED(cmdline);

  0003f	33 c0		 xor	 eax, eax
  00041	85 c0		 test	 eax, eax
  00043	75 fa		 jne	 SHORT $LN4@sysepoch_c

; 3345 : 
; 3346 :     if ( argc < 2 || argc > 3 )

  00045	83 bc 24 a0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0004d	7c 0a		 jl	 SHORT $LN10@sysepoch_c
  0004f	83 bc 24 a0 00
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00057	7e 78		 jle	 SHORT $LN8@sysepoch_c
$LN10@sysepoch_c:

; 3347 :     {
; 3348 :         WRMSG( HHC01455, "E", argv[0] );

  00059	b8 08 00 00 00	 mov	 eax, 8
  0005e	48 6b c0 00	 imul	 rax, rax, 0
  00062	48 89 44 24 70	 mov	 QWORD PTR tv67[rsp], rax
  00067	b9 01 00 00 00	 mov	 ecx, 1
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00072	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0007a	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv67[rsp]
  0007f	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00083	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207061
  0008f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207062
  0009b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000a0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a5	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ab	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207063
  000b2	ba 14 0d 00 00	 mov	 edx, 3348		; 00000d14H
  000b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207064
  000be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3349 :         rc = -1;

  000c4	c7 44 24 5c ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 3350 :     }

  000cc	e9 98 02 00 00	 jmp	 $LN9@sysepoch_c
$LN8@sysepoch_c:
$LN5@sysepoch_c:

; 3351 :     else for ( ;; )
; 3352 :     {
; 3353 :         ssysepoch = argv[1];

  000d1	b8 08 00 00 00	 mov	 eax, 8
  000d6	48 6b c0 01	 imul	 rax, rax, 1
  000da	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000e2	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000e6	48 89 44 24 60	 mov	 QWORD PTR ssysepoch$[rsp], rax

; 3354 :         if ( argc == 3 )

  000eb	83 bc 24 a0 00
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  000f3	75 1c		 jne	 SHORT $LN11@sysepoch_c

; 3355 :             syroffset = argv[2];

  000f5	b8 08 00 00 00	 mov	 eax, 8
  000fa	48 6b c0 02	 imul	 rax, rax, 2
  000fe	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00106	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0010a	48 89 44 24 68	 mov	 QWORD PTR syroffset$[rsp], rax
  0010f	eb 09		 jmp	 SHORT $LN12@sysepoch_c
$LN11@sysepoch_c:

; 3356 :         else
; 3357 :             syroffset = NULL;

  00111	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR syroffset$[rsp], 0
$LN12@sysepoch_c:

; 3358 : 
; 3359 :         /* Parse system epoch operand */
; 3360 :         if (ssysepoch != NULL)

  0011a	48 83 7c 24 60
	00		 cmp	 QWORD PTR ssysepoch$[rsp], 0
  00120	0f 84 61 01 00
	00		 je	 $LN13@sysepoch_c

; 3361 :         {
; 3362 :             if (strlen(ssysepoch) != 4
; 3363 :                 || sscanf(ssysepoch, "%d%c", &sysepoch, &c) != 1
; 3364 :                 || ( sysepoch != 1900 && sysepoch != 1960 ) )

  00126	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ssysepoch$[rsp]
  0012b	e8 00 00 00 00	 call	 strlen
  00130	48 83 f8 04	 cmp	 rax, 4
  00134	75 3c		 jne	 SHORT $LN15@sysepoch_c
  00136	4c 8d 4c 24 50	 lea	 r9, QWORD PTR c$[rsp]
  0013b	4c 8d 44 24 54	 lea	 r8, QWORD PTR sysepoch$[rsp]
  00140	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG207070
  00147	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ssysepoch$[rsp]
  0014c	e8 00 00 00 00	 call	 sscanf
  00151	83 f8 01	 cmp	 eax, 1
  00154	75 1c		 jne	 SHORT $LN15@sysepoch_c
  00156	81 7c 24 54 6c
	07 00 00	 cmp	 DWORD PTR sysepoch$[rsp], 1900 ; 0000076cH
  0015e	0f 84 23 01 00
	00		 je	 $LN14@sysepoch_c
  00164	81 7c 24 54 a8
	07 00 00	 cmp	 DWORD PTR sysepoch$[rsp], 1960 ; 000007a8H
  0016c	0f 84 15 01 00
	00		 je	 $LN14@sysepoch_c
$LN15@sysepoch_c:

; 3365 :             {
; 3366 :                 if ( sysepoch == 1900 || sysepoch == 1960 )

  00172	81 7c 24 54 6c
	07 00 00	 cmp	 DWORD PTR sysepoch$[rsp], 1900 ; 0000076cH
  0017a	74 0a		 je	 SHORT $LN18@sysepoch_c
  0017c	81 7c 24 54 a8
	07 00 00	 cmp	 DWORD PTR sysepoch$[rsp], 1960 ; 000007a8H
  00184	75 77		 jne	 SHORT $LN16@sysepoch_c
$LN18@sysepoch_c:

; 3367 :                     WRMSG( HHC01451, "E", ssysepoch, argv[0] );

  00186	b8 08 00 00 00	 mov	 eax, 8
  0018b	48 6b c0 00	 imul	 rax, rax, 0
  0018f	48 89 44 24 78	 mov	 QWORD PTR tv130[rsp], rax
  00194	b9 01 00 00 00	 mov	 ecx, 1
  00199	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0019f	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001a7	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv130[rsp]
  001ac	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001b0	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001b5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ssysepoch$[rsp]
  001ba	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207074
  001c6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207075
  001d2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001d7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001dc	41 b9 03 00 00
	00		 mov	 r9d, 3
  001e2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207076
  001e9	ba 27 0d 00 00	 mov	 edx, 3367		; 00000d27H
  001ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207077
  001f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  001fb	eb 7d		 jmp	 SHORT $LN17@sysepoch_c
$LN16@sysepoch_c:

; 3368 :                 else
; 3369 :                     WRMSG( HHC01457, "E", argv[0], "1900|1960" );

  001fd	b8 08 00 00 00	 mov	 eax, 8
  00202	48 6b c0 00	 imul	 rax, rax, 0
  00206	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv144[rsp], rax
  0020e	b9 01 00 00 00	 mov	 ecx, 1
  00213	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00219	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207078
  00220	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00225	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0022d	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv144[rsp]
  00235	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00239	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0023e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207079
  00245	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0024a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207080
  00251	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00256	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0025b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00261	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207081
  00268	ba 29 0d 00 00	 mov	 edx, 3369		; 00000d29H
  0026d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207082
  00274	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@sysepoch_c:

; 3370 :                 rc = -1;

  0027a	c7 44 24 5c ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 3371 :                 break;

  00282	e9 e2 00 00 00	 jmp	 $LN6@sysepoch_c
$LN14@sysepoch_c:
$LN13@sysepoch_c:

; 3372 :             }
; 3373 :         }
; 3374 : 
; 3375 :         /* Parse year offset operand */
; 3376 :         if (syroffset != NULL)

  00287	48 83 7c 24 68
	00		 cmp	 QWORD PTR syroffset$[rsp], 0
  0028d	0f 84 bd 00 00
	00		 je	 $LN19@sysepoch_c

; 3377 :         {
; 3378 :             if (sscanf(syroffset, "%d%c", &yroffset, &c) != 1
; 3379 :                 || (yroffset < -142) || (yroffset > 142))

  00293	4c 8d 4c 24 50	 lea	 r9, QWORD PTR c$[rsp]
  00298	4c 8d 44 24 58	 lea	 r8, QWORD PTR yroffset$[rsp]
  0029d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG207086
  002a4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR syroffset$[rsp]
  002a9	e8 00 00 00 00	 call	 sscanf
  002ae	83 f8 01	 cmp	 eax, 1
  002b1	75 18		 jne	 SHORT $LN21@sysepoch_c
  002b3	81 7c 24 58 72
	ff ff ff	 cmp	 DWORD PTR yroffset$[rsp], -142 ; ffffffffffffff72H
  002bb	7c 0e		 jl	 SHORT $LN21@sysepoch_c
  002bd	81 7c 24 58 8e
	00 00 00	 cmp	 DWORD PTR yroffset$[rsp], 142 ; 0000008eH
  002c5	0f 8e 85 00 00
	00		 jle	 $LN20@sysepoch_c
$LN21@sysepoch_c:

; 3380 :             {
; 3381 :                 WRMSG( HHC01451, "E", syroffset, argv[0] );

  002cb	b8 08 00 00 00	 mov	 eax, 8
  002d0	48 6b c0 00	 imul	 rax, rax, 0
  002d4	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv165[rsp], rax
  002dc	b9 01 00 00 00	 mov	 ecx, 1
  002e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002e7	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002ef	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv165[rsp]
  002f7	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  002fb	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00300	48 8b 4c 24 68	 mov	 rcx, QWORD PTR syroffset$[rsp]
  00305	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0030a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207087
  00311	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00316	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207088
  0031d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00322	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00327	41 b9 03 00 00
	00		 mov	 r9d, 3
  0032d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207089
  00334	ba 35 0d 00 00	 mov	 edx, 3381		; 00000d35H
  00339	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207090
  00340	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3382 :                 rc = -1;

  00346	c7 44 24 5c ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 3383 :                 break;

  0034e	eb 19		 jmp	 SHORT $LN6@sysepoch_c
$LN20@sysepoch_c:
$LN19@sysepoch_c:

; 3384 :             }
; 3385 :         }
; 3386 : 
; 3387 :         configure_epoch(sysepoch);

  00350	8b 4c 24 54	 mov	 ecx, DWORD PTR sysepoch$[rsp]
  00354	e8 00 00 00 00	 call	 configure_epoch

; 3388 :         configure_yroffset(yroffset);

  00359	8b 4c 24 58	 mov	 ecx, DWORD PTR yroffset$[rsp]
  0035d	e8 00 00 00 00	 call	 configure_yroffset

; 3389 : 
; 3390 :         break;

  00362	eb 05		 jmp	 SHORT $LN6@sysepoch_c

; 3391 :     }

  00364	e9 68 fd ff ff	 jmp	 $LN5@sysepoch_c
$LN6@sysepoch_c:
$LN9@sysepoch_c:

; 3392 : 
; 3393 :     return rc;

  00369	8b 44 24 5c	 mov	 eax, DWORD PTR rc$[rsp]

; 3394 : }

  0036d	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00374	c3		 ret	 0
sysepoch_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
ptyp$ = 96
c$ = 97
cpu$ = 100
styp$ = 104
count$ = 112
tv188 = 116
tv198 = 120
strtok_str$ = 128
tv89 = 136
tv173 = 144
tv195 = 152
tv202 = 160
tv223 = 168
argc$ = 192
argv$ = 200
cmdline$ = 208
engines_cmd PROC

; 3270 : {

$LN26:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 3271 : char *styp;                           /* -> Engine type string     */
; 3272 : BYTE ptyp;                           /* Processor engine type     */
; 3273 : int  cpu,count;
; 3274 : BYTE c;
; 3275 : char *strtok_str = NULL;

  00015	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR strtok_str$[rsp], 0
$LN4@engines_cm:

; 3276 : 
; 3277 :     UNREFERENCED(cmdline);

  00021	33 c0		 xor	 eax, eax
  00023	85 c0		 test	 eax, eax
  00025	75 fa		 jne	 SHORT $LN4@engines_cm

; 3278 : 
; 3279 :     /* Parse processor engine types operand */
; 3280 :     /* example: ENGINES 4*CP,AP,2*IP */
; 3281 :     if ( argc == 2 )

  00027	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0002f	0f 85 f4 03 00
	00		 jne	 $LN10@engines_cm

; 3282 :     {
; 3283 :         styp = strtok_r(argv[1],",",&strtok_str );

  00035	b8 08 00 00 00	 mov	 eax, 8
  0003a	48 6b c0 01	 imul	 rax, rax, 1
  0003e	4c 8d 84 24 80
	00 00 00	 lea	 r8, QWORD PTR strtok_str$[rsp]
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206991
  0004d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00055	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00059	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtok_r
  0005f	48 89 44 24 68	 mov	 QWORD PTR styp$[rsp], rax

; 3284 :         for (cpu = 0; styp != NULL; )

  00064	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR cpu$[rsp], 0
$LN5@engines_cm:
  0006c	48 83 7c 24 68
	00		 cmp	 QWORD PTR styp$[rsp], 0
  00072	0f 84 af 03 00
	00		 je	 $LN6@engines_cm

; 3285 :         {
; 3286 :             count = 1;

  00078	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR count$[rsp], 1

; 3287 :             if (isdigit(styp[0]))

  00080	b8 01 00 00 00	 mov	 eax, 1
  00085	48 6b c0 00	 imul	 rax, rax, 0
  00089	48 8b 4c 24 68	 mov	 rcx, QWORD PTR styp$[rsp]
  0008e	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00092	8b c8		 mov	 ecx, eax
  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  0009a	85 c0		 test	 eax, eax
  0009c	0f 84 d7 00 00
	00		 je	 $LN12@engines_cm

; 3288 :             {
; 3289 :                 if (0
; 3290 :                     || sscanf(styp, "%d%c", &count, &c) != 2
; 3291 :                     || c != '*'
; 3292 :                     || count < 1

  000a2	33 c0		 xor	 eax, eax
  000a4	85 c0		 test	 eax, eax
  000a6	75 35		 jne	 SHORT $LN14@engines_cm
  000a8	4c 8d 4c 24 61	 lea	 r9, QWORD PTR c$[rsp]
  000ad	4c 8d 44 24 70	 lea	 r8, QWORD PTR count$[rsp]
  000b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206995
  000b9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR styp$[rsp]
  000be	e8 00 00 00 00	 call	 sscanf
  000c3	83 f8 02	 cmp	 eax, 2
  000c6	75 15		 jne	 SHORT $LN14@engines_cm
  000c8	0f b6 44 24 61	 movzx	 eax, BYTE PTR c$[rsp]
  000cd	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  000d0	75 0b		 jne	 SHORT $LN14@engines_cm
  000d2	83 7c 24 70 01	 cmp	 DWORD PTR count$[rsp], 1
  000d7	0f 8d 85 00 00
	00		 jge	 $LN13@engines_cm
$LN14@engines_cm:

; 3293 :                 )
; 3294 :                 {
; 3295 :                     // "Invalid syntax %s for %s"
; 3296 :                     WRMSG( HHC01456, "E", styp, argv[0] );

  000dd	b8 08 00 00 00	 mov	 eax, 8
  000e2	48 6b c0 00	 imul	 rax, rax, 0
  000e6	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv89[rsp], rax
  000ee	b9 01 00 00 00	 mov	 ecx, 1
  000f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000f9	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00101	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv89[rsp]
  00109	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0010d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00112	48 8b 4c 24 68	 mov	 rcx, QWORD PTR styp$[rsp]
  00117	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0011c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206996
  00123	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00128	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206997
  0012f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00134	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00139	41 b9 03 00 00
	00		 mov	 r9d, 3
  0013f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206998
  00146	ba e0 0c 00 00	 mov	 edx, 3296		; 00000ce0H
  0014b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206999
  00152	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3297 :                     return -1;

  00158	b8 ff ff ff ff	 mov	 eax, -1
  0015d	e9 41 03 00 00	 jmp	 $LN1@engines_cm
$LN13@engines_cm:

; 3298 :                 }
; 3299 :                 styp = strchr(styp,'*') + 1;

  00162	ba 2a 00 00 00	 mov	 edx, 42			; 0000002aH
  00167	48 8b 4c 24 68	 mov	 rcx, QWORD PTR styp$[rsp]
  0016c	e8 00 00 00 00	 call	 strchr
  00171	48 ff c0	 inc	 rax
  00174	48 89 44 24 68	 mov	 QWORD PTR styp$[rsp], rax
$LN12@engines_cm:

; 3300 :             }
; 3301 :                  if (CMD( styp, CP, 2)) ptyp = short2ptyp( "CP" );

  00179	41 b8 02 00 00
	00		 mov	 r8d, 2
  0017f	48 8b 54 24 68	 mov	 rdx, QWORD PTR styp$[rsp]
  00184	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207002
  0018b	e8 00 00 00 00	 call	 strcaseabbrev
  00190	85 c0		 test	 eax, eax
  00192	74 16		 je	 SHORT $LN15@engines_cm
  00194	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207003
  0019b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_short2ptyp
  001a1	88 44 24 60	 mov	 BYTE PTR ptyp$[rsp], al
  001a5	e9 49 01 00 00	 jmp	 $LN16@engines_cm
$LN15@engines_cm:

; 3302 :             else if (CMD( styp, CF, 2)) ptyp = short2ptyp( "CF" );

  001aa	41 b8 02 00 00
	00		 mov	 r8d, 2
  001b0	48 8b 54 24 68	 mov	 rdx, QWORD PTR styp$[rsp]
  001b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207006
  001bc	e8 00 00 00 00	 call	 strcaseabbrev
  001c1	85 c0		 test	 eax, eax
  001c3	74 16		 je	 SHORT $LN17@engines_cm
  001c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207007
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_short2ptyp
  001d2	88 44 24 60	 mov	 BYTE PTR ptyp$[rsp], al
  001d6	e9 18 01 00 00	 jmp	 $LN18@engines_cm
$LN17@engines_cm:

; 3303 :             else if (CMD( styp, IL, 2)) ptyp = short2ptyp( "IL" );

  001db	41 b8 02 00 00
	00		 mov	 r8d, 2
  001e1	48 8b 54 24 68	 mov	 rdx, QWORD PTR styp$[rsp]
  001e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207010
  001ed	e8 00 00 00 00	 call	 strcaseabbrev
  001f2	85 c0		 test	 eax, eax
  001f4	74 16		 je	 SHORT $LN19@engines_cm
  001f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207011
  001fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_short2ptyp
  00203	88 44 24 60	 mov	 BYTE PTR ptyp$[rsp], al
  00207	e9 e7 00 00 00	 jmp	 $LN20@engines_cm
$LN19@engines_cm:

; 3304 :             else if (CMD( styp, AP, 2)) ptyp = short2ptyp( "AP" );

  0020c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00212	48 8b 54 24 68	 mov	 rdx, QWORD PTR styp$[rsp]
  00217	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207014
  0021e	e8 00 00 00 00	 call	 strcaseabbrev
  00223	85 c0		 test	 eax, eax
  00225	74 16		 je	 SHORT $LN21@engines_cm
  00227	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207015
  0022e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_short2ptyp
  00234	88 44 24 60	 mov	 BYTE PTR ptyp$[rsp], al
  00238	e9 b6 00 00 00	 jmp	 $LN22@engines_cm
$LN21@engines_cm:

; 3305 :             else if (CMD( styp, IP, 2)) ptyp = short2ptyp( "IP" );

  0023d	41 b8 02 00 00
	00		 mov	 r8d, 2
  00243	48 8b 54 24 68	 mov	 rdx, QWORD PTR styp$[rsp]
  00248	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207018
  0024f	e8 00 00 00 00	 call	 strcaseabbrev
  00254	85 c0		 test	 eax, eax
  00256	74 16		 je	 SHORT $LN23@engines_cm
  00258	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207019
  0025f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_short2ptyp
  00265	88 44 24 60	 mov	 BYTE PTR ptyp$[rsp], al
  00269	e9 85 00 00 00	 jmp	 $LN24@engines_cm
$LN23@engines_cm:

; 3306 :             else
; 3307 :             {
; 3308 :                 // "Invalid value %s specified for %s"
; 3309 :                 WRMSG( HHC01451, "E", styp, argv[0] );

  0026e	b8 08 00 00 00	 mov	 eax, 8
  00273	48 6b c0 00	 imul	 rax, rax, 0
  00277	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv173[rsp], rax
  0027f	b9 01 00 00 00	 mov	 ecx, 1
  00284	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0028a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00292	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tv173[rsp]
  0029a	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0029e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002a3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR styp$[rsp]
  002a8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207020
  002b4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207021
  002c0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002c5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002ca	41 b9 03 00 00
	00		 mov	 r9d, 3
  002d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207022
  002d7	ba ed 0c 00 00	 mov	 edx, 3309		; 00000cedH
  002dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207023
  002e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3310 :                 return -1;

  002e9	b8 ff ff ff ff	 mov	 eax, -1
  002ee	e9 b0 01 00 00	 jmp	 $LN1@engines_cm
$LN24@engines_cm:
$LN22@engines_cm:
$LN20@engines_cm:
$LN18@engines_cm:
$LN16@engines_cm:
$LN8@engines_cm:

; 3311 :             }
; 3312 :             while (count-- > 0 && cpu < sysblk.maxcpu)

  002f3	8b 44 24 70	 mov	 eax, DWORD PTR count$[rsp]
  002f7	89 44 24 74	 mov	 DWORD PTR tv188[rsp], eax
  002fb	8b 44 24 70	 mov	 eax, DWORD PTR count$[rsp]
  002ff	ff c8		 dec	 eax
  00301	89 44 24 70	 mov	 DWORD PTR count$[rsp], eax
  00305	83 7c 24 74 00	 cmp	 DWORD PTR tv188[rsp], 0
  0030a	0f 8e f6 00 00
	00		 jle	 $LN9@engines_cm
  00310	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00317	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0031d	39 44 24 64	 cmp	 DWORD PTR cpu$[rsp], eax
  00321	0f 8d df 00 00
	00		 jge	 $LN9@engines_cm

; 3313 :             {
; 3314 :                 sysblk.ptyp[cpu] = ptyp;

  00327	48 63 44 24 64	 movsxd	 rax, DWORD PTR cpu$[rsp]
  0032c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00333	0f b6 54 24 60	 movzx	 edx, BYTE PTR ptyp$[rsp]
  00338	88 94 01 48 0b
	00 00		 mov	 BYTE PTR [rcx+rax+2888], dl

; 3315 :                 // "Processor %s%02X: engine %02X type %1d set: %s"
; 3316 :                 WRMSG( HHC00827, "I", PTYPSTR(cpu), cpu, cpu, ptyp, ptyp2short( ptyp ));

  0033f	0f b6 4c 24 60	 movzx	 ecx, BYTE PTR ptyp$[rsp]
  00344	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  0034a	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv195[rsp], rax
  00352	0f b6 4c 24 60	 movzx	 ecx, BYTE PTR ptyp$[rsp]
  00357	89 4c 24 78	 mov	 DWORD PTR tv198[rsp], ecx
  0035b	48 63 54 24 64	 movsxd	 rdx, DWORD PTR cpu$[rsp]
  00360	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  00367	41 0f b6 8c 10
	48 0b 00 00	 movzx	 ecx, BYTE PTR [r8+rdx+2888]
  00370	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  00376	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv202[rsp], rax
  0037e	b9 01 00 00 00	 mov	 ecx, 1
  00383	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00389	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv195[rsp]
  00391	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00396	8b 4c 24 78	 mov	 ecx, DWORD PTR tv198[rsp]
  0039a	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  0039e	8b 4c 24 64	 mov	 ecx, DWORD PTR cpu$[rsp]
  003a2	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  003a6	8b 4c 24 64	 mov	 ecx, DWORD PTR cpu$[rsp]
  003aa	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  003ae	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv202[rsp]
  003b6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207024
  003c2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207025
  003ce	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003d3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003d8	41 b9 03 00 00
	00		 mov	 r9d, 3
  003de	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207026
  003e5	ba f4 0c 00 00	 mov	 edx, 3316		; 00000cf4H
  003ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207027
  003f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3317 :                 cpu++;

  003f7	8b 44 24 64	 mov	 eax, DWORD PTR cpu$[rsp]
  003fb	ff c0		 inc	 eax
  003fd	89 44 24 64	 mov	 DWORD PTR cpu$[rsp], eax

; 3318 :             }

  00401	e9 ed fe ff ff	 jmp	 $LN8@engines_cm
$LN9@engines_cm:

; 3319 :             styp = strtok_r(NULL,",",&strtok_str );

  00406	4c 8d 84 24 80
	00 00 00	 lea	 r8, QWORD PTR strtok_str$[rsp]
  0040e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG207028
  00415	33 c9		 xor	 ecx, ecx
  00417	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtok_r
  0041d	48 89 44 24 68	 mov	 QWORD PTR styp$[rsp], rax

; 3320 :         }

  00422	e9 45 fc ff ff	 jmp	 $LN5@engines_cm
$LN6@engines_cm:

; 3321 :     }

  00427	eb 78		 jmp	 SHORT $LN11@engines_cm
$LN10@engines_cm:

; 3322 :     else
; 3323 :     {
; 3324 :         // "Invalid number of arguments for %s"
; 3325 :         WRMSG( HHC01455, "E", argv[0] );

  00429	b8 08 00 00 00	 mov	 eax, 8
  0042e	48 6b c0 00	 imul	 rax, rax, 0
  00432	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv223[rsp], rax
  0043a	b9 01 00 00 00	 mov	 ecx, 1
  0043f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00445	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0044d	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR tv223[rsp]
  00455	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00459	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0045e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207029
  00465	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0046a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207030
  00471	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00476	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0047b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00481	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG207031
  00488	ba fd 0c 00 00	 mov	 edx, 3325		; 00000cfdH
  0048d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG207032
  00494	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3326 :         return -1;

  0049a	b8 ff ff ff ff	 mov	 eax, -1
  0049f	eb 02		 jmp	 SHORT $LN1@engines_cm
$LN11@engines_cm:

; 3327 :     }
; 3328 : 
; 3329 :     return 0;

  004a1	33 c0		 xor	 eax, eax
$LN1@engines_cm:

; 3330 : }

  004a3	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  004aa	c3		 ret	 0
engines_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
basedir$ = 80
p$1 = 88
p$2 = 96
tv89 = 104
tv144 = 112
buf$3 = 128
__$ArrayPad$ = 464
argc$ = 496
argv$ = 504
cmdline$ = 512
sclproot_cmd PROC

; 3220 : {

$LN18:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec e8 01
	00 00		 sub	 rsp, 488		; 000001e8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@sclproot_c:

; 3221 :     char* basedir;
; 3222 : 
; 3223 :     UNREFERENCED( cmdline );

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@sclproot_c
$LN7@sclproot_c:

; 3224 :     UPPER_ARGV_0( argv );

  0002d	48 83 bc 24 f8
	01 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00036	74 47		 je	 SHORT $LN8@sclproot_c
  00038	b8 08 00 00 00	 mov	 eax, 8
  0003d	48 6b c0 00	 imul	 rax, rax, 0
  00041	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00049	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0004e	74 2f		 je	 SHORT $LN8@sclproot_c
  00050	b8 08 00 00 00	 mov	 eax, 8
  00055	48 6b c0 00	 imul	 rax, rax, 0
  00059	b9 08 00 00 00	 mov	 ecx, 8
  0005e	48 6b c9 00	 imul	 rcx, rcx, 0
  00062	48 8b 94 24 f8
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006a	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0006e	48 8b 84 24 f8
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00076	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0007a	e8 00 00 00 00	 call	 strupper
$LN8@sclproot_c:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 a8		 jne	 SHORT $LN7@sclproot_c

; 3225 : 
; 3226 :     if (argc > 1)

  00085	83 bc 24 f0 01
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0008d	0f 8e de 00 00
	00		 jle	 $LN9@sclproot_c

; 3227 :     {
; 3228 :         char* p = "NONE";

  00093	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206941
  0009a	48 89 44 24 60	 mov	 QWORD PTR p$2[rsp], rax

; 3229 : 
; 3230 :         if (CMD( argv[1], NONE, 4 ))

  0009f	b8 08 00 00 00	 mov	 eax, 8
  000a4	48 6b c0 01	 imul	 rax, rax, 1
  000a8	41 b8 04 00 00
	00		 mov	 r8d, 4
  000ae	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000b6	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206944
  000c1	e8 00 00 00 00	 call	 strcaseabbrev
  000c6	85 c0		 test	 eax, eax
  000c8	74 09		 je	 SHORT $LN11@sclproot_c

; 3231 :             set_sce_dir( NULL );

  000ca	33 c9		 xor	 ecx, ecx
  000cc	e8 00 00 00 00	 call	 set_sce_dir
  000d1	eb 24		 jmp	 SHORT $LN12@sclproot_c
$LN11@sclproot_c:

; 3232 :         else
; 3233 : 
; 3234 :             set_sce_dir( p = argv[1] );

  000d3	b8 08 00 00 00	 mov	 eax, 8
  000d8	48 6b c0 01	 imul	 rax, rax, 1
  000dc	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000e4	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000e8	48 89 44 24 60	 mov	 QWORD PTR p$2[rsp], rax
  000ed	48 8b 4c 24 60	 mov	 rcx, QWORD PTR p$2[rsp]
  000f2	e8 00 00 00 00	 call	 set_sce_dir
$LN12@sclproot_c:

; 3235 : 
; 3236 :         // "%-14s set to %s"
; 3237 :         WRMSG( HHC02204, "I", argv[0], p );

  000f7	b8 08 00 00 00	 mov	 eax, 8
  000fc	48 6b c0 00	 imul	 rax, rax, 0
  00100	48 89 44 24 68	 mov	 QWORD PTR tv89[rsp], rax
  00105	b9 01 00 00 00	 mov	 ecx, 1
  0010a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00110	48 8b 4c 24 60	 mov	 rcx, QWORD PTR p$2[rsp]
  00115	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0011a	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00122	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv89[rsp]
  00127	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0012b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00130	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206945
  00137	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206946
  00143	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00148	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00153	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206947
  0015a	ba a5 0c 00 00	 mov	 edx, 3237		; 00000ca5H
  0015f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206948
  00166	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3238 :     }

  0016c	e9 40 01 00 00	 jmp	 $LN10@sclproot_c
$LN9@sclproot_c:

; 3239 :     else
; 3240 :     {
; 3241 :         if ((basedir = get_sce_dir()))

  00171	e8 00 00 00 00	 call	 get_sce_dir
  00176	48 89 44 24 50	 mov	 QWORD PTR basedir$[rsp], rax
  0017b	48 83 7c 24 50
	00		 cmp	 QWORD PTR basedir$[rsp], 0
  00181	0f 84 cb 00 00
	00		 je	 $LN13@sclproot_c

; 3242 :         {
; 3243 :             char buf[ MAX_PATH + 64 ];
; 3244 :             char* p = strchr( basedir, ' ' );

  00187	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0018c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR basedir$[rsp]
  00191	e8 00 00 00 00	 call	 strchr
  00196	48 89 44 24 58	 mov	 QWORD PTR p$1[rsp], rax

; 3245 : 
; 3246 :             if (!p)

  0019b	48 83 7c 24 58
	00		 cmp	 QWORD PTR p$1[rsp], 0
  001a1	75 0c		 jne	 SHORT $LN15@sclproot_c

; 3247 :                 p = basedir;

  001a3	48 8b 44 24 50	 mov	 rax, QWORD PTR basedir$[rsp]
  001a8	48 89 44 24 58	 mov	 QWORD PTR p$1[rsp], rax
  001ad	eb 2c		 jmp	 SHORT $LN16@sclproot_c
$LN15@sclproot_c:

; 3248 :             else
; 3249 :             {
; 3250 :                 MSGBUF( buf, "\"%s\"", basedir );

  001af	4c 8b 4c 24 50	 mov	 r9, QWORD PTR basedir$[rsp]
  001b4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206953
  001bb	ba 44 01 00 00	 mov	 edx, 324		; 00000144H
  001c0	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buf$3[rsp]
  001c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 3251 :                 p = buf;

  001ce	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR buf$3[rsp]
  001d6	48 89 44 24 58	 mov	 QWORD PTR p$1[rsp], rax
$LN16@sclproot_c:

; 3252 :             }
; 3253 : 
; 3254 :             // "%-14s: %s"
; 3255 :             WRMSG( HHC02203, "I", argv[0], p );

  001db	b8 08 00 00 00	 mov	 eax, 8
  001e0	48 6b c0 00	 imul	 rax, rax, 0
  001e4	48 89 44 24 70	 mov	 QWORD PTR tv144[rsp], rax
  001e9	b9 01 00 00 00	 mov	 ecx, 1
  001ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001f4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR p$1[rsp]
  001f9	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001fe	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00206	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv144[rsp]
  0020b	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0020f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00214	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206954
  0021b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00220	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206955
  00227	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0022c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00231	41 b9 03 00 00
	00		 mov	 r9d, 3
  00237	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206956
  0023e	ba b7 0c 00 00	 mov	 edx, 3255		; 00000cb7H
  00243	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206957
  0024a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3256 :         }

  00250	eb 5f		 jmp	 SHORT $LN14@sclproot_c
$LN13@sclproot_c:

; 3257 :         else
; 3258 :         {
; 3259 :             // "%-14s: %s"
; 3260 :             WRMSG( HHC02203, "I", "SCLP disk I/O", "disabled" );

  00252	b9 01 00 00 00	 mov	 ecx, 1
  00257	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0025d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206958
  00264	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00269	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206959
  00270	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00275	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206960
  0027c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00281	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206961
  00288	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0028d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00292	41 b9 03 00 00
	00		 mov	 r9d, 3
  00298	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206962
  0029f	ba bc 0c 00 00	 mov	 edx, 3260		; 00000cbcH
  002a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206963
  002ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN14@sclproot_c:
$LN10@sclproot_c:

; 3261 :         }
; 3262 :     }
; 3263 :     return 0;

  002b1	33 c0		 xor	 eax, eax

; 3264 : }

  002b3	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  002bb	48 33 cc	 xor	 rcx, rsp
  002be	e8 00 00 00 00	 call	 __security_check_cookie
  002c3	48 81 c4 e8 01
	00 00		 add	 rsp, 488		; 000001e8H
  002ca	c3		 ret	 0
sclproot_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
enabled$1 = 80
enabled$2 = 81
devnum$3 = 84
lcss$4 = 88
dev$5 = 96
tv297 = 104
tv349 = 108
tv351 = 112
rc$6 = 116
tv198 = 120
tv200 = 124
devclass$7 = 128
tv251 = 136
tv335 = 144
tv83 = 152
tv137 = 160
tv234 = 168
tv318 = 176
tv364 = 184
buf$ = 192
__$ArrayPad$ = 256
argc$ = 288
argv$ = 296
cmdline$ = 304
tt32_cmd PROC

; 3089 : {

$LN35:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@tt32_cmd:

; 3090 :     char buf[64];
; 3091 : 
; 3092 :     UNREFERENCED( cmdline );

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@tt32_cmd
$LN7@tt32_cmd:

; 3093 :     UPPER_ARGV_0( argv );

  0002d	48 83 bc 24 28
	01 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00036	74 47		 je	 SHORT $LN8@tt32_cmd
  00038	b8 08 00 00 00	 mov	 eax, 8
  0003d	48 6b c0 00	 imul	 rax, rax, 0
  00041	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00049	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0004e	74 2f		 je	 SHORT $LN8@tt32_cmd
  00050	b8 08 00 00 00	 mov	 eax, 8
  00055	48 6b c0 00	 imul	 rax, rax, 0
  00059	b9 08 00 00 00	 mov	 ecx, 8
  0005e	48 6b c9 00	 imul	 rcx, rcx, 0
  00062	48 8b 94 24 28
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006a	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0006e	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00076	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0007a	e8 00 00 00 00	 call	 strupper
$LN8@tt32_cmd:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 a8		 jne	 SHORT $LN7@tt32_cmd

; 3094 :     MSGBUF( buf, ". Type 'help %s' for assistance", argv[0] );

  00085	b8 08 00 00 00	 mov	 eax, 8
  0008a	48 6b c0 00	 imul	 rax, rax, 0
  0008e	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00096	4c 8b 0c 01	 mov	 r9, QWORD PTR [rcx+rax]
  0009a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206840
  000a1	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000a6	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  000ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 3095 : 
; 3096 :     if (argc < 2)

  000b4	83 bc 24 20 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000bc	7d 7b		 jge	 SHORT $LN9@tt32_cmd

; 3097 :     {
; 3098 :         // "Missing argument(s). Type 'help %s' for assistance."
; 3099 :         WRMSG( HHC02202, "E", argv[0] );

  000be	b8 08 00 00 00	 mov	 eax, 8
  000c3	48 6b c0 00	 imul	 rax, rax, 0
  000c7	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv83[rsp], rax
  000cf	b9 01 00 00 00	 mov	 ecx, 1
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000da	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000e2	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR tv83[rsp]
  000ea	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000ee	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206842
  000fa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206843
  00106	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0010b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00110	41 b9 03 00 00
	00		 mov	 r9d, 3
  00116	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206844
  0011d	ba 1b 0c 00 00	 mov	 edx, 3099		; 00000c1bH
  00122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206845
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3100 :         return -1;

  0012f	b8 ff ff ff ff	 mov	 eax, -1
  00134	e9 c6 07 00 00	 jmp	 $LN1@tt32_cmd
$LN9@tt32_cmd:

; 3101 :     }
; 3102 : 
; 3103 :     if (CMD( argv[1], STATS, 5 ))

  00139	b8 08 00 00 00	 mov	 eax, 8
  0013e	48 6b c0 01	 imul	 rax, rax, 1
  00142	41 b8 05 00 00
	00		 mov	 r8d, 5
  00148	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00150	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00154	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206847
  0015b	e8 00 00 00 00	 call	 strcaseabbrev
  00160	85 c0		 test	 eax, eax
  00162	0f 84 02 03 00
	00		 je	 $LN10@tt32_cmd

; 3104 :     {
; 3105 :         DEVBLK*  dev;
; 3106 :         char*    devclass;
; 3107 :         int      rc;
; 3108 :         U16      devnum;
; 3109 :         U16      lcss;
; 3110 : 
; 3111 :         if (argc < 3)

  00168	83 bc 24 20 01
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00170	7d 0f		 jge	 SHORT $LN11@tt32_cmd

; 3112 :         {
; 3113 :             // HHC02201 "Device number missing"
; 3114 :             missing_devnum();

  00172	e8 00 00 00 00	 call	 missing_devnum

; 3115 :             return -1;

  00177	b8 ff ff ff ff	 mov	 eax, -1
  0017c	e9 7e 07 00 00	 jmp	 $LN1@tt32_cmd
$LN11@tt32_cmd:

; 3116 :         }
; 3117 : 
; 3118 :         if (argc > 3)

  00181	83 bc 24 20 01
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00189	0f 8e 88 00 00
	00		 jle	 $LN12@tt32_cmd

; 3119 :         {
; 3120 :             // "Invalid argument %s%s"
; 3121 :             WRMSG( HHC02205, "E", argv[3], buf );

  0018f	b8 08 00 00 00	 mov	 eax, 8
  00194	48 6b c0 03	 imul	 rax, rax, 3
  00198	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv137[rsp], rax
  001a0	b9 01 00 00 00	 mov	 ecx, 1
  001a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001ab	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  001b3	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001b8	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001c0	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR tv137[rsp]
  001c8	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001cc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206850
  001d8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206851
  001e4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001e9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ee	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206852
  001fb	ba 31 0c 00 00	 mov	 edx, 3121		; 00000c31H
  00200	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206853
  00207	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3122 :             return -1;

  0020d	b8 ff ff ff ff	 mov	 eax, -1
  00212	e9 e8 06 00 00	 jmp	 $LN1@tt32_cmd
$LN12@tt32_cmd:

; 3123 :         }
; 3124 : 
; 3125 :         if ((rc = parse_single_devnum( argv[2], &lcss, &devnum )) < 0)

  00217	b8 08 00 00 00	 mov	 eax, 8
  0021c	48 6b c0 02	 imul	 rax, rax, 2
  00220	4c 8d 44 24 54	 lea	 r8, QWORD PTR devnum$3[rsp]
  00225	48 8d 54 24 58	 lea	 rdx, QWORD PTR lcss$4[rsp]
  0022a	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00232	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00236	e8 00 00 00 00	 call	 parse_single_devnum
  0023b	89 44 24 74	 mov	 DWORD PTR rc$6[rsp], eax
  0023f	83 7c 24 74 00	 cmp	 DWORD PTR rc$6[rsp], 0
  00244	7d 0a		 jge	 SHORT $LN13@tt32_cmd

; 3126 :             return -1;

  00246	b8 ff ff ff ff	 mov	 eax, -1
  0024b	e9 af 06 00 00	 jmp	 $LN1@tt32_cmd
$LN13@tt32_cmd:

; 3127 : 
; 3128 :         if (!(dev = find_device_by_devnum( lcss, devnum )) &&

  00250	0f b7 54 24 54	 movzx	 edx, WORD PTR devnum$3[rsp]
  00255	0f b7 4c 24 58	 movzx	 ecx, WORD PTR lcss$4[rsp]
  0025a	e8 00 00 00 00	 call	 find_device_by_devnum
  0025f	48 89 44 24 60	 mov	 QWORD PTR dev$5[rsp], rax
  00264	48 83 7c 24 60
	00		 cmp	 QWORD PTR dev$5[rsp], 0
  0026a	75 3b		 jne	 SHORT $LN14@tt32_cmd
  0026c	0f b7 44 24 54	 movzx	 eax, WORD PTR devnum$3[rsp]
  00271	83 f0 01	 xor	 eax, 1
  00274	0f b7 d0	 movzx	 edx, ax
  00277	0f b7 4c 24 58	 movzx	 ecx, WORD PTR lcss$4[rsp]
  0027c	e8 00 00 00 00	 call	 find_device_by_devnum
  00281	48 89 44 24 60	 mov	 QWORD PTR dev$5[rsp], rax
  00286	48 83 7c 24 60
	00		 cmp	 QWORD PTR dev$5[rsp], 0
  0028c	75 19		 jne	 SHORT $LN14@tt32_cmd

; 3129 :             !(dev = find_device_by_devnum( lcss, devnum ^ 0x01 )))
; 3130 :         {
; 3131 :             // HHC02200 "%1d:%04X device not found"
; 3132 :             devnotfound_msg( lcss, devnum );

  0028e	0f b7 54 24 54	 movzx	 edx, WORD PTR devnum$3[rsp]
  00293	0f b7 4c 24 58	 movzx	 ecx, WORD PTR lcss$4[rsp]
  00298	e8 00 00 00 00	 call	 devnotfound_msg

; 3133 :             return -1;

  0029d	b8 ff ff ff ff	 mov	 eax, -1
  002a2	e9 58 06 00 00	 jmp	 $LN1@tt32_cmd
$LN14@tt32_cmd:

; 3134 :         }
; 3135 : 
; 3136 :         // Device must be a non-8232 "CTCA" LCS/CTCI device or an "OSA" device
; 3137 : 
; 3138 :         (dev->hnd->query)( dev, &devclass, 0, NULL );

  002a7	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$5[rsp]
  002ac	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  002b3	45 33 c9	 xor	 r9d, r9d
  002b6	45 33 c0	 xor	 r8d, r8d
  002b9	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR devclass$7[rsp]
  002c1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$5[rsp]
  002c6	ff 50 18	 call	 QWORD PTR [rax+24]

; 3139 : 
; 3140 :         if (1
; 3141 :             && strcasecmp( devclass, "OSA" ) != 0
; 3142 :             && (0

  002c9	33 c0		 xor	 eax, eax
  002cb	83 f8 01	 cmp	 eax, 1
  002ce	0f 84 05 01 00
	00		 je	 $LN15@tt32_cmd
  002d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206857
  002db	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR devclass$7[rsp]
  002e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  002e9	85 c0		 test	 eax, eax
  002eb	0f 84 e8 00 00
	00		 je	 $LN15@tt32_cmd
  002f1	33 c0		 xor	 eax, eax
  002f3	85 c0		 test	 eax, eax
  002f5	75 63		 jne	 SHORT $LN16@tt32_cmd
  002f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206859
  002fe	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR devclass$7[rsp]
  00306	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0030c	85 c0		 test	 eax, eax
  0030e	75 4a		 jne	 SHORT $LN16@tt32_cmd
  00310	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206860
  00317	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$5[rsp]
  0031c	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  00320	e8 00 00 00 00	 call	 strcmp
  00325	85 c0		 test	 eax, eax
  00327	74 31		 je	 SHORT $LN16@tt32_cmd
  00329	33 c0		 xor	 eax, eax
  0032b	83 f8 01	 cmp	 eax, 1
  0032e	0f 84 a5 00 00
	00		 je	 $LN15@tt32_cmd
  00334	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$5[rsp]
  00339	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  00340	83 f8 02	 cmp	 eax, 2
  00343	0f 84 90 00 00
	00		 je	 $LN15@tt32_cmd
  00349	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$5[rsp]
  0034e	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  00355	83 f8 01	 cmp	 eax, 1
  00358	74 7f		 je	 SHORT $LN15@tt32_cmd
$LN16@tt32_cmd:

; 3143 :                 || strcasecmp( devclass, "CTCA" ) != 0
; 3144 :                 || strcmp( dev->typname, "8232" ) == 0
; 3145 :                 || (1
; 3146 :                     && CTC_CTCI != dev->ctctype
; 3147 :                     && CTC_LCS  != dev->ctctype
; 3148 :                    )
; 3149 :                )
; 3150 :         )
; 3151 :         {
; 3152 :             // "%1d:%04X device is not a '%s'"
; 3153 :             WRMSG( HHC02209, "E", lcss, devnum, "supported CTCI, LCS or OSA device" );

  0035a	0f b7 44 24 54	 movzx	 eax, WORD PTR devnum$3[rsp]
  0035f	89 44 24 78	 mov	 DWORD PTR tv198[rsp], eax
  00363	0f b7 4c 24 58	 movzx	 ecx, WORD PTR lcss$4[rsp]
  00368	89 4c 24 7c	 mov	 DWORD PTR tv200[rsp], ecx
  0036c	b9 01 00 00 00	 mov	 ecx, 1
  00371	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00377	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206861
  0037e	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00383	8b 4c 24 78	 mov	 ecx, DWORD PTR tv198[rsp]
  00387	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0038b	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv200[rsp]
  0038f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00393	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206862
  0039a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0039f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206863
  003a6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003ab	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003b0	41 b9 03 00 00
	00		 mov	 r9d, 3
  003b6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206864
  003bd	ba 51 0c 00 00	 mov	 edx, 3153		; 00000c51H
  003c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206865
  003c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3154 :             return -1;

  003cf	b8 ff ff ff ff	 mov	 eax, -1
  003d4	e9 26 05 00 00	 jmp	 $LN1@tt32_cmd
$LN15@tt32_cmd:

; 3155 :         }
; 3156 : 
; 3157 :         if (debug_tt32_stats)

  003d9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_debug_tt32_stats
  003e0	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  003e4	74 1b		 je	 SHORT $LN17@tt32_cmd

; 3158 :         {
; 3159 :             debug_tt32_stats( dev->fd );

  003e6	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$5[rsp]
  003eb	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  003f1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_debug_tt32_stats
  003f8	ff 10		 call	 QWORD PTR [rax]

; 3160 :             return 0;

  003fa	33 c0		 xor	 eax, eax
  003fc	e9 fe 04 00 00	 jmp	 $LN1@tt32_cmd
$LN17@tt32_cmd:

; 3161 :         }
; 3162 : 
; 3163 :         // "Error in function %s: %s"
; 3164 :         WRMSG( HHC02219, "E", "debug_tt32_stats()", "function itself is NULL" );

  00401	b9 01 00 00 00	 mov	 ecx, 1
  00406	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0040c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206867
  00413	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00418	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206868
  0041f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00424	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206869
  0042b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00430	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206870
  00437	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0043c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00441	41 b9 03 00 00
	00		 mov	 r9d, 3
  00447	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206871
  0044e	ba 5c 0c 00 00	 mov	 edx, 3164		; 00000c5cH
  00453	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206872
  0045a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3165 :         return -1;

  00460	b8 ff ff ff ff	 mov	 eax, -1
  00465	e9 95 04 00 00	 jmp	 $LN1@tt32_cmd
$LN10@tt32_cmd:

; 3166 :     }
; 3167 : 
; 3168 :     if (CMD( argv[1], DEBUG, 5 ))

  0046a	b8 08 00 00 00	 mov	 eax, 8
  0046f	48 6b c0 01	 imul	 rax, rax, 1
  00473	41 b8 05 00 00
	00		 mov	 r8d, 5
  00479	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00481	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00485	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206874
  0048c	e8 00 00 00 00	 call	 strcaseabbrev
  00491	85 c0		 test	 eax, eax
  00493	0f 84 cf 01 00
	00		 je	 $LN18@tt32_cmd

; 3169 :     {
; 3170 :         if (argc > 2)

  00499	83 bc 24 20 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  004a1	0f 8e 88 00 00
	00		 jle	 $LN19@tt32_cmd

; 3171 :         {
; 3172 :             // "Invalid argument %s%s"
; 3173 :             WRMSG( HHC02205, "E", argv[2], buf );

  004a7	b8 08 00 00 00	 mov	 eax, 8
  004ac	48 6b c0 02	 imul	 rax, rax, 2
  004b0	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv234[rsp], rax
  004b8	b9 01 00 00 00	 mov	 ecx, 1
  004bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004c3	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  004cb	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  004d0	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004d8	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR tv234[rsp]
  004e0	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  004e4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206876
  004f0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206877
  004fc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00501	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00506	41 b9 03 00 00
	00		 mov	 r9d, 3
  0050c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206878
  00513	ba 65 0c 00 00	 mov	 edx, 3173		; 00000c65H
  00518	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206879
  0051f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3174 :             return -1;

  00525	b8 ff ff ff ff	 mov	 eax, -1
  0052a	e9 d0 03 00 00	 jmp	 $LN1@tt32_cmd
$LN19@tt32_cmd:

; 3175 :         }
; 3176 : 
; 3177 :         if (debug_tt32_tracing)

  0052f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_debug_tt32_tracing
  00536	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0053a	0f 84 bf 00 00
	00		 je	 $LN20@tt32_cmd

; 3178 :         {
; 3179 :             bool enabled = debug_tt32_tracing(1); // 1=ON

  00540	b9 01 00 00 00	 mov	 ecx, 1
  00545	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_debug_tt32_tracing
  0054c	ff 10		 call	 QWORD PTR [rax]
  0054e	88 44 24 50	 mov	 BYTE PTR enabled$1[rsp], al

; 3180 :             WRMSG( HHC02204, "I", "TT32 DEBUG", enabled ? "enabled" : "disabled" );

  00552	0f b6 44 24 50	 movzx	 eax, BYTE PTR enabled$1[rsp]
  00557	85 c0		 test	 eax, eax
  00559	74 11		 je	 SHORT $LN25@tt32_cmd
  0055b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206881
  00562	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv251[rsp], rax
  0056a	eb 0f		 jmp	 SHORT $LN26@tt32_cmd
$LN25@tt32_cmd:
  0056c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206882
  00573	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv251[rsp], rax
$LN26@tt32_cmd:
  0057b	b9 01 00 00 00	 mov	 ecx, 1
  00580	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00586	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv251[rsp]
  0058e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00593	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206883
  0059a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0059f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206884
  005a6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206885
  005b2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005b7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005bc	41 b9 03 00 00
	00		 mov	 r9d, 3
  005c2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206886
  005c9	ba 6c 0c 00 00	 mov	 edx, 3180		; 00000c6cH
  005ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206887
  005d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3181 :             return enabled ? 0 : -1;

  005db	0f b6 44 24 50	 movzx	 eax, BYTE PTR enabled$1[rsp]
  005e0	85 c0		 test	 eax, eax
  005e2	74 0a		 je	 SHORT $LN27@tt32_cmd
  005e4	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv297[rsp], 0
  005ec	eb 08		 jmp	 SHORT $LN28@tt32_cmd
$LN27@tt32_cmd:
  005ee	c7 44 24 68 ff
	ff ff ff	 mov	 DWORD PTR tv297[rsp], -1
$LN28@tt32_cmd:
  005f6	8b 44 24 68	 mov	 eax, DWORD PTR tv297[rsp]
  005fa	e9 00 03 00 00	 jmp	 $LN1@tt32_cmd
$LN20@tt32_cmd:

; 3182 :         }
; 3183 : 
; 3184 :         // "Error in function %s: %s"
; 3185 :         WRMSG( HHC02219, "E", "debug_tt32_tracing()", "function itself is NULL" );

  005ff	b9 01 00 00 00	 mov	 ecx, 1
  00604	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0060a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206888
  00611	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00616	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206889
  0061d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00622	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206890
  00629	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0062e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206891
  00635	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0063a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0063f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00645	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206892
  0064c	ba 71 0c 00 00	 mov	 edx, 3185		; 00000c71H
  00651	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206893
  00658	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3186 :         return -1;

  0065e	b8 ff ff ff ff	 mov	 eax, -1
  00663	e9 97 02 00 00	 jmp	 $LN1@tt32_cmd
$LN18@tt32_cmd:

; 3187 :     }
; 3188 : 
; 3189 :     if (CMD( argv[1], NODEBUG, 7 ))

  00668	b8 08 00 00 00	 mov	 eax, 8
  0066d	48 6b c0 01	 imul	 rax, rax, 1
  00671	41 b8 07 00 00
	00		 mov	 r8d, 7
  00677	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0067f	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00683	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206895
  0068a	e8 00 00 00 00	 call	 strcaseabbrev
  0068f	85 c0		 test	 eax, eax
  00691	0f 84 e5 01 00
	00		 je	 $LN21@tt32_cmd

; 3190 :     {
; 3191 :         if (argc > 2)

  00697	83 bc 24 20 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0069f	0f 8e 88 00 00
	00		 jle	 $LN22@tt32_cmd

; 3192 :         {
; 3193 :             // "Invalid argument %s%s"
; 3194 :             WRMSG( HHC02205, "E", argv[2], buf );

  006a5	b8 08 00 00 00	 mov	 eax, 8
  006aa	48 6b c0 02	 imul	 rax, rax, 2
  006ae	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv318[rsp], rax
  006b6	b9 01 00 00 00	 mov	 ecx, 1
  006bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006c1	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  006c9	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  006ce	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  006d6	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR tv318[rsp]
  006de	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  006e2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206897
  006ee	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206898
  006fa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006ff	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00704	41 b9 03 00 00
	00		 mov	 r9d, 3
  0070a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206899
  00711	ba 7a 0c 00 00	 mov	 edx, 3194		; 00000c7aH
  00716	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206900
  0071d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3195 :             return -1;

  00723	b8 ff ff ff ff	 mov	 eax, -1
  00728	e9 d2 01 00 00	 jmp	 $LN1@tt32_cmd
$LN22@tt32_cmd:

; 3196 :         }
; 3197 : 
; 3198 :         if (debug_tt32_tracing)

  0072d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_debug_tt32_tracing
  00734	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00738	0f 84 d5 00 00
	00		 je	 $LN23@tt32_cmd

; 3199 :         {
; 3200 :             bool enabled = debug_tt32_tracing(0); // 0=OFF

  0073e	33 c9		 xor	 ecx, ecx
  00740	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_debug_tt32_tracing
  00747	ff 10		 call	 QWORD PTR [rax]
  00749	88 44 24 51	 mov	 BYTE PTR enabled$2[rsp], al

; 3201 :             WRMSG( HHC02204, "I", "TT32 DEBUG", enabled ? "enabled" : "disabled" );

  0074d	0f b6 44 24 51	 movzx	 eax, BYTE PTR enabled$2[rsp]
  00752	85 c0		 test	 eax, eax
  00754	74 11		 je	 SHORT $LN29@tt32_cmd
  00756	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206902
  0075d	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv335[rsp], rax
  00765	eb 0f		 jmp	 SHORT $LN30@tt32_cmd
$LN29@tt32_cmd:
  00767	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206903
  0076e	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv335[rsp], rax
$LN30@tt32_cmd:
  00776	b9 01 00 00 00	 mov	 ecx, 1
  0077b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00781	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv335[rsp]
  00789	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0078e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206904
  00795	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0079a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206905
  007a1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206906
  007ad	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007b2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007b7	41 b9 03 00 00
	00		 mov	 r9d, 3
  007bd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206907
  007c4	ba 81 0c 00 00	 mov	 edx, 3201		; 00000c81H
  007c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206908
  007d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3202 :             return !enabled ? 0 : -1;

  007d6	0f b6 44 24 51	 movzx	 eax, BYTE PTR enabled$2[rsp]
  007db	85 c0		 test	 eax, eax
  007dd	75 0a		 jne	 SHORT $LN31@tt32_cmd
  007df	c7 44 24 6c 01
	00 00 00	 mov	 DWORD PTR tv349[rsp], 1
  007e7	eb 08		 jmp	 SHORT $LN32@tt32_cmd
$LN31@tt32_cmd:
  007e9	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv349[rsp], 0
$LN32@tt32_cmd:
  007f1	83 7c 24 6c 00	 cmp	 DWORD PTR tv349[rsp], 0
  007f6	74 0a		 je	 SHORT $LN33@tt32_cmd
  007f8	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv351[rsp], 0
  00800	eb 08		 jmp	 SHORT $LN34@tt32_cmd
$LN33@tt32_cmd:
  00802	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR tv351[rsp], -1
$LN34@tt32_cmd:
  0080a	8b 44 24 70	 mov	 eax, DWORD PTR tv351[rsp]
  0080e	e9 ec 00 00 00	 jmp	 $LN1@tt32_cmd
$LN23@tt32_cmd:

; 3203 :         }
; 3204 : 
; 3205 :         // "Error in function %s: %s"
; 3206 :         WRMSG( HHC02219, "E", "debug_tt32_tracing()", "function itself is NULL" );

  00813	b9 01 00 00 00	 mov	 ecx, 1
  00818	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0081e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206909
  00825	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0082a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206910
  00831	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00836	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206911
  0083d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00842	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206912
  00849	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0084e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00853	41 b9 03 00 00
	00		 mov	 r9d, 3
  00859	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206913
  00860	ba 86 0c 00 00	 mov	 edx, 3206		; 00000c86H
  00865	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206914
  0086c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3207 :         return -1;

  00872	b8 ff ff ff ff	 mov	 eax, -1
  00877	e9 83 00 00 00	 jmp	 $LN1@tt32_cmd
$LN21@tt32_cmd:

; 3208 :     }
; 3209 : 
; 3210 :     // "Invalid argument %s%s"
; 3211 :     WRMSG( HHC02205, "E", argv[1], buf );

  0087c	b8 08 00 00 00	 mov	 eax, 8
  00881	48 6b c0 01	 imul	 rax, rax, 1
  00885	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv364[rsp], rax
  0088d	b9 01 00 00 00	 mov	 ecx, 1
  00892	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00898	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  008a0	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  008a5	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  008ad	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR tv364[rsp]
  008b5	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  008b9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  008be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206915
  008c5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206916
  008d1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008d6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008db	41 b9 03 00 00
	00		 mov	 r9d, 3
  008e1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206917
  008e8	ba 8b 0c 00 00	 mov	 edx, 3211		; 00000c8bH
  008ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206918
  008f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3212 :     return -1;

  008fa	b8 ff ff ff ff	 mov	 eax, -1
$LN1@tt32_cmd:

; 3213 : }

  008ff	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00907	48 33 cc	 xor	 rcx, rsp
  0090a	e8 00 00 00 00	 call	 __security_check_cookie
  0090f	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  00916	c3		 ret	 0
tt32_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
i$ = 96
found$ = 100
dev$ = 104
devnum$ = 112
lcss$ = 116
j$ = 120
grp$ = 128
all$ = 136
numaddr$ = 140
mask$ = 144
onoff$ = 148
tv628 = 152
tv634 = 156
tv665 = 160
tv671 = 164
tv706 = 168
tv712 = 172
tv730 = 176
tv736 = 180
pDEVGRP$ = 184
tv469 = 192
tv391 = 196
tv393 = 200
tv467 = 204
endptr$1 = 208
tv367 = 216
tv418 = 224
tv131 = 232
tv143 = 240
tv170 = 248
tv285 = 256
tv298 = 264
tv513 = 272
tv526 = 280
tv761 = 288
charaddr$ = 296
buf$2 = 352
__$ArrayPad$ = 480
argc$ = 512
argv$ = 520
cmdline$ = 528
qeth_cmd PROC

; 2718 : {

$LN117:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec f8 01
	00 00		 sub	 rsp, 504		; 000001f8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2719 :     DEVBLK*  dev;
; 2720 :     OSA_GRP* grp;
; 2721 :     U16      lcss;
; 2722 :     U16      devnum;
; 2723 :     u_int    all;
; 2724 :     u_int    onoff;
; 2725 :     u_int    mask;
; 2726 :     int      i;
; 2727 :     u_int    j;
; 2728 :     DEVGRP*  pDEVGRP;
; 2729 :     char     charaddr[48];
; 2730 :     int      numaddr;
; 2731 :     BYTE     found = FALSE;

  00027	c6 44 24 64 00	 mov	 BYTE PTR found$[rsp], 0
$LN4@qeth_cmd:

; 2732 : 
; 2733 :     UNREFERENCED( cmdline );

  0002c	33 c0		 xor	 eax, eax
  0002e	85 c0		 test	 eax, eax
  00030	75 fa		 jne	 SHORT $LN4@qeth_cmd
$LN7@qeth_cmd:

; 2734 : 
; 2735 :     UPPER_ARGV_0( argv );

  00032	48 83 bc 24 08
	02 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  0003b	74 47		 je	 SHORT $LN26@qeth_cmd
  0003d	b8 08 00 00 00	 mov	 eax, 8
  00042	48 6b c0 00	 imul	 rax, rax, 0
  00046	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0004e	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00053	74 2f		 je	 SHORT $LN26@qeth_cmd
  00055	b8 08 00 00 00	 mov	 eax, 8
  0005a	48 6b c0 00	 imul	 rax, rax, 0
  0005e	b9 08 00 00 00	 mov	 ecx, 8
  00063	48 6b c9 00	 imul	 rcx, rcx, 0
  00067	48 8b 94 24 08
	02 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006f	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00073	48 8b 84 24 08
	02 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0007b	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0007f	e8 00 00 00 00	 call	 strupper
$LN26@qeth_cmd:
  00084	33 c0		 xor	 eax, eax
  00086	85 c0		 test	 eax, eax
  00088	75 a8		 jne	 SHORT $LN7@qeth_cmd

; 2736 : 
; 2737 :     // Format:  "QETH  DEBUG  {ON|OFF}  [ [<devnum>|ALL] [mask ...] ]"
; 2738 :     // Format:  "QETH  ADDR             [ [<devnum>|ALL]            ]"
; 2739 : 
; 2740 :     if ( argc >= 2 && CMD(argv[1],debug,5) )

  0008a	83 bc 24 00 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00092	0f 8c 42 0a 00
	00		 jl	 $LN27@qeth_cmd
  00098	b8 08 00 00 00	 mov	 eax, 8
  0009d	48 6b c0 01	 imul	 rax, rax, 1
  000a1	41 b8 05 00 00
	00		 mov	 r8d, 5
  000a7	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000af	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206647
  000ba	e8 00 00 00 00	 call	 strcaseabbrev
  000bf	85 c0		 test	 eax, eax
  000c1	0f 84 13 0a 00
	00		 je	 $LN27@qeth_cmd

; 2741 :     {
; 2742 : 
; 2743 :         if ( argc >= 3 )

  000c7	83 bc 24 00 02
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  000cf	0f 8c 06 01 00
	00		 jl	 $LN28@qeth_cmd

; 2744 :         {
; 2745 :             if ( CMD(argv[2],on,2) )

  000d5	b8 08 00 00 00	 mov	 eax, 8
  000da	48 6b c0 02	 imul	 rax, rax, 2
  000de	41 b8 02 00 00
	00		 mov	 r8d, 2
  000e4	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000ec	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206652
  000f7	e8 00 00 00 00	 call	 strcaseabbrev
  000fc	85 c0		 test	 eax, eax
  000fe	74 1b		 je	 SHORT $LN30@qeth_cmd

; 2746 :             {
; 2747 :                 onoff = TRUE;

  00100	c7 84 24 94 00
	00 00 01 00 00
	00		 mov	 DWORD PTR onoff$[rsp], 1

; 2748 :                 mask = DBGQETHPACKET;

  0010b	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR mask$[rsp], 1

; 2749 :             }

  00116	e9 be 00 00 00	 jmp	 $LN31@qeth_cmd
$LN30@qeth_cmd:

; 2750 :             else if ( CMD(argv[2],off,3) )

  0011b	b8 08 00 00 00	 mov	 eax, 8
  00120	48 6b c0 02	 imul	 rax, rax, 2
  00124	41 b8 03 00 00
	00		 mov	 r8d, 3
  0012a	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00132	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00136	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206655
  0013d	e8 00 00 00 00	 call	 strcaseabbrev
  00142	85 c0		 test	 eax, eax
  00144	74 18		 je	 SHORT $LN32@qeth_cmd

; 2751 :             {
; 2752 :                 onoff = FALSE;

  00146	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR onoff$[rsp], 0

; 2753 :                 mask = 0;

  00151	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR mask$[rsp], 0

; 2754 :             }

  0015c	eb 7b		 jmp	 SHORT $LN33@qeth_cmd
$LN32@qeth_cmd:

; 2755 :             else
; 2756 :             {
; 2757 :                 // "Invalid command usage. Type 'help %s' for assistance."
; 2758 :                 WRMSG( HHC02299, "E", argv[0] );

  0015e	b8 08 00 00 00	 mov	 eax, 8
  00163	48 6b c0 00	 imul	 rax, rax, 0
  00167	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv131[rsp], rax
  0016f	b9 01 00 00 00	 mov	 ecx, 1
  00174	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0017a	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00182	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR tv131[rsp]
  0018a	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0018e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00193	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206656
  0019a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0019f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206657
  001a6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ab	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b0	41 b9 03 00 00
	00		 mov	 r9d, 3
  001b6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206658
  001bd	ba c6 0a 00 00	 mov	 edx, 2758		; 00000ac6H
  001c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206659
  001c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2759 :                 return -1;

  001cf	b8 ff ff ff ff	 mov	 eax, -1
  001d4	e9 f8 12 00 00	 jmp	 $LN1@qeth_cmd
$LN33@qeth_cmd:
$LN31@qeth_cmd:

; 2760 :             }
; 2761 :         }

  001d9	eb 7b		 jmp	 SHORT $LN29@qeth_cmd
$LN28@qeth_cmd:

; 2762 :         else
; 2763 :         {
; 2764 :             // "Invalid command usage. Type 'help %s' for assistance."
; 2765 :             WRMSG( HHC02299, "E", argv[0] );

  001db	b8 08 00 00 00	 mov	 eax, 8
  001e0	48 6b c0 00	 imul	 rax, rax, 0
  001e4	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv143[rsp], rax
  001ec	b9 01 00 00 00	 mov	 ecx, 1
  001f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001f7	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001ff	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR tv143[rsp]
  00207	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0020b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00210	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206660
  00217	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0021c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206661
  00223	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00228	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0022d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00233	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206662
  0023a	ba cd 0a 00 00	 mov	 edx, 2765		; 00000acdH
  0023f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206663
  00246	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2766 :             return -1;

  0024c	b8 ff ff ff ff	 mov	 eax, -1
  00251	e9 7b 12 00 00	 jmp	 $LN1@qeth_cmd
$LN29@qeth_cmd:

; 2767 :         }
; 2768 : 
; 2769 :         all = TRUE;

  00256	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR all$[rsp], 1

; 2770 :         if ( argc >= 4 )

  00261	83 bc 24 00 02
	00 00 04	 cmp	 DWORD PTR argc$[rsp], 4
  00269	0f 8c eb 00 00
	00		 jl	 $LN34@qeth_cmd

; 2771 :         {
; 2772 :             if ( CMD(argv[3],all,3) )

  0026f	b8 08 00 00 00	 mov	 eax, 8
  00274	48 6b c0 03	 imul	 rax, rax, 3
  00278	41 b8 03 00 00
	00		 mov	 r8d, 3
  0027e	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00286	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0028a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206667
  00291	e8 00 00 00 00	 call	 strcaseabbrev
  00296	85 c0		 test	 eax, eax
  00298	74 10		 je	 SHORT $LN35@qeth_cmd

; 2773 :             {
; 2774 :                 all = TRUE;

  0029a	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR all$[rsp], 1

; 2775 :             }

  002a5	e9 b0 00 00 00	 jmp	 $LN36@qeth_cmd
$LN35@qeth_cmd:

; 2776 :             else if ( parse_single_devnum( argv[3], &lcss, &devnum) == 0 )

  002aa	b8 08 00 00 00	 mov	 eax, 8
  002af	48 6b c0 03	 imul	 rax, rax, 3
  002b3	4c 8d 44 24 70	 lea	 r8, QWORD PTR devnum$[rsp]
  002b8	48 8d 54 24 74	 lea	 rdx, QWORD PTR lcss$[rsp]
  002bd	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002c5	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  002c9	e8 00 00 00 00	 call	 parse_single_devnum
  002ce	85 c0		 test	 eax, eax
  002d0	75 0d		 jne	 SHORT $LN37@qeth_cmd

; 2777 :             {
; 2778 :                 all = FALSE;

  002d2	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR all$[rsp], 0

; 2779 :             }

  002dd	eb 7b		 jmp	 SHORT $LN38@qeth_cmd
$LN37@qeth_cmd:

; 2780 :             else
; 2781 :             {
; 2782 :                 // "Invalid command usage. Type 'help %s' for assistance."
; 2783 :                 WRMSG( HHC02299, "E", argv[0] );

  002df	b8 08 00 00 00	 mov	 eax, 8
  002e4	48 6b c0 00	 imul	 rax, rax, 0
  002e8	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv170[rsp], rax
  002f0	b9 01 00 00 00	 mov	 ecx, 1
  002f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002fb	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00303	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR tv170[rsp]
  0030b	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0030f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00314	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206670
  0031b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00320	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206671
  00327	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0032c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00331	41 b9 03 00 00
	00		 mov	 r9d, 3
  00337	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206672
  0033e	ba df 0a 00 00	 mov	 edx, 2783		; 00000adfH
  00343	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206673
  0034a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2784 :                 return -1;

  00350	b8 ff ff ff ff	 mov	 eax, -1
  00355	e9 77 11 00 00	 jmp	 $LN1@qeth_cmd
$LN38@qeth_cmd:
$LN36@qeth_cmd:
$LN34@qeth_cmd:

; 2785 :             }
; 2786 :         }
; 2787 : 
; 2788 :         if ( argc >= 5 )

  0035a	83 bc 24 00 02
	00 00 05	 cmp	 DWORD PTR argc$[rsp], 5
  00362	0f 8c e1 03 00
	00		 jl	 $LN39@qeth_cmd

; 2789 :         {
; 2790 :             if ( onoff == TRUE)

  00368	83 bc 24 94 00
	00 00 01	 cmp	 DWORD PTR onoff$[rsp], 1
  00370	0f 85 58 03 00
	00		 jne	 $LN40@qeth_cmd

; 2791 :             {
; 2792 :                 // mask:
; 2793 : 
; 2794 :                 // PLEASE KEEP THESE IN ALPHABETICAL ORDER!
; 2795 :                 // PLEASE NOTE THE MINIMUM ABBREVIATIONS!
; 2796 : 
; 2797 :                 // 'Ccw', 'DAta', 'DRopped', 'Expand', 'Interupts',
; 2798 :                 // 'Packet', 'Queues', 'SBale', 'SIga', 'Updown',
; 2799 : 
; 2800 :                 // 0xhhhhhhhh hexadecimal value
; 2801 : 
; 2802 :                 mask = 0;

  00376	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR mask$[rsp], 0

; 2803 :                 for ( i = 4 ; i < argc ; i++ )

  00381	c7 44 24 60 04
	00 00 00	 mov	 DWORD PTR i$[rsp], 4
  00389	eb 0a		 jmp	 SHORT $LN10@qeth_cmd
$LN8@qeth_cmd:
  0038b	8b 44 24 60	 mov	 eax, DWORD PTR i$[rsp]
  0038f	ff c0		 inc	 eax
  00391	89 44 24 60	 mov	 DWORD PTR i$[rsp], eax
$LN10@qeth_cmd:
  00395	8b 84 24 00 02
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  0039c	39 44 24 60	 cmp	 DWORD PTR i$[rsp], eax
  003a0	0f 8d 26 03 00
	00		 jge	 $LN9@qeth_cmd

; 2804 :                 {
; 2805 : 
; 2806 :                     if (0) ;

  003a6	33 c0		 xor	 eax, eax
  003a8	85 c0		 test	 eax, eax
  003aa	74 05		 je	 SHORT $LN42@qeth_cmd
  003ac	e9 00 03 00 00	 jmp	 $LN43@qeth_cmd
$LN42@qeth_cmd:

; 2807 :                     else if ( CMD(argv[i],ccw,1) )

  003b1	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  003b6	41 b8 01 00 00
	00		 mov	 r8d, 1
  003bc	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003c4	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  003c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206681
  003cf	e8 00 00 00 00	 call	 strcaseabbrev
  003d4	85 c0		 test	 eax, eax
  003d6	74 0d		 je	 SHORT $LN44@qeth_cmd

; 2808 :                     {
; 2809 :                         j = DBGQETHCCW;

  003d8	c7 44 24 78 20
	00 00 00	 mov	 DWORD PTR j$[rsp], 32	; 00000020H

; 2810 :                     }

  003e0	e9 cc 02 00 00	 jmp	 $LN45@qeth_cmd
$LN44@qeth_cmd:

; 2811 :                     else if ( CMD(argv[i],data,2) )

  003e5	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  003ea	41 b8 02 00 00
	00		 mov	 r8d, 2
  003f0	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003f8	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  003fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206684
  00403	e8 00 00 00 00	 call	 strcaseabbrev
  00408	85 c0		 test	 eax, eax
  0040a	74 0d		 je	 SHORT $LN46@qeth_cmd

; 2812 :                     {
; 2813 :                         j = DBGQETHDATA;

  0040c	c7 44 24 78 02
	00 00 00	 mov	 DWORD PTR j$[rsp], 2

; 2814 :                     }

  00414	e9 98 02 00 00	 jmp	 $LN47@qeth_cmd
$LN46@qeth_cmd:

; 2815 :                     else if ( CMD(argv[i],dropped,2) )

  00419	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  0041e	41 b8 02 00 00
	00		 mov	 r8d, 2
  00424	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0042c	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00430	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206687
  00437	e8 00 00 00 00	 call	 strcaseabbrev
  0043c	85 c0		 test	 eax, eax
  0043e	74 0d		 je	 SHORT $LN48@qeth_cmd

; 2816 :                     {
; 2817 :                         j = DBGQETHDROP;

  00440	c7 44 24 78 40
	00 00 00	 mov	 DWORD PTR j$[rsp], 64	; 00000040H

; 2818 :                     }

  00448	e9 64 02 00 00	 jmp	 $LN49@qeth_cmd
$LN48@qeth_cmd:

; 2819 :                     else if ( CMD(argv[i],expand,1) )

  0044d	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  00452	41 b8 01 00 00
	00		 mov	 r8d, 1
  00458	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00460	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00464	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206690
  0046b	e8 00 00 00 00	 call	 strcaseabbrev
  00470	85 c0		 test	 eax, eax
  00472	74 0d		 je	 SHORT $LN50@qeth_cmd

; 2820 :                     {
; 2821 :                         j = DBGQETHEXPAND;

  00474	c7 44 24 78 04
	00 00 00	 mov	 DWORD PTR j$[rsp], 4

; 2822 :                     }

  0047c	e9 30 02 00 00	 jmp	 $LN51@qeth_cmd
$LN50@qeth_cmd:

; 2823 :                     else if ( CMD(argv[i],interupts,1) )

  00481	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  00486	41 b8 01 00 00
	00		 mov	 r8d, 1
  0048c	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00494	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00498	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206693
  0049f	e8 00 00 00 00	 call	 strcaseabbrev
  004a4	85 c0		 test	 eax, eax
  004a6	74 0d		 je	 SHORT $LN52@qeth_cmd

; 2824 :                     {
; 2825 :                         j = DBGQETHINTRUPT;

  004a8	c7 44 24 78 80
	00 00 00	 mov	 DWORD PTR j$[rsp], 128	; 00000080H

; 2826 :                     }

  004b0	e9 fc 01 00 00	 jmp	 $LN53@qeth_cmd
$LN52@qeth_cmd:

; 2827 :                     else if ( CMD(argv[i],packet,1) )

  004b5	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  004ba	41 b8 01 00 00
	00		 mov	 r8d, 1
  004c0	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004c8	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  004cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206696
  004d3	e8 00 00 00 00	 call	 strcaseabbrev
  004d8	85 c0		 test	 eax, eax
  004da	74 0d		 je	 SHORT $LN54@qeth_cmd

; 2828 :                     {
; 2829 :                         j = DBGQETHPACKET;

  004dc	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR j$[rsp], 1

; 2830 :                     }

  004e4	e9 c8 01 00 00	 jmp	 $LN55@qeth_cmd
$LN54@qeth_cmd:

; 2831 :                     else if ( CMD(argv[i],queues,1) )

  004e9	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  004ee	41 b8 01 00 00
	00		 mov	 r8d, 1
  004f4	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004fc	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00500	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206699
  00507	e8 00 00 00 00	 call	 strcaseabbrev
  0050c	85 c0		 test	 eax, eax
  0050e	74 0d		 je	 SHORT $LN56@qeth_cmd

; 2832 :                     {
; 2833 :                         j = DBGQETHQUEUES;

  00510	c7 44 24 78 00
	04 00 00	 mov	 DWORD PTR j$[rsp], 1024	; 00000400H

; 2834 :                     }

  00518	e9 94 01 00 00	 jmp	 $LN57@qeth_cmd
$LN56@qeth_cmd:

; 2835 :                     else if ( CMD(argv[i],sbale,2) )

  0051d	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  00522	41 b8 02 00 00
	00		 mov	 r8d, 2
  00528	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00530	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00534	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206702
  0053b	e8 00 00 00 00	 call	 strcaseabbrev
  00540	85 c0		 test	 eax, eax
  00542	74 0d		 je	 SHORT $LN58@qeth_cmd

; 2836 :                     {
; 2837 :                         j = DBGQETHSBALE;

  00544	c7 44 24 78 00
	01 00 00	 mov	 DWORD PTR j$[rsp], 256	; 00000100H

; 2838 :                     }

  0054c	e9 60 01 00 00	 jmp	 $LN59@qeth_cmd
$LN58@qeth_cmd:

; 2839 :                     else if ( CMD(argv[i],siga,2) )

  00551	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  00556	41 b8 02 00 00
	00		 mov	 r8d, 2
  0055c	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00564	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00568	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206705
  0056f	e8 00 00 00 00	 call	 strcaseabbrev
  00574	85 c0		 test	 eax, eax
  00576	74 0d		 je	 SHORT $LN60@qeth_cmd

; 2840 :                     {
; 2841 :                         j = DBGQETHSIGA;

  00578	c7 44 24 78 00
	02 00 00	 mov	 DWORD PTR j$[rsp], 512	; 00000200H

; 2842 :                     }

  00580	e9 2c 01 00 00	 jmp	 $LN61@qeth_cmd
$LN60@qeth_cmd:

; 2843 :                     else if ( CMD(argv[i],updown,1) )

  00585	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  0058a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00590	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00598	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0059c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206708
  005a3	e8 00 00 00 00	 call	 strcaseabbrev
  005a8	85 c0		 test	 eax, eax
  005aa	74 0d		 je	 SHORT $LN62@qeth_cmd

; 2844 :                     {
; 2845 :                         j = DBGQETHUPDOWN;

  005ac	c7 44 24 78 10
	00 00 00	 mov	 DWORD PTR j$[rsp], 16

; 2846 :                     }

  005b4	e9 f8 00 00 00	 jmp	 $LN63@qeth_cmd
$LN62@qeth_cmd:

; 2847 :                     else
; 2848 :                     {
; 2849 :                         char* endptr;
; 2850 :                         j = strtoul( argv[i], &endptr, 16 );

  005b9	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  005be	41 b8 10 00 00
	00		 mov	 r8d, 16
  005c4	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR endptr$1[rsp]
  005cc	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  005d4	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  005d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtoul
  005de	89 44 24 78	 mov	 DWORD PTR j$[rsp], eax

; 2851 :                         if (0
; 2852 :                             || (1
; 2853 :                                 && (0 == j || UINT_MAX == j)
; 2854 :                                 && ERANGE == errno
; 2855 :                                )
; 2856 :                             || (1

  005e2	33 c0		 xor	 eax, eax
  005e4	85 c0		 test	 eax, eax
  005e6	75 4e		 jne	 SHORT $LN65@qeth_cmd
  005e8	33 c0		 xor	 eax, eax
  005ea	83 f8 01	 cmp	 eax, 1
  005ed	74 19		 je	 SHORT $LN66@qeth_cmd
  005ef	83 7c 24 78 00	 cmp	 DWORD PTR j$[rsp], 0
  005f4	74 07		 je	 SHORT $LN67@qeth_cmd
  005f6	83 7c 24 78 ff	 cmp	 DWORD PTR j$[rsp], -1	; ffffffffH
  005fb	75 0b		 jne	 SHORT $LN66@qeth_cmd
$LN67@qeth_cmd:
  005fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00603	83 38 22	 cmp	 DWORD PTR [rax], 34	; 00000022H
  00606	74 2e		 je	 SHORT $LN65@qeth_cmd
$LN66@qeth_cmd:
  00608	33 c0		 xor	 eax, eax
  0060a	83 f8 01	 cmp	 eax, 1
  0060d	0f 84 9e 00 00
	00		 je	 $LN64@qeth_cmd
  00613	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR endptr$1[rsp]
  0061b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0061e	83 f8 20	 cmp	 eax, 32			; 00000020H
  00621	0f 84 8a 00 00
	00		 je	 $LN64@qeth_cmd
  00627	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR endptr$1[rsp]
  0062f	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00632	85 c0		 test	 eax, eax
  00634	74 7b		 je	 SHORT $LN64@qeth_cmd
$LN65@qeth_cmd:

; 2857 :                                 && *endptr != ' '
; 2858 :                                 && *endptr != 0
; 2859 :                                )
; 2860 :                         )
; 2861 :                         {
; 2862 :                             // "Invalid command usage. Type 'help %s' for assistance."
; 2863 :                             WRMSG( HHC02299, "E", argv[0] );

  00636	b8 08 00 00 00	 mov	 eax, 8
  0063b	48 6b c0 00	 imul	 rax, rax, 0
  0063f	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv285[rsp], rax
  00647	b9 01 00 00 00	 mov	 ecx, 1
  0064c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00652	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0065a	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR tv285[rsp]
  00662	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00666	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0066b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206713
  00672	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00677	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206714
  0067e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00683	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00688	41 b9 03 00 00
	00		 mov	 r9d, 3
  0068e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206715
  00695	ba 2f 0b 00 00	 mov	 edx, 2863		; 00000b2fH
  0069a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206716
  006a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2864 :                             return -1;

  006a7	b8 ff ff ff ff	 mov	 eax, -1
  006ac	e9 20 0e 00 00	 jmp	 $LN1@qeth_cmd
$LN64@qeth_cmd:
$LN63@qeth_cmd:
$LN61@qeth_cmd:
$LN59@qeth_cmd:
$LN57@qeth_cmd:
$LN55@qeth_cmd:
$LN53@qeth_cmd:
$LN51@qeth_cmd:
$LN49@qeth_cmd:
$LN47@qeth_cmd:
$LN45@qeth_cmd:
$LN43@qeth_cmd:

; 2865 :                         }
; 2866 :                     }
; 2867 :                     mask |= j;

  006b1	8b 44 24 78	 mov	 eax, DWORD PTR j$[rsp]
  006b5	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR mask$[rsp]
  006bc	0b c8		 or	 ecx, eax
  006be	8b c1		 mov	 eax, ecx
  006c0	89 84 24 90 00
	00 00		 mov	 DWORD PTR mask$[rsp], eax

; 2868 :                 }

  006c7	e9 bf fc ff ff	 jmp	 $LN8@qeth_cmd
$LN9@qeth_cmd:

; 2869 :             }

  006cc	eb 7b		 jmp	 SHORT $LN41@qeth_cmd
$LN40@qeth_cmd:

; 2870 :             else
; 2871 :             {
; 2872 :                 // "Invalid command usage. Type 'help %s' for assistance."
; 2873 :                 WRMSG( HHC02299, "E", argv[0] );

  006ce	b8 08 00 00 00	 mov	 eax, 8
  006d3	48 6b c0 00	 imul	 rax, rax, 0
  006d7	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv298[rsp], rax
  006df	b9 01 00 00 00	 mov	 ecx, 1
  006e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006ea	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  006f2	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR tv298[rsp]
  006fa	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  006fe	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00703	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206717
  0070a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0070f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206718
  00716	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0071b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00720	41 b9 03 00 00
	00		 mov	 r9d, 3
  00726	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206719
  0072d	ba 39 0b 00 00	 mov	 edx, 2873		; 00000b39H
  00732	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206720
  00739	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2874 :                 return -1;

  0073f	b8 ff ff ff ff	 mov	 eax, -1
  00744	e9 88 0d 00 00	 jmp	 $LN1@qeth_cmd
$LN41@qeth_cmd:
$LN39@qeth_cmd:

; 2875 :             }
; 2876 :         }
; 2877 : 
; 2878 :         if ( all )

  00749	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR all$[rsp], 0
  00751	0f 84 71 01 00
	00		 je	 $LN68@qeth_cmd

; 2879 :         {
; 2880 :             found = FALSE;

  00757	c6 44 24 64 00	 mov	 BYTE PTR found$[rsp], 0

; 2881 : 
; 2882 :             for ( dev = sysblk.firstdev; dev; dev = dev->nextdev )

  0075c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00763	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  0076a	48 89 44 24 68	 mov	 QWORD PTR dev$[rsp], rax
  0076f	eb 0e		 jmp	 SHORT $LN13@qeth_cmd
$LN11@qeth_cmd:
  00771	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00776	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0077a	48 89 44 24 68	 mov	 QWORD PTR dev$[rsp], rax
$LN13@qeth_cmd:
  0077f	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00785	74 4c		 je	 SHORT $LN12@qeth_cmd

; 2883 :             {
; 2884 :                 if ( dev->allocated &&

  00787	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0078c	83 78 40 00	 cmp	 DWORD PTR [rax+64], 0
  00790	74 3f		 je	 SHORT $LN70@qeth_cmd
  00792	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00797	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  0079b	3d 31 17 00 00	 cmp	 eax, 5937		; 00001731H
  007a0	75 2f		 jne	 SHORT $LN70@qeth_cmd

; 2885 :                      dev->devtype == 0x1731 )
; 2886 :                 {
; 2887 :                     grp = dev->group->grp_data;

  007a2	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  007a7	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  007ab	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  007af	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR grp$[rsp], rax

; 2888 :                     grp->debugmask = mask;

  007b7	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR grp$[rsp]
  007bf	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR mask$[rsp]
  007c6	89 88 e0 05 00
	00		 mov	 DWORD PTR [rax+1504], ecx

; 2889 :                     found = TRUE;

  007cc	c6 44 24 64 01	 mov	 BYTE PTR found$[rsp], 1
$LN70@qeth_cmd:

; 2890 :                 }
; 2891 :             }

  007d1	eb 9e		 jmp	 SHORT $LN11@qeth_cmd
$LN12@qeth_cmd:

; 2892 : 
; 2893 :             if (!found)

  007d3	0f b6 44 24 64	 movzx	 eax, BYTE PTR found$[rsp]
  007d8	85 c0		 test	 eax, eax
  007da	75 5d		 jne	 SHORT $LN71@qeth_cmd

; 2894 :             {
; 2895 :                 // "No %s devices found"
; 2896 :                 WRMSG( HHC02347, "E", "QETH" );

  007dc	b9 01 00 00 00	 mov	 ecx, 1
  007e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206725
  007ee	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  007f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206726
  007fa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206727
  00806	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0080b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00810	41 b9 03 00 00
	00		 mov	 r9d, 3
  00816	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206728
  0081d	ba 50 0b 00 00	 mov	 edx, 2896		; 00000b50H
  00822	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206729
  00829	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2897 :                 return -1;

  0082f	b8 ff ff ff ff	 mov	 eax, -1
  00834	e9 98 0c 00 00	 jmp	 $LN1@qeth_cmd
$LN71@qeth_cmd:

; 2898 :             }
; 2899 : 
; 2900 :             // "%-14s set to %s"
; 2901 :             WRMSG(HHC02204, "I", "QETH DEBUG", onoff ? "ON ALL" : "OFF ALL");

  00839	83 bc 24 94 00
	00 00 00	 cmp	 DWORD PTR onoff$[rsp], 0
  00841	74 11		 je	 SHORT $LN97@qeth_cmd
  00843	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206730
  0084a	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv367[rsp], rax
  00852	eb 0f		 jmp	 SHORT $LN98@qeth_cmd
$LN97@qeth_cmd:
  00854	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206731
  0085b	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv367[rsp], rax
$LN98@qeth_cmd:
  00863	b9 01 00 00 00	 mov	 ecx, 1
  00868	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0086e	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tv367[rsp]
  00876	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0087b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206732
  00882	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00887	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206733
  0088e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00893	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206734
  0089a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0089f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008a4	41 b9 03 00 00
	00		 mov	 r9d, 3
  008aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206735
  008b1	ba 55 0b 00 00	 mov	 edx, 2901		; 00000b55H
  008b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206736
  008bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2902 :         }

  008c3	e9 0b 02 00 00	 jmp	 $LN69@qeth_cmd
$LN68@qeth_cmd:

; 2903 :         else
; 2904 :         {
; 2905 :             if ( !(dev = find_device_by_devnum( lcss, devnum )) )

  008c8	0f b7 54 24 70	 movzx	 edx, WORD PTR devnum$[rsp]
  008cd	0f b7 4c 24 74	 movzx	 ecx, WORD PTR lcss$[rsp]
  008d2	e8 00 00 00 00	 call	 find_device_by_devnum
  008d7	48 89 44 24 68	 mov	 QWORD PTR dev$[rsp], rax
  008dc	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  008e2	75 19		 jne	 SHORT $LN72@qeth_cmd

; 2906 :             {
; 2907 :                 // "%1d:%04X device not found"
; 2908 :                 devnotfound_msg( lcss, devnum );

  008e4	0f b7 54 24 70	 movzx	 edx, WORD PTR devnum$[rsp]
  008e9	0f b7 4c 24 74	 movzx	 ecx, WORD PTR lcss$[rsp]
  008ee	e8 00 00 00 00	 call	 devnotfound_msg

; 2909 :                 return -1;

  008f3	b8 ff ff ff ff	 mov	 eax, -1
  008f8	e9 d4 0b 00 00	 jmp	 $LN1@qeth_cmd
$LN72@qeth_cmd:

; 2910 :             }
; 2911 : 
; 2912 :             if ( !dev->allocated ||

  008fd	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00902	83 78 40 00	 cmp	 DWORD PTR [rax+64], 0
  00906	74 14		 je	 SHORT $LN74@qeth_cmd
  00908	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0090d	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  00911	3d 31 17 00 00	 cmp	 eax, 5937		; 00001731H
  00916	0f 84 8b 00 00
	00		 je	 $LN73@qeth_cmd
$LN74@qeth_cmd:

; 2913 :                  dev->devtype != 0x1731 )
; 2914 :             {
; 2915 :                 // "%1d:%04X device is not a '%s'"
; 2916 :                 WRMSG(HHC02209, "E", lcss, devnum, "QETH" );

  0091c	0f b7 44 24 70	 movzx	 eax, WORD PTR devnum$[rsp]
  00921	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv391[rsp], eax
  00928	0f b7 4c 24 74	 movzx	 ecx, WORD PTR lcss$[rsp]
  0092d	89 8c 24 c8 00
	00 00		 mov	 DWORD PTR tv393[rsp], ecx
  00934	b9 01 00 00 00	 mov	 ecx, 1
  00939	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0093f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206740
  00946	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0094b	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR tv391[rsp]
  00952	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00956	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR tv393[rsp]
  0095d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00961	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206741
  00968	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0096d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206742
  00974	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00979	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0097e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00984	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206743
  0098b	ba 64 0b 00 00	 mov	 edx, 2916		; 00000b64H
  00990	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206744
  00997	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2917 :                 return -1;

  0099d	b8 ff ff ff ff	 mov	 eax, -1
  009a2	e9 2a 0b 00 00	 jmp	 $LN1@qeth_cmd
$LN73@qeth_cmd:

; 2918 :             }
; 2919 : 
; 2920 :             pDEVGRP = dev->group;

  009a7	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  009ac	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  009b0	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR pDEVGRP$[rsp], rax

; 2921 : 
; 2922 :             for ( i=0; i < pDEVGRP->acount; i++ )

  009b8	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  009c0	eb 0a		 jmp	 SHORT $LN16@qeth_cmd
$LN14@qeth_cmd:
  009c2	8b 44 24 60	 mov	 eax, DWORD PTR i$[rsp]
  009c6	ff c0		 inc	 eax
  009c8	89 44 24 60	 mov	 DWORD PTR i$[rsp], eax
$LN16@qeth_cmd:
  009cc	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR pDEVGRP$[rsp]
  009d4	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  009d7	39 44 24 60	 cmp	 DWORD PTR i$[rsp], eax
  009db	7d 2c		 jge	 SHORT $LN15@qeth_cmd

; 2923 :             {
; 2924 :                 grp = dev->group->grp_data;

  009dd	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  009e2	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  009e6	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  009ea	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR grp$[rsp], rax

; 2925 :                 grp->debugmask = mask;

  009f2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR grp$[rsp]
  009fa	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR mask$[rsp]
  00a01	89 88 e0 05 00
	00		 mov	 DWORD PTR [rax+1504], ecx

; 2926 :             }

  00a07	eb b9		 jmp	 SHORT $LN14@qeth_cmd
$LN15@qeth_cmd:

; 2927 : 
; 2928 :             {
; 2929 :             char buf[128];
; 2930 :             MSGBUF( buf, "%s for %s device %1d:%04X group",

  00a09	83 bc 24 94 00
	00 00 00	 cmp	 DWORD PTR onoff$[rsp], 0
  00a11	74 11		 je	 SHORT $LN99@qeth_cmd
  00a13	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206746
  00a1a	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv418[rsp], rax
  00a22	eb 0f		 jmp	 SHORT $LN100@qeth_cmd
$LN99@qeth_cmd:
  00a24	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206747
  00a2b	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv418[rsp], rax
$LN100@qeth_cmd:
  00a33	0f b7 44 24 70	 movzx	 eax, WORD PTR devnum$[rsp]
  00a38	0f b7 4c 24 74	 movzx	 ecx, WORD PTR lcss$[rsp]
  00a3d	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00a41	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00a45	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206745
  00a4c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a51	4c 8b 8c 24 e0
	00 00 00	 mov	 r9, QWORD PTR tv418[rsp]
  00a59	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206748
  00a60	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00a65	48 8d 8c 24 60
	01 00 00	 lea	 rcx, QWORD PTR buf$2[rsp]
  00a6d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2931 :                     onoff ? "ON" : "OFF",
; 2932 :                     "QETH",
; 2933 :                     lcss, devnum );
; 2934 :             // "%-14s set to %s"
; 2935 :             WRMSG(HHC02204, "I", "QETH DEBUG", buf);

  00a73	b9 01 00 00 00	 mov	 ecx, 1
  00a78	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a7e	48 8d 8c 24 60
	01 00 00	 lea	 rcx, QWORD PTR buf$2[rsp]
  00a86	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00a8b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206749
  00a92	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a97	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206750
  00a9e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00aa3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206751
  00aaa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00aaf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ab4	41 b9 03 00 00
	00		 mov	 r9d, 3
  00aba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206752
  00ac1	ba 77 0b 00 00	 mov	 edx, 2935		; 00000b77H
  00ac6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206753
  00acd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN69@qeth_cmd:

; 2936 :             }
; 2937 :         }
; 2938 : 
; 2939 :         return 0;

  00ad3	33 c0		 xor	 eax, eax
  00ad5	e9 f7 09 00 00	 jmp	 $LN1@qeth_cmd
$LN27@qeth_cmd:

; 2940 :     }
; 2941 : 
; 2942 :     if ( CMD(argv[1],addr,4) )

  00ada	b8 08 00 00 00	 mov	 eax, 8
  00adf	48 6b c0 01	 imul	 rax, rax, 1
  00ae3	41 b8 04 00 00
	00		 mov	 r8d, 4
  00ae9	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00af1	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00af5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206755
  00afc	e8 00 00 00 00	 call	 strcaseabbrev
  00b01	85 c0		 test	 eax, eax
  00b03	0f 84 52 09 00
	00		 je	 $LN75@qeth_cmd

; 2943 :     {
; 2944 : 
; 2945 :         if ( argc < 3 )

  00b09	83 bc 24 00 02
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00b11	7d 1c		 jge	 SHORT $LN76@qeth_cmd

; 2946 :         {
; 2947 :             all = TRUE;

  00b13	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR all$[rsp], 1

; 2948 :             pDEVGRP = NULL;

  00b1e	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR pDEVGRP$[rsp], 0

; 2949 :         }

  00b2a	e9 eb 01 00 00	 jmp	 $LN77@qeth_cmd
$LN76@qeth_cmd:

; 2950 :         else
; 2951 :         {
; 2952 :             if ( CMD(argv[2],all,3) )

  00b2f	b8 08 00 00 00	 mov	 eax, 8
  00b34	48 6b c0 02	 imul	 rax, rax, 2
  00b38	41 b8 03 00 00
	00		 mov	 r8d, 3
  00b3e	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00b46	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00b4a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206760
  00b51	e8 00 00 00 00	 call	 strcaseabbrev
  00b56	85 c0		 test	 eax, eax
  00b58	74 1c		 je	 SHORT $LN78@qeth_cmd

; 2953 :             {
; 2954 :                 all = TRUE;

  00b5a	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR all$[rsp], 1

; 2955 :                 pDEVGRP = NULL;

  00b65	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR pDEVGRP$[rsp], 0

; 2956 :             }

  00b71	e9 a4 01 00 00	 jmp	 $LN79@qeth_cmd
$LN78@qeth_cmd:

; 2957 :             else if ( parse_single_devnum( argv[2], &lcss, &devnum) == 0 )

  00b76	b8 08 00 00 00	 mov	 eax, 8
  00b7b	48 6b c0 02	 imul	 rax, rax, 2
  00b7f	4c 8d 44 24 70	 lea	 r8, QWORD PTR devnum$[rsp]
  00b84	48 8d 54 24 74	 lea	 rdx, QWORD PTR lcss$[rsp]
  00b89	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00b91	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00b95	e8 00 00 00 00	 call	 parse_single_devnum
  00b9a	85 c0		 test	 eax, eax
  00b9c	0f 85 fd 00 00
	00		 jne	 $LN80@qeth_cmd

; 2958 :             {
; 2959 :                 if ( !(dev = find_device_by_devnum( lcss, devnum )) )

  00ba2	0f b7 54 24 70	 movzx	 edx, WORD PTR devnum$[rsp]
  00ba7	0f b7 4c 24 74	 movzx	 ecx, WORD PTR lcss$[rsp]
  00bac	e8 00 00 00 00	 call	 find_device_by_devnum
  00bb1	48 89 44 24 68	 mov	 QWORD PTR dev$[rsp], rax
  00bb6	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00bbc	75 19		 jne	 SHORT $LN82@qeth_cmd

; 2960 :                 {
; 2961 :                     // "%1d:%04X device not found"
; 2962 :                     devnotfound_msg( lcss, devnum );

  00bbe	0f b7 54 24 70	 movzx	 edx, WORD PTR devnum$[rsp]
  00bc3	0f b7 4c 24 74	 movzx	 ecx, WORD PTR lcss$[rsp]
  00bc8	e8 00 00 00 00	 call	 devnotfound_msg

; 2963 :                     return -1;

  00bcd	b8 ff ff ff ff	 mov	 eax, -1
  00bd2	e9 fa 08 00 00	 jmp	 $LN1@qeth_cmd
$LN82@qeth_cmd:

; 2964 :                 }
; 2965 :                 if ( !dev->allocated ||

  00bd7	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00bdc	83 78 40 00	 cmp	 DWORD PTR [rax+64], 0
  00be0	74 14		 je	 SHORT $LN84@qeth_cmd
  00be2	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00be7	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  00beb	3d 31 17 00 00	 cmp	 eax, 5937		; 00001731H
  00bf0	0f 84 8b 00 00
	00		 je	 $LN83@qeth_cmd
$LN84@qeth_cmd:

; 2966 :                      dev->devtype != 0x1731 )
; 2967 :                 {
; 2968 :                     // "%1d:%04X device is not a '%s'"
; 2969 :                     WRMSG(HHC02209, "E", lcss, devnum, "QETH" );

  00bf6	0f b7 44 24 70	 movzx	 eax, WORD PTR devnum$[rsp]
  00bfb	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv467[rsp], eax
  00c02	0f b7 4c 24 74	 movzx	 ecx, WORD PTR lcss$[rsp]
  00c07	89 8c 24 c0 00
	00 00		 mov	 DWORD PTR tv469[rsp], ecx
  00c0e	b9 01 00 00 00	 mov	 ecx, 1
  00c13	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c19	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206766
  00c20	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00c25	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR tv467[rsp]
  00c2c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00c30	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR tv469[rsp]
  00c37	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00c3b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206767
  00c42	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c47	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206768
  00c4e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c53	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c58	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c5e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206769
  00c65	ba 99 0b 00 00	 mov	 edx, 2969		; 00000b99H
  00c6a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206770
  00c71	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2970 :                     return -1;

  00c77	b8 ff ff ff ff	 mov	 eax, -1
  00c7c	e9 50 08 00 00	 jmp	 $LN1@qeth_cmd
$LN83@qeth_cmd:

; 2971 :                 }
; 2972 :                 all = FALSE;

  00c81	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR all$[rsp], 0

; 2973 :                 pDEVGRP = dev->group;

  00c8c	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00c91	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00c95	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR pDEVGRP$[rsp], rax

; 2974 :             }

  00c9d	eb 7b		 jmp	 SHORT $LN81@qeth_cmd
$LN80@qeth_cmd:

; 2975 :             else
; 2976 :             {
; 2977 :                 // "Invalid command usage. Type 'help %s' for assistance."
; 2978 :                 WRMSG( HHC02299, "E", argv[0] );

  00c9f	b8 08 00 00 00	 mov	 eax, 8
  00ca4	48 6b c0 00	 imul	 rax, rax, 0
  00ca8	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv513[rsp], rax
  00cb0	b9 01 00 00 00	 mov	 ecx, 1
  00cb5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00cbb	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00cc3	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR tv513[rsp]
  00ccb	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00ccf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00cd4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206771
  00cdb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ce0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206772
  00ce7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00cec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00cf1	41 b9 03 00 00
	00		 mov	 r9d, 3
  00cf7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206773
  00cfe	ba a2 0b 00 00	 mov	 edx, 2978		; 00000ba2H
  00d03	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206774
  00d0a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2979 :                 return -1;

  00d10	b8 ff ff ff ff	 mov	 eax, -1
  00d15	e9 b7 07 00 00	 jmp	 $LN1@qeth_cmd
$LN81@qeth_cmd:
$LN79@qeth_cmd:
$LN77@qeth_cmd:

; 2980 :             }
; 2981 :         }
; 2982 : 
; 2983 :         if (argc > 3)

  00d1a	83 bc 24 00 02
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00d22	7e 7b		 jle	 SHORT $LN85@qeth_cmd

; 2984 :         {
; 2985 :             // "Invalid command usage. Type 'help %s' for assistance."
; 2986 :             WRMSG( HHC02299, "E", argv[0] );

  00d24	b8 08 00 00 00	 mov	 eax, 8
  00d29	48 6b c0 00	 imul	 rax, rax, 0
  00d2d	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv526[rsp], rax
  00d35	b9 01 00 00 00	 mov	 ecx, 1
  00d3a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00d40	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00d48	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR tv526[rsp]
  00d50	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00d54	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00d59	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206776
  00d60	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00d65	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206777
  00d6c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00d71	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d76	41 b9 03 00 00
	00		 mov	 r9d, 3
  00d7c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206778
  00d83	ba aa 0b 00 00	 mov	 edx, 2986		; 00000baaH
  00d88	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206779
  00d8f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2987 :             return -1;

  00d95	b8 ff ff ff ff	 mov	 eax, -1
  00d9a	e9 32 07 00 00	 jmp	 $LN1@qeth_cmd
$LN85@qeth_cmd:

; 2988 :         }
; 2989 : 
; 2990 :         grp = NULL;

  00d9f	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR grp$[rsp], 0

; 2991 :         found = FALSE;

  00dab	c6 44 24 64 00	 mov	 BYTE PTR found$[rsp], 0

; 2992 : 
; 2993 :         for ( dev = sysblk.firstdev; dev; dev = dev->nextdev )

  00db0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00db7	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  00dbe	48 89 44 24 68	 mov	 QWORD PTR dev$[rsp], rax
  00dc3	eb 0e		 jmp	 SHORT $LN19@qeth_cmd
$LN17@qeth_cmd:
  00dc5	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00dca	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00dce	48 89 44 24 68	 mov	 QWORD PTR dev$[rsp], rax
$LN19@qeth_cmd:
  00dd3	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00dd9	0f 84 15 06 00
	00		 je	 $LN18@qeth_cmd

; 2994 :         {
; 2995 :           /* Check the device is a QETH device */
; 2996 :           if ( dev->allocated &&

  00ddf	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00de4	83 78 40 00	 cmp	 DWORD PTR [rax+64], 0
  00de8	0f 84 01 06 00
	00		 je	 $LN86@qeth_cmd
  00dee	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00df3	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  00df7	3d 31 17 00 00	 cmp	 eax, 5937		; 00001731H
  00dfc	0f 85 ed 05 00
	00		 jne	 $LN86@qeth_cmd

; 2997 :                dev->devtype == 0x1731 )
; 2998 :           {
; 2999 :             /* Check whether we are displaying all QETH groups or just a specific QETH group */
; 3000 :             if (all == TRUE || pDEVGRP == dev->group)

  00e02	83 bc 24 88 00
	00 00 01	 cmp	 DWORD PTR all$[rsp], 1
  00e0a	74 17		 je	 SHORT $LN88@qeth_cmd
  00e0c	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00e11	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00e15	48 39 84 24 b8
	00 00 00	 cmp	 QWORD PTR pDEVGRP$[rsp], rax
  00e1d	0f 85 cc 05 00
	00		 jne	 $LN87@qeth_cmd
$LN88@qeth_cmd:

; 3001 :             {
; 3002 :               /* Check whether we have already displayed this QETH group */
; 3003 :               if (grp != dev->group->grp_data)

  00e23	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00e28	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00e2c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00e30	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR grp$[rsp], rax
  00e38	0f 84 b1 05 00
	00		 je	 $LN89@qeth_cmd

; 3004 :               {
; 3005 :                 /* Check whether this QETH group is complete */
; 3006 :                 grp = dev->group->grp_data;

  00e3e	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00e43	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00e47	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00e4b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR grp$[rsp], rax

; 3007 :                 if (dev->group->members == dev->group->acount)

  00e53	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00e58	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00e5c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  00e61	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00e65	8b 49 04	 mov	 ecx, DWORD PTR [rcx+4]
  00e68	39 08		 cmp	 DWORD PTR [rax], ecx
  00e6a	0f 85 7f 05 00
	00		 jne	 $LN90@qeth_cmd

; 3008 :                 {
; 3009 :                   /* The first device of a complete QETH group, display the addresses */
; 3010 :                   found = TRUE;

  00e70	c6 44 24 64 01	 mov	 BYTE PTR found$[rsp], 1

; 3011 :                   numaddr = 0;

  00e75	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR numaddr$[rsp], 0

; 3012 : 
; 3013 :                   /* Display registered MAC addresses. */
; 3014 :                   for (i = 0; i < OSA_MAXMAC; i++)

  00e80	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00e88	eb 0a		 jmp	 SHORT $LN22@qeth_cmd
$LN20@qeth_cmd:
  00e8a	8b 44 24 60	 mov	 eax, DWORD PTR i$[rsp]
  00e8e	ff c0		 inc	 eax
  00e90	89 44 24 60	 mov	 DWORD PTR i$[rsp], eax
$LN22@qeth_cmd:
  00e94	83 7c 24 60 20	 cmp	 DWORD PTR i$[rsp], 32	; 00000020H
  00e99	0f 8d 17 02 00
	00		 jge	 $LN21@qeth_cmd

; 3015 :                   {
; 3016 :                     if (grp->mac[i].type)

  00e9f	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  00ea4	48 6b c0 0c	 imul	 rax, rax, 12
  00ea8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR grp$[rsp]
  00eb0	83 bc 01 60 04
	00 00 00	 cmp	 DWORD PTR [rcx+rax+1120], 0
  00eb8	0f 84 f3 01 00
	00		 je	 $LN91@qeth_cmd

; 3017 :                     {
; 3018 :                       MSGBUF( charaddr,

  00ebe	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  00ec3	48 6b c0 0c	 imul	 rax, rax, 12
  00ec7	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR grp$[rsp]
  00ecf	48 8d 84 01 58
	04 00 00	 lea	 rax, QWORD PTR [rcx+rax+1112]
  00ed7	b9 01 00 00 00	 mov	 ecx, 1
  00edc	48 6b c9 05	 imul	 rcx, rcx, 5
  00ee0	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00ee4	48 63 4c 24 60	 movsxd	 rcx, DWORD PTR i$[rsp]
  00ee9	48 6b c9 0c	 imul	 rcx, rcx, 12
  00eed	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR grp$[rsp]
  00ef5	48 8d 8c 0a 58
	04 00 00	 lea	 rcx, QWORD PTR [rdx+rcx+1112]
  00efd	ba 01 00 00 00	 mov	 edx, 1
  00f02	48 6b d2 04	 imul	 rdx, rdx, 4
  00f06	0f b6 0c 11	 movzx	 ecx, BYTE PTR [rcx+rdx]
  00f0a	48 63 54 24 60	 movsxd	 rdx, DWORD PTR i$[rsp]
  00f0f	48 6b d2 0c	 imul	 rdx, rdx, 12
  00f13	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR grp$[rsp]
  00f1b	49 8d 94 10 58
	04 00 00	 lea	 rdx, QWORD PTR [r8+rdx+1112]
  00f23	41 b8 01 00 00
	00		 mov	 r8d, 1
  00f29	4d 6b c0 03	 imul	 r8, r8, 3
  00f2d	42 0f b6 14 02	 movzx	 edx, BYTE PTR [rdx+r8]
  00f32	4c 63 44 24 60	 movsxd	 r8, DWORD PTR i$[rsp]
  00f37	4d 6b c0 0c	 imul	 r8, r8, 12
  00f3b	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR grp$[rsp]
  00f43	4f 8d 84 01 58
	04 00 00	 lea	 r8, QWORD PTR [r9+r8+1112]
  00f4b	41 b9 01 00 00
	00		 mov	 r9d, 1
  00f51	4d 6b c9 02	 imul	 r9, r9, 2
  00f55	47 0f b6 04 08	 movzx	 r8d, BYTE PTR [r8+r9]
  00f5a	4c 63 4c 24 60	 movsxd	 r9, DWORD PTR i$[rsp]
  00f5f	4d 6b c9 0c	 imul	 r9, r9, 12
  00f63	4c 8b 94 24 80
	00 00 00	 mov	 r10, QWORD PTR grp$[rsp]
  00f6b	4f 8d 8c 0a 58
	04 00 00	 lea	 r9, QWORD PTR [r10+r9+1112]
  00f73	41 ba 01 00 00
	00		 mov	 r10d, 1
  00f79	4d 6b d2 01	 imul	 r10, r10, 1
  00f7d	47 0f b6 0c 11	 movzx	 r9d, BYTE PTR [r9+r10]
  00f82	4c 63 54 24 60	 movsxd	 r10, DWORD PTR i$[rsp]
  00f87	4d 6b d2 0c	 imul	 r10, r10, 12
  00f8b	4c 8b 9c 24 80
	00 00 00	 mov	 r11, QWORD PTR grp$[rsp]
  00f93	4f 8d 94 13 58
	04 00 00	 lea	 r10, QWORD PTR [r11+r10+1112]
  00f9b	41 bb 01 00 00
	00		 mov	 r11d, 1
  00fa1	4d 6b db 00	 imul	 r11, r11, 0
  00fa5	47 0f b6 14 1a	 movzx	 r10d, BYTE PTR [r10+r11]
  00faa	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00fae	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00fb2	89 54 24 30	 mov	 DWORD PTR [rsp+48], edx
  00fb6	44 89 44 24 28	 mov	 DWORD PTR [rsp+40], r8d
  00fbb	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00fc0	45 8b ca	 mov	 r9d, r10d
  00fc3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206786
  00fca	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  00fcf	48 8d 8c 24 28
	01 00 00	 lea	 rcx, QWORD PTR charaddr$[rsp]
  00fd7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 3019 :                                 "%2.2X:%2.2X:%2.2X:%2.2X:%2.2X:%2.2X",
; 3020 :                                 grp->mac[i].addr[0],
; 3021 :                                 grp->mac[i].addr[1],
; 3022 :                                 grp->mac[i].addr[2],
; 3023 :                                 grp->mac[i].addr[3],
; 3024 :                                 grp->mac[i].addr[4],
; 3025 :                                 grp->mac[i].addr[5] );
; 3026 :                       // "%s device %1d:%04X group has registered MAC address %s"
; 3027 :                       WRMSG(HHC02344, "I", dev->typname, LCSS_DEVNUM,

  00fdd	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00fe3	74 12		 je	 SHORT $LN101@qeth_cmd
  00fe5	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00fea	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00fee	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv628[rsp], eax
  00ff5	eb 0b		 jmp	 SHORT $LN102@qeth_cmd
$LN101@qeth_cmd:
  00ff7	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv628[rsp], 0
$LN102@qeth_cmd:
  01002	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  01008	74 14		 je	 SHORT $LN103@qeth_cmd
  0100a	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0100f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01013	d1 f8		 sar	 eax, 1
  01015	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv634[rsp], eax
  0101c	eb 0b		 jmp	 SHORT $LN104@qeth_cmd
$LN103@qeth_cmd:
  0101e	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv634[rsp], 0
$LN104@qeth_cmd:
  01029	b9 01 00 00 00	 mov	 ecx, 1
  0102e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01034	48 8d 8c 24 28
	01 00 00	 lea	 rcx, QWORD PTR charaddr$[rsp]
  0103c	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01041	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv628[rsp]
  01048	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  0104c	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv634[rsp]
  01053	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01057	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  0105c	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  01060	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206787
  0106c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206788
  01078	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0107d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01082	41 b9 03 00 00
	00		 mov	 r9d, 3
  01088	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206789
  0108f	ba d4 0b 00 00	 mov	 edx, 3028		; 00000bd4H
  01094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206790
  0109b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3028 :                                 charaddr );
; 3029 :                       numaddr++;

  010a1	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR numaddr$[rsp]
  010a8	ff c0		 inc	 eax
  010aa	89 84 24 8c 00
	00 00		 mov	 DWORD PTR numaddr$[rsp], eax
$LN91@qeth_cmd:

; 3030 :                     }
; 3031 :                   }

  010b1	e9 d4 fd ff ff	 jmp	 $LN20@qeth_cmd
$LN21@qeth_cmd:

; 3032 : 
; 3033 :                   /* Display registered IPv4 address. */
; 3034 :                   if (grp->ipaddr4[0].type == IPV4_TYPE_INUSE)

  010b6	b8 08 00 00 00	 mov	 eax, 8
  010bb	48 6b c0 00	 imul	 rax, rax, 0
  010bf	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR grp$[rsp]
  010c7	83 bc 01 dc 00
	00 00 01	 cmp	 DWORD PTR [rcx+rax+220], 1
  010cf	0f 85 09 01 00
	00		 jne	 $LN92@qeth_cmd

; 3035 :                   {
; 3036 :                     hinet_ntop( AF_INET, grp->ipaddr4[0].addr, charaddr, sizeof(charaddr) );

  010d5	b8 08 00 00 00	 mov	 eax, 8
  010da	48 6b c0 00	 imul	 rax, rax, 0
  010de	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR grp$[rsp]
  010e6	48 8d 84 01 d8
	00 00 00	 lea	 rax, QWORD PTR [rcx+rax+216]
  010ee	41 b9 30 00 00
	00		 mov	 r9d, 48			; 00000030H
  010f4	4c 8d 84 24 28
	01 00 00	 lea	 r8, QWORD PTR charaddr$[rsp]
  010fc	48 8b d0	 mov	 rdx, rax
  010ff	b9 02 00 00 00	 mov	 ecx, 2
  01104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_inet_ntop

; 3037 :                     // "%s device %1d:%04X group has registered IP address %s"
; 3038 :                     WRMSG(HHC02345, "I", dev->typname, LCSS_DEVNUM,

  0110a	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  01110	74 12		 je	 SHORT $LN105@qeth_cmd
  01112	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01117	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0111b	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv665[rsp], eax
  01122	eb 0b		 jmp	 SHORT $LN106@qeth_cmd
$LN105@qeth_cmd:
  01124	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv665[rsp], 0
$LN106@qeth_cmd:
  0112f	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  01135	74 14		 je	 SHORT $LN107@qeth_cmd
  01137	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0113c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01140	d1 f8		 sar	 eax, 1
  01142	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv671[rsp], eax
  01149	eb 0b		 jmp	 SHORT $LN108@qeth_cmd
$LN107@qeth_cmd:
  0114b	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv671[rsp], 0
$LN108@qeth_cmd:
  01156	b9 01 00 00 00	 mov	 ecx, 1
  0115b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01161	48 8d 8c 24 28
	01 00 00	 lea	 rcx, QWORD PTR charaddr$[rsp]
  01169	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0116e	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv665[rsp]
  01175	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  01179	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv671[rsp]
  01180	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01184	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  01189	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  0118d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206792
  01199	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0119e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206793
  011a5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  011aa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  011af	41 b9 03 00 00
	00		 mov	 r9d, 3
  011b5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206794
  011bc	ba df 0b 00 00	 mov	 edx, 3039		; 00000bdfH
  011c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206795
  011c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3039 :                             charaddr );
; 3040 :                     numaddr++;

  011ce	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR numaddr$[rsp]
  011d5	ff c0		 inc	 eax
  011d7	89 84 24 8c 00
	00 00		 mov	 DWORD PTR numaddr$[rsp], eax
$LN92@qeth_cmd:

; 3041 :                   }
; 3042 : 
; 3043 :                   /* Display registered IPv6 addresses. */
; 3044 :                   for (i = 0; i < OSA_MAXIPV6; i++)

  011de	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  011e6	eb 0a		 jmp	 SHORT $LN25@qeth_cmd
$LN23@qeth_cmd:
  011e8	8b 44 24 60	 mov	 eax, DWORD PTR i$[rsp]
  011ec	ff c0		 inc	 eax
  011ee	89 44 24 60	 mov	 DWORD PTR i$[rsp], eax
$LN25@qeth_cmd:
  011f2	83 7c 24 60 20	 cmp	 DWORD PTR i$[rsp], 32	; 00000020H
  011f7	0f 8d 2d 01 00
	00		 jge	 $LN24@qeth_cmd

; 3045 :                   {
; 3046 :                     if (grp->ipaddr6[i].type == IPV6_TYPE_INUSE)

  011fd	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  01202	48 6b c0 14	 imul	 rax, rax, 20
  01206	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR grp$[rsp]
  0120e	83 bc 01 e8 01
	00 00 01	 cmp	 DWORD PTR [rcx+rax+488], 1
  01216	0f 85 09 01 00
	00		 jne	 $LN93@qeth_cmd

; 3047 :                     {
; 3048 :                       hinet_ntop( AF_INET6, grp->ipaddr6[i].addr, charaddr, sizeof(charaddr) );

  0121c	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  01221	48 6b c0 14	 imul	 rax, rax, 20
  01225	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR grp$[rsp]
  0122d	48 8d 84 01 d8
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax+472]
  01235	41 b9 30 00 00
	00		 mov	 r9d, 48			; 00000030H
  0123b	4c 8d 84 24 28
	01 00 00	 lea	 r8, QWORD PTR charaddr$[rsp]
  01243	48 8b d0	 mov	 rdx, rax
  01246	b9 17 00 00 00	 mov	 ecx, 23
  0124b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_inet_ntop

; 3049 :                       // "%s device %1d:%04X group has registered IP address %s"
; 3050 :                       WRMSG(HHC02345, "I", dev->typname, LCSS_DEVNUM,

  01251	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  01257	74 12		 je	 SHORT $LN109@qeth_cmd
  01259	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0125e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01262	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv706[rsp], eax
  01269	eb 0b		 jmp	 SHORT $LN110@qeth_cmd
$LN109@qeth_cmd:
  0126b	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv706[rsp], 0
$LN110@qeth_cmd:
  01276	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0127c	74 14		 je	 SHORT $LN111@qeth_cmd
  0127e	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01283	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01287	d1 f8		 sar	 eax, 1
  01289	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv712[rsp], eax
  01290	eb 0b		 jmp	 SHORT $LN112@qeth_cmd
$LN111@qeth_cmd:
  01292	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv712[rsp], 0
$LN112@qeth_cmd:
  0129d	b9 01 00 00 00	 mov	 ecx, 1
  012a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  012a8	48 8d 8c 24 28
	01 00 00	 lea	 rcx, QWORD PTR charaddr$[rsp]
  012b0	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  012b5	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv706[rsp]
  012bc	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  012c0	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR tv712[rsp]
  012c7	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  012cb	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  012d0	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  012d4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  012d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206797
  012e0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  012e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206798
  012ec	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  012f1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  012f6	41 b9 03 00 00
	00		 mov	 r9d, 3
  012fc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206799
  01303	ba eb 0b 00 00	 mov	 edx, 3051		; 00000bebH
  01308	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206800
  0130f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3051 :                               charaddr );
; 3052 :                       numaddr++;

  01315	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR numaddr$[rsp]
  0131c	ff c0		 inc	 eax
  0131e	89 84 24 8c 00
	00 00		 mov	 DWORD PTR numaddr$[rsp], eax
$LN93@qeth_cmd:

; 3053 :                     }
; 3054 :                   }

  01325	e9 be fe ff ff	 jmp	 $LN23@qeth_cmd
$LN24@qeth_cmd:

; 3055 : 
; 3056 :                   /* Display whether there were any registered addresses. */
; 3057 :                   if (numaddr == 0)

  0132a	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR numaddr$[rsp], 0
  01332	0f 85 b7 00 00
	00		 jne	 $LN94@qeth_cmd

; 3058 :                   {
; 3059 :                   // "%s device %1d:%04X group has no registered MAC or IP addresses"
; 3060 :                   WRMSG(HHC02346, "I", dev->typname, LCSS_DEVNUM);

  01338	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0133e	74 12		 je	 SHORT $LN113@qeth_cmd
  01340	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  01345	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01349	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv730[rsp], eax
  01350	eb 0b		 jmp	 SHORT $LN114@qeth_cmd
$LN113@qeth_cmd:
  01352	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv730[rsp], 0
$LN114@qeth_cmd:
  0135d	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  01363	74 14		 je	 SHORT $LN115@qeth_cmd
  01365	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  0136a	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0136e	d1 f8		 sar	 eax, 1
  01370	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv736[rsp], eax
  01377	eb 0b		 jmp	 SHORT $LN116@qeth_cmd
$LN115@qeth_cmd:
  01379	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv736[rsp], 0
$LN116@qeth_cmd:
  01384	b9 01 00 00 00	 mov	 ecx, 1
  01389	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0138f	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR tv730[rsp]
  01396	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  0139a	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv736[rsp]
  013a1	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  013a5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dev$[rsp]
  013aa	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  013ae	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  013b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206802
  013ba	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  013bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206803
  013c6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  013cb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  013d0	41 b9 03 00 00
	00		 mov	 r9d, 3
  013d6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206804
  013dd	ba f4 0b 00 00	 mov	 edx, 3060		; 00000bf4H
  013e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206805
  013e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN94@qeth_cmd:
$LN90@qeth_cmd:
$LN89@qeth_cmd:
$LN87@qeth_cmd:
$LN86@qeth_cmd:

; 3061 :                   }
; 3062 :                 }
; 3063 :               }
; 3064 :             }
; 3065 :           }
; 3066 :         } /* end for (dev = ... */

  013ef	e9 d1 f9 ff ff	 jmp	 $LN17@qeth_cmd
$LN18@qeth_cmd:

; 3067 : 
; 3068 :         if (!found)

  013f4	0f b6 44 24 64	 movzx	 eax, BYTE PTR found$[rsp]
  013f9	85 c0		 test	 eax, eax
  013fb	75 5a		 jne	 SHORT $LN95@qeth_cmd

; 3069 :         {
; 3070 :             // "No %s devices found"
; 3071 :             WRMSG( HHC02347, "E", "QETH" );

  013fd	b9 01 00 00 00	 mov	 ecx, 1
  01402	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01408	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206807
  0140f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01414	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206808
  0141b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01420	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206809
  01427	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0142c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01431	41 b9 03 00 00
	00		 mov	 r9d, 3
  01437	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206810
  0143e	ba ff 0b 00 00	 mov	 edx, 3071		; 00000bffH
  01443	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206811
  0144a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3072 :             return -1;

  01450	b8 ff ff ff ff	 mov	 eax, -1
  01455	eb 7a		 jmp	 SHORT $LN1@qeth_cmd
$LN95@qeth_cmd:

; 3073 :         }
; 3074 : 
; 3075 :         return 0;

  01457	33 c0		 xor	 eax, eax
  01459	eb 76		 jmp	 SHORT $LN1@qeth_cmd
$LN75@qeth_cmd:

; 3076 :     }
; 3077 : 
; 3078 :     // "Invalid command usage. Type 'help %s' for assistance."
; 3079 :     WRMSG( HHC02299, "E", argv[0] );

  0145b	b8 08 00 00 00	 mov	 eax, 8
  01460	48 6b c0 00	 imul	 rax, rax, 0
  01464	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv761[rsp], rax
  0146c	b9 01 00 00 00	 mov	 ecx, 1
  01471	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01477	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0147f	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR tv761[rsp]
  01487	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0148b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01490	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206812
  01497	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0149c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206813
  014a3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  014a8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  014ad	41 b9 03 00 00
	00		 mov	 r9d, 3
  014b3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206814
  014ba	ba 07 0c 00 00	 mov	 edx, 3079		; 00000c07H
  014bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206815
  014c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 3080 :     return -1;

  014cc	b8 ff ff ff ff	 mov	 eax, -1
$LN1@qeth_cmd:

; 3081 : 
; 3082 : }  /* End of qeth_cmd */

  014d1	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  014d9	48 33 cc	 xor	 rcx, rsp
  014dc	e8 00 00 00 00	 call	 __security_check_cookie
  014e1	48 81 c4 f8 01
	00 00		 add	 rsp, 504		; 000001f8H
  014e8	c3		 ret	 0
qeth_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
i$ = 80
devnum$ = 84
lcss$ = 88
j$ = 92
mask$ = 96
dev$ = 104
onoff$ = 112
all$ = 116
tv333 = 120
tv335 = 124
pPTPBLK$ = 128
tv274 = 136
pDEVGRP$ = 144
tv364 = 152
tv131 = 160
tv143 = 168
tv170 = 176
tv233 = 184
tv246 = 192
pDEVBLK$ = 200
tv379 = 208
buf$1 = 224
__$ArrayPad$ = 352
argc$ = 384
argv$ = 392
cmdline$ = 400
ptp_cmd	PROC

; 2534 : {

$LN56:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@ptp_cmd:

; 2535 :     DEVBLK*  dev;
; 2536 :     PTPBLK*  pPTPBLK;
; 2537 :     U16      lcss;
; 2538 :     U16      devnum;
; 2539 :     u_int    all;
; 2540 :     u_int    onoff;
; 2541 :     u_int    mask;
; 2542 :     int      i;
; 2543 :     u_int    j;
; 2544 :     DEVGRP*  pDEVGRP;
; 2545 :     DEVBLK*  pDEVBLK;
; 2546 : 
; 2547 :     UNREFERENCED( cmdline );

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@ptp_cmd
$LN7@ptp_cmd:

; 2548 : 
; 2549 :     UPPER_ARGV_0( argv );

  0002d	48 83 bc 24 88
	01 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00036	74 47		 je	 SHORT $LN17@ptp_cmd
  00038	b8 08 00 00 00	 mov	 eax, 8
  0003d	48 6b c0 00	 imul	 rax, rax, 0
  00041	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00049	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0004e	74 2f		 je	 SHORT $LN17@ptp_cmd
  00050	b8 08 00 00 00	 mov	 eax, 8
  00055	48 6b c0 00	 imul	 rax, rax, 0
  00059	b9 08 00 00 00	 mov	 ecx, 8
  0005e	48 6b c9 00	 imul	 rcx, rcx, 0
  00062	48 8b 94 24 88
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006a	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0006e	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00076	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0007a	e8 00 00 00 00	 call	 strupper
$LN17@ptp_cmd:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 a8		 jne	 SHORT $LN7@ptp_cmd

; 2550 : 
; 2551 :     // Format:  "ptp  debug  on  [ [ <devnum>|ALL ] [ mask ] ]"
; 2552 :     // Format:  "ptp  debug  off [ [ <devnum>|ALL ] ]"
; 2553 : 
; 2554 :     if ( argc >= 2 && CMD(argv[1],debug,5) )

  00085	83 bc 24 80 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0008d	0f 8c 70 08 00
	00		 jl	 $LN18@ptp_cmd
  00093	b8 08 00 00 00	 mov	 eax, 8
  00098	48 6b c0 01	 imul	 rax, rax, 1
  0009c	41 b8 05 00 00
	00		 mov	 r8d, 5
  000a2	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000aa	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206509
  000b5	e8 00 00 00 00	 call	 strcaseabbrev
  000ba	85 c0		 test	 eax, eax
  000bc	0f 84 41 08 00
	00		 je	 $LN18@ptp_cmd

; 2555 :     {
; 2556 : 
; 2557 :         if ( argc >= 3 )

  000c2	83 bc 24 80 01
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  000ca	0f 8c fa 00 00
	00		 jl	 $LN19@ptp_cmd

; 2558 :         {
; 2559 :             if ( CMD(argv[2],on,2) )

  000d0	b8 08 00 00 00	 mov	 eax, 8
  000d5	48 6b c0 02	 imul	 rax, rax, 2
  000d9	41 b8 02 00 00
	00		 mov	 r8d, 2
  000df	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000e7	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206514
  000f2	e8 00 00 00 00	 call	 strcaseabbrev
  000f7	85 c0		 test	 eax, eax
  000f9	74 15		 je	 SHORT $LN21@ptp_cmd

; 2560 :             {
; 2561 :                 onoff = TRUE;

  000fb	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR onoff$[rsp], 1

; 2562 :                 mask = DBGPTPPACKET;

  00103	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR mask$[rsp], 1

; 2563 :             }

  0010b	e9 b8 00 00 00	 jmp	 $LN22@ptp_cmd
$LN21@ptp_cmd:

; 2564 :             else if ( CMD(argv[2],off,3) )

  00110	b8 08 00 00 00	 mov	 eax, 8
  00115	48 6b c0 02	 imul	 rax, rax, 2
  00119	41 b8 03 00 00
	00		 mov	 r8d, 3
  0011f	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00127	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206517
  00132	e8 00 00 00 00	 call	 strcaseabbrev
  00137	85 c0		 test	 eax, eax
  00139	74 12		 je	 SHORT $LN23@ptp_cmd

; 2565 :             {
; 2566 :                 onoff = FALSE;

  0013b	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR onoff$[rsp], 0

; 2567 :                 mask = 0;

  00143	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR mask$[rsp], 0

; 2568 :             }

  0014b	eb 7b		 jmp	 SHORT $LN24@ptp_cmd
$LN23@ptp_cmd:

; 2569 :             else
; 2570 :             {
; 2571 :                 // HHC02299 "Invalid command usage. Type 'help %s' for assistance."
; 2572 :                 WRMSG( HHC02299, "E", argv[0] );

  0014d	b8 08 00 00 00	 mov	 eax, 8
  00152	48 6b c0 00	 imul	 rax, rax, 0
  00156	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv131[rsp], rax
  0015e	b9 01 00 00 00	 mov	 ecx, 1
  00163	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00169	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00171	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR tv131[rsp]
  00179	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0017d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00182	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206518
  00189	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206519
  00195	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0019a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0019f	41 b9 03 00 00
	00		 mov	 r9d, 3
  001a5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206520
  001ac	ba 0c 0a 00 00	 mov	 edx, 2572		; 00000a0cH
  001b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206521
  001b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2573 :                 return -1;

  001be	b8 ff ff ff ff	 mov	 eax, -1
  001c3	e9 b1 07 00 00	 jmp	 $LN1@ptp_cmd
$LN24@ptp_cmd:
$LN22@ptp_cmd:

; 2574 :             }
; 2575 :         }

  001c8	eb 7b		 jmp	 SHORT $LN20@ptp_cmd
$LN19@ptp_cmd:

; 2576 :         else
; 2577 :         {
; 2578 :             // HHC02299 "Invalid command usage. Type 'help %s' for assistance."
; 2579 :             WRMSG( HHC02299, "E", argv[0] );

  001ca	b8 08 00 00 00	 mov	 eax, 8
  001cf	48 6b c0 00	 imul	 rax, rax, 0
  001d3	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv143[rsp], rax
  001db	b9 01 00 00 00	 mov	 ecx, 1
  001e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001e6	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001ee	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR tv143[rsp]
  001f6	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001fa	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206522
  00206	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0020b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206523
  00212	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00217	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0021c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00222	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206524
  00229	ba 13 0a 00 00	 mov	 edx, 2579		; 00000a13H
  0022e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206525
  00235	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2580 :             return -1;

  0023b	b8 ff ff ff ff	 mov	 eax, -1
  00240	e9 34 07 00 00	 jmp	 $LN1@ptp_cmd
$LN20@ptp_cmd:

; 2581 :         }
; 2582 : 
; 2583 :         all = TRUE;

  00245	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR all$[rsp], 1

; 2584 :         if ( argc >= 4 )

  0024d	83 bc 24 80 01
	00 00 04	 cmp	 DWORD PTR argc$[rsp], 4
  00255	0f 8c e5 00 00
	00		 jl	 $LN25@ptp_cmd

; 2585 :         {
; 2586 :             if ( CMD(argv[3],all,3) )

  0025b	b8 08 00 00 00	 mov	 eax, 8
  00260	48 6b c0 03	 imul	 rax, rax, 3
  00264	41 b8 03 00 00
	00		 mov	 r8d, 3
  0026a	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00272	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00276	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206529
  0027d	e8 00 00 00 00	 call	 strcaseabbrev
  00282	85 c0		 test	 eax, eax
  00284	74 0d		 je	 SHORT $LN26@ptp_cmd

; 2587 :             {
; 2588 :                 all = TRUE;

  00286	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR all$[rsp], 1

; 2589 :             }

  0028e	e9 ad 00 00 00	 jmp	 $LN27@ptp_cmd
$LN26@ptp_cmd:

; 2590 :             else if ( parse_single_devnum( argv[3], &lcss, &devnum) == 0 )

  00293	b8 08 00 00 00	 mov	 eax, 8
  00298	48 6b c0 03	 imul	 rax, rax, 3
  0029c	4c 8d 44 24 54	 lea	 r8, QWORD PTR devnum$[rsp]
  002a1	48 8d 54 24 58	 lea	 rdx, QWORD PTR lcss$[rsp]
  002a6	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002ae	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  002b2	e8 00 00 00 00	 call	 parse_single_devnum
  002b7	85 c0		 test	 eax, eax
  002b9	75 0a		 jne	 SHORT $LN28@ptp_cmd

; 2591 :             {
; 2592 :                 all = FALSE;

  002bb	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR all$[rsp], 0

; 2593 :             }

  002c3	eb 7b		 jmp	 SHORT $LN29@ptp_cmd
$LN28@ptp_cmd:

; 2594 :             else
; 2595 :             {
; 2596 :                 // HHC02299 "Invalid command usage. Type 'help %s' for assistance."
; 2597 :                 WRMSG( HHC02299, "E", argv[0] );

  002c5	b8 08 00 00 00	 mov	 eax, 8
  002ca	48 6b c0 00	 imul	 rax, rax, 0
  002ce	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv170[rsp], rax
  002d6	b9 01 00 00 00	 mov	 ecx, 1
  002db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002e1	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002e9	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR tv170[rsp]
  002f1	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  002f5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206532
  00301	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00306	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206533
  0030d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00312	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00317	41 b9 03 00 00
	00		 mov	 r9d, 3
  0031d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206534
  00324	ba 25 0a 00 00	 mov	 edx, 2597		; 00000a25H
  00329	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206535
  00330	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2598 :                 return -1;

  00336	b8 ff ff ff ff	 mov	 eax, -1
  0033b	e9 39 06 00 00	 jmp	 $LN1@ptp_cmd
$LN29@ptp_cmd:
$LN27@ptp_cmd:
$LN25@ptp_cmd:

; 2599 :             }
; 2600 :         }
; 2601 : 
; 2602 :         if ( argc >= 5 )

  00340	83 bc 24 80 01
	00 00 05	 cmp	 DWORD PTR argc$[rsp], 5
  00348	0f 8c 7d 02 00
	00		 jl	 $LN30@ptp_cmd

; 2603 :         {
; 2604 :             if ( onoff == TRUE)

  0034e	83 7c 24 70 01	 cmp	 DWORD PTR onoff$[rsp], 1
  00353	0f 85 f7 01 00
	00		 jne	 $LN31@ptp_cmd

; 2605 :             {
; 2606 :                 mask = 0;

  00359	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR mask$[rsp], 0

; 2607 :                 j = 0;

  00361	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0

; 2608 :                 for ( i = 4 ; i < argc ; i++ )

  00369	c7 44 24 50 04
	00 00 00	 mov	 DWORD PTR i$[rsp], 4
  00371	eb 0a		 jmp	 SHORT $LN10@ptp_cmd
$LN8@ptp_cmd:
  00373	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  00377	ff c0		 inc	 eax
  00379	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN10@ptp_cmd:
  0037d	8b 84 24 80 01
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  00384	39 44 24 50	 cmp	 DWORD PTR i$[rsp], eax
  00388	0f 8d c0 01 00
	00		 jge	 $LN9@ptp_cmd

; 2609 :                 {
; 2610 :                     if ( CMD(argv[i],packet,6) )

  0038e	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  00393	41 b8 06 00 00
	00		 mov	 r8d, 6
  00399	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003a1	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  003a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206541
  003ac	e8 00 00 00 00	 call	 strcaseabbrev
  003b1	85 c0		 test	 eax, eax
  003b3	74 0d		 je	 SHORT $LN33@ptp_cmd

; 2611 :                     {
; 2612 :                         j = DBGPTPPACKET;

  003b5	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR j$[rsp], 1

; 2613 :                     }

  003bd	e9 77 01 00 00	 jmp	 $LN34@ptp_cmd
$LN33@ptp_cmd:

; 2614 :                     else if ( CMD(argv[i],data,4) )

  003c2	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  003c7	41 b8 04 00 00
	00		 mov	 r8d, 4
  003cd	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003d5	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  003d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206544
  003e0	e8 00 00 00 00	 call	 strcaseabbrev
  003e5	85 c0		 test	 eax, eax
  003e7	74 0d		 je	 SHORT $LN35@ptp_cmd

; 2615 :                     {
; 2616 :                         j = DBGPTPDATA;

  003e9	c7 44 24 5c 02
	00 00 00	 mov	 DWORD PTR j$[rsp], 2

; 2617 :                     }

  003f1	e9 43 01 00 00	 jmp	 $LN36@ptp_cmd
$LN35@ptp_cmd:

; 2618 :                     else if ( CMD(argv[i],expand,6) )

  003f6	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  003fb	41 b8 06 00 00
	00		 mov	 r8d, 6
  00401	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00409	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0040d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206547
  00414	e8 00 00 00 00	 call	 strcaseabbrev
  00419	85 c0		 test	 eax, eax
  0041b	74 0d		 je	 SHORT $LN37@ptp_cmd

; 2619 :                     {
; 2620 :                         j = DBGPTPEXPAND;

  0041d	c7 44 24 5c 04
	00 00 00	 mov	 DWORD PTR j$[rsp], 4

; 2621 :                     }

  00425	e9 0f 01 00 00	 jmp	 $LN38@ptp_cmd
$LN37@ptp_cmd:

; 2622 :                     else if ( CMD(argv[i],updown,6) )

  0042a	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  0042f	41 b8 06 00 00
	00		 mov	 r8d, 6
  00435	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0043d	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00441	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206550
  00448	e8 00 00 00 00	 call	 strcaseabbrev
  0044d	85 c0		 test	 eax, eax
  0044f	74 0d		 je	 SHORT $LN39@ptp_cmd

; 2623 :                     {
; 2624 :                         j = DBGPTPUPDOWN;

  00451	c7 44 24 5c 10
	00 00 00	 mov	 DWORD PTR j$[rsp], 16

; 2625 :                     }

  00459	e9 db 00 00 00	 jmp	 $LN40@ptp_cmd
$LN39@ptp_cmd:

; 2626 :                     else if ( CMD(argv[i],ccw,3) )

  0045e	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  00463	41 b8 03 00 00
	00		 mov	 r8d, 3
  00469	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00471	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00475	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206553
  0047c	e8 00 00 00 00	 call	 strcaseabbrev
  00481	85 c0		 test	 eax, eax
  00483	74 0d		 je	 SHORT $LN41@ptp_cmd

; 2627 :                     {
; 2628 :                         j = DBGPTPCCW;

  00485	c7 44 24 5c 20
	00 00 00	 mov	 DWORD PTR j$[rsp], 32	; 00000020H

; 2629 :                     }

  0048d	e9 a7 00 00 00	 jmp	 $LN42@ptp_cmd
$LN41@ptp_cmd:

; 2630 :                     else
; 2631 :                     {
; 2632 :                         j = atoi( argv[i] );

  00492	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  00497	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0049f	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  004a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  004a9	89 44 24 5c	 mov	 DWORD PTR j$[rsp], eax

; 2633 :                         if ( j < 1 || j > 255 )

  004ad	83 7c 24 5c 01	 cmp	 DWORD PTR j$[rsp], 1
  004b2	72 0a		 jb	 SHORT $LN44@ptp_cmd
  004b4	81 7c 24 5c ff
	00 00 00	 cmp	 DWORD PTR j$[rsp], 255	; 000000ffH
  004bc	76 7b		 jbe	 SHORT $LN43@ptp_cmd
$LN44@ptp_cmd:

; 2634 :                         {
; 2635 :                             // HHC02299 "Invalid command usage. Type 'help %s' for assistance."
; 2636 :                             WRMSG( HHC02299, "E", argv[0] );

  004be	b8 08 00 00 00	 mov	 eax, 8
  004c3	48 6b c0 00	 imul	 rax, rax, 0
  004c7	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv233[rsp], rax
  004cf	b9 01 00 00 00	 mov	 ecx, 1
  004d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004da	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004e2	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR tv233[rsp]
  004ea	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  004ee	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206556
  004fa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206557
  00506	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0050b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00510	41 b9 03 00 00
	00		 mov	 r9d, 3
  00516	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206558
  0051d	ba 4c 0a 00 00	 mov	 edx, 2636		; 00000a4cH
  00522	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206559
  00529	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2637 :                             return -1;

  0052f	b8 ff ff ff ff	 mov	 eax, -1
  00534	e9 40 04 00 00	 jmp	 $LN1@ptp_cmd
$LN43@ptp_cmd:
$LN42@ptp_cmd:
$LN40@ptp_cmd:
$LN38@ptp_cmd:
$LN36@ptp_cmd:
$LN34@ptp_cmd:

; 2638 :                         }
; 2639 :                     }
; 2640 :                     mask |= j;

  00539	8b 44 24 5c	 mov	 eax, DWORD PTR j$[rsp]
  0053d	8b 4c 24 60	 mov	 ecx, DWORD PTR mask$[rsp]
  00541	0b c8		 or	 ecx, eax
  00543	8b c1		 mov	 eax, ecx
  00545	89 44 24 60	 mov	 DWORD PTR mask$[rsp], eax

; 2641 :                 }

  00549	e9 25 fe ff ff	 jmp	 $LN8@ptp_cmd
$LN9@ptp_cmd:

; 2642 :             }

  0054e	eb 7b		 jmp	 SHORT $LN32@ptp_cmd
$LN31@ptp_cmd:

; 2643 :             else
; 2644 :             {
; 2645 :                 // HHC02299 "Invalid command usage. Type 'help %s' for assistance."
; 2646 :                 WRMSG( HHC02299, "E", argv[0] );

  00550	b8 08 00 00 00	 mov	 eax, 8
  00555	48 6b c0 00	 imul	 rax, rax, 0
  00559	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv246[rsp], rax
  00561	b9 01 00 00 00	 mov	 ecx, 1
  00566	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0056c	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00574	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR tv246[rsp]
  0057c	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00580	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00585	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206560
  0058c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00591	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206561
  00598	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0059d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005a2	41 b9 03 00 00
	00		 mov	 r9d, 3
  005a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206562
  005af	ba 56 0a 00 00	 mov	 edx, 2646		; 00000a56H
  005b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206563
  005bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2647 :                 return -1;

  005c1	b8 ff ff ff ff	 mov	 eax, -1
  005c6	e9 ae 03 00 00	 jmp	 $LN1@ptp_cmd
$LN32@ptp_cmd:
$LN30@ptp_cmd:

; 2648 :             }
; 2649 :         }
; 2650 : 
; 2651 :         if ( all )

  005cb	83 7c 24 74 00	 cmp	 DWORD PTR all$[rsp], 0
  005d0	0f 84 09 01 00
	00		 je	 $LN45@ptp_cmd

; 2652 :         {
; 2653 :             for ( dev = sysblk.firstdev; dev; dev = dev->nextdev )

  005d6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  005dd	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  005e4	48 89 44 24 68	 mov	 QWORD PTR dev$[rsp], rax
  005e9	eb 0e		 jmp	 SHORT $LN13@ptp_cmd
$LN11@ptp_cmd:
  005eb	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  005f0	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  005f4	48 89 44 24 68	 mov	 QWORD PTR dev$[rsp], rax
$LN13@ptp_cmd:
  005f9	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  005ff	74 52		 je	 SHORT $LN12@ptp_cmd

; 2654 :             {
; 2655 :                 if ( dev->allocated &&
; 2656 :                      dev->devtype == 0x3088 &&

  00601	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00606	83 78 40 00	 cmp	 DWORD PTR [rax+64], 0
  0060a	74 45		 je	 SHORT $LN47@ptp_cmd
  0060c	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00611	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  00615	3d 88 30 00 00	 cmp	 eax, 12424		; 00003088H
  0061a	75 35		 jne	 SHORT $LN47@ptp_cmd
  0061c	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00621	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  00628	83 f8 03	 cmp	 eax, 3
  0062b	75 24		 jne	 SHORT $LN47@ptp_cmd

; 2657 :                      dev->ctctype == CTC_PTP )
; 2658 :                 {
; 2659 :                     pPTPBLK = dev->group->grp_data;

  0062d	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00632	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00636	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0063a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pPTPBLK$[rsp], rax

; 2660 :                     pPTPBLK->uDebugMask = mask;

  00642	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pPTPBLK$[rsp]
  0064a	8b 4c 24 60	 mov	 ecx, DWORD PTR mask$[rsp]
  0064e	89 48 68	 mov	 DWORD PTR [rax+104], ecx
$LN47@ptp_cmd:

; 2661 :                 }
; 2662 :             }

  00651	eb 98		 jmp	 SHORT $LN11@ptp_cmd
$LN12@ptp_cmd:

; 2663 : 
; 2664 :             // HHC02204 "%-14s set to %s"
; 2665 :             WRMSG(HHC02204, "I", "PTP DEBUG", onoff ? "on ALL" : "off ALL");

  00653	83 7c 24 70 00	 cmp	 DWORD PTR onoff$[rsp], 0
  00658	74 11		 je	 SHORT $LN52@ptp_cmd
  0065a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206567
  00661	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv274[rsp], rax
  00669	eb 0f		 jmp	 SHORT $LN53@ptp_cmd
$LN52@ptp_cmd:
  0066b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206568
  00672	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv274[rsp], rax
$LN53@ptp_cmd:
  0067a	b9 01 00 00 00	 mov	 ecx, 1
  0067f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00685	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv274[rsp]
  0068d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00692	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206569
  00699	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0069e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206570
  006a5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206571
  006b1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006b6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006bb	41 b9 03 00 00
	00		 mov	 r9d, 3
  006c1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206572
  006c8	ba 69 0a 00 00	 mov	 edx, 2665		; 00000a69H
  006cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206573
  006d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2666 :         }

  006da	e9 20 02 00 00	 jmp	 $LN46@ptp_cmd
$LN45@ptp_cmd:

; 2667 :         else
; 2668 :         {
; 2669 :             if ( !(dev = find_device_by_devnum( lcss, devnum )) )

  006df	0f b7 54 24 54	 movzx	 edx, WORD PTR devnum$[rsp]
  006e4	0f b7 4c 24 58	 movzx	 ecx, WORD PTR lcss$[rsp]
  006e9	e8 00 00 00 00	 call	 find_device_by_devnum
  006ee	48 89 44 24 68	 mov	 QWORD PTR dev$[rsp], rax
  006f3	48 83 7c 24 68
	00		 cmp	 QWORD PTR dev$[rsp], 0
  006f9	75 19		 jne	 SHORT $LN48@ptp_cmd

; 2670 :             {
; 2671 :                 // HHC02200 "%1d:%04X device not found"
; 2672 :                 devnotfound_msg( lcss, devnum );

  006fb	0f b7 54 24 54	 movzx	 edx, WORD PTR devnum$[rsp]
  00700	0f b7 4c 24 58	 movzx	 ecx, WORD PTR lcss$[rsp]
  00705	e8 00 00 00 00	 call	 devnotfound_msg

; 2673 :                 return -1;

  0070a	b8 ff ff ff ff	 mov	 eax, -1
  0070f	e9 65 02 00 00	 jmp	 $LN1@ptp_cmd
$LN48@ptp_cmd:

; 2674 :             }
; 2675 : 
; 2676 :             if ( !dev->allocated ||
; 2677 :                  dev->devtype != 0x3088 ||

  00714	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00719	83 78 40 00	 cmp	 DWORD PTR [rax+64], 0
  0071d	74 21		 je	 SHORT $LN50@ptp_cmd
  0071f	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00724	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  00728	3d 88 30 00 00	 cmp	 eax, 12424		; 00003088H
  0072d	75 11		 jne	 SHORT $LN50@ptp_cmd
  0072f	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  00734	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  0073b	83 f8 03	 cmp	 eax, 3
  0073e	74 7f		 je	 SHORT $LN49@ptp_cmd
$LN50@ptp_cmd:

; 2678 :                  dev->ctctype != CTC_PTP )
; 2679 :             {
; 2680 :                 // HHC02209 "%1d:%04X device is not a '%s'"
; 2681 :                 WRMSG(HHC02209, "E", lcss, devnum, "PTP" );

  00740	0f b7 44 24 54	 movzx	 eax, WORD PTR devnum$[rsp]
  00745	89 44 24 78	 mov	 DWORD PTR tv333[rsp], eax
  00749	0f b7 4c 24 58	 movzx	 ecx, WORD PTR lcss$[rsp]
  0074e	89 4c 24 7c	 mov	 DWORD PTR tv335[rsp], ecx
  00752	b9 01 00 00 00	 mov	 ecx, 1
  00757	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0075d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206577
  00764	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00769	8b 4c 24 78	 mov	 ecx, DWORD PTR tv333[rsp]
  0076d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00771	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv335[rsp]
  00775	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00779	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206578
  00780	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00785	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206579
  0078c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00791	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00796	41 b9 03 00 00
	00		 mov	 r9d, 3
  0079c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206580
  007a3	ba 79 0a 00 00	 mov	 edx, 2681		; 00000a79H
  007a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206581
  007af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2682 :                 return -1;

  007b5	b8 ff ff ff ff	 mov	 eax, -1
  007ba	e9 ba 01 00 00	 jmp	 $LN1@ptp_cmd
$LN49@ptp_cmd:

; 2683 :             }
; 2684 : 
; 2685 :             pDEVGRP = dev->group;

  007bf	48 8b 44 24 68	 mov	 rax, QWORD PTR dev$[rsp]
  007c4	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  007c8	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR pDEVGRP$[rsp], rax

; 2686 : 
; 2687 :             for ( i=0; i < pDEVGRP->acount; i++ )

  007d0	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  007d8	eb 0a		 jmp	 SHORT $LN16@ptp_cmd
$LN14@ptp_cmd:
  007da	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  007de	ff c0		 inc	 eax
  007e0	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN16@ptp_cmd:
  007e4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR pDEVGRP$[rsp]
  007ec	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  007ef	39 44 24 50	 cmp	 DWORD PTR i$[rsp], eax
  007f3	7d 43		 jge	 SHORT $LN15@ptp_cmd

; 2688 :             {
; 2689 :                 pDEVBLK = pDEVGRP->memdev[i];

  007f5	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  007fa	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR pDEVGRP$[rsp]
  00802	48 8b 44 c1 10	 mov	 rax, QWORD PTR [rcx+rax*8+16]
  00807	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR pDEVBLK$[rsp], rax

; 2690 :                 pPTPBLK = pDEVBLK->group->grp_data;

  0080f	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR pDEVBLK$[rsp]
  00817	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0081b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0081f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pPTPBLK$[rsp], rax

; 2691 :                 pPTPBLK->uDebugMask = mask;

  00827	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pPTPBLK$[rsp]
  0082f	8b 4c 24 60	 mov	 ecx, DWORD PTR mask$[rsp]
  00833	89 48 68	 mov	 DWORD PTR [rax+104], ecx

; 2692 :             }

  00836	eb a2		 jmp	 SHORT $LN14@ptp_cmd
$LN15@ptp_cmd:

; 2693 : 
; 2694 :             {
; 2695 :             char buf[128];
; 2696 :             MSGBUF( buf, "%s for %s device %1d:%04X pair",

  00838	83 7c 24 70 00	 cmp	 DWORD PTR onoff$[rsp], 0
  0083d	74 11		 je	 SHORT $LN54@ptp_cmd
  0083f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206583
  00846	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv364[rsp], rax
  0084e	eb 0f		 jmp	 SHORT $LN55@ptp_cmd
$LN54@ptp_cmd:
  00850	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206584
  00857	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv364[rsp], rax
$LN55@ptp_cmd:
  0085f	0f b7 44 24 54	 movzx	 eax, WORD PTR devnum$[rsp]
  00864	0f b7 4c 24 58	 movzx	 ecx, WORD PTR lcss$[rsp]
  00869	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0086d	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00871	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206582
  00878	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0087d	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR tv364[rsp]
  00885	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206585
  0088c	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00891	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR buf$1[rsp]
  00899	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2697 :                     onoff ? "ON" : "OFF",
; 2698 :                     "PTP",
; 2699 :                     lcss, devnum );
; 2700 :             // HHC02204 "%-14s set to %s"
; 2701 :             WRMSG(HHC02204, "I", "PTP DEBUG", buf);

  0089f	b9 01 00 00 00	 mov	 ecx, 1
  008a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008aa	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR buf$1[rsp]
  008b2	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  008b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206586
  008be	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  008c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206587
  008ca	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206588
  008d6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008db	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008e0	41 b9 03 00 00
	00		 mov	 r9d, 3
  008e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206589
  008ed	ba 8d 0a 00 00	 mov	 edx, 2701		; 00000a8dH
  008f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206590
  008f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN46@ptp_cmd:

; 2702 :             }
; 2703 :         }
; 2704 : 
; 2705 :         return 0;

  008ff	33 c0		 xor	 eax, eax
  00901	eb 76		 jmp	 SHORT $LN1@ptp_cmd
$LN18@ptp_cmd:

; 2706 :     }
; 2707 : 
; 2708 :     // HHC02299 "Invalid command usage. Type 'help %s' for assistance."
; 2709 :     WRMSG( HHC02299, "E", argv[0] );

  00903	b8 08 00 00 00	 mov	 eax, 8
  00908	48 6b c0 00	 imul	 rax, rax, 0
  0090c	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv379[rsp], rax
  00914	b9 01 00 00 00	 mov	 ecx, 1
  00919	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0091f	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00927	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR tv379[rsp]
  0092f	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00933	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00938	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206591
  0093f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00944	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206592
  0094b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00950	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00955	41 b9 03 00 00
	00		 mov	 r9d, 3
  0095b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206593
  00962	ba 95 0a 00 00	 mov	 edx, 2709		; 00000a95H
  00967	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206594
  0096e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2710 :     return -1;

  00974	b8 ff ff ff ff	 mov	 eax, -1
$LN1@ptp_cmd:

; 2711 : 
; 2712 : }

  00979	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00981	48 33 cc	 xor	 rcx, rsp
  00984	e8 00 00 00 00	 call	 __security_check_cookie
  00989	48 81 c4 78 01
	00 00		 add	 rsp, 376		; 00000178H
  00990	c3		 ret	 0
ptp_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
invalid$ = 80
onoff$ = 81
dev$ = 88
startup$ = 96
all$ = 97
i$ = 100
devnum$ = 104
lcss$ = 108
iTraceLen$ = 112
iDiscTrace$ = 116
pDEVGRP$1 = 120
acount$2 = 128
pLCSBLK$ = 136
mask$ = 144
pCTCBLK$ = 152
tv195 = 160
tv201 = 164
pPTPATH$ = 168
pPTPBLK$ = 176
on_or_off$3 = 184
pLCSDEV$ = 192
pDEVBLK$4 = 200
tv432 = 208
tv434 = 212
tv168 = 216
tv177 = 224
tv185 = 232
tv190 = 240
tv350 = 248
tv352 = 256
tv501 = 264
tv502 = 272
tv508 = 280
tv503 = 288
tv510 = 296
tv273 = 304
buf1$5 = 312
buf2$6 = 352
__$ArrayPad$ = 480
argc$ = 512
argv$ = 520
cmdline$ = 528
ctc_cmd	PROC

; 2188 : {

$LN118:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 81 ec f0 01
	00 00		 sub	 rsp, 496		; 000001f0H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2189 :     DEVBLK*  dev;
; 2190 :     CTCBLK*  pCTCBLK;
; 2191 :     PTPATH*  pPTPATH;
; 2192 :     PTPBLK*  pPTPBLK;
; 2193 :     LCSDEV*  pLCSDEV;
; 2194 :     LCSBLK*  pLCSBLK;
; 2195 :     U16      lcss;
; 2196 :     U16      devnum;
; 2197 :     u_int    mask = 0;

  00028	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR mask$[rsp], 0

; 2198 :     BYTE     onoff = FALSE;

  00033	c6 44 24 51 00	 mov	 BYTE PTR onoff$[rsp], 0

; 2199 :     BYTE     startup = FALSE;

  00038	c6 44 24 60 00	 mov	 BYTE PTR startup$[rsp], 0

; 2200 :     BYTE     all = FALSE;

  0003d	c6 44 24 61 00	 mov	 BYTE PTR all$[rsp], 0

; 2201 :     BYTE     invalid = FALSE;

  00042	c6 44 24 50 00	 mov	 BYTE PTR invalid$[rsp], 0

; 2202 :     int      iTraceLen = LCS_TRACE_LEN_DEFAULT;

  00047	c7 44 24 70 80
	00 00 00	 mov	 DWORD PTR iTraceLen$[rsp], 128 ; 00000080H

; 2203 :     int      iDiscTrace = LCS_DISC_TRACE_ZERO;

  0004f	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR iDiscTrace$[rsp], 0
$LN4@ctc_cmd:

; 2204 :     int      i;
; 2205 : 
; 2206 :     UNREFERENCED( cmdline );

  00057	33 c0		 xor	 eax, eax
  00059	85 c0		 test	 eax, eax
  0005b	75 fa		 jne	 SHORT $LN4@ctc_cmd
$LN7@ctc_cmd:

; 2207 : 
; 2208 :     UPPER_ARGV_0( argv );

  0005d	48 83 bc 24 08
	02 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00066	74 47		 je	 SHORT $LN17@ctc_cmd
  00068	b8 08 00 00 00	 mov	 eax, 8
  0006d	48 6b c0 00	 imul	 rax, rax, 0
  00071	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00079	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0007e	74 2f		 je	 SHORT $LN17@ctc_cmd
  00080	b8 08 00 00 00	 mov	 eax, 8
  00085	48 6b c0 00	 imul	 rax, rax, 0
  00089	b9 08 00 00 00	 mov	 ecx, 8
  0008e	48 6b c9 00	 imul	 rcx, rcx, 0
  00092	48 8b 94 24 08
	02 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0009a	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0009e	48 8b 84 24 08
	02 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000a6	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  000aa	e8 00 00 00 00	 call	 strupper
$LN17@ctc_cmd:
  000af	33 c0		 xor	 eax, eax
  000b1	85 c0		 test	 eax, eax
  000b3	75 a8		 jne	 SHORT $LN7@ctc_cmd

; 2209 : 
; 2210 :     // Format:  "ctc  debug  { on | off }  [ <devnum> | ALL ]"
; 2211 : 
; 2212 :     /* Check that there are at least two tokens */
; 2213 :     if (argc < 2)

  000b5	83 bc 24 00 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000bd	7d 05		 jge	 SHORT $LN18@ctc_cmd

; 2214 :     {
; 2215 :         invalid = TRUE;

  000bf	c6 44 24 50 01	 mov	 BYTE PTR invalid$[rsp], 1
$LN18@ctc_cmd:

; 2216 :     }
; 2217 : 
; 2218 :     /* Check the second token is debug. */
; 2219 :     if (argc >= 2)

  000c4	83 bc 24 00 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000cc	7c 30		 jl	 SHORT $LN19@ctc_cmd

; 2220 :     {
; 2221 :         if (!CMD(argv[1],debug,5))

  000ce	b8 08 00 00 00	 mov	 eax, 8
  000d3	48 6b c0 01	 imul	 rax, rax, 1
  000d7	41 b8 05 00 00
	00		 mov	 r8d, 5
  000dd	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000e5	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206357
  000f0	e8 00 00 00 00	 call	 strcaseabbrev
  000f5	85 c0		 test	 eax, eax
  000f7	75 05		 jne	 SHORT $LN20@ctc_cmd

; 2222 :         {
; 2223 :             invalid = TRUE;

  000f9	c6 44 24 50 01	 mov	 BYTE PTR invalid$[rsp], 1
$LN20@ctc_cmd:
$LN19@ctc_cmd:

; 2224 :         }
; 2225 :     }
; 2226 : 
; 2227 :     /* Check the third token is startup, on or off. */
; 2228 :     if (argc >= 3)

  000fe	83 bc 24 00 02
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00106	0f 8c 99 00 00
	00		 jl	 $LN21@ctc_cmd

; 2229 :     {
; 2230 :         if (CMD(argv[2],startup,7))

  0010c	b8 08 00 00 00	 mov	 eax, 8
  00111	48 6b c0 02	 imul	 rax, rax, 2
  00115	41 b8 07 00 00
	00		 mov	 r8d, 7
  0011b	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00123	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00127	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206362
  0012e	e8 00 00 00 00	 call	 strcaseabbrev
  00133	85 c0		 test	 eax, eax
  00135	74 07		 je	 SHORT $LN23@ctc_cmd

; 2231 :         {
; 2232 :             startup = TRUE;

  00137	c6 44 24 60 01	 mov	 BYTE PTR startup$[rsp], 1

; 2233 :         }

  0013c	eb 62		 jmp	 SHORT $LN24@ctc_cmd
$LN23@ctc_cmd:

; 2234 :         else if (CMD(argv[2],on,2))

  0013e	b8 08 00 00 00	 mov	 eax, 8
  00143	48 6b c0 02	 imul	 rax, rax, 2
  00147	41 b8 02 00 00
	00		 mov	 r8d, 2
  0014d	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00155	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00159	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206365
  00160	e8 00 00 00 00	 call	 strcaseabbrev
  00165	85 c0		 test	 eax, eax
  00167	74 07		 je	 SHORT $LN25@ctc_cmd

; 2235 :         {
; 2236 :             onoff = TRUE;

  00169	c6 44 24 51 01	 mov	 BYTE PTR onoff$[rsp], 1

; 2237 :         }

  0016e	eb 30		 jmp	 SHORT $LN26@ctc_cmd
$LN25@ctc_cmd:

; 2238 :         else if (!CMD(argv[2],off,3))

  00170	b8 08 00 00 00	 mov	 eax, 8
  00175	48 6b c0 02	 imul	 rax, rax, 2
  00179	41 b8 03 00 00
	00		 mov	 r8d, 3
  0017f	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00187	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0018b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206367
  00192	e8 00 00 00 00	 call	 strcaseabbrev
  00197	85 c0		 test	 eax, eax
  00199	75 05		 jne	 SHORT $LN27@ctc_cmd

; 2239 :         {
; 2240 :             invalid = TRUE;

  0019b	c6 44 24 50 01	 mov	 BYTE PTR invalid$[rsp], 1
$LN27@ctc_cmd:
$LN26@ctc_cmd:
$LN24@ctc_cmd:

; 2241 :         }
; 2242 :     }

  001a0	e9 26 03 00 00	 jmp	 $LN22@ctc_cmd
$LN21@ctc_cmd:

; 2243 :     else // (argc < 3)
; 2244 :     {
; 2245 :         // "ctc debug" by itself lists the CTC debugging state for all CTC devices
; 2246 : 
; 2247 :         static const char* yes_startup  = "STARTUP";
; 2248 :         static const char* yes_on       = "ON";
; 2249 :         static const char* no_off       = "OFF";
; 2250 :         const char* on_or_off;
; 2251 : 
; 2252 :         for ( dev = sysblk.firstdev; dev; dev = dev->nextdev )

  001a5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001ac	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  001b3	48 89 44 24 58	 mov	 QWORD PTR dev$[rsp], rax
  001b8	eb 0e		 jmp	 SHORT $LN10@ctc_cmd
$LN8@ctc_cmd:
  001ba	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  001bf	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  001c3	48 89 44 24 58	 mov	 QWORD PTR dev$[rsp], rax
$LN10@ctc_cmd:
  001c8	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  001ce	0f 84 f0 02 00
	00		 je	 $LN9@ctc_cmd

; 2253 :         {
; 2254 :             if (0
; 2255 :                 || !dev->allocated
; 2256 :                 || 0x3088 != dev->devtype
; 2257 :                 || (1

  001d4	33 c0		 xor	 eax, eax
  001d6	85 c0		 test	 eax, eax
  001d8	75 66		 jne	 SHORT $LN29@ctc_cmd
  001da	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  001df	83 78 40 00	 cmp	 DWORD PTR [rax+64], 0
  001e3	74 5b		 je	 SHORT $LN29@ctc_cmd
  001e5	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  001ea	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  001ee	3d 88 30 00 00	 cmp	 eax, 12424		; 00003088H
  001f3	75 4b		 jne	 SHORT $LN29@ctc_cmd
  001f5	33 c0		 xor	 eax, eax
  001f7	83 f8 01	 cmp	 eax, 1
  001fa	74 49		 je	 SHORT $LN28@ctc_cmd
  001fc	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00201	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  00208	83 f8 02	 cmp	 eax, 2
  0020b	74 38		 je	 SHORT $LN28@ctc_cmd
  0020d	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00212	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  00219	83 f8 01	 cmp	 eax, 1
  0021c	74 27		 je	 SHORT $LN28@ctc_cmd
  0021e	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00223	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  0022a	83 f8 03	 cmp	 eax, 3
  0022d	74 16		 je	 SHORT $LN28@ctc_cmd
  0022f	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00234	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  0023b	83 f8 04	 cmp	 eax, 4
  0023e	74 05		 je	 SHORT $LN28@ctc_cmd
$LN29@ctc_cmd:

; 2258 :                     && CTC_CTCI != dev->ctctype
; 2259 :                     && CTC_LCS  != dev->ctctype
; 2260 :                     && CTC_PTP  != dev->ctctype
; 2261 :                     && CTC_CTCE != dev->ctctype
; 2262 :                    )
; 2263 :             )
; 2264 :                 continue;

  00240	e9 75 ff ff ff	 jmp	 $LN8@ctc_cmd
$LN28@ctc_cmd:

; 2265 : 
; 2266 :             if (CTC_CTCI == dev->ctctype)

  00245	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0024a	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  00251	83 f8 02	 cmp	 eax, 2
  00254	75 5e		 jne	 SHORT $LN30@ctc_cmd

; 2267 :             {
; 2268 :                 pCTCBLK = dev->dev_data;

  00256	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0025b	48 8b 80 08 06
	00 00		 mov	 rax, QWORD PTR [rax+1544]
  00262	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR pCTCBLK$[rsp], rax

; 2269 :                 on_or_off = (pCTCBLK->fDebug) ? yes_on : no_off;

  0026a	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pCTCBLK$[rsp]
  00272	8b 80 3a 50 00
	00		 mov	 eax, DWORD PTR [rax+20538]
  00278	83 e0 01	 and	 eax, 1
  0027b	85 c0		 test	 eax, eax
  0027d	74 11		 je	 SHORT $LN92@ctc_cmd
  0027f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?yes_on@?M@??ctc_cmd@@9@9
  00286	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv168[rsp], rax
  0028e	eb 0f		 jmp	 SHORT $LN93@ctc_cmd
$LN92@ctc_cmd:
  00290	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?no_off@?M@??ctc_cmd@@9@9
  00297	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv168[rsp], rax
$LN93@ctc_cmd:
  0029f	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tv168[rsp]
  002a7	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR on_or_off$3[rsp], rax

; 2270 :             }

  002af	e9 55 01 00 00	 jmp	 $LN31@ctc_cmd
$LN30@ctc_cmd:

; 2271 :             else if (CTC_LCS == dev->ctctype)

  002b4	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  002b9	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  002c0	83 f8 01	 cmp	 eax, 1
  002c3	75 6f		 jne	 SHORT $LN32@ctc_cmd

; 2272 :             {
; 2273 :                 pLCSDEV = dev->dev_data;

  002c5	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  002ca	48 8b 80 08 06
	00 00		 mov	 rax, QWORD PTR [rax+1544]
  002d1	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR pLCSDEV$[rsp], rax

; 2274 :                 pLCSBLK = pLCSDEV->pLCSBLK;

  002d9	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pLCSDEV$[rsp]
  002e1	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002e5	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR pLCSBLK$[rsp], rax

; 2275 :                 on_or_off = (pLCSBLK->fDebug) ? yes_on : no_off;

  002ed	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pLCSBLK$[rsp]
  002f5	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  002f8	83 e0 01	 and	 eax, 1
  002fb	85 c0		 test	 eax, eax
  002fd	74 11		 je	 SHORT $LN94@ctc_cmd
  002ff	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?yes_on@?M@??ctc_cmd@@9@9
  00306	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv177[rsp], rax
  0030e	eb 0f		 jmp	 SHORT $LN95@ctc_cmd
$LN94@ctc_cmd:
  00310	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?no_off@?M@??ctc_cmd@@9@9
  00317	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv177[rsp], rax
$LN95@ctc_cmd:
  0031f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tv177[rsp]
  00327	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR on_or_off$3[rsp], rax

; 2276 :             }

  0032f	e9 d5 00 00 00	 jmp	 $LN33@ctc_cmd
$LN32@ctc_cmd:

; 2277 :             else if (CTC_CTCE == dev->ctctype)  /* CTCE is not grouped. */

  00334	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00339	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  00340	83 f8 04	 cmp	 eax, 4
  00343	75 5f		 jne	 SHORT $LN34@ctc_cmd

; 2278 :             {
; 2279 :                 if (dev->ctce_trace_cntr >= 0)

  00345	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0034a	83 b8 68 07 00
	00 00		 cmp	 DWORD PTR [rax+1896], 0
  00351	7c 11		 jl	 SHORT $LN36@ctc_cmd

; 2280 :                     on_or_off = yes_startup;

  00353	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?yes_startup@?M@??ctc_cmd@@9@9
  0035a	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR on_or_off$3[rsp], rax
  00362	eb 3e		 jmp	 SHORT $LN37@ctc_cmd
$LN36@ctc_cmd:

; 2281 :                 else
; 2282 :                     on_or_off = (CTCE_TRACE_ON == dev->ctce_trace_cntr) ? yes_on : no_off;

  00364	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00369	83 b8 68 07 00
	00 ff		 cmp	 DWORD PTR [rax+1896], -1
  00370	75 11		 jne	 SHORT $LN96@ctc_cmd
  00372	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?yes_on@?M@??ctc_cmd@@9@9
  00379	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv185[rsp], rax
  00381	eb 0f		 jmp	 SHORT $LN97@ctc_cmd
$LN96@ctc_cmd:
  00383	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?no_off@?M@??ctc_cmd@@9@9
  0038a	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv185[rsp], rax
$LN97@ctc_cmd:
  00392	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR tv185[rsp]
  0039a	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR on_or_off$3[rsp], rax
$LN37@ctc_cmd:

; 2283 :             }

  003a2	eb 65		 jmp	 SHORT $LN35@ctc_cmd
$LN34@ctc_cmd:

; 2284 :             else // (CTC_PTP == dev->ctctype)
; 2285 :             {
; 2286 :                 pPTPATH = dev->dev_data;

  003a4	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  003a9	48 8b 80 08 06
	00 00		 mov	 rax, QWORD PTR [rax+1544]
  003b0	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR pPTPATH$[rsp], rax

; 2287 :                 pPTPBLK = pPTPATH->pPTPBLK;

  003b8	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR pPTPATH$[rsp]
  003c0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003c3	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR pPTPBLK$[rsp], rax

; 2288 :                 on_or_off = (pPTPBLK->uDebugMask) ? yes_on : no_off;

  003cb	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR pPTPBLK$[rsp]
  003d3	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  003d7	74 11		 je	 SHORT $LN98@ctc_cmd
  003d9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?yes_on@?M@??ctc_cmd@@9@9
  003e0	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv190[rsp], rax
  003e8	eb 0f		 jmp	 SHORT $LN99@ctc_cmd
$LN98@ctc_cmd:
  003ea	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?no_off@?M@??ctc_cmd@@9@9
  003f1	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv190[rsp], rax
$LN99@ctc_cmd:
  003f9	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR tv190[rsp]
  00401	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR on_or_off$3[rsp], rax
$LN35@ctc_cmd:
$LN33@ctc_cmd:
$LN31@ctc_cmd:

; 2289 :             }
; 2290 : 
; 2291 :             // "%1d:%04X: CTC DEBUG is %s"
; 2292 :             WRMSG( HHC00903, "I", LCSS_DEVNUM, on_or_off );

  00409	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0040f	74 12		 je	 SHORT $LN100@ctc_cmd
  00411	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00416	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0041a	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv195[rsp], eax
  00421	eb 0b		 jmp	 SHORT $LN101@ctc_cmd
$LN100@ctc_cmd:
  00423	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv195[rsp], 0
$LN101@ctc_cmd:
  0042e	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00434	74 14		 je	 SHORT $LN102@ctc_cmd
  00436	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0043b	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0043f	d1 f8		 sar	 eax, 1
  00441	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv201[rsp], eax
  00448	eb 0b		 jmp	 SHORT $LN103@ctc_cmd
$LN102@ctc_cmd:
  0044a	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv201[rsp], 0
$LN103@ctc_cmd:
  00455	b9 01 00 00 00	 mov	 ecx, 1
  0045a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00460	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR on_or_off$3[rsp]
  00468	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0046d	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv195[rsp]
  00474	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00478	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv201[rsp]
  0047f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00483	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206381
  0048a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0048f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206382
  00496	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0049b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004a0	41 b9 03 00 00
	00		 mov	 r9d, 3
  004a6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206383
  004ad	ba f4 08 00 00	 mov	 edx, 2292		; 000008f4H
  004b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206384
  004b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2293 :         }

  004bf	e9 f6 fc ff ff	 jmp	 $LN8@ctc_cmd
$LN9@ctc_cmd:

; 2294 : 
; 2295 :         return 0;

  004c4	33 c0		 xor	 eax, eax
  004c6	e9 36 0a 00 00	 jmp	 $LN1@ctc_cmd
$LN22@ctc_cmd:

; 2296 :     }
; 2297 : 
; 2298 :     /* Check whether there is a fourth token. If there isn't, assume the fourth token is all.  */
; 2299 :     if (argc < 4)

  004cb	83 bc 24 00 02
	00 00 04	 cmp	 DWORD PTR argc$[rsp], 4
  004d3	7d 05		 jge	 SHORT $LN38@ctc_cmd

; 2300 :     {
; 2301 :         all = TRUE;

  004d5	c6 44 24 61 01	 mov	 BYTE PTR all$[rsp], 1
$LN38@ctc_cmd:

; 2302 :     }
; 2303 : 
; 2304 :     /* Check the fourth token is all or a device address. */
; 2305 :     if (argc >= 4)

  004da	83 bc 24 00 02
	00 00 04	 cmp	 DWORD PTR argc$[rsp], 4
  004e2	7c 5f		 jl	 SHORT $LN39@ctc_cmd

; 2306 :     {
; 2307 :         if (CMD(argv[3],ALL,3))

  004e4	b8 08 00 00 00	 mov	 eax, 8
  004e9	48 6b c0 03	 imul	 rax, rax, 3
  004ed	41 b8 03 00 00
	00		 mov	 r8d, 3
  004f3	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004fb	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  004ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206389
  00506	e8 00 00 00 00	 call	 strcaseabbrev
  0050b	85 c0		 test	 eax, eax
  0050d	74 07		 je	 SHORT $LN40@ctc_cmd

; 2308 :         {
; 2309 :             all = TRUE;

  0050f	c6 44 24 61 01	 mov	 BYTE PTR all$[rsp], 1

; 2310 :         }

  00514	eb 2d		 jmp	 SHORT $LN41@ctc_cmd
$LN40@ctc_cmd:

; 2311 :         else if (parse_single_devnum( argv[3], &lcss, &devnum) != 0)

  00516	b8 08 00 00 00	 mov	 eax, 8
  0051b	48 6b c0 03	 imul	 rax, rax, 3
  0051f	4c 8d 44 24 68	 lea	 r8, QWORD PTR devnum$[rsp]
  00524	48 8d 54 24 6c	 lea	 rdx, QWORD PTR lcss$[rsp]
  00529	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00531	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00535	e8 00 00 00 00	 call	 parse_single_devnum
  0053a	85 c0		 test	 eax, eax
  0053c	74 05		 je	 SHORT $LN42@ctc_cmd

; 2312 :         {
; 2313 :             invalid = TRUE;

  0053e	c6 44 24 50 01	 mov	 BYTE PTR invalid$[rsp], 1
$LN42@ctc_cmd:
$LN41@ctc_cmd:
$LN39@ctc_cmd:

; 2314 :         }
; 2315 :     }
; 2316 : 
; 2317 :     /* Check the fifth and later keyword and value tokens that are optional with on. */
; 2318 :     if (argc >= 5)

  00543	83 bc 24 00 02
	00 00 05	 cmp	 DWORD PTR argc$[rsp], 5
  0054b	0f 8c 4a 01 00
	00		 jl	 $LN43@ctc_cmd

; 2319 :     {
; 2320 :         if( onoff )

  00551	0f b6 44 24 51	 movzx	 eax, BYTE PTR onoff$[rsp]
  00556	85 c0		 test	 eax, eax
  00558	0f 84 38 01 00
	00		 je	 $LN44@ctc_cmd

; 2321 :         {
; 2322 :             for ( i = 4; i < argc; i++ )

  0055e	c7 44 24 64 04
	00 00 00	 mov	 DWORD PTR i$[rsp], 4
  00566	eb 0a		 jmp	 SHORT $LN13@ctc_cmd
$LN11@ctc_cmd:
  00568	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  0056c	ff c0		 inc	 eax
  0056e	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN13@ctc_cmd:
  00572	8b 84 24 00 02
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  00579	39 44 24 64	 cmp	 DWORD PTR i$[rsp], eax
  0057d	0f 8d 11 01 00
	00		 jge	 $LN12@ctc_cmd

; 2323 :             {
; 2324 :                 if (CMD(argv[i],trace,2))

  00583	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  00588	41 b8 02 00 00
	00		 mov	 r8d, 2
  0058e	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00596	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0059a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206396
  005a1	e8 00 00 00 00	 call	 strcaseabbrev
  005a6	85 c0		 test	 eax, eax
  005a8	74 5d		 je	 SHORT $LN46@ctc_cmd

; 2325 :                 {
; 2326 :                     if ( (i + 1) < argc )

  005aa	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  005ae	ff c0		 inc	 eax
  005b0	3b 84 24 00 02
	00 00		 cmp	 eax, DWORD PTR argc$[rsp]
  005b7	7d 44		 jge	 SHORT $LN48@ctc_cmd

; 2327 :                     {
; 2328 :                         i++;

  005b9	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  005bd	ff c0		 inc	 eax
  005bf	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax

; 2329 :                         iTraceLen = atoi( argv[i] );

  005c3	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  005c8	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  005d0	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  005d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  005da	89 44 24 70	 mov	 DWORD PTR iTraceLen$[rsp], eax

; 2330 :                         if ((iTraceLen < LCS_TRACE_LEN_MINIMUM || iTraceLen > LCS_TRACE_LEN_MAXIMUM) && iTraceLen != LCS_TRACE_LEN_ZERO)

  005de	83 7c 24 70 40	 cmp	 DWORD PTR iTraceLen$[rsp], 64 ; 00000040H
  005e3	7c 0a		 jl	 SHORT $LN51@ctc_cmd
  005e5	81 7c 24 70 ff
	ff 00 00	 cmp	 DWORD PTR iTraceLen$[rsp], 65535 ; 0000ffffH
  005ed	7e 0c		 jle	 SHORT $LN50@ctc_cmd
$LN51@ctc_cmd:
  005ef	83 7c 24 70 00	 cmp	 DWORD PTR iTraceLen$[rsp], 0
  005f4	74 05		 je	 SHORT $LN50@ctc_cmd

; 2331 :                         {
; 2332 :                             invalid = TRUE;

  005f6	c6 44 24 50 01	 mov	 BYTE PTR invalid$[rsp], 1
$LN50@ctc_cmd:

; 2333 :                         }
; 2334 :                     }

  005fb	eb 05		 jmp	 SHORT $LN49@ctc_cmd
$LN48@ctc_cmd:

; 2335 :                     else
; 2336 :                     {
; 2337 :                         invalid = TRUE;

  005fd	c6 44 24 50 01	 mov	 BYTE PTR invalid$[rsp], 1
$LN49@ctc_cmd:

; 2338 :                     }
; 2339 :                 }

  00602	e9 88 00 00 00	 jmp	 $LN47@ctc_cmd
$LN46@ctc_cmd:

; 2340 :                 else if (CMD(argv[i],discard,3))

  00607	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  0060c	41 b8 03 00 00
	00		 mov	 r8d, 3
  00612	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0061a	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0061e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206403
  00625	e8 00 00 00 00	 call	 strcaseabbrev
  0062a	85 c0		 test	 eax, eax
  0062c	74 5a		 je	 SHORT $LN52@ctc_cmd

; 2341 :                 {
; 2342 :                     if ( (i + 1) < argc )

  0062e	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  00632	ff c0		 inc	 eax
  00634	3b 84 24 00 02
	00 00		 cmp	 eax, DWORD PTR argc$[rsp]
  0063b	7d 44		 jge	 SHORT $LN54@ctc_cmd

; 2343 :                     {
; 2344 :                         i++;

  0063d	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  00641	ff c0		 inc	 eax
  00643	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax

; 2345 :                         iDiscTrace = atoi( argv[i] );

  00647	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  0064c	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00654	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00658	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  0065e	89 44 24 74	 mov	 DWORD PTR iDiscTrace$[rsp], eax

; 2346 :                         if ((iDiscTrace < LCS_DISC_TRACE_MINIMUM || iDiscTrace > LCS_DISC_TRACE_MAXIMUM) && iDiscTrace != LCS_DISC_TRACE_ZERO)

  00662	83 7c 24 74 10	 cmp	 DWORD PTR iDiscTrace$[rsp], 16
  00667	7c 0a		 jl	 SHORT $LN57@ctc_cmd
  00669	81 7c 24 74 ff
	ff 00 00	 cmp	 DWORD PTR iDiscTrace$[rsp], 65535 ; 0000ffffH
  00671	7e 0c		 jle	 SHORT $LN56@ctc_cmd
$LN57@ctc_cmd:
  00673	83 7c 24 74 00	 cmp	 DWORD PTR iDiscTrace$[rsp], 0
  00678	74 05		 je	 SHORT $LN56@ctc_cmd

; 2347 :                         {
; 2348 :                             invalid = TRUE;

  0067a	c6 44 24 50 01	 mov	 BYTE PTR invalid$[rsp], 1
$LN56@ctc_cmd:

; 2349 :                         }
; 2350 :                     }

  0067f	eb 05		 jmp	 SHORT $LN55@ctc_cmd
$LN54@ctc_cmd:

; 2351 :                     else
; 2352 :                     {
; 2353 :                         invalid = TRUE;

  00681	c6 44 24 50 01	 mov	 BYTE PTR invalid$[rsp], 1
$LN55@ctc_cmd:

; 2354 :                     }
; 2355 :                 }

  00686	eb 07		 jmp	 SHORT $LN53@ctc_cmd
$LN52@ctc_cmd:

; 2356 :                 else
; 2357 :                 {
; 2358 :                     invalid = TRUE;

  00688	c6 44 24 50 01	 mov	 BYTE PTR invalid$[rsp], 1

; 2359 :                     break;

  0068d	eb 05		 jmp	 SHORT $LN12@ctc_cmd
$LN53@ctc_cmd:
$LN47@ctc_cmd:

; 2360 :                 }
; 2361 :             }

  0068f	e9 d4 fe ff ff	 jmp	 $LN11@ctc_cmd
$LN12@ctc_cmd:

; 2362 :         }

  00694	eb 05		 jmp	 SHORT $LN45@ctc_cmd
$LN44@ctc_cmd:

; 2363 :         else
; 2364 :         {
; 2365 :             invalid = TRUE;

  00696	c6 44 24 50 01	 mov	 BYTE PTR invalid$[rsp], 1
$LN45@ctc_cmd:
$LN43@ctc_cmd:

; 2366 :         }
; 2367 :     }
; 2368 : 
; 2369 :     /* Check whether the entered command is invalid. */
; 2370 :     if (invalid)

  0069b	0f b6 44 24 50	 movzx	 eax, BYTE PTR invalid$[rsp]
  006a0	85 c0		 test	 eax, eax
  006a2	74 7b		 je	 SHORT $LN58@ctc_cmd

; 2371 :     {
; 2372 :         /* HHC02299 "Invalid command usage. Type 'help %s' for assistance." */
; 2373 :         WRMSG( HHC02299, "E", argv[0] );

  006a4	b8 08 00 00 00	 mov	 eax, 8
  006a9	48 6b c0 00	 imul	 rax, rax, 0
  006ad	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv273[rsp], rax
  006b5	b9 01 00 00 00	 mov	 ecx, 1
  006ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006c0	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  006c8	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR tv273[rsp]
  006d0	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  006d4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206409
  006e0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206410
  006ec	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006f1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006f6	41 b9 03 00 00
	00		 mov	 r9d, 3
  006fc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206411
  00703	ba 45 09 00 00	 mov	 edx, 2373		; 00000945H
  00708	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206412
  0070f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2374 :         return -1;

  00715	b8 ff ff ff ff	 mov	 eax, -1
  0071a	e9 e2 07 00 00	 jmp	 $LN1@ctc_cmd
$LN58@ctc_cmd:

; 2375 :     }
; 2376 : 
; 2377 :     /* Prepare the default debug mask for CTC_PTP devices with on. */
; 2378 :     if( onoff )

  0071f	0f b6 44 24 51	 movzx	 eax, BYTE PTR onoff$[rsp]
  00724	85 c0		 test	 eax, eax
  00726	74 0b		 je	 SHORT $LN59@ctc_cmd

; 2379 :     {
; 2380 :         mask = DBGPTPPACKET;

  00728	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR mask$[rsp], 1
$LN59@ctc_cmd:

; 2381 :     }
; 2382 : 
; 2383 :     /* */
; 2384 :     if (all)

  00733	0f b6 44 24 61	 movzx	 eax, BYTE PTR all$[rsp]
  00738	85 c0		 test	 eax, eax
  0073a	0f 84 c2 02 00
	00		 je	 $LN60@ctc_cmd

; 2385 :     {
; 2386 :         for ( dev = sysblk.firstdev; dev; dev = dev->nextdev )

  00740	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00747	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  0074e	48 89 44 24 58	 mov	 QWORD PTR dev$[rsp], rax
  00753	eb 0e		 jmp	 SHORT $LN16@ctc_cmd
$LN14@ctc_cmd:
  00755	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0075a	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0075e	48 89 44 24 58	 mov	 QWORD PTR dev$[rsp], rax
$LN16@ctc_cmd:
  00763	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00769	0f 84 db 01 00
	00		 je	 $LN15@ctc_cmd

; 2387 :         {
; 2388 :             if (0
; 2389 :                 || !dev->allocated
; 2390 :                 || 0x3088 != dev->devtype
; 2391 :                 || (1

  0076f	33 c0		 xor	 eax, eax
  00771	85 c0		 test	 eax, eax
  00773	75 66		 jne	 SHORT $LN63@ctc_cmd
  00775	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0077a	83 78 40 00	 cmp	 DWORD PTR [rax+64], 0
  0077e	74 5b		 je	 SHORT $LN63@ctc_cmd
  00780	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00785	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  00789	3d 88 30 00 00	 cmp	 eax, 12424		; 00003088H
  0078e	75 4b		 jne	 SHORT $LN63@ctc_cmd
  00790	33 c0		 xor	 eax, eax
  00792	83 f8 01	 cmp	 eax, 1
  00795	74 49		 je	 SHORT $LN62@ctc_cmd
  00797	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0079c	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  007a3	83 f8 02	 cmp	 eax, 2
  007a6	74 38		 je	 SHORT $LN62@ctc_cmd
  007a8	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  007ad	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  007b4	83 f8 01	 cmp	 eax, 1
  007b7	74 27		 je	 SHORT $LN62@ctc_cmd
  007b9	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  007be	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  007c5	83 f8 03	 cmp	 eax, 3
  007c8	74 16		 je	 SHORT $LN62@ctc_cmd
  007ca	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  007cf	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  007d6	83 f8 04	 cmp	 eax, 4
  007d9	74 05		 je	 SHORT $LN62@ctc_cmd
$LN63@ctc_cmd:

; 2392 :                     && CTC_CTCI != dev->ctctype
; 2393 :                     && CTC_LCS  != dev->ctctype
; 2394 :                     && CTC_PTP  != dev->ctctype
; 2395 :                     && CTC_CTCE != dev->ctctype
; 2396 :                    )
; 2397 :             )
; 2398 :                 continue;

  007db	e9 75 ff ff ff	 jmp	 $LN14@ctc_cmd
$LN62@ctc_cmd:

; 2399 : 
; 2400 :             if (CTC_CTCI == dev->ctctype)

  007e0	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  007e5	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  007ec	83 f8 02	 cmp	 eax, 2
  007ef	75 44		 jne	 SHORT $LN64@ctc_cmd

; 2401 :             {
; 2402 :                 pCTCBLK = dev->dev_data;

  007f1	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  007f6	48 8b 80 08 06
	00 00		 mov	 rax, QWORD PTR [rax+1544]
  007fd	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR pCTCBLK$[rsp], rax

; 2403 :                 pCTCBLK->fDebug = onoff;

  00805	0f b6 44 24 51	 movzx	 eax, BYTE PTR onoff$[rsp]
  0080a	83 e0 01	 and	 eax, 1
  0080d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pCTCBLK$[rsp]
  00815	8b 89 3a 50 00
	00		 mov	 ecx, DWORD PTR [rcx+20538]
  0081b	83 e1 fe	 and	 ecx, -2			; fffffffeH
  0081e	0b c8		 or	 ecx, eax
  00820	8b c1		 mov	 eax, ecx
  00822	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pCTCBLK$[rsp]
  0082a	89 81 3a 50 00
	00		 mov	 DWORD PTR [rcx+20538], eax

; 2404 :             }

  00830	e9 10 01 00 00	 jmp	 $LN65@ctc_cmd
$LN64@ctc_cmd:

; 2405 :             else if (CTC_LCS == dev->ctctype)

  00835	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0083a	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  00841	83 f8 01	 cmp	 eax, 1
  00844	75 70		 jne	 SHORT $LN66@ctc_cmd

; 2406 :             {
; 2407 :                 pLCSDEV = dev->dev_data;

  00846	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0084b	48 8b 80 08 06
	00 00		 mov	 rax, QWORD PTR [rax+1544]
  00852	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR pLCSDEV$[rsp], rax

; 2408 :                 pLCSBLK = pLCSDEV->pLCSBLK;

  0085a	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pLCSDEV$[rsp]
  00862	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00866	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR pLCSBLK$[rsp], rax

; 2409 :                 pLCSBLK->fDebug = onoff;

  0086e	0f b6 44 24 51	 movzx	 eax, BYTE PTR onoff$[rsp]
  00873	83 e0 01	 and	 eax, 1
  00876	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pLCSBLK$[rsp]
  0087e	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  00881	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00884	0b c8		 or	 ecx, eax
  00886	8b c1		 mov	 eax, ecx
  00888	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pLCSBLK$[rsp]
  00890	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 2410 :                 pLCSBLK->iTraceLen = iTraceLen;

  00893	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pLCSBLK$[rsp]
  0089b	8b 4c 24 70	 mov	 ecx, DWORD PTR iTraceLen$[rsp]
  0089f	89 48 28	 mov	 DWORD PTR [rax+40], ecx

; 2411 :                 pLCSBLK->iDiscTrace = iDiscTrace;

  008a2	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pLCSBLK$[rsp]
  008aa	8b 4c 24 74	 mov	 ecx, DWORD PTR iDiscTrace$[rsp]
  008ae	89 48 2c	 mov	 DWORD PTR [rax+44], ecx

; 2412 :             }

  008b1	e9 8f 00 00 00	 jmp	 $LN67@ctc_cmd
$LN66@ctc_cmd:

; 2413 :             else if (CTC_CTCE == dev->ctctype)  /* CTCE is not grouped. */

  008b6	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  008bb	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  008c2	83 f8 04	 cmp	 eax, 4
  008c5	75 45		 jne	 SHORT $LN68@ctc_cmd

; 2414 :             {
; 2415 :                 if (onoff)

  008c7	0f b6 44 24 51	 movzx	 eax, BYTE PTR onoff$[rsp]
  008cc	85 c0		 test	 eax, eax
  008ce	74 11		 je	 SHORT $LN70@ctc_cmd

; 2416 :                 {
; 2417 :                     dev->ctce_trace_cntr = CTCE_TRACE_ON;

  008d0	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  008d5	c7 80 68 07 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+1896], -1

; 2418 :                 }

  008df	eb 29		 jmp	 SHORT $LN71@ctc_cmd
$LN70@ctc_cmd:

; 2419 :                 else if (startup)

  008e1	0f b6 44 24 60	 movzx	 eax, BYTE PTR startup$[rsp]
  008e6	85 c0		 test	 eax, eax
  008e8	74 11		 je	 SHORT $LN72@ctc_cmd

; 2420 :                 {
; 2421 :                     dev->ctce_trace_cntr = CTCE_TRACE_STARTUP;

  008ea	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  008ef	c7 80 68 07 00
	00 14 00 00 00	 mov	 DWORD PTR [rax+1896], 20

; 2422 :                 }

  008f9	eb 0f		 jmp	 SHORT $LN73@ctc_cmd
$LN72@ctc_cmd:

; 2423 :                 else
; 2424 :                 {
; 2425 :                     dev->ctce_trace_cntr = CTCE_TRACE_OFF;

  008fb	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00900	c7 80 68 07 00
	00 fe ff ff ff	 mov	 DWORD PTR [rax+1896], -2
$LN73@ctc_cmd:
$LN71@ctc_cmd:

; 2426 :                 }
; 2427 :             }

  0090a	eb 39		 jmp	 SHORT $LN69@ctc_cmd
$LN68@ctc_cmd:

; 2428 :             else // (CTC_PTP == dev->ctctype)
; 2429 :             {
; 2430 :                 pPTPATH = dev->dev_data;

  0090c	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00911	48 8b 80 08 06
	00 00		 mov	 rax, QWORD PTR [rax+1544]
  00918	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR pPTPATH$[rsp], rax

; 2431 :                 pPTPBLK = pPTPATH->pPTPBLK;

  00920	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR pPTPATH$[rsp]
  00928	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0092b	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR pPTPBLK$[rsp], rax

; 2432 :                 pPTPBLK->uDebugMask = mask;

  00933	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR pPTPBLK$[rsp]
  0093b	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR mask$[rsp]
  00942	89 48 68	 mov	 DWORD PTR [rax+104], ecx
$LN69@ctc_cmd:
$LN67@ctc_cmd:
$LN65@ctc_cmd:

; 2433 :             }
; 2434 :         }

  00945	e9 0b fe ff ff	 jmp	 $LN14@ctc_cmd
$LN15@ctc_cmd:

; 2435 : 
; 2436 :         /* HHC02204 "%-14s set to %s" */
; 2437 :         WRMSG(HHC02204, "I", "CTC DEBUG", startup ? "startup ALL" : onoff ? "on ALL" : "off ALL");

  0094a	0f b6 44 24 60	 movzx	 eax, BYTE PTR startup$[rsp]
  0094f	85 c0		 test	 eax, eax
  00951	74 11		 je	 SHORT $LN106@ctc_cmd
  00953	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206428
  0095a	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv352[rsp], rax
  00962	eb 39		 jmp	 SHORT $LN107@ctc_cmd
$LN106@ctc_cmd:
  00964	0f b6 44 24 51	 movzx	 eax, BYTE PTR onoff$[rsp]
  00969	85 c0		 test	 eax, eax
  0096b	74 11		 je	 SHORT $LN104@ctc_cmd
  0096d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206429
  00974	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv350[rsp], rax
  0097c	eb 0f		 jmp	 SHORT $LN105@ctc_cmd
$LN104@ctc_cmd:
  0097e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206430
  00985	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv350[rsp], rax
$LN105@ctc_cmd:
  0098d	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tv350[rsp]
  00995	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv352[rsp], rax
$LN107@ctc_cmd:
  0099d	b9 01 00 00 00	 mov	 ecx, 1
  009a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009a8	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv352[rsp]
  009b0	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  009b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206431
  009bc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  009c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206432
  009c8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  009cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206433
  009d4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  009d9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009de	41 b9 03 00 00
	00		 mov	 r9d, 3
  009e4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206434
  009eb	ba 85 09 00 00	 mov	 edx, 2437		; 00000985H
  009f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206435
  009f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2438 :     }

  009fd	e9 fd 04 00 00	 jmp	 $LN61@ctc_cmd
$LN60@ctc_cmd:

; 2439 :     else
; 2440 :     {
; 2441 :         int acount;
; 2442 :         DEVGRP* pDEVGRP;
; 2443 :         DEVBLK* pDEVBLK;
; 2444 : 
; 2445 :         if (!(dev = find_device_by_devnum ( lcss, devnum )))

  00a02	0f b7 54 24 68	 movzx	 edx, WORD PTR devnum$[rsp]
  00a07	0f b7 4c 24 6c	 movzx	 ecx, WORD PTR lcss$[rsp]
  00a0c	e8 00 00 00 00	 call	 find_device_by_devnum
  00a11	48 89 44 24 58	 mov	 QWORD PTR dev$[rsp], rax
  00a16	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00a1c	75 19		 jne	 SHORT $LN74@ctc_cmd

; 2446 :         {
; 2447 :             // HHC02200 "%1d:%04X device not found"
; 2448 :             devnotfound_msg( lcss, devnum );

  00a1e	0f b7 54 24 68	 movzx	 edx, WORD PTR devnum$[rsp]
  00a23	0f b7 4c 24 6c	 movzx	 ecx, WORD PTR lcss$[rsp]
  00a28	e8 00 00 00 00	 call	 devnotfound_msg

; 2449 :             return -1;

  00a2d	b8 ff ff ff ff	 mov	 eax, -1
  00a32	e9 ca 04 00 00	 jmp	 $LN1@ctc_cmd
$LN74@ctc_cmd:

; 2450 :         }
; 2451 : 
; 2452 :         pDEVGRP = dev->group;

  00a37	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00a3c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00a40	48 89 44 24 78	 mov	 QWORD PTR pDEVGRP$1[rsp], rax

; 2453 :         acount = 0;

  00a45	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR acount$2[rsp], 0

; 2454 : 
; 2455 :         if (CTC_CTCI == dev->ctctype)

  00a50	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00a55	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  00a5c	83 f8 02	 cmp	 eax, 2
  00a5f	0f 85 84 00 00
	00		 jne	 $LN75@ctc_cmd

; 2456 :         {
; 2457 :             if (pDEVGRP && pDEVGRP->acount)  /* CTCI should be a group of two devices. */

  00a65	48 83 7c 24 78
	00		 cmp	 QWORD PTR pDEVGRP$1[rsp], 0
  00a6b	74 77		 je	 SHORT $LN77@ctc_cmd
  00a6d	48 8b 44 24 78	 mov	 rax, QWORD PTR pDEVGRP$1[rsp]
  00a72	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00a76	74 6c		 je	 SHORT $LN77@ctc_cmd

; 2458 :             {
; 2459 :                 pDEVBLK = pDEVGRP->memdev[0];

  00a78	b8 08 00 00 00	 mov	 eax, 8
  00a7d	48 6b c0 00	 imul	 rax, rax, 0
  00a81	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pDEVGRP$1[rsp]
  00a86	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  00a8b	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR pDEVBLK$4[rsp], rax

; 2460 :                 pCTCBLK = pDEVBLK->dev_data;

  00a93	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR pDEVBLK$4[rsp]
  00a9b	48 8b 80 08 06
	00 00		 mov	 rax, QWORD PTR [rax+1544]
  00aa2	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR pCTCBLK$[rsp], rax

; 2461 :                 pCTCBLK->fDebug = onoff;

  00aaa	0f b6 44 24 51	 movzx	 eax, BYTE PTR onoff$[rsp]
  00aaf	83 e0 01	 and	 eax, 1
  00ab2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pCTCBLK$[rsp]
  00aba	8b 89 3a 50 00
	00		 mov	 ecx, DWORD PTR [rcx+20538]
  00ac0	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00ac3	0b c8		 or	 ecx, eax
  00ac5	8b c1		 mov	 eax, ecx
  00ac7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pCTCBLK$[rsp]
  00acf	89 81 3a 50 00
	00		 mov	 DWORD PTR [rcx+20538], eax

; 2462 :                 acount = pDEVGRP->acount;

  00ad5	48 8b 44 24 78	 mov	 rax, QWORD PTR pDEVGRP$1[rsp]
  00ada	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00add	89 84 24 80 00
	00 00		 mov	 DWORD PTR acount$2[rsp], eax
$LN77@ctc_cmd:

; 2463 :             }
; 2464 :         }

  00ae4	e9 40 02 00 00	 jmp	 $LN76@ctc_cmd
$LN75@ctc_cmd:

; 2465 :         else if (CTC_LCS == dev->ctctype)  /* LCS should be a group of one or more devices. */

  00ae9	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00aee	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  00af5	83 f8 01	 cmp	 eax, 1
  00af8	0f 85 b8 00 00
	00		 jne	 $LN78@ctc_cmd

; 2466 :         {
; 2467 :             if (pDEVGRP && pDEVGRP->acount)

  00afe	48 83 7c 24 78
	00		 cmp	 QWORD PTR pDEVGRP$1[rsp], 0
  00b04	0f 84 a7 00 00
	00		 je	 $LN80@ctc_cmd
  00b0a	48 8b 44 24 78	 mov	 rax, QWORD PTR pDEVGRP$1[rsp]
  00b0f	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00b13	0f 84 98 00 00
	00		 je	 $LN80@ctc_cmd

; 2468 :             {
; 2469 :                 pDEVBLK = pDEVGRP->memdev[0];

  00b19	b8 08 00 00 00	 mov	 eax, 8
  00b1e	48 6b c0 00	 imul	 rax, rax, 0
  00b22	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pDEVGRP$1[rsp]
  00b27	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  00b2c	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR pDEVBLK$4[rsp], rax

; 2470 :                 pLCSDEV = pDEVBLK->dev_data;

  00b34	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR pDEVBLK$4[rsp]
  00b3c	48 8b 80 08 06
	00 00		 mov	 rax, QWORD PTR [rax+1544]
  00b43	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR pLCSDEV$[rsp], rax

; 2471 :                 pLCSBLK = pLCSDEV->pLCSBLK;

  00b4b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pLCSDEV$[rsp]
  00b53	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00b57	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR pLCSBLK$[rsp], rax

; 2472 :                 pLCSBLK->fDebug = onoff;

  00b5f	0f b6 44 24 51	 movzx	 eax, BYTE PTR onoff$[rsp]
  00b64	83 e0 01	 and	 eax, 1
  00b67	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pLCSBLK$[rsp]
  00b6f	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  00b72	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00b75	0b c8		 or	 ecx, eax
  00b77	8b c1		 mov	 eax, ecx
  00b79	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pLCSBLK$[rsp]
  00b81	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 2473 :                 pLCSBLK->iTraceLen = iTraceLen;

  00b84	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pLCSBLK$[rsp]
  00b8c	8b 4c 24 70	 mov	 ecx, DWORD PTR iTraceLen$[rsp]
  00b90	89 48 28	 mov	 DWORD PTR [rax+40], ecx

; 2474 :                 pLCSBLK->iDiscTrace = iDiscTrace;

  00b93	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pLCSBLK$[rsp]
  00b9b	8b 4c 24 74	 mov	 ecx, DWORD PTR iDiscTrace$[rsp]
  00b9f	89 48 2c	 mov	 DWORD PTR [rax+44], ecx

; 2475 :                 acount = pDEVGRP->acount;

  00ba2	48 8b 44 24 78	 mov	 rax, QWORD PTR pDEVGRP$1[rsp]
  00ba7	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00baa	89 84 24 80 00
	00 00		 mov	 DWORD PTR acount$2[rsp], eax
$LN80@ctc_cmd:

; 2476 :             }
; 2477 :         }

  00bb1	e9 73 01 00 00	 jmp	 $LN79@ctc_cmd
$LN78@ctc_cmd:

; 2478 :         else if (CTC_PTP == dev->ctctype)  /* PTP should be a group of two devices. */

  00bb6	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00bbb	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  00bc2	83 f8 03	 cmp	 eax, 3
  00bc5	75 7e		 jne	 SHORT $LN81@ctc_cmd

; 2479 :         {
; 2480 :             if (pDEVGRP && pDEVGRP->acount)

  00bc7	48 83 7c 24 78
	00		 cmp	 QWORD PTR pDEVGRP$1[rsp], 0
  00bcd	74 71		 je	 SHORT $LN83@ctc_cmd
  00bcf	48 8b 44 24 78	 mov	 rax, QWORD PTR pDEVGRP$1[rsp]
  00bd4	83 78 04 00	 cmp	 DWORD PTR [rax+4], 0
  00bd8	74 66		 je	 SHORT $LN83@ctc_cmd

; 2481 :             {
; 2482 :                 pDEVBLK = pDEVGRP->memdev[0];

  00bda	b8 08 00 00 00	 mov	 eax, 8
  00bdf	48 6b c0 00	 imul	 rax, rax, 0
  00be3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pDEVGRP$1[rsp]
  00be8	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  00bed	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR pDEVBLK$4[rsp], rax

; 2483 :                 pPTPATH = pDEVBLK->dev_data;

  00bf5	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR pDEVBLK$4[rsp]
  00bfd	48 8b 80 08 06
	00 00		 mov	 rax, QWORD PTR [rax+1544]
  00c04	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR pPTPATH$[rsp], rax

; 2484 :                 pPTPBLK = pPTPATH->pPTPBLK;

  00c0c	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR pPTPATH$[rsp]
  00c14	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00c17	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR pPTPBLK$[rsp], rax

; 2485 :                 pPTPBLK->uDebugMask = mask;

  00c1f	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR pPTPBLK$[rsp]
  00c27	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR mask$[rsp]
  00c2e	89 48 68	 mov	 DWORD PTR [rax+104], ecx

; 2486 :                 acount = pDEVGRP->acount;

  00c31	48 8b 44 24 78	 mov	 rax, QWORD PTR pDEVGRP$1[rsp]
  00c36	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00c39	89 84 24 80 00
	00 00		 mov	 DWORD PTR acount$2[rsp], eax
$LN83@ctc_cmd:

; 2487 :             }
; 2488 :         }

  00c40	e9 e4 00 00 00	 jmp	 $LN82@ctc_cmd
$LN81@ctc_cmd:

; 2489 :         else if (CTC_CTCE == dev->ctctype)  /* CTCE is not grouped. */

  00c45	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00c4a	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  00c51	83 f8 04	 cmp	 eax, 4
  00c54	75 48		 jne	 SHORT $LN84@ctc_cmd

; 2490 :         {
; 2491 :             if (onoff)

  00c56	0f b6 44 24 51	 movzx	 eax, BYTE PTR onoff$[rsp]
  00c5b	85 c0		 test	 eax, eax
  00c5d	74 11		 je	 SHORT $LN86@ctc_cmd

; 2492 :             {
; 2493 :                 dev->ctce_trace_cntr = CTCE_TRACE_ON;

  00c5f	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00c64	c7 80 68 07 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+1896], -1

; 2494 :             }

  00c6e	eb 29		 jmp	 SHORT $LN87@ctc_cmd
$LN86@ctc_cmd:

; 2495 :             else if (startup)

  00c70	0f b6 44 24 60	 movzx	 eax, BYTE PTR startup$[rsp]
  00c75	85 c0		 test	 eax, eax
  00c77	74 11		 je	 SHORT $LN88@ctc_cmd

; 2496 :             {
; 2497 :                 dev->ctce_trace_cntr = CTCE_TRACE_STARTUP;

  00c79	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00c7e	c7 80 68 07 00
	00 14 00 00 00	 mov	 DWORD PTR [rax+1896], 20

; 2498 :             }

  00c88	eb 0f		 jmp	 SHORT $LN89@ctc_cmd
$LN88@ctc_cmd:

; 2499 :             else
; 2500 :             {
; 2501 :                 dev->ctce_trace_cntr = CTCE_TRACE_OFF;

  00c8a	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00c8f	c7 80 68 07 00
	00 fe ff ff ff	 mov	 DWORD PTR [rax+1896], -2
$LN89@ctc_cmd:
$LN87@ctc_cmd:

; 2502 :             }
; 2503 :         }

  00c99	e9 8b 00 00 00	 jmp	 $LN85@ctc_cmd
$LN84@ctc_cmd:

; 2504 :         else
; 2505 :         {
; 2506 :             /* HHC02209 "%1d:%04X device is not a %s" */
; 2507 :             WRMSG(HHC02209, "E", lcss, devnum, "supported CTCI, LSC, PTP or CTCE" );

  00c9e	0f b7 44 24 68	 movzx	 eax, WORD PTR devnum$[rsp]
  00ca3	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv432[rsp], eax
  00caa	0f b7 4c 24 6c	 movzx	 ecx, WORD PTR lcss$[rsp]
  00caf	89 8c 24 d4 00
	00 00		 mov	 DWORD PTR tv434[rsp], ecx
  00cb6	b9 01 00 00 00	 mov	 ecx, 1
  00cbb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00cc1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206452
  00cc8	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00ccd	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR tv432[rsp]
  00cd4	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00cd8	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR tv434[rsp]
  00cdf	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00ce3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206453
  00cea	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00cef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206454
  00cf6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00cfb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d00	41 b9 03 00 00
	00		 mov	 r9d, 3
  00d06	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206455
  00d0d	ba cb 09 00 00	 mov	 edx, 2507		; 000009cbH
  00d12	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206456
  00d19	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2508 :             return -1;

  00d1f	b8 ff ff ff ff	 mov	 eax, -1
  00d24	e9 d8 01 00 00	 jmp	 $LN1@ctc_cmd
$LN85@ctc_cmd:
$LN82@ctc_cmd:
$LN79@ctc_cmd:
$LN76@ctc_cmd:

; 2509 :         }
; 2510 : 
; 2511 :         {
; 2512 :           char buf1[32] = {0};

  00d29	48 8d 84 24 38
	01 00 00	 lea	 rax, QWORD PTR buf1$5[rsp]
  00d31	48 8b f8	 mov	 rdi, rax
  00d34	33 c0		 xor	 eax, eax
  00d36	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00d3b	f3 aa		 rep stosb

; 2513 :           char buf2[128];
; 2514 :           if (acount) {

  00d3d	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR acount$2[rsp], 0
  00d45	74 22		 je	 SHORT $LN90@ctc_cmd

; 2515 :             MSGBUF( buf1, " group (%d devices)", acount);

  00d47	44 8b 8c 24 80
	00 00 00	 mov	 r9d, DWORD PTR acount$2[rsp]
  00d4f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206458
  00d56	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00d5b	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR buf1$5[rsp]
  00d63	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN90@ctc_cmd:

; 2516 :           }
; 2517 :           MSGBUF( buf2, "%s for %s device %1d:%04X%s",

  00d69	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00d6e	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  00d75	83 f8 04	 cmp	 eax, 4
  00d78	75 11		 jne	 SHORT $LN112@ctc_cmd
  00d7a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206459
  00d81	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv503[rsp], rax
  00d89	eb 73		 jmp	 SHORT $LN113@ctc_cmd
$LN112@ctc_cmd:
  00d8b	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00d90	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  00d97	83 f8 01	 cmp	 eax, 1
  00d9a	75 11		 jne	 SHORT $LN110@ctc_cmd
  00d9c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206460
  00da3	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv502[rsp], rax
  00dab	eb 41		 jmp	 SHORT $LN111@ctc_cmd
$LN110@ctc_cmd:
  00dad	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00db2	0f b6 80 1c 07
	00 00		 movzx	 eax, BYTE PTR [rax+1820]
  00db9	83 f8 03	 cmp	 eax, 3
  00dbc	75 11		 jne	 SHORT $LN108@ctc_cmd
  00dbe	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206461
  00dc5	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv501[rsp], rax
  00dcd	eb 0f		 jmp	 SHORT $LN109@ctc_cmd
$LN108@ctc_cmd:
  00dcf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206462
  00dd6	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv501[rsp], rax
$LN109@ctc_cmd:
  00dde	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR tv501[rsp]
  00de6	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv502[rsp], rax
$LN111@ctc_cmd:
  00dee	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR tv502[rsp]
  00df6	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv503[rsp], rax
$LN113@ctc_cmd:
  00dfe	0f b6 44 24 60	 movzx	 eax, BYTE PTR startup$[rsp]
  00e03	85 c0		 test	 eax, eax
  00e05	74 11		 je	 SHORT $LN116@ctc_cmd
  00e07	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206463
  00e0e	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv510[rsp], rax
  00e16	eb 39		 jmp	 SHORT $LN117@ctc_cmd
$LN116@ctc_cmd:
  00e18	0f b6 44 24 51	 movzx	 eax, BYTE PTR onoff$[rsp]
  00e1d	85 c0		 test	 eax, eax
  00e1f	74 11		 je	 SHORT $LN114@ctc_cmd
  00e21	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206464
  00e28	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv508[rsp], rax
  00e30	eb 0f		 jmp	 SHORT $LN115@ctc_cmd
$LN114@ctc_cmd:
  00e32	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206465
  00e39	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv508[rsp], rax
$LN115@ctc_cmd:
  00e41	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR tv508[rsp]
  00e49	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv510[rsp], rax
$LN117@ctc_cmd:
  00e51	0f b7 44 24 68	 movzx	 eax, WORD PTR devnum$[rsp]
  00e56	0f b7 4c 24 6c	 movzx	 ecx, WORD PTR lcss$[rsp]
  00e5b	48 8d 94 24 38
	01 00 00	 lea	 rdx, QWORD PTR buf1$5[rsp]
  00e63	48 89 54 24 38	 mov	 QWORD PTR [rsp+56], rdx
  00e68	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00e6c	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00e70	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR tv503[rsp]
  00e78	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e7d	4c 8b 8c 24 28
	01 00 00	 mov	 r9, QWORD PTR tv510[rsp]
  00e85	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206466
  00e8c	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00e91	48 8d 8c 24 60
	01 00 00	 lea	 rcx, QWORD PTR buf2$6[rsp]
  00e99	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2518 :                   startup ? "STARTUP" : onoff ? "ON" : "OFF",
; 2519 :                   CTC_CTCE == dev->ctctype ? "CTCE" : CTC_LCS == dev->ctctype ? "LCS" : CTC_PTP == dev->ctctype ? "PTP" : "CTCI",
; 2520 :                   lcss, devnum,
; 2521 :                   buf1 );
; 2522 :           /* HHC02204 "%-14s set to %s" */
; 2523 :           WRMSG(HHC02204, "I", "CTC DEBUG", buf2);

  00e9f	b9 01 00 00 00	 mov	 ecx, 1
  00ea4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00eaa	48 8d 8c 24 60
	01 00 00	 lea	 rcx, QWORD PTR buf2$6[rsp]
  00eb2	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00eb7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206467
  00ebe	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00ec3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206468
  00eca	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ecf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206469
  00ed6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00edb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ee0	41 b9 03 00 00
	00		 mov	 r9d, 3
  00ee6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206470
  00eed	ba db 09 00 00	 mov	 edx, 2523		; 000009dbH
  00ef2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206471
  00ef9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN61@ctc_cmd:

; 2524 :         }
; 2525 :     }
; 2526 : 
; 2527 :     return 0;

  00eff	33 c0		 xor	 eax, eax
$LN1@ctc_cmd:

; 2528 : }

  00f01	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00f09	48 33 cc	 xor	 rcx, rsp
  00f0c	e8 00 00 00 00	 call	 __security_check_cookie
  00f11	48 81 c4 f0 01
	00 00		 add	 rsp, 496		; 000001f0H
  00f18	5f		 pop	 rdi
  00f19	c3		 ret	 0
ctc_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
bVerbose$ = 64
tv67 = 68
tv69 = 72
rc$ = 76
p$ = 80
strtok_str$ = 88
tv83 = 96
argc$ = 128
argv$ = 136
cmdline$ = 144
cckd_cmd PROC

; 2164 : {

$LN10:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 2165 :     char*   p;
; 2166 :     int     rc = -1;

  00012	c7 44 24 4c ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 2167 :     char*   strtok_str = NULL;

  0001a	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR strtok_str$[rsp], 0

; 2168 :     bool    bVerbose = MLVL( VERBOSE ) ? true : false;

  00023	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0002a	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  00030	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00035	85 c0		 test	 eax, eax
  00037	74 0a		 je	 SHORT $LN6@cckd_cmd
  00039	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv67[rsp], 1
  00041	eb 08		 jmp	 SHORT $LN7@cckd_cmd
$LN6@cckd_cmd:
  00043	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv67[rsp], 0
$LN7@cckd_cmd:
  0004b	83 7c 24 44 00	 cmp	 DWORD PTR tv67[rsp], 0
  00050	75 0a		 jne	 SHORT $LN8@cckd_cmd
  00052	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv69[rsp], 0
  0005a	eb 08		 jmp	 SHORT $LN9@cckd_cmd
$LN8@cckd_cmd:
  0005c	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv69[rsp], 1
$LN9@cckd_cmd:
  00064	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv69[rsp]
  00069	88 44 24 40	 mov	 BYTE PTR bVerbose$[rsp], al

; 2169 : 
; 2170 :     if (0
; 2171 :         || argc != 2
; 2172 :         || !cmdline
; 2173 :         || strlen( cmdline ) < 5
; 2174 :         || !(p = strtok_r( cmdline + 4, " \t", &strtok_str ))

  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 56		 jne	 SHORT $LN4@cckd_cmd
  00073	83 bc 24 80 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0007b	75 4c		 jne	 SHORT $LN4@cckd_cmd
  0007d	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR cmdline$[rsp], 0
  00086	74 41		 je	 SHORT $LN4@cckd_cmd
  00088	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR cmdline$[rsp]
  00090	e8 00 00 00 00	 call	 strlen
  00095	48 83 f8 05	 cmp	 rax, 5
  00099	72 2e		 jb	 SHORT $LN4@cckd_cmd
  0009b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR cmdline$[rsp]
  000a3	48 83 c0 04	 add	 rax, 4
  000a7	4c 8d 44 24 58	 lea	 r8, QWORD PTR strtok_str$[rsp]
  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206297
  000b3	48 8b c8	 mov	 rcx, rax
  000b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtok_r
  000bc	48 89 44 24 50	 mov	 QWORD PTR p$[rsp], rax
  000c1	48 83 7c 24 50
	00		 cmp	 QWORD PTR p$[rsp], 0
  000c7	75 6d		 jne	 SHORT $LN2@cckd_cmd
$LN4@cckd_cmd:

; 2175 :     )
; 2176 :         // "Invalid command usage. Type 'help %s' for assistance."
; 2177 :         WRMSG( HHC02299, "E", argv[0] );

  000c9	b8 08 00 00 00	 mov	 eax, 8
  000ce	48 6b c0 00	 imul	 rax, rax, 0
  000d2	48 89 44 24 60	 mov	 QWORD PTR tv83[rsp], rax
  000d7	b9 01 00 00 00	 mov	 ecx, 1
  000dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000e2	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000ea	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv83[rsp]
  000ef	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000f3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206298
  000ff	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00104	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206299
  0010b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00110	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00115	41 b9 03 00 00
	00		 mov	 r9d, 3
  0011b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206300
  00122	ba 81 08 00 00	 mov	 edx, 2177		; 00000881H
  00127	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206301
  0012e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00134	eb 16		 jmp	 SHORT $LN3@cckd_cmd
$LN2@cckd_cmd:

; 2178 :     else
; 2179 :         rc = cckd_command( p, bVerbose );

  00136	0f b6 44 24 40	 movzx	 eax, BYTE PTR bVerbose$[rsp]
  0013b	8b d0		 mov	 edx, eax
  0013d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p$[rsp]
  00142	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cckd_command
  00148	89 44 24 4c	 mov	 DWORD PTR rc$[rsp], eax
$LN3@cckd_cmd:

; 2180 : 
; 2181 :     return rc;

  0014c	8b 44 24 4c	 mov	 eax, DWORD PTR rc$[rsp]

; 2182 : }

  00150	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00154	c3		 ret	 0
cckd_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
mountreq$ = 112
unmountreq$ = 113
dev$ = 120
tv328 = 128
tapemsg$ = 136
c$1 = 144
auto_scsi_mount_secs$2 = 148
tapeloaded$ = 152
tv378 = 156
tv384 = 160
label_type$ = 168
tv351 = 176
tv355 = 180
tv237 = 184
$T3 = 192
$T4 = 200
tv361 = 208
tv77 = 216
tv149 = 224
tv165 = 232
tv168 = 240
tv191 = 248
tv204 = 256
tv348 = 264
volname$ = 272
buf$ = 288
__$ArrayPad$ = 800
argc$ = 832
argv$ = 840
cmdline$ = 848
scsimount_cmd PROC

; 1997 : {

$LN60:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 38 03
	00 00		 sub	 rsp, 824		; 00000338H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 20
	03 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1998 :     DEVBLK*  dev;
; 1999 :     int      tapeloaded;
; 2000 :     char*    tapemsg="";

  00027	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206197
  0002e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tapemsg$[rsp], rax
$LN4@scsimount_:

; 2001 :     char     volname[7];
; 2002 :     BYTE     mountreq, unmountreq;
; 2003 :     char*    label_type;
; 2004 :     char     buf[512];
; 2005 : 
; 2006 :     UNREFERENCED( cmdline );

  00036	33 c0		 xor	 eax, eax
  00038	85 c0		 test	 eax, eax
  0003a	75 fa		 jne	 SHORT $LN4@scsimount_
$LN7@scsimount_:

; 2007 : 
; 2008 :     UPPER_ARGV_0( argv );

  0003c	48 83 bc 24 48
	03 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00045	74 47		 je	 SHORT $LN13@scsimount_
  00047	b8 08 00 00 00	 mov	 eax, 8
  0004c	48 6b c0 00	 imul	 rax, rax, 0
  00050	48 8b 8c 24 48
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00058	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0005d	74 2f		 je	 SHORT $LN13@scsimount_
  0005f	b8 08 00 00 00	 mov	 eax, 8
  00064	48 6b c0 00	 imul	 rax, rax, 0
  00068	b9 08 00 00 00	 mov	 ecx, 8
  0006d	48 6b c9 00	 imul	 rcx, rcx, 0
  00071	48 8b 94 24 48
	03 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00079	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0007d	48 8b 84 24 48
	03 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00085	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00089	e8 00 00 00 00	 call	 strupper
$LN13@scsimount_:
  0008e	33 c0		 xor	 eax, eax
  00090	85 c0		 test	 eax, eax
  00092	75 a8		 jne	 SHORT $LN7@scsimount_

; 2009 : 
; 2010 :     if ( argc > 2 )

  00094	83 bc 24 40 03
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0009c	7e 7b		 jle	 SHORT $LN14@scsimount_

; 2011 :     {
; 2012 :         WRMSG( HHC02299, "E", argv[0] );

  0009e	b8 08 00 00 00	 mov	 eax, 8
  000a3	48 6b c0 00	 imul	 rax, rax, 0
  000a7	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv77[rsp], rax
  000af	b9 01 00 00 00	 mov	 ecx, 1
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000ba	48 8b 8c 24 48
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000c2	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR tv77[rsp]
  000ca	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000ce	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206200
  000da	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206201
  000e6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000eb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f0	41 b9 03 00 00
	00		 mov	 r9d, 3
  000f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206202
  000fd	ba dc 07 00 00	 mov	 edx, 2012		; 000007dcH
  00102	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206203
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2013 :         return -1;

  0010f	b8 ff ff ff ff	 mov	 eax, -1
  00114	e9 2b 09 00 00	 jmp	 $LN1@scsimount_
$LN14@scsimount_:

; 2014 :     }
; 2015 : 
; 2016 :     if (argc == 2)

  00119	83 bc 24 40 03
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00121	0f 85 27 02 00
	00		 jne	 $LN15@scsimount_

; 2017 :     {
; 2018 :         if ( CMD(argv[1],no,2) )

  00127	b8 08 00 00 00	 mov	 eax, 8
  0012c	48 6b c0 01	 imul	 rax, rax, 1
  00130	41 b8 02 00 00
	00		 mov	 r8d, 2
  00136	48 8b 8c 24 48
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0013e	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206207
  00149	e8 00 00 00 00	 call	 strcaseabbrev
  0014e	85 c0		 test	 eax, eax
  00150	74 16		 je	 SHORT $LN16@scsimount_

; 2019 :         {
; 2020 :             sysblk.auto_scsi_mount_secs = 0;

  00152	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00159	c7 80 78 11 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4472], 0

; 2021 :         }

  00163	e9 2a 01 00 00	 jmp	 $LN17@scsimount_
$LN16@scsimount_:

; 2022 :         else if ( CMD(argv[1],yes,3) )

  00168	b8 08 00 00 00	 mov	 eax, 8
  0016d	48 6b c0 01	 imul	 rax, rax, 1
  00171	41 b8 03 00 00
	00		 mov	 r8d, 3
  00177	48 8b 8c 24 48
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0017f	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00183	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206210
  0018a	e8 00 00 00 00	 call	 strcaseabbrev
  0018f	85 c0		 test	 eax, eax
  00191	74 16		 je	 SHORT $LN18@scsimount_

; 2023 :         {
; 2024 :             sysblk.auto_scsi_mount_secs = DEF_SCSIMOUNT_SECS;

  00193	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0019a	c7 80 78 11 00
	00 05 00 00 00	 mov	 DWORD PTR [rax+4472], 5

; 2025 :         }

  001a4	e9 e9 00 00 00	 jmp	 $LN19@scsimount_
$LN18@scsimount_:

; 2026 :         else
; 2027 :         {
; 2028 :             int auto_scsi_mount_secs; BYTE c;
; 2029 :             if ( sscanf( argv[1], "%d%c", &auto_scsi_mount_secs, &c ) != 1
; 2030 :                 || auto_scsi_mount_secs < 0 || auto_scsi_mount_secs > 99 )

  001a9	b8 08 00 00 00	 mov	 eax, 8
  001ae	48 6b c0 01	 imul	 rax, rax, 1
  001b2	4c 8d 8c 24 90
	00 00 00	 lea	 r9, QWORD PTR c$1[rsp]
  001ba	4c 8d 84 24 94
	00 00 00	 lea	 r8, QWORD PTR auto_scsi_mount_secs$2[rsp]
  001c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206213
  001c9	48 8b 8c 24 48
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001d1	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  001d5	e8 00 00 00 00	 call	 sscanf
  001da	83 f8 01	 cmp	 eax, 1
  001dd	75 18		 jne	 SHORT $LN21@scsimount_
  001df	83 bc 24 94 00
	00 00 00	 cmp	 DWORD PTR auto_scsi_mount_secs$2[rsp], 0
  001e7	7c 0e		 jl	 SHORT $LN21@scsimount_
  001e9	83 bc 24 94 00
	00 00 63	 cmp	 DWORD PTR auto_scsi_mount_secs$2[rsp], 99 ; 00000063H
  001f1	0f 8e 87 00 00
	00		 jle	 $LN20@scsimount_
$LN21@scsimount_:

; 2031 :             {
; 2032 :                 WRMSG (HHC02205, "E", argv[1], "");

  001f7	b8 08 00 00 00	 mov	 eax, 8
  001fc	48 6b c0 01	 imul	 rax, rax, 1
  00200	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv149[rsp], rax
  00208	b9 01 00 00 00	 mov	 ecx, 1
  0020d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00213	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206214
  0021a	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0021f	48 8b 8c 24 48
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00227	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR tv149[rsp]
  0022f	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00233	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00238	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206215
  0023f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00244	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206216
  0024b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00250	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00255	41 b9 03 00 00
	00		 mov	 r9d, 3
  0025b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206217
  00262	ba f0 07 00 00	 mov	 edx, 2032		; 000007f0H
  00267	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206218
  0026e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2033 :                 return -1;

  00274	b8 ff ff ff ff	 mov	 eax, -1
  00279	e9 c6 07 00 00	 jmp	 $LN1@scsimount_
$LN20@scsimount_:

; 2034 :             }
; 2035 :             sysblk.auto_scsi_mount_secs = auto_scsi_mount_secs;

  0027e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00285	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR auto_scsi_mount_secs$2[rsp]
  0028c	89 88 78 11 00
	00		 mov	 DWORD PTR [rax+4472], ecx
$LN19@scsimount_:
$LN17@scsimount_:

; 2036 :         }
; 2037 :         if ( MLVL(VERBOSE) )

  00292	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00299	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  0029f	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  002a4	85 c0		 test	 eax, eax
  002a6	0f 84 a2 00 00
	00		 je	 $LN22@scsimount_

; 2038 :         {
; 2039 :             WRMSG( HHC02204, "I", argv[0], argv[1] );

  002ac	b8 08 00 00 00	 mov	 eax, 8
  002b1	48 6b c0 01	 imul	 rax, rax, 1
  002b5	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv165[rsp], rax
  002bd	b9 08 00 00 00	 mov	 ecx, 8
  002c2	48 6b c9 00	 imul	 rcx, rcx, 0
  002c6	48 89 8c 24 f0
	00 00 00	 mov	 QWORD PTR tv168[rsp], rcx
  002ce	b9 01 00 00 00	 mov	 ecx, 1
  002d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002d9	48 8b 8c 24 48
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002e1	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR tv165[rsp]
  002e9	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  002ed	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002f2	48 8b 8c 24 48
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002fa	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR tv168[rsp]
  00302	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00306	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0030b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206220
  00312	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00317	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206221
  0031e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00323	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00328	41 b9 03 00 00
	00		 mov	 r9d, 3
  0032e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206222
  00335	ba f7 07 00 00	 mov	 edx, 2039		; 000007f7H
  0033a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206223
  00341	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2040 :             return 0;

  00347	33 c0		 xor	 eax, eax
  00349	e9 f6 06 00 00	 jmp	 $LN1@scsimount_
$LN22@scsimount_:
$LN15@scsimount_:

; 2041 :         }
; 2042 :     }
; 2043 : 
; 2044 :     if ( MLVL(VERBOSE) )

  0034e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00355	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  0035b	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00360	85 c0		 test	 eax, eax
  00362	0f 84 39 01 00
	00		 je	 $LN23@scsimount_

; 2045 :     {
; 2046 :         if ( sysblk.auto_scsi_mount_secs )

  00368	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0036f	83 b8 78 11 00
	00 00		 cmp	 DWORD PTR [rax+4472], 0
  00376	0f 84 a8 00 00
	00		 je	 $LN24@scsimount_

; 2047 :         {
; 2048 :             MSGBUF( buf, "%d", sysblk.auto_scsi_mount_secs );

  0037c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00383	44 8b 88 78 11
	00 00		 mov	 r9d, DWORD PTR [rax+4472]
  0038a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206227
  00391	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00396	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0039e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2049 :             WRMSG(HHC02203, "I", argv[0], buf);

  003a4	b8 08 00 00 00	 mov	 eax, 8
  003a9	48 6b c0 00	 imul	 rax, rax, 0
  003ad	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv191[rsp], rax
  003b5	b9 01 00 00 00	 mov	 ecx, 1
  003ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003c0	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  003c8	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003cd	48 8b 8c 24 48
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003d5	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR tv191[rsp]
  003dd	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  003e1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206228
  003ed	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206229
  003f9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003fe	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00403	41 b9 03 00 00
	00		 mov	 r9d, 3
  00409	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206230
  00410	ba 01 08 00 00	 mov	 edx, 2049		; 00000801H
  00415	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206231
  0041c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2050 :         }

  00422	eb 7d		 jmp	 SHORT $LN25@scsimount_
$LN24@scsimount_:

; 2051 :         else
; 2052 :             WRMSG(HHC02203, "I", argv[0], "NO");

  00424	b8 08 00 00 00	 mov	 eax, 8
  00429	48 6b c0 00	 imul	 rax, rax, 0
  0042d	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv204[rsp], rax
  00435	b9 01 00 00 00	 mov	 ecx, 1
  0043a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00440	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206232
  00447	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0044c	48 8b 8c 24 48
	03 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00454	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR tv204[rsp]
  0045c	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00460	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00465	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206233
  0046c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00471	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206234
  00478	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0047d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00482	41 b9 03 00 00
	00		 mov	 r9d, 3
  00488	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206235
  0048f	ba 04 08 00 00	 mov	 edx, 2052		; 00000804H
  00494	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206236
  0049b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN25@scsimount_:
$LN23@scsimount_:

; 2053 :     }
; 2054 : 
; 2055 :     // Scan the device list looking for all SCSI tape devices
; 2056 :     // with either an active scsi mount thread and/or an out-
; 2057 :     // standing tape mount request...
; 2058 : 
; 2059 :     for ( dev = sysblk.firstdev; dev; dev = dev->nextdev )

  004a1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  004a8	48 8b 80 c0 11
	00 00		 mov	 rax, QWORD PTR [rax+4544]
  004af	48 89 44 24 78	 mov	 QWORD PTR dev$[rsp], rax
  004b4	eb 0e		 jmp	 SHORT $LN10@scsimount_
$LN8@scsimount_:
  004b6	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  004bb	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  004bf	48 89 44 24 78	 mov	 QWORD PTR dev$[rsp], rax
$LN10@scsimount_:
  004c4	48 83 7c 24 78
	00		 cmp	 QWORD PTR dev$[rsp], 0
  004ca	0f 84 72 05 00
	00		 je	 $LN9@scsimount_

; 2060 :     {
; 2061 :         if ( !dev->allocated || TAPEDEVT_SCSITAPE != dev->tapedevt )

  004d0	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  004d5	83 78 40 00	 cmp	 DWORD PTR [rax+64], 0
  004d9	74 11		 je	 SHORT $LN27@scsimount_
  004db	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  004e0	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  004e7	83 f8 03	 cmp	 eax, 3
  004ea	74 02		 je	 SHORT $LN26@scsimount_
$LN27@scsimount_:

; 2062 :             continue;  // (not an active SCSI tape device; skip)

  004ec	eb c8		 jmp	 SHORT $LN8@scsimount_
$LN26@scsimount_:

; 2063 : 
; 2064 :         try_scsi_refresh( dev );    // (see comments in function)

  004ee	48 8b 4c 24 78	 mov	 rcx, QWORD PTR dev$[rsp]
  004f3	e8 00 00 00 00	 call	 try_scsi_refresh

; 2065 : 
; 2066 :         MSGBUF( buf,

  004f8	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  004fd	48 83 b8 c0 10
	00 00 00	 cmp	 QWORD PTR [rax+4288], 0
  00505	74 11		 je	 SHORT $LN48@scsimount_
  00507	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206239
  0050e	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv237[rsp], rax
  00516	eb 0f		 jmp	 SHORT $LN49@scsimount_
$LN48@scsimount_:
  00518	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206240
  0051f	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv237[rsp], rax
$LN49@scsimount_:
  00527	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  0052c	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00532	48 8b 4c 24 78	 mov	 rcx, QWORD PTR dev$[rsp]
  00537	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  0053b	48 8b 54 24 78	 mov	 rdx, QWORD PTR dev$[rsp]
  00540	0f b7 52 44	 movzx	 edx, WORD PTR [rdx+68]
  00544	d1 fa		 sar	 edx, 1
  00546	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0054b	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  0054f	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  00553	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR tv237[rsp]
  0055b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206241
  00562	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00567	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0056f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2067 :             "thread %s active for drive %u:%4.4X = %s"
; 2068 :             ,dev->stape_mntdrq.link.Flink ? "IS" : "is NOT"
; 2069 :             ,SSID_TO_LCSS(dev->ssid)
; 2070 :             ,dev->devnum
; 2071 :             ,dev->filename
; 2072 :         );
; 2073 :         WRMSG(HHC02275, "I", buf);

  00575	b9 01 00 00 00	 mov	 ecx, 1
  0057a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00580	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00588	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0058d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206242
  00594	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00599	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206243
  005a0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005a5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005aa	41 b9 03 00 00
	00		 mov	 r9d, 3
  005b0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206244
  005b7	ba 19 08 00 00	 mov	 edx, 2073		; 00000819H
  005bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206245
  005c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2074 : 
; 2075 :         if (!dev->tdparms.displayfeat)

  005c9	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  005ce	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  005d4	c1 e8 09	 shr	 eax, 9
  005d7	83 e0 01	 and	 eax, 1
  005da	85 c0		 test	 eax, eax
  005dc	75 05		 jne	 SHORT $LN28@scsimount_

; 2076 :             continue;

  005de	e9 d3 fe ff ff	 jmp	 $LN8@scsimount_
$LN28@scsimount_:

; 2077 : 
; 2078 :         mountreq   = FALSE;     // (default)

  005e3	c6 44 24 70 00	 mov	 BYTE PTR mountreq$[rsp], 0

; 2079 :         unmountreq = FALSE;     // (default)

  005e8	c6 44 24 71 00	 mov	 BYTE PTR unmountreq$[rsp], 0

; 2080 : 
; 2081 :         if (0
; 2082 :             || TAPEDISPTYP_MOUNT       == dev->tapedisptype
; 2083 :             || TAPEDISPTYP_UNMOUNT     == dev->tapedisptype
; 2084 :             || TAPEDISPTYP_UMOUNTMOUNT == dev->tapedisptype

  005ed	33 c0		 xor	 eax, eax
  005ef	85 c0		 test	 eax, eax
  005f1	75 37		 jne	 SHORT $LN30@scsimount_
  005f3	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  005f8	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  005ff	83 f8 06	 cmp	 eax, 6
  00602	74 26		 je	 SHORT $LN30@scsimount_
  00604	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  00609	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  00610	83 f8 07	 cmp	 eax, 7
  00613	74 15		 je	 SHORT $LN30@scsimount_
  00615	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  0061a	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  00621	83 f8 08	 cmp	 eax, 8
  00624	0f 85 f0 00 00
	00		 jne	 $LN29@scsimount_
$LN30@scsimount_:

; 2085 :         )
; 2086 :         {
; 2087 :             tapeloaded = dev->tmh->tapeloaded( dev, NULL, 0 );

  0062a	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  0062f	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00636	45 33 c0	 xor	 r8d, r8d
  00639	33 d2		 xor	 edx, edx
  0063b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR dev$[rsp]
  00640	ff 50 70	 call	 QWORD PTR [rax+112]
  00643	89 84 24 98 00
	00 00		 mov	 DWORD PTR tapeloaded$[rsp], eax

; 2088 : 
; 2089 :             if ( TAPEDISPTYP_MOUNT == dev->tapedisptype && !tapeloaded )

  0064a	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  0064f	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  00656	83 f8 06	 cmp	 eax, 6
  00659	75 2c		 jne	 SHORT $LN31@scsimount_
  0065b	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR tapeloaded$[rsp], 0
  00663	75 22		 jne	 SHORT $LN31@scsimount_

; 2090 :             {
; 2091 :                 mountreq   = TRUE;

  00665	c6 44 24 70 01	 mov	 BYTE PTR mountreq$[rsp], 1

; 2092 :                 unmountreq = FALSE;

  0066a	c6 44 24 71 00	 mov	 BYTE PTR unmountreq$[rsp], 0

; 2093 :                 tapemsg = dev->tapemsg1;

  0066f	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  00674	48 05 20 11 00
	00		 add	 rax, 4384		; 00001120H
  0067a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tapemsg$[rsp], rax

; 2094 :             }

  00682	e9 93 00 00 00	 jmp	 $LN32@scsimount_
$LN31@scsimount_:

; 2095 :             else if ( TAPEDISPTYP_UNMOUNT == dev->tapedisptype && tapeloaded )

  00687	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  0068c	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  00693	83 f8 07	 cmp	 eax, 7
  00696	75 29		 jne	 SHORT $LN33@scsimount_
  00698	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR tapeloaded$[rsp], 0
  006a0	74 1f		 je	 SHORT $LN33@scsimount_

; 2096 :             {
; 2097 :                 unmountreq = TRUE;

  006a2	c6 44 24 71 01	 mov	 BYTE PTR unmountreq$[rsp], 1

; 2098 :                 mountreq   = FALSE;

  006a7	c6 44 24 70 00	 mov	 BYTE PTR mountreq$[rsp], 0

; 2099 :                 tapemsg = dev->tapemsg1;

  006ac	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  006b1	48 05 20 11 00
	00		 add	 rax, 4384		; 00001120H
  006b7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tapemsg$[rsp], rax

; 2100 :             }

  006bf	eb 59		 jmp	 SHORT $LN34@scsimount_
$LN33@scsimount_:

; 2101 :             else // ( TAPEDISPTYP_UMOUNTMOUNT == dev->tapedisptype )
; 2102 :             {
; 2103 :                 if (tapeloaded)

  006c1	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR tapeloaded$[rsp], 0
  006c9	74 32		 je	 SHORT $LN35@scsimount_

; 2104 :                 {
; 2105 :                     if ( !(dev->tapedispflags & TAPEDISPFLG_MESSAGE2) )

  006cb	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  006d0	0f b6 80 61 11
	00 00		 movzx	 eax, BYTE PTR [rax+4449]
  006d7	83 e0 20	 and	 eax, 32			; 00000020H
  006da	85 c0		 test	 eax, eax
  006dc	75 1d		 jne	 SHORT $LN37@scsimount_

; 2106 :                     {
; 2107 :                         unmountreq = TRUE;

  006de	c6 44 24 71 01	 mov	 BYTE PTR unmountreq$[rsp], 1

; 2108 :                         mountreq   = FALSE;

  006e3	c6 44 24 70 00	 mov	 BYTE PTR mountreq$[rsp], 0

; 2109 :                         tapemsg = dev->tapemsg1;

  006e8	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  006ed	48 05 20 11 00
	00		 add	 rax, 4384		; 00001120H
  006f3	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tapemsg$[rsp], rax
$LN37@scsimount_:

; 2110 :                     }
; 2111 :                 }

  006fb	eb 1d		 jmp	 SHORT $LN36@scsimount_
$LN35@scsimount_:

; 2112 :                 else // (!tapeloaded)
; 2113 :                 {
; 2114 :                     mountreq   = TRUE;

  006fd	c6 44 24 70 01	 mov	 BYTE PTR mountreq$[rsp], 1

; 2115 :                     unmountreq = FALSE;

  00702	c6 44 24 71 00	 mov	 BYTE PTR unmountreq$[rsp], 0

; 2116 :                     tapemsg = dev->tapemsg2;

  00707	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  0070c	48 05 29 11 00
	00		 add	 rax, 4393		; 00001129H
  00712	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tapemsg$[rsp], rax
$LN36@scsimount_:
$LN34@scsimount_:
$LN32@scsimount_:
$LN29@scsimount_:

; 2117 :                 }
; 2118 :             }
; 2119 :         }
; 2120 : 
; 2121 :         if ((mountreq || unmountreq) && ' ' != *tapemsg)

  0071a	0f b6 44 24 70	 movzx	 eax, BYTE PTR mountreq$[rsp]
  0071f	85 c0		 test	 eax, eax
  00721	75 0d		 jne	 SHORT $LN40@scsimount_
  00723	0f b6 44 24 71	 movzx	 eax, BYTE PTR unmountreq$[rsp]
  00728	85 c0		 test	 eax, eax
  0072a	0f 84 30 02 00
	00		 je	 $LN38@scsimount_
$LN40@scsimount_:
  00730	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tapemsg$[rsp]
  00738	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0073b	83 f8 20	 cmp	 eax, 32			; 00000020H
  0073e	0f 84 1c 02 00
	00		 je	 $LN38@scsimount_

; 2122 :         {
; 2123 :             switch (*(tapemsg+7))

  00744	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tapemsg$[rsp]
  0074c	0f b6 40 07	 movzx	 eax, BYTE PTR [rax+7]
  00750	88 84 24 80 00
	00 00		 mov	 BYTE PTR tv328[rsp], al
  00757	80 bc 24 80 00
	00 00 41	 cmp	 BYTE PTR tv328[rsp], 65	; 00000041H
  0075f	74 20		 je	 SHORT $LN41@scsimount_
  00761	80 bc 24 80 00
	00 00 4e	 cmp	 BYTE PTR tv328[rsp], 78	; 0000004eH
  00769	74 38		 je	 SHORT $LN43@scsimount_
  0076b	80 bc 24 80 00
	00 00 53	 cmp	 BYTE PTR tv328[rsp], 83	; 00000053H
  00773	74 1d		 je	 SHORT $LN42@scsimount_
  00775	80 bc 24 80 00
	00 00 55	 cmp	 BYTE PTR tv328[rsp], 85	; 00000055H
  0077d	74 35		 je	 SHORT $LN44@scsimount_
  0077f	eb 44		 jmp	 SHORT $LN45@scsimount_
$LN41@scsimount_:

; 2124 :             {
; 2125 :                 case 'A': label_type = "ascii-standard"; break;

  00781	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206260
  00788	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR label_type$[rsp], rax
  00790	eb 42		 jmp	 SHORT $LN11@scsimount_
$LN42@scsimount_:

; 2126 :                 case 'S': label_type = "standard"; break;

  00792	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206262
  00799	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR label_type$[rsp], rax
  007a1	eb 31		 jmp	 SHORT $LN11@scsimount_
$LN43@scsimount_:

; 2127 :                 case 'N': label_type = "non"; break;

  007a3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206264
  007aa	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR label_type$[rsp], rax
  007b2	eb 20		 jmp	 SHORT $LN11@scsimount_
$LN44@scsimount_:

; 2128 :                 case 'U': label_type = "un"; break;

  007b4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206266
  007bb	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR label_type$[rsp], rax
  007c3	eb 0f		 jmp	 SHORT $LN11@scsimount_
$LN45@scsimount_:

; 2129 :                 default : label_type = "??"; break;

  007c5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206268
  007cc	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR label_type$[rsp], rax
$LN11@scsimount_:

; 2130 :             }
; 2131 : 
; 2132 :             volname[0]=0;

  007d4	b8 01 00 00 00	 mov	 eax, 1
  007d9	48 6b c0 00	 imul	 rax, rax, 0
  007dd	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR $T3[rsp], rax
  007e5	48 83 bc 24 c0
	00 00 00 07	 cmp	 QWORD PTR $T3[rsp], 7
  007ee	73 02		 jae	 SHORT $LN50@scsimount_
  007f0	eb 05		 jmp	 SHORT $LN51@scsimount_
$LN50@scsimount_:
  007f2	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN51@scsimount_:
  007f7	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR $T3[rsp]
  007ff	c6 84 04 10 01
	00 00 00	 mov	 BYTE PTR volname$[rsp+rax], 0

; 2133 : 
; 2134 :             if (*(tapemsg+1))

  00807	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tapemsg$[rsp]
  0080f	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  00813	85 c0		 test	 eax, eax
  00815	74 55		 je	 SHORT $LN46@scsimount_

; 2135 :             {
; 2136 :                 strncpy( volname, tapemsg+1, 6 );

  00817	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tapemsg$[rsp]
  0081f	48 ff c0	 inc	 rax
  00822	41 b8 06 00 00
	00		 mov	 r8d, 6
  00828	48 8b d0	 mov	 rdx, rax
  0082b	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR volname$[rsp]
  00833	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncpy

; 2137 :                 volname[6]=0;

  00839	b8 01 00 00 00	 mov	 eax, 1
  0083e	48 6b c0 06	 imul	 rax, rax, 6
  00842	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR $T4[rsp], rax
  0084a	48 83 bc 24 c8
	00 00 00 07	 cmp	 QWORD PTR $T4[rsp], 7
  00853	73 02		 jae	 SHORT $LN52@scsimount_
  00855	eb 05		 jmp	 SHORT $LN53@scsimount_
$LN52@scsimount_:
  00857	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN53@scsimount_:
  0085c	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR $T4[rsp]
  00864	c6 84 04 10 01
	00 00 00	 mov	 BYTE PTR volname$[rsp+rax], 0
$LN46@scsimount_:

; 2138 :             }
; 2139 : 
; 2140 :             WRMSG(HHC02223, "I"

  0086c	0f b6 44 24 70	 movzx	 eax, BYTE PTR mountreq$[rsp]
  00871	85 c0		 test	 eax, eax
  00873	74 11		 je	 SHORT $LN54@scsimount_
  00875	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206270
  0087c	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv361[rsp], rax
  00884	eb 0f		 jmp	 SHORT $LN55@scsimount_
$LN54@scsimount_:
  00886	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206271
  0088d	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv361[rsp], rax
$LN55@scsimount_:
  00895	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  0089a	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  008a0	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv348[rsp], rax
  008a8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR dev$[rsp]
  008ad	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  008b1	89 8c 24 b0 00
	00 00		 mov	 DWORD PTR tv351[rsp], ecx
  008b8	48 8b 54 24 78	 mov	 rdx, QWORD PTR dev$[rsp]
  008bd	0f b7 52 44	 movzx	 edx, WORD PTR [rdx+68]
  008c1	d1 fa		 sar	 edx, 1
  008c3	89 94 24 b4 00
	00 00		 mov	 DWORD PTR tv355[rsp], edx
  008ca	b9 01 00 00 00	 mov	 ecx, 1
  008cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008d5	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv348[rsp]
  008dd	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  008e2	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR tv351[rsp]
  008e9	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  008ed	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv355[rsp]
  008f4	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  008f8	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR volname$[rsp]
  00900	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00905	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR label_type$[rsp]
  0090d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00912	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tv361[rsp]
  0091a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0091f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206272
  00926	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0092b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206273
  00932	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00937	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0093c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00942	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206274
  00949	ba 62 08 00 00	 mov	 edx, 2146		; 00000862H
  0094e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206275
  00955	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2141 :                     ,mountreq ? "Mount" : "Dismount"
; 2142 :                     ,label_type
; 2143 :                     ,volname
; 2144 :                     ,SSID_TO_LCSS(dev->ssid)
; 2145 :                     ,dev->devnum
; 2146 :                     ,dev->filename);
; 2147 :         }

  0095b	e9 dd 00 00 00	 jmp	 $LN39@scsimount_
$LN38@scsimount_:

; 2148 :         else
; 2149 :         {
; 2150 :             MSGBUF( buf, "no requests pending for drive %u:%4.4X = %s.",

  00960	48 83 7c 24 78
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00966	74 12		 je	 SHORT $LN56@scsimount_
  00968	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  0096d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00971	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv378[rsp], eax
  00978	eb 0b		 jmp	 SHORT $LN57@scsimount_
$LN56@scsimount_:
  0097a	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv378[rsp], 0
$LN57@scsimount_:
  00985	48 83 7c 24 78
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0098b	74 14		 je	 SHORT $LN58@scsimount_
  0098d	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  00992	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00996	d1 f8		 sar	 eax, 1
  00998	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv384[rsp], eax
  0099f	eb 0b		 jmp	 SHORT $LN59@scsimount_
$LN58@scsimount_:
  009a1	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv384[rsp], 0
$LN59@scsimount_:
  009ac	48 8b 44 24 78	 mov	 rax, QWORD PTR dev$[rsp]
  009b1	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  009b7	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  009bc	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR tv378[rsp]
  009c3	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  009c7	44 8b 8c 24 a0
	00 00 00	 mov	 r9d, DWORD PTR tv384[rsp]
  009cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206276
  009d6	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  009db	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  009e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2151 :                 LCSS_DEVNUM, dev->filename );
; 2152 :             WRMSG(HHC02275, "I", buf);

  009e9	b9 01 00 00 00	 mov	 ecx, 1
  009ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009f4	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  009fc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a01	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206277
  00a08	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a0d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206278
  00a14	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a19	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a1e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a24	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206279
  00a2b	ba 68 08 00 00	 mov	 edx, 2152		; 00000868H
  00a30	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206280
  00a37	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN39@scsimount_:

; 2153 :         }
; 2154 :     }

  00a3d	e9 74 fa ff ff	 jmp	 $LN8@scsimount_
$LN9@scsimount_:

; 2155 : 
; 2156 :     return 0;

  00a42	33 c0		 xor	 eax, eax
$LN1@scsimount_:
$LN47@scsimount_:

; 2157 : }

  00a44	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00a4c	48 33 cc	 xor	 rcx, rsp
  00a4f	e8 00 00 00 00	 call	 __security_check_cookie
  00a54	48 81 c4 38 03
	00 00		 add	 rsp, 824		; 00000338H
  00a5b	c3		 ret	 0
scsimount_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
gen_parms$ = 32
dev$ = 80
try_scsi_refresh PROC

; 1963 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1964 :     // PROGRAMMING NOTE: we can only ever cause the auto-scsi-mount
; 1965 :     // thread to startup or shutdown [according to the current user
; 1966 :     // setting] if the current drive status is "not mounted".
; 1967 : 
; 1968 :     // What we unfortunately CANNOT do (indeed MUST NOT do!) however
; 1969 :     // is actually "force" a refresh of a current [presumably bogus]
; 1970 :     // "mounted" status (to presumably detect that a tape that was
; 1971 :     // once mounted has now been manually unmounted for example).
; 1972 : 
; 1973 :     // The reasons for why this is not possible is clearly explained
; 1974 :     // in the 'update_status_scsitape' function in 'scsitape.c'.
; 1975 : 
; 1976 :     // If the user manually unloaded a mounted tape (such that there
; 1977 :     // is now no longer a tape mounted even though the drive status
; 1978 :     // says there is), then they unfortunately have no choice but to
; 1979 :     // manually issue the 'devinit' command themselves, because, as
; 1980 :     // explained, we unfortunately cannot refresh a mounted status
; 1981 :     // for them (due to the inherent danger of doing so as explained
; 1982 :     // by comments in 'update_status_scsitape' in member scsitape.c).
; 1983 : 
; 1984 :     GENTMH_PARMS  gen_parms;
; 1985 : 
; 1986 :     gen_parms.action  = GENTMH_SCSI_ACTION_UPDATE_STATUS;

  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR gen_parms$[rsp], 0

; 1987 :     gen_parms.dev     = dev;

  00011	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  00016	48 89 44 24 28	 mov	 QWORD PTR gen_parms$[rsp+8], rax
$LN4@try_scsi_r:

; 1988 : 
; 1989 :     VERIFY( dev->tmh->generic( &gen_parms ) == 0 ); // (maybe update status)

  0001b	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  00020	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00027	48 8d 4c 24 20	 lea	 rcx, QWORD PTR gen_parms$[rsp]
  0002c	ff 10		 call	 QWORD PTR [rax]
  0002e	85 c0		 test	 eax, eax
  00030	74 5c		 je	 SHORT $LN8@try_scsi_r
$LN7@try_scsi_r:
  00032	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG206157
  00039	41 b8 c5 07 00
	00		 mov	 r8d, 1989		; 000007c5H
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206158
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206159
  0004d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00059	85 c0		 test	 eax, eax
  0005b	74 20		 je	 SHORT $LN9@try_scsi_r
  0005d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG206161
  00064	41 b8 c5 07 00
	00		 mov	 r8d, 1989		; 000007c5H
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206162
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206163
  00078	e8 00 00 00 00	 call	 DebuggerTrace
$LN9@try_scsi_r:
  0007d	33 c0		 xor	 eax, eax
  0007f	85 c0		 test	 eax, eax
  00081	75 af		 jne	 SHORT $LN7@try_scsi_r
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00089	85 c0		 test	 eax, eax
  0008b	74 01		 je	 SHORT $LN10@try_scsi_r
  0008d	cc		 int	 3
$LN10@try_scsi_r:
$LN8@try_scsi_r:
  0008e	33 c0		 xor	 eax, eax
  00090	85 c0		 test	 eax, eax
  00092	75 87		 jne	 SHORT $LN4@try_scsi_r

; 1990 :     usleep( 10 * 1000 );                            // (let thread start/end)

  00094	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00099	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_usleep

; 1991 : }

  0009f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a3	c3		 ret	 0
try_scsi_refresh ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
pCurrTAMDIR$1 = 80
rc$ = 88
pTAMDIR$2 = 96
pTAMDIR$3 = 104
tv158 = 112
tv226 = 116
tv623 = 120
tamdir$4 = 128
pPrevTAMDIR$5 = 136
def$6 = 144
argv2$7 = 152
tv317 = 160
tv322 = 168
argv2$8 = 176
$T9 = 184
tv634 = 192
tv77 = 200
tv130 = 208
tv190 = 216
tv205 = 224
tv236 = 232
tv411 = 240
tv489 = 248
tv504 = 256
tv726 = 264
tamdir2$10 = 272
buf$11 = 544
buf$12 = 584
tamdir1$13 = 624
buf$14 = 896
tamdir$15 = 976
workdir$16 = 1248
pathname$ = 1520
__$ArrayPad$ = 1792
argc$ = 1824
argv$ = 1832
cmdline$ = 1840
automount_cmd PROC

; 1618 : {

$LN107:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 81 ec 10 07
	00 00		 sub	 rsp, 1808		; 00000710H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 00
	07 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@automount_:

; 1619 : char pathname[MAX_PATH];
; 1620 : int rc;
; 1621 : 
; 1622 :     UNREFERENCED(cmdline);

  00028	33 c0		 xor	 eax, eax
  0002a	85 c0		 test	 eax, eax
  0002c	75 fa		 jne	 SHORT $LN4@automount_
$LN7@automount_:

; 1623 : 
; 1624 :     UPPER_ARGV_0( argv );

  0002e	48 83 bc 24 28
	07 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00037	74 47		 je	 SHORT $LN34@automount_
  00039	b8 08 00 00 00	 mov	 eax, 8
  0003e	48 6b c0 00	 imul	 rax, rax, 0
  00042	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0004a	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0004f	74 2f		 je	 SHORT $LN34@automount_
  00051	b8 08 00 00 00	 mov	 eax, 8
  00056	48 6b c0 00	 imul	 rax, rax, 0
  0005a	b9 08 00 00 00	 mov	 ecx, 8
  0005f	48 6b c9 00	 imul	 rcx, rcx, 0
  00063	48 8b 94 24 28
	07 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006b	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0006f	48 8b 84 24 28
	07 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00077	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0007b	e8 00 00 00 00	 call	 strupper
$LN34@automount_:
  00080	33 c0		 xor	 eax, eax
  00082	85 c0		 test	 eax, eax
  00084	75 a8		 jne	 SHORT $LN7@automount_

; 1625 : 
; 1626 :     if (argc < 2)

  00086	83 bc 24 20 07
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0008e	7d 7b		 jge	 SHORT $LN35@automount_

; 1627 :     {
; 1628 :         WRMSG(HHC02202, "E", argv[0] );

  00090	b8 08 00 00 00	 mov	 eax, 8
  00095	48 6b c0 00	 imul	 rax, rax, 0
  00099	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv77[rsp], rax
  000a1	b9 01 00 00 00	 mov	 ecx, 1
  000a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000ac	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000b4	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR tv77[rsp]
  000bc	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000c0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205962
  000cc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205963
  000d8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000dd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e2	41 b9 03 00 00
	00		 mov	 r9d, 3
  000e8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205964
  000ef	ba 5c 06 00 00	 mov	 edx, 1628		; 0000065cH
  000f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205965
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1629 :         return -1;

  00101	b8 ff ff ff ff	 mov	 eax, -1
  00106	e9 10 14 00 00	 jmp	 $LN1@automount_
$LN35@automount_:

; 1630 :     }
; 1631 : 
; 1632 :     check_define_default_automount_dir();

  0010b	e8 00 00 00 00	 call	 check_define_default_automount_dir

; 1633 : 
; 1634 :     if ( CMD(argv[1],list,4) )

  00110	b8 08 00 00 00	 mov	 eax, 8
  00115	48 6b c0 01	 imul	 rax, rax, 1
  00119	41 b8 04 00 00
	00		 mov	 r8d, 4
  0011f	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00127	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205967
  00132	e8 00 00 00 00	 call	 strcaseabbrev
  00137	85 c0		 test	 eax, eax
  00139	0f 84 8e 01 00
	00		 je	 $LN36@automount_

; 1635 :     {
; 1636 :         TAMDIR* pTAMDIR = sysblk.tamdir;

  0013f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00146	48 8b 80 80 12
	00 00		 mov	 rax, QWORD PTR [rax+4736]
  0014d	48 89 44 24 68	 mov	 QWORD PTR pTAMDIR$3[rsp], rax

; 1637 : 
; 1638 :         if (argc != 2)

  00152	83 bc 24 20 07
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0015a	74 7b		 je	 SHORT $LN37@automount_

; 1639 :         {
; 1640 :             WRMSG(HHC02202, "E", argv[0] );

  0015c	b8 08 00 00 00	 mov	 eax, 8
  00161	48 6b c0 00	 imul	 rax, rax, 0
  00165	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv130[rsp], rax
  0016d	b9 01 00 00 00	 mov	 ecx, 1
  00172	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00178	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00180	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR tv130[rsp]
  00188	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0018c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00191	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205969
  00198	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0019d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205970
  001a4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001a9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ae	41 b9 03 00 00
	00		 mov	 r9d, 3
  001b4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205971
  001bb	ba 68 06 00 00	 mov	 edx, 1640		; 00000668H
  001c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205972
  001c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1641 :             return -1;

  001cd	b8 ff ff ff ff	 mov	 eax, -1
  001d2	e9 44 13 00 00	 jmp	 $LN1@automount_
$LN37@automount_:

; 1642 :         }
; 1643 : 
; 1644 :         if (!pTAMDIR)

  001d7	48 83 7c 24 68
	00		 cmp	 QWORD PTR pTAMDIR$3[rsp], 0
  001dd	75 51		 jne	 SHORT $LN38@automount_

; 1645 :         {
; 1646 :             WRMSG(HHC02216, "E");

  001df	b9 01 00 00 00	 mov	 ecx, 1
  001e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205974
  001f1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205975
  001fd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00202	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00207	41 b9 03 00 00
	00		 mov	 r9d, 3
  0020d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205976
  00214	ba 6e 06 00 00	 mov	 edx, 1646		; 0000066eH
  00219	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205977
  00220	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1647 :             return -1;

  00226	b8 ff ff ff ff	 mov	 eax, -1
  0022b	e9 eb 12 00 00	 jmp	 $LN1@automount_
$LN38@automount_:

; 1648 :         }
; 1649 : 
; 1650 :         // List all entries...
; 1651 : 
; 1652 :         for (; pTAMDIR; pTAMDIR = pTAMDIR->next)

  00230	eb 0d		 jmp	 SHORT $LN10@automount_
$LN8@automount_:
  00232	48 8b 44 24 68	 mov	 rax, QWORD PTR pTAMDIR$3[rsp]
  00237	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0023a	48 89 44 24 68	 mov	 QWORD PTR pTAMDIR$3[rsp], rax
$LN10@automount_:
  0023f	48 83 7c 24 68
	00		 cmp	 QWORD PTR pTAMDIR$3[rsp], 0
  00245	74 7f		 je	 SHORT $LN9@automount_

; 1653 :             WRMSG(HHC02217, "I"

  00247	48 8b 44 24 68	 mov	 rax, QWORD PTR pTAMDIR$3[rsp]
  0024c	83 78 14 00	 cmp	 DWORD PTR [rax+20], 0
  00250	74 0a		 je	 SHORT $LN94@automount_
  00252	c7 44 24 70 2d
	00 00 00	 mov	 DWORD PTR tv158[rsp], 45 ; 0000002dH
  0025a	eb 08		 jmp	 SHORT $LN95@automount_
$LN94@automount_:
  0025c	c7 44 24 70 2b
	00 00 00	 mov	 DWORD PTR tv158[rsp], 43 ; 0000002bH
$LN95@automount_:
  00264	b9 01 00 00 00	 mov	 ecx, 1
  00269	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0026f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pTAMDIR$3[rsp]
  00274	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00278	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0027d	8b 4c 24 70	 mov	 ecx, DWORD PTR tv158[rsp]
  00281	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00285	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205978
  0028c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00291	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205979
  00298	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0029d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002a2	41 b9 03 00 00
	00		 mov	 r9d, 3
  002a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205980
  002af	ba 78 06 00 00	 mov	 edx, 1656		; 00000678H
  002b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205981
  002bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  002c1	e9 6c ff ff ff	 jmp	 $LN8@automount_
$LN9@automount_:

; 1654 :                 ,pTAMDIR->rej ? '-' : '+'
; 1655 :                 ,pTAMDIR->dir
; 1656 :                 );
; 1657 :         return 0;

  002c6	33 c0		 xor	 eax, eax
  002c8	e9 4e 12 00 00	 jmp	 $LN1@automount_
$LN36@automount_:

; 1658 :     }
; 1659 : 
; 1660 :     if ( CMD(argv[1],add,3) || *argv[1] == '+' )

  002cd	b8 08 00 00 00	 mov	 eax, 8
  002d2	48 6b c0 01	 imul	 rax, rax, 1
  002d6	41 b8 03 00 00
	00		 mov	 r8d, 3
  002dc	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002e4	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  002e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205984
  002ef	e8 00 00 00 00	 call	 strcaseabbrev
  002f4	85 c0		 test	 eax, eax
  002f6	75 21		 jne	 SHORT $LN40@automount_
  002f8	b8 08 00 00 00	 mov	 eax, 8
  002fd	48 6b c0 01	 imul	 rax, rax, 1
  00301	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00309	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0030d	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00310	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  00313	0f 85 79 07 00
	00		 jne	 $LN39@automount_
$LN40@automount_:

; 1661 :     {
; 1662 :         char *argv2;
; 1663 :         char tamdir[MAX_PATH+1]; /* +1 for optional '+' or '-' prefix */
; 1664 :         TAMDIR* pTAMDIR = NULL;

  00319	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR pTAMDIR$2[rsp], 0

; 1665 : //      int was_empty = (sysblk.tamdir == NULL);
; 1666 : 
; 1667 :         if ( *argv[1] == '+' )

  00322	b8 08 00 00 00	 mov	 eax, 8
  00327	48 6b c0 01	 imul	 rax, rax, 1
  0032b	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00333	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00337	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0033a	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  0033d	0f 85 aa 00 00
	00		 jne	 $LN41@automount_

; 1668 :         {
; 1669 :             argv2 = argv[1] + 1;

  00343	b8 08 00 00 00	 mov	 eax, 8
  00348	48 6b c0 01	 imul	 rax, rax, 1
  0034c	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00354	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00358	48 ff c0	 inc	 rax
  0035b	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR argv2$7[rsp], rax

; 1670 : 
; 1671 :             if (argc != 2 )

  00363	83 bc 24 20 07
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0036b	74 7b		 je	 SHORT $LN43@automount_

; 1672 :             {
; 1673 :                 WRMSG(HHC02202, "E", argv[0] );

  0036d	b8 08 00 00 00	 mov	 eax, 8
  00372	48 6b c0 00	 imul	 rax, rax, 0
  00376	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv190[rsp], rax
  0037e	b9 01 00 00 00	 mov	 ecx, 1
  00383	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00389	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00391	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR tv190[rsp]
  00399	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0039d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205988
  003a9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205989
  003b5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003ba	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003bf	41 b9 03 00 00
	00		 mov	 r9d, 3
  003c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205990
  003cc	ba 89 06 00 00	 mov	 edx, 1673		; 00000689H
  003d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205991
  003d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1674 :                 return -1;

  003de	b8 ff ff ff ff	 mov	 eax, -1
  003e3	e9 33 11 00 00	 jmp	 $LN1@automount_
$LN43@automount_:

; 1675 :             }
; 1676 :         }

  003e8	e9 a2 00 00 00	 jmp	 $LN42@automount_
$LN41@automount_:

; 1677 :         else
; 1678 :         {
; 1679 :             argv2 = argv[2];

  003ed	b8 08 00 00 00	 mov	 eax, 8
  003f2	48 6b c0 02	 imul	 rax, rax, 2
  003f6	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003fe	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00402	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR argv2$7[rsp], rax

; 1680 : 
; 1681 :             if (argc != 3 )

  0040a	83 bc 24 20 07
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00412	74 7b		 je	 SHORT $LN44@automount_

; 1682 :             {
; 1683 :                 WRMSG(HHC02202, "E", argv[0] );

  00414	b8 08 00 00 00	 mov	 eax, 8
  00419	48 6b c0 00	 imul	 rax, rax, 0
  0041d	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv205[rsp], rax
  00425	b9 01 00 00 00	 mov	 ecx, 1
  0042a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00430	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00438	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR tv205[rsp]
  00440	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00444	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00449	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205993
  00450	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00455	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205994
  0045c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00461	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00466	41 b9 03 00 00
	00		 mov	 r9d, 3
  0046c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205995
  00473	ba 93 06 00 00	 mov	 edx, 1683		; 00000693H
  00478	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205996
  0047f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1684 :                 return -1;

  00485	b8 ff ff ff ff	 mov	 eax, -1
  0048a	e9 8c 10 00 00	 jmp	 $LN1@automount_
$LN44@automount_:
$LN42@automount_:

; 1685 :             }
; 1686 :         }
; 1687 : 
; 1688 : 
; 1689 :         // Add the requested entry...
; 1690 : 
; 1691 :         hostpath(pathname, argv2, MAX_PATH);

  0048f	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00495	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR argv2$7[rsp]
  0049d	48 8d 8c 24 f0
	05 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  004a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 1692 :         strlcpy (tamdir, pathname, MAX_PATH);

  004ab	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  004b1	48 8d 94 24 f0
	05 00 00	 lea	 rdx, QWORD PTR pathname$[rsp]
  004b9	48 8d 8c 24 d0
	03 00 00	 lea	 rcx, QWORD PTR tamdir$15[rsp]
  004c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 1693 : 
; 1694 :         rc = add_tamdir( tamdir, &pTAMDIR );

  004c7	48 8d 54 24 60	 lea	 rdx, QWORD PTR pTAMDIR$2[rsp]
  004cc	48 8d 8c 24 d0
	03 00 00	 lea	 rcx, QWORD PTR tamdir$15[rsp]
  004d4	e8 00 00 00 00	 call	 add_tamdir
  004d9	89 44 24 58	 mov	 DWORD PTR rc$[rsp], eax

; 1695 : 
; 1696 :         // Did that work?
; 1697 : 
; 1698 :         switch (rc)

  004dd	8b 44 24 58	 mov	 eax, DWORD PTR rc$[rsp]
  004e1	89 44 24 74	 mov	 DWORD PTR tv226[rsp], eax
  004e5	83 7c 24 74 05	 cmp	 DWORD PTR tv226[rsp], 5
  004ea	77 18		 ja	 SHORT $LN45@automount_
  004ec	48 63 44 24 74	 movsxd	 rax, DWORD PTR tv226[rsp]
  004f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  004f8	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN106@automount_[rcx+rax*4]
  004ff	48 03 c1	 add	 rax, rcx
  00502	ff e0		 jmp	 rax
$LN45@automount_:

; 1699 :         {
; 1700 :             default:     /* (oops!) */
; 1701 :             {
; 1702 :                 WRMSG(HHC02218, "E");

  00504	b9 01 00 00 00	 mov	 ecx, 1
  00509	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0050f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205998
  00516	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0051b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205999
  00522	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00527	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0052c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00532	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206000
  00539	ba a6 06 00 00	 mov	 edx, 1702		; 000006a6H
  0053e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206001
  00545	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1703 :                 return -1;

  0054b	b8 ff ff ff ff	 mov	 eax, -1
  00550	e9 c6 0f 00 00	 jmp	 $LN1@automount_
$LN46@automount_:

; 1704 :             }
; 1705 : 
; 1706 :             case 5:     /* ("out of memory") */
; 1707 :             {
; 1708 :                 WRMSG(HHC02219, "E", "malloc()", strerror(ENOMEM));

  00555	b9 0c 00 00 00	 mov	 ecx, 12
  0055a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00560	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv236[rsp], rax
  00568	b9 01 00 00 00	 mov	 ecx, 1
  0056d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00573	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR tv236[rsp]
  0057b	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00580	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206003
  00587	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0058c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206004
  00593	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00598	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206005
  0059f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005a4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005a9	41 b9 03 00 00
	00		 mov	 r9d, 3
  005af	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206006
  005b6	ba ac 06 00 00	 mov	 edx, 1708		; 000006acH
  005bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206007
  005c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1709 :                 return -1;

  005c8	b8 ff ff ff ff	 mov	 eax, -1
  005cd	e9 49 0f 00 00	 jmp	 $LN1@automount_
$LN47@automount_:
$LN48@automount_:

; 1710 :             }
; 1711 : 
; 1712 :             case 1:     /* ("unresolvable path") */
; 1713 :             case 2:     /* ("path inaccessible") */
; 1714 :             {
; 1715 :                 WRMSG(HHC02205, "E", tamdir, "");

  005d2	b9 01 00 00 00	 mov	 ecx, 1
  005d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206010
  005e4	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  005e9	48 8d 8c 24 d0
	03 00 00	 lea	 rcx, QWORD PTR tamdir$15[rsp]
  005f1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206011
  005fd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00602	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206012
  00609	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0060e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00613	41 b9 03 00 00
	00		 mov	 r9d, 3
  00619	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206013
  00620	ba b3 06 00 00	 mov	 edx, 1715		; 000006b3H
  00625	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206014
  0062c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1716 :                 return -1;

  00632	b8 ff ff ff ff	 mov	 eax, -1
  00637	e9 df 0e 00 00	 jmp	 $LN1@automount_
$LN49@automount_:

; 1717 :             }
; 1718 : 
; 1719 :             case 3:     /* ("conflict w/previous") */
; 1720 :             {
; 1721 :                 WRMSG(HHC02205, "E", tamdir, ": 'conflicts with previous specification'");

  0063c	b9 01 00 00 00	 mov	 ecx, 1
  00641	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00647	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206016
  0064e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00653	48 8d 8c 24 d0
	03 00 00	 lea	 rcx, QWORD PTR tamdir$15[rsp]
  0065b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00660	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206017
  00667	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0066c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206018
  00673	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00678	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0067d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00683	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206019
  0068a	ba b9 06 00 00	 mov	 edx, 1721		; 000006b9H
  0068f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206020
  00696	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1722 :                 return -1;

  0069c	b8 ff ff ff ff	 mov	 eax, -1
  006a1	e9 75 0e 00 00	 jmp	 $LN1@automount_
$LN50@automount_:

; 1723 :             }
; 1724 : 
; 1725 :             case 4:     /* ("duplicates previous") */
; 1726 :             {
; 1727 :                 WRMSG(HHC02205, "E", tamdir, ": 'duplicates previous specification'");

  006a6	b9 01 00 00 00	 mov	 ecx, 1
  006ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206022
  006b8	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  006bd	48 8d 8c 24 d0
	03 00 00	 lea	 rcx, QWORD PTR tamdir$15[rsp]
  006c5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206023
  006d1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206024
  006dd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006e2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006e7	41 b9 03 00 00
	00		 mov	 r9d, 3
  006ed	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206025
  006f4	ba bf 06 00 00	 mov	 edx, 1727		; 000006bfH
  006f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206026
  00700	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1728 :                 return -1;

  00706	b8 ff ff ff ff	 mov	 eax, -1
  0070b	e9 0b 0e 00 00	 jmp	 $LN1@automount_
$LN51@automount_:

; 1729 :             }
; 1730 : 
; 1731 :             case 0:     /* ("success") */
; 1732 :             {
; 1733 :                 char buf[80];
; 1734 :                 MSGBUF( buf, "%s%s automount directory", pTAMDIR->dir == sysblk.defdir ? "default " : "",

  00710	48 8b 44 24 60	 mov	 rax, QWORD PTR pTAMDIR$2[rsp]
  00715	83 78 14 00	 cmp	 DWORD PTR [rax+20], 0
  00719	74 11		 je	 SHORT $LN96@automount_
  0071b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206028
  00722	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv317[rsp], rax
  0072a	eb 0f		 jmp	 SHORT $LN97@automount_
$LN96@automount_:
  0072c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206029
  00733	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv317[rsp], rax
$LN97@automount_:
  0073b	48 8b 44 24 60	 mov	 rax, QWORD PTR pTAMDIR$2[rsp]
  00740	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00747	48 8b 89 88 12
	00 00		 mov	 rcx, QWORD PTR [rcx+4744]
  0074e	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  00752	75 11		 jne	 SHORT $LN98@automount_
  00754	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206030
  0075b	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv322[rsp], rax
  00763	eb 0f		 jmp	 SHORT $LN99@automount_
$LN98@automount_:
  00765	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206031
  0076c	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv322[rsp], rax
$LN99@automount_:
  00774	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tv317[rsp]
  0077c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00781	4c 8b 8c 24 a8
	00 00 00	 mov	 r9, QWORD PTR tv322[rsp]
  00789	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206032
  00790	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  00795	48 8d 8c 24 80
	03 00 00	 lea	 rcx, QWORD PTR buf$14[rsp]
  0079d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1735 :                     pTAMDIR->rej ? "disallowed" : "allowed");
; 1736 :                 WRMSG(HHC02203, "I", buf, pTAMDIR->dir);

  007a3	b9 01 00 00 00	 mov	 ecx, 1
  007a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007ae	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pTAMDIR$2[rsp]
  007b3	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  007b7	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  007bc	48 8d 8c 24 80
	03 00 00	 lea	 rcx, QWORD PTR buf$14[rsp]
  007c4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  007c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206033
  007d0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206034
  007dc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007e1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007e6	41 b9 03 00 00
	00		 mov	 r9d, 3
  007ec	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206035
  007f3	ba c8 06 00 00	 mov	 edx, 1736		; 000006c8H
  007f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206036
  007ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1737 : 
; 1738 :                 /* Define default AUTOMOUNT directory if needed */
; 1739 : 
; 1740 :                 if (sysblk.defdir == NULL)

  00805	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0080c	48 83 b8 88 12
	00 00 00	 cmp	 QWORD PTR [rax+4744], 0
  00814	0f 85 71 02 00
	00		 jne	 $LN52@automount_
$LN15@automount_:

; 1741 :                 {
; 1742 :                     static char cwd[ MAX_PATH ];
; 1743 : 
; 1744 :                     VERIFY( getcwd( cwd, sizeof(cwd) ) != NULL );

  0081a	ba 04 01 00 00	 mov	 edx, 260		; 00000104H
  0081f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?cwd@?BG@??automount_cmd@@9@9
  00826	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getcwd
  0082c	48 85 c0	 test	 rax, rax
  0082f	75 5c		 jne	 SHORT $LN53@automount_
$LN18@automount_:
  00831	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG206039
  00838	41 b8 d0 06 00
	00		 mov	 r8d, 1744		; 000006d0H
  0083e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206040
  00845	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206041
  0084c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00852	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00858	85 c0		 test	 eax, eax
  0085a	74 20		 je	 SHORT $LN54@automount_
  0085c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG206043
  00863	41 b8 d0 06 00
	00		 mov	 r8d, 1744		; 000006d0H
  00869	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206044
  00870	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206045
  00877	e8 00 00 00 00	 call	 DebuggerTrace
$LN54@automount_:
  0087c	33 c0		 xor	 eax, eax
  0087e	85 c0		 test	 eax, eax
  00880	75 af		 jne	 SHORT $LN18@automount_
  00882	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00888	85 c0		 test	 eax, eax
  0088a	74 01		 je	 SHORT $LN55@automount_
  0088c	cc		 int	 3
$LN55@automount_:
$LN53@automount_:
  0088d	33 c0		 xor	 eax, eax
  0088f	85 c0		 test	 eax, eax
  00891	75 87		 jne	 SHORT $LN15@automount_

; 1745 :                     rc = (int)strlen( cwd );

  00893	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?cwd@?BG@??automount_cmd@@9@9
  0089a	e8 00 00 00 00	 call	 strlen
  0089f	89 44 24 58	 mov	 DWORD PTR rc$[rsp], eax

; 1746 :                     if (cwd[rc-1] != *PATH_SEP)

  008a3	8b 44 24 58	 mov	 eax, DWORD PTR rc$[rsp]
  008a7	ff c8		 dec	 eax
  008a9	48 98		 cdqe
  008ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?cwd@?BG@??automount_cmd@@9@9
  008b2	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  008b6	b9 01 00 00 00	 mov	 ecx, 1
  008bb	48 6b c9 00	 imul	 rcx, rcx, 0
  008bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206048
  008c6	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  008ca	3b c1		 cmp	 eax, ecx
  008cc	74 1a		 je	 SHORT $LN56@automount_

; 1747 :                         STRLCAT( cwd, PATH_SEP );

  008ce	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  008d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206049
  008db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?cwd@?BG@??automount_cmd@@9@9
  008e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN56@automount_:

; 1748 : 
; 1749 :                     if (!(pTAMDIR = malloc( sizeof(TAMDIR) )))

  008e8	b9 18 00 00 00	 mov	 ecx, 24
  008ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  008f3	48 89 44 24 60	 mov	 QWORD PTR pTAMDIR$2[rsp], rax
  008f8	48 83 7c 24 60
	00		 cmp	 QWORD PTR pTAMDIR$2[rsp], 0
  008fe	0f 85 ab 00 00
	00		 jne	 $LN57@automount_

; 1750 :                     {
; 1751 :                         char buf[40];
; 1752 :                         MSGBUF( buf, "malloc(%d)", (int)sizeof(TAMDIR));

  00904	41 b9 18 00 00
	00		 mov	 r9d, 24
  0090a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206052
  00911	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00916	48 8d 8c 24 20
	02 00 00	 lea	 rcx, QWORD PTR buf$11[rsp]
  0091e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1753 :                         WRMSG(HHC02219, "E", buf, strerror(ENOMEM));

  00924	b9 0c 00 00 00	 mov	 ecx, 12
  00929	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0092f	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv411[rsp], rax
  00937	b9 01 00 00 00	 mov	 ecx, 1
  0093c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00942	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv411[rsp]
  0094a	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0094f	48 8d 8c 24 20
	02 00 00	 lea	 rcx, QWORD PTR buf$11[rsp]
  00957	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0095c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206053
  00963	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00968	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206054
  0096f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00974	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00979	41 b9 03 00 00
	00		 mov	 r9d, 3
  0097f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206055
  00986	ba d9 06 00 00	 mov	 edx, 1753		; 000006d9H
  0098b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206056
  00992	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1754 :                         sysblk.defdir = cwd; /* EMERGENCY! */

  00998	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0099f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?cwd@?BG@??automount_cmd@@9@9
  009a6	48 89 88 88 12
	00 00		 mov	 QWORD PTR [rax+4744], rcx

; 1755 :                     }

  009ad	eb 76		 jmp	 SHORT $LN58@automount_
$LN57@automount_:

; 1756 :                     else
; 1757 :                     {
; 1758 :                         pTAMDIR->dir = strdup (cwd);

  009af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?cwd@?BG@??automount_cmd@@9@9
  009b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  009bc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pTAMDIR$2[rsp]
  009c1	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 1759 :                         pTAMDIR->len = (int)strlen (cwd);

  009c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?cwd@?BG@??automount_cmd@@9@9
  009cc	e8 00 00 00 00	 call	 strlen
  009d1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pTAMDIR$2[rsp]
  009d6	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 1760 :                         pTAMDIR->rej = 0;

  009d9	48 8b 44 24 60	 mov	 rax, QWORD PTR pTAMDIR$2[rsp]
  009de	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [rax+20], 0

; 1761 :                         pTAMDIR->next = sysblk.tamdir;

  009e5	48 8b 44 24 60	 mov	 rax, QWORD PTR pTAMDIR$2[rsp]
  009ea	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  009f1	48 8b 89 80 12
	00 00		 mov	 rcx, QWORD PTR [rcx+4736]
  009f8	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1762 :                         sysblk.tamdir = pTAMDIR;

  009fb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00a02	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pTAMDIR$2[rsp]
  00a07	48 89 88 80 12
	00 00		 mov	 QWORD PTR [rax+4736], rcx

; 1763 :                         sysblk.defdir = pTAMDIR->dir;

  00a0e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00a15	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pTAMDIR$2[rsp]
  00a1a	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00a1e	48 89 88 88 12
	00 00		 mov	 QWORD PTR [rax+4744], rcx
$LN58@automount_:

; 1764 :                     }
; 1765 : 
; 1766 :                     WRMSG(HHC02203, "I", "default automount directory", sysblk.defdir);

  00a25	b9 01 00 00 00	 mov	 ecx, 1
  00a2a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a30	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00a37	48 8b 89 88 12
	00 00		 mov	 rcx, QWORD PTR [rcx+4744]
  00a3e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00a43	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206057
  00a4a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a4f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206058
  00a56	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a5b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206059
  00a62	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a67	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a6c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a72	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206060
  00a79	ba e6 06 00 00	 mov	 edx, 1766		; 000006e6H
  00a7e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206061
  00a85	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN52@automount_:

; 1767 :                 }
; 1768 : 
; 1769 :                 return 0;

  00a8b	33 c0		 xor	 eax, eax
  00a8d	e9 89 0a 00 00	 jmp	 $LN1@automount_
$LN39@automount_:

; 1770 :             }
; 1771 :         }
; 1772 :     }
; 1773 : 
; 1774 :     if ( CMD(argv[1],del,3) || *argv[1] == '-')

  00a92	b8 08 00 00 00	 mov	 eax, 8
  00a97	48 6b c0 01	 imul	 rax, rax, 1
  00a9b	41 b8 03 00 00
	00		 mov	 r8d, 3
  00aa1	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00aa9	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00aad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206064
  00ab4	e8 00 00 00 00	 call	 strcaseabbrev
  00ab9	85 c0		 test	 eax, eax
  00abb	75 21		 jne	 SHORT $LN60@automount_
  00abd	b8 08 00 00 00	 mov	 eax, 8
  00ac2	48 6b c0 01	 imul	 rax, rax, 1
  00ac6	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00ace	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00ad2	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00ad5	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00ad8	0f 85 f4 09 00
	00		 jne	 $LN59@automount_
$LN60@automount_:

; 1775 :     {
; 1776 :         char *argv2;
; 1777 :         char tamdir1[MAX_PATH+1] = {0};     // (resolved path)

  00ade	48 8d 84 24 70
	02 00 00	 lea	 rax, QWORD PTR tamdir1$13[rsp]
  00ae6	48 8b f8	 mov	 rdi, rax
  00ae9	33 c0		 xor	 eax, eax
  00aeb	b9 05 01 00 00	 mov	 ecx, 261		; 00000105H
  00af0	f3 aa		 rep stosb

; 1778 :         char tamdir2[MAX_PATH+1] = {0};     // (expanded but unresolved path)

  00af2	48 8d 84 24 10
	01 00 00	 lea	 rax, QWORD PTR tamdir2$10[rsp]
  00afa	48 8b f8	 mov	 rdi, rax
  00afd	33 c0		 xor	 eax, eax
  00aff	b9 05 01 00 00	 mov	 ecx, 261		; 00000105H
  00b04	f3 aa		 rep stosb

; 1779 :         char workdir[MAX_PATH+1] = {0};     // (work)

  00b06	48 8d 84 24 e0
	04 00 00	 lea	 rax, QWORD PTR workdir$16[rsp]
  00b0e	48 8b f8	 mov	 rdi, rax
  00b11	33 c0		 xor	 eax, eax
  00b13	b9 05 01 00 00	 mov	 ecx, 261		; 00000105H
  00b18	f3 aa		 rep stosb

; 1780 :         char *tamdir = tamdir1;             // (-> tamdir2 on retry)

  00b1a	48 8d 84 24 70
	02 00 00	 lea	 rax, QWORD PTR tamdir1$13[rsp]
  00b22	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tamdir$4[rsp], rax

; 1781 : 
; 1782 :         TAMDIR* pPrevTAMDIR = NULL;

  00b2a	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR pPrevTAMDIR$5[rsp], 0

; 1783 :         TAMDIR* pCurrTAMDIR = sysblk.tamdir;

  00b36	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00b3d	48 8b 80 80 12
	00 00		 mov	 rax, QWORD PTR [rax+4736]
  00b44	48 89 44 24 50	 mov	 QWORD PTR pCurrTAMDIR$1[rsp], rax

; 1784 : 
; 1785 : //      int was_empty = (sysblk.tamdir == NULL);
; 1786 : 
; 1787 :         if ( *argv[1] == '-' )

  00b49	b8 08 00 00 00	 mov	 eax, 8
  00b4e	48 6b c0 01	 imul	 rax, rax, 1
  00b52	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00b5a	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00b5e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00b61	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00b64	0f 85 aa 00 00
	00		 jne	 $LN61@automount_

; 1788 :         {
; 1789 :             argv2 = argv[1] + 1;

  00b6a	b8 08 00 00 00	 mov	 eax, 8
  00b6f	48 6b c0 01	 imul	 rax, rax, 1
  00b73	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00b7b	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00b7f	48 ff c0	 inc	 rax
  00b82	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR argv2$8[rsp], rax

; 1790 : 
; 1791 :             if (argc != 2 )

  00b8a	83 bc 24 20 07
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00b92	74 7b		 je	 SHORT $LN63@automount_

; 1792 :             {
; 1793 :                 WRMSG(HHC02202, "E", argv[0] );

  00b94	b8 08 00 00 00	 mov	 eax, 8
  00b99	48 6b c0 00	 imul	 rax, rax, 0
  00b9d	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv489[rsp], rax
  00ba5	b9 01 00 00 00	 mov	 ecx, 1
  00baa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00bb0	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00bb8	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR tv489[rsp]
  00bc0	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00bc4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00bc9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206068
  00bd0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00bd5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206069
  00bdc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00be1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00be6	41 b9 03 00 00
	00		 mov	 r9d, 3
  00bec	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206070
  00bf3	ba 01 07 00 00	 mov	 edx, 1793		; 00000701H
  00bf8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206071
  00bff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1794 :                 return -1;

  00c05	b8 ff ff ff ff	 mov	 eax, -1
  00c0a	e9 0c 09 00 00	 jmp	 $LN1@automount_
$LN63@automount_:

; 1795 :             }
; 1796 :         }

  00c0f	e9 a2 00 00 00	 jmp	 $LN62@automount_
$LN61@automount_:

; 1797 :         else
; 1798 :         {
; 1799 :             argv2 = argv[2];

  00c14	b8 08 00 00 00	 mov	 eax, 8
  00c19	48 6b c0 02	 imul	 rax, rax, 2
  00c1d	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00c25	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00c29	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR argv2$8[rsp], rax

; 1800 : 
; 1801 :             if (argc != 3 )

  00c31	83 bc 24 20 07
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00c39	74 7b		 je	 SHORT $LN64@automount_

; 1802 :             {
; 1803 :                 WRMSG(HHC02202, "E", argv[0] );

  00c3b	b8 08 00 00 00	 mov	 eax, 8
  00c40	48 6b c0 00	 imul	 rax, rax, 0
  00c44	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv504[rsp], rax
  00c4c	b9 01 00 00 00	 mov	 ecx, 1
  00c51	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c57	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00c5f	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR tv504[rsp]
  00c67	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00c6b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00c70	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206073
  00c77	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c7c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206074
  00c83	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c88	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c8d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c93	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206075
  00c9a	ba 0b 07 00 00	 mov	 edx, 1803		; 0000070bH
  00c9f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206076
  00ca6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1804 :                 return -1;

  00cac	b8 ff ff ff ff	 mov	 eax, -1
  00cb1	e9 65 08 00 00	 jmp	 $LN1@automount_
$LN64@automount_:
$LN62@automount_:

; 1805 :             }
; 1806 :         }
; 1807 : 
; 1808 :         // Convert argument to absolute path ending with a slash
; 1809 : 
; 1810 :         STRLCPY( tamdir2, argv2 );

  00cb6	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00cbc	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR argv2$8[rsp]
  00cc4	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR tamdir2$10[rsp]
  00ccc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 1811 :         if      (tamdir2[0] == '-') memmove (&tamdir2[0], &tamdir2[1], MAX_PATH);

  00cd2	b8 01 00 00 00	 mov	 eax, 1
  00cd7	48 6b c0 00	 imul	 rax, rax, 0
  00cdb	0f be 84 04 10
	01 00 00	 movsx	 eax, BYTE PTR tamdir2$10[rsp+rax]
  00ce3	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00ce6	75 32		 jne	 SHORT $LN65@automount_
  00ce8	b8 01 00 00 00	 mov	 eax, 1
  00ced	48 6b c0 01	 imul	 rax, rax, 1
  00cf1	48 8d 84 04 10
	01 00 00	 lea	 rax, QWORD PTR tamdir2$10[rsp+rax]
  00cf9	b9 01 00 00 00	 mov	 ecx, 1
  00cfe	48 6b c9 00	 imul	 rcx, rcx, 0
  00d02	48 8d 8c 0c 10
	01 00 00	 lea	 rcx, QWORD PTR tamdir2$10[rsp+rcx]
  00d0a	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00d10	48 8b d0	 mov	 rdx, rax
  00d13	e8 00 00 00 00	 call	 memmove
  00d18	eb 46		 jmp	 SHORT $LN66@automount_
$LN65@automount_:

; 1812 :         else if (tamdir2[0] == '+') memmove (&tamdir2[0], &tamdir2[1], MAX_PATH);

  00d1a	b8 01 00 00 00	 mov	 eax, 1
  00d1f	48 6b c0 00	 imul	 rax, rax, 0
  00d23	0f be 84 04 10
	01 00 00	 movsx	 eax, BYTE PTR tamdir2$10[rsp+rax]
  00d2b	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  00d2e	75 30		 jne	 SHORT $LN67@automount_
  00d30	b8 01 00 00 00	 mov	 eax, 1
  00d35	48 6b c0 01	 imul	 rax, rax, 1
  00d39	48 8d 84 04 10
	01 00 00	 lea	 rax, QWORD PTR tamdir2$10[rsp+rax]
  00d41	b9 01 00 00 00	 mov	 ecx, 1
  00d46	48 6b c9 00	 imul	 rcx, rcx, 0
  00d4a	48 8d 8c 0c 10
	01 00 00	 lea	 rcx, QWORD PTR tamdir2$10[rsp+rcx]
  00d52	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00d58	48 8b d0	 mov	 rdx, rax
  00d5b	e8 00 00 00 00	 call	 memmove
$LN67@automount_:
$LN66@automount_:

; 1813 : 
; 1814 : #if defined( _MSVC_ )
; 1815 :         // (expand any embedded %var% environment variables)
; 1816 :         rc = expand_environ_vars( tamdir2, workdir, MAX_PATH );

  00d60	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00d66	48 8d 94 24 e0
	04 00 00	 lea	 rdx, QWORD PTR workdir$16[rsp]
  00d6e	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR tamdir2$10[rsp]
  00d76	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_expand_environ_vars
  00d7c	89 44 24 58	 mov	 DWORD PTR rc$[rsp], eax

; 1817 :         if (rc == 0)

  00d80	83 7c 24 58 00	 cmp	 DWORD PTR rc$[rsp], 0
  00d85	75 1c		 jne	 SHORT $LN68@automount_

; 1818 :             strlcpy (tamdir2, workdir, MAX_PATH);

  00d87	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00d8d	48 8d 94 24 e0
	04 00 00	 lea	 rdx, QWORD PTR workdir$16[rsp]
  00d95	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR tamdir2$10[rsp]
  00d9d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
$LN68@automount_:

; 1819 : #endif
; 1820 : 
; 1821 :         if (sysblk.defdir == NULL
; 1822 : #if defined( _MSVC_ )
; 1823 :             || tamdir2[1] == ':'    // (fullpath given?)
; 1824 : #else
; 1825 :             || tamdir2[0] == '/'    // (fullpath given?)
; 1826 : #endif
; 1827 :             || tamdir2[0] == '.'    // (relative path given?)

  00da3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00daa	48 83 b8 88 12
	00 00 00	 cmp	 QWORD PTR [rax+4744], 0
  00db2	74 2c		 je	 SHORT $LN71@automount_
  00db4	b8 01 00 00 00	 mov	 eax, 1
  00db9	48 6b c0 01	 imul	 rax, rax, 1
  00dbd	0f be 84 04 10
	01 00 00	 movsx	 eax, BYTE PTR tamdir2$10[rsp+rax]
  00dc5	83 f8 3a	 cmp	 eax, 58			; 0000003aH
  00dc8	74 16		 je	 SHORT $LN71@automount_
  00dca	b8 01 00 00 00	 mov	 eax, 1
  00dcf	48 6b c0 00	 imul	 rax, rax, 0
  00dd3	0f be 84 04 10
	01 00 00	 movsx	 eax, BYTE PTR tamdir2$10[rsp+rax]
  00ddb	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00dde	75 38		 jne	 SHORT $LN69@automount_
$LN71@automount_:

; 1828 :         )
; 1829 :             tamdir1[0] = 0;         // (then use just given spec)

  00de0	b8 01 00 00 00	 mov	 eax, 1
  00de5	48 6b c0 00	 imul	 rax, rax, 0
  00de9	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR $T9[rsp], rax
  00df1	48 81 bc 24 b8
	00 00 00 05 01
	00 00		 cmp	 QWORD PTR $T9[rsp], 261	; 00000105H
  00dfd	73 02		 jae	 SHORT $LN100@automount_
  00dff	eb 05		 jmp	 SHORT $LN101@automount_
$LN100@automount_:
  00e01	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN101@automount_:
  00e06	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR $T9[rsp]
  00e0e	c6 84 04 70 02
	00 00 00	 mov	 BYTE PTR tamdir1$13[rsp+rax], 0
  00e16	eb 22		 jmp	 SHORT $LN70@automount_
$LN69@automount_:

; 1830 :         else                        // (else prepend with default)
; 1831 :             STRLCPY( tamdir1, sysblk.defdir );

  00e18	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00e1e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00e25	48 8b 90 88 12
	00 00		 mov	 rdx, QWORD PTR [rax+4744]
  00e2c	48 8d 8c 24 70
	02 00 00	 lea	 rcx, QWORD PTR tamdir1$13[rsp]
  00e34	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
$LN70@automount_:

; 1832 : 
; 1833 :         // (finish building path to be resolved)
; 1834 :         STRLCAT( tamdir1, tamdir2 );

  00e3a	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00e40	48 8d 94 24 10
	01 00 00	 lea	 rdx, QWORD PTR tamdir2$10[rsp]
  00e48	48 8d 8c 24 70
	02 00 00	 lea	 rcx, QWORD PTR tamdir1$13[rsp]
  00e50	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 1835 : 
; 1836 :         // (try resolving it to an absolute path and
; 1837 :         //  append trailing path separator if needed)
; 1838 : 
; 1839 :         if (realpath(tamdir1, workdir) != NULL)

  00e56	48 8d 94 24 e0
	04 00 00	 lea	 rdx, QWORD PTR workdir$16[rsp]
  00e5e	48 8d 8c 24 70
	02 00 00	 lea	 rcx, QWORD PTR tamdir1$13[rsp]
  00e66	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realpath
  00e6c	48 85 c0	 test	 rax, rax
  00e6f	0f 84 82 00 00
	00		 je	 $LN72@automount_

; 1840 :         {
; 1841 :             strlcpy (tamdir1, workdir, MAX_PATH);

  00e75	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00e7b	48 8d 94 24 e0
	04 00 00	 lea	 rdx, QWORD PTR workdir$16[rsp]
  00e83	48 8d 8c 24 70
	02 00 00	 lea	 rcx, QWORD PTR tamdir1$13[rsp]
  00e8b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 1842 :             rc = (int)strlen( tamdir1 );

  00e91	48 8d 8c 24 70
	02 00 00	 lea	 rcx, QWORD PTR tamdir1$13[rsp]
  00e99	e8 00 00 00 00	 call	 strlen
  00e9e	89 44 24 58	 mov	 DWORD PTR rc$[rsp], eax

; 1843 :             if (tamdir1[rc-1] != *PATH_SEP)

  00ea2	8b 44 24 58	 mov	 eax, DWORD PTR rc$[rsp]
  00ea6	ff c8		 dec	 eax
  00ea8	48 98		 cdqe
  00eaa	0f be 84 04 70
	02 00 00	 movsx	 eax, BYTE PTR tamdir1$13[rsp+rax]
  00eb2	b9 01 00 00 00	 mov	 ecx, 1
  00eb7	48 6b c9 00	 imul	 rcx, rcx, 0
  00ebb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206087
  00ec2	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  00ec6	3b c1		 cmp	 eax, ecx
  00ec8	74 1b		 je	 SHORT $LN74@automount_

; 1844 :                 strlcat (tamdir1, PATH_SEP, MAX_PATH);

  00eca	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00ed0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206088
  00ed7	48 8d 8c 24 70
	02 00 00	 lea	 rcx, QWORD PTR tamdir1$13[rsp]
  00edf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN74@automount_:

; 1845 :             tamdir = tamdir1;   // (try tamdir1 first)

  00ee5	48 8d 84 24 70
	02 00 00	 lea	 rax, QWORD PTR tamdir1$13[rsp]
  00eed	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tamdir$4[rsp], rax

; 1846 :         }

  00ef5	eb 10		 jmp	 SHORT $LN73@automount_
$LN72@automount_:

; 1847 :         else
; 1848 :             tamdir = tamdir2;   // (try only tamdir2)

  00ef7	48 8d 84 24 10
	01 00 00	 lea	 rax, QWORD PTR tamdir2$10[rsp]
  00eff	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tamdir$4[rsp], rax
$LN73@automount_:

; 1849 : 
; 1850 :         rc = (int)strlen( tamdir2 );

  00f07	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR tamdir2$10[rsp]
  00f0f	e8 00 00 00 00	 call	 strlen
  00f14	89 44 24 58	 mov	 DWORD PTR rc$[rsp], eax

; 1851 :         if (tamdir2[rc-1] != *PATH_SEP)

  00f18	8b 44 24 58	 mov	 eax, DWORD PTR rc$[rsp]
  00f1c	ff c8		 dec	 eax
  00f1e	48 98		 cdqe
  00f20	0f be 84 04 10
	01 00 00	 movsx	 eax, BYTE PTR tamdir2$10[rsp+rax]
  00f28	b9 01 00 00 00	 mov	 ecx, 1
  00f2d	48 6b c9 00	 imul	 rcx, rcx, 0
  00f31	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206090
  00f38	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  00f3c	3b c1		 cmp	 eax, ecx
  00f3e	74 1b		 je	 SHORT $LN75@automount_

; 1852 :             strlcat (tamdir2, PATH_SEP, MAX_PATH);

  00f40	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00f46	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206091
  00f4d	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR tamdir2$10[rsp]
  00f55	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN75@automount_:

; 1853 : 
; 1854 :         hostpath(pathname, tamdir2, MAX_PATH);

  00f5b	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00f61	48 8d 94 24 10
	01 00 00	 lea	 rdx, QWORD PTR tamdir2$10[rsp]
  00f69	48 8d 8c 24 f0
	05 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  00f71	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 1855 :         strlcpy (tamdir2, pathname, MAX_PATH);

  00f77	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00f7d	48 8d 94 24 f0
	05 00 00	 lea	 rdx, QWORD PTR pathname$[rsp]
  00f85	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR tamdir2$10[rsp]
  00f8d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
$LN19@automount_:

; 1856 : 
; 1857 :         // Find entry to be deleted...
; 1858 : 
; 1859 :         for (;;)
; 1860 :         {
; 1861 :             for (pCurrTAMDIR = sysblk.tamdir, pPrevTAMDIR = NULL;

  00f93	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00f9a	48 8b 80 80 12
	00 00		 mov	 rax, QWORD PTR [rax+4736]
  00fa1	48 89 44 24 50	 mov	 QWORD PTR pCurrTAMDIR$1[rsp], rax
  00fa6	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR pPrevTAMDIR$5[rsp], 0
  00fb2	eb 1a		 jmp	 SHORT $LN24@automount_
$LN22@automount_:

; 1863 :                 pPrevTAMDIR = pCurrTAMDIR, pCurrTAMDIR = pCurrTAMDIR->next)

  00fb4	48 8b 44 24 50	 mov	 rax, QWORD PTR pCurrTAMDIR$1[rsp]
  00fb9	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR pPrevTAMDIR$5[rsp], rax
  00fc1	48 8b 44 24 50	 mov	 rax, QWORD PTR pCurrTAMDIR$1[rsp]
  00fc6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00fc9	48 89 44 24 50	 mov	 QWORD PTR pCurrTAMDIR$1[rsp], rax
$LN24@automount_:

; 1862 :                 pCurrTAMDIR;

  00fce	48 83 7c 24 50
	00		 cmp	 QWORD PTR pCurrTAMDIR$1[rsp], 0
  00fd4	0f 84 27 04 00
	00		 je	 $LN23@automount_

; 1864 :             {
; 1865 :                 if (strfilenamecmp( pCurrTAMDIR->dir, tamdir ) == 0)

  00fda	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tamdir$4[rsp]
  00fe2	48 8b 44 24 50	 mov	 rax, QWORD PTR pCurrTAMDIR$1[rsp]
  00fe7	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00feb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00ff1	85 c0		 test	 eax, eax
  00ff3	0f 85 03 04 00
	00		 jne	 $LN76@automount_

; 1866 :                 {
; 1867 :                     int def = (sysblk.defdir == pCurrTAMDIR->dir);

  00ff9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01000	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pCurrTAMDIR$1[rsp]
  01005	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  01009	48 39 88 88 12
	00 00		 cmp	 QWORD PTR [rax+4744], rcx
  01010	75 0a		 jne	 SHORT $LN102@automount_
  01012	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR tv623[rsp], 1
  0101a	eb 08		 jmp	 SHORT $LN103@automount_
$LN102@automount_:
  0101c	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv623[rsp], 0
$LN103@automount_:
  01024	8b 44 24 78	 mov	 eax, DWORD PTR tv623[rsp]
  01028	89 84 24 90 00
	00 00		 mov	 DWORD PTR def$6[rsp], eax

; 1868 : 
; 1869 :                     // Delete the found entry...
; 1870 : 
; 1871 :                     if (pPrevTAMDIR)

  0102f	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR pPrevTAMDIR$5[rsp], 0
  01038	74 15		 je	 SHORT $LN77@automount_

; 1872 :                         pPrevTAMDIR->next = pCurrTAMDIR->next;

  0103a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pPrevTAMDIR$5[rsp]
  01042	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pCurrTAMDIR$1[rsp]
  01047	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0104a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0104d	eb 16		 jmp	 SHORT $LN78@automount_
$LN77@automount_:

; 1873 :                     else
; 1874 :                         sysblk.tamdir = pCurrTAMDIR->next;

  0104f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01056	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pCurrTAMDIR$1[rsp]
  0105b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0105e	48 89 88 80 12
	00 00		 mov	 QWORD PTR [rax+4736], rcx
$LN78@automount_:

; 1875 : 
; 1876 :                     free( pCurrTAMDIR->dir );

  01065	48 8b 44 24 50	 mov	 rax, QWORD PTR pCurrTAMDIR$1[rsp]
  0106a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0106e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1877 :                     free( pCurrTAMDIR );

  01074	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pCurrTAMDIR$1[rsp]
  01079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1878 : 
; 1879 :                     // (point back to list begin)
; 1880 :                     pCurrTAMDIR = sysblk.tamdir;

  0107f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01086	48 8b 80 80 12
	00 00		 mov	 rax, QWORD PTR [rax+4736]
  0108d	48 89 44 24 50	 mov	 QWORD PTR pCurrTAMDIR$1[rsp], rax

; 1881 : 
; 1882 :                     WRMSG(HHC02220, "I", pCurrTAMDIR ? "" : ", list now empty");

  01092	48 83 7c 24 50
	00		 cmp	 QWORD PTR pCurrTAMDIR$1[rsp], 0
  01098	74 11		 je	 SHORT $LN104@automount_
  0109a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206095
  010a1	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv634[rsp], rax
  010a9	eb 0f		 jmp	 SHORT $LN105@automount_
$LN104@automount_:
  010ab	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG206096
  010b2	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv634[rsp], rax
$LN105@automount_:
  010ba	b9 01 00 00 00	 mov	 ecx, 1
  010bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  010c5	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv634[rsp]
  010cd	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  010d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206097
  010d9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  010de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206098
  010e5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  010ea	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  010ef	41 b9 03 00 00
	00		 mov	 r9d, 3
  010f5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206099
  010fc	ba 5a 07 00 00	 mov	 edx, 1882		; 0000075aH
  01101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206100
  01108	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1883 : 
; 1884 :                     // Default entry just deleted?
; 1885 : 
; 1886 :                     if (def)

  0110e	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR def$6[rsp], 0
  01116	0f 84 d9 02 00
	00		 je	 $LN79@automount_

; 1887 :                     {
; 1888 :                         if (!pCurrTAMDIR)

  0111c	48 83 7c 24 50
	00		 cmp	 QWORD PTR pCurrTAMDIR$1[rsp], 0
  01122	75 17		 jne	 SHORT $LN80@automount_

; 1889 :                             sysblk.defdir = NULL;  // (no default)

  01124	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0112b	48 c7 80 88 12
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4744], 0
  01136	e9 ba 02 00 00	 jmp	 $LN81@automount_
$LN80@automount_:

; 1890 :                         else
; 1891 :                         {
; 1892 :                             // Set new default entry...
; 1893 : 
; 1894 :                             for (; pCurrTAMDIR; pCurrTAMDIR = pCurrTAMDIR->next)

  0113b	eb 0d		 jmp	 SHORT $LN27@automount_
$LN25@automount_:
  0113d	48 8b 44 24 50	 mov	 rax, QWORD PTR pCurrTAMDIR$1[rsp]
  01142	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01145	48 89 44 24 50	 mov	 QWORD PTR pCurrTAMDIR$1[rsp], rax
$LN27@automount_:
  0114a	48 83 7c 24 50
	00		 cmp	 QWORD PTR pCurrTAMDIR$1[rsp], 0
  01150	74 26		 je	 SHORT $LN26@automount_

; 1895 :                             {
; 1896 :                                 if (pCurrTAMDIR->rej == 0)

  01152	48 8b 44 24 50	 mov	 rax, QWORD PTR pCurrTAMDIR$1[rsp]
  01157	83 78 14 00	 cmp	 DWORD PTR [rax+20], 0
  0115b	75 19		 jne	 SHORT $LN82@automount_

; 1897 :                                 {
; 1898 :                                     sysblk.defdir = pCurrTAMDIR->dir;

  0115d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01164	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pCurrTAMDIR$1[rsp]
  01169	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0116d	48 89 88 88 12
	00 00		 mov	 QWORD PTR [rax+4744], rcx

; 1899 :                                     break;

  01174	eb 02		 jmp	 SHORT $LN26@automount_
$LN82@automount_:

; 1900 :                                 }
; 1901 :                             }

  01176	eb c5		 jmp	 SHORT $LN25@automount_
$LN26@automount_:

; 1902 : 
; 1903 :                             // If we couldn't find an existing allowable
; 1904 :                             // directory entry to use as the new default,
; 1905 :                             // then add the current directory and use it.
; 1906 : 
; 1907 :                             if (!pCurrTAMDIR)

  01178	48 83 7c 24 50
	00		 cmp	 QWORD PTR pCurrTAMDIR$1[rsp], 0
  0117e	0f 85 0b 02 00
	00		 jne	 $LN83@automount_
$LN30@automount_:

; 1908 :                             {
; 1909 :                                 static char cwd[ MAX_PATH ] = {0};
; 1910 : 
; 1911 :                                 VERIFY( getcwd( cwd, sizeof(cwd) ) != NULL );

  01184	ba 04 01 00 00	 mov	 edx, 260		; 00000104H
  01189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?cwd@?CM@??automount_cmd@@9@9
  01190	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getcwd
  01196	48 85 c0	 test	 rax, rax
  01199	75 5c		 jne	 SHORT $LN84@automount_
$LN33@automount_:
  0119b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG206107
  011a2	41 b8 77 07 00
	00		 mov	 r8d, 1911		; 00000777H
  011a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206108
  011af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206109
  011b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  011bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  011c2	85 c0		 test	 eax, eax
  011c4	74 20		 je	 SHORT $LN85@automount_
  011c6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG206111
  011cd	41 b8 77 07 00
	00		 mov	 r8d, 1911		; 00000777H
  011d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206112
  011da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206113
  011e1	e8 00 00 00 00	 call	 DebuggerTrace
$LN85@automount_:
  011e6	33 c0		 xor	 eax, eax
  011e8	85 c0		 test	 eax, eax
  011ea	75 af		 jne	 SHORT $LN33@automount_
  011ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  011f2	85 c0		 test	 eax, eax
  011f4	74 01		 je	 SHORT $LN86@automount_
  011f6	cc		 int	 3
$LN86@automount_:
$LN84@automount_:
  011f7	33 c0		 xor	 eax, eax
  011f9	85 c0		 test	 eax, eax
  011fb	75 87		 jne	 SHORT $LN30@automount_

; 1912 :                                 rc = (int)strlen( cwd );

  011fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?cwd@?CM@??automount_cmd@@9@9
  01204	e8 00 00 00 00	 call	 strlen
  01209	89 44 24 58	 mov	 DWORD PTR rc$[rsp], eax

; 1913 :                                 if (cwd[rc-1] != *PATH_SEP)

  0120d	8b 44 24 58	 mov	 eax, DWORD PTR rc$[rsp]
  01211	ff c8		 dec	 eax
  01213	48 98		 cdqe
  01215	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?cwd@?CM@??automount_cmd@@9@9
  0121c	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  01220	b9 01 00 00 00	 mov	 ecx, 1
  01225	48 6b c9 00	 imul	 rcx, rcx, 0
  01229	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206116
  01230	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  01234	3b c1		 cmp	 eax, ecx
  01236	74 1a		 je	 SHORT $LN87@automount_

; 1914 :                                     STRLCAT( cwd, PATH_SEP );

  01238	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  0123e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG206117
  01245	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?cwd@?CM@??automount_cmd@@9@9
  0124c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN87@automount_:

; 1915 : 
; 1916 :                                 if (!(pCurrTAMDIR = malloc( sizeof(TAMDIR) )))

  01252	b9 18 00 00 00	 mov	 ecx, 24
  01257	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0125d	48 89 44 24 50	 mov	 QWORD PTR pCurrTAMDIR$1[rsp], rax
  01262	48 83 7c 24 50
	00		 cmp	 QWORD PTR pCurrTAMDIR$1[rsp], 0
  01268	0f 85 ab 00 00
	00		 jne	 $LN88@automount_

; 1917 :                                 {
; 1918 :                                     char buf[40];
; 1919 :                                     MSGBUF( buf, "malloc(%d)", (int)sizeof(TAMDIR));

  0126e	41 b9 18 00 00
	00		 mov	 r9d, 24
  01274	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206120
  0127b	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  01280	48 8d 8c 24 48
	02 00 00	 lea	 rcx, QWORD PTR buf$12[rsp]
  01288	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1920 :                                     WRMSG(HHC02219, "E", buf, strerror(ENOMEM));

  0128e	b9 0c 00 00 00	 mov	 ecx, 12
  01293	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  01299	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv726[rsp], rax
  012a1	b9 01 00 00 00	 mov	 ecx, 1
  012a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  012ac	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv726[rsp]
  012b4	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  012b9	48 8d 8c 24 48
	02 00 00	 lea	 rcx, QWORD PTR buf$12[rsp]
  012c1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  012c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206121
  012cd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  012d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206122
  012d9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  012de	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  012e3	41 b9 03 00 00
	00		 mov	 r9d, 3
  012e9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206123
  012f0	ba 80 07 00 00	 mov	 edx, 1920		; 00000780H
  012f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206124
  012fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1921 :                                     sysblk.defdir = cwd; /* EMERGENCY! */

  01302	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01309	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?cwd@?CM@??automount_cmd@@9@9
  01310	48 89 88 88 12
	00 00		 mov	 QWORD PTR [rax+4744], rcx

; 1922 :                                 }

  01317	eb 76		 jmp	 SHORT $LN89@automount_
$LN88@automount_:

; 1923 :                                 else
; 1924 :                                 {
; 1925 :                                     pCurrTAMDIR->dir = strdup (cwd);

  01319	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?cwd@?CM@??automount_cmd@@9@9
  01320	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  01326	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pCurrTAMDIR$1[rsp]
  0132b	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 1926 :                                     pCurrTAMDIR->len = (int)strlen (cwd);

  0132f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?cwd@?CM@??automount_cmd@@9@9
  01336	e8 00 00 00 00	 call	 strlen
  0133b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pCurrTAMDIR$1[rsp]
  01340	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 1927 :                                     pCurrTAMDIR->rej = 0;

  01343	48 8b 44 24 50	 mov	 rax, QWORD PTR pCurrTAMDIR$1[rsp]
  01348	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [rax+20], 0

; 1928 :                                     pCurrTAMDIR->next = sysblk.tamdir;

  0134f	48 8b 44 24 50	 mov	 rax, QWORD PTR pCurrTAMDIR$1[rsp]
  01354	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0135b	48 8b 89 80 12
	00 00		 mov	 rcx, QWORD PTR [rcx+4736]
  01362	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1929 :                                     sysblk.tamdir = pCurrTAMDIR;

  01365	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0136c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pCurrTAMDIR$1[rsp]
  01371	48 89 88 80 12
	00 00		 mov	 QWORD PTR [rax+4736], rcx

; 1930 :                                     sysblk.defdir = pCurrTAMDIR->dir;

  01378	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0137f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pCurrTAMDIR$1[rsp]
  01384	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  01388	48 89 88 88 12
	00 00		 mov	 QWORD PTR [rax+4744], rcx
$LN89@automount_:
$LN83@automount_:

; 1931 :                                 }
; 1932 :                             }
; 1933 : 
; 1934 :                             WRMSG(HHC02203, "I", "default automount directory", sysblk.defdir);

  0138f	b9 01 00 00 00	 mov	 ecx, 1
  01394	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0139a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  013a1	48 8b 89 88 12
	00 00		 mov	 rcx, QWORD PTR [rcx+4744]
  013a8	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  013ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206125
  013b4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  013b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206126
  013c0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  013c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206127
  013cc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  013d1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  013d6	41 b9 03 00 00
	00		 mov	 r9d, 3
  013dc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206128
  013e3	ba 8e 07 00 00	 mov	 edx, 1934		; 0000078eH
  013e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206129
  013ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN81@automount_:
$LN79@automount_:

; 1935 :                         }
; 1936 :                     }
; 1937 : 
; 1938 :                     return 0;   // (success)

  013f5	33 c0		 xor	 eax, eax
  013f7	e9 1f 01 00 00	 jmp	 $LN1@automount_
$LN76@automount_:

; 1939 :                 }
; 1940 :             }

  013fc	e9 b3 fb ff ff	 jmp	 $LN22@automount_
$LN23@automount_:

; 1941 : 
; 1942 :             // (not found; try tamdir2 if we haven't yet)
; 1943 : 
; 1944 :             if (tamdir == tamdir2) break;

  01401	48 8d 84 24 10
	01 00 00	 lea	 rax, QWORD PTR tamdir2$10[rsp]
  01409	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR tamdir$4[rsp], rax
  01411	75 02		 jne	 SHORT $LN90@automount_
  01413	eb 15		 jmp	 SHORT $LN20@automount_
$LN90@automount_:

; 1945 :             tamdir = tamdir2;

  01415	48 8d 84 24 10
	01 00 00	 lea	 rax, QWORD PTR tamdir2$10[rsp]
  0141d	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tamdir$4[rsp], rax

; 1946 :         }

  01425	e9 69 fb ff ff	 jmp	 $LN19@automount_
$LN20@automount_:

; 1947 : 
; 1948 :         if (sysblk.tamdir == NULL)

  0142a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  01431	48 83 b8 80 12
	00 00 00	 cmp	 QWORD PTR [rax+4736], 0
  01439	75 49		 jne	 SHORT $LN91@automount_

; 1949 :             WRMSG(HHC02216, "E");

  0143b	b9 01 00 00 00	 mov	 ecx, 1
  01440	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01446	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206133
  0144d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01452	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206134
  01459	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0145e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01463	41 b9 03 00 00
	00		 mov	 r9d, 3
  01469	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206135
  01470	ba 9d 07 00 00	 mov	 edx, 1949		; 0000079dH
  01475	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206136
  0147c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  01482	eb 47		 jmp	 SHORT $LN92@automount_
$LN91@automount_:

; 1950 :         else
; 1951 :             WRMSG(HHC02221, "E");

  01484	b9 01 00 00 00	 mov	 ecx, 1
  01489	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0148f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206137
  01496	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0149b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206138
  014a2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  014a7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  014ac	41 b9 03 00 00
	00		 mov	 r9d, 3
  014b2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206139
  014b9	ba 9f 07 00 00	 mov	 edx, 1951		; 0000079fH
  014be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206140
  014c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN92@automount_:

; 1952 :         return -1;

  014cb	b8 ff ff ff ff	 mov	 eax, -1
  014d0	eb 49		 jmp	 SHORT $LN1@automount_
$LN59@automount_:

; 1953 :     }
; 1954 : 
; 1955 :     WRMSG(HHC02222, "E");

  014d2	b9 01 00 00 00	 mov	 ecx, 1
  014d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  014dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206141
  014e4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  014e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206142
  014f0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  014f5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  014fa	41 b9 03 00 00
	00		 mov	 r9d, 3
  01500	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG206143
  01507	ba a3 07 00 00	 mov	 edx, 1955		; 000007a3H
  0150c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG206144
  01513	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1956 :     return 0;

  01519	33 c0		 xor	 eax, eax
$LN1@automount_:
$LN93@automount_:

; 1957 : }

  0151b	48 8b 8c 24 00
	07 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  01523	48 33 cc	 xor	 rcx, rsp
  01526	e8 00 00 00 00	 call	 __security_check_cookie
  0152b	48 81 c4 10 07
	00 00		 add	 rsp, 1808		; 00000710H
  01532	5f		 pop	 rdi
  01533	c3		 ret	 0
$LN106@automount_:
  01534	00 00 00 00	 DD	 $LN51@automount_
  01538	00 00 00 00	 DD	 $LN47@automount_
  0153c	00 00 00 00	 DD	 $LN48@automount_
  01540	00 00 00 00	 DD	 $LN49@automount_
  01544	00 00 00 00	 DD	 $LN50@automount_
  01548	00 00 00 00	 DD	 $LN46@automount_
automount_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
rej$ = 32
rc$ = 36
pTAMDIR$1 = 40
dirwrk$ = 48
pathname$ = 320
__$ArrayPad$ = 592
tamdir$ = 624
ppTAMDIR$ = 632
add_tamdir PROC

; 1528 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec 60 02
	00 00		 sub	 rsp, 608		; 00000260H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1529 :     char pathname[MAX_PATH];
; 1530 :     int  rc, rej = 0;

  00024	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR rej$[rsp], 0

; 1531 :     char dirwrk[ MAX_PATH ] = {0};

  0002c	48 8d 44 24 30	 lea	 rax, QWORD PTR dirwrk$[rsp]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 04 01 00 00	 mov	 ecx, 260		; 00000104H
  0003b	f3 aa		 rep stosb

; 1532 : 
; 1533 :     *ppTAMDIR = NULL;

  0003d	48 8b 84 24 78
	02 00 00	 mov	 rax, QWORD PTR ppTAMDIR$[rsp]
  00045	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1534 : 
; 1535 :     if (*tamdir == '-')

  0004c	48 8b 84 24 70
	02 00 00	 mov	 rax, QWORD PTR tamdir$[rsp]
  00054	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00057	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  0005a	75 2b		 jne	 SHORT $LN7@add_tamdir

; 1536 :     {
; 1537 :         rej = 1;

  0005c	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR rej$[rsp], 1

; 1538 :         memmove (tamdir, tamdir+1, MAX_PATH);

  00064	48 8b 84 24 70
	02 00 00	 mov	 rax, QWORD PTR tamdir$[rsp]
  0006c	48 ff c0	 inc	 rax
  0006f	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00075	48 8b d0	 mov	 rdx, rax
  00078	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR tamdir$[rsp]
  00080	e8 00 00 00 00	 call	 memmove

; 1539 :     }

  00085	eb 39		 jmp	 SHORT $LN8@add_tamdir
$LN7@add_tamdir:

; 1540 :     else if (*tamdir == '+')

  00087	48 8b 84 24 70
	02 00 00	 mov	 rax, QWORD PTR tamdir$[rsp]
  0008f	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00092	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  00095	75 29		 jne	 SHORT $LN9@add_tamdir

; 1541 :     {
; 1542 :         rej = 0;

  00097	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR rej$[rsp], 0

; 1543 :         memmove (tamdir, tamdir+1, MAX_PATH);

  0009f	48 8b 84 24 70
	02 00 00	 mov	 rax, QWORD PTR tamdir$[rsp]
  000a7	48 ff c0	 inc	 rax
  000aa	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR tamdir$[rsp]
  000bb	e8 00 00 00 00	 call	 memmove
$LN9@add_tamdir:
$LN8@add_tamdir:

; 1544 :     }
; 1545 : 
; 1546 :     /* Convert tamdir to absolute path ending with a slash */
; 1547 : 
; 1548 : #if defined( _MSVC_ )
; 1549 :     /* (expand any embedded %var% environment variables) */
; 1550 :     rc = expand_environ_vars( tamdir, dirwrk, MAX_PATH );

  000c0	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  000c6	48 8d 54 24 30	 lea	 rdx, QWORD PTR dirwrk$[rsp]
  000cb	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR tamdir$[rsp]
  000d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_expand_environ_vars
  000d9	89 44 24 24	 mov	 DWORD PTR rc$[rsp], eax

; 1551 :     if (rc == 0)

  000dd	83 7c 24 24 00	 cmp	 DWORD PTR rc$[rsp], 0
  000e2	75 19		 jne	 SHORT $LN10@add_tamdir

; 1552 :         strlcpy (tamdir, dirwrk, MAX_PATH);

  000e4	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  000ea	48 8d 54 24 30	 lea	 rdx, QWORD PTR dirwrk$[rsp]
  000ef	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR tamdir$[rsp]
  000f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
$LN10@add_tamdir:

; 1553 : #endif
; 1554 : 
; 1555 :     if (!realpath( tamdir, dirwrk ))

  000fd	48 8d 54 24 30	 lea	 rdx, QWORD PTR dirwrk$[rsp]
  00102	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR tamdir$[rsp]
  0010a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realpath
  00110	48 85 c0	 test	 rax, rax
  00113	75 0a		 jne	 SHORT $LN11@add_tamdir

; 1556 :         return (1); /* ("unresolvable path") */

  00115	b8 01 00 00 00	 mov	 eax, 1
  0011a	e9 86 02 00 00	 jmp	 $LN1@add_tamdir
$LN11@add_tamdir:

; 1557 :     strlcpy (tamdir, dirwrk, MAX_PATH);

  0011f	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00125	48 8d 54 24 30	 lea	 rdx, QWORD PTR dirwrk$[rsp]
  0012a	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR tamdir$[rsp]
  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 1558 : 
; 1559 :     hostpath(pathname, tamdir, MAX_PATH);

  00138	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  0013e	48 8b 94 24 70
	02 00 00	 mov	 rdx, QWORD PTR tamdir$[rsp]
  00146	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  0014e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 1560 :     strlcpy (tamdir, pathname, MAX_PATH);

  00154	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  0015a	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR pathname$[rsp]
  00162	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR tamdir$[rsp]
  0016a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 1561 : 
; 1562 :     /* Verify that the path is valid */
; 1563 :     if (access( tamdir, R_OK | W_OK ) != 0)

  00170	ba 06 00 00 00	 mov	 edx, 6
  00175	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR tamdir$[rsp]
  0017d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_access
  00183	85 c0		 test	 eax, eax
  00185	74 0a		 je	 SHORT $LN12@add_tamdir

; 1564 :         return (2); /* ("path inaccessible") */

  00187	b8 02 00 00 00	 mov	 eax, 2
  0018c	e9 14 02 00 00	 jmp	 $LN1@add_tamdir
$LN12@add_tamdir:

; 1565 : 
; 1566 :     /* Append trailing path separator if needed */
; 1567 :     rc = (int)strlen( tamdir );

  00191	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR tamdir$[rsp]
  00199	e8 00 00 00 00	 call	 strlen
  0019e	89 44 24 24	 mov	 DWORD PTR rc$[rsp], eax

; 1568 :     if (tamdir[rc-1] != *PATH_SEP)

  001a2	8b 44 24 24	 mov	 eax, DWORD PTR rc$[rsp]
  001a6	ff c8		 dec	 eax
  001a8	48 98		 cdqe
  001aa	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR tamdir$[rsp]
  001b2	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  001b6	b9 01 00 00 00	 mov	 ecx, 1
  001bb	48 6b c9 00	 imul	 rcx, rcx, 0
  001bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG205865
  001c6	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  001ca	3b c1		 cmp	 eax, ecx
  001cc	74 1b		 je	 SHORT $LN13@add_tamdir

; 1569 :         strlcat (tamdir, PATH_SEP, MAX_PATH);

  001ce	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  001d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG205866
  001db	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR tamdir$[rsp]
  001e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN13@add_tamdir:

; 1570 : 
; 1571 :     /* Check for duplicate/conflicting specification */
; 1572 :     for (*ppTAMDIR = sysblk.tamdir;

  001e9	48 8b 84 24 78
	02 00 00	 mov	 rax, QWORD PTR ppTAMDIR$[rsp]
  001f1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001f8	48 8b 89 80 12
	00 00		 mov	 rcx, QWORD PTR [rcx+4736]
  001ff	48 89 08	 mov	 QWORD PTR [rax], rcx
  00202	eb 19		 jmp	 SHORT $LN4@add_tamdir
$LN2@add_tamdir:

; 1574 :          *ppTAMDIR = (*ppTAMDIR)->next)

  00204	48 8b 84 24 78
	02 00 00	 mov	 rax, QWORD PTR ppTAMDIR$[rsp]
  0020c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0020f	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR ppTAMDIR$[rsp]
  00217	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0021a	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN4@add_tamdir:

; 1573 :          *ppTAMDIR;

  0021d	48 8b 84 24 78
	02 00 00	 mov	 rax, QWORD PTR ppTAMDIR$[rsp]
  00225	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00229	74 4d		 je	 SHORT $LN3@add_tamdir

; 1575 :     {
; 1576 :         if (strfilenamecmp( tamdir, (*ppTAMDIR)->dir ) == 0)

  0022b	48 8b 84 24 78
	02 00 00	 mov	 rax, QWORD PTR ppTAMDIR$[rsp]
  00233	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00236	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0023a	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR tamdir$[rsp]
  00242	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00248	85 c0		 test	 eax, eax
  0024a	75 2a		 jne	 SHORT $LN14@add_tamdir

; 1577 :         {
; 1578 :             if ((*ppTAMDIR)->rej != rej)

  0024c	48 8b 84 24 78
	02 00 00	 mov	 rax, QWORD PTR ppTAMDIR$[rsp]
  00254	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00257	8b 4c 24 20	 mov	 ecx, DWORD PTR rej$[rsp]
  0025b	39 48 14	 cmp	 DWORD PTR [rax+20], ecx
  0025e	74 0c		 je	 SHORT $LN15@add_tamdir

; 1579 :                 return (3); /* ("conflict w/previous") */

  00260	b8 03 00 00 00	 mov	 eax, 3
  00265	e9 3b 01 00 00	 jmp	 $LN1@add_tamdir
  0026a	eb 0a		 jmp	 SHORT $LN16@add_tamdir
$LN15@add_tamdir:

; 1580 :             else
; 1581 :                 return (4); /* ("duplicates previous") */

  0026c	b8 04 00 00 00	 mov	 eax, 4
  00271	e9 2f 01 00 00	 jmp	 $LN1@add_tamdir
$LN16@add_tamdir:
$LN14@add_tamdir:

; 1582 :         }
; 1583 :     }

  00276	eb 8c		 jmp	 SHORT $LN2@add_tamdir
$LN3@add_tamdir:

; 1584 : 
; 1585 :     /* Allocate new AUTOMOUNT directory entry */
; 1586 :     *ppTAMDIR = malloc( sizeof(TAMDIR) );

  00278	b9 18 00 00 00	 mov	 ecx, 24
  0027d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00283	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR ppTAMDIR$[rsp]
  0028b	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1587 :     if (!*ppTAMDIR)

  0028e	48 8b 84 24 78
	02 00 00	 mov	 rax, QWORD PTR ppTAMDIR$[rsp]
  00296	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0029a	75 0a		 jne	 SHORT $LN17@add_tamdir

; 1588 :         return (5); /* ("out of memory") */

  0029c	b8 05 00 00 00	 mov	 eax, 5
  002a1	e9 ff 00 00 00	 jmp	 $LN1@add_tamdir
$LN17@add_tamdir:

; 1589 : 
; 1590 :     /* Fill in the new entry... */
; 1591 :     (*ppTAMDIR)->dir = strdup (tamdir);

  002a6	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR tamdir$[rsp]
  002ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  002b4	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR ppTAMDIR$[rsp]
  002bc	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  002bf	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 1592 :     (*ppTAMDIR)->len = (int)strlen (tamdir);

  002c3	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR tamdir$[rsp]
  002cb	e8 00 00 00 00	 call	 strlen
  002d0	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR ppTAMDIR$[rsp]
  002d8	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  002db	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 1593 :     (*ppTAMDIR)->rej = rej;

  002de	48 8b 84 24 78
	02 00 00	 mov	 rax, QWORD PTR ppTAMDIR$[rsp]
  002e6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002e9	8b 4c 24 20	 mov	 ecx, DWORD PTR rej$[rsp]
  002ed	89 48 14	 mov	 DWORD PTR [rax+20], ecx

; 1594 :     (*ppTAMDIR)->next = NULL;

  002f0	48 8b 84 24 78
	02 00 00	 mov	 rax, QWORD PTR ppTAMDIR$[rsp]
  002f8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002fb	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1595 : 
; 1596 :     /* Add new entry to end of existing list... */
; 1597 :     if (sysblk.tamdir == NULL)

  00302	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00309	48 83 b8 80 12
	00 00 00	 cmp	 QWORD PTR [rax+4736], 0
  00311	75 1b		 jne	 SHORT $LN18@add_tamdir

; 1598 :         sysblk.tamdir = *ppTAMDIR;

  00313	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0031a	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR ppTAMDIR$[rsp]
  00322	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00325	48 89 88 80 12
	00 00		 mov	 QWORD PTR [rax+4736], rcx
  0032c	eb 40		 jmp	 SHORT $LN19@add_tamdir
$LN18@add_tamdir:

; 1599 :     else
; 1600 :     {
; 1601 :         TAMDIR *pTAMDIR = sysblk.tamdir;

  0032e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00335	48 8b 80 80 12
	00 00		 mov	 rax, QWORD PTR [rax+4736]
  0033c	48 89 44 24 28	 mov	 QWORD PTR pTAMDIR$1[rsp], rax
$LN5@add_tamdir:

; 1602 :         while (pTAMDIR->next)

  00341	48 8b 44 24 28	 mov	 rax, QWORD PTR pTAMDIR$1[rsp]
  00346	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0034a	74 0f		 je	 SHORT $LN6@add_tamdir

; 1603 :             pTAMDIR = pTAMDIR->next;

  0034c	48 8b 44 24 28	 mov	 rax, QWORD PTR pTAMDIR$1[rsp]
  00351	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00354	48 89 44 24 28	 mov	 QWORD PTR pTAMDIR$1[rsp], rax
  00359	eb e6		 jmp	 SHORT $LN5@add_tamdir
$LN6@add_tamdir:

; 1604 :         pTAMDIR->next = *ppTAMDIR;

  0035b	48 8b 44 24 28	 mov	 rax, QWORD PTR pTAMDIR$1[rsp]
  00360	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR ppTAMDIR$[rsp]
  00368	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0036b	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN19@add_tamdir:

; 1605 :     }
; 1606 : 
; 1607 :     /* Use first allowable dir as default */
; 1608 :     if (rej == 0 && sysblk.defdir == NULL)

  0036e	83 7c 24 20 00	 cmp	 DWORD PTR rej$[rsp], 0
  00373	75 2e		 jne	 SHORT $LN20@add_tamdir
  00375	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0037c	48 83 b8 88 12
	00 00 00	 cmp	 QWORD PTR [rax+4744], 0
  00384	75 1d		 jne	 SHORT $LN20@add_tamdir

; 1609 :         sysblk.defdir = (*ppTAMDIR)->dir;

  00386	48 8b 84 24 78
	02 00 00	 mov	 rax, QWORD PTR ppTAMDIR$[rsp]
  0038e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00391	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00398	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0039c	48 89 81 88 12
	00 00		 mov	 QWORD PTR [rcx+4744], rax
$LN20@add_tamdir:

; 1610 : 
; 1611 :     return (0); /* ("success") */

  003a3	33 c0		 xor	 eax, eax
$LN1@add_tamdir:

; 1612 : }

  003a5	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  003ad	48 33 cc	 xor	 rcx, rsp
  003b0	e8 00 00 00 00	 call	 __security_check_cookie
  003b5	48 81 c4 60 02
	00 00		 add	 rsp, 608		; 00000260H
  003bc	5f		 pop	 rdi
  003bd	c3		 ret	 0
add_tamdir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
pNewTAMDIR$1 = 80
tv74 = 88
buf$2 = 96
cwd$3 = 160
__$ArrayPad$ = 432
check_define_default_automount_dir PROC

; 1474 : {

  00000	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  00007	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000e	48 33 c4	 xor	 rax, rsp
  00011	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1475 :     /* Define default AUTOMOUNT directory if needed */
; 1476 :     if (sysblk.tamdir && sysblk.defdir == NULL)

  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00020	48 83 b8 80 12
	00 00 00	 cmp	 QWORD PTR [rax+4736], 0
  00028	0f 84 57 02 00
	00		 je	 $LN8@check_defi
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00035	48 83 b8 88 12
	00 00 00	 cmp	 QWORD PTR [rax+4744], 0
  0003d	0f 85 42 02 00
	00		 jne	 $LN8@check_defi

; 1477 :     {
; 1478 :         char cwd[ MAX_PATH ];
; 1479 :         TAMDIR *pNewTAMDIR = malloc( sizeof(TAMDIR) );

  00043	b9 18 00 00 00	 mov	 ecx, 24
  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0004e	48 89 44 24 50	 mov	 QWORD PTR pNewTAMDIR$1[rsp], rax

; 1480 :         if (!pNewTAMDIR)

  00053	48 83 7c 24 50
	00		 cmp	 QWORD PTR pNewTAMDIR$1[rsp], 0
  00059	0f 85 92 00 00
	00		 jne	 $LN9@check_defi

; 1481 :         {
; 1482 :             char buf[64];
; 1483 :             MSGBUF( buf, "malloc(%d)", (int)sizeof(TAMDIR));

  0005f	41 b9 18 00 00
	00		 mov	 r9d, 24
  00065	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205814
  0006c	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00071	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$2[rsp]
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1484 :             WRMSG(HHC01430, "E", buf, strerror(errno));

  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00082	8b 08		 mov	 ecx, DWORD PTR [rax]
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0008a	48 89 44 24 58	 mov	 QWORD PTR tv74[rsp], rax
  0008f	b9 01 00 00 00	 mov	 ecx, 1
  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv74[rsp]
  0009f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000a4	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$2[rsp]
  000a9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205815
  000b5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205816
  000c1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000cb	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205817
  000d8	ba cc 05 00 00	 mov	 edx, 1484		; 000005ccH
  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205818
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1485 :             return NULL;

  000ea	33 c0		 xor	 eax, eax
  000ec	e9 a2 01 00 00	 jmp	 $LN1@check_defi
$LN9@check_defi:
$LN4@check_defi:

; 1486 :         }
; 1487 :         VERIFY( getcwd( cwd, sizeof(cwd) ) != NULL );

  000f1	ba 04 01 00 00	 mov	 edx, 260		; 00000104H
  000f6	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR cwd$3[rsp]
  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getcwd
  00104	48 85 c0	 test	 rax, rax
  00107	75 5c		 jne	 SHORT $LN10@check_defi
$LN7@check_defi:
  00109	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG205820
  00110	41 b8 cf 05 00
	00		 mov	 r8d, 1487		; 000005cfH
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG205821
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205822
  00124	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0012a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00130	85 c0		 test	 eax, eax
  00132	74 20		 je	 SHORT $LN11@check_defi
  00134	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG205824
  0013b	41 b8 cf 05 00
	00		 mov	 r8d, 1487		; 000005cfH
  00141	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG205825
  00148	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205826
  0014f	e8 00 00 00 00	 call	 DebuggerTrace
$LN11@check_defi:
  00154	33 c0		 xor	 eax, eax
  00156	85 c0		 test	 eax, eax
  00158	75 af		 jne	 SHORT $LN7@check_defi
  0015a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00160	85 c0		 test	 eax, eax
  00162	74 01		 je	 SHORT $LN12@check_defi
  00164	cc		 int	 3
$LN12@check_defi:
$LN10@check_defi:
  00165	33 c0		 xor	 eax, eax
  00167	85 c0		 test	 eax, eax
  00169	75 86		 jne	 SHORT $LN4@check_defi

; 1488 :         if (cwd[strlen(cwd)-1] != *PATH_SEP)

  0016b	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR cwd$3[rsp]
  00173	e8 00 00 00 00	 call	 strlen
  00178	0f be 84 04 9f
	00 00 00	 movsx	 eax, BYTE PTR cwd$3[rsp+rax-1]
  00180	b9 01 00 00 00	 mov	 ecx, 1
  00185	48 6b c9 00	 imul	 rcx, rcx, 0
  00189	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG205829
  00190	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  00194	3b c1		 cmp	 eax, ecx
  00196	74 1b		 je	 SHORT $LN13@check_defi

; 1489 :             STRLCAT( cwd, PATH_SEP );

  00198	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  0019e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG205830
  001a5	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR cwd$3[rsp]
  001ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN13@check_defi:

; 1490 :         pNewTAMDIR->dir = strdup (cwd);

  001b3	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR cwd$3[rsp]
  001bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  001c1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pNewTAMDIR$1[rsp]
  001c6	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 1491 :         pNewTAMDIR->len = (int)strlen (cwd);

  001ca	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR cwd$3[rsp]
  001d2	e8 00 00 00 00	 call	 strlen
  001d7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pNewTAMDIR$1[rsp]
  001dc	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 1492 :         pNewTAMDIR->rej = 0;

  001df	48 8b 44 24 50	 mov	 rax, QWORD PTR pNewTAMDIR$1[rsp]
  001e4	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [rax+20], 0

; 1493 :         pNewTAMDIR->next = sysblk.tamdir;

  001eb	48 8b 44 24 50	 mov	 rax, QWORD PTR pNewTAMDIR$1[rsp]
  001f0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001f7	48 8b 89 80 12
	00 00		 mov	 rcx, QWORD PTR [rcx+4736]
  001fe	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1494 :         sysblk.tamdir = pNewTAMDIR;

  00201	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00208	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pNewTAMDIR$1[rsp]
  0020d	48 89 88 80 12
	00 00		 mov	 QWORD PTR [rax+4736], rcx

; 1495 :         sysblk.defdir = pNewTAMDIR->dir;

  00214	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0021b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pNewTAMDIR$1[rsp]
  00220	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00224	48 89 88 88 12
	00 00		 mov	 QWORD PTR [rax+4744], rcx

; 1496 :         WRMSG(HHC01447, "I", sysblk.defdir);

  0022b	b9 01 00 00 00	 mov	 ecx, 1
  00230	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00236	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0023d	48 8b 89 88 12
	00 00		 mov	 rcx, QWORD PTR [rcx+4744]
  00244	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00249	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205831
  00250	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00255	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205832
  0025c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00261	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00266	41 b9 03 00 00
	00		 mov	 r9d, 3
  0026c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205833
  00273	ba d8 05 00 00	 mov	 edx, 1496		; 000005d8H
  00278	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205834
  0027f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN8@check_defi:

; 1497 :     }
; 1498 : 
; 1499 :     return sysblk.defdir;

  00285	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0028c	48 8b 80 88 12
	00 00		 mov	 rax, QWORD PTR [rax+4744]
$LN1@check_defi:

; 1500 : }

  00293	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0029b	48 33 cc	 xor	 rcx, rsp
  0029e	e8 00 00 00 00	 call	 __security_check_cookie
  002a3	48 81 c4 c8 01
	00 00		 add	 rsp, 456		; 000001c8H
  002aa	c3		 ret	 0
check_define_default_automount_dir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv154 = 80
tv175 = 88
tv156 = 96
tv177 = 104
argc$ = 128
argv$ = 136
cmdline$ = 144
autoinit_cmd PROC

; 1427 : {

$LN25:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 78	 sub	 rsp, 120		; 00000078H
$LN4@autoinit_c:

; 1428 :     UNREFERENCED( cmdline );

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@autoinit_c
$LN7@autoinit_c:

; 1429 : 
; 1430 :     UPPER_ARGV_0( argv );

  00018	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00021	74 47		 je	 SHORT $LN8@autoinit_c
  00023	b8 08 00 00 00	 mov	 eax, 8
  00028	48 6b c0 00	 imul	 rax, rax, 0
  0002c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00034	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00039	74 2f		 je	 SHORT $LN8@autoinit_c
  0003b	b8 08 00 00 00	 mov	 eax, 8
  00040	48 6b c0 00	 imul	 rax, rax, 0
  00044	b9 08 00 00 00	 mov	 ecx, 8
  00049	48 6b c9 00	 imul	 rcx, rcx, 0
  0004d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00055	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00059	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00061	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00065	e8 00 00 00 00	 call	 strupper
$LN8@autoinit_c:
  0006a	33 c0		 xor	 eax, eax
  0006c	85 c0		 test	 eax, eax
  0006e	75 a8		 jne	 SHORT $LN7@autoinit_c

; 1431 : 
; 1432 :     if (argc == 2)

  00070	83 bc 24 80 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00078	0f 85 ec 00 00
	00		 jne	 $LN9@autoinit_c

; 1433 :     {
; 1434 :         /* Set the option to the requested value */
; 1435 :         if      (CMD( argv[1], ON,  2 )) sysblk.auto_tape_create = TRUE;

  0007e	b8 08 00 00 00	 mov	 eax, 8
  00083	48 6b c0 01	 imul	 rax, rax, 1
  00087	41 b8 02 00 00
	00		 mov	 r8d, 2
  0008d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00095	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00099	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205765
  000a0	e8 00 00 00 00	 call	 strcaseabbrev
  000a5	85 c0		 test	 eax, eax
  000a7	74 23		 je	 SHORT $LN11@autoinit_c
  000a9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000b0	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  000b6	0f ba e8 13	 bts	 eax, 19
  000ba	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000c1	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax
  000c7	e9 9c 00 00 00	 jmp	 $LN12@autoinit_c
$LN11@autoinit_c:

; 1436 :         else if (CMD( argv[1], OFF, 3 )) sysblk.auto_tape_create = FALSE;

  000cc	b8 08 00 00 00	 mov	 eax, 8
  000d1	48 6b c0 01	 imul	 rax, rax, 1
  000d5	41 b8 03 00 00
	00		 mov	 r8d, 3
  000db	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000e3	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205768
  000ee	e8 00 00 00 00	 call	 strcaseabbrev
  000f3	85 c0		 test	 eax, eax
  000f5	74 20		 je	 SHORT $LN13@autoinit_c
  000f7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000fe	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00104	0f ba f0 13	 btr	 eax, 19
  00108	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0010f	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax
  00115	eb 51		 jmp	 SHORT $LN14@autoinit_c
$LN13@autoinit_c:

; 1437 :         else
; 1438 :         {
; 1439 :             // "Missing or invalid argument(s)"
; 1440 :             WRMSG( HHC17000, "E" );

  00117	b9 01 00 00 00	 mov	 ecx, 1
  0011c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205769
  00129	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0012e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205770
  00135	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0013a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0013f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00145	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205771
  0014c	ba a0 05 00 00	 mov	 edx, 1440		; 000005a0H
  00151	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205772
  00158	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1441 :             return -1;

  0015e	b8 ff ff ff ff	 mov	 eax, -1
  00163	e9 e2 01 00 00	 jmp	 $LN1@autoinit_c
$LN14@autoinit_c:
$LN12@autoinit_c:

; 1442 :         }
; 1443 :     }

  00168	eb 65		 jmp	 SHORT $LN10@autoinit_c
$LN9@autoinit_c:

; 1444 :     else if (argc < 1 || argc > 2)

  0016a	83 bc 24 80 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00172	7c 0a		 jl	 SHORT $LN16@autoinit_c
  00174	83 bc 24 80 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0017c	7e 51		 jle	 SHORT $LN15@autoinit_c
$LN16@autoinit_c:

; 1445 :     {
; 1446 :         // "Missing or invalid argument(s)"
; 1447 :         WRMSG( HHC17000, "E" );

  0017e	b9 01 00 00 00	 mov	 ecx, 1
  00183	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205775
  00190	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205776
  0019c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001a1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a6	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205777
  001b3	ba a7 05 00 00	 mov	 edx, 1447		; 000005a7H
  001b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205778
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1448 :         return -1;

  001c5	b8 ff ff ff ff	 mov	 eax, -1
  001ca	e9 7b 01 00 00	 jmp	 $LN1@autoinit_c
$LN15@autoinit_c:
$LN10@autoinit_c:

; 1449 :     }
; 1450 : 
; 1451 :     if (argc == 1)

  001cf	83 bc 24 80 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  001d7	0f 85 ab 00 00
	00		 jne	 $LN17@autoinit_c

; 1452 :     {
; 1453 :         /* Display current setting */
; 1454 : 
; 1455 :         // "%-14s: %s"
; 1456 :         WRMSG( HHC02203, "I", argv[0], sysblk.auto_tape_create ? "ON" : "OFF" );

  001dd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001e4	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  001ea	c1 e8 13	 shr	 eax, 19
  001ed	83 e0 01	 and	 eax, 1
  001f0	85 c0		 test	 eax, eax
  001f2	74 0e		 je	 SHORT $LN21@autoinit_c
  001f4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205781
  001fb	48 89 44 24 50	 mov	 QWORD PTR tv154[rsp], rax
  00200	eb 0c		 jmp	 SHORT $LN22@autoinit_c
$LN21@autoinit_c:
  00202	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205782
  00209	48 89 44 24 50	 mov	 QWORD PTR tv154[rsp], rax
$LN22@autoinit_c:
  0020e	b8 08 00 00 00	 mov	 eax, 8
  00213	48 6b c0 00	 imul	 rax, rax, 0
  00217	48 89 44 24 60	 mov	 QWORD PTR tv156[rsp], rax
  0021c	b9 01 00 00 00	 mov	 ecx, 1
  00221	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00227	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv154[rsp]
  0022c	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00231	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00239	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv156[rsp]
  0023e	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00242	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00247	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205783
  0024e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00253	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205784
  0025a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0025f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00264	41 b9 03 00 00
	00		 mov	 r9d, 3
  0026a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205785
  00271	ba b0 05 00 00	 mov	 edx, 1456		; 000005b0H
  00276	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205786
  0027d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1457 :     }

  00283	e9 c0 00 00 00	 jmp	 $LN18@autoinit_c
$LN17@autoinit_c:

; 1458 :     else
; 1459 :     {
; 1460 :         /* Display the setting that was just set */
; 1461 : 
; 1462 :         if (MLVL( VERBOSE ))

  00288	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0028f	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  00295	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0029a	85 c0		 test	 eax, eax
  0029c	0f 84 a6 00 00
	00		 je	 $LN19@autoinit_c

; 1463 :             // "%-14s set to %s"
; 1464 :             WRMSG( HHC02204, "I", argv[0], sysblk.auto_tape_create ? "ON" : "OFF" );

  002a2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002a9	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  002af	c1 e8 13	 shr	 eax, 19
  002b2	83 e0 01	 and	 eax, 1
  002b5	85 c0		 test	 eax, eax
  002b7	74 0e		 je	 SHORT $LN23@autoinit_c
  002b9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205788
  002c0	48 89 44 24 58	 mov	 QWORD PTR tv175[rsp], rax
  002c5	eb 0c		 jmp	 SHORT $LN24@autoinit_c
$LN23@autoinit_c:
  002c7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205789
  002ce	48 89 44 24 58	 mov	 QWORD PTR tv175[rsp], rax
$LN24@autoinit_c:
  002d3	b8 08 00 00 00	 mov	 eax, 8
  002d8	48 6b c0 00	 imul	 rax, rax, 0
  002dc	48 89 44 24 68	 mov	 QWORD PTR tv177[rsp], rax
  002e1	b9 01 00 00 00	 mov	 ecx, 1
  002e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002ec	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv175[rsp]
  002f1	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002f6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002fe	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv177[rsp]
  00303	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00307	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0030c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205790
  00313	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00318	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205791
  0031f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00324	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00329	41 b9 03 00 00
	00		 mov	 r9d, 3
  0032f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205792
  00336	ba b8 05 00 00	 mov	 edx, 1464		; 000005b8H
  0033b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205793
  00342	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN19@autoinit_c:
$LN18@autoinit_c:

; 1465 :     }
; 1466 : 
; 1467 :     return 0;

  00348	33 c0		 xor	 eax, eax
$LN1@autoinit_c:

; 1468 : }

  0034a	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0034e	c3		 ret	 0
autoinit_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
c$1 = 80
iodelay$2 = 84
tv77 = 88
tv132 = 96
tv148 = 104
tv151 = 112
tv169 = 120
msgbuf$3 = 128
__$ArrayPad$ = 136
argc$ = 160
argv$ = 168
cmdline$ = 176
iodelay_cmd PROC

; 1391 : {

$LN18:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iodelay_cm:

; 1392 :     UNREFERENCED(cmdline);

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@iodelay_cm
$LN7@iodelay_cm:

; 1393 : 
; 1394 :     UPPER_ARGV_0( argv );

  0002d	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00036	74 47		 je	 SHORT $LN8@iodelay_cm
  00038	b8 08 00 00 00	 mov	 eax, 8
  0003d	48 6b c0 00	 imul	 rax, rax, 0
  00041	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00049	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0004e	74 2f		 je	 SHORT $LN8@iodelay_cm
  00050	b8 08 00 00 00	 mov	 eax, 8
  00055	48 6b c0 00	 imul	 rax, rax, 0
  00059	b9 08 00 00 00	 mov	 ecx, 8
  0005e	48 6b c9 00	 imul	 rcx, rcx, 0
  00062	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006a	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0006e	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00076	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0007a	e8 00 00 00 00	 call	 strupper
$LN8@iodelay_cm:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 a8		 jne	 SHORT $LN7@iodelay_cm

; 1395 : 
; 1396 :     if ( argc > 2 )

  00085	83 bc 24 a0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0008d	7e 70		 jle	 SHORT $LN9@iodelay_cm

; 1397 :         WRMSG( HHC01455, "E", argv[0] );

  0008f	b8 08 00 00 00	 mov	 eax, 8
  00094	48 6b c0 00	 imul	 rax, rax, 0
  00098	48 89 44 24 58	 mov	 QWORD PTR tv77[rsp], rax
  0009d	b9 01 00 00 00	 mov	 ecx, 1
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a8	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000b0	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv77[rsp]
  000b5	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000b9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205721
  000c5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205722
  000d1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000d6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000db	41 b9 03 00 00
	00		 mov	 r9d, 3
  000e1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205723
  000e8	ba 75 05 00 00	 mov	 edx, 1397		; 00000575H
  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205724
  000f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  000fa	e9 28 02 00 00	 jmp	 $LN10@iodelay_cm
$LN9@iodelay_cm:

; 1398 :     else if ( argc == 2 )

  000ff	83 bc 24 a0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00107	0f 85 7a 01 00
	00		 jne	 $LN11@iodelay_cm

; 1399 :     {
; 1400 :         int     iodelay = 0;

  0010d	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR iodelay$2[rsp], 0

; 1401 :         BYTE    c;                      /* Character work area       */
; 1402 : 
; 1403 :         if (sscanf(argv[1], "%d%c", &iodelay, &c) != 1 || iodelay < 0 )

  00115	b8 08 00 00 00	 mov	 eax, 8
  0011a	48 6b c0 01	 imul	 rax, rax, 1
  0011e	4c 8d 4c 24 50	 lea	 r9, QWORD PTR c$1[rsp]
  00123	4c 8d 44 24 54	 lea	 r8, QWORD PTR iodelay$2[rsp]
  00128	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG205730
  0012f	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00137	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0013b	e8 00 00 00 00	 call	 sscanf
  00140	83 f8 01	 cmp	 eax, 1
  00143	75 07		 jne	 SHORT $LN15@iodelay_cm
  00145	83 7c 24 54 00	 cmp	 DWORD PTR iodelay$2[rsp], 0
  0014a	7d 7c		 jge	 SHORT $LN13@iodelay_cm
$LN15@iodelay_cm:

; 1404 :             WRMSG(HHC02205, "E", argv[1], "" );

  0014c	b8 08 00 00 00	 mov	 eax, 8
  00151	48 6b c0 01	 imul	 rax, rax, 1
  00155	48 89 44 24 60	 mov	 QWORD PTR tv132[rsp], rax
  0015a	b9 01 00 00 00	 mov	 ecx, 1
  0015f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205731
  0016c	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00171	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00179	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv132[rsp]
  0017e	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00182	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00187	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205732
  0018e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00193	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205733
  0019a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0019f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a4	41 b9 03 00 00
	00		 mov	 r9d, 3
  001aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205734
  001b1	ba 7c 05 00 00	 mov	 edx, 1404		; 0000057cH
  001b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205735
  001bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  001c3	e9 ba 00 00 00	 jmp	 $LN14@iodelay_cm
$LN13@iodelay_cm:

; 1405 :         else
; 1406 :         {
; 1407 :             sysblk.iodelay = iodelay;

  001c8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001cf	8b 4c 24 54	 mov	 ecx, DWORD PTR iodelay$2[rsp]
  001d3	89 88 e0 13 00
	00		 mov	 DWORD PTR [rax+5088], ecx

; 1408 :             if ( MLVL(VERBOSE) )

  001d9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001e0	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  001e6	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001eb	85 c0		 test	 eax, eax
  001ed	0f 84 8f 00 00
	00		 je	 $LN16@iodelay_cm

; 1409 :                 WRMSG(HHC02204, "I", argv[0], argv[1] );

  001f3	b8 08 00 00 00	 mov	 eax, 8
  001f8	48 6b c0 01	 imul	 rax, rax, 1
  001fc	48 89 44 24 68	 mov	 QWORD PTR tv148[rsp], rax
  00201	b9 08 00 00 00	 mov	 ecx, 8
  00206	48 6b c9 00	 imul	 rcx, rcx, 0
  0020a	48 89 4c 24 70	 mov	 QWORD PTR tv151[rsp], rcx
  0020f	b9 01 00 00 00	 mov	 ecx, 1
  00214	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0021a	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00222	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv148[rsp]
  00227	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0022b	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00230	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00238	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv151[rsp]
  0023d	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00241	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00246	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205737
  0024d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00252	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205738
  00259	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0025e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00263	41 b9 03 00 00
	00		 mov	 r9d, 3
  00269	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205739
  00270	ba 81 05 00 00	 mov	 edx, 1409		; 00000581H
  00275	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205740
  0027c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN16@iodelay_cm:
$LN14@iodelay_cm:

; 1410 :         }
; 1411 :     }

  00282	e9 a0 00 00 00	 jmp	 $LN12@iodelay_cm
$LN11@iodelay_cm:

; 1412 :     else
; 1413 :     {
; 1414 :         char msgbuf[8];
; 1415 :         MSGBUF( msgbuf, "%d", sysblk.iodelay );

  00287	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0028e	44 8b 88 e0 13
	00 00		 mov	 r9d, DWORD PTR [rax+5088]
  00295	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205741
  0029c	ba 08 00 00 00	 mov	 edx, 8
  002a1	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$3[rsp]
  002a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1416 :         WRMSG(HHC02203, "I", argv[0], msgbuf );

  002af	b8 08 00 00 00	 mov	 eax, 8
  002b4	48 6b c0 00	 imul	 rax, rax, 0
  002b8	48 89 44 24 78	 mov	 QWORD PTR tv169[rsp], rax
  002bd	b9 01 00 00 00	 mov	 ecx, 1
  002c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002c8	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$3[rsp]
  002d0	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002d5	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002dd	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv169[rsp]
  002e2	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  002e6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205742
  002f2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205743
  002fe	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00303	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00308	41 b9 03 00 00
	00		 mov	 r9d, 3
  0030e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205744
  00315	ba 88 05 00 00	 mov	 edx, 1416		; 00000588H
  0031a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205745
  00321	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN12@iodelay_cm:
$LN10@iodelay_cm:

; 1417 :     }
; 1418 : 
; 1419 :     return 0;

  00327	33 c0		 xor	 eax, eax

; 1420 : }

  00329	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00331	48 33 cc	 xor	 rcx, rsp
  00334	e8 00 00 00 00	 call	 __security_check_cookie
  00339	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00340	c3		 ret	 0
iodelay_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv93 = 80
tv135 = 88
tv137 = 96
argc$ = 128
argv$ = 136
cmdline$ = 144
quiet_cmd PROC

; 1367 : {

$LN21:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 78	 sub	 rsp, 120		; 00000078H
$LN4@quiet_cmd:

; 1368 :     UNREFERENCED(cmdline);

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@quiet_cmd
$LN7@quiet_cmd:

; 1369 :     UNREFERENCED(argc);

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN7@quiet_cmd
$LN10@quiet_cmd:

; 1370 :     UNREFERENCED(argv);

  0001e	33 c0		 xor	 eax, eax
  00020	85 c0		 test	 eax, eax
  00022	75 fa		 jne	 SHORT $LN10@quiet_cmd
$LN13@quiet_cmd:

; 1371 : 
; 1372 :     UPPER_ARGV_0( argv );

  00024	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  0002d	74 47		 je	 SHORT $LN14@quiet_cmd
  0002f	b8 08 00 00 00	 mov	 eax, 8
  00034	48 6b c0 00	 imul	 rax, rax, 0
  00038	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00040	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00045	74 2f		 je	 SHORT $LN14@quiet_cmd
  00047	b8 08 00 00 00	 mov	 eax, 8
  0004c	48 6b c0 00	 imul	 rax, rax, 0
  00050	b9 08 00 00 00	 mov	 ecx, 8
  00055	48 6b c9 00	 imul	 rcx, rcx, 0
  00059	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00061	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00065	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0006d	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00071	e8 00 00 00 00	 call	 strupper
$LN14@quiet_cmd:
  00076	33 c0		 xor	 eax, eax
  00078	85 c0		 test	 eax, eax
  0007a	75 a8		 jne	 SHORT $LN13@quiet_cmd

; 1373 : 
; 1374 :     if (extgui)

  0007c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00083	83 38 00	 cmp	 DWORD PTR [rax], 0
  00086	74 4e		 je	 SHORT $LN15@quiet_cmd

; 1375 :     {
; 1376 :         WRMSG(HHC02215, "W");

  00088	b9 01 00 00 00	 mov	 ecx, 1
  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205691
  0009a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205692
  000a6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000ab	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b0	41 b9 03 00 00
	00		 mov	 r9d, 3
  000b6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205693
  000bd	ba 60 05 00 00	 mov	 edx, 1376		; 00000560H
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205694
  000c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1377 :         return 0;

  000cf	33 c0		 xor	 eax, eax
  000d1	e9 fc 00 00 00	 jmp	 $LN1@quiet_cmd
$LN15@quiet_cmd:

; 1378 :     }
; 1379 : 
; 1380 :     sysblk.npquiet = !sysblk.npquiet;

  000d6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000dd	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  000e3	c1 e8 04	 shr	 eax, 4
  000e6	83 e0 01	 and	 eax, 1
  000e9	85 c0		 test	 eax, eax
  000eb	75 0a		 jne	 SHORT $LN17@quiet_cmd
  000ed	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv93[rsp], 1
  000f5	eb 08		 jmp	 SHORT $LN18@quiet_cmd
$LN17@quiet_cmd:
  000f7	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv93[rsp], 0
$LN18@quiet_cmd:
  000ff	8b 44 24 50	 mov	 eax, DWORD PTR tv93[rsp]
  00103	83 e0 01	 and	 eax, 1
  00106	c1 e0 04	 shl	 eax, 4
  00109	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00110	8b 89 94 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4756]
  00116	83 e1 ef	 and	 ecx, -17		; ffffffefH
  00119	0b c8		 or	 ecx, eax
  0011b	8b c1		 mov	 eax, ecx
  0011d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00124	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax

; 1381 :     // "%-14s: %s"
; 1382 :     WRMSG( HHC02203, "I", argv[0], sysblk.npquiet ? "DISABLED" : "ENABLED" );

  0012a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00131	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00137	c1 e8 04	 shr	 eax, 4
  0013a	83 e0 01	 and	 eax, 1
  0013d	85 c0		 test	 eax, eax
  0013f	74 0e		 je	 SHORT $LN19@quiet_cmd
  00141	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205695
  00148	48 89 44 24 58	 mov	 QWORD PTR tv135[rsp], rax
  0014d	eb 0c		 jmp	 SHORT $LN20@quiet_cmd
$LN19@quiet_cmd:
  0014f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205696
  00156	48 89 44 24 58	 mov	 QWORD PTR tv135[rsp], rax
$LN20@quiet_cmd:
  0015b	b8 08 00 00 00	 mov	 eax, 8
  00160	48 6b c0 00	 imul	 rax, rax, 0
  00164	48 89 44 24 60	 mov	 QWORD PTR tv137[rsp], rax
  00169	b9 01 00 00 00	 mov	 ecx, 1
  0016e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00174	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv135[rsp]
  00179	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0017e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00186	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv137[rsp]
  0018b	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0018f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00194	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205697
  0019b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205698
  001a7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ac	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b1	41 b9 03 00 00
	00		 mov	 r9d, 3
  001b7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205699
  001be	ba 66 05 00 00	 mov	 edx, 1382		; 00000566H
  001c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205700
  001ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1383 :     return 0;

  001d0	33 c0		 xor	 eax, eax
$LN1@quiet_cmd:

; 1384 : }

  001d2	48 83 c4 78	 add	 rsp, 120		; 00000078H
  001d6	c3		 ret	 0
quiet_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
devnum$1 = 80
lcss$2 = 84
rc$ = 88
dev$3 = 96
tv138 = 104
tv140 = 108
tv152 = 112
tv154 = 116
devclass$4 = 120
tv165 = 128
argc$ = 160
argv$ = 168
cmdline$ = 176
stop_cmd PROC

; 1309 : {

$LN17:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1310 :     int rc = 0;

  00015	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN4@stop_cmd:

; 1311 : 
; 1312 :     UNREFERENCED(cmdline);

  0001d	33 c0		 xor	 eax, eax
  0001f	85 c0		 test	 eax, eax
  00021	75 fa		 jne	 SHORT $LN4@stop_cmd

; 1313 : 
; 1314 :     if (argc < 2 && !is_diag_instr())

  00023	83 bc 24 a0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0002b	7d 31		 jge	 SHORT $LN5@stop_cmd
  0002d	e8 00 00 00 00	 call	 is_diag_instr
  00032	0f b6 c0	 movzx	 eax, al
  00035	85 c0		 test	 eax, eax
  00037	75 25		 jne	 SHORT $LN5@stop_cmd

; 1315 :     {
; 1316 :         rc = stop_cmd_cpu( argc, argv, cmdline );

  00039	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR cmdline$[rsp]
  00041	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00049	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  00050	e8 00 00 00 00	 call	 stop_cmd_cpu
  00055	89 44 24 58	 mov	 DWORD PTR rc$[rsp], eax

; 1317 :     }

  00059	e9 50 02 00 00	 jmp	 $LN6@stop_cmd
$LN5@stop_cmd:

; 1318 :     else if ( argc == 2 )

  0005e	83 bc 24 a0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00066	0f 85 c9 01 00
	00		 jne	 $LN7@stop_cmd

; 1319 :     {
; 1320 :         /* stop specified printer/punch device */
; 1321 : 
; 1322 :         U16      devnum;
; 1323 :         U16      lcss;
; 1324 :         DEVBLK*  dev;
; 1325 :         char*    devclass;
; 1326 : 
; 1327 :         if ( parse_single_devnum(argv[1],&lcss,&devnum) < 0 )

  0006c	b8 08 00 00 00	 mov	 eax, 8
  00071	48 6b c0 01	 imul	 rax, rax, 1
  00075	4c 8d 44 24 50	 lea	 r8, QWORD PTR devnum$1[rsp]
  0007a	48 8d 54 24 54	 lea	 rdx, QWORD PTR lcss$2[rsp]
  0007f	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00087	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0008b	e8 00 00 00 00	 call	 parse_single_devnum
  00090	85 c0		 test	 eax, eax
  00092	7d 0d		 jge	 SHORT $LN9@stop_cmd

; 1328 :         {
; 1329 :             rc = -1;

  00094	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 1330 :         }

  0009c	e9 92 01 00 00	 jmp	 $LN10@stop_cmd
$LN9@stop_cmd:

; 1331 :         else if (!(dev = find_device_by_devnum (lcss, devnum)))

  000a1	0f b7 54 24 50	 movzx	 edx, WORD PTR devnum$1[rsp]
  000a6	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$2[rsp]
  000ab	e8 00 00 00 00	 call	 find_device_by_devnum
  000b0	48 89 44 24 60	 mov	 QWORD PTR dev$3[rsp], rax
  000b5	48 83 7c 24 60
	00		 cmp	 QWORD PTR dev$3[rsp], 0
  000bb	75 1c		 jne	 SHORT $LN11@stop_cmd

; 1332 :         {
; 1333 :             // HHC02200 "%1d:%04X device not found"
; 1334 :             devnotfound_msg(lcss,devnum);

  000bd	0f b7 54 24 50	 movzx	 edx, WORD PTR devnum$1[rsp]
  000c2	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$2[rsp]
  000c7	e8 00 00 00 00	 call	 devnotfound_msg

; 1335 :             rc = -1;

  000cc	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 1336 :         }

  000d4	e9 5a 01 00 00	 jmp	 $LN12@stop_cmd
$LN11@stop_cmd:

; 1337 :         else
; 1338 :         {
; 1339 :             (dev->hnd->query)(dev, &devclass, 0, NULL);

  000d9	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$3[rsp]
  000de	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  000e5	45 33 c9	 xor	 r9d, r9d
  000e8	45 33 c0	 xor	 r8d, r8d
  000eb	48 8d 54 24 78	 lea	 rdx, QWORD PTR devclass$4[rsp]
  000f0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$3[rsp]
  000f5	ff 50 18	 call	 QWORD PTR [rax+24]

; 1340 : 
; 1341 :             if (CMD(devclass,PRT,3) || CMD(devclass,PCH,3) )

  000f8	41 b8 03 00 00
	00		 mov	 r8d, 3
  000fe	48 8b 54 24 78	 mov	 rdx, QWORD PTR devclass$4[rsp]
  00103	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205654
  0010a	e8 00 00 00 00	 call	 strcaseabbrev
  0010f	85 c0		 test	 eax, eax
  00111	75 1f		 jne	 SHORT $LN15@stop_cmd
  00113	41 b8 03 00 00
	00		 mov	 r8d, 3
  00119	48 8b 54 24 78	 mov	 rdx, QWORD PTR devclass$4[rsp]
  0011e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205655
  00125	e8 00 00 00 00	 call	 strcaseabbrev
  0012a	85 c0		 test	 eax, eax
  0012c	0f 84 84 00 00
	00		 je	 $LN13@stop_cmd
$LN15@stop_cmd:

; 1342 :             {
; 1343 :                 dev->stopdev = TRUE;

  00132	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$3[rsp]
  00137	8b 80 84 07 00
	00		 mov	 eax, DWORD PTR [rax+1924]
  0013d	83 c8 04	 or	 eax, 4
  00140	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$3[rsp]
  00145	89 81 84 07 00
	00		 mov	 DWORD PTR [rcx+1924], eax

; 1344 : 
; 1345 :                 WRMSG(HHC02214, "I", lcss, devnum );

  0014b	0f b7 44 24 50	 movzx	 eax, WORD PTR devnum$1[rsp]
  00150	89 44 24 68	 mov	 DWORD PTR tv138[rsp], eax
  00154	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$2[rsp]
  00159	89 4c 24 6c	 mov	 DWORD PTR tv140[rsp], ecx
  0015d	b9 01 00 00 00	 mov	 ecx, 1
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00168	8b 4c 24 68	 mov	 ecx, DWORD PTR tv138[rsp]
  0016c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00170	8b 4c 24 6c	 mov	 ecx, DWORD PTR tv140[rsp]
  00174	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00178	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205656
  0017f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00184	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205657
  0018b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00190	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00195	41 b9 03 00 00
	00		 mov	 r9d, 3
  0019b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205658
  001a2	ba 41 05 00 00	 mov	 edx, 1345		; 00000541H
  001a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205659
  001ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1346 :             }

  001b4	eb 7d		 jmp	 SHORT $LN14@stop_cmd
$LN13@stop_cmd:

; 1347 :             else
; 1348 :             {
; 1349 :                 WRMSG(HHC02209, "E", lcss, devnum, "printer or punch" );

  001b6	0f b7 44 24 50	 movzx	 eax, WORD PTR devnum$1[rsp]
  001bb	89 44 24 70	 mov	 DWORD PTR tv152[rsp], eax
  001bf	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$2[rsp]
  001c4	89 4c 24 74	 mov	 DWORD PTR tv154[rsp], ecx
  001c8	b9 01 00 00 00	 mov	 ecx, 1
  001cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205660
  001da	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  001df	8b 4c 24 70	 mov	 ecx, DWORD PTR tv152[rsp]
  001e3	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001e7	8b 4c 24 74	 mov	 ecx, DWORD PTR tv154[rsp]
  001eb	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  001ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205661
  001f6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205662
  00202	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00207	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0020c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00212	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205663
  00219	ba 45 05 00 00	 mov	 edx, 1349		; 00000545H
  0021e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205664
  00225	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1350 :                 rc = -1;

  0022b	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN14@stop_cmd:
$LN12@stop_cmd:
$LN10@stop_cmd:

; 1351 :             }
; 1352 :         }
; 1353 :     }

  00233	eb 79		 jmp	 SHORT $LN8@stop_cmd
$LN7@stop_cmd:

; 1354 :     else
; 1355 :     {
; 1356 :         WRMSG( HHC02299, "E", argv[0] );

  00235	b8 08 00 00 00	 mov	 eax, 8
  0023a	48 6b c0 00	 imul	 rax, rax, 0
  0023e	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv165[rsp], rax
  00246	b9 01 00 00 00	 mov	 ecx, 1
  0024b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00251	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00259	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv165[rsp]
  00261	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00265	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0026a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205665
  00271	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00276	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205666
  0027d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00282	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00287	41 b9 03 00 00
	00		 mov	 r9d, 3
  0028d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205667
  00294	ba 4c 05 00 00	 mov	 edx, 1356		; 0000054cH
  00299	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205668
  002a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1357 :         rc = -1;

  002a6	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN8@stop_cmd:
$LN6@stop_cmd:

; 1358 :     }
; 1359 : 
; 1360 :     return rc;

  002ae	8b 44 24 58	 mov	 eax, DWORD PTR rc$[rsp]

; 1361 : }

  002b2	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  002b9	c3		 ret	 0
stop_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
i$ = 64
i$1 = 68
rc$ = 72
mask$2 = 80
tv150 = 88
argc$ = 112
argv$ = 120
cmdline$ = 128
g_cmd	PROC

; 1276 : {

$LN19:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1277 :     int i;
; 1278 :     int rc = 0;

  00012	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN4@g_cmd:

; 1279 : 
; 1280 :     UNREFERENCED(cmdline);

  0001a	33 c0		 xor	 eax, eax
  0001c	85 c0		 test	 eax, eax
  0001e	75 fa		 jne	 SHORT $LN4@g_cmd

; 1281 : 
; 1282 :     if ( argc == 1 )

  00020	83 7c 24 70 01	 cmp	 DWORD PTR argc$[rsp], 1
  00025	0f 85 63 01 00
	00		 jne	 $LN14@g_cmd

; 1283 :     {
; 1284 :         OBTAIN_INTLOCK(NULL);

  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG205617
  00032	33 c9		 xor	 ecx, ecx
  00034	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 1285 :         sysblk.instbreak = 0;

  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00040	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00046	0f ba f0 0a	 btr	 eax, 10
  0004a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00051	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax
$LN7@g_cmd:

; 1286 :         SET_IC_TRACE;

  00057	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0005e	48 8b 80 b0 12
	00 00		 mov	 rax, QWORD PTR [rax+4784]
  00065	48 89 44 24 50	 mov	 QWORD PTR mask$2[rsp], rax
  0006a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  00072	eb 0a		 jmp	 SHORT $LN10@g_cmd
$LN8@g_cmd:
  00074	8b 44 24 44	 mov	 eax, DWORD PTR i$1[rsp]
  00078	ff c0		 inc	 eax
  0007a	89 44 24 44	 mov	 DWORD PTR i$1[rsp], eax
$LN10@g_cmd:
  0007e	48 83 7c 24 50
	00		 cmp	 QWORD PTR mask$2[rsp], 0
  00084	74 4f		 je	 SHORT $LN9@g_cmd
  00086	48 8b 44 24 50	 mov	 rax, QWORD PTR mask$2[rsp]
  0008b	48 83 e0 01	 and	 rax, 1
  0008f	48 85 c0	 test	 rax, rax
  00092	74 32		 je	 SHORT $LN16@g_cmd
  00094	48 63 44 24 44	 movsxd	 rax, DWORD PTR i$1[rsp]
  00099	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000a0	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  000a8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000ab	0f ba e8 1f	 bts	 eax, 31
  000af	48 63 4c 24 44	 movsxd	 rcx, DWORD PTR i$1[rsp]
  000b4	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  000bb	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  000c3	89 41 48	 mov	 DWORD PTR [rcx+72], eax
$LN16@g_cmd:
  000c6	48 8b 44 24 50	 mov	 rax, QWORD PTR mask$2[rsp]
  000cb	48 d1 e8	 shr	 rax, 1
  000ce	48 89 44 24 50	 mov	 QWORD PTR mask$2[rsp], rax
  000d3	eb 9f		 jmp	 SHORT $LN8@g_cmd
$LN9@g_cmd:
  000d5	33 c0		 xor	 eax, eax
  000d7	85 c0		 test	 eax, eax
  000d9	0f 85 78 ff ff
	ff		 jne	 $LN7@g_cmd

; 1287 :         for (i = 0; i < sysblk.hicpu; i++)

  000df	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000e7	eb 0a		 jmp	 SHORT $LN13@g_cmd
$LN11@g_cmd:
  000e9	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  000ed	ff c0		 inc	 eax
  000ef	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN13@g_cmd:
  000f3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000fa	8b 80 08 01 00
	00		 mov	 eax, DWORD PTR [rax+264]
  00100	39 44 24 40	 cmp	 DWORD PTR i$[rsp], eax
  00104	7d 78		 jge	 SHORT $LN12@g_cmd

; 1288 :         {
; 1289 :             if (IS_CPU_ONLINE(i) && sysblk.regs[i]->stepwait)

  00106	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  0010b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00112	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  0011b	74 5c		 je	 SHORT $LN17@g_cmd
  0011d	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00122	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00129	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00131	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  00137	c1 e8 12	 shr	 eax, 18
  0013a	83 e0 01	 and	 eax, 1
  0013d	85 c0		 test	 eax, eax
  0013f	74 38		 je	 SHORT $LN17@g_cmd

; 1290 :             {
; 1291 :                 sysblk.regs[i]->cpustate = CPUSTATE_STARTED;

  00141	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00146	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0014d	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00155	c6 40 60 01	 mov	 BYTE PTR [rax+96], 1

; 1292 :                 WAKEUP_CPU(sysblk.regs[i]);

  00159	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  0015e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG205620
  00165	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0016c	48 8b 8c c1 98
	0b 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+2968]
  00174	e8 00 00 00 00	 call	 wakeup_cpu
$LN17@g_cmd:

; 1293 :             }
; 1294 :         }

  00179	e9 6b ff ff ff	 jmp	 $LN11@g_cmd
$LN12@g_cmd:

; 1295 :         RELEASE_INTLOCK(NULL);

  0017e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG205621
  00185	33 c9		 xor	 ecx, ecx
  00187	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 1296 :     }

  0018c	eb 70		 jmp	 SHORT $LN15@g_cmd
$LN14@g_cmd:

; 1297 :     else
; 1298 :     {
; 1299 :         WRMSG( HHC02299, "E", argv[0] );

  0018e	b8 08 00 00 00	 mov	 eax, 8
  00193	48 6b c0 00	 imul	 rax, rax, 0
  00197	48 89 44 24 58	 mov	 QWORD PTR tv150[rsp], rax
  0019c	b9 01 00 00 00	 mov	 ecx, 1
  001a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001a7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  001ac	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv150[rsp]
  001b1	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001b5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205622
  001c1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205623
  001cd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001d2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001d7	41 b9 03 00 00
	00		 mov	 r9d, 3
  001dd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205624
  001e4	ba 13 05 00 00	 mov	 edx, 1299		; 00000513H
  001e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205625
  001f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1300 :         rc = -1;

  001f6	c7 44 24 48 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN15@g_cmd:

; 1301 :     }
; 1302 :     return rc;

  001fe	8b 44 24 48	 mov	 eax, DWORD PTR rc$[rsp]

; 1303 : }

  00202	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00206	c3		 ret	 0
g_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
devnum$1 = 80
lcss$2 = 84
rc$ = 88
dev$3 = 96
tv155 = 104
stopdev$4 = 108
tv156 = 112
tv158 = 116
tv170 = 120
tv172 = 124
tv184 = 128
tv186 = 132
tv198 = 136
tv200 = 140
tv217 = 144
tv219 = 148
tv231 = 152
tv233 = 156
devclass$5 = 160
tv244 = 168
argc$ = 192
argv$ = 200
cmdline$ = 208
start_cmd PROC

; 1189 : {

$LN27:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 1190 :     int rc = 0;

  00015	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN4@start_cmd:

; 1191 : 
; 1192 :     UNREFERENCED(cmdline);

  0001d	33 c0		 xor	 eax, eax
  0001f	85 c0		 test	 eax, eax
  00021	75 fa		 jne	 SHORT $LN4@start_cmd

; 1193 : 
; 1194 :     if (argc < 2 && !is_diag_instr())

  00023	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0002b	7d 31		 jge	 SHORT $LN7@start_cmd
  0002d	e8 00 00 00 00	 call	 is_diag_instr
  00032	0f b6 c0	 movzx	 eax, al
  00035	85 c0		 test	 eax, eax
  00037	75 25		 jne	 SHORT $LN7@start_cmd

; 1195 :     {
; 1196 :         rc = start_cmd_cpu( argc, argv, cmdline );

  00039	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR cmdline$[rsp]
  00041	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00049	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  00050	e8 00 00 00 00	 call	 start_cmd_cpu
  00055	89 44 24 58	 mov	 DWORD PTR rc$[rsp], eax

; 1197 :     }

  00059	e9 25 05 00 00	 jmp	 $LN8@start_cmd
$LN7@start_cmd:

; 1198 :     else if ( argc == 2 )

  0005e	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00066	0f 85 9e 04 00
	00		 jne	 $LN9@start_cmd

; 1199 :     {
; 1200 :         /* start specified printer/punch device */
; 1201 : 
; 1202 :         U16      devnum;
; 1203 :         U16      lcss;
; 1204 :         int      stopdev;
; 1205 :         DEVBLK*  dev;
; 1206 :         char*    devclass;
; 1207 : 
; 1208 :         if ( parse_single_devnum(argv[1],&lcss,&devnum) < 0 )

  0006c	b8 08 00 00 00	 mov	 eax, 8
  00071	48 6b c0 01	 imul	 rax, rax, 1
  00075	4c 8d 44 24 50	 lea	 r8, QWORD PTR devnum$1[rsp]
  0007a	48 8d 54 24 54	 lea	 rdx, QWORD PTR lcss$2[rsp]
  0007f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00087	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0008b	e8 00 00 00 00	 call	 parse_single_devnum
  00090	85 c0		 test	 eax, eax
  00092	7d 0d		 jge	 SHORT $LN11@start_cmd

; 1209 :         {
; 1210 :             rc = -1;

  00094	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 1211 :         }

  0009c	e9 67 04 00 00	 jmp	 $LN12@start_cmd
$LN11@start_cmd:

; 1212 :         else if (!(dev = find_device_by_devnum (lcss,devnum)))

  000a1	0f b7 54 24 50	 movzx	 edx, WORD PTR devnum$1[rsp]
  000a6	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$2[rsp]
  000ab	e8 00 00 00 00	 call	 find_device_by_devnum
  000b0	48 89 44 24 60	 mov	 QWORD PTR dev$3[rsp], rax
  000b5	48 83 7c 24 60
	00		 cmp	 QWORD PTR dev$3[rsp], 0
  000bb	75 1c		 jne	 SHORT $LN13@start_cmd

; 1213 :         {
; 1214 :             // HHC02200 "%1d:%04X device not found"
; 1215 :             devnotfound_msg(lcss,devnum);

  000bd	0f b7 54 24 50	 movzx	 edx, WORD PTR devnum$1[rsp]
  000c2	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$2[rsp]
  000c7	e8 00 00 00 00	 call	 devnotfound_msg

; 1216 :             rc = -1;

  000cc	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 1217 :         }

  000d4	e9 2f 04 00 00	 jmp	 $LN14@start_cmd
$LN13@start_cmd:

; 1218 :         else
; 1219 :         {
; 1220 :             (dev->hnd->query)(dev, &devclass, 0, NULL);

  000d9	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$3[rsp]
  000de	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  000e5	45 33 c9	 xor	 r9d, r9d
  000e8	45 33 c0	 xor	 r8d, r8d
  000eb	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR devclass$5[rsp]
  000f3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$3[rsp]
  000f8	ff 50 18	 call	 QWORD PTR [rax+24]

; 1221 : 
; 1222 :             if ( CMD(devclass,PRT,3) || CMD(devclass,PCH,3) )

  000fb	41 b8 03 00 00
	00		 mov	 r8d, 3
  00101	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR devclass$5[rsp]
  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205544
  00110	e8 00 00 00 00	 call	 strcaseabbrev
  00115	85 c0		 test	 eax, eax
  00117	75 22		 jne	 SHORT $LN17@start_cmd
  00119	41 b8 03 00 00
	00		 mov	 r8d, 3
  0011f	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR devclass$5[rsp]
  00127	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205545
  0012e	e8 00 00 00 00	 call	 strcaseabbrev
  00133	85 c0		 test	 eax, eax
  00135	0f 84 44 03 00
	00		 je	 $LN15@start_cmd
$LN17@start_cmd:

; 1223 :             {
; 1224 :                 if(dev->stopdev == TRUE)

  0013b	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$3[rsp]
  00140	8b 80 84 07 00
	00		 mov	 eax, DWORD PTR [rax+1924]
  00146	c1 e8 02	 shr	 eax, 2
  00149	83 e0 01	 and	 eax, 1
  0014c	83 f8 01	 cmp	 eax, 1
  0014f	0f 85 a4 02 00
	00		 jne	 $LN18@start_cmd

; 1225 :                 {
; 1226 :                     /* un-stop the unit record device and raise attention interrupt */
; 1227 :                     /* PRINTER or PUNCH */
; 1228 : 
; 1229 :                     stopdev = dev->stopdev;

  00155	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$3[rsp]
  0015a	8b 80 84 07 00
	00		 mov	 eax, DWORD PTR [rax+1924]
  00160	c1 e8 02	 shr	 eax, 2
  00163	83 e0 01	 and	 eax, 1
  00166	89 44 24 6c	 mov	 DWORD PTR stopdev$4[rsp], eax

; 1230 : 
; 1231 :                     dev->stopdev = FALSE;

  0016a	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$3[rsp]
  0016f	8b 80 84 07 00
	00		 mov	 eax, DWORD PTR [rax+1924]
  00175	83 e0 fb	 and	 eax, -5			; fffffffbH
  00178	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$3[rsp]
  0017d	89 81 84 07 00
	00		 mov	 DWORD PTR [rcx+1924], eax

; 1232 : 
; 1233 :                     rc = device_attention (dev, CSW_DE);

  00183	b2 04		 mov	 dl, 4
  00185	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$3[rsp]
  0018a	e8 00 00 00 00	 call	 device_attention
  0018f	89 44 24 58	 mov	 DWORD PTR rc$[rsp], eax

; 1234 : 
; 1235 :                     if (rc) dev->stopdev = stopdev;

  00193	83 7c 24 58 00	 cmp	 DWORD PTR rc$[rsp], 0
  00198	74 27		 je	 SHORT $LN20@start_cmd
  0019a	8b 44 24 6c	 mov	 eax, DWORD PTR stopdev$4[rsp]
  0019e	83 e0 01	 and	 eax, 1
  001a1	c1 e0 02	 shl	 eax, 2
  001a4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$3[rsp]
  001a9	8b 89 84 07 00
	00		 mov	 ecx, DWORD PTR [rcx+1924]
  001af	83 e1 fb	 and	 ecx, -5			; fffffffbH
  001b2	0b c8		 or	 ecx, eax
  001b4	8b c1		 mov	 eax, ecx
  001b6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$3[rsp]
  001bb	89 81 84 07 00
	00		 mov	 DWORD PTR [rcx+1924], eax
$LN20@start_cmd:

; 1236 : 
; 1237 :                     switch (rc) {

  001c1	8b 44 24 58	 mov	 eax, DWORD PTR rc$[rsp]
  001c5	89 44 24 68	 mov	 DWORD PTR tv155[rsp], eax
  001c9	83 7c 24 68 00	 cmp	 DWORD PTR tv155[rsp], 0
  001ce	74 26		 je	 SHORT $LN21@start_cmd
  001d0	83 7c 24 68 01	 cmp	 DWORD PTR tv155[rsp], 1
  001d5	0f 84 89 00 00
	00		 je	 $LN22@start_cmd
  001db	83 7c 24 68 02	 cmp	 DWORD PTR tv155[rsp], 2
  001e0	0f 84 f8 00 00
	00		 je	 $LN23@start_cmd
  001e6	83 7c 24 68 03	 cmp	 DWORD PTR tv155[rsp], 3
  001eb	0f 84 73 01 00
	00		 je	 $LN24@start_cmd
  001f1	e9 ef 01 00 00	 jmp	 $LN5@start_cmd
$LN21@start_cmd:

; 1238 :                     case 0: WRMSG(HHC02212, "I", lcss,devnum);

  001f6	0f b7 44 24 50	 movzx	 eax, WORD PTR devnum$1[rsp]
  001fb	89 44 24 70	 mov	 DWORD PTR tv156[rsp], eax
  001ff	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$2[rsp]
  00204	89 4c 24 74	 mov	 DWORD PTR tv158[rsp], ecx
  00208	b9 01 00 00 00	 mov	 ecx, 1
  0020d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00213	8b 4c 24 70	 mov	 ecx, DWORD PTR tv156[rsp]
  00217	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0021b	8b 4c 24 74	 mov	 ecx, DWORD PTR tv158[rsp]
  0021f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00223	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205550
  0022a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205551
  00236	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0023b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00240	41 b9 03 00 00
	00		 mov	 r9d, 3
  00246	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205552
  0024d	ba d6 04 00 00	 mov	 edx, 1238		; 000004d6H
  00252	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205553
  00259	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1239 :                         break;

  0025f	e9 81 01 00 00	 jmp	 $LN5@start_cmd
$LN22@start_cmd:

; 1240 :                     case 1: WRMSG(HHC02213, "E", lcss, devnum, ": busy or interrupt pending");

  00264	0f b7 44 24 50	 movzx	 eax, WORD PTR devnum$1[rsp]
  00269	89 44 24 78	 mov	 DWORD PTR tv170[rsp], eax
  0026d	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$2[rsp]
  00272	89 4c 24 7c	 mov	 DWORD PTR tv172[rsp], ecx
  00276	b9 01 00 00 00	 mov	 ecx, 1
  0027b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00281	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205555
  00288	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0028d	8b 4c 24 78	 mov	 ecx, DWORD PTR tv170[rsp]
  00291	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00295	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv172[rsp]
  00299	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0029d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205556
  002a4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205557
  002b0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002b5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002ba	41 b9 03 00 00
	00		 mov	 r9d, 3
  002c0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205558
  002c7	ba d8 04 00 00	 mov	 edx, 1240		; 000004d8H
  002cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205559
  002d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1241 :                         break;

  002d9	e9 07 01 00 00	 jmp	 $LN5@start_cmd
$LN23@start_cmd:

; 1242 :                     case 2: WRMSG(HHC02213, "E", lcss, devnum, ": attention request rejected");

  002de	0f b7 44 24 50	 movzx	 eax, WORD PTR devnum$1[rsp]
  002e3	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv184[rsp], eax
  002ea	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$2[rsp]
  002ef	89 8c 24 84 00
	00 00		 mov	 DWORD PTR tv186[rsp], ecx
  002f6	b9 01 00 00 00	 mov	 ecx, 1
  002fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00301	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205561
  00308	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0030d	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv184[rsp]
  00314	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00318	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv186[rsp]
  0031f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00323	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205562
  0032a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0032f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205563
  00336	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0033b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00340	41 b9 03 00 00
	00		 mov	 r9d, 3
  00346	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205564
  0034d	ba da 04 00 00	 mov	 edx, 1242		; 000004daH
  00352	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205565
  00359	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1243 :                         break;

  0035f	e9 81 00 00 00	 jmp	 $LN5@start_cmd
$LN24@start_cmd:

; 1244 :                     case 3: WRMSG(HHC02213, "E", lcss, devnum, ": subchannel not enabled");

  00364	0f b7 44 24 50	 movzx	 eax, WORD PTR devnum$1[rsp]
  00369	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv198[rsp], eax
  00370	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$2[rsp]
  00375	89 8c 24 8c 00
	00 00		 mov	 DWORD PTR tv200[rsp], ecx
  0037c	b9 01 00 00 00	 mov	 ecx, 1
  00381	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00387	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205567
  0038e	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00393	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv198[rsp]
  0039a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0039e	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv200[rsp]
  003a5	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205568
  003b0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205569
  003bc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003c1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003c6	41 b9 03 00 00
	00		 mov	 r9d, 3
  003cc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205570
  003d3	ba dc 04 00 00	 mov	 edx, 1244		; 000004dcH
  003d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205571
  003df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN5@start_cmd:

; 1245 :                         break;
; 1246 :                     }
; 1247 : 
; 1248 :                     if ( rc != 0 )

  003e5	83 7c 24 58 00	 cmp	 DWORD PTR rc$[rsp], 0
  003ea	74 08		 je	 SHORT $LN25@start_cmd

; 1249 :                         rc = -1;

  003ec	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN25@start_cmd:

; 1250 :                 }

  003f4	e9 81 00 00 00	 jmp	 $LN19@start_cmd
$LN18@start_cmd:

; 1251 :                 else
; 1252 :                 {
; 1253 :                     WRMSG(HHC02213, "W", lcss, devnum, ": already started");

  003f9	0f b7 44 24 50	 movzx	 eax, WORD PTR devnum$1[rsp]
  003fe	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv217[rsp], eax
  00405	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$2[rsp]
  0040a	89 8c 24 94 00
	00 00		 mov	 DWORD PTR tv219[rsp], ecx
  00411	b9 01 00 00 00	 mov	 ecx, 1
  00416	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0041c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205573
  00423	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00428	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv217[rsp]
  0042f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00433	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv219[rsp]
  0043a	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0043e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205574
  00445	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0044a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205575
  00451	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00456	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0045b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00461	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205576
  00468	ba e5 04 00 00	 mov	 edx, 1253		; 000004e5H
  0046d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205577
  00474	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN19@start_cmd:

; 1254 :                 }
; 1255 :             }

  0047a	e9 89 00 00 00	 jmp	 $LN16@start_cmd
$LN15@start_cmd:

; 1256 :             else
; 1257 :             {
; 1258 :                 WRMSG(HHC02209, "E", lcss, devnum, "printer or punch" );

  0047f	0f b7 44 24 50	 movzx	 eax, WORD PTR devnum$1[rsp]
  00484	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv231[rsp], eax
  0048b	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$2[rsp]
  00490	89 8c 24 9c 00
	00 00		 mov	 DWORD PTR tv233[rsp], ecx
  00497	b9 01 00 00 00	 mov	 ecx, 1
  0049c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205578
  004a9	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  004ae	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv231[rsp]
  004b5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  004b9	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv233[rsp]
  004c0	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  004c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205579
  004cb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205580
  004d7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004dc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004e1	41 b9 03 00 00
	00		 mov	 r9d, 3
  004e7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205581
  004ee	ba ea 04 00 00	 mov	 edx, 1258		; 000004eaH
  004f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205582
  004fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1259 :                 rc = -1;

  00500	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN16@start_cmd:
$LN14@start_cmd:
$LN12@start_cmd:

; 1260 :             }
; 1261 :         }
; 1262 :     }

  00508	eb 79		 jmp	 SHORT $LN10@start_cmd
$LN9@start_cmd:

; 1263 :     else
; 1264 :     {
; 1265 :         WRMSG( HHC02299, "E", argv[0] );

  0050a	b8 08 00 00 00	 mov	 eax, 8
  0050f	48 6b c0 00	 imul	 rax, rax, 0
  00513	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv244[rsp], rax
  0051b	b9 01 00 00 00	 mov	 ecx, 1
  00520	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00526	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0052e	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR tv244[rsp]
  00536	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0053a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0053f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205583
  00546	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0054b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205584
  00552	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00557	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0055c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00562	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205585
  00569	ba f1 04 00 00	 mov	 edx, 1265		; 000004f1H
  0056e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205586
  00575	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1266 :         rc = -1;

  0057b	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN10@start_cmd:
$LN8@start_cmd:

; 1267 :     }
; 1268 : 
; 1269 :     return rc;

  00583	8b 44 24 58	 mov	 eax, DWORD PTR rc$[rsp]

; 1270 : }

  00587	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0058e	c3		 ret	 0
start_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
devnum$ = 80
lcss$ = 84
dev$ = 88
rc$ = 96
tv131 = 100
tv133 = 104
tv148 = 108
tv171 = 112
tv173 = 116
devclass$ = 120
buffer$ = 128
__$ArrayPad$ = 384
argc$ = 416
argv$ = 424
cmdline$ = 432
fcb_cmd	PROC

; 1133 : {

$LN11:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 98 01
	00 00		 sub	 rsp, 408		; 00000198H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@fcb_cmd:

; 1134 :     int      rc;
; 1135 :     U16      lcss;
; 1136 :     U16      devnum;
; 1137 :     DEVBLK*  dev;
; 1138 :     char*    devclass;
; 1139 :     char     buffer[256];
; 1140 : 
; 1141 :     UNREFERENCED( cmdline );

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@fcb_cmd

; 1142 : 
; 1143 :     /* Our only argument is the required device number */
; 1144 :     if (argc < 2)

  0002d	83 bc 24 a0 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00035	7d 51		 jge	 SHORT $LN5@fcb_cmd

; 1145 :     {
; 1146 :         // "Device number missing"
; 1147 :         WRMSG( HHC02201, "E" );

  00037	b9 01 00 00 00	 mov	 ecx, 1
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205490
  00049	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205491
  00055	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0005a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00065	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205492
  0006c	ba 7b 04 00 00	 mov	 edx, 1147		; 0000047bH
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205493
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1148 :         return -1 ;

  0007e	b8 ff ff ff ff	 mov	 eax, -1
  00083	e9 66 02 00 00	 jmp	 $LN1@fcb_cmd
$LN5@fcb_cmd:

; 1149 :     }
; 1150 : 
; 1151 :     if ((rc = parse_single_devnum( argv[1], &lcss, &devnum )) < 0)

  00088	b8 08 00 00 00	 mov	 eax, 8
  0008d	48 6b c0 01	 imul	 rax, rax, 1
  00091	4c 8d 44 24 50	 lea	 r8, QWORD PTR devnum$[rsp]
  00096	48 8d 54 24 54	 lea	 rdx, QWORD PTR lcss$[rsp]
  0009b	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000a3	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000a7	e8 00 00 00 00	 call	 parse_single_devnum
  000ac	89 44 24 60	 mov	 DWORD PTR rc$[rsp], eax
  000b0	83 7c 24 60 00	 cmp	 DWORD PTR rc$[rsp], 0
  000b5	7d 0a		 jge	 SHORT $LN6@fcb_cmd

; 1152 :         return -1;    // (message already displayed)

  000b7	b8 ff ff ff ff	 mov	 eax, -1
  000bc	e9 2d 02 00 00	 jmp	 $LN1@fcb_cmd
$LN6@fcb_cmd:

; 1153 : 
; 1154 :     if (!(dev = find_device_by_devnum( lcss, devnum )))

  000c1	0f b7 54 24 50	 movzx	 edx, WORD PTR devnum$[rsp]
  000c6	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$[rsp]
  000cb	e8 00 00 00 00	 call	 find_device_by_devnum
  000d0	48 89 44 24 58	 mov	 QWORD PTR dev$[rsp], rax
  000d5	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  000db	75 19		 jne	 SHORT $LN7@fcb_cmd

; 1155 :     {
; 1156 :         // HHC02200 "%1d:%04X device not found"
; 1157 :         devnotfound_msg( lcss, devnum );

  000dd	0f b7 54 24 50	 movzx	 edx, WORD PTR devnum$[rsp]
  000e2	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$[rsp]
  000e7	e8 00 00 00 00	 call	 devnotfound_msg

; 1158 :         return -1;

  000ec	b8 ff ff ff ff	 mov	 eax, -1
  000f1	e9 f8 01 00 00	 jmp	 $LN1@fcb_cmd
$LN7@fcb_cmd:

; 1159 :     }
; 1160 : 
; 1161 :     (dev->hnd->query)( dev, &devclass, 0, NULL );

  000f6	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  000fb	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  00102	45 33 c9	 xor	 r9d, r9d
  00105	45 33 c0	 xor	 r8d, r8d
  00108	48 8d 54 24 78	 lea	 rdx, QWORD PTR devclass$[rsp]
  0010d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  00112	ff 50 18	 call	 QWORD PTR [rax+24]

; 1162 : 
; 1163 :     if (strcasecmp( devclass, "PRT" ) != 0)

  00115	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG205497
  0011c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR devclass$[rsp]
  00121	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00127	85 c0		 test	 eax, eax
  00129	74 7f		 je	 SHORT $LN8@fcb_cmd

; 1164 :     {
; 1165 :         // "%1d:%04X device is not a %s"
; 1166 :         WRMSG( HHC02209, "E", lcss, devnum, "printer" );

  0012b	0f b7 44 24 50	 movzx	 eax, WORD PTR devnum$[rsp]
  00130	89 44 24 64	 mov	 DWORD PTR tv131[rsp], eax
  00134	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$[rsp]
  00139	89 4c 24 68	 mov	 DWORD PTR tv133[rsp], ecx
  0013d	b9 01 00 00 00	 mov	 ecx, 1
  00142	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00148	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205498
  0014f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00154	8b 4c 24 64	 mov	 ecx, DWORD PTR tv131[rsp]
  00158	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0015c	8b 4c 24 68	 mov	 ecx, DWORD PTR tv133[rsp]
  00160	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00164	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205499
  0016b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00170	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205500
  00177	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0017c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00181	41 b9 03 00 00
	00		 mov	 r9d, 3
  00187	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205501
  0018e	ba 8e 04 00 00	 mov	 edx, 1166		; 0000048eH
  00193	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205502
  0019a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1167 :         return -1;

  001a0	b8 ff ff ff ff	 mov	 eax, -1
  001a5	e9 44 01 00 00	 jmp	 $LN1@fcb_cmd
$LN8@fcb_cmd:

; 1168 :     }
; 1169 : 
; 1170 :     if (0x1403 == dev->devtype)

  001aa	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  001af	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  001b3	3d 03 14 00 00	 cmp	 eax, 5123		; 00001403H
  001b8	75 72		 jne	 SHORT $LN9@fcb_cmd

; 1171 :     {
; 1172 :         // "command '%s' invalid for device type %04X"
; 1173 :         WRMSG( HHC02239, "E", "fcb", dev->devtype );

  001ba	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  001bf	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  001c3	89 44 24 6c	 mov	 DWORD PTR tv148[rsp], eax
  001c7	b9 01 00 00 00	 mov	 ecx, 1
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001d2	8b 4c 24 6c	 mov	 ecx, DWORD PTR tv148[rsp]
  001d6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205504
  001e1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205505
  001ed	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205506
  001f9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001fe	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00203	41 b9 03 00 00
	00		 mov	 r9d, 3
  00209	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205507
  00210	ba 95 04 00 00	 mov	 edx, 1173		; 00000495H
  00215	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205508
  0021c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1174 :         return -1;

  00222	b8 ff ff ff ff	 mov	 eax, -1
  00227	e9 c2 00 00 00	 jmp	 $LN1@fcb_cmd
$LN9@fcb_cmd:

; 1175 :     }
; 1176 : 
; 1177 :     FormatFCB( buffer, sizeof( buffer ),

  0022c	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00231	48 05 94 07 00
	00		 add	 rax, 1940		; 00000794H
  00237	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0023c	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00241	8b 80 90 07 00
	00		 mov	 eax, DWORD PTR [rax+1936]
  00247	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0024b	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00250	44 8b 88 88 07
	00 00		 mov	 r9d, DWORD PTR [rax+1928]
  00257	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0025c	44 8b 80 8c 07
	00 00		 mov	 r8d, DWORD PTR [rax+1932]
  00263	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00268	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buffer$[rsp]
  00270	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatFCB

; 1178 :         dev->index, dev->lpi, dev->lpp, dev->fcb );
; 1179 : 
; 1180 :     // "%1d:%04X %s"
; 1181 :     WRMSG( HHC02210, "I", lcss, devnum, buffer );

  00276	0f b7 44 24 50	 movzx	 eax, WORD PTR devnum$[rsp]
  0027b	89 44 24 70	 mov	 DWORD PTR tv171[rsp], eax
  0027f	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$[rsp]
  00284	89 4c 24 74	 mov	 DWORD PTR tv173[rsp], ecx
  00288	b9 01 00 00 00	 mov	 ecx, 1
  0028d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00293	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buffer$[rsp]
  0029b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  002a0	8b 4c 24 70	 mov	 ecx, DWORD PTR tv171[rsp]
  002a4	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  002a8	8b 4c 24 74	 mov	 ecx, DWORD PTR tv173[rsp]
  002ac	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  002b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205509
  002b7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205510
  002c3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002c8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002cd	41 b9 03 00 00
	00		 mov	 r9d, 3
  002d3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205511
  002da	ba 9d 04 00 00	 mov	 edx, 1181		; 0000049dH
  002df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205512
  002e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1182 :     return 0;

  002ec	33 c0		 xor	 eax, eax
$LN1@fcb_cmd:

; 1183 : }

  002ee	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  002f6	48 33 cc	 xor	 rcx, rsp
  002f9	e8 00 00 00 00	 call	 __security_check_cookie
  002fe	48 81 c4 98 01
	00 00		 add	 rsp, 408		; 00000198H
  00305	c3		 ret	 0
fcb_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
devnum$ = 80
lcss$ = 84
dev$ = 88
rc$ = 96
tv131 = 100
tv133 = 104
tv148 = 108
tv169 = 112
tv171 = 116
devclass$ = 120
buffer$ = 128
__$ArrayPad$ = 384
argc$ = 416
argv$ = 424
cmdline$ = 432
cctape_cmd PROC

; 1077 : {

$LN11:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 98 01
	00 00		 sub	 rsp, 408		; 00000198H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@cctape_cmd:

; 1078 :     int      rc;
; 1079 :     U16      lcss;
; 1080 :     U16      devnum;
; 1081 :     DEVBLK*  dev;
; 1082 :     char*    devclass;
; 1083 :     char     buffer[256];
; 1084 : 
; 1085 :     UNREFERENCED( cmdline );

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@cctape_cmd

; 1086 : 
; 1087 :     /* Our only argument is the required device number */
; 1088 :     if (argc < 2)

  0002d	83 bc 24 a0 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00035	7d 51		 jge	 SHORT $LN5@cctape_cmd

; 1089 :     {
; 1090 :         // "Device number missing"
; 1091 :         WRMSG( HHC02201, "E" );

  00037	b9 01 00 00 00	 mov	 ecx, 1
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205448
  00049	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205449
  00055	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0005a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00065	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205450
  0006c	ba 43 04 00 00	 mov	 edx, 1091		; 00000443H
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205451
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1092 :         return -1 ;

  0007e	b8 ff ff ff ff	 mov	 eax, -1
  00083	e9 57 02 00 00	 jmp	 $LN1@cctape_cmd
$LN5@cctape_cmd:

; 1093 :     }
; 1094 : 
; 1095 :     if ((rc = parse_single_devnum( argv[1], &lcss, &devnum )) < 0)

  00088	b8 08 00 00 00	 mov	 eax, 8
  0008d	48 6b c0 01	 imul	 rax, rax, 1
  00091	4c 8d 44 24 50	 lea	 r8, QWORD PTR devnum$[rsp]
  00096	48 8d 54 24 54	 lea	 rdx, QWORD PTR lcss$[rsp]
  0009b	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000a3	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000a7	e8 00 00 00 00	 call	 parse_single_devnum
  000ac	89 44 24 60	 mov	 DWORD PTR rc$[rsp], eax
  000b0	83 7c 24 60 00	 cmp	 DWORD PTR rc$[rsp], 0
  000b5	7d 0a		 jge	 SHORT $LN6@cctape_cmd

; 1096 :         return -1;    // (message already displayed)

  000b7	b8 ff ff ff ff	 mov	 eax, -1
  000bc	e9 1e 02 00 00	 jmp	 $LN1@cctape_cmd
$LN6@cctape_cmd:

; 1097 : 
; 1098 :     if (!(dev = find_device_by_devnum( lcss, devnum )))

  000c1	0f b7 54 24 50	 movzx	 edx, WORD PTR devnum$[rsp]
  000c6	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$[rsp]
  000cb	e8 00 00 00 00	 call	 find_device_by_devnum
  000d0	48 89 44 24 58	 mov	 QWORD PTR dev$[rsp], rax
  000d5	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  000db	75 19		 jne	 SHORT $LN7@cctape_cmd

; 1099 :     {
; 1100 :         // HHC02200 "%1d:%04X device not found"
; 1101 :         devnotfound_msg( lcss, devnum );

  000dd	0f b7 54 24 50	 movzx	 edx, WORD PTR devnum$[rsp]
  000e2	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$[rsp]
  000e7	e8 00 00 00 00	 call	 devnotfound_msg

; 1102 :         return -1;

  000ec	b8 ff ff ff ff	 mov	 eax, -1
  000f1	e9 e9 01 00 00	 jmp	 $LN1@cctape_cmd
$LN7@cctape_cmd:

; 1103 :     }
; 1104 : 
; 1105 :     (dev->hnd->query)( dev, &devclass, 0, NULL );

  000f6	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  000fb	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  00102	45 33 c9	 xor	 r9d, r9d
  00105	45 33 c0	 xor	 r8d, r8d
  00108	48 8d 54 24 78	 lea	 rdx, QWORD PTR devclass$[rsp]
  0010d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  00112	ff 50 18	 call	 QWORD PTR [rax+24]

; 1106 : 
; 1107 :     if (strcasecmp( devclass, "PRT" ) != 0)

  00115	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG205455
  0011c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR devclass$[rsp]
  00121	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00127	85 c0		 test	 eax, eax
  00129	74 7f		 je	 SHORT $LN8@cctape_cmd

; 1108 :     {
; 1109 :         // "%1d:%04X device is not a %s"
; 1110 :         WRMSG( HHC02209, "E", lcss, devnum, "printer" );

  0012b	0f b7 44 24 50	 movzx	 eax, WORD PTR devnum$[rsp]
  00130	89 44 24 64	 mov	 DWORD PTR tv131[rsp], eax
  00134	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$[rsp]
  00139	89 4c 24 68	 mov	 DWORD PTR tv133[rsp], ecx
  0013d	b9 01 00 00 00	 mov	 ecx, 1
  00142	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00148	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205456
  0014f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00154	8b 4c 24 64	 mov	 ecx, DWORD PTR tv131[rsp]
  00158	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0015c	8b 4c 24 68	 mov	 ecx, DWORD PTR tv133[rsp]
  00160	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00164	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205457
  0016b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00170	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205458
  00177	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0017c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00181	41 b9 03 00 00
	00		 mov	 r9d, 3
  00187	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205459
  0018e	ba 56 04 00 00	 mov	 edx, 1110		; 00000456H
  00193	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205460
  0019a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1111 :         return -1;

  001a0	b8 ff ff ff ff	 mov	 eax, -1
  001a5	e9 35 01 00 00	 jmp	 $LN1@cctape_cmd
$LN8@cctape_cmd:

; 1112 :     }
; 1113 : 
; 1114 :     if (0x1403 != dev->devtype)

  001aa	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  001af	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  001b3	3d 03 14 00 00	 cmp	 eax, 5123		; 00001403H
  001b8	74 72		 je	 SHORT $LN9@cctape_cmd

; 1115 :     {
; 1116 :         // "command '%s' invalid for device type %04X"
; 1117 :         WRMSG( HHC02239, "E", "cctape", dev->devtype );

  001ba	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  001bf	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  001c3	89 44 24 6c	 mov	 DWORD PTR tv148[rsp], eax
  001c7	b9 01 00 00 00	 mov	 ecx, 1
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001d2	8b 4c 24 6c	 mov	 ecx, DWORD PTR tv148[rsp]
  001d6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205462
  001e1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205463
  001ed	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205464
  001f9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001fe	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00203	41 b9 03 00 00
	00		 mov	 r9d, 3
  00209	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205465
  00210	ba 5d 04 00 00	 mov	 edx, 1117		; 0000045dH
  00215	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205466
  0021c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1118 :         return -1;

  00222	b8 ff ff ff ff	 mov	 eax, -1
  00227	e9 b3 00 00 00	 jmp	 $LN1@cctape_cmd
$LN9@cctape_cmd:

; 1119 :     }
; 1120 : 
; 1121 :     FormatCCTAPE( buffer, sizeof( buffer ),

  0022c	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00231	48 05 a0 0b 00
	00		 add	 rax, 2976		; 00000ba0H
  00237	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0023c	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00241	44 8b 88 90 07
	00 00		 mov	 r9d, DWORD PTR [rax+1936]
  00248	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0024d	44 8b 80 88 07
	00 00		 mov	 r8d, DWORD PTR [rax+1928]
  00254	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00259	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buffer$[rsp]
  00261	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatCCTAPE

; 1122 :         dev->lpi, dev->lpp, dev->cctape );
; 1123 : 
; 1124 :     // "%1d:%04X %s"
; 1125 :     WRMSG( HHC02210, "I", lcss, devnum, buffer );

  00267	0f b7 44 24 50	 movzx	 eax, WORD PTR devnum$[rsp]
  0026c	89 44 24 70	 mov	 DWORD PTR tv169[rsp], eax
  00270	0f b7 4c 24 54	 movzx	 ecx, WORD PTR lcss$[rsp]
  00275	89 4c 24 74	 mov	 DWORD PTR tv171[rsp], ecx
  00279	b9 01 00 00 00	 mov	 ecx, 1
  0027e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00284	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR buffer$[rsp]
  0028c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00291	8b 4c 24 70	 mov	 ecx, DWORD PTR tv169[rsp]
  00295	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00299	8b 4c 24 74	 mov	 ecx, DWORD PTR tv171[rsp]
  0029d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  002a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205467
  002a8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205468
  002b4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002b9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002be	41 b9 03 00 00
	00		 mov	 r9d, 3
  002c4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205469
  002cb	ba 65 04 00 00	 mov	 edx, 1125		; 00000465H
  002d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205470
  002d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1126 :     return 0;

  002dd	33 c0		 xor	 eax, eax
$LN1@cctape_cmd:

; 1127 : }

  002df	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  002e7	48 33 cc	 xor	 rcx, rsp
  002ea	e8 00 00 00 00	 call	 __security_check_cookie
  002ef	48 81 c4 98 01
	00 00		 add	 rsp, 408		; 00000198H
  002f6	c3		 ret	 0
cctape_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
rc$ = 64
tv66 = 72
argc$ = 96
argv$ = 104
cmdline$ = 112
version_cmd PROC

; 1054 : {

$LN8:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1055 : int rc = 0;

  00012	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN4@version_cm:

; 1056 :     UNREFERENCED(cmdline);

  0001a	33 c0		 xor	 eax, eax
  0001c	85 c0		 test	 eax, eax
  0001e	75 fa		 jne	 SHORT $LN4@version_cm

; 1057 : 
; 1058 :     if ( argc > 1 )

  00020	83 7c 24 60 01	 cmp	 DWORD PTR argc$[rsp], 1
  00025	7e 72		 jle	 SHORT $LN5@version_cm

; 1059 :     {
; 1060 :         WRMSG( HHC02299, "E", argv[0] );

  00027	b8 08 00 00 00	 mov	 eax, 8
  0002c	48 6b c0 00	 imul	 rax, rax, 0
  00030	48 89 44 24 48	 mov	 QWORD PTR tv66[rsp], rax
  00035	b9 01 00 00 00	 mov	 ecx, 1
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00040	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  00045	48 8b 54 24 48	 mov	 rdx, QWORD PTR tv66[rsp]
  0004a	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0004e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205425
  0005a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205426
  00066	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0006b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00070	41 b9 03 00 00
	00		 mov	 r9d, 3
  00076	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205427
  0007d	ba 24 04 00 00	 mov	 edx, 1060		; 00000424H
  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205428
  00089	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1061 :         rc = -1;

  0008f	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 1062 :     }

  00097	eb 45		 jmp	 SHORT $LN6@version_cm
$LN5@version_cm:

; 1063 :     else
; 1064 :     {
; 1065 :         display_version      ( stdout, 0, NULL );

  00099	b9 01 00 00 00	 mov	 ecx, 1
  0009e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a4	45 33 c0	 xor	 r8d, r8d
  000a7	33 d2		 xor	 edx, edx
  000a9	48 8b c8	 mov	 rcx, rax
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_display_version

; 1066 :         display_build_options( stdout, 0 );

  000b2	b9 01 00 00 00	 mov	 ecx, 1
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000bd	33 d2		 xor	 edx, edx
  000bf	48 8b c8	 mov	 rcx, rax
  000c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_display_build_options

; 1067 :         display_extpkg_vers  ( stdout, 0 );

  000c8	b9 01 00 00 00	 mov	 ecx, 1
  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000d3	33 d2		 xor	 edx, edx
  000d5	48 8b c8	 mov	 rcx, rax
  000d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_display_extpkg_vers
$LN6@version_cm:

; 1068 :     }
; 1069 : 
; 1070 :     return rc;

  000de	8b 44 24 40	 mov	 eax, DWORD PTR rc$[rsp]

; 1071 : }

  000e2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000e6	c3		 ret	 0
version_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
uptime$ = 112
days$ = 116
weeks$ = 120
secs$ = 124
mins$ = 128
hours$ = 132
rc$ = 136
tv129 = 144
tv133 = 152
tv150 = 160
tv66 = 168
now$ = 176
argc$ = 208
argv$ = 216
cmdline$ = 224
uptime_cmd PROC

; 991  : {

$LN18:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 992  : int     rc = 0;

  00015	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR rc$[rsp], 0
$LN4@uptime_cmd:

; 993  : time_t  now;
; 994  : unsigned uptime, weeks, days, hours, mins, secs;
; 995  : 
; 996  :     UNREFERENCED( cmdline );

  00020	33 c0		 xor	 eax, eax
  00022	85 c0		 test	 eax, eax
  00024	75 fa		 jne	 SHORT $LN4@uptime_cmd

; 997  : 
; 998  :     if ( argc > 1 )

  00026	83 bc 24 d0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0002e	0f 8e 81 00 00
	00		 jle	 $LN5@uptime_cmd

; 999  :     {
; 1000 :         WRMSG( HHC02299, "E", argv[0] );

  00034	b8 08 00 00 00	 mov	 eax, 8
  00039	48 6b c0 00	 imul	 rax, rax, 0
  0003d	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv66[rsp], rax
  00045	b9 01 00 00 00	 mov	 ecx, 1
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00050	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00058	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR tv66[rsp]
  00060	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00064	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205384
  00070	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205385
  0007c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00081	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00086	41 b9 03 00 00
	00		 mov	 r9d, 3
  0008c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205386
  00093	ba e8 03 00 00	 mov	 edx, 1000		; 000003e8H
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205387
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1001 :         rc = -1;

  000a5	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR rc$[rsp], -1

; 1002 :     }

  000b0	e9 cc 02 00 00	 jmp	 $LN6@uptime_cmd
$LN5@uptime_cmd:

; 1003 :     else
; 1004 :     {
; 1005 :         time( &now );

  000b5	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR now$[rsp]
  000bd	e8 00 00 00 00	 call	 time

; 1006 : 
; 1007 :         uptime = (unsigned) difftime( now, sysblk.impltime );

  000c2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000c9	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  000cd	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR now$[rsp]
  000d5	e8 00 00 00 00	 call	 difftime
  000da	f2 48 0f 2c c0	 cvttsd2si rax, xmm0
  000df	89 44 24 70	 mov	 DWORD PTR uptime$[rsp], eax

; 1008 : 
; 1009 : #define  SECS_PER_MIN     ( 60                 )
; 1010 : #define  SECS_PER_HOUR    ( 60 * SECS_PER_MIN  )
; 1011 : #define  SECS_PER_DAY     ( 24 * SECS_PER_HOUR )
; 1012 : #define  SECS_PER_WEEK    (  7 * SECS_PER_DAY  )
; 1013 : 
; 1014 :         weeks = uptime /  SECS_PER_WEEK;

  000e3	33 d2		 xor	 edx, edx
  000e5	8b 44 24 70	 mov	 eax, DWORD PTR uptime$[rsp]
  000e9	b9 80 3a 09 00	 mov	 ecx, 604800		; 00093a80H
  000ee	f7 f1		 div	 ecx
  000f0	89 44 24 78	 mov	 DWORD PTR weeks$[rsp], eax

; 1015 :                 uptime %= SECS_PER_WEEK;

  000f4	33 d2		 xor	 edx, edx
  000f6	8b 44 24 70	 mov	 eax, DWORD PTR uptime$[rsp]
  000fa	b9 80 3a 09 00	 mov	 ecx, 604800		; 00093a80H
  000ff	f7 f1		 div	 ecx
  00101	8b c2		 mov	 eax, edx
  00103	89 44 24 70	 mov	 DWORD PTR uptime$[rsp], eax

; 1016 :         days  = uptime /  SECS_PER_DAY;

  00107	33 d2		 xor	 edx, edx
  00109	8b 44 24 70	 mov	 eax, DWORD PTR uptime$[rsp]
  0010d	b9 80 51 01 00	 mov	 ecx, 86400		; 00015180H
  00112	f7 f1		 div	 ecx
  00114	89 44 24 74	 mov	 DWORD PTR days$[rsp], eax

; 1017 :                 uptime %= SECS_PER_DAY;

  00118	33 d2		 xor	 edx, edx
  0011a	8b 44 24 70	 mov	 eax, DWORD PTR uptime$[rsp]
  0011e	b9 80 51 01 00	 mov	 ecx, 86400		; 00015180H
  00123	f7 f1		 div	 ecx
  00125	8b c2		 mov	 eax, edx
  00127	89 44 24 70	 mov	 DWORD PTR uptime$[rsp], eax

; 1018 :         hours = uptime /  SECS_PER_HOUR;

  0012b	33 d2		 xor	 edx, edx
  0012d	8b 44 24 70	 mov	 eax, DWORD PTR uptime$[rsp]
  00131	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  00136	f7 f1		 div	 ecx
  00138	89 84 24 84 00
	00 00		 mov	 DWORD PTR hours$[rsp], eax

; 1019 :                 uptime %= SECS_PER_HOUR;

  0013f	33 d2		 xor	 edx, edx
  00141	8b 44 24 70	 mov	 eax, DWORD PTR uptime$[rsp]
  00145	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  0014a	f7 f1		 div	 ecx
  0014c	8b c2		 mov	 eax, edx
  0014e	89 44 24 70	 mov	 DWORD PTR uptime$[rsp], eax

; 1020 :         mins  = uptime /  SECS_PER_MIN;

  00152	33 d2		 xor	 edx, edx
  00154	8b 44 24 70	 mov	 eax, DWORD PTR uptime$[rsp]
  00158	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  0015d	f7 f1		 div	 ecx
  0015f	89 84 24 80 00
	00 00		 mov	 DWORD PTR mins$[rsp], eax

; 1021 :                 uptime %= SECS_PER_MIN;

  00166	33 d2		 xor	 edx, edx
  00168	8b 44 24 70	 mov	 eax, DWORD PTR uptime$[rsp]
  0016c	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00171	f7 f1		 div	 ecx
  00173	8b c2		 mov	 eax, edx
  00175	89 44 24 70	 mov	 DWORD PTR uptime$[rsp], eax

; 1022 :         secs  = uptime;

  00179	8b 44 24 70	 mov	 eax, DWORD PTR uptime$[rsp]
  0017d	89 44 24 7c	 mov	 DWORD PTR secs$[rsp], eax

; 1023 : 
; 1024 :         if (weeks)

  00181	83 7c 24 78 00	 cmp	 DWORD PTR weeks$[rsp], 0
  00186	0f 84 e2 00 00
	00		 je	 $LN7@uptime_cmd

; 1025 :         {
; 1026 :             WRMSG( HHC02206, "I",

  0018c	83 7c 24 74 01	 cmp	 DWORD PTR days$[rsp], 1
  00191	74 11		 je	 SHORT $LN12@uptime_cmd
  00193	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205390
  0019a	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv129[rsp], rax
  001a2	eb 0f		 jmp	 SHORT $LN13@uptime_cmd
$LN12@uptime_cmd:
  001a4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205391
  001ab	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv129[rsp], rax
$LN13@uptime_cmd:
  001b3	83 7c 24 78 01	 cmp	 DWORD PTR weeks$[rsp], 1
  001b8	76 11		 jbe	 SHORT $LN14@uptime_cmd
  001ba	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205392
  001c1	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv133[rsp], rax
  001c9	eb 0f		 jmp	 SHORT $LN15@uptime_cmd
$LN14@uptime_cmd:
  001cb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205393
  001d2	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv133[rsp], rax
$LN15@uptime_cmd:
  001da	b9 01 00 00 00	 mov	 ecx, 1
  001df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001e5	8b 4c 24 7c	 mov	 ecx, DWORD PTR secs$[rsp]
  001e9	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  001ed	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR mins$[rsp]
  001f4	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  001f8	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR hours$[rsp]
  001ff	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00203	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv129[rsp]
  0020b	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00210	8b 4c 24 74	 mov	 ecx, DWORD PTR days$[rsp]
  00214	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00218	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv133[rsp]
  00220	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00225	8b 4c 24 78	 mov	 ecx, DWORD PTR weeks$[rsp]
  00229	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0022d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205394
  00234	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00239	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205395
  00240	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00245	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00250	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205396
  00257	ba 05 04 00 00	 mov	 edx, 1029		; 00000405H
  0025c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205397
  00263	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1027 :                     weeks, weeks >  1 ? "s" : "",
; 1028 :                     days,  days  != 1 ? "s" : "",
; 1029 :                     hours, mins, secs );
; 1030 :         }

  00269	e9 13 01 00 00	 jmp	 $LN8@uptime_cmd
$LN7@uptime_cmd:

; 1031 :         else if (days)

  0026e	83 7c 24 74 00	 cmp	 DWORD PTR days$[rsp], 0
  00273	0f 84 a3 00 00
	00		 je	 $LN9@uptime_cmd

; 1032 :         {
; 1033 :             WRMSG( HHC02207, "I",

  00279	83 7c 24 74 01	 cmp	 DWORD PTR days$[rsp], 1
  0027e	74 11		 je	 SHORT $LN16@uptime_cmd
  00280	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205400
  00287	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv150[rsp], rax
  0028f	eb 0f		 jmp	 SHORT $LN17@uptime_cmd
$LN16@uptime_cmd:
  00291	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205401
  00298	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv150[rsp], rax
$LN17@uptime_cmd:
  002a0	b9 01 00 00 00	 mov	 ecx, 1
  002a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002ab	8b 4c 24 7c	 mov	 ecx, DWORD PTR secs$[rsp]
  002af	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  002b3	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR mins$[rsp]
  002ba	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  002be	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR hours$[rsp]
  002c5	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  002c9	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv150[rsp]
  002d1	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002d6	8b 4c 24 74	 mov	 ecx, DWORD PTR days$[rsp]
  002da	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  002de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205402
  002e5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205403
  002f1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002f6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002fb	41 b9 03 00 00
	00		 mov	 r9d, 3
  00301	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205404
  00308	ba 0b 04 00 00	 mov	 edx, 1035		; 0000040bH
  0030d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205405
  00314	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1034 :                     days, days != 1 ? "s" : "",
; 1035 :                     hours, mins, secs );
; 1036 :         }

  0031a	eb 65		 jmp	 SHORT $LN10@uptime_cmd
$LN9@uptime_cmd:

; 1037 :         else
; 1038 :         {
; 1039 :             WRMSG( HHC02208, "I",

  0031c	b9 01 00 00 00	 mov	 ecx, 1
  00321	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00327	8b 4c 24 7c	 mov	 ecx, DWORD PTR secs$[rsp]
  0032b	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  0032f	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR mins$[rsp]
  00336	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0033a	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR hours$[rsp]
  00341	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00345	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205406
  0034c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00351	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205407
  00358	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0035d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00362	41 b9 03 00 00
	00		 mov	 r9d, 3
  00368	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205408
  0036f	ba 10 04 00 00	 mov	 edx, 1040		; 00000410H
  00374	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205409
  0037b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN10@uptime_cmd:
$LN8@uptime_cmd:
$LN6@uptime_cmd:

; 1040 :                     hours, mins, secs );
; 1041 :         }
; 1042 :     }
; 1043 :     return rc;

  00381	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR rc$[rsp]

; 1044 : #undef SECS_PER_MIN
; 1045 : #undef SECS_PER_HOUR
; 1046 : #undef SECS_PER_DAY
; 1047 : #undef SECS_PER_WEEK
; 1048 : }

  00388	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  0038f	c3		 ret	 0
uptime_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
bTimeStamp$ = 80
bDateStamp$ = 81
i$ = 84
tv68 = 88
tv74 = 92
tv196 = 96
tv205 = 100
rc$ = 104
tv92 = 112
tv128 = 120
tv214 = 128
tv218 = 136
tv133 = 144
tv180 = 152
tv223 = 160
buf$ = 176
__$ArrayPad$ = 240
argc$ = 272
argv$ = 280
cmdline$ = 288
logopt_cmd PROC

; 921  : {

$LN34:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 922  :     int i, rc = 0;

  00027	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0

; 923  :     char buf[64];
; 924  :     bool bDateStamp = !sysblk.logoptnodate;

  0002f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00036	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  0003c	c1 e8 16	 shr	 eax, 22
  0003f	83 e0 01	 and	 eax, 1
  00042	85 c0		 test	 eax, eax
  00044	75 0a		 jne	 SHORT $LN18@logopt_cmd
  00046	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  0004e	eb 08		 jmp	 SHORT $LN19@logopt_cmd
$LN18@logopt_cmd:
  00050	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN19@logopt_cmd:
  00058	0f b6 44 24 58	 movzx	 eax, BYTE PTR tv68[rsp]
  0005d	88 44 24 51	 mov	 BYTE PTR bDateStamp$[rsp], al

; 925  :     bool bTimeStamp = !sysblk.logoptnotime;

  00061	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00068	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  0006e	c1 e8 17	 shr	 eax, 23
  00071	83 e0 01	 and	 eax, 1
  00074	85 c0		 test	 eax, eax
  00076	75 0a		 jne	 SHORT $LN20@logopt_cmd
  00078	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  00080	eb 08		 jmp	 SHORT $LN21@logopt_cmd
$LN20@logopt_cmd:
  00082	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN21@logopt_cmd:
  0008a	0f b6 44 24 5c	 movzx	 eax, BYTE PTR tv74[rsp]
  0008f	88 44 24 50	 mov	 BYTE PTR bTimeStamp$[rsp], al
$LN4@logopt_cmd:

; 926  : 
; 927  :     UNREFERENCED( cmdline );

  00093	33 c0		 xor	 eax, eax
  00095	85 c0		 test	 eax, eax
  00097	75 fa		 jne	 SHORT $LN4@logopt_cmd
$LN7@logopt_cmd:

; 928  :     UPPER_ARGV_0( argv );

  00099	48 83 bc 24 18
	01 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  000a2	74 47		 je	 SHORT $LN11@logopt_cmd
  000a4	b8 08 00 00 00	 mov	 eax, 8
  000a9	48 6b c0 00	 imul	 rax, rax, 0
  000ad	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000b5	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  000ba	74 2f		 je	 SHORT $LN11@logopt_cmd
  000bc	b8 08 00 00 00	 mov	 eax, 8
  000c1	48 6b c0 00	 imul	 rax, rax, 0
  000c5	b9 08 00 00 00	 mov	 ecx, 8
  000ca	48 6b c9 00	 imul	 rcx, rcx, 0
  000ce	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  000d6	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  000da	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000e2	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  000e6	e8 00 00 00 00	 call	 strupper
$LN11@logopt_cmd:
  000eb	33 c0		 xor	 eax, eax
  000ed	85 c0		 test	 eax, eax
  000ef	75 a8		 jne	 SHORT $LN7@logopt_cmd

; 929  : 
; 930  :     if (argc <= 1)

  000f1	83 bc 24 10 01
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  000f9	0f 8f f4 00 00
	00		 jg	 $LN12@logopt_cmd

; 931  :     {
; 932  :         MSGBUF( buf, "%s %s"

  000ff	0f b6 44 24 50	 movzx	 eax, BYTE PTR bTimeStamp$[rsp]
  00104	85 c0		 test	 eax, eax
  00106	74 0e		 je	 SHORT $LN22@logopt_cmd
  00108	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205331
  0010f	48 89 44 24 70	 mov	 QWORD PTR tv92[rsp], rax
  00114	eb 0c		 jmp	 SHORT $LN23@logopt_cmd
$LN22@logopt_cmd:
  00116	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205332
  0011d	48 89 44 24 70	 mov	 QWORD PTR tv92[rsp], rax
$LN23@logopt_cmd:
  00122	0f b6 44 24 51	 movzx	 eax, BYTE PTR bDateStamp$[rsp]
  00127	85 c0		 test	 eax, eax
  00129	74 0e		 je	 SHORT $LN24@logopt_cmd
  0012b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205333
  00132	48 89 44 24 78	 mov	 QWORD PTR tv128[rsp], rax
  00137	eb 0c		 jmp	 SHORT $LN25@logopt_cmd
$LN24@logopt_cmd:
  00139	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205334
  00140	48 89 44 24 78	 mov	 QWORD PTR tv128[rsp], rax
$LN25@logopt_cmd:
  00145	48 8b 44 24 70	 mov	 rax, QWORD PTR tv92[rsp]
  0014a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014f	4c 8b 4c 24 78	 mov	 r9, QWORD PTR tv128[rsp]
  00154	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205335
  0015b	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00160	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 933  :             , bDateStamp ? "DATESTAMP" : "NODATESTAMP"
; 934  :             , bTimeStamp ? "TIMESTAMP" : "NOTIMESTAMP"
; 935  :         );
; 936  : 
; 937  :         // "%-14s: %s"
; 938  :         WRMSG( HHC02203, "I", argv[0], buf );

  0016e	b8 08 00 00 00	 mov	 eax, 8
  00173	48 6b c0 00	 imul	 rax, rax, 0
  00177	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv133[rsp], rax
  0017f	b9 01 00 00 00	 mov	 ecx, 1
  00184	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0018a	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00192	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00197	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0019f	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tv133[rsp]
  001a7	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001ab	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205336
  001b7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205337
  001c3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001c8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001cd	41 b9 03 00 00
	00		 mov	 r9d, 3
  001d3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205338
  001da	ba aa 03 00 00	 mov	 edx, 938		; 000003aaH
  001df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205339
  001e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 939  :         return 0;

  001ec	33 c0		 xor	 eax, eax
  001ee	e9 fc 02 00 00	 jmp	 $LN1@logopt_cmd
$LN12@logopt_cmd:

; 940  :     }
; 941  : 
; 942  :     // ISO 8601: YYYY-MM-DD
; 943  : 
; 944  :     for (i=1; i < argc; i++)

  001f3	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  001fb	eb 0a		 jmp	 SHORT $LN10@logopt_cmd
$LN8@logopt_cmd:
  001fd	8b 44 24 54	 mov	 eax, DWORD PTR i$[rsp]
  00201	ff c0		 inc	 eax
  00203	89 44 24 54	 mov	 DWORD PTR i$[rsp], eax
$LN10@logopt_cmd:
  00207	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  0020e	39 44 24 54	 cmp	 DWORD PTR i$[rsp], eax
  00212	0f 8d 46 01 00
	00		 jge	 $LN9@logopt_cmd

; 945  :     {
; 946  :         if (CMD( argv[i], DATESTAMP, 4 ))

  00218	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  0021d	41 b8 04 00 00
	00		 mov	 r8d, 4
  00223	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0022b	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205341
  00236	e8 00 00 00 00	 call	 strcaseabbrev
  0023b	85 c0		 test	 eax, eax
  0023d	74 07		 je	 SHORT $LN13@logopt_cmd

; 947  :         {
; 948  :             bDateStamp = true;

  0023f	c6 44 24 51 01	 mov	 BYTE PTR bDateStamp$[rsp], 1

; 949  :             continue;

  00244	eb b7		 jmp	 SHORT $LN8@logopt_cmd
$LN13@logopt_cmd:

; 950  :         }
; 951  :         if (CMD( argv[i], NODATESTAMP, 6 ))

  00246	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  0024b	41 b8 06 00 00
	00		 mov	 r8d, 6
  00251	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00259	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0025d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205343
  00264	e8 00 00 00 00	 call	 strcaseabbrev
  00269	85 c0		 test	 eax, eax
  0026b	74 07		 je	 SHORT $LN14@logopt_cmd

; 952  :         {
; 953  :             bDateStamp = false;

  0026d	c6 44 24 51 00	 mov	 BYTE PTR bDateStamp$[rsp], 0

; 954  :             continue;

  00272	eb 89		 jmp	 SHORT $LN8@logopt_cmd
$LN14@logopt_cmd:

; 955  :         }
; 956  :         if (CMD( argv[i], TIMESTAMP, 4 ))

  00274	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  00279	41 b8 04 00 00
	00		 mov	 r8d, 4
  0027f	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00287	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0028b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205345
  00292	e8 00 00 00 00	 call	 strcaseabbrev
  00297	85 c0		 test	 eax, eax
  00299	74 0a		 je	 SHORT $LN15@logopt_cmd

; 957  :         {
; 958  :             bTimeStamp = true;

  0029b	c6 44 24 50 01	 mov	 BYTE PTR bTimeStamp$[rsp], 1

; 959  :             continue;

  002a0	e9 58 ff ff ff	 jmp	 $LN8@logopt_cmd
$LN15@logopt_cmd:

; 960  :         }
; 961  :         if (CMD( argv[i], NOTIMESTAMP, 6 ))

  002a5	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  002aa	41 b8 06 00 00
	00		 mov	 r8d, 6
  002b0	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002b8	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  002bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205347
  002c3	e8 00 00 00 00	 call	 strcaseabbrev
  002c8	85 c0		 test	 eax, eax
  002ca	74 0a		 je	 SHORT $LN16@logopt_cmd

; 962  :         {
; 963  :             bTimeStamp = false;

  002cc	c6 44 24 50 00	 mov	 BYTE PTR bTimeStamp$[rsp], 0

; 964  :             continue;

  002d1	e9 27 ff ff ff	 jmp	 $LN8@logopt_cmd
$LN16@logopt_cmd:

; 965  :         }
; 966  : 
; 967  :         // "Invalid argument %s%s"
; 968  :         WRMSG( HHC02205, "E", argv[i], "" );

  002d6	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  002db	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv180[rsp], rax
  002e3	b9 01 00 00 00	 mov	 ecx, 1
  002e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205348
  002f5	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002fa	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00302	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR tv180[rsp]
  0030a	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  0030e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00313	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205349
  0031a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0031f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205350
  00326	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0032b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00330	41 b9 03 00 00
	00		 mov	 r9d, 3
  00336	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205351
  0033d	ba c8 03 00 00	 mov	 edx, 968		; 000003c8H
  00342	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205352
  00349	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 969  :         return -1;

  0034f	b8 ff ff ff ff	 mov	 eax, -1
  00354	e9 96 01 00 00	 jmp	 $LN1@logopt_cmd

; 970  :     }

  00359	e9 9f fe ff ff	 jmp	 $LN8@logopt_cmd
$LN9@logopt_cmd:

; 971  : 
; 972  :     sysblk.logoptnodate = !bDateStamp;

  0035e	0f b6 44 24 51	 movzx	 eax, BYTE PTR bDateStamp$[rsp]
  00363	85 c0		 test	 eax, eax
  00365	75 0a		 jne	 SHORT $LN26@logopt_cmd
  00367	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv196[rsp], 1
  0036f	eb 08		 jmp	 SHORT $LN27@logopt_cmd
$LN26@logopt_cmd:
  00371	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv196[rsp], 0
$LN27@logopt_cmd:
  00379	8b 44 24 60	 mov	 eax, DWORD PTR tv196[rsp]
  0037d	83 e0 01	 and	 eax, 1
  00380	c1 e0 16	 shl	 eax, 22
  00383	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0038a	8b 89 94 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4756]
  00390	0f ba f1 16	 btr	 ecx, 22
  00394	0b c8		 or	 ecx, eax
  00396	8b c1		 mov	 eax, ecx
  00398	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0039f	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax

; 973  :     sysblk.logoptnotime = !bTimeStamp;

  003a5	0f b6 44 24 50	 movzx	 eax, BYTE PTR bTimeStamp$[rsp]
  003aa	85 c0		 test	 eax, eax
  003ac	75 0a		 jne	 SHORT $LN28@logopt_cmd
  003ae	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR tv205[rsp], 1
  003b6	eb 08		 jmp	 SHORT $LN29@logopt_cmd
$LN28@logopt_cmd:
  003b8	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv205[rsp], 0
$LN29@logopt_cmd:
  003c0	8b 44 24 64	 mov	 eax, DWORD PTR tv205[rsp]
  003c4	83 e0 01	 and	 eax, 1
  003c7	c1 e0 17	 shl	 eax, 23
  003ca	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  003d1	8b 89 94 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4756]
  003d7	0f ba f1 17	 btr	 ecx, 23
  003db	0b c8		 or	 ecx, eax
  003dd	8b c1		 mov	 eax, ecx
  003df	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  003e6	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax

; 974  : 
; 975  :     MSGBUF( buf, "%s %s"

  003ec	0f b6 44 24 50	 movzx	 eax, BYTE PTR bTimeStamp$[rsp]
  003f1	85 c0		 test	 eax, eax
  003f3	74 11		 je	 SHORT $LN30@logopt_cmd
  003f5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205353
  003fc	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv214[rsp], rax
  00404	eb 0f		 jmp	 SHORT $LN31@logopt_cmd
$LN30@logopt_cmd:
  00406	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205354
  0040d	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv214[rsp], rax
$LN31@logopt_cmd:
  00415	0f b6 44 24 51	 movzx	 eax, BYTE PTR bDateStamp$[rsp]
  0041a	85 c0		 test	 eax, eax
  0041c	74 11		 je	 SHORT $LN32@logopt_cmd
  0041e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205355
  00425	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv218[rsp], rax
  0042d	eb 0f		 jmp	 SHORT $LN33@logopt_cmd
$LN32@logopt_cmd:
  0042f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205356
  00436	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv218[rsp], rax
$LN33@logopt_cmd:
  0043e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv214[rsp]
  00446	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0044b	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR tv218[rsp]
  00453	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205357
  0045a	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0045f	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00467	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 976  :         , bDateStamp ? "DATESTAMP" : "NODATESTAMP"
; 977  :         , bTimeStamp ? "TIMESTAMP" : "NOTIMESTAMP"
; 978  :     );
; 979  : 
; 980  :     // "%-14s set to %s"
; 981  :     WRMSG( HHC02204, "I", argv[0], buf );

  0046d	b8 08 00 00 00	 mov	 eax, 8
  00472	48 6b c0 00	 imul	 rax, rax, 0
  00476	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv223[rsp], rax
  0047e	b9 01 00 00 00	 mov	 ecx, 1
  00483	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00489	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00491	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00496	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0049e	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR tv223[rsp]
  004a6	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  004aa	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205358
  004b6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205359
  004c2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004c7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004cc	41 b9 03 00 00
	00		 mov	 r9d, 3
  004d2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205360
  004d9	ba d5 03 00 00	 mov	 edx, 981		; 000003d5H
  004de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205361
  004e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 982  : 
; 983  :     return rc;

  004eb	8b 44 24 68	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@logopt_cmd:

; 984  : }

  004ef	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  004f7	48 33 cc	 xor	 rcx, rsp
  004fa	e8 00 00 00 00	 call	 __security_check_cookie
  004ff	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  00506	c3		 ret	 0
logopt_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
rc$ = 64
tv66 = 72
tv135 = 80
argc$ = 112
argv$ = 120
cmdline$ = 128
log_cmd	PROC

; 888  : {

$LN14:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 889  :     int rc = 0;

  00012	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN4@log_cmd:

; 890  :     UNREFERENCED(cmdline);

  0001a	33 c0		 xor	 eax, eax
  0001c	85 c0		 test	 eax, eax
  0001e	75 fa		 jne	 SHORT $LN4@log_cmd

; 891  :     if ( argc > 2 )

  00020	83 7c 24 70 02	 cmp	 DWORD PTR argc$[rsp], 2
  00025	7e 75		 jle	 SHORT $LN5@log_cmd

; 892  :     {
; 893  :         // "Invalid command usage. Type 'help %s' for assistance."
; 894  :         WRMSG( HHC02299, "E", argv[0] );

  00027	b8 08 00 00 00	 mov	 eax, 8
  0002c	48 6b c0 00	 imul	 rax, rax, 0
  00030	48 89 44 24 48	 mov	 QWORD PTR tv66[rsp], rax
  00035	b9 01 00 00 00	 mov	 ecx, 1
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00040	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00045	48 8b 54 24 48	 mov	 rdx, QWORD PTR tv66[rsp]
  0004a	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0004e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205288
  0005a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205289
  00066	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0006b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00070	41 b9 03 00 00
	00		 mov	 r9d, 3
  00076	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205290
  0007d	ba 7e 03 00 00	 mov	 edx, 894		; 0000037eH
  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205291
  00089	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 895  :         rc = -1;

  0008f	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 896  :     }

  00097	e9 0e 01 00 00	 jmp	 $LN6@log_cmd
$LN5@log_cmd:

; 897  :     else if ( argc == 2 )

  0009c	83 7c 24 70 02	 cmp	 DWORD PTR argc$[rsp], 2
  000a1	75 4f		 jne	 SHORT $LN7@log_cmd

; 898  :     {
; 899  :         if ( CMD(argv[1],off,3) )

  000a3	b8 08 00 00 00	 mov	 eax, 8
  000a8	48 6b c0 01	 imul	 rax, rax, 1
  000ac	41 b8 03 00 00
	00		 mov	 r8d, 3
  000b2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  000b7	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205296
  000c2	e8 00 00 00 00	 call	 strcaseabbrev
  000c7	85 c0		 test	 eax, eax
  000c9	74 0a		 je	 SHORT $LN9@log_cmd

; 900  :             log_sethrdcpy(NULL);

  000cb	33 c9		 xor	 ecx, ecx
  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_log_sethrdcpy
  000d3	eb 18		 jmp	 SHORT $LN10@log_cmd
$LN9@log_cmd:

; 901  :         else
; 902  :             log_sethrdcpy(argv[1]);

  000d5	b8 08 00 00 00	 mov	 eax, 8
  000da	48 6b c0 01	 imul	 rax, rax, 1
  000de	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  000e3	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_log_sethrdcpy
$LN10@log_cmd:

; 903  :     }

  000ed	e9 b8 00 00 00	 jmp	 $LN8@log_cmd
$LN7@log_cmd:

; 904  :     else
; 905  :     {
; 906  :         if ( strlen( log_dsphrdcpy() ) == 0 )

  000f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_log_dsphrdcpy
  000f8	48 8b c8	 mov	 rcx, rax
  000fb	e8 00 00 00 00	 call	 strlen
  00100	48 85 c0	 test	 rax, rax
  00103	75 49		 jne	 SHORT $LN11@log_cmd

; 907  :             // "Logger: log switched off"
; 908  :             WRMSG( HHC02106, "I" );

  00105	b9 01 00 00 00	 mov	 ecx, 1
  0010a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00110	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205299
  00117	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0011c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205300
  00123	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00128	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0012d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00133	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205301
  0013a	ba 8c 03 00 00	 mov	 edx, 908		; 0000038cH
  0013f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205302
  00146	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0014c	eb 5c		 jmp	 SHORT $LN12@log_cmd
$LN11@log_cmd:

; 909  :         else
; 910  :             // "Logger: log to %s"
; 911  :             WRMSG( HHC02105, "I", log_dsphrdcpy() );

  0014e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_log_dsphrdcpy
  00154	48 89 44 24 50	 mov	 QWORD PTR tv135[rsp], rax
  00159	b9 01 00 00 00	 mov	 ecx, 1
  0015e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00164	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv135[rsp]
  00169	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0016e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205303
  00175	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0017a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205304
  00181	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00186	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0018b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00191	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205305
  00198	ba 8f 03 00 00	 mov	 edx, 911		; 0000038fH
  0019d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205306
  001a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN12@log_cmd:
$LN8@log_cmd:
$LN6@log_cmd:

; 912  :     }
; 913  : 
; 914  :     return rc;

  001aa	8b 44 24 40	 mov	 eax, DWORD PTR rc$[rsp]

; 915  : }

  001ae	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001b2	c3		 ret	 0
log_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
x$1 = 32
tv75 = 36
argc$ = 64
argv$ = 72
cmdline$ = 80
History	PROC

; 842  : {

$LN19:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@History:

; 843  :     UNREFERENCED(cmdline);

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@History

; 844  :     /* last stored command is for sure command 'hst' so remove it
; 845  :        this is the only place where history_remove is called */
; 846  :     history_remove();

  00018	e8 00 00 00 00	 call	 history_remove

; 847  :     history_requested = 1;

  0001d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR history_requested, 1

; 848  :     /* only 'hst' called */
; 849  :     if (argc == 1) {

  00027	83 7c 24 40 01	 cmp	 DWORD PTR argc$[rsp], 1
  0002c	75 20		 jne	 SHORT $LN7@History

; 850  :       if (history_relative_line(-1) == -1)

  0002e	b9 ff ff ff ff	 mov	 ecx, -1
  00033	e8 00 00 00 00	 call	 history_relative_line
  00038	83 f8 ff	 cmp	 eax, -1
  0003b	75 0a		 jne	 SHORT $LN8@History

; 851  :         history_requested = 0;

  0003d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR history_requested, 0
$LN8@History:

; 852  :       return 0;

  00047	33 c0		 xor	 eax, eax
  00049	e9 b7 00 00 00	 jmp	 $LN1@History
$LN7@History:

; 853  :     }
; 854  :     /* hst with argument called */
; 855  :     if (argc == 2) {

  0004e	83 7c 24 40 02	 cmp	 DWORD PTR argc$[rsp], 2
  00053	0f 85 aa 00 00
	00		 jne	 $LN9@History

; 856  :       int x;
; 857  :       switch (argv[1][0]) {

  00059	b8 08 00 00 00	 mov	 eax, 8
  0005e	48 6b c0 01	 imul	 rax, rax, 1
  00062	b9 01 00 00 00	 mov	 ecx, 1
  00067	48 6b c9 00	 imul	 rcx, rcx, 0
  0006b	48 8b 54 24 48	 mov	 rdx, QWORD PTR argv$[rsp]
  00070	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00074	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00078	88 44 24 24	 mov	 BYTE PTR tv75[rsp], al
  0007c	80 7c 24 24 6c	 cmp	 BYTE PTR tv75[rsp], 108	; 0000006cH
  00081	74 02		 je	 SHORT $LN10@History
  00083	eb 11		 jmp	 SHORT $LN11@History
$LN10@History:

; 858  :       case 'l':
; 859  :         history_show();

  00085	e8 00 00 00 00	 call	 history_show

; 860  :         history_requested = 0;

  0008a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR history_requested, 0

; 861  :         break;

  00094	eb 6d		 jmp	 SHORT $LN5@History
$LN11@History:

; 862  :       default:
; 863  :         x = atoi(argv[1]);

  00096	b8 08 00 00 00	 mov	 eax, 8
  0009b	48 6b c0 01	 imul	 rax, rax, 1
  0009f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR argv$[rsp]
  000a4	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  000ae	89 44 24 20	 mov	 DWORD PTR x$1[rsp], eax

; 864  :         if (x>0) {

  000b2	83 7c 24 20 00	 cmp	 DWORD PTR x$1[rsp], 0
  000b7	7e 1a		 jle	 SHORT $LN12@History

; 865  :           if (history_absolute_line(x) == -1)

  000b9	8b 4c 24 20	 mov	 ecx, DWORD PTR x$1[rsp]
  000bd	e8 00 00 00 00	 call	 history_absolute_line
  000c2	83 f8 ff	 cmp	 eax, -1
  000c5	75 0a		 jne	 SHORT $LN14@History

; 866  :             history_requested = 0;

  000c7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR history_requested, 0
$LN14@History:

; 867  :         }

  000d1	eb 30		 jmp	 SHORT $LN13@History
$LN12@History:

; 868  :         else {
; 869  :           if (x<0) {

  000d3	83 7c 24 20 00	 cmp	 DWORD PTR x$1[rsp], 0
  000d8	7d 1a		 jge	 SHORT $LN15@History

; 870  :             if (history_relative_line(x) == -1)

  000da	8b 4c 24 20	 mov	 ecx, DWORD PTR x$1[rsp]
  000de	e8 00 00 00 00	 call	 history_relative_line
  000e3	83 f8 ff	 cmp	 eax, -1
  000e6	75 0a		 jne	 SHORT $LN17@History

; 871  :               history_requested = 0;

  000e8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR history_requested, 0
$LN17@History:

; 872  :           }

  000f2	eb 0f		 jmp	 SHORT $LN16@History
$LN15@History:

; 873  :           else {
; 874  :             /* x == 0 */
; 875  :             history_show();

  000f4	e8 00 00 00 00	 call	 history_show

; 876  :             history_requested = 0;

  000f9	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR history_requested, 0
$LN16@History:
$LN13@History:
$LN5@History:
$LN9@History:

; 877  :           }
; 878  :         }
; 879  :       }
; 880  :     }
; 881  :     return 0;

  00103	33 c0		 xor	 eax, eax
$LN1@History:

; 882  : }

  00105	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00109	c3		 ret	 0
History	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
arg$ = 48
quit_thread PROC

; 737  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@quit_threa:

; 738  :     static const useconds_t  quitdelay_usecs  =
; 739  :         (2 * WAIT_FOR_KEYBOARD_INPUT_SLEEP_MILLISECS) * 1000;
; 740  : 
; 741  :     UNREFERENCED( arg );

  00009	33 c0		 xor	 eax, eax
  0000b	85 c0		 test	 eax, eax
  0000d	75 fa		 jne	 SHORT $LN4@quit_threa

; 742  : 
; 743  :     // Wait twice as long as the panel thread waits for
; 744  :     // keyboard input so that it has time to process its
; 745  :     // messages at least twice to ensure that the "exit"
; 746  :     // command has time to be echoed to the screen.
; 747  : 
; 748  :     usleep( quitdelay_usecs );

  0000f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?quitdelay_usecs@?1??quit_thread@@9@9
  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_usleep

; 749  : 
; 750  :     // Now proceed with a normal shutdown, which waits for
; 751  :     // the guest to quiesce itself beforehand (if appropriate)
; 752  :     // or else simply proceeds with a normal Hercules shutdown
; 753  :     // via our "do_shutdown_now" helper function.
; 754  : 
; 755  :     do_shutdown();  // ALWAYS go through this function!

  0001b	e8 00 00 00 00	 call	 do_shutdown

; 756  :     return NULL;

  00020	33 c0		 xor	 eax, eax

; 757  : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
quit_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
argc$ = 8
argv$ = 16
cmdline$ = 24
comment_cmd PROC

; 724  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
$LN4@comment_cm:

; 725  :     UNREFERENCED(argc);

  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@comment_cm
$LN7@comment_cm:

; 726  :     UNREFERENCED(argv);

  00014	33 c0		 xor	 eax, eax
  00016	85 c0		 test	 eax, eax
  00018	75 fa		 jne	 SHORT $LN7@comment_cm
$LN10@comment_cm:

; 727  :     UNREFERENCED(cmdline);

  0001a	33 c0		 xor	 eax, eax
  0001c	85 c0		 test	 eax, eax
  0001e	75 fa		 jne	 SHORT $LN10@comment_cm

; 728  :     // Do nothing; command has already been echo'ed to console...
; 729  :     return 0;   // (make compiler happy)

  00020	33 c0		 xor	 eax, eax

; 730  : }

  00022	c3		 ret	 0
comment_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
withhdr$1 = 64
tv95 = 68
tv129 = 72
rc$ = 76
tv76 = 80
argc$ = 112
argv$ = 120
cmdline$ = 128
msg_cmd	PROC

; 700  : {

$LN13:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@msg_cmd:

; 701  :     int rc;
; 702  : 
; 703  :     UPPER_ARGV_0( argv );

  00012	48 83 7c 24 78
	00		 cmp	 QWORD PTR argv$[rsp], 0
  00018	74 3e		 je	 SHORT $LN5@msg_cmd
  0001a	b8 08 00 00 00	 mov	 eax, 8
  0001f	48 6b c0 00	 imul	 rax, rax, 0
  00023	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00028	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0002d	74 29		 je	 SHORT $LN5@msg_cmd
  0002f	b8 08 00 00 00	 mov	 eax, 8
  00034	48 6b c0 00	 imul	 rax, rax, 0
  00038	b9 08 00 00 00	 mov	 ecx, 8
  0003d	48 6b c9 00	 imul	 rcx, rcx, 0
  00041	48 8b 54 24 78	 mov	 rdx, QWORD PTR argv$[rsp]
  00046	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0004a	48 8b 44 24 78	 mov	 rax, QWORD PTR argv$[rsp]
  0004f	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00053	e8 00 00 00 00	 call	 strupper
$LN5@msg_cmd:
  00058	33 c0		 xor	 eax, eax
  0005a	85 c0		 test	 eax, eax
  0005c	75 b4		 jne	 SHORT $LN4@msg_cmd

; 704  : 
; 705  :     if (argc < 2)

  0005e	83 7c 24 70 02	 cmp	 DWORD PTR argc$[rsp], 2
  00063	7d 72		 jge	 SHORT $LN6@msg_cmd

; 706  :     {
; 707  :         // "Invalid command usage. Type 'help %s' for assistance."
; 708  :         WRMSG( HHC02299, "E", argv[0] );

  00065	b8 08 00 00 00	 mov	 eax, 8
  0006a	48 6b c0 00	 imul	 rax, rax, 0
  0006e	48 89 44 24 50	 mov	 QWORD PTR tv76[rsp], rax
  00073	b9 01 00 00 00	 mov	 ecx, 1
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0007e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00083	48 8b 54 24 50	 mov	 rdx, QWORD PTR tv76[rsp]
  00088	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0008c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00091	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205134
  00098	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205135
  000a4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000a9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ae	41 b9 03 00 00
	00		 mov	 r9d, 3
  000b4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205136
  000bb	ba c4 02 00 00	 mov	 edx, 708		; 000002c4H
  000c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205137
  000c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 709  :         rc = -1;

  000cd	c7 44 24 4c ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 710  :     }

  000d5	eb 7c		 jmp	 SHORT $LN7@msg_cmd
$LN6@msg_cmd:

; 711  :     else
; 712  :     {
; 713  :         bool withhdr = CMD( argv[0], MSGNOH, 6 ) ? false : true;

  000d7	b8 08 00 00 00	 mov	 eax, 8
  000dc	48 6b c0 00	 imul	 rax, rax, 0
  000e0	41 b8 06 00 00
	00		 mov	 r8d, 6
  000e6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  000eb	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205138
  000f6	e8 00 00 00 00	 call	 strcaseabbrev
  000fb	85 c0		 test	 eax, eax
  000fd	74 0a		 je	 SHORT $LN9@msg_cmd
  000ff	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv95[rsp], 0
  00107	eb 08		 jmp	 SHORT $LN10@msg_cmd
$LN9@msg_cmd:
  00109	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv95[rsp], 1
$LN10@msg_cmd:
  00111	83 7c 24 44 00	 cmp	 DWORD PTR tv95[rsp], 0
  00116	75 0a		 jne	 SHORT $LN11@msg_cmd
  00118	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv129[rsp], 0
  00120	eb 08		 jmp	 SHORT $LN12@msg_cmd
$LN11@msg_cmd:
  00122	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv129[rsp], 1
$LN12@msg_cmd:
  0012a	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv129[rsp]
  0012f	88 44 24 40	 mov	 BYTE PTR withhdr$1[rsp], al

; 714  :         rc = message_cmd( argc, argv, cmdline, withhdr );

  00133	44 0f b6 4c 24
	40		 movzx	 r9d, BYTE PTR withhdr$1[rsp]
  00139	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR cmdline$[rsp]
  00141	48 8b 54 24 78	 mov	 rdx, QWORD PTR argv$[rsp]
  00146	8b 4c 24 70	 mov	 ecx, DWORD PTR argc$[rsp]
  0014a	e8 00 00 00 00	 call	 message_cmd
  0014f	89 44 24 4c	 mov	 DWORD PTR rc$[rsp], eax
$LN7@msg_cmd:

; 715  :     }
; 716  : 
; 717  :     return rc;

  00153	8b 44 24 4c	 mov	 eax, DWORD PTR rc$[rsp]

; 718  : }

  00157	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0015b	c3		 ret	 0
msg_cmd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
i$ = 64
toskip$ = 68
state$ = 72
msgtxt$ = 80
mytm$ = 88
lparname$1 = 96
tv146 = 104
msg$2 = 112
mytime$ = 120
msgbuf$3 = 128
__$ArrayPad$ = 384
argc$ = 416
argv$ = 424
cmdline$ = 432
withhdr$ = 440
message_cmd PROC

; 627  : {

  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 81 ec 98 01
	00 00		 sub	 rsp, 408		; 00000198H
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00021	48 33 c4	 xor	 rax, rsp
  00024	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 628  :     char    *msgtxt;
; 629  :     time_t  mytime;
; 630  :     struct  tm *mytm;
; 631  :     int     toskip,state,i;
; 632  :     msgtxt=NULL;

  0002c	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR msgtxt$[rsp], 0

; 633  :     toskip=3;

  00035	c7 44 24 44 03
	00 00 00	 mov	 DWORD PTR toskip$[rsp], 3

; 634  :     if (argc>2)

  0003d	83 bc 24 a0 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00045	7e 33		 jle	 SHORT $LN5@message_cm

; 635  :     {
; 636  :         if ( CMD(argv[2],AT,2) )

  00047	b8 08 00 00 00	 mov	 eax, 8
  0004c	48 6b c0 02	 imul	 rax, rax, 2
  00050	41 b8 02 00 00
	00		 mov	 r8d, 2
  00056	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0005e	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205102
  00069	e8 00 00 00 00	 call	 strcaseabbrev
  0006e	85 c0		 test	 eax, eax
  00070	74 08		 je	 SHORT $LN6@message_cm

; 637  :         {
; 638  :             toskip=5;

  00072	c7 44 24 44 05
	00 00 00	 mov	 DWORD PTR toskip$[rsp], 5
$LN6@message_cm:
$LN5@message_cm:

; 639  :         }
; 640  :     }
; 641  : 
; 642  :     for (state=0,i=0;cmdline[i];i++)

  0007a	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR state$[rsp], 0
  00082	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0008a	eb 0a		 jmp	 SHORT $LN4@message_cm
$LN2@message_cm:
  0008c	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00090	ff c0		 inc	 eax
  00092	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN4@message_cm:
  00096	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  0009b	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR cmdline$[rsp]
  000a3	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  000a7	85 c0		 test	 eax, eax
  000a9	74 78		 je	 SHORT $LN3@message_cm

; 643  :     {
; 644  :         if (!state)

  000ab	83 7c 24 48 00	 cmp	 DWORD PTR state$[rsp], 0
  000b0	75 33		 jne	 SHORT $LN7@message_cm

; 645  :         {
; 646  :             if (cmdline[i]!=' ')

  000b2	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  000b7	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR cmdline$[rsp]
  000bf	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  000c3	83 f8 20	 cmp	 eax, 32			; 00000020H
  000c6	74 1b		 je	 SHORT $LN9@message_cm

; 647  :             {
; 648  :                 state=1;

  000c8	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR state$[rsp], 1

; 649  :                 toskip--;

  000d0	8b 44 24 44	 mov	 eax, DWORD PTR toskip$[rsp]
  000d4	ff c8		 dec	 eax
  000d6	89 44 24 44	 mov	 DWORD PTR toskip$[rsp], eax

; 650  :                 if (!toskip) break;

  000da	83 7c 24 44 00	 cmp	 DWORD PTR toskip$[rsp], 0
  000df	75 02		 jne	 SHORT $LN10@message_cm
  000e1	eb 40		 jmp	 SHORT $LN3@message_cm
$LN10@message_cm:
$LN9@message_cm:

; 651  :             }
; 652  :         }

  000e3	eb 39		 jmp	 SHORT $LN8@message_cm
$LN7@message_cm:

; 653  :         else
; 654  :         {
; 655  :             if (cmdline[i]==' ')

  000e5	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  000ea	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR cmdline$[rsp]
  000f2	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  000f6	83 f8 20	 cmp	 eax, 32			; 00000020H
  000f9	75 23		 jne	 SHORT $LN11@message_cm

; 656  :             {
; 657  :                 state=0;

  000fb	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR state$[rsp], 0

; 658  :                 if (toskip==1)

  00103	83 7c 24 44 01	 cmp	 DWORD PTR toskip$[rsp], 1
  00108	75 14		 jne	 SHORT $LN12@message_cm

; 659  :                 {
; 660  :                     i++;

  0010a	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  0010e	ff c0		 inc	 eax
  00110	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax

; 661  :                     toskip=0;

  00114	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR toskip$[rsp], 0

; 662  :                     break;

  0011c	eb 05		 jmp	 SHORT $LN3@message_cm
$LN12@message_cm:
$LN11@message_cm:
$LN8@message_cm:

; 663  :                 }
; 664  :             }
; 665  :         }
; 666  :     }

  0011e	e9 69 ff ff ff	 jmp	 $LN2@message_cm
$LN3@message_cm:

; 667  :     if (!toskip || !cmdline[i])

  00123	83 7c 24 44 00	 cmp	 DWORD PTR toskip$[rsp], 0
  00128	74 15		 je	 SHORT $LN14@message_cm
  0012a	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  0012f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR cmdline$[rsp]
  00137	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0013b	85 c0		 test	 eax, eax
  0013d	75 18		 jne	 SHORT $LN13@message_cm
$LN14@message_cm:

; 668  :     {
; 669  :         msgtxt=&cmdline[i];

  0013f	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00144	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR cmdline$[rsp]
  0014c	48 03 c8	 add	 rcx, rax
  0014f	48 8b c1	 mov	 rax, rcx
  00152	48 89 44 24 50	 mov	 QWORD PTR msgtxt$[rsp], rax
$LN13@message_cm:

; 670  :     }
; 671  :     if (msgtxt)

  00157	48 83 7c 24 50
	00		 cmp	 QWORD PTR msgtxt$[rsp], 0
  0015d	0f 84 08 01 00
	00		 je	 $LN15@message_cm

; 672  :     {
; 673  :         char* msg = msgtxt;

  00163	48 8b 44 24 50	 mov	 rax, QWORD PTR msgtxt$[rsp]
  00168	48 89 44 24 70	 mov	 QWORD PTR msg$2[rsp], rax

; 674  :         char msgbuf[256];
; 675  : 
; 676  :         if (withhdr)

  0016d	0f b6 84 24 b8
	01 00 00	 movzx	 eax, BYTE PTR withhdr$[rsp]
  00175	85 c0		 test	 eax, eax
  00177	0f 84 a5 00 00
	00		 je	 $LN16@message_cm

; 677  :         {
; 678  :             char *lparname = str_lparname();

  0017d	e8 00 00 00 00	 call	 str_lparname
  00182	48 89 44 24 60	 mov	 QWORD PTR lparname$1[rsp], rax

; 679  :             time(&mytime);

  00187	48 8d 4c 24 78	 lea	 rcx, QWORD PTR mytime$[rsp]
  0018c	e8 00 00 00 00	 call	 time

; 680  :             mytm=localtime(&mytime);

  00191	48 8d 4c 24 78	 lea	 rcx, QWORD PTR mytime$[rsp]
  00196	e8 00 00 00 00	 call	 localtime
  0019b	48 89 44 24 58	 mov	 QWORD PTR mytm$[rsp], rax

; 681  :             MSGBUF(msgbuf, " %2.2d:%2.2d:%2.2d  * MSG FROM %s: %s",

  001a0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR lparname$1[rsp]
  001a5	e8 00 00 00 00	 call	 strlen
  001aa	48 85 c0	 test	 rax, rax
  001ad	74 0c		 je	 SHORT $LN18@message_cm
  001af	48 8b 44 24 60	 mov	 rax, QWORD PTR lparname$1[rsp]
  001b4	48 89 44 24 68	 mov	 QWORD PTR tv146[rsp], rax
  001b9	eb 0c		 jmp	 SHORT $LN19@message_cm
$LN18@message_cm:
  001bb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG205113
  001c2	48 89 44 24 68	 mov	 QWORD PTR tv146[rsp], rax
$LN19@message_cm:
  001c7	48 8b 44 24 50	 mov	 rax, QWORD PTR msgtxt$[rsp]
  001cc	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  001d1	48 8b 44 24 68	 mov	 rax, QWORD PTR tv146[rsp]
  001d6	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  001db	48 8b 44 24 58	 mov	 rax, QWORD PTR mytm$[rsp]
  001e0	8b 00		 mov	 eax, DWORD PTR [rax]
  001e2	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  001e6	48 8b 44 24 58	 mov	 rax, QWORD PTR mytm$[rsp]
  001eb	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  001ee	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  001f2	48 8b 44 24 58	 mov	 rax, QWORD PTR mytm$[rsp]
  001f7	44 8b 48 08	 mov	 r9d, DWORD PTR [rax+8]
  001fb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205114
  00202	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00207	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$3[rsp]
  0020f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 682  :                      mytm->tm_hour,
; 683  :                      mytm->tm_min,
; 684  :                      mytm->tm_sec,
; 685  :                      (strlen(lparname)!=0)? lparname: "HERCULES",
; 686  :                      msgtxt );
; 687  :             msg = msgbuf;

  00215	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR msgbuf$3[rsp]
  0021d	48 89 44 24 70	 mov	 QWORD PTR msg$2[rsp], rax
$LN16@message_cm:

; 688  :         }
; 689  : 
; 690  :         LOGMSG( "%s\n", msg );

  00222	b9 01 00 00 00	 mov	 ecx, 1
  00227	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0022d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR msg$2[rsp]
  00232	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00237	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205115
  0023e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00243	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00248	41 b9 03 00 00
	00		 mov	 r9d, 3
  0024e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205116
  00255	ba b2 02 00 00	 mov	 edx, 690		; 000002b2H
  0025a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205117
  00261	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 691  :         return 0;

  00267	33 c0		 xor	 eax, eax
  00269	eb 05		 jmp	 SHORT $LN1@message_cm
$LN15@message_cm:

; 692  :     }
; 693  :     return -1;

  0026b	b8 ff ff ff ff	 mov	 eax, -1
$LN1@message_cm:

; 694  : }

  00270	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00278	48 33 cc	 xor	 rcx, rsp
  0027b	e8 00 00 00 00	 call	 __security_check_cookie
  00280	48 81 c4 98 01
	00 00		 add	 rsp, 408		; 00000198H
  00287	c3		 ret	 0
message_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
interval$1 = 80
rc$2 = 84
len$3 = 88
c$4 = 96
pszCurrIntervalStartDateTime$5 = 104
pszPrevIntervalStartDateTime$6 = 112
pszCurrentDateTime$7 = 120
tv308 = 128
tv354 = 132
current_tm$8 = 136
since_midnight$9 = 144
current_time$10 = 152
current_time$11 = 160
tv79 = 168
tv144 = 176
tv183 = 184
tv200 = 192
buf$ = 208
__$ArrayPad$ = 336
argc$ = 368
argv$ = 376
cmdline$ = 384
maxrates_cmd PROC

; 481  : {

$LN33:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@maxrates_c:

; 482  :     char buf[128];
; 483  : 
; 484  :     UPPER_ARGV_0( argv );

  00027	48 83 bc 24 78
	01 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00030	74 47		 je	 SHORT $LN11@maxrates_c
  00032	b8 08 00 00 00	 mov	 eax, 8
  00037	48 6b c0 00	 imul	 rax, rax, 0
  0003b	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00043	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00048	74 2f		 je	 SHORT $LN11@maxrates_c
  0004a	b8 08 00 00 00	 mov	 eax, 8
  0004f	48 6b c0 00	 imul	 rax, rax, 0
  00053	b9 08 00 00 00	 mov	 ecx, 8
  00058	48 6b c9 00	 imul	 rcx, rcx, 0
  0005c	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00064	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00068	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00070	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00074	e8 00 00 00 00	 call	 strupper
$LN11@maxrates_c:
  00079	33 c0		 xor	 eax, eax
  0007b	85 c0		 test	 eax, eax
  0007d	75 a8		 jne	 SHORT $LN4@maxrates_c
$LN7@maxrates_c:

; 485  : 
; 486  :     UNREFERENCED(cmdline);

  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 fa		 jne	 SHORT $LN7@maxrates_c

; 487  : 
; 488  :     if (argc > 1)

  00085	83 bc 24 70 01
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0008d	0f 8e d5 03 00
	00		 jle	 $LN12@maxrates_c

; 489  :     {
; 490  :         if (argc > 2)

  00093	83 bc 24 70 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0009b	0f 8e 82 00 00
	00		 jle	 $LN14@maxrates_c

; 491  :         {
; 492  :             WRMSG(HHC02205, "E", argv[2], "");

  000a1	b8 08 00 00 00	 mov	 eax, 8
  000a6	48 6b c0 02	 imul	 rax, rax, 2
  000aa	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv79[rsp], rax
  000b2	b9 01 00 00 00	 mov	 ecx, 1
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204987
  000c4	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000c9	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000d1	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR tv79[rsp]
  000d9	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000dd	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204988
  000e9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204989
  000f5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000fa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ff	41 b9 03 00 00
	00		 mov	 r9d, 3
  00105	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204990
  0010c	ba ec 01 00 00	 mov	 edx, 492		; 000001ecH
  00111	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204991
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 493  :         }

  0011e	e9 40 03 00 00	 jmp	 $LN15@maxrates_c
$LN14@maxrates_c:

; 494  :         else if ( CMD( argv[1],midnight,3 ) )

  00123	b8 08 00 00 00	 mov	 eax, 8
  00128	48 6b c0 01	 imul	 rax, rax, 1
  0012c	41 b8 03 00 00
	00		 mov	 r8d, 3
  00132	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0013a	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0013e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204994
  00145	e8 00 00 00 00	 call	 strcaseabbrev
  0014a	85 c0		 test	 eax, eax
  0014c	0f 84 07 01 00
	00		 je	 $LN16@maxrates_c

; 495  :         {
; 496  :             time_t      current_time;
; 497  :             struct tm  *current_tm;
; 498  :             time_t      since_midnight = 0;

  00152	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR since_midnight$9[rsp], 0

; 499  : 
; 500  :             current_time = time( NULL );

  0015e	33 c9		 xor	 ecx, ecx
  00160	e8 00 00 00 00	 call	 time
  00165	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR current_time$10[rsp], rax

; 501  :             current_tm   = localtime( &current_time );

  0016d	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR current_time$10[rsp]
  00175	e8 00 00 00 00	 call	 localtime
  0017a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR current_tm$8[rsp], rax

; 502  :             since_midnight = (time_t)( ( ( current_tm->tm_hour  * 60 ) +

  00182	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR current_tm$8[rsp]
  0018a	6b 40 08 3c	 imul	 eax, DWORD PTR [rax+8], 60 ; 0000003cH
  0018e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR current_tm$8[rsp]
  00196	03 41 04	 add	 eax, DWORD PTR [rcx+4]
  00199	6b c0 3c	 imul	 eax, eax, 60		; 0000003cH
  0019c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR current_tm$8[rsp]
  001a4	03 01		 add	 eax, DWORD PTR [rcx]
  001a6	48 98		 cdqe
  001a8	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR since_midnight$9[rsp], rax

; 503  :                                            current_tm->tm_min ) * 60   +
; 504  :                                            current_tm->tm_sec );
; 505  :             curr_int_start_time = current_time - since_midnight;

  001b0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR since_midnight$9[rsp]
  001b8	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR current_time$10[rsp]
  001c0	48 2b c8	 sub	 rcx, rax
  001c3	48 8b c1	 mov	 rax, rcx
  001c6	48 89 05 00 00
	00 00		 mov	 QWORD PTR curr_int_start_time, rax

; 506  : 
; 507  :             maxrates_rpt_intvl = 1440;

  001cd	c7 05 00 00 00
	00 a0 05 00 00	 mov	 DWORD PTR maxrates_rpt_intvl, 1440 ; 000005a0H

; 508  :             WRMSG( HHC02204, "I", argv[0], "midnight" );

  001d7	b8 08 00 00 00	 mov	 eax, 8
  001dc	48 6b c0 00	 imul	 rax, rax, 0
  001e0	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv144[rsp], rax
  001e8	b9 01 00 00 00	 mov	 ecx, 1
  001ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204995
  001fa	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001ff	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00207	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR tv144[rsp]
  0020f	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00213	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00218	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204996
  0021f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00224	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204997
  0022b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00230	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00235	41 b9 03 00 00
	00		 mov	 r9d, 3
  0023b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204998
  00242	ba fc 01 00 00	 mov	 edx, 508		; 000001fcH
  00247	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204999
  0024e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 509  :         }

  00254	e9 0a 02 00 00	 jmp	 $LN17@maxrates_c
$LN16@maxrates_c:

; 510  :         else if (CMD( argv[1], RESET, 5 ))

  00259	b8 08 00 00 00	 mov	 eax, 8
  0025e	48 6b c0 01	 imul	 rax, rax, 1
  00262	41 b8 05 00 00
	00		 mov	 r8d, 5
  00268	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00270	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00274	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205002
  0027b	e8 00 00 00 00	 call	 strcaseabbrev
  00280	85 c0		 test	 eax, eax
  00282	74 73		 je	 SHORT $LN18@maxrates_c

; 511  :         {
; 512  :             curr_high_mips_rate = 0;

  00284	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR curr_high_mips_rate, 0

; 513  :             curr_high_sios_rate = 0;

  0028e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR curr_high_sios_rate, 0

; 514  :             WRMSG( HHC02268, "I", "Done!" );

  00298	b9 01 00 00 00	 mov	 ecx, 1
  0029d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205003
  002aa	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205004
  002b6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205005
  002c2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002c7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002cc	41 b9 03 00 00
	00		 mov	 r9d, 3
  002d2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205006
  002d9	ba 02 02 00 00	 mov	 edx, 514		; 00000202H
  002de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205007
  002e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 515  :             return 0;

  002eb	33 c0		 xor	 eax, eax
  002ed	e9 6d 07 00 00	 jmp	 $LN1@maxrates_c

; 516  :         }

  002f2	e9 6c 01 00 00	 jmp	 $LN19@maxrates_c
$LN18@maxrates_c:

; 517  :         else
; 518  :         {
; 519  :             int   interval = 0;

  002f7	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR interval$1[rsp], 0

; 520  :             BYTE  c;
; 521  :             if ( sscanf( argv[1], "%d%c", &interval, &c ) != 1 || interval < 1 )

  002ff	b8 08 00 00 00	 mov	 eax, 8
  00304	48 6b c0 01	 imul	 rax, rax, 1
  00308	4c 8d 4c 24 60	 lea	 r9, QWORD PTR c$4[rsp]
  0030d	4c 8d 44 24 50	 lea	 r8, QWORD PTR interval$1[rsp]
  00312	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG205011
  00319	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00321	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00325	e8 00 00 00 00	 call	 sscanf
  0032a	83 f8 01	 cmp	 eax, 1
  0032d	75 0b		 jne	 SHORT $LN22@maxrates_c
  0032f	83 7c 24 50 01	 cmp	 DWORD PTR interval$1[rsp], 1
  00334	0f 8d 82 00 00
	00		 jge	 $LN20@maxrates_c
$LN22@maxrates_c:

; 522  :             {
; 523  :                 WRMSG(HHC02205, "E", argv[1], ": invalid maxrates interval" );

  0033a	b8 08 00 00 00	 mov	 eax, 8
  0033f	48 6b c0 01	 imul	 rax, rax, 1
  00343	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv183[rsp], rax
  0034b	b9 01 00 00 00	 mov	 ecx, 1
  00350	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00356	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205012
  0035d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00362	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0036a	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR tv183[rsp]
  00372	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00376	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0037b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205013
  00382	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00387	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205014
  0038e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00393	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00398	41 b9 03 00 00
	00		 mov	 r9d, 3
  0039e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205015
  003a5	ba 0b 02 00 00	 mov	 edx, 523		; 0000020bH
  003aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205016
  003b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 524  :             }

  003b7	e9 a7 00 00 00	 jmp	 $LN21@maxrates_c
$LN20@maxrates_c:

; 525  :             else
; 526  :             {
; 527  :                 MSGBUF( buf, "%d minutes", interval);

  003bc	44 8b 4c 24 50	 mov	 r9d, DWORD PTR interval$1[rsp]
  003c1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205017
  003c8	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  003cd	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  003d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 528  :                 maxrates_rpt_intvl = interval;

  003db	8b 44 24 50	 mov	 eax, DWORD PTR interval$1[rsp]
  003df	89 05 00 00 00
	00		 mov	 DWORD PTR maxrates_rpt_intvl, eax

; 529  :                 WRMSG(HHC02204, "I", argv[0], buf );

  003e5	b8 08 00 00 00	 mov	 eax, 8
  003ea	48 6b c0 00	 imul	 rax, rax, 0
  003ee	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv200[rsp], rax
  003f6	b9 01 00 00 00	 mov	 ecx, 1
  003fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00401	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00409	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0040e	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00416	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR tv200[rsp]
  0041e	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00422	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00427	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205018
  0042e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00433	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205019
  0043a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0043f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00444	41 b9 03 00 00
	00		 mov	 r9d, 3
  0044a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205020
  00451	ba 11 02 00 00	 mov	 edx, 529		; 00000211H
  00456	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205021
  0045d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN21@maxrates_c:
$LN19@maxrates_c:
$LN17@maxrates_c:
$LN15@maxrates_c:

; 530  :             }
; 531  :         }
; 532  :     }

  00463	e9 f5 05 00 00	 jmp	 $LN13@maxrates_c
$LN12@maxrates_c:

; 533  :     else
; 534  :     {
; 535  :         char*   pszPrevIntervalStartDateTime = NULL;

  00468	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR pszPrevIntervalStartDateTime$6[rsp], 0

; 536  :         char*   pszCurrIntervalStartDateTime = NULL;

  00471	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR pszCurrIntervalStartDateTime$5[rsp], 0

; 537  :         char*   pszCurrentDateTime           = NULL;

  0047a	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR pszCurrentDateTime$7[rsp], 0

; 538  :         time_t  current_time    = 0;

  00483	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR current_time$11[rsp], 0

; 539  :         int     rc              = TRUE;

  0048f	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR rc$2[rsp], 1

; 540  :         size_t  len             = 0;

  00497	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR len$3[rsp], 0

; 541  : 
; 542  :         current_time = time( NULL );

  004a0	33 c9		 xor	 ecx, ecx
  004a2	e8 00 00 00 00	 call	 time
  004a7	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR current_time$11[rsp], rax
$LN10@maxrates_c:

; 543  : 
; 544  :         do {
; 545  :                 pszPrevIntervalStartDateTime = strdup( ctime( &prev_int_start_time ) );

  004af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:prev_int_start_time
  004b6	e8 00 00 00 00	 call	 ctime
  004bb	48 8b c8	 mov	 rcx, rax
  004be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  004c4	48 89 44 24 70	 mov	 QWORD PTR pszPrevIntervalStartDateTime$6[rsp], rax

; 546  :                 len = strlen(pszPrevIntervalStartDateTime);

  004c9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pszPrevIntervalStartDateTime$6[rsp]
  004ce	e8 00 00 00 00	 call	 strlen
  004d3	48 89 44 24 58	 mov	 QWORD PTR len$3[rsp], rax

; 547  :                 if ( pszPrevIntervalStartDateTime != NULL && len > 0 )

  004d8	48 83 7c 24 70
	00		 cmp	 QWORD PTR pszPrevIntervalStartDateTime$6[rsp], 0
  004de	74 1e		 je	 SHORT $LN23@maxrates_c
  004e0	48 83 7c 24 58
	00		 cmp	 QWORD PTR len$3[rsp], 0
  004e6	76 16		 jbe	 SHORT $LN23@maxrates_c

; 548  :                 {
; 549  :                     pszPrevIntervalStartDateTime[len - 1] = 0;

  004e8	48 8b 44 24 58	 mov	 rax, QWORD PTR len$3[rsp]
  004ed	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pszPrevIntervalStartDateTime$6[rsp]
  004f2	48 03 c8	 add	 rcx, rax
  004f5	48 8b c1	 mov	 rax, rcx
  004f8	c6 40 ff 00	 mov	 BYTE PTR [rax-1], 0

; 550  :                 }

  004fc	eb 0d		 jmp	 SHORT $LN24@maxrates_c
$LN23@maxrates_c:

; 551  :                 else
; 552  :                 {
; 553  :                     rc = FALSE;

  004fe	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR rc$2[rsp], 0

; 554  :                     break;

  00506	e9 bf 00 00 00	 jmp	 $LN9@maxrates_c
$LN24@maxrates_c:

; 555  :                 }
; 556  : 
; 557  :                 pszCurrIntervalStartDateTime = strdup( ctime( &curr_int_start_time ) );

  0050b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:curr_int_start_time
  00512	e8 00 00 00 00	 call	 ctime
  00517	48 8b c8	 mov	 rcx, rax
  0051a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00520	48 89 44 24 68	 mov	 QWORD PTR pszCurrIntervalStartDateTime$5[rsp], rax

; 558  :                 len = strlen(pszCurrIntervalStartDateTime);

  00525	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pszCurrIntervalStartDateTime$5[rsp]
  0052a	e8 00 00 00 00	 call	 strlen
  0052f	48 89 44 24 58	 mov	 QWORD PTR len$3[rsp], rax

; 559  :                 if ( pszCurrIntervalStartDateTime != NULL && len > 0 )

  00534	48 83 7c 24 68
	00		 cmp	 QWORD PTR pszCurrIntervalStartDateTime$5[rsp], 0
  0053a	74 1e		 je	 SHORT $LN25@maxrates_c
  0053c	48 83 7c 24 58
	00		 cmp	 QWORD PTR len$3[rsp], 0
  00542	76 16		 jbe	 SHORT $LN25@maxrates_c

; 560  :                 {
; 561  :                     pszCurrIntervalStartDateTime[len - 1] = 0;

  00544	48 8b 44 24 58	 mov	 rax, QWORD PTR len$3[rsp]
  00549	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pszCurrIntervalStartDateTime$5[rsp]
  0054e	48 03 c8	 add	 rcx, rax
  00551	48 8b c1	 mov	 rax, rcx
  00554	c6 40 ff 00	 mov	 BYTE PTR [rax-1], 0

; 562  :                 }

  00558	eb 0a		 jmp	 SHORT $LN26@maxrates_c
$LN25@maxrates_c:

; 563  :                 else
; 564  :                 {
; 565  :                     rc = FALSE;

  0055a	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR rc$2[rsp], 0

; 566  :                     break;

  00562	eb 66		 jmp	 SHORT $LN9@maxrates_c
$LN26@maxrates_c:

; 567  :                 }
; 568  : 
; 569  :                 pszCurrentDateTime           = strdup( ctime(    &current_time     ) );

  00564	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR current_time$11[rsp]
  0056c	e8 00 00 00 00	 call	 ctime
  00571	48 8b c8	 mov	 rcx, rax
  00574	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0057a	48 89 44 24 78	 mov	 QWORD PTR pszCurrentDateTime$7[rsp], rax

; 570  :                 len = strlen(pszCurrentDateTime);

  0057f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pszCurrentDateTime$7[rsp]
  00584	e8 00 00 00 00	 call	 strlen
  00589	48 89 44 24 58	 mov	 QWORD PTR len$3[rsp], rax

; 571  :                 if ( pszCurrentDateTime != NULL && len > 0 )

  0058e	48 83 7c 24 78
	00		 cmp	 QWORD PTR pszCurrentDateTime$7[rsp], 0
  00594	74 1e		 je	 SHORT $LN27@maxrates_c
  00596	48 83 7c 24 58
	00		 cmp	 QWORD PTR len$3[rsp], 0
  0059c	76 16		 jbe	 SHORT $LN27@maxrates_c

; 572  :                 {
; 573  :                     pszCurrentDateTime[len - 1] = 0;

  0059e	48 8b 44 24 58	 mov	 rax, QWORD PTR len$3[rsp]
  005a3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pszCurrentDateTime$7[rsp]
  005a8	48 03 c8	 add	 rcx, rax
  005ab	48 8b c1	 mov	 rax, rcx
  005ae	c6 40 ff 00	 mov	 BYTE PTR [rax-1], 0

; 574  :                 }

  005b2	eb 0a		 jmp	 SHORT $LN28@maxrates_c
$LN27@maxrates_c:

; 575  :                 else
; 576  :                 {
; 577  :                     rc = FALSE;

  005b4	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR rc$2[rsp], 0

; 578  :                     break;

  005bc	eb 0c		 jmp	 SHORT $LN9@maxrates_c
$LN28@maxrates_c:

; 579  :                 }
; 580  : 
; 581  :                 break;

  005be	eb 0a		 jmp	 SHORT $LN9@maxrates_c

; 582  : 
; 583  :             } while(0);

  005c0	33 c0		 xor	 eax, eax
  005c2	85 c0		 test	 eax, eax
  005c4	0f 85 e5 fe ff
	ff		 jne	 $LN10@maxrates_c
$LN9@maxrates_c:

; 584  : 
; 585  :         if ( rc )

  005ca	83 7c 24 54 00	 cmp	 DWORD PTR rc$2[rsp], 0
  005cf	0f 84 08 04 00
	00		 je	 $LN29@maxrates_c

; 586  :         {
; 587  :             WRMSG(HHC02268, "I", "Highest observed MIPS and IO/s rates:");

  005d5	b9 01 00 00 00	 mov	 ecx, 1
  005da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205030
  005e7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205031
  005f3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205032
  005ff	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00604	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00609	41 b9 03 00 00
	00		 mov	 r9d, 3
  0060f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205033
  00616	ba 4b 02 00 00	 mov	 edx, 587		; 0000024bH
  0061b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205034
  00622	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 588  :             if ( prev_int_start_time != curr_int_start_time )

  00628	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR curr_int_start_time
  0062f	48 39 05 00 00
	00 00		 cmp	 QWORD PTR prev_int_start_time, rax
  00636	0f 84 95 01 00
	00		 je	 $LN31@maxrates_c

; 589  :             {
; 590  :                 MSGBUF( buf, "From %s to %s", pszPrevIntervalStartDateTime,

  0063c	48 8b 44 24 68	 mov	 rax, QWORD PTR pszCurrIntervalStartDateTime$5[rsp]
  00641	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00646	4c 8b 4c 24 70	 mov	 r9, QWORD PTR pszPrevIntervalStartDateTime$6[rsp]
  0064b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205036
  00652	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00657	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0065f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 591  :                          pszCurrIntervalStartDateTime);
; 592  :                 WRMSG(HHC02268, "I", buf);

  00665	b9 01 00 00 00	 mov	 ecx, 1
  0066a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00670	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00678	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0067d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205037
  00684	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00689	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205038
  00690	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00695	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0069a	41 b9 03 00 00
	00		 mov	 r9d, 3
  006a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205039
  006a7	ba 50 02 00 00	 mov	 edx, 592		; 00000250H
  006ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205040
  006b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 593  :                 MSGBUF( buf, "MIPS: %d.%02d", prev_high_mips_rate / 1000000,

  006b9	33 d2		 xor	 edx, edx
  006bb	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR prev_high_mips_rate
  006c1	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  006c6	f7 f1		 div	 ecx
  006c8	8b c2		 mov	 eax, edx
  006ca	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv308[rsp], eax
  006d1	33 d2		 xor	 edx, edx
  006d3	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR prev_high_mips_rate
  006d9	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  006de	f7 f1		 div	 ecx
  006e0	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv308[rsp]
  006e7	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  006eb	44 8b c8	 mov	 r9d, eax
  006ee	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205041
  006f5	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  006fa	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00702	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 594  :                          prev_high_mips_rate % 1000000);
; 595  :                 WRMSG(HHC02268, "I", buf);

  00708	b9 01 00 00 00	 mov	 ecx, 1
  0070d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00713	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0071b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00720	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205042
  00727	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0072c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205043
  00733	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00738	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0073d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00743	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205044
  0074a	ba 53 02 00 00	 mov	 edx, 595		; 00000253H
  0074f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205045
  00756	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 596  :                 MSGBUF( buf, "IO/s: %d", prev_high_sios_rate);

  0075c	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR prev_high_sios_rate
  00763	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205046
  0076a	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0076f	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00777	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 597  :                 WRMSG(HHC02268, "I", buf);

  0077d	b9 01 00 00 00	 mov	 ecx, 1
  00782	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00788	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00790	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00795	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205047
  0079c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205048
  007a8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007ad	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007b2	41 b9 03 00 00
	00		 mov	 r9d, 3
  007b8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205049
  007bf	ba 55 02 00 00	 mov	 edx, 597		; 00000255H
  007c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205050
  007cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN31@maxrates_c:

; 598  :             }
; 599  :             MSGBUF( buf, "From %s to %s", pszCurrIntervalStartDateTime,

  007d1	48 8b 44 24 78	 mov	 rax, QWORD PTR pszCurrentDateTime$7[rsp]
  007d6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007db	4c 8b 4c 24 68	 mov	 r9, QWORD PTR pszCurrIntervalStartDateTime$5[rsp]
  007e0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205051
  007e7	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  007ec	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  007f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 600  :                      pszCurrentDateTime);
; 601  :             WRMSG(HHC02268, "I", buf);

  007fa	b9 01 00 00 00	 mov	 ecx, 1
  007ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00805	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0080d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00812	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205052
  00819	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0081e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205053
  00825	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0082a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0082f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00835	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205054
  0083c	ba 59 02 00 00	 mov	 edx, 601		; 00000259H
  00841	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205055
  00848	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 602  :             MSGBUF( buf, "MIPS: %d.%02d", curr_high_mips_rate / 1000000,

  0084e	33 d2		 xor	 edx, edx
  00850	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR curr_high_mips_rate
  00856	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  0085b	f7 f1		 div	 ecx
  0085d	8b c2		 mov	 eax, edx
  0085f	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv354[rsp], eax
  00866	33 d2		 xor	 edx, edx
  00868	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR curr_high_mips_rate
  0086e	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00873	f7 f1		 div	 ecx
  00875	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv354[rsp]
  0087c	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00880	44 8b c8	 mov	 r9d, eax
  00883	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205056
  0088a	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0088f	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00897	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 603  :                      curr_high_mips_rate % 1000000);
; 604  :             WRMSG(HHC02268, "I", buf);

  0089d	b9 01 00 00 00	 mov	 ecx, 1
  008a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008a8	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  008b0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  008b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205057
  008bc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205058
  008c8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008cd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008d2	41 b9 03 00 00
	00		 mov	 r9d, 3
  008d8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205059
  008df	ba 5c 02 00 00	 mov	 edx, 604		; 0000025cH
  008e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205060
  008eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 605  :             MSGBUF( buf, "IO/s: %d", curr_high_sios_rate);

  008f1	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR curr_high_sios_rate
  008f8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205061
  008ff	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00904	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0090c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 606  :             WRMSG(HHC02268, "I", buf);

  00912	b9 01 00 00 00	 mov	 ecx, 1
  00917	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0091d	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00925	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0092a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205062
  00931	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00936	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205063
  0093d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00942	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00947	41 b9 03 00 00
	00		 mov	 r9d, 3
  0094d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205064
  00954	ba 5e 02 00 00	 mov	 edx, 606		; 0000025eH
  00959	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205065
  00960	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 607  :             MSGBUF( buf, "Current interval is %d minutes", maxrates_rpt_intvl);

  00966	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR maxrates_rpt_intvl
  0096d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205066
  00974	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00979	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00981	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 608  :             WRMSG(HHC02268, "I", buf);

  00987	b9 01 00 00 00	 mov	 ecx, 1
  0098c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00992	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0099a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0099f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205067
  009a6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  009ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205068
  009b2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  009b7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009bc	41 b9 03 00 00
	00		 mov	 r9d, 3
  009c2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205069
  009c9	ba 60 02 00 00	 mov	 edx, 608		; 00000260H
  009ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205070
  009d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 609  :         }

  009db	eb 5f		 jmp	 SHORT $LN30@maxrates_c
$LN29@maxrates_c:

; 610  :         else
; 611  :         {
; 612  :             WRMSG( HHC02219, "E", "strdup()", "zero length");

  009dd	b9 01 00 00 00	 mov	 ecx, 1
  009e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205071
  009ef	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  009f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205072
  009fb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a00	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205073
  00a07	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a0c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205074
  00a13	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a18	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a1d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a23	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205075
  00a2a	ba 64 02 00 00	 mov	 edx, 612		; 00000264H
  00a2f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205076
  00a36	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN30@maxrates_c:

; 613  :         }
; 614  : 
; 615  :         free( pszPrevIntervalStartDateTime );

  00a3c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pszPrevIntervalStartDateTime$6[rsp]
  00a41	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 616  :         free( pszCurrIntervalStartDateTime );

  00a47	48 8b 4c 24 68	 mov	 rcx, QWORD PTR pszCurrIntervalStartDateTime$5[rsp]
  00a4c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 617  :         free( pszCurrentDateTime           );

  00a52	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pszCurrentDateTime$7[rsp]
  00a57	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN13@maxrates_c:

; 618  :     }
; 619  : 
; 620  :     return 0;   // (make compiler happy)

  00a5d	33 c0		 xor	 eax, eax
$LN1@maxrates_c:

; 621  : }

  00a5f	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00a67	48 33 cc	 xor	 rcx, rsp
  00a6a	e8 00 00 00 00	 call	 __security_check_cookie
  00a6f	48 81 c4 68 01
	00 00		 add	 rsp, 360		; 00000168H
  00a76	c3		 ret	 0
maxrates_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
missing_devnum PROC

; 472  : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 473  :     // "Device number missing"
; 474  :     WRMSG( HHC02201, "E" );

  00004	b9 01 00 00 00	 mov	 ecx, 1
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204937
  00016	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204938
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00032	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204939
  00039	ba da 01 00 00	 mov	 edx, 474		; 000001daH
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204940
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 475  : }

  0004b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0004f	c3		 ret	 0
missing_devnum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv64 = 80
tv66 = 84
lcss$ = 112
devnum$ = 120
devnotfound_msg PROC

; 464  : {

  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 465  :     // HHC02200 "%1d:%04X device not found"
; 466  :     WRMSG( HHC02200, "E", lcss, devnum );

  0000e	0f b7 44 24 78	 movzx	 eax, WORD PTR devnum$[rsp]
  00013	89 44 24 50	 mov	 DWORD PTR tv64[rsp], eax
  00017	0f b7 4c 24 70	 movzx	 ecx, WORD PTR lcss$[rsp]
  0001c	89 4c 24 54	 mov	 DWORD PTR tv66[rsp], ecx
  00020	b9 01 00 00 00	 mov	 ecx, 1
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0002b	8b 4c 24 50	 mov	 ecx, DWORD PTR tv64[rsp]
  0002f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00033	8b 4c 24 54	 mov	 ecx, DWORD PTR tv66[rsp]
  00037	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204931
  00042	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204932
  0004e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00053	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00058	41 b9 03 00 00
	00		 mov	 r9d, 3
  0005e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204933
  00065	ba d2 01 00 00	 mov	 edx, 466		; 000001d2H
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204934
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 467  :     return -1;

  00077	b8 ff ff ff ff	 mov	 eax, -1

; 468  : }

  0007c	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00080	c3		 ret	 0
devnotfound_msg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
i$ = 80
rc$1 = 84
secs$ = 88
rc$ = 92
p$2 = 96
tv382 = 104
tv385 = 112
tv509 = 120
tv522 = 128
tids$ = 136
__$ArrayPad$ = 176
argc$ = 208
argv$ = 216
cmdline$ = 224
$test_cmd PROC

; 331  : {

$LN86:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@$test_cmd:

; 332  :     int i, secs, rc;
; 333  :     TID tids[ NUM_THREADS ];
; 334  : 
; 335  :     //UNREFERENCED(argc);
; 336  :     //UNREFERENCED(argv);
; 337  :     UNREFERENCED(cmdline);

  00027	33 c0		 xor	 eax, eax
  00029	85 c0		 test	 eax, eax
  0002b	75 fa		 jne	 SHORT $LN4@$test_cmd

; 338  : 
; 339  :     if (sysblk.scrtest)

  0002d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00034	83 b8 18 11 00
	00 00		 cmp	 DWORD PTR [rax+4376], 0
  0003b	74 69		 je	 SHORT $LN43@$test_cmd

; 340  :     {
; 341  :         // "%s%s"
; 342  :         WRMSG( HHC00001, "E", "", "WRONG! Perhaps you meant 'runtest' instead?");

  0003d	b9 01 00 00 00	 mov	 ecx, 1
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204783
  0004f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204784
  0005b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00060	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204785
  00067	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204786
  00073	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00078	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0007d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00083	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204787
  0008a	ba 56 01 00 00	 mov	 edx, 342		; 00000156H
  0008f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204788
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 343  :         return -1;

  0009c	b8 ff ff ff ff	 mov	 eax, -1
  000a1	e9 21 0a 00 00	 jmp	 $LN1@$test_cmd
$LN43@$test_cmd:

; 344  :     }
; 345  : 
; 346  :     if (argc > 1)

  000a6	83 bc 24 d0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  000ae	0f 8e 94 09 00
	00		 jle	 $LN44@$test_cmd

; 347  :     {
; 348  :         if (CMD( argv[1], CRASH, 5 ))

  000b4	b8 08 00 00 00	 mov	 eax, 8
  000b9	48 6b c0 01	 imul	 rax, rax, 1
  000bd	41 b8 05 00 00
	00		 mov	 r8d, 5
  000c3	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000cb	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204792
  000d6	e8 00 00 00 00	 call	 strcaseabbrev
  000db	85 c0		 test	 eax, eax
  000dd	74 1c		 je	 SHORT $LN45@$test_cmd
$LN7@$test_cmd:

; 349  :             CRASH();

  000df	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR p$2[rsp], 0
  000e8	48 8b 44 24 60	 mov	 rax, QWORD PTR p$2[rsp]
  000ed	c6 00 00	 mov	 BYTE PTR [rax], 0
  000f0	33 c0		 xor	 eax, eax
  000f2	85 c0		 test	 eax, eax
  000f4	75 e9		 jne	 SHORT $LN7@$test_cmd
  000f6	e9 49 09 00 00	 jmp	 $LN46@$test_cmd
$LN45@$test_cmd:

; 350  :         else if (CMD( argv[1], DEADLOCK, 8 ))

  000fb	b8 08 00 00 00	 mov	 eax, 8
  00100	48 6b c0 01	 imul	 rax, rax, 1
  00104	41 b8 08 00 00
	00		 mov	 r8d, 8
  0010a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00112	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00116	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204795
  0011d	e8 00 00 00 00	 call	 strcaseabbrev
  00122	85 c0		 test	 eax, eax
  00124	0f 84 8d 02 00
	00		 je	 $LN47@$test_cmd

; 351  :         {
; 352  :             static TID tid;
; 353  : 
; 354  :             initialize_lock( &deadlocks_a );

  0012a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204796
  00131	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204797
  00138	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deadlocks_a
  0013f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_lock

; 355  :             initialize_lock( &deadlocks_b );

  00145	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204798
  0014c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204799
  00153	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deadlocks_b
  0015a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_lock

; 356  :             initialize_lock( &deadlocks_c );

  00160	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204800
  00167	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204801
  0016e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deadlocks_c
  00175	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_lock

; 357  : 
; 358  :             set_lock_name( &deadlocks_a, "a" );

  0017b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204802
  00182	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deadlocks_a
  00189	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_set_lock_name

; 359  :             set_lock_name( &deadlocks_b, "b" );

  0018f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204803
  00196	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deadlocks_b
  0019d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_set_lock_name

; 360  :             set_lock_name( &deadlocks_c, "c" );

  001a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204804
  001aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deadlocks_c
  001b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_set_lock_name
$LN10@$test_cmd:

; 361  : 
; 362  :             VERIFY( create_thread( &tid, DETACHED, deadlocks_1, 0, "#1" ) == 0);

  001b7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001be	48 05 88 10 00
	00		 add	 rax, 4232		; 00001088H
  001c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204806
  001cb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204807
  001d7	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  001dc	45 33 c9	 xor	 r9d, r9d
  001df	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:deadlocks_1
  001e6	48 8b d0	 mov	 rdx, rax
  001e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?tid@?6??$test_cmd@@9@9
  001f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  001f6	85 c0		 test	 eax, eax
  001f8	74 5c		 je	 SHORT $LN49@$test_cmd
$LN13@$test_cmd:
  001fa	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG204808
  00201	41 b8 6a 01 00
	00		 mov	 r8d, 362		; 0000016aH
  00207	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204809
  0020e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204810
  00215	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0021b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00221	85 c0		 test	 eax, eax
  00223	74 20		 je	 SHORT $LN50@$test_cmd
  00225	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG204812
  0022c	41 b8 6a 01 00
	00		 mov	 r8d, 362		; 0000016aH
  00232	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204813
  00239	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204814
  00240	e8 00 00 00 00	 call	 DebuggerTrace
$LN50@$test_cmd:
  00245	33 c0		 xor	 eax, eax
  00247	85 c0		 test	 eax, eax
  00249	75 af		 jne	 SHORT $LN13@$test_cmd
  0024b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00251	85 c0		 test	 eax, eax
  00253	74 01		 je	 SHORT $LN51@$test_cmd
  00255	cc		 int	 3
$LN51@$test_cmd:
$LN49@$test_cmd:
  00256	33 c0		 xor	 eax, eax
  00258	85 c0		 test	 eax, eax
  0025a	0f 85 57 ff ff
	ff		 jne	 $LN10@$test_cmd
$LN16@$test_cmd:

; 363  :             VERIFY( create_thread( &tid, DETACHED, deadlocks_2, 0, "#2" ) == 0);

  00260	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00267	48 05 88 10 00
	00		 add	 rax, 4232		; 00001088H
  0026d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204817
  00274	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00279	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204818
  00280	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00285	45 33 c9	 xor	 r9d, r9d
  00288	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:deadlocks_2
  0028f	48 8b d0	 mov	 rdx, rax
  00292	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?tid@?6??$test_cmd@@9@9
  00299	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  0029f	85 c0		 test	 eax, eax
  002a1	74 5c		 je	 SHORT $LN52@$test_cmd
$LN19@$test_cmd:
  002a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG204819
  002aa	41 b8 6b 01 00
	00		 mov	 r8d, 363		; 0000016bH
  002b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204820
  002b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204821
  002be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  002c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  002ca	85 c0		 test	 eax, eax
  002cc	74 20		 je	 SHORT $LN53@$test_cmd
  002ce	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG204823
  002d5	41 b8 6b 01 00
	00		 mov	 r8d, 363		; 0000016bH
  002db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204824
  002e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204825
  002e9	e8 00 00 00 00	 call	 DebuggerTrace
$LN53@$test_cmd:
  002ee	33 c0		 xor	 eax, eax
  002f0	85 c0		 test	 eax, eax
  002f2	75 af		 jne	 SHORT $LN19@$test_cmd
  002f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  002fa	85 c0		 test	 eax, eax
  002fc	74 01		 je	 SHORT $LN54@$test_cmd
  002fe	cc		 int	 3
$LN54@$test_cmd:
$LN52@$test_cmd:
  002ff	33 c0		 xor	 eax, eax
  00301	85 c0		 test	 eax, eax
  00303	0f 85 57 ff ff
	ff		 jne	 $LN16@$test_cmd
$LN22@$test_cmd:

; 364  :             VERIFY( create_thread( &tid, DETACHED, deadlocks_3, 0, "#3" ) == 0);

  00309	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00310	48 05 88 10 00
	00		 add	 rax, 4232		; 00001088H
  00316	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204828
  0031d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00322	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204829
  00329	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0032e	45 33 c9	 xor	 r9d, r9d
  00331	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:deadlocks_3
  00338	48 8b d0	 mov	 rdx, rax
  0033b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?tid@?6??$test_cmd@@9@9
  00342	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  00348	85 c0		 test	 eax, eax
  0034a	74 5c		 je	 SHORT $LN55@$test_cmd
$LN25@$test_cmd:
  0034c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG204830
  00353	41 b8 6c 01 00
	00		 mov	 r8d, 364		; 0000016cH
  00359	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204831
  00360	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204832
  00367	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0036d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00373	85 c0		 test	 eax, eax
  00375	74 20		 je	 SHORT $LN56@$test_cmd
  00377	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG204834
  0037e	41 b8 6c 01 00
	00		 mov	 r8d, 364		; 0000016cH
  00384	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204835
  0038b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204836
  00392	e8 00 00 00 00	 call	 DebuggerTrace
$LN56@$test_cmd:
  00397	33 c0		 xor	 eax, eax
  00399	85 c0		 test	 eax, eax
  0039b	75 af		 jne	 SHORT $LN25@$test_cmd
  0039d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  003a3	85 c0		 test	 eax, eax
  003a5	74 01		 je	 SHORT $LN57@$test_cmd
  003a7	cc		 int	 3
$LN57@$test_cmd:
$LN55@$test_cmd:
  003a8	33 c0		 xor	 eax, eax
  003aa	85 c0		 test	 eax, eax
  003ac	0f 85 57 ff ff
	ff		 jne	 $LN22@$test_cmd

; 365  :         }

  003b2	e9 8d 06 00 00	 jmp	 $LN48@$test_cmd
$LN47@$test_cmd:

; 366  :         else if (CMD( argv[1], LOCKS, 5 ))

  003b7	b8 08 00 00 00	 mov	 eax, 8
  003bc	48 6b c0 01	 imul	 rax, rax, 1
  003c0	41 b8 05 00 00
	00		 mov	 r8d, 5
  003c6	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003ce	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  003d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204840
  003d9	e8 00 00 00 00	 call	 strcaseabbrev
  003de	85 c0		 test	 eax, eax
  003e0	0f 84 ae 00 00
	00		 je	 $LN58@$test_cmd
$LN28@$test_cmd:

; 367  :         {
; 368  :             // test thread exit with lock still held
; 369  :             static TID tid;
; 370  :             VERIFY( create_thread( &tid, DETACHED,

  003e6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  003ed	48 05 88 10 00
	00		 add	 rax, 4232		; 00001088H
  003f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204842
  003fa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204843
  00406	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0040b	45 33 c9	 xor	 r9d, r9d
  0040e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:test_locks_thread
  00415	48 8b d0	 mov	 rdx, rax
  00418	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?tid@?BB@??$test_cmd@@9@9
  0041f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  00425	85 c0		 test	 eax, eax
  00427	74 5c		 je	 SHORT $LN60@$test_cmd
$LN31@$test_cmd:
  00429	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG204844
  00430	41 b8 73 01 00
	00		 mov	 r8d, 371		; 00000173H
  00436	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204845
  0043d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204846
  00444	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0044a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00450	85 c0		 test	 eax, eax
  00452	74 20		 je	 SHORT $LN61@$test_cmd
  00454	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG204848
  0045b	41 b8 73 01 00
	00		 mov	 r8d, 371		; 00000173H
  00461	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204849
  00468	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204850
  0046f	e8 00 00 00 00	 call	 DebuggerTrace
$LN61@$test_cmd:
  00474	33 c0		 xor	 eax, eax
  00476	85 c0		 test	 eax, eax
  00478	75 af		 jne	 SHORT $LN31@$test_cmd
  0047a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00480	85 c0		 test	 eax, eax
  00482	74 01		 je	 SHORT $LN62@$test_cmd
  00484	cc		 int	 3
$LN62@$test_cmd:
$LN60@$test_cmd:
  00485	33 c0		 xor	 eax, eax
  00487	85 c0		 test	 eax, eax
  00489	0f 85 57 ff ff
	ff		 jne	 $LN28@$test_cmd

; 371  :                 test_locks_thread, 0, "test_locks_thread" ) == 0);
; 372  :         }

  0048f	e9 b0 05 00 00	 jmp	 $LN59@$test_cmd
$LN58@$test_cmd:

; 373  :         else if (CMD( argv[1], LOCKS2, 6 ))

  00494	b8 08 00 00 00	 mov	 eax, 8
  00499	48 6b c0 01	 imul	 rax, rax, 1
  0049d	41 b8 06 00 00
	00		 mov	 r8d, 6
  004a3	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004ab	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  004af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204854
  004b6	e8 00 00 00 00	 call	 strcaseabbrev
  004bb	85 c0		 test	 eax, eax
  004bd	74 4f		 je	 SHORT $LN63@$test_cmd

; 374  :         {
; 375  :             // test lock init ALREADY INIT
; 376  :             static LOCK testlock;
; 377  :             initialize_lock( &testlock );

  004bf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204855
  004c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204856
  004cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?testlock@?BF@??$test_cmd@@9@9
  004d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_lock

; 378  :             initialize_lock( &testlock );   // (error here)

  004da	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204857
  004e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204858
  004e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?testlock@?BF@??$test_cmd@@9@9
  004ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_lock

; 379  :             destroy_lock( &testlock );

  004f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204859
  004fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?testlock@?BF@??$test_cmd@@9@9
  00503	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_destroy_lock

; 380  :         }

  00509	e9 36 05 00 00	 jmp	 $LN64@$test_cmd
$LN63@$test_cmd:

; 381  :         else if (CMD( argv[1], LOCKS3, 6 ))

  0050e	b8 08 00 00 00	 mov	 eax, 8
  00513	48 6b c0 01	 imul	 rax, rax, 1
  00517	41 b8 06 00 00
	00		 mov	 r8d, 6
  0051d	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00525	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00529	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204862
  00530	e8 00 00 00 00	 call	 strcaseabbrev
  00535	85 c0		 test	 eax, eax
  00537	74 77		 je	 SHORT $LN65@$test_cmd

; 382  :         {
; 383  :             // test lock init ALREADY INIT STILL HELD
; 384  :             static LOCK testlock;
; 385  :             initialize_lock( &testlock );

  00539	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204863
  00540	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204864
  00547	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?testlock@?BG@??$test_cmd@@9@9
  0054e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_lock

; 386  :             obtain_lock( &testlock );

  00554	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204865
  0055b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?testlock@?BG@??$test_cmd@@9@9
  00562	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 387  :             initialize_lock( &testlock );   // (error here)

  00568	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204866
  0056f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204867
  00576	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?testlock@?BG@??$test_cmd@@9@9
  0057d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_lock

; 388  :             release_lock( &testlock );

  00583	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204868
  0058a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?testlock@?BG@??$test_cmd@@9@9
  00591	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 389  :             destroy_lock( &testlock );

  00597	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204869
  0059e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?testlock@?BG@??$test_cmd@@9@9
  005a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_destroy_lock

; 390  :         }

  005ab	e9 94 04 00 00	 jmp	 $LN66@$test_cmd
$LN65@$test_cmd:

; 391  :         else if (CMD( argv[1], LOCKS4, 6 ))

  005b0	b8 08 00 00 00	 mov	 eax, 8
  005b5	48 6b c0 01	 imul	 rax, rax, 1
  005b9	41 b8 06 00 00
	00		 mov	 r8d, 6
  005bf	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  005c7	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  005cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204872
  005d2	e8 00 00 00 00	 call	 strcaseabbrev
  005d7	85 c0		 test	 eax, eax
  005d9	74 48		 je	 SHORT $LN67@$test_cmd

; 392  :         {
; 393  :             // test destroy lock STILL HELD
; 394  :             static LOCK testlock;
; 395  :             initialize_lock( &testlock );

  005db	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204873
  005e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204874
  005e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?testlock@?BH@??$test_cmd@@9@9
  005f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_lock

; 396  :             obtain_lock( &testlock );

  005f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204875
  005fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?testlock@?BH@??$test_cmd@@9@9
  00604	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 397  :             destroy_lock( &testlock );      // (error here)

  0060a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204876
  00611	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?testlock@?BH@??$test_cmd@@9@9
  00618	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_destroy_lock

; 398  :         }

  0061e	e9 21 04 00 00	 jmp	 $LN68@$test_cmd
$LN67@$test_cmd:

; 399  :         else if (CMD( argv[1], NANO, 4 ))

  00623	b8 08 00 00 00	 mov	 eax, 8
  00628	48 6b c0 01	 imul	 rax, rax, 1
  0062c	41 b8 04 00 00
	00		 mov	 r8d, 4
  00632	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0063a	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0063e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204879
  00645	e8 00 00 00 00	 call	 strcaseabbrev
  0064a	85 c0		 test	 eax, eax
  0064c	0f 84 57 02 00
	00		 je	 $LN69@$test_cmd

; 400  :         {
; 401  :             /*-------------------------------------------*/
; 402  :             /*             test 'nanosleep'              */
; 403  :             /*  Use "$test &" to run test in background  */
; 404  :             /*-------------------------------------------*/
; 405  : 
; 406  :             /* Create the test threads */
; 407  :             LOGMSG("*** $test command: creating threads...\n");

  00652	b9 01 00 00 00	 mov	 ecx, 1
  00657	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0065d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204880
  00664	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00669	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0066e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00674	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204881
  0067b	ba 97 01 00 00	 mov	 edx, 407		; 00000197H
  00680	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204882
  00687	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 408  : 
; 409  :             for (i=0; i < NUM_THREADS; i++)

  0068d	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00695	eb 0a		 jmp	 SHORT $LN34@$test_cmd
$LN32@$test_cmd:
  00697	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  0069b	ff c0		 inc	 eax
  0069d	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN34@$test_cmd:
  006a1	83 7c 24 50 0a	 cmp	 DWORD PTR i$[rsp], 10
  006a6	0f 8d 3b 01 00
	00		 jge	 $LN33@$test_cmd

; 410  :             {
; 411  :                 secs = 1 + rand() % MAX_WAIT_SECS;

  006ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  006b2	99		 cdq
  006b3	b9 06 00 00 00	 mov	 ecx, 6
  006b8	f7 f9		 idiv	 ecx
  006ba	8b c2		 mov	 eax, edx
  006bc	ff c0		 inc	 eax
  006be	89 44 24 58	 mov	 DWORD PTR secs$[rsp], eax

; 412  : 
; 413  :                 if ((rc = create_thread( &tids[i], JOINABLE, test_thread,
; 414  :                     (void*)(uintptr_t) secs, "test_thread" )) != 0)

  006c2	48 63 44 24 58	 movsxd	 rax, DWORD PTR secs$[rsp]
  006c7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  006ce	48 81 c1 98 10
	00 00		 add	 rcx, 4248		; 00001098H
  006d5	48 63 54 24 50	 movsxd	 rdx, DWORD PTR i$[rsp]
  006da	48 8d 94 94 88
	00 00 00	 lea	 rdx, QWORD PTR tids$[rsp+rdx*4]
  006e2	48 89 54 24 68	 mov	 QWORD PTR tv382[rsp], rdx
  006e7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204884
  006ee	4c 89 44 24 28	 mov	 QWORD PTR [rsp+40], r8
  006f3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204885
  006fa	4c 89 44 24 20	 mov	 QWORD PTR [rsp+32], r8
  006ff	4c 8b c8	 mov	 r9, rax
  00702	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:test_thread
  00709	48 8b d1	 mov	 rdx, rcx
  0070c	48 8b 44 24 68	 mov	 rax, QWORD PTR tv382[rsp]
  00711	48 8b c8	 mov	 rcx, rax
  00714	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  0071a	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax
  0071e	83 7c 24 5c 00	 cmp	 DWORD PTR rc$[rsp], 0
  00723	74 70		 je	 SHORT $LN71@$test_cmd

; 415  :                 {
; 416  :                     // "Error in function create_thread(): %s"
; 417  :                     WRMSG( HHC00102, "E", strerror( rc ));

  00725	8b 4c 24 5c	 mov	 ecx, DWORD PTR rc$[rsp]
  00729	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0072f	48 89 44 24 70	 mov	 QWORD PTR tv385[rsp], rax
  00734	b9 01 00 00 00	 mov	 ecx, 1
  00739	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0073f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv385[rsp]
  00744	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00749	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204886
  00750	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00755	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204887
  0075c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00761	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00766	41 b9 03 00 00
	00		 mov	 r9d, 3
  0076c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204888
  00773	ba a1 01 00 00	 mov	 edx, 417		; 000001a1H
  00778	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204889
  0077f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 418  :                     tids[i] = 0;

  00785	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  0078a	c7 84 84 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tids$[rsp+rax*4], 0
$LN71@$test_cmd:

; 419  :                 }
; 420  : 
; 421  :                 secs = rand() % 3;

  00795	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  0079b	99		 cdq
  0079c	b9 03 00 00 00	 mov	 ecx, 3
  007a1	f7 f9		 idiv	 ecx
  007a3	8b c2		 mov	 eax, edx
  007a5	89 44 24 58	 mov	 DWORD PTR secs$[rsp], eax

; 422  :                 if (secs)

  007a9	83 7c 24 58 00	 cmp	 DWORD PTR secs$[rsp], 0
  007ae	74 32		 je	 SHORT $LN72@$test_cmd
$LN37@$test_cmd:

; 423  :                     SLEEP(1);

  007b0	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR rc$1[rsp], 1
$LN38@$test_cmd:
  007b8	83 7c 24 54 00	 cmp	 DWORD PTR rc$1[rsp], 0
  007bd	74 1d		 je	 SHORT $LN39@$test_cmd
  007bf	8b 4c 24 54	 mov	 ecx, DWORD PTR rc$1[rsp]
  007c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sleep
  007c9	89 44 24 54	 mov	 DWORD PTR rc$1[rsp], eax
  007cd	83 7c 24 54 00	 cmp	 DWORD PTR rc$1[rsp], 0
  007d2	74 06		 je	 SHORT $LN73@$test_cmd
  007d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sched_yield
$LN73@$test_cmd:
  007da	eb dc		 jmp	 SHORT $LN38@$test_cmd
$LN39@$test_cmd:
  007dc	33 c0		 xor	 eax, eax
  007de	85 c0		 test	 eax, eax
  007e0	75 ce		 jne	 SHORT $LN37@$test_cmd
$LN72@$test_cmd:

; 424  :             }

  007e2	e9 b0 fe ff ff	 jmp	 $LN32@$test_cmd
$LN33@$test_cmd:

; 425  : 
; 426  :             /* Wait for all threads to exit */
; 427  : 
; 428  :             LOGMSG("*** $test command: waiting for threads to exit...\n");

  007e7	b9 01 00 00 00	 mov	 ecx, 1
  007ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204892
  007f9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007fe	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00803	41 b9 03 00 00
	00		 mov	 r9d, 3
  00809	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204893
  00810	ba ac 01 00 00	 mov	 edx, 428		; 000001acH
  00815	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204894
  0081c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 429  : 
; 430  :             for (i=0; i < NUM_THREADS; i++)

  00822	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0082a	eb 0a		 jmp	 SHORT $LN42@$test_cmd
$LN40@$test_cmd:
  0082c	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  00830	ff c0		 inc	 eax
  00832	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN42@$test_cmd:
  00836	83 7c 24 50 0a	 cmp	 DWORD PTR i$[rsp], 10
  0083b	7d 2c		 jge	 SHORT $LN41@$test_cmd

; 431  :                 if (tids[i])

  0083d	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  00842	83 bc 84 88 00
	00 00 00	 cmp	 DWORD PTR tids$[rsp+rax*4], 0
  0084a	74 1b		 je	 SHORT $LN74@$test_cmd

; 432  :                     join_thread( tids[i], NULL );

  0084c	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  00851	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204896
  00858	33 d2		 xor	 edx, edx
  0085a	8b 8c 84 88 00
	00 00		 mov	 ecx, DWORD PTR tids$[rsp+rax*4]
  00861	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_join_thread
$LN74@$test_cmd:
  00867	eb c3		 jmp	 SHORT $LN40@$test_cmd
$LN41@$test_cmd:

; 433  : 
; 434  :             LOGMSG("*** $test command: test complete.\n");

  00869	b9 01 00 00 00	 mov	 ecx, 1
  0086e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00874	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204897
  0087b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00880	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00885	41 b9 03 00 00
	00		 mov	 r9d, 3
  0088b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204898
  00892	ba b2 01 00 00	 mov	 edx, 434		; 000001b2H
  00897	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204899
  0089e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 435  :         }

  008a4	e9 9b 01 00 00	 jmp	 $LN70@$test_cmd
$LN69@$test_cmd:

; 436  : #if defined( HAVE_SIGNAL_HANDLING )
; 437  : #if defined( HAVE_DECL_SIGBUS ) && HAVE_DECL_SIGBUS
; 438  :         else if (CMD( argv[1], SIGBUS,  6 )) raise( SIGBUS  );
; 439  : #endif
; 440  :         else if (CMD( argv[1], SIGFPE,  6 )) raise( SIGFPE  );

  008a9	b8 08 00 00 00	 mov	 eax, 8
  008ae	48 6b c0 01	 imul	 rax, rax, 1
  008b2	41 b8 06 00 00
	00		 mov	 r8d, 6
  008b8	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  008c0	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  008c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204902
  008cb	e8 00 00 00 00	 call	 strcaseabbrev
  008d0	85 c0		 test	 eax, eax
  008d2	74 10		 je	 SHORT $LN75@$test_cmd
  008d4	b9 08 00 00 00	 mov	 ecx, 8
  008d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_raise
  008df	e9 60 01 00 00	 jmp	 $LN76@$test_cmd
$LN75@$test_cmd:

; 441  :         else if (CMD( argv[1], SIGILL,  6 )) raise( SIGILL  );

  008e4	b8 08 00 00 00	 mov	 eax, 8
  008e9	48 6b c0 01	 imul	 rax, rax, 1
  008ed	41 b8 06 00 00
	00		 mov	 r8d, 6
  008f3	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  008fb	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  008ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204905
  00906	e8 00 00 00 00	 call	 strcaseabbrev
  0090b	85 c0		 test	 eax, eax
  0090d	74 10		 je	 SHORT $LN77@$test_cmd
  0090f	b9 04 00 00 00	 mov	 ecx, 4
  00914	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_raise
  0091a	e9 25 01 00 00	 jmp	 $LN78@$test_cmd
$LN77@$test_cmd:

; 442  :         else if (CMD( argv[1], SIGSEGV, 7 )) raise( SIGSEGV );

  0091f	b8 08 00 00 00	 mov	 eax, 8
  00924	48 6b c0 01	 imul	 rax, rax, 1
  00928	41 b8 07 00 00
	00		 mov	 r8d, 7
  0092e	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00936	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0093a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204908
  00941	e8 00 00 00 00	 call	 strcaseabbrev
  00946	85 c0		 test	 eax, eax
  00948	74 10		 je	 SHORT $LN79@$test_cmd
  0094a	b9 0b 00 00 00	 mov	 ecx, 11
  0094f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_raise
  00955	e9 ea 00 00 00	 jmp	 $LN80@$test_cmd
$LN79@$test_cmd:

; 443  :         else if (CMD( argv[1], SIGUSR1, 7 )) raise( SIGUSR1 );

  0095a	b8 08 00 00 00	 mov	 eax, 8
  0095f	48 6b c0 01	 imul	 rax, rax, 1
  00963	41 b8 07 00 00
	00		 mov	 r8d, 7
  00969	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00971	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00975	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204911
  0097c	e8 00 00 00 00	 call	 strcaseabbrev
  00981	85 c0		 test	 eax, eax
  00983	74 10		 je	 SHORT $LN81@$test_cmd
  00985	b9 1e 00 00 00	 mov	 ecx, 30
  0098a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_raise
  00990	e9 af 00 00 00	 jmp	 $LN82@$test_cmd
$LN81@$test_cmd:

; 444  :         else if (CMD( argv[1], SIGUSR2, 7 )) raise( SIGUSR2 );

  00995	b8 08 00 00 00	 mov	 eax, 8
  0099a	48 6b c0 01	 imul	 rax, rax, 1
  0099e	41 b8 07 00 00
	00		 mov	 r8d, 7
  009a4	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  009ac	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  009b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204914
  009b7	e8 00 00 00 00	 call	 strcaseabbrev
  009bc	85 c0		 test	 eax, eax
  009be	74 0d		 je	 SHORT $LN83@$test_cmd
  009c0	b9 1f 00 00 00	 mov	 ecx, 31
  009c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_raise
  009cb	eb 77		 jmp	 SHORT $LN84@$test_cmd
$LN83@$test_cmd:

; 445  : #endif
; 446  :         else
; 447  :         {
; 448  :             // "%s%s"
; 449  :             WRMSG( HHC00001, "E", argv[1], ": unknown test");

  009cd	b8 08 00 00 00	 mov	 eax, 8
  009d2	48 6b c0 01	 imul	 rax, rax, 1
  009d6	48 89 44 24 78	 mov	 QWORD PTR tv509[rsp], rax
  009db	b9 01 00 00 00	 mov	 ecx, 1
  009e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204915
  009ed	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  009f2	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  009fa	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv509[rsp]
  009ff	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00a03	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a08	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204916
  00a0f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a14	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204917
  00a1b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a20	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a25	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a2b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204918
  00a32	ba c1 01 00 00	 mov	 edx, 449		; 000001c1H
  00a37	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204919
  00a3e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN84@$test_cmd:
$LN82@$test_cmd:
$LN80@$test_cmd:
$LN78@$test_cmd:
$LN76@$test_cmd:
$LN70@$test_cmd:
$LN68@$test_cmd:
$LN66@$test_cmd:
$LN64@$test_cmd:
$LN59@$test_cmd:
$LN48@$test_cmd:
$LN46@$test_cmd:

; 450  :         }
; 451  :         return 0;

  00a44	33 c0		 xor	 eax, eax
  00a46	eb 7f		 jmp	 SHORT $LN1@$test_cmd
$LN44@$test_cmd:

; 452  :     }
; 453  : 
; 454  :     // "%s%s"
; 455  :     WRMSG( HHC00001, "E", argv[0], ": missing argument");

  00a48	b8 08 00 00 00	 mov	 eax, 8
  00a4d	48 6b c0 00	 imul	 rax, rax, 0
  00a51	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv522[rsp], rax
  00a59	b9 01 00 00 00	 mov	 ecx, 1
  00a5e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a64	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204920
  00a6b	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00a70	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00a78	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR tv522[rsp]
  00a80	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00a84	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a89	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204921
  00a90	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a95	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204922
  00a9c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00aa1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00aa6	41 b9 03 00 00
	00		 mov	 r9d, 3
  00aac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204923
  00ab3	ba c7 01 00 00	 mov	 edx, 455		; 000001c7H
  00ab8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204924
  00abf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 456  : 
; 457  :     return 0;

  00ac5	33 c0		 xor	 eax, eax
$LN1@$test_cmd:

; 458  : }

  00ac7	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00acf	48 33 cc	 xor	 rcx, rsp
  00ad2	e8 00 00 00 00	 call	 __security_check_cookie
  00ad7	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00ade	c3		 ret	 0
$test_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
rc$1 = 32
rc$2 = 36
parg$ = 64
deadlocks_3 PROC

; 307  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@deadlocks_:

; 308  :     UNREFERENCED( parg );

  00009	33 c0		 xor	 eax, eax
  0000b	85 c0		 test	 eax, eax
  0000d	75 fa		 jne	 SHORT $LN4@deadlocks_

; 309  : 
; 310  :     // 3 acq c, then a
; 311  : 
; 312  :     obtain_lock( &deadlocks_c );

  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204707
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deadlocks_c
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock
$LN7@deadlocks_:

; 313  :     {
; 314  :         SLEEP(1);

  00023	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR rc$1[rsp], 1
$LN8@deadlocks_:
  0002b	83 7c 24 20 00	 cmp	 DWORD PTR rc$1[rsp], 0
  00030	74 1d		 je	 SHORT $LN9@deadlocks_
  00032	8b 4c 24 20	 mov	 ecx, DWORD PTR rc$1[rsp]
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sleep
  0003c	89 44 24 20	 mov	 DWORD PTR rc$1[rsp], eax
  00040	83 7c 24 20 00	 cmp	 DWORD PTR rc$1[rsp], 0
  00045	74 06		 je	 SHORT $LN15@deadlocks_
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sched_yield
$LN15@deadlocks_:
  0004d	eb dc		 jmp	 SHORT $LN8@deadlocks_
$LN9@deadlocks_:
  0004f	33 c0		 xor	 eax, eax
  00051	85 c0		 test	 eax, eax
  00053	75 ce		 jne	 SHORT $LN7@deadlocks_

; 315  : 
; 316  :         obtain_lock( &deadlocks_a );

  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204709
  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deadlocks_a
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock
$LN12@deadlocks_:

; 317  :         {
; 318  :             SLEEP(1);

  00069	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR rc$2[rsp], 1
$LN13@deadlocks_:
  00071	83 7c 24 24 00	 cmp	 DWORD PTR rc$2[rsp], 0
  00076	74 1d		 je	 SHORT $LN14@deadlocks_
  00078	8b 4c 24 24	 mov	 ecx, DWORD PTR rc$2[rsp]
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sleep
  00082	89 44 24 24	 mov	 DWORD PTR rc$2[rsp], eax
  00086	83 7c 24 24 00	 cmp	 DWORD PTR rc$2[rsp], 0
  0008b	74 06		 je	 SHORT $LN16@deadlocks_
  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sched_yield
$LN16@deadlocks_:
  00093	eb dc		 jmp	 SHORT $LN13@deadlocks_
$LN14@deadlocks_:
  00095	33 c0		 xor	 eax, eax
  00097	85 c0		 test	 eax, eax
  00099	75 ce		 jne	 SHORT $LN12@deadlocks_

; 319  :         }
; 320  :         release_lock( &deadlocks_a );

  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204711
  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deadlocks_a
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 321  :     }
; 322  :     release_lock( &deadlocks_c );

  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204712
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deadlocks_c
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 323  : 
; 324  :     return NULL;

  000c3	33 c0		 xor	 eax, eax

; 325  : }

  000c5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c9	c3		 ret	 0
deadlocks_3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
rc$1 = 32
rc$2 = 36
parg$ = 64
deadlocks_2 PROC

; 287  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@deadlocks_:

; 288  :     UNREFERENCED( parg );

  00009	33 c0		 xor	 eax, eax
  0000b	85 c0		 test	 eax, eax
  0000d	75 fa		 jne	 SHORT $LN4@deadlocks_

; 289  : 
; 290  :     // 2 acq b, then c
; 291  : 
; 292  :     obtain_lock( &deadlocks_b );

  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204681
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deadlocks_b
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock
$LN7@deadlocks_:

; 293  :     {
; 294  :         SLEEP(1);

  00023	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR rc$1[rsp], 1
$LN8@deadlocks_:
  0002b	83 7c 24 20 00	 cmp	 DWORD PTR rc$1[rsp], 0
  00030	74 1d		 je	 SHORT $LN9@deadlocks_
  00032	8b 4c 24 20	 mov	 ecx, DWORD PTR rc$1[rsp]
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sleep
  0003c	89 44 24 20	 mov	 DWORD PTR rc$1[rsp], eax
  00040	83 7c 24 20 00	 cmp	 DWORD PTR rc$1[rsp], 0
  00045	74 06		 je	 SHORT $LN15@deadlocks_
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sched_yield
$LN15@deadlocks_:
  0004d	eb dc		 jmp	 SHORT $LN8@deadlocks_
$LN9@deadlocks_:
  0004f	33 c0		 xor	 eax, eax
  00051	85 c0		 test	 eax, eax
  00053	75 ce		 jne	 SHORT $LN7@deadlocks_

; 295  : 
; 296  :         obtain_lock( &deadlocks_c );

  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204683
  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deadlocks_c
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock
$LN12@deadlocks_:

; 297  :         {
; 298  :             SLEEP(1);

  00069	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR rc$2[rsp], 1
$LN13@deadlocks_:
  00071	83 7c 24 24 00	 cmp	 DWORD PTR rc$2[rsp], 0
  00076	74 1d		 je	 SHORT $LN14@deadlocks_
  00078	8b 4c 24 24	 mov	 ecx, DWORD PTR rc$2[rsp]
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sleep
  00082	89 44 24 24	 mov	 DWORD PTR rc$2[rsp], eax
  00086	83 7c 24 24 00	 cmp	 DWORD PTR rc$2[rsp], 0
  0008b	74 06		 je	 SHORT $LN16@deadlocks_
  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sched_yield
$LN16@deadlocks_:
  00093	eb dc		 jmp	 SHORT $LN13@deadlocks_
$LN14@deadlocks_:
  00095	33 c0		 xor	 eax, eax
  00097	85 c0		 test	 eax, eax
  00099	75 ce		 jne	 SHORT $LN12@deadlocks_

; 299  :         }
; 300  :         release_lock( &deadlocks_c );

  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204685
  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deadlocks_c
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 301  :     }
; 302  :     release_lock( &deadlocks_b );

  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204686
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deadlocks_b
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 303  : 
; 304  :     return NULL;

  000c3	33 c0		 xor	 eax, eax

; 305  : }

  000c5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c9	c3		 ret	 0
deadlocks_2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
rc$1 = 32
rc$2 = 36
parg$ = 64
deadlocks_1 PROC

; 267  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@deadlocks_:

; 268  :     UNREFERENCED( parg );

  00009	33 c0		 xor	 eax, eax
  0000b	85 c0		 test	 eax, eax
  0000d	75 fa		 jne	 SHORT $LN4@deadlocks_

; 269  : 
; 270  :     // 1 acq a, then b
; 271  : 
; 272  :     obtain_lock( &deadlocks_a );

  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204655
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deadlocks_a
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock
$LN7@deadlocks_:

; 273  :     {
; 274  :         SLEEP(1);

  00023	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR rc$1[rsp], 1
$LN8@deadlocks_:
  0002b	83 7c 24 20 00	 cmp	 DWORD PTR rc$1[rsp], 0
  00030	74 1d		 je	 SHORT $LN9@deadlocks_
  00032	8b 4c 24 20	 mov	 ecx, DWORD PTR rc$1[rsp]
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sleep
  0003c	89 44 24 20	 mov	 DWORD PTR rc$1[rsp], eax
  00040	83 7c 24 20 00	 cmp	 DWORD PTR rc$1[rsp], 0
  00045	74 06		 je	 SHORT $LN15@deadlocks_
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sched_yield
$LN15@deadlocks_:
  0004d	eb dc		 jmp	 SHORT $LN8@deadlocks_
$LN9@deadlocks_:
  0004f	33 c0		 xor	 eax, eax
  00051	85 c0		 test	 eax, eax
  00053	75 ce		 jne	 SHORT $LN7@deadlocks_

; 275  : 
; 276  :         obtain_lock( &deadlocks_b );

  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204657
  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deadlocks_b
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock
$LN12@deadlocks_:

; 277  :         {
; 278  :             SLEEP(1);

  00069	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR rc$2[rsp], 1
$LN13@deadlocks_:
  00071	83 7c 24 24 00	 cmp	 DWORD PTR rc$2[rsp], 0
  00076	74 1d		 je	 SHORT $LN14@deadlocks_
  00078	8b 4c 24 24	 mov	 ecx, DWORD PTR rc$2[rsp]
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sleep
  00082	89 44 24 24	 mov	 DWORD PTR rc$2[rsp], eax
  00086	83 7c 24 24 00	 cmp	 DWORD PTR rc$2[rsp], 0
  0008b	74 06		 je	 SHORT $LN16@deadlocks_
  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sched_yield
$LN16@deadlocks_:
  00093	eb dc		 jmp	 SHORT $LN13@deadlocks_
$LN14@deadlocks_:
  00095	33 c0		 xor	 eax, eax
  00097	85 c0		 test	 eax, eax
  00099	75 ce		 jne	 SHORT $LN12@deadlocks_

; 279  :         }
; 280  :         release_lock( &deadlocks_b );

  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204659
  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deadlocks_b
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 281  :     }
; 282  :     release_lock( &deadlocks_a );

  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204660
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:deadlocks_a
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 283  : 
; 284  :     return NULL;

  000c3	33 c0		 xor	 eax, eax

; 285  : }

  000c5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c9	c3		 ret	 0
deadlocks_1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
parg$ = 48
test_locks_thread PROC

; 252  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@test_locks:

; 253  :     // test thread exit with lock still held
; 254  :     static LOCK testlock;
; 255  :     UNREFERENCED(parg);

  00009	33 c0		 xor	 eax, eax
  0000b	85 c0		 test	 eax, eax
  0000d	75 fa		 jne	 SHORT $LN4@test_locks

; 256  :     initialize_lock( &testlock );

  0000f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204629
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204630
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?testlock@?1??test_locks_thread@@9@9
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_lock

; 257  :     obtain_lock( &testlock );

  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204631
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?testlock@?1??test_locks_thread@@9@9
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 258  :     return NULL;

  0003e	33 c0		 xor	 eax, eax

; 259  : }

  00040	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00044	c3		 ret	 0
test_locks_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
secs$ = 80
tid$ = 84
rc$ = 88
ts$ = 96
__$ArrayPad$ = 112
parg$ = 144
test_thread PROC

; 231  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 44 24 70	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 232  :     TID tid = thread_id();                  /* thread identity */

  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fthread_self
  00021	89 44 24 54	 mov	 DWORD PTR tid$[rsp], eax

; 233  :     int rc, secs = (int)(uintptr_t)parg;    /* how long to wait */

  00025	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR parg$[rsp]
  0002c	89 44 24 50	 mov	 DWORD PTR secs$[rsp], eax

; 234  :     struct timespec ts;                     /* nanosleep argument */
; 235  : 
; 236  :     ts.tv_sec  = secs;

  00030	48 63 44 24 50	 movsxd	 rax, DWORD PTR secs$[rsp]
  00035	48 89 44 24 60	 mov	 QWORD PTR ts$[rsp], rax

; 237  :     ts.tv_nsec = 0;

  0003a	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR ts$[rsp+8], 0

; 238  : 
; 239  :     /* Introduce Heisenberg */
; 240  :     sched_yield();

  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sched_yield

; 241  : 
; 242  :     /* Do nanosleep for the specified number of seconds */
; 243  :     LOGMSG("*** $test thread "TIDPAT": sleeping for %d seconds...\n", TID_CAST( tid ), secs );

  00048	b9 01 00 00 00	 mov	 ecx, 1
  0004d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00053	8b 4c 24 50	 mov	 ecx, DWORD PTR secs$[rsp]
  00057	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0005b	8b 4c 24 54	 mov	 ecx, DWORD PTR tid$[rsp]
  0005f	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204613
  0006a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0006f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00074	41 b9 03 00 00
	00		 mov	 r9d, 3
  0007a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204614
  00081	ba f3 00 00 00	 mov	 edx, 243		; 000000f3H
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204615
  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 244  :     rc = nanosleep( &ts, NULL );

  00093	33 d2		 xor	 edx, edx
  00095	48 8d 4c 24 60	 lea	 rcx, QWORD PTR ts$[rsp]
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_nanosleep
  000a0	89 44 24 58	 mov	 DWORD PTR rc$[rsp], eax

; 245  :     LOGMSG("*** $test thread "TIDPAT": %d second sleep done; rc=%d\n", TID_CAST( tid ), secs, rc );

  000a4	b9 01 00 00 00	 mov	 ecx, 1
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000af	8b 4c 24 58	 mov	 ecx, DWORD PTR rc$[rsp]
  000b3	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000b7	8b 4c 24 50	 mov	 ecx, DWORD PTR secs$[rsp]
  000bb	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000bf	8b 4c 24 54	 mov	 ecx, DWORD PTR tid$[rsp]
  000c3	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  000c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204616
  000ce	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000d3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d8	41 b9 03 00 00
	00		 mov	 r9d, 3
  000de	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204617
  000e5	ba f5 00 00 00	 mov	 edx, 245		; 000000f5H
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204618
  000f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 246  : 
; 247  :     return NULL;

  000f7	33 c0		 xor	 eax, eax

; 248  : }

  000f9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000fe	48 33 cc	 xor	 rcx, rsp
  00101	e8 00 00 00 00	 call	 __security_check_cookie
  00106	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0010d	c3		 ret	 0
test_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
plus_enable_on$ = 80
aaddr$ = 88
tv68 = 96
tv70 = 100
saddr$ = 104
len$ = 112
eaddr$ = 120
cmd$ = 128
tv151 = 136
buf$ = 144
__$ArrayPad$ = 208
regs$ = 240
cmdline$ = 248
z900_fonoff_cmd PROC

; 133  : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 134  :     char*   cmd = cmdline;              /* Copy of panel command     */

  00023	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR cmdline$[rsp]
  0002b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR cmd$[rsp], rax

; 135  :     U64     aaddr;                      /* Absolute storage address  */
; 136  :     U64     saddr, eaddr;               /* Range start/end addresses */
; 137  :     int     len;                        /* Number of bytes to alter  */
; 138  :     bool    plus_enable_on;             /* true == x+, false == x-   */
; 139  :     char    buf[64];                    /* Message buffer            */
; 140  : 
; 141  :     plus_enable_on = (cmd[1] == '+');

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR cmd$[rsp]
  00044	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00048	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  0004b	75 0a		 jne	 SHORT $LN10@z900_fonof
  0004d	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  00055	eb 08		 jmp	 SHORT $LN11@z900_fonof
$LN10@z900_fonof:
  00057	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN11@z900_fonof:
  0005f	83 7c 24 60 00	 cmp	 DWORD PTR tv68[rsp], 0
  00064	75 0a		 jne	 SHORT $LN12@z900_fonof
  00066	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
  0006e	eb 08		 jmp	 SHORT $LN13@z900_fonof
$LN12@z900_fonof:
  00070	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR tv70[rsp], 1
$LN13@z900_fonof:
  00078	0f b6 44 24 64	 movzx	 eax, BYTE PTR tv70[rsp]
  0007d	88 44 24 50	 mov	 BYTE PTR plus_enable_on$[rsp], al

; 142  : 
; 143  :     /* Parse the range operand(s) */
; 144  :     if ((len = parse_range( cmd+2, sysblk.mainsize-1, &saddr, &eaddr, NULL )) < 0)

  00081	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00088	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0008f	48 ff c8	 dec	 rax
  00092	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR cmd$[rsp]
  0009a	48 83 c1 02	 add	 rcx, 2
  0009e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000a7	4c 8d 4c 24 78	 lea	 r9, QWORD PTR eaddr$[rsp]
  000ac	4c 8d 44 24 68	 lea	 r8, QWORD PTR saddr$[rsp]
  000b1	48 8b d0	 mov	 rdx, rax
  000b4	e8 00 00 00 00	 call	 parse_range
  000b9	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax
  000bd	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  000c2	7d 07		 jge	 SHORT $LN5@z900_fonof

; 145  :         return 0; /* (error message already issued) */

  000c4	33 c0		 xor	 eax, eax
  000c6	e9 d5 01 00 00	 jmp	 $LN1@z900_fonof
$LN5@z900_fonof:

; 146  : 
; 147  :     /* Round start/end address to page boundary */
; 148  :     saddr &= STORAGE_KEY_PAGEMASK;

  000cb	48 8b 44 24 68	 mov	 rax, QWORD PTR saddr$[rsp]
  000d0	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  000d6	48 89 44 24 68	 mov	 QWORD PTR saddr$[rsp], rax

; 149  :     eaddr &= STORAGE_KEY_PAGEMASK;

  000db	48 8b 44 24 78	 mov	 rax, QWORD PTR eaddr$[rsp]
  000e0	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  000e6	48 89 44 24 78	 mov	 QWORD PTR eaddr$[rsp], rax

; 150  : 
; 151  :     /* Mark all frames in range as usable or unusable */
; 152  :     for (aaddr = saddr; aaddr <= eaddr; aaddr += STORAGE_KEY_PAGESIZE)

  000eb	48 8b 44 24 68	 mov	 rax, QWORD PTR saddr$[rsp]
  000f0	48 89 44 24 58	 mov	 QWORD PTR aaddr$[rsp], rax
  000f5	eb 10		 jmp	 SHORT $LN4@z900_fonof
$LN2@z900_fonof:
  000f7	48 8b 44 24 58	 mov	 rax, QWORD PTR aaddr$[rsp]
  000fc	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00102	48 89 44 24 58	 mov	 QWORD PTR aaddr$[rsp], rax
$LN4@z900_fonof:
  00107	48 8b 44 24 78	 mov	 rax, QWORD PTR eaddr$[rsp]
  0010c	48 39 44 24 58	 cmp	 QWORD PTR aaddr$[rsp], rax
  00111	0f 87 d1 00 00
	00		 ja	 $LN3@z900_fonof

; 153  :     {
; 154  :         if (aaddr > regs->mainlim)

  00117	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0011f	48 8b 80 58 08
	00 00		 mov	 rax, QWORD PTR [rax+2136]
  00126	48 39 44 24 58	 cmp	 QWORD PTR aaddr$[rsp], rax
  0012b	0f 86 89 00 00
	00		 jbe	 $LN6@z900_fonof

; 155  :         {
; 156  :             MSGBUF( buf, F_RADR, aaddr);

  00131	4c 8b 4c 24 58	 mov	 r9, QWORD PTR aaddr$[rsp]
  00136	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204571
  0013d	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00142	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 157  :             // "Invalid argument %s%s"
; 158  :             WRMSG( HHC02205, "E", buf, "" );

  00150	b9 01 00 00 00	 mov	 ecx, 1
  00155	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0015b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204572
  00162	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00167	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0016f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00174	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204573
  0017b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00180	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204574
  00187	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0018c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00191	41 b9 03 00 00
	00		 mov	 r9d, 3
  00197	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204575
  0019e	ba 9e 00 00 00	 mov	 edx, 158		; 0000009eH
  001a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204576
  001aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 159  :             return -1;

  001b0	b8 ff ff ff ff	 mov	 eax, -1
  001b5	e9 e6 00 00 00	 jmp	 $LN1@z900_fonof
$LN6@z900_fonof:

; 160  :         }
; 161  : 
; 162  :         /* Note: we must use the internal "_xxx_storage_key"
; 163  :            functions to be able to directly set/clear the
; 164  :            internal STORKEY_BADFRM bit.
; 165  :         */
; 166  :         if (plus_enable_on)

  001ba	0f b6 44 24 50	 movzx	 eax, BYTE PTR plus_enable_on$[rsp]
  001bf	85 c0		 test	 eax, eax
  001c1	74 11		 je	 SHORT $LN7@z900_fonof

; 167  :             ARCH_DEP( _and_storage_key )( aaddr, STORKEY_BADFRM, SKEY_K );

  001c3	41 b0 04	 mov	 r8b, 4
  001c6	b2 01		 mov	 dl, 1
  001c8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR aaddr$[rsp]
  001cd	e8 00 00 00 00	 call	 z900__and_storage_key
  001d2	eb 0f		 jmp	 SHORT $LN8@z900_fonof
$LN7@z900_fonof:

; 168  :         else
; 169  :             ARCH_DEP( _or_storage_key )(  aaddr, STORKEY_BADFRM, SKEY_K );

  001d4	41 b0 04	 mov	 r8b, 4
  001d7	b2 01		 mov	 dl, 1
  001d9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR aaddr$[rsp]
  001de	e8 00 00 00 00	 call	 z900__or_storage_key
$LN8@z900_fonof:

; 170  :     }

  001e3	e9 0f ff ff ff	 jmp	 $LN2@z900_fonof
$LN3@z900_fonof:

; 171  : 
; 172  :     MSGBUF( buf, "Storage "F_RADR"-"F_RADR, saddr, aaddr - 1 );

  001e8	48 8b 44 24 58	 mov	 rax, QWORD PTR aaddr$[rsp]
  001ed	48 ff c8	 dec	 rax
  001f0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f5	4c 8b 4c 24 68	 mov	 r9, QWORD PTR saddr$[rsp]
  001fa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204579
  00201	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00206	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0020e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 173  :     // "%-14s set to %s"
; 174  :     WRMSG( HHC02204, "I", buf, plus_enable_on ? "usable" : "unusable" );

  00214	0f b6 44 24 50	 movzx	 eax, BYTE PTR plus_enable_on$[rsp]
  00219	85 c0		 test	 eax, eax
  0021b	74 11		 je	 SHORT $LN14@z900_fonof
  0021d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG204580
  00224	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv151[rsp], rax
  0022c	eb 0f		 jmp	 SHORT $LN15@z900_fonof
$LN14@z900_fonof:
  0022e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG204581
  00235	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv151[rsp], rax
$LN15@z900_fonof:
  0023d	b9 01 00 00 00	 mov	 ecx, 1
  00242	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00248	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv151[rsp]
  00250	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00255	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0025d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00262	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204582
  00269	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0026e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204583
  00275	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0027a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0027f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00285	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204584
  0028c	ba ae 00 00 00	 mov	 edx, 174		; 000000aeH
  00291	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204585
  00298	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 175  :     return 0;

  0029e	33 c0		 xor	 eax, eax
$LN1@z900_fonof:

; 176  : }

  002a0	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  002a8	48 33 cc	 xor	 rcx, rsp
  002ab	e8 00 00 00 00	 call	 __security_check_cookie
  002b0	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  002b7	c3		 ret	 0
z900_fonoff_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
looking4bad$ = 80
bad$ = 81
foundbad$ = 82
tv75 = 84
aaddr$ = 88
begbad$ = 96
tv85 = 104
tv133 = 112
z900_fquest_cmd PROC

; 89   : {

$LN14:
  00000	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 90   :     U64   aaddr, begbad = 0;

  00007	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR begbad$[rsp], 0

; 91   :     bool  looking4bad = true, bad, foundbad = false;

  00010	c6 44 24 50 01	 mov	 BYTE PTR looking4bad$[rsp], 1
  00015	c6 44 24 52 00	 mov	 BYTE PTR foundbad$[rsp], 0

; 92   : 
; 93   :     /* Scan all of defined storage to locate all bad frames */
; 94   :     OBTAIN_INTLOCK( NULL );

  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204532
  00021	33 c9		 xor	 ecx, ecx
  00023	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 95   :     {
; 96   :         for (aaddr=0; aaddr < sysblk.mainsize; aaddr += STORAGE_KEY_PAGESIZE)

  00028	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR aaddr$[rsp], 0
  00031	eb 10		 jmp	 SHORT $LN4@z900_fques
$LN2@z900_fques:
  00033	48 8b 44 24 58	 mov	 rax, QWORD PTR aaddr$[rsp]
  00038	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  0003e	48 89 44 24 58	 mov	 QWORD PTR aaddr$[rsp], rax
$LN4@z900_fques:
  00043	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0004a	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00051	48 39 44 24 58	 cmp	 QWORD PTR aaddr$[rsp], rax
  00056	0f 83 dd 00 00
	00		 jae	 $LN3@z900_fques

; 97   :         {
; 98   :             /* NOTE: we use the internal "_get_storage_key" function
; 99   :                here so we're returned the internal STORKEY_BADFRM bit.
; 100  :             */
; 101  :             bad = ARCH_DEP( _get_storage_key )( aaddr, SKEY_K ) & STORKEY_BADFRM;

  0005c	b2 04		 mov	 dl, 4
  0005e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR aaddr$[rsp]
  00063	e8 00 00 00 00	 call	 z900__get_storage_key
  00068	0f b6 c0	 movzx	 eax, al
  0006b	83 e0 01	 and	 eax, 1
  0006e	85 c0		 test	 eax, eax
  00070	75 0a		 jne	 SHORT $LN12@z900_fques
  00072	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
  0007a	eb 08		 jmp	 SHORT $LN13@z900_fques
$LN12@z900_fques:
  0007c	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
$LN13@z900_fques:
  00084	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv75[rsp]
  00089	88 44 24 51	 mov	 BYTE PTR bad$[rsp], al

; 102  : 
; 103  :             if (looking4bad && bad)

  0008d	0f b6 44 24 50	 movzx	 eax, BYTE PTR looking4bad$[rsp]
  00092	85 c0		 test	 eax, eax
  00094	74 1f		 je	 SHORT $LN5@z900_fques
  00096	0f b6 44 24 51	 movzx	 eax, BYTE PTR bad$[rsp]
  0009b	85 c0		 test	 eax, eax
  0009d	74 16		 je	 SHORT $LN5@z900_fques

; 104  :             {
; 105  :                 foundbad = true;

  0009f	c6 44 24 52 01	 mov	 BYTE PTR foundbad$[rsp], 1

; 106  :                 begbad = aaddr;         /* Beginning of bad range */

  000a4	48 8b 44 24 58	 mov	 rax, QWORD PTR aaddr$[rsp]
  000a9	48 89 44 24 60	 mov	 QWORD PTR begbad$[rsp], rax

; 107  :                 looking4bad = false;

  000ae	c6 44 24 50 00	 mov	 BYTE PTR looking4bad$[rsp], 0

; 108  :             }

  000b3	eb 7f		 jmp	 SHORT $LN6@z900_fques
$LN5@z900_fques:

; 109  :             else if (!looking4bad && !bad)

  000b5	0f b6 44 24 50	 movzx	 eax, BYTE PTR looking4bad$[rsp]
  000ba	85 c0		 test	 eax, eax
  000bc	75 76		 jne	 SHORT $LN7@z900_fques
  000be	0f b6 44 24 51	 movzx	 eax, BYTE PTR bad$[rsp]
  000c3	85 c0		 test	 eax, eax
  000c5	75 6d		 jne	 SHORT $LN7@z900_fques

; 110  :             {
; 111  :                 // "Storage "F_RADR"-"F_RADR" set to unusable"
; 112  :                 WRMSG( HHC02390, "I", begbad, aaddr - 1);

  000c7	48 8b 44 24 58	 mov	 rax, QWORD PTR aaddr$[rsp]
  000cc	48 ff c8	 dec	 rax
  000cf	48 89 44 24 68	 mov	 QWORD PTR tv85[rsp], rax
  000d4	b9 01 00 00 00	 mov	 ecx, 1
  000d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000df	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv85[rsp]
  000e4	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000e9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR begbad$[rsp]
  000ee	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204536
  000fa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204537
  00106	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0010b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00110	41 b9 03 00 00
	00		 mov	 r9d, 3
  00116	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204538
  0011d	ba 70 00 00 00	 mov	 edx, 112		; 00000070H
  00122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204539
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 113  :                 looking4bad = true;

  0012f	c6 44 24 50 01	 mov	 BYTE PTR looking4bad$[rsp], 1
$LN7@z900_fques:
$LN6@z900_fques:

; 114  :             }
; 115  :         }

  00134	e9 fa fe ff ff	 jmp	 $LN2@z900_fques
$LN3@z900_fques:

; 116  :     }
; 117  :     RELEASE_INTLOCK( NULL );

  00139	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG204540
  00140	33 c9		 xor	 ecx, ecx
  00142	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 118  : 
; 119  :     if (!looking4bad)

  00147	0f b6 44 24 50	 movzx	 eax, BYTE PTR looking4bad$[rsp]
  0014c	85 c0		 test	 eax, eax
  0014e	75 6a		 jne	 SHORT $LN8@z900_fques

; 120  :         // "Storage "F_RADR"-"F_RADR" set to unusable"
; 121  :         WRMSG( HHC02390, "I", begbad, aaddr - 1);

  00150	48 8b 44 24 58	 mov	 rax, QWORD PTR aaddr$[rsp]
  00155	48 ff c8	 dec	 rax
  00158	48 89 44 24 70	 mov	 QWORD PTR tv133[rsp], rax
  0015d	b9 01 00 00 00	 mov	 ecx, 1
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00168	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv133[rsp]
  0016d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00172	48 8b 4c 24 60	 mov	 rcx, QWORD PTR begbad$[rsp]
  00177	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0017c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204543
  00183	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00188	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204544
  0018f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00194	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00199	41 b9 03 00 00
	00		 mov	 r9d, 3
  0019f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204545
  001a6	ba 79 00 00 00	 mov	 edx, 121		; 00000079H
  001ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204546
  001b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  001b8	eb 50		 jmp	 SHORT $LN9@z900_fques
$LN8@z900_fques:

; 122  :     else if (!foundbad)

  001ba	0f b6 44 24 52	 movzx	 eax, BYTE PTR foundbad$[rsp]
  001bf	85 c0		 test	 eax, eax
  001c1	75 47		 jne	 SHORT $LN10@z900_fques

; 123  :         // "No unusable storage found"
; 124  :         WRMSG( HHC02391, "I" );

  001c3	b9 01 00 00 00	 mov	 ecx, 1
  001c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204548
  001d5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204549
  001e1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001e6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001eb	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG204550
  001f8	ba 7c 00 00 00	 mov	 edx, 124		; 0000007cH
  001fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG204551
  00204	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN10@z900_fques:
$LN9@z900_fques:

; 125  : 
; 126  :     return 0;

  0020a	33 c0		 xor	 eax, eax

; 127  : }

  0020c	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00213	c3		 ret	 0
z900_fquest_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900_get_4K_storage_key
_TEXT	SEGMENT
abs$ = 48
z900_get_4K_storage_key PROC				; COMDAT

; 239  :   inline BYTE  ARCH_DEP( get_4K_storage_key )     (              U64 abs            ) { return ARCH_DEP( _get_storage_key     )(      abs, 4 )  & ~STORKEY_BADFRM;      }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	b2 04		 mov	 dl, 4
  0000b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00010	e8 00 00 00 00	 call	 z900__get_storage_key
  00015	0f b6 c0	 movzx	 eax, al
  00018	83 e0 fe	 and	 eax, -2
  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
z900_get_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900__or_storage_key
_TEXT	SEGMENT
skey1_ptr$1 = 32
skey2_ptr$2 = 40
skey_ptr$3 = 48
abs$ = 80
bits$ = 88
K$ = 96
z900__or_storage_key PROC				; COMDAT

; 189  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@z900__or_s:

; 190  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@z900__or_s

; 191  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	74 50		 je	 SHORT $LN5@z900__or_s

; 192  :     {
; 193  :         BYTE* skey1_ptr = _get_storekey1_ptr( abs );

  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00023	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00028	48 89 44 24 20	 mov	 QWORD PTR skey1_ptr$1[rsp], rax

; 194  :         BYTE* skey2_ptr = _get_storekey2_ptr( abs );

  0002d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00032	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00037	48 89 44 24 28	 mov	 QWORD PTR skey2_ptr$2[rsp], rax

; 195  :         OR_SKEY( skey1_ptr, bits );

  0003c	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00041	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00046	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00049	0b c8		 or	 ecx, eax
  0004b	8b c1		 mov	 eax, ecx
  0004d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00052	88 01		 mov	 BYTE PTR [rcx], al

; 196  :         OR_SKEY( skey2_ptr, bits );

  00054	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00059	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0005e	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00061	0b c8		 or	 ecx, eax
  00063	8b c1		 mov	 eax, ecx
  00065	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0006a	88 01		 mov	 BYTE PTR [rcx], al

; 197  :     }

  0006c	eb 2c		 jmp	 SHORT $LN6@z900__or_s
$LN5@z900__or_s:

; 198  :     else
; 199  :     {
; 200  :         BYTE* skey_ptr  = _get_storekey_ptr( abs, K );

  0006e	0f b6 54 24 60	 movzx	 edx, BYTE PTR K$[rsp]
  00073	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00078	e8 00 00 00 00	 call	 _get_storekey_ptr
  0007d	48 89 44 24 30	 mov	 QWORD PTR skey_ptr$3[rsp], rax

; 201  :         OR_SKEY( skey_ptr, bits );

  00082	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00087	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  0008c	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0008f	0b c8		 or	 ecx, eax
  00091	8b c1		 mov	 eax, ecx
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  00098	88 01		 mov	 BYTE PTR [rcx], al
$LN6@z900__or_s:

; 202  :     }
; 203  : }

  0009a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009e	c3		 ret	 0
z900__or_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900__and_storage_key
_TEXT	SEGMENT
skey1_ptr$1 = 32
skey2_ptr$2 = 40
skey_ptr$3 = 48
abs$ = 80
bits$ = 88
K$ = 96
z900__and_storage_key PROC				; COMDAT

; 172  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@z900__and_:

; 173  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@z900__and_

; 174  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	74 54		 je	 SHORT $LN5@z900__and_

; 175  :     {
; 176  :         BYTE* skey1_ptr = _get_storekey1_ptr( abs );

  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00023	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00028	48 89 44 24 20	 mov	 QWORD PTR skey1_ptr$1[rsp], rax

; 177  :         BYTE* skey2_ptr = _get_storekey2_ptr( abs );

  0002d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00032	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00037	48 89 44 24 28	 mov	 QWORD PTR skey2_ptr$2[rsp], rax

; 178  :         AND_SKEY( skey1_ptr, ~bits );

  0003c	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00041	f7 d0		 not	 eax
  00043	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00048	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0004b	23 c8		 and	 ecx, eax
  0004d	8b c1		 mov	 eax, ecx
  0004f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00054	88 01		 mov	 BYTE PTR [rcx], al

; 179  :         AND_SKEY( skey2_ptr, ~bits );

  00056	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  0005b	f7 d0		 not	 eax
  0005d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  00062	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00065	23 c8		 and	 ecx, eax
  00067	8b c1		 mov	 eax, ecx
  00069	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0006e	88 01		 mov	 BYTE PTR [rcx], al

; 180  :     }

  00070	eb 2e		 jmp	 SHORT $LN6@z900__and_
$LN5@z900__and_:

; 181  :     else
; 182  :     {
; 183  :         BYTE* skey_ptr  = _get_storekey_ptr(  abs, K );

  00072	0f b6 54 24 60	 movzx	 edx, BYTE PTR K$[rsp]
  00077	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  0007c	e8 00 00 00 00	 call	 _get_storekey_ptr
  00081	48 89 44 24 30	 mov	 QWORD PTR skey_ptr$3[rsp], rax

; 184  :         AND_SKEY( skey_ptr, ~bits );

  00086	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  0008b	f7 d0		 not	 eax
  0008d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  00092	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00095	23 c8		 and	 ecx, eax
  00097	8b c1		 mov	 eax, ecx
  00099	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  0009e	88 01		 mov	 BYTE PTR [rcx], al
$LN6@z900__and_:

; 185  :     }
; 186  : }

  000a0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a4	c3		 ret	 0
z900__and_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900__get_storage_key
_TEXT	SEGMENT
skey$ = 32
abs$ = 64
K$ = 72
z900__get_storage_key PROC				; COMDAT

; 130  : {

$LN8:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900__get_:

; 131  :     BYTE skey;
; 132  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  0000d	33 c0		 xor	 eax, eax
  0000f	85 c0		 test	 eax, eax
  00011	75 fa		 jne	 SHORT $LN4@z900__get_

; 133  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00013	33 c0		 xor	 eax, eax
  00015	85 c0		 test	 eax, eax
  00017	74 32		 je	 SHORT $LN5@z900__get_

; 134  :     {
; 135  :         skey  = *_get_storekey1_ptr( abs );

  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  0001e	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00023	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00026	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al

; 136  :         skey |= *_get_storekey2_ptr( abs ) & ~(STORKEY_KEY);

  0002a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  0002f	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00034	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00037	25 0f ff ff ff	 and	 eax, -241		; ffffffffffffff0fH
  0003c	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR skey$[rsp]
  00041	0b c8		 or	 ecx, eax
  00043	8b c1		 mov	 eax, ecx
  00045	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al

; 137  :     }

  00049	eb 16		 jmp	 SHORT $LN6@z900__get_
$LN5@z900__get_:

; 138  :     else
; 139  :         skey  = *_get_storekey_ptr(  abs, K );

  0004b	0f b6 54 24 48	 movzx	 edx, BYTE PTR K$[rsp]
  00050	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  00055	e8 00 00 00 00	 call	 _get_storekey_ptr
  0005a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0005d	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al
$LN6@z900__get_:

; 140  :     return skey;

  00061	0f b6 44 24 20	 movzx	 eax, BYTE PTR skey$[rsp]

; 141  : }

  00066	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006a	c3		 ret	 0
z900__get_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
plus_enable_on$ = 80
aaddr$ = 88
tv68 = 96
tv70 = 100
saddr$ = 104
len$ = 112
eaddr$ = 120
cmd$ = 128
tv151 = 136
buf$ = 144
__$ArrayPad$ = 208
regs$ = 240
cmdline$ = 248
s390_fonoff_cmd PROC

; 133  : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 134  :     char*   cmd = cmdline;              /* Copy of panel command     */

  00023	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR cmdline$[rsp]
  0002b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR cmd$[rsp], rax

; 135  :     U64     aaddr;                      /* Absolute storage address  */
; 136  :     U64     saddr, eaddr;               /* Range start/end addresses */
; 137  :     int     len;                        /* Number of bytes to alter  */
; 138  :     bool    plus_enable_on;             /* true == x+, false == x-   */
; 139  :     char    buf[64];                    /* Message buffer            */
; 140  : 
; 141  :     plus_enable_on = (cmd[1] == '+');

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR cmd$[rsp]
  00044	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00048	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  0004b	75 0a		 jne	 SHORT $LN10@s390_fonof
  0004d	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  00055	eb 08		 jmp	 SHORT $LN11@s390_fonof
$LN10@s390_fonof:
  00057	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN11@s390_fonof:
  0005f	83 7c 24 60 00	 cmp	 DWORD PTR tv68[rsp], 0
  00064	75 0a		 jne	 SHORT $LN12@s390_fonof
  00066	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
  0006e	eb 08		 jmp	 SHORT $LN13@s390_fonof
$LN12@s390_fonof:
  00070	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR tv70[rsp], 1
$LN13@s390_fonof:
  00078	0f b6 44 24 64	 movzx	 eax, BYTE PTR tv70[rsp]
  0007d	88 44 24 50	 mov	 BYTE PTR plus_enable_on$[rsp], al

; 142  : 
; 143  :     /* Parse the range operand(s) */
; 144  :     if ((len = parse_range( cmd+2, sysblk.mainsize-1, &saddr, &eaddr, NULL )) < 0)

  00081	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00088	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0008f	48 ff c8	 dec	 rax
  00092	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR cmd$[rsp]
  0009a	48 83 c1 02	 add	 rcx, 2
  0009e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000a7	4c 8d 4c 24 78	 lea	 r9, QWORD PTR eaddr$[rsp]
  000ac	4c 8d 44 24 68	 lea	 r8, QWORD PTR saddr$[rsp]
  000b1	48 8b d0	 mov	 rdx, rax
  000b4	e8 00 00 00 00	 call	 parse_range
  000b9	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax
  000bd	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  000c2	7d 07		 jge	 SHORT $LN5@s390_fonof

; 145  :         return 0; /* (error message already issued) */

  000c4	33 c0		 xor	 eax, eax
  000c6	e9 d5 01 00 00	 jmp	 $LN1@s390_fonof
$LN5@s390_fonof:

; 146  : 
; 147  :     /* Round start/end address to page boundary */
; 148  :     saddr &= STORAGE_KEY_PAGEMASK;

  000cb	48 8b 44 24 68	 mov	 rax, QWORD PTR saddr$[rsp]
  000d0	48 25 00 f0 ff
	7f		 and	 rax, 2147479552		; 7ffff000H
  000d6	48 89 44 24 68	 mov	 QWORD PTR saddr$[rsp], rax

; 149  :     eaddr &= STORAGE_KEY_PAGEMASK;

  000db	48 8b 44 24 78	 mov	 rax, QWORD PTR eaddr$[rsp]
  000e0	48 25 00 f0 ff
	7f		 and	 rax, 2147479552		; 7ffff000H
  000e6	48 89 44 24 78	 mov	 QWORD PTR eaddr$[rsp], rax

; 150  : 
; 151  :     /* Mark all frames in range as usable or unusable */
; 152  :     for (aaddr = saddr; aaddr <= eaddr; aaddr += STORAGE_KEY_PAGESIZE)

  000eb	48 8b 44 24 68	 mov	 rax, QWORD PTR saddr$[rsp]
  000f0	48 89 44 24 58	 mov	 QWORD PTR aaddr$[rsp], rax
  000f5	eb 10		 jmp	 SHORT $LN4@s390_fonof
$LN2@s390_fonof:
  000f7	48 8b 44 24 58	 mov	 rax, QWORD PTR aaddr$[rsp]
  000fc	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00102	48 89 44 24 58	 mov	 QWORD PTR aaddr$[rsp], rax
$LN4@s390_fonof:
  00107	48 8b 44 24 78	 mov	 rax, QWORD PTR eaddr$[rsp]
  0010c	48 39 44 24 58	 cmp	 QWORD PTR aaddr$[rsp], rax
  00111	0f 87 d1 00 00
	00		 ja	 $LN3@s390_fonof

; 153  :     {
; 154  :         if (aaddr > regs->mainlim)

  00117	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0011f	48 8b 80 58 08
	00 00		 mov	 rax, QWORD PTR [rax+2136]
  00126	48 39 44 24 58	 cmp	 QWORD PTR aaddr$[rsp], rax
  0012b	0f 86 89 00 00
	00		 jbe	 $LN6@s390_fonof

; 155  :         {
; 156  :             MSGBUF( buf, F_RADR, aaddr);

  00131	4c 8b 4c 24 58	 mov	 r9, QWORD PTR aaddr$[rsp]
  00136	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG191609
  0013d	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00142	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 157  :             // "Invalid argument %s%s"
; 158  :             WRMSG( HHC02205, "E", buf, "" );

  00150	b9 01 00 00 00	 mov	 ecx, 1
  00155	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0015b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG191610
  00162	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00167	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0016f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00174	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG191611
  0017b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00180	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG191612
  00187	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0018c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00191	41 b9 03 00 00
	00		 mov	 r9d, 3
  00197	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG191613
  0019e	ba 9e 00 00 00	 mov	 edx, 158		; 0000009eH
  001a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG191614
  001aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 159  :             return -1;

  001b0	b8 ff ff ff ff	 mov	 eax, -1
  001b5	e9 e6 00 00 00	 jmp	 $LN1@s390_fonof
$LN6@s390_fonof:

; 160  :         }
; 161  : 
; 162  :         /* Note: we must use the internal "_xxx_storage_key"
; 163  :            functions to be able to directly set/clear the
; 164  :            internal STORKEY_BADFRM bit.
; 165  :         */
; 166  :         if (plus_enable_on)

  001ba	0f b6 44 24 50	 movzx	 eax, BYTE PTR plus_enable_on$[rsp]
  001bf	85 c0		 test	 eax, eax
  001c1	74 11		 je	 SHORT $LN7@s390_fonof

; 167  :             ARCH_DEP( _and_storage_key )( aaddr, STORKEY_BADFRM, SKEY_K );

  001c3	41 b0 04	 mov	 r8b, 4
  001c6	b2 01		 mov	 dl, 1
  001c8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR aaddr$[rsp]
  001cd	e8 00 00 00 00	 call	 s390__and_storage_key
  001d2	eb 0f		 jmp	 SHORT $LN8@s390_fonof
$LN7@s390_fonof:

; 168  :         else
; 169  :             ARCH_DEP( _or_storage_key )(  aaddr, STORKEY_BADFRM, SKEY_K );

  001d4	41 b0 04	 mov	 r8b, 4
  001d7	b2 01		 mov	 dl, 1
  001d9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR aaddr$[rsp]
  001de	e8 00 00 00 00	 call	 s390__or_storage_key
$LN8@s390_fonof:

; 170  :     }

  001e3	e9 0f ff ff ff	 jmp	 $LN2@s390_fonof
$LN3@s390_fonof:

; 171  : 
; 172  :     MSGBUF( buf, "Storage "F_RADR"-"F_RADR, saddr, aaddr - 1 );

  001e8	48 8b 44 24 58	 mov	 rax, QWORD PTR aaddr$[rsp]
  001ed	48 ff c8	 dec	 rax
  001f0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f5	4c 8b 4c 24 68	 mov	 r9, QWORD PTR saddr$[rsp]
  001fa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG191617
  00201	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00206	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0020e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 173  :     // "%-14s set to %s"
; 174  :     WRMSG( HHC02204, "I", buf, plus_enable_on ? "usable" : "unusable" );

  00214	0f b6 44 24 50	 movzx	 eax, BYTE PTR plus_enable_on$[rsp]
  00219	85 c0		 test	 eax, eax
  0021b	74 11		 je	 SHORT $LN14@s390_fonof
  0021d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG191618
  00224	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv151[rsp], rax
  0022c	eb 0f		 jmp	 SHORT $LN15@s390_fonof
$LN14@s390_fonof:
  0022e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG191619
  00235	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv151[rsp], rax
$LN15@s390_fonof:
  0023d	b9 01 00 00 00	 mov	 ecx, 1
  00242	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00248	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv151[rsp]
  00250	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00255	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0025d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00262	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG191620
  00269	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0026e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG191621
  00275	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0027a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0027f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00285	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG191622
  0028c	ba ae 00 00 00	 mov	 edx, 174		; 000000aeH
  00291	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG191623
  00298	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 175  :     return 0;

  0029e	33 c0		 xor	 eax, eax
$LN1@s390_fonof:

; 176  : }

  002a0	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  002a8	48 33 cc	 xor	 rcx, rsp
  002ab	e8 00 00 00 00	 call	 __security_check_cookie
  002b0	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  002b7	c3		 ret	 0
s390_fonoff_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
looking4bad$ = 80
bad$ = 81
foundbad$ = 82
tv75 = 84
aaddr$ = 88
begbad$ = 96
tv85 = 104
tv133 = 112
s390_fquest_cmd PROC

; 89   : {

$LN14:
  00000	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 90   :     U64   aaddr, begbad = 0;

  00007	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR begbad$[rsp], 0

; 91   :     bool  looking4bad = true, bad, foundbad = false;

  00010	c6 44 24 50 01	 mov	 BYTE PTR looking4bad$[rsp], 1
  00015	c6 44 24 52 00	 mov	 BYTE PTR foundbad$[rsp], 0

; 92   : 
; 93   :     /* Scan all of defined storage to locate all bad frames */
; 94   :     OBTAIN_INTLOCK( NULL );

  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG191570
  00021	33 c9		 xor	 ecx, ecx
  00023	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 95   :     {
; 96   :         for (aaddr=0; aaddr < sysblk.mainsize; aaddr += STORAGE_KEY_PAGESIZE)

  00028	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR aaddr$[rsp], 0
  00031	eb 10		 jmp	 SHORT $LN4@s390_fques
$LN2@s390_fques:
  00033	48 8b 44 24 58	 mov	 rax, QWORD PTR aaddr$[rsp]
  00038	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  0003e	48 89 44 24 58	 mov	 QWORD PTR aaddr$[rsp], rax
$LN4@s390_fques:
  00043	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0004a	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00051	48 39 44 24 58	 cmp	 QWORD PTR aaddr$[rsp], rax
  00056	0f 83 dd 00 00
	00		 jae	 $LN3@s390_fques

; 97   :         {
; 98   :             /* NOTE: we use the internal "_get_storage_key" function
; 99   :                here so we're returned the internal STORKEY_BADFRM bit.
; 100  :             */
; 101  :             bad = ARCH_DEP( _get_storage_key )( aaddr, SKEY_K ) & STORKEY_BADFRM;

  0005c	b2 04		 mov	 dl, 4
  0005e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR aaddr$[rsp]
  00063	e8 00 00 00 00	 call	 s390__get_storage_key
  00068	0f b6 c0	 movzx	 eax, al
  0006b	83 e0 01	 and	 eax, 1
  0006e	85 c0		 test	 eax, eax
  00070	75 0a		 jne	 SHORT $LN12@s390_fques
  00072	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
  0007a	eb 08		 jmp	 SHORT $LN13@s390_fques
$LN12@s390_fques:
  0007c	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
$LN13@s390_fques:
  00084	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv75[rsp]
  00089	88 44 24 51	 mov	 BYTE PTR bad$[rsp], al

; 102  : 
; 103  :             if (looking4bad && bad)

  0008d	0f b6 44 24 50	 movzx	 eax, BYTE PTR looking4bad$[rsp]
  00092	85 c0		 test	 eax, eax
  00094	74 1f		 je	 SHORT $LN5@s390_fques
  00096	0f b6 44 24 51	 movzx	 eax, BYTE PTR bad$[rsp]
  0009b	85 c0		 test	 eax, eax
  0009d	74 16		 je	 SHORT $LN5@s390_fques

; 104  :             {
; 105  :                 foundbad = true;

  0009f	c6 44 24 52 01	 mov	 BYTE PTR foundbad$[rsp], 1

; 106  :                 begbad = aaddr;         /* Beginning of bad range */

  000a4	48 8b 44 24 58	 mov	 rax, QWORD PTR aaddr$[rsp]
  000a9	48 89 44 24 60	 mov	 QWORD PTR begbad$[rsp], rax

; 107  :                 looking4bad = false;

  000ae	c6 44 24 50 00	 mov	 BYTE PTR looking4bad$[rsp], 0

; 108  :             }

  000b3	eb 7f		 jmp	 SHORT $LN6@s390_fques
$LN5@s390_fques:

; 109  :             else if (!looking4bad && !bad)

  000b5	0f b6 44 24 50	 movzx	 eax, BYTE PTR looking4bad$[rsp]
  000ba	85 c0		 test	 eax, eax
  000bc	75 76		 jne	 SHORT $LN7@s390_fques
  000be	0f b6 44 24 51	 movzx	 eax, BYTE PTR bad$[rsp]
  000c3	85 c0		 test	 eax, eax
  000c5	75 6d		 jne	 SHORT $LN7@s390_fques

; 110  :             {
; 111  :                 // "Storage "F_RADR"-"F_RADR" set to unusable"
; 112  :                 WRMSG( HHC02390, "I", begbad, aaddr - 1);

  000c7	48 8b 44 24 58	 mov	 rax, QWORD PTR aaddr$[rsp]
  000cc	48 ff c8	 dec	 rax
  000cf	48 89 44 24 68	 mov	 QWORD PTR tv85[rsp], rax
  000d4	b9 01 00 00 00	 mov	 ecx, 1
  000d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000df	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv85[rsp]
  000e4	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000e9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR begbad$[rsp]
  000ee	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG191574
  000fa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG191575
  00106	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0010b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00110	41 b9 03 00 00
	00		 mov	 r9d, 3
  00116	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG191576
  0011d	ba 70 00 00 00	 mov	 edx, 112		; 00000070H
  00122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG191577
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 113  :                 looking4bad = true;

  0012f	c6 44 24 50 01	 mov	 BYTE PTR looking4bad$[rsp], 1
$LN7@s390_fques:
$LN6@s390_fques:

; 114  :             }
; 115  :         }

  00134	e9 fa fe ff ff	 jmp	 $LN2@s390_fques
$LN3@s390_fques:

; 116  :     }
; 117  :     RELEASE_INTLOCK( NULL );

  00139	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG191578
  00140	33 c9		 xor	 ecx, ecx
  00142	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 118  : 
; 119  :     if (!looking4bad)

  00147	0f b6 44 24 50	 movzx	 eax, BYTE PTR looking4bad$[rsp]
  0014c	85 c0		 test	 eax, eax
  0014e	75 6a		 jne	 SHORT $LN8@s390_fques

; 120  :         // "Storage "F_RADR"-"F_RADR" set to unusable"
; 121  :         WRMSG( HHC02390, "I", begbad, aaddr - 1);

  00150	48 8b 44 24 58	 mov	 rax, QWORD PTR aaddr$[rsp]
  00155	48 ff c8	 dec	 rax
  00158	48 89 44 24 70	 mov	 QWORD PTR tv133[rsp], rax
  0015d	b9 01 00 00 00	 mov	 ecx, 1
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00168	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv133[rsp]
  0016d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00172	48 8b 4c 24 60	 mov	 rcx, QWORD PTR begbad$[rsp]
  00177	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0017c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG191581
  00183	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00188	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG191582
  0018f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00194	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00199	41 b9 03 00 00
	00		 mov	 r9d, 3
  0019f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG191583
  001a6	ba 79 00 00 00	 mov	 edx, 121		; 00000079H
  001ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG191584
  001b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  001b8	eb 50		 jmp	 SHORT $LN9@s390_fques
$LN8@s390_fques:

; 122  :     else if (!foundbad)

  001ba	0f b6 44 24 52	 movzx	 eax, BYTE PTR foundbad$[rsp]
  001bf	85 c0		 test	 eax, eax
  001c1	75 47		 jne	 SHORT $LN10@s390_fques

; 123  :         // "No unusable storage found"
; 124  :         WRMSG( HHC02391, "I" );

  001c3	b9 01 00 00 00	 mov	 ecx, 1
  001c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG191586
  001d5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG191587
  001e1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001e6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001eb	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG191588
  001f8	ba 7c 00 00 00	 mov	 edx, 124		; 0000007cH
  001fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG191589
  00204	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN10@s390_fques:
$LN9@s390_fques:

; 125  : 
; 126  :     return 0;

  0020a	33 c0		 xor	 eax, eax

; 127  : }

  0020c	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00213	c3		 ret	 0
s390_fquest_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390__or_storage_key
_TEXT	SEGMENT
skey1_ptr$1 = 32
skey2_ptr$2 = 40
skey_ptr$3 = 48
abs$ = 80
bits$ = 88
K$ = 96
s390__or_storage_key PROC				; COMDAT

; 189  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@s390__or_s:

; 190  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@s390__or_s

; 191  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	74 50		 je	 SHORT $LN5@s390__or_s

; 192  :     {
; 193  :         BYTE* skey1_ptr = _get_storekey1_ptr( abs );

  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00023	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00028	48 89 44 24 20	 mov	 QWORD PTR skey1_ptr$1[rsp], rax

; 194  :         BYTE* skey2_ptr = _get_storekey2_ptr( abs );

  0002d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00032	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00037	48 89 44 24 28	 mov	 QWORD PTR skey2_ptr$2[rsp], rax

; 195  :         OR_SKEY( skey1_ptr, bits );

  0003c	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00041	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00046	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00049	0b c8		 or	 ecx, eax
  0004b	8b c1		 mov	 eax, ecx
  0004d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00052	88 01		 mov	 BYTE PTR [rcx], al

; 196  :         OR_SKEY( skey2_ptr, bits );

  00054	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00059	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0005e	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00061	0b c8		 or	 ecx, eax
  00063	8b c1		 mov	 eax, ecx
  00065	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0006a	88 01		 mov	 BYTE PTR [rcx], al

; 197  :     }

  0006c	eb 2c		 jmp	 SHORT $LN6@s390__or_s
$LN5@s390__or_s:

; 198  :     else
; 199  :     {
; 200  :         BYTE* skey_ptr  = _get_storekey_ptr( abs, K );

  0006e	0f b6 54 24 60	 movzx	 edx, BYTE PTR K$[rsp]
  00073	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00078	e8 00 00 00 00	 call	 _get_storekey_ptr
  0007d	48 89 44 24 30	 mov	 QWORD PTR skey_ptr$3[rsp], rax

; 201  :         OR_SKEY( skey_ptr, bits );

  00082	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00087	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  0008c	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0008f	0b c8		 or	 ecx, eax
  00091	8b c1		 mov	 eax, ecx
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  00098	88 01		 mov	 BYTE PTR [rcx], al
$LN6@s390__or_s:

; 202  :     }
; 203  : }

  0009a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009e	c3		 ret	 0
s390__or_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390__and_storage_key
_TEXT	SEGMENT
skey1_ptr$1 = 32
skey2_ptr$2 = 40
skey_ptr$3 = 48
abs$ = 80
bits$ = 88
K$ = 96
s390__and_storage_key PROC				; COMDAT

; 172  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@s390__and_:

; 173  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@s390__and_

; 174  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	74 54		 je	 SHORT $LN5@s390__and_

; 175  :     {
; 176  :         BYTE* skey1_ptr = _get_storekey1_ptr( abs );

  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00023	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00028	48 89 44 24 20	 mov	 QWORD PTR skey1_ptr$1[rsp], rax

; 177  :         BYTE* skey2_ptr = _get_storekey2_ptr( abs );

  0002d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00032	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00037	48 89 44 24 28	 mov	 QWORD PTR skey2_ptr$2[rsp], rax

; 178  :         AND_SKEY( skey1_ptr, ~bits );

  0003c	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00041	f7 d0		 not	 eax
  00043	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00048	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0004b	23 c8		 and	 ecx, eax
  0004d	8b c1		 mov	 eax, ecx
  0004f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00054	88 01		 mov	 BYTE PTR [rcx], al

; 179  :         AND_SKEY( skey2_ptr, ~bits );

  00056	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  0005b	f7 d0		 not	 eax
  0005d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  00062	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00065	23 c8		 and	 ecx, eax
  00067	8b c1		 mov	 eax, ecx
  00069	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0006e	88 01		 mov	 BYTE PTR [rcx], al

; 180  :     }

  00070	eb 2e		 jmp	 SHORT $LN6@s390__and_
$LN5@s390__and_:

; 181  :     else
; 182  :     {
; 183  :         BYTE* skey_ptr  = _get_storekey_ptr(  abs, K );

  00072	0f b6 54 24 60	 movzx	 edx, BYTE PTR K$[rsp]
  00077	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  0007c	e8 00 00 00 00	 call	 _get_storekey_ptr
  00081	48 89 44 24 30	 mov	 QWORD PTR skey_ptr$3[rsp], rax

; 184  :         AND_SKEY( skey_ptr, ~bits );

  00086	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  0008b	f7 d0		 not	 eax
  0008d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  00092	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00095	23 c8		 and	 ecx, eax
  00097	8b c1		 mov	 eax, ecx
  00099	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  0009e	88 01		 mov	 BYTE PTR [rcx], al
$LN6@s390__and_:

; 185  :     }
; 186  : }

  000a0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a4	c3		 ret	 0
s390__and_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390__get_storage_key
_TEXT	SEGMENT
skey$ = 32
abs$ = 64
K$ = 72
s390__get_storage_key PROC				; COMDAT

; 130  : {

$LN8:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390__get_:

; 131  :     BYTE skey;
; 132  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  0000d	33 c0		 xor	 eax, eax
  0000f	85 c0		 test	 eax, eax
  00011	75 fa		 jne	 SHORT $LN4@s390__get_

; 133  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00013	33 c0		 xor	 eax, eax
  00015	85 c0		 test	 eax, eax
  00017	74 32		 je	 SHORT $LN5@s390__get_

; 134  :     {
; 135  :         skey  = *_get_storekey1_ptr( abs );

  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  0001e	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00023	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00026	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al

; 136  :         skey |= *_get_storekey2_ptr( abs ) & ~(STORKEY_KEY);

  0002a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  0002f	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00034	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00037	25 0f ff ff ff	 and	 eax, -241		; ffffffffffffff0fH
  0003c	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR skey$[rsp]
  00041	0b c8		 or	 ecx, eax
  00043	8b c1		 mov	 eax, ecx
  00045	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al

; 137  :     }

  00049	eb 16		 jmp	 SHORT $LN6@s390__get_
$LN5@s390__get_:

; 138  :     else
; 139  :         skey  = *_get_storekey_ptr(  abs, K );

  0004b	0f b6 54 24 48	 movzx	 edx, BYTE PTR K$[rsp]
  00050	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  00055	e8 00 00 00 00	 call	 _get_storekey_ptr
  0005a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0005d	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al
$LN6@s390__get_:

; 140  :     return skey;

  00061	0f b6 44 24 20	 movzx	 eax, BYTE PTR skey$[rsp]

; 141  : }

  00066	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006a	c3		 ret	 0
s390__get_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
plus_enable_on$ = 80
aaddr$ = 88
tv68 = 96
tv70 = 100
saddr$ = 104
len$ = 112
eaddr$ = 120
cmd$ = 128
tv151 = 136
buf$ = 144
__$ArrayPad$ = 208
regs$ = 240
cmdline$ = 248
s370_fonoff_cmd PROC

; 133  : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 134  :     char*   cmd = cmdline;              /* Copy of panel command     */

  00023	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR cmdline$[rsp]
  0002b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR cmd$[rsp], rax

; 135  :     U64     aaddr;                      /* Absolute storage address  */
; 136  :     U64     saddr, eaddr;               /* Range start/end addresses */
; 137  :     int     len;                        /* Number of bytes to alter  */
; 138  :     bool    plus_enable_on;             /* true == x+, false == x-   */
; 139  :     char    buf[64];                    /* Message buffer            */
; 140  : 
; 141  :     plus_enable_on = (cmd[1] == '+');

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR cmd$[rsp]
  00044	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00048	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  0004b	75 0a		 jne	 SHORT $LN10@s370_fonof
  0004d	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  00055	eb 08		 jmp	 SHORT $LN11@s370_fonof
$LN10@s370_fonof:
  00057	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN11@s370_fonof:
  0005f	83 7c 24 60 00	 cmp	 DWORD PTR tv68[rsp], 0
  00064	75 0a		 jne	 SHORT $LN12@s370_fonof
  00066	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
  0006e	eb 08		 jmp	 SHORT $LN13@s370_fonof
$LN12@s370_fonof:
  00070	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR tv70[rsp], 1
$LN13@s370_fonof:
  00078	0f b6 44 24 64	 movzx	 eax, BYTE PTR tv70[rsp]
  0007d	88 44 24 50	 mov	 BYTE PTR plus_enable_on$[rsp], al

; 142  : 
; 143  :     /* Parse the range operand(s) */
; 144  :     if ((len = parse_range( cmd+2, sysblk.mainsize-1, &saddr, &eaddr, NULL )) < 0)

  00081	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00088	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0008f	48 ff c8	 dec	 rax
  00092	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR cmd$[rsp]
  0009a	48 83 c1 02	 add	 rcx, 2
  0009e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000a7	4c 8d 4c 24 78	 lea	 r9, QWORD PTR eaddr$[rsp]
  000ac	4c 8d 44 24 68	 lea	 r8, QWORD PTR saddr$[rsp]
  000b1	48 8b d0	 mov	 rdx, rax
  000b4	e8 00 00 00 00	 call	 parse_range
  000b9	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax
  000bd	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  000c2	7d 07		 jge	 SHORT $LN5@s370_fonof

; 145  :         return 0; /* (error message already issued) */

  000c4	33 c0		 xor	 eax, eax
  000c6	e9 d5 01 00 00	 jmp	 $LN1@s370_fonof
$LN5@s370_fonof:

; 146  : 
; 147  :     /* Round start/end address to page boundary */
; 148  :     saddr &= STORAGE_KEY_PAGEMASK;

  000cb	48 8b 44 24 68	 mov	 rax, QWORD PTR saddr$[rsp]
  000d0	48 25 00 f8 ff
	7f		 and	 rax, 2147481600		; 7ffff800H
  000d6	48 89 44 24 68	 mov	 QWORD PTR saddr$[rsp], rax

; 149  :     eaddr &= STORAGE_KEY_PAGEMASK;

  000db	48 8b 44 24 78	 mov	 rax, QWORD PTR eaddr$[rsp]
  000e0	48 25 00 f8 ff
	7f		 and	 rax, 2147481600		; 7ffff800H
  000e6	48 89 44 24 78	 mov	 QWORD PTR eaddr$[rsp], rax

; 150  : 
; 151  :     /* Mark all frames in range as usable or unusable */
; 152  :     for (aaddr = saddr; aaddr <= eaddr; aaddr += STORAGE_KEY_PAGESIZE)

  000eb	48 8b 44 24 68	 mov	 rax, QWORD PTR saddr$[rsp]
  000f0	48 89 44 24 58	 mov	 QWORD PTR aaddr$[rsp], rax
  000f5	eb 10		 jmp	 SHORT $LN4@s370_fonof
$LN2@s370_fonof:
  000f7	48 8b 44 24 58	 mov	 rax, QWORD PTR aaddr$[rsp]
  000fc	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  00102	48 89 44 24 58	 mov	 QWORD PTR aaddr$[rsp], rax
$LN4@s370_fonof:
  00107	48 8b 44 24 78	 mov	 rax, QWORD PTR eaddr$[rsp]
  0010c	48 39 44 24 58	 cmp	 QWORD PTR aaddr$[rsp], rax
  00111	0f 87 d1 00 00
	00		 ja	 $LN3@s370_fonof

; 153  :     {
; 154  :         if (aaddr > regs->mainlim)

  00117	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0011f	48 8b 80 58 08
	00 00		 mov	 rax, QWORD PTR [rax+2136]
  00126	48 39 44 24 58	 cmp	 QWORD PTR aaddr$[rsp], rax
  0012b	0f 86 89 00 00
	00		 jbe	 $LN6@s370_fonof

; 155  :         {
; 156  :             MSGBUF( buf, F_RADR, aaddr);

  00131	4c 8b 4c 24 58	 mov	 r9, QWORD PTR aaddr$[rsp]
  00136	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG181524
  0013d	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00142	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 157  :             // "Invalid argument %s%s"
; 158  :             WRMSG( HHC02205, "E", buf, "" );

  00150	b9 01 00 00 00	 mov	 ecx, 1
  00155	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0015b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG181525
  00162	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00167	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0016f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00174	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG181526
  0017b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00180	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG181527
  00187	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0018c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00191	41 b9 03 00 00
	00		 mov	 r9d, 3
  00197	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG181528
  0019e	ba 9e 00 00 00	 mov	 edx, 158		; 0000009eH
  001a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG181529
  001aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 159  :             return -1;

  001b0	b8 ff ff ff ff	 mov	 eax, -1
  001b5	e9 e6 00 00 00	 jmp	 $LN1@s370_fonof
$LN6@s370_fonof:

; 160  :         }
; 161  : 
; 162  :         /* Note: we must use the internal "_xxx_storage_key"
; 163  :            functions to be able to directly set/clear the
; 164  :            internal STORKEY_BADFRM bit.
; 165  :         */
; 166  :         if (plus_enable_on)

  001ba	0f b6 44 24 50	 movzx	 eax, BYTE PTR plus_enable_on$[rsp]
  001bf	85 c0		 test	 eax, eax
  001c1	74 11		 je	 SHORT $LN7@s370_fonof

; 167  :             ARCH_DEP( _and_storage_key )( aaddr, STORKEY_BADFRM, SKEY_K );

  001c3	41 b0 02	 mov	 r8b, 2
  001c6	b2 01		 mov	 dl, 1
  001c8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR aaddr$[rsp]
  001cd	e8 00 00 00 00	 call	 s370__and_storage_key
  001d2	eb 0f		 jmp	 SHORT $LN8@s370_fonof
$LN7@s370_fonof:

; 168  :         else
; 169  :             ARCH_DEP( _or_storage_key )(  aaddr, STORKEY_BADFRM, SKEY_K );

  001d4	41 b0 02	 mov	 r8b, 2
  001d7	b2 01		 mov	 dl, 1
  001d9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR aaddr$[rsp]
  001de	e8 00 00 00 00	 call	 s370__or_storage_key
$LN8@s370_fonof:

; 170  :     }

  001e3	e9 0f ff ff ff	 jmp	 $LN2@s370_fonof
$LN3@s370_fonof:

; 171  : 
; 172  :     MSGBUF( buf, "Storage "F_RADR"-"F_RADR, saddr, aaddr - 1 );

  001e8	48 8b 44 24 58	 mov	 rax, QWORD PTR aaddr$[rsp]
  001ed	48 ff c8	 dec	 rax
  001f0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f5	4c 8b 4c 24 68	 mov	 r9, QWORD PTR saddr$[rsp]
  001fa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG181532
  00201	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00206	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0020e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 173  :     // "%-14s set to %s"
; 174  :     WRMSG( HHC02204, "I", buf, plus_enable_on ? "usable" : "unusable" );

  00214	0f b6 44 24 50	 movzx	 eax, BYTE PTR plus_enable_on$[rsp]
  00219	85 c0		 test	 eax, eax
  0021b	74 11		 je	 SHORT $LN14@s370_fonof
  0021d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG181533
  00224	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv151[rsp], rax
  0022c	eb 0f		 jmp	 SHORT $LN15@s370_fonof
$LN14@s370_fonof:
  0022e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG181534
  00235	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv151[rsp], rax
$LN15@s370_fonof:
  0023d	b9 01 00 00 00	 mov	 ecx, 1
  00242	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00248	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv151[rsp]
  00250	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00255	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0025d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00262	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG181535
  00269	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0026e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG181536
  00275	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0027a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0027f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00285	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG181537
  0028c	ba ae 00 00 00	 mov	 edx, 174		; 000000aeH
  00291	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG181538
  00298	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 175  :     return 0;

  0029e	33 c0		 xor	 eax, eax
$LN1@s370_fonof:

; 176  : }

  002a0	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  002a8	48 33 cc	 xor	 rcx, rsp
  002ab	e8 00 00 00 00	 call	 __security_check_cookie
  002b0	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  002b7	c3		 ret	 0
s370_fonoff_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
looking4bad$ = 80
bad$ = 81
foundbad$ = 82
tv75 = 84
aaddr$ = 88
begbad$ = 96
tv85 = 104
tv133 = 112
s370_fquest_cmd PROC

; 89   : {

$LN14:
  00000	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 90   :     U64   aaddr, begbad = 0;

  00007	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR begbad$[rsp], 0

; 91   :     bool  looking4bad = true, bad, foundbad = false;

  00010	c6 44 24 50 01	 mov	 BYTE PTR looking4bad$[rsp], 1
  00015	c6 44 24 52 00	 mov	 BYTE PTR foundbad$[rsp], 0

; 92   : 
; 93   :     /* Scan all of defined storage to locate all bad frames */
; 94   :     OBTAIN_INTLOCK( NULL );

  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG181485
  00021	33 c9		 xor	 ecx, ecx
  00023	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 95   :     {
; 96   :         for (aaddr=0; aaddr < sysblk.mainsize; aaddr += STORAGE_KEY_PAGESIZE)

  00028	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR aaddr$[rsp], 0
  00031	eb 10		 jmp	 SHORT $LN4@s370_fques
$LN2@s370_fques:
  00033	48 8b 44 24 58	 mov	 rax, QWORD PTR aaddr$[rsp]
  00038	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  0003e	48 89 44 24 58	 mov	 QWORD PTR aaddr$[rsp], rax
$LN4@s370_fques:
  00043	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0004a	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00051	48 39 44 24 58	 cmp	 QWORD PTR aaddr$[rsp], rax
  00056	0f 83 dd 00 00
	00		 jae	 $LN3@s370_fques

; 97   :         {
; 98   :             /* NOTE: we use the internal "_get_storage_key" function
; 99   :                here so we're returned the internal STORKEY_BADFRM bit.
; 100  :             */
; 101  :             bad = ARCH_DEP( _get_storage_key )( aaddr, SKEY_K ) & STORKEY_BADFRM;

  0005c	b2 02		 mov	 dl, 2
  0005e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR aaddr$[rsp]
  00063	e8 00 00 00 00	 call	 s370__get_storage_key
  00068	0f b6 c0	 movzx	 eax, al
  0006b	83 e0 01	 and	 eax, 1
  0006e	85 c0		 test	 eax, eax
  00070	75 0a		 jne	 SHORT $LN12@s370_fques
  00072	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
  0007a	eb 08		 jmp	 SHORT $LN13@s370_fques
$LN12@s370_fques:
  0007c	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
$LN13@s370_fques:
  00084	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv75[rsp]
  00089	88 44 24 51	 mov	 BYTE PTR bad$[rsp], al

; 102  : 
; 103  :             if (looking4bad && bad)

  0008d	0f b6 44 24 50	 movzx	 eax, BYTE PTR looking4bad$[rsp]
  00092	85 c0		 test	 eax, eax
  00094	74 1f		 je	 SHORT $LN5@s370_fques
  00096	0f b6 44 24 51	 movzx	 eax, BYTE PTR bad$[rsp]
  0009b	85 c0		 test	 eax, eax
  0009d	74 16		 je	 SHORT $LN5@s370_fques

; 104  :             {
; 105  :                 foundbad = true;

  0009f	c6 44 24 52 01	 mov	 BYTE PTR foundbad$[rsp], 1

; 106  :                 begbad = aaddr;         /* Beginning of bad range */

  000a4	48 8b 44 24 58	 mov	 rax, QWORD PTR aaddr$[rsp]
  000a9	48 89 44 24 60	 mov	 QWORD PTR begbad$[rsp], rax

; 107  :                 looking4bad = false;

  000ae	c6 44 24 50 00	 mov	 BYTE PTR looking4bad$[rsp], 0

; 108  :             }

  000b3	eb 7f		 jmp	 SHORT $LN6@s370_fques
$LN5@s370_fques:

; 109  :             else if (!looking4bad && !bad)

  000b5	0f b6 44 24 50	 movzx	 eax, BYTE PTR looking4bad$[rsp]
  000ba	85 c0		 test	 eax, eax
  000bc	75 76		 jne	 SHORT $LN7@s370_fques
  000be	0f b6 44 24 51	 movzx	 eax, BYTE PTR bad$[rsp]
  000c3	85 c0		 test	 eax, eax
  000c5	75 6d		 jne	 SHORT $LN7@s370_fques

; 110  :             {
; 111  :                 // "Storage "F_RADR"-"F_RADR" set to unusable"
; 112  :                 WRMSG( HHC02390, "I", begbad, aaddr - 1);

  000c7	48 8b 44 24 58	 mov	 rax, QWORD PTR aaddr$[rsp]
  000cc	48 ff c8	 dec	 rax
  000cf	48 89 44 24 68	 mov	 QWORD PTR tv85[rsp], rax
  000d4	b9 01 00 00 00	 mov	 ecx, 1
  000d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000df	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv85[rsp]
  000e4	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000e9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR begbad$[rsp]
  000ee	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG181489
  000fa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG181490
  00106	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0010b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00110	41 b9 03 00 00
	00		 mov	 r9d, 3
  00116	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG181491
  0011d	ba 70 00 00 00	 mov	 edx, 112		; 00000070H
  00122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG181492
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 113  :                 looking4bad = true;

  0012f	c6 44 24 50 01	 mov	 BYTE PTR looking4bad$[rsp], 1
$LN7@s370_fques:
$LN6@s370_fques:

; 114  :             }
; 115  :         }

  00134	e9 fa fe ff ff	 jmp	 $LN2@s370_fques
$LN3@s370_fques:

; 116  :     }
; 117  :     RELEASE_INTLOCK( NULL );

  00139	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG181493
  00140	33 c9		 xor	 ecx, ecx
  00142	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 118  : 
; 119  :     if (!looking4bad)

  00147	0f b6 44 24 50	 movzx	 eax, BYTE PTR looking4bad$[rsp]
  0014c	85 c0		 test	 eax, eax
  0014e	75 6a		 jne	 SHORT $LN8@s370_fques

; 120  :         // "Storage "F_RADR"-"F_RADR" set to unusable"
; 121  :         WRMSG( HHC02390, "I", begbad, aaddr - 1);

  00150	48 8b 44 24 58	 mov	 rax, QWORD PTR aaddr$[rsp]
  00155	48 ff c8	 dec	 rax
  00158	48 89 44 24 70	 mov	 QWORD PTR tv133[rsp], rax
  0015d	b9 01 00 00 00	 mov	 ecx, 1
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00168	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv133[rsp]
  0016d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00172	48 8b 4c 24 60	 mov	 rcx, QWORD PTR begbad$[rsp]
  00177	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0017c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG181496
  00183	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00188	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG181497
  0018f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00194	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00199	41 b9 03 00 00
	00		 mov	 r9d, 3
  0019f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG181498
  001a6	ba 79 00 00 00	 mov	 edx, 121		; 00000079H
  001ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG181499
  001b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  001b8	eb 50		 jmp	 SHORT $LN9@s370_fques
$LN8@s370_fques:

; 122  :     else if (!foundbad)

  001ba	0f b6 44 24 52	 movzx	 eax, BYTE PTR foundbad$[rsp]
  001bf	85 c0		 test	 eax, eax
  001c1	75 47		 jne	 SHORT $LN10@s370_fques

; 123  :         // "No unusable storage found"
; 124  :         WRMSG( HHC02391, "I" );

  001c3	b9 01 00 00 00	 mov	 ecx, 1
  001c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG181501
  001d5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG181502
  001e1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001e6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001eb	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG181503
  001f8	ba 7c 00 00 00	 mov	 edx, 124		; 0000007cH
  001fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG181504
  00204	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN10@s370_fques:
$LN9@s370_fques:

; 125  : 
; 126  :     return 0;

  0020a	33 c0		 xor	 eax, eax

; 127  : }

  0020c	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00213	c3		 ret	 0
s370_fquest_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370__or_storage_key
_TEXT	SEGMENT
skey1_ptr$1 = 32
skey2_ptr$2 = 40
skey_ptr$3 = 48
abs$ = 80
bits$ = 88
K$ = 96
s370__or_storage_key PROC				; COMDAT

; 189  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@s370__or_s:

; 190  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@s370__or_s

; 191  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00018	0f b6 44 24 60	 movzx	 eax, BYTE PTR K$[rsp]
  0001d	83 f8 04	 cmp	 eax, 4
  00020	75 57		 jne	 SHORT $LN5@s370__or_s
  00022	33 c0		 xor	 eax, eax
  00024	83 f8 01	 cmp	 eax, 1
  00027	74 50		 je	 SHORT $LN5@s370__or_s

; 192  :     {
; 193  :         BYTE* skey1_ptr = _get_storekey1_ptr( abs );

  00029	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  0002e	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00033	48 89 44 24 20	 mov	 QWORD PTR skey1_ptr$1[rsp], rax

; 194  :         BYTE* skey2_ptr = _get_storekey2_ptr( abs );

  00038	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  0003d	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00042	48 89 44 24 28	 mov	 QWORD PTR skey2_ptr$2[rsp], rax

; 195  :         OR_SKEY( skey1_ptr, bits );

  00047	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  0004c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00051	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00054	0b c8		 or	 ecx, eax
  00056	8b c1		 mov	 eax, ecx
  00058	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  0005d	88 01		 mov	 BYTE PTR [rcx], al

; 196  :         OR_SKEY( skey2_ptr, bits );

  0005f	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00064	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  00069	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0006c	0b c8		 or	 ecx, eax
  0006e	8b c1		 mov	 eax, ecx
  00070	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  00075	88 01		 mov	 BYTE PTR [rcx], al

; 197  :     }

  00077	eb 2c		 jmp	 SHORT $LN6@s370__or_s
$LN5@s370__or_s:

; 198  :     else
; 199  :     {
; 200  :         BYTE* skey_ptr  = _get_storekey_ptr( abs, K );

  00079	0f b6 54 24 60	 movzx	 edx, BYTE PTR K$[rsp]
  0007e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00083	e8 00 00 00 00	 call	 _get_storekey_ptr
  00088	48 89 44 24 30	 mov	 QWORD PTR skey_ptr$3[rsp], rax

; 201  :         OR_SKEY( skey_ptr, bits );

  0008d	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00092	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  00097	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0009a	0b c8		 or	 ecx, eax
  0009c	8b c1		 mov	 eax, ecx
  0009e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  000a3	88 01		 mov	 BYTE PTR [rcx], al
$LN6@s370__or_s:

; 202  :     }
; 203  : }

  000a5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a9	c3		 ret	 0
s370__or_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370__and_storage_key
_TEXT	SEGMENT
skey1_ptr$1 = 32
skey2_ptr$2 = 40
skey_ptr$3 = 48
abs$ = 80
bits$ = 88
K$ = 96
s370__and_storage_key PROC				; COMDAT

; 172  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@s370__and_:

; 173  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@s370__and_

; 174  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00018	0f b6 44 24 60	 movzx	 eax, BYTE PTR K$[rsp]
  0001d	83 f8 04	 cmp	 eax, 4
  00020	75 5b		 jne	 SHORT $LN5@s370__and_
  00022	33 c0		 xor	 eax, eax
  00024	83 f8 01	 cmp	 eax, 1
  00027	74 54		 je	 SHORT $LN5@s370__and_

; 175  :     {
; 176  :         BYTE* skey1_ptr = _get_storekey1_ptr( abs );

  00029	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  0002e	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00033	48 89 44 24 20	 mov	 QWORD PTR skey1_ptr$1[rsp], rax

; 177  :         BYTE* skey2_ptr = _get_storekey2_ptr( abs );

  00038	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  0003d	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00042	48 89 44 24 28	 mov	 QWORD PTR skey2_ptr$2[rsp], rax

; 178  :         AND_SKEY( skey1_ptr, ~bits );

  00047	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  0004c	f7 d0		 not	 eax
  0004e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00053	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00056	23 c8		 and	 ecx, eax
  00058	8b c1		 mov	 eax, ecx
  0005a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  0005f	88 01		 mov	 BYTE PTR [rcx], al

; 179  :         AND_SKEY( skey2_ptr, ~bits );

  00061	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00066	f7 d0		 not	 eax
  00068	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0006d	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00070	23 c8		 and	 ecx, eax
  00072	8b c1		 mov	 eax, ecx
  00074	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  00079	88 01		 mov	 BYTE PTR [rcx], al

; 180  :     }

  0007b	eb 2e		 jmp	 SHORT $LN6@s370__and_
$LN5@s370__and_:

; 181  :     else
; 182  :     {
; 183  :         BYTE* skey_ptr  = _get_storekey_ptr(  abs, K );

  0007d	0f b6 54 24 60	 movzx	 edx, BYTE PTR K$[rsp]
  00082	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00087	e8 00 00 00 00	 call	 _get_storekey_ptr
  0008c	48 89 44 24 30	 mov	 QWORD PTR skey_ptr$3[rsp], rax

; 184  :         AND_SKEY( skey_ptr, ~bits );

  00091	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00096	f7 d0		 not	 eax
  00098	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  0009d	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  000a0	23 c8		 and	 ecx, eax
  000a2	8b c1		 mov	 eax, ecx
  000a4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  000a9	88 01		 mov	 BYTE PTR [rcx], al
$LN6@s370__and_:

; 185  :     }
; 186  : }

  000ab	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000af	c3		 ret	 0
s370__and_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370__get_storage_key
_TEXT	SEGMENT
skey$ = 32
abs$ = 64
K$ = 72
s370__get_storage_key PROC				; COMDAT

; 130  : {

$LN8:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370__get_:

; 131  :     BYTE skey;
; 132  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  0000d	33 c0		 xor	 eax, eax
  0000f	85 c0		 test	 eax, eax
  00011	75 fa		 jne	 SHORT $LN4@s370__get_

; 133  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00013	0f b6 44 24 48	 movzx	 eax, BYTE PTR K$[rsp]
  00018	83 f8 04	 cmp	 eax, 4
  0001b	75 39		 jne	 SHORT $LN5@s370__get_
  0001d	33 c0		 xor	 eax, eax
  0001f	83 f8 01	 cmp	 eax, 1
  00022	74 32		 je	 SHORT $LN5@s370__get_

; 134  :     {
; 135  :         skey  = *_get_storekey1_ptr( abs );

  00024	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  00029	e8 00 00 00 00	 call	 _get_storekey1_ptr
  0002e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00031	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al

; 136  :         skey |= *_get_storekey2_ptr( abs ) & ~(STORKEY_KEY);

  00035	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  0003a	e8 00 00 00 00	 call	 _get_storekey2_ptr
  0003f	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00042	25 0f ff ff ff	 and	 eax, -241		; ffffffffffffff0fH
  00047	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR skey$[rsp]
  0004c	0b c8		 or	 ecx, eax
  0004e	8b c1		 mov	 eax, ecx
  00050	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al

; 137  :     }

  00054	eb 16		 jmp	 SHORT $LN6@s370__get_
$LN5@s370__get_:

; 138  :     else
; 139  :         skey  = *_get_storekey_ptr(  abs, K );

  00056	0f b6 54 24 48	 movzx	 edx, BYTE PTR K$[rsp]
  0005b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  00060	e8 00 00 00 00	 call	 _get_storekey_ptr
  00065	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00068	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al
$LN6@s370__get_:

; 140  :     return skey;

  0006c	0f b6 44 24 20	 movzx	 eax, BYTE PTR skey$[rsp]

; 141  : }

  00071	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00075	c3		 ret	 0
s370__get_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT _get_storekey2_ptr
_TEXT	SEGMENT
abs$ = 8
_get_storekey2_ptr PROC					; COMDAT

; 60   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 61   :     ABS_CHECK( abs );
; 62   :     return &STOREKEY2( abs, &sysblk );

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR abs$[rsp]
  0000a	48 c1 e8 0b	 shr	 rax, 11
  0000e	48 83 c8 01	 or	 rax, 1
  00012	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00019	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00020	48 03 c8	 add	 rcx, rax
  00023	48 8b c1	 mov	 rax, rcx

; 63   : }

  00026	c3		 ret	 0
_get_storekey2_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT _get_storekey1_ptr
_TEXT	SEGMENT
abs$ = 8
_get_storekey1_ptr PROC					; COMDAT

; 54   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 55   :     ABS_CHECK( abs );
; 56   :     return &STOREKEY1( abs, &sysblk );

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR abs$[rsp]
  0000a	48 c1 e8 0b	 shr	 rax, 11
  0000e	48 83 e0 fe	 and	 rax, -2
  00012	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00019	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00020	48 03 c8	 add	 rcx, rax
  00023	48 8b c1	 mov	 rax, rcx

; 57   : }

  00026	c3		 ret	 0
_get_storekey1_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT _get_storekey_ptr
_TEXT	SEGMENT
tv75 = 0
abs$ = 32
K$ = 40
_get_storekey_ptr PROC					; COMDAT

; 40   : {

$LN5:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 18	 sub	 rsp, 24

; 41   :     ABS_CHECK( abs );
; 42   :     return (4 == K) ? &STOREKEY1( abs, &sysblk ) // (see feature.h PROGRAMMING NOTE)

  0000d	0f b6 44 24 28	 movzx	 eax, BYTE PTR K$[rsp]
  00012	83 f8 04	 cmp	 eax, 4
  00015	75 27		 jne	 SHORT $LN3@get_storek
  00017	48 8b 44 24 20	 mov	 rax, QWORD PTR abs$[rsp]
  0001c	48 c1 e8 0b	 shr	 rax, 11
  00020	48 83 e0 fe	 and	 rax, -2
  00024	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0002b	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00032	48 03 c8	 add	 rcx, rax
  00035	48 8b c1	 mov	 rax, rcx
  00038	48 89 04 24	 mov	 QWORD PTR tv75[rsp], rax
  0003c	eb 21		 jmp	 SHORT $LN4@get_storek
$LN3@get_storek:
  0003e	48 8b 44 24 20	 mov	 rax, QWORD PTR abs$[rsp]
  00043	48 c1 e8 0b	 shr	 rax, 11
  00047	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0004e	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00055	48 03 c8	 add	 rcx, rax
  00058	48 8b c1	 mov	 rax, rcx
  0005b	48 89 04 24	 mov	 QWORD PTR tv75[rsp], rax
$LN4@get_storek:
  0005f	48 8b 04 24	 mov	 rax, QWORD PTR tv75[rsp]

; 43   :                     : &STOREKEY(  abs, &sysblk );
; 44   : }

  00063	48 83 c4 18	 add	 rsp, 24
  00067	c3		 ret	 0
_get_storekey_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
any_started$ = 32
are_any_cpus_started PROC

; 531  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 532  :     bool any_started;
; 533  : 
; 534  :     OBTAIN_INTLOCK( NULL );

  00004	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG158966
  0000b	33 c9		 xor	 ecx, ecx
  0000d	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 535  :     {
; 536  :         any_started = are_any_cpus_started_intlock_held();

  00012	e8 00 00 00 00	 call	 are_any_cpus_started_intlock_held
  00017	88 44 24 20	 mov	 BYTE PTR any_started$[rsp], al

; 537  :     }
; 538  :     RELEASE_INTLOCK( NULL );

  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG158967
  00022	33 c9		 xor	 ecx, ecx
  00024	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 539  :     return any_started;

  00029	0f b6 44 24 20	 movzx	 eax, BYTE PTR any_started$[rsp]

; 540  : }

  0002e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00032	c3		 ret	 0
are_any_cpus_started ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
cpu$ = 0
are_any_cpus_started_intlock_held PROC

; 501  : {

  00000	48 83 ec 18	 sub	 rsp, 24

; 502  :     int cpu;
; 503  : 
; 504  :     if (sysblk.cpus)

  00004	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0000b	83 b8 04 01 00
	00 00		 cmp	 DWORD PTR [rax+260], 0
  00012	74 5b		 je	 SHORT $LN5@are_any_cp

; 505  :         for (cpu = 0; cpu < sysblk.hicpu; cpu++)

  00014	c7 04 24 00 00
	00 00		 mov	 DWORD PTR cpu$[rsp], 0
  0001b	eb 08		 jmp	 SHORT $LN4@are_any_cp
$LN2@are_any_cp:
  0001d	8b 04 24	 mov	 eax, DWORD PTR cpu$[rsp]
  00020	ff c0		 inc	 eax
  00022	89 04 24	 mov	 DWORD PTR cpu$[rsp], eax
$LN4@are_any_cp:
  00025	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0002c	8b 80 08 01 00
	00		 mov	 eax, DWORD PTR [rax+264]
  00032	39 04 24	 cmp	 DWORD PTR cpu$[rsp], eax
  00035	7d 38		 jge	 SHORT $LN3@are_any_cp

; 506  :             if (IS_CPU_ONLINE( cpu ))

  00037	48 63 04 24	 movsxd	 rax, DWORD PTR cpu$[rsp]
  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00042	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  0004b	74 20		 je	 SHORT $LN6@are_any_cp

; 507  :                 if (sysblk.regs[ cpu ]->cpustate == CPUSTATE_STARTED)

  0004d	48 63 04 24	 movsxd	 rax, DWORD PTR cpu$[rsp]
  00051	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00058	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00060	0f b6 40 60	 movzx	 eax, BYTE PTR [rax+96]
  00064	83 f8 01	 cmp	 eax, 1
  00067	75 04		 jne	 SHORT $LN7@are_any_cp

; 508  :                     return true;

  00069	b0 01		 mov	 al, 1
  0006b	eb 04		 jmp	 SHORT $LN1@are_any_cp
$LN7@are_any_cp:
$LN6@are_any_cp:
  0006d	eb ae		 jmp	 SHORT $LN2@are_any_cp
$LN3@are_any_cp:
$LN5@are_any_cp:

; 509  :     return false;

  0006f	32 c0		 xor	 al, al
$LN1@are_any_cp:

; 510  : }

  00071	48 83 c4 18	 add	 rsp, 24
  00075	c3		 ret	 0
are_any_cpus_started_intlock_held ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Release_Interrupt_Lock PROC

; 403  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@Release_In:

; 404  :     UNREFERENCED( regs );

  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@Release_In

; 405  :     sysblk.intowner = LOCK_OWNER_NONE;

  00014	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00019	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00020	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax

; 406  :     hthread_release_lock( &sysblk.intlock, location );

  00027	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0002e	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  00034	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00039	48 8b c8	 mov	 rcx, rax
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 407  : }

  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00046	c3		 ret	 0
Release_Interrupt_Lock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Obtain_Interrupt_Lock PROC

; 379  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 380  :     if (regs)

  0000e	48 83 7c 24 30
	00		 cmp	 QWORD PTR regs$[rsp], 0
  00014	74 13		 je	 SHORT $LN2@Obtain_Int

; 381  :         HOSTREGS->intwait = true;

  00016	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  0001b	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  00022	c6 80 f0 08 00
	00 01		 mov	 BYTE PTR [rax+2288], 1
$LN2@Obtain_Int:

; 382  :     hthread_obtain_lock( &sysblk.intlock, location );

  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00030	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  00036	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 383  :     Interrupt_Lock_Obtained( regs, location );

  00044	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR regs$[rsp]
  0004e	e8 00 00 00 00	 call	 Interrupt_Lock_Obtained

; 384  : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
Obtain_Interrupt_Lock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Interrupt_Lock_Obtained PROC

; 347  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 348  :     if (regs)

  0000e	48 83 7c 24 30
	00		 cmp	 QWORD PTR regs$[rsp], 0
  00014	0f 84 db 00 00
	00		 je	 $LN4@Interrupt_
$LN2@Interrupt_:

; 349  :     {
; 350  :         /* Wait for any SYNCHRONIZE_CPUS to finish before proceeding */
; 351  :         while (sysblk.syncing)

  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00021	0f b6 80 7c 13
	00 00		 movzx	 eax, BYTE PTR [rax+4988]
  00028	85 c0		 test	 eax, eax
  0002a	0f 84 8f 00 00
	00		 je	 $LN3@Interrupt_

; 352  :         {
; 353  :             /* Indicate we have reached the sync point */
; 354  :             sysblk.sync_mask &= ~HOSTREGS->cpubit;

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  00035	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  0003c	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00040	48 f7 d0	 not	 rax
  00043	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0004a	48 8b 89 80 13
	00 00		 mov	 rcx, QWORD PTR [rcx+4992]
  00051	48 23 c8	 and	 rcx, rax
  00054	48 8b c1	 mov	 rax, rcx
  00057	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0005e	48 89 81 80 13
	00 00		 mov	 QWORD PTR [rcx+4992], rax

; 355  : 
; 356  :             /* If we're the last CPU to reach this sync point,
; 357  :                signal the CPU that requested the sync that it
; 358  :                may now safely proceed with its exclusive logic.
; 359  :             */
; 360  :             if (!sysblk.sync_mask)

  00065	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0006c	48 83 b8 80 13
	00 00 00	 cmp	 QWORD PTR [rax+4992], 0
  00074	75 1b		 jne	 SHORT $LN6@Interrupt_

; 361  :                 hthread_signal_condition( &sysblk.all_synced_cond, location );

  00076	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007d	48 05 88 13 00
	00		 add	 rax, 5000		; 00001388H
  00083	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00088	48 8b c8	 mov	 rcx, rax
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition
$LN6@Interrupt_:

; 362  : 
; 363  :             /* Wait for CPU that requested the sync to indicate
; 364  :                it's done and thus is now safe for us to proceed.
; 365  :             */
; 366  :             hthread_wait_condition( &sysblk.sync_done_cond, &sysblk.intlock, location );

  00091	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00098	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  0009e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000a5	48 81 c1 90 13
	00 00		 add	 rcx, 5008		; 00001390H
  000ac	4c 8b 44 24 38	 mov	 r8, QWORD PTR location$[rsp]
  000b1	48 8b d0	 mov	 rdx, rax
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_wait_condition

; 367  :         }

  000ba	e9 5b ff ff ff	 jmp	 $LN2@Interrupt_
$LN3@Interrupt_:

; 368  : 
; 369  :         HOSTREGS->intwait = false;

  000bf	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  000c4	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  000cb	c6 80 f0 08 00
	00 00		 mov	 BYTE PTR [rax+2288], 0

; 370  :         sysblk.intowner = HOSTREGS->cpuad;

  000d2	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  000d7	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  000de	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000e5	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  000ec	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax

; 371  :     }

  000f3	eb 13		 jmp	 SHORT $LN5@Interrupt_
$LN4@Interrupt_:

; 372  :     else
; 373  :         sysblk.intowner = LOCK_OWNER_OTHER;

  000f5	b8 fe ff 00 00	 mov	 eax, 65534		; 0000fffeH
  000fa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00101	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax
$LN5@Interrupt_:

; 374  : }

  00108	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0010c	c3		 ret	 0
Interrupt_Lock_Obtained ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
wakeup_cpu PROC

; 268  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 269  :     hthread_signal_condition( &regs->intcond, location );

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  00013	48 05 80 0c 00
	00		 add	 rax, 3200		; 00000c80H
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  0001e	48 8b c8	 mov	 rcx, rax
  00021	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 270  : }

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
wakeup_cpu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
i$ = 128
j$ = 132
mipsrate$ = 136
uss$1 = 144
kss$2 = 152
cpupct$ = 160
tv160 = 164
tv192 = 168
tv219 = 172
tv324 = 176
tv325 = 180
tv80 = 184
nv$3 = 188
tv154 = 192
tv156 = 196
tv300 = 200
tv302 = 204
kdd$4 = 208
$T5 = 216
udd$6 = 224
$T7 = 232
pmsg$8 = 240
ums$9 = 248
umm$10 = 256
uhh$11 = 264
kms$12 = 272
kmm$13 = 280
khh$14 = 288
tv354 = 296
tv353 = 304
tv328 = 312
rusage$15 = 320
udays$16 = 336
kdays$17 = 360
msgbuf$ = 384
__$ArrayPad$ = 512
argc$ = 544
argv$ = 552
cmdline$ = 560
qproc_cmd PROC

; 9351 : {

$LN43:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 9352 :     int   i, j;
; 9353 :     int   cpupct = 0;

  00027	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR cpupct$[rsp], 0

; 9354 :     U32   mipsrate = 0;

  00032	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR mipsrate$[rsp], 0
$LN4@qproc_cmd:

; 9355 :     char  msgbuf[128];
; 9356 : 
; 9357 :     UNREFERENCED( cmdline );

  0003d	33 c0		 xor	 eax, eax
  0003f	85 c0		 test	 eax, eax
  00041	75 fa		 jne	 SHORT $LN4@qproc_cmd
$LN7@qproc_cmd:

; 9358 :     UNREFERENCED( argv );

  00043	33 c0		 xor	 eax, eax
  00045	85 c0		 test	 eax, eax
  00047	75 fa		 jne	 SHORT $LN7@qproc_cmd

; 9359 : 
; 9360 :     if (argc != 1)

  00049	83 bc 24 20 02
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00051	74 51		 je	 SHORT $LN14@qproc_cmd

; 9361 :     {
; 9362 :         // "Missing or invalid argument(s)"
; 9363 :         WRMSG( HHC17000, "E" );

  00053	b9 01 00 00 00	 mov	 ecx, 1
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211983
  00065	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211984
  00071	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00076	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0007b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00081	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211985
  00088	ba 93 24 00 00	 mov	 edx, 9363		; 00002493H
  0008d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211986
  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9364 :         return -1;

  0009a	b8 ff ff ff ff	 mov	 eax, -1
  0009f	e9 15 09 00 00	 jmp	 $LN1@qproc_cmd
$LN14@qproc_cmd:

; 9365 :     }
; 9366 : 
; 9367 :     /* Visual Studio doesn't support macros split with #ifdefs */
; 9368 :     {
; 9369 : #if defined( _FEATURE_S370_S390_VECTOR_FACILITY )
; 9370 : 
; 9371 :         u_int  nv  = sysblk.numvec;
; 9372 : #else
; 9373 :         u_int  nv  = 0;

  000a4	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR nv$3[rsp], 0

; 9374 : #endif
; 9375 :         // "NumCPU = %2.2d, NumVEC = %2.2d, ReservedCPU = %2.2d, MaxCPU = %2.2d"
; 9376 :         WRMSG( HHC17007, "I", sysblk.cpus, nv,

  000af	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000b6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000bd	8b 89 04 01 00
	00		 mov	 ecx, DWORD PTR [rcx+260]
  000c3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000c9	2b c1		 sub	 eax, ecx
  000cb	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv80[rsp], eax
  000d2	b9 01 00 00 00	 mov	 ecx, 1
  000d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000dd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000e4	8b 89 00 01 00
	00		 mov	 ecx, DWORD PTR [rcx+256]
  000ea	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  000ee	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR tv80[rsp]
  000f5	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  000f9	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR nv$3[rsp]
  00100	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00104	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0010b	8b 89 04 01 00
	00		 mov	 ecx, DWORD PTR [rcx+260]
  00111	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211987
  0011c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211988
  00128	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0012d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00132	41 b9 03 00 00
	00		 mov	 r9d, 3
  00138	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211989
  0013f	ba a1 24 00 00	 mov	 edx, 9377		; 000024a1H
  00144	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211990
  0014b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9377 :             sysblk.maxcpu - sysblk.cpus, sysblk.maxcpu );
; 9378 :     }
; 9379 : 
; 9380 :     for (i=j=0; i < sysblk.maxcpu; i++)

  00151	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR j$[rsp], 0
  0015c	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  00163	89 84 24 80 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
  0016a	eb 10		 jmp	 SHORT $LN10@qproc_cmd
$LN8@qproc_cmd:
  0016c	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  00173	ff c0		 inc	 eax
  00175	89 84 24 80 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN10@qproc_cmd:
  0017c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00183	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00189	39 84 24 80 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  00190	0f 8d 85 00 00
	00		 jge	 $LN9@qproc_cmd

; 9381 :     {
; 9382 :         if (1
; 9383 :             && IS_CPU_ONLINE( i )
; 9384 :             && sysblk.regs[i]->cpustate == CPUSTATE_STARTED

  00196	33 c0		 xor	 eax, eax
  00198	83 f8 01	 cmp	 eax, 1
  0019b	74 79		 je	 SHORT $LN15@qproc_cmd
  0019d	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  001a5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001ac	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  001b5	74 5f		 je	 SHORT $LN15@qproc_cmd
  001b7	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  001bf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001c6	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  001ce	0f b6 40 60	 movzx	 eax, BYTE PTR [rax+96]
  001d2	83 f8 01	 cmp	 eax, 1
  001d5	75 3f		 jne	 SHORT $LN15@qproc_cmd

; 9385 :         )
; 9386 :         {
; 9387 :             j++;

  001d7	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  001de	ff c0		 inc	 eax
  001e0	89 84 24 84 00
	00 00		 mov	 DWORD PTR j$[rsp], eax

; 9388 :             cpupct += sysblk.regs[i]->cpupct;

  001e7	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  001ef	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001f6	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  001fe	8b 80 b0 07 00
	00		 mov	 eax, DWORD PTR [rax+1968]
  00204	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR cpupct$[rsp]
  0020b	03 c8		 add	 ecx, eax
  0020d	8b c1		 mov	 eax, ecx
  0020f	89 84 24 a0 00
	00 00		 mov	 DWORD PTR cpupct$[rsp], eax
$LN15@qproc_cmd:

; 9389 :         }
; 9390 :     }

  00216	e9 51 ff ff ff	 jmp	 $LN8@qproc_cmd
$LN9@qproc_cmd:

; 9391 : 
; 9392 :     mipsrate = sysblk.mipsrate;

  0021b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00222	8b 80 88 14 00
	00		 mov	 eax, DWORD PTR [rax+5256]
  00228	89 84 24 88 00
	00 00		 mov	 DWORD PTR mipsrate$[rsp], eax

; 9393 : 
; 9394 :     // "Avgproc  %2.2d %3.3d%%; MIPS[%4d.%2.2d]; SIOS[%6d]%s"
; 9395 :     WRMSG( HHC17008, "I",

  0022f	83 bc 24 84 00
	00 00 00	 cmp	 DWORD PTR j$[rsp], 0
  00237	75 0d		 jne	 SHORT $LN25@qproc_cmd
  00239	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv160[rsp], 0
  00244	eb 16		 jmp	 SHORT $LN26@qproc_cmd
$LN25@qproc_cmd:
  00246	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR cpupct$[rsp]
  0024d	99		 cdq
  0024e	f7 bc 24 84 00
	00 00		 idiv	 DWORD PTR j$[rsp]
  00255	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv160[rsp], eax
$LN26@qproc_cmd:
  0025c	33 d2		 xor	 edx, edx
  0025e	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR mipsrate$[rsp]
  00265	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  0026a	f7 f1		 div	 ecx
  0026c	8b c2		 mov	 eax, edx
  0026e	33 d2		 xor	 edx, edx
  00270	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00275	f7 f1		 div	 ecx
  00277	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv154[rsp], eax
  0027e	33 d2		 xor	 edx, edx
  00280	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR mipsrate$[rsp]
  00287	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  0028c	f7 f1		 div	 ecx
  0028e	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv156[rsp], eax
  00295	b9 01 00 00 00	 mov	 ecx, 1
  0029a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211992
  002a7	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  002ac	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  002b3	8b 89 8c 14 00
	00		 mov	 ecx, DWORD PTR [rcx+5260]
  002b9	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  002bd	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR tv154[rsp]
  002c4	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  002c8	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR tv156[rsp]
  002cf	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  002d3	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv160[rsp]
  002da	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  002de	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR j$[rsp]
  002e5	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  002e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211993
  002f0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211994
  002fc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00301	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00306	41 b9 03 00 00
	00		 mov	 r9d, 3
  0030c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG211995
  00313	ba b8 24 00 00	 mov	 edx, 9400		; 000024b8H
  00318	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG211996
  0031f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9396 :         (j),
; 9397 :         (j == 0 ? 0 : (cpupct / j)),
; 9398 :         (mipsrate / 1000000),
; 9399 :         (mipsrate % 1000000) / 10000,
; 9400 :         sysblk.siosrate, "" );
; 9401 : 
; 9402 :     for (i=0; i < sysblk.maxcpu; i++)

  00325	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  00330	eb 10		 jmp	 SHORT $LN13@qproc_cmd
$LN11@qproc_cmd:
  00332	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  00339	ff c0		 inc	 eax
  0033b	89 84 24 80 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN13@qproc_cmd:
  00342	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00349	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0034f	39 84 24 80 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  00356	0f 8d 14 06 00
	00		 jge	 $LN12@qproc_cmd

; 9403 :     {
; 9404 :         if (IS_CPU_ONLINE( i ))

  0035c	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00364	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0036b	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00374	0f 84 f1 05 00
	00		 je	 $LN16@qproc_cmd

; 9405 :         {
; 9406 :             struct rusage  rusage;
; 9407 :             char*          pmsg     = "";

  0037a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG211998
  00381	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR pmsg$8[rsp], rax

; 9408 : 
; 9409 :             if (getrusage( (int) sysblk.cputid[i], &rusage ) == 0)

  00389	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00391	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR rusage$15[rsp]
  00399	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  003a0	8b 8c 81 48 09
	00 00		 mov	 ecx, DWORD PTR [rcx+rax*4+2376]
  003a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getrusage
  003ad	85 c0		 test	 eax, eax
  003af	0f 85 d1 03 00
	00		 jne	 $LN17@qproc_cmd

; 9410 :             {
; 9411 :                 char    kdays[18], udays[18];
; 9412 : 
; 9413 :                 U64     kdd, khh, kmm, kss, kms,
; 9414 :                         udd, uhh, umm, uss, ums;
; 9415 : 
; 9416 :                 if (unlikely( rusage.ru_stime.tv_usec >= 1000000 ))

  003b5	81 bc 24 4c 01
	00 00 40 42 0f
	00		 cmp	 DWORD PTR rusage$15[rsp+12], 1000000 ; 000f4240H
  003c0	7c 0d		 jl	 SHORT $LN29@qproc_cmd
  003c2	c7 84 24 a8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv192[rsp], 1
  003cd	eb 0b		 jmp	 SHORT $LN30@qproc_cmd
$LN29@qproc_cmd:
  003cf	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv192[rsp], 0
$LN30@qproc_cmd:
  003da	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR tv192[rsp], 0
  003e2	74 39		 je	 SHORT $LN18@qproc_cmd

; 9417 :                 {
; 9418 :                     rusage.ru_stime.tv_sec += rusage.ru_stime.tv_usec / 1000000;

  003e4	8b 84 24 4c 01
	00 00		 mov	 eax, DWORD PTR rusage$15[rsp+12]
  003eb	99		 cdq
  003ec	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  003f1	f7 f9		 idiv	 ecx
  003f3	8b 8c 24 48 01
	00 00		 mov	 ecx, DWORD PTR rusage$15[rsp+8]
  003fa	03 c8		 add	 ecx, eax
  003fc	8b c1		 mov	 eax, ecx
  003fe	89 84 24 48 01
	00 00		 mov	 DWORD PTR rusage$15[rsp+8], eax

; 9419 :                     rusage.ru_stime.tv_usec %= 1000000;

  00405	8b 84 24 4c 01
	00 00		 mov	 eax, DWORD PTR rusage$15[rsp+12]
  0040c	99		 cdq
  0040d	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00412	f7 f9		 idiv	 ecx
  00414	8b c2		 mov	 eax, edx
  00416	89 84 24 4c 01
	00 00		 mov	 DWORD PTR rusage$15[rsp+12], eax
$LN18@qproc_cmd:

; 9420 :                 }
; 9421 : 
; 9422 :                 kss = rusage.ru_stime.tv_sec;

  0041d	48 63 84 24 48
	01 00 00	 movsxd	 rax, DWORD PTR rusage$15[rsp+8]
  00425	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR kss$2[rsp], rax

; 9423 :                 kdd = kss / 86400;

  0042d	33 d2		 xor	 edx, edx
  0042f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR kss$2[rsp]
  00437	b9 80 51 01 00	 mov	 ecx, 86400		; 00015180H
  0043c	48 f7 f1	 div	 rcx
  0043f	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR kdd$4[rsp], rax

; 9424 : 
; 9425 :                 if (kdd)

  00447	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR kdd$4[rsp], 0
  00450	74 41		 je	 SHORT $LN19@qproc_cmd

; 9426 :                 {
; 9427 :                     kss %= 86400;

  00452	33 d2		 xor	 edx, edx
  00454	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR kss$2[rsp]
  0045c	b9 80 51 01 00	 mov	 ecx, 86400		; 00015180H
  00461	48 f7 f1	 div	 rcx
  00464	48 8b c2	 mov	 rax, rdx
  00467	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR kss$2[rsp], rax

; 9428 :                     MSGBUF( kdays, "%"PRIu64"/", kdd );

  0046f	4c 8b 8c 24 d0
	00 00 00	 mov	 r9, QWORD PTR kdd$4[rsp]
  00477	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG212003
  0047e	ba 12 00 00 00	 mov	 edx, 18
  00483	48 8d 8c 24 68
	01 00 00	 lea	 rcx, QWORD PTR kdays$17[rsp]
  0048b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 9429 :                 }

  00491	eb 33		 jmp	 SHORT $LN20@qproc_cmd
$LN19@qproc_cmd:

; 9430 :                 else
; 9431 :                     kdays[0] = 0;

  00493	b8 01 00 00 00	 mov	 eax, 1
  00498	48 6b c0 00	 imul	 rax, rax, 0
  0049c	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR $T5[rsp], rax
  004a4	48 83 bc 24 d8
	00 00 00 12	 cmp	 QWORD PTR $T5[rsp], 18
  004ad	73 02		 jae	 SHORT $LN31@qproc_cmd
  004af	eb 05		 jmp	 SHORT $LN32@qproc_cmd
$LN31@qproc_cmd:
  004b1	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN32@qproc_cmd:
  004b6	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR $T5[rsp]
  004be	c6 84 04 68 01
	00 00 00	 mov	 BYTE PTR kdays$17[rsp+rax], 0
$LN20@qproc_cmd:

; 9432 : 
; 9433 :                 khh = kss /  3600, kss %=  3600;

  004c6	33 d2		 xor	 edx, edx
  004c8	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR kss$2[rsp]
  004d0	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  004d5	48 f7 f1	 div	 rcx
  004d8	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR khh$14[rsp], rax
  004e0	33 d2		 xor	 edx, edx
  004e2	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR kss$2[rsp]
  004ea	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  004ef	48 f7 f1	 div	 rcx
  004f2	48 8b c2	 mov	 rax, rdx
  004f5	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR kss$2[rsp], rax

; 9434 :                 kmm = kss /    60, kss %=    60;

  004fd	33 d2		 xor	 edx, edx
  004ff	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR kss$2[rsp]
  00507	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  0050c	48 f7 f1	 div	 rcx
  0050f	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR kmm$13[rsp], rax
  00517	33 d2		 xor	 edx, edx
  00519	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR kss$2[rsp]
  00521	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00526	48 f7 f1	 div	 rcx
  00529	48 8b c2	 mov	 rax, rdx
  0052c	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR kss$2[rsp], rax

; 9435 : 
; 9436 :                 kms = (rusage.ru_stime.tv_usec + 500) / 1000;

  00534	8b 84 24 4c 01
	00 00		 mov	 eax, DWORD PTR rusage$15[rsp+12]
  0053b	05 f4 01 00 00	 add	 eax, 500		; 000001f4H
  00540	99		 cdq
  00541	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00546	f7 f9		 idiv	 ecx
  00548	48 98		 cdqe
  0054a	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR kms$12[rsp], rax

; 9437 : 
; 9438 :                 if (unlikely( rusage.ru_utime.tv_usec >= 1000000 ))

  00552	81 bc 24 44 01
	00 00 40 42 0f
	00		 cmp	 DWORD PTR rusage$15[rsp+4], 1000000 ; 000f4240H
  0055d	7c 0d		 jl	 SHORT $LN35@qproc_cmd
  0055f	c7 84 24 ac 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv219[rsp], 1
  0056a	eb 0b		 jmp	 SHORT $LN36@qproc_cmd
$LN35@qproc_cmd:
  0056c	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv219[rsp], 0
$LN36@qproc_cmd:
  00577	83 bc 24 ac 00
	00 00 00	 cmp	 DWORD PTR tv219[rsp], 0
  0057f	74 39		 je	 SHORT $LN21@qproc_cmd

; 9439 :                 {
; 9440 :                     rusage.ru_utime.tv_sec += rusage.ru_utime.tv_usec / 1000000;

  00581	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR rusage$15[rsp+4]
  00588	99		 cdq
  00589	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  0058e	f7 f9		 idiv	 ecx
  00590	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR rusage$15[rsp]
  00597	03 c8		 add	 ecx, eax
  00599	8b c1		 mov	 eax, ecx
  0059b	89 84 24 40 01
	00 00		 mov	 DWORD PTR rusage$15[rsp], eax

; 9441 :                     rusage.ru_utime.tv_usec %= 1000000;

  005a2	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR rusage$15[rsp+4]
  005a9	99		 cdq
  005aa	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  005af	f7 f9		 idiv	 ecx
  005b1	8b c2		 mov	 eax, edx
  005b3	89 84 24 44 01
	00 00		 mov	 DWORD PTR rusage$15[rsp+4], eax
$LN21@qproc_cmd:

; 9442 :                 }
; 9443 : 
; 9444 :                 uss = rusage.ru_utime.tv_sec;

  005ba	48 63 84 24 40
	01 00 00	 movsxd	 rax, DWORD PTR rusage$15[rsp]
  005c2	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR uss$1[rsp], rax

; 9445 :                 udd = uss / 86400;

  005ca	33 d2		 xor	 edx, edx
  005cc	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR uss$1[rsp]
  005d4	b9 80 51 01 00	 mov	 ecx, 86400		; 00015180H
  005d9	48 f7 f1	 div	 rcx
  005dc	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR udd$6[rsp], rax

; 9446 : 
; 9447 :                 if (udd)

  005e4	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR udd$6[rsp], 0
  005ed	74 41		 je	 SHORT $LN22@qproc_cmd

; 9448 :                 {
; 9449 :                     uss %= 86400;

  005ef	33 d2		 xor	 edx, edx
  005f1	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR uss$1[rsp]
  005f9	b9 80 51 01 00	 mov	 ecx, 86400		; 00015180H
  005fe	48 f7 f1	 div	 rcx
  00601	48 8b c2	 mov	 rax, rdx
  00604	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR uss$1[rsp], rax

; 9450 :                     MSGBUF( udays, "%"PRIu64"/", udd );

  0060c	4c 8b 8c 24 e0
	00 00 00	 mov	 r9, QWORD PTR udd$6[rsp]
  00614	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG212007
  0061b	ba 12 00 00 00	 mov	 edx, 18
  00620	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR udays$16[rsp]
  00628	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 9451 :                 }

  0062e	eb 33		 jmp	 SHORT $LN23@qproc_cmd
$LN22@qproc_cmd:

; 9452 :                 else
; 9453 :                     udays[0] = 0;

  00630	b8 01 00 00 00	 mov	 eax, 1
  00635	48 6b c0 00	 imul	 rax, rax, 0
  00639	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR $T7[rsp], rax
  00641	48 83 bc 24 e8
	00 00 00 12	 cmp	 QWORD PTR $T7[rsp], 18
  0064a	73 02		 jae	 SHORT $LN37@qproc_cmd
  0064c	eb 05		 jmp	 SHORT $LN38@qproc_cmd
$LN37@qproc_cmd:
  0064e	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN38@qproc_cmd:
  00653	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR $T7[rsp]
  0065b	c6 84 04 50 01
	00 00 00	 mov	 BYTE PTR udays$16[rsp+rax], 0
$LN23@qproc_cmd:

; 9454 : 
; 9455 :                 uhh = uss /  3600, uss %=  3600;

  00663	33 d2		 xor	 edx, edx
  00665	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR uss$1[rsp]
  0066d	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  00672	48 f7 f1	 div	 rcx
  00675	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR uhh$11[rsp], rax
  0067d	33 d2		 xor	 edx, edx
  0067f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR uss$1[rsp]
  00687	b9 10 0e 00 00	 mov	 ecx, 3600		; 00000e10H
  0068c	48 f7 f1	 div	 rcx
  0068f	48 8b c2	 mov	 rax, rdx
  00692	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR uss$1[rsp], rax

; 9456 :                 umm = uss /    60, uss %=    60;

  0069a	33 d2		 xor	 edx, edx
  0069c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR uss$1[rsp]
  006a4	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  006a9	48 f7 f1	 div	 rcx
  006ac	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR umm$10[rsp], rax
  006b4	33 d2		 xor	 edx, edx
  006b6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR uss$1[rsp]
  006be	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  006c3	48 f7 f1	 div	 rcx
  006c6	48 8b c2	 mov	 rax, rdx
  006c9	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR uss$1[rsp], rax

; 9457 : 
; 9458 :                 ums = (rusage.ru_utime.tv_usec + 500) / 1000;

  006d1	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR rusage$15[rsp+4]
  006d8	05 f4 01 00 00	 add	 eax, 500		; 000001f4H
  006dd	99		 cdq
  006de	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  006e3	f7 f9		 idiv	 ecx
  006e5	48 98		 cdqe
  006e7	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR ums$9[rsp], rax

; 9459 : 
; 9460 :                 MSGBUF( msgbuf, " - Host Kernel(%s%02d:%02d:%02d.%03d) "

  006ef	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR ums$9[rsp]
  006f6	89 44 24 60	 mov	 DWORD PTR [rsp+96], eax
  006fa	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR uss$1[rsp]
  00701	89 44 24 58	 mov	 DWORD PTR [rsp+88], eax
  00705	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR umm$10[rsp]
  0070c	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00710	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR uhh$11[rsp]
  00717	89 44 24 48	 mov	 DWORD PTR [rsp+72], eax
  0071b	48 8d 84 24 50
	01 00 00	 lea	 rax, QWORD PTR udays$16[rsp]
  00723	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00728	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR kms$12[rsp]
  0072f	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00733	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR kss$2[rsp]
  0073a	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0073e	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR kmm$13[rsp]
  00745	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00749	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR khh$14[rsp]
  00750	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00754	4c 8d 8c 24 68
	01 00 00	 lea	 r9, QWORD PTR kdays$17[rsp]
  0075c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG212008
  00763	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00768	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00770	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 9461 :                                           "User(%s%02d:%02d:%02d.%03d)",
; 9462 :                         kdays, (int) khh, (int) kmm, (int) kss, (int) kms,
; 9463 :                         udays, (int) uhh, (int) umm, (int) uss, (int) ums);
; 9464 : 
; 9465 :                 pmsg = msgbuf;

  00776	48 8d 84 24 80
	01 00 00	 lea	 rax, QWORD PTR msgbuf$[rsp]
  0077e	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR pmsg$8[rsp], rax
$LN17@qproc_cmd:

; 9466 :             }
; 9467 : 
; 9468 :             mipsrate = sysblk.regs[i]->mipsrate;

  00786	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0078e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00795	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0079d	8b 80 9c 07 00
	00		 mov	 eax, DWORD PTR [rax+1948]
  007a3	89 84 24 88 00
	00 00		 mov	 DWORD PTR mipsrate$[rsp], eax

; 9469 : 
; 9470 :             // "PROC %s%2.2X %c %3.3d%%; MIPS[%4d.%2.2d]; SIOS[%6d]%s"
; 9471 :             WRMSG( HHC17009, "I", PTYPSTR(i), i,

  007aa	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  007b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  007b9	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  007c1	0f b6 40 60	 movzx	 eax, BYTE PTR [rax+96]
  007c5	83 f8 01	 cmp	 eax, 1
  007c8	75 0d		 jne	 SHORT $LN41@qproc_cmd
  007ca	c7 84 24 b4 00
	00 00 2d 00 00
	00		 mov	 DWORD PTR tv325[rsp], 45 ; 0000002dH
  007d5	eb 46		 jmp	 SHORT $LN42@qproc_cmd
$LN41@qproc_cmd:
  007d7	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  007df	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  007e6	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  007ee	0f b6 40 60	 movzx	 eax, BYTE PTR [rax+96]
  007f2	83 f8 02	 cmp	 eax, 2
  007f5	75 0d		 jne	 SHORT $LN39@qproc_cmd
  007f7	c7 84 24 b0 00
	00 00 3a 00 00
	00		 mov	 DWORD PTR tv324[rsp], 58 ; 0000003aH
  00802	eb 0b		 jmp	 SHORT $LN40@qproc_cmd
$LN39@qproc_cmd:
  00804	c7 84 24 b0 00
	00 00 2a 00 00
	00		 mov	 DWORD PTR tv324[rsp], 42 ; 0000002aH
$LN40@qproc_cmd:
  0080f	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR tv324[rsp]
  00816	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv325[rsp], eax
$LN42@qproc_cmd:
  0081d	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00825	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0082c	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00834	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv354[rsp], rax
  0083c	33 d2		 xor	 edx, edx
  0083e	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR mipsrate$[rsp]
  00845	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  0084a	f7 f1		 div	 ecx
  0084c	8b c2		 mov	 eax, edx
  0084e	33 d2		 xor	 edx, edx
  00850	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00855	f7 f1		 div	 ecx
  00857	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv300[rsp], eax
  0085e	33 d2		 xor	 edx, edx
  00860	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR mipsrate$[rsp]
  00867	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  0086c	f7 f1		 div	 ecx
  0086e	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv302[rsp], eax
  00875	48 63 8c 24 80
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  0087d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00884	48 8b 8c ca 98
	0b 00 00	 mov	 rcx, QWORD PTR [rdx+rcx*8+2968]
  0088c	48 89 8c 24 30
	01 00 00	 mov	 QWORD PTR tv353[rsp], rcx
  00894	48 63 94 24 80
	00 00 00	 movsxd	 rdx, DWORD PTR i$[rsp]
  0089c	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  008a3	41 0f b6 8c 10
	48 0b 00 00	 movzx	 ecx, BYTE PTR [r8+rdx+2888]
  008ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  008b2	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv328[rsp], rax
  008ba	b9 01 00 00 00	 mov	 ecx, 1
  008bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008c5	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR pmsg$8[rsp]
  008cd	48 89 4c 24 70	 mov	 QWORD PTR [rsp+112], rcx
  008d2	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR tv354[rsp]
  008da	8b 89 a4 07 00
	00		 mov	 ecx, DWORD PTR [rcx+1956]
  008e0	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  008e4	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR tv300[rsp]
  008eb	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  008ef	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR tv302[rsp]
  008f6	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  008fa	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR tv353[rsp]
  00902	8b 89 b0 07 00
	00		 mov	 ecx, DWORD PTR [rcx+1968]
  00908	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  0090c	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv325[rsp]
  00913	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00917	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR i$[rsp]
  0091e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00922	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR tv328[rsp]
  0092a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0092f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212009
  00936	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0093b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212010
  00942	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00947	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0094c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00952	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG212011
  00959	ba 06 25 00 00	 mov	 edx, 9478		; 00002506H
  0095e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212012
  00965	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN16@qproc_cmd:

; 9472 :                 (sysblk.regs[i]->cpustate == CPUSTATE_STARTED ) ? '-' :
; 9473 :                 (sysblk.regs[i]->cpustate == CPUSTATE_STOPPING) ? ':' : '*',
; 9474 :                 (sysblk.regs[i]->cpupct),
; 9475 :                 (mipsrate / 1000000),
; 9476 :                 (mipsrate % 1000000) / 10000,
; 9477 :                 (sysblk.regs[i]->siosrate),
; 9478 :                 pmsg );
; 9479 :         }
; 9480 :     }

  0096b	e9 c2 f9 ff ff	 jmp	 $LN11@qproc_cmd
$LN12@qproc_cmd:

; 9481 : 
; 9482 :     // " - Started        : Stopping        * Stopped"
; 9483 :     WRMSG( HHC17010, "I" );

  00970	b9 01 00 00 00	 mov	 ecx, 1
  00975	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0097b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212013
  00982	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00987	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212014
  0098e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00993	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00998	41 b9 03 00 00
	00		 mov	 r9d, 3
  0099e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG212015
  009a5	ba 0b 25 00 00	 mov	 edx, 9483		; 0000250bH
  009aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG212016
  009b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 9484 : 
; 9485 :     return 0;

  009b7	33 c0		 xor	 eax, eax
$LN1@qproc_cmd:
$LN24@qproc_cmd:

; 9486 : }

  009b9	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  009c1	48 33 cc	 xor	 rcx, rsp
  009c4	e8 00 00 00 00	 call	 __security_check_cookie
  009c9	48 81 c4 18 02
	00 00		 add	 rsp, 536		; 00000218H
  009d0	c3		 ret	 0
qproc_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
i$ = 80
dev$ = 88
devnum$ = 96
lcss$ = 100
init_argc$ = 104
rc$ = 108
init_argv$ = 112
i$1 = 120
save_argv$ = 128
tv128 = 136
tv187 = 140
tv192 = 144
tv305 = 148
tv307 = 152
tv318 = 156
tv320 = 160
tv66 = 168
argc$ = 192
argv$ = 200
cmdline$ = 208
devinit_cmd PROC

; 7495 : {

$LN42:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 7496 : DEVBLK*  dev;
; 7497 : U16      devnum;
; 7498 : U16      lcss;
; 7499 : int      i, rc;
; 7500 : int      init_argc;
; 7501 : char   **init_argv;
; 7502 : char   **save_argv = NULL;

  00015	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR save_argv$[rsp], 0
$LN4@devinit_cm:

; 7503 : 
; 7504 :     UNREFERENCED(cmdline);

  00021	33 c0		 xor	 eax, eax
  00023	85 c0		 test	 eax, eax
  00025	75 fa		 jne	 SHORT $LN4@devinit_cm

; 7505 : 
; 7506 :     if (argc < 2)

  00027	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0002f	7d 7b		 jge	 SHORT $LN19@devinit_cm

; 7507 :     {
; 7508 :         WRMSG(HHC02202,"E", argv[0] );

  00031	b8 08 00 00 00	 mov	 eax, 8
  00036	48 6b c0 00	 imul	 rax, rax, 0
  0003a	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv66[rsp], rax
  00042	b9 01 00 00 00	 mov	 ecx, 1
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0004d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00055	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR tv66[rsp]
  0005d	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00061	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210327
  0006d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210328
  00079	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0007e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00083	41 b9 03 00 00
	00		 mov	 r9d, 3
  00089	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210329
  00090	ba 54 1d 00 00	 mov	 edx, 7508		; 00001d54H
  00095	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210330
  0009c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7509 :         return -1;

  000a2	b8 ff ff ff ff	 mov	 eax, -1
  000a7	e9 ac 06 00 00	 jmp	 $LN1@devinit_cm
$LN19@devinit_cm:

; 7510 :     }
; 7511 : 
; 7512 :     rc=parse_single_devnum(argv[1],&lcss,&devnum);

  000ac	b8 08 00 00 00	 mov	 eax, 8
  000b1	48 6b c0 01	 imul	 rax, rax, 1
  000b5	4c 8d 44 24 60	 lea	 r8, QWORD PTR devnum$[rsp]
  000ba	48 8d 54 24 64	 lea	 rdx, QWORD PTR lcss$[rsp]
  000bf	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000c7	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000cb	e8 00 00 00 00	 call	 parse_single_devnum
  000d0	89 44 24 6c	 mov	 DWORD PTR rc$[rsp], eax

; 7513 : 
; 7514 :     if (rc<0)

  000d4	83 7c 24 6c 00	 cmp	 DWORD PTR rc$[rsp], 0
  000d9	7d 0a		 jge	 SHORT $LN20@devinit_cm

; 7515 :     {
; 7516 :         return -1;

  000db	b8 ff ff ff ff	 mov	 eax, -1
  000e0	e9 73 06 00 00	 jmp	 $LN1@devinit_cm
$LN20@devinit_cm:

; 7517 :     }
; 7518 : 
; 7519 :     if (!(dev = find_device_by_devnum (lcss, devnum)))

  000e5	0f b7 54 24 60	 movzx	 edx, WORD PTR devnum$[rsp]
  000ea	0f b7 4c 24 64	 movzx	 ecx, WORD PTR lcss$[rsp]
  000ef	e8 00 00 00 00	 call	 find_device_by_devnum
  000f4	48 89 44 24 58	 mov	 QWORD PTR dev$[rsp], rax
  000f9	48 83 7c 24 58
	00		 cmp	 QWORD PTR dev$[rsp], 0
  000ff	75 19		 jne	 SHORT $LN21@devinit_cm

; 7520 :     {
; 7521 :         // HHC02200 "%1d:%04X device not found"
; 7522 :         devnotfound_msg(lcss,devnum);

  00101	0f b7 54 24 60	 movzx	 edx, WORD PTR devnum$[rsp]
  00106	0f b7 4c 24 64	 movzx	 ecx, WORD PTR lcss$[rsp]
  0010b	e8 00 00 00 00	 call	 devnotfound_msg

; 7523 :         return -1;

  00110	b8 ff ff ff ff	 mov	 eax, -1
  00115	e9 3e 06 00 00	 jmp	 $LN1@devinit_cm
$LN21@devinit_cm:

; 7524 :     }
; 7525 : 
; 7526 :     /* Obtain the device lock */
; 7527 :     obtain_lock (&dev->lock);

  0011a	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0011f	48 83 c0 38	 add	 rax, 56			; 00000038H
  00123	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210333
  0012a	48 8b c8	 mov	 rcx, rax
  0012d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 7528 : 
; 7529 :     /* wait up to 0.1 seconds for the busy to go away */
; 7530 :     {
; 7531 :         int i = 20;

  00133	c7 44 24 78 14
	00 00 00	 mov	 DWORD PTR i$1[rsp], 20
$LN5@devinit_cm:

; 7532 :         while(i-- > 0 && (dev->busy

  0013b	8b 44 24 78	 mov	 eax, DWORD PTR i$1[rsp]
  0013f	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv128[rsp], eax
  00146	8b 44 24 78	 mov	 eax, DWORD PTR i$1[rsp]
  0014a	ff c8		 dec	 eax
  0014c	89 44 24 78	 mov	 DWORD PTR i$1[rsp], eax
  00150	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR tv128[rsp], 0
  00158	0f 8e be 00 00
	00		 jle	 $LN6@devinit_cm
  0015e	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00163	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00169	c1 e8 13	 shr	 eax, 19
  0016c	83 e0 01	 and	 eax, 1
  0016f	85 c0		 test	 eax, eax
  00171	75 67		 jne	 SHORT $LN22@devinit_cm
  00173	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00178	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0017e	c1 e8 16	 shr	 eax, 22
  00181	83 e0 01	 and	 eax, 1
  00184	85 c0		 test	 eax, eax
  00186	75 52		 jne	 SHORT $LN22@devinit_cm
  00188	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0018d	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00193	c1 e8 17	 shr	 eax, 23
  00196	83 e0 01	 and	 eax, 1
  00199	85 c0		 test	 eax, eax
  0019b	75 3d		 jne	 SHORT $LN22@devinit_cm
  0019d	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  001a2	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  001a8	c1 e8 18	 shr	 eax, 24
  001ab	83 e0 01	 and	 eax, 1
  001ae	85 c0		 test	 eax, eax
  001b0	75 28		 jne	 SHORT $LN22@devinit_cm
  001b2	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  001b7	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  001bd	c1 e8 1b	 shr	 eax, 27
  001c0	83 e0 01	 and	 eax, 1
  001c3	85 c0		 test	 eax, eax
  001c5	75 13		 jne	 SHORT $LN22@devinit_cm
  001c7	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  001cc	0f b6 80 0b 03
	00 00		 movzx	 eax, BYTE PTR [rax+779]
  001d3	83 e0 01	 and	 eax, 1
  001d6	85 c0		 test	 eax, eax
  001d8	74 42		 je	 SHORT $LN6@devinit_cm
$LN22@devinit_cm:

; 7533 :                          || IOPENDING(dev)
; 7534 :                          || (dev->scsw.flag3 & SCSW3_SC_PEND)))
; 7535 :         {
; 7536 :             release_lock(&dev->lock);

  001da	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  001df	48 83 c0 38	 add	 rax, 56			; 00000038H
  001e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210335
  001ea	48 8b c8	 mov	 rcx, rax
  001ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 7537 :             usleep(5000);

  001f3	b9 88 13 00 00	 mov	 ecx, 5000		; 00001388H
  001f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_usleep

; 7538 :             obtain_lock(&dev->lock);

  001fe	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00203	48 83 c0 38	 add	 rax, 56			; 00000038H
  00207	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210336
  0020e	48 8b c8	 mov	 rcx, rax
  00211	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 7539 :         }

  00217	e9 1f ff ff ff	 jmp	 $LN5@devinit_cm
$LN6@devinit_cm:

; 7540 :     }
; 7541 : 
; 7542 :     /* Reject if device is busy or interrupt pending */
; 7543 :     if ((dev->busy || IOPENDING(dev)
; 7544 :      || (dev->scsw.flag3 & SCSW3_SC_PEND))
; 7545 :       && !sysblk.sys_reset)

  0021c	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00221	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00227	c1 e8 13	 shr	 eax, 19
  0022a	83 e0 01	 and	 eax, 1
  0022d	85 c0		 test	 eax, eax
  0022f	75 6b		 jne	 SHORT $LN24@devinit_cm
  00231	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00236	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0023c	c1 e8 16	 shr	 eax, 22
  0023f	83 e0 01	 and	 eax, 1
  00242	85 c0		 test	 eax, eax
  00244	75 56		 jne	 SHORT $LN24@devinit_cm
  00246	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0024b	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00251	c1 e8 17	 shr	 eax, 23
  00254	83 e0 01	 and	 eax, 1
  00257	85 c0		 test	 eax, eax
  00259	75 41		 jne	 SHORT $LN24@devinit_cm
  0025b	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00260	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00266	c1 e8 18	 shr	 eax, 24
  00269	83 e0 01	 and	 eax, 1
  0026c	85 c0		 test	 eax, eax
  0026e	75 2c		 jne	 SHORT $LN24@devinit_cm
  00270	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00275	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0027b	c1 e8 1b	 shr	 eax, 27
  0027e	83 e0 01	 and	 eax, 1
  00281	85 c0		 test	 eax, eax
  00283	75 17		 jne	 SHORT $LN24@devinit_cm
  00285	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0028a	0f b6 80 0b 03
	00 00		 movzx	 eax, BYTE PTR [rax+779]
  00291	83 e0 01	 and	 eax, 1
  00294	85 c0		 test	 eax, eax
  00296	0f 84 b0 00 00
	00		 je	 $LN23@devinit_cm
$LN24@devinit_cm:
  0029c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002a3	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  002a9	83 e0 01	 and	 eax, 1
  002ac	85 c0		 test	 eax, eax
  002ae	0f 85 98 00 00
	00		 jne	 $LN23@devinit_cm

; 7546 :     {
; 7547 :         release_lock (&dev->lock);

  002b4	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  002b9	48 83 c0 38	 add	 rax, 56			; 00000038H
  002bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210339
  002c4	48 8b c8	 mov	 rcx, rax
  002c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 7548 :         WRMSG(HHC02231, "E", lcss, devnum );

  002cd	0f b7 44 24 60	 movzx	 eax, WORD PTR devnum$[rsp]
  002d2	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv187[rsp], eax
  002d9	0f b7 4c 24 64	 movzx	 ecx, WORD PTR lcss$[rsp]
  002de	89 8c 24 90 00
	00 00		 mov	 DWORD PTR tv192[rsp], ecx
  002e5	b9 01 00 00 00	 mov	 ecx, 1
  002ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002f0	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv187[rsp]
  002f7	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  002fb	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv192[rsp]
  00302	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00306	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210340
  0030d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00312	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210341
  00319	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0031e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00323	41 b9 03 00 00
	00		 mov	 r9d, 3
  00329	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210342
  00330	ba 7c 1d 00 00	 mov	 edx, 7548		; 00001d7cH
  00335	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210343
  0033c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7549 :         return -1;

  00342	b8 ff ff ff ff	 mov	 eax, -1
  00347	e9 0c 04 00 00	 jmp	 $LN1@devinit_cm
$LN23@devinit_cm:

; 7550 :     }
; 7551 : 
; 7552 :     /* Build the device initialization arguments array */
; 7553 :     if (argc > 2)

  0034c	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00354	7e 2f		 jle	 SHORT $LN25@devinit_cm

; 7554 :     {
; 7555 :         /* Use the specified new arguments */
; 7556 :         init_argc = argc-2;

  00356	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  0035d	83 e8 02	 sub	 eax, 2
  00360	89 44 24 68	 mov	 DWORD PTR init_argc$[rsp], eax

; 7557 :         init_argv = &argv[2];

  00364	b8 08 00 00 00	 mov	 eax, 8
  00369	48 6b c0 02	 imul	 rax, rax, 2
  0036d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00375	48 03 c8	 add	 rcx, rax
  00378	48 8b c1	 mov	 rax, rcx
  0037b	48 89 44 24 70	 mov	 QWORD PTR init_argv$[rsp], rax

; 7558 :     }

  00380	e9 e4 00 00 00	 jmp	 $LN26@devinit_cm
$LN25@devinit_cm:

; 7559 :     else
; 7560 :     {
; 7561 :         /* Use the same arguments as originally used */
; 7562 :         init_argc = dev->argc;

  00385	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0038a	8b 40 68	 mov	 eax, DWORD PTR [rax+104]
  0038d	89 44 24 68	 mov	 DWORD PTR init_argc$[rsp], eax

; 7563 :         if (init_argc)

  00391	83 7c 24 68 00	 cmp	 DWORD PTR init_argc$[rsp], 0
  00396	0f 84 c4 00 00
	00		 je	 $LN27@devinit_cm

; 7564 :         {
; 7565 :             init_argv = malloc ( init_argc * sizeof(char*) );

  0039c	48 63 44 24 68	 movsxd	 rax, DWORD PTR init_argc$[rsp]
  003a1	48 c1 e0 03	 shl	 rax, 3
  003a5	48 8b c8	 mov	 rcx, rax
  003a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  003ae	48 89 44 24 70	 mov	 QWORD PTR init_argv$[rsp], rax

; 7566 :             save_argv = malloc ( init_argc * sizeof(char*) );

  003b3	48 63 44 24 68	 movsxd	 rax, DWORD PTR init_argc$[rsp]
  003b8	48 c1 e0 03	 shl	 rax, 3
  003bc	48 8b c8	 mov	 rcx, rax
  003bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  003c5	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR save_argv$[rsp], rax

; 7567 :             for (i = 0; i < init_argc; i++)

  003cd	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  003d5	eb 0a		 jmp	 SHORT $LN9@devinit_cm
$LN7@devinit_cm:
  003d7	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  003db	ff c0		 inc	 eax
  003dd	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN9@devinit_cm:
  003e1	8b 44 24 68	 mov	 eax, DWORD PTR init_argc$[rsp]
  003e5	39 44 24 50	 cmp	 DWORD PTR i$[rsp], eax
  003e9	7d 73		 jge	 SHORT $LN8@devinit_cm

; 7568 :             {
; 7569 :                 if (dev->argv[i])

  003eb	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  003f0	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  003f5	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  003f9	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  003fe	74 28		 je	 SHORT $LN29@devinit_cm

; 7570 :                     init_argv[i] = strdup(dev->argv[i]);

  00400	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  00405	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  0040a	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0040e	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00412	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00418	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR i$[rsp]
  0041d	48 8b 54 24 70	 mov	 rdx, QWORD PTR init_argv$[rsp]
  00422	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax
  00426	eb 12		 jmp	 SHORT $LN30@devinit_cm
$LN29@devinit_cm:

; 7571 :                 else
; 7572 :                     init_argv[i] = NULL;

  00428	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  0042d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR init_argv$[rsp]
  00432	48 c7 04 c1 00
	00 00 00	 mov	 QWORD PTR [rcx+rax*8], 0
$LN30@devinit_cm:

; 7573 :                 save_argv[i] = init_argv[i];

  0043a	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  0043f	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR i$[rsp]
  00444	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR save_argv$[rsp]
  0044c	4c 8b 44 24 70	 mov	 r8, QWORD PTR init_argv$[rsp]
  00451	49 8b 04 c0	 mov	 rax, QWORD PTR [r8+rax*8]
  00455	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax

; 7574 :             }

  00459	e9 79 ff ff ff	 jmp	 $LN7@devinit_cm
$LN8@devinit_cm:

; 7575 :         }

  0045e	eb 09		 jmp	 SHORT $LN28@devinit_cm
$LN27@devinit_cm:

; 7576 :         else
; 7577 :             init_argv = NULL;

  00460	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR init_argv$[rsp], 0
$LN28@devinit_cm:
$LN26@devinit_cm:

; 7578 :     }
; 7579 : 
; 7580 :     /* Save arguments for next time */
; 7581 :     for (i = 0; i < dev->argc; i++)

  00469	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00471	eb 0a		 jmp	 SHORT $LN12@devinit_cm
$LN10@devinit_cm:
  00473	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  00477	ff c0		 inc	 eax
  00479	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN12@devinit_cm:
  0047d	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00482	8b 40 68	 mov	 eax, DWORD PTR [rax+104]
  00485	39 44 24 50	 cmp	 DWORD PTR i$[rsp], eax
  00489	7d 2f		 jge	 SHORT $LN11@devinit_cm

; 7582 :         if (dev->argv[i])

  0048b	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  00490	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  00495	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00499	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0049e	74 18		 je	 SHORT $LN31@devinit_cm

; 7583 :             free(dev->argv[i]);

  004a0	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  004a5	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  004aa	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  004ae	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  004b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN31@devinit_cm:
  004b8	eb b9		 jmp	 SHORT $LN10@devinit_cm
$LN11@devinit_cm:

; 7584 :     if (dev->argv)

  004ba	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  004bf	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  004c4	74 0f		 je	 SHORT $LN32@devinit_cm

; 7585 :         free(dev->argv);

  004c6	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  004cb	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  004cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN32@devinit_cm:

; 7586 :     dev->argc = init_argc;

  004d5	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  004da	8b 4c 24 68	 mov	 ecx, DWORD PTR init_argc$[rsp]
  004de	89 48 68	 mov	 DWORD PTR [rax+104], ecx

; 7587 :     if (init_argc)

  004e1	83 7c 24 68 00	 cmp	 DWORD PTR init_argc$[rsp], 0
  004e6	0f 84 8c 00 00
	00		 je	 $LN33@devinit_cm

; 7588 :     {
; 7589 :         dev->argv = malloc ( init_argc * sizeof(char*) );

  004ec	48 63 44 24 68	 movsxd	 rax, DWORD PTR init_argc$[rsp]
  004f1	48 c1 e0 03	 shl	 rax, 3
  004f5	48 8b c8	 mov	 rcx, rax
  004f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  004fe	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  00503	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 7590 :         for (i = 0; i < init_argc; i++)

  00507	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0050f	eb 0a		 jmp	 SHORT $LN15@devinit_cm
$LN13@devinit_cm:
  00511	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  00515	ff c0		 inc	 eax
  00517	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN15@devinit_cm:
  0051b	8b 44 24 68	 mov	 eax, DWORD PTR init_argc$[rsp]
  0051f	39 44 24 50	 cmp	 DWORD PTR i$[rsp], eax
  00523	7d 51		 jge	 SHORT $LN14@devinit_cm

; 7591 :             if (init_argv[i])

  00525	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  0052a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR init_argv$[rsp]
  0052f	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00534	74 28		 je	 SHORT $LN35@devinit_cm

; 7592 :                 dev->argv[i] = strdup(init_argv[i]);

  00536	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  0053b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR init_argv$[rsp]
  00540	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00544	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0054a	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR i$[rsp]
  0054f	48 8b 54 24 58	 mov	 rdx, QWORD PTR dev$[rsp]
  00554	48 8b 52 70	 mov	 rdx, QWORD PTR [rdx+112]
  00558	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax
  0055c	eb 16		 jmp	 SHORT $LN36@devinit_cm
$LN35@devinit_cm:

; 7593 :             else
; 7594 :                 dev->argv[i] = NULL;

  0055e	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  00563	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  00568	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0056c	48 c7 04 c1 00
	00 00 00	 mov	 QWORD PTR [rcx+rax*8], 0
$LN36@devinit_cm:
  00574	eb 9b		 jmp	 SHORT $LN13@devinit_cm
$LN14@devinit_cm:

; 7595 :     }

  00576	eb 0d		 jmp	 SHORT $LN34@devinit_cm
$LN33@devinit_cm:

; 7596 :     else
; 7597 :         dev->argv = NULL;

  00578	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0057d	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0
$LN34@devinit_cm:

; 7598 : 
; 7599 :     /* Call the device init routine to do the hard work */
; 7600 :     dev->reinit = 1;

  00585	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0058a	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00590	0f ba e8 12	 bts	 eax, 18
  00594	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  00599	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 7601 :     if ((rc = (dev->hnd->init)(dev, init_argc, init_argv)) < 0)

  0059f	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  005a4	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  005ab	4c 8b 44 24 70	 mov	 r8, QWORD PTR init_argv$[rsp]
  005b0	8b 54 24 68	 mov	 edx, DWORD PTR init_argc$[rsp]
  005b4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  005b9	ff 10		 call	 QWORD PTR [rax]
  005bb	89 44 24 6c	 mov	 DWORD PTR rc$[rsp], eax
  005bf	83 7c 24 6c 00	 cmp	 DWORD PTR rc$[rsp], 0
  005c4	7d 77		 jge	 SHORT $LN37@devinit_cm

; 7602 :     {
; 7603 :         // "%1d:%04X device initialization failed"
; 7604 :         WRMSG(HHC02244,"E",lcss, devnum );

  005c6	0f b7 44 24 60	 movzx	 eax, WORD PTR devnum$[rsp]
  005cb	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv305[rsp], eax
  005d2	0f b7 4c 24 64	 movzx	 ecx, WORD PTR lcss$[rsp]
  005d7	89 8c 24 98 00
	00 00		 mov	 DWORD PTR tv307[rsp], ecx
  005de	b9 01 00 00 00	 mov	 ecx, 1
  005e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005e9	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv305[rsp]
  005f0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  005f4	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv307[rsp]
  005fb	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  005ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210358
  00606	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0060b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210359
  00612	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00617	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0061c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00622	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210360
  00629	ba b4 1d 00 00	 mov	 edx, 7604		; 00001db4H
  0062e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210361
  00635	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 7605 :     } else {

  0063b	eb 75		 jmp	 SHORT $LN38@devinit_cm
$LN37@devinit_cm:

; 7606 :         // "%1d:%04X device initialized"
; 7607 :         WRMSG(HHC02245, "I", lcss, devnum );

  0063d	0f b7 44 24 60	 movzx	 eax, WORD PTR devnum$[rsp]
  00642	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv318[rsp], eax
  00649	0f b7 4c 24 64	 movzx	 ecx, WORD PTR lcss$[rsp]
  0064e	89 8c 24 a0 00
	00 00		 mov	 DWORD PTR tv320[rsp], ecx
  00655	b9 01 00 00 00	 mov	 ecx, 1
  0065a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00660	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv318[rsp]
  00667	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0066b	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv320[rsp]
  00672	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00676	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210362
  0067d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00682	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210363
  00689	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0068e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00693	41 b9 03 00 00
	00		 mov	 r9d, 3
  00699	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG210364
  006a0	ba b7 1d 00 00	 mov	 edx, 7607		; 00001db7H
  006a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG210365
  006ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN38@devinit_cm:

; 7608 :     }
; 7609 :     dev->reinit = 0;

  006b2	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  006b7	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  006bd	0f ba f0 12	 btr	 eax, 18
  006c1	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  006c6	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 7610 : 
; 7611 :     /* Release the device lock */
; 7612 :     release_lock (&dev->lock);

  006cc	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  006d1	48 83 c0 38	 add	 rax, 56			; 00000038H
  006d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG210366
  006dc	48 8b c8	 mov	 rcx, rax
  006df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 7613 : 
; 7614 :     /* Free work memory */
; 7615 :     if (save_argv)

  006e5	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR save_argv$[rsp], 0
  006ee	74 64		 je	 SHORT $LN39@devinit_cm

; 7616 :     {
; 7617 :         for (i=0; i < init_argc; i++)

  006f0	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  006f8	eb 0a		 jmp	 SHORT $LN18@devinit_cm
$LN16@devinit_cm:
  006fa	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  006fe	ff c0		 inc	 eax
  00700	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN18@devinit_cm:
  00704	8b 44 24 68	 mov	 eax, DWORD PTR init_argc$[rsp]
  00708	39 44 24 50	 cmp	 DWORD PTR i$[rsp], eax
  0070c	7d 2d		 jge	 SHORT $LN17@devinit_cm

; 7618 :             if (save_argv[i])

  0070e	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  00713	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR save_argv$[rsp]
  0071b	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00720	74 17		 je	 SHORT $LN40@devinit_cm

; 7619 :                 free(save_argv[i]);

  00722	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  00727	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR save_argv$[rsp]
  0072f	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00733	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN40@devinit_cm:
  00739	eb bf		 jmp	 SHORT $LN16@devinit_cm
$LN17@devinit_cm:

; 7620 :         free(save_argv);

  0073b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR save_argv$[rsp]
  00743	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 7621 :         free(init_argv);

  00749	48 8b 4c 24 70	 mov	 rcx, QWORD PTR init_argv$[rsp]
  0074e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN39@devinit_cm:

; 7622 :     }
; 7623 : 
; 7624 :     return rc;

  00754	8b 44 24 6c	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@devinit_cm:

; 7625 : }

  00758	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0075f	c3		 ret	 0
devinit_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
quitmout$ = 80
endptr$ = 88
tv87 = 96
tv152 = 104
tv170 = 112
buf$ = 120
__$ArrayPad$ = 136
argc$ = 160
argv$ = 168
cmdline$ = 176
quitmout_cmd PROC

; 796  : {

$LN15:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 797  :     long quitmout = 0;

  00028	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR quitmout$[rsp], 0

; 798  :     char* endptr  = NULL;

  00030	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR endptr$[rsp], 0

; 799  :     char buf[16]  = {0};

  00039	48 8d 44 24 78	 lea	 rax, QWORD PTR buf$[rsp]
  0003e	48 8b f8	 mov	 rdi, rax
  00041	33 c0		 xor	 eax, eax
  00043	b9 10 00 00 00	 mov	 ecx, 16
  00048	f3 aa		 rep stosb
$LN4@quitmout_c:

; 800  : 
; 801  :     UNREFERENCED( cmdline );

  0004a	33 c0		 xor	 eax, eax
  0004c	85 c0		 test	 eax, eax
  0004e	75 fa		 jne	 SHORT $LN4@quitmout_c
$LN7@quitmout_c:

; 802  :     UPPER_ARGV_0( argv );

  00050	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00059	74 47		 je	 SHORT $LN8@quitmout_c
  0005b	b8 08 00 00 00	 mov	 eax, 8
  00060	48 6b c0 00	 imul	 rax, rax, 0
  00064	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0006c	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00071	74 2f		 je	 SHORT $LN8@quitmout_c
  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 00	 imul	 rax, rax, 0
  0007c	b9 08 00 00 00	 mov	 ecx, 8
  00081	48 6b c9 00	 imul	 rcx, rcx, 0
  00085	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0008d	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00091	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00099	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0009d	e8 00 00 00 00	 call	 strupper
$LN8@quitmout_c:
  000a2	33 c0		 xor	 eax, eax
  000a4	85 c0		 test	 eax, eax
  000a6	75 a8		 jne	 SHORT $LN7@quitmout_c

; 803  : 
; 804  :     if (argc < 2)

  000a8	83 bc 24 a0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000b0	0f 8d a1 00 00
	00		 jge	 $LN9@quitmout_c

; 805  :     {
; 806  :         MSGBUF( buf, "%d", sysblk.quitmout );

  000b6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000bd	44 8b 88 9c 12
	00 00		 mov	 r9d, DWORD PTR [rax+4764]
  000c4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205230
  000cb	ba 10 00 00 00	 mov	 edx, 16
  000d0	48 8d 4c 24 78	 lea	 rcx, QWORD PTR buf$[rsp]
  000d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 807  : 
; 808  :         // "%-14s: %s"
; 809  :         WRMSG( HHC02203, "I", argv[0], buf );

  000db	b8 08 00 00 00	 mov	 eax, 8
  000e0	48 6b c0 00	 imul	 rax, rax, 0
  000e4	48 89 44 24 60	 mov	 QWORD PTR tv87[rsp], rax
  000e9	b9 01 00 00 00	 mov	 ecx, 1
  000ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000f4	48 8d 4c 24 78	 lea	 rcx, QWORD PTR buf$[rsp]
  000f9	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000fe	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00106	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv87[rsp]
  0010b	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0010f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00114	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205231
  0011b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00120	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205232
  00127	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0012c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00131	41 b9 03 00 00
	00		 mov	 r9d, 3
  00137	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205233
  0013e	ba 29 03 00 00	 mov	 edx, 809		; 00000329H
  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205234
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 810  :         return 0;

  00150	33 c0		 xor	 eax, eax
  00152	e9 b8 01 00 00	 jmp	 $LN1@quitmout_c
$LN9@quitmout_c:

; 811  :     }
; 812  : 
; 813  :     if (0
; 814  :         || argc > 2
; 815  :         || (quitmout = strtol( argv[1], &endptr, 10 )) < 0
; 816  :         || (1
; 817  :             && (0 == quitmout || LONG_MAX == quitmout)
; 818  :             && (ERANGE == errno || EINVAL == errno)
; 819  :            )
; 820  :         || (1

  00157	33 c0		 xor	 eax, eax
  00159	85 c0		 test	 eax, eax
  0015b	0f 85 95 00 00
	00		 jne	 $LN11@quitmout_c
  00161	83 bc 24 a0 00
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00169	0f 8f 87 00 00
	00		 jg	 $LN11@quitmout_c
  0016f	b8 08 00 00 00	 mov	 eax, 8
  00174	48 6b c0 01	 imul	 rax, rax, 1
  00178	41 b8 0a 00 00
	00		 mov	 r8d, 10
  0017e	48 8d 54 24 58	 lea	 rdx, QWORD PTR endptr$[rsp]
  00183	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0018b	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0018f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtol
  00195	89 44 24 50	 mov	 DWORD PTR quitmout$[rsp], eax
  00199	83 7c 24 50 00	 cmp	 DWORD PTR quitmout$[rsp], 0
  0019e	7c 56		 jl	 SHORT $LN11@quitmout_c
  001a0	33 c0		 xor	 eax, eax
  001a2	83 f8 01	 cmp	 eax, 1
  001a5	74 27		 je	 SHORT $LN12@quitmout_c
  001a7	83 7c 24 50 00	 cmp	 DWORD PTR quitmout$[rsp], 0
  001ac	74 0a		 je	 SHORT $LN13@quitmout_c
  001ae	81 7c 24 50 ff
	ff ff 7f	 cmp	 DWORD PTR quitmout$[rsp], 2147483647 ; 7fffffffH
  001b6	75 16		 jne	 SHORT $LN12@quitmout_c
$LN13@quitmout_c:
  001b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  001be	83 38 22	 cmp	 DWORD PTR [rax], 34	; 00000022H
  001c1	74 33		 je	 SHORT $LN11@quitmout_c
  001c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  001c9	83 38 16	 cmp	 DWORD PTR [rax], 22
  001cc	74 28		 je	 SHORT $LN11@quitmout_c
$LN12@quitmout_c:
  001ce	33 c0		 xor	 eax, eax
  001d0	83 f8 01	 cmp	 eax, 1
  001d3	0f 84 92 00 00
	00		 je	 $LN10@quitmout_c
  001d9	48 8b 44 24 58	 mov	 rax, QWORD PTR endptr$[rsp]
  001de	0f be 00	 movsx	 eax, BYTE PTR [rax]
  001e1	83 f8 20	 cmp	 eax, 32			; 00000020H
  001e4	0f 84 81 00 00
	00		 je	 $LN10@quitmout_c
  001ea	48 8b 44 24 58	 mov	 rax, QWORD PTR endptr$[rsp]
  001ef	0f be 00	 movsx	 eax, BYTE PTR [rax]
  001f2	85 c0		 test	 eax, eax
  001f4	74 75		 je	 SHORT $LN10@quitmout_c
$LN11@quitmout_c:

; 821  :             && *endptr != ' '
; 822  :             && *endptr != 0
; 823  :            )
; 824  :     )
; 825  :     {
; 826  :         // "Invalid argument(s). Type 'help %s' for assistance."
; 827  :         WRMSG( HHC02211, "E", argv[0] );

  001f6	b8 08 00 00 00	 mov	 eax, 8
  001fb	48 6b c0 00	 imul	 rax, rax, 0
  001ff	48 89 44 24 68	 mov	 QWORD PTR tv152[rsp], rax
  00204	b9 01 00 00 00	 mov	 ecx, 1
  00209	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0020f	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00217	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv152[rsp]
  0021c	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00220	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00225	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205239
  0022c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00231	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205240
  00238	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0023d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00242	41 b9 03 00 00
	00		 mov	 r9d, 3
  00248	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205241
  0024f	ba 3b 03 00 00	 mov	 edx, 827		; 0000033bH
  00254	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205242
  0025b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 828  :         return -1;

  00261	b8 ff ff ff ff	 mov	 eax, -1
  00266	e9 a4 00 00 00	 jmp	 $LN1@quitmout_c
$LN10@quitmout_c:

; 829  :     }
; 830  : 
; 831  :     MSGBUF( buf, "%d", sysblk.quitmout = (int) quitmout );

  0026b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00272	8b 4c 24 50	 mov	 ecx, DWORD PTR quitmout$[rsp]
  00276	89 88 9c 12 00
	00		 mov	 DWORD PTR [rax+4764], ecx
  0027c	44 8b 4c 24 50	 mov	 r9d, DWORD PTR quitmout$[rsp]
  00281	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205243
  00288	ba 10 00 00 00	 mov	 edx, 16
  0028d	48 8d 4c 24 78	 lea	 rcx, QWORD PTR buf$[rsp]
  00292	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 832  : 
; 833  :     // "%-14s set to %s"
; 834  :     WRMSG( HHC02204, "I", argv[0], buf );

  00298	b8 08 00 00 00	 mov	 eax, 8
  0029d	48 6b c0 00	 imul	 rax, rax, 0
  002a1	48 89 44 24 70	 mov	 QWORD PTR tv170[rsp], rax
  002a6	b9 01 00 00 00	 mov	 ecx, 1
  002ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002b1	48 8d 4c 24 78	 lea	 rcx, QWORD PTR buf$[rsp]
  002b6	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002bb	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002c3	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv170[rsp]
  002c8	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  002cc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205244
  002d8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205245
  002e4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002ee	41 b9 03 00 00
	00		 mov	 r9d, 3
  002f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205246
  002fb	ba 42 03 00 00	 mov	 edx, 834		; 00000342H
  00300	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205247
  00307	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 835  :     return 0;

  0030d	33 c0		 xor	 eax, eax
$LN1@quitmout_c:

; 836  : }

  0030f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00317	48 33 cc	 xor	 rcx, rsp
  0031a	e8 00 00 00 00	 call	 __security_check_cookie
  0031f	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00326	5f		 pop	 rdi
  00327	c3		 ret	 0
quitmout_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsccmd.c
_TEXT	SEGMENT
tv79 = 80
argc$ = 112
argv$ = 120
cmdline$ = 128
quit_cmd PROC

; 763  : {

$LN24:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@quit_cmd:

; 764  :     static TID tid;
; 765  : 
; 766  :     UNREFERENCED( argc );

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@quit_cmd
$LN7@quit_cmd:

; 767  :     UNREFERENCED( argv );

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN7@quit_cmd
$LN10@quit_cmd:

; 768  :     UNREFERENCED( cmdline );

  0001e	33 c0		 xor	 eax, eax
  00020	85 c0		 test	 eax, eax
  00022	75 fa		 jne	 SHORT $LN10@quit_cmd

; 769  : 
; 770  :     if (0
; 771  :         || (argc > 2 )
; 772  :         || (argc > 1 && !CMD( argv[1], FORCE, 5 ))

  00024	33 c0		 xor	 eax, eax
  00026	85 c0		 test	 eax, eax
  00028	75 3a		 jne	 SHORT $LN18@quit_cmd
  0002a	83 7c 24 70 02	 cmp	 DWORD PTR argc$[rsp], 2
  0002f	7f 33		 jg	 SHORT $LN18@quit_cmd
  00031	83 7c 24 70 01	 cmp	 DWORD PTR argc$[rsp], 1
  00036	0f 8e a5 00 00
	00		 jle	 $LN17@quit_cmd
  0003c	b8 08 00 00 00	 mov	 eax, 8
  00041	48 6b c0 01	 imul	 rax, rax, 1
  00045	41 b8 05 00 00
	00		 mov	 r8d, 5
  0004b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00050	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205192
  0005b	e8 00 00 00 00	 call	 strcaseabbrev
  00060	85 c0		 test	 eax, eax
  00062	75 7d		 jne	 SHORT $LN17@quit_cmd
$LN18@quit_cmd:

; 773  :     )
; 774  :     {
; 775  :         // "Invalid argument %s%s"
; 776  :         WRMSG( HHC02205, "E", argv[argc-1], "" );

  00064	8b 44 24 70	 mov	 eax, DWORD PTR argc$[rsp]
  00068	ff c8		 dec	 eax
  0006a	48 98		 cdqe
  0006c	48 89 44 24 50	 mov	 QWORD PTR tv79[rsp], rax
  00071	b9 01 00 00 00	 mov	 ecx, 1
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205193
  00083	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00088	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  0008d	48 8b 54 24 50	 mov	 rdx, QWORD PTR tv79[rsp]
  00092	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00096	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205194
  000a2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205195
  000ae	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000b3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b8	41 b9 03 00 00
	00		 mov	 r9d, 3
  000be	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG205196
  000c5	ba 08 03 00 00	 mov	 edx, 776		; 00000308H
  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205197
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 777  :         return -1;

  000d7	b8 ff ff ff ff	 mov	 eax, -1
  000dc	e9 d0 00 00 00	 jmp	 $LN1@quit_cmd
$LN17@quit_cmd:

; 778  :     }
; 779  : 
; 780  :     if (argc > 1)

  000e1	83 7c 24 70 01	 cmp	 DWORD PTR argc$[rsp], 1
  000e6	7e 1e		 jle	 SHORT $LN19@quit_cmd

; 781  :         sysblk.shutimmed = TRUE;  // ('FORCE' option was given)

  000e8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000ef	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  000f5	0f ba e8 0d	 bts	 eax, 13
  000f9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00100	89 81 94 12 00
	00		 mov	 DWORD PTR [rcx+4756], eax
$LN19@quit_cmd:
$LN13@quit_cmd:

; 782  : 
; 783  :     // Launch the shutdown from a separate thread only
; 784  :     // so the "exit" command can be echoed to the panel.
; 785  : 
; 786  :     VERIFY( create_thread( &tid, DETACHED,

  00106	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0010d	48 05 88 10 00
	00		 add	 rax, 4232		; 00001088H
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205200
  0011a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0011f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205201
  00126	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0012b	45 33 c9	 xor	 r9d, r9d
  0012e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:quit_thread
  00135	48 8b d0	 mov	 rdx, rax
  00138	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?tid@?1??quit_cmd@@9@9
  0013f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  00145	85 c0		 test	 eax, eax
  00147	74 5c		 je	 SHORT $LN20@quit_cmd
$LN16@quit_cmd:
  00149	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG205202
  00150	41 b8 13 03 00
	00		 mov	 r8d, 787		; 00000313H
  00156	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG205203
  0015d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205204
  00164	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0016a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00170	85 c0		 test	 eax, eax
  00172	74 20		 je	 SHORT $LN21@quit_cmd
  00174	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG205206
  0017b	41 b8 13 03 00
	00		 mov	 r8d, 787		; 00000313H
  00181	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG205207
  00188	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG205208
  0018f	e8 00 00 00 00	 call	 DebuggerTrace
$LN21@quit_cmd:
  00194	33 c0		 xor	 eax, eax
  00196	85 c0		 test	 eax, eax
  00198	75 af		 jne	 SHORT $LN16@quit_cmd
  0019a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  001a0	85 c0		 test	 eax, eax
  001a2	74 01		 je	 SHORT $LN22@quit_cmd
  001a4	cc		 int	 3
$LN22@quit_cmd:
$LN20@quit_cmd:
  001a5	33 c0		 xor	 eax, eax
  001a7	85 c0		 test	 eax, eax
  001a9	0f 85 57 ff ff
	ff		 jne	 $LN13@quit_cmd

; 787  :         quit_thread, 0, "quit_thread" ) == 0);
; 788  : 
; 789  :     return 0;

  001af	33 c0		 xor	 eax, eax
$LN1@quit_cmd:

; 790  : }

  001b1	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001b5	c3		 ret	 0
quit_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\extstring.h
_TEXT	SEGMENT
s$ = 32
r$ = 40
limit$ = 48
result$ = 80
string$ = 88
n$ = 96
strnupper PROC

; 169  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 170  :     register char *r = result;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR result$[rsp]
  00018	48 89 44 24 28	 mov	 QWORD PTR r$[rsp], rax

; 171  :     register char *s = string;

  0001d	48 8b 44 24 58	 mov	 rax, QWORD PTR string$[rsp]
  00022	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 172  :     register char *limit = s + n - 1;

  00027	8b 44 24 60	 mov	 eax, DWORD PTR n$[rsp]
  0002b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00030	48 8d 44 01 ff	 lea	 rax, QWORD PTR [rcx+rax-1]
  00035	48 89 44 24 30	 mov	 QWORD PTR limit$[rsp], rax

; 173  :     for (; s < limit && *s; r++, s++)

  0003a	eb 1a		 jmp	 SHORT $LN4@strnupper
$LN2@strnupper:
  0003c	48 8b 44 24 28	 mov	 rax, QWORD PTR r$[rsp]
  00041	48 ff c0	 inc	 rax
  00044	48 89 44 24 28	 mov	 QWORD PTR r$[rsp], rax
  00049	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0004e	48 ff c0	 inc	 rax
  00051	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax
$LN4@strnupper:
  00056	48 8b 44 24 30	 mov	 rax, QWORD PTR limit$[rsp]
  0005b	48 39 44 24 20	 cmp	 QWORD PTR s$[rsp], rax
  00060	73 22		 jae	 SHORT $LN3@strnupper
  00062	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00067	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0006a	85 c0		 test	 eax, eax
  0006c	74 16		 je	 SHORT $LN3@strnupper

; 174  :     {
; 175  :         *r = asciitoupper(*s);

  0006e	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00073	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00076	e8 00 00 00 00	 call	 asciitoupper
  0007b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$[rsp]
  00080	88 01		 mov	 BYTE PTR [rcx], al

; 176  :     }

  00082	eb b8		 jmp	 SHORT $LN2@strnupper
$LN3@strnupper:

; 177  :     *r = 0;

  00084	48 8b 44 24 28	 mov	 rax, QWORD PTR r$[rsp]
  00089	c6 00 00	 mov	 BYTE PTR [rax], 0

; 178  :     return result;

  0008c	48 8b 44 24 50	 mov	 rax, QWORD PTR result$[rsp]

; 179  : }

  00091	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00095	c3		 ret	 0
strnupper ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\extstring.h
_TEXT	SEGMENT
s$ = 32
r$ = 40
result$ = 64
string$ = 72
strupper PROC

; 157  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 158  :     register char *r = result;

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR r$[rsp], rax

; 159  :     register char *s = string;

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR string$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 160  :     for (; *s; r++, s++)

  00022	eb 1a		 jmp	 SHORT $LN4@strupper
$LN2@strupper:
  00024	48 8b 44 24 28	 mov	 rax, QWORD PTR r$[rsp]
  00029	48 ff c0	 inc	 rax
  0002c	48 89 44 24 28	 mov	 QWORD PTR r$[rsp], rax
  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00036	48 ff c0	 inc	 rax
  00039	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax
$LN4@strupper:
  0003e	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00043	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00046	85 c0		 test	 eax, eax
  00048	74 16		 je	 SHORT $LN3@strupper

; 161  :     {
; 162  :         *r = asciitoupper(*s);

  0004a	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0004f	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00052	e8 00 00 00 00	 call	 asciitoupper
  00057	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$[rsp]
  0005c	88 01		 mov	 BYTE PTR [rcx], al

; 163  :     }

  0005e	eb c4		 jmp	 SHORT $LN2@strupper
$LN3@strupper:

; 164  :     *r = 0;

  00060	48 8b 44 24 28	 mov	 rax, QWORD PTR r$[rsp]
  00065	c6 00 00	 mov	 BYTE PTR [rax], 0

; 165  :     return result;

  00068	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]

; 166  : }

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
strupper ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\extstring.h
_TEXT	SEGMENT
tv84 = 32
tv73 = 36
tv93 = 40
a$ = 48
s$ = 56
string$ = 80
abbrev$ = 88
n$ = 96
strcaseabbrev PROC

; 91   : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 92   :     register const char *s = string;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR string$[rsp]
  00018	48 89 44 24 38	 mov	 QWORD PTR s$[rsp], rax

; 93   :     register const char *a = abbrev;

  0001d	48 8b 44 24 58	 mov	 rax, QWORD PTR abbrev$[rsp]
  00022	48 89 44 24 30	 mov	 QWORD PTR a$[rsp], rax

; 94   :     if (*a &&
; 95   :         *s &&

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0002c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0002f	85 c0		 test	 eax, eax
  00031	0f 84 02 01 00
	00		 je	 $LN5@strcaseabb
  00037	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  0003c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003f	85 c0		 test	 eax, eax
  00041	0f 84 f2 00 00
	00		 je	 $LN5@strcaseabb
  00047	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0004c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0004f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  00054	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00057	3b c1		 cmp	 eax, ecx
  00059	74 30		 je	 SHORT $LN6@strcaseabb
  0005b	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  00060	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00063	e8 00 00 00 00	 call	 asciitoupper
  00068	0f be c0	 movsx	 eax, al
  0006b	89 44 24 24	 mov	 DWORD PTR tv73[rsp], eax
  0006f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  00074	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00077	e8 00 00 00 00	 call	 asciitoupper
  0007c	0f be c0	 movsx	 eax, al
  0007f	8b 4c 24 24	 mov	 ecx, DWORD PTR tv73[rsp]
  00083	3b c8		 cmp	 ecx, eax
  00085	0f 85 ae 00 00
	00		 jne	 $LN5@strcaseabb
$LN6@strcaseabb:
$LN2@strcaseabb:

; 96   :         (*a == *s ||
; 97   :         asciitoupper(*a) == asciitoupper(*s)))
; 98   :     {
; 99   :         for (;;)
; 100  :         {
; 101  :             a++;

  0008b	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  00090	48 ff c0	 inc	 rax
  00093	48 89 44 24 30	 mov	 QWORD PTR a$[rsp], rax

; 102  :             if (!*a)

  00098	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0009d	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000a0	85 c0		 test	 eax, eax
  000a2	75 31		 jne	 SHORT $LN7@strcaseabb

; 103  :                 return (((uintptr_t)a - (uintptr_t)abbrev) >= n);

  000a4	48 8b 44 24 58	 mov	 rax, QWORD PTR abbrev$[rsp]
  000a9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a$[rsp]
  000ae	48 2b c8	 sub	 rcx, rax
  000b1	48 8b c1	 mov	 rax, rcx
  000b4	8b 4c 24 60	 mov	 ecx, DWORD PTR n$[rsp]
  000b8	48 3b c1	 cmp	 rax, rcx
  000bb	72 0a		 jb	 SHORT $LN12@strcaseabb
  000bd	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
  000c5	eb 08		 jmp	 SHORT $LN13@strcaseabb
$LN12@strcaseabb:
  000c7	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
$LN13@strcaseabb:
  000cf	8b 44 24 20	 mov	 eax, DWORD PTR tv84[rsp]
  000d3	eb 66		 jmp	 SHORT $LN1@strcaseabb
$LN7@strcaseabb:

; 104  :             s++;

  000d5	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  000da	48 ff c0	 inc	 rax
  000dd	48 89 44 24 38	 mov	 QWORD PTR s$[rsp], rax

; 105  :             if (!*s)

  000e2	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  000e7	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000ea	85 c0		 test	 eax, eax
  000ec	75 02		 jne	 SHORT $LN8@strcaseabb

; 106  :                 break;

  000ee	eb 49		 jmp	 SHORT $LN3@strcaseabb
$LN8@strcaseabb:

; 107  :             if (*a == *s)

  000f0	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  000f5	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000f8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  000fd	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00100	3b c1		 cmp	 eax, ecx
  00102	75 02		 jne	 SHORT $LN9@strcaseabb

; 108  :                 continue;

  00104	eb 85		 jmp	 SHORT $LN2@strcaseabb
$LN9@strcaseabb:

; 109  :             if (asciitoupper(*a) != asciitoupper(*s))

  00106	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0010b	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0010e	e8 00 00 00 00	 call	 asciitoupper
  00113	0f be c0	 movsx	 eax, al
  00116	89 44 24 28	 mov	 DWORD PTR tv93[rsp], eax
  0011a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  0011f	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00122	e8 00 00 00 00	 call	 asciitoupper
  00127	0f be c0	 movsx	 eax, al
  0012a	8b 4c 24 28	 mov	 ecx, DWORD PTR tv93[rsp]
  0012e	3b c8		 cmp	 ecx, eax
  00130	74 02		 je	 SHORT $LN10@strcaseabb

; 110  :                 break;

  00132	eb 05		 jmp	 SHORT $LN3@strcaseabb
$LN10@strcaseabb:

; 111  :         }

  00134	e9 52 ff ff ff	 jmp	 $LN2@strcaseabb
$LN3@strcaseabb:
$LN5@strcaseabb:

; 112  :     }
; 113  :     return 0;

  00139	33 c0		 xor	 eax, eax
$LN1@strcaseabb:

; 114  : }

  0013b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0013f	c3		 ret	 0
strcaseabbrev ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\extstring.h
_TEXT	SEGMENT
tv77 = 0
a$ = 8
s$ = 16
string$ = 48
abbrev$ = 56
n$ = 64
strabbrev PROC

; 69   : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 70   :     register char *s = string;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR string$[rsp]
  00018	48 89 44 24 10	 mov	 QWORD PTR s$[rsp], rax

; 71   :     register char *a = abbrev;

  0001d	48 8b 44 24 38	 mov	 rax, QWORD PTR abbrev$[rsp]
  00022	48 89 44 24 08	 mov	 QWORD PTR a$[rsp], rax

; 72   :     if (*a &&
; 73   :         *s &&

  00027	48 8b 44 24 08	 mov	 rax, QWORD PTR a$[rsp]
  0002c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0002f	85 c0		 test	 eax, eax
  00031	0f 84 9c 00 00
	00		 je	 $LN5@strabbrev
  00037	48 8b 44 24 10	 mov	 rax, QWORD PTR s$[rsp]
  0003c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003f	85 c0		 test	 eax, eax
  00041	0f 84 8c 00 00
	00		 je	 $LN5@strabbrev
  00047	48 8b 44 24 08	 mov	 rax, QWORD PTR a$[rsp]
  0004c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0004f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR s$[rsp]
  00054	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00057	3b c1		 cmp	 eax, ecx
  00059	75 78		 jne	 SHORT $LN5@strabbrev
$LN2@strabbrev:

; 74   :         *a == *s)
; 75   :     {
; 76   :         for (;;)
; 77   :         {
; 78   :             a++;

  0005b	48 8b 44 24 08	 mov	 rax, QWORD PTR a$[rsp]
  00060	48 ff c0	 inc	 rax
  00063	48 89 44 24 08	 mov	 QWORD PTR a$[rsp], rax

; 79   :             if (!*a)

  00068	48 8b 44 24 08	 mov	 rax, QWORD PTR a$[rsp]
  0006d	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00070	85 c0		 test	 eax, eax
  00072	75 2e		 jne	 SHORT $LN6@strabbrev

; 80   :                 return (((uintptr_t)a - (uintptr_t)abbrev) >= n);

  00074	48 8b 44 24 38	 mov	 rax, QWORD PTR abbrev$[rsp]
  00079	48 8b 4c 24 08	 mov	 rcx, QWORD PTR a$[rsp]
  0007e	48 2b c8	 sub	 rcx, rax
  00081	48 8b c1	 mov	 rax, rcx
  00084	8b 4c 24 40	 mov	 ecx, DWORD PTR n$[rsp]
  00088	48 3b c1	 cmp	 rax, rcx
  0008b	72 09		 jb	 SHORT $LN10@strabbrev
  0008d	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv77[rsp], 1
  00094	eb 07		 jmp	 SHORT $LN11@strabbrev
$LN10@strabbrev:
  00096	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv77[rsp], 0
$LN11@strabbrev:
  0009d	8b 04 24	 mov	 eax, DWORD PTR tv77[rsp]
  000a0	eb 33		 jmp	 SHORT $LN1@strabbrev
$LN6@strabbrev:

; 81   :             s++;

  000a2	48 8b 44 24 10	 mov	 rax, QWORD PTR s$[rsp]
  000a7	48 ff c0	 inc	 rax
  000aa	48 89 44 24 10	 mov	 QWORD PTR s$[rsp], rax

; 82   :             if (!*s ||

  000af	48 8b 44 24 10	 mov	 rax, QWORD PTR s$[rsp]
  000b4	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000b7	85 c0		 test	 eax, eax
  000b9	74 14		 je	 SHORT $LN8@strabbrev
  000bb	48 8b 44 24 08	 mov	 rax, QWORD PTR a$[rsp]
  000c0	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000c3	48 8b 4c 24 10	 mov	 rcx, QWORD PTR s$[rsp]
  000c8	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  000cb	3b c1		 cmp	 eax, ecx
  000cd	74 02		 je	 SHORT $LN7@strabbrev
$LN8@strabbrev:

; 83   :                 *a != *s)
; 84   :                 break;

  000cf	eb 02		 jmp	 SHORT $LN3@strabbrev
$LN7@strabbrev:

; 85   :         }

  000d1	eb 88		 jmp	 SHORT $LN2@strabbrev
$LN3@strabbrev:
$LN5@strabbrev:

; 86   :     }
; 87   :     return 0;

  000d3	33 c0		 xor	 eax, eax
$LN1@strabbrev:

; 88   : }

  000d5	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000d9	c3		 ret	 0
strabbrev ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\extstring.h
_TEXT	SEGMENT
c$ = 8
asciitoupper PROC

; 29   : {

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl

; 30   :   if (c < 'a' || c > 'z')

  00004	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  00009	83 f8 61	 cmp	 eax, 97			; 00000061H
  0000c	7c 0a		 jl	 SHORT $LN3@asciitoupp
  0000e	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  00013	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00016	7e 07		 jle	 SHORT $LN2@asciitoupp
$LN3@asciitoupp:

; 31   :       return c;

  00018	0f b6 44 24 08	 movzx	 eax, BYTE PTR c$[rsp]
  0001d	eb 08		 jmp	 SHORT $LN1@asciitoupp
$LN2@asciitoupp:

; 32   :   return (c - 32);

  0001f	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  00024	83 e8 20	 sub	 eax, 32			; 00000020H
$LN1@asciitoupp:

; 33   : }

  00027	c3		 ret	 0
asciitoupper ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dbgtrace.h
_TEXT	SEGMENT
buffsize$ = 48
rc$ = 52
chunksize$ = 56
buffer$ = 64
args$ = 72
fmt$ = 96
DebuggerTrace PROC

; 94   :   static inline void DebuggerTrace(char* fmt, ...) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 95   :       const int chunksize = 512;

  00018	c7 44 24 38 00
	02 00 00	 mov	 DWORD PTR chunksize$[rsp], 512 ; 00000200H

; 96   :       int buffsize = 0;

  00020	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR buffsize$[rsp], 0

; 97   :       char* buffer = NULL;

  00028	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR buffer$[rsp], 0

; 98   :       int rc = -1;

  00031	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 99   :       va_list args;
; 100  :       va_start( args, fmt );

  00039	48 8d 44 24 68	 lea	 rax, QWORD PTR fmt$[rsp+8]
  0003e	48 89 44 24 48	 mov	 QWORD PTR args$[rsp], rax
$LN9@DebuggerTr:
$LN4@DebuggerTr:

; 101  :       do {
; 102  :           if (buffer) free( buffer );

  00043	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00049	74 0b		 je	 SHORT $LN5@DebuggerTr
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN5@DebuggerTr:

; 103  :           buffsize += chunksize;

  00056	8b 44 24 38	 mov	 eax, DWORD PTR chunksize$[rsp]
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0005e	03 c8		 add	 ecx, eax
  00060	8b c1		 mov	 eax, ecx
  00062	89 44 24 30	 mov	 DWORD PTR buffsize$[rsp], eax

; 104  :           buffer = malloc( buffsize + 1 );

  00066	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  0006a	ff c0		 inc	 eax
  0006c	48 98		 cdqe
  0006e	48 8b c8	 mov	 rcx, rax
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00077	48 89 44 24 40	 mov	 QWORD PTR buffer$[rsp], rax

; 105  :           if (!buffer) BREAK_INTO_DEBUGGER();

  0007c	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00082	75 01		 jne	 SHORT $LN6@DebuggerTr
  00084	cc		 int	 3
$LN6@DebuggerTr:

; 106  :           rc = _vsnprintf_s( buffer, buffsize+1, buffsize, fmt, args);

  00085	48 63 44 24 30	 movsxd	 rax, DWORD PTR buffsize$[rsp]
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0008e	ff c1		 inc	 ecx
  00090	48 63 c9	 movsxd	 rcx, ecx
  00093	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00098	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0009d	4c 8b 4c 24 60	 mov	 r9, QWORD PTR fmt$[rsp]
  000a2	4c 8b c0	 mov	 r8, rax
  000a5	48 8b d1	 mov	 rdx, rcx
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000ad	e8 00 00 00 00	 call	 _vsnprintf_s
  000b2	89 44 24 34	 mov	 DWORD PTR rc$[rsp], eax

; 107  :       } while (rc < 0 || rc >= buffsize);

  000b6	83 7c 24 34 00	 cmp	 DWORD PTR rc$[rsp], 0
  000bb	7c 86		 jl	 SHORT $LN4@DebuggerTr
  000bd	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  000c1	39 44 24 34	 cmp	 DWORD PTR rc$[rsp], eax
  000c5	0f 8d 78 ff ff
	ff		 jge	 $LN9@DebuggerTr

; 108  :       OutputDebugStringA( buffer ); /* send to debugger pane */

  000cb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 109  :       if (buffer) free( buffer );

  000d6	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  000dc	74 0b		 je	 SHORT $LN7@DebuggerTr
  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@DebuggerTr:

; 110  :       va_end( args );

  000e9	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0

; 111  :   }

  000f2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f6	c3		 ret	 0
DebuggerTrace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\time.h
_TEXT	SEGMENT
_Time$ = 48
time	PROC

; 521  :         {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 522  :             return _time64(_Time);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64

; 523  :         }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\time.h
_TEXT	SEGMENT
_Time$ = 48
localtime PROC

; 498  :         {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 499  :             return _localtime64(_Time);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__localtime64

; 500  :         }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
localtime ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\time.h
_TEXT	SEGMENT
_Time1$ = 48
_Time2$ = 56
difftime PROC

; 483  :         {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 484  :             return _difftime64(_Time1, _Time2);

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Time2$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time1$[rsp]
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__difftime64

; 485  :         }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
difftime ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\time.h
_TEXT	SEGMENT
_Time$ = 48
ctime	PROC

; 474  :         {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 475  :             return _ctime64(_Time);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__ctime64

; 476  :         }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
ctime	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sscanf	PROC						; COMDAT

; 2247 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsscanf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2252 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2253 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2254 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2152 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2153 :         return __stdio_common_vsscanf(

  00018	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  0003d	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sprintf	PROC						; COMDAT

; 1771 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsprintf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 1777 : 
; 1778 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 1779 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 1780 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_MaxCount$ = 80
_Format$ = 88
_ArgList$ = 96
_vsnprintf_s PROC					; COMDAT

; 1598 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1599 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00022	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0002b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Format$[rsp]
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR _MaxCount$[rsp]
  00035	48 8b 54 24 48	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0003f	e8 00 00 00 00	 call	 _vsnprintf_s_l

; 1600 :     }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
_vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s_l
_TEXT	SEGMENT
_Result$ = 64
tv74 = 68
_Buffer$ = 96
_BufferCount$ = 104
_MaxCount$ = 112
_Format$ = 120
_Locale$ = 128
_ArgList$ = 136
_vsnprintf_s_l PROC					; COMDAT

; 1577 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1578 :         int const _Result = __stdio_common_vsnprintf_s(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00032	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00037	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Format$[rsp]
  0003c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00041	4c 8b 4c 24 70	 mov	 r9, QWORD PTR _MaxCount$[rsp]
  00046	4c 8b 44 24 68	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  0004b	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00050	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsnprintf_s
  00059	89 44 24 40	 mov	 DWORD PTR _Result$[rsp], eax

; 1579 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1580 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1581 : 
; 1582 :         return _Result < 0 ? -1 : _Result;

  0005d	83 7c 24 40 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00062	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  00064	c7 44 24 44 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  0006c	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0006e	8b 44 24 40	 mov	 eax, DWORD PTR _Result$[rsp]
  00072	89 44 24 44	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  00076	8b 44 24 44	 mov	 eax, DWORD PTR tv74[rsp]

; 1583 :     }

  0007a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0007e	c3		 ret	 0
_vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT

; 1458 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1459 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  00027	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  0002c	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00038	e8 00 00 00 00	 call	 _vsnprintf_l

; 1460 :     }

  0003d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00041	c3		 ret	 0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnprintf_l PROC					; COMDAT

; 1391 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00020	48 83 c8 01	 or	 rax, 1
  00024	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00029	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00033	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00038	4c 8b 4c 24 60	 mov	 r9, QWORD PTR _Format$[rsp]
  0003d	4c 8b 44 24 58	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  00042	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf
  00050	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00054	83 7c 24 30 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00059	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  0005b	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  00063	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00065	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]
  00069	89 44 24 34	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  0006d	8b 44 24 34	 mov	 eax, DWORD PTR tv74[rsp]

; 1397 :     }

  00071	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00075	c3		 ret	 0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00007	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
