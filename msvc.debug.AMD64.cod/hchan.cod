; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	hdl_check_depends_ep
PUBLIC	hdl_define_devtypes_ep
EXTRN	__report_rangecheckfailure:PROC
EXTRN	strcmp:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_strlcpy:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_w32_basename:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_sysblk:BYTE
EXTRN	__security_cookie:QWORD
pdata	SEGMENT
$pdata$hchan_init_handler DD imagerel hchan_init_handler
	DD	imagerel hchan_init_handler+1070
	DD	imagerel $unwind$hchan_init_handler
$pdata$hchan_query_device DD imagerel hchan_query_device
	DD	imagerel hchan_query_device+343
	DD	imagerel $unwind$hchan_query_device
$pdata$hchan_execute_ccw DD imagerel hchan_execute_ccw
	DD	imagerel hchan_execute_ccw+114
	DD	imagerel $unwind$hchan_execute_ccw
$pdata$hdl_check_depends_ep DD imagerel $LN15
	DD	imagerel $LN15+152
	DD	imagerel $unwind$hdl_check_depends_ep
$pdata$hdl_define_devtypes_ep DD imagerel $LN3
	DD	imagerel $LN3+104
	DD	imagerel $unwind$hdl_define_devtypes_ep
pdata	ENDS
_DATA	SEGMENT
$SG159077 DB	'E', 00H
	ORG $+6
$SG159078 DB	'HHC01350%s %1d:%04X CHAN: missing generic channel method'
	DB	0aH, 00H
	ORG $+2
$SG159087 DB	'E', 00H
	ORG $+2
$SG159079 DB	'hchan_init_handler', 00H
	ORG $+1
$SG159092 DB	'T', 00H
	ORG $+2
$SG159080 DB	'hchan.c', 00H
$SG159082 DB	'EXEC', 00H
	ORG $+3
$SG159084 DB	'CONNECT', 00H
$SG159086 DB	'ITHREAD', 00H
$SG159088 DB	'HHC01351%s %1d:%04X CHAN: incorrect generic channel meth'
	DB	'od %s', 0aH, 00H
	ORG $+1
$SG159089 DB	'hchan_init_handler', 00H
	ORG $+1
$SG159096 DB	'W', 00H
	ORG $+2
$SG159090 DB	'hchan.c', 00H
$SG159093 DB	'HHC01352%s %1d:%04X CHAN: generic channel initialisation'
	DB	' failed', 0aH, 00H
	ORG $+3
$SG159167 DB	'.', 00H
	ORG $+2
$SG159094 DB	'hchan_init_handler', 00H
	ORG $+5
$SG159095 DB	'hchan.c', 00H
$SG159098 DB	'hchan_init_handler', 00H
	ORG $+5
$SG159097 DB	'HHC01353%s %1d:%04X CHAN: generic channel is currently i'
	DB	'n development', 0aH, 00H
	ORG $+1
$SG159099 DB	'hchan.c', 00H
$SG159161 DB	'CHAN', 00H
	ORG $+3
$SG159168 DB	'** CONTROL UNIT OFFLINE **', 00H
	ORG $+1
$SG159270 DB	'DEVBLK', 00H
	ORG $+5
hchan_device_hndinfo DQ FLAT:hchan_init_handler
	DQ	FLAT:hchan_execute_ccw
	DQ	FLAT:hchan_close_device
	DQ	FLAT:hchan_query_device
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
$SG159266 DB	'SDL 4.60', 00H
	ORG $+7
$SG159267 DB	'HERCULES', 00H
	ORG $+7
$SG159269 DB	'SDL 4.00', 00H
	ORG $+7
$SG159272 DB	'SDL 4.2', 00H
$SG159273 DB	'SYSBLK', 00H
	ORG $+1
$SG159278 DB	'HCHAN', 00H
	ORG $+2
$SG159279 DB	'2860', 00H
	ORG $+3
$SG159280 DB	'2870', 00H
	ORG $+3
$SG159281 DB	'2880', 00H
	ORG $+3
$SG159282 DB	'9032', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:hchan_query_device
	DD	025H
	DD	013fH
voltbl	ENDS
xdata	SEGMENT
$unwind$hchan_init_handler DD 021501H
	DD	0110115H
$unwind$hchan_query_device DD 022d19H
	DD	02b011bH
	DD	imagerel __GSHandlerCheck
	DD	0140H
$unwind$hchan_execute_ccw DD 011701H
	DD	02217H
$unwind$hdl_check_depends_ep DD 010901H
	DD	06209H
$unwind$hdl_define_devtypes_ep DD 010901H
	DD	04209H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hchan.c
_TEXT	SEGMENT
defdev$ = 48
hdl_define_devtypes_ep PROC

; 225  : HDL_DEVICE_SECTION;

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 226  : {
; 227  :     HDL_DEVICE(HCHAN, hchan_device_hndinfo );

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:hchan_device_hndinfo
  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159278
  00017	ff 54 24 30	 call	 QWORD PTR defdev$[rsp]

; 228  :     HDL_DEVICE(2860, hchan_device_hndinfo );

  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:hchan_device_hndinfo
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159279
  00029	ff 54 24 30	 call	 QWORD PTR defdev$[rsp]

; 229  :     HDL_DEVICE(2870, hchan_device_hndinfo );

  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:hchan_device_hndinfo
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159280
  0003b	ff 54 24 30	 call	 QWORD PTR defdev$[rsp]

; 230  :     HDL_DEVICE(2880, hchan_device_hndinfo );

  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:hchan_device_hndinfo
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159281
  0004d	ff 54 24 30	 call	 QWORD PTR defdev$[rsp]

; 231  :     HDL_DEVICE(9032, hchan_device_hndinfo );

  00051	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:hchan_device_hndinfo
  00058	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159282
  0005f	ff 54 24 30	 call	 QWORD PTR defdev$[rsp]

; 232  : }
; 233  : END_DEVICE_SECTION

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
hdl_define_devtypes_ep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hchan.c
_TEXT	SEGMENT
depchk_rc$ = 32
depchk$ = 64
hdl_check_depends_ep PROC

; 206  : HDL_DEPENDENCY_SECTION;

$LN15:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 0
$LN4@hdl_check_:

; 207  : {
; 208  :      HDL_DEPENDENCY(HERCULES);

  00011	41 b8 08 00 00
	00		 mov	 r8d, 8
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159266
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159267
  00025	ff 54 24 40	 call	 QWORD PTR depchk$[rsp]
  00029	85 c0		 test	 eax, eax
  0002b	74 08		 je	 SHORT $LN11@hdl_check_
  0002d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 1
$LN11@hdl_check_:
  00035	33 c0		 xor	 eax, eax
  00037	85 c0		 test	 eax, eax
  00039	75 d6		 jne	 SHORT $LN4@hdl_check_
$LN7@hdl_check_:

; 209  :      HDL_DEPENDENCY(DEVBLK);

  0003b	41 b8 a0 1b 00
	00		 mov	 r8d, 7072		; 00001ba0H
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159269
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159270
  0004f	ff 54 24 40	 call	 QWORD PTR depchk$[rsp]
  00053	85 c0		 test	 eax, eax
  00055	74 08		 je	 SHORT $LN12@hdl_check_
  00057	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 1
$LN12@hdl_check_:
  0005f	33 c0		 xor	 eax, eax
  00061	85 c0		 test	 eax, eax
  00063	75 d6		 jne	 SHORT $LN7@hdl_check_
$LN10@hdl_check_:

; 210  :      HDL_DEPENDENCY(SYSBLK);

  00065	41 b8 00 76 01
	00		 mov	 r8d, 95744		; 00017600H
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159272
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159273
  00079	ff 54 24 40	 call	 QWORD PTR depchk$[rsp]
  0007d	85 c0		 test	 eax, eax
  0007f	74 08		 je	 SHORT $LN13@hdl_check_
  00081	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 1
$LN13@hdl_check_:
  00089	33 c0		 xor	 eax, eax
  0008b	85 c0		 test	 eax, eax
  0008d	75 d6		 jne	 SHORT $LN10@hdl_check_

; 211  : }
; 212  : END_DEPENDENCY_SECTION

  0008f	8b 44 24 20	 mov	 eax, DWORD PTR depchk_rc$[rsp]
  00093	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00097	c3		 ret	 0
hdl_check_depends_ep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hchan.c
_TEXT	SEGMENT
tv73 = 0
dev$ = 32
code$ = 40
flags$ = 48
chained$ = 56
count$ = 64
prevcode$ = 72
ccwseq$ = 80
iobuf$ = 88
more$ = 96
unitstat$ = 104
residual$ = 112
hchan_execute_ccw PROC

; 141  : {

  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 18	 sub	 rsp, 24
$LN4@hchan_exec:

; 142  : 
; 143  :     UNREFERENCED(flags);

  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@hchan_exec
$LN7@hchan_exec:

; 144  :     UNREFERENCED(prevcode);

  0001d	33 c0		 xor	 eax, eax
  0001f	85 c0		 test	 eax, eax
  00021	75 fa		 jne	 SHORT $LN7@hchan_exec
$LN10@hchan_exec:

; 145  :     UNREFERENCED(ccwseq);

  00023	33 c0		 xor	 eax, eax
  00025	85 c0		 test	 eax, eax
  00027	75 fa		 jne	 SHORT $LN10@hchan_exec
$LN13@hchan_exec:

; 146  :     UNREFERENCED(chained);

  00029	33 c0		 xor	 eax, eax
  0002b	85 c0		 test	 eax, eax
  0002d	75 fa		 jne	 SHORT $LN13@hchan_exec
$LN16@hchan_exec:

; 147  :     UNREFERENCED(count);

  0002f	33 c0		 xor	 eax, eax
  00031	85 c0		 test	 eax, eax
  00033	75 fa		 jne	 SHORT $LN16@hchan_exec
$LN19@hchan_exec:

; 148  :     UNREFERENCED(iobuf);

  00035	33 c0		 xor	 eax, eax
  00037	85 c0		 test	 eax, eax
  00039	75 fa		 jne	 SHORT $LN19@hchan_exec
$LN22@hchan_exec:

; 149  :     UNREFERENCED(more);

  0003b	33 c0		 xor	 eax, eax
  0003d	85 c0		 test	 eax, eax
  0003f	75 fa		 jne	 SHORT $LN22@hchan_exec
$LN25@hchan_exec:

; 150  :     UNREFERENCED(residual);

  00041	33 c0		 xor	 eax, eax
  00043	85 c0		 test	 eax, eax
  00045	75 fa		 jne	 SHORT $LN25@hchan_exec

; 151  : 
; 152  :     /* Process depending on CCW opcode */
; 153  :     switch (code) {

  00047	0f b6 44 24 28	 movzx	 eax, BYTE PTR code$[rsp]
  0004c	89 04 24	 mov	 DWORD PTR tv73[rsp], eax

; 154  :     default:
; 155  :     /*---------------------------------------------------------------*/
; 156  :     /* INVALID OPERATION                                             */
; 157  :     /*---------------------------------------------------------------*/
; 158  :         /* Set command reject sense byte, and unit check status */
; 159  :         dev->sense[0] = SENSE_CR;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dev$[rsp]
  0005d	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 160  :         *unitstat = CSW_CE | CSW_DE | CSW_UC;

  00065	48 8b 44 24 68	 mov	 rax, QWORD PTR unitstat$[rsp]
  0006a	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 161  : 
; 162  :     }
; 163  : 
; 164  : }

  0006d	48 83 c4 18	 add	 rsp, 24
  00071	c3		 ret	 0
hchan_execute_ccw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hchan.c
_TEXT	SEGMENT
dev$ = 8
hchan_close_device PROC

; 129  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
$LN4@hchan_clos:

; 130  :     UNREFERENCED(dev);

  00005	33 c0		 xor	 eax, eax
  00007	85 c0		 test	 eax, eax
  00009	75 fa		 jne	 SHORT $LN4@hchan_clos

; 131  :     return 0;

  0000b	33 c0		 xor	 eax, eax

; 132  : }

  0000d	c3		 ret	 0
hchan_close_device ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hchan.c
_TEXT	SEGMENT
$T1 = 32
filename$ = 48
__$ArrayPad$ = 320
dev$ = 352
devclass$ = 360
buflen$ = 368
buffer$ = 376
hchan_query_device PROC

; 117  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 118  :     char       filename[ PATH_MAX + 1 ];/* full path or just name    */
; 119  : 
; 120  :     BEGIN_DEVICE_CLASS_QUERY( "CHAN", dev, devclass, buflen, buffer );

  0002d	48 83 bc 24 68
	01 00 00 00	 cmp	 QWORD PTR devclass$[rsp], 0
  00036	74 12		 je	 SHORT $LN2@hchan_quer
  00038	48 8b 84 24 68
	01 00 00	 mov	 rax, QWORD PTR devclass$[rsp]
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159161
  00047	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN2@hchan_quer:
  0004a	48 83 bc 24 60
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00053	74 20		 je	 SHORT $LN4@hchan_quer
  00055	48 83 bc 24 68
	01 00 00 00	 cmp	 QWORD PTR devclass$[rsp], 0
  0005e	74 15		 je	 SHORT $LN4@hchan_quer
  00060	83 bc 24 70 01
	00 00 00	 cmp	 DWORD PTR buflen$[rsp], 0
  00068	74 0b		 je	 SHORT $LN4@hchan_quer
  0006a	48 83 bc 24 78
	01 00 00 00	 cmp	 QWORD PTR buffer$[rsp], 0
  00073	75 05		 jne	 SHORT $LN3@hchan_quer
$LN4@hchan_quer:
  00075	e9 c5 00 00 00	 jmp	 $LN1@hchan_quer
$LN3@hchan_quer:
  0007a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00081	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00087	c1 e8 1a	 shr	 eax, 26
  0008a	83 e0 01	 and	 eax, 1
  0008d	85 c0		 test	 eax, eax
  0008f	74 6c		 je	 SHORT $LN5@hchan_quer
  00091	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00099	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0009f	48 8b c8	 mov	 rcx, rax
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_basename
  000a8	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  000ae	48 8b d0	 mov	 rdx, rax
  000b1	48 8d 4c 24 30	 lea	 rcx, QWORD PTR filename$[rsp]
  000b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159167
  000c3	48 8d 4c 24 30	 lea	 rcx, QWORD PTR filename$[rsp]
  000c8	e8 00 00 00 00	 call	 strcmp
  000cd	85 c0		 test	 eax, eax
  000cf	75 2a		 jne	 SHORT $LN7@hchan_quer
  000d1	b8 01 00 00 00	 mov	 eax, 1
  000d6	48 6b c0 00	 imul	 rax, rax, 0
  000da	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  000df	48 81 7c 24 20
	05 01 00 00	 cmp	 QWORD PTR $T1[rsp], 261	; 00000105H
  000e8	73 02		 jae	 SHORT $LN9@hchan_quer
  000ea	eb 05		 jmp	 SHORT $LN10@hchan_quer
$LN9@hchan_quer:
  000ec	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN10@hchan_quer:
  000f1	48 8b 44 24 20	 mov	 rax, QWORD PTR $T1[rsp]
  000f6	c6 44 04 30 00	 mov	 BYTE PTR filename$[rsp+rax], 0
$LN7@hchan_quer:
  000fb	eb 22		 jmp	 SHORT $LN6@hchan_quer
$LN5@hchan_quer:
  000fd	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00105	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0010b	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00111	48 8b d0	 mov	 rdx, rax
  00114	48 8d 4c 24 30	 lea	 rcx, QWORD PTR filename$[rsp]
  00119	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
$LN6@hchan_quer:

; 121  : 
; 122  :     snprintf(buffer,buflen,"** CONTROL UNIT OFFLINE **");

  0011f	48 63 84 24 70
	01 00 00	 movsxd	 rax, DWORD PTR buflen$[rsp]
  00127	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159168
  0012e	48 8b d0	 mov	 rdx, rax
  00131	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00139	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN1@hchan_quer:
$LN8@hchan_quer:

; 123  : }

  0013f	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00147	48 33 cc	 xor	 rcx, rsp
  0014a	e8 00 00 00 00	 call	 __security_check_cookie
  0014f	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  00156	c3		 ret	 0
hchan_query_device ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hchan.c
_TEXT	SEGMENT
rc$ = 80
tv75 = 84
tv81 = 88
tv160 = 92
tv166 = 96
tv181 = 100
tv187 = 104
tv201 = 108
tv207 = 112
tv154 = 120
dev$ = 144
argc$ = 152
argv$ = 160
hchan_init_handler PROC

; 47   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 48   :     int rc;
; 49   :     /* For re-initialisation, close the existing file, if any */
; 50   :     if (dev->fd >= 0)

  00015	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0001d	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  00024	7c 1a		 jl	 SHORT $LN4@hchan_init

; 51   :         (dev->hnd->close)(dev);

  00026	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0002e	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  00035	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0003d	ff 50 10	 call	 QWORD PTR [rax+16]
$LN4@hchan_init:

; 52   : 
; 53   :     dev->devtype=0x2880;        /* Temporary until the device is actually initialised */

  00040	b8 80 28 00 00	 mov	 eax, 10368		; 00002880H
  00045	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0004d	66 89 41 4a	 mov	 WORD PTR [rcx+74], ax
$LN2@hchan_init:

; 54   :     while(1)

  00051	33 c0		 xor	 eax, eax
  00053	83 f8 01	 cmp	 eax, 1
  00056	0f 84 75 02 00
	00		 je	 $LN3@hchan_init

; 55   :     {
; 56   :         if(argc<1)

  0005c	83 bc 24 98 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00064	0f 8d b0 00 00
	00		 jge	 $LN5@hchan_init

; 57   :         {
; 58   :             WRMSG(HHC01350,"E",LCSS_DEVNUM);

  0006a	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00073	74 12		 je	 SHORT $LN11@hchan_init
  00075	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0007d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00081	89 44 24 54	 mov	 DWORD PTR tv75[rsp], eax
  00085	eb 08		 jmp	 SHORT $LN12@hchan_init
$LN11@hchan_init:
  00087	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN12@hchan_init:
  0008f	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00098	74 14		 je	 SHORT $LN13@hchan_init
  0009a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000a2	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  000a6	d1 f8		 sar	 eax, 1
  000a8	89 44 24 58	 mov	 DWORD PTR tv81[rsp], eax
  000ac	eb 08		 jmp	 SHORT $LN14@hchan_init
$LN13@hchan_init:
  000ae	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv81[rsp], 0
$LN14@hchan_init:
  000b6	b9 01 00 00 00	 mov	 ecx, 1
  000bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000c1	8b 4c 24 54	 mov	 ecx, DWORD PTR tv75[rsp]
  000c5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000c9	8b 4c 24 58	 mov	 ecx, DWORD PTR tv81[rsp]
  000cd	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159077
  000d8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159078
  000e4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000e9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ee	41 b9 03 00 00
	00		 mov	 r9d, 3
  000f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159079
  000fb	ba 3a 00 00 00	 mov	 edx, 58			; 0000003aH
  00100	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159080
  00107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 59   :             rc=-1;

  0010d	c7 44 24 50 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 60   :             break;

  00115	e9 b7 01 00 00	 jmp	 $LN3@hchan_init
$LN5@hchan_init:

; 61   :         }
; 62   : 
; 63   :         if(strcasecmp(argv[0],"EXEC")==0)

  0011a	b8 08 00 00 00	 mov	 eax, 8
  0011f	48 6b c0 00	 imul	 rax, rax, 0
  00123	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159082
  0012a	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00132	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00136	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0013c	85 c0		 test	 eax, eax
  0013e	75 25		 jne	 SHORT $LN6@hchan_init

; 64   :         {
; 65   :             rc=hchan_init_exec(dev,argc,argv);

  00140	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR argv$[rsp]
  00148	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR argc$[rsp]
  0014f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00157	e8 00 00 00 00	 call	 hchan_init_exec
  0015c	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 66   :             break;

  00160	e9 6c 01 00 00	 jmp	 $LN3@hchan_init
$LN6@hchan_init:

; 67   :         }
; 68   :         if(strcasecmp(argv[0],"CONNECT")==0)

  00165	b8 08 00 00 00	 mov	 eax, 8
  0016a	48 6b c0 00	 imul	 rax, rax, 0
  0016e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159084
  00175	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0017d	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00181	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00187	85 c0		 test	 eax, eax
  00189	75 25		 jne	 SHORT $LN7@hchan_init

; 69   :         {
; 70   :             rc=hchan_init_connect(dev,argc,argv);

  0018b	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR argv$[rsp]
  00193	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR argc$[rsp]
  0019a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  001a2	e8 00 00 00 00	 call	 hchan_init_connect
  001a7	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 71   :             break;

  001ab	e9 21 01 00 00	 jmp	 $LN3@hchan_init
$LN7@hchan_init:

; 72   :         }
; 73   :         if(strcasecmp(argv[0],"ITHREAD")==0)

  001b0	b8 08 00 00 00	 mov	 eax, 8
  001b5	48 6b c0 00	 imul	 rax, rax, 0
  001b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159086
  001c0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001c8	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  001d2	85 c0		 test	 eax, eax
  001d4	75 25		 jne	 SHORT $LN8@hchan_init

; 74   :         {
; 75   :             rc=hchan_init_int(dev,argc,argv);

  001d6	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR argv$[rsp]
  001de	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR argc$[rsp]
  001e5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  001ed	e8 00 00 00 00	 call	 hchan_init_int
  001f2	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 76   :             break;

  001f6	e9 d6 00 00 00	 jmp	 $LN3@hchan_init
$LN8@hchan_init:

; 77   :         }
; 78   :         WRMSG(HHC01351,"E",LCSS_DEVNUM,argv[0]);

  001fb	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00204	74 12		 je	 SHORT $LN15@hchan_init
  00206	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0020e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00212	89 44 24 5c	 mov	 DWORD PTR tv160[rsp], eax
  00216	eb 08		 jmp	 SHORT $LN16@hchan_init
$LN15@hchan_init:
  00218	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv160[rsp], 0
$LN16@hchan_init:
  00220	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00229	74 14		 je	 SHORT $LN17@hchan_init
  0022b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00233	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00237	d1 f8		 sar	 eax, 1
  00239	89 44 24 60	 mov	 DWORD PTR tv166[rsp], eax
  0023d	eb 08		 jmp	 SHORT $LN18@hchan_init
$LN17@hchan_init:
  0023f	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv166[rsp], 0
$LN18@hchan_init:
  00247	b8 08 00 00 00	 mov	 eax, 8
  0024c	48 6b c0 00	 imul	 rax, rax, 0
  00250	48 89 44 24 78	 mov	 QWORD PTR tv154[rsp], rax
  00255	b9 01 00 00 00	 mov	 ecx, 1
  0025a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00260	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00268	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv154[rsp]
  0026d	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00271	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00276	8b 4c 24 5c	 mov	 ecx, DWORD PTR tv160[rsp]
  0027a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0027e	8b 4c 24 60	 mov	 ecx, DWORD PTR tv166[rsp]
  00282	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00286	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159087
  0028d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00292	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159088
  00299	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0029e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002a3	41 b9 03 00 00
	00		 mov	 r9d, 3
  002a9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159089
  002b0	ba 4e 00 00 00	 mov	 edx, 78			; 0000004eH
  002b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159090
  002bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 79   :         rc=-1;

  002c2	c7 44 24 50 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 80   :         break;

  002ca	eb 05		 jmp	 SHORT $LN3@hchan_init

; 81   :     }

  002cc	e9 80 fd ff ff	 jmp	 $LN2@hchan_init
$LN3@hchan_init:

; 82   :     if(rc)

  002d1	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  002d6	0f 84 a3 00 00
	00		 je	 $LN9@hchan_init

; 83   :     {
; 84   :         WRMSG(HHC01352,"T",LCSS_DEVNUM);

  002dc	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  002e5	74 12		 je	 SHORT $LN19@hchan_init
  002e7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002ef	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  002f3	89 44 24 64	 mov	 DWORD PTR tv181[rsp], eax
  002f7	eb 08		 jmp	 SHORT $LN20@hchan_init
$LN19@hchan_init:
  002f9	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv181[rsp], 0
$LN20@hchan_init:
  00301	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0030a	74 14		 je	 SHORT $LN21@hchan_init
  0030c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00314	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00318	d1 f8		 sar	 eax, 1
  0031a	89 44 24 68	 mov	 DWORD PTR tv187[rsp], eax
  0031e	eb 08		 jmp	 SHORT $LN22@hchan_init
$LN21@hchan_init:
  00320	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv187[rsp], 0
$LN22@hchan_init:
  00328	b9 01 00 00 00	 mov	 ecx, 1
  0032d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00333	8b 4c 24 64	 mov	 ecx, DWORD PTR tv181[rsp]
  00337	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0033b	8b 4c 24 68	 mov	 ecx, DWORD PTR tv187[rsp]
  0033f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00343	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159092
  0034a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0034f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159093
  00356	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0035b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00360	41 b9 03 00 00
	00		 mov	 r9d, 3
  00366	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159094
  0036d	ba 54 00 00 00	 mov	 edx, 84			; 00000054H
  00372	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159095
  00379	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN9@hchan_init:

; 85   :     }
; 86   :     WRMSG(HHC01353,"W",LCSS_DEVNUM);

  0037f	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00388	74 12		 je	 SHORT $LN23@hchan_init
  0038a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00392	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00396	89 44 24 6c	 mov	 DWORD PTR tv201[rsp], eax
  0039a	eb 08		 jmp	 SHORT $LN24@hchan_init
$LN23@hchan_init:
  0039c	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv201[rsp], 0
$LN24@hchan_init:
  003a4	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  003ad	74 14		 je	 SHORT $LN25@hchan_init
  003af	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003b7	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  003bb	d1 f8		 sar	 eax, 1
  003bd	89 44 24 70	 mov	 DWORD PTR tv207[rsp], eax
  003c1	eb 08		 jmp	 SHORT $LN26@hchan_init
$LN25@hchan_init:
  003c3	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv207[rsp], 0
$LN26@hchan_init:
  003cb	b9 01 00 00 00	 mov	 ecx, 1
  003d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003d6	8b 4c 24 6c	 mov	 ecx, DWORD PTR tv201[rsp]
  003da	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  003de	8b 4c 24 70	 mov	 ecx, DWORD PTR tv207[rsp]
  003e2	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159096
  003ed	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159097
  003f9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003fe	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00403	41 b9 03 00 00
	00		 mov	 r9d, 3
  00409	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159098
  00410	ba 56 00 00 00	 mov	 edx, 86			; 00000056H
  00415	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159099
  0041c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 87   :     return(rc);

  00422	8b 44 24 50	 mov	 eax, DWORD PTR rc$[rsp]

; 88   : }

  00426	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0042d	c3		 ret	 0
hchan_init_handler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hchan.c
_TEXT	SEGMENT
dev$ = 8
ac$ = 16
av$ = 24
hchan_init_int PROC

; 105  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
$LN4@hchan_init:

; 106  :     UNREFERENCED(dev);

  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@hchan_init
$LN7@hchan_init:

; 107  :     UNREFERENCED(ac);

  00014	33 c0		 xor	 eax, eax
  00016	85 c0		 test	 eax, eax
  00018	75 fa		 jne	 SHORT $LN7@hchan_init
$LN10@hchan_init:

; 108  :     UNREFERENCED(av);

  0001a	33 c0		 xor	 eax, eax
  0001c	85 c0		 test	 eax, eax
  0001e	75 fa		 jne	 SHORT $LN10@hchan_init

; 109  :     return(0);

  00020	33 c0		 xor	 eax, eax

; 110  : }

  00022	c3		 ret	 0
hchan_init_int ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hchan.c
_TEXT	SEGMENT
dev$ = 8
ac$ = 16
av$ = 24
hchan_init_connect PROC

; 98   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
$LN4@hchan_init:

; 99   :     UNREFERENCED(dev);

  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@hchan_init
$LN7@hchan_init:

; 100  :     UNREFERENCED(ac);

  00014	33 c0		 xor	 eax, eax
  00016	85 c0		 test	 eax, eax
  00018	75 fa		 jne	 SHORT $LN7@hchan_init
$LN10@hchan_init:

; 101  :     UNREFERENCED(av);

  0001a	33 c0		 xor	 eax, eax
  0001c	85 c0		 test	 eax, eax
  0001e	75 fa		 jne	 SHORT $LN10@hchan_init

; 102  :     return(0);

  00020	33 c0		 xor	 eax, eax

; 103  : }

  00022	c3		 ret	 0
hchan_init_connect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hchan.c
_TEXT	SEGMENT
dev$ = 8
ac$ = 16
av$ = 24
hchan_init_exec PROC

; 91   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
$LN4@hchan_init:

; 92   :     UNREFERENCED(dev);

  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@hchan_init
$LN7@hchan_init:

; 93   :     UNREFERENCED(ac);

  00014	33 c0		 xor	 eax, eax
  00016	85 c0		 test	 eax, eax
  00018	75 fa		 jne	 SHORT $LN7@hchan_init
$LN10@hchan_init:

; 94   :     UNREFERENCED(av);

  0001a	33 c0		 xor	 eax, eax
  0001c	85 c0		 test	 eax, eax
  0001e	75 fa		 jne	 SHORT $LN10@hchan_init

; 95   :     return(0);

  00020	33 c0		 xor	 eax, eax

; 96   : }

  00022	c3		 ret	 0
hchan_init_exec ENDP
_TEXT	ENDS
END
