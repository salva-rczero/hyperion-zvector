; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_BSS	SEGMENT
user_h_to_g DB	0100H DUP (?)
user_g_to_h DB	0100H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
ind_file_a_to_e DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, '%', 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, '?''', 01cH
	DB	01dH, 01eH, 01fH, '@Z', 07fH, '{[lP}M]\Nk`Ka', 0f0H, 0f1H, 0f2H
	DB	0f3H, 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no|', 0c1H, 0c2H
	DB	0c3H, 0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H, 0d4H
	DB	0d5H, 0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H, 0e7H
	DB	0e8H, 0e9H, 'J', 0e0H, 'O_my', 081H, 082H, 083H, 084H, 085H, 086H
	DB	087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H, 096H, 097H, 098H
	DB	099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H, 0c0H, 'j'
	DB	0d0H, 0a1H, 07H, ' !"#$', 015H, 06H, 017H, '()*+,', 09H, 0aH, 01bH
	DB	'01', 01aH, '3456', 08H, '89:;', 04H, 014H, '>', 0e1H, 'ABCDEF'
	DB	'GHIQRSTUVWXYbcdefghipqrstuvwx', 080H, 08aH, 08bH, 08cH, 08dH, 08eH
	DB	08fH, 090H, 09aH, 09bH, 09cH, 09dH, 09eH, 09fH, 0a0H, 0aaH, 0abH
	DB	0acH, 0adH, 0aeH, 0afH, 0b0H, 0b1H, 0b2H, 0b3H, 0b4H, 0b5H, 0b6H
	DB	0b7H, 0b8H, 0b9H, 0baH, 0bbH, 0bcH, 0bdH, 0beH, 0bfH, 0caH, 0cbH
	DB	0ccH, 0cdH, 0ceH, 0cfH, 0daH, 0dbH, 0dcH, 0ddH, 0deH, 0dfH, 0eaH
	DB	0ebH, 0ecH, 0edH, 0eeH, 0efH, 0faH, 0fbH, 0fcH, 0fdH, 0feH, 0ffH
	DB	00H
	ORG $+15
ind_file_e_to_a DB 00H, 01H, 02H, 03H, 09cH, 09H, 086H, 07fH, 097H, 08dH, 08eH
	DB	0bH, 0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 09dH, 085H, 08H
	DB	087H, 018H, 019H, 092H, 08fH, 01cH, 01dH, 01eH, 01fH, 080H, 081H
	DB	082H, 083H, 084H, 0aH, 017H, 01bH, 088H, 089H, 08aH, 08bH, 08cH
	DB	05H, 06H, 07H, 090H, 091H, 016H, 093H, 094H, 095H, 096H, 04H, 098H
	DB	099H, 09aH, 09bH, 014H, 015H, 09eH, 01aH, ' ', 0a0H, 0a1H, 0a2H
	DB	0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, '[.<(+]&', 0a9H, 0aaH, 0abH
	DB	0acH, 0adH, 0aeH, 0afH, 0b0H, 0b1H, '!$*);^-/', 0b2H, 0b3H, 0b4H
	DB	0b5H, 0b6H, 0b7H, 0b8H, 0b9H, '|,%_>?', 0baH, 0bbH, 0bcH, 0bdH
	DB	0beH, 0bfH, 0c0H, 0c1H, 0c2H, '`:#@''="', 0c3H, 'abcdefghi', 0c4H
	DB	0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0caH, 'jklmnopqr', 0cbH, 0ccH, 0cdH
	DB	0ceH, 0cfH, 0d0H, 0d1H, '~stuvwxyz', 0d2H, 0d3H, 0d4H, 0d5H, 0d6H
	DB	0d7H, 0d8H, 0d9H, 0daH, 0dbH, 0dcH, 0ddH, 0deH, 0dfH, 0e0H, 0e1H
	DB	0e2H, 0e3H, 0e4H, 0e5H, 0e6H, 0e7H, '{ABCDEFGHI', 0e8H, 0e9H, 0eaH
	DB	0ebH, 0ecH, 0edH, '}JKLMNOPQR', 0eeH, 0efH, 0f0H, 0f1H, 0f2H, 0f3H
	DB	'\', 09fH, 'STUVWXYZ', 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, '01'
	DB	'23456789', 0faH, 0fbH, 0fcH, 0fdH, 0feH, 0ffH, 00H
	ORG $+7
$SG159139 DB	'default', 00H
ascii_to_ebcdic DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, '%', 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, 01aH, ''''
	DB	'"', 01dH, '5', 01fH, '@Z', 07fH, '{[lP}M]\Nk`Ka', 0f0H, 0f1H, 0f2H
	DB	0f3H, 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no|', 0c1H, 0c2H
	DB	0c3H, 0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H, 0d4H
	DB	0d5H, 0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H, 0e7H
	DB	0e8H, 0e9H, 0adH, 0e0H, 0bdH, '_my', 081H, 082H, 083H, 084H, 085H
	DB	086H, 087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H, 096H, 097H
	DB	098H, 099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H, 0c0H
	DB	'j', 0d0H, 0a1H, 07H, 'h', 0dcH, 'QBCDGHRSTWVXcgq', 09cH, 09eH
	DB	0cbH, 0ccH, 0cdH, 0dbH, 0ddH, 0dfH, 0ecH, 0fcH, 0b0H, 0b1H, 0b2H
	DB	0b3H, 0b4H, 'EU', 0ceH, 0deH, 'Ii', 04H, 06H, 0abH, 08H, 0baH, 0b8H
	DB	0b7H, 0aaH, 08aH, 08bH, 09H, 0aH, 014H, 0bbH, 015H, 0b5H, 0b6H
	DB	017H, 01bH, 0b9H, 01cH, 01eH, 0bcH, ' ', 0beH, 0bfH, '!#$()*+,'
	DB	'01', 0caH, '3468', 0cfH, '9:;>AFJOYb', 0daH, 'defprs', 0e1H, 't'
	DB	'uvwx', 080H, 08cH, 08dH, 08eH, 0ebH, 08fH, 0edH, 0eeH, 0efH, 090H
	DB	09aH, 09bH, 09dH, 09fH, 0a0H, 0acH, 0aeH, 0afH, 0fdH, 0feH, 0fbH
	DB	'?', 0eaH, 0faH, 0ffH, 00H
	ORG $+7
$SG159140 DB	'437/037', 00H
ebcdic_to_ascii DB 00H, 01H, 02H, 03H, 0a6H, 09H, 0a7H, 07fH, 0a9H, 0b0H, 0b1H
	DB	0bH, 0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 0b2H, 0aH, 08H
	DB	0b7H, 018H, 019H, 01aH, 0b8H, 0baH, 01dH, 0bbH, 01fH, 0bdH, 0c0H
	DB	01cH, 0c1H, 0c2H, 0aH, 017H, 01bH, 0c3H, 0c4H, 0c5H, 0c6H, 0c7H
	DB	05H, 06H, 07H, 0c8H, 0c9H, 016H, 0cbH, 0ccH, 01eH, 0cdH, 04H, 0ceH
	DB	0d0H, 0d1H, 0d2H, 014H, 015H, 0d3H, 0fcH, ' ', 0d4H, 083H, 084H
	DB	085H, 0a0H, 0d5H, 086H, 087H, 0a4H, 0d6H, '.<(+', 0d7H, '&', 082H
	DB	088H, 089H, 08aH, 0a1H, 08cH, 08bH, 08dH, 0d8H, '!$*);^-/', 0d9H
	DB	08eH, 0dbH, 0dcH, 0ddH, 08fH, 080H, 0a5H, '|,%_>?', 0deH, 090H
	DB	0dfH, 0e0H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H, '`:#@''="', 0e7H, 'a'
	DB	'bcdefghi', 0aeH, 0afH, 0e8H, 0e9H, 0eaH, 0ecH, 0f0H, 'jklmnop'
	DB	'qr', 0f1H, 0f2H, 091H, 0f3H, 092H, 0f4H, 0f5H, '~stuvwxyz', 0adH
	DB	0a8H, 0f6H, '[', 0f7H, 0f8H, 09bH, 09cH, 09dH, 09eH, 09fH, 0b5H
	DB	0b6H, 0acH, 0abH, 0b9H, 0aaH, 0b3H, 0bcH, ']', 0beH, 0bfH, '{A'
	DB	'BCDEFGHI', 0caH, 093H, 094H, 095H, 0a2H, 0cfH, '}JKLMNOPQR', 0daH
	DB	096H, 081H, 097H, 0a3H, 098H, '\', 0e1H, 'STUVWXYZ', 0fdH, 0ebH
	DB	099H, 0edH, 0eeH, 0efH, '0123456789', 0feH, 0fbH, 09aH, 0f9H, 0faH
	DB	0ffH, 00H
	ORG $+7
$SG159141 DB	'437/500', 00H
cp_437_to_037 DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, 015H, 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, '?''"', 01dH
	DB	01eH, 01fH, '@Z', 07fH, '{[lP}M]\Nk`Ka', 0f0H, 0f1H, 0f2H, 0f3H
	DB	0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no|', 0c1H, 0c2H, 0c3H
	DB	0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H, 0d4H, 0d5H
	DB	0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H, 0e7H, 0e8H
	DB	0e9H, 0baH, 0e0H, 0bbH, 0b0H, 'my', 081H, 082H, 083H, 084H, 085H
	DB	086H, 087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H, 096H, 097H
	DB	098H, 099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H, 0c0H
	DB	'O', 0d0H, 0a1H, 07H, '???????????????????????????????????????'
	DB	'??????????????????????????????????????????????????????????Y??'
	DB	'????????????????????', 090H, '????', 0eaH, '?', 0ffH, 00H
	ORG $+7
$SG159143 DB	'819/037', 00H
cp_037_to_437 DB 00H, 01H, 02H, 03H, 07H, 09H, 07H, 07fH, 07H, 07H, 07H, 0bH
	DB	0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 07H, 0aH, 08H, 07H
	DB	018H, 019H, 07H, 07H, 07H, 07H, 07H, 07H, 07H, 07H, 01cH, 07H, 07H
	DB	0aH, 017H, 01bH, 07H, 07H, 07H, 07H, 07H, 05H, 06H, 07H, 07H, 07H
	DB	016H, 07H, 07H, 07H, 07H, 04H, 07H, 07H, 07H, 07H, 014H, 015H, 07H
	DB	01aH, ' ', 0ffH, 083H, 084H, 085H, 0a0H, 07H, 086H, 087H, 0a4H
	DB	09bH, '.<(+|&', 082H, 088H, 089H, 08aH, 0a1H, 08cH, 07H, 08dH, 0e1H
	DB	'!$*);', 0aaH, '-/', 07H, 08eH, 07H, 07H, 07H, 08fH, 080H, 0a5H
	DB	07H, ',%_>?', 07H, 090H, 07H, 07H, 07H, 07H, 07H, 07H, 'p`:#@'''
	DB	'="', 07H, 'abcdefghi', 0aeH, 0afH, 07H, 07H, 07H, 0f1H, 0f8H, 'j'
	DB	'klmnopqr', 0a6H, 0a7H, 091H, 07H, 092H, 07H, 0e6H, '~stuvwxyz'
	DB	0adH, 0abH, 07H, 07H, 07H, 07H, '^', 09cH, 09dH, 0faH, 07H, 07H
	DB	07H, 0acH, 0abH, 07H, '[]', 07H, 07H, 07H, 07H, '{ABCDEFGHI', 07H
	DB	093H, 094H, 095H, 0a2H, 07H, '}JKLMNOPQR', 07H, 096H, 081H, 097H
	DB	0a3H, 098H, '\', 0f6H, 'STUVWXYZ', 0fdH, 07H, 099H, 07H, 07H, 07H
	DB	'0123456789', 07H, 07H, 09aH, 07H, 07H, 07H, 00H
	ORG $+7
$SG159144 DB	'819/037v2', 00H
	ORG $+6
$SG159145 DB	'819/273', 00H
cp_437_to_500 DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, 015H, 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, '?''"', 01dH
	DB	01eH, 01fH, '@O', 07fH, '{[lP}M]\Nk`Ka', 0f0H, 0f1H, 0f2H, 0f3H
	DB	0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no|', 0c1H, 0c2H, 0c3H
	DB	0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H, 0d4H, 0d5H
	DB	0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H, 0e7H, 0e8H
	DB	0e9H, 'J', 0e0H, 'Z_my', 081H, 082H, 083H, 084H, 085H, 086H, 087H
	DB	088H, 089H, 091H, 092H, 093H, 094H, 095H, 096H, 097H, 098H, 099H
	DB	0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H, 0c0H, 0bbH, 0d0H
	DB	0a1H, 07H, '??????????????????????????????????????????????????'
	DB	'???????????????????????????????????????????????Y?????????????'
	DB	'?????????', 090H, '????', 0eaH, '?', 0ffH, 00H
	ORG $+7
$SG159146 DB	'819/277', 00H
cp_500_to_437 DB 00H, 01H, 02H, 03H, 07H, 09H, 07H, 07fH, 07H, 07H, 07H, 0bH
	DB	0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 07H, 0aH, 08H, 07H
	DB	018H, 019H, 07H, 07H, 07H, 07H, 07H, 07H, 07H, 07H, 01cH, 07H, 07H
	DB	0aH, 017H, 01bH, 07H, 07H, 07H, 07H, 07H, 05H, 06H, 07H, 07H, 07H
	DB	016H, 07H, 07H, 07H, 07H, 04H, 07H, 07H, 07H, 07H, 014H, 015H, 07H
	DB	01aH, ' ', 0ffH, 083H, 084H, 085H, 0a0H, 07H, 086H, 087H, 0a4H
	DB	'[.<(+!&', 082H, 088H, 089H, 08aH, 0a1H, 08cH, 07H, 08dH, 0e1H
	DB	']$*);^-/', 07H, 08eH, 07H, 07H, 07H, 08fH, 080H, 0a5H, 07H, ','
	DB	'%_>?', 07H, 090H, 07H, 07H, 07H, 07H, 07H, 07H, 'p`:#@''="', 07H
	DB	'abcdefghi', 0aeH, 0afH, 07H, 07H, 07H, 0f1H, 0f8H, 'jklmnopqr'
	DB	0a6H, 0a7H, 091H, 07H, 092H, 07H, 0e6H, '~stuvwxyz', 0adH, 0abH
	DB	07H, 07H, 07H, 07H, 09bH, 09cH, 09dH, 0faH, 07H, 07H, 07H, 0acH
	DB	0abH, 07H, 0aaH, '|', 07H, 07H, 07H, 07H, '{ABCDEFGHI', 07H, 093H
	DB	094H, 095H, 0a2H, 07H, '}JKLMNOPQR', 07H, 096H, 081H, 097H, 0a3H
	DB	098H, '\', 0f6H, 'STUVWXYZ', 0fdH, 07H, 099H, 07H, 07H, 07H, '0'
	DB	'123456789', 07H, 07H, 09aH, 07H, 07H, 07H, 00H
	ORG $+7
$SG159147 DB	'819/278', 00H
cp_850_to_273 DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, '%', 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, '?''', 01cH
	DB	01dH, 01eH, 01fH, '@O', 07fH, '{[lP}M]\Nk`Ka', 0f0H, 0f1H, 0f2H
	DB	0f3H, 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no', 0b5H, 0c1H
	DB	0c2H, 0c3H, 0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H
	DB	0d4H, 0d5H, 0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H
	DB	0e7H, 0e8H, 0e9H, 'c', 0ecH, 0fcH, '_my', 081H, 082H, 083H, 084H
	DB	085H, 086H, 087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H, 096H
	DB	097H, 098H, 099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H
	DB	'C', 0bbH, 0dcH, 'Y', 07H, 'h', 0d0H, 'QB', 0c0H, 'DGHRSTWVXJg'
	DB	'q', 09cH, 09eH, 0cbH, 'j', 0cdH, 0dbH, 0ddH, 0dfH, 0e0H, 'Zp', 0b1H
	DB	080H, 0bfH, 0ffH, 'EU', 0ceH, 0deH, 'Ii', 09aH, 09bH, 0abH, 0afH
	DB	0baH, 0b8H, 0b7H, 0aaH, 08aH, 08bH, '+,', 09H, '!(ebd', 0b4H, '8'
	DB	'143', 0b0H, 0b2H, '$"', 017H, ')', 06H, ' *Ff', 01aH, '5', 08H
	DB	'960:', 09fH, 08cH, 0acH, 'rst', 0aH, 'uvw#', 015H, 014H, 04H, 0ccH
	DB	'x;', 0eeH, 0a1H, 0ebH, 0edH, 0cfH, 0efH, 0a0H, 08eH, 0aeH, 0feH
	DB	0fbH, 0fdH, 08dH, 0adH, 0bcH, 0beH, 0caH, 08fH, 01bH, 0b9H, 0b6H
	DB	'|', 0e1H, 09dH, 090H, 0bdH, 0b3H, 0daH, 0faH, 0eaH, '>A', 00H
	ORG $+7
$SG159148 DB	'819/280', 00H
cp_273_to_850 DB 00H, 01H, 02H, 03H, 0dcH, 09H, 0c3H, 07fH, 0caH, 0b2H, 0d5H
	DB	0bH, 0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 0dbH, 0daH, 08H
	DB	0c1H, 018H, 019H, 0c8H, 0f2H, 01cH, 01dH, 01eH, 01fH, 0c4H, 0b3H
	DB	0c0H, 0d9H, 0bfH, 0aH, 017H, 01bH, 0b4H, 0c2H, 0c5H, 0b0H, 0b1H
	DB	05H, 06H, 07H, 0cdH, 0baH, 016H, 0bcH, 0bbH, 0c9H, 0ccH, 04H, 0b9H
	DB	0cbH, 0ceH, 0dfH, 014H, 015H, 0feH, 01aH, ' ', 0ffH, 083H, '{', 085H
	DB	0a0H, 0c6H, 086H, 087H, 0a4H, 08eH, '.<(+!&', 082H, 088H, 089H
	DB	08aH, 0a1H, 08cH, 08bH, 08dH, '~', 09aH, '$*);^-/', 0b6H, '[', 0b7H
	DB	0b5H, 0c7H, 08fH, 080H, 0a5H, 094H, ',%_>?', 09bH, 090H, 0d2H, 0d3H
	DB	0d4H, 0d6H, 0d7H, 0d8H, 0deH, '`:#', 0f5H, '''="', 09dH, 'abcd'
	DB	'efghi', 0aeH, 0afH, 0d0H, 0ecH, 0e7H, 0f1H, 0f8H, 'jklmnopqr', 0a6H
	DB	0a7H, 091H, 0f7H, 092H, 0cfH, 0e6H, 0e1H, 'stuvwxyz', 0adH, 0a8H
	DB	0d1H, 0edH, 0e8H, 0a9H, 0bdH, 09cH, 0beH, 0faH, 0b8H, '@', 0f4H
	DB	0acH, 0abH, 0f3H, 0aaH, '|', 0eeH, 0f9H, 0efH, 09eH, 084H, 'AB'
	DB	'CDEFGHI', 0f0H, 093H, 0ddH, 095H, 0a2H, 0e4H, 081H, 'JKLMNOPQ'
	DB	'R', 0fbH, 096H, '}', 097H, 0a3H, 098H, 099H, 0f6H, 'STUVWXYZ', 0fdH
	DB	0e2H, '\', 0e3H, 0e0H, 0e5H, '0123456789', 0fcH, 0eaH, ']', 0ebH
	DB	0e9H, 09fH, 00H
	ORG $+7
$SG159149 DB	'819/284', 00H
cp_819_to_273 DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, 015H, 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, '?''', 01cH
	DB	01dH, 01eH, 01fH, '@O', 07fH, '{[lP}M]\Nk`Ka', 0f0H, 0f1H, 0f2H
	DB	0f3H, 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no', 0b5H, 0c1H
	DB	0c2H, 0c3H, 0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H
	DB	0d4H, 0d5H, 0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H
	DB	0e7H, 0e8H, 0e9H, 'c', 0ecH, 0fcH, '_my', 081H, 082H, 083H, 084H
	DB	085H, 086H, 087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H, 096H
	DB	097H, 098H, 099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H
	DB	'C', 0bbH, 0dcH, 'Y', 07H, 04H, 06H, 08H, 09H, 0aH, 014H, 017H
	DB	01aH, 01bH, ' !"#$%()*+,01345689:;>', 0ffH, 'A', 0aaH, 0b0H, 0b1H
	DB	09fH, 0b2H, 0ccH, '|', 0bdH, 0b4H, 09aH, 08aH, 0baH, 0caH, 0afH
	DB	0bcH, 090H, 08fH, 0eaH, 0faH, 0beH, 0a0H, 0b6H, 0b3H, 09dH, 0daH
	DB	09bH, 08bH, 0b7H, 0b8H, 0b9H, 0abH, 'debfJg', 09eH, 'htqrsxuvw'
	DB	0acH, 'i', 0edH, 0eeH, 0ebH, 0efH, 0e0H, 0bfH, 080H, 0fdH, 0feH
	DB	0fbH, 'Z', 0adH, 0aeH, 0a1H, 'DEBF', 0c0H, 'G', 09cH, 'HTQRSXU'
	DB	'VW', 08cH, 'I', 0cdH, 0ceH, 0cbH, 0cfH, 'j', 0e1H, 'p', 0ddH, 0deH
	DB	0dbH, 0d0H, 08dH, 08eH, 0dfH, 00H
	ORG $+7
$SG159150 DB	'819/285', 00H
cp_273_to_819 DB 00H, 01H, 02H, 03H, 080H, 09H, 081H, 07fH, 082H, 083H, 084H
	DB	0bH, 0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 085H, 0aH, 08H
	DB	086H, 018H, 019H, 087H, 088H, 01cH, 01dH, 01eH, 01fH, 089H, 08aH
	DB	08bH, 08cH, 08dH, 08eH, 017H, 01bH, 08fH, 090H, 091H, 092H, 093H
	DB	05H, 06H, 07H, 094H, 095H, 016H, 096H, 097H, 098H, 099H, 04H, 09aH
	DB	09bH, 09cH, 09dH, 014H, 015H, 09eH, 01aH, ' ', 0a0H, 0e2H, '{', 0e0H
	DB	0e1H, 0e3H, 0e5H, 0e7H, 0f1H, 0c4H, '.<(+!&', 0e9H, 0eaH, 0ebH
	DB	0e8H, 0edH, 0eeH, 0efH, 0ecH, '~', 0dcH, '$*);^-/', 0c2H, '[', 0c0H
	DB	0c1H, 0c3H, 0c5H, 0c7H, 0d1H, 0f6H, ',%_>?', 0f8H, 0c9H, 0caH, 0cbH
	DB	0c8H, 0cdH, 0ceH, 0cfH, 0ccH, '`:#', 0a7H, '''="', 0d8H, 'abcd'
	DB	'efghi', 0abH, 0bbH, 0f0H, 0fdH, 0feH, 0b1H, 0b0H, 'jklmnopqr', 0aaH
	DB	0baH, 0e6H, 0b8H, 0c6H, 0a4H, 0b5H, 0dfH, 'stuvwxyz', 0a1H, 0bfH
	DB	0d0H, 0ddH, 0deH, 0aeH, 0a2H, 0a3H, 0a5H, 0b7H, 0a9H, '@', 0b6H
	DB	0bcH, 0bdH, 0beH, 0acH, '|', 0afH, 0a8H, 0b4H, 0d7H, 0e4H, 'AB'
	DB	'CDEFGHI', 0adH, 0f4H, 0a6H, 0f2H, 0f3H, 0f5H, 0fcH, 'JKLMNOPQ'
	DB	'R', 0b9H, 0fbH, '}', 0f9H, 0faH, 0ffH, 0d6H, 0f7H, 'STUVWXYZ', 0b2H
	DB	0d4H, '\', 0d2H, 0d3H, 0d5H, '0123456789', 0b3H, 0dbH, ']', 0d9H
	DB	0daH, 09fH, 00H
	ORG $+7
$SG159151 DB	'819/297', 00H
cp_819_to_277 DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, '%', 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, '?''', 01cH
	DB	01dH, 01eH, 01fH, '@O', 07fH, 'JglP}M]\Nk`Ka', 0f0H, 0f1H, 0f2H
	DB	0f3H, 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no', 080H, 0c1H
	DB	0c2H, 0c3H, 0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H
	DB	0d4H, 0d5H, 0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H
	DB	0e7H, 0e8H, 0e9H, 09eH, 0e0H, 09fH, '_my', 081H, 082H, 083H, 084H
	DB	085H, 086H, 087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H, 096H
	DB	097H, 098H, 099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H
	DB	09cH, 0bbH, 'G', 0dcH, 07H, ' !"#$', 015H, 06H, 017H, '()*+,', 09H
	DB	0aH, 01bH, '01', 01aH, '3456', 08H, '89:;', 04H, 014H, '>', 0ffH
	DB	'A', 0aaH, 0b0H, 0b1H, 'Z', 0b2H, 'p', 0b5H, 0bdH, 0b4H, 09aH, 08aH
	DB	0baH, 0caH, 0afH, 0bcH, 090H, 08fH, 0eaH, 0faH, 0beH, 0a0H, 0b6H
	DB	0b3H, 09dH, 0daH, 09bH, 08bH, 0b7H, 0b8H, 0b9H, 0abH, 'debfc[{'
	DB	'htqrsxuvw', 0acH, 'i', 0edH, 0eeH, 0ebH, 0efH, 0ecH, 0bfH, '|'
	DB	0fdH, 0feH, 0fbH, 0fcH, 0adH, 0aeH, 'YDEBFC', 0d0H, 0c0H, 'HTQ'
	DB	'RSXUVW', 08cH, 'I', 0cdH, 0ceH, 0cbH, 0cfH, 0ccH, 0e1H, 'j', 0ddH
	DB	0deH, 0dbH, 0a1H, 08dH, 08eH, 0dfH, 00H
	ORG $+7
$SG159152 DB	'819/500', 00H
cp_277_to_819 DB 00H, 01H, 02H, 03H, 09cH, 09H, 086H, 07fH, 097H, 08dH, 08eH
	DB	0bH, 0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 09dH, 085H, 08H
	DB	087H, 018H, 019H, 092H, 08fH, 01cH, 01dH, 01eH, 01fH, 080H, 081H
	DB	082H, 083H, 084H, 0aH, 017H, 01bH, 088H, 089H, 08aH, 08bH, 08cH
	DB	05H, 06H, 07H, 090H, 091H, 016H, 093H, 094H, 095H, 096H, 04H, 098H
	DB	099H, 09aH, 09bH, 014H, 015H, 09eH, 01aH, ' ', 0a0H, 0e2H, 0e4H
	DB	0e0H, 0e1H, 0e3H, '}', 0e7H, 0f1H, '#.<(+!&', 0e9H, 0eaH, 0ebH
	DB	0e8H, 0edH, 0eeH, 0efH, 0ecH, 0dfH, 0a4H, 0c5H, '*);^-/', 0c2H
	DB	0c4H, 0c0H, 0c1H, 0c3H, '$', 0c7H, 0d1H, 0f8H, ',%_>?', 0a6H, 0c9H
	DB	0caH, 0cbH, 0c8H, 0cdH, 0ceH, 0cfH, 0ccH, '`:', 0c6H, 0d8H, ''''
	DB	'="@abcdefghi', 0abH, 0bbH, 0f0H, 0fdH, 0feH, 0b1H, 0b0H, 'jkl'
	DB	'mnopqr', 0aaH, 0baH, '{', 0b8H, '[]', 0b5H, 0fcH, 'stuvwxyz', 0a1H
	DB	0bfH, 0d0H, 0ddH, 0deH, 0aeH, 0a2H, 0a3H, 0a5H, 0b7H, 0a9H, 0a7H
	DB	0b6H, 0bcH, 0bdH, 0beH, 0acH, '|', 0afH, 0a8H, 0b4H, 0d7H, 0e6H
	DB	'ABCDEFGHI', 0adH, 0f4H, 0f6H, 0f2H, 0f3H, 0f5H, 0e5H, 'JKLMNO'
	DB	'PQR', 0b9H, 0fbH, '~', 0f9H, 0faH, 0ffH, '\', 0f7H, 'STUVWXYZ'
	DB	0b2H, 0d4H, 0d6H, 0d2H, 0d3H, 0d5H, '0123456789', 0b3H, 0dbH, 0dcH
	DB	0d9H, 0daH, 09fH, 00H
	ORG $+7
$SG159154 DB	'850/273', 00H
cp_819_to_278 DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, 015H, 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, '?''', 01cH
	DB	01dH, 01eH, 01fH, '@O', 07fH, 'cglP}M]\Nk`Ka', 0f0H, 0f1H, 0f2H
	DB	0f3H, 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no', 0ecH, 0c1H
	DB	0c2H, 0c3H, 0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H
	DB	0d4H, 0d5H, 0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H
	DB	0e7H, 0e8H, 0e9H, 0b5H, 'q', 09fH, '_mQ', 081H, 082H, 083H, 084H
	DB	085H, 086H, 087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H, 096H
	DB	097H, 098H, 099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H
	DB	'C', 0bbH, 'G', 0dcH, 07H, 04H, 06H, 08H, 09H, 0aH, 014H, 017H
	DB	01aH, 01bH, ' !"#$%()*+,01345689:;>', 0ffH, 'A', 0aaH, 0b0H, 0b1H
	DB	'Z', 0b2H, 0ccH, 'J', 0bdH, 0b4H, 09aH, 08aH, 0baH, 0caH, 0afH
	DB	0bcH, 090H, 08fH, 0eaH, 0faH, 0beH, 0a0H, 0b6H, 0b3H, 09dH, 0daH
	DB	09bH, 08bH, 0b7H, 0b8H, 0b9H, 0abH, 'debf{[', 09eH, 'ht', 0e0H
	DB	'rsxuvw', 0acH, 'i', 0edH, 0eeH, 0ebH, 0efH, '|', 0bfH, 080H, 0fdH
	DB	0feH, 0fbH, 0fcH, 0adH, 0aeH, 'YDEBF', 0c0H, 0d0H, 09cH, 'HTyR'
	DB	'SXUVW', 08cH, 'I', 0cdH, 0ceH, 0cbH, 0cfH, 'j', 0e1H, 'p', 0ddH
	DB	0deH, 0dbH, 0a1H, 08dH, 08eH, 0dfH, 00H
	ORG $+7
$SG159157 DB	'1252/037v2', 00H
	ORG $+5
$SG159160 DB	'ISOANSI/037', 00H
$SG159161 DB	'user', 00H
	ORG $+7
cp_278_to_819 DB 00H, 01H, 02H, 03H, 080H, 09H, 081H, 07fH, 082H, 083H, 084H
	DB	0bH, 0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 085H, 0aH, 08H
	DB	086H, 018H, 019H, 087H, 088H, 01cH, 01dH, 01eH, 01fH, 089H, 08aH
	DB	08bH, 08cH, 08dH, 08eH, 017H, 01bH, 08fH, 090H, 091H, 092H, 093H
	DB	05H, 06H, 07H, 094H, 095H, 016H, 096H, 097H, 098H, 099H, 04H, 09aH
	DB	09bH, 09cH, 09dH, 014H, 015H, 09eH, 01aH, ' ', 0a0H, 0e2H, '{', 0e0H
	DB	0e1H, 0e3H, '}', 0e7H, 0f1H, 0a7H, '.<(+!&`', 0eaH, 0ebH, 0e8H
	DB	0edH, 0eeH, 0efH, 0ecH, 0dfH, 0a4H, 0c5H, '*);^-/', 0c2H, '#', 0c0H
	DB	0c1H, 0c3H, '$', 0c7H, 0d1H, 0f6H, ',%_>?', 0f8H, '\', 0caH, 0cbH
	DB	0c8H, 0cdH, 0ceH, 0cfH, 0ccH, 0e9H, ':', 0c4H, 0d6H, '''="', 0d8H
	DB	'abcdefghi', 0abH, 0bbH, 0f0H, 0fdH, 0feH, 0b1H, 0b0H, 'jklmno'
	DB	'pqr', 0aaH, 0baH, 0e6H, 0b8H, 0c6H, ']', 0b5H, 0fcH, 'stuvwxy'
	DB	'z', 0a1H, 0bfH, 0d0H, 0ddH, 0deH, 0aeH, 0a2H, 0a3H, 0a5H, 0b7H
	DB	0a9H, '[', 0b6H, 0bcH, 0bdH, 0beH, 0acH, '|', 0afH, 0a8H, 0b4H
	DB	0d7H, 0e4H, 'ABCDEFGHI', 0adH, 0f4H, 0a6H, 0f2H, 0f3H, 0f5H, 0e5H
	DB	'JKLMNOPQR', 0b9H, 0fbH, '~', 0f9H, 0faH, 0ffH, 0c9H, 0f7H, 'S'
	DB	'TUVWXYZ', 0b2H, 0d4H, '@', 0d2H, 0d3H, 0d5H, '0123456789', 0b3H
	DB	0dbH, 0dcH, 0d9H, 0daH, 09fH, 00H
	ORG $+7
$SG159158 DB	'1252/1047', 00H
	ORG $+14
cp_819_to_280 DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, '%', 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, '?''', 01cH
	DB	01dH, 01eH, 01fH, '@O', 07fH, 0b1H, '[lP}M]\Nk`Ka', 0f0H, 0f1H
	DB	0f2H, 0f3H, 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no', 0b5H
	DB	0c1H, 0c2H, 0c3H, 0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H
	DB	0d3H, 0d4H, 0d5H, 0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H
	DB	0e6H, 0e7H, 0e8H, 0e9H, 090H, 'HQ_m', 0ddH, 081H, 082H, 083H, 084H
	DB	085H, 086H, 087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H, 096H
	DB	097H, 098H, 099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H
	DB	'D', 0bbH, 'TX', 07H, ' !"#$', 015H, 06H, 017H, '()*+,', 09H, 0aH
	DB	01bH, '01', 01aH, '3456', 08H, '89:;', 04H, 014H, '>', 0ffH, 'A'
	DB	0aaH, 0b0H, '{', 09fH, 0b2H, 0cdH, '|', 0bdH, 0b4H, 09aH, 08aH
	DB	0baH, 0caH, 0afH, 0bcH, 'J', 08fH, 0eaH, 0faH, 0beH, 0a0H, 0b6H
	DB	0b3H, 09dH, 0daH, 09bH, 08bH, 0b7H, 0b8H, 0b9H, 0abH, 'debfcg', 09eH
	DB	'htqrsxuvw', 0acH, 'i', 0edH, 0eeH, 0ebH, 0efH, 0ecH, 0bfH, 080H
	DB	0fdH, 0feH, 0fbH, 0fcH, 0adH, 0aeH, 'Y', 0c0H, 'EBFCG', 09cH, 0e0H
	DB	0d0H, 'ZRS', 0a1H, 'UVW', 08cH, 'Ij', 0ceH, 0cbH, 0cfH, 0ccH, 0e1H
	DB	'py', 0deH, 0dbH, 0dcH, 08dH, 08eH, 0dfH, 00H
	ORG $+15
cp_280_to_819 DB 00H, 01H, 02H, 03H, 09cH, 09H, 086H, 07fH, 097H, 08dH, 08eH
	DB	0bH, 0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 09dH, 085H, 08H
	DB	087H, 018H, 019H, 092H, 08fH, 01cH, 01dH, 01eH, 01fH, 080H, 081H
	DB	082H, 083H, 084H, 0aH, 017H, 01bH, 088H, 089H, 08aH, 08bH, 08cH
	DB	05H, 06H, 07H, 090H, 091H, 016H, 093H, 094H, 095H, 096H, 04H, 098H
	DB	099H, 09aH, 09bH, 014H, 015H, 09eH, 01aH, ' ', 0a0H, 0e2H, 0e4H
	DB	'{', 0e1H, 0e3H, 0e5H, '\', 0f1H, 0b0H, '.<(+!&]', 0eaH, 0ebH, '}'
	DB	0edH, 0eeH, 0efH, '~', 0dfH, 0e9H, '$*);^-/', 0c2H, 0c4H, 0c0H
	DB	0c1H, 0c3H, 0c5H, 0c7H, 0d1H, 0f2H, ',%_>?', 0f8H, 0c9H, 0caH, 0cbH
	DB	0c8H, 0cdH, 0ceH, 0cfH, 0ccH, 0f9H, ':', 0a3H, 0a7H, '''="', 0d8H
	DB	'abcdefghi', 0abH, 0bbH, 0f0H, 0fdH, 0feH, 0b1H, '[jklmnopqr', 0aaH
	DB	0baH, 0e6H, 0b8H, 0c6H, 0a4H, 0b5H, 0ecH, 'stuvwxyz', 0a1H, 0bfH
	DB	0d0H, 0ddH, 0deH, 0aeH, 0a2H, '#', 0a5H, 0b7H, 0a9H, '@', 0b6H
	DB	0bcH, 0bdH, 0beH, 0acH, '|', 0afH, 0a8H, 0b4H, 0d7H, 0e0H, 'AB'
	DB	'CDEFGHI', 0adH, 0f4H, 0f6H, 0a6H, 0f3H, 0f5H, 0e8H, 'JKLMNOPQ'
	DB	'R', 0b9H, 0fbH, 0fcH, '`', 0faH, 0ffH, 0e7H, 0f7H, 'STUVWXYZ', 0b2H
	DB	0d4H, 0d6H, 0d2H, 0d3H, 0d5H, '0123456789', 0b3H, 0dbH, 0dcH, 0d9H
	DB	0daH, 09fH, 00H
	ORG $+15
cp_819_to_284 DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, 015H, 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, '?''', 01cH
	DB	01dH, 01eH, 01fH, '@', 0bbH, 07fH, 'i[lP}M]\Nk`Ka', 0f0H, 0f1H
	DB	0f2H, 0f3H, 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no|', 0c1H
	DB	0c2H, 0c3H, 0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H
	DB	0d4H, 0d5H, 0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H
	DB	0e7H, 0e8H, 0e9H, 'J', 0e0H, 'Z', 0baH, 'my', 081H, 082H, 083H
	DB	084H, 085H, 086H, 087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H
	DB	096H, 097H, 098H, 099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H
	DB	0a9H, 0c0H, 'O', 0d0H, 0bdH, 07H, 04H, 06H, 08H, 09H, 0aH, 014H
	DB	017H, 01aH, 01bH, ' !"#$%()*+,01345689:;>', 0ffH, 'A', 0aaH, 0b0H
	DB	0b1H, 09fH, 0b2H, 'I', 0b5H, 0a1H, 0b4H, 09aH, 08aH, '_', 0caH
	DB	0afH, 0bcH, 090H, 08fH, 0eaH, 0faH, 0beH, 0a0H, 0b6H, 0b3H, 09dH
	DB	0daH, 09bH, 08bH, 0b7H, 0b8H, 0b9H, 0abH, 'debfcg', 09eH, 'htq'
	DB	'rsxuvw', 0acH, '{', 0edH, 0eeH, 0ebH, 0efH, 0ecH, 0bfH, 080H, 0fdH
	DB	0feH, 0fbH, 0fcH, 0adH, 0aeH, 'YDEBFCG', 09cH, 'HTQRSXUVW', 08cH
	DB	'j', 0cdH, 0ceH, 0cbH, 0cfH, 0ccH, 0e1H, 'p', 0ddH, 0deH, 0dbH
	DB	0dcH, 08dH, 08eH, 0dfH, 00H
	ORG $+15
cp_284_to_819 DB 00H, 01H, 02H, 03H, 080H, 09H, 081H, 07fH, 082H, 083H, 084H
	DB	0bH, 0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 085H, 0aH, 08H
	DB	086H, 018H, 019H, 087H, 088H, 01cH, 01dH, 01eH, 01fH, 089H, 08aH
	DB	08bH, 08cH, 08dH, 08eH, 017H, 01bH, 08fH, 090H, 091H, 092H, 093H
	DB	05H, 06H, 07H, 094H, 095H, 016H, 096H, 097H, 098H, 099H, 04H, 09aH
	DB	09bH, 09cH, 09dH, 014H, 015H, 09eH, 01aH, ' ', 0a0H, 0e2H, 0e4H
	DB	0e0H, 0e1H, 0e3H, 0e5H, 0e7H, 0a6H, '[.<(+|&', 0e9H, 0eaH, 0ebH
	DB	0e8H, 0edH, 0eeH, 0efH, 0ecH, 0dfH, ']$*);', 0acH, '-/', 0c2H, 0c4H
	DB	0c0H, 0c1H, 0c3H, 0c5H, 0c7H, '#', 0f1H, ',%_>?', 0f8H, 0c9H, 0caH
	DB	0cbH, 0c8H, 0cdH, 0ceH, 0cfH, 0ccH, '`:', 0d1H, '@''="', 0d8H, 'a'
	DB	'bcdefghi', 0abH, 0bbH, 0f0H, 0fdH, 0feH, 0b1H, 0b0H, 'jklmnop'
	DB	'qr', 0aaH, 0baH, 0e6H, 0b8H, 0c6H, 0a4H, 0b5H, 0a8H, 'stuvwxy'
	DB	'z', 0a1H, 0bfH, 0d0H, 0ddH, 0deH, 0aeH, 0a2H, 0a3H, 0a5H, 0b7H
	DB	0a9H, 0a7H, 0b6H, 0bcH, 0bdH, 0beH, '^!', 0afH, '~', 0b4H, 0d7H
	DB	'{ABCDEFGHI', 0adH, 0f4H, 0f6H, 0f2H, 0f3H, 0f5H, '}JKLMNOPQR', 0b9H
	DB	0fbH, 0fcH, 0f9H, 0faH, 0ffH, '\', 0f7H, 'STUVWXYZ', 0b2H, 0d4H
	DB	0d6H, 0d2H, 0d3H, 0d5H, '0123456789', 0b3H, 0dbH, 0dcH, 0d9H, 0daH
	DB	09fH, 00H
	ORG $+15
cp_819_to_285 DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, 015H, 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, '?''', 01cH
	DB	01dH, 01eH, 01fH, '@Z', 07fH, '{JlP}M]\Nk`Ka', 0f0H, 0f1H, 0f2H
	DB	0f3H, 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no|', 0c1H, 0c2H
	DB	0c3H, 0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H, 0d4H
	DB	0d5H, 0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H, 0e7H
	DB	0e8H, 0e9H, 0b1H, 0e0H, 0bbH, 0baH, 'my', 081H, 082H, 083H, 084H
	DB	085H, 086H, 087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H, 096H
	DB	097H, 098H, 099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H
	DB	0c0H, 'O', 0d0H, 0bcH, 07H, 04H, 06H, 08H, 09H, 0aH, 014H, 017H
	DB	01aH, 01bH, ' !"#$%()*+,01345689:;>', 0ffH, 'A', 0aaH, 0b0H, '['
	DB	09fH, 0b2H, 'j', 0b5H, 0bdH, 0b4H, 09aH, 08aH, '_', 0caH, 0afH
	DB	0a1H, 090H, 08fH, 0eaH, 0faH, 0beH, 0a0H, 0b6H, 0b3H, 09dH, 0daH
	DB	09bH, 08bH, 0b7H, 0b8H, 0b9H, 0abH, 'debfcg', 09eH, 'htqrsxuvw'
	DB	0acH, 'i', 0edH, 0eeH, 0ebH, 0efH, 0ecH, 0bfH, 080H, 0fdH, 0feH
	DB	0fbH, 0fcH, 0adH, 0aeH, 'YDEBFCG', 09cH, 'HTQRSXUVW', 08cH, 'I'
	DB	0cdH, 0ceH, 0cbH, 0cfH, 0ccH, 0e1H, 'p', 0ddH, 0deH, 0dbH, 0dcH
	DB	08dH, 08eH, 0dfH, 00H
	ORG $+15
cp_285_to_819 DB 00H, 01H, 02H, 03H, 080H, 09H, 081H, 07fH, 082H, 083H, 084H
	DB	0bH, 0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 085H, 0aH, 08H
	DB	086H, 018H, 019H, 087H, 088H, 01cH, 01dH, 01eH, 01fH, 089H, 08aH
	DB	08bH, 08cH, 08dH, 08eH, 017H, 01bH, 08fH, 090H, 091H, 092H, 093H
	DB	05H, 06H, 07H, 094H, 095H, 016H, 096H, 097H, 098H, 099H, 04H, 09aH
	DB	09bH, 09cH, 09dH, 014H, 015H, 09eH, 01aH, ' ', 0a0H, 0e2H, 0e4H
	DB	0e0H, 0e1H, 0e3H, 0e5H, 0e7H, 0f1H, '$.<(+|&', 0e9H, 0eaH, 0ebH
	DB	0e8H, 0edH, 0eeH, 0efH, 0ecH, 0dfH, '!', 0a3H, '*);', 0acH, '-'
	DB	'/', 0c2H, 0c4H, 0c0H, 0c1H, 0c3H, 0c5H, 0c7H, 0d1H, 0a6H, ',%'
	DB	'_>?', 0f8H, 0c9H, 0caH, 0cbH, 0c8H, 0cdH, 0ceH, 0cfH, 0ccH, '`'
	DB	':#@''="', 0d8H, 'abcdefghi', 0abH, 0bbH, 0f0H, 0fdH, 0feH, 0b1H
	DB	0b0H, 'jklmnopqr', 0aaH, 0baH, 0e6H, 0b8H, 0c6H, 0a4H, 0b5H, 0afH
	DB	'stuvwxyz', 0a1H, 0bfH, 0d0H, 0ddH, 0deH, 0aeH, 0a2H, '[', 0a5H
	DB	0b7H, 0a9H, 0a7H, 0b6H, 0bcH, 0bdH, 0beH, '^]~', 0a8H, 0b4H, 0d7H
	DB	'{ABCDEFGHI', 0adH, 0f4H, 0f6H, 0f2H, 0f3H, 0f5H, '}JKLMNOPQR', 0b9H
	DB	0fbH, 0fcH, 0f9H, 0faH, 0ffH, '\', 0f7H, 'STUVWXYZ', 0b2H, 0d4H
	DB	0d6H, 0d2H, 0d3H, 0d5H, '0123456789', 0b3H, 0dbH, 0dcH, 0d9H, 0daH
	DB	09fH, 00H
	ORG $+15
cp_819_to_297 DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, 015H, 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, '?''', 01cH
	DB	01dH, 01eH, 01fH, '@O', 07fH, 0b1H, '[lP}M]\Nk`Ka', 0f0H, 0f1H
	DB	0f2H, 0f3H, 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~noD', 0c1H
	DB	0c2H, 0c3H, 0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H
	DB	0d4H, 0d5H, 0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H
	DB	0e7H, 0e8H, 0e9H, 090H, 'H', 0b5H, '_m', 0a0H, 081H, 082H, 083H
	DB	084H, 085H, 086H, 087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H
	DB	096H, 097H, 098H, 099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H
	DB	0a9H, 'Q', 0bbH, 'T', 0bdH, 07H, 04H, 06H, 08H, 09H, 0aH, 014H
	DB	017H, 01aH, 01bH, ' !"#$%()*+,01345689:;>', 0ffH, 'A', 0aaH, 0b0H
	DB	'{', 09fH, 0b2H, 0ddH, 'Z', 0a1H, 0b4H, 09aH, 08aH, 0baH, 0caH
	DB	0afH, 0bcH, 'J', 08fH, 0eaH, 0faH, 0beH, 'y', 0b6H, 0b3H, 09dH
	DB	0daH, 09bH, 08bH, 0b7H, 0b8H, 0b9H, 0abH, 'debfcg', 09eH, 'htq'
	DB	'rsxuvw', 0acH, 'i', 0edH, 0eeH, 0ebH, 0efH, 0ecH, 0bfH, 080H, 0fdH
	DB	0feH, 0fbH, 0fcH, 0adH, 0aeH, 'Y|EBFCG', 09cH, 0e0H, 0d0H, 0c0H
	DB	'RSXUVW', 08cH, 'I', 0cdH, 0ceH, 0cbH, 0cfH, 0ccH, 0e1H, 'pj', 0deH
	DB	0dbH, 0dcH, 08dH, 08eH, 0dfH, 00H
	ORG $+15
cp_297_to_819 DB 00H, 01H, 02H, 03H, 080H, 09H, 081H, 07fH, 082H, 083H, 084H
	DB	0bH, 0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 085H, 0aH, 08H
	DB	086H, 018H, 019H, 087H, 088H, 01cH, 01dH, 01eH, 01fH, 089H, 08aH
	DB	08bH, 08cH, 08dH, 08eH, 017H, 01bH, 08fH, 090H, 091H, 092H, 093H
	DB	05H, 06H, 07H, 094H, 095H, 016H, 096H, 097H, 098H, 099H, 04H, 09aH
	DB	09bH, 09cH, 09dH, 014H, 015H, 09eH, 01aH, ' ', 0a0H, 0e2H, 0e4H
	DB	'@', 0e1H, 0e3H, 0e5H, '\', 0f1H, 0b0H, '.<(+!&{', 0eaH, 0ebH, '}'
	DB	0edH, 0eeH, 0efH, 0ecH, 0dfH, 0a7H, '$*);^-/', 0c2H, 0c4H, 0c0H
	DB	0c1H, 0c3H, 0c5H, 0c7H, 0d1H, 0f9H, ',%_>?', 0f8H, 0c9H, 0caH, 0cbH
	DB	0c8H, 0cdH, 0ceH, 0cfH, 0ccH, 0b5H, ':', 0a3H, 0e0H, '''="', 0d8H
	DB	'abcdefghi', 0abH, 0bbH, 0f0H, 0fdH, 0feH, 0b1H, '[jklmnopqr', 0aaH
	DB	0baH, 0e6H, 0b8H, 0c6H, 0a4H, '`', 0a8H, 'stuvwxyz', 0a1H, 0bfH
	DB	0d0H, 0ddH, 0deH, 0aeH, 0a2H, '#', 0a5H, 0b7H, 0a9H, ']', 0b6H
	DB	0bcH, 0bdH, 0beH, 0acH, '|', 0afH, '~', 0b4H, 0d7H, 0e9H, 'ABC'
	DB	'DEFGHI', 0adH, 0f4H, 0f6H, 0f2H, 0f3H, 0f5H, 0e8H, 'JKLMNOPQR'
	DB	0b9H, 0fbH, 0fcH, 0a6H, 0faH, 0ffH, 0e7H, 0f7H, 'STUVWXYZ', 0b2H
	DB	0d4H, 0d6H, 0d2H, 0d3H, 0d5H, '0123456789', 0b3H, 0dbH, 0dcH, 0d9H
	DB	0daH, 09fH, 00H
	ORG $+15
cp_819_to_500 DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, 015H, 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, '?''', 01cH
	DB	01dH, 01eH, 01fH, '@O', 07fH, '{[lP}M]\Nk`Ka', 0f0H, 0f1H, 0f2H
	DB	0f3H, 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no|', 0c1H, 0c2H
	DB	0c3H, 0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H, 0d4H
	DB	0d5H, 0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H, 0e7H
	DB	0e8H, 0e9H, 'J', 0e0H, 'Z_my', 081H, 082H, 083H, 084H, 085H, 086H
	DB	087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H, 096H, 097H, 098H
	DB	099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H, 0c0H, 0bbH
	DB	0d0H, 0a1H, 07H, 04H, 06H, 08H, 09H, 0aH, 014H, 017H, 01aH, 01bH
	DB	' !"#$%()*+,01345689:;>', 0ffH, 'A', 0aaH, 0b0H, 0b1H, 09fH, 0b2H
	DB	'j', 0b5H, 0bdH, 0b4H, 09aH, 08aH, 0baH, 0caH, 0afH, 0bcH, 090H
	DB	08fH, 0eaH, 0faH, 0beH, 0a0H, 0b6H, 0b3H, 09dH, 0daH, 09bH, 08bH
	DB	0b7H, 0b8H, 0b9H, 0abH, 'debfcg', 09eH, 'htqrsxuvw', 0acH, 'i', 0edH
	DB	0eeH, 0ebH, 0efH, 0ecH, 0bfH, 080H, 0fdH, 0feH, 0fbH, 0fcH, 0adH
	DB	0aeH, 'YDEBFCG', 09cH, 'HTQRSXUVW', 08cH, 'I', 0cdH, 0ceH, 0cbH
	DB	0cfH, 0ccH, 0e1H, 'p', 0ddH, 0deH, 0dbH, 0dcH, 08dH, 08eH, 0dfH
	DB	00H
	ORG $+15
cp_500_to_819 DB 00H, 01H, 02H, 03H, 080H, 09H, 081H, 07fH, 082H, 083H, 084H
	DB	0bH, 0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 085H, 0aH, 08H
	DB	086H, 018H, 019H, 087H, 088H, 01cH, 01dH, 01eH, 01fH, 089H, 08aH
	DB	08bH, 08cH, 08dH, 08eH, 017H, 01bH, 08fH, 090H, 091H, 092H, 093H
	DB	05H, 06H, 07H, 094H, 095H, 016H, 096H, 097H, 098H, 099H, 04H, 09aH
	DB	09bH, 09cH, 09dH, 014H, 015H, 09eH, 01aH, ' ', 0a0H, 0e2H, 0e4H
	DB	0e0H, 0e1H, 0e3H, 0e5H, 0e7H, 0f1H, '[.<(+!&', 0e9H, 0eaH, 0ebH
	DB	0e8H, 0edH, 0eeH, 0efH, 0ecH, 0dfH, ']$*);^-/', 0c2H, 0c4H, 0c0H
	DB	0c1H, 0c3H, 0c5H, 0c7H, 0d1H, 0a6H, ',%_>?', 0f8H, 0c9H, 0caH, 0cbH
	DB	0c8H, 0cdH, 0ceH, 0cfH, 0ccH, '`:#@''="', 0d8H, 'abcdefghi', 0abH
	DB	0bbH, 0f0H, 0fdH, 0feH, 0b1H, 0b0H, 'jklmnopqr', 0aaH, 0baH, 0e6H
	DB	0b8H, 0c6H, 0a4H, 0b5H, '~stuvwxyz', 0a1H, 0bfH, 0d0H, 0ddH, 0deH
	DB	0aeH, 0a2H, 0a3H, 0a5H, 0b7H, 0a9H, 0a7H, 0b6H, 0bcH, 0bdH, 0beH
	DB	0acH, '|', 0afH, 0a8H, 0b4H, 0d7H, '{ABCDEFGHI', 0adH, 0f4H, 0f6H
	DB	0f2H, 0f3H, 0f5H, '}JKLMNOPQR', 0b9H, 0fbH, 0fcH, 0f9H, 0faH, 0ffH
	DB	'\', 0f7H, 'STUVWXYZ', 0b2H, 0d4H, 0d6H, 0d2H, 0d3H, 0d5H, '01'
	DB	'23456789', 0b3H, 0dbH, 0dcH, 0d9H, 0daH, 09fH, 00H
	ORG $+15
cp_437_to_1047 DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, '%', 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, 01cH, ''''
	DB	07H, 01dH, 01eH, 01fH, '@Z', 07fH, '{[lP}M]\Nk`Ka', 0f0H, 0f1H
	DB	0f2H, 0f3H, 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no|', 0c1H
	DB	0c2H, 0c3H, 0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H
	DB	0d4H, 0d5H, 0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H
	DB	0e7H, 0e8H, 0e9H, 0adH, 0e0H, 0bdH, '_my', 081H, 082H, 083H, 084H
	DB	085H, 086H, 087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H, 096H
	DB	097H, 098H, 099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H
	DB	0c0H, 'O', 0d0H, 0a1H, '?h', 0dcH, 'QBCDGHRSTWVXcgq', 09cH, 09eH
	DB	0cbH, 0ccH, 0cdH, 0dbH, 0ddH, 0dfH, 0ecH, 0fcH, 'J', 0b1H, 0b2H
	DB	'??EU', 0ceH, 0deH, 'Ii', 09aH, 09bH, 0abH, '?', 0b0H, 0b8H, 0b7H
	DB	0aaH, 08aH, 08bH, '???????????????????????????????????????????'
	DB	'??????Y???????????????', 08fH, '????', 0e1H, '?', 090H, '?', 0b3H
	DB	'??', 0eaH, '?A', 00H
	ORG $+15
cp_1047_to_437 DB 00H, 01H, 02H, 03H, 07H, 09H, 07H, 01cH, 07H, 07H, 07H, 0bH
	DB	0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 07H, 07H, 08H, 07H
	DB	018H, 019H, 07H, 07H, 01aH, 01dH, 01eH, 01fH, 07H, 07H, 07H, 07H
	DB	07H, 0aH, 017H, 01bH, 07H, 07H, 07H, 07H, 07H, 05H, 06H, 07H, 07H
	DB	07H, 016H, 07H, 07H, 07H, 07H, 04H, 07H, 07H, 07H, 07H, 014H, 015H
	DB	07H, 07fH, ' ', 0ffH, 083H, 084H, 085H, 0a0H, 07H, 086H, 087H, 0a4H
	DB	09bH, '.<(+|&', 082H, 088H, 089H, 08aH, 0a1H, 08cH, 08bH, 08dH
	DB	0e1H, '!$*);^-/', 07H, 08eH, 07H, 07H, 07H, 08fH, 080H, 0a5H, 07H
	DB	',%_>?', 07H, 090H, 07H, 07H, 07H, 07H, 07H, 07H, 07H, '`:#@'''
	DB	'="', 07H, 'abcdefghi', 0aeH, 0afH, 07H, 07H, 07H, 0f1H, 0f8H, 'j'
	DB	'klmnopqr', 0a6H, 0a7H, 091H, 07H, 092H, 07H, 07H, '~stuvwxyz', 0adH
	DB	0a8H, 07H, '[', 07H, 07H, 0aaH, 09cH, 09dH, 0faH, 07H, 07H, 07H
	DB	0acH, 0abH, 07H, 07H, 07H, 07H, ']', 07H, 07H, '{ABCDEFGHI', 07H
	DB	093H, 094H, 095H, 0a2H, 07H, '}JKLMNOPQR', 07H, 096H, 081H, 097H
	DB	0a3H, 098H, '\', 0f6H, 'STUVWXYZ', 0fdH, 07H, 099H, 07H, 07H, 07H
	DB	'0123456789', 07H, 07H, 09aH, 07H, 07H, 07H, 00H
	ORG $+15
cp_819_to_1047 DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, '%', 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, '?''', 01cH
	DB	01dH, 01eH, 01fH, '@Z', 07fH, '{[lP}M]\Nk`Ka', 0f0H, 0f1H, 0f2H
	DB	0f3H, 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no|', 0c1H, 0c2H
	DB	0c3H, 0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H, 0d4H
	DB	0d5H, 0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H, 0e7H
	DB	0e8H, 0e9H, 0adH, 0e0H, 0bdH, '_my', 081H, 082H, 083H, 084H, 085H
	DB	086H, 087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H, 096H, 097H
	DB	098H, 099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H, 0c0H
	DB	'O', 0d0H, 0a1H, 07H, ' !"#$', 015H, 06H, 017H, '()*+,', 09H, 0aH
	DB	01bH, '01', 01aH, '3456', 08H, '89:;', 04H, 014H, '>', 0ffH, 'A'
	DB	0aaH, 'J', 0b1H, 09fH, 0b2H, 'j', 0b5H, 0bbH, 0b4H, 09aH, 08aH
	DB	0b0H, 0caH, 0afH, 0bcH, 090H, 08fH, 0eaH, 0faH, 0beH, 0a0H, 0b6H
	DB	0b3H, 09dH, 0daH, 09bH, 08bH, 0b7H, 0b8H, 0b9H, 0abH, 'debfcg', 09eH
	DB	'htqrsxuvw', 0acH, 'i', 0edH, 0eeH, 0ebH, 0efH, 0ecH, 0bfH, 080H
	DB	0fdH, 0feH, 0fbH, 0fcH, 0baH, 0aeH, 'YDEBFCG', 09cH, 'HTQRSXUV'
	DB	'W', 08cH, 'I', 0cdH, 0ceH, 0cbH, 0cfH, 0ccH, 0e1H, 'p', 0ddH, 0deH
	DB	0dbH, 0dcH, 08dH, 08eH, 0dfH, 00H
	ORG $+15
cp_1047_to_819 DB 00H, 01H, 02H, 03H, 09cH, 09H, 086H, 07fH, 097H, 08dH, 08eH
	DB	0bH, 0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 09dH, 085H, 08H
	DB	087H, 018H, 019H, 092H, 08fH, 01cH, 01dH, 01eH, 01fH, 080H, 081H
	DB	082H, 083H, 084H, 0aH, 017H, 01bH, 088H, 089H, 08aH, 08bH, 08cH
	DB	05H, 06H, 07H, 090H, 091H, 016H, 093H, 094H, 095H, 096H, 04H, 098H
	DB	099H, 09aH, 09bH, 014H, 015H, 09eH, 01aH, ' ', 0a0H, 0e2H, 0e4H
	DB	0e0H, 0e1H, 0e3H, 0e5H, 0e7H, 0f1H, 0a2H, '.<(+|&', 0e9H, 0eaH
	DB	0ebH, 0e8H, 0edH, 0eeH, 0efH, 0ecH, 0dfH, '!$*);^-/', 0c2H, 0c4H
	DB	0c0H, 0c1H, 0c3H, 0c5H, 0c7H, 0d1H, 0a6H, ',%_>?', 0f8H, 0c9H, 0caH
	DB	0cbH, 0c8H, 0cdH, 0ceH, 0cfH, 0ccH, '`:#@''="', 0d8H, 'abcdefg'
	DB	'hi', 0abH, 0bbH, 0f0H, 0fdH, 0feH, 0b1H, 0b0H, 'jklmnopqr', 0aaH
	DB	0baH, 0e6H, 0b8H, 0c6H, 0a4H, 0b5H, '~stuvwxyz', 0a1H, 0bfH, 0d0H
	DB	'[', 0deH, 0aeH, 0acH, 0a3H, 0a5H, 0b7H, 0a9H, 0a7H, 0b6H, 0bcH
	DB	0bdH, 0beH, 0ddH, 0a8H, 0afH, ']', 0b4H, 0d7H, '{ABCDEFGHI', 0adH
	DB	0f4H, 0f6H, 0f2H, 0f3H, 0f5H, '}JKLMNOPQR', 0b9H, 0fbH, 0fcH, 0f9H
	DB	0faH, 0ffH, '\', 0f7H, 'STUVWXYZ', 0b2H, 0d4H, 0d6H, 0d2H, 0d3H
	DB	0d5H, '0123456789', 0b3H, 0dbH, 0dcH, 0d9H, 0daH, 09fH, 00H
	ORG $+15
cp_1252_to_1047 DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, '%', 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, '?''', 01cH
	DB	01dH, 01eH, 01fH, '@Z', 07fH, '{[lP}M]\Nk`Ka', 0f0H, 0f1H, 0f2H
	DB	0f3H, 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no|', 0c1H, 0c2H
	DB	0c3H, 0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H, 0d4H
	DB	0d5H, 0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H, 0e7H
	DB	0e8H, 0e9H, 0adH, 0e0H, 0bdH, '_my', 081H, 082H, 083H, 084H, 085H
	DB	086H, 087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H, 096H, 097H
	DB	098H, 099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H, 0c0H
	DB	'O', 0d0H, 0a1H, 07H, '????????????????????????????????A', 0aaH
	DB	'J', 0b1H, 09fH, 0b2H, 'j', 0b5H, 0bbH, 0b4H, 09aH, 08aH, 0b0H
	DB	0caH, 0afH, 0bcH, 090H, 08fH, 0eaH, 0faH, 0beH, 0a0H, 0b6H, 0b3H
	DB	09dH, 0daH, 09bH, 08bH, 0b7H, 0b8H, 0b9H, 0abH, 'debfcg', 09eH
	DB	'htqrsxuvw', 0acH, 'i', 0edH, 0eeH, 0ebH, 0efH, 0ecH, 0bfH, 080H
	DB	0fdH, 0feH, 0fbH, 0fcH, 0baH, 0aeH, 'YDEBFCG', 09cH, 'HTQRSXUV'
	DB	'W', 08cH, 'I', 0cdH, 0ceH, 0cbH, 0cfH, 0ccH, 0e1H, 'p', 0ddH, 0deH
	DB	0dbH, 0dcH, 08dH, 08eH, 0dfH, 00H
	ORG $+15
cp_1047_to_1252 DB 00H, 01H, 02H, 03H, 07H, 09H, 07H, 07fH, 07H, 07H, 07H
	DB	0bH, 0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 07H, 07H, 08H
	DB	07H, 018H, 019H, 07H, 07H, 01cH, 01dH, 01eH, 01fH, 07H, 07H, 07H
	DB	07H, 07H, 0aH, 017H, 01bH, 07H, 07H, 07H, 07H, 07H, 05H, 06H, 07H
	DB	07H, 07H, 016H, 07H, 07H, 07H, 07H, 04H, 07H, 07H, 07H, 07H, 014H
	DB	015H, 07H, 01aH, ' ', 0a0H, 0e2H, 0e4H, 0e0H, 0e1H, 0e3H, 0e5H
	DB	0e7H, 0f1H, 0a2H, '.<(+|&', 0e9H, 0eaH, 0ebH, 0e8H, 0edH, 0eeH
	DB	0efH, 0ecH, 0dfH, '!$*);^-/', 0c2H, 0c4H, 0c0H, 0c1H, 0c3H, 0c5H
	DB	0c7H, 0d1H, 0a6H, ',%_>?', 0f8H, 0c9H, 0caH, 0cbH, 0c8H, 0cdH, 0ceH
	DB	0cfH, 0ccH, '`:#@''="', 0d8H, 'abcdefghi', 0abH, 0bbH, 0f0H, 0fdH
	DB	0feH, 0b1H, 0b0H, 'jklmnopqr', 0aaH, 0baH, 0e6H, 0b8H, 0c6H, 0a4H
	DB	0b5H, '~stuvwxyz', 0a1H, 0bfH, 0d0H, '[', 0deH, 0aeH, 0acH, 0a3H
	DB	0a5H, 0b7H, 0a9H, 0a7H, 0b6H, 0bcH, 0bdH, 0beH, 0ddH, 0a8H, 0afH
	DB	']', 0b4H, 0d7H, '{ABCDEFGHI', 0adH, 0f4H, 0f6H, 0f2H, 0f3H, 0f5H
	DB	'}JKLMNOPQR', 0b9H, 0fbH, 0fcH, 0f9H, 0faH, 0ffH, '\', 0f7H, 'S'
	DB	'TUVWXYZ', 0b2H, 0d4H, 0d6H, 0d2H, 0d3H, 0d5H, '0123456789', 0b3H
	DB	0dbH, 0dcH, 0d9H, 0daH, 07H, 00H
	ORG $+15
cp_850_to_1047 DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, '%', 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, '?''', 01cH
	DB	01dH, 01eH, 01fH, '@Z', 07fH, '{[lP}M]\Nk`Ka', 0f0H, 0f1H, 0f2H
	DB	0f3H, 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no|', 0c1H, 0c2H
	DB	0c3H, 0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H, 0d4H
	DB	0d5H, 0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H, 0e7H
	DB	0e8H, 0e9H, 0adH, 0e0H, 0bdH, '_my', 081H, 082H, 083H, 084H, 085H
	DB	086H, 087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H, 096H, 097H
	DB	098H, 099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H, 0c0H
	DB	'O', 0d0H, 0a1H, 07H, 'h', 0dcH, 'QBCDGHRSTWVXcgq', 09cH, 09eH
	DB	0cbH, 0ccH, 0cdH, 0dbH, 0ddH, 0dfH, 0ecH, 0fcH, 'p', 0b1H, 080H
	DB	0bfH, '?EU', 0ceH, 0deH, 'Ii', 09aH, 09bH, 0abH, 0afH, 0b0H, 0b8H
	DB	0b7H, 0aaH, 08aH, 08bH, '?????ebd', 0b4H, '????J', 0b2H, '????'
	DB	'???Ff???????', 09fH, 08cH, 0acH, 'rst?uvw????jx?', 0eeH, 'Y', 0ebH
	DB	0edH, 0cfH, 0efH, 0a0H, 08eH, 0aeH, 0feH, 0fbH, 0fdH, 08dH, 0baH
	DB	0bcH, 0beH, 0caH, 08fH, '?', 0b9H, 0b6H, 0b5H, 0e1H, 09dH, 090H
	DB	0bbH, 0b3H, 0daH, 0faH, 0eaH, '?A', 00H
	ORG $+15
cp_1047_to_850 DB 00H, 01H, 02H, 03H, 07H, 09H, 07H, 07fH, 07H, 07H, 07H, 0bH
	DB	0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 07H, 07H, 08H, 07H
	DB	018H, 019H, 07H, 07H, 01cH, 01dH, 01eH, 01fH, 07H, 07H, 07H, 07H
	DB	07H, 0aH, 017H, 01bH, 07H, 07H, 07H, 07H, 07H, 05H, 06H, 07H, 07H
	DB	07H, 016H, 07H, 07H, 07H, 07H, 04H, 07H, 07H, 07H, 07H, 014H, 015H
	DB	07H, 01aH, ' ', 0ffH, 083H, 084H, 085H, 0a0H, 0c6H, 086H, 087H
	DB	0a4H, 0bdH, '.<(+|&', 082H, 088H, 089H, 08aH, 0a1H, 08cH, 08bH
	DB	08dH, 0e1H, '!$*);^-/', 0b6H, 08eH, 0b7H, 0b5H, 0c7H, 08fH, 080H
	DB	0a5H, 0ddH, ',%_>?', 09bH, 090H, 0d2H, 0d3H, 0d4H, 0d6H, 0d7H, 0d8H
	DB	0deH, '`:#@''="', 09dH, 'abcdefghi', 0aeH, 0afH, 0d0H, 0ecH, 0e7H
	DB	0f1H, 0f8H, 'jklmnopqr', 0a6H, 0a7H, 091H, 0f7H, 092H, 0cfH, 0e6H
	DB	'~stuvwxyz', 0adH, 0a8H, 0d1H, '[', 0e8H, 0a9H, 0aaH, 09cH, 0beH
	DB	0faH, 0b8H, 0f5H, 0f4H, 0acH, 0abH, 0f3H, 0edH, 0f9H, 0eeH, ']'
	DB	0efH, 09eH, '{ABCDEFGHI', 0f0H, 093H, 094H, 095H, 0a2H, 0e4H, '}'
	DB	'JKLMNOPQR', 0fbH, 096H, 081H, 097H, 0a3H, 098H, '\', 0f6H, 'S'
	DB	'TUVWXYZ', 0fdH, 0e2H, 099H, 0e3H, 0e0H, 0e5H, '0123456789', 0fcH
	DB	0eaH, 09aH, 0ebH, 0e9H, 07H, 00H
	ORG $+15
cp_819_to_037 DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, '%', 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, '?''', 01cH
	DB	01dH, 01eH, 01fH, '@Z', 07fH, '{[lP}M]\Nk`Ka', 0f0H, 0f1H, 0f2H
	DB	0f3H, 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no|', 0c1H, 0c2H
	DB	0c3H, 0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H, 0d4H
	DB	0d5H, 0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H, 0e7H
	DB	0e8H, 0e9H, 0baH, 0e0H, 0bbH, 0b0H, 'my', 081H, 082H, 083H, 084H
	DB	085H, 086H, 087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H, 096H
	DB	097H, 098H, 099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H
	DB	0c0H, 'O', 0d0H, 0a1H, 07H, ' !"#$', 015H, 06H, 017H, '()*+,', 09H
	DB	0aH, 01bH, '01', 01aH, '3456', 08H, '89:;', 04H, 014H, '>', 0ffH
	DB	'A', 0aaH, 'J', 0b1H, 09fH, 0b2H, 'j', 0b5H, 0bdH, 0b4H, 09aH, 08aH
	DB	'_', 0caH, 0afH, 0bcH, 090H, 08fH, 0eaH, 0faH, 0beH, 0a0H, 0b6H
	DB	0b3H, 09dH, 0daH, 09bH, 08bH, 0b7H, 0b8H, 0b9H, 0abH, 'debfcg', 09eH
	DB	'htqrsxuvw', 0acH, 'i', 0edH, 0eeH, 0ebH, 0efH, 0ecH, 0bfH, 080H
	DB	0fdH, 0feH, 0fbH, 0fcH, 0adH, 0aeH, 'YDEBFCG', 09cH, 'HTQRSXUV'
	DB	'W', 08cH, 'I', 0cdH, 0ceH, 0cbH, 0cfH, 0ccH, 0e1H, 'p', 0ddH, 0deH
	DB	0dbH, 0dcH, 08dH, 08eH, 0dfH, 00H
	ORG $+15
cp_037_to_819 DB 00H, 01H, 02H, 03H, 09cH, 09H, 086H, 07fH, 097H, 08dH, 08eH
	DB	0bH, 0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 09dH, 085H, 08H
	DB	087H, 018H, 019H, 092H, 08fH, 01cH, 01dH, 01eH, 01fH, 080H, 081H
	DB	082H, 083H, 084H, 0aH, 017H, 01bH, 088H, 089H, 08aH, 08bH, 08cH
	DB	05H, 06H, 07H, 090H, 091H, 016H, 093H, 094H, 095H, 096H, 04H, 098H
	DB	099H, 09aH, 09bH, 014H, 015H, 09eH, 01aH, ' ', 0a0H, 0e2H, 0e4H
	DB	0e0H, 0e1H, 0e3H, 0e5H, 0e7H, 0f1H, 0a2H, '.<(+|&', 0e9H, 0eaH
	DB	0ebH, 0e8H, 0edH, 0eeH, 0efH, 0ecH, 0dfH, '!$*);', 0acH, '-/', 0c2H
	DB	0c4H, 0c0H, 0c1H, 0c3H, 0c5H, 0c7H, 0d1H, 0a6H, ',%_>?', 0f8H, 0c9H
	DB	0caH, 0cbH, 0c8H, 0cdH, 0ceH, 0cfH, 0ccH, '`:#@''="', 0d8H, 'a'
	DB	'bcdefghi', 0abH, 0bbH, 0f0H, 0fdH, 0feH, 0b1H, 0b0H, 'jklmnop'
	DB	'qr', 0aaH, 0baH, 0e6H, 0b8H, 0c6H, 0a4H, 0b5H, '~stuvwxyz', 0a1H
	DB	0bfH, 0d0H, 0ddH, 0deH, 0aeH, '^', 0a3H, 0a5H, 0b7H, 0a9H, 0a7H
	DB	0b6H, 0bcH, 0bdH, 0beH, '[]', 0afH, 0a8H, 0b4H, 0d7H, '{ABCDEF'
	DB	'GHI', 0adH, 0f4H, 0f6H, 0f2H, 0f3H, 0f5H, '}JKLMNOPQR', 0b9H, 0fbH
	DB	0fcH, 0f9H, 0faH, 0ffH, '\', 0f7H, 'STUVWXYZ', 0b2H, 0d4H, 0d6H
	DB	0d2H, 0d3H, 0d5H, '0123456789', 0b3H, 0dbH, 0dcH, 0d9H, 0daH, 09fH
	DB	00H
	ORG $+15
cp_1252_to_037 DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, '%', 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, '?''', 01cH
	DB	01dH, 01eH, 01fH, '@Z', 07fH, '{[lP}M]\Nk`Ka', 0f0H, 0f1H, 0f2H
	DB	0f3H, 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no|', 0c1H, 0c2H
	DB	0c3H, 0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H, 0d4H
	DB	0d5H, 0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H, 0e7H
	DB	0e8H, 0e9H, 0baH, 0e0H, 0bbH, 0b0H, 'my', 081H, 082H, 083H, 084H
	DB	085H, 086H, 087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H, 096H
	DB	097H, 098H, 099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H
	DB	0c0H, 'O', 0d0H, 0a1H, 07H, '?!???????????', 09H, '?', 01bH, '0'
	DB	'????????????', 014H, '??A', 0aaH, 'J', 0b1H, 09fH, 0b2H, 'j', 0b5H
	DB	0bdH, 0b4H, 09aH, 08aH, '_', 0caH, 0afH, 0bcH, 090H, 08fH, 0eaH
	DB	0faH, 0beH, 0a0H, 0b6H, 0b3H, 09dH, 0daH, 09bH, 08bH, 0b7H, 0b8H
	DB	0b9H, 0abH, 'debfcg', 09eH, 'htqrsxuvw', 0acH, 'i', 0edH, 0eeH
	DB	0ebH, 0efH, 0ecH, 0bfH, 080H, 0fdH, 0feH, 0fbH, 0fcH, 0adH, 0aeH
	DB	'YDEBFCG', 09cH, 'HTQRSXUVW', 08cH, 'I', 0cdH, 0ceH, 0cbH, 0cfH
	DB	0ccH, 0e1H, 'p', 0ddH, 0deH, 0dbH, 0dcH, 08dH, 08eH, 0dfH, 00H
	ORG $+15
cp_037_to_1252 DB 00H, 01H, 02H, 03H, 07H, 09H, 07H, 07fH, 07H, 08dH, 07H
	DB	0bH, 0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 09dH, 07H, 08H
	DB	07H, 018H, 019H, 07H, 08fH, 01cH, 01dH, 01eH, 01fH, 07H, 081H, 07H
	DB	07H, 07H, 0aH, 017H, 01bH, 07H, 07H, 07H, 07H, 07H, 05H, 06H, 07H
	DB	090H, 07H, 016H, 07H, 07H, 07H, 07H, 04H, 07H, 07H, 07H, 07H, 014H
	DB	015H, 07H, 01aH, ' ', 0a0H, 0e2H, 0e4H, 0e0H, 0e1H, 0e3H, 0e5H
	DB	0e7H, 0f1H, 0a2H, '.<(+|&', 0e9H, 0eaH, 0ebH, 0e8H, 0edH, 0eeH
	DB	0efH, 0ecH, 0dfH, '!$*);', 0acH, '-/', 0c2H, 0c4H, 0c0H, 0c1H, 0c3H
	DB	0c5H, 0c7H, 0d1H, 0a6H, ',%_>?', 0f8H, 0c9H, 0caH, 0cbH, 0c8H, 0cdH
	DB	0ceH, 0cfH, 0ccH, '`:#@''="', 0d8H, 'abcdefghi', 0abH, 0bbH, 0f0H
	DB	0fdH, 0feH, 0b1H, 0b0H, 'jklmnopqr', 0aaH, 0baH, 0e6H, 0b8H, 0c6H
	DB	0a4H, 0b5H, '~stuvwxyz', 0a1H, 0bfH, 0d0H, 0ddH, 0deH, 0aeH, '^'
	DB	0a3H, 0a5H, 0b7H, 0a9H, 0a7H, 0b6H, 0bcH, 0bdH, 0beH, '[]', 0afH
	DB	0a8H, 0b4H, 0d7H, '{ABCDEFGHI', 0adH, 0f4H, 0f6H, 0f2H, 0f3H, 0f5H
	DB	'}JKLMNOPQR', 0b9H, 0fbH, 0fcH, 0f9H, 0faH, 0ffH, '\', 0f7H, 'S'
	DB	'TUVWXYZ', 0b2H, 0d4H, 0d6H, 0d2H, 0d3H, 0d5H, '0123456789', 0b3H
	DB	0dbH, 0dcH, 0d9H, 0daH, 07H, 00H
	ORG $+15
cp_819_to_037v2 DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, '%', 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, '?''', 01cH
	DB	01dH, 01eH, 01fH, '@Z', 07fH, '{[lP}M]\Nk`Ka', 0f0H, 0f1H, 0f2H
	DB	0f3H, 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no|', 0c1H, 0c2H
	DB	0c3H, 0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H, 0d4H
	DB	0d5H, 0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H, 0e7H
	DB	0e8H, 0e9H, 0adH, 0e0H, 0bdH, 0b0H, 'my', 081H, 082H, 083H, 084H
	DB	085H, 086H, 087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H, 096H
	DB	097H, 098H, 099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H
	DB	0c0H, 'O', 0d0H, 0a1H, 07H, ' !"#$', 015H, 06H, 017H, '()*+,', 09H
	DB	0aH, 01bH, '01', 01aH, '3456', 08H, '89:;', 04H, 014H, '>', 0ffH
	DB	'A', 0aaH, 'J', 0b1H, 09fH, 0b2H, 'j', 0b5H, 0bbH, 0b4H, 09aH, 08aH
	DB	'_', 0caH, 0afH, 0bcH, 090H, 08fH, 0eaH, 0faH, 0beH, 0a0H, 0b6H
	DB	0b3H, 09dH, 0daH, 09bH, 08bH, 0b7H, 0b8H, 0b9H, 0abH, 'debfcg', 09eH
	DB	'htqrsxuvw', 0acH, 'i', 0edH, 0eeH, 0ebH, 0efH, 0ecH, 0bfH, 080H
	DB	0fdH, 0feH, 0fbH, 0fcH, 0baH, 0aeH, 'YDEBFCG', 09cH, 'HTQRSXUV'
	DB	'W', 08cH, 'I', 0cdH, 0ceH, 0cbH, 0cfH, 0ccH, 0e1H, 'p', 0ddH, 0deH
	DB	0dbH, 0dcH, 08dH, 08eH, 0dfH, 00H
	ORG $+15
cp_037v2_to_819 DB 00H, 01H, 02H, 03H, 09cH, 09H, 086H, 07fH, 097H, 08dH, 08eH
	DB	0bH, 0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 09dH, 085H, 08H
	DB	087H, 018H, 019H, 092H, 08fH, 01cH, 01dH, 01eH, 01fH, 080H, 081H
	DB	082H, 083H, 084H, 0aH, 017H, 01bH, 088H, 089H, 08aH, 08bH, 08cH
	DB	05H, 06H, 07H, 090H, 091H, 016H, 093H, 094H, 095H, 096H, 04H, 098H
	DB	099H, 09aH, 09bH, 014H, 015H, 09eH, 01aH, ' ', 0a0H, 0e2H, 0e4H
	DB	0e0H, 0e1H, 0e3H, 0e5H, 0e7H, 0f1H, 0a2H, '.<(+|&', 0e9H, 0eaH
	DB	0ebH, 0e8H, 0edH, 0eeH, 0efH, 0ecH, 0dfH, '!$*);', 0acH, '-/', 0c2H
	DB	0c4H, 0c0H, 0c1H, 0c3H, 0c5H, 0c7H, 0d1H, 0a6H, ',%_>?', 0f8H, 0c9H
	DB	0caH, 0cbH, 0c8H, 0cdH, 0ceH, 0cfH, 0ccH, '`:#@''="', 0d8H, 'a'
	DB	'bcdefghi', 0abH, 0bbH, 0f0H, 0fdH, 0feH, 0b1H, 0b0H, 'jklmnop'
	DB	'qr', 0aaH, 0baH, 0e6H, 0b8H, 0c6H, 0a4H, 0b5H, '~stuvwxyz', 0a1H
	DB	0bfH, 0d0H, '[', 0deH, 0aeH, '^', 0a3H, 0a5H, 0b7H, 0a9H, 0a7H
	DB	0b6H, 0bcH, 0bdH, 0beH, 0ddH, 0a8H, 0afH, ']', 0b4H, 0d7H, '{A'
	DB	'BCDEFGHI', 0adH, 0f4H, 0f6H, 0f2H, 0f3H, 0f5H, '}JKLMNOPQR', 0b9H
	DB	0fbH, 0fcH, 0f9H, 0faH, 0ffH, '\', 0f7H, 'STUVWXYZ', 0b2H, 0d4H
	DB	0d6H, 0d2H, 0d3H, 0d5H, '0123456789', 0b3H, 0dbH, 0dcH, 0d9H, 0daH
	DB	09fH, 00H
	ORG $+15
cp_1252_to_037v2 DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, '%', 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, '?''', 01cH
	DB	01dH, 01eH, 01fH, '@Z', 07fH, '{[lP}M]\Nk`Ka', 0f0H, 0f1H, 0f2H
	DB	0f3H, 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no|', 0c1H, 0c2H
	DB	0c3H, 0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H, 0d4H
	DB	0d5H, 0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H, 0e7H
	DB	0e8H, 0e9H, 0adH, 0e0H, 0bdH, 0b0H, 'my', 081H, 082H, 083H, 084H
	DB	085H, 086H, 087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H, 096H
	DB	097H, 098H, 099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H
	DB	0c0H, 'O', 0d0H, 0a1H, 07H, '?!???????????', 09H, '?', 01bH, '0'
	DB	'????????????', 014H, '??A', 0aaH, 'J', 0b1H, 09fH, 0b2H, 'j', 0b5H
	DB	0bbH, 0b4H, 09aH, 08aH, '_', 0caH, 0afH, 0bcH, 090H, 08fH, 0eaH
	DB	0faH, 0beH, 0a0H, 0b6H, 0b3H, 09dH, 0daH, 09bH, 08bH, 0b7H, 0b8H
	DB	0b9H, 0abH, 'debfcg', 09eH, 'htqrsxuvw', 0acH, 'i', 0edH, 0eeH
	DB	0ebH, 0efH, 0ecH, 0bfH, 080H, 0fdH, 0feH, 0fbH, 0fcH, 0baH, 0aeH
	DB	'YDEBFCG', 09cH, 'HTQRSXUVW', 08cH, 'I', 0cdH, 0ceH, 0cbH, 0cfH
	DB	0ccH, 0e1H, 'p', 0ddH, 0deH, 0dbH, 0dcH, 08dH, 08eH, 0dfH, 00H
	ORG $+15
cp_037v2_to_1252 DB 00H, 01H, 02H, 03H, 07H, 09H, 07H, 07fH, 07H, 08dH, 07H
	DB	0bH, 0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 09dH, 07H, 08H
	DB	07H, 018H, 019H, 07H, 08fH, 01cH, 01dH, 01eH, 01fH, 07H, 081H, 07H
	DB	07H, 07H, 0aH, 017H, 01bH, 07H, 07H, 07H, 07H, 07H, 05H, 06H, 07H
	DB	090H, 07H, 016H, 07H, 07H, 07H, 07H, 04H, 07H, 07H, 07H, 07H, 014H
	DB	015H, 07H, 01aH, ' ', 0a0H, 0e2H, 0e4H, 0e0H, 0e1H, 0e3H, 0e5H
	DB	0e7H, 0f1H, 0a2H, '.<(+|&', 0e9H, 0eaH, 0ebH, 0e8H, 0edH, 0eeH
	DB	0efH, 0ecH, 0dfH, '!$*);', 0acH, '-/', 0c2H, 0c4H, 0c0H, 0c1H, 0c3H
	DB	0c5H, 0c7H, 0d1H, 0a6H, ',%_>?', 0f8H, 0c9H, 0caH, 0cbH, 0c8H, 0cdH
	DB	0ceH, 0cfH, 0ccH, '`:#@''="', 0d8H, 'abcdefghi', 0abH, 0bbH, 0f0H
	DB	0fdH, 0feH, 0b1H, 0b0H, 'jklmnopqr', 0aaH, 0baH, 0e6H, 0b8H, 0c6H
	DB	0a4H, 0b5H, '~stuvwxyz', 0a1H, 0bfH, 0d0H, '[', 0deH, 0aeH, '^'
	DB	0a3H, 0a5H, 0b7H, 0a9H, 0a7H, 0b6H, 0bcH, 0bdH, 0beH, 0ddH, 0a8H
	DB	0afH, ']', 0b4H, 0d7H, '{ABCDEFGHI', 0adH, 0f4H, 0f6H, 0f2H, 0f3H
	DB	0f5H, '}JKLMNOPQR', 0b9H, 0fbH, 0fcH, 0f9H, 0faH, 0ffH, '\', 0f7H
	DB	'STUVWXYZ', 0b2H, 0d4H, 0d6H, 0d2H, 0d3H, 0d5H, '0123456789', 0b3H
	DB	0dbH, 0dcH, 0d9H, 0daH, 07H, 00H
	ORG $+15
cp_1252_to_1140 DB 00H, 01H, 02H, 03H, '7-./', 016H, 05H, '%', 0bH, 0cH, 0dH
	DB	0eH, 0fH, 010H, 011H, 012H, 013H, '<=2&', 018H, 019H, '?''', 01cH
	DB	01dH, 01eH, 01fH, '@Z', 07fH, '{[lP}M]\Nk`Ka', 0f0H, 0f1H, 0f2H
	DB	0f3H, 0f4H, 0f5H, 0f6H, 0f7H, 0f8H, 0f9H, 'z^L~no|', 0c1H, 0c2H
	DB	0c3H, 0c4H, 0c5H, 0c6H, 0c7H, 0c8H, 0c9H, 0d1H, 0d2H, 0d3H, 0d4H
	DB	0d5H, 0d6H, 0d7H, 0d8H, 0d9H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H, 0e7H
	DB	0e8H, 0e9H, 0baH, 0e0H, 0bbH, 0b0H, 'my', 081H, 082H, 083H, 084H
	DB	085H, 086H, 087H, 088H, 089H, 091H, 092H, 093H, 094H, 095H, 096H
	DB	097H, 098H, 099H, 0a2H, 0a3H, 0a4H, 0a5H, 0a6H, 0a7H, 0a8H, 0a9H
	DB	0c0H, 'O', 0d0H, 0a1H, 07H, 09fH, '!"#$', 015H, 06H, 017H, '()'
	DB	'*+,', 09H, 0aH, 01bH, '01', 01aH, '3456', 08H, '89:;', 04H, 014H
	DB	'>', 0ffH, 'A', 0aaH, 'J', 0b1H, ' ', 0b2H, 'j', 0b5H, 0bdH, 0b4H
	DB	09aH, 08aH, '_', 0caH, 0afH, 0bcH, 090H, 08fH, 0eaH, 0faH, 0beH
	DB	0a0H, 0b6H, 0b3H, 09dH, 0daH, 09bH, 08bH, 0b7H, 0b8H, 0b9H, 0abH
	DB	'debfcg', 09eH, 'htqrsxuvw', 0acH, 'i', 0edH, 0eeH, 0ebH, 0efH
	DB	0ecH, 0bfH, 080H, 0fdH, 0feH, 0fbH, 0fcH, 0adH, 0aeH, 'YDEBFCG'
	DB	09cH, 'HTQRSXUVW', 08cH, 'I', 0cdH, 0ceH, 0cbH, 0cfH, 0ccH, 0e1H
	DB	'p', 0ddH, 0deH, 0dbH, 0dcH, 08dH, 08eH, 0dfH, 00H
	ORG $+15
cp_1140_to_1252 DB 00H, 01H, 02H, 03H, 09cH, 09H, 086H, 07fH, 097H, 08dH, 08eH
	DB	0bH, 0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 09dH, 085H, 08H
	DB	087H, 018H, 019H, 092H, 08fH, 01cH, 01dH, 01eH, 01fH, 0a4H, 081H
	DB	082H, 083H, 084H, 0aH, 017H, 01bH, 088H, 089H, 08aH, 08bH, 08cH
	DB	05H, 06H, 07H, 090H, 091H, 016H, 093H, 094H, 095H, 096H, 04H, 098H
	DB	099H, 09aH, 09bH, 014H, 015H, 09eH, 01aH, ' ', 0a0H, 0e2H, 0e4H
	DB	0e0H, 0e1H, 0e3H, 0e5H, 0e7H, 0f1H, 0a2H, '.<(+|&', 0e9H, 0eaH
	DB	0ebH, 0e8H, 0edH, 0eeH, 0efH, 0ecH, 0dfH, '!$*);', 0acH, '-/', 0c2H
	DB	0c4H, 0c0H, 0c1H, 0c3H, 0c5H, 0c7H, 0d1H, 0a6H, ',%_>?', 0f8H, 0c9H
	DB	0caH, 0cbH, 0c8H, 0cdH, 0ceH, 0cfH, 0ccH, '`:#@''="', 0d8H, 'a'
	DB	'bcdefghi', 0abH, 0bbH, 0f0H, 0fdH, 0feH, 0b1H, 0b0H, 'jklmnop'
	DB	'qr', 0aaH, 0baH, 0e6H, 0b8H, 0c6H, 080H, 0b5H, '~stuvwxyz', 0a1H
	DB	0bfH, 0d0H, 0ddH, 0deH, 0aeH, '^', 0a3H, 0a5H, 0b7H, 0a9H, 0a7H
	DB	0b6H, 0bcH, 0bdH, 0beH, '[]', 0afH, 0a8H, 0b4H, 0d7H, '{ABCDEF'
	DB	'GHI', 0adH, 0f4H, 0f6H, 0f2H, 0f3H, 0f5H, '}JKLMNOPQR', 0b9H, 0fbH
	DB	0fcH, 0f9H, 0faH, 0ffH, '\', 0f7H, 'STUVWXYZ', 0b2H, 0d4H, 0d6H
	DB	0d2H, 0d3H, 0d5H, '0123456789', 0b3H, 0dbH, 0dcH, 0d9H, 0daH, 09fH
	DB	00H
	ORG $+15
cpconv	DQ	FLAT:$SG159139
	DQ	FLAT:ascii_to_ebcdic
	DQ	FLAT:ebcdic_to_ascii
	DQ	FLAT:$SG159140
	DQ	FLAT:cp_437_to_037
	DQ	FLAT:cp_037_to_437
	DQ	FLAT:$SG159141
	DQ	FLAT:cp_437_to_500
	DQ	FLAT:cp_500_to_437
	DQ	FLAT:$SG159142
	DQ	FLAT:cp_437_to_1047
	DQ	FLAT:cp_1047_to_437
	DQ	FLAT:$SG159143
	DQ	FLAT:cp_819_to_037
	DQ	FLAT:cp_037_to_819
	DQ	FLAT:$SG159144
	DQ	FLAT:cp_819_to_037v2
	DQ	FLAT:cp_037v2_to_819
	DQ	FLAT:$SG159145
	DQ	FLAT:cp_819_to_273
	DQ	FLAT:cp_273_to_819
	DQ	FLAT:$SG159146
	DQ	FLAT:cp_819_to_277
	DQ	FLAT:cp_277_to_819
	DQ	FLAT:$SG159147
	DQ	FLAT:cp_819_to_278
	DQ	FLAT:cp_278_to_819
	DQ	FLAT:$SG159148
	DQ	FLAT:cp_819_to_280
	DQ	FLAT:cp_280_to_819
	DQ	FLAT:$SG159149
	DQ	FLAT:cp_819_to_284
	DQ	FLAT:cp_284_to_819
	DQ	FLAT:$SG159150
	DQ	FLAT:cp_819_to_285
	DQ	FLAT:cp_285_to_819
	DQ	FLAT:$SG159151
	DQ	FLAT:cp_819_to_297
	DQ	FLAT:cp_297_to_819
	DQ	FLAT:$SG159152
	DQ	FLAT:cp_819_to_500
	DQ	FLAT:cp_500_to_819
	DQ	FLAT:$SG159153
	DQ	FLAT:cp_819_to_1047
	DQ	FLAT:cp_1047_to_819
	DQ	FLAT:$SG159154
	DQ	FLAT:cp_850_to_273
	DQ	FLAT:cp_273_to_850
	DQ	FLAT:$SG159155
	DQ	FLAT:cp_850_to_1047
	DQ	FLAT:cp_1047_to_850
	DQ	FLAT:$SG159156
	DQ	FLAT:cp_1252_to_037
	DQ	FLAT:cp_037_to_1252
	DQ	FLAT:$SG159157
	DQ	FLAT:cp_1252_to_037v2
	DQ	FLAT:cp_037v2_to_1252
	DQ	FLAT:$SG159158
	DQ	FLAT:cp_1252_to_1047
	DQ	FLAT:cp_1047_to_1252
	DQ	FLAT:$SG159159
	DQ	FLAT:cp_1252_to_1140
	DQ	FLAT:cp_1140_to_1252
	DQ	FLAT:$SG159160
	DQ	FLAT:ind_file_a_to_e
	DQ	FLAT:ind_file_e_to_a
	DQ	FLAT:$SG159161
	DQ	FLAT:user_h_to_g
	DQ	FLAT:user_g_to_h
	DQ	0000000000000000H
	DQ	FLAT:ascii_to_ebcdic
	DQ	FLAT:ebcdic_to_ascii
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
$SG159142 DB	'437/1047', 00H
	ORG $+7
$SG159153 DB	'819/1047', 00H
	ORG $+7
$SG159155 DB	'850/1047', 00H
	ORG $+7
$SG159156 DB	'1252/037', 00H
	ORG $+7
$SG159159 DB	'1252/1140', 00H
_DATA	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	query_codepage
PUBLIC	valid_codepage_name
PUBLIC	set_codepage
PUBLIC	set_codepage_no_msgs
PUBLIC	update_codepage
PUBLIC	host_to_guest
PUBLIC	guest_to_host
PUBLIC	h2g_tab
PUBLIC	g2h_tab
PUBLIC	buf_guest_to_host
PUBLIC	str_guest_to_host
PUBLIC	buf_host_to_guest
PUBLIC	str_host_to_guest
PUBLIC	prt_guest_to_host
PUBLIC	prt_host_to_guest
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp_isprint:PROC
EXTRN	__imp__errno:PROC
EXTRN	strchr:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_fopen:PROC
EXTRN	__imp_fread:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	get_symbol:PROC
EXTRN	strlcpy:PROC
EXTRN	idx_snprintf:PROC
EXTRN	w32_strerror:PROC
EXTRN	strtok_r:PROC
EXTRN	w32_fwrite:PROC
EXTRN	w32_snprintf:PROC
EXTRN	w32_fclose:PROC
EXTRN	fwritemsg:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
user_h_to_g_filled DD 01H DUP (?)
user_g_to_h_filled DD 01H DUP (?)
user_in_use DD	01H DUP (?)
$SG159582 DB	01H DUP (?)
	ALIGN	4

$SG159631 DB	01H DUP (?)
	ALIGN	4

$SG159633 DB	01H DUP (?)
	ALIGN	4

$SG159634 DB	01H DUP (?)
	ALIGN	4

$SG159636 DB	01H DUP (?)
	ALIGN	4

$SG159637 DB	01H DUP (?)
	ALIGN	4

$SG159639 DB	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sscanf
pdata	ENDS
pdata	SEGMENT
$pdata$strcaseabbrev DD imagerel strcaseabbrev
	DD	imagerel strcaseabbrev+320
	DD	imagerel $unwind$strcaseabbrev
$pdata$valid_codepage_name DD imagerel $LN7
	DD	imagerel $LN7+84
	DD	imagerel $unwind$valid_codepage_name
$pdata$set_codepage DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$set_codepage
$pdata$set_codepage_no_msgs DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$set_codepage_no_msgs
$pdata$update_codepage DD imagerel $LN163
	DD	imagerel $LN163+10065
	DD	imagerel $unwind$update_codepage
$pdata$buf_guest_to_host DD imagerel $LN6
	DD	imagerel $LN6+91
	DD	imagerel $unwind$buf_guest_to_host
$pdata$str_guest_to_host DD imagerel $LN6
	DD	imagerel $LN6+104
	DD	imagerel $unwind$str_guest_to_host
$pdata$buf_host_to_guest DD imagerel $LN6
	DD	imagerel $LN6+91
	DD	imagerel $unwind$buf_host_to_guest
$pdata$str_host_to_guest DD imagerel $LN9
	DD	imagerel $LN9+159
	DD	imagerel $unwind$str_host_to_guest
$pdata$prt_guest_to_host DD imagerel $LN7
	DD	imagerel $LN7+135
	DD	imagerel $unwind$prt_guest_to_host
$pdata$prt_host_to_guest DD imagerel $LN11
	DD	imagerel $LN11+219
	DD	imagerel $unwind$prt_host_to_guest
$pdata$import_file DD imagerel import_file
	DD	imagerel import_file+278
	DD	imagerel $unwind$import_file
$pdata$export_file DD imagerel export_file
	DD	imagerel export_file+204
	DD	imagerel $unwind$export_file
$pdata$imp_exp_error DD imagerel imp_exp_error
	DD	imagerel imp_exp_error+433
	DD	imagerel $unwind$imp_exp_error
$pdata$set_codepage_internal DD imagerel set_codepage_internal
	DD	imagerel set_codepage_internal+564
	DD	imagerel $unwind$set_codepage_internal
pdata	ENDS
_DATA	SEGMENT
	ORG $+6
codepage_conv DQ FLAT:cpconv
$SG159188 DB	'HERCULES_CP', 00H
$SG159193 DB	'W', 00H
	ORG $+2
$SG159189 DB	'default', 00H
$SG159191 DB	'user', 00H
	ORG $+3
$SG159194 DB	'HHC01477%s Codepage user is not available; default selec'
	DB	'ted', 0aH, 00H
	ORG $+3
$SG159195 DB	'set_codepage_internal', 00H
	ORG $+2
$SG159196 DB	'codepage.c', 00H
	ORG $+1
$SG159205 DB	'I', 00H
	ORG $+2
$SG159197 DB	'default', 00H
$SG159199 DB	'user', 00H
	ORG $+3
$SG159204 DB	'internal', 00H
	ORG $+3
$SG159210 DB	'E', 00H
	ORG $+2
$SG159206 DB	'HHC01474%s Using %s codepage conversion table %s', 0aH, 00H
	ORG $+2
$SG159315 DB	',', 00H
	ORG $+2
$SG159207 DB	'set_codepage_internal', 00H
	ORG $+2
$SG159208 DB	'codepage.c', 00H
	ORG $+1
$SG159316 DB	',', 00H
	ORG $+2
$SG159211 DB	'HHC01475%s Codepage conversion table %s is not defined', 0aH
	DB	00H
$SG159212 DB	'set_codepage_internal', 00H
	ORG $+2
$SG159213 DB	'codepage.c', 00H
	ORG $+1
$SG159310 DB	'alter', 00H
	ORG $+2
$SG159320 DB	'%x%c', 00H
	ORG $+3
$SG159326 DB	'user', 00H
	ORG $+3
$SG159327 DB	'alter', 00H
	ORG $+2
$SG159328 DB	'E', 00H
	ORG $+2
$SG159329 DB	'HHC01489%s Codepage: Cannot %s; user table in use', 0aH, 00H
	ORG $+1
$SG159336 DB	'g2h', 00H
$SG159330 DB	'update_codepage', 00H
$SG159331 DB	'codepage.c', 00H
	ORG $+1
$SG159335 DB	'ebcdic', 00H
	ORG $+1
$SG159339 DB	'I', 00H
	ORG $+2
$SG159337 DB	'ebcdic/g2h', 00H
	ORG $+1
$SG159343 DB	'I', 00H
	ORG $+2
$SG159338 DB	'Altering', 00H
	ORG $+3
$SG159350 DB	'ascii', 00H
	ORG $+2
$SG159351 DB	'h2g', 00H
$SG159340 DB	'HHC01487%s Codepage: %s user table %s', 0aH, 00H
	ORG $+1
$SG159341 DB	'update_codepage', 00H
$SG159342 DB	'codepage.c', 00H
	ORG $+1
$SG159354 DB	'I', 00H
	ORG $+2
$SG159344 DB	'HHC01488%s Codepage: Pos[%2.2X] was %2.2X is %2.2X', 0aH
	DB	00H
$SG159358 DB	'I', 00H
	ORG $+2
$SG159345 DB	'update_codepage', 00H
$SG159346 DB	'codepage.c', 00H
	ORG $+1
$SG159362 DB	'E', 00H
	ORG $+2
$SG159352 DB	'ascii/h2g', 00H
	ORG $+2
$SG159371 DB	'I', 00H
	ORG $+2
$SG159353 DB	'Altering', 00H
	ORG $+3
$SG159376 DB	'I', 00H
	ORG $+2
$SG159355 DB	'HHC01487%s Codepage: %s user table %s', 0aH, 00H
	ORG $+1
$SG159356 DB	'update_codepage', 00H
$SG159357 DB	'codepage.c', 00H
	ORG $+1
$SG159383 DB	'I', 00H
	ORG $+2
$SG159359 DB	'HHC01488%s Codepage: Pos[%2.2X] was %2.2X is %2.2X', 0aH
	DB	00H
$SG159388 DB	'I', 00H
	ORG $+2
$SG159360 DB	'update_codepage', 00H
$SG159361 DB	'codepage.c', 00H
	ORG $+1
$SG159394 DB	'I', 00H
	ORG $+2
$SG159363 DB	'HHC17000%s Missing or invalid argument(s)', 0aH, 00H
	ORG $+1
$SG159407 DB	'g2h', 00H
$SG159364 DB	'update_codepage', 00H
$SG159365 DB	'codepage.c', 00H
	ORG $+1
$SG159368 DB	'test', 00H
	ORG $+3
$SG159400 DB	'export', 00H
	ORG $+1
$SG159408 DB	'h2g', 00H
$SG159369 DB	'ebcdic/g2h vs. ascii/h2g', 00H
	ORG $+3
$SG159405 DB	'ebcdic', 00H
	ORG $+1
$SG159412 DB	'g2h', 00H
$SG159370 DB	'Testing', 00H
$SG159372 DB	'HHC01487%s Codepage: %s user table %s', 0aH, 00H
	ORG $+1
$SG159373 DB	'update_codepage', 00H
$SG159374 DB	'codepage.c', 00H
	ORG $+5
$SG159378 DB	'update_codepage', 00H
$SG159382 DB	'Testing', 00H
$SG159377 DB	'HHC01491%s Codepage: g2h pos[%2.2X] = %2.2X; h2g pos[%2.'
	DB	'2X] = %2.2X', 0aH, 00H
	ORG $+3
$SG159379 DB	'codepage.c', 00H
	ORG $+1
$SG159413 DB	'h2g', 00H
$SG159381 DB	'ascii/h2g vs. ebcdic/g2h', 00H
	ORG $+3
$SG159406 DB	'ascii', 00H
	ORG $+2
$SG159410 DB	'ebcdic', 00H
	ORG $+1
$SG159418 DB	'g2h', 00H
$SG159384 DB	'HHC01487%s Codepage: %s user table %s', 0aH, 00H
	ORG $+1
$SG159385 DB	'update_codepage', 00H
$SG159386 DB	'codepage.c', 00H
	ORG $+5
$SG159389 DB	'HHC01492%s Codepage: h2g pos[%2.2X] = %2.2X; g2h pos[%2.'
	DB	'2X] = %2.2X', 0aH, 00H
	ORG $+3
$SG159390 DB	'update_codepage', 00H
$SG159391 DB	'codepage.c', 00H
	ORG $+1
$SG159421 DB	'g2h', 00H
$SG159395 DB	'HHC01493%s Codepage: Tables are transparent', 0aH, 00H
	ORG $+3
$SG159396 DB	'update_codepage', 00H
$SG159397 DB	'codepage.c', 00H
	ORG $+1
$SG159411 DB	'ascii', 00H
	ORG $+2
$SG159417 DB	'ebcdic', 00H
	ORG $+1
$SG159420 DB	'ebcdic', 00H
	ORG $+1
$SG159424 DB	'E', 00H
	ORG $+2
$SG159423 DB	'ebcdic/g2h', 00H
	ORG $+1
$SG159434 DB	'to', 00H
	ORG $+1
$SG159425 DB	'HHC01483%s Codepage: user %s table is empty', 0aH, 00H
	ORG $+3
$SG159426 DB	'update_codepage', 00H
$SG159427 DB	'codepage.c', 00H
	ORG $+1
$SG159437 DB	'I', 00H
	ORG $+2
$SG159432 DB	'ebcdic/g2h', 00H
	ORG $+1
$SG159445 DB	'h2g', 00H
$SG159433 DB	'exporting', 00H
	ORG $+2
$SG159448 DB	'h2g', 00H
$SG159435 DB	'ebcdic/g2h', 00H
	ORG $+1
$SG159451 DB	'E', 00H
	ORG $+2
$SG159436 DB	'Exported', 00H
	ORG $+3
$SG159444 DB	'ascii', 00H
	ORG $+2
$SG159461 DB	'to', 00H
	ORG $+1
$SG159438 DB	'HHC01490%s Codepage: %s user table %s %s file %s', 0aH, 00H
	ORG $+2
$SG159464 DB	'I', 00H
	ORG $+2
$SG159439 DB	'update_codepage', 00H
$SG159440 DB	'codepage.c', 00H
	ORG $+1
$SG159447 DB	'ascii', 00H
	ORG $+2
$SG159468 DB	'E', 00H
	ORG $+2
$SG159450 DB	'ascii/h2g', 00H
	ORG $+2
$SG159474 DB	'import', 00H
	ORG $+1
$SG159481 DB	'g2h', 00H
$SG159452 DB	'HHC01483%s Codepage: user %s table is empty', 0aH, 00H
	ORG $+3
$SG159453 DB	'update_codepage', 00H
$SG159454 DB	'codepage.c', 00H
	ORG $+1
$SG159482 DB	'h2g', 00H
$SG159459 DB	'ascii/h2g', 00H
	ORG $+2
$SG159479 DB	'ebcdic', 00H
	ORG $+1
$SG159486 DB	'g2h', 00H
$SG159460 DB	'exporting', 00H
	ORG $+2
$SG159484 DB	'ebcdic', 00H
	ORG $+1
$SG159487 DB	'h2g', 00H
$SG159462 DB	'ascii/h2g', 00H
	ORG $+2
$SG159492 DB	'ebcdic', 00H
	ORG $+1
$SG159493 DB	'g2h', 00H
$SG159463 DB	'Emported', 00H
	ORG $+3
$SG159480 DB	'ascii', 00H
	ORG $+2
$SG159495 DB	'ebcdic', 00H
	ORG $+1
$SG159496 DB	'g2h', 00H
$SG159465 DB	'HHC01490%s Codepage: %s user table %s %s file %s', 0aH, 00H
	ORG $+2
$SG159504 DB	'I', 00H
	ORG $+2
$SG159466 DB	'update_codepage', 00H
$SG159467 DB	'codepage.c', 00H
	ORG $+1
$SG159514 DB	'h2g', 00H
$SG159469 DB	'HHC17000%s Missing or invalid argument(s)', 0aH, 00H
	ORG $+1
$SG159517 DB	'h2g', 00H
$SG159470 DB	'update_codepage', 00H
$SG159471 DB	'codepage.c', 00H
	ORG $+1
$SG159485 DB	'ascii', 00H
	ORG $+2
$SG159488 DB	'user', 00H
	ORG $+3
$SG159501 DB	'from', 00H
	ORG $+3
$SG159513 DB	'ascii', 00H
	ORG $+2
$SG159525 DB	'I', 00H
	ORG $+2
$SG159502 DB	'ebcdic/g2h', 00H
	ORG $+1
$SG159537 DB	'E', 00H
	ORG $+2
$SG159503 DB	'Imported', 00H
	ORG $+3
$SG159516 DB	'ascii', 00H
	ORG $+2
$SG159536 DB	'import', 00H
	ORG $+1
$SG159541 DB	'E', 00H
	ORG $+2
$SG159505 DB	'HHC01490%s Codepage: %s user table %s %s file %s', 0aH, 00H
	ORG $+2
$SG159552 DB	'E', 00H
	ORG $+2
$SG159506 DB	'update_codepage', 00H
$SG159507 DB	'codepage.c', 00H
	ORG $+1
$SG159556 DB	'I', 00H
	ORG $+2
$SG159508 DB	'ebcdic/g2h', 00H
	ORG $+1
$SG159563 DB	'dsp', 00H
$SG159509 DB	'importing', 00H
	ORG $+2
$SG159522 DB	'from', 00H
	ORG $+3
$SG159547 DB	'reset', 00H
	ORG $+2
$SG159568 DB	'ebcdic', 00H
	ORG $+1
$SG159569 DB	'g2h', 00H
$SG159523 DB	'ascii/h2g', 00H
	ORG $+2
$SG159575 DB	'h2g', 00H
$SG159524 DB	'Imported', 00H
	ORG $+3
$SG159551 DB	'reset', 00H
	ORG $+2
$SG159577 DB	'E', 00H
	ORG $+2
$SG159526 DB	'HHC01490%s Codepage: %s user table %s %s file %s', 0aH, 00H
	ORG $+2
$SG159584 DB	'I', 00H
	ORG $+2
$SG159527 DB	'update_codepage', 00H
$SG159528 DB	'codepage.c', 00H
	ORG $+1
$SG159588 DB	'I', 00H
	ORG $+2
$SG159529 DB	'ascii/h2g', 00H
	ORG $+2
$SG159595 DB	'I', 00H
	ORG $+2
$SG159530 DB	'importing', 00H
	ORG $+2
$SG159535 DB	'user', 00H
	ORG $+3
$SG159574 DB	'ascii', 00H
	ORG $+2
$SG159606 DB	'E', 00H
	ORG $+2
$SG159538 DB	'HHC01489%s Codepage: Cannot %s; user table in use', 0aH, 00H
	ORG $+1
$SG159614 DB	'I', 00H
	ORG $+2
$SG159539 DB	'update_codepage', 00H
$SG159540 DB	'codepage.c', 00H
	ORG $+1
$SG159618 DB	'E', 00H
	ORG $+2
$SG159542 DB	'HHC17000%s Missing or invalid argument(s)', 0aH, 00H
	ORG $+1
$SG159624 DB	'I', 00H
	ORG $+2
$SG159543 DB	'update_codepage', 00H
$SG159544 DB	'codepage.c', 00H
	ORG $+1
$SG159550 DB	'user', 00H
	ORG $+3
$SG159593 DB	'%2.2X', 00H
	ORG $+2
$SG159640 DB	'I', 00H
	ORG $+2
$SG159553 DB	'HHC01489%s Codepage: Cannot %s; user table in use', 0aH, 00H
	ORG $+1
$SG159650 DB	'E', 00H
	ORG $+2
$SG159554 DB	'update_codepage', 00H
$SG159555 DB	'codepage.c', 00H
	ORG $+1
$SG159753 DB	'rb', 00H
	ORG $+1
$SG159557 DB	'HHC01479%s Codepage user is deleted', 0aH, 00H
	ORG $+3
$SG159558 DB	'update_codepage', 00H
$SG159559 DB	'codepage.c', 00H
	ORG $+1
$SG159774 DB	'wb', 00H
	ORG $+1
$SG159564 DB	'display', 00H
$SG159570 DB	'ebcdic/g2h', 00H
	ORG $+1
$SG159797 DB	'%s', 00H
	ORG $+1
$SG159576 DB	'ascii/h2g', 00H
	ORG $+2
$SG159800 DB	'E', 00H
	ORG $+2
$SG159578 DB	'HHC17000%s Missing or invalid argument(s)', 0aH, 00H
	ORG $+5
$SG159579 DB	'update_codepage', 00H
$SG159580 DB	'codepage.c', 00H
	ORG $+5
$SG159583 DB	', table is invalid', 00H
	ORG $+5
$SG159585 DB	'HHC01484%s Codepage: Displaying user table %s%s', 0aH, 00H
	ORG $+7
$SG159586 DB	'update_codepage', 00H
$SG159587 DB	'codepage.c', 00H
	ORG $+5
$SG159589 DB	'HHC01485%s Codepage:    _0_1_2_3 _4_5_6_7 _8_9_A_B _C_D_'
	DB	'E_F 0... 4... 8... C...', 0aH, 00H
	ORG $+7
$SG159590 DB	'update_codepage', 00H
$SG159591 DB	'codepage.c', 00H
	ORG $+5
$SG159596 DB	'HHC01486%s Codepage: %1.1X_%36.36s%20.20s %1.1X_', 0aH, 00H
	ORG $+6
$SG159597 DB	'update_codepage', 00H
$SG159598 DB	'codepage.c', 00H
	ORG $+5
$SG159601 DB	'reference', 00H
	ORG $+2
$SG159604 DB	'user', 00H
	ORG $+7
$SG159605 DB	'refresh/copy', 00H
	ORG $+3
$SG159607 DB	'HHC01489%s Codepage: Cannot %s; user table in use', 0aH, 00H
	ORG $+5
$SG159608 DB	'update_codepage', 00H
$SG159609 DB	'codepage.c', 00H
	ORG $+1
$SG159611 DB	'user', 00H
	ORG $+7
$SG159615 DB	'HHC01478%s Codepage %s copied to user', 0aH, 00H
	ORG $+1
$SG159616 DB	'update_codepage', 00H
$SG159617 DB	'codepage.c', 00H
	ORG $+5
$SG159619 DB	'HHC01475%s Codepage conversion table %s is not defined', 0aH
	DB	00H
$SG159620 DB	'update_codepage', 00H
$SG159621 DB	'codepage.c', 00H
	ORG $+5
$SG159625 DB	'HHC01481%s Codepage: Valid conversion tables are:', 0aH, 00H
	ORG $+5
$SG159626 DB	'update_codepage', 00H
$SG159627 DB	'codepage.c', 00H
	ORG $+1
$SG159630 DB	'user', 00H
	ORG $+3
$SG159632 DB	'user', 00H
	ORG $+3
$SG159635 DB	'user', 00H
	ORG $+3
$SG159638 DB	'user', 00H
	ORG $+7
$SG159641 DB	'HHC01482%s Codepage: %-16.16s %-16.16s %-16.16s %-16.16s'
	DB	0aH, 00H
	ORG $+6
$SG159642 DB	'update_codepage', 00H
$SG159643 DB	'codepage.c', 00H
	ORG $+1
$SG159646 DB	'user', 00H
	ORG $+3
$SG159647 DB	'user', 00H
	ORG $+3
$SG159648 DB	'user', 00H
	ORG $+7
$SG159651 DB	'HHC17000%s Missing or invalid argument(s)', 0aH, 00H
	ORG $+5
$SG159652 DB	'update_codepage', 00H
$SG159653 DB	'codepage.c', 00H
	ORG $+1
$SG159798 DB	'''%s''', 00H
	ORG $+7
$SG159799 DB	'file size != 256', 00H
	ORG $+7
$SG159801 DB	'HHC01480%s Codepage: Error %s %s table data file %s; %s', 0aH
	DB	00H
	ORG $+7
$SG159802 DB	'imp_exp_error', 00H
	ORG $+2
$SG159803 DB	'codepage.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:imp_exp_error
	DD	025H
	DD	0199H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:import_file
	DD	022H
	DD	0fcH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:update_codepage
	DD	021H
	DD	02737H
voltbl	ENDS
xdata	SEGMENT
$unwind$strcaseabbrev DD 011301H
	DD	08213H
$unwind$valid_codepage_name DD 010901H
	DD	06209H
$unwind$set_codepage DD 010901H
	DD	04209H
$unwind$set_codepage_no_msgs DD 010901H
	DD	04209H
$unwind$update_codepage DD 042919H
	DD	0930117H
	DD	0600f7010H
	DD	imagerel __GSHandlerCheck
	DD	0480H
$unwind$buf_guest_to_host DD 011301H
	DD	06213H
$unwind$str_guest_to_host DD 011301H
	DD	06213H
$unwind$buf_host_to_guest DD 011301H
	DD	06213H
$unwind$str_host_to_guest DD 011301H
	DD	06213H
$unwind$prt_guest_to_host DD 011301H
	DD	06213H
$unwind$prt_host_to_guest DD 011301H
	DD	06213H
$unwind$import_file DD 042a19H
	DD	04b0118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0240H
$unwind$export_file DD 011301H
	DD	08213H
$unwind$imp_exp_error DD 022d19H
	DD	033011bH
	DD	imagerel __GSHandlerCheck
	DD	0180H
$unwind$set_codepage_internal DD 010d01H
	DD	0c20dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\codepage.c
_TEXT	SEGMENT
dflt$ = 80
name$ = 112
msgflag$ = 120
set_codepage_internal PROC

; 1083 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1084 :     int dflt = FALSE;

  0000d	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR dflt$[rsp], 0

; 1085 : 
; 1086 :     if(name == NULL)

  00015	48 83 7c 24 70
	00		 cmp	 QWORD PTR name$[rsp], 0
  0001b	75 39		 jne	 SHORT $LN5@set_codepa

; 1087 :     {
; 1088 :         dflt = TRUE;

  0001d	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR dflt$[rsp], 1

; 1089 :         if (!(name = get_symbol("HERCULES_CP")) || !*name)

  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159188
  0002c	e8 00 00 00 00	 call	 get_symbol
  00031	48 89 44 24 70	 mov	 QWORD PTR name$[rsp], rax
  00036	48 83 7c 24 70
	00		 cmp	 QWORD PTR name$[rsp], 0
  0003c	74 0c		 je	 SHORT $LN7@set_codepa
  0003e	48 8b 44 24 70	 mov	 rax, QWORD PTR name$[rsp]
  00043	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00046	85 c0		 test	 eax, eax
  00048	75 0c		 jne	 SHORT $LN6@set_codepa
$LN7@set_codepa:

; 1090 :              name = "default";

  0004a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159189
  00051	48 89 44 24 70	 mov	 QWORD PTR name$[rsp], rax
$LN6@set_codepa:
$LN5@set_codepa:

; 1091 :     }
; 1092 : 
; 1093 :     if( strcasecmp(name,"user") == 0 && user_in_use == FALSE )

  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159191
  0005d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR name$[rsp]
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00068	85 c0		 test	 eax, eax
  0006a	75 62		 jne	 SHORT $LN8@set_codepa
  0006c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR user_in_use, 0
  00073	75 59		 jne	 SHORT $LN8@set_codepa

; 1094 :     {
; 1095 :         if( msgflag == SETCODEPAGE_VERBOSE) WRMSG( HHC01477, "W" );

  00075	83 7c 24 78 02	 cmp	 DWORD PTR msgflag$[rsp], 2
  0007a	75 46		 jne	 SHORT $LN9@set_codepa
  0007c	b9 01 00 00 00	 mov	 ecx, 1
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159193
  0008e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159194
  0009a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0009f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a4	41 b9 03 00 00
	00		 mov	 r9d, 3
  000aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159195
  000b1	ba 47 04 00 00	 mov	 edx, 1095		; 00000447H
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159196
  000bd	e8 00 00 00 00	 call	 fwritemsg
$LN9@set_codepa:

; 1096 :         name = "default";

  000c2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159197
  000c9	48 89 44 24 70	 mov	 QWORD PTR name$[rsp], rax
$LN8@set_codepa:

; 1097 :     }
; 1098 : 
; 1099 :     for(codepage_conv = cpconv;

  000ce	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:cpconv
  000d5	48 89 05 00 00
	00 00		 mov	 QWORD PTR codepage_conv, rax
  000dc	eb 12		 jmp	 SHORT $LN4@set_codepa
$LN2@set_codepa:

; 1101 :         codepage_conv++);

  000de	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR codepage_conv
  000e5	48 83 c0 18	 add	 rax, 24
  000e9	48 89 05 00 00
	00 00		 mov	 QWORD PTR codepage_conv, rax
$LN4@set_codepa:

; 1100 :         codepage_conv->name && strcasecmp(codepage_conv->name,name);

  000f0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR codepage_conv
  000f7	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000fb	74 1b		 je	 SHORT $LN3@set_codepa
  000fd	48 8b 54 24 70	 mov	 rdx, QWORD PTR name$[rsp]
  00102	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR codepage_conv
  00109	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0010c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00112	85 c0		 test	 eax, eax
  00114	74 02		 je	 SHORT $LN3@set_codepa

; 1101 :         codepage_conv++);

  00116	eb c6		 jmp	 SHORT $LN2@set_codepa
$LN3@set_codepa:

; 1102 : 
; 1103 :     if( codepage_conv->name && strcasecmp(codepage_conv->name,"user") == 0 && user_in_use == FALSE )

  00118	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR codepage_conv
  0011f	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00123	74 36		 je	 SHORT $LN10@set_codepa
  00125	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159199
  0012c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR codepage_conv
  00133	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00136	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0013c	85 c0		 test	 eax, eax
  0013e	75 1b		 jne	 SHORT $LN10@set_codepa
  00140	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR user_in_use, 0
  00147	75 12		 jne	 SHORT $LN10@set_codepa

; 1104 :         codepage_conv++;

  00149	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR codepage_conv
  00150	48 83 c0 18	 add	 rax, 24
  00154	48 89 05 00 00
	00 00		 mov	 QWORD PTR codepage_conv, rax
$LN10@set_codepa:

; 1105 : 
; 1106 :     if( msgflag == SETCODEPAGE_VERBOSE )

  0015b	83 7c 24 78 02	 cmp	 DWORD PTR msgflag$[rsp], 2
  00160	0f 85 c9 00 00
	00		 jne	 $LN11@set_codepa

; 1107 :     {
; 1108 :         if(codepage_conv->name)

  00166	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR codepage_conv
  0016d	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00171	74 65		 je	 SHORT $LN12@set_codepa

; 1109 :         {
; 1110 :             if (!dflt)

  00173	83 7c 24 50 00	 cmp	 DWORD PTR dflt$[rsp], 0
  00178	75 5c		 jne	 SHORT $LN14@set_codepa

; 1111 :                 WRMSG(HHC01474, "I", "internal", name);

  0017a	b9 01 00 00 00	 mov	 ecx, 1
  0017f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00185	48 8b 4c 24 70	 mov	 rcx, QWORD PTR name$[rsp]
  0018a	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159204
  00196	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0019b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159205
  001a2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159206
  001ae	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001b3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b8	41 b9 03 00 00
	00		 mov	 r9d, 3
  001be	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159207
  001c5	ba 57 04 00 00	 mov	 edx, 1111		; 00000457H
  001ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159208
  001d1	e8 00 00 00 00	 call	 fwritemsg
$LN14@set_codepa:

; 1112 :         }

  001d6	eb 57		 jmp	 SHORT $LN13@set_codepa
$LN12@set_codepa:

; 1113 :         else
; 1114 :         {
; 1115 :             if (!dflt)

  001d8	83 7c 24 50 00	 cmp	 DWORD PTR dflt$[rsp], 0
  001dd	75 50		 jne	 SHORT $LN15@set_codepa

; 1116 :                 WRMSG (HHC01475, "E", name);

  001df	b9 01 00 00 00	 mov	 ecx, 1
  001e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001ea	48 8b 4c 24 70	 mov	 rcx, QWORD PTR name$[rsp]
  001ef	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159210
  001fb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00200	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159211
  00207	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0020c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00211	41 b9 03 00 00
	00		 mov	 r9d, 3
  00217	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159212
  0021e	ba 5c 04 00 00	 mov	 edx, 1116		; 0000045cH
  00223	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159213
  0022a	e8 00 00 00 00	 call	 fwritemsg
$LN15@set_codepa:
$LN13@set_codepa:
$LN11@set_codepa:

; 1117 :         }
; 1118 :     }
; 1119 : }

  0022f	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00233	c3		 ret	 0
set_codepage_internal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\codepage.c
_TEXT	SEGMENT
errno_i$ = 96
tv90 = 104
msgbuf$ = 112
__$ArrayPad$ = 384
fn$ = 416
cmd$ = 424
tab$ = 432
err$ = 440
imp_exp_error PROC

; 1723 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 98 01
	00 00		 sub	 rsp, 408		; 00000198H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1724 :     int     errno_i = err;

  0002d	8b 84 24 b8 01
	00 00		 mov	 eax, DWORD PTR err$[rsp]
  00034	89 44 24 60	 mov	 DWORD PTR errno_i$[rsp], eax

; 1725 : //    char   *fun = "";
; 1726 :     char    msgbuf[FILENAME_MAX+3];
; 1727 : 
; 1728 : 
; 1729 :     if ( errno_i < 0 )

  00038	83 7c 24 60 00	 cmp	 DWORD PTR errno_i$[rsp], 0
  0003d	7d 09		 jge	 SHORT $LN2@imp_exp_er

; 1730 :         errno_i *= -1;

  0003f	6b 44 24 60 ff	 imul	 eax, DWORD PTR errno_i$[rsp], -1
  00044	89 44 24 60	 mov	 DWORD PTR errno_i$[rsp], eax
$LN2@imp_exp_er:

; 1731 :     if ( errno_i >= 1000 && errno_i <= 1999 )

  00048	81 7c 24 60 e8
	03 00 00	 cmp	 DWORD PTR errno_i$[rsp], 1000 ; 000003e8H
  00050	7c 19		 jl	 SHORT $LN3@imp_exp_er
  00052	81 7c 24 60 cf
	07 00 00	 cmp	 DWORD PTR errno_i$[rsp], 1999 ; 000007cfH
  0005a	7f 0f		 jg	 SHORT $LN3@imp_exp_er

; 1732 :     {
; 1733 : //        fun = "fopen()";
; 1734 :         errno_i -= 1000;

  0005c	8b 44 24 60	 mov	 eax, DWORD PTR errno_i$[rsp]
  00060	2d e8 03 00 00	 sub	 eax, 1000		; 000003e8H
  00065	89 44 24 60	 mov	 DWORD PTR errno_i$[rsp], eax

; 1735 :     }

  00069	eb 21		 jmp	 SHORT $LN4@imp_exp_er
$LN3@imp_exp_er:

; 1736 :     else if ( errno_i >= 2000 && errno_i <= 2999 )

  0006b	81 7c 24 60 d0
	07 00 00	 cmp	 DWORD PTR errno_i$[rsp], 2000 ; 000007d0H
  00073	7c 17		 jl	 SHORT $LN5@imp_exp_er
  00075	81 7c 24 60 b7
	0b 00 00	 cmp	 DWORD PTR errno_i$[rsp], 2999 ; 00000bb7H
  0007d	7f 0d		 jg	 SHORT $LN5@imp_exp_er

; 1737 :     {
; 1738 : //        fun = "fread()";
; 1739 :         errno_i -= 2000;

  0007f	8b 44 24 60	 mov	 eax, DWORD PTR errno_i$[rsp]
  00083	2d d0 07 00 00	 sub	 eax, 2000		; 000007d0H
  00088	89 44 24 60	 mov	 DWORD PTR errno_i$[rsp], eax
$LN5@imp_exp_er:
$LN4@imp_exp_er:

; 1740 :     }
; 1741 :     if ( errno_i >= 3000 && errno_i <= 3999 )

  0008c	81 7c 24 60 b8
	0b 00 00	 cmp	 DWORD PTR errno_i$[rsp], 3000 ; 00000bb8H
  00094	7c 17		 jl	 SHORT $LN6@imp_exp_er
  00096	81 7c 24 60 9f
	0f 00 00	 cmp	 DWORD PTR errno_i$[rsp], 3999 ; 00000f9fH
  0009e	7f 0d		 jg	 SHORT $LN6@imp_exp_er

; 1742 :     {
; 1743 : //        fun = "fwrite()";
; 1744 :         errno_i -= 3000;

  000a0	8b 44 24 60	 mov	 eax, DWORD PTR errno_i$[rsp]
  000a4	2d b8 0b 00 00	 sub	 eax, 3000		; 00000bb8H
  000a9	89 44 24 60	 mov	 DWORD PTR errno_i$[rsp], eax
$LN6@imp_exp_er:

; 1745 :     }
; 1746 : 
; 1747 :     if ( strchr(fn,SPACE) == NULL )

  000ad	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  000b2	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR fn$[rsp]
  000ba	e8 00 00 00 00	 call	 strchr
  000bf	48 85 c0	 test	 rax, rax
  000c2	75 20		 jne	 SHORT $LN7@imp_exp_er

; 1748 :         MSGBUF( msgbuf, "%s", fn );

  000c4	4c 8b 8c 24 a0
	01 00 00	 mov	 r9, QWORD PTR fn$[rsp]
  000cc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159797
  000d3	ba 07 01 00 00	 mov	 edx, 263		; 00000107H
  000d8	48 8d 4c 24 70	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  000dd	e8 00 00 00 00	 call	 w32_snprintf
  000e2	eb 1e		 jmp	 SHORT $LN8@imp_exp_er
$LN7@imp_exp_er:

; 1749 :     else
; 1750 :         MSGBUF( msgbuf, "'%s'", fn );

  000e4	4c 8b 8c 24 a0
	01 00 00	 mov	 r9, QWORD PTR fn$[rsp]
  000ec	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159798
  000f3	ba 07 01 00 00	 mov	 edx, 263		; 00000107H
  000f8	48 8d 4c 24 70	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  000fd	e8 00 00 00 00	 call	 w32_snprintf
$LN8@imp_exp_er:

; 1751 : 
; 1752 :     WRMSG( HHC01480, "E", cmd, tab, msgbuf,

  00102	83 7c 24 60 00	 cmp	 DWORD PTR errno_i$[rsp], 0
  00107	74 10		 je	 SHORT $LN10@imp_exp_er
  00109	8b 4c 24 60	 mov	 ecx, DWORD PTR errno_i$[rsp]
  0010d	e8 00 00 00 00	 call	 w32_strerror
  00112	48 89 44 24 68	 mov	 QWORD PTR tv90[rsp], rax
  00117	eb 0c		 jmp	 SHORT $LN11@imp_exp_er
$LN10@imp_exp_er:
  00119	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159799
  00120	48 89 44 24 68	 mov	 QWORD PTR tv90[rsp], rax
$LN11@imp_exp_er:
  00125	b9 01 00 00 00	 mov	 ecx, 1
  0012a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00130	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv90[rsp]
  00135	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0013a	48 8d 4c 24 70	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0013f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00144	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR tab$[rsp]
  0014c	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00151	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR cmd$[rsp]
  00159	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0015e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159800
  00165	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0016a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159801
  00171	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00176	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0017b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00181	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159802
  00188	ba d9 06 00 00	 mov	 edx, 1753		; 000006d9H
  0018d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159803
  00194	e8 00 00 00 00	 call	 fwritemsg

; 1753 :                         ( errno_i != 0 ? strerror(errno_i) : "file size != 256") );
; 1754 :     return;
; 1755 : }

  00199	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001a1	48 33 cc	 xor	 rcx, rsp
  001a4	e8 00 00 00 00	 call	 __security_check_cookie
  001a9	48 81 c4 98 01
	00 00		 add	 rsp, 408		; 00000198H
  001b0	c3		 ret	 0
imp_exp_error ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\codepage.c
_TEXT	SEGMENT
rc$ = 32
errno_i$ = 36
tv80 = 40
binfile$ = 48
writecnt$ = 56
fn$ = 80
buf$ = 88
buflen$ = 96
export_file PROC

; 1697 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1698 :     FILE   *binfile;
; 1699 :     size_t  writecnt;
; 1700 :     int     rc = 0;

  00013	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0

; 1701 :     int     errno_i = 0;

  0001b	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR errno_i$[rsp], 0

; 1702 : 
; 1703 :     binfile = fopen( fn, "wb" );

  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159774
  0002a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fn$[rsp]
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  00035	48 89 44 24 30	 mov	 QWORD PTR binfile$[rsp], rax

; 1704 :     if ( binfile != NULL )

  0003a	48 83 7c 24 30
	00		 cmp	 QWORD PTR binfile$[rsp], 0
  00040	74 6d		 je	 SHORT $LN2@export_fil

; 1705 :     {
; 1706 :         writecnt = fwrite(buf, 1, (size_t)buflen, binfile);

  00042	48 63 44 24 60	 movsxd	 rax, DWORD PTR buflen$[rsp]
  00047	4c 8b 4c 24 30	 mov	 r9, QWORD PTR binfile$[rsp]
  0004c	4c 8b c0	 mov	 r8, rax
  0004f	ba 01 00 00 00	 mov	 edx, 1
  00054	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buf$[rsp]
  00059	e8 00 00 00 00	 call	 w32_fwrite
  0005e	48 89 44 24 38	 mov	 QWORD PTR writecnt$[rsp], rax

; 1707 :         if ( writecnt == 0 )

  00063	48 83 7c 24 38
	00		 cmp	 QWORD PTR writecnt$[rsp], 0
  00069	75 0c		 jne	 SHORT $LN4@export_fil

; 1708 :             errno_i = errno;

  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00071	8b 00		 mov	 eax, DWORD PTR [rax]
  00073	89 44 24 24	 mov	 DWORD PTR errno_i$[rsp], eax
$LN4@export_fil:

; 1709 : 
; 1710 :         fclose(binfile);

  00077	48 8b 4c 24 30	 mov	 rcx, QWORD PTR binfile$[rsp]
  0007c	e8 00 00 00 00	 call	 w32_fclose

; 1711 : 
; 1712 :         rc = ( (int)writecnt == buflen ? (int)writecnt : ( errno_i + 3000 ) * -1 );

  00081	8b 44 24 60	 mov	 eax, DWORD PTR buflen$[rsp]
  00085	39 44 24 38	 cmp	 DWORD PTR writecnt$[rsp], eax
  00089	75 0a		 jne	 SHORT $LN6@export_fil
  0008b	8b 44 24 38	 mov	 eax, DWORD PTR writecnt$[rsp]
  0008f	89 44 24 28	 mov	 DWORD PTR tv80[rsp], eax
  00093	eb 10		 jmp	 SHORT $LN7@export_fil
$LN6@export_fil:
  00095	8b 44 24 24	 mov	 eax, DWORD PTR errno_i$[rsp]
  00099	05 b8 0b 00 00	 add	 eax, 3000		; 00000bb8H
  0009e	6b c0 ff	 imul	 eax, eax, -1
  000a1	89 44 24 28	 mov	 DWORD PTR tv80[rsp], eax
$LN7@export_fil:
  000a5	8b 44 24 28	 mov	 eax, DWORD PTR tv80[rsp]
  000a9	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 1713 :     }

  000ad	eb 14		 jmp	 SHORT $LN3@export_fil
$LN2@export_fil:

; 1714 :     else
; 1715 :     {
; 1716 :         rc = ( errno + 1000) * -1;

  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000b5	8b 00		 mov	 eax, DWORD PTR [rax]
  000b7	05 e8 03 00 00	 add	 eax, 1000		; 000003e8H
  000bc	6b c0 ff	 imul	 eax, eax, -1
  000bf	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax
$LN3@export_fil:

; 1717 :     }
; 1718 : 
; 1719 :     return rc;

  000c3	8b 44 24 20	 mov	 eax, DWORD PTR rc$[rsp]

; 1720 : }

  000c7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000cb	c3		 ret	 0
export_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\codepage.c
_TEXT	SEGMENT
rc$ = 32
errno_i$ = 36
binfile$ = 40
readcnt$ = 48
readbuf$ = 64
__$ArrayPad$ = 576
fn$ = 624
buf$ = 632
buflen$ = 640
import_file PROC

; 1662 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 58 02
	00 00		 sub	 rsp, 600		; 00000258H
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1663 :     FILE   *binfile;
; 1664 :     char    readbuf[512];
; 1665 :     size_t  readcnt;
; 1666 :     int     errno_i = 0;

  0002a	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR errno_i$[rsp], 0

; 1667 :     int     rc = 0;

  00032	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0

; 1668 : 
; 1669 :     binfile = fopen( fn, "rb" );

  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159753
  00041	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR fn$[rsp]
  00049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  0004f	48 89 44 24 28	 mov	 QWORD PTR binfile$[rsp], rax

; 1670 :     if ( binfile != NULL )

  00054	48 83 7c 24 28
	00		 cmp	 QWORD PTR binfile$[rsp], 0
  0005a	0f 84 84 00 00
	00		 je	 $LN2@import_fil

; 1671 :     {
; 1672 :         readcnt = fread(readbuf, 1, sizeof(readbuf), binfile);

  00060	4c 8b 4c 24 28	 mov	 r9, QWORD PTR binfile$[rsp]
  00065	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  0006b	ba 01 00 00 00	 mov	 edx, 1
  00070	48 8d 4c 24 40	 lea	 rcx, QWORD PTR readbuf$[rsp]
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  0007b	48 89 44 24 30	 mov	 QWORD PTR readcnt$[rsp], rax

; 1673 : 
; 1674 :         if ( readcnt == 0 )

  00080	48 83 7c 24 30
	00		 cmp	 QWORD PTR readcnt$[rsp], 0
  00086	75 0c		 jne	 SHORT $LN4@import_fil

; 1675 :             errno_i = errno;

  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0008e	8b 00		 mov	 eax, DWORD PTR [rax]
  00090	89 44 24 24	 mov	 DWORD PTR errno_i$[rsp], eax
$LN4@import_fil:

; 1676 : 
; 1677 :         fclose(binfile);

  00094	48 8b 4c 24 28	 mov	 rcx, QWORD PTR binfile$[rsp]
  00099	e8 00 00 00 00	 call	 w32_fclose

; 1678 :         if ( (int)readcnt == buflen )

  0009e	8b 84 24 80 02
	00 00		 mov	 eax, DWORD PTR buflen$[rsp]
  000a5	39 44 24 30	 cmp	 DWORD PTR readcnt$[rsp], eax
  000a9	75 27		 jne	 SHORT $LN5@import_fil

; 1679 :         {
; 1680 :             memcpy(buf,readbuf,buflen);

  000ab	48 63 84 24 80
	02 00 00	 movsxd	 rax, DWORD PTR buflen$[rsp]
  000b3	48 8d 4c 24 40	 lea	 rcx, QWORD PTR readbuf$[rsp]
  000b8	48 8b bc 24 78
	02 00 00	 mov	 rdi, QWORD PTR buf$[rsp]
  000c0	48 8b f1	 mov	 rsi, rcx
  000c3	48 8b c8	 mov	 rcx, rax
  000c6	f3 a4		 rep movsb

; 1681 :             rc = (int)readcnt;

  000c8	8b 44 24 30	 mov	 eax, DWORD PTR readcnt$[rsp]
  000cc	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 1682 :         }

  000d0	eb 10		 jmp	 SHORT $LN6@import_fil
$LN5@import_fil:

; 1683 :         else
; 1684 :         {
; 1685 :             rc = ( errno_i + 2000 ) * -1;

  000d2	8b 44 24 24	 mov	 eax, DWORD PTR errno_i$[rsp]
  000d6	05 d0 07 00 00	 add	 eax, 2000		; 000007d0H
  000db	6b c0 ff	 imul	 eax, eax, -1
  000de	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax
$LN6@import_fil:

; 1686 :         }
; 1687 :     }

  000e2	eb 14		 jmp	 SHORT $LN3@import_fil
$LN2@import_fil:

; 1688 :     else
; 1689 :     {
; 1690 :         rc = ( errno + 1000) * -1;

  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000ea	8b 00		 mov	 eax, DWORD PTR [rax]
  000ec	05 e8 03 00 00	 add	 eax, 1000		; 000003e8H
  000f1	6b c0 ff	 imul	 eax, eax, -1
  000f4	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax
$LN3@import_fil:

; 1691 :     }
; 1692 : 
; 1693 :     return rc;

  000f8	8b 44 24 20	 mov	 eax, DWORD PTR rc$[rsp]

; 1694 : }

  000fc	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00104	48 33 cc	 xor	 rcx, rsp
  00107	e8 00 00 00 00	 call	 __security_check_cookie
  0010c	48 81 c4 58 02
	00 00		 add	 rsp, 600		; 00000258H
  00113	5f		 pop	 rdi
  00114	5e		 pop	 rsi
  00115	c3		 ret	 0
import_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\codepage.c
_TEXT	SEGMENT
count$ = 32
pad$ = 36
tv92 = 40
psinbuf$ = 64
psoutbuf$ = 72
ilength$ = 80
prt_host_to_guest PROC

; 1638 : {

$LN11:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1639 :     u_int   count;
; 1640 :     int     pad = FALSE;

  00013	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR pad$[rsp], 0

; 1641 : 
; 1642 :     for( count = 0; count < ilength; count++ )

  0001b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR count$[rsp], 0
  00023	eb 0a		 jmp	 SHORT $LN4@prt_host_t
$LN2@prt_host_t:
  00025	8b 44 24 20	 mov	 eax, DWORD PTR count$[rsp]
  00029	ff c0		 inc	 eax
  0002b	89 44 24 20	 mov	 DWORD PTR count$[rsp], eax
$LN4@prt_host_t:
  0002f	8b 44 24 50	 mov	 eax, DWORD PTR ilength$[rsp]
  00033	39 44 24 20	 cmp	 DWORD PTR count$[rsp], eax
  00037	0f 83 94 00 00
	00		 jae	 $LN3@prt_host_t

; 1643 :     {
; 1644 :         if ( !pad && psinbuf[count] == '\0' )

  0003d	83 7c 24 24 00	 cmp	 DWORD PTR pad$[rsp], 0
  00042	75 19		 jne	 SHORT $LN5@prt_host_t
  00044	8b 44 24 20	 mov	 eax, DWORD PTR count$[rsp]
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR psinbuf$[rsp]
  0004d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00051	85 c0		 test	 eax, eax
  00053	75 08		 jne	 SHORT $LN5@prt_host_t

; 1645 :             pad = TRUE;

  00055	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR pad$[rsp], 1
$LN5@prt_host_t:

; 1646 :         if ( !pad )

  0005d	83 7c 24 24 00	 cmp	 DWORD PTR pad$[rsp], 0
  00062	75 55		 jne	 SHORT $LN6@prt_host_t

; 1647 :         {
; 1648 :             psoutbuf[count] = isprint      (psinbuf[count]) ?

  00064	8b 44 24 20	 mov	 eax, DWORD PTR count$[rsp]
  00068	48 8b 4c 24 40	 mov	 rcx, QWORD PTR psinbuf$[rsp]
  0006d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00071	8b c8		 mov	 ecx, eax
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isprint
  00079	85 c0		 test	 eax, eax
  0007b	74 1b		 je	 SHORT $LN9@prt_host_t
  0007d	8b 44 24 20	 mov	 eax, DWORD PTR count$[rsp]
  00081	48 8b 4c 24 40	 mov	 rcx, QWORD PTR psinbuf$[rsp]
  00086	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  0008a	e8 00 00 00 00	 call	 host_to_guest
  0008f	0f b6 c0	 movzx	 eax, al
  00092	89 44 24 28	 mov	 DWORD PTR tv92[rsp], eax
  00096	eb 0e		 jmp	 SHORT $LN10@prt_host_t
$LN9@prt_host_t:
  00098	b1 2e		 mov	 cl, 46			; 0000002eH
  0009a	e8 00 00 00 00	 call	 host_to_guest
  0009f	0f b6 c0	 movzx	 eax, al
  000a2	89 44 24 28	 mov	 DWORD PTR tv92[rsp], eax
$LN10@prt_host_t:
  000a6	8b 44 24 20	 mov	 eax, DWORD PTR count$[rsp]
  000aa	48 8b 4c 24 48	 mov	 rcx, QWORD PTR psoutbuf$[rsp]
  000af	0f b6 54 24 28	 movzx	 edx, BYTE PTR tv92[rsp]
  000b4	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 1649 :                               host_to_guest(psinbuf[count]) :
; 1650 :                               host_to_guest('.');
; 1651 :         }

  000b7	eb 13		 jmp	 SHORT $LN7@prt_host_t
$LN6@prt_host_t:

; 1652 :         else
; 1653 :         {
; 1654 :             psoutbuf[count] = host_to_guest(' ');

  000b9	b1 20		 mov	 cl, 32			; 00000020H
  000bb	e8 00 00 00 00	 call	 host_to_guest
  000c0	8b 4c 24 20	 mov	 ecx, DWORD PTR count$[rsp]
  000c4	48 8b 54 24 48	 mov	 rdx, QWORD PTR psoutbuf$[rsp]
  000c9	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN7@prt_host_t:

; 1655 :         }
; 1656 :     }

  000cc	e9 54 ff ff ff	 jmp	 $LN2@prt_host_t
$LN3@prt_host_t:

; 1657 : 
; 1658 :     return psoutbuf;

  000d1	48 8b 44 24 48	 mov	 rax, QWORD PTR psoutbuf$[rsp]

; 1659 : }

  000d6	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000da	c3		 ret	 0
prt_host_to_guest ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\codepage.c
_TEXT	SEGMENT
c$ = 32
count$ = 36
psinbuf$ = 64
psoutbuf$ = 72
ilength$ = 80
prt_guest_to_host PROC

; 1621 : {

$LN7:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1622 :     u_int count;
; 1623 :     BYTE  c;
; 1624 : 
; 1625 :     for( count = 0; count < ilength; count++ )

  00013	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR count$[rsp], 0
  0001b	eb 0a		 jmp	 SHORT $LN4@prt_guest_
$LN2@prt_guest_:
  0001d	8b 44 24 24	 mov	 eax, DWORD PTR count$[rsp]
  00021	ff c0		 inc	 eax
  00023	89 44 24 24	 mov	 DWORD PTR count$[rsp], eax
$LN4@prt_guest_:
  00027	8b 44 24 50	 mov	 eax, DWORD PTR ilength$[rsp]
  0002b	39 44 24 24	 cmp	 DWORD PTR count$[rsp], eax
  0002f	73 3f		 jae	 SHORT $LN3@prt_guest_

; 1626 :     {
; 1627 :         c = guest_to_host(psinbuf[count]);

  00031	8b 44 24 24	 mov	 eax, DWORD PTR count$[rsp]
  00035	48 8b 4c 24 40	 mov	 rcx, QWORD PTR psinbuf$[rsp]
  0003a	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  0003e	e8 00 00 00 00	 call	 guest_to_host
  00043	88 44 24 20	 mov	 BYTE PTR c$[rsp], al

; 1628 :         if ( !isprint(c) )

  00047	0f b6 44 24 20	 movzx	 eax, BYTE PTR c$[rsp]
  0004c	8b c8		 mov	 ecx, eax
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isprint
  00054	85 c0		 test	 eax, eax
  00056	75 05		 jne	 SHORT $LN5@prt_guest_

; 1629 :             c = '.';

  00058	c6 44 24 20 2e	 mov	 BYTE PTR c$[rsp], 46	; 0000002eH
$LN5@prt_guest_:

; 1630 :         psoutbuf[count] = c;

  0005d	8b 44 24 24	 mov	 eax, DWORD PTR count$[rsp]
  00061	48 8b 4c 24 48	 mov	 rcx, QWORD PTR psoutbuf$[rsp]
  00066	0f b6 54 24 20	 movzx	 edx, BYTE PTR c$[rsp]
  0006b	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 1631 :     }

  0006e	eb ad		 jmp	 SHORT $LN2@prt_guest_
$LN3@prt_guest_:

; 1632 :     psoutbuf[count] = '\0';

  00070	8b 44 24 24	 mov	 eax, DWORD PTR count$[rsp]
  00074	48 8b 4c 24 48	 mov	 rcx, QWORD PTR psoutbuf$[rsp]
  00079	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 1633 : 
; 1634 :     return psoutbuf;

  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR psoutbuf$[rsp]

; 1635 : }

  00082	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00086	c3		 ret	 0
prt_guest_to_host ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\codepage.c
_TEXT	SEGMENT
count$ = 32
pad$ = 36
psinbuf$ = 64
psoutbuf$ = 72
ilength$ = 80
str_host_to_guest PROC

; 1587 : {

$LN9:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1588 :     u_int   count;
; 1589 :     int     pad = FALSE;

  00013	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR pad$[rsp], 0

; 1590 : 
; 1591 :     for( count = 0; count < ilength; count++ )

  0001b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR count$[rsp], 0
  00023	eb 0a		 jmp	 SHORT $LN4@str_host_t
$LN2@str_host_t:
  00025	8b 44 24 20	 mov	 eax, DWORD PTR count$[rsp]
  00029	ff c0		 inc	 eax
  0002b	89 44 24 20	 mov	 DWORD PTR count$[rsp], eax
$LN4@str_host_t:
  0002f	8b 44 24 50	 mov	 eax, DWORD PTR ilength$[rsp]
  00033	39 44 24 20	 cmp	 DWORD PTR count$[rsp], eax
  00037	73 5c		 jae	 SHORT $LN3@str_host_t

; 1592 :     {
; 1593 :         if ( !pad && psinbuf[count] == '\0' )

  00039	83 7c 24 24 00	 cmp	 DWORD PTR pad$[rsp], 0
  0003e	75 19		 jne	 SHORT $LN5@str_host_t
  00040	8b 44 24 20	 mov	 eax, DWORD PTR count$[rsp]
  00044	48 8b 4c 24 40	 mov	 rcx, QWORD PTR psinbuf$[rsp]
  00049	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0004d	85 c0		 test	 eax, eax
  0004f	75 08		 jne	 SHORT $LN5@str_host_t

; 1594 :             pad = TRUE;

  00051	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR pad$[rsp], 1
$LN5@str_host_t:

; 1595 :         if ( !pad )

  00059	83 7c 24 24 00	 cmp	 DWORD PTR pad$[rsp], 0
  0005e	75 20		 jne	 SHORT $LN6@str_host_t

; 1596 :         {
; 1597 :             psoutbuf[count] = host_to_guest(psinbuf[count]);

  00060	8b 44 24 20	 mov	 eax, DWORD PTR count$[rsp]
  00064	48 8b 4c 24 40	 mov	 rcx, QWORD PTR psinbuf$[rsp]
  00069	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  0006d	e8 00 00 00 00	 call	 host_to_guest
  00072	8b 4c 24 20	 mov	 ecx, DWORD PTR count$[rsp]
  00076	48 8b 54 24 48	 mov	 rdx, QWORD PTR psoutbuf$[rsp]
  0007b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 1598 :         }

  0007e	eb 13		 jmp	 SHORT $LN7@str_host_t
$LN6@str_host_t:

; 1599 :         else
; 1600 :         {
; 1601 :             psoutbuf[count] = host_to_guest(' ');

  00080	b1 20		 mov	 cl, 32			; 00000020H
  00082	e8 00 00 00 00	 call	 host_to_guest
  00087	8b 4c 24 20	 mov	 ecx, DWORD PTR count$[rsp]
  0008b	48 8b 54 24 48	 mov	 rdx, QWORD PTR psoutbuf$[rsp]
  00090	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN7@str_host_t:

; 1602 :         }
; 1603 :     }

  00093	eb 90		 jmp	 SHORT $LN2@str_host_t
$LN3@str_host_t:

; 1604 : 
; 1605 :     return psoutbuf;

  00095	48 8b 44 24 48	 mov	 rax, QWORD PTR psoutbuf$[rsp]

; 1606 : }

  0009a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009e	c3		 ret	 0
str_host_to_guest ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\codepage.c
_TEXT	SEGMENT
count$ = 32
psinbuf$ = 64
psoutbuf$ = 72
ilength$ = 80
buf_host_to_guest PROC

; 1567 : {

$LN6:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1568 :     u_int count;
; 1569 : 
; 1570 :     for( count = 0; count < ilength; count++ )

  00013	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR count$[rsp], 0
  0001b	eb 0a		 jmp	 SHORT $LN4@buf_host_t
$LN2@buf_host_t:
  0001d	8b 44 24 20	 mov	 eax, DWORD PTR count$[rsp]
  00021	ff c0		 inc	 eax
  00023	89 44 24 20	 mov	 DWORD PTR count$[rsp], eax
$LN4@buf_host_t:
  00027	8b 44 24 50	 mov	 eax, DWORD PTR ilength$[rsp]
  0002b	39 44 24 20	 cmp	 DWORD PTR count$[rsp], eax
  0002f	73 20		 jae	 SHORT $LN3@buf_host_t

; 1571 :         psoutbuf[count] = host_to_guest(psinbuf[count]);

  00031	8b 44 24 20	 mov	 eax, DWORD PTR count$[rsp]
  00035	48 8b 4c 24 40	 mov	 rcx, QWORD PTR psinbuf$[rsp]
  0003a	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  0003e	e8 00 00 00 00	 call	 host_to_guest
  00043	8b 4c 24 20	 mov	 ecx, DWORD PTR count$[rsp]
  00047	48 8b 54 24 48	 mov	 rdx, QWORD PTR psoutbuf$[rsp]
  0004c	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0004f	eb cc		 jmp	 SHORT $LN2@buf_host_t
$LN3@buf_host_t:

; 1572 : 
; 1573 :     return psoutbuf;

  00051	48 8b 44 24 48	 mov	 rax, QWORD PTR psoutbuf$[rsp]

; 1574 : }

  00056	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005a	c3		 ret	 0
buf_host_to_guest ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\codepage.c
_TEXT	SEGMENT
count$ = 32
psinbuf$ = 64
psoutbuf$ = 72
ilength$ = 80
str_guest_to_host PROC

; 1609 : {

$LN6:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1610 :     u_int count;
; 1611 : 
; 1612 :     for( count = 0; count < ilength; count++ )

  00013	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR count$[rsp], 0
  0001b	eb 0a		 jmp	 SHORT $LN4@str_guest_
$LN2@str_guest_:
  0001d	8b 44 24 20	 mov	 eax, DWORD PTR count$[rsp]
  00021	ff c0		 inc	 eax
  00023	89 44 24 20	 mov	 DWORD PTR count$[rsp], eax
$LN4@str_guest_:
  00027	8b 44 24 50	 mov	 eax, DWORD PTR ilength$[rsp]
  0002b	39 44 24 20	 cmp	 DWORD PTR count$[rsp], eax
  0002f	73 20		 jae	 SHORT $LN3@str_guest_

; 1613 :         psoutbuf[count] = guest_to_host(psinbuf[count]);

  00031	8b 44 24 20	 mov	 eax, DWORD PTR count$[rsp]
  00035	48 8b 4c 24 40	 mov	 rcx, QWORD PTR psinbuf$[rsp]
  0003a	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  0003e	e8 00 00 00 00	 call	 guest_to_host
  00043	8b 4c 24 20	 mov	 ecx, DWORD PTR count$[rsp]
  00047	48 8b 54 24 48	 mov	 rdx, QWORD PTR psoutbuf$[rsp]
  0004c	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0004f	eb cc		 jmp	 SHORT $LN2@str_guest_
$LN3@str_guest_:

; 1614 : 
; 1615 :     psoutbuf[count] = '\0';

  00051	8b 44 24 20	 mov	 eax, DWORD PTR count$[rsp]
  00055	48 8b 4c 24 48	 mov	 rcx, QWORD PTR psoutbuf$[rsp]
  0005a	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 1616 : 
; 1617 :     return psoutbuf;

  0005e	48 8b 44 24 48	 mov	 rax, QWORD PTR psoutbuf$[rsp]

; 1618 : }

  00063	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00067	c3		 ret	 0
str_guest_to_host ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\codepage.c
_TEXT	SEGMENT
count$ = 32
psinbuf$ = 64
psoutbuf$ = 72
ilength$ = 80
buf_guest_to_host PROC

; 1577 : {

$LN6:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1578 :     u_int count;
; 1579 : 
; 1580 :     for( count = 0; count < ilength; count++ )

  00013	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR count$[rsp], 0
  0001b	eb 0a		 jmp	 SHORT $LN4@buf_guest_
$LN2@buf_guest_:
  0001d	8b 44 24 20	 mov	 eax, DWORD PTR count$[rsp]
  00021	ff c0		 inc	 eax
  00023	89 44 24 20	 mov	 DWORD PTR count$[rsp], eax
$LN4@buf_guest_:
  00027	8b 44 24 50	 mov	 eax, DWORD PTR ilength$[rsp]
  0002b	39 44 24 20	 cmp	 DWORD PTR count$[rsp], eax
  0002f	73 20		 jae	 SHORT $LN3@buf_guest_

; 1581 :         psoutbuf[count] = guest_to_host(psinbuf[count]);

  00031	8b 44 24 20	 mov	 eax, DWORD PTR count$[rsp]
  00035	48 8b 4c 24 40	 mov	 rcx, QWORD PTR psinbuf$[rsp]
  0003a	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  0003e	e8 00 00 00 00	 call	 guest_to_host
  00043	8b 4c 24 20	 mov	 ecx, DWORD PTR count$[rsp]
  00047	48 8b 54 24 48	 mov	 rdx, QWORD PTR psoutbuf$[rsp]
  0004c	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0004f	eb cc		 jmp	 SHORT $LN2@buf_guest_
$LN3@buf_guest_:

; 1582 : 
; 1583 :     return psoutbuf;

  00051	48 8b 44 24 48	 mov	 rax, QWORD PTR psoutbuf$[rsp]

; 1584 : }

  00056	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005a	c3		 ret	 0
buf_guest_to_host ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\codepage.c
_TEXT	SEGMENT
g2h_tab	PROC

; 1063 : DLL_EXPORT unsigned char *g2h_tab() { return codepage_conv->g2h; }

  00000	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR codepage_conv
  00007	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0000b	c3		 ret	 0
g2h_tab	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\codepage.c
_TEXT	SEGMENT
h2g_tab	PROC

; 1062 : DLL_EXPORT unsigned char *h2g_tab() { return codepage_conv->h2g; }

  00000	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR codepage_conv
  00007	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0000b	c3		 ret	 0
h2g_tab	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\codepage.c
_TEXT	SEGMENT
byte$ = 8
guest_to_host PROC

; 1562 : {

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl

; 1563 :     return codepage_conv->g2h[byte];

  00004	0f b6 44 24 08	 movzx	 eax, BYTE PTR byte$[rsp]
  00009	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR codepage_conv
  00010	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00014	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]

; 1564 : }

  00018	c3		 ret	 0
guest_to_host ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\codepage.c
_TEXT	SEGMENT
byte$ = 8
host_to_guest PROC

; 1556 : {

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl

; 1557 :     return (unsigned char)codepage_conv->h2g[(unsigned int)byte];

  00004	0f b6 44 24 08	 movzx	 eax, BYTE PTR byte$[rsp]
  00009	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR codepage_conv
  00010	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00014	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]

; 1558 : }

  00018	c3		 ret	 0
host_to_guest ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\codepage.c
_TEXT	SEGMENT
i$1 = 96
rc$ = 100
c$2 = 104
i$3 = 108
cpref$4 = 112
i$5 = 120
i$6 = 124
a$7 = 128
cnt$8 = 132
j$9 = 136
k$10 = 140
o$11 = 144
addargc$12 = 148
writecnt$13 = 152
readcnt$14 = 156
i$15 = 160
x$16 = 164
fn$17 = 168
fn$18 = 176
c$19 = 184
arg2ok$20 = 188
valid$21 = 192
g_to_h$22 = 196
p$23 = 200
tv1152 = 208
tv1168 = 212
tv1310 = 216
tv1313 = 220
tv450 = 224
tv452 = 228
tv494 = 232
tv499 = 236
tv504 = 240
tv506 = 244
tv1316 = 248
tv1321 = 252
tv278 = 256
tv340 = 260
tv440 = 264
tv445 = 268
tblname$24 = 272
tbl$25 = 280
$T26 = 288
strtok_str$27 = 296
tv1180 = 304
tv1460 = 312
tv1516 = 320
tv1540 = 328
tv1461 = 336
tv1517 = 344
tv1541 = 352
tv75 = 360
tv268 = 368
tv280 = 376
tv330 = 384
tv342 = 392
tv1401 = 400
tv1544 = 408
pos$28 = 416
val$29 = 480
cbuf$30 = 544
hbuf$31 = 576
buf$32 = 640
readbuf$33 = 896
__$ArrayPad$ = 1152
argc$ = 1200
argv$ = 1208
cmd$ = 1216
update_codepage PROC

; 1132 : {

$LN163:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	56		 push	 rsi
  0000f	57		 push	 rdi
  00010	48 81 ec 98 04
	00 00		 sub	 rsp, 1176		; 00000498H
  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001e	48 33 c4	 xor	 rax, rsp
  00021	48 89 84 24 80
	04 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1133 :     int rc = 0;

  00029	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0

; 1134 : 
; 1135 :     if ( CMD(cmd,alter,3) )

  00031	41 b8 03 00 00
	00		 mov	 r8d, 3
  00037	48 8b 94 24 c0
	04 00 00	 mov	 rdx, QWORD PTR cmd$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159310
  00046	e8 00 00 00 00	 call	 strcaseabbrev
  0004b	85 c0		 test	 eax, eax
  0004d	0f 84 45 08 00
	00		 je	 $LN29@update_cod

; 1136 :     {
; 1137 :         int     addargc;
; 1138 :         char   *strtok_str = NULL;

  00053	48 c7 84 24 28
	01 00 00 00 00
	00 00		 mov	 QWORD PTR strtok_str$27[rsp], 0

; 1139 : 
; 1140 :         char   *p;
; 1141 :         char    buf[256];
; 1142 :         unsigned int pos[16] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };

  0005f	c7 84 24 a0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR pos$28[rsp], 0
  0006a	c7 84 24 a4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR pos$28[rsp+4], 0
  00075	c7 84 24 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR pos$28[rsp+8], 0
  00080	c7 84 24 ac 01
	00 00 00 00 00
	00		 mov	 DWORD PTR pos$28[rsp+12], 0
  0008b	c7 84 24 b0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR pos$28[rsp+16], 0
  00096	c7 84 24 b4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR pos$28[rsp+20], 0
  000a1	c7 84 24 b8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR pos$28[rsp+24], 0
  000ac	c7 84 24 bc 01
	00 00 00 00 00
	00		 mov	 DWORD PTR pos$28[rsp+28], 0
  000b7	c7 84 24 c0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR pos$28[rsp+32], 0
  000c2	c7 84 24 c4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR pos$28[rsp+36], 0
  000cd	c7 84 24 c8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR pos$28[rsp+40], 0
  000d8	c7 84 24 cc 01
	00 00 00 00 00
	00		 mov	 DWORD PTR pos$28[rsp+44], 0
  000e3	c7 84 24 d0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR pos$28[rsp+48], 0
  000ee	c7 84 24 d4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR pos$28[rsp+52], 0
  000f9	c7 84 24 d8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR pos$28[rsp+56], 0
  00104	c7 84 24 dc 01
	00 00 00 00 00
	00		 mov	 DWORD PTR pos$28[rsp+60], 0

; 1143 :         unsigned int val[16] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };

  0010f	c7 84 24 e0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR val$29[rsp], 0
  0011a	c7 84 24 e4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR val$29[rsp+4], 0
  00125	c7 84 24 e8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR val$29[rsp+8], 0
  00130	c7 84 24 ec 01
	00 00 00 00 00
	00		 mov	 DWORD PTR val$29[rsp+12], 0
  0013b	c7 84 24 f0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR val$29[rsp+16], 0
  00146	c7 84 24 f4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR val$29[rsp+20], 0
  00151	c7 84 24 f8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR val$29[rsp+24], 0
  0015c	c7 84 24 fc 01
	00 00 00 00 00
	00		 mov	 DWORD PTR val$29[rsp+28], 0
  00167	c7 84 24 00 02
	00 00 00 00 00
	00		 mov	 DWORD PTR val$29[rsp+32], 0
  00172	c7 84 24 04 02
	00 00 00 00 00
	00		 mov	 DWORD PTR val$29[rsp+36], 0
  0017d	c7 84 24 08 02
	00 00 00 00 00
	00		 mov	 DWORD PTR val$29[rsp+40], 0
  00188	c7 84 24 0c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR val$29[rsp+44], 0
  00193	c7 84 24 10 02
	00 00 00 00 00
	00		 mov	 DWORD PTR val$29[rsp+48], 0
  0019e	c7 84 24 14 02
	00 00 00 00 00
	00		 mov	 DWORD PTR val$29[rsp+52], 0
  001a9	c7 84 24 18 02
	00 00 00 00 00
	00		 mov	 DWORD PTR val$29[rsp+56], 0
  001b4	c7 84 24 1c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR val$29[rsp+60], 0

; 1144 :         int     cnt = -1;

  001bf	c7 84 24 84 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR cnt$8[rsp], -1

; 1145 :         int     arg2ok = FALSE;

  001ca	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR arg2ok$20[rsp], 0

; 1146 : 
; 1147 :         if ( argv[2][0] == '(' && argv[2][strlen(argv[2])-1] == ')' )

  001d5	b8 08 00 00 00	 mov	 eax, 8
  001da	48 6b c0 02	 imul	 rax, rax, 2
  001de	b9 01 00 00 00	 mov	 ecx, 1
  001e3	48 6b c9 00	 imul	 rcx, rcx, 0
  001e7	48 8b 94 24 b8
	04 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  001ef	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  001f3	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  001f7	83 f8 28	 cmp	 eax, 40			; 00000028H
  001fa	0f 85 2c 02 00
	00		 jne	 $LN31@update_cod
  00200	b8 08 00 00 00	 mov	 eax, 8
  00205	48 6b c0 02	 imul	 rax, rax, 2
  00209	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv75[rsp], rax
  00211	b9 08 00 00 00	 mov	 ecx, 8
  00216	48 6b c9 02	 imul	 rcx, rcx, 2
  0021a	48 8b 94 24 b8
	04 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00222	48 8b 0c 0a	 mov	 rcx, QWORD PTR [rdx+rcx]
  00226	e8 00 00 00 00	 call	 strlen
  0022b	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00233	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR tv75[rsp]
  0023b	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0023f	0f be 44 01 ff	 movsx	 eax, BYTE PTR [rcx+rax-1]
  00244	83 f8 29	 cmp	 eax, 41			; 00000029H
  00247	0f 85 df 01 00
	00		 jne	 $LN31@update_cod

; 1148 :         {
; 1149 :             int     x;
; 1150 :             BYTE    c;
; 1151 : 
; 1152 :             p = argv[2];

  0024d	b8 08 00 00 00	 mov	 eax, 8
  00252	48 6b c0 02	 imul	 rax, rax, 2
  00256	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0025e	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00262	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR p$23[rsp], rax

; 1153 :             p++;

  0026a	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR p$23[rsp]
  00272	48 ff c0	 inc	 rax
  00275	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR p$23[rsp], rax

; 1154 : 
; 1155 :             STRLCPY( buf, p );

  0027d	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  00283	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR p$23[rsp]
  0028b	48 8d 8c 24 80
	02 00 00	 lea	 rcx, QWORD PTR buf$32[rsp]
  00293	e8 00 00 00 00	 call	 strlcpy

; 1156 :             buf[strlen(buf)-1] = '\0';

  00298	48 8d 8c 24 80
	02 00 00	 lea	 rcx, QWORD PTR buf$32[rsp]
  002a0	e8 00 00 00 00	 call	 strlen
  002a5	48 ff c8	 dec	 rax
  002a8	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR $T26[rsp], rax
  002b0	48 81 bc 24 20
	01 00 00 00 01
	00 00		 cmp	 QWORD PTR $T26[rsp], 256 ; 00000100H
  002bc	73 02		 jae	 SHORT $LN139@update_cod
  002be	eb 05		 jmp	 SHORT $LN140@update_cod
$LN139@update_cod:
  002c0	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN140@update_cod:
  002c5	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR $T26[rsp]
  002cd	c6 84 04 80 02
	00 00 00	 mov	 BYTE PTR buf$32[rsp+rax], 0

; 1157 : 
; 1158 :             for( addargc = 0; ; addargc++ )

  002d5	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR addargc$12[rsp], 0
  002e0	eb 10		 jmp	 SHORT $LN4@update_cod
$LN2@update_cod:
  002e2	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR addargc$12[rsp]
  002e9	ff c0		 inc	 eax
  002eb	89 84 24 94 00
	00 00		 mov	 DWORD PTR addargc$12[rsp], eax
$LN4@update_cod:

; 1159 :             {
; 1160 :                 if ( cnt >= 15 )

  002f2	83 bc 24 84 00
	00 00 0f	 cmp	 DWORD PTR cnt$8[rsp], 15
  002fa	7c 0d		 jl	 SHORT $LN32@update_cod

; 1161 :                 {
; 1162 :                     rc = -1;

  002fc	c7 44 24 64 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 1163 :                     break;

  00304	e9 fe 00 00 00	 jmp	 $LN3@update_cod
$LN32@update_cod:

; 1164 :                 }
; 1165 : 
; 1166 :                 if ( addargc == 0 )

  00309	83 bc 24 94 00
	00 00 00	 cmp	 DWORD PTR addargc$12[rsp], 0
  00311	75 26		 jne	 SHORT $LN33@update_cod

; 1167 :                     p = strtok_r(buf,",",&strtok_str );

  00313	4c 8d 84 24 28
	01 00 00	 lea	 r8, QWORD PTR strtok_str$27[rsp]
  0031b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159315
  00322	48 8d 8c 24 80
	02 00 00	 lea	 rcx, QWORD PTR buf$32[rsp]
  0032a	e8 00 00 00 00	 call	 strtok_r
  0032f	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR p$23[rsp], rax
  00337	eb 1e		 jmp	 SHORT $LN34@update_cod
$LN33@update_cod:

; 1168 :                 else
; 1169 :                     p = strtok_r(NULL,",",&strtok_str );

  00339	4c 8d 84 24 28
	01 00 00	 lea	 r8, QWORD PTR strtok_str$27[rsp]
  00341	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159316
  00348	33 c9		 xor	 ecx, ecx
  0034a	e8 00 00 00 00	 call	 strtok_r
  0034f	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR p$23[rsp], rax
$LN34@update_cod:

; 1170 : 
; 1171 :                 if ( p == NULL )

  00357	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR p$23[rsp], 0
  00360	75 05		 jne	 SHORT $LN35@update_cod

; 1172 :                     break;

  00362	e9 a0 00 00 00	 jmp	 $LN3@update_cod
$LN35@update_cod:

; 1173 : 
; 1174 :                 if ( sscanf(p, "%x%c", &x, &c) != 1 || x > 255 || x < 0 )

  00367	4c 8d 8c 24 b8
	00 00 00	 lea	 r9, QWORD PTR c$19[rsp]
  0036f	4c 8d 84 24 a4
	00 00 00	 lea	 r8, QWORD PTR x$16[rsp]
  00377	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159320
  0037e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR p$23[rsp]
  00386	e8 00 00 00 00	 call	 sscanf
  0038b	83 f8 01	 cmp	 eax, 1
  0038e	75 17		 jne	 SHORT $LN37@update_cod
  00390	81 bc 24 a4 00
	00 00 ff 00 00
	00		 cmp	 DWORD PTR x$16[rsp], 255 ; 000000ffH
  0039b	7f 0a		 jg	 SHORT $LN37@update_cod
  0039d	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR x$16[rsp], 0
  003a5	7d 0a		 jge	 SHORT $LN36@update_cod
$LN37@update_cod:

; 1175 :                 {
; 1176 :                     rc = -1;

  003a7	c7 44 24 64 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 1177 :                     break;

  003af	eb 56		 jmp	 SHORT $LN3@update_cod
$LN36@update_cod:

; 1178 :                 }
; 1179 : 
; 1180 :                 if ( ( addargc % 2 ) == 0 )

  003b1	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR addargc$12[rsp]
  003b8	99		 cdq
  003b9	83 e0 01	 and	 eax, 1
  003bc	33 c2		 xor	 eax, edx
  003be	2b c2		 sub	 eax, edx
  003c0	85 c0		 test	 eax, eax
  003c2	75 28		 jne	 SHORT $LN38@update_cod

; 1181 :                     pos[++cnt] = (unsigned int)x;

  003c4	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR cnt$8[rsp]
  003cb	ff c0		 inc	 eax
  003cd	89 84 24 84 00
	00 00		 mov	 DWORD PTR cnt$8[rsp], eax
  003d4	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR cnt$8[rsp]
  003dc	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR x$16[rsp]
  003e3	89 8c 84 a0 01
	00 00		 mov	 DWORD PTR pos$28[rsp+rax*4], ecx
  003ea	eb 16		 jmp	 SHORT $LN39@update_cod
$LN38@update_cod:

; 1182 :                 else
; 1183 :                     val[cnt] = (unsigned int)x;

  003ec	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR cnt$8[rsp]
  003f4	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR x$16[rsp]
  003fb	89 8c 84 e0 01
	00 00		 mov	 DWORD PTR val$29[rsp+rax*4], ecx
$LN39@update_cod:

; 1184 :             }

  00402	e9 db fe ff ff	 jmp	 $LN2@update_cod
$LN3@update_cod:

; 1185 : 
; 1186 :             if ( ( addargc % 2 ) == 0 && rc == 0 )

  00407	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR addargc$12[rsp]
  0040e	99		 cdq
  0040f	83 e0 01	 and	 eax, 1
  00412	33 c2		 xor	 eax, edx
  00414	2b c2		 sub	 eax, edx
  00416	85 c0		 test	 eax, eax
  00418	75 12		 jne	 SHORT $LN40@update_cod
  0041a	83 7c 24 64 00	 cmp	 DWORD PTR rc$[rsp], 0
  0041f	75 0b		 jne	 SHORT $LN40@update_cod

; 1187 :                 arg2ok = TRUE;

  00421	c7 84 24 bc 00
	00 00 01 00 00
	00		 mov	 DWORD PTR arg2ok$20[rsp], 1
$LN40@update_cod:
$LN31@update_cod:

; 1188 :         }
; 1189 : 
; 1190 :         /* at this point we have pairs of strings */
; 1191 :         if ( strcasecmp(codepage_conv->name,"user") == 0 )

  0042c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159326
  00433	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR codepage_conv
  0043a	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0043d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00443	85 c0		 test	 eax, eax
  00445	75 5f		 jne	 SHORT $LN41@update_cod

; 1192 :         {
; 1193 :             WRMSG( HHC01489, "E", "alter" );

  00447	b9 01 00 00 00	 mov	 ecx, 1
  0044c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00452	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159327
  00459	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0045e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159328
  00465	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0046a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159329
  00471	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00476	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0047b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00481	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159330
  00488	ba a9 04 00 00	 mov	 edx, 1193		; 000004a9H
  0048d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159331
  00494	e8 00 00 00 00	 call	 fwritemsg

; 1194 :             rc = -1;

  00499	c7 44 24 64 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 1195 :         }

  004a1	e9 ed 03 00 00	 jmp	 $LN42@update_cod
$LN41@update_cod:

; 1196 :         else if ( arg2ok && ( CMD(argv[1],ebcdic,1) || CMD(argv[1],g2h,3) ) )

  004a6	83 bc 24 bc 00
	00 00 00	 cmp	 DWORD PTR arg2ok$20[rsp], 0
  004ae	0f 84 c3 01 00
	00		 je	 $LN43@update_cod
  004b4	b8 08 00 00 00	 mov	 eax, 8
  004b9	48 6b c0 01	 imul	 rax, rax, 1
  004bd	41 b8 01 00 00
	00		 mov	 r8d, 1
  004c3	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004cb	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  004cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159335
  004d6	e8 00 00 00 00	 call	 strcaseabbrev
  004db	85 c0		 test	 eax, eax
  004dd	75 2f		 jne	 SHORT $LN45@update_cod
  004df	b8 08 00 00 00	 mov	 eax, 8
  004e4	48 6b c0 01	 imul	 rax, rax, 1
  004e8	41 b8 03 00 00
	00		 mov	 r8d, 3
  004ee	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004f6	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  004fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159336
  00501	e8 00 00 00 00	 call	 strcaseabbrev
  00506	85 c0		 test	 eax, eax
  00508	0f 84 69 01 00
	00		 je	 $LN43@update_cod
$LN45@update_cod:

; 1197 :         {
; 1198 :             int i;
; 1199 : 
; 1200 :             user_g_to_h_filled = TRUE;

  0050e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR user_g_to_h_filled, 1

; 1201 : 
; 1202 :             WRMSG( HHC01487, "I", "Altering", "ebcdic/g2h" );

  00518	b9 01 00 00 00	 mov	 ecx, 1
  0051d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00523	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159337
  0052a	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0052f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159338
  00536	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0053b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159339
  00542	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00547	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159340
  0054e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00553	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00558	41 b9 03 00 00
	00		 mov	 r9d, 3
  0055e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159341
  00565	ba b2 04 00 00	 mov	 edx, 1202		; 000004b2H
  0056a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159342
  00571	e8 00 00 00 00	 call	 fwritemsg

; 1203 : 
; 1204 :             for( i = 0; i <= cnt; i++ )

  00576	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR i$5[rsp], 0
  0057e	eb 0a		 jmp	 SHORT $LN7@update_cod
$LN5@update_cod:
  00580	8b 44 24 78	 mov	 eax, DWORD PTR i$5[rsp]
  00584	ff c0		 inc	 eax
  00586	89 44 24 78	 mov	 DWORD PTR i$5[rsp], eax
$LN7@update_cod:
  0058a	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR cnt$8[rsp]
  00591	39 44 24 78	 cmp	 DWORD PTR i$5[rsp], eax
  00595	0f 8f d7 00 00
	00		 jg	 $LN6@update_cod

; 1205 :             {
; 1206 :                 WRMSG( HHC01488, "I", pos[i], user_g_to_h[pos[i]], val[i] );

  0059b	48 63 44 24 78	 movsxd	 rax, DWORD PTR i$5[rsp]
  005a0	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR tv268[rsp], rax
  005a8	48 63 4c 24 78	 movsxd	 rcx, DWORD PTR i$5[rsp]
  005ad	8b 8c 8c a0 01
	00 00		 mov	 ecx, DWORD PTR pos$28[rsp+rcx*4]
  005b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:user_g_to_h
  005bb	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  005bf	89 8c 24 00 01
	00 00		 mov	 DWORD PTR tv278[rsp], ecx
  005c6	48 63 54 24 78	 movsxd	 rdx, DWORD PTR i$5[rsp]
  005cb	48 89 94 24 78
	01 00 00	 mov	 QWORD PTR tv280[rsp], rdx
  005d3	b9 01 00 00 00	 mov	 ecx, 1
  005d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005de	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR tv268[rsp]
  005e6	8b 8c 8c e0 01
	00 00		 mov	 ecx, DWORD PTR val$29[rsp+rcx*4]
  005ed	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  005f1	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR tv278[rsp]
  005f8	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  005fc	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR tv280[rsp]
  00604	8b 8c 8c a0 01
	00 00		 mov	 ecx, DWORD PTR pos$28[rsp+rcx*4]
  0060b	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0060f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159343
  00616	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0061b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159344
  00622	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00627	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0062c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00632	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159345
  00639	ba b6 04 00 00	 mov	 edx, 1206		; 000004b6H
  0063e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159346
  00645	e8 00 00 00 00	 call	 fwritemsg

; 1207 :                 user_g_to_h[pos[i]] = val[i];

  0064a	48 63 44 24 78	 movsxd	 rax, DWORD PTR i$5[rsp]
  0064f	48 63 4c 24 78	 movsxd	 rcx, DWORD PTR i$5[rsp]
  00654	8b 8c 8c a0 01
	00 00		 mov	 ecx, DWORD PTR pos$28[rsp+rcx*4]
  0065b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:user_g_to_h
  00662	0f b6 84 84 e0
	01 00 00	 movzx	 eax, BYTE PTR val$29[rsp+rax*4]
  0066a	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 1208 :             }

  0066d	e9 0e ff ff ff	 jmp	 $LN5@update_cod
$LN6@update_cod:

; 1209 :         }

  00672	e9 1c 02 00 00	 jmp	 $LN44@update_cod
$LN43@update_cod:

; 1210 :         else if ( arg2ok && ( CMD(argv[1],ascii,1) || CMD(argv[1],h2g,3) ))

  00677	83 bc 24 bc 00
	00 00 00	 cmp	 DWORD PTR arg2ok$20[rsp], 0
  0067f	0f 84 c0 01 00
	00		 je	 $LN46@update_cod
  00685	b8 08 00 00 00	 mov	 eax, 8
  0068a	48 6b c0 01	 imul	 rax, rax, 1
  0068e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00694	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0069c	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  006a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159350
  006a7	e8 00 00 00 00	 call	 strcaseabbrev
  006ac	85 c0		 test	 eax, eax
  006ae	75 2f		 jne	 SHORT $LN48@update_cod
  006b0	b8 08 00 00 00	 mov	 eax, 8
  006b5	48 6b c0 01	 imul	 rax, rax, 1
  006b9	41 b8 03 00 00
	00		 mov	 r8d, 3
  006bf	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  006c7	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  006cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159351
  006d2	e8 00 00 00 00	 call	 strcaseabbrev
  006d7	85 c0		 test	 eax, eax
  006d9	0f 84 66 01 00
	00		 je	 $LN46@update_cod
$LN48@update_cod:

; 1211 :         {
; 1212 :             int i;
; 1213 : 
; 1214 :             user_h_to_g_filled = TRUE;

  006df	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR user_h_to_g_filled, 1

; 1215 : 
; 1216 :             WRMSG( HHC01487, "I", "Altering", "ascii/h2g" );

  006e9	b9 01 00 00 00	 mov	 ecx, 1
  006ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159352
  006fb	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00700	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159353
  00707	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0070c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159354
  00713	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00718	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159355
  0071f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00724	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00729	41 b9 03 00 00
	00		 mov	 r9d, 3
  0072f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159356
  00736	ba c0 04 00 00	 mov	 edx, 1216		; 000004c0H
  0073b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159357
  00742	e8 00 00 00 00	 call	 fwritemsg

; 1217 : 
; 1218 :             for( i = 0; i <= cnt; i++ )

  00747	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR i$6[rsp], 0
  0074f	eb 0a		 jmp	 SHORT $LN10@update_cod
$LN8@update_cod:
  00751	8b 44 24 7c	 mov	 eax, DWORD PTR i$6[rsp]
  00755	ff c0		 inc	 eax
  00757	89 44 24 7c	 mov	 DWORD PTR i$6[rsp], eax
$LN10@update_cod:
  0075b	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR cnt$8[rsp]
  00762	39 44 24 7c	 cmp	 DWORD PTR i$6[rsp], eax
  00766	0f 8f d7 00 00
	00		 jg	 $LN9@update_cod

; 1219 :             {
; 1220 :                 WRMSG( HHC01488, "I", pos[i], user_h_to_g[pos[i]], val[i] );

  0076c	48 63 44 24 7c	 movsxd	 rax, DWORD PTR i$6[rsp]
  00771	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR tv330[rsp], rax
  00779	48 63 4c 24 7c	 movsxd	 rcx, DWORD PTR i$6[rsp]
  0077e	8b 8c 8c a0 01
	00 00		 mov	 ecx, DWORD PTR pos$28[rsp+rcx*4]
  00785	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:user_h_to_g
  0078c	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00790	89 8c 24 04 01
	00 00		 mov	 DWORD PTR tv340[rsp], ecx
  00797	48 63 54 24 7c	 movsxd	 rdx, DWORD PTR i$6[rsp]
  0079c	48 89 94 24 88
	01 00 00	 mov	 QWORD PTR tv342[rsp], rdx
  007a4	b9 01 00 00 00	 mov	 ecx, 1
  007a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007af	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR tv330[rsp]
  007b7	8b 8c 8c e0 01
	00 00		 mov	 ecx, DWORD PTR val$29[rsp+rcx*4]
  007be	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  007c2	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR tv340[rsp]
  007c9	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  007cd	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR tv342[rsp]
  007d5	8b 8c 8c a0 01
	00 00		 mov	 ecx, DWORD PTR pos$28[rsp+rcx*4]
  007dc	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  007e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159358
  007e7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159359
  007f3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007f8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007fd	41 b9 03 00 00
	00		 mov	 r9d, 3
  00803	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159360
  0080a	ba c4 04 00 00	 mov	 edx, 1220		; 000004c4H
  0080f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159361
  00816	e8 00 00 00 00	 call	 fwritemsg

; 1221 :                 user_h_to_g[pos[i]] = val[i];

  0081b	48 63 44 24 7c	 movsxd	 rax, DWORD PTR i$6[rsp]
  00820	48 63 4c 24 7c	 movsxd	 rcx, DWORD PTR i$6[rsp]
  00825	8b 8c 8c a0 01
	00 00		 mov	 ecx, DWORD PTR pos$28[rsp+rcx*4]
  0082c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:user_h_to_g
  00833	0f b6 84 84 e0
	01 00 00	 movzx	 eax, BYTE PTR val$29[rsp+rax*4]
  0083b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 1222 :             }

  0083e	e9 0e ff ff ff	 jmp	 $LN8@update_cod
$LN9@update_cod:

; 1223 :         }

  00843	eb 4e		 jmp	 SHORT $LN47@update_cod
$LN46@update_cod:

; 1224 :         else
; 1225 :         {
; 1226 :             WRMSG( HHC17000, "E" );

  00845	b9 01 00 00 00	 mov	 ecx, 1
  0084a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00850	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159362
  00857	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0085c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159363
  00863	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00868	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0086d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00873	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159364
  0087a	ba ca 04 00 00	 mov	 edx, 1226		; 000004caH
  0087f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159365
  00886	e8 00 00 00 00	 call	 fwritemsg

; 1227 :             rc = -1;

  0088b	c7 44 24 64 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN47@update_cod:
$LN44@update_cod:
$LN42@update_cod:

; 1228 :         }
; 1229 :     }

  00893	e9 9b 1e 00 00	 jmp	 $LN30@update_cod
$LN29@update_cod:

; 1230 :     else if ( CMD(cmd,test,4) )

  00898	41 b8 04 00 00
	00		 mov	 r8d, 4
  0089e	48 8b 94 24 c0
	04 00 00	 mov	 rdx, QWORD PTR cmd$[rsp]
  008a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159368
  008ad	e8 00 00 00 00	 call	 strcaseabbrev
  008b2	85 c0		 test	 eax, eax
  008b4	0f 84 bd 03 00
	00		 je	 $LN49@update_cod

; 1231 :     {
; 1232 :         U16     i;
; 1233 :         int     a = 0;

  008ba	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR a$7[rsp], 0

; 1234 : 
; 1235 :         WRMSG( HHC01487, "I", "Testing", "ebcdic/g2h vs. ascii/h2g" );

  008c5	b9 01 00 00 00	 mov	 ecx, 1
  008ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159369
  008d7	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  008dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159370
  008e3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  008e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159371
  008ef	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159372
  008fb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00900	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00905	41 b9 03 00 00
	00		 mov	 r9d, 3
  0090b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159373
  00912	ba d3 04 00 00	 mov	 edx, 1235		; 000004d3H
  00917	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159374
  0091e	e8 00 00 00 00	 call	 fwritemsg

; 1236 : 
; 1237 :         for( a = 0, i = 0; i < sizeof(user_g_to_h); i++ )

  00923	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR a$7[rsp], 0
  0092e	33 c0		 xor	 eax, eax
  00930	66 89 44 24 60	 mov	 WORD PTR i$1[rsp], ax
  00935	eb 0d		 jmp	 SHORT $LN13@update_cod
$LN11@update_cod:
  00937	0f b7 44 24 60	 movzx	 eax, WORD PTR i$1[rsp]
  0093c	66 ff c0	 inc	 ax
  0093f	66 89 44 24 60	 mov	 WORD PTR i$1[rsp], ax
$LN13@update_cod:
  00944	0f b7 44 24 60	 movzx	 eax, WORD PTR i$1[rsp]
  00949	48 3d 00 01 00
	00		 cmp	 rax, 256		; 00000100H
  0094f	0f 83 20 01 00
	00		 jae	 $LN12@update_cod

; 1238 :         {
; 1239 :             if ( i == user_h_to_g[user_g_to_h[i]] )

  00955	0f b7 44 24 60	 movzx	 eax, WORD PTR i$1[rsp]
  0095a	0f b7 4c 24 60	 movzx	 ecx, WORD PTR i$1[rsp]
  0095f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:user_g_to_h
  00966	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0096a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:user_h_to_g
  00971	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00975	3b c1		 cmp	 eax, ecx
  00977	75 02		 jne	 SHORT $LN51@update_cod

; 1240 :                 continue;

  00979	eb bc		 jmp	 SHORT $LN11@update_cod
$LN51@update_cod:

; 1241 :             a++;

  0097b	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR a$7[rsp]
  00982	ff c0		 inc	 eax
  00984	89 84 24 80 00
	00 00		 mov	 DWORD PTR a$7[rsp], eax

; 1242 :             WRMSG( HHC01491, "I", i, user_g_to_h[i],

  0098b	0f b7 44 24 60	 movzx	 eax, WORD PTR i$1[rsp]
  00990	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:user_g_to_h
  00997	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0099b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:user_h_to_g
  009a2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  009a6	89 84 24 08 01
	00 00		 mov	 DWORD PTR tv440[rsp], eax
  009ad	0f b7 4c 24 60	 movzx	 ecx, WORD PTR i$1[rsp]
  009b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:user_g_to_h
  009b9	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  009bd	89 8c 24 0c 01
	00 00		 mov	 DWORD PTR tv445[rsp], ecx
  009c4	0f b7 54 24 60	 movzx	 edx, WORD PTR i$1[rsp]
  009c9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:user_g_to_h
  009d0	41 0f b6 14 10	 movzx	 edx, BYTE PTR [r8+rdx]
  009d5	89 94 24 e0 00
	00 00		 mov	 DWORD PTR tv450[rsp], edx
  009dc	44 0f b7 44 24
	60		 movzx	 r8d, WORD PTR i$1[rsp]
  009e2	44 89 84 24 e4
	00 00 00	 mov	 DWORD PTR tv452[rsp], r8d
  009ea	b9 01 00 00 00	 mov	 ecx, 1
  009ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009f5	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR tv440[rsp]
  009fc	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00a00	8b 8c 24 0c 01
	00 00		 mov	 ecx, DWORD PTR tv445[rsp]
  00a07	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00a0b	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR tv450[rsp]
  00a12	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00a16	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR tv452[rsp]
  00a1d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00a21	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159376
  00a28	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a2d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159377
  00a34	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a39	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a3e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a44	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159378
  00a4b	ba db 04 00 00	 mov	 edx, 1243		; 000004dbH
  00a50	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159379
  00a57	e8 00 00 00 00	 call	 fwritemsg

; 1243 :                      user_g_to_h[i], user_h_to_g[user_g_to_h[i]] );
; 1244 :             rc = -1;

  00a5c	c7 44 24 64 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 1245 :             if ( a >= 10 )      // limit to first 10 mismatches

  00a64	83 bc 24 80 00
	00 00 0a	 cmp	 DWORD PTR a$7[rsp], 10
  00a6c	7c 02		 jl	 SHORT $LN52@update_cod

; 1246 :                 break;

  00a6e	eb 05		 jmp	 SHORT $LN12@update_cod
$LN52@update_cod:

; 1247 :         }

  00a70	e9 c2 fe ff ff	 jmp	 $LN11@update_cod
$LN12@update_cod:

; 1248 : 
; 1249 :         WRMSG( HHC01487, "I", "Testing", "ascii/h2g vs. ebcdic/g2h" );

  00a75	b9 01 00 00 00	 mov	 ecx, 1
  00a7a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a80	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159381
  00a87	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00a8c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159382
  00a93	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a98	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159383
  00a9f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00aa4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159384
  00aab	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ab0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ab5	41 b9 03 00 00
	00		 mov	 r9d, 3
  00abb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159385
  00ac2	ba e1 04 00 00	 mov	 edx, 1249		; 000004e1H
  00ac7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159386
  00ace	e8 00 00 00 00	 call	 fwritemsg

; 1250 : 
; 1251 :         for( a = 0, i = 0; i < sizeof(user_h_to_g); i++ )

  00ad3	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR a$7[rsp], 0
  00ade	33 c0		 xor	 eax, eax
  00ae0	66 89 44 24 60	 mov	 WORD PTR i$1[rsp], ax
  00ae5	eb 0d		 jmp	 SHORT $LN16@update_cod
$LN14@update_cod:
  00ae7	0f b7 44 24 60	 movzx	 eax, WORD PTR i$1[rsp]
  00aec	66 ff c0	 inc	 ax
  00aef	66 89 44 24 60	 mov	 WORD PTR i$1[rsp], ax
$LN16@update_cod:
  00af4	0f b7 44 24 60	 movzx	 eax, WORD PTR i$1[rsp]
  00af9	48 3d 00 01 00
	00		 cmp	 rax, 256		; 00000100H
  00aff	0f 83 20 01 00
	00		 jae	 $LN15@update_cod

; 1252 :         {
; 1253 :             if ( i == user_g_to_h[user_h_to_g[i]] )

  00b05	0f b7 44 24 60	 movzx	 eax, WORD PTR i$1[rsp]
  00b0a	0f b7 4c 24 60	 movzx	 ecx, WORD PTR i$1[rsp]
  00b0f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:user_h_to_g
  00b16	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00b1a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:user_g_to_h
  00b21	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00b25	3b c1		 cmp	 eax, ecx
  00b27	75 02		 jne	 SHORT $LN53@update_cod

; 1254 :                 continue;

  00b29	eb bc		 jmp	 SHORT $LN14@update_cod
$LN53@update_cod:

; 1255 :             a++;

  00b2b	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR a$7[rsp]
  00b32	ff c0		 inc	 eax
  00b34	89 84 24 80 00
	00 00		 mov	 DWORD PTR a$7[rsp], eax

; 1256 :             WRMSG( HHC01492, "I", i, user_h_to_g[i],

  00b3b	0f b7 44 24 60	 movzx	 eax, WORD PTR i$1[rsp]
  00b40	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:user_h_to_g
  00b47	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00b4b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:user_g_to_h
  00b52	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00b56	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv494[rsp], eax
  00b5d	0f b7 4c 24 60	 movzx	 ecx, WORD PTR i$1[rsp]
  00b62	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:user_h_to_g
  00b69	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00b6d	89 8c 24 ec 00
	00 00		 mov	 DWORD PTR tv499[rsp], ecx
  00b74	0f b7 54 24 60	 movzx	 edx, WORD PTR i$1[rsp]
  00b79	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:user_h_to_g
  00b80	41 0f b6 14 10	 movzx	 edx, BYTE PTR [r8+rdx]
  00b85	89 94 24 f0 00
	00 00		 mov	 DWORD PTR tv504[rsp], edx
  00b8c	44 0f b7 44 24
	60		 movzx	 r8d, WORD PTR i$1[rsp]
  00b92	44 89 84 24 f4
	00 00 00	 mov	 DWORD PTR tv506[rsp], r8d
  00b9a	b9 01 00 00 00	 mov	 ecx, 1
  00b9f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00ba5	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR tv494[rsp]
  00bac	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00bb0	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR tv499[rsp]
  00bb7	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00bbb	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR tv504[rsp]
  00bc2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00bc6	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR tv506[rsp]
  00bcd	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00bd1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159388
  00bd8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00bdd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159389
  00be4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00be9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00bee	41 b9 03 00 00
	00		 mov	 r9d, 3
  00bf4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159390
  00bfb	ba e9 04 00 00	 mov	 edx, 1257		; 000004e9H
  00c00	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159391
  00c07	e8 00 00 00 00	 call	 fwritemsg

; 1257 :                      user_h_to_g[i], user_g_to_h[user_h_to_g[i]] );
; 1258 :             rc = -1;

  00c0c	c7 44 24 64 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 1259 :             if ( a >= 10 )      // limit to first 10 mismatches

  00c14	83 bc 24 80 00
	00 00 0a	 cmp	 DWORD PTR a$7[rsp], 10
  00c1c	7c 02		 jl	 SHORT $LN54@update_cod

; 1260 :                 break;

  00c1e	eb 05		 jmp	 SHORT $LN15@update_cod
$LN54@update_cod:

; 1261 :         }

  00c20	e9 c2 fe ff ff	 jmp	 $LN14@update_cod
$LN15@update_cod:

; 1262 : 
; 1263 :         if ( rc == 0 )

  00c25	83 7c 24 64 00	 cmp	 DWORD PTR rc$[rsp], 0
  00c2a	75 46		 jne	 SHORT $LN55@update_cod

; 1264 :             WRMSG( HHC01493, "I" );

  00c2c	b9 01 00 00 00	 mov	 ecx, 1
  00c31	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c37	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159394
  00c3e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c43	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159395
  00c4a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c4f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c54	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c5a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159396
  00c61	ba f0 04 00 00	 mov	 edx, 1264		; 000004f0H
  00c66	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159397
  00c6d	e8 00 00 00 00	 call	 fwritemsg
$LN55@update_cod:

; 1265 :     }

  00c72	e9 bc 1a 00 00	 jmp	 $LN50@update_cod
$LN49@update_cod:

; 1266 :     else if ( CMD(cmd,export,3) )

  00c77	41 b8 03 00 00
	00		 mov	 r8d, 3
  00c7d	48 8b 94 24 c0
	04 00 00	 mov	 rdx, QWORD PTR cmd$[rsp]
  00c85	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159400
  00c8c	e8 00 00 00 00	 call	 strcaseabbrev
  00c91	85 c0		 test	 eax, eax
  00c93	0f 84 77 06 00
	00		 je	 $LN56@update_cod

; 1267 :     {
; 1268 :         int     writecnt;
; 1269 :         char   *fn;
; 1270 : 
; 1271 :         /* validate options */
; 1272 :         if ( ( argc == 3 && ( CMD(argv[1],ebcdic,1) || CMD(argv[1],ascii,1)
; 1273 :                               || CMD(argv[1],g2h,1) || CMD(argv[1],h2g,3) ) )
; 1274 :            ||( argc == 5 && ( CMD(argv[3],ebcdic,1) || CMD(argv[3],ascii,1)

  00c99	83 bc 24 b0 04
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00ca1	0f 85 bc 00 00
	00		 jne	 $LN61@update_cod
  00ca7	b8 08 00 00 00	 mov	 eax, 8
  00cac	48 6b c0 01	 imul	 rax, rax, 1
  00cb0	41 b8 01 00 00
	00		 mov	 r8d, 1
  00cb6	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00cbe	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00cc2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159405
  00cc9	e8 00 00 00 00	 call	 strcaseabbrev
  00cce	85 c0		 test	 eax, eax
  00cd0	0f 85 4f 01 00
	00		 jne	 $LN60@update_cod
  00cd6	b8 08 00 00 00	 mov	 eax, 8
  00cdb	48 6b c0 01	 imul	 rax, rax, 1
  00cdf	41 b8 01 00 00
	00		 mov	 r8d, 1
  00ce5	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00ced	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00cf1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159406
  00cf8	e8 00 00 00 00	 call	 strcaseabbrev
  00cfd	85 c0		 test	 eax, eax
  00cff	0f 85 20 01 00
	00		 jne	 $LN60@update_cod
  00d05	b8 08 00 00 00	 mov	 eax, 8
  00d0a	48 6b c0 01	 imul	 rax, rax, 1
  00d0e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00d14	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00d1c	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00d20	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159407
  00d27	e8 00 00 00 00	 call	 strcaseabbrev
  00d2c	85 c0		 test	 eax, eax
  00d2e	0f 85 f1 00 00
	00		 jne	 $LN60@update_cod
  00d34	b8 08 00 00 00	 mov	 eax, 8
  00d39	48 6b c0 01	 imul	 rax, rax, 1
  00d3d	41 b8 03 00 00
	00		 mov	 r8d, 3
  00d43	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00d4b	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00d4f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159408
  00d56	e8 00 00 00 00	 call	 strcaseabbrev
  00d5b	85 c0		 test	 eax, eax
  00d5d	0f 85 c2 00 00
	00		 jne	 $LN60@update_cod
$LN61@update_cod:
  00d63	83 bc 24 b0 04
	00 00 05	 cmp	 DWORD PTR argc$[rsp], 5
  00d6b	0f 85 4c 05 00
	00		 jne	 $LN58@update_cod
  00d71	b8 08 00 00 00	 mov	 eax, 8
  00d76	48 6b c0 03	 imul	 rax, rax, 3
  00d7a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00d80	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00d88	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00d8c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159410
  00d93	e8 00 00 00 00	 call	 strcaseabbrev
  00d98	85 c0		 test	 eax, eax
  00d9a	0f 85 85 00 00
	00		 jne	 $LN62@update_cod
  00da0	b8 08 00 00 00	 mov	 eax, 8
  00da5	48 6b c0 03	 imul	 rax, rax, 3
  00da9	41 b8 01 00 00
	00		 mov	 r8d, 1
  00daf	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00db7	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00dbb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159411
  00dc2	e8 00 00 00 00	 call	 strcaseabbrev
  00dc7	85 c0		 test	 eax, eax
  00dc9	75 5a		 jne	 SHORT $LN62@update_cod
  00dcb	b8 08 00 00 00	 mov	 eax, 8
  00dd0	48 6b c0 03	 imul	 rax, rax, 3
  00dd4	41 b8 01 00 00
	00		 mov	 r8d, 1
  00dda	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00de2	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00de6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159412
  00ded	e8 00 00 00 00	 call	 strcaseabbrev
  00df2	85 c0		 test	 eax, eax
  00df4	75 2f		 jne	 SHORT $LN62@update_cod
  00df6	b8 08 00 00 00	 mov	 eax, 8
  00dfb	48 6b c0 03	 imul	 rax, rax, 3
  00dff	41 b8 03 00 00
	00		 mov	 r8d, 3
  00e05	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00e0d	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00e11	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159413
  00e18	e8 00 00 00 00	 call	 strcaseabbrev
  00e1d	85 c0		 test	 eax, eax
  00e1f	0f 84 98 04 00
	00		 je	 $LN58@update_cod
$LN62@update_cod:
$LN60@update_cod:

; 1275 :                               || CMD(argv[3],g2h,1) || CMD(argv[3],h2g,3) ) )
; 1276 :            )
; 1277 :         {
; 1278 :             if ( ( argc == 3 && ( CMD(argv[1],ebcdic,1) || CMD(argv[1],g2h,1) ) ) ||

  00e25	83 bc 24 b0 04
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00e2d	75 5a		 jne	 SHORT $LN65@update_cod
  00e2f	b8 08 00 00 00	 mov	 eax, 8
  00e34	48 6b c0 01	 imul	 rax, rax, 1
  00e38	41 b8 01 00 00
	00		 mov	 r8d, 1
  00e3e	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00e46	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00e4a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159417
  00e51	e8 00 00 00 00	 call	 strcaseabbrev
  00e56	85 c0		 test	 eax, eax
  00e58	0f 85 93 00 00
	00		 jne	 $LN64@update_cod
  00e5e	b8 08 00 00 00	 mov	 eax, 8
  00e63	48 6b c0 01	 imul	 rax, rax, 1
  00e67	41 b8 01 00 00
	00		 mov	 r8d, 1
  00e6d	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00e75	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00e79	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159418
  00e80	e8 00 00 00 00	 call	 strcaseabbrev
  00e85	85 c0		 test	 eax, eax
  00e87	75 68		 jne	 SHORT $LN64@update_cod
$LN65@update_cod:
  00e89	83 bc 24 b0 04
	00 00 05	 cmp	 DWORD PTR argc$[rsp], 5
  00e91	0f 85 d9 01 00
	00		 jne	 $LN63@update_cod
  00e97	b8 08 00 00 00	 mov	 eax, 8
  00e9c	48 6b c0 03	 imul	 rax, rax, 3
  00ea0	41 b8 01 00 00
	00		 mov	 r8d, 1
  00ea6	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00eae	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00eb2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159420
  00eb9	e8 00 00 00 00	 call	 strcaseabbrev
  00ebe	85 c0		 test	 eax, eax
  00ec0	75 2f		 jne	 SHORT $LN66@update_cod
  00ec2	b8 08 00 00 00	 mov	 eax, 8
  00ec7	48 6b c0 03	 imul	 rax, rax, 3
  00ecb	41 b8 01 00 00
	00		 mov	 r8d, 1
  00ed1	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00ed9	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00edd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159421
  00ee4	e8 00 00 00 00	 call	 strcaseabbrev
  00ee9	85 c0		 test	 eax, eax
  00eeb	0f 84 7f 01 00
	00		 je	 $LN63@update_cod
$LN66@update_cod:
$LN64@update_cod:

; 1279 :                  ( argc == 5 && ( CMD(argv[3],ebcdic,1) || CMD(argv[3],g2h,1) ) ) )
; 1280 :             {
; 1281 :                 if ( !user_g_to_h_filled )

  00ef1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR user_g_to_h_filled, 0
  00ef8	75 63		 jne	 SHORT $LN67@update_cod

; 1282 :                 {
; 1283 :                     WRMSG( HHC01483, "E", "ebcdic/g2h" );

  00efa	b9 01 00 00 00	 mov	 ecx, 1
  00eff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00f05	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159423
  00f0c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00f11	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159424
  00f18	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00f1d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159425
  00f24	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00f29	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00f2e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00f34	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159426
  00f3b	ba 03 05 00 00	 mov	 edx, 1283		; 00000503H
  00f40	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159427
  00f47	e8 00 00 00 00	 call	 fwritemsg

; 1284 :                     rc = -1;

  00f4c	c7 44 24 64 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 1285 :                     return rc;

  00f54	8b 44 24 64	 mov	 eax, DWORD PTR rc$[rsp]
  00f58	e9 da 17 00 00	 jmp	 $LN1@update_cod
$LN67@update_cod:

; 1286 :                 }
; 1287 : 
; 1288 :                 if ( argc == 3 )

  00f5d	83 bc 24 b0 04
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00f65	75 1f		 jne	 SHORT $LN68@update_cod

; 1289 :                     fn = argv[2];

  00f67	b8 08 00 00 00	 mov	 eax, 8
  00f6c	48 6b c0 02	 imul	 rax, rax, 2
  00f70	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00f78	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00f7c	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR fn$17[rsp], rax
  00f84	eb 1d		 jmp	 SHORT $LN69@update_cod
$LN68@update_cod:

; 1290 :                 else
; 1291 :                     fn = argv[4];

  00f86	b8 08 00 00 00	 mov	 eax, 8
  00f8b	48 6b c0 04	 imul	 rax, rax, 4
  00f8f	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00f97	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00f9b	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR fn$17[rsp], rax
$LN69@update_cod:

; 1292 : 
; 1293 : 
; 1294 :                 writecnt = export_file( fn, (char *)user_g_to_h, (int)sizeof(user_g_to_h) );

  00fa3	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  00fa9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:user_g_to_h
  00fb0	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR fn$17[rsp]
  00fb8	e8 00 00 00 00	 call	 export_file
  00fbd	89 84 24 98 00
	00 00		 mov	 DWORD PTR writecnt$13[rsp], eax

; 1295 : 
; 1296 :                 if ( writecnt != sizeof(user_g_to_h) )

  00fc4	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR writecnt$13[rsp]
  00fcc	48 3d 00 01 00
	00		 cmp	 rax, 256		; 00000100H
  00fd2	74 25		 je	 SHORT $LN70@update_cod

; 1297 :                 {
; 1298 :                     imp_exp_error( fn, "exporting", "ebcdic/g2h", writecnt );

  00fd4	44 8b 8c 24 98
	00 00 00	 mov	 r9d, DWORD PTR writecnt$13[rsp]
  00fdc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159432
  00fe3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159433
  00fea	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR fn$17[rsp]
  00ff2	e8 00 00 00 00	 call	 imp_exp_error

; 1299 :                 }

  00ff7	eb 77		 jmp	 SHORT $LN71@update_cod
$LN70@update_cod:

; 1300 :                 else
; 1301 :                 {
; 1302 :                     WRMSG( HHC01490, "I", "Exported", "ebcdic/g2h", "to", fn );

  00ff9	b9 01 00 00 00	 mov	 ecx, 1
  00ffe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01004	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR fn$17[rsp]
  0100c	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159434
  01018	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0101d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159435
  01024	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  01029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159436
  01030	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159437
  0103c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159438
  01048	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0104d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01052	41 b9 03 00 00
	00		 mov	 r9d, 3
  01058	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159439
  0105f	ba 16 05 00 00	 mov	 edx, 1302		; 00000516H
  01064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159440
  0106b	e8 00 00 00 00	 call	 fwritemsg
$LN71@update_cod:
$LN63@update_cod:

; 1303 :                 }
; 1304 :             }
; 1305 :             if ( ( argc == 3 && ( CMD(argv[1],ascii,1) || CMD(argv[1],h2g,3) ) ) ||

  01070	83 bc 24 b0 04
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  01078	75 5a		 jne	 SHORT $LN74@update_cod
  0107a	b8 08 00 00 00	 mov	 eax, 8
  0107f	48 6b c0 01	 imul	 rax, rax, 1
  01083	41 b8 01 00 00
	00		 mov	 r8d, 1
  01089	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01091	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  01095	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159444
  0109c	e8 00 00 00 00	 call	 strcaseabbrev
  010a1	85 c0		 test	 eax, eax
  010a3	0f 85 93 00 00
	00		 jne	 $LN73@update_cod
  010a9	b8 08 00 00 00	 mov	 eax, 8
  010ae	48 6b c0 01	 imul	 rax, rax, 1
  010b2	41 b8 03 00 00
	00		 mov	 r8d, 3
  010b8	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  010c0	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  010c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159445
  010cb	e8 00 00 00 00	 call	 strcaseabbrev
  010d0	85 c0		 test	 eax, eax
  010d2	75 68		 jne	 SHORT $LN73@update_cod
$LN74@update_cod:
  010d4	83 bc 24 b0 04
	00 00 05	 cmp	 DWORD PTR argc$[rsp], 5
  010dc	0f 85 d9 01 00
	00		 jne	 $LN72@update_cod
  010e2	b8 08 00 00 00	 mov	 eax, 8
  010e7	48 6b c0 03	 imul	 rax, rax, 3
  010eb	41 b8 01 00 00
	00		 mov	 r8d, 1
  010f1	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  010f9	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  010fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159447
  01104	e8 00 00 00 00	 call	 strcaseabbrev
  01109	85 c0		 test	 eax, eax
  0110b	75 2f		 jne	 SHORT $LN75@update_cod
  0110d	b8 08 00 00 00	 mov	 eax, 8
  01112	48 6b c0 03	 imul	 rax, rax, 3
  01116	41 b8 03 00 00
	00		 mov	 r8d, 3
  0111c	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01124	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  01128	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159448
  0112f	e8 00 00 00 00	 call	 strcaseabbrev
  01134	85 c0		 test	 eax, eax
  01136	0f 84 7f 01 00
	00		 je	 $LN72@update_cod
$LN75@update_cod:
$LN73@update_cod:

; 1306 :                  ( argc == 5 && ( CMD(argv[3],ascii,1) || CMD(argv[3],h2g,3) ) ) )
; 1307 :             {
; 1308 :                 if ( !user_h_to_g_filled )

  0113c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR user_h_to_g_filled, 0
  01143	75 63		 jne	 SHORT $LN76@update_cod

; 1309 :                 {
; 1310 :                     WRMSG( HHC01483, "E", "ascii/h2g" );

  01145	b9 01 00 00 00	 mov	 ecx, 1
  0114a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01150	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159450
  01157	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0115c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159451
  01163	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01168	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159452
  0116f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01174	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01179	41 b9 03 00 00
	00		 mov	 r9d, 3
  0117f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159453
  01186	ba 1e 05 00 00	 mov	 edx, 1310		; 0000051eH
  0118b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159454
  01192	e8 00 00 00 00	 call	 fwritemsg

; 1311 :                     rc = -1;

  01197	c7 44 24 64 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 1312 :                     return rc;

  0119f	8b 44 24 64	 mov	 eax, DWORD PTR rc$[rsp]
  011a3	e9 8f 15 00 00	 jmp	 $LN1@update_cod
$LN76@update_cod:

; 1313 :                 }
; 1314 : 
; 1315 :                 if ( argc == 3 )

  011a8	83 bc 24 b0 04
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  011b0	75 1f		 jne	 SHORT $LN77@update_cod

; 1316 :                     fn = argv[2];

  011b2	b8 08 00 00 00	 mov	 eax, 8
  011b7	48 6b c0 02	 imul	 rax, rax, 2
  011bb	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  011c3	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  011c7	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR fn$17[rsp], rax
  011cf	eb 1d		 jmp	 SHORT $LN78@update_cod
$LN77@update_cod:

; 1317 :                 else
; 1318 :                     fn = argv[4];

  011d1	b8 08 00 00 00	 mov	 eax, 8
  011d6	48 6b c0 04	 imul	 rax, rax, 4
  011da	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  011e2	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  011e6	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR fn$17[rsp], rax
$LN78@update_cod:

; 1319 : 
; 1320 :                 writecnt = export_file( fn, (char *)user_h_to_g, (int)sizeof(user_h_to_g) );

  011ee	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  011f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:user_h_to_g
  011fb	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR fn$17[rsp]
  01203	e8 00 00 00 00	 call	 export_file
  01208	89 84 24 98 00
	00 00		 mov	 DWORD PTR writecnt$13[rsp], eax

; 1321 : 
; 1322 :                 if ( writecnt != sizeof(user_h_to_g) )

  0120f	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR writecnt$13[rsp]
  01217	48 3d 00 01 00
	00		 cmp	 rax, 256		; 00000100H
  0121d	74 25		 je	 SHORT $LN79@update_cod

; 1323 :                 {
; 1324 :                     imp_exp_error( fn, "exporting", "ascii/h2g", writecnt );

  0121f	44 8b 8c 24 98
	00 00 00	 mov	 r9d, DWORD PTR writecnt$13[rsp]
  01227	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159459
  0122e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159460
  01235	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR fn$17[rsp]
  0123d	e8 00 00 00 00	 call	 imp_exp_error

; 1325 :                 }

  01242	eb 77		 jmp	 SHORT $LN80@update_cod
$LN79@update_cod:

; 1326 :                 else
; 1327 :                 {
; 1328 :                     WRMSG( HHC01490, "I", "Emported", "ascii/h2g", "to", fn );

  01244	b9 01 00 00 00	 mov	 ecx, 1
  01249	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0124f	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR fn$17[rsp]
  01257	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0125c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159461
  01263	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01268	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159462
  0126f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  01274	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159463
  0127b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01280	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159464
  01287	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0128c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159465
  01293	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01298	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0129d	41 b9 03 00 00
	00		 mov	 r9d, 3
  012a3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159466
  012aa	ba 30 05 00 00	 mov	 edx, 1328		; 00000530H
  012af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159467
  012b6	e8 00 00 00 00	 call	 fwritemsg
$LN80@update_cod:
$LN72@update_cod:

; 1329 :                 }
; 1330 :             }
; 1331 :         }

  012bb	eb 4e		 jmp	 SHORT $LN59@update_cod
$LN58@update_cod:

; 1332 :         else
; 1333 :         {
; 1334 :             WRMSG( HHC17000, "E" );

  012bd	b9 01 00 00 00	 mov	 ecx, 1
  012c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  012c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159468
  012cf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  012d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159469
  012db	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  012e0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  012e5	41 b9 03 00 00
	00		 mov	 r9d, 3
  012eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159470
  012f2	ba 36 05 00 00	 mov	 edx, 1334		; 00000536H
  012f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159471
  012fe	e8 00 00 00 00	 call	 fwritemsg

; 1335 :             rc = -1;

  01303	c7 44 24 64 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN59@update_cod:

; 1336 :         }
; 1337 :     }

  0130b	e9 23 14 00 00	 jmp	 $LN57@update_cod
$LN56@update_cod:

; 1338 :     else if ( CMD(cmd,import,3) )

  01310	41 b8 03 00 00
	00		 mov	 r8d, 3
  01316	48 8b 94 24 c0
	04 00 00	 mov	 rdx, QWORD PTR cmd$[rsp]
  0131e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159474
  01325	e8 00 00 00 00	 call	 strcaseabbrev
  0132a	85 c0		 test	 eax, eax
  0132c	0f 84 ae 06 00
	00		 je	 $LN81@update_cod

; 1339 :     {
; 1340 :         char    readbuf[sizeof(user_g_to_h)];
; 1341 :         int     readcnt;
; 1342 :         char   *fn;
; 1343 : 
; 1344 :         /* validate options */
; 1345 :         if ( ( ( argc == 3 && ( CMD(argv[1],ebcdic,1) || CMD(argv[1],ascii,1)
; 1346 :                                 || CMD(argv[1],g2h,3) || CMD(argv[1],h2g,3)   ) ) ||
; 1347 :                ( argc == 5 && ( CMD(argv[3],ebcdic,1) || CMD(argv[3],ascii,1)
; 1348 :                                 || CMD(argv[3],g2h,3) || CMD(argv[3],h2g,3)   ) ) ) &&

  01332	83 bc 24 b0 04
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  0133a	0f 85 bc 00 00
	00		 jne	 $LN86@update_cod
  01340	b8 08 00 00 00	 mov	 eax, 8
  01345	48 6b c0 01	 imul	 rax, rax, 1
  01349	41 b8 01 00 00
	00		 mov	 r8d, 1
  0134f	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01357	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0135b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159479
  01362	e8 00 00 00 00	 call	 strcaseabbrev
  01367	85 c0		 test	 eax, eax
  01369	0f 85 4f 01 00
	00		 jne	 $LN85@update_cod
  0136f	b8 08 00 00 00	 mov	 eax, 8
  01374	48 6b c0 01	 imul	 rax, rax, 1
  01378	41 b8 01 00 00
	00		 mov	 r8d, 1
  0137e	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01386	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0138a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159480
  01391	e8 00 00 00 00	 call	 strcaseabbrev
  01396	85 c0		 test	 eax, eax
  01398	0f 85 20 01 00
	00		 jne	 $LN85@update_cod
  0139e	b8 08 00 00 00	 mov	 eax, 8
  013a3	48 6b c0 01	 imul	 rax, rax, 1
  013a7	41 b8 03 00 00
	00		 mov	 r8d, 3
  013ad	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  013b5	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  013b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159481
  013c0	e8 00 00 00 00	 call	 strcaseabbrev
  013c5	85 c0		 test	 eax, eax
  013c7	0f 85 f1 00 00
	00		 jne	 $LN85@update_cod
  013cd	b8 08 00 00 00	 mov	 eax, 8
  013d2	48 6b c0 01	 imul	 rax, rax, 1
  013d6	41 b8 03 00 00
	00		 mov	 r8d, 3
  013dc	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  013e4	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  013e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159482
  013ef	e8 00 00 00 00	 call	 strcaseabbrev
  013f4	85 c0		 test	 eax, eax
  013f6	0f 85 c2 00 00
	00		 jne	 $LN85@update_cod
$LN86@update_cod:
  013fc	83 bc 24 b0 04
	00 00 05	 cmp	 DWORD PTR argc$[rsp], 5
  01404	0f 85 14 05 00
	00		 jne	 $LN83@update_cod
  0140a	b8 08 00 00 00	 mov	 eax, 8
  0140f	48 6b c0 03	 imul	 rax, rax, 3
  01413	41 b8 01 00 00
	00		 mov	 r8d, 1
  01419	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01421	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  01425	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159484
  0142c	e8 00 00 00 00	 call	 strcaseabbrev
  01431	85 c0		 test	 eax, eax
  01433	0f 85 85 00 00
	00		 jne	 $LN87@update_cod
  01439	b8 08 00 00 00	 mov	 eax, 8
  0143e	48 6b c0 03	 imul	 rax, rax, 3
  01442	41 b8 01 00 00
	00		 mov	 r8d, 1
  01448	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01450	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  01454	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159485
  0145b	e8 00 00 00 00	 call	 strcaseabbrev
  01460	85 c0		 test	 eax, eax
  01462	75 5a		 jne	 SHORT $LN87@update_cod
  01464	b8 08 00 00 00	 mov	 eax, 8
  01469	48 6b c0 03	 imul	 rax, rax, 3
  0146d	41 b8 03 00 00
	00		 mov	 r8d, 3
  01473	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0147b	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0147f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159486
  01486	e8 00 00 00 00	 call	 strcaseabbrev
  0148b	85 c0		 test	 eax, eax
  0148d	75 2f		 jne	 SHORT $LN87@update_cod
  0148f	b8 08 00 00 00	 mov	 eax, 8
  01494	48 6b c0 03	 imul	 rax, rax, 3
  01498	41 b8 03 00 00
	00		 mov	 r8d, 3
  0149e	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  014a6	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  014aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159487
  014b1	e8 00 00 00 00	 call	 strcaseabbrev
  014b6	85 c0		 test	 eax, eax
  014b8	0f 84 60 04 00
	00		 je	 $LN83@update_cod
$LN87@update_cod:
$LN85@update_cod:
  014be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159488
  014c5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR codepage_conv
  014cc	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  014cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  014d5	85 c0		 test	 eax, eax
  014d7	0f 84 41 04 00
	00		 je	 $LN83@update_cod

; 1349 :              ( strcasecmp(codepage_conv->name,"user") != 0 )
; 1350 :            )
; 1351 :         {
; 1352 :             if ( ( argc == 3 && ( CMD(argv[1],ebcdic,1) || CMD(argv[1],g2h,3) ) ) ||

  014dd	83 bc 24 b0 04
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  014e5	75 5a		 jne	 SHORT $LN90@update_cod
  014e7	b8 08 00 00 00	 mov	 eax, 8
  014ec	48 6b c0 01	 imul	 rax, rax, 1
  014f0	41 b8 01 00 00
	00		 mov	 r8d, 1
  014f6	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  014fe	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  01502	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159492
  01509	e8 00 00 00 00	 call	 strcaseabbrev
  0150e	85 c0		 test	 eax, eax
  01510	0f 85 93 00 00
	00		 jne	 $LN89@update_cod
  01516	b8 08 00 00 00	 mov	 eax, 8
  0151b	48 6b c0 01	 imul	 rax, rax, 1
  0151f	41 b8 03 00 00
	00		 mov	 r8d, 3
  01525	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0152d	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  01531	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159493
  01538	e8 00 00 00 00	 call	 strcaseabbrev
  0153d	85 c0		 test	 eax, eax
  0153f	75 68		 jne	 SHORT $LN89@update_cod
$LN90@update_cod:
  01541	83 bc 24 b0 04
	00 00 05	 cmp	 DWORD PTR argc$[rsp], 5
  01549	0f 85 98 01 00
	00		 jne	 $LN88@update_cod
  0154f	b8 08 00 00 00	 mov	 eax, 8
  01554	48 6b c0 03	 imul	 rax, rax, 3
  01558	41 b8 01 00 00
	00		 mov	 r8d, 1
  0155e	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01566	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0156a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159495
  01571	e8 00 00 00 00	 call	 strcaseabbrev
  01576	85 c0		 test	 eax, eax
  01578	75 2f		 jne	 SHORT $LN91@update_cod
  0157a	b8 08 00 00 00	 mov	 eax, 8
  0157f	48 6b c0 03	 imul	 rax, rax, 3
  01583	41 b8 03 00 00
	00		 mov	 r8d, 3
  01589	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01591	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  01595	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159496
  0159c	e8 00 00 00 00	 call	 strcaseabbrev
  015a1	85 c0		 test	 eax, eax
  015a3	0f 84 3e 01 00
	00		 je	 $LN88@update_cod
$LN91@update_cod:
$LN89@update_cod:

; 1353 :                  ( argc == 5 && ( CMD(argv[3],ebcdic,1) || CMD(argv[3],g2h,3) ) ) )
; 1354 :             {
; 1355 :                 if ( argc == 3 )

  015a9	83 bc 24 b0 04
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  015b1	75 1f		 jne	 SHORT $LN92@update_cod

; 1356 :                     fn = argv[2];

  015b3	b8 08 00 00 00	 mov	 eax, 8
  015b8	48 6b c0 02	 imul	 rax, rax, 2
  015bc	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  015c4	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  015c8	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR fn$18[rsp], rax
  015d0	eb 1d		 jmp	 SHORT $LN93@update_cod
$LN92@update_cod:

; 1357 :                 else
; 1358 :                     fn = argv[4];

  015d2	b8 08 00 00 00	 mov	 eax, 8
  015d7	48 6b c0 04	 imul	 rax, rax, 4
  015db	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  015e3	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  015e7	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR fn$18[rsp], rax
$LN93@update_cod:

; 1359 : 
; 1360 :                 readcnt = import_file( fn, readbuf, (int)sizeof(readbuf) );

  015ef	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  015f5	48 8d 94 24 80
	03 00 00	 lea	 rdx, QWORD PTR readbuf$33[rsp]
  015fd	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR fn$18[rsp]
  01605	e8 00 00 00 00	 call	 import_file
  0160a	89 84 24 9c 00
	00 00		 mov	 DWORD PTR readcnt$14[rsp], eax

; 1361 : 
; 1362 :                 if ( readcnt == sizeof(readbuf) )

  01611	48 63 84 24 9c
	00 00 00	 movsxd	 rax, DWORD PTR readcnt$14[rsp]
  01619	48 3d 00 01 00
	00		 cmp	 rax, 256		; 00000100H
  0161f	0f 85 9f 00 00
	00		 jne	 $LN94@update_cod

; 1363 :                 {
; 1364 :                     memcpy(user_g_to_h,readbuf,sizeof(user_g_to_h));

  01625	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:user_g_to_h
  0162c	48 8d 8c 24 80
	03 00 00	 lea	 rcx, QWORD PTR readbuf$33[rsp]
  01634	48 8b f8	 mov	 rdi, rax
  01637	48 8b f1	 mov	 rsi, rcx
  0163a	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  0163f	f3 a4		 rep movsb

; 1365 :                     user_g_to_h_filled = TRUE;

  01641	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR user_g_to_h_filled, 1

; 1366 :                     WRMSG( HHC01490, "I", "Imported", "ebcdic/g2h", "from", fn );

  0164b	b9 01 00 00 00	 mov	 ecx, 1
  01650	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01656	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR fn$18[rsp]
  0165e	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01663	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159501
  0166a	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0166f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159502
  01676	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0167b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159503
  01682	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01687	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159504
  0168e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01693	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159505
  0169a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0169f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  016a4	41 b9 03 00 00
	00		 mov	 r9d, 3
  016aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159506
  016b1	ba 56 05 00 00	 mov	 edx, 1366		; 00000556H
  016b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159507
  016bd	e8 00 00 00 00	 call	 fwritemsg

; 1367 :                 }

  016c2	eb 23		 jmp	 SHORT $LN95@update_cod
$LN94@update_cod:

; 1368 :                 else
; 1369 :                 {
; 1370 :                     imp_exp_error( fn, "importing", "ebcdic/g2h", readcnt );

  016c4	44 8b 8c 24 9c
	00 00 00	 mov	 r9d, DWORD PTR readcnt$14[rsp]
  016cc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159508
  016d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159509
  016da	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR fn$18[rsp]
  016e2	e8 00 00 00 00	 call	 imp_exp_error
$LN95@update_cod:
$LN88@update_cod:

; 1371 :                 }
; 1372 :             }
; 1373 :             if ( ( argc == 3 && ( CMD(argv[1],ascii,1) || CMD(argv[1],h2g,3) ) ) ||

  016e7	83 bc 24 b0 04
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  016ef	75 5a		 jne	 SHORT $LN98@update_cod
  016f1	b8 08 00 00 00	 mov	 eax, 8
  016f6	48 6b c0 01	 imul	 rax, rax, 1
  016fa	41 b8 01 00 00
	00		 mov	 r8d, 1
  01700	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01708	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0170c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159513
  01713	e8 00 00 00 00	 call	 strcaseabbrev
  01718	85 c0		 test	 eax, eax
  0171a	0f 85 93 00 00
	00		 jne	 $LN97@update_cod
  01720	b8 08 00 00 00	 mov	 eax, 8
  01725	48 6b c0 01	 imul	 rax, rax, 1
  01729	41 b8 03 00 00
	00		 mov	 r8d, 3
  0172f	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01737	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0173b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159514
  01742	e8 00 00 00 00	 call	 strcaseabbrev
  01747	85 c0		 test	 eax, eax
  01749	75 68		 jne	 SHORT $LN97@update_cod
$LN98@update_cod:
  0174b	83 bc 24 b0 04
	00 00 05	 cmp	 DWORD PTR argc$[rsp], 5
  01753	0f 85 98 01 00
	00		 jne	 $LN96@update_cod
  01759	b8 08 00 00 00	 mov	 eax, 8
  0175e	48 6b c0 03	 imul	 rax, rax, 3
  01762	41 b8 01 00 00
	00		 mov	 r8d, 1
  01768	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01770	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  01774	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159516
  0177b	e8 00 00 00 00	 call	 strcaseabbrev
  01780	85 c0		 test	 eax, eax
  01782	75 2f		 jne	 SHORT $LN99@update_cod
  01784	b8 08 00 00 00	 mov	 eax, 8
  01789	48 6b c0 01	 imul	 rax, rax, 1
  0178d	41 b8 03 00 00
	00		 mov	 r8d, 3
  01793	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0179b	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0179f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159517
  017a6	e8 00 00 00 00	 call	 strcaseabbrev
  017ab	85 c0		 test	 eax, eax
  017ad	0f 84 3e 01 00
	00		 je	 $LN96@update_cod
$LN99@update_cod:
$LN97@update_cod:

; 1374 :                  ( argc == 5 && ( CMD(argv[3],ascii,1) || CMD(argv[1],h2g,3) ) ) )
; 1375 :             {
; 1376 :                 if ( argc == 3 )

  017b3	83 bc 24 b0 04
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  017bb	75 1f		 jne	 SHORT $LN100@update_cod

; 1377 :                     fn = argv[2];

  017bd	b8 08 00 00 00	 mov	 eax, 8
  017c2	48 6b c0 02	 imul	 rax, rax, 2
  017c6	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  017ce	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  017d2	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR fn$18[rsp], rax
  017da	eb 1d		 jmp	 SHORT $LN101@update_cod
$LN100@update_cod:

; 1378 :                 else
; 1379 :                     fn = argv[4];

  017dc	b8 08 00 00 00	 mov	 eax, 8
  017e1	48 6b c0 04	 imul	 rax, rax, 4
  017e5	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  017ed	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  017f1	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR fn$18[rsp], rax
$LN101@update_cod:

; 1380 : 
; 1381 :                 readcnt = import_file( fn, readbuf, (int)sizeof(readbuf) );

  017f9	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  017ff	48 8d 94 24 80
	03 00 00	 lea	 rdx, QWORD PTR readbuf$33[rsp]
  01807	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR fn$18[rsp]
  0180f	e8 00 00 00 00	 call	 import_file
  01814	89 84 24 9c 00
	00 00		 mov	 DWORD PTR readcnt$14[rsp], eax

; 1382 : 
; 1383 :                 if ( readcnt == sizeof(readbuf) )

  0181b	48 63 84 24 9c
	00 00 00	 movsxd	 rax, DWORD PTR readcnt$14[rsp]
  01823	48 3d 00 01 00
	00		 cmp	 rax, 256		; 00000100H
  01829	0f 85 9f 00 00
	00		 jne	 $LN102@update_cod

; 1384 :                 {
; 1385 :                     memcpy(user_h_to_g,readbuf,sizeof(user_h_to_g));

  0182f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:user_h_to_g
  01836	48 8d 8c 24 80
	03 00 00	 lea	 rcx, QWORD PTR readbuf$33[rsp]
  0183e	48 8b f8	 mov	 rdi, rax
  01841	48 8b f1	 mov	 rsi, rcx
  01844	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  01849	f3 a4		 rep movsb

; 1386 :                     user_h_to_g_filled = TRUE;

  0184b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR user_h_to_g_filled, 1

; 1387 :                     WRMSG( HHC01490, "I", "Imported", "ascii/h2g", "from", fn );

  01855	b9 01 00 00 00	 mov	 ecx, 1
  0185a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01860	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR fn$18[rsp]
  01868	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0186d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159522
  01874	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01879	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159523
  01880	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  01885	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159524
  0188c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01891	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159525
  01898	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0189d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159526
  018a4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  018a9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  018ae	41 b9 03 00 00
	00		 mov	 r9d, 3
  018b4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159527
  018bb	ba 6b 05 00 00	 mov	 edx, 1387		; 0000056bH
  018c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159528
  018c7	e8 00 00 00 00	 call	 fwritemsg

; 1388 :                 }

  018cc	eb 23		 jmp	 SHORT $LN103@update_cod
$LN102@update_cod:

; 1389 :                 else
; 1390 :                 {
; 1391 :                     imp_exp_error( fn, "importing", "ascii/h2g", readcnt );

  018ce	44 8b 8c 24 9c
	00 00 00	 mov	 r9d, DWORD PTR readcnt$14[rsp]
  018d6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159529
  018dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159530
  018e4	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR fn$18[rsp]
  018ec	e8 00 00 00 00	 call	 imp_exp_error
$LN103@update_cod:
$LN96@update_cod:

; 1392 :                 }
; 1393 :             }
; 1394 :             if ( user_h_to_g_filled && user_g_to_h_filled )

  018f1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR user_h_to_g_filled, 0
  018f8	74 15		 je	 SHORT $LN104@update_cod
  018fa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR user_g_to_h_filled, 0
  01901	74 0c		 je	 SHORT $LN104@update_cod

; 1395 :                 user_in_use = TRUE;

  01903	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR user_in_use, 1
  0190d	eb 0a		 jmp	 SHORT $LN105@update_cod
$LN104@update_cod:

; 1396 :             else
; 1397 :                 user_in_use = FALSE;

  0190f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR user_in_use, 0
$LN105@update_cod:

; 1398 :         }

  01919	e9 bd 00 00 00	 jmp	 $LN84@update_cod
$LN83@update_cod:

; 1399 :         else
; 1400 :         {
; 1401 :             if ( strcasecmp(codepage_conv->name,"user") == 0 )

  0191e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159535
  01925	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR codepage_conv
  0192c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0192f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  01935	85 c0		 test	 eax, eax
  01937	75 54		 jne	 SHORT $LN106@update_cod

; 1402 :             {
; 1403 :                 WRMSG( HHC01489, "E", "import" );

  01939	b9 01 00 00 00	 mov	 ecx, 1
  0193e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01944	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159536
  0194b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01950	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159537
  01957	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0195c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159538
  01963	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01968	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0196d	41 b9 03 00 00
	00		 mov	 r9d, 3
  01973	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159539
  0197a	ba 7b 05 00 00	 mov	 edx, 1403		; 0000057bH
  0197f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159540
  01986	e8 00 00 00 00	 call	 fwritemsg

; 1404 :             }

  0198b	eb 46		 jmp	 SHORT $LN107@update_cod
$LN106@update_cod:

; 1405 :             else
; 1406 :                 WRMSG( HHC17000, "E" );

  0198d	b9 01 00 00 00	 mov	 ecx, 1
  01992	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01998	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159541
  0199f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  019a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159542
  019ab	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  019b0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  019b5	41 b9 03 00 00
	00		 mov	 r9d, 3
  019bb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159543
  019c2	ba 7e 05 00 00	 mov	 edx, 1406		; 0000057eH
  019c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159544
  019ce	e8 00 00 00 00	 call	 fwritemsg
$LN107@update_cod:

; 1407 :             rc = -1;

  019d3	c7 44 24 64 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN84@update_cod:

; 1408 :         }
; 1409 :     }

  019db	e9 53 0d 00 00	 jmp	 $LN82@update_cod
$LN81@update_cod:

; 1410 :     else if ( CMD(cmd,reset,5) )

  019e0	41 b8 05 00 00
	00		 mov	 r8d, 5
  019e6	48 8b 94 24 c0
	04 00 00	 mov	 rdx, QWORD PTR cmd$[rsp]
  019ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159547
  019f5	e8 00 00 00 00	 call	 strcaseabbrev
  019fa	85 c0		 test	 eax, eax
  019fc	0f 84 09 01 00
	00		 je	 $LN108@update_cod

; 1411 :     {
; 1412 :         if ( strcasecmp(codepage_conv->name,"user") == 0 )

  01a02	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159550
  01a09	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR codepage_conv
  01a10	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  01a13	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  01a19	85 c0		 test	 eax, eax
  01a1b	75 5f		 jne	 SHORT $LN110@update_cod

; 1413 :         {
; 1414 :             WRMSG( HHC01489, "E", "reset" );

  01a1d	b9 01 00 00 00	 mov	 ecx, 1
  01a22	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01a28	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159551
  01a2f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01a34	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159552
  01a3b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01a40	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159553
  01a47	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01a4c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01a51	41 b9 03 00 00
	00		 mov	 r9d, 3
  01a57	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159554
  01a5e	ba 86 05 00 00	 mov	 edx, 1414		; 00000586H
  01a63	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159555
  01a6a	e8 00 00 00 00	 call	 fwritemsg

; 1415 :             rc = -1;

  01a6f	c7 44 24 64 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 1416 :         }

  01a77	e9 8a 00 00 00	 jmp	 $LN111@update_cod
$LN110@update_cod:

; 1417 :         else
; 1418 :         {
; 1419 :             memset(user_h_to_g, 0, sizeof(user_h_to_g));

  01a7c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:user_h_to_g
  01a83	48 8b f8	 mov	 rdi, rax
  01a86	33 c0		 xor	 eax, eax
  01a88	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  01a8d	f3 aa		 rep stosb

; 1420 :             user_h_to_g_filled = FALSE;

  01a8f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR user_h_to_g_filled, 0

; 1421 :             memset(user_g_to_h, 0, sizeof(user_g_to_h));

  01a99	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:user_g_to_h
  01aa0	48 8b f8	 mov	 rdi, rax
  01aa3	33 c0		 xor	 eax, eax
  01aa5	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  01aaa	f3 aa		 rep stosb

; 1422 :             user_g_to_h_filled = FALSE;

  01aac	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR user_g_to_h_filled, 0

; 1423 :             user_in_use = FALSE;

  01ab6	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR user_in_use, 0

; 1424 :             WRMSG( HHC01479, "I" );

  01ac0	b9 01 00 00 00	 mov	 ecx, 1
  01ac5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01acb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159556
  01ad2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01ad7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159557
  01ade	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01ae3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01ae8	41 b9 03 00 00
	00		 mov	 r9d, 3
  01aee	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159558
  01af5	ba 90 05 00 00	 mov	 edx, 1424		; 00000590H
  01afa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159559
  01b01	e8 00 00 00 00	 call	 fwritemsg
$LN111@update_cod:

; 1425 :         }
; 1426 :     }

  01b06	e9 28 0c 00 00	 jmp	 $LN109@update_cod
$LN108@update_cod:

; 1427 :     else if ( CMD(cmd,dsp,3) || CMD(cmd,display,3) )

  01b0b	41 b8 03 00 00
	00		 mov	 r8d, 3
  01b11	48 8b 94 24 c0
	04 00 00	 mov	 rdx, QWORD PTR cmd$[rsp]
  01b19	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159563
  01b20	e8 00 00 00 00	 call	 strcaseabbrev
  01b25	85 c0		 test	 eax, eax
  01b27	75 22		 jne	 SHORT $LN114@update_cod
  01b29	41 b8 03 00 00
	00		 mov	 r8d, 3
  01b2f	48 8b 94 24 c0
	04 00 00	 mov	 rdx, QWORD PTR cmd$[rsp]
  01b37	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159564
  01b3e	e8 00 00 00 00	 call	 strcaseabbrev
  01b43	85 c0		 test	 eax, eax
  01b45	0f 84 41 05 00
	00		 je	 $LN112@update_cod
$LN114@update_cod:

; 1428 :     {
; 1429 :         unsigned char   *tbl = NULL;

  01b4b	48 c7 84 24 18
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tbl$25[rsp], 0

; 1430 :         char   *tblname = NULL;

  01b57	48 c7 84 24 10
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tblname$24[rsp], 0

; 1431 :         int     g_to_h = FALSE;

  01b63	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR g_to_h$22[rsp], 0

; 1432 :         int     valid = FALSE;

  01b6e	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR valid$21[rsp], 0

; 1433 :         char    hbuf[64];
; 1434 :         BYTE    cbuf[32];
; 1435 :         int     i, j, k, o;
; 1436 :         BYTE    c;
; 1437 : 
; 1438 :         if ( CMD(argv[1],ebcdic,1) || CMD(argv[1],g2h,3) )

  01b79	b8 08 00 00 00	 mov	 eax, 8
  01b7e	48 6b c0 01	 imul	 rax, rax, 1
  01b82	41 b8 01 00 00
	00		 mov	 r8d, 1
  01b88	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01b90	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  01b94	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159568
  01b9b	e8 00 00 00 00	 call	 strcaseabbrev
  01ba0	85 c0		 test	 eax, eax
  01ba2	75 2b		 jne	 SHORT $LN117@update_cod
  01ba4	b8 08 00 00 00	 mov	 eax, 8
  01ba9	48 6b c0 01	 imul	 rax, rax, 1
  01bad	41 b8 03 00 00
	00		 mov	 r8d, 3
  01bb3	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01bbb	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  01bbf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159569
  01bc6	e8 00 00 00 00	 call	 strcaseabbrev
  01bcb	85 c0		 test	 eax, eax
  01bcd	74 5d		 je	 SHORT $LN115@update_cod
$LN117@update_cod:

; 1439 :         {
; 1440 :             tbl     = user_g_to_h;

  01bcf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:user_g_to_h
  01bd6	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tbl$25[rsp], rax

; 1441 :             tblname = "ebcdic/g2h";

  01bde	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159570
  01be5	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tblname$24[rsp], rax

; 1442 :             g_to_h  = FALSE;

  01bed	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR g_to_h$22[rsp], 0

; 1443 :             valid   = user_g_to_h_filled ? TRUE : FALSE;

  01bf8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR user_g_to_h_filled, 0
  01bff	74 0d		 je	 SHORT $LN141@update_cod
  01c01	c7 84 24 d0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv1152[rsp], 1
  01c0c	eb 0b		 jmp	 SHORT $LN142@update_cod
$LN141@update_cod:
  01c0e	c7 84 24 d0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1152[rsp], 0
$LN142@update_cod:
  01c19	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR tv1152[rsp]
  01c20	89 84 24 c0 00
	00 00		 mov	 DWORD PTR valid$21[rsp], eax

; 1444 :         }

  01c27	e9 fe 00 00 00	 jmp	 $LN116@update_cod
$LN115@update_cod:

; 1445 :         else if ( CMD(argv[1],ascii,1) || CMD(argv[1],h2g,3) )

  01c2c	b8 08 00 00 00	 mov	 eax, 8
  01c31	48 6b c0 01	 imul	 rax, rax, 1
  01c35	41 b8 01 00 00
	00		 mov	 r8d, 1
  01c3b	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01c43	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  01c47	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159574
  01c4e	e8 00 00 00 00	 call	 strcaseabbrev
  01c53	85 c0		 test	 eax, eax
  01c55	75 2b		 jne	 SHORT $LN120@update_cod
  01c57	b8 08 00 00 00	 mov	 eax, 8
  01c5c	48 6b c0 01	 imul	 rax, rax, 1
  01c60	41 b8 03 00 00
	00		 mov	 r8d, 3
  01c66	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01c6e	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  01c72	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159575
  01c79	e8 00 00 00 00	 call	 strcaseabbrev
  01c7e	85 c0		 test	 eax, eax
  01c80	74 5a		 je	 SHORT $LN118@update_cod
$LN120@update_cod:

; 1446 :         {
; 1447 :             tbl     = user_h_to_g;

  01c82	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:user_h_to_g
  01c89	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tbl$25[rsp], rax

; 1448 :             tblname = "ascii/h2g";

  01c91	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159576
  01c98	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tblname$24[rsp], rax

; 1449 :             g_to_h  = TRUE;

  01ca0	c7 84 24 c4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR g_to_h$22[rsp], 1

; 1450 :             valid   = user_h_to_g_filled ? TRUE : FALSE;

  01cab	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR user_h_to_g_filled, 0
  01cb2	74 0d		 je	 SHORT $LN143@update_cod
  01cb4	c7 84 24 d4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv1168[rsp], 1
  01cbf	eb 0b		 jmp	 SHORT $LN144@update_cod
$LN143@update_cod:
  01cc1	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1168[rsp], 0
$LN144@update_cod:
  01ccc	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR tv1168[rsp]
  01cd3	89 84 24 c0 00
	00 00		 mov	 DWORD PTR valid$21[rsp], eax

; 1451 :         }

  01cda	eb 4e		 jmp	 SHORT $LN119@update_cod
$LN118@update_cod:

; 1452 :         else
; 1453 :         {
; 1454 :             WRMSG( HHC17000, "E" );

  01cdc	b9 01 00 00 00	 mov	 ecx, 1
  01ce1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01ce7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159577
  01cee	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01cf3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159578
  01cfa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01cff	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01d04	41 b9 03 00 00
	00		 mov	 r9d, 3
  01d0a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159579
  01d11	ba ae 05 00 00	 mov	 edx, 1454		; 000005aeH
  01d16	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159580
  01d1d	e8 00 00 00 00	 call	 fwritemsg

; 1455 :             rc = -1;

  01d22	c7 44 24 64 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN119@update_cod:
$LN116@update_cod:

; 1456 :         }
; 1457 : 
; 1458 :         if ( rc == 0 )

  01d2a	83 7c 24 64 00	 cmp	 DWORD PTR rc$[rsp], 0
  01d2f	0f 85 49 03 00
	00		 jne	 $LN121@update_cod

; 1459 :         {
; 1460 :             WRMSG( HHC01484, "I", tblname, valid ? "" : ", table is invalid" );

  01d35	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR valid$21[rsp], 0
  01d3d	74 11		 je	 SHORT $LN145@update_cod
  01d3f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159582
  01d46	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv1180[rsp], rax
  01d4e	eb 0f		 jmp	 SHORT $LN146@update_cod
$LN145@update_cod:
  01d50	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159583
  01d57	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv1180[rsp], rax
$LN146@update_cod:
  01d5f	b9 01 00 00 00	 mov	 ecx, 1
  01d64	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01d6a	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR tv1180[rsp]
  01d72	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  01d77	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tblname$24[rsp]
  01d7f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01d84	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159584
  01d8b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01d90	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159585
  01d97	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01d9c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01da1	41 b9 03 00 00
	00		 mov	 r9d, 3
  01da7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159586
  01dae	ba b4 05 00 00	 mov	 edx, 1460		; 000005b4H
  01db3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159587
  01dba	e8 00 00 00 00	 call	 fwritemsg

; 1461 :             WRMSG( HHC01485, "I" );

  01dbf	b9 01 00 00 00	 mov	 ecx, 1
  01dc4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01dca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159588
  01dd1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01dd6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159589
  01ddd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01de2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01de7	41 b9 03 00 00
	00		 mov	 r9d, 3
  01ded	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159590
  01df4	ba b5 05 00 00	 mov	 edx, 1461		; 000005b5H
  01df9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159591
  01e00	e8 00 00 00 00	 call	 fwritemsg

; 1462 :             for( o = 0; o < 256; o += 16 )

  01e05	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR o$11[rsp], 0
  01e10	eb 11		 jmp	 SHORT $LN19@update_cod
$LN17@update_cod:
  01e12	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR o$11[rsp]
  01e19	83 c0 10	 add	 eax, 16
  01e1c	89 84 24 90 00
	00 00		 mov	 DWORD PTR o$11[rsp], eax
$LN19@update_cod:
  01e23	81 bc 24 90 00
	00 00 00 01 00
	00		 cmp	 DWORD PTR o$11[rsp], 256 ; 00000100H
  01e2e	0f 8d 4a 02 00
	00		 jge	 $LN18@update_cod

; 1463 :             {
; 1464 :                 memset( hbuf, 0, sizeof(hbuf) );

  01e34	48 8d 84 24 40
	02 00 00	 lea	 rax, QWORD PTR hbuf$31[rsp]
  01e3c	48 8b f8	 mov	 rdi, rax
  01e3f	33 c0		 xor	 eax, eax
  01e41	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  01e46	f3 aa		 rep stosb

; 1465 :                 memset( cbuf, 0, sizeof(cbuf) );

  01e48	48 8d 84 24 20
	02 00 00	 lea	 rax, QWORD PTR cbuf$30[rsp]
  01e50	48 8b f8	 mov	 rdi, rax
  01e53	33 c0		 xor	 eax, eax
  01e55	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  01e5a	f3 aa		 rep stosb

; 1466 : 
; 1467 :                 for (i = 0, j = 0, k = 0; i < 16; i++)

  01e5c	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$15[rsp], 0
  01e67	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR j$9[rsp], 0
  01e72	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR k$10[rsp], 0
  01e7d	eb 10		 jmp	 SHORT $LN22@update_cod
$LN20@update_cod:
  01e7f	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR i$15[rsp]
  01e86	ff c0		 inc	 eax
  01e88	89 84 24 a0 00
	00 00		 mov	 DWORD PTR i$15[rsp], eax
$LN22@update_cod:
  01e8f	83 bc 24 a0 00
	00 00 10	 cmp	 DWORD PTR i$15[rsp], 16
  01e97	0f 8d 3e 01 00
	00		 jge	 $LN21@update_cod

; 1468 :                 {
; 1469 :                     c = tbl[o+i];

  01e9d	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR i$15[rsp]
  01ea4	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR o$11[rsp]
  01eab	03 c8		 add	 ecx, eax
  01ead	8b c1		 mov	 eax, ecx
  01eaf	48 98		 cdqe
  01eb1	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tbl$25[rsp]
  01eb9	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01ebd	88 44 24 68	 mov	 BYTE PTR c$2[rsp], al

; 1470 :                     if ( (i & 0x3) == 0x0 )

  01ec1	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR i$15[rsp]
  01ec8	83 e0 03	 and	 eax, 3
  01ecb	85 c0		 test	 eax, eax
  01ecd	75 40		 jne	 SHORT $LN122@update_cod

; 1471 :                     {
; 1472 :                         hbuf[j++] = SPACE;

  01ecf	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR j$9[rsp]
  01ed7	c6 84 04 40 02
	00 00 20	 mov	 BYTE PTR hbuf$31[rsp+rax], 32 ; 00000020H
  01edf	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR j$9[rsp]
  01ee6	ff c0		 inc	 eax
  01ee8	89 84 24 88 00
	00 00		 mov	 DWORD PTR j$9[rsp], eax

; 1473 :                         cbuf[k++] = SPACE;

  01eef	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR k$10[rsp]
  01ef7	c6 84 04 20 02
	00 00 20	 mov	 BYTE PTR cbuf$30[rsp+rax], 32 ; 00000020H
  01eff	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR k$10[rsp]
  01f06	ff c0		 inc	 eax
  01f08	89 84 24 8c 00
	00 00		 mov	 DWORD PTR k$10[rsp], eax
$LN122@update_cod:

; 1474 :                     }
; 1475 :                     j += idx_snprintf( j, hbuf, sizeof(hbuf), "%2.2X", c );

  01f0f	0f b6 44 24 68	 movzx	 eax, BYTE PTR c$2[rsp]
  01f14	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  01f18	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159593
  01f1f	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  01f25	48 8d 94 24 40
	02 00 00	 lea	 rdx, QWORD PTR hbuf$31[rsp]
  01f2d	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR j$9[rsp]
  01f34	e8 00 00 00 00	 call	 idx_snprintf
  01f39	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR j$9[rsp]
  01f40	03 c8		 add	 ecx, eax
  01f42	8b c1		 mov	 eax, ecx
  01f44	89 84 24 88 00
	00 00		 mov	 DWORD PTR j$9[rsp], eax

; 1476 :                     if ( g_to_h) c = guest_to_host(c);

  01f4b	83 bc 24 c4 00
	00 00 00	 cmp	 DWORD PTR g_to_h$22[rsp], 0
  01f53	74 0e		 je	 SHORT $LN123@update_cod
  01f55	0f b6 4c 24 68	 movzx	 ecx, BYTE PTR c$2[rsp]
  01f5a	e8 00 00 00 00	 call	 guest_to_host
  01f5f	88 44 24 68	 mov	 BYTE PTR c$2[rsp], al
$LN123@update_cod:

; 1477 :                     cbuf[k++] = ( !isprint(c) ? '.' : c );

  01f63	0f b6 44 24 68	 movzx	 eax, BYTE PTR c$2[rsp]
  01f68	8b c8		 mov	 ecx, eax
  01f6a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isprint
  01f70	85 c0		 test	 eax, eax
  01f72	75 0d		 jne	 SHORT $LN147@update_cod
  01f74	c7 84 24 d8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv1310[rsp], 1
  01f7f	eb 0b		 jmp	 SHORT $LN148@update_cod
$LN147@update_cod:
  01f81	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1310[rsp], 0
$LN148@update_cod:
  01f8c	83 bc 24 d8 00
	00 00 00	 cmp	 DWORD PTR tv1310[rsp], 0
  01f94	74 0d		 je	 SHORT $LN149@update_cod
  01f96	c7 84 24 dc 00
	00 00 2e 00 00
	00		 mov	 DWORD PTR tv1313[rsp], 46 ; 0000002eH
  01fa1	eb 0c		 jmp	 SHORT $LN150@update_cod
$LN149@update_cod:
  01fa3	0f b6 44 24 68	 movzx	 eax, BYTE PTR c$2[rsp]
  01fa8	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv1313[rsp], eax
$LN150@update_cod:
  01faf	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR k$10[rsp]
  01fb7	0f b6 8c 24 dc
	00 00 00	 movzx	 ecx, BYTE PTR tv1313[rsp]
  01fbf	88 8c 04 20 02
	00 00		 mov	 BYTE PTR cbuf$30[rsp+rax], cl
  01fc6	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR k$10[rsp]
  01fcd	ff c0		 inc	 eax
  01fcf	89 84 24 8c 00
	00 00		 mov	 DWORD PTR k$10[rsp], eax

; 1478 :                 } /* end for(i) */

  01fd6	e9 a4 fe ff ff	 jmp	 $LN20@update_cod
$LN21@update_cod:

; 1479 :                 WRMSG( HHC01486, "I", ( ( o >> 4 ) & 0xf ), hbuf, cbuf, ( ( o >> 4 ) & 0xf ) );

  01fdb	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR o$11[rsp]
  01fe2	c1 f8 04	 sar	 eax, 4
  01fe5	83 e0 0f	 and	 eax, 15
  01fe8	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv1316[rsp], eax
  01fef	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR o$11[rsp]
  01ff6	c1 f9 04	 sar	 ecx, 4
  01ff9	83 e1 0f	 and	 ecx, 15
  01ffc	89 8c 24 fc 00
	00 00		 mov	 DWORD PTR tv1321[rsp], ecx
  02003	b9 01 00 00 00	 mov	 ecx, 1
  02008	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0200e	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR tv1316[rsp]
  02015	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  02019	48 8d 8c 24 20
	02 00 00	 lea	 rcx, QWORD PTR cbuf$30[rsp]
  02021	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02026	48 8d 8c 24 40
	02 00 00	 lea	 rcx, QWORD PTR hbuf$31[rsp]
  0202e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  02033	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR tv1321[rsp]
  0203a	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0203e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159595
  02045	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0204a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159596
  02051	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02056	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0205b	41 b9 03 00 00
	00		 mov	 r9d, 3
  02061	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159597
  02068	ba c7 05 00 00	 mov	 edx, 1479		; 000005c7H
  0206d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159598
  02074	e8 00 00 00 00	 call	 fwritemsg

; 1480 :             }

  02079	e9 94 fd ff ff	 jmp	 $LN17@update_cod
$LN18@update_cod:
$LN121@update_cod:

; 1481 :         }
; 1482 :         return rc;

  0207e	8b 44 24 64	 mov	 eax, DWORD PTR rc$[rsp]
  02082	e9 b0 06 00 00	 jmp	 $LN1@update_cod

; 1483 :     }

  02087	e9 a7 06 00 00	 jmp	 $LN113@update_cod
$LN112@update_cod:

; 1484 :     else if ( CMD(cmd,reference,3) )

  0208c	41 b8 03 00 00
	00		 mov	 r8d, 3
  02092	48 8b 94 24 c0
	04 00 00	 mov	 rdx, QWORD PTR cmd$[rsp]
  0209a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159601
  020a1	e8 00 00 00 00	 call	 strcaseabbrev
  020a6	85 c0		 test	 eax, eax
  020a8	0f 84 37 06 00
	00		 je	 $LN124@update_cod

; 1485 :     {
; 1486 :         CPCONV *cpref = cpconv;

  020ae	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:cpconv
  020b5	48 89 44 24 70	 mov	 QWORD PTR cpref$4[rsp], rax

; 1487 :         if ( strcasecmp(codepage_conv->name,"user") == 0 )

  020ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159604
  020c1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR codepage_conv
  020c8	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  020cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  020d1	85 c0		 test	 eax, eax
  020d3	75 5f		 jne	 SHORT $LN126@update_cod

; 1488 :         {
; 1489 :             WRMSG( HHC01489, "E", "refresh/copy" );

  020d5	b9 01 00 00 00	 mov	 ecx, 1
  020da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  020e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159605
  020e7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  020ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159606
  020f3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  020f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159607
  020ff	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02104	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02109	41 b9 03 00 00
	00		 mov	 r9d, 3
  0210f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159608
  02116	ba d1 05 00 00	 mov	 edx, 1489		; 000005d1H
  0211b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159609
  02122	e8 00 00 00 00	 call	 fwritemsg

; 1490 :             rc = -2;

  02127	c7 44 24 64 fe
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -2

; 1491 :         }

  0212f	e9 c1 01 00 00	 jmp	 $LN127@update_cod
$LN126@update_cod:

; 1492 :         else if ( argc == 2 && !CMD(argv[1],user,4) )

  02134	83 bc 24 b0 04
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0213c	0f 85 b3 01 00
	00		 jne	 $LN128@update_cod
  02142	b8 08 00 00 00	 mov	 eax, 8
  02147	48 6b c0 01	 imul	 rax, rax, 1
  0214b	41 b8 04 00 00
	00		 mov	 r8d, 4
  02151	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  02159	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0215d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159611
  02164	e8 00 00 00 00	 call	 strcaseabbrev
  02169	85 c0		 test	 eax, eax
  0216b	0f 85 84 01 00
	00		 jne	 $LN128@update_cod

; 1493 :         {
; 1494 :             for(cpref = cpconv;

  02171	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:cpconv
  02178	48 89 44 24 70	 mov	 QWORD PTR cpref$4[rsp], rax
  0217d	eb 0e		 jmp	 SHORT $LN25@update_cod
$LN23@update_cod:

; 1496 :                 cpref++);

  0217f	48 8b 44 24 70	 mov	 rax, QWORD PTR cpref$4[rsp]
  02184	48 83 c0 18	 add	 rax, 24
  02188	48 89 44 24 70	 mov	 QWORD PTR cpref$4[rsp], rax
$LN25@update_cod:

; 1495 :                 cpref->name && strcasecmp(cpref->name,argv[1]);

  0218d	48 8b 44 24 70	 mov	 rax, QWORD PTR cpref$4[rsp]
  02192	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  02196	74 29		 je	 SHORT $LN24@update_cod
  02198	b8 08 00 00 00	 mov	 eax, 8
  0219d	48 6b c0 01	 imul	 rax, rax, 1
  021a1	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  021a9	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  021ad	48 8b 44 24 70	 mov	 rax, QWORD PTR cpref$4[rsp]
  021b2	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  021b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  021bb	85 c0		 test	 eax, eax
  021bd	74 02		 je	 SHORT $LN24@update_cod

; 1496 :                 cpref++);

  021bf	eb be		 jmp	 SHORT $LN23@update_cod
$LN24@update_cod:

; 1497 : 
; 1498 :             if(cpref->name)

  021c1	48 8b 44 24 70	 mov	 rax, QWORD PTR cpref$4[rsp]
  021c6	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  021ca	0f 84 ad 00 00
	00		 je	 $LN129@update_cod

; 1499 :             {
; 1500 :                 memcpy(user_h_to_g,cpref->h2g,sizeof(user_h_to_g));

  021d0	48 8b 44 24 70	 mov	 rax, QWORD PTR cpref$4[rsp]
  021d5	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  021d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:user_h_to_g
  021e0	48 8b f9	 mov	 rdi, rcx
  021e3	48 8b f0	 mov	 rsi, rax
  021e6	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  021eb	f3 a4		 rep movsb

; 1501 :                 user_h_to_g_filled = TRUE;

  021ed	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR user_h_to_g_filled, 1

; 1502 :                 memcpy(user_g_to_h,cpref->g2h,sizeof(user_g_to_h));

  021f7	48 8b 44 24 70	 mov	 rax, QWORD PTR cpref$4[rsp]
  021fc	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  02200	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:user_g_to_h
  02207	48 8b f9	 mov	 rdi, rcx
  0220a	48 8b f0	 mov	 rsi, rax
  0220d	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  02212	f3 a4		 rep movsb

; 1503 :                 user_g_to_h_filled = TRUE;

  02214	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR user_g_to_h_filled, 1

; 1504 :                 user_in_use = TRUE;

  0221e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR user_in_use, 1

; 1505 :                 WRMSG( HHC01478, "I", cpref->name );

  02228	b9 01 00 00 00	 mov	 ecx, 1
  0222d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02233	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cpref$4[rsp]
  02238	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0223b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02240	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159614
  02247	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0224c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159615
  02253	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02258	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0225d	41 b9 03 00 00
	00		 mov	 r9d, 3
  02263	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159616
  0226a	ba e1 05 00 00	 mov	 edx, 1505		; 000005e1H
  0226f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159617
  02276	e8 00 00 00 00	 call	 fwritemsg

; 1506 :             }

  0227b	eb 78		 jmp	 SHORT $LN130@update_cod
$LN129@update_cod:

; 1507 :             else
; 1508 :             {
; 1509 :                 WRMSG (HHC01475, "E", argv[1]);

  0227d	b8 08 00 00 00	 mov	 eax, 8
  02282	48 6b c0 01	 imul	 rax, rax, 1
  02286	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR tv1401[rsp], rax
  0228e	b9 01 00 00 00	 mov	 ecx, 1
  02293	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02299	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  022a1	48 8b 94 24 90
	01 00 00	 mov	 rdx, QWORD PTR tv1401[rsp]
  022a9	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  022ad	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  022b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159618
  022b9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  022be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159619
  022c5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  022ca	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  022cf	41 b9 03 00 00
	00		 mov	 r9d, 3
  022d5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159620
  022dc	ba e5 05 00 00	 mov	 edx, 1509		; 000005e5H
  022e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159621
  022e8	e8 00 00 00 00	 call	 fwritemsg

; 1510 :                 rc = -1;

  022ed	c7 44 24 64 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN130@update_cod:
$LN128@update_cod:
$LN127@update_cod:

; 1511 :             }
; 1512 :         }
; 1513 : 
; 1514 :         if ( argc == 1 || rc == -1 )

  022f5	83 bc 24 b0 04
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  022fd	74 0b		 je	 SHORT $LN132@update_cod
  022ff	83 7c 24 64 ff	 cmp	 DWORD PTR rc$[rsp], -1
  02304	0f 85 ca 03 00
	00		 jne	 $LN131@update_cod
$LN132@update_cod:

; 1515 :         {
; 1516 :             int i;
; 1517 : 
; 1518 :             WRMSG( HHC01481, "I" );

  0230a	b9 01 00 00 00	 mov	 ecx, 1
  0230f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02315	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159624
  0231c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02321	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159625
  02328	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0232d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02332	41 b9 03 00 00
	00		 mov	 r9d, 3
  02338	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159626
  0233f	ba ee 05 00 00	 mov	 edx, 1518		; 000005eeH
  02344	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159627
  0234b	e8 00 00 00 00	 call	 fwritemsg

; 1519 :             for ( i = 0, cpref = cpconv; ; i += 4 )

  02350	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR i$3[rsp], 0
  02358	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:cpconv
  0235f	48 89 44 24 70	 mov	 QWORD PTR cpref$4[rsp], rax
  02364	eb 0b		 jmp	 SHORT $LN28@update_cod
$LN26@update_cod:
  02366	8b 44 24 6c	 mov	 eax, DWORD PTR i$3[rsp]
  0236a	83 c0 04	 add	 eax, 4
  0236d	89 44 24 6c	 mov	 DWORD PTR i$3[rsp], eax
$LN28@update_cod:

; 1520 :             {
; 1521 : 
; 1522 :                 if ( cpref[i].name == NULL || CMD(cpref[i].name,user,4) ) break;

  02371	48 63 44 24 6c	 movsxd	 rax, DWORD PTR i$3[rsp]
  02376	48 6b c0 18	 imul	 rax, rax, 24
  0237a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cpref$4[rsp]
  0237f	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  02384	74 28		 je	 SHORT $LN134@update_cod
  02386	48 63 44 24 6c	 movsxd	 rax, DWORD PTR i$3[rsp]
  0238b	48 6b c0 18	 imul	 rax, rax, 24
  0238f	41 b8 04 00 00
	00		 mov	 r8d, 4
  02395	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cpref$4[rsp]
  0239a	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0239e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159630
  023a5	e8 00 00 00 00	 call	 strcaseabbrev
  023aa	85 c0		 test	 eax, eax
  023ac	74 05		 je	 SHORT $LN133@update_cod
$LN134@update_cod:
  023ae	e9 21 03 00 00	 jmp	 $LN27@update_cod
$LN133@update_cod:

; 1523 : 
; 1524 :                 WRMSG( HHC01482, "I",

  023b3	8b 44 24 6c	 mov	 eax, DWORD PTR i$3[rsp]
  023b7	83 c0 03	 add	 eax, 3
  023ba	48 98		 cdqe
  023bc	48 6b c0 18	 imul	 rax, rax, 24
  023c0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cpref$4[rsp]
  023c5	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  023ca	75 11		 jne	 SHORT $LN153@update_cod
  023cc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159631
  023d3	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv1461[rsp], rax
  023db	eb 6b		 jmp	 SHORT $LN154@update_cod
$LN153@update_cod:
  023dd	8b 44 24 6c	 mov	 eax, DWORD PTR i$3[rsp]
  023e1	83 c0 03	 add	 eax, 3
  023e4	48 98		 cdqe
  023e6	48 6b c0 18	 imul	 rax, rax, 24
  023ea	41 b8 04 00 00
	00		 mov	 r8d, 4
  023f0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cpref$4[rsp]
  023f5	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  023f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159632
  02400	e8 00 00 00 00	 call	 strcaseabbrev
  02405	85 c0		 test	 eax, eax
  02407	74 11		 je	 SHORT $LN151@update_cod
  02409	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159633
  02410	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv1460[rsp], rax
  02418	eb 1e		 jmp	 SHORT $LN152@update_cod
$LN151@update_cod:
  0241a	8b 44 24 6c	 mov	 eax, DWORD PTR i$3[rsp]
  0241e	83 c0 03	 add	 eax, 3
  02421	48 98		 cdqe
  02423	48 6b c0 18	 imul	 rax, rax, 24
  02427	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cpref$4[rsp]
  0242c	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  02430	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv1460[rsp], rax
$LN152@update_cod:
  02438	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR tv1460[rsp]
  02440	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv1461[rsp], rax
$LN154@update_cod:
  02448	8b 44 24 6c	 mov	 eax, DWORD PTR i$3[rsp]
  0244c	83 c0 02	 add	 eax, 2
  0244f	48 98		 cdqe
  02451	48 6b c0 18	 imul	 rax, rax, 24
  02455	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cpref$4[rsp]
  0245a	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0245f	75 11		 jne	 SHORT $LN157@update_cod
  02461	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159634
  02468	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv1517[rsp], rax
  02470	eb 6b		 jmp	 SHORT $LN158@update_cod
$LN157@update_cod:
  02472	8b 44 24 6c	 mov	 eax, DWORD PTR i$3[rsp]
  02476	83 c0 02	 add	 eax, 2
  02479	48 98		 cdqe
  0247b	48 6b c0 18	 imul	 rax, rax, 24
  0247f	41 b8 04 00 00
	00		 mov	 r8d, 4
  02485	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cpref$4[rsp]
  0248a	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0248e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159635
  02495	e8 00 00 00 00	 call	 strcaseabbrev
  0249a	85 c0		 test	 eax, eax
  0249c	74 11		 je	 SHORT $LN155@update_cod
  0249e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159636
  024a5	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv1516[rsp], rax
  024ad	eb 1e		 jmp	 SHORT $LN156@update_cod
$LN155@update_cod:
  024af	8b 44 24 6c	 mov	 eax, DWORD PTR i$3[rsp]
  024b3	83 c0 02	 add	 eax, 2
  024b6	48 98		 cdqe
  024b8	48 6b c0 18	 imul	 rax, rax, 24
  024bc	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cpref$4[rsp]
  024c1	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  024c5	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv1516[rsp], rax
$LN156@update_cod:
  024cd	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR tv1516[rsp]
  024d5	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv1517[rsp], rax
$LN158@update_cod:
  024dd	8b 44 24 6c	 mov	 eax, DWORD PTR i$3[rsp]
  024e1	ff c0		 inc	 eax
  024e3	48 98		 cdqe
  024e5	48 6b c0 18	 imul	 rax, rax, 24
  024e9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cpref$4[rsp]
  024ee	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  024f3	75 11		 jne	 SHORT $LN161@update_cod
  024f5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159637
  024fc	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv1541[rsp], rax
  02504	eb 69		 jmp	 SHORT $LN162@update_cod
$LN161@update_cod:
  02506	8b 44 24 6c	 mov	 eax, DWORD PTR i$3[rsp]
  0250a	ff c0		 inc	 eax
  0250c	48 98		 cdqe
  0250e	48 6b c0 18	 imul	 rax, rax, 24
  02512	41 b8 04 00 00
	00		 mov	 r8d, 4
  02518	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cpref$4[rsp]
  0251d	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  02521	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159638
  02528	e8 00 00 00 00	 call	 strcaseabbrev
  0252d	85 c0		 test	 eax, eax
  0252f	74 11		 je	 SHORT $LN159@update_cod
  02531	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159639
  02538	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv1540[rsp], rax
  02540	eb 1d		 jmp	 SHORT $LN160@update_cod
$LN159@update_cod:
  02542	8b 44 24 6c	 mov	 eax, DWORD PTR i$3[rsp]
  02546	ff c0		 inc	 eax
  02548	48 98		 cdqe
  0254a	48 6b c0 18	 imul	 rax, rax, 24
  0254e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cpref$4[rsp]
  02553	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  02557	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv1540[rsp], rax
$LN160@update_cod:
  0255f	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR tv1540[rsp]
  02567	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv1541[rsp], rax
$LN162@update_cod:
  0256f	48 63 44 24 6c	 movsxd	 rax, DWORD PTR i$3[rsp]
  02574	48 6b c0 18	 imul	 rax, rax, 24
  02578	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR tv1544[rsp], rax
  02580	b9 01 00 00 00	 mov	 ecx, 1
  02585	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0258b	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR tv1461[rsp]
  02593	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  02598	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tv1517[rsp]
  025a0	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  025a5	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR tv1541[rsp]
  025ad	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  025b2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cpref$4[rsp]
  025b7	48 8b 94 24 98
	01 00 00	 mov	 rdx, QWORD PTR tv1544[rsp]
  025bf	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  025c3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  025c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159640
  025cf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  025d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159641
  025db	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  025e0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  025e5	41 b9 03 00 00
	00		 mov	 r9d, 3
  025eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159642
  025f2	ba fe 05 00 00	 mov	 edx, 1534		; 000005feH
  025f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159643
  025fe	e8 00 00 00 00	 call	 fwritemsg

; 1525 :                         cpref[i].name,
; 1526 :                         cpref[i+1].name == NULL ? "" :
; 1527 :                             CMD(cpref[i+1].name,user,4) ? "" :
; 1528 :                             cpref[i+1].name,
; 1529 :                         cpref[i+2].name == NULL ? "" :
; 1530 :                             CMD(cpref[i+2].name,user,4) ? "" :
; 1531 :                             cpref[i+2].name,
; 1532 :                         cpref[i+3].name == NULL ? "" :
; 1533 :                             CMD(cpref[i+3].name,user,4) ? "" :
; 1534 :                             cpref[i+3].name );
; 1535 : 
; 1536 :                 if ( cpref[i+3].name == NULL     ||
; 1537 :                      cpref[i+2].name == NULL     ||
; 1538 :                      cpref[i+1].name == NULL     ||
; 1539 :                      CMD(cpref[3+1].name,user,4) ||
; 1540 :                      CMD(cpref[2+1].name,user,4) ||

  02603	8b 44 24 6c	 mov	 eax, DWORD PTR i$3[rsp]
  02607	83 c0 03	 add	 eax, 3
  0260a	48 98		 cdqe
  0260c	48 6b c0 18	 imul	 rax, rax, 24
  02610	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cpref$4[rsp]
  02615	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0261a	0f 84 ad 00 00
	00		 je	 $LN136@update_cod
  02620	8b 44 24 6c	 mov	 eax, DWORD PTR i$3[rsp]
  02624	83 c0 02	 add	 eax, 2
  02627	48 98		 cdqe
  02629	48 6b c0 18	 imul	 rax, rax, 24
  0262d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cpref$4[rsp]
  02632	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  02637	0f 84 90 00 00
	00		 je	 $LN136@update_cod
  0263d	8b 44 24 6c	 mov	 eax, DWORD PTR i$3[rsp]
  02641	ff c0		 inc	 eax
  02643	48 98		 cdqe
  02645	48 6b c0 18	 imul	 rax, rax, 24
  02649	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cpref$4[rsp]
  0264e	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  02653	74 78		 je	 SHORT $LN136@update_cod
  02655	b8 18 00 00 00	 mov	 eax, 24
  0265a	48 6b c0 04	 imul	 rax, rax, 4
  0265e	41 b8 04 00 00
	00		 mov	 r8d, 4
  02664	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cpref$4[rsp]
  02669	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0266d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159646
  02674	e8 00 00 00 00	 call	 strcaseabbrev
  02679	85 c0		 test	 eax, eax
  0267b	75 50		 jne	 SHORT $LN136@update_cod
  0267d	b8 18 00 00 00	 mov	 eax, 24
  02682	48 6b c0 03	 imul	 rax, rax, 3
  02686	41 b8 04 00 00
	00		 mov	 r8d, 4
  0268c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cpref$4[rsp]
  02691	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  02695	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159647
  0269c	e8 00 00 00 00	 call	 strcaseabbrev
  026a1	85 c0		 test	 eax, eax
  026a3	75 28		 jne	 SHORT $LN136@update_cod
  026a5	b8 18 00 00 00	 mov	 eax, 24
  026aa	48 6b c0 02	 imul	 rax, rax, 2
  026ae	41 b8 04 00 00
	00		 mov	 r8d, 4
  026b4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cpref$4[rsp]
  026b9	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  026bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159648
  026c4	e8 00 00 00 00	 call	 strcaseabbrev
  026c9	85 c0		 test	 eax, eax
  026cb	74 02		 je	 SHORT $LN135@update_cod
$LN136@update_cod:

; 1541 :                      CMD(cpref[1+1].name,user,4) ) break;

  026cd	eb 05		 jmp	 SHORT $LN27@update_cod
$LN135@update_cod:

; 1542 :             }

  026cf	e9 92 fc ff ff	 jmp	 $LN26@update_cod
$LN27@update_cod:
$LN131@update_cod:

; 1543 :         }
; 1544 :         if ( rc == -2 ) rc = -1;

  026d4	83 7c 24 64 fe	 cmp	 DWORD PTR rc$[rsp], -2
  026d9	75 08		 jne	 SHORT $LN137@update_cod
  026db	c7 44 24 64 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN137@update_cod:

; 1545 :     }

  026e3	eb 4e		 jmp	 SHORT $LN125@update_cod
$LN124@update_cod:

; 1546 :     else
; 1547 :     {
; 1548 :         WRMSG( HHC17000, "E" );

  026e5	b9 01 00 00 00	 mov	 ecx, 1
  026ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  026f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159650
  026f7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  026fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159651
  02703	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02708	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0270d	41 b9 03 00 00
	00		 mov	 r9d, 3
  02713	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159652
  0271a	ba 0c 06 00 00	 mov	 edx, 1548		; 0000060cH
  0271f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159653
  02726	e8 00 00 00 00	 call	 fwritemsg

; 1549 :         rc = -1;

  0272b	c7 44 24 64 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN125@update_cod:
$LN113@update_cod:
$LN109@update_cod:
$LN82@update_cod:
$LN57@update_cod:
$LN50@update_cod:
$LN30@update_cod:

; 1550 :     }
; 1551 : 
; 1552 :     return rc;

  02733	8b 44 24 64	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@update_cod:
$LN138@update_cod:

; 1553 : }

  02737	48 8b 8c 24 80
	04 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0273f	48 33 cc	 xor	 rcx, rsp
  02742	e8 00 00 00 00	 call	 __security_check_cookie
  02747	48 81 c4 98 04
	00 00		 add	 rsp, 1176		; 00000498H
  0274e	5f		 pop	 rdi
  0274f	5e		 pop	 rsi
  02750	c3		 ret	 0
update_codepage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\codepage.c
_TEXT	SEGMENT
name$ = 48
set_codepage_no_msgs PROC

; 1127 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1128 :     set_codepage_internal( name, SETCODEPAGE_SILENT );

  00009	ba 01 00 00 00	 mov	 edx, 1
  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR name$[rsp]
  00013	e8 00 00 00 00	 call	 set_codepage_internal

; 1129 : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
set_codepage_no_msgs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\codepage.c
_TEXT	SEGMENT
name$ = 48
set_codepage PROC

; 1122 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1123 :     set_codepage_internal( name, SETCODEPAGE_VERBOSE );

  00009	ba 02 00 00 00	 mov	 edx, 2
  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR name$[rsp]
  00013	e8 00 00 00 00	 call	 set_codepage_internal

; 1124 : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
set_codepage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\codepage.c
_TEXT	SEGMENT
cp$ = 32
name$ = 64
valid_codepage_name PROC

; 1071 : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1072 :     const CPCONV* cp;
; 1073 :     for(cp = cpconv; cp->name; cp++)

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:cpconv
  00010	48 89 44 24 20	 mov	 QWORD PTR cp$[rsp], rax
  00015	eb 0e		 jmp	 SHORT $LN4@valid_code
$LN2@valid_code:
  00017	48 8b 44 24 20	 mov	 rax, QWORD PTR cp$[rsp]
  0001c	48 83 c0 18	 add	 rax, 24
  00020	48 89 44 24 20	 mov	 QWORD PTR cp$[rsp], rax
$LN4@valid_code:
  00025	48 8b 44 24 20	 mov	 rax, QWORD PTR cp$[rsp]
  0002a	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0002e	74 1d		 je	 SHORT $LN3@valid_code

; 1074 :         if (strcasecmp( name, cp->name ) == 0)

  00030	48 8b 44 24 20	 mov	 rax, QWORD PTR cp$[rsp]
  00035	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00038	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00043	85 c0		 test	 eax, eax
  00045	75 04		 jne	 SHORT $LN5@valid_code

; 1075 :             return true;

  00047	b0 01		 mov	 al, 1
  00049	eb 04		 jmp	 SHORT $LN1@valid_code
$LN5@valid_code:
  0004b	eb ca		 jmp	 SHORT $LN2@valid_code
$LN3@valid_code:

; 1076 :     return false;

  0004d	32 c0		 xor	 al, al
$LN1@valid_code:

; 1077 : }

  0004f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00053	c3		 ret	 0
valid_codepage_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\codepage.c
_TEXT	SEGMENT
query_codepage PROC

; 1067 :     return codepage_conv->name;

  00000	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR codepage_conv
  00007	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 1068 : }

  0000a	c3		 ret	 0
query_codepage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\extstring.h
_TEXT	SEGMENT
tv84 = 32
tv73 = 36
tv93 = 40
a$ = 48
s$ = 56
string$ = 80
abbrev$ = 88
n$ = 96
strcaseabbrev PROC

; 91   : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 92   :     register const char *s = string;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR string$[rsp]
  00018	48 89 44 24 38	 mov	 QWORD PTR s$[rsp], rax

; 93   :     register const char *a = abbrev;

  0001d	48 8b 44 24 58	 mov	 rax, QWORD PTR abbrev$[rsp]
  00022	48 89 44 24 30	 mov	 QWORD PTR a$[rsp], rax

; 94   :     if (*a &&
; 95   :         *s &&

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0002c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0002f	85 c0		 test	 eax, eax
  00031	0f 84 02 01 00
	00		 je	 $LN5@strcaseabb
  00037	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  0003c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003f	85 c0		 test	 eax, eax
  00041	0f 84 f2 00 00
	00		 je	 $LN5@strcaseabb
  00047	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0004c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0004f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  00054	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00057	3b c1		 cmp	 eax, ecx
  00059	74 30		 je	 SHORT $LN6@strcaseabb
  0005b	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  00060	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00063	e8 00 00 00 00	 call	 asciitoupper
  00068	0f be c0	 movsx	 eax, al
  0006b	89 44 24 24	 mov	 DWORD PTR tv73[rsp], eax
  0006f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  00074	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00077	e8 00 00 00 00	 call	 asciitoupper
  0007c	0f be c0	 movsx	 eax, al
  0007f	8b 4c 24 24	 mov	 ecx, DWORD PTR tv73[rsp]
  00083	3b c8		 cmp	 ecx, eax
  00085	0f 85 ae 00 00
	00		 jne	 $LN5@strcaseabb
$LN6@strcaseabb:
$LN2@strcaseabb:

; 96   :         (*a == *s ||
; 97   :         asciitoupper(*a) == asciitoupper(*s)))
; 98   :     {
; 99   :         for (;;)
; 100  :         {
; 101  :             a++;

  0008b	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  00090	48 ff c0	 inc	 rax
  00093	48 89 44 24 30	 mov	 QWORD PTR a$[rsp], rax

; 102  :             if (!*a)

  00098	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0009d	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000a0	85 c0		 test	 eax, eax
  000a2	75 31		 jne	 SHORT $LN7@strcaseabb

; 103  :                 return (((uintptr_t)a - (uintptr_t)abbrev) >= n);

  000a4	48 8b 44 24 58	 mov	 rax, QWORD PTR abbrev$[rsp]
  000a9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a$[rsp]
  000ae	48 2b c8	 sub	 rcx, rax
  000b1	48 8b c1	 mov	 rax, rcx
  000b4	8b 4c 24 60	 mov	 ecx, DWORD PTR n$[rsp]
  000b8	48 3b c1	 cmp	 rax, rcx
  000bb	72 0a		 jb	 SHORT $LN12@strcaseabb
  000bd	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
  000c5	eb 08		 jmp	 SHORT $LN13@strcaseabb
$LN12@strcaseabb:
  000c7	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
$LN13@strcaseabb:
  000cf	8b 44 24 20	 mov	 eax, DWORD PTR tv84[rsp]
  000d3	eb 66		 jmp	 SHORT $LN1@strcaseabb
$LN7@strcaseabb:

; 104  :             s++;

  000d5	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  000da	48 ff c0	 inc	 rax
  000dd	48 89 44 24 38	 mov	 QWORD PTR s$[rsp], rax

; 105  :             if (!*s)

  000e2	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  000e7	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000ea	85 c0		 test	 eax, eax
  000ec	75 02		 jne	 SHORT $LN8@strcaseabb

; 106  :                 break;

  000ee	eb 49		 jmp	 SHORT $LN3@strcaseabb
$LN8@strcaseabb:

; 107  :             if (*a == *s)

  000f0	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  000f5	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000f8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  000fd	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00100	3b c1		 cmp	 eax, ecx
  00102	75 02		 jne	 SHORT $LN9@strcaseabb

; 108  :                 continue;

  00104	eb 85		 jmp	 SHORT $LN2@strcaseabb
$LN9@strcaseabb:

; 109  :             if (asciitoupper(*a) != asciitoupper(*s))

  00106	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0010b	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0010e	e8 00 00 00 00	 call	 asciitoupper
  00113	0f be c0	 movsx	 eax, al
  00116	89 44 24 28	 mov	 DWORD PTR tv93[rsp], eax
  0011a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  0011f	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00122	e8 00 00 00 00	 call	 asciitoupper
  00127	0f be c0	 movsx	 eax, al
  0012a	8b 4c 24 28	 mov	 ecx, DWORD PTR tv93[rsp]
  0012e	3b c8		 cmp	 ecx, eax
  00130	74 02		 je	 SHORT $LN10@strcaseabb

; 110  :                 break;

  00132	eb 05		 jmp	 SHORT $LN3@strcaseabb
$LN10@strcaseabb:

; 111  :         }

  00134	e9 52 ff ff ff	 jmp	 $LN2@strcaseabb
$LN3@strcaseabb:
$LN5@strcaseabb:

; 112  :     }
; 113  :     return 0;

  00139	33 c0		 xor	 eax, eax
$LN1@strcaseabb:

; 114  : }

  0013b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0013f	c3		 ret	 0
strcaseabbrev ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\extstring.h
_TEXT	SEGMENT
c$ = 8
asciitoupper PROC

; 29   : {

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl

; 30   :   if (c < 'a' || c > 'z')

  00004	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  00009	83 f8 61	 cmp	 eax, 97			; 00000061H
  0000c	7c 0a		 jl	 SHORT $LN3@asciitoupp
  0000e	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  00013	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00016	7e 07		 jle	 SHORT $LN2@asciitoupp
$LN3@asciitoupp:

; 31   :       return c;

  00018	0f b6 44 24 08	 movzx	 eax, BYTE PTR c$[rsp]
  0001d	eb 08		 jmp	 SHORT $LN1@asciitoupp
$LN2@asciitoupp:

; 32   :   return (c - 32);

  0001f	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  00024	83 e8 20	 sub	 eax, 32			; 00000020H
$LN1@asciitoupp:

; 33   : }

  00027	c3		 ret	 0
asciitoupper ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sscanf	PROC						; COMDAT

; 2247 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsscanf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2252 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2253 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2254 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2152 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2153 :         return __stdio_common_vsscanf(

  00018	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  0003d	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00007	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
END
