; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	DPD2BIN
PUBLIC	BIN2DPD
PUBLIC	hflmaxdigit
PUBLIC	dflmaxdigit
PUBLIC	bflmaxdigit
PUBLIC	dflsigbits
PUBLIC	dflrbebits
PUBLIC	dflexpmax
PUBLIC	dflrbefac
PUBLIC	bflexpbits
PUBLIC	bflexpbias
PUBLIC	bflexpmax
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
hflmaxdigit DD	00H
	DD	06H
	DD	0eH
	DD	00H
	DD	01cH
	ORG $+4
DPD2BIN	DW	00H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	050H
	DW	051H
	DW	0320H
	DW	0321H
	DW	0370H
	DW	0371H
	DW	0aH
	DW	0bH
	DW	0cH
	DW	0dH
	DW	0eH
	DW	0fH
	DW	010H
	DW	011H
	DW	012H
	DW	013H
	DW	05aH
	DW	05bH
	DW	032aH
	DW	032bH
	DW	037aH
	DW	037bH
	DW	014H
	DW	015H
	DW	016H
	DW	017H
	DW	018H
	DW	019H
	DW	01aH
	DW	01bH
	DW	01cH
	DW	01dH
	DW	052H
	DW	053H
	DW	0334H
	DW	0335H
	DW	0328H
	DW	0329H
	DW	01eH
	DW	01fH
	DW	020H
	DW	021H
	DW	022H
	DW	023H
	DW	024H
	DW	025H
	DW	026H
	DW	027H
	DW	05cH
	DW	05dH
	DW	033eH
	DW	033fH
	DW	0332H
	DW	0333H
	DW	028H
	DW	029H
	DW	02aH
	DW	02bH
	DW	02cH
	DW	02dH
	DW	02eH
	DW	02fH
	DW	030H
	DW	031H
	DW	054H
	DW	055H
	DW	0348H
	DW	0349H
	DW	058H
	DW	059H
	DW	032H
	DW	033H
	DW	034H
	DW	035H
	DW	036H
	DW	037H
	DW	038H
	DW	039H
	DW	03aH
	DW	03bH
	DW	05eH
	DW	05fH
	DW	0352H
	DW	0353H
	DW	062H
	DW	063H
	DW	03cH
	DW	03dH
	DW	03eH
	DW	03fH
	DW	040H
	DW	041H
	DW	042H
	DW	043H
	DW	044H
	DW	045H
	DW	056H
	DW	057H
	DW	035cH
	DW	035dH
	DW	0378H
	DW	0379H
	DW	046H
	DW	047H
	DW	048H
	DW	049H
	DW	04aH
	DW	04bH
	DW	04cH
	DW	04dH
	DW	04eH
	DW	04fH
	DW	060H
	DW	061H
	DW	0366H
	DW	0367H
	DW	0382H
	DW	0383H
	DW	064H
	DW	065H
	DW	066H
	DW	067H
	DW	068H
	DW	069H
	DW	06aH
	DW	06bH
	DW	06cH
	DW	06dH
	DW	0b4H
	DW	0b5H
	DW	0384H
	DW	0385H
	DW	03d4H
	DW	03d5H
	DW	06eH
	DW	06fH
	DW	070H
	DW	071H
	DW	072H
	DW	073H
	DW	074H
	DW	075H
	DW	076H
	DW	077H
	DW	0beH
	DW	0bfH
	DW	038eH
	DW	038fH
	DW	03deH
	DW	03dfH
	DW	078H
	DW	079H
	DW	07aH
	DW	07bH
	DW	07cH
	DW	07dH
	DW	07eH
	DW	07fH
	DW	080H
	DW	081H
	DW	0b6H
	DW	0b7H
	DW	0398H
	DW	0399H
	DW	038cH
	DW	038dH
	DW	082H
	DW	083H
	DW	084H
	DW	085H
	DW	086H
	DW	087H
	DW	088H
	DW	089H
	DW	08aH
	DW	08bH
	DW	0c0H
	DW	0c1H
	DW	03a2H
	DW	03a3H
	DW	0396H
	DW	0397H
	DW	08cH
	DW	08dH
	DW	08eH
	DW	08fH
	DW	090H
	DW	091H
	DW	092H
	DW	093H
	DW	094H
	DW	095H
	DW	0b8H
	DW	0b9H
	DW	03acH
	DW	03adH
	DW	0bcH
	DW	0bdH
	DW	096H
	DW	097H
	DW	098H
	DW	099H
	DW	09aH
	DW	09bH
	DW	09cH
	DW	09dH
	DW	09eH
	DW	09fH
	DW	0c2H
	DW	0c3H
	DW	03b6H
	DW	03b7H
	DW	0c6H
	DW	0c7H
	DW	0a0H
	DW	0a1H
	DW	0a2H
	DW	0a3H
	DW	0a4H
	DW	0a5H
	DW	0a6H
	DW	0a7H
	DW	0a8H
	DW	0a9H
	DW	0baH
	DW	0bbH
	DW	03c0H
	DW	03c1H
	DW	03dcH
	DW	03ddH
	DW	0aaH
	DW	0abH
	DW	0acH
	DW	0adH
	DW	0aeH
	DW	0afH
	DW	0b0H
	DW	0b1H
	DW	0b2H
	DW	0b3H
	DW	0c4H
	DW	0c5H
	DW	03caH
	DW	03cbH
	DW	03e6H
	DW	03e7H
	DW	0c8H
	DW	0c9H
	DW	0caH
	DW	0cbH
	DW	0ccH
	DW	0cdH
	DW	0ceH
	DW	0cfH
	DW	0d0H
	DW	0d1H
	DW	0118H
	DW	0119H
	DW	0322H
	DW	0323H
	DW	0372H
	DW	0373H
	DW	0d2H
	DW	0d3H
	DW	0d4H
	DW	0d5H
	DW	0d6H
	DW	0d7H
	DW	0d8H
	DW	0d9H
	DW	0daH
	DW	0dbH
	DW	0122H
	DW	0123H
	DW	032cH
	DW	032dH
	DW	037cH
	DW	037dH
	DW	0dcH
	DW	0ddH
	DW	0deH
	DW	0dfH
	DW	0e0H
	DW	0e1H
	DW	0e2H
	DW	0e3H
	DW	0e4H
	DW	0e5H
	DW	011aH
	DW	011bH
	DW	0336H
	DW	0337H
	DW	033cH
	DW	033dH
	DW	0e6H
	DW	0e7H
	DW	0e8H
	DW	0e9H
	DW	0eaH
	DW	0ebH
	DW	0ecH
	DW	0edH
	DW	0eeH
	DW	0efH
	DW	0124H
	DW	0125H
	DW	0340H
	DW	0341H
	DW	0346H
	DW	0347H
	DW	0f0H
	DW	0f1H
	DW	0f2H
	DW	0f3H
	DW	0f4H
	DW	0f5H
	DW	0f6H
	DW	0f7H
	DW	0f8H
	DW	0f9H
	DW	011cH
	DW	011dH
	DW	034aH
	DW	034bH
	DW	0120H
	DW	0121H
	DW	0faH
	DW	0fbH
	DW	0fcH
	DW	0fdH
	DW	0feH
	DW	0ffH
	DW	0100H
	DW	0101H
	DW	0102H
	DW	0103H
	DW	0126H
	DW	0127H
	DW	0354H
	DW	0355H
	DW	012aH
	DW	012bH
	DW	0104H
	DW	0105H
	DW	0106H
	DW	0107H
	DW	0108H
	DW	0109H
	DW	010aH
	DW	010bH
	DW	010cH
	DW	010dH
	DW	011eH
	DW	011fH
	DW	035eH
	DW	035fH
	DW	0378H
	DW	0379H
	DW	010eH
	DW	010fH
	DW	0110H
	DW	0111H
	DW	0112H
	DW	0113H
	DW	0114H
	DW	0115H
	DW	0116H
	DW	0117H
	DW	0128H
	DW	0129H
	DW	0368H
	DW	0369H
	DW	0382H
	DW	0383H
	DW	012cH
	DW	012dH
	DW	012eH
	DW	012fH
	DW	0130H
	DW	0131H
	DW	0132H
	DW	0133H
	DW	0134H
	DW	0135H
	DW	017cH
	DW	017dH
	DW	0386H
	DW	0387H
	DW	03d6H
	DW	03d7H
	DW	0136H
	DW	0137H
	DW	0138H
	DW	0139H
	DW	013aH
	DW	013bH
	DW	013cH
	DW	013dH
	DW	013eH
	DW	013fH
	DW	0186H
	DW	0187H
	DW	0390H
	DW	0391H
	DW	03e0H
	DW	03e1H
	DW	0140H
	DW	0141H
	DW	0142H
	DW	0143H
	DW	0144H
	DW	0145H
	DW	0146H
	DW	0147H
	DW	0148H
	DW	0149H
	DW	017eH
	DW	017fH
	DW	039aH
	DW	039bH
	DW	03a0H
	DW	03a1H
	DW	014aH
	DW	014bH
	DW	014cH
	DW	014dH
	DW	014eH
	DW	014fH
	DW	0150H
	DW	0151H
	DW	0152H
	DW	0153H
	DW	0188H
	DW	0189H
	DW	03a4H
	DW	03a5H
	DW	03aaH
	DW	03abH
	DW	0154H
	DW	0155H
	DW	0156H
	DW	0157H
	DW	0158H
	DW	0159H
	DW	015aH
	DW	015bH
	DW	015cH
	DW	015dH
	DW	0180H
	DW	0181H
	DW	03aeH
	DW	03afH
	DW	0184H
	DW	0185H
	DW	015eH
	DW	015fH
	DW	0160H
	DW	0161H
	DW	0162H
	DW	0163H
	DW	0164H
	DW	0165H
	DW	0166H
	DW	0167H
	DW	018aH
	DW	018bH
	DW	03b8H
	DW	03b9H
	DW	018eH
	DW	018fH
	DW	0168H
	DW	0169H
	DW	016aH
	DW	016bH
	DW	016cH
	DW	016dH
	DW	016eH
	DW	016fH
	DW	0170H
	DW	0171H
	DW	0182H
	DW	0183H
	DW	03c2H
	DW	03c3H
	DW	03dcH
	DW	03ddH
	DW	0172H
	DW	0173H
	DW	0174H
	DW	0175H
	DW	0176H
	DW	0177H
	DW	0178H
	DW	0179H
	DW	017aH
	DW	017bH
	DW	018cH
	DW	018dH
	DW	03ccH
	DW	03cdH
	DW	03e6H
	DW	03e7H
	DW	0190H
	DW	0191H
	DW	0192H
	DW	0193H
	DW	0194H
	DW	0195H
	DW	0196H
	DW	0197H
	DW	0198H
	DW	0199H
	DW	01e0H
	DW	01e1H
	DW	0324H
	DW	0325H
	DW	0374H
	DW	0375H
	DW	019aH
	DW	019bH
	DW	019cH
	DW	019dH
	DW	019eH
	DW	019fH
	DW	01a0H
	DW	01a1H
	DW	01a2H
	DW	01a3H
	DW	01eaH
	DW	01ebH
	DW	032eH
	DW	032fH
	DW	037eH
	DW	037fH
	DW	01a4H
	DW	01a5H
	DW	01a6H
	DW	01a7H
	DW	01a8H
	DW	01a9H
	DW	01aaH
	DW	01abH
	DW	01acH
	DW	01adH
	DW	01e2H
	DW	01e3H
	DW	0338H
	DW	0339H
	DW	0350H
	DW	0351H
	DW	01aeH
	DW	01afH
	DW	01b0H
	DW	01b1H
	DW	01b2H
	DW	01b3H
	DW	01b4H
	DW	01b5H
	DW	01b6H
	DW	01b7H
	DW	01ecH
	DW	01edH
	DW	0342H
	DW	0343H
	DW	035aH
	DW	035bH
	DW	01b8H
	DW	01b9H
	DW	01baH
	DW	01bbH
	DW	01bcH
	DW	01bdH
	DW	01beH
	DW	01bfH
	DW	01c0H
	DW	01c1H
	DW	01e4H
	DW	01e5H
	DW	034cH
	DW	034dH
	DW	01e8H
	DW	01e9H
	DW	01c2H
	DW	01c3H
	DW	01c4H
	DW	01c5H
	DW	01c6H
	DW	01c7H
	DW	01c8H
	DW	01c9H
	DW	01caH
	DW	01cbH
	DW	01eeH
	DW	01efH
	DW	0356H
	DW	0357H
	DW	01f2H
	DW	01f3H
	DW	01ccH
	DW	01cdH
	DW	01ceH
	DW	01cfH
	DW	01d0H
	DW	01d1H
	DW	01d2H
	DW	01d3H
	DW	01d4H
	DW	01d5H
	DW	01e6H
	DW	01e7H
	DW	0360H
	DW	0361H
	DW	0378H
	DW	0379H
	DW	01d6H
	DW	01d7H
	DW	01d8H
	DW	01d9H
	DW	01daH
	DW	01dbH
	DW	01dcH
	DW	01ddH
	DW	01deH
	DW	01dfH
	DW	01f0H
	DW	01f1H
	DW	036aH
	DW	036bH
	DW	0382H
	DW	0383H
	DW	01f4H
	DW	01f5H
	DW	01f6H
	DW	01f7H
	DW	01f8H
	DW	01f9H
	DW	01faH
	DW	01fbH
	DW	01fcH
	DW	01fdH
	DW	0244H
	DW	0245H
	DW	0388H
	DW	0389H
	DW	03d8H
	DW	03d9H
	DW	01feH
	DW	01ffH
	DW	0200H
	DW	0201H
	DW	0202H
	DW	0203H
	DW	0204H
	DW	0205H
	DW	0206H
	DW	0207H
	DW	024eH
	DW	024fH
	DW	0392H
	DW	0393H
	DW	03e2H
	DW	03e3H
	DW	0208H
	DW	0209H
	DW	020aH
	DW	020bH
	DW	020cH
	DW	020dH
	DW	020eH
	DW	020fH
	DW	0210H
	DW	0211H
	DW	0246H
	DW	0247H
	DW	039cH
	DW	039dH
	DW	03b4H
	DW	03b5H
	DW	0212H
	DW	0213H
	DW	0214H
	DW	0215H
	DW	0216H
	DW	0217H
	DW	0218H
	DW	0219H
	DW	021aH
	DW	021bH
	DW	0250H
	DW	0251H
	DW	03a6H
	DW	03a7H
	DW	03beH
	DW	03bfH
	DW	021cH
	DW	021dH
	DW	021eH
	DW	021fH
	DW	0220H
	DW	0221H
	DW	0222H
	DW	0223H
	DW	0224H
	DW	0225H
	DW	0248H
	DW	0249H
	DW	03b0H
	DW	03b1H
	DW	024cH
	DW	024dH
	DW	0226H
	DW	0227H
	DW	0228H
	DW	0229H
	DW	022aH
	DW	022bH
	DW	022cH
	DW	022dH
	DW	022eH
	DW	022fH
	DW	0252H
	DW	0253H
	DW	03baH
	DW	03bbH
	DW	0256H
	DW	0257H
	DW	0230H
	DW	0231H
	DW	0232H
	DW	0233H
	DW	0234H
	DW	0235H
	DW	0236H
	DW	0237H
	DW	0238H
	DW	0239H
	DW	024aH
	DW	024bH
	DW	03c4H
	DW	03c5H
	DW	03dcH
	DW	03ddH
	DW	023aH
	DW	023bH
	DW	023cH
	DW	023dH
	DW	023eH
	DW	023fH
	DW	0240H
	DW	0241H
	DW	0242H
	DW	0243H
	DW	0254H
	DW	0255H
	DW	03ceH
	DW	03cfH
	DW	03e6H
	DW	03e7H
	DW	0258H
	DW	0259H
	DW	025aH
	DW	025bH
	DW	025cH
	DW	025dH
	DW	025eH
	DW	025fH
	DW	0260H
	DW	0261H
	DW	02a8H
	DW	02a9H
	DW	0326H
	DW	0327H
	DW	0376H
	DW	0377H
	DW	0262H
	DW	0263H
	DW	0264H
	DW	0265H
	DW	0266H
	DW	0267H
	DW	0268H
	DW	0269H
	DW	026aH
	DW	026bH
	DW	02b2H
	DW	02b3H
	DW	0330H
	DW	0331H
	DW	0380H
	DW	0381H
	DW	026cH
	DW	026dH
	DW	026eH
	DW	026fH
	DW	0270H
	DW	0271H
	DW	0272H
	DW	0273H
	DW	0274H
	DW	0275H
	DW	02aaH
	DW	02abH
	DW	033aH
	DW	033bH
	DW	0364H
	DW	0365H
	DW	0276H
	DW	0277H
	DW	0278H
	DW	0279H
	DW	027aH
	DW	027bH
	DW	027cH
	DW	027dH
	DW	027eH
	DW	027fH
	DW	02b4H
	DW	02b5H
	DW	0344H
	DW	0345H
	DW	036eH
	DW	036fH
	DW	0280H
	DW	0281H
	DW	0282H
	DW	0283H
	DW	0284H
	DW	0285H
	DW	0286H
	DW	0287H
	DW	0288H
	DW	0289H
	DW	02acH
	DW	02adH
	DW	034eH
	DW	034fH
	DW	02b0H
	DW	02b1H
	DW	028aH
	DW	028bH
	DW	028cH
	DW	028dH
	DW	028eH
	DW	028fH
	DW	0290H
	DW	0291H
	DW	0292H
	DW	0293H
	DW	02b6H
	DW	02b7H
	DW	0358H
	DW	0359H
	DW	02baH
	DW	02bbH
	DW	0294H
	DW	0295H
	DW	0296H
	DW	0297H
	DW	0298H
	DW	0299H
	DW	029aH
	DW	029bH
	DW	029cH
	DW	029dH
	DW	02aeH
	DW	02afH
	DW	0362H
	DW	0363H
	DW	0378H
	DW	0379H
	DW	029eH
	DW	029fH
	DW	02a0H
	DW	02a1H
	DW	02a2H
	DW	02a3H
	DW	02a4H
	DW	02a5H
	DW	02a6H
	DW	02a7H
	DW	02b8H
	DW	02b9H
	DW	036cH
	DW	036dH
	DW	0382H
	DW	0383H
	DW	02bcH
	DW	02bdH
	DW	02beH
	DW	02bfH
	DW	02c0H
	DW	02c1H
	DW	02c2H
	DW	02c3H
	DW	02c4H
	DW	02c5H
	DW	030cH
	DW	030dH
	DW	038aH
	DW	038bH
	DW	03daH
	DW	03dbH
	DW	02c6H
	DW	02c7H
	DW	02c8H
	DW	02c9H
	DW	02caH
	DW	02cbH
	DW	02ccH
	DW	02cdH
	DW	02ceH
	DW	02cfH
	DW	0316H
	DW	0317H
	DW	0394H
	DW	0395H
	DW	03e4H
	DW	03e5H
	DW	02d0H
	DW	02d1H
	DW	02d2H
	DW	02d3H
	DW	02d4H
	DW	02d5H
	DW	02d6H
	DW	02d7H
	DW	02d8H
	DW	02d9H
	DW	030eH
	DW	030fH
	DW	039eH
	DW	039fH
	DW	03c8H
	DW	03c9H
	DW	02daH
	DW	02dbH
	DW	02dcH
	DW	02ddH
	DW	02deH
	DW	02dfH
	DW	02e0H
	DW	02e1H
	DW	02e2H
	DW	02e3H
	DW	0318H
	DW	0319H
	DW	03a8H
	DW	03a9H
	DW	03d2H
	DW	03d3H
	DW	02e4H
	DW	02e5H
	DW	02e6H
	DW	02e7H
	DW	02e8H
	DW	02e9H
	DW	02eaH
	DW	02ebH
	DW	02ecH
	DW	02edH
	DW	0310H
	DW	0311H
	DW	03b2H
	DW	03b3H
	DW	0314H
	DW	0315H
	DW	02eeH
	DW	02efH
	DW	02f0H
	DW	02f1H
	DW	02f2H
	DW	02f3H
	DW	02f4H
	DW	02f5H
	DW	02f6H
	DW	02f7H
	DW	031aH
	DW	031bH
	DW	03bcH
	DW	03bdH
	DW	031eH
	DW	031fH
	DW	02f8H
	DW	02f9H
	DW	02faH
	DW	02fbH
	DW	02fcH
	DW	02fdH
	DW	02feH
	DW	02ffH
	DW	0300H
	DW	0301H
	DW	0312H
	DW	0313H
	DW	03c6H
	DW	03c7H
	DW	03dcH
	DW	03ddH
	DW	0302H
	DW	0303H
	DW	0304H
	DW	0305H
	DW	0306H
	DW	0307H
	DW	0308H
	DW	0309H
	DW	030aH
	DW	030bH
	DW	031cH
	DW	031dH
	DW	03d0H
	DW	03d1H
	DW	03e6H
	DW	03e7H
BIN2DPD	DW	00H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	010H
	DW	011H
	DW	012H
	DW	013H
	DW	014H
	DW	015H
	DW	016H
	DW	017H
	DW	018H
	DW	019H
	DW	020H
	DW	021H
	DW	022H
	DW	023H
	DW	024H
	DW	025H
	DW	026H
	DW	027H
	DW	028H
	DW	029H
	DW	030H
	DW	031H
	DW	032H
	DW	033H
	DW	034H
	DW	035H
	DW	036H
	DW	037H
	DW	038H
	DW	039H
	DW	040H
	DW	041H
	DW	042H
	DW	043H
	DW	044H
	DW	045H
	DW	046H
	DW	047H
	DW	048H
	DW	049H
	DW	050H
	DW	051H
	DW	052H
	DW	053H
	DW	054H
	DW	055H
	DW	056H
	DW	057H
	DW	058H
	DW	059H
	DW	060H
	DW	061H
	DW	062H
	DW	063H
	DW	064H
	DW	065H
	DW	066H
	DW	067H
	DW	068H
	DW	069H
	DW	070H
	DW	071H
	DW	072H
	DW	073H
	DW	074H
	DW	075H
	DW	076H
	DW	077H
	DW	078H
	DW	079H
	DW	0aH
	DW	0bH
	DW	02aH
	DW	02bH
	DW	04aH
	DW	04bH
	DW	06aH
	DW	06bH
	DW	04eH
	DW	04fH
	DW	01aH
	DW	01bH
	DW	03aH
	DW	03bH
	DW	05aH
	DW	05bH
	DW	07aH
	DW	07bH
	DW	05eH
	DW	05fH
	DW	080H
	DW	081H
	DW	082H
	DW	083H
	DW	084H
	DW	085H
	DW	086H
	DW	087H
	DW	088H
	DW	089H
	DW	090H
	DW	091H
	DW	092H
	DW	093H
	DW	094H
	DW	095H
	DW	096H
	DW	097H
	DW	098H
	DW	099H
	DW	0a0H
	DW	0a1H
	DW	0a2H
	DW	0a3H
	DW	0a4H
	DW	0a5H
	DW	0a6H
	DW	0a7H
	DW	0a8H
	DW	0a9H
	DW	0b0H
	DW	0b1H
	DW	0b2H
	DW	0b3H
	DW	0b4H
	DW	0b5H
	DW	0b6H
	DW	0b7H
	DW	0b8H
	DW	0b9H
	DW	0c0H
	DW	0c1H
	DW	0c2H
	DW	0c3H
	DW	0c4H
	DW	0c5H
	DW	0c6H
	DW	0c7H
	DW	0c8H
	DW	0c9H
	DW	0d0H
	DW	0d1H
	DW	0d2H
	DW	0d3H
	DW	0d4H
	DW	0d5H
	DW	0d6H
	DW	0d7H
	DW	0d8H
	DW	0d9H
	DW	0e0H
	DW	0e1H
	DW	0e2H
	DW	0e3H
	DW	0e4H
	DW	0e5H
	DW	0e6H
	DW	0e7H
	DW	0e8H
	DW	0e9H
	DW	0f0H
	DW	0f1H
	DW	0f2H
	DW	0f3H
	DW	0f4H
	DW	0f5H
	DW	0f6H
	DW	0f7H
	DW	0f8H
	DW	0f9H
	DW	08aH
	DW	08bH
	DW	0aaH
	DW	0abH
	DW	0caH
	DW	0cbH
	DW	0eaH
	DW	0ebH
	DW	0ceH
	DW	0cfH
	DW	09aH
	DW	09bH
	DW	0baH
	DW	0bbH
	DW	0daH
	DW	0dbH
	DW	0faH
	DW	0fbH
	DW	0deH
	DW	0dfH
	DW	0100H
	DW	0101H
	DW	0102H
	DW	0103H
	DW	0104H
	DW	0105H
	DW	0106H
	DW	0107H
	DW	0108H
	DW	0109H
	DW	0110H
	DW	0111H
	DW	0112H
	DW	0113H
	DW	0114H
	DW	0115H
	DW	0116H
	DW	0117H
	DW	0118H
	DW	0119H
	DW	0120H
	DW	0121H
	DW	0122H
	DW	0123H
	DW	0124H
	DW	0125H
	DW	0126H
	DW	0127H
	DW	0128H
	DW	0129H
	DW	0130H
	DW	0131H
	DW	0132H
	DW	0133H
	DW	0134H
	DW	0135H
	DW	0136H
	DW	0137H
	DW	0138H
	DW	0139H
	DW	0140H
	DW	0141H
	DW	0142H
	DW	0143H
	DW	0144H
	DW	0145H
	DW	0146H
	DW	0147H
	DW	0148H
	DW	0149H
	DW	0150H
	DW	0151H
	DW	0152H
	DW	0153H
	DW	0154H
	DW	0155H
	DW	0156H
	DW	0157H
	DW	0158H
	DW	0159H
	DW	0160H
	DW	0161H
	DW	0162H
	DW	0163H
	DW	0164H
	DW	0165H
	DW	0166H
	DW	0167H
	DW	0168H
	DW	0169H
	DW	0170H
	DW	0171H
	DW	0172H
	DW	0173H
	DW	0174H
	DW	0175H
	DW	0176H
	DW	0177H
	DW	0178H
	DW	0179H
	DW	010aH
	DW	010bH
	DW	012aH
	DW	012bH
	DW	014aH
	DW	014bH
	DW	016aH
	DW	016bH
	DW	014eH
	DW	014fH
	DW	011aH
	DW	011bH
	DW	013aH
	DW	013bH
	DW	015aH
	DW	015bH
	DW	017aH
	DW	017bH
	DW	015eH
	DW	015fH
	DW	0180H
	DW	0181H
	DW	0182H
	DW	0183H
	DW	0184H
	DW	0185H
	DW	0186H
	DW	0187H
	DW	0188H
	DW	0189H
	DW	0190H
	DW	0191H
	DW	0192H
	DW	0193H
	DW	0194H
	DW	0195H
	DW	0196H
	DW	0197H
	DW	0198H
	DW	0199H
	DW	01a0H
	DW	01a1H
	DW	01a2H
	DW	01a3H
	DW	01a4H
	DW	01a5H
	DW	01a6H
	DW	01a7H
	DW	01a8H
	DW	01a9H
	DW	01b0H
	DW	01b1H
	DW	01b2H
	DW	01b3H
	DW	01b4H
	DW	01b5H
	DW	01b6H
	DW	01b7H
	DW	01b8H
	DW	01b9H
	DW	01c0H
	DW	01c1H
	DW	01c2H
	DW	01c3H
	DW	01c4H
	DW	01c5H
	DW	01c6H
	DW	01c7H
	DW	01c8H
	DW	01c9H
	DW	01d0H
	DW	01d1H
	DW	01d2H
	DW	01d3H
	DW	01d4H
	DW	01d5H
	DW	01d6H
	DW	01d7H
	DW	01d8H
	DW	01d9H
	DW	01e0H
	DW	01e1H
	DW	01e2H
	DW	01e3H
	DW	01e4H
	DW	01e5H
	DW	01e6H
	DW	01e7H
	DW	01e8H
	DW	01e9H
	DW	01f0H
	DW	01f1H
	DW	01f2H
	DW	01f3H
	DW	01f4H
	DW	01f5H
	DW	01f6H
	DW	01f7H
	DW	01f8H
	DW	01f9H
	DW	018aH
	DW	018bH
	DW	01aaH
	DW	01abH
	DW	01caH
	DW	01cbH
	DW	01eaH
	DW	01ebH
	DW	01ceH
	DW	01cfH
	DW	019aH
	DW	019bH
	DW	01baH
	DW	01bbH
	DW	01daH
	DW	01dbH
	DW	01faH
	DW	01fbH
	DW	01deH
	DW	01dfH
	DW	0200H
	DW	0201H
	DW	0202H
	DW	0203H
	DW	0204H
	DW	0205H
	DW	0206H
	DW	0207H
	DW	0208H
	DW	0209H
	DW	0210H
	DW	0211H
	DW	0212H
	DW	0213H
	DW	0214H
	DW	0215H
	DW	0216H
	DW	0217H
	DW	0218H
	DW	0219H
	DW	0220H
	DW	0221H
	DW	0222H
	DW	0223H
	DW	0224H
	DW	0225H
	DW	0226H
	DW	0227H
	DW	0228H
	DW	0229H
	DW	0230H
	DW	0231H
	DW	0232H
	DW	0233H
	DW	0234H
	DW	0235H
	DW	0236H
	DW	0237H
	DW	0238H
	DW	0239H
	DW	0240H
	DW	0241H
	DW	0242H
	DW	0243H
	DW	0244H
	DW	0245H
	DW	0246H
	DW	0247H
	DW	0248H
	DW	0249H
	DW	0250H
	DW	0251H
	DW	0252H
	DW	0253H
	DW	0254H
	DW	0255H
	DW	0256H
	DW	0257H
	DW	0258H
	DW	0259H
	DW	0260H
	DW	0261H
	DW	0262H
	DW	0263H
	DW	0264H
	DW	0265H
	DW	0266H
	DW	0267H
	DW	0268H
	DW	0269H
	DW	0270H
	DW	0271H
	DW	0272H
	DW	0273H
	DW	0274H
	DW	0275H
	DW	0276H
	DW	0277H
	DW	0278H
	DW	0279H
	DW	020aH
	DW	020bH
	DW	022aH
	DW	022bH
	DW	024aH
	DW	024bH
	DW	026aH
	DW	026bH
	DW	024eH
	DW	024fH
	DW	021aH
	DW	021bH
	DW	023aH
	DW	023bH
	DW	025aH
	DW	025bH
	DW	027aH
	DW	027bH
	DW	025eH
	DW	025fH
	DW	0280H
	DW	0281H
	DW	0282H
	DW	0283H
	DW	0284H
	DW	0285H
	DW	0286H
	DW	0287H
	DW	0288H
	DW	0289H
	DW	0290H
	DW	0291H
	DW	0292H
	DW	0293H
	DW	0294H
	DW	0295H
	DW	0296H
	DW	0297H
	DW	0298H
	DW	0299H
	DW	02a0H
	DW	02a1H
	DW	02a2H
	DW	02a3H
	DW	02a4H
	DW	02a5H
	DW	02a6H
	DW	02a7H
	DW	02a8H
	DW	02a9H
	DW	02b0H
	DW	02b1H
	DW	02b2H
	DW	02b3H
	DW	02b4H
	DW	02b5H
	DW	02b6H
	DW	02b7H
	DW	02b8H
	DW	02b9H
	DW	02c0H
	DW	02c1H
	DW	02c2H
	DW	02c3H
	DW	02c4H
	DW	02c5H
	DW	02c6H
	DW	02c7H
	DW	02c8H
	DW	02c9H
	DW	02d0H
	DW	02d1H
	DW	02d2H
	DW	02d3H
	DW	02d4H
	DW	02d5H
	DW	02d6H
	DW	02d7H
	DW	02d8H
	DW	02d9H
	DW	02e0H
	DW	02e1H
	DW	02e2H
	DW	02e3H
	DW	02e4H
	DW	02e5H
	DW	02e6H
	DW	02e7H
	DW	02e8H
	DW	02e9H
	DW	02f0H
	DW	02f1H
	DW	02f2H
	DW	02f3H
	DW	02f4H
	DW	02f5H
	DW	02f6H
	DW	02f7H
	DW	02f8H
	DW	02f9H
	DW	028aH
	DW	028bH
	DW	02aaH
	DW	02abH
	DW	02caH
	DW	02cbH
	DW	02eaH
	DW	02ebH
	DW	02ceH
	DW	02cfH
	DW	029aH
	DW	029bH
	DW	02baH
	DW	02bbH
	DW	02daH
	DW	02dbH
	DW	02faH
	DW	02fbH
	DW	02deH
	DW	02dfH
	DW	0300H
	DW	0301H
	DW	0302H
	DW	0303H
	DW	0304H
	DW	0305H
	DW	0306H
	DW	0307H
	DW	0308H
	DW	0309H
	DW	0310H
	DW	0311H
	DW	0312H
	DW	0313H
	DW	0314H
	DW	0315H
	DW	0316H
	DW	0317H
	DW	0318H
	DW	0319H
	DW	0320H
	DW	0321H
	DW	0322H
	DW	0323H
	DW	0324H
	DW	0325H
	DW	0326H
	DW	0327H
	DW	0328H
	DW	0329H
	DW	0330H
	DW	0331H
	DW	0332H
	DW	0333H
	DW	0334H
	DW	0335H
	DW	0336H
	DW	0337H
	DW	0338H
	DW	0339H
	DW	0340H
	DW	0341H
	DW	0342H
	DW	0343H
	DW	0344H
	DW	0345H
	DW	0346H
	DW	0347H
	DW	0348H
	DW	0349H
	DW	0350H
	DW	0351H
	DW	0352H
	DW	0353H
	DW	0354H
	DW	0355H
	DW	0356H
	DW	0357H
	DW	0358H
	DW	0359H
	DW	0360H
	DW	0361H
	DW	0362H
	DW	0363H
	DW	0364H
	DW	0365H
	DW	0366H
	DW	0367H
	DW	0368H
	DW	0369H
	DW	0370H
	DW	0371H
	DW	0372H
	DW	0373H
	DW	0374H
	DW	0375H
	DW	0376H
	DW	0377H
	DW	0378H
	DW	0379H
	DW	030aH
	DW	030bH
	DW	032aH
	DW	032bH
	DW	034aH
	DW	034bH
	DW	036aH
	DW	036bH
	DW	034eH
	DW	034fH
	DW	031aH
	DW	031bH
	DW	033aH
	DW	033bH
	DW	035aH
	DW	035bH
	DW	037aH
	DW	037bH
	DW	035eH
	DW	035fH
	DW	0380H
	DW	0381H
	DW	0382H
	DW	0383H
	DW	0384H
	DW	0385H
	DW	0386H
	DW	0387H
	DW	0388H
	DW	0389H
	DW	0390H
	DW	0391H
	DW	0392H
	DW	0393H
	DW	0394H
	DW	0395H
	DW	0396H
	DW	0397H
	DW	0398H
	DW	0399H
	DW	03a0H
	DW	03a1H
	DW	03a2H
	DW	03a3H
	DW	03a4H
	DW	03a5H
	DW	03a6H
	DW	03a7H
	DW	03a8H
	DW	03a9H
	DW	03b0H
	DW	03b1H
	DW	03b2H
	DW	03b3H
	DW	03b4H
	DW	03b5H
	DW	03b6H
	DW	03b7H
	DW	03b8H
	DW	03b9H
	DW	03c0H
	DW	03c1H
	DW	03c2H
	DW	03c3H
	DW	03c4H
	DW	03c5H
	DW	03c6H
	DW	03c7H
	DW	03c8H
	DW	03c9H
	DW	03d0H
	DW	03d1H
	DW	03d2H
	DW	03d3H
	DW	03d4H
	DW	03d5H
	DW	03d6H
	DW	03d7H
	DW	03d8H
	DW	03d9H
	DW	03e0H
	DW	03e1H
	DW	03e2H
	DW	03e3H
	DW	03e4H
	DW	03e5H
	DW	03e6H
	DW	03e7H
	DW	03e8H
	DW	03e9H
	DW	03f0H
	DW	03f1H
	DW	03f2H
	DW	03f3H
	DW	03f4H
	DW	03f5H
	DW	03f6H
	DW	03f7H
	DW	03f8H
	DW	03f9H
	DW	038aH
	DW	038bH
	DW	03aaH
	DW	03abH
	DW	03caH
	DW	03cbH
	DW	03eaH
	DW	03ebH
	DW	03ceH
	DW	03cfH
	DW	039aH
	DW	039bH
	DW	03baH
	DW	03bbH
	DW	03daH
	DW	03dbH
	DW	03faH
	DW	03fbH
	DW	03deH
	DW	03dfH
	DW	0cH
	DW	0dH
	DW	010cH
	DW	010dH
	DW	020cH
	DW	020dH
	DW	030cH
	DW	030dH
	DW	02eH
	DW	02fH
	DW	01cH
	DW	01dH
	DW	011cH
	DW	011dH
	DW	021cH
	DW	021dH
	DW	031cH
	DW	031dH
	DW	03eH
	DW	03fH
	DW	02cH
	DW	02dH
	DW	012cH
	DW	012dH
	DW	022cH
	DW	022dH
	DW	032cH
	DW	032dH
	DW	012eH
	DW	012fH
	DW	03cH
	DW	03dH
	DW	013cH
	DW	013dH
	DW	023cH
	DW	023dH
	DW	033cH
	DW	033dH
	DW	013eH
	DW	013fH
	DW	04cH
	DW	04dH
	DW	014cH
	DW	014dH
	DW	024cH
	DW	024dH
	DW	034cH
	DW	034dH
	DW	022eH
	DW	022fH
	DW	05cH
	DW	05dH
	DW	015cH
	DW	015dH
	DW	025cH
	DW	025dH
	DW	035cH
	DW	035dH
	DW	023eH
	DW	023fH
	DW	06cH
	DW	06dH
	DW	016cH
	DW	016dH
	DW	026cH
	DW	026dH
	DW	036cH
	DW	036dH
	DW	032eH
	DW	032fH
	DW	07cH
	DW	07dH
	DW	017cH
	DW	017dH
	DW	027cH
	DW	027dH
	DW	037cH
	DW	037dH
	DW	033eH
	DW	033fH
	DW	0eH
	DW	0fH
	DW	010eH
	DW	010fH
	DW	020eH
	DW	020fH
	DW	030eH
	DW	030fH
	DW	06eH
	DW	06fH
	DW	01eH
	DW	01fH
	DW	011eH
	DW	011fH
	DW	021eH
	DW	021fH
	DW	031eH
	DW	031fH
	DW	07eH
	DW	07fH
	DW	08cH
	DW	08dH
	DW	018cH
	DW	018dH
	DW	028cH
	DW	028dH
	DW	038cH
	DW	038dH
	DW	0aeH
	DW	0afH
	DW	09cH
	DW	09dH
	DW	019cH
	DW	019dH
	DW	029cH
	DW	029dH
	DW	039cH
	DW	039dH
	DW	0beH
	DW	0bfH
	DW	0acH
	DW	0adH
	DW	01acH
	DW	01adH
	DW	02acH
	DW	02adH
	DW	03acH
	DW	03adH
	DW	01aeH
	DW	01afH
	DW	0bcH
	DW	0bdH
	DW	01bcH
	DW	01bdH
	DW	02bcH
	DW	02bdH
	DW	03bcH
	DW	03bdH
	DW	01beH
	DW	01bfH
	DW	0ccH
	DW	0cdH
	DW	01ccH
	DW	01cdH
	DW	02ccH
	DW	02cdH
	DW	03ccH
	DW	03cdH
	DW	02aeH
	DW	02afH
	DW	0dcH
	DW	0ddH
	DW	01dcH
	DW	01ddH
	DW	02dcH
	DW	02ddH
	DW	03dcH
	DW	03ddH
	DW	02beH
	DW	02bfH
	DW	0ecH
	DW	0edH
	DW	01ecH
	DW	01edH
	DW	02ecH
	DW	02edH
	DW	03ecH
	DW	03edH
	DW	03aeH
	DW	03afH
	DW	0fcH
	DW	0fdH
	DW	01fcH
	DW	01fdH
	DW	02fcH
	DW	02fdH
	DW	03fcH
	DW	03fdH
	DW	03beH
	DW	03bfH
	DW	08eH
	DW	08fH
	DW	018eH
	DW	018fH
	DW	028eH
	DW	028fH
	DW	038eH
	DW	038fH
	DW	0eeH
	DW	0efH
	DW	09eH
	DW	09fH
	DW	019eH
	DW	019fH
	DW	029eH
	DW	029fH
	DW	039eH
	DW	039fH
	DW	0feH
	DW	0ffH
dflmaxdigit DD	00H
	DD	07H
	DD	010H
	DD	00H
	DD	022H
	ORG $+4
bflmaxdigit DD	00H
	DD	017H
	DD	034H
	DD	00H
	DD	070H
	ORG $+4
dflsigbits DD	00H
	DD	014H
	DD	012H
	DD	00H
	DD	0eH
	ORG $+4
dflrbebits DD	00H
	DD	06H
	DD	08H
	DD	00H
	DD	0cH
	ORG $+4
dflexpmax DD	00H
	DD	065H
	DD	018eH
	DD	00H
	DD	01820H
	ORG $+4
dflrbefac DD	00H
	DD	040H
	DD	0100H
	DD	00H
	DD	01000H
	ORG $+4
bflexpbits DD	00H
	DD	09H
	DD	0cH
	DD	00H
	DD	010H
	ORG $+4
bflexpbias DD	00H
	DD	07fH
	DD	03ffH
	DD	00H
	DD	03fffH
	ORG $+4
bflexpmax DD	00H
	DD	0ffH
	DD	07ffH
	DD	00H
	DD	07fffH
CONST	ENDS
PUBLIC	z900_perform_floating_point_operation
PUBLIC	arraydiv
PUBLIC	arrayadd
PUBLIC	arrayaddint
PUBLIC	arraymlt
PUBLIC	arrayshiftright
PUBLIC	arrayshiftleft
PUBLIC	dflexp
PUBLIC	getlzerobits
PUBLIC	roundarray
PUBLIC	checkhfp
PUBLIC	checkbfp
PUBLIC	dfl2hflbfl
PUBLIC	hflbfl2dfl
PUBLIC	hfl2bfl
PUBLIC	bfl2hfl
EXTRN	__report_rangecheckfailure:PROC
EXTRN	abs:PROC
EXTRN	z900_abort_transaction:PROC
EXTRN	z900_program_interrupt:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memcmp:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
pdata	SEGMENT
$pdata$z900_perform_floating_point_operation DD imagerel $LN178
	DD	imagerel $LN178+6816
	DD	imagerel $unwind$z900_perform_floating_point_operation
$pdata$arraydiv DD imagerel $LN7
	DD	imagerel $LN7+217
	DD	imagerel $unwind$arraydiv
$pdata$arrayadd DD imagerel $LN9
	DD	imagerel $LN9+283
	DD	imagerel $unwind$arrayadd
$pdata$arrayaddint DD imagerel $LN5
	DD	imagerel $LN5+300
	DD	imagerel $unwind$arrayaddint
$pdata$arraymlt DD imagerel $LN6
	DD	imagerel $LN6+196
	DD	imagerel $unwind$arraymlt
$pdata$arrayshiftright DD imagerel $LN18
	DD	imagerel $LN18+478
	DD	imagerel $unwind$arrayshiftright
$pdata$arrayshiftleft DD imagerel $LN14
	DD	imagerel $LN14+331
	DD	imagerel $unwind$arrayshiftleft
$pdata$dflexp DD imagerel $LN7
	DD	imagerel $LN7+245
	DD	imagerel $unwind$dflexp
$pdata$getlzerobits DD imagerel $LN9
	DD	imagerel $LN9+162
	DD	imagerel $unwind$getlzerobits
$pdata$roundarray DD imagerel $LN33
	DD	imagerel $LN33+516
	DD	imagerel $unwind$roundarray
$pdata$checkhfp DD imagerel $LN38
	DD	imagerel $LN38+1920
	DD	imagerel $unwind$checkhfp
$pdata$checkbfp DD imagerel $LN38
	DD	imagerel $LN38+1423
	DD	imagerel $unwind$checkbfp
$pdata$dfl2hflbfl DD imagerel $LN129
	DD	imagerel $LN129+10561
	DD	imagerel $unwind$dfl2hflbfl
$pdata$hflbfl2dfl DD imagerel $LN130
	DD	imagerel $LN130+8953
	DD	imagerel $unwind$hflbfl2dfl
$pdata$hfl2bfl DD imagerel $LN49
	DD	imagerel $LN49+2363
	DD	imagerel $unwind$hfl2bfl
$pdata$bfl2hfl DD imagerel $LN43
	DD	imagerel $LN43+2911
	DD	imagerel $unwind$bfl2hfl
pdata	ENDS
_DATA	SEGMENT
$SG190216 DB	'C:\papa\MyGit\hyperion-zvector\pfpo.c:2239', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:bfl2hfl
	DD	027H
	DD	0b45H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:hfl2bfl
	DD	027H
	DD	0921H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:hflbfl2dfl
	DD	02dH
	DD	022dfH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:dfl2hflbfl
	DD	02cH
	DD	02928H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:checkbfp
	DD	025H
	DD	0576H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:checkhfp
	DD	025H
	DD	0767H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:z900_perform_floating_point_operation
	DD	01bH
	DD	01797H
voltbl	ENDS
xdata	SEGMENT
$unwind$z900_perform_floating_point_operation DD 022319H
	DD	0170111H
	DD	imagerel __GSHandlerCheck
	DD	0a8H
$unwind$arraydiv DD 011701H
	DD	06217H
$unwind$arrayadd DD 011801H
	DD	04218H
$unwind$arrayaddint DD 011201H
	DD	04212H
$unwind$arraymlt DD 011201H
	DD	04212H
$unwind$arrayshiftright DD 021801H
	DD	070143218H
$unwind$arrayshiftleft DD 011201H
	DD	04212H
$unwind$dflexp DD 011201H
	DD	04212H
$unwind$getlzerobits DD 010d01H
	DD	0220dH
$unwind$roundarray DD 011701H
	DD	06217H
$unwind$checkhfp DD 032d19H
	DD	014011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	098H
$unwind$checkbfp DD 032d19H
	DD	014011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$dfl2hflbfl DD 033419H
	DD	03c80122H
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	01e30H
$unwind$hflbfl2dfl DD 043519H
	DD	06d50123H
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	03690H
$unwind$hfl2bfl DD 042f19H
	DD	017011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$bfl2hfl DD 042f19H
	DD	01d011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0d8H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\pfpo.c
_TEXT	SEGMENT
i$ = 64
mid$ = 68
temp1$ = 72
bexp$ = 76
bitctr$ = 80
rem$ = 84
bexpbias$ = 88
hexp$ = 92
roundrule$ = 96
neg$ = 100
temp2$ = 104
tv130 = 108
bexpround$ = 112
shiftctr$ = 116
tv269 = 120
tv65 = 124
maxword$ = 128
cc$ = 132
hexp2$ = 136
temptab1$ = 144
remtab$ = 168
binzero$ = 184
__$ArrayPad$ = 216
tab$ = 256
tabout$ = 264
nwordin$ = 272
nwordout$ = 280
optbits$ = 288
fpc$ = 296
bfl2hfl	PROC

; 2026 : {

$LN43:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2027 :   unsigned int temptab1[6];
; 2028 :   unsigned int remtab[4];
; 2029 :   int hexp;
; 2030 :   int bexpbias = 0;

  0002f	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR bexpbias$[rsp], 0

; 2031 :   int hexp2;
; 2032 :   int bexp = 0;

  00037	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR bexp$[rsp], 0

; 2033 :   int bexpround;
; 2034 :   int neg = 0;

  0003f	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR neg$[rsp], 0

; 2035 :   int mid;
; 2036 :   int i;
; 2037 :   int cc = 0;

  00047	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR cc$[rsp], 0

; 2038 :   int bitctr;
; 2039 :     int rem;
; 2040 :   int shiftctr;
; 2041 :   int roundrule;
; 2042 :   int maxword;
; 2043 :   unsigned int temp1;
; 2044 :   unsigned int temp2;
; 2045 :   BYTE binzero[32];
; 2046 :   maxword = max(nwordin, nwordout) + 1;

  00052	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR nwordout$[rsp]
  00059	39 84 24 10 01
	00 00		 cmp	 DWORD PTR nwordin$[rsp], eax
  00060	7e 0d		 jle	 SHORT $LN41@bfl2hfl
  00062	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR nwordin$[rsp]
  00069	89 44 24 7c	 mov	 DWORD PTR tv65[rsp], eax
  0006d	eb 0b		 jmp	 SHORT $LN42@bfl2hfl
$LN41@bfl2hfl:
  0006f	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR nwordout$[rsp]
  00076	89 44 24 7c	 mov	 DWORD PTR tv65[rsp], eax
$LN42@bfl2hfl:
  0007a	8b 44 24 7c	 mov	 eax, DWORD PTR tv65[rsp]
  0007e	ff c0		 inc	 eax
  00080	89 84 24 80 00
	00 00		 mov	 DWORD PTR maxword$[rsp], eax

; 2047 :   memset(binzero, 0x00, sizeof(binzero));

  00087	48 8d 84 24 b8
	00 00 00	 lea	 rax, QWORD PTR binzero$[rsp]
  0008f	48 8b f8	 mov	 rdi, rax
  00092	33 c0		 xor	 eax, eax
  00094	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00099	f3 aa		 rep stosb

; 2048 :   temp1 = (unsigned int) GR0_RM( optbits );

  0009b	0f b6 84 24 20
	01 00 00	 movzx	 eax, BYTE PTR optbits$[rsp]
  000a3	83 e0 0f	 and	 eax, 15
  000a6	89 44 24 48	 mov	 DWORD PTR temp1$[rsp], eax

; 2049 :   if (temp1 == 0)

  000aa	83 7c 24 48 00	 cmp	 DWORD PTR temp1$[rsp], 0
  000af	75 16		 jne	 SHORT $LN12@bfl2hfl

; 2050 :     roundrule = (*fpc & FPC_DRM) >> 4;

  000b1	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  000b9	8b 00		 mov	 eax, DWORD PTR [rax]
  000bb	83 e0 70	 and	 eax, 112		; 00000070H
  000be	c1 f8 04	 sar	 eax, 4
  000c1	89 44 24 60	 mov	 DWORD PTR roundrule$[rsp], eax
  000c5	eb 25		 jmp	 SHORT $LN13@bfl2hfl
$LN12@bfl2hfl:

; 2051 :   else
; 2052 :     if (temp1 == 1)

  000c7	83 7c 24 48 01	 cmp	 DWORD PTR temp1$[rsp], 1
  000cc	75 13		 jne	 SHORT $LN14@bfl2hfl

; 2053 :       roundrule = (*fpc & FPC_BRM_3BIT);

  000ce	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  000d6	8b 00		 mov	 eax, DWORD PTR [rax]
  000d8	83 e0 07	 and	 eax, 7
  000db	89 44 24 60	 mov	 DWORD PTR roundrule$[rsp], eax
  000df	eb 0b		 jmp	 SHORT $LN15@bfl2hfl
$LN14@bfl2hfl:

; 2054 :     else
; 2055 :       roundrule = (int)(temp1 - 8);

  000e1	8b 44 24 48	 mov	 eax, DWORD PTR temp1$[rsp]
  000e5	83 e8 08	 sub	 eax, 8
  000e8	89 44 24 60	 mov	 DWORD PTR roundrule$[rsp], eax
$LN15@bfl2hfl:
$LN13@bfl2hfl:

; 2056 :   memset(temptab1, 0x00, sizeof(temptab1));

  000ec	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR temptab1$[rsp]
  000f4	48 8b f8	 mov	 rdi, rax
  000f7	33 c0		 xor	 eax, eax
  000f9	b9 18 00 00 00	 mov	 ecx, 24
  000fe	f3 aa		 rep stosb

; 2057 :   memcpy(temptab1, tab, sizeof(int) * nwordin);

  00100	48 63 84 24 10
	01 00 00	 movsxd	 rax, DWORD PTR nwordin$[rsp]
  00108	48 c1 e0 02	 shl	 rax, 2
  0010c	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR temptab1$[rsp]
  00114	48 8b f9	 mov	 rdi, rcx
  00117	48 8b b4 24 00
	01 00 00	 mov	 rsi, QWORD PTR tab$[rsp]
  0011f	48 8b c8	 mov	 rcx, rax
  00122	f3 a4		 rep movsb

; 2058 :   neg = tab[0] >> 31;

  00124	b8 04 00 00 00	 mov	 eax, 4
  00129	48 6b c0 00	 imul	 rax, rax, 0
  0012d	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tab$[rsp]
  00135	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00138	c1 e8 1f	 shr	 eax, 31
  0013b	89 44 24 64	 mov	 DWORD PTR neg$[rsp], eax

; 2059 : /***************************************************************/
; 2060 : /* isolate the binary exponent, then turn on the assumed bit   */
; 2061 : /* (first bit left of the fraction).                           */
; 2062 : /***************************************************************/
; 2063 :   temptab1[0] &= 0x7fffffff;

  0013f	b8 04 00 00 00	 mov	 eax, 4
  00144	48 6b c0 00	 imul	 rax, rax, 0
  00148	8b 84 04 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  0014f	0f ba f0 1f	 btr	 eax, 31
  00153	b9 04 00 00 00	 mov	 ecx, 4
  00158	48 6b c9 00	 imul	 rcx, rcx, 0
  0015c	89 84 0c 90 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx], eax

; 2064 :   bitctr = 0;

  00163	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR bitctr$[rsp], 0

; 2065 :   switch (nwordin)

  0016b	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR nwordin$[rsp]
  00172	89 44 24 6c	 mov	 DWORD PTR tv130[rsp], eax
  00176	83 7c 24 6c 01	 cmp	 DWORD PTR tv130[rsp], 1
  0017b	0f 84 f4 00 00
	00		 je	 $LN18@bfl2hfl
  00181	83 7c 24 6c 02	 cmp	 DWORD PTR tv130[rsp], 2
  00186	74 7e		 je	 SHORT $LN17@bfl2hfl
  00188	83 7c 24 6c 04	 cmp	 DWORD PTR tv130[rsp], 4
  0018d	74 05		 je	 SHORT $LN16@bfl2hfl
  0018f	e9 54 01 00 00	 jmp	 $LN2@bfl2hfl
$LN16@bfl2hfl:

; 2066 :   {
; 2067 :   case 4:
; 2068 :     bexpbias = temptab1[0] >> 16;

  00194	b8 04 00 00 00	 mov	 eax, 4
  00199	48 6b c0 00	 imul	 rax, rax, 0
  0019d	8b 84 04 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  001a4	c1 e8 10	 shr	 eax, 16
  001a7	89 44 24 58	 mov	 DWORD PTR bexpbias$[rsp], eax

; 2069 :     bexp = bexpbias - 16383;

  001ab	8b 44 24 58	 mov	 eax, DWORD PTR bexpbias$[rsp]
  001af	2d ff 3f 00 00	 sub	 eax, 16383		; 00003fffH
  001b4	89 44 24 4c	 mov	 DWORD PTR bexp$[rsp], eax

; 2070 :     temptab1[0] &= 0x0000ffff;

  001b8	b8 04 00 00 00	 mov	 eax, 4
  001bd	48 6b c0 00	 imul	 rax, rax, 0
  001c1	8b 84 04 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  001c8	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  001cd	b9 04 00 00 00	 mov	 ecx, 4
  001d2	48 6b c9 00	 imul	 rcx, rcx, 0
  001d6	89 84 0c 90 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx], eax

; 2071 :     temptab1[0] |= 0x00010000;

  001dd	b8 04 00 00 00	 mov	 eax, 4
  001e2	48 6b c0 00	 imul	 rax, rax, 0
  001e6	8b 84 04 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  001ed	0f ba e8 10	 bts	 eax, 16
  001f1	b9 04 00 00 00	 mov	 ecx, 4
  001f6	48 6b c9 00	 imul	 rcx, rcx, 0
  001fa	89 84 0c 90 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx], eax

; 2072 :     break;

  00201	e9 e2 00 00 00	 jmp	 $LN2@bfl2hfl
$LN17@bfl2hfl:

; 2073 :   case 2:
; 2074 :     bexpbias = temptab1[0] >> 20;

  00206	b8 04 00 00 00	 mov	 eax, 4
  0020b	48 6b c0 00	 imul	 rax, rax, 0
  0020f	8b 84 04 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  00216	c1 e8 14	 shr	 eax, 20
  00219	89 44 24 58	 mov	 DWORD PTR bexpbias$[rsp], eax

; 2075 :     bexp = bexpbias -1023;

  0021d	8b 44 24 58	 mov	 eax, DWORD PTR bexpbias$[rsp]
  00221	2d ff 03 00 00	 sub	 eax, 1023		; 000003ffH
  00226	89 44 24 4c	 mov	 DWORD PTR bexp$[rsp], eax

; 2076 :     temptab1[0] &= 0x000fffff;

  0022a	b8 04 00 00 00	 mov	 eax, 4
  0022f	48 6b c0 00	 imul	 rax, rax, 0
  00233	8b 84 04 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  0023a	25 ff ff 0f 00	 and	 eax, 1048575		; 000fffffH
  0023f	b9 04 00 00 00	 mov	 ecx, 4
  00244	48 6b c9 00	 imul	 rcx, rcx, 0
  00248	89 84 0c 90 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx], eax

; 2077 :     temptab1[0] |= 0x00100000;

  0024f	b8 04 00 00 00	 mov	 eax, 4
  00254	48 6b c0 00	 imul	 rax, rax, 0
  00258	8b 84 04 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  0025f	0f ba e8 14	 bts	 eax, 20
  00263	b9 04 00 00 00	 mov	 ecx, 4
  00268	48 6b c9 00	 imul	 rcx, rcx, 0
  0026c	89 84 0c 90 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx], eax

; 2078 :     break;

  00273	eb 73		 jmp	 SHORT $LN2@bfl2hfl
$LN18@bfl2hfl:

; 2079 :   case 1:
; 2080 :     bexpbias = temptab1[0] >> 23;

  00275	b8 04 00 00 00	 mov	 eax, 4
  0027a	48 6b c0 00	 imul	 rax, rax, 0
  0027e	8b 84 04 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  00285	c1 e8 17	 shr	 eax, 23
  00288	89 44 24 58	 mov	 DWORD PTR bexpbias$[rsp], eax

; 2081 :     bexp = bexpbias - 127;

  0028c	8b 44 24 58	 mov	 eax, DWORD PTR bexpbias$[rsp]
  00290	83 e8 7f	 sub	 eax, 127		; 0000007fH
  00293	89 44 24 4c	 mov	 DWORD PTR bexp$[rsp], eax

; 2082 :     bitctr = 1;

  00297	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR bitctr$[rsp], 1

; 2083 :     temptab1[0] &= 0x007fffff;

  0029f	b8 04 00 00 00	 mov	 eax, 4
  002a4	48 6b c0 00	 imul	 rax, rax, 0
  002a8	8b 84 04 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  002af	25 ff ff 7f 00	 and	 eax, 8388607		; 007fffffH
  002b4	b9 04 00 00 00	 mov	 ecx, 4
  002b9	48 6b c9 00	 imul	 rcx, rcx, 0
  002bd	89 84 0c 90 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx], eax

; 2084 :     temptab1[0] |= 0x00800000;

  002c4	b8 04 00 00 00	 mov	 eax, 4
  002c9	48 6b c0 00	 imul	 rax, rax, 0
  002cd	8b 84 04 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  002d4	0f ba e8 17	 bts	 eax, 23
  002d8	b9 04 00 00 00	 mov	 ecx, 4
  002dd	48 6b c9 00	 imul	 rcx, rcx, 0
  002e1	89 84 0c 90 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx], eax
$LN2@bfl2hfl:

; 2085 :     break;
; 2086 :   }
; 2087 :   if (bexpbias == bflexpmax[nwordin])

  002e8	48 63 84 24 10
	01 00 00	 movsxd	 rax, DWORD PTR nwordin$[rsp]
  002f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bflexpmax
  002f7	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  002fa	39 44 24 58	 cmp	 DWORD PTR bexpbias$[rsp], eax
  002fe	0f 85 98 00 00
	00		 jne	 $LN19@bfl2hfl

; 2088 :   {
; 2089 :     if (*fpc & 0x80) // (invalid reserved bit that must be zero?)

  00304	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  0030c	8b 00		 mov	 eax, DWORD PTR [rax]
  0030e	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00313	85 c0		 test	 eax, eax
  00315	74 3b		 je	 SHORT $LN20@bfl2hfl

; 2090 :     {
; 2091 :       *fpc &= ~FPC_DXC;

  00317	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  0031f	8b 00		 mov	 eax, DWORD PTR [rax]
  00321	25 ff 00 ff ff	 and	 eax, -65281		; ffffffffffff00ffH
  00326	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  0032e	89 01		 mov	 DWORD PTR [rcx], eax

; 2092 :       *fpc |= DXC_IEEE_INVALID_OP << FPC_DXC_SHIFT;

  00330	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  00338	8b 00		 mov	 eax, DWORD PTR [rax]
  0033a	0f ba e8 0f	 bts	 eax, 15
  0033e	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  00346	89 01		 mov	 DWORD PTR [rcx], eax

; 2093 :       return -7;

  00348	b8 f9 ff ff ff	 mov	 eax, -7
  0034d	e9 f3 07 00 00	 jmp	 $LN1@bfl2hfl
$LN20@bfl2hfl:

; 2094 :     }
; 2095 :     memset(tabout, 0xff, 16);

  00352	48 8b bc 24 08
	01 00 00	 mov	 rdi, QWORD PTR tabout$[rsp]
  0035a	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  0035f	b9 10 00 00 00	 mov	 ecx, 16
  00364	f3 aa		 rep stosb

; 2096 :     tabout[0] &= 0x7fffffff;

  00366	b8 04 00 00 00	 mov	 eax, 4
  0036b	48 6b c0 00	 imul	 rax, rax, 0
  0036f	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  00377	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0037a	0f ba f0 1f	 btr	 eax, 31
  0037e	b9 04 00 00 00	 mov	 ecx, 4
  00383	48 6b c9 00	 imul	 rcx, rcx, 0
  00387	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR tabout$[rsp]
  0038f	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 2097 :     return 2;

  00392	b8 02 00 00 00	 mov	 eax, 2
  00397	e9 a9 07 00 00	 jmp	 $LN1@bfl2hfl
$LN19@bfl2hfl:

; 2098 :   }
; 2099 :   if (bexp < -256)             //  too small for hex float

  0039c	81 7c 24 4c 00
	ff ff ff	 cmp	 DWORD PTR bexp$[rsp], -256 ; ffffffffffffff00H
  003a4	7d 1b		 jge	 SHORT $LN21@bfl2hfl

; 2100 :   {
; 2101 :     memset(tabout, 0x00, 16);

  003a6	48 8b bc 24 08
	01 00 00	 mov	 rdi, QWORD PTR tabout$[rsp]
  003ae	33 c0		 xor	 eax, eax
  003b0	b9 10 00 00 00	 mov	 ecx, 16
  003b5	f3 aa		 rep stosb

; 2102 :     return 2;

  003b7	b8 02 00 00 00	 mov	 eax, 2
  003bc	e9 84 07 00 00	 jmp	 $LN1@bfl2hfl
$LN21@bfl2hfl:

; 2103 :   }
; 2104 : /**************************************************************/
; 2105 : /*  add one to the exponent for the hidden bit                */
; 2106 : /**************************************************************/
; 2107 :   bexp++;

  003c1	8b 44 24 4c	 mov	 eax, DWORD PTR bexp$[rsp]
  003c5	ff c0		 inc	 eax
  003c7	89 44 24 4c	 mov	 DWORD PTR bexp$[rsp], eax

; 2108 : /***************************************************************/
; 2109 : /* the hex exponent is the binary exponent rounded up to a     */
; 2110 : /* a multiple of 4 divided by 4                                */
; 2111 : /***************************************************************/
; 2112 :   if (bexp < 0)

  003cb	83 7c 24 4c 00	 cmp	 DWORD PTR bexp$[rsp], 0
  003d0	7d 16		 jge	 SHORT $LN22@bfl2hfl

; 2113 :     bexpround = (bexp / 4) * 4;

  003d2	8b 44 24 4c	 mov	 eax, DWORD PTR bexp$[rsp]
  003d6	99		 cdq
  003d7	83 e2 03	 and	 edx, 3
  003da	03 c2		 add	 eax, edx
  003dc	c1 f8 02	 sar	 eax, 2
  003df	c1 e0 02	 shl	 eax, 2
  003e2	89 44 24 70	 mov	 DWORD PTR bexpround$[rsp], eax
  003e6	eb 17		 jmp	 SHORT $LN23@bfl2hfl
$LN22@bfl2hfl:

; 2114 :   else
; 2115 :     bexpround = ((bexp + 3) / 4) * 4;

  003e8	8b 44 24 4c	 mov	 eax, DWORD PTR bexp$[rsp]
  003ec	83 c0 03	 add	 eax, 3
  003ef	99		 cdq
  003f0	83 e2 03	 and	 edx, 3
  003f3	03 c2		 add	 eax, edx
  003f5	c1 f8 02	 sar	 eax, 2
  003f8	c1 e0 02	 shl	 eax, 2
  003fb	89 44 24 70	 mov	 DWORD PTR bexpround$[rsp], eax
$LN23@bfl2hfl:

; 2116 :   hexp = bexpround / 4;

  003ff	8b 44 24 70	 mov	 eax, DWORD PTR bexpround$[rsp]
  00403	99		 cdq
  00404	83 e2 03	 and	 edx, 3
  00407	03 c2		 add	 eax, edx
  00409	c1 f8 02	 sar	 eax, 2
  0040c	89 44 24 5c	 mov	 DWORD PTR hexp$[rsp], eax

; 2117 : /***************************************************************/
; 2118 : /* the shift needed is the difference between the bits needed  */
; 2119 : /* for the binary exponent and the bits for the hex exponent   */
; 2120 : /* (8) plus the shift needed to round the exponent.  That is   */
; 2121 : /* hexp * 4 - bexp, or bexpround - bexp.  The shift is then    */
; 2122 : /* reduced by one for the hidden bit.                          */
; 2123 : /***************************************************************/
; 2124 :   bitctr = bflexpbits[nwordin] - 9 - (bexpround - bexp);

  00410	48 63 84 24 10
	01 00 00	 movsxd	 rax, DWORD PTR nwordin$[rsp]
  00418	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bflexpbits
  0041f	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00422	83 e8 09	 sub	 eax, 9
  00425	8b 4c 24 4c	 mov	 ecx, DWORD PTR bexp$[rsp]
  00429	8b 54 24 70	 mov	 edx, DWORD PTR bexpround$[rsp]
  0042d	2b d1		 sub	 edx, ecx
  0042f	8b ca		 mov	 ecx, edx
  00431	2b c1		 sub	 eax, ecx
  00433	89 44 24 50	 mov	 DWORD PTR bitctr$[rsp], eax

; 2125 : /***************************************************************/
; 2126 : /* for long and extented binary float, the net shift will be to*/
; 2127 : /* the left.  For short, it will be to the right.              */
; 2128 : /***************************************************************/
; 2129 :   if (bitctr > 0)

  00437	83 7c 24 50 00	 cmp	 DWORD PTR bitctr$[rsp], 0
  0043c	0f 8e 94 00 00
	00		 jle	 $LN24@bfl2hfl

; 2130 :   {
; 2131 :     temp1 = 0;

  00442	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR temp1$[rsp], 0

; 2132 :     shiftctr = 32 - bitctr;

  0044a	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0044f	2b 44 24 50	 sub	 eax, DWORD PTR bitctr$[rsp]
  00453	89 44 24 74	 mov	 DWORD PTR shiftctr$[rsp], eax

; 2133 :     for (i = maxword - 1; i >= 0; i--)

  00457	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR maxword$[rsp]
  0045e	ff c8		 dec	 eax
  00460	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
  00464	eb 0a		 jmp	 SHORT $LN6@bfl2hfl
$LN4@bfl2hfl:
  00466	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  0046a	ff c8		 dec	 eax
  0046c	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN6@bfl2hfl:
  00470	83 7c 24 40 00	 cmp	 DWORD PTR i$[rsp], 0
  00475	7c 5a		 jl	 SHORT $LN5@bfl2hfl

; 2134 :     {
; 2135 :       temp2 = temptab1[i] >> shiftctr;

  00477	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  0047c	8b 4c 24 74	 mov	 ecx, DWORD PTR shiftctr$[rsp]
  00480	8b 84 84 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax*4]
  00487	d3 e8		 shr	 eax, cl
  00489	89 44 24 68	 mov	 DWORD PTR temp2$[rsp], eax

; 2136 :       temptab1[i] <<= bitctr;

  0048d	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00492	8b 4c 24 50	 mov	 ecx, DWORD PTR bitctr$[rsp]
  00496	8b 84 84 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax*4]
  0049d	d3 e0		 shl	 eax, cl
  0049f	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR i$[rsp]
  004a4	89 84 8c 90 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx*4], eax

; 2137 :       temptab1[i] += temp1;

  004ab	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  004b0	8b 84 84 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax*4]
  004b7	03 44 24 48	 add	 eax, DWORD PTR temp1$[rsp]
  004bb	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR i$[rsp]
  004c0	89 84 8c 90 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx*4], eax

; 2138 :       temp1 = temp2;

  004c7	8b 44 24 68	 mov	 eax, DWORD PTR temp2$[rsp]
  004cb	89 44 24 48	 mov	 DWORD PTR temp1$[rsp], eax

; 2139 :     }

  004cf	eb 95		 jmp	 SHORT $LN4@bfl2hfl
$LN5@bfl2hfl:

; 2140 :   }

  004d1	e9 ad 00 00 00	 jmp	 $LN25@bfl2hfl
$LN24@bfl2hfl:

; 2141 :   else
; 2142 :     if (bitctr < 0)

  004d6	83 7c 24 50 00	 cmp	 DWORD PTR bitctr$[rsp], 0
  004db	0f 8d a2 00 00
	00		 jge	 $LN26@bfl2hfl

; 2143 :     {
; 2144 :       bitctr = abs(bitctr);

  004e1	8b 4c 24 50	 mov	 ecx, DWORD PTR bitctr$[rsp]
  004e5	e8 00 00 00 00	 call	 abs
  004ea	89 44 24 50	 mov	 DWORD PTR bitctr$[rsp], eax

; 2145 :       shiftctr = 32 - bitctr;

  004ee	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  004f3	2b 44 24 50	 sub	 eax, DWORD PTR bitctr$[rsp]
  004f7	89 44 24 74	 mov	 DWORD PTR shiftctr$[rsp], eax

; 2146 :       temp1 = 0;

  004fb	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR temp1$[rsp], 0

; 2147 :       for (i = 0; i <= maxword; i++)

  00503	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0050b	eb 0a		 jmp	 SHORT $LN9@bfl2hfl
$LN7@bfl2hfl:
  0050d	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00511	ff c0		 inc	 eax
  00513	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN9@bfl2hfl:
  00517	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR maxword$[rsp]
  0051e	39 44 24 40	 cmp	 DWORD PTR i$[rsp], eax
  00522	7f 5f		 jg	 SHORT $LN8@bfl2hfl

; 2148 :       {
; 2149 :         temp2 = (temptab1[i] & 0x000000ff) << shiftctr;

  00524	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00529	8b 84 84 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax*4]
  00530	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00535	8b 4c 24 74	 mov	 ecx, DWORD PTR shiftctr$[rsp]
  00539	d3 e0		 shl	 eax, cl
  0053b	89 44 24 68	 mov	 DWORD PTR temp2$[rsp], eax

; 2150 :         temptab1[i] >>= bitctr;

  0053f	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00544	8b 4c 24 50	 mov	 ecx, DWORD PTR bitctr$[rsp]
  00548	8b 84 84 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax*4]
  0054f	d3 e8		 shr	 eax, cl
  00551	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR i$[rsp]
  00556	89 84 8c 90 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx*4], eax

; 2151 :         temptab1[i] += temp1;

  0055d	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00562	8b 84 84 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax*4]
  00569	03 44 24 48	 add	 eax, DWORD PTR temp1$[rsp]
  0056d	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR i$[rsp]
  00572	89 84 8c 90 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx*4], eax

; 2152 :         temp1 = temp2;

  00579	8b 44 24 68	 mov	 eax, DWORD PTR temp2$[rsp]
  0057d	89 44 24 48	 mov	 DWORD PTR temp1$[rsp], eax

; 2153 :       }

  00581	eb 8a		 jmp	 SHORT $LN7@bfl2hfl
$LN8@bfl2hfl:
$LN26@bfl2hfl:
$LN25@bfl2hfl:

; 2154 :     }
; 2155 :   hexp += 64;

  00583	8b 44 24 5c	 mov	 eax, DWORD PTR hexp$[rsp]
  00587	83 c0 40	 add	 eax, 64			; 00000040H
  0058a	89 44 24 5c	 mov	 DWORD PTR hexp$[rsp], eax

; 2156 :   cc = checkhfp(temptab1, nwordout, &hexp, optbits, fpc, roundrule, neg);

  0058e	8b 44 24 64	 mov	 eax, DWORD PTR neg$[rsp]
  00592	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00596	8b 44 24 60	 mov	 eax, DWORD PTR roundrule$[rsp]
  0059a	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0059e	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  005a6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005ab	44 0f b6 8c 24
	20 01 00 00	 movzx	 r9d, BYTE PTR optbits$[rsp]
  005b4	4c 8d 44 24 5c	 lea	 r8, QWORD PTR hexp$[rsp]
  005b9	8b 94 24 18 01
	00 00		 mov	 edx, DWORD PTR nwordout$[rsp]
  005c0	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR temptab1$[rsp]
  005c8	e8 00 00 00 00	 call	 checkhfp
  005cd	89 84 24 84 00
	00 00		 mov	 DWORD PTR cc$[rsp], eax

; 2157 :   memcpy(tabout, temptab1, sizeof(int) * nwordout);

  005d4	48 63 84 24 18
	01 00 00	 movsxd	 rax, DWORD PTR nwordout$[rsp]
  005dc	48 c1 e0 02	 shl	 rax, 2
  005e0	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR temptab1$[rsp]
  005e8	48 8b bc 24 08
	01 00 00	 mov	 rdi, QWORD PTR tabout$[rsp]
  005f0	48 8b f1	 mov	 rsi, rcx
  005f3	48 8b c8	 mov	 rcx, rax
  005f6	f3 a4		 rep movsb

; 2158 :   switch (nwordout)

  005f8	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR nwordout$[rsp]
  005ff	89 44 24 78	 mov	 DWORD PTR tv269[rsp], eax
  00603	83 7c 24 78 01	 cmp	 DWORD PTR tv269[rsp], 1
  00608	74 1b		 je	 SHORT $LN27@bfl2hfl
  0060a	83 7c 24 78 02	 cmp	 DWORD PTR tv269[rsp], 2
  0060f	0f 84 57 01 00
	00		 je	 $LN31@bfl2hfl
  00615	83 7c 24 78 04	 cmp	 DWORD PTR tv269[rsp], 4
  0061a	0f 84 68 02 00
	00		 je	 $LN35@bfl2hfl
  00620	e9 af 04 00 00	 jmp	 $LN10@bfl2hfl
$LN27@bfl2hfl:

; 2159 :   {
; 2160 :   case 1:
; 2161 :     rem = temptab1[1] >> 28;

  00625	b8 04 00 00 00	 mov	 eax, 4
  0062a	48 6b c0 01	 imul	 rax, rax, 1
  0062e	8b 84 04 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  00635	c1 e8 1c	 shr	 eax, 28
  00638	89 44 24 54	 mov	 DWORD PTR rem$[rsp], eax

; 2162 :     mid = 0;

  0063c	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR mid$[rsp], 0

; 2163 :     temptab1[1] &= 0x0fffffff;

  00644	b8 04 00 00 00	 mov	 eax, 4
  00649	48 6b c0 01	 imul	 rax, rax, 1
  0064d	8b 84 04 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  00654	25 ff ff ff 0f	 and	 eax, 268435455		; 0fffffffH
  00659	b9 04 00 00 00	 mov	 ecx, 4
  0065e	48 6b c9 01	 imul	 rcx, rcx, 1
  00662	89 84 0c 90 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx], eax

; 2164 :     if (temptab1[1] == 0 && temptab1[2] == 0 &&
; 2165 :       temptab1[3] == 0 && temptab1[4] == 0)

  00669	b8 04 00 00 00	 mov	 eax, 4
  0066e	48 6b c0 01	 imul	 rax, rax, 1
  00672	83 bc 04 90 00
	00 00 00	 cmp	 DWORD PTR temptab1$[rsp+rax], 0
  0067a	75 41		 jne	 SHORT $LN28@bfl2hfl
  0067c	b8 04 00 00 00	 mov	 eax, 4
  00681	48 6b c0 02	 imul	 rax, rax, 2
  00685	83 bc 04 90 00
	00 00 00	 cmp	 DWORD PTR temptab1$[rsp+rax], 0
  0068d	75 2e		 jne	 SHORT $LN28@bfl2hfl
  0068f	b8 04 00 00 00	 mov	 eax, 4
  00694	48 6b c0 03	 imul	 rax, rax, 3
  00698	83 bc 04 90 00
	00 00 00	 cmp	 DWORD PTR temptab1$[rsp+rax], 0
  006a0	75 1b		 jne	 SHORT $LN28@bfl2hfl
  006a2	b8 04 00 00 00	 mov	 eax, 4
  006a7	48 6b c0 04	 imul	 rax, rax, 4
  006ab	83 bc 04 90 00
	00 00 00	 cmp	 DWORD PTR temptab1$[rsp+rax], 0
  006b3	75 08		 jne	 SHORT $LN28@bfl2hfl

; 2166 :       mid = 1;

  006b5	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR mid$[rsp], 1
$LN28@bfl2hfl:

; 2167 :     if (mid == 0 || rem != 0)

  006bd	83 7c 24 44 00	 cmp	 DWORD PTR mid$[rsp], 0
  006c2	74 07		 je	 SHORT $LN30@bfl2hfl
  006c4	83 7c 24 54 00	 cmp	 DWORD PTR rem$[rsp], 0
  006c9	74 18		 je	 SHORT $LN29@bfl2hfl
$LN30@bfl2hfl:

; 2168 :       *fpc |= FPC_FLAG_SFX;

  006cb	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  006d3	8b 00		 mov	 eax, DWORD PTR [rax]
  006d5	0f ba e8 13	 bts	 eax, 19
  006d9	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  006e1	89 01		 mov	 DWORD PTR [rcx], eax
$LN29@bfl2hfl:

; 2169 :     roundarray(tabout, 1, roundrule, rem, 16, neg, 0, mid);

  006e3	8b 44 24 44	 mov	 eax, DWORD PTR mid$[rsp]
  006e7	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  006eb	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  006f3	8b 44 24 64	 mov	 eax, DWORD PTR neg$[rsp]
  006f7	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  006fb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00703	44 8b 4c 24 54	 mov	 r9d, DWORD PTR rem$[rsp]
  00708	44 8b 44 24 60	 mov	 r8d, DWORD PTR roundrule$[rsp]
  0070d	ba 01 00 00 00	 mov	 edx, 1
  00712	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  0071a	e8 00 00 00 00	 call	 roundarray

; 2170 :     tabout[1] = 0;

  0071f	b8 04 00 00 00	 mov	 eax, 4
  00724	48 6b c0 01	 imul	 rax, rax, 1
  00728	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  00730	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [rcx+rax], 0

; 2171 :     tabout[2] = 0;

  00737	b8 04 00 00 00	 mov	 eax, 4
  0073c	48 6b c0 02	 imul	 rax, rax, 2
  00740	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  00748	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [rcx+rax], 0

; 2172 :     tabout[3] = 0;

  0074f	b8 04 00 00 00	 mov	 eax, 4
  00754	48 6b c0 03	 imul	 rax, rax, 3
  00758	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  00760	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [rcx+rax], 0

; 2173 :     break;

  00767	e9 68 03 00 00	 jmp	 $LN10@bfl2hfl
$LN31@bfl2hfl:

; 2174 :   case 2:
; 2175 :     rem = temptab1[2] >> 28;

  0076c	b8 04 00 00 00	 mov	 eax, 4
  00771	48 6b c0 02	 imul	 rax, rax, 2
  00775	8b 84 04 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  0077c	c1 e8 1c	 shr	 eax, 28
  0077f	89 44 24 54	 mov	 DWORD PTR rem$[rsp], eax

; 2176 :     mid = 0;

  00783	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR mid$[rsp], 0

; 2177 :     temptab1[2] &= 0x0fffffff;

  0078b	b8 04 00 00 00	 mov	 eax, 4
  00790	48 6b c0 02	 imul	 rax, rax, 2
  00794	8b 84 04 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  0079b	25 ff ff ff 0f	 and	 eax, 268435455		; 0fffffffH
  007a0	b9 04 00 00 00	 mov	 ecx, 4
  007a5	48 6b c9 02	 imul	 rcx, rcx, 2
  007a9	89 84 0c 90 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx], eax

; 2178 :     if (temptab1[2] == 0 && temptab1[3] == 0 &&

  007b0	b8 04 00 00 00	 mov	 eax, 4
  007b5	48 6b c0 02	 imul	 rax, rax, 2
  007b9	83 bc 04 90 00
	00 00 00	 cmp	 DWORD PTR temptab1$[rsp+rax], 0
  007c1	75 2e		 jne	 SHORT $LN32@bfl2hfl
  007c3	b8 04 00 00 00	 mov	 eax, 4
  007c8	48 6b c0 03	 imul	 rax, rax, 3
  007cc	83 bc 04 90 00
	00 00 00	 cmp	 DWORD PTR temptab1$[rsp+rax], 0
  007d4	75 1b		 jne	 SHORT $LN32@bfl2hfl
  007d6	b8 04 00 00 00	 mov	 eax, 4
  007db	48 6b c0 04	 imul	 rax, rax, 4
  007df	83 bc 04 90 00
	00 00 00	 cmp	 DWORD PTR temptab1$[rsp+rax], 0
  007e7	75 08		 jne	 SHORT $LN32@bfl2hfl

; 2179 :       temptab1[4] == 0)
; 2180 :       mid = 1;

  007e9	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR mid$[rsp], 1
$LN32@bfl2hfl:

; 2181 :     if (mid == 0 || rem != 0)

  007f1	83 7c 24 44 00	 cmp	 DWORD PTR mid$[rsp], 0
  007f6	74 07		 je	 SHORT $LN34@bfl2hfl
  007f8	83 7c 24 54 00	 cmp	 DWORD PTR rem$[rsp], 0
  007fd	74 18		 je	 SHORT $LN33@bfl2hfl
$LN34@bfl2hfl:

; 2182 :       *fpc |= FPC_FLAG_SFX;

  007ff	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  00807	8b 00		 mov	 eax, DWORD PTR [rax]
  00809	0f ba e8 13	 bts	 eax, 19
  0080d	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  00815	89 01		 mov	 DWORD PTR [rcx], eax
$LN33@bfl2hfl:

; 2183 :     roundarray(tabout, 2, roundrule, rem, 16, neg, 0, mid);

  00817	8b 44 24 44	 mov	 eax, DWORD PTR mid$[rsp]
  0081b	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0081f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00827	8b 44 24 64	 mov	 eax, DWORD PTR neg$[rsp]
  0082b	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0082f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00837	44 8b 4c 24 54	 mov	 r9d, DWORD PTR rem$[rsp]
  0083c	44 8b 44 24 60	 mov	 r8d, DWORD PTR roundrule$[rsp]
  00841	ba 02 00 00 00	 mov	 edx, 2
  00846	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  0084e	e8 00 00 00 00	 call	 roundarray

; 2184 :     tabout[2] = 0;

  00853	b8 04 00 00 00	 mov	 eax, 4
  00858	48 6b c0 02	 imul	 rax, rax, 2
  0085c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  00864	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [rcx+rax], 0

; 2185 :     tabout[3] = 0;

  0086b	b8 04 00 00 00	 mov	 eax, 4
  00870	48 6b c0 03	 imul	 rax, rax, 3
  00874	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  0087c	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [rcx+rax], 0

; 2186 :     break;

  00883	e9 4c 02 00 00	 jmp	 $LN10@bfl2hfl
$LN35@bfl2hfl:

; 2187 :   case 4:
; 2188 :     rem = (tabout[3] & 0x000000f0) >> 4;

  00888	b8 04 00 00 00	 mov	 eax, 4
  0088d	48 6b c0 03	 imul	 rax, rax, 3
  00891	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  00899	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0089c	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  008a1	c1 e8 04	 shr	 eax, 4
  008a4	89 44 24 54	 mov	 DWORD PTR rem$[rsp], eax

; 2189 :     arrayshiftright(tabout, 4, 8, remtab);

  008a8	4c 8d 8c 24 a8
	00 00 00	 lea	 r9, QWORD PTR remtab$[rsp]
  008b0	41 b8 08 00 00
	00		 mov	 r8d, 8
  008b6	ba 04 00 00 00	 mov	 edx, 4
  008bb	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  008c3	e8 00 00 00 00	 call	 arrayshiftright

; 2190 :     mid = 0;

  008c8	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR mid$[rsp], 0

; 2191 :     temptab1[3] &= 0x0000000f;

  008d0	b8 04 00 00 00	 mov	 eax, 4
  008d5	48 6b c0 03	 imul	 rax, rax, 3
  008d9	8b 84 04 90 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  008e0	83 e0 0f	 and	 eax, 15
  008e3	b9 04 00 00 00	 mov	 ecx, 4
  008e8	48 6b c9 03	 imul	 rcx, rcx, 3
  008ec	89 84 0c 90 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx], eax

; 2192 :     if (temptab1[3] == 0 && temptab1[4] == 0)

  008f3	b8 04 00 00 00	 mov	 eax, 4
  008f8	48 6b c0 03	 imul	 rax, rax, 3
  008fc	83 bc 04 90 00
	00 00 00	 cmp	 DWORD PTR temptab1$[rsp+rax], 0
  00904	75 1b		 jne	 SHORT $LN36@bfl2hfl
  00906	b8 04 00 00 00	 mov	 eax, 4
  0090b	48 6b c0 04	 imul	 rax, rax, 4
  0090f	83 bc 04 90 00
	00 00 00	 cmp	 DWORD PTR temptab1$[rsp+rax], 0
  00917	75 08		 jne	 SHORT $LN36@bfl2hfl

; 2193 :       mid = 1;

  00919	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR mid$[rsp], 1
$LN36@bfl2hfl:

; 2194 :     if (mid == 0 || rem != 0)

  00921	83 7c 24 44 00	 cmp	 DWORD PTR mid$[rsp], 0
  00926	74 07		 je	 SHORT $LN38@bfl2hfl
  00928	83 7c 24 54 00	 cmp	 DWORD PTR rem$[rsp], 0
  0092d	74 18		 je	 SHORT $LN37@bfl2hfl
$LN38@bfl2hfl:

; 2195 :       *fpc |= FPC_FLAG_SFX;

  0092f	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  00937	8b 00		 mov	 eax, DWORD PTR [rax]
  00939	0f ba e8 13	 bts	 eax, 19
  0093d	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  00945	89 01		 mov	 DWORD PTR [rcx], eax
$LN37@bfl2hfl:

; 2196 :     roundarray(tabout, 4, roundrule, rem, 16, neg, 0, mid);

  00947	8b 44 24 44	 mov	 eax, DWORD PTR mid$[rsp]
  0094b	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0094f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00957	8b 44 24 64	 mov	 eax, DWORD PTR neg$[rsp]
  0095b	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0095f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00967	44 8b 4c 24 54	 mov	 r9d, DWORD PTR rem$[rsp]
  0096c	44 8b 44 24 60	 mov	 r8d, DWORD PTR roundrule$[rsp]
  00971	ba 04 00 00 00	 mov	 edx, 4
  00976	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  0097e	e8 00 00 00 00	 call	 roundarray

; 2197 :     temp1 = tabout[2] >> 24;

  00983	b8 04 00 00 00	 mov	 eax, 4
  00988	48 6b c0 02	 imul	 rax, rax, 2
  0098c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  00994	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00997	c1 e8 18	 shr	 eax, 24
  0099a	89 44 24 48	 mov	 DWORD PTR temp1$[rsp], eax

; 2198 :     tabout[2] &= 0x00ffffff;

  0099e	b8 04 00 00 00	 mov	 eax, 4
  009a3	48 6b c0 02	 imul	 rax, rax, 2
  009a7	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  009af	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  009b2	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  009b7	b9 04 00 00 00	 mov	 ecx, 4
  009bc	48 6b c9 02	 imul	 rcx, rcx, 2
  009c0	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR tabout$[rsp]
  009c8	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 2199 :     temp2 = tabout[1] >> 24;

  009cb	b8 04 00 00 00	 mov	 eax, 4
  009d0	48 6b c0 01	 imul	 rax, rax, 1
  009d4	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  009dc	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  009df	c1 e8 18	 shr	 eax, 24
  009e2	89 44 24 68	 mov	 DWORD PTR temp2$[rsp], eax

; 2200 :     tabout[1] <<= 8;

  009e6	b8 04 00 00 00	 mov	 eax, 4
  009eb	48 6b c0 01	 imul	 rax, rax, 1
  009ef	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  009f7	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  009fa	c1 e0 08	 shl	 eax, 8
  009fd	b9 04 00 00 00	 mov	 ecx, 4
  00a02	48 6b c9 01	 imul	 rcx, rcx, 1
  00a06	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR tabout$[rsp]
  00a0e	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 2201 :     tabout[1] += temp1;

  00a11	b8 04 00 00 00	 mov	 eax, 4
  00a16	48 6b c0 01	 imul	 rax, rax, 1
  00a1a	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  00a22	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00a25	03 44 24 48	 add	 eax, DWORD PTR temp1$[rsp]
  00a29	b9 04 00 00 00	 mov	 ecx, 4
  00a2e	48 6b c9 01	 imul	 rcx, rcx, 1
  00a32	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR tabout$[rsp]
  00a3a	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 2202 :     tabout[0] <<= 8;

  00a3d	b8 04 00 00 00	 mov	 eax, 4
  00a42	48 6b c0 00	 imul	 rax, rax, 0
  00a46	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  00a4e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00a51	c1 e0 08	 shl	 eax, 8
  00a54	b9 04 00 00 00	 mov	 ecx, 4
  00a59	48 6b c9 00	 imul	 rcx, rcx, 0
  00a5d	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR tabout$[rsp]
  00a65	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 2203 :     tabout[0] += temp2;

  00a68	b8 04 00 00 00	 mov	 eax, 4
  00a6d	48 6b c0 00	 imul	 rax, rax, 0
  00a71	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  00a79	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00a7c	03 44 24 68	 add	 eax, DWORD PTR temp2$[rsp]
  00a80	b9 04 00 00 00	 mov	 ecx, 4
  00a85	48 6b c9 00	 imul	 rcx, rcx, 0
  00a89	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR tabout$[rsp]
  00a91	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 2204 :     hexp2 = (hexp - 14) << 24;

  00a94	8b 44 24 5c	 mov	 eax, DWORD PTR hexp$[rsp]
  00a98	83 e8 0e	 sub	 eax, 14
  00a9b	c1 e0 18	 shl	 eax, 24
  00a9e	89 84 24 88 00
	00 00		 mov	 DWORD PTR hexp2$[rsp], eax

; 2205 :     tabout[2] += hexp2;

  00aa5	b8 04 00 00 00	 mov	 eax, 4
  00aaa	48 6b c0 02	 imul	 rax, rax, 2
  00aae	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  00ab6	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00ab9	03 84 24 88 00
	00 00		 add	 eax, DWORD PTR hexp2$[rsp]
  00ac0	b9 04 00 00 00	 mov	 ecx, 4
  00ac5	48 6b c9 02	 imul	 rcx, rcx, 2
  00ac9	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR tabout$[rsp]
  00ad1	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax
$LN10@bfl2hfl:

; 2206 :     break;
; 2207 :   }
; 2208 :   hexp <<= 24;

  00ad4	8b 44 24 5c	 mov	 eax, DWORD PTR hexp$[rsp]
  00ad8	c1 e0 18	 shl	 eax, 24
  00adb	89 44 24 5c	 mov	 DWORD PTR hexp$[rsp], eax

; 2209 :   tabout[0] += hexp;

  00adf	b8 04 00 00 00	 mov	 eax, 4
  00ae4	48 6b c0 00	 imul	 rax, rax, 0
  00ae8	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  00af0	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00af3	03 44 24 5c	 add	 eax, DWORD PTR hexp$[rsp]
  00af7	b9 04 00 00 00	 mov	 ecx, 4
  00afc	48 6b c9 00	 imul	 rcx, rcx, 0
  00b00	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR tabout$[rsp]
  00b08	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 2210 :   if (neg)

  00b0b	83 7c 24 64 00	 cmp	 DWORD PTR neg$[rsp], 0
  00b10	74 2c		 je	 SHORT $LN39@bfl2hfl

; 2211 :     tabout[0] |= 0x80000000;

  00b12	b8 04 00 00 00	 mov	 eax, 4
  00b17	48 6b c0 00	 imul	 rax, rax, 0
  00b1b	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  00b23	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00b26	0f ba e8 1f	 bts	 eax, 31
  00b2a	b9 04 00 00 00	 mov	 ecx, 4
  00b2f	48 6b c9 00	 imul	 rcx, rcx, 0
  00b33	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR tabout$[rsp]
  00b3b	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax
$LN39@bfl2hfl:

; 2212 :   return cc;

  00b3e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR cc$[rsp]
$LN1@bfl2hfl:

; 2213 : }

  00b45	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00b4d	48 33 cc	 xor	 rcx, rsp
  00b50	e8 00 00 00 00	 call	 __security_check_cookie
  00b55	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  00b5c	5f		 pop	 rdi
  00b5d	5e		 pop	 rsi
  00b5e	c3		 ret	 0
bfl2hfl	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\pfpo.c
_TEXT	SEGMENT
i$ = 64
temp1$ = 68
bexp$ = 72
bitshift$ = 76
mid$ = 80
zeroctr$ = 84
rem$ = 88
roundrule$ = 92
neg$ = 96
maxword$ = 100
hexp$ = 104
shiftword$ = 108
temp2$ = 112
tv251 = 116
tv92 = 120
cc$ = 124
tv165 = 128
temptab1$ = 136
__$ArrayPad$ = 160
tab$ = 208
tabout$ = 216
nwordin$ = 224
nwordout$ = 232
optbits$ = 240
fpc$ = 248
hfl2bfl	PROC

; 1831 : {

$LN49:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1832 :   unsigned int temptab1[6];
; 1833 :   int hexp;
; 1834 :   int bexp = 0;

  0002f	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR bexp$[rsp], 0

; 1835 :   int neg = 0;

  00037	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR neg$[rsp], 0

; 1836 :   int i;
; 1837 :   int mid;
; 1838 :   int cc = 0;

  0003f	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR cc$[rsp], 0

; 1839 :   int zeroctr;
; 1840 :   int bitshift;
; 1841 :   int roundrule;
; 1842 :   int shiftword;
; 1843 :   int maxword;
; 1844 :   int rem;
; 1845 :   unsigned int temp1;
; 1846 :   unsigned int temp2;
; 1847 :   temp1 = (unsigned int) GR0_RM( optbits );

  00047	0f b6 84 24 f0
	00 00 00	 movzx	 eax, BYTE PTR optbits$[rsp]
  0004f	83 e0 0f	 and	 eax, 15
  00052	89 44 24 44	 mov	 DWORD PTR temp1$[rsp], eax

; 1848 :   if (temp1 == 0)

  00056	83 7c 24 44 00	 cmp	 DWORD PTR temp1$[rsp], 0
  0005b	75 16		 jne	 SHORT $LN21@hfl2bfl

; 1849 :     roundrule = (*fpc & FPC_DRM) >> 4;

  0005d	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  00065	8b 00		 mov	 eax, DWORD PTR [rax]
  00067	83 e0 70	 and	 eax, 112		; 00000070H
  0006a	c1 f8 04	 sar	 eax, 4
  0006d	89 44 24 5c	 mov	 DWORD PTR roundrule$[rsp], eax
  00071	eb 25		 jmp	 SHORT $LN22@hfl2bfl
$LN21@hfl2bfl:

; 1850 :   else
; 1851 :     if (temp1 == 1)

  00073	83 7c 24 44 01	 cmp	 DWORD PTR temp1$[rsp], 1
  00078	75 13		 jne	 SHORT $LN23@hfl2bfl

; 1852 :       roundrule = (*fpc & FPC_BRM_3BIT);

  0007a	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  00082	8b 00		 mov	 eax, DWORD PTR [rax]
  00084	83 e0 07	 and	 eax, 7
  00087	89 44 24 5c	 mov	 DWORD PTR roundrule$[rsp], eax
  0008b	eb 0b		 jmp	 SHORT $LN24@hfl2bfl
$LN23@hfl2bfl:

; 1853 :     else
; 1854 :       roundrule = (int)(temp1 - 8);

  0008d	8b 44 24 44	 mov	 eax, DWORD PTR temp1$[rsp]
  00091	83 e8 08	 sub	 eax, 8
  00094	89 44 24 5c	 mov	 DWORD PTR roundrule$[rsp], eax
$LN24@hfl2bfl:
$LN22@hfl2bfl:

; 1855 :   memset(temptab1, 0x00,sizeof(temptab1));

  00098	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR temptab1$[rsp]
  000a0	48 8b f8	 mov	 rdi, rax
  000a3	33 c0		 xor	 eax, eax
  000a5	b9 18 00 00 00	 mov	 ecx, 24
  000aa	f3 aa		 rep stosb

; 1856 :   memcpy(temptab1, tab, nwordin * 4);

  000ac	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR nwordin$[rsp]
  000b3	c1 e0 02	 shl	 eax, 2
  000b6	48 98		 cdqe
  000b8	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR temptab1$[rsp]
  000c0	48 8b f9	 mov	 rdi, rcx
  000c3	48 8b b4 24 d0
	00 00 00	 mov	 rsi, QWORD PTR tab$[rsp]
  000cb	48 8b c8	 mov	 rcx, rax
  000ce	f3 a4		 rep movsb

; 1857 :   neg = tab[0] >> 31;

  000d0	b8 04 00 00 00	 mov	 eax, 4
  000d5	48 6b c0 00	 imul	 rax, rax, 0
  000d9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tab$[rsp]
  000e1	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000e4	c1 e8 1f	 shr	 eax, 31
  000e7	89 44 24 60	 mov	 DWORD PTR neg$[rsp], eax

; 1858 :   temptab1[0] &= 0x7fffffff;

  000eb	b8 04 00 00 00	 mov	 eax, 4
  000f0	48 6b c0 00	 imul	 rax, rax, 0
  000f4	8b 84 04 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  000fb	0f ba f0 1f	 btr	 eax, 31
  000ff	b9 04 00 00 00	 mov	 ecx, 4
  00104	48 6b c9 00	 imul	 rcx, rcx, 0
  00108	89 84 0c 88 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx], eax

; 1859 :   maxword = max(nwordin, nwordout) + 1;

  0010f	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR nwordout$[rsp]
  00116	39 84 24 e0 00
	00 00		 cmp	 DWORD PTR nwordin$[rsp], eax
  0011d	7e 0d		 jle	 SHORT $LN47@hfl2bfl
  0011f	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR nwordin$[rsp]
  00126	89 44 24 78	 mov	 DWORD PTR tv92[rsp], eax
  0012a	eb 0b		 jmp	 SHORT $LN48@hfl2bfl
$LN47@hfl2bfl:
  0012c	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR nwordout$[rsp]
  00133	89 44 24 78	 mov	 DWORD PTR tv92[rsp], eax
$LN48@hfl2bfl:
  00137	8b 44 24 78	 mov	 eax, DWORD PTR tv92[rsp]
  0013b	ff c0		 inc	 eax
  0013d	89 44 24 64	 mov	 DWORD PTR maxword$[rsp], eax

; 1860 : /***************************************************************/
; 1861 : /*   extract the hex exponent and shift it out                 */
; 1862 : /***************************************************************/
; 1863 :   hexp = temptab1[0] >> 24;

  00141	b8 04 00 00 00	 mov	 eax, 4
  00146	48 6b c0 00	 imul	 rax, rax, 0
  0014a	8b 84 04 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  00151	c1 e8 18	 shr	 eax, 24
  00154	89 44 24 68	 mov	 DWORD PTR hexp$[rsp], eax

; 1864 :   temptab1[0] &= 0x00ffffff;

  00158	b8 04 00 00 00	 mov	 eax, 4
  0015d	48 6b c0 00	 imul	 rax, rax, 0
  00161	8b 84 04 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  00168	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0016d	b9 04 00 00 00	 mov	 ecx, 4
  00172	48 6b c9 00	 imul	 rcx, rcx, 0
  00176	89 84 0c 88 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx], eax

; 1865 :   hexp -= 64;

  0017d	8b 44 24 68	 mov	 eax, DWORD PTR hexp$[rsp]
  00181	83 e8 40	 sub	 eax, 64			; 00000040H
  00184	89 44 24 68	 mov	 DWORD PTR hexp$[rsp], eax

; 1866 : /***************************************************************/
; 1867 : /*   if extended hex float, shift out the low order exponent   */
; 1868 : /***************************************************************/
; 1869 :   if (nwordin == 4)

  00188	83 bc 24 e0 00
	00 00 04	 cmp	 DWORD PTR nwordin$[rsp], 4
  00190	0f 85 81 00 00
	00		 jne	 $LN25@hfl2bfl

; 1870 :   {
; 1871 :     temp1 = temptab1[3] >> 24;

  00196	b8 04 00 00 00	 mov	 eax, 4
  0019b	48 6b c0 03	 imul	 rax, rax, 3
  0019f	8b 84 04 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  001a6	c1 e8 18	 shr	 eax, 24
  001a9	89 44 24 44	 mov	 DWORD PTR temp1$[rsp], eax

; 1872 :     temptab1[3] <<= 8;

  001ad	b8 04 00 00 00	 mov	 eax, 4
  001b2	48 6b c0 03	 imul	 rax, rax, 3
  001b6	8b 84 04 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  001bd	c1 e0 08	 shl	 eax, 8
  001c0	b9 04 00 00 00	 mov	 ecx, 4
  001c5	48 6b c9 03	 imul	 rcx, rcx, 3
  001c9	89 84 0c 88 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx], eax

; 1873 :     temptab1[2] <<= 8;

  001d0	b8 04 00 00 00	 mov	 eax, 4
  001d5	48 6b c0 02	 imul	 rax, rax, 2
  001d9	8b 84 04 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  001e0	c1 e0 08	 shl	 eax, 8
  001e3	b9 04 00 00 00	 mov	 ecx, 4
  001e8	48 6b c9 02	 imul	 rcx, rcx, 2
  001ec	89 84 0c 88 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx], eax

; 1874 :     temptab1[2] += temp1;

  001f3	b8 04 00 00 00	 mov	 eax, 4
  001f8	48 6b c0 02	 imul	 rax, rax, 2
  001fc	8b 84 04 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  00203	03 44 24 44	 add	 eax, DWORD PTR temp1$[rsp]
  00207	b9 04 00 00 00	 mov	 ecx, 4
  0020c	48 6b c9 02	 imul	 rcx, rcx, 2
  00210	89 84 0c 88 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx], eax
$LN25@hfl2bfl:

; 1875 :   }
; 1876 : /***************************************************************/
; 1877 : /*   count leading bits                                        */
; 1878 : /***************************************************************/
; 1879 :   zeroctr = 0;

  00217	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR zeroctr$[rsp], 0

; 1880 :   for (i = 0; i < nwordin;i++)

  0021f	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00227	eb 0a		 jmp	 SHORT $LN4@hfl2bfl
$LN2@hfl2bfl:
  00229	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  0022d	ff c0		 inc	 eax
  0022f	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN4@hfl2bfl:
  00233	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR nwordin$[rsp]
  0023a	39 44 24 40	 cmp	 DWORD PTR i$[rsp], eax
  0023e	7d 20		 jge	 SHORT $LN3@hfl2bfl

; 1881 :   {
; 1882 :     if (temptab1[i] == 0)

  00240	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00245	83 bc 84 88 00
	00 00 00	 cmp	 DWORD PTR temptab1$[rsp+rax*4], 0
  0024d	75 0d		 jne	 SHORT $LN26@hfl2bfl

; 1883 :     {
; 1884 :       zeroctr += 32;

  0024f	8b 44 24 54	 mov	 eax, DWORD PTR zeroctr$[rsp]
  00253	83 c0 20	 add	 eax, 32			; 00000020H
  00256	89 44 24 54	 mov	 DWORD PTR zeroctr$[rsp], eax

; 1885 :       continue;

  0025a	eb cd		 jmp	 SHORT $LN2@hfl2bfl
$LN26@hfl2bfl:

; 1886 :     }
; 1887 :     break;

  0025c	eb 02		 jmp	 SHORT $LN3@hfl2bfl

; 1888 :   }

  0025e	eb c9		 jmp	 SHORT $LN2@hfl2bfl
$LN3@hfl2bfl:

; 1889 : /***************************************************************/
; 1890 : /*  if all zeros, clear the output number and exit             */
; 1891 : /***************************************************************/
; 1892 :   if (i == nwordin)

  00260	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR nwordin$[rsp]
  00267	39 44 24 40	 cmp	 DWORD PTR i$[rsp], eax
  0026b	75 2f		 jne	 SHORT $LN27@hfl2bfl

; 1893 :   {
; 1894 :     memset(tabout, 0x00, nwordout * 4);

  0026d	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR nwordout$[rsp]
  00274	c1 e0 02	 shl	 eax, 2
  00277	48 98		 cdqe
  00279	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv165[rsp], rax
  00281	48 8b bc 24 d8
	00 00 00	 mov	 rdi, QWORD PTR tabout$[rsp]
  00289	33 c0		 xor	 eax, eax
  0028b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv165[rsp]
  00293	f3 aa		 rep stosb

; 1895 :     return 0;

  00295	33 c0		 xor	 eax, eax
  00297	e9 85 06 00 00	 jmp	 $LN1@hfl2bfl
$LN27@hfl2bfl:

; 1896 :   }
; 1897 :   temp1 = temptab1[i];

  0029c	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  002a1	8b 84 84 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax*4]
  002a8	89 44 24 44	 mov	 DWORD PTR temp1$[rsp], eax
$LN5@hfl2bfl:

; 1898 :   while (temp1 > 0)

  002ac	83 7c 24 44 00	 cmp	 DWORD PTR temp1$[rsp], 0
  002b1	76 25		 jbe	 SHORT $LN6@hfl2bfl

; 1899 :   {
; 1900 :     if (temp1 & 0x80000000)

  002b3	8b 44 24 44	 mov	 eax, DWORD PTR temp1$[rsp]
  002b7	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  002bc	85 c0		 test	 eax, eax
  002be	74 02		 je	 SHORT $LN28@hfl2bfl

; 1901 :       break;

  002c0	eb 16		 jmp	 SHORT $LN6@hfl2bfl
$LN28@hfl2bfl:

; 1902 :     zeroctr++;

  002c2	8b 44 24 54	 mov	 eax, DWORD PTR zeroctr$[rsp]
  002c6	ff c0		 inc	 eax
  002c8	89 44 24 54	 mov	 DWORD PTR zeroctr$[rsp], eax

; 1903 :     temp1 <<= 1;

  002cc	8b 44 24 44	 mov	 eax, DWORD PTR temp1$[rsp]
  002d0	d1 e0		 shl	 eax, 1
  002d2	89 44 24 44	 mov	 DWORD PTR temp1$[rsp], eax

; 1904 :   }

  002d6	eb d4		 jmp	 SHORT $LN5@hfl2bfl
$LN6@hfl2bfl:

; 1905 :   zeroctr -= 8;     //   reduce for the exponent byte

  002d8	8b 44 24 54	 mov	 eax, DWORD PTR zeroctr$[rsp]
  002dc	83 e8 08	 sub	 eax, 8
  002df	89 44 24 54	 mov	 DWORD PTR zeroctr$[rsp], eax

; 1906 : /***************************************************************/
; 1907 : /*   The nummber of bits to shift is the difference between    */
; 1908 : /*   the number of bits for the hex exponent (always 8) minus  */
; 1909 : /*   the number of bits for the binary exponent. plus the      */
; 1910 : /*   number of leading zero bits (adjusted for the exponent    */
; 1911 : /*   yte.  Note that when going from hex to binary, the        */
; 1912 : /*   number will never be subnormal.  There is also an         */
; 1913 : /*   implied bit that is in the low order bit of the exponent  */
; 1914 : /*   that we must allow for in the shift calculation           */
; 1915 : /***************************************************************/
; 1916 :   bitshift = 9 - bflexpbits[nwordout] + zeroctr;

  002e3	48 63 84 24 e8
	00 00 00	 movsxd	 rax, DWORD PTR nwordout$[rsp]
  002eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bflexpbits
  002f2	ba 09 00 00 00	 mov	 edx, 9
  002f7	2b 14 81	 sub	 edx, DWORD PTR [rcx+rax*4]
  002fa	8b c2		 mov	 eax, edx
  002fc	03 44 24 54	 add	 eax, DWORD PTR zeroctr$[rsp]
  00300	89 44 24 4c	 mov	 DWORD PTR bitshift$[rsp], eax

; 1917 : /***************************************************************/
; 1918 : /*   the binary exponent is the hex exponent times 4 minus     */
; 1919 : /*   the shift for normalization.                              */
; 1920 : /***************************************************************/
; 1921 :   bexp = (hexp * 4) - (zeroctr + 1);

  00304	8b 44 24 68	 mov	 eax, DWORD PTR hexp$[rsp]
  00308	c1 e0 02	 shl	 eax, 2
  0030b	8b 4c 24 54	 mov	 ecx, DWORD PTR zeroctr$[rsp]
  0030f	ff c1		 inc	 ecx
  00311	2b c1		 sub	 eax, ecx
  00313	89 44 24 48	 mov	 DWORD PTR bexp$[rsp], eax

; 1922 : /***************************************************************/
; 1923 : /*   do the shift                                              */
; 1924 : /***************************************************************/
; 1925 :   if (bitshift > 32)

  00317	83 7c 24 4c 20	 cmp	 DWORD PTR bitshift$[rsp], 32 ; 00000020H
  0031c	0f 8e 93 00 00
	00		 jle	 $LN29@hfl2bfl

; 1926 :   {
; 1927 :     shiftword = bitshift / 32;

  00322	8b 44 24 4c	 mov	 eax, DWORD PTR bitshift$[rsp]
  00326	99		 cdq
  00327	83 e2 1f	 and	 edx, 31
  0032a	03 c2		 add	 eax, edx
  0032c	c1 f8 05	 sar	 eax, 5
  0032f	89 44 24 6c	 mov	 DWORD PTR shiftword$[rsp], eax

; 1928 :     for (i = 0; i < maxword - shiftword; i++)

  00333	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0033b	eb 0a		 jmp	 SHORT $LN9@hfl2bfl
$LN7@hfl2bfl:
  0033d	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00341	ff c0		 inc	 eax
  00343	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN9@hfl2bfl:
  00347	8b 44 24 6c	 mov	 eax, DWORD PTR shiftword$[rsp]
  0034b	8b 4c 24 64	 mov	 ecx, DWORD PTR maxword$[rsp]
  0034f	2b c8		 sub	 ecx, eax
  00351	8b c1		 mov	 eax, ecx
  00353	39 44 24 40	 cmp	 DWORD PTR i$[rsp], eax
  00357	7d 23		 jge	 SHORT $LN8@hfl2bfl

; 1929 :       temptab1[i] = temptab1[i + shiftword];

  00359	8b 44 24 6c	 mov	 eax, DWORD PTR shiftword$[rsp]
  0035d	8b 4c 24 40	 mov	 ecx, DWORD PTR i$[rsp]
  00361	03 c8		 add	 ecx, eax
  00363	8b c1		 mov	 eax, ecx
  00365	48 98		 cdqe
  00367	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR i$[rsp]
  0036c	8b 84 84 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax*4]
  00373	89 84 8c 88 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx*4], eax
  0037a	eb c1		 jmp	 SHORT $LN7@hfl2bfl
$LN8@hfl2bfl:

; 1930 :     for (; i < maxword; i++)

  0037c	eb 0a		 jmp	 SHORT $LN12@hfl2bfl
$LN10@hfl2bfl:
  0037e	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  00382	ff c0		 inc	 eax
  00384	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN12@hfl2bfl:
  00388	8b 44 24 64	 mov	 eax, DWORD PTR maxword$[rsp]
  0038c	39 44 24 40	 cmp	 DWORD PTR i$[rsp], eax
  00390	7d 12		 jge	 SHORT $LN11@hfl2bfl

; 1931 :       temptab1[i] = 0;

  00392	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00397	c7 84 84 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR temptab1$[rsp+rax*4], 0
  003a2	eb da		 jmp	 SHORT $LN10@hfl2bfl
$LN11@hfl2bfl:

; 1932 :     bitshift -= shiftword * 32;

  003a4	6b 44 24 6c 20	 imul	 eax, DWORD PTR shiftword$[rsp], 32 ; 00000020H
  003a9	8b 4c 24 4c	 mov	 ecx, DWORD PTR bitshift$[rsp]
  003ad	2b c8		 sub	 ecx, eax
  003af	8b c1		 mov	 eax, ecx
  003b1	89 44 24 4c	 mov	 DWORD PTR bitshift$[rsp], eax
$LN29@hfl2bfl:

; 1933 :   }
; 1934 :   if (bitshift < 0)

  003b5	83 7c 24 4c 00	 cmp	 DWORD PTR bitshift$[rsp], 0
  003ba	0f 8d 97 00 00
	00		 jge	 $LN30@hfl2bfl

; 1935 :   {
; 1936 :     bitshift = abs(bitshift);

  003c0	8b 4c 24 4c	 mov	 ecx, DWORD PTR bitshift$[rsp]
  003c4	e8 00 00 00 00	 call	 abs
  003c9	89 44 24 4c	 mov	 DWORD PTR bitshift$[rsp], eax

; 1937 :     temp1 = 0;

  003cd	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR temp1$[rsp], 0

; 1938 :     for (i = 0; i <= maxword; i++)

  003d5	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  003dd	eb 0a		 jmp	 SHORT $LN15@hfl2bfl
$LN13@hfl2bfl:
  003df	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  003e3	ff c0		 inc	 eax
  003e5	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN15@hfl2bfl:
  003e9	8b 44 24 64	 mov	 eax, DWORD PTR maxword$[rsp]
  003ed	39 44 24 40	 cmp	 DWORD PTR i$[rsp], eax
  003f1	7f 5f		 jg	 SHORT $LN14@hfl2bfl

; 1939 :     {
; 1940 :       temp2 = temptab1[i] << (32 - bitshift);

  003f3	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  003f8	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  003fd	2b 4c 24 4c	 sub	 ecx, DWORD PTR bitshift$[rsp]
  00401	8b 84 84 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax*4]
  00408	d3 e0		 shl	 eax, cl
  0040a	89 44 24 70	 mov	 DWORD PTR temp2$[rsp], eax

; 1941 :       temptab1[i] >>= bitshift;

  0040e	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00413	8b 4c 24 4c	 mov	 ecx, DWORD PTR bitshift$[rsp]
  00417	8b 84 84 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax*4]
  0041e	d3 e8		 shr	 eax, cl
  00420	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR i$[rsp]
  00425	89 84 8c 88 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx*4], eax

; 1942 :       temptab1[i] += temp1;

  0042c	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  00431	8b 84 84 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax*4]
  00438	03 44 24 44	 add	 eax, DWORD PTR temp1$[rsp]
  0043c	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR i$[rsp]
  00441	89 84 8c 88 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx*4], eax

; 1943 :       temp1 = temp2;

  00448	8b 44 24 70	 mov	 eax, DWORD PTR temp2$[rsp]
  0044c	89 44 24 44	 mov	 DWORD PTR temp1$[rsp], eax

; 1944 :     }

  00450	eb 8d		 jmp	 SHORT $LN13@hfl2bfl
$LN14@hfl2bfl:

; 1945 :   }

  00452	e9 8f 00 00 00	 jmp	 $LN31@hfl2bfl
$LN30@hfl2bfl:

; 1946 :   else
; 1947 :     if (bitshift > 0)

  00457	83 7c 24 4c 00	 cmp	 DWORD PTR bitshift$[rsp], 0
  0045c	0f 8e 84 00 00
	00		 jle	 $LN32@hfl2bfl

; 1948 :     {
; 1949 :       temp1 = 0;

  00462	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR temp1$[rsp], 0

; 1950 :       for (i = maxword - 1; i >= 0; i--)

  0046a	8b 44 24 64	 mov	 eax, DWORD PTR maxword$[rsp]
  0046e	ff c8		 dec	 eax
  00470	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
  00474	eb 0a		 jmp	 SHORT $LN18@hfl2bfl
$LN16@hfl2bfl:
  00476	8b 44 24 40	 mov	 eax, DWORD PTR i$[rsp]
  0047a	ff c8		 dec	 eax
  0047c	89 44 24 40	 mov	 DWORD PTR i$[rsp], eax
$LN18@hfl2bfl:
  00480	83 7c 24 40 00	 cmp	 DWORD PTR i$[rsp], 0
  00485	7c 5f		 jl	 SHORT $LN17@hfl2bfl

; 1951 :       {
; 1952 :         temp2 = temptab1[i] >> (32 - bitshift);

  00487	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  0048c	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00491	2b 4c 24 4c	 sub	 ecx, DWORD PTR bitshift$[rsp]
  00495	8b 84 84 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax*4]
  0049c	d3 e8		 shr	 eax, cl
  0049e	89 44 24 70	 mov	 DWORD PTR temp2$[rsp], eax

; 1953 :         temptab1[i] <<= bitshift;

  004a2	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  004a7	8b 4c 24 4c	 mov	 ecx, DWORD PTR bitshift$[rsp]
  004ab	8b 84 84 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax*4]
  004b2	d3 e0		 shl	 eax, cl
  004b4	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR i$[rsp]
  004b9	89 84 8c 88 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx*4], eax

; 1954 :         temptab1[i] += temp1;

  004c0	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$[rsp]
  004c5	8b 84 84 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax*4]
  004cc	03 44 24 44	 add	 eax, DWORD PTR temp1$[rsp]
  004d0	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR i$[rsp]
  004d5	89 84 8c 88 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx*4], eax

; 1955 :         temp1 = temp2;

  004dc	8b 44 24 70	 mov	 eax, DWORD PTR temp2$[rsp]
  004e0	89 44 24 44	 mov	 DWORD PTR temp1$[rsp], eax

; 1956 :       }

  004e4	eb 90		 jmp	 SHORT $LN16@hfl2bfl
$LN17@hfl2bfl:
$LN32@hfl2bfl:
$LN31@hfl2bfl:

; 1957 :     }
; 1958 : /***************************************************************/
; 1959 : /*   copy the number back from workarea                        */
; 1960 : /***************************************************************/
; 1961 :   memset(tabout, 0x00, 16);

  004e6	48 8b bc 24 d8
	00 00 00	 mov	 rdi, QWORD PTR tabout$[rsp]
  004ee	33 c0		 xor	 eax, eax
  004f0	b9 10 00 00 00	 mov	 ecx, 16
  004f5	f3 aa		 rep stosb

; 1962 :   memcpy(tabout, temptab1, nwordout * sizeof(int));

  004f7	48 63 84 24 e8
	00 00 00	 movsxd	 rax, DWORD PTR nwordout$[rsp]
  004ff	48 c1 e0 02	 shl	 rax, 2
  00503	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR temptab1$[rsp]
  0050b	48 8b bc 24 d8
	00 00 00	 mov	 rdi, QWORD PTR tabout$[rsp]
  00513	48 8b f1	 mov	 rsi, rcx
  00516	48 8b c8	 mov	 rcx, rax
  00519	f3 a4		 rep movsb

; 1963 : /***************************************************************/
; 1964 : /* shift the binary exponent based on the size                 */
; 1965 : /***************************************************************/
; 1966 :   switch (nwordout)

  0051b	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR nwordout$[rsp]
  00522	89 44 24 74	 mov	 DWORD PTR tv251[rsp], eax
  00526	83 7c 24 74 01	 cmp	 DWORD PTR tv251[rsp], 1
  0052b	74 1b		 je	 SHORT $LN33@hfl2bfl
  0052d	83 7c 24 74 02	 cmp	 DWORD PTR tv251[rsp], 2
  00532	0f 84 51 01 00
	00		 je	 $LN37@hfl2bfl
  00538	83 7c 24 74 04	 cmp	 DWORD PTR tv251[rsp], 4
  0053d	0f 84 76 02 00
	00		 je	 $LN41@hfl2bfl
  00543	e9 76 03 00 00	 jmp	 $LN19@hfl2bfl
$LN33@hfl2bfl:

; 1967 :   {
; 1968 :   case 1:
; 1969 :     bexp += 127;

  00548	8b 44 24 48	 mov	 eax, DWORD PTR bexp$[rsp]
  0054c	83 c0 7f	 add	 eax, 127		; 0000007fH
  0054f	89 44 24 48	 mov	 DWORD PTR bexp$[rsp], eax

; 1970 :     bexp <<= 23;

  00553	8b 44 24 48	 mov	 eax, DWORD PTR bexp$[rsp]
  00557	c1 e0 17	 shl	 eax, 23
  0055a	89 44 24 48	 mov	 DWORD PTR bexp$[rsp], eax

; 1971 :     rem = temptab1[1] >> 31;

  0055e	b8 04 00 00 00	 mov	 eax, 4
  00563	48 6b c0 01	 imul	 rax, rax, 1
  00567	8b 84 04 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  0056e	c1 e8 1f	 shr	 eax, 31
  00571	89 44 24 58	 mov	 DWORD PTR rem$[rsp], eax

; 1972 :     temptab1[1] &= 0x7fffffff;

  00575	b8 04 00 00 00	 mov	 eax, 4
  0057a	48 6b c0 01	 imul	 rax, rax, 1
  0057e	8b 84 04 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  00585	0f ba f0 1f	 btr	 eax, 31
  00589	b9 04 00 00 00	 mov	 ecx, 4
  0058e	48 6b c9 01	 imul	 rcx, rcx, 1
  00592	89 84 0c 88 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx], eax

; 1973 :     mid = 0;

  00599	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR mid$[rsp], 0

; 1974 :     if (temptab1[1] == 0 && temptab1[2] == 0 &&
; 1975 :       temptab1[3] == 0 && temptab1[4] == 0)

  005a1	b8 04 00 00 00	 mov	 eax, 4
  005a6	48 6b c0 01	 imul	 rax, rax, 1
  005aa	83 bc 04 88 00
	00 00 00	 cmp	 DWORD PTR temptab1$[rsp+rax], 0
  005b2	75 41		 jne	 SHORT $LN34@hfl2bfl
  005b4	b8 04 00 00 00	 mov	 eax, 4
  005b9	48 6b c0 02	 imul	 rax, rax, 2
  005bd	83 bc 04 88 00
	00 00 00	 cmp	 DWORD PTR temptab1$[rsp+rax], 0
  005c5	75 2e		 jne	 SHORT $LN34@hfl2bfl
  005c7	b8 04 00 00 00	 mov	 eax, 4
  005cc	48 6b c0 03	 imul	 rax, rax, 3
  005d0	83 bc 04 88 00
	00 00 00	 cmp	 DWORD PTR temptab1$[rsp+rax], 0
  005d8	75 1b		 jne	 SHORT $LN34@hfl2bfl
  005da	b8 04 00 00 00	 mov	 eax, 4
  005df	48 6b c0 04	 imul	 rax, rax, 4
  005e3	83 bc 04 88 00
	00 00 00	 cmp	 DWORD PTR temptab1$[rsp+rax], 0
  005eb	75 08		 jne	 SHORT $LN34@hfl2bfl

; 1976 :       mid = 1;

  005ed	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR mid$[rsp], 1
$LN34@hfl2bfl:

; 1977 :     if (mid == 0 || rem != 0)

  005f5	83 7c 24 50 00	 cmp	 DWORD PTR mid$[rsp], 0
  005fa	74 07		 je	 SHORT $LN36@hfl2bfl
  005fc	83 7c 24 58 00	 cmp	 DWORD PTR rem$[rsp], 0
  00601	74 18		 je	 SHORT $LN35@hfl2bfl
$LN36@hfl2bfl:

; 1978 :       *fpc |= FPC_FLAG_SFX;

  00603	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  0060b	8b 00		 mov	 eax, DWORD PTR [rax]
  0060d	0f ba e8 13	 bts	 eax, 19
  00611	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  00619	89 01		 mov	 DWORD PTR [rcx], eax
$LN35@hfl2bfl:

; 1979 :     roundarray(tabout, 1, roundrule, rem, 2, neg, 1, mid);

  0061b	8b 44 24 50	 mov	 eax, DWORD PTR mid$[rsp]
  0061f	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00623	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR [rsp+48], 1
  0062b	8b 44 24 60	 mov	 eax, DWORD PTR neg$[rsp]
  0062f	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00633	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0063b	44 8b 4c 24 58	 mov	 r9d, DWORD PTR rem$[rsp]
  00640	44 8b 44 24 5c	 mov	 r8d, DWORD PTR roundrule$[rsp]
  00645	ba 01 00 00 00	 mov	 edx, 1
  0064a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  00652	e8 00 00 00 00	 call	 roundarray

; 1980 :     tabout[0] &= 0x007fffff;

  00657	b8 04 00 00 00	 mov	 eax, 4
  0065c	48 6b c0 00	 imul	 rax, rax, 0
  00660	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  00668	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0066b	25 ff ff 7f 00	 and	 eax, 8388607		; 007fffffH
  00670	b9 04 00 00 00	 mov	 ecx, 4
  00675	48 6b c9 00	 imul	 rcx, rcx, 0
  00679	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR tabout$[rsp]
  00681	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1981 :     break;

  00684	e9 35 02 00 00	 jmp	 $LN19@hfl2bfl
$LN37@hfl2bfl:

; 1982 :   case 2:
; 1983 :     bexp += 1023;

  00689	8b 44 24 48	 mov	 eax, DWORD PTR bexp$[rsp]
  0068d	05 ff 03 00 00	 add	 eax, 1023		; 000003ffH
  00692	89 44 24 48	 mov	 DWORD PTR bexp$[rsp], eax

; 1984 :     bexp <<= 20;

  00696	8b 44 24 48	 mov	 eax, DWORD PTR bexp$[rsp]
  0069a	c1 e0 14	 shl	 eax, 20
  0069d	89 44 24 48	 mov	 DWORD PTR bexp$[rsp], eax

; 1985 :     rem = temptab1[2] >> 31;

  006a1	b8 04 00 00 00	 mov	 eax, 4
  006a6	48 6b c0 02	 imul	 rax, rax, 2
  006aa	8b 84 04 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  006b1	c1 e8 1f	 shr	 eax, 31
  006b4	89 44 24 58	 mov	 DWORD PTR rem$[rsp], eax

; 1986 :     temptab1[2] &= 0x7fffffff;

  006b8	b8 04 00 00 00	 mov	 eax, 4
  006bd	48 6b c0 02	 imul	 rax, rax, 2
  006c1	8b 84 04 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  006c8	0f ba f0 1f	 btr	 eax, 31
  006cc	b9 04 00 00 00	 mov	 ecx, 4
  006d1	48 6b c9 02	 imul	 rcx, rcx, 2
  006d5	89 84 0c 88 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx], eax

; 1987 :     mid = 0;

  006dc	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR mid$[rsp], 0

; 1988 :     if (temptab1[2] == 0 && temptab1[3] == 0 &&

  006e4	b8 04 00 00 00	 mov	 eax, 4
  006e9	48 6b c0 02	 imul	 rax, rax, 2
  006ed	83 bc 04 88 00
	00 00 00	 cmp	 DWORD PTR temptab1$[rsp+rax], 0
  006f5	75 2e		 jne	 SHORT $LN38@hfl2bfl
  006f7	b8 04 00 00 00	 mov	 eax, 4
  006fc	48 6b c0 03	 imul	 rax, rax, 3
  00700	83 bc 04 88 00
	00 00 00	 cmp	 DWORD PTR temptab1$[rsp+rax], 0
  00708	75 1b		 jne	 SHORT $LN38@hfl2bfl
  0070a	b8 04 00 00 00	 mov	 eax, 4
  0070f	48 6b c0 04	 imul	 rax, rax, 4
  00713	83 bc 04 88 00
	00 00 00	 cmp	 DWORD PTR temptab1$[rsp+rax], 0
  0071b	75 08		 jne	 SHORT $LN38@hfl2bfl

; 1989 :       temptab1[4] == 0)
; 1990 :       mid = 1;

  0071d	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR mid$[rsp], 1
$LN38@hfl2bfl:

; 1991 :     if (mid == 0 || rem != 0)

  00725	83 7c 24 50 00	 cmp	 DWORD PTR mid$[rsp], 0
  0072a	74 07		 je	 SHORT $LN40@hfl2bfl
  0072c	83 7c 24 58 00	 cmp	 DWORD PTR rem$[rsp], 0
  00731	74 18		 je	 SHORT $LN39@hfl2bfl
$LN40@hfl2bfl:

; 1992 :       *fpc |= FPC_FLAG_SFX;

  00733	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  0073b	8b 00		 mov	 eax, DWORD PTR [rax]
  0073d	0f ba e8 13	 bts	 eax, 19
  00741	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  00749	89 01		 mov	 DWORD PTR [rcx], eax
$LN39@hfl2bfl:

; 1993 :     roundarray(tabout, 2, roundrule, rem, 2, neg, 1, mid);

  0074b	8b 44 24 50	 mov	 eax, DWORD PTR mid$[rsp]
  0074f	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00753	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR [rsp+48], 1
  0075b	8b 44 24 60	 mov	 eax, DWORD PTR neg$[rsp]
  0075f	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00763	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0076b	44 8b 4c 24 58	 mov	 r9d, DWORD PTR rem$[rsp]
  00770	44 8b 44 24 5c	 mov	 r8d, DWORD PTR roundrule$[rsp]
  00775	ba 02 00 00 00	 mov	 edx, 2
  0077a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  00782	e8 00 00 00 00	 call	 roundarray

; 1994 :     tabout[0] &= 0x000fffff;

  00787	b8 04 00 00 00	 mov	 eax, 4
  0078c	48 6b c0 00	 imul	 rax, rax, 0
  00790	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  00798	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0079b	25 ff ff 0f 00	 and	 eax, 1048575		; 000fffffH
  007a0	b9 04 00 00 00	 mov	 ecx, 4
  007a5	48 6b c9 00	 imul	 rcx, rcx, 0
  007a9	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR tabout$[rsp]
  007b1	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1995 :     break;

  007b4	e9 05 01 00 00	 jmp	 $LN19@hfl2bfl
$LN41@hfl2bfl:

; 1996 :   case 4:
; 1997 :     rem = temptab1[4] >> 31;

  007b9	b8 04 00 00 00	 mov	 eax, 4
  007be	48 6b c0 04	 imul	 rax, rax, 4
  007c2	8b 84 04 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  007c9	c1 e8 1f	 shr	 eax, 31
  007cc	89 44 24 58	 mov	 DWORD PTR rem$[rsp], eax

; 1998 :     temptab1[4] &= 0x7fffffff;

  007d0	b8 04 00 00 00	 mov	 eax, 4
  007d5	48 6b c0 04	 imul	 rax, rax, 4
  007d9	8b 84 04 88 00
	00 00		 mov	 eax, DWORD PTR temptab1$[rsp+rax]
  007e0	0f ba f0 1f	 btr	 eax, 31
  007e4	b9 04 00 00 00	 mov	 ecx, 4
  007e9	48 6b c9 04	 imul	 rcx, rcx, 4
  007ed	89 84 0c 88 00
	00 00		 mov	 DWORD PTR temptab1$[rsp+rcx], eax

; 1999 :     mid = 0;

  007f4	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR mid$[rsp], 0

; 2000 :     if (temptab1[4] == 0)

  007fc	b8 04 00 00 00	 mov	 eax, 4
  00801	48 6b c0 04	 imul	 rax, rax, 4
  00805	83 bc 04 88 00
	00 00 00	 cmp	 DWORD PTR temptab1$[rsp+rax], 0
  0080d	75 08		 jne	 SHORT $LN42@hfl2bfl

; 2001 :       mid = 1;

  0080f	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR mid$[rsp], 1
$LN42@hfl2bfl:

; 2002 :     if (mid == 0 || rem != 0)

  00817	83 7c 24 50 00	 cmp	 DWORD PTR mid$[rsp], 0
  0081c	74 07		 je	 SHORT $LN44@hfl2bfl
  0081e	83 7c 24 58 00	 cmp	 DWORD PTR rem$[rsp], 0
  00823	74 18		 je	 SHORT $LN43@hfl2bfl
$LN44@hfl2bfl:

; 2003 :       *fpc |= FPC_FLAG_SFX;

  00825	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  0082d	8b 00		 mov	 eax, DWORD PTR [rax]
  0082f	0f ba e8 13	 bts	 eax, 19
  00833	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  0083b	89 01		 mov	 DWORD PTR [rcx], eax
$LN43@hfl2bfl:

; 2004 :     roundarray(tabout, 4, roundrule, rem, 2, neg, 1, mid);

  0083d	8b 44 24 50	 mov	 eax, DWORD PTR mid$[rsp]
  00841	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00845	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR [rsp+48], 1
  0084d	8b 44 24 60	 mov	 eax, DWORD PTR neg$[rsp]
  00851	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00855	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0085d	44 8b 4c 24 58	 mov	 r9d, DWORD PTR rem$[rsp]
  00862	44 8b 44 24 5c	 mov	 r8d, DWORD PTR roundrule$[rsp]
  00867	ba 04 00 00 00	 mov	 edx, 4
  0086c	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  00874	e8 00 00 00 00	 call	 roundarray

; 2005 :     bexp += 16383;

  00879	8b 44 24 48	 mov	 eax, DWORD PTR bexp$[rsp]
  0087d	05 ff 3f 00 00	 add	 eax, 16383		; 00003fffH
  00882	89 44 24 48	 mov	 DWORD PTR bexp$[rsp], eax

; 2006 :     bexp <<= 16;

  00886	8b 44 24 48	 mov	 eax, DWORD PTR bexp$[rsp]
  0088a	c1 e0 10	 shl	 eax, 16
  0088d	89 44 24 48	 mov	 DWORD PTR bexp$[rsp], eax

; 2007 :     tabout[0] &= 0x0000ffff;

  00891	b8 04 00 00 00	 mov	 eax, 4
  00896	48 6b c0 00	 imul	 rax, rax, 0
  0089a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  008a2	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  008a5	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  008aa	b9 04 00 00 00	 mov	 ecx, 4
  008af	48 6b c9 00	 imul	 rcx, rcx, 0
  008b3	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR tabout$[rsp]
  008bb	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax
$LN19@hfl2bfl:

; 2008 :     break;
; 2009 :   }
; 2010 : /***************************************************************/
; 2011 : /* merge it back in                                            */
; 2012 : /***************************************************************/
; 2013 :   tabout[0] += bexp;

  008be	b8 04 00 00 00	 mov	 eax, 4
  008c3	48 6b c0 00	 imul	 rax, rax, 0
  008c7	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  008cf	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  008d2	03 44 24 48	 add	 eax, DWORD PTR bexp$[rsp]
  008d6	b9 04 00 00 00	 mov	 ecx, 4
  008db	48 6b c9 00	 imul	 rcx, rcx, 0
  008df	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR tabout$[rsp]
  008e7	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 2014 :   if (neg)

  008ea	83 7c 24 60 00	 cmp	 DWORD PTR neg$[rsp], 0
  008ef	74 2c		 je	 SHORT $LN45@hfl2bfl

; 2015 :     tabout[0] |= 0x80000000;

  008f1	b8 04 00 00 00	 mov	 eax, 4
  008f6	48 6b c0 00	 imul	 rax, rax, 0
  008fa	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tabout$[rsp]
  00902	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00905	0f ba e8 1f	 bts	 eax, 31
  00909	b9 04 00 00 00	 mov	 ecx, 4
  0090e	48 6b c9 00	 imul	 rcx, rcx, 0
  00912	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR tabout$[rsp]
  0091a	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax
$LN45@hfl2bfl:

; 2016 :   return cc;

  0091d	8b 44 24 7c	 mov	 eax, DWORD PTR cc$[rsp]
$LN1@hfl2bfl:

; 2017 : }

  00921	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00929	48 33 cc	 xor	 rcx, rsp
  0092c	e8 00 00 00 00	 call	 __security_check_cookie
  00931	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00938	5f		 pop	 rdi
  00939	5e		 pop	 rsi
  0093a	c3		 ret	 0
hfl2bfl	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\pfpo.c
_TEXT	SEGMENT
i$ = 32
decctr$ = 36
delta$ = 40
dexp$ = 44
exp$ = 48
hdigit$ = 52
cbits$ = 56
maxbits$ = 60
wk1$ = 64
temp1$ = 68
bexp$ = 72
neg$ = 76
rem$ = 80
ndpdctr$ = 84
k$ = 88
shiftamt$ = 92
pidx$ = 96
nan$ = 100
hexp$ = 104
lzero$ = 108
maxdigits$ = 112
temp2$ = 116
lmd$ = 120
tv729 = 124
tv908 = 128
lzerohex$ = 132
power10$ = 136
ndpd$ = 140
exp1$ = 144
expword$ = 148
tv1321 = 152
maxexp$ = 156
tv1005 = 160
tv1007 = 164
tv1019 = 168
tv1027 = 172
tv1049 = 176
tv1051 = 180
rview$ = 184
rbe$ = 188
cc$ = 192
$T1 = 200
$T2 = 208
$T3 = 216
$T4 = 224
$T5 = 232
tv707 = 240
tv736 = 248
tv761 = 256
tv802 = 264
tv904 = 272
tv1284 = 280
tv1288 = 288
temptab$ = 296
hfl$ = 312
dec$ = 344
hexdigittab$ = 376
power10tab$ = 400
bittab1$ = 432
wrk$ = 1456
remtab$ = 1488
decwork$ = 1520
binzero$ = 7744
__$ArrayPad$ = 13968
hfltab$ = 14016
dfltab$ = 14024
hflwords$ = 14032
dflwords$ = 14040
optbits$ = 14048
binflg$ = 14056
fpc$ = 14064
hflbfl2dfl PROC

; 1375 : {

$LN130:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	b8 a8 36 00 00	 mov	 eax, 13992		; 000036a8H
  0001b	e8 00 00 00 00	 call	 __chkstk
  00020	48 2b e0	 sub	 rsp, rax
  00023	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002a	48 33 c4	 xor	 rax, rsp
  0002d	48 89 84 24 90
	36 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1376 :   int exp;
; 1377 :   int dexp = 0;

  00035	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR dexp$[rsp], 0

; 1378 :   unsigned int exp1;
; 1379 :   unsigned int hfl[ARRAYMAX];
; 1380 :   unsigned int dec[ARRAYMAX];
; 1381 :   unsigned int wrk[ARRAYMAX];
; 1382 :   unsigned int remtab[ARRAYMAX];
; 1383 :   BYTE decwork[6210];
; 1384 :   BYTE binzero[6210];
; 1385 :   int i;
; 1386 :   int k;
; 1387 :   int cc = 0;

  0003d	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR cc$[rsp], 0

; 1388 :   int decctr;
; 1389 :   int neg = 0;

  00048	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR neg$[rsp], 0

; 1390 :   unsigned int wk1;
; 1391 :   unsigned int rem;
; 1392 :   int ndpdctr;
; 1393 :   int ndpd;
; 1394 :   unsigned int rbe;
; 1395 :   int lzero;
; 1396 :   int lzerohex;
; 1397 :   int bexp = 0;

  00050	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR bexp$[rsp], 0

; 1398 :   int delta;
; 1399 :   int hexp = 0;

  00058	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR hexp$[rsp], 0

; 1400 :   int shiftamt;
; 1401 :   unsigned int maxexp;
; 1402 :   int maxdigits;
; 1403 :   int nan = 0;

  00060	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR nan$[rsp], 0

; 1404 :   //  the following table is used to reverse the bits in a nibble.  This is needed
; 1405 :   //  for nan processing
; 1406 :   unsigned int bittab1[256] = {

  00068	c7 84 24 b0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR bittab1$[rsp], 0
  00073	c7 84 24 b4 01
	00 00 80 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+4], 128 ; 00000080H
  0007e	c7 84 24 b8 01
	00 00 40 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+8], 64 ; 00000040H
  00089	c7 84 24 bc 01
	00 00 c0 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+12], 192 ; 000000c0H
  00094	c7 84 24 c0 01
	00 00 20 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+16], 32 ; 00000020H
  0009f	c7 84 24 c4 01
	00 00 a0 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+20], 160 ; 000000a0H
  000aa	c7 84 24 c8 01
	00 00 60 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+24], 96 ; 00000060H
  000b5	c7 84 24 cc 01
	00 00 e0 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+28], 224 ; 000000e0H
  000c0	c7 84 24 d0 01
	00 00 10 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+32], 16
  000cb	c7 84 24 d4 01
	00 00 90 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+36], 144 ; 00000090H
  000d6	c7 84 24 d8 01
	00 00 50 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+40], 80 ; 00000050H
  000e1	c7 84 24 dc 01
	00 00 d0 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+44], 208 ; 000000d0H
  000ec	c7 84 24 e0 01
	00 00 30 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+48], 48 ; 00000030H
  000f7	c7 84 24 e4 01
	00 00 b0 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+52], 176 ; 000000b0H
  00102	c7 84 24 e8 01
	00 00 70 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+56], 112 ; 00000070H
  0010d	c7 84 24 ec 01
	00 00 f0 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+60], 240 ; 000000f0H
  00118	c7 84 24 f0 01
	00 00 08 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+64], 8
  00123	c7 84 24 f4 01
	00 00 88 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+68], 136 ; 00000088H
  0012e	c7 84 24 f8 01
	00 00 48 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+72], 72 ; 00000048H
  00139	c7 84 24 fc 01
	00 00 c8 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+76], 200 ; 000000c8H
  00144	c7 84 24 00 02
	00 00 28 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+80], 40 ; 00000028H
  0014f	c7 84 24 04 02
	00 00 a8 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+84], 168 ; 000000a8H
  0015a	c7 84 24 08 02
	00 00 68 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+88], 104 ; 00000068H
  00165	c7 84 24 0c 02
	00 00 e8 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+92], 232 ; 000000e8H
  00170	c7 84 24 10 02
	00 00 18 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+96], 24
  0017b	c7 84 24 14 02
	00 00 98 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+100], 152 ; 00000098H
  00186	c7 84 24 18 02
	00 00 58 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+104], 88 ; 00000058H
  00191	c7 84 24 1c 02
	00 00 d8 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+108], 216 ; 000000d8H
  0019c	c7 84 24 20 02
	00 00 38 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+112], 56 ; 00000038H
  001a7	c7 84 24 24 02
	00 00 b8 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+116], 184 ; 000000b8H
  001b2	c7 84 24 28 02
	00 00 78 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+120], 120 ; 00000078H
  001bd	c7 84 24 2c 02
	00 00 f8 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+124], 248 ; 000000f8H
  001c8	c7 84 24 30 02
	00 00 04 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+128], 4
  001d3	c7 84 24 34 02
	00 00 84 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+132], 132 ; 00000084H
  001de	c7 84 24 38 02
	00 00 44 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+136], 68 ; 00000044H
  001e9	c7 84 24 3c 02
	00 00 c4 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+140], 196 ; 000000c4H
  001f4	c7 84 24 40 02
	00 00 24 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+144], 36 ; 00000024H
  001ff	c7 84 24 44 02
	00 00 a4 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+148], 164 ; 000000a4H
  0020a	c7 84 24 48 02
	00 00 64 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+152], 100 ; 00000064H
  00215	c7 84 24 4c 02
	00 00 e4 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+156], 228 ; 000000e4H
  00220	c7 84 24 50 02
	00 00 14 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+160], 20
  0022b	c7 84 24 54 02
	00 00 94 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+164], 148 ; 00000094H
  00236	c7 84 24 58 02
	00 00 54 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+168], 84 ; 00000054H
  00241	c7 84 24 5c 02
	00 00 d4 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+172], 212 ; 000000d4H
  0024c	c7 84 24 60 02
	00 00 34 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+176], 52 ; 00000034H
  00257	c7 84 24 64 02
	00 00 b4 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+180], 180 ; 000000b4H
  00262	c7 84 24 68 02
	00 00 74 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+184], 116 ; 00000074H
  0026d	c7 84 24 6c 02
	00 00 f4 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+188], 244 ; 000000f4H
  00278	c7 84 24 70 02
	00 00 0c 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+192], 12
  00283	c7 84 24 74 02
	00 00 8c 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+196], 140 ; 0000008cH
  0028e	c7 84 24 78 02
	00 00 4c 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+200], 76 ; 0000004cH
  00299	c7 84 24 7c 02
	00 00 cc 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+204], 204 ; 000000ccH
  002a4	c7 84 24 80 02
	00 00 2c 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+208], 44 ; 0000002cH
  002af	c7 84 24 84 02
	00 00 ac 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+212], 172 ; 000000acH
  002ba	c7 84 24 88 02
	00 00 6c 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+216], 108 ; 0000006cH
  002c5	c7 84 24 8c 02
	00 00 ec 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+220], 236 ; 000000ecH
  002d0	c7 84 24 90 02
	00 00 1c 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+224], 28
  002db	c7 84 24 94 02
	00 00 9c 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+228], 156 ; 0000009cH
  002e6	c7 84 24 98 02
	00 00 5c 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+232], 92 ; 0000005cH
  002f1	c7 84 24 9c 02
	00 00 dc 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+236], 220 ; 000000dcH
  002fc	c7 84 24 a0 02
	00 00 3c 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+240], 60 ; 0000003cH
  00307	c7 84 24 a4 02
	00 00 bc 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+244], 188 ; 000000bcH
  00312	c7 84 24 a8 02
	00 00 7c 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+248], 124 ; 0000007cH
  0031d	c7 84 24 ac 02
	00 00 fc 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+252], 252 ; 000000fcH
  00328	c7 84 24 b0 02
	00 00 02 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+256], 2
  00333	c7 84 24 b4 02
	00 00 82 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+260], 130 ; 00000082H
  0033e	c7 84 24 b8 02
	00 00 42 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+264], 66 ; 00000042H
  00349	c7 84 24 bc 02
	00 00 c2 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+268], 194 ; 000000c2H
  00354	c7 84 24 c0 02
	00 00 22 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+272], 34 ; 00000022H
  0035f	c7 84 24 c4 02
	00 00 a2 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+276], 162 ; 000000a2H
  0036a	c7 84 24 c8 02
	00 00 62 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+280], 98 ; 00000062H
  00375	c7 84 24 cc 02
	00 00 e2 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+284], 226 ; 000000e2H
  00380	c7 84 24 d0 02
	00 00 12 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+288], 18
  0038b	c7 84 24 d4 02
	00 00 92 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+292], 146 ; 00000092H
  00396	c7 84 24 d8 02
	00 00 52 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+296], 82 ; 00000052H
  003a1	c7 84 24 dc 02
	00 00 d2 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+300], 210 ; 000000d2H
  003ac	c7 84 24 e0 02
	00 00 32 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+304], 50 ; 00000032H
  003b7	c7 84 24 e4 02
	00 00 b2 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+308], 178 ; 000000b2H
  003c2	c7 84 24 e8 02
	00 00 72 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+312], 114 ; 00000072H
  003cd	c7 84 24 ec 02
	00 00 f2 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+316], 242 ; 000000f2H
  003d8	c7 84 24 f0 02
	00 00 0a 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+320], 10
  003e3	c7 84 24 f4 02
	00 00 8a 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+324], 138 ; 0000008aH
  003ee	c7 84 24 f8 02
	00 00 4a 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+328], 74 ; 0000004aH
  003f9	c7 84 24 fc 02
	00 00 ca 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+332], 202 ; 000000caH
  00404	c7 84 24 00 03
	00 00 2a 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+336], 42 ; 0000002aH
  0040f	c7 84 24 04 03
	00 00 aa 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+340], 170 ; 000000aaH
  0041a	c7 84 24 08 03
	00 00 6a 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+344], 106 ; 0000006aH
  00425	c7 84 24 0c 03
	00 00 ea 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+348], 234 ; 000000eaH
  00430	c7 84 24 10 03
	00 00 1a 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+352], 26
  0043b	c7 84 24 14 03
	00 00 9a 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+356], 154 ; 0000009aH
  00446	c7 84 24 18 03
	00 00 5a 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+360], 90 ; 0000005aH
  00451	c7 84 24 1c 03
	00 00 da 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+364], 218 ; 000000daH
  0045c	c7 84 24 20 03
	00 00 3a 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+368], 58 ; 0000003aH
  00467	c7 84 24 24 03
	00 00 ba 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+372], 186 ; 000000baH
  00472	c7 84 24 28 03
	00 00 7a 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+376], 122 ; 0000007aH
  0047d	c7 84 24 2c 03
	00 00 fa 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+380], 250 ; 000000faH
  00488	c7 84 24 30 03
	00 00 06 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+384], 6
  00493	c7 84 24 34 03
	00 00 86 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+388], 134 ; 00000086H
  0049e	c7 84 24 38 03
	00 00 46 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+392], 70 ; 00000046H
  004a9	c7 84 24 3c 03
	00 00 c6 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+396], 198 ; 000000c6H
  004b4	c7 84 24 40 03
	00 00 26 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+400], 38 ; 00000026H
  004bf	c7 84 24 44 03
	00 00 a6 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+404], 166 ; 000000a6H
  004ca	c7 84 24 48 03
	00 00 66 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+408], 102 ; 00000066H
  004d5	c7 84 24 4c 03
	00 00 e6 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+412], 230 ; 000000e6H
  004e0	c7 84 24 50 03
	00 00 16 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+416], 22
  004eb	c7 84 24 54 03
	00 00 96 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+420], 150 ; 00000096H
  004f6	c7 84 24 58 03
	00 00 56 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+424], 86 ; 00000056H
  00501	c7 84 24 5c 03
	00 00 d6 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+428], 214 ; 000000d6H
  0050c	c7 84 24 60 03
	00 00 36 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+432], 54 ; 00000036H
  00517	c7 84 24 64 03
	00 00 b6 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+436], 182 ; 000000b6H
  00522	c7 84 24 68 03
	00 00 76 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+440], 118 ; 00000076H
  0052d	c7 84 24 6c 03
	00 00 f6 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+444], 246 ; 000000f6H
  00538	c7 84 24 70 03
	00 00 0e 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+448], 14
  00543	c7 84 24 74 03
	00 00 8e 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+452], 142 ; 0000008eH
  0054e	c7 84 24 78 03
	00 00 4e 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+456], 78 ; 0000004eH
  00559	c7 84 24 7c 03
	00 00 ce 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+460], 206 ; 000000ceH
  00564	c7 84 24 80 03
	00 00 2e 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+464], 46 ; 0000002eH
  0056f	c7 84 24 84 03
	00 00 ae 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+468], 174 ; 000000aeH
  0057a	c7 84 24 88 03
	00 00 6e 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+472], 110 ; 0000006eH
  00585	c7 84 24 8c 03
	00 00 ee 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+476], 238 ; 000000eeH
  00590	c7 84 24 90 03
	00 00 1e 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+480], 30
  0059b	c7 84 24 94 03
	00 00 9e 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+484], 158 ; 0000009eH
  005a6	c7 84 24 98 03
	00 00 5e 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+488], 94 ; 0000005eH
  005b1	c7 84 24 9c 03
	00 00 de 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+492], 222 ; 000000deH
  005bc	c7 84 24 a0 03
	00 00 3e 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+496], 62 ; 0000003eH
  005c7	c7 84 24 a4 03
	00 00 be 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+500], 190 ; 000000beH
  005d2	c7 84 24 a8 03
	00 00 7e 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+504], 126 ; 0000007eH
  005dd	c7 84 24 ac 03
	00 00 fe 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+508], 254 ; 000000feH
  005e8	c7 84 24 b0 03
	00 00 01 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+512], 1
  005f3	c7 84 24 b4 03
	00 00 81 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+516], 129 ; 00000081H
  005fe	c7 84 24 b8 03
	00 00 41 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+520], 65 ; 00000041H
  00609	c7 84 24 bc 03
	00 00 c1 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+524], 193 ; 000000c1H
  00614	c7 84 24 c0 03
	00 00 21 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+528], 33 ; 00000021H
  0061f	c7 84 24 c4 03
	00 00 a1 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+532], 161 ; 000000a1H
  0062a	c7 84 24 c8 03
	00 00 61 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+536], 97 ; 00000061H
  00635	c7 84 24 cc 03
	00 00 e1 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+540], 225 ; 000000e1H
  00640	c7 84 24 d0 03
	00 00 11 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+544], 17
  0064b	c7 84 24 d4 03
	00 00 91 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+548], 145 ; 00000091H
  00656	c7 84 24 d8 03
	00 00 51 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+552], 81 ; 00000051H
  00661	c7 84 24 dc 03
	00 00 d1 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+556], 209 ; 000000d1H
  0066c	c7 84 24 e0 03
	00 00 31 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+560], 49 ; 00000031H
  00677	c7 84 24 e4 03
	00 00 b1 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+564], 177 ; 000000b1H
  00682	c7 84 24 e8 03
	00 00 71 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+568], 113 ; 00000071H
  0068d	c7 84 24 ec 03
	00 00 f1 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+572], 241 ; 000000f1H
  00698	c7 84 24 f0 03
	00 00 09 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+576], 9
  006a3	c7 84 24 f4 03
	00 00 89 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+580], 137 ; 00000089H
  006ae	c7 84 24 f8 03
	00 00 49 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+584], 73 ; 00000049H
  006b9	c7 84 24 fc 03
	00 00 c9 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+588], 201 ; 000000c9H
  006c4	c7 84 24 00 04
	00 00 29 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+592], 41 ; 00000029H
  006cf	c7 84 24 04 04
	00 00 a9 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+596], 169 ; 000000a9H
  006da	c7 84 24 08 04
	00 00 69 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+600], 105 ; 00000069H
  006e5	c7 84 24 0c 04
	00 00 e9 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+604], 233 ; 000000e9H
  006f0	c7 84 24 10 04
	00 00 19 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+608], 25
  006fb	c7 84 24 14 04
	00 00 99 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+612], 153 ; 00000099H
  00706	c7 84 24 18 04
	00 00 59 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+616], 89 ; 00000059H
  00711	c7 84 24 1c 04
	00 00 d9 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+620], 217 ; 000000d9H
  0071c	c7 84 24 20 04
	00 00 39 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+624], 57 ; 00000039H
  00727	c7 84 24 24 04
	00 00 b9 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+628], 185 ; 000000b9H
  00732	c7 84 24 28 04
	00 00 79 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+632], 121 ; 00000079H
  0073d	c7 84 24 2c 04
	00 00 f9 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+636], 249 ; 000000f9H
  00748	c7 84 24 30 04
	00 00 05 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+640], 5
  00753	c7 84 24 34 04
	00 00 85 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+644], 133 ; 00000085H
  0075e	c7 84 24 38 04
	00 00 45 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+648], 69 ; 00000045H
  00769	c7 84 24 3c 04
	00 00 c5 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+652], 197 ; 000000c5H
  00774	c7 84 24 40 04
	00 00 25 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+656], 37 ; 00000025H
  0077f	c7 84 24 44 04
	00 00 a5 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+660], 165 ; 000000a5H
  0078a	c7 84 24 48 04
	00 00 65 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+664], 101 ; 00000065H
  00795	c7 84 24 4c 04
	00 00 e5 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+668], 229 ; 000000e5H
  007a0	c7 84 24 50 04
	00 00 15 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+672], 21
  007ab	c7 84 24 54 04
	00 00 95 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+676], 149 ; 00000095H
  007b6	c7 84 24 58 04
	00 00 55 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+680], 85 ; 00000055H
  007c1	c7 84 24 5c 04
	00 00 d5 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+684], 213 ; 000000d5H
  007cc	c7 84 24 60 04
	00 00 35 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+688], 53 ; 00000035H
  007d7	c7 84 24 64 04
	00 00 b5 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+692], 181 ; 000000b5H
  007e2	c7 84 24 68 04
	00 00 75 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+696], 117 ; 00000075H
  007ed	c7 84 24 6c 04
	00 00 f5 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+700], 245 ; 000000f5H
  007f8	c7 84 24 70 04
	00 00 0d 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+704], 13
  00803	c7 84 24 74 04
	00 00 8d 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+708], 141 ; 0000008dH
  0080e	c7 84 24 78 04
	00 00 4d 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+712], 77 ; 0000004dH
  00819	c7 84 24 7c 04
	00 00 cd 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+716], 205 ; 000000cdH
  00824	c7 84 24 80 04
	00 00 2d 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+720], 45 ; 0000002dH
  0082f	c7 84 24 84 04
	00 00 ad 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+724], 173 ; 000000adH
  0083a	c7 84 24 88 04
	00 00 6d 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+728], 109 ; 0000006dH
  00845	c7 84 24 8c 04
	00 00 ed 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+732], 237 ; 000000edH
  00850	c7 84 24 90 04
	00 00 1d 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+736], 29
  0085b	c7 84 24 94 04
	00 00 9d 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+740], 157 ; 0000009dH
  00866	c7 84 24 98 04
	00 00 5d 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+744], 93 ; 0000005dH
  00871	c7 84 24 9c 04
	00 00 dd 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+748], 221 ; 000000ddH
  0087c	c7 84 24 a0 04
	00 00 3d 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+752], 61 ; 0000003dH
  00887	c7 84 24 a4 04
	00 00 bd 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+756], 189 ; 000000bdH
  00892	c7 84 24 a8 04
	00 00 7d 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+760], 125 ; 0000007dH
  0089d	c7 84 24 ac 04
	00 00 fd 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+764], 253 ; 000000fdH
  008a8	c7 84 24 b0 04
	00 00 03 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+768], 3
  008b3	c7 84 24 b4 04
	00 00 83 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+772], 131 ; 00000083H
  008be	c7 84 24 b8 04
	00 00 43 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+776], 67 ; 00000043H
  008c9	c7 84 24 bc 04
	00 00 c3 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+780], 195 ; 000000c3H
  008d4	c7 84 24 c0 04
	00 00 23 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+784], 35 ; 00000023H
  008df	c7 84 24 c4 04
	00 00 a3 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+788], 163 ; 000000a3H
  008ea	c7 84 24 c8 04
	00 00 63 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+792], 99 ; 00000063H
  008f5	c7 84 24 cc 04
	00 00 e3 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+796], 227 ; 000000e3H
  00900	c7 84 24 d0 04
	00 00 13 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+800], 19
  0090b	c7 84 24 d4 04
	00 00 93 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+804], 147 ; 00000093H
  00916	c7 84 24 d8 04
	00 00 53 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+808], 83 ; 00000053H
  00921	c7 84 24 dc 04
	00 00 d3 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+812], 211 ; 000000d3H
  0092c	c7 84 24 e0 04
	00 00 33 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+816], 51 ; 00000033H
  00937	c7 84 24 e4 04
	00 00 b3 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+820], 179 ; 000000b3H
  00942	c7 84 24 e8 04
	00 00 73 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+824], 115 ; 00000073H
  0094d	c7 84 24 ec 04
	00 00 f3 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+828], 243 ; 000000f3H
  00958	c7 84 24 f0 04
	00 00 0b 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+832], 11
  00963	c7 84 24 f4 04
	00 00 8b 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+836], 139 ; 0000008bH
  0096e	c7 84 24 f8 04
	00 00 4b 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+840], 75 ; 0000004bH
  00979	c7 84 24 fc 04
	00 00 cb 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+844], 203 ; 000000cbH
  00984	c7 84 24 00 05
	00 00 2b 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+848], 43 ; 0000002bH
  0098f	c7 84 24 04 05
	00 00 ab 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+852], 171 ; 000000abH
  0099a	c7 84 24 08 05
	00 00 6b 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+856], 107 ; 0000006bH
  009a5	c7 84 24 0c 05
	00 00 eb 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+860], 235 ; 000000ebH
  009b0	c7 84 24 10 05
	00 00 1b 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+864], 27
  009bb	c7 84 24 14 05
	00 00 9b 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+868], 155 ; 0000009bH
  009c6	c7 84 24 18 05
	00 00 5b 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+872], 91 ; 0000005bH
  009d1	c7 84 24 1c 05
	00 00 db 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+876], 219 ; 000000dbH
  009dc	c7 84 24 20 05
	00 00 3b 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+880], 59 ; 0000003bH
  009e7	c7 84 24 24 05
	00 00 bb 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+884], 187 ; 000000bbH
  009f2	c7 84 24 28 05
	00 00 7b 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+888], 123 ; 0000007bH
  009fd	c7 84 24 2c 05
	00 00 fb 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+892], 251 ; 000000fbH
  00a08	c7 84 24 30 05
	00 00 07 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+896], 7
  00a13	c7 84 24 34 05
	00 00 87 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+900], 135 ; 00000087H
  00a1e	c7 84 24 38 05
	00 00 47 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+904], 71 ; 00000047H
  00a29	c7 84 24 3c 05
	00 00 c7 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+908], 199 ; 000000c7H
  00a34	c7 84 24 40 05
	00 00 27 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+912], 39 ; 00000027H
  00a3f	c7 84 24 44 05
	00 00 a7 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+916], 167 ; 000000a7H
  00a4a	c7 84 24 48 05
	00 00 67 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+920], 103 ; 00000067H
  00a55	c7 84 24 4c 05
	00 00 e7 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+924], 231 ; 000000e7H
  00a60	c7 84 24 50 05
	00 00 17 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+928], 23
  00a6b	c7 84 24 54 05
	00 00 97 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+932], 151 ; 00000097H
  00a76	c7 84 24 58 05
	00 00 57 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+936], 87 ; 00000057H
  00a81	c7 84 24 5c 05
	00 00 d7 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+940], 215 ; 000000d7H
  00a8c	c7 84 24 60 05
	00 00 37 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+944], 55 ; 00000037H
  00a97	c7 84 24 64 05
	00 00 b7 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+948], 183 ; 000000b7H
  00aa2	c7 84 24 68 05
	00 00 77 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+952], 119 ; 00000077H
  00aad	c7 84 24 6c 05
	00 00 f7 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+956], 247 ; 000000f7H
  00ab8	c7 84 24 70 05
	00 00 0f 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+960], 15
  00ac3	c7 84 24 74 05
	00 00 8f 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+964], 143 ; 0000008fH
  00ace	c7 84 24 78 05
	00 00 4f 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+968], 79 ; 0000004fH
  00ad9	c7 84 24 7c 05
	00 00 cf 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+972], 207 ; 000000cfH
  00ae4	c7 84 24 80 05
	00 00 2f 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+976], 47 ; 0000002fH
  00aef	c7 84 24 84 05
	00 00 af 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+980], 175 ; 000000afH
  00afa	c7 84 24 88 05
	00 00 6f 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+984], 111 ; 0000006fH
  00b05	c7 84 24 8c 05
	00 00 ef 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+988], 239 ; 000000efH
  00b10	c7 84 24 90 05
	00 00 1f 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+992], 31
  00b1b	c7 84 24 94 05
	00 00 9f 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+996], 159 ; 0000009fH
  00b26	c7 84 24 98 05
	00 00 5f 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+1000], 95 ; 0000005fH
  00b31	c7 84 24 9c 05
	00 00 df 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+1004], 223 ; 000000dfH
  00b3c	c7 84 24 a0 05
	00 00 3f 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+1008], 63 ; 0000003fH
  00b47	c7 84 24 a4 05
	00 00 bf 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+1012], 191 ; 000000bfH
  00b52	c7 84 24 a8 05
	00 00 7f 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+1016], 127 ; 0000007fH
  00b5d	c7 84 24 ac 05
	00 00 ff 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+1020], 255 ; 000000ffH

; 1407 :     0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,
; 1408 :     0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8, 0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8,
; 1409 :     0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,
; 1410 :     0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc,
; 1411 :     0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2, 0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2,
; 1412 :     0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,
; 1413 :     0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6,
; 1414 :     0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee, 0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe,
; 1415 :     0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1, 0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,
; 1416 :     0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9, 0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9,
; 1417 :     0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5, 0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5,
; 1418 :     0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed, 0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,
; 1419 :     0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3, 0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,
; 1420 :     0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb, 0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,
; 1421 :     0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7, 0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,
; 1422 :     0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef, 0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff };
; 1423 :   int power10tab[8] = { 1,10,100,1000,10000,100000,1000000, 10000000};

  00b68	c7 84 24 90 01
	00 00 01 00 00
	00		 mov	 DWORD PTR power10tab$[rsp], 1
  00b73	c7 84 24 94 01
	00 00 0a 00 00
	00		 mov	 DWORD PTR power10tab$[rsp+4], 10
  00b7e	c7 84 24 98 01
	00 00 64 00 00
	00		 mov	 DWORD PTR power10tab$[rsp+8], 100 ; 00000064H
  00b89	c7 84 24 9c 01
	00 00 e8 03 00
	00		 mov	 DWORD PTR power10tab$[rsp+12], 1000 ; 000003e8H
  00b94	c7 84 24 a0 01
	00 00 10 27 00
	00		 mov	 DWORD PTR power10tab$[rsp+16], 10000 ; 00002710H
  00b9f	c7 84 24 a4 01
	00 00 a0 86 01
	00		 mov	 DWORD PTR power10tab$[rsp+20], 100000 ; 000186a0H
  00baa	c7 84 24 a8 01
	00 00 40 42 0f
	00		 mov	 DWORD PTR power10tab$[rsp+24], 1000000 ; 000f4240H
  00bb5	c7 84 24 ac 01
	00 00 80 96 98
	00		 mov	 DWORD PTR power10tab$[rsp+28], 10000000 ; 00989680H

; 1424 :   int hexdigittab[6] = { 0, 2, 3, 4, 5, 7 };

  00bc0	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR hexdigittab$[rsp], 0
  00bcb	c7 84 24 7c 01
	00 00 02 00 00
	00		 mov	 DWORD PTR hexdigittab$[rsp+4], 2
  00bd6	c7 84 24 80 01
	00 00 03 00 00
	00		 mov	 DWORD PTR hexdigittab$[rsp+8], 3
  00be1	c7 84 24 84 01
	00 00 04 00 00
	00		 mov	 DWORD PTR hexdigittab$[rsp+12], 4
  00bec	c7 84 24 88 01
	00 00 05 00 00
	00		 mov	 DWORD PTR hexdigittab$[rsp+16], 5
  00bf7	c7 84 24 8c 01
	00 00 07 00 00
	00		 mov	 DWORD PTR hexdigittab$[rsp+20], 7

; 1425 :   int power10;
; 1426 :   int pidx;
; 1427 :   int hdigit;
; 1428 :   int rview = 1;

  00c02	c7 84 24 b8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR rview$[rsp], 1

; 1429 :   unsigned int lmd;
; 1430 :   unsigned int temptab[4];
; 1431 :   int expword;
; 1432 :   int cbits;
; 1433 :   int maxbits = 0;

  00c0d	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR maxbits$[rsp], 0

; 1434 :   unsigned int temp1;
; 1435 :   unsigned int temp2;
; 1436 :   memset(binzero, 0x00, sizeof(binzero));

  00c15	48 8d 84 24 40
	1e 00 00	 lea	 rax, QWORD PTR binzero$[rsp]
  00c1d	48 8b f8	 mov	 rdi, rax
  00c20	33 c0		 xor	 eax, eax
  00c22	b9 42 18 00 00	 mov	 ecx, 6210		; 00001842H
  00c27	f3 aa		 rep stosb

; 1437 :   temp1 = (unsigned int) GR0_RM( optbits );

  00c29	0f b6 84 24 e0
	36 00 00	 movzx	 eax, BYTE PTR optbits$[rsp]
  00c31	83 e0 0f	 and	 eax, 15
  00c34	89 44 24 44	 mov	 DWORD PTR temp1$[rsp], eax

; 1438 :   if (hfltab[0] & 0x80000000)

  00c38	b8 04 00 00 00	 mov	 eax, 4
  00c3d	48 6b c0 00	 imul	 rax, rax, 0
  00c41	48 8b 8c 24 c0
	36 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  00c49	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00c4c	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00c51	85 c0		 test	 eax, eax
  00c53	74 34		 je	 SHORT $LN43@hflbfl2dfl

; 1439 :   {
; 1440 :     neg = 1;

  00c55	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR neg$[rsp], 1

; 1441 :     hfltab[0] &= 0x7fffffff;

  00c5d	b8 04 00 00 00	 mov	 eax, 4
  00c62	48 6b c0 00	 imul	 rax, rax, 0
  00c66	48 8b 8c 24 c0
	36 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  00c6e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00c71	0f ba f0 1f	 btr	 eax, 31
  00c75	b9 04 00 00 00	 mov	 ecx, 4
  00c7a	48 6b c9 00	 imul	 rcx, rcx, 0
  00c7e	48 8b 94 24 c0
	36 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  00c86	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax
$LN43@hflbfl2dfl:

; 1442 :   }
; 1443 :   /***************************************************************/
; 1444 :   /*   get the biased exponent value, then shift it out          */
; 1445 :   /***************************************************************/
; 1446 :   if (binflg)

  00c89	83 bc 24 e8 36
	00 00 00	 cmp	 DWORD PTR binflg$[rsp], 0
  00c91	0f 84 9a 06 00
	00		 je	 $LN44@hflbfl2dfl

; 1447 :   {
; 1448 :     cbits = bflexpbits[hflwords];

  00c97	48 63 84 24 d0
	36 00 00	 movsxd	 rax, DWORD PTR hflwords$[rsp]
  00c9f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bflexpbits
  00ca6	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00ca9	89 44 24 38	 mov	 DWORD PTR cbits$[rsp], eax

; 1449 :     bexp = hfltab[0] >> (32 - cbits);

  00cad	b8 04 00 00 00	 mov	 eax, 4
  00cb2	48 6b c0 00	 imul	 rax, rax, 0
  00cb6	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00cbb	2b 4c 24 38	 sub	 ecx, DWORD PTR cbits$[rsp]
  00cbf	48 8b 94 24 c0
	36 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  00cc7	8b 04 02	 mov	 eax, DWORD PTR [rdx+rax]
  00cca	d3 e8		 shr	 eax, cl
  00ccc	89 44 24 48	 mov	 DWORD PTR bexp$[rsp], eax

; 1450 :     maxexp = bflexpmax[hflwords];

  00cd0	48 63 84 24 d0
	36 00 00	 movsxd	 rax, DWORD PTR hflwords$[rsp]
  00cd8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bflexpmax
  00cdf	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00ce2	89 84 24 9c 00
	00 00		 mov	 DWORD PTR maxexp$[rsp], eax

; 1451 :     hfltab[0] = (hfltab[0] << cbits) >> cbits;

  00ce9	b8 04 00 00 00	 mov	 eax, 4
  00cee	48 6b c0 00	 imul	 rax, rax, 0
  00cf2	8b 4c 24 38	 mov	 ecx, DWORD PTR cbits$[rsp]
  00cf6	48 8b 94 24 c0
	36 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  00cfe	8b 04 02	 mov	 eax, DWORD PTR [rdx+rax]
  00d01	d3 e0		 shl	 eax, cl
  00d03	8b 4c 24 38	 mov	 ecx, DWORD PTR cbits$[rsp]
  00d07	d3 e8		 shr	 eax, cl
  00d09	b9 04 00 00 00	 mov	 ecx, 4
  00d0e	48 6b c9 00	 imul	 rcx, rcx, 0
  00d12	48 8b 94 24 c0
	36 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  00d1a	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1452 :     wk1 = bexp;

  00d1d	8b 44 24 48	 mov	 eax, DWORD PTR bexp$[rsp]
  00d21	89 44 24 40	 mov	 DWORD PTR wk1$[rsp], eax

; 1453 :     if (wk1 > 0 && wk1 < maxexp)

  00d25	83 7c 24 40 00	 cmp	 DWORD PTR wk1$[rsp], 0
  00d2a	76 49		 jbe	 SHORT $LN46@hflbfl2dfl
  00d2c	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR maxexp$[rsp]
  00d33	39 44 24 40	 cmp	 DWORD PTR wk1$[rsp], eax
  00d37	73 3c		 jae	 SHORT $LN46@hflbfl2dfl

; 1454 :       hfltab[0] += (1 << (32 - cbits));

  00d39	b8 04 00 00 00	 mov	 eax, 4
  00d3e	48 6b c0 00	 imul	 rax, rax, 0
  00d42	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00d47	2b 4c 24 38	 sub	 ecx, DWORD PTR cbits$[rsp]
  00d4b	ba 01 00 00 00	 mov	 edx, 1
  00d50	d3 e2		 shl	 edx, cl
  00d52	8b ca		 mov	 ecx, edx
  00d54	48 8b 94 24 c0
	36 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  00d5c	03 0c 02	 add	 ecx, DWORD PTR [rdx+rax]
  00d5f	8b c1		 mov	 eax, ecx
  00d61	b9 04 00 00 00	 mov	 ecx, 4
  00d66	48 6b c9 00	 imul	 rcx, rcx, 0
  00d6a	48 8b 94 24 c0
	36 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  00d72	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax
$LN46@hflbfl2dfl:

; 1455 :     bexp -= bflexpbias[hflwords];

  00d75	48 63 84 24 d0
	36 00 00	 movsxd	 rax, DWORD PTR hflwords$[rsp]
  00d7d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bflexpbias
  00d84	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00d87	8b 4c 24 48	 mov	 ecx, DWORD PTR bexp$[rsp]
  00d8b	2b c8		 sub	 ecx, eax
  00d8d	8b c1		 mov	 eax, ecx
  00d8f	89 44 24 48	 mov	 DWORD PTR bexp$[rsp], eax

; 1456 :     if (wk1 == maxexp)

  00d93	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR maxexp$[rsp]
  00d9a	39 44 24 40	 cmp	 DWORD PTR wk1$[rsp], eax
  00d9e	0f 85 8b 05 00
	00		 jne	 $LN47@hflbfl2dfl

; 1457 :     {
; 1458 :       memset(temptab, 0x00, sizeof(temptab));

  00da4	48 8d 84 24 28
	01 00 00	 lea	 rax, QWORD PTR temptab$[rsp]
  00dac	48 8b f8	 mov	 rdi, rax
  00daf	33 c0		 xor	 eax, eax
  00db1	b9 10 00 00 00	 mov	 ecx, 16
  00db6	f3 aa		 rep stosb

; 1459 :       memcpy(temptab, hfltab, hflwords * 4);

  00db8	8b 84 24 d0 36
	00 00		 mov	 eax, DWORD PTR hflwords$[rsp]
  00dbf	c1 e0 02	 shl	 eax, 2
  00dc2	48 98		 cdqe
  00dc4	48 8d 8c 24 28
	01 00 00	 lea	 rcx, QWORD PTR temptab$[rsp]
  00dcc	48 8b f9	 mov	 rdi, rcx
  00dcf	48 8b b4 24 c0
	36 00 00	 mov	 rsi, QWORD PTR hfltab$[rsp]
  00dd7	48 8b c8	 mov	 rcx, rax
  00dda	f3 a4		 rep movsb

; 1460 :       if (memcmp(temptab, binzero, 16) == 0)

  00ddc	41 b8 10 00 00
	00		 mov	 r8d, 16
  00de2	48 8d 94 24 40
	1e 00 00	 lea	 rdx, QWORD PTR binzero$[rsp]
  00dea	48 8d 8c 24 28
	01 00 00	 lea	 rcx, QWORD PTR temptab$[rsp]
  00df2	e8 00 00 00 00	 call	 memcmp
  00df7	85 c0		 test	 eax, eax
  00df9	0f 85 8f 00 00
	00		 jne	 $LN48@hflbfl2dfl

; 1461 :       {
; 1462 :         memset(dfltab, 0x00, dflwords * 4);

  00dff	8b 84 24 d8 36
	00 00		 mov	 eax, DWORD PTR dflwords$[rsp]
  00e06	c1 e0 02	 shl	 eax, 2
  00e09	48 98		 cdqe
  00e0b	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv707[rsp], rax
  00e13	48 8b bc 24 c8
	36 00 00	 mov	 rdi, QWORD PTR dfltab$[rsp]
  00e1b	33 c0		 xor	 eax, eax
  00e1d	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv707[rsp]
  00e25	f3 aa		 rep stosb

; 1463 :         dfltab[0] |= 0x78000000;

  00e27	b8 04 00 00 00	 mov	 eax, 4
  00e2c	48 6b c0 00	 imul	 rax, rax, 0
  00e30	48 8b 8c 24 c8
	36 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  00e38	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00e3b	0d 00 00 00 78	 or	 eax, 2013265920		; 78000000H
  00e40	b9 04 00 00 00	 mov	 ecx, 4
  00e45	48 6b c9 00	 imul	 rcx, rcx, 0
  00e49	48 8b 94 24 c8
	36 00 00	 mov	 rdx, QWORD PTR dfltab$[rsp]
  00e51	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1464 :         if (neg)

  00e54	83 7c 24 4c 00	 cmp	 DWORD PTR neg$[rsp], 0
  00e59	74 2c		 je	 SHORT $LN49@hflbfl2dfl

; 1465 :           dfltab[0] |= 0x80000000;

  00e5b	b8 04 00 00 00	 mov	 eax, 4
  00e60	48 6b c0 00	 imul	 rax, rax, 0
  00e64	48 8b 8c 24 c8
	36 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  00e6c	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00e6f	0f ba e8 1f	 bts	 eax, 31
  00e73	b9 04 00 00 00	 mov	 ecx, 4
  00e78	48 6b c9 00	 imul	 rcx, rcx, 0
  00e7c	48 8b 94 24 c8
	36 00 00	 mov	 rdx, QWORD PTR dfltab$[rsp]
  00e84	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax
$LN49@hflbfl2dfl:

; 1466 :         return 0;

  00e87	33 c0		 xor	 eax, eax
  00e89	e9 51 14 00 00	 jmp	 $LN1@hflbfl2dfl
$LN48@hflbfl2dfl:

; 1467 :       }
; 1468 :       temptab[0] = (temptab[0] << (cbits + 1)) >> (cbits + 1);

  00e8e	b8 04 00 00 00	 mov	 eax, 4
  00e93	48 6b c0 00	 imul	 rax, rax, 0
  00e97	8b 4c 24 38	 mov	 ecx, DWORD PTR cbits$[rsp]
  00e9b	ff c1		 inc	 ecx
  00e9d	8b 84 04 28 01
	00 00		 mov	 eax, DWORD PTR temptab$[rsp+rax]
  00ea4	d3 e0		 shl	 eax, cl
  00ea6	8b 4c 24 38	 mov	 ecx, DWORD PTR cbits$[rsp]
  00eaa	ff c1		 inc	 ecx
  00eac	d3 e8		 shr	 eax, cl
  00eae	b9 04 00 00 00	 mov	 ecx, 4
  00eb3	48 6b c9 00	 imul	 rcx, rcx, 0
  00eb7	89 84 0c 28 01
	00 00		 mov	 DWORD PTR temptab$[rsp+rcx], eax

; 1469 :       switch (hflwords)

  00ebe	8b 84 24 d0 36
	00 00		 mov	 eax, DWORD PTR hflwords$[rsp]
  00ec5	89 44 24 7c	 mov	 DWORD PTR tv729[rsp], eax
  00ec9	83 7c 24 7c 01	 cmp	 DWORD PTR tv729[rsp], 1
  00ece	74 1b		 je	 SHORT $LN50@hflbfl2dfl
  00ed0	83 7c 24 7c 02	 cmp	 DWORD PTR tv729[rsp], 2
  00ed5	0f 84 c5 00 00
	00		 je	 $LN53@hflbfl2dfl
  00edb	83 7c 24 7c 04	 cmp	 DWORD PTR tv729[rsp], 4
  00ee0	0f 84 c4 01 00
	00		 je	 $LN56@hflbfl2dfl
  00ee6	e9 6e 03 00 00	 jmp	 $LN2@hflbfl2dfl
$LN50@hflbfl2dfl:

; 1470 :       {
; 1471 :       case 1:
; 1472 :         if (temptab[0] == 0)

  00eeb	b8 04 00 00 00	 mov	 eax, 4
  00ef0	48 6b c0 00	 imul	 rax, rax, 0
  00ef4	83 bc 04 28 01
	00 00 00	 cmp	 DWORD PTR temptab$[rsp+rax], 0
  00efc	75 7a		 jne	 SHORT $LN51@hflbfl2dfl

; 1473 :         {
; 1474 :           memset(dfltab, 0x00, sizeof(int) * dflwords);

  00efe	48 63 84 24 d8
	36 00 00	 movsxd	 rax, DWORD PTR dflwords$[rsp]
  00f06	48 c1 e0 02	 shl	 rax, 2
  00f0a	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv736[rsp], rax
  00f12	48 8b bc 24 c8
	36 00 00	 mov	 rdi, QWORD PTR dfltab$[rsp]
  00f1a	33 c0		 xor	 eax, eax
  00f1c	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv736[rsp]
  00f24	f3 aa		 rep stosb

; 1475 :           dfltab[0] = 0x7c000000;

  00f26	b8 04 00 00 00	 mov	 eax, 4
  00f2b	48 6b c0 00	 imul	 rax, rax, 0
  00f2f	48 8b 8c 24 c8
	36 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  00f37	c7 04 01 00 00
	00 7c		 mov	 DWORD PTR [rcx+rax], 2080374784 ; 7c000000H

; 1476 :           if (neg)

  00f3e	83 7c 24 4c 00	 cmp	 DWORD PTR neg$[rsp], 0
  00f43	74 2c		 je	 SHORT $LN52@hflbfl2dfl

; 1477 :             dfltab[0] |= 0x80000000;

  00f45	b8 04 00 00 00	 mov	 eax, 4
  00f4a	48 6b c0 00	 imul	 rax, rax, 0
  00f4e	48 8b 8c 24 c8
	36 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  00f56	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00f59	0f ba e8 1f	 bts	 eax, 31
  00f5d	b9 04 00 00 00	 mov	 ecx, 4
  00f62	48 6b c9 00	 imul	 rcx, rcx, 0
  00f66	48 8b 94 24 c8
	36 00 00	 mov	 rdx, QWORD PTR dfltab$[rsp]
  00f6e	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax
$LN52@hflbfl2dfl:

; 1478 :           return 0;

  00f71	33 c0		 xor	 eax, eax
  00f73	e9 67 13 00 00	 jmp	 $LN1@hflbfl2dfl
$LN51@hflbfl2dfl:

; 1479 :         }
; 1480 :         temptab[0] <<= 10;

  00f78	b8 04 00 00 00	 mov	 eax, 4
  00f7d	48 6b c0 00	 imul	 rax, rax, 0
  00f81	8b 84 04 28 01
	00 00		 mov	 eax, DWORD PTR temptab$[rsp+rax]
  00f88	c1 e0 0a	 shl	 eax, 10
  00f8b	b9 04 00 00 00	 mov	 ecx, 4
  00f90	48 6b c9 00	 imul	 rcx, rcx, 0
  00f94	89 84 0c 28 01
	00 00		 mov	 DWORD PTR temptab$[rsp+rcx], eax

; 1481 :         break;

  00f9b	e9 b9 02 00 00	 jmp	 $LN2@hflbfl2dfl
$LN53@hflbfl2dfl:

; 1482 :       case 2:
; 1483 :         if (temptab[0] == 0 && temptab[1] == 0)

  00fa0	b8 04 00 00 00	 mov	 eax, 4
  00fa5	48 6b c0 00	 imul	 rax, rax, 0
  00fa9	83 bc 04 28 01
	00 00 00	 cmp	 DWORD PTR temptab$[rsp+rax], 0
  00fb1	0f 85 8d 00 00
	00		 jne	 $LN54@hflbfl2dfl
  00fb7	b8 04 00 00 00	 mov	 eax, 4
  00fbc	48 6b c0 01	 imul	 rax, rax, 1
  00fc0	83 bc 04 28 01
	00 00 00	 cmp	 DWORD PTR temptab$[rsp+rax], 0
  00fc8	75 7a		 jne	 SHORT $LN54@hflbfl2dfl

; 1484 :         {
; 1485 :           memset(dfltab, 0x00, sizeof(int) * dflwords);

  00fca	48 63 84 24 d8
	36 00 00	 movsxd	 rax, DWORD PTR dflwords$[rsp]
  00fd2	48 c1 e0 02	 shl	 rax, 2
  00fd6	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv761[rsp], rax
  00fde	48 8b bc 24 c8
	36 00 00	 mov	 rdi, QWORD PTR dfltab$[rsp]
  00fe6	33 c0		 xor	 eax, eax
  00fe8	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv761[rsp]
  00ff0	f3 aa		 rep stosb

; 1486 :           dfltab[0] = 0x7c000000;

  00ff2	b8 04 00 00 00	 mov	 eax, 4
  00ff7	48 6b c0 00	 imul	 rax, rax, 0
  00ffb	48 8b 8c 24 c8
	36 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  01003	c7 04 01 00 00
	00 7c		 mov	 DWORD PTR [rcx+rax], 2080374784 ; 7c000000H

; 1487 :           if (neg)

  0100a	83 7c 24 4c 00	 cmp	 DWORD PTR neg$[rsp], 0
  0100f	74 2c		 je	 SHORT $LN55@hflbfl2dfl

; 1488 :             dfltab[0] |= 0x80000000;

  01011	b8 04 00 00 00	 mov	 eax, 4
  01016	48 6b c0 00	 imul	 rax, rax, 0
  0101a	48 8b 8c 24 c8
	36 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  01022	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  01025	0f ba e8 1f	 bts	 eax, 31
  01029	b9 04 00 00 00	 mov	 ecx, 4
  0102e	48 6b c9 00	 imul	 rcx, rcx, 0
  01032	48 8b 94 24 c8
	36 00 00	 mov	 rdx, QWORD PTR dfltab$[rsp]
  0103a	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax
$LN55@hflbfl2dfl:

; 1489 :           return 0;

  0103d	33 c0		 xor	 eax, eax
  0103f	e9 9b 12 00 00	 jmp	 $LN1@hflbfl2dfl
$LN54@hflbfl2dfl:

; 1490 :         }
; 1491 :         temptab[0] = (temptab[0] << 13) | ((temptab[1] & 0xfff80000) >> 19);

  01044	b8 04 00 00 00	 mov	 eax, 4
  01049	48 6b c0 00	 imul	 rax, rax, 0
  0104d	8b 84 04 28 01
	00 00		 mov	 eax, DWORD PTR temptab$[rsp+rax]
  01054	c1 e0 0d	 shl	 eax, 13
  01057	b9 04 00 00 00	 mov	 ecx, 4
  0105c	48 6b c9 01	 imul	 rcx, rcx, 1
  01060	8b 8c 0c 28 01
	00 00		 mov	 ecx, DWORD PTR temptab$[rsp+rcx]
  01067	81 e1 00 00 f8
	ff		 and	 ecx, -524288		; fff80000H
  0106d	c1 e9 13	 shr	 ecx, 19
  01070	0b c1		 or	 eax, ecx
  01072	b9 04 00 00 00	 mov	 ecx, 4
  01077	48 6b c9 00	 imul	 rcx, rcx, 0
  0107b	89 84 0c 28 01
	00 00		 mov	 DWORD PTR temptab$[rsp+rcx], eax

; 1492 :         temptab[1] <<= 13;

  01082	b8 04 00 00 00	 mov	 eax, 4
  01087	48 6b c0 01	 imul	 rax, rax, 1
  0108b	8b 84 04 28 01
	00 00		 mov	 eax, DWORD PTR temptab$[rsp+rax]
  01092	c1 e0 0d	 shl	 eax, 13
  01095	b9 04 00 00 00	 mov	 ecx, 4
  0109a	48 6b c9 01	 imul	 rcx, rcx, 1
  0109e	89 84 0c 28 01
	00 00		 mov	 DWORD PTR temptab$[rsp+rcx], eax

; 1493 :         break;

  010a5	e9 af 01 00 00	 jmp	 $LN2@hflbfl2dfl
$LN56@hflbfl2dfl:

; 1494 :       case 4:
; 1495 :         if (temptab[0] == 0 && temptab[1] == 0 &&
; 1496 :           temptab[2] == 0 && temptab[3] == 0)

  010aa	b8 04 00 00 00	 mov	 eax, 4
  010af	48 6b c0 00	 imul	 rax, rax, 0
  010b3	83 bc 04 28 01
	00 00 00	 cmp	 DWORD PTR temptab$[rsp+rax], 0
  010bb	0f 85 bb 00 00
	00		 jne	 $LN57@hflbfl2dfl
  010c1	b8 04 00 00 00	 mov	 eax, 4
  010c6	48 6b c0 01	 imul	 rax, rax, 1
  010ca	83 bc 04 28 01
	00 00 00	 cmp	 DWORD PTR temptab$[rsp+rax], 0
  010d2	0f 85 a4 00 00
	00		 jne	 $LN57@hflbfl2dfl
  010d8	b8 04 00 00 00	 mov	 eax, 4
  010dd	48 6b c0 02	 imul	 rax, rax, 2
  010e1	83 bc 04 28 01
	00 00 00	 cmp	 DWORD PTR temptab$[rsp+rax], 0
  010e9	0f 85 8d 00 00
	00		 jne	 $LN57@hflbfl2dfl
  010ef	b8 04 00 00 00	 mov	 eax, 4
  010f4	48 6b c0 03	 imul	 rax, rax, 3
  010f8	83 bc 04 28 01
	00 00 00	 cmp	 DWORD PTR temptab$[rsp+rax], 0
  01100	75 7a		 jne	 SHORT $LN57@hflbfl2dfl

; 1497 :         {
; 1498 :           memset(dfltab, 0x00, sizeof(int) * dflwords);

  01102	48 63 84 24 d8
	36 00 00	 movsxd	 rax, DWORD PTR dflwords$[rsp]
  0110a	48 c1 e0 02	 shl	 rax, 2
  0110e	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv802[rsp], rax
  01116	48 8b bc 24 c8
	36 00 00	 mov	 rdi, QWORD PTR dfltab$[rsp]
  0111e	33 c0		 xor	 eax, eax
  01120	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv802[rsp]
  01128	f3 aa		 rep stosb

; 1499 :           dfltab[0] = 0x7c000000;

  0112a	b8 04 00 00 00	 mov	 eax, 4
  0112f	48 6b c0 00	 imul	 rax, rax, 0
  01133	48 8b 8c 24 c8
	36 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  0113b	c7 04 01 00 00
	00 7c		 mov	 DWORD PTR [rcx+rax], 2080374784 ; 7c000000H

; 1500 :           if (neg)

  01142	83 7c 24 4c 00	 cmp	 DWORD PTR neg$[rsp], 0
  01147	74 2c		 je	 SHORT $LN58@hflbfl2dfl

; 1501 :             dfltab[0] |= 0x80000000;

  01149	b8 04 00 00 00	 mov	 eax, 4
  0114e	48 6b c0 00	 imul	 rax, rax, 0
  01152	48 8b 8c 24 c8
	36 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  0115a	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0115d	0f ba e8 1f	 bts	 eax, 31
  01161	b9 04 00 00 00	 mov	 ecx, 4
  01166	48 6b c9 00	 imul	 rcx, rcx, 0
  0116a	48 8b 94 24 c8
	36 00 00	 mov	 rdx, QWORD PTR dfltab$[rsp]
  01172	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax
$LN58@hflbfl2dfl:

; 1502 :           return 0;

  01175	33 c0		 xor	 eax, eax
  01177	e9 63 11 00 00	 jmp	 $LN1@hflbfl2dfl
$LN57@hflbfl2dfl:

; 1503 :         }
; 1504 :         temptab[0] = (temptab[0] << 17) | ((temptab[1] & 0xffff8000) >> 15);

  0117c	b8 04 00 00 00	 mov	 eax, 4
  01181	48 6b c0 00	 imul	 rax, rax, 0
  01185	8b 84 04 28 01
	00 00		 mov	 eax, DWORD PTR temptab$[rsp+rax]
  0118c	c1 e0 11	 shl	 eax, 17
  0118f	b9 04 00 00 00	 mov	 ecx, 4
  01194	48 6b c9 01	 imul	 rcx, rcx, 1
  01198	8b 8c 0c 28 01
	00 00		 mov	 ecx, DWORD PTR temptab$[rsp+rcx]
  0119f	81 e1 00 80 ff
	ff		 and	 ecx, -32768		; ffff8000H
  011a5	c1 e9 0f	 shr	 ecx, 15
  011a8	0b c1		 or	 eax, ecx
  011aa	b9 04 00 00 00	 mov	 ecx, 4
  011af	48 6b c9 00	 imul	 rcx, rcx, 0
  011b3	89 84 0c 28 01
	00 00		 mov	 DWORD PTR temptab$[rsp+rcx], eax

; 1505 :         temptab[1] = (temptab[1] << 17) | ((temptab[2] & 0xffff8000) >> 15);

  011ba	b8 04 00 00 00	 mov	 eax, 4
  011bf	48 6b c0 01	 imul	 rax, rax, 1
  011c3	8b 84 04 28 01
	00 00		 mov	 eax, DWORD PTR temptab$[rsp+rax]
  011ca	c1 e0 11	 shl	 eax, 17
  011cd	b9 04 00 00 00	 mov	 ecx, 4
  011d2	48 6b c9 02	 imul	 rcx, rcx, 2
  011d6	8b 8c 0c 28 01
	00 00		 mov	 ecx, DWORD PTR temptab$[rsp+rcx]
  011dd	81 e1 00 80 ff
	ff		 and	 ecx, -32768		; ffff8000H
  011e3	c1 e9 0f	 shr	 ecx, 15
  011e6	0b c1		 or	 eax, ecx
  011e8	b9 04 00 00 00	 mov	 ecx, 4
  011ed	48 6b c9 01	 imul	 rcx, rcx, 1
  011f1	89 84 0c 28 01
	00 00		 mov	 DWORD PTR temptab$[rsp+rcx], eax

; 1506 :         temptab[2] = (temptab[2] << 17) | ((temptab[3] & 0xffff8000) >> 15);

  011f8	b8 04 00 00 00	 mov	 eax, 4
  011fd	48 6b c0 02	 imul	 rax, rax, 2
  01201	8b 84 04 28 01
	00 00		 mov	 eax, DWORD PTR temptab$[rsp+rax]
  01208	c1 e0 11	 shl	 eax, 17
  0120b	b9 04 00 00 00	 mov	 ecx, 4
  01210	48 6b c9 03	 imul	 rcx, rcx, 3
  01214	8b 8c 0c 28 01
	00 00		 mov	 ecx, DWORD PTR temptab$[rsp+rcx]
  0121b	81 e1 00 80 ff
	ff		 and	 ecx, -32768		; ffff8000H
  01221	c1 e9 0f	 shr	 ecx, 15
  01224	0b c1		 or	 eax, ecx
  01226	b9 04 00 00 00	 mov	 ecx, 4
  0122b	48 6b c9 02	 imul	 rcx, rcx, 2
  0122f	89 84 0c 28 01
	00 00		 mov	 DWORD PTR temptab$[rsp+rcx], eax

; 1507 :         temptab[3] <<= 17;

  01236	b8 04 00 00 00	 mov	 eax, 4
  0123b	48 6b c0 03	 imul	 rax, rax, 3
  0123f	8b 84 04 28 01
	00 00		 mov	 eax, DWORD PTR temptab$[rsp+rax]
  01246	c1 e0 11	 shl	 eax, 17
  01249	b9 04 00 00 00	 mov	 ecx, 4
  0124e	48 6b c9 03	 imul	 rcx, rcx, 3
  01252	89 84 0c 28 01
	00 00		 mov	 DWORD PTR temptab$[rsp+rcx], eax
$LN2@hflbfl2dfl:

; 1508 :         break;
; 1509 :       }
; 1510 :       memset(hfl, 0x00, sizeof(hfl));

  01259	48 8d 84 24 38
	01 00 00	 lea	 rax, QWORD PTR hfl$[rsp]
  01261	48 8b f8	 mov	 rdi, rax
  01264	33 c0		 xor	 eax, eax
  01266	b9 1c 00 00 00	 mov	 ecx, 28
  0126b	f3 aa		 rep stosb

; 1511 :       for (i = 0; i < hflwords; i++)

  0126d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  01275	eb 0a		 jmp	 SHORT $LN6@hflbfl2dfl
$LN4@hflbfl2dfl:
  01277	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0127b	ff c0		 inc	 eax
  0127d	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN6@hflbfl2dfl:
  01281	8b 84 24 d0 36
	00 00		 mov	 eax, DWORD PTR hflwords$[rsp]
  01288	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  0128c	0f 8d 95 00 00
	00		 jge	 $LN5@hflbfl2dfl

; 1512 :       {
; 1513 :         for (k = 0; k < 4; k++)

  01292	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR k$[rsp], 0
  0129a	eb 0a		 jmp	 SHORT $LN9@hflbfl2dfl
$LN7@hflbfl2dfl:
  0129c	8b 44 24 58	 mov	 eax, DWORD PTR k$[rsp]
  012a0	ff c0		 inc	 eax
  012a2	89 44 24 58	 mov	 DWORD PTR k$[rsp], eax
$LN9@hflbfl2dfl:
  012a6	83 7c 24 58 04	 cmp	 DWORD PTR k$[rsp], 4
  012ab	7d 75		 jge	 SHORT $LN8@hflbfl2dfl

; 1514 :         {
; 1515 :           temp1 = (temptab[i] >> (24 - (k * 8))) & 0x000000ff;

  012ad	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  012b2	8b 4c 24 58	 mov	 ecx, DWORD PTR k$[rsp]
  012b6	c1 e1 03	 shl	 ecx, 3
  012b9	ba 18 00 00 00	 mov	 edx, 24
  012be	2b d1		 sub	 edx, ecx
  012c0	8b ca		 mov	 ecx, edx
  012c2	8b 84 84 28 01
	00 00		 mov	 eax, DWORD PTR temptab$[rsp+rax*4]
  012c9	d3 e8		 shr	 eax, cl
  012cb	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  012d0	89 44 24 44	 mov	 DWORD PTR temp1$[rsp], eax

; 1516 :           temp2 = bittab1[temp1];

  012d4	8b 44 24 44	 mov	 eax, DWORD PTR temp1$[rsp]
  012d8	8b 84 84 b0 01
	00 00		 mov	 eax, DWORD PTR bittab1$[rsp+rax*4]
  012df	89 44 24 74	 mov	 DWORD PTR temp2$[rsp], eax

; 1517 :           hfl[ARRAYMAX - i - 1] |= (temp2 << (k * 8));

  012e3	b8 07 00 00 00	 mov	 eax, 7
  012e8	2b 44 24 20	 sub	 eax, DWORD PTR i$[rsp]
  012ec	ff c8		 dec	 eax
  012ee	48 98		 cdqe
  012f0	8b 4c 24 58	 mov	 ecx, DWORD PTR k$[rsp]
  012f4	c1 e1 03	 shl	 ecx, 3
  012f7	8b 54 24 74	 mov	 edx, DWORD PTR temp2$[rsp]
  012fb	d3 e2		 shl	 edx, cl
  012fd	8b ca		 mov	 ecx, edx
  012ff	8b 84 84 38 01
	00 00		 mov	 eax, DWORD PTR hfl$[rsp+rax*4]
  01306	0b c1		 or	 eax, ecx
  01308	b9 07 00 00 00	 mov	 ecx, 7
  0130d	2b 4c 24 20	 sub	 ecx, DWORD PTR i$[rsp]
  01311	ff c9		 dec	 ecx
  01313	48 63 c9	 movsxd	 rcx, ecx
  01316	89 84 8c 38 01
	00 00		 mov	 DWORD PTR hfl$[rsp+rcx*4], eax

; 1518 :         }

  0131d	e9 7a ff ff ff	 jmp	 $LN7@hflbfl2dfl
$LN8@hflbfl2dfl:

; 1519 :       }

  01322	e9 50 ff ff ff	 jmp	 $LN4@hflbfl2dfl
$LN5@hflbfl2dfl:

; 1520 :       nan = 1;

  01327	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR nan$[rsp], 1
$LN47@hflbfl2dfl:

; 1521 :     }
; 1522 :   }

  0132f	eb 53		 jmp	 SHORT $LN45@hflbfl2dfl
$LN44@hflbfl2dfl:

; 1523 :   else
; 1524 :   {
; 1525 :     hexp = hfltab[0] >> 24;

  01331	b8 04 00 00 00	 mov	 eax, 4
  01336	48 6b c0 00	 imul	 rax, rax, 0
  0133a	48 8b 8c 24 c0
	36 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  01342	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  01345	c1 e8 18	 shr	 eax, 24
  01348	89 44 24 68	 mov	 DWORD PTR hexp$[rsp], eax

; 1526 :     hfltab[0] &= 0x00ffffff;

  0134c	b8 04 00 00 00	 mov	 eax, 4
  01351	48 6b c0 00	 imul	 rax, rax, 0
  01355	48 8b 8c 24 c0
	36 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  0135d	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  01360	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01365	b9 04 00 00 00	 mov	 ecx, 4
  0136a	48 6b c9 00	 imul	 rcx, rcx, 0
  0136e	48 8b 94 24 c0
	36 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  01376	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1527 :     hexp -= 64;

  01379	8b 44 24 68	 mov	 eax, DWORD PTR hexp$[rsp]
  0137d	83 e8 40	 sub	 eax, 64			; 00000040H
  01380	89 44 24 68	 mov	 DWORD PTR hexp$[rsp], eax
$LN45@hflbfl2dfl:

; 1528 :   }
; 1529 :   if (memcmp(hfltab, binzero, 4 * hflwords) == 0 && !nan)

  01384	8b 84 24 d0 36
	00 00		 mov	 eax, DWORD PTR hflwords$[rsp]
  0138b	c1 e0 02	 shl	 eax, 2
  0138e	48 98		 cdqe
  01390	4c 8b c0	 mov	 r8, rax
  01393	48 8d 94 24 40
	1e 00 00	 lea	 rdx, QWORD PTR binzero$[rsp]
  0139b	48 8b 8c 24 c0
	36 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  013a3	e8 00 00 00 00	 call	 memcmp
  013a8	85 c0		 test	 eax, eax
  013aa	75 36		 jne	 SHORT $LN59@hflbfl2dfl
  013ac	83 7c 24 64 00	 cmp	 DWORD PTR nan$[rsp], 0
  013b1	75 2f		 jne	 SHORT $LN59@hflbfl2dfl

; 1530 :   {
; 1531 :     memset(dfltab, 0x00, 4 * dflwords);

  013b3	8b 84 24 d8 36
	00 00		 mov	 eax, DWORD PTR dflwords$[rsp]
  013ba	c1 e0 02	 shl	 eax, 2
  013bd	48 98		 cdqe
  013bf	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv904[rsp], rax
  013c7	48 8b bc 24 c8
	36 00 00	 mov	 rdi, QWORD PTR dfltab$[rsp]
  013cf	33 c0		 xor	 eax, eax
  013d1	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tv904[rsp]
  013d9	f3 aa		 rep stosb

; 1532 :     return 0;

  013db	33 c0		 xor	 eax, eax
  013dd	e9 fd 0e 00 00	 jmp	 $LN1@hflbfl2dfl
$LN59@hflbfl2dfl:

; 1533 :   }
; 1534 :   if (!nan)

  013e2	83 7c 24 64 00	 cmp	 DWORD PTR nan$[rsp], 0
  013e7	0f 85 1a 06 00
	00		 jne	 $LN60@hflbfl2dfl

; 1535 :   {
; 1536 :     dexp = 0;

  013ed	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR dexp$[rsp], 0

; 1537 :     memset(hfl, 0x00, sizeof(hfl));

  013f5	48 8d 84 24 38
	01 00 00	 lea	 rax, QWORD PTR hfl$[rsp]
  013fd	48 8b f8	 mov	 rdi, rax
  01400	33 c0		 xor	 eax, eax
  01402	b9 1c 00 00 00	 mov	 ecx, 28
  01407	f3 aa		 rep stosb

; 1538 :     /***************************************************************/
; 1539 :     /*   load into a long long array                               */
; 1540 :     /***************************************************************/
; 1541 :     switch (hflwords)

  01409	8b 84 24 d0 36
	00 00		 mov	 eax, DWORD PTR hflwords$[rsp]
  01410	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv908[rsp], eax
  01417	83 bc 24 80 00
	00 00 01	 cmp	 DWORD PTR tv908[rsp], 1
  0141f	74 1d		 je	 SHORT $LN61@hflbfl2dfl
  01421	83 bc 24 80 00
	00 00 02	 cmp	 DWORD PTR tv908[rsp], 2
  01429	74 58		 je	 SHORT $LN64@hflbfl2dfl
  0142b	83 bc 24 80 00
	00 00 04	 cmp	 DWORD PTR tv908[rsp], 4
  01433	0f 84 b3 00 00
	00		 je	 $LN67@hflbfl2dfl
  01439	e9 39 02 00 00	 jmp	 $LN10@hflbfl2dfl
$LN61@hflbfl2dfl:

; 1542 :     {
; 1543 :     case 1:
; 1544 :       hfl[ARRAYMAX - 1] = hfltab[0];

  0143e	b8 04 00 00 00	 mov	 eax, 4
  01443	48 6b c0 00	 imul	 rax, rax, 0
  01447	b9 04 00 00 00	 mov	 ecx, 4
  0144c	48 6b c9 06	 imul	 rcx, rcx, 6
  01450	48 8b 94 24 c0
	36 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  01458	8b 04 02	 mov	 eax, DWORD PTR [rdx+rax]
  0145b	89 84 0c 38 01
	00 00		 mov	 DWORD PTR hfl$[rsp+rcx], eax

; 1545 :       if (binflg)

  01462	83 bc 24 e8 36
	00 00 00	 cmp	 DWORD PTR binflg$[rsp], 0
  0146a	74 0a		 je	 SHORT $LN62@hflbfl2dfl

; 1546 :         maxbits = 23;

  0146c	c7 44 24 3c 17
	00 00 00	 mov	 DWORD PTR maxbits$[rsp], 23
  01474	eb 08		 jmp	 SHORT $LN63@hflbfl2dfl
$LN62@hflbfl2dfl:

; 1547 :       else
; 1548 :         maxbits = 24;

  01476	c7 44 24 3c 18
	00 00 00	 mov	 DWORD PTR maxbits$[rsp], 24
$LN63@hflbfl2dfl:

; 1549 :       break;

  0147e	e9 f4 01 00 00	 jmp	 $LN10@hflbfl2dfl
$LN64@hflbfl2dfl:

; 1550 :     case 2:
; 1551 :       hfl[ARRAYMAX - 2] = hfltab[0];

  01483	b8 04 00 00 00	 mov	 eax, 4
  01488	48 6b c0 00	 imul	 rax, rax, 0
  0148c	b9 04 00 00 00	 mov	 ecx, 4
  01491	48 6b c9 05	 imul	 rcx, rcx, 5
  01495	48 8b 94 24 c0
	36 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  0149d	8b 04 02	 mov	 eax, DWORD PTR [rdx+rax]
  014a0	89 84 0c 38 01
	00 00		 mov	 DWORD PTR hfl$[rsp+rcx], eax

; 1552 :       hfl[ARRAYMAX - 1] = hfltab[1];

  014a7	b8 04 00 00 00	 mov	 eax, 4
  014ac	48 6b c0 01	 imul	 rax, rax, 1
  014b0	b9 04 00 00 00	 mov	 ecx, 4
  014b5	48 6b c9 06	 imul	 rcx, rcx, 6
  014b9	48 8b 94 24 c0
	36 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  014c1	8b 04 02	 mov	 eax, DWORD PTR [rdx+rax]
  014c4	89 84 0c 38 01
	00 00		 mov	 DWORD PTR hfl$[rsp+rcx], eax

; 1553 :       if (binflg)

  014cb	83 bc 24 e8 36
	00 00 00	 cmp	 DWORD PTR binflg$[rsp], 0
  014d3	74 0a		 je	 SHORT $LN65@hflbfl2dfl

; 1554 :         maxbits = 52;

  014d5	c7 44 24 3c 34
	00 00 00	 mov	 DWORD PTR maxbits$[rsp], 52 ; 00000034H
  014dd	eb 08		 jmp	 SHORT $LN66@hflbfl2dfl
$LN65@hflbfl2dfl:

; 1555 :       else
; 1556 :         maxbits = 56;

  014df	c7 44 24 3c 38
	00 00 00	 mov	 DWORD PTR maxbits$[rsp], 56 ; 00000038H
$LN66@hflbfl2dfl:

; 1557 :       break;

  014e7	e9 8b 01 00 00	 jmp	 $LN10@hflbfl2dfl
$LN67@hflbfl2dfl:

; 1558 :     case 4:
; 1559 :       if (binflg)

  014ec	83 bc 24 e8 36
	00 00 00	 cmp	 DWORD PTR binflg$[rsp], 0
  014f4	0f 84 9d 00 00
	00		 je	 $LN68@hflbfl2dfl

; 1560 :       {
; 1561 :         hfl[ARRAYMAX - 4] = hfltab[0];

  014fa	b8 04 00 00 00	 mov	 eax, 4
  014ff	48 6b c0 00	 imul	 rax, rax, 0
  01503	b9 04 00 00 00	 mov	 ecx, 4
  01508	48 6b c9 03	 imul	 rcx, rcx, 3
  0150c	48 8b 94 24 c0
	36 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  01514	8b 04 02	 mov	 eax, DWORD PTR [rdx+rax]
  01517	89 84 0c 38 01
	00 00		 mov	 DWORD PTR hfl$[rsp+rcx], eax

; 1562 :         hfl[ARRAYMAX - 3] = hfltab[1];

  0151e	b8 04 00 00 00	 mov	 eax, 4
  01523	48 6b c0 01	 imul	 rax, rax, 1
  01527	b9 04 00 00 00	 mov	 ecx, 4
  0152c	48 6b c9 04	 imul	 rcx, rcx, 4
  01530	48 8b 94 24 c0
	36 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  01538	8b 04 02	 mov	 eax, DWORD PTR [rdx+rax]
  0153b	89 84 0c 38 01
	00 00		 mov	 DWORD PTR hfl$[rsp+rcx], eax

; 1563 :           hfl[ARRAYMAX - 2] = hfltab[2];

  01542	b8 04 00 00 00	 mov	 eax, 4
  01547	48 6b c0 02	 imul	 rax, rax, 2
  0154b	b9 04 00 00 00	 mov	 ecx, 4
  01550	48 6b c9 05	 imul	 rcx, rcx, 5
  01554	48 8b 94 24 c0
	36 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  0155c	8b 04 02	 mov	 eax, DWORD PTR [rdx+rax]
  0155f	89 84 0c 38 01
	00 00		 mov	 DWORD PTR hfl$[rsp+rcx], eax

; 1564 :         hfl[ARRAYMAX - 1] = hfltab[3];

  01566	b8 04 00 00 00	 mov	 eax, 4
  0156b	48 6b c0 03	 imul	 rax, rax, 3
  0156f	b9 04 00 00 00	 mov	 ecx, 4
  01574	48 6b c9 06	 imul	 rcx, rcx, 6
  01578	48 8b 94 24 c0
	36 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  01580	8b 04 02	 mov	 eax, DWORD PTR [rdx+rax]
  01583	89 84 0c 38 01
	00 00		 mov	 DWORD PTR hfl$[rsp+rcx], eax

; 1565 :         maxbits = 112;

  0158a	c7 44 24 3c 70
	00 00 00	 mov	 DWORD PTR maxbits$[rsp], 112 ; 00000070H

; 1566 :       }

  01592	e9 e0 00 00 00	 jmp	 $LN69@hflbfl2dfl
$LN68@hflbfl2dfl:

; 1567 :       else
; 1568 :       {
; 1569 :         hfl[ARRAYMAX - 4] = hfltab[0] >> 8;

  01597	b8 04 00 00 00	 mov	 eax, 4
  0159c	48 6b c0 00	 imul	 rax, rax, 0
  015a0	48 8b 8c 24 c0
	36 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  015a8	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  015ab	c1 e8 08	 shr	 eax, 8
  015ae	b9 04 00 00 00	 mov	 ecx, 4
  015b3	48 6b c9 03	 imul	 rcx, rcx, 3
  015b7	89 84 0c 38 01
	00 00		 mov	 DWORD PTR hfl$[rsp+rcx], eax

; 1570 :         hfl[ARRAYMAX - 3] = ((hfltab[0] & 0x000000ff) << 24) + (hfltab[1] >> 8);

  015be	b8 04 00 00 00	 mov	 eax, 4
  015c3	48 6b c0 00	 imul	 rax, rax, 0
  015c7	48 8b 8c 24 c0
	36 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  015cf	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  015d2	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  015d7	c1 e0 18	 shl	 eax, 24
  015da	b9 04 00 00 00	 mov	 ecx, 4
  015df	48 6b c9 01	 imul	 rcx, rcx, 1
  015e3	48 8b 94 24 c0
	36 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  015eb	8b 0c 0a	 mov	 ecx, DWORD PTR [rdx+rcx]
  015ee	c1 e9 08	 shr	 ecx, 8
  015f1	03 c1		 add	 eax, ecx
  015f3	b9 04 00 00 00	 mov	 ecx, 4
  015f8	48 6b c9 04	 imul	 rcx, rcx, 4
  015fc	89 84 0c 38 01
	00 00		 mov	 DWORD PTR hfl$[rsp+rcx], eax

; 1571 :         hfl[ARRAYMAX - 2] = (hfltab[2] & 0x00ffffff) + ((hfltab[1] & 0x000000ff) << 24);

  01603	b8 04 00 00 00	 mov	 eax, 4
  01608	48 6b c0 02	 imul	 rax, rax, 2
  0160c	48 8b 8c 24 c0
	36 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  01614	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  01617	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0161c	b9 04 00 00 00	 mov	 ecx, 4
  01621	48 6b c9 01	 imul	 rcx, rcx, 1
  01625	48 8b 94 24 c0
	36 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  0162d	8b 0c 0a	 mov	 ecx, DWORD PTR [rdx+rcx]
  01630	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  01636	c1 e1 18	 shl	 ecx, 24
  01639	03 c1		 add	 eax, ecx
  0163b	b9 04 00 00 00	 mov	 ecx, 4
  01640	48 6b c9 05	 imul	 rcx, rcx, 5
  01644	89 84 0c 38 01
	00 00		 mov	 DWORD PTR hfl$[rsp+rcx], eax

; 1572 :         hfl[ARRAYMAX - 1] = hfltab[3];

  0164b	b8 04 00 00 00	 mov	 eax, 4
  01650	48 6b c0 03	 imul	 rax, rax, 3
  01654	b9 04 00 00 00	 mov	 ecx, 4
  01659	48 6b c9 06	 imul	 rcx, rcx, 6
  0165d	48 8b 94 24 c0
	36 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  01665	8b 04 02	 mov	 eax, DWORD PTR [rdx+rax]
  01668	89 84 0c 38 01
	00 00		 mov	 DWORD PTR hfl$[rsp+rcx], eax

; 1573 :         maxbits = 112;

  0166f	c7 44 24 3c 70
	00 00 00	 mov	 DWORD PTR maxbits$[rsp], 112 ; 00000070H
$LN69@hflbfl2dfl:
$LN10@hflbfl2dfl:

; 1574 :       }
; 1575 :       break;
; 1576 :     }
; 1577 :     if (binflg)

  01677	83 bc 24 e8 36
	00 00 00	 cmp	 DWORD PTR binflg$[rsp], 0
  0167f	74 44		 je	 SHORT $LN70@hflbfl2dfl

; 1578 :       if (bexp + bflexpbias[hflwords] == 0)

  01681	48 63 84 24 d0
	36 00 00	 movsxd	 rax, DWORD PTR hflwords$[rsp]
  01689	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bflexpbias
  01690	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  01693	8b 4c 24 48	 mov	 ecx, DWORD PTR bexp$[rsp]
  01697	03 c8		 add	 ecx, eax
  01699	8b c1		 mov	 eax, ecx
  0169b	85 c0		 test	 eax, eax
  0169d	75 14		 jne	 SHORT $LN72@hflbfl2dfl

; 1579 :         exp = bexp - maxbits + 1;

  0169f	8b 44 24 3c	 mov	 eax, DWORD PTR maxbits$[rsp]
  016a3	8b 4c 24 48	 mov	 ecx, DWORD PTR bexp$[rsp]
  016a7	2b c8		 sub	 ecx, eax
  016a9	8b c1		 mov	 eax, ecx
  016ab	ff c0		 inc	 eax
  016ad	89 44 24 30	 mov	 DWORD PTR exp$[rsp], eax
  016b1	eb 10		 jmp	 SHORT $LN73@hflbfl2dfl
$LN72@hflbfl2dfl:

; 1580 :       else
; 1581 :         exp = bexp - maxbits;

  016b3	8b 44 24 3c	 mov	 eax, DWORD PTR maxbits$[rsp]
  016b7	8b 4c 24 48	 mov	 ecx, DWORD PTR bexp$[rsp]
  016bb	2b c8		 sub	 ecx, eax
  016bd	8b c1		 mov	 eax, ecx
  016bf	89 44 24 30	 mov	 DWORD PTR exp$[rsp], eax
$LN73@hflbfl2dfl:
  016c3	eb 0f		 jmp	 SHORT $LN71@hflbfl2dfl
$LN70@hflbfl2dfl:

; 1582 :     else
; 1583 :       exp = (hexp * 4) - maxbits;

  016c5	8b 44 24 68	 mov	 eax, DWORD PTR hexp$[rsp]
  016c9	c1 e0 02	 shl	 eax, 2
  016cc	2b 44 24 3c	 sub	 eax, DWORD PTR maxbits$[rsp]
  016d0	89 44 24 30	 mov	 DWORD PTR exp$[rsp], eax
$LN71@hflbfl2dfl:

; 1584 :     /***************************************************************/
; 1585 :     /*   We need to adjust the number by the difference between    */
; 1586 :     /*   the exponent (in bits) and the number of bits for the     */
; 1587 :     /*   fraction.  We need to multiply by 2**N, where N is        */
; 1588 :     /*   the difference.  Note that if N is negative, it is        */
; 1589 :     /*   actually a divide, and if zero multiply by one.           */
; 1590 :     /***************************************************************/
; 1591 :     dexp = 0;

  016d4	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR dexp$[rsp], 0

; 1592 :     if (exp < 0)

  016dc	83 7c 24 30 00	 cmp	 DWORD PTR exp$[rsp], 0
  016e1	0f 8d 90 01 00
	00		 jge	 $LN74@hflbfl2dfl

; 1593 :     {
; 1594 :       exp = abs(exp);

  016e7	8b 4c 24 30	 mov	 ecx, DWORD PTR exp$[rsp]
  016eb	e8 00 00 00 00	 call	 abs
  016f0	89 44 24 30	 mov	 DWORD PTR exp$[rsp], eax
$LN12@hflbfl2dfl:

; 1595 :       while (exp > 0)

  016f4	83 7c 24 30 00	 cmp	 DWORD PTR exp$[rsp], 0
  016f9	0f 8e 73 01 00
	00		 jle	 $LN13@hflbfl2dfl
$LN14@hflbfl2dfl:

; 1596 :       {
; 1597 :         while (hfl[0] == 0 && hfl[1] < 16777216)

  016ff	b8 04 00 00 00	 mov	 eax, 4
  01704	48 6b c0 00	 imul	 rax, rax, 0
  01708	83 bc 04 38 01
	00 00 00	 cmp	 DWORD PTR hfl$[rsp+rax], 0
  01710	0f 85 fe 00 00
	00		 jne	 $LN15@hflbfl2dfl
  01716	b8 04 00 00 00	 mov	 eax, 4
  0171b	48 6b c0 01	 imul	 rax, rax, 1
  0171f	81 bc 04 38 01
	00 00 00 00 00
	01		 cmp	 DWORD PTR hfl$[rsp+rax], 16777216 ; 01000000H
  0172a	0f 83 e4 00 00
	00		 jae	 $LN15@hflbfl2dfl

; 1598 :         {
; 1599 :           lzero = getlzerobits(hfl, ARRAYMAX);

  01730	ba 07 00 00 00	 mov	 edx, 7
  01735	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  0173d	e8 00 00 00 00	 call	 getlzerobits
  01742	89 44 24 6c	 mov	 DWORD PTR lzero$[rsp], eax

; 1600 :           lzerohex = (lzero >> 2) << 2;

  01746	8b 44 24 6c	 mov	 eax, DWORD PTR lzero$[rsp]
  0174a	c1 f8 02	 sar	 eax, 2
  0174d	c1 e0 02	 shl	 eax, 2
  01750	89 84 24 84 00
	00 00		 mov	 DWORD PTR lzerohex$[rsp], eax

; 1601 :           hdigit = (lzerohex - 32) / 4;

  01757	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR lzerohex$[rsp]
  0175e	83 e8 20	 sub	 eax, 32			; 00000020H
  01761	99		 cdq
  01762	83 e2 03	 and	 edx, 3
  01765	03 c2		 add	 eax, edx
  01767	c1 f8 02	 sar	 eax, 2
  0176a	89 44 24 34	 mov	 DWORD PTR hdigit$[rsp], eax

; 1602 :           hdigit = max(hdigit, 5);

  0176e	83 7c 24 34 05	 cmp	 DWORD PTR hdigit$[rsp], 5
  01773	7e 0d		 jle	 SHORT $LN108@hflbfl2dfl
  01775	8b 44 24 34	 mov	 eax, DWORD PTR hdigit$[rsp]
  01779	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv1005[rsp], eax
  01780	eb 0b		 jmp	 SHORT $LN109@hflbfl2dfl
$LN108@hflbfl2dfl:
  01782	c7 84 24 a0 00
	00 00 05 00 00
	00		 mov	 DWORD PTR tv1005[rsp], 5
$LN109@hflbfl2dfl:
  0178d	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv1005[rsp]
  01794	89 44 24 34	 mov	 DWORD PTR hdigit$[rsp], eax

; 1603 :           hdigit = min(hdigit, 1);

  01798	83 7c 24 34 01	 cmp	 DWORD PTR hdigit$[rsp], 1
  0179d	7d 0d		 jge	 SHORT $LN110@hflbfl2dfl
  0179f	8b 44 24 34	 mov	 eax, DWORD PTR hdigit$[rsp]
  017a3	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv1007[rsp], eax
  017aa	eb 0b		 jmp	 SHORT $LN111@hflbfl2dfl
$LN110@hflbfl2dfl:
  017ac	c7 84 24 a4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv1007[rsp], 1
$LN111@hflbfl2dfl:
  017b7	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR tv1007[rsp]
  017be	89 44 24 34	 mov	 DWORD PTR hdigit$[rsp], eax

; 1604 :           pidx = hexdigittab[hdigit];

  017c2	48 63 44 24 34	 movsxd	 rax, DWORD PTR hdigit$[rsp]
  017c7	8b 84 84 78 01
	00 00		 mov	 eax, DWORD PTR hexdigittab$[rsp+rax*4]
  017ce	89 44 24 60	 mov	 DWORD PTR pidx$[rsp], eax

; 1605 :           power10 = power10tab[pidx];

  017d2	48 63 44 24 60	 movsxd	 rax, DWORD PTR pidx$[rsp]
  017d7	8b 84 84 90 01
	00 00		 mov	 eax, DWORD PTR power10tab$[rsp+rax*4]
  017de	89 84 24 88 00
	00 00		 mov	 DWORD PTR power10$[rsp], eax

; 1606 :           arraymlt(hfl, power10, ARRAYMAX);

  017e5	41 b8 07 00 00
	00		 mov	 r8d, 7
  017eb	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR power10$[rsp]
  017f2	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  017fa	e8 00 00 00 00	 call	 arraymlt

; 1607 :           dexp -= pidx;

  017ff	8b 44 24 60	 mov	 eax, DWORD PTR pidx$[rsp]
  01803	8b 4c 24 2c	 mov	 ecx, DWORD PTR dexp$[rsp]
  01807	2b c8		 sub	 ecx, eax
  01809	8b c1		 mov	 eax, ecx
  0180b	89 44 24 2c	 mov	 DWORD PTR dexp$[rsp], eax

; 1608 :         }

  0180f	e9 eb fe ff ff	 jmp	 $LN14@hflbfl2dfl
$LN15@hflbfl2dfl:

; 1609 :         shiftamt = min(32, exp);

  01814	83 7c 24 30 20	 cmp	 DWORD PTR exp$[rsp], 32	; 00000020H
  01819	7e 0d		 jle	 SHORT $LN112@hflbfl2dfl
  0181b	c7 84 24 a8 00
	00 00 20 00 00
	00		 mov	 DWORD PTR tv1019[rsp], 32 ; 00000020H
  01826	eb 0b		 jmp	 SHORT $LN113@hflbfl2dfl
$LN112@hflbfl2dfl:
  01828	8b 44 24 30	 mov	 eax, DWORD PTR exp$[rsp]
  0182c	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv1019[rsp], eax
$LN113@hflbfl2dfl:
  01833	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR tv1019[rsp]
  0183a	89 44 24 5c	 mov	 DWORD PTR shiftamt$[rsp], eax

; 1610 :         arrayshiftright(hfl, ARRAYMAX, shiftamt, remtab);

  0183e	4c 8d 8c 24 d0
	05 00 00	 lea	 r9, QWORD PTR remtab$[rsp]
  01846	44 8b 44 24 5c	 mov	 r8d, DWORD PTR shiftamt$[rsp]
  0184b	ba 07 00 00 00	 mov	 edx, 7
  01850	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  01858	e8 00 00 00 00	 call	 arrayshiftright

; 1611 :         exp -= shiftamt;

  0185d	8b 44 24 5c	 mov	 eax, DWORD PTR shiftamt$[rsp]
  01861	8b 4c 24 30	 mov	 ecx, DWORD PTR exp$[rsp]
  01865	2b c8		 sub	 ecx, eax
  01867	8b c1		 mov	 eax, ecx
  01869	89 44 24 30	 mov	 DWORD PTR exp$[rsp], eax

; 1612 :       }

  0186d	e9 82 fe ff ff	 jmp	 $LN12@hflbfl2dfl
$LN13@hflbfl2dfl:

; 1613 :     }

  01872	e9 90 01 00 00	 jmp	 $LN75@hflbfl2dfl
$LN74@hflbfl2dfl:
$LN16@hflbfl2dfl:

; 1614 :     else
; 1615 :     /***************************************************************/
; 1616 :     /*   if the exponent is negaive, we need to convert the hex    */
; 1617 :     /*   fraction to decimal, so we need to divide by 16 for each  */
; 1618 :     /*   significant digit, minus the exponent value.  If the      */
; 1619 :     /*   exponent itself is negative, this means more divides,     */
; 1620 :     /*   if positive less divides.  To maintain precision, we will */
; 1621 :     /*   multiply by 10 and reduce the decimal exponent by 1 for   */
; 1622 :     /*   each pass.  Periodically, we will multiply by 100 and     */
; 1623 :     /*   reduce the exponent by two.                               */
; 1624 :     /***************************************************************/
; 1625 :     while (exp > 0)

  01877	83 7c 24 30 00	 cmp	 DWORD PTR exp$[rsp], 0
  0187c	0f 8e 85 01 00
	00		 jle	 $LN17@hflbfl2dfl

; 1626 :     {
; 1627 :       shiftamt = min(32, exp);

  01882	83 7c 24 30 20	 cmp	 DWORD PTR exp$[rsp], 32	; 00000020H
  01887	7e 0d		 jle	 SHORT $LN114@hflbfl2dfl
  01889	c7 84 24 ac 00
	00 00 20 00 00
	00		 mov	 DWORD PTR tv1027[rsp], 32 ; 00000020H
  01894	eb 0b		 jmp	 SHORT $LN115@hflbfl2dfl
$LN114@hflbfl2dfl:
  01896	8b 44 24 30	 mov	 eax, DWORD PTR exp$[rsp]
  0189a	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv1027[rsp], eax
$LN115@hflbfl2dfl:
  018a1	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR tv1027[rsp]
  018a8	89 44 24 5c	 mov	 DWORD PTR shiftamt$[rsp], eax

; 1628 :       arrayshiftleft(hfl, ARRAYMAX, shiftamt);

  018ac	44 8b 44 24 5c	 mov	 r8d, DWORD PTR shiftamt$[rsp]
  018b1	ba 07 00 00 00	 mov	 edx, 7
  018b6	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  018be	e8 00 00 00 00	 call	 arrayshiftleft

; 1629 :       exp -= shiftamt;

  018c3	8b 44 24 5c	 mov	 eax, DWORD PTR shiftamt$[rsp]
  018c7	8b 4c 24 30	 mov	 ecx, DWORD PTR exp$[rsp]
  018cb	2b c8		 sub	 ecx, eax
  018cd	8b c1		 mov	 eax, ecx
  018cf	89 44 24 30	 mov	 DWORD PTR exp$[rsp], eax
$LN18@hflbfl2dfl:

; 1630 :       while (hfl[0] > 0 || (hfl[0] == 0 && hfl[1] >= 16777216))

  018d3	b8 04 00 00 00	 mov	 eax, 4
  018d8	48 6b c0 00	 imul	 rax, rax, 0
  018dc	83 bc 04 38 01
	00 00 00	 cmp	 DWORD PTR hfl$[rsp+rax], 0
  018e4	77 31		 ja	 SHORT $LN76@hflbfl2dfl
  018e6	b8 04 00 00 00	 mov	 eax, 4
  018eb	48 6b c0 00	 imul	 rax, rax, 0
  018ef	83 bc 04 38 01
	00 00 00	 cmp	 DWORD PTR hfl$[rsp+rax], 0
  018f7	0f 85 05 01 00
	00		 jne	 $LN19@hflbfl2dfl
  018fd	b8 04 00 00 00	 mov	 eax, 4
  01902	48 6b c0 01	 imul	 rax, rax, 1
  01906	81 bc 04 38 01
	00 00 00 00 00
	01		 cmp	 DWORD PTR hfl$[rsp+rax], 16777216 ; 01000000H
  01911	0f 82 eb 00 00
	00		 jb	 $LN19@hflbfl2dfl
$LN76@hflbfl2dfl:

; 1631 :       {
; 1632 :         lzero = getlzerobits(hfl, ARRAYMAX);

  01917	ba 07 00 00 00	 mov	 edx, 7
  0191c	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  01924	e8 00 00 00 00	 call	 getlzerobits
  01929	89 44 24 6c	 mov	 DWORD PTR lzero$[rsp], eax

; 1633 :         lzerohex = (lzero >> 2) << 2;

  0192d	8b 44 24 6c	 mov	 eax, DWORD PTR lzero$[rsp]
  01931	c1 f8 02	 sar	 eax, 2
  01934	c1 e0 02	 shl	 eax, 2
  01937	89 84 24 84 00
	00 00		 mov	 DWORD PTR lzerohex$[rsp], eax

; 1634 :         hdigit = (40 - lzerohex) / 4;

  0193e	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  01943	2b 84 24 84 00
	00 00		 sub	 eax, DWORD PTR lzerohex$[rsp]
  0194a	99		 cdq
  0194b	83 e2 03	 and	 edx, 3
  0194e	03 c2		 add	 eax, edx
  01950	c1 f8 02	 sar	 eax, 2
  01953	89 44 24 34	 mov	 DWORD PTR hdigit$[rsp], eax

; 1635 :         hdigit = max(hdigit, 5);

  01957	83 7c 24 34 05	 cmp	 DWORD PTR hdigit$[rsp], 5
  0195c	7e 0d		 jle	 SHORT $LN116@hflbfl2dfl
  0195e	8b 44 24 34	 mov	 eax, DWORD PTR hdigit$[rsp]
  01962	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv1049[rsp], eax
  01969	eb 0b		 jmp	 SHORT $LN117@hflbfl2dfl
$LN116@hflbfl2dfl:
  0196b	c7 84 24 b0 00
	00 00 05 00 00
	00		 mov	 DWORD PTR tv1049[rsp], 5
$LN117@hflbfl2dfl:
  01976	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR tv1049[rsp]
  0197d	89 44 24 34	 mov	 DWORD PTR hdigit$[rsp], eax

; 1636 :         hdigit = min(hdigit, 1);

  01981	83 7c 24 34 01	 cmp	 DWORD PTR hdigit$[rsp], 1
  01986	7d 0d		 jge	 SHORT $LN118@hflbfl2dfl
  01988	8b 44 24 34	 mov	 eax, DWORD PTR hdigit$[rsp]
  0198c	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv1051[rsp], eax
  01993	eb 0b		 jmp	 SHORT $LN119@hflbfl2dfl
$LN118@hflbfl2dfl:
  01995	c7 84 24 b4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv1051[rsp], 1
$LN119@hflbfl2dfl:
  019a0	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR tv1051[rsp]
  019a7	89 44 24 34	 mov	 DWORD PTR hdigit$[rsp], eax

; 1637 :         pidx = hexdigittab[hdigit];

  019ab	48 63 44 24 34	 movsxd	 rax, DWORD PTR hdigit$[rsp]
  019b0	8b 84 84 78 01
	00 00		 mov	 eax, DWORD PTR hexdigittab$[rsp+rax*4]
  019b7	89 44 24 60	 mov	 DWORD PTR pidx$[rsp], eax

; 1638 :         power10 = power10tab[pidx];

  019bb	48 63 44 24 60	 movsxd	 rax, DWORD PTR pidx$[rsp]
  019c0	8b 84 84 90 01
	00 00		 mov	 eax, DWORD PTR power10tab$[rsp+rax*4]
  019c7	89 84 24 88 00
	00 00		 mov	 DWORD PTR power10$[rsp], eax

; 1639 :         arraydiv(hfl, power10, ARRAYMAX, &rem);

  019ce	4c 8d 4c 24 50	 lea	 r9, QWORD PTR rem$[rsp]
  019d3	41 b8 07 00 00
	00		 mov	 r8d, 7
  019d9	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR power10$[rsp]
  019e0	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  019e8	e8 00 00 00 00	 call	 arraydiv

; 1640 :         dexp += pidx;

  019ed	8b 44 24 60	 mov	 eax, DWORD PTR pidx$[rsp]
  019f1	8b 4c 24 2c	 mov	 ecx, DWORD PTR dexp$[rsp]
  019f5	03 c8		 add	 ecx, eax
  019f7	8b c1		 mov	 eax, ecx
  019f9	89 44 24 2c	 mov	 DWORD PTR dexp$[rsp], eax

; 1641 :       }

  019fd	e9 d1 fe ff ff	 jmp	 $LN18@hflbfl2dfl
$LN19@hflbfl2dfl:

; 1642 :     }

  01a02	e9 70 fe ff ff	 jmp	 $LN16@hflbfl2dfl
$LN17@hflbfl2dfl:
$LN75@hflbfl2dfl:
$LN60@hflbfl2dfl:

; 1643 :   }
; 1644 : /***************************************************************/
; 1645 : /*   now we get number of digits.                              */
; 1646 : /***************************************************************/
; 1647 :   lzero = getlzerobits(hfl, ARRAYMAX);

  01a07	ba 07 00 00 00	 mov	 edx, 7
  01a0c	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  01a14	e8 00 00 00 00	 call	 getlzerobits
  01a19	89 44 24 6c	 mov	 DWORD PTR lzero$[rsp], eax

; 1648 :   decctr = 0;

  01a1d	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR decctr$[rsp], 0

; 1649 :   memset(binzero, 0x00, sizeof(binzero));

  01a25	48 8d 84 24 40
	1e 00 00	 lea	 rax, QWORD PTR binzero$[rsp]
  01a2d	48 8b f8	 mov	 rdi, rax
  01a30	33 c0		 xor	 eax, eax
  01a32	b9 42 18 00 00	 mov	 ecx, 6210		; 00001842H
  01a37	f3 aa		 rep stosb

; 1650 :   memset(decwork, 0x00, sizeof(decwork));

  01a39	48 8d 84 24 f0
	05 00 00	 lea	 rax, QWORD PTR decwork$[rsp]
  01a41	48 8b f8	 mov	 rdi, rax
  01a44	33 c0		 xor	 eax, eax
  01a46	b9 42 18 00 00	 mov	 ecx, 6210		; 00001842H
  01a4b	f3 aa		 rep stosb
$LN20@hflbfl2dfl:

; 1651 : /***************************************************************/
; 1652 : /*   convert the hex number to an array of decimal digits, one */
; 1653 : /*   digit per byte.  Note that the array is in reverse order, */
; 1654 : /*   with the least significant digit first.                   */
; 1655 : /***************************************************************/
; 1656 :   for (;;)
; 1657 :   {
; 1658 : /***************************************************************/
; 1659 : /*   the remainder of the division below is the next decimal   */
; 1660 : /*   digit.                                                    */
; 1661 : /***************************************************************/
; 1662 :     arraydiv(hfl,10,ARRAYMAX,&rem);

  01a4d	4c 8d 4c 24 50	 lea	 r9, QWORD PTR rem$[rsp]
  01a52	41 b8 07 00 00
	00		 mov	 r8d, 7
  01a58	ba 0a 00 00 00	 mov	 edx, 10
  01a5d	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  01a65	e8 00 00 00 00	 call	 arraydiv

; 1663 :     decwork[decctr] = (BYTE)rem;

  01a6a	48 63 44 24 24	 movsxd	 rax, DWORD PTR decctr$[rsp]
  01a6f	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR rem$[rsp]
  01a74	88 8c 04 f0 05
	00 00		 mov	 BYTE PTR decwork$[rsp+rax], cl

; 1664 :     decctr++;

  01a7b	8b 44 24 24	 mov	 eax, DWORD PTR decctr$[rsp]
  01a7f	ff c0		 inc	 eax
  01a81	89 44 24 24	 mov	 DWORD PTR decctr$[rsp], eax

; 1665 :     if (memcmp(hfl, binzero, ARRAYMAX * 4) == 0)

  01a85	41 b8 1c 00 00
	00		 mov	 r8d, 28
  01a8b	48 8d 94 24 40
	1e 00 00	 lea	 rdx, QWORD PTR binzero$[rsp]
  01a93	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  01a9b	e8 00 00 00 00	 call	 memcmp
  01aa0	85 c0		 test	 eax, eax
  01aa2	75 02		 jne	 SHORT $LN77@hflbfl2dfl

; 1666 :       break;

  01aa4	eb 02		 jmp	 SHORT $LN21@hflbfl2dfl
$LN77@hflbfl2dfl:

; 1667 :   }

  01aa6	eb a5		 jmp	 SHORT $LN20@hflbfl2dfl
$LN21@hflbfl2dfl:

; 1668 :   maxdigits = dflmaxdigit[dflwords];

  01aa8	48 63 84 24 d8
	36 00 00	 movsxd	 rax, DWORD PTR dflwords$[rsp]
  01ab0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dflmaxdigit
  01ab7	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  01aba	89 44 24 70	 mov	 DWORD PTR maxdigits$[rsp], eax

; 1669 : /***************************************************************/
; 1670 : /*   if too many digits, round it and adjust the exponent      */
; 1671 : /***************************************************************/
; 1672 :   if (decctr > maxdigits)

  01abe	8b 44 24 70	 mov	 eax, DWORD PTR maxdigits$[rsp]
  01ac2	39 44 24 24	 cmp	 DWORD PTR decctr$[rsp], eax
  01ac6	0f 8e eb 01 00
	00		 jle	 $LN78@hflbfl2dfl

; 1673 :   {
; 1674 :     delta = decctr - maxdigits;

  01acc	8b 44 24 70	 mov	 eax, DWORD PTR maxdigits$[rsp]
  01ad0	8b 4c 24 24	 mov	 ecx, DWORD PTR decctr$[rsp]
  01ad4	2b c8		 sub	 ecx, eax
  01ad6	8b c1		 mov	 eax, ecx
  01ad8	89 44 24 28	 mov	 DWORD PTR delta$[rsp], eax

; 1675 :     if (memcmp(decwork, binzero, delta) != 0)

  01adc	48 63 44 24 28	 movsxd	 rax, DWORD PTR delta$[rsp]
  01ae1	4c 8b c0	 mov	 r8, rax
  01ae4	48 8d 94 24 40
	1e 00 00	 lea	 rdx, QWORD PTR binzero$[rsp]
  01aec	48 8d 8c 24 f0
	05 00 00	 lea	 rcx, QWORD PTR decwork$[rsp]
  01af4	e8 00 00 00 00	 call	 memcmp
  01af9	85 c0		 test	 eax, eax
  01afb	74 0b		 je	 SHORT $LN79@hflbfl2dfl

; 1676 :       rview = 0;

  01afd	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR rview$[rsp], 0
$LN79@hflbfl2dfl:

; 1677 :     wk1 = (unsigned int)decwork[delta - 1];

  01b08	8b 44 24 28	 mov	 eax, DWORD PTR delta$[rsp]
  01b0c	ff c8		 dec	 eax
  01b0e	48 98		 cdqe
  01b10	0f b6 84 04 f0
	05 00 00	 movzx	 eax, BYTE PTR decwork$[rsp+rax]
  01b18	89 44 24 40	 mov	 DWORD PTR wk1$[rsp], eax

; 1678 :     rem = 0;

  01b1c	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR rem$[rsp], 0

; 1679 :     if (wk1 > 5)

  01b24	83 7c 24 40 05	 cmp	 DWORD PTR wk1$[rsp], 5
  01b29	76 0a		 jbe	 SHORT $LN80@hflbfl2dfl

; 1680 :       rem = 1;

  01b2b	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR rem$[rsp], 1
  01b33	eb 30		 jmp	 SHORT $LN81@hflbfl2dfl
$LN80@hflbfl2dfl:

; 1681 :     else
; 1682 :       if (wk1 == 5)

  01b35	83 7c 24 40 05	 cmp	 DWORD PTR wk1$[rsp], 5
  01b3a	75 29		 jne	 SHORT $LN82@hflbfl2dfl

; 1683 :       {
; 1684 :         if (memcmp(decwork,binzero,delta) != 0)

  01b3c	48 63 44 24 28	 movsxd	 rax, DWORD PTR delta$[rsp]
  01b41	4c 8b c0	 mov	 r8, rax
  01b44	48 8d 94 24 40
	1e 00 00	 lea	 rdx, QWORD PTR binzero$[rsp]
  01b4c	48 8d 8c 24 f0
	05 00 00	 lea	 rcx, QWORD PTR decwork$[rsp]
  01b54	e8 00 00 00 00	 call	 memcmp
  01b59	85 c0		 test	 eax, eax
  01b5b	74 08		 je	 SHORT $LN83@hflbfl2dfl

; 1685 :           rem = 1;

  01b5d	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR rem$[rsp], 1
$LN83@hflbfl2dfl:
$LN82@hflbfl2dfl:
$LN81@hflbfl2dfl:

; 1686 :       }
; 1687 :     if (rem == 1)

  01b65	83 7c 24 50 01	 cmp	 DWORD PTR rem$[rsp], 1
  01b6a	0f 85 a3 00 00
	00		 jne	 $LN84@hflbfl2dfl

; 1688 :     {
; 1689 :       for (i = delta; i < decctr; i++)

  01b70	8b 44 24 28	 mov	 eax, DWORD PTR delta$[rsp]
  01b74	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
  01b78	eb 0a		 jmp	 SHORT $LN25@hflbfl2dfl
$LN23@hflbfl2dfl:
  01b7a	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  01b7e	ff c0		 inc	 eax
  01b80	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN25@hflbfl2dfl:
  01b84	8b 44 24 24	 mov	 eax, DWORD PTR decctr$[rsp]
  01b88	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  01b8c	7d 61		 jge	 SHORT $LN24@hflbfl2dfl

; 1690 :       {
; 1691 :         wk1 = (unsigned int)decwork[i] + 1;

  01b8e	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  01b93	0f b6 84 04 f0
	05 00 00	 movzx	 eax, BYTE PTR decwork$[rsp+rax]
  01b9b	ff c0		 inc	 eax
  01b9d	89 44 24 40	 mov	 DWORD PTR wk1$[rsp], eax

; 1692 :         if (wk1 < 10)

  01ba1	83 7c 24 40 0a	 cmp	 DWORD PTR wk1$[rsp], 10
  01ba6	73 13		 jae	 SHORT $LN85@hflbfl2dfl

; 1693 :         {
; 1694 :           decwork[i] = (BYTE)wk1;

  01ba8	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  01bad	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR wk1$[rsp]
  01bb2	88 8c 04 f0 05
	00 00		 mov	 BYTE PTR decwork$[rsp+rax], cl

; 1695 :           break;

  01bb9	eb 34		 jmp	 SHORT $LN24@hflbfl2dfl
$LN85@hflbfl2dfl:

; 1696 :         }
; 1697 :         decwork[i] = 0x00;

  01bbb	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  01bc0	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR $T1[rsp], rax
  01bc8	48 81 bc 24 c8
	00 00 00 42 18
	00 00		 cmp	 QWORD PTR $T1[rsp], 6210 ; 00001842H
  01bd4	73 02		 jae	 SHORT $LN120@hflbfl2dfl
  01bd6	eb 05		 jmp	 SHORT $LN121@hflbfl2dfl
$LN120@hflbfl2dfl:
  01bd8	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN121@hflbfl2dfl:
  01bdd	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR $T1[rsp]
  01be5	c6 84 04 f0 05
	00 00 00	 mov	 BYTE PTR decwork$[rsp+rax], 0

; 1698 :       }

  01bed	eb 8b		 jmp	 SHORT $LN23@hflbfl2dfl
$LN24@hflbfl2dfl:

; 1699 :       if (i == decctr)

  01bef	8b 44 24 24	 mov	 eax, DWORD PTR decctr$[rsp]
  01bf3	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  01bf7	75 1a		 jne	 SHORT $LN86@hflbfl2dfl

; 1700 :       {
; 1701 :         dexp++;

  01bf9	8b 44 24 2c	 mov	 eax, DWORD PTR dexp$[rsp]
  01bfd	ff c0		 inc	 eax
  01bff	89 44 24 2c	 mov	 DWORD PTR dexp$[rsp], eax

; 1702 :         decwork[decctr - 1] = 0x01;

  01c03	8b 44 24 24	 mov	 eax, DWORD PTR decctr$[rsp]
  01c07	ff c8		 dec	 eax
  01c09	48 98		 cdqe
  01c0b	c6 84 04 f0 05
	00 00 01	 mov	 BYTE PTR decwork$[rsp+rax], 1
$LN86@hflbfl2dfl:
$LN84@hflbfl2dfl:

; 1703 :       }
; 1704 :     }
; 1705 :     for (i = 0;i < maxdigits;i++)

  01c13	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  01c1b	eb 0a		 jmp	 SHORT $LN28@hflbfl2dfl
$LN26@hflbfl2dfl:
  01c1d	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  01c21	ff c0		 inc	 eax
  01c23	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN28@hflbfl2dfl:
  01c27	8b 44 24 70	 mov	 eax, DWORD PTR maxdigits$[rsp]
  01c2b	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  01c2f	7d 24		 jge	 SHORT $LN27@hflbfl2dfl

; 1706 :       decwork[i] = decwork[i + delta];

  01c31	8b 44 24 28	 mov	 eax, DWORD PTR delta$[rsp]
  01c35	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  01c39	03 c8		 add	 ecx, eax
  01c3b	8b c1		 mov	 eax, ecx
  01c3d	48 98		 cdqe
  01c3f	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  01c44	0f b6 84 04 f0
	05 00 00	 movzx	 eax, BYTE PTR decwork$[rsp+rax]
  01c4c	88 84 0c f0 05
	00 00		 mov	 BYTE PTR decwork$[rsp+rcx], al
  01c53	eb c8		 jmp	 SHORT $LN26@hflbfl2dfl
$LN27@hflbfl2dfl:

; 1707 :     for (; i < decctr; i++)

  01c55	eb 0a		 jmp	 SHORT $LN31@hflbfl2dfl
$LN29@hflbfl2dfl:
  01c57	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  01c5b	ff c0		 inc	 eax
  01c5d	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN31@hflbfl2dfl:
  01c61	8b 44 24 24	 mov	 eax, DWORD PTR decctr$[rsp]
  01c65	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  01c69	7d 34		 jge	 SHORT $LN30@hflbfl2dfl

; 1708 :       decwork[i] = 0;

  01c6b	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  01c70	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR $T2[rsp], rax
  01c78	48 81 bc 24 d0
	00 00 00 42 18
	00 00		 cmp	 QWORD PTR $T2[rsp], 6210 ; 00001842H
  01c84	73 02		 jae	 SHORT $LN122@hflbfl2dfl
  01c86	eb 05		 jmp	 SHORT $LN123@hflbfl2dfl
$LN122@hflbfl2dfl:
  01c88	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN123@hflbfl2dfl:
  01c8d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR $T2[rsp]
  01c95	c6 84 04 f0 05
	00 00 00	 mov	 BYTE PTR decwork$[rsp+rax], 0
  01c9d	eb b8		 jmp	 SHORT $LN29@hflbfl2dfl
$LN30@hflbfl2dfl:

; 1709 :     decctr = maxdigits;

  01c9f	8b 44 24 70	 mov	 eax, DWORD PTR maxdigits$[rsp]
  01ca3	89 44 24 24	 mov	 DWORD PTR decctr$[rsp], eax

; 1710 :     dexp += delta;

  01ca7	8b 44 24 28	 mov	 eax, DWORD PTR delta$[rsp]
  01cab	8b 4c 24 2c	 mov	 ecx, DWORD PTR dexp$[rsp]
  01caf	03 c8		 add	 ecx, eax
  01cb1	8b c1		 mov	 eax, ecx
  01cb3	89 44 24 2c	 mov	 DWORD PTR dexp$[rsp], eax
$LN78@hflbfl2dfl:

; 1711 :   }
; 1712 :   /***************************************************************/
; 1713 :   /*   change to right view if we did not need to round.         */
; 1714 :   /***************************************************************/
; 1715 :   if (rview)

  01cb7	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR rview$[rsp], 0
  01cbf	0f 84 23 01 00
	00		 je	 $LN87@hflbfl2dfl

; 1716 :   {
; 1717 :     delta = 0;

  01cc5	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR delta$[rsp], 0

; 1718 :     for (i = 0; i < decctr; i++)

  01ccd	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  01cd5	eb 0a		 jmp	 SHORT $LN34@hflbfl2dfl
$LN32@hflbfl2dfl:
  01cd7	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  01cdb	ff c0		 inc	 eax
  01cdd	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN34@hflbfl2dfl:
  01ce1	8b 44 24 24	 mov	 eax, DWORD PTR decctr$[rsp]
  01ce5	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  01ce9	7d 1f		 jge	 SHORT $LN33@hflbfl2dfl

; 1719 :     {
; 1720 :       if (decwork[i] != 0x00)

  01ceb	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  01cf0	0f b6 84 04 f0
	05 00 00	 movzx	 eax, BYTE PTR decwork$[rsp+rax]
  01cf8	85 c0		 test	 eax, eax
  01cfa	74 02		 je	 SHORT $LN89@hflbfl2dfl

; 1721 :         break;

  01cfc	eb 0c		 jmp	 SHORT $LN33@hflbfl2dfl
$LN89@hflbfl2dfl:

; 1722 :       delta++;

  01cfe	8b 44 24 28	 mov	 eax, DWORD PTR delta$[rsp]
  01d02	ff c0		 inc	 eax
  01d04	89 44 24 28	 mov	 DWORD PTR delta$[rsp], eax

; 1723 :     }

  01d08	eb cd		 jmp	 SHORT $LN32@hflbfl2dfl
$LN33@hflbfl2dfl:

; 1724 :     if (delta > 0)

  01d0a	83 7c 24 28 00	 cmp	 DWORD PTR delta$[rsp], 0
  01d0f	0f 8e d1 00 00
	00		 jle	 $LN90@hflbfl2dfl

; 1725 :     {
; 1726 :       for (i = 0; i < decctr - delta; i++)

  01d15	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  01d1d	eb 0a		 jmp	 SHORT $LN37@hflbfl2dfl
$LN35@hflbfl2dfl:
  01d1f	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  01d23	ff c0		 inc	 eax
  01d25	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN37@hflbfl2dfl:
  01d29	8b 44 24 28	 mov	 eax, DWORD PTR delta$[rsp]
  01d2d	8b 4c 24 24	 mov	 ecx, DWORD PTR decctr$[rsp]
  01d31	2b c8		 sub	 ecx, eax
  01d33	8b c1		 mov	 eax, ecx
  01d35	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  01d39	7d 24		 jge	 SHORT $LN36@hflbfl2dfl

; 1727 :         decwork[i] = decwork[i + delta];

  01d3b	8b 44 24 28	 mov	 eax, DWORD PTR delta$[rsp]
  01d3f	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  01d43	03 c8		 add	 ecx, eax
  01d45	8b c1		 mov	 eax, ecx
  01d47	48 98		 cdqe
  01d49	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  01d4e	0f b6 84 04 f0
	05 00 00	 movzx	 eax, BYTE PTR decwork$[rsp+rax]
  01d56	88 84 0c f0 05
	00 00		 mov	 BYTE PTR decwork$[rsp+rcx], al
  01d5d	eb c0		 jmp	 SHORT $LN35@hflbfl2dfl
$LN36@hflbfl2dfl:

; 1728 :       decwork[i] = 0x00;

  01d5f	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  01d64	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR $T3[rsp], rax
  01d6c	48 81 bc 24 d8
	00 00 00 42 18
	00 00		 cmp	 QWORD PTR $T3[rsp], 6210 ; 00001842H
  01d78	73 02		 jae	 SHORT $LN124@hflbfl2dfl
  01d7a	eb 05		 jmp	 SHORT $LN125@hflbfl2dfl
$LN124@hflbfl2dfl:
  01d7c	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN125@hflbfl2dfl:
  01d81	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR $T3[rsp]
  01d89	c6 84 04 f0 05
	00 00 00	 mov	 BYTE PTR decwork$[rsp+rax], 0

; 1729 :       decwork[i + 1] = 0x00;

  01d91	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  01d95	ff c0		 inc	 eax
  01d97	48 98		 cdqe
  01d99	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR $T4[rsp], rax
  01da1	48 81 bc 24 e0
	00 00 00 42 18
	00 00		 cmp	 QWORD PTR $T4[rsp], 6210 ; 00001842H
  01dad	73 02		 jae	 SHORT $LN126@hflbfl2dfl
  01daf	eb 05		 jmp	 SHORT $LN127@hflbfl2dfl
$LN126@hflbfl2dfl:
  01db1	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN127@hflbfl2dfl:
  01db6	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR $T4[rsp]
  01dbe	c6 84 04 f0 05
	00 00 00	 mov	 BYTE PTR decwork$[rsp+rax], 0

; 1730 :       decctr -= delta;

  01dc6	8b 44 24 28	 mov	 eax, DWORD PTR delta$[rsp]
  01dca	8b 4c 24 24	 mov	 ecx, DWORD PTR decctr$[rsp]
  01dce	2b c8		 sub	 ecx, eax
  01dd0	8b c1		 mov	 eax, ecx
  01dd2	89 44 24 24	 mov	 DWORD PTR decctr$[rsp], eax

; 1731 :       dexp += delta;

  01dd6	8b 44 24 28	 mov	 eax, DWORD PTR delta$[rsp]
  01dda	8b 4c 24 2c	 mov	 ecx, DWORD PTR dexp$[rsp]
  01dde	03 c8		 add	 ecx, eax
  01de0	8b c1		 mov	 eax, ecx
  01de2	89 44 24 2c	 mov	 DWORD PTR dexp$[rsp], eax
$LN90@hflbfl2dfl:

; 1732 :     }
; 1733 :   }

  01de6	eb 18		 jmp	 SHORT $LN88@hflbfl2dfl
$LN87@hflbfl2dfl:

; 1734 :   else
; 1735 :     *fpc |= FPC_FLAG_SFX;

  01de8	48 8b 84 24 f0
	36 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  01df0	8b 00		 mov	 eax, DWORD PTR [rax]
  01df2	0f ba e8 13	 bts	 eax, 19
  01df6	48 8b 8c 24 f0
	36 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  01dfe	89 01		 mov	 DWORD PTR [rcx], eax
$LN88@hflbfl2dfl:

; 1736 :   /***************************************************************/
; 1737 :   /*   figure out the lmd (left most digit)                      */
; 1738 :   /***************************************************************/
; 1739 :   if (decctr < dflmaxdigit[dflwords])

  01e00	48 63 84 24 d8
	36 00 00	 movsxd	 rax, DWORD PTR dflwords$[rsp]
  01e08	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dflmaxdigit
  01e0f	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  01e12	39 44 24 24	 cmp	 DWORD PTR decctr$[rsp], eax
  01e16	7d 0a		 jge	 SHORT $LN91@hflbfl2dfl

; 1740 :     lmd = 0;

  01e18	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR lmd$[rsp], 0
  01e20	eb 53		 jmp	 SHORT $LN92@hflbfl2dfl
$LN91@hflbfl2dfl:

; 1741 :   else
; 1742 :   {
; 1743 :     lmd = (unsigned int)decwork[decctr - 1];

  01e22	8b 44 24 24	 mov	 eax, DWORD PTR decctr$[rsp]
  01e26	ff c8		 dec	 eax
  01e28	48 98		 cdqe
  01e2a	0f b6 84 04 f0
	05 00 00	 movzx	 eax, BYTE PTR decwork$[rsp+rax]
  01e32	89 44 24 78	 mov	 DWORD PTR lmd$[rsp], eax

; 1744 :     decwork[decctr - 1] = 0x00;

  01e36	8b 44 24 24	 mov	 eax, DWORD PTR decctr$[rsp]
  01e3a	ff c8		 dec	 eax
  01e3c	48 98		 cdqe
  01e3e	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR $T5[rsp], rax
  01e46	48 81 bc 24 e8
	00 00 00 42 18
	00 00		 cmp	 QWORD PTR $T5[rsp], 6210 ; 00001842H
  01e52	73 02		 jae	 SHORT $LN128@hflbfl2dfl
  01e54	eb 05		 jmp	 SHORT $LN129@hflbfl2dfl
$LN128@hflbfl2dfl:
  01e56	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN129@hflbfl2dfl:
  01e5b	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR $T5[rsp]
  01e63	c6 84 04 f0 05
	00 00 00	 mov	 BYTE PTR decwork$[rsp+rax], 0

; 1745 :     decctr--;

  01e6b	8b 44 24 24	 mov	 eax, DWORD PTR decctr$[rsp]
  01e6f	ff c8		 dec	 eax
  01e71	89 44 24 24	 mov	 DWORD PTR decctr$[rsp], eax
$LN92@hflbfl2dfl:

; 1746 :   }
; 1747 :   ndpd = decctr / 3;

  01e75	8b 44 24 24	 mov	 eax, DWORD PTR decctr$[rsp]
  01e79	99		 cdq
  01e7a	b9 03 00 00 00	 mov	 ecx, 3
  01e7f	f7 f9		 idiv	 ecx
  01e81	89 84 24 8c 00
	00 00		 mov	 DWORD PTR ndpd$[rsp], eax

; 1748 :   delta = decctr % 3;

  01e88	8b 44 24 24	 mov	 eax, DWORD PTR decctr$[rsp]
  01e8c	99		 cdq
  01e8d	b9 03 00 00 00	 mov	 ecx, 3
  01e92	f7 f9		 idiv	 ecx
  01e94	8b c2		 mov	 eax, edx
  01e96	89 44 24 28	 mov	 DWORD PTR delta$[rsp], eax

; 1749 :   if (delta)

  01e9a	83 7c 24 28 00	 cmp	 DWORD PTR delta$[rsp], 0
  01e9f	74 10		 je	 SHORT $LN93@hflbfl2dfl

; 1750 :     ndpd++;

  01ea1	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR ndpd$[rsp]
  01ea8	ff c0		 inc	 eax
  01eaa	89 84 24 8c 00
	00 00		 mov	 DWORD PTR ndpd$[rsp], eax
$LN93@hflbfl2dfl:

; 1751 :   memset(dec,0x00,sizeof(dec));

  01eb1	48 8d 84 24 58
	01 00 00	 lea	 rax, QWORD PTR dec$[rsp]
  01eb9	48 8b f8	 mov	 rdi, rax
  01ebc	33 c0		 xor	 eax, eax
  01ebe	b9 1c 00 00 00	 mov	 ecx, 28
  01ec3	f3 aa		 rep stosb

; 1752 : /***************************************************************/
; 1753 : /*   convert decimal digits to densely packed decimal          */
; 1754 : /***************************************************************/
; 1755 :   for (ndpdctr = 0;ndpdctr < ndpd;ndpdctr++)

  01ec5	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR ndpdctr$[rsp], 0
  01ecd	eb 0a		 jmp	 SHORT $LN40@hflbfl2dfl
$LN38@hflbfl2dfl:
  01ecf	8b 44 24 54	 mov	 eax, DWORD PTR ndpdctr$[rsp]
  01ed3	ff c0		 inc	 eax
  01ed5	89 44 24 54	 mov	 DWORD PTR ndpdctr$[rsp], eax
$LN40@hflbfl2dfl:
  01ed9	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR ndpd$[rsp]
  01ee0	39 44 24 54	 cmp	 DWORD PTR ndpdctr$[rsp], eax
  01ee4	0f 8d f1 00 00
	00		 jge	 $LN39@hflbfl2dfl

; 1756 :   {
; 1757 :     i = ndpdctr * 3;

  01eea	6b 44 24 54 03	 imul	 eax, DWORD PTR ndpdctr$[rsp], 3
  01eef	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax

; 1758 :     temp1 = (unsigned int)decwork[i];

  01ef3	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  01ef8	0f b6 84 04 f0
	05 00 00	 movzx	 eax, BYTE PTR decwork$[rsp+rax]
  01f00	89 44 24 44	 mov	 DWORD PTR temp1$[rsp], eax

; 1759 :     temp1 += ((unsigned int)decwork[i + 1] * 10);

  01f04	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  01f08	ff c0		 inc	 eax
  01f0a	48 98		 cdqe
  01f0c	0f b6 84 04 f0
	05 00 00	 movzx	 eax, BYTE PTR decwork$[rsp+rax]
  01f14	6b c0 0a	 imul	 eax, eax, 10
  01f17	8b 4c 24 44	 mov	 ecx, DWORD PTR temp1$[rsp]
  01f1b	03 c8		 add	 ecx, eax
  01f1d	8b c1		 mov	 eax, ecx
  01f1f	89 44 24 44	 mov	 DWORD PTR temp1$[rsp], eax

; 1760 :     temp1 += ((unsigned int)decwork[i + 2] * 100);

  01f23	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  01f27	83 c0 02	 add	 eax, 2
  01f2a	48 98		 cdqe
  01f2c	0f b6 84 04 f0
	05 00 00	 movzx	 eax, BYTE PTR decwork$[rsp+rax]
  01f34	6b c0 64	 imul	 eax, eax, 100		; 00000064H
  01f37	8b 4c 24 44	 mov	 ecx, DWORD PTR temp1$[rsp]
  01f3b	03 c8		 add	 ecx, eax
  01f3d	8b c1		 mov	 eax, ecx
  01f3f	89 44 24 44	 mov	 DWORD PTR temp1$[rsp], eax

; 1761 :     temp2 = BIN2DPD[temp1];

  01f43	8b 44 24 44	 mov	 eax, DWORD PTR temp1$[rsp]
  01f47	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:BIN2DPD
  01f4e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  01f52	89 44 24 74	 mov	 DWORD PTR temp2$[rsp], eax

; 1762 :     if (ndpdctr > 0)

  01f56	83 7c 24 54 00	 cmp	 DWORD PTR ndpdctr$[rsp], 0
  01f5b	7e 65		 jle	 SHORT $LN94@hflbfl2dfl

; 1763 :     {
; 1764 :       memset(wrk,0x00,sizeof(wrk));

  01f5d	48 8d 84 24 b0
	05 00 00	 lea	 rax, QWORD PTR wrk$[rsp]
  01f65	48 8b f8	 mov	 rdi, rax
  01f68	33 c0		 xor	 eax, eax
  01f6a	b9 1c 00 00 00	 mov	 ecx, 28
  01f6f	f3 aa		 rep stosb

; 1765 :       wrk[ARRAYMAX - 1] = temp2;

  01f71	b8 04 00 00 00	 mov	 eax, 4
  01f76	48 6b c0 06	 imul	 rax, rax, 6
  01f7a	8b 4c 24 74	 mov	 ecx, DWORD PTR temp2$[rsp]
  01f7e	89 8c 04 b0 05
	00 00		 mov	 DWORD PTR wrk$[rsp+rax], ecx

; 1766 :       arrayshiftleft(wrk,ARRAYMAX,10 * ndpdctr);

  01f85	6b 44 24 54 0a	 imul	 eax, DWORD PTR ndpdctr$[rsp], 10
  01f8a	44 8b c0	 mov	 r8d, eax
  01f8d	ba 07 00 00 00	 mov	 edx, 7
  01f92	48 8d 8c 24 b0
	05 00 00	 lea	 rcx, QWORD PTR wrk$[rsp]
  01f9a	e8 00 00 00 00	 call	 arrayshiftleft

; 1767 :       arrayadd(dec,wrk,ARRAYMAX,ARRAYMAX);

  01f9f	41 b9 07 00 00
	00		 mov	 r9d, 7
  01fa5	41 b8 07 00 00
	00		 mov	 r8d, 7
  01fab	48 8d 94 24 b0
	05 00 00	 lea	 rdx, QWORD PTR wrk$[rsp]
  01fb3	48 8d 8c 24 58
	01 00 00	 lea	 rcx, QWORD PTR dec$[rsp]
  01fbb	e8 00 00 00 00	 call	 arrayadd

; 1768 :     }

  01fc0	eb 14		 jmp	 SHORT $LN95@hflbfl2dfl
$LN94@hflbfl2dfl:

; 1769 :     else
; 1770 :       dec[ARRAYMAX - 1] = temp2;

  01fc2	b8 04 00 00 00	 mov	 eax, 4
  01fc7	48 6b c0 06	 imul	 rax, rax, 6
  01fcb	8b 4c 24 74	 mov	 ecx, DWORD PTR temp2$[rsp]
  01fcf	89 8c 04 58 01
	00 00		 mov	 DWORD PTR dec$[rsp+rax], ecx
$LN95@hflbfl2dfl:

; 1771 :   }

  01fd6	e9 f4 fe ff ff	 jmp	 $LN38@hflbfl2dfl
$LN39@hflbfl2dfl:

; 1772 :   if (!nan)

  01fdb	83 7c 24 64 00	 cmp	 DWORD PTR nan$[rsp], 0
  01fe0	0f 85 54 01 00
	00		 jne	 $LN96@hflbfl2dfl

; 1773 :   {
; 1774 :     /***************************************************************/
; 1775 :     /*   compute the rbe (remaining bytes of exponent)             */
; 1776 :     /***************************************************************/
; 1777 :     dexp += dflexpmax[dflwords];

  01fe6	48 63 84 24 d8
	36 00 00	 movsxd	 rax, DWORD PTR dflwords$[rsp]
  01fee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dflexpmax
  01ff5	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  01ff8	8b 4c 24 2c	 mov	 ecx, DWORD PTR dexp$[rsp]
  01ffc	03 c8		 add	 ecx, eax
  01ffe	8b c1		 mov	 eax, ecx
  02000	89 44 24 2c	 mov	 DWORD PTR dexp$[rsp], eax

; 1778 :     rbe = dexp % dflrbefac[dflwords];

  02004	48 63 84 24 d8
	36 00 00	 movsxd	 rax, DWORD PTR dflwords$[rsp]
  0200c	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv1284[rsp], rax
  02014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dflrbefac
  0201b	8b 44 24 2c	 mov	 eax, DWORD PTR dexp$[rsp]
  0201f	99		 cdq
  02020	48 8b bc 24 18
	01 00 00	 mov	 rdi, QWORD PTR tv1284[rsp]
  02028	f7 3c b9	 idiv	 DWORD PTR [rcx+rdi*4]
  0202b	8b c2		 mov	 eax, edx
  0202d	89 84 24 bc 00
	00 00		 mov	 DWORD PTR rbe$[rsp], eax

; 1779 :     exp1 = dexp / dflrbefac[dflwords];

  02034	48 63 84 24 d8
	36 00 00	 movsxd	 rax, DWORD PTR dflwords$[rsp]
  0203c	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv1288[rsp], rax
  02044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dflrbefac
  0204b	8b 44 24 2c	 mov	 eax, DWORD PTR dexp$[rsp]
  0204f	99		 cdq
  02050	48 8b bc 24 20
	01 00 00	 mov	 rdi, QWORD PTR tv1288[rsp]
  02058	f7 3c b9	 idiv	 DWORD PTR [rcx+rdi*4]
  0205b	89 84 24 90 00
	00 00		 mov	 DWORD PTR exp1$[rsp], eax

; 1780 :     /***************************************************************/
; 1781 :     /*   calcuate the exponent control bits (bits 1-5)             */
; 1782 :     /***************************************************************/
; 1783 :     if (lmd < 8)

  02062	83 7c 24 78 08	 cmp	 DWORD PTR lmd$[rsp], 8
  02067	73 14		 jae	 SHORT $LN97@hflbfl2dfl

; 1784 :       cbits = exp1 * 8 + lmd;

  02069	8b 44 24 78	 mov	 eax, DWORD PTR lmd$[rsp]
  0206d	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR exp1$[rsp]
  02074	8d 04 c8	 lea	 eax, DWORD PTR [rax+rcx*8]
  02077	89 44 24 38	 mov	 DWORD PTR cbits$[rsp], eax
  0207b	eb 27		 jmp	 SHORT $LN98@hflbfl2dfl
$LN97@hflbfl2dfl:

; 1785 :     else
; 1786 :       if (lmd == 8)

  0207d	83 7c 24 78 08	 cmp	 DWORD PTR lmd$[rsp], 8
  02082	75 11		 jne	 SHORT $LN99@hflbfl2dfl

; 1787 :         cbits = 24 + exp1 * 2;

  02084	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR exp1$[rsp]
  0208b	8d 44 00 18	 lea	 eax, DWORD PTR [rax+rax+24]
  0208f	89 44 24 38	 mov	 DWORD PTR cbits$[rsp], eax
  02093	eb 0f		 jmp	 SHORT $LN100@hflbfl2dfl
$LN99@hflbfl2dfl:

; 1788 :       else
; 1789 :         cbits = 24 + exp1 * 2 + 1;

  02095	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR exp1$[rsp]
  0209c	8d 44 00 19	 lea	 eax, DWORD PTR [rax+rax+25]
  020a0	89 44 24 38	 mov	 DWORD PTR cbits$[rsp], eax
$LN100@hflbfl2dfl:
$LN98@hflbfl2dfl:

; 1790 :     if (neg)

  020a4	83 7c 24 4c 00	 cmp	 DWORD PTR neg$[rsp], 0
  020a9	74 0b		 je	 SHORT $LN101@hflbfl2dfl

; 1791 :       cbits += 64;

  020ab	8b 44 24 38	 mov	 eax, DWORD PTR cbits$[rsp]
  020af	83 c0 40	 add	 eax, 64			; 00000040H
  020b2	89 44 24 38	 mov	 DWORD PTR cbits$[rsp], eax
$LN101@hflbfl2dfl:

; 1792 :     /***************************************************************/
; 1793 :     /*   put it all together to form the exponent                  */
; 1794 :     /***************************************************************/
; 1795 :     expword = rbe + (cbits << dflrbebits[dflwords]);

  020b6	48 63 84 24 d8
	36 00 00	 movsxd	 rax, DWORD PTR dflwords$[rsp]
  020be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dflrbebits
  020c5	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  020c8	0f b6 c8	 movzx	 ecx, al
  020cb	8b 44 24 38	 mov	 eax, DWORD PTR cbits$[rsp]
  020cf	d3 e0		 shl	 eax, cl
  020d1	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR rbe$[rsp]
  020d8	03 c8		 add	 ecx, eax
  020da	8b c1		 mov	 eax, ecx
  020dc	89 84 24 94 00
	00 00		 mov	 DWORD PTR expword$[rsp], eax

; 1796 :     /***************************************************************/
; 1797 :     /*   shift it and merge in.                                    */
; 1798 :     /***************************************************************/
; 1799 :     expword = expword << dflsigbits[dflwords];

  020e3	48 63 84 24 d8
	36 00 00	 movsxd	 rax, DWORD PTR dflwords$[rsp]
  020eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dflsigbits
  020f2	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  020f5	0f b6 c8	 movzx	 ecx, al
  020f8	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR expword$[rsp]
  020ff	d3 e0		 shl	 eax, cl
  02101	89 84 24 94 00
	00 00		 mov	 DWORD PTR expword$[rsp], eax

; 1800 :     dec[ARRAYMAX - dflwords] += expword;

  02108	b8 07 00 00 00	 mov	 eax, 7
  0210d	2b 84 24 d8 36
	00 00		 sub	 eax, DWORD PTR dflwords$[rsp]
  02114	48 98		 cdqe
  02116	8b 84 84 58 01
	00 00		 mov	 eax, DWORD PTR dec$[rsp+rax*4]
  0211d	03 84 24 94 00
	00 00		 add	 eax, DWORD PTR expword$[rsp]
  02124	b9 07 00 00 00	 mov	 ecx, 7
  02129	2b 8c 24 d8 36
	00 00		 sub	 ecx, DWORD PTR dflwords$[rsp]
  02130	48 63 c9	 movsxd	 rcx, ecx
  02133	89 84 8c 58 01
	00 00		 mov	 DWORD PTR dec$[rsp+rcx*4], eax
$LN96@hflbfl2dfl:

; 1801 :   }
; 1802 :   switch (dflwords)

  0213a	8b 84 24 d8 36
	00 00		 mov	 eax, DWORD PTR dflwords$[rsp]
  02141	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv1321[rsp], eax
  02148	83 bc 24 98 00
	00 00 01	 cmp	 DWORD PTR tv1321[rsp], 1
  02150	74 19		 je	 SHORT $LN102@hflbfl2dfl
  02152	83 bc 24 98 00
	00 00 02	 cmp	 DWORD PTR tv1321[rsp], 2
  0215a	74 38		 je	 SHORT $LN103@hflbfl2dfl
  0215c	83 bc 24 98 00
	00 00 04	 cmp	 DWORD PTR tv1321[rsp], 4
  02164	74 7b		 je	 SHORT $LN104@hflbfl2dfl
  02166	e9 06 01 00 00	 jmp	 $LN41@hflbfl2dfl
$LN102@hflbfl2dfl:

; 1803 :   {
; 1804 :   case 1:
; 1805 :     dfltab[0] = dec[ARRAYMAX - 1];

  0216b	b8 04 00 00 00	 mov	 eax, 4
  02170	48 6b c0 06	 imul	 rax, rax, 6
  02174	b9 04 00 00 00	 mov	 ecx, 4
  02179	48 6b c9 00	 imul	 rcx, rcx, 0
  0217d	48 8b 94 24 c8
	36 00 00	 mov	 rdx, QWORD PTR dfltab$[rsp]
  02185	8b 84 04 58 01
	00 00		 mov	 eax, DWORD PTR dec$[rsp+rax]
  0218c	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1806 :     break;

  0218f	e9 dd 00 00 00	 jmp	 $LN41@hflbfl2dfl
$LN103@hflbfl2dfl:

; 1807 :   case 2:
; 1808 :     dfltab[0] = dec[ARRAYMAX - 2];

  02194	b8 04 00 00 00	 mov	 eax, 4
  02199	48 6b c0 05	 imul	 rax, rax, 5
  0219d	b9 04 00 00 00	 mov	 ecx, 4
  021a2	48 6b c9 00	 imul	 rcx, rcx, 0
  021a6	48 8b 94 24 c8
	36 00 00	 mov	 rdx, QWORD PTR dfltab$[rsp]
  021ae	8b 84 04 58 01
	00 00		 mov	 eax, DWORD PTR dec$[rsp+rax]
  021b5	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1809 :     dfltab[1] = dec[ARRAYMAX - 1];

  021b8	b8 04 00 00 00	 mov	 eax, 4
  021bd	48 6b c0 06	 imul	 rax, rax, 6
  021c1	b9 04 00 00 00	 mov	 ecx, 4
  021c6	48 6b c9 01	 imul	 rcx, rcx, 1
  021ca	48 8b 94 24 c8
	36 00 00	 mov	 rdx, QWORD PTR dfltab$[rsp]
  021d2	8b 84 04 58 01
	00 00		 mov	 eax, DWORD PTR dec$[rsp+rax]
  021d9	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1810 :     break;

  021dc	e9 90 00 00 00	 jmp	 $LN41@hflbfl2dfl
$LN104@hflbfl2dfl:

; 1811 :   case 4:
; 1812 :     dfltab[0] = dec[ARRAYMAX - 4];

  021e1	b8 04 00 00 00	 mov	 eax, 4
  021e6	48 6b c0 03	 imul	 rax, rax, 3
  021ea	b9 04 00 00 00	 mov	 ecx, 4
  021ef	48 6b c9 00	 imul	 rcx, rcx, 0
  021f3	48 8b 94 24 c8
	36 00 00	 mov	 rdx, QWORD PTR dfltab$[rsp]
  021fb	8b 84 04 58 01
	00 00		 mov	 eax, DWORD PTR dec$[rsp+rax]
  02202	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1813 :     dfltab[1] = dec[ARRAYMAX - 3];

  02205	b8 04 00 00 00	 mov	 eax, 4
  0220a	48 6b c0 04	 imul	 rax, rax, 4
  0220e	b9 04 00 00 00	 mov	 ecx, 4
  02213	48 6b c9 01	 imul	 rcx, rcx, 1
  02217	48 8b 94 24 c8
	36 00 00	 mov	 rdx, QWORD PTR dfltab$[rsp]
  0221f	8b 84 04 58 01
	00 00		 mov	 eax, DWORD PTR dec$[rsp+rax]
  02226	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1814 :     dfltab[2] = dec[ARRAYMAX - 2];

  02229	b8 04 00 00 00	 mov	 eax, 4
  0222e	48 6b c0 05	 imul	 rax, rax, 5
  02232	b9 04 00 00 00	 mov	 ecx, 4
  02237	48 6b c9 02	 imul	 rcx, rcx, 2
  0223b	48 8b 94 24 c8
	36 00 00	 mov	 rdx, QWORD PTR dfltab$[rsp]
  02243	8b 84 04 58 01
	00 00		 mov	 eax, DWORD PTR dec$[rsp+rax]
  0224a	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1815 :     dfltab[3] = dec[ARRAYMAX - 1];

  0224d	b8 04 00 00 00	 mov	 eax, 4
  02252	48 6b c0 06	 imul	 rax, rax, 6
  02256	b9 04 00 00 00	 mov	 ecx, 4
  0225b	48 6b c9 03	 imul	 rcx, rcx, 3
  0225f	48 8b 94 24 c8
	36 00 00	 mov	 rdx, QWORD PTR dfltab$[rsp]
  02267	8b 84 04 58 01
	00 00		 mov	 eax, DWORD PTR dec$[rsp+rax]
  0226e	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax
$LN41@hflbfl2dfl:

; 1816 :     break;
; 1817 :   }
; 1818 :   if (nan)

  02271	83 7c 24 64 00	 cmp	 DWORD PTR nan$[rsp], 0
  02276	74 60		 je	 SHORT $LN105@hflbfl2dfl

; 1819 :   {
; 1820 :     dfltab[0] |= 0x7c000000;

  02278	b8 04 00 00 00	 mov	 eax, 4
  0227d	48 6b c0 00	 imul	 rax, rax, 0
  02281	48 8b 8c 24 c8
	36 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  02289	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0228c	0d 00 00 00 7c	 or	 eax, 2080374784		; 7c000000H
  02291	b9 04 00 00 00	 mov	 ecx, 4
  02296	48 6b c9 00	 imul	 rcx, rcx, 0
  0229a	48 8b 94 24 c8
	36 00 00	 mov	 rdx, QWORD PTR dfltab$[rsp]
  022a2	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1821 :     if (neg)

  022a5	83 7c 24 4c 00	 cmp	 DWORD PTR neg$[rsp], 0
  022aa	74 2c		 je	 SHORT $LN106@hflbfl2dfl

; 1822 :       dfltab[0] |= 0x80000000;

  022ac	b8 04 00 00 00	 mov	 eax, 4
  022b1	48 6b c0 00	 imul	 rax, rax, 0
  022b5	48 8b 8c 24 c8
	36 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  022bd	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  022c0	0f ba e8 1f	 bts	 eax, 31
  022c4	b9 04 00 00 00	 mov	 ecx, 4
  022c9	48 6b c9 00	 imul	 rcx, rcx, 0
  022cd	48 8b 94 24 c8
	36 00 00	 mov	 rdx, QWORD PTR dfltab$[rsp]
  022d5	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax
$LN106@hflbfl2dfl:
$LN105@hflbfl2dfl:

; 1823 :   }
; 1824 :   return cc;

  022d8	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR cc$[rsp]
$LN1@hflbfl2dfl:
$LN107@hflbfl2dfl:

; 1825 : }

  022df	48 8b 8c 24 90
	36 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  022e7	48 33 cc	 xor	 rcx, rsp
  022ea	e8 00 00 00 00	 call	 __security_check_cookie
  022ef	48 81 c4 a8 36
	00 00		 add	 rsp, 13992		; 000036a8H
  022f6	5f		 pop	 rdi
  022f7	5e		 pop	 rsi
  022f8	c3		 ret	 0
hflbfl2dfl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\pfpo.c
_TEXT	SEGMENT
shiftamt$ = 64
i$ = 68
bexp$ = 72
hexp$ = 76
temp1$ = 80
lzero$ = 84
exp$ = 88
rx$ = 92
rem$ = 96
wk1$ = 100
k$ = 104
neg$ = 108
expbits$ = 112
temp2$ = 116
roundrule$ = 120
pidx$ = 124
rbit$ = 128
expword$ = 132
nan$ = 136
mid$ = 140
maxdigit$ = 144
expword2$ = 148
power10$ = 152
numbits$ = 156
bitctr$ = 160
lzerohex$ = 164
cc$ = 168
ndpd$ = 172
lmd$ = 176
ndigit$ = 180
maxbits$ = 184
tv90 = 188
tv765 = 192
tv794 = 196
decnum$ = 200
fac10$ = 204
tv946 = 208
shiftstd$ = 212
exact$ = 216
tbits$ = 220
tv870 = 224
tv1064 = 228
tv1076 = 232
delta$ = 236
tradix$ = 240
tv740 = 248
tv757 = 256
tv915 = 264
wk$ = 272
hfl$ = 280
remtab$ = 312
dec$ = 344
power10tab$ = 376
bittab1$ = 416
wrk$ = 1440
binzero$ = 1472
decwork$ = 1504
__$ArrayPad$ = 7728
dfltab$ = 7760
hfltab$ = 7768
dflwords$ = 7776
hflwords$ = 7784
optbits$ = 7792
binflg$ = 7800
fpc$ = 7808
dfl2hflbfl PROC

; 825  : {

$LN129:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	b8 40 1e 00 00	 mov	 eax, 7744		; 00001e40H
  0001a	e8 00 00 00 00	 call	 __chkstk
  0001f	48 2b e0	 sub	 rsp, rax
  00022	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00029	48 33 c4	 xor	 rax, rsp
  0002c	48 89 84 24 30
	1e 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 826  :   int i;
; 827  :   unsigned int dec[ARRAYMAX];
; 828  :   unsigned int hfl[ARRAYMAX];
; 829  :   int k;
; 830  :   unsigned int wrk[ARRAYMAX];
; 831  :   unsigned int remtab[ARRAYMAX];
; 832  :   BYTE decwork[6210];
; 833  :   unsigned int rem;
; 834  :   BYTE binzero[ARRAYMAX * sizeof(int)];
; 835  :   long long wk;
; 836  :   int decnum;
; 837  :   int cc = 0;

  00034	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR cc$[rsp], 0

; 838  :   int roundrule;
; 839  :   int hexp;
; 840  :   int rx;
; 841  :   int rbit;
; 842  :   int ndigit;
; 843  :   int maxdigit = 0;

  0003f	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR maxdigit$[rsp], 0

; 844  :   int maxbits;
; 845  :   int numbits;
; 846  :   int expword2 = 0;

  0004a	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR expword2$[rsp], 0

; 847  :   int shiftamt;
; 848  :   int shiftstd;
; 849  :   int bitctr;
; 850  :   int ndpd;
; 851  :   int fac10;
; 852  :   int neg = 0;

  00055	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR neg$[rsp], 0

; 853  :   int exact = 1;

  0005d	c7 84 24 d8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR exact$[rsp], 1

; 854  :   int exp;
; 855  :   int bexp;
; 856  :   int delta;
; 857  :   int expword = 0;

  00068	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR expword$[rsp], 0

; 858  :   //  the following table is used to reverse the bits in a byte.  This is needed
; 859  :   //  for nan processing
; 860  :   unsigned int bittab1[256] = {

  00073	c7 84 24 a0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR bittab1$[rsp], 0
  0007e	c7 84 24 a4 01
	00 00 80 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+4], 128 ; 00000080H
  00089	c7 84 24 a8 01
	00 00 40 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+8], 64 ; 00000040H
  00094	c7 84 24 ac 01
	00 00 c0 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+12], 192 ; 000000c0H
  0009f	c7 84 24 b0 01
	00 00 20 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+16], 32 ; 00000020H
  000aa	c7 84 24 b4 01
	00 00 a0 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+20], 160 ; 000000a0H
  000b5	c7 84 24 b8 01
	00 00 60 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+24], 96 ; 00000060H
  000c0	c7 84 24 bc 01
	00 00 e0 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+28], 224 ; 000000e0H
  000cb	c7 84 24 c0 01
	00 00 10 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+32], 16
  000d6	c7 84 24 c4 01
	00 00 90 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+36], 144 ; 00000090H
  000e1	c7 84 24 c8 01
	00 00 50 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+40], 80 ; 00000050H
  000ec	c7 84 24 cc 01
	00 00 d0 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+44], 208 ; 000000d0H
  000f7	c7 84 24 d0 01
	00 00 30 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+48], 48 ; 00000030H
  00102	c7 84 24 d4 01
	00 00 b0 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+52], 176 ; 000000b0H
  0010d	c7 84 24 d8 01
	00 00 70 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+56], 112 ; 00000070H
  00118	c7 84 24 dc 01
	00 00 f0 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+60], 240 ; 000000f0H
  00123	c7 84 24 e0 01
	00 00 08 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+64], 8
  0012e	c7 84 24 e4 01
	00 00 88 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+68], 136 ; 00000088H
  00139	c7 84 24 e8 01
	00 00 48 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+72], 72 ; 00000048H
  00144	c7 84 24 ec 01
	00 00 c8 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+76], 200 ; 000000c8H
  0014f	c7 84 24 f0 01
	00 00 28 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+80], 40 ; 00000028H
  0015a	c7 84 24 f4 01
	00 00 a8 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+84], 168 ; 000000a8H
  00165	c7 84 24 f8 01
	00 00 68 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+88], 104 ; 00000068H
  00170	c7 84 24 fc 01
	00 00 e8 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+92], 232 ; 000000e8H
  0017b	c7 84 24 00 02
	00 00 18 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+96], 24
  00186	c7 84 24 04 02
	00 00 98 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+100], 152 ; 00000098H
  00191	c7 84 24 08 02
	00 00 58 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+104], 88 ; 00000058H
  0019c	c7 84 24 0c 02
	00 00 d8 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+108], 216 ; 000000d8H
  001a7	c7 84 24 10 02
	00 00 38 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+112], 56 ; 00000038H
  001b2	c7 84 24 14 02
	00 00 b8 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+116], 184 ; 000000b8H
  001bd	c7 84 24 18 02
	00 00 78 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+120], 120 ; 00000078H
  001c8	c7 84 24 1c 02
	00 00 f8 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+124], 248 ; 000000f8H
  001d3	c7 84 24 20 02
	00 00 04 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+128], 4
  001de	c7 84 24 24 02
	00 00 84 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+132], 132 ; 00000084H
  001e9	c7 84 24 28 02
	00 00 44 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+136], 68 ; 00000044H
  001f4	c7 84 24 2c 02
	00 00 c4 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+140], 196 ; 000000c4H
  001ff	c7 84 24 30 02
	00 00 24 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+144], 36 ; 00000024H
  0020a	c7 84 24 34 02
	00 00 a4 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+148], 164 ; 000000a4H
  00215	c7 84 24 38 02
	00 00 64 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+152], 100 ; 00000064H
  00220	c7 84 24 3c 02
	00 00 e4 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+156], 228 ; 000000e4H
  0022b	c7 84 24 40 02
	00 00 14 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+160], 20
  00236	c7 84 24 44 02
	00 00 94 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+164], 148 ; 00000094H
  00241	c7 84 24 48 02
	00 00 54 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+168], 84 ; 00000054H
  0024c	c7 84 24 4c 02
	00 00 d4 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+172], 212 ; 000000d4H
  00257	c7 84 24 50 02
	00 00 34 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+176], 52 ; 00000034H
  00262	c7 84 24 54 02
	00 00 b4 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+180], 180 ; 000000b4H
  0026d	c7 84 24 58 02
	00 00 74 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+184], 116 ; 00000074H
  00278	c7 84 24 5c 02
	00 00 f4 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+188], 244 ; 000000f4H
  00283	c7 84 24 60 02
	00 00 0c 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+192], 12
  0028e	c7 84 24 64 02
	00 00 8c 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+196], 140 ; 0000008cH
  00299	c7 84 24 68 02
	00 00 4c 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+200], 76 ; 0000004cH
  002a4	c7 84 24 6c 02
	00 00 cc 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+204], 204 ; 000000ccH
  002af	c7 84 24 70 02
	00 00 2c 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+208], 44 ; 0000002cH
  002ba	c7 84 24 74 02
	00 00 ac 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+212], 172 ; 000000acH
  002c5	c7 84 24 78 02
	00 00 6c 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+216], 108 ; 0000006cH
  002d0	c7 84 24 7c 02
	00 00 ec 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+220], 236 ; 000000ecH
  002db	c7 84 24 80 02
	00 00 1c 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+224], 28
  002e6	c7 84 24 84 02
	00 00 9c 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+228], 156 ; 0000009cH
  002f1	c7 84 24 88 02
	00 00 5c 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+232], 92 ; 0000005cH
  002fc	c7 84 24 8c 02
	00 00 dc 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+236], 220 ; 000000dcH
  00307	c7 84 24 90 02
	00 00 3c 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+240], 60 ; 0000003cH
  00312	c7 84 24 94 02
	00 00 bc 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+244], 188 ; 000000bcH
  0031d	c7 84 24 98 02
	00 00 7c 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+248], 124 ; 0000007cH
  00328	c7 84 24 9c 02
	00 00 fc 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+252], 252 ; 000000fcH
  00333	c7 84 24 a0 02
	00 00 02 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+256], 2
  0033e	c7 84 24 a4 02
	00 00 82 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+260], 130 ; 00000082H
  00349	c7 84 24 a8 02
	00 00 42 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+264], 66 ; 00000042H
  00354	c7 84 24 ac 02
	00 00 c2 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+268], 194 ; 000000c2H
  0035f	c7 84 24 b0 02
	00 00 22 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+272], 34 ; 00000022H
  0036a	c7 84 24 b4 02
	00 00 a2 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+276], 162 ; 000000a2H
  00375	c7 84 24 b8 02
	00 00 62 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+280], 98 ; 00000062H
  00380	c7 84 24 bc 02
	00 00 e2 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+284], 226 ; 000000e2H
  0038b	c7 84 24 c0 02
	00 00 12 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+288], 18
  00396	c7 84 24 c4 02
	00 00 92 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+292], 146 ; 00000092H
  003a1	c7 84 24 c8 02
	00 00 52 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+296], 82 ; 00000052H
  003ac	c7 84 24 cc 02
	00 00 d2 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+300], 210 ; 000000d2H
  003b7	c7 84 24 d0 02
	00 00 32 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+304], 50 ; 00000032H
  003c2	c7 84 24 d4 02
	00 00 b2 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+308], 178 ; 000000b2H
  003cd	c7 84 24 d8 02
	00 00 72 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+312], 114 ; 00000072H
  003d8	c7 84 24 dc 02
	00 00 f2 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+316], 242 ; 000000f2H
  003e3	c7 84 24 e0 02
	00 00 0a 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+320], 10
  003ee	c7 84 24 e4 02
	00 00 8a 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+324], 138 ; 0000008aH
  003f9	c7 84 24 e8 02
	00 00 4a 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+328], 74 ; 0000004aH
  00404	c7 84 24 ec 02
	00 00 ca 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+332], 202 ; 000000caH
  0040f	c7 84 24 f0 02
	00 00 2a 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+336], 42 ; 0000002aH
  0041a	c7 84 24 f4 02
	00 00 aa 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+340], 170 ; 000000aaH
  00425	c7 84 24 f8 02
	00 00 6a 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+344], 106 ; 0000006aH
  00430	c7 84 24 fc 02
	00 00 ea 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+348], 234 ; 000000eaH
  0043b	c7 84 24 00 03
	00 00 1a 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+352], 26
  00446	c7 84 24 04 03
	00 00 9a 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+356], 154 ; 0000009aH
  00451	c7 84 24 08 03
	00 00 5a 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+360], 90 ; 0000005aH
  0045c	c7 84 24 0c 03
	00 00 da 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+364], 218 ; 000000daH
  00467	c7 84 24 10 03
	00 00 3a 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+368], 58 ; 0000003aH
  00472	c7 84 24 14 03
	00 00 ba 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+372], 186 ; 000000baH
  0047d	c7 84 24 18 03
	00 00 7a 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+376], 122 ; 0000007aH
  00488	c7 84 24 1c 03
	00 00 fa 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+380], 250 ; 000000faH
  00493	c7 84 24 20 03
	00 00 06 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+384], 6
  0049e	c7 84 24 24 03
	00 00 86 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+388], 134 ; 00000086H
  004a9	c7 84 24 28 03
	00 00 46 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+392], 70 ; 00000046H
  004b4	c7 84 24 2c 03
	00 00 c6 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+396], 198 ; 000000c6H
  004bf	c7 84 24 30 03
	00 00 26 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+400], 38 ; 00000026H
  004ca	c7 84 24 34 03
	00 00 a6 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+404], 166 ; 000000a6H
  004d5	c7 84 24 38 03
	00 00 66 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+408], 102 ; 00000066H
  004e0	c7 84 24 3c 03
	00 00 e6 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+412], 230 ; 000000e6H
  004eb	c7 84 24 40 03
	00 00 16 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+416], 22
  004f6	c7 84 24 44 03
	00 00 96 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+420], 150 ; 00000096H
  00501	c7 84 24 48 03
	00 00 56 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+424], 86 ; 00000056H
  0050c	c7 84 24 4c 03
	00 00 d6 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+428], 214 ; 000000d6H
  00517	c7 84 24 50 03
	00 00 36 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+432], 54 ; 00000036H
  00522	c7 84 24 54 03
	00 00 b6 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+436], 182 ; 000000b6H
  0052d	c7 84 24 58 03
	00 00 76 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+440], 118 ; 00000076H
  00538	c7 84 24 5c 03
	00 00 f6 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+444], 246 ; 000000f6H
  00543	c7 84 24 60 03
	00 00 0e 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+448], 14
  0054e	c7 84 24 64 03
	00 00 8e 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+452], 142 ; 0000008eH
  00559	c7 84 24 68 03
	00 00 4e 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+456], 78 ; 0000004eH
  00564	c7 84 24 6c 03
	00 00 ce 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+460], 206 ; 000000ceH
  0056f	c7 84 24 70 03
	00 00 2e 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+464], 46 ; 0000002eH
  0057a	c7 84 24 74 03
	00 00 ae 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+468], 174 ; 000000aeH
  00585	c7 84 24 78 03
	00 00 6e 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+472], 110 ; 0000006eH
  00590	c7 84 24 7c 03
	00 00 ee 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+476], 238 ; 000000eeH
  0059b	c7 84 24 80 03
	00 00 1e 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+480], 30
  005a6	c7 84 24 84 03
	00 00 9e 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+484], 158 ; 0000009eH
  005b1	c7 84 24 88 03
	00 00 5e 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+488], 94 ; 0000005eH
  005bc	c7 84 24 8c 03
	00 00 de 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+492], 222 ; 000000deH
  005c7	c7 84 24 90 03
	00 00 3e 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+496], 62 ; 0000003eH
  005d2	c7 84 24 94 03
	00 00 be 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+500], 190 ; 000000beH
  005dd	c7 84 24 98 03
	00 00 7e 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+504], 126 ; 0000007eH
  005e8	c7 84 24 9c 03
	00 00 fe 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+508], 254 ; 000000feH
  005f3	c7 84 24 a0 03
	00 00 01 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+512], 1
  005fe	c7 84 24 a4 03
	00 00 81 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+516], 129 ; 00000081H
  00609	c7 84 24 a8 03
	00 00 41 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+520], 65 ; 00000041H
  00614	c7 84 24 ac 03
	00 00 c1 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+524], 193 ; 000000c1H
  0061f	c7 84 24 b0 03
	00 00 21 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+528], 33 ; 00000021H
  0062a	c7 84 24 b4 03
	00 00 a1 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+532], 161 ; 000000a1H
  00635	c7 84 24 b8 03
	00 00 61 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+536], 97 ; 00000061H
  00640	c7 84 24 bc 03
	00 00 e1 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+540], 225 ; 000000e1H
  0064b	c7 84 24 c0 03
	00 00 11 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+544], 17
  00656	c7 84 24 c4 03
	00 00 91 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+548], 145 ; 00000091H
  00661	c7 84 24 c8 03
	00 00 51 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+552], 81 ; 00000051H
  0066c	c7 84 24 cc 03
	00 00 d1 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+556], 209 ; 000000d1H
  00677	c7 84 24 d0 03
	00 00 31 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+560], 49 ; 00000031H
  00682	c7 84 24 d4 03
	00 00 b1 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+564], 177 ; 000000b1H
  0068d	c7 84 24 d8 03
	00 00 71 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+568], 113 ; 00000071H
  00698	c7 84 24 dc 03
	00 00 f1 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+572], 241 ; 000000f1H
  006a3	c7 84 24 e0 03
	00 00 09 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+576], 9
  006ae	c7 84 24 e4 03
	00 00 89 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+580], 137 ; 00000089H
  006b9	c7 84 24 e8 03
	00 00 49 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+584], 73 ; 00000049H
  006c4	c7 84 24 ec 03
	00 00 c9 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+588], 201 ; 000000c9H
  006cf	c7 84 24 f0 03
	00 00 29 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+592], 41 ; 00000029H
  006da	c7 84 24 f4 03
	00 00 a9 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+596], 169 ; 000000a9H
  006e5	c7 84 24 f8 03
	00 00 69 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+600], 105 ; 00000069H
  006f0	c7 84 24 fc 03
	00 00 e9 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+604], 233 ; 000000e9H
  006fb	c7 84 24 00 04
	00 00 19 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+608], 25
  00706	c7 84 24 04 04
	00 00 99 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+612], 153 ; 00000099H
  00711	c7 84 24 08 04
	00 00 59 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+616], 89 ; 00000059H
  0071c	c7 84 24 0c 04
	00 00 d9 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+620], 217 ; 000000d9H
  00727	c7 84 24 10 04
	00 00 39 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+624], 57 ; 00000039H
  00732	c7 84 24 14 04
	00 00 b9 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+628], 185 ; 000000b9H
  0073d	c7 84 24 18 04
	00 00 79 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+632], 121 ; 00000079H
  00748	c7 84 24 1c 04
	00 00 f9 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+636], 249 ; 000000f9H
  00753	c7 84 24 20 04
	00 00 05 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+640], 5
  0075e	c7 84 24 24 04
	00 00 85 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+644], 133 ; 00000085H
  00769	c7 84 24 28 04
	00 00 45 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+648], 69 ; 00000045H
  00774	c7 84 24 2c 04
	00 00 c5 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+652], 197 ; 000000c5H
  0077f	c7 84 24 30 04
	00 00 25 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+656], 37 ; 00000025H
  0078a	c7 84 24 34 04
	00 00 a5 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+660], 165 ; 000000a5H
  00795	c7 84 24 38 04
	00 00 65 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+664], 101 ; 00000065H
  007a0	c7 84 24 3c 04
	00 00 e5 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+668], 229 ; 000000e5H
  007ab	c7 84 24 40 04
	00 00 15 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+672], 21
  007b6	c7 84 24 44 04
	00 00 95 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+676], 149 ; 00000095H
  007c1	c7 84 24 48 04
	00 00 55 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+680], 85 ; 00000055H
  007cc	c7 84 24 4c 04
	00 00 d5 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+684], 213 ; 000000d5H
  007d7	c7 84 24 50 04
	00 00 35 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+688], 53 ; 00000035H
  007e2	c7 84 24 54 04
	00 00 b5 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+692], 181 ; 000000b5H
  007ed	c7 84 24 58 04
	00 00 75 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+696], 117 ; 00000075H
  007f8	c7 84 24 5c 04
	00 00 f5 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+700], 245 ; 000000f5H
  00803	c7 84 24 60 04
	00 00 0d 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+704], 13
  0080e	c7 84 24 64 04
	00 00 8d 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+708], 141 ; 0000008dH
  00819	c7 84 24 68 04
	00 00 4d 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+712], 77 ; 0000004dH
  00824	c7 84 24 6c 04
	00 00 cd 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+716], 205 ; 000000cdH
  0082f	c7 84 24 70 04
	00 00 2d 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+720], 45 ; 0000002dH
  0083a	c7 84 24 74 04
	00 00 ad 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+724], 173 ; 000000adH
  00845	c7 84 24 78 04
	00 00 6d 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+728], 109 ; 0000006dH
  00850	c7 84 24 7c 04
	00 00 ed 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+732], 237 ; 000000edH
  0085b	c7 84 24 80 04
	00 00 1d 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+736], 29
  00866	c7 84 24 84 04
	00 00 9d 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+740], 157 ; 0000009dH
  00871	c7 84 24 88 04
	00 00 5d 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+744], 93 ; 0000005dH
  0087c	c7 84 24 8c 04
	00 00 dd 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+748], 221 ; 000000ddH
  00887	c7 84 24 90 04
	00 00 3d 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+752], 61 ; 0000003dH
  00892	c7 84 24 94 04
	00 00 bd 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+756], 189 ; 000000bdH
  0089d	c7 84 24 98 04
	00 00 7d 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+760], 125 ; 0000007dH
  008a8	c7 84 24 9c 04
	00 00 fd 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+764], 253 ; 000000fdH
  008b3	c7 84 24 a0 04
	00 00 03 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+768], 3
  008be	c7 84 24 a4 04
	00 00 83 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+772], 131 ; 00000083H
  008c9	c7 84 24 a8 04
	00 00 43 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+776], 67 ; 00000043H
  008d4	c7 84 24 ac 04
	00 00 c3 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+780], 195 ; 000000c3H
  008df	c7 84 24 b0 04
	00 00 23 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+784], 35 ; 00000023H
  008ea	c7 84 24 b4 04
	00 00 a3 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+788], 163 ; 000000a3H
  008f5	c7 84 24 b8 04
	00 00 63 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+792], 99 ; 00000063H
  00900	c7 84 24 bc 04
	00 00 e3 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+796], 227 ; 000000e3H
  0090b	c7 84 24 c0 04
	00 00 13 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+800], 19
  00916	c7 84 24 c4 04
	00 00 93 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+804], 147 ; 00000093H
  00921	c7 84 24 c8 04
	00 00 53 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+808], 83 ; 00000053H
  0092c	c7 84 24 cc 04
	00 00 d3 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+812], 211 ; 000000d3H
  00937	c7 84 24 d0 04
	00 00 33 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+816], 51 ; 00000033H
  00942	c7 84 24 d4 04
	00 00 b3 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+820], 179 ; 000000b3H
  0094d	c7 84 24 d8 04
	00 00 73 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+824], 115 ; 00000073H
  00958	c7 84 24 dc 04
	00 00 f3 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+828], 243 ; 000000f3H
  00963	c7 84 24 e0 04
	00 00 0b 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+832], 11
  0096e	c7 84 24 e4 04
	00 00 8b 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+836], 139 ; 0000008bH
  00979	c7 84 24 e8 04
	00 00 4b 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+840], 75 ; 0000004bH
  00984	c7 84 24 ec 04
	00 00 cb 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+844], 203 ; 000000cbH
  0098f	c7 84 24 f0 04
	00 00 2b 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+848], 43 ; 0000002bH
  0099a	c7 84 24 f4 04
	00 00 ab 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+852], 171 ; 000000abH
  009a5	c7 84 24 f8 04
	00 00 6b 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+856], 107 ; 0000006bH
  009b0	c7 84 24 fc 04
	00 00 eb 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+860], 235 ; 000000ebH
  009bb	c7 84 24 00 05
	00 00 1b 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+864], 27
  009c6	c7 84 24 04 05
	00 00 9b 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+868], 155 ; 0000009bH
  009d1	c7 84 24 08 05
	00 00 5b 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+872], 91 ; 0000005bH
  009dc	c7 84 24 0c 05
	00 00 db 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+876], 219 ; 000000dbH
  009e7	c7 84 24 10 05
	00 00 3b 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+880], 59 ; 0000003bH
  009f2	c7 84 24 14 05
	00 00 bb 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+884], 187 ; 000000bbH
  009fd	c7 84 24 18 05
	00 00 7b 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+888], 123 ; 0000007bH
  00a08	c7 84 24 1c 05
	00 00 fb 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+892], 251 ; 000000fbH
  00a13	c7 84 24 20 05
	00 00 07 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+896], 7
  00a1e	c7 84 24 24 05
	00 00 87 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+900], 135 ; 00000087H
  00a29	c7 84 24 28 05
	00 00 47 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+904], 71 ; 00000047H
  00a34	c7 84 24 2c 05
	00 00 c7 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+908], 199 ; 000000c7H
  00a3f	c7 84 24 30 05
	00 00 27 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+912], 39 ; 00000027H
  00a4a	c7 84 24 34 05
	00 00 a7 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+916], 167 ; 000000a7H
  00a55	c7 84 24 38 05
	00 00 67 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+920], 103 ; 00000067H
  00a60	c7 84 24 3c 05
	00 00 e7 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+924], 231 ; 000000e7H
  00a6b	c7 84 24 40 05
	00 00 17 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+928], 23
  00a76	c7 84 24 44 05
	00 00 97 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+932], 151 ; 00000097H
  00a81	c7 84 24 48 05
	00 00 57 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+936], 87 ; 00000057H
  00a8c	c7 84 24 4c 05
	00 00 d7 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+940], 215 ; 000000d7H
  00a97	c7 84 24 50 05
	00 00 37 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+944], 55 ; 00000037H
  00aa2	c7 84 24 54 05
	00 00 b7 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+948], 183 ; 000000b7H
  00aad	c7 84 24 58 05
	00 00 77 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+952], 119 ; 00000077H
  00ab8	c7 84 24 5c 05
	00 00 f7 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+956], 247 ; 000000f7H
  00ac3	c7 84 24 60 05
	00 00 0f 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+960], 15
  00ace	c7 84 24 64 05
	00 00 8f 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+964], 143 ; 0000008fH
  00ad9	c7 84 24 68 05
	00 00 4f 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+968], 79 ; 0000004fH
  00ae4	c7 84 24 6c 05
	00 00 cf 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+972], 207 ; 000000cfH
  00aef	c7 84 24 70 05
	00 00 2f 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+976], 47 ; 0000002fH
  00afa	c7 84 24 74 05
	00 00 af 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+980], 175 ; 000000afH
  00b05	c7 84 24 78 05
	00 00 6f 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+984], 111 ; 0000006fH
  00b10	c7 84 24 7c 05
	00 00 ef 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+988], 239 ; 000000efH
  00b1b	c7 84 24 80 05
	00 00 1f 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+992], 31
  00b26	c7 84 24 84 05
	00 00 9f 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+996], 159 ; 0000009fH
  00b31	c7 84 24 88 05
	00 00 5f 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+1000], 95 ; 0000005fH
  00b3c	c7 84 24 8c 05
	00 00 df 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+1004], 223 ; 000000dfH
  00b47	c7 84 24 90 05
	00 00 3f 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+1008], 63 ; 0000003fH
  00b52	c7 84 24 94 05
	00 00 bf 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+1012], 191 ; 000000bfH
  00b5d	c7 84 24 98 05
	00 00 7f 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+1016], 127 ; 0000007fH
  00b68	c7 84 24 9c 05
	00 00 ff 00 00
	00		 mov	 DWORD PTR bittab1$[rsp+1020], 255 ; 000000ffH

; 861  :     0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0, 0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,
; 862  :     0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8, 0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8,
; 863  :     0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4, 0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,
; 864  :     0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec, 0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc,
; 865  :     0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2, 0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2,
; 866  :     0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea, 0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,
; 867  :     0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6, 0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6,
; 868  :     0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee, 0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe,
; 869  :     0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1, 0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,
; 870  :     0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9, 0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9,
; 871  :     0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5, 0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5,
; 872  :     0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed, 0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,
; 873  :     0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3, 0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,
; 874  :     0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb, 0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,
; 875  :     0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7, 0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,
; 876  :     0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef, 0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff };
; 877  :   int power10tab[8] = { 1,10,100,1000,10000,100000,1000000, 10000000 };

  00b73	c7 84 24 78 01
	00 00 01 00 00
	00		 mov	 DWORD PTR power10tab$[rsp], 1
  00b7e	c7 84 24 7c 01
	00 00 0a 00 00
	00		 mov	 DWORD PTR power10tab$[rsp+4], 10
  00b89	c7 84 24 80 01
	00 00 64 00 00
	00		 mov	 DWORD PTR power10tab$[rsp+8], 100 ; 00000064H
  00b94	c7 84 24 84 01
	00 00 e8 03 00
	00		 mov	 DWORD PTR power10tab$[rsp+12], 1000 ; 000003e8H
  00b9f	c7 84 24 88 01
	00 00 10 27 00
	00		 mov	 DWORD PTR power10tab$[rsp+16], 10000 ; 00002710H
  00baa	c7 84 24 8c 01
	00 00 a0 86 01
	00		 mov	 DWORD PTR power10tab$[rsp+20], 100000 ; 000186a0H
  00bb5	c7 84 24 90 01
	00 00 40 42 0f
	00		 mov	 DWORD PTR power10tab$[rsp+24], 1000000 ; 000f4240H
  00bc0	c7 84 24 94 01
	00 00 80 96 98
	00		 mov	 DWORD PTR power10tab$[rsp+28], 10000000 ; 00989680H

; 878  :   int power10;
; 879  :   int pidx;
; 880  :   unsigned int wk1;
; 881  :   int lmd;
; 882  :   unsigned int temp1;
; 883  :   unsigned int temp2;
; 884  :   int nan = 0;

  00bcb	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR nan$[rsp], 0

; 885  :   int tbits;
; 886  :   int expbits;
; 887  :   int lzero = 0;

  00bd6	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR lzero$[rsp], 0

; 888  :   int lzerohex;
; 889  :   int mid;
; 890  :   int tradix;
; 891  :   memset(binzero, 0x00, sizeof(binzero));

  00bde	48 8d 84 24 c0
	05 00 00	 lea	 rax, QWORD PTR binzero$[rsp]
  00be6	48 8b f8	 mov	 rdi, rax
  00be9	33 c0		 xor	 eax, eax
  00beb	b9 1c 00 00 00	 mov	 ecx, 28
  00bf0	f3 aa		 rep stosb

; 892  :   temp1 = (int) GR0_RM( optbits );

  00bf2	0f b6 84 24 70
	1e 00 00	 movzx	 eax, BYTE PTR optbits$[rsp]
  00bfa	83 e0 0f	 and	 eax, 15
  00bfd	89 44 24 50	 mov	 DWORD PTR temp1$[rsp], eax

; 893  :   if (temp1 == 0)

  00c01	83 7c 24 50 00	 cmp	 DWORD PTR temp1$[rsp], 0
  00c06	75 16		 jne	 SHORT $LN34@dfl2hflbfl

; 894  :     roundrule = (*fpc & FPC_DRM) >> 4;

  00c08	48 8b 84 24 80
	1e 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  00c10	8b 00		 mov	 eax, DWORD PTR [rax]
  00c12	83 e0 70	 and	 eax, 112		; 00000070H
  00c15	c1 f8 04	 sar	 eax, 4
  00c18	89 44 24 78	 mov	 DWORD PTR roundrule$[rsp], eax
  00c1c	eb 25		 jmp	 SHORT $LN35@dfl2hflbfl
$LN34@dfl2hflbfl:

; 895  :   else
; 896  :     if (temp1 == 1)

  00c1e	83 7c 24 50 01	 cmp	 DWORD PTR temp1$[rsp], 1
  00c23	75 13		 jne	 SHORT $LN36@dfl2hflbfl

; 897  :       roundrule = (*fpc & FPC_BRM_3BIT);

  00c25	48 8b 84 24 80
	1e 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  00c2d	8b 00		 mov	 eax, DWORD PTR [rax]
  00c2f	83 e0 07	 and	 eax, 7
  00c32	89 44 24 78	 mov	 DWORD PTR roundrule$[rsp], eax
  00c36	eb 0b		 jmp	 SHORT $LN37@dfl2hflbfl
$LN36@dfl2hflbfl:

; 898  :     else
; 899  :       roundrule = temp1 - 8;

  00c38	8b 44 24 50	 mov	 eax, DWORD PTR temp1$[rsp]
  00c3c	83 e8 08	 sub	 eax, 8
  00c3f	89 44 24 78	 mov	 DWORD PTR roundrule$[rsp], eax
$LN37@dfl2hflbfl:
$LN35@dfl2hflbfl:

; 900  :   tradix = (int)((optbits & 0x30) >> 4);

  00c43	0f b6 84 24 70
	1e 00 00	 movzx	 eax, BYTE PTR optbits$[rsp]
  00c4b	83 e0 30	 and	 eax, 48			; 00000030H
  00c4e	c1 f8 04	 sar	 eax, 4
  00c51	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tradix$[rsp], eax

; 901  :   if (binflg && tradix)

  00c58	83 bc 24 78 1e
	00 00 00	 cmp	 DWORD PTR binflg$[rsp], 0
  00c60	74 21		 je	 SHORT $LN38@dfl2hflbfl
  00c62	83 bc 24 f0 00
	00 00 00	 cmp	 DWORD PTR tradix$[rsp], 0
  00c6a	74 17		 je	 SHORT $LN38@dfl2hflbfl

; 902  :   {
; 903  :     cc = -1;

  00c6c	c7 84 24 a8 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR cc$[rsp], -1

; 904  :     return cc;

  00c77	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR cc$[rsp]
  00c7e	e9 a5 1c 00 00	 jmp	 $LN1@dfl2hflbfl
$LN38@dfl2hflbfl:

; 905  :   }
; 906  :   wk1 = dfltab[0];

  00c83	b8 04 00 00 00	 mov	 eax, 4
  00c88	48 6b c0 00	 imul	 rax, rax, 0
  00c8c	48 8b 8c 24 50
	1e 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  00c94	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00c97	89 44 24 64	 mov	 DWORD PTR wk1$[rsp], eax

; 907  :   wk1 = (wk1 << 1) >> 1;

  00c9b	8b 44 24 64	 mov	 eax, DWORD PTR wk1$[rsp]
  00c9f	d1 e0		 shl	 eax, 1
  00ca1	d1 e8		 shr	 eax, 1
  00ca3	89 44 24 64	 mov	 DWORD PTR wk1$[rsp], eax

; 908  :   if (wk1 != dfltab[0])

  00ca7	b8 04 00 00 00	 mov	 eax, 4
  00cac	48 6b c0 00	 imul	 rax, rax, 0
  00cb0	48 8b 8c 24 50
	1e 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  00cb8	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00cbb	39 44 24 64	 cmp	 DWORD PTR wk1$[rsp], eax
  00cbf	74 08		 je	 SHORT $LN39@dfl2hflbfl

; 909  :     neg = 1;

  00cc1	c7 44 24 6c 01
	00 00 00	 mov	 DWORD PTR neg$[rsp], 1
$LN39@dfl2hflbfl:

; 910  :   dfltab[0] = wk1;

  00cc9	b8 04 00 00 00	 mov	 eax, 4
  00cce	48 6b c0 00	 imul	 rax, rax, 0
  00cd2	48 8b 8c 24 50
	1e 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  00cda	8b 54 24 64	 mov	 edx, DWORD PTR wk1$[rsp]
  00cde	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 911  :   memset(dec,0x00,sizeof(dec));

  00ce1	48 8d 84 24 58
	01 00 00	 lea	 rax, QWORD PTR dec$[rsp]
  00ce9	48 8b f8	 mov	 rdi, rax
  00cec	33 c0		 xor	 eax, eax
  00cee	b9 1c 00 00 00	 mov	 ecx, 28
  00cf3	f3 aa		 rep stosb

; 912  : /***************************************************************/
; 913  : /*   extract the exponent portion based on the precision and   */
; 914  : /*   then clear that portion from the number.                  */
; 915  : /***************************************************************/
; 916  :   switch (dflwords)

  00cf5	8b 84 24 60 1e
	00 00		 mov	 eax, DWORD PTR dflwords$[rsp]
  00cfc	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv90[rsp], eax
  00d03	83 bc 24 bc 00
	00 00 01	 cmp	 DWORD PTR tv90[rsp], 1
  00d0b	74 1d		 je	 SHORT $LN40@dfl2hflbfl
  00d0d	83 bc 24 bc 00
	00 00 02	 cmp	 DWORD PTR tv90[rsp], 2
  00d15	74 70		 je	 SHORT $LN41@dfl2hflbfl
  00d17	83 bc 24 bc 00
	00 00 04	 cmp	 DWORD PTR tv90[rsp], 4
  00d1f	0f 84 e3 00 00
	00		 je	 $LN42@dfl2hflbfl
  00d25	e9 a2 01 00 00	 jmp	 $LN2@dfl2hflbfl
$LN40@dfl2hflbfl:

; 917  :   {
; 918  :   case 1:
; 919  :     expword = dfltab[0] >> 20;;

  00d2a	b8 04 00 00 00	 mov	 eax, 4
  00d2f	48 6b c0 00	 imul	 rax, rax, 0
  00d33	48 8b 8c 24 50
	1e 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  00d3b	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00d3e	c1 e8 14	 shr	 eax, 20
  00d41	89 84 24 84 00
	00 00		 mov	 DWORD PTR expword$[rsp], eax

; 920  :     expword2 = expword >> 4;

  00d48	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR expword$[rsp]
  00d4f	c1 f8 04	 sar	 eax, 4
  00d52	89 84 24 94 00
	00 00		 mov	 DWORD PTR expword2$[rsp], eax

; 921  :     dec[ARRAYMAX - 1] = dfltab[0] & 0x000fffff;

  00d59	b8 04 00 00 00	 mov	 eax, 4
  00d5e	48 6b c0 00	 imul	 rax, rax, 0
  00d62	48 8b 8c 24 50
	1e 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  00d6a	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00d6d	25 ff ff 0f 00	 and	 eax, 1048575		; 000fffffH
  00d72	b9 04 00 00 00	 mov	 ecx, 4
  00d77	48 6b c9 06	 imul	 rcx, rcx, 6
  00d7b	89 84 0c 58 01
	00 00		 mov	 DWORD PTR dec$[rsp+rcx], eax

; 922  :     break;

  00d82	e9 45 01 00 00	 jmp	 $LN2@dfl2hflbfl
$LN41@dfl2hflbfl:

; 923  :   case 2:
; 924  :     expword = dfltab[0] >> 18;

  00d87	b8 04 00 00 00	 mov	 eax, 4
  00d8c	48 6b c0 00	 imul	 rax, rax, 0
  00d90	48 8b 8c 24 50
	1e 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  00d98	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00d9b	c1 e8 12	 shr	 eax, 18
  00d9e	89 84 24 84 00
	00 00		 mov	 DWORD PTR expword$[rsp], eax

; 925  :     dec[ARRAYMAX - 2] = dfltab[0] & 0x0003ffff;

  00da5	b8 04 00 00 00	 mov	 eax, 4
  00daa	48 6b c0 00	 imul	 rax, rax, 0
  00dae	48 8b 8c 24 50
	1e 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  00db6	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00db9	25 ff ff 03 00	 and	 eax, 262143		; 0003ffffH
  00dbe	b9 04 00 00 00	 mov	 ecx, 4
  00dc3	48 6b c9 05	 imul	 rcx, rcx, 5
  00dc7	89 84 0c 58 01
	00 00		 mov	 DWORD PTR dec$[rsp+rcx], eax

; 926  :     dec[ARRAYMAX - 1] = dfltab[1];

  00dce	b8 04 00 00 00	 mov	 eax, 4
  00dd3	48 6b c0 01	 imul	 rax, rax, 1
  00dd7	b9 04 00 00 00	 mov	 ecx, 4
  00ddc	48 6b c9 06	 imul	 rcx, rcx, 6
  00de0	48 8b 94 24 50
	1e 00 00	 mov	 rdx, QWORD PTR dfltab$[rsp]
  00de8	8b 04 02	 mov	 eax, DWORD PTR [rdx+rax]
  00deb	89 84 0c 58 01
	00 00		 mov	 DWORD PTR dec$[rsp+rcx], eax

; 927  :     expword2 = expword >> 6;

  00df2	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR expword$[rsp]
  00df9	c1 f8 06	 sar	 eax, 6
  00dfc	89 84 24 94 00
	00 00		 mov	 DWORD PTR expword2$[rsp], eax

; 928  :     break;

  00e03	e9 c4 00 00 00	 jmp	 $LN2@dfl2hflbfl
$LN42@dfl2hflbfl:

; 929  :   case 4:
; 930  :     expword = dfltab[0] >> 14;

  00e08	b8 04 00 00 00	 mov	 eax, 4
  00e0d	48 6b c0 00	 imul	 rax, rax, 0
  00e11	48 8b 8c 24 50
	1e 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  00e19	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00e1c	c1 e8 0e	 shr	 eax, 14
  00e1f	89 84 24 84 00
	00 00		 mov	 DWORD PTR expword$[rsp], eax

; 931  :     dec[ARRAYMAX - 4] = dfltab[0] & 0x00003fff;

  00e26	b8 04 00 00 00	 mov	 eax, 4
  00e2b	48 6b c0 00	 imul	 rax, rax, 0
  00e2f	48 8b 8c 24 50
	1e 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  00e37	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00e3a	25 ff 3f 00 00	 and	 eax, 16383		; 00003fffH
  00e3f	b9 04 00 00 00	 mov	 ecx, 4
  00e44	48 6b c9 03	 imul	 rcx, rcx, 3
  00e48	89 84 0c 58 01
	00 00		 mov	 DWORD PTR dec$[rsp+rcx], eax

; 932  :     dec[ARRAYMAX - 3] = dfltab[1];

  00e4f	b8 04 00 00 00	 mov	 eax, 4
  00e54	48 6b c0 01	 imul	 rax, rax, 1
  00e58	b9 04 00 00 00	 mov	 ecx, 4
  00e5d	48 6b c9 04	 imul	 rcx, rcx, 4
  00e61	48 8b 94 24 50
	1e 00 00	 mov	 rdx, QWORD PTR dfltab$[rsp]
  00e69	8b 04 02	 mov	 eax, DWORD PTR [rdx+rax]
  00e6c	89 84 0c 58 01
	00 00		 mov	 DWORD PTR dec$[rsp+rcx], eax

; 933  :     dec[ARRAYMAX - 2] = dfltab[2];

  00e73	b8 04 00 00 00	 mov	 eax, 4
  00e78	48 6b c0 02	 imul	 rax, rax, 2
  00e7c	b9 04 00 00 00	 mov	 ecx, 4
  00e81	48 6b c9 05	 imul	 rcx, rcx, 5
  00e85	48 8b 94 24 50
	1e 00 00	 mov	 rdx, QWORD PTR dfltab$[rsp]
  00e8d	8b 04 02	 mov	 eax, DWORD PTR [rdx+rax]
  00e90	89 84 0c 58 01
	00 00		 mov	 DWORD PTR dec$[rsp+rcx], eax

; 934  :     dec[ARRAYMAX - 1] = dfltab[3];

  00e97	b8 04 00 00 00	 mov	 eax, 4
  00e9c	48 6b c0 03	 imul	 rax, rax, 3
  00ea0	b9 04 00 00 00	 mov	 ecx, 4
  00ea5	48 6b c9 06	 imul	 rcx, rcx, 6
  00ea9	48 8b 94 24 50
	1e 00 00	 mov	 rdx, QWORD PTR dfltab$[rsp]
  00eb1	8b 04 02	 mov	 eax, DWORD PTR [rdx+rax]
  00eb4	89 84 0c 58 01
	00 00		 mov	 DWORD PTR dec$[rsp+rcx], eax

; 935  :     expword2 = expword >> 10;

  00ebb	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR expword$[rsp]
  00ec2	c1 f8 0a	 sar	 eax, 10
  00ec5	89 84 24 94 00
	00 00		 mov	 DWORD PTR expword2$[rsp], eax
$LN2@dfl2hflbfl:

; 936  :     break;
; 937  :   }
; 938  :   if (expword2 == 0x78)

  00ecc	83 bc 24 94 00
	00 00 78	 cmp	 DWORD PTR expword2$[rsp], 120 ; 00000078H
  00ed4	0f 85 28 01 00
	00		 jne	 $LN43@dfl2hflbfl

; 939  :   {
; 940  :     if (binflg)

  00eda	83 bc 24 78 1e
	00 00 00	 cmp	 DWORD PTR binflg$[rsp], 0
  00ee2	74 6f		 je	 SHORT $LN44@dfl2hflbfl

; 941  :     {
; 942  :       bexp = bflexpmax[hflwords];

  00ee4	48 63 84 24 68
	1e 00 00	 movsxd	 rax, DWORD PTR hflwords$[rsp]
  00eec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bflexpmax
  00ef3	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00ef6	89 44 24 48	 mov	 DWORD PTR bexp$[rsp], eax

; 943  :       memset(hfltab, 0x00, 16);

  00efa	48 8b bc 24 58
	1e 00 00	 mov	 rdi, QWORD PTR hfltab$[rsp]
  00f02	33 c0		 xor	 eax, eax
  00f04	b9 10 00 00 00	 mov	 ecx, 16
  00f09	f3 aa		 rep stosb

; 944  :       expbits = bflexpbits[hflwords];

  00f0b	48 63 84 24 68
	1e 00 00	 movsxd	 rax, DWORD PTR hflwords$[rsp]
  00f13	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bflexpbits
  00f1a	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00f1d	89 44 24 70	 mov	 DWORD PTR expbits$[rsp], eax

; 945  :       hfltab[0] = bexp << (32 - expbits);

  00f21	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00f26	2b 44 24 70	 sub	 eax, DWORD PTR expbits$[rsp]
  00f2a	0f b6 c8	 movzx	 ecx, al
  00f2d	8b 44 24 48	 mov	 eax, DWORD PTR bexp$[rsp]
  00f31	d3 e0		 shl	 eax, cl
  00f33	b9 04 00 00 00	 mov	 ecx, 4
  00f38	48 6b c9 00	 imul	 rcx, rcx, 0
  00f3c	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  00f44	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 946  :       return 0;

  00f47	33 c0		 xor	 eax, eax
  00f49	e9 da 19 00 00	 jmp	 $LN1@dfl2hflbfl

; 947  :     }

  00f4e	e9 af 00 00 00	 jmp	 $LN45@dfl2hflbfl
$LN44@dfl2hflbfl:

; 948  :     else
; 949  :     {
; 950  :       if (*fpc & 0x80) // (invalid reserved bit that must be zero?)

  00f53	48 8b 84 24 80
	1e 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  00f5b	8b 00		 mov	 eax, DWORD PTR [rax]
  00f5d	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00f62	85 c0		 test	 eax, eax
  00f64	74 3b		 je	 SHORT $LN46@dfl2hflbfl

; 951  :       {
; 952  :         *fpc &= ~FPC_DXC;

  00f66	48 8b 84 24 80
	1e 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  00f6e	8b 00		 mov	 eax, DWORD PTR [rax]
  00f70	25 ff 00 ff ff	 and	 eax, -65281		; ffffffffffff00ffH
  00f75	48 8b 8c 24 80
	1e 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  00f7d	89 01		 mov	 DWORD PTR [rcx], eax

; 953  :         *fpc |= DXC_IEEE_INVALID_OP << FPC_DXC_SHIFT;

  00f7f	48 8b 84 24 80
	1e 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  00f87	8b 00		 mov	 eax, DWORD PTR [rax]
  00f89	0f ba e8 0f	 bts	 eax, 15
  00f8d	48 8b 8c 24 80
	1e 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  00f95	89 01		 mov	 DWORD PTR [rcx], eax

; 954  :         return -7;

  00f97	b8 f9 ff ff ff	 mov	 eax, -7
  00f9c	e9 87 19 00 00	 jmp	 $LN1@dfl2hflbfl
$LN46@dfl2hflbfl:

; 955  :       }
; 956  :       memset(hfltab, 0xff, 4 * hflwords);

  00fa1	8b 84 24 68 1e
	00 00		 mov	 eax, DWORD PTR hflwords$[rsp]
  00fa8	c1 e0 02	 shl	 eax, 2
  00fab	48 98		 cdqe
  00fad	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv740[rsp], rax
  00fb5	48 8b bc 24 58
	1e 00 00	 mov	 rdi, QWORD PTR hfltab$[rsp]
  00fbd	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00fc2	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv740[rsp]
  00fca	f3 aa		 rep stosb

; 957  :       hfltab[0] &= 0x7fffffff;

  00fcc	b8 04 00 00 00	 mov	 eax, 4
  00fd1	48 6b c0 00	 imul	 rax, rax, 0
  00fd5	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  00fdd	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00fe0	0f ba f0 1f	 btr	 eax, 31
  00fe4	b9 04 00 00 00	 mov	 ecx, 4
  00fe9	48 6b c9 00	 imul	 rcx, rcx, 0
  00fed	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  00ff5	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 958  :       return 2;

  00ff8	b8 02 00 00 00	 mov	 eax, 2
  00ffd	e9 26 19 00 00	 jmp	 $LN1@dfl2hflbfl
$LN45@dfl2hflbfl:
$LN43@dfl2hflbfl:

; 959  :     }
; 960  :   }
; 961  :   if (expword2 == 0x7c)

  01002	83 bc 24 94 00
	00 00 7c	 cmp	 DWORD PTR expword2$[rsp], 124 ; 0000007cH
  0100a	0f 85 fc 02 00
	00		 jne	 $LN47@dfl2hflbfl

; 962  :   {
; 963  :     nan = 1;

  01010	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR nan$[rsp], 1

; 964  :     if (binflg == 0)

  0101b	83 bc 24 78 1e
	00 00 00	 cmp	 DWORD PTR binflg$[rsp], 0
  01023	0f 85 af 00 00
	00		 jne	 $LN48@dfl2hflbfl

; 965  :     {
; 966  :       if (*fpc & 0x80) // (invalid reserved bit that must be zero?)

  01029	48 8b 84 24 80
	1e 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  01031	8b 00		 mov	 eax, DWORD PTR [rax]
  01033	25 80 00 00 00	 and	 eax, 128		; 00000080H
  01038	85 c0		 test	 eax, eax
  0103a	74 3b		 je	 SHORT $LN49@dfl2hflbfl

; 967  :       {
; 968  :         *fpc &= ~FPC_DXC;

  0103c	48 8b 84 24 80
	1e 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  01044	8b 00		 mov	 eax, DWORD PTR [rax]
  01046	25 ff 00 ff ff	 and	 eax, -65281		; ffffffffffff00ffH
  0104b	48 8b 8c 24 80
	1e 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  01053	89 01		 mov	 DWORD PTR [rcx], eax

; 969  :         *fpc |= DXC_IEEE_INVALID_OP << FPC_DXC_SHIFT;

  01055	48 8b 84 24 80
	1e 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  0105d	8b 00		 mov	 eax, DWORD PTR [rax]
  0105f	0f ba e8 0f	 bts	 eax, 15
  01063	48 8b 8c 24 80
	1e 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  0106b	89 01		 mov	 DWORD PTR [rcx], eax

; 970  :         return -7;

  0106d	b8 f9 ff ff ff	 mov	 eax, -7
  01072	e9 b1 18 00 00	 jmp	 $LN1@dfl2hflbfl
$LN49@dfl2hflbfl:

; 971  :       }
; 972  :       memset(hfltab, 0xff, 4 * hflwords);

  01077	8b 84 24 68 1e
	00 00		 mov	 eax, DWORD PTR hflwords$[rsp]
  0107e	c1 e0 02	 shl	 eax, 2
  01081	48 98		 cdqe
  01083	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv757[rsp], rax
  0108b	48 8b bc 24 58
	1e 00 00	 mov	 rdi, QWORD PTR hfltab$[rsp]
  01093	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  01098	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv757[rsp]
  010a0	f3 aa		 rep stosb

; 973  :       hfltab[0] &= 0x7fffffff;

  010a2	b8 04 00 00 00	 mov	 eax, 4
  010a7	48 6b c0 00	 imul	 rax, rax, 0
  010ab	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  010b3	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  010b6	0f ba f0 1f	 btr	 eax, 31
  010ba	b9 04 00 00 00	 mov	 ecx, 4
  010bf	48 6b c9 00	 imul	 rcx, rcx, 0
  010c3	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  010cb	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 974  :       return 2;

  010ce	b8 02 00 00 00	 mov	 eax, 2
  010d3	e9 50 18 00 00	 jmp	 $LN1@dfl2hflbfl
$LN48@dfl2hflbfl:

; 975  :     }
; 976  :     switch (dflwords)

  010d8	8b 84 24 60 1e
	00 00		 mov	 eax, DWORD PTR dflwords$[rsp]
  010df	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv765[rsp], eax
  010e6	83 bc 24 c0 00
	00 00 01	 cmp	 DWORD PTR tv765[rsp], 1
  010ee	74 19		 je	 SHORT $LN50@dfl2hflbfl
  010f0	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR tv765[rsp], 2
  010f8	74 3c		 je	 SHORT $LN52@dfl2hflbfl
  010fa	83 bc 24 c0 00
	00 00 04	 cmp	 DWORD PTR tv765[rsp], 4
  01102	74 73		 je	 SHORT $LN54@dfl2hflbfl
  01104	e9 db 00 00 00	 jmp	 $LN4@dfl2hflbfl
$LN50@dfl2hflbfl:

; 977  :     {
; 978  :     case 1:
; 979  :       if ((dfltab[0] & 0x00ffffff) == 0)

  01109	b8 04 00 00 00	 mov	 eax, 4
  0110e	48 6b c0 00	 imul	 rax, rax, 0
  01112	48 8b 8c 24 50
	1e 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  0111a	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0111d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01122	85 c0		 test	 eax, eax
  01124	75 0b		 jne	 SHORT $LN51@dfl2hflbfl

; 980  :         nan = 2;

  01126	c7 84 24 88 00
	00 00 02 00 00
	00		 mov	 DWORD PTR nan$[rsp], 2
$LN51@dfl2hflbfl:

; 981  :       break;

  01131	e9 ae 00 00 00	 jmp	 $LN4@dfl2hflbfl
$LN52@dfl2hflbfl:

; 982  :     case 2:
; 983  :       if ((dfltab[0] & 0x00ffffff) == 0 && dfltab[1] == 0)

  01136	b8 04 00 00 00	 mov	 eax, 4
  0113b	48 6b c0 00	 imul	 rax, rax, 0
  0113f	48 8b 8c 24 50
	1e 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  01147	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0114a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0114f	85 c0		 test	 eax, eax
  01151	75 22		 jne	 SHORT $LN53@dfl2hflbfl
  01153	b8 04 00 00 00	 mov	 eax, 4
  01158	48 6b c0 01	 imul	 rax, rax, 1
  0115c	48 8b 8c 24 50
	1e 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  01164	83 3c 01 00	 cmp	 DWORD PTR [rcx+rax], 0
  01168	75 0b		 jne	 SHORT $LN53@dfl2hflbfl

; 984  :         nan = 2;

  0116a	c7 84 24 88 00
	00 00 02 00 00
	00		 mov	 DWORD PTR nan$[rsp], 2
$LN53@dfl2hflbfl:

; 985  :       break;

  01175	eb 6d		 jmp	 SHORT $LN4@dfl2hflbfl
$LN54@dfl2hflbfl:

; 986  :     case 4:
; 987  :       if ((dfltab[0] & 0x00ffffff) == 0 && dfltab[1] == 0 &&
; 988  :         dfltab[2] == 0 && dfltab[3] == 0)

  01177	b8 04 00 00 00	 mov	 eax, 4
  0117c	48 6b c0 00	 imul	 rax, rax, 0
  01180	48 8b 8c 24 50
	1e 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  01188	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0118b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01190	85 c0		 test	 eax, eax
  01192	75 50		 jne	 SHORT $LN55@dfl2hflbfl
  01194	b8 04 00 00 00	 mov	 eax, 4
  01199	48 6b c0 01	 imul	 rax, rax, 1
  0119d	48 8b 8c 24 50
	1e 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  011a5	83 3c 01 00	 cmp	 DWORD PTR [rcx+rax], 0
  011a9	75 39		 jne	 SHORT $LN55@dfl2hflbfl
  011ab	b8 04 00 00 00	 mov	 eax, 4
  011b0	48 6b c0 02	 imul	 rax, rax, 2
  011b4	48 8b 8c 24 50
	1e 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  011bc	83 3c 01 00	 cmp	 DWORD PTR [rcx+rax], 0
  011c0	75 22		 jne	 SHORT $LN55@dfl2hflbfl
  011c2	b8 04 00 00 00	 mov	 eax, 4
  011c7	48 6b c0 03	 imul	 rax, rax, 3
  011cb	48 8b 8c 24 50
	1e 00 00	 mov	 rcx, QWORD PTR dfltab$[rsp]
  011d3	83 3c 01 00	 cmp	 DWORD PTR [rcx+rax], 0
  011d7	75 0b		 jne	 SHORT $LN55@dfl2hflbfl

; 989  :         nan = 2;

  011d9	c7 84 24 88 00
	00 00 02 00 00
	00		 mov	 DWORD PTR nan$[rsp], 2
$LN55@dfl2hflbfl:
$LN4@dfl2hflbfl:

; 990  :       break;
; 991  :     }
; 992  :     if (nan == 2)

  011e4	83 bc 24 88 00
	00 00 02	 cmp	 DWORD PTR nan$[rsp], 2
  011ec	0f 85 1a 01 00
	00		 jne	 $LN56@dfl2hflbfl

; 993  :     {
; 994  :       switch (hflwords)

  011f2	8b 84 24 68 1e
	00 00		 mov	 eax, DWORD PTR hflwords$[rsp]
  011f9	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv794[rsp], eax
  01200	83 bc 24 c4 00
	00 00 01	 cmp	 DWORD PTR tv794[rsp], 1
  01208	74 19		 je	 SHORT $LN57@dfl2hflbfl
  0120a	83 bc 24 c4 00
	00 00 02	 cmp	 DWORD PTR tv794[rsp], 2
  01212	74 2c		 je	 SHORT $LN58@dfl2hflbfl
  01214	83 bc 24 c4 00
	00 00 04	 cmp	 DWORD PTR tv794[rsp], 4
  0121c	74 54		 je	 SHORT $LN59@dfl2hflbfl
  0121e	e9 af 00 00 00	 jmp	 $LN6@dfl2hflbfl
$LN57@dfl2hflbfl:

; 995  :       {
; 996  :       case 1:
; 997  :         hfltab[0] = 0x7fc00000;

  01223	b8 04 00 00 00	 mov	 eax, 4
  01228	48 6b c0 00	 imul	 rax, rax, 0
  0122c	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  01234	c7 04 01 00 00
	c0 7f		 mov	 DWORD PTR [rcx+rax], 2143289344 ; 7fc00000H

; 998  :         break;

  0123b	e9 92 00 00 00	 jmp	 $LN6@dfl2hflbfl
$LN58@dfl2hflbfl:

; 999  :       case 2:
; 1000 :         hfltab[0] = 0x7ff80000;

  01240	b8 04 00 00 00	 mov	 eax, 4
  01245	48 6b c0 00	 imul	 rax, rax, 0
  01249	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  01251	c7 04 01 00 00
	f8 7f		 mov	 DWORD PTR [rcx+rax], 2146959360 ; 7ff80000H

; 1001 :         hfltab[1] = 0;

  01258	b8 04 00 00 00	 mov	 eax, 4
  0125d	48 6b c0 01	 imul	 rax, rax, 1
  01261	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  01269	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [rcx+rax], 0

; 1002 :         break;

  01270	eb 60		 jmp	 SHORT $LN6@dfl2hflbfl
$LN59@dfl2hflbfl:

; 1003 :       case 4:
; 1004 :         hfltab[0] = 0x7fff8000;

  01272	b8 04 00 00 00	 mov	 eax, 4
  01277	48 6b c0 00	 imul	 rax, rax, 0
  0127b	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  01283	c7 04 01 00 80
	ff 7f		 mov	 DWORD PTR [rcx+rax], 2147450880 ; 7fff8000H

; 1005 :         hfltab[1] = 0;

  0128a	b8 04 00 00 00	 mov	 eax, 4
  0128f	48 6b c0 01	 imul	 rax, rax, 1
  01293	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  0129b	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [rcx+rax], 0

; 1006 :         hfltab[2] = 0;

  012a2	b8 04 00 00 00	 mov	 eax, 4
  012a7	48 6b c0 02	 imul	 rax, rax, 2
  012ab	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  012b3	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [rcx+rax], 0

; 1007 :         hfltab[3] = 0;

  012ba	b8 04 00 00 00	 mov	 eax, 4
  012bf	48 6b c0 03	 imul	 rax, rax, 3
  012c3	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  012cb	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [rcx+rax], 0
$LN6@dfl2hflbfl:

; 1008 :         break;
; 1009 :       }
; 1010 :       if (neg)

  012d2	83 7c 24 6c 00	 cmp	 DWORD PTR neg$[rsp], 0
  012d7	74 2c		 je	 SHORT $LN60@dfl2hflbfl

; 1011 :         hfltab[0] |= 0x80000000;

  012d9	b8 04 00 00 00	 mov	 eax, 4
  012de	48 6b c0 00	 imul	 rax, rax, 0
  012e2	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  012ea	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  012ed	0f ba e8 1f	 bts	 eax, 31
  012f1	b9 04 00 00 00	 mov	 ecx, 4
  012f6	48 6b c9 00	 imul	 rcx, rcx, 0
  012fa	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  01302	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax
$LN60@dfl2hflbfl:

; 1012 :       return 0;

  01305	33 c0		 xor	 eax, eax
  01307	e9 1c 16 00 00	 jmp	 $LN1@dfl2hflbfl
$LN56@dfl2hflbfl:
$LN47@dfl2hflbfl:

; 1013 :     }
; 1014 :   }
; 1015 : /***************************************************************/
; 1016 : /*   convert the exponent bits to the acutal exponent value    */
; 1017 : /***************************************************************/
; 1018 :   if (nan)

  0130c	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR nan$[rsp], 0
  01314	74 15		 je	 SHORT $LN61@dfl2hflbfl

; 1019 :   {
; 1020 :     exp = 0;

  01316	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR exp$[rsp], 0

; 1021 :     lmd = 0;

  0131e	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR lmd$[rsp], 0

; 1022 :   }

  01329	eb 32		 jmp	 SHORT $LN62@dfl2hflbfl
$LN61@dfl2hflbfl:

; 1023 :   else
; 1024 :   {
; 1025 :     exp = dflexp(expword, &lmd, dflwords);

  0132b	44 8b 84 24 60
	1e 00 00	 mov	 r8d, DWORD PTR dflwords$[rsp]
  01333	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR lmd$[rsp]
  0133b	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR expword$[rsp]
  01342	e8 00 00 00 00	 call	 dflexp
  01347	89 44 24 58	 mov	 DWORD PTR exp$[rsp], eax

; 1026 :     lmd = lmd * 1000;

  0134b	69 84 24 b0 00
	00 00 e8 03 00
	00		 imul	 eax, DWORD PTR lmd$[rsp], 1000 ; 000003e8H
  01356	89 84 24 b0 00
	00 00		 mov	 DWORD PTR lmd$[rsp], eax
$LN62@dfl2hflbfl:

; 1027 :   }
; 1028 :   lzero = getlzerobits(dec, ARRAYMAX);

  0135d	ba 07 00 00 00	 mov	 edx, 7
  01362	48 8d 8c 24 58
	01 00 00	 lea	 rcx, QWORD PTR dec$[rsp]
  0136a	e8 00 00 00 00	 call	 getlzerobits
  0136f	89 44 24 54	 mov	 DWORD PTR lzero$[rsp], eax

; 1029 :   memset(hfl,0x00,sizeof(hfl));

  01373	48 8d 84 24 18
	01 00 00	 lea	 rax, QWORD PTR hfl$[rsp]
  0137b	48 8b f8	 mov	 rdi, rax
  0137e	33 c0		 xor	 eax, eax
  01380	b9 1c 00 00 00	 mov	 ecx, 28
  01385	f3 aa		 rep stosb

; 1030 :   memset(decwork,0x00,sizeof(decwork));

  01387	48 8d 84 24 e0
	05 00 00	 lea	 rax, QWORD PTR decwork$[rsp]
  0138f	48 8b f8	 mov	 rdi, rax
  01392	33 c0		 xor	 eax, eax
  01394	b9 42 18 00 00	 mov	 ecx, 6210		; 00001842H
  01399	f3 aa		 rep stosb

; 1031 :   fac10 = 0;

  0139b	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR fac10$[rsp], 0

; 1032 :   hexp = 0;

  013a6	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR hexp$[rsp], 0

; 1033 :   bexp = 0;

  013ae	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR bexp$[rsp], 0

; 1034 :   if (binflg)

  013b6	83 bc 24 78 1e
	00 00 00	 cmp	 DWORD PTR binflg$[rsp], 0
  013be	74 1b		 je	 SHORT $LN63@dfl2hflbfl

; 1035 :     maxbits = bflmaxdigit[hflwords];

  013c0	48 63 84 24 68
	1e 00 00	 movsxd	 rax, DWORD PTR hflwords$[rsp]
  013c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bflmaxdigit
  013cf	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  013d2	89 84 24 b8 00
	00 00		 mov	 DWORD PTR maxbits$[rsp], eax
  013d9	eb 2a		 jmp	 SHORT $LN64@dfl2hflbfl
$LN63@dfl2hflbfl:

; 1036 :   else
; 1037 :   {
; 1038 :     maxdigit = hflmaxdigit[hflwords];

  013db	48 63 84 24 68
	1e 00 00	 movsxd	 rax, DWORD PTR hflwords$[rsp]
  013e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:hflmaxdigit
  013ea	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  013ed	89 84 24 90 00
	00 00		 mov	 DWORD PTR maxdigit$[rsp], eax

; 1039 :     maxbits = maxdigit * 4;

  013f4	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR maxdigit$[rsp]
  013fb	c1 e0 02	 shl	 eax, 2
  013fe	89 84 24 b8 00
	00 00		 mov	 DWORD PTR maxbits$[rsp], eax
$LN64@dfl2hflbfl:

; 1040 :   }
; 1041 : /***************************************************************/
; 1042 : /*   convert the densely packed decimal values to an array of  */
; 1043 : /*   decimal number, one digit per byte.                       */
; 1044 : /***************************************************************/
; 1045 :   if (lzero < ARRAYMAX * 32)

  01405	81 7c 24 54 e0
	00 00 00	 cmp	 DWORD PTR lzero$[rsp], 224 ; 000000e0H
  0140d	0f 8d a8 01 00
	00		 jge	 $LN65@dfl2hflbfl

; 1046 :   {
; 1047 :     tbits = (ARRAYMAX * 32) - lzero;

  01413	b8 e0 00 00 00	 mov	 eax, 224		; 000000e0H
  01418	2b 44 24 54	 sub	 eax, DWORD PTR lzero$[rsp]
  0141c	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tbits$[rsp], eax

; 1048 :     ndpd = tbits / 10;

  01423	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR tbits$[rsp]
  0142a	99		 cdq
  0142b	b9 0a 00 00 00	 mov	 ecx, 10
  01430	f7 f9		 idiv	 ecx
  01432	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ndpd$[rsp], eax

; 1049 :     if (tbits % 10)

  01439	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR tbits$[rsp]
  01440	99		 cdq
  01441	b9 0a 00 00 00	 mov	 ecx, 10
  01446	f7 f9		 idiv	 ecx
  01448	8b c2		 mov	 eax, edx
  0144a	85 c0		 test	 eax, eax
  0144c	74 10		 je	 SHORT $LN66@dfl2hflbfl

; 1050 :       ndpd++;

  0144e	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ndpd$[rsp]
  01455	ff c0		 inc	 eax
  01457	89 84 24 ac 00
	00 00		 mov	 DWORD PTR ndpd$[rsp], eax
$LN66@dfl2hflbfl:

; 1051 : /***************************************************************/
; 1052 : /*   handle each set of 10 bits that represent a densely       */
; 1053 : /*   packed decimal number from 0-999.  Convert from densely   */
; 1054 : /*   packed decimal to normal, then multiply by 10**n, where   */
; 1055 : /*   n starts at zero and increases by three for each pass.    */
; 1056 : /*   Then take the result and add it to what we have so far.   */
; 1057 : /***************************************************************/
; 1058 :     for (i = 0;i < ndpd;i++)

  0145e	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  01466	eb 0a		 jmp	 SHORT $LN10@dfl2hflbfl
$LN8@dfl2hflbfl:
  01468	8b 44 24 44	 mov	 eax, DWORD PTR i$[rsp]
  0146c	ff c0		 inc	 eax
  0146e	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
$LN10@dfl2hflbfl:
  01472	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ndpd$[rsp]
  01479	39 44 24 44	 cmp	 DWORD PTR i$[rsp], eax
  0147d	0f 8d 38 01 00
	00		 jge	 $LN9@dfl2hflbfl

; 1059 :     {
; 1060 :       arraydiv(dec,1024,ARRAYMAX,&rem);

  01483	4c 8d 4c 24 60	 lea	 r9, QWORD PTR rem$[rsp]
  01488	41 b8 07 00 00
	00		 mov	 r8d, 7
  0148e	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  01493	48 8d 8c 24 58
	01 00 00	 lea	 rcx, QWORD PTR dec$[rsp]
  0149b	e8 00 00 00 00	 call	 arraydiv

; 1061 :       decnum = DPD2BIN[rem];

  014a0	8b 44 24 60	 mov	 eax, DWORD PTR rem$[rsp]
  014a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:DPD2BIN
  014ab	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  014af	89 84 24 c8 00
	00 00		 mov	 DWORD PTR decnum$[rsp], eax

; 1062 :       if (i == ndpd - 1) decnum += lmd;

  014b6	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR ndpd$[rsp]
  014bd	ff c8		 dec	 eax
  014bf	39 44 24 44	 cmp	 DWORD PTR i$[rsp], eax
  014c3	75 19		 jne	 SHORT $LN67@dfl2hflbfl
  014c5	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR lmd$[rsp]
  014cc	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR decnum$[rsp]
  014d3	03 c8		 add	 ecx, eax
  014d5	8b c1		 mov	 eax, ecx
  014d7	89 84 24 c8 00
	00 00		 mov	 DWORD PTR decnum$[rsp], eax
$LN67@dfl2hflbfl:

; 1063 :       memset(wrk, 0x00, ARRAYMAX * 4);

  014de	48 8d 84 24 a0
	05 00 00	 lea	 rax, QWORD PTR wrk$[rsp]
  014e6	48 8b f8	 mov	 rdi, rax
  014e9	33 c0		 xor	 eax, eax
  014eb	b9 1c 00 00 00	 mov	 ecx, 28
  014f0	f3 aa		 rep stosb

; 1064 :       wrk[ARRAYMAX - 1] = decnum;

  014f2	b8 04 00 00 00	 mov	 eax, 4
  014f7	48 6b c0 06	 imul	 rax, rax, 6
  014fb	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR decnum$[rsp]
  01502	89 8c 04 a0 05
	00 00		 mov	 DWORD PTR wrk$[rsp+rax], ecx

; 1065 :       k = fac10;

  01509	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR fac10$[rsp]
  01510	89 44 24 68	 mov	 DWORD PTR k$[rsp], eax
$LN11@dfl2hflbfl:

; 1066 :       while (k > 0)

  01514	83 7c 24 68 00	 cmp	 DWORD PTR k$[rsp], 0
  01519	7e 69		 jle	 SHORT $LN12@dfl2hflbfl

; 1067 :       {
; 1068 :         pidx = min(k, 7);

  0151b	83 7c 24 68 07	 cmp	 DWORD PTR k$[rsp], 7
  01520	7d 0d		 jge	 SHORT $LN123@dfl2hflbfl
  01522	8b 44 24 68	 mov	 eax, DWORD PTR k$[rsp]
  01526	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv870[rsp], eax
  0152d	eb 0b		 jmp	 SHORT $LN124@dfl2hflbfl
$LN123@dfl2hflbfl:
  0152f	c7 84 24 e0 00
	00 00 07 00 00
	00		 mov	 DWORD PTR tv870[rsp], 7
$LN124@dfl2hflbfl:
  0153a	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR tv870[rsp]
  01541	89 44 24 7c	 mov	 DWORD PTR pidx$[rsp], eax

; 1069 :         power10 = power10tab[pidx];

  01545	48 63 44 24 7c	 movsxd	 rax, DWORD PTR pidx$[rsp]
  0154a	8b 84 84 78 01
	00 00		 mov	 eax, DWORD PTR power10tab$[rsp+rax*4]
  01551	89 84 24 98 00
	00 00		 mov	 DWORD PTR power10$[rsp], eax

; 1070 :         k -= pidx;

  01558	8b 44 24 7c	 mov	 eax, DWORD PTR pidx$[rsp]
  0155c	8b 4c 24 68	 mov	 ecx, DWORD PTR k$[rsp]
  01560	2b c8		 sub	 ecx, eax
  01562	8b c1		 mov	 eax, ecx
  01564	89 44 24 68	 mov	 DWORD PTR k$[rsp], eax

; 1071 :         arraymlt(wrk, power10, ARRAYMAX);

  01568	41 b8 07 00 00
	00		 mov	 r8d, 7
  0156e	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR power10$[rsp]
  01575	48 8d 8c 24 a0
	05 00 00	 lea	 rcx, QWORD PTR wrk$[rsp]
  0157d	e8 00 00 00 00	 call	 arraymlt

; 1072 :       }

  01582	eb 90		 jmp	 SHORT $LN11@dfl2hflbfl
$LN12@dfl2hflbfl:

; 1073 :       fac10 += 3;

  01584	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR fac10$[rsp]
  0158b	83 c0 03	 add	 eax, 3
  0158e	89 84 24 cc 00
	00 00		 mov	 DWORD PTR fac10$[rsp], eax

; 1074 :       arrayadd(hfl,wrk,ARRAYMAX,ARRAYMAX);

  01595	41 b9 07 00 00
	00		 mov	 r9d, 7
  0159b	41 b8 07 00 00
	00		 mov	 r8d, 7
  015a1	48 8d 94 24 a0
	05 00 00	 lea	 rdx, QWORD PTR wrk$[rsp]
  015a9	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  015b1	e8 00 00 00 00	 call	 arrayadd

; 1075 :     }

  015b6	e9 ad fe ff ff	 jmp	 $LN8@dfl2hflbfl
$LN9@dfl2hflbfl:
$LN65@dfl2hflbfl:

; 1076 :   }
; 1077 : /***************************************************************/
; 1078 : /*   if the input is not a number (nan), format the binary     */
; 1079 : /*   output.  if the output is hex, we have alread done this   */
; 1080 : /***************************************************************/
; 1081 :   if (nan)

  015bb	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR nan$[rsp], 0
  015c3	0f 84 43 05 00
	00		 je	 $LN68@dfl2hflbfl

; 1082 :   {
; 1083 :     bexp = bflexpmax[hflwords];

  015c9	48 63 84 24 68
	1e 00 00	 movsxd	 rax, DWORD PTR hflwords$[rsp]
  015d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bflexpmax
  015d8	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  015db	89 44 24 48	 mov	 DWORD PTR bexp$[rsp], eax

; 1084 :     expbits = bflexpbits[hflwords];

  015df	48 63 84 24 68
	1e 00 00	 movsxd	 rax, DWORD PTR hflwords$[rsp]
  015e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bflexpbits
  015ee	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  015f1	89 44 24 70	 mov	 DWORD PTR expbits$[rsp], eax

; 1085 :     lzero = getlzerobits(hfltab, ARRAYMAX);

  015f5	ba 07 00 00 00	 mov	 edx, 7
  015fa	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  01602	e8 00 00 00 00	 call	 getlzerobits
  01607	89 44 24 54	 mov	 DWORD PTR lzero$[rsp], eax

; 1086 :     if (lzero == ARRAYMAX * 32)

  0160b	81 7c 24 54 e0
	00 00 00	 cmp	 DWORD PTR lzero$[rsp], 224 ; 000000e0H
  01613	0f 85 8f 00 00
	00		 jne	 $LN69@dfl2hflbfl

; 1087 :     {
; 1088 :       memset(hfltab, 0x00, ARRAYMAX * 4);

  01619	48 8b bc 24 58
	1e 00 00	 mov	 rdi, QWORD PTR hfltab$[rsp]
  01621	33 c0		 xor	 eax, eax
  01623	b9 1c 00 00 00	 mov	 ecx, 28
  01628	f3 aa		 rep stosb

; 1089 :       hfltab[0] |= bexp << (32 - expbits);

  0162a	b8 04 00 00 00	 mov	 eax, 4
  0162f	48 6b c0 00	 imul	 rax, rax, 0
  01633	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  01638	2b 4c 24 70	 sub	 ecx, DWORD PTR expbits$[rsp]
  0163c	8b 54 24 48	 mov	 edx, DWORD PTR bexp$[rsp]
  01640	d3 e2		 shl	 edx, cl
  01642	8b ca		 mov	 ecx, edx
  01644	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  0164c	8b 04 02	 mov	 eax, DWORD PTR [rdx+rax]
  0164f	0b c1		 or	 eax, ecx
  01651	b9 04 00 00 00	 mov	 ecx, 4
  01656	48 6b c9 00	 imul	 rcx, rcx, 0
  0165a	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  01662	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1090 :       hfltab[0] += (1 << (31 - expbits));

  01665	b8 04 00 00 00	 mov	 eax, 4
  0166a	48 6b c0 00	 imul	 rax, rax, 0
  0166e	b9 1f 00 00 00	 mov	 ecx, 31
  01673	2b 4c 24 70	 sub	 ecx, DWORD PTR expbits$[rsp]
  01677	ba 01 00 00 00	 mov	 edx, 1
  0167c	d3 e2		 shl	 edx, cl
  0167e	8b ca		 mov	 ecx, edx
  01680	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  01688	03 0c 02	 add	 ecx, DWORD PTR [rdx+rax]
  0168b	8b c1		 mov	 eax, ecx
  0168d	b9 04 00 00 00	 mov	 ecx, 4
  01692	48 6b c9 00	 imul	 rcx, rcx, 0
  01696	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  0169e	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1091 :       return 0;

  016a1	33 c0		 xor	 eax, eax
  016a3	e9 80 12 00 00	 jmp	 $LN1@dfl2hflbfl
$LN69@dfl2hflbfl:

; 1092 :     }
; 1093 :     memset(hfltab, 0x00, hflwords * sizeof(int));

  016a8	48 63 84 24 68
	1e 00 00	 movsxd	 rax, DWORD PTR hflwords$[rsp]
  016b0	48 c1 e0 02	 shl	 rax, 2
  016b4	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv915[rsp], rax
  016bc	48 8b bc 24 58
	1e 00 00	 mov	 rdi, QWORD PTR hfltab$[rsp]
  016c4	33 c0		 xor	 eax, eax
  016c6	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv915[rsp]
  016ce	f3 aa		 rep stosb

; 1094 :     for (i = ARRAYMAX - 1; i >= ARRAYMAX - hflwords; i--)

  016d0	c7 44 24 44 06
	00 00 00	 mov	 DWORD PTR i$[rsp], 6
  016d8	eb 0a		 jmp	 SHORT $LN15@dfl2hflbfl
$LN13@dfl2hflbfl:
  016da	8b 44 24 44	 mov	 eax, DWORD PTR i$[rsp]
  016de	ff c8		 dec	 eax
  016e0	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
$LN15@dfl2hflbfl:
  016e4	b8 07 00 00 00	 mov	 eax, 7
  016e9	2b 84 24 68 1e
	00 00		 sub	 eax, DWORD PTR hflwords$[rsp]
  016f0	39 44 24 44	 cmp	 DWORD PTR i$[rsp], eax
  016f4	0f 8c 9d 00 00
	00		 jl	 $LN14@dfl2hflbfl

; 1095 :     {
; 1096 :       for (k = 0; k < 4; k++)

  016fa	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR k$[rsp], 0
  01702	eb 0a		 jmp	 SHORT $LN18@dfl2hflbfl
$LN16@dfl2hflbfl:
  01704	8b 44 24 68	 mov	 eax, DWORD PTR k$[rsp]
  01708	ff c0		 inc	 eax
  0170a	89 44 24 68	 mov	 DWORD PTR k$[rsp], eax
$LN18@dfl2hflbfl:
  0170e	83 7c 24 68 04	 cmp	 DWORD PTR k$[rsp], 4
  01713	7d 7d		 jge	 SHORT $LN17@dfl2hflbfl

; 1097 :       {
; 1098 :         temp1 = (hfl[i] >> (k * 8)) & 0x000000ff;

  01715	48 63 44 24 44	 movsxd	 rax, DWORD PTR i$[rsp]
  0171a	8b 4c 24 68	 mov	 ecx, DWORD PTR k$[rsp]
  0171e	c1 e1 03	 shl	 ecx, 3
  01721	8b 84 84 18 01
	00 00		 mov	 eax, DWORD PTR hfl$[rsp+rax*4]
  01728	d3 e8		 shr	 eax, cl
  0172a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0172f	89 44 24 50	 mov	 DWORD PTR temp1$[rsp], eax

; 1099 :         temp2 = bittab1[temp1];

  01733	8b 44 24 50	 mov	 eax, DWORD PTR temp1$[rsp]
  01737	8b 84 84 a0 01
	00 00		 mov	 eax, DWORD PTR bittab1$[rsp+rax*4]
  0173e	89 44 24 74	 mov	 DWORD PTR temp2$[rsp], eax

; 1100 :         hfltab[ARRAYMAX - i - 1] |= (temp2 << (24 - (k * 8)));

  01742	b8 07 00 00 00	 mov	 eax, 7
  01747	2b 44 24 44	 sub	 eax, DWORD PTR i$[rsp]
  0174b	ff c8		 dec	 eax
  0174d	48 98		 cdqe
  0174f	8b 4c 24 68	 mov	 ecx, DWORD PTR k$[rsp]
  01753	c1 e1 03	 shl	 ecx, 3
  01756	ba 18 00 00 00	 mov	 edx, 24
  0175b	2b d1		 sub	 edx, ecx
  0175d	8b ca		 mov	 ecx, edx
  0175f	8b 54 24 74	 mov	 edx, DWORD PTR temp2$[rsp]
  01763	d3 e2		 shl	 edx, cl
  01765	8b ca		 mov	 ecx, edx
  01767	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  0176f	8b 04 82	 mov	 eax, DWORD PTR [rdx+rax*4]
  01772	0b c1		 or	 eax, ecx
  01774	b9 07 00 00 00	 mov	 ecx, 7
  01779	2b 4c 24 44	 sub	 ecx, DWORD PTR i$[rsp]
  0177d	ff c9		 dec	 ecx
  0177f	48 63 c9	 movsxd	 rcx, ecx
  01782	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  0178a	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax

; 1101 :       }

  0178d	e9 72 ff ff ff	 jmp	 $LN16@dfl2hflbfl
$LN17@dfl2hflbfl:

; 1102 :     }

  01792	e9 43 ff ff ff	 jmp	 $LN13@dfl2hflbfl
$LN14@dfl2hflbfl:

; 1103 :     switch (hflwords)

  01797	8b 84 24 68 1e
	00 00		 mov	 eax, DWORD PTR hflwords$[rsp]
  0179e	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv946[rsp], eax
  017a5	83 bc 24 d0 00
	00 00 01	 cmp	 DWORD PTR tv946[rsp], 1
  017ad	74 1d		 je	 SHORT $LN70@dfl2hflbfl
  017af	83 bc 24 d0 00
	00 00 02	 cmp	 DWORD PTR tv946[rsp], 2
  017b7	74 70		 je	 SHORT $LN71@dfl2hflbfl
  017b9	83 bc 24 d0 00
	00 00 04	 cmp	 DWORD PTR tv946[rsp], 4
  017c1	0f 84 38 01 00
	00		 je	 $LN72@dfl2hflbfl
  017c7	e9 06 03 00 00	 jmp	 $LN19@dfl2hflbfl
$LN70@dfl2hflbfl:

; 1104 :     {
; 1105 :     case 1:
; 1106 :       hfltab[0] >>= 10;

  017cc	b8 04 00 00 00	 mov	 eax, 4
  017d1	48 6b c0 00	 imul	 rax, rax, 0
  017d5	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  017dd	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  017e0	c1 e8 0a	 shr	 eax, 10
  017e3	b9 04 00 00 00	 mov	 ecx, 4
  017e8	48 6b c9 00	 imul	 rcx, rcx, 0
  017ec	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  017f4	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1107 :       hfltab[0] |= 0x7fc00000;

  017f7	b8 04 00 00 00	 mov	 eax, 4
  017fc	48 6b c0 00	 imul	 rax, rax, 0
  01800	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  01808	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0180b	0d 00 00 c0 7f	 or	 eax, 2143289344		; 7fc00000H
  01810	b9 04 00 00 00	 mov	 ecx, 4
  01815	48 6b c9 00	 imul	 rcx, rcx, 0
  01819	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  01821	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1108 :       break;

  01824	e9 a9 02 00 00	 jmp	 $LN19@dfl2hflbfl
$LN71@dfl2hflbfl:

; 1109 :     case 2:
; 1110 :       temp1 = hfltab[0] & 0x00001fff;

  01829	b8 04 00 00 00	 mov	 eax, 4
  0182e	48 6b c0 00	 imul	 rax, rax, 0
  01832	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  0183a	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0183d	25 ff 1f 00 00	 and	 eax, 8191		; 00001fffH
  01842	89 44 24 50	 mov	 DWORD PTR temp1$[rsp], eax

; 1111 :       hfltab[0] >>= 13;

  01846	b8 04 00 00 00	 mov	 eax, 4
  0184b	48 6b c0 00	 imul	 rax, rax, 0
  0184f	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  01857	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0185a	c1 e8 0d	 shr	 eax, 13
  0185d	b9 04 00 00 00	 mov	 ecx, 4
  01862	48 6b c9 00	 imul	 rcx, rcx, 0
  01866	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  0186e	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1112 :       hfltab[0] |= 0x7ff80000;

  01871	b8 04 00 00 00	 mov	 eax, 4
  01876	48 6b c0 00	 imul	 rax, rax, 0
  0187a	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  01882	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  01885	0d 00 00 f8 7f	 or	 eax, 2146959360		; 7ff80000H
  0188a	b9 04 00 00 00	 mov	 ecx, 4
  0188f	48 6b c9 00	 imul	 rcx, rcx, 0
  01893	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  0189b	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1113 :       hfltab[1] >>= 13;

  0189e	b8 04 00 00 00	 mov	 eax, 4
  018a3	48 6b c0 01	 imul	 rax, rax, 1
  018a7	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  018af	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  018b2	c1 e8 0d	 shr	 eax, 13
  018b5	b9 04 00 00 00	 mov	 ecx, 4
  018ba	48 6b c9 01	 imul	 rcx, rcx, 1
  018be	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  018c6	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1114 :       hfltab[1] |= (temp1 << 19);

  018c9	b8 04 00 00 00	 mov	 eax, 4
  018ce	48 6b c0 01	 imul	 rax, rax, 1
  018d2	8b 4c 24 50	 mov	 ecx, DWORD PTR temp1$[rsp]
  018d6	c1 e1 13	 shl	 ecx, 19
  018d9	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  018e1	8b 04 02	 mov	 eax, DWORD PTR [rdx+rax]
  018e4	0b c1		 or	 eax, ecx
  018e6	b9 04 00 00 00	 mov	 ecx, 4
  018eb	48 6b c9 01	 imul	 rcx, rcx, 1
  018ef	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  018f7	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1115 :       break;

  018fa	e9 d3 01 00 00	 jmp	 $LN19@dfl2hflbfl
$LN72@dfl2hflbfl:

; 1116 :     case 4:
; 1117 :       temp1 = hfltab[0] & 0x0001ffff;

  018ff	b8 04 00 00 00	 mov	 eax, 4
  01904	48 6b c0 00	 imul	 rax, rax, 0
  01908	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  01910	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  01913	25 ff ff 01 00	 and	 eax, 131071		; 0001ffffH
  01918	89 44 24 50	 mov	 DWORD PTR temp1$[rsp], eax

; 1118 :       hfltab[0] >>= 17;

  0191c	b8 04 00 00 00	 mov	 eax, 4
  01921	48 6b c0 00	 imul	 rax, rax, 0
  01925	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  0192d	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  01930	c1 e8 11	 shr	 eax, 17
  01933	b9 04 00 00 00	 mov	 ecx, 4
  01938	48 6b c9 00	 imul	 rcx, rcx, 0
  0193c	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  01944	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1119 :       hfltab[0] |= 0x7fff8000;

  01947	b8 04 00 00 00	 mov	 eax, 4
  0194c	48 6b c0 00	 imul	 rax, rax, 0
  01950	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  01958	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0195b	0d 00 80 ff 7f	 or	 eax, 2147450880		; 7fff8000H
  01960	b9 04 00 00 00	 mov	 ecx, 4
  01965	48 6b c9 00	 imul	 rcx, rcx, 0
  01969	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  01971	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1120 :       temp2 = hfltab[1] & 0x0001ffff;

  01974	b8 04 00 00 00	 mov	 eax, 4
  01979	48 6b c0 01	 imul	 rax, rax, 1
  0197d	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  01985	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  01988	25 ff ff 01 00	 and	 eax, 131071		; 0001ffffH
  0198d	89 44 24 74	 mov	 DWORD PTR temp2$[rsp], eax

; 1121 :       hfltab[1] >>= 17;

  01991	b8 04 00 00 00	 mov	 eax, 4
  01996	48 6b c0 01	 imul	 rax, rax, 1
  0199a	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  019a2	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  019a5	c1 e8 11	 shr	 eax, 17
  019a8	b9 04 00 00 00	 mov	 ecx, 4
  019ad	48 6b c9 01	 imul	 rcx, rcx, 1
  019b1	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  019b9	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1122 :       hfltab[1] |= (temp1 << 15);

  019bc	b8 04 00 00 00	 mov	 eax, 4
  019c1	48 6b c0 01	 imul	 rax, rax, 1
  019c5	8b 4c 24 50	 mov	 ecx, DWORD PTR temp1$[rsp]
  019c9	c1 e1 0f	 shl	 ecx, 15
  019cc	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  019d4	8b 04 02	 mov	 eax, DWORD PTR [rdx+rax]
  019d7	0b c1		 or	 eax, ecx
  019d9	b9 04 00 00 00	 mov	 ecx, 4
  019de	48 6b c9 01	 imul	 rcx, rcx, 1
  019e2	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  019ea	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1123 :       temp1 = temp2;

  019ed	8b 44 24 74	 mov	 eax, DWORD PTR temp2$[rsp]
  019f1	89 44 24 50	 mov	 DWORD PTR temp1$[rsp], eax

; 1124 :       temp2 = hfltab[2] & 0x0001ffff;

  019f5	b8 04 00 00 00	 mov	 eax, 4
  019fa	48 6b c0 02	 imul	 rax, rax, 2
  019fe	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  01a06	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  01a09	25 ff ff 01 00	 and	 eax, 131071		; 0001ffffH
  01a0e	89 44 24 74	 mov	 DWORD PTR temp2$[rsp], eax

; 1125 :       hfltab[2] >>= 17;

  01a12	b8 04 00 00 00	 mov	 eax, 4
  01a17	48 6b c0 02	 imul	 rax, rax, 2
  01a1b	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  01a23	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  01a26	c1 e8 11	 shr	 eax, 17
  01a29	b9 04 00 00 00	 mov	 ecx, 4
  01a2e	48 6b c9 02	 imul	 rcx, rcx, 2
  01a32	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  01a3a	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1126 :       hfltab[2] |= (temp1 << 15);

  01a3d	b8 04 00 00 00	 mov	 eax, 4
  01a42	48 6b c0 02	 imul	 rax, rax, 2
  01a46	8b 4c 24 50	 mov	 ecx, DWORD PTR temp1$[rsp]
  01a4a	c1 e1 0f	 shl	 ecx, 15
  01a4d	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  01a55	8b 04 02	 mov	 eax, DWORD PTR [rdx+rax]
  01a58	0b c1		 or	 eax, ecx
  01a5a	b9 04 00 00 00	 mov	 ecx, 4
  01a5f	48 6b c9 02	 imul	 rcx, rcx, 2
  01a63	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  01a6b	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1127 :       temp1 = temp2;

  01a6e	8b 44 24 74	 mov	 eax, DWORD PTR temp2$[rsp]
  01a72	89 44 24 50	 mov	 DWORD PTR temp1$[rsp], eax

; 1128 :       hfltab[3] >>= 17;

  01a76	b8 04 00 00 00	 mov	 eax, 4
  01a7b	48 6b c0 03	 imul	 rax, rax, 3
  01a7f	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  01a87	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  01a8a	c1 e8 11	 shr	 eax, 17
  01a8d	b9 04 00 00 00	 mov	 ecx, 4
  01a92	48 6b c9 03	 imul	 rcx, rcx, 3
  01a96	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  01a9e	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1129 :       hfltab[3] |= (temp1 << 15);

  01aa1	b8 04 00 00 00	 mov	 eax, 4
  01aa6	48 6b c0 03	 imul	 rax, rax, 3
  01aaa	8b 4c 24 50	 mov	 ecx, DWORD PTR temp1$[rsp]
  01aae	c1 e1 0f	 shl	 ecx, 15
  01ab1	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  01ab9	8b 04 02	 mov	 eax, DWORD PTR [rdx+rax]
  01abc	0b c1		 or	 eax, ecx
  01abe	b9 04 00 00 00	 mov	 ecx, 4
  01ac3	48 6b c9 03	 imul	 rcx, rcx, 3
  01ac7	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  01acf	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax
$LN19@dfl2hflbfl:

; 1130 :       break;
; 1131 :     }
; 1132 :     if (neg)

  01ad2	83 7c 24 6c 00	 cmp	 DWORD PTR neg$[rsp], 0
  01ad7	74 2c		 je	 SHORT $LN73@dfl2hflbfl

; 1133 :       hfltab[0] |= 0x80000000;

  01ad9	b8 04 00 00 00	 mov	 eax, 4
  01ade	48 6b c0 00	 imul	 rax, rax, 0
  01ae2	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  01aea	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  01aed	0f ba e8 1f	 bts	 eax, 31
  01af1	b9 04 00 00 00	 mov	 ecx, 4
  01af6	48 6b c9 00	 imul	 rcx, rcx, 0
  01afa	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  01b02	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax
$LN73@dfl2hflbfl:

; 1134 :     return 0;

  01b05	33 c0		 xor	 eax, eax
  01b07	e9 1c 0e 00 00	 jmp	 $LN1@dfl2hflbfl
$LN68@dfl2hflbfl:

; 1135 :   }
; 1136 :   /***************************************************************/
; 1137 :   /*   if a negative exponent, convert the decimal fraction to   */
; 1138 :   /*   hex by dividing by 10 for each value of the exponent.     */
; 1139 :   /*   logically multiply one by multiplying by 16 and           */
; 1140 :   /*   subtracting from the hex exponent.  This is done to       */
; 1141 :   /*   maintain precision.  If the hex number flows into the     */
; 1142 :   /*   first element in the array, divide until it does not.     */
; 1143 :   /***************************************************************/
; 1144 :   if (exp < 0)

  01b0c	83 7c 24 58 00	 cmp	 DWORD PTR exp$[rsp], 0
  01b11	0f 8d 2e 01 00
	00		 jge	 $LN74@dfl2hflbfl

; 1145 :   {
; 1146 :     exp = abs(exp);

  01b17	8b 4c 24 58	 mov	 ecx, DWORD PTR exp$[rsp]
  01b1b	e8 00 00 00 00	 call	 abs
  01b20	89 44 24 58	 mov	 DWORD PTR exp$[rsp], eax
$LN21@dfl2hflbfl:

; 1147 :     while (exp > 0)

  01b24	83 7c 24 58 00	 cmp	 DWORD PTR exp$[rsp], 0
  01b29	0f 8e 11 01 00
	00		 jle	 $LN22@dfl2hflbfl

; 1148 :     {
; 1149 :       if (hfl[0] == 0 && hfl[1] < 65536)

  01b2f	b8 04 00 00 00	 mov	 eax, 4
  01b34	48 6b c0 00	 imul	 rax, rax, 0
  01b38	83 bc 04 18 01
	00 00 00	 cmp	 DWORD PTR hfl$[rsp+rax], 0
  01b40	75 7b		 jne	 SHORT $LN76@dfl2hflbfl
  01b42	b8 04 00 00 00	 mov	 eax, 4
  01b47	48 6b c0 01	 imul	 rax, rax, 1
  01b4b	81 bc 04 18 01
	00 00 00 00 01
	00		 cmp	 DWORD PTR hfl$[rsp+rax], 65536 ; 00010000H
  01b56	73 65		 jae	 SHORT $LN76@dfl2hflbfl

; 1150 :       {
; 1151 :         lzero = getlzerobits(hfl, ARRAYMAX);

  01b58	ba 07 00 00 00	 mov	 edx, 7
  01b5d	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  01b65	e8 00 00 00 00	 call	 getlzerobits
  01b6a	89 44 24 54	 mov	 DWORD PTR lzero$[rsp], eax

; 1152 :         lzerohex = (lzero >> 2) << 2;

  01b6e	8b 44 24 54	 mov	 eax, DWORD PTR lzero$[rsp]
  01b72	c1 f8 02	 sar	 eax, 2
  01b75	c1 e0 02	 shl	 eax, 2
  01b78	89 84 24 a4 00
	00 00		 mov	 DWORD PTR lzerohex$[rsp], eax

; 1153 :         shiftamt = lzerohex - 44;

  01b7f	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR lzerohex$[rsp]
  01b86	83 e8 2c	 sub	 eax, 44			; 0000002cH
  01b89	89 44 24 40	 mov	 DWORD PTR shiftamt$[rsp], eax

; 1154 :         arrayshiftleft(hfl, ARRAYMAX, shiftamt);

  01b8d	44 8b 44 24 40	 mov	 r8d, DWORD PTR shiftamt$[rsp]
  01b92	ba 07 00 00 00	 mov	 edx, 7
  01b97	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  01b9f	e8 00 00 00 00	 call	 arrayshiftleft

; 1155 :         hexp -= (shiftamt / 4);

  01ba4	8b 44 24 40	 mov	 eax, DWORD PTR shiftamt$[rsp]
  01ba8	99		 cdq
  01ba9	83 e2 03	 and	 edx, 3
  01bac	03 c2		 add	 eax, edx
  01bae	c1 f8 02	 sar	 eax, 2
  01bb1	8b 4c 24 4c	 mov	 ecx, DWORD PTR hexp$[rsp]
  01bb5	2b c8		 sub	 ecx, eax
  01bb7	8b c1		 mov	 eax, ecx
  01bb9	89 44 24 4c	 mov	 DWORD PTR hexp$[rsp], eax
$LN76@dfl2hflbfl:

; 1156 :       }
; 1157 :       pidx = min(exp, 7);

  01bbd	83 7c 24 58 07	 cmp	 DWORD PTR exp$[rsp], 7
  01bc2	7d 0d		 jge	 SHORT $LN125@dfl2hflbfl
  01bc4	8b 44 24 58	 mov	 eax, DWORD PTR exp$[rsp]
  01bc8	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv1064[rsp], eax
  01bcf	eb 0b		 jmp	 SHORT $LN126@dfl2hflbfl
$LN125@dfl2hflbfl:
  01bd1	c7 84 24 e4 00
	00 00 07 00 00
	00		 mov	 DWORD PTR tv1064[rsp], 7
$LN126@dfl2hflbfl:
  01bdc	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR tv1064[rsp]
  01be3	89 44 24 7c	 mov	 DWORD PTR pidx$[rsp], eax

; 1158 :       power10 = power10tab[pidx];

  01be7	48 63 44 24 7c	 movsxd	 rax, DWORD PTR pidx$[rsp]
  01bec	8b 84 84 78 01
	00 00		 mov	 eax, DWORD PTR power10tab$[rsp+rax*4]
  01bf3	89 84 24 98 00
	00 00		 mov	 DWORD PTR power10$[rsp], eax

; 1159 :       arraydiv(hfl,power10, ARRAYMAX, &rem);

  01bfa	4c 8d 4c 24 60	 lea	 r9, QWORD PTR rem$[rsp]
  01bff	41 b8 07 00 00
	00		 mov	 r8d, 7
  01c05	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR power10$[rsp]
  01c0c	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  01c14	e8 00 00 00 00	 call	 arraydiv

; 1160 :       if (rem > 0)

  01c19	83 7c 24 60 00	 cmp	 DWORD PTR rem$[rsp], 0
  01c1e	76 0b		 jbe	 SHORT $LN77@dfl2hflbfl

; 1161 :         exact = 0;

  01c20	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR exact$[rsp], 0
$LN77@dfl2hflbfl:

; 1162 :       exp -= pidx;

  01c2b	8b 44 24 7c	 mov	 eax, DWORD PTR pidx$[rsp]
  01c2f	8b 4c 24 58	 mov	 ecx, DWORD PTR exp$[rsp]
  01c33	2b c8		 sub	 ecx, eax
  01c35	8b c1		 mov	 eax, ecx
  01c37	89 44 24 58	 mov	 DWORD PTR exp$[rsp], eax

; 1163 :     }

  01c3b	e9 e4 fe ff ff	 jmp	 $LN21@dfl2hflbfl
$LN22@dfl2hflbfl:

; 1164 :   }

  01c40	e9 27 01 00 00	 jmp	 $LN75@dfl2hflbfl
$LN74@dfl2hflbfl:
$LN23@dfl2hflbfl:

; 1165 :   else
; 1166 :     while (exp > 0)

  01c45	83 7c 24 58 00	 cmp	 DWORD PTR exp$[rsp], 0
  01c4a	0f 8e 1c 01 00
	00		 jle	 $LN24@dfl2hflbfl

; 1167 :     {
; 1168 :       pidx = min(exp, 7);

  01c50	83 7c 24 58 07	 cmp	 DWORD PTR exp$[rsp], 7
  01c55	7d 0d		 jge	 SHORT $LN127@dfl2hflbfl
  01c57	8b 44 24 58	 mov	 eax, DWORD PTR exp$[rsp]
  01c5b	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv1076[rsp], eax
  01c62	eb 0b		 jmp	 SHORT $LN128@dfl2hflbfl
$LN127@dfl2hflbfl:
  01c64	c7 84 24 e8 00
	00 00 07 00 00
	00		 mov	 DWORD PTR tv1076[rsp], 7
$LN128@dfl2hflbfl:
  01c6f	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR tv1076[rsp]
  01c76	89 44 24 7c	 mov	 DWORD PTR pidx$[rsp], eax

; 1169 :       power10 = power10tab[pidx];

  01c7a	48 63 44 24 7c	 movsxd	 rax, DWORD PTR pidx$[rsp]
  01c7f	8b 84 84 78 01
	00 00		 mov	 eax, DWORD PTR power10tab$[rsp+rax*4]
  01c86	89 84 24 98 00
	00 00		 mov	 DWORD PTR power10$[rsp], eax

; 1170 :       exp -= pidx;

  01c8d	8b 44 24 7c	 mov	 eax, DWORD PTR pidx$[rsp]
  01c91	8b 4c 24 58	 mov	 ecx, DWORD PTR exp$[rsp]
  01c95	2b c8		 sub	 ecx, eax
  01c97	8b c1		 mov	 eax, ecx
  01c99	89 44 24 58	 mov	 DWORD PTR exp$[rsp], eax

; 1171 :       arraymlt(hfl, power10, ARRAYMAX);

  01c9d	41 b8 07 00 00
	00		 mov	 r8d, 7
  01ca3	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR power10$[rsp]
  01caa	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  01cb2	e8 00 00 00 00	 call	 arraymlt

; 1172 :       if (hfl[0] > 0)

  01cb7	b8 04 00 00 00	 mov	 eax, 4
  01cbc	48 6b c0 00	 imul	 rax, rax, 0
  01cc0	83 bc 04 18 01
	00 00 00	 cmp	 DWORD PTR hfl$[rsp+rax], 0
  01cc8	0f 86 99 00 00
	00		 jbe	 $LN78@dfl2hflbfl

; 1173 :       {
; 1174 :         lzero = getlzerobits(hfl, ARRAYMAX);

  01cce	ba 07 00 00 00	 mov	 edx, 7
  01cd3	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  01cdb	e8 00 00 00 00	 call	 getlzerobits
  01ce0	89 44 24 54	 mov	 DWORD PTR lzero$[rsp], eax

; 1175 :         lzerohex = (lzero >> 2) << 2;

  01ce4	8b 44 24 54	 mov	 eax, DWORD PTR lzero$[rsp]
  01ce8	c1 f8 02	 sar	 eax, 2
  01ceb	c1 e0 02	 shl	 eax, 2
  01cee	89 84 24 a4 00
	00 00		 mov	 DWORD PTR lzerohex$[rsp], eax

; 1176 :         shiftamt = 64 - lzerohex;

  01cf5	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  01cfa	2b 84 24 a4 00
	00 00		 sub	 eax, DWORD PTR lzerohex$[rsp]
  01d01	89 44 24 40	 mov	 DWORD PTR shiftamt$[rsp], eax

; 1177 :         arrayshiftright(hfl, ARRAYMAX, shiftamt, remtab);

  01d05	4c 8d 8c 24 38
	01 00 00	 lea	 r9, QWORD PTR remtab$[rsp]
  01d0d	44 8b 44 24 40	 mov	 r8d, DWORD PTR shiftamt$[rsp]
  01d12	ba 07 00 00 00	 mov	 edx, 7
  01d17	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  01d1f	e8 00 00 00 00	 call	 arrayshiftright

; 1178 :         if (memcmp(remtab, binzero, sizeof(remtab)) != 0)

  01d24	41 b8 1c 00 00
	00		 mov	 r8d, 28
  01d2a	48 8d 94 24 c0
	05 00 00	 lea	 rdx, QWORD PTR binzero$[rsp]
  01d32	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR remtab$[rsp]
  01d3a	e8 00 00 00 00	 call	 memcmp
  01d3f	85 c0		 test	 eax, eax
  01d41	74 0b		 je	 SHORT $LN79@dfl2hflbfl

; 1179 :           exact = 0;

  01d43	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR exact$[rsp], 0
$LN79@dfl2hflbfl:

; 1180 :         hexp += shiftamt / 4;

  01d4e	8b 44 24 40	 mov	 eax, DWORD PTR shiftamt$[rsp]
  01d52	99		 cdq
  01d53	83 e2 03	 and	 edx, 3
  01d56	03 c2		 add	 eax, edx
  01d58	c1 f8 02	 sar	 eax, 2
  01d5b	8b 4c 24 4c	 mov	 ecx, DWORD PTR hexp$[rsp]
  01d5f	03 c8		 add	 ecx, eax
  01d61	8b c1		 mov	 eax, ecx
  01d63	89 44 24 4c	 mov	 DWORD PTR hexp$[rsp], eax
$LN78@dfl2hflbfl:

; 1181 :       }
; 1182 :     }

  01d67	e9 d9 fe ff ff	 jmp	 $LN23@dfl2hflbfl
$LN24@dfl2hflbfl:
$LN75@dfl2hflbfl:

; 1183 :   lzero = getlzerobits(hfl, ARRAYMAX);

  01d6c	ba 07 00 00 00	 mov	 edx, 7
  01d71	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  01d79	e8 00 00 00 00	 call	 getlzerobits
  01d7e	89 44 24 54	 mov	 DWORD PTR lzero$[rsp], eax

; 1184 :   /***************************************************************/
; 1185 :   /*   if too many digits, round it to the correct number and    */
; 1186 :   /*   refresh the digit counts.                                 */
; 1187 :   /***************************************************************/
; 1188 :   if (binflg)

  01d82	83 bc 24 78 1e
	00 00 00	 cmp	 DWORD PTR binflg$[rsp], 0
  01d8a	0f 84 b5 02 00
	00		 je	 $LN80@dfl2hflbfl

; 1189 :   {
; 1190 :     bexp = hexp * 4;

  01d90	8b 44 24 4c	 mov	 eax, DWORD PTR hexp$[rsp]
  01d94	c1 e0 02	 shl	 eax, 2
  01d97	89 44 24 48	 mov	 DWORD PTR bexp$[rsp], eax

; 1191 :     numbits = ARRAYMAX * 32 - lzero;

  01d9b	b8 e0 00 00 00	 mov	 eax, 224		; 000000e0H
  01da0	2b 44 24 54	 sub	 eax, DWORD PTR lzero$[rsp]
  01da4	89 84 24 9c 00
	00 00		 mov	 DWORD PTR numbits$[rsp], eax

; 1192 :     if (bexp + numbits + bflexpbias[hflwords] > 0)

  01dab	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR numbits$[rsp]
  01db2	8b 4c 24 48	 mov	 ecx, DWORD PTR bexp$[rsp]
  01db6	03 c8		 add	 ecx, eax
  01db8	8b c1		 mov	 eax, ecx
  01dba	48 63 8c 24 68
	1e 00 00	 movsxd	 rcx, DWORD PTR hflwords$[rsp]
  01dc2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:bflexpbias
  01dc9	03 04 8a	 add	 eax, DWORD PTR [rdx+rcx*4]
  01dcc	85 c0		 test	 eax, eax
  01dce	7e 12		 jle	 SHORT $LN82@dfl2hflbfl

; 1193 :       bitctr = maxbits + 1;

  01dd0	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR maxbits$[rsp]
  01dd7	ff c0		 inc	 eax
  01dd9	89 84 24 a0 00
	00 00		 mov	 DWORD PTR bitctr$[rsp], eax
  01de0	eb 0e		 jmp	 SHORT $LN83@dfl2hflbfl
$LN82@dfl2hflbfl:

; 1194 :     else
; 1195 :       bitctr = maxbits;

  01de2	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR maxbits$[rsp]
  01de9	89 84 24 a0 00
	00 00		 mov	 DWORD PTR bitctr$[rsp], eax
$LN83@dfl2hflbfl:

; 1196 :     if (numbits > bitctr)

  01df0	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR bitctr$[rsp]
  01df7	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR numbits$[rsp], eax
  01dfe	0f 8e e6 01 00
	00		 jle	 $LN84@dfl2hflbfl

; 1197 :     {
; 1198 :       shiftamt = numbits - bitctr;

  01e04	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR bitctr$[rsp]
  01e0b	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR numbits$[rsp]
  01e12	2b c8		 sub	 ecx, eax
  01e14	8b c1		 mov	 eax, ecx
  01e16	89 44 24 40	 mov	 DWORD PTR shiftamt$[rsp], eax

; 1199 :       arrayshiftright(hfl, ARRAYMAX, shiftamt, remtab);

  01e1a	4c 8d 8c 24 38
	01 00 00	 lea	 r9, QWORD PTR remtab$[rsp]
  01e22	44 8b 44 24 40	 mov	 r8d, DWORD PTR shiftamt$[rsp]
  01e27	ba 07 00 00 00	 mov	 edx, 7
  01e2c	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  01e34	e8 00 00 00 00	 call	 arrayshiftright

; 1200 :       if (memcmp(remtab, binzero, sizeof(remtab)) != 0)

  01e39	41 b8 1c 00 00
	00		 mov	 r8d, 28
  01e3f	48 8d 94 24 c0
	05 00 00	 lea	 rdx, QWORD PTR binzero$[rsp]
  01e47	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR remtab$[rsp]
  01e4f	e8 00 00 00 00	 call	 memcmp
  01e54	85 c0		 test	 eax, eax
  01e56	74 18		 je	 SHORT $LN86@dfl2hflbfl

; 1201 :         *fpc |= FPC_FLAG_SFX;

  01e58	48 8b 84 24 80
	1e 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  01e60	8b 00		 mov	 eax, DWORD PTR [rax]
  01e62	0f ba e8 13	 bts	 eax, 19
  01e66	48 8b 8c 24 80
	1e 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  01e6e	89 01		 mov	 DWORD PTR [rcx], eax
$LN86@dfl2hflbfl:

; 1202 :       if (shiftamt % 32)

  01e70	8b 44 24 40	 mov	 eax, DWORD PTR shiftamt$[rsp]
  01e74	99		 cdq
  01e75	83 e2 1f	 and	 edx, 31
  01e78	03 c2		 add	 eax, edx
  01e7a	83 e0 1f	 and	 eax, 31
  01e7d	2b c2		 sub	 eax, edx
  01e7f	85 c0		 test	 eax, eax
  01e81	74 3d		 je	 SHORT $LN87@dfl2hflbfl

; 1203 :       {
; 1204 :         rx = ARRAYMAX - (shiftamt / 32) - 1;

  01e83	8b 44 24 40	 mov	 eax, DWORD PTR shiftamt$[rsp]
  01e87	99		 cdq
  01e88	83 e2 1f	 and	 edx, 31
  01e8b	03 c2		 add	 eax, edx
  01e8d	c1 f8 05	 sar	 eax, 5
  01e90	b9 07 00 00 00	 mov	 ecx, 7
  01e95	2b c8		 sub	 ecx, eax
  01e97	8b c1		 mov	 eax, ecx
  01e99	ff c8		 dec	 eax
  01e9b	89 44 24 5c	 mov	 DWORD PTR rx$[rsp], eax

; 1205 :         rbit = 32 - (shiftamt % 32);

  01e9f	8b 44 24 40	 mov	 eax, DWORD PTR shiftamt$[rsp]
  01ea3	99		 cdq
  01ea4	83 e2 1f	 and	 edx, 31
  01ea7	03 c2		 add	 eax, edx
  01ea9	83 e0 1f	 and	 eax, 31
  01eac	2b c2		 sub	 eax, edx
  01eae	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  01eb3	2b c8		 sub	 ecx, eax
  01eb5	8b c1		 mov	 eax, ecx
  01eb7	89 84 24 80 00
	00 00		 mov	 DWORD PTR rbit$[rsp], eax

; 1206 :       }

  01ebe	eb 25		 jmp	 SHORT $LN88@dfl2hflbfl
$LN87@dfl2hflbfl:

; 1207 :       else
; 1208 :       {
; 1209 :         rx = ARRAYMAX - (shiftamt / 32);

  01ec0	8b 44 24 40	 mov	 eax, DWORD PTR shiftamt$[rsp]
  01ec4	99		 cdq
  01ec5	83 e2 1f	 and	 edx, 31
  01ec8	03 c2		 add	 eax, edx
  01eca	c1 f8 05	 sar	 eax, 5
  01ecd	b9 07 00 00 00	 mov	 ecx, 7
  01ed2	2b c8		 sub	 ecx, eax
  01ed4	8b c1		 mov	 eax, ecx
  01ed6	89 44 24 5c	 mov	 DWORD PTR rx$[rsp], eax

; 1210 :         rbit = 0;

  01eda	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR rbit$[rsp], 0
$LN88@dfl2hflbfl:

; 1211 :       }
; 1212 :       rem = remtab[rx] >> (31 - rbit);

  01ee5	48 63 44 24 5c	 movsxd	 rax, DWORD PTR rx$[rsp]
  01eea	b9 1f 00 00 00	 mov	 ecx, 31
  01eef	2b 8c 24 80 00
	00 00		 sub	 ecx, DWORD PTR rbit$[rsp]
  01ef6	8b 84 84 38 01
	00 00		 mov	 eax, DWORD PTR remtab$[rsp+rax*4]
  01efd	d3 e8		 shr	 eax, cl
  01eff	89 44 24 60	 mov	 DWORD PTR rem$[rsp], eax

; 1213 :       remtab[rx] = (remtab[rx] << (rbit + 1)) >> (rbit + 1);

  01f03	48 63 44 24 5c	 movsxd	 rax, DWORD PTR rx$[rsp]
  01f08	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR rbit$[rsp]
  01f0f	ff c1		 inc	 ecx
  01f11	8b 84 84 38 01
	00 00		 mov	 eax, DWORD PTR remtab$[rsp+rax*4]
  01f18	d3 e0		 shl	 eax, cl
  01f1a	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR rbit$[rsp]
  01f21	ff c1		 inc	 ecx
  01f23	d3 e8		 shr	 eax, cl
  01f25	48 63 4c 24 5c	 movsxd	 rcx, DWORD PTR rx$[rsp]
  01f2a	89 84 8c 38 01
	00 00		 mov	 DWORD PTR remtab$[rsp+rcx*4], eax

; 1214 :       if (rem == 1)

  01f31	83 7c 24 60 01	 cmp	 DWORD PTR rem$[rsp], 1
  01f36	75 46		 jne	 SHORT $LN89@dfl2hflbfl

; 1215 :       {
; 1216 :         mid = 1;

  01f38	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR mid$[rsp], 1

; 1217 :         for (i = rx; i < ARRAYMAX; i++)

  01f43	8b 44 24 5c	 mov	 eax, DWORD PTR rx$[rsp]
  01f47	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
  01f4b	eb 0a		 jmp	 SHORT $LN27@dfl2hflbfl
$LN25@dfl2hflbfl:
  01f4d	8b 44 24 44	 mov	 eax, DWORD PTR i$[rsp]
  01f51	ff c0		 inc	 eax
  01f53	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
$LN27@dfl2hflbfl:
  01f57	83 7c 24 44 07	 cmp	 DWORD PTR i$[rsp], 7
  01f5c	7d 1e		 jge	 SHORT $LN26@dfl2hflbfl

; 1218 :         {
; 1219 :           if (remtab[i] != 0)

  01f5e	48 63 44 24 44	 movsxd	 rax, DWORD PTR i$[rsp]
  01f63	83 bc 84 38 01
	00 00 00	 cmp	 DWORD PTR remtab$[rsp+rax*4], 0
  01f6b	74 0d		 je	 SHORT $LN91@dfl2hflbfl

; 1220 :           {
; 1221 :             mid = 0;

  01f6d	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR mid$[rsp], 0

; 1222 :             break;

  01f78	eb 02		 jmp	 SHORT $LN26@dfl2hflbfl
$LN91@dfl2hflbfl:

; 1223 :           }
; 1224 :         }

  01f7a	eb d1		 jmp	 SHORT $LN25@dfl2hflbfl
$LN26@dfl2hflbfl:

; 1225 :       }

  01f7c	eb 0b		 jmp	 SHORT $LN90@dfl2hflbfl
$LN89@dfl2hflbfl:

; 1226 :       else
; 1227 :         mid = 0;

  01f7e	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR mid$[rsp], 0
$LN90@dfl2hflbfl:

; 1228 :       roundarray(hfl, ARRAYMAX, roundrule, rem, 2, neg, 1, mid);

  01f89	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR mid$[rsp]
  01f90	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  01f94	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR [rsp+48], 1
  01f9c	8b 44 24 6c	 mov	 eax, DWORD PTR neg$[rsp]
  01fa0	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  01fa4	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  01fac	44 8b 4c 24 60	 mov	 r9d, DWORD PTR rem$[rsp]
  01fb1	44 8b 44 24 78	 mov	 r8d, DWORD PTR roundrule$[rsp]
  01fb6	ba 07 00 00 00	 mov	 edx, 7
  01fbb	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  01fc3	e8 00 00 00 00	 call	 roundarray

; 1229 :       remtab[rx] = 0;

  01fc8	48 63 44 24 5c	 movsxd	 rax, DWORD PTR rx$[rsp]
  01fcd	c7 84 84 38 01
	00 00 00 00 00
	00		 mov	 DWORD PTR remtab$[rsp+rax*4], 0

; 1230 :       bexp += shiftamt;

  01fd8	8b 44 24 40	 mov	 eax, DWORD PTR shiftamt$[rsp]
  01fdc	8b 4c 24 48	 mov	 ecx, DWORD PTR bexp$[rsp]
  01fe0	03 c8		 add	 ecx, eax
  01fe2	8b c1		 mov	 eax, ecx
  01fe4	89 44 24 48	 mov	 DWORD PTR bexp$[rsp], eax

; 1231 :     }

  01fe8	eb 56		 jmp	 SHORT $LN85@dfl2hflbfl
$LN84@dfl2hflbfl:

; 1232 :     else
; 1233 :       if (numbits < bitctr)

  01fea	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR bitctr$[rsp]
  01ff1	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR numbits$[rsp], eax
  01ff8	7d 46		 jge	 SHORT $LN92@dfl2hflbfl

; 1234 :       {
; 1235 :         delta = bitctr - numbits;

  01ffa	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR numbits$[rsp]
  02001	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR bitctr$[rsp]
  02008	2b c8		 sub	 ecx, eax
  0200a	8b c1		 mov	 eax, ecx
  0200c	89 84 24 ec 00
	00 00		 mov	 DWORD PTR delta$[rsp], eax

; 1236 :         arrayshiftleft(hfl, ARRAYMAX, delta);

  02013	44 8b 84 24 ec
	00 00 00	 mov	 r8d, DWORD PTR delta$[rsp]
  0201b	ba 07 00 00 00	 mov	 edx, 7
  02020	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  02028	e8 00 00 00 00	 call	 arrayshiftleft

; 1237 :         bexp -= delta;

  0202d	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR delta$[rsp]
  02034	8b 4c 24 48	 mov	 ecx, DWORD PTR bexp$[rsp]
  02038	2b c8		 sub	 ecx, eax
  0203a	8b c1		 mov	 eax, ecx
  0203c	89 44 24 48	 mov	 DWORD PTR bexp$[rsp], eax
$LN92@dfl2hflbfl:
$LN85@dfl2hflbfl:

; 1238 :       }
; 1239 :   }

  02040	e9 6c 02 00 00	 jmp	 $LN81@dfl2hflbfl
$LN80@dfl2hflbfl:

; 1240 :   else
; 1241 :   //   converting to hex if here
; 1242 :   {
; 1243 :     ndigit = (ARRAYMAX * 8) - (lzero / 4);

  02045	8b 44 24 54	 mov	 eax, DWORD PTR lzero$[rsp]
  02049	99		 cdq
  0204a	83 e2 03	 and	 edx, 3
  0204d	03 c2		 add	 eax, edx
  0204f	c1 f8 02	 sar	 eax, 2
  02052	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  02057	2b c8		 sub	 ecx, eax
  02059	8b c1		 mov	 eax, ecx
  0205b	89 84 24 b4 00
	00 00		 mov	 DWORD PTR ndigit$[rsp], eax

; 1244 :     if (ndigit > maxdigit)

  02062	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR maxdigit$[rsp]
  02069	39 84 24 b4 00
	00 00		 cmp	 DWORD PTR ndigit$[rsp], eax
  02070	0f 8e e9 01 00
	00		 jle	 $LN93@dfl2hflbfl

; 1245 :     {
; 1246 :       shiftamt = (ndigit - maxdigit) * 4;

  02076	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR maxdigit$[rsp]
  0207d	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR ndigit$[rsp]
  02084	2b c8		 sub	 ecx, eax
  02086	8b c1		 mov	 eax, ecx
  02088	c1 e0 02	 shl	 eax, 2
  0208b	89 44 24 40	 mov	 DWORD PTR shiftamt$[rsp], eax

; 1247 :       arrayshiftright(hfl, ARRAYMAX, shiftamt, remtab);

  0208f	4c 8d 8c 24 38
	01 00 00	 lea	 r9, QWORD PTR remtab$[rsp]
  02097	44 8b 44 24 40	 mov	 r8d, DWORD PTR shiftamt$[rsp]
  0209c	ba 07 00 00 00	 mov	 edx, 7
  020a1	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  020a9	e8 00 00 00 00	 call	 arrayshiftright

; 1248 :       if (memcmp(remtab, binzero, sizeof(remtab)) != 0)

  020ae	41 b8 1c 00 00
	00		 mov	 r8d, 28
  020b4	48 8d 94 24 c0
	05 00 00	 lea	 rdx, QWORD PTR binzero$[rsp]
  020bc	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR remtab$[rsp]
  020c4	e8 00 00 00 00	 call	 memcmp
  020c9	85 c0		 test	 eax, eax
  020cb	74 18		 je	 SHORT $LN95@dfl2hflbfl

; 1249 :         *fpc |= FPC_FLAG_SFX;

  020cd	48 8b 84 24 80
	1e 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  020d5	8b 00		 mov	 eax, DWORD PTR [rax]
  020d7	0f ba e8 13	 bts	 eax, 19
  020db	48 8b 8c 24 80
	1e 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  020e3	89 01		 mov	 DWORD PTR [rcx], eax
$LN95@dfl2hflbfl:

; 1250 :       if (shiftamt % 32)

  020e5	8b 44 24 40	 mov	 eax, DWORD PTR shiftamt$[rsp]
  020e9	99		 cdq
  020ea	83 e2 1f	 and	 edx, 31
  020ed	03 c2		 add	 eax, edx
  020ef	83 e0 1f	 and	 eax, 31
  020f2	2b c2		 sub	 eax, edx
  020f4	85 c0		 test	 eax, eax
  020f6	74 1e		 je	 SHORT $LN96@dfl2hflbfl

; 1251 :         rx = ARRAYMAX - (shiftamt / 32) - 1;

  020f8	8b 44 24 40	 mov	 eax, DWORD PTR shiftamt$[rsp]
  020fc	99		 cdq
  020fd	83 e2 1f	 and	 edx, 31
  02100	03 c2		 add	 eax, edx
  02102	c1 f8 05	 sar	 eax, 5
  02105	b9 07 00 00 00	 mov	 ecx, 7
  0210a	2b c8		 sub	 ecx, eax
  0210c	8b c1		 mov	 eax, ecx
  0210e	ff c8		 dec	 eax
  02110	89 44 24 5c	 mov	 DWORD PTR rx$[rsp], eax
  02114	eb 1a		 jmp	 SHORT $LN97@dfl2hflbfl
$LN96@dfl2hflbfl:

; 1252 :       else
; 1253 :         rx = ARRAYMAX - (shiftamt / 32);

  02116	8b 44 24 40	 mov	 eax, DWORD PTR shiftamt$[rsp]
  0211a	99		 cdq
  0211b	83 e2 1f	 and	 edx, 31
  0211e	03 c2		 add	 eax, edx
  02120	c1 f8 05	 sar	 eax, 5
  02123	b9 07 00 00 00	 mov	 ecx, 7
  02128	2b c8		 sub	 ecx, eax
  0212a	8b c1		 mov	 eax, ecx
  0212c	89 44 24 5c	 mov	 DWORD PTR rx$[rsp], eax
$LN97@dfl2hflbfl:

; 1254 :       rbit = 32 - (shiftamt % 32);

  02130	8b 44 24 40	 mov	 eax, DWORD PTR shiftamt$[rsp]
  02134	99		 cdq
  02135	83 e2 1f	 and	 edx, 31
  02138	03 c2		 add	 eax, edx
  0213a	83 e0 1f	 and	 eax, 31
  0213d	2b c2		 sub	 eax, edx
  0213f	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  02144	2b c8		 sub	 ecx, eax
  02146	8b c1		 mov	 eax, ecx
  02148	89 84 24 80 00
	00 00		 mov	 DWORD PTR rbit$[rsp], eax

; 1255 :       rem = remtab[rx] >> (28 - rbit);

  0214f	48 63 44 24 5c	 movsxd	 rax, DWORD PTR rx$[rsp]
  02154	b9 1c 00 00 00	 mov	 ecx, 28
  02159	2b 8c 24 80 00
	00 00		 sub	 ecx, DWORD PTR rbit$[rsp]
  02160	8b 84 84 38 01
	00 00		 mov	 eax, DWORD PTR remtab$[rsp+rax*4]
  02167	d3 e8		 shr	 eax, cl
  02169	89 44 24 60	 mov	 DWORD PTR rem$[rsp], eax

; 1256 :       remtab[rx] = (remtab[rx] << (rbit + 4)) >> (rbit + 4);

  0216d	48 63 44 24 5c	 movsxd	 rax, DWORD PTR rx$[rsp]
  02172	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR rbit$[rsp]
  02179	83 c1 04	 add	 ecx, 4
  0217c	8b 84 84 38 01
	00 00		 mov	 eax, DWORD PTR remtab$[rsp+rax*4]
  02183	d3 e0		 shl	 eax, cl
  02185	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR rbit$[rsp]
  0218c	83 c1 04	 add	 ecx, 4
  0218f	d3 e8		 shr	 eax, cl
  02191	48 63 4c 24 5c	 movsxd	 rcx, DWORD PTR rx$[rsp]
  02196	89 84 8c 38 01
	00 00		 mov	 DWORD PTR remtab$[rsp+rcx*4], eax

; 1257 :       if (rem == 8)

  0219d	83 7c 24 60 08	 cmp	 DWORD PTR rem$[rsp], 8
  021a2	75 46		 jne	 SHORT $LN98@dfl2hflbfl

; 1258 :       {
; 1259 :         mid = 1;

  021a4	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR mid$[rsp], 1

; 1260 :         for (i = rx; i < ARRAYMAX; i++)

  021af	8b 44 24 5c	 mov	 eax, DWORD PTR rx$[rsp]
  021b3	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
  021b7	eb 0a		 jmp	 SHORT $LN30@dfl2hflbfl
$LN28@dfl2hflbfl:
  021b9	8b 44 24 44	 mov	 eax, DWORD PTR i$[rsp]
  021bd	ff c0		 inc	 eax
  021bf	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
$LN30@dfl2hflbfl:
  021c3	83 7c 24 44 07	 cmp	 DWORD PTR i$[rsp], 7
  021c8	7d 1e		 jge	 SHORT $LN29@dfl2hflbfl

; 1261 :         {
; 1262 :           if (remtab[i] != 0)

  021ca	48 63 44 24 44	 movsxd	 rax, DWORD PTR i$[rsp]
  021cf	83 bc 84 38 01
	00 00 00	 cmp	 DWORD PTR remtab$[rsp+rax*4], 0
  021d7	74 0d		 je	 SHORT $LN100@dfl2hflbfl

; 1263 :           {
; 1264 :             mid = 0;

  021d9	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR mid$[rsp], 0

; 1265 :             break;

  021e4	eb 02		 jmp	 SHORT $LN29@dfl2hflbfl
$LN100@dfl2hflbfl:

; 1266 :           }
; 1267 :         }

  021e6	eb d1		 jmp	 SHORT $LN28@dfl2hflbfl
$LN29@dfl2hflbfl:

; 1268 :       }

  021e8	eb 0b		 jmp	 SHORT $LN99@dfl2hflbfl
$LN98@dfl2hflbfl:

; 1269 :       else
; 1270 :         mid = 0;

  021ea	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR mid$[rsp], 0
$LN99@dfl2hflbfl:

; 1271 :       roundarray(hfl, ARRAYMAX, roundrule, rem, 16, neg, 0, mid);

  021f5	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR mid$[rsp]
  021fc	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  02200	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  02208	8b 44 24 6c	 mov	 eax, DWORD PTR neg$[rsp]
  0220c	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  02210	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02218	44 8b 4c 24 60	 mov	 r9d, DWORD PTR rem$[rsp]
  0221d	44 8b 44 24 78	 mov	 r8d, DWORD PTR roundrule$[rsp]
  02222	ba 07 00 00 00	 mov	 edx, 7
  02227	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  0222f	e8 00 00 00 00	 call	 roundarray

; 1272 :       remtab[rx] = 0;

  02234	48 63 44 24 5c	 movsxd	 rax, DWORD PTR rx$[rsp]
  02239	c7 84 84 38 01
	00 00 00 00 00
	00		 mov	 DWORD PTR remtab$[rsp+rax*4], 0

; 1273 :       hexp += shiftamt / 4;

  02244	8b 44 24 40	 mov	 eax, DWORD PTR shiftamt$[rsp]
  02248	99		 cdq
  02249	83 e2 03	 and	 edx, 3
  0224c	03 c2		 add	 eax, edx
  0224e	c1 f8 02	 sar	 eax, 2
  02251	8b 4c 24 4c	 mov	 ecx, DWORD PTR hexp$[rsp]
  02255	03 c8		 add	 ecx, eax
  02257	8b c1		 mov	 eax, ecx
  02259	89 44 24 4c	 mov	 DWORD PTR hexp$[rsp], eax

; 1274 :     }

  0225d	eb 52		 jmp	 SHORT $LN94@dfl2hflbfl
$LN93@dfl2hflbfl:

; 1275 :     else
; 1276 :     if (ndigit < maxdigit)

  0225f	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR maxdigit$[rsp]
  02266	39 84 24 b4 00
	00 00		 cmp	 DWORD PTR ndigit$[rsp], eax
  0226d	7d 42		 jge	 SHORT $LN101@dfl2hflbfl

; 1277 :     {
; 1278 :       shiftamt = maxdigit - ndigit;

  0226f	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR ndigit$[rsp]
  02276	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR maxdigit$[rsp]
  0227d	2b c8		 sub	 ecx, eax
  0227f	8b c1		 mov	 eax, ecx
  02281	89 44 24 40	 mov	 DWORD PTR shiftamt$[rsp], eax

; 1279 :       arrayshiftleft(hfl, ARRAYMAX, shiftamt * 4);

  02285	8b 44 24 40	 mov	 eax, DWORD PTR shiftamt$[rsp]
  02289	c1 e0 02	 shl	 eax, 2
  0228c	44 8b c0	 mov	 r8d, eax
  0228f	ba 07 00 00 00	 mov	 edx, 7
  02294	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  0229c	e8 00 00 00 00	 call	 arrayshiftleft

; 1280 :       hexp -= shiftamt;

  022a1	8b 44 24 40	 mov	 eax, DWORD PTR shiftamt$[rsp]
  022a5	8b 4c 24 4c	 mov	 ecx, DWORD PTR hexp$[rsp]
  022a9	2b c8		 sub	 ecx, eax
  022ab	8b c1		 mov	 eax, ecx
  022ad	89 44 24 4c	 mov	 DWORD PTR hexp$[rsp], eax
$LN101@dfl2hflbfl:
$LN94@dfl2hflbfl:
$LN81@dfl2hflbfl:

; 1281 :     }
; 1282 :   }
; 1283 :   /***************************************************************/
; 1284 :   /*   now normalize it.                                         */
; 1285 :   /***************************************************************/
; 1286 :   lzero = getlzerobits(hfl, ARRAYMAX);

  022b1	ba 07 00 00 00	 mov	 edx, 7
  022b6	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  022be	e8 00 00 00 00	 call	 getlzerobits
  022c3	89 44 24 54	 mov	 DWORD PTR lzero$[rsp], eax

; 1287 :   shiftstd = 32 * (ARRAYPAD + 4 - hflwords);

  022c7	b8 07 00 00 00	 mov	 eax, 7
  022cc	2b 84 24 68 1e
	00 00		 sub	 eax, DWORD PTR hflwords$[rsp]
  022d3	6b c0 20	 imul	 eax, eax, 32		; 00000020H
  022d6	89 84 24 d4 00
	00 00		 mov	 DWORD PTR shiftstd$[rsp], eax

; 1288 :   if (binflg)

  022dd	83 bc 24 78 1e
	00 00 00	 cmp	 DWORD PTR binflg$[rsp], 0
  022e5	0f 84 8c 01 00
	00		 je	 $LN102@dfl2hflbfl

; 1289 :   {
; 1290 :     expbits = bflexpbits[hflwords];

  022eb	48 63 84 24 68
	1e 00 00	 movsxd	 rax, DWORD PTR hflwords$[rsp]
  022f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bflexpbits
  022fa	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  022fd	89 44 24 70	 mov	 DWORD PTR expbits$[rsp], eax

; 1291 :     wk1 = bexp + bflexpbias[hflwords];

  02301	48 63 84 24 68
	1e 00 00	 movsxd	 rax, DWORD PTR hflwords$[rsp]
  02309	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bflexpbias
  02310	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  02313	8b 4c 24 48	 mov	 ecx, DWORD PTR bexp$[rsp]
  02317	03 c8		 add	 ecx, eax
  02319	8b c1		 mov	 eax, ecx
  0231b	89 44 24 64	 mov	 DWORD PTR wk1$[rsp], eax

; 1292 :     if (wk1 > 0)

  0231f	83 7c 24 64 00	 cmp	 DWORD PTR wk1$[rsp], 0
  02324	76 14		 jbe	 SHORT $LN104@dfl2hflbfl

; 1293 :       shiftamt = lzero - expbits + 1;

  02326	8b 44 24 70	 mov	 eax, DWORD PTR expbits$[rsp]
  0232a	8b 4c 24 54	 mov	 ecx, DWORD PTR lzero$[rsp]
  0232e	2b c8		 sub	 ecx, eax
  02330	8b c1		 mov	 eax, ecx
  02332	ff c0		 inc	 eax
  02334	89 44 24 40	 mov	 DWORD PTR shiftamt$[rsp], eax
  02338	eb 10		 jmp	 SHORT $LN105@dfl2hflbfl
$LN104@dfl2hflbfl:

; 1294 :     else
; 1295 :       shiftamt = lzero - expbits;

  0233a	8b 44 24 70	 mov	 eax, DWORD PTR expbits$[rsp]
  0233e	8b 4c 24 54	 mov	 ecx, DWORD PTR lzero$[rsp]
  02342	2b c8		 sub	 ecx, eax
  02344	8b c1		 mov	 eax, ecx
  02346	89 44 24 40	 mov	 DWORD PTR shiftamt$[rsp], eax
$LN105@dfl2hflbfl:

; 1296 :     bexp -= (shiftamt - shiftstd);

  0234a	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR shiftstd$[rsp]
  02351	8b 4c 24 40	 mov	 ecx, DWORD PTR shiftamt$[rsp]
  02355	2b c8		 sub	 ecx, eax
  02357	8b c1		 mov	 eax, ecx
  02359	8b 4c 24 48	 mov	 ecx, DWORD PTR bexp$[rsp]
  0235d	2b c8		 sub	 ecx, eax
  0235f	8b c1		 mov	 eax, ecx
  02361	89 44 24 48	 mov	 DWORD PTR bexp$[rsp], eax

; 1297 :     bexp += maxbits;

  02365	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR maxbits$[rsp]
  0236c	8b 4c 24 48	 mov	 ecx, DWORD PTR bexp$[rsp]
  02370	03 c8		 add	 ecx, eax
  02372	8b c1		 mov	 eax, ecx
  02374	89 44 24 48	 mov	 DWORD PTR bexp$[rsp], eax

; 1298 :     bexp += bflexpbias[hflwords];

  02378	48 63 84 24 68
	1e 00 00	 movsxd	 rax, DWORD PTR hflwords$[rsp]
  02380	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bflexpbias
  02387	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  0238a	8b 4c 24 48	 mov	 ecx, DWORD PTR bexp$[rsp]
  0238e	03 c8		 add	 ecx, eax
  02390	8b c1		 mov	 eax, ecx
  02392	89 44 24 48	 mov	 DWORD PTR bexp$[rsp], eax

; 1299 :     if (bexp > 0)

  02396	83 7c 24 48 00	 cmp	 DWORD PTR bexp$[rsp], 0
  0239b	0f 8e d1 00 00
	00		 jle	 $LN106@dfl2hflbfl

; 1300 :     {
; 1301 :       arrayshiftleft(hfl, ARRAYMAX, shiftamt);

  023a1	44 8b 44 24 40	 mov	 r8d, DWORD PTR shiftamt$[rsp]
  023a6	ba 07 00 00 00	 mov	 edx, 7
  023ab	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  023b3	e8 00 00 00 00	 call	 arrayshiftleft

; 1302 :       if (bexp > 0)

  023b8	83 7c 24 48 00	 cmp	 DWORD PTR bexp$[rsp], 0
  023bd	7e 52		 jle	 SHORT $LN107@dfl2hflbfl

; 1303 :       {
; 1304 :         hfl[0] <<= expbits + 32;

  023bf	b8 04 00 00 00	 mov	 eax, 4
  023c4	48 6b c0 00	 imul	 rax, rax, 0
  023c8	8b 4c 24 70	 mov	 ecx, DWORD PTR expbits$[rsp]
  023cc	83 c1 20	 add	 ecx, 32			; 00000020H
  023cf	8b 84 04 18 01
	00 00		 mov	 eax, DWORD PTR hfl$[rsp+rax]
  023d6	d3 e0		 shl	 eax, cl
  023d8	b9 04 00 00 00	 mov	 ecx, 4
  023dd	48 6b c9 00	 imul	 rcx, rcx, 0
  023e1	89 84 0c 18 01
	00 00		 mov	 DWORD PTR hfl$[rsp+rcx], eax

; 1305 :         hfl[0] >>= expbits + 32;

  023e8	b8 04 00 00 00	 mov	 eax, 4
  023ed	48 6b c0 00	 imul	 rax, rax, 0
  023f1	8b 4c 24 70	 mov	 ecx, DWORD PTR expbits$[rsp]
  023f5	83 c1 20	 add	 ecx, 32			; 00000020H
  023f8	8b 84 04 18 01
	00 00		 mov	 eax, DWORD PTR hfl$[rsp+rax]
  023ff	d3 e8		 shr	 eax, cl
  02401	b9 04 00 00 00	 mov	 ecx, 4
  02406	48 6b c9 00	 imul	 rcx, rcx, 0
  0240a	89 84 0c 18 01
	00 00		 mov	 DWORD PTR hfl$[rsp+rcx], eax
$LN107@dfl2hflbfl:

; 1306 :       }
; 1307 :       wk1 = bexp;

  02411	8b 44 24 48	 mov	 eax, DWORD PTR bexp$[rsp]
  02415	89 44 24 64	 mov	 DWORD PTR wk1$[rsp], eax

; 1308 :       if (bexp <= bflexpmax[hflwords] && bexp >= 0)

  02419	48 63 84 24 68
	1e 00 00	 movsxd	 rax, DWORD PTR hflwords$[rsp]
  02421	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bflexpmax
  02428	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  0242b	39 44 24 48	 cmp	 DWORD PTR bexp$[rsp], eax
  0242f	7f 41		 jg	 SHORT $LN108@dfl2hflbfl
  02431	83 7c 24 48 00	 cmp	 DWORD PTR bexp$[rsp], 0
  02436	7c 3a		 jl	 SHORT $LN108@dfl2hflbfl

; 1309 :       {
; 1310 :         wk1 <<= (32 - expbits);

  02438	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0243d	2b 44 24 70	 sub	 eax, DWORD PTR expbits$[rsp]
  02441	0f b6 c8	 movzx	 ecx, al
  02444	8b 44 24 64	 mov	 eax, DWORD PTR wk1$[rsp]
  02448	d3 e0		 shl	 eax, cl
  0244a	89 44 24 64	 mov	 DWORD PTR wk1$[rsp], eax

; 1311 :         hfl[0] += wk1;

  0244e	b8 04 00 00 00	 mov	 eax, 4
  02453	48 6b c0 00	 imul	 rax, rax, 0
  02457	8b 84 04 18 01
	00 00		 mov	 eax, DWORD PTR hfl$[rsp+rax]
  0245e	03 44 24 64	 add	 eax, DWORD PTR wk1$[rsp]
  02462	b9 04 00 00 00	 mov	 ecx, 4
  02467	48 6b c9 00	 imul	 rcx, rcx, 0
  0246b	89 84 0c 18 01
	00 00		 mov	 DWORD PTR hfl$[rsp+rcx], eax
$LN108@dfl2hflbfl:
$LN106@dfl2hflbfl:

; 1312 :       }
; 1313 :     }
; 1314 :   }

  02472	e9 f2 00 00 00	 jmp	 $LN103@dfl2hflbfl
$LN102@dfl2hflbfl:

; 1315 :   else
; 1316 :   {
; 1317 :     lzerohex = (lzero >> 2) << 2;

  02477	8b 44 24 54	 mov	 eax, DWORD PTR lzero$[rsp]
  0247b	c1 f8 02	 sar	 eax, 2
  0247e	c1 e0 02	 shl	 eax, 2
  02481	89 84 24 a4 00
	00 00		 mov	 DWORD PTR lzerohex$[rsp], eax

; 1318 :     shiftamt = lzerohex - 8;

  02488	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR lzerohex$[rsp]
  0248f	83 e8 08	 sub	 eax, 8
  02492	89 44 24 40	 mov	 DWORD PTR shiftamt$[rsp], eax

; 1319 :     if (hflwords == 4)

  02496	83 bc 24 68 1e
	00 00 04	 cmp	 DWORD PTR hflwords$[rsp], 4
  0249e	75 29		 jne	 SHORT $LN109@dfl2hflbfl

; 1320 :       hexp -= (shiftamt - shiftstd - 8) / 4;

  024a0	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR shiftstd$[rsp]
  024a7	8b 4c 24 40	 mov	 ecx, DWORD PTR shiftamt$[rsp]
  024ab	2b c8		 sub	 ecx, eax
  024ad	8b c1		 mov	 eax, ecx
  024af	83 e8 08	 sub	 eax, 8
  024b2	99		 cdq
  024b3	83 e2 03	 and	 edx, 3
  024b6	03 c2		 add	 eax, edx
  024b8	c1 f8 02	 sar	 eax, 2
  024bb	8b 4c 24 4c	 mov	 ecx, DWORD PTR hexp$[rsp]
  024bf	2b c8		 sub	 ecx, eax
  024c1	8b c1		 mov	 eax, ecx
  024c3	89 44 24 4c	 mov	 DWORD PTR hexp$[rsp], eax
  024c7	eb 24		 jmp	 SHORT $LN110@dfl2hflbfl
$LN109@dfl2hflbfl:

; 1321 :     else
; 1322 :       hexp -= (shiftamt - shiftstd) / 4;

  024c9	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR shiftstd$[rsp]
  024d0	8b 4c 24 40	 mov	 ecx, DWORD PTR shiftamt$[rsp]
  024d4	2b c8		 sub	 ecx, eax
  024d6	8b c1		 mov	 eax, ecx
  024d8	99		 cdq
  024d9	83 e2 03	 and	 edx, 3
  024dc	03 c2		 add	 eax, edx
  024de	c1 f8 02	 sar	 eax, 2
  024e1	8b 4c 24 4c	 mov	 ecx, DWORD PTR hexp$[rsp]
  024e5	2b c8		 sub	 ecx, eax
  024e7	8b c1		 mov	 eax, ecx
  024e9	89 44 24 4c	 mov	 DWORD PTR hexp$[rsp], eax
$LN110@dfl2hflbfl:

; 1323 :     arrayshiftleft(hfl, ARRAYMAX, shiftamt);

  024ed	44 8b 44 24 40	 mov	 r8d, DWORD PTR shiftamt$[rsp]
  024f2	ba 07 00 00 00	 mov	 edx, 7
  024f7	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR hfl$[rsp]
  024ff	e8 00 00 00 00	 call	 arrayshiftleft

; 1324 :     hexp += maxdigit;

  02504	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR maxdigit$[rsp]
  0250b	8b 4c 24 4c	 mov	 ecx, DWORD PTR hexp$[rsp]
  0250f	03 c8		 add	 ecx, eax
  02511	8b c1		 mov	 eax, ecx
  02513	89 44 24 4c	 mov	 DWORD PTR hexp$[rsp], eax

; 1325 :     hexp += 64;

  02517	8b 44 24 4c	 mov	 eax, DWORD PTR hexp$[rsp]
  0251b	83 c0 40	 add	 eax, 64			; 00000040H
  0251e	89 44 24 4c	 mov	 DWORD PTR hexp$[rsp], eax

; 1326 :     wk = hexp << 24;

  02522	8b 44 24 4c	 mov	 eax, DWORD PTR hexp$[rsp]
  02526	c1 e0 18	 shl	 eax, 24
  02529	48 98		 cdqe
  0252b	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR wk$[rsp], rax

; 1327 :     if (hexp <= 127 && hexp >= 0)

  02533	83 7c 24 4c 7f	 cmp	 DWORD PTR hexp$[rsp], 127 ; 0000007fH
  02538	7f 2f		 jg	 SHORT $LN111@dfl2hflbfl
  0253a	83 7c 24 4c 00	 cmp	 DWORD PTR hexp$[rsp], 0
  0253f	7c 28		 jl	 SHORT $LN111@dfl2hflbfl

; 1328 :       hfl[0] += wk;

  02541	b8 04 00 00 00	 mov	 eax, 4
  02546	48 6b c0 00	 imul	 rax, rax, 0
  0254a	8b 84 04 18 01
	00 00		 mov	 eax, DWORD PTR hfl$[rsp+rax]
  02551	48 03 84 24 10
	01 00 00	 add	 rax, QWORD PTR wk$[rsp]
  02559	b9 04 00 00 00	 mov	 ecx, 4
  0255e	48 6b c9 00	 imul	 rcx, rcx, 0
  02562	89 84 0c 18 01
	00 00		 mov	 DWORD PTR hfl$[rsp+rcx], eax
$LN111@dfl2hflbfl:
$LN103@dfl2hflbfl:

; 1329 : 
; 1330 :   }
; 1331 :   for (i = 0;i < hflwords;i++)

  02569	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  02571	eb 0a		 jmp	 SHORT $LN33@dfl2hflbfl
$LN31@dfl2hflbfl:
  02573	8b 44 24 44	 mov	 eax, DWORD PTR i$[rsp]
  02577	ff c0		 inc	 eax
  02579	89 44 24 44	 mov	 DWORD PTR i$[rsp], eax
$LN33@dfl2hflbfl:
  0257d	8b 84 24 68 1e
	00 00		 mov	 eax, DWORD PTR hflwords$[rsp]
  02584	39 44 24 44	 cmp	 DWORD PTR i$[rsp], eax
  02588	7d 1e		 jge	 SHORT $LN32@dfl2hflbfl

; 1332 :     hfltab[i] = (unsigned int)hfl[i];

  0258a	48 63 44 24 44	 movsxd	 rax, DWORD PTR i$[rsp]
  0258f	48 63 4c 24 44	 movsxd	 rcx, DWORD PTR i$[rsp]
  02594	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  0259c	8b 84 84 18 01
	00 00		 mov	 eax, DWORD PTR hfl$[rsp+rax*4]
  025a3	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
  025a6	eb cb		 jmp	 SHORT $LN31@dfl2hflbfl
$LN32@dfl2hflbfl:

; 1333 :   /***************************************************************/
; 1334 :   /*   if an extended hex float, add the low order exponent.     */
; 1335 :   /***************************************************************/
; 1336 :   if (hflwords == 4 && binflg == 0x00)

  025a8	83 bc 24 68 1e
	00 00 04	 cmp	 DWORD PTR hflwords$[rsp], 4
  025b0	0f 85 7e 02 00
	00		 jne	 $LN112@dfl2hflbfl
  025b6	83 bc 24 78 1e
	00 00 00	 cmp	 DWORD PTR binflg$[rsp], 0
  025be	0f 85 70 02 00
	00		 jne	 $LN112@dfl2hflbfl

; 1337 :   {
; 1338 :     temp1 = hfltab[3] & 0x000000ff;

  025c4	b8 04 00 00 00	 mov	 eax, 4
  025c9	48 6b c0 03	 imul	 rax, rax, 3
  025cd	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  025d5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  025d8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  025dd	89 44 24 50	 mov	 DWORD PTR temp1$[rsp], eax

; 1339 :     arrayshiftright(hfltab, 4, 8, remtab);

  025e1	4c 8d 8c 24 38
	01 00 00	 lea	 r9, QWORD PTR remtab$[rsp]
  025e9	41 b8 08 00 00
	00		 mov	 r8d, 8
  025ef	ba 04 00 00 00	 mov	 edx, 4
  025f4	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  025fc	e8 00 00 00 00	 call	 arrayshiftright

; 1340 :     rem = temp1 >> 4;

  02601	8b 44 24 50	 mov	 eax, DWORD PTR temp1$[rsp]
  02605	c1 e8 04	 shr	 eax, 4
  02608	89 44 24 60	 mov	 DWORD PTR rem$[rsp], eax

; 1341 :     temp2 = temp1 & 0x0000000f;

  0260c	8b 44 24 50	 mov	 eax, DWORD PTR temp1$[rsp]
  02610	83 e0 0f	 and	 eax, 15
  02613	89 44 24 74	 mov	 DWORD PTR temp2$[rsp], eax

; 1342 :     if (temp2 > 0)

  02617	83 7c 24 74 00	 cmp	 DWORD PTR temp2$[rsp], 0
  0261c	76 41		 jbe	 SHORT $LN113@dfl2hflbfl

; 1343 :       roundarray(hfltab, 4, roundrule, rem, 16, neg, 0, 0);

  0261e	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  02626	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0262e	8b 44 24 6c	 mov	 eax, DWORD PTR neg$[rsp]
  02632	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  02636	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0263e	44 8b 4c 24 60	 mov	 r9d, DWORD PTR rem$[rsp]
  02643	44 8b 44 24 78	 mov	 r8d, DWORD PTR roundrule$[rsp]
  02648	ba 04 00 00 00	 mov	 edx, 4
  0264d	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  02655	e8 00 00 00 00	 call	 roundarray
  0265a	e9 81 00 00 00	 jmp	 $LN114@dfl2hflbfl
$LN113@dfl2hflbfl:

; 1344 :     else
; 1345 :       if (temp2 == 0)

  0265f	83 7c 24 74 00	 cmp	 DWORD PTR temp2$[rsp], 0
  02664	75 3e		 jne	 SHORT $LN115@dfl2hflbfl

; 1346 :         roundarray(hfltab, 4, roundrule, rem, 16, neg, 0, 1);

  02666	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR [rsp+56], 1
  0266e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  02676	8b 44 24 6c	 mov	 eax, DWORD PTR neg$[rsp]
  0267a	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0267e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  02686	44 8b 4c 24 60	 mov	 r9d, DWORD PTR rem$[rsp]
  0268b	44 8b 44 24 78	 mov	 r8d, DWORD PTR roundrule$[rsp]
  02690	ba 04 00 00 00	 mov	 edx, 4
  02695	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  0269d	e8 00 00 00 00	 call	 roundarray
  026a2	eb 3c		 jmp	 SHORT $LN116@dfl2hflbfl
$LN115@dfl2hflbfl:

; 1347 :       else
; 1348 :         roundarray(hfltab, 4, roundrule, rem, 16, neg, 0, 0);

  026a4	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  026ac	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  026b4	8b 44 24 6c	 mov	 eax, DWORD PTR neg$[rsp]
  026b8	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  026bc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  026c4	44 8b 4c 24 60	 mov	 r9d, DWORD PTR rem$[rsp]
  026c9	44 8b 44 24 78	 mov	 r8d, DWORD PTR roundrule$[rsp]
  026ce	ba 04 00 00 00	 mov	 edx, 4
  026d3	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  026db	e8 00 00 00 00	 call	 roundarray
$LN116@dfl2hflbfl:
$LN114@dfl2hflbfl:

; 1349 :     temp1 = hfltab[2] >> 24;

  026e0	b8 04 00 00 00	 mov	 eax, 4
  026e5	48 6b c0 02	 imul	 rax, rax, 2
  026e9	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  026f1	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  026f4	c1 e8 18	 shr	 eax, 24
  026f7	89 44 24 50	 mov	 DWORD PTR temp1$[rsp], eax

; 1350 :     hfltab[2] &= 0x00ffffff;

  026fb	b8 04 00 00 00	 mov	 eax, 4
  02700	48 6b c0 02	 imul	 rax, rax, 2
  02704	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  0270c	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0270f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02714	b9 04 00 00 00	 mov	 ecx, 4
  02719	48 6b c9 02	 imul	 rcx, rcx, 2
  0271d	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  02725	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1351 :     temp2 = hfltab[1] >> 24;

  02728	b8 04 00 00 00	 mov	 eax, 4
  0272d	48 6b c0 01	 imul	 rax, rax, 1
  02731	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  02739	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0273c	c1 e8 18	 shr	 eax, 24
  0273f	89 44 24 74	 mov	 DWORD PTR temp2$[rsp], eax

; 1352 :     hfltab[1] <<= 8;

  02743	b8 04 00 00 00	 mov	 eax, 4
  02748	48 6b c0 01	 imul	 rax, rax, 1
  0274c	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  02754	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  02757	c1 e0 08	 shl	 eax, 8
  0275a	b9 04 00 00 00	 mov	 ecx, 4
  0275f	48 6b c9 01	 imul	 rcx, rcx, 1
  02763	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  0276b	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1353 :     hfltab[1] += temp1;

  0276e	b8 04 00 00 00	 mov	 eax, 4
  02773	48 6b c0 01	 imul	 rax, rax, 1
  02777	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  0277f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  02782	03 44 24 50	 add	 eax, DWORD PTR temp1$[rsp]
  02786	b9 04 00 00 00	 mov	 ecx, 4
  0278b	48 6b c9 01	 imul	 rcx, rcx, 1
  0278f	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  02797	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1354 :     hfltab[0] <<= 8;

  0279a	b8 04 00 00 00	 mov	 eax, 4
  0279f	48 6b c0 00	 imul	 rax, rax, 0
  027a3	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  027ab	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  027ae	c1 e0 08	 shl	 eax, 8
  027b1	b9 04 00 00 00	 mov	 ecx, 4
  027b6	48 6b c9 00	 imul	 rcx, rcx, 0
  027ba	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  027c2	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1355 :     hfltab[0] += temp2;

  027c5	b8 04 00 00 00	 mov	 eax, 4
  027ca	48 6b c0 00	 imul	 rax, rax, 0
  027ce	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  027d6	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  027d9	03 44 24 74	 add	 eax, DWORD PTR temp2$[rsp]
  027dd	b9 04 00 00 00	 mov	 ecx, 4
  027e2	48 6b c9 00	 imul	 rcx, rcx, 0
  027e6	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  027ee	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 1356 :     wk1 = hexp - 14;

  027f1	8b 44 24 4c	 mov	 eax, DWORD PTR hexp$[rsp]
  027f5	83 e8 0e	 sub	 eax, 14
  027f8	89 44 24 64	 mov	 DWORD PTR wk1$[rsp], eax

; 1357 :     if (wk1 > 0)

  027fc	83 7c 24 64 00	 cmp	 DWORD PTR wk1$[rsp], 0
  02801	76 31		 jbe	 SHORT $LN117@dfl2hflbfl

; 1358 :       hfltab[2] += (wk1 << 24);

  02803	b8 04 00 00 00	 mov	 eax, 4
  02808	48 6b c0 02	 imul	 rax, rax, 2
  0280c	8b 4c 24 64	 mov	 ecx, DWORD PTR wk1$[rsp]
  02810	c1 e1 18	 shl	 ecx, 24
  02813	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  0281b	03 0c 02	 add	 ecx, DWORD PTR [rdx+rax]
  0281e	8b c1		 mov	 eax, ecx
  02820	b9 04 00 00 00	 mov	 ecx, 4
  02825	48 6b c9 02	 imul	 rcx, rcx, 2
  02829	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  02831	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax
$LN117@dfl2hflbfl:
$LN112@dfl2hflbfl:

; 1359 :   }
; 1360 :   if (!exact)

  02834	83 bc 24 d8 00
	00 00 00	 cmp	 DWORD PTR exact$[rsp], 0
  0283c	75 18		 jne	 SHORT $LN118@dfl2hflbfl

; 1361 :     *fpc |= FPC_FLAG_SFX;

  0283e	48 8b 84 24 80
	1e 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  02846	8b 00		 mov	 eax, DWORD PTR [rax]
  02848	0f ba e8 13	 bts	 eax, 19
  0284c	48 8b 8c 24 80
	1e 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  02854	89 01		 mov	 DWORD PTR [rcx], eax
$LN118@dfl2hflbfl:

; 1362 :   if (binflg)

  02856	83 bc 24 78 1e
	00 00 00	 cmp	 DWORD PTR binflg$[rsp], 0
  0285e	74 48		 je	 SHORT $LN119@dfl2hflbfl

; 1363 :     cc = checkbfp(hfltab, hflwords, bexp, optbits, fpc, roundrule, neg);

  02860	8b 44 24 6c	 mov	 eax, DWORD PTR neg$[rsp]
  02864	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  02868	8b 44 24 78	 mov	 eax, DWORD PTR roundrule$[rsp]
  0286c	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  02870	48 8b 84 24 80
	1e 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  02878	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0287d	44 0f b6 8c 24
	70 1e 00 00	 movzx	 r9d, BYTE PTR optbits$[rsp]
  02886	44 8b 44 24 48	 mov	 r8d, DWORD PTR bexp$[rsp]
  0288b	8b 94 24 68 1e
	00 00		 mov	 edx, DWORD PTR hflwords$[rsp]
  02892	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  0289a	e8 00 00 00 00	 call	 checkbfp
  0289f	89 84 24 a8 00
	00 00		 mov	 DWORD PTR cc$[rsp], eax
  028a6	eb 46		 jmp	 SHORT $LN120@dfl2hflbfl
$LN119@dfl2hflbfl:

; 1364 :   else
; 1365 :     cc = checkhfp(hfltab, hflwords, &hexp, optbits, fpc, roundrule, neg);

  028a8	8b 44 24 6c	 mov	 eax, DWORD PTR neg$[rsp]
  028ac	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  028b0	8b 44 24 78	 mov	 eax, DWORD PTR roundrule$[rsp]
  028b4	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  028b8	48 8b 84 24 80
	1e 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  028c0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  028c5	44 0f b6 8c 24
	70 1e 00 00	 movzx	 r9d, BYTE PTR optbits$[rsp]
  028ce	4c 8d 44 24 4c	 lea	 r8, QWORD PTR hexp$[rsp]
  028d3	8b 94 24 68 1e
	00 00		 mov	 edx, DWORD PTR hflwords$[rsp]
  028da	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  028e2	e8 00 00 00 00	 call	 checkhfp
  028e7	89 84 24 a8 00
	00 00		 mov	 DWORD PTR cc$[rsp], eax
$LN120@dfl2hflbfl:

; 1366 :   if (neg)

  028ee	83 7c 24 6c 00	 cmp	 DWORD PTR neg$[rsp], 0
  028f3	74 2c		 je	 SHORT $LN121@dfl2hflbfl

; 1367 :     hfltab[0] |= 0x80000000;

  028f5	b8 04 00 00 00	 mov	 eax, 4
  028fa	48 6b c0 00	 imul	 rax, rax, 0
  028fe	48 8b 8c 24 58
	1e 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  02906	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  02909	0f ba e8 1f	 bts	 eax, 31
  0290d	b9 04 00 00 00	 mov	 ecx, 4
  02912	48 6b c9 00	 imul	 rcx, rcx, 0
  02916	48 8b 94 24 58
	1e 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  0291e	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax
$LN121@dfl2hflbfl:

; 1368 :   return cc;

  02921	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR cc$[rsp]
$LN1@dfl2hflbfl:

; 1369 : }

  02928	48 8b 8c 24 30
	1e 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  02930	48 33 cc	 xor	 rcx, rsp
  02933	e8 00 00 00 00	 call	 __security_check_cookie
  02938	48 81 c4 40 1e
	00 00		 add	 rsp, 7744		; 00001e40H
  0293f	5f		 pop	 rdi
  02940	c3		 ret	 0
dfl2hflbfl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\pfpo.c
_TEXT	SEGMENT
cc$ = 64
shiftamt$ = 68
rx$ = 72
shiftmax$ = 76
i$ = 80
tv72 = 84
tv94 = 88
tv152 = 92
rbit$ = 96
mid$ = 100
rem$ = 104
maxexp$ = 108
tv129 = 112
tv215 = 120
remtab$ = 128
__$ArrayPad$ = 144
bfltab$ = 176
bflnum$ = 184
bexp$ = 192
optbits$ = 200
fpc$ = 208
roundrule$ = 216
neg$ = 224
checkbfp PROC

; 694  : {

$LN38:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	57		 push	 rdi
  00014	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 695  :   int cc = 0;

  0002d	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR cc$[rsp], 0

; 696  :   int rx;
; 697  :   int rbit;
; 698  :   int mid;
; 699  :   int rem;
; 700  :   int i;
; 701  :   int shiftamt;
; 702  :   int shiftmax = 0;

  00035	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR shiftmax$[rsp], 0

; 703  :   unsigned int remtab[4];
; 704  :   int maxexp = bflexpmax[bflnum];

  0003d	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR bflnum$[rsp]
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:bflexpmax
  0004c	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  0004f	89 44 24 6c	 mov	 DWORD PTR maxexp$[rsp], eax

; 705  :   if (bexp > maxexp)

  00053	8b 44 24 6c	 mov	 eax, DWORD PTR maxexp$[rsp]
  00057	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR bexp$[rsp], eax
  0005e	0f 8e 3d 02 00
	00		 jle	 $LN11@checkbfp

; 706  :   {
; 707  :     if (*fpc & FPC_MASK_IMO)

  00064	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  0006c	8b 00		 mov	 eax, DWORD PTR [rax]
  0006e	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00073	85 c0		 test	 eax, eax
  00075	0f 84 08 01 00
	00		 je	 $LN13@checkbfp

; 708  :     {
; 709  :       *fpc &= ~(FPC_FLAG_SFX | FPC_DXC);;

  0007b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  00083	8b 00		 mov	 eax, DWORD PTR [rax]
  00085	25 ff 00 f7 ff	 and	 eax, -589569		; fffffffffff700ffH
  0008a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  00092	89 01		 mov	 DWORD PTR [rcx], eax

; 710  :       *fpc |= DXC_IEEE_OF_INEX_TRUNC << FPC_DXC_SHIFT;

  00094	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  0009c	8b 00		 mov	 eax, DWORD PTR [rax]
  0009e	0d 00 28 00 00	 or	 eax, 10240		; 00002800H
  000a3	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  000ab	89 01		 mov	 DWORD PTR [rcx], eax

; 711  :       switch (bflnum)

  000ad	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR bflnum$[rsp]
  000b4	89 44 24 54	 mov	 DWORD PTR tv72[rsp], eax
  000b8	83 7c 24 54 01	 cmp	 DWORD PTR tv72[rsp], 1
  000bd	74 13		 je	 SHORT $LN15@checkbfp
  000bf	83 7c 24 54 02	 cmp	 DWORD PTR tv72[rsp], 2
  000c4	74 3b		 je	 SHORT $LN16@checkbfp
  000c6	83 7c 24 54 04	 cmp	 DWORD PTR tv72[rsp], 4
  000cb	74 63		 je	 SHORT $LN17@checkbfp
  000cd	e9 8b 00 00 00	 jmp	 $LN2@checkbfp
$LN15@checkbfp:

; 712  :       {
; 713  :       case 1:
; 714  :         bfltab[0] |= 0x3f800000;

  000d2	b8 04 00 00 00	 mov	 eax, 4
  000d7	48 6b c0 00	 imul	 rax, rax, 0
  000db	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR bfltab$[rsp]
  000e3	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000e6	0d 00 00 80 3f	 or	 eax, 1065353216		; 3f800000H
  000eb	b9 04 00 00 00	 mov	 ecx, 4
  000f0	48 6b c9 00	 imul	 rcx, rcx, 0
  000f4	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR bfltab$[rsp]
  000fc	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 715  :         break;

  000ff	eb 5c		 jmp	 SHORT $LN2@checkbfp
$LN16@checkbfp:

; 716  :       case 2:
; 717  :         bfltab[0] |= 0x3ff80000;

  00101	b8 04 00 00 00	 mov	 eax, 4
  00106	48 6b c0 00	 imul	 rax, rax, 0
  0010a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR bfltab$[rsp]
  00112	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00115	0d 00 00 f8 3f	 or	 eax, 1073217536		; 3ff80000H
  0011a	b9 04 00 00 00	 mov	 ecx, 4
  0011f	48 6b c9 00	 imul	 rcx, rcx, 0
  00123	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR bfltab$[rsp]
  0012b	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 718  :         break;

  0012e	eb 2d		 jmp	 SHORT $LN2@checkbfp
$LN17@checkbfp:

; 719  :       case 4:
; 720  :         bfltab[0] |= 0x3fff8000;

  00130	b8 04 00 00 00	 mov	 eax, 4
  00135	48 6b c0 00	 imul	 rax, rax, 0
  00139	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR bfltab$[rsp]
  00141	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00144	0d 00 80 ff 3f	 or	 eax, 1073709056		; 3fff8000H
  00149	b9 04 00 00 00	 mov	 ecx, 4
  0014e	48 6b c9 00	 imul	 rcx, rcx, 0
  00152	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR bfltab$[rsp]
  0015a	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax
$LN2@checkbfp:

; 721  :         break;
; 722  :       }
; 723  :       if (GR0_AE( optbits ))

  0015d	0f b6 84 24 c8
	00 00 00	 movzx	 eax, BYTE PTR optbits$[rsp]
  00165	83 e0 40	 and	 eax, 64			; 00000040H
  00168	85 c0		 test	 eax, eax
  0016a	74 0a		 je	 SHORT $LN18@checkbfp

; 724  :         cc = 2;

  0016c	c7 44 24 40 02
	00 00 00	 mov	 DWORD PTR cc$[rsp], 2
  00174	eb 08		 jmp	 SHORT $LN19@checkbfp
$LN18@checkbfp:

; 725  :       else
; 726  :         cc = -7;

  00176	c7 44 24 40 f9
	ff ff ff	 mov	 DWORD PTR cc$[rsp], -7
$LN19@checkbfp:

; 727  :     }

  0017e	e9 19 01 00 00	 jmp	 $LN14@checkbfp
$LN13@checkbfp:

; 728  :     else
; 729  :     {
; 730  :       memset(bfltab, 0xff, sizeof(int) * bflnum);

  00183	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR bflnum$[rsp]
  0018b	48 c1 e0 02	 shl	 rax, 2
  0018f	48 89 44 24 70	 mov	 QWORD PTR tv129[rsp], rax
  00194	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR bfltab$[rsp]
  0019c	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  001a1	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv129[rsp]
  001a6	f3 aa		 rep stosb

; 731  :       switch (bflnum)

  001a8	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR bflnum$[rsp]
  001af	89 44 24 58	 mov	 DWORD PTR tv94[rsp], eax
  001b3	83 7c 24 58 01	 cmp	 DWORD PTR tv94[rsp], 1
  001b8	74 13		 je	 SHORT $LN20@checkbfp
  001ba	83 7c 24 58 02	 cmp	 DWORD PTR tv94[rsp], 2
  001bf	74 29		 je	 SHORT $LN21@checkbfp
  001c1	83 7c 24 58 04	 cmp	 DWORD PTR tv94[rsp], 4
  001c6	74 54		 je	 SHORT $LN22@checkbfp
  001c8	e9 af 00 00 00	 jmp	 $LN4@checkbfp
$LN20@checkbfp:

; 732  :       {
; 733  :       case 1:
; 734  :         bfltab[0] = 0x7f800000;

  001cd	b8 04 00 00 00	 mov	 eax, 4
  001d2	48 6b c0 00	 imul	 rax, rax, 0
  001d6	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR bfltab$[rsp]
  001de	c7 04 01 00 00
	80 7f		 mov	 DWORD PTR [rcx+rax], 2139095040 ; 7f800000H

; 735  :         break;

  001e5	e9 92 00 00 00	 jmp	 $LN4@checkbfp
$LN21@checkbfp:

; 736  :       case 2:
; 737  :         bfltab[0] = 0x7ff80000;

  001ea	b8 04 00 00 00	 mov	 eax, 4
  001ef	48 6b c0 00	 imul	 rax, rax, 0
  001f3	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR bfltab$[rsp]
  001fb	c7 04 01 00 00
	f8 7f		 mov	 DWORD PTR [rcx+rax], 2146959360 ; 7ff80000H

; 738  :         bfltab[1] = 0;

  00202	b8 04 00 00 00	 mov	 eax, 4
  00207	48 6b c0 01	 imul	 rax, rax, 1
  0020b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR bfltab$[rsp]
  00213	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [rcx+rax], 0

; 739  :         break;

  0021a	eb 60		 jmp	 SHORT $LN4@checkbfp
$LN22@checkbfp:

; 740  :       case 4:
; 741  :         bfltab[0] = 0x7fff8000;

  0021c	b8 04 00 00 00	 mov	 eax, 4
  00221	48 6b c0 00	 imul	 rax, rax, 0
  00225	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR bfltab$[rsp]
  0022d	c7 04 01 00 80
	ff 7f		 mov	 DWORD PTR [rcx+rax], 2147450880 ; 7fff8000H

; 742  :         bfltab[1] = 0;

  00234	b8 04 00 00 00	 mov	 eax, 4
  00239	48 6b c0 01	 imul	 rax, rax, 1
  0023d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR bfltab$[rsp]
  00245	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [rcx+rax], 0

; 743  :         bfltab[2] = 0;

  0024c	b8 04 00 00 00	 mov	 eax, 4
  00251	48 6b c0 02	 imul	 rax, rax, 2
  00255	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR bfltab$[rsp]
  0025d	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [rcx+rax], 0

; 744  :         bfltab[3] = 0;

  00264	b8 04 00 00 00	 mov	 eax, 4
  00269	48 6b c0 03	 imul	 rax, rax, 3
  0026d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR bfltab$[rsp]
  00275	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [rcx+rax], 0
$LN4@checkbfp:

; 745  :         break;
; 746  :       }
; 747  : 
; 748  :       *fpc |= FPC_FLAG_SFO;

  0027c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  00284	8b 00		 mov	 eax, DWORD PTR [rax]
  00286	0f ba e8 15	 bts	 eax, 21
  0028a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  00292	89 01		 mov	 DWORD PTR [rcx], eax

; 749  :       cc = 2;

  00294	c7 44 24 40 02
	00 00 00	 mov	 DWORD PTR cc$[rsp], 2
$LN14@checkbfp:

; 750  :     }
; 751  :   }

  0029c	e9 d1 02 00 00	 jmp	 $LN12@checkbfp
$LN11@checkbfp:

; 752  :   else
; 753  :     if (bexp < 0)

  002a1	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR bexp$[rsp], 0
  002a9	0f 8d c3 02 00
	00		 jge	 $LN23@checkbfp

; 754  :     {
; 755  :       switch (bflnum)

  002af	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR bflnum$[rsp]
  002b6	89 44 24 5c	 mov	 DWORD PTR tv152[rsp], eax
  002ba	83 7c 24 5c 01	 cmp	 DWORD PTR tv152[rsp], 1
  002bf	74 10		 je	 SHORT $LN24@checkbfp
  002c1	83 7c 24 5c 02	 cmp	 DWORD PTR tv152[rsp], 2
  002c6	74 13		 je	 SHORT $LN25@checkbfp
  002c8	83 7c 24 5c 03	 cmp	 DWORD PTR tv152[rsp], 3
  002cd	74 16		 je	 SHORT $LN26@checkbfp
  002cf	eb 1c		 jmp	 SHORT $LN6@checkbfp
$LN24@checkbfp:

; 756  :       {
; 757  :       case 1:
; 758  :         shiftmax = 22;

  002d1	c7 44 24 4c 16
	00 00 00	 mov	 DWORD PTR shiftmax$[rsp], 22

; 759  :         break;

  002d9	eb 12		 jmp	 SHORT $LN6@checkbfp
$LN25@checkbfp:

; 760  :       case 2:
; 761  :         shiftmax = 51;

  002db	c7 44 24 4c 33
	00 00 00	 mov	 DWORD PTR shiftmax$[rsp], 51 ; 00000033H

; 762  :         break;

  002e3	eb 08		 jmp	 SHORT $LN6@checkbfp
$LN26@checkbfp:

; 763  :       case 3:
; 764  :         shiftmax = 111;

  002e5	c7 44 24 4c 6f
	00 00 00	 mov	 DWORD PTR shiftmax$[rsp], 111 ; 0000006fH
$LN6@checkbfp:

; 765  :         break;
; 766  :       }
; 767  :       shiftamt = abs(bexp);

  002ed	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR bexp$[rsp]
  002f4	e8 00 00 00 00	 call	 abs
  002f9	89 44 24 44	 mov	 DWORD PTR shiftamt$[rsp], eax

; 768  :       if (shiftmax >= shiftamt)

  002fd	8b 44 24 44	 mov	 eax, DWORD PTR shiftamt$[rsp]
  00301	39 44 24 4c	 cmp	 DWORD PTR shiftmax$[rsp], eax
  00305	0f 8c 87 01 00
	00		 jl	 $LN27@checkbfp

; 769  :       {
; 770  :         arrayshiftright(bfltab, bflnum, shiftamt, remtab);

  0030b	4c 8d 8c 24 80
	00 00 00	 lea	 r9, QWORD PTR remtab$[rsp]
  00313	44 8b 44 24 44	 mov	 r8d, DWORD PTR shiftamt$[rsp]
  00318	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR bflnum$[rsp]
  0031f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR bfltab$[rsp]
  00327	e8 00 00 00 00	 call	 arrayshiftright

; 771  :         if (shiftamt % 32)

  0032c	8b 44 24 44	 mov	 eax, DWORD PTR shiftamt$[rsp]
  00330	99		 cdq
  00331	83 e2 1f	 and	 edx, 31
  00334	03 c2		 add	 eax, edx
  00336	83 e0 1f	 and	 eax, 31
  00339	2b c2		 sub	 eax, edx
  0033b	85 c0		 test	 eax, eax
  0033d	74 20		 je	 SHORT $LN28@checkbfp

; 772  :           rx = bflnum - (shiftamt / 32) - 1;

  0033f	8b 44 24 44	 mov	 eax, DWORD PTR shiftamt$[rsp]
  00343	99		 cdq
  00344	83 e2 1f	 and	 edx, 31
  00347	03 c2		 add	 eax, edx
  00349	c1 f8 05	 sar	 eax, 5
  0034c	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR bflnum$[rsp]
  00353	2b c8		 sub	 ecx, eax
  00355	8b c1		 mov	 eax, ecx
  00357	ff c8		 dec	 eax
  00359	89 44 24 48	 mov	 DWORD PTR rx$[rsp], eax
  0035d	eb 1c		 jmp	 SHORT $LN29@checkbfp
$LN28@checkbfp:

; 773  :         else
; 774  :           rx = bflnum - (shiftamt / 32);

  0035f	8b 44 24 44	 mov	 eax, DWORD PTR shiftamt$[rsp]
  00363	99		 cdq
  00364	83 e2 1f	 and	 edx, 31
  00367	03 c2		 add	 eax, edx
  00369	c1 f8 05	 sar	 eax, 5
  0036c	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR bflnum$[rsp]
  00373	2b c8		 sub	 ecx, eax
  00375	8b c1		 mov	 eax, ecx
  00377	89 44 24 48	 mov	 DWORD PTR rx$[rsp], eax
$LN29@checkbfp:

; 775  :         rbit = 32 - (shiftamt % 32);

  0037b	8b 44 24 44	 mov	 eax, DWORD PTR shiftamt$[rsp]
  0037f	99		 cdq
  00380	83 e2 1f	 and	 edx, 31
  00383	03 c2		 add	 eax, edx
  00385	83 e0 1f	 and	 eax, 31
  00388	2b c2		 sub	 eax, edx
  0038a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0038f	2b c8		 sub	 ecx, eax
  00391	8b c1		 mov	 eax, ecx
  00393	89 44 24 60	 mov	 DWORD PTR rbit$[rsp], eax

; 776  :         rem = remtab[rx] >> (31 - rbit);

  00397	48 63 44 24 48	 movsxd	 rax, DWORD PTR rx$[rsp]
  0039c	b9 1f 00 00 00	 mov	 ecx, 31
  003a1	2b 4c 24 60	 sub	 ecx, DWORD PTR rbit$[rsp]
  003a5	8b 84 84 80 00
	00 00		 mov	 eax, DWORD PTR remtab$[rsp+rax*4]
  003ac	d3 e8		 shr	 eax, cl
  003ae	89 44 24 68	 mov	 DWORD PTR rem$[rsp], eax

; 777  :         remtab[rx] = (remtab[rx] << (rbit + 1)) >> (rbit + 1);

  003b2	48 63 44 24 48	 movsxd	 rax, DWORD PTR rx$[rsp]
  003b7	8b 4c 24 60	 mov	 ecx, DWORD PTR rbit$[rsp]
  003bb	ff c1		 inc	 ecx
  003bd	8b 84 84 80 00
	00 00		 mov	 eax, DWORD PTR remtab$[rsp+rax*4]
  003c4	d3 e0		 shl	 eax, cl
  003c6	8b 4c 24 60	 mov	 ecx, DWORD PTR rbit$[rsp]
  003ca	ff c1		 inc	 ecx
  003cc	d3 e8		 shr	 eax, cl
  003ce	48 63 4c 24 48	 movsxd	 rcx, DWORD PTR rx$[rsp]
  003d3	89 84 8c 80 00
	00 00		 mov	 DWORD PTR remtab$[rsp+rcx*4], eax

; 778  :         if (rem == 1)

  003da	83 7c 24 68 01	 cmp	 DWORD PTR rem$[rsp], 1
  003df	75 46		 jne	 SHORT $LN30@checkbfp

; 779  :         {
; 780  :           mid = 1;

  003e1	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR mid$[rsp], 1

; 781  :           for (i = rx; i < bflnum; i++)

  003e9	8b 44 24 48	 mov	 eax, DWORD PTR rx$[rsp]
  003ed	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
  003f1	eb 0a		 jmp	 SHORT $LN10@checkbfp
$LN8@checkbfp:
  003f3	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  003f7	ff c0		 inc	 eax
  003f9	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN10@checkbfp:
  003fd	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR bflnum$[rsp]
  00404	39 44 24 50	 cmp	 DWORD PTR i$[rsp], eax
  00408	7d 1b		 jge	 SHORT $LN9@checkbfp

; 782  :           {
; 783  :             if (remtab[i] != 0)

  0040a	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  0040f	83 bc 84 80 00
	00 00 00	 cmp	 DWORD PTR remtab$[rsp+rax*4], 0
  00417	74 0a		 je	 SHORT $LN32@checkbfp

; 784  :             {
; 785  :               mid = 0;

  00419	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR mid$[rsp], 0

; 786  :               break;

  00421	eb 02		 jmp	 SHORT $LN9@checkbfp
$LN32@checkbfp:

; 787  :             }
; 788  :           }

  00423	eb ce		 jmp	 SHORT $LN8@checkbfp
$LN9@checkbfp:

; 789  :         }

  00425	eb 08		 jmp	 SHORT $LN31@checkbfp
$LN30@checkbfp:

; 790  :         else
; 791  :           mid = 0;

  00427	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR mid$[rsp], 0
$LN31@checkbfp:

; 792  :         roundarray(bfltab, bflnum , roundrule, rem, 2, neg, 1, mid);

  0042f	8b 44 24 64	 mov	 eax, DWORD PTR mid$[rsp]
  00433	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00437	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR [rsp+48], 1
  0043f	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR neg$[rsp]
  00446	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0044a	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00452	44 8b 4c 24 68	 mov	 r9d, DWORD PTR rem$[rsp]
  00457	44 8b 84 24 d8
	00 00 00	 mov	 r8d, DWORD PTR roundrule$[rsp]
  0045f	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR bflnum$[rsp]
  00466	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR bfltab$[rsp]
  0046e	e8 00 00 00 00	 call	 roundarray

; 793  :         *fpc |= FPC_FLAG_SFX;

  00473	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  0047b	8b 00		 mov	 eax, DWORD PTR [rax]
  0047d	0f ba e8 13	 bts	 eax, 19
  00481	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  00489	89 01		 mov	 DWORD PTR [rcx], eax

; 794  :         return 0;

  0048b	33 c0		 xor	 eax, eax
  0048d	e9 e4 00 00 00	 jmp	 $LN1@checkbfp
$LN27@checkbfp:

; 795  :       }
; 796  :       if (*fpc & FPC_MASK_IMU)

  00492	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  0049a	8b 00		 mov	 eax, DWORD PTR [rax]
  0049c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004a1	85 c0		 test	 eax, eax
  004a3	0f 84 86 00 00
	00		 je	 $LN33@checkbfp

; 797  :       {
; 798  :         if (GR0_AE( optbits ))

  004a9	0f b6 84 24 c8
	00 00 00	 movzx	 eax, BYTE PTR optbits$[rsp]
  004b1	83 e0 40	 and	 eax, 64			; 00000040H
  004b4	85 c0		 test	 eax, eax
  004b6	74 3c		 je	 SHORT $LN35@checkbfp

; 799  :         {
; 800  :           cc = 2;

  004b8	c7 44 24 40 02
	00 00 00	 mov	 DWORD PTR cc$[rsp], 2

; 801  :           *fpc &= ~FPC_DXC;

  004c0	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  004c8	8b 00		 mov	 eax, DWORD PTR [rax]
  004ca	25 ff 00 ff ff	 and	 eax, -65281		; ffffffffffff00ffH
  004cf	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  004d7	89 01		 mov	 DWORD PTR [rcx], eax

; 802  :           *fpc |= DXC_IEEE_UF_INEX_INCR << FPC_DXC_SHIFT;

  004d9	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  004e1	8b 00		 mov	 eax, DWORD PTR [rax]
  004e3	0d 00 1c 00 00	 or	 eax, 7168		; 00001c00H
  004e8	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  004f0	89 01		 mov	 DWORD PTR [rcx], eax

; 803  :         }

  004f2	eb 39		 jmp	 SHORT $LN36@checkbfp
$LN35@checkbfp:

; 804  :         else
; 805  :         {
; 806  :           cc = -7;

  004f4	c7 44 24 40 f9
	ff ff ff	 mov	 DWORD PTR cc$[rsp], -7

; 807  :           *fpc &= ~FPC_DXC;

  004fc	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  00504	8b 00		 mov	 eax, DWORD PTR [rax]
  00506	25 ff 00 ff ff	 and	 eax, -65281		; ffffffffffff00ffH
  0050b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  00513	89 01		 mov	 DWORD PTR [rcx], eax

; 808  :           *fpc |= DXC_IEEE_INVALID_OP  << FPC_DXC_SHIFT;

  00515	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  0051d	8b 00		 mov	 eax, DWORD PTR [rax]
  0051f	0f ba e8 0f	 bts	 eax, 15
  00523	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  0052b	89 01		 mov	 DWORD PTR [rcx], eax
$LN36@checkbfp:

; 809  :         }
; 810  :       }

  0052d	eb 43		 jmp	 SHORT $LN34@checkbfp
$LN33@checkbfp:

; 811  :       else
; 812  :       {
; 813  :         memset(bfltab, 0x00, sizeof(int) * bflnum);

  0052f	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR bflnum$[rsp]
  00537	48 c1 e0 02	 shl	 rax, 2
  0053b	48 89 44 24 78	 mov	 QWORD PTR tv215[rsp], rax
  00540	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR bfltab$[rsp]
  00548	33 c0		 xor	 eax, eax
  0054a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv215[rsp]
  0054f	f3 aa		 rep stosb

; 814  :         *fpc |= (FPC_FLAG_SFU | FPC_FLAG_SFX);

  00551	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  00559	8b 00		 mov	 eax, DWORD PTR [rax]
  0055b	0d 00 00 18 00	 or	 eax, 1572864		; 00180000H
  00560	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  00568	89 01		 mov	 DWORD PTR [rcx], eax

; 815  :         cc = 2;

  0056a	c7 44 24 40 02
	00 00 00	 mov	 DWORD PTR cc$[rsp], 2
$LN34@checkbfp:
$LN23@checkbfp:
$LN12@checkbfp:

; 816  :       }
; 817  :     }
; 818  :   return cc;

  00572	8b 44 24 40	 mov	 eax, DWORD PTR cc$[rsp]
$LN1@checkbfp:

; 819  : }

  00576	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0057e	48 33 cc	 xor	 rcx, rsp
  00581	e8 00 00 00 00	 call	 __security_check_cookie
  00586	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  0058d	5f		 pop	 rdi
  0058e	c3		 ret	 0
checkbfp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\pfpo.c
_TEXT	SEGMENT
cc$ = 64
shiftamt$ = 68
rx$ = 72
shiftmax$ = 76
i$ = 80
tv154 = 84
hexp$ = 88
rbit$ = 92
mid$ = 96
rem$ = 100
tv83 = 104
tv139 = 112
tv259 = 120
tv273 = 128
remtab$ = 136
__$ArrayPad$ = 152
hfltab$ = 176
hflnum$ = 184
hexpptr$ = 192
optbits$ = 200
fpc$ = 208
roundrule$ = 216
neg$ = 224
checkhfp PROC

; 548  : {

$LN38:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	57		 push	 rdi
  00014	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 549  :   int cc = 0;

  0002d	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR cc$[rsp], 0

; 550  :   int rx;
; 551  :   int i;
; 552  :   int rbit;
; 553  :   int mid;
; 554  :   int rem;
; 555  :   int hexp = *hexpptr;

  00035	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR hexpptr$[rsp]
  0003d	8b 00		 mov	 eax, DWORD PTR [rax]
  0003f	89 44 24 58	 mov	 DWORD PTR hexp$[rsp], eax

; 556  :   int shiftmax = 0;

  00043	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR shiftmax$[rsp], 0

; 557  :   int shiftamt;
; 558  :   unsigned int remtab[4];
; 559  :   if (hexp > 127)

  0004b	83 7c 24 58 7f	 cmp	 DWORD PTR hexp$[rsp], 127 ; 0000007fH
  00050	0f 8e 62 02 00
	00		 jle	 $LN7@checkhfp

; 560  :   {
; 561  :     if (GR0_TR_HFP_OVER( optbits ))

  00056	0f b6 84 24 c8
	00 00 00	 movzx	 eax, BYTE PTR optbits$[rsp]
  0005e	83 e0 20	 and	 eax, 32			; 00000020H
  00061	85 c0		 test	 eax, eax
  00063	0f 84 41 01 00
	00		 je	 $LN9@checkhfp

; 562  :     {
; 563  :       if (*fpc & FPC_MASK_IMO)

  00069	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  00071	8b 00		 mov	 eax, DWORD PTR [rax]
  00073	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00078	85 c0		 test	 eax, eax
  0007a	0f 84 85 00 00
	00		 je	 $LN11@checkhfp

; 564  :       {
; 565  :         *fpc &= ~(FPC_FLAG_SFX | FPC_DXC);

  00080	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  00088	8b 00		 mov	 eax, DWORD PTR [rax]
  0008a	25 ff 00 f7 ff	 and	 eax, -589569		; fffffffffff700ffH
  0008f	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  00097	89 01		 mov	 DWORD PTR [rcx], eax

; 566  :         *fpc |= DXC_IEEE_OF_INEX_TRUNC << FPC_DXC_SHIFT;

  00099	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  000a1	8b 00		 mov	 eax, DWORD PTR [rax]
  000a3	0d 00 28 00 00	 or	 eax, 10240		; 00002800H
  000a8	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  000b0	89 01		 mov	 DWORD PTR [rcx], eax

; 567  :         hfltab[0] |= 0x41000000;

  000b2	b8 04 00 00 00	 mov	 eax, 4
  000b7	48 6b c0 00	 imul	 rax, rax, 0
  000bb	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  000c3	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000c6	0d 00 00 00 41	 or	 eax, 1090519040		; 41000000H
  000cb	b9 04 00 00 00	 mov	 ecx, 4
  000d0	48 6b c9 00	 imul	 rcx, rcx, 0
  000d4	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  000dc	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 568  :         if (GR0_AE( optbits ))

  000df	0f b6 84 24 c8
	00 00 00	 movzx	 eax, BYTE PTR optbits$[rsp]
  000e7	83 e0 40	 and	 eax, 64			; 00000040H
  000ea	85 c0		 test	 eax, eax
  000ec	74 0a		 je	 SHORT $LN13@checkhfp

; 569  :           cc = 2;

  000ee	c7 44 24 40 02
	00 00 00	 mov	 DWORD PTR cc$[rsp], 2
  000f6	eb 08		 jmp	 SHORT $LN14@checkhfp
$LN13@checkhfp:

; 570  :         else
; 571  :           cc = -7;

  000f8	c7 44 24 40 f9
	ff ff ff	 mov	 DWORD PTR cc$[rsp], -7
$LN14@checkhfp:

; 572  :       }

  00100	e9 a0 00 00 00	 jmp	 $LN12@checkhfp
$LN11@checkhfp:

; 573  :       else
; 574  :       {
; 575  :         memset(hfltab, 0xff, sizeof(int) * hflnum);

  00105	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR hflnum$[rsp]
  0010d	48 c1 e0 02	 shl	 rax, 2
  00111	48 89 44 24 68	 mov	 QWORD PTR tv83[rsp], rax
  00116	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR hfltab$[rsp]
  0011e	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00123	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv83[rsp]
  00128	f3 aa		 rep stosb

; 576  :         hfltab[0] &= 0x00ffffff;

  0012a	b8 04 00 00 00	 mov	 eax, 4
  0012f	48 6b c0 00	 imul	 rax, rax, 0
  00133	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  0013b	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0013e	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00143	b9 04 00 00 00	 mov	 ecx, 4
  00148	48 6b c9 00	 imul	 rcx, rcx, 0
  0014c	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  00154	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 577  :         hfltab[0] |= 0x7f000000;

  00157	b8 04 00 00 00	 mov	 eax, 4
  0015c	48 6b c0 00	 imul	 rax, rax, 0
  00160	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  00168	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0016b	0d 00 00 00 7f	 or	 eax, 2130706432		; 7f000000H
  00170	b9 04 00 00 00	 mov	 ecx, 4
  00175	48 6b c9 00	 imul	 rcx, rcx, 0
  00179	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  00181	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 578  :         *fpc |= DXC_IEEE_OF_INEX_TRUNC << FPC_DXC_SHIFT;

  00184	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  0018c	8b 00		 mov	 eax, DWORD PTR [rax]
  0018e	0d 00 28 00 00	 or	 eax, 10240		; 00002800H
  00193	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  0019b	89 01		 mov	 DWORD PTR [rcx], eax

; 579  :         cc = 2;

  0019d	c7 44 24 40 02
	00 00 00	 mov	 DWORD PTR cc$[rsp], 2
$LN12@checkhfp:

; 580  :       }
; 581  :     }

  001a5	e9 09 01 00 00	 jmp	 $LN10@checkhfp
$LN9@checkhfp:

; 582  :     else
; 583  :     {
; 584  :       if (*fpc & FPC_MASK_IMI)

  001aa	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  001b2	8b 00		 mov	 eax, DWORD PTR [rax]
  001b4	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001b9	85 c0		 test	 eax, eax
  001bb	74 57		 je	 SHORT $LN15@checkhfp

; 585  :       {
; 586  :         *fpc &= ~(FPC_FLAG_SFX | FPC_DXC);;

  001bd	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  001c5	8b 00		 mov	 eax, DWORD PTR [rax]
  001c7	25 ff 00 f7 ff	 and	 eax, -589569		; fffffffffff700ffH
  001cc	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  001d4	89 01		 mov	 DWORD PTR [rcx], eax

; 587  :         *fpc |= FPC_DXC_I;

  001d6	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  001de	8b 00		 mov	 eax, DWORD PTR [rax]
  001e0	0f ba e8 0f	 bts	 eax, 15
  001e4	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  001ec	89 01		 mov	 DWORD PTR [rcx], eax

; 588  :         if (GR0_AE( optbits ))

  001ee	0f b6 84 24 c8
	00 00 00	 movzx	 eax, BYTE PTR optbits$[rsp]
  001f6	83 e0 40	 and	 eax, 64			; 00000040H
  001f9	85 c0		 test	 eax, eax
  001fb	74 0a		 je	 SHORT $LN17@checkhfp

; 589  :           cc = 2;

  001fd	c7 44 24 40 02
	00 00 00	 mov	 DWORD PTR cc$[rsp], 2
  00205	eb 08		 jmp	 SHORT $LN18@checkhfp
$LN17@checkhfp:

; 590  :         else
; 591  :           cc = -7;

  00207	c7 44 24 40 f9
	ff ff ff	 mov	 DWORD PTR cc$[rsp], -7
$LN18@checkhfp:

; 592  : 
; 593  :       }

  0020f	e9 9f 00 00 00	 jmp	 $LN16@checkhfp
$LN15@checkhfp:

; 594  :       else
; 595  :       {
; 596  :         memset(hfltab, 0xff, sizeof(int) * hflnum);

  00214	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR hflnum$[rsp]
  0021c	48 c1 e0 02	 shl	 rax, 2
  00220	48 89 44 24 70	 mov	 QWORD PTR tv139[rsp], rax
  00225	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR hfltab$[rsp]
  0022d	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00232	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv139[rsp]
  00237	f3 aa		 rep stosb

; 597  :         hfltab[0] &= 0x00ffffff;

  00239	b8 04 00 00 00	 mov	 eax, 4
  0023e	48 6b c0 00	 imul	 rax, rax, 0
  00242	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  0024a	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0024d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00252	b9 04 00 00 00	 mov	 ecx, 4
  00257	48 6b c9 00	 imul	 rcx, rcx, 0
  0025b	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  00263	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 598  :         hfltab[0] |= 0x7f000000;

  00266	b8 04 00 00 00	 mov	 eax, 4
  0026b	48 6b c0 00	 imul	 rax, rax, 0
  0026f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  00277	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0027a	0d 00 00 00 7f	 or	 eax, 2130706432		; 7f000000H
  0027f	b9 04 00 00 00	 mov	 ecx, 4
  00284	48 6b c9 00	 imul	 rcx, rcx, 0
  00288	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  00290	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 599  :         *fpc |= FPC_FLAG_SFI;

  00293	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  0029b	8b 00		 mov	 eax, DWORD PTR [rax]
  0029d	0f ba e8 17	 bts	 eax, 23
  002a1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  002a9	89 01		 mov	 DWORD PTR [rcx], eax

; 600  :         cc = 2;

  002ab	c7 44 24 40 02
	00 00 00	 mov	 DWORD PTR cc$[rsp], 2
$LN16@checkhfp:
$LN10@checkhfp:

; 601  :       }
; 602  :     }
; 603  :   }

  002b3	e9 ab 04 00 00	 jmp	 $LN8@checkhfp
$LN7@checkhfp:

; 604  :   else
; 605  :     if (hexp < 0)

  002b8	83 7c 24 58 00	 cmp	 DWORD PTR hexp$[rsp], 0
  002bd	0f 8d a0 04 00
	00		 jge	 $LN19@checkhfp

; 606  :     {
; 607  :       switch (hflnum)

  002c3	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR hflnum$[rsp]
  002ca	89 44 24 54	 mov	 DWORD PTR tv154[rsp], eax
  002ce	83 7c 24 54 01	 cmp	 DWORD PTR tv154[rsp], 1
  002d3	74 13		 je	 SHORT $LN20@checkhfp
  002d5	83 7c 24 54 02	 cmp	 DWORD PTR tv154[rsp], 2
  002da	74 19		 je	 SHORT $LN21@checkhfp
  002dc	83 7c 24 54 04	 cmp	 DWORD PTR tv154[rsp], 4
  002e1	74 1c		 je	 SHORT $LN22@checkhfp
  002e3	e9 94 00 00 00	 jmp	 $LN2@checkhfp
$LN20@checkhfp:

; 608  :       {
; 609  :       case 1:
; 610  :         shiftmax = 20;

  002e8	c7 44 24 4c 14
	00 00 00	 mov	 DWORD PTR shiftmax$[rsp], 20

; 611  :         break;

  002f0	e9 87 00 00 00	 jmp	 $LN2@checkhfp
$LN21@checkhfp:

; 612  :       case 2:
; 613  :         shiftmax = 52;

  002f5	c7 44 24 4c 34
	00 00 00	 mov	 DWORD PTR shiftmax$[rsp], 52 ; 00000034H

; 614  :         break;

  002fd	eb 7d		 jmp	 SHORT $LN2@checkhfp
$LN22@checkhfp:

; 615  :       case 4:
; 616  :         hfltab[2] = (hfltab[2] << 8) + ((hfltab[3] & 0xff000000) >> 24);

  002ff	b8 04 00 00 00	 mov	 eax, 4
  00304	48 6b c0 02	 imul	 rax, rax, 2
  00308	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  00310	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00313	c1 e0 08	 shl	 eax, 8
  00316	b9 04 00 00 00	 mov	 ecx, 4
  0031b	48 6b c9 03	 imul	 rcx, rcx, 3
  0031f	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  00327	8b 0c 0a	 mov	 ecx, DWORD PTR [rdx+rcx]
  0032a	81 e1 00 00 00
	ff		 and	 ecx, -16777216		; ff000000H
  00330	c1 e9 18	 shr	 ecx, 24
  00333	03 c1		 add	 eax, ecx
  00335	b9 04 00 00 00	 mov	 ecx, 4
  0033a	48 6b c9 02	 imul	 rcx, rcx, 2
  0033e	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  00346	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 617  :         hfltab[3] <<= 8;

  00349	b8 04 00 00 00	 mov	 eax, 4
  0034e	48 6b c0 03	 imul	 rax, rax, 3
  00352	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  0035a	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0035d	c1 e0 08	 shl	 eax, 8
  00360	b9 04 00 00 00	 mov	 ecx, 4
  00365	48 6b c9 03	 imul	 rcx, rcx, 3
  00369	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  00371	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 618  :         shiftmax = 108;

  00374	c7 44 24 4c 6c
	00 00 00	 mov	 DWORD PTR shiftmax$[rsp], 108 ; 0000006cH
$LN2@checkhfp:

; 619  :         break;
; 620  :       }
; 621  :       shiftamt = abs(hexp);

  0037c	8b 4c 24 58	 mov	 ecx, DWORD PTR hexp$[rsp]
  00380	e8 00 00 00 00	 call	 abs
  00385	89 44 24 44	 mov	 DWORD PTR shiftamt$[rsp], eax

; 622  :       if (shiftmax >= shiftamt)

  00389	8b 44 24 44	 mov	 eax, DWORD PTR shiftamt$[rsp]
  0038d	39 44 24 4c	 cmp	 DWORD PTR shiftmax$[rsp], eax
  00391	0f 8c 6f 02 00
	00		 jl	 $LN23@checkhfp

; 623  :       {
; 624  :         if (hflnum == 4)

  00397	83 bc 24 b8 00
	00 00 04	 cmp	 DWORD PTR hflnum$[rsp], 4
  0039f	75 0b		 jne	 SHORT $LN24@checkhfp

; 625  :           shiftamt += 8;

  003a1	8b 44 24 44	 mov	 eax, DWORD PTR shiftamt$[rsp]
  003a5	83 c0 08	 add	 eax, 8
  003a8	89 44 24 44	 mov	 DWORD PTR shiftamt$[rsp], eax
$LN24@checkhfp:

; 626  :         arrayshiftright(hfltab, hflnum, shiftamt, remtab);

  003ac	4c 8d 8c 24 88
	00 00 00	 lea	 r9, QWORD PTR remtab$[rsp]
  003b4	44 8b 44 24 44	 mov	 r8d, DWORD PTR shiftamt$[rsp]
  003b9	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR hflnum$[rsp]
  003c0	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  003c8	e8 00 00 00 00	 call	 arrayshiftright

; 627  :         if (shiftamt % 32)

  003cd	8b 44 24 44	 mov	 eax, DWORD PTR shiftamt$[rsp]
  003d1	99		 cdq
  003d2	83 e2 1f	 and	 edx, 31
  003d5	03 c2		 add	 eax, edx
  003d7	83 e0 1f	 and	 eax, 31
  003da	2b c2		 sub	 eax, edx
  003dc	85 c0		 test	 eax, eax
  003de	74 20		 je	 SHORT $LN25@checkhfp

; 628  :           rx = hflnum - (shiftamt / 32) - 1;

  003e0	8b 44 24 44	 mov	 eax, DWORD PTR shiftamt$[rsp]
  003e4	99		 cdq
  003e5	83 e2 1f	 and	 edx, 31
  003e8	03 c2		 add	 eax, edx
  003ea	c1 f8 05	 sar	 eax, 5
  003ed	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR hflnum$[rsp]
  003f4	2b c8		 sub	 ecx, eax
  003f6	8b c1		 mov	 eax, ecx
  003f8	ff c8		 dec	 eax
  003fa	89 44 24 48	 mov	 DWORD PTR rx$[rsp], eax
  003fe	eb 1c		 jmp	 SHORT $LN26@checkhfp
$LN25@checkhfp:

; 629  :         else
; 630  :           rx = hflnum - (shiftamt / 32);

  00400	8b 44 24 44	 mov	 eax, DWORD PTR shiftamt$[rsp]
  00404	99		 cdq
  00405	83 e2 1f	 and	 edx, 31
  00408	03 c2		 add	 eax, edx
  0040a	c1 f8 05	 sar	 eax, 5
  0040d	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR hflnum$[rsp]
  00414	2b c8		 sub	 ecx, eax
  00416	8b c1		 mov	 eax, ecx
  00418	89 44 24 48	 mov	 DWORD PTR rx$[rsp], eax
$LN26@checkhfp:

; 631  :         rbit = 32 - (shiftamt % 32);

  0041c	8b 44 24 44	 mov	 eax, DWORD PTR shiftamt$[rsp]
  00420	99		 cdq
  00421	83 e2 1f	 and	 edx, 31
  00424	03 c2		 add	 eax, edx
  00426	83 e0 1f	 and	 eax, 31
  00429	2b c2		 sub	 eax, edx
  0042b	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00430	2b c8		 sub	 ecx, eax
  00432	8b c1		 mov	 eax, ecx
  00434	89 44 24 5c	 mov	 DWORD PTR rbit$[rsp], eax

; 632  :         rem = remtab[rx] >> (28 - rbit);

  00438	48 63 44 24 48	 movsxd	 rax, DWORD PTR rx$[rsp]
  0043d	b9 1c 00 00 00	 mov	 ecx, 28
  00442	2b 4c 24 5c	 sub	 ecx, DWORD PTR rbit$[rsp]
  00446	8b 84 84 88 00
	00 00		 mov	 eax, DWORD PTR remtab$[rsp+rax*4]
  0044d	d3 e8		 shr	 eax, cl
  0044f	89 44 24 64	 mov	 DWORD PTR rem$[rsp], eax

; 633  :         remtab[rx] = (remtab[rx] << (rbit + 4)) >> (rbit + 4);

  00453	48 63 44 24 48	 movsxd	 rax, DWORD PTR rx$[rsp]
  00458	8b 4c 24 5c	 mov	 ecx, DWORD PTR rbit$[rsp]
  0045c	83 c1 04	 add	 ecx, 4
  0045f	8b 84 84 88 00
	00 00		 mov	 eax, DWORD PTR remtab$[rsp+rax*4]
  00466	d3 e0		 shl	 eax, cl
  00468	8b 4c 24 5c	 mov	 ecx, DWORD PTR rbit$[rsp]
  0046c	83 c1 04	 add	 ecx, 4
  0046f	d3 e8		 shr	 eax, cl
  00471	48 63 4c 24 48	 movsxd	 rcx, DWORD PTR rx$[rsp]
  00476	89 84 8c 88 00
	00 00		 mov	 DWORD PTR remtab$[rsp+rcx*4], eax

; 634  :         if (rem == 8)

  0047d	83 7c 24 64 08	 cmp	 DWORD PTR rem$[rsp], 8
  00482	75 46		 jne	 SHORT $LN27@checkhfp

; 635  :         {
; 636  :           mid = 1;

  00484	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR mid$[rsp], 1

; 637  :           for (i = rx; i < hflnum; i++)

  0048c	8b 44 24 48	 mov	 eax, DWORD PTR rx$[rsp]
  00490	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
  00494	eb 0a		 jmp	 SHORT $LN6@checkhfp
$LN4@checkhfp:
  00496	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  0049a	ff c0		 inc	 eax
  0049c	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN6@checkhfp:
  004a0	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR hflnum$[rsp]
  004a7	39 44 24 50	 cmp	 DWORD PTR i$[rsp], eax
  004ab	7d 1b		 jge	 SHORT $LN5@checkhfp

; 638  :           {
; 639  :             if (remtab[i] != 0)

  004ad	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  004b2	83 bc 84 88 00
	00 00 00	 cmp	 DWORD PTR remtab$[rsp+rax*4], 0
  004ba	74 0a		 je	 SHORT $LN29@checkhfp

; 640  :             {
; 641  :               mid = 0;

  004bc	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR mid$[rsp], 0

; 642  :               break;

  004c4	eb 02		 jmp	 SHORT $LN5@checkhfp
$LN29@checkhfp:

; 643  :             }
; 644  :           }

  004c6	eb ce		 jmp	 SHORT $LN4@checkhfp
$LN5@checkhfp:

; 645  :         }

  004c8	eb 08		 jmp	 SHORT $LN28@checkhfp
$LN27@checkhfp:

; 646  :         else
; 647  :           mid = 0;

  004ca	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR mid$[rsp], 0
$LN28@checkhfp:

; 648  :         roundarray(hfltab, hflnum, roundrule, rem, 16, neg, 0, mid);

  004d2	8b 44 24 60	 mov	 eax, DWORD PTR mid$[rsp]
  004d6	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  004da	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  004e2	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR neg$[rsp]
  004e9	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  004ed	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004f5	44 8b 4c 24 64	 mov	 r9d, DWORD PTR rem$[rsp]
  004fa	44 8b 84 24 d8
	00 00 00	 mov	 r8d, DWORD PTR roundrule$[rsp]
  00502	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR hflnum$[rsp]
  00509	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  00511	e8 00 00 00 00	 call	 roundarray

; 649  :         *fpc |= FPC_FLAG_SFX;

  00516	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  0051e	8b 00		 mov	 eax, DWORD PTR [rax]
  00520	0f ba e8 13	 bts	 eax, 19
  00524	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  0052c	89 01		 mov	 DWORD PTR [rcx], eax

; 650  :         if (hflnum == 4)

  0052e	83 bc 24 b8 00
	00 00 04	 cmp	 DWORD PTR hflnum$[rsp], 4
  00536	0f 85 b5 00 00
	00		 jne	 $LN30@checkhfp

; 651  :         {
; 652  :           hfltab[0] = (hfltab[0] << 8) | (hfltab[1] >> 24);

  0053c	b8 04 00 00 00	 mov	 eax, 4
  00541	48 6b c0 00	 imul	 rax, rax, 0
  00545	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  0054d	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00550	c1 e0 08	 shl	 eax, 8
  00553	b9 04 00 00 00	 mov	 ecx, 4
  00558	48 6b c9 01	 imul	 rcx, rcx, 1
  0055c	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  00564	8b 0c 0a	 mov	 ecx, DWORD PTR [rdx+rcx]
  00567	c1 e9 18	 shr	 ecx, 24
  0056a	0b c1		 or	 eax, ecx
  0056c	b9 04 00 00 00	 mov	 ecx, 4
  00571	48 6b c9 00	 imul	 rcx, rcx, 0
  00575	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  0057d	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 653  :           hfltab[1] = (hfltab[1] << 8) | (hfltab[2] >> 24);

  00580	b8 04 00 00 00	 mov	 eax, 4
  00585	48 6b c0 01	 imul	 rax, rax, 1
  00589	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  00591	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00594	c1 e0 08	 shl	 eax, 8
  00597	b9 04 00 00 00	 mov	 ecx, 4
  0059c	48 6b c9 02	 imul	 rcx, rcx, 2
  005a0	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  005a8	8b 0c 0a	 mov	 ecx, DWORD PTR [rdx+rcx]
  005ab	c1 e9 18	 shr	 ecx, 24
  005ae	0b c1		 or	 eax, ecx
  005b0	b9 04 00 00 00	 mov	 ecx, 4
  005b5	48 6b c9 01	 imul	 rcx, rcx, 1
  005b9	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  005c1	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 654  :           hfltab[2] &= 0x00ffffff;

  005c4	b8 04 00 00 00	 mov	 eax, 4
  005c9	48 6b c0 02	 imul	 rax, rax, 2
  005cd	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR hfltab$[rsp]
  005d5	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  005d8	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  005dd	b9 04 00 00 00	 mov	 ecx, 4
  005e2	48 6b c9 02	 imul	 rcx, rcx, 2
  005e6	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR hfltab$[rsp]
  005ee	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax
$LN30@checkhfp:

; 655  :         }
; 656  :         *hexpptr = 0;

  005f1	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR hexpptr$[rsp]
  005f9	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 657  :         return 0;

  005ff	33 c0		 xor	 eax, eax
  00601	e9 61 01 00 00	 jmp	 $LN1@checkhfp
$LN23@checkhfp:

; 658  :       }
; 659  :       if (GR0_TR_HFP_UNDER( optbits ))

  00606	0f b6 84 24 c8
	00 00 00	 movzx	 eax, BYTE PTR optbits$[rsp]
  0060e	83 e0 10	 and	 eax, 16
  00611	85 c0		 test	 eax, eax
  00613	0f 84 a5 00 00
	00		 je	 $LN31@checkhfp

; 660  :       {
; 661  :         if ((*fpc & FPC_MASK_IMU) && !GR0_AE( optbits ))

  00619	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  00621	8b 00		 mov	 eax, DWORD PTR [rax]
  00623	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00628	85 c0		 test	 eax, eax
  0062a	74 4a		 je	 SHORT $LN33@checkhfp
  0062c	0f b6 84 24 c8
	00 00 00	 movzx	 eax, BYTE PTR optbits$[rsp]
  00634	83 e0 40	 and	 eax, 64			; 00000040H
  00637	85 c0		 test	 eax, eax
  00639	75 3b		 jne	 SHORT $LN33@checkhfp

; 662  :         {
; 663  :           cc = -7;

  0063b	c7 44 24 40 f9
	ff ff ff	 mov	 DWORD PTR cc$[rsp], -7

; 664  :           *fpc &= ~FPC_DXC;

  00643	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  0064b	8b 00		 mov	 eax, DWORD PTR [rax]
  0064d	25 ff 00 ff ff	 and	 eax, -65281		; ffffffffffff00ffH
  00652	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  0065a	89 01		 mov	 DWORD PTR [rcx], eax

; 665  :           *fpc |= DXC_IEEE_INVALID_OP << FPC_DXC_SHIFT;

  0065c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  00664	8b 00		 mov	 eax, DWORD PTR [rax]
  00666	0f ba e8 0f	 bts	 eax, 15
  0066a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  00672	89 01		 mov	 DWORD PTR [rcx], eax

; 666  :         }

  00674	eb 43		 jmp	 SHORT $LN34@checkhfp
$LN33@checkhfp:

; 667  :         else
; 668  :         {
; 669  :           memset(hfltab, 0x00, sizeof(int) * hflnum);

  00676	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR hflnum$[rsp]
  0067e	48 c1 e0 02	 shl	 rax, 2
  00682	48 89 44 24 78	 mov	 QWORD PTR tv259[rsp], rax
  00687	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR hfltab$[rsp]
  0068f	33 c0		 xor	 eax, eax
  00691	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv259[rsp]
  00696	f3 aa		 rep stosb

; 670  :           *fpc |= (FPC_FLAG_SFU | FPC_FLAG_SFX);

  00698	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  006a0	8b 00		 mov	 eax, DWORD PTR [rax]
  006a2	0d 00 00 18 00	 or	 eax, 1572864		; 00180000H
  006a7	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  006af	89 01		 mov	 DWORD PTR [rcx], eax

; 671  :           cc = 2;

  006b1	c7 44 24 40 02
	00 00 00	 mov	 DWORD PTR cc$[rsp], 2
$LN34@checkhfp:

; 672  :         }
; 673  :       }

  006b9	e9 a5 00 00 00	 jmp	 $LN32@checkhfp
$LN31@checkhfp:

; 674  :       else
; 675  :       {
; 676  :         if ((*fpc & FPC_MASK_IMI) && !GR0_AE( optbits ))

  006be	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  006c6	8b 00		 mov	 eax, DWORD PTR [rax]
  006c8	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  006cd	85 c0		 test	 eax, eax
  006cf	74 4a		 je	 SHORT $LN35@checkhfp
  006d1	0f b6 84 24 c8
	00 00 00	 movzx	 eax, BYTE PTR optbits$[rsp]
  006d9	83 e0 40	 and	 eax, 64			; 00000040H
  006dc	85 c0		 test	 eax, eax
  006de	75 3b		 jne	 SHORT $LN35@checkhfp

; 677  :         {
; 678  :           cc = -7;

  006e0	c7 44 24 40 f9
	ff ff ff	 mov	 DWORD PTR cc$[rsp], -7

; 679  :           *fpc &= ~FPC_DXC;

  006e8	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  006f0	8b 00		 mov	 eax, DWORD PTR [rax]
  006f2	25 ff 00 ff ff	 and	 eax, -65281		; ffffffffffff00ffH
  006f7	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  006ff	89 01		 mov	 DWORD PTR [rcx], eax

; 680  :           *fpc |= DXC_IEEE_INVALID_OP << FPC_DXC_SHIFT;

  00701	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  00709	8b 00		 mov	 eax, DWORD PTR [rax]
  0070b	0f ba e8 0f	 bts	 eax, 15
  0070f	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  00717	89 01		 mov	 DWORD PTR [rcx], eax

; 681  :         }

  00719	eb 48		 jmp	 SHORT $LN36@checkhfp
$LN35@checkhfp:

; 682  :         else
; 683  :         {
; 684  :           memset(hfltab, 0x00, sizeof(int) * hflnum);

  0071b	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR hflnum$[rsp]
  00723	48 c1 e0 02	 shl	 rax, 2
  00727	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv273[rsp], rax
  0072f	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR hfltab$[rsp]
  00737	33 c0		 xor	 eax, eax
  00739	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv273[rsp]
  00741	f3 aa		 rep stosb

; 685  :           *fpc |= FPC_FLAG_SFX;

  00743	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR fpc$[rsp]
  0074b	8b 00		 mov	 eax, DWORD PTR [rax]
  0074d	0f ba e8 13	 bts	 eax, 19
  00751	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR fpc$[rsp]
  00759	89 01		 mov	 DWORD PTR [rcx], eax

; 686  :           cc = 2;

  0075b	c7 44 24 40 02
	00 00 00	 mov	 DWORD PTR cc$[rsp], 2
$LN36@checkhfp:
$LN32@checkhfp:
$LN19@checkhfp:
$LN8@checkhfp:

; 687  :         }
; 688  :       }
; 689  :     }
; 690  :   return cc;

  00763	8b 44 24 40	 mov	 eax, DWORD PTR cc$[rsp]
$LN1@checkhfp:

; 691  : }

  00767	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0076f	48 33 cc	 xor	 rcx, rsp
  00772	e8 00 00 00 00	 call	 __security_check_cookie
  00777	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  0077e	5f		 pop	 rdi
  0077f	c3		 ret	 0
checkhfp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\pfpo.c
_TEXT	SEGMENT
half$ = 32
tv136 = 36
tv65 = 40
ntab$ = 64
nword$ = 72
roundrule$ = 80
rem$ = 88
base$ = 96
neg$ = 104
type$ = 112
mid$ = 120
roundarray PROC

; 490  : {

$LN33:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 491  :   int half = base / 2;

  00017	8b 44 24 60	 mov	 eax, DWORD PTR base$[rsp]
  0001b	99		 cdq
  0001c	2b c2		 sub	 eax, edx
  0001e	d1 f8		 sar	 eax, 1
  00020	89 44 24 20	 mov	 DWORD PTR half$[rsp], eax

; 492  :   switch (roundrule)

  00024	8b 44 24 50	 mov	 eax, DWORD PTR roundrule$[rsp]
  00028	89 44 24 28	 mov	 DWORD PTR tv65[rsp], eax
  0002c	83 7c 24 28 07	 cmp	 DWORD PTR tv65[rsp], 7
  00031	0f 87 a5 01 00
	00		 ja	 $LN2@roundarray
  00037	48 63 44 24 28	 movsxd	 rax, DWORD PTR tv65[rsp]
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00043	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN32@roundarray[rcx+rax*4]
  0004a	48 03 c1	 add	 rax, rcx
  0004d	ff e0		 jmp	 rax
$LN6@roundarray:

; 493  :   {
; 494  :   case 0:
; 495  :     if (rem > half)

  0004f	8b 44 24 20	 mov	 eax, DWORD PTR half$[rsp]
  00053	39 44 24 58	 cmp	 DWORD PTR rem$[rsp], eax
  00057	7e 16		 jle	 SHORT $LN7@roundarray

; 496  :       arrayaddint(ntab, 1, nword);

  00059	44 8b 44 24 48	 mov	 r8d, DWORD PTR nword$[rsp]
  0005e	ba 01 00 00 00	 mov	 edx, 1
  00063	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ntab$[rsp]
  00068	e8 00 00 00 00	 call	 arrayaddint
  0006d	eb 52		 jmp	 SHORT $LN8@roundarray
$LN7@roundarray:

; 497  :     else
; 498  :       if (rem == half)

  0006f	8b 44 24 20	 mov	 eax, DWORD PTR half$[rsp]
  00073	39 44 24 58	 cmp	 DWORD PTR rem$[rsp], eax
  00077	75 48		 jne	 SHORT $LN9@roundarray

; 499  :       {
; 500  :         if (mid == 0)

  00079	83 7c 24 78 00	 cmp	 DWORD PTR mid$[rsp], 0
  0007e	75 16		 jne	 SHORT $LN10@roundarray

; 501  :           arrayaddint(ntab, 1, nword);

  00080	44 8b 44 24 48	 mov	 r8d, DWORD PTR nword$[rsp]
  00085	ba 01 00 00 00	 mov	 edx, 1
  0008a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ntab$[rsp]
  0008f	e8 00 00 00 00	 call	 arrayaddint
  00094	eb 2b		 jmp	 SHORT $LN11@roundarray
$LN10@roundarray:

; 502  :         else
; 503  :         if (ntab[nword - 1] & 0x00000001)

  00096	8b 44 24 48	 mov	 eax, DWORD PTR nword$[rsp]
  0009a	ff c8		 dec	 eax
  0009c	48 98		 cdqe
  0009e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ntab$[rsp]
  000a3	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  000a6	83 e0 01	 and	 eax, 1
  000a9	85 c0		 test	 eax, eax
  000ab	74 14		 je	 SHORT $LN12@roundarray

; 504  :           arrayaddint(ntab, 1, nword);

  000ad	44 8b 44 24 48	 mov	 r8d, DWORD PTR nword$[rsp]
  000b2	ba 01 00 00 00	 mov	 edx, 1
  000b7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ntab$[rsp]
  000bc	e8 00 00 00 00	 call	 arrayaddint
$LN12@roundarray:
$LN11@roundarray:
$LN9@roundarray:
$LN8@roundarray:

; 505  :       }
; 506  :     break;

  000c1	e9 16 01 00 00	 jmp	 $LN2@roundarray

; 507  :   case 1:
; 508  :     break;

  000c6	e9 11 01 00 00	 jmp	 $LN2@roundarray
$LN14@roundarray:

; 509  :   case 2:
; 510  :     if (!neg)

  000cb	83 7c 24 68 00	 cmp	 DWORD PTR neg$[rsp], 0
  000d0	75 14		 jne	 SHORT $LN15@roundarray

; 511  :       arrayaddint(ntab, 1, nword);

  000d2	44 8b 44 24 48	 mov	 r8d, DWORD PTR nword$[rsp]
  000d7	ba 01 00 00 00	 mov	 edx, 1
  000dc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ntab$[rsp]
  000e1	e8 00 00 00 00	 call	 arrayaddint
$LN15@roundarray:

; 512  :     break;

  000e6	e9 f1 00 00 00	 jmp	 $LN2@roundarray
$LN16@roundarray:

; 513  :   case 3:
; 514  :     if (neg)

  000eb	83 7c 24 68 00	 cmp	 DWORD PTR neg$[rsp], 0
  000f0	74 14		 je	 SHORT $LN17@roundarray

; 515  :       arrayaddint(ntab, 1, nword);

  000f2	44 8b 44 24 48	 mov	 r8d, DWORD PTR nword$[rsp]
  000f7	ba 01 00 00 00	 mov	 edx, 1
  000fc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ntab$[rsp]
  00101	e8 00 00 00 00	 call	 arrayaddint
$LN17@roundarray:

; 516  :     break;

  00106	e9 d1 00 00 00	 jmp	 $LN2@roundarray
$LN18@roundarray:

; 517  :   case 4:
; 518  :     if (rem >= half)

  0010b	8b 44 24 20	 mov	 eax, DWORD PTR half$[rsp]
  0010f	39 44 24 58	 cmp	 DWORD PTR rem$[rsp], eax
  00113	7c 14		 jl	 SHORT $LN19@roundarray

; 519  :       arrayaddint(ntab, 1, nword);

  00115	44 8b 44 24 48	 mov	 r8d, DWORD PTR nword$[rsp]
  0011a	ba 01 00 00 00	 mov	 edx, 1
  0011f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ntab$[rsp]
  00124	e8 00 00 00 00	 call	 arrayaddint
$LN19@roundarray:

; 520  :     break;

  00129	e9 ae 00 00 00	 jmp	 $LN2@roundarray
$LN20@roundarray:

; 521  :   case 5:
; 522  :     if (rem > half)

  0012e	8b 44 24 20	 mov	 eax, DWORD PTR half$[rsp]
  00132	39 44 24 58	 cmp	 DWORD PTR rem$[rsp], eax
  00136	7e 14		 jle	 SHORT $LN21@roundarray

; 523  :       arrayaddint(ntab, 1, nword);

  00138	44 8b 44 24 48	 mov	 r8d, DWORD PTR nword$[rsp]
  0013d	ba 01 00 00 00	 mov	 edx, 1
  00142	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ntab$[rsp]
  00147	e8 00 00 00 00	 call	 arrayaddint
$LN21@roundarray:

; 524  :     break;

  0014c	e9 8b 00 00 00	 jmp	 $LN2@roundarray
$LN22@roundarray:

; 525  :   case 6:
; 526  :     if (rem > 0)

  00151	83 7c 24 58 00	 cmp	 DWORD PTR rem$[rsp], 0
  00156	7e 14		 jle	 SHORT $LN23@roundarray

; 527  :       arrayaddint(ntab, 1, nword);

  00158	44 8b 44 24 48	 mov	 r8d, DWORD PTR nword$[rsp]
  0015d	ba 01 00 00 00	 mov	 edx, 1
  00162	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ntab$[rsp]
  00167	e8 00 00 00 00	 call	 arrayaddint
$LN23@roundarray:

; 528  :     break;

  0016c	eb 6e		 jmp	 SHORT $LN2@roundarray
$LN24@roundarray:

; 529  :   case 7:
; 530  :     switch (type)

  0016e	8b 44 24 70	 mov	 eax, DWORD PTR type$[rsp]
  00172	89 44 24 24	 mov	 DWORD PTR tv136[rsp], eax
  00176	83 7c 24 24 00	 cmp	 DWORD PTR tv136[rsp], 0
  0017b	74 10		 je	 SHORT $LN25@roundarray
  0017d	83 7c 24 24 01	 cmp	 DWORD PTR tv136[rsp], 1
  00182	74 09		 je	 SHORT $LN26@roundarray
  00184	83 7c 24 24 02	 cmp	 DWORD PTR tv136[rsp], 2
  00189	74 2f		 je	 SHORT $LN28@roundarray
  0018b	eb 4f		 jmp	 SHORT $LN4@roundarray
$LN25@roundarray:
$LN26@roundarray:

; 531  :     {
; 532  :     case 0:
; 533  :     case 1:
; 534  :       if ((ntab[nword - 1] & 0x00000001) == 0x00)

  0018d	8b 44 24 48	 mov	 eax, DWORD PTR nword$[rsp]
  00191	ff c8		 dec	 eax
  00193	48 98		 cdqe
  00195	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ntab$[rsp]
  0019a	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  0019d	83 e0 01	 and	 eax, 1
  001a0	85 c0		 test	 eax, eax
  001a2	75 14		 jne	 SHORT $LN27@roundarray

; 535  :         arrayaddint(ntab, 1, nword);

  001a4	44 8b 44 24 48	 mov	 r8d, DWORD PTR nword$[rsp]
  001a9	ba 01 00 00 00	 mov	 edx, 1
  001ae	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ntab$[rsp]
  001b3	e8 00 00 00 00	 call	 arrayaddint
$LN27@roundarray:

; 536  :       break;

  001b8	eb 22		 jmp	 SHORT $LN4@roundarray
$LN28@roundarray:

; 537  :     case 2:
; 538  :       if (rem == 0 || rem == 5)

  001ba	83 7c 24 58 00	 cmp	 DWORD PTR rem$[rsp], 0
  001bf	74 07		 je	 SHORT $LN30@roundarray
  001c1	83 7c 24 58 05	 cmp	 DWORD PTR rem$[rsp], 5
  001c6	75 14		 jne	 SHORT $LN29@roundarray
$LN30@roundarray:

; 539  :         arrayaddint(ntab, 1, nword);

  001c8	44 8b 44 24 48	 mov	 r8d, DWORD PTR nword$[rsp]
  001cd	ba 01 00 00 00	 mov	 edx, 1
  001d2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ntab$[rsp]
  001d7	e8 00 00 00 00	 call	 arrayaddint
$LN29@roundarray:
$LN4@roundarray:
$LN2@roundarray:

; 540  :       break;
; 541  :     }
; 542  :     break;
; 543  :   }
; 544  :   return;
; 545  : }

  001dc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001e0	c3		 ret	 0
  001e1	0f 1f 00	 npad	 3
$LN32@roundarray:
  001e4	00 00 00 00	 DD	 $LN6@roundarray
  001e8	00 00 00 00	 DD	 $LN2@roundarray
  001ec	00 00 00 00	 DD	 $LN14@roundarray
  001f0	00 00 00 00	 DD	 $LN16@roundarray
  001f4	00 00 00 00	 DD	 $LN18@roundarray
  001f8	00 00 00 00	 DD	 $LN20@roundarray
  001fc	00 00 00 00	 DD	 $LN22@roundarray
  00200	00 00 00 00	 DD	 $LN24@roundarray
roundarray ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\pfpo.c
_TEXT	SEGMENT
i$ = 0
bitctr$ = 4
temp1$ = 8
bctr$ = 12
ltab$ = 32
ntab$ = 40
getlzerobits PROC

; 465  : {

$LN9:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 18	 sub	 rsp, 24

; 466  :   int bitctr = 0;

  0000d	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR bitctr$[rsp], 0

; 467  :   int i;
; 468  :   int bctr = 0;

  00015	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR bctr$[rsp], 0

; 469  :   unsigned int temp1;
; 470  :   for (i = 0; i < ntab; i++)

  0001d	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
  00024	eb 08		 jmp	 SHORT $LN4@getlzerobi
$LN2@getlzerobi:
  00026	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00029	ff c0		 inc	 eax
  0002b	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@getlzerobi:
  0002e	8b 44 24 28	 mov	 eax, DWORD PTR ntab$[rsp]
  00032	39 04 24	 cmp	 DWORD PTR i$[rsp], eax
  00035	7d 62		 jge	 SHORT $LN3@getlzerobi

; 471  :   {
; 472  :     if (ltab[i] == 0)

  00037	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  0003b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ltab$[rsp]
  00040	83 3c 81 00	 cmp	 DWORD PTR [rcx+rax*4], 0
  00044	75 0d		 jne	 SHORT $LN7@getlzerobi

; 473  :     {
; 474  :       bitctr += 32;

  00046	8b 44 24 04	 mov	 eax, DWORD PTR bitctr$[rsp]
  0004a	83 c0 20	 add	 eax, 32			; 00000020H
  0004d	89 44 24 04	 mov	 DWORD PTR bitctr$[rsp], eax

; 475  :       continue;

  00051	eb d3		 jmp	 SHORT $LN2@getlzerobi
$LN7@getlzerobi:

; 476  :     }
; 477  :     temp1 = ltab[i];

  00053	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00057	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ltab$[rsp]
  0005c	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  0005f	89 44 24 08	 mov	 DWORD PTR temp1$[rsp], eax
$LN5@getlzerobi:

; 478  :     while (temp1 > 0)

  00063	83 7c 24 08 00	 cmp	 DWORD PTR temp1$[rsp], 0
  00068	76 16		 jbe	 SHORT $LN6@getlzerobi

; 479  :     {
; 480  :       bctr++;

  0006a	8b 44 24 0c	 mov	 eax, DWORD PTR bctr$[rsp]
  0006e	ff c0		 inc	 eax
  00070	89 44 24 0c	 mov	 DWORD PTR bctr$[rsp], eax

; 481  :       temp1 >>= 1;

  00074	8b 44 24 08	 mov	 eax, DWORD PTR temp1$[rsp]
  00078	d1 e8		 shr	 eax, 1
  0007a	89 44 24 08	 mov	 DWORD PTR temp1$[rsp], eax

; 482  :     }

  0007e	eb e3		 jmp	 SHORT $LN5@getlzerobi
$LN6@getlzerobi:

; 483  :     bitctr += (32 - bctr);

  00080	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00085	2b 44 24 0c	 sub	 eax, DWORD PTR bctr$[rsp]
  00089	8b 4c 24 04	 mov	 ecx, DWORD PTR bitctr$[rsp]
  0008d	03 c8		 add	 ecx, eax
  0008f	8b c1		 mov	 eax, ecx
  00091	89 44 24 04	 mov	 DWORD PTR bitctr$[rsp], eax

; 484  :     break;

  00095	eb 02		 jmp	 SHORT $LN3@getlzerobi

; 485  :   }

  00097	eb 8d		 jmp	 SHORT $LN2@getlzerobi
$LN3@getlzerobi:

; 486  :   return bitctr;

  00099	8b 44 24 04	 mov	 eax, DWORD PTR bitctr$[rsp]

; 487  : }

  0009d	48 83 c4 18	 add	 rsp, 24
  000a1	c3		 ret	 0
getlzerobits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\pfpo.c
_TEXT	SEGMENT
cbits$ = 0
lmd$ = 4
exp1$ = 8
tv78 = 12
exp$ = 16
tv90 = 24
expword$ = 48
lmdrtn$ = 56
dflwords$ = 64
dflexp	PROC

; 440  : {

$LN7:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 441  :   int exp;
; 442  :   int lmd;
; 443  :   int exp1;
; 444  :   int cbits;
; 445  :   cbits = expword >> dflrbebits[dflwords];

  00012	48 63 44 24 40	 movsxd	 rax, DWORD PTR dflwords$[rsp]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dflrbebits
  0001e	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00021	0f b6 c8	 movzx	 ecx, al
  00024	8b 44 24 30	 mov	 eax, DWORD PTR expword$[rsp]
  00028	d3 f8		 sar	 eax, cl
  0002a	89 04 24	 mov	 DWORD PTR cbits$[rsp], eax

; 446  :   if (cbits < 24)

  0002d	83 3c 24 18	 cmp	 DWORD PTR cbits$[rsp], 24
  00031	7d 24		 jge	 SHORT $LN2@dflexp

; 447  :   {
; 448  :     lmd = cbits % 8;

  00033	8b 04 24	 mov	 eax, DWORD PTR cbits$[rsp]
  00036	99		 cdq
  00037	83 e2 07	 and	 edx, 7
  0003a	03 c2		 add	 eax, edx
  0003c	83 e0 07	 and	 eax, 7
  0003f	2b c2		 sub	 eax, edx
  00041	89 44 24 04	 mov	 DWORD PTR lmd$[rsp], eax

; 449  :     exp1 = cbits / 8;

  00045	8b 04 24	 mov	 eax, DWORD PTR cbits$[rsp]
  00048	99		 cdq
  00049	83 e2 07	 and	 edx, 7
  0004c	03 c2		 add	 eax, edx
  0004e	c1 f8 03	 sar	 eax, 3
  00051	89 44 24 08	 mov	 DWORD PTR exp1$[rsp], eax

; 450  :   }

  00055	eb 32		 jmp	 SHORT $LN3@dflexp
$LN2@dflexp:

; 451  :   else
; 452  :   {
; 453  :     if (cbits % 2)

  00057	8b 04 24	 mov	 eax, DWORD PTR cbits$[rsp]
  0005a	99		 cdq
  0005b	83 e0 01	 and	 eax, 1
  0005e	33 c2		 xor	 eax, edx
  00060	2b c2		 sub	 eax, edx
  00062	85 c0		 test	 eax, eax
  00064	74 0a		 je	 SHORT $LN4@dflexp

; 454  :       lmd = 9;

  00066	c7 44 24 04 09
	00 00 00	 mov	 DWORD PTR lmd$[rsp], 9
  0006e	eb 08		 jmp	 SHORT $LN5@dflexp
$LN4@dflexp:

; 455  :     else
; 456  :       lmd = 8;

  00070	c7 44 24 04 08
	00 00 00	 mov	 DWORD PTR lmd$[rsp], 8
$LN5@dflexp:

; 457  :     exp1 = (cbits >> 1) % 2;

  00078	8b 04 24	 mov	 eax, DWORD PTR cbits$[rsp]
  0007b	d1 f8		 sar	 eax, 1
  0007d	99		 cdq
  0007e	83 e0 01	 and	 eax, 1
  00081	33 c2		 xor	 eax, edx
  00083	2b c2		 sub	 eax, edx
  00085	89 44 24 08	 mov	 DWORD PTR exp1$[rsp], eax
$LN3@dflexp:

; 458  :   }
; 459  :   exp = (exp1 << dflrbebits[dflwords]) + (expword % dflrbefac[dflwords]) - dflexpmax[dflwords];

  00089	48 63 44 24 40	 movsxd	 rax, DWORD PTR dflwords$[rsp]
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dflrbebits
  00095	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00098	0f b6 c8	 movzx	 ecx, al
  0009b	8b 44 24 08	 mov	 eax, DWORD PTR exp1$[rsp]
  0009f	d3 e0		 shl	 eax, cl
  000a1	89 44 24 0c	 mov	 DWORD PTR tv78[rsp], eax
  000a5	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR dflwords$[rsp]
  000aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:dflrbefac
  000b1	48 89 54 24 18	 mov	 QWORD PTR tv90[rsp], rdx
  000b6	8b 44 24 30	 mov	 eax, DWORD PTR expword$[rsp]
  000ba	99		 cdq
  000bb	4c 8b 44 24 18	 mov	 r8, QWORD PTR tv90[rsp]
  000c0	41 f7 3c 88	 idiv	 DWORD PTR [r8+rcx*4]
  000c4	8b c2		 mov	 eax, edx
  000c6	8b 4c 24 0c	 mov	 ecx, DWORD PTR tv78[rsp]
  000ca	03 c8		 add	 ecx, eax
  000cc	8b c1		 mov	 eax, ecx
  000ce	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR dflwords$[rsp]
  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:dflexpmax
  000da	2b 04 8a	 sub	 eax, DWORD PTR [rdx+rcx*4]
  000dd	89 44 24 10	 mov	 DWORD PTR exp$[rsp], eax

; 460  :   *lmdrtn = lmd;

  000e1	48 8b 44 24 38	 mov	 rax, QWORD PTR lmdrtn$[rsp]
  000e6	8b 4c 24 04	 mov	 ecx, DWORD PTR lmd$[rsp]
  000ea	89 08		 mov	 DWORD PTR [rax], ecx

; 461  :   return exp;

  000ec	8b 44 24 10	 mov	 eax, DWORD PTR exp$[rsp]

; 462  : }

  000f0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000f4	c3		 ret	 0
dflexp	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\pfpo.c
_TEXT	SEGMENT
i$ = 0
shiftword$ = 4
temp1$ = 8
wordnum$ = 12
shiftctr$ = 16
temp2$ = 20
ltab$ = 48
ntab$ = 56
shift$ = 64
arrayshiftleft PROC

; 405  : {

$LN14:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 406  :   int i;
; 407  :   int shiftctr;
; 408  :   int shiftword;
; 409  :   int wordnum;
; 410  :   unsigned int temp1;
; 411  :   unsigned int temp2;
; 412  :   shiftword = shift / 32;

  00012	8b 44 24 40	 mov	 eax, DWORD PTR shift$[rsp]
  00016	99		 cdq
  00017	83 e2 1f	 and	 edx, 31
  0001a	03 c2		 add	 eax, edx
  0001c	c1 f8 05	 sar	 eax, 5
  0001f	89 44 24 04	 mov	 DWORD PTR shiftword$[rsp], eax

; 413  :   if (shiftword > 0)

  00023	83 7c 24 04 00	 cmp	 DWORD PTR shiftword$[rsp], 0
  00028	0f 8e 84 00 00
	00		 jle	 $LN11@arrayshift

; 414  :   {
; 415  :     wordnum = ntab - shiftword;

  0002e	8b 44 24 04	 mov	 eax, DWORD PTR shiftword$[rsp]
  00032	8b 4c 24 38	 mov	 ecx, DWORD PTR ntab$[rsp]
  00036	2b c8		 sub	 ecx, eax
  00038	8b c1		 mov	 eax, ecx
  0003a	89 44 24 0c	 mov	 DWORD PTR wordnum$[rsp], eax

; 416  :     for (i = 0; i < wordnum; i++)

  0003e	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
  00045	eb 08		 jmp	 SHORT $LN4@arrayshift
$LN2@arrayshift:
  00047	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  0004a	ff c0		 inc	 eax
  0004c	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@arrayshift:
  0004f	8b 44 24 0c	 mov	 eax, DWORD PTR wordnum$[rsp]
  00053	39 04 24	 cmp	 DWORD PTR i$[rsp], eax
  00056	7d 24		 jge	 SHORT $LN3@arrayshift

; 417  :       ltab[i] = ltab[i + shiftword];

  00058	8b 44 24 04	 mov	 eax, DWORD PTR shiftword$[rsp]
  0005c	8b 0c 24	 mov	 ecx, DWORD PTR i$[rsp]
  0005f	03 c8		 add	 ecx, eax
  00061	8b c1		 mov	 eax, ecx
  00063	48 98		 cdqe
  00065	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  00069	48 8b 54 24 30	 mov	 rdx, QWORD PTR ltab$[rsp]
  0006e	4c 8b 44 24 30	 mov	 r8, QWORD PTR ltab$[rsp]
  00073	41 8b 04 80	 mov	 eax, DWORD PTR [r8+rax*4]
  00077	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
  0007a	eb cb		 jmp	 SHORT $LN2@arrayshift
$LN3@arrayshift:

; 418  :     for (; i < ntab; i++)

  0007c	eb 08		 jmp	 SHORT $LN7@arrayshift
$LN5@arrayshift:
  0007e	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00081	ff c0		 inc	 eax
  00083	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN7@arrayshift:
  00086	8b 44 24 38	 mov	 eax, DWORD PTR ntab$[rsp]
  0008a	39 04 24	 cmp	 DWORD PTR i$[rsp], eax
  0008d	7d 12		 jge	 SHORT $LN6@arrayshift

; 419  :       ltab[i] = 0;

  0008f	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ltab$[rsp]
  00098	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [rcx+rax*4], 0
  0009f	eb dd		 jmp	 SHORT $LN5@arrayshift
$LN6@arrayshift:

; 420  :     shift -= 32 * shiftword;

  000a1	6b 44 24 04 20	 imul	 eax, DWORD PTR shiftword$[rsp], 32 ; 00000020H
  000a6	8b 4c 24 40	 mov	 ecx, DWORD PTR shift$[rsp]
  000aa	2b c8		 sub	 ecx, eax
  000ac	8b c1		 mov	 eax, ecx
  000ae	89 44 24 40	 mov	 DWORD PTR shift$[rsp], eax
$LN11@arrayshift:

; 421  :   }
; 422  :   temp1 = 0;

  000b2	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR temp1$[rsp], 0

; 423  :   if (shift == 0)

  000ba	83 7c 24 40 00	 cmp	 DWORD PTR shift$[rsp], 0
  000bf	75 05		 jne	 SHORT $LN12@arrayshift

; 424  :     return;

  000c1	e9 80 00 00 00	 jmp	 $LN1@arrayshift
$LN12@arrayshift:

; 425  :   shiftctr = 32 - shift;

  000c6	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  000cb	2b 44 24 40	 sub	 eax, DWORD PTR shift$[rsp]
  000cf	89 44 24 10	 mov	 DWORD PTR shiftctr$[rsp], eax

; 426  :   for (i = ntab - 1; i >= 0; i--)

  000d3	8b 44 24 38	 mov	 eax, DWORD PTR ntab$[rsp]
  000d7	ff c8		 dec	 eax
  000d9	89 04 24	 mov	 DWORD PTR i$[rsp], eax
  000dc	eb 08		 jmp	 SHORT $LN10@arrayshift
$LN8@arrayshift:
  000de	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  000e1	ff c8		 dec	 eax
  000e3	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN10@arrayshift:
  000e6	83 3c 24 00	 cmp	 DWORD PTR i$[rsp], 0
  000ea	7c 5a		 jl	 SHORT $LN9@arrayshift

; 427  :   {
; 428  :     temp2 = ltab[i] >> shiftctr;

  000ec	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  000f0	8b 4c 24 10	 mov	 ecx, DWORD PTR shiftctr$[rsp]
  000f4	48 8b 54 24 30	 mov	 rdx, QWORD PTR ltab$[rsp]
  000f9	8b 04 82	 mov	 eax, DWORD PTR [rdx+rax*4]
  000fc	d3 e8		 shr	 eax, cl
  000fe	89 44 24 14	 mov	 DWORD PTR temp2$[rsp], eax

; 429  :     ltab[i] <<= shift;

  00102	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00106	8b 4c 24 40	 mov	 ecx, DWORD PTR shift$[rsp]
  0010a	48 8b 54 24 30	 mov	 rdx, QWORD PTR ltab$[rsp]
  0010f	8b 04 82	 mov	 eax, DWORD PTR [rdx+rax*4]
  00112	d3 e0		 shl	 eax, cl
  00114	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  00118	48 8b 54 24 30	 mov	 rdx, QWORD PTR ltab$[rsp]
  0011d	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax

; 430  :     ltab[i] += temp1;

  00120	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00124	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ltab$[rsp]
  00129	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  0012c	03 44 24 08	 add	 eax, DWORD PTR temp1$[rsp]
  00130	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  00134	48 8b 54 24 30	 mov	 rdx, QWORD PTR ltab$[rsp]
  00139	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax

; 431  :     temp1 = temp2;

  0013c	8b 44 24 14	 mov	 eax, DWORD PTR temp2$[rsp]
  00140	89 44 24 08	 mov	 DWORD PTR temp1$[rsp], eax

; 432  :   }

  00144	eb 98		 jmp	 SHORT $LN8@arrayshift
$LN9@arrayshift:
$LN1@arrayshift:

; 433  :   return;
; 434  : }

  00146	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0014a	c3		 ret	 0
arrayshiftleft ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\pfpo.c
_TEXT	SEGMENT
i$ = 0
shiftword$ = 4
rx$ = 8
shiftctr$ = 12
temp2$ = 16
temp1$ = 20
tv69 = 24
ltab$ = 48
ntab$ = 56
shift$ = 64
remtab$ = 72
arrayshiftright PROC

; 362  : {

$LN18:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	57		 push	 rdi
  00014	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 363  :   int i;
; 364  :   int rx = ntab - 1;

  00018	8b 44 24 38	 mov	 eax, DWORD PTR ntab$[rsp]
  0001c	ff c8		 dec	 eax
  0001e	89 44 24 08	 mov	 DWORD PTR rx$[rsp], eax

; 365  :   int shiftctr;
; 366  :   int shiftword;
; 367  :   unsigned int temp1;
; 368  :   unsigned int temp2;
; 369  :   shiftword = shift / 32;

  00022	8b 44 24 40	 mov	 eax, DWORD PTR shift$[rsp]
  00026	99		 cdq
  00027	83 e2 1f	 and	 edx, 31
  0002a	03 c2		 add	 eax, edx
  0002c	c1 f8 05	 sar	 eax, 5
  0002f	89 44 24 04	 mov	 DWORD PTR shiftword$[rsp], eax

; 370  :   memset(remtab, 0x00, ntab * sizeof(int));

  00033	48 63 44 24 38	 movsxd	 rax, DWORD PTR ntab$[rsp]
  00038	48 c1 e0 02	 shl	 rax, 2
  0003c	48 89 44 24 18	 mov	 QWORD PTR tv69[rsp], rax
  00041	48 8b 7c 24 48	 mov	 rdi, QWORD PTR remtab$[rsp]
  00046	33 c0		 xor	 eax, eax
  00048	48 8b 4c 24 18	 mov	 rcx, QWORD PTR tv69[rsp]
  0004d	f3 aa		 rep stosb

; 371  :   if (shiftword > 0)

  0004f	83 7c 24 04 00	 cmp	 DWORD PTR shiftword$[rsp], 0
  00054	0f 8e bd 00 00
	00		 jle	 $LN14@arrayshift

; 372  :   {
; 373  :     for (i = ntab - 1; i > ntab - shiftword - 1; i--)

  0005a	8b 44 24 38	 mov	 eax, DWORD PTR ntab$[rsp]
  0005e	ff c8		 dec	 eax
  00060	89 04 24	 mov	 DWORD PTR i$[rsp], eax
  00063	eb 08		 jmp	 SHORT $LN4@arrayshift
$LN2@arrayshift:
  00065	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00068	ff c8		 dec	 eax
  0006a	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@arrayshift:
  0006d	8b 44 24 04	 mov	 eax, DWORD PTR shiftword$[rsp]
  00071	8b 4c 24 38	 mov	 ecx, DWORD PTR ntab$[rsp]
  00075	2b c8		 sub	 ecx, eax
  00077	8b c1		 mov	 eax, ecx
  00079	ff c8		 dec	 eax
  0007b	39 04 24	 cmp	 DWORD PTR i$[rsp], eax
  0007e	7e 25		 jle	 SHORT $LN3@arrayshift

; 374  :     {
; 375  :       remtab[rx] = ltab[i];

  00080	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00084	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR rx$[rsp]
  00089	48 8b 54 24 48	 mov	 rdx, QWORD PTR remtab$[rsp]
  0008e	48 8b 7c 24 30	 mov	 rdi, QWORD PTR ltab$[rsp]
  00093	8b 04 87	 mov	 eax, DWORD PTR [rdi+rax*4]
  00096	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax

; 376  :       rx--;

  00099	8b 44 24 08	 mov	 eax, DWORD PTR rx$[rsp]
  0009d	ff c8		 dec	 eax
  0009f	89 44 24 08	 mov	 DWORD PTR rx$[rsp], eax

; 377  :     }

  000a3	eb c0		 jmp	 SHORT $LN2@arrayshift
$LN3@arrayshift:

; 378  :     for (i = ntab - 1; i >= shiftword; i--)

  000a5	8b 44 24 38	 mov	 eax, DWORD PTR ntab$[rsp]
  000a9	ff c8		 dec	 eax
  000ab	89 04 24	 mov	 DWORD PTR i$[rsp], eax
  000ae	eb 08		 jmp	 SHORT $LN7@arrayshift
$LN5@arrayshift:
  000b0	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  000b3	ff c8		 dec	 eax
  000b5	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN7@arrayshift:
  000b8	8b 44 24 04	 mov	 eax, DWORD PTR shiftword$[rsp]
  000bc	39 04 24	 cmp	 DWORD PTR i$[rsp], eax
  000bf	7c 23		 jl	 SHORT $LN6@arrayshift

; 379  :       ltab[i] = ltab[i - shiftword];

  000c1	8b 44 24 04	 mov	 eax, DWORD PTR shiftword$[rsp]
  000c5	8b 0c 24	 mov	 ecx, DWORD PTR i$[rsp]
  000c8	2b c8		 sub	 ecx, eax
  000ca	8b c1		 mov	 eax, ecx
  000cc	48 98		 cdqe
  000ce	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  000d2	48 8b 54 24 30	 mov	 rdx, QWORD PTR ltab$[rsp]
  000d7	48 8b 7c 24 30	 mov	 rdi, QWORD PTR ltab$[rsp]
  000dc	8b 04 87	 mov	 eax, DWORD PTR [rdi+rax*4]
  000df	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
  000e2	eb cc		 jmp	 SHORT $LN5@arrayshift
$LN6@arrayshift:

; 380  :     for (; i >= 0; i--)

  000e4	eb 08		 jmp	 SHORT $LN10@arrayshift
$LN8@arrayshift:
  000e6	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  000e9	ff c8		 dec	 eax
  000eb	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN10@arrayshift:
  000ee	83 3c 24 00	 cmp	 DWORD PTR i$[rsp], 0
  000f2	7c 12		 jl	 SHORT $LN9@arrayshift

; 381  :       ltab[i] = 0;

  000f4	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  000f8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ltab$[rsp]
  000fd	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [rcx+rax*4], 0
  00104	eb e0		 jmp	 SHORT $LN8@arrayshift
$LN9@arrayshift:

; 382  :     shift -= 32 * shiftword;

  00106	6b 44 24 04 20	 imul	 eax, DWORD PTR shiftword$[rsp], 32 ; 00000020H
  0010b	8b 4c 24 40	 mov	 ecx, DWORD PTR shift$[rsp]
  0010f	2b c8		 sub	 ecx, eax
  00111	8b c1		 mov	 eax, ecx
  00113	89 44 24 40	 mov	 DWORD PTR shift$[rsp], eax
$LN14@arrayshift:

; 383  :   }
; 384  :   if (shift == 0)

  00117	83 7c 24 40 00	 cmp	 DWORD PTR shift$[rsp], 0
  0011c	75 05		 jne	 SHORT $LN15@arrayshift

; 385  :     return;

  0011e	e9 b5 00 00 00	 jmp	 $LN1@arrayshift
$LN15@arrayshift:

; 386  :   shiftctr = 32 - shift;

  00123	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00128	2b 44 24 40	 sub	 eax, DWORD PTR shift$[rsp]
  0012c	89 44 24 0c	 mov	 DWORD PTR shiftctr$[rsp], eax

; 387  :   temp1 = 0;

  00130	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR temp1$[rsp], 0

; 388  :   for (i = 0; i < ntab; i++)

  00138	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
  0013f	eb 08		 jmp	 SHORT $LN13@arrayshift
$LN11@arrayshift:
  00141	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00144	ff c0		 inc	 eax
  00146	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN13@arrayshift:
  00149	8b 44 24 38	 mov	 eax, DWORD PTR ntab$[rsp]
  0014d	39 04 24	 cmp	 DWORD PTR i$[rsp], eax
  00150	0f 8d 82 00 00
	00		 jge	 $LN12@arrayshift

; 389  :   {
; 390  :     temp2 = ltab[i] << shiftctr;

  00156	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  0015a	8b 4c 24 0c	 mov	 ecx, DWORD PTR shiftctr$[rsp]
  0015e	48 8b 54 24 30	 mov	 rdx, QWORD PTR ltab$[rsp]
  00163	8b 04 82	 mov	 eax, DWORD PTR [rdx+rax*4]
  00166	d3 e0		 shl	 eax, cl
  00168	89 44 24 10	 mov	 DWORD PTR temp2$[rsp], eax

; 391  :     if (i == ntab - 1)

  0016c	8b 44 24 38	 mov	 eax, DWORD PTR ntab$[rsp]
  00170	ff c8		 dec	 eax
  00172	39 04 24	 cmp	 DWORD PTR i$[rsp], eax
  00175	75 1a		 jne	 SHORT $LN16@arrayshift

; 392  :       remtab[rx] = temp2 >> shiftctr;

  00177	8b 44 24 0c	 mov	 eax, DWORD PTR shiftctr$[rsp]
  0017b	0f b6 c8	 movzx	 ecx, al
  0017e	8b 44 24 10	 mov	 eax, DWORD PTR temp2$[rsp]
  00182	d3 e8		 shr	 eax, cl
  00184	48 63 4c 24 08	 movsxd	 rcx, DWORD PTR rx$[rsp]
  00189	48 8b 54 24 48	 mov	 rdx, QWORD PTR remtab$[rsp]
  0018e	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
$LN16@arrayshift:

; 393  :     ltab[i] >>= shift;

  00191	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00195	8b 4c 24 40	 mov	 ecx, DWORD PTR shift$[rsp]
  00199	48 8b 54 24 30	 mov	 rdx, QWORD PTR ltab$[rsp]
  0019e	8b 04 82	 mov	 eax, DWORD PTR [rdx+rax*4]
  001a1	d3 e8		 shr	 eax, cl
  001a3	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  001a7	48 8b 54 24 30	 mov	 rdx, QWORD PTR ltab$[rsp]
  001ac	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax

; 394  :     ltab[i] += temp1;

  001af	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  001b3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ltab$[rsp]
  001b8	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  001bb	03 44 24 14	 add	 eax, DWORD PTR temp1$[rsp]
  001bf	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  001c3	48 8b 54 24 30	 mov	 rdx, QWORD PTR ltab$[rsp]
  001c8	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax

; 395  :     temp1 = temp2;

  001cb	8b 44 24 10	 mov	 eax, DWORD PTR temp2$[rsp]
  001cf	89 44 24 14	 mov	 DWORD PTR temp1$[rsp], eax

; 396  :   }

  001d3	e9 69 ff ff ff	 jmp	 $LN11@arrayshift
$LN12@arrayshift:
$LN1@arrayshift:

; 397  :   return;
; 398  : }

  001d8	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001dc	5f		 pop	 rdi
  001dd	c3		 ret	 0
arrayshiftright ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\pfpo.c
_TEXT	SEGMENT
i$ = 0
op1$ = 8
carry$ = 16
op2$ = 24
ltab$ = 48
mult$ = 56
ntab$ = 64
arraymlt PROC

; 340  : {

$LN6:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 341  :   int i;
; 342  :   unsigned long long carry = 0;

  00012	48 c7 44 24 10
	00 00 00 00	 mov	 QWORD PTR carry$[rsp], 0

; 343  :   unsigned long long op1;
; 344  :   unsigned long long op2 = (unsigned long long)mult;

  0001b	48 63 44 24 38	 movsxd	 rax, DWORD PTR mult$[rsp]
  00020	48 89 44 24 18	 mov	 QWORD PTR op2$[rsp], rax

; 345  :   for (i = ntab - 1;i >= 0;i--)

  00025	8b 44 24 40	 mov	 eax, DWORD PTR ntab$[rsp]
  00029	ff c8		 dec	 eax
  0002b	89 04 24	 mov	 DWORD PTR i$[rsp], eax
  0002e	eb 08		 jmp	 SHORT $LN4@arraymlt
$LN2@arraymlt:
  00030	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00033	ff c8		 dec	 eax
  00035	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@arraymlt:
  00038	83 3c 24 00	 cmp	 DWORD PTR i$[rsp], 0
  0003c	7c 5b		 jl	 SHORT $LN3@arraymlt

; 346  :   {
; 347  :     op1 = (unsigned long long)ltab[i];

  0003e	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00042	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ltab$[rsp]
  00047	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  0004a	48 89 44 24 08	 mov	 QWORD PTR op1$[rsp], rax

; 348  :     op1 = (op1 * op2) + carry;

  0004f	48 8b 44 24 08	 mov	 rax, QWORD PTR op1$[rsp]
  00054	48 0f af 44 24
	18		 imul	 rax, QWORD PTR op2$[rsp]
  0005a	48 03 44 24 10	 add	 rax, QWORD PTR carry$[rsp]
  0005f	48 89 44 24 08	 mov	 QWORD PTR op1$[rsp], rax

; 349  :     carry = op1 >> 32;

  00064	48 8b 44 24 08	 mov	 rax, QWORD PTR op1$[rsp]
  00069	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  0006d	48 89 44 24 10	 mov	 QWORD PTR carry$[rsp], rax

; 350  :     op1 &= 0x00000000ffffffffll;

  00072	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00077	48 8b 4c 24 08	 mov	 rcx, QWORD PTR op1$[rsp]
  0007c	48 23 c8	 and	 rcx, rax
  0007f	48 8b c1	 mov	 rax, rcx
  00082	48 89 44 24 08	 mov	 QWORD PTR op1$[rsp], rax

; 351  :     ltab[i] = (unsigned int)op1;

  00087	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  0008b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ltab$[rsp]
  00090	8b 54 24 08	 mov	 edx, DWORD PTR op1$[rsp]
  00094	89 14 81	 mov	 DWORD PTR [rcx+rax*4], edx

; 352  :   }

  00097	eb 97		 jmp	 SHORT $LN2@arraymlt
$LN3@arraymlt:

; 353  :   ltab[0] += (unsigned int)carry;

  00099	b8 04 00 00 00	 mov	 eax, 4
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ltab$[rsp]
  000a7	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  000aa	03 44 24 10	 add	 eax, DWORD PTR carry$[rsp]
  000ae	b9 04 00 00 00	 mov	 ecx, 4
  000b3	48 6b c9 00	 imul	 rcx, rcx, 0
  000b7	48 8b 54 24 30	 mov	 rdx, QWORD PTR ltab$[rsp]
  000bc	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 354  :   return;
; 355  : }

  000bf	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000c3	c3		 ret	 0
arraymlt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\pfpo.c
_TEXT	SEGMENT
i$ = 0
op1$ = 8
carry$ = 16
op2$ = 24
tab1$ = 48
incr$ = 56
ntab$ = 64
arrayaddint PROC

; 308  : {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 309  :   unsigned long long carry = 0;

  00012	48 c7 44 24 10
	00 00 00 00	 mov	 QWORD PTR carry$[rsp], 0

; 310  :   unsigned long long op1;
; 311  :   unsigned long long op2;
; 312  :   int i;
; 313  :   op2 = (unsigned long long)incr;

  0001b	48 63 44 24 38	 movsxd	 rax, DWORD PTR incr$[rsp]
  00020	48 89 44 24 18	 mov	 QWORD PTR op2$[rsp], rax

; 314  :   op1 = (unsigned long long)tab1[ntab - 1];

  00025	8b 44 24 40	 mov	 eax, DWORD PTR ntab$[rsp]
  00029	ff c8		 dec	 eax
  0002b	48 98		 cdqe
  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tab1$[rsp]
  00032	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00035	48 89 44 24 08	 mov	 QWORD PTR op1$[rsp], rax

; 315  :   op1 += op2;

  0003a	48 8b 44 24 18	 mov	 rax, QWORD PTR op2$[rsp]
  0003f	48 8b 4c 24 08	 mov	 rcx, QWORD PTR op1$[rsp]
  00044	48 03 c8	 add	 rcx, rax
  00047	48 8b c1	 mov	 rax, rcx
  0004a	48 89 44 24 08	 mov	 QWORD PTR op1$[rsp], rax

; 316  :   carry = op1 >> 32;

  0004f	48 8b 44 24 08	 mov	 rax, QWORD PTR op1$[rsp]
  00054	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00058	48 89 44 24 10	 mov	 QWORD PTR carry$[rsp], rax

; 317  :   op1 &= 0x00000000ffffffffll;

  0005d	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00062	48 8b 4c 24 08	 mov	 rcx, QWORD PTR op1$[rsp]
  00067	48 23 c8	 and	 rcx, rax
  0006a	48 8b c1	 mov	 rax, rcx
  0006d	48 89 44 24 08	 mov	 QWORD PTR op1$[rsp], rax

; 318  :   tab1[ntab - 1] = (unsigned int)op1;

  00072	8b 44 24 40	 mov	 eax, DWORD PTR ntab$[rsp]
  00076	ff c8		 dec	 eax
  00078	48 98		 cdqe
  0007a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tab1$[rsp]
  0007f	8b 54 24 08	 mov	 edx, DWORD PTR op1$[rsp]
  00083	89 14 81	 mov	 DWORD PTR [rcx+rax*4], edx

; 319  :   i = ntab - 2;

  00086	8b 44 24 40	 mov	 eax, DWORD PTR ntab$[rsp]
  0008a	83 e8 02	 sub	 eax, 2
  0008d	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN2@arrayaddin:

; 320  :   while (carry && i > 0)

  00090	48 83 7c 24 10
	00		 cmp	 QWORD PTR carry$[rsp], 0
  00096	74 69		 je	 SHORT $LN3@arrayaddin
  00098	83 3c 24 00	 cmp	 DWORD PTR i$[rsp], 0
  0009c	7e 63		 jle	 SHORT $LN3@arrayaddin

; 321  :   {
; 322  :     op1 = (unsigned long long)tab1[i];

  0009e	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  000a2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tab1$[rsp]
  000a7	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  000aa	48 89 44 24 08	 mov	 QWORD PTR op1$[rsp], rax

; 323  :     op1 += carry;

  000af	48 8b 44 24 10	 mov	 rax, QWORD PTR carry$[rsp]
  000b4	48 8b 4c 24 08	 mov	 rcx, QWORD PTR op1$[rsp]
  000b9	48 03 c8	 add	 rcx, rax
  000bc	48 8b c1	 mov	 rax, rcx
  000bf	48 89 44 24 08	 mov	 QWORD PTR op1$[rsp], rax

; 324  :     carry = op1 >> 32;

  000c4	48 8b 44 24 08	 mov	 rax, QWORD PTR op1$[rsp]
  000c9	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  000cd	48 89 44 24 10	 mov	 QWORD PTR carry$[rsp], rax

; 325  :     op1 &= 0x00000000ffffffffll;

  000d2	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  000d7	48 8b 4c 24 08	 mov	 rcx, QWORD PTR op1$[rsp]
  000dc	48 23 c8	 and	 rcx, rax
  000df	48 8b c1	 mov	 rax, rcx
  000e2	48 89 44 24 08	 mov	 QWORD PTR op1$[rsp], rax

; 326  :     tab1[i] = (unsigned int)op1;

  000e7	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  000eb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tab1$[rsp]
  000f0	8b 54 24 08	 mov	 edx, DWORD PTR op1$[rsp]
  000f4	89 14 81	 mov	 DWORD PTR [rcx+rax*4], edx

; 327  :     i--;

  000f7	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  000fa	ff c8		 dec	 eax
  000fc	89 04 24	 mov	 DWORD PTR i$[rsp], eax

; 328  :   }

  000ff	eb 8f		 jmp	 SHORT $LN2@arrayaddin
$LN3@arrayaddin:

; 329  :   tab1[0] += (unsigned int)carry;

  00101	b8 04 00 00 00	 mov	 eax, 4
  00106	48 6b c0 00	 imul	 rax, rax, 0
  0010a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tab1$[rsp]
  0010f	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00112	03 44 24 10	 add	 eax, DWORD PTR carry$[rsp]
  00116	b9 04 00 00 00	 mov	 ecx, 4
  0011b	48 6b c9 00	 imul	 rcx, rcx, 0
  0011f	48 8b 54 24 30	 mov	 rdx, QWORD PTR tab1$[rsp]
  00124	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 330  :   return;
; 331  : }

  00127	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0012b	c3		 ret	 0
arrayaddint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\pfpo.c
_TEXT	SEGMENT
i$ = 0
tab2ctr$ = 4
op1$ = 8
carry$ = 16
op2$ = 24
tab1$ = 48
tab2$ = 56
ntab1$ = 64
ntab2$ = 72
arrayadd PROC

; 276  : {

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 277  :   unsigned long long carry = 0;

  00018	48 c7 44 24 10
	00 00 00 00	 mov	 QWORD PTR carry$[rsp], 0

; 278  :   unsigned long long op1;
; 279  :   unsigned long long op2;
; 280  :   int i;
; 281  :   int tab2ctr = ntab2;

  00021	8b 44 24 48	 mov	 eax, DWORD PTR ntab2$[rsp]
  00025	89 44 24 04	 mov	 DWORD PTR tab2ctr$[rsp], eax

; 282  :   for (i = ntab1 - 1;i >= 0;i--)

  00029	8b 44 24 40	 mov	 eax, DWORD PTR ntab1$[rsp]
  0002d	ff c8		 dec	 eax
  0002f	89 04 24	 mov	 DWORD PTR i$[rsp], eax
  00032	eb 08		 jmp	 SHORT $LN4@arrayadd
$LN2@arrayadd:
  00034	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00037	ff c8		 dec	 eax
  00039	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@arrayadd:
  0003c	83 3c 24 00	 cmp	 DWORD PTR i$[rsp], 0
  00040	0f 8c aa 00 00
	00		 jl	 $LN3@arrayadd

; 283  :   {
; 284  :     op1 = (unsigned long long)tab1[i];

  00046	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  0004a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tab1$[rsp]
  0004f	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00052	48 89 44 24 08	 mov	 QWORD PTR op1$[rsp], rax

; 285  :     if (tab2ctr < 1)

  00057	83 7c 24 04 01	 cmp	 DWORD PTR tab2ctr$[rsp], 1
  0005c	7d 17		 jge	 SHORT $LN5@arrayadd

; 286  :       op1 += carry;

  0005e	48 8b 44 24 10	 mov	 rax, QWORD PTR carry$[rsp]
  00063	48 8b 4c 24 08	 mov	 rcx, QWORD PTR op1$[rsp]
  00068	48 03 c8	 add	 rcx, rax
  0006b	48 8b c1	 mov	 rax, rcx
  0006e	48 89 44 24 08	 mov	 QWORD PTR op1$[rsp], rax
  00073	eb 3b		 jmp	 SHORT $LN6@arrayadd
$LN5@arrayadd:

; 287  :     else
; 288  :     {
; 289  :       op2 = (unsigned long long)tab2[i];

  00075	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00079	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tab2$[rsp]
  0007e	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00081	48 89 44 24 18	 mov	 QWORD PTR op2$[rsp], rax

; 290  :       op1 += op2 + carry;

  00086	48 8b 44 24 10	 mov	 rax, QWORD PTR carry$[rsp]
  0008b	48 8b 4c 24 18	 mov	 rcx, QWORD PTR op2$[rsp]
  00090	48 03 c8	 add	 rcx, rax
  00093	48 8b c1	 mov	 rax, rcx
  00096	48 8b 4c 24 08	 mov	 rcx, QWORD PTR op1$[rsp]
  0009b	48 03 c8	 add	 rcx, rax
  0009e	48 8b c1	 mov	 rax, rcx
  000a1	48 89 44 24 08	 mov	 QWORD PTR op1$[rsp], rax

; 291  :       tab2ctr--;

  000a6	8b 44 24 04	 mov	 eax, DWORD PTR tab2ctr$[rsp]
  000aa	ff c8		 dec	 eax
  000ac	89 44 24 04	 mov	 DWORD PTR tab2ctr$[rsp], eax
$LN6@arrayadd:

; 292  :     }
; 293  :     carry = op1 >> 32;

  000b0	48 8b 44 24 08	 mov	 rax, QWORD PTR op1$[rsp]
  000b5	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  000b9	48 89 44 24 10	 mov	 QWORD PTR carry$[rsp], rax

; 294  :     tab1[i] = (unsigned int)(op1 & 0x00000000ffffffffll);

  000be	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  000c3	48 8b 4c 24 08	 mov	 rcx, QWORD PTR op1$[rsp]
  000c8	48 23 c8	 and	 rcx, rax
  000cb	48 8b c1	 mov	 rax, rcx
  000ce	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  000d2	48 8b 54 24 30	 mov	 rdx, QWORD PTR tab1$[rsp]
  000d7	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax

; 295  :     if (carry == 0 && tab2ctr < 1)

  000da	48 83 7c 24 10
	00		 cmp	 QWORD PTR carry$[rsp], 0
  000e0	75 09		 jne	 SHORT $LN7@arrayadd
  000e2	83 7c 24 04 01	 cmp	 DWORD PTR tab2ctr$[rsp], 1
  000e7	7d 02		 jge	 SHORT $LN7@arrayadd

; 296  :       break;

  000e9	eb 05		 jmp	 SHORT $LN3@arrayadd
$LN7@arrayadd:

; 297  :   }

  000eb	e9 44 ff ff ff	 jmp	 $LN2@arrayadd
$LN3@arrayadd:

; 298  :   tab1[0] += (unsigned int)carry;

  000f0	b8 04 00 00 00	 mov	 eax, 4
  000f5	48 6b c0 00	 imul	 rax, rax, 0
  000f9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tab1$[rsp]
  000fe	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00101	03 44 24 10	 add	 eax, DWORD PTR carry$[rsp]
  00105	b9 04 00 00 00	 mov	 ecx, 4
  0010a	48 6b c9 00	 imul	 rcx, rcx, 0
  0010e	48 8b 54 24 30	 mov	 rdx, QWORD PTR tab1$[rsp]
  00113	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 299  :   return;
; 300  : }

  00116	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0011a	c3		 ret	 0
arrayadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\pfpo.c
_TEXT	SEGMENT
i$ = 0
work1$ = 8
temp1$ = 16
divisort$ = 24
dividend$ = 32
ltab$ = 64
divisor$ = 72
ntab$ = 80
rem$ = 88
arraydiv PROC

; 250  : {

$LN7:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 251  :   unsigned long long temp1 = 0;

  00017	48 c7 44 24 10
	00 00 00 00	 mov	 QWORD PTR temp1$[rsp], 0

; 252  :   unsigned long long work1;
; 253  :   unsigned long long divisort;
; 254  :   unsigned long long dividend;
; 255  :   int i;
; 256  :   work1 = (unsigned long long)ltab[0];

  00020	b8 04 00 00 00	 mov	 eax, 4
  00025	48 6b c0 00	 imul	 rax, rax, 0
  00029	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ltab$[rsp]
  0002e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00031	48 89 44 24 08	 mov	 QWORD PTR work1$[rsp], rax

; 257  :   divisort = (unsigned long long)divisor;

  00036	48 63 44 24 48	 movsxd	 rax, DWORD PTR divisor$[rsp]
  0003b	48 89 44 24 18	 mov	 QWORD PTR divisort$[rsp], rax

; 258  :   for (i = 0;i < ntab;i++)

  00040	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
  00047	eb 08		 jmp	 SHORT $LN4@arraydiv
$LN2@arraydiv:
  00049	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  0004c	ff c0		 inc	 eax
  0004e	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@arraydiv:
  00051	8b 44 24 50	 mov	 eax, DWORD PTR ntab$[rsp]
  00055	39 04 24	 cmp	 DWORD PTR i$[rsp], eax
  00058	7d 6f		 jge	 SHORT $LN3@arraydiv

; 259  :   {
; 260  :     dividend = work1 / divisort;

  0005a	33 d2		 xor	 edx, edx
  0005c	48 8b 44 24 08	 mov	 rax, QWORD PTR work1$[rsp]
  00061	48 f7 74 24 18	 div	 QWORD PTR divisort$[rsp]
  00066	48 89 44 24 20	 mov	 QWORD PTR dividend$[rsp], rax

; 261  :     ltab[i] = (unsigned int)(dividend & 0x00000000ffffffffll);

  0006b	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00070	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dividend$[rsp]
  00075	48 23 c8	 and	 rcx, rax
  00078	48 8b c1	 mov	 rax, rcx
  0007b	48 63 0c 24	 movsxd	 rcx, DWORD PTR i$[rsp]
  0007f	48 8b 54 24 40	 mov	 rdx, QWORD PTR ltab$[rsp]
  00084	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax

; 262  :     temp1 = work1 % divisort;

  00087	33 d2		 xor	 edx, edx
  00089	48 8b 44 24 08	 mov	 rax, QWORD PTR work1$[rsp]
  0008e	48 f7 74 24 18	 div	 QWORD PTR divisort$[rsp]
  00093	48 8b c2	 mov	 rax, rdx
  00096	48 89 44 24 10	 mov	 QWORD PTR temp1$[rsp], rax

; 263  :     if ((i + 1 ) < ntab)

  0009b	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  0009e	ff c0		 inc	 eax
  000a0	3b 44 24 50	 cmp	 eax, DWORD PTR ntab$[rsp]
  000a4	7d 21		 jge	 SHORT $LN5@arraydiv

; 264  :       work1 = (temp1 << 32) + (unsigned long long)ltab[i + 1];

  000a6	48 8b 44 24 10	 mov	 rax, QWORD PTR temp1$[rsp]
  000ab	48 c1 e0 20	 shl	 rax, 32			; 00000020H
  000af	8b 0c 24	 mov	 ecx, DWORD PTR i$[rsp]
  000b2	ff c1		 inc	 ecx
  000b4	48 63 c9	 movsxd	 rcx, ecx
  000b7	48 8b 54 24 40	 mov	 rdx, QWORD PTR ltab$[rsp]
  000bc	8b 0c 8a	 mov	 ecx, DWORD PTR [rdx+rcx*4]
  000bf	48 03 c1	 add	 rax, rcx
  000c2	48 89 44 24 08	 mov	 QWORD PTR work1$[rsp], rax
$LN5@arraydiv:

; 265  :   }

  000c7	eb 80		 jmp	 SHORT $LN2@arraydiv
$LN3@arraydiv:

; 266  :   *rem = (unsigned int)temp1;

  000c9	48 8b 44 24 58	 mov	 rax, QWORD PTR rem$[rsp]
  000ce	8b 4c 24 10	 mov	 ecx, DWORD PTR temp1$[rsp]
  000d2	89 08		 mov	 DWORD PTR [rax], ecx

; 267  :   return;
; 268  : }

  000d4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d8	c3		 ret	 0
arraydiv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\pfpo.c
_TEXT	SEGMENT
optbits$ = 64
fpc$ = 68
numout$ = 72
cc$ = 76
opcode$ = 80
test_mode$ = 84
rm$ = 85
otc$ = 86
ofc1$ = 87
ofc2$ = 88
tv249 = 92
tv258 = 96
i0$ = 100
tv71 = 104
i4$ = 108
i6$ = 112
tv204 = 116
tv226 = 120
i2$ = 124
dxc$ = 128
ftab$ = 136
tabout$ = 152
__$ArrayPad$ = 168
inst$ = 192
regs$ = 200
z900_perform_floating_point_operation PROC

; 2219 : {

$LN178:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2220 :     unsigned int  ftab[4];   // Input Floating-Point value to be converted
; 2221 :     unsigned int  tabout[4]; // Output converted Floating-Point value result
; 2222 : 
; 2223 :     int numout = 0;     // Output length in words

  00023	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR numout$[rsp], 0

; 2224 :     int opcode;         // Conversion Operation Code (NOT instruction opcode!)
; 2225 :     int cc = 0;         // Condition Code??

  0002b	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR cc$[rsp], 0

; 2226 :     int fpc;            // Floating-Point Control Register value
; 2227 :     int dxc;            // Decimal Exception Code value
; 2228 :     int i0, i2, i4, i6; // Floating-Point register array indexes
; 2229 : 
; 2230 :     /* Extract fields from General Register 0 */
; 2231 :     bool test_mode = GR0_T( regs );

  00033	b8 08 00 00 00	 mov	 eax, 8
  00038	48 6b c0 00	 imul	 rax, rax, 0
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00044	48 8b 84 01 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax+640]
  0004c	48 c1 e8 1f	 shr	 rax, 31
  00050	48 83 e0 01	 and	 rax, 1
  00054	48 85 c0	 test	 rax, rax
  00057	75 0a		 jne	 SHORT $LN172@z900_perfo
  00059	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
  00061	eb 08		 jmp	 SHORT $LN173@z900_perfo
$LN172@z900_perfo:
  00063	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
$LN173@z900_perfo:
  0006b	0f b6 44 24 68	 movzx	 eax, BYTE PTR tv71[rsp]
  00070	88 44 24 54	 mov	 BYTE PTR test_mode$[rsp], al

; 2232 :     BYTE otc       = GR0_OTC( regs );

  00074	b8 08 00 00 00	 mov	 eax, 8
  00079	48 6b c0 00	 imul	 rax, rax, 0
  0007d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00085	48 8b 84 01 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax+640]
  0008d	48 c1 e8 18	 shr	 rax, 24
  00091	48 83 e0 7f	 and	 rax, 127		; 0000007fH
  00095	88 44 24 56	 mov	 BYTE PTR otc$[rsp], al

; 2233 :     BYTE ofc1      = GR0_OFC1( regs );

  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000aa	48 8b 84 01 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax+640]
  000b2	48 c1 e8 10	 shr	 rax, 16
  000b6	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  000bc	88 44 24 57	 mov	 BYTE PTR ofc1$[rsp], al

; 2234 :     BYTE ofc2      = GR0_OFC2( regs );

  000c0	b8 08 00 00 00	 mov	 eax, 8
  000c5	48 6b c0 00	 imul	 rax, rax, 0
  000c9	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000d1	48 8b 84 01 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax+640]
  000d9	48 c1 e8 08	 shr	 rax, 8
  000dd	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  000e3	88 44 24 58	 mov	 BYTE PTR ofc2$[rsp], al

; 2235 :     BYTE optbits   = regs->GR_LHLCL(0);

  000e7	b8 08 00 00 00	 mov	 eax, 8
  000ec	48 6b c0 00	 imul	 rax, rax, 0
  000f0	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000f8	0f b6 84 01 80
	02 00 00	 movzx	 eax, BYTE PTR [rcx+rax+640]
  00100	88 44 24 40	 mov	 BYTE PTR optbits$[rsp], al

; 2236 :     BYTE rm        = GR0_RM( optbits );

  00104	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00109	83 e0 0f	 and	 eax, 15
  0010c	88 44 24 55	 mov	 BYTE PTR rm$[rsp], al
$LN4@z900_perfo:

; 2237 : 
; 2238 :     E( inst, regs );

  00110	33 c0		 xor	 eax, eax
  00112	85 c0		 test	 eax, eax
  00114	75 fa		 jne	 SHORT $LN4@z900_perfo
$LN7@z900_perfo:
  00116	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0011e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00122	48 83 c0 02	 add	 rax, 2
  00126	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0012e	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00132	33 c0		 xor	 eax, eax
  00134	83 f8 02	 cmp	 eax, 2
  00137	74 0f		 je	 SHORT $LN19@z900_perfo
  00139	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00141	c6 80 9a 00 00
	00 02		 mov	 BYTE PTR [rax+154], 2
$LN19@z900_perfo:
  00148	33 c0		 xor	 eax, eax
  0014a	85 c0		 test	 eax, eax
  0014c	75 c8		 jne	 SHORT $LN7@z900_perfo
$LN10@z900_perfo:

; 2239 :     TXFC_INSTR_CHECK( regs );

  0014e	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00156	0f b6 80 4c 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3660]
  0015d	85 c0		 test	 eax, eax
  0015f	74 3f		 je	 SHORT $LN20@z900_perfo
  00161	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00169	8b 80 84 af 00
	00		 mov	 eax, DWORD PTR [rax+44932]
  0016f	0f ba e8 0f	 bts	 eax, 15
  00173	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0017b	89 81 84 af 00
	00		 mov	 DWORD PTR [rcx+44932], eax
  00181	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG190216
  00188	41 b8 0b 00 00
	00		 mov	 r8d, 11
  0018e	ba 02 00 00 00	 mov	 edx, 2
  00193	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0019b	e8 00 00 00 00	 call	 z900_abort_transaction
$LN20@z900_perfo:
  001a0	33 c0		 xor	 eax, eax
  001a2	85 c0		 test	 eax, eax
  001a4	75 a8		 jne	 SHORT $LN10@z900_perfo

; 2240 : 
; 2241 :     /* Get fpr array indexes to source and destination registers */
; 2242 : 
; 2243 :     i0 = FPR2I(0);      // (op1 dst)

  001a6	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR i0$[rsp], 0

; 2244 :     i2 = FPR2I(2);      // (op1 dst)

  001ae	c7 44 24 7c 04
	00 00 00	 mov	 DWORD PTR i2$[rsp], 4

; 2245 :     i4 = FPR2I(4);      // (op2 src)

  001b6	c7 44 24 6c 08
	00 00 00	 mov	 DWORD PTR i4$[rsp], 8

; 2246 :     i6 = FPR2I(6);      // (op2 src)

  001be	c7 44 24 70 0c
	00 00 00	 mov	 DWORD PTR i6$[rsp], 12

; 2247 : 
; 2248 :     fpc = regs->fpc;    // FPC value...

  001c6	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001ce	8b 80 c0 03 00
	00		 mov	 eax, DWORD PTR [rax+960]
  001d4	89 44 24 44	 mov	 DWORD PTR fpc$[rsp], eax

; 2249 :     fpc &= ~FPC_DXC;    // ... without DXC

  001d8	8b 44 24 44	 mov	 eax, DWORD PTR fpc$[rsp]
  001dc	25 ff 00 ff ff	 and	 eax, -65281		; ffffffffffff00ffH
  001e1	89 44 24 44	 mov	 DWORD PTR fpc$[rsp], eax

; 2250 : 
; 2251 :     /* Retrieve souce floating-point value to be converted */
; 2252 : 
; 2253 :     ftab[0] = (unsigned int) (regs->fpr[ i4 + 0 ]);

  001e5	8b 44 24 6c	 mov	 eax, DWORD PTR i4$[rsp]
  001e9	48 98		 cdqe
  001eb	b9 04 00 00 00	 mov	 ecx, 4
  001f0	48 6b c9 00	 imul	 rcx, rcx, 0
  001f4	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  001fc	8b 84 82 40 03
	00 00		 mov	 eax, DWORD PTR [rdx+rax*4+832]
  00203	89 84 0c 88 00
	00 00		 mov	 DWORD PTR ftab$[rsp+rcx], eax

; 2254 :     ftab[1] = (unsigned int) (regs->fpr[ i4 + 1 ]);

  0020a	8b 44 24 6c	 mov	 eax, DWORD PTR i4$[rsp]
  0020e	ff c0		 inc	 eax
  00210	48 98		 cdqe
  00212	b9 04 00 00 00	 mov	 ecx, 4
  00217	48 6b c9 01	 imul	 rcx, rcx, 1
  0021b	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00223	8b 84 82 40 03
	00 00		 mov	 eax, DWORD PTR [rdx+rax*4+832]
  0022a	89 84 0c 88 00
	00 00		 mov	 DWORD PTR ftab$[rsp+rcx], eax

; 2255 :     ftab[2] = (unsigned int) (regs->fpr[ i6 + 0 ]);

  00231	8b 44 24 70	 mov	 eax, DWORD PTR i6$[rsp]
  00235	48 98		 cdqe
  00237	b9 04 00 00 00	 mov	 ecx, 4
  0023c	48 6b c9 02	 imul	 rcx, rcx, 2
  00240	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00248	8b 84 82 40 03
	00 00		 mov	 eax, DWORD PTR [rdx+rax*4+832]
  0024f	89 84 0c 88 00
	00 00		 mov	 DWORD PTR ftab$[rsp+rcx], eax

; 2256 :     ftab[3] = (unsigned int) (regs->fpr[ i6 + 1 ]);

  00256	8b 44 24 70	 mov	 eax, DWORD PTR i6$[rsp]
  0025a	ff c0		 inc	 eax
  0025c	48 98		 cdqe
  0025e	b9 04 00 00 00	 mov	 ecx, 4
  00263	48 6b c9 03	 imul	 rcx, rcx, 3
  00267	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0026f	8b 84 82 40 03
	00 00		 mov	 eax, DWORD PTR [rdx+rax*4+832]
  00276	89 84 0c 88 00
	00 00		 mov	 DWORD PTR ftab$[rsp+rcx], eax

; 2257 : 
; 2258 :     /* Check for Reserved/Invalid Operation-Type Code */
; 2259 :     if (otc != 1)

  0027d	0f b6 44 24 56	 movzx	 eax, BYTE PTR otc$[rsp]
  00282	83 f8 01	 cmp	 eax, 1
  00285	74 12		 je	 SHORT $LN21@z900_perfo

; 2260 :         ARCH_DEP( program_interrupt )( regs, PGM_SPECIFICATION_EXCEPTION );

  00287	ba 06 00 00 00	 mov	 edx, 6
  0028c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00294	e8 00 00 00 00	 call	 z900_program_interrupt
$LN21@z900_perfo:

; 2261 : 
; 2262 :     /* Check for Reserved/Invalid Rounding Method */
; 2263 :     if (rm >= 2 && rm <= 7)

  00299	0f b6 44 24 55	 movzx	 eax, BYTE PTR rm$[rsp]
  0029e	83 f8 02	 cmp	 eax, 2
  002a1	7c 1c		 jl	 SHORT $LN22@z900_perfo
  002a3	0f b6 44 24 55	 movzx	 eax, BYTE PTR rm$[rsp]
  002a8	83 f8 07	 cmp	 eax, 7
  002ab	7f 12		 jg	 SHORT $LN22@z900_perfo

; 2264 :         ARCH_DEP( program_interrupt )( regs, PGM_SPECIFICATION_EXCEPTION );

  002ad	ba 06 00 00 00	 mov	 edx, 6
  002b2	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002ba	e8 00 00 00 00	 call	 z900_program_interrupt
$LN22@z900_perfo:

; 2265 : 
; 2266 :     /* DFP DQPC only valid if FP Extension Facility installed */
; 2267 :     if (1
; 2268 :         && GR0_TR_DQPC( optbits )
; 2269 :         && !FACILITY_ENABLED( 037_FP_EXTENSION, regs )

  002bf	33 c0		 xor	 eax, eax
  002c1	83 f8 01	 cmp	 eax, 1
  002c4	74 3e		 je	 SHORT $LN23@z900_perfo
  002c6	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  002cb	83 e0 20	 and	 eax, 32			; 00000020H
  002ce	85 c0		 test	 eax, eax
  002d0	74 32		 je	 SHORT $LN23@z900_perfo
  002d2	b8 01 00 00 00	 mov	 eax, 1
  002d7	48 6b c0 04	 imul	 rax, rax, 4
  002db	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002e3	0f b6 84 01 28
	0d 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3368]
  002eb	83 e0 04	 and	 eax, 4
  002ee	85 c0		 test	 eax, eax
  002f0	75 12		 jne	 SHORT $LN23@z900_perfo

; 2270 :     )
; 2271 :         ARCH_DEP( program_interrupt )( regs, PGM_SPECIFICATION_EXCEPTION );

  002f2	ba 06 00 00 00	 mov	 edx, 6
  002f7	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002ff	e8 00 00 00 00	 call	 z900_program_interrupt
$LN23@z900_perfo:

; 2272 : 
; 2273 :     /* Check for Reserved/Invalid Operand-Format Code */
; 2274 :     switch (ofc1)

  00304	0f b6 44 24 57	 movzx	 eax, BYTE PTR ofc1$[rsp]
  00309	89 44 24 74	 mov	 DWORD PTR tv204[rsp], eax
  0030d	83 7c 24 74 0a	 cmp	 DWORD PTR tv204[rsp], 10
  00312	77 72		 ja	 SHORT $LN33@z900_perfo
  00314	48 63 44 24 74	 movsxd	 rax, DWORD PTR tv204[rsp]
  00319	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00320	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN177@z900_perfo[rcx+rax*4]
  00327	48 03 c1	 add	 rax, rcx
  0032a	ff e0		 jmp	 rax
$LN24@z900_perfo:

; 2275 :     {
; 2276 :     case 0x00: opcode =  1; break;  // HFP Short        target

  0032c	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR opcode$[rsp], 1
  00334	eb 58		 jmp	 SHORT $LN11@z900_perfo
$LN25@z900_perfo:

; 2277 :     case 0x01: opcode =  2; break;  // HFP Long         target

  00336	c7 44 24 50 02
	00 00 00	 mov	 DWORD PTR opcode$[rsp], 2
  0033e	eb 4e		 jmp	 SHORT $LN11@z900_perfo
$LN26@z900_perfo:

; 2278 :     case 0x02: opcode =  3; break;  // HFP Extended     target

  00340	c7 44 24 50 03
	00 00 00	 mov	 DWORD PTR opcode$[rsp], 3
  00348	eb 44		 jmp	 SHORT $LN11@z900_perfo
$LN27@z900_perfo:

; 2279 : 
; 2280 :     case 0x05: opcode =  4; break;  // BFP Short        target

  0034a	c7 44 24 50 04
	00 00 00	 mov	 DWORD PTR opcode$[rsp], 4
  00352	eb 3a		 jmp	 SHORT $LN11@z900_perfo
$LN28@z900_perfo:

; 2281 :     case 0x06: opcode =  5; break;  // BFP Long         target

  00354	c7 44 24 50 05
	00 00 00	 mov	 DWORD PTR opcode$[rsp], 5
  0035c	eb 30		 jmp	 SHORT $LN11@z900_perfo
$LN29@z900_perfo:

; 2282 :     case 0x07: opcode =  6; break;  // BFP Extended     target

  0035e	c7 44 24 50 06
	00 00 00	 mov	 DWORD PTR opcode$[rsp], 6
  00366	eb 26		 jmp	 SHORT $LN11@z900_perfo
$LN30@z900_perfo:

; 2283 : 
; 2284 :     case 0x08: opcode =  7; break;  // DFP Short        target

  00368	c7 44 24 50 07
	00 00 00	 mov	 DWORD PTR opcode$[rsp], 7
  00370	eb 1c		 jmp	 SHORT $LN11@z900_perfo
$LN31@z900_perfo:

; 2285 :     case 0x09: opcode =  8; break;  // DFP Long         target

  00372	c7 44 24 50 08
	00 00 00	 mov	 DWORD PTR opcode$[rsp], 8
  0037a	eb 12		 jmp	 SHORT $LN11@z900_perfo
$LN32@z900_perfo:

; 2286 :     case 0x0A: opcode =  9; break;  // DFP Extended     target

  0037c	c7 44 24 50 09
	00 00 00	 mov	 DWORD PTR opcode$[rsp], 9
  00384	eb 08		 jmp	 SHORT $LN11@z900_perfo
$LN33@z900_perfo:

; 2287 : 
; 2288 :     default:   opcode = -1; break;  // Reserved/Invalid target

  00386	c7 44 24 50 ff
	ff ff ff	 mov	 DWORD PTR opcode$[rsp], -1
$LN11@z900_perfo:

; 2289 :     }
; 2290 :     if (0
; 2291 :         || opcode == -1
; 2292 :         || (1

  0038e	33 c0		 xor	 eax, eax
  00390	85 c0		 test	 eax, eax
  00392	75 35		 jne	 SHORT $LN35@z900_perfo
  00394	83 7c 24 50 ff	 cmp	 DWORD PTR opcode$[rsp], -1
  00399	74 2e		 je	 SHORT $LN35@z900_perfo
  0039b	33 c0		 xor	 eax, eax
  0039d	83 f8 01	 cmp	 eax, 1
  003a0	74 6f		 je	 SHORT $LN34@z900_perfo
  003a2	33 c0		 xor	 eax, eax
  003a4	85 c0		 test	 eax, eax
  003a6	75 15		 jne	 SHORT $LN36@z900_perfo
  003a8	83 7c 24 50 04	 cmp	 DWORD PTR opcode$[rsp], 4
  003ad	74 0e		 je	 SHORT $LN36@z900_perfo
  003af	83 7c 24 50 05	 cmp	 DWORD PTR opcode$[rsp], 5
  003b4	74 07		 je	 SHORT $LN36@z900_perfo
  003b6	83 7c 24 50 06	 cmp	 DWORD PTR opcode$[rsp], 6
  003bb	75 54		 jne	 SHORT $LN34@z900_perfo
$LN36@z900_perfo:
  003bd	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  003c2	83 e0 30	 and	 eax, 48			; 00000030H
  003c5	85 c0		 test	 eax, eax
  003c7	74 48		 je	 SHORT $LN34@z900_perfo
$LN35@z900_perfo:

; 2293 :             && (0
; 2294 :                 || opcode == 4
; 2295 :                 || opcode == 5
; 2296 :                 || opcode == 6
; 2297 :                )
; 2298 :             && GR0_TR_BFP_RSRVD( optbits )
; 2299 :            )
; 2300 :     )
; 2301 :     {
; 2302 :         if (!test_mode)

  003c9	0f b6 44 24 54	 movzx	 eax, BYTE PTR test_mode$[rsp]
  003ce	85 c0		 test	 eax, eax
  003d0	75 12		 jne	 SHORT $LN37@z900_perfo

; 2303 :             ARCH_DEP( program_interrupt )( regs, PGM_SPECIFICATION_EXCEPTION );

  003d2	ba 06 00 00 00	 mov	 edx, 6
  003d7	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003df	e8 00 00 00 00	 call	 z900_program_interrupt
$LN37@z900_perfo:

; 2304 : 
; 2305 :         regs->psw.cc = 3;

  003e4	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003ec	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3

; 2306 :         regs->GR_L( 1 ) = 0;  //  *** See PROGRAMMING NOTE further below! ***

  003f0	b8 08 00 00 00	 mov	 eax, 8
  003f5	48 6b c0 01	 imul	 rax, rax, 1
  003f9	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00401	c7 84 01 80 02
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax+640], 0

; 2307 :         return;

  0040c	e9 86 13 00 00	 jmp	 $LN1@z900_perfo
$LN34@z900_perfo:

; 2308 :     }
; 2309 :     switch (ofc2)

  00411	0f b6 44 24 58	 movzx	 eax, BYTE PTR ofc2$[rsp]
  00416	89 44 24 78	 mov	 DWORD PTR tv226[rsp], eax
  0041a	83 7c 24 78 0a	 cmp	 DWORD PTR tv226[rsp], 10
  0041f	0f 87 8d 00 00
	00		 ja	 $LN47@z900_perfo
  00425	48 63 44 24 78	 movsxd	 rax, DWORD PTR tv226[rsp]
  0042a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00431	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN176@z900_perfo[rcx+rax*4]
  00438	48 03 c1	 add	 rax, rcx
  0043b	ff e0		 jmp	 rax
$LN38@z900_perfo:

; 2310 :     {
; 2311 :     case 0x00: opcode += 10; break;  // HFP Short        source

  0043d	8b 44 24 50	 mov	 eax, DWORD PTR opcode$[rsp]
  00441	83 c0 0a	 add	 eax, 10
  00444	89 44 24 50	 mov	 DWORD PTR opcode$[rsp], eax
  00448	eb 70		 jmp	 SHORT $LN13@z900_perfo
$LN39@z900_perfo:

; 2312 :     case 0x01: opcode += 20; break;  // HFP Long         source

  0044a	8b 44 24 50	 mov	 eax, DWORD PTR opcode$[rsp]
  0044e	83 c0 14	 add	 eax, 20
  00451	89 44 24 50	 mov	 DWORD PTR opcode$[rsp], eax
  00455	eb 63		 jmp	 SHORT $LN13@z900_perfo
$LN40@z900_perfo:

; 2313 :     case 0x02: opcode += 30; break;  // HFP Extended     source

  00457	8b 44 24 50	 mov	 eax, DWORD PTR opcode$[rsp]
  0045b	83 c0 1e	 add	 eax, 30
  0045e	89 44 24 50	 mov	 DWORD PTR opcode$[rsp], eax
  00462	eb 56		 jmp	 SHORT $LN13@z900_perfo
$LN41@z900_perfo:

; 2314 :                                    
; 2315 :     case 0x05: opcode += 40; break;  // BFP Short        source

  00464	8b 44 24 50	 mov	 eax, DWORD PTR opcode$[rsp]
  00468	83 c0 28	 add	 eax, 40			; 00000028H
  0046b	89 44 24 50	 mov	 DWORD PTR opcode$[rsp], eax
  0046f	eb 49		 jmp	 SHORT $LN13@z900_perfo
$LN42@z900_perfo:

; 2316 :     case 0x06: opcode += 50; break;  // BFP Long         source

  00471	8b 44 24 50	 mov	 eax, DWORD PTR opcode$[rsp]
  00475	83 c0 32	 add	 eax, 50			; 00000032H
  00478	89 44 24 50	 mov	 DWORD PTR opcode$[rsp], eax
  0047c	eb 3c		 jmp	 SHORT $LN13@z900_perfo
$LN43@z900_perfo:

; 2317 :     case 0x07: opcode += 60; break;  // BFP Extended     source

  0047e	8b 44 24 50	 mov	 eax, DWORD PTR opcode$[rsp]
  00482	83 c0 3c	 add	 eax, 60			; 0000003cH
  00485	89 44 24 50	 mov	 DWORD PTR opcode$[rsp], eax
  00489	eb 2f		 jmp	 SHORT $LN13@z900_perfo
$LN44@z900_perfo:

; 2318 :                                    
; 2319 :     case 0x08: opcode += 70; break;  // DFP Short        source

  0048b	8b 44 24 50	 mov	 eax, DWORD PTR opcode$[rsp]
  0048f	83 c0 46	 add	 eax, 70			; 00000046H
  00492	89 44 24 50	 mov	 DWORD PTR opcode$[rsp], eax
  00496	eb 22		 jmp	 SHORT $LN13@z900_perfo
$LN45@z900_perfo:

; 2320 :     case 0x09: opcode += 80; break;  // DFP Long         source

  00498	8b 44 24 50	 mov	 eax, DWORD PTR opcode$[rsp]
  0049c	83 c0 50	 add	 eax, 80			; 00000050H
  0049f	89 44 24 50	 mov	 DWORD PTR opcode$[rsp], eax
  004a3	eb 15		 jmp	 SHORT $LN13@z900_perfo
$LN46@z900_perfo:

; 2321 :     case 0x0A: opcode += 90; break;  // DFP Extended     source

  004a5	8b 44 24 50	 mov	 eax, DWORD PTR opcode$[rsp]
  004a9	83 c0 5a	 add	 eax, 90			; 0000005aH
  004ac	89 44 24 50	 mov	 DWORD PTR opcode$[rsp], eax
  004b0	eb 08		 jmp	 SHORT $LN13@z900_perfo
$LN47@z900_perfo:

; 2322 :                                    
; 2323 :     default:   numout = -1;  break;  // Reserved/Invalid source

  004b2	c7 44 24 48 ff
	ff ff ff	 mov	 DWORD PTR numout$[rsp], -1
$LN13@z900_perfo:

; 2324 :     }
; 2325 :     if (numout == -1)

  004ba	83 7c 24 48 ff	 cmp	 DWORD PTR numout$[rsp], -1
  004bf	75 48		 jne	 SHORT $LN48@z900_perfo

; 2326 :     {
; 2327 :         if (!test_mode)

  004c1	0f b6 44 24 54	 movzx	 eax, BYTE PTR test_mode$[rsp]
  004c6	85 c0		 test	 eax, eax
  004c8	75 12		 jne	 SHORT $LN49@z900_perfo

; 2328 :             ARCH_DEP( program_interrupt )( regs, PGM_SPECIFICATION_EXCEPTION );

  004ca	ba 06 00 00 00	 mov	 edx, 6
  004cf	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004d7	e8 00 00 00 00	 call	 z900_program_interrupt
$LN49@z900_perfo:

; 2329 : 
; 2330 :         regs->psw.cc = 3;

  004dc	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  004e4	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3

; 2331 :         regs->GR_L( 1 ) = 0;  //  *** See PROGRAMMING NOTE further below! ***

  004e8	b8 08 00 00 00	 mov	 eax, 8
  004ed	48 6b c0 01	 imul	 rax, rax, 1
  004f1	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004f9	c7 84 01 80 02
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax+640], 0

; 2332 :         return;

  00504	e9 8e 12 00 00	 jmp	 $LN1@z900_perfo
$LN48@z900_perfo:

; 2333 :     }
; 2334 : 
; 2335 :     /* If test mode, validate the request itself */
; 2336 :     if (test_mode)

  00509	0f b6 44 24 54	 movzx	 eax, BYTE PTR test_mode$[rsp]
  0050e	85 c0		 test	 eax, eax
  00510	74 6d		 je	 SHORT $LN50@z900_perfo

; 2337 :     {
; 2338 :         switch (opcode)

  00512	8b 44 24 50	 mov	 eax, DWORD PTR opcode$[rsp]
  00516	89 44 24 5c	 mov	 DWORD PTR tv249[rsp], eax
  0051a	8b 44 24 5c	 mov	 eax, DWORD PTR tv249[rsp]
  0051e	83 e8 0e	 sub	 eax, 14
  00521	89 44 24 5c	 mov	 DWORD PTR tv249[rsp], eax
  00525	83 7c 24 5c 52	 cmp	 DWORD PTR tv249[rsp], 82 ; 00000052H
  0052a	77 26		 ja	 SHORT $LN105@z900_perfo
  0052c	48 63 44 24 5c	 movsxd	 rax, DWORD PTR tv249[rsp]
  00531	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00538	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN175@z900_perfo[rcx+rax*4]
  0053f	48 03 c1	 add	 rax, rcx
  00542	ff e0		 jmp	 rax
$LN51@z900_perfo:
$LN52@z900_perfo:
$LN53@z900_perfo:
$LN54@z900_perfo:
$LN55@z900_perfo:
$LN56@z900_perfo:
$LN57@z900_perfo:
$LN58@z900_perfo:
$LN59@z900_perfo:
$LN60@z900_perfo:
$LN61@z900_perfo:
$LN62@z900_perfo:
$LN63@z900_perfo:
$LN64@z900_perfo:
$LN65@z900_perfo:
$LN66@z900_perfo:
$LN67@z900_perfo:
$LN68@z900_perfo:
$LN69@z900_perfo:
$LN70@z900_perfo:
$LN71@z900_perfo:
$LN72@z900_perfo:
$LN73@z900_perfo:
$LN74@z900_perfo:
$LN75@z900_perfo:
$LN76@z900_perfo:
$LN77@z900_perfo:
$LN78@z900_perfo:
$LN79@z900_perfo:
$LN80@z900_perfo:
$LN81@z900_perfo:
$LN82@z900_perfo:
$LN83@z900_perfo:
$LN84@z900_perfo:
$LN85@z900_perfo:
$LN86@z900_perfo:
$LN87@z900_perfo:
$LN88@z900_perfo:
$LN89@z900_perfo:
$LN90@z900_perfo:
$LN91@z900_perfo:
$LN92@z900_perfo:
$LN93@z900_perfo:
$LN94@z900_perfo:
$LN95@z900_perfo:
$LN96@z900_perfo:
$LN97@z900_perfo:
$LN98@z900_perfo:
$LN99@z900_perfo:
$LN100@z900_perfo:
$LN101@z900_perfo:
$LN102@z900_perfo:
$LN103@z900_perfo:
$LN104@z900_perfo:

; 2339 :         {
; 2340 :         case 71: case 72: case 73:  // DFP Short     ==>  HFP Short/Long/Extended
; 2341 :         case 81: case 82: case 83:  // DFP Long      ==>  HFP Short/Long/Extended
; 2342 :         case 91: case 92: case 93:  // DFP Extended  ==>  HFP Short/Long/Extended
; 2343 : 
; 2344 :         case 17: case 18: case 19:  // HFP Short     ==>  DFP Short/Long/Extended
; 2345 :         case 27: case 28: case 29:  // HFP Long      ==>  DFP Short/Long/Extended
; 2346 :         case 37: case 38: case 39:  // HFP Extended  ==>  DFP Short/Long/Extended
; 2347 : 
; 2348 :         case 41: case 42: case 43:  // BFP Short     ==>  HFP Short/Long/Extended
; 2349 :         case 51: case 52: case 53:  // BFP Long      ==>  HFP Short/Long/Extended
; 2350 :         case 61: case 62: case 63:  // BFP Extended  ==>  HFP Short/Long/Extended
; 2351 : 
; 2352 :         case 14: case 15: case 16:  // HFP Short     ==>  BFP Short/Long/Extended
; 2353 :         case 24: case 25: case 26:  // HFP Long      ==>  BFP Short/Long/Extended
; 2354 :         case 34: case 35: case 36:  // HFP Extended  ==>  BFP Short/Long/Extended
; 2355 : 
; 2356 :         case 74: case 75: case 76:  // DFP Short     ==>  BFP Short/Long/Extended
; 2357 :         case 84: case 85: case 86:  // DFP Long      ==>  BFP Short/Long/Extended
; 2358 :         case 94: case 95: case 96:  // DFP Extended  ==>  BFP Short/Long/Extended
; 2359 : 
; 2360 :         case 47: case 48: case 49:  // BFP Short     ==>  DFP Short/Long/Extended
; 2361 :         case 57: case 58: case 59:  // BFP Long      ==>  DFP Short/Long/Extended
; 2362 :         case 67: case 68: case 69:  // BFP Extended  ==>  DFP Short/Long/Extended
; 2363 :             regs->psw.cc = 0; break;

  00544	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0054c	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
  00550	eb 0c		 jmp	 SHORT $LN15@z900_perfo
$LN105@z900_perfo:

; 2364 :         default:
; 2365 :             regs->psw.cc = 3; break;

  00552	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0055a	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3
$LN15@z900_perfo:

; 2366 :         }
; 2367 :         regs->GR_L( 1 ) = 0;  //  *** See PROGRAMMING NOTE further below! ***

  0055e	b8 08 00 00 00	 mov	 eax, 8
  00563	48 6b c0 01	 imul	 rax, rax, 1
  00567	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0056f	c7 84 01 80 02
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax+640], 0

; 2368 :         return;

  0057a	e9 18 12 00 00	 jmp	 $LN1@z900_perfo
$LN50@z900_perfo:

; 2369 :     }
; 2370 : 
; 2371 :     /* NOT test mode: Process their request... */
; 2372 :     switch (opcode)

  0057f	8b 44 24 50	 mov	 eax, DWORD PTR opcode$[rsp]
  00583	89 44 24 60	 mov	 DWORD PTR tv258[rsp], eax
  00587	8b 44 24 60	 mov	 eax, DWORD PTR tv258[rsp]
  0058b	83 e8 0e	 sub	 eax, 14
  0058e	89 44 24 60	 mov	 DWORD PTR tv258[rsp], eax
  00592	83 7c 24 60 52	 cmp	 DWORD PTR tv258[rsp], 82 ; 00000052H
  00597	0f 87 c0 0f 00
	00		 ja	 $LN160@z900_perfo
  0059d	48 63 44 24 60	 movsxd	 rax, DWORD PTR tv258[rsp]
  005a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  005a9	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN174@z900_perfo[rcx+rax*4]
  005b0	48 03 c1	 add	 rax, rcx
  005b3	ff e0		 jmp	 rax
$LN106@z900_perfo:

; 2373 :     {
; 2374 :         // DFP Short     ==>  HFP Short/Long/Extended
; 2375 :     case 71: cc = dfl2hflbfl( ftab, tabout, 1, 1, optbits, 0, &fpc ); numout = 1; break;

  005b5	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  005ba	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  005bf	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  005c7	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  005cc	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  005d0	41 b9 01 00 00
	00		 mov	 r9d, 1
  005d6	41 b8 01 00 00
	00		 mov	 r8d, 1
  005dc	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  005e4	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  005ec	e8 00 00 00 00	 call	 dfl2hflbfl
  005f1	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  005f5	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR numout$[rsp], 1
  005fd	e9 63 0f 00 00	 jmp	 $LN17@z900_perfo
$LN107@z900_perfo:

; 2376 :     case 72: cc = dfl2hflbfl( ftab, tabout, 1, 2, optbits, 0, &fpc ); numout = 2; break;

  00602	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00607	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0060c	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00614	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00619	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  0061d	41 b9 02 00 00
	00		 mov	 r9d, 2
  00623	41 b8 01 00 00
	00		 mov	 r8d, 1
  00629	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00631	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00639	e8 00 00 00 00	 call	 dfl2hflbfl
  0063e	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00642	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR numout$[rsp], 2
  0064a	e9 16 0f 00 00	 jmp	 $LN17@z900_perfo
$LN108@z900_perfo:

; 2377 :     case 73: cc = dfl2hflbfl( ftab, tabout, 1, 4, optbits, 0, &fpc ); numout = 4; break;

  0064f	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00654	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00659	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00661	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00666	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  0066a	41 b9 04 00 00
	00		 mov	 r9d, 4
  00670	41 b8 01 00 00
	00		 mov	 r8d, 1
  00676	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  0067e	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00686	e8 00 00 00 00	 call	 dfl2hflbfl
  0068b	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  0068f	c7 44 24 48 04
	00 00 00	 mov	 DWORD PTR numout$[rsp], 4
  00697	e9 c9 0e 00 00	 jmp	 $LN17@z900_perfo
$LN109@z900_perfo:

; 2378 : 
; 2379 :         // DFP Long      ==>  HFP Short/Long/Extended
; 2380 :     case 81: cc = dfl2hflbfl( ftab, tabout, 2, 1, optbits, 0, &fpc ); numout = 1; break;

  0069c	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  006a1	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  006a6	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  006ae	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  006b3	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  006b7	41 b9 01 00 00
	00		 mov	 r9d, 1
  006bd	41 b8 02 00 00
	00		 mov	 r8d, 2
  006c3	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  006cb	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  006d3	e8 00 00 00 00	 call	 dfl2hflbfl
  006d8	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  006dc	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR numout$[rsp], 1
  006e4	e9 7c 0e 00 00	 jmp	 $LN17@z900_perfo
$LN110@z900_perfo:

; 2381 :     case 82: cc = dfl2hflbfl( ftab, tabout, 2, 2, optbits, 0, &fpc ); numout = 2; break;

  006e9	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  006ee	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  006f3	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  006fb	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00700	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00704	41 b9 02 00 00
	00		 mov	 r9d, 2
  0070a	41 b8 02 00 00
	00		 mov	 r8d, 2
  00710	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00718	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00720	e8 00 00 00 00	 call	 dfl2hflbfl
  00725	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00729	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR numout$[rsp], 2
  00731	e9 2f 0e 00 00	 jmp	 $LN17@z900_perfo
$LN111@z900_perfo:

; 2382 :     case 83: cc = dfl2hflbfl( ftab, tabout, 2, 4, optbits, 0, &fpc ); numout = 4; break;

  00736	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  0073b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00740	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00748	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  0074d	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00751	41 b9 04 00 00
	00		 mov	 r9d, 4
  00757	41 b8 02 00 00
	00		 mov	 r8d, 2
  0075d	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00765	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  0076d	e8 00 00 00 00	 call	 dfl2hflbfl
  00772	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00776	c7 44 24 48 04
	00 00 00	 mov	 DWORD PTR numout$[rsp], 4
  0077e	e9 e2 0d 00 00	 jmp	 $LN17@z900_perfo
$LN112@z900_perfo:

; 2383 : 
; 2384 :         // DFP Extended  ==>  HFP Short/Long/Extended
; 2385 :     case 91: cc = dfl2hflbfl( ftab, tabout, 4, 1, optbits, 0, &fpc ); numout = 1; break;

  00783	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00788	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0078d	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00795	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  0079a	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  0079e	41 b9 01 00 00
	00		 mov	 r9d, 1
  007a4	41 b8 04 00 00
	00		 mov	 r8d, 4
  007aa	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  007b2	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  007ba	e8 00 00 00 00	 call	 dfl2hflbfl
  007bf	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  007c3	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR numout$[rsp], 1
  007cb	e9 95 0d 00 00	 jmp	 $LN17@z900_perfo
$LN113@z900_perfo:

; 2386 :     case 92: cc = dfl2hflbfl( ftab, tabout, 4, 2, optbits, 0, &fpc ); numout = 2; break;

  007d0	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  007d5	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  007da	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  007e2	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  007e7	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  007eb	41 b9 02 00 00
	00		 mov	 r9d, 2
  007f1	41 b8 04 00 00
	00		 mov	 r8d, 4
  007f7	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  007ff	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00807	e8 00 00 00 00	 call	 dfl2hflbfl
  0080c	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00810	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR numout$[rsp], 2
  00818	e9 48 0d 00 00	 jmp	 $LN17@z900_perfo
$LN114@z900_perfo:

; 2387 :     case 93: cc = dfl2hflbfl( ftab, tabout, 4, 4, optbits, 0, &fpc ); numout = 4; break;

  0081d	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00822	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00827	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0082f	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00834	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00838	41 b9 04 00 00
	00		 mov	 r9d, 4
  0083e	41 b8 04 00 00
	00		 mov	 r8d, 4
  00844	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  0084c	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00854	e8 00 00 00 00	 call	 dfl2hflbfl
  00859	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  0085d	c7 44 24 48 04
	00 00 00	 mov	 DWORD PTR numout$[rsp], 4
  00865	e9 fb 0c 00 00	 jmp	 $LN17@z900_perfo
$LN115@z900_perfo:

; 2388 : 
; 2389 :     //---------------------------------------------------------------------------------
; 2390 : 
; 2391 :         // HFP Short     ==>  DFP Short/Long/Extended
; 2392 :     case 17: cc = hflbfl2dfl( ftab, tabout, 1, 1, optbits, 0, &fpc ); numout = 1; break;

  0086a	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  0086f	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00874	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0087c	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00881	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00885	41 b9 01 00 00
	00		 mov	 r9d, 1
  0088b	41 b8 01 00 00
	00		 mov	 r8d, 1
  00891	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00899	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  008a1	e8 00 00 00 00	 call	 hflbfl2dfl
  008a6	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  008aa	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR numout$[rsp], 1
  008b2	e9 ae 0c 00 00	 jmp	 $LN17@z900_perfo
$LN116@z900_perfo:

; 2393 :     case 18: cc = hflbfl2dfl( ftab, tabout, 1, 2, optbits, 0, &fpc ); numout = 2; break;

  008b7	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  008bc	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  008c1	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  008c9	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  008ce	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  008d2	41 b9 02 00 00
	00		 mov	 r9d, 2
  008d8	41 b8 01 00 00
	00		 mov	 r8d, 1
  008de	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  008e6	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  008ee	e8 00 00 00 00	 call	 hflbfl2dfl
  008f3	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  008f7	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR numout$[rsp], 2
  008ff	e9 61 0c 00 00	 jmp	 $LN17@z900_perfo
$LN117@z900_perfo:

; 2394 :     case 19: cc = hflbfl2dfl( ftab, tabout, 1, 4, optbits, 0, &fpc ); numout = 4; break;

  00904	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00909	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0090e	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00916	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  0091b	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  0091f	41 b9 04 00 00
	00		 mov	 r9d, 4
  00925	41 b8 01 00 00
	00		 mov	 r8d, 1
  0092b	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00933	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  0093b	e8 00 00 00 00	 call	 hflbfl2dfl
  00940	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00944	c7 44 24 48 04
	00 00 00	 mov	 DWORD PTR numout$[rsp], 4
  0094c	e9 14 0c 00 00	 jmp	 $LN17@z900_perfo
$LN118@z900_perfo:

; 2395 : 
; 2396 :         // HFP Long      ==>  DFP Short/Long/Extended
; 2397 :     case 27: cc = hflbfl2dfl( ftab, tabout, 2, 1, optbits, 0, &fpc ); numout = 1; break;

  00951	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00956	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0095b	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00963	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00968	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  0096c	41 b9 01 00 00
	00		 mov	 r9d, 1
  00972	41 b8 02 00 00
	00		 mov	 r8d, 2
  00978	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00980	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00988	e8 00 00 00 00	 call	 hflbfl2dfl
  0098d	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00991	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR numout$[rsp], 1
  00999	e9 c7 0b 00 00	 jmp	 $LN17@z900_perfo
$LN119@z900_perfo:

; 2398 :     case 28: cc = hflbfl2dfl( ftab, tabout, 2, 2, optbits, 0, &fpc ); numout = 2; break;

  0099e	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  009a3	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  009a8	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  009b0	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  009b5	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  009b9	41 b9 02 00 00
	00		 mov	 r9d, 2
  009bf	41 b8 02 00 00
	00		 mov	 r8d, 2
  009c5	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  009cd	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  009d5	e8 00 00 00 00	 call	 hflbfl2dfl
  009da	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  009de	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR numout$[rsp], 2
  009e6	e9 7a 0b 00 00	 jmp	 $LN17@z900_perfo
$LN120@z900_perfo:

; 2399 :     case 29: cc = hflbfl2dfl( ftab, tabout, 2, 4, optbits, 0, &fpc ); numout = 4; break;

  009eb	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  009f0	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  009f5	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  009fd	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00a02	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00a06	41 b9 04 00 00
	00		 mov	 r9d, 4
  00a0c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00a12	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00a1a	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00a22	e8 00 00 00 00	 call	 hflbfl2dfl
  00a27	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00a2b	c7 44 24 48 04
	00 00 00	 mov	 DWORD PTR numout$[rsp], 4
  00a33	e9 2d 0b 00 00	 jmp	 $LN17@z900_perfo
$LN121@z900_perfo:

; 2400 : 
; 2401 :         // HFP Extended  ==>  DFP Short/Long/Extended
; 2402 :     case 37: cc = hflbfl2dfl( ftab, tabout, 4, 1, optbits, 0, &fpc ); numout = 1; break;

  00a38	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00a3d	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00a42	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00a4a	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00a4f	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00a53	41 b9 01 00 00
	00		 mov	 r9d, 1
  00a59	41 b8 04 00 00
	00		 mov	 r8d, 4
  00a5f	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00a67	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00a6f	e8 00 00 00 00	 call	 hflbfl2dfl
  00a74	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00a78	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR numout$[rsp], 1
  00a80	e9 e0 0a 00 00	 jmp	 $LN17@z900_perfo
$LN122@z900_perfo:

; 2403 :     case 38: cc = hflbfl2dfl( ftab, tabout, 4, 2, optbits, 0, &fpc ); numout = 2; break;

  00a85	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00a8a	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00a8f	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00a97	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00a9c	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00aa0	41 b9 02 00 00
	00		 mov	 r9d, 2
  00aa6	41 b8 04 00 00
	00		 mov	 r8d, 4
  00aac	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00ab4	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00abc	e8 00 00 00 00	 call	 hflbfl2dfl
  00ac1	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00ac5	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR numout$[rsp], 2
  00acd	e9 93 0a 00 00	 jmp	 $LN17@z900_perfo
$LN123@z900_perfo:

; 2404 :     case 39: cc = hflbfl2dfl( ftab, tabout, 4, 4, optbits, 0, &fpc ); numout = 4; break;

  00ad2	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00ad7	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00adc	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00ae4	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00ae9	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00aed	41 b9 04 00 00
	00		 mov	 r9d, 4
  00af3	41 b8 04 00 00
	00		 mov	 r8d, 4
  00af9	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00b01	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00b09	e8 00 00 00 00	 call	 hflbfl2dfl
  00b0e	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00b12	c7 44 24 48 04
	00 00 00	 mov	 DWORD PTR numout$[rsp], 4
  00b1a	e9 46 0a 00 00	 jmp	 $LN17@z900_perfo
$LN124@z900_perfo:

; 2405 : 
; 2406 :     //---------------------------------------------------------------------------------
; 2407 : 
; 2408 :         // BFP Short     ==>  HFP Short/Long/Extended
; 2409 :     case 41: cc = bfl2hfl(    ftab, tabout, 1, 1, optbits,    &fpc ); numout = 1; break;

  00b1f	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00b24	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00b29	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00b2e	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00b32	41 b9 01 00 00
	00		 mov	 r9d, 1
  00b38	41 b8 01 00 00
	00		 mov	 r8d, 1
  00b3e	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00b46	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00b4e	e8 00 00 00 00	 call	 bfl2hfl
  00b53	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00b57	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR numout$[rsp], 1
  00b5f	e9 01 0a 00 00	 jmp	 $LN17@z900_perfo
$LN125@z900_perfo:

; 2410 :     case 42: cc = bfl2hfl(    ftab, tabout, 1, 2, optbits,    &fpc ); numout = 2; break;

  00b64	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00b69	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00b6e	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00b73	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00b77	41 b9 02 00 00
	00		 mov	 r9d, 2
  00b7d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00b83	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00b8b	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00b93	e8 00 00 00 00	 call	 bfl2hfl
  00b98	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00b9c	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR numout$[rsp], 2
  00ba4	e9 bc 09 00 00	 jmp	 $LN17@z900_perfo
$LN126@z900_perfo:

; 2411 :     case 43: cc = bfl2hfl(    ftab, tabout, 1, 4, optbits,    &fpc ); numout = 4; break;

  00ba9	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00bae	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00bb3	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00bb8	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00bbc	41 b9 04 00 00
	00		 mov	 r9d, 4
  00bc2	41 b8 01 00 00
	00		 mov	 r8d, 1
  00bc8	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00bd0	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00bd8	e8 00 00 00 00	 call	 bfl2hfl
  00bdd	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00be1	c7 44 24 48 04
	00 00 00	 mov	 DWORD PTR numout$[rsp], 4
  00be9	e9 77 09 00 00	 jmp	 $LN17@z900_perfo
$LN127@z900_perfo:

; 2412 : 
; 2413 :         // BFP Long      ==>  HFP Short/Long/Extended
; 2414 :     case 51: cc = bfl2hfl(    ftab, tabout, 2, 1, optbits,    &fpc ); numout = 1; break;

  00bee	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00bf3	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00bf8	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00bfd	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00c01	41 b9 01 00 00
	00		 mov	 r9d, 1
  00c07	41 b8 02 00 00
	00		 mov	 r8d, 2
  00c0d	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00c15	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00c1d	e8 00 00 00 00	 call	 bfl2hfl
  00c22	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00c26	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR numout$[rsp], 1
  00c2e	e9 32 09 00 00	 jmp	 $LN17@z900_perfo
$LN128@z900_perfo:

; 2415 :     case 52: cc = bfl2hfl(    ftab, tabout, 2, 2, optbits,    &fpc ); numout = 2; break;

  00c33	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00c38	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00c3d	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00c42	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00c46	41 b9 02 00 00
	00		 mov	 r9d, 2
  00c4c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00c52	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00c5a	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00c62	e8 00 00 00 00	 call	 bfl2hfl
  00c67	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00c6b	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR numout$[rsp], 2
  00c73	e9 ed 08 00 00	 jmp	 $LN17@z900_perfo
$LN129@z900_perfo:

; 2416 :     case 53: cc = bfl2hfl(    ftab, tabout, 2, 4, optbits,    &fpc ); numout = 4; break;

  00c78	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00c7d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00c82	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00c87	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00c8b	41 b9 04 00 00
	00		 mov	 r9d, 4
  00c91	41 b8 02 00 00
	00		 mov	 r8d, 2
  00c97	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00c9f	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00ca7	e8 00 00 00 00	 call	 bfl2hfl
  00cac	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00cb0	c7 44 24 48 04
	00 00 00	 mov	 DWORD PTR numout$[rsp], 4
  00cb8	e9 a8 08 00 00	 jmp	 $LN17@z900_perfo
$LN130@z900_perfo:

; 2417 : 
; 2418 :         // BFP Extended  ==>  HFP Short/Long/Extended
; 2419 :     case 61: cc = bfl2hfl(    ftab, tabout, 4, 1, optbits,    &fpc ); numout = 1; break;

  00cbd	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00cc2	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00cc7	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00ccc	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00cd0	41 b9 01 00 00
	00		 mov	 r9d, 1
  00cd6	41 b8 04 00 00
	00		 mov	 r8d, 4
  00cdc	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00ce4	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00cec	e8 00 00 00 00	 call	 bfl2hfl
  00cf1	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00cf5	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR numout$[rsp], 1
  00cfd	e9 63 08 00 00	 jmp	 $LN17@z900_perfo
$LN131@z900_perfo:

; 2420 :     case 62: cc = bfl2hfl(    ftab, tabout, 4, 2, optbits,    &fpc ); numout = 2; break;

  00d02	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00d07	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00d0c	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00d11	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00d15	41 b9 02 00 00
	00		 mov	 r9d, 2
  00d1b	41 b8 04 00 00
	00		 mov	 r8d, 4
  00d21	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00d29	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00d31	e8 00 00 00 00	 call	 bfl2hfl
  00d36	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00d3a	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR numout$[rsp], 2
  00d42	e9 1e 08 00 00	 jmp	 $LN17@z900_perfo
$LN132@z900_perfo:

; 2421 :     case 63: cc = bfl2hfl(    ftab, tabout, 4, 4, optbits,    &fpc ); numout = 4; break;

  00d47	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00d4c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00d51	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00d56	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00d5a	41 b9 04 00 00
	00		 mov	 r9d, 4
  00d60	41 b8 04 00 00
	00		 mov	 r8d, 4
  00d66	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00d6e	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00d76	e8 00 00 00 00	 call	 bfl2hfl
  00d7b	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00d7f	c7 44 24 48 04
	00 00 00	 mov	 DWORD PTR numout$[rsp], 4
  00d87	e9 d9 07 00 00	 jmp	 $LN17@z900_perfo
$LN133@z900_perfo:

; 2422 : 
; 2423 :     //---------------------------------------------------------------------------------
; 2424 : 
; 2425 :         // HFP Short     ==>  BFP Short/Long/Extended
; 2426 :     case 14: cc = hfl2bfl(    ftab, tabout, 1, 1, optbits,    &fpc ); numout = 1; break;

  00d8c	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00d91	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00d96	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00d9b	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00d9f	41 b9 01 00 00
	00		 mov	 r9d, 1
  00da5	41 b8 01 00 00
	00		 mov	 r8d, 1
  00dab	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00db3	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00dbb	e8 00 00 00 00	 call	 hfl2bfl
  00dc0	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00dc4	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR numout$[rsp], 1
  00dcc	e9 94 07 00 00	 jmp	 $LN17@z900_perfo
$LN134@z900_perfo:

; 2427 :     case 15: cc = hfl2bfl(    ftab, tabout, 1, 2, optbits,    &fpc ); numout = 2; break;

  00dd1	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00dd6	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00ddb	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00de0	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00de4	41 b9 02 00 00
	00		 mov	 r9d, 2
  00dea	41 b8 01 00 00
	00		 mov	 r8d, 1
  00df0	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00df8	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00e00	e8 00 00 00 00	 call	 hfl2bfl
  00e05	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00e09	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR numout$[rsp], 2
  00e11	e9 4f 07 00 00	 jmp	 $LN17@z900_perfo
$LN135@z900_perfo:

; 2428 :     case 16: cc = hfl2bfl(    ftab, tabout, 1, 4, optbits,    &fpc ); numout = 4; break;

  00e16	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00e1b	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00e20	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00e25	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00e29	41 b9 04 00 00
	00		 mov	 r9d, 4
  00e2f	41 b8 01 00 00
	00		 mov	 r8d, 1
  00e35	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00e3d	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00e45	e8 00 00 00 00	 call	 hfl2bfl
  00e4a	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00e4e	c7 44 24 48 04
	00 00 00	 mov	 DWORD PTR numout$[rsp], 4
  00e56	e9 0a 07 00 00	 jmp	 $LN17@z900_perfo
$LN136@z900_perfo:

; 2429 : 
; 2430 :         // HFP Long      ==>  BFP Short/Long/Extended
; 2431 :     case 24: cc = hfl2bfl(    ftab, tabout, 2, 1, optbits,    &fpc ); numout = 1; break;

  00e5b	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00e60	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00e65	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00e6a	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00e6e	41 b9 01 00 00
	00		 mov	 r9d, 1
  00e74	41 b8 02 00 00
	00		 mov	 r8d, 2
  00e7a	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00e82	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00e8a	e8 00 00 00 00	 call	 hfl2bfl
  00e8f	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00e93	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR numout$[rsp], 1
  00e9b	e9 c5 06 00 00	 jmp	 $LN17@z900_perfo
$LN137@z900_perfo:

; 2432 :     case 25: cc = hfl2bfl(    ftab, tabout, 2, 2, optbits,    &fpc ); numout = 2; break;

  00ea0	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00ea5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00eaa	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00eaf	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00eb3	41 b9 02 00 00
	00		 mov	 r9d, 2
  00eb9	41 b8 02 00 00
	00		 mov	 r8d, 2
  00ebf	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00ec7	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00ecf	e8 00 00 00 00	 call	 hfl2bfl
  00ed4	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00ed8	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR numout$[rsp], 2
  00ee0	e9 80 06 00 00	 jmp	 $LN17@z900_perfo
$LN138@z900_perfo:

; 2433 :     case 26: cc = hfl2bfl(    ftab, tabout, 2, 4, optbits,    &fpc ); numout = 4; break;

  00ee5	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00eea	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00eef	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00ef4	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00ef8	41 b9 04 00 00
	00		 mov	 r9d, 4
  00efe	41 b8 02 00 00
	00		 mov	 r8d, 2
  00f04	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00f0c	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00f14	e8 00 00 00 00	 call	 hfl2bfl
  00f19	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00f1d	c7 44 24 48 04
	00 00 00	 mov	 DWORD PTR numout$[rsp], 4
  00f25	e9 3b 06 00 00	 jmp	 $LN17@z900_perfo
$LN139@z900_perfo:

; 2434 : 
; 2435 :         // HFP Extended  ==>  BFP Short/Long/Extended
; 2436 :     case 34: cc = hfl2bfl(    ftab, tabout, 4, 1, optbits,    &fpc ); numout = 1; break;

  00f2a	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00f2f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00f34	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00f39	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00f3d	41 b9 01 00 00
	00		 mov	 r9d, 1
  00f43	41 b8 04 00 00
	00		 mov	 r8d, 4
  00f49	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00f51	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00f59	e8 00 00 00 00	 call	 hfl2bfl
  00f5e	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00f62	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR numout$[rsp], 1
  00f6a	e9 f6 05 00 00	 jmp	 $LN17@z900_perfo
$LN140@z900_perfo:

; 2437 :     case 35: cc = hfl2bfl(    ftab, tabout, 4, 2, optbits,    &fpc ); numout = 2; break;

  00f6f	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00f74	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00f79	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00f7e	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00f82	41 b9 02 00 00
	00		 mov	 r9d, 2
  00f88	41 b8 04 00 00
	00		 mov	 r8d, 4
  00f8e	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00f96	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00f9e	e8 00 00 00 00	 call	 hfl2bfl
  00fa3	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00fa7	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR numout$[rsp], 2
  00faf	e9 b1 05 00 00	 jmp	 $LN17@z900_perfo
$LN141@z900_perfo:

; 2438 :     case 36: cc = hfl2bfl(    ftab, tabout, 4, 4, optbits,    &fpc ); numout = 4; break;

  00fb4	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00fb9	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00fbe	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  00fc3	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00fc7	41 b9 04 00 00
	00		 mov	 r9d, 4
  00fcd	41 b8 04 00 00
	00		 mov	 r8d, 4
  00fd3	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  00fdb	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  00fe3	e8 00 00 00 00	 call	 hfl2bfl
  00fe8	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  00fec	c7 44 24 48 04
	00 00 00	 mov	 DWORD PTR numout$[rsp], 4
  00ff4	e9 6c 05 00 00	 jmp	 $LN17@z900_perfo
$LN142@z900_perfo:

; 2439 : 
; 2440 :     //---------------------------------------------------------------------------------
; 2441 : 
; 2442 :         // DFP Short     ==>  BFP Short/Long/Extended
; 2443 :     case 74: cc = dfl2hflbfl( ftab, tabout, 1, 1, optbits, 1, &fpc ); numout = 1; break;

  00ff9	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  00ffe	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  01003	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  0100b	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  01010	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  01014	41 b9 01 00 00
	00		 mov	 r9d, 1
  0101a	41 b8 01 00 00
	00		 mov	 r8d, 1
  01020	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  01028	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  01030	e8 00 00 00 00	 call	 dfl2hflbfl
  01035	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  01039	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR numout$[rsp], 1
  01041	e9 1f 05 00 00	 jmp	 $LN17@z900_perfo
$LN143@z900_perfo:

; 2444 :     case 75: cc = dfl2hflbfl( ftab, tabout, 1, 2, optbits, 1, &fpc ); numout = 2; break;

  01046	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  0104b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  01050	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  01058	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  0105d	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  01061	41 b9 02 00 00
	00		 mov	 r9d, 2
  01067	41 b8 01 00 00
	00		 mov	 r8d, 1
  0106d	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  01075	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  0107d	e8 00 00 00 00	 call	 dfl2hflbfl
  01082	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  01086	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR numout$[rsp], 2
  0108e	e9 d2 04 00 00	 jmp	 $LN17@z900_perfo
$LN144@z900_perfo:

; 2445 :     case 76: cc = dfl2hflbfl( ftab, tabout, 1, 4, optbits, 1, &fpc ); numout = 4; break;

  01093	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  01098	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0109d	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  010a5	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  010aa	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  010ae	41 b9 04 00 00
	00		 mov	 r9d, 4
  010b4	41 b8 01 00 00
	00		 mov	 r8d, 1
  010ba	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  010c2	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  010ca	e8 00 00 00 00	 call	 dfl2hflbfl
  010cf	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  010d3	c7 44 24 48 04
	00 00 00	 mov	 DWORD PTR numout$[rsp], 4
  010db	e9 85 04 00 00	 jmp	 $LN17@z900_perfo
$LN145@z900_perfo:

; 2446 : 
; 2447 :         // DFP Long      ==>  BFP Short/Long/Extended
; 2448 :     case 84: cc = dfl2hflbfl( ftab, tabout, 2, 1, optbits, 1, &fpc ); numout = 1; break;

  010e0	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  010e5	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  010ea	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  010f2	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  010f7	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  010fb	41 b9 01 00 00
	00		 mov	 r9d, 1
  01101	41 b8 02 00 00
	00		 mov	 r8d, 2
  01107	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  0110f	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  01117	e8 00 00 00 00	 call	 dfl2hflbfl
  0111c	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  01120	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR numout$[rsp], 1
  01128	e9 38 04 00 00	 jmp	 $LN17@z900_perfo
$LN146@z900_perfo:

; 2449 :     case 85: cc = dfl2hflbfl( ftab, tabout, 2, 2, optbits, 1, &fpc ); numout = 2; break;

  0112d	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  01132	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  01137	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  0113f	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  01144	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  01148	41 b9 02 00 00
	00		 mov	 r9d, 2
  0114e	41 b8 02 00 00
	00		 mov	 r8d, 2
  01154	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  0115c	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  01164	e8 00 00 00 00	 call	 dfl2hflbfl
  01169	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  0116d	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR numout$[rsp], 2
  01175	e9 eb 03 00 00	 jmp	 $LN17@z900_perfo
$LN147@z900_perfo:

; 2450 :     case 86: cc = dfl2hflbfl( ftab, tabout, 2, 4, optbits, 1, &fpc ); numout = 4; break;

  0117a	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  0117f	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  01184	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  0118c	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  01191	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  01195	41 b9 04 00 00
	00		 mov	 r9d, 4
  0119b	41 b8 02 00 00
	00		 mov	 r8d, 2
  011a1	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  011a9	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  011b1	e8 00 00 00 00	 call	 dfl2hflbfl
  011b6	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  011ba	c7 44 24 48 04
	00 00 00	 mov	 DWORD PTR numout$[rsp], 4
  011c2	e9 9e 03 00 00	 jmp	 $LN17@z900_perfo
$LN148@z900_perfo:

; 2451 : 
; 2452 :         // DFP Extended  ==>  BFP Short/Long/Extended
; 2453 :     case 94: cc = dfl2hflbfl( ftab, tabout, 4, 1, optbits, 1, &fpc ); numout = 1; break;

  011c7	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  011cc	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  011d1	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  011d9	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  011de	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  011e2	41 b9 01 00 00
	00		 mov	 r9d, 1
  011e8	41 b8 04 00 00
	00		 mov	 r8d, 4
  011ee	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  011f6	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  011fe	e8 00 00 00 00	 call	 dfl2hflbfl
  01203	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  01207	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR numout$[rsp], 1
  0120f	e9 51 03 00 00	 jmp	 $LN17@z900_perfo
$LN149@z900_perfo:

; 2454 :     case 95: cc = dfl2hflbfl( ftab, tabout, 4, 2, optbits, 1, &fpc ); numout = 2; break;

  01214	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  01219	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0121e	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  01226	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  0122b	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  0122f	41 b9 02 00 00
	00		 mov	 r9d, 2
  01235	41 b8 04 00 00
	00		 mov	 r8d, 4
  0123b	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  01243	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  0124b	e8 00 00 00 00	 call	 dfl2hflbfl
  01250	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  01254	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR numout$[rsp], 2
  0125c	e9 04 03 00 00	 jmp	 $LN17@z900_perfo
$LN150@z900_perfo:

; 2455 :     case 96: cc = dfl2hflbfl( ftab, tabout, 4, 4, optbits, 1, &fpc ); numout = 4; break;

  01261	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  01266	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0126b	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  01273	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  01278	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  0127c	41 b9 04 00 00
	00		 mov	 r9d, 4
  01282	41 b8 04 00 00
	00		 mov	 r8d, 4
  01288	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  01290	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  01298	e8 00 00 00 00	 call	 dfl2hflbfl
  0129d	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  012a1	c7 44 24 48 04
	00 00 00	 mov	 DWORD PTR numout$[rsp], 4
  012a9	e9 b7 02 00 00	 jmp	 $LN17@z900_perfo
$LN151@z900_perfo:

; 2456 : 
; 2457 :     //---------------------------------------------------------------------------------
; 2458 : 
; 2459 :         // BFP Short     ==>  DFP Short/Long/Extended
; 2460 :     case 47: cc = hflbfl2dfl( ftab, tabout, 1, 1, optbits, 1, &fpc ); numout = 1; break;

  012ae	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  012b3	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  012b8	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  012c0	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  012c5	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  012c9	41 b9 01 00 00
	00		 mov	 r9d, 1
  012cf	41 b8 01 00 00
	00		 mov	 r8d, 1
  012d5	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  012dd	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  012e5	e8 00 00 00 00	 call	 hflbfl2dfl
  012ea	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  012ee	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR numout$[rsp], 1
  012f6	e9 6a 02 00 00	 jmp	 $LN17@z900_perfo
$LN152@z900_perfo:

; 2461 :     case 48: cc = hflbfl2dfl( ftab, tabout, 1, 2, optbits, 1, &fpc ); numout = 2; break;

  012fb	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  01300	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  01305	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  0130d	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  01312	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  01316	41 b9 02 00 00
	00		 mov	 r9d, 2
  0131c	41 b8 01 00 00
	00		 mov	 r8d, 1
  01322	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  0132a	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  01332	e8 00 00 00 00	 call	 hflbfl2dfl
  01337	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  0133b	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR numout$[rsp], 2
  01343	e9 1d 02 00 00	 jmp	 $LN17@z900_perfo
$LN153@z900_perfo:

; 2462 :     case 49: cc = hflbfl2dfl( ftab, tabout, 1, 4, optbits, 1, &fpc ); numout = 4; break;

  01348	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  0134d	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  01352	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  0135a	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  0135f	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  01363	41 b9 04 00 00
	00		 mov	 r9d, 4
  01369	41 b8 01 00 00
	00		 mov	 r8d, 1
  0136f	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  01377	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  0137f	e8 00 00 00 00	 call	 hflbfl2dfl
  01384	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  01388	c7 44 24 48 04
	00 00 00	 mov	 DWORD PTR numout$[rsp], 4
  01390	e9 d0 01 00 00	 jmp	 $LN17@z900_perfo
$LN154@z900_perfo:

; 2463 : 
; 2464 :         // BFP Long      ==>  DFP Short/Long/Extended
; 2465 :     case 57: cc = hflbfl2dfl( ftab, tabout, 2, 1, optbits, 1, &fpc ); numout = 1; break;

  01395	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  0139a	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0139f	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  013a7	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  013ac	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  013b0	41 b9 01 00 00
	00		 mov	 r9d, 1
  013b6	41 b8 02 00 00
	00		 mov	 r8d, 2
  013bc	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  013c4	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  013cc	e8 00 00 00 00	 call	 hflbfl2dfl
  013d1	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  013d5	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR numout$[rsp], 1
  013dd	e9 83 01 00 00	 jmp	 $LN17@z900_perfo
$LN155@z900_perfo:

; 2466 :     case 58: cc = hflbfl2dfl( ftab, tabout, 2, 2, optbits, 1, &fpc ); numout = 2; break;

  013e2	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  013e7	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  013ec	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  013f4	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  013f9	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  013fd	41 b9 02 00 00
	00		 mov	 r9d, 2
  01403	41 b8 02 00 00
	00		 mov	 r8d, 2
  01409	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  01411	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  01419	e8 00 00 00 00	 call	 hflbfl2dfl
  0141e	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  01422	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR numout$[rsp], 2
  0142a	e9 36 01 00 00	 jmp	 $LN17@z900_perfo
$LN156@z900_perfo:

; 2467 :     case 59: cc = hflbfl2dfl( ftab, tabout, 2, 4, optbits, 1, &fpc ); numout = 4; break;

  0142f	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  01434	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  01439	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  01441	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  01446	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  0144a	41 b9 04 00 00
	00		 mov	 r9d, 4
  01450	41 b8 02 00 00
	00		 mov	 r8d, 2
  01456	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  0145e	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  01466	e8 00 00 00 00	 call	 hflbfl2dfl
  0146b	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  0146f	c7 44 24 48 04
	00 00 00	 mov	 DWORD PTR numout$[rsp], 4
  01477	e9 e9 00 00 00	 jmp	 $LN17@z900_perfo
$LN157@z900_perfo:

; 2468 : 
; 2469 :         // BFP Extended  ==>  DFP Short/Long/Extended
; 2470 :     case 67: cc = hflbfl2dfl( ftab, tabout, 4, 1, optbits, 1, &fpc ); numout = 1; break;

  0147c	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  01481	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  01486	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  0148e	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  01493	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  01497	41 b9 01 00 00
	00		 mov	 r9d, 1
  0149d	41 b8 04 00 00
	00		 mov	 r8d, 4
  014a3	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  014ab	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  014b3	e8 00 00 00 00	 call	 hflbfl2dfl
  014b8	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  014bc	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR numout$[rsp], 1
  014c4	e9 9c 00 00 00	 jmp	 $LN17@z900_perfo
$LN158@z900_perfo:

; 2471 :     case 68: cc = hflbfl2dfl( ftab, tabout, 4, 2, optbits, 1, &fpc ); numout = 2; break;

  014c9	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  014ce	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  014d3	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  014db	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  014e0	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  014e4	41 b9 02 00 00
	00		 mov	 r9d, 2
  014ea	41 b8 04 00 00
	00		 mov	 r8d, 4
  014f0	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  014f8	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  01500	e8 00 00 00 00	 call	 hflbfl2dfl
  01505	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  01509	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR numout$[rsp], 2
  01511	eb 52		 jmp	 SHORT $LN17@z900_perfo
$LN159@z900_perfo:

; 2472 :     case 69: cc = hflbfl2dfl( ftab, tabout, 4, 4, optbits, 1, &fpc ); numout = 4; break;

  01513	48 8d 44 24 44	 lea	 rax, QWORD PTR fpc$[rsp]
  01518	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0151d	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  01525	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  0152a	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  0152e	41 b9 04 00 00
	00		 mov	 r9d, 4
  01534	41 b8 04 00 00
	00		 mov	 r8d, 4
  0153a	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tabout$[rsp]
  01542	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR ftab$[rsp]
  0154a	e8 00 00 00 00	 call	 hflbfl2dfl
  0154f	89 44 24 4c	 mov	 DWORD PTR cc$[rsp], eax
  01553	c7 44 24 48 04
	00 00 00	 mov	 DWORD PTR numout$[rsp], 4
  0155b	eb 08		 jmp	 SHORT $LN17@z900_perfo
$LN160@z900_perfo:

; 2473 : 
; 2474 :     //---------------------------------------------------------------------------------
; 2475 : 
; 2476 :     default: numout = -1; break;

  0155d	c7 44 24 48 ff
	ff ff ff	 mov	 DWORD PTR numout$[rsp], -1
$LN17@z900_perfo:

; 2477 :     }
; 2478 : 
; 2479 : 
; 2480 :     /*****************************************************************/
; 2481 :     /*                    PROGRAMMING NOTE!                          */
; 2482 :     /*****************************************************************/
; 2483 :     /*                                                               */
; 2484 :     /*  Set Return Code value in GR1 to zero. FIXME: we know this    */
; 2485 :     /*  isn't right, but it's the best we can do for now. We will    */
; 2486 :     /*  fix it later. Besides, it's very likely zero IS correct!     */
; 2487 :     /*                                                               */
; 2488 :     /*****************************************************************/
; 2489 :     regs->GR_L( 1 ) = 0;

  01565	b8 08 00 00 00	 mov	 eax, 8
  0156a	48 6b c0 01	 imul	 rax, rax, 1
  0156e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01576	c7 84 01 80 02
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax+640], 0

; 2490 : 
; 2491 : 
; 2492 :     /* Specification Exception if Invalid Operation Code */
; 2493 :     if (numout < 0)

  01581	83 7c 24 48 00	 cmp	 DWORD PTR numout$[rsp], 0
  01586	7d 12		 jge	 SHORT $LN161@z900_perfo

; 2494 :         ARCH_DEP( program_interrupt )( regs, PGM_SPECIFICATION_EXCEPTION );

  01588	ba 06 00 00 00	 mov	 edx, 6
  0158d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01595	e8 00 00 00 00	 call	 z900_program_interrupt
$LN161@z900_perfo:

; 2495 : 
; 2496 :     /* Retrieve/Set DXC/FPC results */
; 2497 :     dxc = (fpc & FPC_DXC) >> FPC_DXC_SHIFT;

  0159a	8b 44 24 44	 mov	 eax, DWORD PTR fpc$[rsp]
  0159e	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  015a3	c1 f8 08	 sar	 eax, 8
  015a6	89 84 24 80 00
	00 00		 mov	 DWORD PTR dxc$[rsp], eax

; 2498 :     regs->dxc = dxc;

  015ad	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  015b5	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR dxc$[rsp]
  015bc	89 88 08 07 00
	00		 mov	 DWORD PTR [rax+1800], ecx

; 2499 :     regs->fpc = fpc;

  015c2	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  015ca	8b 4c 24 44	 mov	 ecx, DWORD PTR fpc$[rsp]
  015ce	89 88 c0 03 00
	00		 mov	 DWORD PTR [rax+960], ecx

; 2500 : 
; 2501 :     /* If not Invalid Operation, update registers with the results */
; 2502 :     if (!(fpc & FPC_DXC_I))

  015d4	8b 44 24 44	 mov	 eax, DWORD PTR fpc$[rsp]
  015d8	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  015dd	85 c0		 test	 eax, eax
  015df	0f 85 c7 00 00
	00		 jne	 $LN162@z900_perfo

; 2503 :     {
; 2504 :         regs->fpr[ i0 + 0 ] = tabout[0];            // (short/long/extended)

  015e5	b8 04 00 00 00	 mov	 eax, 4
  015ea	48 6b c0 00	 imul	 rax, rax, 0
  015ee	8b 4c 24 64	 mov	 ecx, DWORD PTR i0$[rsp]
  015f2	48 63 c9	 movsxd	 rcx, ecx
  015f5	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  015fd	8b 84 04 98 00
	00 00		 mov	 eax, DWORD PTR tabout$[rsp+rax]
  01604	89 84 8a 40 03
	00 00		 mov	 DWORD PTR [rdx+rcx*4+832], eax

; 2505 : 
; 2506 :         if (numout == 1)                            // (short?)

  0160b	83 7c 24 48 01	 cmp	 DWORD PTR numout$[rsp], 1
  01610	75 1d		 jne	 SHORT $LN163@z900_perfo

; 2507 :             regs->fpr[ i0 + 1 ] = 0;                // (short)

  01612	8b 44 24 64	 mov	 eax, DWORD PTR i0$[rsp]
  01616	ff c0		 inc	 eax
  01618	48 98		 cdqe
  0161a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01622	c7 84 81 40 03
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+832], 0
  0162d	eb 7d		 jmp	 SHORT $LN164@z900_perfo
$LN163@z900_perfo:

; 2508 :         else
; 2509 :         {
; 2510 :             regs->fpr[ i0 + 1 ] = tabout[1];        // (long/extended)

  0162f	b8 04 00 00 00	 mov	 eax, 4
  01634	48 6b c0 01	 imul	 rax, rax, 1
  01638	8b 4c 24 64	 mov	 ecx, DWORD PTR i0$[rsp]
  0163c	ff c1		 inc	 ecx
  0163e	48 63 c9	 movsxd	 rcx, ecx
  01641	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  01649	8b 84 04 98 00
	00 00		 mov	 eax, DWORD PTR tabout$[rsp+rax]
  01650	89 84 8a 40 03
	00 00		 mov	 DWORD PTR [rdx+rcx*4+832], eax

; 2511 : 
; 2512 :             if (numout > 2)                         // (extended?)

  01657	83 7c 24 48 02	 cmp	 DWORD PTR numout$[rsp], 2
  0165c	7e 4e		 jle	 SHORT $LN165@z900_perfo

; 2513 :             {
; 2514 :                 regs->fpr[ i2 + 0 ] = tabout[2];    // (extended)

  0165e	b8 04 00 00 00	 mov	 eax, 4
  01663	48 6b c0 02	 imul	 rax, rax, 2
  01667	8b 4c 24 7c	 mov	 ecx, DWORD PTR i2$[rsp]
  0166b	48 63 c9	 movsxd	 rcx, ecx
  0166e	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  01676	8b 84 04 98 00
	00 00		 mov	 eax, DWORD PTR tabout$[rsp+rax]
  0167d	89 84 8a 40 03
	00 00		 mov	 DWORD PTR [rdx+rcx*4+832], eax

; 2515 :                 regs->fpr[ i2 + 1 ] = tabout[3];    // (extended)

  01684	b8 04 00 00 00	 mov	 eax, 4
  01689	48 6b c0 03	 imul	 rax, rax, 3
  0168d	8b 4c 24 7c	 mov	 ecx, DWORD PTR i2$[rsp]
  01691	ff c1		 inc	 ecx
  01693	48 63 c9	 movsxd	 rcx, ecx
  01696	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0169e	8b 84 04 98 00
	00 00		 mov	 eax, DWORD PTR tabout$[rsp+rax]
  016a5	89 84 8a 40 03
	00 00		 mov	 DWORD PTR [rdx+rcx*4+832], eax
$LN165@z900_perfo:
$LN164@z900_perfo:
$LN162@z900_perfo:

; 2516 :             }
; 2517 :         }
; 2518 :     }
; 2519 : 
; 2520 :     if (cc >= 0)

  016ac	83 7c 24 4c 00	 cmp	 DWORD PTR cc$[rsp], 0
  016b1	0f 8c bc 00 00
	00		 jl	 $LN166@z900_perfo

; 2521 :     {
; 2522 :         // FIXME: currently, CC1 is never returned because cc=1 is
; 2523 :         // never returned by any of the above conversion functions,
; 2524 :         // but it's the best we can do for now. We'll fix it later.
; 2525 :         regs->psw.cc = cc;

  016b7	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  016bf	0f b6 4c 24 4c	 movzx	 ecx, BYTE PTR cc$[rsp]
  016c4	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 2526 : 
; 2527 :         /* If GR0 says suppress inexact errors, then turn off the FPC bit */
; 2528 :         if (fpc & FPC_FLAG_SFX) // inexact

  016c7	8b 44 24 44	 mov	 eax, DWORD PTR fpc$[rsp]
  016cb	25 00 00 08 00	 and	 eax, 524288		; 00080000H
  016d0	85 c0		 test	 eax, eax
  016d2	0f 84 99 00 00
	00		 je	 $LN168@z900_perfo

; 2529 :         {
; 2530 :             /* Generate a Program Interuption if the mask is in place
; 2531 :                and the error is not being purposely suppressed.
; 2532 :             */
; 2533 :             if ((fpc & FPC_MASK_IMX) && !GR0_IS( optbits ))

  016d8	8b 44 24 44	 mov	 eax, DWORD PTR fpc$[rsp]
  016dc	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  016e1	85 c0		 test	 eax, eax
  016e3	74 5e		 je	 SHORT $LN169@z900_perfo
  016e5	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  016ea	25 80 00 00 00	 and	 eax, 128		; 00000080H
  016ef	85 c0		 test	 eax, eax
  016f1	75 50		 jne	 SHORT $LN169@z900_perfo

; 2534 :             {
; 2535 :                 fpc &= ~FPC_DXC;

  016f3	8b 44 24 44	 mov	 eax, DWORD PTR fpc$[rsp]
  016f7	25 ff 00 ff ff	 and	 eax, -65281		; ffffffffffff00ffH
  016fc	89 44 24 44	 mov	 DWORD PTR fpc$[rsp], eax

; 2536 :                 fpc |= DXC_IEEE_INEXACT_INCR << FPC_DXC_SHIFT;

  01700	8b 44 24 44	 mov	 eax, DWORD PTR fpc$[rsp]
  01704	0d 00 0c 00 00	 or	 eax, 3072		; 00000c00H
  01709	89 44 24 44	 mov	 DWORD PTR fpc$[rsp], eax

; 2537 : 
; 2538 :                 regs->fpc = fpc;

  0170d	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01715	8b 4c 24 44	 mov	 ecx, DWORD PTR fpc$[rsp]
  01719	89 88 c0 03 00
	00		 mov	 DWORD PTR [rax+960], ecx

; 2539 :                 regs->dxc = DXC_DECIMAL;

  0171f	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01727	c7 80 08 07 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+1800], 0

; 2540 : 
; 2541 :                 ARCH_DEP( program_interrupt )( regs, PGM_DATA_EXCEPTION );

  01731	ba 07 00 00 00	 mov	 edx, 7
  01736	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0173e	e8 00 00 00 00	 call	 z900_program_interrupt
$LN169@z900_perfo:

; 2542 :             }
; 2543 : 
; 2544 :             /* Otherwise if inexact suppression was requested, turn off
; 2545 :                that bit in the FPC.
; 2546 :             */
; 2547 :             if (GR0_IS( optbits ))

  01743	0f b6 44 24 40	 movzx	 eax, BYTE PTR optbits$[rsp]
  01748	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0174d	85 c0		 test	 eax, eax
  0174f	74 20		 je	 SHORT $LN170@z900_perfo

; 2548 :                 regs->fpc &= ~FPC_FLAG_SFX;

  01751	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01759	8b 80 c0 03 00
	00		 mov	 eax, DWORD PTR [rax+960]
  0175f	0f ba f0 13	 btr	 eax, 19
  01763	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0176b	89 81 c0 03 00
	00		 mov	 DWORD PTR [rcx+960], eax
$LN170@z900_perfo:
$LN168@z900_perfo:

; 2549 :         }
; 2550 :     }

  01771	eb 24		 jmp	 SHORT $LN167@z900_perfo
$LN166@z900_perfo:

; 2551 :     else // (cc < 0)
; 2552 :     {
; 2553 :         regs->fpc = fpc;

  01773	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0177b	8b 4c 24 44	 mov	 ecx, DWORD PTR fpc$[rsp]
  0177f	89 88 c0 03 00
	00		 mov	 DWORD PTR [rax+960], ecx

; 2554 :         ARCH_DEP( program_interrupt )( regs, PGM_DATA_EXCEPTION );

  01785	ba 07 00 00 00	 mov	 edx, 7
  0178a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01792	e8 00 00 00 00	 call	 z900_program_interrupt
$LN167@z900_perfo:
$LN1@z900_perfo:

; 2555 :     }
; 2556 : 
; 2557 : } /* end DEF_INST( perform_floating_point_operation ) */

  01797	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0179f	48 33 cc	 xor	 rcx, rsp
  017a2	e8 00 00 00 00	 call	 __security_check_cookie
  017a7	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  017ae	c3		 ret	 0
  017af	90		 npad	 1
$LN177@z900_perfo:
  017b0	00 00 00 00	 DD	 $LN24@z900_perfo
  017b4	00 00 00 00	 DD	 $LN25@z900_perfo
  017b8	00 00 00 00	 DD	 $LN26@z900_perfo
  017bc	00 00 00 00	 DD	 $LN33@z900_perfo
  017c0	00 00 00 00	 DD	 $LN33@z900_perfo
  017c4	00 00 00 00	 DD	 $LN27@z900_perfo
  017c8	00 00 00 00	 DD	 $LN28@z900_perfo
  017cc	00 00 00 00	 DD	 $LN29@z900_perfo
  017d0	00 00 00 00	 DD	 $LN30@z900_perfo
  017d4	00 00 00 00	 DD	 $LN31@z900_perfo
  017d8	00 00 00 00	 DD	 $LN32@z900_perfo
$LN176@z900_perfo:
  017dc	00 00 00 00	 DD	 $LN38@z900_perfo
  017e0	00 00 00 00	 DD	 $LN39@z900_perfo
  017e4	00 00 00 00	 DD	 $LN40@z900_perfo
  017e8	00 00 00 00	 DD	 $LN47@z900_perfo
  017ec	00 00 00 00	 DD	 $LN47@z900_perfo
  017f0	00 00 00 00	 DD	 $LN41@z900_perfo
  017f4	00 00 00 00	 DD	 $LN42@z900_perfo
  017f8	00 00 00 00	 DD	 $LN43@z900_perfo
  017fc	00 00 00 00	 DD	 $LN44@z900_perfo
  01800	00 00 00 00	 DD	 $LN45@z900_perfo
  01804	00 00 00 00	 DD	 $LN46@z900_perfo
$LN175@z900_perfo:
  01808	00 00 00 00	 DD	 $LN78@z900_perfo
  0180c	00 00 00 00	 DD	 $LN79@z900_perfo
  01810	00 00 00 00	 DD	 $LN80@z900_perfo
  01814	00 00 00 00	 DD	 $LN60@z900_perfo
  01818	00 00 00 00	 DD	 $LN61@z900_perfo
  0181c	00 00 00 00	 DD	 $LN62@z900_perfo
  01820	00 00 00 00	 DD	 $LN105@z900_perfo
  01824	00 00 00 00	 DD	 $LN105@z900_perfo
  01828	00 00 00 00	 DD	 $LN105@z900_perfo
  0182c	00 00 00 00	 DD	 $LN105@z900_perfo
  01830	00 00 00 00	 DD	 $LN81@z900_perfo
  01834	00 00 00 00	 DD	 $LN82@z900_perfo
  01838	00 00 00 00	 DD	 $LN83@z900_perfo
  0183c	00 00 00 00	 DD	 $LN63@z900_perfo
  01840	00 00 00 00	 DD	 $LN64@z900_perfo
  01844	00 00 00 00	 DD	 $LN65@z900_perfo
  01848	00 00 00 00	 DD	 $LN105@z900_perfo
  0184c	00 00 00 00	 DD	 $LN105@z900_perfo
  01850	00 00 00 00	 DD	 $LN105@z900_perfo
  01854	00 00 00 00	 DD	 $LN105@z900_perfo
  01858	00 00 00 00	 DD	 $LN84@z900_perfo
  0185c	00 00 00 00	 DD	 $LN85@z900_perfo
  01860	00 00 00 00	 DD	 $LN86@z900_perfo
  01864	00 00 00 00	 DD	 $LN66@z900_perfo
  01868	00 00 00 00	 DD	 $LN67@z900_perfo
  0186c	00 00 00 00	 DD	 $LN68@z900_perfo
  01870	00 00 00 00	 DD	 $LN105@z900_perfo
  01874	00 00 00 00	 DD	 $LN69@z900_perfo
  01878	00 00 00 00	 DD	 $LN70@z900_perfo
  0187c	00 00 00 00	 DD	 $LN71@z900_perfo
  01880	00 00 00 00	 DD	 $LN105@z900_perfo
  01884	00 00 00 00	 DD	 $LN105@z900_perfo
  01888	00 00 00 00	 DD	 $LN105@z900_perfo
  0188c	00 00 00 00	 DD	 $LN96@z900_perfo
  01890	00 00 00 00	 DD	 $LN97@z900_perfo
  01894	00 00 00 00	 DD	 $LN98@z900_perfo
  01898	00 00 00 00	 DD	 $LN105@z900_perfo
  0189c	00 00 00 00	 DD	 $LN72@z900_perfo
  018a0	00 00 00 00	 DD	 $LN73@z900_perfo
  018a4	00 00 00 00	 DD	 $LN74@z900_perfo
  018a8	00 00 00 00	 DD	 $LN105@z900_perfo
  018ac	00 00 00 00	 DD	 $LN105@z900_perfo
  018b0	00 00 00 00	 DD	 $LN105@z900_perfo
  018b4	00 00 00 00	 DD	 $LN99@z900_perfo
  018b8	00 00 00 00	 DD	 $LN100@z900_perfo
  018bc	00 00 00 00	 DD	 $LN101@z900_perfo
  018c0	00 00 00 00	 DD	 $LN105@z900_perfo
  018c4	00 00 00 00	 DD	 $LN75@z900_perfo
  018c8	00 00 00 00	 DD	 $LN76@z900_perfo
  018cc	00 00 00 00	 DD	 $LN77@z900_perfo
  018d0	00 00 00 00	 DD	 $LN105@z900_perfo
  018d4	00 00 00 00	 DD	 $LN105@z900_perfo
  018d8	00 00 00 00	 DD	 $LN105@z900_perfo
  018dc	00 00 00 00	 DD	 $LN102@z900_perfo
  018e0	00 00 00 00	 DD	 $LN103@z900_perfo
  018e4	00 00 00 00	 DD	 $LN104@z900_perfo
  018e8	00 00 00 00	 DD	 $LN105@z900_perfo
  018ec	00 00 00 00	 DD	 $LN51@z900_perfo
  018f0	00 00 00 00	 DD	 $LN52@z900_perfo
  018f4	00 00 00 00	 DD	 $LN53@z900_perfo
  018f8	00 00 00 00	 DD	 $LN87@z900_perfo
  018fc	00 00 00 00	 DD	 $LN88@z900_perfo
  01900	00 00 00 00	 DD	 $LN89@z900_perfo
  01904	00 00 00 00	 DD	 $LN105@z900_perfo
  01908	00 00 00 00	 DD	 $LN105@z900_perfo
  0190c	00 00 00 00	 DD	 $LN105@z900_perfo
  01910	00 00 00 00	 DD	 $LN105@z900_perfo
  01914	00 00 00 00	 DD	 $LN54@z900_perfo
  01918	00 00 00 00	 DD	 $LN55@z900_perfo
  0191c	00 00 00 00	 DD	 $LN56@z900_perfo
  01920	00 00 00 00	 DD	 $LN90@z900_perfo
  01924	00 00 00 00	 DD	 $LN91@z900_perfo
  01928	00 00 00 00	 DD	 $LN92@z900_perfo
  0192c	00 00 00 00	 DD	 $LN105@z900_perfo
  01930	00 00 00 00	 DD	 $LN105@z900_perfo
  01934	00 00 00 00	 DD	 $LN105@z900_perfo
  01938	00 00 00 00	 DD	 $LN105@z900_perfo
  0193c	00 00 00 00	 DD	 $LN57@z900_perfo
  01940	00 00 00 00	 DD	 $LN58@z900_perfo
  01944	00 00 00 00	 DD	 $LN59@z900_perfo
  01948	00 00 00 00	 DD	 $LN93@z900_perfo
  0194c	00 00 00 00	 DD	 $LN94@z900_perfo
  01950	00 00 00 00	 DD	 $LN95@z900_perfo
$LN174@z900_perfo:
  01954	00 00 00 00	 DD	 $LN133@z900_perfo
  01958	00 00 00 00	 DD	 $LN134@z900_perfo
  0195c	00 00 00 00	 DD	 $LN135@z900_perfo
  01960	00 00 00 00	 DD	 $LN115@z900_perfo
  01964	00 00 00 00	 DD	 $LN116@z900_perfo
  01968	00 00 00 00	 DD	 $LN117@z900_perfo
  0196c	00 00 00 00	 DD	 $LN160@z900_perfo
  01970	00 00 00 00	 DD	 $LN160@z900_perfo
  01974	00 00 00 00	 DD	 $LN160@z900_perfo
  01978	00 00 00 00	 DD	 $LN160@z900_perfo
  0197c	00 00 00 00	 DD	 $LN136@z900_perfo
  01980	00 00 00 00	 DD	 $LN137@z900_perfo
  01984	00 00 00 00	 DD	 $LN138@z900_perfo
  01988	00 00 00 00	 DD	 $LN118@z900_perfo
  0198c	00 00 00 00	 DD	 $LN119@z900_perfo
  01990	00 00 00 00	 DD	 $LN120@z900_perfo
  01994	00 00 00 00	 DD	 $LN160@z900_perfo
  01998	00 00 00 00	 DD	 $LN160@z900_perfo
  0199c	00 00 00 00	 DD	 $LN160@z900_perfo
  019a0	00 00 00 00	 DD	 $LN160@z900_perfo
  019a4	00 00 00 00	 DD	 $LN139@z900_perfo
  019a8	00 00 00 00	 DD	 $LN140@z900_perfo
  019ac	00 00 00 00	 DD	 $LN141@z900_perfo
  019b0	00 00 00 00	 DD	 $LN121@z900_perfo
  019b4	00 00 00 00	 DD	 $LN122@z900_perfo
  019b8	00 00 00 00	 DD	 $LN123@z900_perfo
  019bc	00 00 00 00	 DD	 $LN160@z900_perfo
  019c0	00 00 00 00	 DD	 $LN124@z900_perfo
  019c4	00 00 00 00	 DD	 $LN125@z900_perfo
  019c8	00 00 00 00	 DD	 $LN126@z900_perfo
  019cc	00 00 00 00	 DD	 $LN160@z900_perfo
  019d0	00 00 00 00	 DD	 $LN160@z900_perfo
  019d4	00 00 00 00	 DD	 $LN160@z900_perfo
  019d8	00 00 00 00	 DD	 $LN151@z900_perfo
  019dc	00 00 00 00	 DD	 $LN152@z900_perfo
  019e0	00 00 00 00	 DD	 $LN153@z900_perfo
  019e4	00 00 00 00	 DD	 $LN160@z900_perfo
  019e8	00 00 00 00	 DD	 $LN127@z900_perfo
  019ec	00 00 00 00	 DD	 $LN128@z900_perfo
  019f0	00 00 00 00	 DD	 $LN129@z900_perfo
  019f4	00 00 00 00	 DD	 $LN160@z900_perfo
  019f8	00 00 00 00	 DD	 $LN160@z900_perfo
  019fc	00 00 00 00	 DD	 $LN160@z900_perfo
  01a00	00 00 00 00	 DD	 $LN154@z900_perfo
  01a04	00 00 00 00	 DD	 $LN155@z900_perfo
  01a08	00 00 00 00	 DD	 $LN156@z900_perfo
  01a0c	00 00 00 00	 DD	 $LN160@z900_perfo
  01a10	00 00 00 00	 DD	 $LN130@z900_perfo
  01a14	00 00 00 00	 DD	 $LN131@z900_perfo
  01a18	00 00 00 00	 DD	 $LN132@z900_perfo
  01a1c	00 00 00 00	 DD	 $LN160@z900_perfo
  01a20	00 00 00 00	 DD	 $LN160@z900_perfo
  01a24	00 00 00 00	 DD	 $LN160@z900_perfo
  01a28	00 00 00 00	 DD	 $LN157@z900_perfo
  01a2c	00 00 00 00	 DD	 $LN158@z900_perfo
  01a30	00 00 00 00	 DD	 $LN159@z900_perfo
  01a34	00 00 00 00	 DD	 $LN160@z900_perfo
  01a38	00 00 00 00	 DD	 $LN106@z900_perfo
  01a3c	00 00 00 00	 DD	 $LN107@z900_perfo
  01a40	00 00 00 00	 DD	 $LN108@z900_perfo
  01a44	00 00 00 00	 DD	 $LN142@z900_perfo
  01a48	00 00 00 00	 DD	 $LN143@z900_perfo
  01a4c	00 00 00 00	 DD	 $LN144@z900_perfo
  01a50	00 00 00 00	 DD	 $LN160@z900_perfo
  01a54	00 00 00 00	 DD	 $LN160@z900_perfo
  01a58	00 00 00 00	 DD	 $LN160@z900_perfo
  01a5c	00 00 00 00	 DD	 $LN160@z900_perfo
  01a60	00 00 00 00	 DD	 $LN109@z900_perfo
  01a64	00 00 00 00	 DD	 $LN110@z900_perfo
  01a68	00 00 00 00	 DD	 $LN111@z900_perfo
  01a6c	00 00 00 00	 DD	 $LN145@z900_perfo
  01a70	00 00 00 00	 DD	 $LN146@z900_perfo
  01a74	00 00 00 00	 DD	 $LN147@z900_perfo
  01a78	00 00 00 00	 DD	 $LN160@z900_perfo
  01a7c	00 00 00 00	 DD	 $LN160@z900_perfo
  01a80	00 00 00 00	 DD	 $LN160@z900_perfo
  01a84	00 00 00 00	 DD	 $LN160@z900_perfo
  01a88	00 00 00 00	 DD	 $LN112@z900_perfo
  01a8c	00 00 00 00	 DD	 $LN113@z900_perfo
  01a90	00 00 00 00	 DD	 $LN114@z900_perfo
  01a94	00 00 00 00	 DD	 $LN148@z900_perfo
  01a98	00 00 00 00	 DD	 $LN149@z900_perfo
  01a9c	00 00 00 00	 DD	 $LN150@z900_perfo
z900_perform_floating_point_operation ENDP
_TEXT	ENDS
END
