; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	memrchr
pdata	SEGMENT
$pdata$memrchr DD imagerel $LN9
	DD	imagerel $LN9+117
	DD	imagerel $unwind$memrchr
pdata	ENDS
xdata	SEGMENT
$unwind$memrchr DD 011201H
	DD	02212H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\memrchr.c
_TEXT	SEGMENT
pMem$ = 0
buf$ = 32
c$ = 40
num$ = 48
memrchr	PROC

; 20   : {

$LN9:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 18	 sub	 rsp, 24

; 21   :    unsigned char *pMem;
; 22   :    if (num == 0)

  00012	48 83 7c 24 30
	00		 cmp	 QWORD PTR num$[rsp], 0
  00018	75 04		 jne	 SHORT $LN5@memrchr

; 23   :    {
; 24   :       return NULL;

  0001a	33 c0		 xor	 eax, eax
  0001c	eb 52		 jmp	 SHORT $LN1@memrchr
$LN5@memrchr:

; 25   :    }
; 26   :    for (pMem = (unsigned char *) buf + num - 1; pMem >= (unsigned char *) buf; pMem--)

  0001e	48 8b 44 24 20	 mov	 rax, QWORD PTR buf$[rsp]
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR num$[rsp]
  00028	48 8d 44 08 ff	 lea	 rax, QWORD PTR [rax+rcx-1]
  0002d	48 89 04 24	 mov	 QWORD PTR pMem$[rsp], rax
  00031	eb 0b		 jmp	 SHORT $LN4@memrchr
$LN2@memrchr:
  00033	48 8b 04 24	 mov	 rax, QWORD PTR pMem$[rsp]
  00037	48 ff c8	 dec	 rax
  0003a	48 89 04 24	 mov	 QWORD PTR pMem$[rsp], rax
$LN4@memrchr:
  0003e	48 8b 44 24 20	 mov	 rax, QWORD PTR buf$[rsp]
  00043	48 39 04 24	 cmp	 QWORD PTR pMem$[rsp], rax
  00047	72 14		 jb	 SHORT $LN3@memrchr

; 27   :    {
; 28   :       if (*pMem == (unsigned char) c) break;

  00049	48 8b 04 24	 mov	 rax, QWORD PTR pMem$[rsp]
  0004d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00050	0f b6 4c 24 28	 movzx	 ecx, BYTE PTR c$[rsp]
  00055	3b c1		 cmp	 eax, ecx
  00057	75 02		 jne	 SHORT $LN6@memrchr
  00059	eb 02		 jmp	 SHORT $LN3@memrchr
$LN6@memrchr:

; 29   :    }

  0005b	eb d6		 jmp	 SHORT $LN2@memrchr
$LN3@memrchr:

; 30   :    if (pMem >= (unsigned char *) buf)

  0005d	48 8b 44 24 20	 mov	 rax, QWORD PTR buf$[rsp]
  00062	48 39 04 24	 cmp	 QWORD PTR pMem$[rsp], rax
  00066	72 06		 jb	 SHORT $LN7@memrchr

; 31   :    {
; 32   :       return ((void *) pMem);

  00068	48 8b 04 24	 mov	 rax, QWORD PTR pMem$[rsp]
  0006c	eb 02		 jmp	 SHORT $LN1@memrchr
$LN7@memrchr:

; 33   :    }
; 34   :    return NULL;

  0006e	33 c0		 xor	 eax, eax
$LN1@memrchr:

; 35   : }

  00070	48 83 c4 18	 add	 rsp, 24
  00074	c3		 ret	 0
memrchr	ENDP
_TEXT	ENDS
END
