; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	ecpsvm_showstats
PUBLIC	ecpsvm_disable
PUBLIC	ecpsvm_enable
PUBLIC	ecpsvm_debug
PUBLIC	ecpsvm_nodebug
PUBLIC	ecpsvm_level
PUBLIC	ecpsvm_sastats
PUBLIC	ecpsvm_cpstats
_DATA	SEGMENT
$SG175597 DB	'Help', 00H
	ORG $+3
$SG175598 DB	'Show help', 00H
	ORG $+2
$SG175600 DB	'STats', 00H
	ORG $+6
$SG175599 DB	'format : "ecpsvm help [cmd]" Shows help on the specified'
	DB	0aH, '        ECPSVM subcommand', 00H
	ORG $+1
$SG169586 DB	'SVC', 00H
$SG175601 DB	'Show statistical counters', 00H
	ORG $+2
$SG175606 DB	'ENable', 00H
	ORG $+1
$SG169587 DB	'SSM', 00H
$SG175602 DB	'format : ecpsvm stats : Shows various ECPSVM Counters', 00H
	ORG $+2
$SG175603 DB	'DIsable', 00H
$SG175604 DB	'Disable ECPS:VM Features', 00H
	ORG $+3
$SG175609 DB	'DEBUG', 00H
	ORG $+2
$SG169591 DB	'SIO', 00H
$SG175605 DB	'format : ecpsvm disable [ALL|feat1[ feat2|...]', 00H
	ORG $+1
$SG175607 DB	'Enable ECPS:VM Features', 00H
$SG175608 DB	'format : ecpsvm enable [ALL|feat1[ feat2|...]', 00H
	ORG $+2
$SG175610 DB	'Debug ECPS:VM Features', 00H
	ORG $+1
$SG175611 DB	'format : ecpsvm debug [ALL|feat1[ feat2|...]', 00H
	ORG $+3
$SG175612 DB	'NODebug', 00H
$SG175613 DB	'Turn Debug off for ECPS:VM Features', 00H
$SG169597 DB	'LRA', 00H
$SG175614 DB	'format : ecpsvm NODebug [ALL|feat1[ feat2|...]', 00H
	ORG $+1
$SG175615 DB	'Level', 00H
	ORG $+2
$SG175616 DB	'Set/Show ECPS:VM level', 00H
	ORG $+1
$SG175617 DB	'format : ecpsvm Level [nn]', 0aH, 00H
$SG169588 DB	'LPSW', 00H
	ORG $+7
ecpsvm_sastats DQ FLAT:$SG169586
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169587
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169588
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169589
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169590
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169591
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	02H
	ORG $+4
	DQ	FLAT:$SG169592
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169593
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169594
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169595
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	02H
	ORG $+4
	DQ	FLAT:$SG169596
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	02H
	ORG $+4
	DQ	FLAT:$SG169597
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
$SG169589 DB	'STNSM', 00H
	ORG $+2
$SG169590 DB	'STOSM', 00H
	ORG $+2
$SG169592 DB	'VTIMER', 00H
	ORG $+1
$SG169593 DB	'STCTL', 00H
	ORG $+2
$SG169594 DB	'LCTL', 00H
	ORG $+3
$SG169595 DB	'DIAG', 00H
	ORG $+3
$SG169596 DB	'IUCV', 00H
	ORG $+3
$SG169625 DB	'FREE', 00H
	ORG $+3
ecpsvm_cpstats DQ FLAT:$SG169625
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	02H
	ORG $+4
	DQ	FLAT:$SG169626
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	02H
	ORG $+4
	DQ	FLAT:$SG169627
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169628
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169629
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169630
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169631
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169632
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169633
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169634
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169635
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169636
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169637
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169638
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169639
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169640
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169641
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169642
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169643
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169644
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169645
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169646
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	02H
	ORG $+4
	DQ	FLAT:$SG169647
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169648
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
	DQ	FLAT:$SG169649
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	03H
	ORG $+4
$SG169626 DB	'FRET', 00H
	ORG $+3
$SG169627 DB	'LCKPG', 00H
	ORG $+2
$SG169628 DB	'ULKPG', 00H
	ORG $+2
$SG169629 DB	'SCNRU', 00H
	ORG $+2
$SG169630 DB	'SCNVU', 00H
	ORG $+2
$SG169631 DB	'DISP0', 00H
	ORG $+2
$SG169632 DB	'DISP1', 00H
	ORG $+2
$SG169633 DB	'DISP2', 00H
	ORG $+2
$SG169634 DB	'DNCCW', 00H
	ORG $+2
$SG169635 DB	'DFCCW', 00H
	ORG $+2
$SG169636 DB	'FCCWS', 00H
	ORG $+2
$SG169637 DB	'CCWGN', 00H
	ORG $+2
$SG169638 DB	'UXCCW', 00H
	ORG $+2
$SG169639 DB	'TRBRG', 00H
	ORG $+2
$SG169640 DB	'TRLOK', 00H
	ORG $+2
$SG169641 DB	'VIST', 00H
	ORG $+3
$SG169642 DB	'VIPT', 00H
	ORG $+3
$SG169643 DB	'STEVL', 00H
	ORG $+2
$SG169644 DB	'FREEX', 00H
	ORG $+2
$SG169645 DB	'FRETX', 00H
	ORG $+2
$SG169646 DB	'PMASS', 00H
	ORG $+2
$SG169647 DB	'LCSPG', 00H
	ORG $+2
$SG169648 DB	'LINK', 00H
	ORG $+3
$SG169649 DB	'RETRN', 00H
_DATA	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	s370_ecpsvm_basic_freex
PUBLIC	s370_ecpsvm_basic_fretx
PUBLIC	s370_ecpsvm_lock_page
PUBLIC	s370_ecpsvm_unlock_page
PUBLIC	s370_ecpsvm_decode_next_ccw
PUBLIC	s370_ecpsvm_free_ccwstor
PUBLIC	s370_ecpsvm_locate_vblock
PUBLIC	s370_ecpsvm_disp1
PUBLIC	s370_ecpsvm_tpage
PUBLIC	s370_ecpsvm_tpage_lock
PUBLIC	s370_ecpsvm_inval_segtab
PUBLIC	s370_ecpsvm_inval_ptable
PUBLIC	s370_ecpsvm_decode_first_ccw
PUBLIC	s370_ecpsvm_dispatch_main
PUBLIC	s370_ecpsvm_locate_rblock
PUBLIC	s370_ecpsvm_comm_ccwproc
PUBLIC	s370_ecpsvm_unxlate_ccw
PUBLIC	s370_ecpsvm_disp2
PUBLIC	s370_ecpsvm_store_level
PUBLIC	s370_ecpsvm_loc_chgshrpg
PUBLIC	s370_ecpsvm_extended_freex
PUBLIC	s370_ecpsvm_extended_fretx
PUBLIC	s370_ecpsvm_prefmach_assist
PUBLIC	fetch_hw_noswap
PUBLIC	store_hw_noswap
PUBLIC	fetch_fw_noswap
PUBLIC	store_fw_noswap
PUBLIC	fetch_dw_noswap
PUBLIC	store_dw_noswap
PUBLIC	ecpsvm_dosvc
PUBLIC	ecpsvm_dossm
PUBLIC	ecpsvm_dolpsw
PUBLIC	ecpsvm_dostnsm
PUBLIC	ecpsvm_dostosm
PUBLIC	ecpsvm_dosio
PUBLIC	ecpsvm_dodiag
PUBLIC	ecpsvm_dolctl
PUBLIC	ecpsvm_dostctl
PUBLIC	ecpsvm_doiucv
PUBLIC	ecpsvm_dolra
PUBLIC	_get_storekey_ptr
PUBLIC	_get_storekey1_ptr
PUBLIC	_get_storekey2_ptr
PUBLIC	s370__get_storage_key
PUBLIC	s370_get_2K_storage_key
PUBLIC	s370_get_storage_key
PUBLIC	s370_maddr_l
PUBLIC	s370_vstore2_full
PUBLIC	s370_vstore4_full
PUBLIC	s370_vstore8_full
PUBLIC	s370_vfetch2_full
PUBLIC	s370_vfetch4_full
PUBLIC	s370_vfetch8_full
PUBLIC	s370_vstoreb
PUBLIC	s370_vstore2
PUBLIC	s370_vstore4
PUBLIC	s370_vstore8
PUBLIC	s370_vfetchb
PUBLIC	s370_vfetch2
PUBLIC	s370_vfetch4
PUBLIC	s370_vfetch8
PUBLIC	ecpsvm_getcmdent
PUBLIC	ecpsvm_get_trace_entry
PUBLIC	ecpsvm_do_fretx
PUBLIC	ecpsvm_do_deccw1
PUBLIC	ecpsvm_do_scnvu
PUBLIC	ecpsvm_do_disp1
PUBLIC	ecpsvm_do_disp2
PUBLIC	ecpsvm_zappage
PUBLIC	ecpsvm_check_pswtrans
PUBLIC	ecpsvm_doCPlink
PUBLIC	ecpsvm_doCPretrn
PUBLIC	ecpsvm_doassistsvc
PUBLIC	ecpsvm_findstat
PUBLIC	ecpsvm_enadisaall
PUBLIC	ecpsvm_enable_disable
PUBLIC	ecpsvm_command
PUBLIC	__real@3ffe147ae147ae14
EXTRN	__imp__stricmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp__strnicmp:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_qsort:PROC
EXTRN	_byteswap_ushort:PROC
EXTRN	_byteswap_ulong:PROC
EXTRN	_byteswap_uint64:PROC
EXTRN	__imp_atoi:PROC
EXTRN	longjmp:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_hthread_obtain_lock:PROC
EXTRN	__imp_hthread_release_lock:PROC
EXTRN	__imp_hthread_signal_condition:PROC
EXTRN	__imp_hthread_wait_condition:PROC
EXTRN	__imp_strlcat:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	s370_fetch_int_timer:PROC
EXTRN	s370_store_int_timer:PROC
EXTRN	get_cpu_timer:PROC
EXTRN	set_cpu_timer:PROC
EXTRN	s370_store_psw:PROC
EXTRN	s370_load_psw:PROC
EXTRN	display_psw:PROC
EXTRN	display_gregs:PROC
EXTRN	display_cregs:PROC
EXTRN	s370_purge_tlb:PROC
EXTRN	s370_program_interrupt:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	s370_logical_to_main_l:PROC
EXTRN	s370_invalidate_tlb:PROC
EXTRN	s370_translate_addr:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_sysblk:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_BSS	SEGMENT
$SG171077 DB	03H DUP (?)
	ALIGN	4

$SG171079 DB	03H DUP (?)
	ALIGN	4

$SG172839 DB	03H DUP (?)
	ALIGN	4

$SG173427 DB	03H DUP (?)
	ALIGN	4

$SG173442 DB	03H DUP (?)
	ALIGN	4

$SG173734 DB	03H DUP (?)
	ALIGN	4

$SG173749 DB	03H DUP (?)
	ALIGN	4

$SG173918 DB	03H DUP (?)
	ALIGN	4

$SG173941 DB	03H DUP (?)
	ALIGN	4

$SG174060 DB	03H DUP (?)
	ALIGN	4

$SG174181 DB	03H DUP (?)
	ALIGN	4

$SG174196 DB	03H DUP (?)
	ALIGN	4

$SG174344 DB	03H DUP (?)
	ALIGN	4

$SG174359 DB	03H DUP (?)
	ALIGN	4

$SG174497 DB	03H DUP (?)
	ALIGN	4

$SG174651 DB	03H DUP (?)
	ALIGN	4

$SG174855 DB	03H DUP (?)
	ALIGN	4

$SG174964 DB	03H DUP (?)
	ALIGN	4

$SG175105 DB	03H DUP (?)
	ALIGN	4

$SG175293 DB	01H DUP (?)
	ALIGN	4

$SG175457 DB	01H DUP (?)
	ALIGN	4

$SG175520 DB	01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$s370_ecpsvm_basic_freex DD imagerel $LN21
	DD	imagerel $LN21+777
	DD	imagerel $unwind$s370_ecpsvm_basic_freex
$pdata$s370_ecpsvm_basic_fretx DD imagerel $LN21
	DD	imagerel $LN21+777
	DD	imagerel $unwind$s370_ecpsvm_basic_fretx
$pdata$s370_ecpsvm_lock_page DD imagerel $LN29
	DD	imagerel $LN29+1269
	DD	imagerel $unwind$s370_ecpsvm_lock_page
$pdata$s370_ecpsvm_unlock_page DD imagerel $LN28
	DD	imagerel $LN28+979
	DD	imagerel $unwind$s370_ecpsvm_unlock_page
$pdata$s370_ecpsvm_decode_next_ccw DD imagerel $LN31
	DD	imagerel $LN31+1635
	DD	imagerel $unwind$s370_ecpsvm_decode_next_ccw
$pdata$s370_ecpsvm_free_ccwstor DD imagerel $LN95
	DD	imagerel $LN95+4757
	DD	imagerel $unwind$s370_ecpsvm_free_ccwstor
$pdata$s370_ecpsvm_locate_vblock DD imagerel $LN28
	DD	imagerel $LN28+1001
	DD	imagerel $unwind$s370_ecpsvm_locate_vblock
$pdata$s370_ecpsvm_disp1 DD imagerel $LN33
	DD	imagerel $LN33+958
	DD	imagerel $unwind$s370_ecpsvm_disp1
$pdata$s370_ecpsvm_tpage DD imagerel $LN30
	DD	imagerel $LN30+1223
	DD	imagerel $unwind$s370_ecpsvm_tpage
$pdata$s370_ecpsvm_tpage_lock DD imagerel $LN30
	DD	imagerel $LN30+1244
	DD	imagerel $unwind$s370_ecpsvm_tpage_lock
$pdata$s370_ecpsvm_inval_segtab DD imagerel $LN32
	DD	imagerel $LN32+1549
	DD	imagerel $unwind$s370_ecpsvm_inval_segtab
$pdata$s370_ecpsvm_inval_ptable DD imagerel $LN27
	DD	imagerel $LN27+970
	DD	imagerel $unwind$s370_ecpsvm_inval_ptable
$pdata$s370_ecpsvm_decode_first_ccw DD imagerel $LN23
	DD	imagerel $LN23+950
	DD	imagerel $unwind$s370_ecpsvm_decode_first_ccw
$pdata$s370_ecpsvm_dispatch_main DD imagerel $LN123
	DD	imagerel $LN123+6597
	DD	imagerel $unwind$s370_ecpsvm_dispatch_main
$pdata$s370_ecpsvm_locate_rblock DD imagerel $LN42
	DD	imagerel $LN42+2529
	DD	imagerel $unwind$s370_ecpsvm_locate_rblock
$pdata$s370_ecpsvm_comm_ccwproc DD imagerel $LN162
	DD	imagerel $LN162+8263
	DD	imagerel $unwind$s370_ecpsvm_comm_ccwproc
$pdata$s370_ecpsvm_unxlate_ccw DD imagerel $LN37
	DD	imagerel $LN37+1486
	DD	imagerel $unwind$s370_ecpsvm_unxlate_ccw
$pdata$s370_ecpsvm_disp2 DD imagerel $LN26
	DD	imagerel $LN26+888
	DD	imagerel $unwind$s370_ecpsvm_disp2
$pdata$s370_ecpsvm_store_level DD imagerel $LN50
	DD	imagerel $LN50+2397
	DD	imagerel $unwind$s370_ecpsvm_store_level
$pdata$s370_ecpsvm_loc_chgshrpg DD imagerel $LN39
	DD	imagerel $LN39+1641
	DD	imagerel $unwind$s370_ecpsvm_loc_chgshrpg
$pdata$s370_ecpsvm_extended_freex DD imagerel $LN44
	DD	imagerel $LN44+2814
	DD	imagerel $unwind$s370_ecpsvm_extended_freex
$pdata$s370_ecpsvm_extended_fretx DD imagerel $LN28
	DD	imagerel $LN28+1157
	DD	imagerel $unwind$s370_ecpsvm_extended_fretx
$pdata$s370_ecpsvm_prefmach_assist DD imagerel $LN21
	DD	imagerel $LN21+777
	DD	imagerel $unwind$s370_ecpsvm_prefmach_assist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_hw_noswap DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$fetch_hw_noswap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_fw_noswap DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$fetch_fw_noswap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_dw_noswap DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$fetch_dw_noswap
pdata	ENDS
pdata	SEGMENT
$pdata$ecpsvm_dosvc DD imagerel $LN8
	DD	imagerel $LN8+229
	DD	imagerel $unwind$ecpsvm_dosvc
$pdata$ecpsvm_dossm DD imagerel $LN58
	DD	imagerel $LN58+3273
	DD	imagerel $unwind$ecpsvm_dossm
$pdata$ecpsvm_dolpsw DD imagerel $LN62
	DD	imagerel $LN62+3348
	DD	imagerel $unwind$ecpsvm_dolpsw
$pdata$ecpsvm_dostnsm DD imagerel $LN58
	DD	imagerel $LN58+3258
	DD	imagerel $unwind$ecpsvm_dostnsm
$pdata$ecpsvm_dostosm DD imagerel $LN58
	DD	imagerel $LN58+3258
	DD	imagerel $unwind$ecpsvm_dostosm
$pdata$ecpsvm_dosio DD imagerel $LN36
	DD	imagerel $LN36+1960
	DD	imagerel $unwind$ecpsvm_dosio
$pdata$ecpsvm_dodiag DD imagerel $LN42
	DD	imagerel $LN42+1977
	DD	imagerel $unwind$ecpsvm_dodiag
$pdata$ecpsvm_dolctl DD imagerel $LN101
	DD	imagerel $LN101+4724
	DD	imagerel $unwind$ecpsvm_dolctl
$pdata$ecpsvm_dostctl DD imagerel $LN48
	DD	imagerel $LN48+2865
	DD	imagerel $unwind$ecpsvm_dostctl
$pdata$ecpsvm_doiucv DD imagerel $LN36
	DD	imagerel $LN36+1960
	DD	imagerel $unwind$ecpsvm_doiucv
$pdata$ecpsvm_dolra DD imagerel $LN91
	DD	imagerel $LN91+6830
	DD	imagerel $unwind$ecpsvm_dolra
$pdata$Interrupt_Lock_Obtained DD imagerel Interrupt_Lock_Obtained
	DD	imagerel Interrupt_Lock_Obtained+269
	DD	imagerel $unwind$Interrupt_Lock_Obtained
$pdata$Obtain_Interrupt_Lock DD imagerel Obtain_Interrupt_Lock
	DD	imagerel Obtain_Interrupt_Lock+88
	DD	imagerel $unwind$Obtain_Interrupt_Lock
$pdata$Release_Interrupt_Lock DD imagerel Release_Interrupt_Lock
	DD	imagerel Release_Interrupt_Lock+71
	DD	imagerel $unwind$Release_Interrupt_Lock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_get_storekey_ptr DD imagerel $LN5
	DD	imagerel $LN5+104
	DD	imagerel $unwind$_get_storekey_ptr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370__get_storage_key DD imagerel $LN8
	DD	imagerel $LN8+118
	DD	imagerel $unwind$s370__get_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_get_2K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$s370_get_2K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_get_storage_key DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$s370_get_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_maddr_l DD imagerel $LN14
	DD	imagerel $LN14+474
	DD	imagerel $unwind$s370_maddr_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vstore2_full DD imagerel $LN3
	DD	imagerel $LN3+204
	DD	imagerel $unwind$s370_vstore2_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vstore4_full DD imagerel $LN3
	DD	imagerel $LN3+313
	DD	imagerel $unwind$s370_vstore4_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vstore8_full DD imagerel $LN3
	DD	imagerel $LN3+356
	DD	imagerel $unwind$s370_vstore8_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vfetch2_full DD imagerel $LN3
	DD	imagerel $LN3+174
	DD	imagerel $unwind$s370_vfetch2_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vfetch4_full DD imagerel $LN3
	DD	imagerel $LN3+288
	DD	imagerel $unwind$s370_vfetch4_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vfetch8_full DD imagerel $LN3
	DD	imagerel $LN3+288
	DD	imagerel $unwind$s370_vfetch8_full
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vstoreb DD imagerel $LN18
	DD	imagerel $LN18+169
	DD	imagerel $unwind$s370_vstoreb
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vstore2 DD imagerel $LN24
	DD	imagerel $LN24+267
	DD	imagerel $unwind$s370_vstore2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vstore4 DD imagerel $LN27
	DD	imagerel $LN27+289
	DD	imagerel $unwind$s370_vstore4
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vstore8 DD imagerel $LN24
	DD	imagerel $LN24+253
	DD	imagerel $unwind$s370_vstore8
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vfetchb DD imagerel $LN18
	DD	imagerel $LN18+160
	DD	imagerel $unwind$s370_vfetchb
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vfetch2 DD imagerel $LN26
	DD	imagerel $LN26+275
	DD	imagerel $unwind$s370_vfetch2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vfetch4 DD imagerel $LN26
	DD	imagerel $LN26+275
	DD	imagerel $unwind$s370_vfetch4
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_vfetch8 DD imagerel $LN23
	DD	imagerel $LN23+240
	DD	imagerel $unwind$s370_vfetch8
pdata	ENDS
pdata	SEGMENT
$pdata$ecpsvm_getcmdent DD imagerel $LN8
	DD	imagerel $LN8+209
	DD	imagerel $unwind$ecpsvm_getcmdent
$pdata$ecpsvm_int_lra DD imagerel ecpsvm_int_lra
	DD	imagerel ecpsvm_int_lra+76
	DD	imagerel $unwind$ecpsvm_int_lra
$pdata$ecpsvm_tranbrng DD imagerel ecpsvm_tranbrng
	DD	imagerel ecpsvm_tranbrng+977
	DD	imagerel $unwind$ecpsvm_tranbrng
$pdata$ecpsvm_get_trace_entry DD imagerel $LN4
	DD	imagerel $LN4+128
	DD	imagerel $unwind$ecpsvm_get_trace_entry
$pdata$ecpsvm_do_fretx DD imagerel $LN20
	DD	imagerel $LN20+1778
	DD	imagerel $unwind$ecpsvm_do_fretx
$pdata$ecpsvm_lockpage1 DD imagerel ecpsvm_lockpage1
	DD	imagerel ecpsvm_lockpage1+771
	DD	imagerel $unwind$ecpsvm_lockpage1
$pdata$ecpsvm_unlockpage1 DD imagerel ecpsvm_unlockpage1
	DD	imagerel ecpsvm_unlockpage1+1051
	DD	imagerel $unwind$ecpsvm_unlockpage1
$pdata$ecpsvm_do_deccw1 DD imagerel $LN48
	DD	imagerel $LN48+3168
	DD	imagerel $unwind$ecpsvm_do_deccw1
$pdata$ecpsvm_do_scnvu DD imagerel $LN14
	DD	imagerel $LN14+1144
	DD	imagerel $unwind$ecpsvm_do_scnvu
$pdata$ecpsvm_do_disp1 DD imagerel $LN38
	DD	imagerel $LN38+2084
	DD	imagerel $unwind$ecpsvm_do_disp1
$pdata$ecpsvm_do_disp2 DD imagerel $LN333
	DD	imagerel $LN333+15972
	DD	imagerel $unwind$ecpsvm_do_disp2
$pdata$ecpsvm_zappage DD imagerel $LN4
	DD	imagerel $LN4+286
	DD	imagerel $unwind$ecpsvm_zappage
$pdata$ecpsvm_disp_incprobt DD imagerel ecpsvm_disp_incprobt
	DD	imagerel ecpsvm_disp_incprobt+1059
	DD	imagerel $unwind$ecpsvm_disp_incprobt
$pdata$ecpsvm_disp_runtime DD imagerel ecpsvm_disp_runtime
	DD	imagerel ecpsvm_disp_runtime+2937
	DD	imagerel $unwind$ecpsvm_disp_runtime
$pdata$ecpsvm_check_pswtrans DD imagerel $LN40
	DD	imagerel $LN40+1296
	DD	imagerel $unwind$ecpsvm_check_pswtrans
$pdata$ecpsvm_doCPlink DD imagerel $LN18
	DD	imagerel $LN18+1508
	DD	imagerel $unwind$ecpsvm_doCPlink
$pdata$ecpsvm_doCPretrn DD imagerel $LN25
	DD	imagerel $LN25+1981
	DD	imagerel $unwind$ecpsvm_doCPretrn
$pdata$ecpsvm_doassistsvc DD imagerel $LN71
	DD	imagerel $LN71+3550
	DD	imagerel $unwind$ecpsvm_doassistsvc
$pdata$ecpsvm_sortstats DD imagerel ecpsvm_sortstats
	DD	imagerel ecpsvm_sortstats+58
	DD	imagerel $unwind$ecpsvm_sortstats
$pdata$ecpsvm_showstats2 DD imagerel ecpsvm_showstats2
	DD	imagerel ecpsvm_showstats2+1435
	DD	imagerel $unwind$ecpsvm_showstats2
$pdata$ecpsvm_showstats DD imagerel $LN10
	DD	imagerel $LN10+939
	DD	imagerel $unwind$ecpsvm_showstats
$pdata$ecpsvm_findstat DD imagerel $LN11
	DD	imagerel $LN11+265
	DD	imagerel $unwind$ecpsvm_findstat
$pdata$ecpsvm_enadisaall DD imagerel $LN14
	DD	imagerel $LN14+787
	DD	imagerel $unwind$ecpsvm_enadisaall
$pdata$ecpsvm_enable_disable DD imagerel $LN19
	DD	imagerel $LN19+1286
	DD	imagerel $unwind$ecpsvm_enable_disable
$pdata$ecpsvm_disable DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$ecpsvm_disable
$pdata$ecpsvm_enable DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$ecpsvm_enable
$pdata$ecpsvm_debug DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$ecpsvm_debug
$pdata$ecpsvm_nodebug DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$ecpsvm_nodebug
$pdata$ecpsvm_level DD imagerel $LN6
	DD	imagerel $LN6+575
	DD	imagerel $unwind$ecpsvm_level
$pdata$ecpsvm_helpcmd DD imagerel ecpsvm_helpcmd
	DD	imagerel ecpsvm_helpcmd+280
	DD	imagerel $unwind$ecpsvm_helpcmd
$pdata$ecpsvm_helpcmdlist DD imagerel ecpsvm_helpcmdlist
	DD	imagerel ecpsvm_helpcmdlist+186
	DD	imagerel $unwind$ecpsvm_helpcmdlist
$pdata$ecpsvm_command DD imagerel $LN5
	DD	imagerel $LN5+423
	DD	imagerel $unwind$ecpsvm_command
pdata	ENDS
;	COMDAT __real@3ffe147ae147ae14
CONST	SEGMENT
__real@3ffe147ae147ae14 DQ 03ffe147ae147ae14r	; 1.88
CONST	ENDS
_DATA	SEGMENT
	ORG $+2
$SG169702 DB	'CPASSTS FREE ECPS:VM Disabled in configuration', 00H
	ORG $+1
$SG169703 DB	'D', 00H
	ORG $+2
$SG169711 DB	'D', 00H
	ORG $+2
$SG169704 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG169718 DB	'D', 00H
	ORG $+2
$SG169705 DB	's370_ecpsvm_basic_freex', 00H
$SG169706 DB	'ecpsvm.c', 00H
	ORG $+3
$SG169748 DB	'D', 00H
	ORG $+2
$SG169710 DB	'CPASSTS FREE Disabled by command', 00H
	ORG $+3
$SG169756 DB	'D', 00H
	ORG $+2
$SG169712 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG169763 DB	'D', 00H
	ORG $+2
$SG169713 DB	's370_ecpsvm_basic_freex', 00H
$SG169714 DB	'ecpsvm.c', 00H
	ORG $+3
$SG169783 DB	'D', 00H
	ORG $+2
$SG169717 DB	'FREE called', 00H
$SG169790 DB	'D', 00H
	ORG $+2
$SG169719 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG169799 DB	'D', 00H
	ORG $+2
$SG169720 DB	's370_ecpsvm_basic_freex', 00H
$SG169721 DB	'ecpsvm.c', 00H
	ORG $+3
$SG169840 DB	'D', 00H
	ORG $+2
$SG169747 DB	'CPASSTS FRET ECPS:VM Disabled in configuration', 00H
	ORG $+1
$SG169749 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG169848 DB	'D', 00H
	ORG $+2
$SG169750 DB	's370_ecpsvm_basic_fretx', 00H
$SG169751 DB	'ecpsvm.c', 00H
	ORG $+3
$SG169855 DB	'D', 00H
	ORG $+2
$SG169755 DB	'CPASSTS FRET Disabled by command', 00H
	ORG $+3
$SG169862 DB	'D', 00H
	ORG $+2
$SG169757 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG169888 DB	'D', 00H
	ORG $+2
$SG169758 DB	's370_ecpsvm_basic_fretx', 00H
$SG169759 DB	'ecpsvm.c', 00H
	ORG $+3
$SG169896 DB	'D', 00H
	ORG $+2
$SG169762 DB	'FRET called', 00H
$SG169904 DB	'D', 00H
	ORG $+2
$SG169764 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG169912 DB	'D', 00H
	ORG $+2
$SG169765 DB	's370_ecpsvm_basic_fretx', 00H
$SG169766 DB	'ecpsvm.c', 00H
	ORG $+3
$SG169919 DB	'D', 00H
	ORG $+2
$SG169781 DB	'LKPG coreptr = %16.16llX Frame = %16.16llX', 00H
	ORG $+1
$SG169957 DB	'D', 00H
	ORG $+2
$SG169784 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG169965 DB	'D', 00H
	ORG $+2
$SG169785 DB	'ecpsvm_lockpage1', 00H
	ORG $+3
$SG169972 DB	'D', 00H
	ORG $+2
$SG169786 DB	'ecpsvm.c', 00H
	ORG $+3
$SG170046 DB	'D', 00H
	ORG $+2
$SG169788 DB	'LKPG corete = %6.6X', 00H
$SG170058 DB	'D', 00H
	ORG $+2
$SG169791 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG170070 DB	'D', 00H
	ORG $+2
$SG169792 DB	'ecpsvm_lockpage1', 00H
	ORG $+3
$SG170079 DB	'D', 00H
	ORG $+2
$SG169793 DB	'ecpsvm.c', 00H
	ORG $+3
$SG170088 DB	'D', 00H
	ORG $+2
$SG169797 DB	'LKPG Page locked. Count = %6.6X', 00H
$SG169800 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG170133 DB	'D', 00H
	ORG $+2
$SG169801 DB	'ecpsvm_lockpage1', 00H
	ORG $+3
$SG170141 DB	'D', 00H
	ORG $+2
$SG169802 DB	'ecpsvm.c', 00H
	ORG $+3
$SG170148 DB	'D', 00H
	ORG $+2
$SG169839 DB	'CPASSTS LCKPG ECPS:VM Disabled in configuration', 00H
$SG169841 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG170155 DB	'D', 00H
	ORG $+2
$SG169842 DB	's370_ecpsvm_lock_page', 00H
	ORG $+2
$SG169843 DB	'ecpsvm.c', 00H
	ORG $+3
$SG170162 DB	'D', 00H
	ORG $+2
$SG169847 DB	'CPASSTS LCKPG Disabled by command', 00H
	ORG $+2
$SG170276 DB	'D', 00H
	ORG $+2
$SG169849 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG170284 DB	'D', 00H
	ORG $+2
$SG169850 DB	's370_ecpsvm_lock_page', 00H
	ORG $+2
$SG169851 DB	'ecpsvm.c', 00H
	ORG $+3
$SG170291 DB	'D', 00H
	ORG $+2
$SG169854 DB	'LCKPG called', 00H
	ORG $+3
$SG169856 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG170358 DB	'D', 00H
	ORG $+2
$SG169857 DB	's370_ecpsvm_lock_page', 00H
	ORG $+2
$SG169858 DB	'ecpsvm.c', 00H
	ORG $+3
$SG170366 DB	'D', 00H
	ORG $+2
$SG169860 DB	'LKPG PAGE=%6.6X, PTRPL=%6.6X', 00H
	ORG $+3
$SG169863 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG170374 DB	'D', 00H
	ORG $+2
$SG169864 DB	's370_ecpsvm_lock_page', 00H
	ORG $+2
$SG169865 DB	'ecpsvm.c', 00H
	ORG $+3
$SG170381 DB	'D', 00H
	ORG $+2
$SG169886 DB	'ULKPG PAGE=%6.6X, PTRPL=%6.6X', 00H
	ORG $+2
$SG169889 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG170419 DB	'D', 00H
	ORG $+2
$SG169890 DB	'ecpsvm_unlockpage1', 00H
	ORG $+1
$SG170427 DB	'D', 00H
	ORG $+2
$SG169891 DB	'ecpsvm.c', 00H
	ORG $+3
$SG170434 DB	'D', 00H
	ORG $+2
$SG169894 DB	'ULKPG Page beyond core size of %6.6X', 00H
	ORG $+3
$SG169897 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG170487 DB	'D', 00H
	ORG $+2
$SG169898 DB	'ecpsvm_unlockpage1', 00H
	ORG $+1
$SG170495 DB	'D', 00H
	ORG $+2
$SG169899 DB	'ecpsvm.c', 00H
	ORG $+3
$SG170502 DB	'D', 00H
	ORG $+2
$SG169903 DB	'ULKPG Attempting to unlock page that is not locked', 00H
	ORG $+1
$SG170509 DB	'D', 00H
	ORG $+2
$SG169905 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG170516 DB	'D', 00H
	ORG $+2
$SG169906 DB	'ecpsvm_unlockpage1', 00H
	ORG $+1
$SG170527 DB	'D', 00H
	ORG $+2
$SG169907 DB	'ecpsvm.c', 00H
	ORG $+3
$SG170537 DB	'D', 00H
	ORG $+2
$SG169911 DB	'ULKPG now unlocked', 00H
	ORG $+1
$SG170546 DB	'D', 00H
	ORG $+2
$SG169913 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG170888 DB	'D', 00H
	ORG $+2
$SG169914 DB	'ecpsvm_unlockpage1', 00H
	ORG $+1
$SG170895 DB	'D', 00H
	ORG $+2
$SG169915 DB	'ecpsvm.c', 00H
	ORG $+3
$SG170905 DB	'D', 00H
	ORG $+2
$SG169917 DB	'ULKPG Page still locked. Count = %6.6X', 00H
	ORG $+1
$SG169920 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG170916 DB	'D', 00H
	ORG $+2
$SG169921 DB	'ecpsvm_unlockpage1', 00H
	ORG $+1
$SG170932 DB	'D', 00H
	ORG $+2
$SG169922 DB	'ecpsvm.c', 00H
	ORG $+3
$SG170940 DB	'D', 00H
	ORG $+2
$SG169956 DB	'CPASSTS ULKPG ECPS:VM Disabled in configuration', 00H
$SG169958 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG170954 DB	'D', 00H
	ORG $+2
$SG169959 DB	's370_ecpsvm_unlock_page', 00H
$SG169960 DB	'ecpsvm.c', 00H
	ORG $+3
$SG170967 DB	'D', 00H
	ORG $+2
$SG169964 DB	'CPASSTS ULKPG Disabled by command', 00H
	ORG $+2
$SG170974 DB	'D', 00H
	ORG $+2
$SG169966 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG170983 DB	'D', 00H
	ORG $+2
$SG169967 DB	's370_ecpsvm_unlock_page', 00H
$SG169968 DB	'ecpsvm.c', 00H
	ORG $+3
$SG170991 DB	'D', 00H
	ORG $+2
$SG169971 DB	'ULKPG called', 00H
	ORG $+3
$SG169973 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG170999 DB	'D', 00H
	ORG $+2
$SG169974 DB	's370_ecpsvm_unlock_page', 00H
$SG169975 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171007 DB	'D', 00H
	ORG $+2
$SG170045 DB	'DFCCW - Exit CCWTIC1', 00H
	ORG $+3
$SG170047 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171015 DB	'D', 00H
	ORG $+2
$SG170048 DB	'ecpsvm_do_deccw1', 00H
	ORG $+3
$SG171025 DB	'D', 00H
	ORG $+2
$SG170049 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171033 DB	'D', 00H
	ORG $+2
$SG170057 DB	'DFCCW - Exit ADDRINVAL', 00H
	ORG $+1
$SG170059 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171040 DB	'D', 00H
	ORG $+2
$SG170060 DB	'ecpsvm_do_deccw1', 00H
	ORG $+3
$SG171049 DB	'D', 00H
	ORG $+2
$SG170061 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171066 DB	'D', 00H
	ORG $+2
$SG170069 DB	'DFCCW - Exit CCWBAD', 00H
$SG171087 DB	'D', 00H
	ORG $+2
$SG170071 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171093 DB	'W', 00H
	ORG $+2
$SG170072 DB	'ecpsvm_do_deccw1', 00H
	ORG $+3
$SG171105 DB	'D', 00H
	ORG $+2
$SG170073 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171126 DB	'D', 00H
	ORG $+2
$SG170078 DB	'DFCCW - Exit CCWTIC', 00H
$SG171133 DB	'D', 00H
	ORG $+2
$SG170080 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171148 DB	'D', 00H
	ORG $+2
$SG170081 DB	'ecpsvm_do_deccw1', 00H
	ORG $+3
$SG171155 DB	'D', 00H
	ORG $+2
$SG170082 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171163 DB	'D', 00H
	ORG $+2
$SG170087 DB	'DFCCW - Complete', 00H
	ORG $+3
$SG171171 DB	'D', 00H
	ORG $+2
$SG170089 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171191 DB	0aH, 00H
	ORG $+2
$SG170090 DB	'ecpsvm_do_deccw1', 00H
	ORG $+3
$SG171195 DB	'D', 00H
	ORG $+2
$SG170091 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171201 DB	'D', 00H
	ORG $+2
$SG170132 DB	'CPASSTS DNCCW ECPS:VM Disabled in configuration', 00H
$SG170134 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171238 DB	'D', 00H
	ORG $+2
$SG170135 DB	's370_ecpsvm_decode_next_ccw', 00H
$SG171246 DB	'D', 00H
	ORG $+2
$SG170136 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171253 DB	'D', 00H
	ORG $+2
$SG170140 DB	'CPASSTS DNCCW Disabled by command', 00H
	ORG $+2
$SG171292 DB	'D', 00H
	ORG $+2
$SG170142 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171300 DB	'D', 00H
	ORG $+2
$SG170143 DB	's370_ecpsvm_decode_next_ccw', 00H
$SG171307 DB	'D', 00H
	ORG $+2
$SG170144 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171315 DB	'D', 00H
	ORG $+2
$SG170147 DB	'DNCCW called', 00H
	ORG $+3
$SG170149 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171321 DB	'D', 00H
	ORG $+2
$SG170150 DB	's370_ecpsvm_decode_next_ccw', 00H
$SG171361 DB	'D', 00H
	ORG $+2
$SG170151 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171369 DB	'D', 00H
	ORG $+2
$SG170154 DB	'DNCCW cant translate vaddr; back to CP', 00H
	ORG $+1
$SG170156 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171376 DB	'D', 00H
	ORG $+2
$SG170157 DB	's370_ecpsvm_decode_next_ccw', 00H
$SG171382 DB	'D', 00H
	ORG $+2
$SG170158 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171389 DB	'D', 00H
	ORG $+2
$SG170161 DB	'DNCCW - Exit CCWNROOM', 00H
	ORG $+2
$SG170163 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171432 DB	'D', 00H
	ORG $+2
$SG170164 DB	's370_ecpsvm_decode_next_ccw', 00H
$SG171440 DB	'D', 00H
	ORG $+2
$SG170165 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171447 DB	'D', 00H
	ORG $+2
$SG170275 DB	'CPASSTS FCCWS ECPS:VM Disabled in configuration', 00H
$SG170277 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171453 DB	'D', 00H
	ORG $+2
$SG170278 DB	's370_ecpsvm_free_ccwstor', 00H
	ORG $+3
$SG171460 DB	'D', 00H
	ORG $+2
$SG170279 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171524 DB	'D', 00H
	ORG $+2
$SG170283 DB	'CPASSTS FCCWS Disabled by command', 00H
	ORG $+2
$SG171532 DB	'D', 00H
	ORG $+2
$SG170285 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171539 DB	'D', 00H
	ORG $+2
$SG170286 DB	's370_ecpsvm_free_ccwstor', 00H
	ORG $+3
$SG171546 DB	'D', 00H
	ORG $+2
$SG170287 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171587 DB	'D', 00H
	ORG $+2
$SG170290 DB	'FCCWS called', 00H
	ORG $+3
$SG170292 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171595 DB	'D', 00H
	ORG $+2
$SG170293 DB	's370_ecpsvm_free_ccwstor', 00H
	ORG $+3
$SG171602 DB	'D', 00H
	ORG $+2
$SG170294 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171636 DB	'D', 00H
	ORG $+2
$SG170356 DB	'SCNVU Virtual Device %4.4X has no VCHAN block', 00H
	ORG $+2
$SG170359 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171644 DB	'D', 00H
	ORG $+2
$SG170360 DB	'ecpsvm_do_scnvu', 00H
$SG170361 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171651 DB	'D', 00H
	ORG $+2
$SG170364 DB	'SCNVU Virtual Device %4.4X has no VCU block', 00H
$SG171658 DB	'D', 00H
	ORG $+2
$SG170367 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171676 DB	'D', 00H
	ORG $+2
$SG170368 DB	'ecpsvm_do_scnvu', 00H
$SG170369 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171683 DB	'D', 00H
	ORG $+2
$SG170372 DB	'SCNVU Virtual Device %4.4X has no VDEV block', 00H
	ORG $+3
$SG170375 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171690 DB	'D', 00H
	ORG $+2
$SG170376 DB	'ecpsvm_do_scnvu', 00H
$SG170377 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171697 DB	'D', 00H
	ORG $+2
$SG170379 DB	'SCNVU %4.4X : VCH = %8.8X, VCU = %8.8X, VDEV = %8.8X', 00H
	ORG $+3
$SG170382 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171704 DB	'D', 00H
	ORG $+2
$SG170383 DB	'ecpsvm_do_scnvu', 00H
$SG170384 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171711 DB	'D', 00H
	ORG $+2
$SG170418 DB	'CPASSTS SCNVU ECPS:VM Disabled in configuration', 00H
$SG170420 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171772 DB	'D', 00H
	ORG $+2
$SG170421 DB	's370_ecpsvm_locate_vblock', 00H
	ORG $+2
$SG171781 DB	'D', 00H
	ORG $+2
$SG170422 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171794 DB	'D', 00H
	ORG $+2
$SG170426 DB	'CPASSTS SCNVU Disabled by command', 00H
	ORG $+2
$SG171803 DB	'D', 00H
	ORG $+2
$SG170428 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171810 DB	'D', 00H
	ORG $+2
$SG170429 DB	's370_ecpsvm_locate_vblock', 00H
	ORG $+2
$SG171817 DB	'D', 00H
	ORG $+2
$SG170430 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171832 DB	'D', 00H
	ORG $+2
$SG170433 DB	'SCNVU called', 00H
	ORG $+3
$SG170435 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171838 DB	'D', 00H
	ORG $+2
$SG170436 DB	's370_ecpsvm_locate_vblock', 00H
	ORG $+2
$SG171957 DB	'D', 00H
	ORG $+2
$SG170437 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171965 DB	'D', 00H
	ORG $+2
$SG170485 DB	'DISP1 Data list = %6.6X VM=%6.6X', 00H
	ORG $+3
$SG171972 DB	'D', 00H
	ORG $+2
$SG170488 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG171980 DB	'D', 00H
	ORG $+2
$SG170489 DB	'ecpsvm_do_disp1', 00H
$SG170490 DB	'ecpsvm.c', 00H
	ORG $+3
$SG171990 DB	'D', 00H
	ORG $+2
$SG170494 DB	'DISP1 Quick Check complete', 00H
	ORG $+1
$SG171997 DB	'D', 00H
	ORG $+2
$SG170496 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172006 DB	'D', 00H
	ORG $+2
$SG170497 DB	'ecpsvm_do_disp1', 00H
$SG170498 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172013 DB	'D', 00H
	ORG $+2
$SG170500 DB	'DISP1 Quick Check failed : %8.8X != %8.8X', 00H
	ORG $+2
$SG172023 DB	'D', 00H
	ORG $+2
$SG170503 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172031 DB	'D', 00H
	ORG $+2
$SG170504 DB	'ecpsvm_do_disp1', 00H
$SG170505 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172041 DB	'D', 00H
	ORG $+2
$SG170508 DB	'DISP1 VMB is SYSTEM VMBLOCK', 00H
$SG172051 DB	'D', 00H
	ORG $+2
$SG170510 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172059 DB	'D', 00H
	ORG $+2
$SG170511 DB	'ecpsvm_do_disp1', 00H
$SG170512 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172066 DB	'D', 00H
	ORG $+2
$SG170515 DB	'DISP1 Call SCHEDULE because VMKILL not set', 00H
	ORG $+1
$SG172074 DB	'D', 00H
	ORG $+2
$SG170517 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172081 DB	'D', 00H
	ORG $+2
$SG170518 DB	'ecpsvm_do_disp1', 00H
$SG170519 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172088 DB	'D', 00H
	ORG $+2
$SG170526 DB	'DISP1 Call SCHEDULE because VMKILL & VMCF & !VMCFREAD se'
	DB	't', 00H
	ORG $+2
$SG172098 DB	'D', 00H
	ORG $+2
$SG170528 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172113 DB	'D', 00H
	ORG $+2
$SG170529 DB	'ecpsvm_do_disp1', 00H
$SG170530 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172123 DB	'D', 00H
	ORG $+2
$SG170536 DB	'DISP1 Continue because already logging off', 00H
	ORG $+1
$SG172132 DB	'D', 00H
	ORG $+2
$SG170538 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172186 DB	'D', 00H
	ORG $+2
$SG170539 DB	'ecpsvm_do_disp1', 00H
$SG170540 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172194 DB	'D', 00H
	ORG $+2
$SG170545 DB	'DISP1 : Call USOFF', 00H
	ORG $+1
$SG172201 DB	'D', 00H
	ORG $+2
$SG170547 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172208 DB	'D', 00H
	ORG $+2
$SG170548 DB	'ecpsvm_do_disp1', 00H
$SG170549 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172215 DB	'D', 00H
	ORG $+2
$SG170886 DB	'DISP2 Data list=%6.6X VM=%6.6X', 00H
	ORG $+1
$SG170889 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172225 DB	'D', 00H
	ORG $+2
$SG170890 DB	'ecpsvm_do_disp2', 00H
$SG170891 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172234 DB	'D', 00H
	ORG $+2
$SG170894 DB	'DISP2 Exit 8 : System extending', 00H
$SG170896 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172241 DB	'D', 00H
	ORG $+2
$SG170897 DB	'ecpsvm_do_disp2', 00H
$SG170898 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172428 DB	'D', 00H
	ORG $+2
$SG170904 DB	'DISP2 Exit 8 : MCH Recovery', 00H
$SG172436 DB	'D', 00H
	ORG $+2
$SG170906 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172443 DB	'D', 00H
	ORG $+2
$SG170907 DB	'ecpsvm_do_disp2', 00H
$SG170908 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172450 DB	'D', 00H
	ORG $+2
$SG170914 DB	'DISP2 TRQ/IOB @ %6.6X Exit being routed', 00H
$SG170917 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172460 DB	'D', 00H
	ORG $+2
$SG170918 DB	'ecpsvm_do_disp2', 00H
$SG170919 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172471 DB	'D', 00H
	ORG $+2
$SG170920 DB	'ecpsvm.c:1290', 00H
	ORG $+2
$SG170925 DB	'ecpsvm.c:1290', 00H
	ORG $+2
$SG170930 DB	'DISP2 TRQ/IOB @ %6.6X IA = %6.6X', 00H
	ORG $+3
$SG172479 DB	'D', 00H
	ORG $+2
$SG170933 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172490 DB	'D', 00H
	ORG $+2
$SG170934 DB	'ecpsvm_do_disp2', 00H
$SG170935 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172500 DB	'D', 00H
	ORG $+2
$SG170938 DB	'DISP2 CPEXBLOK Exit being routed CPEX=%6.6X', 00H
$SG172510 DB	'D', 00H
	ORG $+2
$SG170941 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172520 DB	'D', 00H
	ORG $+2
$SG170942 DB	'ecpsvm_do_disp2', 00H
$SG170943 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172530 DB	'D', 00H
	ORG $+2
$SG170944 DB	'ecpsvm.c:1318', 00H
	ORG $+2
$SG170949 DB	'ecpsvm.c:1318', 00H
	ORG $+2
$SG170952 DB	'DISP2 CPEXBLOK CPEX=%6.6X Fret Failed', 00H
	ORG $+2
$SG170955 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172540 DB	'D', 00H
	ORG $+2
$SG170956 DB	'ecpsvm_do_disp2', 00H
$SG170957 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172550 DB	'D', 00H
	ORG $+2
$SG170965 DB	'DISP2 CPEXBLOK CPEX=%6.6X IA=%6.6X', 00H
	ORG $+1
$SG172561 DB	'D', 00H
	ORG $+2
$SG170968 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172571 DB	'D', 00H
	ORG $+2
$SG170969 DB	'ecpsvm_do_disp2', 00H
$SG170970 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172581 DB	'D', 00H
	ORG $+2
$SG170973 DB	'DISP2 Exit 24 : CPSHRLK Set in CPSTAT2', 00H
	ORG $+1
$SG170975 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172591 DB	'D', 00H
	ORG $+2
$SG170976 DB	'ecpsvm_do_disp2', 00H
$SG170977 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172602 DB	'D', 00H
	ORG $+2
$SG170982 DB	'DISP2 : Scanning Scheduler IN-Queue', 00H
$SG172612 DB	'D', 00H
	ORG $+2
$SG170984 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172670 DB	'D', 00H
	ORG $+2
$SG170985 DB	'ecpsvm_do_disp2', 00H
$SG170986 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172678 DB	'D', 00H
	ORG $+2
$SG170989 DB	'DISP2 : VMB @ %6.6X Not eligible : User in virtual PSW w'
	DB	'ait', 00H
$SG172685 DB	'D', 00H
	ORG $+2
$SG170992 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172725 DB	'D', 00H
	ORG $+2
$SG170993 DB	'ecpsvm_do_disp2', 00H
$SG170994 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172733 DB	'D', 00H
	ORG $+2
$SG170997 DB	'DISP2 : VMB @ %6.6X Not eligible : VMRUN not set', 00H
	ORG $+3
$SG172740 DB	'D', 00H
	ORG $+2
$SG171000 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172802 DB	'D', 00H
	ORG $+2
$SG171001 DB	'ecpsvm_do_disp2', 00H
$SG171002 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172810 DB	'D', 00H
	ORG $+2
$SG171005 DB	'DISP2 : VMB @ %6.6X Not eligible : VMCPWAIT set', 00H
$SG171008 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172817 DB	'D', 00H
	ORG $+2
$SG171009 DB	'ecpsvm_do_disp2', 00H
$SG171010 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172824 DB	'D', 00H
	ORG $+2
$SG171013 DB	'DISP2 : Exit 20 : VMB @ %6.6X Has VMNOECPS Set to %2.2X', 00H
$SG171016 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172842 DB	'D', 00H
	ORG $+2
$SG171017 DB	'ecpsvm_do_disp2', 00H
$SG171018 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172905 DB	'D', 00H
	ORG $+2
$SG171023 DB	'DISP2 : VMB @ %6.6X Will now be dispatched', 00H
	ORG $+1
$SG172913 DB	'D', 00H
	ORG $+2
$SG171026 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172920 DB	'D', 00H
	ORG $+2
$SG171027 DB	'ecpsvm_do_disp2', 00H
$SG171028 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172977 DB	'D', 00H
	ORG $+2
$SG171031 DB	'DISP2 : User switch from %6.6X to %6.6X', 00H
$SG171034 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172985 DB	'D', 00H
	ORG $+2
$SG171035 DB	'ecpsvm_do_disp2', 00H
$SG171036 DB	'ecpsvm.c', 00H
	ORG $+3
$SG172992 DB	'D', 00H
	ORG $+2
$SG171038 DB	'DISP2 : RUNU=%6.6X, LASTU=%6.6X', 00H
$SG171041 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG172999 DB	'D', 00H
	ORG $+2
$SG171042 DB	'ecpsvm_do_disp2', 00H
$SG171043 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173007 DB	'D', 00H
	ORG $+2
$SG171047 DB	'DISP2 : Exit 16 : LASTU=%6.6X has shared sys & LCSHPG no'
	DB	't impl', 00H
	ORG $+1
$SG171050 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173015 DB	'D', 00H
	ORG $+2
$SG171051 DB	'ecpsvm_do_disp2', 00H
$SG171052 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173022 DB	'D', 00H
	ORG $+2
$SG171053 DB	'ecpsvm.c:1426', 00H
	ORG $+2
$SG171058 DB	'ecpsvm.c:1426', 00H
	ORG $+2
$SG171065 DB	'DISP2 : Restarting Time Slice', 00H
	ORG $+2
$SG171067 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173029 DB	'D', 00H
	ORG $+2
$SG171068 DB	'ecpsvm_do_disp2', 00H
$SG171069 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173039 DB	'D', 00H
	ORG $+2
$SG171071 DB	'ecpsvm.c:1446', 00H
	ORG $+2
$SG171076 DB	'ecpsvm.c:1446', 00H
	ORG $+2
$SG171085 DB	'DISP2 : VMB @ %6.6X has ECMODE ON', 00H
	ORG $+2
$SG173069 DB	'D', 00H
	ORG $+2
$SG171088 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173076 DB	'D', 00H
	ORG $+2
$SG171089 DB	'ecpsvm_do_disp2', 00H
$SG171090 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173085 DB	'D', 00H
	ORG $+2
$SG171094 DB	'HHC01700%s Abend condition detected in DISP2 instruction'
	DB	0aH, 00H
	ORG $+2
$SG173092 DB	'D', 00H
	ORG $+2
$SG171095 DB	'ecpsvm_do_disp2', 00H
$SG171096 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173099 DB	'D', 00H
	ORG $+2
$SG171103 DB	'DISP2 : VMB @ %6.6X Refusing to simulate DMKVATAB', 00H
	ORG $+2
$SG173106 DB	'D', 00H
	ORG $+2
$SG171106 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173151 DB	'D', 00H
	ORG $+2
$SG171107 DB	'ecpsvm_do_disp2', 00H
$SG171108 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173159 DB	'D', 00H
	ORG $+2
$SG171125 DB	'DISP2 : PER ON', 00H
	ORG $+1
$SG171127 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173166 DB	'D', 00H
	ORG $+2
$SG171128 DB	'ecpsvm_do_disp2', 00H
$SG171129 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173200 DB	'D', 00H
	ORG $+2
$SG171132 DB	'DISP2 : Purging TLB', 00H
$SG173208 DB	'D', 00H
	ORG $+2
$SG171134 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173215 DB	'D', 00H
	ORG $+2
$SG171135 DB	'ecpsvm_do_disp2', 00H
$SG171136 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173262 DB	'D', 00H
	ORG $+2
$SG171137 DB	'ecpsvm.c:1686', 00H
	ORG $+2
$SG171142 DB	'ecpsvm.c:1686', 00H
	ORG $+2
$SG171145 DB	'DISP2 : Entry Real PSW=', 00H
$SG171149 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173270 DB	'D', 00H
	ORG $+2
$SG171150 DB	'ecpsvm_do_disp2', 00H
$SG171151 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173280 DB	'D', 00H
	ORG $+2
$SG171153 DB	'DISP2 : VMB @ %6.6X Now being dispatched', 00H
	ORG $+3
$SG173287 DB	'D', 00H
	ORG $+2
$SG171156 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173294 DB	'D', 00H
	ORG $+2
$SG171157 DB	'ecpsvm_do_disp2', 00H
$SG171158 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173302 DB	'D', 00H
	ORG $+2
$SG171160 DB	'DISP2 : Real PSW=', 00H
	ORG $+2
$SG173309 DB	'D', 00H
	ORG $+2
$SG171164 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173377 DB	'D', 00H
	ORG $+2
$SG171165 DB	'ecpsvm_do_disp2', 00H
$SG171166 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173384 DB	'D', 00H
	ORG $+2
$SG171168 DB	'DISP2 : Virtual PSW=', 00H
	ORG $+3
$SG171172 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173391 DB	'D', 00H
	ORG $+2
$SG171173 DB	'ecpsvm_do_disp2', 00H
$SG171174 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173398 DB	'D', 00H
	ORG $+2
$SG171187 DB	'DISP2 - Dispatch...', 0aH, 00H
	ORG $+3
$SG171189 DB	'HHC90000D ', 00H
	ORG $+1
$SG173406 DB	'D', 00H
	ORG $+2
$SG171193 DB	'HHC90000D ', 00H
	ORG $+1
$SG173413 DB	'D', 00H
	ORG $+2
$SG171196 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173420 DB	'D', 00H
	ORG $+2
$SG171197 DB	'ecpsvm_do_disp2', 00H
$SG171198 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173428 DB	' PSW=', 00H
	ORG $+2
$SG173431 DB	'D', 00H
	ORG $+2
$SG171200 DB	'DISP2 : Nothing to dispatch - IDLEECPS', 00H
	ORG $+1
$SG171202 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173438 DB	'D', 00H
	ORG $+2
$SG171203 DB	'ecpsvm_do_disp2', 00H
$SG171204 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173446 DB	'D', 00H
	ORG $+2
$SG171237 DB	'CPASSTS DISP1 ECPS:VM Disabled in configuration', 00H
$SG171239 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173457 DB	'D', 00H
	ORG $+2
$SG171240 DB	's370_ecpsvm_disp1', 00H
	ORG $+2
$SG173465 DB	'D', 00H
	ORG $+2
$SG171241 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173473 DB	'D', 00H
	ORG $+2
$SG171245 DB	'CPASSTS DISP1 Disabled by command', 00H
	ORG $+2
$SG173502 DB	'D', 00H
	ORG $+2
$SG171247 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173509 DB	'D', 00H
	ORG $+2
$SG171248 DB	's370_ecpsvm_disp1', 00H
	ORG $+2
$SG173516 DB	'D', 00H
	ORG $+2
$SG171249 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173549 DB	'D', 00H
	ORG $+2
$SG171252 DB	'DISP1 called', 00H
	ORG $+3
$SG171254 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173556 DB	'D', 00H
	ORG $+2
$SG171255 DB	's370_ecpsvm_disp1', 00H
	ORG $+2
$SG173563 DB	'D', 00H
	ORG $+2
$SG171256 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173570 DB	'D', 00H
	ORG $+2
$SG171290 DB	'Tranbring : LRA cc = %d', 00H
$SG171293 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173577 DB	'D', 00H
	ORG $+2
$SG171294 DB	'ecpsvm_tranbrng', 00H
$SG171295 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173585 DB	'D', 00H
	ORG $+2
$SG171298 DB	'Page not shared - OK %d', 00H
$SG171301 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173592 DB	'D', 00H
	ORG $+2
$SG171302 DB	'ecpsvm_tranbrng', 00H
$SG171303 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173684 DB	'D', 00H
	ORG $+2
$SG171305 DB	'Checking 2K Storage keys @%16.16llX & %16.16llX', 00H
$SG171308 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173691 DB	'D', 00H
	ORG $+2
$SG171309 DB	'ecpsvm_tranbrng', 00H
$SG171310 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173698 DB	'D', 00H
	ORG $+2
$SG171314 DB	'Page shared and changed', 00H
$SG171316 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173705 DB	'D', 00H
	ORG $+2
$SG171317 DB	'ecpsvm_tranbrng', 00H
$SG171318 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173713 DB	'D', 00H
	ORG $+2
$SG171320 DB	'Page shared but not changed', 00H
$SG173720 DB	'D', 00H
	ORG $+2
$SG171322 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173727 DB	'D', 00H
	ORG $+2
$SG171323 DB	'ecpsvm_tranbrng', 00H
$SG171324 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173735 DB	' PSW=', 00H
	ORG $+2
$SG173738 DB	'D', 00H
	ORG $+2
$SG171360 DB	'CPASSTS TRBRG ECPS:VM Disabled in configuration', 00H
$SG171362 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173745 DB	'D', 00H
	ORG $+2
$SG171363 DB	's370_ecpsvm_tpage', 00H
	ORG $+2
$SG173754 DB	'D', 00H
	ORG $+2
$SG171364 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173766 DB	'D', 00H
	ORG $+2
$SG171368 DB	'CPASSTS TRBRG Disabled by command', 00H
	ORG $+2
$SG173773 DB	'D', 00H
	ORG $+2
$SG171370 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173784 DB	'D', 00H
	ORG $+2
$SG171371 DB	's370_ecpsvm_tpage', 00H
	ORG $+2
$SG173797 DB	'D', 00H
	ORG $+2
$SG171372 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173868 DB	'D', 00H
	ORG $+2
$SG171375 DB	'TRBRG called', 00H
	ORG $+3
$SG171377 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173875 DB	'D', 00H
	ORG $+2
$SG171378 DB	's370_ecpsvm_tpage', 00H
	ORG $+2
$SG173882 DB	'D', 00H
	ORG $+2
$SG171379 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173889 DB	'D', 00H
	ORG $+2
$SG171381 DB	'TRANBRNG', 00H
	ORG $+3
$SG173897 DB	'D', 00H
	ORG $+2
$SG171383 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173904 DB	'D', 00H
	ORG $+2
$SG171384 DB	's370_ecpsvm_tpage', 00H
	ORG $+2
$SG173911 DB	'D', 00H
	ORG $+2
$SG171385 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173919 DB	' PSW=', 00H
	ORG $+2
$SG173922 DB	'D', 00H
	ORG $+2
$SG171388 DB	'TRANBRNG - Back to CP', 00H
	ORG $+2
$SG171390 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173929 DB	'D', 00H
	ORG $+2
$SG171391 DB	's370_ecpsvm_tpage', 00H
	ORG $+2
$SG173937 DB	'D', 00H
	ORG $+2
$SG171392 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173945 DB	'D', 00H
	ORG $+2
$SG171431 DB	'CPASSTS TRLOK ECPS:VM Disabled in configuration', 00H
$SG171433 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG173957 DB	'D', 00H
	ORG $+2
$SG171434 DB	's370_ecpsvm_tpage_lock', 00H
	ORG $+1
$SG171435 DB	'ecpsvm.c', 00H
	ORG $+3
$SG173965 DB	'D', 00H
	ORG $+2
$SG171439 DB	'CPASSTS TRLOK Disabled by command', 00H
	ORG $+2
$SG174010 DB	'D', 00H
	ORG $+2
$SG171441 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174017 DB	'D', 00H
	ORG $+2
$SG171442 DB	's370_ecpsvm_tpage_lock', 00H
	ORG $+1
$SG171443 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174024 DB	'D', 00H
	ORG $+2
$SG171446 DB	'TRLOK called', 00H
	ORG $+3
$SG171448 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174031 DB	'D', 00H
	ORG $+2
$SG171449 DB	's370_ecpsvm_tpage_lock', 00H
	ORG $+1
$SG171450 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174039 DB	'D', 00H
	ORG $+2
$SG171452 DB	'TRANLOCK', 00H
	ORG $+3
$SG174046 DB	'D', 00H
	ORG $+2
$SG171454 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174053 DB	'D', 00H
	ORG $+2
$SG171455 DB	's370_ecpsvm_tpage_lock', 00H
	ORG $+1
$SG171456 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174061 DB	' PSW=', 00H
	ORG $+2
$SG174064 DB	'D', 00H
	ORG $+2
$SG171459 DB	'TRANLOCK - Back to CP', 00H
	ORG $+2
$SG171461 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174131 DB	'D', 00H
	ORG $+2
$SG171462 DB	's370_ecpsvm_tpage_lock', 00H
	ORG $+1
$SG171463 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174138 DB	'D', 00H
	ORG $+2
$SG171523 DB	'CPASSTS VIST ECPS:VM Disabled in configuration', 00H
	ORG $+1
$SG171525 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174145 DB	'D', 00H
	ORG $+2
$SG171526 DB	's370_ecpsvm_inval_segtab', 00H
	ORG $+3
$SG174152 DB	'D', 00H
	ORG $+2
$SG171527 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174160 DB	'D', 00H
	ORG $+2
$SG171531 DB	'CPASSTS VIST Disabled by command', 00H
	ORG $+3
$SG174167 DB	'D', 00H
	ORG $+2
$SG171533 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174174 DB	'D', 00H
	ORG $+2
$SG171534 DB	's370_ecpsvm_inval_segtab', 00H
	ORG $+3
$SG174182 DB	' PSW=', 00H
	ORG $+2
$SG174185 DB	'D', 00H
	ORG $+2
$SG171535 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174192 DB	'D', 00H
	ORG $+2
$SG171538 DB	'VIST called', 00H
$SG174200 DB	'D', 00H
	ORG $+2
$SG171540 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174211 DB	'D', 00H
	ORG $+2
$SG171541 DB	's370_ecpsvm_inval_segtab', 00H
	ORG $+3
$SG174219 DB	'D', 00H
	ORG $+2
$SG171542 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174227 DB	'D', 00H
	ORG $+2
$SG171544 DB	'VIST  : Seg table addr = %x,  len = %x', 00H
	ORG $+1
$SG171547 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174294 DB	'D', 00H
	ORG $+2
$SG171548 DB	's370_ecpsvm_inval_segtab', 00H
	ORG $+3
$SG174301 DB	'D', 00H
	ORG $+2
$SG171549 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174308 DB	'D', 00H
	ORG $+2
$SG171586 DB	'CPASSTS VIPT ECPS:VM Disabled in configuration', 00H
	ORG $+1
$SG171588 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174315 DB	'D', 00H
	ORG $+2
$SG171589 DB	's370_ecpsvm_inval_ptable', 00H
	ORG $+3
$SG174323 DB	'D', 00H
	ORG $+2
$SG171590 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174330 DB	'D', 00H
	ORG $+2
$SG171594 DB	'CPASSTS VIPT Disabled by command', 00H
	ORG $+3
$SG174337 DB	'D', 00H
	ORG $+2
$SG171596 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174348 DB	'D', 00H
	ORG $+2
$SG171597 DB	's370_ecpsvm_inval_ptable', 00H
	ORG $+3
$SG174345 DB	' PSW=', 00H
	ORG $+2
$SG174355 DB	'D', 00H
	ORG $+2
$SG171598 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174363 DB	'D', 00H
	ORG $+2
$SG171601 DB	'VIPT called', 00H
$SG174374 DB	'D', 00H
	ORG $+2
$SG171603 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174382 DB	'D', 00H
	ORG $+2
$SG171604 DB	's370_ecpsvm_inval_ptable', 00H
	ORG $+3
$SG174390 DB	'D', 00H
	ORG $+2
$SG171605 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174447 DB	'D', 00H
	ORG $+2
$SG171635 DB	'CPASSTS DFCCW ECPS:VM Disabled in configuration', 00H
$SG171637 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174454 DB	'D', 00H
	ORG $+2
$SG171638 DB	's370_ecpsvm_decode_first_ccw', 00H
	ORG $+3
$SG171639 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174461 DB	'D', 00H
	ORG $+2
$SG171643 DB	'CPASSTS DFCCW Disabled by command', 00H
	ORG $+2
$SG174468 DB	'D', 00H
	ORG $+2
$SG171645 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174476 DB	'D', 00H
	ORG $+2
$SG171646 DB	's370_ecpsvm_decode_first_ccw', 00H
	ORG $+3
$SG171647 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174483 DB	'D', 00H
	ORG $+2
$SG171650 DB	'DFCCW called', 00H
	ORG $+3
$SG171652 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174490 DB	'D', 00H
	ORG $+2
$SG171653 DB	's370_ecpsvm_decode_first_ccw', 00H
	ORG $+3
$SG171654 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174498 DB	' PSW=', 00H
	ORG $+2
$SG174501 DB	'D', 00H
	ORG $+2
$SG171657 DB	'DFCCW cant translate vaddr; back to CP', 00H
	ORG $+1
$SG171659 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174508 DB	'D', 00H
	ORG $+2
$SG171660 DB	's370_ecpsvm_decode_first_ccw', 00H
	ORG $+3
$SG171661 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174516 DB	'D', 00H
	ORG $+2
$SG171674 DB	'INCPROBT Entry : VMBLOK @ %8.8X', 00H
$SG171677 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174528 DB	'D', 00H
	ORG $+2
$SG171678 DB	'ecpsvm_disp_incprobt', 00H
	ORG $+3
$SG171679 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174601 DB	'D', 00H
	ORG $+2
$SG171681 DB	'INCPROBT Entry : VMTMOUTQ = %16.16llx', 00H
	ORG $+2
$SG171684 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174608 DB	'D', 00H
	ORG $+2
$SG171685 DB	'ecpsvm_disp_incprobt', 00H
	ORG $+3
$SG171686 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174615 DB	'D', 00H
	ORG $+2
$SG171688 DB	'INCPROBT Entry : PROBSTRT = %16.16llx', 00H
	ORG $+2
$SG171691 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174622 DB	'D', 00H
	ORG $+2
$SG171692 DB	'ecpsvm_disp_incprobt', 00H
	ORG $+3
$SG171693 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174630 DB	'D', 00H
	ORG $+2
$SG171696 DB	'INCPROBT Already performed', 00H
	ORG $+1
$SG174637 DB	'D', 00H
	ORG $+2
$SG171698 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174644 DB	'D', 00H
	ORG $+2
$SG171699 DB	'ecpsvm_disp_incprobt', 00H
	ORG $+3
$SG171700 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174652 DB	' PSW=', 00H
	ORG $+2
$SG174655 DB	'D', 00H
	ORG $+2
$SG171702 DB	'INCPROBT TSPENT = %16.16llx', 00H
$SG174662 DB	'D', 00H
	ORG $+2
$SG171705 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174670 DB	'D', 00H
	ORG $+2
$SG171706 DB	'ecpsvm_disp_incprobt', 00H
	ORG $+3
$SG171707 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174682 DB	'D', 00H
	ORG $+2
$SG171709 DB	'INCPROBT NEW PROBTIME = %16.16llx', 00H
	ORG $+2
$SG174691 DB	'D', 00H
	ORG $+2
$SG171712 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174700 DB	'D', 00H
	ORG $+2
$SG171713 DB	'ecpsvm_disp_incprobt', 00H
	ORG $+3
$SG171714 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174708 DB	'D', 00H
	ORG $+2
$SG171770 DB	'RUNTIME Entry : VMBLOK @ %8.8X', 00H
	ORG $+1
$SG171773 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174718 DB	'D', 00H
	ORG $+2
$SG171774 DB	'ecpsvm_disp_runtime', 00H
$SG174729 DB	'D', 00H
	ORG $+2
$SG171775 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174737 DB	'D', 00H
	ORG $+2
$SG171779 DB	'RUNTIME Switching to RUNUSER VMBLOK @ %8.8X', 00H
$SG174747 DB	'D', 00H
	ORG $+2
$SG171782 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174760 DB	'D', 00H
	ORG $+2
$SG171783 DB	'ecpsvm_disp_runtime', 00H
$SG174805 DB	'D', 00H
	ORG $+2
$SG171784 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174812 DB	'D', 00H
	ORG $+2
$SG171785 DB	'ecpsvm.c:2081', 00H
	ORG $+2
$SG171790 DB	'ecpsvm.c:2081', 00H
	ORG $+2
$SG171792 DB	'RUNTIME : VMBLOK @ %8.8X', 00H
	ORG $+3
$SG174819 DB	'D', 00H
	ORG $+2
$SG171795 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174826 DB	'D', 00H
	ORG $+2
$SG171796 DB	'ecpsvm_disp_runtime', 00H
$SG174834 DB	'D', 00H
	ORG $+2
$SG171797 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174841 DB	'D', 00H
	ORG $+2
$SG171802 DB	'RUNTIME : Complete - VTIMER Assist active', 00H
	ORG $+2
$SG174848 DB	'D', 00H
	ORG $+2
$SG171804 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174859 DB	'D', 00H
	ORG $+2
$SG171805 DB	'ecpsvm_disp_runtime', 00H
$SG174914 DB	'D', 00H
	ORG $+2
$SG171806 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174856 DB	' PSW=', 00H
	ORG $+2
$SG174921 DB	'D', 00H
	ORG $+2
$SG171809 DB	'RUNTIME : Complete - SET TIMER OFF', 00H
	ORG $+1
$SG174928 DB	'D', 00H
	ORG $+2
$SG171811 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174935 DB	'D', 00H
	ORG $+2
$SG171812 DB	'ecpsvm_disp_runtime', 00H
$SG174943 DB	'D', 00H
	ORG $+2
$SG171813 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174950 DB	'D', 00H
	ORG $+2
$SG171816 DB	'RUNTIME : Bad ITIMER - Taking Exit #32', 00H
	ORG $+1
$SG171818 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG174957 DB	'D', 00H
	ORG $+2
$SG171819 DB	'ecpsvm_disp_runtime', 00H
$SG174968 DB	'D', 00H
	ORG $+2
$SG171820 DB	'ecpsvm.c', 00H
	ORG $+3
$SG174965 DB	' PSW=', 00H
	ORG $+2
$SG175055 DB	'D', 00H
	ORG $+2
$SG171831 DB	'RUNTIME : Complete - Taking exit #8', 00H
$SG175062 DB	'D', 00H
	ORG $+2
$SG171833 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG175069 DB	'D', 00H
	ORG $+2
$SG171834 DB	'ecpsvm_disp_runtime', 00H
$SG175076 DB	'D', 00H
	ORG $+2
$SG171835 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175084 DB	'D', 00H
	ORG $+2
$SG171837 DB	'RUNTIME : Complete - ITIMER Updated', 00H
$SG175091 DB	'D', 00H
	ORG $+2
$SG171839 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG175098 DB	'D', 00H
	ORG $+2
$SG171840 DB	'ecpsvm_disp_runtime', 00H
$SG175109 DB	'D', 00H
	ORG $+2
$SG171841 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175106 DB	' PSW=', 00H
	ORG $+2
$SG175116 DB	'D', 00H
	ORG $+2
$SG171956 DB	'CPASSTS DISP0 ECPS:VM Disabled in configuration', 00H
$SG171958 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG175124 DB	'D', 00H
	ORG $+2
$SG171959 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+2
$SG175131 DB	'D', 00H
	ORG $+2
$SG171960 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175142 DB	'D', 00H
	ORG $+2
$SG171964 DB	'CPASSTS DISP0 Disabled by command', 00H
	ORG $+2
$SG175151 DB	'D', 00H
	ORG $+2
$SG171966 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG175159 DB	'D', 00H
	ORG $+2
$SG171967 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+2
$SG175167 DB	'D', 00H
	ORG $+2
$SG171968 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175174 DB	'D', 00H
	ORG $+2
$SG171971 DB	'DISP0 called', 00H
	ORG $+3
$SG171973 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG175182 DB	'D', 00H
	ORG $+2
$SG171974 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+2
$SG175190 DB	'D', 00H
	ORG $+2
$SG171975 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175198 DB	'D', 00H
	ORG $+2
$SG171979 DB	'DISP0 : CPRUN On', 00H
	ORG $+3
$SG175206 DB	'D', 00H
	ORG $+2
$SG171981 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG175214 DB	'D', 00H
	ORG $+2
$SG171982 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+2
$SG175222 DB	'D', 00H
	ORG $+2
$SG171983 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175229 DB	'D', 00H
	ORG $+2
$SG171989 DB	'DISP0 : I/O Old as XLATE on', 00H
$SG175237 DB	'D', 00H
	ORG $+2
$SG171991 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG175245 DB	'D', 00H
	ORG $+2
$SG171992 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+2
$SG175253 DB	'D', 00H
	ORG $+2
$SG171993 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175260 DB	'D', 00H
	ORG $+2
$SG171996 DB	'DISP0 : VMDSP on in VMBLOK - Clean status (Exit #36)', 00H
	ORG $+3
$SG171998 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG175294 DB	'*', 00H
	ORG $+2
$SG171999 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+2
$SG175297 DB	'-', 00H
	ORG $+2
$SG172000 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175299 DB	'%', 00H
	ORG $+2
$SG172005 DB	'DISP0 : CPRUN Off', 00H
	ORG $+2
$SG175301 DB	'+', 00H
	ORG $+2
$SG172007 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG175302 DB	'I', 00H
	ORG $+2
$SG172008 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+2
$SG175307 DB	'I', 00H
	ORG $+2
$SG172009 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175311 DB	'Total', 00H
	ORG $+2
$SG175312 DB	'I', 00H
	ORG $+2
$SG172012 DB	'DISP0 : CPWAIT On : Exit #4', 00H
$SG175316 DB	'I', 00H
	ORG $+2
$SG172014 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG175321 DB	'I', 00H
	ORG $+2
$SG172015 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+2
$SG175326 DB	'I', 00H
	ORG $+2
$SG172016 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175331 DB	'I', 00H
	ORG $+2
$SG172021 DB	'DISP0 : At UNSTACK : VMBLOK = %8.8X', 00H
$SG175355 DB	'I', 00H
	ORG $+2
$SG172024 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG175360 DB	'I', 00H
	ORG $+2
$SG172025 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+2
$SG175364 DB	'I', 00H
	ORG $+2
$SG172026 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175368 DB	'Ratio', 00H
	ORG $+2
$SG175369 DB	'Hits  ', 00H
	ORG $+1
$SG175372 DB	'I', 00H
	ORG $+2
$SG172029 DB	'DISP0 : VMRSTAT VMCPWAIT On (%2.2X) - Taking exit #12', 00H
	ORG $+2
$SG172032 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG175376 DB	'I', 00H
	ORG $+2
$SG172033 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+2
$SG175380 DB	'I', 00H
	ORG $+2
$SG172034 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175384 DB	'Ratio', 00H
	ORG $+2
$SG175385 DB	'Hits  ', 00H
	ORG $+1
$SG175388 DB	'I', 00H
	ORG $+2
$SG172040 DB	'DISP0 : PER/PPF Pending - Taking exit #16', 00H
	ORG $+2
$SG175392 DB	'I', 00H
	ORG $+2
$SG172042 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG175442 DB	'On', 00H
	ORG $+1
$SG172043 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+2
$SG175443 DB	'Off', 00H
$SG172044 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175445 DB	' ', 00H
	ORG $+2
$SG172049 DB	'DISP0 : Checking for EXT; Base VMPXINT=%8.8X', 00H
	ORG $+3
$SG172052 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG175446 DB	'I', 00H
	ORG $+2
$SG172053 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+2
$SG175452 DB	'I', 00H
	ORG $+2
$SG172054 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175458 DB	'I', 00H
	ORG $+2
$SG172057 DB	'DISP0 : VPSW HI = %8.8X', 00H
$SG172060 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG175464 DB	'I', 00H
	ORG $+2
$SG172061 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+2
$SG175463 DB	'Debug ', 00H
	ORG $+1
$SG175497 DB	'On', 00H
	ORG $+1
$SG172062 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175498 DB	'Off', 00H
$SG172065 DB	'DISP0 : PSW Enabled for EXT', 00H
$SG175503 DB	'I', 00H
	ORG $+2
$SG172067 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG175508 DB	'ALL', 00H
$SG172068 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+2
$SG175512 DB	'VMA', 00H
$SG172069 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175515 DB	'CPA', 00H
$SG172072 DB	'DISP0 : CR0 = %8.8X', 00H
$SG175521 DB	'I', 00H
	ORG $+2
$SG172075 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG175527 DB	'I', 00H
	ORG $+2
$SG172076 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+2
$SG175526 DB	'Debug ', 00H
	ORG $+1
$SG175531 DB	'I', 00H
	ORG $+2
$SG172077 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175566 DB	'I', 00H
	ORG $+2
$SG172079 DB	'DISP0 : XINTMASK =  %4.4X', 0aH, 00H
	ORG $+1
$SG175571 DB	'I', 00H
	ORG $+2
$SG172082 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG175576 DB	'I', 00H
	ORG $+2
$SG172083 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+2
$SG175581 DB	'W', 00H
	ORG $+2
$SG172084 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175585 DB	'I', 00H
	ORG $+2
$SG172087 DB	'DISP0 : EXT Hit - Taking exit #20', 00H
	ORG $+2
$SG175626 DB	'I', 00H
	ORG $+2
$SG172089 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG175639 DB	'E', 00H
	ORG $+2
$SG172090 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+2
$SG175643 DB	'I', 00H
	ORG $+2
$SG172091 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175668 DB	'I', 00H
	ORG $+2
$SG172096 DB	'DISP0 : Checking for I/O; VMIOINT=%8.8X', 00H
$SG172099 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG175673 DB	'E', 00H
	ORG $+2
$SG172100 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+2
$SG175678 DB	'E', 00H
	ORG $+2
$SG172101 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175682 DB	'I', 00H
	ORG $+2
$SG172112 DB	'DISP0 : I/O Hit - Taking exit #24', 00H
	ORG $+6
$SG172114 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172115 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+6
$SG172116 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172122 DB	'DISP0 : VWAIT - Taking exit #28', 00H
$SG172124 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172125 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+6
$SG172126 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172131 DB	'DISP0 : DISPATCH - Taking exit #0', 00H
	ORG $+6
$SG172133 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172134 DB	's370_ecpsvm_dispatch_main', 00H
	ORG $+6
$SG172135 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172185 DB	'CPASSTS SCNRU ECPS:VM Disabled in configuration', 00H
$SG172187 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172188 DB	's370_ecpsvm_locate_rblock', 00H
	ORG $+6
$SG172189 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172193 DB	'CPASSTS SCNRU Disabled by command', 00H
	ORG $+6
$SG172195 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172196 DB	's370_ecpsvm_locate_rblock', 00H
	ORG $+6
$SG172197 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172200 DB	'SCNRU called', 00H
	ORG $+3
$SG172202 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172203 DB	's370_ecpsvm_locate_rblock', 00H
	ORG $+6
$SG172204 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172206 DB	'ECPS:VM SCNRU called; RDEV=%4.4X ARIOCT=%6.6X', 00H
	ORG $+2
$SG172209 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172210 DB	's370_ecpsvm_locate_rblock', 00H
	ORG $+6
$SG172211 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172213 DB	'ECPS:VM SCNRU : RCH IX = %x', 00H
	ORG $+4
$SG172216 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172217 DB	's370_ecpsvm_locate_rblock', 00H
	ORG $+6
$SG172218 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172223 DB	'ECPS:VM SCNRU : RCU IX = %x', 00H
	ORG $+4
$SG172226 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172227 DB	's370_ecpsvm_locate_rblock', 00H
	ORG $+6
$SG172228 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172232 DB	'ECPS:VM SCNRU : RDV IX = %x', 00H
	ORG $+4
$SG172235 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172236 DB	's370_ecpsvm_locate_rblock', 00H
	ORG $+6
$SG172237 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172239 DB	'ECPS:VM SCNRU : RCH = %6.6X, RCU = %6.6X, RDV = %6.6X', 00H
	ORG $+2
$SG172242 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172243 DB	's370_ecpsvm_locate_rblock', 00H
	ORG $+6
$SG172244 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172427 DB	'CPASSTS CCWGN ECPS:VM Disabled in configuration', 00H
$SG172429 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172430 DB	's370_ecpsvm_comm_ccwproc', 00H
	ORG $+7
$SG172431 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172435 DB	'CPASSTS CCWGN Disabled by command', 00H
	ORG $+6
$SG172437 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172438 DB	's370_ecpsvm_comm_ccwproc', 00H
	ORG $+7
$SG172439 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172442 DB	'CCWGN called', 00H
	ORG $+3
$SG172444 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172445 DB	's370_ecpsvm_comm_ccwproc', 00H
	ORG $+7
$SG172446 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172449 DB	'CCWGN - Exit DWDIDAL', 00H
	ORG $+3
$SG172451 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172452 DB	's370_ecpsvm_comm_ccwproc', 00H
	ORG $+7
$SG172453 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172459 DB	'CCWGN - Exit CCWMANYF', 00H
	ORG $+2
$SG172461 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172462 DB	's370_ecpsvm_comm_ccwproc', 00H
	ORG $+7
$SG172463 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172470 DB	'CCWGN - Cant bring in the page; back to CP', 00H
	ORG $+5
$SG172472 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172473 DB	's370_ecpsvm_comm_ccwproc', 00H
	ORG $+7
$SG172474 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172478 DB	'CCWGN - Exit SHRDPAGE', 00H
	ORG $+2
$SG172480 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172481 DB	's370_ecpsvm_comm_ccwproc', 00H
	ORG $+7
$SG172482 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172489 DB	'CCWGN - Exit CCWNXT10', 00H
	ORG $+2
$SG172491 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172492 DB	's370_ecpsvm_comm_ccwproc', 00H
	ORG $+7
$SG172493 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172499 DB	'CCWGN - Exit CCWNXT12', 00H
	ORG $+2
$SG172501 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172502 DB	's370_ecpsvm_comm_ccwproc', 00H
	ORG $+7
$SG172503 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172509 DB	'CCWGN - Exit CCWNEXT', 00H
	ORG $+3
$SG172511 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172512 DB	's370_ecpsvm_comm_ccwproc', 00H
	ORG $+7
$SG172513 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172519 DB	'CCWGN - Exit CCWNEXT(2)', 00H
$SG172521 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172522 DB	's370_ecpsvm_comm_ccwproc', 00H
	ORG $+7
$SG172523 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172529 DB	'CCWGN - Exit CCWNEWV2', 00H
	ORG $+2
$SG172531 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172532 DB	's370_ecpsvm_comm_ccwproc', 00H
	ORG $+7
$SG172533 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172539 DB	'CCWGN - Exit TICSCAN', 00H
	ORG $+3
$SG172541 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172542 DB	's370_ecpsvm_comm_ccwproc', 00H
	ORG $+7
$SG172543 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172549 DB	'CCWGN - Exit CCWDIAL', 00H
	ORG $+3
$SG172551 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172552 DB	's370_ecpsvm_comm_ccwproc', 00H
	ORG $+7
$SG172553 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172560 DB	'CCWGN - Exit CCWEXIT', 00H
	ORG $+3
$SG172562 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172563 DB	's370_ecpsvm_comm_ccwproc', 00H
	ORG $+7
$SG172564 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172570 DB	'CCWGN - Exit CCWDIAL(2)', 00H
$SG172572 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172573 DB	's370_ecpsvm_comm_ccwproc', 00H
	ORG $+7
$SG172574 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172580 DB	'CCWGN - Exit CCWEXIT(2)', 00H
$SG172582 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172583 DB	's370_ecpsvm_comm_ccwproc', 00H
	ORG $+7
$SG172584 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172590 DB	'CCWGN - Exit ITSAREL', 00H
	ORG $+3
$SG172592 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172593 DB	's370_ecpsvm_comm_ccwproc', 00H
	ORG $+7
$SG172594 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172601 DB	'CCWGN - Exit CALLISM', 00H
	ORG $+3
$SG172603 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172604 DB	's370_ecpsvm_comm_ccwproc', 00H
	ORG $+7
$SG172605 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172611 DB	'CCWGN - Exit CALLISM(2)', 00H
$SG172613 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172614 DB	's370_ecpsvm_comm_ccwproc', 00H
	ORG $+7
$SG172615 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172669 DB	'CPASSTS UXCCW ECPS:VM Disabled in configuration', 00H
$SG172671 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172672 DB	's370_ecpsvm_unxlate_ccw', 00H
$SG172673 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172677 DB	'CPASSTS UXCCW Disabled by command', 00H
	ORG $+6
$SG172679 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172680 DB	's370_ecpsvm_unxlate_ccw', 00H
$SG172681 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172684 DB	'UXCCW called', 00H
	ORG $+3
$SG172686 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172687 DB	's370_ecpsvm_unxlate_ccw', 00H
$SG172688 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172724 DB	'CPASSTS DISP2 ECPS:VM Disabled in configuration', 00H
$SG172726 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172727 DB	's370_ecpsvm_disp2', 00H
	ORG $+6
$SG172728 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172732 DB	'CPASSTS DISP2 Disabled by command', 00H
	ORG $+6
$SG172734 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172735 DB	's370_ecpsvm_disp2', 00H
	ORG $+6
$SG172736 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172739 DB	'DISP2 called', 00H
	ORG $+3
$SG172741 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172742 DB	's370_ecpsvm_disp2', 00H
	ORG $+6
$SG172743 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172801 DB	'CPASSTS STEVL ECPS:VM Disabled in configuration', 00H
$SG172803 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172804 DB	's370_ecpsvm_store_level', 00H
$SG172805 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172809 DB	'CPASSTS STEVL Disabled by command', 00H
	ORG $+6
$SG172811 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172812 DB	's370_ecpsvm_store_level', 00H
$SG172813 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172816 DB	'STEVL called', 00H
	ORG $+3
$SG172818 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172819 DB	's370_ecpsvm_store_level', 00H
$SG172820 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172822 DB	'ECPS:VM STORE LEVEL %d called', 00H
	ORG $+2
$SG172825 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172826 DB	's370_ecpsvm_store_level', 00H
$SG172827 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172843 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172841 DB	'CP FREE/FRET trap detected; assist operational with trap'
	DB	' in effect', 00H
	ORG $+5
$SG172844 DB	's370_ecpsvm_store_level', 00H
$SG172845 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172904 DB	'CPASSTS LCSPG ECPS:VM Disabled in configuration', 00H
$SG172906 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172907 DB	's370_ecpsvm_loc_chgshrpg', 00H
	ORG $+7
$SG172908 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172912 DB	'CPASSTS LCSPG Disabled by command', 00H
	ORG $+6
$SG172914 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172915 DB	's370_ecpsvm_loc_chgshrpg', 00H
	ORG $+7
$SG172916 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172919 DB	'LCSPG called', 00H
	ORG $+3
$SG172921 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172922 DB	's370_ecpsvm_loc_chgshrpg', 00H
	ORG $+7
$SG172923 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172976 DB	'CPASSTS FREEX ECPS:VM Disabled in configuration', 00H
$SG172978 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172979 DB	's370_ecpsvm_extended_freex', 00H
	ORG $+5
$SG172980 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172984 DB	'CPASSTS FREEX Disabled by command', 00H
	ORG $+6
$SG172986 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172987 DB	's370_ecpsvm_extended_freex', 00H
	ORG $+5
$SG172988 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172991 DB	'FREEX called', 00H
	ORG $+3
$SG172993 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG172994 DB	's370_ecpsvm_extended_freex', 00H
	ORG $+5
$SG172995 DB	'ecpsvm.c', 00H
	ORG $+7
$SG172997 DB	'ECPS:VM FREEX DW = %4.4X', 00H
	ORG $+7
$SG173000 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173001 DB	's370_ecpsvm_extended_freex', 00H
	ORG $+5
$SG173002 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173005 DB	'MAXSIZE ADDR = %6.6X, SUBPOOL INDEX TABLE = %6.6X', 00H
	ORG $+6
$SG173008 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173009 DB	's370_ecpsvm_extended_freex', 00H
	ORG $+5
$SG173010 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173014 DB	'FREEX request beyond subpool capacity', 00H
	ORG $+2
$SG173016 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173017 DB	's370_ecpsvm_extended_freex', 00H
	ORG $+5
$SG173018 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173020 DB	'Subpool index = %X', 00H
	ORG $+5
$SG173023 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173024 DB	's370_ecpsvm_extended_freex', 00H
	ORG $+5
$SG173025 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173027 DB	'Value in subpool table = %6.6X', 00H
	ORG $+1
$SG173030 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173031 DB	's370_ecpsvm_extended_freex', 00H
	ORG $+5
$SG173032 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173037 DB	'New Value in subpool table = %6.6X', 00H
	ORG $+5
$SG173040 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173041 DB	's370_ecpsvm_extended_freex', 00H
	ORG $+5
$SG173042 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173067 DB	'X fretx called AREA=%6.6X, DW=%4.4X', 00H
	ORG $+4
$SG173070 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173071 DB	'ecpsvm_do_fretx', 00H
$SG173072 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173075 DB	'ECPS:VM Cannot FRETX : DWORDS = 0', 00H
	ORG $+6
$SG173077 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173078 DB	'ecpsvm_do_fretx', 00H
$SG173079 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173083 DB	'ECPS:VM Cannot FRETX : DWORDS = %d > MAXDW %d', 00H
	ORG $+2
$SG173086 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173087 DB	'ecpsvm_do_fretx', 00H
$SG173088 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173091 DB	'ECPS:VM Cannot FRETX : Area not in Core Free area', 00H
	ORG $+6
$SG173093 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173094 DB	'ecpsvm_do_fretx', 00H
$SG173095 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173098 DB	'ECPS:VM Cannot FRETX : Area flag != 0x02', 00H
	ORG $+7
$SG173100 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173101 DB	'ecpsvm_do_fretx', 00H
$SG173102 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173105 DB	'ECPS:VM Cannot FRETX : fretted block already on subpool '
	DB	'chain', 00H
	ORG $+2
$SG173107 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173108 DB	'ecpsvm_do_fretx', 00H
$SG173109 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173150 DB	'CPASSTS FRETX ECPS:VM Disabled in configuration', 00H
$SG173152 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173153 DB	's370_ecpsvm_extended_fretx', 00H
	ORG $+5
$SG173154 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173158 DB	'CPASSTS FRETX Disabled by command', 00H
	ORG $+6
$SG173160 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173161 DB	's370_ecpsvm_extended_fretx', 00H
	ORG $+5
$SG173162 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173165 DB	'FRETX called', 00H
	ORG $+3
$SG173167 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173168 DB	's370_ecpsvm_extended_fretx', 00H
	ORG $+5
$SG173169 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173199 DB	'CPASSTS PMASS ECPS:VM Disabled in configuration', 00H
$SG173201 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173202 DB	's370_ecpsvm_prefmach_assist', 00H
	ORG $+4
$SG173203 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173207 DB	'CPASSTS PMASS Disabled by command', 00H
	ORG $+6
$SG173209 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173210 DB	's370_ecpsvm_prefmach_assist', 00H
	ORG $+4
$SG173211 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173214 DB	'PMASS called', 00H
	ORG $+3
$SG173216 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173217 DB	's370_ecpsvm_prefmach_assist', 00H
	ORG $+4
$SG173218 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173261 DB	'New and Old PSW have a EC/BC transition', 00H
$SG173263 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173264 DB	'ecpsvm_check_pswtrans', 00H
	ORG $+2
$SG173265 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173269 DB	'New PSW Enables DAT or PER', 00H
	ORG $+5
$SG173271 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173272 DB	'ecpsvm_check_pswtrans', 00H
	ORG $+2
$SG173273 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173279 DB	'New PSW Enables interrupts and MICPEND (EC)', 00H
	ORG $+4
$SG173281 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173282 DB	'ecpsvm_check_pswtrans', 00H
	ORG $+2
$SG173283 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173286 DB	'New PSW Enables interrupts and MICPEND (BC)', 00H
	ORG $+4
$SG173288 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173289 DB	'ecpsvm_check_pswtrans', 00H
	ORG $+2
$SG173290 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173293 DB	'New PSW is a WAIT PSW', 00H
	ORG $+2
$SG173295 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173296 DB	'ecpsvm_check_pswtrans', 00H
	ORG $+2
$SG173297 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173301 DB	'New PSW sysmask incorrect', 00H
	ORG $+6
$SG173303 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173304 DB	'ecpsvm_check_pswtrans', 00H
	ORG $+2
$SG173305 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173308 DB	'New PSW has ODD IA', 00H
	ORG $+5
$SG173310 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173311 DB	'ecpsvm_check_pswtrans', 00H
	ORG $+2
$SG173312 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173376 DB	'SASSIST SSM ECPS:VM Disabled in configuration', 00H
	ORG $+2
$SG173378 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173379 DB	'ecpsvm_dossm', 00H
	ORG $+3
$SG173380 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173383 DB	'SASSIST SSM ECPS:VM Disabled by command', 00H
$SG173385 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173386 DB	'ecpsvm_dossm', 00H
	ORG $+3
$SG173387 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173390 DB	'EVMA Disabled by guest', 00H
	ORG $+1
$SG173392 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173393 DB	'ecpsvm_dossm', 00H
	ORG $+3
$SG173394 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173397 DB	'SASSIST SSM reject : Virtual problem state', 00H
	ORG $+5
$SG173399 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173400 DB	'ecpsvm_dossm', 00H
	ORG $+3
$SG173401 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173404 DB	'SASSIST SSM VPSWA= %8.8X Virtual', 00H
	ORG $+7
$SG173407 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173408 DB	'ecpsvm_dossm', 00H
	ORG $+3
$SG173409 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173411 DB	'SASSIST SSM CR6= %8.8X', 00H
	ORG $+1
$SG173414 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173415 DB	'ecpsvm_dossm', 00H
	ORG $+3
$SG173416 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173418 DB	'SASSIST SSM MICVTMR= %8.8X', 00H
	ORG $+5
$SG173421 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173422 DB	'ecpsvm_dossm', 00H
	ORG $+3
$SG173423 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173425 DB	'SASSIST SSM Real PSW=', 00H
	ORG $+2
$SG173432 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173433 DB	'ecpsvm_dossm', 00H
	ORG $+3
$SG173434 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173437 DB	'SASSIST SSM reject : V SSM Suppr', 00H
	ORG $+7
$SG173439 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173440 DB	'ecpsvm_dossm', 00H
	ORG $+3
$SG173441 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173445 DB	'SASSIST SSM Reject : New PSW too complex', 00H
	ORG $+7
$SG173447 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173448 DB	'ecpsvm_dossm', 00H
	ORG $+3
$SG173449 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173455 DB	'SASSIST SSM Complete : new SM = %2.2X', 00H
	ORG $+2
$SG173458 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173459 DB	'ecpsvm_dossm', 00H
	ORG $+3
$SG173460 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173462 DB	'SASSIST SSM New VIRT ', 00H
	ORG $+2
$SG173466 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173467 DB	'ecpsvm_dossm', 00H
	ORG $+3
$SG173468 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173470 DB	'SASSIST SSM New REAL ', 00H
	ORG $+2
$SG173474 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173475 DB	'ecpsvm_dossm', 00H
	ORG $+3
$SG173476 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173501 DB	'CPASSTS LINK ECPS:VM Disabled in configuration', 00H
	ORG $+1
$SG173503 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173504 DB	'ecpsvm_doCPlink', 00H
$SG173505 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173508 DB	'CPASSTS LINK Disabled by command', 00H
	ORG $+7
$SG173510 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173511 DB	'ecpsvm_doCPlink', 00H
$SG173512 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173515 DB	'LINK called', 00H
	ORG $+4
$SG173517 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173518 DB	'ecpsvm_doCPlink', 00H
$SG173519 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173548 DB	'CPASSTS RETRN ECPS:VM Disabled in configuration', 00H
$SG173550 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173551 DB	'ecpsvm_doCPretrn', 00H
	ORG $+7
$SG173552 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173555 DB	'CPASSTS RETRN Disabled by command', 00H
	ORG $+6
$SG173557 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173558 DB	'ecpsvm_doCPretrn', 00H
	ORG $+7
$SG173559 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173562 DB	'RETRN called', 00H
	ORG $+3
$SG173564 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173565 DB	'ecpsvm_doCPretrn', 00H
	ORG $+7
$SG173566 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173569 DB	'RETRN reject : module not in nucleus', 00H
	ORG $+3
$SG173571 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173572 DB	'ecpsvm_doCPretrn', 00H
	ORG $+7
$SG173573 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173576 DB	'RETRN reject : exit from V=R', 00H
	ORG $+3
$SG173578 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173579 DB	'ecpsvm_doCPretrn', 00H
	ORG $+7
$SG173580 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173584 DB	'RETRN reject : savearea in paging area', 00H
	ORG $+1
$SG173586 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173587 DB	'ecpsvm_doCPretrn', 00H
	ORG $+7
$SG173588 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173591 DB	'RETRN reject : savearea in V=R area', 00H
	ORG $+4
$SG173593 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173594 DB	'ecpsvm_doCPretrn', 00H
	ORG $+7
$SG173595 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173683 DB	'SASSIST SVC ECPS:VM Disabled in configuration', 00H
	ORG $+2
$SG173685 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173686 DB	'ecpsvm_doassistsvc', 00H
	ORG $+5
$SG173687 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173690 DB	'SASSIST SVC ECPS:VM Disabled by command', 00H
$SG173692 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173693 DB	'ecpsvm_doassistsvc', 00H
	ORG $+5
$SG173694 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173697 DB	'EVMA Disabled by guest', 00H
	ORG $+1
$SG173699 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173700 DB	'ecpsvm_doassistsvc', 00H
	ORG $+5
$SG173701 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173704 DB	'SASSIST SVC reject : Virtual problem state', 00H
	ORG $+5
$SG173706 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173707 DB	'ecpsvm_doassistsvc', 00H
	ORG $+5
$SG173708 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173711 DB	'SASSIST SVC VPSWA= %8.8X Virtual', 00H
	ORG $+7
$SG173714 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173715 DB	'ecpsvm_doassistsvc', 00H
	ORG $+5
$SG173716 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173718 DB	'SASSIST SVC CR6= %8.8X', 00H
	ORG $+1
$SG173721 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173722 DB	'ecpsvm_doassistsvc', 00H
	ORG $+5
$SG173723 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173725 DB	'SASSIST SVC MICVTMR= %8.8X', 00H
	ORG $+5
$SG173728 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173729 DB	'ecpsvm_doassistsvc', 00H
	ORG $+5
$SG173730 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173732 DB	'SASSIST SVC Real PSW=', 00H
	ORG $+2
$SG173739 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173740 DB	'ecpsvm_doassistsvc', 00H
	ORG $+5
$SG173741 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173744 DB	'SASSIST SVC Reject : SVC 76', 00H
	ORG $+4
$SG173746 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173747 DB	'ecpsvm_doassistsvc', 00H
	ORG $+5
$SG173748 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173751 DB	'SASSIST SVC NEW VIRT ', 00H
	ORG $+2
$SG173755 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173756 DB	'ecpsvm_doassistsvc', 00H
	ORG $+5
$SG173757 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173763 DB	'SASSIST SVC OLD VIRT ', 00H
	ORG $+2
$SG173767 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173768 DB	'ecpsvm_doassistsvc', 00H
	ORG $+5
$SG173769 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173772 DB	'SASSIST SVC Reject : Cannot make transition to new PSW', 00H
	ORG $+1
$SG173774 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173775 DB	'ecpsvm_doassistsvc', 00H
	ORG $+5
$SG173776 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173783 DB	'SASSIST SVC Done', 00H
	ORG $+7
$SG173785 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173786 DB	'ecpsvm_doassistsvc', 00H
	ORG $+5
$SG173787 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173796 DB	'SASSIST SVC Reject : SVC Assist Inhibit', 00H
$SG173798 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173799 DB	'ecpsvm_dosvc', 00H
	ORG $+3
$SG173800 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173867 DB	'SASSIST LPSW ECPS:VM Disabled in configuration', 00H
	ORG $+1
$SG173869 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173870 DB	'ecpsvm_dolpsw', 00H
	ORG $+2
$SG173871 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173874 DB	'SASSIST LPSW ECPS:VM Disabled by command', 00H
	ORG $+7
$SG173876 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173877 DB	'ecpsvm_dolpsw', 00H
	ORG $+2
$SG173878 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173881 DB	'EVMA Disabled by guest', 00H
	ORG $+1
$SG173883 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173884 DB	'ecpsvm_dolpsw', 00H
	ORG $+2
$SG173885 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173888 DB	'SASSIST LPSW reject : Virtual problem state', 00H
	ORG $+4
$SG173890 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173891 DB	'ecpsvm_dolpsw', 00H
	ORG $+2
$SG173892 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173895 DB	'SASSIST LPSW VPSWA= %8.8X Virtual', 00H
	ORG $+6
$SG173898 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173899 DB	'ecpsvm_dolpsw', 00H
	ORG $+2
$SG173900 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173902 DB	'SASSIST LPSW CR6= %8.8X', 00H
$SG173905 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173906 DB	'ecpsvm_dolpsw', 00H
	ORG $+2
$SG173907 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173909 DB	'SASSIST LPSW MICVTMR= %8.8X', 00H
	ORG $+4
$SG173912 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173913 DB	'ecpsvm_dolpsw', 00H
	ORG $+2
$SG173914 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173916 DB	'SASSIST LPSW Real PSW=', 00H
	ORG $+1
$SG173923 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173924 DB	'ecpsvm_dolpsw', 00H
	ORG $+2
$SG173925 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173928 DB	'SASSIST LPSW reject : LPSW disabled in MICEVMA', 00H
	ORG $+1
$SG173930 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173931 DB	'ecpsvm_dolpsw', 00H
	ORG $+2
$SG173932 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173935 DB	'SASSIST LPSW %6.6X - Alignement error', 00H
	ORG $+2
$SG173938 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173939 DB	'ecpsvm_dolpsw', 00H
	ORG $+2
$SG173940 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173944 DB	'SASSIST LPSW Rejected - Cannot make PSW transition', 00H
	ORG $+5
$SG173946 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173947 DB	'ecpsvm_dolpsw', 00H
	ORG $+2
$SG173948 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173954 DB	'SASSIST LPSW New VIRT ', 00H
	ORG $+1
$SG173958 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173959 DB	'ecpsvm_dolpsw', 00H
	ORG $+2
$SG173960 DB	'ecpsvm.c', 00H
	ORG $+7
$SG173962 DB	'SASSIST LPSW New REAL ', 00H
	ORG $+1
$SG173966 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG173967 DB	'ecpsvm_dolpsw', 00H
	ORG $+2
$SG173968 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174009 DB	'SASSIST SIO ECPS:VM Disabled in configuration', 00H
	ORG $+2
$SG174011 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174012 DB	'ecpsvm_dosio', 00H
	ORG $+3
$SG174013 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174016 DB	'SASSIST SIO ECPS:VM Disabled by command', 00H
$SG174018 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174019 DB	'ecpsvm_dosio', 00H
	ORG $+3
$SG174020 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174023 DB	'EVMA Disabled by guest', 00H
	ORG $+1
$SG174025 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174026 DB	'ecpsvm_dosio', 00H
	ORG $+3
$SG174027 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174030 DB	'SASSIST SIO reject : Virtual problem state', 00H
	ORG $+5
$SG174032 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174033 DB	'ecpsvm_dosio', 00H
	ORG $+3
$SG174034 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174037 DB	'SASSIST SIO VPSWA= %8.8X Virtual', 00H
	ORG $+7
$SG174040 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174041 DB	'ecpsvm_dosio', 00H
	ORG $+3
$SG174042 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174044 DB	'SASSIST SIO CR6= %8.8X', 00H
	ORG $+1
$SG174047 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174048 DB	'ecpsvm_dosio', 00H
	ORG $+3
$SG174049 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174051 DB	'SASSIST SIO MICVTMR= %8.8X', 00H
	ORG $+5
$SG174054 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174055 DB	'ecpsvm_dosio', 00H
	ORG $+3
$SG174056 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174058 DB	'SASSIST SIO Real PSW=', 00H
	ORG $+2
$SG174065 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174066 DB	'ecpsvm_dosio', 00H
	ORG $+3
$SG174067 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174130 DB	'SASSIST STNSM ECPS:VM Disabled in configuration', 00H
$SG174132 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174133 DB	'ecpsvm_dostnsm', 00H
	ORG $+1
$SG174134 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174137 DB	'SASSIST STNSM ECPS:VM Disabled by command', 00H
	ORG $+6
$SG174139 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174140 DB	'ecpsvm_dostnsm', 00H
	ORG $+1
$SG174141 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174144 DB	'EVMA Disabled by guest', 00H
	ORG $+1
$SG174146 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174147 DB	'ecpsvm_dostnsm', 00H
	ORG $+1
$SG174148 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174151 DB	'SASSIST STNSM reject : Virtual problem state', 00H
	ORG $+3
$SG174153 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174154 DB	'ecpsvm_dostnsm', 00H
	ORG $+1
$SG174155 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174158 DB	'SASSIST STNSM VPSWA= %8.8X Virtual', 00H
	ORG $+5
$SG174161 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174162 DB	'ecpsvm_dostnsm', 00H
	ORG $+1
$SG174163 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174165 DB	'SASSIST STNSM CR6= %8.8X', 00H
	ORG $+7
$SG174168 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174169 DB	'ecpsvm_dostnsm', 00H
	ORG $+1
$SG174170 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174172 DB	'SASSIST STNSM MICVTMR= %8.8X', 00H
	ORG $+3
$SG174175 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174176 DB	'ecpsvm_dostnsm', 00H
	ORG $+1
$SG174177 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174179 DB	'SASSIST STNSM Real PSW=', 00H
$SG174186 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174187 DB	'ecpsvm_dostnsm', 00H
	ORG $+1
$SG174188 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174191 DB	'SASSIST STNSM reject : STNSM disabled in MICEVMA', 00H
	ORG $+7
$SG174193 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174194 DB	'ecpsvm_dostnsm', 00H
	ORG $+1
$SG174195 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174199 DB	'SASSIST STNSM Reject : New PSW too complex', 00H
	ORG $+5
$SG174201 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174202 DB	'ecpsvm_dostnsm', 00H
	ORG $+1
$SG174203 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174212 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174209 DB	'SASSIST STNSM Complete : old SM = %2.2X mask = %2.2X New'
	DB	' SM = %2.2X', 00H
	ORG $+4
$SG174213 DB	'ecpsvm_dostnsm', 00H
	ORG $+1
$SG174214 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174216 DB	'SASSIST STNSM New VIRT ', 00H
$SG174220 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174221 DB	'ecpsvm_dostnsm', 00H
	ORG $+1
$SG174222 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174224 DB	'SASSIST STNSM New REAL ', 00H
$SG174228 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174229 DB	'ecpsvm_dostnsm', 00H
	ORG $+1
$SG174230 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174293 DB	'SASSIST STOSM ECPS:VM Disabled in configuration', 00H
$SG174295 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174296 DB	'ecpsvm_dostosm', 00H
	ORG $+1
$SG174297 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174300 DB	'SASSIST STOSM ECPS:VM Disabled by command', 00H
	ORG $+6
$SG174302 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174303 DB	'ecpsvm_dostosm', 00H
	ORG $+1
$SG174304 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174307 DB	'EVMA Disabled by guest', 00H
	ORG $+1
$SG174309 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174310 DB	'ecpsvm_dostosm', 00H
	ORG $+1
$SG174311 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174314 DB	'SASSIST STOSM reject : Virtual problem state', 00H
	ORG $+3
$SG174316 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174317 DB	'ecpsvm_dostosm', 00H
	ORG $+1
$SG174318 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174321 DB	'SASSIST STOSM VPSWA= %8.8X Virtual', 00H
	ORG $+5
$SG174324 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174325 DB	'ecpsvm_dostosm', 00H
	ORG $+1
$SG174326 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174328 DB	'SASSIST STOSM CR6= %8.8X', 00H
	ORG $+7
$SG174331 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174332 DB	'ecpsvm_dostosm', 00H
	ORG $+1
$SG174333 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174335 DB	'SASSIST STOSM MICVTMR= %8.8X', 00H
	ORG $+3
$SG174338 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174339 DB	'ecpsvm_dostosm', 00H
	ORG $+1
$SG174340 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174342 DB	'SASSIST STOSM Real PSW=', 00H
$SG174349 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174350 DB	'ecpsvm_dostosm', 00H
	ORG $+1
$SG174351 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174354 DB	'SASSIST STOSM reject : STOSM disabled in MICEVMA', 00H
	ORG $+7
$SG174356 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174357 DB	'ecpsvm_dostosm', 00H
	ORG $+1
$SG174358 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174362 DB	'SASSIST STOSM Reject : New PSW too complex', 00H
	ORG $+5
$SG174364 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174365 DB	'ecpsvm_dostosm', 00H
	ORG $+1
$SG174366 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174375 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174372 DB	'SASSIST STOSM Complete : old SM = %2.2X mask = %2.2X New'
	DB	' SM = %2.2X', 00H
	ORG $+4
$SG174376 DB	'ecpsvm_dostosm', 00H
	ORG $+1
$SG174377 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174379 DB	'SASSIST STOSM New VIRT ', 00H
$SG174383 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174384 DB	'ecpsvm_dostosm', 00H
	ORG $+1
$SG174385 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174387 DB	'SASSIST STOSM New REAL ', 00H
$SG174391 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174392 DB	'ecpsvm_dostosm', 00H
	ORG $+1
$SG174393 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174446 DB	'SASSIST STCTL ECPS:VM Disabled in configuration', 00H
$SG174448 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174449 DB	'ecpsvm_dostctl', 00H
	ORG $+1
$SG174450 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174453 DB	'SASSIST STCTL ECPS:VM Disabled by command', 00H
	ORG $+6
$SG174455 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174456 DB	'ecpsvm_dostctl', 00H
	ORG $+1
$SG174457 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174460 DB	'EVMA Disabled by guest', 00H
	ORG $+1
$SG174462 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174463 DB	'ecpsvm_dostctl', 00H
	ORG $+1
$SG174464 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174467 DB	'SASSIST STCTL reject : Virtual problem state', 00H
	ORG $+3
$SG174469 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174470 DB	'ecpsvm_dostctl', 00H
	ORG $+1
$SG174471 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174474 DB	'SASSIST STCTL VPSWA= %8.8X Virtual', 00H
	ORG $+5
$SG174477 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174478 DB	'ecpsvm_dostctl', 00H
	ORG $+1
$SG174479 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174481 DB	'SASSIST STCTL CR6= %8.8X', 00H
	ORG $+7
$SG174484 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174485 DB	'ecpsvm_dostctl', 00H
	ORG $+1
$SG174486 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174488 DB	'SASSIST STCTL MICVTMR= %8.8X', 00H
	ORG $+3
$SG174491 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174492 DB	'ecpsvm_dostctl', 00H
	ORG $+1
$SG174493 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174495 DB	'SASSIST STCTL Real PSW=', 00H
$SG174502 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174503 DB	'ecpsvm_dostctl', 00H
	ORG $+1
$SG174504 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174507 DB	'SASSIST STCTL Reject : Not aligned', 00H
	ORG $+5
$SG174509 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174510 DB	'ecpsvm_dostctl', 00H
	ORG $+1
$SG174511 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174515 DB	'SASSIST STCTL Reject : BC Mode VM & STCTL != 0,0', 00H
	ORG $+7
$SG174517 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174518 DB	'ecpsvm_dostctl', 00H
	ORG $+1
$SG174519 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174526 DB	'SASSIST STCTL %d,%d Done', 00H
	ORG $+7
$SG174529 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174530 DB	'ecpsvm_dostctl', 00H
	ORG $+1
$SG174531 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174600 DB	'SASSIST LCTL ECPS:VM Disabled in configuration', 00H
	ORG $+1
$SG174602 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174603 DB	'ecpsvm_dolctl', 00H
	ORG $+2
$SG174604 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174607 DB	'SASSIST LCTL ECPS:VM Disabled by command', 00H
	ORG $+7
$SG174609 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174610 DB	'ecpsvm_dolctl', 00H
	ORG $+2
$SG174611 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174614 DB	'EVMA Disabled by guest', 00H
	ORG $+1
$SG174616 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174617 DB	'ecpsvm_dolctl', 00H
	ORG $+2
$SG174618 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174621 DB	'SASSIST LCTL reject : Virtual problem state', 00H
	ORG $+4
$SG174623 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174624 DB	'ecpsvm_dolctl', 00H
	ORG $+2
$SG174625 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174628 DB	'SASSIST LCTL VPSWA= %8.8X Virtual', 00H
	ORG $+6
$SG174631 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174632 DB	'ecpsvm_dolctl', 00H
	ORG $+2
$SG174633 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174635 DB	'SASSIST LCTL CR6= %8.8X', 00H
$SG174638 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174639 DB	'ecpsvm_dolctl', 00H
	ORG $+2
$SG174640 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174642 DB	'SASSIST LCTL MICVTMR= %8.8X', 00H
	ORG $+4
$SG174645 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174646 DB	'ecpsvm_dolctl', 00H
	ORG $+2
$SG174647 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174649 DB	'SASSIST LCTL Real PSW=', 00H
	ORG $+1
$SG174656 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174657 DB	'ecpsvm_dolctl', 00H
	ORG $+2
$SG174658 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174661 DB	'SASSIST LCTL Reject : Not aligned', 00H
	ORG $+6
$SG174663 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174664 DB	'ecpsvm_dolctl', 00H
	ORG $+2
$SG174665 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174669 DB	'SASSIST LCTL Reject : BC Mode VM & LCTL != 0,0', 00H
	ORG $+1
$SG174671 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174672 DB	'ecpsvm_dolctl', 00H
	ORG $+2
$SG174673 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174680 DB	'SASSIST LCTL %d,%d : Modifying %d cregs', 00H
$SG174683 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174684 DB	'ecpsvm_dolctl', 00H
	ORG $+2
$SG174685 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174690 DB	'SASSIST LCTL Reject : CR0 High changed', 00H
	ORG $+1
$SG174692 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174693 DB	'ecpsvm_dolctl', 00H
	ORG $+2
$SG174694 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174699 DB	'SASSIST LCTL Reject : CR0 EXTSM Enables new EXTS', 00H
	ORG $+7
$SG174701 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174702 DB	'ecpsvm_dolctl', 00H
	ORG $+2
$SG174703 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174707 DB	'SASSIST LCTL Reject : CR1 Updates shadow table', 00H
	ORG $+1
$SG174709 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174710 DB	'ecpsvm_dolctl', 00H
	ORG $+2
$SG174711 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174717 DB	'SASSIST LCTL Reject : CR2 IOCSM Enables I/O Ints', 00H
	ORG $+7
$SG174719 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174720 DB	'ecpsvm_dolctl', 00H
	ORG $+2
$SG174721 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174727 DB	'SASSIST LCTL Reject : DAS CR%d Update', 00H
	ORG $+2
$SG174730 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174731 DB	'ecpsvm_dolctl', 00H
	ORG $+2
$SG174732 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174736 DB	'SASSIST LCTL Reject : MC CR8 Update', 00H
	ORG $+4
$SG174738 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174739 DB	'ecpsvm_dolctl', 00H
	ORG $+2
$SG174740 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174745 DB	'SASSIST LCTL Reject : PER CR%d Update', 00H
	ORG $+2
$SG174748 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174749 DB	'ecpsvm_dolctl', 00H
	ORG $+2
$SG174750 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174758 DB	'SASSIST LCTL %d,%d Done', 00H
$SG174761 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174762 DB	'ecpsvm_dolctl', 00H
	ORG $+2
$SG174763 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174804 DB	'SASSIST IUCV ECPS:VM Disabled in configuration', 00H
	ORG $+1
$SG174806 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174807 DB	'ecpsvm_doiucv', 00H
	ORG $+2
$SG174808 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174811 DB	'SASSIST IUCV ECPS:VM Disabled by command', 00H
	ORG $+7
$SG174813 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174814 DB	'ecpsvm_doiucv', 00H
	ORG $+2
$SG174815 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174818 DB	'EVMA Disabled by guest', 00H
	ORG $+1
$SG174820 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174821 DB	'ecpsvm_doiucv', 00H
	ORG $+2
$SG174822 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174825 DB	'SASSIST IUCV reject : Virtual problem state', 00H
	ORG $+4
$SG174827 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174828 DB	'ecpsvm_doiucv', 00H
	ORG $+2
$SG174829 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174832 DB	'SASSIST IUCV VPSWA= %8.8X Virtual', 00H
	ORG $+6
$SG174835 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174836 DB	'ecpsvm_doiucv', 00H
	ORG $+2
$SG174837 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174839 DB	'SASSIST IUCV CR6= %8.8X', 00H
$SG174842 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174843 DB	'ecpsvm_doiucv', 00H
	ORG $+2
$SG174844 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174846 DB	'SASSIST IUCV MICVTMR= %8.8X', 00H
	ORG $+4
$SG174849 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174850 DB	'ecpsvm_doiucv', 00H
	ORG $+2
$SG174851 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174853 DB	'SASSIST IUCV Real PSW=', 00H
	ORG $+1
$SG174860 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174861 DB	'ecpsvm_doiucv', 00H
	ORG $+2
$SG174862 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174913 DB	'SASSIST DIAG ECPS:VM Disabled in configuration', 00H
	ORG $+1
$SG174915 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174916 DB	'ecpsvm_dodiag', 00H
	ORG $+2
$SG174917 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174920 DB	'SASSIST DIAG ECPS:VM Disabled by command', 00H
	ORG $+7
$SG174922 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174923 DB	'ecpsvm_dodiag', 00H
	ORG $+2
$SG174924 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174927 DB	'EVMA Disabled by guest', 00H
	ORG $+1
$SG174929 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174930 DB	'ecpsvm_dodiag', 00H
	ORG $+2
$SG174931 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174934 DB	'SASSIST DIAG reject : Virtual problem state', 00H
	ORG $+4
$SG174936 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174937 DB	'ecpsvm_dodiag', 00H
	ORG $+2
$SG174938 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174941 DB	'SASSIST DIAG VPSWA= %8.8X Virtual', 00H
	ORG $+6
$SG174944 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174945 DB	'ecpsvm_dodiag', 00H
	ORG $+2
$SG174946 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174948 DB	'SASSIST DIAG CR6= %8.8X', 00H
$SG174951 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174952 DB	'ecpsvm_dodiag', 00H
	ORG $+2
$SG174953 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174955 DB	'SASSIST DIAG MICVTMR= %8.8X', 00H
	ORG $+4
$SG174958 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174959 DB	'ecpsvm_dodiag', 00H
	ORG $+2
$SG174960 DB	'ecpsvm.c', 00H
	ORG $+7
$SG174962 DB	'SASSIST DIAG Real PSW=', 00H
	ORG $+1
$SG174969 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG174970 DB	'ecpsvm_dodiag', 00H
	ORG $+2
$SG174971 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175054 DB	'SASSIST LRA ECPS:VM Disabled in configuration', 00H
	ORG $+2
$SG175056 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175057 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175058 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175061 DB	'SASSIST LRA ECPS:VM Disabled by command', 00H
$SG175063 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175064 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175065 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175068 DB	'EVMA Disabled by guest', 00H
	ORG $+1
$SG175070 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175071 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175072 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175075 DB	'SASSIST LRA reject : Virtual problem state', 00H
	ORG $+5
$SG175077 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175078 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175079 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175082 DB	'SASSIST LRA VPSWA= %8.8X Virtual', 00H
	ORG $+7
$SG175085 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175086 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175087 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175089 DB	'SASSIST LRA CR6= %8.8X', 00H
	ORG $+1
$SG175092 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175093 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175094 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175096 DB	'SASSIST LRA MICVTMR= %8.8X', 00H
	ORG $+5
$SG175099 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175100 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175101 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175103 DB	'SASSIST LRA Real PSW=', 00H
	ORG $+2
$SG175110 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175111 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175112 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175115 DB	'SASSIST LRA Reject : VPSW is BC mode', 0aH, 00H
	ORG $+2
$SG175117 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175118 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175119 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175122 DB	'SASSIST LRA Complete: CC=%d; Operands r1=%8.8X, d2(b2)=%'
	DB	'8.8X (STBYPASS)', 0aH, 00H
	ORG $+7
$SG175125 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175126 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175127 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175130 DB	'SASSIST LRA Reject : Invalid STO in virtual CR1', 0aH, 00H
	ORG $+7
$SG175132 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175133 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175134 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175141 DB	'SASSIST LRA Reject : Invalid page/segment bits in virtua'
	DB	'l CR0', 0aH, 00H
	ORG $+1
$SG175143 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175144 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175145 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175149 DB	'SASSIST LRA Complete: CC=3; Operands r1=%8.8X, d2(b2)=%8'
	DB	'.8X', 0aH, 00H
	ORG $+3
$SG175152 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175153 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175154 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175160 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175158 DB	'SASSIST LRA Reject : V-STE address exceeds real segment '
	DB	'table length', 0aH, 00H
	ORG $+2
$SG175161 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175162 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175165 DB	'SASSIST LRA Reject : Real STE at %6.6X is invalid; STE=%'
	DB	'8.8X', 0aH, 00H
	ORG $+2
$SG175168 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175169 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175170 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175173 DB	'SASSIST LRA Reject : V-STE address exceeds real page tab'
	DB	'le length', 0aH, 00H
	ORG $+5
$SG175175 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175176 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175177 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175180 DB	'SASSIST LRA Reject : Real PTE at %6.6X is invalid; PTE=%'
	DB	'4.4X', 0aH, 00H
	ORG $+2
$SG175183 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175184 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175185 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175188 DB	'SASSIST LRA Complete: CC=1; Operands r1=%8.8X, d2(b2)=%8'
	DB	'.8X', 0aH, 00H
	ORG $+3
$SG175191 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175192 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175193 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175196 DB	'SASSIST LRA Reject : Virtual STE at %6.6X is invalid; ST'
	DB	'E=%8.8X', 0aH, 00H
	ORG $+7
$SG175199 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175200 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175201 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175204 DB	'SASSIST LRA Complete: CC=3; Operands r1=%8.8X, d2(b2)=%8'
	DB	'.8X', 0aH, 00H
	ORG $+3
$SG175207 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175208 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175209 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175215 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175213 DB	'SASSIST LRA Reject : V-PTE address exceeds real segment '
	DB	'table length', 0aH, 00H
	ORG $+2
$SG175216 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175217 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175220 DB	'SASSIST LRA Reject : Real STE at %6.6X is invalid; STE=%'
	DB	'8.8X', 0aH, 00H
	ORG $+2
$SG175223 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175224 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175225 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175228 DB	'SASSIST LRA Reject : V-PTE address exceeds real page tab'
	DB	'le length', 0aH, 00H
	ORG $+5
$SG175230 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175231 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175232 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175235 DB	'SASSIST LRA Reject : Real PTE at %6.6X is invalid; PTE=%'
	DB	'4.4X', 0aH, 00H
	ORG $+2
$SG175238 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175239 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175240 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175243 DB	'SASSIST LRA Complete: CC=2; Operands r1=%8.8X, d2(b2)=%8'
	DB	'.8X', 0aH, 00H
	ORG $+3
$SG175246 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175247 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175248 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175251 DB	'SASSIST LRA Reject : Virtual PTE at %6.6X is invalid; ST'
	DB	'E=%8.8X', 0aH, 00H
	ORG $+7
$SG175254 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175255 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175256 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175258 DB	'SASSIST LRA Complete: CC=0; Operands r1=%8.8X, d2(b2)=%8'
	DB	'.8X', 0aH, 00H
	ORG $+3
$SG175261 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG175262 DB	'ecpsvm_dolra', 00H
	ORG $+3
$SG175263 DB	'ecpsvm.c', 00H
	ORG $+3
$SG175295 DB	'%s%s', 00H
	ORG $+7
$SG175303 DB	'HHC01701%s | %-9s | %10llu | %10llu |  %3llu%% |', 0aH, 00H
	ORG $+6
$SG175304 DB	'ecpsvm_showstats2', 00H
	ORG $+6
$SG175305 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175308 DB	'HHC01702%s +-----------+------------+------------+------'
	DB	'-+', 0aH, 00H
	ORG $+4
$SG175309 DB	'ecpsvm_showstats2', 00H
	ORG $+6
$SG175310 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175313 DB	'HHC01701%s | %-9s | %10llu | %10llu |  %3llu%% |', 0aH, 00H
	ORG $+6
$SG175314 DB	'ecpsvm_showstats2', 00H
	ORG $+6
$SG175315 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175317 DB	'HHC01702%s +-----------+------------+------------+------'
	DB	'-+', 0aH, 00H
	ORG $+4
$SG175318 DB	'ecpsvm_showstats2', 00H
	ORG $+6
$SG175319 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175322 DB	'HHC01703%s * : Unsupported, - : Disabled, %% - Debug', 0aH
	DB	00H
	ORG $+2
$SG175323 DB	'ecpsvm_showstats2', 00H
	ORG $+6
$SG175324 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175327 DB	'HHC01704%s %llu entries not shown and never invoked', 0aH
	DB	00H
	ORG $+3
$SG175328 DB	'ecpsvm_showstats2', 00H
	ORG $+6
$SG175329 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175332 DB	'HHC01705%s %llu call(s) were made to unsupported functio'
	DB	'ns', 0aH, 00H
	ORG $+4
$SG175333 DB	'ecpsvm_showstats2', 00H
	ORG $+6
$SG175334 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175356 DB	'HHC01725%s ECPS:VM Code version %.02f', 0aH, 00H
	ORG $+1
$SG175357 DB	'ecpsvm_showstats', 00H
	ORG $+7
$SG175358 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175361 DB	'HHC01724%s ECPS:VM Operating with CP FREE/FRET trap in e'
	DB	'ffect', 0aH, 00H
	ORG $+1
$SG175362 DB	'ecpsvm_showstats', 00H
	ORG $+7
$SG175363 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175365 DB	'HHC01702%s +-----------+------------+------------+------'
	DB	'-+', 0aH, 00H
	ORG $+4
$SG175366 DB	'ecpsvm_showstats', 00H
	ORG $+7
$SG175367 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175370 DB	'Calls  ', 00H
$SG175371 DB	'VM ASSIST', 00H
	ORG $+6
$SG175373 DB	'HHC01706%s | %-9s | %10s | %10s | %-5s |', 0aH, 00H
	ORG $+6
$SG175374 DB	'ecpsvm_showstats', 00H
	ORG $+7
$SG175375 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175377 DB	'HHC01702%s +-----------+------------+------------+------'
	DB	'-+', 0aH, 00H
	ORG $+4
$SG175378 DB	'ecpsvm_showstats', 00H
	ORG $+7
$SG175379 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175381 DB	'HHC01702%s +-----------+------------+------------+------'
	DB	'-+', 0aH, 00H
	ORG $+4
$SG175382 DB	'ecpsvm_showstats', 00H
	ORG $+7
$SG175383 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175386 DB	'Calls  ', 00H
$SG175387 DB	'CP ASSIST', 00H
	ORG $+6
$SG175389 DB	'HHC01706%s | %-9s | %10s | %10s | %-5s |', 0aH, 00H
	ORG $+6
$SG175390 DB	'ecpsvm_showstats', 00H
	ORG $+7
$SG175391 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175393 DB	'HHC01702%s +-----------+------------+------------+------'
	DB	'-+', 0aH, 00H
	ORG $+4
$SG175394 DB	'ecpsvm_showstats', 00H
	ORG $+7
$SG175395 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175418 DB	'VM ASSIST', 00H
	ORG $+6
$SG175420 DB	'CP ASSIST', 00H
	ORG $+6
$SG175440 DB	'Enabled', 00H
$SG175441 DB	'Disabled', 00H
	ORG $+7
$SG175447 DB	'HHC01707%s ECPS:VM %s feature %s%s%s', 0aH, 00H
	ORG $+2
$SG175448 DB	'ecpsvm_enadisaall', 00H
	ORG $+6
$SG175449 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175451 DB	' Debug ', 00H
$SG175453 DB	'HHC01707%s ECPS:VM %s feature %s%s%s', 0aH, 00H
	ORG $+2
$SG175454 DB	'ecpsvm_enadisaall', 00H
	ORG $+6
$SG175455 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175459 DB	'HHC01708%s All ECPS:VM %s features %s%s', 0aH, 00H
	ORG $+7
$SG175460 DB	'ecpsvm_enadisaall', 00H
	ORG $+6
$SG175461 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175465 DB	'HHC01708%s All ECPS:VM %s features %s%s', 0aH, 00H
	ORG $+7
$SG175466 DB	'ecpsvm_enadisaall', 00H
	ORG $+6
$SG175467 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175495 DB	'Enabled', 00H
$SG175496 DB	'Disabled', 00H
	ORG $+7
$SG175500 DB	'VM ASSIST', 00H
	ORG $+6
$SG175501 DB	'CP ASSIST', 00H
	ORG $+6
$SG175504 DB	'HHC01709%s ECPS:VM global debug %s', 0aH, 00H
	ORG $+4
$SG175505 DB	'ecpsvm_enable_disable', 00H
	ORG $+2
$SG175506 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175509 DB	'VM ASSIST', 00H
	ORG $+6
$SG175510 DB	'CP ASSIST', 00H
	ORG $+6
$SG175513 DB	'VM ASSIST', 00H
	ORG $+6
$SG175516 DB	'CP ASSIST', 00H
	ORG $+6
$SG175522 DB	'HHC01710%s ECPS:VM %s feature %s %s%s', 0aH, 00H
	ORG $+1
$SG175523 DB	'ecpsvm_enable_disable', 00H
	ORG $+2
$SG175524 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175528 DB	'HHC01710%s ECPS:VM %s feature %s %s%s', 0aH, 00H
	ORG $+1
$SG175529 DB	'ecpsvm_enable_disable', 00H
	ORG $+2
$SG175530 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175532 DB	'HHC01711%s Unknown ECPS:VM feature %s; ignored', 0aH, 00H
$SG175533 DB	'ecpsvm_enable_disable', 00H
	ORG $+2
$SG175534 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175567 DB	'HHC01712%s Current reported ECPS:VM level is %d', 0aH, 00H
	ORG $+7
$SG175568 DB	'ecpsvm_level', 00H
	ORG $+3
$SG175569 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175572 DB	'HHC01713%s But ECPS:VM is currently disabled', 0aH, 00H
	ORG $+2
$SG175573 DB	'ecpsvm_level', 00H
	ORG $+3
$SG175574 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175577 DB	'HHC01714%s Level reported to guest program is now %d', 0aH
	DB	00H
	ORG $+2
$SG175578 DB	'ecpsvm_level', 00H
	ORG $+3
$SG175579 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175582 DB	'HHC01715%s ECPS:VM level %d is not supported, unpredicta'
	DB	'ble results may occur', 0aH, 00H
	ORG $+1
$SG175583 DB	'ecpsvm_level', 00H
	ORG $+3
$SG175584 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175586 DB	'HHC01716%s The microcode support level is 20', 0aH, 00H
	ORG $+2
$SG175587 DB	'ecpsvm_level', 00H
	ORG $+3
$SG175588 DB	'ecpsvm.c', 00H
	ORG $+7
ecpsvm_cmdtab DQ FLAT:$SG175597
	DD	01H
	ORG $+4
	DQ	FLAT:ecpsvm_helpcmd
	DQ	FLAT:$SG175598
	DQ	FLAT:$SG175599
	DQ	FLAT:$SG175600
	DD	02H
	ORG $+4
	DQ	FLAT:ecpsvm_showstats
	DQ	FLAT:$SG175601
	DQ	FLAT:$SG175602
	DQ	FLAT:$SG175603
	DD	02H
	ORG $+4
	DQ	FLAT:ecpsvm_disable
	DQ	FLAT:$SG175604
	DQ	FLAT:$SG175605
	DQ	FLAT:$SG175606
	DD	02H
	ORG $+4
	DQ	FLAT:ecpsvm_enable
	DQ	FLAT:$SG175607
	DQ	FLAT:$SG175608
	DQ	FLAT:$SG175609
	DD	05H
	ORG $+4
	DQ	FLAT:ecpsvm_debug
	DQ	FLAT:$SG175610
	DQ	FLAT:$SG175611
	DQ	FLAT:$SG175612
	DD	03H
	ORG $+4
	DQ	FLAT:ecpsvm_nodebug
	DQ	FLAT:$SG175613
	DQ	FLAT:$SG175614
	DQ	FLAT:$SG175615
	DD	01H
	ORG $+4
	DQ	FLAT:ecpsvm_level
	DQ	FLAT:$SG175616
	DQ	FLAT:$SG175617
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
$SG175627 DB	'HHC01717%s %-9.9s    %s', 0aH, 00H
	ORG $+7
$SG175628 DB	'ecpsvm_helpcmdlist', 00H
	ORG $+5
$SG175629 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175640 DB	'HHC01718%s Unknown subcommand %s, valid subcommands are '
	DB	':', 0aH, 00H
	ORG $+5
$SG175641 DB	'ecpsvm_helpcmd', 00H
	ORG $+1
$SG175642 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175644 DB	'HHC01717%s %-9.9s    %s', 0aH, 00H
	ORG $+7
$SG175645 DB	'ecpsvm_helpcmd', 00H
	ORG $+1
$SG175646 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175669 DB	'HHC01719%s ECPS:VM Command processor invoked', 0aH, 00H
	ORG $+2
$SG175670 DB	'ecpsvm_command', 00H
	ORG $+1
$SG175671 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175675 DB	'ecpsvm_command', 00H
	ORG $+9
$SG175674 DB	'HHC01720%s No ECPS:VM subcommand. Type "ecpsvm help" for'
	DB	' a list of valid subcommands', 0aH, 00H
	ORG $+2
$SG175676 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175679 DB	'HHC01721%s Unknown ECPS:VM subcommand %s', 0aH, 00H
	ORG $+6
$SG175680 DB	'ecpsvm_command', 00H
	ORG $+1
$SG175681 DB	'ecpsvm.c', 00H
	ORG $+7
$SG175683 DB	'HHC01722%s ECPS:VM Command processor complete', 0aH, 00H
	ORG $+1
$SG175684 DB	'ecpsvm_command', 00H
	ORG $+1
$SG175685 DB	'ecpsvm.c', 00H
_DATA	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vfetch8 DD 011101H
	DD	0a211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vfetch4 DD 011101H
	DD	0a211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vfetch2 DD 011101H
	DD	0a211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vfetchb DD 011101H
	DD	08211H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vstore8 DD 011701H
	DD	0a217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vstore4 DD 011601H
	DD	0a216H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vstore2 DD 011701H
	DD	0a217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vstoreb DD 011601H
	DD	08216H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	01dH
	DW	010cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vfetch8_full DD 032219H
	DD	0700fc213H
	DD	0600eH
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	01dH
	DW	010cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vfetch4_full DD 032219H
	DD	0700fa213H
	DD	0600eH
	DD	imagerel __GSHandlerCheck
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vfetch2_full DD 011101H
	DD	08211H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	023H
	DW	0150H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vstore8_full DD 032819H
	DD	07015c219H
	DD	06014H
	DD	imagerel __GSHandlerCheck
	DD	058H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vstore4_full DD 031801H
	DD	07014a218H
	DD	06013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_vstore2_full DD 011701H
	DD	0a217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_maddr_l DD 011701H
	DD	0a217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_get_storage_key DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_get_2K_storage_key DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370__get_storage_key DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_get_storekey_ptr DD 010d01H
	DD	0220dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_dw_noswap DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_fw_noswap DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_hw_noswap DD 010901H
	DD	02209H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_showstats2
	DD	01bH
	DD	0583H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_doassistsvc
	DD	02eH
	DD	0dc5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_disp_runtime
	DD	025H
	DD	0b61H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_disp_incprobt
	DD	01aH
	DD	040bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_do_disp2
	DD	033H
	DD	03e4bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_do_disp1
	DD	01fH
	DD	080cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_do_scnvu
	DD	024H
	DD	0460H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_unlockpage1
	DD	01fH
	DD	0403H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_lockpage1
	DD	020H
	DD	02ebH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_do_fretx
	DD	025H
	DD	06daH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_tranbrng
	DD	024H
	DD	03b9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_dolra
	DD	038H
	DD	01a95H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_doiucv
	DD	033H
	DD	078fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_dostctl
	DD	038H
	DD	0b18H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_dolctl
	DD	038H
	DD	0121bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_dodiag
	DD	038H
	DD	07a0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_dosio
	DD	033H
	DD	078fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_dostosm
	DD	038H
	DD	0ca1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_dostnsm
	DD	038H
	DD	0ca1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_dolpsw
	DD	033H
	DD	0cfbH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ecpsvm_dossm
	DD	033H
	DD	0cb0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s370_ecpsvm_extended_freex
	DD	01cH
	DD	0ae5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s370_ecpsvm_store_level
	DD	02fH
	DD	0944H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s370_ecpsvm_locate_rblock
	DD	01bH
	DD	09c9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s370_ecpsvm_dispatch_main
	DD	01bH
	DD	019adH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s370_ecpsvm_inval_segtab
	DD	01bH
	DD	05f5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:s370_ecpsvm_lock_page
	DD	01bH
	DD	04ddH
voltbl	ENDS
xdata	SEGMENT
$unwind$s370_ecpsvm_basic_freex DD 010e01H
	DD	0c20eH
$unwind$s370_ecpsvm_basic_fretx DD 010e01H
	DD	0c20eH
$unwind$s370_ecpsvm_lock_page DD 022319H
	DD	02f0111H
	DD	imagerel __GSHandlerCheck
	DD	0160H
$unwind$s370_ecpsvm_unlock_page DD 010e01H
	DD	0c20eH
$unwind$s370_ecpsvm_decode_next_ccw DD 010e01H
	DD	0e20eH
$unwind$s370_ecpsvm_free_ccwstor DD 021101H
	DD	0110111H
$unwind$s370_ecpsvm_locate_vblock DD 010e01H
	DD	0c20eH
$unwind$s370_ecpsvm_disp1 DD 010e01H
	DD	0c20eH
$unwind$s370_ecpsvm_tpage DD 010e01H
	DD	0c20eH
$unwind$s370_ecpsvm_tpage_lock DD 010e01H
	DD	0c20eH
$unwind$s370_ecpsvm_inval_segtab DD 022319H
	DD	0310111H
	DD	imagerel __GSHandlerCheck
	DD	0170H
$unwind$s370_ecpsvm_inval_ptable DD 010e01H
	DD	0c20eH
$unwind$s370_ecpsvm_decode_first_ccw DD 010e01H
	DD	0c20eH
$unwind$s370_ecpsvm_dispatch_main DD 022319H
	DD	0370111H
	DD	imagerel __GSHandlerCheck
	DD	01a0H
$unwind$s370_ecpsvm_locate_rblock DD 022319H
	DD	0350111H
	DD	imagerel __GSHandlerCheck
	DD	0190H
$unwind$s370_ecpsvm_comm_ccwproc DD 021101H
	DD	0170111H
$unwind$s370_ecpsvm_unxlate_ccw DD 010e01H
	DD	0e20eH
$unwind$s370_ecpsvm_disp2 DD 010e01H
	DD	0c20eH
$unwind$s370_ecpsvm_store_level DD 043619H
	DD	02c5b0119H
	DD	0500b700cH
	DD	imagerel __GSHandlerCheck
	DD	016204H
	DD	0c0H
	DD	080H
$unwind$s370_ecpsvm_loc_chgshrpg DD 021101H
	DD	0130111H
$unwind$s370_ecpsvm_extended_freex DD 032419H
	DD	0340112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0190H
$unwind$s370_ecpsvm_extended_fretx DD 010e01H
	DD	0e20eH
$unwind$s370_ecpsvm_prefmach_assist DD 010e01H
	DD	0c20eH
$unwind$ecpsvm_dosvc DD 010d01H
	DD	0820dH
$unwind$ecpsvm_dossm DD 043a19H
	DD	058ab011dH
	DD	0500f7010H
	DD	imagerel __GSHandlerCheck
	DD	02c484H
	DD	0c0H
	DD	080H
$unwind$ecpsvm_dolpsw DD 043a19H
	DD	0588b011dH
	DD	0500f7010H
	DD	imagerel __GSHandlerCheck
	DD	02c384H
	DD	0c0H
	DD	080H
$unwind$ecpsvm_dostnsm DD 043f19H
	DD	0588b0122H
	DD	050147015H
	DD	imagerel __GSHandlerCheck
	DD	02c384H
	DD	0c0H
	DD	080H
$unwind$ecpsvm_dostosm DD 043f19H
	DD	0588b0122H
	DD	050147015H
	DD	imagerel __GSHandlerCheck
	DD	02c384H
	DD	0c0H
	DD	080H
$unwind$ecpsvm_dosio DD 043a19H
	DD	02c7b011dH
	DD	0500f7010H
	DD	imagerel __GSHandlerCheck
	DD	016304H
	DD	0c0H
	DD	080H
$unwind$ecpsvm_dodiag DD 043f19H
	DD	02c7b0122H
	DD	050147015H
	DD	imagerel __GSHandlerCheck
	DD	016304H
	DD	0c0H
	DD	080H
$unwind$ecpsvm_dolctl DD 043f19H
	DD	02c930122H
	DD	050147015H
	DD	imagerel __GSHandlerCheck
	DD	0163c4H
	DD	0c0H
	DD	080H
$unwind$ecpsvm_dostctl DD 043f19H
	DD	02c830122H
	DD	050147015H
	DD	imagerel __GSHandlerCheck
	DD	016344H
	DD	0c0H
	DD	080H
$unwind$ecpsvm_doiucv DD 043a19H
	DD	02c7b011dH
	DD	0500f7010H
	DD	imagerel __GSHandlerCheck
	DD	016304H
	DD	0c0H
	DD	080H
$unwind$ecpsvm_dolra DD 043f19H
	DD	02c8b0122H
	DD	050147015H
	DD	imagerel __GSHandlerCheck
	DD	016384H
	DD	0c0H
	DD	080H
$unwind$Interrupt_Lock_Obtained DD 010e01H
	DD	0420eH
$unwind$Obtain_Interrupt_Lock DD 010e01H
	DD	0420eH
$unwind$Release_Interrupt_Lock DD 010e01H
	DD	0420eH
$unwind$ecpsvm_getcmdent DD 010901H
	DD	08209H
$unwind$ecpsvm_int_lra DD 011201H
	DD	06212H
$unwind$ecpsvm_tranbrng DD 022c19H
	DD	02f011aH
	DD	imagerel __GSHandlerCheck
	DD	0160H
$unwind$ecpsvm_get_trace_entry DD 010901H
	DD	06209H
$unwind$ecpsvm_do_fretx DD 022d19H
	DD	031011bH
	DD	imagerel __GSHandlerCheck
	DD	0170H
$unwind$ecpsvm_lockpage1 DD 022819H
	DD	02f0116H
	DD	imagerel __GSHandlerCheck
	DD	0160H
$unwind$ecpsvm_unlockpage1 DD 022719H
	DD	02f0115H
	DD	imagerel __GSHandlerCheck
	DD	0160H
$unwind$ecpsvm_do_deccw1 DD 011701H
	DD	0e217H
$unwind$ecpsvm_do_scnvu DD 022c19H
	DD	02f011aH
	DD	imagerel __GSHandlerCheck
	DD	0160H
$unwind$ecpsvm_do_disp1 DD 022719H
	DD	02f0115H
	DD	imagerel __GSHandlerCheck
	DD	0160H
$unwind$ecpsvm_do_disp2 DD 043a19H
	DD	058f3011dH
	DD	0500f7010H
	DD	imagerel __GSHandlerCheck
	DD	02c6c4H
	DD	0c0H
	DD	080H
$unwind$ecpsvm_zappage DD 021301H
	DD	0700f7213H
$unwind$ecpsvm_disp_incprobt DD 022219H
	DD	02f0110H
	DD	imagerel __GSHandlerCheck
	DD	0160H
$unwind$ecpsvm_disp_runtime DD 022d19H
	DD	035011bH
	DD	imagerel __GSHandlerCheck
	DD	0190H
$unwind$ecpsvm_check_pswtrans DD 011801H
	DD	0a218H
$unwind$ecpsvm_doCPlink DD 010901H
	DD	0e209H
$unwind$ecpsvm_doCPretrn DD 010901H
	DD	0e209H
$unwind$ecpsvm_doassistsvc DD 043519H
	DD	0588b0118H
	DD	0500a700bH
	DD	imagerel __GSHandlerCheck
	DD	02c384H
	DD	0c0H
	DD	080H
$unwind$ecpsvm_sortstats DD 010e01H
	DD	0220eH
$unwind$ecpsvm_showstats2 DD 022319H
	DD	01d0111H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$ecpsvm_showstats DD 030f01H
	DD	0700be20fH
	DD	0600aH
$unwind$ecpsvm_findstat DD 010e01H
	DD	0820eH
$unwind$ecpsvm_enadisaall DD 021b01H
	DD	013011bH
$unwind$ecpsvm_enable_disable DD 021a01H
	DD	019011aH
$unwind$ecpsvm_disable DD 010d01H
	DD	0420dH
$unwind$ecpsvm_enable DD 010d01H
	DD	0420dH
$unwind$ecpsvm_debug DD 010d01H
	DD	0420dH
$unwind$ecpsvm_nodebug DD 010d01H
	DD	0420dH
$unwind$ecpsvm_level DD 010d01H
	DD	0a20dH
$unwind$ecpsvm_helpcmd DD 010d01H
	DD	0c20dH
$unwind$ecpsvm_helpcmdlist DD 010401H
	DD	0c204H
$unwind$ecpsvm_command DD 010d01H
	DD	0a20dH
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
ce$ = 64
tv88 = 72
ac$ = 96
av$ = 104
ecpsvm_command PROC

; 5109 : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 5110 :     ECPSVM_CMDENT  *ce;
; 5111 : 
; 5112 :     // "ECPS:VM Command processor invoked"
; 5113 :     WRMSG( HHC01719, "I" );

  0000d	b9 01 00 00 00	 mov	 ecx, 1
  00012	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175668
  0001f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175669
  0002b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00030	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00035	41 b9 03 00 00
	00		 mov	 r9d, 3
  0003b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175670
  00042	ba f9 13 00 00	 mov	 edx, 5113		; 000013f9H
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175671
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5114 : 
; 5115 :     if (ac <= 1)

  00054	83 7c 24 60 01	 cmp	 DWORD PTR ac$[rsp], 1
  00059	7f 51		 jg	 SHORT $LN2@ecpsvm_com

; 5116 :     {
; 5117 :         // "No ECPS:VM subcommand. Type \"ecpsvm help\" for a list of valid subcommands"
; 5118 :         WRMSG( HHC01720, "E" );

  0005b	b9 01 00 00 00	 mov	 ecx, 1
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175673
  0006d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175674
  00079	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0007e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00083	41 b9 03 00 00
	00		 mov	 r9d, 3
  00089	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175675
  00090	ba fe 13 00 00	 mov	 edx, 5118		; 000013feH
  00095	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175676
  0009c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5119 :         return -1;

  000a2	b8 ff ff ff ff	 mov	 eax, -1
  000a7	e9 f6 00 00 00	 jmp	 $LN1@ecpsvm_com
$LN2@ecpsvm_com:

; 5120 :     }
; 5121 : 
; 5122 :     if (!(ce = ecpsvm_getcmdent( av[1] )))

  000ac	b8 08 00 00 00	 mov	 eax, 8
  000b1	48 6b c0 01	 imul	 rax, rax, 1
  000b5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR av$[rsp]
  000ba	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000be	e8 00 00 00 00	 call	 ecpsvm_getcmdent
  000c3	48 89 44 24 40	 mov	 QWORD PTR ce$[rsp], rax
  000c8	48 83 7c 24 40
	00		 cmp	 QWORD PTR ce$[rsp], 0
  000ce	75 6f		 jne	 SHORT $LN3@ecpsvm_com

; 5123 :     {
; 5124 :         // "Unknown ECPS:VM subcommand %s"
; 5125 :         WRMSG( HHC01721, "E", av[1] );

  000d0	b8 08 00 00 00	 mov	 eax, 8
  000d5	48 6b c0 01	 imul	 rax, rax, 1
  000d9	48 89 44 24 48	 mov	 QWORD PTR tv88[rsp], rax
  000de	b9 01 00 00 00	 mov	 ecx, 1
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000e9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR av$[rsp]
  000ee	48 8b 54 24 48	 mov	 rdx, QWORD PTR tv88[rsp]
  000f3	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000f7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175678
  00103	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00108	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175679
  0010f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00114	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00119	41 b9 03 00 00
	00		 mov	 r9d, 3
  0011f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175680
  00126	ba 05 14 00 00	 mov	 edx, 5125		; 00001405H
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175681
  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5126 :         return -1;

  00138	b8 ff ff ff ff	 mov	 eax, -1
  0013d	eb 63		 jmp	 SHORT $LN1@ecpsvm_com
$LN3@ecpsvm_com:

; 5127 :     }
; 5128 : 
; 5129 :     ce->fun( ac-1, av+1 );

  0013f	48 8b 44 24 68	 mov	 rax, QWORD PTR av$[rsp]
  00144	48 83 c0 08	 add	 rax, 8
  00148	8b 4c 24 60	 mov	 ecx, DWORD PTR ac$[rsp]
  0014c	ff c9		 dec	 ecx
  0014e	48 8b d0	 mov	 rdx, rax
  00151	48 8b 44 24 40	 mov	 rax, QWORD PTR ce$[rsp]
  00156	ff 50 10	 call	 QWORD PTR [rax+16]

; 5130 : 
; 5131 :     // "ECPS:VM Command processor complete"
; 5132 :     WRMSG( HHC01722, "I" );

  00159	b9 01 00 00 00	 mov	 ecx, 1
  0015e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00164	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175682
  0016b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00170	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175683
  00177	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0017c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00181	41 b9 03 00 00
	00		 mov	 r9d, 3
  00187	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175684
  0018e	ba 0c 14 00 00	 mov	 edx, 5132		; 0000140cH
  00193	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175685
  0019a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5133 :     return 0;

  001a0	33 c0		 xor	 eax, eax
$LN1@ecpsvm_com:

; 5134 : }

  001a2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001a6	c3		 ret	 0
ecpsvm_command ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
i$ = 80
ce$ = 88
ecpsvm_helpcmdlist PROC

; 5057 : {

  00000	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 5058 :     int i;
; 5059 :     ECPSVM_CMDENT *ce;
; 5060 : 
; 5061 :     for(i=0;ecpsvm_cmdtab[i].name;i++)

  00004	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0000c	eb 0a		 jmp	 SHORT $LN4@ecpsvm_hel
$LN2@ecpsvm_hel:
  0000e	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  00012	ff c0		 inc	 eax
  00014	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN4@ecpsvm_hel:
  00018	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  0001d	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:ecpsvm_cmdtab
  00028	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0002d	0f 84 82 00 00
	00		 je	 $LN3@ecpsvm_hel

; 5062 :     {
; 5063 :         ce=&ecpsvm_cmdtab[i];

  00033	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  00038	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:ecpsvm_cmdtab
  00043	48 03 c8	 add	 rcx, rax
  00046	48 8b c1	 mov	 rax, rcx
  00049	48 89 44 24 58	 mov	 QWORD PTR ce$[rsp], rax

; 5064 :         WRMSG(HHC01717,"I",ce->name,ce->expl);

  0004e	b9 01 00 00 00	 mov	 ecx, 1
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00059	48 8b 4c 24 58	 mov	 rcx, QWORD PTR ce$[rsp]
  0005e	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00062	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00067	48 8b 4c 24 58	 mov	 rcx, QWORD PTR ce$[rsp]
  0006c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0006f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00074	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175626
  0007b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175627
  00087	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0008c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00091	41 b9 03 00 00
	00		 mov	 r9d, 3
  00097	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175628
  0009e	ba c8 13 00 00	 mov	 edx, 5064		; 000013c8H
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175629
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5065 :     }

  000b0	e9 59 ff ff ff	 jmp	 $LN2@ecpsvm_hel
$LN3@ecpsvm_hel:

; 5066 :     return;
; 5067 : }

  000b5	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000b9	c3		 ret	 0
ecpsvm_helpcmdlist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
ce$ = 80
tv70 = 88
ac$ = 112
av$ = 120
ecpsvm_helpcmd PROC

; 5070 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 5071 :     ECPSVM_CMDENT *ce;
; 5072 :     if(ac==1)

  0000d	83 7c 24 70 01	 cmp	 DWORD PTR ac$[rsp], 1
  00012	75 0a		 jne	 SHORT $LN2@ecpsvm_hel

; 5073 :     {
; 5074 :         ecpsvm_helpcmdlist();

  00014	e8 00 00 00 00	 call	 ecpsvm_helpcmdlist

; 5075 :         return;

  00019	e9 f5 00 00 00	 jmp	 $LN1@ecpsvm_hel
$LN2@ecpsvm_hel:

; 5076 :     }
; 5077 :     ce=ecpsvm_getcmdent(av[1]);

  0001e	b8 08 00 00 00	 mov	 eax, 8
  00023	48 6b c0 01	 imul	 rax, rax, 1
  00027	48 8b 4c 24 78	 mov	 rcx, QWORD PTR av$[rsp]
  0002c	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00030	e8 00 00 00 00	 call	 ecpsvm_getcmdent
  00035	48 89 44 24 50	 mov	 QWORD PTR ce$[rsp], rax

; 5078 :     if(ce==NULL)

  0003a	48 83 7c 24 50
	00		 cmp	 QWORD PTR ce$[rsp], 0
  00040	75 6f		 jne	 SHORT $LN3@ecpsvm_hel

; 5079 :     {
; 5080 :         WRMSG(HHC01718,"E",av[1]);

  00042	b8 08 00 00 00	 mov	 eax, 8
  00047	48 6b c0 01	 imul	 rax, rax, 1
  0004b	48 89 44 24 58	 mov	 QWORD PTR tv70[rsp], rax
  00050	b9 01 00 00 00	 mov	 ecx, 1
  00055	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0005b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR av$[rsp]
  00060	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv70[rsp]
  00065	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00069	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175639
  00075	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175640
  00081	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00086	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0008b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00091	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175641
  00098	ba d8 13 00 00	 mov	 edx, 5080		; 000013d8H
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175642
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5081 :         ecpsvm_helpcmdlist();

  000aa	e8 00 00 00 00	 call	 ecpsvm_helpcmdlist

; 5082 :         return;

  000af	eb 62		 jmp	 SHORT $LN1@ecpsvm_hel
$LN3@ecpsvm_hel:

; 5083 :     }
; 5084 :     WRMSG(HHC01717,"I",ce->name,ce->help);

  000b1	b9 01 00 00 00	 mov	 ecx, 1
  000b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000bc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ce$[rsp]
  000c1	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  000c5	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000ca	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ce$[rsp]
  000cf	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175643
  000de	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175644
  000ea	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000ef	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f4	41 b9 03 00 00
	00		 mov	 r9d, 3
  000fa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175645
  00101	ba dc 13 00 00	 mov	 edx, 5084		; 000013dcH
  00106	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175646
  0010d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN1@ecpsvm_hel:

; 5085 :     return;
; 5086 : }

  00113	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00117	c3		 ret	 0
ecpsvm_helpcmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
lvl$ = 64
tv65 = 68
tv145 = 72
ac$ = 96
av$ = 104
ecpsvm_level PROC

; 5005 : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 5006 :     int lvl;
; 5007 : 
; 5008 :     WRMSG(HHC01712,"I",sysblk.ecpsvm.level);

  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00014	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  0001a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0001f	89 44 24 44	 mov	 DWORD PTR tv65[rsp], eax
  00023	b9 01 00 00 00	 mov	 ecx, 1
  00028	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0002e	8b 4c 24 44	 mov	 ecx, DWORD PTR tv65[rsp]
  00032	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175566
  0003d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175567
  00049	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0004e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00053	41 b9 03 00 00
	00		 mov	 r9d, 3
  00059	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175568
  00060	ba 90 13 00 00	 mov	 edx, 5008		; 00001390H
  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175569
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5009 :     if(!sysblk.ecpsvm.available)

  00072	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00079	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  0007f	c1 e8 11	 shr	 eax, 17
  00082	83 e0 01	 and	 eax, 1
  00085	85 c0		 test	 eax, eax
  00087	75 47		 jne	 SHORT $LN2@ecpsvm_lev

; 5010 :         WRMSG(HHC01713,"I");

  00089	b9 01 00 00 00	 mov	 ecx, 1
  0008e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175571
  0009b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175572
  000a7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000ac	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b1	41 b9 03 00 00
	00		 mov	 r9d, 3
  000b7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175573
  000be	ba 92 13 00 00	 mov	 edx, 5010		; 00001392H
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175574
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN2@ecpsvm_lev:

; 5011 : 
; 5012 :     if( ac > 1 )

  000d0	83 7c 24 60 01	 cmp	 DWORD PTR ac$[rsp], 1
  000d5	0f 8e 98 00 00
	00		 jle	 $LN3@ecpsvm_lev

; 5013 :     {
; 5014 :         lvl=atoi(av[1]);

  000db	b8 08 00 00 00	 mov	 eax, 8
  000e0	48 6b c0 01	 imul	 rax, rax, 1
  000e4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR av$[rsp]
  000e9	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  000f3	89 44 24 40	 mov	 DWORD PTR lvl$[rsp], eax

; 5015 :         WRMSG(HHC01714,"I",lvl);

  000f7	b9 01 00 00 00	 mov	 ecx, 1
  000fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00102	8b 4c 24 40	 mov	 ecx, DWORD PTR lvl$[rsp]
  00106	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0010a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175576
  00111	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00116	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175577
  0011d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00122	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00127	41 b9 03 00 00
	00		 mov	 r9d, 3
  0012d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175578
  00134	ba 97 13 00 00	 mov	 edx, 5015		; 00001397H
  00139	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175579
  00140	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5016 :         sysblk.ecpsvm.level=lvl;

  00146	8b 44 24 40	 mov	 eax, DWORD PTR lvl$[rsp]
  0014a	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0014f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00156	8b 89 44 13 00
	00		 mov	 ecx, DWORD PTR [rcx+4932]
  0015c	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  00162	0b c8		 or	 ecx, eax
  00164	8b c1		 mov	 eax, ecx
  00166	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0016d	89 81 44 13 00
	00		 mov	 DWORD PTR [rcx+4932], eax
$LN3@ecpsvm_lev:

; 5017 :     }
; 5018 : 
; 5019 :     if(sysblk.ecpsvm.level!=20)

  00173	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0017a	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00180	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00185	83 f8 14	 cmp	 eax, 20
  00188	0f 84 ac 00 00
	00		 je	 $LN4@ecpsvm_lev

; 5020 :     {
; 5021 :           WRMSG(HHC01715,"W",sysblk.ecpsvm.level);

  0018e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00195	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  0019b	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  001a0	89 44 24 48	 mov	 DWORD PTR tv145[rsp], eax
  001a4	b9 01 00 00 00	 mov	 ecx, 1
  001a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001af	8b 4c 24 48	 mov	 ecx, DWORD PTR tv145[rsp]
  001b3	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175581
  001be	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175582
  001ca	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001cf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001d4	41 b9 03 00 00
	00		 mov	 r9d, 3
  001da	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175583
  001e1	ba 9d 13 00 00	 mov	 edx, 5021		; 0000139dH
  001e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175584
  001ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 5022 :           WRMSG(HHC01716,"I");

  001f3	b9 01 00 00 00	 mov	 ecx, 1
  001f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175585
  00205	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0020a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175586
  00211	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00216	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0021b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00221	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175587
  00228	ba 9e 13 00 00	 mov	 edx, 5022		; 0000139eH
  0022d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175588
  00234	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN4@ecpsvm_lev:

; 5023 :     }
; 5024 : }

  0023a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0023e	c3		 ret	 0
ecpsvm_level ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
ac$ = 48
av$ = 56
ecpsvm_nodebug PROC

; 5002 : void ecpsvm_nodebug (int ac, char **av) { ecpsvm_enable_disable( ac, av, -1,  0 ); }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	45 33 c9	 xor	 r9d, r9d
  00010	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  00016	48 8b 54 24 38	 mov	 rdx, QWORD PTR av$[rsp]
  0001b	8b 4c 24 30	 mov	 ecx, DWORD PTR ac$[rsp]
  0001f	e8 00 00 00 00	 call	 ecpsvm_enable_disable
  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
ecpsvm_nodebug ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
ac$ = 48
av$ = 56
ecpsvm_debug PROC

; 5001 : void ecpsvm_debug   (int ac, char **av) { ecpsvm_enable_disable( ac, av, -1,  1 ); }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	41 b9 01 00 00
	00		 mov	 r9d, 1
  00013	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR av$[rsp]
  0001e	8b 4c 24 30	 mov	 ecx, DWORD PTR ac$[rsp]
  00022	e8 00 00 00 00	 call	 ecpsvm_enable_disable
  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
ecpsvm_debug ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
ac$ = 48
av$ = 56
ecpsvm_enable PROC

; 5000 : void ecpsvm_enable  (int ac, char **av) { ecpsvm_enable_disable( ac, av,  1, -1 ); }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  00013	41 b8 01 00 00
	00		 mov	 r8d, 1
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR av$[rsp]
  0001e	8b 4c 24 30	 mov	 ecx, DWORD PTR ac$[rsp]
  00022	e8 00 00 00 00	 call	 ecpsvm_enable_disable
  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
ecpsvm_enable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
ac$ = 48
av$ = 56
ecpsvm_disable PROC

; 4999 : void ecpsvm_disable (int ac, char **av) { ecpsvm_enable_disable( ac, av,  0, -1 ); }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	41 b9 ff ff ff
	ff		 mov	 r9d, -1
  00013	45 33 c0	 xor	 r8d, r8d
  00016	48 8b 54 24 38	 mov	 rdx, QWORD PTR av$[rsp]
  0001b	8b 4c 24 30	 mov	 ecx, DWORD PTR ac$[rsp]
  0001f	e8 00 00 00 00	 call	 ecpsvm_enable_disable
  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
ecpsvm_disable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
i$ = 96
es$ = 104
sacount$ = 112
sal$ = 120
cpcount$ = 128
cpl$ = 136
tv65 = 144
tv67 = 152
debugonoff$ = 160
fclass$ = 168
enadisa$ = 176
tv220 = 184
ac$ = 208
av$ = 216
onoff$ = 224
debug$ = 232
ecpsvm_enable_disable PROC

; 4933 : {

$LN19:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 4934 :     char        *fclass;
; 4935 :     char        *enadisa,*debugonoff;
; 4936 :     int i;
; 4937 : 
; 4938 :     size_t      sacount,cpcount;
; 4939 :     ECPSVM_STAT *es;
; 4940 :     ECPSVM_STAT *sal,*cpl;
; 4941 : 
; 4942 :     sal=(ECPSVM_STAT *)&ecpsvm_sastats;

  0001a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:ecpsvm_sastats
  00021	48 89 44 24 78	 mov	 QWORD PTR sal$[rsp], rax

; 4943 :     cpl=(ECPSVM_STAT *)&ecpsvm_cpstats;

  00026	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:ecpsvm_cpstats
  0002d	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR cpl$[rsp], rax

; 4944 :     sacount=sizeof(ecpsvm_sastats)/sizeof(ECPSVM_STAT);

  00035	48 c7 44 24 70
	0c 00 00 00	 mov	 QWORD PTR sacount$[rsp], 12

; 4945 :     cpcount=sizeof(ecpsvm_cpstats)/sizeof(ECPSVM_STAT);

  0003e	48 c7 84 24 80
	00 00 00 19 00
	00 00		 mov	 QWORD PTR cpcount$[rsp], 25

; 4946 : 
; 4947 :     enadisa=onoff?"Enabled":"Disabled";

  0004a	83 bc 24 e0 00
	00 00 00	 cmp	 DWORD PTR onoff$[rsp], 0
  00052	74 11		 je	 SHORT $LN15@ecpsvm_ena
  00054	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG175495
  0005b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv65[rsp], rax
  00063	eb 0f		 jmp	 SHORT $LN16@ecpsvm_ena
$LN15@ecpsvm_ena:
  00065	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG175496
  0006c	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv65[rsp], rax
$LN16@ecpsvm_ena:
  00074	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv65[rsp]
  0007c	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR enadisa$[rsp], rax

; 4948 :     debugonoff=debug?"On":"Off";

  00084	83 bc 24 e8 00
	00 00 00	 cmp	 DWORD PTR debug$[rsp], 0
  0008c	74 11		 je	 SHORT $LN17@ecpsvm_ena
  0008e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG175497
  00095	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv67[rsp], rax
  0009d	eb 0f		 jmp	 SHORT $LN18@ecpsvm_ena
$LN17@ecpsvm_ena:
  0009f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG175498
  000a6	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv67[rsp], rax
$LN18@ecpsvm_ena:
  000ae	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv67[rsp]
  000b6	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR debugonoff$[rsp], rax

; 4949 :     if(ac==1)

  000be	83 bc 24 d0 00
	00 00 01	 cmp	 DWORD PTR ac$[rsp], 1
  000c6	0f 85 ee 00 00
	00		 jne	 $LN5@ecpsvm_ena

; 4950 :     {
; 4951 :         ecpsvm_enadisaall("VM ASSIST",sal,sacount,onoff,debug);

  000cc	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR debug$[rsp]
  000d3	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000d7	44 8b 8c 24 e0
	00 00 00	 mov	 r9d, DWORD PTR onoff$[rsp]
  000df	4c 8b 44 24 70	 mov	 r8, QWORD PTR sacount$[rsp]
  000e4	48 8b 54 24 78	 mov	 rdx, QWORD PTR sal$[rsp]
  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175500
  000f0	e8 00 00 00 00	 call	 ecpsvm_enadisaall

; 4952 :         ecpsvm_enadisaall("CP ASSIST",cpl,cpcount,onoff,debug);

  000f5	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR debug$[rsp]
  000fc	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00100	44 8b 8c 24 e0
	00 00 00	 mov	 r9d, DWORD PTR onoff$[rsp]
  00108	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR cpcount$[rsp]
  00110	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR cpl$[rsp]
  00118	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175501
  0011f	e8 00 00 00 00	 call	 ecpsvm_enadisaall

; 4953 :         if(debug>=0)

  00124	83 bc 24 e8 00
	00 00 00	 cmp	 DWORD PTR debug$[rsp], 0
  0012c	0f 8c 83 00 00
	00		 jl	 $LN6@ecpsvm_ena

; 4954 :         {
; 4955 :             sysblk.ecpsvm.debug=debug;

  00132	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR debug$[rsp]
  00139	83 e0 01	 and	 eax, 1
  0013c	c1 e0 10	 shl	 eax, 16
  0013f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00146	8b 89 44 13 00
	00		 mov	 ecx, DWORD PTR [rcx+4932]
  0014c	0f ba f1 10	 btr	 ecx, 16
  00150	0b c8		 or	 ecx, eax
  00152	8b c1		 mov	 eax, ecx
  00154	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0015b	89 81 44 13 00
	00		 mov	 DWORD PTR [rcx+4932], eax

; 4956 :             WRMSG(HHC01709,"I",debugonoff);

  00161	b9 01 00 00 00	 mov	 ecx, 1
  00166	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0016c	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR debugonoff$[rsp]
  00174	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00179	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175503
  00180	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00185	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175504
  0018c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00191	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00196	41 b9 03 00 00
	00		 mov	 r9d, 3
  0019c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175505
  001a3	ba 5c 13 00 00	 mov	 edx, 4956		; 0000135cH
  001a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175506
  001af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN6@ecpsvm_ena:

; 4957 :         }
; 4958 :         return;

  001b5	e9 44 03 00 00	 jmp	 $LN1@ecpsvm_ena
$LN5@ecpsvm_ena:

; 4959 :     }
; 4960 :     for(i=1;i<ac;i++)

  001ba	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  001c2	eb 0a		 jmp	 SHORT $LN4@ecpsvm_ena
$LN2@ecpsvm_ena:
  001c4	8b 44 24 60	 mov	 eax, DWORD PTR i$[rsp]
  001c8	ff c0		 inc	 eax
  001ca	89 44 24 60	 mov	 DWORD PTR i$[rsp], eax
$LN4@ecpsvm_ena:
  001ce	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR ac$[rsp]
  001d5	39 44 24 60	 cmp	 DWORD PTR i$[rsp], eax
  001d9	0f 8d 1f 03 00
	00		 jge	 $LN3@ecpsvm_ena

; 4961 :     {
; 4962 :         if(strcasecmp(av[i],"ALL")==0)

  001df	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  001e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG175508
  001eb	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR av$[rsp]
  001f3	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  001f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  001fd	85 c0		 test	 eax, eax
  001ff	75 5d		 jne	 SHORT $LN7@ecpsvm_ena

; 4963 :         {
; 4964 :             ecpsvm_enadisaall("VM ASSIST",sal,sacount,onoff,debug);

  00201	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR debug$[rsp]
  00208	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0020c	44 8b 8c 24 e0
	00 00 00	 mov	 r9d, DWORD PTR onoff$[rsp]
  00214	4c 8b 44 24 70	 mov	 r8, QWORD PTR sacount$[rsp]
  00219	48 8b 54 24 78	 mov	 rdx, QWORD PTR sal$[rsp]
  0021e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175509
  00225	e8 00 00 00 00	 call	 ecpsvm_enadisaall

; 4965 :             ecpsvm_enadisaall("CP ASSIST",cpl,cpcount,onoff,debug);

  0022a	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR debug$[rsp]
  00231	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00235	44 8b 8c 24 e0
	00 00 00	 mov	 r9d, DWORD PTR onoff$[rsp]
  0023d	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR cpcount$[rsp]
  00245	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR cpl$[rsp]
  0024d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175510
  00254	e8 00 00 00 00	 call	 ecpsvm_enadisaall

; 4966 :             return;

  00259	e9 a0 02 00 00	 jmp	 $LN1@ecpsvm_ena
$LN7@ecpsvm_ena:

; 4967 :         }
; 4968 :         if(strcasecmp(av[i],"VMA")==0)

  0025e	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  00263	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG175512
  0026a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR av$[rsp]
  00272	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00276	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0027c	85 c0		 test	 eax, eax
  0027e	75 2e		 jne	 SHORT $LN8@ecpsvm_ena

; 4969 :         {
; 4970 :             ecpsvm_enadisaall("VM ASSIST",sal,sacount,onoff,debug);

  00280	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR debug$[rsp]
  00287	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0028b	44 8b 8c 24 e0
	00 00 00	 mov	 r9d, DWORD PTR onoff$[rsp]
  00293	4c 8b 44 24 70	 mov	 r8, QWORD PTR sacount$[rsp]
  00298	48 8b 54 24 78	 mov	 rdx, QWORD PTR sal$[rsp]
  0029d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175513
  002a4	e8 00 00 00 00	 call	 ecpsvm_enadisaall

; 4971 :             return;

  002a9	e9 50 02 00 00	 jmp	 $LN1@ecpsvm_ena
$LN8@ecpsvm_ena:

; 4972 :         }
; 4973 :         if(strcasecmp(av[i],"CPA")==0)

  002ae	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  002b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG175515
  002ba	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR av$[rsp]
  002c2	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  002c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  002cc	85 c0		 test	 eax, eax
  002ce	75 34		 jne	 SHORT $LN9@ecpsvm_ena

; 4974 :         {
; 4975 :             ecpsvm_enadisaall("CP ASSIST",cpl,cpcount,onoff,debug);

  002d0	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR debug$[rsp]
  002d7	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  002db	44 8b 8c 24 e0
	00 00 00	 mov	 r9d, DWORD PTR onoff$[rsp]
  002e3	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR cpcount$[rsp]
  002eb	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR cpl$[rsp]
  002f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175516
  002fa	e8 00 00 00 00	 call	 ecpsvm_enadisaall

; 4976 :             return;

  002ff	e9 fa 01 00 00	 jmp	 $LN1@ecpsvm_ena
$LN9@ecpsvm_ena:

; 4977 :         }
; 4978 :         es=ecpsvm_findstat(av[i],&fclass);

  00304	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  00309	48 8d 94 24 a8
	00 00 00	 lea	 rdx, QWORD PTR fclass$[rsp]
  00311	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR av$[rsp]
  00319	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0031d	e8 00 00 00 00	 call	 ecpsvm_findstat
  00322	48 89 44 24 68	 mov	 QWORD PTR es$[rsp], rax

; 4979 :         if(es!=NULL)

  00327	48 83 7c 24 68
	00		 cmp	 QWORD PTR es$[rsp], 0
  0032d	0f 84 59 01 00
	00		 je	 $LN10@ecpsvm_ena

; 4980 :         {
; 4981 :             if(onoff>=0)

  00333	83 bc 24 e0 00
	00 00 00	 cmp	 DWORD PTR onoff$[rsp], 0
  0033b	0f 8c 9d 00 00
	00		 jl	 $LN12@ecpsvm_ena

; 4982 :             {
; 4983 :                 es->enabled=onoff;

  00341	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR onoff$[rsp]
  00348	83 e0 01	 and	 eax, 1
  0034b	d1 e0		 shl	 eax, 1
  0034d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR es$[rsp]
  00352	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  00355	83 e1 fd	 and	 ecx, -3			; fffffffdH
  00358	0b c8		 or	 ecx, eax
  0035a	8b c1		 mov	 eax, ecx
  0035c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR es$[rsp]
  00361	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 4984 :                 WRMSG(HHC01710,"I",fclass,es->name,"",enadisa);

  00364	b9 01 00 00 00	 mov	 ecx, 1
  00369	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0036f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR enadisa$[rsp]
  00377	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0037c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175520
  00383	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00388	48 8b 4c 24 68	 mov	 rcx, QWORD PTR es$[rsp]
  0038d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00390	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00395	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR fclass$[rsp]
  0039d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175521
  003a9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175522
  003b5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003ba	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003bf	41 b9 03 00 00
	00		 mov	 r9d, 3
  003c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175523
  003cc	ba 78 13 00 00	 mov	 edx, 4984		; 00001378H
  003d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175524
  003d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN12@ecpsvm_ena:

; 4985 :             }
; 4986 :             if(debug>=0)

  003de	83 bc 24 e8 00
	00 00 00	 cmp	 DWORD PTR debug$[rsp], 0
  003e6	0f 8c 9e 00 00
	00		 jl	 $LN13@ecpsvm_ena

; 4987 :             {
; 4988 :                 es->debug=debug;

  003ec	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR debug$[rsp]
  003f3	83 e0 01	 and	 eax, 1
  003f6	c1 e0 02	 shl	 eax, 2
  003f9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR es$[rsp]
  003fe	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  00401	83 e1 fb	 and	 ecx, -5			; fffffffbH
  00404	0b c8		 or	 ecx, eax
  00406	8b c1		 mov	 eax, ecx
  00408	48 8b 4c 24 68	 mov	 rcx, QWORD PTR es$[rsp]
  0040d	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 4989 :                 WRMSG(HHC01710,"I",fclass,es->name,"Debug ",debugonoff);

  00410	b9 01 00 00 00	 mov	 ecx, 1
  00415	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0041b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR debugonoff$[rsp]
  00423	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00428	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175526
  0042f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00434	48 8b 4c 24 68	 mov	 rcx, QWORD PTR es$[rsp]
  00439	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0043c	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00441	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR fclass$[rsp]
  00449	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0044e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175527
  00455	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0045a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175528
  00461	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00466	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0046b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00471	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175529
  00478	ba 7d 13 00 00	 mov	 edx, 4989		; 0000137dH
  0047d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175530
  00484	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN13@ecpsvm_ena:

; 4990 :             }
; 4991 :         }

  0048a	eb 6d		 jmp	 SHORT $LN11@ecpsvm_ena
$LN10@ecpsvm_ena:

; 4992 :         else
; 4993 :         {
; 4994 :             WRMSG(HHC01711,"I",av[i]);

  0048c	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  00491	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv220[rsp], rax
  00499	b9 01 00 00 00	 mov	 ecx, 1
  0049e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004a4	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR av$[rsp]
  004ac	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR tv220[rsp]
  004b4	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  004b8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175531
  004c4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175532
  004d0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004d5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004da	41 b9 03 00 00
	00		 mov	 r9d, 3
  004e0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175533
  004e7	ba 82 13 00 00	 mov	 edx, 4994		; 00001382H
  004ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175534
  004f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN11@ecpsvm_ena:

; 4995 :         }
; 4996 :     }

  004f9	e9 c6 fc ff ff	 jmp	 $LN2@ecpsvm_ena
$LN3@ecpsvm_ena:
$LN1@ecpsvm_ena:

; 4997 : }

  004fe	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00505	c3		 ret	 0
ecpsvm_enable_disable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
es$ = 96
i$ = 104
tv65 = 112
tv67 = 120
enadisa$ = 128
debugonoff$ = 136
fclass$ = 160
tbl$ = 168
count$ = 176
onoff$ = 184
debug$ = 192
ecpsvm_enadisaall PROC

; 4902 : {

$LN14:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 4903 :     ECPSVM_STAT *es;
; 4904 :     size_t i;
; 4905 :     char *enadisa,*debugonoff;
; 4906 :     enadisa=onoff?"Enabled":"Disabled";

  0001b	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR onoff$[rsp], 0
  00023	74 0e		 je	 SHORT $LN10@ecpsvm_ena
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG175440
  0002c	48 89 44 24 70	 mov	 QWORD PTR tv65[rsp], rax
  00031	eb 0c		 jmp	 SHORT $LN11@ecpsvm_ena
$LN10@ecpsvm_ena:
  00033	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG175441
  0003a	48 89 44 24 70	 mov	 QWORD PTR tv65[rsp], rax
$LN11@ecpsvm_ena:
  0003f	48 8b 44 24 70	 mov	 rax, QWORD PTR tv65[rsp]
  00044	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR enadisa$[rsp], rax

; 4907 :     debugonoff=debug?"On":"Off";

  0004c	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR debug$[rsp], 0
  00054	74 0e		 je	 SHORT $LN12@ecpsvm_ena
  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG175442
  0005d	48 89 44 24 78	 mov	 QWORD PTR tv67[rsp], rax
  00062	eb 0c		 jmp	 SHORT $LN13@ecpsvm_ena
$LN12@ecpsvm_ena:
  00064	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG175443
  0006b	48 89 44 24 78	 mov	 QWORD PTR tv67[rsp], rax
$LN13@ecpsvm_ena:
  00070	48 8b 44 24 78	 mov	 rax, QWORD PTR tv67[rsp]
  00075	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR debugonoff$[rsp], rax

; 4908 :     for(i=0;i<count;i++)

  0007d	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00086	eb 0d		 jmp	 SHORT $LN4@ecpsvm_ena
$LN2@ecpsvm_ena:
  00088	48 8b 44 24 68	 mov	 rax, QWORD PTR i$[rsp]
  0008d	48 ff c0	 inc	 rax
  00090	48 89 44 24 68	 mov	 QWORD PTR i$[rsp], rax
$LN4@ecpsvm_ena:
  00095	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR count$[rsp]
  0009d	48 39 44 24 68	 cmp	 QWORD PTR i$[rsp], rax
  000a2	0f 83 75 01 00
	00		 jae	 $LN3@ecpsvm_ena

; 4909 :     {
; 4910 :         es=&tbl[i];

  000a8	48 6b 44 24 68
	20		 imul	 rax, QWORD PTR i$[rsp], 32 ; 00000020H
  000ae	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tbl$[rsp]
  000b6	48 03 c8	 add	 rcx, rax
  000b9	48 8b c1	 mov	 rax, rcx
  000bc	48 89 44 24 60	 mov	 QWORD PTR es$[rsp], rax

; 4911 :         if(onoff>=0)

  000c1	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR onoff$[rsp], 0
  000c9	0f 8c 9d 00 00
	00		 jl	 $LN5@ecpsvm_ena

; 4912 :         {
; 4913 :             es->enabled=onoff;

  000cf	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR onoff$[rsp]
  000d6	83 e0 01	 and	 eax, 1
  000d9	d1 e0		 shl	 eax, 1
  000db	48 8b 4c 24 60	 mov	 rcx, QWORD PTR es$[rsp]
  000e0	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  000e3	83 e1 fd	 and	 ecx, -3			; fffffffdH
  000e6	0b c8		 or	 ecx, eax
  000e8	8b c1		 mov	 eax, ecx
  000ea	48 8b 4c 24 60	 mov	 rcx, QWORD PTR es$[rsp]
  000ef	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 4914 :             WRMSG(HHC01707,"I",fclass,es->name," ", enadisa);

  000f2	b9 01 00 00 00	 mov	 ecx, 1
  000f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000fd	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR enadisa$[rsp]
  00105	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0010a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175445
  00111	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00116	48 8b 4c 24 60	 mov	 rcx, QWORD PTR es$[rsp]
  0011b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0011e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00123	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fclass$[rsp]
  0012b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00130	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175446
  00137	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175447
  00143	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00148	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00153	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175448
  0015a	ba 32 13 00 00	 mov	 edx, 4914		; 00001332H
  0015f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175449
  00166	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN5@ecpsvm_ena:

; 4915 :         }
; 4916 :         if(debug>=0)

  0016c	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR debug$[rsp], 0
  00174	0f 8c 9e 00 00
	00		 jl	 $LN6@ecpsvm_ena

; 4917 :         {
; 4918 :             es->debug=debug;

  0017a	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR debug$[rsp]
  00181	83 e0 01	 and	 eax, 1
  00184	c1 e0 02	 shl	 eax, 2
  00187	48 8b 4c 24 60	 mov	 rcx, QWORD PTR es$[rsp]
  0018c	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  0018f	83 e1 fb	 and	 ecx, -5			; fffffffbH
  00192	0b c8		 or	 ecx, eax
  00194	8b c1		 mov	 eax, ecx
  00196	48 8b 4c 24 60	 mov	 rcx, QWORD PTR es$[rsp]
  0019b	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 4919 :             WRMSG(HHC01707,"I",fclass,es->name," Debug ", debugonoff);

  0019e	b9 01 00 00 00	 mov	 ecx, 1
  001a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001a9	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR debugonoff$[rsp]
  001b1	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  001b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175451
  001bd	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  001c2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR es$[rsp]
  001c7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001ca	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001cf	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fclass$[rsp]
  001d7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175452
  001e3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175453
  001ef	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001f4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f9	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ff	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175454
  00206	ba 37 13 00 00	 mov	 edx, 4919		; 00001337H
  0020b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175455
  00212	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN6@ecpsvm_ena:

; 4920 :         }
; 4921 :     }

  00218	e9 6b fe ff ff	 jmp	 $LN2@ecpsvm_ena
$LN3@ecpsvm_ena:

; 4922 :     if(onoff>=0)

  0021d	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR onoff$[rsp], 0
  00225	7c 6d		 jl	 SHORT $LN7@ecpsvm_ena

; 4923 :     {
; 4924 :         WRMSG(HHC01708,"I",fclass,"",enadisa);

  00227	b9 01 00 00 00	 mov	 ecx, 1
  0022c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00232	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR enadisa$[rsp]
  0023a	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0023f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175457
  00246	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0024b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fclass$[rsp]
  00253	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00258	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175458
  0025f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00264	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175459
  0026b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00270	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00275	41 b9 03 00 00
	00		 mov	 r9d, 3
  0027b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175460
  00282	ba 3c 13 00 00	 mov	 edx, 4924		; 0000133cH
  00287	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175461
  0028e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN7@ecpsvm_ena:

; 4925 :     }
; 4926 :     if(debug>=0)

  00294	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR debug$[rsp], 0
  0029c	7c 6d		 jl	 SHORT $LN8@ecpsvm_ena

; 4927 :     {
; 4928 :         WRMSG(HHC01708,"I",fclass,"Debug ",debugonoff);

  0029e	b9 01 00 00 00	 mov	 ecx, 1
  002a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002a9	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR debugonoff$[rsp]
  002b1	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  002b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175463
  002bd	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002c2	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fclass$[rsp]
  002ca	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175464
  002d6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175465
  002e2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002ec	41 b9 03 00 00
	00		 mov	 r9d, 3
  002f2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175466
  002f9	ba 40 13 00 00	 mov	 edx, 4928		; 00001340H
  002fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175467
  00305	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN8@ecpsvm_ena:

; 4929 :     }
; 4930 : }

  0030b	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00312	c3		 ret	 0
ecpsvm_enadisaall ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
i$ = 32
fcount$ = 36
es$ = 40
esl$ = 48
feature$ = 80
fclass$ = 88
ecpsvm_findstat PROC

; 4871 : {

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 4872 :     ECPSVM_STAT *es;
; 4873 :     ECPSVM_STAT *esl;
; 4874 :     int i;
; 4875 :     int fcount;
; 4876 :     fcount=sizeof(ecpsvm_sastats)/sizeof(ECPSVM_STAT);

  0000e	c7 44 24 24 0c
	00 00 00	 mov	 DWORD PTR fcount$[rsp], 12

; 4877 :     esl=(ECPSVM_STAT *)&ecpsvm_sastats;

  00016	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:ecpsvm_sastats
  0001d	48 89 44 24 30	 mov	 QWORD PTR esl$[rsp], rax

; 4878 :     for(i=0;i<fcount;i++)

  00022	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0002a	eb 0a		 jmp	 SHORT $LN4@ecpsvm_fin
$LN2@ecpsvm_fin:
  0002c	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00030	ff c0		 inc	 eax
  00032	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@ecpsvm_fin:
  00036	8b 44 24 24	 mov	 eax, DWORD PTR fcount$[rsp]
  0003a	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  0003e	7d 48		 jge	 SHORT $LN3@ecpsvm_fin

; 4879 :     {
; 4880 :         es=&esl[i];

  00040	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00045	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR esl$[rsp]
  0004e	48 03 c8	 add	 rcx, rax
  00051	48 8b c1	 mov	 rax, rcx
  00054	48 89 44 24 28	 mov	 QWORD PTR es$[rsp], rax

; 4881 :         if(strcasecmp(feature,es->name)==0)

  00059	48 8b 44 24 28	 mov	 rax, QWORD PTR es$[rsp]
  0005e	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00061	48 8b 4c 24 50	 mov	 rcx, QWORD PTR feature$[rsp]
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0006c	85 c0		 test	 eax, eax
  0006e	75 16		 jne	 SHORT $LN8@ecpsvm_fin

; 4882 :         {
; 4883 :             *fclass="VM ASSIST";

  00070	48 8b 44 24 58	 mov	 rax, QWORD PTR fclass$[rsp]
  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175418
  0007c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 4884 :             return(es);

  0007f	48 8b 44 24 28	 mov	 rax, QWORD PTR es$[rsp]
  00084	eb 7e		 jmp	 SHORT $LN1@ecpsvm_fin
$LN8@ecpsvm_fin:

; 4885 :         }
; 4886 :     }

  00086	eb a4		 jmp	 SHORT $LN2@ecpsvm_fin
$LN3@ecpsvm_fin:

; 4887 :     esl=(ECPSVM_STAT *)&ecpsvm_cpstats;

  00088	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:ecpsvm_cpstats
  0008f	48 89 44 24 30	 mov	 QWORD PTR esl$[rsp], rax

; 4888 :     fcount=sizeof(ecpsvm_cpstats)/sizeof(ECPSVM_STAT);

  00094	c7 44 24 24 19
	00 00 00	 mov	 DWORD PTR fcount$[rsp], 25

; 4889 :     for(i=0;i<fcount;i++)

  0009c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000a4	eb 0a		 jmp	 SHORT $LN7@ecpsvm_fin
$LN5@ecpsvm_fin:
  000a6	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000aa	ff c0		 inc	 eax
  000ac	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN7@ecpsvm_fin:
  000b0	8b 44 24 24	 mov	 eax, DWORD PTR fcount$[rsp]
  000b4	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  000b8	7d 48		 jge	 SHORT $LN6@ecpsvm_fin

; 4890 :     {
; 4891 :         es=&esl[i];

  000ba	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  000bf	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  000c3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR esl$[rsp]
  000c8	48 03 c8	 add	 rcx, rax
  000cb	48 8b c1	 mov	 rax, rcx
  000ce	48 89 44 24 28	 mov	 QWORD PTR es$[rsp], rax

; 4892 :         if(strcasecmp(feature,es->name)==0)

  000d3	48 8b 44 24 28	 mov	 rax, QWORD PTR es$[rsp]
  000d8	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000db	48 8b 4c 24 50	 mov	 rcx, QWORD PTR feature$[rsp]
  000e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  000e6	85 c0		 test	 eax, eax
  000e8	75 16		 jne	 SHORT $LN9@ecpsvm_fin

; 4893 :         {
; 4894 :             *fclass="CP ASSIST";

  000ea	48 8b 44 24 58	 mov	 rax, QWORD PTR fclass$[rsp]
  000ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175420
  000f6	48 89 08	 mov	 QWORD PTR [rax], rcx

; 4895 :             return(es);

  000f9	48 8b 44 24 28	 mov	 rax, QWORD PTR es$[rsp]
  000fe	eb 04		 jmp	 SHORT $LN1@ecpsvm_fin
$LN9@ecpsvm_fin:

; 4896 :         }
; 4897 :     }

  00100	eb a4		 jmp	 SHORT $LN5@ecpsvm_fin
$LN6@ecpsvm_fin:

; 4898 :     return(NULL);

  00102	33 c0		 xor	 eax, eax
$LN1@ecpsvm_fin:

; 4899 : }

  00104	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00108	c3		 ret	 0
ecpsvm_findstat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
ar$ = 96
asize$ = 104
ac$ = 144
av$ = 152
ecpsvm_showstats PROC

; 4827 : {

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	56		 push	 rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 78	 sub	 rsp, 120		; 00000078H
$LN4@ecpsvm_sho:

; 4828 :     size_t      asize;
; 4829 :     ECPSVM_STAT *ar;
; 4830 : 
; 4831 :     UNREFERENCED( ac );

  0000f	33 c0		 xor	 eax, eax
  00011	85 c0		 test	 eax, eax
  00013	75 fa		 jne	 SHORT $LN4@ecpsvm_sho
$LN7@ecpsvm_sho:

; 4832 :     UNREFERENCED( av );

  00015	33 c0		 xor	 eax, eax
  00017	85 c0		 test	 eax, eax
  00019	75 fa		 jne	 SHORT $LN7@ecpsvm_sho

; 4833 : 
; 4834 :     WRMSG( HHC01725, "I", ECPSCODEVER);     // ECPS:VM Code version %.02f

  0001b	b9 01 00 00 00	 mov	 ecx, 1
  00020	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00026	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ffe147ae147ae14
  0002e	f2 0f 11 44 24
	38		 movsd	 QWORD PTR [rsp+56], xmm0
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175355
  0003b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175356
  00047	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0004c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00051	41 b9 03 00 00
	00		 mov	 r9d, 3
  00057	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175357
  0005e	ba e2 12 00 00	 mov	 edx, 4834		; 000012e2H
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175358
  0006a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4835 :     if (sysblk.ecpsvm.freetrap)

  00070	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00077	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  0007d	c1 e8 13	 shr	 eax, 19
  00080	83 e0 01	 and	 eax, 1
  00083	85 c0		 test	 eax, eax
  00085	74 47		 je	 SHORT $LN8@ecpsvm_sho

; 4836 :     {
; 4837 :         // "ECPS:VM Operating with CP FREE/FRET trap in effect"
; 4838 :         WRMSG( HHC01724, "I" );

  00087	b9 01 00 00 00	 mov	 ecx, 1
  0008c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00092	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175360
  00099	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175361
  000a5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000aa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000af	41 b9 03 00 00
	00		 mov	 r9d, 3
  000b5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175362
  000bc	ba e6 12 00 00	 mov	 edx, 4838		; 000012e6H
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175363
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN8@ecpsvm_sho:

; 4839 :     }
; 4840 : 
; 4841 :     // "+-----------+------------+------------+-------+"
; 4842 :     WRMSG( HHC01702, "I" );

  000ce	b9 01 00 00 00	 mov	 ecx, 1
  000d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175364
  000e0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175365
  000ec	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f6	41 b9 03 00 00
	00		 mov	 r9d, 3
  000fc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175366
  00103	ba ea 12 00 00	 mov	 edx, 4842		; 000012eaH
  00108	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175367
  0010f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4843 :     // "| %-9s | %10s | %10s | %-5s |"
; 4844 :     WRMSG( HHC01706, "I", "VM ASSIST", "Calls  ", "Hits  ", "Ratio" );

  00115	b9 01 00 00 00	 mov	 ecx, 1
  0011a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00120	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175368
  00127	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0012c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175369
  00133	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00138	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175370
  0013f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00144	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175371
  0014b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00150	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175372
  00157	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0015c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175373
  00163	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00168	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0016d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00173	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175374
  0017a	ba ec 12 00 00	 mov	 edx, 4844		; 000012ecH
  0017f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175375
  00186	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4845 :     // "+-----------+------------+------------+-------+"
; 4846 :     WRMSG(HHC01702,"I");

  0018c	b9 01 00 00 00	 mov	 ecx, 1
  00191	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00197	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175376
  0019e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175377
  001aa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001af	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b4	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175378
  001c1	ba ee 12 00 00	 mov	 edx, 4846		; 000012eeH
  001c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175379
  001cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4847 : 
; 4848 :     ar = malloc( sizeof( ecpsvm_sastats ));

  001d3	b9 80 01 00 00	 mov	 ecx, 384		; 00000180H
  001d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  001de	48 89 44 24 60	 mov	 QWORD PTR ar$[rsp], rax

; 4849 :     memcpy( ar, &ecpsvm_sastats, sizeof( ecpsvm_sastats ));

  001e3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:ecpsvm_sastats
  001ea	48 8b 7c 24 60	 mov	 rdi, QWORD PTR ar$[rsp]
  001ef	48 8b f0	 mov	 rsi, rax
  001f2	b9 80 01 00 00	 mov	 ecx, 384		; 00000180H
  001f7	f3 a4		 rep movsb

; 4850 :     asize = sizeof( ecpsvm_sastats ) / sizeof( ECPSVM_STAT );

  001f9	48 c7 44 24 68
	0c 00 00 00	 mov	 QWORD PTR asize$[rsp], 12

; 4851 :     qsort( ar, asize, sizeof( ECPSVM_STAT ), ecpsvm_sortstats );

  00202	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:ecpsvm_sortstats
  00209	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  0020f	48 8b 54 24 68	 mov	 rdx, QWORD PTR asize$[rsp]
  00214	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ar$[rsp]
  00219	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 4852 :     ecpsvm_showstats2( ar, asize );

  0021f	48 8b 54 24 68	 mov	 rdx, QWORD PTR asize$[rsp]
  00224	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ar$[rsp]
  00229	e8 00 00 00 00	 call	 ecpsvm_showstats2

; 4853 :     free( ar );

  0022e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ar$[rsp]
  00233	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 4854 : 
; 4855 :     // "+-----------+------------+------------+-------+"
; 4856 :     WRMSG( HHC01702, "I" );

  00239	b9 01 00 00 00	 mov	 ecx, 1
  0023e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00244	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175380
  0024b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00250	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175381
  00257	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0025c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00261	41 b9 03 00 00
	00		 mov	 r9d, 3
  00267	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175382
  0026e	ba f8 12 00 00	 mov	 edx, 4856		; 000012f8H
  00273	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175383
  0027a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4857 :     // "| %-9s | %10s | %10s | %-5s |"
; 4858 :     WRMSG( HHC01706, "I", "CP ASSIST", "Calls  ", "Hits  ", "Ratio" );

  00280	b9 01 00 00 00	 mov	 ecx, 1
  00285	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0028b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175384
  00292	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00297	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175385
  0029e	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  002a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175386
  002aa	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175387
  002b6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175388
  002c2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175389
  002ce	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002d3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002d8	41 b9 03 00 00
	00		 mov	 r9d, 3
  002de	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175390
  002e5	ba fa 12 00 00	 mov	 edx, 4858		; 000012faH
  002ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175391
  002f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4859 :     // "+-----------+------------+------------+-------+"
; 4860 :     WRMSG( HHC01702, "I" );

  002f7	b9 01 00 00 00	 mov	 ecx, 1
  002fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00302	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175392
  00309	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0030e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175393
  00315	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0031a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0031f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00325	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175394
  0032c	ba fc 12 00 00	 mov	 edx, 4860		; 000012fcH
  00331	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175395
  00338	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4861 : 
; 4862 :     ar = malloc( sizeof( ecpsvm_cpstats ));

  0033e	b9 20 03 00 00	 mov	 ecx, 800		; 00000320H
  00343	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00349	48 89 44 24 60	 mov	 QWORD PTR ar$[rsp], rax

; 4863 :     memcpy( ar, &ecpsvm_cpstats, sizeof( ecpsvm_cpstats ));

  0034e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:ecpsvm_cpstats
  00355	48 8b 7c 24 60	 mov	 rdi, QWORD PTR ar$[rsp]
  0035a	48 8b f0	 mov	 rsi, rax
  0035d	b9 20 03 00 00	 mov	 ecx, 800		; 00000320H
  00362	f3 a4		 rep movsb

; 4864 :     asize = sizeof( ecpsvm_cpstats ) / sizeof( ECPSVM_STAT );

  00364	48 c7 44 24 68
	19 00 00 00	 mov	 QWORD PTR asize$[rsp], 25

; 4865 :     qsort( ar, asize, sizeof( ECPSVM_STAT ), ecpsvm_sortstats );

  0036d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:ecpsvm_sortstats
  00374	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  0037a	48 8b 54 24 68	 mov	 rdx, QWORD PTR asize$[rsp]
  0037f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ar$[rsp]
  00384	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 4866 :     ecpsvm_showstats2( ar, asize );

  0038a	48 8b 54 24 68	 mov	 rdx, QWORD PTR asize$[rsp]
  0038f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ar$[rsp]
  00394	e8 00 00 00 00	 call	 ecpsvm_showstats2

; 4867 :     free( ar );

  00399	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ar$[rsp]
  0039e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 4868 : }

  003a4	48 83 c4 78	 add	 rsp, 120		; 00000078H
  003a8	5f		 pop	 rdi
  003a9	5e		 pop	 rsi
  003aa	c3		 ret	 0
ecpsvm_showstats ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
i$ = 96
callt$ = 104
unsupcc$ = 112
hitt$ = 120
notshown$ = 128
tv93 = 136
tv172 = 144
tv206 = 152
tv174 = 160
tv178 = 168
nname$ = 176
__$ArrayPad$ = 208
ar$ = 240
count$ = 248
ecpsvm_showstats2 PROC

; 4763 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 4764 :     char nname[32];
; 4765 :     U64  callt    = 0;

  00023	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR callt$[rsp], 0

; 4766 :     U64  hitt     = 0;

  0002c	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR hitt$[rsp], 0

; 4767 :     U64  unsupcc  = 0;

  00035	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR unsupcc$[rsp], 0

; 4768 :     U64  notshown = 0;

  0003e	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR notshown$[rsp], 0

; 4769 : 
; 4770 :     size_t i;
; 4771 : 
; 4772 :     for (i=0; i < count; i++)

  0004a	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00053	eb 0d		 jmp	 SHORT $LN4@ecpsvm_sho
$LN2@ecpsvm_sho:
  00055	48 8b 44 24 60	 mov	 rax, QWORD PTR i$[rsp]
  0005a	48 ff c0	 inc	 rax
  0005d	48 89 44 24 60	 mov	 QWORD PTR i$[rsp], rax
$LN4@ecpsvm_sho:
  00062	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR count$[rsp]
  0006a	48 39 44 24 60	 cmp	 QWORD PTR i$[rsp], rax
  0006f	0f 83 d2 02 00
	00		 jae	 $LN3@ecpsvm_sho

; 4773 :     {
; 4774 :         if (ar[i].call)

  00075	48 6b 44 24 60
	20		 imul	 rax, QWORD PTR i$[rsp], 32 ; 00000020H
  0007b	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR ar$[rsp]
  00083	48 83 7c 01 08
	00		 cmp	 QWORD PTR [rcx+rax+8], 0
  00089	0f 84 a0 02 00
	00		 je	 $LN5@ecpsvm_sho

; 4775 :         {
; 4776 :             callt += ar[i].call;

  0008f	48 6b 44 24 60
	20		 imul	 rax, QWORD PTR i$[rsp], 32 ; 00000020H
  00095	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR ar$[rsp]
  0009d	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  000a2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR callt$[rsp]
  000a7	48 03 c8	 add	 rcx, rax
  000aa	48 8b c1	 mov	 rax, rcx
  000ad	48 89 44 24 68	 mov	 QWORD PTR callt$[rsp], rax

; 4777 :             hitt  += ar[i].hit;

  000b2	48 6b 44 24 60
	20		 imul	 rax, QWORD PTR i$[rsp], 32 ; 00000020H
  000b8	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR ar$[rsp]
  000c0	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  000c5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR hitt$[rsp]
  000ca	48 03 c8	 add	 rcx, rax
  000cd	48 8b c1	 mov	 rax, rcx
  000d0	48 89 44 24 78	 mov	 QWORD PTR hitt$[rsp], rax

; 4778 : 
; 4779 :             if (!ar[i].support)

  000d5	48 6b 44 24 60
	20		 imul	 rax, QWORD PTR i$[rsp], 32 ; 00000020H
  000db	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR ar$[rsp]
  000e3	8b 44 01 18	 mov	 eax, DWORD PTR [rcx+rax+24]
  000e7	83 e0 01	 and	 eax, 1
  000ea	85 c0		 test	 eax, eax
  000ec	75 23		 jne	 SHORT $LN7@ecpsvm_sho

; 4780 :                 unsupcc += ar[i].call;

  000ee	48 6b 44 24 60
	20		 imul	 rax, QWORD PTR i$[rsp], 32 ; 00000020H
  000f4	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR ar$[rsp]
  000fc	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  00101	48 8b 4c 24 70	 mov	 rcx, QWORD PTR unsupcc$[rsp]
  00106	48 03 c8	 add	 rcx, rax
  00109	48 8b c1	 mov	 rax, rcx
  0010c	48 89 44 24 70	 mov	 QWORD PTR unsupcc$[rsp], rax
$LN7@ecpsvm_sho:

; 4781 : 
; 4782 :             MSGBUF( nname, "%s%s", ar[i].name, ar[i].support ? "" : "*" );

  00111	48 6b 44 24 60
	20		 imul	 rax, QWORD PTR i$[rsp], 32 ; 00000020H
  00117	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR ar$[rsp]
  0011f	8b 44 01 18	 mov	 eax, DWORD PTR [rcx+rax+24]
  00123	83 e0 01	 and	 eax, 1
  00126	85 c0		 test	 eax, eax
  00128	74 11		 je	 SHORT $LN16@ecpsvm_sho
  0012a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG175293
  00131	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv93[rsp], rax
  00139	eb 0f		 jmp	 SHORT $LN17@ecpsvm_sho
$LN16@ecpsvm_sho:
  0013b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG175294
  00142	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv93[rsp], rax
$LN17@ecpsvm_sho:
  0014a	48 6b 44 24 60
	20		 imul	 rax, QWORD PTR i$[rsp], 32 ; 00000020H
  00150	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv93[rsp]
  00158	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0015d	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR ar$[rsp]
  00165	4c 8b 0c 01	 mov	 r9, QWORD PTR [rcx+rax]
  00169	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175295
  00170	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00175	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR nname$[rsp]
  0017d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4783 : 
; 4784 :             if (!ar[i].enabled) STRLCAT( nname, "-" );

  00183	48 6b 44 24 60
	20		 imul	 rax, QWORD PTR i$[rsp], 32 ; 00000020H
  00189	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR ar$[rsp]
  00191	8b 44 01 18	 mov	 eax, DWORD PTR [rcx+rax+24]
  00195	d1 e8		 shr	 eax, 1
  00197	83 e0 01	 and	 eax, 1
  0019a	85 c0		 test	 eax, eax
  0019c	75 1b		 jne	 SHORT $LN8@ecpsvm_sho
  0019e	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  001a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG175297
  001ab	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR nname$[rsp]
  001b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN8@ecpsvm_sho:

; 4785 :             if ( ar[i].debug)   STRLCAT( nname, "%" );

  001b9	48 6b 44 24 60
	20		 imul	 rax, QWORD PTR i$[rsp], 32 ; 00000020H
  001bf	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR ar$[rsp]
  001c7	8b 44 01 18	 mov	 eax, DWORD PTR [rcx+rax+24]
  001cb	c1 e8 02	 shr	 eax, 2
  001ce	83 e0 01	 and	 eax, 1
  001d1	85 c0		 test	 eax, eax
  001d3	74 1b		 je	 SHORT $LN9@ecpsvm_sho
  001d5	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  001db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG175299
  001e2	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR nname$[rsp]
  001ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN9@ecpsvm_sho:

; 4786 :             if ( ar[i].total)   STRLCAT( nname, "+" );

  001f0	48 6b 44 24 60
	20		 imul	 rax, QWORD PTR i$[rsp], 32 ; 00000020H
  001f6	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR ar$[rsp]
  001fe	8b 44 01 18	 mov	 eax, DWORD PTR [rcx+rax+24]
  00202	c1 e8 03	 shr	 eax, 3
  00205	83 e0 01	 and	 eax, 1
  00208	85 c0		 test	 eax, eax
  0020a	74 1b		 je	 SHORT $LN10@ecpsvm_sho
  0020c	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00212	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG175301
  00219	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR nname$[rsp]
  00221	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN10@ecpsvm_sho:

; 4787 : 
; 4788 :             // "| %-9s | %10"PRIu64" | %10"PRIu64" |  %3"PRIu64"%% |"
; 4789 :             WRMSG( HHC01701, "I", nname, ar[i].call, ar[i].hit,

  00227	48 6b 44 24 60
	20		 imul	 rax, QWORD PTR i$[rsp], 32 ; 00000020H
  0022d	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR ar$[rsp]
  00235	48 83 7c 01 08
	00		 cmp	 QWORD PTR [rcx+rax+8], 0
  0023b	74 33		 je	 SHORT $LN18@ecpsvm_sho
  0023d	48 6b 44 24 60
	20		 imul	 rax, QWORD PTR i$[rsp], 32 ; 00000020H
  00243	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR ar$[rsp]
  0024b	48 6b 44 01 10
	64		 imul	 rax, QWORD PTR [rcx+rax+16], 100 ; 00000064H
  00251	48 6b 4c 24 60
	20		 imul	 rcx, QWORD PTR i$[rsp], 32 ; 00000020H
  00257	33 d2		 xor	 edx, edx
  00259	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR ar$[rsp]
  00261	49 f7 74 08 08	 div	 QWORD PTR [r8+rcx+8]
  00266	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv172[rsp], rax
  0026e	eb 0c		 jmp	 SHORT $LN19@ecpsvm_sho
$LN18@ecpsvm_sho:
  00270	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv172[rsp], 0
$LN19@ecpsvm_sho:
  0027c	48 6b 44 24 60
	20		 imul	 rax, QWORD PTR i$[rsp], 32 ; 00000020H
  00282	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv174[rsp], rax
  0028a	48 6b 4c 24 60
	20		 imul	 rcx, QWORD PTR i$[rsp], 32 ; 00000020H
  00290	48 89 8c 24 a8
	00 00 00	 mov	 QWORD PTR tv178[rsp], rcx
  00298	b9 01 00 00 00	 mov	 ecx, 1
  0029d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002a3	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv172[rsp]
  002ab	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  002b0	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR ar$[rsp]
  002b8	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR tv174[rsp]
  002c0	48 8b 4c 11 10	 mov	 rcx, QWORD PTR [rcx+rdx+16]
  002c5	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  002ca	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR ar$[rsp]
  002d2	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR tv178[rsp]
  002da	48 8b 4c 11 08	 mov	 rcx, QWORD PTR [rcx+rdx+8]
  002df	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002e4	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR nname$[rsp]
  002ec	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175302
  002f8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175303
  00304	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00309	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0030e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00314	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175304
  0031b	ba b6 12 00 00	 mov	 edx, 4790		; 000012b6H
  00320	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175305
  00327	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4790 :                     ar[i].call ? (ar[i].hit * 100) / ar[i].call : 0 );
; 4791 :         }

  0032d	eb 13		 jmp	 SHORT $LN6@ecpsvm_sho
$LN5@ecpsvm_sho:

; 4792 :         else
; 4793 :             notshown++;

  0032f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR notshown$[rsp]
  00337	48 ff c0	 inc	 rax
  0033a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR notshown$[rsp], rax
$LN6@ecpsvm_sho:

; 4794 :     }

  00342	e9 0e fd ff ff	 jmp	 $LN2@ecpsvm_sho
$LN3@ecpsvm_sho:

; 4795 : 
; 4796 :     if (callt)

  00347	48 83 7c 24 68
	00		 cmp	 QWORD PTR callt$[rsp], 0
  0034d	74 47		 je	 SHORT $LN11@ecpsvm_sho

; 4797 :     {
; 4798 :         // "+-----------+------------+------------+-------+"
; 4799 :         WRMSG( HHC01702, "I" );

  0034f	b9 01 00 00 00	 mov	 ecx, 1
  00354	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0035a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175307
  00361	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00366	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175308
  0036d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00372	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00377	41 b9 03 00 00
	00		 mov	 r9d, 3
  0037d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175309
  00384	ba bf 12 00 00	 mov	 edx, 4799		; 000012bfH
  00389	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175310
  00390	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN11@ecpsvm_sho:

; 4800 :     }
; 4801 :     // "| %-9s | %10"PRIu64" | %10"PRIu64" |  %3"PRIu64"%% |"
; 4802 :     WRMSG( HHC01701, "I", "Total", callt, hitt,

  00396	48 83 7c 24 68
	00		 cmp	 QWORD PTR callt$[rsp], 0
  0039c	74 17		 je	 SHORT $LN20@ecpsvm_sho
  0039e	48 6b 44 24 78
	64		 imul	 rax, QWORD PTR hitt$[rsp], 100 ; 00000064H
  003a4	33 d2		 xor	 edx, edx
  003a6	48 f7 74 24 68	 div	 QWORD PTR callt$[rsp]
  003ab	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv206[rsp], rax
  003b3	eb 0c		 jmp	 SHORT $LN21@ecpsvm_sho
$LN20@ecpsvm_sho:
  003b5	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv206[rsp], 0
$LN21@ecpsvm_sho:
  003c1	b9 01 00 00 00	 mov	 ecx, 1
  003c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003cc	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv206[rsp]
  003d4	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  003d9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR hitt$[rsp]
  003de	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  003e3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR callt$[rsp]
  003e8	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175311
  003f4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175312
  00400	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00405	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175313
  0040c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00411	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00416	41 b9 03 00 00
	00		 mov	 r9d, 3
  0041c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175314
  00423	ba c3 12 00 00	 mov	 edx, 4803		; 000012c3H
  00428	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175315
  0042f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4803 :             callt ? (hitt * 100) / callt : 0 );
; 4804 :     // "+-----------+------------+------------+-------+"
; 4805 :     WRMSG( HHC01702, "I" );

  00435	b9 01 00 00 00	 mov	 ecx, 1
  0043a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00440	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175316
  00447	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0044c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175317
  00453	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00458	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0045d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00463	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175318
  0046a	ba c5 12 00 00	 mov	 edx, 4805		; 000012c5H
  0046f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175319
  00476	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4806 : 
; 4807 :     if (unsupcc)

  0047c	48 83 7c 24 70
	00		 cmp	 QWORD PTR unsupcc$[rsp], 0
  00482	74 47		 je	 SHORT $LN12@ecpsvm_sho

; 4808 :     {
; 4809 :         // "* : Unsupported, - : Disabled, %% - Debug"
; 4810 :         WRMSG( HHC01703, "I" );

  00484	b9 01 00 00 00	 mov	 ecx, 1
  00489	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0048f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175321
  00496	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0049b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175322
  004a2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004a7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004ac	41 b9 03 00 00
	00		 mov	 r9d, 3
  004b2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175323
  004b9	ba ca 12 00 00	 mov	 edx, 4810		; 000012caH
  004be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175324
  004c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN12@ecpsvm_sho:

; 4811 :     }
; 4812 :     if (notshown)

  004cb	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR notshown$[rsp], 0
  004d4	74 54		 je	 SHORT $LN13@ecpsvm_sho

; 4813 :     {
; 4814 :         // "%"PRIu64" entries not shown and never invoked"
; 4815 :         WRMSG( HHC01704, "I", notshown );

  004d6	b9 01 00 00 00	 mov	 ecx, 1
  004db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004e1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR notshown$[rsp]
  004e9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175326
  004f5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175327
  00501	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00506	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0050b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00511	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175328
  00518	ba cf 12 00 00	 mov	 edx, 4815		; 000012cfH
  0051d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175329
  00524	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN13@ecpsvm_sho:

; 4816 :     }
; 4817 :     if (unsupcc)

  0052a	48 83 7c 24 70
	00		 cmp	 QWORD PTR unsupcc$[rsp], 0
  00530	74 51		 je	 SHORT $LN14@ecpsvm_sho

; 4818 :     {
; 4819 :         // "%"PRIu64" call(s) were made to unsupported functions"
; 4820 :         WRMSG( HHC01705, "I", unsupcc );

  00532	b9 01 00 00 00	 mov	 ecx, 1
  00537	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0053d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR unsupcc$[rsp]
  00542	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00547	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175331
  0054e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00553	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175332
  0055a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0055f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00564	41 b9 03 00 00
	00		 mov	 r9d, 3
  0056a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175333
  00571	ba d4 12 00 00	 mov	 edx, 4820		; 000012d4H
  00576	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175334
  0057d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN14@ecpsvm_sho:

; 4821 :     }
; 4822 :     return;
; 4823 : }

  00583	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0058b	48 33 cc	 xor	 rcx, rsp
  0058e	e8 00 00 00 00	 call	 __security_check_cookie
  00593	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  0059a	c3		 ret	 0
ecpsvm_showstats2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
eb$ = 0
ea$ = 8
a$ = 32
b$ = 40
ecpsvm_sortstats PROC

; 4753 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 4754 :     ECPSVM_STAT *ea, *eb;
; 4755 : 
; 4756 :     ea = (ECPSVM_STAT*) a;

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00013	48 89 44 24 08	 mov	 QWORD PTR ea$[rsp], rax

; 4757 :     eb = (ECPSVM_STAT*) b;

  00018	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  0001d	48 89 04 24	 mov	 QWORD PTR eb$[rsp], rax

; 4758 : 
; 4759 :     return (int) (eb->call - ea->call);

  00021	48 8b 04 24	 mov	 rax, QWORD PTR eb$[rsp]
  00025	48 8b 4c 24 08	 mov	 rcx, QWORD PTR ea$[rsp]
  0002a	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0002e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00032	48 2b c1	 sub	 rax, rcx

; 4760 : }

  00035	48 83 c4 18	 add	 rsp, 24
  00039	c3		 ret	 0
ecpsvm_sortstats ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
micpend$ = 0
amicblok$ = 4
CR6$ = 8
micevma$ = 12
micevma2$ = 13
micevma3$ = 14
micevma4$ = 15
vpswa$ = 16
psa$ = 24
vpswa_p$ = 32
tv343 = 40
tv354 = 48
tv372 = 56
tv417 = 64
tv439 = 72
tv530 = 80
micblok$ = 88
vpregs$ = 128
newr$ = 90368
buf$ = 180608
__$ArrayPad$ = 181120
regs$ = 181360
svccode$ = 181368
ecpsvm_doassistsvc PROC

; 3701 : {

$LN71:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	b8 58 c4 02 00	 mov	 eax, 181336		; 0002c458H
  00010	e8 00 00 00 00	 call	 __chkstk
  00015	48 2b e0	 sub	 rsp, rax
  00018	48 8d ac 24 c0
	00 00 00	 lea	 rbp, QWORD PTR [rsp+192]
  00020	48 83 e5 80	 and	 rbp, -128		; ffffffffffffff80H
  00024	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002b	48 33 c4	 xor	 rax, rsp
  0002e	48 89 85 80 c3
	02 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3702 :     PSA_3XX *psa;
; 3703 :     REGS newr;
; 3704 : 
; 3705 :     SASSIST_PROLOG(SVC);

  00035	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0003d	48 83 b8 80 08
	00 00 00	 cmp	 QWORD PTR [rax+2176], 0
  00045	74 0a		 je	 SHORT $LN29@ecpsvm_doa
  00047	b8 01 00 00 00	 mov	 eax, 1
  0004c	e9 74 0d 00 00	 jmp	 $LN1@ecpsvm_doa
$LN29@ecpsvm_doa:
  00051	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00059	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  0005d	83 e0 01	 and	 eax, 1
  00060	85 c0		 test	 eax, eax
  00062	75 0a		 jne	 SHORT $LN30@ecpsvm_doa
  00064	b8 01 00 00 00	 mov	 eax, 1
  00069	e9 57 0d 00 00	 jmp	 $LN1@ecpsvm_doa
$LN30@ecpsvm_doa:
  0006e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00075	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  0007b	c1 e8 11	 shr	 eax, 17
  0007e	83 e0 01	 and	 eax, 1
  00081	85 c0		 test	 eax, eax
  00083	75 6d		 jne	 SHORT $LN31@ecpsvm_doa
  00085	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  0008b	c1 e8 02	 shr	 eax, 2
  0008e	83 e0 01	 and	 eax, 1
  00091	85 c0		 test	 eax, eax
  00093	74 53		 je	 SHORT $LN32@ecpsvm_doa
  00095	b9 01 00 00 00	 mov	 ecx, 1
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173683
  000a7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173684
  000b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173685
  000bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173686
  000d6	ba 79 0e 00 00	 mov	 edx, 3705		; 00000e79H
  000db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173687
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN32@ecpsvm_doa:
  000e8	b8 01 00 00 00	 mov	 eax, 1
  000ed	e9 d3 0c 00 00	 jmp	 $LN1@ecpsvm_doa
$LN31@ecpsvm_doa:
  000f2	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  000f8	d1 e8		 shr	 eax, 1
  000fa	83 e0 01	 and	 eax, 1
  000fd	85 c0		 test	 eax, eax
  000ff	75 6d		 jne	 SHORT $LN33@ecpsvm_doa
  00101	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  00107	c1 e8 02	 shr	 eax, 2
  0010a	83 e0 01	 and	 eax, 1
  0010d	85 c0		 test	 eax, eax
  0010f	74 53		 je	 SHORT $LN34@ecpsvm_doa
  00111	b9 01 00 00 00	 mov	 ecx, 1
  00116	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0011c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173690
  00123	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00128	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173691
  0012f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00134	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173692
  0013b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00140	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00145	41 b9 03 00 00
	00		 mov	 r9d, 3
  0014b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173693
  00152	ba 79 0e 00 00	 mov	 edx, 3705		; 00000e79H
  00157	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173694
  0015e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN34@ecpsvm_doa:
  00164	b8 01 00 00 00	 mov	 eax, 1
  00169	e9 57 0c 00 00	 jmp	 $LN1@ecpsvm_doa
$LN33@ecpsvm_doa:
  0016e	b8 08 00 00 00	 mov	 eax, 8
  00173	48 6b c0 07	 imul	 rax, rax, 7
  00177	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0017f	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00186	89 45 08	 mov	 DWORD PTR CR6$[rbp], eax
  00189	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00191	48 c7 80 78 07
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+1912], 0
  0019c	8b 45 08	 mov	 eax, DWORD PTR CR6$[rbp]
  0019f	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001a4	85 c0		 test	 eax, eax
  001a6	75 6d		 jne	 SHORT $LN35@ecpsvm_doa
  001a8	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  001ae	c1 e8 02	 shr	 eax, 2
  001b1	83 e0 01	 and	 eax, 1
  001b4	85 c0		 test	 eax, eax
  001b6	74 53		 je	 SHORT $LN36@ecpsvm_doa
  001b8	b9 01 00 00 00	 mov	 ecx, 1
  001bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173697
  001ca	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173698
  001d6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173699
  001e2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001e7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ec	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173700
  001f9	ba 79 0e 00 00	 mov	 edx, 3705		; 00000e79H
  001fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173701
  00205	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN36@ecpsvm_doa:
  0020b	b8 01 00 00 00	 mov	 eax, 1
  00210	e9 b0 0b 00 00	 jmp	 $LN1@ecpsvm_doa
$LN35@ecpsvm_doa:
  00215	8b 45 08	 mov	 eax, DWORD PTR CR6$[rbp]
  00218	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  0021d	85 c0		 test	 eax, eax
  0021f	74 6d		 je	 SHORT $LN37@ecpsvm_doa
  00221	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  00227	c1 e8 02	 shr	 eax, 2
  0022a	83 e0 01	 and	 eax, 1
  0022d	85 c0		 test	 eax, eax
  0022f	74 53		 je	 SHORT $LN38@ecpsvm_doa
  00231	b9 01 00 00 00	 mov	 ecx, 1
  00236	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0023c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173704
  00243	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00248	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173705
  0024f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00254	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173706
  0025b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00260	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00265	41 b9 03 00 00
	00		 mov	 r9d, 3
  0026b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173707
  00272	ba 79 0e 00 00	 mov	 edx, 3705		; 00000e79H
  00277	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173708
  0027e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN38@ecpsvm_doa:
  00284	b8 01 00 00 00	 mov	 eax, 1
  00289	e9 37 0b 00 00	 jmp	 $LN1@ecpsvm_doa
$LN37@ecpsvm_doa:
  0028e	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+8
  00295	48 ff c0	 inc	 rax
  00298	48 89 05 08 00
	00 00		 mov	 QWORD PTR ecpsvm_sastats+8, rax
  0029f	8b 45 08	 mov	 eax, DWORD PTR CR6$[rbp]
  002a2	25 f8 ff ff 00	 and	 eax, 16777208		; 00fffff8H
  002a7	89 45 04	 mov	 DWORD PTR amicblok$[rbp], eax
  002aa	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  002ad	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002b2	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  002ba	ba fe ff ff ff	 mov	 edx, -2
  002bf	8b c8		 mov	 ecx, eax
  002c1	e8 00 00 00 00	 call	 s370_vfetch4
  002c6	89 45 58	 mov	 DWORD PTR micblok$[rbp], eax
  002c9	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  002cc	83 c0 04	 add	 eax, 4
  002cf	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002d4	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  002dc	ba fe ff ff ff	 mov	 edx, -2
  002e1	8b c8		 mov	 ecx, eax
  002e3	e8 00 00 00 00	 call	 s370_vfetch4
  002e8	89 45 5c	 mov	 DWORD PTR micblok$[rbp+4], eax
  002eb	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  002ee	83 c0 08	 add	 eax, 8
  002f1	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002f6	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  002fe	ba fe ff ff ff	 mov	 edx, -2
  00303	8b c8		 mov	 ecx, eax
  00305	e8 00 00 00 00	 call	 s370_vfetch4
  0030a	89 45 60	 mov	 DWORD PTR micblok$[rbp+8], eax
  0030d	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  00310	83 c0 0c	 add	 eax, 12
  00313	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00318	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00320	ba fe ff ff ff	 mov	 edx, -2
  00325	8b c8		 mov	 ecx, eax
  00327	e8 00 00 00 00	 call	 s370_vfetch4
  0032c	89 45 64	 mov	 DWORD PTR micblok$[rbp+12], eax
  0032f	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  00332	83 c0 10	 add	 eax, 16
  00335	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0033a	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00342	ba fe ff ff ff	 mov	 edx, -2
  00347	8b c8		 mov	 ecx, eax
  00349	e8 00 00 00 00	 call	 s370_vfetch4
  0034e	89 45 68	 mov	 DWORD PTR micblok$[rbp+16], eax
  00351	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  00354	83 c0 14	 add	 eax, 20
  00357	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0035c	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00364	ba fe ff ff ff	 mov	 edx, -2
  00369	8b c8		 mov	 ecx, eax
  0036b	e8 00 00 00 00	 call	 s370_vfetch4
  00370	89 45 6c	 mov	 DWORD PTR micblok$[rbp+20], eax
  00373	8b 45 60	 mov	 eax, DWORD PTR micblok$[rbp+8]
  00376	c1 e8 18	 shr	 eax, 24
  00379	88 45 00	 mov	 BYTE PTR micpend$[rbp], al
  0037c	8b 45 60	 mov	 eax, DWORD PTR micblok$[rbp+8]
  0037f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00384	89 45 10	 mov	 DWORD PTR vpswa$[rbp], eax
  00387	8b 45 6c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  0038a	c1 e8 18	 shr	 eax, 24
  0038d	88 45 0c	 mov	 BYTE PTR micevma$[rbp], al
  00390	8b 45 6c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  00393	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  00398	c1 e8 10	 shr	 eax, 16
  0039b	88 45 0d	 mov	 BYTE PTR micevma2$[rbp], al
  0039e	8b 45 6c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  003a1	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  003a6	c1 e8 08	 shr	 eax, 8
  003a9	88 45 0e	 mov	 BYTE PTR micevma3$[rbp], al
  003ac	8b 45 6c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  003af	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003b4	88 45 0f	 mov	 BYTE PTR micevma4$[rbp], al
  003b7	8b 45 08	 mov	 eax, DWORD PTR CR6$[rbp]
  003ba	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  003bf	85 c0		 test	 eax, eax
  003c1	74 37		 je	 SHORT $LN39@ecpsvm_doa
  003c3	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  003c8	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  003d0	4c 8b 8c 24 70
	c4 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  003d8	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  003de	ba 01 00 00 00	 mov	 edx, 1
  003e3	8b 4d 68	 mov	 ecx, DWORD PTR micblok$[rbp+16]
  003e6	e8 00 00 00 00	 call	 s370_maddr_l
  003eb	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003f3	48 89 81 78 07
	00 00		 mov	 QWORD PTR [rcx+1912], rax
$LN39@ecpsvm_doa:
  003fa	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  003ff	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00407	4c 8b 8c 24 70
	c4 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  0040f	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00415	ba 01 00 00 00	 mov	 edx, 1
  0041a	8b 4d 10	 mov	 ecx, DWORD PTR vpswa$[rbp]
  0041d	e8 00 00 00 00	 call	 s370_maddr_l
  00422	48 89 45 20	 mov	 QWORD PTR vpswa_p$[rbp], rax
  00426	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  0042c	c1 e8 02	 shr	 eax, 2
  0042f	83 e0 01	 and	 eax, 1
  00432	85 c0		 test	 eax, eax
  00434	74 1d		 je	 SHORT $LN40@ecpsvm_doa
  00436	44 8b 4d 10	 mov	 r9d, DWORD PTR vpswa$[rbp]
  0043a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173711
  00441	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00446	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0044d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN40@ecpsvm_doa:
  00453	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  00459	c1 e8 02	 shr	 eax, 2
  0045c	83 e0 01	 and	 eax, 1
  0045f	85 c0		 test	 eax, eax
  00461	74 53		 je	 SHORT $LN41@ecpsvm_doa
  00463	b9 01 00 00 00	 mov	 ecx, 1
  00468	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0046e	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00475	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0047a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173713
  00481	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00486	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173714
  0048d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00492	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00497	41 b9 03 00 00
	00		 mov	 r9d, 3
  0049d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173715
  004a4	ba 79 0e 00 00	 mov	 edx, 3705		; 00000e79H
  004a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173716
  004b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN41@ecpsvm_doa:
  004b6	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  004bc	c1 e8 02	 shr	 eax, 2
  004bf	83 e0 01	 and	 eax, 1
  004c2	85 c0		 test	 eax, eax
  004c4	74 1d		 je	 SHORT $LN42@ecpsvm_doa
  004c6	44 8b 4d 08	 mov	 r9d, DWORD PTR CR6$[rbp]
  004ca	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173718
  004d1	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  004d6	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  004dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN42@ecpsvm_doa:
  004e3	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  004e9	c1 e8 02	 shr	 eax, 2
  004ec	83 e0 01	 and	 eax, 1
  004ef	85 c0		 test	 eax, eax
  004f1	74 53		 je	 SHORT $LN43@ecpsvm_doa
  004f3	b9 01 00 00 00	 mov	 ecx, 1
  004f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004fe	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00505	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0050a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173720
  00511	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00516	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173721
  0051d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00522	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00527	41 b9 03 00 00
	00		 mov	 r9d, 3
  0052d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173722
  00534	ba 79 0e 00 00	 mov	 edx, 3705		; 00000e79H
  00539	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173723
  00540	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN43@ecpsvm_doa:
  00546	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  0054c	c1 e8 02	 shr	 eax, 2
  0054f	83 e0 01	 and	 eax, 1
  00552	85 c0		 test	 eax, eax
  00554	74 1d		 je	 SHORT $LN44@ecpsvm_doa
  00556	44 8b 4d 68	 mov	 r9d, DWORD PTR micblok$[rbp+16]
  0055a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173725
  00561	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00566	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0056d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN44@ecpsvm_doa:
  00573	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  00579	c1 e8 02	 shr	 eax, 2
  0057c	83 e0 01	 and	 eax, 1
  0057f	85 c0		 test	 eax, eax
  00581	74 53		 je	 SHORT $LN45@ecpsvm_doa
  00583	b9 01 00 00 00	 mov	 ecx, 1
  00588	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0058e	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00595	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0059a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173727
  005a1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173728
  005ad	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005b2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005b7	41 b9 03 00 00
	00		 mov	 r9d, 3
  005bd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173729
  005c4	ba 79 0e 00 00	 mov	 edx, 3705		; 00000e79H
  005c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173730
  005d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN45@ecpsvm_doa:
  005d6	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  005dc	c1 e8 02	 shr	 eax, 2
  005df	83 e0 01	 and	 eax, 1
  005e2	85 c0		 test	 eax, eax
  005e4	74 19		 je	 SHORT $LN46@ecpsvm_doa
  005e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173732
  005ed	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  005f2	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  005f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN46@ecpsvm_doa:
  005ff	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  00605	c1 e8 02	 shr	 eax, 2
  00608	83 e0 01	 and	 eax, 1
  0060b	85 c0		 test	 eax, eax
  0060d	74 48		 je	 SHORT $LN47@ecpsvm_doa
  0060f	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00616	e8 00 00 00 00	 call	 strlen
  0061b	48 98		 cdqe
  0061d	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00622	48 2b c8	 sub	 rcx, rax
  00625	48 8b c1	 mov	 rax, rcx
  00628	48 89 45 28	 mov	 QWORD PTR tv343[rbp], rax
  0062c	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00633	e8 00 00 00 00	 call	 strlen
  00638	48 8d 84 05 80
	c1 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  00640	48 8b 4d 28	 mov	 rcx, QWORD PTR tv343[rbp]
  00644	44 8b c1	 mov	 r8d, ecx
  00647	48 8b d0	 mov	 rdx, rax
  0064a	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00652	e8 00 00 00 00	 call	 display_psw
$LN47@ecpsvm_doa:
$LN4@ecpsvm_doa:
  00657	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0065e	48 63 80 90 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5264]
  00665	48 89 45 30	 mov	 QWORD PTR tv354[rbp], rax
  00669	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  00670	48 8b f9	 mov	 rdi, rcx
  00673	33 c0		 xor	 eax, eax
  00675	48 8b 4d 30	 mov	 rcx, QWORD PTR tv354[rbp]
  00679	f3 aa		 rep stosb
$LN7@ecpsvm_doa:
  0067b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG173734
  00682	48 89 85 e8 00
	00 00		 mov	 QWORD PTR vpregs$[rbp+104], rax
  00689	33 c0		 xor	 eax, eax
  0068b	85 c0		 test	 eax, eax
  0068d	75 ec		 jne	 SHORT $LN7@ecpsvm_doa
  0068f	33 c0		 xor	 eax, eax
  00691	85 c0		 test	 eax, eax
  00693	75 c2		 jne	 SHORT $LN4@ecpsvm_doa
  00695	48 8b 55 20	 mov	 rdx, QWORD PTR vpswa_p$[rbp]
  00699	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  006a0	e8 00 00 00 00	 call	 s370_load_psw
  006a5	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  006ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG173735
  006b2	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
  006bf	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  006c5	c1 e8 02	 shr	 eax, 2
  006c8	83 e0 01	 and	 eax, 1
  006cb	85 c0		 test	 eax, eax
  006cd	74 47		 je	 SHORT $LN48@ecpsvm_doa
  006cf	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006d6	e8 00 00 00 00	 call	 strlen
  006db	48 98		 cdqe
  006dd	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  006e2	48 2b c8	 sub	 rcx, rax
  006e5	48 8b c1	 mov	 rax, rcx
  006e8	48 89 45 38	 mov	 QWORD PTR tv372[rbp], rax
  006ec	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006f3	e8 00 00 00 00	 call	 strlen
  006f8	48 8d 84 05 80
	c1 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  00700	48 8b 4d 38	 mov	 rcx, QWORD PTR tv372[rbp]
  00704	44 8b c1	 mov	 r8d, ecx
  00707	48 8b d0	 mov	 rdx, rax
  0070a	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  00711	e8 00 00 00 00	 call	 display_psw
$LN48@ecpsvm_doa:
  00716	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  0071c	c1 e8 02	 shr	 eax, 2
  0071f	83 e0 01	 and	 eax, 1
  00722	85 c0		 test	 eax, eax
  00724	74 53		 je	 SHORT $LN49@ecpsvm_doa
  00726	b9 01 00 00 00	 mov	 ecx, 1
  0072b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00731	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00738	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0073d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173738
  00744	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00749	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173739
  00750	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00755	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0075a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00760	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173740
  00767	ba 79 0e 00 00	 mov	 edx, 3705		; 00000e79H
  0076c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173741
  00773	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN49@ecpsvm_doa:

; 3706 : 
; 3707 :     if(svccode==76)     /* NEVER trap SVC 76 */

  00779	83 bc 24 78 c4
	02 00 4c	 cmp	 DWORD PTR svccode$[rsp], 76 ; 0000004cH
  00781	75 6d		 jne	 SHORT $LN50@ecpsvm_doa

; 3708 :     {
; 3709 :         DEBUG_SASSISTX(SVC,WRMSG(HHC90000, "D", "SASSIST SVC Reject : SVC 76"));

  00783	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  00789	c1 e8 02	 shr	 eax, 2
  0078c	83 e0 01	 and	 eax, 1
  0078f	85 c0		 test	 eax, eax
  00791	74 53		 je	 SHORT $LN51@ecpsvm_doa
  00793	b9 01 00 00 00	 mov	 ecx, 1
  00798	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0079e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173744
  007a5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  007aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173745
  007b1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173746
  007bd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007c2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007c7	41 b9 03 00 00
	00		 mov	 r9d, 3
  007cd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173747
  007d4	ba 7d 0e 00 00	 mov	 edx, 3709		; 00000e7dH
  007d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173748
  007e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN51@ecpsvm_doa:

; 3710 :         return(1);

  007e6	b8 01 00 00 00	 mov	 eax, 1
  007eb	e9 d5 05 00 00	 jmp	 $LN1@ecpsvm_doa
$LN50@ecpsvm_doa:

; 3711 :     }
; 3712 :     /* Get what the NEW PSW should be */
; 3713 : 
; 3714 :     psa=(PSA_3XX *)MADDR((VADR)0 , USE_PRIMARY_SPACE, regs, ACCTYPE_READ, 0);

  007f0	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  007f5	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  007fd	4c 8b 8c 24 70
	c4 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00805	41 b8 fd ff ff
	ff		 mov	 r8d, -3
  0080b	ba 01 00 00 00	 mov	 edx, 1
  00810	33 c9		 xor	 ecx, ecx
  00812	e8 00 00 00 00	 call	 s370_maddr_l
  00817	48 89 45 18	 mov	 QWORD PTR psa$[rbp], rax
$LN10@ecpsvm_doa:

; 3715 :                                                                                        /* Use all around access key 0 */
; 3716 :                                                                                           /* Also sets reference bit     */
; 3717 :     INITPSEUDOREGS(newr);

  0081b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00822	48 63 80 90 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5264]
  00829	48 89 45 40	 mov	 QWORD PTR tv417[rbp], rax
  0082d	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR newr$[rbp]
  00834	48 8b f9	 mov	 rdi, rcx
  00837	33 c0		 xor	 eax, eax
  00839	48 8b 4d 40	 mov	 rcx, QWORD PTR tv417[rbp]
  0083d	f3 aa		 rep stosb
$LN13@ecpsvm_doa:
  0083f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG173749
  00846	48 89 85 68 61
	01 00		 mov	 QWORD PTR newr$[rbp+104], rax
  0084d	33 c0		 xor	 eax, eax
  0084f	85 c0		 test	 eax, eax
  00851	75 ec		 jne	 SHORT $LN13@ecpsvm_doa
  00853	33 c0		 xor	 eax, eax
  00855	85 c0		 test	 eax, eax
  00857	75 c2		 jne	 SHORT $LN10@ecpsvm_doa

; 3718 :     ARCH_DEP(load_psw) (&newr, (BYTE *)&psa->svcnew);   /* Ref bit set above */

  00859	48 8b 45 18	 mov	 rax, QWORD PTR psa$[rbp]
  0085d	48 83 c0 60	 add	 rax, 96			; 00000060H
  00861	48 8b d0	 mov	 rdx, rax
  00864	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR newr$[rbp]
  0086b	e8 00 00 00 00	 call	 s370_load_psw

; 3719 :     DEBUG_SASSISTX(SVC,MSGBUF(buf, "SASSIST SVC NEW VIRT "));

  00870	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  00876	c1 e8 02	 shr	 eax, 2
  00879	83 e0 01	 and	 eax, 1
  0087c	85 c0		 test	 eax, eax
  0087e	74 19		 je	 SHORT $LN52@ecpsvm_doa
  00880	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173751
  00887	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  0088c	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00893	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN52@ecpsvm_doa:

; 3720 :     DEBUG_SASSISTX(SVC,display_psw(&newr, &buf[strlen(buf)], sizeof(buf)-(int)strlen(buf)));

  00899	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  0089f	c1 e8 02	 shr	 eax, 2
  008a2	83 e0 01	 and	 eax, 1
  008a5	85 c0		 test	 eax, eax
  008a7	74 47		 je	 SHORT $LN53@ecpsvm_doa
  008a9	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  008b0	e8 00 00 00 00	 call	 strlen
  008b5	48 98		 cdqe
  008b7	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  008bc	48 2b c8	 sub	 rcx, rax
  008bf	48 8b c1	 mov	 rax, rcx
  008c2	48 89 45 48	 mov	 QWORD PTR tv439[rbp], rax
  008c6	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  008cd	e8 00 00 00 00	 call	 strlen
  008d2	48 8d 84 05 80
	c1 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  008da	48 8b 4d 48	 mov	 rcx, QWORD PTR tv439[rbp]
  008de	44 8b c1	 mov	 r8d, ecx
  008e1	48 8b d0	 mov	 rdx, rax
  008e4	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR newr$[rbp]
  008eb	e8 00 00 00 00	 call	 display_psw
$LN53@ecpsvm_doa:

; 3721 :     DEBUG_SASSISTX(SVC,WRMSG(HHC90000, "D", buf));

  008f0	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  008f6	c1 e8 02	 shr	 eax, 2
  008f9	83 e0 01	 and	 eax, 1
  008fc	85 c0		 test	 eax, eax
  008fe	74 53		 je	 SHORT $LN54@ecpsvm_doa
  00900	b9 01 00 00 00	 mov	 ecx, 1
  00905	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0090b	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00912	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00917	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173754
  0091e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00923	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173755
  0092a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0092f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00934	41 b9 03 00 00
	00		 mov	 r9d, 3
  0093a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173756
  00941	ba 89 0e 00 00	 mov	 edx, 3721		; 00000e89H
  00946	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173757
  0094d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN54@ecpsvm_doa:
$LN16@ecpsvm_doa:

; 3722 :     /* Get some stuff from the REAL Running PSW to put in OLD SVC PSW */
; 3723 :     MAYBE_SET_PSW_IA_FROM_IP(regs);

  00953	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0095b	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00963	74 43		 je	 SHORT $LN55@ecpsvm_doa
  00965	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0096d	8b 80 10 02 00
	00		 mov	 eax, DWORD PTR [rax+528]
  00973	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0097b	48 8b 94 24 70
	c4 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00983	48 8b 92 00 02
	00 00		 mov	 rdx, QWORD PTR [rdx+512]
  0098a	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0098e	48 2b ca	 sub	 rcx, rdx
  00991	48 03 c1	 add	 rax, rcx
  00994	48 25 ff ff ff
	00		 and	 rax, 16777215		; 00ffffffH
  0099a	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  009a2	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
$LN55@ecpsvm_doa:
  009a8	33 c0		 xor	 eax, eax
  009aa	85 c0		 test	 eax, eax
  009ac	75 a5		 jne	 SHORT $LN16@ecpsvm_doa
$LN19@ecpsvm_doa:

; 3724 :     SET_PSW_IA_AND_MAYBE_IP(&vpregs, regs->psw.IA);            /* Instruction Address */

  009ae	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  009b6	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  009bc	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  009c1	89 85 08 01 00
	00		 mov	 DWORD PTR vpregs$[rbp+136], eax
  009c7	48 83 bd 88 02
	00 00 00	 cmp	 QWORD PTR vpregs$[rbp+520], 0
  009cf	74 41		 je	 SHORT $LN56@ecpsvm_doa
  009d1	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR vpregs$[rbp+136]
  009d7	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  009dc	39 85 90 02 00
	00		 cmp	 DWORD PTR vpregs$[rbp+528], eax
  009e2	75 23		 jne	 SHORT $LN57@ecpsvm_doa
  009e4	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR vpregs$[rbp+136]
  009ea	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  009ef	8b c0		 mov	 eax, eax
  009f1	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR vpregs$[rbp+512]
  009f8	48 0b c8	 or	 rcx, rax
  009fb	48 8b c1	 mov	 rax, rcx
  009fe	48 89 85 e8 00
	00 00		 mov	 QWORD PTR vpregs$[rbp+104], rax
  00a05	eb 0b		 jmp	 SHORT $LN58@ecpsvm_doa
$LN57@ecpsvm_doa:
  00a07	48 c7 85 88 02
	00 00 00 00 00
	00		 mov	 QWORD PTR vpregs$[rbp+520], 0
$LN58@ecpsvm_doa:
$LN56@ecpsvm_doa:
  00a12	33 c0		 xor	 eax, eax
  00a14	85 c0		 test	 eax, eax
  00a16	75 96		 jne	 SHORT $LN19@ecpsvm_doa

; 3725 :     vpregs.psw.cc=regs->psw.cc;                   /* Condition Code      */

  00a18	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a20	0f b6 40 7c	 movzx	 eax, BYTE PTR [rax+124]
  00a24	88 85 fc 00 00
	00		 mov	 BYTE PTR vpregs$[rbp+124], al

; 3726 :     vpregs.psw.pkey=regs->psw.pkey;               /* Protection Key      */

  00a2a	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a32	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00a36	88 85 f9 00 00
	00		 mov	 BYTE PTR vpregs$[rbp+121], al

; 3727 :     vpregs.psw.progmask=regs->psw.progmask;       /* Program Mask        */

  00a3c	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a44	0f b6 40 7d	 movzx	 eax, BYTE PTR [rax+125]
  00a48	88 85 fd 00 00
	00		 mov	 BYTE PTR vpregs$[rbp+125], al

; 3728 :     vpregs.psw.intcode=svccode;                   /* SVC Interrupt code  */

  00a4e	0f b7 84 24 78
	c4 02 00	 movzx	 eax, WORD PTR svccode$[rsp]
  00a56	66 89 85 18 01
	00 00		 mov	 WORD PTR vpregs$[rbp+152], ax

; 3729 :     DEBUG_SASSISTX(SVC,MSGBUF(buf, "SASSIST SVC OLD VIRT "));

  00a5d	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  00a63	c1 e8 02	 shr	 eax, 2
  00a66	83 e0 01	 and	 eax, 1
  00a69	85 c0		 test	 eax, eax
  00a6b	74 19		 je	 SHORT $LN59@ecpsvm_doa
  00a6d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173763
  00a74	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00a79	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00a80	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN59@ecpsvm_doa:

; 3730 :     DEBUG_SASSISTX(SVC,display_psw(&vpregs, &buf[strlen(buf)], sizeof(buf)-(int)strlen(buf)));

  00a86	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  00a8c	c1 e8 02	 shr	 eax, 2
  00a8f	83 e0 01	 and	 eax, 1
  00a92	85 c0		 test	 eax, eax
  00a94	74 47		 je	 SHORT $LN60@ecpsvm_doa
  00a96	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00a9d	e8 00 00 00 00	 call	 strlen
  00aa2	48 98		 cdqe
  00aa4	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00aa9	48 2b c8	 sub	 rcx, rax
  00aac	48 8b c1	 mov	 rax, rcx
  00aaf	48 89 45 50	 mov	 QWORD PTR tv530[rbp], rax
  00ab3	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00aba	e8 00 00 00 00	 call	 strlen
  00abf	48 8d 84 05 80
	c1 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  00ac7	48 8b 4d 50	 mov	 rcx, QWORD PTR tv530[rbp]
  00acb	44 8b c1	 mov	 r8d, ecx
  00ace	48 8b d0	 mov	 rdx, rax
  00ad1	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  00ad8	e8 00 00 00 00	 call	 display_psw
$LN60@ecpsvm_doa:

; 3731 :     DEBUG_SASSISTX(SVC,WRMSG(HHC90000, "D", buf));

  00add	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  00ae3	c1 e8 02	 shr	 eax, 2
  00ae6	83 e0 01	 and	 eax, 1
  00ae9	85 c0		 test	 eax, eax
  00aeb	74 53		 je	 SHORT $LN61@ecpsvm_doa
  00aed	b9 01 00 00 00	 mov	 ecx, 1
  00af2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00af8	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00aff	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00b04	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173766
  00b0b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b10	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173767
  00b17	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b1c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b21	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b27	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173768
  00b2e	ba 93 0e 00 00	 mov	 edx, 3731		; 00000e93H
  00b33	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173769
  00b3a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN61@ecpsvm_doa:

; 3732 :     if(ecpsvm_check_pswtrans(regs,&micblok,micpend,&vpregs,&newr))       /* Check PSW transition capability */

  00b40	48 8d 85 00 61
	01 00		 lea	 rax, QWORD PTR newr$[rbp]
  00b47	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b4c	4c 8d 8d 80 00
	00 00		 lea	 r9, QWORD PTR vpregs$[rbp]
  00b53	44 0f b6 45 00	 movzx	 r8d, BYTE PTR micpend$[rbp]
  00b58	48 8d 55 58	 lea	 rdx, QWORD PTR micblok$[rbp]
  00b5c	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00b64	e8 00 00 00 00	 call	 ecpsvm_check_pswtrans
  00b69	85 c0		 test	 eax, eax
  00b6b	74 6d		 je	 SHORT $LN62@ecpsvm_doa

; 3733 :     {
; 3734 :         DEBUG_SASSISTX(SVC,WRMSG(HHC90000, "D", "SASSIST SVC Reject : Cannot make transition to new PSW"));

  00b6d	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  00b73	c1 e8 02	 shr	 eax, 2
  00b76	83 e0 01	 and	 eax, 1
  00b79	85 c0		 test	 eax, eax
  00b7b	74 53		 je	 SHORT $LN63@ecpsvm_doa
  00b7d	b9 01 00 00 00	 mov	 ecx, 1
  00b82	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b88	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173772
  00b8f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00b94	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173773
  00b9b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ba0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173774
  00ba7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00bac	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00bb1	41 b9 03 00 00
	00		 mov	 r9d, 3
  00bb7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173775
  00bbe	ba 96 0e 00 00	 mov	 edx, 3734		; 00000e96H
  00bc3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173776
  00bca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN63@ecpsvm_doa:

; 3735 :         return(1); /* Something in the NEW PSW we can't handle.. let CP do it */

  00bd0	b8 01 00 00 00	 mov	 eax, 1
  00bd5	e9 eb 01 00 00	 jmp	 $LN1@ecpsvm_doa
$LN62@ecpsvm_doa:

; 3736 :     }
; 3737 : 
; 3738 :     /* Set intcode in PSW (for BC mode) */
; 3739 :     ARCH_DEP(store_psw) (&vpregs, (BYTE *)&psa->svcold);

  00bda	48 8b 45 18	 mov	 rax, QWORD PTR psa$[rbp]
  00bde	48 83 c0 20	 add	 rax, 32			; 00000020H
  00be2	48 8b d0	 mov	 rdx, rax
  00be5	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  00bec	e8 00 00 00 00	 call	 s370_store_psw

; 3740 : 
; 3741 :     if(ECMODE(&vpregs.psw))

  00bf1	0f b6 85 fa 00
	00 00		 movzx	 eax, BYTE PTR vpregs$[rbp+122]
  00bf8	83 e0 08	 and	 eax, 8
  00bfb	85 c0		 test	 eax, eax
  00bfd	74 24		 je	 SHORT $LN64@ecpsvm_doa

; 3742 :     {
; 3743 :         /* Also set SVC interrupt code */
; 3744 :         /* and ILC                     */
; 3745 :         STORE_FW((BYTE *)&psa->svcint,0x00020000 | svccode);

  00bff	8b 84 24 78 c4
	02 00		 mov	 eax, DWORD PTR svccode$[rsp]
  00c06	0f ba e8 11	 bts	 eax, 17
  00c0a	8b c8		 mov	 ecx, eax
  00c0c	e8 00 00 00 00	 call	 _byteswap_ulong
  00c11	48 8b 4d 18	 mov	 rcx, QWORD PTR psa$[rbp]
  00c15	48 81 c1 88 00
	00 00		 add	 rcx, 136		; 00000088H
  00c1c	8b d0		 mov	 edx, eax
  00c1e	e8 00 00 00 00	 call	 store_fw_noswap
$LN64@ecpsvm_doa:
$LN22@ecpsvm_doa:
$LN25@ecpsvm_doa:

; 3746 :     }
; 3747 :     /* Now, update some stuff in the REAL PSW */
; 3748 :     SASSIST_LPSW(newr);

  00c23	48 83 bd 08 63
	01 00 00	 cmp	 QWORD PTR newr$[rbp+520], 0
  00c2b	74 29		 je	 SHORT $LN65@ecpsvm_doa
  00c2d	8b 85 10 63 01
	00		 mov	 eax, DWORD PTR newr$[rbp+528]
  00c33	48 8b 8d 00 63
	01 00		 mov	 rcx, QWORD PTR newr$[rbp+512]
  00c3a	48 8b 95 68 61
	01 00		 mov	 rdx, QWORD PTR newr$[rbp+104]
  00c41	48 2b d1	 sub	 rdx, rcx
  00c44	48 8b ca	 mov	 rcx, rdx
  00c47	48 03 c1	 add	 rax, rcx
  00c4a	48 25 ff ff ff
	00		 and	 rax, 16777215		; 00ffffffH
  00c50	89 85 88 61 01
	00		 mov	 DWORD PTR newr$[rbp+136], eax
$LN65@ecpsvm_doa:
  00c56	33 c0		 xor	 eax, eax
  00c58	85 c0		 test	 eax, eax
  00c5a	75 c7		 jne	 SHORT $LN25@ecpsvm_doa
$LN28@ecpsvm_doa:
  00c5c	8b 85 88 61 01
	00		 mov	 eax, DWORD PTR newr$[rbp+136]
  00c62	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00c67	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00c6f	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00c75	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00c7d	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00c85	74 6e		 je	 SHORT $LN66@ecpsvm_doa
  00c87	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00c8f	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00c95	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00c9a	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00ca2	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00ca8	75 38		 jne	 SHORT $LN67@ecpsvm_doa
  00caa	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00cb2	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00cb8	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00cbd	8b c0		 mov	 eax, eax
  00cbf	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00cc7	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00cce	48 0b c8	 or	 rcx, rax
  00cd1	48 8b c1	 mov	 rax, rcx
  00cd4	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00cdc	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00ce0	eb 13		 jmp	 SHORT $LN68@ecpsvm_doa
$LN67@ecpsvm_doa:
  00ce2	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00cea	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN68@ecpsvm_doa:
$LN66@ecpsvm_doa:
  00cf5	33 c0		 xor	 eax, eax
  00cf7	85 c0		 test	 eax, eax
  00cf9	0f 85 5d ff ff
	ff		 jne	 $LN28@ecpsvm_doa
  00cff	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00d07	0f b6 8d 7c 61
	01 00		 movzx	 ecx, BYTE PTR newr$[rbp+124]
  00d0e	88 48 7c	 mov	 BYTE PTR [rax+124], cl
  00d11	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00d19	0f b6 8d 79 61
	01 00		 movzx	 ecx, BYTE PTR newr$[rbp+121]
  00d20	88 48 79	 mov	 BYTE PTR [rax+121], cl
  00d23	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00d2b	0f b6 8d 7d 61
	01 00		 movzx	 ecx, BYTE PTR newr$[rbp+125]
  00d32	88 48 7d	 mov	 BYTE PTR [rax+125], cl
  00d35	33 c0		 xor	 eax, eax
  00d37	85 c0		 test	 eax, eax
  00d39	0f 85 e4 fe ff
	ff		 jne	 $LN22@ecpsvm_doa

; 3749 :     /* Now store the new PSW in the area pointed by the MICBLOK */
; 3750 :     ARCH_DEP(store_psw) (&newr,vpswa_p);

  00d3f	48 8b 55 20	 mov	 rdx, QWORD PTR vpswa_p$[rbp]
  00d43	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR newr$[rbp]
  00d4a	e8 00 00 00 00	 call	 s370_store_psw

; 3751 :     DEBUG_SASSISTX(SVC,WRMSG(HHC90000, "D", "SASSIST SVC Done"));

  00d4f	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  00d55	c1 e8 02	 shr	 eax, 2
  00d58	83 e0 01	 and	 eax, 1
  00d5b	85 c0		 test	 eax, eax
  00d5d	74 53		 je	 SHORT $LN69@ecpsvm_doa
  00d5f	b9 01 00 00 00	 mov	 ecx, 1
  00d64	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00d6a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173783
  00d71	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00d76	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173784
  00d7d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00d82	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173785
  00d89	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00d8e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d93	41 b9 03 00 00
	00		 mov	 r9d, 3
  00d99	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173786
  00da0	ba a7 0e 00 00	 mov	 edx, 3751		; 00000ea7H
  00da5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173787
  00dac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN69@ecpsvm_doa:

; 3752 :     SASSIST_HIT(SVC);

  00db2	48 8b 05 10 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+16
  00db9	48 ff c0	 inc	 rax
  00dbc	48 89 05 10 00
	00 00		 mov	 QWORD PTR ecpsvm_sastats+16, rax

; 3753 :     return(0);

  00dc3	33 c0		 xor	 eax, eax
$LN1@ecpsvm_doa:

; 3754 : }

  00dc5	48 8b 8d 80 c3
	02 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00dcc	48 33 cc	 xor	 rcx, rsp
  00dcf	e8 00 00 00 00	 call	 __security_check_cookie
  00dd4	48 81 c4 58 c4
	02 00		 add	 rsp, 181336		; 0002c458H
  00ddb	5f		 pop	 rdi
  00ddc	5d		 pop	 rbp
  00ddd	c3		 ret	 0
ecpsvm_doassistsvc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
svclist$ = 64
traceptr$ = 68
slcadr$ = 72
retaddr$ = 76
svchi$ = 80
svclo$ = 84
tv150 = 88
work_p$ = 96
regs$ = 128
ecpsvm_doCPretrn PROC

; 3620 : {

$LN25:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 3621 : VADR svclist;
; 3622 : VADR retaddr;
; 3623 : VADR traceptr;
; 3624 : U32  svchi;
; 3625 : U32  svclo;
; 3626 : U32  slcadr;
; 3627 : BYTE *work_p;
; 3628 : 
; 3629 :     if(!sysblk.ecpsvm.available)

  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00010	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00016	c1 e8 11	 shr	 eax, 17
  00019	83 e0 01	 and	 eax, 1
  0001c	85 c0		 test	 eax, eax
  0001e	75 6d		 jne	 SHORT $LN5@ecpsvm_doC

; 3630 :     {
; 3631 :         DEBUG_CPASSISTX(RETRN,WRMSG(HHC90000, "D", "CPASSTS RETRN ECPS:VM Disabled in configuration"));

  00020	8b 05 18 03 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+792
  00026	c1 e8 02	 shr	 eax, 2
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 53		 je	 SHORT $LN6@ecpsvm_doC
  00030	b9 01 00 00 00	 mov	 ecx, 1
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173548
  00042	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173549
  0004e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173550
  0005a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0005f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00064	41 b9 03 00 00
	00		 mov	 r9d, 3
  0006a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173551
  00071	ba 2f 0e 00 00	 mov	 edx, 3631		; 00000e2fH
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173552
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN6@ecpsvm_doC:

; 3632 :         return(1);

  00083	b8 01 00 00 00	 mov	 eax, 1
  00088	e9 2b 07 00 00	 jmp	 $LN1@ecpsvm_doC
$LN5@ecpsvm_doC:

; 3633 :     }
; 3634 :     if(!ecpsvm_cpstats.RETRN.enabled)

  0008d	8b 05 18 03 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+792
  00093	d1 e8		 shr	 eax, 1
  00095	83 e0 01	 and	 eax, 1
  00098	85 c0		 test	 eax, eax
  0009a	75 6d		 jne	 SHORT $LN7@ecpsvm_doC

; 3635 :     {
; 3636 :         DEBUG_CPASSISTX(RETRN,WRMSG(HHC90000, "D", "CPASSTS RETRN Disabled by command"));

  0009c	8b 05 18 03 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+792
  000a2	c1 e8 02	 shr	 eax, 2
  000a5	83 e0 01	 and	 eax, 1
  000a8	85 c0		 test	 eax, eax
  000aa	74 53		 je	 SHORT $LN8@ecpsvm_doC
  000ac	b9 01 00 00 00	 mov	 ecx, 1
  000b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173555
  000be	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173556
  000ca	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173557
  000d6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000db	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e0	41 b9 03 00 00
	00		 mov	 r9d, 3
  000e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173558
  000ed	ba 34 0e 00 00	 mov	 edx, 3636		; 00000e34H
  000f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173559
  000f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN8@ecpsvm_doC:

; 3637 :         return(1);

  000ff	b8 01 00 00 00	 mov	 eax, 1
  00104	e9 af 06 00 00	 jmp	 $LN1@ecpsvm_doC
$LN7@ecpsvm_doC:

; 3638 :     }
; 3639 :     if(!(regs->CR_L(6) & 0x02000000))

  00109	b8 08 00 00 00	 mov	 eax, 8
  0010e	48 6b c0 07	 imul	 rax, rax, 7
  00112	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0011a	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00121	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00126	85 c0		 test	 eax, eax
  00128	75 0a		 jne	 SHORT $LN9@ecpsvm_doC

; 3640 :     {
; 3641 :         return(1);

  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	e9 84 06 00 00	 jmp	 $LN1@ecpsvm_doC
$LN9@ecpsvm_doC:

; 3642 :     }
; 3643 :     ecpsvm_cpstats.RETRN.call++;

  00134	48 8b 05 08 03
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+776
  0013b	48 ff c0	 inc	 rax
  0013e	48 89 05 08 03
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+776, rax

; 3644 :     DEBUG_CPASSISTX(RETRN,WRMSG(HHC90000, "D", "RETRN called"));

  00145	8b 05 18 03 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+792
  0014b	c1 e8 02	 shr	 eax, 2
  0014e	83 e0 01	 and	 eax, 1
  00151	85 c0		 test	 eax, eax
  00153	74 53		 je	 SHORT $LN10@ecpsvm_doC
  00155	b9 01 00 00 00	 mov	 ecx, 1
  0015a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00160	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173562
  00167	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0016c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173563
  00173	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00178	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173564
  0017f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00184	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00189	41 b9 03 00 00
	00		 mov	 r9d, 3
  0018f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173565
  00196	ba 3c 0e 00 00	 mov	 edx, 3644		; 00000e3cH
  0019b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173566
  001a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN10@ecpsvm_doC:

; 3645 : 
; 3646 :     if(regs->GR_L(12) >= EVM_L(APAGCP))

  001a8	b8 08 00 00 00	 mov	 eax, 8
  001ad	48 6b c0 0c	 imul	 rax, rax, 12
  001b1	48 89 44 24 58	 mov	 QWORD PTR tv150[rsp], rax
  001b6	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  001be	ba fe ff ff ff	 mov	 edx, -2
  001c3	b9 d0 03 00 00	 mov	 ecx, 976		; 000003d0H
  001c8	e8 00 00 00 00	 call	 s370_vfetch4
  001cd	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001d5	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv150[rsp]
  001da	39 84 11 80 02
	00 00		 cmp	 DWORD PTR [rcx+rdx+640], eax
  001e1	72 6d		 jb	 SHORT $LN11@ecpsvm_doC

; 3647 :     {
; 3648 :         DEBUG_CPASSISTX(RETRN,WRMSG(HHC90000, "D", "RETRN reject : module not in nucleus"));

  001e3	8b 05 18 03 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+792
  001e9	c1 e8 02	 shr	 eax, 2
  001ec	83 e0 01	 and	 eax, 1
  001ef	85 c0		 test	 eax, eax
  001f1	74 53		 je	 SHORT $LN12@ecpsvm_doC
  001f3	b9 01 00 00 00	 mov	 ecx, 1
  001f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173569
  00205	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0020a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173570
  00211	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00216	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173571
  0021d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00222	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00227	41 b9 03 00 00
	00		 mov	 r9d, 3
  0022d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173572
  00234	ba 40 0e 00 00	 mov	 edx, 3648		; 00000e40H
  00239	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173573
  00240	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN12@ecpsvm_doC:

; 3649 :         return(1);                      /* returning from a module not in nucleus, let CP do it */

  00246	b8 01 00 00 00	 mov	 eax, 1
  0024b	e9 68 05 00 00	 jmp	 $LN1@ecpsvm_doC
$LN11@ecpsvm_doC:

; 3650 :     }
; 3651 : 
; 3652 :     svclist=EVM_L(ASVCLIST);

  00250	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00258	ba fe ff ff ff	 mov	 edx, -2
  0025d	b9 e4 03 00 00	 mov	 ecx, 996		; 000003e4H
  00262	e8 00 00 00 00	 call	 s370_vfetch4
  00267	89 44 24 40	 mov	 DWORD PTR svclist$[rsp], eax

; 3653 :     slcadr=EVM_L(svclist+SLCADDR);

  0026b	8b 44 24 40	 mov	 eax, DWORD PTR svclist$[rsp]
  0026f	83 c0 04	 add	 eax, 4
  00272	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00277	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0027f	ba fe ff ff ff	 mov	 edx, -2
  00284	8b c8		 mov	 ecx, eax
  00286	e8 00 00 00 00	 call	 s370_vfetch4
  0028b	89 44 24 48	 mov	 DWORD PTR slcadr$[rsp], eax

; 3654 :     svchi=EVM_L(svclist+DMKSVCHI);

  0028f	8b 44 24 40	 mov	 eax, DWORD PTR svclist$[rsp]
  00293	83 c0 08	 add	 eax, 8
  00296	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0029b	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  002a3	ba fe ff ff ff	 mov	 edx, -2
  002a8	8b c8		 mov	 ecx, eax
  002aa	e8 00 00 00 00	 call	 s370_vfetch4
  002af	89 44 24 50	 mov	 DWORD PTR svchi$[rsp], eax

; 3655 :     svclo=EVM_L(svclist+DMKSVCLO);

  002b3	8b 44 24 40	 mov	 eax, DWORD PTR svclist$[rsp]
  002b7	83 c0 0c	 add	 eax, 12
  002ba	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002bf	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  002c7	ba fe ff ff ff	 mov	 edx, -2
  002cc	8b c8		 mov	 ecx, eax
  002ce	e8 00 00 00 00	 call	 s370_vfetch4
  002d3	89 44 24 54	 mov	 DWORD PTR svclo$[rsp], eax

; 3656 : 
; 3657 :     if(regs->GR_L(12) < slcadr)

  002d7	b8 08 00 00 00	 mov	 eax, 8
  002dc	48 6b c0 0c	 imul	 rax, rax, 12
  002e0	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002e8	8b 54 24 48	 mov	 edx, DWORD PTR slcadr$[rsp]
  002ec	39 94 01 80 02
	00 00		 cmp	 DWORD PTR [rcx+rax+640], edx
  002f3	73 6d		 jae	 SHORT $LN13@ecpsvm_doC

; 3658 :     {
; 3659 :         DEBUG_CPASSISTX(RETRN,WRMSG(HHC90000, "D", "RETRN reject : exit from V=R"));

  002f5	8b 05 18 03 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+792
  002fb	c1 e8 02	 shr	 eax, 2
  002fe	83 e0 01	 and	 eax, 1
  00301	85 c0		 test	 eax, eax
  00303	74 53		 je	 SHORT $LN14@ecpsvm_doC
  00305	b9 01 00 00 00	 mov	 ecx, 1
  0030a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00310	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173576
  00317	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0031c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173577
  00323	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00328	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173578
  0032f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00334	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00339	41 b9 03 00 00
	00		 mov	 r9d, 3
  0033f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173579
  00346	ba 4b 0e 00 00	 mov	 edx, 3659		; 00000e4bH
  0034b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173580
  00352	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN14@ecpsvm_doC:

; 3660 :         return(1);                      /* exit from V=R storage, let CP do it */

  00358	b8 01 00 00 00	 mov	 eax, 1
  0035d	e9 56 04 00 00	 jmp	 $LN1@ecpsvm_doC
$LN13@ecpsvm_doC:

; 3661 :     }
; 3662 :     if(regs->GR_L(13) < svchi)

  00362	b8 08 00 00 00	 mov	 eax, 8
  00367	48 6b c0 0d	 imul	 rax, rax, 13
  0036b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00373	8b 54 24 50	 mov	 edx, DWORD PTR svchi$[rsp]
  00377	39 94 01 80 02
	00 00		 cmp	 DWORD PTR [rcx+rax+640], edx
  0037e	0f 83 16 01 00
	00		 jae	 $LN15@ecpsvm_doC

; 3663 :     {
; 3664 :         if(regs->GR_L(13) > svclo)

  00384	b8 08 00 00 00	 mov	 eax, 8
  00389	48 6b c0 0d	 imul	 rax, rax, 13
  0038d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00395	8b 54 24 54	 mov	 edx, DWORD PTR svclo$[rsp]
  00399	39 94 01 80 02
	00 00		 cmp	 DWORD PTR [rcx+rax+640], edx
  003a0	76 6d		 jbe	 SHORT $LN16@ecpsvm_doC

; 3665 :         {
; 3666 :             DEBUG_CPASSISTX(RETRN,WRMSG(HHC90000, "D", "RETRN reject : savearea in paging area"));

  003a2	8b 05 18 03 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+792
  003a8	c1 e8 02	 shr	 eax, 2
  003ab	83 e0 01	 and	 eax, 1
  003ae	85 c0		 test	 eax, eax
  003b0	74 53		 je	 SHORT $LN17@ecpsvm_doC
  003b2	b9 01 00 00 00	 mov	 ecx, 1
  003b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173584
  003c4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173585
  003d0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173586
  003dc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003e1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003e6	41 b9 03 00 00
	00		 mov	 r9d, 3
  003ec	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173587
  003f3	ba 52 0e 00 00	 mov	 edx, 3666		; 00000e52H
  003f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173588
  003ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@ecpsvm_doC:

; 3667 :            return(1);                      /* Let CP handle if SAVEAREA is in dynamic paging area */

  00405	b8 01 00 00 00	 mov	 eax, 1
  0040a	e9 a9 03 00 00	 jmp	 $LN1@ecpsvm_doC
$LN16@ecpsvm_doC:

; 3668 :         }
; 3669 :         if(regs->GR_L(13) < slcadr)

  0040f	b8 08 00 00 00	 mov	 eax, 8
  00414	48 6b c0 0d	 imul	 rax, rax, 13
  00418	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00420	8b 54 24 48	 mov	 edx, DWORD PTR slcadr$[rsp]
  00424	39 94 01 80 02
	00 00		 cmp	 DWORD PTR [rcx+rax+640], edx
  0042b	73 6d		 jae	 SHORT $LN18@ecpsvm_doC

; 3670 :         {
; 3671 :             DEBUG_CPASSISTX(RETRN,WRMSG(HHC90000, "D", "RETRN reject : savearea in V=R area"));

  0042d	8b 05 18 03 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+792
  00433	c1 e8 02	 shr	 eax, 2
  00436	83 e0 01	 and	 eax, 1
  00439	85 c0		 test	 eax, eax
  0043b	74 53		 je	 SHORT $LN19@ecpsvm_doC
  0043d	b9 01 00 00 00	 mov	 ecx, 1
  00442	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00448	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173591
  0044f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00454	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173592
  0045b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00460	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173593
  00467	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0046c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00471	41 b9 03 00 00
	00		 mov	 r9d, 3
  00477	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173594
  0047e	ba 57 0e 00 00	 mov	 edx, 3671		; 00000e57H
  00483	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173595
  0048a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN19@ecpsvm_doC:

; 3672 :            return(1);                      /* Let CP handle this */

  00490	b8 01 00 00 00	 mov	 eax, 1
  00495	e9 1e 03 00 00	 jmp	 $LN1@ecpsvm_doC
$LN18@ecpsvm_doC:
$LN15@ecpsvm_doC:

; 3673 :         }
; 3674 :     }
; 3675 : 
; 3676 :     /* Get return address and unlink the save areas; restore caller's R12/R13 and return */
; 3677 :     retaddr=EVM_L(regs->GR_L(13)+SAVERETN) & 0x00FFFFFF;

  0049a	b8 08 00 00 00	 mov	 eax, 8
  0049f	48 6b c0 0d	 imul	 rax, rax, 13
  004a3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004ab	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  004b2	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  004b7	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  004bf	ba fe ff ff ff	 mov	 edx, -2
  004c4	8b c8		 mov	 ecx, eax
  004c6	e8 00 00 00 00	 call	 s370_vfetch4
  004cb	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  004d0	89 44 24 4c	 mov	 DWORD PTR retaddr$[rsp], eax

; 3678 :     regs->GR_L(14)=EVM_L(svclist+NEXTSAVE);

  004d4	8b 44 24 40	 mov	 eax, DWORD PTR svclist$[rsp]
  004d8	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  004dd	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  004e5	ba fe ff ff ff	 mov	 edx, -2
  004ea	8b c8		 mov	 ecx, eax
  004ec	e8 00 00 00 00	 call	 s370_vfetch4
  004f1	b9 08 00 00 00	 mov	 ecx, 8
  004f6	48 6b c9 0e	 imul	 rcx, rcx, 14
  004fa	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00502	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 3679 :     EVM_ST(regs->GR_L(14),regs->GR_L(13)+SAVENEXT);

  00509	b8 08 00 00 00	 mov	 eax, 8
  0050e	48 6b c0 0d	 imul	 rax, rax, 13
  00512	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0051a	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00521	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00526	b9 08 00 00 00	 mov	 ecx, 8
  0052b	48 6b c9 0e	 imul	 rcx, rcx, 14
  0052f	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00537	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0053d	8b d0		 mov	 edx, eax
  0053f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00547	8b 8c 08 80 02
	00 00		 mov	 ecx, DWORD PTR [rax+rcx+640]
  0054e	e8 00 00 00 00	 call	 s370_vstore4

; 3680 :     EVM_ST(regs->GR_L(13),svclist+NEXTSAVE);

  00553	8b 44 24 40	 mov	 eax, DWORD PTR svclist$[rsp]
  00557	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0055c	b9 08 00 00 00	 mov	 ecx, 8
  00561	48 6b c9 0d	 imul	 rcx, rcx, 13
  00565	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0056d	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00573	8b d0		 mov	 edx, eax
  00575	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0057d	8b 8c 08 80 02
	00 00		 mov	 ecx, DWORD PTR [rax+rcx+640]
  00584	e8 00 00 00 00	 call	 s370_vstore4

; 3681 :     regs->GR_L(12)=EVM_L(regs->GR_L(13)+SAVER12);

  00589	b8 08 00 00 00	 mov	 eax, 8
  0058e	48 6b c0 0d	 imul	 rax, rax, 13
  00592	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0059a	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  005a1	83 c0 04	 add	 eax, 4
  005a4	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  005a9	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  005b1	ba fe ff ff ff	 mov	 edx, -2
  005b6	8b c8		 mov	 ecx, eax
  005b8	e8 00 00 00 00	 call	 s370_vfetch4
  005bd	b9 08 00 00 00	 mov	 ecx, 8
  005c2	48 6b c9 0c	 imul	 rcx, rcx, 12
  005c6	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  005ce	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 3682 :     regs->GR_L(13)=EVM_L(regs->GR_L(13)+SAVER13);

  005d5	b8 08 00 00 00	 mov	 eax, 8
  005da	48 6b c0 0d	 imul	 rax, rax, 13
  005de	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005e6	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  005ed	83 c0 08	 add	 eax, 8
  005f0	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  005f5	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  005fd	ba fe ff ff ff	 mov	 edx, -2
  00602	8b c8		 mov	 ecx, eax
  00604	e8 00 00 00 00	 call	 s370_vfetch4
  00609	b9 08 00 00 00	 mov	 ecx, 8
  0060e	48 6b c9 0d	 imul	 rcx, rcx, 13
  00612	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0061a	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 3683 : 
; 3684 :     if (EVM_IC(TRACFLG1) & TRAC02)

  00621	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00629	ba fe ff ff ff	 mov	 edx, -2
  0062e	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  00633	e8 00 00 00 00	 call	 s370_vfetchb
  00638	0f b6 c0	 movzx	 eax, al
  0063b	83 e0 40	 and	 eax, 64			; 00000040H
  0063e	85 c0		 test	 eax, eax
  00640	0f 84 be 00 00
	00		 je	 $LN20@ecpsvm_doC

; 3685 :     {
; 3686 :         traceptr=ecpsvm_get_trace_entry(regs);

  00646	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0064e	e8 00 00 00 00	 call	 ecpsvm_get_trace_entry
  00653	89 44 24 44	 mov	 DWORD PTR traceptr$[rsp], eax

; 3687 :         EVM_ST(retaddr,traceptr);

  00657	8b 44 24 44	 mov	 eax, DWORD PTR traceptr$[rsp]
  0065b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00660	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00668	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0066e	8b d0		 mov	 edx, eax
  00670	8b 4c 24 4c	 mov	 ecx, DWORD PTR retaddr$[rsp]
  00674	e8 00 00 00 00	 call	 s370_vstore4

; 3688 :         EVM_STC(TRCSVC,traceptr);

  00679	8b 44 24 44	 mov	 eax, DWORD PTR traceptr$[rsp]
  0067d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00682	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0068a	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00690	8b d0		 mov	 edx, eax
  00692	b1 82		 mov	 cl, 130			; 00000082H
  00694	e8 00 00 00 00	 call	 s370_vstoreb

; 3689 :         EVM_ST(0x0002000C,traceptr+4);              /* always ILC=2 and INTC=0C */

  00699	8b 44 24 44	 mov	 eax, DWORD PTR traceptr$[rsp]
  0069d	83 c0 04	 add	 eax, 4
  006a0	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  006a5	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  006ad	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  006b3	8b d0		 mov	 edx, eax
  006b5	b9 0c 00 02 00	 mov	 ecx, 131084		; 0002000cH
  006ba	e8 00 00 00 00	 call	 s370_vstore4

; 3690 :         work_p=MADDR((VADR)traceptr+8,USE_REAL_ADDR,regs,ACCTYPE_WRITE,0);

  006bf	8b 44 24 44	 mov	 eax, DWORD PTR traceptr$[rsp]
  006c3	83 c0 08	 add	 eax, 8
  006c6	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  006cb	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  006d3	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  006db	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  006e1	ba 01 00 00 00	 mov	 edx, 1
  006e6	8b c8		 mov	 ecx, eax
  006e8	e8 00 00 00 00	 call	 s370_maddr_l
  006ed	48 89 44 24 60	 mov	 QWORD PTR work_p$[rsp], rax

; 3691 :         ARCH_DEP(store_psw) (regs,work_p);

  006f2	48 8b 54 24 60	 mov	 rdx, QWORD PTR work_p$[rsp]
  006f7	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  006ff	e8 00 00 00 00	 call	 s370_store_psw
$LN20@ecpsvm_doC:

; 3692 :     }
; 3693 : 
; 3694 :     CPASSIST_HIT(RETRN);

  00704	48 8b 05 10 03
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+784
  0070b	48 ff c0	 inc	 rax
  0070e	48 89 05 10 03
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+784, rax
$LN4@ecpsvm_doC:

; 3695 :     SET_PSW_IA_AND_MAYBE_IP(regs,retaddr);

  00715	8b 44 24 4c	 mov	 eax, DWORD PTR retaddr$[rsp]
  00719	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0071e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00726	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  0072c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00734	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  0073c	74 6e		 je	 SHORT $LN21@ecpsvm_doC
  0073e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00746	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0074c	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00751	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00759	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  0075f	75 38		 jne	 SHORT $LN22@ecpsvm_doC
  00761	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00769	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0076f	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00774	8b c0		 mov	 eax, eax
  00776	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0077e	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00785	48 0b c8	 or	 rcx, rax
  00788	48 8b c1	 mov	 rax, rcx
  0078b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00793	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00797	eb 13		 jmp	 SHORT $LN23@ecpsvm_doC
$LN22@ecpsvm_doC:
  00799	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  007a1	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN23@ecpsvm_doC:
$LN21@ecpsvm_doC:
  007ac	33 c0		 xor	 eax, eax
  007ae	85 c0		 test	 eax, eax
  007b0	0f 85 5f ff ff
	ff		 jne	 $LN4@ecpsvm_doC

; 3696 :     return(0);

  007b6	33 c0		 xor	 eax, eax
$LN1@ecpsvm_doC:

; 3697 : }

  007b8	48 83 c4 78	 add	 rsp, 120		; 00000078H
  007bc	c3		 ret	 0
ecpsvm_doCPretrn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
traceptr$ = 64
vnextsave$ = 68
svclist$ = 72
tv182 = 76
svcR12$ = 80
svcR13$ = 84
tv160 = 88
work_p$ = 96
regs$ = 128
ecpsvm_doCPlink PROC

; 3555 : {

$LN18:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 3556 : VADR svclist;
; 3557 : VADR vnextsave;
; 3558 : VADR svcR12;
; 3559 : VADR svcR13;
; 3560 : VADR traceptr;
; 3561 : BYTE *work_p;
; 3562 : 
; 3563 :     if(!sysblk.ecpsvm.available)

  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00010	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00016	c1 e8 11	 shr	 eax, 17
  00019	83 e0 01	 and	 eax, 1
  0001c	85 c0		 test	 eax, eax
  0001e	75 6d		 jne	 SHORT $LN5@ecpsvm_doC

; 3564 :     {
; 3565 :         DEBUG_CPASSISTX(LINK,WRMSG(HHC90000, "D", "CPASSTS LINK ECPS:VM Disabled in configuration"));

  00020	8b 05 f8 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+760
  00026	c1 e8 02	 shr	 eax, 2
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 53		 je	 SHORT $LN6@ecpsvm_doC
  00030	b9 01 00 00 00	 mov	 ecx, 1
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173501
  00042	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173502
  0004e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173503
  0005a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0005f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00064	41 b9 03 00 00
	00		 mov	 r9d, 3
  0006a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173504
  00071	ba ed 0d 00 00	 mov	 edx, 3565		; 00000dedH
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173505
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN6@ecpsvm_doC:

; 3566 :         return(1);

  00083	b8 01 00 00 00	 mov	 eax, 1
  00088	e9 52 05 00 00	 jmp	 $LN1@ecpsvm_doC
$LN5@ecpsvm_doC:

; 3567 :     }
; 3568 :     if(!ecpsvm_cpstats.LINK.enabled)

  0008d	8b 05 f8 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+760
  00093	d1 e8		 shr	 eax, 1
  00095	83 e0 01	 and	 eax, 1
  00098	85 c0		 test	 eax, eax
  0009a	75 6d		 jne	 SHORT $LN7@ecpsvm_doC

; 3569 :     {
; 3570 :         DEBUG_CPASSISTX(LINK,WRMSG(HHC90000, "D", "CPASSTS LINK Disabled by command"));

  0009c	8b 05 f8 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+760
  000a2	c1 e8 02	 shr	 eax, 2
  000a5	83 e0 01	 and	 eax, 1
  000a8	85 c0		 test	 eax, eax
  000aa	74 53		 je	 SHORT $LN8@ecpsvm_doC
  000ac	b9 01 00 00 00	 mov	 ecx, 1
  000b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173508
  000be	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173509
  000ca	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173510
  000d6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000db	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e0	41 b9 03 00 00
	00		 mov	 r9d, 3
  000e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173511
  000ed	ba f2 0d 00 00	 mov	 edx, 3570		; 00000df2H
  000f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173512
  000f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN8@ecpsvm_doC:

; 3571 :         return(1);

  000ff	b8 01 00 00 00	 mov	 eax, 1
  00104	e9 d6 04 00 00	 jmp	 $LN1@ecpsvm_doC
$LN7@ecpsvm_doC:

; 3572 :     }
; 3573 :     if(!(regs->CR_L(6) & 0x02000000))

  00109	b8 08 00 00 00	 mov	 eax, 8
  0010e	48 6b c0 07	 imul	 rax, rax, 7
  00112	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0011a	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00121	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00126	85 c0		 test	 eax, eax
  00128	75 0a		 jne	 SHORT $LN9@ecpsvm_doC

; 3574 :     {
; 3575 :         return(1);

  0012a	b8 01 00 00 00	 mov	 eax, 1
  0012f	e9 ab 04 00 00	 jmp	 $LN1@ecpsvm_doC
$LN9@ecpsvm_doC:

; 3576 :     }
; 3577 :     ecpsvm_cpstats.LINK.call++;

  00134	48 8b 05 e8 02
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+744
  0013b	48 ff c0	 inc	 rax
  0013e	48 89 05 e8 02
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+744, rax

; 3578 :     DEBUG_CPASSISTX(LINK,WRMSG(HHC90000, "D", "LINK called"));

  00145	8b 05 f8 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+760
  0014b	c1 e8 02	 shr	 eax, 2
  0014e	83 e0 01	 and	 eax, 1
  00151	85 c0		 test	 eax, eax
  00153	74 53		 je	 SHORT $LN10@ecpsvm_doC
  00155	b9 01 00 00 00	 mov	 ecx, 1
  0015a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00160	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173515
  00167	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0016c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173516
  00173	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00178	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173517
  0017f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00184	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00189	41 b9 03 00 00
	00		 mov	 r9d, 3
  0018f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173518
  00196	ba fa 0d 00 00	 mov	 edx, 3578		; 00000dfaH
  0019b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173519
  001a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN10@ecpsvm_doC:

; 3579 : 
; 3580 : 
; 3581 :     svclist=EVM_L(ASVCLIST);

  001a8	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  001b0	ba fe ff ff ff	 mov	 edx, -2
  001b5	b9 e4 03 00 00	 mov	 ecx, 996		; 000003e4H
  001ba	e8 00 00 00 00	 call	 s370_vfetch4
  001bf	89 44 24 48	 mov	 DWORD PTR svclist$[rsp], eax

; 3582 :     vnextsave=EVM_L(svclist+NEXTSAVE);

  001c3	8b 44 24 48	 mov	 eax, DWORD PTR svclist$[rsp]
  001c7	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  001cc	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  001d4	ba fe ff ff ff	 mov	 edx, -2
  001d9	8b c8		 mov	 ecx, eax
  001db	e8 00 00 00 00	 call	 s370_vfetch4
  001e0	89 44 24 44	 mov	 DWORD PTR vnextsave$[rsp], eax

; 3583 :     if(!vnextsave)

  001e4	83 7c 24 44 00	 cmp	 DWORD PTR vnextsave$[rsp], 0
  001e9	75 0a		 jne	 SHORT $LN11@ecpsvm_doC

; 3584 :     {
; 3585 :         return(1);                      /* no save area available */

  001eb	b8 01 00 00 00	 mov	 eax, 1
  001f0	e9 ea 03 00 00	 jmp	 $LN1@ecpsvm_doC
$LN11@ecpsvm_doC:

; 3586 :     }
; 3587 :     if(regs->GR_L(15) >= EVM_L(APAGCP))

  001f5	b8 08 00 00 00	 mov	 eax, 8
  001fa	48 6b c0 0f	 imul	 rax, rax, 15
  001fe	48 89 44 24 58	 mov	 QWORD PTR tv160[rsp], rax
  00203	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0020b	ba fe ff ff ff	 mov	 edx, -2
  00210	b9 d0 03 00 00	 mov	 ecx, 976		; 000003d0H
  00215	e8 00 00 00 00	 call	 s370_vfetch4
  0021a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00222	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv160[rsp]
  00227	39 84 11 80 02
	00 00		 cmp	 DWORD PTR [rcx+rdx+640], eax
  0022e	72 0a		 jb	 SHORT $LN12@ecpsvm_doC

; 3588 :     {
; 3589 :         return(1);                      /* called module not in nucleus */

  00230	b8 01 00 00 00	 mov	 eax, 1
  00235	e9 a5 03 00 00	 jmp	 $LN1@ecpsvm_doC
$LN12@ecpsvm_doC:

; 3590 :     }
; 3591 : 
; 3592 :     /* Link the save areas together and set GR12 to the destination address */
; 3593 :     svcR12=regs->GR_L(12);

  0023a	b8 08 00 00 00	 mov	 eax, 8
  0023f	48 6b c0 0c	 imul	 rax, rax, 12
  00243	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0024b	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00252	89 44 24 50	 mov	 DWORD PTR svcR12$[rsp], eax

; 3594 :     svcR13=regs->GR_L(13);

  00256	b8 08 00 00 00	 mov	 eax, 8
  0025b	48 6b c0 0d	 imul	 rax, rax, 13
  0025f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00267	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0026e	89 44 24 54	 mov	 DWORD PTR svcR13$[rsp], eax

; 3595 :     regs->GR_L(13)=vnextsave;

  00272	b8 08 00 00 00	 mov	 eax, 8
  00277	48 6b c0 0d	 imul	 rax, rax, 13
  0027b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00283	8b 54 24 44	 mov	 edx, DWORD PTR vnextsave$[rsp]
  00287	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 3596 :     EVM_ST(EVM_L(regs->GR_L(13)+SAVENEXT),svclist+NEXTSAVE);

  0028e	8b 44 24 48	 mov	 eax, DWORD PTR svclist$[rsp]
  00292	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00297	89 44 24 4c	 mov	 DWORD PTR tv182[rsp], eax
  0029b	b9 08 00 00 00	 mov	 ecx, 8
  002a0	48 6b c9 0d	 imul	 rcx, rcx, 13
  002a4	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  002ac	8b 8c 0a 80 02
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+640]
  002b3	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  002b9	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  002c1	ba fe ff ff ff	 mov	 edx, -2
  002c6	e8 00 00 00 00	 call	 s370_vfetch4
  002cb	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  002d3	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  002d9	8b 4c 24 4c	 mov	 ecx, DWORD PTR tv182[rsp]
  002dd	8b d1		 mov	 edx, ecx
  002df	8b c8		 mov	 ecx, eax
  002e1	e8 00 00 00 00	 call	 s370_vstore4

; 3597 :     EVM_ST(svcR12,regs->GR_L(13)+SAVER12);

  002e6	b8 08 00 00 00	 mov	 eax, 8
  002eb	48 6b c0 0d	 imul	 rax, rax, 13
  002ef	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002f7	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  002fe	83 c0 04	 add	 eax, 4
  00301	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00306	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0030e	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00314	8b d0		 mov	 edx, eax
  00316	8b 4c 24 50	 mov	 ecx, DWORD PTR svcR12$[rsp]
  0031a	e8 00 00 00 00	 call	 s370_vstore4

; 3598 :     EVM_ST(svcR13,regs->GR_L(13)+SAVER13);

  0031f	b8 08 00 00 00	 mov	 eax, 8
  00324	48 6b c0 0d	 imul	 rax, rax, 13
  00328	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00330	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00337	83 c0 08	 add	 eax, 8
  0033a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0033f	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00347	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0034d	8b d0		 mov	 edx, eax
  0034f	8b 4c 24 54	 mov	 ecx, DWORD PTR svcR13$[rsp]
  00353	e8 00 00 00 00	 call	 s370_vstore4

; 3599 :     regs->GR_L(14)=PSW_IA_FROM_IP(regs,0);

  00358	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00360	8b 80 10 02 00
	00		 mov	 eax, DWORD PTR [rax+528]
  00366	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0036e	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00376	48 8b 92 00 02
	00 00		 mov	 rdx, QWORD PTR [rdx+512]
  0037d	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00381	48 2b ca	 sub	 rcx, rdx
  00384	48 03 c1	 add	 rax, rcx
  00387	48 25 ff ff ff
	00		 and	 rax, 16777215		; 00ffffffH
  0038d	b9 08 00 00 00	 mov	 ecx, 8
  00392	48 6b c9 0e	 imul	 rcx, rcx, 14
  00396	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0039e	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 3600 :     EVM_ST(regs->GR_L(14),regs->GR_L(13)+SAVERETN);

  003a5	b8 08 00 00 00	 mov	 eax, 8
  003aa	48 6b c0 0d	 imul	 rax, rax, 13
  003ae	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003b6	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  003bd	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  003c2	b9 08 00 00 00	 mov	 ecx, 8
  003c7	48 6b c9 0e	 imul	 rcx, rcx, 14
  003cb	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  003d3	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  003d9	8b d0		 mov	 edx, eax
  003db	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003e3	8b 8c 08 80 02
	00 00		 mov	 ecx, DWORD PTR [rax+rcx+640]
  003ea	e8 00 00 00 00	 call	 s370_vstore4

; 3601 :     regs->GR_L(12)=regs->GR_L(15);

  003ef	b8 08 00 00 00	 mov	 eax, 8
  003f4	48 6b c0 0f	 imul	 rax, rax, 15
  003f8	b9 08 00 00 00	 mov	 ecx, 8
  003fd	48 6b c9 0c	 imul	 rcx, rcx, 12
  00401	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00409	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00411	41 8b 84 00 80
	02 00 00	 mov	 eax, DWORD PTR [r8+rax+640]
  00419	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 3602 : 
; 3603 :     if (EVM_IC(TRACFLG1) & TRAC02)

  00420	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00428	ba fe ff ff ff	 mov	 edx, -2
  0042d	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  00432	e8 00 00 00 00	 call	 s370_vfetchb
  00437	0f b6 c0	 movzx	 eax, al
  0043a	83 e0 40	 and	 eax, 64			; 00000040H
  0043d	85 c0		 test	 eax, eax
  0043f	0f 84 d2 00 00
	00		 je	 $LN13@ecpsvm_doC

; 3604 :     {
; 3605 :         traceptr=ecpsvm_get_trace_entry(regs);

  00445	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0044d	e8 00 00 00 00	 call	 ecpsvm_get_trace_entry
  00452	89 44 24 40	 mov	 DWORD PTR traceptr$[rsp], eax

; 3606 :         EVM_ST(regs->GR_L(15),traceptr);

  00456	8b 44 24 40	 mov	 eax, DWORD PTR traceptr$[rsp]
  0045a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0045f	b9 08 00 00 00	 mov	 ecx, 8
  00464	48 6b c9 0f	 imul	 rcx, rcx, 15
  00468	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00470	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00476	8b d0		 mov	 edx, eax
  00478	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00480	8b 8c 08 80 02
	00 00		 mov	 ecx, DWORD PTR [rax+rcx+640]
  00487	e8 00 00 00 00	 call	 s370_vstore4

; 3607 :         EVM_STC(TRCSVC,traceptr);

  0048c	8b 44 24 40	 mov	 eax, DWORD PTR traceptr$[rsp]
  00490	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00495	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0049d	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  004a3	8b d0		 mov	 edx, eax
  004a5	b1 82		 mov	 cl, 130			; 00000082H
  004a7	e8 00 00 00 00	 call	 s370_vstoreb

; 3608 :         EVM_ST(0x00020008,traceptr+4);              /* always ILC=2 and INTC=08 */

  004ac	8b 44 24 40	 mov	 eax, DWORD PTR traceptr$[rsp]
  004b0	83 c0 04	 add	 eax, 4
  004b3	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  004b8	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  004c0	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  004c6	8b d0		 mov	 edx, eax
  004c8	b9 08 00 02 00	 mov	 ecx, 131080		; 00020008H
  004cd	e8 00 00 00 00	 call	 s370_vstore4

; 3609 :         work_p=MADDR((VADR)traceptr+8,USE_REAL_ADDR,regs,ACCTYPE_WRITE,0);

  004d2	8b 44 24 40	 mov	 eax, DWORD PTR traceptr$[rsp]
  004d6	83 c0 08	 add	 eax, 8
  004d9	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  004de	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  004e6	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  004ee	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  004f4	ba 01 00 00 00	 mov	 edx, 1
  004f9	8b c8		 mov	 ecx, eax
  004fb	e8 00 00 00 00	 call	 s370_maddr_l
  00500	48 89 44 24 60	 mov	 QWORD PTR work_p$[rsp], rax

; 3610 :         ARCH_DEP(store_psw) (regs,work_p);

  00505	48 8b 54 24 60	 mov	 rdx, QWORD PTR work_p$[rsp]
  0050a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00512	e8 00 00 00 00	 call	 s370_store_psw
$LN13@ecpsvm_doC:

; 3611 :     }
; 3612 : 
; 3613 :     CPASSIST_HIT(LINK);

  00517	48 8b 05 f0 02
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+752
  0051e	48 ff c0	 inc	 rax
  00521	48 89 05 f0 02
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+752, rax
$LN4@ecpsvm_doC:

; 3614 :     SET_PSW_IA_AND_MAYBE_IP(regs,regs->GR_L(12));

  00528	b8 08 00 00 00	 mov	 eax, 8
  0052d	48 6b c0 0c	 imul	 rax, rax, 12
  00531	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00539	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00540	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00545	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0054d	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00553	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0055b	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00563	74 6e		 je	 SHORT $LN14@ecpsvm_doC
  00565	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0056d	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00573	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00578	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00580	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00586	75 38		 jne	 SHORT $LN15@ecpsvm_doC
  00588	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00590	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00596	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0059b	8b c0		 mov	 eax, eax
  0059d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005a5	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  005ac	48 0b c8	 or	 rcx, rax
  005af	48 8b c1	 mov	 rax, rcx
  005b2	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005ba	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  005be	eb 13		 jmp	 SHORT $LN16@ecpsvm_doC
$LN15@ecpsvm_doC:
  005c0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005c8	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN16@ecpsvm_doC:
$LN14@ecpsvm_doC:
  005d3	33 c0		 xor	 eax, eax
  005d5	85 c0		 test	 eax, eax
  005d7	0f 85 4b ff ff
	ff		 jne	 $LN4@ecpsvm_doC

; 3615 :     return(0);

  005dd	33 c0		 xor	 eax, eax
$LN1@ecpsvm_doC:

; 3616 : }

  005df	48 83 c4 78	 add	 rsp, 120		; 00000078H
  005e3	c3		 ret	 0
ecpsvm_doCPlink ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
tv130 = 64
tv131 = 68
regs$ = 96
micblok$ = 104
micpend$ = 112
oldr$ = 120
newr$ = 128
ecpsvm_check_pswtrans PROC

; 3421 : {

$LN40:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@ecpsvm_che:

; 3422 :     UNREFERENCED(micblok);

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN4@ecpsvm_che
$LN7@ecpsvm_che:

; 3423 :     UNREFERENCED(regs);

  0001e	33 c0		 xor	 eax, eax
  00020	85 c0		 test	 eax, eax
  00022	75 fa		 jne	 SHORT $LN7@ecpsvm_che
$LN10@ecpsvm_che:

; 3424 : 
; 3425 :     MAYBE_SET_PSW_IA_FROM_IP(newr);

  00024	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR newr$[rsp]
  0002c	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00034	74 43		 je	 SHORT $LN14@ecpsvm_che
  00036	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR newr$[rsp]
  0003e	8b 80 10 02 00
	00		 mov	 eax, DWORD PTR [rax+528]
  00044	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR newr$[rsp]
  0004c	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR newr$[rsp]
  00054	48 8b 92 00 02
	00 00		 mov	 rdx, QWORD PTR [rdx+512]
  0005b	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0005f	48 2b ca	 sub	 rcx, rdx
  00062	48 03 c1	 add	 rax, rcx
  00065	48 25 ff ff ff
	00		 and	 rax, 16777215		; 00ffffffH
  0006b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR newr$[rsp]
  00073	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
$LN14@ecpsvm_che:
  00079	33 c0		 xor	 eax, eax
  0007b	85 c0		 test	 eax, eax
  0007d	75 a5		 jne	 SHORT $LN10@ecpsvm_che
$LN13@ecpsvm_che:

; 3426 :     MAYBE_SET_PSW_IA_FROM_IP(oldr);

  0007f	48 8b 44 24 78	 mov	 rax, QWORD PTR oldr$[rsp]
  00084	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  0008c	74 37		 je	 SHORT $LN15@ecpsvm_che
  0008e	48 8b 44 24 78	 mov	 rax, QWORD PTR oldr$[rsp]
  00093	8b 80 10 02 00
	00		 mov	 eax, DWORD PTR [rax+528]
  00099	48 8b 4c 24 78	 mov	 rcx, QWORD PTR oldr$[rsp]
  0009e	48 8b 54 24 78	 mov	 rdx, QWORD PTR oldr$[rsp]
  000a3	48 8b 92 00 02
	00 00		 mov	 rdx, QWORD PTR [rdx+512]
  000aa	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  000ae	48 2b ca	 sub	 rcx, rdx
  000b1	48 03 c1	 add	 rax, rcx
  000b4	48 25 ff ff ff
	00		 and	 rax, 16777215		; 00ffffffH
  000ba	48 8b 4c 24 78	 mov	 rcx, QWORD PTR oldr$[rsp]
  000bf	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
$LN15@ecpsvm_che:
  000c5	33 c0		 xor	 eax, eax
  000c7	85 c0		 test	 eax, eax
  000c9	75 b4		 jne	 SHORT $LN13@ecpsvm_che

; 3427 : 
; 3428 :     /* Check for a switch from BC->EC or EC->BC */
; 3429 :     if(ECMODE(&oldr->psw)!=ECMODE(&newr->psw))

  000cb	48 8b 44 24 78	 mov	 rax, QWORD PTR oldr$[rsp]
  000d0	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  000d4	83 e0 08	 and	 eax, 8
  000d7	85 c0		 test	 eax, eax
  000d9	74 0a		 je	 SHORT $LN38@ecpsvm_che
  000db	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000e3	eb 08		 jmp	 SHORT $LN39@ecpsvm_che
$LN38@ecpsvm_che:
  000e5	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN39@ecpsvm_che:
  000ed	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR newr$[rsp]
  000f5	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  000f9	83 e0 08	 and	 eax, 8
  000fc	85 c0		 test	 eax, eax
  000fe	74 0a		 je	 SHORT $LN36@ecpsvm_che
  00100	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  00108	eb 08		 jmp	 SHORT $LN37@ecpsvm_che
$LN36@ecpsvm_che:
  0010a	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN37@ecpsvm_che:
  00112	8b 44 24 40	 mov	 eax, DWORD PTR tv130[rsp]
  00116	39 44 24 44	 cmp	 DWORD PTR tv131[rsp], eax
  0011a	74 6d		 je	 SHORT $LN16@ecpsvm_che

; 3430 :     {
; 3431 :         DEBUG_SASSISTX(LPSW,WRMSG(HHC90000, "D", "New and Old PSW have a EC/BC transition"));

  0011c	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  00122	c1 e8 02	 shr	 eax, 2
  00125	83 e0 01	 and	 eax, 1
  00128	85 c0		 test	 eax, eax
  0012a	74 53		 je	 SHORT $LN17@ecpsvm_che
  0012c	b9 01 00 00 00	 mov	 ecx, 1
  00131	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00137	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173261
  0013e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173262
  0014a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0014f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173263
  00156	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0015b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00160	41 b9 03 00 00
	00		 mov	 r9d, 3
  00166	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173264
  0016d	ba 67 0d 00 00	 mov	 edx, 3431		; 00000d67H
  00172	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173265
  00179	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@ecpsvm_che:

; 3432 :         return(1);

  0017f	b8 01 00 00 00	 mov	 eax, 1
  00184	e9 82 03 00 00	 jmp	 $LN1@ecpsvm_che
$LN16@ecpsvm_che:

; 3433 :     }
; 3434 :     /* Check if PER or DAT is being changed */
; 3435 :     if(ECMODE(&newr->psw))

  00189	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR newr$[rsp]
  00191	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00195	83 e0 08	 and	 eax, 8
  00198	85 c0		 test	 eax, eax
  0019a	0f 84 8c 00 00
	00		 je	 $LN18@ecpsvm_che

; 3436 :     {
; 3437 :         if((newr->psw.sysmask & 0x44) != (oldr->psw.sysmask & 0x44))

  001a0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR newr$[rsp]
  001a8	0f b6 40 78	 movzx	 eax, BYTE PTR [rax+120]
  001ac	83 e0 44	 and	 eax, 68			; 00000044H
  001af	48 8b 4c 24 78	 mov	 rcx, QWORD PTR oldr$[rsp]
  001b4	0f b6 49 78	 movzx	 ecx, BYTE PTR [rcx+120]
  001b8	83 e1 44	 and	 ecx, 68			; 00000044H
  001bb	3b c1		 cmp	 eax, ecx
  001bd	74 6d		 je	 SHORT $LN19@ecpsvm_che

; 3438 :         {
; 3439 :             DEBUG_SASSISTX(LPSW,WRMSG(HHC90000, "D", "New PSW Enables DAT or PER"));

  001bf	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  001c5	c1 e8 02	 shr	 eax, 2
  001c8	83 e0 01	 and	 eax, 1
  001cb	85 c0		 test	 eax, eax
  001cd	74 53		 je	 SHORT $LN20@ecpsvm_che
  001cf	b9 01 00 00 00	 mov	 ecx, 1
  001d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173269
  001e1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173270
  001ed	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173271
  001f9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001fe	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00203	41 b9 03 00 00
	00		 mov	 r9d, 3
  00209	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173272
  00210	ba 6f 0d 00 00	 mov	 edx, 3439		; 00000d6fH
  00215	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173273
  0021c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN20@ecpsvm_che:

; 3440 :             return(1);

  00222	b8 01 00 00 00	 mov	 eax, 1
  00227	e9 df 02 00 00	 jmp	 $LN1@ecpsvm_che
$LN19@ecpsvm_che:
$LN18@ecpsvm_che:

; 3441 :         }
; 3442 :     }
; 3443 :     /* Check if a Virtual interrupt is pending and new interrupts are being enabled */
; 3444 :     if(micpend & 0x80)

  0022c	0f b6 44 24 70	 movzx	 eax, BYTE PTR micpend$[rsp]
  00231	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00236	85 c0		 test	 eax, eax
  00238	0f 84 33 01 00
	00		 je	 $LN21@ecpsvm_che

; 3445 :     {
; 3446 :         if(ECMODE(&newr->psw))

  0023e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR newr$[rsp]
  00246	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  0024a	83 e0 08	 and	 eax, 8
  0024d	85 c0		 test	 eax, eax
  0024f	0f 84 92 00 00
	00		 je	 $LN22@ecpsvm_che

; 3447 :         {
; 3448 :             if(((~oldr->psw.sysmask) & 0x03) & newr->psw.sysmask)

  00255	48 8b 44 24 78	 mov	 rax, QWORD PTR oldr$[rsp]
  0025a	0f b6 40 78	 movzx	 eax, BYTE PTR [rax+120]
  0025e	f7 d0		 not	 eax
  00260	83 e0 03	 and	 eax, 3
  00263	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR newr$[rsp]
  0026b	0f b6 49 78	 movzx	 ecx, BYTE PTR [rcx+120]
  0026f	23 c1		 and	 eax, ecx
  00271	85 c0		 test	 eax, eax
  00273	74 6d		 je	 SHORT $LN24@ecpsvm_che

; 3449 :             {
; 3450 :                 DEBUG_SASSISTX(LPSW,WRMSG(HHC90000, "D", "New PSW Enables interrupts and MICPEND (EC)"));

  00275	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  0027b	c1 e8 02	 shr	 eax, 2
  0027e	83 e0 01	 and	 eax, 1
  00281	85 c0		 test	 eax, eax
  00283	74 53		 je	 SHORT $LN25@ecpsvm_che
  00285	b9 01 00 00 00	 mov	 ecx, 1
  0028a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00290	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173279
  00297	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0029c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173280
  002a3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173281
  002af	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002b4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002b9	41 b9 03 00 00
	00		 mov	 r9d, 3
  002bf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173282
  002c6	ba 7a 0d 00 00	 mov	 edx, 3450		; 00000d7aH
  002cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173283
  002d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN25@ecpsvm_che:

; 3451 :                 return(1);

  002d8	b8 01 00 00 00	 mov	 eax, 1
  002dd	e9 29 02 00 00	 jmp	 $LN1@ecpsvm_che
$LN24@ecpsvm_che:

; 3452 :             }
; 3453 :         }

  002e2	e9 8a 00 00 00	 jmp	 $LN23@ecpsvm_che
$LN22@ecpsvm_che:

; 3454 :         else
; 3455 :         {
; 3456 :             if(~oldr->psw.sysmask & newr->psw.sysmask)

  002e7	48 8b 44 24 78	 mov	 rax, QWORD PTR oldr$[rsp]
  002ec	0f b6 40 78	 movzx	 eax, BYTE PTR [rax+120]
  002f0	f7 d0		 not	 eax
  002f2	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR newr$[rsp]
  002fa	0f b6 49 78	 movzx	 ecx, BYTE PTR [rcx+120]
  002fe	23 c1		 and	 eax, ecx
  00300	85 c0		 test	 eax, eax
  00302	74 6d		 je	 SHORT $LN26@ecpsvm_che

; 3457 :             {
; 3458 :                 DEBUG_SASSISTX(LPSW,WRMSG(HHC90000, "D","New PSW Enables interrupts and MICPEND (BC)"));

  00304	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  0030a	c1 e8 02	 shr	 eax, 2
  0030d	83 e0 01	 and	 eax, 1
  00310	85 c0		 test	 eax, eax
  00312	74 53		 je	 SHORT $LN27@ecpsvm_che
  00314	b9 01 00 00 00	 mov	 ecx, 1
  00319	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0031f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173286
  00326	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0032b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173287
  00332	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00337	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173288
  0033e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00343	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00348	41 b9 03 00 00
	00		 mov	 r9d, 3
  0034e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173289
  00355	ba 82 0d 00 00	 mov	 edx, 3458		; 00000d82H
  0035a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173290
  00361	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN27@ecpsvm_che:

; 3459 :                 return(1);

  00367	b8 01 00 00 00	 mov	 eax, 1
  0036c	e9 9a 01 00 00	 jmp	 $LN1@ecpsvm_che
$LN26@ecpsvm_che:
$LN23@ecpsvm_che:
$LN21@ecpsvm_che:

; 3460 :             }
; 3461 :         }
; 3462 :     }
; 3463 :     if(WAITSTATE(&newr->psw))

  00371	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR newr$[rsp]
  00379	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  0037d	83 e0 02	 and	 eax, 2
  00380	85 c0		 test	 eax, eax
  00382	74 6d		 je	 SHORT $LN28@ecpsvm_che

; 3464 :     {
; 3465 :         DEBUG_SASSISTX(LPSW,WRMSG(HHC90000, "D", "New PSW is a WAIT PSW"));

  00384	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  0038a	c1 e8 02	 shr	 eax, 2
  0038d	83 e0 01	 and	 eax, 1
  00390	85 c0		 test	 eax, eax
  00392	74 53		 je	 SHORT $LN29@ecpsvm_che
  00394	b9 01 00 00 00	 mov	 ecx, 1
  00399	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0039f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173293
  003a6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173294
  003b2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173295
  003be	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003c3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003c8	41 b9 03 00 00
	00		 mov	 r9d, 3
  003ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173296
  003d5	ba 89 0d 00 00	 mov	 edx, 3465		; 00000d89H
  003da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173297
  003e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN29@ecpsvm_che:

; 3466 :         return(1);

  003e7	b8 01 00 00 00	 mov	 eax, 1
  003ec	e9 1a 01 00 00	 jmp	 $LN1@ecpsvm_che
$LN28@ecpsvm_che:

; 3467 :     }
; 3468 :     if(ECMODE(&newr->psw))

  003f1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR newr$[rsp]
  003f9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  003fd	83 e0 08	 and	 eax, 8
  00400	85 c0		 test	 eax, eax
  00402	0f 84 82 00 00
	00		 je	 $LN30@ecpsvm_che

; 3469 :     {
; 3470 :         if(newr->psw.sysmask & 0xb8)

  00408	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR newr$[rsp]
  00410	0f b6 40 78	 movzx	 eax, BYTE PTR [rax+120]
  00414	25 b8 00 00 00	 and	 eax, 184		; 000000b8H
  00419	85 c0		 test	 eax, eax
  0041b	74 6d		 je	 SHORT $LN31@ecpsvm_che

; 3471 :         {
; 3472 :             DEBUG_SASSISTX(LPSW,WRMSG(HHC90000, "D", "New PSW sysmask incorrect"));

  0041d	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  00423	c1 e8 02	 shr	 eax, 2
  00426	83 e0 01	 and	 eax, 1
  00429	85 c0		 test	 eax, eax
  0042b	74 53		 je	 SHORT $LN32@ecpsvm_che
  0042d	b9 01 00 00 00	 mov	 ecx, 1
  00432	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00438	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173301
  0043f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00444	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173302
  0044b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00450	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173303
  00457	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0045c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00461	41 b9 03 00 00
	00		 mov	 r9d, 3
  00467	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173304
  0046e	ba 90 0d 00 00	 mov	 edx, 3472		; 00000d90H
  00473	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173305
  0047a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN32@ecpsvm_che:

; 3473 :             return(1);

  00480	b8 01 00 00 00	 mov	 eax, 1
  00485	e9 81 00 00 00	 jmp	 $LN1@ecpsvm_che
$LN31@ecpsvm_che:
$LN30@ecpsvm_che:

; 3474 :         }
; 3475 :     }
; 3476 :     if(newr->psw.IA & 0x01)

  0048a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR newr$[rsp]
  00492	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00498	83 e0 01	 and	 eax, 1
  0049b	85 c0		 test	 eax, eax
  0049d	74 6a		 je	 SHORT $LN33@ecpsvm_che

; 3477 :     {
; 3478 :         DEBUG_SASSISTX(LPSW,WRMSG(HHC90000, "D", "New PSW has ODD IA"));

  0049f	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  004a5	c1 e8 02	 shr	 eax, 2
  004a8	83 e0 01	 and	 eax, 1
  004ab	85 c0		 test	 eax, eax
  004ad	74 53		 je	 SHORT $LN34@ecpsvm_che
  004af	b9 01 00 00 00	 mov	 ecx, 1
  004b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173308
  004c1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173309
  004cd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173310
  004d9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004de	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004e3	41 b9 03 00 00
	00		 mov	 r9d, 3
  004e9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173311
  004f0	ba 96 0d 00 00	 mov	 edx, 3478		; 00000d96H
  004f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173312
  004fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN34@ecpsvm_che:

; 3479 :         return(1);

  00502	b8 01 00 00 00	 mov	 eax, 1
  00507	eb 02		 jmp	 SHORT $LN1@ecpsvm_che
$LN33@ecpsvm_che:

; 3480 :     }
; 3481 :     return(0);

  00509	33 c0		 xor	 eax, eax
$LN1@ecpsvm_che:

; 3482 : }

  0050b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0050f	c3		 ret	 0
ecpsvm_check_pswtrans ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
B_VMDSTAT$ = 64
vmb$ = 68
B_VMMCR6$ = 72
B_VMTLEVEL$ = 73
runu$ = 76
F_QUANTUM$ = 80
F_ITIMER$ = 84
tmraddr$ = 88
newtimer$ = 92
oldtimer$ = 96
tv95 = 100
tv156 = 104
F_QUANTUMR$ = 108
cc$ = 112
DW_VMTTIME$ = 120
DW_VMTMINQ$ = 128
raddr$ = 136
buf$ = 144
__$ArrayPad$ = 400
regs$ = 432
vmb_p$ = 440
dlist$ = 448
exitlist$ = 456
ecpsvm_disp_runtime PROC

; 2053 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2054 :     char buf[256];
; 2055 :     U64 DW_VMTTIME;
; 2056 :     U64 DW_VMTMINQ;
; 2057 :     BYTE B_VMDSTAT;
; 2058 :     BYTE B_VMTLEVEL;
; 2059 :     BYTE B_VMMCR6;
; 2060 :     U32  F_QUANTUM;
; 2061 :     U32  F_QUANTUMR;
; 2062 :     U32  F_ITIMER;
; 2063 :     int cc;
; 2064 :     RADR raddr;
; 2065 :     VADR tmraddr;
; 2066 :     U32  oldtimer,newtimer;
; 2067 :     VADR vmb;
; 2068 :     VADR runu;
; 2069 : 
; 2070 :     vmb=*vmb_p;

  0002d	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR vmb_p$[rsp]
  00035	8b 00		 mov	 eax, DWORD PTR [rax]
  00037	89 44 24 44	 mov	 DWORD PTR vmb$[rsp], eax

; 2071 :     DEBUG_CPASSISTX(DISP0,MSGBUF(buf, "RUNTIME Entry : VMBLOK @ %8.8X",vmb));

  0003b	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00041	c1 e8 02	 shr	 eax, 2
  00044	83 e0 01	 and	 eax, 1
  00047	85 c0		 test	 eax, eax
  00049	74 1f		 je	 SHORT $LN14@ecpsvm_dis
  0004b	44 8b 4c 24 44	 mov	 r9d, DWORD PTR vmb$[rsp]
  00050	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171770
  00057	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0005c	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN14@ecpsvm_dis:

; 2072 :     DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", buf));

  0006a	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00070	c1 e8 02	 shr	 eax, 2
  00073	83 e0 01	 and	 eax, 1
  00076	85 c0		 test	 eax, eax
  00078	74 54		 je	 SHORT $LN15@ecpsvm_dis
  0007a	b9 01 00 00 00	 mov	 ecx, 1
  0007f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00085	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0008d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00092	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171772
  00099	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171773
  000a5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000aa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000af	41 b9 03 00 00
	00		 mov	 r9d, 3
  000b5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171774
  000bc	ba 18 08 00 00	 mov	 edx, 2072		; 00000818H
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171775
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN15@ecpsvm_dis:

; 2073 :     runu=EVM_L(RUNUSER);

  000ce	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  000d6	ba fe ff ff ff	 mov	 edx, -2
  000db	b9 38 03 00 00	 mov	 ecx, 824		; 00000338H
  000e0	e8 00 00 00 00	 call	 s370_vfetch4
  000e5	89 44 24 4c	 mov	 DWORD PTR runu$[rsp], eax

; 2074 :     /* BAL RUNTIME Processing */
; 2075 :     EVM_STC(CPEX+CPSUPER,CPSTATUS);

  000e9	4c 8b 8c 24 b0
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  000f1	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  000f7	ba 48 03 00 00	 mov	 edx, 840		; 00000348H
  000fc	b1 28		 mov	 cl, 40			; 00000028H
  000fe	e8 00 00 00 00	 call	 s370_vstoreb

; 2076 :     CHARGE_STOP(vmb);

  00103	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  00107	05 80 00 00 00	 add	 eax, 128		; 00000080H
  0010c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00111	89 44 24 64	 mov	 DWORD PTR tv95[rsp], eax
  00115	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0011d	e8 00 00 00 00	 call	 get_cpu_timer
  00122	4c 8b 8c 24 b0
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0012a	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00130	8b 4c 24 64	 mov	 ecx, DWORD PTR tv95[rsp]
  00134	8b d1		 mov	 edx, ecx
  00136	48 8b c8	 mov	 rcx, rax
  00139	e8 00 00 00 00	 call	 s370_vstore8

; 2077 :     if(vmb!=runu)

  0013e	8b 44 24 4c	 mov	 eax, DWORD PTR runu$[rsp]
  00142	39 44 24 44	 cmp	 DWORD PTR vmb$[rsp], eax
  00146	0f 84 e0 01 00
	00		 je	 $LN16@ecpsvm_dis

; 2078 :     {
; 2079 :         DEBUG_CPASSISTX(DISP0,MSGBUF(buf, "RUNTIME Switching to RUNUSER VMBLOK @ %8.8X",runu));

  0014c	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00152	c1 e8 02	 shr	 eax, 2
  00155	83 e0 01	 and	 eax, 1
  00158	85 c0		 test	 eax, eax
  0015a	74 1f		 je	 SHORT $LN18@ecpsvm_dis
  0015c	44 8b 4c 24 4c	 mov	 r9d, DWORD PTR runu$[rsp]
  00161	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171779
  00168	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0016d	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00175	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN18@ecpsvm_dis:

; 2080 :         DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", buf));

  0017b	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00181	c1 e8 02	 shr	 eax, 2
  00184	83 e0 01	 and	 eax, 1
  00187	85 c0		 test	 eax, eax
  00189	74 54		 je	 SHORT $LN19@ecpsvm_dis
  0018b	b9 01 00 00 00	 mov	 ecx, 1
  00190	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00196	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0019e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171781
  001aa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171782
  001b6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001bb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001c0	41 b9 03 00 00
	00		 mov	 r9d, 3
  001c6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171783
  001cd	ba 20 08 00 00	 mov	 edx, 2080		; 00000820H
  001d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171784
  001d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN19@ecpsvm_dis:

; 2081 :         CHARGE_SWITCH(vmb,runu);    /* Charge RUNUSER */

  001df	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  001e3	05 80 00 00 00	 add	 eax, 128		; 00000080H
  001e8	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  001ed	89 44 24 68	 mov	 DWORD PTR tv156[rsp], eax
  001f1	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001f9	e8 00 00 00 00	 call	 get_cpu_timer
  001fe	4c 8b 8c 24 b0
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00206	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0020c	8b 4c 24 68	 mov	 ecx, DWORD PTR tv156[rsp]
  00210	8b d1		 mov	 edx, ecx
  00212	48 8b c8	 mov	 rcx, rax
  00215	e8 00 00 00 00	 call	 s370_vstore8
  0021a	8b 44 24 4c	 mov	 eax, DWORD PTR runu$[rsp]
  0021e	05 80 00 00 00	 add	 eax, 128		; 00000080H
  00223	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00228	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00230	ba fe ff ff ff	 mov	 edx, -2
  00235	8b c8		 mov	 ecx, eax
  00237	e8 00 00 00 00	 call	 s370_vfetch8
  0023c	48 8b d0	 mov	 rdx, rax
  0023f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00247	e8 00 00 00 00	 call	 set_cpu_timer
  0024c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG171785
  00253	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0025b	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock
  00260	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00268	e8 00 00 00 00	 call	 get_cpu_timer
  0026d	48 85 c0	 test	 rax, rax
  00270	7d 53		 jge	 SHORT $LN20@ecpsvm_dis
$LN4@ecpsvm_dis:
  00272	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0027a	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  0027d	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00282	85 c0		 test	 eax, eax
  00284	74 1d		 je	 SHORT $LN22@ecpsvm_dis
  00286	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0028e	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00291	0d 00 04 00 80	 or	 eax, -2147482624	; 80000400H
  00296	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0029e	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  002a1	eb 1a		 jmp	 SHORT $LN23@ecpsvm_dis
$LN22@ecpsvm_dis:
  002a3	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002ab	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  002ae	0f ba e8 0a	 bts	 eax, 10
  002b2	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002ba	89 41 48	 mov	 DWORD PTR [rcx+72], eax
$LN23@ecpsvm_dis:
  002bd	33 c0		 xor	 eax, eax
  002bf	85 c0		 test	 eax, eax
  002c1	75 af		 jne	 SHORT $LN4@ecpsvm_dis
  002c3	eb 20		 jmp	 SHORT $LN21@ecpsvm_dis
$LN20@ecpsvm_dis:
$LN7@ecpsvm_dis:
  002c5	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  002cd	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  002d0	0f ba f0 0a	 btr	 eax, 10
  002d4	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002dc	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  002df	33 c0		 xor	 eax, eax
  002e1	85 c0		 test	 eax, eax
  002e3	75 e0		 jne	 SHORT $LN7@ecpsvm_dis
$LN21@ecpsvm_dis:
  002e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG171790
  002ec	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002f4	e8 00 00 00 00	 call	 Release_Interrupt_Lock
  002f9	8b 44 24 4c	 mov	 eax, DWORD PTR runu$[rsp]
  002fd	89 44 24 44	 mov	 DWORD PTR vmb$[rsp], eax

; 2082 :         F_ITIMER=EVM_L(QUANTUMR);

  00301	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00309	ba fe ff ff ff	 mov	 edx, -2
  0030e	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  00313	e8 00 00 00 00	 call	 s370_vfetch4
  00318	89 44 24 54	 mov	 DWORD PTR F_ITIMER$[rsp], eax

; 2083 :         *vmb_p=vmb;

  0031c	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR vmb_p$[rsp]
  00324	8b 4c 24 44	 mov	 ecx, DWORD PTR vmb$[rsp]
  00328	89 08		 mov	 DWORD PTR [rax], ecx

; 2084 :     }

  0032a	eb 1b		 jmp	 SHORT $LN17@ecpsvm_dis
$LN16@ecpsvm_dis:

; 2085 :     else
; 2086 :     {
; 2087 :         F_ITIMER=EVM_L(INTTIMER);

  0032c	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00334	ba fe ff ff ff	 mov	 edx, -2
  00339	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  0033e	e8 00 00 00 00	 call	 s370_vfetch4
  00343	89 44 24 54	 mov	 DWORD PTR F_ITIMER$[rsp], eax
$LN17@ecpsvm_dis:

; 2088 :     }
; 2089 :     DEBUG_CPASSISTX(DISP0,MSGBUF(buf, "RUNTIME : VMBLOK @ %8.8X",vmb));

  00347	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  0034d	c1 e8 02	 shr	 eax, 2
  00350	83 e0 01	 and	 eax, 1
  00353	85 c0		 test	 eax, eax
  00355	74 1f		 je	 SHORT $LN24@ecpsvm_dis
  00357	44 8b 4c 24 44	 mov	 r9d, DWORD PTR vmb$[rsp]
  0035c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171792
  00363	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00368	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00370	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN24@ecpsvm_dis:

; 2090 :     DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", buf));

  00376	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  0037c	c1 e8 02	 shr	 eax, 2
  0037f	83 e0 01	 and	 eax, 1
  00382	85 c0		 test	 eax, eax
  00384	74 54		 je	 SHORT $LN25@ecpsvm_dis
  00386	b9 01 00 00 00	 mov	 ecx, 1
  0038b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00391	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00399	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0039e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171794
  003a5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171795
  003b1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003b6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003bb	41 b9 03 00 00
	00		 mov	 r9d, 3
  003c1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171796
  003c8	ba 2a 08 00 00	 mov	 edx, 2090		; 0000082aH
  003cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171797
  003d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN25@ecpsvm_dis:

; 2091 :     /* vmb is now RUNUSER */
; 2092 :     /* Check if time slice is over */
; 2093 :     if(F_ITIMER & 0x80000000)

  003da	8b 44 24 54	 mov	 eax, DWORD PTR F_ITIMER$[rsp]
  003de	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  003e3	85 c0		 test	 eax, eax
  003e5	74 63		 je	 SHORT $LN26@ecpsvm_dis

; 2094 :     {
; 2095 :         B_VMDSTAT=EVM_IC(vmb+VMDSTAT);

  003e7	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  003eb	83 c0 59	 add	 eax, 89			; 00000059H
  003ee	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  003f3	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  003fb	ba fe ff ff ff	 mov	 edx, -2
  00400	8b c8		 mov	 ecx, eax
  00402	e8 00 00 00 00	 call	 s370_vfetchb
  00407	88 44 24 40	 mov	 BYTE PTR B_VMDSTAT$[rsp], al

; 2096 :         B_VMDSTAT&=~VMDSP;

  0040b	0f b6 44 24 40	 movzx	 eax, BYTE PTR B_VMDSTAT$[rsp]
  00410	0f ba f0 07	 btr	 eax, 7
  00414	88 44 24 40	 mov	 BYTE PTR B_VMDSTAT$[rsp], al

; 2097 :         B_VMDSTAT|=VMTSEND;

  00418	0f b6 44 24 40	 movzx	 eax, BYTE PTR B_VMDSTAT$[rsp]
  0041d	83 c8 40	 or	 eax, 64			; 00000040H
  00420	88 44 24 40	 mov	 BYTE PTR B_VMDSTAT$[rsp], al

; 2098 :         EVM_STC(B_VMDSTAT,vmb+VMDSTAT);

  00424	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  00428	83 c0 59	 add	 eax, 89			; 00000059H
  0042b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00430	4c 8b 8c 24 b0
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00438	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0043e	8b d0		 mov	 edx, eax
  00440	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR B_VMDSTAT$[rsp]
  00445	e8 00 00 00 00	 call	 s370_vstoreb
$LN26@ecpsvm_dis:

; 2099 :     }
; 2100 :     /* Check if still eligible for current run Q */
; 2101 :     DW_VMTTIME=EVM_LD(vmb+VMTTIME);

  0044a	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  0044e	05 80 00 00 00	 add	 eax, 128		; 00000080H
  00453	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00458	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00460	ba fe ff ff ff	 mov	 edx, -2
  00465	8b c8		 mov	 ecx, eax
  00467	e8 00 00 00 00	 call	 s370_vfetch8
  0046c	48 89 44 24 78	 mov	 QWORD PTR DW_VMTTIME$[rsp], rax

; 2102 :     DW_VMTMINQ=EVM_LD(vmb+VMTMINQ);

  00471	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  00475	05 88 00 00 00	 add	 eax, 136		; 00000088H
  0047a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0047f	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00487	ba fe ff ff ff	 mov	 edx, -2
  0048c	8b c8		 mov	 ecx, eax
  0048e	e8 00 00 00 00	 call	 s370_vfetch8
  00493	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR DW_VMTMINQ$[rsp], rax

; 2103 :     /* Check 1st 5 bytes */
; 2104 :     /*2017-03-27 added equality check*/
; 2105 :     if((DW_VMTTIME & 0xffffffffff000000ULL) <= (DW_VMTMINQ & 0xffffffffff000000ULL))

  0049b	48 8b 44 24 78	 mov	 rax, QWORD PTR DW_VMTTIME$[rsp]
  004a0	48 25 00 00 00
	ff		 and	 rax, -16777216		; ffffffffff000000H
  004a6	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR DW_VMTMINQ$[rsp]
  004ae	48 81 e1 00 00
	00 ff		 and	 rcx, -16777216		; ffffffffff000000H
  004b5	48 3b c1	 cmp	 rax, rcx
  004b8	77 63		 ja	 SHORT $LN27@ecpsvm_dis

; 2106 :     {
; 2107 :         B_VMDSTAT=EVM_IC(vmb+VMDSTAT);

  004ba	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  004be	83 c0 59	 add	 eax, 89			; 00000059H
  004c1	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  004c6	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  004ce	ba fe ff ff ff	 mov	 edx, -2
  004d3	8b c8		 mov	 ecx, eax
  004d5	e8 00 00 00 00	 call	 s370_vfetchb
  004da	88 44 24 40	 mov	 BYTE PTR B_VMDSTAT$[rsp], al

; 2108 :         B_VMDSTAT&=~VMDSP;

  004de	0f b6 44 24 40	 movzx	 eax, BYTE PTR B_VMDSTAT$[rsp]
  004e3	0f ba f0 07	 btr	 eax, 7
  004e7	88 44 24 40	 mov	 BYTE PTR B_VMDSTAT$[rsp], al

; 2109 :         B_VMDSTAT|=VMQSEND;

  004eb	0f b6 44 24 40	 movzx	 eax, BYTE PTR B_VMDSTAT$[rsp]
  004f0	83 c8 20	 or	 eax, 32			; 00000020H
  004f3	88 44 24 40	 mov	 BYTE PTR B_VMDSTAT$[rsp], al

; 2110 :         EVM_STC(B_VMDSTAT,vmb+VMDSTAT);

  004f7	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  004fb	83 c0 59	 add	 eax, 89			; 00000059H
  004fe	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00503	4c 8b 8c 24 b0
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0050b	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00511	8b d0		 mov	 edx, eax
  00513	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR B_VMDSTAT$[rsp]
  00518	e8 00 00 00 00	 call	 s370_vstoreb
$LN27@ecpsvm_dis:

; 2111 :     }
; 2112 :     ecpsvm_disp_incprobt(regs,vmb);

  0051d	8b 54 24 44	 mov	 edx, DWORD PTR vmb$[rsp]
  00521	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00529	e8 00 00 00 00	 call	 ecpsvm_disp_incprobt

; 2113 :     F_QUANTUM=EVM_L(QUANTUM);

  0052e	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00536	ba fe ff ff ff	 mov	 edx, -2
  0053b	b9 54 00 00 00	 mov	 ecx, 84			; 00000054H
  00540	e8 00 00 00 00	 call	 s370_vfetch4
  00545	89 44 24 50	 mov	 DWORD PTR F_QUANTUM$[rsp], eax

; 2114 :     EVM_ST(F_ITIMER,QUANTUM);

  00549	4c 8b 8c 24 b0
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00551	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00557	ba 54 00 00 00	 mov	 edx, 84			; 00000054H
  0055c	8b 4c 24 54	 mov	 ecx, DWORD PTR F_ITIMER$[rsp]
  00560	e8 00 00 00 00	 call	 s370_vstore4

; 2115 :     /* Check if Virtual Timer assist is active */
; 2116 :     B_VMMCR6=EVM_IC(vmb+VMMCR6);

  00565	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  00569	05 7c 01 00 00	 add	 eax, 380		; 0000017cH
  0056e	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00573	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0057b	ba fe ff ff ff	 mov	 edx, -2
  00580	8b c8		 mov	 ecx, eax
  00582	e8 00 00 00 00	 call	 s370_vfetchb
  00587	88 44 24 48	 mov	 BYTE PTR B_VMMCR6$[rsp], al

; 2117 :     if (B_VMMCR6 & 0x01)      /* Virtual Timer Flag */

  0058b	0f b6 44 24 48	 movzx	 eax, BYTE PTR B_VMMCR6$[rsp]
  00590	83 e0 01	 and	 eax, 1
  00593	85 c0		 test	 eax, eax
  00595	74 6d		 je	 SHORT $LN28@ecpsvm_dis

; 2118 :     {
; 2119 :         DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", "RUNTIME : Complete - VTIMER Assist active"));

  00597	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  0059d	c1 e8 02	 shr	 eax, 2
  005a0	83 e0 01	 and	 eax, 1
  005a3	85 c0		 test	 eax, eax
  005a5	74 53		 je	 SHORT $LN29@ecpsvm_dis
  005a7	b9 01 00 00 00	 mov	 ecx, 1
  005ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171802
  005b9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171803
  005c5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171804
  005d1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005d6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005db	41 b9 03 00 00
	00		 mov	 r9d, 3
  005e1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171805
  005e8	ba 47 08 00 00	 mov	 edx, 2119		; 00000847H
  005ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171806
  005f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN29@ecpsvm_dis:

; 2120 :         return(2);      /* End of "RUNTIME" here */

  005fa	b8 02 00 00 00	 mov	 eax, 2
  005ff	e9 5d 05 00 00	 jmp	 $LN1@ecpsvm_dis
$LN28@ecpsvm_dis:

; 2121 :     }
; 2122 :     /* Check SET TIMER ON or SET TIMER REAL */
; 2123 :     B_VMTLEVEL=EVM_IC(vmb+VMTLEVEL);

  00604	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  00608	83 c0 62	 add	 eax, 98			; 00000062H
  0060b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00610	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00618	ba fe ff ff ff	 mov	 edx, -2
  0061d	8b c8		 mov	 ecx, eax
  0061f	e8 00 00 00 00	 call	 s370_vfetchb
  00624	88 44 24 49	 mov	 BYTE PTR B_VMTLEVEL$[rsp], al

; 2124 :     if(!(B_VMTLEVEL & (VMTON | VMRON)))

  00628	0f b6 44 24 49	 movzx	 eax, BYTE PTR B_VMTLEVEL$[rsp]
  0062d	25 c0 00 00 00	 and	 eax, 192		; 000000c0H
  00632	85 c0		 test	 eax, eax
  00634	75 6d		 jne	 SHORT $LN30@ecpsvm_dis

; 2125 :     {
; 2126 :         DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", "RUNTIME : Complete - SET TIMER OFF"));

  00636	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  0063c	c1 e8 02	 shr	 eax, 2
  0063f	83 e0 01	 and	 eax, 1
  00642	85 c0		 test	 eax, eax
  00644	74 53		 je	 SHORT $LN31@ecpsvm_dis
  00646	b9 01 00 00 00	 mov	 ecx, 1
  0064b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00651	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171809
  00658	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0065d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171810
  00664	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00669	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171811
  00670	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00675	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0067a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00680	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171812
  00687	ba 4e 08 00 00	 mov	 edx, 2126		; 0000084eH
  0068c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171813
  00693	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN31@ecpsvm_dis:

; 2127 :         return(2);

  00699	b8 02 00 00 00	 mov	 eax, 2
  0069e	e9 be 04 00 00	 jmp	 $LN1@ecpsvm_dis
$LN30@ecpsvm_dis:

; 2128 :     }
; 2129 :     /* Update virtual interval timer */
; 2130 :     F_QUANTUMR=EVM_L(QUANTUMR);

  006a3	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  006ab	ba fe ff ff ff	 mov	 edx, -2
  006b0	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  006b5	e8 00 00 00 00	 call	 s370_vfetch4
  006ba	89 44 24 6c	 mov	 DWORD PTR F_QUANTUMR$[rsp], eax

; 2131 :     F_QUANTUM-=F_QUANTUMR;

  006be	8b 44 24 6c	 mov	 eax, DWORD PTR F_QUANTUMR$[rsp]
  006c2	8b 4c 24 50	 mov	 ecx, DWORD PTR F_QUANTUM$[rsp]
  006c6	2b c8		 sub	 ecx, eax
  006c8	8b c1		 mov	 eax, ecx
  006ca	89 44 24 50	 mov	 DWORD PTR F_QUANTUM$[rsp], eax

; 2132 :     if(F_QUANTUM & 0x80000000)

  006ce	8b 44 24 50	 mov	 eax, DWORD PTR F_QUANTUM$[rsp]
  006d2	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  006d7	85 c0		 test	 eax, eax
  006d9	0f 84 2a 01 00
	00		 je	 $LN32@ecpsvm_dis

; 2133 :     {
; 2134 :         /* Abend condition detected during virtual time update - exit at +32 */
; 2135 :         DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", "RUNTIME : Bad ITIMER - Taking Exit #32"));

  006df	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  006e5	c1 e8 02	 shr	 eax, 2
  006e8	83 e0 01	 and	 eax, 1
  006eb	85 c0		 test	 eax, eax
  006ed	74 53		 je	 SHORT $LN33@ecpsvm_dis
  006ef	b9 01 00 00 00	 mov	 ecx, 1
  006f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171816
  00701	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00706	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171817
  0070d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00712	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171818
  00719	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0071e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00723	41 b9 03 00 00
	00		 mov	 r9d, 3
  00729	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171819
  00730	ba 57 08 00 00	 mov	 edx, 2135		; 00000857H
  00735	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171820
  0073c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN33@ecpsvm_dis:
$LN10@ecpsvm_dis:

; 2136 :         SET_PSW_IA_AND_MAYBE_IP(regs, EVM_L(exitlist+32));

  00742	8b 84 24 c8 01
	00 00		 mov	 eax, DWORD PTR exitlist$[rsp]
  00749	83 c0 20	 add	 eax, 32			; 00000020H
  0074c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00751	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00759	ba fe ff ff ff	 mov	 edx, -2
  0075e	8b c8		 mov	 ecx, eax
  00760	e8 00 00 00 00	 call	 s370_vfetch4
  00765	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0076a	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00772	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00778	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00780	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00788	74 6e		 je	 SHORT $LN34@ecpsvm_dis
  0078a	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00792	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00798	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  0079d	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  007a5	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  007ab	75 38		 jne	 SHORT $LN35@ecpsvm_dis
  007ad	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  007b5	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  007bb	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  007c0	8b c0		 mov	 eax, eax
  007c2	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  007ca	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  007d1	48 0b c8	 or	 rcx, rax
  007d4	48 8b c1	 mov	 rax, rcx
  007d7	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  007df	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  007e3	eb 13		 jmp	 SHORT $LN36@ecpsvm_dis
$LN35@ecpsvm_dis:
  007e5	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  007ed	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN36@ecpsvm_dis:
$LN34@ecpsvm_dis:
  007f8	33 c0		 xor	 eax, eax
  007fa	85 c0		 test	 eax, eax
  007fc	0f 85 40 ff ff
	ff		 jne	 $LN10@ecpsvm_dis

; 2137 :         return(0);

  00802	33 c0		 xor	 eax, eax
  00804	e9 58 03 00 00	 jmp	 $LN1@ecpsvm_dis
$LN32@ecpsvm_dis:

; 2138 :     }
; 2139 :     /* Load CR1 with the vmblock's VMSEG */
; 2140 :     regs->CR_L(1)=EVM_L(vmb+VMSEG);

  00809	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  0080d	83 c0 10	 add	 eax, 16
  00810	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00815	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0081d	ba fe ff ff ff	 mov	 edx, -2
  00822	8b c8		 mov	 ecx, eax
  00824	e8 00 00 00 00	 call	 s370_vfetch4
  00829	b9 08 00 00 00	 mov	 ecx, 8
  0082e	48 6b c9 02	 imul	 rcx, rcx, 2
  00832	48 8b 94 24 b0
	01 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0083a	89 84 0a 00 06
	00 00		 mov	 DWORD PTR [rdx+rcx+1536], eax

; 2141 :     /* Do LRA - Don't access the page directly yet - Could yield a Paging fault */
; 2142 :     cc = ecpsvm_int_lra(regs,INTTIMER,&raddr);

  00841	4c 8d 84 24 88
	00 00 00	 lea	 r8, QWORD PTR raddr$[rsp]
  00849	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  0084e	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00856	e8 00 00 00 00	 call	 ecpsvm_int_lra
  0085b	89 44 24 70	 mov	 DWORD PTR cc$[rsp], eax

; 2143 :     if(cc!=0)

  0085f	83 7c 24 70 00	 cmp	 DWORD PTR cc$[rsp], 0
  00864	74 0d		 je	 SHORT $LN37@ecpsvm_dis

; 2144 :     {
; 2145 :         /* Update VMTIMER instead */
; 2146 :         tmraddr=vmb+VMTIMER;

  00866	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  0086a	83 c0 6c	 add	 eax, 108		; 0000006cH
  0086d	89 44 24 58	 mov	 DWORD PTR tmraddr$[rsp], eax

; 2147 :     }

  00871	eb 0b		 jmp	 SHORT $LN38@ecpsvm_dis
$LN37@ecpsvm_dis:

; 2148 :     else
; 2149 :     {
; 2150 :         tmraddr=(VADR)raddr;

  00873	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR raddr$[rsp]
  0087a	89 44 24 58	 mov	 DWORD PTR tmraddr$[rsp], eax
$LN38@ecpsvm_dis:

; 2151 :     }
; 2152 :     oldtimer=EVM_L(tmraddr);

  0087e	8b 44 24 58	 mov	 eax, DWORD PTR tmraddr$[rsp]
  00882	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00887	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0088f	ba fe ff ff ff	 mov	 edx, -2
  00894	8b c8		 mov	 ecx, eax
  00896	e8 00 00 00 00	 call	 s370_vfetch4
  0089b	89 44 24 60	 mov	 DWORD PTR oldtimer$[rsp], eax

; 2153 :     newtimer=oldtimer-F_QUANTUM;

  0089f	8b 44 24 50	 mov	 eax, DWORD PTR F_QUANTUM$[rsp]
  008a3	8b 4c 24 60	 mov	 ecx, DWORD PTR oldtimer$[rsp]
  008a7	2b c8		 sub	 ecx, eax
  008a9	8b c1		 mov	 eax, ecx
  008ab	89 44 24 5c	 mov	 DWORD PTR newtimer$[rsp], eax

; 2154 :     EVM_ST(newtimer,tmraddr);

  008af	8b 44 24 58	 mov	 eax, DWORD PTR tmraddr$[rsp]
  008b3	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  008b8	4c 8b 8c 24 b0
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  008c0	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  008c6	8b d0		 mov	 edx, eax
  008c8	8b 4c 24 5c	 mov	 ecx, DWORD PTR newtimer$[rsp]
  008cc	e8 00 00 00 00	 call	 s370_vstore4

; 2155 :     if((newtimer & 0x80000000) != (oldtimer & 0x80000000))

  008d1	8b 44 24 5c	 mov	 eax, DWORD PTR newtimer$[rsp]
  008d5	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  008da	8b 4c 24 60	 mov	 ecx, DWORD PTR oldtimer$[rsp]
  008de	81 e1 00 00 00
	80		 and	 ecx, -2147483648	; 80000000H
  008e4	3b c1		 cmp	 eax, ecx
  008e6	0f 84 0d 02 00
	00		 je	 $LN39@ecpsvm_dis

; 2156 :     {
; 2157 :         /* Indicate XINT to be generated (exit + 8) */
; 2158 :         /* Setup a few regs 1st */
; 2159 :         regs->GR_L(3)=0;

  008ec	b8 08 00 00 00	 mov	 eax, 8
  008f1	48 6b c0 03	 imul	 rax, rax, 3
  008f5	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  008fd	c7 84 01 80 02
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax+640], 0

; 2160 :         regs->GR_L(4)=0x00800080;

  00908	b8 08 00 00 00	 mov	 eax, 8
  0090d	48 6b c0 04	 imul	 rax, rax, 4
  00911	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00919	c7 84 01 80 02
	00 00 80 00 80
	00		 mov	 DWORD PTR [rcx+rax+640], 8388736 ; 00800080H

; 2161 :         regs->GR_L(9)=EVM_L(dlist+4);

  00924	8b 84 24 c0 01
	00 00		 mov	 eax, DWORD PTR dlist$[rsp]
  0092b	83 c0 04	 add	 eax, 4
  0092e	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00933	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0093b	ba fe ff ff ff	 mov	 edx, -2
  00940	8b c8		 mov	 ecx, eax
  00942	e8 00 00 00 00	 call	 s370_vfetch4
  00947	b9 08 00 00 00	 mov	 ecx, 8
  0094c	48 6b c9 09	 imul	 rcx, rcx, 9
  00950	48 8b 94 24 b0
	01 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00958	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 2162 :         regs->GR_L(11)=vmb;

  0095f	b8 08 00 00 00	 mov	 eax, 8
  00964	48 6b c0 0b	 imul	 rax, rax, 11
  00968	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00970	8b 54 24 44	 mov	 edx, DWORD PTR vmb$[rsp]
  00974	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 2163 :         /*2017-03-27 ensure VMDSP is off*/
; 2164 :         B_VMDSTAT=EVM_IC(vmb+VMDSTAT);

  0097b	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  0097f	83 c0 59	 add	 eax, 89			; 00000059H
  00982	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00987	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0098f	ba fe ff ff ff	 mov	 edx, -2
  00994	8b c8		 mov	 ecx, eax
  00996	e8 00 00 00 00	 call	 s370_vfetchb
  0099b	88 44 24 40	 mov	 BYTE PTR B_VMDSTAT$[rsp], al

; 2165 :         B_VMDSTAT&=~VMDSP;

  0099f	0f b6 44 24 40	 movzx	 eax, BYTE PTR B_VMDSTAT$[rsp]
  009a4	0f ba f0 07	 btr	 eax, 7
  009a8	88 44 24 40	 mov	 BYTE PTR B_VMDSTAT$[rsp], al

; 2166 :         EVM_STC(B_VMDSTAT,vmb+VMDSTAT);

  009ac	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  009b0	83 c0 59	 add	 eax, 89			; 00000059H
  009b3	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  009b8	4c 8b 8c 24 b0
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  009c0	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  009c6	8b d0		 mov	 edx, eax
  009c8	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR B_VMDSTAT$[rsp]
  009cd	e8 00 00 00 00	 call	 s370_vstoreb
$LN13@ecpsvm_dis:

; 2167 :         /* end of 2017-03-27 */
; 2168 : 
; 2169 :         SET_PSW_IA_AND_MAYBE_IP(regs, EVM_L(exitlist+8));

  009d2	8b 84 24 c8 01
	00 00		 mov	 eax, DWORD PTR exitlist$[rsp]
  009d9	83 c0 08	 add	 eax, 8
  009dc	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  009e1	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  009e9	ba fe ff ff ff	 mov	 edx, -2
  009ee	8b c8		 mov	 ecx, eax
  009f0	e8 00 00 00 00	 call	 s370_vfetch4
  009f5	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  009fa	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a02	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00a08	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a10	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00a18	74 6e		 je	 SHORT $LN40@ecpsvm_dis
  00a1a	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a22	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00a28	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00a2d	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a35	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00a3b	75 38		 jne	 SHORT $LN41@ecpsvm_dis
  00a3d	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a45	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00a4b	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00a50	8b c0		 mov	 eax, eax
  00a52	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a5a	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00a61	48 0b c8	 or	 rcx, rax
  00a64	48 8b c1	 mov	 rax, rcx
  00a67	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a6f	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00a73	eb 13		 jmp	 SHORT $LN42@ecpsvm_dis
$LN41@ecpsvm_dis:
  00a75	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a7d	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN42@ecpsvm_dis:
$LN40@ecpsvm_dis:
  00a88	33 c0		 xor	 eax, eax
  00a8a	85 c0		 test	 eax, eax
  00a8c	0f 85 40 ff ff
	ff		 jne	 $LN13@ecpsvm_dis

; 2170 :         DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", "RUNTIME : Complete - Taking exit #8"));

  00a92	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00a98	c1 e8 02	 shr	 eax, 2
  00a9b	83 e0 01	 and	 eax, 1
  00a9e	85 c0		 test	 eax, eax
  00aa0	74 53		 je	 SHORT $LN43@ecpsvm_dis
  00aa2	b9 01 00 00 00	 mov	 ecx, 1
  00aa7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00aad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171831
  00ab4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00ab9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171832
  00ac0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ac5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171833
  00acc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ad1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ad6	41 b9 03 00 00
	00		 mov	 r9d, 3
  00adc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171834
  00ae3	ba 7a 08 00 00	 mov	 edx, 2170		; 0000087aH
  00ae8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171835
  00aef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN43@ecpsvm_dis:

; 2171 :         return(0);

  00af5	33 c0		 xor	 eax, eax
  00af7	eb 68		 jmp	 SHORT $LN1@ecpsvm_dis
$LN39@ecpsvm_dis:

; 2172 :     }
; 2173 :     /* Return - Continue DISP0 Processing */
; 2174 :     DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", "RUNTIME : Complete - ITIMER Updated"));

  00af9	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00aff	c1 e8 02	 shr	 eax, 2
  00b02	83 e0 01	 and	 eax, 1
  00b05	85 c0		 test	 eax, eax
  00b07	74 53		 je	 SHORT $LN44@ecpsvm_dis
  00b09	b9 01 00 00 00	 mov	 ecx, 1
  00b0e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b14	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171837
  00b1b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00b20	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171838
  00b27	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b2c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171839
  00b33	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b38	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b3d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b43	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171840
  00b4a	ba 7e 08 00 00	 mov	 edx, 2174		; 0000087eH
  00b4f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171841
  00b56	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN44@ecpsvm_dis:

; 2175 :     return(2);

  00b5c	b8 02 00 00 00	 mov	 eax, 2
$LN1@ecpsvm_dis:

; 2176 : }

  00b61	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00b69	48 33 cc	 xor	 rcx, rsp
  00b6c	e8 00 00 00 00	 call	 __security_check_cookie
  00b71	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00b78	c3		 ret	 0
ecpsvm_disp_runtime ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
DW_PROBTIME$ = 64
DW_VMTMOUTQ$ = 72
DW_PROBSTRT$ = 80
tspent$ = 88
buf$ = 96
__$ArrayPad$ = 352
regs$ = 384
vmb$ = 392
ecpsvm_disp_incprobt PROC

; 2020 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00010	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00017	48 33 c4	 xor	 rax, rsp
  0001a	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2021 :     char buf[256];
; 2022 :     U64 tspent;
; 2023 :     U64 DW_VMTMOUTQ;
; 2024 :     U64 DW_PROBSTRT;
; 2025 :     U64 DW_PROBTIME;
; 2026 : 
; 2027 :     DEBUG_CPASSISTX(DISP0,MSGBUF(buf, "INCPROBT Entry : VMBLOK @ %8.8X",vmb));

  00022	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00028	c1 e8 02	 shr	 eax, 2
  0002b	83 e0 01	 and	 eax, 1
  0002e	85 c0		 test	 eax, eax
  00030	74 1f		 je	 SHORT $LN2@ecpsvm_dis
  00032	44 8b 8c 24 88
	01 00 00	 mov	 r9d, DWORD PTR vmb$[rsp]
  0003a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171674
  00041	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00046	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN2@ecpsvm_dis:

; 2028 :     DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", buf));

  00051	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00057	c1 e8 02	 shr	 eax, 2
  0005a	83 e0 01	 and	 eax, 1
  0005d	85 c0		 test	 eax, eax
  0005f	74 51		 je	 SHORT $LN3@ecpsvm_dis
  00061	b9 01 00 00 00	 mov	 ecx, 1
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0006c	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00071	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171676
  0007d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171677
  00089	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0008e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00093	41 b9 03 00 00
	00		 mov	 r9d, 3
  00099	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171678
  000a0	ba ec 07 00 00	 mov	 edx, 2028		; 000007ecH
  000a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171679
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN3@ecpsvm_dis:

; 2029 :     DW_VMTMOUTQ=EVM_LD(vmb+VMTMOUTQ);

  000b2	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR vmb$[rsp]
  000b9	83 c0 78	 add	 eax, 120		; 00000078H
  000bc	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000c1	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  000c9	ba fe ff ff ff	 mov	 edx, -2
  000ce	8b c8		 mov	 ecx, eax
  000d0	e8 00 00 00 00	 call	 s370_vfetch8
  000d5	48 89 44 24 48	 mov	 QWORD PTR DW_VMTMOUTQ$[rsp], rax

; 2030 :     DW_PROBSTRT=EVM_LD(PROBSTRT);

  000da	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  000e2	ba fe ff ff ff	 mov	 edx, -2
  000e7	b9 a8 06 00 00	 mov	 ecx, 1704		; 000006a8H
  000ec	e8 00 00 00 00	 call	 s370_vfetch8
  000f1	48 89 44 24 50	 mov	 QWORD PTR DW_PROBSTRT$[rsp], rax

; 2031 :     DEBUG_CPASSISTX(DISP0,MSGBUF(buf, "INCPROBT Entry : VMTMOUTQ = %16.16"PRIx64,DW_VMTMOUTQ));

  000f6	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  000fc	c1 e8 02	 shr	 eax, 2
  000ff	83 e0 01	 and	 eax, 1
  00102	85 c0		 test	 eax, eax
  00104	74 1c		 je	 SHORT $LN4@ecpsvm_dis
  00106	4c 8b 4c 24 48	 mov	 r9, QWORD PTR DW_VMTMOUTQ$[rsp]
  0010b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171681
  00112	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00117	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  0011c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN4@ecpsvm_dis:

; 2032 :     DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", buf));

  00122	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00128	c1 e8 02	 shr	 eax, 2
  0012b	83 e0 01	 and	 eax, 1
  0012e	85 c0		 test	 eax, eax
  00130	74 51		 je	 SHORT $LN5@ecpsvm_dis
  00132	b9 01 00 00 00	 mov	 ecx, 1
  00137	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0013d	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00142	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00147	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171683
  0014e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00153	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171684
  0015a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0015f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00164	41 b9 03 00 00
	00		 mov	 r9d, 3
  0016a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171685
  00171	ba f0 07 00 00	 mov	 edx, 2032		; 000007f0H
  00176	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171686
  0017d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN5@ecpsvm_dis:

; 2033 :     DEBUG_CPASSISTX(DISP0,MSGBUF(buf, "INCPROBT Entry : PROBSTRT = %16.16"PRIx64,DW_PROBSTRT));

  00183	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00189	c1 e8 02	 shr	 eax, 2
  0018c	83 e0 01	 and	 eax, 1
  0018f	85 c0		 test	 eax, eax
  00191	74 1c		 je	 SHORT $LN6@ecpsvm_dis
  00193	4c 8b 4c 24 50	 mov	 r9, QWORD PTR DW_PROBSTRT$[rsp]
  00198	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171688
  0019f	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  001a4	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  001a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN6@ecpsvm_dis:

; 2034 :     DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", buf));

  001af	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  001b5	c1 e8 02	 shr	 eax, 2
  001b8	83 e0 01	 and	 eax, 1
  001bb	85 c0		 test	 eax, eax
  001bd	74 51		 je	 SHORT $LN7@ecpsvm_dis
  001bf	b9 01 00 00 00	 mov	 ecx, 1
  001c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001ca	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  001cf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171690
  001db	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171691
  001e7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f1	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171692
  001fe	ba f2 07 00 00	 mov	 edx, 2034		; 000007f2H
  00203	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171693
  0020a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN7@ecpsvm_dis:

; 2035 :     if(DW_VMTMOUTQ==DW_PROBSTRT)

  00210	48 8b 44 24 50	 mov	 rax, QWORD PTR DW_PROBSTRT$[rsp]
  00215	48 39 44 24 48	 cmp	 QWORD PTR DW_VMTMOUTQ$[rsp], rax
  0021a	75 6d		 jne	 SHORT $LN8@ecpsvm_dis

; 2036 :     {
; 2037 :         DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", "INCPROBT Already performed"));

  0021c	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00222	c1 e8 02	 shr	 eax, 2
  00225	83 e0 01	 and	 eax, 1
  00228	85 c0		 test	 eax, eax
  0022a	74 53		 je	 SHORT $LN9@ecpsvm_dis
  0022c	b9 01 00 00 00	 mov	 ecx, 1
  00231	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00237	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171696
  0023e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00243	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171697
  0024a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0024f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171698
  00256	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0025b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00260	41 b9 03 00 00
	00		 mov	 r9d, 3
  00266	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171699
  0026d	ba f5 07 00 00	 mov	 edx, 2037		; 000007f5H
  00272	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171700
  00279	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN9@ecpsvm_dis:

; 2038 :         return(2);      /* continue */

  0027f	b8 02 00 00 00	 mov	 eax, 2
  00284	e9 82 01 00 00	 jmp	 $LN1@ecpsvm_dis
$LN8@ecpsvm_dis:

; 2039 :     }
; 2040 :     tspent=DW_PROBSTRT-DW_VMTMOUTQ;

  00289	48 8b 44 24 48	 mov	 rax, QWORD PTR DW_VMTMOUTQ$[rsp]
  0028e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR DW_PROBSTRT$[rsp]
  00293	48 2b c8	 sub	 rcx, rax
  00296	48 8b c1	 mov	 rax, rcx
  00299	48 89 44 24 58	 mov	 QWORD PTR tspent$[rsp], rax

; 2041 :     DEBUG_CPASSISTX(DISP0,MSGBUF(buf, "INCPROBT TSPENT = %16.16"PRIx64,tspent));

  0029e	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  002a4	c1 e8 02	 shr	 eax, 2
  002a7	83 e0 01	 and	 eax, 1
  002aa	85 c0		 test	 eax, eax
  002ac	74 1c		 je	 SHORT $LN10@ecpsvm_dis
  002ae	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tspent$[rsp]
  002b3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171702
  002ba	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  002bf	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  002c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN10@ecpsvm_dis:

; 2042 :     DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", buf));

  002ca	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  002d0	c1 e8 02	 shr	 eax, 2
  002d3	83 e0 01	 and	 eax, 1
  002d6	85 c0		 test	 eax, eax
  002d8	74 51		 je	 SHORT $LN11@ecpsvm_dis
  002da	b9 01 00 00 00	 mov	 ecx, 1
  002df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002e5	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  002ea	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171704
  002f6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171705
  00302	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00307	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0030c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00312	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171706
  00319	ba fa 07 00 00	 mov	 edx, 2042		; 000007faH
  0031e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171707
  00325	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN11@ecpsvm_dis:

; 2043 :     DW_PROBTIME=EVM_LD(PROBTIME);

  0032b	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00333	ba fe ff ff ff	 mov	 edx, -2
  00338	b9 28 03 00 00	 mov	 ecx, 808		; 00000328H
  0033d	e8 00 00 00 00	 call	 s370_vfetch8
  00342	48 89 44 24 40	 mov	 QWORD PTR DW_PROBTIME$[rsp], rax

; 2044 :     DW_PROBTIME-=tspent;

  00347	48 8b 44 24 58	 mov	 rax, QWORD PTR tspent$[rsp]
  0034c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR DW_PROBTIME$[rsp]
  00351	48 2b c8	 sub	 rcx, rax
  00354	48 8b c1	 mov	 rax, rcx
  00357	48 89 44 24 40	 mov	 QWORD PTR DW_PROBTIME$[rsp], rax

; 2045 :     EVM_STD(DW_PROBTIME,PROBTIME);

  0035c	4c 8b 8c 24 80
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00364	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0036a	ba 28 03 00 00	 mov	 edx, 808		; 00000328H
  0036f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR DW_PROBTIME$[rsp]
  00374	e8 00 00 00 00	 call	 s370_vstore8

; 2046 :     DEBUG_CPASSISTX(DISP0,MSGBUF(buf, "INCPROBT NEW PROBTIME = %16.16"PRIx64,DW_PROBTIME));

  00379	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  0037f	c1 e8 02	 shr	 eax, 2
  00382	83 e0 01	 and	 eax, 1
  00385	85 c0		 test	 eax, eax
  00387	74 1c		 je	 SHORT $LN12@ecpsvm_dis
  00389	4c 8b 4c 24 40	 mov	 r9, QWORD PTR DW_PROBTIME$[rsp]
  0038e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171709
  00395	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0039a	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  0039f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN12@ecpsvm_dis:

; 2047 :     DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", buf));

  003a5	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  003ab	c1 e8 02	 shr	 eax, 2
  003ae	83 e0 01	 and	 eax, 1
  003b1	85 c0		 test	 eax, eax
  003b3	74 51		 je	 SHORT $LN13@ecpsvm_dis
  003b5	b9 01 00 00 00	 mov	 ecx, 1
  003ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003c0	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  003c5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171711
  003d1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171712
  003dd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003e2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003e7	41 b9 03 00 00
	00		 mov	 r9d, 3
  003ed	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171713
  003f4	ba ff 07 00 00	 mov	 edx, 2047		; 000007ffH
  003f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171714
  00400	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN13@ecpsvm_dis:

; 2048 :     return(2);

  00406	b8 02 00 00 00	 mov	 eax, 2
$LN1@ecpsvm_dis:

; 2049 : }

  0040b	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00413	48 33 cc	 xor	 rcx, rsp
  00416	e8 00 00 00 00	 call	 __security_check_cookie
  0041b	48 81 c4 78 01
	00 00		 add	 rsp, 376		; 00000178H
  00422	c3		 ret	 0
ecpsvm_disp_incprobt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
page_invalid_bit_fmt$ = 32
page_table_len$ = 36
ptr_segtabl$ = 40
ptr_pagetabl$ = 44
tv77 = 48
tv134 = 56
regs$ = 80
archtect$ = 88
pindex$ = 96
ecpsvm_zappage PROC

; 1901 : {

$LN4:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 1902 :     VADR ptr_segtabl;
; 1903 :     VADR ptr_pagetabl;
; 1904 :     U16 page_table_len;
; 1905 :     BYTE page_invalid_bit_fmt;
; 1906 : 
; 1907 :     /* get segment table address.  Then isolate the page table pointer; if zero then */
; 1908 :     /* this page table is unused and we can exit with invalidation completed   */
; 1909 :     ptr_segtabl=regs->GR_L(6);

  00013	b8 08 00 00 00	 mov	 eax, 8
  00018	48 6b c0 06	 imul	 rax, rax, 6
  0001c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR regs$[rsp]
  00021	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00028	89 44 24 28	 mov	 DWORD PTR ptr_segtabl$[rsp], eax

; 1910 : 
; 1911 :     ptr_pagetabl=EVM_L(ptr_segtabl) & 0x00FFFFF8;

  0002c	8b 44 24 28	 mov	 eax, DWORD PTR ptr_segtabl$[rsp]
  00030	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00035	4c 8b 44 24 50	 mov	 r8, QWORD PTR regs$[rsp]
  0003a	ba fe ff ff ff	 mov	 edx, -2
  0003f	8b c8		 mov	 ecx, eax
  00041	e8 00 00 00 00	 call	 s370_vfetch4
  00046	25 f8 ff ff 00	 and	 eax, 16777208		; 00fffff8H
  0004b	89 44 24 2c	 mov	 DWORD PTR ptr_pagetabl$[rsp], eax

; 1912 :     if (ptr_pagetabl==0)

  0004f	83 7c 24 2c 00	 cmp	 DWORD PTR ptr_pagetabl$[rsp], 0
  00054	75 05		 jne	 SHORT $LN2@ecpsvm_zap

; 1913 :     {
; 1914 :         return;

  00056	e9 bd 00 00 00	 jmp	 $LN1@ecpsvm_zap
$LN2@ecpsvm_zap:

; 1915 :     }
; 1916 : 
; 1917 :     /* Since the segment table entry contains a pointer to a page table, mark the segment table entry as */
; 1918 :     /* valid.  Then obtain the format of the page invalid bit from the ARCHTECT table as well as the     */
; 1919 :     /* the page table length.                                                                            */
; 1920 :     EVM_ST(EVM_L(ptr_segtabl) & 0xFFFFFFFE, ptr_segtabl);

  0005b	8b 44 24 28	 mov	 eax, DWORD PTR ptr_segtabl$[rsp]
  0005f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00064	89 44 24 30	 mov	 DWORD PTR tv77[rsp], eax
  00068	8b 4c 24 28	 mov	 ecx, DWORD PTR ptr_segtabl$[rsp]
  0006c	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  00072	4c 8b 44 24 50	 mov	 r8, QWORD PTR regs$[rsp]
  00077	ba fe ff ff ff	 mov	 edx, -2
  0007c	e8 00 00 00 00	 call	 s370_vfetch4
  00081	83 e0 fe	 and	 eax, -2			; fffffffeH
  00084	4c 8b 4c 24 50	 mov	 r9, QWORD PTR regs$[rsp]
  00089	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0008f	8b 4c 24 30	 mov	 ecx, DWORD PTR tv77[rsp]
  00093	8b d1		 mov	 edx, ecx
  00095	8b c8		 mov	 ecx, eax
  00097	e8 00 00 00 00	 call	 s370_vstore4

; 1921 :     page_invalid_bit_fmt=EVM_IC(archtect+pindex+PINVBIT);

  0009c	8b 44 24 58	 mov	 eax, DWORD PTR archtect$[rsp]
  000a0	8b 4c 24 60	 mov	 ecx, DWORD PTR pindex$[rsp]
  000a4	8d 44 08 08	 lea	 eax, DWORD PTR [rax+rcx+8]
  000a8	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000ad	4c 8b 44 24 50	 mov	 r8, QWORD PTR regs$[rsp]
  000b2	ba fe ff ff ff	 mov	 edx, -2
  000b7	8b c8		 mov	 ecx, eax
  000b9	e8 00 00 00 00	 call	 s370_vfetchb
  000be	88 44 24 20	 mov	 BYTE PTR page_invalid_bit_fmt$[rsp], al

; 1922 :     page_table_len=EVM_LH(archtect+pindex+PAGTLEN);

  000c2	8b 44 24 58	 mov	 eax, DWORD PTR archtect$[rsp]
  000c6	8b 4c 24 60	 mov	 ecx, DWORD PTR pindex$[rsp]
  000ca	8d 44 08 12	 lea	 eax, DWORD PTR [rax+rcx+18]
  000ce	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000d3	4c 8b 44 24 50	 mov	 r8, QWORD PTR regs$[rsp]
  000d8	ba fe ff ff ff	 mov	 edx, -2
  000dd	8b c8		 mov	 ecx, eax
  000df	e8 00 00 00 00	 call	 s370_vfetch2
  000e4	66 89 44 24 24	 mov	 WORD PTR page_table_len$[rsp], ax

; 1923 : 
; 1924 :     /* fill the entire page table with the page invalid bit format */
; 1925 :     memset((char*)regs->mainstor+ptr_pagetabl, page_invalid_bit_fmt, page_table_len);

  000e9	0f b7 44 24 24	 movzx	 eax, WORD PTR page_table_len$[rsp]
  000ee	48 89 44 24 38	 mov	 QWORD PTR tv134[rsp], rax
  000f3	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR page_invalid_bit_fmt$[rsp]
  000f8	8b 54 24 2c	 mov	 edx, DWORD PTR ptr_pagetabl$[rsp]
  000fc	4c 8b 44 24 50	 mov	 r8, QWORD PTR regs$[rsp]
  00101	49 03 90 48 08
	00 00		 add	 rdx, QWORD PTR [r8+2120]
  00108	48 63 c9	 movsxd	 rcx, ecx
  0010b	48 8b fa	 mov	 rdi, rdx
  0010e	48 8b c1	 mov	 rax, rcx
  00111	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv134[rsp]
  00116	f3 aa		 rep stosb
$LN1@ecpsvm_zap:

; 1926 :     return;
; 1927 : }

  00118	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0011c	5f		 pop	 rdi
  0011d	c3		 ret	 0
ecpsvm_zappage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
vmb$ = 0
B_VMMCR6$ = 4
B_MICVIP$ = 5
B_VMESTAT$ = 6
i$ = 8
B_VMPSTAT$ = 12
B_VMDSTAT$ = 13
HW1$ = 16
i$1 = 20
F_CPEXB$ = 24
B_VMOSTAT$ = 28
FW1$ = 32
F_TRQB$ = 36
runu$ = 40
B_VMPEND$ = 44
B_VMRSTAT$ = 45
oldmode$2 = 46
lastu$ = 48
F_ECBLOK$ = 52
F$ = 56
B$ = 60
F_QUANTUM$ = 64
F_VMIOINT$ = 68
F_VMPXINT$ = 72
traceptr$ = 76
F_CPEXADD$ = 80
NCR0$ = 84
NCR1$ = 88
work_p$ = 96
F_MICBLOK$ = 104
tv2210 = 108
tv2215 = 112
tv2265 = 116
tv2216 = 120
tv2227 = 124
tv2249 = 128
tv2268 = 132
tv2274 = 136
tv2295 = 140
tv2300 = 144
tv2344 = 148
tv2368 = 152
tv2349 = 156
tv2374 = 160
tv2448 = 164
tv2465 = 168
tv2476 = 172
F_VMVCR0$ = 176
tv535 = 180
tv618 = 184
tv1034 = 188
svmb$ = 192
tv1987 = 196
tv2066 = 200
inst_cr$3 = 204
tv92 = 208
tv1399 = 216
tv1424 = 224
DW1$ = 232
tv2087 = 240
tv2144 = 248
tv2179 = 256
tv2506 = 264
tv2529 = 272
rregs$ = 384
wregs$ = 90624
CPEXBKUP$ = 180864
buf$ = 180928
__$ArrayPad$ = 181952
regs$ = 182192
dl$ = 182200
el$ = 182208
ecpsvm_do_disp2 PROC

; 1221 : {

$LN333:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	b8 98 c7 02 00	 mov	 eax, 182168		; 0002c798H
  00015	e8 00 00 00 00	 call	 __chkstk
  0001a	48 2b e0	 sub	 rsp, rax
  0001d	48 8d ac 24 c0
	00 00 00	 lea	 rbp, QWORD PTR [rsp+192]
  00025	48 83 e5 80	 and	 rbp, -128		; ffffffffffffff80H
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c4	 xor	 rax, rsp
  00033	48 89 85 c0 c6
	02 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 1222 :     char buf[1024];
; 1223 :     VADR vmb;   /* Current VMBLOK */
; 1224 :     VADR svmb;  /* ASYSVM */
; 1225 :     VADR runu;  /* RUNUSER */
; 1226 :     VADR lastu; /* LASTUSER */
; 1227 :     VADR F_TRQB;
; 1228 :     VADR F_CPEXB;
; 1229 :     VADR F,B;
; 1230 :     VADR traceptr;
; 1231 :     U16  HW1;
; 1232 :     U32  FW1;
; 1233 :     U64  DW1;
; 1234 :     U32  CPEXBKUP[15];  /* CPEXBLOK Regs backup except GPR15 which is useless */
; 1235 :     VADR F_ECBLOK;      /* Pointer to user's EC block for extended VM */
; 1236 :     VADR F_CPEXADD;
; 1237 :     U32  F_QUANTUM;
; 1238 :     REGS wregs; /* Work REGS structure of PSW manipulation for Virtual PSW */
; 1239 :     REGS rregs; /* Work REGS structure of PSW manipulation for Real    PSW */
; 1240 :     int i;
; 1241 : 
; 1242 :     BYTE B_VMDSTAT,B_VMRSTAT,B_VMESTAT,B_VMPSTAT,B_VMMCR6,B_MICVIP;
; 1243 :     BYTE B_VMOSTAT,B_VMPEND;
; 1244 :     VADR F_MICBLOK;
; 1245 :     U32 F_VMIOINT,F_VMPXINT;
; 1246 :     U32 F_VMVCR0;
; 1247 :     U32 NCR0,NCR1;
; 1248 :     BYTE *work_p;
; 1249 : 
; 1250 :     vmb=regs->GR_L(11);

  0003a	b8 08 00 00 00	 mov	 eax, 8
  0003f	48 6b c0 0b	 imul	 rax, rax, 11
  00043	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0004b	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00052	89 45 00	 mov	 DWORD PTR vmb$[rbp], eax

; 1251 :     DEBUG_CPASSISTX(DISP2,MSGBUF(buf,"DISP2 Data list=%6.6X VM=%6.6X",dl,vmb));

  00055	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  0005b	c1 e8 02	 shr	 eax, 2
  0005e	83 e0 01	 and	 eax, 1
  00061	85 c0		 test	 eax, eax
  00063	74 28		 je	 SHORT $LN135@ecpsvm_do_
  00065	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  00068	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0006c	44 8b 8c 24 b8
	c7 02 00	 mov	 r9d, DWORD PTR dl$[rsp]
  00074	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170886
  0007b	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  00080	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00087	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN135@ecpsvm_do_:

; 1252 :     DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  0008d	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  00093	c1 e8 02	 shr	 eax, 2
  00096	83 e0 01	 and	 eax, 1
  00099	85 c0		 test	 eax, eax
  0009b	74 53		 je	 SHORT $LN136@ecpsvm_do_
  0009d	b9 01 00 00 00	 mov	 ecx, 1
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a8	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  000af	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170888
  000bb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170889
  000c7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000cc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d1	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170890
  000de	ba e4 04 00 00	 mov	 edx, 1252		; 000004e4H
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170891
  000ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN136@ecpsvm_do_:

; 1253 :     CHARGE_STOP(vmb);

  000f0	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  000f3	05 80 00 00 00	 add	 eax, 128		; 00000080H
  000f8	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000fd	89 85 d0 00 00
	00		 mov	 DWORD PTR tv92[rbp], eax
  00103	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0010b	e8 00 00 00 00	 call	 get_cpu_timer
  00110	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00118	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0011e	8b 8d d0 00 00
	00		 mov	 ecx, DWORD PTR tv92[rbp]
  00124	8b d1		 mov	 edx, ecx
  00126	48 8b c8	 mov	 rcx, rax
  00129	e8 00 00 00 00	 call	 s370_vstore8

; 1254 :     if(EVM_IC(XTENDLOCK) == XTENDLOCKSET)

  0012e	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00136	ba fe ff ff ff	 mov	 edx, -2
  0013b	b9 49 03 00 00	 mov	 ecx, 841		; 00000349H
  00140	e8 00 00 00 00	 call	 s370_vfetchb
  00145	0f b6 c0	 movzx	 eax, al
  00148	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  0014d	0f 85 2a 01 00
	00		 jne	 $LN137@ecpsvm_do_

; 1255 :     {
; 1256 :         DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", "DISP2 Exit 8 : System extending"));

  00153	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  00159	c1 e8 02	 shr	 eax, 2
  0015c	83 e0 01	 and	 eax, 1
  0015f	85 c0		 test	 eax, eax
  00161	74 53		 je	 SHORT $LN138@ecpsvm_do_
  00163	b9 01 00 00 00	 mov	 ecx, 1
  00168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0016e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170894
  00175	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0017a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170895
  00181	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00186	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170896
  0018d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00192	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00197	41 b9 03 00 00
	00		 mov	 r9d, 3
  0019d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170897
  001a4	ba e8 04 00 00	 mov	 edx, 1256		; 000004e8H
  001a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170898
  001b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN138@ecpsvm_do_:
$LN4@ecpsvm_do_:

; 1257 :         /* System in Extend process */
; 1258 :         SET_PSW_IA_AND_MAYBE_IP(regs, EVM_L(el+8));

  001b6	8b 84 24 c0 c7
	02 00		 mov	 eax, DWORD PTR el$[rsp]
  001bd	83 c0 08	 add	 eax, 8
  001c0	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  001c5	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  001cd	ba fe ff ff ff	 mov	 edx, -2
  001d2	8b c8		 mov	 ecx, eax
  001d4	e8 00 00 00 00	 call	 s370_vfetch4
  001d9	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  001de	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001e6	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  001ec	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  001f4	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  001fc	74 6e		 je	 SHORT $LN139@ecpsvm_do_
  001fe	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00206	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0020c	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00211	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00219	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  0021f	75 38		 jne	 SHORT $LN140@ecpsvm_do_
  00221	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00229	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0022f	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00234	8b c0		 mov	 eax, eax
  00236	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0023e	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00245	48 0b c8	 or	 rcx, rax
  00248	48 8b c1	 mov	 rax, rcx
  0024b	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00253	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00257	eb 13		 jmp	 SHORT $LN141@ecpsvm_do_
$LN140@ecpsvm_do_:
  00259	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00261	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN141@ecpsvm_do_:
$LN139@ecpsvm_do_:
  0026c	33 c0		 xor	 eax, eax
  0026e	85 c0		 test	 eax, eax
  00270	0f 85 40 ff ff
	ff		 jne	 $LN4@ecpsvm_do_

; 1259 :         return(0);

  00276	33 c0		 xor	 eax, eax
  00278	e9 ce 3b 00 00	 jmp	 $LN1@ecpsvm_do_
$LN137@ecpsvm_do_:

; 1260 :     }
; 1261 :     if(EVM_IC(APSTAT2) & CPMCHLK)

  0027d	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00285	ba fe ff ff ff	 mov	 edx, -2
  0028a	b9 9b 06 00 00	 mov	 ecx, 1691		; 0000069bH
  0028f	e8 00 00 00 00	 call	 s370_vfetchb
  00294	0f b6 c0	 movzx	 eax, al
  00297	83 e0 10	 and	 eax, 16
  0029a	85 c0		 test	 eax, eax
  0029c	0f 84 2a 01 00
	00		 je	 $LN142@ecpsvm_do_

; 1262 :     {
; 1263 :         DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", "DISP2 Exit 8 : MCH Recovery"));

  002a2	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  002a8	c1 e8 02	 shr	 eax, 2
  002ab	83 e0 01	 and	 eax, 1
  002ae	85 c0		 test	 eax, eax
  002b0	74 53		 je	 SHORT $LN143@ecpsvm_do_
  002b2	b9 01 00 00 00	 mov	 ecx, 1
  002b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170904
  002c4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170905
  002d0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170906
  002dc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e6	41 b9 03 00 00
	00		 mov	 r9d, 3
  002ec	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170907
  002f3	ba ef 04 00 00	 mov	 edx, 1263		; 000004efH
  002f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170908
  002ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN143@ecpsvm_do_:
$LN7@ecpsvm_do_:

; 1264 :         /* Machine Check recovery in progress */
; 1265 :         SET_PSW_IA_AND_MAYBE_IP(regs, EVM_L(el+8));

  00305	8b 84 24 c0 c7
	02 00		 mov	 eax, DWORD PTR el$[rsp]
  0030c	83 c0 08	 add	 eax, 8
  0030f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00314	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  0031c	ba fe ff ff ff	 mov	 edx, -2
  00321	8b c8		 mov	 ecx, eax
  00323	e8 00 00 00 00	 call	 s370_vfetch4
  00328	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0032d	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00335	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  0033b	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00343	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  0034b	74 6e		 je	 SHORT $LN144@ecpsvm_do_
  0034d	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00355	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0035b	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00360	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00368	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  0036e	75 38		 jne	 SHORT $LN145@ecpsvm_do_
  00370	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00378	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0037e	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00383	8b c0		 mov	 eax, eax
  00385	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0038d	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00394	48 0b c8	 or	 rcx, rax
  00397	48 8b c1	 mov	 rax, rcx
  0039a	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003a2	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  003a6	eb 13		 jmp	 SHORT $LN146@ecpsvm_do_
$LN145@ecpsvm_do_:
  003a8	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  003b0	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN146@ecpsvm_do_:
$LN144@ecpsvm_do_:
  003bb	33 c0		 xor	 eax, eax
  003bd	85 c0		 test	 eax, eax
  003bf	0f 85 40 ff ff
	ff		 jne	 $LN7@ecpsvm_do_

; 1266 :         return(0);

  003c5	33 c0		 xor	 eax, eax
  003c7	e9 7f 3a 00 00	 jmp	 $LN1@ecpsvm_do_
$LN142@ecpsvm_do_:

; 1267 :     }
; 1268 :     svmb=EVM_L(ASYSVM);

  003cc	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  003d4	ba fe ff ff ff	 mov	 edx, -2
  003d9	b9 7c 03 00 00	 mov	 ecx, 892		; 0000037cH
  003de	e8 00 00 00 00	 call	 s370_vfetch4
  003e3	89 85 c0 00 00
	00		 mov	 DWORD PTR svmb$[rbp], eax

; 1269 :     /* Check IOB/TRQ for dispatch */
; 1270 :     /* at DMKDSP CKCPSTAK */
; 1271 :     F_TRQB=EVM_L(dl+8);

  003e9	8b 84 24 b8 c7
	02 00		 mov	 eax, DWORD PTR dl$[rsp]
  003f0	83 c0 08	 add	 eax, 8
  003f3	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  003f8	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00400	ba fe ff ff ff	 mov	 edx, -2
  00405	8b c8		 mov	 ecx, eax
  00407	e8 00 00 00 00	 call	 s370_vfetch4
  0040c	89 45 24	 mov	 DWORD PTR F_TRQB$[rbp], eax

; 1272 :     if(F_TRQB!=dl)

  0040f	8b 84 24 b8 c7
	02 00		 mov	 eax, DWORD PTR dl$[rsp]
  00416	39 45 24	 cmp	 DWORD PTR F_TRQB$[rbp], eax
  00419	0f 84 60 04 00
	00		 je	 $LN147@ecpsvm_do_

; 1273 :     {
; 1274 :         DEBUG_CPASSISTX(DISP2,MSGBUF(buf, "DISP2 TRQ/IOB @ %6.6X Exit being routed",F_TRQB));

  0041f	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  00425	c1 e8 02	 shr	 eax, 2
  00428	83 e0 01	 and	 eax, 1
  0042b	85 c0		 test	 eax, eax
  0042d	74 1d		 je	 SHORT $LN148@ecpsvm_do_
  0042f	44 8b 4d 24	 mov	 r9d, DWORD PTR F_TRQB$[rbp]
  00433	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170914
  0043a	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  0043f	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00446	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN148@ecpsvm_do_:

; 1275 :         DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  0044c	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  00452	c1 e8 02	 shr	 eax, 2
  00455	83 e0 01	 and	 eax, 1
  00458	85 c0		 test	 eax, eax
  0045a	74 53		 je	 SHORT $LN149@ecpsvm_do_
  0045c	b9 01 00 00 00	 mov	 ecx, 1
  00461	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00467	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0046e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00473	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170916
  0047a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0047f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170917
  00486	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0048b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00490	41 b9 03 00 00
	00		 mov	 r9d, 3
  00496	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170918
  0049d	ba fb 04 00 00	 mov	 edx, 1275		; 000004fbH
  004a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170919
  004a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN149@ecpsvm_do_:

; 1276 :         /* We have a TRQ/IOB */
; 1277 :         /* Update stack */
; 1278 :         /* at DMKDSP PROCIOB */
; 1279 :         F=EVM_L(F_TRQB+8);

  004af	8b 45 24	 mov	 eax, DWORD PTR F_TRQB$[rbp]
  004b2	83 c0 08	 add	 eax, 8
  004b5	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  004ba	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  004c2	ba fe ff ff ff	 mov	 edx, -2
  004c7	8b c8		 mov	 ecx, eax
  004c9	e8 00 00 00 00	 call	 s370_vfetch4
  004ce	89 45 38	 mov	 DWORD PTR F$[rbp], eax

; 1280 :         B=EVM_L(F_TRQB+12);

  004d1	8b 45 24	 mov	 eax, DWORD PTR F_TRQB$[rbp]
  004d4	83 c0 0c	 add	 eax, 12
  004d7	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  004dc	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  004e4	ba fe ff ff ff	 mov	 edx, -2
  004e9	8b c8		 mov	 ecx, eax
  004eb	e8 00 00 00 00	 call	 s370_vfetch4
  004f0	89 45 3c	 mov	 DWORD PTR B$[rbp], eax

; 1281 :         EVM_ST(F,B+8);

  004f3	8b 45 3c	 mov	 eax, DWORD PTR B$[rbp]
  004f6	83 c0 08	 add	 eax, 8
  004f9	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  004fe	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00506	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0050c	8b d0		 mov	 edx, eax
  0050e	8b 4d 38	 mov	 ecx, DWORD PTR F$[rbp]
  00511	e8 00 00 00 00	 call	 s370_vstore4

; 1282 :         EVM_ST(B,F+12);

  00516	8b 45 38	 mov	 eax, DWORD PTR F$[rbp]
  00519	83 c0 0c	 add	 eax, 12
  0051c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00521	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00529	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0052f	8b d0		 mov	 edx, eax
  00531	8b 4d 3c	 mov	 ecx, DWORD PTR B$[rbp]
  00534	e8 00 00 00 00	 call	 s370_vstore4

; 1283 :         /* Get VMBLOK Responsible for this block */
; 1284 :         vmb=EVM_L(F_TRQB+0x18);

  00539	8b 45 24	 mov	 eax, DWORD PTR F_TRQB$[rbp]
  0053c	83 c0 18	 add	 eax, 24
  0053f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00544	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  0054c	ba fe ff ff ff	 mov	 edx, -2
  00551	8b c8		 mov	 ecx, eax
  00553	e8 00 00 00 00	 call	 s370_vfetch4
  00558	89 45 00	 mov	 DWORD PTR vmb$[rbp], eax

; 1285 :         /* Update stack count for the VMBLOK */
; 1286 :         HW1=EVM_LH(vmb+VMSTKCNT);

  0055b	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  0055e	05 cc 01 00 00	 add	 eax, 460		; 000001ccH
  00563	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00568	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00570	ba fe ff ff ff	 mov	 edx, -2
  00575	8b c8		 mov	 ecx, eax
  00577	e8 00 00 00 00	 call	 s370_vfetch2
  0057c	66 89 45 10	 mov	 WORD PTR HW1$[rbp], ax

; 1287 :         HW1--;

  00580	0f b7 45 10	 movzx	 eax, WORD PTR HW1$[rbp]
  00584	66 ff c8	 dec	 ax
  00587	66 89 45 10	 mov	 WORD PTR HW1$[rbp], ax

; 1288 :         EVM_STH(HW1,vmb+VMSTKCNT);

  0058b	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  0058e	05 cc 01 00 00	 add	 eax, 460		; 000001ccH
  00593	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00598	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  005a0	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  005a6	8b d0		 mov	 edx, eax
  005a8	0f b7 4d 10	 movzx	 ecx, WORD PTR HW1$[rbp]
  005ac	e8 00 00 00 00	 call	 s370_vstore2

; 1289 :         /* Start charging user for processor time */
; 1290 :         CHARGE_START(vmb);

  005b1	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  005b4	05 80 00 00 00	 add	 eax, 128		; 00000080H
  005b9	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  005be	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  005c6	ba fe ff ff ff	 mov	 edx, -2
  005cb	8b c8		 mov	 ecx, eax
  005cd	e8 00 00 00 00	 call	 s370_vfetch8
  005d2	48 8b d0	 mov	 rdx, rax
  005d5	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005dd	e8 00 00 00 00	 call	 set_cpu_timer
  005e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170920
  005e9	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005f1	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock
  005f6	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005fe	e8 00 00 00 00	 call	 get_cpu_timer
  00603	48 85 c0	 test	 rax, rax
  00606	7d 53		 jge	 SHORT $LN150@ecpsvm_do_
$LN10@ecpsvm_do_:
  00608	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00610	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  00613	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00618	85 c0		 test	 eax, eax
  0061a	74 1d		 je	 SHORT $LN152@ecpsvm_do_
  0061c	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00624	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00627	0d 00 04 00 80	 or	 eax, -2147482624	; 80000400H
  0062c	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00634	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00637	eb 1a		 jmp	 SHORT $LN153@ecpsvm_do_
$LN152@ecpsvm_do_:
  00639	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00641	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00644	0f ba e8 0a	 bts	 eax, 10
  00648	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00650	89 41 48	 mov	 DWORD PTR [rcx+72], eax
$LN153@ecpsvm_do_:
  00653	33 c0		 xor	 eax, eax
  00655	85 c0		 test	 eax, eax
  00657	75 af		 jne	 SHORT $LN10@ecpsvm_do_
  00659	eb 20		 jmp	 SHORT $LN151@ecpsvm_do_
$LN150@ecpsvm_do_:
$LN13@ecpsvm_do_:
  0065b	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00663	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00666	0f ba f0 0a	 btr	 eax, 10
  0066a	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00672	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00675	33 c0		 xor	 eax, eax
  00677	85 c0		 test	 eax, eax
  00679	75 e0		 jne	 SHORT $LN13@ecpsvm_do_
$LN151@ecpsvm_do_:
  0067b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170925
  00682	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0068a	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 1291 :         EVM_ST(vmb,STACKVM);

  0068f	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00697	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0069d	ba d0 06 00 00	 mov	 edx, 1744		; 000006d0H
  006a2	8b 4d 00	 mov	 ecx, DWORD PTR vmb$[rbp]
  006a5	e8 00 00 00 00	 call	 s370_vstore4

; 1292 :         /* Update registers for TRQ/IOB exit */
; 1293 :         regs->GR_L(10)=F_TRQB;

  006aa	b8 08 00 00 00	 mov	 eax, 8
  006af	48 6b c0 0a	 imul	 rax, rax, 10
  006b3	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  006bb	8b 55 24	 mov	 edx, DWORD PTR F_TRQB$[rbp]
  006be	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 1294 :         regs->GR_L(11)=vmb;

  006c5	b8 08 00 00 00	 mov	 eax, 8
  006ca	48 6b c0 0b	 imul	 rax, rax, 11
  006ce	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  006d6	8b 55 00	 mov	 edx, DWORD PTR vmb$[rbp]
  006d9	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 1295 :         regs->GR_L(12)=EVM_L(F_TRQB+0x1C);

  006e0	8b 45 24	 mov	 eax, DWORD PTR F_TRQB$[rbp]
  006e3	83 c0 1c	 add	 eax, 28
  006e6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  006eb	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  006f3	ba fe ff ff ff	 mov	 edx, -2
  006f8	8b c8		 mov	 ecx, eax
  006fa	e8 00 00 00 00	 call	 s370_vfetch4
  006ff	b9 08 00 00 00	 mov	 ecx, 8
  00704	48 6b c9 0c	 imul	 rcx, rcx, 12
  00708	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00710	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax
$LN16@ecpsvm_do_:

; 1296 :         SET_PSW_IA_AND_MAYBE_IP(regs, regs->GR_L(12));

  00717	b8 08 00 00 00	 mov	 eax, 8
  0071c	48 6b c0 0c	 imul	 rax, rax, 12
  00720	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00728	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0072f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00734	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0073c	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00742	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0074a	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00752	74 6e		 je	 SHORT $LN154@ecpsvm_do_
  00754	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0075c	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00762	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00767	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0076f	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00775	75 38		 jne	 SHORT $LN155@ecpsvm_do_
  00777	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0077f	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00785	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0078a	8b c0		 mov	 eax, eax
  0078c	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00794	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  0079b	48 0b c8	 or	 rcx, rax
  0079e	48 8b c1	 mov	 rax, rcx
  007a1	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  007a9	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  007ad	eb 13		 jmp	 SHORT $LN156@ecpsvm_do_
$LN155@ecpsvm_do_:
  007af	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  007b7	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN156@ecpsvm_do_:
$LN154@ecpsvm_do_:
  007c2	33 c0		 xor	 eax, eax
  007c4	85 c0		 test	 eax, eax
  007c6	0f 85 4b ff ff
	ff		 jne	 $LN16@ecpsvm_do_

; 1297 :         DEBUG_CPASSISTX(DISP2,MSGBUF(buf, "DISP2 TRQ/IOB @ %6.6X IA = %6.6X",F_TRQB,regs->GR_L(12)));

  007cc	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  007d2	c1 e8 02	 shr	 eax, 2
  007d5	83 e0 01	 and	 eax, 1
  007d8	85 c0		 test	 eax, eax
  007da	74 39		 je	 SHORT $LN157@ecpsvm_do_
  007dc	b8 08 00 00 00	 mov	 eax, 8
  007e1	48 6b c0 0c	 imul	 rax, rax, 12
  007e5	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  007ed	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  007f4	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  007f8	44 8b 4d 24	 mov	 r9d, DWORD PTR F_TRQB$[rbp]
  007fc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170930
  00803	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  00808	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0080f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN157@ecpsvm_do_:

; 1298 :         DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  00815	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  0081b	c1 e8 02	 shr	 eax, 2
  0081e	83 e0 01	 and	 eax, 1
  00821	85 c0		 test	 eax, eax
  00823	74 53		 je	 SHORT $LN158@ecpsvm_do_
  00825	b9 01 00 00 00	 mov	 ecx, 1
  0082a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00830	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00837	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0083c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170932
  00843	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00848	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170933
  0084f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00854	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00859	41 b9 03 00 00
	00		 mov	 r9d, 3
  0085f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170934
  00866	ba 12 05 00 00	 mov	 edx, 1298		; 00000512H
  0086b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170935
  00872	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN158@ecpsvm_do_:

; 1299 :         return(0);

  00878	33 c0		 xor	 eax, eax
  0087a	e9 cc 35 00 00	 jmp	 $LN1@ecpsvm_do_
$LN147@ecpsvm_do_:

; 1300 :     }
; 1301 :     /* Check CPEX BLOCK for dispatch */
; 1302 :     /* at DMKDSP WINDOW */
; 1303 :     F_CPEXB=EVM_L(dl+0);

  0087f	8b 84 24 b8 c7
	02 00		 mov	 eax, DWORD PTR dl$[rsp]
  00886	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0088b	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00893	ba fe ff ff ff	 mov	 edx, -2
  00898	8b c8		 mov	 ecx, eax
  0089a	e8 00 00 00 00	 call	 s370_vfetch4
  0089f	89 45 18	 mov	 DWORD PTR F_CPEXB$[rbp], eax

; 1304 :     if(F_CPEXB!=dl)

  008a2	8b 84 24 b8 c7
	02 00		 mov	 eax, DWORD PTR dl$[rsp]
  008a9	39 45 18	 cmp	 DWORD PTR F_CPEXB$[rbp], eax
  008ac	0f 84 0c 08 00
	00		 je	 $LN159@ecpsvm_do_

; 1305 :     {
; 1306 :         DEBUG_CPASSISTX(DISP2,MSGBUF(buf, "DISP2 CPEXBLOK Exit being routed CPEX=%6.6X",F_CPEXB));

  008b2	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  008b8	c1 e8 02	 shr	 eax, 2
  008bb	83 e0 01	 and	 eax, 1
  008be	85 c0		 test	 eax, eax
  008c0	74 1d		 je	 SHORT $LN160@ecpsvm_do_
  008c2	44 8b 4d 18	 mov	 r9d, DWORD PTR F_CPEXB$[rbp]
  008c6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170938
  008cd	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  008d2	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  008d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN160@ecpsvm_do_:

; 1307 :         DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  008df	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  008e5	c1 e8 02	 shr	 eax, 2
  008e8	83 e0 01	 and	 eax, 1
  008eb	85 c0		 test	 eax, eax
  008ed	74 53		 je	 SHORT $LN161@ecpsvm_do_
  008ef	b9 01 00 00 00	 mov	 ecx, 1
  008f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008fa	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00901	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00906	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170940
  0090d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00912	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170941
  00919	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0091e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00923	41 b9 03 00 00
	00		 mov	 r9d, 3
  00929	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170942
  00930	ba 1b 05 00 00	 mov	 edx, 1307		; 0000051bH
  00935	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170943
  0093c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN161@ecpsvm_do_:

; 1308 :         /* We have a CPEXBLOCK */
; 1309 :         /* Update stack */
; 1310 :         F=EVM_L(F_CPEXB+0);

  00942	8b 45 18	 mov	 eax, DWORD PTR F_CPEXB$[rbp]
  00945	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0094a	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00952	ba fe ff ff ff	 mov	 edx, -2
  00957	8b c8		 mov	 ecx, eax
  00959	e8 00 00 00 00	 call	 s370_vfetch4
  0095e	89 45 38	 mov	 DWORD PTR F$[rbp], eax

; 1311 :         B=EVM_L(F_CPEXB+4);

  00961	8b 45 18	 mov	 eax, DWORD PTR F_CPEXB$[rbp]
  00964	83 c0 04	 add	 eax, 4
  00967	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0096c	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00974	ba fe ff ff ff	 mov	 edx, -2
  00979	8b c8		 mov	 ecx, eax
  0097b	e8 00 00 00 00	 call	 s370_vfetch4
  00980	89 45 3c	 mov	 DWORD PTR B$[rbp], eax

; 1312 :         EVM_ST(F,B+0);

  00983	8b 45 3c	 mov	 eax, DWORD PTR B$[rbp]
  00986	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0098b	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00993	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00999	8b d0		 mov	 edx, eax
  0099b	8b 4d 38	 mov	 ecx, DWORD PTR F$[rbp]
  0099e	e8 00 00 00 00	 call	 s370_vstore4

; 1313 :         EVM_ST(B,F+4);

  009a3	8b 45 38	 mov	 eax, DWORD PTR F$[rbp]
  009a6	83 c0 04	 add	 eax, 4
  009a9	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  009ae	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  009b6	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  009bc	8b d0		 mov	 edx, eax
  009be	8b 4d 3c	 mov	 ecx, DWORD PTR B$[rbp]
  009c1	e8 00 00 00 00	 call	 s370_vstore4

; 1314 :         vmb=EVM_L(F_CPEXB+0x10+(11*4));

  009c6	8b 45 18	 mov	 eax, DWORD PTR F_CPEXB$[rbp]
  009c9	83 c0 3c	 add	 eax, 60			; 0000003cH
  009cc	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  009d1	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  009d9	ba fe ff ff ff	 mov	 edx, -2
  009de	8b c8		 mov	 ecx, eax
  009e0	e8 00 00 00 00	 call	 s370_vfetch4
  009e5	89 45 00	 mov	 DWORD PTR vmb$[rbp], eax

; 1315 :         HW1=EVM_LH(vmb+VMSTKCNT);

  009e8	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  009eb	05 cc 01 00 00	 add	 eax, 460		; 000001ccH
  009f0	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  009f5	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  009fd	ba fe ff ff ff	 mov	 edx, -2
  00a02	8b c8		 mov	 ecx, eax
  00a04	e8 00 00 00 00	 call	 s370_vfetch2
  00a09	66 89 45 10	 mov	 WORD PTR HW1$[rbp], ax

; 1316 :         HW1--;

  00a0d	0f b7 45 10	 movzx	 eax, WORD PTR HW1$[rbp]
  00a11	66 ff c8	 dec	 ax
  00a14	66 89 45 10	 mov	 WORD PTR HW1$[rbp], ax

; 1317 :         EVM_STH(HW1,vmb+VMSTKCNT);

  00a18	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  00a1b	05 cc 01 00 00	 add	 eax, 460		; 000001ccH
  00a20	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00a25	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00a2d	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00a33	8b d0		 mov	 edx, eax
  00a35	0f b7 4d 10	 movzx	 ecx, WORD PTR HW1$[rbp]
  00a39	e8 00 00 00 00	 call	 s370_vstore2

; 1318 :         CHARGE_START(vmb);

  00a3e	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  00a41	05 80 00 00 00	 add	 eax, 128		; 00000080H
  00a46	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00a4b	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00a53	ba fe ff ff ff	 mov	 edx, -2
  00a58	8b c8		 mov	 ecx, eax
  00a5a	e8 00 00 00 00	 call	 s370_vfetch8
  00a5f	48 8b d0	 mov	 rdx, rax
  00a62	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a6a	e8 00 00 00 00	 call	 set_cpu_timer
  00a6f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170944
  00a76	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a7e	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock
  00a83	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a8b	e8 00 00 00 00	 call	 get_cpu_timer
  00a90	48 85 c0	 test	 rax, rax
  00a93	7d 53		 jge	 SHORT $LN162@ecpsvm_do_
$LN19@ecpsvm_do_:
  00a95	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a9d	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  00aa0	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00aa5	85 c0		 test	 eax, eax
  00aa7	74 1d		 je	 SHORT $LN164@ecpsvm_do_
  00aa9	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00ab1	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00ab4	0d 00 04 00 80	 or	 eax, -2147482624	; 80000400H
  00ab9	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00ac1	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00ac4	eb 1a		 jmp	 SHORT $LN165@ecpsvm_do_
$LN164@ecpsvm_do_:
  00ac6	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00ace	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00ad1	0f ba e8 0a	 bts	 eax, 10
  00ad5	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00add	89 41 48	 mov	 DWORD PTR [rcx+72], eax
$LN165@ecpsvm_do_:
  00ae0	33 c0		 xor	 eax, eax
  00ae2	85 c0		 test	 eax, eax
  00ae4	75 af		 jne	 SHORT $LN19@ecpsvm_do_
  00ae6	eb 20		 jmp	 SHORT $LN163@ecpsvm_do_
$LN162@ecpsvm_do_:
$LN22@ecpsvm_do_:
  00ae8	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00af0	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00af3	0f ba f0 0a	 btr	 eax, 10
  00af7	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00aff	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00b02	33 c0		 xor	 eax, eax
  00b04	85 c0		 test	 eax, eax
  00b06	75 e0		 jne	 SHORT $LN22@ecpsvm_do_
$LN163@ecpsvm_do_:
  00b08	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170949
  00b0f	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00b17	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 1319 :         EVM_ST(vmb,STACKVM);

  00b1c	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00b24	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00b2a	ba d0 06 00 00	 mov	 edx, 1744		; 000006d0H
  00b2f	8b 4d 00	 mov	 ecx, DWORD PTR vmb$[rbp]
  00b32	e8 00 00 00 00	 call	 s370_vstore4

; 1320 :         /* Copy CPEXBLOCK Contents, and attempt FRET */
; 1321 :         /* If fret fails, use exit #12 */
; 1322 :         for(i=0;i<15;i++)

  00b37	c7 45 08 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00b3e	eb 08		 jmp	 SHORT $LN25@ecpsvm_do_
$LN23@ecpsvm_do_:
  00b40	8b 45 08	 mov	 eax, DWORD PTR i$[rbp]
  00b43	ff c0		 inc	 eax
  00b45	89 45 08	 mov	 DWORD PTR i$[rbp], eax
$LN25@ecpsvm_do_:
  00b48	83 7d 08 0f	 cmp	 DWORD PTR i$[rbp], 15
  00b4c	7d 30		 jge	 SHORT $LN24@ecpsvm_do_

; 1323 :         {
; 1324 :             CPEXBKUP[i]=EVM_L(F_CPEXB+0x10+(i*4));

  00b4e	8b 45 18	 mov	 eax, DWORD PTR F_CPEXB$[rbp]
  00b51	8b 4d 08	 mov	 ecx, DWORD PTR i$[rbp]
  00b54	8d 44 88 10	 lea	 eax, DWORD PTR [rax+rcx*4+16]
  00b58	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00b5d	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00b65	ba fe ff ff ff	 mov	 edx, -2
  00b6a	8b c8		 mov	 ecx, eax
  00b6c	e8 00 00 00 00	 call	 s370_vfetch4
  00b71	48 63 4d 08	 movsxd	 rcx, DWORD PTR i$[rbp]
  00b75	89 84 8d 80 c2
	02 00		 mov	 DWORD PTR CPEXBKUP$[rbp+rcx*4], eax

; 1325 :         }

  00b7c	eb c2		 jmp	 SHORT $LN23@ecpsvm_do_
$LN24@ecpsvm_do_:

; 1326 :         F_CPEXADD=EVM_L(F_CPEXB+0x0C);

  00b7e	8b 45 18	 mov	 eax, DWORD PTR F_CPEXB$[rbp]
  00b81	83 c0 0c	 add	 eax, 12
  00b84	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00b89	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00b91	ba fe ff ff ff	 mov	 edx, -2
  00b96	8b c8		 mov	 ecx, eax
  00b98	e8 00 00 00 00	 call	 s370_vfetch4
  00b9d	89 45 50	 mov	 DWORD PTR F_CPEXADD$[rbp], eax

; 1327 :         if(ecpsvm_do_fretx(regs,F_CPEXB,10,EVM_L(dl+28),EVM_L(dl+32))!=0)

  00ba0	8b 84 24 b8 c7
	02 00		 mov	 eax, DWORD PTR dl$[rsp]
  00ba7	83 c0 20	 add	 eax, 32			; 00000020H
  00baa	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00baf	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00bb7	ba fe ff ff ff	 mov	 edx, -2
  00bbc	8b c8		 mov	 ecx, eax
  00bbe	e8 00 00 00 00	 call	 s370_vfetch4
  00bc3	89 85 b4 00 00
	00		 mov	 DWORD PTR tv535[rbp], eax
  00bc9	8b 8c 24 b8 c7
	02 00		 mov	 ecx, DWORD PTR dl$[rsp]
  00bd0	83 c1 1c	 add	 ecx, 28
  00bd3	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  00bd9	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00be1	ba fe ff ff ff	 mov	 edx, -2
  00be6	e8 00 00 00 00	 call	 s370_vfetch4
  00beb	8b 8d b4 00 00
	00		 mov	 ecx, DWORD PTR tv535[rbp]
  00bf1	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00bf5	44 8b c8	 mov	 r9d, eax
  00bf8	66 41 b8 0a 00	 mov	 r8w, 10
  00bfd	8b 55 18	 mov	 edx, DWORD PTR F_CPEXB$[rbp]
  00c00	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00c08	e8 00 00 00 00	 call	 ecpsvm_do_fretx
  00c0d	85 c0		 test	 eax, eax
  00c0f	0f 84 19 03 00
	00		 je	 $LN166@ecpsvm_do_

; 1328 :         {
; 1329 :             DEBUG_CPASSISTX(DISP2,MSGBUF(buf, "DISP2 CPEXBLOK CPEX=%6.6X Fret Failed",F_CPEXB));

  00c15	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  00c1b	c1 e8 02	 shr	 eax, 2
  00c1e	83 e0 01	 and	 eax, 1
  00c21	85 c0		 test	 eax, eax
  00c23	74 1d		 je	 SHORT $LN167@ecpsvm_do_
  00c25	44 8b 4d 18	 mov	 r9d, DWORD PTR F_CPEXB$[rbp]
  00c29	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170952
  00c30	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  00c35	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00c3c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN167@ecpsvm_do_:

; 1330 :             DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  00c42	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  00c48	c1 e8 02	 shr	 eax, 2
  00c4b	83 e0 01	 and	 eax, 1
  00c4e	85 c0		 test	 eax, eax
  00c50	74 53		 je	 SHORT $LN168@ecpsvm_do_
  00c52	b9 01 00 00 00	 mov	 ecx, 1
  00c57	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c5d	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00c64	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00c69	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170954
  00c70	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c75	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170955
  00c7c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c81	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c86	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c8c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170956
  00c93	ba 32 05 00 00	 mov	 edx, 1330		; 00000532H
  00c98	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170957
  00c9f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN168@ecpsvm_do_:

; 1331 :             regs->GR_L(0)=10;

  00ca5	b8 08 00 00 00	 mov	 eax, 8
  00caa	48 6b c0 00	 imul	 rax, rax, 0
  00cae	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00cb6	c7 84 01 80 02
	00 00 0a 00 00
	00		 mov	 DWORD PTR [rcx+rax+640], 10

; 1332 :             regs->GR_L(1)=F_CPEXB;

  00cc1	b8 08 00 00 00	 mov	 eax, 8
  00cc6	48 6b c0 01	 imul	 rax, rax, 1
  00cca	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00cd2	8b 55 18	 mov	 edx, DWORD PTR F_CPEXB$[rbp]
  00cd5	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 1333 :             for(i=2;i<12;i++)

  00cdc	c7 45 08 02 00
	00 00		 mov	 DWORD PTR i$[rbp], 2
  00ce3	eb 08		 jmp	 SHORT $LN28@ecpsvm_do_
$LN26@ecpsvm_do_:
  00ce5	8b 45 08	 mov	 eax, DWORD PTR i$[rbp]
  00ce8	ff c0		 inc	 eax
  00cea	89 45 08	 mov	 DWORD PTR i$[rbp], eax
$LN28@ecpsvm_do_:
  00ced	83 7d 08 0c	 cmp	 DWORD PTR i$[rbp], 12
  00cf1	7d 20		 jge	 SHORT $LN27@ecpsvm_do_

; 1334 :             {
; 1335 :                 regs->GR_L(i)=CPEXBKUP[i];

  00cf3	48 63 45 08	 movsxd	 rax, DWORD PTR i$[rbp]
  00cf7	48 63 4d 08	 movsxd	 rcx, DWORD PTR i$[rbp]
  00cfb	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00d03	8b 84 85 80 c2
	02 00		 mov	 eax, DWORD PTR CPEXBKUP$[rbp+rax*4]
  00d0a	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 1336 :             }

  00d11	eb d2		 jmp	 SHORT $LN26@ecpsvm_do_
$LN27@ecpsvm_do_:

; 1337 :             /* Save GPRS 12-1 (wraping) in DSPSAVE (datalist +40) */
; 1338 :             /* So that LM 12,1,DSPSAVE in DMKDSP works after call to DMKFRET */
; 1339 :             /* 2017-01-27 Fix order of EVM_ST operands to prevent stg overlays */
; 1340 :             EVM_ST(CPEXBKUP[12],dl+40);

  00d13	8b 84 24 b8 c7
	02 00		 mov	 eax, DWORD PTR dl$[rsp]
  00d1a	83 c0 28	 add	 eax, 40			; 00000028H
  00d1d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00d22	b9 04 00 00 00	 mov	 ecx, 4
  00d27	48 6b c9 0c	 imul	 rcx, rcx, 12
  00d2b	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00d33	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00d39	8b d0		 mov	 edx, eax
  00d3b	8b 8c 0d 80 c2
	02 00		 mov	 ecx, DWORD PTR CPEXBKUP$[rbp+rcx]
  00d42	e8 00 00 00 00	 call	 s370_vstore4

; 1341 :             EVM_ST(CPEXBKUP[13],dl+44);

  00d47	8b 84 24 b8 c7
	02 00		 mov	 eax, DWORD PTR dl$[rsp]
  00d4e	83 c0 2c	 add	 eax, 44			; 0000002cH
  00d51	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00d56	b9 04 00 00 00	 mov	 ecx, 4
  00d5b	48 6b c9 0d	 imul	 rcx, rcx, 13
  00d5f	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00d67	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00d6d	8b d0		 mov	 edx, eax
  00d6f	8b 8c 0d 80 c2
	02 00		 mov	 ecx, DWORD PTR CPEXBKUP$[rbp+rcx]
  00d76	e8 00 00 00 00	 call	 s370_vstore4

; 1342 :             EVM_ST(CPEXBKUP[14],dl+48);

  00d7b	8b 84 24 b8 c7
	02 00		 mov	 eax, DWORD PTR dl$[rsp]
  00d82	83 c0 30	 add	 eax, 48			; 00000030H
  00d85	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00d8a	b9 04 00 00 00	 mov	 ecx, 4
  00d8f	48 6b c9 0e	 imul	 rcx, rcx, 14
  00d93	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00d9b	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00da1	8b d0		 mov	 edx, eax
  00da3	8b 8c 0d 80 c2
	02 00		 mov	 ecx, DWORD PTR CPEXBKUP$[rbp+rcx]
  00daa	e8 00 00 00 00	 call	 s370_vstore4

; 1343 :             EVM_ST(EVM_L(F_CPEXB+12),dl+52); /* DSPSAVE + 12 = CPEXADD */

  00daf	8b 84 24 b8 c7
	02 00		 mov	 eax, DWORD PTR dl$[rsp]
  00db6	83 c0 34	 add	 eax, 52			; 00000034H
  00db9	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00dbe	89 85 b8 00 00
	00		 mov	 DWORD PTR tv618[rbp], eax
  00dc4	8b 4d 18	 mov	 ecx, DWORD PTR F_CPEXB$[rbp]
  00dc7	83 c1 0c	 add	 ecx, 12
  00dca	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  00dd0	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00dd8	ba fe ff ff ff	 mov	 edx, -2
  00ddd	e8 00 00 00 00	 call	 s370_vfetch4
  00de2	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00dea	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00df0	8b 8d b8 00 00
	00		 mov	 ecx, DWORD PTR tv618[rbp]
  00df6	8b d1		 mov	 edx, ecx
  00df8	8b c8		 mov	 ecx, eax
  00dfa	e8 00 00 00 00	 call	 s370_vstore4

; 1344 :             EVM_ST(CPEXBKUP[0],dl+56);

  00dff	8b 84 24 b8 c7
	02 00		 mov	 eax, DWORD PTR dl$[rsp]
  00e06	83 c0 38	 add	 eax, 56			; 00000038H
  00e09	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00e0e	b9 04 00 00 00	 mov	 ecx, 4
  00e13	48 6b c9 00	 imul	 rcx, rcx, 0
  00e17	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00e1f	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00e25	8b d0		 mov	 edx, eax
  00e27	8b 8c 0d 80 c2
	02 00		 mov	 ecx, DWORD PTR CPEXBKUP$[rbp+rcx]
  00e2e	e8 00 00 00 00	 call	 s370_vstore4

; 1345 :             EVM_ST(CPEXBKUP[1],dl+60);  /* Note : DMKDSP Is wrong -  SCHMASK is at +64 (not +60) */

  00e33	8b 84 24 b8 c7
	02 00		 mov	 eax, DWORD PTR dl$[rsp]
  00e3a	83 c0 3c	 add	 eax, 60			; 0000003cH
  00e3d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00e42	b9 04 00 00 00	 mov	 ecx, 4
  00e47	48 6b c9 01	 imul	 rcx, rcx, 1
  00e4b	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00e53	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00e59	8b d0		 mov	 edx, eax
  00e5b	8b 8c 0d 80 c2
	02 00		 mov	 ecx, DWORD PTR CPEXBKUP$[rbp+rcx]
  00e62	e8 00 00 00 00	 call	 s370_vstore4
$LN31@ecpsvm_do_:

; 1346 :             /* End of 2017-01-27 */
; 1347 : 
; 1348 :             /* Upon taking this exit, GPRS 12-15 are same as entry */
; 1349 :             SET_PSW_IA_AND_MAYBE_IP(regs, EVM_L(el+12));

  00e67	8b 84 24 c0 c7
	02 00		 mov	 eax, DWORD PTR el$[rsp]
  00e6e	83 c0 0c	 add	 eax, 12
  00e71	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00e76	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00e7e	ba fe ff ff ff	 mov	 edx, -2
  00e83	8b c8		 mov	 ecx, eax
  00e85	e8 00 00 00 00	 call	 s370_vfetch4
  00e8a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00e8f	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00e97	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00e9d	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00ea5	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00ead	74 6e		 je	 SHORT $LN169@ecpsvm_do_
  00eaf	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00eb7	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00ebd	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00ec2	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00eca	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00ed0	75 38		 jne	 SHORT $LN170@ecpsvm_do_
  00ed2	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00eda	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00ee0	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00ee5	8b c0		 mov	 eax, eax
  00ee7	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00eef	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00ef6	48 0b c8	 or	 rcx, rax
  00ef9	48 8b c1	 mov	 rax, rcx
  00efc	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00f04	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00f08	eb 13		 jmp	 SHORT $LN171@ecpsvm_do_
$LN170@ecpsvm_do_:
  00f0a	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00f12	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN171@ecpsvm_do_:
$LN169@ecpsvm_do_:
  00f1d	33 c0		 xor	 eax, eax
  00f1f	85 c0		 test	 eax, eax
  00f21	0f 85 40 ff ff
	ff		 jne	 $LN31@ecpsvm_do_

; 1350 :             return(0);

  00f27	33 c0		 xor	 eax, eax
  00f29	e9 1d 2f 00 00	 jmp	 $LN1@ecpsvm_do_
$LN166@ecpsvm_do_:

; 1351 :         }
; 1352 :         for(i=0;i<15;i++)

  00f2e	c7 45 08 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00f35	eb 08		 jmp	 SHORT $LN34@ecpsvm_do_
$LN32@ecpsvm_do_:
  00f37	8b 45 08	 mov	 eax, DWORD PTR i$[rbp]
  00f3a	ff c0		 inc	 eax
  00f3c	89 45 08	 mov	 DWORD PTR i$[rbp], eax
$LN34@ecpsvm_do_:
  00f3f	83 7d 08 0f	 cmp	 DWORD PTR i$[rbp], 15
  00f43	7d 20		 jge	 SHORT $LN33@ecpsvm_do_

; 1353 :         {
; 1354 :             regs->GR_L(i)=CPEXBKUP[i];

  00f45	48 63 45 08	 movsxd	 rax, DWORD PTR i$[rbp]
  00f49	48 63 4d 08	 movsxd	 rcx, DWORD PTR i$[rbp]
  00f4d	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00f55	8b 84 85 80 c2
	02 00		 mov	 eax, DWORD PTR CPEXBKUP$[rbp+rax*4]
  00f5c	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 1355 :         }

  00f63	eb d2		 jmp	 SHORT $LN32@ecpsvm_do_
$LN33@ecpsvm_do_:

; 1356 :         regs->GR_L(15)=F_CPEXADD;

  00f65	b8 08 00 00 00	 mov	 eax, 8
  00f6a	48 6b c0 0f	 imul	 rax, rax, 15
  00f6e	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00f76	8b 55 50	 mov	 edx, DWORD PTR F_CPEXADD$[rbp]
  00f79	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
$LN37@ecpsvm_do_:

; 1357 :         SET_PSW_IA_AND_MAYBE_IP(regs, F_CPEXADD);

  00f80	8b 45 50	 mov	 eax, DWORD PTR F_CPEXADD$[rbp]
  00f83	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00f88	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00f90	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00f96	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00f9e	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00fa6	74 6e		 je	 SHORT $LN172@ecpsvm_do_
  00fa8	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00fb0	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00fb6	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00fbb	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00fc3	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00fc9	75 38		 jne	 SHORT $LN173@ecpsvm_do_
  00fcb	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00fd3	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00fd9	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00fde	8b c0		 mov	 eax, eax
  00fe0	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00fe8	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00fef	48 0b c8	 or	 rcx, rax
  00ff2	48 8b c1	 mov	 rax, rcx
  00ff5	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00ffd	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  01001	eb 13		 jmp	 SHORT $LN174@ecpsvm_do_
$LN173@ecpsvm_do_:
  01003	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0100b	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN174@ecpsvm_do_:
$LN172@ecpsvm_do_:
  01016	33 c0		 xor	 eax, eax
  01018	85 c0		 test	 eax, eax
  0101a	0f 85 60 ff ff
	ff		 jne	 $LN37@ecpsvm_do_

; 1358 :         DEBUG_CPASSISTX(DISP2,MSGBUF(buf, "DISP2 CPEXBLOK CPEX=%6.6X IA=%6.6X",F_CPEXB,F_CPEXADD));

  01020	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  01026	c1 e8 02	 shr	 eax, 2
  01029	83 e0 01	 and	 eax, 1
  0102c	85 c0		 test	 eax, eax
  0102e	74 24		 je	 SHORT $LN175@ecpsvm_do_
  01030	8b 45 50	 mov	 eax, DWORD PTR F_CPEXADD$[rbp]
  01033	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  01037	44 8b 4d 18	 mov	 r9d, DWORD PTR F_CPEXB$[rbp]
  0103b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170965
  01042	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  01047	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0104e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN175@ecpsvm_do_:

; 1359 :         DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  01054	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  0105a	c1 e8 02	 shr	 eax, 2
  0105d	83 e0 01	 and	 eax, 1
  01060	85 c0		 test	 eax, eax
  01062	74 53		 je	 SHORT $LN176@ecpsvm_do_
  01064	b9 01 00 00 00	 mov	 ecx, 1
  01069	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0106f	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  01076	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0107b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170967
  01082	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170968
  0108e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01093	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01098	41 b9 03 00 00
	00		 mov	 r9d, 3
  0109e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170969
  010a5	ba 4f 05 00 00	 mov	 edx, 1359		; 0000054fH
  010aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170970
  010b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN176@ecpsvm_do_:

; 1360 :         return(0);  /* CPEXBLOCK Branch taken */

  010b7	33 c0		 xor	 eax, eax
  010b9	e9 8d 2d 00 00	 jmp	 $LN1@ecpsvm_do_
$LN159@ecpsvm_do_:

; 1361 :     }
; 1362 :     /* Check for a USER run */
; 1363 :     /* AT DMKDSP - DONE */
; 1364 :     if(EVM_IC(CPSTAT2) & CPSHRLK)

  010be	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  010c6	ba fe ff ff ff	 mov	 edx, -2
  010cb	b9 4a 03 00 00	 mov	 ecx, 842		; 0000034aH
  010d0	e8 00 00 00 00	 call	 s370_vfetchb
  010d5	0f b6 c0	 movzx	 eax, al
  010d8	83 e0 20	 and	 eax, 32			; 00000020H
  010db	85 c0		 test	 eax, eax
  010dd	0f 84 2a 01 00
	00		 je	 $LN177@ecpsvm_do_

; 1365 :     {
; 1366 :         DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", "DISP2 Exit 24 : CPSHRLK Set in CPSTAT2"));

  010e3	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  010e9	c1 e8 02	 shr	 eax, 2
  010ec	83 e0 01	 and	 eax, 1
  010ef	85 c0		 test	 eax, eax
  010f1	74 53		 je	 SHORT $LN178@ecpsvm_do_
  010f3	b9 01 00 00 00	 mov	 ecx, 1
  010f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  010fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170973
  01105	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0110a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170974
  01111	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01116	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170975
  0111d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01122	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01127	41 b9 03 00 00
	00		 mov	 r9d, 3
  0112d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170976
  01134	ba 56 05 00 00	 mov	 edx, 1366		; 00000556H
  01139	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170977
  01140	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN178@ecpsvm_do_:
$LN40@ecpsvm_do_:

; 1367 :         SET_PSW_IA_AND_MAYBE_IP(regs, EVM_L(el+24));  /* IDLEECPS */

  01146	8b 84 24 c0 c7
	02 00		 mov	 eax, DWORD PTR el$[rsp]
  0114d	83 c0 18	 add	 eax, 24
  01150	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01155	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  0115d	ba fe ff ff ff	 mov	 edx, -2
  01162	8b c8		 mov	 ecx, eax
  01164	e8 00 00 00 00	 call	 s370_vfetch4
  01169	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0116e	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01176	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  0117c	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  01184	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  0118c	74 6e		 je	 SHORT $LN179@ecpsvm_do_
  0118e	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  01196	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0119c	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  011a1	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  011a9	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  011af	75 38		 jne	 SHORT $LN180@ecpsvm_do_
  011b1	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  011b9	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  011bf	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  011c4	8b c0		 mov	 eax, eax
  011c6	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  011ce	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  011d5	48 0b c8	 or	 rcx, rax
  011d8	48 8b c1	 mov	 rax, rcx
  011db	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  011e3	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  011e7	eb 13		 jmp	 SHORT $LN181@ecpsvm_do_
$LN180@ecpsvm_do_:
  011e9	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  011f1	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN181@ecpsvm_do_:
$LN179@ecpsvm_do_:
  011fc	33 c0		 xor	 eax, eax
  011fe	85 c0		 test	 eax, eax
  01200	0f 85 40 ff ff
	ff		 jne	 $LN40@ecpsvm_do_

; 1368 :         return(0);

  01206	33 c0		 xor	 eax, eax
  01208	e9 3e 2c 00 00	 jmp	 $LN1@ecpsvm_do_
$LN177@ecpsvm_do_:

; 1369 :     }
; 1370 :     /* Scan Scheduler IN-Q */
; 1371 :     DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", "DISP2 : Scanning Scheduler IN-Queue"));

  0120d	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  01213	c1 e8 02	 shr	 eax, 2
  01216	83 e0 01	 and	 eax, 1
  01219	85 c0		 test	 eax, eax
  0121b	74 53		 je	 SHORT $LN182@ecpsvm_do_
  0121d	b9 01 00 00 00	 mov	 ecx, 1
  01222	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01228	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170982
  0122f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01234	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170983
  0123b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01240	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170984
  01247	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0124c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01251	41 b9 03 00 00
	00		 mov	 r9d, 3
  01257	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170985
  0125e	ba 5b 05 00 00	 mov	 edx, 1371		; 0000055bH
  01263	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170986
  0126a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN182@ecpsvm_do_:

; 1372 :     FW1=EVM_L(dl+24);

  01270	8b 84 24 b8 c7
	02 00		 mov	 eax, DWORD PTR dl$[rsp]
  01277	83 c0 18	 add	 eax, 24
  0127a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0127f	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  01287	ba fe ff ff ff	 mov	 edx, -2
  0128c	8b c8		 mov	 ecx, eax
  0128e	e8 00 00 00 00	 call	 s370_vfetch4
  01293	89 45 20	 mov	 DWORD PTR FW1$[rbp], eax

; 1373 :     for(vmb=EVM_L(FW1);vmb!=FW1;vmb=EVM_L(vmb))

  01296	8b 45 20	 mov	 eax, DWORD PTR FW1$[rbp]
  01299	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0129e	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  012a6	ba fe ff ff ff	 mov	 edx, -2
  012ab	8b c8		 mov	 ecx, eax
  012ad	e8 00 00 00 00	 call	 s370_vfetch4
  012b2	89 45 00	 mov	 DWORD PTR vmb$[rbp], eax
  012b5	eb 1f		 jmp	 SHORT $LN43@ecpsvm_do_
$LN41@ecpsvm_do_:
  012b7	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  012ba	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  012bf	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  012c7	ba fe ff ff ff	 mov	 edx, -2
  012cc	8b c8		 mov	 ecx, eax
  012ce	e8 00 00 00 00	 call	 s370_vfetch4
  012d3	89 45 00	 mov	 DWORD PTR vmb$[rbp], eax
$LN43@ecpsvm_do_:
  012d6	8b 45 20	 mov	 eax, DWORD PTR FW1$[rbp]
  012d9	39 45 00	 cmp	 DWORD PTR vmb$[rbp], eax
  012dc	0f 84 44 2a 00
	00		 je	 $LN42@ecpsvm_do_

; 1374 :     {
; 1375 :         /* 2017-02-04 Check for V PSW wait */
; 1376 :         if(EVM_LH(vmb+VMPSW) & 0x0002)

  012e2	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  012e5	05 a8 00 00 00	 add	 eax, 168		; 000000a8H
  012ea	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  012ef	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  012f7	ba fe ff ff ff	 mov	 edx, -2
  012fc	8b c8		 mov	 ecx, eax
  012fe	e8 00 00 00 00	 call	 s370_vfetch2
  01303	0f b7 c0	 movzx	 eax, ax
  01306	83 e0 02	 and	 eax, 2
  01309	85 c0		 test	 eax, eax
  0130b	0f 84 95 00 00
	00		 je	 $LN183@ecpsvm_do_

; 1377 :         {
; 1378 :             DEBUG_CPASSISTX(DISP2,MSGBUF(buf, "DISP2 : VMB @ %6.6X Not eligible : User in virtual PSW wait",vmb));

  01311	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  01317	c1 e8 02	 shr	 eax, 2
  0131a	83 e0 01	 and	 eax, 1
  0131d	85 c0		 test	 eax, eax
  0131f	74 1d		 je	 SHORT $LN184@ecpsvm_do_
  01321	44 8b 4d 00	 mov	 r9d, DWORD PTR vmb$[rbp]
  01325	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170989
  0132c	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  01331	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  01338	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN184@ecpsvm_do_:

; 1379 :             DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  0133e	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  01344	c1 e8 02	 shr	 eax, 2
  01347	83 e0 01	 and	 eax, 1
  0134a	85 c0		 test	 eax, eax
  0134c	74 53		 je	 SHORT $LN185@ecpsvm_do_
  0134e	b9 01 00 00 00	 mov	 ecx, 1
  01353	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01359	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  01360	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01365	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170991
  0136c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01371	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170992
  01378	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0137d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01382	41 b9 03 00 00
	00		 mov	 r9d, 3
  01388	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170993
  0138f	ba 63 05 00 00	 mov	 edx, 1379		; 00000563H
  01394	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170994
  0139b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN185@ecpsvm_do_:

; 1380 :             continue;

  013a1	e9 11 ff ff ff	 jmp	 $LN41@ecpsvm_do_
$LN183@ecpsvm_do_:

; 1381 :         }
; 1382 :         /* end of 2017-02-04 */
; 1383 : 
; 1384 :         if(!(EVM_IC(vmb+VMDSTAT) & VMRUN))

  013a6	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  013a9	83 c0 59	 add	 eax, 89			; 00000059H
  013ac	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  013b1	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  013b9	ba fe ff ff ff	 mov	 edx, -2
  013be	8b c8		 mov	 ecx, eax
  013c0	e8 00 00 00 00	 call	 s370_vfetchb
  013c5	0f b6 c0	 movzx	 eax, al
  013c8	83 e0 08	 and	 eax, 8
  013cb	85 c0		 test	 eax, eax
  013cd	0f 85 95 00 00
	00		 jne	 $LN186@ecpsvm_do_

; 1385 :         {
; 1386 :             DEBUG_CPASSISTX(DISP2,MSGBUF(buf, "DISP2 : VMB @ %6.6X Not eligible : VMRUN not set",vmb));

  013d3	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  013d9	c1 e8 02	 shr	 eax, 2
  013dc	83 e0 01	 and	 eax, 1
  013df	85 c0		 test	 eax, eax
  013e1	74 1d		 je	 SHORT $LN187@ecpsvm_do_
  013e3	44 8b 4d 00	 mov	 r9d, DWORD PTR vmb$[rbp]
  013e7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170997
  013ee	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  013f3	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  013fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN187@ecpsvm_do_:

; 1387 :             DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  01400	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  01406	c1 e8 02	 shr	 eax, 2
  01409	83 e0 01	 and	 eax, 1
  0140c	85 c0		 test	 eax, eax
  0140e	74 53		 je	 SHORT $LN188@ecpsvm_do_
  01410	b9 01 00 00 00	 mov	 ecx, 1
  01415	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0141b	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  01422	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01427	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170999
  0142e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01433	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171000
  0143a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0143f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01444	41 b9 03 00 00
	00		 mov	 r9d, 3
  0144a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171001
  01451	ba 6b 05 00 00	 mov	 edx, 1387		; 0000056bH
  01456	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171002
  0145d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN188@ecpsvm_do_:

; 1388 :             continue;

  01463	e9 4f fe ff ff	 jmp	 $LN41@ecpsvm_do_
$LN186@ecpsvm_do_:

; 1389 :         }
; 1390 :         if(EVM_IC(vmb+VMRSTAT) & VMCPWAIT)

  01468	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  0146b	83 c0 58	 add	 eax, 88			; 00000058H
  0146e	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01473	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  0147b	ba fe ff ff ff	 mov	 edx, -2
  01480	8b c8		 mov	 ecx, eax
  01482	e8 00 00 00 00	 call	 s370_vfetchb
  01487	0f b6 c0	 movzx	 eax, al
  0148a	25 ee 00 00 00	 and	 eax, 238		; 000000eeH
  0148f	85 c0		 test	 eax, eax
  01491	0f 84 95 00 00
	00		 je	 $LN189@ecpsvm_do_

; 1391 :         {
; 1392 :             DEBUG_CPASSISTX(DISP2,MSGBUF(buf, "DISP2 : VMB @ %6.6X Not eligible : VMCPWAIT set",vmb));

  01497	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  0149d	c1 e8 02	 shr	 eax, 2
  014a0	83 e0 01	 and	 eax, 1
  014a3	85 c0		 test	 eax, eax
  014a5	74 1d		 je	 SHORT $LN190@ecpsvm_do_
  014a7	44 8b 4d 00	 mov	 r9d, DWORD PTR vmb$[rbp]
  014ab	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171005
  014b2	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  014b7	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  014be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN190@ecpsvm_do_:

; 1393 :             DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  014c4	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  014ca	c1 e8 02	 shr	 eax, 2
  014cd	83 e0 01	 and	 eax, 1
  014d0	85 c0		 test	 eax, eax
  014d2	74 53		 je	 SHORT $LN191@ecpsvm_do_
  014d4	b9 01 00 00 00	 mov	 ecx, 1
  014d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  014df	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  014e6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  014eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171007
  014f2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  014f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171008
  014fe	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01503	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01508	41 b9 03 00 00
	00		 mov	 r9d, 3
  0150e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171009
  01515	ba 71 05 00 00	 mov	 edx, 1393		; 00000571H
  0151a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171010
  01521	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN191@ecpsvm_do_:

; 1394 :             continue;

  01527	e9 8b fd ff ff	 jmp	 $LN41@ecpsvm_do_
$LN189@ecpsvm_do_:

; 1395 :         }
; 1396 :         if(EVM_IC(vmb+VMNOECPS))

  0152c	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  0152f	05 a7 01 00 00	 add	 eax, 423		; 000001a7H
  01534	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01539	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  01541	ba fe ff ff ff	 mov	 edx, -2
  01546	8b c8		 mov	 ecx, eax
  01548	e8 00 00 00 00	 call	 s370_vfetchb
  0154d	0f b6 c0	 movzx	 eax, al
  01550	85 c0		 test	 eax, eax
  01552	0f 84 c9 01 00
	00		 je	 $LN192@ecpsvm_do_

; 1397 :         {
; 1398 :             DEBUG_CPASSISTX(DISP2,MSGBUF(buf, "DISP2 : Exit 20 : VMB @ %6.6X Has VMNOECPS Set to %2.2X",vmb,EVM_IC(vmb+VMNOECPS)));

  01558	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  0155e	c1 e8 02	 shr	 eax, 2
  01561	83 e0 01	 and	 eax, 1
  01564	85 c0		 test	 eax, eax
  01566	74 45		 je	 SHORT $LN193@ecpsvm_do_
  01568	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  0156b	05 a7 01 00 00	 add	 eax, 423		; 000001a7H
  01570	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01575	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  0157d	ba fe ff ff ff	 mov	 edx, -2
  01582	8b c8		 mov	 ecx, eax
  01584	e8 00 00 00 00	 call	 s370_vfetchb
  01589	0f b6 c0	 movzx	 eax, al
  0158c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  01590	44 8b 4d 00	 mov	 r9d, DWORD PTR vmb$[rbp]
  01594	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171013
  0159b	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  015a0	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  015a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN193@ecpsvm_do_:

; 1399 :             DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  015ad	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  015b3	c1 e8 02	 shr	 eax, 2
  015b6	83 e0 01	 and	 eax, 1
  015b9	85 c0		 test	 eax, eax
  015bb	74 53		 je	 SHORT $LN194@ecpsvm_do_
  015bd	b9 01 00 00 00	 mov	 ecx, 1
  015c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  015c8	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  015cf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  015d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171015
  015db	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  015e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171016
  015e7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  015ec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  015f1	41 b9 03 00 00
	00		 mov	 r9d, 3
  015f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171017
  015fe	ba 77 05 00 00	 mov	 edx, 1399		; 00000577H
  01603	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171018
  0160a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN194@ecpsvm_do_:

; 1400 :             regs->GR_L(1)=vmb;

  01610	b8 08 00 00 00	 mov	 eax, 8
  01615	48 6b c0 01	 imul	 rax, rax, 1
  01619	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01621	8b 55 00	 mov	 edx, DWORD PTR vmb$[rbp]
  01624	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 1401 :             regs->GR_L(11)=EVM_L(ASYSVM);

  0162b	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  01633	ba fe ff ff ff	 mov	 edx, -2
  01638	b9 7c 03 00 00	 mov	 ecx, 892		; 0000037cH
  0163d	e8 00 00 00 00	 call	 s370_vfetch4
  01642	b9 08 00 00 00	 mov	 ecx, 8
  01647	48 6b c9 0b	 imul	 rcx, rcx, 11
  0164b	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  01653	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax
$LN46@ecpsvm_do_:

; 1402 :             SET_PSW_IA_AND_MAYBE_IP(regs, EVM_L(el+20));  /* FREELOCK */

  0165a	8b 84 24 c0 c7
	02 00		 mov	 eax, DWORD PTR el$[rsp]
  01661	83 c0 14	 add	 eax, 20
  01664	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01669	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  01671	ba fe ff ff ff	 mov	 edx, -2
  01676	8b c8		 mov	 ecx, eax
  01678	e8 00 00 00 00	 call	 s370_vfetch4
  0167d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01682	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0168a	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  01690	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  01698	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  016a0	74 6e		 je	 SHORT $LN195@ecpsvm_do_
  016a2	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  016aa	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  016b0	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  016b5	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  016bd	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  016c3	75 38		 jne	 SHORT $LN196@ecpsvm_do_
  016c5	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  016cd	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  016d3	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  016d8	8b c0		 mov	 eax, eax
  016da	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  016e2	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  016e9	48 0b c8	 or	 rcx, rax
  016ec	48 8b c1	 mov	 rax, rcx
  016ef	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  016f7	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  016fb	eb 13		 jmp	 SHORT $LN197@ecpsvm_do_
$LN196@ecpsvm_do_:
  016fd	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  01705	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN197@ecpsvm_do_:
$LN195@ecpsvm_do_:
  01710	33 c0		 xor	 eax, eax
  01712	85 c0		 test	 eax, eax
  01714	0f 85 40 ff ff
	ff		 jne	 $LN46@ecpsvm_do_

; 1403 :             return(0);

  0171a	33 c0		 xor	 eax, eax
  0171c	e9 2a 27 00 00	 jmp	 $LN1@ecpsvm_do_
$LN192@ecpsvm_do_:

; 1404 :         }
; 1405 :         DEBUG_CPASSISTX(DISP2,MSGBUF(buf, "DISP2 : VMB @ %6.6X Will now be dispatched",vmb));

  01721	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  01727	c1 e8 02	 shr	 eax, 2
  0172a	83 e0 01	 and	 eax, 1
  0172d	85 c0		 test	 eax, eax
  0172f	74 1d		 je	 SHORT $LN198@ecpsvm_do_
  01731	44 8b 4d 00	 mov	 r9d, DWORD PTR vmb$[rbp]
  01735	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171023
  0173c	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  01741	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  01748	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN198@ecpsvm_do_:

; 1406 :         DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  0174e	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  01754	c1 e8 02	 shr	 eax, 2
  01757	83 e0 01	 and	 eax, 1
  0175a	85 c0		 test	 eax, eax
  0175c	74 53		 je	 SHORT $LN199@ecpsvm_do_
  0175e	b9 01 00 00 00	 mov	 ecx, 1
  01763	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01769	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  01770	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01775	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171025
  0177c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01781	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171026
  01788	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0178d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01792	41 b9 03 00 00
	00		 mov	 r9d, 3
  01798	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171027
  0179f	ba 7e 05 00 00	 mov	 edx, 1406		; 0000057eH
  017a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171028
  017ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN199@ecpsvm_do_:

; 1407 :         runu=EVM_L(RUNUSER);

  017b1	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  017b9	ba fe ff ff ff	 mov	 edx, -2
  017be	b9 38 03 00 00	 mov	 ecx, 824		; 00000338H
  017c3	e8 00 00 00 00	 call	 s370_vfetch4
  017c8	89 45 28	 mov	 DWORD PTR runu$[rbp], eax

; 1408 :         F_QUANTUM=EVM_L(QUANTUM);

  017cb	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  017d3	ba fe ff ff ff	 mov	 edx, -2
  017d8	b9 54 00 00 00	 mov	 ecx, 84			; 00000054H
  017dd	e8 00 00 00 00	 call	 s370_vfetch4
  017e2	89 45 40	 mov	 DWORD PTR F_QUANTUM$[rbp], eax

; 1409 :         if(vmb!=runu)

  017e5	8b 45 28	 mov	 eax, DWORD PTR runu$[rbp]
  017e8	39 45 00	 cmp	 DWORD PTR vmb$[rbp], eax
  017eb	0f 84 69 04 00
	00		 je	 $LN200@ecpsvm_do_

; 1410 :         {
; 1411 :             /* User switching */
; 1412 :             /* DMKDSP - FNDUSRD */
; 1413 :             DEBUG_CPASSISTX(DISP2,MSGBUF(buf, "DISP2 : User switch from %6.6X to %6.6X",runu,vmb));

  017f1	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  017f7	c1 e8 02	 shr	 eax, 2
  017fa	83 e0 01	 and	 eax, 1
  017fd	85 c0		 test	 eax, eax
  017ff	74 24		 je	 SHORT $LN201@ecpsvm_do_
  01801	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  01804	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  01808	44 8b 4d 28	 mov	 r9d, DWORD PTR runu$[rbp]
  0180c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171031
  01813	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  01818	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0181f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN201@ecpsvm_do_:

; 1414 :             DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  01825	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  0182b	c1 e8 02	 shr	 eax, 2
  0182e	83 e0 01	 and	 eax, 1
  01831	85 c0		 test	 eax, eax
  01833	74 53		 je	 SHORT $LN202@ecpsvm_do_
  01835	b9 01 00 00 00	 mov	 ecx, 1
  0183a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01840	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  01847	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0184c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171033
  01853	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01858	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171034
  0185f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01864	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01869	41 b9 03 00 00
	00		 mov	 r9d, 3
  0186f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171035
  01876	ba 86 05 00 00	 mov	 edx, 1414		; 00000586H
  0187b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171036
  01882	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN202@ecpsvm_do_:

; 1415 :             runu=EVM_L(RUNUSER);

  01888	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  01890	ba fe ff ff ff	 mov	 edx, -2
  01895	b9 38 03 00 00	 mov	 ecx, 824		; 00000338H
  0189a	e8 00 00 00 00	 call	 s370_vfetch4
  0189f	89 45 28	 mov	 DWORD PTR runu$[rbp], eax

; 1416 :             EVM_STC(EVM_IC(runu+VMDSTAT) & ~VMDSP,runu+VMDSTAT);

  018a2	8b 45 28	 mov	 eax, DWORD PTR runu$[rbp]
  018a5	83 c0 59	 add	 eax, 89			; 00000059H
  018a8	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  018ad	89 85 bc 00 00
	00		 mov	 DWORD PTR tv1034[rbp], eax
  018b3	8b 4d 28	 mov	 ecx, DWORD PTR runu$[rbp]
  018b6	83 c1 59	 add	 ecx, 89			; 00000059H
  018b9	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  018bf	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  018c7	ba fe ff ff ff	 mov	 edx, -2
  018cc	e8 00 00 00 00	 call	 s370_vfetchb
  018d1	0f b6 c0	 movzx	 eax, al
  018d4	0f ba f0 07	 btr	 eax, 7
  018d8	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  018e0	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  018e6	8b 8d bc 00 00
	00		 mov	 ecx, DWORD PTR tv1034[rbp]
  018ec	8b d1		 mov	 edx, ecx
  018ee	0f b6 c8	 movzx	 ecx, al
  018f1	e8 00 00 00 00	 call	 s370_vstoreb

; 1417 :             lastu=EVM_L(LASTUSER);

  018f6	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  018fe	ba fe ff ff ff	 mov	 edx, -2
  01903	b9 ec 03 00 00	 mov	 ecx, 1004		; 000003ecH
  01908	e8 00 00 00 00	 call	 s370_vfetch4
  0190d	89 45 30	 mov	 DWORD PTR lastu$[rbp], eax

; 1418 :             DEBUG_CPASSISTX(DISP2,MSGBUF(buf, "DISP2 : RUNU=%6.6X, LASTU=%6.6X",runu,lastu));

  01910	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  01916	c1 e8 02	 shr	 eax, 2
  01919	83 e0 01	 and	 eax, 1
  0191c	85 c0		 test	 eax, eax
  0191e	74 24		 je	 SHORT $LN203@ecpsvm_do_
  01920	8b 45 30	 mov	 eax, DWORD PTR lastu$[rbp]
  01923	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  01927	44 8b 4d 28	 mov	 r9d, DWORD PTR runu$[rbp]
  0192b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171038
  01932	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  01937	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0193e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN203@ecpsvm_do_:

; 1419 :             DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  01944	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  0194a	c1 e8 02	 shr	 eax, 2
  0194d	83 e0 01	 and	 eax, 1
  01950	85 c0		 test	 eax, eax
  01952	74 53		 je	 SHORT $LN204@ecpsvm_do_
  01954	b9 01 00 00 00	 mov	 ecx, 1
  01959	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0195f	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  01966	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0196b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171040
  01972	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01977	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171041
  0197e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01983	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01988	41 b9 03 00 00
	00		 mov	 r9d, 3
  0198e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171042
  01995	ba 8b 05 00 00	 mov	 edx, 1419		; 0000058bH
  0199a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171043
  019a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN204@ecpsvm_do_:

; 1420 :             if(lastu!=svmb && lastu!=vmb)

  019a7	8b 85 c0 00 00
	00		 mov	 eax, DWORD PTR svmb$[rbp]
  019ad	39 45 30	 cmp	 DWORD PTR lastu$[rbp], eax
  019b0	0f 84 a4 02 00
	00		 je	 $LN205@ecpsvm_do_
  019b6	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  019b9	39 45 30	 cmp	 DWORD PTR lastu$[rbp], eax
  019bc	0f 84 98 02 00
	00		 je	 $LN205@ecpsvm_do_

; 1421 :             {
; 1422 :                 if(EVM_IC(lastu+VMOSTAT) & VMSHR)       /* Running shared sys */

  019c2	8b 45 30	 mov	 eax, DWORD PTR lastu$[rbp]
  019c5	83 c0 5a	 add	 eax, 90			; 0000005aH
  019c8	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  019cd	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  019d5	ba fe ff ff ff	 mov	 edx, -2
  019da	8b c8		 mov	 ecx, eax
  019dc	e8 00 00 00 00	 call	 s370_vfetchb
  019e1	0f b6 c0	 movzx	 eax, al
  019e4	83 e0 40	 and	 eax, 64			; 00000040H
  019e7	85 c0		 test	 eax, eax
  019e9	0f 84 6b 02 00
	00		 je	 $LN206@ecpsvm_do_

; 1423 :                 {
; 1424 :                     DEBUG_CPASSISTX(DISP2,MSGBUF(buf, "DISP2 : Exit 16 : LASTU=%6.6X has shared sys & LCSHPG not impl",lastu));

  019ef	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  019f5	c1 e8 02	 shr	 eax, 2
  019f8	83 e0 01	 and	 eax, 1
  019fb	85 c0		 test	 eax, eax
  019fd	74 1d		 je	 SHORT $LN207@ecpsvm_do_
  019ff	44 8b 4d 30	 mov	 r9d, DWORD PTR lastu$[rbp]
  01a03	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171047
  01a0a	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  01a0f	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  01a16	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN207@ecpsvm_do_:

; 1425 :                     DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  01a1c	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  01a22	c1 e8 02	 shr	 eax, 2
  01a25	83 e0 01	 and	 eax, 1
  01a28	85 c0		 test	 eax, eax
  01a2a	74 53		 je	 SHORT $LN208@ecpsvm_do_
  01a2c	b9 01 00 00 00	 mov	 ecx, 1
  01a31	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01a37	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  01a3e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01a43	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171049
  01a4a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01a4f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171050
  01a56	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01a5b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01a60	41 b9 03 00 00
	00		 mov	 r9d, 3
  01a66	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171051
  01a6d	ba 91 05 00 00	 mov	 edx, 1425		; 00000591H
  01a72	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171052
  01a79	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN208@ecpsvm_do_:

; 1426 :                     CHARGE_START(lastu);

  01a7f	8b 45 30	 mov	 eax, DWORD PTR lastu$[rbp]
  01a82	05 80 00 00 00	 add	 eax, 128		; 00000080H
  01a87	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01a8c	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  01a94	ba fe ff ff ff	 mov	 edx, -2
  01a99	8b c8		 mov	 ecx, eax
  01a9b	e8 00 00 00 00	 call	 s370_vfetch8
  01aa0	48 8b d0	 mov	 rdx, rax
  01aa3	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01aab	e8 00 00 00 00	 call	 set_cpu_timer
  01ab0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG171053
  01ab7	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01abf	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock
  01ac4	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01acc	e8 00 00 00 00	 call	 get_cpu_timer
  01ad1	48 85 c0	 test	 rax, rax
  01ad4	7d 53		 jge	 SHORT $LN209@ecpsvm_do_
$LN49@ecpsvm_do_:
  01ad6	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  01ade	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  01ae1	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  01ae6	85 c0		 test	 eax, eax
  01ae8	74 1d		 je	 SHORT $LN211@ecpsvm_do_
  01aea	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  01af2	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01af5	0d 00 04 00 80	 or	 eax, -2147482624	; 80000400H
  01afa	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01b02	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01b05	eb 1a		 jmp	 SHORT $LN212@ecpsvm_do_
$LN211@ecpsvm_do_:
  01b07	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  01b0f	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01b12	0f ba e8 0a	 bts	 eax, 10
  01b16	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01b1e	89 41 48	 mov	 DWORD PTR [rcx+72], eax
$LN212@ecpsvm_do_:
  01b21	33 c0		 xor	 eax, eax
  01b23	85 c0		 test	 eax, eax
  01b25	75 af		 jne	 SHORT $LN49@ecpsvm_do_
  01b27	eb 20		 jmp	 SHORT $LN210@ecpsvm_do_
$LN209@ecpsvm_do_:
$LN52@ecpsvm_do_:
  01b29	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  01b31	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01b34	0f ba f0 0a	 btr	 eax, 10
  01b38	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01b40	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01b43	33 c0		 xor	 eax, eax
  01b45	85 c0		 test	 eax, eax
  01b47	75 e0		 jne	 SHORT $LN52@ecpsvm_do_
$LN210@ecpsvm_do_:
  01b49	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG171058
  01b50	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01b58	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 1427 :                     /* LCSHRPG not implemented yet */
; 1428 :                     regs->GR_L(10)=vmb;

  01b5d	b8 08 00 00 00	 mov	 eax, 8
  01b62	48 6b c0 0a	 imul	 rax, rax, 10
  01b66	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01b6e	8b 55 00	 mov	 edx, DWORD PTR vmb$[rbp]
  01b71	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 1429 :                     regs->GR_L(11)=lastu;

  01b78	b8 08 00 00 00	 mov	 eax, 8
  01b7d	48 6b c0 0b	 imul	 rax, rax, 11
  01b81	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01b89	8b 55 30	 mov	 edx, DWORD PTR lastu$[rbp]
  01b8c	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
$LN55@ecpsvm_do_:

; 1430 :                     SET_PSW_IA_AND_MAYBE_IP(regs, EVM_L(el+16));

  01b93	8b 84 24 c0 c7
	02 00		 mov	 eax, DWORD PTR el$[rsp]
  01b9a	83 c0 10	 add	 eax, 16
  01b9d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01ba2	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  01baa	ba fe ff ff ff	 mov	 edx, -2
  01baf	8b c8		 mov	 ecx, eax
  01bb1	e8 00 00 00 00	 call	 s370_vfetch4
  01bb6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01bbb	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01bc3	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  01bc9	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  01bd1	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  01bd9	74 6e		 je	 SHORT $LN213@ecpsvm_do_
  01bdb	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  01be3	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01be9	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  01bee	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01bf6	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  01bfc	75 38		 jne	 SHORT $LN214@ecpsvm_do_
  01bfe	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  01c06	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01c0c	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  01c11	8b c0		 mov	 eax, eax
  01c13	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01c1b	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  01c22	48 0b c8	 or	 rcx, rax
  01c25	48 8b c1	 mov	 rax, rcx
  01c28	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01c30	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  01c34	eb 13		 jmp	 SHORT $LN215@ecpsvm_do_
$LN214@ecpsvm_do_:
  01c36	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  01c3e	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN215@ecpsvm_do_:
$LN213@ecpsvm_do_:
  01c49	33 c0		 xor	 eax, eax
  01c4b	85 c0		 test	 eax, eax
  01c4d	0f 85 40 ff ff
	ff		 jne	 $LN55@ecpsvm_do_

; 1431 :                     return(0);

  01c53	33 c0		 xor	 eax, eax
  01c55	e9 f1 21 00 00	 jmp	 $LN1@ecpsvm_do_
$LN206@ecpsvm_do_:
$LN205@ecpsvm_do_:
$LN200@ecpsvm_do_:

; 1432 :                     /* A CHARGE_STOP(runu) is due when LCSHRPG is implemented */
; 1433 :                 }
; 1434 :             }
; 1435 :         }
; 1436 :         if(vmb!=runu || (vmb==runu && (F_QUANTUM & 0x80000000)))

  01c5a	8b 45 28	 mov	 eax, DWORD PTR runu$[rbp]
  01c5d	39 45 00	 cmp	 DWORD PTR vmb$[rbp], eax
  01c60	75 1c		 jne	 SHORT $LN217@ecpsvm_do_
  01c62	8b 45 28	 mov	 eax, DWORD PTR runu$[rbp]
  01c65	39 45 00	 cmp	 DWORD PTR vmb$[rbp], eax
  01c68	0f 85 cb 00 00
	00		 jne	 $LN216@ecpsvm_do_
  01c6e	8b 45 40	 mov	 eax, DWORD PTR F_QUANTUM$[rbp]
  01c71	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  01c76	85 c0		 test	 eax, eax
  01c78	0f 84 bb 00 00
	00		 je	 $LN216@ecpsvm_do_
$LN217@ecpsvm_do_:

; 1437 :         {
; 1438 :             DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", "DISP2 : Restarting Time Slice"));

  01c7e	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  01c84	c1 e8 02	 shr	 eax, 2
  01c87	83 e0 01	 and	 eax, 1
  01c8a	85 c0		 test	 eax, eax
  01c8c	74 53		 je	 SHORT $LN218@ecpsvm_do_
  01c8e	b9 01 00 00 00	 mov	 ecx, 1
  01c93	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01c99	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171065
  01ca0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01ca5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171066
  01cac	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01cb1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171067
  01cb8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01cbd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01cc2	41 b9 03 00 00
	00		 mov	 r9d, 3
  01cc8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171068
  01ccf	ba 9e 05 00 00	 mov	 edx, 1438		; 0000059eH
  01cd4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171069
  01cdb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN218@ecpsvm_do_:

; 1439 :             F_QUANTUM=EVM_L(dl+16);

  01ce1	8b 84 24 b8 c7
	02 00		 mov	 eax, DWORD PTR dl$[rsp]
  01ce8	83 c0 10	 add	 eax, 16
  01ceb	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01cf0	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  01cf8	ba fe ff ff ff	 mov	 edx, -2
  01cfd	8b c8		 mov	 ecx, eax
  01cff	e8 00 00 00 00	 call	 s370_vfetch4
  01d04	89 45 40	 mov	 DWORD PTR F_QUANTUM$[rbp], eax

; 1440 :             if(EVM_IC(vmb+VMQLEVEL) & VMCOMP)

  01d07	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  01d0a	83 c0 60	 add	 eax, 96			; 00000060H
  01d0d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01d12	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  01d1a	ba fe ff ff ff	 mov	 edx, -2
  01d1f	8b c8		 mov	 ecx, eax
  01d21	e8 00 00 00 00	 call	 s370_vfetchb
  01d26	0f b6 c0	 movzx	 eax, al
  01d29	83 e0 40	 and	 eax, 64			; 00000040H
  01d2c	85 c0		 test	 eax, eax
  01d2e	74 09		 je	 SHORT $LN219@ecpsvm_do_

; 1441 :             {
; 1442 :                 F_QUANTUM <<= 2;

  01d30	8b 45 40	 mov	 eax, DWORD PTR F_QUANTUM$[rbp]
  01d33	c1 e0 02	 shl	 eax, 2
  01d36	89 45 40	 mov	 DWORD PTR F_QUANTUM$[rbp], eax
$LN219@ecpsvm_do_:
$LN216@ecpsvm_do_:

; 1443 :             }
; 1444 :         }
; 1445 :         EVM_ST(F_QUANTUM,INTTIMER);

  01d39	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  01d41	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  01d47	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  01d4c	8b 4d 40	 mov	 ecx, DWORD PTR F_QUANTUM$[rbp]
  01d4f	e8 00 00 00 00	 call	 s370_vstore4

; 1446 :         CHARGE_START(vmb);

  01d54	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  01d57	05 80 00 00 00	 add	 eax, 128		; 00000080H
  01d5c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01d61	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  01d69	ba fe ff ff ff	 mov	 edx, -2
  01d6e	8b c8		 mov	 ecx, eax
  01d70	e8 00 00 00 00	 call	 s370_vfetch8
  01d75	48 8b d0	 mov	 rdx, rax
  01d78	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01d80	e8 00 00 00 00	 call	 set_cpu_timer
  01d85	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG171071
  01d8c	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01d94	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock
  01d99	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01da1	e8 00 00 00 00	 call	 get_cpu_timer
  01da6	48 85 c0	 test	 rax, rax
  01da9	7d 53		 jge	 SHORT $LN220@ecpsvm_do_
$LN58@ecpsvm_do_:
  01dab	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  01db3	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  01db6	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  01dbb	85 c0		 test	 eax, eax
  01dbd	74 1d		 je	 SHORT $LN222@ecpsvm_do_
  01dbf	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  01dc7	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01dca	0d 00 04 00 80	 or	 eax, -2147482624	; 80000400H
  01dcf	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01dd7	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01dda	eb 1a		 jmp	 SHORT $LN223@ecpsvm_do_
$LN222@ecpsvm_do_:
  01ddc	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  01de4	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01de7	0f ba e8 0a	 bts	 eax, 10
  01deb	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01df3	89 41 48	 mov	 DWORD PTR [rcx+72], eax
$LN223@ecpsvm_do_:
  01df6	33 c0		 xor	 eax, eax
  01df8	85 c0		 test	 eax, eax
  01dfa	75 af		 jne	 SHORT $LN58@ecpsvm_do_
  01dfc	eb 20		 jmp	 SHORT $LN221@ecpsvm_do_
$LN220@ecpsvm_do_:
$LN61@ecpsvm_do_:
  01dfe	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  01e06	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01e09	0f ba f0 0a	 btr	 eax, 10
  01e0d	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01e15	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01e18	33 c0		 xor	 eax, eax
  01e1a	85 c0		 test	 eax, eax
  01e1c	75 e0		 jne	 SHORT $LN61@ecpsvm_do_
$LN221@ecpsvm_do_:
  01e1e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG171076
  01e25	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01e2d	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 1447 :         EVM_ST(vmb,LASTUSER);

  01e32	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  01e3a	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  01e40	ba ec 03 00 00	 mov	 edx, 1004		; 000003ecH
  01e45	8b 4d 00	 mov	 ecx, DWORD PTR vmb$[rbp]
  01e48	e8 00 00 00 00	 call	 s370_vstore4

; 1448 :         EVM_ST(vmb,RUNUSER);

  01e4d	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  01e55	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  01e5b	ba 38 03 00 00	 mov	 edx, 824		; 00000338H
  01e60	8b 4d 00	 mov	 ecx, DWORD PTR vmb$[rbp]
  01e63	e8 00 00 00 00	 call	 s370_vstore4

; 1449 : 
; 1450 :         /***  Prepare to run a user ***/
; 1451 : 
; 1452 :         /* Cache some important VMBLOK flag bytes */
; 1453 :         B_VMDSTAT=EVM_IC(vmb+VMDSTAT);

  01e68	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  01e6b	83 c0 59	 add	 eax, 89			; 00000059H
  01e6e	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01e73	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  01e7b	ba fe ff ff ff	 mov	 edx, -2
  01e80	8b c8		 mov	 ecx, eax
  01e82	e8 00 00 00 00	 call	 s370_vfetchb
  01e87	88 45 0d	 mov	 BYTE PTR B_VMDSTAT$[rbp], al

; 1454 :         B_VMRSTAT=EVM_IC(vmb+VMRSTAT);

  01e8a	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  01e8d	83 c0 58	 add	 eax, 88			; 00000058H
  01e90	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01e95	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  01e9d	ba fe ff ff ff	 mov	 edx, -2
  01ea2	8b c8		 mov	 ecx, eax
  01ea4	e8 00 00 00 00	 call	 s370_vfetchb
  01ea9	88 45 2d	 mov	 BYTE PTR B_VMRSTAT$[rbp], al

; 1455 :         B_VMPSTAT=EVM_IC(vmb+VMPSTAT);

  01eac	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  01eaf	83 c0 5c	 add	 eax, 92			; 0000005cH
  01eb2	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01eb7	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  01ebf	ba fe ff ff ff	 mov	 edx, -2
  01ec4	8b c8		 mov	 ecx, eax
  01ec6	e8 00 00 00 00	 call	 s370_vfetchb
  01ecb	88 45 0c	 mov	 BYTE PTR B_VMPSTAT$[rbp], al

; 1456 :         B_VMESTAT=EVM_IC(vmb+VMESTAT);

  01ece	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  01ed1	83 c0 5d	 add	 eax, 93			; 0000005dH
  01ed4	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01ed9	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  01ee1	ba fe ff ff ff	 mov	 edx, -2
  01ee6	8b c8		 mov	 ecx, eax
  01ee8	e8 00 00 00 00	 call	 s370_vfetchb
  01eed	88 45 06	 mov	 BYTE PTR B_VMESTAT$[rbp], al

; 1457 :         B_VMOSTAT=EVM_IC(vmb+VMOSTAT);

  01ef0	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  01ef3	83 c0 5a	 add	 eax, 90			; 0000005aH
  01ef6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01efb	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  01f03	ba fe ff ff ff	 mov	 edx, -2
  01f08	8b c8		 mov	 ecx, eax
  01f0a	e8 00 00 00 00	 call	 s370_vfetchb
  01f0f	88 45 1c	 mov	 BYTE PTR B_VMOSTAT$[rbp], al

; 1458 :         B_VMPEND =EVM_IC(vmb+VMPEND);

  01f12	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  01f15	83 c0 63	 add	 eax, 99			; 00000063H
  01f18	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01f1d	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  01f25	ba fe ff ff ff	 mov	 edx, -2
  01f2a	8b c8		 mov	 ecx, eax
  01f2c	e8 00 00 00 00	 call	 s370_vfetchb
  01f31	88 45 2c	 mov	 BYTE PTR B_VMPEND$[rbp], al

; 1459 :         B_VMMCR6=EVM_IC(vmb+VMMCR6);

  01f34	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  01f37	05 7c 01 00 00	 add	 eax, 380		; 0000017cH
  01f3c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01f41	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  01f49	ba fe ff ff ff	 mov	 edx, -2
  01f4e	8b c8		 mov	 ecx, eax
  01f50	e8 00 00 00 00	 call	 s370_vfetchb
  01f55	88 45 04	 mov	 BYTE PTR B_VMMCR6$[rbp], al

; 1460 :         F_MICBLOK=EVM_L(vmb+VMMCR6) & ADDRESS_MAXWRAP(regs);

  01f58	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  01f5b	05 7c 01 00 00	 add	 eax, 380		; 0000017cH
  01f60	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01f65	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  01f6d	ba fe ff ff ff	 mov	 edx, -2
  01f72	8b c8		 mov	 ecx, eax
  01f74	e8 00 00 00 00	 call	 s370_vfetch4
  01f79	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01f7e	89 45 68	 mov	 DWORD PTR F_MICBLOK$[rbp], eax

; 1461 : 
; 1462 :         /* LOAD FPRS */
; 1463 :         regs->fpr[0] = EVM_L(vmb+VMFPRS+0);

  01f81	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  01f84	05 f0 00 00 00	 add	 eax, 240		; 000000f0H
  01f89	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01f8e	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  01f96	ba fe ff ff ff	 mov	 edx, -2
  01f9b	8b c8		 mov	 ecx, eax
  01f9d	e8 00 00 00 00	 call	 s370_vfetch4
  01fa2	b9 04 00 00 00	 mov	 ecx, 4
  01fa7	48 6b c9 00	 imul	 rcx, rcx, 0
  01fab	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  01fb3	89 84 0a 40 03
	00 00		 mov	 DWORD PTR [rdx+rcx+832], eax

; 1464 :         regs->fpr[1] = EVM_L(vmb+VMFPRS+4);

  01fba	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  01fbd	05 f4 00 00 00	 add	 eax, 244		; 000000f4H
  01fc2	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01fc7	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  01fcf	ba fe ff ff ff	 mov	 edx, -2
  01fd4	8b c8		 mov	 ecx, eax
  01fd6	e8 00 00 00 00	 call	 s370_vfetch4
  01fdb	b9 04 00 00 00	 mov	 ecx, 4
  01fe0	48 6b c9 01	 imul	 rcx, rcx, 1
  01fe4	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  01fec	89 84 0a 40 03
	00 00		 mov	 DWORD PTR [rdx+rcx+832], eax

; 1465 :         regs->fpr[4] = EVM_L(vmb+VMFPRS+8);

  01ff3	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  01ff6	05 f8 00 00 00	 add	 eax, 248		; 000000f8H
  01ffb	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02000	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02008	ba fe ff ff ff	 mov	 edx, -2
  0200d	8b c8		 mov	 ecx, eax
  0200f	e8 00 00 00 00	 call	 s370_vfetch4
  02014	b9 04 00 00 00	 mov	 ecx, 4
  02019	48 6b c9 04	 imul	 rcx, rcx, 4
  0201d	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  02025	89 84 0a 40 03
	00 00		 mov	 DWORD PTR [rdx+rcx+832], eax

; 1466 :         regs->fpr[5] = EVM_L(vmb+VMFPRS+12);

  0202c	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  0202f	05 fc 00 00 00	 add	 eax, 252		; 000000fcH
  02034	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02039	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02041	ba fe ff ff ff	 mov	 edx, -2
  02046	8b c8		 mov	 ecx, eax
  02048	e8 00 00 00 00	 call	 s370_vfetch4
  0204d	b9 04 00 00 00	 mov	 ecx, 4
  02052	48 6b c9 05	 imul	 rcx, rcx, 5
  02056	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0205e	89 84 0a 40 03
	00 00		 mov	 DWORD PTR [rdx+rcx+832], eax

; 1467 :         regs->fpr[8] = EVM_L(vmb+VMFPRS+16);

  02065	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  02068	05 00 01 00 00	 add	 eax, 256		; 00000100H
  0206d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02072	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  0207a	ba fe ff ff ff	 mov	 edx, -2
  0207f	8b c8		 mov	 ecx, eax
  02081	e8 00 00 00 00	 call	 s370_vfetch4
  02086	b9 04 00 00 00	 mov	 ecx, 4
  0208b	48 6b c9 08	 imul	 rcx, rcx, 8
  0208f	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  02097	89 84 0a 40 03
	00 00		 mov	 DWORD PTR [rdx+rcx+832], eax

; 1468 :         regs->fpr[9] = EVM_L(vmb+VMFPRS+20);

  0209e	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  020a1	05 04 01 00 00	 add	 eax, 260		; 00000104H
  020a6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  020ab	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  020b3	ba fe ff ff ff	 mov	 edx, -2
  020b8	8b c8		 mov	 ecx, eax
  020ba	e8 00 00 00 00	 call	 s370_vfetch4
  020bf	b9 04 00 00 00	 mov	 ecx, 4
  020c4	48 6b c9 09	 imul	 rcx, rcx, 9
  020c8	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  020d0	89 84 0a 40 03
	00 00		 mov	 DWORD PTR [rdx+rcx+832], eax

; 1469 :         regs->fpr[12] = EVM_L(vmb+VMFPRS+24);

  020d7	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  020da	05 08 01 00 00	 add	 eax, 264		; 00000108H
  020df	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  020e4	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  020ec	ba fe ff ff ff	 mov	 edx, -2
  020f1	8b c8		 mov	 ecx, eax
  020f3	e8 00 00 00 00	 call	 s370_vfetch4
  020f8	b9 04 00 00 00	 mov	 ecx, 4
  020fd	48 6b c9 0c	 imul	 rcx, rcx, 12
  02101	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  02109	89 84 0a 40 03
	00 00		 mov	 DWORD PTR [rdx+rcx+832], eax

; 1470 :         regs->fpr[13] = EVM_L(vmb+VMFPRS+28);

  02110	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  02113	05 0c 01 00 00	 add	 eax, 268		; 0000010cH
  02118	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0211d	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02125	ba fe ff ff ff	 mov	 edx, -2
  0212a	8b c8		 mov	 ecx, eax
  0212c	e8 00 00 00 00	 call	 s370_vfetch4
  02131	b9 04 00 00 00	 mov	 ecx, 4
  02136	48 6b c9 0d	 imul	 rcx, rcx, 13
  0213a	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  02142	89 84 0a 40 03
	00 00		 mov	 DWORD PTR [rdx+rcx+832], eax
$LN64@ecpsvm_do_:

; 1471 : 
; 1472 :         INITPSEUDOREGS(wregs);

  02149	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  02150	48 63 80 90 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5264]
  02157	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv1399[rbp], rax
  0215e	48 8d 8d 00 62
	01 00		 lea	 rcx, QWORD PTR wregs$[rbp]
  02165	48 8b f9	 mov	 rdi, rcx
  02168	33 c0		 xor	 eax, eax
  0216a	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv1399[rbp]
  02171	f3 aa		 rep stosb
$LN67@ecpsvm_do_:
  02173	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG171077
  0217a	48 89 85 68 62
	01 00		 mov	 QWORD PTR wregs$[rbp+104], rax
  02181	33 c0		 xor	 eax, eax
  02183	85 c0		 test	 eax, eax
  02185	75 ec		 jne	 SHORT $LN67@ecpsvm_do_
  02187	33 c0		 xor	 eax, eax
  02189	85 c0		 test	 eax, eax
  0218b	75 bc		 jne	 SHORT $LN64@ecpsvm_do_

; 1473 :         work_p=MADDR(vmb+VMPSW,0,regs,USE_REAL_ADDR,0);

  0218d	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  02190	05 a8 00 00 00	 add	 eax, 168		; 000000a8H
  02195	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  0219a	c7 44 24 20 fe
	ff ff ff	 mov	 DWORD PTR [rsp+32], -2
  021a2	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  021aa	45 33 c0	 xor	 r8d, r8d
  021ad	ba 01 00 00 00	 mov	 edx, 1
  021b2	8b c8		 mov	 ecx, eax
  021b4	e8 00 00 00 00	 call	 s370_maddr_l
  021b9	48 89 45 60	 mov	 QWORD PTR work_p$[rbp], rax

; 1474 :         ARCH_DEP(load_psw) (&wregs,work_p);    /* Load user's Virtual PSW in work structure */

  021bd	48 8b 55 60	 mov	 rdx, QWORD PTR work_p$[rbp]
  021c1	48 8d 8d 00 62
	01 00		 lea	 rcx, QWORD PTR wregs$[rbp]
  021c8	e8 00 00 00 00	 call	 s370_load_psw
$LN70@ecpsvm_do_:

; 1475 :         MAYBE_SET_PSW_IA_FROM_IP(&wregs);

  021cd	48 83 bd 08 64
	01 00 00	 cmp	 QWORD PTR wregs$[rbp+520], 0
  021d5	74 29		 je	 SHORT $LN224@ecpsvm_do_
  021d7	8b 85 10 64 01
	00		 mov	 eax, DWORD PTR wregs$[rbp+528]
  021dd	48 8b 8d 00 64
	01 00		 mov	 rcx, QWORD PTR wregs$[rbp+512]
  021e4	48 8b 95 68 62
	01 00		 mov	 rdx, QWORD PTR wregs$[rbp+104]
  021eb	48 2b d1	 sub	 rdx, rcx
  021ee	48 8b ca	 mov	 rcx, rdx
  021f1	48 03 c1	 add	 rax, rcx
  021f4	48 25 ff ff ff
	00		 and	 rax, 16777215		; 00ffffffH
  021fa	89 85 88 62 01
	00		 mov	 DWORD PTR wregs$[rbp+136], eax
$LN224@ecpsvm_do_:
  02200	33 c0		 xor	 eax, eax
  02202	85 c0		 test	 eax, eax
  02204	75 c7		 jne	 SHORT $LN70@ecpsvm_do_
$LN73@ecpsvm_do_:

; 1476 : 
; 1477 :         /* Build REAL PSW */
; 1478 :         INITPSEUDOREGS(rregs);

  02206	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0220d	48 63 80 90 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5264]
  02214	48 89 85 e0 00
	00 00		 mov	 QWORD PTR tv1424[rbp], rax
  0221b	48 8d 8d 80 01
	00 00		 lea	 rcx, QWORD PTR rregs$[rbp]
  02222	48 8b f9	 mov	 rdi, rcx
  02225	33 c0		 xor	 eax, eax
  02227	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR tv1424[rbp]
  0222e	f3 aa		 rep stosb
$LN76@ecpsvm_do_:
  02230	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG171079
  02237	48 89 85 e8 01
	00 00		 mov	 QWORD PTR rregs$[rbp+104], rax
  0223e	33 c0		 xor	 eax, eax
  02240	85 c0		 test	 eax, eax
  02242	75 ec		 jne	 SHORT $LN76@ecpsvm_do_
  02244	33 c0		 xor	 eax, eax
  02246	85 c0		 test	 eax, eax
  02248	75 bc		 jne	 SHORT $LN73@ecpsvm_do_
$LN79@ecpsvm_do_:

; 1479 :         /* Copy IAR */
; 1480 :         SET_PSW_IA_AND_MAYBE_IP(&rregs, wregs.psw.IA);

  0224a	8b 85 88 62 01
	00		 mov	 eax, DWORD PTR wregs$[rbp+136]
  02250	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02255	89 85 08 02 00
	00		 mov	 DWORD PTR rregs$[rbp+136], eax
  0225b	48 83 bd 88 03
	00 00 00	 cmp	 QWORD PTR rregs$[rbp+520], 0
  02263	74 41		 je	 SHORT $LN225@ecpsvm_do_
  02265	8b 85 08 02 00
	00		 mov	 eax, DWORD PTR rregs$[rbp+136]
  0226b	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  02270	39 85 90 03 00
	00		 cmp	 DWORD PTR rregs$[rbp+528], eax
  02276	75 23		 jne	 SHORT $LN226@ecpsvm_do_
  02278	8b 85 08 02 00
	00		 mov	 eax, DWORD PTR rregs$[rbp+136]
  0227e	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  02283	8b c0		 mov	 eax, eax
  02285	48 8b 8d 80 03
	00 00		 mov	 rcx, QWORD PTR rregs$[rbp+512]
  0228c	48 0b c8	 or	 rcx, rax
  0228f	48 8b c1	 mov	 rax, rcx
  02292	48 89 85 e8 01
	00 00		 mov	 QWORD PTR rregs$[rbp+104], rax
  02299	eb 0b		 jmp	 SHORT $LN227@ecpsvm_do_
$LN226@ecpsvm_do_:
  0229b	48 c7 85 88 03
	00 00 00 00 00
	00		 mov	 QWORD PTR rregs$[rbp+520], 0
$LN227@ecpsvm_do_:
$LN225@ecpsvm_do_:
  022a6	33 c0		 xor	 eax, eax
  022a8	85 c0		 test	 eax, eax
  022aa	75 9e		 jne	 SHORT $LN79@ecpsvm_do_

; 1481 :         /* Copy CC, PSW KEYs and PGM Mask */
; 1482 :         rregs.psw.cc=wregs.psw.cc;

  022ac	0f b6 85 7c 62
	01 00		 movzx	 eax, BYTE PTR wregs$[rbp+124]
  022b3	88 85 fc 01 00
	00		 mov	 BYTE PTR rregs$[rbp+124], al

; 1483 :         rregs.psw.pkey=wregs.psw.pkey;

  022b9	0f b6 85 79 62
	01 00		 movzx	 eax, BYTE PTR wregs$[rbp+121]
  022c0	88 85 f9 01 00
	00		 mov	 BYTE PTR rregs$[rbp+121], al

; 1484 :         /* Indicate Translation + I/O + Ext + Ecmode + Problem + MC */
; 1485 :         rregs.psw.sysmask=0x07; /* I/O + EXT + Trans */

  022c6	c6 85 f8 01 00
	00 07		 mov	 BYTE PTR rregs$[rbp+120], 7

; 1486 :         rregs.psw.states = BIT(PSW_EC_BIT)         /* ECMODE */

  022cd	c6 85 fa 01 00
	00 0d		 mov	 BYTE PTR rregs$[rbp+122], 13

; 1487 :                          | BIT(PSW_PROB_BIT)       /* Problem state */
; 1488 :                          | BIT(PSW_MACH_BIT);      /* MC Enabled */
; 1489 :         rregs.psw.intcode=0;    /* Clear intcode */

  022d4	33 c0		 xor	 eax, eax
  022d6	66 89 85 18 02
	00 00		 mov	 WORD PTR rregs$[rbp+152], ax

; 1490 :         rregs.psw.progmask=wregs.psw.progmask;

  022dd	0f b6 85 7d 62
	01 00		 movzx	 eax, BYTE PTR wregs$[rbp+125]
  022e4	88 85 fd 01 00
	00		 mov	 BYTE PTR rregs$[rbp+125], al

; 1491 : 
; 1492 :         NCR0=EVM_L(CPCREG0);    /* Assume for now */

  022ea	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  022f2	ba fe ff ff ff	 mov	 edx, -2
  022f7	b9 d4 03 00 00	 mov	 ecx, 980		; 000003d4H
  022fc	e8 00 00 00 00	 call	 s370_vfetch4
  02301	89 45 54	 mov	 DWORD PTR NCR0$[rbp], eax

; 1493 :         NCR1=EVM_L(vmb+VMSEG);  /* Ditto          */

  02304	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  02307	83 c0 10	 add	 eax, 16
  0230a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0230f	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02317	ba fe ff ff ff	 mov	 edx, -2
  0231c	8b c8		 mov	 ecx, eax
  0231e	e8 00 00 00 00	 call	 s370_vfetch4
  02323	89 45 58	 mov	 DWORD PTR NCR1$[rbp], eax

; 1494 : 
; 1495 :         /* Disable ECPS:VM in VM-REAL CR6 For now */
; 1496 :         B_VMMCR6&=~(VMMSHADT|VMMPROB|VMMNOSK|VMMFE);

  02326	0f b6 45 04	 movzx	 eax, BYTE PTR B_VMMCR6$[rbp]
  0232a	25 1b ff ff ff	 and	 eax, -229		; ffffffffffffff1bH
  0232f	88 45 04	 mov	 BYTE PTR B_VMMCR6$[rbp], al

; 1497 : 
; 1498 :         /* We load VMECEXT Even if it's not a ECMODE VM */
; 1499 :         /* in which case F_ECBLOK is also Virtual CR0   */
; 1500 : 
; 1501 :         F_ECBLOK=EVM_L(vmb+VMECEXT);

  02332	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  02335	83 c0 0c	 add	 eax, 12
  02338	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0233d	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02345	ba fe ff ff ff	 mov	 edx, -2
  0234a	8b c8		 mov	 ecx, eax
  0234c	e8 00 00 00 00	 call	 s370_vfetch4
  02351	89 45 34	 mov	 DWORD PTR F_ECBLOK$[rbp], eax

; 1502 : 
; 1503 :         /* ECMODE VM ? */
; 1504 :         if(B_VMPSTAT & VMV370R)

  02354	0f b6 45 0c	 movzx	 eax, BYTE PTR B_VMPSTAT$[rbp]
  02358	83 e0 40	 and	 eax, 64			; 00000040H
  0235b	85 c0		 test	 eax, eax
  0235d	0f 84 19 02 00
	00		 je	 $LN228@ecpsvm_do_

; 1505 :         {
; 1506 :             DEBUG_CPASSISTX(DISP2,MSGBUF(buf, "DISP2 : VMB @ %6.6X has ECMODE ON",vmb));

  02363	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  02369	c1 e8 02	 shr	 eax, 2
  0236c	83 e0 01	 and	 eax, 1
  0236f	85 c0		 test	 eax, eax
  02371	74 1d		 je	 SHORT $LN229@ecpsvm_do_
  02373	44 8b 4d 00	 mov	 r9d, DWORD PTR vmb$[rbp]
  02377	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171085
  0237e	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  02383	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0238a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN229@ecpsvm_do_:

; 1507 :             DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  02390	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  02396	c1 e8 02	 shr	 eax, 2
  02399	83 e0 01	 and	 eax, 1
  0239c	85 c0		 test	 eax, eax
  0239e	74 53		 je	 SHORT $LN230@ecpsvm_do_
  023a0	b9 01 00 00 00	 mov	 ecx, 1
  023a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  023ab	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  023b2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  023b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171087
  023be	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  023c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171088
  023ca	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  023cf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  023d4	41 b9 03 00 00
	00		 mov	 r9d, 3
  023da	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171089
  023e1	ba e3 05 00 00	 mov	 edx, 1507		; 000005e3H
  023e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171090
  023ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN230@ecpsvm_do_:

; 1508 :             /* Is this an ECMODE PSW Machine ? */
; 1509 :             if(B_VMESTAT & VMEXTCM)

  023f3	0f b6 45 06	 movzx	 eax, BYTE PTR B_VMESTAT$[rbp]
  023f7	83 e0 08	 and	 eax, 8
  023fa	85 c0		 test	 eax, eax
  023fc	0f 84 7a 01 00
	00		 je	 $LN231@ecpsvm_do_

; 1510 :             {
; 1511 :                 if((B_VMESTAT & (VMINVSEG|VMNEWCR0)) == (VMINVSEG|VMNEWCR0))

  02402	0f b6 45 06	 movzx	 eax, BYTE PTR B_VMESTAT$[rbp]
  02406	83 e0 06	 and	 eax, 6
  02409	83 f8 06	 cmp	 eax, 6
  0240c	0f 85 0e 01 00
	00		 jne	 $LN232@ecpsvm_do_

; 1512 :                 {
; 1513 :                     /* CP Say this is NOT good */
; 1514 :                     /* Take exit 28 */
; 1515 :                     WRMSG(HHC01700,"W");

  02412	b9 01 00 00 00	 mov	 ecx, 1
  02417	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0241d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171093
  02424	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02429	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171094
  02430	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02435	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0243a	41 b9 03 00 00
	00		 mov	 r9d, 3
  02440	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171095
  02447	ba eb 05 00 00	 mov	 edx, 1515		; 000005ebH
  0244c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171096
  02453	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN82@ecpsvm_do_:

; 1516 :                     SET_PSW_IA_AND_MAYBE_IP(regs, EVM_L(el+28));

  02459	8b 84 24 c0 c7
	02 00		 mov	 eax, DWORD PTR el$[rsp]
  02460	83 c0 1c	 add	 eax, 28
  02463	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02468	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02470	ba fe ff ff ff	 mov	 edx, -2
  02475	8b c8		 mov	 ecx, eax
  02477	e8 00 00 00 00	 call	 s370_vfetch4
  0247c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02481	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  02489	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  0248f	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  02497	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  0249f	74 6e		 je	 SHORT $LN233@ecpsvm_do_
  024a1	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  024a9	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  024af	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  024b4	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  024bc	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  024c2	75 38		 jne	 SHORT $LN234@ecpsvm_do_
  024c4	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  024cc	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  024d2	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  024d7	8b c0		 mov	 eax, eax
  024d9	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  024e1	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  024e8	48 0b c8	 or	 rcx, rax
  024eb	48 8b c1	 mov	 rax, rcx
  024ee	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  024f6	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  024fa	eb 13		 jmp	 SHORT $LN235@ecpsvm_do_
$LN234@ecpsvm_do_:
  024fc	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  02504	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN235@ecpsvm_do_:
$LN233@ecpsvm_do_:
  0250f	33 c0		 xor	 eax, eax
  02511	85 c0		 test	 eax, eax
  02513	0f 85 40 ff ff
	ff		 jne	 $LN82@ecpsvm_do_

; 1517 :                     return(0);

  02519	33 c0		 xor	 eax, eax
  0251b	e9 2b 19 00 00	 jmp	 $LN1@ecpsvm_do_
$LN232@ecpsvm_do_:

; 1518 :                 }
; 1519 :                 /* Check 3rd level translation */
; 1520 :                 if(wregs.psw.sysmask & 0x04)

  02520	0f b6 85 78 62
	01 00		 movzx	 eax, BYTE PTR wregs$[rbp+120]
  02527	83 e0 04	 and	 eax, 4
  0252a	85 c0		 test	 eax, eax
  0252c	74 4e		 je	 SHORT $LN236@ecpsvm_do_

; 1521 :                 {
; 1522 :                     NCR0=EVM_L(F_ECBLOK+EXTSHCR0);

  0252e	8b 45 34	 mov	 eax, DWORD PTR F_ECBLOK$[rbp]
  02531	83 c0 40	 add	 eax, 64			; 00000040H
  02534	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02539	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02541	ba fe ff ff ff	 mov	 edx, -2
  02546	8b c8		 mov	 ecx, eax
  02548	e8 00 00 00 00	 call	 s370_vfetch4
  0254d	89 45 54	 mov	 DWORD PTR NCR0$[rbp], eax

; 1523 :                     NCR1=EVM_L(F_ECBLOK+EXTSHCR1);

  02550	8b 45 34	 mov	 eax, DWORD PTR F_ECBLOK$[rbp]
  02553	83 c0 44	 add	 eax, 68			; 00000044H
  02556	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0255b	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02563	ba fe ff ff ff	 mov	 edx, -2
  02568	8b c8		 mov	 ecx, eax
  0256a	e8 00 00 00 00	 call	 s370_vfetch4
  0256f	89 45 58	 mov	 DWORD PTR NCR1$[rbp], eax

; 1524 :                     B_VMMCR6|=VMMSHADT;   /* re-enable Shadow Table management in CR6 */

  02572	0f b6 45 04	 movzx	 eax, BYTE PTR B_VMMCR6$[rbp]
  02576	83 c8 04	 or	 eax, 4
  02579	88 45 04	 mov	 BYTE PTR B_VMMCR6$[rbp], al
$LN236@ecpsvm_do_:
$LN231@ecpsvm_do_:
$LN228@ecpsvm_do_:

; 1525 :                 }
; 1526 :             }
; 1527 : 
; 1528 :         }
; 1529 :         /* Invalidate Shadow Tables if necessary */
; 1530 :         /* 2017-01-29 if statement corrected */
; 1531 :         if((B_VMESTAT & (VMINVPAG | VMSHADT)) == (VMINVPAG|VMSHADT))

  0257c	0f b6 45 06	 movzx	 eax, BYTE PTR B_VMESTAT$[rbp]
  02580	25 81 00 00 00	 and	 eax, 129		; 00000081H
  02585	3d 81 00 00 00	 cmp	 eax, 129		; 00000081H
  0258a	0f 85 9a 00 00
	00		 jne	 $LN237@ecpsvm_do_

; 1532 :         {
; 1533 :             DEBUG_CPASSISTX(DISP2,MSGBUF(buf, "DISP2 : VMB @ %6.6X Refusing to simulate DMKVATAB",vmb));

  02590	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  02596	c1 e8 02	 shr	 eax, 2
  02599	83 e0 01	 and	 eax, 1
  0259c	85 c0		 test	 eax, eax
  0259e	74 1d		 je	 SHORT $LN238@ecpsvm_do_
  025a0	44 8b 4d 00	 mov	 r9d, DWORD PTR vmb$[rbp]
  025a4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171103
  025ab	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  025b0	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  025b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN238@ecpsvm_do_:

; 1534 :             DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  025bd	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  025c3	c1 e8 02	 shr	 eax, 2
  025c6	83 e0 01	 and	 eax, 1
  025c9	85 c0		 test	 eax, eax
  025cb	74 53		 je	 SHORT $LN239@ecpsvm_do_
  025cd	b9 01 00 00 00	 mov	 ecx, 1
  025d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  025d8	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  025df	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  025e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171105
  025eb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  025f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171106
  025f7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  025fc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02601	41 b9 03 00 00
	00		 mov	 r9d, 3
  02607	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171107
  0260e	ba fe 05 00 00	 mov	 edx, 1534		; 000005feH
  02613	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171108
  0261a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN239@ecpsvm_do_:

; 1535 :             /* Really looks like DMKVATAB is a huge thing to simulate */
; 1536 :             /* My belief is that the assist can't handle this one     */
; 1537 :             /* Return to caller as a NO-OP on this one                */
; 1538 :             return(1);

  02620	b8 01 00 00 00	 mov	 eax, 1
  02625	e9 21 18 00 00	 jmp	 $LN1@ecpsvm_do_
$LN237@ecpsvm_do_:

; 1539 :             /* ecpsvm_inv_shadtab_pages(regs,vmb); */
; 1540 :         }
; 1541 :         B_VMESTAT&=~VMINVPAG;

  0262a	0f b6 45 06	 movzx	 eax, BYTE PTR B_VMESTAT$[rbp]
  0262e	83 e0 fe	 and	 eax, -2
  02631	88 45 06	 mov	 BYTE PTR B_VMESTAT$[rbp], al

; 1542 :         B_VMDSTAT|=VMDSP;

  02634	0f b6 45 0d	 movzx	 eax, BYTE PTR B_VMDSTAT$[rbp]
  02638	0f ba e8 07	 bts	 eax, 7
  0263c	88 45 0d	 mov	 BYTE PTR B_VMDSTAT$[rbp], al

; 1543 :         /* Test for CPMICON in DMKDSP useless here */
; 1544 :         /* if CPMICON was off, we would have never */
; 1545 :         /* been called anyway                      */
; 1546 :         if(F_MICBLOK!=0)        /* That is SET ASSIST ON */

  0263f	83 7d 68 00	 cmp	 DWORD PTR F_MICBLOK$[rbp], 0
  02643	0f 84 33 02 00
	00		 je	 $LN240@ecpsvm_do_

; 1547 :         {
; 1548 :             B_MICVIP=0;

  02649	c6 45 05 00	 mov	 BYTE PTR B_MICVIP$[rbp], 0

; 1549 :             /* Check tracing (incompatible with assist) */
; 1550 :             if(!(EVM_IC(vmb+VMTRCTL) & (VMTRSVC|VMTRPRV|VMTRBRIN)))

  0264d	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  02650	83 c0 5e	 add	 eax, 94			; 0000005eH
  02653	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02658	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02660	ba fe ff ff ff	 mov	 edx, -2
  02665	8b c8		 mov	 ecx, eax
  02667	e8 00 00 00 00	 call	 s370_vfetchb
  0266c	0f b6 c0	 movzx	 eax, al
  0266f	83 e0 45	 and	 eax, 69			; 00000045H
  02672	85 c0		 test	 eax, eax
  02674	0f 85 de 01 00
	00		 jne	 $LN241@ecpsvm_do_

; 1551 :             {
; 1552 :                 B_VMMCR6|=VMMFE;

  0267a	0f b6 45 04	 movzx	 eax, BYTE PTR B_VMMCR6$[rbp]
  0267e	0f ba e8 07	 bts	 eax, 7
  02682	88 45 04	 mov	 BYTE PTR B_VMMCR6$[rbp], al

; 1553 :                 if(B_VMOSTAT & VMSHR)

  02685	0f b6 45 1c	 movzx	 eax, BYTE PTR B_VMOSTAT$[rbp]
  02689	83 e0 40	 and	 eax, 64			; 00000040H
  0268c	85 c0		 test	 eax, eax
  0268e	74 0a		 je	 SHORT $LN242@ecpsvm_do_

; 1554 :                 {
; 1555 :                     /* Cannot allow ISK/SSK in shared sys VM */
; 1556 :                     B_VMMCR6|=VMMNOSK;

  02690	0f b6 45 04	 movzx	 eax, BYTE PTR B_VMMCR6$[rbp]
  02694	83 c8 20	 or	 eax, 32			; 00000020H
  02697	88 45 04	 mov	 BYTE PTR B_VMMCR6$[rbp], al
$LN242@ecpsvm_do_:

; 1557 :                 }
; 1558 :                 if(PROBSTATE(&wregs.psw))

  0269a	0f b6 85 7a 62
	01 00		 movzx	 eax, BYTE PTR wregs$[rbp+122]
  026a1	83 e0 01	 and	 eax, 1
  026a4	85 c0		 test	 eax, eax
  026a6	74 0a		 je	 SHORT $LN243@ecpsvm_do_

; 1559 :                 {
; 1560 :                     B_VMMCR6|=VMMPROB;

  026a8	0f b6 45 04	 movzx	 eax, BYTE PTR B_VMMCR6$[rbp]
  026ac	83 c8 40	 or	 eax, 64			; 00000040H
  026af	88 45 04	 mov	 BYTE PTR B_VMMCR6$[rbp], al
$LN243@ecpsvm_do_:
$LN83@ecpsvm_do_:

; 1561 :                 }
; 1562 :                 /* Set MICPEND if necessary */
; 1563 :                 /* (assist stuff to ensure LPSW/SSM/SVC sim */
; 1564 :                 /* does not re-enable VPSW when an interrupt */
; 1565 :                 /* is pending)                               */
; 1566 :                 while(1)

  026b2	33 c0		 xor	 eax, eax
  026b4	83 f8 01	 cmp	 eax, 1
  026b7	0f 84 9b 01 00
	00		 je	 $LN84@ecpsvm_do_

; 1567 :                 {
; 1568 :                     B_MICVIP=0;

  026bd	c6 45 05 00	 mov	 BYTE PTR B_MICVIP$[rbp], 0

; 1569 :                     F_VMIOINT=EVM_LH(vmb+VMIOINT);

  026c1	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  026c4	83 c0 6a	 add	 eax, 106		; 0000006aH
  026c7	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  026cc	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  026d4	ba fe ff ff ff	 mov	 edx, -2
  026d9	8b c8		 mov	 ecx, eax
  026db	e8 00 00 00 00	 call	 s370_vfetch2
  026e0	0f b7 c0	 movzx	 eax, ax
  026e3	89 45 44	 mov	 DWORD PTR F_VMIOINT$[rbp], eax

; 1570 :                     if(EVM_LH(vmb+VMIOINT)!=0)

  026e6	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  026e9	83 c0 6a	 add	 eax, 106		; 0000006aH
  026ec	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  026f1	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  026f9	ba fe ff ff ff	 mov	 edx, -2
  026fe	8b c8		 mov	 ecx, eax
  02700	e8 00 00 00 00	 call	 s370_vfetch2
  02705	0f b7 c0	 movzx	 eax, ax
  02708	85 c0		 test	 eax, eax
  0270a	74 62		 je	 SHORT $LN244@ecpsvm_do_

; 1571 :                         {
; 1572 :                         F_VMIOINT<<=16;

  0270c	8b 45 44	 mov	 eax, DWORD PTR F_VMIOINT$[rbp]
  0270f	c1 e0 10	 shl	 eax, 16
  02712	89 45 44	 mov	 DWORD PTR F_VMIOINT$[rbp], eax

; 1573 :                         if(B_VMESTAT & VMEXTCM)

  02715	0f b6 45 06	 movzx	 eax, BYTE PTR B_VMESTAT$[rbp]
  02719	83 e0 08	 and	 eax, 8
  0271c	85 c0		 test	 eax, eax
  0271e	74 3e		 je	 SHORT $LN245@ecpsvm_do_

; 1574 :                         {
; 1575 :                             if(F_VMIOINT&=EVM_L(F_ECBLOK))

  02720	8b 45 34	 mov	 eax, DWORD PTR F_ECBLOK$[rbp]
  02723	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02728	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02730	ba fe ff ff ff	 mov	 edx, -2
  02735	8b c8		 mov	 ecx, eax
  02737	e8 00 00 00 00	 call	 s370_vfetch4
  0273c	8b 4d 44	 mov	 ecx, DWORD PTR F_VMIOINT$[rbp]
  0273f	23 c8		 and	 ecx, eax
  02741	8b c1		 mov	 eax, ecx
  02743	89 45 44	 mov	 DWORD PTR F_VMIOINT$[rbp], eax
  02746	83 7d 44 00	 cmp	 DWORD PTR F_VMIOINT$[rbp], 0
  0274a	74 10		 je	 SHORT $LN247@ecpsvm_do_

; 1576 :                             {
; 1577 :                                 B_MICVIP|=0x80;

  0274c	0f b6 45 05	 movzx	 eax, BYTE PTR B_MICVIP$[rbp]
  02750	0f ba e8 07	 bts	 eax, 7
  02754	88 45 05	 mov	 BYTE PTR B_MICVIP$[rbp], al

; 1578 :                                 break;

  02757	e9 fc 00 00 00	 jmp	 $LN84@ecpsvm_do_
$LN247@ecpsvm_do_:

; 1579 :                             }
; 1580 :                         }

  0275c	eb 10		 jmp	 SHORT $LN246@ecpsvm_do_
$LN245@ecpsvm_do_:

; 1581 :                         else
; 1582 :                         {
; 1583 :                             B_MICVIP|=0x80;

  0275e	0f b6 45 05	 movzx	 eax, BYTE PTR B_MICVIP$[rbp]
  02762	0f ba e8 07	 bts	 eax, 7
  02766	88 45 05	 mov	 BYTE PTR B_MICVIP$[rbp], al

; 1584 :                             break;

  02769	e9 ea 00 00 00	 jmp	 $LN84@ecpsvm_do_
$LN246@ecpsvm_do_:
$LN244@ecpsvm_do_:

; 1585 :                         }
; 1586 :                     }
; 1587 :                     if(B_VMESTAT & VMEXTCM)

  0276e	0f b6 45 06	 movzx	 eax, BYTE PTR B_VMESTAT$[rbp]
  02772	83 e0 08	 and	 eax, 8
  02775	85 c0		 test	 eax, eax
  02777	74 16		 je	 SHORT $LN248@ecpsvm_do_

; 1588 :                     {
; 1589 :                         if(B_VMPEND & VMPGPND)

  02779	0f b6 45 2c	 movzx	 eax, BYTE PTR B_VMPEND$[rbp]
  0277d	83 e0 08	 and	 eax, 8
  02780	85 c0		 test	 eax, eax
  02782	74 0b		 je	 SHORT $LN249@ecpsvm_do_

; 1590 :                         {
; 1591 :                             B_MICVIP|=0x80;

  02784	0f b6 45 05	 movzx	 eax, BYTE PTR B_MICVIP$[rbp]
  02788	0f ba e8 07	 bts	 eax, 7
  0278c	88 45 05	 mov	 BYTE PTR B_MICVIP$[rbp], al
$LN249@ecpsvm_do_:
$LN248@ecpsvm_do_:

; 1592 :                         }
; 1593 :                     }
; 1594 :                     if(B_VMPSTAT & VMV370R)

  0278f	0f b6 45 0c	 movzx	 eax, BYTE PTR B_VMPSTAT$[rbp]
  02793	83 e0 40	 and	 eax, 64			; 00000040H
  02796	85 c0		 test	 eax, eax
  02798	74 24		 je	 SHORT $LN250@ecpsvm_do_

; 1595 :                     {
; 1596 :                         F_VMVCR0=EVM_L(F_ECBLOK+0);

  0279a	8b 45 34	 mov	 eax, DWORD PTR F_ECBLOK$[rbp]
  0279d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  027a2	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  027aa	ba fe ff ff ff	 mov	 edx, -2
  027af	8b c8		 mov	 ecx, eax
  027b1	e8 00 00 00 00	 call	 s370_vfetch4
  027b6	89 85 b0 00 00
	00		 mov	 DWORD PTR F_VMVCR0$[rbp], eax

; 1597 :                     }

  027bc	eb 09		 jmp	 SHORT $LN251@ecpsvm_do_
$LN250@ecpsvm_do_:

; 1598 :                     else
; 1599 :                     {
; 1600 :                         F_VMVCR0=F_ECBLOK;

  027be	8b 45 34	 mov	 eax, DWORD PTR F_ECBLOK$[rbp]
  027c1	89 85 b0 00 00
	00		 mov	 DWORD PTR F_VMVCR0$[rbp], eax
$LN251@ecpsvm_do_:

; 1601 :                     }
; 1602 :                     for(F_VMPXINT=EVM_L(vmb+VMPXINT);F_VMPXINT;F_VMPXINT=EVM_L(F_VMPXINT)) /* XINTNEXT at +0 */

  027c7	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  027ca	05 84 01 00 00	 add	 eax, 388		; 00000184H
  027cf	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  027d4	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  027dc	ba fe ff ff ff	 mov	 edx, -2
  027e1	8b c8		 mov	 ecx, eax
  027e3	e8 00 00 00 00	 call	 s370_vfetch4
  027e8	89 45 48	 mov	 DWORD PTR F_VMPXINT$[rbp], eax
  027eb	eb 1f		 jmp	 SHORT $LN87@ecpsvm_do_
$LN85@ecpsvm_do_:
  027ed	8b 45 48	 mov	 eax, DWORD PTR F_VMPXINT$[rbp]
  027f0	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  027f5	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  027fd	ba fe ff ff ff	 mov	 edx, -2
  02802	8b c8		 mov	 ecx, eax
  02804	e8 00 00 00 00	 call	 s370_vfetch4
  02809	89 45 48	 mov	 DWORD PTR F_VMPXINT$[rbp], eax
$LN87@ecpsvm_do_:
  0280c	83 7d 48 00	 cmp	 DWORD PTR F_VMPXINT$[rbp], 0
  02810	74 3f		 je	 SHORT $LN86@ecpsvm_do_

; 1603 :                     {
; 1604 :                         if(F_VMVCR0 & EVM_LH(F_VMPXINT+10))

  02812	8b 45 48	 mov	 eax, DWORD PTR F_VMPXINT$[rbp]
  02815	83 c0 0a	 add	 eax, 10
  02818	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0281d	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02825	ba fe ff ff ff	 mov	 edx, -2
  0282a	8b c8		 mov	 ecx, eax
  0282c	e8 00 00 00 00	 call	 s370_vfetch2
  02831	0f b7 c0	 movzx	 eax, ax
  02834	8b 8d b0 00 00
	00		 mov	 ecx, DWORD PTR F_VMVCR0$[rbp]
  0283a	23 c8		 and	 ecx, eax
  0283c	8b c1		 mov	 eax, ecx
  0283e	85 c0		 test	 eax, eax
  02840	74 0d		 je	 SHORT $LN252@ecpsvm_do_

; 1605 :                         {
; 1606 :                             B_MICVIP|=0x80;

  02842	0f b6 45 05	 movzx	 eax, BYTE PTR B_MICVIP$[rbp]
  02846	0f ba e8 07	 bts	 eax, 7
  0284a	88 45 05	 mov	 BYTE PTR B_MICVIP$[rbp], al

; 1607 :                             break;

  0284d	eb 02		 jmp	 SHORT $LN86@ecpsvm_do_
$LN252@ecpsvm_do_:

; 1608 :                         }
; 1609 :                     }

  0284f	eb 9c		 jmp	 SHORT $LN85@ecpsvm_do_
$LN86@ecpsvm_do_:

; 1610 :                     break;      /* Terminate dummy while loop */

  02851	eb 05		 jmp	 SHORT $LN84@ecpsvm_do_

; 1611 :                 } /* While dummy loop for MICPEND */

  02853	e9 5a fe ff ff	 jmp	 $LN83@ecpsvm_do_
$LN84@ecpsvm_do_:
$LN241@ecpsvm_do_:

; 1612 :             } /* if(Not tracing) */
; 1613 :             EVM_STC(B_MICVIP,F_MICBLOK+8);      /* Save new MICVIP */

  02858	8b 45 68	 mov	 eax, DWORD PTR F_MICBLOK$[rbp]
  0285b	83 c0 08	 add	 eax, 8
  0285e	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02863	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  0286b	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  02871	8b d0		 mov	 edx, eax
  02873	0f b6 4d 05	 movzx	 ecx, BYTE PTR B_MICVIP$[rbp]
  02877	e8 00 00 00 00	 call	 s370_vstoreb
$LN240@ecpsvm_do_:

; 1614 :         } /* if(F_MICBLOCK!=0) */
; 1615 :         /* If an Extended VM, Load CRs 4-13 */
; 1616 :         /* CR6 Will be overwritten in a second */
; 1617 :         if(B_VMPSTAT & VMV370R)

  0287c	0f b6 45 0c	 movzx	 eax, BYTE PTR B_VMPSTAT$[rbp]
  02880	83 e0 40	 and	 eax, 64			; 00000040H
  02883	85 c0		 test	 eax, eax
  02885	74 52		 je	 SHORT $LN253@ecpsvm_do_

; 1618 :         {
; 1619 :             for(i=4;i<14;i++)

  02887	c7 45 08 04 00
	00 00		 mov	 DWORD PTR i$[rbp], 4
  0288e	eb 08		 jmp	 SHORT $LN90@ecpsvm_do_
$LN88@ecpsvm_do_:
  02890	8b 45 08	 mov	 eax, DWORD PTR i$[rbp]
  02893	ff c0		 inc	 eax
  02895	89 45 08	 mov	 DWORD PTR i$[rbp], eax
$LN90@ecpsvm_do_:
  02898	83 7d 08 0e	 cmp	 DWORD PTR i$[rbp], 14
  0289c	7d 3b		 jge	 SHORT $LN89@ecpsvm_do_

; 1620 :             {
; 1621 :                 regs->CR_L(i)=EVM_L(F_ECBLOK+(i*4));

  0289e	8b 45 34	 mov	 eax, DWORD PTR F_ECBLOK$[rbp]
  028a1	8b 4d 08	 mov	 ecx, DWORD PTR i$[rbp]
  028a4	8d 04 88	 lea	 eax, DWORD PTR [rax+rcx*4]
  028a7	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  028ac	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  028b4	ba fe ff ff ff	 mov	 edx, -2
  028b9	8b c8		 mov	 ecx, eax
  028bb	e8 00 00 00 00	 call	 s370_vfetch4
  028c0	8b 4d 08	 mov	 ecx, DWORD PTR i$[rbp]
  028c3	ff c1		 inc	 ecx
  028c5	48 63 c9	 movsxd	 rcx, ecx
  028c8	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  028d0	89 84 ca 00 06
	00 00		 mov	 DWORD PTR [rdx+rcx*8+1536], eax

; 1622 :             }

  028d7	eb b7		 jmp	 SHORT $LN88@ecpsvm_do_
$LN89@ecpsvm_do_:
$LN253@ecpsvm_do_:

; 1623 :         }
; 1624 :         /* Update VMMICRO */
; 1625 :         EVM_STC(B_VMMCR6,vmb+VMMCR6);

  028d9	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  028dc	05 7c 01 00 00	 add	 eax, 380		; 0000017cH
  028e1	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  028e6	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  028ee	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  028f4	8b d0		 mov	 edx, eax
  028f6	0f b6 4d 04	 movzx	 ecx, BYTE PTR B_VMMCR6$[rbp]
  028fa	e8 00 00 00 00	 call	 s370_vstoreb

; 1626 :         /* Update PER Control */
; 1627 :         if(EVM_IC(vmb+VMTRCTL) & VMTRPER)

  028ff	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  02902	83 c0 5e	 add	 eax, 94			; 0000005eH
  02905	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0290a	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02912	ba fe ff ff ff	 mov	 edx, -2
  02917	8b c8		 mov	 ecx, eax
  02919	e8 00 00 00 00	 call	 s370_vfetchb
  0291e	0f b6 c0	 movzx	 eax, al
  02921	25 80 00 00 00	 and	 eax, 128		; 00000080H
  02926	85 c0		 test	 eax, eax
  02928	0f 84 3c 01 00
	00		 je	 $LN254@ecpsvm_do_

; 1628 :         {
; 1629 :             DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", "DISP2 : PER ON"));

  0292e	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  02934	c1 e8 02	 shr	 eax, 2
  02937	83 e0 01	 and	 eax, 1
  0293a	85 c0		 test	 eax, eax
  0293c	74 53		 je	 SHORT $LN255@ecpsvm_do_
  0293e	b9 01 00 00 00	 mov	 ecx, 1
  02943	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02949	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171125
  02950	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02955	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171126
  0295c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02961	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171127
  02968	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0296d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02972	41 b9 03 00 00
	00		 mov	 r9d, 3
  02978	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171128
  0297f	ba 5d 06 00 00	 mov	 edx, 1629		; 0000065dH
  02984	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171129
  0298b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN255@ecpsvm_do_:

; 1630 :             FW1=EVM_L(vmb+VMTREXT);

  02991	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  02994	05 a0 00 00 00	 add	 eax, 160		; 000000a0H
  02999	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0299e	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  029a6	ba fe ff ff ff	 mov	 edx, -2
  029ab	8b c8		 mov	 ecx, eax
  029ad	e8 00 00 00 00	 call	 s370_vfetch4
  029b2	89 45 20	 mov	 DWORD PTR FW1$[rbp], eax

; 1631 :             regs->CR_L( 9)=EVM_L(FW1+0x1C);

  029b5	8b 45 20	 mov	 eax, DWORD PTR FW1$[rbp]
  029b8	83 c0 1c	 add	 eax, 28
  029bb	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  029c0	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  029c8	ba fe ff ff ff	 mov	 edx, -2
  029cd	8b c8		 mov	 ecx, eax
  029cf	e8 00 00 00 00	 call	 s370_vfetch4
  029d4	b9 08 00 00 00	 mov	 ecx, 8
  029d9	48 6b c9 0a	 imul	 rcx, rcx, 10
  029dd	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  029e5	89 84 0a 00 06
	00 00		 mov	 DWORD PTR [rdx+rcx+1536], eax

; 1632 :             regs->CR_L(10)=EVM_L(FW1+0x20);

  029ec	8b 45 20	 mov	 eax, DWORD PTR FW1$[rbp]
  029ef	83 c0 20	 add	 eax, 32			; 00000020H
  029f2	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  029f7	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  029ff	ba fe ff ff ff	 mov	 edx, -2
  02a04	8b c8		 mov	 ecx, eax
  02a06	e8 00 00 00 00	 call	 s370_vfetch4
  02a0b	b9 08 00 00 00	 mov	 ecx, 8
  02a10	48 6b c9 0b	 imul	 rcx, rcx, 11
  02a14	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  02a1c	89 84 0a 00 06
	00 00		 mov	 DWORD PTR [rdx+rcx+1536], eax

; 1633 :             regs->CR_L(11)=EVM_L(FW1+0x24);

  02a23	8b 45 20	 mov	 eax, DWORD PTR FW1$[rbp]
  02a26	83 c0 24	 add	 eax, 36			; 00000024H
  02a29	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02a2e	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02a36	ba fe ff ff ff	 mov	 edx, -2
  02a3b	8b c8		 mov	 ecx, eax
  02a3d	e8 00 00 00 00	 call	 s370_vfetch4
  02a42	b9 08 00 00 00	 mov	 ecx, 8
  02a47	48 6b c9 0c	 imul	 rcx, rcx, 12
  02a4b	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  02a53	89 84 0a 00 06
	00 00		 mov	 DWORD PTR [rdx+rcx+1536], eax

; 1634 :             rregs.psw.sysmask |= 0x40;  /* PER Mask in PSW */

  02a5a	0f b6 85 f8 01
	00 00		 movzx	 eax, BYTE PTR rregs$[rbp+120]
  02a61	83 c8 40	 or	 eax, 64			; 00000040H
  02a64	88 85 f8 01 00
	00		 mov	 BYTE PTR rregs$[rbp+120], al
$LN254@ecpsvm_do_:

; 1635 :         }
; 1636 :         /* Update CR6 */
; 1637 :         regs->CR_L(6)=EVM_L(vmb+VMMCR6);

  02a6a	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  02a6d	05 7c 01 00 00	 add	 eax, 380		; 0000017cH
  02a72	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02a77	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02a7f	ba fe ff ff ff	 mov	 edx, -2
  02a84	8b c8		 mov	 ecx, eax
  02a86	e8 00 00 00 00	 call	 s370_vfetch4
  02a8b	b9 08 00 00 00	 mov	 ecx, 8
  02a90	48 6b c9 07	 imul	 rcx, rcx, 7
  02a94	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  02a9c	89 84 0a 00 06
	00 00		 mov	 DWORD PTR [rdx+rcx+1536], eax

; 1638 :         /* Insure proper re-entry */
; 1639 :         EVM_ST(0,STACKVM);

  02aa3	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  02aab	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  02ab1	ba d0 06 00 00	 mov	 edx, 1744		; 000006d0H
  02ab6	33 c9		 xor	 ecx, ecx
  02ab8	e8 00 00 00 00	 call	 s370_vstore4

; 1640 :         /* Update PROBLEM Start time */
; 1641 :         DW1=EVM_LD(vmb+VMTMOUTQ);

  02abd	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  02ac0	83 c0 78	 add	 eax, 120		; 00000078H
  02ac3	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02ac8	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02ad0	ba fe ff ff ff	 mov	 edx, -2
  02ad5	8b c8		 mov	 ecx, eax
  02ad7	e8 00 00 00 00	 call	 s370_vfetch8
  02adc	48 89 85 e8 00
	00 00		 mov	 QWORD PTR DW1$[rbp], rax

; 1642 :         EVM_STD(DW1,PROBSTRT);

  02ae3	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  02aeb	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  02af1	ba a8 06 00 00	 mov	 edx, 1704		; 000006a8H
  02af6	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR DW1$[rbp]
  02afd	e8 00 00 00 00	 call	 s370_vstore8

; 1643 : 
; 1644 :         /* Checkpoint Interval Timer */
; 1645 :         FW1=EVM_L(INTTIMER);

  02b02	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02b0a	ba fe ff ff ff	 mov	 edx, -2
  02b0f	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  02b14	e8 00 00 00 00	 call	 s370_vfetch4
  02b19	89 45 20	 mov	 DWORD PTR FW1$[rbp], eax

; 1646 :         EVM_ST(FW1,QUANTUM);

  02b1c	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  02b24	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  02b2a	ba 54 00 00 00	 mov	 edx, 84			; 00000054H
  02b2f	8b 4d 20	 mov	 ecx, DWORD PTR FW1$[rbp]
  02b32	e8 00 00 00 00	 call	 s370_vstore4

; 1647 : 
; 1648 :         /* Update REAL CR0/CR1 */
; 1649 :         regs->CR_L(0)=NCR0;

  02b37	b8 08 00 00 00	 mov	 eax, 8
  02b3c	48 6b c0 01	 imul	 rax, rax, 1
  02b40	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  02b48	8b 55 54	 mov	 edx, DWORD PTR NCR0$[rbp]
  02b4b	89 94 01 00 06
	00 00		 mov	 DWORD PTR [rcx+rax+1536], edx

; 1650 :         regs->CR_L(1)=NCR1;

  02b52	b8 08 00 00 00	 mov	 eax, 8
  02b57	48 6b c0 02	 imul	 rax, rax, 2
  02b5b	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  02b63	8b 55 58	 mov	 edx, DWORD PTR NCR1$[rbp]
  02b66	89 94 01 00 06
	00 00		 mov	 DWORD PTR [rcx+rax+1536], edx

; 1651 : 
; 1652 :         /* Indicate RUNNING a user */
; 1653 :         EVM_STC(CPRUN,CPSTATUS);

  02b6d	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  02b75	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  02b7b	ba 48 03 00 00	 mov	 edx, 840		; 00000348H
  02b80	b1 40		 mov	 cl, 64			; 00000040H
  02b82	e8 00 00 00 00	 call	 s370_vstoreb

; 1654 : 
; 1655 :         /* Update real PSW with working PSW */
; 1656 : 
; 1657 :         /* Update regs */
; 1658 :         for(i=0;i<16;i++)

  02b87	c7 45 08 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  02b8e	eb 08		 jmp	 SHORT $LN93@ecpsvm_do_
$LN91@ecpsvm_do_:
  02b90	8b 45 08	 mov	 eax, DWORD PTR i$[rbp]
  02b93	ff c0		 inc	 eax
  02b95	89 45 08	 mov	 DWORD PTR i$[rbp], eax
$LN93@ecpsvm_do_:
  02b98	83 7d 08 10	 cmp	 DWORD PTR i$[rbp], 16
  02b9c	7d 3b		 jge	 SHORT $LN92@ecpsvm_do_

; 1659 :         {
; 1660 :             regs->GR_L(i)=EVM_L(vmb+VMGPRS+(i*4));

  02b9e	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  02ba1	8b 4d 08	 mov	 ecx, DWORD PTR i$[rbp]
  02ba4	8d 84 88 b0 00
	00 00		 lea	 eax, DWORD PTR [rax+rcx*4+176]
  02bab	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02bb0	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02bb8	ba fe ff ff ff	 mov	 edx, -2
  02bbd	8b c8		 mov	 ecx, eax
  02bbf	e8 00 00 00 00	 call	 s370_vfetch4
  02bc4	48 63 4d 08	 movsxd	 rcx, DWORD PTR i$[rbp]
  02bc8	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  02bd0	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 1661 :         }

  02bd7	eb b7		 jmp	 SHORT $LN91@ecpsvm_do_
$LN92@ecpsvm_do_:

; 1662 :         /* Clear I/O Old PSW Byte 0 */
; 1663 :         EVM_STC(0,IOOPSW);

  02bd9	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  02be1	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  02be7	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  02bec	33 c9		 xor	 ecx, ecx
  02bee	e8 00 00 00 00	 call	 s370_vstoreb

; 1664 :         /* Issue PTLB if necessary */
; 1665 :         if(EVM_IC(APSTAT2) & CPPTLBR)

  02bf3	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02bfb	ba fe ff ff ff	 mov	 edx, -2
  02c00	b9 9b 06 00 00	 mov	 ecx, 1691		; 0000069bH
  02c05	e8 00 00 00 00	 call	 s370_vfetchb
  02c0a	0f b6 c0	 movzx	 eax, al
  02c0d	83 e0 02	 and	 eax, 2
  02c10	85 c0		 test	 eax, eax
  02c12	0f 84 a8 00 00
	00		 je	 $LN256@ecpsvm_do_

; 1666 :         {
; 1667 :             DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", "DISP2 : Purging TLB"));

  02c18	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  02c1e	c1 e8 02	 shr	 eax, 2
  02c21	83 e0 01	 and	 eax, 1
  02c24	85 c0		 test	 eax, eax
  02c26	74 53		 je	 SHORT $LN257@ecpsvm_do_
  02c28	b9 01 00 00 00	 mov	 ecx, 1
  02c2d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02c33	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171132
  02c3a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02c3f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171133
  02c46	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02c4b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171134
  02c52	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02c57	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02c5c	41 b9 03 00 00
	00		 mov	 r9d, 3
  02c62	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171135
  02c69	ba 83 06 00 00	 mov	 edx, 1667		; 00000683H
  02c6e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171136
  02c75	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN257@ecpsvm_do_:

; 1668 :             ARCH_DEP(purge_tlb)(regs);

  02c7b	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  02c83	e8 00 00 00 00	 call	 s370_purge_tlb

; 1669 :             EVM_STC(EVM_IC(APSTAT2) & ~CPPTLBR,APSTAT2);

  02c88	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02c90	ba fe ff ff ff	 mov	 edx, -2
  02c95	b9 9b 06 00 00	 mov	 ecx, 1691		; 0000069bH
  02c9a	e8 00 00 00 00	 call	 s370_vfetchb
  02c9f	0f b6 c0	 movzx	 eax, al
  02ca2	83 e0 fd	 and	 eax, -3
  02ca5	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  02cad	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  02cb3	ba 9b 06 00 00	 mov	 edx, 1691		; 0000069bH
  02cb8	0f b6 c8	 movzx	 ecx, al
  02cbb	e8 00 00 00 00	 call	 s370_vstoreb
$LN256@ecpsvm_do_:

; 1670 :         }
; 1671 : 
; 1672 :         /* Update cached VMBLOK flags */
; 1673 :         EVM_STC(B_VMDSTAT,vmb+VMDSTAT);

  02cc0	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  02cc3	83 c0 59	 add	 eax, 89			; 00000059H
  02cc6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02ccb	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  02cd3	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  02cd9	8b d0		 mov	 edx, eax
  02cdb	0f b6 4d 0d	 movzx	 ecx, BYTE PTR B_VMDSTAT$[rbp]
  02cdf	e8 00 00 00 00	 call	 s370_vstoreb

; 1674 :         EVM_STC(B_VMRSTAT,vmb+VMRSTAT);

  02ce4	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  02ce7	83 c0 58	 add	 eax, 88			; 00000058H
  02cea	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02cef	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  02cf7	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  02cfd	8b d0		 mov	 edx, eax
  02cff	0f b6 4d 2d	 movzx	 ecx, BYTE PTR B_VMRSTAT$[rbp]
  02d03	e8 00 00 00 00	 call	 s370_vstoreb

; 1675 :         EVM_STC(B_VMESTAT,vmb+VMESTAT);

  02d08	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  02d0b	83 c0 5d	 add	 eax, 93			; 0000005dH
  02d0e	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02d13	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  02d1b	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  02d21	8b d0		 mov	 edx, eax
  02d23	0f b6 4d 06	 movzx	 ecx, BYTE PTR B_VMESTAT$[rbp]
  02d27	e8 00 00 00 00	 call	 s370_vstoreb

; 1676 :         EVM_STC(B_VMPSTAT,vmb+VMPSTAT);

  02d2c	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  02d2f	83 c0 5c	 add	 eax, 92			; 0000005cH
  02d32	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02d37	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  02d3f	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  02d45	8b d0		 mov	 edx, eax
  02d47	0f b6 4d 0c	 movzx	 ecx, BYTE PTR B_VMPSTAT$[rbp]
  02d4b	e8 00 00 00 00	 call	 s370_vstoreb

; 1677 :         EVM_STC(B_VMOSTAT,vmb+VMOSTAT);

  02d50	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  02d53	83 c0 5a	 add	 eax, 90			; 0000005aH
  02d56	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02d5b	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  02d63	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  02d69	8b d0		 mov	 edx, eax
  02d6b	0f b6 4d 1c	 movzx	 ecx, BYTE PTR B_VMOSTAT$[rbp]
  02d6f	e8 00 00 00 00	 call	 s370_vstoreb

; 1678 :         work_p=MADDR(vmb+VMPSW,USE_REAL_ADDR,regs,ACCTYPE_WRITE,0); \

  02d74	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  02d77	05 a8 00 00 00	 add	 eax, 168		; 000000a8H
  02d7c	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  02d81	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  02d89	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  02d91	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  02d97	ba 01 00 00 00	 mov	 edx, 1
  02d9c	8b c8		 mov	 ecx, eax
  02d9e	e8 00 00 00 00	 call	 s370_maddr_l
  02da3	48 89 45 60	 mov	 QWORD PTR work_p$[rbp], rax

; 1679 :         ARCH_DEP(store_psw) (&wregs,work_p);

  02da7	48 8b 55 60	 mov	 rdx, QWORD PTR work_p$[rbp]
  02dab	48 8d 8d 00 62
	01 00		 lea	 rcx, QWORD PTR wregs$[rbp]
  02db2	e8 00 00 00 00	 call	 s370_store_psw

; 1680 : 
; 1681 : 
; 1682 :         /* Stop charging current VM Block for Supervisor time */
; 1683 :         CHARGE_STOP(vmb);

  02db7	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  02dba	05 80 00 00 00	 add	 eax, 128		; 00000080H
  02dbf	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02dc4	89 85 c4 00 00
	00		 mov	 DWORD PTR tv1987[rbp], eax
  02dca	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  02dd2	e8 00 00 00 00	 call	 get_cpu_timer
  02dd7	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  02ddf	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  02de5	8b 8d c4 00 00
	00		 mov	 ecx, DWORD PTR tv1987[rbp]
  02deb	8b d1		 mov	 edx, ecx
  02ded	48 8b c8	 mov	 rcx, rax
  02df0	e8 00 00 00 00	 call	 s370_vstore8

; 1684 : 
; 1685 :         /* Rest goes for problem state */
; 1686 :         SPT(vmb+VMTMOUTQ);

  02df5	8b 45 00	 mov	 eax, DWORD PTR vmb$[rbp]
  02df8	83 c0 78	 add	 eax, 120		; 00000078H
  02dfb	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02e00	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02e08	ba fe ff ff ff	 mov	 edx, -2
  02e0d	8b c8		 mov	 ecx, eax
  02e0f	e8 00 00 00 00	 call	 s370_vfetch8
  02e14	48 8b d0	 mov	 rdx, rax
  02e17	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  02e1f	e8 00 00 00 00	 call	 set_cpu_timer
  02e24	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG171137
  02e2b	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  02e33	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock
  02e38	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  02e40	e8 00 00 00 00	 call	 get_cpu_timer
  02e45	48 85 c0	 test	 rax, rax
  02e48	7d 53		 jge	 SHORT $LN258@ecpsvm_do_
$LN96@ecpsvm_do_:
  02e4a	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  02e52	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  02e55	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  02e5a	85 c0		 test	 eax, eax
  02e5c	74 1d		 je	 SHORT $LN260@ecpsvm_do_
  02e5e	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  02e66	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  02e69	0d 00 04 00 80	 or	 eax, -2147482624	; 80000400H
  02e6e	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  02e76	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  02e79	eb 1a		 jmp	 SHORT $LN261@ecpsvm_do_
$LN260@ecpsvm_do_:
  02e7b	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  02e83	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  02e86	0f ba e8 0a	 bts	 eax, 10
  02e8a	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  02e92	89 41 48	 mov	 DWORD PTR [rcx+72], eax
$LN261@ecpsvm_do_:
  02e95	33 c0		 xor	 eax, eax
  02e97	85 c0		 test	 eax, eax
  02e99	75 af		 jne	 SHORT $LN96@ecpsvm_do_
  02e9b	eb 20		 jmp	 SHORT $LN259@ecpsvm_do_
$LN258@ecpsvm_do_:
$LN99@ecpsvm_do_:
  02e9d	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  02ea5	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  02ea8	0f ba f0 0a	 btr	 eax, 10
  02eac	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  02eb4	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  02eb7	33 c0		 xor	 eax, eax
  02eb9	85 c0		 test	 eax, eax
  02ebb	75 e0		 jne	 SHORT $LN99@ecpsvm_do_
$LN259@ecpsvm_do_:
  02ebd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG171142
  02ec4	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  02ecc	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 1687 :         /* Save RUNCR0, RUNCR1 & RUNPSW */
; 1688 :         /* Might be used by later CP Modules (including DMKPRV) */
; 1689 :         EVM_ST(NCR0,RUNCR0);

  02ed1	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  02ed9	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  02edf	ba 40 03 00 00	 mov	 edx, 832		; 00000340H
  02ee4	8b 4d 54	 mov	 ecx, DWORD PTR NCR0$[rbp]
  02ee7	e8 00 00 00 00	 call	 s370_vstore4

; 1690 :         EVM_ST(NCR1,RUNCR1);

  02eec	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  02ef4	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  02efa	ba 44 03 00 00	 mov	 edx, 836		; 00000344H
  02eff	8b 4d 58	 mov	 ecx, DWORD PTR NCR1$[rbp]
  02f02	e8 00 00 00 00	 call	 s370_vstore4

; 1691 :         work_p=MADDR(RUNPSW,USE_REAL_ADDR,regs,ACCTYPE_WRITE,0); \

  02f07	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  02f0c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  02f14	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  02f1c	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  02f22	ba 01 00 00 00	 mov	 edx, 1
  02f27	b9 30 03 00 00	 mov	 ecx, 816		; 00000330H
  02f2c	e8 00 00 00 00	 call	 s370_maddr_l
  02f31	48 89 45 60	 mov	 QWORD PTR work_p$[rbp], rax

; 1692 :         ARCH_DEP(store_psw) (&rregs,work_p);

  02f35	48 8b 55 60	 mov	 rdx, QWORD PTR work_p$[rbp]
  02f39	48 8d 8d 80 01
	00 00		 lea	 rcx, QWORD PTR rregs$[rbp]
  02f40	e8 00 00 00 00	 call	 s370_store_psw

; 1693 : 
; 1694 :         /* Write the trace entry before the user's PSW key is loaded into the real PSW */
; 1695 :         if (EVM_IC(TRACFLG2) & TRAC0A)

  02f45	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02f4d	ba fe ff ff ff	 mov	 edx, -2
  02f52	b9 01 04 00 00	 mov	 ecx, 1025		; 00000401H
  02f57	e8 00 00 00 00	 call	 s370_vfetchb
  02f5c	0f b6 c0	 movzx	 eax, al
  02f5f	25 80 00 00 00	 and	 eax, 128		; 00000080H
  02f64	85 c0		 test	 eax, eax
  02f66	0f 84 b7 00 00
	00		 je	 $LN262@ecpsvm_do_

; 1696 :         {
; 1697 :             traceptr=ecpsvm_get_trace_entry(regs);

  02f6c	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  02f74	e8 00 00 00 00	 call	 ecpsvm_get_trace_entry
  02f79	89 45 4c	 mov	 DWORD PTR traceptr$[rbp], eax

; 1698 :             EVM_ST(0,traceptr);

  02f7c	8b 45 4c	 mov	 eax, DWORD PTR traceptr$[rbp]
  02f7f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02f84	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  02f8c	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  02f92	8b d0		 mov	 edx, eax
  02f94	33 c9		 xor	 ecx, ecx
  02f96	e8 00 00 00 00	 call	 s370_vstore4

; 1699 :             EVM_STC(TRCRUN,traceptr);

  02f9b	8b 45 4c	 mov	 eax, DWORD PTR traceptr$[rbp]
  02f9e	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02fa3	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  02fab	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  02fb1	8b d0		 mov	 edx, eax
  02fb3	b1 8a		 mov	 cl, 138			; 0000008aH
  02fb5	e8 00 00 00 00	 call	 s370_vstoreb

; 1700 :             EVM_ST(vmb,traceptr+4);

  02fba	8b 45 4c	 mov	 eax, DWORD PTR traceptr$[rbp]
  02fbd	83 c0 04	 add	 eax, 4
  02fc0	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02fc5	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  02fcd	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  02fd3	8b d0		 mov	 edx, eax
  02fd5	8b 4d 00	 mov	 ecx, DWORD PTR vmb$[rbp]
  02fd8	e8 00 00 00 00	 call	 s370_vstore4

; 1701 :             EVM_STD(EVM_LD(RUNPSW),traceptr+8);

  02fdd	8b 45 4c	 mov	 eax, DWORD PTR traceptr$[rbp]
  02fe0	83 c0 08	 add	 eax, 8
  02fe3	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  02fe8	89 85 c8 00 00
	00		 mov	 DWORD PTR tv2066[rbp], eax
  02fee	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  02ff6	ba fe ff ff ff	 mov	 edx, -2
  02ffb	b9 30 03 00 00	 mov	 ecx, 816		; 00000330H
  03000	e8 00 00 00 00	 call	 s370_vfetch8
  03005	4c 8b 8c 24 b0
	c7 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  0300d	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  03013	8b 8d c8 00 00
	00		 mov	 ecx, DWORD PTR tv2066[rbp]
  03019	8b d1		 mov	 edx, ecx
  0301b	48 8b c8	 mov	 rcx, rax
  0301e	e8 00 00 00 00	 call	 s370_vstore8
$LN262@ecpsvm_do_:

; 1702 :         }
; 1703 : 
; 1704 :         DEBUG_CPASSISTX(DISP2,MSGBUF(buf, "DISP2 : Entry Real PSW="));

  03023	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  03029	c1 e8 02	 shr	 eax, 2
  0302c	83 e0 01	 and	 eax, 1
  0302f	85 c0		 test	 eax, eax
  03031	74 19		 je	 SHORT $LN263@ecpsvm_do_
  03033	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171145
  0303a	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  0303f	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  03046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN263@ecpsvm_do_:

; 1705 :         DEBUG_CPASSISTX(DISP2,display_psw(regs, &buf[strlen(buf)], sizeof(buf)-(int)strlen(buf)));

  0304c	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  03052	c1 e8 02	 shr	 eax, 2
  03055	83 e0 01	 and	 eax, 1
  03058	85 c0		 test	 eax, eax
  0305a	74 4e		 je	 SHORT $LN264@ecpsvm_do_
  0305c	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  03063	e8 00 00 00 00	 call	 strlen
  03068	48 98		 cdqe
  0306a	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  0306f	48 2b c8	 sub	 rcx, rax
  03072	48 8b c1	 mov	 rax, rcx
  03075	48 89 85 f0 00
	00 00		 mov	 QWORD PTR tv2087[rbp], rax
  0307c	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  03083	e8 00 00 00 00	 call	 strlen
  03088	48 8d 84 05 c0
	c2 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  03090	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR tv2087[rbp]
  03097	44 8b c1	 mov	 r8d, ecx
  0309a	48 8b d0	 mov	 rdx, rax
  0309d	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  030a5	e8 00 00 00 00	 call	 display_psw
$LN264@ecpsvm_do_:

; 1706 :         DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  030aa	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  030b0	c1 e8 02	 shr	 eax, 2
  030b3	83 e0 01	 and	 eax, 1
  030b6	85 c0		 test	 eax, eax
  030b8	74 53		 je	 SHORT $LN265@ecpsvm_do_
  030ba	b9 01 00 00 00	 mov	 ecx, 1
  030bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  030c5	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  030cc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  030d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171148
  030d8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  030dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171149
  030e4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  030e9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  030ee	41 b9 03 00 00
	00		 mov	 r9d, 3
  030f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171150
  030fb	ba aa 06 00 00	 mov	 edx, 1706		; 000006aaH
  03100	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171151
  03107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN265@ecpsvm_do_:

; 1707 :         ARCH_DEP(load_psw) (regs,work_p);

  0310d	48 8b 55 60	 mov	 rdx, QWORD PTR work_p$[rbp]
  03111	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03119	e8 00 00 00 00	 call	 s370_load_psw

; 1708 :         DEBUG_CPASSISTX(DISP2,MSGBUF(buf, "DISP2 : VMB @ %6.6X Now being dispatched",vmb));

  0311e	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  03124	c1 e8 02	 shr	 eax, 2
  03127	83 e0 01	 and	 eax, 1
  0312a	85 c0		 test	 eax, eax
  0312c	74 1d		 je	 SHORT $LN266@ecpsvm_do_
  0312e	44 8b 4d 00	 mov	 r9d, DWORD PTR vmb$[rbp]
  03132	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171153
  03139	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  0313e	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  03145	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN266@ecpsvm_do_:

; 1709 :         DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  0314b	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  03151	c1 e8 02	 shr	 eax, 2
  03154	83 e0 01	 and	 eax, 1
  03157	85 c0		 test	 eax, eax
  03159	74 53		 je	 SHORT $LN267@ecpsvm_do_
  0315b	b9 01 00 00 00	 mov	 ecx, 1
  03160	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03166	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0316d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  03172	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171155
  03179	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0317e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171156
  03185	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0318a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0318f	41 b9 03 00 00
	00		 mov	 r9d, 3
  03195	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171157
  0319c	ba ad 06 00 00	 mov	 edx, 1709		; 000006adH
  031a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171158
  031a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN267@ecpsvm_do_:

; 1710 :         DEBUG_CPASSISTX(DISP2,MSGBUF(buf, "DISP2 : Real PSW="));

  031ae	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  031b4	c1 e8 02	 shr	 eax, 2
  031b7	83 e0 01	 and	 eax, 1
  031ba	85 c0		 test	 eax, eax
  031bc	74 19		 je	 SHORT $LN268@ecpsvm_do_
  031be	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171160
  031c5	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  031ca	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  031d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN268@ecpsvm_do_:

; 1711 :         DEBUG_CPASSISTX(DISP2,display_psw(regs, &buf[strlen(buf)], sizeof(buf)-(int)strlen(buf)));

  031d7	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  031dd	c1 e8 02	 shr	 eax, 2
  031e0	83 e0 01	 and	 eax, 1
  031e3	85 c0		 test	 eax, eax
  031e5	74 4e		 je	 SHORT $LN269@ecpsvm_do_
  031e7	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  031ee	e8 00 00 00 00	 call	 strlen
  031f3	48 98		 cdqe
  031f5	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  031fa	48 2b c8	 sub	 rcx, rax
  031fd	48 8b c1	 mov	 rax, rcx
  03200	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv2144[rbp], rax
  03207	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0320e	e8 00 00 00 00	 call	 strlen
  03213	48 8d 84 05 c0
	c2 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  0321b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR tv2144[rbp]
  03222	44 8b c1	 mov	 r8d, ecx
  03225	48 8b d0	 mov	 rdx, rax
  03228	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03230	e8 00 00 00 00	 call	 display_psw
$LN269@ecpsvm_do_:

; 1712 :         DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  03235	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  0323b	c1 e8 02	 shr	 eax, 2
  0323e	83 e0 01	 and	 eax, 1
  03241	85 c0		 test	 eax, eax
  03243	74 53		 je	 SHORT $LN270@ecpsvm_do_
  03245	b9 01 00 00 00	 mov	 ecx, 1
  0324a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03250	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  03257	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0325c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171163
  03263	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03268	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171164
  0326f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03274	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03279	41 b9 03 00 00
	00		 mov	 r9d, 3
  0327f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171165
  03286	ba b0 06 00 00	 mov	 edx, 1712		; 000006b0H
  0328b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171166
  03292	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN270@ecpsvm_do_:

; 1713 :         DEBUG_CPASSISTX(DISP2,MSGBUF(buf, "DISP2 : Virtual PSW="));

  03298	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  0329e	c1 e8 02	 shr	 eax, 2
  032a1	83 e0 01	 and	 eax, 1
  032a4	85 c0		 test	 eax, eax
  032a6	74 19		 je	 SHORT $LN271@ecpsvm_do_
  032a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171168
  032af	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  032b4	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  032bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN271@ecpsvm_do_:

; 1714 :         DEBUG_CPASSISTX(DISP2,display_psw(&wregs, &buf[strlen(buf)], sizeof(buf)-(int)strlen(buf)));

  032c1	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  032c7	c1 e8 02	 shr	 eax, 2
  032ca	83 e0 01	 and	 eax, 1
  032cd	85 c0		 test	 eax, eax
  032cf	74 4d		 je	 SHORT $LN272@ecpsvm_do_
  032d1	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  032d8	e8 00 00 00 00	 call	 strlen
  032dd	48 98		 cdqe
  032df	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  032e4	48 2b c8	 sub	 rcx, rax
  032e7	48 8b c1	 mov	 rax, rcx
  032ea	48 89 85 00 01
	00 00		 mov	 QWORD PTR tv2179[rbp], rax
  032f1	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  032f8	e8 00 00 00 00	 call	 strlen
  032fd	48 8d 84 05 c0
	c2 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  03305	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR tv2179[rbp]
  0330c	44 8b c1	 mov	 r8d, ecx
  0330f	48 8b d0	 mov	 rdx, rax
  03312	48 8d 8d 00 62
	01 00		 lea	 rcx, QWORD PTR wregs$[rbp]
  03319	e8 00 00 00 00	 call	 display_psw
$LN272@ecpsvm_do_:

; 1715 :         DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  0331e	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  03324	c1 e8 02	 shr	 eax, 2
  03327	83 e0 01	 and	 eax, 1
  0332a	85 c0		 test	 eax, eax
  0332c	74 53		 je	 SHORT $LN273@ecpsvm_do_
  0332e	b9 01 00 00 00	 mov	 ecx, 1
  03333	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03339	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  03340	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  03345	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171171
  0334c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03351	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171172
  03358	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0335d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03362	41 b9 03 00 00
	00		 mov	 r9d, 3
  03368	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171173
  0336f	ba b3 06 00 00	 mov	 edx, 1715		; 000006b3H
  03374	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171174
  0337b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN273@ecpsvm_do_:

; 1716 : 
; 1717 :         /* TEST */
; 1718 :         ARCH_DEP(purge_tlb)(regs);

  03381	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03389	e8 00 00 00 00	 call	 s370_purge_tlb
$LN102@ecpsvm_do_:

; 1719 :         SET_IC_MASK(regs);

  0338e	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03396	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  0339a	83 e0 08	 and	 eax, 8
  0339d	85 c0		 test	 eax, eax
  0339f	74 2b		 je	 SHORT $LN299@ecpsvm_do_
  033a1	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  033a9	0f b6 40 78	 movzx	 eax, BYTE PTR [rax+120]
  033ad	83 e0 02	 and	 eax, 2
  033b0	85 c0		 test	 eax, eax
  033b2	74 09		 je	 SHORT $LN295@ecpsvm_do_
  033b4	c7 45 6c 00 00
	00 40		 mov	 DWORD PTR tv2210[rbp], 1073741824 ; 40000000H
  033bb	eb 07		 jmp	 SHORT $LN296@ecpsvm_do_
$LN295@ecpsvm_do_:
  033bd	c7 45 6c 00 00
	00 00		 mov	 DWORD PTR tv2210[rbp], 0
$LN296@ecpsvm_do_:
  033c4	8b 45 6c	 mov	 eax, DWORD PTR tv2210[rbp]
  033c7	89 45 78	 mov	 DWORD PTR tv2216[rbp], eax
  033ca	eb 2b		 jmp	 SHORT $LN300@ecpsvm_do_
$LN299@ecpsvm_do_:
  033cc	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  033d4	0f b6 40 78	 movzx	 eax, BYTE PTR [rax+120]
  033d8	25 fe 00 00 00	 and	 eax, 254		; 000000feH
  033dd	85 c0		 test	 eax, eax
  033df	74 09		 je	 SHORT $LN297@ecpsvm_do_
  033e1	c7 45 70 00 00
	00 40		 mov	 DWORD PTR tv2215[rbp], 1073741824 ; 40000000H
  033e8	eb 07		 jmp	 SHORT $LN298@ecpsvm_do_
$LN297@ecpsvm_do_:
  033ea	c7 45 70 00 00
	00 00		 mov	 DWORD PTR tv2215[rbp], 0
$LN298@ecpsvm_do_:
  033f1	8b 45 70	 mov	 eax, DWORD PTR tv2215[rbp]
  033f4	89 45 78	 mov	 DWORD PTR tv2216[rbp], eax
$LN300@ecpsvm_do_:
  033f7	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  033ff	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  03403	83 e0 04	 and	 eax, 4
  03406	85 c0		 test	 eax, eax
  03408	74 22		 je	 SHORT $LN301@ecpsvm_do_
  0340a	b8 08 00 00 00	 mov	 eax, 8
  0340f	48 6b c0 0f	 imul	 rax, rax, 15
  03413	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0341b	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  03422	25 00 00 00 1f	 and	 eax, 520093696		; 1f000000H
  03427	89 45 7c	 mov	 DWORD PTR tv2227[rbp], eax
  0342a	eb 07		 jmp	 SHORT $LN302@ecpsvm_do_
$LN301@ecpsvm_do_:
  0342c	c7 45 7c 00 00
	00 00		 mov	 DWORD PTR tv2227[rbp], 0
$LN302@ecpsvm_do_:
  03433	33 c0		 xor	 eax, eax
  03435	85 c0		 test	 eax, eax
  03437	75 63		 jne	 SHORT $LN304@ecpsvm_do_
  03439	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03441	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  03445	83 e0 08	 and	 eax, 8
  03448	85 c0		 test	 eax, eax
  0344a	74 13		 je	 SHORT $LN303@ecpsvm_do_
  0344c	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03454	0f b6 40 78	 movzx	 eax, BYTE PTR [rax+120]
  03458	83 e0 40	 and	 eax, 64			; 00000040H
  0345b	85 c0		 test	 eax, eax
  0345d	75 3d		 jne	 SHORT $LN304@ecpsvm_do_
$LN303@ecpsvm_do_:
  0345f	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03467	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  0346d	d1 e8		 shr	 eax, 1
  0346f	83 e0 01	 and	 eax, 1
  03472	85 c0		 test	 eax, eax
  03474	74 1a		 je	 SHORT $LN305@ecpsvm_do_
  03476	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0347e	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  03485	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  03489	83 e0 01	 and	 eax, 1
  0348c	85 c0		 test	 eax, eax
  0348e	75 0c		 jne	 SHORT $LN304@ecpsvm_do_
$LN305@ecpsvm_do_:
  03490	c7 85 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv2249[rbp], 0
  0349a	eb 16		 jmp	 SHORT $LN306@ecpsvm_do_
$LN304@ecpsvm_do_:
  0349c	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  034a4	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  034a7	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  034ac	89 85 80 00 00
	00		 mov	 DWORD PTR tv2249[rbp], eax
$LN306@ecpsvm_do_:
  034b2	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  034ba	0f b6 40 78	 movzx	 eax, BYTE PTR [rax+120]
  034be	83 e0 01	 and	 eax, 1
  034c1	85 c0		 test	 eax, eax
  034c3	74 59		 je	 SHORT $LN309@ecpsvm_do_
  034c5	b8 08 00 00 00	 mov	 eax, 8
  034ca	48 6b c0 01	 imul	 rax, rax, 1
  034ce	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  034d6	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  034dd	25 80 00 00 00	 and	 eax, 128		; 00000080H
  034e2	85 c0		 test	 eax, eax
  034e4	74 09		 je	 SHORT $LN307@ecpsvm_do_
  034e6	c7 45 74 00 01
	00 00		 mov	 DWORD PTR tv2265[rbp], 256 ; 00000100H
  034ed	eb 07		 jmp	 SHORT $LN308@ecpsvm_do_
$LN307@ecpsvm_do_:
  034ef	c7 45 74 00 00
	00 00		 mov	 DWORD PTR tv2265[rbp], 0
$LN308@ecpsvm_do_:
  034f6	b8 08 00 00 00	 mov	 eax, 8
  034fb	48 6b c0 01	 imul	 rax, rax, 1
  034ff	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03507	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  0350e	25 f0 fe 00 00	 and	 eax, 65264		; 0000fef0H
  03513	0b 45 74	 or	 eax, DWORD PTR tv2265[rbp]
  03516	89 85 84 00 00
	00		 mov	 DWORD PTR tv2268[rbp], eax
  0351c	eb 0a		 jmp	 SHORT $LN310@ecpsvm_do_
$LN309@ecpsvm_do_:
  0351e	c7 85 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv2268[rbp], 0
$LN310@ecpsvm_do_:
  03528	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03530	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  03534	83 e0 02	 and	 eax, 2
  03537	85 c0		 test	 eax, eax
  03539	74 0c		 je	 SHORT $LN311@ecpsvm_do_
  0353b	c7 85 88 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv2274[rbp], 1
  03545	eb 0a		 jmp	 SHORT $LN312@ecpsvm_do_
$LN311@ecpsvm_do_:
  03547	c7 85 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv2274[rbp], 0
$LN312@ecpsvm_do_:
  03551	8b 45 78	 mov	 eax, DWORD PTR tv2216[rbp]
  03554	0d 0a 00 00 80	 or	 eax, -2147483638	; 8000000aH
  03559	0b 45 7c	 or	 eax, DWORD PTR tv2227[rbp]
  0355c	0b 85 80 00 00
	00		 or	 eax, DWORD PTR tv2249[rbp]
  03562	0b 85 84 00 00
	00		 or	 eax, DWORD PTR tv2268[rbp]
  03568	0b 85 88 00 00
	00		 or	 eax, DWORD PTR tv2274[rbp]
  0356e	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03576	89 41 4c	 mov	 DWORD PTR [rcx+76], eax
  03579	33 c0		 xor	 eax, eax
  0357b	85 c0		 test	 eax, eax
  0357d	75 63		 jne	 SHORT $LN314@ecpsvm_do_
  0357f	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03587	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  0358b	83 e0 08	 and	 eax, 8
  0358e	85 c0		 test	 eax, eax
  03590	74 13		 je	 SHORT $LN313@ecpsvm_do_
  03592	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0359a	0f b6 40 78	 movzx	 eax, BYTE PTR [rax+120]
  0359e	83 e0 40	 and	 eax, 64			; 00000040H
  035a1	85 c0		 test	 eax, eax
  035a3	75 3d		 jne	 SHORT $LN314@ecpsvm_do_
$LN313@ecpsvm_do_:
  035a5	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  035ad	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  035b3	d1 e8		 shr	 eax, 1
  035b5	83 e0 01	 and	 eax, 1
  035b8	85 c0		 test	 eax, eax
  035ba	74 1a		 je	 SHORT $LN315@ecpsvm_do_
  035bc	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  035c4	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  035cb	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  035cf	83 e0 01	 and	 eax, 1
  035d2	85 c0		 test	 eax, eax
  035d4	75 0c		 jne	 SHORT $LN314@ecpsvm_do_
$LN315@ecpsvm_do_:
  035d6	c7 85 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv2295[rbp], 0
  035e0	eb 0a		 jmp	 SHORT $LN316@ecpsvm_do_
$LN314@ecpsvm_do_:
  035e2	c7 85 8c 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv2295[rbp], 1
$LN316@ecpsvm_do_:
  035ec	8b 85 8c 00 00
	00		 mov	 eax, DWORD PTR tv2295[rbp]
  035f2	83 e0 01	 and	 eax, 1
  035f5	c1 e0 02	 shl	 eax, 2
  035f8	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03600	8b 89 28 07 00
	00		 mov	 ecx, DWORD PTR [rcx+1832]
  03606	83 e1 fb	 and	 ecx, -5			; fffffffbH
  03609	0b c8		 or	 ecx, eax
  0360b	89 8d 90 00 00
	00		 mov	 DWORD PTR tv2300[rbp], ecx
  03611	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03619	8b 8d 90 00 00
	00		 mov	 ecx, DWORD PTR tv2300[rbp]
  0361f	89 88 28 07 00
	00		 mov	 DWORD PTR [rax+1832], ecx
  03625	8b 85 90 00 00
	00		 mov	 eax, DWORD PTR tv2300[rbp]
  0362b	c1 e8 02	 shr	 eax, 2
  0362e	83 e0 01	 and	 eax, 1
  03631	85 c0		 test	 eax, eax
  03633	74 6e		 je	 SHORT $LN274@ecpsvm_do_
$LN105@ecpsvm_do_:
  03635	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0363d	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  03645	74 56		 je	 SHORT $LN275@ecpsvm_do_
  03647	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0364f	8b 80 10 02 00
	00		 mov	 eax, DWORD PTR [rax+528]
  03655	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0365d	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  03665	48 8b 92 00 02
	00 00		 mov	 rdx, QWORD PTR [rdx+512]
  0366c	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  03670	48 2b ca	 sub	 rcx, rdx
  03673	48 03 c1	 add	 rax, rcx
  03676	48 25 ff ff ff
	00		 and	 rax, 16777215		; 00ffffffH
  0367c	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03684	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  0368a	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03692	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN275@ecpsvm_do_:
  0369d	33 c0		 xor	 eax, eax
  0369f	85 c0		 test	 eax, eax
  036a1	75 92		 jne	 SHORT $LN105@ecpsvm_do_
$LN274@ecpsvm_do_:
  036a3	33 c0		 xor	 eax, eax
  036a5	85 c0		 test	 eax, eax
  036a7	0f 85 e1 fc ff
	ff		 jne	 $LN102@ecpsvm_do_
$LN108@ecpsvm_do_:

; 1720 :         SET_AEA_MODE(regs);

  036ad	b8 04 00 00 00	 mov	 eax, 4
  036b2	48 6b c0 04	 imul	 rax, rax, 4
  036b6	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  036be	8b 84 01 94 0c
	00 00		 mov	 eax, DWORD PTR [rcx+rax+3220]
  036c5	89 85 cc 00 00
	00		 mov	 DWORD PTR inst_cr$3[rbp], eax
  036cb	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  036d3	0f b6 80 90 0c
	00 00		 movzx	 eax, BYTE PTR [rax+3216]
  036da	88 45 2e	 mov	 BYTE PTR oldmode$2[rbp], al
  036dd	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  036e5	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  036e9	83 e0 08	 and	 eax, 8
  036ec	85 c0		 test	 eax, eax
  036ee	74 2c		 je	 SHORT $LN317@ecpsvm_do_
  036f0	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  036f8	0f b6 40 78	 movzx	 eax, BYTE PTR [rax+120]
  036fc	83 e0 04	 and	 eax, 4
  036ff	85 c0		 test	 eax, eax
  03701	74 19		 je	 SHORT $LN317@ecpsvm_do_
  03703	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0370b	0f b6 40 7b	 movzx	 eax, BYTE PTR [rax+123]
  0370f	c1 f8 06	 sar	 eax, 6
  03712	ff c0		 inc	 eax
  03714	89 85 9c 00 00
	00		 mov	 DWORD PTR tv2349[rbp], eax
  0371a	eb 66		 jmp	 SHORT $LN320@ecpsvm_do_
$LN317@ecpsvm_do_:
  0371c	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03724	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  0372a	d1 e8		 shr	 eax, 1
  0372c	83 e0 01	 and	 eax, 1
  0372f	85 c0		 test	 eax, eax
  03731	74 39		 je	 SHORT $LN318@ecpsvm_do_
  03733	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0373b	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  03742	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  03746	83 e0 01	 and	 eax, 1
  03749	85 c0		 test	 eax, eax
  0374b	74 1f		 je	 SHORT $LN318@ecpsvm_do_
  0374d	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03755	0f b6 40 7b	 movzx	 eax, BYTE PTR [rax+123]
  03759	83 e0 40	 and	 eax, 64			; 00000040H
  0375c	85 c0		 test	 eax, eax
  0375e	74 0c		 je	 SHORT $LN318@ecpsvm_do_
  03760	c7 85 94 00 00
	00 02 00 00 00	 mov	 DWORD PTR tv2344[rbp], 2
  0376a	eb 0a		 jmp	 SHORT $LN319@ecpsvm_do_
$LN318@ecpsvm_do_:
  0376c	c7 85 94 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv2344[rbp], 0
$LN319@ecpsvm_do_:
  03776	8b 85 94 00 00
	00		 mov	 eax, DWORD PTR tv2344[rbp]
  0377c	89 85 9c 00 00
	00		 mov	 DWORD PTR tv2349[rbp], eax
$LN320@ecpsvm_do_:
  03782	33 c0		 xor	 eax, eax
  03784	85 c0		 test	 eax, eax
  03786	75 63		 jne	 SHORT $LN322@ecpsvm_do_
  03788	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03790	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  03794	83 e0 08	 and	 eax, 8
  03797	85 c0		 test	 eax, eax
  03799	74 13		 je	 SHORT $LN321@ecpsvm_do_
  0379b	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  037a3	0f b6 40 78	 movzx	 eax, BYTE PTR [rax+120]
  037a7	83 e0 40	 and	 eax, 64			; 00000040H
  037aa	85 c0		 test	 eax, eax
  037ac	75 3d		 jne	 SHORT $LN322@ecpsvm_do_
$LN321@ecpsvm_do_:
  037ae	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  037b6	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  037bc	d1 e8		 shr	 eax, 1
  037be	83 e0 01	 and	 eax, 1
  037c1	85 c0		 test	 eax, eax
  037c3	74 1a		 je	 SHORT $LN323@ecpsvm_do_
  037c5	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  037cd	48 8b 80 88 08
	00 00		 mov	 rax, QWORD PTR [rax+2184]
  037d4	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  037d8	83 e0 01	 and	 eax, 1
  037db	85 c0		 test	 eax, eax
  037dd	75 0c		 jne	 SHORT $LN322@ecpsvm_do_
$LN323@ecpsvm_do_:
  037df	c7 85 98 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv2368[rbp], 0
  037e9	eb 0a		 jmp	 SHORT $LN324@ecpsvm_do_
$LN322@ecpsvm_do_:
  037eb	c7 85 98 00 00
	00 40 00 00 00	 mov	 DWORD PTR tv2368[rbp], 64 ; 00000040H
$LN324@ecpsvm_do_:
  037f5	8b 85 98 00 00
	00		 mov	 eax, DWORD PTR tv2368[rbp]
  037fb	8b 8d 9c 00 00
	00		 mov	 ecx, DWORD PTR tv2349[rbp]
  03801	0b c8		 or	 ecx, eax
  03803	8b c1		 mov	 eax, ecx
  03805	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0380d	88 81 90 0c 00
	00		 mov	 BYTE PTR [rcx+3216], al
  03813	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0381b	0f b6 80 90 0c
	00 00		 movzx	 eax, BYTE PTR [rax+3216]
  03822	83 e0 0f	 and	 eax, 15
  03825	89 85 a0 00 00
	00		 mov	 DWORD PTR tv2374[rbp], eax
  0382b	83 bd a0 00 00
	00 01		 cmp	 DWORD PTR tv2374[rbp], 1
  03832	74 0e		 je	 SHORT $LN276@ecpsvm_do_
  03834	83 bd a0 00 00
	00 03		 cmp	 DWORD PTR tv2374[rbp], 3
  0383b	74 3e		 je	 SHORT $LN277@ecpsvm_do_
  0383d	e9 8b 00 00 00	 jmp	 $LN278@ecpsvm_do_
$LN276@ecpsvm_do_:
  03842	c7 45 14 ff ff
	ff ff		 mov	 DWORD PTR i$1[rbp], -1
  03849	eb 08		 jmp	 SHORT $LN113@ecpsvm_do_
$LN111@ecpsvm_do_:
  0384b	8b 45 14	 mov	 eax, DWORD PTR i$1[rbp]
  0384e	ff c0		 inc	 eax
  03850	89 45 14	 mov	 DWORD PTR i$1[rbp], eax
$LN113@ecpsvm_do_:
  03853	83 7d 14 10	 cmp	 DWORD PTR i$1[rbp], 16
  03857	7d 1d		 jge	 SHORT $LN112@ecpsvm_do_
  03859	8b 45 14	 mov	 eax, DWORD PTR i$1[rbp]
  0385c	83 c0 05	 add	 eax, 5
  0385f	48 98		 cdqe
  03861	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03869	c7 84 81 94 0c
	00 00 01 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+3220], 1
  03874	eb d5		 jmp	 SHORT $LN111@ecpsvm_do_
$LN112@ecpsvm_do_:
  03876	e9 86 00 00 00	 jmp	 $LN109@ecpsvm_do_
$LN277@ecpsvm_do_:
  0387b	b8 04 00 00 00	 mov	 eax, 4
  03880	48 6b c0 04	 imul	 rax, rax, 4
  03884	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0388c	c7 84 01 94 0c
	00 00 01 00 00
	00		 mov	 DWORD PTR [rcx+rax+3220], 1
  03897	c7 45 14 00 00
	00 00		 mov	 DWORD PTR i$1[rbp], 0
  0389e	eb 08		 jmp	 SHORT $LN116@ecpsvm_do_
$LN114@ecpsvm_do_:
  038a0	8b 45 14	 mov	 eax, DWORD PTR i$1[rbp]
  038a3	ff c0		 inc	 eax
  038a5	89 45 14	 mov	 DWORD PTR i$1[rbp], eax
$LN116@ecpsvm_do_:
  038a8	83 7d 14 10	 cmp	 DWORD PTR i$1[rbp], 16
  038ac	7d 1d		 jge	 SHORT $LN115@ecpsvm_do_
  038ae	8b 45 14	 mov	 eax, DWORD PTR i$1[rbp]
  038b1	83 c0 05	 add	 eax, 5
  038b4	48 98		 cdqe
  038b6	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  038be	c7 84 81 94 0c
	00 00 07 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+3220], 7
  038c9	eb d5		 jmp	 SHORT $LN114@ecpsvm_do_
$LN115@ecpsvm_do_:
  038cb	eb 34		 jmp	 SHORT $LN109@ecpsvm_do_
$LN278@ecpsvm_do_:
  038cd	c7 45 14 ff ff
	ff ff		 mov	 DWORD PTR i$1[rbp], -1
  038d4	eb 08		 jmp	 SHORT $LN119@ecpsvm_do_
$LN117@ecpsvm_do_:
  038d6	8b 45 14	 mov	 eax, DWORD PTR i$1[rbp]
  038d9	ff c0		 inc	 eax
  038db	89 45 14	 mov	 DWORD PTR i$1[rbp], eax
$LN119@ecpsvm_do_:
  038de	83 7d 14 10	 cmp	 DWORD PTR i$1[rbp], 16
  038e2	7d 1d		 jge	 SHORT $LN118@ecpsvm_do_
  038e4	8b 45 14	 mov	 eax, DWORD PTR i$1[rbp]
  038e7	83 c0 05	 add	 eax, 5
  038ea	48 98		 cdqe
  038ec	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  038f4	c7 84 81 94 0c
	00 00 ff ff ff
	ff		 mov	 DWORD PTR [rcx+rax*4+3220], -1
  038ff	eb d5		 jmp	 SHORT $LN117@ecpsvm_do_
$LN118@ecpsvm_do_:
$LN109@ecpsvm_do_:
  03901	b8 04 00 00 00	 mov	 eax, 4
  03906	48 6b c0 04	 imul	 rax, rax, 4
  0390a	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03912	8b 84 01 94 0c
	00 00		 mov	 eax, DWORD PTR [rcx+rax+3220]
  03919	39 85 cc 00 00
	00		 cmp	 DWORD PTR inst_cr$3[rbp], eax
  0391f	74 6e		 je	 SHORT $LN279@ecpsvm_do_
$LN122@ecpsvm_do_:
  03921	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03929	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  03931	74 56		 je	 SHORT $LN280@ecpsvm_do_
  03933	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0393b	8b 80 10 02 00
	00		 mov	 eax, DWORD PTR [rax+528]
  03941	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03949	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  03951	48 8b 92 00 02
	00 00		 mov	 rdx, QWORD PTR [rdx+512]
  03958	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0395c	48 2b ca	 sub	 rcx, rdx
  0395f	48 03 c1	 add	 rax, rcx
  03962	48 25 ff ff ff
	00		 and	 rax, 16777215		; 00ffffffH
  03968	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03970	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  03976	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0397e	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN280@ecpsvm_do_:
  03989	33 c0		 xor	 eax, eax
  0398b	85 c0		 test	 eax, eax
  0398d	75 92		 jne	 SHORT $LN122@ecpsvm_do_
$LN279@ecpsvm_do_:
  0398f	0f b6 45 2e	 movzx	 eax, BYTE PTR oldmode$2[rbp]
  03993	83 e0 40	 and	 eax, 64			; 00000040H
  03996	85 c0		 test	 eax, eax
  03998	0f 85 e2 00 00
	00		 jne	 $LN281@ecpsvm_do_
  0399e	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  039a6	0f b6 80 90 0c
	00 00		 movzx	 eax, BYTE PTR [rax+3216]
  039ad	83 e0 40	 and	 eax, 64			; 00000040H
  039b0	85 c0		 test	 eax, eax
  039b2	0f 84 c8 00 00
	00		 je	 $LN281@ecpsvm_do_
$LN125@ecpsvm_do_:
  039b8	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  039c0	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  039c8	74 56		 je	 SHORT $LN282@ecpsvm_do_
  039ca	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  039d2	8b 80 10 02 00
	00		 mov	 eax, DWORD PTR [rax+528]
  039d8	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  039e0	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  039e8	48 8b 92 00 02
	00 00		 mov	 rdx, QWORD PTR [rdx+512]
  039ef	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  039f3	48 2b ca	 sub	 rcx, rdx
  039f6	48 03 c1	 add	 rax, rcx
  039f9	48 25 ff ff ff
	00		 and	 rax, 16777215		; 00ffffffH
  039ff	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03a07	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  03a0d	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03a15	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN282@ecpsvm_do_:
  03a20	33 c0		 xor	 eax, eax
  03a22	85 c0		 test	 eax, eax
  03a24	75 92		 jne	 SHORT $LN125@ecpsvm_do_
  03a26	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03a2e	8b 80 28 07 00
	00		 mov	 eax, DWORD PTR [rax+1832]
  03a34	c1 e8 02	 shr	 eax, 2
  03a37	83 e0 01	 and	 eax, 1
  03a3a	85 c0		 test	 eax, eax
  03a3c	74 0c		 je	 SHORT $LN327@ecpsvm_do_
  03a3e	c7 85 a4 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv2448[rbp], 1
  03a48	eb 0a		 jmp	 SHORT $LN328@ecpsvm_do_
$LN327@ecpsvm_do_:
  03a4a	c7 85 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv2448[rbp], 0
$LN328@ecpsvm_do_:
  03a54	83 bd a4 00 00
	00 00		 cmp	 DWORD PTR tv2448[rbp], 0
  03a5b	74 23		 je	 SHORT $LN283@ecpsvm_do_
  03a5d	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03a65	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  03a68	25 00 00 20 00	 and	 eax, 2097152		; 00200000H
  03a6d	85 c0		 test	 eax, eax
  03a6f	74 0f		 je	 SHORT $LN283@ecpsvm_do_
  03a71	b2 fc		 mov	 dl, 252			; 000000fcH
  03a73	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03a7b	e8 00 00 00 00	 call	 s370_invalidate_tlb
$LN283@ecpsvm_do_:
$LN281@ecpsvm_do_:
  03a80	33 c0		 xor	 eax, eax
  03a82	85 c0		 test	 eax, eax
  03a84	0f 85 23 fc ff
	ff		 jne	 $LN108@ecpsvm_do_
$LN128@ecpsvm_do_:

; 1721 :         SET_AEA_COMMON(regs);

  03a8a	b8 08 00 00 00	 mov	 eax, 8
  03a8f	48 6b c0 02	 imul	 rax, rax, 2
  03a93	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03a9b	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  03aa2	83 e0 02	 and	 eax, 2
  03aa5	85 c0		 test	 eax, eax
  03aa7	75 0c		 jne	 SHORT $LN329@ecpsvm_do_
  03aa9	c7 85 a8 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv2465[rbp], 1
  03ab3	eb 0a		 jmp	 SHORT $LN330@ecpsvm_do_
$LN329@ecpsvm_do_:
  03ab5	c7 85 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv2465[rbp], 0
$LN330@ecpsvm_do_:
  03abf	b8 01 00 00 00	 mov	 eax, 1
  03ac4	48 6b c0 02	 imul	 rax, rax, 2
  03ac8	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03ad0	0f b6 95 a8 00
	00 00		 movzx	 edx, BYTE PTR tv2465[rbp]
  03ad7	88 94 01 e8 0c
	00 00		 mov	 BYTE PTR [rcx+rax+3304], dl
  03ade	b8 08 00 00 00	 mov	 eax, 8
  03ae3	48 6b c0 08	 imul	 rax, rax, 8
  03ae7	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03aef	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  03af6	83 e0 02	 and	 eax, 2
  03af9	85 c0		 test	 eax, eax
  03afb	75 0c		 jne	 SHORT $LN331@ecpsvm_do_
  03afd	c7 85 ac 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv2476[rbp], 1
  03b07	eb 0a		 jmp	 SHORT $LN332@ecpsvm_do_
$LN331@ecpsvm_do_:
  03b09	c7 85 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv2476[rbp], 0
$LN332@ecpsvm_do_:
  03b13	b8 01 00 00 00	 mov	 eax, 1
  03b18	48 6b c0 08	 imul	 rax, rax, 8
  03b1c	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03b24	0f b6 95 ac 00
	00 00		 movzx	 edx, BYTE PTR tv2476[rbp]
  03b2b	88 94 01 e8 0c
	00 00		 mov	 BYTE PTR [rcx+rax+3304], dl
  03b32	33 c0		 xor	 eax, eax
  03b34	85 c0		 test	 eax, eax
  03b36	0f 85 4e ff ff
	ff		 jne	 $LN128@ecpsvm_do_
$LN131@ecpsvm_do_:

; 1722 :         MAYBE_SET_PSW_IA_FROM_IP(regs);

  03b3c	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03b44	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  03b4c	74 43		 je	 SHORT $LN284@ecpsvm_do_
  03b4e	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03b56	8b 80 10 02 00
	00		 mov	 eax, DWORD PTR [rax+528]
  03b5c	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03b64	48 8b 94 24 b0
	c7 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  03b6c	48 8b 92 00 02
	00 00		 mov	 rdx, QWORD PTR [rdx+512]
  03b73	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  03b77	48 2b ca	 sub	 rcx, rdx
  03b7a	48 03 c1	 add	 rax, rcx
  03b7d	48 25 ff ff ff
	00		 and	 rax, 16777215		; 00ffffffH
  03b83	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03b8b	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
$LN284@ecpsvm_do_:
  03b91	33 c0		 xor	 eax, eax
  03b93	85 c0		 test	 eax, eax
  03b95	75 a5		 jne	 SHORT $LN131@ecpsvm_do_

; 1723 :         /* Dispatch..... */
; 1724 :         DEBUG_CPASSISTX(DISP2,MSGBUF(buf, "DISP2 - Dispatch...\n"));

  03b97	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  03b9d	c1 e8 02	 shr	 eax, 2
  03ba0	83 e0 01	 and	 eax, 1
  03ba3	85 c0		 test	 eax, eax
  03ba5	74 19		 je	 SHORT $LN285@ecpsvm_do_
  03ba7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171187
  03bae	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  03bb3	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  03bba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN285@ecpsvm_do_:

; 1725 :         DEBUG_CPASSISTX(DISP2,display_gregs(regs, &buf[strlen(buf)], sizeof(buf)-(int)strlen(buf), "HHC90000D "));

  03bc0	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  03bc6	c1 e8 02	 shr	 eax, 2
  03bc9	83 e0 01	 and	 eax, 1
  03bcc	85 c0		 test	 eax, eax
  03bce	74 55		 je	 SHORT $LN286@ecpsvm_do_
  03bd0	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  03bd7	e8 00 00 00 00	 call	 strlen
  03bdc	48 98		 cdqe
  03bde	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  03be3	48 2b c8	 sub	 rcx, rax
  03be6	48 8b c1	 mov	 rax, rcx
  03be9	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv2506[rbp], rax
  03bf0	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  03bf7	e8 00 00 00 00	 call	 strlen
  03bfc	48 8d 84 05 c0
	c2 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  03c04	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG171189
  03c0b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv2506[rbp]
  03c12	44 8b c1	 mov	 r8d, ecx
  03c15	48 8b d0	 mov	 rdx, rax
  03c18	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03c20	e8 00 00 00 00	 call	 display_gregs
$LN286@ecpsvm_do_:

; 1726 :         DEBUG_CPASSISTX(DISP2,STRLCAT( buf, "\n" ));

  03c25	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  03c2b	c1 e8 02	 shr	 eax, 2
  03c2e	83 e0 01	 and	 eax, 1
  03c31	85 c0		 test	 eax, eax
  03c33	74 1a		 je	 SHORT $LN287@ecpsvm_do_
  03c35	41 b8 00 04 00
	00		 mov	 r8d, 1024		; 00000400H
  03c3b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG171191
  03c42	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  03c49	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN287@ecpsvm_do_:

; 1727 :         DEBUG_CPASSISTX(DISP2,display_cregs(regs, &buf[strlen(buf)], sizeof(buf)-(int)strlen(buf), "HHC90000D "));

  03c4f	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  03c55	c1 e8 02	 shr	 eax, 2
  03c58	83 e0 01	 and	 eax, 1
  03c5b	85 c0		 test	 eax, eax
  03c5d	74 55		 je	 SHORT $LN288@ecpsvm_do_
  03c5f	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  03c66	e8 00 00 00 00	 call	 strlen
  03c6b	48 98		 cdqe
  03c6d	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  03c72	48 2b c8	 sub	 rcx, rax
  03c75	48 8b c1	 mov	 rax, rcx
  03c78	48 89 85 10 01
	00 00		 mov	 QWORD PTR tv2529[rbp], rax
  03c7f	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  03c86	e8 00 00 00 00	 call	 strlen
  03c8b	48 8d 84 05 c0
	c2 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  03c93	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG171193
  03c9a	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR tv2529[rbp]
  03ca1	44 8b c1	 mov	 r8d, ecx
  03ca4	48 8b d0	 mov	 rdx, rax
  03ca7	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03caf	e8 00 00 00 00	 call	 display_cregs
$LN288@ecpsvm_do_:

; 1728 :         DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", buf));

  03cb4	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  03cba	c1 e8 02	 shr	 eax, 2
  03cbd	83 e0 01	 and	 eax, 1
  03cc0	85 c0		 test	 eax, eax
  03cc2	74 53		 je	 SHORT $LN289@ecpsvm_do_
  03cc4	b9 01 00 00 00	 mov	 ecx, 1
  03cc9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03ccf	48 8d 8d c0 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  03cd6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  03cdb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171195
  03ce2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03ce7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171196
  03cee	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03cf3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03cf8	41 b9 03 00 00
	00		 mov	 r9d, 3
  03cfe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171197
  03d05	ba c0 06 00 00	 mov	 edx, 1728		; 000006c0H
  03d0a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171198
  03d11	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN289@ecpsvm_do_:

; 1729 :         return(2);      /* OK - Perform INTCHECK */

  03d17	b8 02 00 00 00	 mov	 eax, 2
  03d1c	e9 2a 01 00 00	 jmp	 $LN1@ecpsvm_do_

; 1730 :     }

  03d21	e9 91 d5 ff ff	 jmp	 $LN41@ecpsvm_do_
$LN42@ecpsvm_do_:

; 1731 :     /* Nothing else to do - wait state */
; 1732 :     DEBUG_CPASSISTX(DISP2,WRMSG(HHC90000, "D", "DISP2 : Nothing to dispatch - IDLEECPS"));

  03d26	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  03d2c	c1 e8 02	 shr	 eax, 2
  03d2f	83 e0 01	 and	 eax, 1
  03d32	85 c0		 test	 eax, eax
  03d34	74 53		 je	 SHORT $LN290@ecpsvm_do_
  03d36	b9 01 00 00 00	 mov	 ecx, 1
  03d3b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03d41	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171200
  03d48	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  03d4d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171201
  03d54	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03d59	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171202
  03d60	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03d65	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03d6a	41 b9 03 00 00
	00		 mov	 r9d, 3
  03d70	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171203
  03d77	ba c4 06 00 00	 mov	 edx, 1732		; 000006c4H
  03d7c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171204
  03d83	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN290@ecpsvm_do_:
$LN134@ecpsvm_do_:

; 1733 :     SET_PSW_IA_AND_MAYBE_IP(regs, EVM_L(el+24));      /* IDLEECPS */

  03d89	8b 84 24 c0 c7
	02 00		 mov	 eax, DWORD PTR el$[rsp]
  03d90	83 c0 18	 add	 eax, 24
  03d93	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  03d98	4c 8b 84 24 b0
	c7 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  03da0	ba fe ff ff ff	 mov	 edx, -2
  03da5	8b c8		 mov	 ecx, eax
  03da7	e8 00 00 00 00	 call	 s370_vfetch4
  03dac	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  03db1	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03db9	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  03dbf	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03dc7	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  03dcf	74 6e		 je	 SHORT $LN291@ecpsvm_do_
  03dd1	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03dd9	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  03ddf	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  03de4	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03dec	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  03df2	75 38		 jne	 SHORT $LN292@ecpsvm_do_
  03df4	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03dfc	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  03e02	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  03e07	8b c0		 mov	 eax, eax
  03e09	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03e11	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  03e18	48 0b c8	 or	 rcx, rax
  03e1b	48 8b c1	 mov	 rax, rcx
  03e1e	48 8b 8c 24 b0
	c7 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  03e26	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  03e2a	eb 13		 jmp	 SHORT $LN293@ecpsvm_do_
$LN292@ecpsvm_do_:
  03e2c	48 8b 84 24 b0
	c7 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  03e34	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN293@ecpsvm_do_:
$LN291@ecpsvm_do_:
  03e3f	33 c0		 xor	 eax, eax
  03e41	85 c0		 test	 eax, eax
  03e43	0f 85 40 ff ff
	ff		 jne	 $LN134@ecpsvm_do_

; 1734 :     return(0);

  03e49	33 c0		 xor	 eax, eax
$LN1@ecpsvm_do_:

; 1735 : }

  03e4b	48 8b 8d c0 c6
	02 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  03e52	48 33 cc	 xor	 rcx, rsp
  03e55	e8 00 00 00 00	 call	 __security_check_cookie
  03e5a	48 81 c4 98 c7
	02 00		 add	 rsp, 182168		; 0002c798H
  03e61	5f		 pop	 rdi
  03e62	5d		 pop	 rbp
  03e63	c3		 ret	 0
ecpsvm_do_disp2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
B_VMOSTAT$ = 64
B_VMQSTAT$ = 65
B_VMRSTAT$ = 66
vmb$ = 68
F_SCHMASK$ = 72
F_VMFLGS$ = 76
F_SCHMON$ = 80
SCHDL$ = 84
F_ASYSVM$ = 88
buf$ = 96
__$ArrayPad$ = 352
regs$ = 384
dl$ = 392
el$ = 400
ecpsvm_do_disp1 PROC

; 1147 : {

$LN38:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1148 :     char buf[256];
; 1149 :     VADR vmb;
; 1150 :     U32 F_VMFLGS;       /* Aggregate for quick test */
; 1151 :     U32 F_SCHMASK;      /* Flags to test */
; 1152 :     U32 F_SCHMON;       /* Flags allowed on for quick dispatch */
; 1153 :     VADR F_ASYSVM;      /* System VMBLOK */
; 1154 :     VADR SCHDL;         /* SCHDL Exit */
; 1155 : 
; 1156 :     BYTE B_VMOSTAT;
; 1157 :     BYTE B_VMQSTAT;
; 1158 :     BYTE B_VMRSTAT;
; 1159 : 
; 1160 :     vmb=regs->GR_L(11);

  00027	b8 08 00 00 00	 mov	 eax, 8
  0002c	48 6b c0 0b	 imul	 rax, rax, 11
  00030	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00038	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0003f	89 44 24 44	 mov	 DWORD PTR vmb$[rsp], eax

; 1161 :     DEBUG_CPASSISTX(DISP1,MSGBUF(buf, "DISP1 Data list = %6.6X VM=%6.6X",dl,vmb));

  00043	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+248
  00049	c1 e8 02	 shr	 eax, 2
  0004c	83 e0 01	 and	 eax, 1
  0004f	85 c0		 test	 eax, eax
  00051	74 27		 je	 SHORT $LN11@ecpsvm_do_
  00053	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  00057	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0005b	44 8b 8c 24 88
	01 00 00	 mov	 r9d, DWORD PTR dl$[rsp]
  00063	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170485
  0006a	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0006f	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN11@ecpsvm_do_:

; 1162 :     DEBUG_CPASSISTX(DISP1,WRMSG(HHC90000, "D", buf));

  0007a	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+248
  00080	c1 e8 02	 shr	 eax, 2
  00083	83 e0 01	 and	 eax, 1
  00086	85 c0		 test	 eax, eax
  00088	74 51		 je	 SHORT $LN12@ecpsvm_do_
  0008a	b9 01 00 00 00	 mov	 ecx, 1
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00095	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  0009a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170487
  000a6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170488
  000b2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000b7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000bc	41 b9 03 00 00
	00		 mov	 r9d, 3
  000c2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170489
  000c9	ba 8a 04 00 00	 mov	 edx, 1162		; 0000048aH
  000ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170490
  000d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN12@ecpsvm_do_:

; 1163 :     F_VMFLGS=EVM_L(vmb+VMRSTAT);

  000db	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  000df	83 c0 58	 add	 eax, 88			; 00000058H
  000e2	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000e7	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  000ef	ba fe ff ff ff	 mov	 edx, -2
  000f4	8b c8		 mov	 ecx, eax
  000f6	e8 00 00 00 00	 call	 s370_vfetch4
  000fb	89 44 24 4c	 mov	 DWORD PTR F_VMFLGS$[rsp], eax

; 1164 :     F_SCHMASK=EVM_L(dl+64);

  000ff	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR dl$[rsp]
  00106	83 c0 40	 add	 eax, 64			; 00000040H
  00109	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0010e	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00116	ba fe ff ff ff	 mov	 edx, -2
  0011b	8b c8		 mov	 ecx, eax
  0011d	e8 00 00 00 00	 call	 s370_vfetch4
  00122	89 44 24 48	 mov	 DWORD PTR F_SCHMASK$[rsp], eax

; 1165 :     F_SCHMON=EVM_L(dl+68);

  00126	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR dl$[rsp]
  0012d	83 c0 44	 add	 eax, 68			; 00000044H
  00130	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00135	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0013d	ba fe ff ff ff	 mov	 edx, -2
  00142	8b c8		 mov	 ecx, eax
  00144	e8 00 00 00 00	 call	 s370_vfetch4
  00149	89 44 24 50	 mov	 DWORD PTR F_SCHMON$[rsp], eax

; 1166 :     if((F_VMFLGS & F_SCHMASK) == F_SCHMON)

  0014d	8b 44 24 48	 mov	 eax, DWORD PTR F_SCHMASK$[rsp]
  00151	8b 4c 24 4c	 mov	 ecx, DWORD PTR F_VMFLGS$[rsp]
  00155	23 c8		 and	 ecx, eax
  00157	8b c1		 mov	 eax, ecx
  00159	3b 44 24 50	 cmp	 eax, DWORD PTR F_SCHMON$[rsp]
  0015d	75 72		 jne	 SHORT $LN13@ecpsvm_do_

; 1167 :     {
; 1168 :         DEBUG_CPASSISTX(DISP1,WRMSG(HHC90000, "D", "DISP1 Quick Check complete"));

  0015f	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+248
  00165	c1 e8 02	 shr	 eax, 2
  00168	83 e0 01	 and	 eax, 1
  0016b	85 c0		 test	 eax, eax
  0016d	74 53		 je	 SHORT $LN15@ecpsvm_do_
  0016f	b9 01 00 00 00	 mov	 ecx, 1
  00174	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0017a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170494
  00181	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00186	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170495
  0018d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170496
  00199	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0019e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a3	41 b9 03 00 00
	00		 mov	 r9d, 3
  001a9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170497
  001b0	ba 90 04 00 00	 mov	 edx, 1168		; 00000490H
  001b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170498
  001bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN15@ecpsvm_do_:

; 1169 :         return(2);

  001c2	b8 02 00 00 00	 mov	 eax, 2
  001c7	e9 40 06 00 00	 jmp	 $LN1@ecpsvm_do_

; 1170 :     }

  001cc	e9 9f 00 00 00	 jmp	 $LN14@ecpsvm_do_
$LN13@ecpsvm_do_:

; 1171 :     else
; 1172 :     {
; 1173 :         DEBUG_CPASSISTX(DISP1,MSGBUF(buf, "DISP1 Quick Check failed : %8.8X != %8.8X",(F_VMFLGS & F_SCHMASK),F_SCHMON));

  001d1	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+248
  001d7	c1 e8 02	 shr	 eax, 2
  001da	83 e0 01	 and	 eax, 1
  001dd	85 c0		 test	 eax, eax
  001df	74 2e		 je	 SHORT $LN16@ecpsvm_do_
  001e1	8b 44 24 48	 mov	 eax, DWORD PTR F_SCHMASK$[rsp]
  001e5	8b 4c 24 4c	 mov	 ecx, DWORD PTR F_VMFLGS$[rsp]
  001e9	23 c8		 and	 ecx, eax
  001eb	8b c1		 mov	 eax, ecx
  001ed	8b 4c 24 50	 mov	 ecx, DWORD PTR F_SCHMON$[rsp]
  001f1	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  001f5	44 8b c8	 mov	 r9d, eax
  001f8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170500
  001ff	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00204	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00209	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN16@ecpsvm_do_:

; 1174 :         DEBUG_CPASSISTX(DISP1,WRMSG(HHC90000, "D", buf));

  0020f	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+248
  00215	c1 e8 02	 shr	 eax, 2
  00218	83 e0 01	 and	 eax, 1
  0021b	85 c0		 test	 eax, eax
  0021d	74 51		 je	 SHORT $LN17@ecpsvm_do_
  0021f	b9 01 00 00 00	 mov	 ecx, 1
  00224	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0022a	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  0022f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00234	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170502
  0023b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00240	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170503
  00247	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0024c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00251	41 b9 03 00 00
	00		 mov	 r9d, 3
  00257	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170504
  0025e	ba 96 04 00 00	 mov	 edx, 1174		; 00000496H
  00263	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170505
  0026a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@ecpsvm_do_:
$LN14@ecpsvm_do_:

; 1175 :     }
; 1176 : 
; 1177 :     F_ASYSVM=EVM_L(ASYSVM);

  00270	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00278	ba fe ff ff ff	 mov	 edx, -2
  0027d	b9 7c 03 00 00	 mov	 ecx, 892		; 0000037cH
  00282	e8 00 00 00 00	 call	 s370_vfetch4
  00287	89 44 24 58	 mov	 DWORD PTR F_ASYSVM$[rsp], eax

; 1178 :     if(vmb==F_ASYSVM)

  0028b	8b 44 24 58	 mov	 eax, DWORD PTR F_ASYSVM$[rsp]
  0028f	39 44 24 44	 cmp	 DWORD PTR vmb$[rsp], eax
  00293	75 6d		 jne	 SHORT $LN18@ecpsvm_do_

; 1179 :     {
; 1180 :         DEBUG_CPASSISTX(DISP1,WRMSG(HHC90000, "D", "DISP1 VMB is SYSTEM VMBLOCK"));

  00295	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+248
  0029b	c1 e8 02	 shr	 eax, 2
  0029e	83 e0 01	 and	 eax, 1
  002a1	85 c0		 test	 eax, eax
  002a3	74 53		 je	 SHORT $LN19@ecpsvm_do_
  002a5	b9 01 00 00 00	 mov	 ecx, 1
  002aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170508
  002b7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170509
  002c3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170510
  002cf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002d4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002d9	41 b9 03 00 00
	00		 mov	 r9d, 3
  002df	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170511
  002e6	ba 9c 04 00 00	 mov	 edx, 1180		; 0000049cH
  002eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170512
  002f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN19@ecpsvm_do_:

; 1181 :         return(2);

  002f8	b8 02 00 00 00	 mov	 eax, 2
  002fd	e9 0a 05 00 00	 jmp	 $LN1@ecpsvm_do_
$LN18@ecpsvm_do_:

; 1182 :     }
; 1183 :     SCHDL=EVM_L(el+4);

  00302	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR el$[rsp]
  00309	83 c0 04	 add	 eax, 4
  0030c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00311	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00319	ba fe ff ff ff	 mov	 edx, -2
  0031e	8b c8		 mov	 ecx, eax
  00320	e8 00 00 00 00	 call	 s370_vfetch4
  00325	89 44 24 54	 mov	 DWORD PTR SCHDL$[rsp], eax

; 1184 :     B_VMOSTAT=EVM_IC(vmb+VMOSTAT);

  00329	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  0032d	83 c0 5a	 add	 eax, 90			; 0000005aH
  00330	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00335	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0033d	ba fe ff ff ff	 mov	 edx, -2
  00342	8b c8		 mov	 ecx, eax
  00344	e8 00 00 00 00	 call	 s370_vfetchb
  00349	88 44 24 40	 mov	 BYTE PTR B_VMOSTAT$[rsp], al

; 1185 :     if(!(B_VMOSTAT & VMKILL))

  0034d	0f b6 44 24 40	 movzx	 eax, BYTE PTR B_VMOSTAT$[rsp]
  00352	83 e0 01	 and	 eax, 1
  00355	85 c0		 test	 eax, eax
  00357	0f 85 0b 01 00
	00		 jne	 $LN20@ecpsvm_do_

; 1186 :     {
; 1187 :         DEBUG_CPASSISTX(DISP1,WRMSG(HHC90000, "D", "DISP1 Call SCHEDULE because VMKILL not set"));

  0035d	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+248
  00363	c1 e8 02	 shr	 eax, 2
  00366	83 e0 01	 and	 eax, 1
  00369	85 c0		 test	 eax, eax
  0036b	74 53		 je	 SHORT $LN21@ecpsvm_do_
  0036d	b9 01 00 00 00	 mov	 ecx, 1
  00372	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00378	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170515
  0037f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00384	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170516
  0038b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00390	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170517
  00397	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0039c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003a1	41 b9 03 00 00
	00		 mov	 r9d, 3
  003a7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170518
  003ae	ba a3 04 00 00	 mov	 edx, 1187		; 000004a3H
  003b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170519
  003ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN21@ecpsvm_do_:
$LN4@ecpsvm_do_:

; 1188 :         SET_PSW_IA_AND_MAYBE_IP(regs, SCHDL);

  003c0	8b 44 24 54	 mov	 eax, DWORD PTR SCHDL$[rsp]
  003c4	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  003c9	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003d1	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  003d7	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003df	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  003e7	74 6e		 je	 SHORT $LN22@ecpsvm_do_
  003e9	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003f1	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  003f7	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  003fc	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00404	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  0040a	75 38		 jne	 SHORT $LN23@ecpsvm_do_
  0040c	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00414	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0041a	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0041f	8b c0		 mov	 eax, eax
  00421	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00429	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00430	48 0b c8	 or	 rcx, rax
  00433	48 8b c1	 mov	 rax, rcx
  00436	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0043e	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00442	eb 13		 jmp	 SHORT $LN24@ecpsvm_do_
$LN23@ecpsvm_do_:
  00444	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0044c	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN24@ecpsvm_do_:
$LN22@ecpsvm_do_:
  00457	33 c0		 xor	 eax, eax
  00459	85 c0		 test	 eax, eax
  0045b	0f 85 5f ff ff
	ff		 jne	 $LN4@ecpsvm_do_

; 1189 :         return(0);

  00461	33 c0		 xor	 eax, eax
  00463	e9 a4 03 00 00	 jmp	 $LN1@ecpsvm_do_
$LN20@ecpsvm_do_:

; 1190 :     }
; 1191 :     B_VMQSTAT=EVM_IC(vmb+VMQSTAT);

  00468	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  0046c	83 c0 5b	 add	 eax, 91			; 0000005bH
  0046f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00474	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0047c	ba fe ff ff ff	 mov	 edx, -2
  00481	8b c8		 mov	 ecx, eax
  00483	e8 00 00 00 00	 call	 s370_vfetchb
  00488	88 44 24 41	 mov	 BYTE PTR B_VMQSTAT$[rsp], al

; 1192 :     if(!(B_VMQSTAT & VMCFREAD))

  0048c	0f b6 44 24 41	 movzx	 eax, BYTE PTR B_VMQSTAT$[rsp]
  00491	83 e0 02	 and	 eax, 2
  00494	85 c0		 test	 eax, eax
  00496	0f 85 1b 01 00
	00		 jne	 $LN25@ecpsvm_do_

; 1193 :     {
; 1194 :         if(B_VMOSTAT & VMCF)

  0049c	0f b6 44 24 40	 movzx	 eax, BYTE PTR B_VMOSTAT$[rsp]
  004a1	83 e0 02	 and	 eax, 2
  004a4	85 c0		 test	 eax, eax
  004a6	0f 84 0b 01 00
	00		 je	 $LN26@ecpsvm_do_

; 1195 :         {
; 1196 :             DEBUG_CPASSISTX(DISP1,WRMSG(HHC90000, "D", "DISP1 Call SCHEDULE because VMKILL & VMCF & !VMCFREAD set"));

  004ac	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+248
  004b2	c1 e8 02	 shr	 eax, 2
  004b5	83 e0 01	 and	 eax, 1
  004b8	85 c0		 test	 eax, eax
  004ba	74 53		 je	 SHORT $LN27@ecpsvm_do_
  004bc	b9 01 00 00 00	 mov	 ecx, 1
  004c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170526
  004ce	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170527
  004da	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170528
  004e6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004eb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004f0	41 b9 03 00 00
	00		 mov	 r9d, 3
  004f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170529
  004fd	ba ac 04 00 00	 mov	 edx, 1196		; 000004acH
  00502	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170530
  00509	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN27@ecpsvm_do_:
$LN7@ecpsvm_do_:

; 1197 :             SET_PSW_IA_AND_MAYBE_IP(regs, SCHDL);

  0050f	8b 44 24 54	 mov	 eax, DWORD PTR SCHDL$[rsp]
  00513	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00518	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00520	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00526	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0052e	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00536	74 6e		 je	 SHORT $LN28@ecpsvm_do_
  00538	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00540	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00546	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  0054b	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00553	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00559	75 38		 jne	 SHORT $LN29@ecpsvm_do_
  0055b	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00563	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00569	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0056e	8b c0		 mov	 eax, eax
  00570	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00578	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  0057f	48 0b c8	 or	 rcx, rax
  00582	48 8b c1	 mov	 rax, rcx
  00585	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0058d	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00591	eb 13		 jmp	 SHORT $LN30@ecpsvm_do_
$LN29@ecpsvm_do_:
  00593	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0059b	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN30@ecpsvm_do_:
$LN28@ecpsvm_do_:
  005a6	33 c0		 xor	 eax, eax
  005a8	85 c0		 test	 eax, eax
  005aa	0f 85 5f ff ff
	ff		 jne	 $LN7@ecpsvm_do_

; 1198 :             return(0);

  005b0	33 c0		 xor	 eax, eax
  005b2	e9 55 02 00 00	 jmp	 $LN1@ecpsvm_do_
$LN26@ecpsvm_do_:
$LN25@ecpsvm_do_:

; 1199 :         }
; 1200 :     }
; 1201 :     /* At DSP - OFF */
; 1202 :     B_VMQSTAT &= ~VMCFREAD;

  005b7	0f b6 44 24 41	 movzx	 eax, BYTE PTR B_VMQSTAT$[rsp]
  005bc	83 e0 fd	 and	 eax, -3
  005bf	88 44 24 41	 mov	 BYTE PTR B_VMQSTAT$[rsp], al

; 1203 :     B_VMOSTAT &= ~VMKILL;

  005c3	0f b6 44 24 40	 movzx	 eax, BYTE PTR B_VMOSTAT$[rsp]
  005c8	83 e0 fe	 and	 eax, -2
  005cb	88 44 24 40	 mov	 BYTE PTR B_VMOSTAT$[rsp], al

; 1204 :     EVM_STC(B_VMQSTAT,vmb+VMQSTAT);

  005cf	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  005d3	83 c0 5b	 add	 eax, 91			; 0000005bH
  005d6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  005db	4c 8b 8c 24 80
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  005e3	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  005e9	8b d0		 mov	 edx, eax
  005eb	0f b6 4c 24 41	 movzx	 ecx, BYTE PTR B_VMQSTAT$[rsp]
  005f0	e8 00 00 00 00	 call	 s370_vstoreb

; 1205 :     EVM_STC(B_VMOSTAT,vmb+VMOSTAT);

  005f5	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  005f9	83 c0 5a	 add	 eax, 90			; 0000005aH
  005fc	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00601	4c 8b 8c 24 80
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00609	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0060f	8b d0		 mov	 edx, eax
  00611	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR B_VMOSTAT$[rsp]
  00616	e8 00 00 00 00	 call	 s370_vstoreb

; 1206 :     B_VMRSTAT=EVM_IC(vmb+VMRSTAT);

  0061b	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  0061f	83 c0 58	 add	 eax, 88			; 00000058H
  00622	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00627	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0062f	ba fe ff ff ff	 mov	 edx, -2
  00634	8b c8		 mov	 ecx, eax
  00636	e8 00 00 00 00	 call	 s370_vfetchb
  0063b	88 44 24 42	 mov	 BYTE PTR B_VMRSTAT$[rsp], al

; 1207 :     if(B_VMRSTAT & VMLOGOFF)

  0063f	0f b6 44 24 42	 movzx	 eax, BYTE PTR B_VMRSTAT$[rsp]
  00644	83 e0 02	 and	 eax, 2
  00647	85 c0		 test	 eax, eax
  00649	74 6d		 je	 SHORT $LN31@ecpsvm_do_

; 1208 :     {
; 1209 :         DEBUG_CPASSISTX(DISP1,WRMSG(HHC90000, "D", "DISP1 Continue because already logging off"));

  0064b	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+248
  00651	c1 e8 02	 shr	 eax, 2
  00654	83 e0 01	 and	 eax, 1
  00657	85 c0		 test	 eax, eax
  00659	74 53		 je	 SHORT $LN32@ecpsvm_do_
  0065b	b9 01 00 00 00	 mov	 ecx, 1
  00660	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00666	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170536
  0066d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00672	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170537
  00679	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0067e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170538
  00685	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0068a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0068f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00695	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170539
  0069c	ba b9 04 00 00	 mov	 edx, 1209		; 000004b9H
  006a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170540
  006a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN32@ecpsvm_do_:

; 1210 :         return(2);

  006ae	b8 02 00 00 00	 mov	 eax, 2
  006b3	e9 54 01 00 00	 jmp	 $LN1@ecpsvm_do_
$LN31@ecpsvm_do_:

; 1211 :     }
; 1212 :     B_VMRSTAT |= VMLOGOFF;

  006b8	0f b6 44 24 42	 movzx	 eax, BYTE PTR B_VMRSTAT$[rsp]
  006bd	83 c8 02	 or	 eax, 2
  006c0	88 44 24 42	 mov	 BYTE PTR B_VMRSTAT$[rsp], al

; 1213 :     EVM_STC(B_VMRSTAT,vmb+VMRSTAT);

  006c4	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  006c8	83 c0 58	 add	 eax, 88			; 00000058H
  006cb	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  006d0	4c 8b 8c 24 80
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  006d8	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  006de	8b d0		 mov	 edx, eax
  006e0	0f b6 4c 24 42	 movzx	 ecx, BYTE PTR B_VMRSTAT$[rsp]
  006e5	e8 00 00 00 00	 call	 s370_vstoreb
$LN10@ecpsvm_do_:

; 1214 :     SET_PSW_IA_AND_MAYBE_IP(regs, EVM_L(el+0));

  006ea	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR el$[rsp]
  006f1	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  006f6	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  006fe	ba fe ff ff ff	 mov	 edx, -2
  00703	8b c8		 mov	 ecx, eax
  00705	e8 00 00 00 00	 call	 s370_vfetch4
  0070a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0070f	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00717	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  0071d	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00725	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  0072d	74 6e		 je	 SHORT $LN33@ecpsvm_do_
  0072f	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00737	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0073d	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00742	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0074a	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00750	75 38		 jne	 SHORT $LN34@ecpsvm_do_
  00752	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0075a	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00760	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00765	8b c0		 mov	 eax, eax
  00767	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0076f	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00776	48 0b c8	 or	 rcx, rax
  00779	48 8b c1	 mov	 rax, rcx
  0077c	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00784	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00788	eb 13		 jmp	 SHORT $LN35@ecpsvm_do_
$LN34@ecpsvm_do_:
  0078a	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00792	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN35@ecpsvm_do_:
$LN33@ecpsvm_do_:
  0079d	33 c0		 xor	 eax, eax
  0079f	85 c0		 test	 eax, eax
  007a1	0f 85 43 ff ff
	ff		 jne	 $LN10@ecpsvm_do_

; 1215 :     DEBUG_CPASSISTX(DISP1,WRMSG(HHC90000, "D", "DISP1 : Call USOFF"));

  007a7	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+248
  007ad	c1 e8 02	 shr	 eax, 2
  007b0	83 e0 01	 and	 eax, 1
  007b3	85 c0		 test	 eax, eax
  007b5	74 53		 je	 SHORT $LN36@ecpsvm_do_
  007b7	b9 01 00 00 00	 mov	 ecx, 1
  007bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170545
  007c9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  007ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170546
  007d5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170547
  007e1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007e6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007eb	41 b9 03 00 00
	00		 mov	 r9d, 3
  007f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170548
  007f8	ba bf 04 00 00	 mov	 edx, 1215		; 000004bfH
  007fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170549
  00804	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN36@ecpsvm_do_:

; 1216 :     return(0);

  0080a	33 c0		 xor	 eax, eax
$LN1@ecpsvm_do_:

; 1217 : }

  0080c	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00814	48 33 cc	 xor	 rcx, rsp
  00817	e8 00 00 00 00	 call	 __security_check_cookie
  0081c	48 81 c4 78 01
	00 00		 add	 rsp, 376		; 00000178H
  00823	c3		 ret	 0
ecpsvm_do_disp1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
vch$ = 64
vcu$ = 68
vchix$ = 72
vcuix$ = 76
vdvix$ = 80
vdv$ = 84
vchtbl$ = 88
buf$ = 96
__$ArrayPad$ = 352
regs$ = 384
effective_addr1$ = 392
effective_addr2$ = 400
vdev$ = 408
ecpsvm_do_scnvu PROC

; 1071 : {

$LN14:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00021	48 33 c4	 xor	 rax, rsp
  00024	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1072 :     char buf[256];
; 1073 :     U32  vchix;
; 1074 :     U32  vcuix;
; 1075 :     U32  vdvix;
; 1076 :     VADR vchtbl;
; 1077 :     VADR vch;
; 1078 :     VADR vcu;
; 1079 :     VADR vdv;
; 1080 : 
; 1081 :     vchtbl=effective_addr1;

  0002c	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00033	89 44 24 58	 mov	 DWORD PTR vchtbl$[rsp], eax

; 1082 : 
; 1083 :     vchix=EVM_LH(vchtbl+((vdev & 0xf00)>>7));   /* Get Index */

  00037	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR vdev$[rsp]
  0003e	25 00 0f 00 00	 and	 eax, 3840		; 00000f00H
  00043	c1 e8 07	 shr	 eax, 7
  00046	8b 4c 24 58	 mov	 ecx, DWORD PTR vchtbl$[rsp]
  0004a	03 c8		 add	 ecx, eax
  0004c	8b c1		 mov	 eax, ecx
  0004e	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00053	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0005b	ba fe ff ff ff	 mov	 edx, -2
  00060	8b c8		 mov	 ecx, eax
  00062	e8 00 00 00 00	 call	 s370_vfetch2
  00067	0f b7 c0	 movzx	 eax, ax
  0006a	89 44 24 48	 mov	 DWORD PTR vchix$[rsp], eax

; 1084 :     if(vchix & 0x8000)

  0006e	8b 44 24 48	 mov	 eax, DWORD PTR vchix$[rsp]
  00072	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00077	85 c0		 test	 eax, eax
  00079	0f 84 9a 00 00
	00		 je	 $LN2@ecpsvm_do_

; 1085 :     {
; 1086 :         DEBUG_CPASSISTX(SCNVU,MSGBUF(buf, "SCNVU Virtual Device %4.4X has no VCHAN block",vdev));

  0007f	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+184
  00085	c1 e8 02	 shr	 eax, 2
  00088	83 e0 01	 and	 eax, 1
  0008b	85 c0		 test	 eax, eax
  0008d	74 1f		 je	 SHORT $LN3@ecpsvm_do_
  0008f	44 8b 8c 24 98
	01 00 00	 mov	 r9d, DWORD PTR vdev$[rsp]
  00097	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170356
  0009e	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  000a3	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  000a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN3@ecpsvm_do_:

; 1087 :         DEBUG_CPASSISTX(SCNVU,WRMSG(HHC90000, "D", buf));

  000ae	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+184
  000b4	c1 e8 02	 shr	 eax, 2
  000b7	83 e0 01	 and	 eax, 1
  000ba	85 c0		 test	 eax, eax
  000bc	74 51		 je	 SHORT $LN4@ecpsvm_do_
  000be	b9 01 00 00 00	 mov	 ecx, 1
  000c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000c9	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  000ce	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170358
  000da	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170359
  000e6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000eb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f0	41 b9 03 00 00
	00		 mov	 r9d, 3
  000f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170360
  000fd	ba 3f 04 00 00	 mov	 edx, 1087		; 0000043fH
  00102	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170361
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN4@ecpsvm_do_:

; 1088 :         return(1);

  0010f	b8 01 00 00 00	 mov	 eax, 1
  00114	e9 47 03 00 00	 jmp	 $LN1@ecpsvm_do_
$LN2@ecpsvm_do_:

; 1089 :     }
; 1090 :     vch=EVM_L(effective_addr2)+vchix;

  00119	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00120	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00125	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0012d	ba fe ff ff ff	 mov	 edx, -2
  00132	8b c8		 mov	 ecx, eax
  00134	e8 00 00 00 00	 call	 s370_vfetch4
  00139	03 44 24 48	 add	 eax, DWORD PTR vchix$[rsp]
  0013d	89 44 24 40	 mov	 DWORD PTR vch$[rsp], eax

; 1091 : 
; 1092 :     vcuix=EVM_LH(vch+8+((vdev & 0xf0)>>3));

  00141	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR vdev$[rsp]
  00148	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  0014d	c1 e8 03	 shr	 eax, 3
  00150	8b 4c 24 40	 mov	 ecx, DWORD PTR vch$[rsp]
  00154	8d 44 01 08	 lea	 eax, DWORD PTR [rcx+rax+8]
  00158	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0015d	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00165	ba fe ff ff ff	 mov	 edx, -2
  0016a	8b c8		 mov	 ecx, eax
  0016c	e8 00 00 00 00	 call	 s370_vfetch2
  00171	0f b7 c0	 movzx	 eax, ax
  00174	89 44 24 4c	 mov	 DWORD PTR vcuix$[rsp], eax

; 1093 :     if(vcuix & 0x8000)

  00178	8b 44 24 4c	 mov	 eax, DWORD PTR vcuix$[rsp]
  0017c	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00181	85 c0		 test	 eax, eax
  00183	0f 84 9a 00 00
	00		 je	 $LN5@ecpsvm_do_

; 1094 :     {
; 1095 :         DEBUG_CPASSISTX(SCNVU,MSGBUF(buf,"SCNVU Virtual Device %4.4X has no VCU block",vdev));

  00189	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+184
  0018f	c1 e8 02	 shr	 eax, 2
  00192	83 e0 01	 and	 eax, 1
  00195	85 c0		 test	 eax, eax
  00197	74 1f		 je	 SHORT $LN6@ecpsvm_do_
  00199	44 8b 8c 24 98
	01 00 00	 mov	 r9d, DWORD PTR vdev$[rsp]
  001a1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170364
  001a8	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  001ad	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  001b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN6@ecpsvm_do_:

; 1096 :         DEBUG_CPASSISTX(SCNVU,WRMSG(HHC90000, "D", buf));

  001b8	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+184
  001be	c1 e8 02	 shr	 eax, 2
  001c1	83 e0 01	 and	 eax, 1
  001c4	85 c0		 test	 eax, eax
  001c6	74 51		 je	 SHORT $LN7@ecpsvm_do_
  001c8	b9 01 00 00 00	 mov	 ecx, 1
  001cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001d3	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  001d8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170366
  001e4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170367
  001f0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001f5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001fa	41 b9 03 00 00
	00		 mov	 r9d, 3
  00200	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170368
  00207	ba 48 04 00 00	 mov	 edx, 1096		; 00000448H
  0020c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170369
  00213	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN7@ecpsvm_do_:

; 1097 :         return(1);

  00219	b8 01 00 00 00	 mov	 eax, 1
  0021e	e9 3d 02 00 00	 jmp	 $LN1@ecpsvm_do_
$LN5@ecpsvm_do_:

; 1098 :     }
; 1099 :     vcu=EVM_L(effective_addr2+4)+vcuix;

  00223	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR effective_addr2$[rsp]
  0022a	83 c0 04	 add	 eax, 4
  0022d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00232	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0023a	ba fe ff ff ff	 mov	 edx, -2
  0023f	8b c8		 mov	 ecx, eax
  00241	e8 00 00 00 00	 call	 s370_vfetch4
  00246	03 44 24 4c	 add	 eax, DWORD PTR vcuix$[rsp]
  0024a	89 44 24 44	 mov	 DWORD PTR vcu$[rsp], eax

; 1100 : 
; 1101 :     vdvix=EVM_LH(vcu+8+((vdev & 0xf)<<1));

  0024e	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR vdev$[rsp]
  00255	83 e0 0f	 and	 eax, 15
  00258	8b 4c 24 44	 mov	 ecx, DWORD PTR vcu$[rsp]
  0025c	8d 44 41 08	 lea	 eax, DWORD PTR [rcx+rax*2+8]
  00260	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00265	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0026d	ba fe ff ff ff	 mov	 edx, -2
  00272	8b c8		 mov	 ecx, eax
  00274	e8 00 00 00 00	 call	 s370_vfetch2
  00279	0f b7 c0	 movzx	 eax, ax
  0027c	89 44 24 50	 mov	 DWORD PTR vdvix$[rsp], eax

; 1102 :     if(vdvix & 0x8000)

  00280	8b 44 24 50	 mov	 eax, DWORD PTR vdvix$[rsp]
  00284	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00289	85 c0		 test	 eax, eax
  0028b	0f 84 9a 00 00
	00		 je	 $LN8@ecpsvm_do_

; 1103 :     {
; 1104 :         DEBUG_CPASSISTX(SCNVU,MSGBUF(buf, "SCNVU Virtual Device %4.4X has no VDEV block",vdev));

  00291	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+184
  00297	c1 e8 02	 shr	 eax, 2
  0029a	83 e0 01	 and	 eax, 1
  0029d	85 c0		 test	 eax, eax
  0029f	74 1f		 je	 SHORT $LN9@ecpsvm_do_
  002a1	44 8b 8c 24 98
	01 00 00	 mov	 r9d, DWORD PTR vdev$[rsp]
  002a9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170372
  002b0	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  002b5	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  002ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN9@ecpsvm_do_:

; 1105 :         DEBUG_CPASSISTX(SCNVU,WRMSG(HHC90000, "D", buf));

  002c0	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+184
  002c6	c1 e8 02	 shr	 eax, 2
  002c9	83 e0 01	 and	 eax, 1
  002cc	85 c0		 test	 eax, eax
  002ce	74 51		 je	 SHORT $LN10@ecpsvm_do_
  002d0	b9 01 00 00 00	 mov	 ecx, 1
  002d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002db	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  002e0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170374
  002ec	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170375
  002f8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002fd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00302	41 b9 03 00 00
	00		 mov	 r9d, 3
  00308	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170376
  0030f	ba 51 04 00 00	 mov	 edx, 1105		; 00000451H
  00314	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170377
  0031b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN10@ecpsvm_do_:

; 1106 :         return(1);

  00321	b8 01 00 00 00	 mov	 eax, 1
  00326	e9 35 01 00 00	 jmp	 $LN1@ecpsvm_do_
$LN8@ecpsvm_do_:

; 1107 :     }
; 1108 :     vdv=EVM_L(effective_addr2+8)+vdvix;

  0032b	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00332	83 c0 08	 add	 eax, 8
  00335	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0033a	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00342	ba fe ff ff ff	 mov	 edx, -2
  00347	8b c8		 mov	 ecx, eax
  00349	e8 00 00 00 00	 call	 s370_vfetch4
  0034e	03 44 24 50	 add	 eax, DWORD PTR vdvix$[rsp]
  00352	89 44 24 54	 mov	 DWORD PTR vdv$[rsp], eax

; 1109 :     DEBUG_CPASSISTX(SCNVU,MSGBUF(buf, "SCNVU %4.4X : VCH = %8.8X, VCU = %8.8X, VDEV = %8.8X",

  00356	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+184
  0035c	c1 e8 02	 shr	 eax, 2
  0035f	83 e0 01	 and	 eax, 1
  00362	85 c0		 test	 eax, eax
  00364	74 37		 je	 SHORT $LN11@ecpsvm_do_
  00366	8b 44 24 54	 mov	 eax, DWORD PTR vdv$[rsp]
  0036a	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0036e	8b 44 24 44	 mov	 eax, DWORD PTR vcu$[rsp]
  00372	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00376	8b 44 24 40	 mov	 eax, DWORD PTR vch$[rsp]
  0037a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0037e	44 8b 8c 24 98
	01 00 00	 mov	 r9d, DWORD PTR vdev$[rsp]
  00386	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170379
  0038d	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00392	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00397	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN11@ecpsvm_do_:

; 1110 :                 vdev,
; 1111 :                 vch,
; 1112 :                 vcu,
; 1113 :                 vdv));
; 1114 :     DEBUG_CPASSISTX(SCNVU,WRMSG(HHC90000, "D", buf));

  0039d	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+184
  003a3	c1 e8 02	 shr	 eax, 2
  003a6	83 e0 01	 and	 eax, 1
  003a9	85 c0		 test	 eax, eax
  003ab	74 51		 je	 SHORT $LN12@ecpsvm_do_
  003ad	b9 01 00 00 00	 mov	 ecx, 1
  003b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003b8	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  003bd	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170381
  003c9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170382
  003d5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003da	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003df	41 b9 03 00 00
	00		 mov	 r9d, 3
  003e5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170383
  003ec	ba 5a 04 00 00	 mov	 edx, 1114		; 0000045aH
  003f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170384
  003f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN12@ecpsvm_do_:

; 1115 :     regs->GR_L(6)=vch;

  003fe	b8 08 00 00 00	 mov	 eax, 8
  00403	48 6b c0 06	 imul	 rax, rax, 6
  00407	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0040f	8b 54 24 40	 mov	 edx, DWORD PTR vch$[rsp]
  00413	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 1116 :     regs->GR_L(7)=vcu;

  0041a	b8 08 00 00 00	 mov	 eax, 8
  0041f	48 6b c0 07	 imul	 rax, rax, 7
  00423	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0042b	8b 54 24 44	 mov	 edx, DWORD PTR vcu$[rsp]
  0042f	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 1117 :     regs->GR_L(8)=vdv;

  00436	b8 08 00 00 00	 mov	 eax, 8
  0043b	48 6b c0 08	 imul	 rax, rax, 8
  0043f	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00447	8b 54 24 54	 mov	 edx, DWORD PTR vdv$[rsp]
  0044b	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 1118 :     regs->psw.cc=0;

  00452	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0045a	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 1119 :     return(0);

  0045e	33 c0		 xor	 eax, eax
$LN1@ecpsvm_do_:

; 1120 : }

  00460	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00468	48 33 cc	 xor	 rcx, rsp
  0046b	e8 00 00 00 00	 call	 __security_check_cookie
  00470	48 81 c4 78 01
	00 00		 add	 rsp, 376		; 00000178H
  00477	c3		 ret	 0
ecpsvm_do_scnvu ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
ccwop$ = 64
prevccwop$ = 65
savearea$ = 68
ccwfl$ = 72
el$ = 76
tv80 = 80
dl$ = 84
rcw$ = 88
cc$ = 92
devtable$ = 96
devrtn$ = 100
tv524 = 104
regs$ = 128
effective_addr1$ = 136
effective_addr2$ = 144
raddr$ = 152
ecpsvm_do_deccw1 PROC

; 706  : {

$LN48:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 707  : VADR dl;
; 708  : VADR el;
; 709  : VADR savearea;
; 710  : VADR rcw;
; 711  : VADR devtable;
; 712  : VADR devrtn;
; 713  : int  cc;
; 714  : BYTE ccwop;
; 715  : BYTE ccwfl;
; 716  : BYTE prevccwop;
; 717  : 
; 718  :     dl=effective_addr1;

  00017	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0001e	89 44 24 54	 mov	 DWORD PTR dl$[rsp], eax

; 719  :     el=effective_addr2;

  00022	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00029	89 44 24 4c	 mov	 DWORD PTR el$[rsp], eax

; 720  : 
; 721  :     /* Load required registers:
; 722  :        R1 -> virtual CCW address
; 723  :        R8 -> VDEVBLOK
; 724  :        R3 contains 1st word of CCW
; 725  :        R4 contains 2nd word of CCW
; 726  :        Cache a copy of the CCW opcode and CCW flags
; 727  :     */
; 728  :     regs->GR_L(1)=regs->GR_L(9);

  0002d	b8 08 00 00 00	 mov	 eax, 8
  00032	48 6b c0 09	 imul	 rax, rax, 9
  00036	b9 08 00 00 00	 mov	 ecx, 8
  0003b	48 6b c9 01	 imul	 rcx, rcx, 1
  0003f	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00047	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0004f	41 8b 84 00 80
	02 00 00	 mov	 eax, DWORD PTR [r8+rax+640]
  00057	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 729  :     savearea=regs->GR_L(13);

  0005e	b8 08 00 00 00	 mov	 eax, 8
  00063	48 6b c0 0d	 imul	 rax, rax, 13
  00067	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0006f	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00076	89 44 24 44	 mov	 DWORD PTR savearea$[rsp], eax

; 730  :     regs->GR_L(8)=EVM_L(savearea+SAVER8)+EVM_L(regs->GR_L(11)+VMDVSTRT);

  0007a	8b 44 24 44	 mov	 eax, DWORD PTR savearea$[rsp]
  0007e	83 c0 30	 add	 eax, 48			; 00000030H
  00081	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00086	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0008e	ba fe ff ff ff	 mov	 edx, -2
  00093	8b c8		 mov	 ecx, eax
  00095	e8 00 00 00 00	 call	 s370_vfetch4
  0009a	89 44 24 50	 mov	 DWORD PTR tv80[rsp], eax
  0009e	b9 08 00 00 00	 mov	 ecx, 8
  000a3	48 6b c9 0b	 imul	 rcx, rcx, 11
  000a7	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000af	8b 8c 0a 80 02
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+640]
  000b6	83 c1 20	 add	 ecx, 32			; 00000020H
  000b9	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  000bf	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  000c7	ba fe ff ff ff	 mov	 edx, -2
  000cc	e8 00 00 00 00	 call	 s370_vfetch4
  000d1	8b 4c 24 50	 mov	 ecx, DWORD PTR tv80[rsp]
  000d5	03 c8		 add	 ecx, eax
  000d7	8b c1		 mov	 eax, ecx
  000d9	b9 08 00 00 00	 mov	 ecx, 8
  000de	48 6b c9 08	 imul	 rcx, rcx, 8
  000e2	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000ea	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 731  :     regs->GR_L(3)=EVM_L(raddr);

  000f1	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR raddr$[rsp]
  000f9	48 25 ff ff ff
	00		 and	 rax, 16777215		; 00ffffffH
  000ff	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00107	ba fe ff ff ff	 mov	 edx, -2
  0010c	8b c8		 mov	 ecx, eax
  0010e	e8 00 00 00 00	 call	 s370_vfetch4
  00113	b9 08 00 00 00	 mov	 ecx, 8
  00118	48 6b c9 03	 imul	 rcx, rcx, 3
  0011c	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00124	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 732  :     regs->GR_L(4)=EVM_L(raddr+4);

  0012b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR raddr$[rsp]
  00133	48 83 c0 04	 add	 rax, 4
  00137	48 25 ff ff ff
	00		 and	 rax, 16777215		; 00ffffffH
  0013d	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00145	ba fe ff ff ff	 mov	 edx, -2
  0014a	8b c8		 mov	 ecx, eax
  0014c	e8 00 00 00 00	 call	 s370_vfetch4
  00151	b9 08 00 00 00	 mov	 ecx, 8
  00156	48 6b c9 04	 imul	 rcx, rcx, 4
  0015a	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00162	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 733  :     ccwop=regs->GR_LHHCH(3);

  00169	b8 08 00 00 00	 mov	 eax, 8
  0016e	48 6b c0 03	 imul	 rax, rax, 3
  00172	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0017a	0f b6 84 01 83
	02 00 00	 movzx	 eax, BYTE PTR [rcx+rax+643]
  00182	88 44 24 40	 mov	 BYTE PTR ccwop$[rsp], al

; 734  :     ccwfl=regs->GR_LHHCH(4);

  00186	b8 08 00 00 00	 mov	 eax, 8
  0018b	48 6b c0 04	 imul	 rax, rax, 4
  0018f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00197	0f b6 84 01 83
	02 00 00	 movzx	 eax, BYTE PTR [rcx+rax+643]
  0019f	88 44 24 48	 mov	 BYTE PTR ccwfl$[rsp], al

; 735  : 
; 736  :     /* Append the CCW to the real CCW string; clear the CP control byte */
; 737  :     EVM_ST(regs->GR_L(3),regs->GR_L(6));

  001a3	b8 08 00 00 00	 mov	 eax, 8
  001a8	48 6b c0 06	 imul	 rax, rax, 6
  001ac	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001b4	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  001bb	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  001c0	b9 08 00 00 00	 mov	 ecx, 8
  001c5	48 6b c9 03	 imul	 rcx, rcx, 3
  001c9	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  001d1	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  001d7	8b d0		 mov	 edx, eax
  001d9	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  001e1	8b 8c 08 80 02
	00 00		 mov	 ecx, DWORD PTR [rax+rcx+640]
  001e8	e8 00 00 00 00	 call	 s370_vstore4

; 738  :     EVM_ST(regs->GR_L(4),regs->GR_L(6)+4);

  001ed	b8 08 00 00 00	 mov	 eax, 8
  001f2	48 6b c0 06	 imul	 rax, rax, 6
  001f6	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001fe	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00205	83 c0 04	 add	 eax, 4
  00208	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0020d	b9 08 00 00 00	 mov	 ecx, 8
  00212	48 6b c9 04	 imul	 rcx, rcx, 4
  00216	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0021e	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00224	8b d0		 mov	 edx, eax
  00226	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0022e	8b 8c 08 80 02
	00 00		 mov	 ecx, DWORD PTR [rax+rcx+640]
  00235	e8 00 00 00 00	 call	 s370_vstore4

; 739  :     EVM_STC(0,regs->GR_L(6)+RCWCTL);

  0023a	b8 08 00 00 00	 mov	 eax, 8
  0023f	48 6b c0 06	 imul	 rax, rax, 6
  00243	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0024b	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00252	83 c0 05	 add	 eax, 5
  00255	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0025a	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00262	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00268	8b d0		 mov	 edx, eax
  0026a	33 c9		 xor	 ecx, ecx
  0026c	e8 00 00 00 00	 call	 s370_vstoreb

; 740  : 
; 741  :     /* Isolate CCW data address; A(CCWGENRL) must be in R2 before any exit */
; 742  :     regs->GR_L(1)=regs->GR_L(3) & 0x00FFFFFF;

  00271	b8 08 00 00 00	 mov	 eax, 8
  00276	48 6b c0 03	 imul	 rax, rax, 3
  0027a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00282	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00289	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0028e	b9 08 00 00 00	 mov	 ecx, 8
  00293	48 6b c9 01	 imul	 rcx, rcx, 1
  00297	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0029f	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 743  :     regs->GR_L(2)=EVM_L(dl+4);

  002a6	8b 44 24 54	 mov	 eax, DWORD PTR dl$[rsp]
  002aa	83 c0 04	 add	 eax, 4
  002ad	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002b2	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  002ba	ba fe ff ff ff	 mov	 edx, -2
  002bf	8b c8		 mov	 ecx, eax
  002c1	e8 00 00 00 00	 call	 s370_vfetch4
  002c6	b9 08 00 00 00	 mov	 ecx, 8
  002cb	48 6b c9 02	 imul	 rcx, rcx, 2
  002cf	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  002d7	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 744  : 
; 745  :     /* Special processing only if the chain-data flag is set */
; 746  :     if(EVM_IC(savearea+PRVFLAG) & CD)

  002de	8b 44 24 44	 mov	 eax, DWORD PTR savearea$[rsp]
  002e2	83 c0 0d	 add	 eax, 13
  002e5	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002ea	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  002f2	ba fe ff ff ff	 mov	 edx, -2
  002f7	8b c8		 mov	 ecx, eax
  002f9	e8 00 00 00 00	 call	 s370_vfetchb
  002fe	0f b6 c0	 movzx	 eax, al
  00301	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00306	85 c0		 test	 eax, eax
  00308	0f 84 8a 02 00
	00		 je	 $LN17@ecpsvm_do_

; 747  :     {
; 748  :         if((ccwop & 0x0F)==0x08)                    /* TIC CCW ? */

  0030e	0f b6 44 24 40	 movzx	 eax, BYTE PTR ccwop$[rsp]
  00313	83 e0 0f	 and	 eax, 15
  00316	83 f8 08	 cmp	 eax, 8
  00319	0f 85 63 01 00
	00		 jne	 $LN19@ecpsvm_do_

; 749  :         {
; 750  :             DEBUG_CPASSISTX(DFCCW,WRMSG(HHC90000, "D", "DFCCW - Exit CCWTIC1"));

  0031f	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+344
  00325	c1 e8 02	 shr	 eax, 2
  00328	83 e0 01	 and	 eax, 1
  0032b	85 c0		 test	 eax, eax
  0032d	74 53		 je	 SHORT $LN21@ecpsvm_do_
  0032f	b9 01 00 00 00	 mov	 ecx, 1
  00334	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0033a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170045
  00341	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00346	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170046
  0034d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00352	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170047
  00359	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0035e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00363	41 b9 03 00 00
	00		 mov	 r9d, 3
  00369	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170048
  00370	ba ee 02 00 00	 mov	 edx, 750		; 000002eeH
  00375	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170049
  0037c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN21@ecpsvm_do_:

; 751  :             EVM_STC(CDTIC,regs->GR_L(6));

  00382	b8 08 00 00 00	 mov	 eax, 8
  00387	48 6b c0 06	 imul	 rax, rax, 6
  0038b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00393	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0039a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0039f	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  003a7	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  003ad	8b d0		 mov	 edx, eax
  003af	b1 18		 mov	 cl, 24
  003b1	e8 00 00 00 00	 call	 s370_vstoreb
$LN4@ecpsvm_do_:

; 752  :             SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+8));           /* TIC follows chain data (CD), exit to CCWTIC1 */

  003b6	8b 44 24 4c	 mov	 eax, DWORD PTR el$[rsp]
  003ba	83 c0 08	 add	 eax, 8
  003bd	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  003c2	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  003ca	ba fe ff ff ff	 mov	 edx, -2
  003cf	8b c8		 mov	 ecx, eax
  003d1	e8 00 00 00 00	 call	 s370_vfetch4
  003d6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  003db	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003e3	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  003e9	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003f1	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  003f9	74 6e		 je	 SHORT $LN22@ecpsvm_do_
  003fb	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00403	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00409	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  0040e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00416	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  0041c	75 38		 jne	 SHORT $LN23@ecpsvm_do_
  0041e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00426	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0042c	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00431	8b c0		 mov	 eax, eax
  00433	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0043b	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00442	48 0b c8	 or	 rcx, rax
  00445	48 8b c1	 mov	 rax, rcx
  00448	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00450	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00454	eb 13		 jmp	 SHORT $LN24@ecpsvm_do_
$LN23@ecpsvm_do_:
  00456	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0045e	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN24@ecpsvm_do_:
$LN22@ecpsvm_do_:
  00469	33 c0		 xor	 eax, eax
  0046b	85 c0		 test	 eax, eax
  0046d	0f 85 43 ff ff
	ff		 jne	 $LN4@ecpsvm_do_

; 753  :             return(1);

  00473	b8 01 00 00 00	 mov	 eax, 1
  00478	e9 de 07 00 00	 jmp	 $LN1@ecpsvm_do_

; 754  :         }

  0047d	e9 14 01 00 00	 jmp	 $LN20@ecpsvm_do_
$LN19@ecpsvm_do_:

; 755  :         else
; 756  :         {                                           /* if not TIC but CD is set, do "CHOOSEOP" rtn */
; 757  :             rcw=EVM_L(savearea+THISRCW)+RCWHSIZ;

  00482	8b 44 24 44	 mov	 eax, DWORD PTR savearea$[rsp]
  00486	83 c0 58	 add	 eax, 88			; 00000058H
  00489	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0048e	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00496	ba fe ff ff ff	 mov	 edx, -2
  0049b	8b c8		 mov	 ecx, eax
  0049d	e8 00 00 00 00	 call	 s370_vfetch4
  004a2	83 c0 10	 add	 eax, 16
  004a5	89 44 24 58	 mov	 DWORD PTR rcw$[rsp], eax

; 758  :             if(regs->GR_L(6)==rcw)

  004a9	b8 08 00 00 00	 mov	 eax, 8
  004ae	48 6b c0 06	 imul	 rax, rax, 6
  004b2	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004ba	8b 54 24 58	 mov	 edx, DWORD PTR rcw$[rsp]
  004be	39 94 01 80 02
	00 00		 cmp	 DWORD PTR [rcx+rax+640], edx
  004c5	75 7a		 jne	 SHORT $LN25@ecpsvm_do_

; 759  :             {
; 760  :                 prevccwop=EVM_IC(savearea+PRVCOMND);

  004c7	8b 44 24 44	 mov	 eax, DWORD PTR savearea$[rsp]
  004cb	83 c0 0c	 add	 eax, 12
  004ce	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  004d3	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  004db	ba fe ff ff ff	 mov	 edx, -2
  004e0	8b c8		 mov	 ecx, eax
  004e2	e8 00 00 00 00	 call	 s370_vfetchb
  004e7	88 44 24 41	 mov	 BYTE PTR prevccwop$[rsp], al

; 761  :                 regs->GR_LHHCH(3)=prevccwop;

  004eb	b8 08 00 00 00	 mov	 eax, 8
  004f0	48 6b c0 03	 imul	 rax, rax, 3
  004f4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004fc	0f b6 54 24 41	 movzx	 edx, BYTE PTR prevccwop$[rsp]
  00501	88 94 01 83 02
	00 00		 mov	 BYTE PTR [rcx+rax+643], dl

; 762  :                 EVM_STC(prevccwop,regs->GR_L(6));

  00508	b8 08 00 00 00	 mov	 eax, 8
  0050d	48 6b c0 06	 imul	 rax, rax, 6
  00511	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00519	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00520	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00525	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0052d	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00533	8b d0		 mov	 edx, eax
  00535	0f b6 4c 24 41	 movzx	 ecx, BYTE PTR prevccwop$[rsp]
  0053a	e8 00 00 00 00	 call	 s370_vstoreb

; 763  :             }

  0053f	eb 55		 jmp	 SHORT $LN26@ecpsvm_do_
$LN25@ecpsvm_do_:

; 764  :             else
; 765  :             {
; 766  :                 prevccwop=0x00;

  00541	c6 44 24 41 00	 mov	 BYTE PTR prevccwop$[rsp], 0

; 767  :                 regs->GR_LHHCH(3)=0x00;

  00546	b8 08 00 00 00	 mov	 eax, 8
  0054b	48 6b c0 03	 imul	 rax, rax, 3
  0054f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00557	c6 84 01 83 02
	00 00 00	 mov	 BYTE PTR [rcx+rax+643], 0

; 768  :                 EVM_STC(prevccwop,regs->GR_L(6));

  0055f	b8 08 00 00 00	 mov	 eax, 8
  00564	48 6b c0 06	 imul	 rax, rax, 6
  00568	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00570	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00577	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0057c	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00584	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0058a	8b d0		 mov	 edx, eax
  0058c	0f b6 4c 24 41	 movzx	 ecx, BYTE PTR prevccwop$[rsp]
  00591	e8 00 00 00 00	 call	 s370_vstoreb
$LN26@ecpsvm_do_:
$LN20@ecpsvm_do_:

; 769  :             }
; 770  :         }
; 771  :     }

  00596	eb 26		 jmp	 SHORT $LN18@ecpsvm_do_
$LN17@ecpsvm_do_:

; 772  :     else
; 773  :     {
; 774  :         EVM_STC(ccwop,savearea+VIRCOMND);

  00598	8b 44 24 44	 mov	 eax, DWORD PTR savearea$[rsp]
  0059c	83 c0 0e	 add	 eax, 14
  0059f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  005a4	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  005ac	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  005b2	8b d0		 mov	 edx, eax
  005b4	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR ccwop$[rsp]
  005b9	e8 00 00 00 00	 call	 s370_vstoreb
$LN18@ecpsvm_do_:

; 775  :     }
; 776  :     EVM_STC(ccwfl & (CD+CC),savearea+VIRFLAG);

  005be	8b 44 24 44	 mov	 eax, DWORD PTR savearea$[rsp]
  005c2	83 c0 0f	 add	 eax, 15
  005c5	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  005ca	0f b6 4c 24 48	 movzx	 ecx, BYTE PTR ccwfl$[rsp]
  005cf	81 e1 c0 00 00
	00		 and	 ecx, 192		; 000000c0H
  005d5	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  005dd	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  005e3	8b d0		 mov	 edx, eax
  005e5	e8 00 00 00 00	 call	 s370_vstoreb

; 777  : 
; 778  :     /* See if user data area is in a valid DAT segment */
; 779  :     cc=ecpsvm_int_lra(regs,regs->GR_L(1),&raddr);

  005ea	b8 08 00 00 00	 mov	 eax, 8
  005ef	48 6b c0 01	 imul	 rax, rax, 1
  005f3	4c 8d 84 24 98
	00 00 00	 lea	 r8, QWORD PTR raddr$[rsp]
  005fb	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00603	8b 94 01 80 02
	00 00		 mov	 edx, DWORD PTR [rcx+rax+640]
  0060a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00612	e8 00 00 00 00	 call	 ecpsvm_int_lra
  00617	89 44 24 5c	 mov	 DWORD PTR cc$[rsp], eax

; 780  :     if (cc==1)

  0061b	83 7c 24 5c 01	 cmp	 DWORD PTR cc$[rsp], 1
  00620	0f 85 2a 01 00
	00		 jne	 $LN27@ecpsvm_do_

; 781  :     {
; 782  :         DEBUG_CPASSISTX(DFCCW,WRMSG(HHC90000, "D", "DFCCW - Exit ADDRINVAL"));

  00626	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+344
  0062c	c1 e8 02	 shr	 eax, 2
  0062f	83 e0 01	 and	 eax, 1
  00632	85 c0		 test	 eax, eax
  00634	74 53		 je	 SHORT $LN28@ecpsvm_do_
  00636	b9 01 00 00 00	 mov	 ecx, 1
  0063b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00641	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170057
  00648	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0064d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170058
  00654	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00659	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170059
  00660	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00665	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0066a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00670	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170060
  00677	ba 0e 03 00 00	 mov	 edx, 782		; 0000030eH
  0067c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170061
  00683	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN28@ecpsvm_do_:
$LN7@ecpsvm_do_:

; 783  :         SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+12));          /* Invalid user data addr, exit to ADDRINVL */

  00689	8b 44 24 4c	 mov	 eax, DWORD PTR el$[rsp]
  0068d	83 c0 0c	 add	 eax, 12
  00690	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00695	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0069d	ba fe ff ff ff	 mov	 edx, -2
  006a2	8b c8		 mov	 ecx, eax
  006a4	e8 00 00 00 00	 call	 s370_vfetch4
  006a9	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  006ae	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  006b6	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  006bc	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  006c4	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  006cc	74 6e		 je	 SHORT $LN29@ecpsvm_do_
  006ce	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  006d6	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  006dc	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  006e1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  006e9	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  006ef	75 38		 jne	 SHORT $LN30@ecpsvm_do_
  006f1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  006f9	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  006ff	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00704	8b c0		 mov	 eax, eax
  00706	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0070e	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00715	48 0b c8	 or	 rcx, rax
  00718	48 8b c1	 mov	 rax, rcx
  0071b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00723	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00727	eb 13		 jmp	 SHORT $LN31@ecpsvm_do_
$LN30@ecpsvm_do_:
  00729	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00731	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN31@ecpsvm_do_:
$LN29@ecpsvm_do_:
  0073c	33 c0		 xor	 eax, eax
  0073e	85 c0		 test	 eax, eax
  00740	0f 85 43 ff ff
	ff		 jne	 $LN7@ecpsvm_do_

; 784  :         return(1);

  00746	b8 01 00 00 00	 mov	 eax, 1
  0074b	e9 0b 05 00 00	 jmp	 $LN1@ecpsvm_do_
$LN27@ecpsvm_do_:

; 785  :     }
; 786  : 
; 787  :     /* Compute index for device type specific handler.  If CCW count is 0, check
; 788  :        that the CCW command is a TIC, otherwise it is a bad CCW.
; 789  :     */
; 790  :     ccwop=EVM_IC(savearea+VIRCOMND) & 0x0F;

  00750	8b 44 24 44	 mov	 eax, DWORD PTR savearea$[rsp]
  00754	83 c0 0e	 add	 eax, 14
  00757	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0075c	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00764	ba fe ff ff ff	 mov	 edx, -2
  00769	8b c8		 mov	 ecx, eax
  0076b	e8 00 00 00 00	 call	 s370_vfetchb
  00770	0f b6 c0	 movzx	 eax, al
  00773	83 e0 0f	 and	 eax, 15
  00776	88 44 24 40	 mov	 BYTE PTR ccwop$[rsp], al

; 791  :     ccwop*=2;

  0077a	0f b6 44 24 40	 movzx	 eax, BYTE PTR ccwop$[rsp]
  0077f	d1 e0		 shl	 eax, 1
  00781	88 44 24 40	 mov	 BYTE PTR ccwop$[rsp], al

; 792  :     regs->GR_L(4)&=0x0000FFFF;

  00785	b8 08 00 00 00	 mov	 eax, 8
  0078a	48 6b c0 04	 imul	 rax, rax, 4
  0078e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00796	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0079d	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  007a2	b9 08 00 00 00	 mov	 ecx, 8
  007a7	48 6b c9 04	 imul	 rcx, rcx, 4
  007ab	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  007b3	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 793  :     if(regs->GR_L(4)==0)

  007ba	b8 08 00 00 00	 mov	 eax, 8
  007bf	48 6b c0 04	 imul	 rax, rax, 4
  007c3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  007cb	83 bc 01 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax+640], 0
  007d3	0f 85 c7 02 00
	00		 jne	 $LN32@ecpsvm_do_

; 794  :     {
; 795  :         if(ccwop!=16)                           /* is CCW op not a TIC  (08 x 2) ?  */

  007d9	0f b6 44 24 40	 movzx	 eax, BYTE PTR ccwop$[rsp]
  007de	83 f8 10	 cmp	 eax, 16
  007e1	0f 84 5d 01 00
	00		 je	 $LN33@ecpsvm_do_

; 796  :         {
; 797  :             DEBUG_CPASSISTX(DFCCW,WRMSG(HHC90000, "D", "DFCCW - Exit CCWBAD"));

  007e7	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+344
  007ed	c1 e8 02	 shr	 eax, 2
  007f0	83 e0 01	 and	 eax, 1
  007f3	85 c0		 test	 eax, eax
  007f5	74 53		 je	 SHORT $LN35@ecpsvm_do_
  007f7	b9 01 00 00 00	 mov	 ecx, 1
  007fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00802	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170069
  00809	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0080e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170070
  00815	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0081a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170071
  00821	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00826	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0082b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00831	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170072
  00838	ba 1d 03 00 00	 mov	 edx, 797		; 0000031dH
  0083d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170073
  00844	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN35@ecpsvm_do_:

; 798  :             regs->GR_L(1)=regs->GR_L(9);

  0084a	b8 08 00 00 00	 mov	 eax, 8
  0084f	48 6b c0 09	 imul	 rax, rax, 9
  00853	b9 08 00 00 00	 mov	 ecx, 8
  00858	48 6b c9 01	 imul	 rcx, rcx, 1
  0085c	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00864	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0086c	41 8b 84 00 80
	02 00 00	 mov	 eax, DWORD PTR [r8+rax+640]
  00874	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax
$LN10@ecpsvm_do_:

; 799  :             SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+0));           /* CCW count is 0; exit to CCWBAD */

  0087b	8b 44 24 4c	 mov	 eax, DWORD PTR el$[rsp]
  0087f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00884	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0088c	ba fe ff ff ff	 mov	 edx, -2
  00891	8b c8		 mov	 ecx, eax
  00893	e8 00 00 00 00	 call	 s370_vfetch4
  00898	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0089d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  008a5	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  008ab	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  008b3	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  008bb	74 6e		 je	 SHORT $LN36@ecpsvm_do_
  008bd	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  008c5	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  008cb	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  008d0	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  008d8	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  008de	75 38		 jne	 SHORT $LN37@ecpsvm_do_
  008e0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  008e8	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  008ee	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  008f3	8b c0		 mov	 eax, eax
  008f5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  008fd	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00904	48 0b c8	 or	 rcx, rax
  00907	48 8b c1	 mov	 rax, rcx
  0090a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00912	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00916	eb 13		 jmp	 SHORT $LN38@ecpsvm_do_
$LN37@ecpsvm_do_:
  00918	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00920	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN38@ecpsvm_do_:
$LN36@ecpsvm_do_:
  0092b	33 c0		 xor	 eax, eax
  0092d	85 c0		 test	 eax, eax
  0092f	0f 85 46 ff ff
	ff		 jne	 $LN10@ecpsvm_do_

; 800  :             return(1);

  00935	b8 01 00 00 00	 mov	 eax, 1
  0093a	e9 1c 03 00 00	 jmp	 $LN1@ecpsvm_do_

; 801  :         }

  0093f	e9 5c 01 00 00	 jmp	 $LN34@ecpsvm_do_
$LN33@ecpsvm_do_:

; 802  :         else
; 803  :         {
; 804  :             DEBUG_CPASSISTX(DFCCW,WRMSG(HHC90000, "D", "DFCCW - Exit CCWTIC"));

  00944	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+344
  0094a	c1 e8 02	 shr	 eax, 2
  0094d	83 e0 01	 and	 eax, 1
  00950	85 c0		 test	 eax, eax
  00952	74 53		 je	 SHORT $LN39@ecpsvm_do_
  00954	b9 01 00 00 00	 mov	 ecx, 1
  00959	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0095f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170078
  00966	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0096b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170079
  00972	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00977	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170080
  0097e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00983	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00988	41 b9 03 00 00
	00		 mov	 r9d, 3
  0098e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170081
  00995	ba 24 03 00 00	 mov	 edx, 804		; 00000324H
  0099a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170082
  009a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN39@ecpsvm_do_:

; 805  :             regs->GR_L(4)--;

  009a7	b8 08 00 00 00	 mov	 eax, 8
  009ac	48 6b c0 04	 imul	 rax, rax, 4
  009b0	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  009b8	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  009bf	ff c8		 dec	 eax
  009c1	b9 08 00 00 00	 mov	 ecx, 8
  009c6	48 6b c9 04	 imul	 rcx, rcx, 4
  009ca	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  009d2	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax
$LN13@ecpsvm_do_:

; 806  :             SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+16));          /* CCW count is 0, but CCW was a TIC; its ok.  Exit to CCWTIC */

  009d9	8b 44 24 4c	 mov	 eax, DWORD PTR el$[rsp]
  009dd	83 c0 10	 add	 eax, 16
  009e0	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  009e5	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  009ed	ba fe ff ff ff	 mov	 edx, -2
  009f2	8b c8		 mov	 ecx, eax
  009f4	e8 00 00 00 00	 call	 s370_vfetch4
  009f9	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  009fe	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a06	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00a0c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a14	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00a1c	74 6e		 je	 SHORT $LN40@ecpsvm_do_
  00a1e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a26	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00a2c	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00a31	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a39	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00a3f	75 38		 jne	 SHORT $LN41@ecpsvm_do_
  00a41	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a49	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00a4f	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00a54	8b c0		 mov	 eax, eax
  00a56	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a5e	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00a65	48 0b c8	 or	 rcx, rax
  00a68	48 8b c1	 mov	 rax, rcx
  00a6b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a73	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00a77	eb 13		 jmp	 SHORT $LN42@ecpsvm_do_
$LN41@ecpsvm_do_:
  00a79	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a81	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN42@ecpsvm_do_:
$LN40@ecpsvm_do_:
  00a8c	33 c0		 xor	 eax, eax
  00a8e	85 c0		 test	 eax, eax
  00a90	0f 85 43 ff ff
	ff		 jne	 $LN13@ecpsvm_do_

; 807  :             return(1);

  00a96	b8 01 00 00 00	 mov	 eax, 1
  00a9b	e9 bb 01 00 00	 jmp	 $LN1@ecpsvm_do_
$LN34@ecpsvm_do_:
$LN32@ecpsvm_do_:

; 808  :         }
; 809  :     }
; 810  :     DEBUG_CPASSISTX(DFCCW,WRMSG(HHC90000, "D", "DFCCW - Complete"));

  00aa0	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+344
  00aa6	c1 e8 02	 shr	 eax, 2
  00aa9	83 e0 01	 and	 eax, 1
  00aac	85 c0		 test	 eax, eax
  00aae	74 53		 je	 SHORT $LN43@ecpsvm_do_
  00ab0	b9 01 00 00 00	 mov	 ecx, 1
  00ab5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00abb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170087
  00ac2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00ac7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170088
  00ace	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ad3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170089
  00ada	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00adf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ae4	41 b9 03 00 00
	00		 mov	 r9d, 3
  00aea	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170090
  00af1	ba 2a 03 00 00	 mov	 edx, 810		; 0000032aH
  00af6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170091
  00afd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN43@ecpsvm_do_:

; 811  :     regs->GR_L(4)--;

  00b03	b8 08 00 00 00	 mov	 eax, 8
  00b08	48 6b c0 04	 imul	 rax, rax, 4
  00b0c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00b14	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00b1b	ff c8		 dec	 eax
  00b1d	b9 08 00 00 00	 mov	 ecx, 8
  00b22	48 6b c9 04	 imul	 rcx, rcx, 4
  00b26	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00b2e	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 812  :     devtable=EVM_L(savearea+DEVTABLE);

  00b35	8b 44 24 44	 mov	 eax, DWORD PTR savearea$[rsp]
  00b39	83 c0 50	 add	 eax, 80			; 00000050H
  00b3c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00b41	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00b49	ba fe ff ff ff	 mov	 edx, -2
  00b4e	8b c8		 mov	 ecx, eax
  00b50	e8 00 00 00 00	 call	 s370_vfetch4
  00b55	89 44 24 60	 mov	 DWORD PTR devtable$[rsp], eax

; 813  :     devrtn=regs->GR_L(12) + EVM_LH(devtable+ccwop);

  00b59	b8 08 00 00 00	 mov	 eax, 8
  00b5e	48 6b c0 0c	 imul	 rax, rax, 12
  00b62	48 89 44 24 68	 mov	 QWORD PTR tv524[rsp], rax
  00b67	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR ccwop$[rsp]
  00b6c	8b 54 24 60	 mov	 edx, DWORD PTR devtable$[rsp]
  00b70	03 d1		 add	 edx, ecx
  00b72	8b ca		 mov	 ecx, edx
  00b74	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  00b7a	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00b82	ba fe ff ff ff	 mov	 edx, -2
  00b87	e8 00 00 00 00	 call	 s370_vfetch2
  00b8c	0f b7 c0	 movzx	 eax, ax
  00b8f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00b97	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv524[rsp]
  00b9c	03 84 11 80 02
	00 00		 add	 eax, DWORD PTR [rcx+rdx+640]
  00ba3	89 44 24 64	 mov	 DWORD PTR devrtn$[rsp], eax
$LN16@ecpsvm_do_:

; 814  :     SET_PSW_IA_AND_MAYBE_IP(regs,devrtn);                    /* Success.  Exit to indexed device handler code */

  00ba7	8b 44 24 64	 mov	 eax, DWORD PTR devrtn$[rsp]
  00bab	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00bb0	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00bb8	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00bbe	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00bc6	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00bce	74 6e		 je	 SHORT $LN44@ecpsvm_do_
  00bd0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00bd8	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00bde	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00be3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00beb	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00bf1	75 38		 jne	 SHORT $LN45@ecpsvm_do_
  00bf3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00bfb	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00c01	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00c06	8b c0		 mov	 eax, eax
  00c08	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00c10	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00c17	48 0b c8	 or	 rcx, rax
  00c1a	48 8b c1	 mov	 rax, rcx
  00c1d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00c25	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00c29	eb 13		 jmp	 SHORT $LN46@ecpsvm_do_
$LN45@ecpsvm_do_:
  00c2b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00c33	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN46@ecpsvm_do_:
$LN44@ecpsvm_do_:
  00c3e	33 c0		 xor	 eax, eax
  00c40	85 c0		 test	 eax, eax
  00c42	0f 85 5f ff ff
	ff		 jne	 $LN16@ecpsvm_do_

; 815  :     CPASSIST_HIT(DFCCW);

  00c48	48 8b 05 50 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+336
  00c4f	48 ff c0	 inc	 rax
  00c52	48 89 05 50 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+336, rax

; 816  :     return(0);

  00c59	33 c0		 xor	 eax, eax
$LN1@ecpsvm_do_:

; 817  : }

  00c5b	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00c5f	c3		 ret	 0
ecpsvm_do_deccw1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
corcode$ = 64
lockcount$ = 68
corte$ = 72
ptr_pl$ = 76
pg$ = 80
corsz$ = 84
cortbl$ = 88
buf$ = 96
__$ArrayPad$ = 352
regs$ = 384
effective_addr1$ = 392
effective_addr2$ = 400
ecpsvm_unlockpage1 PROC

; 616  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 617  :     char buf[256];
; 618  :     VADR ptr_pl;
; 619  :     VADR pg;
; 620  :     VADR corsz;
; 621  :     VADR cortbl;
; 622  :     VADR corte;
; 623  :     BYTE corcode;
; 624  :     U32  lockcount;
; 625  : 
; 626  :     ptr_pl=effective_addr1;

  00027	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0002e	89 44 24 4c	 mov	 DWORD PTR ptr_pl$[rsp], eax

; 627  :     pg=effective_addr2;

  00032	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00039	89 44 24 50	 mov	 DWORD PTR pg$[rsp], eax

; 628  : 
; 629  :     DEBUG_CPASSISTX(ULKPG,MSGBUF(buf, "ULKPG PAGE=%6.6X, PTRPL=%6.6X",pg,ptr_pl));

  0003d	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+120
  00043	c1 e8 02	 shr	 eax, 2
  00046	83 e0 01	 and	 eax, 1
  00049	85 c0		 test	 eax, eax
  0004b	74 24		 je	 SHORT $LN2@ecpsvm_unl
  0004d	8b 44 24 4c	 mov	 eax, DWORD PTR ptr_pl$[rsp]
  00051	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00055	44 8b 4c 24 50	 mov	 r9d, DWORD PTR pg$[rsp]
  0005a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169886
  00061	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00066	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN2@ecpsvm_unl:

; 630  :     DEBUG_CPASSISTX(ULKPG,WRMSG(HHC90000, "D", buf));

  00071	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+120
  00077	c1 e8 02	 shr	 eax, 2
  0007a	83 e0 01	 and	 eax, 1
  0007d	85 c0		 test	 eax, eax
  0007f	74 51		 je	 SHORT $LN3@ecpsvm_unl
  00081	b9 01 00 00 00	 mov	 ecx, 1
  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0008c	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00091	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169888
  0009d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169889
  000a9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000ae	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b3	41 b9 03 00 00
	00		 mov	 r9d, 3
  000b9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169890
  000c0	ba 76 02 00 00	 mov	 edx, 630		; 00000276H
  000c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169891
  000cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN3@ecpsvm_unl:

; 631  : 
; 632  :     corsz=EVM_L(ptr_pl);

  000d2	8b 44 24 4c	 mov	 eax, DWORD PTR ptr_pl$[rsp]
  000d6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000db	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  000e3	ba fe ff ff ff	 mov	 edx, -2
  000e8	8b c8		 mov	 ecx, eax
  000ea	e8 00 00 00 00	 call	 s370_vfetch4
  000ef	89 44 24 54	 mov	 DWORD PTR corsz$[rsp], eax

; 633  :     cortbl=EVM_L(ptr_pl+4);

  000f3	8b 44 24 4c	 mov	 eax, DWORD PTR ptr_pl$[rsp]
  000f7	83 c0 04	 add	 eax, 4
  000fa	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000ff	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00107	ba fe ff ff ff	 mov	 edx, -2
  0010c	8b c8		 mov	 ecx, eax
  0010e	e8 00 00 00 00	 call	 s370_vfetch4
  00113	89 44 24 58	 mov	 DWORD PTR cortbl$[rsp], eax

; 634  :     if((pg+4095)>corsz)

  00117	8b 44 24 50	 mov	 eax, DWORD PTR pg$[rsp]
  0011b	05 ff 0f 00 00	 add	 eax, 4095		; 00000fffH
  00120	3b 44 24 54	 cmp	 eax, DWORD PTR corsz$[rsp]
  00124	0f 86 97 00 00
	00		 jbe	 $LN4@ecpsvm_unl

; 635  :     {
; 636  :         DEBUG_CPASSISTX(ULKPG,MSGBUF(buf, "ULKPG Page beyond core size of %6.6X",corsz));

  0012a	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+120
  00130	c1 e8 02	 shr	 eax, 2
  00133	83 e0 01	 and	 eax, 1
  00136	85 c0		 test	 eax, eax
  00138	74 1c		 je	 SHORT $LN5@ecpsvm_unl
  0013a	44 8b 4c 24 54	 mov	 r9d, DWORD PTR corsz$[rsp]
  0013f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169894
  00146	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0014b	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00150	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN5@ecpsvm_unl:

; 637  :         DEBUG_CPASSISTX(ULKPG,WRMSG(HHC90000, "D", buf));

  00156	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+120
  0015c	c1 e8 02	 shr	 eax, 2
  0015f	83 e0 01	 and	 eax, 1
  00162	85 c0		 test	 eax, eax
  00164	74 51		 je	 SHORT $LN6@ecpsvm_unl
  00166	b9 01 00 00 00	 mov	 ecx, 1
  0016b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00171	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00176	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0017b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169896
  00182	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00187	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169897
  0018e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00193	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00198	41 b9 03 00 00
	00		 mov	 r9d, 3
  0019e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169898
  001a5	ba 7d 02 00 00	 mov	 edx, 637		; 0000027dH
  001aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169899
  001b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN6@ecpsvm_unl:

; 638  :         return(1);

  001b7	b8 01 00 00 00	 mov	 eax, 1
  001bc	e9 42 02 00 00	 jmp	 $LN1@ecpsvm_unl
$LN4@ecpsvm_unl:

; 639  :     }
; 640  :     corte=cortbl+((pg & 0xfff000)>>8);

  001c1	8b 44 24 50	 mov	 eax, DWORD PTR pg$[rsp]
  001c5	25 00 f0 ff 00	 and	 eax, 16773120		; 00fff000H
  001ca	c1 e8 08	 shr	 eax, 8
  001cd	8b 4c 24 58	 mov	 ecx, DWORD PTR cortbl$[rsp]
  001d1	03 c8		 add	 ecx, eax
  001d3	8b c1		 mov	 eax, ecx
  001d5	89 44 24 48	 mov	 DWORD PTR corte$[rsp], eax

; 641  :     corcode=EVM_IC(corte+8);

  001d9	8b 44 24 48	 mov	 eax, DWORD PTR corte$[rsp]
  001dd	83 c0 08	 add	 eax, 8
  001e0	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  001e5	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  001ed	ba fe ff ff ff	 mov	 edx, -2
  001f2	8b c8		 mov	 ecx, eax
  001f4	e8 00 00 00 00	 call	 s370_vfetchb
  001f9	88 44 24 40	 mov	 BYTE PTR corcode$[rsp], al

; 642  :     if(corcode & 0x80)

  001fd	0f b6 44 24 40	 movzx	 eax, BYTE PTR corcode$[rsp]
  00202	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00207	85 c0		 test	 eax, eax
  00209	74 30		 je	 SHORT $LN7@ecpsvm_unl

; 643  :     {
; 644  :         lockcount=EVM_L(corte+4);

  0020b	8b 44 24 48	 mov	 eax, DWORD PTR corte$[rsp]
  0020f	83 c0 04	 add	 eax, 4
  00212	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00217	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0021f	ba fe ff ff ff	 mov	 edx, -2
  00224	8b c8		 mov	 ecx, eax
  00226	e8 00 00 00 00	 call	 s370_vfetch4
  0022b	89 44 24 44	 mov	 DWORD PTR lockcount$[rsp], eax

; 645  :         lockcount--;

  0022f	8b 44 24 44	 mov	 eax, DWORD PTR lockcount$[rsp]
  00233	ff c8		 dec	 eax
  00235	89 44 24 44	 mov	 DWORD PTR lockcount$[rsp], eax

; 646  :     }

  00239	eb 6d		 jmp	 SHORT $LN8@ecpsvm_unl
$LN7@ecpsvm_unl:

; 647  :     else
; 648  :     {
; 649  :         DEBUG_CPASSISTX(ULKPG,WRMSG(HHC90000, "D", "ULKPG Attempting to unlock page that is not locked"));

  0023b	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+120
  00241	c1 e8 02	 shr	 eax, 2
  00244	83 e0 01	 and	 eax, 1
  00247	85 c0		 test	 eax, eax
  00249	74 53		 je	 SHORT $LN9@ecpsvm_unl
  0024b	b9 01 00 00 00	 mov	 ecx, 1
  00250	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00256	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169903
  0025d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00262	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169904
  00269	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0026e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169905
  00275	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0027a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0027f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00285	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169906
  0028c	ba 89 02 00 00	 mov	 edx, 649		; 00000289H
  00291	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169907
  00298	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN9@ecpsvm_unl:

; 650  :         return(1);

  0029e	b8 01 00 00 00	 mov	 eax, 1
  002a3	e9 5b 01 00 00	 jmp	 $LN1@ecpsvm_unl
$LN8@ecpsvm_unl:

; 651  :     }
; 652  :     if(lockcount==0)

  002a8	83 7c 24 44 00	 cmp	 DWORD PTR lockcount$[rsp], 0
  002ad	0f 85 9c 00 00
	00		 jne	 $LN10@ecpsvm_unl

; 653  :     {
; 654  :         corcode &= ~(0x80|0x02);

  002b3	0f b6 44 24 40	 movzx	 eax, BYTE PTR corcode$[rsp]
  002b8	25 7d ff ff ff	 and	 eax, -131		; ffffffffffffff7dH
  002bd	88 44 24 40	 mov	 BYTE PTR corcode$[rsp], al

; 655  :         EVM_STC(corcode,corte+8);

  002c1	8b 44 24 48	 mov	 eax, DWORD PTR corte$[rsp]
  002c5	83 c0 08	 add	 eax, 8
  002c8	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002cd	4c 8b 8c 24 80
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  002d5	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  002db	8b d0		 mov	 edx, eax
  002dd	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR corcode$[rsp]
  002e2	e8 00 00 00 00	 call	 s370_vstoreb

; 656  :         DEBUG_CPASSISTX(ULKPG,WRMSG(HHC90000, "D", "ULKPG now unlocked"));

  002e7	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+120
  002ed	c1 e8 02	 shr	 eax, 2
  002f0	83 e0 01	 and	 eax, 1
  002f3	85 c0		 test	 eax, eax
  002f5	74 53		 je	 SHORT $LN12@ecpsvm_unl
  002f7	b9 01 00 00 00	 mov	 ecx, 1
  002fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00302	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169911
  00309	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0030e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169912
  00315	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0031a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169913
  00321	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00326	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0032b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00331	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169914
  00338	ba 90 02 00 00	 mov	 edx, 656		; 00000290H
  0033d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169915
  00344	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN12@ecpsvm_unl:

; 657  :     }

  0034a	e9 8d 00 00 00	 jmp	 $LN11@ecpsvm_unl
$LN10@ecpsvm_unl:

; 658  :     else
; 659  :     {
; 660  :         DEBUG_CPASSISTX(ULKPG,MSGBUF(buf, "ULKPG Page still locked. Count = %6.6X",lockcount));

  0034f	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+120
  00355	c1 e8 02	 shr	 eax, 2
  00358	83 e0 01	 and	 eax, 1
  0035b	85 c0		 test	 eax, eax
  0035d	74 1c		 je	 SHORT $LN13@ecpsvm_unl
  0035f	44 8b 4c 24 44	 mov	 r9d, DWORD PTR lockcount$[rsp]
  00364	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169917
  0036b	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00370	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00375	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN13@ecpsvm_unl:

; 661  :         DEBUG_CPASSISTX(ULKPG,WRMSG(HHC90000, "D", buf));

  0037b	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+120
  00381	c1 e8 02	 shr	 eax, 2
  00384	83 e0 01	 and	 eax, 1
  00387	85 c0		 test	 eax, eax
  00389	74 51		 je	 SHORT $LN14@ecpsvm_unl
  0038b	b9 01 00 00 00	 mov	 ecx, 1
  00390	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00396	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  0039b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169919
  003a7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169920
  003b3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003b8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003bd	41 b9 03 00 00
	00		 mov	 r9d, 3
  003c3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169921
  003ca	ba 95 02 00 00	 mov	 edx, 661		; 00000295H
  003cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169922
  003d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN14@ecpsvm_unl:
$LN11@ecpsvm_unl:

; 662  :     }
; 663  :     EVM_ST(lockcount,corte+4);

  003dc	8b 44 24 48	 mov	 eax, DWORD PTR corte$[rsp]
  003e0	83 c0 04	 add	 eax, 4
  003e3	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  003e8	4c 8b 8c 24 80
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  003f0	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  003f6	8b d0		 mov	 edx, eax
  003f8	8b 4c 24 44	 mov	 ecx, DWORD PTR lockcount$[rsp]
  003fc	e8 00 00 00 00	 call	 s370_vstore4

; 664  :     return(0);

  00401	33 c0		 xor	 eax, eax
$LN1@ecpsvm_unl:

; 665  : }

  00403	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0040b	48 33 cc	 xor	 rcx, rsp
  0040e	e8 00 00 00 00	 call	 __security_check_cookie
  00413	48 81 c4 78 01
	00 00		 add	 rsp, 376		; 00000178H
  0041a	c3		 ret	 0
ecpsvm_unlockpage1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
corcode$ = 64
corte$ = 68
lockcount$ = 72
cortbl$ = 80
buf$ = 96
__$ArrayPad$ = 352
regs$ = 384
cortab$ = 392
pg$ = 400
ecpsvm_lockpage1 PROC

; 553  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 554  :     char buf[256];
; 555  :     BYTE corcode;
; 556  :     VADR corte;
; 557  :     U32  lockcount;
; 558  :     RADR cortbl;
; 559  : 
; 560  :     DEBUG_CPASSISTX(LCKPG,MSGBUF(buf, "LKPG coreptr = "F_RADR" Frame = "F_RADR,cortab,pg));

  00028	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+88
  0002e	c1 e8 02	 shr	 eax, 2
  00031	83 e0 01	 and	 eax, 1
  00034	85 c0		 test	 eax, eax
  00036	74 2c		 je	 SHORT $LN2@ecpsvm_loc
  00038	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR pg$[rsp]
  00040	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00045	4c 8b 8c 24 88
	01 00 00	 mov	 r9, QWORD PTR cortab$[rsp]
  0004d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169781
  00054	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00059	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN2@ecpsvm_loc:

; 561  :     DEBUG_CPASSISTX(LCKPG,WRMSG(HHC90000, "D", buf));

  00064	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+88
  0006a	c1 e8 02	 shr	 eax, 2
  0006d	83 e0 01	 and	 eax, 1
  00070	85 c0		 test	 eax, eax
  00072	74 51		 je	 SHORT $LN3@ecpsvm_loc
  00074	b9 01 00 00 00	 mov	 ecx, 1
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0007f	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00084	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169783
  00090	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00095	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169784
  0009c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000a1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a6	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169785
  000b3	ba 31 02 00 00	 mov	 edx, 561		; 00000231H
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169786
  000bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN3@ecpsvm_loc:

; 562  :     cortbl=EVM_L(cortab);

  000c5	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR cortab$[rsp]
  000cd	48 25 ff ff ff
	00		 and	 rax, 16777215		; 00ffffffH
  000d3	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  000db	ba fe ff ff ff	 mov	 edx, -2
  000e0	8b c8		 mov	 ecx, eax
  000e2	e8 00 00 00 00	 call	 s370_vfetch4
  000e7	8b c0		 mov	 eax, eax
  000e9	48 89 44 24 50	 mov	 QWORD PTR cortbl$[rsp], rax

; 563  :     corte=cortbl+((pg & 0xfff000)>>8);

  000ee	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR pg$[rsp]
  000f6	48 25 00 f0 ff
	00		 and	 rax, 16773120		; 00fff000H
  000fc	48 c1 e8 08	 shr	 rax, 8
  00100	48 8b 4c 24 50	 mov	 rcx, QWORD PTR cortbl$[rsp]
  00105	48 03 c8	 add	 rcx, rax
  00108	48 8b c1	 mov	 rax, rcx
  0010b	89 44 24 44	 mov	 DWORD PTR corte$[rsp], eax

; 564  :     DEBUG_CPASSISTX(LCKPG,MSGBUF(buf, "LKPG corete = %6.6X",corte));

  0010f	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+88
  00115	c1 e8 02	 shr	 eax, 2
  00118	83 e0 01	 and	 eax, 1
  0011b	85 c0		 test	 eax, eax
  0011d	74 1c		 je	 SHORT $LN4@ecpsvm_loc
  0011f	44 8b 4c 24 44	 mov	 r9d, DWORD PTR corte$[rsp]
  00124	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169788
  0012b	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00130	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00135	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN4@ecpsvm_loc:

; 565  :     DEBUG_CPASSISTX(LCKPG,WRMSG(HHC90000, "D", buf));

  0013b	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+88
  00141	c1 e8 02	 shr	 eax, 2
  00144	83 e0 01	 and	 eax, 1
  00147	85 c0		 test	 eax, eax
  00149	74 51		 je	 SHORT $LN5@ecpsvm_loc
  0014b	b9 01 00 00 00	 mov	 ecx, 1
  00150	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00156	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  0015b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00160	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169790
  00167	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0016c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169791
  00173	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00178	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0017d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00183	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169792
  0018a	ba 35 02 00 00	 mov	 edx, 565		; 00000235H
  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169793
  00196	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN5@ecpsvm_loc:

; 566  :     corcode=EVM_IC(corte+8);

  0019c	8b 44 24 44	 mov	 eax, DWORD PTR corte$[rsp]
  001a0	83 c0 08	 add	 eax, 8
  001a3	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  001a8	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  001b0	ba fe ff ff ff	 mov	 edx, -2
  001b5	8b c8		 mov	 ecx, eax
  001b7	e8 00 00 00 00	 call	 s370_vfetchb
  001bc	88 44 24 40	 mov	 BYTE PTR corcode$[rsp], al

; 567  :     if(corcode & 0x80)

  001c0	0f b6 44 24 40	 movzx	 eax, BYTE PTR corcode$[rsp]
  001c5	25 80 00 00 00	 and	 eax, 128		; 00000080H
  001ca	85 c0		 test	 eax, eax
  001cc	74 30		 je	 SHORT $LN6@ecpsvm_loc

; 568  :     {
; 569  :         lockcount=EVM_L(corte+4);

  001ce	8b 44 24 44	 mov	 eax, DWORD PTR corte$[rsp]
  001d2	83 c0 04	 add	 eax, 4
  001d5	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  001da	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  001e2	ba fe ff ff ff	 mov	 edx, -2
  001e7	8b c8		 mov	 ecx, eax
  001e9	e8 00 00 00 00	 call	 s370_vfetch4
  001ee	89 44 24 48	 mov	 DWORD PTR lockcount$[rsp], eax

; 570  :         lockcount++;

  001f2	8b 44 24 48	 mov	 eax, DWORD PTR lockcount$[rsp]
  001f6	ff c0		 inc	 eax
  001f8	89 44 24 48	 mov	 DWORD PTR lockcount$[rsp], eax

; 571  :     }

  001fc	eb 3b		 jmp	 SHORT $LN7@ecpsvm_loc
$LN6@ecpsvm_loc:

; 572  :     else
; 573  :     {
; 574  :         lockcount=1;

  001fe	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR lockcount$[rsp], 1

; 575  :         corcode|=0x80;

  00206	0f b6 44 24 40	 movzx	 eax, BYTE PTR corcode$[rsp]
  0020b	0f ba e8 07	 bts	 eax, 7
  0020f	88 44 24 40	 mov	 BYTE PTR corcode$[rsp], al

; 576  :         EVM_STC(corcode,corte+8);

  00213	8b 44 24 44	 mov	 eax, DWORD PTR corte$[rsp]
  00217	83 c0 08	 add	 eax, 8
  0021a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0021f	4c 8b 8c 24 80
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00227	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0022d	8b d0		 mov	 edx, eax
  0022f	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR corcode$[rsp]
  00234	e8 00 00 00 00	 call	 s370_vstoreb
$LN7@ecpsvm_loc:

; 577  :     }
; 578  :     EVM_ST(lockcount,corte+4);

  00239	8b 44 24 44	 mov	 eax, DWORD PTR corte$[rsp]
  0023d	83 c0 04	 add	 eax, 4
  00240	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00245	4c 8b 8c 24 80
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0024d	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00253	8b d0		 mov	 edx, eax
  00255	8b 4c 24 48	 mov	 ecx, DWORD PTR lockcount$[rsp]
  00259	e8 00 00 00 00	 call	 s370_vstore4

; 579  :     DEBUG_CPASSISTX(LCKPG,MSGBUF(buf, "LKPG Page locked. Count = %6.6X",lockcount));

  0025e	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+88
  00264	c1 e8 02	 shr	 eax, 2
  00267	83 e0 01	 and	 eax, 1
  0026a	85 c0		 test	 eax, eax
  0026c	74 1c		 je	 SHORT $LN8@ecpsvm_loc
  0026e	44 8b 4c 24 48	 mov	 r9d, DWORD PTR lockcount$[rsp]
  00273	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169797
  0027a	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0027f	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00284	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN8@ecpsvm_loc:

; 580  :     DEBUG_CPASSISTX(LCKPG,WRMSG(HHC90000, "D", buf));

  0028a	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+88
  00290	c1 e8 02	 shr	 eax, 2
  00293	83 e0 01	 and	 eax, 1
  00296	85 c0		 test	 eax, eax
  00298	74 51		 je	 SHORT $LN9@ecpsvm_loc
  0029a	b9 01 00 00 00	 mov	 ecx, 1
  0029f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002a5	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  002aa	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169799
  002b6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169800
  002c2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002c7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002cc	41 b9 03 00 00
	00		 mov	 r9d, 3
  002d2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169801
  002d9	ba 44 02 00 00	 mov	 edx, 580		; 00000244H
  002de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169802
  002e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN9@ecpsvm_loc:

; 581  :     return;
; 582  : }

  002eb	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  002f3	48 33 cc	 xor	 rcx, rsp
  002f6	e8 00 00 00 00	 call	 __security_check_cookie
  002fb	48 81 c4 78 01
	00 00		 add	 rsp, 376		; 00000178H
  00302	c3		 ret	 0
ecpsvm_lockpage1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
spix$ = 64
traceptr$ = 68
maxdw$ = 72
cortbe$ = 76
trapdata$ = 80
prevblk$ = 84
cortbl$ = 88
tv182 = 92
numbytes$ = 96
buf$ = 112
__$ArrayPad$ = 368
regs$ = 400
block$ = 408
numdw$ = 416
maxsztbl$ = 424
fretl$ = 432
ecpsvm_do_fretx PROC

; 3278 : {

$LN20:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  0000b	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 3279 :     char buf[256];
; 3280 :     U32 cortbl;
; 3281 :     U32 maxdw;
; 3282 :     U32 cortbe; /* Core table Page entry for fretted block */
; 3283 :     U32 prevblk;
; 3284 :     BYTE spix;
; 3285 :     VADR traceptr;
; 3286 :     U32 trapdata;
; 3287 :     U32 numbytes;
; 3288 : 
; 3289 :     DEBUG_CPASSISTX(FRETX,MSGBUF(buf, "X fretx called AREA=%6.6X, DW=%4.4X",regs->GR_L(1),regs->GR_L(0)));

  0002d	8b 05 98 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+664
  00033	c1 e8 02	 shr	 eax, 2
  00036	83 e0 01	 and	 eax, 1
  00039	85 c0		 test	 eax, eax
  0003b	74 4c		 je	 SHORT $LN2@ecpsvm_do_
  0003d	b8 08 00 00 00	 mov	 eax, 8
  00042	48 6b c0 00	 imul	 rax, rax, 0
  00046	b9 08 00 00 00	 mov	 ecx, 8
  0004b	48 6b c9 01	 imul	 rcx, rcx, 1
  0004f	48 8b 94 24 90
	01 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00057	8b 84 02 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax+640]
  0005e	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00062	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0006a	44 8b 8c 08 80
	02 00 00	 mov	 r9d, DWORD PTR [rax+rcx+640]
  00072	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173067
  00079	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0007e	48 8d 4c 24 70	 lea	 rcx, QWORD PTR buf$[rsp]
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN2@ecpsvm_do_:

; 3290 :     DEBUG_CPASSISTX(FRETX,WRMSG(HHC90000, "D", buf));

  00089	8b 05 98 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+664
  0008f	c1 e8 02	 shr	 eax, 2
  00092	83 e0 01	 and	 eax, 1
  00095	85 c0		 test	 eax, eax
  00097	74 51		 je	 SHORT $LN3@ecpsvm_do_
  00099	b9 01 00 00 00	 mov	 ecx, 1
  0009e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a4	48 8d 4c 24 70	 lea	 rcx, QWORD PTR buf$[rsp]
  000a9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173069
  000b5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173070
  000c1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000cb	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173071
  000d8	ba da 0c 00 00	 mov	 edx, 3290		; 00000cdaH
  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173072
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN3@ecpsvm_do_:

; 3291 :     if(numdw==0)

  000ea	0f b7 84 24 a0
	01 00 00	 movzx	 eax, WORD PTR numdw$[rsp]
  000f2	85 c0		 test	 eax, eax
  000f4	75 6d		 jne	 SHORT $LN4@ecpsvm_do_

; 3292 :     {
; 3293 :         DEBUG_CPASSISTX(FRETX,WRMSG(HHC90000, "D", "ECPS:VM Cannot FRETX : DWORDS = 0"));

  000f6	8b 05 98 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+664
  000fc	c1 e8 02	 shr	 eax, 2
  000ff	83 e0 01	 and	 eax, 1
  00102	85 c0		 test	 eax, eax
  00104	74 53		 je	 SHORT $LN5@ecpsvm_do_
  00106	b9 01 00 00 00	 mov	 ecx, 1
  0010b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00111	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173075
  00118	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173076
  00124	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00129	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173077
  00130	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00135	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0013a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00140	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173078
  00147	ba dd 0c 00 00	 mov	 edx, 3293		; 00000cddH
  0014c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173079
  00153	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN5@ecpsvm_do_:

; 3294 :         return(1);

  00159	b8 01 00 00 00	 mov	 eax, 1
  0015e	e9 77 05 00 00	 jmp	 $LN1@ecpsvm_do_
$LN4@ecpsvm_do_:

; 3295 :     }
; 3296 :     if (sysblk.ecpsvm.freetrap)

  00163	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0016a	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00170	c1 e8 13	 shr	 eax, 19
  00173	83 e0 01	 and	 eax, 1
  00176	85 c0		 test	 eax, eax
  00178	74 13		 je	 SHORT $LN6@ecpsvm_do_

; 3297 :     {
; 3298 :         numdw++;

  0017a	0f b7 84 24 a0
	01 00 00	 movzx	 eax, WORD PTR numdw$[rsp]
  00182	66 ff c0	 inc	 ax
  00185	66 89 84 24 a0
	01 00 00	 mov	 WORD PTR numdw$[rsp], ax
$LN6@ecpsvm_do_:

; 3299 :     }
; 3300 :     maxdw=EVM_L(maxsztbl);

  0018d	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR maxsztbl$[rsp]
  00194	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00199	4c 8b 84 24 90
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  001a1	ba fe ff ff ff	 mov	 edx, -2
  001a6	8b c8		 mov	 ecx, eax
  001a8	e8 00 00 00 00	 call	 s370_vfetch4
  001ad	89 44 24 48	 mov	 DWORD PTR maxdw$[rsp], eax

; 3301 :     if(numdw>maxdw)

  001b1	0f b7 84 24 a0
	01 00 00	 movzx	 eax, WORD PTR numdw$[rsp]
  001b9	3b 44 24 48	 cmp	 eax, DWORD PTR maxdw$[rsp]
  001bd	0f 86 a5 00 00
	00		 jbe	 $LN7@ecpsvm_do_

; 3302 :     {
; 3303 :         DEBUG_CPASSISTX(FRETX,MSGBUF(buf, "ECPS:VM Cannot FRETX : DWORDS = %d > MAXDW %d",numdw,maxdw));

  001c3	8b 05 98 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+664
  001c9	c1 e8 02	 shr	 eax, 2
  001cc	83 e0 01	 and	 eax, 1
  001cf	85 c0		 test	 eax, eax
  001d1	74 2a		 je	 SHORT $LN8@ecpsvm_do_
  001d3	0f b7 84 24 a0
	01 00 00	 movzx	 eax, WORD PTR numdw$[rsp]
  001db	8b 4c 24 48	 mov	 ecx, DWORD PTR maxdw$[rsp]
  001df	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  001e3	44 8b c8	 mov	 r9d, eax
  001e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173083
  001ed	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  001f2	48 8d 4c 24 70	 lea	 rcx, QWORD PTR buf$[rsp]
  001f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN8@ecpsvm_do_:

; 3304 :         DEBUG_CPASSISTX(FRETX,WRMSG(HHC90000, "D", buf));

  001fd	8b 05 98 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+664
  00203	c1 e8 02	 shr	 eax, 2
  00206	83 e0 01	 and	 eax, 1
  00209	85 c0		 test	 eax, eax
  0020b	74 51		 je	 SHORT $LN9@ecpsvm_do_
  0020d	b9 01 00 00 00	 mov	 ecx, 1
  00212	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00218	48 8d 4c 24 70	 lea	 rcx, QWORD PTR buf$[rsp]
  0021d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00222	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173085
  00229	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0022e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173086
  00235	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0023a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0023f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00245	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173087
  0024c	ba e8 0c 00 00	 mov	 edx, 3304		; 00000ce8H
  00251	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173088
  00258	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN9@ecpsvm_do_:

; 3305 :         return(1);

  0025e	b8 01 00 00 00	 mov	 eax, 1
  00263	e9 72 04 00 00	 jmp	 $LN1@ecpsvm_do_
$LN7@ecpsvm_do_:

; 3306 :     }
; 3307 :     cortbl=EVM_L(fretl);

  00268	8b 84 24 b0 01
	00 00		 mov	 eax, DWORD PTR fretl$[rsp]
  0026f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00274	4c 8b 84 24 90
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0027c	ba fe ff ff ff	 mov	 edx, -2
  00281	8b c8		 mov	 ecx, eax
  00283	e8 00 00 00 00	 call	 s370_vfetch4
  00288	89 44 24 58	 mov	 DWORD PTR cortbl$[rsp], eax

; 3308 :     cortbe=cortbl+((block & 0xfff000)>>8);

  0028c	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR block$[rsp]
  00293	25 00 f0 ff 00	 and	 eax, 16773120		; 00fff000H
  00298	c1 e8 08	 shr	 eax, 8
  0029b	8b 4c 24 58	 mov	 ecx, DWORD PTR cortbl$[rsp]
  0029f	03 c8		 add	 ecx, eax
  002a1	8b c1		 mov	 eax, ecx
  002a3	89 44 24 4c	 mov	 DWORD PTR cortbe$[rsp], eax

; 3309 :     if(EVM_L(cortbe)!=EVM_L(fretl+4))

  002a7	8b 44 24 4c	 mov	 eax, DWORD PTR cortbe$[rsp]
  002ab	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002b0	4c 8b 84 24 90
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  002b8	ba fe ff ff ff	 mov	 edx, -2
  002bd	8b c8		 mov	 ecx, eax
  002bf	e8 00 00 00 00	 call	 s370_vfetch4
  002c4	89 44 24 5c	 mov	 DWORD PTR tv182[rsp], eax
  002c8	8b 8c 24 b0 01
	00 00		 mov	 ecx, DWORD PTR fretl$[rsp]
  002cf	83 c1 04	 add	 ecx, 4
  002d2	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  002d8	4c 8b 84 24 90
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  002e0	ba fe ff ff ff	 mov	 edx, -2
  002e5	e8 00 00 00 00	 call	 s370_vfetch4
  002ea	8b 4c 24 5c	 mov	 ecx, DWORD PTR tv182[rsp]
  002ee	3b c8		 cmp	 ecx, eax
  002f0	74 6d		 je	 SHORT $LN10@ecpsvm_do_

; 3310 :     {
; 3311 :         DEBUG_CPASSISTX(FRETX,WRMSG(HHC90000, "D", "ECPS:VM Cannot FRETX : Area not in Core Free area"));

  002f2	8b 05 98 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+664
  002f8	c1 e8 02	 shr	 eax, 2
  002fb	83 e0 01	 and	 eax, 1
  002fe	85 c0		 test	 eax, eax
  00300	74 53		 je	 SHORT $LN11@ecpsvm_do_
  00302	b9 01 00 00 00	 mov	 ecx, 1
  00307	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0030d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173091
  00314	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00319	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173092
  00320	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00325	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173093
  0032c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00331	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00336	41 b9 03 00 00
	00		 mov	 r9d, 3
  0033c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173094
  00343	ba ef 0c 00 00	 mov	 edx, 3311		; 00000cefH
  00348	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173095
  0034f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN11@ecpsvm_do_:

; 3312 :         return(1);

  00355	b8 01 00 00 00	 mov	 eax, 1
  0035a	e9 7b 03 00 00	 jmp	 $LN1@ecpsvm_do_
$LN10@ecpsvm_do_:

; 3313 :     }
; 3314 :     if(EVM_IC(cortbe+8)!=0x02)

  0035f	8b 44 24 4c	 mov	 eax, DWORD PTR cortbe$[rsp]
  00363	83 c0 08	 add	 eax, 8
  00366	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0036b	4c 8b 84 24 90
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00373	ba fe ff ff ff	 mov	 edx, -2
  00378	8b c8		 mov	 ecx, eax
  0037a	e8 00 00 00 00	 call	 s370_vfetchb
  0037f	0f b6 c0	 movzx	 eax, al
  00382	83 f8 02	 cmp	 eax, 2
  00385	74 6d		 je	 SHORT $LN12@ecpsvm_do_

; 3315 :     {
; 3316 :         DEBUG_CPASSISTX(FRETX,WRMSG(HHC90000, "D", "ECPS:VM Cannot FRETX : Area flag != 0x02"));

  00387	8b 05 98 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+664
  0038d	c1 e8 02	 shr	 eax, 2
  00390	83 e0 01	 and	 eax, 1
  00393	85 c0		 test	 eax, eax
  00395	74 53		 je	 SHORT $LN13@ecpsvm_do_
  00397	b9 01 00 00 00	 mov	 ecx, 1
  0039c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173098
  003a9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173099
  003b5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173100
  003c1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003c6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003cb	41 b9 03 00 00
	00		 mov	 r9d, 3
  003d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173101
  003d8	ba f4 0c 00 00	 mov	 edx, 3316		; 00000cf4H
  003dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173102
  003e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN13@ecpsvm_do_:

; 3317 :         return(1);

  003ea	b8 01 00 00 00	 mov	 eax, 1
  003ef	e9 e6 02 00 00	 jmp	 $LN1@ecpsvm_do_
$LN12@ecpsvm_do_:

; 3318 :     }
; 3319 :     spix=EVM_IC(fretl+11+numdw);

  003f4	0f b7 84 24 a0
	01 00 00	 movzx	 eax, WORD PTR numdw$[rsp]
  003fc	8b 8c 24 b0 01
	00 00		 mov	 ecx, DWORD PTR fretl$[rsp]
  00403	8d 44 01 0b	 lea	 eax, DWORD PTR [rcx+rax+11]
  00407	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0040c	4c 8b 84 24 90
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00414	ba fe ff ff ff	 mov	 edx, -2
  00419	8b c8		 mov	 ecx, eax
  0041b	e8 00 00 00 00	 call	 s370_vfetchb
  00420	88 44 24 40	 mov	 BYTE PTR spix$[rsp], al

; 3320 :     prevblk=EVM_L(maxsztbl+4+spix);

  00424	0f b6 44 24 40	 movzx	 eax, BYTE PTR spix$[rsp]
  00429	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR maxsztbl$[rsp]
  00430	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  00434	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00439	4c 8b 84 24 90
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00441	ba fe ff ff ff	 mov	 edx, -2
  00446	8b c8		 mov	 ecx, eax
  00448	e8 00 00 00 00	 call	 s370_vfetch4
  0044d	89 44 24 54	 mov	 DWORD PTR prevblk$[rsp], eax

; 3321 :     if(prevblk==block)

  00451	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR block$[rsp]
  00458	39 44 24 54	 cmp	 DWORD PTR prevblk$[rsp], eax
  0045c	75 6d		 jne	 SHORT $LN14@ecpsvm_do_

; 3322 :     {
; 3323 :         DEBUG_CPASSISTX(FRETX,WRMSG(HHC90000, "D", "ECPS:VM Cannot FRETX : fretted block already on subpool chain"));

  0045e	8b 05 98 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+664
  00464	c1 e8 02	 shr	 eax, 2
  00467	83 e0 01	 and	 eax, 1
  0046a	85 c0		 test	 eax, eax
  0046c	74 53		 je	 SHORT $LN15@ecpsvm_do_
  0046e	b9 01 00 00 00	 mov	 ecx, 1
  00473	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00479	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173105
  00480	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00485	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173106
  0048c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00491	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173107
  00498	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0049d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004a2	41 b9 03 00 00
	00		 mov	 r9d, 3
  004a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173108
  004af	ba fb 0c 00 00	 mov	 edx, 3323		; 00000cfbH
  004b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173109
  004bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN15@ecpsvm_do_:

; 3324 :         return(1);

  004c1	b8 01 00 00 00	 mov	 eax, 1
  004c6	e9 0f 02 00 00	 jmp	 $LN1@ecpsvm_do_
$LN14@ecpsvm_do_:

; 3325 :     }
; 3326 : 
; 3327 :     /* If the FREE/FRET trap is operational, validate the trap signature at the end of the block
; 3328 :        to be freed.  If valid, replace the signature with C'FREE' in EBCDIC to catch any 2nd
; 3329 :        attempt to fret this same block.  If the signature is invalid, bail out and let CP
; 3330 :        do the FRET so it can result in the FRE013 system abend.
; 3331 :     */
; 3332 :     if (sysblk.ecpsvm.freetrap)

  004cb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  004d2	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  004d8	c1 e8 13	 shr	 eax, 19
  004db	83 e0 01	 and	 eax, 1
  004de	85 c0		 test	 eax, eax
  004e0	0f 84 86 00 00
	00		 je	 $LN16@ecpsvm_do_

; 3333 :     {
; 3334 :         numdw--;

  004e6	0f b7 84 24 a0
	01 00 00	 movzx	 eax, WORD PTR numdw$[rsp]
  004ee	66 ff c8	 dec	 ax
  004f1	66 89 84 24 a0
	01 00 00	 mov	 WORD PTR numdw$[rsp], ax

; 3335 :         numbytes=8*numdw;

  004f9	0f b7 84 24 a0
	01 00 00	 movzx	 eax, WORD PTR numdw$[rsp]
  00501	c1 e0 03	 shl	 eax, 3
  00504	89 44 24 60	 mov	 DWORD PTR numbytes$[rsp], eax

; 3336 :         trapdata=block+numbytes;

  00508	8b 44 24 60	 mov	 eax, DWORD PTR numbytes$[rsp]
  0050c	8b 8c 24 98 01
	00 00		 mov	 ecx, DWORD PTR block$[rsp]
  00513	03 c8		 add	 ecx, eax
  00515	8b c1		 mov	 eax, ecx
  00517	89 44 24 50	 mov	 DWORD PTR trapdata$[rsp], eax

; 3337 :         if(EVM_L(trapdata) != 0x9AC7E5D5)

  0051b	8b 44 24 50	 mov	 eax, DWORD PTR trapdata$[rsp]
  0051f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00524	4c 8b 84 24 90
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0052c	ba fe ff ff ff	 mov	 edx, -2
  00531	8b c8		 mov	 ecx, eax
  00533	e8 00 00 00 00	 call	 s370_vfetch4
  00538	3d d5 e5 c7 9a	 cmp	 eax, -1698175531	; 9ac7e5d5H
  0053d	74 0a		 je	 SHORT $LN17@ecpsvm_do_

; 3338 :         {
; 3339 :             return(1);

  0053f	b8 01 00 00 00	 mov	 eax, 1
  00544	e9 91 01 00 00	 jmp	 $LN1@ecpsvm_do_
$LN17@ecpsvm_do_:

; 3340 :         }
; 3341 :         EVM_ST(0xC6D9C5C5,trapdata);

  00549	8b 44 24 50	 mov	 eax, DWORD PTR trapdata$[rsp]
  0054d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00552	4c 8b 8c 24 90
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0055a	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00560	8b d0		 mov	 edx, eax
  00562	b9 c5 c5 d9 c6	 mov	 ecx, -958806587		; c6d9c5c5H
  00567	e8 00 00 00 00	 call	 s370_vstore4
$LN16@ecpsvm_do_:

; 3342 :     }
; 3343 : 
; 3344 :     EVM_ST(block,maxsztbl+4+spix);

  0056c	0f b6 44 24 40	 movzx	 eax, BYTE PTR spix$[rsp]
  00571	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR maxsztbl$[rsp]
  00578	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  0057c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00581	4c 8b 8c 24 90
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00589	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0058f	8b d0		 mov	 edx, eax
  00591	8b 8c 24 98 01
	00 00		 mov	 ecx, DWORD PTR block$[rsp]
  00598	e8 00 00 00 00	 call	 s370_vstore4

; 3345 :     EVM_ST(prevblk,block);

  0059d	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR block$[rsp]
  005a4	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  005a9	4c 8b 8c 24 90
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  005b1	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  005b7	8b d0		 mov	 edx, eax
  005b9	8b 4c 24 54	 mov	 ecx, DWORD PTR prevblk$[rsp]
  005bd	e8 00 00 00 00	 call	 s370_vstore4

; 3346 : 
; 3347 :     if (EVM_IC(TRACFLG1) & TRAC67)

  005c2	4c 8b 84 24 90
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  005ca	ba fe ff ff ff	 mov	 edx, -2
  005cf	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  005d4	e8 00 00 00 00	 call	 s370_vfetchb
  005d9	0f b6 c0	 movzx	 eax, al
  005dc	83 e0 04	 and	 eax, 4
  005df	85 c0		 test	 eax, eax
  005e1	0f 84 f1 00 00
	00		 je	 $LN18@ecpsvm_do_

; 3348 :     {
; 3349 :         traceptr=ecpsvm_get_trace_entry(regs);

  005e7	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005ef	e8 00 00 00 00	 call	 ecpsvm_get_trace_entry
  005f4	89 44 24 44	 mov	 DWORD PTR traceptr$[rsp], eax

; 3350 :         EVM_ST(regs->GR_L(11),traceptr);

  005f8	8b 44 24 44	 mov	 eax, DWORD PTR traceptr$[rsp]
  005fc	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00601	b9 08 00 00 00	 mov	 ecx, 8
  00606	48 6b c9 0b	 imul	 rcx, rcx, 11
  0060a	4c 8b 8c 24 90
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00612	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00618	8b d0		 mov	 edx, eax
  0061a	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00622	8b 8c 08 80 02
	00 00		 mov	 ecx, DWORD PTR [rax+rcx+640]
  00629	e8 00 00 00 00	 call	 s370_vstore4

; 3351 :         EVM_STC(TRCFRET,traceptr);

  0062e	8b 44 24 44	 mov	 eax, DWORD PTR traceptr$[rsp]
  00632	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00637	4c 8b 8c 24 90
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0063f	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00645	8b d0		 mov	 edx, eax
  00647	b1 87		 mov	 cl, 135			; 00000087H
  00649	e8 00 00 00 00	 call	 s370_vstoreb

; 3352 :         EVM_ST(numdw,traceptr+4);

  0064e	8b 44 24 44	 mov	 eax, DWORD PTR traceptr$[rsp]
  00652	83 c0 04	 add	 eax, 4
  00655	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0065a	0f b7 8c 24 a0
	01 00 00	 movzx	 ecx, WORD PTR numdw$[rsp]
  00662	4c 8b 8c 24 90
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0066a	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00670	8b d0		 mov	 edx, eax
  00672	e8 00 00 00 00	 call	 s370_vstore4

; 3353 :         EVM_ST(block,traceptr+8);

  00677	8b 44 24 44	 mov	 eax, DWORD PTR traceptr$[rsp]
  0067b	83 c0 08	 add	 eax, 8
  0067e	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00683	4c 8b 8c 24 90
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0068b	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00691	8b d0		 mov	 edx, eax
  00693	8b 8c 24 98 01
	00 00		 mov	 ecx, DWORD PTR block$[rsp]
  0069a	e8 00 00 00 00	 call	 s370_vstore4

; 3354 :         EVM_ST(regs->GR_L(14),traceptr+12);

  0069f	8b 44 24 44	 mov	 eax, DWORD PTR traceptr$[rsp]
  006a3	83 c0 0c	 add	 eax, 12
  006a6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  006ab	b9 08 00 00 00	 mov	 ecx, 8
  006b0	48 6b c9 0e	 imul	 rcx, rcx, 14
  006b4	4c 8b 8c 24 90
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  006bc	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  006c2	8b d0		 mov	 edx, eax
  006c4	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  006cc	8b 8c 08 80 02
	00 00		 mov	 ecx, DWORD PTR [rax+rcx+640]
  006d3	e8 00 00 00 00	 call	 s370_vstore4
$LN18@ecpsvm_do_:

; 3355 :     }
; 3356 :     return(0);

  006d8	33 c0		 xor	 eax, eax
$LN1@ecpsvm_do_:

; 3357 : }

  006da	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006e2	48 33 cc	 xor	 rcx, rsp
  006e5	e8 00 00 00 00	 call	 __security_check_cookie
  006ea	48 81 c4 88 01
	00 00		 add	 rsp, 392		; 00000188H
  006f1	c3		 ret	 0
ecpsvm_do_fretx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
nextptr$ = 32
traceptr$ = 36
regs$ = 64
ecpsvm_get_trace_entry PROC

; 509  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 510  : VADR traceptr;
; 511  : VADR nextptr;
; 512  :     traceptr=EVM_L(TRACCURR);

  00009	4c 8b 44 24 40	 mov	 r8, QWORD PTR regs$[rsp]
  0000e	ba fe ff ff ff	 mov	 edx, -2
  00013	b9 14 00 00 00	 mov	 ecx, 20
  00018	e8 00 00 00 00	 call	 s370_vfetch4
  0001d	89 44 24 24	 mov	 DWORD PTR traceptr$[rsp], eax

; 513  :     nextptr=traceptr+16;

  00021	8b 44 24 24	 mov	 eax, DWORD PTR traceptr$[rsp]
  00025	83 c0 10	 add	 eax, 16
  00028	89 44 24 20	 mov	 DWORD PTR nextptr$[rsp], eax

; 514  :     if (nextptr==EVM_L(TRACEND))

  0002c	4c 8b 44 24 40	 mov	 r8, QWORD PTR regs$[rsp]
  00031	ba fe ff ff ff	 mov	 edx, -2
  00036	b9 10 00 00 00	 mov	 ecx, 16
  0003b	e8 00 00 00 00	 call	 s370_vfetch4
  00040	39 44 24 20	 cmp	 DWORD PTR nextptr$[rsp], eax
  00044	75 18		 jne	 SHORT $LN2@ecpsvm_get

; 515  :     {
; 516  :         nextptr=EVM_L(TRACSTRT);

  00046	4c 8b 44 24 40	 mov	 r8, QWORD PTR regs$[rsp]
  0004b	ba fe ff ff ff	 mov	 edx, -2
  00050	b9 0c 00 00 00	 mov	 ecx, 12
  00055	e8 00 00 00 00	 call	 s370_vfetch4
  0005a	89 44 24 20	 mov	 DWORD PTR nextptr$[rsp], eax
$LN2@ecpsvm_get:

; 517  :     }
; 518  :     EVM_ST(nextptr,TRACCURR);

  0005e	4c 8b 4c 24 40	 mov	 r9, QWORD PTR regs$[rsp]
  00063	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00069	ba 14 00 00 00	 mov	 edx, 20
  0006e	8b 4c 24 20	 mov	 ecx, DWORD PTR nextptr$[rsp]
  00072	e8 00 00 00 00	 call	 s370_vstore4

; 519  :     return traceptr;

  00077	8b 44 24 24	 mov	 eax, DWORD PTR traceptr$[rsp]

; 520  : }

  0007b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007f	c3		 ret	 0
ecpsvm_get_trace_entry ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
cortab$ = 64
cc$ = 68
corcode$ = 72
pg1$ = 80
pg2$ = 88
buf$ = 96
__$ArrayPad$ = 352
regs$ = 384
cortabad$ = 392
pgadd$ = 400
raddr$ = 408
ecpsvm_tranbrng PROC

; 1785 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00021	48 33 c4	 xor	 rax, rsp
  00024	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1786 :     char buf[256];
; 1787 :     int cc;
; 1788 :     int corcode;
; 1789 : #if defined(FEATURE_2K_STORAGE_KEYS)
; 1790 :     RADR pg1,pg2;
; 1791 : #endif
; 1792 :     VADR cortab;
; 1793 :     cc=ecpsvm_int_lra(regs,pgadd,raddr);

  0002c	4c 8b 84 24 98
	01 00 00	 mov	 r8, QWORD PTR raddr$[rsp]
  00034	8b 94 24 90 01
	00 00		 mov	 edx, DWORD PTR pgadd$[rsp]
  0003b	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00043	e8 00 00 00 00	 call	 ecpsvm_int_lra
  00048	89 44 24 44	 mov	 DWORD PTR cc$[rsp], eax

; 1794 :     if(cc!=0)

  0004c	83 7c 24 44 00	 cmp	 DWORD PTR cc$[rsp], 0
  00051	0f 84 97 00 00
	00		 je	 $LN2@ecpsvm_tra

; 1795 :     {
; 1796 :         DEBUG_CPASSISTX(TRBRG,MSGBUF(buf, "Tranbring : LRA cc = %d",cc));

  00057	8b 05 d8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+472
  0005d	c1 e8 02	 shr	 eax, 2
  00060	83 e0 01	 and	 eax, 1
  00063	85 c0		 test	 eax, eax
  00065	74 1c		 je	 SHORT $LN3@ecpsvm_tra
  00067	44 8b 4c 24 44	 mov	 r9d, DWORD PTR cc$[rsp]
  0006c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171290
  00073	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00078	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN3@ecpsvm_tra:

; 1797 :         DEBUG_CPASSISTX(TRBRG,WRMSG(HHC90000, "D", buf));

  00083	8b 05 d8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+472
  00089	c1 e8 02	 shr	 eax, 2
  0008c	83 e0 01	 and	 eax, 1
  0008f	85 c0		 test	 eax, eax
  00091	74 51		 je	 SHORT $LN4@ecpsvm_tra
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009e	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  000a3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171292
  000af	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171293
  000bb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c5	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171294
  000d2	ba 05 07 00 00	 mov	 edx, 1797		; 00000705H
  000d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171295
  000de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN4@ecpsvm_tra:

; 1798 :         return(1);

  000e4	b8 01 00 00 00	 mov	 eax, 1
  000e9	e9 cb 02 00 00	 jmp	 $LN1@ecpsvm_tra
$LN2@ecpsvm_tra:

; 1799 :     }
; 1800 :     /* Get the core table entry from the Real address */
; 1801 :     cortab=EVM_L( cortabad );

  000ee	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR cortabad$[rsp]
  000f5	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000fa	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00102	ba fe ff ff ff	 mov	 edx, -2
  00107	8b c8		 mov	 ecx, eax
  00109	e8 00 00 00 00	 call	 s370_vfetch4
  0010e	89 44 24 40	 mov	 DWORD PTR cortab$[rsp], eax

; 1802 :     cortab+=((*raddr) & 0xfff000) >> 8;

  00112	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR raddr$[rsp]
  0011a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0011d	48 25 00 f0 ff
	00		 and	 rax, 16773120		; 00fff000H
  00123	48 c1 e8 08	 shr	 rax, 8
  00127	8b 4c 24 40	 mov	 ecx, DWORD PTR cortab$[rsp]
  0012b	48 03 c8	 add	 rcx, rax
  0012e	48 8b c1	 mov	 rax, rcx
  00131	89 44 24 40	 mov	 DWORD PTR cortab$[rsp], eax

; 1803 :     corcode=EVM_IC(cortab+8);

  00135	8b 44 24 40	 mov	 eax, DWORD PTR cortab$[rsp]
  00139	83 c0 08	 add	 eax, 8
  0013c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00141	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00149	ba fe ff ff ff	 mov	 edx, -2
  0014e	8b c8		 mov	 ecx, eax
  00150	e8 00 00 00 00	 call	 s370_vfetchb
  00155	0f b6 c0	 movzx	 eax, al
  00158	89 44 24 48	 mov	 DWORD PTR corcode$[rsp], eax

; 1804 :     if(!(corcode & 0x08))

  0015c	8b 44 24 48	 mov	 eax, DWORD PTR corcode$[rsp]
  00160	83 e0 08	 and	 eax, 8
  00163	85 c0		 test	 eax, eax
  00165	0f 85 94 00 00
	00		 jne	 $LN5@ecpsvm_tra

; 1805 :     {
; 1806 :         DEBUG_CPASSISTX(TRBRG,MSGBUF(buf, "Page not shared - OK %d",cc));

  0016b	8b 05 d8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+472
  00171	c1 e8 02	 shr	 eax, 2
  00174	83 e0 01	 and	 eax, 1
  00177	85 c0		 test	 eax, eax
  00179	74 1c		 je	 SHORT $LN6@ecpsvm_tra
  0017b	44 8b 4c 24 44	 mov	 r9d, DWORD PTR cc$[rsp]
  00180	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171298
  00187	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0018c	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00191	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN6@ecpsvm_tra:

; 1807 :         DEBUG_CPASSISTX(TRBRG,WRMSG(HHC90000, "D", buf));

  00197	8b 05 d8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+472
  0019d	c1 e8 02	 shr	 eax, 2
  001a0	83 e0 01	 and	 eax, 1
  001a3	85 c0		 test	 eax, eax
  001a5	74 51		 je	 SHORT $LN7@ecpsvm_tra
  001a7	b9 01 00 00 00	 mov	 ecx, 1
  001ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001b2	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  001b7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171300
  001c3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171301
  001cf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001d4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001d9	41 b9 03 00 00
	00		 mov	 r9d, 3
  001df	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171302
  001e6	ba 0f 07 00 00	 mov	 edx, 1807		; 0000070fH
  001eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171303
  001f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN7@ecpsvm_tra:

; 1808 :         return(0);      /* Page is NOT shared.. All OK */

  001f8	33 c0		 xor	 eax, eax
  001fa	e9 ba 01 00 00	 jmp	 $LN1@ecpsvm_tra
$LN5@ecpsvm_tra:

; 1809 :     }
; 1810 : #if defined(FEATURE_2K_STORAGE_KEYS)
; 1811 :     pg1=(*raddr & 0xfff000);

  001ff	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR raddr$[rsp]
  00207	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0020a	48 25 00 f0 ff
	00		 and	 rax, 16773120		; 00fff000H
  00210	48 89 44 24 50	 mov	 QWORD PTR pg1$[rsp], rax

; 1812 :     pg2=pg1+0x800;

  00215	48 8b 44 24 50	 mov	 rax, QWORD PTR pg1$[rsp]
  0021a	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  00220	48 89 44 24 58	 mov	 QWORD PTR pg2$[rsp], rax

; 1813 :     DEBUG_CPASSISTX(TRBRG,MSGBUF(buf, "Checking 2K Storage keys @"F_RADR" & "F_RADR"",pg1,pg2));

  00225	8b 05 d8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+472
  0022b	c1 e8 02	 shr	 eax, 2
  0022e	83 e0 01	 and	 eax, 1
  00231	85 c0		 test	 eax, eax
  00233	74 26		 je	 SHORT $LN8@ecpsvm_tra
  00235	48 8b 44 24 58	 mov	 rax, QWORD PTR pg2$[rsp]
  0023a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0023f	4c 8b 4c 24 50	 mov	 r9, QWORD PTR pg1$[rsp]
  00244	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171305
  0024b	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00250	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  00255	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN8@ecpsvm_tra:

; 1814 :     DEBUG_CPASSISTX(TRBRG,WRMSG(HHC90000, "D", buf));

  0025b	8b 05 d8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+472
  00261	c1 e8 02	 shr	 eax, 2
  00264	83 e0 01	 and	 eax, 1
  00267	85 c0		 test	 eax, eax
  00269	74 51		 je	 SHORT $LN9@ecpsvm_tra
  0026b	b9 01 00 00 00	 mov	 ecx, 1
  00270	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00276	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  0027b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00280	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171307
  00287	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0028c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171308
  00293	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00298	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0029d	41 b9 03 00 00
	00		 mov	 r9d, 3
  002a3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171309
  002aa	ba 16 07 00 00	 mov	 edx, 1814		; 00000716H
  002af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171310
  002b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN9@ecpsvm_tra:

; 1815 :     if(0
; 1816 :         || (ARCH_DEP( get_storage_key )( pg1 ) & STORKEY_CHANGE)
; 1817 :         || (ARCH_DEP( get_storage_key )( pg2 ) & STORKEY_CHANGE)

  002bc	33 c0		 xor	 eax, eax
  002be	85 c0		 test	 eax, eax
  002c0	75 28		 jne	 SHORT $LN11@ecpsvm_tra
  002c2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pg1$[rsp]
  002c7	e8 00 00 00 00	 call	 s370_get_storage_key
  002cc	0f b6 c0	 movzx	 eax, al
  002cf	83 e0 02	 and	 eax, 2
  002d2	85 c0		 test	 eax, eax
  002d4	75 14		 jne	 SHORT $LN11@ecpsvm_tra
  002d6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pg2$[rsp]
  002db	e8 00 00 00 00	 call	 s370_get_storage_key
  002e0	0f b6 c0	 movzx	 eax, al
  002e3	83 e0 02	 and	 eax, 2
  002e6	85 c0		 test	 eax, eax
  002e8	74 6a		 je	 SHORT $LN10@ecpsvm_tra
$LN11@ecpsvm_tra:

; 1818 :     )
; 1819 : #else
; 1820 :     DEBUG_CPASSISTX(TRBRG,MSGBUF(buf, "Checking 4K Storage keys @"F_RADR,*raddr));
; 1821 :     DEBUG_CPASSISTX(TRBRG,WRMSG(HHC90000, "D", buf));
; 1822 :     if (ARCH_DEP( get_storage_key )( *raddr ) & STORKEY_CHANGE)
; 1823 : #endif
; 1824 :     {
; 1825 :         DEBUG_CPASSISTX(TRBRG,WRMSG(HHC90000, "D", "Page shared and changed"));

  002ea	8b 05 d8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+472
  002f0	c1 e8 02	 shr	 eax, 2
  002f3	83 e0 01	 and	 eax, 1
  002f6	85 c0		 test	 eax, eax
  002f8	74 53		 je	 SHORT $LN12@ecpsvm_tra
  002fa	b9 01 00 00 00	 mov	 ecx, 1
  002ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00305	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171314
  0030c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00311	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171315
  00318	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0031d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171316
  00324	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00329	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0032e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00334	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171317
  0033b	ba 21 07 00 00	 mov	 edx, 1825		; 00000721H
  00340	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171318
  00347	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN12@ecpsvm_tra:

; 1826 :         return(1);      /* Page shared AND changed */

  0034d	b8 01 00 00 00	 mov	 eax, 1
  00352	eb 65		 jmp	 SHORT $LN1@ecpsvm_tra
$LN10@ecpsvm_tra:

; 1827 :     }
; 1828 :     DEBUG_CPASSISTX(TRBRG,WRMSG(HHC90000, "D", "Page shared but not changed"));

  00354	8b 05 d8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+472
  0035a	c1 e8 02	 shr	 eax, 2
  0035d	83 e0 01	 and	 eax, 1
  00360	85 c0		 test	 eax, eax
  00362	74 53		 je	 SHORT $LN13@ecpsvm_tra
  00364	b9 01 00 00 00	 mov	 ecx, 1
  00369	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0036f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171320
  00376	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0037b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171321
  00382	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00387	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171322
  0038e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00393	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00398	41 b9 03 00 00
	00		 mov	 r9d, 3
  0039e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171323
  003a5	ba 24 07 00 00	 mov	 edx, 1828		; 00000724H
  003aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171324
  003b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN13@ecpsvm_tra:

; 1829 :     return(0);  /* All done */

  003b7	33 c0		 xor	 eax, eax
$LN1@ecpsvm_tra:

; 1830 : }

  003b9	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  003c1	48 33 cc	 xor	 rcx, rsp
  003c4	e8 00 00 00 00	 call	 __security_check_cookie
  003c9	48 81 c4 78 01
	00 00		 add	 rsp, 376		; 00000178H
  003d0	c3		 ret	 0
ecpsvm_tranbrng ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
cc$ = 32
regs$ = 64
pgadd$ = 72
raddr$ = 80
ecpsvm_int_lra PROC

; 1776 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1777 :     int cc;
; 1778 :     cc = ARCH_DEP(translate_addr) (pgadd , USE_PRIMARY_SPACE, regs, ACCTYPE_LRA);

  00012	41 b9 00 01 00
	00		 mov	 r9d, 256		; 00000100H
  00018	4c 8b 44 24 40	 mov	 r8, QWORD PTR regs$[rsp]
  0001d	ba fd ff ff ff	 mov	 edx, -3
  00022	8b 4c 24 48	 mov	 ecx, DWORD PTR pgadd$[rsp]
  00026	e8 00 00 00 00	 call	 s370_translate_addr
  0002b	89 44 24 20	 mov	 DWORD PTR cc$[rsp], eax

; 1779 :     *raddr = regs->dat.raddr;

  0002f	48 8b 44 24 50	 mov	 rax, QWORD PTR raddr$[rsp]
  00034	48 8b 4c 24 40	 mov	 rcx, QWORD PTR regs$[rsp]
  00039	48 8b 89 00 08
	00 00		 mov	 rcx, QWORD PTR [rcx+2048]
  00040	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1780 :     return cc;

  00043	8b 44 24 20	 mov	 eax, DWORD PTR cc$[rsp]

; 1781 : }

  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	c3		 ret	 0
ecpsvm_int_lra ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
i$ = 32
clen$ = 36
ce$ = 40
tv73 = 48
cmd$ = 80
ecpsvm_getcmdent PROC

; 5089 : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 5090 :     ECPSVM_CMDENT *ce;
; 5091 :     int i;
; 5092 :     int clen;
; 5093 :     for(i=0;ecpsvm_cmdtab[i].name;i++)

  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00011	eb 0a		 jmp	 SHORT $LN4@ecpsvm_get
$LN2@ecpsvm_get:
  00013	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00017	ff c0		 inc	 eax
  00019	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@ecpsvm_get:
  0001d	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00022	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:ecpsvm_cmdtab
  0002d	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00032	0f 84 92 00 00
	00		 je	 $LN3@ecpsvm_get

; 5094 :     {
; 5095 :         ce=&ecpsvm_cmdtab[i];

  00038	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0003d	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:ecpsvm_cmdtab
  00048	48 03 c8	 add	 rcx, rax
  0004b	48 8b c1	 mov	 rax, rcx
  0004e	48 89 44 24 28	 mov	 QWORD PTR ce$[rsp], rax

; 5096 :         if(strlen(cmd)<=strlen(ce->name) && strlen(cmd)>=(size_t)ce->abbrev)

  00053	48 8b 4c 24 50	 mov	 rcx, QWORD PTR cmd$[rsp]
  00058	e8 00 00 00 00	 call	 strlen
  0005d	48 89 44 24 30	 mov	 QWORD PTR tv73[rsp], rax
  00062	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ce$[rsp]
  00067	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0006a	e8 00 00 00 00	 call	 strlen
  0006f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv73[rsp]
  00074	48 3b c8	 cmp	 rcx, rax
  00077	77 4c		 ja	 SHORT $LN5@ecpsvm_get
  00079	48 8b 4c 24 50	 mov	 rcx, QWORD PTR cmd$[rsp]
  0007e	e8 00 00 00 00	 call	 strlen
  00083	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ce$[rsp]
  00088	48 63 49 08	 movsxd	 rcx, DWORD PTR [rcx+8]
  0008c	48 3b c1	 cmp	 rax, rcx
  0008f	72 34		 jb	 SHORT $LN5@ecpsvm_get

; 5097 :         {
; 5098 :             clen=(int)strlen(cmd);

  00091	48 8b 4c 24 50	 mov	 rcx, QWORD PTR cmd$[rsp]
  00096	e8 00 00 00 00	 call	 strlen
  0009b	89 44 24 24	 mov	 DWORD PTR clen$[rsp], eax

; 5099 :             if(strncasecmp(cmd,ce->name,clen)==0)

  0009f	48 63 44 24 24	 movsxd	 rax, DWORD PTR clen$[rsp]
  000a4	4c 8b c0	 mov	 r8, rax
  000a7	48 8b 44 24 28	 mov	 rax, QWORD PTR ce$[rsp]
  000ac	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000af	48 8b 4c 24 50	 mov	 rcx, QWORD PTR cmd$[rsp]
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  000ba	85 c0		 test	 eax, eax
  000bc	75 07		 jne	 SHORT $LN6@ecpsvm_get

; 5100 :             {
; 5101 :                 return(ce);

  000be	48 8b 44 24 28	 mov	 rax, QWORD PTR ce$[rsp]
  000c3	eb 07		 jmp	 SHORT $LN1@ecpsvm_get
$LN6@ecpsvm_get:
$LN5@ecpsvm_get:

; 5102 :             }
; 5103 :         }
; 5104 :     }

  000c5	e9 49 ff ff ff	 jmp	 $LN2@ecpsvm_get
$LN3@ecpsvm_get:

; 5105 :     return(NULL);

  000ca	33 c0		 xor	 eax, eax
$LN1@ecpsvm_get:

; 5106 : }

  000cc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d0	c3		 ret	 0
ecpsvm_getcmdent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vfetch8
_TEXT	SEGMENT
tv70 = 48
tv76 = 52
tv88 = 56
mn$1 = 64
addr$ = 96
arn$ = 104
regs$ = 112
s370_vfetch8 PROC					; COMDAT

; 711  : {

$LN23:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 712  : #if defined( OPTION_SINGLE_CPU_DW ) && defined( ASSIST_STORE_DW )
; 713  :     if(likely(!((VADR_L)addr & 0x07)))
; 714  :     {
; 715  :         /* doubleword aligned fetch */
; 716  :         U64 *mn;
; 717  :         ITIMER_SYNC( addr, 8-1, regs );
; 718  :         mn = (U64*)MADDRL( addr, 8, arn, regs, ACCTYPE_READ, regs->psw.pkey );
; 719  :         if (regs->cpubit == regs->sysblk->started_mask)
; 720  :             return CSWAP64( *mn );
; 721  :         return fetch_dw( mn );
; 722  :     }
; 723  :     else
; 724  : #endif
; 725  :     {
; 726  :         if (likely(((VADR_L)addr & PAGEFRAME_BYTEMASK) <= (PAGEFRAME_BYTEMASK-7)))

  00011	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  00015	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0001a	3d f8 07 00 00	 cmp	 eax, 2040		; 000007f8H
  0001f	77 0a		 ja	 SHORT $LN10@s370_vfetc
  00021	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv70[rsp], 1
  00029	eb 08		 jmp	 SHORT $LN11@s370_vfetc
$LN10@s370_vfetc:
  0002b	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
$LN11@s370_vfetc:
  00033	83 7c 24 30 00	 cmp	 DWORD PTR tv70[rsp], 0
  00038	0f 84 9b 00 00
	00		 je	 $LN5@s370_vfetc
$LN4@s370_vfetc:

; 727  :         {
; 728  :             /* unaligned, non-crossing doubleword fetch */
; 729  :             BYTE *mn;
; 730  :             ITIMER_SYNC( addr, 8-1, regs );

  0003e	83 7c 24 60 54	 cmp	 DWORD PTR addr$[rsp], 84 ; 00000054H
  00043	73 0a		 jae	 SHORT $LN14@s370_vfetc
  00045	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv76[rsp], 1
  0004d	eb 08		 jmp	 SHORT $LN15@s370_vfetc
$LN14@s370_vfetc:
  0004f	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv76[rsp], 0
$LN15@s370_vfetc:
  00057	83 7c 24 34 00	 cmp	 DWORD PTR tv76[rsp], 0
  0005c	74 16		 je	 SHORT $LN16@s370_vfetc
  0005e	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  00062	83 c0 07	 add	 eax, 7
  00065	83 f8 50	 cmp	 eax, 80			; 00000050H
  00068	72 0a		 jb	 SHORT $LN16@s370_vfetc
  0006a	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv88[rsp], 1
  00072	eb 08		 jmp	 SHORT $LN22@s370_vfetc
$LN16@s370_vfetc:
  00074	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
$LN22@s370_vfetc:
  0007c	83 7c 24 38 00	 cmp	 DWORD PTR tv88[rsp], 0
  00081	74 0a		 je	 SHORT $LN6@s370_vfetc
  00083	48 8b 4c 24 70	 mov	 rcx, QWORD PTR regs$[rsp]
  00088	e8 00 00 00 00	 call	 s370_store_int_timer
$LN6@s370_vfetc:
  0008d	33 c0		 xor	 eax, eax
  0008f	85 c0		 test	 eax, eax
  00091	75 ab		 jne	 SHORT $LN4@s370_vfetc

; 731  :             mn = MADDRL( addr, 8, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  00093	48 8b 44 24 70	 mov	 rax, QWORD PTR regs$[rsp]
  00098	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0009c	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000a0	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000a8	4c 8b 4c 24 70	 mov	 r9, QWORD PTR regs$[rsp]
  000ad	44 8b 44 24 68	 mov	 r8d, DWORD PTR arn$[rsp]
  000b2	ba 08 00 00 00	 mov	 edx, 8
  000b7	8b 4c 24 60	 mov	 ecx, DWORD PTR addr$[rsp]
  000bb	e8 00 00 00 00	 call	 s370_maddr_l
  000c0	48 89 44 24 40	 mov	 QWORD PTR mn$1[rsp], rax

; 732  :             return fetch_dw( mn );

  000c5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR mn$1[rsp]
  000ca	e8 00 00 00 00	 call	 fetch_dw_noswap
  000cf	48 8b c8	 mov	 rcx, rax
  000d2	e8 00 00 00 00	 call	 _byteswap_uint64
  000d7	eb 12		 jmp	 SHORT $LN1@s370_vfetc
$LN5@s370_vfetc:

; 733  :         }
; 734  :     }
; 735  :     /* page crossing doubleword fetch */
; 736  :     return ARCH_DEP( vfetch8_full )( addr, arn, regs );

  000d9	4c 8b 44 24 70	 mov	 r8, QWORD PTR regs$[rsp]
  000de	8b 54 24 68	 mov	 edx, DWORD PTR arn$[rsp]
  000e2	8b 4c 24 60	 mov	 ecx, DWORD PTR addr$[rsp]
  000e6	e8 00 00 00 00	 call	 s370_vfetch8_full
$LN1@s370_vfetc:

; 737  : }

  000eb	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000ef	c3		 ret	 0
s370_vfetch8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vfetch4
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
tv80 = 56
tv92 = 60
mn$1 = 64
addr$ = 96
arn$ = 104
regs$ = 112
s370_vfetch4 PROC					; COMDAT

; 695  : {

$LN26:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 696  :     if ((likely(!((VADR_L)addr & 0x03))
; 697  :         || (((VADR_L)addr & PAGEFRAME_BYTEMASK) <= (PAGEFRAME_BYTEMASK-3) )))

  00011	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  00015	83 e0 03	 and	 eax, 3
  00018	85 c0		 test	 eax, eax
  0001a	75 0a		 jne	 SHORT $LN9@s370_vfetc
  0001c	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv66[rsp], 1
  00024	eb 08		 jmp	 SHORT $LN10@s370_vfetc
$LN9@s370_vfetc:
  00026	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv66[rsp], 0
$LN10@s370_vfetc:
  0002e	83 7c 24 30 00	 cmp	 DWORD PTR tv66[rsp], 0
  00033	74 0a		 je	 SHORT $LN13@s370_vfetc
  00035	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  0003d	eb 08		 jmp	 SHORT $LN14@s370_vfetc
$LN13@s370_vfetc:
  0003f	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN14@s370_vfetc:
  00047	83 7c 24 34 00	 cmp	 DWORD PTR tv72[rsp], 0
  0004c	75 14		 jne	 SHORT $LN6@s370_vfetc
  0004e	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  00052	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00057	3d fc 07 00 00	 cmp	 eax, 2044		; 000007fcH
  0005c	0f 87 9a 00 00
	00		 ja	 $LN5@s370_vfetc
$LN6@s370_vfetc:
$LN4@s370_vfetc:

; 698  :     {
; 699  :         BYTE *mn;
; 700  :         ITIMER_SYNC( addr, 4-1, regs );

  00062	83 7c 24 60 54	 cmp	 DWORD PTR addr$[rsp], 84 ; 00000054H
  00067	73 0a		 jae	 SHORT $LN17@s370_vfetc
  00069	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv80[rsp], 1
  00071	eb 08		 jmp	 SHORT $LN18@s370_vfetc
$LN17@s370_vfetc:
  00073	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv80[rsp], 0
$LN18@s370_vfetc:
  0007b	83 7c 24 38 00	 cmp	 DWORD PTR tv80[rsp], 0
  00080	74 16		 je	 SHORT $LN19@s370_vfetc
  00082	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  00086	83 c0 03	 add	 eax, 3
  00089	83 f8 50	 cmp	 eax, 80			; 00000050H
  0008c	72 0a		 jb	 SHORT $LN19@s370_vfetc
  0008e	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv92[rsp], 1
  00096	eb 08		 jmp	 SHORT $LN25@s370_vfetc
$LN19@s370_vfetc:
  00098	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
$LN25@s370_vfetc:
  000a0	83 7c 24 3c 00	 cmp	 DWORD PTR tv92[rsp], 0
  000a5	74 0a		 je	 SHORT $LN7@s370_vfetc
  000a7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR regs$[rsp]
  000ac	e8 00 00 00 00	 call	 s370_store_int_timer
$LN7@s370_vfetc:
  000b1	33 c0		 xor	 eax, eax
  000b3	85 c0		 test	 eax, eax
  000b5	75 ab		 jne	 SHORT $LN4@s370_vfetc

; 701  :         mn = MADDRL( addr, 4,arn, regs, ACCTYPE_READ, regs->psw.pkey );

  000b7	48 8b 44 24 70	 mov	 rax, QWORD PTR regs$[rsp]
  000bc	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  000c0	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000c4	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000cc	4c 8b 4c 24 70	 mov	 r9, QWORD PTR regs$[rsp]
  000d1	44 8b 44 24 68	 mov	 r8d, DWORD PTR arn$[rsp]
  000d6	ba 04 00 00 00	 mov	 edx, 4
  000db	8b 4c 24 60	 mov	 ecx, DWORD PTR addr$[rsp]
  000df	e8 00 00 00 00	 call	 s370_maddr_l
  000e4	48 89 44 24 40	 mov	 QWORD PTR mn$1[rsp], rax

; 702  :         return fetch_fw( mn );

  000e9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR mn$1[rsp]
  000ee	e8 00 00 00 00	 call	 fetch_fw_noswap
  000f3	8b c8		 mov	 ecx, eax
  000f5	e8 00 00 00 00	 call	 _byteswap_ulong
  000fa	eb 12		 jmp	 SHORT $LN1@s370_vfetc
$LN5@s370_vfetc:

; 703  :     }
; 704  :     return ARCH_DEP( vfetch4_full )( addr, arn, regs );

  000fc	4c 8b 44 24 70	 mov	 r8, QWORD PTR regs$[rsp]
  00101	8b 54 24 68	 mov	 edx, DWORD PTR arn$[rsp]
  00105	8b 4c 24 60	 mov	 ecx, DWORD PTR addr$[rsp]
  00109	e8 00 00 00 00	 call	 s370_vfetch4_full
$LN1@s370_vfetc:

; 705  : }

  0010e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00112	c3		 ret	 0
s370_vfetch4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vfetch2
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
tv80 = 56
tv92 = 60
mn$1 = 64
addr$ = 96
arn$ = 104
regs$ = 112
s370_vfetch2 PROC					; COMDAT

; 679  : {

$LN26:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 680  :     if (likely(!((VADR_L)addr & 0x01))
; 681  :         || (((VADR_L)addr & PAGEFRAME_BYTEMASK) != PAGEFRAME_BYTEMASK ))

  00011	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  00015	83 e0 01	 and	 eax, 1
  00018	85 c0		 test	 eax, eax
  0001a	75 0a		 jne	 SHORT $LN9@s370_vfetc
  0001c	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv66[rsp], 1
  00024	eb 08		 jmp	 SHORT $LN10@s370_vfetc
$LN9@s370_vfetc:
  00026	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv66[rsp], 0
$LN10@s370_vfetc:
  0002e	83 7c 24 30 00	 cmp	 DWORD PTR tv66[rsp], 0
  00033	74 0a		 je	 SHORT $LN13@s370_vfetc
  00035	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  0003d	eb 08		 jmp	 SHORT $LN14@s370_vfetc
$LN13@s370_vfetc:
  0003f	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN14@s370_vfetc:
  00047	83 7c 24 34 00	 cmp	 DWORD PTR tv72[rsp], 0
  0004c	75 14		 jne	 SHORT $LN6@s370_vfetc
  0004e	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  00052	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00057	3d ff 07 00 00	 cmp	 eax, 2047		; 000007ffH
  0005c	0f 84 9a 00 00
	00		 je	 $LN5@s370_vfetc
$LN6@s370_vfetc:
$LN4@s370_vfetc:

; 682  :     {
; 683  :         BYTE *mn;
; 684  :         ITIMER_SYNC( addr, 2-1, regs );

  00062	83 7c 24 60 54	 cmp	 DWORD PTR addr$[rsp], 84 ; 00000054H
  00067	73 0a		 jae	 SHORT $LN17@s370_vfetc
  00069	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv80[rsp], 1
  00071	eb 08		 jmp	 SHORT $LN18@s370_vfetc
$LN17@s370_vfetc:
  00073	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv80[rsp], 0
$LN18@s370_vfetc:
  0007b	83 7c 24 38 00	 cmp	 DWORD PTR tv80[rsp], 0
  00080	74 15		 je	 SHORT $LN19@s370_vfetc
  00082	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  00086	ff c0		 inc	 eax
  00088	83 f8 50	 cmp	 eax, 80			; 00000050H
  0008b	72 0a		 jb	 SHORT $LN19@s370_vfetc
  0008d	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv92[rsp], 1
  00095	eb 08		 jmp	 SHORT $LN25@s370_vfetc
$LN19@s370_vfetc:
  00097	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
$LN25@s370_vfetc:
  0009f	83 7c 24 3c 00	 cmp	 DWORD PTR tv92[rsp], 0
  000a4	74 0a		 je	 SHORT $LN7@s370_vfetc
  000a6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR regs$[rsp]
  000ab	e8 00 00 00 00	 call	 s370_store_int_timer
$LN7@s370_vfetc:
  000b0	33 c0		 xor	 eax, eax
  000b2	85 c0		 test	 eax, eax
  000b4	75 ac		 jne	 SHORT $LN4@s370_vfetc

; 685  :         mn = MADDRL( addr, 2,arn, regs, ACCTYPE_READ, regs->psw.pkey );

  000b6	48 8b 44 24 70	 mov	 rax, QWORD PTR regs$[rsp]
  000bb	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  000bf	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000c3	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000cb	4c 8b 4c 24 70	 mov	 r9, QWORD PTR regs$[rsp]
  000d0	44 8b 44 24 68	 mov	 r8d, DWORD PTR arn$[rsp]
  000d5	ba 02 00 00 00	 mov	 edx, 2
  000da	8b 4c 24 60	 mov	 ecx, DWORD PTR addr$[rsp]
  000de	e8 00 00 00 00	 call	 s370_maddr_l
  000e3	48 89 44 24 40	 mov	 QWORD PTR mn$1[rsp], rax

; 686  :         return fetch_hw( mn );

  000e8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR mn$1[rsp]
  000ed	e8 00 00 00 00	 call	 fetch_hw_noswap
  000f2	0f b7 c8	 movzx	 ecx, ax
  000f5	e8 00 00 00 00	 call	 _byteswap_ushort
  000fa	eb 12		 jmp	 SHORT $LN1@s370_vfetc
$LN5@s370_vfetc:

; 687  :     }
; 688  :     return ARCH_DEP( vfetch2_full )( addr, arn, regs );

  000fc	4c 8b 44 24 70	 mov	 r8, QWORD PTR regs$[rsp]
  00101	8b 54 24 68	 mov	 edx, DWORD PTR arn$[rsp]
  00105	8b 4c 24 60	 mov	 ecx, DWORD PTR addr$[rsp]
  00109	e8 00 00 00 00	 call	 s370_vfetch2_full
$LN1@s370_vfetc:

; 689  : }

  0010e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00112	c3		 ret	 0
s370_vfetch2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vfetchb
_TEXT	SEGMENT
tv68 = 48
tv78 = 52
mn$ = 56
addr$ = 80
arn$ = 88
regs$ = 96
s370_vfetchb PROC					; COMDAT

; 667  : {

$LN18:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@s370_vfetc:

; 668  : BYTE   *mn;                             /* Main storage address      */
; 669  : 
; 670  :     ITIMER_SYNC( addr, 1-1, regs );

  00011	83 7c 24 50 54	 cmp	 DWORD PTR addr$[rsp], 84 ; 00000054H
  00016	73 0a		 jae	 SHORT $LN9@s370_vfetc
  00018	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  00020	eb 08		 jmp	 SHORT $LN10@s370_vfetc
$LN9@s370_vfetc:
  00022	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN10@s370_vfetc:
  0002a	83 7c 24 30 00	 cmp	 DWORD PTR tv68[rsp], 0
  0002f	74 11		 je	 SHORT $LN11@s370_vfetc
  00031	83 7c 24 50 50	 cmp	 DWORD PTR addr$[rsp], 80 ; 00000050H
  00036	72 0a		 jb	 SHORT $LN11@s370_vfetc
  00038	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv78[rsp], 1
  00040	eb 08		 jmp	 SHORT $LN17@s370_vfetc
$LN11@s370_vfetc:
  00042	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
$LN17@s370_vfetc:
  0004a	83 7c 24 34 00	 cmp	 DWORD PTR tv78[rsp], 0
  0004f	74 0a		 je	 SHORT $LN5@s370_vfetc
  00051	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  00056	e8 00 00 00 00	 call	 s370_store_int_timer
$LN5@s370_vfetc:
  0005b	33 c0		 xor	 eax, eax
  0005d	85 c0		 test	 eax, eax
  0005f	75 b0		 jne	 SHORT $LN4@s370_vfetc

; 671  :     mn = MADDR( addr, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  00061	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  00066	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0006a	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0006e	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00076	4c 8b 4c 24 60	 mov	 r9, QWORD PTR regs$[rsp]
  0007b	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  00080	ba 01 00 00 00	 mov	 edx, 1
  00085	8b 4c 24 50	 mov	 ecx, DWORD PTR addr$[rsp]
  00089	e8 00 00 00 00	 call	 s370_maddr_l
  0008e	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 672  :     return *mn;

  00093	48 8b 44 24 38	 mov	 rax, QWORD PTR mn$[rsp]
  00098	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 673  : }

  0009b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009f	c3		 ret	 0
s370_vfetchb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vstore8
_TEXT	SEGMENT
tv70 = 48
tv92 = 52
tv136 = 56
mn$1 = 64
value$ = 96
addr$ = 104
arn$ = 112
regs$ = 120
s370_vstore8 PROC					; COMDAT

; 577  : {

$LN24:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 578  : #if defined( OPTION_SINGLE_CPU_DW ) && defined( ASSIST_STORE_DW )
; 579  :     /* Check alignement. If aligned then we are guaranteed
; 580  :        not to cross a page boundary */
; 581  :     if (likely(!((VADR_L)addr & 0x07)))
; 582  :     {
; 583  :         /* Most common case : Aligned */
; 584  :         U64 *mn;
; 585  :         mn = (U64*)MADDRL( addr, 8, arn, regs, ACCTYPE_WRITE, regs->psw.pkey );
; 586  :         if (regs->cpubit == regs->sysblk->started_mask)
; 587  :             *mn = CSWAP64( value );
; 588  :         else
; 589  :             STORE_DW( mn, value );
; 590  :     }
; 591  :     else
; 592  : #endif
; 593  :     {
; 594  :         /* We're not aligned. So we have to check whether we are
; 595  :            crossing a page boundary. This cannot be the same
; 596  :            code as above because casting U64* to a non aligned
; 597  :            pointer may break on those architectures mandating
; 598  :            strict alignement */
; 599  :         if (likely(((VADR_L)addr & PAGEFRAME_BYTEMASK) <= (PAGEFRAME_BYTEMASK-7)))

  00017	8b 44 24 68	 mov	 eax, DWORD PTR addr$[rsp]
  0001b	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00020	3d f8 07 00 00	 cmp	 eax, 2040		; 000007f8H
  00025	77 0a		 ja	 SHORT $LN11@s370_vstor
  00027	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv70[rsp], 1
  0002f	eb 08		 jmp	 SHORT $LN12@s370_vstor
$LN11@s370_vstor:
  00031	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
$LN12@s370_vstor:
  00039	83 7c 24 30 00	 cmp	 DWORD PTR tv70[rsp], 0
  0003e	74 4b		 je	 SHORT $LN5@s370_vstor

; 600  :         {
; 601  :             /* Non aligned but not crossing page boundary */
; 602  :             BYTE *mn;
; 603  :             mn = MADDRL( addr, 8, arn, regs, ACCTYPE_WRITE, regs->psw.pkey );

  00040	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00045	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00049	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0004d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00055	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  0005a	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  0005f	ba 08 00 00 00	 mov	 edx, 8
  00064	8b 4c 24 68	 mov	 ecx, DWORD PTR addr$[rsp]
  00068	e8 00 00 00 00	 call	 s370_maddr_l
  0006d	48 89 44 24 40	 mov	 QWORD PTR mn$1[rsp], rax

; 604  :             /* invoking STORE_DW ensures endianness correctness */
; 605  :             STORE_DW( mn, value );

  00072	48 8b 4c 24 60	 mov	 rcx, QWORD PTR value$[rsp]
  00077	e8 00 00 00 00	 call	 _byteswap_uint64
  0007c	48 8b d0	 mov	 rdx, rax
  0007f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR mn$1[rsp]
  00084	e8 00 00 00 00	 call	 store_dw_noswap

; 606  :         }

  00089	eb 18		 jmp	 SHORT $LN6@s370_vstor
$LN5@s370_vstor:

; 607  :         else
; 608  :             /* Crossing page boundary */
; 609  :             ARCH_DEP( vstore8_full )( value, addr, arn, regs );

  0008b	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  00090	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  00095	8b 54 24 68	 mov	 edx, DWORD PTR addr$[rsp]
  00099	48 8b 4c 24 60	 mov	 rcx, QWORD PTR value$[rsp]
  0009e	e8 00 00 00 00	 call	 s370_vstore8_full
$LN6@s370_vstor:
$LN4@s370_vstor:

; 610  :     }
; 611  :     ITIMER_UPDATE( addr, 8-1, regs );

  000a3	83 7c 24 68 54	 cmp	 DWORD PTR addr$[rsp], 84 ; 00000054H
  000a8	73 0a		 jae	 SHORT $LN15@s370_vstor
  000aa	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv92[rsp], 1
  000b2	eb 08		 jmp	 SHORT $LN16@s370_vstor
$LN15@s370_vstor:
  000b4	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
$LN16@s370_vstor:
  000bc	83 7c 24 34 00	 cmp	 DWORD PTR tv92[rsp], 0
  000c1	74 16		 je	 SHORT $LN17@s370_vstor
  000c3	8b 44 24 68	 mov	 eax, DWORD PTR addr$[rsp]
  000c7	83 c0 07	 add	 eax, 7
  000ca	83 f8 50	 cmp	 eax, 80			; 00000050H
  000cd	72 0a		 jb	 SHORT $LN17@s370_vstor
  000cf	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv136[rsp], 1
  000d7	eb 08		 jmp	 SHORT $LN23@s370_vstor
$LN17@s370_vstor:
  000d9	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
$LN23@s370_vstor:
  000e1	83 7c 24 38 00	 cmp	 DWORD PTR tv136[rsp], 0
  000e6	74 0a		 je	 SHORT $LN7@s370_vstor
  000e8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000ed	e8 00 00 00 00	 call	 s370_fetch_int_timer
$LN7@s370_vstor:
  000f2	33 c0		 xor	 eax, eax
  000f4	85 c0		 test	 eax, eax
  000f6	75 ab		 jne	 SHORT $LN4@s370_vstor

; 612  : }

  000f8	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000fc	c3		 ret	 0
s370_vstore8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vstore4
_TEXT	SEGMENT
tv66 = 48
tv72 = 52
tv92 = 56
tv136 = 60
mn$1 = 64
value$ = 96
addr$ = 104
arn$ = 112
regs$ = 120
s370_vstore4 PROC					; COMDAT

; 559  : {

$LN27:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 560  :     /* Most common case : Aligned & not crossing page boundary */
; 561  :     if (likely(!((VADR_L)addr & 0x03))
; 562  :         || (((VADR_L)addr & PAGEFRAME_BYTEMASK) <= (PAGEFRAME_BYTEMASK-3)))

  00016	8b 44 24 68	 mov	 eax, DWORD PTR addr$[rsp]
  0001a	83 e0 03	 and	 eax, 3
  0001d	85 c0		 test	 eax, eax
  0001f	75 0a		 jne	 SHORT $LN10@s370_vstor
  00021	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv66[rsp], 1
  00029	eb 08		 jmp	 SHORT $LN11@s370_vstor
$LN10@s370_vstor:
  0002b	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv66[rsp], 0
$LN11@s370_vstor:
  00033	83 7c 24 30 00	 cmp	 DWORD PTR tv66[rsp], 0
  00038	74 0a		 je	 SHORT $LN14@s370_vstor
  0003a	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  00042	eb 08		 jmp	 SHORT $LN15@s370_vstor
$LN14@s370_vstor:
  00044	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN15@s370_vstor:
  0004c	83 7c 24 34 00	 cmp	 DWORD PTR tv72[rsp], 0
  00051	75 14		 jne	 SHORT $LN7@s370_vstor
  00053	8b 44 24 68	 mov	 eax, DWORD PTR addr$[rsp]
  00057	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0005c	3d fc 07 00 00	 cmp	 eax, 2044		; 000007fcH
  00061	0f 87 9e 00 00
	00		 ja	 $LN5@s370_vstor
$LN7@s370_vstor:

; 563  :     {
; 564  :         BYTE *mn;
; 565  :         mn = MADDRL( addr, 4, arn, regs, ACCTYPE_WRITE, regs->psw.pkey );

  00067	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0006c	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00070	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00074	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007c	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  00081	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  00086	ba 04 00 00 00	 mov	 edx, 4
  0008b	8b 4c 24 68	 mov	 ecx, DWORD PTR addr$[rsp]
  0008f	e8 00 00 00 00	 call	 s370_maddr_l
  00094	48 89 44 24 40	 mov	 QWORD PTR mn$1[rsp], rax

; 566  :         STORE_FW( mn, value );

  00099	8b 4c 24 60	 mov	 ecx, DWORD PTR value$[rsp]
  0009d	e8 00 00 00 00	 call	 _byteswap_ulong
  000a2	8b d0		 mov	 edx, eax
  000a4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR mn$1[rsp]
  000a9	e8 00 00 00 00	 call	 store_fw_noswap
$LN4@s370_vstor:

; 567  :         ITIMER_UPDATE( addr, 4-1, regs );

  000ae	83 7c 24 68 54	 cmp	 DWORD PTR addr$[rsp], 84 ; 00000054H
  000b3	73 0a		 jae	 SHORT $LN18@s370_vstor
  000b5	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv92[rsp], 1
  000bd	eb 08		 jmp	 SHORT $LN19@s370_vstor
$LN18@s370_vstor:
  000bf	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
$LN19@s370_vstor:
  000c7	83 7c 24 38 00	 cmp	 DWORD PTR tv92[rsp], 0
  000cc	74 16		 je	 SHORT $LN20@s370_vstor
  000ce	8b 44 24 68	 mov	 eax, DWORD PTR addr$[rsp]
  000d2	83 c0 03	 add	 eax, 3
  000d5	83 f8 50	 cmp	 eax, 80			; 00000050H
  000d8	72 0a		 jb	 SHORT $LN20@s370_vstor
  000da	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv136[rsp], 1
  000e2	eb 08		 jmp	 SHORT $LN26@s370_vstor
$LN20@s370_vstor:
  000e4	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
$LN26@s370_vstor:
  000ec	83 7c 24 3c 00	 cmp	 DWORD PTR tv136[rsp], 0
  000f1	74 0a		 je	 SHORT $LN8@s370_vstor
  000f3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000f8	e8 00 00 00 00	 call	 s370_fetch_int_timer
$LN8@s370_vstor:
  000fd	33 c0		 xor	 eax, eax
  000ff	85 c0		 test	 eax, eax
  00101	75 ab		 jne	 SHORT $LN4@s370_vstor

; 568  :     }

  00103	eb 17		 jmp	 SHORT $LN6@s370_vstor
$LN5@s370_vstor:

; 569  :     else
; 570  :         ARCH_DEP( vstore4_full )( value, addr, arn, regs );

  00105	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  0010a	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  0010f	8b 54 24 68	 mov	 edx, DWORD PTR addr$[rsp]
  00113	8b 4c 24 60	 mov	 ecx, DWORD PTR value$[rsp]
  00117	e8 00 00 00 00	 call	 s370_vstore4_full
$LN6@s370_vstor:

; 571  : }

  0011c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00120	c3		 ret	 0
s370_vstore4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vstore2
_TEXT	SEGMENT
tv73 = 48
tv91 = 52
tv135 = 56
mn$1 = 64
value$ = 96
addr$ = 104
arn$ = 112
regs$ = 120
s370_vstore2 PROC					; COMDAT

; 541  : {

$LN24:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 542  :     /* Most common case : Aligned & not crossing page boundary */
; 543  :     if (likely(!((VADR_L)addr & 1)

  00017	8b 44 24 68	 mov	 eax, DWORD PTR addr$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 1a		 je	 SHORT $LN9@s370_vstor
  00022	8b 44 24 68	 mov	 eax, DWORD PTR addr$[rsp]
  00026	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0002b	3d ff 07 00 00	 cmp	 eax, 2047		; 000007ffH
  00030	75 0a		 jne	 SHORT $LN9@s370_vstor
  00032	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv73[rsp], 0
  0003a	eb 08		 jmp	 SHORT $LN12@s370_vstor
$LN9@s370_vstor:
  0003c	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv73[rsp], 1
$LN12@s370_vstor:
  00044	83 7c 24 30 00	 cmp	 DWORD PTR tv73[rsp], 0
  00049	0f 84 9f 00 00
	00		 je	 $LN5@s370_vstor

; 544  :         || ((VADR_L)addr & PAGEFRAME_BYTEMASK) != PAGEFRAME_BYTEMASK))
; 545  :     {
; 546  :         BYTE* mn;
; 547  :         mn = MADDRL( addr, 2, arn, regs, ACCTYPE_WRITE, regs->psw.pkey );

  0004f	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00054	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00058	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0005c	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00064	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  00069	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  0006e	ba 02 00 00 00	 mov	 edx, 2
  00073	8b 4c 24 68	 mov	 ecx, DWORD PTR addr$[rsp]
  00077	e8 00 00 00 00	 call	 s370_maddr_l
  0007c	48 89 44 24 40	 mov	 QWORD PTR mn$1[rsp], rax

; 548  :         STORE_HW( mn, value );

  00081	0f b7 4c 24 60	 movzx	 ecx, WORD PTR value$[rsp]
  00086	e8 00 00 00 00	 call	 _byteswap_ushort
  0008b	0f b7 d0	 movzx	 edx, ax
  0008e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR mn$1[rsp]
  00093	e8 00 00 00 00	 call	 store_hw_noswap
$LN4@s370_vstor:

; 549  :         ITIMER_UPDATE( addr, 2-1, regs );

  00098	83 7c 24 68 54	 cmp	 DWORD PTR addr$[rsp], 84 ; 00000054H
  0009d	73 0a		 jae	 SHORT $LN15@s370_vstor
  0009f	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
  000a7	eb 08		 jmp	 SHORT $LN16@s370_vstor
$LN15@s370_vstor:
  000a9	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
$LN16@s370_vstor:
  000b1	83 7c 24 34 00	 cmp	 DWORD PTR tv91[rsp], 0
  000b6	74 15		 je	 SHORT $LN17@s370_vstor
  000b8	8b 44 24 68	 mov	 eax, DWORD PTR addr$[rsp]
  000bc	ff c0		 inc	 eax
  000be	83 f8 50	 cmp	 eax, 80			; 00000050H
  000c1	72 0a		 jb	 SHORT $LN17@s370_vstor
  000c3	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  000cb	eb 08		 jmp	 SHORT $LN23@s370_vstor
$LN17@s370_vstor:
  000cd	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN23@s370_vstor:
  000d5	83 7c 24 38 00	 cmp	 DWORD PTR tv135[rsp], 0
  000da	74 0a		 je	 SHORT $LN7@s370_vstor
  000dc	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000e1	e8 00 00 00 00	 call	 s370_fetch_int_timer
$LN7@s370_vstor:
  000e6	33 c0		 xor	 eax, eax
  000e8	85 c0		 test	 eax, eax
  000ea	75 ac		 jne	 SHORT $LN4@s370_vstor

; 550  :     }

  000ec	eb 18		 jmp	 SHORT $LN6@s370_vstor
$LN5@s370_vstor:

; 551  :     else
; 552  :         ARCH_DEP( vstore2_full )( value, addr, arn, regs );

  000ee	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  000f3	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  000f8	8b 54 24 68	 mov	 edx, DWORD PTR addr$[rsp]
  000fc	0f b7 4c 24 60	 movzx	 ecx, WORD PTR value$[rsp]
  00101	e8 00 00 00 00	 call	 s370_vstore2_full
$LN6@s370_vstor:

; 553  : }

  00106	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0010a	c3		 ret	 0
s370_vstore2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vstoreb
_TEXT	SEGMENT
tv76 = 48
tv86 = 52
main1$ = 56
value$ = 80
addr$ = 88
arn$ = 96
regs$ = 104
s370_vstoreb PROC					; COMDAT

; 529  : {

$LN18:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 530  : BYTE   *main1;                          /* Mainstor address          */
; 531  : 
; 532  :     main1 = MADDR( addr, arn, regs, ACCTYPE_WRITE, regs->psw.pkey );

  00016	48 8b 44 24 68	 mov	 rax, QWORD PTR regs$[rsp]
  0001b	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0001f	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00023	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0002b	4c 8b 4c 24 68	 mov	 r9, QWORD PTR regs$[rsp]
  00030	44 8b 44 24 60	 mov	 r8d, DWORD PTR arn$[rsp]
  00035	ba 01 00 00 00	 mov	 edx, 1
  0003a	8b 4c 24 58	 mov	 ecx, DWORD PTR addr$[rsp]
  0003e	e8 00 00 00 00	 call	 s370_maddr_l
  00043	48 89 44 24 38	 mov	 QWORD PTR main1$[rsp], rax

; 533  :     *main1 = value;

  00048	48 8b 44 24 38	 mov	 rax, QWORD PTR main1$[rsp]
  0004d	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR value$[rsp]
  00052	88 08		 mov	 BYTE PTR [rax], cl
$LN4@s370_vstor:

; 534  :     ITIMER_UPDATE( addr, 1-1, regs );

  00054	83 7c 24 58 54	 cmp	 DWORD PTR addr$[rsp], 84 ; 00000054H
  00059	73 0a		 jae	 SHORT $LN9@s370_vstor
  0005b	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv76[rsp], 1
  00063	eb 08		 jmp	 SHORT $LN10@s370_vstor
$LN9@s370_vstor:
  00065	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv76[rsp], 0
$LN10@s370_vstor:
  0006d	83 7c 24 30 00	 cmp	 DWORD PTR tv76[rsp], 0
  00072	74 11		 je	 SHORT $LN11@s370_vstor
  00074	83 7c 24 58 50	 cmp	 DWORD PTR addr$[rsp], 80 ; 00000050H
  00079	72 0a		 jb	 SHORT $LN11@s370_vstor
  0007b	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv86[rsp], 1
  00083	eb 08		 jmp	 SHORT $LN17@s370_vstor
$LN11@s370_vstor:
  00085	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv86[rsp], 0
$LN17@s370_vstor:
  0008d	83 7c 24 34 00	 cmp	 DWORD PTR tv86[rsp], 0
  00092	74 0a		 je	 SHORT $LN5@s370_vstor
  00094	48 8b 4c 24 68	 mov	 rcx, QWORD PTR regs$[rsp]
  00099	e8 00 00 00 00	 call	 s370_fetch_int_timer
$LN5@s370_vstor:
  0009e	33 c0		 xor	 eax, eax
  000a0	85 c0		 test	 eax, eax
  000a2	75 b0		 jne	 SHORT $LN4@s370_vstor

; 535  : }

  000a4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a8	c3		 ret	 0
s370_vstoreb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vfetch8_full
_TEXT	SEGMENT
len$ = 48
mn$ = 56
temp$ = 64
__$ArrayPad$ = 80
addr$ = 128
arn$ = 136
regs$ = 144
s370_vfetch8_full PROC					; COMDAT

; 457  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	56		 push	 rsi
  0000e	57		 push	 rdi
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 458  : BYTE   *mn;                             /* Main storage addresses    */
; 459  : int     len;                            /* Length to end of page     */
; 460  : BYTE    temp[16];                       /* Copy destination          */
; 461  : 
; 462  :     /* Get absolute address of first byte of operand */
; 463  :     len = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  00022	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00029	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0002e	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00033	2b c8		 sub	 ecx, eax
  00035	8b c1		 mov	 eax, ecx
  00037	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 464  :     mn = MADDRL( addr, len, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  0003b	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  00040	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00048	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  0004c	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00050	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00058	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00060	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  00068	48 8b d0	 mov	 rdx, rax
  0006b	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  00072	e8 00 00 00 00	 call	 s370_maddr_l
  00077	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 465  :     memcpy( temp, mn, len);

  0007c	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  00081	48 8d 4c 24 40	 lea	 rcx, QWORD PTR temp$[rsp]
  00086	48 8b f9	 mov	 rdi, rcx
  00089	48 8b 74 24 38	 mov	 rsi, QWORD PTR mn$[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	f3 a4		 rep movsb

; 466  :     mn = MADDRL( (addr + len) & ADDRESS_MAXWRAP( regs ), 8 - len, arn, regs,

  00093	b8 08 00 00 00	 mov	 eax, 8
  00098	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  0009c	48 98		 cdqe
  0009e	8b 4c 24 30	 mov	 ecx, DWORD PTR len$[rsp]
  000a2	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  000a9	03 d1		 add	 edx, ecx
  000ab	8b ca		 mov	 ecx, edx
  000ad	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  000b3	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000bb	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  000bf	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  000c3	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000cb	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  000d3	44 8b 84 24 88
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  000db	48 8b d0	 mov	 rdx, rax
  000de	e8 00 00 00 00	 call	 s370_maddr_l
  000e3	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 467  :                  ACCTYPE_READ, regs->psw.pkey );
; 468  :     memcpy( temp+len, mn, 8 );

  000e8	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  000ed	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mn$[rsp]
  000f2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000f5	48 89 4c 04 40	 mov	 QWORD PTR temp$[rsp+rax], rcx

; 469  :     return fetch_dw( temp );

  000fa	48 8d 4c 24 40	 lea	 rcx, QWORD PTR temp$[rsp]
  000ff	e8 00 00 00 00	 call	 fetch_dw_noswap
  00104	48 8b c8	 mov	 rcx, rax
  00107	e8 00 00 00 00	 call	 _byteswap_uint64

; 470  : }

  0010c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00111	48 33 cc	 xor	 rcx, rsp
  00114	e8 00 00 00 00	 call	 __security_check_cookie
  00119	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0011d	5f		 pop	 rdi
  0011e	5e		 pop	 rsi
  0011f	c3		 ret	 0
s370_vfetch8_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vfetch4_full
_TEXT	SEGMENT
len$ = 48
mn$ = 56
temp$ = 64
__$ArrayPad$ = 72
addr$ = 112
arn$ = 120
regs$ = 128
s370_vfetch4_full PROC					; COMDAT

; 428  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	56		 push	 rsi
  0000e	57		 push	 rdi
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 429  : BYTE   *mn;                             /* Main storage addresses    */
; 430  : int     len;                            /* Length to end of page     */
; 431  : BYTE    temp[8];                        /* Copy destination          */
; 432  : 
; 433  :     len = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  00022	8b 44 24 70	 mov	 eax, DWORD PTR addr$[rsp]
  00026	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0002b	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00030	2b c8		 sub	 ecx, eax
  00032	8b c1		 mov	 eax, ecx
  00034	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 434  :     mn = MADDRL( addr, len, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  00038	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  0003d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00045	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00049	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0004d	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00055	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0005d	44 8b 44 24 78	 mov	 r8d, DWORD PTR arn$[rsp]
  00062	48 8b d0	 mov	 rdx, rax
  00065	8b 4c 24 70	 mov	 ecx, DWORD PTR addr$[rsp]
  00069	e8 00 00 00 00	 call	 s370_maddr_l
  0006e	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 435  :     memcpy( temp, mn, len);

  00073	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  00078	48 8d 4c 24 40	 lea	 rcx, QWORD PTR temp$[rsp]
  0007d	48 8b f9	 mov	 rdi, rcx
  00080	48 8b 74 24 38	 mov	 rsi, QWORD PTR mn$[rsp]
  00085	48 8b c8	 mov	 rcx, rax
  00088	f3 a4		 rep movsb

; 436  :     mn = MADDRL( (addr + len) & ADDRESS_MAXWRAP( regs ), 4 - len, arn, regs,

  0008a	b8 04 00 00 00	 mov	 eax, 4
  0008f	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  00093	48 98		 cdqe
  00095	8b 4c 24 30	 mov	 ecx, DWORD PTR len$[rsp]
  00099	8b 54 24 70	 mov	 edx, DWORD PTR addr$[rsp]
  0009d	03 d1		 add	 edx, ecx
  0009f	8b ca		 mov	 ecx, edx
  000a1	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  000a7	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000af	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  000b3	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  000b7	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000bf	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  000c7	44 8b 44 24 78	 mov	 r8d, DWORD PTR arn$[rsp]
  000cc	48 8b d0	 mov	 rdx, rax
  000cf	e8 00 00 00 00	 call	 s370_maddr_l
  000d4	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 437  :                   ACCTYPE_READ, regs->psw.pkey );
; 438  :     memcpy( temp+len, mn, 4 - len);

  000d9	b8 04 00 00 00	 mov	 eax, 4
  000de	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  000e2	48 98		 cdqe
  000e4	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len$[rsp]
  000e9	48 8d 4c 0c 40	 lea	 rcx, QWORD PTR temp$[rsp+rcx]
  000ee	48 8b f9	 mov	 rdi, rcx
  000f1	48 8b 74 24 38	 mov	 rsi, QWORD PTR mn$[rsp]
  000f6	48 8b c8	 mov	 rcx, rax
  000f9	f3 a4		 rep movsb

; 439  :     return fetch_fw( temp );

  000fb	48 8d 4c 24 40	 lea	 rcx, QWORD PTR temp$[rsp]
  00100	e8 00 00 00 00	 call	 fetch_fw_noswap
  00105	8b c8		 mov	 ecx, eax
  00107	e8 00 00 00 00	 call	 _byteswap_ulong

; 440  : }

  0010c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00111	48 33 cc	 xor	 rcx, rsp
  00114	e8 00 00 00 00	 call	 __security_check_cookie
  00119	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0011d	5f		 pop	 rdi
  0011e	5e		 pop	 rsi
  0011f	c3		 ret	 0
s370_vfetch4_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vfetch2_full
_TEXT	SEGMENT
value$ = 48
mn$ = 56
addr$ = 80
arn$ = 88
regs$ = 96
s370_vfetch2_full PROC					; COMDAT

; 401  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 402  : BYTE   *mn;                             /* Main storage addresses    */
; 403  : U16     value;
; 404  : 
; 405  :     mn = MADDR( addr, arn, regs, ACCTYPE_READ, regs->psw.pkey );

  00011	48 8b 44 24 60	 mov	 rax, QWORD PTR regs$[rsp]
  00016	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  0001a	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0001e	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00026	4c 8b 4c 24 60	 mov	 r9, QWORD PTR regs$[rsp]
  0002b	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  00030	ba 01 00 00 00	 mov	 edx, 1
  00035	8b 4c 24 50	 mov	 ecx, DWORD PTR addr$[rsp]
  00039	e8 00 00 00 00	 call	 s370_maddr_l
  0003e	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 406  :     value = *mn << 8;

  00043	48 8b 44 24 38	 mov	 rax, QWORD PTR mn$[rsp]
  00048	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0004b	c1 e0 08	 shl	 eax, 8
  0004e	66 89 44 24 30	 mov	 WORD PTR value$[rsp], ax

; 407  :     mn = MADDR( (addr + 1) & ADDRESS_MAXWRAP( regs ), arn, regs,

  00053	8b 44 24 50	 mov	 eax, DWORD PTR addr$[rsp]
  00057	ff c0		 inc	 eax
  00059	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0005e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR regs$[rsp]
  00063	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00067	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0006b	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00073	4c 8b 4c 24 60	 mov	 r9, QWORD PTR regs$[rsp]
  00078	44 8b 44 24 58	 mov	 r8d, DWORD PTR arn$[rsp]
  0007d	ba 01 00 00 00	 mov	 edx, 1
  00082	8b c8		 mov	 ecx, eax
  00084	e8 00 00 00 00	 call	 s370_maddr_l
  00089	48 89 44 24 38	 mov	 QWORD PTR mn$[rsp], rax

; 408  :                  ACCTYPE_READ, regs->psw.pkey );
; 409  :     value |= *mn;

  0008e	48 8b 44 24 38	 mov	 rax, QWORD PTR mn$[rsp]
  00093	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00096	0f b7 4c 24 30	 movzx	 ecx, WORD PTR value$[rsp]
  0009b	0b c8		 or	 ecx, eax
  0009d	8b c1		 mov	 eax, ecx
  0009f	66 89 44 24 30	 mov	 WORD PTR value$[rsp], ax

; 410  :     return value;

  000a4	0f b7 44 24 30	 movzx	 eax, WORD PTR value$[rsp]

; 411  : }

  000a9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ad	c3		 ret	 0
s370_vfetch2_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vstore8_full
_TEXT	SEGMENT
len$ = 48
sk$ = 56
main1$ = 64
main2$ = 72
temp$ = 80
__$ArrayPad$ = 88
value$ = 128
addr$ = 136
arn$ = 144
regs$ = 152
s370_vstore8_full PROC					; COMDAT

; 369  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 44 24 58	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 370  : BYTE   *main1, *main2;                  /* Mainstor addresses        */
; 371  : BYTE   *sk;                             /* Storage key addresses     */
; 372  : int     len;                            /* Length to end of page     */
; 373  : BYTE    temp[8];                        /* Copied value              */
; 374  : 
; 375  :     len = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  00028	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0002f	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00034	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00039	2b c8		 sub	 ecx, eax
  0003b	8b c1		 mov	 eax, ecx
  0003d	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 376  :     main1 = MADDRL( addr, len, arn, regs, ACCTYPE_WRITE_SKP, regs->psw.pkey );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  00046	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0004e	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  00052	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00056	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0005e	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00066	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  0006e	48 8b d0	 mov	 rdx, rax
  00071	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  00078	e8 00 00 00 00	 call	 s370_maddr_l
  0007d	48 89 44 24 40	 mov	 QWORD PTR main1$[rsp], rax

; 377  :     sk = regs->dat.storkey;

  00082	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0008a	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  00091	48 89 44 24 38	 mov	 QWORD PTR sk$[rsp], rax

; 378  :     main2 = MADDRL( (addr + len) & ADDRESS_MAXWRAP( regs ), 8-len, arn, regs,

  00096	b8 08 00 00 00	 mov	 eax, 8
  0009b	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  0009f	48 98		 cdqe
  000a1	8b 4c 24 30	 mov	 ecx, DWORD PTR len$[rsp]
  000a5	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  000ac	03 d1		 add	 edx, ecx
  000ae	8b ca		 mov	 ecx, edx
  000b0	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  000b6	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000be	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  000c2	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  000c6	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000ce	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  000d6	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  000de	48 8b d0	 mov	 rdx, rax
  000e1	e8 00 00 00 00	 call	 s370_maddr_l
  000e6	48 89 44 24 48	 mov	 QWORD PTR main2$[rsp], rax

; 379  :                     ACCTYPE_WRITE, regs->psw.pkey );
; 380  :     *sk |= (STORKEY_REF | STORKEY_CHANGE);

  000eb	48 8b 44 24 38	 mov	 rax, QWORD PTR sk$[rsp]
  000f0	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000f3	83 c8 06	 or	 eax, 6
  000f6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR sk$[rsp]
  000fb	88 01		 mov	 BYTE PTR [rcx], al

; 381  :     STORE_DW( temp, value );

  000fd	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  00105	e8 00 00 00 00	 call	 _byteswap_uint64
  0010a	48 8b d0	 mov	 rdx, rax
  0010d	48 8d 4c 24 50	 lea	 rcx, QWORD PTR temp$[rsp]
  00112	e8 00 00 00 00	 call	 store_dw_noswap

; 382  :     memcpy( main1, temp,       len );

  00117	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  0011c	48 8d 4c 24 50	 lea	 rcx, QWORD PTR temp$[rsp]
  00121	48 8b 7c 24 40	 mov	 rdi, QWORD PTR main1$[rsp]
  00126	48 8b f1	 mov	 rsi, rcx
  00129	48 8b c8	 mov	 rcx, rax
  0012c	f3 a4		 rep movsb

; 383  :     memcpy( main2, temp+len, 8-len );

  0012e	b8 08 00 00 00	 mov	 eax, 8
  00133	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  00137	48 98		 cdqe
  00139	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len$[rsp]
  0013e	48 8d 4c 0c 50	 lea	 rcx, QWORD PTR temp$[rsp+rcx]
  00143	48 8b 7c 24 48	 mov	 rdi, QWORD PTR main2$[rsp]
  00148	48 8b f1	 mov	 rsi, rcx
  0014b	48 8b c8	 mov	 rcx, rax
  0014e	f3 a4		 rep movsb

; 384  : }

  00150	48 8b 4c 24 58	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00155	48 33 cc	 xor	 rcx, rsp
  00158	e8 00 00 00 00	 call	 __security_check_cookie
  0015d	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00161	5f		 pop	 rdi
  00162	5e		 pop	 rsi
  00163	c3		 ret	 0
s370_vstore8_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vstore4_full
_TEXT	SEGMENT
len$ = 48
temp$ = 52
sk$ = 56
main1$ = 64
main2$ = 72
value$ = 112
addr$ = 120
arn$ = 128
regs$ = 136
s370_vstore4_full PROC					; COMDAT

; 335  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00012	56		 push	 rsi
  00013	57		 push	 rdi
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 336  : BYTE   *main1, *main2;                  /* Mainstor addresses        */
; 337  : BYTE   *sk;                             /* Storage key addresses     */
; 338  : int     len;                            /* Length to end of page     */
; 339  : BYTE    temp[4];                        /* Copied value              */
; 340  : 
; 341  :     len = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  00018	8b 44 24 78	 mov	 eax, DWORD PTR addr$[rsp]
  0001c	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00021	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00026	2b c8		 sub	 ecx, eax
  00028	8b c1		 mov	 eax, ecx
  0002a	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 342  :     main1 = MADDRL( addr, len, arn, regs, ACCTYPE_WRITE_SKP, regs->psw.pkey );

  0002e	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  00033	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0003b	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  0003f	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00043	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0004b	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00053	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  0005b	48 8b d0	 mov	 rdx, rax
  0005e	8b 4c 24 78	 mov	 ecx, DWORD PTR addr$[rsp]
  00062	e8 00 00 00 00	 call	 s370_maddr_l
  00067	48 89 44 24 40	 mov	 QWORD PTR main1$[rsp], rax

; 343  :     sk = regs->dat.storkey;

  0006c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00074	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  0007b	48 89 44 24 38	 mov	 QWORD PTR sk$[rsp], rax

; 344  :     main2 = MADDRL( (addr + len) & ADDRESS_MAXWRAP( regs ), 4-len, arn, regs,

  00080	b8 04 00 00 00	 mov	 eax, 4
  00085	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  00089	48 98		 cdqe
  0008b	8b 4c 24 30	 mov	 ecx, DWORD PTR len$[rsp]
  0008f	8b 54 24 78	 mov	 edx, DWORD PTR addr$[rsp]
  00093	03 d1		 add	 edx, ecx
  00095	8b ca		 mov	 ecx, edx
  00097	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  0009d	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  000a5	0f b6 52 79	 movzx	 edx, BYTE PTR [rdx+121]
  000a9	88 54 24 28	 mov	 BYTE PTR [rsp+40], dl
  000ad	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b5	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  000bd	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR arn$[rsp]
  000c5	48 8b d0	 mov	 rdx, rax
  000c8	e8 00 00 00 00	 call	 s370_maddr_l
  000cd	48 89 44 24 48	 mov	 QWORD PTR main2$[rsp], rax

; 345  :                     ACCTYPE_WRITE, regs->psw.pkey );
; 346  :     *sk |= (STORKEY_REF | STORKEY_CHANGE);

  000d2	48 8b 44 24 38	 mov	 rax, QWORD PTR sk$[rsp]
  000d7	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000da	83 c8 06	 or	 eax, 6
  000dd	48 8b 4c 24 38	 mov	 rcx, QWORD PTR sk$[rsp]
  000e2	88 01		 mov	 BYTE PTR [rcx], al

; 347  :     STORE_FW( temp, value );

  000e4	8b 4c 24 70	 mov	 ecx, DWORD PTR value$[rsp]
  000e8	e8 00 00 00 00	 call	 _byteswap_ulong
  000ed	8b d0		 mov	 edx, eax
  000ef	48 8d 4c 24 34	 lea	 rcx, QWORD PTR temp$[rsp]
  000f4	e8 00 00 00 00	 call	 store_fw_noswap

; 348  :     memcpy( main1, temp,       len );

  000f9	48 63 44 24 30	 movsxd	 rax, DWORD PTR len$[rsp]
  000fe	48 8d 4c 24 34	 lea	 rcx, QWORD PTR temp$[rsp]
  00103	48 8b 7c 24 40	 mov	 rdi, QWORD PTR main1$[rsp]
  00108	48 8b f1	 mov	 rsi, rcx
  0010b	48 8b c8	 mov	 rcx, rax
  0010e	f3 a4		 rep movsb

; 349  :     memcpy( main2, temp+len, 4-len );

  00110	b8 04 00 00 00	 mov	 eax, 4
  00115	2b 44 24 30	 sub	 eax, DWORD PTR len$[rsp]
  00119	48 98		 cdqe
  0011b	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR len$[rsp]
  00120	48 8d 4c 0c 34	 lea	 rcx, QWORD PTR temp$[rsp+rcx]
  00125	48 8b 7c 24 48	 mov	 rdi, QWORD PTR main2$[rsp]
  0012a	48 8b f1	 mov	 rsi, rcx
  0012d	48 8b c8	 mov	 rcx, rax
  00130	f3 a4		 rep movsb

; 350  : }

  00132	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00136	5f		 pop	 rdi
  00137	5e		 pop	 rsi
  00138	c3		 ret	 0
s370_vstore4_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\vstore.h
;	COMDAT s370_vstore2_full
_TEXT	SEGMENT
sk$ = 48
main1$ = 56
main2$ = 64
value$ = 96
addr$ = 104
arn$ = 112
regs$ = 120
s370_vstore2_full PROC					; COMDAT

; 308  : {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 309  : BYTE   *main1, *main2;                  /* Mainstor addresses        */
; 310  : BYTE   *sk;                             /* Storage key addresses     */
; 311  : 
; 312  :     main1 = MADDR( addr, arn, regs, ACCTYPE_WRITE_SKP, regs->psw.pkey );

  00017	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0001c	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  00020	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00024	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0002c	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  00031	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  00036	ba 01 00 00 00	 mov	 edx, 1
  0003b	8b 4c 24 68	 mov	 ecx, DWORD PTR addr$[rsp]
  0003f	e8 00 00 00 00	 call	 s370_maddr_l
  00044	48 89 44 24 38	 mov	 QWORD PTR main1$[rsp], rax

; 313  :     sk = regs->dat.storkey;

  00049	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0004e	48 8b 80 28 08
	00 00		 mov	 rax, QWORD PTR [rax+2088]
  00055	48 89 44 24 30	 mov	 QWORD PTR sk$[rsp], rax

; 314  :     main2 = MADDR( (addr + 1) & ADDRESS_MAXWRAP( regs ), arn, regs,

  0005a	8b 44 24 68	 mov	 eax, DWORD PTR addr$[rsp]
  0005e	ff c0		 inc	 eax
  00060	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00065	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0006a	0f b6 49 79	 movzx	 ecx, BYTE PTR [rcx+121]
  0006e	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00072	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0007a	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  0007f	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  00084	ba 01 00 00 00	 mov	 edx, 1
  00089	8b c8		 mov	 ecx, eax
  0008b	e8 00 00 00 00	 call	 s370_maddr_l
  00090	48 89 44 24 40	 mov	 QWORD PTR main2$[rsp], rax

; 315  :                     ACCTYPE_WRITE, regs->psw.pkey );
; 316  :     *sk |= (STORKEY_REF | STORKEY_CHANGE);

  00095	48 8b 44 24 30	 mov	 rax, QWORD PTR sk$[rsp]
  0009a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0009d	83 c8 06	 or	 eax, 6
  000a0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR sk$[rsp]
  000a5	88 01		 mov	 BYTE PTR [rcx], al

; 317  :     *main1 = value >> 8;

  000a7	0f b7 44 24 60	 movzx	 eax, WORD PTR value$[rsp]
  000ac	c1 f8 08	 sar	 eax, 8
  000af	48 8b 4c 24 38	 mov	 rcx, QWORD PTR main1$[rsp]
  000b4	88 01		 mov	 BYTE PTR [rcx], al

; 318  :     *main2 = value & 0xFF;

  000b6	0f b7 44 24 60	 movzx	 eax, WORD PTR value$[rsp]
  000bb	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000c0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR main2$[rsp]
  000c5	88 01		 mov	 BYTE PTR [rcx], al

; 319  : }

  000c7	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000cb	c3		 ret	 0
s370_vstore2_full ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dat.h
;	COMDAT s370_maddr_l
_TEXT	SEGMENT
tlbix$ = 48
aea_crn$ = 52
tv70 = 56
maddr$ = 64
addr$ = 96
len$ = 104
arn$ = 112
regs$ = 120
acctype$ = 128
akey$ = 136
s370_maddr_l PROC					; COMDAT

; 307  : {

$LN14:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 308  :     /* Note: ALL of the below conditions must be true for a TLB hit
; 309  :        to occur.  If ANY of them are false, then it's a TLB miss,
; 310  :        requiring us to then perform a full DAT address translation.
; 311  : 
; 312  :        Note too that on the grand scheme of things the order/sequence
; 313  :        of the below tests (if statements) is completely unimportant
; 314  :        since ALL conditions must be checked anyway in order for a hit
; 315  :        to occur, and it doesn't matter that a miss tests a few extra
; 316  :        conditions since it's going to do a full translation anyway!
; 317  :        (which is many, many instructions)
; 318  :     */
; 319  : 
; 320  :     int  aea_crn  = (arn >= USE_ARMODE) ? 0 : regs->AEA_AR( arn );

  00017	83 7c 24 70 10	 cmp	 DWORD PTR arn$[rsp], 16
  0001c	7c 0a		 jl	 SHORT $LN12@s370_maddr
  0001e	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
  00026	eb 19		 jmp	 SHORT $LN13@s370_maddr
$LN12@s370_maddr:
  00028	8b 44 24 70	 mov	 eax, DWORD PTR arn$[rsp]
  0002c	83 c0 05	 add	 eax, 5
  0002f	48 98		 cdqe
  00031	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00036	8b 84 81 94 0c
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+3220]
  0003d	89 44 24 38	 mov	 DWORD PTR tv70[rsp], eax
$LN13@s370_maddr:
  00041	8b 44 24 38	 mov	 eax, DWORD PTR tv70[rsp]
  00045	89 44 24 34	 mov	 DWORD PTR aea_crn$[rsp], eax

; 321  :     U16  tlbix    = TLBIX( addr );

  00049	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  0004d	c1 e8 0b	 shr	 eax, 11
  00050	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
  00055	66 89 44 24 30	 mov	 WORD PTR tlbix$[rsp], ax

; 322  :     BYTE *maddr   = NULL;

  0005a	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR maddr$[rsp], 0

; 323  : 
; 324  :     /* Non-zero AEA Control Register number? */
; 325  :     if (aea_crn)

  00063	83 7c 24 34 00	 cmp	 DWORD PTR aea_crn$[rsp], 0
  00068	0f 84 25 01 00
	00		 je	 $LN2@s370_maddr

; 326  :     {
; 327  :         /* Same Addess Space Designator as before? */
; 328  :         /* Or if not, is address in a common segment? */
; 329  :         if (0
; 330  :             || (regs->CR( aea_crn ) == regs->tlb.TLB_ASD( tlbix ))
; 331  :             || (regs->AEA_COMMON( aea_crn ) & regs->tlb.common[ tlbix ])

  0006e	33 c0		 xor	 eax, eax
  00070	85 c0		 test	 eax, eax
  00072	75 59		 jne	 SHORT $LN4@s370_maddr
  00074	8b 44 24 34	 mov	 eax, DWORD PTR aea_crn$[rsp]
  00078	ff c0		 inc	 eax
  0007a	48 98		 cdqe
  0007c	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  00081	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00086	4c 8b 44 24 78	 mov	 r8, QWORD PTR regs$[rsp]
  0008b	41 8b 8c c8 60
	b0 00 00	 mov	 ecx, DWORD PTR [r8+rcx*8+45152]
  00093	39 8c c2 00 06
	00 00		 cmp	 DWORD PTR [rdx+rax*8+1536], ecx
  0009a	74 31		 je	 SHORT $LN4@s370_maddr
  0009c	8b 44 24 34	 mov	 eax, DWORD PTR aea_crn$[rsp]
  000a0	ff c0		 inc	 eax
  000a2	48 98		 cdqe
  000a4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a9	0f b6 84 01 e8
	0c 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3304]
  000b1	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  000b6	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  000bb	0f b6 8c 0a 60
	54 01 00	 movzx	 ecx, BYTE PTR [rdx+rcx+87136]
  000c3	23 c1		 and	 eax, ecx
  000c5	85 c0		 test	 eax, eax
  000c7	0f 84 c6 00 00
	00		 je	 $LN3@s370_maddr
$LN4@s370_maddr:

; 332  :         )
; 333  :         {
; 334  :             /* Storage Key zero? */
; 335  :             /* Or if not, same Storage Key as before? */
; 336  :             if (0
; 337  :                 || akey == 0
; 338  :                 || akey == regs->tlb.skey[ tlbix ]

  000cd	33 c0		 xor	 eax, eax
  000cf	85 c0		 test	 eax, eax
  000d1	75 2e		 jne	 SHORT $LN6@s370_maddr
  000d3	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  000db	85 c0		 test	 eax, eax
  000dd	74 22		 je	 SHORT $LN6@s370_maddr
  000df	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  000e7	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  000ec	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  000f1	0f b6 8c 0a 60
	50 01 00	 movzx	 ecx, BYTE PTR [rdx+rcx+86112]
  000f9	3b c1		 cmp	 eax, ecx
  000fb	0f 85 92 00 00
	00		 jne	 $LN5@s370_maddr
$LN6@s370_maddr:

; 339  :             )
; 340  :             {
; 341  :                 /* Does the page address match the one in the TLB? */
; 342  :                 /* (does a TLB entry exist for this page address?) */
; 343  :                 if (
; 344  :                     ((addr & TLBID_PAGEMASK) | regs->tlbID)
; 345  :                     ==

  00101	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  00105	25 00 00 e0 00	 and	 eax, 14680064		; 00e00000H
  0010a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0010f	0b 81 58 b0 00
	00		 or	 eax, DWORD PTR [rcx+45144]
  00115	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  0011a	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  0011f	3b 84 ca 60 d0
	00 00		 cmp	 eax, DWORD PTR [rdx+rcx*8+53344]
  00126	75 6b		 jne	 SHORT $LN7@s370_maddr

; 346  :                     regs->tlb.TLB_VADDR( tlbix )
; 347  :                 )
; 348  :                 {
; 349  :                     /* Is storage being accessed same way as before? */
; 350  :                     if (acctype & regs->tlb.acc[ tlbix ])

  00128	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  0012d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00132	0f b6 84 01 60
	5c 01 00	 movzx	 eax, BYTE PTR [rcx+rax+89184]
  0013a	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR acctype$[rsp]
  00141	23 c8		 and	 ecx, eax
  00143	8b c1		 mov	 eax, ecx
  00145	85 c0		 test	 eax, eax
  00147	74 4a		 je	 SHORT $LN8@s370_maddr

; 351  :                     {
; 352  :                         /*------------------------------------------*/
; 353  :                         /* TLB hit: use previously translated value */
; 354  :                         /*------------------------------------------*/
; 355  : 
; 356  :                         if (acctype & ACC_CHECK)

  00149	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR acctype$[rsp]
  00150	83 e0 01	 and	 eax, 1
  00153	85 c0		 test	 eax, eax
  00155	74 1e		 je	 SHORT $LN9@s370_maddr

; 357  :                             regs->dat.storkey = regs->tlb.storkey[ tlbix ];

  00157	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  0015c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00161	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00166	48 8b 84 c2 60
	30 01 00	 mov	 rax, QWORD PTR [rdx+rax*8+77920]
  0016e	48 89 81 28 08
	00 00		 mov	 QWORD PTR [rcx+2088], rax
$LN9@s370_maddr:

; 358  : 
; 359  :                         maddr = MAINADDR( regs->tlb.main[tlbix], addr );

  00175	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  0017a	8b 4c 24 60	 mov	 ecx, DWORD PTR addr$[rsp]
  0017e	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00183	48 8b 84 c2 60
	10 01 00	 mov	 rax, QWORD PTR [rdx+rax*8+69728]
  0018b	48 33 c1	 xor	 rax, rcx
  0018e	48 89 44 24 40	 mov	 QWORD PTR maddr$[rsp], rax
$LN8@s370_maddr:
$LN7@s370_maddr:
$LN5@s370_maddr:
$LN3@s370_maddr:
$LN2@s370_maddr:

; 360  :                     }
; 361  :                 }
; 362  :             }
; 363  :         }
; 364  :     }
; 365  : 
; 366  :     /*---------------------------------------*/
; 367  :     /* TLB miss: do full address translation */
; 368  :     /*---------------------------------------*/
; 369  :     if (!maddr)

  00193	48 83 7c 24 40
	00		 cmp	 QWORD PTR maddr$[rsp], 0
  00199	75 35		 jne	 SHORT $LN10@s370_maddr

; 370  :         maddr = ARCH_DEP( logical_to_main_l )( addr, arn, regs, acctype, akey, len );

  0019b	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  001a0	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001a5	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  001ad	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  001b1	44 8b 8c 24 80
	00 00 00	 mov	 r9d, DWORD PTR acctype$[rsp]
  001b9	4c 8b 44 24 78	 mov	 r8, QWORD PTR regs$[rsp]
  001be	8b 54 24 70	 mov	 edx, DWORD PTR arn$[rsp]
  001c2	8b 4c 24 60	 mov	 ecx, DWORD PTR addr$[rsp]
  001c6	e8 00 00 00 00	 call	 s370_logical_to_main_l
  001cb	48 89 44 24 40	 mov	 QWORD PTR maddr$[rsp], rax
$LN10@s370_maddr:

; 371  : 
; 372  : #if defined( FEATURE_073_TRANSACT_EXEC_FACILITY )
; 373  :     if (FACILITY_ENABLED( 073_TRANSACT_EXEC, regs ))
; 374  :     {
; 375  :         /* SA22-7832-12 Principles of Operation, page 5-99:
; 376  : 
; 377  :              "Storage accesses for instruction and DAT- and ART-
; 378  :               table fetches follow the non-transactional rules."
; 379  :         */
; 380  :         if (0
; 381  :             || !regs
; 382  :             || !regs->txf_tnd
; 383  :             || arn == USE_INST_SPACE    /* Instruction fetching */
; 384  :             || arn == USE_REAL_ADDR     /* Address translation  */
; 385  :         )
; 386  :             return maddr;
; 387  : 
; 388  :         /* Quick exit if NTSTG call */
; 389  :         if (regs->txf_NTSTG)
; 390  :         {
; 391  :             regs->txf_NTSTG = false;
; 392  :             return maddr;
; 393  :         }
; 394  : 
; 395  :         /* Translate to alternate TXF address */
; 396  :         maddr = TXF_MADDRL( addr, len, arn, regs, acctype, maddr );
; 397  :     }
; 398  : #endif
; 399  : 
; 400  :     return maddr;

  001d0	48 8b 44 24 40	 mov	 rax, QWORD PTR maddr$[rsp]

; 401  : }

  001d5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001d9	c3		 ret	 0
s370_maddr_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_get_storage_key
_TEXT	SEGMENT
abs$ = 48
s370_get_storage_key PROC				; COMDAT

; 254  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 255  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 256  :     return ARCH_DEP( get_2K_storage_key )( abs );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  0000e	e8 00 00 00 00	 call	 s370_get_2K_storage_key

; 257  : #else
; 258  :     return ARCH_DEP( get_4K_storage_key )( abs );
; 259  : #endif
; 260  : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
s370_get_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_get_2K_storage_key
_TEXT	SEGMENT
abs$ = 48
s370_get_2K_storage_key PROC				; COMDAT

; 228  :   inline BYTE  ARCH_DEP( get_2K_storage_key )     (              U64 abs            ) { return ARCH_DEP( _get_storage_key     )(      abs, 2 )  & ~STORKEY_BADFRM;      }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	b2 02		 mov	 dl, 2
  0000b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00010	e8 00 00 00 00	 call	 s370__get_storage_key
  00015	0f b6 c0	 movzx	 eax, al
  00018	83 e0 fe	 and	 eax, -2
  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
s370_get_2K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370__get_storage_key
_TEXT	SEGMENT
skey$ = 32
abs$ = 64
K$ = 72
s370__get_storage_key PROC				; COMDAT

; 130  : {

$LN8:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370__get_:

; 131  :     BYTE skey;
; 132  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  0000d	33 c0		 xor	 eax, eax
  0000f	85 c0		 test	 eax, eax
  00011	75 fa		 jne	 SHORT $LN4@s370__get_

; 133  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00013	0f b6 44 24 48	 movzx	 eax, BYTE PTR K$[rsp]
  00018	83 f8 04	 cmp	 eax, 4
  0001b	75 39		 jne	 SHORT $LN5@s370__get_
  0001d	33 c0		 xor	 eax, eax
  0001f	83 f8 01	 cmp	 eax, 1
  00022	74 32		 je	 SHORT $LN5@s370__get_

; 134  :     {
; 135  :         skey  = *_get_storekey1_ptr( abs );

  00024	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  00029	e8 00 00 00 00	 call	 _get_storekey1_ptr
  0002e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00031	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al

; 136  :         skey |= *_get_storekey2_ptr( abs ) & ~(STORKEY_KEY);

  00035	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  0003a	e8 00 00 00 00	 call	 _get_storekey2_ptr
  0003f	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00042	25 0f ff ff ff	 and	 eax, -241		; ffffffffffffff0fH
  00047	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR skey$[rsp]
  0004c	0b c8		 or	 ecx, eax
  0004e	8b c1		 mov	 eax, ecx
  00050	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al

; 137  :     }

  00054	eb 16		 jmp	 SHORT $LN6@s370__get_
$LN5@s370__get_:

; 138  :     else
; 139  :         skey  = *_get_storekey_ptr(  abs, K );

  00056	0f b6 54 24 48	 movzx	 edx, BYTE PTR K$[rsp]
  0005b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  00060	e8 00 00 00 00	 call	 _get_storekey_ptr
  00065	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00068	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al
$LN6@s370__get_:

; 140  :     return skey;

  0006c	0f b6 44 24 20	 movzx	 eax, BYTE PTR skey$[rsp]

; 141  : }

  00071	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00075	c3		 ret	 0
s370__get_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT _get_storekey2_ptr
_TEXT	SEGMENT
abs$ = 8
_get_storekey2_ptr PROC					; COMDAT

; 60   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 61   :     ABS_CHECK( abs );
; 62   :     return &STOREKEY2( abs, &sysblk );

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR abs$[rsp]
  0000a	48 c1 e8 0b	 shr	 rax, 11
  0000e	48 83 c8 01	 or	 rax, 1
  00012	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00019	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00020	48 03 c8	 add	 rcx, rax
  00023	48 8b c1	 mov	 rax, rcx

; 63   : }

  00026	c3		 ret	 0
_get_storekey2_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT _get_storekey1_ptr
_TEXT	SEGMENT
abs$ = 8
_get_storekey1_ptr PROC					; COMDAT

; 54   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 55   :     ABS_CHECK( abs );
; 56   :     return &STOREKEY1( abs, &sysblk );

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR abs$[rsp]
  0000a	48 c1 e8 0b	 shr	 rax, 11
  0000e	48 83 e0 fe	 and	 rax, -2
  00012	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00019	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00020	48 03 c8	 add	 rcx, rax
  00023	48 8b c1	 mov	 rax, rcx

; 57   : }

  00026	c3		 ret	 0
_get_storekey1_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT _get_storekey_ptr
_TEXT	SEGMENT
tv75 = 0
abs$ = 32
K$ = 40
_get_storekey_ptr PROC					; COMDAT

; 40   : {

$LN5:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 18	 sub	 rsp, 24

; 41   :     ABS_CHECK( abs );
; 42   :     return (4 == K) ? &STOREKEY1( abs, &sysblk ) // (see feature.h PROGRAMMING NOTE)

  0000d	0f b6 44 24 28	 movzx	 eax, BYTE PTR K$[rsp]
  00012	83 f8 04	 cmp	 eax, 4
  00015	75 27		 jne	 SHORT $LN3@get_storek
  00017	48 8b 44 24 20	 mov	 rax, QWORD PTR abs$[rsp]
  0001c	48 c1 e8 0b	 shr	 rax, 11
  00020	48 83 e0 fe	 and	 rax, -2
  00024	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0002b	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00032	48 03 c8	 add	 rcx, rax
  00035	48 8b c1	 mov	 rax, rcx
  00038	48 89 04 24	 mov	 QWORD PTR tv75[rsp], rax
  0003c	eb 21		 jmp	 SHORT $LN4@get_storek
$LN3@get_storek:
  0003e	48 8b 44 24 20	 mov	 rax, QWORD PTR abs$[rsp]
  00043	48 c1 e8 0b	 shr	 rax, 11
  00047	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0004e	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00055	48 03 c8	 add	 rcx, rax
  00058	48 8b c1	 mov	 rax, rcx
  0005b	48 89 04 24	 mov	 QWORD PTR tv75[rsp], rax
$LN4@get_storek:
  0005f	48 8b 04 24	 mov	 rax, QWORD PTR tv75[rsp]

; 43   :                     : &STOREKEY(  abs, &sysblk );
; 44   : }

  00063	48 83 c4 18	 add	 rsp, 24
  00067	c3		 ret	 0
_get_storekey_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Release_Interrupt_Lock PROC

; 403  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@Release_In:

; 404  :     UNREFERENCED( regs );

  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@Release_In

; 405  :     sysblk.intowner = LOCK_OWNER_NONE;

  00014	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00019	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00020	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax

; 406  :     hthread_release_lock( &sysblk.intlock, location );

  00027	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0002e	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  00034	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00039	48 8b c8	 mov	 rcx, rax
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 407  : }

  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00046	c3		 ret	 0
Release_Interrupt_Lock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Obtain_Interrupt_Lock PROC

; 379  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 380  :     if (regs)

  0000e	48 83 7c 24 30
	00		 cmp	 QWORD PTR regs$[rsp], 0
  00014	74 13		 je	 SHORT $LN2@Obtain_Int

; 381  :         HOSTREGS->intwait = true;

  00016	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  0001b	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  00022	c6 80 f0 08 00
	00 01		 mov	 BYTE PTR [rax+2288], 1
$LN2@Obtain_Int:

; 382  :     hthread_obtain_lock( &sysblk.intlock, location );

  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00030	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  00036	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 383  :     Interrupt_Lock_Obtained( regs, location );

  00044	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR regs$[rsp]
  0004e	e8 00 00 00 00	 call	 Interrupt_Lock_Obtained

; 384  : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
Obtain_Interrupt_Lock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Interrupt_Lock_Obtained PROC

; 347  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 348  :     if (regs)

  0000e	48 83 7c 24 30
	00		 cmp	 QWORD PTR regs$[rsp], 0
  00014	0f 84 db 00 00
	00		 je	 $LN4@Interrupt_
$LN2@Interrupt_:

; 349  :     {
; 350  :         /* Wait for any SYNCHRONIZE_CPUS to finish before proceeding */
; 351  :         while (sysblk.syncing)

  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00021	0f b6 80 7c 13
	00 00		 movzx	 eax, BYTE PTR [rax+4988]
  00028	85 c0		 test	 eax, eax
  0002a	0f 84 8f 00 00
	00		 je	 $LN3@Interrupt_

; 352  :         {
; 353  :             /* Indicate we have reached the sync point */
; 354  :             sysblk.sync_mask &= ~HOSTREGS->cpubit;

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  00035	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  0003c	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00040	48 f7 d0	 not	 rax
  00043	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0004a	48 8b 89 80 13
	00 00		 mov	 rcx, QWORD PTR [rcx+4992]
  00051	48 23 c8	 and	 rcx, rax
  00054	48 8b c1	 mov	 rax, rcx
  00057	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0005e	48 89 81 80 13
	00 00		 mov	 QWORD PTR [rcx+4992], rax

; 355  : 
; 356  :             /* If we're the last CPU to reach this sync point,
; 357  :                signal the CPU that requested the sync that it
; 358  :                may now safely proceed with its exclusive logic.
; 359  :             */
; 360  :             if (!sysblk.sync_mask)

  00065	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0006c	48 83 b8 80 13
	00 00 00	 cmp	 QWORD PTR [rax+4992], 0
  00074	75 1b		 jne	 SHORT $LN6@Interrupt_

; 361  :                 hthread_signal_condition( &sysblk.all_synced_cond, location );

  00076	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007d	48 05 88 13 00
	00		 add	 rax, 5000		; 00001388H
  00083	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00088	48 8b c8	 mov	 rcx, rax
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition
$LN6@Interrupt_:

; 362  : 
; 363  :             /* Wait for CPU that requested the sync to indicate
; 364  :                it's done and thus is now safe for us to proceed.
; 365  :             */
; 366  :             hthread_wait_condition( &sysblk.sync_done_cond, &sysblk.intlock, location );

  00091	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00098	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  0009e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000a5	48 81 c1 90 13
	00 00		 add	 rcx, 5008		; 00001390H
  000ac	4c 8b 44 24 38	 mov	 r8, QWORD PTR location$[rsp]
  000b1	48 8b d0	 mov	 rdx, rax
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_wait_condition

; 367  :         }

  000ba	e9 5b ff ff ff	 jmp	 $LN2@Interrupt_
$LN3@Interrupt_:

; 368  : 
; 369  :         HOSTREGS->intwait = false;

  000bf	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  000c4	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  000cb	c6 80 f0 08 00
	00 00		 mov	 BYTE PTR [rax+2288], 0

; 370  :         sysblk.intowner = HOSTREGS->cpuad;

  000d2	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  000d7	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  000de	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000e5	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  000ec	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax

; 371  :     }

  000f3	eb 13		 jmp	 SHORT $LN5@Interrupt_
$LN4@Interrupt_:

; 372  :     else
; 373  :         sysblk.intowner = LOCK_OWNER_OTHER;

  000f5	b8 fe ff 00 00	 mov	 eax, 65534		; 0000fffeH
  000fa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00101	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax
$LN5@Interrupt_:

; 374  : }

  00108	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0010c	c3		 ret	 0
Interrupt_Lock_Obtained ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
r_pte$ = 0
paginvmask$ = 4
pagfmtmask$ = 8
framemask$ = 12
lenindex$ = 16
v_pte$ = 20
r_ste$ = 24
micevma2$ = 28
segmask$ = 32
segshift$ = 36
offset_ste$ = 40
pagindex$ = 44
v_ste_ptr$ = 48
seglenchk$ = 52
v_pte_ptr$ = 56
frameshift$ = 60
amicblok$ = 64
r_ste_ptr$ = 68
r_pte_ptr$ = 72
byte_addr$ = 76
frame_addr$ = 80
CR6$ = 84
v_ste$ = 88
tv534 = 92
pagmask$ = 96
pagshift$ = 100
bytemask$ = 104
micpend$ = 108
micevma$ = 109
micevma3$ = 110
micevma4$ = 111
vpswa$ = 112
cr0$ = 116
v_sto$ = 120
r_pto$ = 124
cc$ = 128
cr1$ = 132
v_segtbllen$ = 136
offset_pte$ = 140
v_pto$ = 144
r_segtbllen$ = 148
r_sto$ = 152
vmb$ = 156
vmsize$ = 160
cregs$ = 168
tv343 = 176
tv354 = 184
vpswa_p$ = 192
tv372 = 200
raddr$ = 208
micblok$ = 216
vpregs$ = 256
buf$ = 90496
__$ArrayPad$ = 91008
regs$ = 91248
r1$ = 91256
b2$ = 91264
effective_addr2$ = 91272
ecpsvm_dolra PROC

; 4314 : {

$LN91:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	b8 58 64 01 00	 mov	 eax, 91224		; 00016458H
  0001a	e8 00 00 00 00	 call	 __chkstk
  0001f	48 2b e0	 sub	 rsp, rax
  00022	48 8d ac 24 c0
	00 00 00	 lea	 rbp, QWORD PTR [rsp+192]
  0002a	48 83 e5 80	 and	 rbp, -128		; ffffffffffffff80H
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 85 80 63
	01 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 4315 :     RADR  raddr;
; 4316 :     VADR  vmb;
; 4317 :     VADR  v_sto;
; 4318 :     VADR  r_sto;
; 4319 :     VADR  v_ste;
; 4320 :     VADR  r_ste;
; 4321 :     VADR  v_ste_ptr;
; 4322 :     VADR  r_ste_ptr;
; 4323 :     VADR  r_pto;
; 4324 :     VADR  r_pte_ptr;
; 4325 :     VADR  v_pto;
; 4326 :     VADR  v_pte_ptr;
; 4327 :     BYTE *cregs;
; 4328 :     U32   seglenchk;
; 4329 :     U32   cc;
; 4330 :     U32   vmsize;
; 4331 :     U32   cr0;
; 4332 :     U32   cr1;
; 4333 :     U32   frame_addr;
; 4334 :     U32   byte_addr;
; 4335 :     U32   pagshift;
; 4336 :     U32   frameshift;
; 4337 :     U32   bytemask;
; 4338 :     U32   segshift;
; 4339 :     U32   segmask;
; 4340 :     U32   pagmask;
; 4341 :     U32   offset_ste;
; 4342 :     U32   offset_pte;
; 4343 :     U32   v_segtbllen;
; 4344 :     U32   r_segtbllen;
; 4345 :     U32   lenindex;
; 4346 :     U32   pagindex;
; 4347 :     U16   r_pte;
; 4348 :     U16   v_pte;
; 4349 :     U16   paginvmask;
; 4350 :     U16   pagfmtmask;
; 4351 :     U16   framemask;
; 4352 : 
; 4353 :     SASSIST_PROLOG(LRA);

  0003f	48 8b 84 24 70
	64 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  00047	48 83 b8 80 08
	00 00 00	 cmp	 QWORD PTR [rax+2176], 0
  0004f	74 0a		 je	 SHORT $LN13@ecpsvm_dol
  00051	b8 01 00 00 00	 mov	 eax, 1
  00056	e9 3a 1a 00 00	 jmp	 $LN1@ecpsvm_dol
$LN13@ecpsvm_dol:
  0005b	48 8b 84 24 70
	64 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  00063	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00067	83 e0 01	 and	 eax, 1
  0006a	85 c0		 test	 eax, eax
  0006c	75 0a		 jne	 SHORT $LN14@ecpsvm_dol
  0006e	b8 01 00 00 00	 mov	 eax, 1
  00073	e9 1d 1a 00 00	 jmp	 $LN1@ecpsvm_dol
$LN14@ecpsvm_dol:
  00078	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007f	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00085	c1 e8 11	 shr	 eax, 17
  00088	83 e0 01	 and	 eax, 1
  0008b	85 c0		 test	 eax, eax
  0008d	75 6d		 jne	 SHORT $LN15@ecpsvm_dol
  0008f	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  00095	c1 e8 02	 shr	 eax, 2
  00098	83 e0 01	 and	 eax, 1
  0009b	85 c0		 test	 eax, eax
  0009d	74 53		 je	 SHORT $LN16@ecpsvm_dol
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175054
  000b1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175055
  000bd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175056
  000c9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000ce	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d3	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175057
  000e0	ba 01 11 00 00	 mov	 edx, 4353		; 00001101H
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175058
  000ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN16@ecpsvm_dol:
  000f2	b8 01 00 00 00	 mov	 eax, 1
  000f7	e9 99 19 00 00	 jmp	 $LN1@ecpsvm_dol
$LN15@ecpsvm_dol:
  000fc	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  00102	d1 e8		 shr	 eax, 1
  00104	83 e0 01	 and	 eax, 1
  00107	85 c0		 test	 eax, eax
  00109	75 6d		 jne	 SHORT $LN17@ecpsvm_dol
  0010b	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  00111	c1 e8 02	 shr	 eax, 2
  00114	83 e0 01	 and	 eax, 1
  00117	85 c0		 test	 eax, eax
  00119	74 53		 je	 SHORT $LN18@ecpsvm_dol
  0011b	b9 01 00 00 00	 mov	 ecx, 1
  00120	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00126	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175061
  0012d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00132	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175062
  00139	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0013e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175063
  00145	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0014a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00155	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175064
  0015c	ba 01 11 00 00	 mov	 edx, 4353		; 00001101H
  00161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175065
  00168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN18@ecpsvm_dol:
  0016e	b8 01 00 00 00	 mov	 eax, 1
  00173	e9 1d 19 00 00	 jmp	 $LN1@ecpsvm_dol
$LN17@ecpsvm_dol:
  00178	b8 08 00 00 00	 mov	 eax, 8
  0017d	48 6b c0 07	 imul	 rax, rax, 7
  00181	48 8b 8c 24 70
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00189	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00190	89 45 54	 mov	 DWORD PTR CR6$[rbp], eax
  00193	48 8b 84 24 70
	64 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  0019b	48 c7 80 78 07
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+1912], 0
  001a6	8b 45 54	 mov	 eax, DWORD PTR CR6$[rbp]
  001a9	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001ae	85 c0		 test	 eax, eax
  001b0	75 6d		 jne	 SHORT $LN19@ecpsvm_dol
  001b2	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  001b8	c1 e8 02	 shr	 eax, 2
  001bb	83 e0 01	 and	 eax, 1
  001be	85 c0		 test	 eax, eax
  001c0	74 53		 je	 SHORT $LN20@ecpsvm_dol
  001c2	b9 01 00 00 00	 mov	 ecx, 1
  001c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175068
  001d4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175069
  001e0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175070
  001ec	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001f1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f6	41 b9 03 00 00
	00		 mov	 r9d, 3
  001fc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175071
  00203	ba 01 11 00 00	 mov	 edx, 4353		; 00001101H
  00208	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175072
  0020f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN20@ecpsvm_dol:
  00215	b8 01 00 00 00	 mov	 eax, 1
  0021a	e9 76 18 00 00	 jmp	 $LN1@ecpsvm_dol
$LN19@ecpsvm_dol:
  0021f	8b 45 54	 mov	 eax, DWORD PTR CR6$[rbp]
  00222	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00227	85 c0		 test	 eax, eax
  00229	74 6d		 je	 SHORT $LN21@ecpsvm_dol
  0022b	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  00231	c1 e8 02	 shr	 eax, 2
  00234	83 e0 01	 and	 eax, 1
  00237	85 c0		 test	 eax, eax
  00239	74 53		 je	 SHORT $LN22@ecpsvm_dol
  0023b	b9 01 00 00 00	 mov	 ecx, 1
  00240	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00246	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175075
  0024d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00252	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175076
  00259	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175077
  00265	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0026a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0026f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00275	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175078
  0027c	ba 01 11 00 00	 mov	 edx, 4353		; 00001101H
  00281	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175079
  00288	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN22@ecpsvm_dol:
  0028e	b8 01 00 00 00	 mov	 eax, 1
  00293	e9 fd 17 00 00	 jmp	 $LN1@ecpsvm_dol
$LN21@ecpsvm_dol:
  00298	48 8b 05 68 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+360
  0029f	48 ff c0	 inc	 rax
  002a2	48 89 05 68 01
	00 00		 mov	 QWORD PTR ecpsvm_sastats+360, rax
  002a9	8b 45 54	 mov	 eax, DWORD PTR CR6$[rbp]
  002ac	25 f8 ff ff 00	 and	 eax, 16777208		; 00fffff8H
  002b1	89 45 40	 mov	 DWORD PTR amicblok$[rbp], eax
  002b4	8b 45 40	 mov	 eax, DWORD PTR amicblok$[rbp]
  002b7	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002bc	4c 8b 84 24 70
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  002c4	ba fe ff ff ff	 mov	 edx, -2
  002c9	8b c8		 mov	 ecx, eax
  002cb	e8 00 00 00 00	 call	 s370_vfetch4
  002d0	89 85 d8 00 00
	00		 mov	 DWORD PTR micblok$[rbp], eax
  002d6	8b 45 40	 mov	 eax, DWORD PTR amicblok$[rbp]
  002d9	83 c0 04	 add	 eax, 4
  002dc	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002e1	4c 8b 84 24 70
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  002e9	ba fe ff ff ff	 mov	 edx, -2
  002ee	8b c8		 mov	 ecx, eax
  002f0	e8 00 00 00 00	 call	 s370_vfetch4
  002f5	89 85 dc 00 00
	00		 mov	 DWORD PTR micblok$[rbp+4], eax
  002fb	8b 45 40	 mov	 eax, DWORD PTR amicblok$[rbp]
  002fe	83 c0 08	 add	 eax, 8
  00301	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00306	4c 8b 84 24 70
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  0030e	ba fe ff ff ff	 mov	 edx, -2
  00313	8b c8		 mov	 ecx, eax
  00315	e8 00 00 00 00	 call	 s370_vfetch4
  0031a	89 85 e0 00 00
	00		 mov	 DWORD PTR micblok$[rbp+8], eax
  00320	8b 45 40	 mov	 eax, DWORD PTR amicblok$[rbp]
  00323	83 c0 0c	 add	 eax, 12
  00326	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0032b	4c 8b 84 24 70
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  00333	ba fe ff ff ff	 mov	 edx, -2
  00338	8b c8		 mov	 ecx, eax
  0033a	e8 00 00 00 00	 call	 s370_vfetch4
  0033f	89 85 e4 00 00
	00		 mov	 DWORD PTR micblok$[rbp+12], eax
  00345	8b 45 40	 mov	 eax, DWORD PTR amicblok$[rbp]
  00348	83 c0 10	 add	 eax, 16
  0034b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00350	4c 8b 84 24 70
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  00358	ba fe ff ff ff	 mov	 edx, -2
  0035d	8b c8		 mov	 ecx, eax
  0035f	e8 00 00 00 00	 call	 s370_vfetch4
  00364	89 85 e8 00 00
	00		 mov	 DWORD PTR micblok$[rbp+16], eax
  0036a	8b 45 40	 mov	 eax, DWORD PTR amicblok$[rbp]
  0036d	83 c0 14	 add	 eax, 20
  00370	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00375	4c 8b 84 24 70
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  0037d	ba fe ff ff ff	 mov	 edx, -2
  00382	8b c8		 mov	 ecx, eax
  00384	e8 00 00 00 00	 call	 s370_vfetch4
  00389	89 85 ec 00 00
	00		 mov	 DWORD PTR micblok$[rbp+20], eax
  0038f	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR micblok$[rbp+8]
  00395	c1 e8 18	 shr	 eax, 24
  00398	88 45 6c	 mov	 BYTE PTR micpend$[rbp], al
  0039b	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR micblok$[rbp+8]
  003a1	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  003a6	89 45 70	 mov	 DWORD PTR vpswa$[rbp], eax
  003a9	8b 85 ec 00 00
	00		 mov	 eax, DWORD PTR micblok$[rbp+20]
  003af	c1 e8 18	 shr	 eax, 24
  003b2	88 45 6d	 mov	 BYTE PTR micevma$[rbp], al
  003b5	8b 85 ec 00 00
	00		 mov	 eax, DWORD PTR micblok$[rbp+20]
  003bb	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  003c0	c1 e8 10	 shr	 eax, 16
  003c3	88 45 1c	 mov	 BYTE PTR micevma2$[rbp], al
  003c6	8b 85 ec 00 00
	00		 mov	 eax, DWORD PTR micblok$[rbp+20]
  003cc	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  003d1	c1 e8 08	 shr	 eax, 8
  003d4	88 45 6e	 mov	 BYTE PTR micevma3$[rbp], al
  003d7	8b 85 ec 00 00
	00		 mov	 eax, DWORD PTR micblok$[rbp+20]
  003dd	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003e2	88 45 6f	 mov	 BYTE PTR micevma4$[rbp], al
  003e5	8b 45 54	 mov	 eax, DWORD PTR CR6$[rbp]
  003e8	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  003ed	85 c0		 test	 eax, eax
  003ef	74 3a		 je	 SHORT $LN23@ecpsvm_dol
  003f1	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  003f6	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  003fe	4c 8b 8c 24 70
	64 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  00406	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0040c	ba 01 00 00 00	 mov	 edx, 1
  00411	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR micblok$[rbp+16]
  00417	e8 00 00 00 00	 call	 s370_maddr_l
  0041c	48 8b 8c 24 70
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00424	48 89 81 78 07
	00 00		 mov	 QWORD PTR [rcx+1912], rax
$LN23@ecpsvm_dol:
  0042b	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  00430	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00438	4c 8b 8c 24 70
	64 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  00440	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00446	ba 01 00 00 00	 mov	 edx, 1
  0044b	8b 4d 70	 mov	 ecx, DWORD PTR vpswa$[rbp]
  0044e	e8 00 00 00 00	 call	 s370_maddr_l
  00453	48 89 85 c0 00
	00 00		 mov	 QWORD PTR vpswa_p$[rbp], rax
  0045a	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  00460	c1 e8 02	 shr	 eax, 2
  00463	83 e0 01	 and	 eax, 1
  00466	85 c0		 test	 eax, eax
  00468	74 1d		 je	 SHORT $LN24@ecpsvm_dol
  0046a	44 8b 4d 70	 mov	 r9d, DWORD PTR vpswa$[rbp]
  0046e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175082
  00475	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  0047a	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00481	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN24@ecpsvm_dol:
  00487	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  0048d	c1 e8 02	 shr	 eax, 2
  00490	83 e0 01	 and	 eax, 1
  00493	85 c0		 test	 eax, eax
  00495	74 53		 je	 SHORT $LN25@ecpsvm_dol
  00497	b9 01 00 00 00	 mov	 ecx, 1
  0049c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004a2	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  004a9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175084
  004b5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175085
  004c1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004c6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004cb	41 b9 03 00 00
	00		 mov	 r9d, 3
  004d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175086
  004d8	ba 01 11 00 00	 mov	 edx, 4353		; 00001101H
  004dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175087
  004e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN25@ecpsvm_dol:
  004ea	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  004f0	c1 e8 02	 shr	 eax, 2
  004f3	83 e0 01	 and	 eax, 1
  004f6	85 c0		 test	 eax, eax
  004f8	74 1d		 je	 SHORT $LN26@ecpsvm_dol
  004fa	44 8b 4d 54	 mov	 r9d, DWORD PTR CR6$[rbp]
  004fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175089
  00505	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  0050a	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00511	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN26@ecpsvm_dol:
  00517	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  0051d	c1 e8 02	 shr	 eax, 2
  00520	83 e0 01	 and	 eax, 1
  00523	85 c0		 test	 eax, eax
  00525	74 53		 je	 SHORT $LN27@ecpsvm_dol
  00527	b9 01 00 00 00	 mov	 ecx, 1
  0052c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00532	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00539	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0053e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175091
  00545	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0054a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175092
  00551	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00556	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0055b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00561	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175093
  00568	ba 01 11 00 00	 mov	 edx, 4353		; 00001101H
  0056d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175094
  00574	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN27@ecpsvm_dol:
  0057a	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  00580	c1 e8 02	 shr	 eax, 2
  00583	83 e0 01	 and	 eax, 1
  00586	85 c0		 test	 eax, eax
  00588	74 20		 je	 SHORT $LN28@ecpsvm_dol
  0058a	44 8b 8d e8 00
	00 00		 mov	 r9d, DWORD PTR micblok$[rbp+16]
  00591	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175096
  00598	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  0059d	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  005a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN28@ecpsvm_dol:
  005aa	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  005b0	c1 e8 02	 shr	 eax, 2
  005b3	83 e0 01	 and	 eax, 1
  005b6	85 c0		 test	 eax, eax
  005b8	74 53		 je	 SHORT $LN29@ecpsvm_dol
  005ba	b9 01 00 00 00	 mov	 ecx, 1
  005bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005c5	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  005cc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175098
  005d8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175099
  005e4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005e9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005ee	41 b9 03 00 00
	00		 mov	 r9d, 3
  005f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175100
  005fb	ba 01 11 00 00	 mov	 edx, 4353		; 00001101H
  00600	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175101
  00607	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN29@ecpsvm_dol:
  0060d	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  00613	c1 e8 02	 shr	 eax, 2
  00616	83 e0 01	 and	 eax, 1
  00619	85 c0		 test	 eax, eax
  0061b	74 19		 je	 SHORT $LN30@ecpsvm_dol
  0061d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175103
  00624	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00629	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00630	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN30@ecpsvm_dol:
  00636	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  0063c	c1 e8 02	 shr	 eax, 2
  0063f	83 e0 01	 and	 eax, 1
  00642	85 c0		 test	 eax, eax
  00644	74 4e		 je	 SHORT $LN31@ecpsvm_dol
  00646	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0064d	e8 00 00 00 00	 call	 strlen
  00652	48 98		 cdqe
  00654	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00659	48 2b c8	 sub	 rcx, rax
  0065c	48 8b c1	 mov	 rax, rcx
  0065f	48 89 85 b0 00
	00 00		 mov	 QWORD PTR tv343[rbp], rax
  00666	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0066d	e8 00 00 00 00	 call	 strlen
  00672	48 8d 84 05 80
	61 01 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  0067a	48 8b 8d b0 00
	00 00		 mov	 rcx, QWORD PTR tv343[rbp]
  00681	44 8b c1	 mov	 r8d, ecx
  00684	48 8b d0	 mov	 rdx, rax
  00687	48 8b 8c 24 70
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0068f	e8 00 00 00 00	 call	 display_psw
$LN31@ecpsvm_dol:
$LN4@ecpsvm_dol:
  00694	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0069b	48 63 80 90 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5264]
  006a2	48 89 85 b8 00
	00 00		 mov	 QWORD PTR tv354[rbp], rax
  006a9	48 8d 8d 00 01
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  006b0	48 8b f9	 mov	 rdi, rcx
  006b3	33 c0		 xor	 eax, eax
  006b5	48 8b 8d b8 00
	00 00		 mov	 rcx, QWORD PTR tv354[rbp]
  006bc	f3 aa		 rep stosb
$LN7@ecpsvm_dol:
  006be	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG175105
  006c5	48 89 85 68 01
	00 00		 mov	 QWORD PTR vpregs$[rbp+104], rax
  006cc	33 c0		 xor	 eax, eax
  006ce	85 c0		 test	 eax, eax
  006d0	75 ec		 jne	 SHORT $LN7@ecpsvm_dol
  006d2	33 c0		 xor	 eax, eax
  006d4	85 c0		 test	 eax, eax
  006d6	75 bc		 jne	 SHORT $LN4@ecpsvm_dol
  006d8	48 8b 95 c0 00
	00 00		 mov	 rdx, QWORD PTR vpswa_p$[rbp]
  006df	48 8d 8d 00 01
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  006e6	e8 00 00 00 00	 call	 s370_load_psw
  006eb	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  006f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG175106
  006f8	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
  00705	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  0070b	c1 e8 02	 shr	 eax, 2
  0070e	83 e0 01	 and	 eax, 1
  00711	85 c0		 test	 eax, eax
  00713	74 4d		 je	 SHORT $LN32@ecpsvm_dol
  00715	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0071c	e8 00 00 00 00	 call	 strlen
  00721	48 98		 cdqe
  00723	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00728	48 2b c8	 sub	 rcx, rax
  0072b	48 8b c1	 mov	 rax, rcx
  0072e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv372[rbp], rax
  00735	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0073c	e8 00 00 00 00	 call	 strlen
  00741	48 8d 84 05 80
	61 01 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  00749	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR tv372[rbp]
  00750	44 8b c1	 mov	 r8d, ecx
  00753	48 8b d0	 mov	 rdx, rax
  00756	48 8d 8d 00 01
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  0075d	e8 00 00 00 00	 call	 display_psw
$LN32@ecpsvm_dol:
  00762	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  00768	c1 e8 02	 shr	 eax, 2
  0076b	83 e0 01	 and	 eax, 1
  0076e	85 c0		 test	 eax, eax
  00770	74 53		 je	 SHORT $LN33@ecpsvm_dol
  00772	b9 01 00 00 00	 mov	 ecx, 1
  00777	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0077d	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00784	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00789	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175109
  00790	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00795	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175110
  0079c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007a1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007a6	41 b9 03 00 00
	00		 mov	 r9d, 3
  007ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175111
  007b3	ba 01 11 00 00	 mov	 edx, 4353		; 00001101H
  007b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175112
  007bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN33@ecpsvm_dol:
$LN10@ecpsvm_dol:

; 4354 : 
; 4355 :     UNREFERENCED(b2);

  007c5	33 c0		 xor	 eax, eax
  007c7	85 c0		 test	 eax, eax
  007c9	75 fa		 jne	 SHORT $LN10@ecpsvm_dol

; 4356 : 
; 4357 :     if(!ECMODE(&vpregs.psw))

  007cb	0f b6 85 7a 01
	00 00		 movzx	 eax, BYTE PTR vpregs$[rbp+122]
  007d2	83 e0 08	 and	 eax, 8
  007d5	85 c0		 test	 eax, eax
  007d7	75 6d		 jne	 SHORT $LN34@ecpsvm_dol

; 4358 :     {
; 4359 : 
; 4360 :         DEBUG_SASSISTX(LRA,WRMSG(HHC90000, "D", "SASSIST LRA Reject : VPSW is BC mode\n"));

  007d9	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  007df	c1 e8 02	 shr	 eax, 2
  007e2	83 e0 01	 and	 eax, 1
  007e5	85 c0		 test	 eax, eax
  007e7	74 53		 je	 SHORT $LN35@ecpsvm_dol
  007e9	b9 01 00 00 00	 mov	 ecx, 1
  007ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175115
  007fb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00800	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175116
  00807	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0080c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175117
  00813	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00818	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0081d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00823	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175118
  0082a	ba 08 11 00 00	 mov	 edx, 4360		; 00001108H
  0082f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175119
  00836	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN35@ecpsvm_dol:

; 4361 :         return(1);

  0083c	b8 01 00 00 00	 mov	 eax, 1
  00841	e9 4f 12 00 00	 jmp	 $LN1@ecpsvm_dol
$LN34@ecpsvm_dol:

; 4362 :     }
; 4363 : 
; 4364 :     /* Check to see if can perform the Shadow Table Bypass Assist version of LOAD
; 4365 :        REAL ADDRESS first.  The virtual machine user must have CP STBYPASS VR set active
; 4366 :        and the virtual PSW must be DAT enabled, or this assist will not be performed and
; 4367 :        instead will proceed on to the VMA version of the LOAD REAL ADDRESS assist.
; 4368 :     */
; 4369 :     if((micevma2 & (MICSTBVR | MICLRA2)) && (vpregs.psw.sysmask & 0x04))

  00846	0f b6 45 1c	 movzx	 eax, BYTE PTR micevma2$[rbp]
  0084a	25 88 00 00 00	 and	 eax, 136		; 00000088H
  0084f	85 c0		 test	 eax, eax
  00851	0f 84 33 01 00
	00		 je	 $LN36@ecpsvm_dol
  00857	0f b6 85 78 01
	00 00		 movzx	 eax, BYTE PTR vpregs$[rbp+120]
  0085e	83 e0 04	 and	 eax, 4
  00861	85 c0		 test	 eax, eax
  00863	0f 84 21 01 00
	00		 je	 $LN36@ecpsvm_dol

; 4370 :     {
; 4371 :         cc = ecpsvm_int_lra(regs, effective_addr2, &raddr);

  00869	4c 8d 85 d0 00
	00 00		 lea	 r8, QWORD PTR raddr$[rbp]
  00870	8b 94 24 88 64
	01 00		 mov	 edx, DWORD PTR effective_addr2$[rsp]
  00877	48 8b 8c 24 70
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0087f	e8 00 00 00 00	 call	 ecpsvm_int_lra
  00884	89 85 80 00 00
	00		 mov	 DWORD PTR cc$[rbp], eax

; 4372 :         regs->GR_L(r1) = raddr;

  0088a	48 63 84 24 78
	64 01 00	 movsxd	 rax, DWORD PTR r1$[rsp]
  00892	48 8b 8c 24 70
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0089a	8b 95 d0 00 00
	00		 mov	 edx, DWORD PTR raddr$[rbp]
  008a0	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 4373 :         regs->psw.cc = cc;

  008a7	48 8b 84 24 70
	64 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  008af	0f b6 8d 80 00
	00 00		 movzx	 ecx, BYTE PTR cc$[rbp]
  008b6	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 4374 :         DEBUG_SASSISTX(LRA,MSGBUF(buf, "SASSIST LRA Complete: CC=%d; Operands r1=%8.8X, d2(b2)=%8.8X (STBYPASS)\n",cc,regs->GR_L(r1),effective_addr2));

  008b9	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  008bf	c1 e8 02	 shr	 eax, 2
  008c2	83 e0 01	 and	 eax, 1
  008c5	85 c0		 test	 eax, eax
  008c7	74 46		 je	 SHORT $LN37@ecpsvm_dol
  008c9	48 63 84 24 78
	64 01 00	 movsxd	 rax, DWORD PTR r1$[rsp]
  008d1	8b 8c 24 88 64
	01 00		 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  008d8	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  008dc	48 8b 8c 24 70
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  008e4	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  008eb	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  008ef	44 8b 8d 80 00
	00 00		 mov	 r9d, DWORD PTR cc$[rbp]
  008f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175122
  008fd	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00902	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00909	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN37@ecpsvm_dol:

; 4375 :         DEBUG_SASSISTX(LRA,WRMSG(HHC90000, "D", buf));

  0090f	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  00915	c1 e8 02	 shr	 eax, 2
  00918	83 e0 01	 and	 eax, 1
  0091b	85 c0		 test	 eax, eax
  0091d	74 53		 je	 SHORT $LN38@ecpsvm_dol
  0091f	b9 01 00 00 00	 mov	 ecx, 1
  00924	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0092a	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00931	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00936	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175124
  0093d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00942	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175125
  00949	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0094e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00953	41 b9 03 00 00
	00		 mov	 r9d, 3
  00959	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175126
  00960	ba 17 11 00 00	 mov	 edx, 4375		; 00001117H
  00965	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175127
  0096c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN38@ecpsvm_dol:

; 4376 :         SASSIST_HIT(LRA);

  00972	48 8b 05 70 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+368
  00979	48 ff c0	 inc	 rax
  0097c	48 89 05 70 01
	00 00		 mov	 QWORD PTR ecpsvm_sastats+368, rax

; 4377 :         return(0);

  00983	33 c0		 xor	 eax, eax
  00985	e9 0b 11 00 00	 jmp	 $LN1@ecpsvm_dol
$LN36@ecpsvm_dol:

; 4378 :     }
; 4379 : 
; 4380 :     /* Do VMA LOAD REAL ADDRESS assist */
; 4381 : 
; 4382 :     /* We need to translate a 3rd level address (operand 2 of the LRA) to a 2nd level address.
; 4383 :        The translation must use the second level segment and page tables (the "virtual tables")
; 4384 :        but because these virtual tables are themselves in virtual storage, we will need to use
; 4385 :        the segment and page tables in first level storage (the "real tables") in order to locate
; 4386 :        them.
; 4387 : 
; 4388 :        These are the general steps that must be performed. If any validation or check fails,
; 4389 :        we exit to CP which can better deal with exceptions.
; 4390 : 
; 4391 :        1. Validate the paging architecture in virtual CR0 and CR1.
; 4392 :        2. Get the segment index of the 3rd level subject address.
; 4393 :        3. Check to ensure the segment index is not beyond the limit of the virtual tables.
; 4394 :        4. Compute the virtual address of the virtual STE for the 3rd level address.
; 4395 :        5. Get the segment index of the virtual STE address.
; 4396 :        6. Check to ensure the segment index is not beyond the limit of the real tables.
; 4397 :        7. Compute the address of the real STE that represents the real segment containing the virtual STE.
; 4398 :        8. Fetch the real STE; validate it's contents for format and segment-invalid.
; 4399 :        9. Get the page index of the virtual STE address.
; 4400 :       10. Check to ensure the page index is not beyond the limit of the real page table pointed to
; 4401 :           by the real STE fetched in step 8.
; 4402 :       11. Compute the address of the real PTE that represents the real page containing the virtual STE.
; 4403 :       12. Fetch the real PTE; validate its contents for format and page-invalid.
; 4404 :       13. Get the real page frame address from the real PTE.
; 4405 :       14. Compute the real address of the virtual STE.
; 4406 :       15. Fetch the virtual STE.  Validate its format and segment-invalid bit.
; 4407 :       16. Extract from the virtual STE the virtual address of the virtual page table.
; 4408 :       17. Get the page index from the 3rd level subject address.
; 4409 :       18. Check to ensure that the page index is not beyond the limit of the virtual page table.
; 4410 :       19. Use the segment index of the virtual PTE address to compute the address of the real STE
; 4411 :           that represents the real segment containing the virtual page table.
; 4412 :       20. Check to ensure the segment index is not beyond the length of the tables.
; 4413 :       21. Fetch the real STE; validate it's contents for format and segment-invalid.
; 4414 :       22. Get the page index of the virtual PTE address.
; 4415 :       23. Check to ensure the page index is not beyond the limit of the real page table pointed to
; 4416 :           by the real STE fetched in step 21.
; 4417 :       24. Compute the address of the real PTE that represents the real page containing the virtual PTE.
; 4418 :       25. Fetch the real PTE; validate its contents for format and page-invalid.
; 4419 :       26. Get the real page frame address from the real PTE.
; 4420 :       27. Compute the real address of the virtual PTE.
; 4421 :       28. Fetch the virtual PTE.  Validate its format and page-invalid bit.
; 4422 :       29. Fetch the virtual page frame address from the virtual PTE.
; 4423 :       30. Combine the virtual page frame address with the byte-index value of the 3rd level address.
; 4424 :       31. Return the translated 2nd level address from step 30 in the LRA r1 operand and set CC=0.
; 4425 :     */
; 4426 : 
; 4427 : 
; 4428 :     /* Get virtual control regs 0 and 1 */
; 4429 :     cregs=MADDR(micblok.MICCREG,USE_REAL_ADDR,regs,ACCTYPE_READ,0);

  0098a	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  0098f	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00997	4c 8b 8c 24 70
	64 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  0099f	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  009a5	ba 01 00 00 00	 mov	 edx, 1
  009aa	8b 8d dc 00 00
	00		 mov	 ecx, DWORD PTR micblok$[rbp+4]
  009b0	e8 00 00 00 00	 call	 s370_maddr_l
  009b5	48 89 85 a8 00
	00 00		 mov	 QWORD PTR cregs$[rbp], rax

; 4430 :     FETCH_FW(cr0,cregs);

  009bc	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR cregs$[rbp]
  009c3	e8 00 00 00 00	 call	 fetch_fw_noswap
  009c8	8b c8		 mov	 ecx, eax
  009ca	e8 00 00 00 00	 call	 _byteswap_ulong
  009cf	89 45 74	 mov	 DWORD PTR cr0$[rbp], eax

; 4431 :     FETCH_FW(cr1,cregs+4);

  009d2	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR cregs$[rbp]
  009d9	48 83 c0 04	 add	 rax, 4
  009dd	48 8b c8	 mov	 rcx, rax
  009e0	e8 00 00 00 00	 call	 fetch_fw_noswap
  009e5	8b c8		 mov	 ecx, eax
  009e7	e8 00 00 00 00	 call	 _byteswap_ulong
  009ec	89 85 84 00 00
	00		 mov	 DWORD PTR cr1$[rbp], eax

; 4432 : 
; 4433 :     /* Separate out the segment table lengths and segment table origins in V-CR1 and MICRSEG */
; 4434 :     vmb = vpswa-0xA8;

  009f2	8b 45 70	 mov	 eax, DWORD PTR vpswa$[rbp]
  009f5	2d a8 00 00 00	 sub	 eax, 168		; 000000a8H
  009fa	89 85 9c 00 00
	00		 mov	 DWORD PTR vmb$[rbp], eax

; 4435 :     vmsize = EVM_L(vmb+VMSIZE);

  00a00	8b 85 9c 00 00
	00		 mov	 eax, DWORD PTR vmb$[rbp]
  00a06	83 c0 14	 add	 eax, 20
  00a09	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00a0e	4c 8b 84 24 70
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  00a16	ba fe ff ff ff	 mov	 edx, -2
  00a1b	8b c8		 mov	 ecx, eax
  00a1d	e8 00 00 00 00	 call	 s370_vfetch4
  00a22	89 85 a0 00 00
	00		 mov	 DWORD PTR vmsize$[rbp], eax

; 4436 :     v_segtbllen = (cr1 & 0xff000000) >> 24;

  00a28	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR cr1$[rbp]
  00a2e	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00a33	c1 e8 18	 shr	 eax, 24
  00a36	89 85 88 00 00
	00		 mov	 DWORD PTR v_segtbllen$[rbp], eax

; 4437 :     v_sto = cr1 & 0x00ffffc0;

  00a3c	8b 85 84 00 00
	00		 mov	 eax, DWORD PTR cr1$[rbp]
  00a42	25 c0 ff ff 00	 and	 eax, 16777152		; 00ffffc0H
  00a47	89 45 78	 mov	 DWORD PTR v_sto$[rbp], eax

; 4438 :     r_segtbllen = (micblok.MICRSEG & 0xff000000) >> 24;

  00a4a	8b 85 d8 00 00
	00		 mov	 eax, DWORD PTR micblok$[rbp]
  00a50	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00a55	c1 e8 18	 shr	 eax, 24
  00a58	89 85 94 00 00
	00		 mov	 DWORD PTR r_segtbllen$[rbp], eax

; 4439 :     r_sto = micblok.MICRSEG & 0x00ffffc0;

  00a5e	8b 85 d8 00 00
	00		 mov	 eax, DWORD PTR micblok$[rbp]
  00a64	25 c0 ff ff 00	 and	 eax, 16777152		; 00ffffc0H
  00a69	89 85 98 00 00
	00		 mov	 DWORD PTR r_sto$[rbp], eax

; 4440 : 
; 4441 :     if(v_sto + ((v_segtbllen + 1) * 64) > vmsize)

  00a6f	8b 85 88 00 00
	00		 mov	 eax, DWORD PTR v_segtbllen$[rbp]
  00a75	ff c0		 inc	 eax
  00a77	6b c0 40	 imul	 eax, eax, 64		; 00000040H
  00a7a	8b 4d 78	 mov	 ecx, DWORD PTR v_sto$[rbp]
  00a7d	03 c8		 add	 ecx, eax
  00a7f	8b c1		 mov	 eax, ecx
  00a81	3b 85 a0 00 00
	00		 cmp	 eax, DWORD PTR vmsize$[rbp]
  00a87	76 6d		 jbe	 SHORT $LN39@ecpsvm_dol

; 4442 :     {
; 4443 :         DEBUG_SASSISTX(LRA,WRMSG(HHC90000, "D", "SASSIST LRA Reject : Invalid STO in virtual CR1\n"));

  00a89	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  00a8f	c1 e8 02	 shr	 eax, 2
  00a92	83 e0 01	 and	 eax, 1
  00a95	85 c0		 test	 eax, eax
  00a97	74 53		 je	 SHORT $LN40@ecpsvm_dol
  00a99	b9 01 00 00 00	 mov	 ecx, 1
  00a9e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00aa4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175130
  00aab	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00ab0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175131
  00ab7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00abc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175132
  00ac3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ac8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00acd	41 b9 03 00 00
	00		 mov	 r9d, 3
  00ad3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175133
  00ada	ba 5b 11 00 00	 mov	 edx, 4443		; 0000115bH
  00adf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175134
  00ae6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN40@ecpsvm_dol:

; 4444 :         return(1);

  00aec	b8 01 00 00 00	 mov	 eax, 1
  00af1	e9 9f 0f 00 00	 jmp	 $LN1@ecpsvm_dol
$LN39@ecpsvm_dol:

; 4445 :     }
; 4446 : 
; 4447 :                       // cr0 bits 8, 9, 10, 11, 12   (bits 10,12 must always be zero)
; 4448 : #define P2KS64K  8    //          0  1   0   0   0  = page2k, segment64k
; 4449 : #define P4KS64K 16    //          1  0   0   0   0  = page4k, segment64k
; 4450 : #define P2KS1M  10    //          0  1   0   1   0  = page2k, segment1M
; 4451 : #define P4KS1M  18    //          1  0   0   1   0  = page4k, segment1M
; 4452 : 
; 4453 :     /* Get the paging architecture bits from V-CR0, then shift to bits 27-31.
; 4454 :        Then load the appropriate settings for the defined paging architecture.
; 4455 :        The shift amounts are 1 or 2 bits less for the page index and segment index,
; 4456 :        respectively.  This "pre-multiplies" the index result so it can be directly
; 4457 :        be used as an index into the start of the page or segment table.
; 4458 :     */
; 4459 :     cr0 = (cr0 & 0x00f80000) >> 19;

  00af6	8b 45 74	 mov	 eax, DWORD PTR cr0$[rbp]
  00af9	25 00 00 f8 00	 and	 eax, 16252928		; 00f80000H
  00afe	c1 e8 13	 shr	 eax, 19
  00b01	89 45 74	 mov	 DWORD PTR cr0$[rbp], eax

; 4460 :     switch (cr0)

  00b04	8b 45 74	 mov	 eax, DWORD PTR cr0$[rbp]
  00b07	89 45 5c	 mov	 DWORD PTR tv534[rbp], eax
  00b0a	83 7d 5c 08	 cmp	 DWORD PTR tv534[rbp], 8
  00b0e	74 1f		 je	 SHORT $LN41@ecpsvm_dol
  00b10	83 7d 5c 0a	 cmp	 DWORD PTR tv534[rbp], 10
  00b14	0f 84 b7 00 00
	00		 je	 $LN43@ecpsvm_dol
  00b1a	83 7d 5c 10	 cmp	 DWORD PTR tv534[rbp], 16
  00b1e	74 60		 je	 SHORT $LN42@ecpsvm_dol
  00b20	83 7d 5c 12	 cmp	 DWORD PTR tv534[rbp], 18
  00b24	0f 84 f8 00 00
	00		 je	 $LN44@ecpsvm_dol
  00b2a	e9 41 01 00 00	 jmp	 $LN45@ecpsvm_dol
$LN41@ecpsvm_dol:

; 4461 :     {
; 4462 :         case P2KS64K:
; 4463 :             pagshift = 10;          /* right shift amt to get page index from a virtual address        */

  00b2f	c7 45 64 0a 00
	00 00		 mov	 DWORD PTR pagshift$[rbp], 10

; 4464 :             pagmask = 0x0000f800;   /* mask to extract the page index from a virtual address           */

  00b36	c7 45 60 00 f8
	00 00		 mov	 DWORD PTR pagmask$[rbp], 63488 ; 0000f800H

; 4465 :             paginvmask = 0x0004;    /* mask to test page invalid bit                                   */

  00b3d	b8 04 00 00 00	 mov	 eax, 4
  00b42	66 89 45 04	 mov	 WORD PTR paginvmask$[rbp], ax

; 4466 :             pagfmtmask = 0x0002;    /* must-be-zero bits in a PTE to ensure valid format               */

  00b46	b8 02 00 00 00	 mov	 eax, 2
  00b4b	66 89 45 08	 mov	 WORD PTR pagfmtmask$[rbp], ax

; 4467 :             frameshift = 8;         /* left shift amt to left justify the page frame addr in a PTE     */

  00b4f	c7 45 3c 08 00
	00 00		 mov	 DWORD PTR frameshift$[rbp], 8

; 4468 :             framemask = 0xfff8;     /* mask to extract the page frame addr in a PTE                    */

  00b56	b8 f8 ff 00 00	 mov	 eax, 65528		; 0000fff8H
  00b5b	66 89 45 0c	 mov	 WORD PTR framemask$[rbp], ax

; 4469 :             bytemask = 0x000007ff;  /* mask to extract the byte index from a virtual address           */

  00b5f	c7 45 68 ff 07
	00 00		 mov	 DWORD PTR bytemask$[rbp], 2047 ; 000007ffH

; 4470 :             segshift = 14;          /* right shift amt to get segment index from a virt address        */

  00b66	c7 45 24 0e 00
	00 00		 mov	 DWORD PTR segshift$[rbp], 14

; 4471 :             segmask = 0x00ff0000;   /* mask to extract the segment index from a virtual address        */

  00b6d	c7 45 20 00 00
	ff 00		 mov	 DWORD PTR segmask$[rbp], 16711680 ; 00ff0000H

; 4472 :             seglenchk = TRUE;       /* indicates that a segment table length check is required         */

  00b74	c7 45 34 01 00
	00 00		 mov	 DWORD PTR seglenchk$[rbp], 1

; 4473 :             break;

  00b7b	e9 5d 01 00 00	 jmp	 $LN11@ecpsvm_dol
$LN42@ecpsvm_dol:

; 4474 : 
; 4475 :         case P4KS64K:
; 4476 :             pagshift = 11;

  00b80	c7 45 64 0b 00
	00 00		 mov	 DWORD PTR pagshift$[rbp], 11

; 4477 :             pagmask = 0x0000f000;

  00b87	c7 45 60 00 f0
	00 00		 mov	 DWORD PTR pagmask$[rbp], 61440 ; 0000f000H

; 4478 :             paginvmask = 0x0008;

  00b8e	b8 08 00 00 00	 mov	 eax, 8
  00b93	66 89 45 04	 mov	 WORD PTR paginvmask$[rbp], ax

; 4479 :             pagfmtmask = 0x0006;

  00b97	b8 06 00 00 00	 mov	 eax, 6
  00b9c	66 89 45 08	 mov	 WORD PTR pagfmtmask$[rbp], ax

; 4480 :             frameshift = 8;

  00ba0	c7 45 3c 08 00
	00 00		 mov	 DWORD PTR frameshift$[rbp], 8

; 4481 :             framemask = 0xfff0;

  00ba7	b8 f0 ff 00 00	 mov	 eax, 65520		; 0000fff0H
  00bac	66 89 45 0c	 mov	 WORD PTR framemask$[rbp], ax

; 4482 :             bytemask = 0x00000fff;

  00bb0	c7 45 68 ff 0f
	00 00		 mov	 DWORD PTR bytemask$[rbp], 4095 ; 00000fffH

; 4483 :             segshift = 14;

  00bb7	c7 45 24 0e 00
	00 00		 mov	 DWORD PTR segshift$[rbp], 14

; 4484 :             segmask = 0x00ff0000;

  00bbe	c7 45 20 00 00
	ff 00		 mov	 DWORD PTR segmask$[rbp], 16711680 ; 00ff0000H

; 4485 :             seglenchk = TRUE;

  00bc5	c7 45 34 01 00
	00 00		 mov	 DWORD PTR seglenchk$[rbp], 1

; 4486 :             break;

  00bcc	e9 0c 01 00 00	 jmp	 $LN11@ecpsvm_dol
$LN43@ecpsvm_dol:

; 4487 : 
; 4488 :         case P2KS1M:
; 4489 :             pagshift = 10;

  00bd1	c7 45 64 0a 00
	00 00		 mov	 DWORD PTR pagshift$[rbp], 10

; 4490 :             pagmask = 0x0000f800;

  00bd8	c7 45 60 00 f8
	00 00		 mov	 DWORD PTR pagmask$[rbp], 63488 ; 0000f800H

; 4491 :             paginvmask = 0x0004;

  00bdf	b8 04 00 00 00	 mov	 eax, 4
  00be4	66 89 45 04	 mov	 WORD PTR paginvmask$[rbp], ax

; 4492 :             pagfmtmask = 0x0002;

  00be8	b8 02 00 00 00	 mov	 eax, 2
  00bed	66 89 45 08	 mov	 WORD PTR pagfmtmask$[rbp], ax

; 4493 :             frameshift = 8;

  00bf1	c7 45 3c 08 00
	00 00		 mov	 DWORD PTR frameshift$[rbp], 8

; 4494 :             framemask = 0xfff8;

  00bf8	b8 f8 ff 00 00	 mov	 eax, 65528		; 0000fff8H
  00bfd	66 89 45 0c	 mov	 WORD PTR framemask$[rbp], ax

; 4495 :             bytemask = 0x000007ff;

  00c01	c7 45 68 ff 07
	00 00		 mov	 DWORD PTR bytemask$[rbp], 2047 ; 000007ffH

; 4496 :             segshift = 18;

  00c08	c7 45 24 12 00
	00 00		 mov	 DWORD PTR segshift$[rbp], 18

; 4497 :             segmask = 0x00f00000;

  00c0f	c7 45 20 00 00
	f0 00		 mov	 DWORD PTR segmask$[rbp], 15728640 ; 00f00000H

; 4498 :             seglenchk = FALSE;

  00c16	c7 45 34 00 00
	00 00		 mov	 DWORD PTR seglenchk$[rbp], 0

; 4499 :             break;

  00c1d	e9 bb 00 00 00	 jmp	 $LN11@ecpsvm_dol
$LN44@ecpsvm_dol:

; 4500 : 
; 4501 :         case P4KS1M:
; 4502 :             pagshift = 11;

  00c22	c7 45 64 0b 00
	00 00		 mov	 DWORD PTR pagshift$[rbp], 11

; 4503 :             pagmask = 0x0000f000;

  00c29	c7 45 60 00 f0
	00 00		 mov	 DWORD PTR pagmask$[rbp], 61440 ; 0000f000H

; 4504 :             paginvmask = 0x0008;

  00c30	b8 08 00 00 00	 mov	 eax, 8
  00c35	66 89 45 04	 mov	 WORD PTR paginvmask$[rbp], ax

; 4505 :             pagfmtmask = 0x0006;

  00c39	b8 06 00 00 00	 mov	 eax, 6
  00c3e	66 89 45 08	 mov	 WORD PTR pagfmtmask$[rbp], ax

; 4506 :             frameshift = 8;

  00c42	c7 45 3c 08 00
	00 00		 mov	 DWORD PTR frameshift$[rbp], 8

; 4507 :             framemask = 0xfff0;

  00c49	b8 f0 ff 00 00	 mov	 eax, 65520		; 0000fff0H
  00c4e	66 89 45 0c	 mov	 WORD PTR framemask$[rbp], ax

; 4508 :             bytemask = 0x00000fff;

  00c52	c7 45 68 ff 0f
	00 00		 mov	 DWORD PTR bytemask$[rbp], 4095 ; 00000fffH

; 4509 :             segshift = 18;

  00c59	c7 45 24 12 00
	00 00		 mov	 DWORD PTR segshift$[rbp], 18

; 4510 :             segmask = 0x00f00000;

  00c60	c7 45 20 00 00
	f0 00		 mov	 DWORD PTR segmask$[rbp], 15728640 ; 00f00000H

; 4511 :             seglenchk = FALSE;

  00c67	c7 45 34 00 00
	00 00		 mov	 DWORD PTR seglenchk$[rbp], 0

; 4512 :             break;

  00c6e	eb 6d		 jmp	 SHORT $LN11@ecpsvm_dol
$LN45@ecpsvm_dol:

; 4513 : 
; 4514 :         /* Bad architecture bits in cr0; let CP handle this LRA */
; 4515 :         default:
; 4516 :             DEBUG_SASSISTX(LRA,WRMSG(HHC90000, "D", "SASSIST LRA Reject : Invalid page/segment bits in virtual CR0\n"));

  00c70	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  00c76	c1 e8 02	 shr	 eax, 2
  00c79	83 e0 01	 and	 eax, 1
  00c7c	85 c0		 test	 eax, eax
  00c7e	74 53		 je	 SHORT $LN46@ecpsvm_dol
  00c80	b9 01 00 00 00	 mov	 ecx, 1
  00c85	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c8b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175141
  00c92	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00c97	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175142
  00c9e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ca3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175143
  00caa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00caf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00cb4	41 b9 03 00 00
	00		 mov	 r9d, 3
  00cba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175144
  00cc1	ba a4 11 00 00	 mov	 edx, 4516		; 000011a4H
  00cc6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175145
  00ccd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN46@ecpsvm_dol:

; 4517 :             return(1);

  00cd3	b8 01 00 00 00	 mov	 eax, 1
  00cd8	e9 b8 0d 00 00	 jmp	 $LN1@ecpsvm_dol
$LN11@ecpsvm_dol:

; 4518 :             break;
; 4519 :     }
; 4520 : 
; 4521 :     /* For 64K segments only, we need to validate that the segment table length in virtual CR1
; 4522 :        is not less than the segment index of bits 8-11 of the LRA second operand address (i.e.,
; 4523 :        does the virtual address exceed the tables?).  If it is less, then we need to return cc=3
; 4524 :        and also return in register operand 1 the address of the virtual STE that would have been
; 4525 :        referred to had the length violation not occurred.
; 4526 :        Per LOAD REAL ADDRESS assist step #6, documented in GA22-7074-0.
; 4527 :     */
; 4528 :     if(seglenchk)

  00cdd	83 7d 34 00	 cmp	 DWORD PTR seglenchk$[rbp], 0
  00ce1	0f 84 2b 01 00
	00		 je	 $LN47@ecpsvm_dol

; 4529 :     {
; 4530 :         lenindex = (effective_addr2 & 0x00f00000) >> 20;

  00ce7	8b 84 24 88 64
	01 00		 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00cee	25 00 00 f0 00	 and	 eax, 15728640		; 00f00000H
  00cf3	c1 e8 14	 shr	 eax, 20
  00cf6	89 45 10	 mov	 DWORD PTR lenindex$[rbp], eax

; 4531 :         if(v_segtbllen < lenindex)

  00cf9	8b 45 10	 mov	 eax, DWORD PTR lenindex$[rbp]
  00cfc	39 85 88 00 00
	00		 cmp	 DWORD PTR v_segtbllen$[rbp], eax
  00d02	0f 83 0a 01 00
	00		 jae	 $LN48@ecpsvm_dol

; 4532 :         {
; 4533 :             offset_ste = (effective_addr2 & segmask) >> segshift;

  00d08	8b 45 20	 mov	 eax, DWORD PTR segmask$[rbp]
  00d0b	8b 8c 24 88 64
	01 00		 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00d12	23 c8		 and	 ecx, eax
  00d14	8b c1		 mov	 eax, ecx
  00d16	8b 4d 24	 mov	 ecx, DWORD PTR segshift$[rbp]
  00d19	d3 e8		 shr	 eax, cl
  00d1b	89 45 28	 mov	 DWORD PTR offset_ste$[rbp], eax

; 4534 :             regs->GR_L(r1) = v_sto + offset_ste;

  00d1e	8b 45 28	 mov	 eax, DWORD PTR offset_ste$[rbp]
  00d21	8b 4d 78	 mov	 ecx, DWORD PTR v_sto$[rbp]
  00d24	03 c8		 add	 ecx, eax
  00d26	8b c1		 mov	 eax, ecx
  00d28	48 63 8c 24 78
	64 01 00	 movsxd	 rcx, DWORD PTR r1$[rsp]
  00d30	48 8b 94 24 70
	64 01 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00d38	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 4535 :             regs->psw.cc = 3;

  00d3f	48 8b 84 24 70
	64 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  00d47	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3

; 4536 :             DEBUG_SASSISTX(LRA,MSGBUF(buf, "SASSIST LRA Complete: CC=3; Operands r1=%8.8X, d2(b2)=%8.8X\n",regs->GR_L(r1),effective_addr2));

  00d4b	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  00d51	c1 e8 02	 shr	 eax, 2
  00d54	83 e0 01	 and	 eax, 1
  00d57	85 c0		 test	 eax, eax
  00d59	74 3c		 je	 SHORT $LN49@ecpsvm_dol
  00d5b	48 63 84 24 78
	64 01 00	 movsxd	 rax, DWORD PTR r1$[rsp]
  00d63	8b 8c 24 88 64
	01 00		 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00d6a	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00d6e	48 8b 8c 24 70
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00d76	44 8b 8c c1 80
	02 00 00	 mov	 r9d, DWORD PTR [rcx+rax*8+640]
  00d7e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175149
  00d85	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00d8a	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00d91	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN49@ecpsvm_dol:

; 4537 :             DEBUG_SASSISTX(LRA,WRMSG(HHC90000, "D", buf));

  00d97	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  00d9d	c1 e8 02	 shr	 eax, 2
  00da0	83 e0 01	 and	 eax, 1
  00da3	85 c0		 test	 eax, eax
  00da5	74 53		 je	 SHORT $LN50@ecpsvm_dol
  00da7	b9 01 00 00 00	 mov	 ecx, 1
  00dac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00db2	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00db9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00dbe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175151
  00dc5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00dca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175152
  00dd1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00dd6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ddb	41 b9 03 00 00
	00		 mov	 r9d, 3
  00de1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175153
  00de8	ba b9 11 00 00	 mov	 edx, 4537		; 000011b9H
  00ded	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175154
  00df4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN50@ecpsvm_dol:

; 4538 :             SASSIST_HIT(LRA);

  00dfa	48 8b 05 70 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+368
  00e01	48 ff c0	 inc	 rax
  00e04	48 89 05 70 01
	00 00		 mov	 QWORD PTR ecpsvm_sastats+368, rax

; 4539 :             return(0);

  00e0b	33 c0		 xor	 eax, eax
  00e0d	e9 83 0c 00 00	 jmp	 $LN1@ecpsvm_dol
$LN48@ecpsvm_dol:
$LN47@ecpsvm_dol:

; 4540 :         }
; 4541 :     }
; 4542 : 
; 4543 :     /* Compute the virtual address of the virtual STE derived from the 2nd operand address */
; 4544 :     offset_ste = (effective_addr2 & segmask) >> segshift;

  00e12	8b 45 20	 mov	 eax, DWORD PTR segmask$[rbp]
  00e15	8b 8c 24 88 64
	01 00		 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  00e1c	23 c8		 and	 ecx, eax
  00e1e	8b c1		 mov	 eax, ecx
  00e20	8b 4d 24	 mov	 ecx, DWORD PTR segshift$[rbp]
  00e23	d3 e8		 shr	 eax, cl
  00e25	89 45 28	 mov	 DWORD PTR offset_ste$[rbp], eax

; 4545 :     v_ste_ptr = v_sto + offset_ste;

  00e28	8b 45 28	 mov	 eax, DWORD PTR offset_ste$[rbp]
  00e2b	8b 4d 78	 mov	 ecx, DWORD PTR v_sto$[rbp]
  00e2e	03 c8		 add	 ecx, eax
  00e30	8b c1		 mov	 eax, ecx
  00e32	89 45 30	 mov	 DWORD PTR v_ste_ptr$[rbp], eax

; 4546 : 
; 4547 :     /* For 64K segments only, we need to validate that the segment table length in MICRSEG
; 4548 :        is not less than the segment index of bits 8-11 of the virtual STE address.  If
; 4549 :        it is less, then we need let CP handle this LRA (virtual STE address is beyond the tables).
; 4550 :        Per LOAD REAL ADDRESS assist step #7, documented in GA22-7074-0.
; 4551 :     */
; 4552 :     if(seglenchk)

  00e35	83 7d 34 00	 cmp	 DWORD PTR seglenchk$[rbp], 0
  00e39	0f 84 86 00 00
	00		 je	 $LN51@ecpsvm_dol

; 4553 :     {
; 4554 :         lenindex = (v_ste_ptr & 0x00f00000) >> 20;

  00e3f	8b 45 30	 mov	 eax, DWORD PTR v_ste_ptr$[rbp]
  00e42	25 00 00 f0 00	 and	 eax, 15728640		; 00f00000H
  00e47	c1 e8 14	 shr	 eax, 20
  00e4a	89 45 10	 mov	 DWORD PTR lenindex$[rbp], eax

; 4555 :         if(r_segtbllen < lenindex)

  00e4d	8b 45 10	 mov	 eax, DWORD PTR lenindex$[rbp]
  00e50	39 85 94 00 00
	00		 cmp	 DWORD PTR r_segtbllen$[rbp], eax
  00e56	73 6d		 jae	 SHORT $LN52@ecpsvm_dol

; 4556 :         {
; 4557 :             DEBUG_SASSISTX(LRA,WRMSG(HHC90000, "D", "SASSIST LRA Reject : V-STE address exceeds real segment table length\n"));

  00e58	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  00e5e	c1 e8 02	 shr	 eax, 2
  00e61	83 e0 01	 and	 eax, 1
  00e64	85 c0		 test	 eax, eax
  00e66	74 53		 je	 SHORT $LN53@ecpsvm_dol
  00e68	b9 01 00 00 00	 mov	 ecx, 1
  00e6d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00e73	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175158
  00e7a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00e7f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175159
  00e86	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00e8b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175160
  00e92	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00e97	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e9c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00ea2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175161
  00ea9	ba cd 11 00 00	 mov	 edx, 4557		; 000011cdH
  00eae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175162
  00eb5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN53@ecpsvm_dol:

; 4558 :             return(1);

  00ebb	b8 01 00 00 00	 mov	 eax, 1
  00ec0	e9 d0 0b 00 00	 jmp	 $LN1@ecpsvm_dol
$LN52@ecpsvm_dol:
$LN51@ecpsvm_dol:

; 4559 :         }
; 4560 :     }
; 4561 : 
; 4562 :     /* Compute the real address of the real STE that tranlates the virtual STE address. */
; 4563 :     offset_ste = (v_ste_ptr & segmask) >> segshift;

  00ec5	8b 45 20	 mov	 eax, DWORD PTR segmask$[rbp]
  00ec8	8b 4d 30	 mov	 ecx, DWORD PTR v_ste_ptr$[rbp]
  00ecb	23 c8		 and	 ecx, eax
  00ecd	8b c1		 mov	 eax, ecx
  00ecf	8b 4d 24	 mov	 ecx, DWORD PTR segshift$[rbp]
  00ed2	d3 e8		 shr	 eax, cl
  00ed4	89 45 28	 mov	 DWORD PTR offset_ste$[rbp], eax

; 4564 :     r_ste_ptr = r_sto + offset_ste;

  00ed7	8b 45 28	 mov	 eax, DWORD PTR offset_ste$[rbp]
  00eda	8b 8d 98 00 00
	00		 mov	 ecx, DWORD PTR r_sto$[rbp]
  00ee0	03 c8		 add	 ecx, eax
  00ee2	8b c1		 mov	 eax, ecx
  00ee4	89 45 44	 mov	 DWORD PTR r_ste_ptr$[rbp], eax

; 4565 : 
; 4566 :     /* Get the real segment table entry that points to the segment that contains the V-STE.
; 4567 :        Let CP handle if "must-be-zero" bits are set (including the segment invalid bit).
; 4568 :     */
; 4569 :     r_ste = EVM_L(r_ste_ptr);

  00ee7	8b 45 44	 mov	 eax, DWORD PTR r_ste_ptr$[rbp]
  00eea	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00eef	4c 8b 84 24 70
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  00ef7	ba fe ff ff ff	 mov	 edx, -2
  00efc	8b c8		 mov	 ecx, eax
  00efe	e8 00 00 00 00	 call	 s370_vfetch4
  00f03	89 45 18	 mov	 DWORD PTR r_ste$[rbp], eax

; 4570 :     if (r_ste & 0x0F000007)

  00f06	8b 45 18	 mov	 eax, DWORD PTR r_ste$[rbp]
  00f09	25 07 00 00 0f	 and	 eax, 251658247		; 0f000007H
  00f0e	85 c0		 test	 eax, eax
  00f10	0f 84 a1 00 00
	00		 je	 $LN54@ecpsvm_dol

; 4571 :     {
; 4572 :         DEBUG_SASSISTX(LRA,MSGBUF(buf, "SASSIST LRA Reject : Real STE at %6.6X is invalid; STE=%8.8X\n",r_ste_ptr,r_ste));

  00f16	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  00f1c	c1 e8 02	 shr	 eax, 2
  00f1f	83 e0 01	 and	 eax, 1
  00f22	85 c0		 test	 eax, eax
  00f24	74 24		 je	 SHORT $LN55@ecpsvm_dol
  00f26	8b 45 18	 mov	 eax, DWORD PTR r_ste$[rbp]
  00f29	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00f2d	44 8b 4d 44	 mov	 r9d, DWORD PTR r_ste_ptr$[rbp]
  00f31	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175165
  00f38	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00f3d	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00f44	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN55@ecpsvm_dol:

; 4573 :         DEBUG_SASSISTX(LRA,WRMSG(HHC90000, "D", buf));

  00f4a	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  00f50	c1 e8 02	 shr	 eax, 2
  00f53	83 e0 01	 and	 eax, 1
  00f56	85 c0		 test	 eax, eax
  00f58	74 53		 je	 SHORT $LN56@ecpsvm_dol
  00f5a	b9 01 00 00 00	 mov	 ecx, 1
  00f5f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00f65	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00f6c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00f71	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175167
  00f78	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00f7d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175168
  00f84	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00f89	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00f8e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00f94	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175169
  00f9b	ba dd 11 00 00	 mov	 edx, 4573		; 000011ddH
  00fa0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175170
  00fa7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN56@ecpsvm_dol:

; 4574 :         return(1);

  00fad	b8 01 00 00 00	 mov	 eax, 1
  00fb2	e9 de 0a 00 00	 jmp	 $LN1@ecpsvm_dol
$LN54@ecpsvm_dol:

; 4575 :     }
; 4576 : 
; 4577 :     /* Get the length of the real page table from the real STE.  Ensure that the leftmost 4 bits
; 4578 :        of the real page index of the virtual STE address is not greater than the real page table
; 4579 :        length; if so, it's CP's problem.  Use hardcoded shift of 12 to compute real pagindex
; 4580 :        because CP's page frames are always 4K.
; 4581 :     */
; 4582 :     lenindex = (r_ste & 0xF0000000) >> 28;

  00fb7	8b 45 18	 mov	 eax, DWORD PTR r_ste$[rbp]
  00fba	25 00 00 00 f0	 and	 eax, -268435456		; f0000000H
  00fbf	c1 e8 1c	 shr	 eax, 28
  00fc2	89 45 10	 mov	 DWORD PTR lenindex$[rbp], eax

; 4583 :     pagindex = (v_ste_ptr & 0x0000F000) >> 12;

  00fc5	8b 45 30	 mov	 eax, DWORD PTR v_ste_ptr$[rbp]
  00fc8	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  00fcd	c1 e8 0c	 shr	 eax, 12
  00fd0	89 45 2c	 mov	 DWORD PTR pagindex$[rbp], eax

; 4584 :     if (lenindex < pagindex)

  00fd3	8b 45 2c	 mov	 eax, DWORD PTR pagindex$[rbp]
  00fd6	39 45 10	 cmp	 DWORD PTR lenindex$[rbp], eax
  00fd9	73 6d		 jae	 SHORT $LN57@ecpsvm_dol

; 4585 :     {
; 4586 :         DEBUG_SASSISTX(LRA,WRMSG(HHC90000, "D", "SASSIST LRA Reject : V-STE address exceeds real page table length\n"));

  00fdb	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  00fe1	c1 e8 02	 shr	 eax, 2
  00fe4	83 e0 01	 and	 eax, 1
  00fe7	85 c0		 test	 eax, eax
  00fe9	74 53		 je	 SHORT $LN58@ecpsvm_dol
  00feb	b9 01 00 00 00	 mov	 ecx, 1
  00ff0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00ff6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175173
  00ffd	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01002	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175174
  01009	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0100e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175175
  01015	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0101a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0101f	41 b9 03 00 00
	00		 mov	 r9d, 3
  01025	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175176
  0102c	ba ea 11 00 00	 mov	 edx, 4586		; 000011eaH
  01031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175177
  01038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN58@ecpsvm_dol:

; 4587 :         return(1);

  0103e	b8 01 00 00 00	 mov	 eax, 1
  01043	e9 4d 0a 00 00	 jmp	 $LN1@ecpsvm_dol
$LN57@ecpsvm_dol:

; 4588 :     }
; 4589 : 
; 4590 :     /* Compute the real page table origin for this real segment.  Fetch the real PTE and
; 4591 :        exit to CP if it is in an invalid format or if the page-invalid bit is set.
; 4592 :     */
; 4593 :     r_pto = (r_ste & 0x00FFFFF8);

  01048	8b 45 18	 mov	 eax, DWORD PTR r_ste$[rbp]
  0104b	25 f8 ff ff 00	 and	 eax, 16777208		; 00fffff8H
  01050	89 45 7c	 mov	 DWORD PTR r_pto$[rbp], eax

; 4594 :     r_pte_ptr = r_pto + pagindex * 2;

  01053	8b 45 7c	 mov	 eax, DWORD PTR r_pto$[rbp]
  01056	8b 4d 2c	 mov	 ecx, DWORD PTR pagindex$[rbp]
  01059	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  0105c	89 45 48	 mov	 DWORD PTR r_pte_ptr$[rbp], eax

; 4595 :     r_pte = EVM_LH(r_pte_ptr);

  0105f	8b 45 48	 mov	 eax, DWORD PTR r_pte_ptr$[rbp]
  01062	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01067	4c 8b 84 24 70
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  0106f	ba fe ff ff ff	 mov	 edx, -2
  01074	8b c8		 mov	 ecx, eax
  01076	e8 00 00 00 00	 call	 s370_vfetch2
  0107b	66 89 45 00	 mov	 WORD PTR r_pte$[rbp], ax

; 4596 :     if (r_pte & (paginvmask | pagfmtmask))

  0107f	0f b7 45 00	 movzx	 eax, WORD PTR r_pte$[rbp]
  01083	0f b7 4d 04	 movzx	 ecx, WORD PTR paginvmask$[rbp]
  01087	0f b7 55 08	 movzx	 edx, WORD PTR pagfmtmask$[rbp]
  0108b	0b ca		 or	 ecx, edx
  0108d	23 c1		 and	 eax, ecx
  0108f	85 c0		 test	 eax, eax
  01091	0f 84 a2 00 00
	00		 je	 $LN59@ecpsvm_dol

; 4597 :     {
; 4598 :         DEBUG_SASSISTX(LRA,MSGBUF(buf, "SASSIST LRA Reject : Real PTE at %6.6X is invalid; PTE=%4.4X\n",r_pte_ptr,r_pte));

  01097	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  0109d	c1 e8 02	 shr	 eax, 2
  010a0	83 e0 01	 and	 eax, 1
  010a3	85 c0		 test	 eax, eax
  010a5	74 25		 je	 SHORT $LN60@ecpsvm_dol
  010a7	0f b7 45 00	 movzx	 eax, WORD PTR r_pte$[rbp]
  010ab	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  010af	44 8b 4d 48	 mov	 r9d, DWORD PTR r_pte_ptr$[rbp]
  010b3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175180
  010ba	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  010bf	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  010c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN60@ecpsvm_dol:

; 4599 :         DEBUG_SASSISTX(LRA,WRMSG(HHC90000, "D", buf));

  010cc	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  010d2	c1 e8 02	 shr	 eax, 2
  010d5	83 e0 01	 and	 eax, 1
  010d8	85 c0		 test	 eax, eax
  010da	74 53		 je	 SHORT $LN61@ecpsvm_dol
  010dc	b9 01 00 00 00	 mov	 ecx, 1
  010e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  010e7	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  010ee	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  010f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175182
  010fa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  010ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175183
  01106	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0110b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01110	41 b9 03 00 00
	00		 mov	 r9d, 3
  01116	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175184
  0111d	ba f7 11 00 00	 mov	 edx, 4599		; 000011f7H
  01122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175185
  01129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN61@ecpsvm_dol:

; 4600 :         return(1);

  0112f	b8 01 00 00 00	 mov	 eax, 1
  01134	e9 5c 09 00 00	 jmp	 $LN1@ecpsvm_dol
$LN59@ecpsvm_dol:

; 4601 :     }
; 4602 : 
; 4603 :     /* r_pte now contains the page table entry containing the real address of the page
; 4604 :        frame containing the virtual STE.  Compute the real address of the virtual STE
; 4605 :        entry pointed to by v_ste_ptr and fetch the virtual STE entry
; 4606 :     */
; 4607 :     frame_addr = (U32) ((r_pte & framemask) << frameshift);

  01139	0f b7 45 00	 movzx	 eax, WORD PTR r_pte$[rbp]
  0113d	0f b7 4d 0c	 movzx	 ecx, WORD PTR framemask$[rbp]
  01141	23 c1		 and	 eax, ecx
  01143	8b 4d 3c	 mov	 ecx, DWORD PTR frameshift$[rbp]
  01146	d3 e0		 shl	 eax, cl
  01148	89 45 50	 mov	 DWORD PTR frame_addr$[rbp], eax

; 4608 :     byte_addr  = v_ste_ptr & 0x0FFF;

  0114b	8b 45 30	 mov	 eax, DWORD PTR v_ste_ptr$[rbp]
  0114e	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  01153	89 45 4c	 mov	 DWORD PTR byte_addr$[rbp], eax

; 4609 :     v_ste = EVM_L(frame_addr + byte_addr);

  01156	8b 45 4c	 mov	 eax, DWORD PTR byte_addr$[rbp]
  01159	8b 4d 50	 mov	 ecx, DWORD PTR frame_addr$[rbp]
  0115c	03 c8		 add	 ecx, eax
  0115e	8b c1		 mov	 eax, ecx
  01160	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01165	4c 8b 84 24 70
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  0116d	ba fe ff ff ff	 mov	 edx, -2
  01172	8b c8		 mov	 ecx, eax
  01174	e8 00 00 00 00	 call	 s370_vfetch4
  01179	89 45 58	 mov	 DWORD PTR v_ste$[rbp], eax

; 4610 : 
; 4611 :     /* Validate the virtual STE entry.  If the segment invalid bit is set, place the
; 4612 :        virtual address of this virtual STE in register operand 1 and return with the
; 4613 :        LRA completed and psw cc=1.  If the STE format is incorrect, return to CP to handle.
; 4614 :     */
; 4615 :     if (v_ste & 0x00000001)

  0117c	8b 45 58	 mov	 eax, DWORD PTR v_ste$[rbp]
  0117f	83 e0 01	 and	 eax, 1
  01182	85 c0		 test	 eax, eax
  01184	0f 84 ed 00 00
	00		 je	 $LN62@ecpsvm_dol

; 4616 :     {
; 4617 :         regs->GR_L(r1) = v_ste_ptr;

  0118a	48 63 84 24 78
	64 01 00	 movsxd	 rax, DWORD PTR r1$[rsp]
  01192	48 8b 8c 24 70
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0119a	8b 55 30	 mov	 edx, DWORD PTR v_ste_ptr$[rbp]
  0119d	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 4618 :         regs->psw.cc = 1;

  011a4	48 8b 84 24 70
	64 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  011ac	c6 40 7c 01	 mov	 BYTE PTR [rax+124], 1

; 4619 :         DEBUG_SASSISTX(LRA,MSGBUF(buf, "SASSIST LRA Complete: CC=1; Operands r1=%8.8X, d2(b2)=%8.8X\n",regs->GR_L(r1),effective_addr2));

  011b0	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  011b6	c1 e8 02	 shr	 eax, 2
  011b9	83 e0 01	 and	 eax, 1
  011bc	85 c0		 test	 eax, eax
  011be	74 3c		 je	 SHORT $LN63@ecpsvm_dol
  011c0	48 63 84 24 78
	64 01 00	 movsxd	 rax, DWORD PTR r1$[rsp]
  011c8	8b 8c 24 88 64
	01 00		 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  011cf	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  011d3	48 8b 8c 24 70
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  011db	44 8b 8c c1 80
	02 00 00	 mov	 r9d, DWORD PTR [rcx+rax*8+640]
  011e3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175188
  011ea	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  011ef	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  011f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN63@ecpsvm_dol:

; 4620 :         DEBUG_SASSISTX(LRA,WRMSG(HHC90000, "D", buf));

  011fc	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  01202	c1 e8 02	 shr	 eax, 2
  01205	83 e0 01	 and	 eax, 1
  01208	85 c0		 test	 eax, eax
  0120a	74 53		 je	 SHORT $LN64@ecpsvm_dol
  0120c	b9 01 00 00 00	 mov	 ecx, 1
  01211	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01217	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0121e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01223	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175190
  0122a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0122f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175191
  01236	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0123b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01240	41 b9 03 00 00
	00		 mov	 r9d, 3
  01246	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175192
  0124d	ba 0c 12 00 00	 mov	 edx, 4620		; 0000120cH
  01252	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175193
  01259	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN64@ecpsvm_dol:

; 4621 :         SASSIST_HIT(LRA);

  0125f	48 8b 05 70 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+368
  01266	48 ff c0	 inc	 rax
  01269	48 89 05 70 01
	00 00		 mov	 QWORD PTR ecpsvm_sastats+368, rax

; 4622 :         return(0);

  01270	33 c0		 xor	 eax, eax
  01272	e9 1e 08 00 00	 jmp	 $LN1@ecpsvm_dol
$LN62@ecpsvm_dol:

; 4623 :     }
; 4624 :     if (v_ste & 0x0F000006)

  01277	8b 45 58	 mov	 eax, DWORD PTR v_ste$[rbp]
  0127a	25 06 00 00 0f	 and	 eax, 251658246		; 0f000006H
  0127f	85 c0		 test	 eax, eax
  01281	0f 84 a1 00 00
	00		 je	 $LN65@ecpsvm_dol

; 4625 :     {
; 4626 :         DEBUG_SASSISTX(LRA,MSGBUF(buf, "SASSIST LRA Reject : Virtual STE at %6.6X is invalid; STE=%8.8X\n",v_ste_ptr,v_ste));

  01287	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  0128d	c1 e8 02	 shr	 eax, 2
  01290	83 e0 01	 and	 eax, 1
  01293	85 c0		 test	 eax, eax
  01295	74 24		 je	 SHORT $LN66@ecpsvm_dol
  01297	8b 45 58	 mov	 eax, DWORD PTR v_ste$[rbp]
  0129a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0129e	44 8b 4d 30	 mov	 r9d, DWORD PTR v_ste_ptr$[rbp]
  012a2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175196
  012a9	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  012ae	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  012b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN66@ecpsvm_dol:

; 4627 :         DEBUG_SASSISTX(LRA,WRMSG(HHC90000, "D", buf));

  012bb	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  012c1	c1 e8 02	 shr	 eax, 2
  012c4	83 e0 01	 and	 eax, 1
  012c7	85 c0		 test	 eax, eax
  012c9	74 53		 je	 SHORT $LN67@ecpsvm_dol
  012cb	b9 01 00 00 00	 mov	 ecx, 1
  012d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  012d6	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  012dd	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  012e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175198
  012e9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  012ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175199
  012f5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  012fa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  012ff	41 b9 03 00 00
	00		 mov	 r9d, 3
  01305	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175200
  0130c	ba 13 12 00 00	 mov	 edx, 4627		; 00001213H
  01311	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175201
  01318	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN67@ecpsvm_dol:

; 4628 :         return(1);

  0131e	b8 01 00 00 00	 mov	 eax, 1
  01323	e9 6d 07 00 00	 jmp	 $LN1@ecpsvm_dol
$LN65@ecpsvm_dol:

; 4629 :     }
; 4630 : 
; 4631 :     /* Get the length of the virtual page table from the virtual STE.  Ensure that the leftmost 4 bits
; 4632 :        of the virtual page index of the LRA second operand address is not greater than the virtual
; 4633 :        page table length; if it is less, then we need to return cc=3 and also return in register
; 4634 :        operand 1, the address of the virtual PTE that would have been referred to had the length
; 4635 :        violation not occurred.  Per LOAD REAL ADDRESS assist step #15, documented in GA22-7074-0.
; 4636 :     */
; 4637 :     lenindex = (v_ste & 0xF0000000) >> 28;

  01328	8b 45 58	 mov	 eax, DWORD PTR v_ste$[rbp]
  0132b	25 00 00 00 f0	 and	 eax, -268435456		; f0000000H
  01330	c1 e8 1c	 shr	 eax, 28
  01333	89 45 10	 mov	 DWORD PTR lenindex$[rbp], eax

; 4638 :     pagindex = (effective_addr2 & 0x0000F000) >> 12;

  01336	8b 84 24 88 64
	01 00		 mov	 eax, DWORD PTR effective_addr2$[rsp]
  0133d	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  01342	c1 e8 0c	 shr	 eax, 12
  01345	89 45 2c	 mov	 DWORD PTR pagindex$[rbp], eax

; 4639 :     v_pto = v_ste & 0x00fffff8;

  01348	8b 45 58	 mov	 eax, DWORD PTR v_ste$[rbp]
  0134b	25 f8 ff ff 00	 and	 eax, 16777208		; 00fffff8H
  01350	89 85 90 00 00
	00		 mov	 DWORD PTR v_pto$[rbp], eax

; 4640 :     offset_pte = (effective_addr2 & pagmask) >> pagshift;

  01356	8b 45 60	 mov	 eax, DWORD PTR pagmask$[rbp]
  01359	8b 8c 24 88 64
	01 00		 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  01360	23 c8		 and	 ecx, eax
  01362	8b c1		 mov	 eax, ecx
  01364	8b 4d 64	 mov	 ecx, DWORD PTR pagshift$[rbp]
  01367	d3 e8		 shr	 eax, cl
  01369	89 85 8c 00 00
	00		 mov	 DWORD PTR offset_pte$[rbp], eax

; 4641 :     if (lenindex < pagindex)

  0136f	8b 45 2c	 mov	 eax, DWORD PTR pagindex$[rbp]
  01372	39 45 10	 cmp	 DWORD PTR lenindex$[rbp], eax
  01375	0f 83 fa 00 00
	00		 jae	 $LN68@ecpsvm_dol

; 4642 :     {
; 4643 :             regs->GR_L(r1) = v_pto + offset_pte;

  0137b	8b 85 8c 00 00
	00		 mov	 eax, DWORD PTR offset_pte$[rbp]
  01381	8b 8d 90 00 00
	00		 mov	 ecx, DWORD PTR v_pto$[rbp]
  01387	03 c8		 add	 ecx, eax
  01389	8b c1		 mov	 eax, ecx
  0138b	48 63 8c 24 78
	64 01 00	 movsxd	 rcx, DWORD PTR r1$[rsp]
  01393	48 8b 94 24 70
	64 01 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0139b	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 4644 :             regs->psw.cc = 3;

  013a2	48 8b 84 24 70
	64 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  013aa	c6 40 7c 03	 mov	 BYTE PTR [rax+124], 3

; 4645 :             DEBUG_SASSISTX(LRA,MSGBUF(buf, "SASSIST LRA Complete: CC=3; Operands r1=%8.8X, d2(b2)=%8.8X\n",regs->GR_L(r1),effective_addr2));

  013ae	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  013b4	c1 e8 02	 shr	 eax, 2
  013b7	83 e0 01	 and	 eax, 1
  013ba	85 c0		 test	 eax, eax
  013bc	74 3c		 je	 SHORT $LN69@ecpsvm_dol
  013be	48 63 84 24 78
	64 01 00	 movsxd	 rax, DWORD PTR r1$[rsp]
  013c6	8b 8c 24 88 64
	01 00		 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  013cd	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  013d1	48 8b 8c 24 70
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  013d9	44 8b 8c c1 80
	02 00 00	 mov	 r9d, DWORD PTR [rcx+rax*8+640]
  013e1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175204
  013e8	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  013ed	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  013f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN69@ecpsvm_dol:

; 4646 :             DEBUG_SASSISTX(LRA,WRMSG(HHC90000, "D", buf));

  013fa	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  01400	c1 e8 02	 shr	 eax, 2
  01403	83 e0 01	 and	 eax, 1
  01406	85 c0		 test	 eax, eax
  01408	74 53		 je	 SHORT $LN70@ecpsvm_dol
  0140a	b9 01 00 00 00	 mov	 ecx, 1
  0140f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01415	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0141c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01421	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175206
  01428	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0142d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175207
  01434	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01439	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0143e	41 b9 03 00 00
	00		 mov	 r9d, 3
  01444	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175208
  0144b	ba 26 12 00 00	 mov	 edx, 4646		; 00001226H
  01450	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175209
  01457	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN70@ecpsvm_dol:

; 4647 :             SASSIST_HIT(LRA);

  0145d	48 8b 05 70 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+368
  01464	48 ff c0	 inc	 rax
  01467	48 89 05 70 01
	00 00		 mov	 QWORD PTR ecpsvm_sastats+368, rax

; 4648 :             return(0);

  0146e	33 c0		 xor	 eax, eax
  01470	e9 20 06 00 00	 jmp	 $LN1@ecpsvm_dol
$LN68@ecpsvm_dol:

; 4649 :     }
; 4650 : 
; 4651 :     /* Compute the virtual address of the virtual PTE derived from the virtual STE + virtual page index */
; 4652 :     v_pte_ptr = v_pto + offset_pte;

  01475	8b 85 8c 00 00
	00		 mov	 eax, DWORD PTR offset_pte$[rbp]
  0147b	8b 8d 90 00 00
	00		 mov	 ecx, DWORD PTR v_pto$[rbp]
  01481	03 c8		 add	 ecx, eax
  01483	8b c1		 mov	 eax, ecx
  01485	89 45 38	 mov	 DWORD PTR v_pte_ptr$[rbp], eax

; 4653 : 
; 4654 :     /* For 64K segments only, we need to validate that the segment table length in MICRSEG
; 4655 :        is not less than the segment index of bits 8-11 of the virtual PTE address.  If
; 4656 :        it is less, then we need let CP handle this LRA (virtual PTE address is beyond the tables).
; 4657 :        Per LOAD REAL ADDRESS assist step #16, documented in GA22-7074-0.
; 4658 :     */
; 4659 :     if(seglenchk)

  01488	83 7d 34 00	 cmp	 DWORD PTR seglenchk$[rbp], 0
  0148c	0f 84 86 00 00
	00		 je	 $LN71@ecpsvm_dol

; 4660 :     {
; 4661 :         lenindex = (v_pte_ptr & 0x00f00000) >> 20;

  01492	8b 45 38	 mov	 eax, DWORD PTR v_pte_ptr$[rbp]
  01495	25 00 00 f0 00	 and	 eax, 15728640		; 00f00000H
  0149a	c1 e8 14	 shr	 eax, 20
  0149d	89 45 10	 mov	 DWORD PTR lenindex$[rbp], eax

; 4662 :         if(r_segtbllen < lenindex)

  014a0	8b 45 10	 mov	 eax, DWORD PTR lenindex$[rbp]
  014a3	39 85 94 00 00
	00		 cmp	 DWORD PTR r_segtbllen$[rbp], eax
  014a9	73 6d		 jae	 SHORT $LN72@ecpsvm_dol

; 4663 :         {
; 4664 :             DEBUG_SASSISTX(LRA,WRMSG(HHC90000, "D", "SASSIST LRA Reject : V-PTE address exceeds real segment table length\n"));

  014ab	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  014b1	c1 e8 02	 shr	 eax, 2
  014b4	83 e0 01	 and	 eax, 1
  014b7	85 c0		 test	 eax, eax
  014b9	74 53		 je	 SHORT $LN73@ecpsvm_dol
  014bb	b9 01 00 00 00	 mov	 ecx, 1
  014c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  014c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175213
  014cd	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  014d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175214
  014d9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  014de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175215
  014e5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  014ea	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  014ef	41 b9 03 00 00
	00		 mov	 r9d, 3
  014f5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175216
  014fc	ba 38 12 00 00	 mov	 edx, 4664		; 00001238H
  01501	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175217
  01508	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN73@ecpsvm_dol:

; 4665 :             return(1);

  0150e	b8 01 00 00 00	 mov	 eax, 1
  01513	e9 7d 05 00 00	 jmp	 $LN1@ecpsvm_dol
$LN72@ecpsvm_dol:
$LN71@ecpsvm_dol:

; 4666 :         }
; 4667 :     }
; 4668 : 
; 4669 :     /* Compute the real address of the real STE that tranlates the virtual PTE address. */
; 4670 :     offset_ste = (v_pte_ptr & segmask) >> segshift;

  01518	8b 45 20	 mov	 eax, DWORD PTR segmask$[rbp]
  0151b	8b 4d 38	 mov	 ecx, DWORD PTR v_pte_ptr$[rbp]
  0151e	23 c8		 and	 ecx, eax
  01520	8b c1		 mov	 eax, ecx
  01522	8b 4d 24	 mov	 ecx, DWORD PTR segshift$[rbp]
  01525	d3 e8		 shr	 eax, cl
  01527	89 45 28	 mov	 DWORD PTR offset_ste$[rbp], eax

; 4671 :     r_ste_ptr = r_sto + offset_ste;

  0152a	8b 45 28	 mov	 eax, DWORD PTR offset_ste$[rbp]
  0152d	8b 8d 98 00 00
	00		 mov	 ecx, DWORD PTR r_sto$[rbp]
  01533	03 c8		 add	 ecx, eax
  01535	8b c1		 mov	 eax, ecx
  01537	89 45 44	 mov	 DWORD PTR r_ste_ptr$[rbp], eax

; 4672 : 
; 4673 :     /* Get the real segment table entry that points to the segment that contains the V-PTE.
; 4674 :        Let CP handle if "must-be-zero" bits are set (including the segment invalid bit).
; 4675 :     */
; 4676 :     r_ste = EVM_L(r_ste_ptr);

  0153a	8b 45 44	 mov	 eax, DWORD PTR r_ste_ptr$[rbp]
  0153d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01542	4c 8b 84 24 70
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  0154a	ba fe ff ff ff	 mov	 edx, -2
  0154f	8b c8		 mov	 ecx, eax
  01551	e8 00 00 00 00	 call	 s370_vfetch4
  01556	89 45 18	 mov	 DWORD PTR r_ste$[rbp], eax

; 4677 :     if (r_ste & 0x0F000007)

  01559	8b 45 18	 mov	 eax, DWORD PTR r_ste$[rbp]
  0155c	25 07 00 00 0f	 and	 eax, 251658247		; 0f000007H
  01561	85 c0		 test	 eax, eax
  01563	0f 84 a1 00 00
	00		 je	 $LN74@ecpsvm_dol

; 4678 :     {
; 4679 :         DEBUG_SASSISTX(LRA,MSGBUF(buf, "SASSIST LRA Reject : Real STE at %6.6X is invalid; STE=%8.8X\n",r_ste_ptr,r_ste));

  01569	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  0156f	c1 e8 02	 shr	 eax, 2
  01572	83 e0 01	 and	 eax, 1
  01575	85 c0		 test	 eax, eax
  01577	74 24		 je	 SHORT $LN75@ecpsvm_dol
  01579	8b 45 18	 mov	 eax, DWORD PTR r_ste$[rbp]
  0157c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  01580	44 8b 4d 44	 mov	 r9d, DWORD PTR r_ste_ptr$[rbp]
  01584	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175220
  0158b	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  01590	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  01597	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN75@ecpsvm_dol:

; 4680 :         DEBUG_SASSISTX(LRA,WRMSG(HHC90000, "D", buf));

  0159d	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  015a3	c1 e8 02	 shr	 eax, 2
  015a6	83 e0 01	 and	 eax, 1
  015a9	85 c0		 test	 eax, eax
  015ab	74 53		 je	 SHORT $LN76@ecpsvm_dol
  015ad	b9 01 00 00 00	 mov	 ecx, 1
  015b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  015b8	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  015bf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  015c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175222
  015cb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  015d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175223
  015d7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  015dc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  015e1	41 b9 03 00 00
	00		 mov	 r9d, 3
  015e7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175224
  015ee	ba 48 12 00 00	 mov	 edx, 4680		; 00001248H
  015f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175225
  015fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN76@ecpsvm_dol:

; 4681 :         return(1);

  01600	b8 01 00 00 00	 mov	 eax, 1
  01605	e9 8b 04 00 00	 jmp	 $LN1@ecpsvm_dol
$LN74@ecpsvm_dol:

; 4682 :     }
; 4683 : 
; 4684 :     /* Get the length of the real page table from the real STE.  Ensure that the leftmost 4 bits
; 4685 :        of the real page index of the virtual STE address is not greater than the real page table
; 4686 :        length; if so, it's CP's problem.  Use hardcoded shift of 12 to compute real pagindex
; 4687 :        because CP's page frames are always 4K.
; 4688 :     */
; 4689 :     lenindex = (r_ste & 0xF0000000) >> 28;

  0160a	8b 45 18	 mov	 eax, DWORD PTR r_ste$[rbp]
  0160d	25 00 00 00 f0	 and	 eax, -268435456		; f0000000H
  01612	c1 e8 1c	 shr	 eax, 28
  01615	89 45 10	 mov	 DWORD PTR lenindex$[rbp], eax

; 4690 :     pagindex = (v_pte_ptr & 0x0000F000) >> 12;

  01618	8b 45 38	 mov	 eax, DWORD PTR v_pte_ptr$[rbp]
  0161b	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  01620	c1 e8 0c	 shr	 eax, 12
  01623	89 45 2c	 mov	 DWORD PTR pagindex$[rbp], eax

; 4691 :     if (lenindex < pagindex)

  01626	8b 45 2c	 mov	 eax, DWORD PTR pagindex$[rbp]
  01629	39 45 10	 cmp	 DWORD PTR lenindex$[rbp], eax
  0162c	73 6d		 jae	 SHORT $LN77@ecpsvm_dol

; 4692 :     {
; 4693 :         DEBUG_SASSISTX(LRA,WRMSG(HHC90000, "D", "SASSIST LRA Reject : V-PTE address exceeds real page table length\n"));

  0162e	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  01634	c1 e8 02	 shr	 eax, 2
  01637	83 e0 01	 and	 eax, 1
  0163a	85 c0		 test	 eax, eax
  0163c	74 53		 je	 SHORT $LN78@ecpsvm_dol
  0163e	b9 01 00 00 00	 mov	 ecx, 1
  01643	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01649	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175228
  01650	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01655	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175229
  0165c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01661	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175230
  01668	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0166d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01672	41 b9 03 00 00
	00		 mov	 r9d, 3
  01678	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175231
  0167f	ba 55 12 00 00	 mov	 edx, 4693		; 00001255H
  01684	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175232
  0168b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN78@ecpsvm_dol:

; 4694 :         return(1);

  01691	b8 01 00 00 00	 mov	 eax, 1
  01696	e9 fa 03 00 00	 jmp	 $LN1@ecpsvm_dol
$LN77@ecpsvm_dol:

; 4695 :     }
; 4696 : 
; 4697 :     /* Compute the real page table origin for this real segment.  Fetch the real PTE and
; 4698 :        exit to CP if it is in an invalid format or if the page-invalid bit is set.
; 4699 :        Per LOAD REAL ADDRESS assist steps #19-20, documented in GA22-7074-0.
; 4700 :     */
; 4701 :     r_pto = (r_ste & 0x00FFFFF8);

  0169b	8b 45 18	 mov	 eax, DWORD PTR r_ste$[rbp]
  0169e	25 f8 ff ff 00	 and	 eax, 16777208		; 00fffff8H
  016a3	89 45 7c	 mov	 DWORD PTR r_pto$[rbp], eax

; 4702 :     r_pte_ptr = r_pto + pagindex * 2;

  016a6	8b 45 7c	 mov	 eax, DWORD PTR r_pto$[rbp]
  016a9	8b 4d 2c	 mov	 ecx, DWORD PTR pagindex$[rbp]
  016ac	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  016af	89 45 48	 mov	 DWORD PTR r_pte_ptr$[rbp], eax

; 4703 :     r_pte = EVM_LH(r_pte_ptr);

  016b2	8b 45 48	 mov	 eax, DWORD PTR r_pte_ptr$[rbp]
  016b5	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  016ba	4c 8b 84 24 70
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  016c2	ba fe ff ff ff	 mov	 edx, -2
  016c7	8b c8		 mov	 ecx, eax
  016c9	e8 00 00 00 00	 call	 s370_vfetch2
  016ce	66 89 45 00	 mov	 WORD PTR r_pte$[rbp], ax

; 4704 :     if (r_pte & (paginvmask | pagfmtmask))

  016d2	0f b7 45 00	 movzx	 eax, WORD PTR r_pte$[rbp]
  016d6	0f b7 4d 04	 movzx	 ecx, WORD PTR paginvmask$[rbp]
  016da	0f b7 55 08	 movzx	 edx, WORD PTR pagfmtmask$[rbp]
  016de	0b ca		 or	 ecx, edx
  016e0	23 c1		 and	 eax, ecx
  016e2	85 c0		 test	 eax, eax
  016e4	0f 84 a2 00 00
	00		 je	 $LN79@ecpsvm_dol

; 4705 :     {
; 4706 :         DEBUG_SASSISTX(LRA,MSGBUF(buf, "SASSIST LRA Reject : Real PTE at %6.6X is invalid; PTE=%4.4X\n",r_pte_ptr,r_pte));

  016ea	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  016f0	c1 e8 02	 shr	 eax, 2
  016f3	83 e0 01	 and	 eax, 1
  016f6	85 c0		 test	 eax, eax
  016f8	74 25		 je	 SHORT $LN80@ecpsvm_dol
  016fa	0f b7 45 00	 movzx	 eax, WORD PTR r_pte$[rbp]
  016fe	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  01702	44 8b 4d 48	 mov	 r9d, DWORD PTR r_pte_ptr$[rbp]
  01706	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175235
  0170d	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  01712	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  01719	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN80@ecpsvm_dol:

; 4707 :         DEBUG_SASSISTX(LRA,WRMSG(HHC90000, "D", buf));

  0171f	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  01725	c1 e8 02	 shr	 eax, 2
  01728	83 e0 01	 and	 eax, 1
  0172b	85 c0		 test	 eax, eax
  0172d	74 53		 je	 SHORT $LN81@ecpsvm_dol
  0172f	b9 01 00 00 00	 mov	 ecx, 1
  01734	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0173a	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  01741	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01746	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175237
  0174d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01752	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175238
  01759	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0175e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01763	41 b9 03 00 00
	00		 mov	 r9d, 3
  01769	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175239
  01770	ba 63 12 00 00	 mov	 edx, 4707		; 00001263H
  01775	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175240
  0177c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN81@ecpsvm_dol:

; 4708 :         return(1);

  01782	b8 01 00 00 00	 mov	 eax, 1
  01787	e9 09 03 00 00	 jmp	 $LN1@ecpsvm_dol
$LN79@ecpsvm_dol:

; 4709 :     }
; 4710 : 
; 4711 :     /* r_pte now contains the page table entry containing the real address of the page
; 4712 :        frame containing the virtual PTE.  Compute the real address of the virtual PTE
; 4713 :        pointed to by v_pte_ptr and fetch the virtual PTE
; 4714 :     */
; 4715 :     frame_addr = (U32) ((r_pte & framemask) << frameshift);

  0178c	0f b7 45 00	 movzx	 eax, WORD PTR r_pte$[rbp]
  01790	0f b7 4d 0c	 movzx	 ecx, WORD PTR framemask$[rbp]
  01794	23 c1		 and	 eax, ecx
  01796	8b 4d 3c	 mov	 ecx, DWORD PTR frameshift$[rbp]
  01799	d3 e0		 shl	 eax, cl
  0179b	89 45 50	 mov	 DWORD PTR frame_addr$[rbp], eax

; 4716 :     byte_addr  = v_pte_ptr & 0x0FFF;

  0179e	8b 45 38	 mov	 eax, DWORD PTR v_pte_ptr$[rbp]
  017a1	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  017a6	89 45 4c	 mov	 DWORD PTR byte_addr$[rbp], eax

; 4717 :     v_pte = EVM_LH(frame_addr + byte_addr);

  017a9	8b 45 4c	 mov	 eax, DWORD PTR byte_addr$[rbp]
  017ac	8b 4d 50	 mov	 ecx, DWORD PTR frame_addr$[rbp]
  017af	03 c8		 add	 ecx, eax
  017b1	8b c1		 mov	 eax, ecx
  017b3	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  017b8	4c 8b 84 24 70
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  017c0	ba fe ff ff ff	 mov	 edx, -2
  017c5	8b c8		 mov	 ecx, eax
  017c7	e8 00 00 00 00	 call	 s370_vfetch2
  017cc	66 89 45 14	 mov	 WORD PTR v_pte$[rbp], ax

; 4718 : 
; 4719 :     /* Validate the virtual PTE entry.  If the page invalid bit is set, place the
; 4720 :        virtual address of this virtual PTE in register operand 1 and return with the
; 4721 :        LRA completed and psw cc=2.  If the PTE format is incorrect, return to CP to handle.
; 4722 :     */
; 4723 :     if (v_pte & paginvmask)

  017d0	0f b7 45 14	 movzx	 eax, WORD PTR v_pte$[rbp]
  017d4	0f b7 4d 04	 movzx	 ecx, WORD PTR paginvmask$[rbp]
  017d8	23 c1		 and	 eax, ecx
  017da	85 c0		 test	 eax, eax
  017dc	0f 84 ed 00 00
	00		 je	 $LN82@ecpsvm_dol

; 4724 :     {
; 4725 :         regs->GR_L(r1) = v_pte_ptr;

  017e2	48 63 84 24 78
	64 01 00	 movsxd	 rax, DWORD PTR r1$[rsp]
  017ea	48 8b 8c 24 70
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  017f2	8b 55 38	 mov	 edx, DWORD PTR v_pte_ptr$[rbp]
  017f5	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 4726 :         regs->psw.cc = 2;

  017fc	48 8b 84 24 70
	64 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  01804	c6 40 7c 02	 mov	 BYTE PTR [rax+124], 2

; 4727 :         DEBUG_SASSISTX(LRA,MSGBUF(buf, "SASSIST LRA Complete: CC=2; Operands r1=%8.8X, d2(b2)=%8.8X\n",regs->GR_L(r1),effective_addr2));

  01808	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  0180e	c1 e8 02	 shr	 eax, 2
  01811	83 e0 01	 and	 eax, 1
  01814	85 c0		 test	 eax, eax
  01816	74 3c		 je	 SHORT $LN83@ecpsvm_dol
  01818	48 63 84 24 78
	64 01 00	 movsxd	 rax, DWORD PTR r1$[rsp]
  01820	8b 8c 24 88 64
	01 00		 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  01827	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0182b	48 8b 8c 24 70
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01833	44 8b 8c c1 80
	02 00 00	 mov	 r9d, DWORD PTR [rcx+rax*8+640]
  0183b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175243
  01842	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  01847	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0184e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN83@ecpsvm_dol:

; 4728 :         DEBUG_SASSISTX(LRA,WRMSG(HHC90000, "D", buf));

  01854	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  0185a	c1 e8 02	 shr	 eax, 2
  0185d	83 e0 01	 and	 eax, 1
  01860	85 c0		 test	 eax, eax
  01862	74 53		 je	 SHORT $LN84@ecpsvm_dol
  01864	b9 01 00 00 00	 mov	 ecx, 1
  01869	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0186f	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  01876	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0187b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175245
  01882	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01887	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175246
  0188e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01893	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01898	41 b9 03 00 00
	00		 mov	 r9d, 3
  0189e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175247
  018a5	ba 78 12 00 00	 mov	 edx, 4728		; 00001278H
  018aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175248
  018b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN84@ecpsvm_dol:

; 4729 :         SASSIST_HIT(LRA);

  018b7	48 8b 05 70 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+368
  018be	48 ff c0	 inc	 rax
  018c1	48 89 05 70 01
	00 00		 mov	 QWORD PTR ecpsvm_sastats+368, rax

; 4730 :         return(0);

  018c8	33 c0		 xor	 eax, eax
  018ca	e9 c6 01 00 00	 jmp	 $LN1@ecpsvm_dol
$LN82@ecpsvm_dol:

; 4731 :     }
; 4732 :     if (v_pte & pagfmtmask)

  018cf	0f b7 45 14	 movzx	 eax, WORD PTR v_pte$[rbp]
  018d3	0f b7 4d 08	 movzx	 ecx, WORD PTR pagfmtmask$[rbp]
  018d7	23 c1		 and	 eax, ecx
  018d9	85 c0		 test	 eax, eax
  018db	0f 84 a2 00 00
	00		 je	 $LN85@ecpsvm_dol

; 4733 :     {
; 4734 :         DEBUG_SASSISTX(LRA,MSGBUF(buf, "SASSIST LRA Reject : Virtual PTE at %6.6X is invalid; STE=%8.8X\n",v_pte_ptr,v_pte));

  018e1	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  018e7	c1 e8 02	 shr	 eax, 2
  018ea	83 e0 01	 and	 eax, 1
  018ed	85 c0		 test	 eax, eax
  018ef	74 25		 je	 SHORT $LN86@ecpsvm_dol
  018f1	0f b7 45 14	 movzx	 eax, WORD PTR v_pte$[rbp]
  018f5	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  018f9	44 8b 4d 38	 mov	 r9d, DWORD PTR v_pte_ptr$[rbp]
  018fd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175251
  01904	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  01909	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  01910	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN86@ecpsvm_dol:

; 4735 :         DEBUG_SASSISTX(LRA,WRMSG(HHC90000, "D", buf));

  01916	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  0191c	c1 e8 02	 shr	 eax, 2
  0191f	83 e0 01	 and	 eax, 1
  01922	85 c0		 test	 eax, eax
  01924	74 53		 je	 SHORT $LN87@ecpsvm_dol
  01926	b9 01 00 00 00	 mov	 ecx, 1
  0192b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01931	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  01938	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0193d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175253
  01944	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01949	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175254
  01950	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01955	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0195a	41 b9 03 00 00
	00		 mov	 r9d, 3
  01960	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175255
  01967	ba 7f 12 00 00	 mov	 edx, 4735		; 0000127fH
  0196c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175256
  01973	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN87@ecpsvm_dol:

; 4736 :         return(1);

  01979	b8 01 00 00 00	 mov	 eax, 1
  0197e	e9 12 01 00 00	 jmp	 $LN1@ecpsvm_dol
$LN85@ecpsvm_dol:

; 4737 :     }
; 4738 : 
; 4739 :     /* v_pte contains the page frame address we need to finally resolve the LRA. */
; 4740 :     frame_addr = (U32) ((v_pte & framemask) << frameshift);

  01983	0f b7 45 14	 movzx	 eax, WORD PTR v_pte$[rbp]
  01987	0f b7 4d 0c	 movzx	 ecx, WORD PTR framemask$[rbp]
  0198b	23 c1		 and	 eax, ecx
  0198d	8b 4d 3c	 mov	 ecx, DWORD PTR frameshift$[rbp]
  01990	d3 e0		 shl	 eax, cl
  01992	89 45 50	 mov	 DWORD PTR frame_addr$[rbp], eax

; 4741 :     byte_addr  = effective_addr2 & bytemask;

  01995	8b 45 68	 mov	 eax, DWORD PTR bytemask$[rbp]
  01998	8b 8c 24 88 64
	01 00		 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0199f	23 c8		 and	 ecx, eax
  019a1	8b c1		 mov	 eax, ecx
  019a3	89 45 4c	 mov	 DWORD PTR byte_addr$[rbp], eax

; 4742 :     regs->GR_L(r1) = frame_addr + byte_addr;

  019a6	8b 45 4c	 mov	 eax, DWORD PTR byte_addr$[rbp]
  019a9	8b 4d 50	 mov	 ecx, DWORD PTR frame_addr$[rbp]
  019ac	03 c8		 add	 ecx, eax
  019ae	8b c1		 mov	 eax, ecx
  019b0	48 63 8c 24 78
	64 01 00	 movsxd	 rcx, DWORD PTR r1$[rsp]
  019b8	48 8b 94 24 70
	64 01 00	 mov	 rdx, QWORD PTR regs$[rsp]
  019c0	89 84 ca 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx*8+640], eax

; 4743 :     regs->psw.cc = 0;

  019c7	48 8b 84 24 70
	64 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  019cf	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 4744 :     DEBUG_SASSISTX(LRA,MSGBUF(buf, "SASSIST LRA Complete: CC=0; Operands r1=%8.8X, d2(b2)=%8.8X\n",regs->GR_L(r1),effective_addr2));

  019d3	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  019d9	c1 e8 02	 shr	 eax, 2
  019dc	83 e0 01	 and	 eax, 1
  019df	85 c0		 test	 eax, eax
  019e1	74 3c		 je	 SHORT $LN88@ecpsvm_dol
  019e3	48 63 84 24 78
	64 01 00	 movsxd	 rax, DWORD PTR r1$[rsp]
  019eb	8b 8c 24 88 64
	01 00		 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  019f2	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  019f6	48 8b 8c 24 70
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  019fe	44 8b 8c c1 80
	02 00 00	 mov	 r9d, DWORD PTR [rcx+rax*8+640]
  01a06	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175258
  01a0d	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  01a12	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  01a19	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN88@ecpsvm_dol:

; 4745 :     DEBUG_SASSISTX(LRA,WRMSG(HHC90000, "D", buf));

  01a1f	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+376
  01a25	c1 e8 02	 shr	 eax, 2
  01a28	83 e0 01	 and	 eax, 1
  01a2b	85 c0		 test	 eax, eax
  01a2d	74 53		 je	 SHORT $LN89@ecpsvm_dol
  01a2f	b9 01 00 00 00	 mov	 ecx, 1
  01a34	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01a3a	48 8d 8d 80 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  01a41	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01a46	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175260
  01a4d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01a52	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175261
  01a59	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01a5e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01a63	41 b9 03 00 00
	00		 mov	 r9d, 3
  01a69	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG175262
  01a70	ba 89 12 00 00	 mov	 edx, 4745		; 00001289H
  01a75	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG175263
  01a7c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN89@ecpsvm_dol:

; 4746 :     SASSIST_HIT(LRA);

  01a82	48 8b 05 70 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+368
  01a89	48 ff c0	 inc	 rax
  01a8c	48 89 05 70 01
	00 00		 mov	 QWORD PTR ecpsvm_sastats+368, rax

; 4747 :     return(0);

  01a93	33 c0		 xor	 eax, eax
$LN1@ecpsvm_dol:

; 4748 : }

  01a95	48 8b 8d 80 63
	01 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  01a9c	48 33 cc	 xor	 rcx, rsp
  01a9f	e8 00 00 00 00	 call	 __security_check_cookie
  01aa4	48 81 c4 58 64
	01 00		 add	 rsp, 91224		; 00016458H
  01aab	5f		 pop	 rdi
  01aac	5d		 pop	 rbp
  01aad	c3		 ret	 0
ecpsvm_dolra ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
amicblok$ = 0
CR6$ = 4
micpend$ = 8
micevma$ = 9
micevma2$ = 10
micevma3$ = 11
micevma4$ = 12
vpswa$ = 16
tv343 = 24
tv354 = 32
vpswa_p$ = 40
tv372 = 48
micblok$ = 56
vpregs$ = 128
buf$ = 90368
__$ArrayPad$ = 90880
regs$ = 91120
b2$ = 91128
effective_addr2$ = 91136
ecpsvm_doiucv PROC

; 4257 : {

$LN36:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	b8 d8 63 01 00	 mov	 eax, 91096		; 000163d8H
  00015	e8 00 00 00 00	 call	 __chkstk
  0001a	48 2b e0	 sub	 rsp, rax
  0001d	48 8d ac 24 c0
	00 00 00	 lea	 rbp, QWORD PTR [rsp+192]
  00025	48 83 e5 80	 and	 rbp, -128		; ffffffffffffff80H
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c4	 xor	 rax, rsp
  00033	48 89 85 00 63
	01 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 4258 :     SASSIST_PROLOG(IUCV);

  0003a	48 8b 84 24 f0
	63 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  00042	48 83 b8 80 08
	00 00 00	 cmp	 QWORD PTR [rax+2176], 0
  0004a	74 0a		 je	 SHORT $LN14@ecpsvm_doi
  0004c	b8 01 00 00 00	 mov	 eax, 1
  00051	e9 39 07 00 00	 jmp	 $LN1@ecpsvm_doi
$LN14@ecpsvm_doi:
  00056	48 8b 84 24 f0
	63 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  0005e	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00062	83 e0 01	 and	 eax, 1
  00065	85 c0		 test	 eax, eax
  00067	75 0a		 jne	 SHORT $LN15@ecpsvm_doi
  00069	b8 01 00 00 00	 mov	 eax, 1
  0006e	e9 1c 07 00 00	 jmp	 $LN1@ecpsvm_doi
$LN15@ecpsvm_doi:
  00073	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007a	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00080	c1 e8 11	 shr	 eax, 17
  00083	83 e0 01	 and	 eax, 1
  00086	85 c0		 test	 eax, eax
  00088	75 6d		 jne	 SHORT $LN16@ecpsvm_doi
  0008a	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+344
  00090	c1 e8 02	 shr	 eax, 2
  00093	83 e0 01	 and	 eax, 1
  00096	85 c0		 test	 eax, eax
  00098	74 53		 je	 SHORT $LN17@ecpsvm_doi
  0009a	b9 01 00 00 00	 mov	 ecx, 1
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174804
  000ac	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174805
  000b8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174806
  000c4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ce	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174807
  000db	ba a2 10 00 00	 mov	 edx, 4258		; 000010a2H
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174808
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@ecpsvm_doi:
  000ed	b8 01 00 00 00	 mov	 eax, 1
  000f2	e9 98 06 00 00	 jmp	 $LN1@ecpsvm_doi
$LN16@ecpsvm_doi:
  000f7	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+344
  000fd	d1 e8		 shr	 eax, 1
  000ff	83 e0 01	 and	 eax, 1
  00102	85 c0		 test	 eax, eax
  00104	75 6d		 jne	 SHORT $LN18@ecpsvm_doi
  00106	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+344
  0010c	c1 e8 02	 shr	 eax, 2
  0010f	83 e0 01	 and	 eax, 1
  00112	85 c0		 test	 eax, eax
  00114	74 53		 je	 SHORT $LN19@ecpsvm_doi
  00116	b9 01 00 00 00	 mov	 ecx, 1
  0011b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174811
  00128	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0012d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174812
  00134	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00139	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174813
  00140	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00145	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00150	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174814
  00157	ba a2 10 00 00	 mov	 edx, 4258		; 000010a2H
  0015c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174815
  00163	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN19@ecpsvm_doi:
  00169	b8 01 00 00 00	 mov	 eax, 1
  0016e	e9 1c 06 00 00	 jmp	 $LN1@ecpsvm_doi
$LN18@ecpsvm_doi:
  00173	b8 08 00 00 00	 mov	 eax, 8
  00178	48 6b c0 07	 imul	 rax, rax, 7
  0017c	48 8b 8c 24 f0
	63 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00184	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  0018b	89 45 04	 mov	 DWORD PTR CR6$[rbp], eax
  0018e	48 8b 84 24 f0
	63 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  00196	48 c7 80 78 07
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+1912], 0
  001a1	8b 45 04	 mov	 eax, DWORD PTR CR6$[rbp]
  001a4	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001a9	85 c0		 test	 eax, eax
  001ab	75 6d		 jne	 SHORT $LN20@ecpsvm_doi
  001ad	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+344
  001b3	c1 e8 02	 shr	 eax, 2
  001b6	83 e0 01	 and	 eax, 1
  001b9	85 c0		 test	 eax, eax
  001bb	74 53		 je	 SHORT $LN21@ecpsvm_doi
  001bd	b9 01 00 00 00	 mov	 ecx, 1
  001c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174818
  001cf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174819
  001db	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174820
  001e7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f1	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174821
  001fe	ba a2 10 00 00	 mov	 edx, 4258		; 000010a2H
  00203	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174822
  0020a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN21@ecpsvm_doi:
  00210	b8 01 00 00 00	 mov	 eax, 1
  00215	e9 75 05 00 00	 jmp	 $LN1@ecpsvm_doi
$LN20@ecpsvm_doi:
  0021a	8b 45 04	 mov	 eax, DWORD PTR CR6$[rbp]
  0021d	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00222	85 c0		 test	 eax, eax
  00224	74 6d		 je	 SHORT $LN22@ecpsvm_doi
  00226	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+344
  0022c	c1 e8 02	 shr	 eax, 2
  0022f	83 e0 01	 and	 eax, 1
  00232	85 c0		 test	 eax, eax
  00234	74 53		 je	 SHORT $LN23@ecpsvm_doi
  00236	b9 01 00 00 00	 mov	 ecx, 1
  0023b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00241	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174825
  00248	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0024d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174826
  00254	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00259	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174827
  00260	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00265	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0026a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00270	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174828
  00277	ba a2 10 00 00	 mov	 edx, 4258		; 000010a2H
  0027c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174829
  00283	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN23@ecpsvm_doi:
  00289	b8 01 00 00 00	 mov	 eax, 1
  0028e	e9 fc 04 00 00	 jmp	 $LN1@ecpsvm_doi
$LN22@ecpsvm_doi:
  00293	48 8b 05 48 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+328
  0029a	48 ff c0	 inc	 rax
  0029d	48 89 05 48 01
	00 00		 mov	 QWORD PTR ecpsvm_sastats+328, rax
  002a4	8b 45 04	 mov	 eax, DWORD PTR CR6$[rbp]
  002a7	25 f8 ff ff 00	 and	 eax, 16777208		; 00fffff8H
  002ac	89 45 00	 mov	 DWORD PTR amicblok$[rbp], eax
  002af	8b 45 00	 mov	 eax, DWORD PTR amicblok$[rbp]
  002b2	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002b7	4c 8b 84 24 f0
	63 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  002bf	ba fe ff ff ff	 mov	 edx, -2
  002c4	8b c8		 mov	 ecx, eax
  002c6	e8 00 00 00 00	 call	 s370_vfetch4
  002cb	89 45 38	 mov	 DWORD PTR micblok$[rbp], eax
  002ce	8b 45 00	 mov	 eax, DWORD PTR amicblok$[rbp]
  002d1	83 c0 04	 add	 eax, 4
  002d4	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002d9	4c 8b 84 24 f0
	63 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  002e1	ba fe ff ff ff	 mov	 edx, -2
  002e6	8b c8		 mov	 ecx, eax
  002e8	e8 00 00 00 00	 call	 s370_vfetch4
  002ed	89 45 3c	 mov	 DWORD PTR micblok$[rbp+4], eax
  002f0	8b 45 00	 mov	 eax, DWORD PTR amicblok$[rbp]
  002f3	83 c0 08	 add	 eax, 8
  002f6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002fb	4c 8b 84 24 f0
	63 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  00303	ba fe ff ff ff	 mov	 edx, -2
  00308	8b c8		 mov	 ecx, eax
  0030a	e8 00 00 00 00	 call	 s370_vfetch4
  0030f	89 45 40	 mov	 DWORD PTR micblok$[rbp+8], eax
  00312	8b 45 00	 mov	 eax, DWORD PTR amicblok$[rbp]
  00315	83 c0 0c	 add	 eax, 12
  00318	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0031d	4c 8b 84 24 f0
	63 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  00325	ba fe ff ff ff	 mov	 edx, -2
  0032a	8b c8		 mov	 ecx, eax
  0032c	e8 00 00 00 00	 call	 s370_vfetch4
  00331	89 45 44	 mov	 DWORD PTR micblok$[rbp+12], eax
  00334	8b 45 00	 mov	 eax, DWORD PTR amicblok$[rbp]
  00337	83 c0 10	 add	 eax, 16
  0033a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0033f	4c 8b 84 24 f0
	63 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  00347	ba fe ff ff ff	 mov	 edx, -2
  0034c	8b c8		 mov	 ecx, eax
  0034e	e8 00 00 00 00	 call	 s370_vfetch4
  00353	89 45 48	 mov	 DWORD PTR micblok$[rbp+16], eax
  00356	8b 45 00	 mov	 eax, DWORD PTR amicblok$[rbp]
  00359	83 c0 14	 add	 eax, 20
  0035c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00361	4c 8b 84 24 f0
	63 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  00369	ba fe ff ff ff	 mov	 edx, -2
  0036e	8b c8		 mov	 ecx, eax
  00370	e8 00 00 00 00	 call	 s370_vfetch4
  00375	89 45 4c	 mov	 DWORD PTR micblok$[rbp+20], eax
  00378	8b 45 40	 mov	 eax, DWORD PTR micblok$[rbp+8]
  0037b	c1 e8 18	 shr	 eax, 24
  0037e	88 45 08	 mov	 BYTE PTR micpend$[rbp], al
  00381	8b 45 40	 mov	 eax, DWORD PTR micblok$[rbp+8]
  00384	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00389	89 45 10	 mov	 DWORD PTR vpswa$[rbp], eax
  0038c	8b 45 4c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  0038f	c1 e8 18	 shr	 eax, 24
  00392	88 45 09	 mov	 BYTE PTR micevma$[rbp], al
  00395	8b 45 4c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  00398	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  0039d	c1 e8 10	 shr	 eax, 16
  003a0	88 45 0a	 mov	 BYTE PTR micevma2$[rbp], al
  003a3	8b 45 4c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  003a6	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  003ab	c1 e8 08	 shr	 eax, 8
  003ae	88 45 0b	 mov	 BYTE PTR micevma3$[rbp], al
  003b1	8b 45 4c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  003b4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003b9	88 45 0c	 mov	 BYTE PTR micevma4$[rbp], al
  003bc	8b 45 04	 mov	 eax, DWORD PTR CR6$[rbp]
  003bf	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  003c4	85 c0		 test	 eax, eax
  003c6	74 37		 je	 SHORT $LN24@ecpsvm_doi
  003c8	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  003cd	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  003d5	4c 8b 8c 24 f0
	63 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  003dd	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  003e3	ba 01 00 00 00	 mov	 edx, 1
  003e8	8b 4d 48	 mov	 ecx, DWORD PTR micblok$[rbp+16]
  003eb	e8 00 00 00 00	 call	 s370_maddr_l
  003f0	48 8b 8c 24 f0
	63 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003f8	48 89 81 78 07
	00 00		 mov	 QWORD PTR [rcx+1912], rax
$LN24@ecpsvm_doi:
  003ff	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  00404	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0040c	4c 8b 8c 24 f0
	63 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  00414	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0041a	ba 01 00 00 00	 mov	 edx, 1
  0041f	8b 4d 10	 mov	 ecx, DWORD PTR vpswa$[rbp]
  00422	e8 00 00 00 00	 call	 s370_maddr_l
  00427	48 89 45 28	 mov	 QWORD PTR vpswa_p$[rbp], rax
  0042b	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+344
  00431	c1 e8 02	 shr	 eax, 2
  00434	83 e0 01	 and	 eax, 1
  00437	85 c0		 test	 eax, eax
  00439	74 1d		 je	 SHORT $LN25@ecpsvm_doi
  0043b	44 8b 4d 10	 mov	 r9d, DWORD PTR vpswa$[rbp]
  0043f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174832
  00446	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  0044b	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00452	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN25@ecpsvm_doi:
  00458	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+344
  0045e	c1 e8 02	 shr	 eax, 2
  00461	83 e0 01	 and	 eax, 1
  00464	85 c0		 test	 eax, eax
  00466	74 53		 je	 SHORT $LN26@ecpsvm_doi
  00468	b9 01 00 00 00	 mov	 ecx, 1
  0046d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00473	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0047a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0047f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174834
  00486	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0048b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174835
  00492	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00497	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0049c	41 b9 03 00 00
	00		 mov	 r9d, 3
  004a2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174836
  004a9	ba a2 10 00 00	 mov	 edx, 4258		; 000010a2H
  004ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174837
  004b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN26@ecpsvm_doi:
  004bb	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+344
  004c1	c1 e8 02	 shr	 eax, 2
  004c4	83 e0 01	 and	 eax, 1
  004c7	85 c0		 test	 eax, eax
  004c9	74 1d		 je	 SHORT $LN27@ecpsvm_doi
  004cb	44 8b 4d 04	 mov	 r9d, DWORD PTR CR6$[rbp]
  004cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174839
  004d6	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  004db	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  004e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN27@ecpsvm_doi:
  004e8	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+344
  004ee	c1 e8 02	 shr	 eax, 2
  004f1	83 e0 01	 and	 eax, 1
  004f4	85 c0		 test	 eax, eax
  004f6	74 53		 je	 SHORT $LN28@ecpsvm_doi
  004f8	b9 01 00 00 00	 mov	 ecx, 1
  004fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00503	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0050a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0050f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174841
  00516	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0051b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174842
  00522	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00527	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0052c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00532	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174843
  00539	ba a2 10 00 00	 mov	 edx, 4258		; 000010a2H
  0053e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174844
  00545	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN28@ecpsvm_doi:
  0054b	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+344
  00551	c1 e8 02	 shr	 eax, 2
  00554	83 e0 01	 and	 eax, 1
  00557	85 c0		 test	 eax, eax
  00559	74 1d		 je	 SHORT $LN29@ecpsvm_doi
  0055b	44 8b 4d 48	 mov	 r9d, DWORD PTR micblok$[rbp+16]
  0055f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174846
  00566	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  0056b	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00572	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN29@ecpsvm_doi:
  00578	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+344
  0057e	c1 e8 02	 shr	 eax, 2
  00581	83 e0 01	 and	 eax, 1
  00584	85 c0		 test	 eax, eax
  00586	74 53		 je	 SHORT $LN30@ecpsvm_doi
  00588	b9 01 00 00 00	 mov	 ecx, 1
  0058d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00593	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0059a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0059f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174848
  005a6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174849
  005b2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005b7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005bc	41 b9 03 00 00
	00		 mov	 r9d, 3
  005c2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174850
  005c9	ba a2 10 00 00	 mov	 edx, 4258		; 000010a2H
  005ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174851
  005d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN30@ecpsvm_doi:
  005db	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+344
  005e1	c1 e8 02	 shr	 eax, 2
  005e4	83 e0 01	 and	 eax, 1
  005e7	85 c0		 test	 eax, eax
  005e9	74 19		 je	 SHORT $LN31@ecpsvm_doi
  005eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174853
  005f2	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  005f7	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  005fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN31@ecpsvm_doi:
  00604	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+344
  0060a	c1 e8 02	 shr	 eax, 2
  0060d	83 e0 01	 and	 eax, 1
  00610	85 c0		 test	 eax, eax
  00612	74 48		 je	 SHORT $LN32@ecpsvm_doi
  00614	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0061b	e8 00 00 00 00	 call	 strlen
  00620	48 98		 cdqe
  00622	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00627	48 2b c8	 sub	 rcx, rax
  0062a	48 8b c1	 mov	 rax, rcx
  0062d	48 89 45 18	 mov	 QWORD PTR tv343[rbp], rax
  00631	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00638	e8 00 00 00 00	 call	 strlen
  0063d	48 8d 84 05 00
	61 01 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  00645	48 8b 4d 18	 mov	 rcx, QWORD PTR tv343[rbp]
  00649	44 8b c1	 mov	 r8d, ecx
  0064c	48 8b d0	 mov	 rdx, rax
  0064f	48 8b 8c 24 f0
	63 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00657	e8 00 00 00 00	 call	 display_psw
$LN32@ecpsvm_doi:
$LN4@ecpsvm_doi:
  0065c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00663	48 63 80 90 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5264]
  0066a	48 89 45 20	 mov	 QWORD PTR tv354[rbp], rax
  0066e	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  00675	48 8b f9	 mov	 rdi, rcx
  00678	33 c0		 xor	 eax, eax
  0067a	48 8b 4d 20	 mov	 rcx, QWORD PTR tv354[rbp]
  0067e	f3 aa		 rep stosb
$LN7@ecpsvm_doi:
  00680	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG174855
  00687	48 89 85 e8 00
	00 00		 mov	 QWORD PTR vpregs$[rbp+104], rax
  0068e	33 c0		 xor	 eax, eax
  00690	85 c0		 test	 eax, eax
  00692	75 ec		 jne	 SHORT $LN7@ecpsvm_doi
  00694	33 c0		 xor	 eax, eax
  00696	85 c0		 test	 eax, eax
  00698	75 c2		 jne	 SHORT $LN4@ecpsvm_doi
  0069a	48 8b 55 28	 mov	 rdx, QWORD PTR vpswa_p$[rbp]
  0069e	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  006a5	e8 00 00 00 00	 call	 s370_load_psw
  006aa	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  006b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG174856
  006b7	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
  006c4	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+344
  006ca	c1 e8 02	 shr	 eax, 2
  006cd	83 e0 01	 and	 eax, 1
  006d0	85 c0		 test	 eax, eax
  006d2	74 47		 je	 SHORT $LN33@ecpsvm_doi
  006d4	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006db	e8 00 00 00 00	 call	 strlen
  006e0	48 98		 cdqe
  006e2	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  006e7	48 2b c8	 sub	 rcx, rax
  006ea	48 8b c1	 mov	 rax, rcx
  006ed	48 89 45 30	 mov	 QWORD PTR tv372[rbp], rax
  006f1	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006f8	e8 00 00 00 00	 call	 strlen
  006fd	48 8d 84 05 00
	61 01 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  00705	48 8b 4d 30	 mov	 rcx, QWORD PTR tv372[rbp]
  00709	44 8b c1	 mov	 r8d, ecx
  0070c	48 8b d0	 mov	 rdx, rax
  0070f	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  00716	e8 00 00 00 00	 call	 display_psw
$LN33@ecpsvm_doi:
  0071b	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+344
  00721	c1 e8 02	 shr	 eax, 2
  00724	83 e0 01	 and	 eax, 1
  00727	85 c0		 test	 eax, eax
  00729	74 53		 je	 SHORT $LN34@ecpsvm_doi
  0072b	b9 01 00 00 00	 mov	 ecx, 1
  00730	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00736	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0073d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00742	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174859
  00749	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0074e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174860
  00755	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0075a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0075f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00765	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174861
  0076c	ba a2 10 00 00	 mov	 edx, 4258		; 000010a2H
  00771	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174862
  00778	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN34@ecpsvm_doi:
$LN10@ecpsvm_doi:

; 4259 : 
; 4260 :     UNREFERENCED(b2);

  0077e	33 c0		 xor	 eax, eax
  00780	85 c0		 test	 eax, eax
  00782	75 fa		 jne	 SHORT $LN10@ecpsvm_doi
$LN13@ecpsvm_doi:

; 4261 :     UNREFERENCED(effective_addr2);

  00784	33 c0		 xor	 eax, eax
  00786	85 c0		 test	 eax, eax
  00788	75 fa		 jne	 SHORT $LN13@ecpsvm_doi

; 4262 :     return(1);

  0078a	b8 01 00 00 00	 mov	 eax, 1
$LN1@ecpsvm_doi:

; 4263 : }

  0078f	48 8b 8d 00 63
	01 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00796	48 33 cc	 xor	 rcx, rsp
  00799	e8 00 00 00 00	 call	 __security_check_cookie
  0079e	48 81 c4 d8 63
	01 00		 add	 rsp, 91096		; 000163d8H
  007a5	5f		 pop	 rdi
  007a6	5d		 pop	 rbp
  007a7	c3		 ret	 0
ecpsvm_doiucv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
B_VMPSTAT$ = 0
i$ = 4
amicblok$ = 8
j$ = 12
CR6$ = 16
numcrs$ = 20
micpend$ = 24
micevma$ = 25
micevma2$ = 26
micevma3$ = 27
micevma4$ = 28
vpswa$ = 32
vmb$ = 36
F_ECBLOK$ = 40
ecb_p$ = 48
tv343 = 56
tv354 = 64
vpswa_p$ = 72
tv372 = 80
micblok$ = 88
vpregs$ = 128
crs$ = 90368
buf$ = 90432
__$ArrayPad$ = 90944
regs$ = 91184
r1$ = 91192
r3$ = 91200
b2$ = 91208
effective_addr2$ = 91216
ecpsvm_dostctl PROC

; 3987 : {

$LN48:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	b8 18 64 01 00	 mov	 eax, 91160		; 00016418H
  0001a	e8 00 00 00 00	 call	 __chkstk
  0001f	48 2b e0	 sub	 rsp, rax
  00022	48 8d ac 24 c0
	00 00 00	 lea	 rbp, QWORD PTR [rsp+192]
  0002a	48 83 e5 80	 and	 rbp, -128		; ffffffffffffff80H
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 85 40 63
	01 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3988 : 
; 3989 :     U32 crs[16];
; 3990 :     BYTE *ecb_p;
; 3991 :     VADR F_ECBLOK,vmb;
; 3992 :     BYTE B_VMPSTAT;
; 3993 : 
; 3994 :     int i,j,numcrs;
; 3995 : 
; 3996 :     SASSIST_PROLOG(STCTL);

  0003f	48 8b 84 24 30
	64 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  00047	48 83 b8 80 08
	00 00 00	 cmp	 QWORD PTR [rax+2176], 0
  0004f	74 0a		 je	 SHORT $LN14@ecpsvm_dos
  00051	b8 01 00 00 00	 mov	 eax, 1
  00056	e9 bd 0a 00 00	 jmp	 $LN1@ecpsvm_dos
$LN14@ecpsvm_dos:
  0005b	48 8b 84 24 30
	64 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  00063	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00067	83 e0 01	 and	 eax, 1
  0006a	85 c0		 test	 eax, eax
  0006c	75 0a		 jne	 SHORT $LN15@ecpsvm_dos
  0006e	b8 01 00 00 00	 mov	 eax, 1
  00073	e9 a0 0a 00 00	 jmp	 $LN1@ecpsvm_dos
$LN15@ecpsvm_dos:
  00078	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007f	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00085	c1 e8 11	 shr	 eax, 17
  00088	83 e0 01	 and	 eax, 1
  0008b	85 c0		 test	 eax, eax
  0008d	75 6d		 jne	 SHORT $LN16@ecpsvm_dos
  0008f	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+248
  00095	c1 e8 02	 shr	 eax, 2
  00098	83 e0 01	 and	 eax, 1
  0009b	85 c0		 test	 eax, eax
  0009d	74 53		 je	 SHORT $LN17@ecpsvm_dos
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174446
  000b1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174447
  000bd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174448
  000c9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000ce	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d3	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174449
  000e0	ba 9c 0f 00 00	 mov	 edx, 3996		; 00000f9cH
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174450
  000ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@ecpsvm_dos:
  000f2	b8 01 00 00 00	 mov	 eax, 1
  000f7	e9 1c 0a 00 00	 jmp	 $LN1@ecpsvm_dos
$LN16@ecpsvm_dos:
  000fc	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+248
  00102	d1 e8		 shr	 eax, 1
  00104	83 e0 01	 and	 eax, 1
  00107	85 c0		 test	 eax, eax
  00109	75 6d		 jne	 SHORT $LN18@ecpsvm_dos
  0010b	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+248
  00111	c1 e8 02	 shr	 eax, 2
  00114	83 e0 01	 and	 eax, 1
  00117	85 c0		 test	 eax, eax
  00119	74 53		 je	 SHORT $LN19@ecpsvm_dos
  0011b	b9 01 00 00 00	 mov	 ecx, 1
  00120	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00126	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174453
  0012d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00132	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174454
  00139	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0013e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174455
  00145	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0014a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00155	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174456
  0015c	ba 9c 0f 00 00	 mov	 edx, 3996		; 00000f9cH
  00161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174457
  00168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN19@ecpsvm_dos:
  0016e	b8 01 00 00 00	 mov	 eax, 1
  00173	e9 a0 09 00 00	 jmp	 $LN1@ecpsvm_dos
$LN18@ecpsvm_dos:
  00178	b8 08 00 00 00	 mov	 eax, 8
  0017d	48 6b c0 07	 imul	 rax, rax, 7
  00181	48 8b 8c 24 30
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00189	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00190	89 45 10	 mov	 DWORD PTR CR6$[rbp], eax
  00193	48 8b 84 24 30
	64 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  0019b	48 c7 80 78 07
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+1912], 0
  001a6	8b 45 10	 mov	 eax, DWORD PTR CR6$[rbp]
  001a9	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001ae	85 c0		 test	 eax, eax
  001b0	75 6d		 jne	 SHORT $LN20@ecpsvm_dos
  001b2	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+248
  001b8	c1 e8 02	 shr	 eax, 2
  001bb	83 e0 01	 and	 eax, 1
  001be	85 c0		 test	 eax, eax
  001c0	74 53		 je	 SHORT $LN21@ecpsvm_dos
  001c2	b9 01 00 00 00	 mov	 ecx, 1
  001c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174460
  001d4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174461
  001e0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174462
  001ec	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001f1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f6	41 b9 03 00 00
	00		 mov	 r9d, 3
  001fc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174463
  00203	ba 9c 0f 00 00	 mov	 edx, 3996		; 00000f9cH
  00208	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174464
  0020f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN21@ecpsvm_dos:
  00215	b8 01 00 00 00	 mov	 eax, 1
  0021a	e9 f9 08 00 00	 jmp	 $LN1@ecpsvm_dos
$LN20@ecpsvm_dos:
  0021f	8b 45 10	 mov	 eax, DWORD PTR CR6$[rbp]
  00222	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00227	85 c0		 test	 eax, eax
  00229	74 6d		 je	 SHORT $LN22@ecpsvm_dos
  0022b	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+248
  00231	c1 e8 02	 shr	 eax, 2
  00234	83 e0 01	 and	 eax, 1
  00237	85 c0		 test	 eax, eax
  00239	74 53		 je	 SHORT $LN23@ecpsvm_dos
  0023b	b9 01 00 00 00	 mov	 ecx, 1
  00240	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00246	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174467
  0024d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00252	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174468
  00259	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174469
  00265	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0026a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0026f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00275	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174470
  0027c	ba 9c 0f 00 00	 mov	 edx, 3996		; 00000f9cH
  00281	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174471
  00288	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN23@ecpsvm_dos:
  0028e	b8 01 00 00 00	 mov	 eax, 1
  00293	e9 80 08 00 00	 jmp	 $LN1@ecpsvm_dos
$LN22@ecpsvm_dos:
  00298	48 8b 05 e8 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+232
  0029f	48 ff c0	 inc	 rax
  002a2	48 89 05 e8 00
	00 00		 mov	 QWORD PTR ecpsvm_sastats+232, rax
  002a9	8b 45 10	 mov	 eax, DWORD PTR CR6$[rbp]
  002ac	25 f8 ff ff 00	 and	 eax, 16777208		; 00fffff8H
  002b1	89 45 08	 mov	 DWORD PTR amicblok$[rbp], eax
  002b4	8b 45 08	 mov	 eax, DWORD PTR amicblok$[rbp]
  002b7	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002bc	4c 8b 84 24 30
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  002c4	ba fe ff ff ff	 mov	 edx, -2
  002c9	8b c8		 mov	 ecx, eax
  002cb	e8 00 00 00 00	 call	 s370_vfetch4
  002d0	89 45 58	 mov	 DWORD PTR micblok$[rbp], eax
  002d3	8b 45 08	 mov	 eax, DWORD PTR amicblok$[rbp]
  002d6	83 c0 04	 add	 eax, 4
  002d9	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002de	4c 8b 84 24 30
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  002e6	ba fe ff ff ff	 mov	 edx, -2
  002eb	8b c8		 mov	 ecx, eax
  002ed	e8 00 00 00 00	 call	 s370_vfetch4
  002f2	89 45 5c	 mov	 DWORD PTR micblok$[rbp+4], eax
  002f5	8b 45 08	 mov	 eax, DWORD PTR amicblok$[rbp]
  002f8	83 c0 08	 add	 eax, 8
  002fb	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00300	4c 8b 84 24 30
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  00308	ba fe ff ff ff	 mov	 edx, -2
  0030d	8b c8		 mov	 ecx, eax
  0030f	e8 00 00 00 00	 call	 s370_vfetch4
  00314	89 45 60	 mov	 DWORD PTR micblok$[rbp+8], eax
  00317	8b 45 08	 mov	 eax, DWORD PTR amicblok$[rbp]
  0031a	83 c0 0c	 add	 eax, 12
  0031d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00322	4c 8b 84 24 30
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  0032a	ba fe ff ff ff	 mov	 edx, -2
  0032f	8b c8		 mov	 ecx, eax
  00331	e8 00 00 00 00	 call	 s370_vfetch4
  00336	89 45 64	 mov	 DWORD PTR micblok$[rbp+12], eax
  00339	8b 45 08	 mov	 eax, DWORD PTR amicblok$[rbp]
  0033c	83 c0 10	 add	 eax, 16
  0033f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00344	4c 8b 84 24 30
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  0034c	ba fe ff ff ff	 mov	 edx, -2
  00351	8b c8		 mov	 ecx, eax
  00353	e8 00 00 00 00	 call	 s370_vfetch4
  00358	89 45 68	 mov	 DWORD PTR micblok$[rbp+16], eax
  0035b	8b 45 08	 mov	 eax, DWORD PTR amicblok$[rbp]
  0035e	83 c0 14	 add	 eax, 20
  00361	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00366	4c 8b 84 24 30
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  0036e	ba fe ff ff ff	 mov	 edx, -2
  00373	8b c8		 mov	 ecx, eax
  00375	e8 00 00 00 00	 call	 s370_vfetch4
  0037a	89 45 6c	 mov	 DWORD PTR micblok$[rbp+20], eax
  0037d	8b 45 60	 mov	 eax, DWORD PTR micblok$[rbp+8]
  00380	c1 e8 18	 shr	 eax, 24
  00383	88 45 18	 mov	 BYTE PTR micpend$[rbp], al
  00386	8b 45 60	 mov	 eax, DWORD PTR micblok$[rbp+8]
  00389	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0038e	89 45 20	 mov	 DWORD PTR vpswa$[rbp], eax
  00391	8b 45 6c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  00394	c1 e8 18	 shr	 eax, 24
  00397	88 45 19	 mov	 BYTE PTR micevma$[rbp], al
  0039a	8b 45 6c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  0039d	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  003a2	c1 e8 10	 shr	 eax, 16
  003a5	88 45 1a	 mov	 BYTE PTR micevma2$[rbp], al
  003a8	8b 45 6c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  003ab	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  003b0	c1 e8 08	 shr	 eax, 8
  003b3	88 45 1b	 mov	 BYTE PTR micevma3$[rbp], al
  003b6	8b 45 6c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  003b9	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003be	88 45 1c	 mov	 BYTE PTR micevma4$[rbp], al
  003c1	8b 45 10	 mov	 eax, DWORD PTR CR6$[rbp]
  003c4	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  003c9	85 c0		 test	 eax, eax
  003cb	74 37		 je	 SHORT $LN24@ecpsvm_dos
  003cd	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  003d2	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  003da	4c 8b 8c 24 30
	64 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  003e2	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  003e8	ba 01 00 00 00	 mov	 edx, 1
  003ed	8b 4d 68	 mov	 ecx, DWORD PTR micblok$[rbp+16]
  003f0	e8 00 00 00 00	 call	 s370_maddr_l
  003f5	48 8b 8c 24 30
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003fd	48 89 81 78 07
	00 00		 mov	 QWORD PTR [rcx+1912], rax
$LN24@ecpsvm_dos:
  00404	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  00409	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00411	4c 8b 8c 24 30
	64 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  00419	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0041f	ba 01 00 00 00	 mov	 edx, 1
  00424	8b 4d 20	 mov	 ecx, DWORD PTR vpswa$[rbp]
  00427	e8 00 00 00 00	 call	 s370_maddr_l
  0042c	48 89 45 48	 mov	 QWORD PTR vpswa_p$[rbp], rax
  00430	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+248
  00436	c1 e8 02	 shr	 eax, 2
  00439	83 e0 01	 and	 eax, 1
  0043c	85 c0		 test	 eax, eax
  0043e	74 1d		 je	 SHORT $LN25@ecpsvm_dos
  00440	44 8b 4d 20	 mov	 r9d, DWORD PTR vpswa$[rbp]
  00444	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174474
  0044b	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00450	48 8d 8d 40 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00457	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN25@ecpsvm_dos:
  0045d	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+248
  00463	c1 e8 02	 shr	 eax, 2
  00466	83 e0 01	 and	 eax, 1
  00469	85 c0		 test	 eax, eax
  0046b	74 53		 je	 SHORT $LN26@ecpsvm_dos
  0046d	b9 01 00 00 00	 mov	 ecx, 1
  00472	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00478	48 8d 8d 40 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0047f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00484	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174476
  0048b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00490	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174477
  00497	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0049c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004a1	41 b9 03 00 00
	00		 mov	 r9d, 3
  004a7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174478
  004ae	ba 9c 0f 00 00	 mov	 edx, 3996		; 00000f9cH
  004b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174479
  004ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN26@ecpsvm_dos:
  004c0	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+248
  004c6	c1 e8 02	 shr	 eax, 2
  004c9	83 e0 01	 and	 eax, 1
  004cc	85 c0		 test	 eax, eax
  004ce	74 1d		 je	 SHORT $LN27@ecpsvm_dos
  004d0	44 8b 4d 10	 mov	 r9d, DWORD PTR CR6$[rbp]
  004d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174481
  004db	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  004e0	48 8d 8d 40 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  004e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN27@ecpsvm_dos:
  004ed	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+248
  004f3	c1 e8 02	 shr	 eax, 2
  004f6	83 e0 01	 and	 eax, 1
  004f9	85 c0		 test	 eax, eax
  004fb	74 53		 je	 SHORT $LN28@ecpsvm_dos
  004fd	b9 01 00 00 00	 mov	 ecx, 1
  00502	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00508	48 8d 8d 40 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0050f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00514	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174483
  0051b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00520	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174484
  00527	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0052c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00531	41 b9 03 00 00
	00		 mov	 r9d, 3
  00537	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174485
  0053e	ba 9c 0f 00 00	 mov	 edx, 3996		; 00000f9cH
  00543	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174486
  0054a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN28@ecpsvm_dos:
  00550	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+248
  00556	c1 e8 02	 shr	 eax, 2
  00559	83 e0 01	 and	 eax, 1
  0055c	85 c0		 test	 eax, eax
  0055e	74 1d		 je	 SHORT $LN29@ecpsvm_dos
  00560	44 8b 4d 68	 mov	 r9d, DWORD PTR micblok$[rbp+16]
  00564	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174488
  0056b	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00570	48 8d 8d 40 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00577	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN29@ecpsvm_dos:
  0057d	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+248
  00583	c1 e8 02	 shr	 eax, 2
  00586	83 e0 01	 and	 eax, 1
  00589	85 c0		 test	 eax, eax
  0058b	74 53		 je	 SHORT $LN30@ecpsvm_dos
  0058d	b9 01 00 00 00	 mov	 ecx, 1
  00592	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00598	48 8d 8d 40 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0059f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174490
  005ab	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174491
  005b7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005bc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005c1	41 b9 03 00 00
	00		 mov	 r9d, 3
  005c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174492
  005ce	ba 9c 0f 00 00	 mov	 edx, 3996		; 00000f9cH
  005d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174493
  005da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN30@ecpsvm_dos:
  005e0	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+248
  005e6	c1 e8 02	 shr	 eax, 2
  005e9	83 e0 01	 and	 eax, 1
  005ec	85 c0		 test	 eax, eax
  005ee	74 19		 je	 SHORT $LN31@ecpsvm_dos
  005f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174495
  005f7	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  005fc	48 8d 8d 40 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00603	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN31@ecpsvm_dos:
  00609	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+248
  0060f	c1 e8 02	 shr	 eax, 2
  00612	83 e0 01	 and	 eax, 1
  00615	85 c0		 test	 eax, eax
  00617	74 48		 je	 SHORT $LN32@ecpsvm_dos
  00619	48 8d 8d 40 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00620	e8 00 00 00 00	 call	 strlen
  00625	48 98		 cdqe
  00627	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  0062c	48 2b c8	 sub	 rcx, rax
  0062f	48 8b c1	 mov	 rax, rcx
  00632	48 89 45 38	 mov	 QWORD PTR tv343[rbp], rax
  00636	48 8d 8d 40 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0063d	e8 00 00 00 00	 call	 strlen
  00642	48 8d 84 05 40
	61 01 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  0064a	48 8b 4d 38	 mov	 rcx, QWORD PTR tv343[rbp]
  0064e	44 8b c1	 mov	 r8d, ecx
  00651	48 8b d0	 mov	 rdx, rax
  00654	48 8b 8c 24 30
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0065c	e8 00 00 00 00	 call	 display_psw
$LN32@ecpsvm_dos:
$LN4@ecpsvm_dos:
  00661	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00668	48 63 80 90 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5264]
  0066f	48 89 45 40	 mov	 QWORD PTR tv354[rbp], rax
  00673	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  0067a	48 8b f9	 mov	 rdi, rcx
  0067d	33 c0		 xor	 eax, eax
  0067f	48 8b 4d 40	 mov	 rcx, QWORD PTR tv354[rbp]
  00683	f3 aa		 rep stosb
$LN7@ecpsvm_dos:
  00685	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG174497
  0068c	48 89 85 e8 00
	00 00		 mov	 QWORD PTR vpregs$[rbp+104], rax
  00693	33 c0		 xor	 eax, eax
  00695	85 c0		 test	 eax, eax
  00697	75 ec		 jne	 SHORT $LN7@ecpsvm_dos
  00699	33 c0		 xor	 eax, eax
  0069b	85 c0		 test	 eax, eax
  0069d	75 c2		 jne	 SHORT $LN4@ecpsvm_dos
  0069f	48 8b 55 48	 mov	 rdx, QWORD PTR vpswa_p$[rbp]
  006a3	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  006aa	e8 00 00 00 00	 call	 s370_load_psw
  006af	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  006b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG174498
  006bc	48 8d 8d 40 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
  006c9	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+248
  006cf	c1 e8 02	 shr	 eax, 2
  006d2	83 e0 01	 and	 eax, 1
  006d5	85 c0		 test	 eax, eax
  006d7	74 47		 je	 SHORT $LN33@ecpsvm_dos
  006d9	48 8d 8d 40 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006e0	e8 00 00 00 00	 call	 strlen
  006e5	48 98		 cdqe
  006e7	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  006ec	48 2b c8	 sub	 rcx, rax
  006ef	48 8b c1	 mov	 rax, rcx
  006f2	48 89 45 50	 mov	 QWORD PTR tv372[rbp], rax
  006f6	48 8d 8d 40 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006fd	e8 00 00 00 00	 call	 strlen
  00702	48 8d 84 05 40
	61 01 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  0070a	48 8b 4d 50	 mov	 rcx, QWORD PTR tv372[rbp]
  0070e	44 8b c1	 mov	 r8d, ecx
  00711	48 8b d0	 mov	 rdx, rax
  00714	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  0071b	e8 00 00 00 00	 call	 display_psw
$LN33@ecpsvm_dos:
  00720	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+248
  00726	c1 e8 02	 shr	 eax, 2
  00729	83 e0 01	 and	 eax, 1
  0072c	85 c0		 test	 eax, eax
  0072e	74 53		 je	 SHORT $LN34@ecpsvm_dos
  00730	b9 01 00 00 00	 mov	 ecx, 1
  00735	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0073b	48 8d 8d 40 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00742	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00747	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174501
  0074e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00753	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174502
  0075a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0075f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00764	41 b9 03 00 00
	00		 mov	 r9d, 3
  0076a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174503
  00771	ba 9c 0f 00 00	 mov	 edx, 3996		; 00000f9cH
  00776	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174504
  0077d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN34@ecpsvm_dos:

; 3997 : 
; 3998 :     if(effective_addr2 & 0x03)

  00783	8b 84 24 50 64
	01 00		 mov	 eax, DWORD PTR effective_addr2$[rsp]
  0078a	83 e0 03	 and	 eax, 3
  0078d	85 c0		 test	 eax, eax
  0078f	74 6d		 je	 SHORT $LN35@ecpsvm_dos

; 3999 :     {
; 4000 :         DEBUG_SASSISTX(STCTL,WRMSG(HHC90000, "D", "SASSIST STCTL Reject : Not aligned"));

  00791	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+248
  00797	c1 e8 02	 shr	 eax, 2
  0079a	83 e0 01	 and	 eax, 1
  0079d	85 c0		 test	 eax, eax
  0079f	74 53		 je	 SHORT $LN36@ecpsvm_dos
  007a1	b9 01 00 00 00	 mov	 ecx, 1
  007a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174507
  007b3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  007b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174508
  007bf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174509
  007cb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007d0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007d5	41 b9 03 00 00
	00		 mov	 r9d, 3
  007db	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174510
  007e2	ba a0 0f 00 00	 mov	 edx, 4000		; 00000fa0H
  007e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174511
  007ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN36@ecpsvm_dos:

; 4001 :         return(1);

  007f4	b8 01 00 00 00	 mov	 eax, 1
  007f9	e9 1a 03 00 00	 jmp	 $LN1@ecpsvm_dos
$LN35@ecpsvm_dos:

; 4002 :     }
; 4003 : 
; 4004 :     vmb=vpswa-0xA8;

  007fe	8b 45 20	 mov	 eax, DWORD PTR vpswa$[rbp]
  00801	2d a8 00 00 00	 sub	 eax, 168		; 000000a8H
  00806	89 45 24	 mov	 DWORD PTR vmb$[rbp], eax

; 4005 :     B_VMPSTAT=EVM_IC(vmb+VMPSTAT);

  00809	8b 45 24	 mov	 eax, DWORD PTR vmb$[rbp]
  0080c	83 c0 5c	 add	 eax, 92			; 0000005cH
  0080f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00814	4c 8b 84 24 30
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  0081c	ba fe ff ff ff	 mov	 edx, -2
  00821	8b c8		 mov	 ecx, eax
  00823	e8 00 00 00 00	 call	 s370_vfetchb
  00828	88 45 00	 mov	 BYTE PTR B_VMPSTAT$[rbp], al

; 4006 : 
; 4007 :     if((!(B_VMPSTAT & VMV370R)) && ((r1!=r3) || (r1!=0)))

  0082b	0f b6 45 00	 movzx	 eax, BYTE PTR B_VMPSTAT$[rbp]
  0082f	83 e0 40	 and	 eax, 64			; 00000040H
  00832	85 c0		 test	 eax, eax
  00834	0f 85 87 00 00
	00		 jne	 $LN37@ecpsvm_dos
  0083a	8b 84 24 40 64
	01 00		 mov	 eax, DWORD PTR r3$[rsp]
  00841	39 84 24 38 64
	01 00		 cmp	 DWORD PTR r1$[rsp], eax
  00848	75 0a		 jne	 SHORT $LN38@ecpsvm_dos
  0084a	83 bc 24 38 64
	01 00 00	 cmp	 DWORD PTR r1$[rsp], 0
  00852	74 6d		 je	 SHORT $LN37@ecpsvm_dos
$LN38@ecpsvm_dos:

; 4008 :     {
; 4009 :         DEBUG_SASSISTX(STCTL,WRMSG(HHC90000, "D", "SASSIST STCTL Reject : BC Mode VM & STCTL != 0,0"));

  00854	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+248
  0085a	c1 e8 02	 shr	 eax, 2
  0085d	83 e0 01	 and	 eax, 1
  00860	85 c0		 test	 eax, eax
  00862	74 53		 je	 SHORT $LN39@ecpsvm_dos
  00864	b9 01 00 00 00	 mov	 ecx, 1
  00869	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0086f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174515
  00876	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0087b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174516
  00882	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00887	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174517
  0088e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00893	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00898	41 b9 03 00 00
	00		 mov	 r9d, 3
  0089e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174518
  008a5	ba a9 0f 00 00	 mov	 edx, 4009		; 00000fa9H
  008aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174519
  008b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN39@ecpsvm_dos:

; 4010 :         return(1);

  008b7	b8 01 00 00 00	 mov	 eax, 1
  008bc	e9 57 02 00 00	 jmp	 $LN1@ecpsvm_dos
$LN37@ecpsvm_dos:

; 4011 :     }
; 4012 : 
; 4013 :     /* Load the CRs from the ECBLOK */
; 4014 :     if(B_VMPSTAT & VMV370R)

  008c1	0f b6 45 00	 movzx	 eax, BYTE PTR B_VMPSTAT$[rbp]
  008c5	83 e0 40	 and	 eax, 64			; 00000040H
  008c8	85 c0		 test	 eax, eax
  008ca	0f 84 93 00 00
	00		 je	 $LN40@ecpsvm_dos

; 4015 :     {
; 4016 :         F_ECBLOK=fetch_fw(regs->mainstor+vmb+VMECEXT);

  008d0	8b 45 24	 mov	 eax, DWORD PTR vmb$[rbp]
  008d3	48 8b 8c 24 30
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  008db	48 8b 89 48 08
	00 00		 mov	 rcx, QWORD PTR [rcx+2120]
  008e2	48 8d 44 01 0c	 lea	 rax, QWORD PTR [rcx+rax+12]
  008e7	48 8b c8	 mov	 rcx, rax
  008ea	e8 00 00 00 00	 call	 fetch_fw_noswap
  008ef	8b c8		 mov	 ecx, eax
  008f1	e8 00 00 00 00	 call	 _byteswap_ulong
  008f6	89 45 28	 mov	 DWORD PTR F_ECBLOK$[rbp], eax

; 4017 :         for(i=0;i<16;i++)

  008f9	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00900	eb 08		 jmp	 SHORT $LN10@ecpsvm_dos
$LN8@ecpsvm_dos:
  00902	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  00905	ff c0		 inc	 eax
  00907	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN10@ecpsvm_dos:
  0090a	83 7d 04 10	 cmp	 DWORD PTR i$[rbp], 16
  0090e	7d 51		 jge	 SHORT $LN9@ecpsvm_dos

; 4018 :         {
; 4019 :              ecb_p=MADDR(F_ECBLOK+(i*4),USE_REAL_ADDR,regs,ACCTYPE_READ,0);

  00910	8b 45 28	 mov	 eax, DWORD PTR F_ECBLOK$[rbp]
  00913	8b 4d 04	 mov	 ecx, DWORD PTR i$[rbp]
  00916	8d 04 88	 lea	 eax, DWORD PTR [rax+rcx*4]
  00919	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  0091e	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00926	4c 8b 8c 24 30
	64 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  0092e	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00934	ba 01 00 00 00	 mov	 edx, 1
  00939	8b c8		 mov	 ecx, eax
  0093b	e8 00 00 00 00	 call	 s370_maddr_l
  00940	48 89 45 30	 mov	 QWORD PTR ecb_p$[rbp], rax

; 4020 :              crs[i]=fetch_fw(ecb_p);

  00944	48 8b 4d 30	 mov	 rcx, QWORD PTR ecb_p$[rbp]
  00948	e8 00 00 00 00	 call	 fetch_fw_noswap
  0094d	8b c8		 mov	 ecx, eax
  0094f	e8 00 00 00 00	 call	 _byteswap_ulong
  00954	48 63 4d 04	 movsxd	 rcx, DWORD PTR i$[rbp]
  00958	89 84 8d 00 61
	01 00		 mov	 DWORD PTR crs$[rbp+rcx*4], eax

; 4021 :         }

  0095f	eb a1		 jmp	 SHORT $LN8@ecpsvm_dos
$LN9@ecpsvm_dos:

; 4022 :     }

  00961	eb 55		 jmp	 SHORT $LN41@ecpsvm_dos
$LN40@ecpsvm_dos:

; 4023 :     else
; 4024 :     {
; 4025 :         F_ECBLOK=vmb+VMECEXT;  /* Update ECBLOK ADDRESS for VCR0 Update */

  00963	8b 45 24	 mov	 eax, DWORD PTR vmb$[rbp]
  00966	83 c0 0c	 add	 eax, 12
  00969	89 45 28	 mov	 DWORD PTR F_ECBLOK$[rbp], eax

; 4026 :         ecb_p=MADDR(F_ECBLOK,USE_REAL_ADDR,regs,ACCTYPE_READ,0);

  0096c	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  00971	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00979	4c 8b 8c 24 30
	64 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  00981	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00987	ba 01 00 00 00	 mov	 edx, 1
  0098c	8b 4d 28	 mov	 ecx, DWORD PTR F_ECBLOK$[rbp]
  0098f	e8 00 00 00 00	 call	 s370_maddr_l
  00994	48 89 45 30	 mov	 QWORD PTR ecb_p$[rbp], rax

; 4027 :         /* Load OLD CR0 From VMBLOK */
; 4028 :         crs[0]=fetch_fw(ecb_p);

  00998	48 8b 4d 30	 mov	 rcx, QWORD PTR ecb_p$[rbp]
  0099c	e8 00 00 00 00	 call	 fetch_fw_noswap
  009a1	8b c8		 mov	 ecx, eax
  009a3	e8 00 00 00 00	 call	 _byteswap_ulong
  009a8	b9 04 00 00 00	 mov	 ecx, 4
  009ad	48 6b c9 00	 imul	 rcx, rcx, 0
  009b1	89 84 0d 00 61
	01 00		 mov	 DWORD PTR crs$[rbp+rcx], eax
$LN41@ecpsvm_dos:

; 4029 :     }
; 4030 : 
; 4031 :     /* Determine the range of CRs to be stored */
; 4032 :     if(r1>r3)

  009b8	8b 84 24 40 64
	01 00		 mov	 eax, DWORD PTR r3$[rsp]
  009bf	39 84 24 38 64
	01 00		 cmp	 DWORD PTR r1$[rsp], eax
  009c6	7e 16		 jle	 SHORT $LN42@ecpsvm_dos

; 4033 :     {
; 4034 :         numcrs=(r3+16)-r1;

  009c8	8b 84 24 40 64
	01 00		 mov	 eax, DWORD PTR r3$[rsp]
  009cf	83 c0 10	 add	 eax, 16
  009d2	2b 84 24 38 64
	01 00		 sub	 eax, DWORD PTR r1$[rsp]
  009d9	89 45 14	 mov	 DWORD PTR numcrs$[rbp], eax

; 4035 :     }

  009dc	eb 15		 jmp	 SHORT $LN43@ecpsvm_dos
$LN42@ecpsvm_dos:

; 4036 :     else
; 4037 :     {
; 4038 :         numcrs=r3-r1;

  009de	8b 84 24 38 64
	01 00		 mov	 eax, DWORD PTR r1$[rsp]
  009e5	8b 8c 24 40 64
	01 00		 mov	 ecx, DWORD PTR r3$[rsp]
  009ec	2b c8		 sub	 ecx, eax
  009ee	8b c1		 mov	 eax, ecx
  009f0	89 45 14	 mov	 DWORD PTR numcrs$[rbp], eax
$LN43@ecpsvm_dos:

; 4039 :     }
; 4040 :     numcrs++;

  009f3	8b 45 14	 mov	 eax, DWORD PTR numcrs$[rbp]
  009f6	ff c0		 inc	 eax
  009f8	89 45 14	 mov	 DWORD PTR numcrs$[rbp], eax

; 4041 : 
; 4042 :     /* store the selected CRs into the user's virtual storage */
; 4043 :     for(j=r1,i=0;i<numcrs;i++,j++)

  009fb	8b 84 24 38 64
	01 00		 mov	 eax, DWORD PTR r1$[rsp]
  00a02	89 45 0c	 mov	 DWORD PTR j$[rbp], eax
  00a05	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00a0c	eb 10		 jmp	 SHORT $LN13@ecpsvm_dos
$LN11@ecpsvm_dos:
  00a0e	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  00a11	ff c0		 inc	 eax
  00a13	89 45 04	 mov	 DWORD PTR i$[rbp], eax
  00a16	8b 45 0c	 mov	 eax, DWORD PTR j$[rbp]
  00a19	ff c0		 inc	 eax
  00a1b	89 45 0c	 mov	 DWORD PTR j$[rbp], eax
$LN13@ecpsvm_dos:
  00a1e	8b 45 14	 mov	 eax, DWORD PTR numcrs$[rbp]
  00a21	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  00a24	7d 40		 jge	 SHORT $LN12@ecpsvm_dos

; 4044 :     {
; 4045 :         if(j>15)

  00a26	83 7d 0c 0f	 cmp	 DWORD PTR j$[rbp], 15
  00a2a	7e 09		 jle	 SHORT $LN44@ecpsvm_dos

; 4046 :         {
; 4047 :             j-=16;

  00a2c	8b 45 0c	 mov	 eax, DWORD PTR j$[rbp]
  00a2f	83 e8 10	 sub	 eax, 16
  00a32	89 45 0c	 mov	 DWORD PTR j$[rbp], eax
$LN44@ecpsvm_dos:

; 4048 :         }
; 4049 : 
; 4050 :         ARCH_DEP(vstore4)(crs[j],effective_addr2+(i*4),b2,regs);

  00a35	8b 84 24 50 64
	01 00		 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00a3c	8b 4d 04	 mov	 ecx, DWORD PTR i$[rbp]
  00a3f	8d 04 88	 lea	 eax, DWORD PTR [rax+rcx*4]
  00a42	48 63 4d 0c	 movsxd	 rcx, DWORD PTR j$[rbp]
  00a46	4c 8b 8c 24 30
	64 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  00a4e	44 8b 84 24 48
	64 01 00	 mov	 r8d, DWORD PTR b2$[rsp]
  00a56	8b d0		 mov	 edx, eax
  00a58	8b 8c 8d 00 61
	01 00		 mov	 ecx, DWORD PTR crs$[rbp+rcx*4]
  00a5f	e8 00 00 00 00	 call	 s370_vstore4

; 4051 :     }

  00a64	eb a8		 jmp	 SHORT $LN11@ecpsvm_dos
$LN12@ecpsvm_dos:

; 4052 : 
; 4053 :     DEBUG_SASSISTX(STCTL,MSGBUF(buf, "SASSIST STCTL %d,%d Done",r1,r3));

  00a66	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+248
  00a6c	c1 e8 02	 shr	 eax, 2
  00a6f	83 e0 01	 and	 eax, 1
  00a72	85 c0		 test	 eax, eax
  00a74	74 2c		 je	 SHORT $LN45@ecpsvm_dos
  00a76	8b 84 24 40 64
	01 00		 mov	 eax, DWORD PTR r3$[rsp]
  00a7d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00a81	44 8b 8c 24 38
	64 01 00	 mov	 r9d, DWORD PTR r1$[rsp]
  00a89	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174526
  00a90	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00a95	48 8d 8d 40 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00a9c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN45@ecpsvm_dos:

; 4054 :     DEBUG_SASSISTX(STCTL,WRMSG(HHC90000, "D", buf));

  00aa2	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+248
  00aa8	c1 e8 02	 shr	 eax, 2
  00aab	83 e0 01	 and	 eax, 1
  00aae	85 c0		 test	 eax, eax
  00ab0	74 53		 je	 SHORT $LN46@ecpsvm_dos
  00ab2	b9 01 00 00 00	 mov	 ecx, 1
  00ab7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00abd	48 8d 8d 40 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00ac4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00ac9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174528
  00ad0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ad5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174529
  00adc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ae1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ae6	41 b9 03 00 00
	00		 mov	 r9d, 3
  00aec	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174530
  00af3	ba d6 0f 00 00	 mov	 edx, 4054		; 00000fd6H
  00af8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174531
  00aff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN46@ecpsvm_dos:

; 4055 :     SASSIST_HIT(STCTL);

  00b05	48 8b 05 f0 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+240
  00b0c	48 ff c0	 inc	 rax
  00b0f	48 89 05 f0 00
	00 00		 mov	 QWORD PTR ecpsvm_sastats+240, rax

; 4056 :     return 0;

  00b16	33 c0		 xor	 eax, eax
$LN1@ecpsvm_dos:

; 4057 : }

  00b18	48 8b 8d 40 63
	01 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00b1f	48 33 cc	 xor	 rcx, rsp
  00b22	e8 00 00 00 00	 call	 __security_check_cookie
  00b27	48 81 c4 18 64
	01 00		 add	 rsp, 91160		; 00016418H
  00b2e	5f		 pop	 rdi
  00b2f	5d		 pop	 rbp
  00b30	c3		 ret	 0
ecpsvm_dostctl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
j$ = 0
i$ = 4
B_VMPSTAT$ = 8
micpend$ = 9
numcrs$ = 12
amicblok$ = 16
CR6$ = 20
F_ECBLOK$ = 24
micevma$ = 28
micevma2$ = 29
micevma3$ = 30
micevma4$ = 31
vpswa$ = 32
vmb$ = 36
tv566 = 40
ecb_p$ = 48
tv343 = 56
tv354 = 64
vpswa_p$ = 72
tv372 = 80
micblok$ = 88
vpregs$ = 128
ocrs$ = 90368
crs$ = 90432
rcrs$ = 90496
buf$ = 90560
__$ArrayPad$ = 91072
regs$ = 91312
r1$ = 91320
r3$ = 91328
b2$ = 91336
effective_addr2$ = 91344
ecpsvm_dolctl PROC

; 4061 : {

$LN101:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	b8 98 64 01 00	 mov	 eax, 91288		; 00016498H
  0001a	e8 00 00 00 00	 call	 __chkstk
  0001f	48 2b e0	 sub	 rsp, rax
  00022	48 8d ac 24 c0
	00 00 00	 lea	 rbp, QWORD PTR [rsp+192]
  0002a	48 83 e5 80	 and	 rbp, -128		; ffffffffffffff80H
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 85 c0 63
	01 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 4062 :     U32 crs[16];        /* New CRs */
; 4063 :     U32 rcrs[16];       /* REAL CRs */
; 4064 :     U32 ocrs[16];       /* Old CRs */
; 4065 :     BYTE *ecb_p;
; 4066 :     VADR F_ECBLOK,vmb;
; 4067 :     BYTE B_VMPSTAT;
; 4068 : 
; 4069 :     int i,j,numcrs;
; 4070 : 
; 4071 :     SASSIST_PROLOG(LCTL);

  0003f	48 8b 84 24 b0
	64 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  00047	48 83 b8 80 08
	00 00 00	 cmp	 QWORD PTR [rax+2176], 0
  0004f	74 0a		 je	 SHORT $LN28@ecpsvm_dol
  00051	b8 01 00 00 00	 mov	 eax, 1
  00056	e9 c0 11 00 00	 jmp	 $LN1@ecpsvm_dol
$LN28@ecpsvm_dol:
  0005b	48 8b 84 24 b0
	64 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  00063	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00067	83 e0 01	 and	 eax, 1
  0006a	85 c0		 test	 eax, eax
  0006c	75 0a		 jne	 SHORT $LN29@ecpsvm_dol
  0006e	b8 01 00 00 00	 mov	 eax, 1
  00073	e9 a3 11 00 00	 jmp	 $LN1@ecpsvm_dol
$LN29@ecpsvm_dol:
  00078	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007f	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00085	c1 e8 11	 shr	 eax, 17
  00088	83 e0 01	 and	 eax, 1
  0008b	85 c0		 test	 eax, eax
  0008d	75 6d		 jne	 SHORT $LN30@ecpsvm_dol
  0008f	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00095	c1 e8 02	 shr	 eax, 2
  00098	83 e0 01	 and	 eax, 1
  0009b	85 c0		 test	 eax, eax
  0009d	74 53		 je	 SHORT $LN31@ecpsvm_dol
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174600
  000b1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174601
  000bd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174602
  000c9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000ce	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d3	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174603
  000e0	ba e7 0f 00 00	 mov	 edx, 4071		; 00000fe7H
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174604
  000ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN31@ecpsvm_dol:
  000f2	b8 01 00 00 00	 mov	 eax, 1
  000f7	e9 1f 11 00 00	 jmp	 $LN1@ecpsvm_dol
$LN30@ecpsvm_dol:
  000fc	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00102	d1 e8		 shr	 eax, 1
  00104	83 e0 01	 and	 eax, 1
  00107	85 c0		 test	 eax, eax
  00109	75 6d		 jne	 SHORT $LN32@ecpsvm_dol
  0010b	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00111	c1 e8 02	 shr	 eax, 2
  00114	83 e0 01	 and	 eax, 1
  00117	85 c0		 test	 eax, eax
  00119	74 53		 je	 SHORT $LN33@ecpsvm_dol
  0011b	b9 01 00 00 00	 mov	 ecx, 1
  00120	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00126	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174607
  0012d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00132	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174608
  00139	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0013e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174609
  00145	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0014a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00155	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174610
  0015c	ba e7 0f 00 00	 mov	 edx, 4071		; 00000fe7H
  00161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174611
  00168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN33@ecpsvm_dol:
  0016e	b8 01 00 00 00	 mov	 eax, 1
  00173	e9 a3 10 00 00	 jmp	 $LN1@ecpsvm_dol
$LN32@ecpsvm_dol:
  00178	b8 08 00 00 00	 mov	 eax, 8
  0017d	48 6b c0 07	 imul	 rax, rax, 7
  00181	48 8b 8c 24 b0
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00189	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00190	89 45 14	 mov	 DWORD PTR CR6$[rbp], eax
  00193	48 8b 84 24 b0
	64 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  0019b	48 c7 80 78 07
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+1912], 0
  001a6	8b 45 14	 mov	 eax, DWORD PTR CR6$[rbp]
  001a9	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001ae	85 c0		 test	 eax, eax
  001b0	75 6d		 jne	 SHORT $LN34@ecpsvm_dol
  001b2	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  001b8	c1 e8 02	 shr	 eax, 2
  001bb	83 e0 01	 and	 eax, 1
  001be	85 c0		 test	 eax, eax
  001c0	74 53		 je	 SHORT $LN35@ecpsvm_dol
  001c2	b9 01 00 00 00	 mov	 ecx, 1
  001c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174614
  001d4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174615
  001e0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174616
  001ec	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001f1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f6	41 b9 03 00 00
	00		 mov	 r9d, 3
  001fc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174617
  00203	ba e7 0f 00 00	 mov	 edx, 4071		; 00000fe7H
  00208	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174618
  0020f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN35@ecpsvm_dol:
  00215	b8 01 00 00 00	 mov	 eax, 1
  0021a	e9 fc 0f 00 00	 jmp	 $LN1@ecpsvm_dol
$LN34@ecpsvm_dol:
  0021f	8b 45 14	 mov	 eax, DWORD PTR CR6$[rbp]
  00222	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00227	85 c0		 test	 eax, eax
  00229	74 6d		 je	 SHORT $LN36@ecpsvm_dol
  0022b	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00231	c1 e8 02	 shr	 eax, 2
  00234	83 e0 01	 and	 eax, 1
  00237	85 c0		 test	 eax, eax
  00239	74 53		 je	 SHORT $LN37@ecpsvm_dol
  0023b	b9 01 00 00 00	 mov	 ecx, 1
  00240	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00246	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174621
  0024d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00252	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174622
  00259	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174623
  00265	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0026a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0026f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00275	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174624
  0027c	ba e7 0f 00 00	 mov	 edx, 4071		; 00000fe7H
  00281	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174625
  00288	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN37@ecpsvm_dol:
  0028e	b8 01 00 00 00	 mov	 eax, 1
  00293	e9 83 0f 00 00	 jmp	 $LN1@ecpsvm_dol
$LN36@ecpsvm_dol:
  00298	48 8b 05 08 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+264
  0029f	48 ff c0	 inc	 rax
  002a2	48 89 05 08 01
	00 00		 mov	 QWORD PTR ecpsvm_sastats+264, rax
  002a9	8b 45 14	 mov	 eax, DWORD PTR CR6$[rbp]
  002ac	25 f8 ff ff 00	 and	 eax, 16777208		; 00fffff8H
  002b1	89 45 10	 mov	 DWORD PTR amicblok$[rbp], eax
  002b4	8b 45 10	 mov	 eax, DWORD PTR amicblok$[rbp]
  002b7	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002bc	4c 8b 84 24 b0
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  002c4	ba fe ff ff ff	 mov	 edx, -2
  002c9	8b c8		 mov	 ecx, eax
  002cb	e8 00 00 00 00	 call	 s370_vfetch4
  002d0	89 45 58	 mov	 DWORD PTR micblok$[rbp], eax
  002d3	8b 45 10	 mov	 eax, DWORD PTR amicblok$[rbp]
  002d6	83 c0 04	 add	 eax, 4
  002d9	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002de	4c 8b 84 24 b0
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  002e6	ba fe ff ff ff	 mov	 edx, -2
  002eb	8b c8		 mov	 ecx, eax
  002ed	e8 00 00 00 00	 call	 s370_vfetch4
  002f2	89 45 5c	 mov	 DWORD PTR micblok$[rbp+4], eax
  002f5	8b 45 10	 mov	 eax, DWORD PTR amicblok$[rbp]
  002f8	83 c0 08	 add	 eax, 8
  002fb	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00300	4c 8b 84 24 b0
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  00308	ba fe ff ff ff	 mov	 edx, -2
  0030d	8b c8		 mov	 ecx, eax
  0030f	e8 00 00 00 00	 call	 s370_vfetch4
  00314	89 45 60	 mov	 DWORD PTR micblok$[rbp+8], eax
  00317	8b 45 10	 mov	 eax, DWORD PTR amicblok$[rbp]
  0031a	83 c0 0c	 add	 eax, 12
  0031d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00322	4c 8b 84 24 b0
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  0032a	ba fe ff ff ff	 mov	 edx, -2
  0032f	8b c8		 mov	 ecx, eax
  00331	e8 00 00 00 00	 call	 s370_vfetch4
  00336	89 45 64	 mov	 DWORD PTR micblok$[rbp+12], eax
  00339	8b 45 10	 mov	 eax, DWORD PTR amicblok$[rbp]
  0033c	83 c0 10	 add	 eax, 16
  0033f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00344	4c 8b 84 24 b0
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  0034c	ba fe ff ff ff	 mov	 edx, -2
  00351	8b c8		 mov	 ecx, eax
  00353	e8 00 00 00 00	 call	 s370_vfetch4
  00358	89 45 68	 mov	 DWORD PTR micblok$[rbp+16], eax
  0035b	8b 45 10	 mov	 eax, DWORD PTR amicblok$[rbp]
  0035e	83 c0 14	 add	 eax, 20
  00361	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00366	4c 8b 84 24 b0
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  0036e	ba fe ff ff ff	 mov	 edx, -2
  00373	8b c8		 mov	 ecx, eax
  00375	e8 00 00 00 00	 call	 s370_vfetch4
  0037a	89 45 6c	 mov	 DWORD PTR micblok$[rbp+20], eax
  0037d	8b 45 60	 mov	 eax, DWORD PTR micblok$[rbp+8]
  00380	c1 e8 18	 shr	 eax, 24
  00383	88 45 09	 mov	 BYTE PTR micpend$[rbp], al
  00386	8b 45 60	 mov	 eax, DWORD PTR micblok$[rbp+8]
  00389	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0038e	89 45 20	 mov	 DWORD PTR vpswa$[rbp], eax
  00391	8b 45 6c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  00394	c1 e8 18	 shr	 eax, 24
  00397	88 45 1c	 mov	 BYTE PTR micevma$[rbp], al
  0039a	8b 45 6c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  0039d	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  003a2	c1 e8 10	 shr	 eax, 16
  003a5	88 45 1d	 mov	 BYTE PTR micevma2$[rbp], al
  003a8	8b 45 6c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  003ab	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  003b0	c1 e8 08	 shr	 eax, 8
  003b3	88 45 1e	 mov	 BYTE PTR micevma3$[rbp], al
  003b6	8b 45 6c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  003b9	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003be	88 45 1f	 mov	 BYTE PTR micevma4$[rbp], al
  003c1	8b 45 14	 mov	 eax, DWORD PTR CR6$[rbp]
  003c4	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  003c9	85 c0		 test	 eax, eax
  003cb	74 37		 je	 SHORT $LN38@ecpsvm_dol
  003cd	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  003d2	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  003da	4c 8b 8c 24 b0
	64 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  003e2	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  003e8	ba 01 00 00 00	 mov	 edx, 1
  003ed	8b 4d 68	 mov	 ecx, DWORD PTR micblok$[rbp+16]
  003f0	e8 00 00 00 00	 call	 s370_maddr_l
  003f5	48 8b 8c 24 b0
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003fd	48 89 81 78 07
	00 00		 mov	 QWORD PTR [rcx+1912], rax
$LN38@ecpsvm_dol:
  00404	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  00409	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00411	4c 8b 8c 24 b0
	64 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  00419	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0041f	ba 01 00 00 00	 mov	 edx, 1
  00424	8b 4d 20	 mov	 ecx, DWORD PTR vpswa$[rbp]
  00427	e8 00 00 00 00	 call	 s370_maddr_l
  0042c	48 89 45 48	 mov	 QWORD PTR vpswa_p$[rbp], rax
  00430	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00436	c1 e8 02	 shr	 eax, 2
  00439	83 e0 01	 and	 eax, 1
  0043c	85 c0		 test	 eax, eax
  0043e	74 1d		 je	 SHORT $LN39@ecpsvm_dol
  00440	44 8b 4d 20	 mov	 r9d, DWORD PTR vpswa$[rbp]
  00444	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174628
  0044b	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00450	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00457	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN39@ecpsvm_dol:
  0045d	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00463	c1 e8 02	 shr	 eax, 2
  00466	83 e0 01	 and	 eax, 1
  00469	85 c0		 test	 eax, eax
  0046b	74 53		 je	 SHORT $LN40@ecpsvm_dol
  0046d	b9 01 00 00 00	 mov	 ecx, 1
  00472	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00478	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0047f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00484	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174630
  0048b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00490	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174631
  00497	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0049c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004a1	41 b9 03 00 00
	00		 mov	 r9d, 3
  004a7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174632
  004ae	ba e7 0f 00 00	 mov	 edx, 4071		; 00000fe7H
  004b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174633
  004ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN40@ecpsvm_dol:
  004c0	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  004c6	c1 e8 02	 shr	 eax, 2
  004c9	83 e0 01	 and	 eax, 1
  004cc	85 c0		 test	 eax, eax
  004ce	74 1d		 je	 SHORT $LN41@ecpsvm_dol
  004d0	44 8b 4d 14	 mov	 r9d, DWORD PTR CR6$[rbp]
  004d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174635
  004db	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  004e0	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  004e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN41@ecpsvm_dol:
  004ed	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  004f3	c1 e8 02	 shr	 eax, 2
  004f6	83 e0 01	 and	 eax, 1
  004f9	85 c0		 test	 eax, eax
  004fb	74 53		 je	 SHORT $LN42@ecpsvm_dol
  004fd	b9 01 00 00 00	 mov	 ecx, 1
  00502	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00508	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0050f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00514	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174637
  0051b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00520	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174638
  00527	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0052c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00531	41 b9 03 00 00
	00		 mov	 r9d, 3
  00537	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174639
  0053e	ba e7 0f 00 00	 mov	 edx, 4071		; 00000fe7H
  00543	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174640
  0054a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN42@ecpsvm_dol:
  00550	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00556	c1 e8 02	 shr	 eax, 2
  00559	83 e0 01	 and	 eax, 1
  0055c	85 c0		 test	 eax, eax
  0055e	74 1d		 je	 SHORT $LN43@ecpsvm_dol
  00560	44 8b 4d 68	 mov	 r9d, DWORD PTR micblok$[rbp+16]
  00564	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174642
  0056b	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00570	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00577	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN43@ecpsvm_dol:
  0057d	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00583	c1 e8 02	 shr	 eax, 2
  00586	83 e0 01	 and	 eax, 1
  00589	85 c0		 test	 eax, eax
  0058b	74 53		 je	 SHORT $LN44@ecpsvm_dol
  0058d	b9 01 00 00 00	 mov	 ecx, 1
  00592	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00598	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0059f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174644
  005ab	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174645
  005b7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005bc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005c1	41 b9 03 00 00
	00		 mov	 r9d, 3
  005c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174646
  005ce	ba e7 0f 00 00	 mov	 edx, 4071		; 00000fe7H
  005d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174647
  005da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN44@ecpsvm_dol:
  005e0	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  005e6	c1 e8 02	 shr	 eax, 2
  005e9	83 e0 01	 and	 eax, 1
  005ec	85 c0		 test	 eax, eax
  005ee	74 19		 je	 SHORT $LN45@ecpsvm_dol
  005f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174649
  005f7	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  005fc	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00603	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN45@ecpsvm_dol:
  00609	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  0060f	c1 e8 02	 shr	 eax, 2
  00612	83 e0 01	 and	 eax, 1
  00615	85 c0		 test	 eax, eax
  00617	74 48		 je	 SHORT $LN46@ecpsvm_dol
  00619	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00620	e8 00 00 00 00	 call	 strlen
  00625	48 98		 cdqe
  00627	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  0062c	48 2b c8	 sub	 rcx, rax
  0062f	48 8b c1	 mov	 rax, rcx
  00632	48 89 45 38	 mov	 QWORD PTR tv343[rbp], rax
  00636	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0063d	e8 00 00 00 00	 call	 strlen
  00642	48 8d 84 05 c0
	61 01 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  0064a	48 8b 4d 38	 mov	 rcx, QWORD PTR tv343[rbp]
  0064e	44 8b c1	 mov	 r8d, ecx
  00651	48 8b d0	 mov	 rdx, rax
  00654	48 8b 8c 24 b0
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0065c	e8 00 00 00 00	 call	 display_psw
$LN46@ecpsvm_dol:
$LN4@ecpsvm_dol:
  00661	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00668	48 63 80 90 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5264]
  0066f	48 89 45 40	 mov	 QWORD PTR tv354[rbp], rax
  00673	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  0067a	48 8b f9	 mov	 rdi, rcx
  0067d	33 c0		 xor	 eax, eax
  0067f	48 8b 4d 40	 mov	 rcx, QWORD PTR tv354[rbp]
  00683	f3 aa		 rep stosb
$LN7@ecpsvm_dol:
  00685	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG174651
  0068c	48 89 85 e8 00
	00 00		 mov	 QWORD PTR vpregs$[rbp+104], rax
  00693	33 c0		 xor	 eax, eax
  00695	85 c0		 test	 eax, eax
  00697	75 ec		 jne	 SHORT $LN7@ecpsvm_dol
  00699	33 c0		 xor	 eax, eax
  0069b	85 c0		 test	 eax, eax
  0069d	75 c2		 jne	 SHORT $LN4@ecpsvm_dol
  0069f	48 8b 55 48	 mov	 rdx, QWORD PTR vpswa_p$[rbp]
  006a3	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  006aa	e8 00 00 00 00	 call	 s370_load_psw
  006af	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  006b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG174652
  006bc	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
  006c9	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  006cf	c1 e8 02	 shr	 eax, 2
  006d2	83 e0 01	 and	 eax, 1
  006d5	85 c0		 test	 eax, eax
  006d7	74 47		 je	 SHORT $LN47@ecpsvm_dol
  006d9	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006e0	e8 00 00 00 00	 call	 strlen
  006e5	48 98		 cdqe
  006e7	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  006ec	48 2b c8	 sub	 rcx, rax
  006ef	48 8b c1	 mov	 rax, rcx
  006f2	48 89 45 50	 mov	 QWORD PTR tv372[rbp], rax
  006f6	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006fd	e8 00 00 00 00	 call	 strlen
  00702	48 8d 84 05 c0
	61 01 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  0070a	48 8b 4d 50	 mov	 rcx, QWORD PTR tv372[rbp]
  0070e	44 8b c1	 mov	 r8d, ecx
  00711	48 8b d0	 mov	 rdx, rax
  00714	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  0071b	e8 00 00 00 00	 call	 display_psw
$LN47@ecpsvm_dol:
  00720	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00726	c1 e8 02	 shr	 eax, 2
  00729	83 e0 01	 and	 eax, 1
  0072c	85 c0		 test	 eax, eax
  0072e	74 53		 je	 SHORT $LN48@ecpsvm_dol
  00730	b9 01 00 00 00	 mov	 ecx, 1
  00735	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0073b	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00742	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00747	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174655
  0074e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00753	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174656
  0075a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0075f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00764	41 b9 03 00 00
	00		 mov	 r9d, 3
  0076a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174657
  00771	ba e7 0f 00 00	 mov	 edx, 4071		; 00000fe7H
  00776	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174658
  0077d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN48@ecpsvm_dol:

; 4072 :     if(effective_addr2 & 0x03)

  00783	8b 84 24 d0 64
	01 00		 mov	 eax, DWORD PTR effective_addr2$[rsp]
  0078a	83 e0 03	 and	 eax, 3
  0078d	85 c0		 test	 eax, eax
  0078f	74 6d		 je	 SHORT $LN49@ecpsvm_dol

; 4073 :     {
; 4074 :         DEBUG_SASSISTX(LCTL,WRMSG(HHC90000, "D", "SASSIST LCTL Reject : Not aligned"));

  00791	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00797	c1 e8 02	 shr	 eax, 2
  0079a	83 e0 01	 and	 eax, 1
  0079d	85 c0		 test	 eax, eax
  0079f	74 53		 je	 SHORT $LN50@ecpsvm_dol
  007a1	b9 01 00 00 00	 mov	 ecx, 1
  007a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174661
  007b3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  007b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174662
  007bf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174663
  007cb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007d0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007d5	41 b9 03 00 00
	00		 mov	 r9d, 3
  007db	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174664
  007e2	ba ea 0f 00 00	 mov	 edx, 4074		; 00000feaH
  007e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174665
  007ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN50@ecpsvm_dol:

; 4075 :         return(1);

  007f4	b8 01 00 00 00	 mov	 eax, 1
  007f9	e9 1d 0a 00 00	 jmp	 $LN1@ecpsvm_dol
$LN49@ecpsvm_dol:

; 4076 :     }
; 4077 : 
; 4078 :     vmb=vpswa-0xA8;

  007fe	8b 45 20	 mov	 eax, DWORD PTR vpswa$[rbp]
  00801	2d a8 00 00 00	 sub	 eax, 168		; 000000a8H
  00806	89 45 24	 mov	 DWORD PTR vmb$[rbp], eax

; 4079 :     B_VMPSTAT=EVM_IC(vmb+VMPSTAT);

  00809	8b 45 24	 mov	 eax, DWORD PTR vmb$[rbp]
  0080c	83 c0 5c	 add	 eax, 92			; 0000005cH
  0080f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00814	4c 8b 84 24 b0
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  0081c	ba fe ff ff ff	 mov	 edx, -2
  00821	8b c8		 mov	 ecx, eax
  00823	e8 00 00 00 00	 call	 s370_vfetchb
  00828	88 45 08	 mov	 BYTE PTR B_VMPSTAT$[rbp], al

; 4080 : 
; 4081 :     if((!(B_VMPSTAT & VMV370R)) && ((r1!=r3) || (r1!=0)))

  0082b	0f b6 45 08	 movzx	 eax, BYTE PTR B_VMPSTAT$[rbp]
  0082f	83 e0 40	 and	 eax, 64			; 00000040H
  00832	85 c0		 test	 eax, eax
  00834	0f 85 87 00 00
	00		 jne	 $LN51@ecpsvm_dol
  0083a	8b 84 24 c0 64
	01 00		 mov	 eax, DWORD PTR r3$[rsp]
  00841	39 84 24 b8 64
	01 00		 cmp	 DWORD PTR r1$[rsp], eax
  00848	75 0a		 jne	 SHORT $LN52@ecpsvm_dol
  0084a	83 bc 24 b8 64
	01 00 00	 cmp	 DWORD PTR r1$[rsp], 0
  00852	74 6d		 je	 SHORT $LN51@ecpsvm_dol
$LN52@ecpsvm_dol:

; 4082 :     {
; 4083 :         DEBUG_SASSISTX(LCTL,WRMSG(HHC90000, "D", "SASSIST LCTL Reject : BC Mode VM & LCTL != 0,0"));

  00854	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  0085a	c1 e8 02	 shr	 eax, 2
  0085d	83 e0 01	 and	 eax, 1
  00860	85 c0		 test	 eax, eax
  00862	74 53		 je	 SHORT $LN53@ecpsvm_dol
  00864	b9 01 00 00 00	 mov	 ecx, 1
  00869	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0086f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174669
  00876	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0087b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174670
  00882	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00887	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174671
  0088e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00893	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00898	41 b9 03 00 00
	00		 mov	 r9d, 3
  0089e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174672
  008a5	ba f3 0f 00 00	 mov	 edx, 4083		; 00000ff3H
  008aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174673
  008b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN53@ecpsvm_dol:

; 4084 :         return(1);

  008b7	b8 01 00 00 00	 mov	 eax, 1
  008bc	e9 5a 09 00 00	 jmp	 $LN1@ecpsvm_dol
$LN51@ecpsvm_dol:

; 4085 :     }
; 4086 :     /* Determine the range of CRs to be loaded */
; 4087 :     if(r1>r3)

  008c1	8b 84 24 c0 64
	01 00		 mov	 eax, DWORD PTR r3$[rsp]
  008c8	39 84 24 b8 64
	01 00		 cmp	 DWORD PTR r1$[rsp], eax
  008cf	7e 16		 jle	 SHORT $LN54@ecpsvm_dol

; 4088 :     {
; 4089 :         numcrs=(r3+16)-r1;

  008d1	8b 84 24 c0 64
	01 00		 mov	 eax, DWORD PTR r3$[rsp]
  008d8	83 c0 10	 add	 eax, 16
  008db	2b 84 24 b8 64
	01 00		 sub	 eax, DWORD PTR r1$[rsp]
  008e2	89 45 0c	 mov	 DWORD PTR numcrs$[rbp], eax

; 4090 :     }

  008e5	eb 15		 jmp	 SHORT $LN55@ecpsvm_dol
$LN54@ecpsvm_dol:

; 4091 :     else
; 4092 :     {
; 4093 :         numcrs=r3-r1;

  008e7	8b 84 24 b8 64
	01 00		 mov	 eax, DWORD PTR r1$[rsp]
  008ee	8b 8c 24 c0 64
	01 00		 mov	 ecx, DWORD PTR r3$[rsp]
  008f5	2b c8		 sub	 ecx, eax
  008f7	8b c1		 mov	 eax, ecx
  008f9	89 45 0c	 mov	 DWORD PTR numcrs$[rbp], eax
$LN55@ecpsvm_dol:

; 4094 :     }
; 4095 :     numcrs++;

  008fc	8b 45 0c	 mov	 eax, DWORD PTR numcrs$[rbp]
  008ff	ff c0		 inc	 eax
  00901	89 45 0c	 mov	 DWORD PTR numcrs$[rbp], eax

; 4096 :     for(j=r1,i=0;i<numcrs;i++,j++)

  00904	8b 84 24 b8 64
	01 00		 mov	 eax, DWORD PTR r1$[rsp]
  0090b	89 45 00	 mov	 DWORD PTR j$[rbp], eax
  0090e	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00915	eb 10		 jmp	 SHORT $LN10@ecpsvm_dol
$LN8@ecpsvm_dol:
  00917	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  0091a	ff c0		 inc	 eax
  0091c	89 45 04	 mov	 DWORD PTR i$[rbp], eax
  0091f	8b 45 00	 mov	 eax, DWORD PTR j$[rbp]
  00922	ff c0		 inc	 eax
  00924	89 45 00	 mov	 DWORD PTR j$[rbp], eax
$LN10@ecpsvm_dol:
  00927	8b 45 0c	 mov	 eax, DWORD PTR numcrs$[rbp]
  0092a	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  0092d	7d 44		 jge	 SHORT $LN9@ecpsvm_dol

; 4097 :     {
; 4098 :         if(j>15)

  0092f	83 7d 00 0f	 cmp	 DWORD PTR j$[rbp], 15
  00933	7e 09		 jle	 SHORT $LN56@ecpsvm_dol

; 4099 :         {
; 4100 :             j-=16;

  00935	8b 45 00	 mov	 eax, DWORD PTR j$[rbp]
  00938	83 e8 10	 sub	 eax, 16
  0093b	89 45 00	 mov	 DWORD PTR j$[rbp], eax
$LN56@ecpsvm_dol:

; 4101 :         }
; 4102 :         crs[j]=ARCH_DEP(vfetch4)((effective_addr2+(i*4)) & ADDRESS_MAXWRAP(regs),b2,regs);

  0093e	8b 84 24 d0 64
	01 00		 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00945	8b 4d 04	 mov	 ecx, DWORD PTR i$[rbp]
  00948	8d 04 88	 lea	 eax, DWORD PTR [rax+rcx*4]
  0094b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00950	4c 8b 84 24 b0
	64 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  00958	8b 94 24 c8 64
	01 00		 mov	 edx, DWORD PTR b2$[rsp]
  0095f	8b c8		 mov	 ecx, eax
  00961	e8 00 00 00 00	 call	 s370_vfetch4
  00966	48 63 4d 00	 movsxd	 rcx, DWORD PTR j$[rbp]
  0096a	89 84 8d 40 61
	01 00		 mov	 DWORD PTR crs$[rbp+rcx*4], eax

; 4103 :     }

  00971	eb a4		 jmp	 SHORT $LN8@ecpsvm_dol
$LN9@ecpsvm_dol:

; 4104 :     if(B_VMPSTAT & VMV370R)

  00973	0f b6 45 08	 movzx	 eax, BYTE PTR B_VMPSTAT$[rbp]
  00977	83 e0 40	 and	 eax, 64			; 00000040H
  0097a	85 c0		 test	 eax, eax
  0097c	0f 84 93 00 00
	00		 je	 $LN57@ecpsvm_dol

; 4105 :     {
; 4106 :         F_ECBLOK=fetch_fw(regs->mainstor+vmb+VMECEXT);

  00982	8b 45 24	 mov	 eax, DWORD PTR vmb$[rbp]
  00985	48 8b 8c 24 b0
	64 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0098d	48 8b 89 48 08
	00 00		 mov	 rcx, QWORD PTR [rcx+2120]
  00994	48 8d 44 01 0c	 lea	 rax, QWORD PTR [rcx+rax+12]
  00999	48 8b c8	 mov	 rcx, rax
  0099c	e8 00 00 00 00	 call	 fetch_fw_noswap
  009a1	8b c8		 mov	 ecx, eax
  009a3	e8 00 00 00 00	 call	 _byteswap_ulong
  009a8	89 45 18	 mov	 DWORD PTR F_ECBLOK$[rbp], eax

; 4107 :     for(i=0;i<16;i++)

  009ab	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  009b2	eb 08		 jmp	 SHORT $LN13@ecpsvm_dol
$LN11@ecpsvm_dol:
  009b4	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  009b7	ff c0		 inc	 eax
  009b9	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN13@ecpsvm_dol:
  009bc	83 7d 04 10	 cmp	 DWORD PTR i$[rbp], 16
  009c0	7d 51		 jge	 SHORT $LN12@ecpsvm_dol

; 4108 :     {
; 4109 :         ecb_p=MADDR(F_ECBLOK+(i*4),USE_REAL_ADDR,regs,ACCTYPE_READ,0);

  009c2	8b 45 18	 mov	 eax, DWORD PTR F_ECBLOK$[rbp]
  009c5	8b 4d 04	 mov	 ecx, DWORD PTR i$[rbp]
  009c8	8d 04 88	 lea	 eax, DWORD PTR [rax+rcx*4]
  009cb	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  009d0	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  009d8	4c 8b 8c 24 b0
	64 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  009e0	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  009e6	ba 01 00 00 00	 mov	 edx, 1
  009eb	8b c8		 mov	 ecx, eax
  009ed	e8 00 00 00 00	 call	 s370_maddr_l
  009f2	48 89 45 30	 mov	 QWORD PTR ecb_p$[rbp], rax

; 4110 :         ocrs[i]=fetch_fw(ecb_p);

  009f6	48 8b 4d 30	 mov	 rcx, QWORD PTR ecb_p$[rbp]
  009fa	e8 00 00 00 00	 call	 fetch_fw_noswap
  009ff	8b c8		 mov	 ecx, eax
  00a01	e8 00 00 00 00	 call	 _byteswap_ulong
  00a06	48 63 4d 04	 movsxd	 rcx, DWORD PTR i$[rbp]
  00a0a	89 84 8d 00 61
	01 00		 mov	 DWORD PTR ocrs$[rbp+rcx*4], eax

; 4111 :     }

  00a11	eb a1		 jmp	 SHORT $LN11@ecpsvm_dol
$LN12@ecpsvm_dol:

; 4112 :     }

  00a13	eb 55		 jmp	 SHORT $LN58@ecpsvm_dol
$LN57@ecpsvm_dol:

; 4113 :     else
; 4114 :     {
; 4115 :         F_ECBLOK=vmb+VMECEXT;  /* Update ECBLOK ADDRESS for VCR0 Update */

  00a15	8b 45 24	 mov	 eax, DWORD PTR vmb$[rbp]
  00a18	83 c0 0c	 add	 eax, 12
  00a1b	89 45 18	 mov	 DWORD PTR F_ECBLOK$[rbp], eax

; 4116 :     ecb_p=MADDR(F_ECBLOK,USE_REAL_ADDR,regs,ACCTYPE_READ,0);

  00a1e	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  00a23	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00a2b	4c 8b 8c 24 b0
	64 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  00a33	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00a39	ba 01 00 00 00	 mov	 edx, 1
  00a3e	8b 4d 18	 mov	 ecx, DWORD PTR F_ECBLOK$[rbp]
  00a41	e8 00 00 00 00	 call	 s370_maddr_l
  00a46	48 89 45 30	 mov	 QWORD PTR ecb_p$[rbp], rax

; 4117 :         /* Load OLD CR0 From VMBLOK */
; 4118 :     ocrs[0]=fetch_fw(ecb_p);

  00a4a	48 8b 4d 30	 mov	 rcx, QWORD PTR ecb_p$[rbp]
  00a4e	e8 00 00 00 00	 call	 fetch_fw_noswap
  00a53	8b c8		 mov	 ecx, eax
  00a55	e8 00 00 00 00	 call	 _byteswap_ulong
  00a5a	b9 04 00 00 00	 mov	 ecx, 4
  00a5f	48 6b c9 00	 imul	 rcx, rcx, 0
  00a63	89 84 0d 00 61
	01 00		 mov	 DWORD PTR ocrs$[rbp+rcx], eax
$LN58@ecpsvm_dol:

; 4119 :     }
; 4120 :     for(i=0;i<16;i++)

  00a6a	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00a71	eb 08		 jmp	 SHORT $LN16@ecpsvm_dol
$LN14@ecpsvm_dol:
  00a73	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  00a76	ff c0		 inc	 eax
  00a78	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN16@ecpsvm_dol:
  00a7b	83 7d 04 10	 cmp	 DWORD PTR i$[rbp], 16
  00a7f	7d 23		 jge	 SHORT $LN15@ecpsvm_dol

; 4121 :     {
; 4122 :         rcrs[i]=regs->CR_L(i);

  00a81	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  00a84	ff c0		 inc	 eax
  00a86	48 98		 cdqe
  00a88	48 63 4d 04	 movsxd	 rcx, DWORD PTR i$[rbp]
  00a8c	48 8b 94 24 b0
	64 01 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00a94	8b 84 c2 00 06
	00 00		 mov	 eax, DWORD PTR [rdx+rax*8+1536]
  00a9b	89 84 8d 80 61
	01 00		 mov	 DWORD PTR rcrs$[rbp+rcx*4], eax

; 4123 :     }

  00aa2	eb cf		 jmp	 SHORT $LN14@ecpsvm_dol
$LN15@ecpsvm_dol:

; 4124 :     /* Source safely loaded into "crs" array */
; 4125 :     /* Load the CRS - exit from loop if it's not possible */
; 4126 :     DEBUG_SASSISTX(LCTL,MSGBUF(buf, "SASSIST LCTL %d,%d : Modifying %d cregs",r1,r3,numcrs));

  00aa4	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00aaa	c1 e8 02	 shr	 eax, 2
  00aad	83 e0 01	 and	 eax, 1
  00ab0	85 c0		 test	 eax, eax
  00ab2	74 33		 je	 SHORT $LN59@ecpsvm_dol
  00ab4	8b 45 0c	 mov	 eax, DWORD PTR numcrs$[rbp]
  00ab7	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00abb	8b 84 24 c0 64
	01 00		 mov	 eax, DWORD PTR r3$[rsp]
  00ac2	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00ac6	44 8b 8c 24 b8
	64 01 00	 mov	 r9d, DWORD PTR r1$[rsp]
  00ace	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174680
  00ad5	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00ada	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00ae1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN59@ecpsvm_dol:

; 4127 :     DEBUG_SASSISTX(LCTL,WRMSG(HHC90000, "D", buf));

  00ae7	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00aed	c1 e8 02	 shr	 eax, 2
  00af0	83 e0 01	 and	 eax, 1
  00af3	85 c0		 test	 eax, eax
  00af5	74 53		 je	 SHORT $LN60@ecpsvm_dol
  00af7	b9 01 00 00 00	 mov	 ecx, 1
  00afc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b02	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00b09	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00b0e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174682
  00b15	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b1a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174683
  00b21	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b26	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b2b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b31	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174684
  00b38	ba 1f 10 00 00	 mov	 edx, 4127		; 0000101fH
  00b3d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174685
  00b44	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN60@ecpsvm_dol:

; 4128 :     for(j=r1,i=0;i<numcrs;i++,j++)

  00b4a	8b 84 24 b8 64
	01 00		 mov	 eax, DWORD PTR r1$[rsp]
  00b51	89 45 00	 mov	 DWORD PTR j$[rbp], eax
  00b54	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  00b5b	eb 10		 jmp	 SHORT $LN19@ecpsvm_dol
$LN17@ecpsvm_dol:
  00b5d	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  00b60	ff c0		 inc	 eax
  00b62	89 45 04	 mov	 DWORD PTR i$[rbp], eax
  00b65	8b 45 00	 mov	 eax, DWORD PTR j$[rbp]
  00b68	ff c0		 inc	 eax
  00b6a	89 45 00	 mov	 DWORD PTR j$[rbp], eax
$LN19@ecpsvm_dol:
  00b6d	8b 45 0c	 mov	 eax, DWORD PTR numcrs$[rbp]
  00b70	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  00b73	0f 8d 2a 05 00
	00		 jge	 $LN18@ecpsvm_dol

; 4129 :     {
; 4130 :         if(j>15)

  00b79	83 7d 00 0f	 cmp	 DWORD PTR j$[rbp], 15
  00b7d	7e 09		 jle	 SHORT $LN61@ecpsvm_dol

; 4131 :         {
; 4132 :             j-=16;

  00b7f	8b 45 00	 mov	 eax, DWORD PTR j$[rbp]
  00b82	83 e8 10	 sub	 eax, 16
  00b85	89 45 00	 mov	 DWORD PTR j$[rbp], eax
$LN61@ecpsvm_dol:

; 4133 :         }
; 4134 :         switch(j)

  00b88	8b 45 00	 mov	 eax, DWORD PTR j$[rbp]
  00b8b	89 45 28	 mov	 DWORD PTR tv566[rbp], eax
  00b8e	83 7d 28 0f	 cmp	 DWORD PTR tv566[rbp], 15
  00b92	0f 87 06 05 00
	00		 ja	 $LN95@ecpsvm_dol
  00b98	48 63 45 28	 movsxd	 rax, DWORD PTR tv566[rbp]
  00b9c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00ba3	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN100@ecpsvm_dol[rcx+rax*4]
  00baa	48 03 c1	 add	 rax, rcx
  00bad	ff e0		 jmp	 rax
$LN62@ecpsvm_dol:

; 4135 :         {
; 4136 :             case 0:     /* CR0 Case */
; 4137 :                 /* Check 1st 2 bytes of CR0 - No change allowed */
; 4138 :                 if((ocrs[0] & 0xffff0000) != (crs[0] & 0xffff0000))

  00baf	b8 04 00 00 00	 mov	 eax, 4
  00bb4	48 6b c0 00	 imul	 rax, rax, 0
  00bb8	8b 84 05 00 61
	01 00		 mov	 eax, DWORD PTR ocrs$[rbp+rax]
  00bbf	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  00bc4	b9 04 00 00 00	 mov	 ecx, 4
  00bc9	48 6b c9 00	 imul	 rcx, rcx, 0
  00bcd	8b 8c 0d 40 61
	01 00		 mov	 ecx, DWORD PTR crs$[rbp+rcx]
  00bd4	81 e1 00 00 ff
	ff		 and	 ecx, -65536		; ffff0000H
  00bda	3b c1		 cmp	 eax, ecx
  00bdc	74 6d		 je	 SHORT $LN63@ecpsvm_dol

; 4139 :                 {
; 4140 :                     DEBUG_SASSISTX(LCTL,WRMSG(HHC90000, "D", "SASSIST LCTL Reject : CR0 High changed"));

  00bde	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00be4	c1 e8 02	 shr	 eax, 2
  00be7	83 e0 01	 and	 eax, 1
  00bea	85 c0		 test	 eax, eax
  00bec	74 53		 je	 SHORT $LN64@ecpsvm_dol
  00bee	b9 01 00 00 00	 mov	 ecx, 1
  00bf3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00bf9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174690
  00c00	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00c05	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174691
  00c0c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c11	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174692
  00c18	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c1d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c22	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c28	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174693
  00c2f	ba 2c 10 00 00	 mov	 edx, 4140		; 0000102cH
  00c34	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174694
  00c3b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN64@ecpsvm_dol:

; 4141 :                     return 1;

  00c41	b8 01 00 00 00	 mov	 eax, 1
  00c46	e9 d0 05 00 00	 jmp	 $LN1@ecpsvm_dol
$LN63@ecpsvm_dol:

; 4142 :                 }
; 4143 :                 /* Not allowed if : NEW mask is being enabled AND MICPEND AND PSW has EXT enabled */
; 4144 :                 if(vpregs.psw.sysmask & 0x01)

  00c4b	0f b6 85 f8 00
	00 00		 movzx	 eax, BYTE PTR vpregs$[rbp+120]
  00c52	83 e0 01	 and	 eax, 1
  00c55	85 c0		 test	 eax, eax
  00c57	0f 84 b1 00 00
	00		 je	 $LN65@ecpsvm_dol

; 4145 :                 {
; 4146 :                     if(micpend & 0x80)

  00c5d	0f b6 45 09	 movzx	 eax, BYTE PTR micpend$[rbp]
  00c61	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00c66	85 c0		 test	 eax, eax
  00c68	0f 84 a0 00 00
	00		 je	 $LN66@ecpsvm_dol

; 4147 :                     {
; 4148 :                         if((~(ocrs[0] & 0xffff)) & (crs[0] & 0xffff))

  00c6e	b8 04 00 00 00	 mov	 eax, 4
  00c73	48 6b c0 00	 imul	 rax, rax, 0
  00c77	8b 84 05 00 61
	01 00		 mov	 eax, DWORD PTR ocrs$[rbp+rax]
  00c7e	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00c83	f7 d0		 not	 eax
  00c85	b9 04 00 00 00	 mov	 ecx, 4
  00c8a	48 6b c9 00	 imul	 rcx, rcx, 0
  00c8e	8b 8c 0d 40 61
	01 00		 mov	 ecx, DWORD PTR crs$[rbp+rcx]
  00c95	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00c9b	23 c1		 and	 eax, ecx
  00c9d	85 c0		 test	 eax, eax
  00c9f	74 6d		 je	 SHORT $LN67@ecpsvm_dol

; 4149 :                         {
; 4150 :                             DEBUG_SASSISTX(LCTL,WRMSG(HHC90000, "D", "SASSIST LCTL Reject : CR0 EXTSM Enables new EXTS"));

  00ca1	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00ca7	c1 e8 02	 shr	 eax, 2
  00caa	83 e0 01	 and	 eax, 1
  00cad	85 c0		 test	 eax, eax
  00caf	74 53		 je	 SHORT $LN68@ecpsvm_dol
  00cb1	b9 01 00 00 00	 mov	 ecx, 1
  00cb6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00cbc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174699
  00cc3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00cc8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174700
  00ccf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00cd4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174701
  00cdb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ce0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ce5	41 b9 03 00 00
	00		 mov	 r9d, 3
  00ceb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174702
  00cf2	ba 36 10 00 00	 mov	 edx, 4150		; 00001036H
  00cf7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174703
  00cfe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN68@ecpsvm_dol:

; 4151 :                             return 1;

  00d04	b8 01 00 00 00	 mov	 eax, 1
  00d09	e9 0d 05 00 00	 jmp	 $LN1@ecpsvm_dol
$LN67@ecpsvm_dol:
$LN66@ecpsvm_dol:
$LN65@ecpsvm_dol:

; 4152 :                         }
; 4153 :                     }
; 4154 :                 }
; 4155 :                 ocrs[0]=crs[0];

  00d0e	b8 04 00 00 00	 mov	 eax, 4
  00d13	48 6b c0 00	 imul	 rax, rax, 0
  00d17	b9 04 00 00 00	 mov	 ecx, 4
  00d1c	48 6b c9 00	 imul	 rcx, rcx, 0
  00d20	8b 84 05 40 61
	01 00		 mov	 eax, DWORD PTR crs$[rbp+rax]
  00d27	89 84 0d 00 61
	01 00		 mov	 DWORD PTR ocrs$[rbp+rcx], eax

; 4156 :                 break;

  00d2e	e9 6b 03 00 00	 jmp	 $LN20@ecpsvm_dol
$LN69@ecpsvm_dol:

; 4157 :             case 1:
; 4158 :                 if(ocrs[1] != crs[1])

  00d33	b8 04 00 00 00	 mov	 eax, 4
  00d38	48 6b c0 01	 imul	 rax, rax, 1
  00d3c	b9 04 00 00 00	 mov	 ecx, 4
  00d41	48 6b c9 01	 imul	 rcx, rcx, 1
  00d45	8b 8c 0d 40 61
	01 00		 mov	 ecx, DWORD PTR crs$[rbp+rcx]
  00d4c	39 8c 05 00 61
	01 00		 cmp	 DWORD PTR ocrs$[rbp+rax], ecx
  00d53	74 6d		 je	 SHORT $LN70@ecpsvm_dol

; 4159 :                 {
; 4160 :                     DEBUG_SASSISTX(LCTL,WRMSG(HHC90000, "D", "SASSIST LCTL Reject : CR1 Updates shadow table"));

  00d55	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00d5b	c1 e8 02	 shr	 eax, 2
  00d5e	83 e0 01	 and	 eax, 1
  00d61	85 c0		 test	 eax, eax
  00d63	74 53		 je	 SHORT $LN71@ecpsvm_dol
  00d65	b9 01 00 00 00	 mov	 ecx, 1
  00d6a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00d70	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174707
  00d77	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00d7c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174708
  00d83	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00d88	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174709
  00d8f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00d94	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d99	41 b9 03 00 00
	00		 mov	 r9d, 3
  00d9f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174710
  00da6	ba 40 10 00 00	 mov	 edx, 4160		; 00001040H
  00dab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174711
  00db2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN71@ecpsvm_dol:

; 4161 :                     return 1;

  00db8	b8 01 00 00 00	 mov	 eax, 1
  00dbd	e9 59 04 00 00	 jmp	 $LN1@ecpsvm_dol
$LN70@ecpsvm_dol:

; 4162 :                 }
; 4163 :                 break;

  00dc2	e9 d7 02 00 00	 jmp	 $LN20@ecpsvm_dol
$LN72@ecpsvm_dol:

; 4164 :             case 2:
; 4165 :                 /* Not allowed if : NEW Channel mask is turned on AND micpend AND PSW Extended I/O Mask is on */
; 4166 :                 if(vpregs.psw.sysmask & 0x02)

  00dc7	0f b6 85 f8 00
	00 00		 movzx	 eax, BYTE PTR vpregs$[rbp+120]
  00dce	83 e0 02	 and	 eax, 2
  00dd1	85 c0		 test	 eax, eax
  00dd3	0f 84 a0 00 00
	00		 je	 $LN73@ecpsvm_dol

; 4167 :                 {
; 4168 :                     if((~ocrs[2]) & crs[2])

  00dd9	b8 04 00 00 00	 mov	 eax, 4
  00dde	48 6b c0 02	 imul	 rax, rax, 2
  00de2	8b 84 05 00 61
	01 00		 mov	 eax, DWORD PTR ocrs$[rbp+rax]
  00de9	f7 d0		 not	 eax
  00deb	b9 04 00 00 00	 mov	 ecx, 4
  00df0	48 6b c9 02	 imul	 rcx, rcx, 2
  00df4	23 84 0d 40 61
	01 00		 and	 eax, DWORD PTR crs$[rbp+rcx]
  00dfb	85 c0		 test	 eax, eax
  00dfd	74 7a		 je	 SHORT $LN74@ecpsvm_dol

; 4169 :                     {
; 4170 :                         if(micpend & 0x80)

  00dff	0f b6 45 09	 movzx	 eax, BYTE PTR micpend$[rbp]
  00e03	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00e08	85 c0		 test	 eax, eax
  00e0a	74 6d		 je	 SHORT $LN75@ecpsvm_dol

; 4171 :                         {
; 4172 :                             DEBUG_SASSISTX(LCTL,WRMSG(HHC90000, "D", "SASSIST LCTL Reject : CR2 IOCSM Enables I/O Ints"));

  00e0c	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00e12	c1 e8 02	 shr	 eax, 2
  00e15	83 e0 01	 and	 eax, 1
  00e18	85 c0		 test	 eax, eax
  00e1a	74 53		 je	 SHORT $LN76@ecpsvm_dol
  00e1c	b9 01 00 00 00	 mov	 ecx, 1
  00e21	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00e27	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174717
  00e2e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00e33	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174718
  00e3a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00e3f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174719
  00e46	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00e4b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e50	41 b9 03 00 00
	00		 mov	 r9d, 3
  00e56	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174720
  00e5d	ba 4c 10 00 00	 mov	 edx, 4172		; 0000104cH
  00e62	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174721
  00e69	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN76@ecpsvm_dol:

; 4173 :                             return(1);

  00e6f	b8 01 00 00 00	 mov	 eax, 1
  00e74	e9 a2 03 00 00	 jmp	 $LN1@ecpsvm_dol
$LN75@ecpsvm_dol:
$LN74@ecpsvm_dol:
$LN73@ecpsvm_dol:

; 4174 :                         }
; 4175 :                     }
; 4176 :                 }
; 4177 :                 ocrs[2]=crs[2];

  00e79	b8 04 00 00 00	 mov	 eax, 4
  00e7e	48 6b c0 02	 imul	 rax, rax, 2
  00e82	b9 04 00 00 00	 mov	 ecx, 4
  00e87	48 6b c9 02	 imul	 rcx, rcx, 2
  00e8b	8b 84 05 40 61
	01 00		 mov	 eax, DWORD PTR crs$[rbp+rax]
  00e92	89 84 0d 00 61
	01 00		 mov	 DWORD PTR ocrs$[rbp+rcx], eax

; 4178 :                 break;

  00e99	e9 00 02 00 00	 jmp	 $LN20@ecpsvm_dol
$LN77@ecpsvm_dol:
$LN78@ecpsvm_dol:
$LN79@ecpsvm_dol:
$LN80@ecpsvm_dol:

; 4179 :             case 3:     /* DAS Control regs (not used under VM/370) */
; 4180 :             case 4:
; 4181 :             case 5:
; 4182 :             case 7:
; 4183 :                 /* 2017-01-12
; 4184 :                 LCTL assist should not update real CR3-CR7 with values
; 4185 :                 from a virtual machine execution of LCTL.  CR3-CR7 are
; 4186 :                 for the DAS feature.  If any of these four control regs
; 4187 :                 are specified then the assist should kick it back to CP
; 4188 :                 and let CP handle it, because different versions of VM
; 4189 :                 do different things with these CRs depending on whether
; 4190 :                 DAS is available or not.
; 4191 : 
; 4192 :                 original code:
; 4193 : 
; 4194 :                 ocrs[j]=crs[j];
; 4195 :                 rcrs[j]=crs[j]
; 4196 :                 break;
; 4197 : 
; 4198 :                 replacement code: */
; 4199 : 
; 4200 :                 DEBUG_SASSISTX(LCTL,MSGBUF(buf, "SASSIST LCTL Reject : DAS CR%d Update",j));

  00e9e	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00ea4	c1 e8 02	 shr	 eax, 2
  00ea7	83 e0 01	 and	 eax, 1
  00eaa	85 c0		 test	 eax, eax
  00eac	74 1d		 je	 SHORT $LN81@ecpsvm_dol
  00eae	44 8b 4d 00	 mov	 r9d, DWORD PTR j$[rbp]
  00eb2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174727
  00eb9	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00ebe	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00ec5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN81@ecpsvm_dol:

; 4201 :                 DEBUG_SASSISTX(LCTL,WRMSG(HHC90000, "D", buf));

  00ecb	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00ed1	c1 e8 02	 shr	 eax, 2
  00ed4	83 e0 01	 and	 eax, 1
  00ed7	85 c0		 test	 eax, eax
  00ed9	74 53		 je	 SHORT $LN82@ecpsvm_dol
  00edb	b9 01 00 00 00	 mov	 ecx, 1
  00ee0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00ee6	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00eed	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00ef2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174729
  00ef9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00efe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174730
  00f05	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00f0a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00f0f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00f15	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174731
  00f1c	ba 69 10 00 00	 mov	 edx, 4201		; 00001069H
  00f21	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174732
  00f28	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN82@ecpsvm_dol:

; 4202 :                 return(1);

  00f2e	b8 01 00 00 00	 mov	 eax, 1
  00f33	e9 e3 02 00 00	 jmp	 $LN1@ecpsvm_dol
$LN83@ecpsvm_dol:

; 4203 :                 /* end of 2017-01-12 */
; 4204 : 
; 4205 :             case 6: /* VCR6 Ignored on real machine */
; 4206 :                 ocrs[j]=crs[j];

  00f38	48 63 45 00	 movsxd	 rax, DWORD PTR j$[rbp]
  00f3c	48 63 4d 00	 movsxd	 rcx, DWORD PTR j$[rbp]
  00f40	8b 84 85 40 61
	01 00		 mov	 eax, DWORD PTR crs$[rbp+rax*4]
  00f47	89 84 8d 00 61
	01 00		 mov	 DWORD PTR ocrs$[rbp+rcx*4], eax

; 4207 :                 break;

  00f4e	e9 4b 01 00 00	 jmp	 $LN20@ecpsvm_dol
$LN84@ecpsvm_dol:

; 4208 :             case 8: /* Monitor Calls */
; 4209 :                 DEBUG_SASSISTX(LCTL,WRMSG(HHC90000, "D", "SASSIST LCTL Reject : MC CR8 Update"));

  00f53	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00f59	c1 e8 02	 shr	 eax, 2
  00f5c	83 e0 01	 and	 eax, 1
  00f5f	85 c0		 test	 eax, eax
  00f61	74 53		 je	 SHORT $LN85@ecpsvm_dol
  00f63	b9 01 00 00 00	 mov	 ecx, 1
  00f68	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00f6e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174736
  00f75	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00f7a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174737
  00f81	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00f86	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174738
  00f8d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00f92	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00f97	41 b9 03 00 00
	00		 mov	 r9d, 3
  00f9d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174739
  00fa4	ba 71 10 00 00	 mov	 edx, 4209		; 00001071H
  00fa9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174740
  00fb0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN85@ecpsvm_dol:

; 4210 :                 return(1);

  00fb6	b8 01 00 00 00	 mov	 eax, 1
  00fbb	e9 5b 02 00 00	 jmp	 $LN1@ecpsvm_dol
$LN86@ecpsvm_dol:
$LN87@ecpsvm_dol:
$LN88@ecpsvm_dol:

; 4211 :             case 9: /* PER Control Regs */
; 4212 :             case 10:
; 4213 :             case 11:
; 4214 :                 DEBUG_SASSISTX(LCTL,MSGBUF(buf, "SASSIST LCTL Reject : PER CR%d Update",j));

  00fc0	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00fc6	c1 e8 02	 shr	 eax, 2
  00fc9	83 e0 01	 and	 eax, 1
  00fcc	85 c0		 test	 eax, eax
  00fce	74 1d		 je	 SHORT $LN89@ecpsvm_dol
  00fd0	44 8b 4d 00	 mov	 r9d, DWORD PTR j$[rbp]
  00fd4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174745
  00fdb	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00fe0	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00fe7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN89@ecpsvm_dol:

; 4215 :                 DEBUG_SASSISTX(LCTL,WRMSG(HHC90000, "D", buf));

  00fed	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  00ff3	c1 e8 02	 shr	 eax, 2
  00ff6	83 e0 01	 and	 eax, 1
  00ff9	85 c0		 test	 eax, eax
  00ffb	74 53		 je	 SHORT $LN90@ecpsvm_dol
  00ffd	b9 01 00 00 00	 mov	 ecx, 1
  01002	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01008	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0100f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174747
  0101b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174748
  01027	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0102c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01031	41 b9 03 00 00
	00		 mov	 r9d, 3
  01037	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174749
  0103e	ba 77 10 00 00	 mov	 edx, 4215		; 00001077H
  01043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174750
  0104a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN90@ecpsvm_dol:

; 4216 :                 return(1);

  01050	b8 01 00 00 00	 mov	 eax, 1
  01055	e9 c1 01 00 00	 jmp	 $LN1@ecpsvm_dol
$LN91@ecpsvm_dol:
$LN92@ecpsvm_dol:

; 4217 :             case 12:
; 4218 :             case 13: /* 12-13 : Unused */
; 4219 :                 ocrs[j]=crs[j];

  0105a	48 63 45 00	 movsxd	 rax, DWORD PTR j$[rbp]
  0105e	48 63 4d 00	 movsxd	 rcx, DWORD PTR j$[rbp]
  01062	8b 84 85 40 61
	01 00		 mov	 eax, DWORD PTR crs$[rbp+rax*4]
  01069	89 84 8d 00 61
	01 00		 mov	 DWORD PTR ocrs$[rbp+rcx*4], eax

; 4220 :                 rcrs[j]=crs[j];

  01070	48 63 45 00	 movsxd	 rax, DWORD PTR j$[rbp]
  01074	48 63 4d 00	 movsxd	 rcx, DWORD PTR j$[rbp]
  01078	8b 84 85 40 61
	01 00		 mov	 eax, DWORD PTR crs$[rbp+rax*4]
  0107f	89 84 8d 80 61
	01 00		 mov	 DWORD PTR rcrs$[rbp+rcx*4], eax

; 4221 :                 break;

  01086	eb 16		 jmp	 SHORT $LN20@ecpsvm_dol
$LN93@ecpsvm_dol:
$LN94@ecpsvm_dol:

; 4222 :             case 14:
; 4223 :             case 15: /* 14-15 Machine Check & I/O Logout control (plus DAS) */
; 4224 :                 ocrs[j]=crs[j];

  01088	48 63 45 00	 movsxd	 rax, DWORD PTR j$[rbp]
  0108c	48 63 4d 00	 movsxd	 rcx, DWORD PTR j$[rbp]
  01090	8b 84 85 40 61
	01 00		 mov	 eax, DWORD PTR crs$[rbp+rax*4]
  01097	89 84 8d 00 61
	01 00		 mov	 DWORD PTR ocrs$[rbp+rcx*4], eax
$LN95@ecpsvm_dol:
$LN20@ecpsvm_dol:

; 4225 :                 break;
; 4226 :             default:
; 4227 :                 break;
; 4228 :         }
; 4229 :     }

  0109e	e9 ba fa ff ff	 jmp	 $LN17@ecpsvm_dol
$LN18@ecpsvm_dol:

; 4230 :     /* Update REAL Control regs */
; 4231 :     for(i=0;i<16;i++)

  010a3	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  010aa	eb 08		 jmp	 SHORT $LN24@ecpsvm_dol
$LN22@ecpsvm_dol:
  010ac	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  010af	ff c0		 inc	 eax
  010b1	89 45 04	 mov	 DWORD PTR i$[rbp], eax
$LN24@ecpsvm_dol:
  010b4	83 7d 04 10	 cmp	 DWORD PTR i$[rbp], 16
  010b8	7d 24		 jge	 SHORT $LN23@ecpsvm_dol

; 4232 :     {
; 4233 :         regs->CR_L(i)=rcrs[i];

  010ba	48 63 45 04	 movsxd	 rax, DWORD PTR i$[rbp]
  010be	8b 4d 04	 mov	 ecx, DWORD PTR i$[rbp]
  010c1	ff c1		 inc	 ecx
  010c3	48 63 c9	 movsxd	 rcx, ecx
  010c6	48 8b 94 24 b0
	64 01 00	 mov	 rdx, QWORD PTR regs$[rsp]
  010ce	8b 84 85 80 61
	01 00		 mov	 eax, DWORD PTR rcrs$[rbp+rax*4]
  010d5	89 84 ca 00 06
	00 00		 mov	 DWORD PTR [rdx+rcx*8+1536], eax

; 4234 :     }

  010dc	eb ce		 jmp	 SHORT $LN22@ecpsvm_dol
$LN23@ecpsvm_dol:

; 4235 :     /* Update ECBLOK/VMBLOK Control regs */
; 4236 :     /* Note : if F_ECBLOK addresses VMVCR0 in the VMBLOCK */
; 4237 :     /*        check has already been done to make sure    */
; 4238 :     /*        r1=0 and numcrs=1                           */
; 4239 :     for(j=r1,i=0;i<numcrs;i++,j++)

  010de	8b 84 24 b8 64
	01 00		 mov	 eax, DWORD PTR r1$[rsp]
  010e5	89 45 00	 mov	 DWORD PTR j$[rbp], eax
  010e8	c7 45 04 00 00
	00 00		 mov	 DWORD PTR i$[rbp], 0
  010ef	eb 10		 jmp	 SHORT $LN27@ecpsvm_dol
$LN25@ecpsvm_dol:
  010f1	8b 45 04	 mov	 eax, DWORD PTR i$[rbp]
  010f4	ff c0		 inc	 eax
  010f6	89 45 04	 mov	 DWORD PTR i$[rbp], eax
  010f9	8b 45 00	 mov	 eax, DWORD PTR j$[rbp]
  010fc	ff c0		 inc	 eax
  010fe	89 45 00	 mov	 DWORD PTR j$[rbp], eax
$LN27@ecpsvm_dol:
  01101	8b 45 0c	 mov	 eax, DWORD PTR numcrs$[rbp]
  01104	39 45 04	 cmp	 DWORD PTR i$[rbp], eax
  01107	7d 60		 jge	 SHORT $LN26@ecpsvm_dol

; 4240 :     {
; 4241 :         if(j>15)

  01109	83 7d 00 0f	 cmp	 DWORD PTR j$[rbp], 15
  0110d	7e 09		 jle	 SHORT $LN96@ecpsvm_dol

; 4242 :         {
; 4243 :             j-=16;

  0110f	8b 45 00	 mov	 eax, DWORD PTR j$[rbp]
  01112	83 e8 10	 sub	 eax, 16
  01115	89 45 00	 mov	 DWORD PTR j$[rbp], eax
$LN96@ecpsvm_dol:

; 4244 :         }
; 4245 :         ecb_p=MADDR(F_ECBLOK+(j*4),USE_REAL_ADDR,regs,ACCTYPE_WRITE,0);

  01118	8b 45 18	 mov	 eax, DWORD PTR F_ECBLOK$[rbp]
  0111b	8b 4d 00	 mov	 ecx, DWORD PTR j$[rbp]
  0111e	8d 04 88	 lea	 eax, DWORD PTR [rax+rcx*4]
  01121	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  01126	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0112e	4c 8b 8c 24 b0
	64 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  01136	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0113c	ba 01 00 00 00	 mov	 edx, 1
  01141	8b c8		 mov	 ecx, eax
  01143	e8 00 00 00 00	 call	 s370_maddr_l
  01148	48 89 45 30	 mov	 QWORD PTR ecb_p$[rbp], rax

; 4246 :         store_fw(ecb_p,ocrs[j]);

  0114c	48 63 45 00	 movsxd	 rax, DWORD PTR j$[rbp]
  01150	8b 8c 85 00 61
	01 00		 mov	 ecx, DWORD PTR ocrs$[rbp+rax*4]
  01157	e8 00 00 00 00	 call	 _byteswap_ulong
  0115c	8b d0		 mov	 edx, eax
  0115e	48 8b 4d 30	 mov	 rcx, QWORD PTR ecb_p$[rbp]
  01162	e8 00 00 00 00	 call	 store_fw_noswap

; 4247 :     }

  01167	eb 88		 jmp	 SHORT $LN25@ecpsvm_dol
$LN26@ecpsvm_dol:

; 4248 :     DEBUG_SASSISTX(LCTL,MSGBUF(buf, "SASSIST LCTL %d,%d Done",r1,r3));

  01169	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  0116f	c1 e8 02	 shr	 eax, 2
  01172	83 e0 01	 and	 eax, 1
  01175	85 c0		 test	 eax, eax
  01177	74 2c		 je	 SHORT $LN97@ecpsvm_dol
  01179	8b 84 24 c0 64
	01 00		 mov	 eax, DWORD PTR r3$[rsp]
  01180	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  01184	44 8b 8c 24 b8
	64 01 00	 mov	 r9d, DWORD PTR r1$[rsp]
  0118c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174758
  01193	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  01198	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0119f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN97@ecpsvm_dol:

; 4249 :     DEBUG_SASSISTX(LCTL,WRMSG(HHC90000, "D", buf));

  011a5	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+280
  011ab	c1 e8 02	 shr	 eax, 2
  011ae	83 e0 01	 and	 eax, 1
  011b1	85 c0		 test	 eax, eax
  011b3	74 53		 je	 SHORT $LN98@ecpsvm_dol
  011b5	b9 01 00 00 00	 mov	 ecx, 1
  011ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  011c0	48 8d 8d c0 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  011c7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  011cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174760
  011d3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  011d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174761
  011df	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  011e4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  011e9	41 b9 03 00 00
	00		 mov	 r9d, 3
  011ef	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174762
  011f6	ba 99 10 00 00	 mov	 edx, 4249		; 00001099H
  011fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174763
  01202	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN98@ecpsvm_dol:

; 4250 :     SASSIST_HIT(LCTL);

  01208	48 8b 05 10 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+272
  0120f	48 ff c0	 inc	 rax
  01212	48 89 05 10 01
	00 00		 mov	 QWORD PTR ecpsvm_sastats+272, rax

; 4251 :     return 0;

  01219	33 c0		 xor	 eax, eax
$LN1@ecpsvm_dol:

; 4252 : }

  0121b	48 8b 8d c0 63
	01 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  01222	48 33 cc	 xor	 rcx, rsp
  01225	e8 00 00 00 00	 call	 __security_check_cookie
  0122a	48 81 c4 98 64
	01 00		 add	 rsp, 91288		; 00016498H
  01231	5f		 pop	 rdi
  01232	5d		 pop	 rbp
  01233	c3		 ret	 0
$LN100@ecpsvm_dol:
  01234	00 00 00 00	 DD	 $LN62@ecpsvm_dol
  01238	00 00 00 00	 DD	 $LN69@ecpsvm_dol
  0123c	00 00 00 00	 DD	 $LN72@ecpsvm_dol
  01240	00 00 00 00	 DD	 $LN77@ecpsvm_dol
  01244	00 00 00 00	 DD	 $LN78@ecpsvm_dol
  01248	00 00 00 00	 DD	 $LN79@ecpsvm_dol
  0124c	00 00 00 00	 DD	 $LN83@ecpsvm_dol
  01250	00 00 00 00	 DD	 $LN80@ecpsvm_dol
  01254	00 00 00 00	 DD	 $LN84@ecpsvm_dol
  01258	00 00 00 00	 DD	 $LN86@ecpsvm_dol
  0125c	00 00 00 00	 DD	 $LN87@ecpsvm_dol
  01260	00 00 00 00	 DD	 $LN88@ecpsvm_dol
  01264	00 00 00 00	 DD	 $LN91@ecpsvm_dol
  01268	00 00 00 00	 DD	 $LN92@ecpsvm_dol
  0126c	00 00 00 00	 DD	 $LN93@ecpsvm_dol
  01270	00 00 00 00	 DD	 $LN94@ecpsvm_dol
ecpsvm_dolctl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
amicblok$ = 0
CR6$ = 4
micpend$ = 8
micevma$ = 9
micevma2$ = 10
micevma3$ = 11
micevma4$ = 12
vpswa$ = 16
tv343 = 24
tv354 = 32
vpswa_p$ = 40
tv372 = 48
micblok$ = 56
vpregs$ = 128
buf$ = 90368
__$ArrayPad$ = 90880
regs$ = 91120
r1$ = 91128
r3$ = 91136
b2$ = 91144
effective_addr2$ = 91152
ecpsvm_dodiag PROC

; 4268 : {

$LN42:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	b8 d8 63 01 00	 mov	 eax, 91096		; 000163d8H
  0001a	e8 00 00 00 00	 call	 __chkstk
  0001f	48 2b e0	 sub	 rsp, rax
  00022	48 8d ac 24 c0
	00 00 00	 lea	 rbp, QWORD PTR [rsp+192]
  0002a	48 83 e5 80	 and	 rbp, -128		; ffffffffffffff80H
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 85 00 63
	01 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 4269 :     SASSIST_PROLOG(DIAG);

  0003f	48 8b 84 24 f0
	63 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  00047	48 83 b8 80 08
	00 00 00	 cmp	 QWORD PTR [rax+2176], 0
  0004f	74 0a		 je	 SHORT $LN20@ecpsvm_dod
  00051	b8 01 00 00 00	 mov	 eax, 1
  00056	e9 45 07 00 00	 jmp	 $LN1@ecpsvm_dod
$LN20@ecpsvm_dod:
  0005b	48 8b 84 24 f0
	63 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  00063	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00067	83 e0 01	 and	 eax, 1
  0006a	85 c0		 test	 eax, eax
  0006c	75 0a		 jne	 SHORT $LN21@ecpsvm_dod
  0006e	b8 01 00 00 00	 mov	 eax, 1
  00073	e9 28 07 00 00	 jmp	 $LN1@ecpsvm_dod
$LN21@ecpsvm_dod:
  00078	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007f	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00085	c1 e8 11	 shr	 eax, 17
  00088	83 e0 01	 and	 eax, 1
  0008b	85 c0		 test	 eax, eax
  0008d	75 6d		 jne	 SHORT $LN22@ecpsvm_dod
  0008f	8b 05 38 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+312
  00095	c1 e8 02	 shr	 eax, 2
  00098	83 e0 01	 and	 eax, 1
  0009b	85 c0		 test	 eax, eax
  0009d	74 53		 je	 SHORT $LN23@ecpsvm_dod
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174913
  000b1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174914
  000bd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174915
  000c9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000ce	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d3	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174916
  000e0	ba ad 10 00 00	 mov	 edx, 4269		; 000010adH
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174917
  000ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN23@ecpsvm_dod:
  000f2	b8 01 00 00 00	 mov	 eax, 1
  000f7	e9 a4 06 00 00	 jmp	 $LN1@ecpsvm_dod
$LN22@ecpsvm_dod:
  000fc	8b 05 38 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+312
  00102	d1 e8		 shr	 eax, 1
  00104	83 e0 01	 and	 eax, 1
  00107	85 c0		 test	 eax, eax
  00109	75 6d		 jne	 SHORT $LN24@ecpsvm_dod
  0010b	8b 05 38 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+312
  00111	c1 e8 02	 shr	 eax, 2
  00114	83 e0 01	 and	 eax, 1
  00117	85 c0		 test	 eax, eax
  00119	74 53		 je	 SHORT $LN25@ecpsvm_dod
  0011b	b9 01 00 00 00	 mov	 ecx, 1
  00120	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00126	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174920
  0012d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00132	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174921
  00139	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0013e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174922
  00145	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0014a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00155	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174923
  0015c	ba ad 10 00 00	 mov	 edx, 4269		; 000010adH
  00161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174924
  00168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN25@ecpsvm_dod:
  0016e	b8 01 00 00 00	 mov	 eax, 1
  00173	e9 28 06 00 00	 jmp	 $LN1@ecpsvm_dod
$LN24@ecpsvm_dod:
  00178	b8 08 00 00 00	 mov	 eax, 8
  0017d	48 6b c0 07	 imul	 rax, rax, 7
  00181	48 8b 8c 24 f0
	63 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00189	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00190	89 45 04	 mov	 DWORD PTR CR6$[rbp], eax
  00193	48 8b 84 24 f0
	63 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  0019b	48 c7 80 78 07
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+1912], 0
  001a6	8b 45 04	 mov	 eax, DWORD PTR CR6$[rbp]
  001a9	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001ae	85 c0		 test	 eax, eax
  001b0	75 6d		 jne	 SHORT $LN26@ecpsvm_dod
  001b2	8b 05 38 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+312
  001b8	c1 e8 02	 shr	 eax, 2
  001bb	83 e0 01	 and	 eax, 1
  001be	85 c0		 test	 eax, eax
  001c0	74 53		 je	 SHORT $LN27@ecpsvm_dod
  001c2	b9 01 00 00 00	 mov	 ecx, 1
  001c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174927
  001d4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174928
  001e0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174929
  001ec	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001f1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f6	41 b9 03 00 00
	00		 mov	 r9d, 3
  001fc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174930
  00203	ba ad 10 00 00	 mov	 edx, 4269		; 000010adH
  00208	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174931
  0020f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN27@ecpsvm_dod:
  00215	b8 01 00 00 00	 mov	 eax, 1
  0021a	e9 81 05 00 00	 jmp	 $LN1@ecpsvm_dod
$LN26@ecpsvm_dod:
  0021f	8b 45 04	 mov	 eax, DWORD PTR CR6$[rbp]
  00222	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00227	85 c0		 test	 eax, eax
  00229	74 6d		 je	 SHORT $LN28@ecpsvm_dod
  0022b	8b 05 38 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+312
  00231	c1 e8 02	 shr	 eax, 2
  00234	83 e0 01	 and	 eax, 1
  00237	85 c0		 test	 eax, eax
  00239	74 53		 je	 SHORT $LN29@ecpsvm_dod
  0023b	b9 01 00 00 00	 mov	 ecx, 1
  00240	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00246	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174934
  0024d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00252	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174935
  00259	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174936
  00265	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0026a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0026f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00275	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174937
  0027c	ba ad 10 00 00	 mov	 edx, 4269		; 000010adH
  00281	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174938
  00288	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN29@ecpsvm_dod:
  0028e	b8 01 00 00 00	 mov	 eax, 1
  00293	e9 08 05 00 00	 jmp	 $LN1@ecpsvm_dod
$LN28@ecpsvm_dod:
  00298	48 8b 05 28 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+296
  0029f	48 ff c0	 inc	 rax
  002a2	48 89 05 28 01
	00 00		 mov	 QWORD PTR ecpsvm_sastats+296, rax
  002a9	8b 45 04	 mov	 eax, DWORD PTR CR6$[rbp]
  002ac	25 f8 ff ff 00	 and	 eax, 16777208		; 00fffff8H
  002b1	89 45 00	 mov	 DWORD PTR amicblok$[rbp], eax
  002b4	8b 45 00	 mov	 eax, DWORD PTR amicblok$[rbp]
  002b7	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002bc	4c 8b 84 24 f0
	63 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  002c4	ba fe ff ff ff	 mov	 edx, -2
  002c9	8b c8		 mov	 ecx, eax
  002cb	e8 00 00 00 00	 call	 s370_vfetch4
  002d0	89 45 38	 mov	 DWORD PTR micblok$[rbp], eax
  002d3	8b 45 00	 mov	 eax, DWORD PTR amicblok$[rbp]
  002d6	83 c0 04	 add	 eax, 4
  002d9	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002de	4c 8b 84 24 f0
	63 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  002e6	ba fe ff ff ff	 mov	 edx, -2
  002eb	8b c8		 mov	 ecx, eax
  002ed	e8 00 00 00 00	 call	 s370_vfetch4
  002f2	89 45 3c	 mov	 DWORD PTR micblok$[rbp+4], eax
  002f5	8b 45 00	 mov	 eax, DWORD PTR amicblok$[rbp]
  002f8	83 c0 08	 add	 eax, 8
  002fb	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00300	4c 8b 84 24 f0
	63 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  00308	ba fe ff ff ff	 mov	 edx, -2
  0030d	8b c8		 mov	 ecx, eax
  0030f	e8 00 00 00 00	 call	 s370_vfetch4
  00314	89 45 40	 mov	 DWORD PTR micblok$[rbp+8], eax
  00317	8b 45 00	 mov	 eax, DWORD PTR amicblok$[rbp]
  0031a	83 c0 0c	 add	 eax, 12
  0031d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00322	4c 8b 84 24 f0
	63 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  0032a	ba fe ff ff ff	 mov	 edx, -2
  0032f	8b c8		 mov	 ecx, eax
  00331	e8 00 00 00 00	 call	 s370_vfetch4
  00336	89 45 44	 mov	 DWORD PTR micblok$[rbp+12], eax
  00339	8b 45 00	 mov	 eax, DWORD PTR amicblok$[rbp]
  0033c	83 c0 10	 add	 eax, 16
  0033f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00344	4c 8b 84 24 f0
	63 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  0034c	ba fe ff ff ff	 mov	 edx, -2
  00351	8b c8		 mov	 ecx, eax
  00353	e8 00 00 00 00	 call	 s370_vfetch4
  00358	89 45 48	 mov	 DWORD PTR micblok$[rbp+16], eax
  0035b	8b 45 00	 mov	 eax, DWORD PTR amicblok$[rbp]
  0035e	83 c0 14	 add	 eax, 20
  00361	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00366	4c 8b 84 24 f0
	63 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  0036e	ba fe ff ff ff	 mov	 edx, -2
  00373	8b c8		 mov	 ecx, eax
  00375	e8 00 00 00 00	 call	 s370_vfetch4
  0037a	89 45 4c	 mov	 DWORD PTR micblok$[rbp+20], eax
  0037d	8b 45 40	 mov	 eax, DWORD PTR micblok$[rbp+8]
  00380	c1 e8 18	 shr	 eax, 24
  00383	88 45 08	 mov	 BYTE PTR micpend$[rbp], al
  00386	8b 45 40	 mov	 eax, DWORD PTR micblok$[rbp+8]
  00389	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0038e	89 45 10	 mov	 DWORD PTR vpswa$[rbp], eax
  00391	8b 45 4c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  00394	c1 e8 18	 shr	 eax, 24
  00397	88 45 09	 mov	 BYTE PTR micevma$[rbp], al
  0039a	8b 45 4c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  0039d	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  003a2	c1 e8 10	 shr	 eax, 16
  003a5	88 45 0a	 mov	 BYTE PTR micevma2$[rbp], al
  003a8	8b 45 4c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  003ab	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  003b0	c1 e8 08	 shr	 eax, 8
  003b3	88 45 0b	 mov	 BYTE PTR micevma3$[rbp], al
  003b6	8b 45 4c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  003b9	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003be	88 45 0c	 mov	 BYTE PTR micevma4$[rbp], al
  003c1	8b 45 04	 mov	 eax, DWORD PTR CR6$[rbp]
  003c4	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  003c9	85 c0		 test	 eax, eax
  003cb	74 37		 je	 SHORT $LN30@ecpsvm_dod
  003cd	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  003d2	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  003da	4c 8b 8c 24 f0
	63 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  003e2	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  003e8	ba 01 00 00 00	 mov	 edx, 1
  003ed	8b 4d 48	 mov	 ecx, DWORD PTR micblok$[rbp+16]
  003f0	e8 00 00 00 00	 call	 s370_maddr_l
  003f5	48 8b 8c 24 f0
	63 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003fd	48 89 81 78 07
	00 00		 mov	 QWORD PTR [rcx+1912], rax
$LN30@ecpsvm_dod:
  00404	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  00409	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00411	4c 8b 8c 24 f0
	63 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  00419	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0041f	ba 01 00 00 00	 mov	 edx, 1
  00424	8b 4d 10	 mov	 ecx, DWORD PTR vpswa$[rbp]
  00427	e8 00 00 00 00	 call	 s370_maddr_l
  0042c	48 89 45 28	 mov	 QWORD PTR vpswa_p$[rbp], rax
  00430	8b 05 38 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+312
  00436	c1 e8 02	 shr	 eax, 2
  00439	83 e0 01	 and	 eax, 1
  0043c	85 c0		 test	 eax, eax
  0043e	74 1d		 je	 SHORT $LN31@ecpsvm_dod
  00440	44 8b 4d 10	 mov	 r9d, DWORD PTR vpswa$[rbp]
  00444	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174941
  0044b	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00450	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00457	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN31@ecpsvm_dod:
  0045d	8b 05 38 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+312
  00463	c1 e8 02	 shr	 eax, 2
  00466	83 e0 01	 and	 eax, 1
  00469	85 c0		 test	 eax, eax
  0046b	74 53		 je	 SHORT $LN32@ecpsvm_dod
  0046d	b9 01 00 00 00	 mov	 ecx, 1
  00472	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00478	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0047f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00484	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174943
  0048b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00490	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174944
  00497	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0049c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004a1	41 b9 03 00 00
	00		 mov	 r9d, 3
  004a7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174945
  004ae	ba ad 10 00 00	 mov	 edx, 4269		; 000010adH
  004b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174946
  004ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN32@ecpsvm_dod:
  004c0	8b 05 38 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+312
  004c6	c1 e8 02	 shr	 eax, 2
  004c9	83 e0 01	 and	 eax, 1
  004cc	85 c0		 test	 eax, eax
  004ce	74 1d		 je	 SHORT $LN33@ecpsvm_dod
  004d0	44 8b 4d 04	 mov	 r9d, DWORD PTR CR6$[rbp]
  004d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174948
  004db	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  004e0	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  004e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN33@ecpsvm_dod:
  004ed	8b 05 38 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+312
  004f3	c1 e8 02	 shr	 eax, 2
  004f6	83 e0 01	 and	 eax, 1
  004f9	85 c0		 test	 eax, eax
  004fb	74 53		 je	 SHORT $LN34@ecpsvm_dod
  004fd	b9 01 00 00 00	 mov	 ecx, 1
  00502	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00508	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0050f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00514	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174950
  0051b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00520	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174951
  00527	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0052c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00531	41 b9 03 00 00
	00		 mov	 r9d, 3
  00537	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174952
  0053e	ba ad 10 00 00	 mov	 edx, 4269		; 000010adH
  00543	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174953
  0054a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN34@ecpsvm_dod:
  00550	8b 05 38 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+312
  00556	c1 e8 02	 shr	 eax, 2
  00559	83 e0 01	 and	 eax, 1
  0055c	85 c0		 test	 eax, eax
  0055e	74 1d		 je	 SHORT $LN35@ecpsvm_dod
  00560	44 8b 4d 48	 mov	 r9d, DWORD PTR micblok$[rbp+16]
  00564	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174955
  0056b	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00570	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00577	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN35@ecpsvm_dod:
  0057d	8b 05 38 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+312
  00583	c1 e8 02	 shr	 eax, 2
  00586	83 e0 01	 and	 eax, 1
  00589	85 c0		 test	 eax, eax
  0058b	74 53		 je	 SHORT $LN36@ecpsvm_dod
  0058d	b9 01 00 00 00	 mov	 ecx, 1
  00592	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00598	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0059f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174957
  005ab	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174958
  005b7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005bc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005c1	41 b9 03 00 00
	00		 mov	 r9d, 3
  005c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174959
  005ce	ba ad 10 00 00	 mov	 edx, 4269		; 000010adH
  005d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174960
  005da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN36@ecpsvm_dod:
  005e0	8b 05 38 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+312
  005e6	c1 e8 02	 shr	 eax, 2
  005e9	83 e0 01	 and	 eax, 1
  005ec	85 c0		 test	 eax, eax
  005ee	74 19		 je	 SHORT $LN37@ecpsvm_dod
  005f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174962
  005f7	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  005fc	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00603	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN37@ecpsvm_dod:
  00609	8b 05 38 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+312
  0060f	c1 e8 02	 shr	 eax, 2
  00612	83 e0 01	 and	 eax, 1
  00615	85 c0		 test	 eax, eax
  00617	74 48		 je	 SHORT $LN38@ecpsvm_dod
  00619	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00620	e8 00 00 00 00	 call	 strlen
  00625	48 98		 cdqe
  00627	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  0062c	48 2b c8	 sub	 rcx, rax
  0062f	48 8b c1	 mov	 rax, rcx
  00632	48 89 45 18	 mov	 QWORD PTR tv343[rbp], rax
  00636	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0063d	e8 00 00 00 00	 call	 strlen
  00642	48 8d 84 05 00
	61 01 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  0064a	48 8b 4d 18	 mov	 rcx, QWORD PTR tv343[rbp]
  0064e	44 8b c1	 mov	 r8d, ecx
  00651	48 8b d0	 mov	 rdx, rax
  00654	48 8b 8c 24 f0
	63 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0065c	e8 00 00 00 00	 call	 display_psw
$LN38@ecpsvm_dod:
$LN4@ecpsvm_dod:
  00661	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00668	48 63 80 90 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5264]
  0066f	48 89 45 20	 mov	 QWORD PTR tv354[rbp], rax
  00673	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  0067a	48 8b f9	 mov	 rdi, rcx
  0067d	33 c0		 xor	 eax, eax
  0067f	48 8b 4d 20	 mov	 rcx, QWORD PTR tv354[rbp]
  00683	f3 aa		 rep stosb
$LN7@ecpsvm_dod:
  00685	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG174964
  0068c	48 89 85 e8 00
	00 00		 mov	 QWORD PTR vpregs$[rbp+104], rax
  00693	33 c0		 xor	 eax, eax
  00695	85 c0		 test	 eax, eax
  00697	75 ec		 jne	 SHORT $LN7@ecpsvm_dod
  00699	33 c0		 xor	 eax, eax
  0069b	85 c0		 test	 eax, eax
  0069d	75 c2		 jne	 SHORT $LN4@ecpsvm_dod
  0069f	48 8b 55 28	 mov	 rdx, QWORD PTR vpswa_p$[rbp]
  006a3	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  006aa	e8 00 00 00 00	 call	 s370_load_psw
  006af	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  006b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG174965
  006bc	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
  006c9	8b 05 38 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+312
  006cf	c1 e8 02	 shr	 eax, 2
  006d2	83 e0 01	 and	 eax, 1
  006d5	85 c0		 test	 eax, eax
  006d7	74 47		 je	 SHORT $LN39@ecpsvm_dod
  006d9	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006e0	e8 00 00 00 00	 call	 strlen
  006e5	48 98		 cdqe
  006e7	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  006ec	48 2b c8	 sub	 rcx, rax
  006ef	48 8b c1	 mov	 rax, rcx
  006f2	48 89 45 30	 mov	 QWORD PTR tv372[rbp], rax
  006f6	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006fd	e8 00 00 00 00	 call	 strlen
  00702	48 8d 84 05 00
	61 01 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  0070a	48 8b 4d 30	 mov	 rcx, QWORD PTR tv372[rbp]
  0070e	44 8b c1	 mov	 r8d, ecx
  00711	48 8b d0	 mov	 rdx, rax
  00714	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  0071b	e8 00 00 00 00	 call	 display_psw
$LN39@ecpsvm_dod:
  00720	8b 05 38 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+312
  00726	c1 e8 02	 shr	 eax, 2
  00729	83 e0 01	 and	 eax, 1
  0072c	85 c0		 test	 eax, eax
  0072e	74 53		 je	 SHORT $LN40@ecpsvm_dod
  00730	b9 01 00 00 00	 mov	 ecx, 1
  00735	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0073b	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00742	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00747	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174968
  0074e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00753	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174969
  0075a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0075f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00764	41 b9 03 00 00
	00		 mov	 r9d, 3
  0076a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174970
  00771	ba ad 10 00 00	 mov	 edx, 4269		; 000010adH
  00776	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174971
  0077d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN40@ecpsvm_dod:
$LN10@ecpsvm_dod:

; 4270 :     UNREFERENCED(r1);

  00783	33 c0		 xor	 eax, eax
  00785	85 c0		 test	 eax, eax
  00787	75 fa		 jne	 SHORT $LN10@ecpsvm_dod
$LN13@ecpsvm_dod:

; 4271 :     UNREFERENCED(r3);

  00789	33 c0		 xor	 eax, eax
  0078b	85 c0		 test	 eax, eax
  0078d	75 fa		 jne	 SHORT $LN13@ecpsvm_dod
$LN16@ecpsvm_dod:

; 4272 :     UNREFERENCED(b2);

  0078f	33 c0		 xor	 eax, eax
  00791	85 c0		 test	 eax, eax
  00793	75 fa		 jne	 SHORT $LN16@ecpsvm_dod
$LN19@ecpsvm_dod:

; 4273 :     UNREFERENCED(effective_addr2);

  00795	33 c0		 xor	 eax, eax
  00797	85 c0		 test	 eax, eax
  00799	75 fa		 jne	 SHORT $LN19@ecpsvm_dod

; 4274 :     return(1);

  0079b	b8 01 00 00 00	 mov	 eax, 1
$LN1@ecpsvm_dod:

; 4275 : }

  007a0	48 8b 8d 00 63
	01 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  007a7	48 33 cc	 xor	 rcx, rsp
  007aa	e8 00 00 00 00	 call	 __security_check_cookie
  007af	48 81 c4 d8 63
	01 00		 add	 rsp, 91096		; 000163d8H
  007b6	5f		 pop	 rdi
  007b7	5d		 pop	 rbp
  007b8	c3		 ret	 0
ecpsvm_dodiag ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
amicblok$ = 0
CR6$ = 4
micpend$ = 8
micevma$ = 9
micevma2$ = 10
micevma3$ = 11
micevma4$ = 12
vpswa$ = 16
tv343 = 24
tv354 = 32
vpswa_p$ = 40
tv372 = 48
micblok$ = 56
vpregs$ = 128
buf$ = 90368
__$ArrayPad$ = 90880
regs$ = 91120
b2$ = 91128
e2$ = 91136
ecpsvm_dosio PROC

; 3869 : {

$LN36:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	b8 d8 63 01 00	 mov	 eax, 91096		; 000163d8H
  00015	e8 00 00 00 00	 call	 __chkstk
  0001a	48 2b e0	 sub	 rsp, rax
  0001d	48 8d ac 24 c0
	00 00 00	 lea	 rbp, QWORD PTR [rsp+192]
  00025	48 83 e5 80	 and	 rbp, -128		; ffffffffffffff80H
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c4	 xor	 rax, rsp
  00033	48 89 85 00 63
	01 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3870 :     SASSIST_PROLOG(SIO);

  0003a	48 8b 84 24 f0
	63 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  00042	48 83 b8 80 08
	00 00 00	 cmp	 QWORD PTR [rax+2176], 0
  0004a	74 0a		 je	 SHORT $LN14@ecpsvm_dos
  0004c	b8 01 00 00 00	 mov	 eax, 1
  00051	e9 39 07 00 00	 jmp	 $LN1@ecpsvm_dos
$LN14@ecpsvm_dos:
  00056	48 8b 84 24 f0
	63 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  0005e	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00062	83 e0 01	 and	 eax, 1
  00065	85 c0		 test	 eax, eax
  00067	75 0a		 jne	 SHORT $LN15@ecpsvm_dos
  00069	b8 01 00 00 00	 mov	 eax, 1
  0006e	e9 1c 07 00 00	 jmp	 $LN1@ecpsvm_dos
$LN15@ecpsvm_dos:
  00073	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007a	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00080	c1 e8 11	 shr	 eax, 17
  00083	83 e0 01	 and	 eax, 1
  00086	85 c0		 test	 eax, eax
  00088	75 6d		 jne	 SHORT $LN16@ecpsvm_dos
  0008a	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+184
  00090	c1 e8 02	 shr	 eax, 2
  00093	83 e0 01	 and	 eax, 1
  00096	85 c0		 test	 eax, eax
  00098	74 53		 je	 SHORT $LN17@ecpsvm_dos
  0009a	b9 01 00 00 00	 mov	 ecx, 1
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174009
  000ac	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174010
  000b8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174011
  000c4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ce	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174012
  000db	ba 1e 0f 00 00	 mov	 edx, 3870		; 00000f1eH
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174013
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@ecpsvm_dos:
  000ed	b8 01 00 00 00	 mov	 eax, 1
  000f2	e9 98 06 00 00	 jmp	 $LN1@ecpsvm_dos
$LN16@ecpsvm_dos:
  000f7	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+184
  000fd	d1 e8		 shr	 eax, 1
  000ff	83 e0 01	 and	 eax, 1
  00102	85 c0		 test	 eax, eax
  00104	75 6d		 jne	 SHORT $LN18@ecpsvm_dos
  00106	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+184
  0010c	c1 e8 02	 shr	 eax, 2
  0010f	83 e0 01	 and	 eax, 1
  00112	85 c0		 test	 eax, eax
  00114	74 53		 je	 SHORT $LN19@ecpsvm_dos
  00116	b9 01 00 00 00	 mov	 ecx, 1
  0011b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174016
  00128	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0012d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174017
  00134	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00139	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174018
  00140	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00145	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00150	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174019
  00157	ba 1e 0f 00 00	 mov	 edx, 3870		; 00000f1eH
  0015c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174020
  00163	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN19@ecpsvm_dos:
  00169	b8 01 00 00 00	 mov	 eax, 1
  0016e	e9 1c 06 00 00	 jmp	 $LN1@ecpsvm_dos
$LN18@ecpsvm_dos:
  00173	b8 08 00 00 00	 mov	 eax, 8
  00178	48 6b c0 07	 imul	 rax, rax, 7
  0017c	48 8b 8c 24 f0
	63 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00184	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  0018b	89 45 04	 mov	 DWORD PTR CR6$[rbp], eax
  0018e	48 8b 84 24 f0
	63 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  00196	48 c7 80 78 07
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+1912], 0
  001a1	8b 45 04	 mov	 eax, DWORD PTR CR6$[rbp]
  001a4	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001a9	85 c0		 test	 eax, eax
  001ab	75 6d		 jne	 SHORT $LN20@ecpsvm_dos
  001ad	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+184
  001b3	c1 e8 02	 shr	 eax, 2
  001b6	83 e0 01	 and	 eax, 1
  001b9	85 c0		 test	 eax, eax
  001bb	74 53		 je	 SHORT $LN21@ecpsvm_dos
  001bd	b9 01 00 00 00	 mov	 ecx, 1
  001c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174023
  001cf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174024
  001db	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174025
  001e7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f1	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174026
  001fe	ba 1e 0f 00 00	 mov	 edx, 3870		; 00000f1eH
  00203	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174027
  0020a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN21@ecpsvm_dos:
  00210	b8 01 00 00 00	 mov	 eax, 1
  00215	e9 75 05 00 00	 jmp	 $LN1@ecpsvm_dos
$LN20@ecpsvm_dos:
  0021a	8b 45 04	 mov	 eax, DWORD PTR CR6$[rbp]
  0021d	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00222	85 c0		 test	 eax, eax
  00224	74 6d		 je	 SHORT $LN22@ecpsvm_dos
  00226	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+184
  0022c	c1 e8 02	 shr	 eax, 2
  0022f	83 e0 01	 and	 eax, 1
  00232	85 c0		 test	 eax, eax
  00234	74 53		 je	 SHORT $LN23@ecpsvm_dos
  00236	b9 01 00 00 00	 mov	 ecx, 1
  0023b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00241	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174030
  00248	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0024d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174031
  00254	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00259	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174032
  00260	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00265	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0026a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00270	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174033
  00277	ba 1e 0f 00 00	 mov	 edx, 3870		; 00000f1eH
  0027c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174034
  00283	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN23@ecpsvm_dos:
  00289	b8 01 00 00 00	 mov	 eax, 1
  0028e	e9 fc 04 00 00	 jmp	 $LN1@ecpsvm_dos
$LN22@ecpsvm_dos:
  00293	48 8b 05 a8 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+168
  0029a	48 ff c0	 inc	 rax
  0029d	48 89 05 a8 00
	00 00		 mov	 QWORD PTR ecpsvm_sastats+168, rax
  002a4	8b 45 04	 mov	 eax, DWORD PTR CR6$[rbp]
  002a7	25 f8 ff ff 00	 and	 eax, 16777208		; 00fffff8H
  002ac	89 45 00	 mov	 DWORD PTR amicblok$[rbp], eax
  002af	8b 45 00	 mov	 eax, DWORD PTR amicblok$[rbp]
  002b2	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002b7	4c 8b 84 24 f0
	63 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  002bf	ba fe ff ff ff	 mov	 edx, -2
  002c4	8b c8		 mov	 ecx, eax
  002c6	e8 00 00 00 00	 call	 s370_vfetch4
  002cb	89 45 38	 mov	 DWORD PTR micblok$[rbp], eax
  002ce	8b 45 00	 mov	 eax, DWORD PTR amicblok$[rbp]
  002d1	83 c0 04	 add	 eax, 4
  002d4	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002d9	4c 8b 84 24 f0
	63 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  002e1	ba fe ff ff ff	 mov	 edx, -2
  002e6	8b c8		 mov	 ecx, eax
  002e8	e8 00 00 00 00	 call	 s370_vfetch4
  002ed	89 45 3c	 mov	 DWORD PTR micblok$[rbp+4], eax
  002f0	8b 45 00	 mov	 eax, DWORD PTR amicblok$[rbp]
  002f3	83 c0 08	 add	 eax, 8
  002f6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002fb	4c 8b 84 24 f0
	63 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  00303	ba fe ff ff ff	 mov	 edx, -2
  00308	8b c8		 mov	 ecx, eax
  0030a	e8 00 00 00 00	 call	 s370_vfetch4
  0030f	89 45 40	 mov	 DWORD PTR micblok$[rbp+8], eax
  00312	8b 45 00	 mov	 eax, DWORD PTR amicblok$[rbp]
  00315	83 c0 0c	 add	 eax, 12
  00318	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0031d	4c 8b 84 24 f0
	63 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  00325	ba fe ff ff ff	 mov	 edx, -2
  0032a	8b c8		 mov	 ecx, eax
  0032c	e8 00 00 00 00	 call	 s370_vfetch4
  00331	89 45 44	 mov	 DWORD PTR micblok$[rbp+12], eax
  00334	8b 45 00	 mov	 eax, DWORD PTR amicblok$[rbp]
  00337	83 c0 10	 add	 eax, 16
  0033a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0033f	4c 8b 84 24 f0
	63 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  00347	ba fe ff ff ff	 mov	 edx, -2
  0034c	8b c8		 mov	 ecx, eax
  0034e	e8 00 00 00 00	 call	 s370_vfetch4
  00353	89 45 48	 mov	 DWORD PTR micblok$[rbp+16], eax
  00356	8b 45 00	 mov	 eax, DWORD PTR amicblok$[rbp]
  00359	83 c0 14	 add	 eax, 20
  0035c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00361	4c 8b 84 24 f0
	63 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  00369	ba fe ff ff ff	 mov	 edx, -2
  0036e	8b c8		 mov	 ecx, eax
  00370	e8 00 00 00 00	 call	 s370_vfetch4
  00375	89 45 4c	 mov	 DWORD PTR micblok$[rbp+20], eax
  00378	8b 45 40	 mov	 eax, DWORD PTR micblok$[rbp+8]
  0037b	c1 e8 18	 shr	 eax, 24
  0037e	88 45 08	 mov	 BYTE PTR micpend$[rbp], al
  00381	8b 45 40	 mov	 eax, DWORD PTR micblok$[rbp+8]
  00384	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00389	89 45 10	 mov	 DWORD PTR vpswa$[rbp], eax
  0038c	8b 45 4c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  0038f	c1 e8 18	 shr	 eax, 24
  00392	88 45 09	 mov	 BYTE PTR micevma$[rbp], al
  00395	8b 45 4c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  00398	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  0039d	c1 e8 10	 shr	 eax, 16
  003a0	88 45 0a	 mov	 BYTE PTR micevma2$[rbp], al
  003a3	8b 45 4c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  003a6	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  003ab	c1 e8 08	 shr	 eax, 8
  003ae	88 45 0b	 mov	 BYTE PTR micevma3$[rbp], al
  003b1	8b 45 4c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  003b4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003b9	88 45 0c	 mov	 BYTE PTR micevma4$[rbp], al
  003bc	8b 45 04	 mov	 eax, DWORD PTR CR6$[rbp]
  003bf	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  003c4	85 c0		 test	 eax, eax
  003c6	74 37		 je	 SHORT $LN24@ecpsvm_dos
  003c8	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  003cd	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  003d5	4c 8b 8c 24 f0
	63 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  003dd	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  003e3	ba 01 00 00 00	 mov	 edx, 1
  003e8	8b 4d 48	 mov	 ecx, DWORD PTR micblok$[rbp+16]
  003eb	e8 00 00 00 00	 call	 s370_maddr_l
  003f0	48 8b 8c 24 f0
	63 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003f8	48 89 81 78 07
	00 00		 mov	 QWORD PTR [rcx+1912], rax
$LN24@ecpsvm_dos:
  003ff	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  00404	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0040c	4c 8b 8c 24 f0
	63 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  00414	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0041a	ba 01 00 00 00	 mov	 edx, 1
  0041f	8b 4d 10	 mov	 ecx, DWORD PTR vpswa$[rbp]
  00422	e8 00 00 00 00	 call	 s370_maddr_l
  00427	48 89 45 28	 mov	 QWORD PTR vpswa_p$[rbp], rax
  0042b	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+184
  00431	c1 e8 02	 shr	 eax, 2
  00434	83 e0 01	 and	 eax, 1
  00437	85 c0		 test	 eax, eax
  00439	74 1d		 je	 SHORT $LN25@ecpsvm_dos
  0043b	44 8b 4d 10	 mov	 r9d, DWORD PTR vpswa$[rbp]
  0043f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174037
  00446	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  0044b	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00452	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN25@ecpsvm_dos:
  00458	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+184
  0045e	c1 e8 02	 shr	 eax, 2
  00461	83 e0 01	 and	 eax, 1
  00464	85 c0		 test	 eax, eax
  00466	74 53		 je	 SHORT $LN26@ecpsvm_dos
  00468	b9 01 00 00 00	 mov	 ecx, 1
  0046d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00473	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0047a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0047f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174039
  00486	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0048b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174040
  00492	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00497	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0049c	41 b9 03 00 00
	00		 mov	 r9d, 3
  004a2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174041
  004a9	ba 1e 0f 00 00	 mov	 edx, 3870		; 00000f1eH
  004ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174042
  004b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN26@ecpsvm_dos:
  004bb	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+184
  004c1	c1 e8 02	 shr	 eax, 2
  004c4	83 e0 01	 and	 eax, 1
  004c7	85 c0		 test	 eax, eax
  004c9	74 1d		 je	 SHORT $LN27@ecpsvm_dos
  004cb	44 8b 4d 04	 mov	 r9d, DWORD PTR CR6$[rbp]
  004cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174044
  004d6	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  004db	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  004e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN27@ecpsvm_dos:
  004e8	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+184
  004ee	c1 e8 02	 shr	 eax, 2
  004f1	83 e0 01	 and	 eax, 1
  004f4	85 c0		 test	 eax, eax
  004f6	74 53		 je	 SHORT $LN28@ecpsvm_dos
  004f8	b9 01 00 00 00	 mov	 ecx, 1
  004fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00503	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0050a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0050f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174046
  00516	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0051b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174047
  00522	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00527	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0052c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00532	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174048
  00539	ba 1e 0f 00 00	 mov	 edx, 3870		; 00000f1eH
  0053e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174049
  00545	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN28@ecpsvm_dos:
  0054b	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+184
  00551	c1 e8 02	 shr	 eax, 2
  00554	83 e0 01	 and	 eax, 1
  00557	85 c0		 test	 eax, eax
  00559	74 1d		 je	 SHORT $LN29@ecpsvm_dos
  0055b	44 8b 4d 48	 mov	 r9d, DWORD PTR micblok$[rbp+16]
  0055f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174051
  00566	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  0056b	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00572	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN29@ecpsvm_dos:
  00578	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+184
  0057e	c1 e8 02	 shr	 eax, 2
  00581	83 e0 01	 and	 eax, 1
  00584	85 c0		 test	 eax, eax
  00586	74 53		 je	 SHORT $LN30@ecpsvm_dos
  00588	b9 01 00 00 00	 mov	 ecx, 1
  0058d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00593	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0059a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0059f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174053
  005a6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174054
  005b2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005b7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005bc	41 b9 03 00 00
	00		 mov	 r9d, 3
  005c2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174055
  005c9	ba 1e 0f 00 00	 mov	 edx, 3870		; 00000f1eH
  005ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174056
  005d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN30@ecpsvm_dos:
  005db	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+184
  005e1	c1 e8 02	 shr	 eax, 2
  005e4	83 e0 01	 and	 eax, 1
  005e7	85 c0		 test	 eax, eax
  005e9	74 19		 je	 SHORT $LN31@ecpsvm_dos
  005eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174058
  005f2	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  005f7	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  005fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN31@ecpsvm_dos:
  00604	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+184
  0060a	c1 e8 02	 shr	 eax, 2
  0060d	83 e0 01	 and	 eax, 1
  00610	85 c0		 test	 eax, eax
  00612	74 48		 je	 SHORT $LN32@ecpsvm_dos
  00614	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0061b	e8 00 00 00 00	 call	 strlen
  00620	48 98		 cdqe
  00622	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00627	48 2b c8	 sub	 rcx, rax
  0062a	48 8b c1	 mov	 rax, rcx
  0062d	48 89 45 18	 mov	 QWORD PTR tv343[rbp], rax
  00631	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00638	e8 00 00 00 00	 call	 strlen
  0063d	48 8d 84 05 00
	61 01 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  00645	48 8b 4d 18	 mov	 rcx, QWORD PTR tv343[rbp]
  00649	44 8b c1	 mov	 r8d, ecx
  0064c	48 8b d0	 mov	 rdx, rax
  0064f	48 8b 8c 24 f0
	63 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00657	e8 00 00 00 00	 call	 display_psw
$LN32@ecpsvm_dos:
$LN4@ecpsvm_dos:
  0065c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00663	48 63 80 90 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5264]
  0066a	48 89 45 20	 mov	 QWORD PTR tv354[rbp], rax
  0066e	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  00675	48 8b f9	 mov	 rdi, rcx
  00678	33 c0		 xor	 eax, eax
  0067a	48 8b 4d 20	 mov	 rcx, QWORD PTR tv354[rbp]
  0067e	f3 aa		 rep stosb
$LN7@ecpsvm_dos:
  00680	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG174060
  00687	48 89 85 e8 00
	00 00		 mov	 QWORD PTR vpregs$[rbp+104], rax
  0068e	33 c0		 xor	 eax, eax
  00690	85 c0		 test	 eax, eax
  00692	75 ec		 jne	 SHORT $LN7@ecpsvm_dos
  00694	33 c0		 xor	 eax, eax
  00696	85 c0		 test	 eax, eax
  00698	75 c2		 jne	 SHORT $LN4@ecpsvm_dos
  0069a	48 8b 55 28	 mov	 rdx, QWORD PTR vpswa_p$[rbp]
  0069e	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  006a5	e8 00 00 00 00	 call	 s370_load_psw
  006aa	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  006b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG174061
  006b7	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
  006c4	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+184
  006ca	c1 e8 02	 shr	 eax, 2
  006cd	83 e0 01	 and	 eax, 1
  006d0	85 c0		 test	 eax, eax
  006d2	74 47		 je	 SHORT $LN33@ecpsvm_dos
  006d4	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006db	e8 00 00 00 00	 call	 strlen
  006e0	48 98		 cdqe
  006e2	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  006e7	48 2b c8	 sub	 rcx, rax
  006ea	48 8b c1	 mov	 rax, rcx
  006ed	48 89 45 30	 mov	 QWORD PTR tv372[rbp], rax
  006f1	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006f8	e8 00 00 00 00	 call	 strlen
  006fd	48 8d 84 05 00
	61 01 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  00705	48 8b 4d 30	 mov	 rcx, QWORD PTR tv372[rbp]
  00709	44 8b c1	 mov	 r8d, ecx
  0070c	48 8b d0	 mov	 rdx, rax
  0070f	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  00716	e8 00 00 00 00	 call	 display_psw
$LN33@ecpsvm_dos:
  0071b	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+184
  00721	c1 e8 02	 shr	 eax, 2
  00724	83 e0 01	 and	 eax, 1
  00727	85 c0		 test	 eax, eax
  00729	74 53		 je	 SHORT $LN34@ecpsvm_dos
  0072b	b9 01 00 00 00	 mov	 ecx, 1
  00730	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00736	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0073d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00742	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174064
  00749	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0074e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174065
  00755	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0075a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0075f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00765	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174066
  0076c	ba 1e 0f 00 00	 mov	 edx, 3870		; 00000f1eH
  00771	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174067
  00778	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN34@ecpsvm_dos:
$LN10@ecpsvm_dos:

; 3871 :     UNREFERENCED(b2);

  0077e	33 c0		 xor	 eax, eax
  00780	85 c0		 test	 eax, eax
  00782	75 fa		 jne	 SHORT $LN10@ecpsvm_dos
$LN13@ecpsvm_dos:

; 3872 :     UNREFERENCED(e2);

  00784	33 c0		 xor	 eax, eax
  00786	85 c0		 test	 eax, eax
  00788	75 fa		 jne	 SHORT $LN13@ecpsvm_dos

; 3873 :     return(1);

  0078a	b8 01 00 00 00	 mov	 eax, 1
$LN1@ecpsvm_dos:

; 3874 : }

  0078f	48 8b 8d 00 63
	01 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00796	48 33 cc	 xor	 rcx, rsp
  00799	e8 00 00 00 00	 call	 __security_check_cookie
  0079e	48 81 c4 d8 63
	01 00		 add	 rsp, 91096		; 000163d8H
  007a5	5f		 pop	 rdi
  007a6	5d		 pop	 rbp
  007a7	c3		 ret	 0
ecpsvm_dosio ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
oldmask$ = 0
micevma$ = 1
micpend$ = 2
amicblok$ = 4
CR6$ = 8
micevma2$ = 12
micevma3$ = 13
micevma4$ = 14
vpswa$ = 16
vpswa_p$ = 24
tv343 = 32
tv354 = 40
tv372 = 48
tv412 = 56
tv577 = 64
tv612 = 72
micblok$ = 80
npregs$ = 128
vpregs$ = 90368
buf$ = 180608
__$ArrayPad$ = 181120
regs$ = 181360
b1$ = 181368
effective_addr1$ = 181376
imm2$ = 181384
ecpsvm_dostosm PROC

; 3933 : {

$LN58:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	b8 58 c4 02 00	 mov	 eax, 181336		; 0002c458H
  0001a	e8 00 00 00 00	 call	 __chkstk
  0001f	48 2b e0	 sub	 rsp, rax
  00022	48 8d ac 24 c0
	00 00 00	 lea	 rbp, QWORD PTR [rsp+192]
  0002a	48 83 e5 80	 and	 rbp, -128		; ffffffffffffff80H
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 85 80 c3
	02 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3934 :     BYTE  oldmask;
; 3935 :     REGS  npregs;
; 3936 : 
; 3937 :     SASSIST_PROLOG(STOSM);

  0003f	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00047	48 83 b8 80 08
	00 00 00	 cmp	 QWORD PTR [rax+2176], 0
  0004f	74 0a		 je	 SHORT $LN20@ecpsvm_dos
  00051	b8 01 00 00 00	 mov	 eax, 1
  00056	e9 46 0c 00 00	 jmp	 $LN1@ecpsvm_dos
$LN20@ecpsvm_dos:
  0005b	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00063	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00067	83 e0 01	 and	 eax, 1
  0006a	85 c0		 test	 eax, eax
  0006c	75 0a		 jne	 SHORT $LN21@ecpsvm_dos
  0006e	b8 01 00 00 00	 mov	 eax, 1
  00073	e9 29 0c 00 00	 jmp	 $LN1@ecpsvm_dos
$LN21@ecpsvm_dos:
  00078	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007f	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00085	c1 e8 11	 shr	 eax, 17
  00088	83 e0 01	 and	 eax, 1
  0008b	85 c0		 test	 eax, eax
  0008d	75 6d		 jne	 SHORT $LN22@ecpsvm_dos
  0008f	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  00095	c1 e8 02	 shr	 eax, 2
  00098	83 e0 01	 and	 eax, 1
  0009b	85 c0		 test	 eax, eax
  0009d	74 53		 je	 SHORT $LN23@ecpsvm_dos
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174293
  000b1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174294
  000bd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174295
  000c9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000ce	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d3	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174296
  000e0	ba 61 0f 00 00	 mov	 edx, 3937		; 00000f61H
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174297
  000ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN23@ecpsvm_dos:
  000f2	b8 01 00 00 00	 mov	 eax, 1
  000f7	e9 a5 0b 00 00	 jmp	 $LN1@ecpsvm_dos
$LN22@ecpsvm_dos:
  000fc	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  00102	d1 e8		 shr	 eax, 1
  00104	83 e0 01	 and	 eax, 1
  00107	85 c0		 test	 eax, eax
  00109	75 6d		 jne	 SHORT $LN24@ecpsvm_dos
  0010b	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  00111	c1 e8 02	 shr	 eax, 2
  00114	83 e0 01	 and	 eax, 1
  00117	85 c0		 test	 eax, eax
  00119	74 53		 je	 SHORT $LN25@ecpsvm_dos
  0011b	b9 01 00 00 00	 mov	 ecx, 1
  00120	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00126	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174300
  0012d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00132	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174301
  00139	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0013e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174302
  00145	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0014a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00155	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174303
  0015c	ba 61 0f 00 00	 mov	 edx, 3937		; 00000f61H
  00161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174304
  00168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN25@ecpsvm_dos:
  0016e	b8 01 00 00 00	 mov	 eax, 1
  00173	e9 29 0b 00 00	 jmp	 $LN1@ecpsvm_dos
$LN24@ecpsvm_dos:
  00178	b8 08 00 00 00	 mov	 eax, 8
  0017d	48 6b c0 07	 imul	 rax, rax, 7
  00181	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00189	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00190	89 45 08	 mov	 DWORD PTR CR6$[rbp], eax
  00193	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0019b	48 c7 80 78 07
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+1912], 0
  001a6	8b 45 08	 mov	 eax, DWORD PTR CR6$[rbp]
  001a9	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001ae	85 c0		 test	 eax, eax
  001b0	75 6d		 jne	 SHORT $LN26@ecpsvm_dos
  001b2	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  001b8	c1 e8 02	 shr	 eax, 2
  001bb	83 e0 01	 and	 eax, 1
  001be	85 c0		 test	 eax, eax
  001c0	74 53		 je	 SHORT $LN27@ecpsvm_dos
  001c2	b9 01 00 00 00	 mov	 ecx, 1
  001c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174307
  001d4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174308
  001e0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174309
  001ec	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001f1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f6	41 b9 03 00 00
	00		 mov	 r9d, 3
  001fc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174310
  00203	ba 61 0f 00 00	 mov	 edx, 3937		; 00000f61H
  00208	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174311
  0020f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN27@ecpsvm_dos:
  00215	b8 01 00 00 00	 mov	 eax, 1
  0021a	e9 82 0a 00 00	 jmp	 $LN1@ecpsvm_dos
$LN26@ecpsvm_dos:
  0021f	8b 45 08	 mov	 eax, DWORD PTR CR6$[rbp]
  00222	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00227	85 c0		 test	 eax, eax
  00229	74 6d		 je	 SHORT $LN28@ecpsvm_dos
  0022b	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  00231	c1 e8 02	 shr	 eax, 2
  00234	83 e0 01	 and	 eax, 1
  00237	85 c0		 test	 eax, eax
  00239	74 53		 je	 SHORT $LN29@ecpsvm_dos
  0023b	b9 01 00 00 00	 mov	 ecx, 1
  00240	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00246	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174314
  0024d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00252	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174315
  00259	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174316
  00265	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0026a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0026f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00275	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174317
  0027c	ba 61 0f 00 00	 mov	 edx, 3937		; 00000f61H
  00281	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174318
  00288	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN29@ecpsvm_dos:
  0028e	b8 01 00 00 00	 mov	 eax, 1
  00293	e9 09 0a 00 00	 jmp	 $LN1@ecpsvm_dos
$LN28@ecpsvm_dos:
  00298	48 8b 05 88 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+136
  0029f	48 ff c0	 inc	 rax
  002a2	48 89 05 88 00
	00 00		 mov	 QWORD PTR ecpsvm_sastats+136, rax
  002a9	8b 45 08	 mov	 eax, DWORD PTR CR6$[rbp]
  002ac	25 f8 ff ff 00	 and	 eax, 16777208		; 00fffff8H
  002b1	89 45 04	 mov	 DWORD PTR amicblok$[rbp], eax
  002b4	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  002b7	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002bc	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  002c4	ba fe ff ff ff	 mov	 edx, -2
  002c9	8b c8		 mov	 ecx, eax
  002cb	e8 00 00 00 00	 call	 s370_vfetch4
  002d0	89 45 50	 mov	 DWORD PTR micblok$[rbp], eax
  002d3	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  002d6	83 c0 04	 add	 eax, 4
  002d9	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002de	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  002e6	ba fe ff ff ff	 mov	 edx, -2
  002eb	8b c8		 mov	 ecx, eax
  002ed	e8 00 00 00 00	 call	 s370_vfetch4
  002f2	89 45 54	 mov	 DWORD PTR micblok$[rbp+4], eax
  002f5	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  002f8	83 c0 08	 add	 eax, 8
  002fb	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00300	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00308	ba fe ff ff ff	 mov	 edx, -2
  0030d	8b c8		 mov	 ecx, eax
  0030f	e8 00 00 00 00	 call	 s370_vfetch4
  00314	89 45 58	 mov	 DWORD PTR micblok$[rbp+8], eax
  00317	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  0031a	83 c0 0c	 add	 eax, 12
  0031d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00322	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  0032a	ba fe ff ff ff	 mov	 edx, -2
  0032f	8b c8		 mov	 ecx, eax
  00331	e8 00 00 00 00	 call	 s370_vfetch4
  00336	89 45 5c	 mov	 DWORD PTR micblok$[rbp+12], eax
  00339	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  0033c	83 c0 10	 add	 eax, 16
  0033f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00344	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  0034c	ba fe ff ff ff	 mov	 edx, -2
  00351	8b c8		 mov	 ecx, eax
  00353	e8 00 00 00 00	 call	 s370_vfetch4
  00358	89 45 60	 mov	 DWORD PTR micblok$[rbp+16], eax
  0035b	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  0035e	83 c0 14	 add	 eax, 20
  00361	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00366	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  0036e	ba fe ff ff ff	 mov	 edx, -2
  00373	8b c8		 mov	 ecx, eax
  00375	e8 00 00 00 00	 call	 s370_vfetch4
  0037a	89 45 64	 mov	 DWORD PTR micblok$[rbp+20], eax
  0037d	8b 45 58	 mov	 eax, DWORD PTR micblok$[rbp+8]
  00380	c1 e8 18	 shr	 eax, 24
  00383	88 45 02	 mov	 BYTE PTR micpend$[rbp], al
  00386	8b 45 58	 mov	 eax, DWORD PTR micblok$[rbp+8]
  00389	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0038e	89 45 10	 mov	 DWORD PTR vpswa$[rbp], eax
  00391	8b 45 64	 mov	 eax, DWORD PTR micblok$[rbp+20]
  00394	c1 e8 18	 shr	 eax, 24
  00397	88 45 01	 mov	 BYTE PTR micevma$[rbp], al
  0039a	8b 45 64	 mov	 eax, DWORD PTR micblok$[rbp+20]
  0039d	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  003a2	c1 e8 10	 shr	 eax, 16
  003a5	88 45 0c	 mov	 BYTE PTR micevma2$[rbp], al
  003a8	8b 45 64	 mov	 eax, DWORD PTR micblok$[rbp+20]
  003ab	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  003b0	c1 e8 08	 shr	 eax, 8
  003b3	88 45 0d	 mov	 BYTE PTR micevma3$[rbp], al
  003b6	8b 45 64	 mov	 eax, DWORD PTR micblok$[rbp+20]
  003b9	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003be	88 45 0e	 mov	 BYTE PTR micevma4$[rbp], al
  003c1	8b 45 08	 mov	 eax, DWORD PTR CR6$[rbp]
  003c4	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  003c9	85 c0		 test	 eax, eax
  003cb	74 37		 je	 SHORT $LN30@ecpsvm_dos
  003cd	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  003d2	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  003da	4c 8b 8c 24 70
	c4 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  003e2	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  003e8	ba 01 00 00 00	 mov	 edx, 1
  003ed	8b 4d 60	 mov	 ecx, DWORD PTR micblok$[rbp+16]
  003f0	e8 00 00 00 00	 call	 s370_maddr_l
  003f5	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003fd	48 89 81 78 07
	00 00		 mov	 QWORD PTR [rcx+1912], rax
$LN30@ecpsvm_dos:
  00404	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  00409	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00411	4c 8b 8c 24 70
	c4 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00419	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0041f	ba 01 00 00 00	 mov	 edx, 1
  00424	8b 4d 10	 mov	 ecx, DWORD PTR vpswa$[rbp]
  00427	e8 00 00 00 00	 call	 s370_maddr_l
  0042c	48 89 45 18	 mov	 QWORD PTR vpswa_p$[rbp], rax
  00430	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  00436	c1 e8 02	 shr	 eax, 2
  00439	83 e0 01	 and	 eax, 1
  0043c	85 c0		 test	 eax, eax
  0043e	74 1d		 je	 SHORT $LN31@ecpsvm_dos
  00440	44 8b 4d 10	 mov	 r9d, DWORD PTR vpswa$[rbp]
  00444	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174321
  0044b	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00450	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00457	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN31@ecpsvm_dos:
  0045d	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  00463	c1 e8 02	 shr	 eax, 2
  00466	83 e0 01	 and	 eax, 1
  00469	85 c0		 test	 eax, eax
  0046b	74 53		 je	 SHORT $LN32@ecpsvm_dos
  0046d	b9 01 00 00 00	 mov	 ecx, 1
  00472	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00478	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0047f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00484	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174323
  0048b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00490	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174324
  00497	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0049c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004a1	41 b9 03 00 00
	00		 mov	 r9d, 3
  004a7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174325
  004ae	ba 61 0f 00 00	 mov	 edx, 3937		; 00000f61H
  004b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174326
  004ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN32@ecpsvm_dos:
  004c0	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  004c6	c1 e8 02	 shr	 eax, 2
  004c9	83 e0 01	 and	 eax, 1
  004cc	85 c0		 test	 eax, eax
  004ce	74 1d		 je	 SHORT $LN33@ecpsvm_dos
  004d0	44 8b 4d 08	 mov	 r9d, DWORD PTR CR6$[rbp]
  004d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174328
  004db	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  004e0	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  004e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN33@ecpsvm_dos:
  004ed	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  004f3	c1 e8 02	 shr	 eax, 2
  004f6	83 e0 01	 and	 eax, 1
  004f9	85 c0		 test	 eax, eax
  004fb	74 53		 je	 SHORT $LN34@ecpsvm_dos
  004fd	b9 01 00 00 00	 mov	 ecx, 1
  00502	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00508	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0050f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00514	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174330
  0051b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00520	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174331
  00527	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0052c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00531	41 b9 03 00 00
	00		 mov	 r9d, 3
  00537	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174332
  0053e	ba 61 0f 00 00	 mov	 edx, 3937		; 00000f61H
  00543	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174333
  0054a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN34@ecpsvm_dos:
  00550	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  00556	c1 e8 02	 shr	 eax, 2
  00559	83 e0 01	 and	 eax, 1
  0055c	85 c0		 test	 eax, eax
  0055e	74 1d		 je	 SHORT $LN35@ecpsvm_dos
  00560	44 8b 4d 60	 mov	 r9d, DWORD PTR micblok$[rbp+16]
  00564	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174335
  0056b	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00570	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00577	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN35@ecpsvm_dos:
  0057d	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  00583	c1 e8 02	 shr	 eax, 2
  00586	83 e0 01	 and	 eax, 1
  00589	85 c0		 test	 eax, eax
  0058b	74 53		 je	 SHORT $LN36@ecpsvm_dos
  0058d	b9 01 00 00 00	 mov	 ecx, 1
  00592	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00598	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0059f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174337
  005ab	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174338
  005b7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005bc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005c1	41 b9 03 00 00
	00		 mov	 r9d, 3
  005c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174339
  005ce	ba 61 0f 00 00	 mov	 edx, 3937		; 00000f61H
  005d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174340
  005da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN36@ecpsvm_dos:
  005e0	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  005e6	c1 e8 02	 shr	 eax, 2
  005e9	83 e0 01	 and	 eax, 1
  005ec	85 c0		 test	 eax, eax
  005ee	74 19		 je	 SHORT $LN37@ecpsvm_dos
  005f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174342
  005f7	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  005fc	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00603	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN37@ecpsvm_dos:
  00609	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  0060f	c1 e8 02	 shr	 eax, 2
  00612	83 e0 01	 and	 eax, 1
  00615	85 c0		 test	 eax, eax
  00617	74 48		 je	 SHORT $LN38@ecpsvm_dos
  00619	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00620	e8 00 00 00 00	 call	 strlen
  00625	48 98		 cdqe
  00627	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  0062c	48 2b c8	 sub	 rcx, rax
  0062f	48 8b c1	 mov	 rax, rcx
  00632	48 89 45 20	 mov	 QWORD PTR tv343[rbp], rax
  00636	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0063d	e8 00 00 00 00	 call	 strlen
  00642	48 8d 84 05 80
	c1 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  0064a	48 8b 4d 20	 mov	 rcx, QWORD PTR tv343[rbp]
  0064e	44 8b c1	 mov	 r8d, ecx
  00651	48 8b d0	 mov	 rdx, rax
  00654	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0065c	e8 00 00 00 00	 call	 display_psw
$LN38@ecpsvm_dos:
$LN4@ecpsvm_dos:
  00661	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00668	48 63 80 90 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5264]
  0066f	48 89 45 28	 mov	 QWORD PTR tv354[rbp], rax
  00673	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  0067a	48 8b f9	 mov	 rdi, rcx
  0067d	33 c0		 xor	 eax, eax
  0067f	48 8b 4d 28	 mov	 rcx, QWORD PTR tv354[rbp]
  00683	f3 aa		 rep stosb
$LN7@ecpsvm_dos:
  00685	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG174344
  0068c	48 89 85 68 61
	01 00		 mov	 QWORD PTR vpregs$[rbp+104], rax
  00693	33 c0		 xor	 eax, eax
  00695	85 c0		 test	 eax, eax
  00697	75 ec		 jne	 SHORT $LN7@ecpsvm_dos
  00699	33 c0		 xor	 eax, eax
  0069b	85 c0		 test	 eax, eax
  0069d	75 c2		 jne	 SHORT $LN4@ecpsvm_dos
  0069f	48 8b 55 18	 mov	 rdx, QWORD PTR vpswa_p$[rbp]
  006a3	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  006aa	e8 00 00 00 00	 call	 s370_load_psw
  006af	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  006b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG174345
  006bc	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
  006c9	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  006cf	c1 e8 02	 shr	 eax, 2
  006d2	83 e0 01	 and	 eax, 1
  006d5	85 c0		 test	 eax, eax
  006d7	74 47		 je	 SHORT $LN39@ecpsvm_dos
  006d9	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006e0	e8 00 00 00 00	 call	 strlen
  006e5	48 98		 cdqe
  006e7	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  006ec	48 2b c8	 sub	 rcx, rax
  006ef	48 8b c1	 mov	 rax, rcx
  006f2	48 89 45 30	 mov	 QWORD PTR tv372[rbp], rax
  006f6	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006fd	e8 00 00 00 00	 call	 strlen
  00702	48 8d 84 05 80
	c1 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  0070a	48 8b 4d 30	 mov	 rcx, QWORD PTR tv372[rbp]
  0070e	44 8b c1	 mov	 r8d, ecx
  00711	48 8b d0	 mov	 rdx, rax
  00714	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  0071b	e8 00 00 00 00	 call	 display_psw
$LN39@ecpsvm_dos:
  00720	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  00726	c1 e8 02	 shr	 eax, 2
  00729	83 e0 01	 and	 eax, 1
  0072c	85 c0		 test	 eax, eax
  0072e	74 53		 je	 SHORT $LN40@ecpsvm_dos
  00730	b9 01 00 00 00	 mov	 ecx, 1
  00735	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0073b	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00742	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00747	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174348
  0074e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00753	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174349
  0075a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0075f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00764	41 b9 03 00 00
	00		 mov	 r9d, 3
  0076a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174350
  00771	ba 61 0f 00 00	 mov	 edx, 3937		; 00000f61H
  00776	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174351
  0077d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN40@ecpsvm_dos:

; 3938 : 
; 3939 :     /* Reject if MICEVMA says not to do STOSM sim */
; 3940 :     if(!(micevma & MICSTSM))

  00783	0f b6 45 01	 movzx	 eax, BYTE PTR micevma$[rbp]
  00787	83 e0 08	 and	 eax, 8
  0078a	85 c0		 test	 eax, eax
  0078c	75 6d		 jne	 SHORT $LN41@ecpsvm_dos

; 3941 :     {
; 3942 :         DEBUG_SASSISTX(STOSM,WRMSG(HHC90000, "D", "SASSIST STOSM reject : STOSM disabled in MICEVMA"));

  0078e	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  00794	c1 e8 02	 shr	 eax, 2
  00797	83 e0 01	 and	 eax, 1
  0079a	85 c0		 test	 eax, eax
  0079c	74 53		 je	 SHORT $LN42@ecpsvm_dos
  0079e	b9 01 00 00 00	 mov	 ecx, 1
  007a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174354
  007b0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  007b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174355
  007bc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174356
  007c8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007cd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007d2	41 b9 03 00 00
	00		 mov	 r9d, 3
  007d8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174357
  007df	ba 66 0f 00 00	 mov	 edx, 3942		; 00000f66H
  007e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174358
  007eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN42@ecpsvm_dos:

; 3943 :         return(1);

  007f1	b8 01 00 00 00	 mov	 eax, 1
  007f6	e9 a6 04 00 00	 jmp	 $LN1@ecpsvm_dos
$LN41@ecpsvm_dos:
$LN10@ecpsvm_dos:

; 3944 :     }
; 3945 : 
; 3946 :     INITPSEUDOREGS(npregs);

  007fb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00802	48 63 80 90 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5264]
  00809	48 89 45 38	 mov	 QWORD PTR tv412[rbp], rax
  0080d	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR npregs$[rbp]
  00814	48 8b f9	 mov	 rdi, rcx
  00817	33 c0		 xor	 eax, eax
  00819	48 8b 4d 38	 mov	 rcx, QWORD PTR tv412[rbp]
  0081d	f3 aa		 rep stosb
$LN13@ecpsvm_dos:
  0081f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG174359
  00826	48 89 85 e8 00
	00 00		 mov	 QWORD PTR npregs$[rbp+104], rax
  0082d	33 c0		 xor	 eax, eax
  0082f	85 c0		 test	 eax, eax
  00831	75 ec		 jne	 SHORT $LN13@ecpsvm_dos
  00833	33 c0		 xor	 eax, eax
  00835	85 c0		 test	 eax, eax
  00837	75 c2		 jne	 SHORT $LN10@ecpsvm_dos

; 3947 :     /* Load the virtual PSW in a new structure */
; 3948 :     ARCH_DEP(load_psw) (&npregs,vpswa_p);

  00839	48 8b 55 18	 mov	 rdx, QWORD PTR vpswa_p$[rbp]
  0083d	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR npregs$[rbp]
  00844	e8 00 00 00 00	 call	 s370_load_psw

; 3949 : 
; 3950 :     /* get the old system mask before we OR it */
; 3951 :     oldmask=npregs.psw.sysmask;

  00849	0f b6 85 f8 00
	00 00		 movzx	 eax, BYTE PTR npregs$[rbp+120]
  00850	88 45 00	 mov	 BYTE PTR oldmask$[rbp], al

; 3952 :     npregs.psw.sysmask|=imm2;

  00853	0f b6 85 f8 00
	00 00		 movzx	 eax, BYTE PTR npregs$[rbp+120]
  0085a	0b 84 24 88 c4
	02 00		 or	 eax, DWORD PTR imm2$[rsp]
  00861	88 85 f8 00 00
	00		 mov	 BYTE PTR npregs$[rbp+120], al

; 3953 : 
; 3954 :     if(ecpsvm_check_pswtrans(regs,&micblok,micpend,&vpregs,&npregs))       /* Check PSW transition capability */

  00867	48 8d 85 80 00
	00 00		 lea	 rax, QWORD PTR npregs$[rbp]
  0086e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00873	4c 8d 8d 00 61
	01 00		 lea	 r9, QWORD PTR vpregs$[rbp]
  0087a	44 0f b6 45 02	 movzx	 r8d, BYTE PTR micpend$[rbp]
  0087f	48 8d 55 50	 lea	 rdx, QWORD PTR micblok$[rbp]
  00883	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0088b	e8 00 00 00 00	 call	 ecpsvm_check_pswtrans
  00890	85 c0		 test	 eax, eax
  00892	74 6d		 je	 SHORT $LN43@ecpsvm_dos

; 3955 :     {
; 3956 :         DEBUG_SASSISTX(STOSM,WRMSG(HHC90000, "D", "SASSIST STOSM Reject : New PSW too complex"));

  00894	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  0089a	c1 e8 02	 shr	 eax, 2
  0089d	83 e0 01	 and	 eax, 1
  008a0	85 c0		 test	 eax, eax
  008a2	74 53		 je	 SHORT $LN44@ecpsvm_dos
  008a4	b9 01 00 00 00	 mov	 ecx, 1
  008a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174362
  008b6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  008bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174363
  008c2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174364
  008ce	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008d3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008d8	41 b9 03 00 00
	00		 mov	 r9d, 3
  008de	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174365
  008e5	ba 74 0f 00 00	 mov	 edx, 3956		; 00000f74H
  008ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174366
  008f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN44@ecpsvm_dos:

; 3957 :         return(1); /* Something in the NEW PSW we can't handle.. let CP do it */

  008f7	b8 01 00 00 00	 mov	 eax, 1
  008fc	e9 a0 03 00 00	 jmp	 $LN1@ecpsvm_dos
$LN43@ecpsvm_dos:

; 3958 :     }
; 3959 : 
; 3960 :     /* Set the old system  mask byte in the byte designated by the STOSM instruction */
; 3961 :     /* USE Normal vstoreb here! not only do we want tranlsation */
; 3962 :     /* but also store protection, change bit, etc.. */
; 3963 :     ARCH_DEP(vstoreb) (oldmask,effective_addr1,b1,regs);

  00901	4c 8b 8c 24 70
	c4 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00909	44 8b 84 24 78
	c4 02 00	 mov	 r8d, DWORD PTR b1$[rsp]
  00911	8b 94 24 80 c4
	02 00		 mov	 edx, DWORD PTR effective_addr1$[rsp]
  00918	0f b6 4d 00	 movzx	 ecx, BYTE PTR oldmask$[rbp]
  0091c	e8 00 00 00 00	 call	 s370_vstoreb
$LN16@ecpsvm_dos:

; 3964 : 
; 3965 :     /* While we are at it, set the IA in the V PSW */
; 3966 :     MAYBE_SET_PSW_IA_FROM_IP(regs);

  00921	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00929	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00931	74 43		 je	 SHORT $LN45@ecpsvm_dos
  00933	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0093b	8b 80 10 02 00
	00		 mov	 eax, DWORD PTR [rax+528]
  00941	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00949	48 8b 94 24 70
	c4 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00951	48 8b 92 00 02
	00 00		 mov	 rdx, QWORD PTR [rdx+512]
  00958	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0095c	48 2b ca	 sub	 rcx, rdx
  0095f	48 03 c1	 add	 rax, rcx
  00962	48 25 ff ff ff
	00		 and	 rax, 16777215		; 00ffffffH
  00968	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00970	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
$LN45@ecpsvm_dos:
  00976	33 c0		 xor	 eax, eax
  00978	85 c0		 test	 eax, eax
  0097a	75 a5		 jne	 SHORT $LN16@ecpsvm_dos
$LN19@ecpsvm_dos:

; 3967 :     SET_PSW_IA_AND_MAYBE_IP(&npregs, regs->psw.IA);

  0097c	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00984	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0098a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0098f	89 85 08 01 00
	00		 mov	 DWORD PTR npregs$[rbp+136], eax
  00995	48 83 bd 88 02
	00 00 00	 cmp	 QWORD PTR npregs$[rbp+520], 0
  0099d	74 41		 je	 SHORT $LN46@ecpsvm_dos
  0099f	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR npregs$[rbp+136]
  009a5	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  009aa	39 85 90 02 00
	00		 cmp	 DWORD PTR npregs$[rbp+528], eax
  009b0	75 23		 jne	 SHORT $LN47@ecpsvm_dos
  009b2	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR npregs$[rbp+136]
  009b8	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  009bd	8b c0		 mov	 eax, eax
  009bf	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR npregs$[rbp+512]
  009c6	48 0b c8	 or	 rcx, rax
  009c9	48 8b c1	 mov	 rax, rcx
  009cc	48 89 85 e8 00
	00 00		 mov	 QWORD PTR npregs$[rbp+104], rax
  009d3	eb 0b		 jmp	 SHORT $LN48@ecpsvm_dos
$LN47@ecpsvm_dos:
  009d5	48 c7 85 88 02
	00 00 00 00 00
	00		 mov	 QWORD PTR npregs$[rbp+520], 0
$LN48@ecpsvm_dos:
$LN46@ecpsvm_dos:
  009e0	33 c0		 xor	 eax, eax
  009e2	85 c0		 test	 eax, eax
  009e4	75 96		 jne	 SHORT $LN19@ecpsvm_dos

; 3968 : 
; 3969 :     /* Set the change bit for the V PSW */
; 3970 :     MADDR(vpswa,USE_REAL_ADDR,regs,ACCTYPE_WRITE,0);

  009e6	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  009eb	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  009f3	4c 8b 8c 24 70
	c4 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  009fb	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00a01	ba 01 00 00 00	 mov	 edx, 1
  00a06	8b 4d 10	 mov	 ecx, DWORD PTR vpswa$[rbp]
  00a09	e8 00 00 00 00	 call	 s370_maddr_l

; 3971 :     /* store the new PSW */
; 3972 :     ARCH_DEP(store_psw) (&npregs,vpswa_p);

  00a0e	48 8b 55 18	 mov	 rdx, QWORD PTR vpswa_p$[rbp]
  00a12	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR npregs$[rbp]
  00a19	e8 00 00 00 00	 call	 s370_store_psw

; 3973 :     DEBUG_SASSISTX(STOSM,MSGBUF(buf, "SASSIST STOSM Complete : old SM = %2.2X mask = %2.2X New SM = %2.2X",oldmask,imm2,npregs.psw.sysmask));

  00a1e	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  00a24	c1 e8 02	 shr	 eax, 2
  00a27	83 e0 01	 and	 eax, 1
  00a2a	85 c0		 test	 eax, eax
  00a2c	74 36		 je	 SHORT $LN49@ecpsvm_dos
  00a2e	0f b6 85 f8 00
	00 00		 movzx	 eax, BYTE PTR npregs$[rbp+120]
  00a35	0f b6 4d 00	 movzx	 ecx, BYTE PTR oldmask$[rbp]
  00a39	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00a3d	8b 84 24 88 c4
	02 00		 mov	 eax, DWORD PTR imm2$[rsp]
  00a44	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00a48	44 8b c9	 mov	 r9d, ecx
  00a4b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174372
  00a52	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00a57	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00a5e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN49@ecpsvm_dos:

; 3974 :     DEBUG_SASSISTX(STOSM,WRMSG(HHC90000, "D", buf));

  00a64	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  00a6a	c1 e8 02	 shr	 eax, 2
  00a6d	83 e0 01	 and	 eax, 1
  00a70	85 c0		 test	 eax, eax
  00a72	74 53		 je	 SHORT $LN50@ecpsvm_dos
  00a74	b9 01 00 00 00	 mov	 ecx, 1
  00a79	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a7f	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00a86	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a8b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174374
  00a92	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a97	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174375
  00a9e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00aa3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00aa8	41 b9 03 00 00
	00		 mov	 r9d, 3
  00aae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174376
  00ab5	ba 86 0f 00 00	 mov	 edx, 3974		; 00000f86H
  00aba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174377
  00ac1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN50@ecpsvm_dos:

; 3975 :     DEBUG_SASSISTX(STOSM,MSGBUF(buf, "SASSIST STOSM New VIRT "));

  00ac7	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  00acd	c1 e8 02	 shr	 eax, 2
  00ad0	83 e0 01	 and	 eax, 1
  00ad3	85 c0		 test	 eax, eax
  00ad5	74 19		 je	 SHORT $LN51@ecpsvm_dos
  00ad7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174379
  00ade	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00ae3	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00aea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN51@ecpsvm_dos:

; 3976 :     DEBUG_SASSISTX(STOSM,display_psw(&npregs, &buf[strlen(buf)], sizeof(buf)-(int)strlen(buf)));

  00af0	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  00af6	c1 e8 02	 shr	 eax, 2
  00af9	83 e0 01	 and	 eax, 1
  00afc	85 c0		 test	 eax, eax
  00afe	74 47		 je	 SHORT $LN52@ecpsvm_dos
  00b00	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00b07	e8 00 00 00 00	 call	 strlen
  00b0c	48 98		 cdqe
  00b0e	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00b13	48 2b c8	 sub	 rcx, rax
  00b16	48 8b c1	 mov	 rax, rcx
  00b19	48 89 45 40	 mov	 QWORD PTR tv577[rbp], rax
  00b1d	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00b24	e8 00 00 00 00	 call	 strlen
  00b29	48 8d 84 05 80
	c1 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  00b31	48 8b 4d 40	 mov	 rcx, QWORD PTR tv577[rbp]
  00b35	44 8b c1	 mov	 r8d, ecx
  00b38	48 8b d0	 mov	 rdx, rax
  00b3b	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR npregs$[rbp]
  00b42	e8 00 00 00 00	 call	 display_psw
$LN52@ecpsvm_dos:

; 3977 :     DEBUG_SASSISTX(STOSM,WRMSG(HHC90000, "D", buf));

  00b47	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  00b4d	c1 e8 02	 shr	 eax, 2
  00b50	83 e0 01	 and	 eax, 1
  00b53	85 c0		 test	 eax, eax
  00b55	74 53		 je	 SHORT $LN53@ecpsvm_dos
  00b57	b9 01 00 00 00	 mov	 ecx, 1
  00b5c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b62	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00b69	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00b6e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174382
  00b75	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b7a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174383
  00b81	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b86	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b8b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b91	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174384
  00b98	ba 89 0f 00 00	 mov	 edx, 3977		; 00000f89H
  00b9d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174385
  00ba4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN53@ecpsvm_dos:

; 3978 :     DEBUG_SASSISTX(STOSM,MSGBUF(buf, "SASSIST STOSM New REAL "));

  00baa	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  00bb0	c1 e8 02	 shr	 eax, 2
  00bb3	83 e0 01	 and	 eax, 1
  00bb6	85 c0		 test	 eax, eax
  00bb8	74 19		 je	 SHORT $LN54@ecpsvm_dos
  00bba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174387
  00bc1	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00bc6	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00bcd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN54@ecpsvm_dos:

; 3979 :     DEBUG_SASSISTX(STOSM,display_psw(regs, &buf[strlen(buf)], sizeof(buf)-(int)strlen(buf)));

  00bd3	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  00bd9	c1 e8 02	 shr	 eax, 2
  00bdc	83 e0 01	 and	 eax, 1
  00bdf	85 c0		 test	 eax, eax
  00be1	74 48		 je	 SHORT $LN55@ecpsvm_dos
  00be3	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00bea	e8 00 00 00 00	 call	 strlen
  00bef	48 98		 cdqe
  00bf1	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00bf6	48 2b c8	 sub	 rcx, rax
  00bf9	48 8b c1	 mov	 rax, rcx
  00bfc	48 89 45 48	 mov	 QWORD PTR tv612[rbp], rax
  00c00	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00c07	e8 00 00 00 00	 call	 strlen
  00c0c	48 8d 84 05 80
	c1 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  00c14	48 8b 4d 48	 mov	 rcx, QWORD PTR tv612[rbp]
  00c18	44 8b c1	 mov	 r8d, ecx
  00c1b	48 8b d0	 mov	 rdx, rax
  00c1e	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00c26	e8 00 00 00 00	 call	 display_psw
$LN55@ecpsvm_dos:

; 3980 :     DEBUG_SASSISTX(STOSM,WRMSG(HHC90000, "D", buf));

  00c2b	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+152
  00c31	c1 e8 02	 shr	 eax, 2
  00c34	83 e0 01	 and	 eax, 1
  00c37	85 c0		 test	 eax, eax
  00c39	74 53		 je	 SHORT $LN56@ecpsvm_dos
  00c3b	b9 01 00 00 00	 mov	 ecx, 1
  00c40	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c46	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00c4d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00c52	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174390
  00c59	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c5e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174391
  00c65	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c6a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c6f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c75	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174392
  00c7c	ba 8c 0f 00 00	 mov	 edx, 3980		; 00000f8cH
  00c81	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174393
  00c88	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN56@ecpsvm_dos:

; 3981 :     SASSIST_HIT(STOSM);

  00c8e	48 8b 05 90 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+144
  00c95	48 ff c0	 inc	 rax
  00c98	48 89 05 90 00
	00 00		 mov	 QWORD PTR ecpsvm_sastats+144, rax

; 3982 :     return(0);

  00c9f	33 c0		 xor	 eax, eax
$LN1@ecpsvm_dos:

; 3983 : }

  00ca1	48 8b 8d 80 c3
	02 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00ca8	48 33 cc	 xor	 rcx, rsp
  00cab	e8 00 00 00 00	 call	 __security_check_cookie
  00cb0	48 81 c4 58 c4
	02 00		 add	 rsp, 181336		; 0002c458H
  00cb7	5f		 pop	 rdi
  00cb8	5d		 pop	 rbp
  00cb9	c3		 ret	 0
ecpsvm_dostosm ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
oldmask$ = 0
micevma$ = 1
micpend$ = 2
amicblok$ = 4
CR6$ = 8
micevma2$ = 12
micevma3$ = 13
micevma4$ = 14
vpswa$ = 16
vpswa_p$ = 24
tv343 = 32
tv354 = 40
tv372 = 48
tv412 = 56
tv577 = 64
tv612 = 72
micblok$ = 80
npregs$ = 128
vpregs$ = 90368
buf$ = 180608
__$ArrayPad$ = 181120
regs$ = 181360
b1$ = 181368
effective_addr1$ = 181376
imm2$ = 181384
ecpsvm_dostnsm PROC

; 3879 : {

$LN58:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	b8 58 c4 02 00	 mov	 eax, 181336		; 0002c458H
  0001a	e8 00 00 00 00	 call	 __chkstk
  0001f	48 2b e0	 sub	 rsp, rax
  00022	48 8d ac 24 c0
	00 00 00	 lea	 rbp, QWORD PTR [rsp+192]
  0002a	48 83 e5 80	 and	 rbp, -128		; ffffffffffffff80H
  0002e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00035	48 33 c4	 xor	 rax, rsp
  00038	48 89 85 80 c3
	02 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3880 :     BYTE  oldmask;
; 3881 :     REGS  npregs;
; 3882 : 
; 3883 :     SASSIST_PROLOG(STNSM);

  0003f	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00047	48 83 b8 80 08
	00 00 00	 cmp	 QWORD PTR [rax+2176], 0
  0004f	74 0a		 je	 SHORT $LN20@ecpsvm_dos
  00051	b8 01 00 00 00	 mov	 eax, 1
  00056	e9 46 0c 00 00	 jmp	 $LN1@ecpsvm_dos
$LN20@ecpsvm_dos:
  0005b	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00063	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00067	83 e0 01	 and	 eax, 1
  0006a	85 c0		 test	 eax, eax
  0006c	75 0a		 jne	 SHORT $LN21@ecpsvm_dos
  0006e	b8 01 00 00 00	 mov	 eax, 1
  00073	e9 29 0c 00 00	 jmp	 $LN1@ecpsvm_dos
$LN21@ecpsvm_dos:
  00078	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007f	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00085	c1 e8 11	 shr	 eax, 17
  00088	83 e0 01	 and	 eax, 1
  0008b	85 c0		 test	 eax, eax
  0008d	75 6d		 jne	 SHORT $LN22@ecpsvm_dos
  0008f	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  00095	c1 e8 02	 shr	 eax, 2
  00098	83 e0 01	 and	 eax, 1
  0009b	85 c0		 test	 eax, eax
  0009d	74 53		 je	 SHORT $LN23@ecpsvm_dos
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174130
  000b1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174131
  000bd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174132
  000c9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000ce	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d3	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174133
  000e0	ba 2b 0f 00 00	 mov	 edx, 3883		; 00000f2bH
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174134
  000ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN23@ecpsvm_dos:
  000f2	b8 01 00 00 00	 mov	 eax, 1
  000f7	e9 a5 0b 00 00	 jmp	 $LN1@ecpsvm_dos
$LN22@ecpsvm_dos:
  000fc	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  00102	d1 e8		 shr	 eax, 1
  00104	83 e0 01	 and	 eax, 1
  00107	85 c0		 test	 eax, eax
  00109	75 6d		 jne	 SHORT $LN24@ecpsvm_dos
  0010b	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  00111	c1 e8 02	 shr	 eax, 2
  00114	83 e0 01	 and	 eax, 1
  00117	85 c0		 test	 eax, eax
  00119	74 53		 je	 SHORT $LN25@ecpsvm_dos
  0011b	b9 01 00 00 00	 mov	 ecx, 1
  00120	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00126	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174137
  0012d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00132	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174138
  00139	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0013e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174139
  00145	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0014a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00155	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174140
  0015c	ba 2b 0f 00 00	 mov	 edx, 3883		; 00000f2bH
  00161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174141
  00168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN25@ecpsvm_dos:
  0016e	b8 01 00 00 00	 mov	 eax, 1
  00173	e9 29 0b 00 00	 jmp	 $LN1@ecpsvm_dos
$LN24@ecpsvm_dos:
  00178	b8 08 00 00 00	 mov	 eax, 8
  0017d	48 6b c0 07	 imul	 rax, rax, 7
  00181	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00189	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00190	89 45 08	 mov	 DWORD PTR CR6$[rbp], eax
  00193	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0019b	48 c7 80 78 07
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+1912], 0
  001a6	8b 45 08	 mov	 eax, DWORD PTR CR6$[rbp]
  001a9	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001ae	85 c0		 test	 eax, eax
  001b0	75 6d		 jne	 SHORT $LN26@ecpsvm_dos
  001b2	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  001b8	c1 e8 02	 shr	 eax, 2
  001bb	83 e0 01	 and	 eax, 1
  001be	85 c0		 test	 eax, eax
  001c0	74 53		 je	 SHORT $LN27@ecpsvm_dos
  001c2	b9 01 00 00 00	 mov	 ecx, 1
  001c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174144
  001d4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174145
  001e0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174146
  001ec	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001f1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f6	41 b9 03 00 00
	00		 mov	 r9d, 3
  001fc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174147
  00203	ba 2b 0f 00 00	 mov	 edx, 3883		; 00000f2bH
  00208	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174148
  0020f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN27@ecpsvm_dos:
  00215	b8 01 00 00 00	 mov	 eax, 1
  0021a	e9 82 0a 00 00	 jmp	 $LN1@ecpsvm_dos
$LN26@ecpsvm_dos:
  0021f	8b 45 08	 mov	 eax, DWORD PTR CR6$[rbp]
  00222	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00227	85 c0		 test	 eax, eax
  00229	74 6d		 je	 SHORT $LN28@ecpsvm_dos
  0022b	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  00231	c1 e8 02	 shr	 eax, 2
  00234	83 e0 01	 and	 eax, 1
  00237	85 c0		 test	 eax, eax
  00239	74 53		 je	 SHORT $LN29@ecpsvm_dos
  0023b	b9 01 00 00 00	 mov	 ecx, 1
  00240	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00246	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174151
  0024d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00252	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174152
  00259	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174153
  00265	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0026a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0026f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00275	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174154
  0027c	ba 2b 0f 00 00	 mov	 edx, 3883		; 00000f2bH
  00281	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174155
  00288	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN29@ecpsvm_dos:
  0028e	b8 01 00 00 00	 mov	 eax, 1
  00293	e9 09 0a 00 00	 jmp	 $LN1@ecpsvm_dos
$LN28@ecpsvm_dos:
  00298	48 8b 05 68 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+104
  0029f	48 ff c0	 inc	 rax
  002a2	48 89 05 68 00
	00 00		 mov	 QWORD PTR ecpsvm_sastats+104, rax
  002a9	8b 45 08	 mov	 eax, DWORD PTR CR6$[rbp]
  002ac	25 f8 ff ff 00	 and	 eax, 16777208		; 00fffff8H
  002b1	89 45 04	 mov	 DWORD PTR amicblok$[rbp], eax
  002b4	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  002b7	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002bc	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  002c4	ba fe ff ff ff	 mov	 edx, -2
  002c9	8b c8		 mov	 ecx, eax
  002cb	e8 00 00 00 00	 call	 s370_vfetch4
  002d0	89 45 50	 mov	 DWORD PTR micblok$[rbp], eax
  002d3	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  002d6	83 c0 04	 add	 eax, 4
  002d9	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002de	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  002e6	ba fe ff ff ff	 mov	 edx, -2
  002eb	8b c8		 mov	 ecx, eax
  002ed	e8 00 00 00 00	 call	 s370_vfetch4
  002f2	89 45 54	 mov	 DWORD PTR micblok$[rbp+4], eax
  002f5	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  002f8	83 c0 08	 add	 eax, 8
  002fb	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00300	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00308	ba fe ff ff ff	 mov	 edx, -2
  0030d	8b c8		 mov	 ecx, eax
  0030f	e8 00 00 00 00	 call	 s370_vfetch4
  00314	89 45 58	 mov	 DWORD PTR micblok$[rbp+8], eax
  00317	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  0031a	83 c0 0c	 add	 eax, 12
  0031d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00322	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  0032a	ba fe ff ff ff	 mov	 edx, -2
  0032f	8b c8		 mov	 ecx, eax
  00331	e8 00 00 00 00	 call	 s370_vfetch4
  00336	89 45 5c	 mov	 DWORD PTR micblok$[rbp+12], eax
  00339	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  0033c	83 c0 10	 add	 eax, 16
  0033f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00344	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  0034c	ba fe ff ff ff	 mov	 edx, -2
  00351	8b c8		 mov	 ecx, eax
  00353	e8 00 00 00 00	 call	 s370_vfetch4
  00358	89 45 60	 mov	 DWORD PTR micblok$[rbp+16], eax
  0035b	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  0035e	83 c0 14	 add	 eax, 20
  00361	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00366	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  0036e	ba fe ff ff ff	 mov	 edx, -2
  00373	8b c8		 mov	 ecx, eax
  00375	e8 00 00 00 00	 call	 s370_vfetch4
  0037a	89 45 64	 mov	 DWORD PTR micblok$[rbp+20], eax
  0037d	8b 45 58	 mov	 eax, DWORD PTR micblok$[rbp+8]
  00380	c1 e8 18	 shr	 eax, 24
  00383	88 45 02	 mov	 BYTE PTR micpend$[rbp], al
  00386	8b 45 58	 mov	 eax, DWORD PTR micblok$[rbp+8]
  00389	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0038e	89 45 10	 mov	 DWORD PTR vpswa$[rbp], eax
  00391	8b 45 64	 mov	 eax, DWORD PTR micblok$[rbp+20]
  00394	c1 e8 18	 shr	 eax, 24
  00397	88 45 01	 mov	 BYTE PTR micevma$[rbp], al
  0039a	8b 45 64	 mov	 eax, DWORD PTR micblok$[rbp+20]
  0039d	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  003a2	c1 e8 10	 shr	 eax, 16
  003a5	88 45 0c	 mov	 BYTE PTR micevma2$[rbp], al
  003a8	8b 45 64	 mov	 eax, DWORD PTR micblok$[rbp+20]
  003ab	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  003b0	c1 e8 08	 shr	 eax, 8
  003b3	88 45 0d	 mov	 BYTE PTR micevma3$[rbp], al
  003b6	8b 45 64	 mov	 eax, DWORD PTR micblok$[rbp+20]
  003b9	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003be	88 45 0e	 mov	 BYTE PTR micevma4$[rbp], al
  003c1	8b 45 08	 mov	 eax, DWORD PTR CR6$[rbp]
  003c4	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  003c9	85 c0		 test	 eax, eax
  003cb	74 37		 je	 SHORT $LN30@ecpsvm_dos
  003cd	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  003d2	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  003da	4c 8b 8c 24 70
	c4 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  003e2	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  003e8	ba 01 00 00 00	 mov	 edx, 1
  003ed	8b 4d 60	 mov	 ecx, DWORD PTR micblok$[rbp+16]
  003f0	e8 00 00 00 00	 call	 s370_maddr_l
  003f5	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003fd	48 89 81 78 07
	00 00		 mov	 QWORD PTR [rcx+1912], rax
$LN30@ecpsvm_dos:
  00404	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  00409	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00411	4c 8b 8c 24 70
	c4 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00419	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0041f	ba 01 00 00 00	 mov	 edx, 1
  00424	8b 4d 10	 mov	 ecx, DWORD PTR vpswa$[rbp]
  00427	e8 00 00 00 00	 call	 s370_maddr_l
  0042c	48 89 45 18	 mov	 QWORD PTR vpswa_p$[rbp], rax
  00430	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  00436	c1 e8 02	 shr	 eax, 2
  00439	83 e0 01	 and	 eax, 1
  0043c	85 c0		 test	 eax, eax
  0043e	74 1d		 je	 SHORT $LN31@ecpsvm_dos
  00440	44 8b 4d 10	 mov	 r9d, DWORD PTR vpswa$[rbp]
  00444	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174158
  0044b	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00450	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00457	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN31@ecpsvm_dos:
  0045d	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  00463	c1 e8 02	 shr	 eax, 2
  00466	83 e0 01	 and	 eax, 1
  00469	85 c0		 test	 eax, eax
  0046b	74 53		 je	 SHORT $LN32@ecpsvm_dos
  0046d	b9 01 00 00 00	 mov	 ecx, 1
  00472	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00478	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0047f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00484	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174160
  0048b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00490	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174161
  00497	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0049c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004a1	41 b9 03 00 00
	00		 mov	 r9d, 3
  004a7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174162
  004ae	ba 2b 0f 00 00	 mov	 edx, 3883		; 00000f2bH
  004b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174163
  004ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN32@ecpsvm_dos:
  004c0	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  004c6	c1 e8 02	 shr	 eax, 2
  004c9	83 e0 01	 and	 eax, 1
  004cc	85 c0		 test	 eax, eax
  004ce	74 1d		 je	 SHORT $LN33@ecpsvm_dos
  004d0	44 8b 4d 08	 mov	 r9d, DWORD PTR CR6$[rbp]
  004d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174165
  004db	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  004e0	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  004e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN33@ecpsvm_dos:
  004ed	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  004f3	c1 e8 02	 shr	 eax, 2
  004f6	83 e0 01	 and	 eax, 1
  004f9	85 c0		 test	 eax, eax
  004fb	74 53		 je	 SHORT $LN34@ecpsvm_dos
  004fd	b9 01 00 00 00	 mov	 ecx, 1
  00502	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00508	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0050f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00514	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174167
  0051b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00520	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174168
  00527	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0052c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00531	41 b9 03 00 00
	00		 mov	 r9d, 3
  00537	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174169
  0053e	ba 2b 0f 00 00	 mov	 edx, 3883		; 00000f2bH
  00543	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174170
  0054a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN34@ecpsvm_dos:
  00550	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  00556	c1 e8 02	 shr	 eax, 2
  00559	83 e0 01	 and	 eax, 1
  0055c	85 c0		 test	 eax, eax
  0055e	74 1d		 je	 SHORT $LN35@ecpsvm_dos
  00560	44 8b 4d 60	 mov	 r9d, DWORD PTR micblok$[rbp+16]
  00564	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174172
  0056b	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00570	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00577	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN35@ecpsvm_dos:
  0057d	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  00583	c1 e8 02	 shr	 eax, 2
  00586	83 e0 01	 and	 eax, 1
  00589	85 c0		 test	 eax, eax
  0058b	74 53		 je	 SHORT $LN36@ecpsvm_dos
  0058d	b9 01 00 00 00	 mov	 ecx, 1
  00592	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00598	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0059f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174174
  005ab	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174175
  005b7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005bc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005c1	41 b9 03 00 00
	00		 mov	 r9d, 3
  005c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174176
  005ce	ba 2b 0f 00 00	 mov	 edx, 3883		; 00000f2bH
  005d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174177
  005da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN36@ecpsvm_dos:
  005e0	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  005e6	c1 e8 02	 shr	 eax, 2
  005e9	83 e0 01	 and	 eax, 1
  005ec	85 c0		 test	 eax, eax
  005ee	74 19		 je	 SHORT $LN37@ecpsvm_dos
  005f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174179
  005f7	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  005fc	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00603	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN37@ecpsvm_dos:
  00609	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  0060f	c1 e8 02	 shr	 eax, 2
  00612	83 e0 01	 and	 eax, 1
  00615	85 c0		 test	 eax, eax
  00617	74 48		 je	 SHORT $LN38@ecpsvm_dos
  00619	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00620	e8 00 00 00 00	 call	 strlen
  00625	48 98		 cdqe
  00627	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  0062c	48 2b c8	 sub	 rcx, rax
  0062f	48 8b c1	 mov	 rax, rcx
  00632	48 89 45 20	 mov	 QWORD PTR tv343[rbp], rax
  00636	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0063d	e8 00 00 00 00	 call	 strlen
  00642	48 8d 84 05 80
	c1 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  0064a	48 8b 4d 20	 mov	 rcx, QWORD PTR tv343[rbp]
  0064e	44 8b c1	 mov	 r8d, ecx
  00651	48 8b d0	 mov	 rdx, rax
  00654	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0065c	e8 00 00 00 00	 call	 display_psw
$LN38@ecpsvm_dos:
$LN4@ecpsvm_dos:
  00661	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00668	48 63 80 90 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5264]
  0066f	48 89 45 28	 mov	 QWORD PTR tv354[rbp], rax
  00673	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  0067a	48 8b f9	 mov	 rdi, rcx
  0067d	33 c0		 xor	 eax, eax
  0067f	48 8b 4d 28	 mov	 rcx, QWORD PTR tv354[rbp]
  00683	f3 aa		 rep stosb
$LN7@ecpsvm_dos:
  00685	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG174181
  0068c	48 89 85 68 61
	01 00		 mov	 QWORD PTR vpregs$[rbp+104], rax
  00693	33 c0		 xor	 eax, eax
  00695	85 c0		 test	 eax, eax
  00697	75 ec		 jne	 SHORT $LN7@ecpsvm_dos
  00699	33 c0		 xor	 eax, eax
  0069b	85 c0		 test	 eax, eax
  0069d	75 c2		 jne	 SHORT $LN4@ecpsvm_dos
  0069f	48 8b 55 18	 mov	 rdx, QWORD PTR vpswa_p$[rbp]
  006a3	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  006aa	e8 00 00 00 00	 call	 s370_load_psw
  006af	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  006b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG174182
  006bc	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
  006c9	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  006cf	c1 e8 02	 shr	 eax, 2
  006d2	83 e0 01	 and	 eax, 1
  006d5	85 c0		 test	 eax, eax
  006d7	74 47		 je	 SHORT $LN39@ecpsvm_dos
  006d9	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006e0	e8 00 00 00 00	 call	 strlen
  006e5	48 98		 cdqe
  006e7	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  006ec	48 2b c8	 sub	 rcx, rax
  006ef	48 8b c1	 mov	 rax, rcx
  006f2	48 89 45 30	 mov	 QWORD PTR tv372[rbp], rax
  006f6	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006fd	e8 00 00 00 00	 call	 strlen
  00702	48 8d 84 05 80
	c1 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  0070a	48 8b 4d 30	 mov	 rcx, QWORD PTR tv372[rbp]
  0070e	44 8b c1	 mov	 r8d, ecx
  00711	48 8b d0	 mov	 rdx, rax
  00714	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  0071b	e8 00 00 00 00	 call	 display_psw
$LN39@ecpsvm_dos:
  00720	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  00726	c1 e8 02	 shr	 eax, 2
  00729	83 e0 01	 and	 eax, 1
  0072c	85 c0		 test	 eax, eax
  0072e	74 53		 je	 SHORT $LN40@ecpsvm_dos
  00730	b9 01 00 00 00	 mov	 ecx, 1
  00735	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0073b	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00742	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00747	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174185
  0074e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00753	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174186
  0075a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0075f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00764	41 b9 03 00 00
	00		 mov	 r9d, 3
  0076a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174187
  00771	ba 2b 0f 00 00	 mov	 edx, 3883		; 00000f2bH
  00776	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174188
  0077d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN40@ecpsvm_dos:

; 3884 : 
; 3885 :     /* Reject if MICEVMA says not to do STNSM sim */
; 3886 :     if(!(micevma & MICSTSM))

  00783	0f b6 45 01	 movzx	 eax, BYTE PTR micevma$[rbp]
  00787	83 e0 08	 and	 eax, 8
  0078a	85 c0		 test	 eax, eax
  0078c	75 6d		 jne	 SHORT $LN41@ecpsvm_dos

; 3887 :     {
; 3888 :         DEBUG_SASSISTX(STNSM,WRMSG(HHC90000, "D", "SASSIST STNSM reject : STNSM disabled in MICEVMA"));

  0078e	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  00794	c1 e8 02	 shr	 eax, 2
  00797	83 e0 01	 and	 eax, 1
  0079a	85 c0		 test	 eax, eax
  0079c	74 53		 je	 SHORT $LN42@ecpsvm_dos
  0079e	b9 01 00 00 00	 mov	 ecx, 1
  007a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174191
  007b0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  007b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174192
  007bc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174193
  007c8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007cd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007d2	41 b9 03 00 00
	00		 mov	 r9d, 3
  007d8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174194
  007df	ba 30 0f 00 00	 mov	 edx, 3888		; 00000f30H
  007e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174195
  007eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN42@ecpsvm_dos:

; 3889 :         return(1);

  007f1	b8 01 00 00 00	 mov	 eax, 1
  007f6	e9 a6 04 00 00	 jmp	 $LN1@ecpsvm_dos
$LN41@ecpsvm_dos:
$LN10@ecpsvm_dos:

; 3890 :     }
; 3891 : 
; 3892 :     INITPSEUDOREGS(npregs);

  007fb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00802	48 63 80 90 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5264]
  00809	48 89 45 38	 mov	 QWORD PTR tv412[rbp], rax
  0080d	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR npregs$[rbp]
  00814	48 8b f9	 mov	 rdi, rcx
  00817	33 c0		 xor	 eax, eax
  00819	48 8b 4d 38	 mov	 rcx, QWORD PTR tv412[rbp]
  0081d	f3 aa		 rep stosb
$LN13@ecpsvm_dos:
  0081f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG174196
  00826	48 89 85 e8 00
	00 00		 mov	 QWORD PTR npregs$[rbp+104], rax
  0082d	33 c0		 xor	 eax, eax
  0082f	85 c0		 test	 eax, eax
  00831	75 ec		 jne	 SHORT $LN13@ecpsvm_dos
  00833	33 c0		 xor	 eax, eax
  00835	85 c0		 test	 eax, eax
  00837	75 c2		 jne	 SHORT $LN10@ecpsvm_dos

; 3893 :     /* Load the virtual PSW in a new structure */
; 3894 :     ARCH_DEP(load_psw) (&npregs,vpswa_p);

  00839	48 8b 55 18	 mov	 rdx, QWORD PTR vpswa_p$[rbp]
  0083d	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR npregs$[rbp]
  00844	e8 00 00 00 00	 call	 s370_load_psw

; 3895 : 
; 3896 :     /* get the old system mask before we AND it */
; 3897 :     oldmask=npregs.psw.sysmask;

  00849	0f b6 85 f8 00
	00 00		 movzx	 eax, BYTE PTR npregs$[rbp+120]
  00850	88 45 00	 mov	 BYTE PTR oldmask$[rbp], al

; 3898 :     npregs.psw.sysmask&=imm2;

  00853	0f b6 85 f8 00
	00 00		 movzx	 eax, BYTE PTR npregs$[rbp+120]
  0085a	23 84 24 88 c4
	02 00		 and	 eax, DWORD PTR imm2$[rsp]
  00861	88 85 f8 00 00
	00		 mov	 BYTE PTR npregs$[rbp+120], al

; 3899 : 
; 3900 :     if(ecpsvm_check_pswtrans(regs,&micblok,micpend,&vpregs,&npregs))       /* Check PSW transition capability */

  00867	48 8d 85 80 00
	00 00		 lea	 rax, QWORD PTR npregs$[rbp]
  0086e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00873	4c 8d 8d 00 61
	01 00		 lea	 r9, QWORD PTR vpregs$[rbp]
  0087a	44 0f b6 45 02	 movzx	 r8d, BYTE PTR micpend$[rbp]
  0087f	48 8d 55 50	 lea	 rdx, QWORD PTR micblok$[rbp]
  00883	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0088b	e8 00 00 00 00	 call	 ecpsvm_check_pswtrans
  00890	85 c0		 test	 eax, eax
  00892	74 6d		 je	 SHORT $LN43@ecpsvm_dos

; 3901 :     {
; 3902 :         DEBUG_SASSISTX(STNSM,WRMSG(HHC90000, "D", "SASSIST STNSM Reject : New PSW too complex"));

  00894	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  0089a	c1 e8 02	 shr	 eax, 2
  0089d	83 e0 01	 and	 eax, 1
  008a0	85 c0		 test	 eax, eax
  008a2	74 53		 je	 SHORT $LN44@ecpsvm_dos
  008a4	b9 01 00 00 00	 mov	 ecx, 1
  008a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174199
  008b6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  008bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174200
  008c2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174201
  008ce	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008d3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008d8	41 b9 03 00 00
	00		 mov	 r9d, 3
  008de	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174202
  008e5	ba 3e 0f 00 00	 mov	 edx, 3902		; 00000f3eH
  008ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174203
  008f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN44@ecpsvm_dos:

; 3903 :         return(1); /* Something in the NEW PSW we can't handle.. let CP do it */

  008f7	b8 01 00 00 00	 mov	 eax, 1
  008fc	e9 a0 03 00 00	 jmp	 $LN1@ecpsvm_dos
$LN43@ecpsvm_dos:

; 3904 :     }
; 3905 : 
; 3906 :     /* Set the old system  mask byte in the byte designated by the STNSM instruction */
; 3907 :     /* USE Normal vstoreb here! not only do we want tranlsation */
; 3908 :     /* but also store protection, change bit, etc.. */
; 3909 :     ARCH_DEP(vstoreb) (oldmask,effective_addr1,b1,regs);

  00901	4c 8b 8c 24 70
	c4 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00909	44 8b 84 24 78
	c4 02 00	 mov	 r8d, DWORD PTR b1$[rsp]
  00911	8b 94 24 80 c4
	02 00		 mov	 edx, DWORD PTR effective_addr1$[rsp]
  00918	0f b6 4d 00	 movzx	 ecx, BYTE PTR oldmask$[rbp]
  0091c	e8 00 00 00 00	 call	 s370_vstoreb
$LN16@ecpsvm_dos:

; 3910 : 
; 3911 :     /* While we are at it, set the IA in the V PSW */
; 3912 :     MAYBE_SET_PSW_IA_FROM_IP(regs);

  00921	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00929	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00931	74 43		 je	 SHORT $LN45@ecpsvm_dos
  00933	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0093b	8b 80 10 02 00
	00		 mov	 eax, DWORD PTR [rax+528]
  00941	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00949	48 8b 94 24 70
	c4 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00951	48 8b 92 00 02
	00 00		 mov	 rdx, QWORD PTR [rdx+512]
  00958	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0095c	48 2b ca	 sub	 rcx, rdx
  0095f	48 03 c1	 add	 rax, rcx
  00962	48 25 ff ff ff
	00		 and	 rax, 16777215		; 00ffffffH
  00968	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00970	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
$LN45@ecpsvm_dos:
  00976	33 c0		 xor	 eax, eax
  00978	85 c0		 test	 eax, eax
  0097a	75 a5		 jne	 SHORT $LN16@ecpsvm_dos
$LN19@ecpsvm_dos:

; 3913 :     SET_PSW_IA_AND_MAYBE_IP(&npregs, regs->psw.IA);

  0097c	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00984	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0098a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0098f	89 85 08 01 00
	00		 mov	 DWORD PTR npregs$[rbp+136], eax
  00995	48 83 bd 88 02
	00 00 00	 cmp	 QWORD PTR npregs$[rbp+520], 0
  0099d	74 41		 je	 SHORT $LN46@ecpsvm_dos
  0099f	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR npregs$[rbp+136]
  009a5	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  009aa	39 85 90 02 00
	00		 cmp	 DWORD PTR npregs$[rbp+528], eax
  009b0	75 23		 jne	 SHORT $LN47@ecpsvm_dos
  009b2	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR npregs$[rbp+136]
  009b8	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  009bd	8b c0		 mov	 eax, eax
  009bf	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR npregs$[rbp+512]
  009c6	48 0b c8	 or	 rcx, rax
  009c9	48 8b c1	 mov	 rax, rcx
  009cc	48 89 85 e8 00
	00 00		 mov	 QWORD PTR npregs$[rbp+104], rax
  009d3	eb 0b		 jmp	 SHORT $LN48@ecpsvm_dos
$LN47@ecpsvm_dos:
  009d5	48 c7 85 88 02
	00 00 00 00 00
	00		 mov	 QWORD PTR npregs$[rbp+520], 0
$LN48@ecpsvm_dos:
$LN46@ecpsvm_dos:
  009e0	33 c0		 xor	 eax, eax
  009e2	85 c0		 test	 eax, eax
  009e4	75 96		 jne	 SHORT $LN19@ecpsvm_dos

; 3914 : 
; 3915 :     /* Set the change bit for the V PSW */
; 3916 :     MADDR(vpswa,USE_REAL_ADDR,regs,ACCTYPE_WRITE,0);

  009e6	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  009eb	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  009f3	4c 8b 8c 24 70
	c4 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  009fb	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00a01	ba 01 00 00 00	 mov	 edx, 1
  00a06	8b 4d 10	 mov	 ecx, DWORD PTR vpswa$[rbp]
  00a09	e8 00 00 00 00	 call	 s370_maddr_l

; 3917 :     /* store the new PSW */
; 3918 :     ARCH_DEP(store_psw) (&npregs,vpswa_p);

  00a0e	48 8b 55 18	 mov	 rdx, QWORD PTR vpswa_p$[rbp]
  00a12	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR npregs$[rbp]
  00a19	e8 00 00 00 00	 call	 s370_store_psw

; 3919 :     DEBUG_SASSISTX(STNSM,MSGBUF(buf, "SASSIST STNSM Complete : old SM = %2.2X mask = %2.2X New SM = %2.2X",oldmask,imm2,npregs.psw.sysmask));

  00a1e	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  00a24	c1 e8 02	 shr	 eax, 2
  00a27	83 e0 01	 and	 eax, 1
  00a2a	85 c0		 test	 eax, eax
  00a2c	74 36		 je	 SHORT $LN49@ecpsvm_dos
  00a2e	0f b6 85 f8 00
	00 00		 movzx	 eax, BYTE PTR npregs$[rbp+120]
  00a35	0f b6 4d 00	 movzx	 ecx, BYTE PTR oldmask$[rbp]
  00a39	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00a3d	8b 84 24 88 c4
	02 00		 mov	 eax, DWORD PTR imm2$[rsp]
  00a44	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00a48	44 8b c9	 mov	 r9d, ecx
  00a4b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174209
  00a52	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00a57	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00a5e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN49@ecpsvm_dos:

; 3920 :     DEBUG_SASSISTX(STNSM,WRMSG(HHC90000, "D", buf));

  00a64	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  00a6a	c1 e8 02	 shr	 eax, 2
  00a6d	83 e0 01	 and	 eax, 1
  00a70	85 c0		 test	 eax, eax
  00a72	74 53		 je	 SHORT $LN50@ecpsvm_dos
  00a74	b9 01 00 00 00	 mov	 ecx, 1
  00a79	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a7f	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00a86	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a8b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174211
  00a92	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a97	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174212
  00a9e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00aa3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00aa8	41 b9 03 00 00
	00		 mov	 r9d, 3
  00aae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174213
  00ab5	ba 50 0f 00 00	 mov	 edx, 3920		; 00000f50H
  00aba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174214
  00ac1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN50@ecpsvm_dos:

; 3921 :     DEBUG_SASSISTX(STNSM,MSGBUF(buf, "SASSIST STNSM New VIRT "));

  00ac7	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  00acd	c1 e8 02	 shr	 eax, 2
  00ad0	83 e0 01	 and	 eax, 1
  00ad3	85 c0		 test	 eax, eax
  00ad5	74 19		 je	 SHORT $LN51@ecpsvm_dos
  00ad7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174216
  00ade	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00ae3	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00aea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN51@ecpsvm_dos:

; 3922 :     DEBUG_SASSISTX(STNSM,display_psw(&npregs, &buf[strlen(buf)], sizeof(buf)-(int)strlen(buf)));

  00af0	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  00af6	c1 e8 02	 shr	 eax, 2
  00af9	83 e0 01	 and	 eax, 1
  00afc	85 c0		 test	 eax, eax
  00afe	74 47		 je	 SHORT $LN52@ecpsvm_dos
  00b00	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00b07	e8 00 00 00 00	 call	 strlen
  00b0c	48 98		 cdqe
  00b0e	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00b13	48 2b c8	 sub	 rcx, rax
  00b16	48 8b c1	 mov	 rax, rcx
  00b19	48 89 45 40	 mov	 QWORD PTR tv577[rbp], rax
  00b1d	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00b24	e8 00 00 00 00	 call	 strlen
  00b29	48 8d 84 05 80
	c1 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  00b31	48 8b 4d 40	 mov	 rcx, QWORD PTR tv577[rbp]
  00b35	44 8b c1	 mov	 r8d, ecx
  00b38	48 8b d0	 mov	 rdx, rax
  00b3b	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR npregs$[rbp]
  00b42	e8 00 00 00 00	 call	 display_psw
$LN52@ecpsvm_dos:

; 3923 :     DEBUG_SASSISTX(STNSM,WRMSG(HHC90000, "D", buf));

  00b47	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  00b4d	c1 e8 02	 shr	 eax, 2
  00b50	83 e0 01	 and	 eax, 1
  00b53	85 c0		 test	 eax, eax
  00b55	74 53		 je	 SHORT $LN53@ecpsvm_dos
  00b57	b9 01 00 00 00	 mov	 ecx, 1
  00b5c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b62	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00b69	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00b6e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174219
  00b75	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b7a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174220
  00b81	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b86	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b8b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b91	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174221
  00b98	ba 53 0f 00 00	 mov	 edx, 3923		; 00000f53H
  00b9d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174222
  00ba4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN53@ecpsvm_dos:

; 3924 :     DEBUG_SASSISTX(STNSM,MSGBUF(buf, "SASSIST STNSM New REAL "));

  00baa	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  00bb0	c1 e8 02	 shr	 eax, 2
  00bb3	83 e0 01	 and	 eax, 1
  00bb6	85 c0		 test	 eax, eax
  00bb8	74 19		 je	 SHORT $LN54@ecpsvm_dos
  00bba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174224
  00bc1	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00bc6	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00bcd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN54@ecpsvm_dos:

; 3925 :     DEBUG_SASSISTX(STNSM,display_psw(regs, &buf[strlen(buf)], sizeof(buf)-(int)strlen(buf)));

  00bd3	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  00bd9	c1 e8 02	 shr	 eax, 2
  00bdc	83 e0 01	 and	 eax, 1
  00bdf	85 c0		 test	 eax, eax
  00be1	74 48		 je	 SHORT $LN55@ecpsvm_dos
  00be3	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00bea	e8 00 00 00 00	 call	 strlen
  00bef	48 98		 cdqe
  00bf1	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00bf6	48 2b c8	 sub	 rcx, rax
  00bf9	48 8b c1	 mov	 rax, rcx
  00bfc	48 89 45 48	 mov	 QWORD PTR tv612[rbp], rax
  00c00	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00c07	e8 00 00 00 00	 call	 strlen
  00c0c	48 8d 84 05 80
	c1 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  00c14	48 8b 4d 48	 mov	 rcx, QWORD PTR tv612[rbp]
  00c18	44 8b c1	 mov	 r8d, ecx
  00c1b	48 8b d0	 mov	 rdx, rax
  00c1e	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00c26	e8 00 00 00 00	 call	 display_psw
$LN55@ecpsvm_dos:

; 3926 :     DEBUG_SASSISTX(STNSM,WRMSG(HHC90000, "D", buf));

  00c2b	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+120
  00c31	c1 e8 02	 shr	 eax, 2
  00c34	83 e0 01	 and	 eax, 1
  00c37	85 c0		 test	 eax, eax
  00c39	74 53		 je	 SHORT $LN56@ecpsvm_dos
  00c3b	b9 01 00 00 00	 mov	 ecx, 1
  00c40	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c46	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00c4d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00c52	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174227
  00c59	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c5e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174228
  00c65	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c6a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c6f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c75	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG174229
  00c7c	ba 56 0f 00 00	 mov	 edx, 3926		; 00000f56H
  00c81	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG174230
  00c88	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN56@ecpsvm_dos:

; 3927 :     SASSIST_HIT(STNSM);

  00c8e	48 8b 05 70 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+112
  00c95	48 ff c0	 inc	 rax
  00c98	48 89 05 70 00
	00 00		 mov	 QWORD PTR ecpsvm_sastats+112, rax

; 3928 :     return(0);

  00c9f	33 c0		 xor	 eax, eax
$LN1@ecpsvm_dos:

; 3929 : }

  00ca1	48 8b 8d 80 c3
	02 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00ca8	48 33 cc	 xor	 rcx, rsp
  00cab	e8 00 00 00 00	 call	 __security_check_cookie
  00cb0	48 81 c4 58 c4
	02 00		 add	 rsp, 181336		; 0002c458H
  00cb7	5f		 pop	 rdi
  00cb8	5d		 pop	 rbp
  00cb9	c3		 ret	 0
ecpsvm_dostnsm ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
micevma$ = 0
micpend$ = 1
amicblok$ = 4
CR6$ = 8
micevma2$ = 12
micevma3$ = 13
micevma4$ = 14
vpswa$ = 16
vpswa_p$ = 24
tv343 = 32
tv354 = 40
tv372 = 48
tv442 = 56
nlpsw$ = 64
tv582 = 72
tv617 = 80
micblok$ = 88
nregs$ = 128
vpregs$ = 90368
buf$ = 180608
__$ArrayPad$ = 181120
regs$ = 181360
b2$ = 181368
e2$ = 181376
ecpsvm_dolpsw PROC

; 3789 : {

$LN62:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	b8 58 c4 02 00	 mov	 eax, 181336		; 0002c458H
  00015	e8 00 00 00 00	 call	 __chkstk
  0001a	48 2b e0	 sub	 rsp, rax
  0001d	48 8d ac 24 c0
	00 00 00	 lea	 rbp, QWORD PTR [rsp+192]
  00025	48 83 e5 80	 and	 rbp, -128		; ffffffffffffff80H
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c4	 xor	 rax, rsp
  00033	48 89 85 80 c3
	02 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3790 :     BYTE * nlpsw;
; 3791 :     REGS nregs;
; 3792 : 
; 3793 :     SASSIST_PROLOG(LPSW);

  0003a	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00042	48 83 b8 80 08
	00 00 00	 cmp	 QWORD PTR [rax+2176], 0
  0004a	74 0a		 je	 SHORT $LN23@ecpsvm_dol
  0004c	b8 01 00 00 00	 mov	 eax, 1
  00051	e9 a5 0c 00 00	 jmp	 $LN1@ecpsvm_dol
$LN23@ecpsvm_dol:
  00056	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0005e	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00062	83 e0 01	 and	 eax, 1
  00065	85 c0		 test	 eax, eax
  00067	75 0a		 jne	 SHORT $LN24@ecpsvm_dol
  00069	b8 01 00 00 00	 mov	 eax, 1
  0006e	e9 88 0c 00 00	 jmp	 $LN1@ecpsvm_dol
$LN24@ecpsvm_dol:
  00073	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007a	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00080	c1 e8 11	 shr	 eax, 17
  00083	83 e0 01	 and	 eax, 1
  00086	85 c0		 test	 eax, eax
  00088	75 6d		 jne	 SHORT $LN25@ecpsvm_dol
  0008a	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  00090	c1 e8 02	 shr	 eax, 2
  00093	83 e0 01	 and	 eax, 1
  00096	85 c0		 test	 eax, eax
  00098	74 53		 je	 SHORT $LN26@ecpsvm_dol
  0009a	b9 01 00 00 00	 mov	 ecx, 1
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173867
  000ac	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173868
  000b8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173869
  000c4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ce	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173870
  000db	ba d1 0e 00 00	 mov	 edx, 3793		; 00000ed1H
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173871
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN26@ecpsvm_dol:
  000ed	b8 01 00 00 00	 mov	 eax, 1
  000f2	e9 04 0c 00 00	 jmp	 $LN1@ecpsvm_dol
$LN25@ecpsvm_dol:
  000f7	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  000fd	d1 e8		 shr	 eax, 1
  000ff	83 e0 01	 and	 eax, 1
  00102	85 c0		 test	 eax, eax
  00104	75 6d		 jne	 SHORT $LN27@ecpsvm_dol
  00106	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  0010c	c1 e8 02	 shr	 eax, 2
  0010f	83 e0 01	 and	 eax, 1
  00112	85 c0		 test	 eax, eax
  00114	74 53		 je	 SHORT $LN28@ecpsvm_dol
  00116	b9 01 00 00 00	 mov	 ecx, 1
  0011b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173874
  00128	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0012d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173875
  00134	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00139	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173876
  00140	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00145	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00150	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173877
  00157	ba d1 0e 00 00	 mov	 edx, 3793		; 00000ed1H
  0015c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173878
  00163	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN28@ecpsvm_dol:
  00169	b8 01 00 00 00	 mov	 eax, 1
  0016e	e9 88 0b 00 00	 jmp	 $LN1@ecpsvm_dol
$LN27@ecpsvm_dol:
  00173	b8 08 00 00 00	 mov	 eax, 8
  00178	48 6b c0 07	 imul	 rax, rax, 7
  0017c	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00184	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  0018b	89 45 08	 mov	 DWORD PTR CR6$[rbp], eax
  0018e	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00196	48 c7 80 78 07
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+1912], 0
  001a1	8b 45 08	 mov	 eax, DWORD PTR CR6$[rbp]
  001a4	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001a9	85 c0		 test	 eax, eax
  001ab	75 6d		 jne	 SHORT $LN29@ecpsvm_dol
  001ad	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  001b3	c1 e8 02	 shr	 eax, 2
  001b6	83 e0 01	 and	 eax, 1
  001b9	85 c0		 test	 eax, eax
  001bb	74 53		 je	 SHORT $LN30@ecpsvm_dol
  001bd	b9 01 00 00 00	 mov	 ecx, 1
  001c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173881
  001cf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173882
  001db	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173883
  001e7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f1	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173884
  001fe	ba d1 0e 00 00	 mov	 edx, 3793		; 00000ed1H
  00203	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173885
  0020a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN30@ecpsvm_dol:
  00210	b8 01 00 00 00	 mov	 eax, 1
  00215	e9 e1 0a 00 00	 jmp	 $LN1@ecpsvm_dol
$LN29@ecpsvm_dol:
  0021a	8b 45 08	 mov	 eax, DWORD PTR CR6$[rbp]
  0021d	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00222	85 c0		 test	 eax, eax
  00224	74 6d		 je	 SHORT $LN31@ecpsvm_dol
  00226	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  0022c	c1 e8 02	 shr	 eax, 2
  0022f	83 e0 01	 and	 eax, 1
  00232	85 c0		 test	 eax, eax
  00234	74 53		 je	 SHORT $LN32@ecpsvm_dol
  00236	b9 01 00 00 00	 mov	 ecx, 1
  0023b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00241	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173888
  00248	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0024d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173889
  00254	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00259	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173890
  00260	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00265	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0026a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00270	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173891
  00277	ba d1 0e 00 00	 mov	 edx, 3793		; 00000ed1H
  0027c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173892
  00283	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN32@ecpsvm_dol:
  00289	b8 01 00 00 00	 mov	 eax, 1
  0028e	e9 68 0a 00 00	 jmp	 $LN1@ecpsvm_dol
$LN31@ecpsvm_dol:
  00293	48 8b 05 48 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+72
  0029a	48 ff c0	 inc	 rax
  0029d	48 89 05 48 00
	00 00		 mov	 QWORD PTR ecpsvm_sastats+72, rax
  002a4	8b 45 08	 mov	 eax, DWORD PTR CR6$[rbp]
  002a7	25 f8 ff ff 00	 and	 eax, 16777208		; 00fffff8H
  002ac	89 45 04	 mov	 DWORD PTR amicblok$[rbp], eax
  002af	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  002b2	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002b7	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  002bf	ba fe ff ff ff	 mov	 edx, -2
  002c4	8b c8		 mov	 ecx, eax
  002c6	e8 00 00 00 00	 call	 s370_vfetch4
  002cb	89 45 58	 mov	 DWORD PTR micblok$[rbp], eax
  002ce	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  002d1	83 c0 04	 add	 eax, 4
  002d4	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002d9	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  002e1	ba fe ff ff ff	 mov	 edx, -2
  002e6	8b c8		 mov	 ecx, eax
  002e8	e8 00 00 00 00	 call	 s370_vfetch4
  002ed	89 45 5c	 mov	 DWORD PTR micblok$[rbp+4], eax
  002f0	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  002f3	83 c0 08	 add	 eax, 8
  002f6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002fb	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00303	ba fe ff ff ff	 mov	 edx, -2
  00308	8b c8		 mov	 ecx, eax
  0030a	e8 00 00 00 00	 call	 s370_vfetch4
  0030f	89 45 60	 mov	 DWORD PTR micblok$[rbp+8], eax
  00312	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  00315	83 c0 0c	 add	 eax, 12
  00318	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0031d	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00325	ba fe ff ff ff	 mov	 edx, -2
  0032a	8b c8		 mov	 ecx, eax
  0032c	e8 00 00 00 00	 call	 s370_vfetch4
  00331	89 45 64	 mov	 DWORD PTR micblok$[rbp+12], eax
  00334	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  00337	83 c0 10	 add	 eax, 16
  0033a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0033f	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00347	ba fe ff ff ff	 mov	 edx, -2
  0034c	8b c8		 mov	 ecx, eax
  0034e	e8 00 00 00 00	 call	 s370_vfetch4
  00353	89 45 68	 mov	 DWORD PTR micblok$[rbp+16], eax
  00356	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  00359	83 c0 14	 add	 eax, 20
  0035c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00361	4c 8b 84 24 70
	c4 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00369	ba fe ff ff ff	 mov	 edx, -2
  0036e	8b c8		 mov	 ecx, eax
  00370	e8 00 00 00 00	 call	 s370_vfetch4
  00375	89 45 6c	 mov	 DWORD PTR micblok$[rbp+20], eax
  00378	8b 45 60	 mov	 eax, DWORD PTR micblok$[rbp+8]
  0037b	c1 e8 18	 shr	 eax, 24
  0037e	88 45 01	 mov	 BYTE PTR micpend$[rbp], al
  00381	8b 45 60	 mov	 eax, DWORD PTR micblok$[rbp+8]
  00384	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00389	89 45 10	 mov	 DWORD PTR vpswa$[rbp], eax
  0038c	8b 45 6c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  0038f	c1 e8 18	 shr	 eax, 24
  00392	88 45 00	 mov	 BYTE PTR micevma$[rbp], al
  00395	8b 45 6c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  00398	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  0039d	c1 e8 10	 shr	 eax, 16
  003a0	88 45 0c	 mov	 BYTE PTR micevma2$[rbp], al
  003a3	8b 45 6c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  003a6	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  003ab	c1 e8 08	 shr	 eax, 8
  003ae	88 45 0d	 mov	 BYTE PTR micevma3$[rbp], al
  003b1	8b 45 6c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  003b4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003b9	88 45 0e	 mov	 BYTE PTR micevma4$[rbp], al
  003bc	8b 45 08	 mov	 eax, DWORD PTR CR6$[rbp]
  003bf	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  003c4	85 c0		 test	 eax, eax
  003c6	74 37		 je	 SHORT $LN33@ecpsvm_dol
  003c8	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  003cd	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  003d5	4c 8b 8c 24 70
	c4 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  003dd	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  003e3	ba 01 00 00 00	 mov	 edx, 1
  003e8	8b 4d 68	 mov	 ecx, DWORD PTR micblok$[rbp+16]
  003eb	e8 00 00 00 00	 call	 s370_maddr_l
  003f0	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003f8	48 89 81 78 07
	00 00		 mov	 QWORD PTR [rcx+1912], rax
$LN33@ecpsvm_dol:
  003ff	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  00404	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0040c	4c 8b 8c 24 70
	c4 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00414	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0041a	ba 01 00 00 00	 mov	 edx, 1
  0041f	8b 4d 10	 mov	 ecx, DWORD PTR vpswa$[rbp]
  00422	e8 00 00 00 00	 call	 s370_maddr_l
  00427	48 89 45 18	 mov	 QWORD PTR vpswa_p$[rbp], rax
  0042b	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  00431	c1 e8 02	 shr	 eax, 2
  00434	83 e0 01	 and	 eax, 1
  00437	85 c0		 test	 eax, eax
  00439	74 1d		 je	 SHORT $LN34@ecpsvm_dol
  0043b	44 8b 4d 10	 mov	 r9d, DWORD PTR vpswa$[rbp]
  0043f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173895
  00446	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  0044b	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00452	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN34@ecpsvm_dol:
  00458	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  0045e	c1 e8 02	 shr	 eax, 2
  00461	83 e0 01	 and	 eax, 1
  00464	85 c0		 test	 eax, eax
  00466	74 53		 je	 SHORT $LN35@ecpsvm_dol
  00468	b9 01 00 00 00	 mov	 ecx, 1
  0046d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00473	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0047a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0047f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173897
  00486	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0048b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173898
  00492	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00497	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0049c	41 b9 03 00 00
	00		 mov	 r9d, 3
  004a2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173899
  004a9	ba d1 0e 00 00	 mov	 edx, 3793		; 00000ed1H
  004ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173900
  004b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN35@ecpsvm_dol:
  004bb	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  004c1	c1 e8 02	 shr	 eax, 2
  004c4	83 e0 01	 and	 eax, 1
  004c7	85 c0		 test	 eax, eax
  004c9	74 1d		 je	 SHORT $LN36@ecpsvm_dol
  004cb	44 8b 4d 08	 mov	 r9d, DWORD PTR CR6$[rbp]
  004cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173902
  004d6	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  004db	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  004e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN36@ecpsvm_dol:
  004e8	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  004ee	c1 e8 02	 shr	 eax, 2
  004f1	83 e0 01	 and	 eax, 1
  004f4	85 c0		 test	 eax, eax
  004f6	74 53		 je	 SHORT $LN37@ecpsvm_dol
  004f8	b9 01 00 00 00	 mov	 ecx, 1
  004fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00503	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0050a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0050f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173904
  00516	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0051b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173905
  00522	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00527	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0052c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00532	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173906
  00539	ba d1 0e 00 00	 mov	 edx, 3793		; 00000ed1H
  0053e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173907
  00545	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN37@ecpsvm_dol:
  0054b	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  00551	c1 e8 02	 shr	 eax, 2
  00554	83 e0 01	 and	 eax, 1
  00557	85 c0		 test	 eax, eax
  00559	74 1d		 je	 SHORT $LN38@ecpsvm_dol
  0055b	44 8b 4d 68	 mov	 r9d, DWORD PTR micblok$[rbp+16]
  0055f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173909
  00566	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  0056b	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00572	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN38@ecpsvm_dol:
  00578	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  0057e	c1 e8 02	 shr	 eax, 2
  00581	83 e0 01	 and	 eax, 1
  00584	85 c0		 test	 eax, eax
  00586	74 53		 je	 SHORT $LN39@ecpsvm_dol
  00588	b9 01 00 00 00	 mov	 ecx, 1
  0058d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00593	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0059a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0059f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173911
  005a6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173912
  005b2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005b7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005bc	41 b9 03 00 00
	00		 mov	 r9d, 3
  005c2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173913
  005c9	ba d1 0e 00 00	 mov	 edx, 3793		; 00000ed1H
  005ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173914
  005d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN39@ecpsvm_dol:
  005db	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  005e1	c1 e8 02	 shr	 eax, 2
  005e4	83 e0 01	 and	 eax, 1
  005e7	85 c0		 test	 eax, eax
  005e9	74 19		 je	 SHORT $LN40@ecpsvm_dol
  005eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173916
  005f2	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  005f7	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  005fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN40@ecpsvm_dol:
  00604	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  0060a	c1 e8 02	 shr	 eax, 2
  0060d	83 e0 01	 and	 eax, 1
  00610	85 c0		 test	 eax, eax
  00612	74 48		 je	 SHORT $LN41@ecpsvm_dol
  00614	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0061b	e8 00 00 00 00	 call	 strlen
  00620	48 98		 cdqe
  00622	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00627	48 2b c8	 sub	 rcx, rax
  0062a	48 8b c1	 mov	 rax, rcx
  0062d	48 89 45 20	 mov	 QWORD PTR tv343[rbp], rax
  00631	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00638	e8 00 00 00 00	 call	 strlen
  0063d	48 8d 84 05 80
	c1 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  00645	48 8b 4d 20	 mov	 rcx, QWORD PTR tv343[rbp]
  00649	44 8b c1	 mov	 r8d, ecx
  0064c	48 8b d0	 mov	 rdx, rax
  0064f	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00657	e8 00 00 00 00	 call	 display_psw
$LN41@ecpsvm_dol:
$LN4@ecpsvm_dol:
  0065c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00663	48 63 80 90 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5264]
  0066a	48 89 45 28	 mov	 QWORD PTR tv354[rbp], rax
  0066e	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  00675	48 8b f9	 mov	 rdi, rcx
  00678	33 c0		 xor	 eax, eax
  0067a	48 8b 4d 28	 mov	 rcx, QWORD PTR tv354[rbp]
  0067e	f3 aa		 rep stosb
$LN7@ecpsvm_dol:
  00680	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG173918
  00687	48 89 85 68 61
	01 00		 mov	 QWORD PTR vpregs$[rbp+104], rax
  0068e	33 c0		 xor	 eax, eax
  00690	85 c0		 test	 eax, eax
  00692	75 ec		 jne	 SHORT $LN7@ecpsvm_dol
  00694	33 c0		 xor	 eax, eax
  00696	85 c0		 test	 eax, eax
  00698	75 c2		 jne	 SHORT $LN4@ecpsvm_dol
  0069a	48 8b 55 18	 mov	 rdx, QWORD PTR vpswa_p$[rbp]
  0069e	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  006a5	e8 00 00 00 00	 call	 s370_load_psw
  006aa	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  006b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG173919
  006b7	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
  006c4	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  006ca	c1 e8 02	 shr	 eax, 2
  006cd	83 e0 01	 and	 eax, 1
  006d0	85 c0		 test	 eax, eax
  006d2	74 47		 je	 SHORT $LN42@ecpsvm_dol
  006d4	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006db	e8 00 00 00 00	 call	 strlen
  006e0	48 98		 cdqe
  006e2	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  006e7	48 2b c8	 sub	 rcx, rax
  006ea	48 8b c1	 mov	 rax, rcx
  006ed	48 89 45 30	 mov	 QWORD PTR tv372[rbp], rax
  006f1	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006f8	e8 00 00 00 00	 call	 strlen
  006fd	48 8d 84 05 80
	c1 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  00705	48 8b 4d 30	 mov	 rcx, QWORD PTR tv372[rbp]
  00709	44 8b c1	 mov	 r8d, ecx
  0070c	48 8b d0	 mov	 rdx, rax
  0070f	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  00716	e8 00 00 00 00	 call	 display_psw
$LN42@ecpsvm_dol:
  0071b	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  00721	c1 e8 02	 shr	 eax, 2
  00724	83 e0 01	 and	 eax, 1
  00727	85 c0		 test	 eax, eax
  00729	74 53		 je	 SHORT $LN43@ecpsvm_dol
  0072b	b9 01 00 00 00	 mov	 ecx, 1
  00730	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00736	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0073d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00742	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173922
  00749	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0074e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173923
  00755	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0075a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0075f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00765	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173924
  0076c	ba d1 0e 00 00	 mov	 edx, 3793		; 00000ed1H
  00771	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173925
  00778	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN43@ecpsvm_dol:

; 3794 : 
; 3795 :     /* Reject if MICEVMA says not to do LPSW sim */
; 3796 :     if(!(micevma & MICLPSW))

  0077e	0f b6 45 00	 movzx	 eax, BYTE PTR micevma$[rbp]
  00782	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00787	85 c0		 test	 eax, eax
  00789	75 6d		 jne	 SHORT $LN44@ecpsvm_dol

; 3797 :     {
; 3798 :         DEBUG_SASSISTX(LPSW,WRMSG(HHC90000, "D", "SASSIST LPSW reject : LPSW disabled in MICEVMA"));

  0078b	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  00791	c1 e8 02	 shr	 eax, 2
  00794	83 e0 01	 and	 eax, 1
  00797	85 c0		 test	 eax, eax
  00799	74 53		 je	 SHORT $LN45@ecpsvm_dol
  0079b	b9 01 00 00 00	 mov	 ecx, 1
  007a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173928
  007ad	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  007b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173929
  007b9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173930
  007c5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007ca	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007cf	41 b9 03 00 00
	00		 mov	 r9d, 3
  007d5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173931
  007dc	ba d6 0e 00 00	 mov	 edx, 3798		; 00000ed6H
  007e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173932
  007e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN45@ecpsvm_dol:

; 3799 :         return(1);

  007ee	b8 01 00 00 00	 mov	 eax, 1
  007f3	e9 03 05 00 00	 jmp	 $LN1@ecpsvm_dol
$LN44@ecpsvm_dol:

; 3800 :     }
; 3801 :     if(e2&0x03)

  007f8	8b 84 24 80 c4
	02 00		 mov	 eax, DWORD PTR e2$[rsp]
  007ff	83 e0 03	 and	 eax, 3
  00802	85 c0		 test	 eax, eax
  00804	0f 84 9e 00 00
	00		 je	 $LN46@ecpsvm_dol

; 3802 :     {
; 3803 :         DEBUG_SASSISTX(LPSW,MSGBUF(buf, "SASSIST LPSW %6.6X - Alignement error",e2));

  0080a	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  00810	c1 e8 02	 shr	 eax, 2
  00813	83 e0 01	 and	 eax, 1
  00816	85 c0		 test	 eax, eax
  00818	74 21		 je	 SHORT $LN47@ecpsvm_dol
  0081a	44 8b 8c 24 80
	c4 02 00	 mov	 r9d, DWORD PTR e2$[rsp]
  00822	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173935
  00829	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  0082e	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00835	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN47@ecpsvm_dol:

; 3804 :         DEBUG_SASSISTX(LPSW,WRMSG(HHC90000, "D", buf));

  0083b	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  00841	c1 e8 02	 shr	 eax, 2
  00844	83 e0 01	 and	 eax, 1
  00847	85 c0		 test	 eax, eax
  00849	74 53		 je	 SHORT $LN48@ecpsvm_dol
  0084b	b9 01 00 00 00	 mov	 ecx, 1
  00850	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00856	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0085d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00862	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173937
  00869	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0086e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173938
  00875	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0087a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0087f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00885	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173939
  0088c	ba dc 0e 00 00	 mov	 edx, 3804		; 00000edcH
  00891	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173940
  00898	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN48@ecpsvm_dol:

; 3805 :         return(1);

  0089e	b8 01 00 00 00	 mov	 eax, 1
  008a3	e9 53 04 00 00	 jmp	 $LN1@ecpsvm_dol
$LN46@ecpsvm_dol:

; 3806 : 
; 3807 :     }
; 3808 :     nlpsw=MADDR(e2,b2,regs,ACCTYPE_READ,regs->psw.pkey);

  008a8	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  008b0	0f b6 40 79	 movzx	 eax, BYTE PTR [rax+121]
  008b4	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  008b8	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  008c0	4c 8b 8c 24 70
	c4 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  008c8	44 8b 84 24 78
	c4 02 00	 mov	 r8d, DWORD PTR b2$[rsp]
  008d0	ba 01 00 00 00	 mov	 edx, 1
  008d5	8b 8c 24 80 c4
	02 00		 mov	 ecx, DWORD PTR e2$[rsp]
  008dc	e8 00 00 00 00	 call	 s370_maddr_l
  008e1	48 89 45 40	 mov	 QWORD PTR nlpsw$[rbp], rax
$LN10@ecpsvm_dol:

; 3809 :     INITPSEUDOREGS(nregs);

  008e5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  008ec	48 63 80 90 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5264]
  008f3	48 89 45 38	 mov	 QWORD PTR tv442[rbp], rax
  008f7	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR nregs$[rbp]
  008fe	48 8b f9	 mov	 rdi, rcx
  00901	33 c0		 xor	 eax, eax
  00903	48 8b 4d 38	 mov	 rcx, QWORD PTR tv442[rbp]
  00907	f3 aa		 rep stosb
$LN13@ecpsvm_dol:
  00909	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG173941
  00910	48 89 85 e8 00
	00 00		 mov	 QWORD PTR nregs$[rbp+104], rax
  00917	33 c0		 xor	 eax, eax
  00919	85 c0		 test	 eax, eax
  0091b	75 ec		 jne	 SHORT $LN13@ecpsvm_dol
  0091d	33 c0		 xor	 eax, eax
  0091f	85 c0		 test	 eax, eax
  00921	75 c2		 jne	 SHORT $LN10@ecpsvm_dol

; 3810 :     ARCH_DEP(load_psw) (&nregs,nlpsw);

  00923	48 8b 55 40	 mov	 rdx, QWORD PTR nlpsw$[rbp]
  00927	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR nregs$[rbp]
  0092e	e8 00 00 00 00	 call	 s370_load_psw

; 3811 :     if(ecpsvm_check_pswtrans(regs,&micblok,micpend,&vpregs,&nregs))

  00933	48 8d 85 80 00
	00 00		 lea	 rax, QWORD PTR nregs$[rbp]
  0093a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0093f	4c 8d 8d 00 61
	01 00		 lea	 r9, QWORD PTR vpregs$[rbp]
  00946	44 0f b6 45 01	 movzx	 r8d, BYTE PTR micpend$[rbp]
  0094b	48 8d 55 58	 lea	 rdx, QWORD PTR micblok$[rbp]
  0094f	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00957	e8 00 00 00 00	 call	 ecpsvm_check_pswtrans
  0095c	85 c0		 test	 eax, eax
  0095e	74 6d		 je	 SHORT $LN49@ecpsvm_dol

; 3812 :     {
; 3813 :         DEBUG_SASSISTX(LPSW,WRMSG(HHC90000, "D", "SASSIST LPSW Rejected - Cannot make PSW transition"));

  00960	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  00966	c1 e8 02	 shr	 eax, 2
  00969	83 e0 01	 and	 eax, 1
  0096c	85 c0		 test	 eax, eax
  0096e	74 53		 je	 SHORT $LN50@ecpsvm_dol
  00970	b9 01 00 00 00	 mov	 ecx, 1
  00975	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0097b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173944
  00982	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00987	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173945
  0098e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00993	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173946
  0099a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0099f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009a4	41 b9 03 00 00
	00		 mov	 r9d, 3
  009aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173947
  009b1	ba e5 0e 00 00	 mov	 edx, 3813		; 00000ee5H
  009b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173948
  009bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN50@ecpsvm_dol:

; 3814 :         return(1);

  009c3	b8 01 00 00 00	 mov	 eax, 1
  009c8	e9 2e 03 00 00	 jmp	 $LN1@ecpsvm_dol
$LN49@ecpsvm_dol:
$LN16@ecpsvm_dol:
$LN19@ecpsvm_dol:

; 3815 : 
; 3816 :     }
; 3817 :     SASSIST_LPSW(nregs);

  009cd	48 83 bd 88 02
	00 00 00	 cmp	 QWORD PTR nregs$[rbp+520], 0
  009d5	74 29		 je	 SHORT $LN51@ecpsvm_dol
  009d7	8b 85 90 02 00
	00		 mov	 eax, DWORD PTR nregs$[rbp+528]
  009dd	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR nregs$[rbp+512]
  009e4	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR nregs$[rbp+104]
  009eb	48 2b d1	 sub	 rdx, rcx
  009ee	48 8b ca	 mov	 rcx, rdx
  009f1	48 03 c1	 add	 rax, rcx
  009f4	48 25 ff ff ff
	00		 and	 rax, 16777215		; 00ffffffH
  009fa	89 85 08 01 00
	00		 mov	 DWORD PTR nregs$[rbp+136], eax
$LN51@ecpsvm_dol:
  00a00	33 c0		 xor	 eax, eax
  00a02	85 c0		 test	 eax, eax
  00a04	75 c7		 jne	 SHORT $LN19@ecpsvm_dol
$LN22@ecpsvm_dol:
  00a06	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR nregs$[rbp+136]
  00a0c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00a11	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a19	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00a1f	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a27	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00a2f	74 6e		 je	 SHORT $LN52@ecpsvm_dol
  00a31	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a39	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00a3f	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00a44	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a4c	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00a52	75 38		 jne	 SHORT $LN53@ecpsvm_dol
  00a54	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a5c	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00a62	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00a67	8b c0		 mov	 eax, eax
  00a69	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a71	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00a78	48 0b c8	 or	 rcx, rax
  00a7b	48 8b c1	 mov	 rax, rcx
  00a7e	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a86	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00a8a	eb 13		 jmp	 SHORT $LN54@ecpsvm_dol
$LN53@ecpsvm_dol:
  00a8c	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a94	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN54@ecpsvm_dol:
$LN52@ecpsvm_dol:
  00a9f	33 c0		 xor	 eax, eax
  00aa1	85 c0		 test	 eax, eax
  00aa3	0f 85 5d ff ff
	ff		 jne	 $LN22@ecpsvm_dol
  00aa9	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00ab1	0f b6 8d fc 00
	00 00		 movzx	 ecx, BYTE PTR nregs$[rbp+124]
  00ab8	88 48 7c	 mov	 BYTE PTR [rax+124], cl
  00abb	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00ac3	0f b6 8d f9 00
	00 00		 movzx	 ecx, BYTE PTR nregs$[rbp+121]
  00aca	88 48 79	 mov	 BYTE PTR [rax+121], cl
  00acd	48 8b 84 24 70
	c4 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00ad5	0f b6 8d fd 00
	00 00		 movzx	 ecx, BYTE PTR nregs$[rbp+125]
  00adc	88 48 7d	 mov	 BYTE PTR [rax+125], cl
  00adf	33 c0		 xor	 eax, eax
  00ae1	85 c0		 test	 eax, eax
  00ae3	0f 85 e4 fe ff
	ff		 jne	 $LN16@ecpsvm_dol

; 3818 :     MADDR(vpswa,USE_REAL_ADDR,regs,ACCTYPE_WRITE,0);

  00ae9	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  00aee	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00af6	4c 8b 8c 24 70
	c4 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00afe	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00b04	ba 01 00 00 00	 mov	 edx, 1
  00b09	8b 4d 10	 mov	 ecx, DWORD PTR vpswa$[rbp]
  00b0c	e8 00 00 00 00	 call	 s370_maddr_l

; 3819 :     /* Set ref bit in address pointed by MICBLOK */
; 3820 :     ARCH_DEP(store_psw) (&nregs,vpswa_p);

  00b11	48 8b 55 18	 mov	 rdx, QWORD PTR vpswa_p$[rbp]
  00b15	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR nregs$[rbp]
  00b1c	e8 00 00 00 00	 call	 s370_store_psw

; 3821 :     DEBUG_SASSISTX(LPSW,MSGBUF(buf, "SASSIST LPSW New VIRT "));

  00b21	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  00b27	c1 e8 02	 shr	 eax, 2
  00b2a	83 e0 01	 and	 eax, 1
  00b2d	85 c0		 test	 eax, eax
  00b2f	74 19		 je	 SHORT $LN55@ecpsvm_dol
  00b31	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173954
  00b38	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00b3d	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00b44	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN55@ecpsvm_dol:

; 3822 :     DEBUG_SASSISTX(LPSW,display_psw(&nregs, &buf[strlen(buf)], sizeof(buf)-(int)strlen(buf)));

  00b4a	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  00b50	c1 e8 02	 shr	 eax, 2
  00b53	83 e0 01	 and	 eax, 1
  00b56	85 c0		 test	 eax, eax
  00b58	74 47		 je	 SHORT $LN56@ecpsvm_dol
  00b5a	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00b61	e8 00 00 00 00	 call	 strlen
  00b66	48 98		 cdqe
  00b68	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00b6d	48 2b c8	 sub	 rcx, rax
  00b70	48 8b c1	 mov	 rax, rcx
  00b73	48 89 45 48	 mov	 QWORD PTR tv582[rbp], rax
  00b77	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00b7e	e8 00 00 00 00	 call	 strlen
  00b83	48 8d 84 05 80
	c1 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  00b8b	48 8b 4d 48	 mov	 rcx, QWORD PTR tv582[rbp]
  00b8f	44 8b c1	 mov	 r8d, ecx
  00b92	48 8b d0	 mov	 rdx, rax
  00b95	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR nregs$[rbp]
  00b9c	e8 00 00 00 00	 call	 display_psw
$LN56@ecpsvm_dol:

; 3823 :     DEBUG_SASSISTX(LPSW,WRMSG(HHC90000, "D", buf));

  00ba1	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  00ba7	c1 e8 02	 shr	 eax, 2
  00baa	83 e0 01	 and	 eax, 1
  00bad	85 c0		 test	 eax, eax
  00baf	74 53		 je	 SHORT $LN57@ecpsvm_dol
  00bb1	b9 01 00 00 00	 mov	 ecx, 1
  00bb6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00bbc	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00bc3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00bc8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173957
  00bcf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00bd4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173958
  00bdb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00be0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00be5	41 b9 03 00 00
	00		 mov	 r9d, 3
  00beb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173959
  00bf2	ba ef 0e 00 00	 mov	 edx, 3823		; 00000eefH
  00bf7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173960
  00bfe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN57@ecpsvm_dol:

; 3824 :     DEBUG_SASSISTX(LPSW,MSGBUF(buf, "SASSIST LPSW New REAL "));

  00c04	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  00c0a	c1 e8 02	 shr	 eax, 2
  00c0d	83 e0 01	 and	 eax, 1
  00c10	85 c0		 test	 eax, eax
  00c12	74 19		 je	 SHORT $LN58@ecpsvm_dol
  00c14	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173962
  00c1b	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00c20	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00c27	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN58@ecpsvm_dol:

; 3825 :     DEBUG_SASSISTX(LPSW,display_psw(regs, &buf[strlen(buf)], sizeof(buf)-(int)strlen(buf)));

  00c2d	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  00c33	c1 e8 02	 shr	 eax, 2
  00c36	83 e0 01	 and	 eax, 1
  00c39	85 c0		 test	 eax, eax
  00c3b	74 48		 je	 SHORT $LN59@ecpsvm_dol
  00c3d	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00c44	e8 00 00 00 00	 call	 strlen
  00c49	48 98		 cdqe
  00c4b	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00c50	48 2b c8	 sub	 rcx, rax
  00c53	48 8b c1	 mov	 rax, rcx
  00c56	48 89 45 50	 mov	 QWORD PTR tv617[rbp], rax
  00c5a	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00c61	e8 00 00 00 00	 call	 strlen
  00c66	48 8d 84 05 80
	c1 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  00c6e	48 8b 4d 50	 mov	 rcx, QWORD PTR tv617[rbp]
  00c72	44 8b c1	 mov	 r8d, ecx
  00c75	48 8b d0	 mov	 rdx, rax
  00c78	48 8b 8c 24 70
	c4 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00c80	e8 00 00 00 00	 call	 display_psw
$LN59@ecpsvm_dol:

; 3826 :     DEBUG_SASSISTX(LPSW,WRMSG(HHC90000, "D", buf));

  00c85	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+88
  00c8b	c1 e8 02	 shr	 eax, 2
  00c8e	83 e0 01	 and	 eax, 1
  00c91	85 c0		 test	 eax, eax
  00c93	74 53		 je	 SHORT $LN60@ecpsvm_dol
  00c95	b9 01 00 00 00	 mov	 ecx, 1
  00c9a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00ca0	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00ca7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00cac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173965
  00cb3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00cb8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173966
  00cbf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00cc4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00cc9	41 b9 03 00 00
	00		 mov	 r9d, 3
  00ccf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173967
  00cd6	ba f2 0e 00 00	 mov	 edx, 3826		; 00000ef2H
  00cdb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173968
  00ce2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN60@ecpsvm_dol:

; 3827 :     SASSIST_HIT(LPSW);

  00ce8	48 8b 05 50 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+80
  00cef	48 ff c0	 inc	 rax
  00cf2	48 89 05 50 00
	00 00		 mov	 QWORD PTR ecpsvm_sastats+80, rax

; 3828 :     return(0);

  00cf9	33 c0		 xor	 eax, eax
$LN1@ecpsvm_dol:

; 3829 : }

  00cfb	48 8b 8d 80 c3
	02 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00d02	48 33 cc	 xor	 rcx, rsp
  00d05	e8 00 00 00 00	 call	 __security_check_cookie
  00d0a	48 81 c4 58 c4
	02 00		 add	 rsp, 181336		; 0002c458H
  00d11	5f		 pop	 rdi
  00d12	5d		 pop	 rbp
  00d13	c3		 ret	 0
ecpsvm_dolpsw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
reqmask$ = 0
micpend$ = 1
amicblok$ = 4
CR6$ = 8
micevma$ = 12
micevma2$ = 13
micevma3$ = 14
micevma4$ = 15
vpswa$ = 16
creg0$ = 20
vpswa_p$ = 24
tv343 = 32
tv354 = 40
tv372 = 48
cregs$ = 56
tv426 = 64
tv581 = 72
tv616 = 80
micblok$ = 88
npregs$ = 128
vpregs$ = 90368
buf2$ = 180608
buf$ = 180864
__$ArrayPad$ = 181376
regs$ = 181616
b2$ = 181624
effective_addr2$ = 181632
ecpsvm_dossm PROC

; 3486 : {

$LN58:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	b8 58 c5 02 00	 mov	 eax, 181592		; 0002c558H
  00015	e8 00 00 00 00	 call	 __chkstk
  0001a	48 2b e0	 sub	 rsp, rax
  0001d	48 8d ac 24 c0
	00 00 00	 lea	 rbp, QWORD PTR [rsp+192]
  00025	48 83 e5 80	 and	 rbp, -128		; ffffffffffffff80H
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c4	 xor	 rax, rsp
  00033	48 89 85 80 c4
	02 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 3487 :     char buf2[256];
; 3488 :     BYTE  reqmask;
; 3489 :     BYTE *cregs;
; 3490 :     U32   creg0;
; 3491 :     REGS  npregs;
; 3492 : 
; 3493 :     SASSIST_PROLOG(SSM);

  0003a	48 8b 84 24 70
	c5 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00042	48 83 b8 80 08
	00 00 00	 cmp	 QWORD PTR [rax+2176], 0
  0004a	74 0a		 je	 SHORT $LN20@ecpsvm_dos
  0004c	b8 01 00 00 00	 mov	 eax, 1
  00051	e9 5a 0c 00 00	 jmp	 $LN1@ecpsvm_dos
$LN20@ecpsvm_dos:
  00056	48 8b 84 24 70
	c5 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0005e	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00062	83 e0 01	 and	 eax, 1
  00065	85 c0		 test	 eax, eax
  00067	75 0a		 jne	 SHORT $LN21@ecpsvm_dos
  00069	b8 01 00 00 00	 mov	 eax, 1
  0006e	e9 3d 0c 00 00	 jmp	 $LN1@ecpsvm_dos
$LN21@ecpsvm_dos:
  00073	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007a	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00080	c1 e8 11	 shr	 eax, 17
  00083	83 e0 01	 and	 eax, 1
  00086	85 c0		 test	 eax, eax
  00088	75 6d		 jne	 SHORT $LN22@ecpsvm_dos
  0008a	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  00090	c1 e8 02	 shr	 eax, 2
  00093	83 e0 01	 and	 eax, 1
  00096	85 c0		 test	 eax, eax
  00098	74 53		 je	 SHORT $LN23@ecpsvm_dos
  0009a	b9 01 00 00 00	 mov	 ecx, 1
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173376
  000ac	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173377
  000b8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173378
  000c4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ce	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173379
  000db	ba a5 0d 00 00	 mov	 edx, 3493		; 00000da5H
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173380
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN23@ecpsvm_dos:
  000ed	b8 01 00 00 00	 mov	 eax, 1
  000f2	e9 b9 0b 00 00	 jmp	 $LN1@ecpsvm_dos
$LN22@ecpsvm_dos:
  000f7	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  000fd	d1 e8		 shr	 eax, 1
  000ff	83 e0 01	 and	 eax, 1
  00102	85 c0		 test	 eax, eax
  00104	75 6d		 jne	 SHORT $LN24@ecpsvm_dos
  00106	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  0010c	c1 e8 02	 shr	 eax, 2
  0010f	83 e0 01	 and	 eax, 1
  00112	85 c0		 test	 eax, eax
  00114	74 53		 je	 SHORT $LN25@ecpsvm_dos
  00116	b9 01 00 00 00	 mov	 ecx, 1
  0011b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173383
  00128	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0012d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173384
  00134	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00139	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173385
  00140	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00145	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00150	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173386
  00157	ba a5 0d 00 00	 mov	 edx, 3493		; 00000da5H
  0015c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173387
  00163	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN25@ecpsvm_dos:
  00169	b8 01 00 00 00	 mov	 eax, 1
  0016e	e9 3d 0b 00 00	 jmp	 $LN1@ecpsvm_dos
$LN24@ecpsvm_dos:
  00173	b8 08 00 00 00	 mov	 eax, 8
  00178	48 6b c0 07	 imul	 rax, rax, 7
  0017c	48 8b 8c 24 70
	c5 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00184	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  0018b	89 45 08	 mov	 DWORD PTR CR6$[rbp], eax
  0018e	48 8b 84 24 70
	c5 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00196	48 c7 80 78 07
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+1912], 0
  001a1	8b 45 08	 mov	 eax, DWORD PTR CR6$[rbp]
  001a4	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  001a9	85 c0		 test	 eax, eax
  001ab	75 6d		 jne	 SHORT $LN26@ecpsvm_dos
  001ad	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  001b3	c1 e8 02	 shr	 eax, 2
  001b6	83 e0 01	 and	 eax, 1
  001b9	85 c0		 test	 eax, eax
  001bb	74 53		 je	 SHORT $LN27@ecpsvm_dos
  001bd	b9 01 00 00 00	 mov	 ecx, 1
  001c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173390
  001cf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173391
  001db	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173392
  001e7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f1	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173393
  001fe	ba a5 0d 00 00	 mov	 edx, 3493		; 00000da5H
  00203	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173394
  0020a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN27@ecpsvm_dos:
  00210	b8 01 00 00 00	 mov	 eax, 1
  00215	e9 96 0a 00 00	 jmp	 $LN1@ecpsvm_dos
$LN26@ecpsvm_dos:
  0021a	8b 45 08	 mov	 eax, DWORD PTR CR6$[rbp]
  0021d	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00222	85 c0		 test	 eax, eax
  00224	74 6d		 je	 SHORT $LN28@ecpsvm_dos
  00226	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  0022c	c1 e8 02	 shr	 eax, 2
  0022f	83 e0 01	 and	 eax, 1
  00232	85 c0		 test	 eax, eax
  00234	74 53		 je	 SHORT $LN29@ecpsvm_dos
  00236	b9 01 00 00 00	 mov	 ecx, 1
  0023b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00241	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173397
  00248	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0024d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173398
  00254	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00259	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173399
  00260	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00265	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0026a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00270	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173400
  00277	ba a5 0d 00 00	 mov	 edx, 3493		; 00000da5H
  0027c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173401
  00283	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN29@ecpsvm_dos:
  00289	b8 01 00 00 00	 mov	 eax, 1
  0028e	e9 1d 0a 00 00	 jmp	 $LN1@ecpsvm_dos
$LN28@ecpsvm_dos:
  00293	48 8b 05 28 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+40
  0029a	48 ff c0	 inc	 rax
  0029d	48 89 05 28 00
	00 00		 mov	 QWORD PTR ecpsvm_sastats+40, rax
  002a4	8b 45 08	 mov	 eax, DWORD PTR CR6$[rbp]
  002a7	25 f8 ff ff 00	 and	 eax, 16777208		; 00fffff8H
  002ac	89 45 04	 mov	 DWORD PTR amicblok$[rbp], eax
  002af	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  002b2	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002b7	4c 8b 84 24 70
	c5 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  002bf	ba fe ff ff ff	 mov	 edx, -2
  002c4	8b c8		 mov	 ecx, eax
  002c6	e8 00 00 00 00	 call	 s370_vfetch4
  002cb	89 45 58	 mov	 DWORD PTR micblok$[rbp], eax
  002ce	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  002d1	83 c0 04	 add	 eax, 4
  002d4	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002d9	4c 8b 84 24 70
	c5 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  002e1	ba fe ff ff ff	 mov	 edx, -2
  002e6	8b c8		 mov	 ecx, eax
  002e8	e8 00 00 00 00	 call	 s370_vfetch4
  002ed	89 45 5c	 mov	 DWORD PTR micblok$[rbp+4], eax
  002f0	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  002f3	83 c0 08	 add	 eax, 8
  002f6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  002fb	4c 8b 84 24 70
	c5 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00303	ba fe ff ff ff	 mov	 edx, -2
  00308	8b c8		 mov	 ecx, eax
  0030a	e8 00 00 00 00	 call	 s370_vfetch4
  0030f	89 45 60	 mov	 DWORD PTR micblok$[rbp+8], eax
  00312	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  00315	83 c0 0c	 add	 eax, 12
  00318	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0031d	4c 8b 84 24 70
	c5 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00325	ba fe ff ff ff	 mov	 edx, -2
  0032a	8b c8		 mov	 ecx, eax
  0032c	e8 00 00 00 00	 call	 s370_vfetch4
  00331	89 45 64	 mov	 DWORD PTR micblok$[rbp+12], eax
  00334	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  00337	83 c0 10	 add	 eax, 16
  0033a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0033f	4c 8b 84 24 70
	c5 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00347	ba fe ff ff ff	 mov	 edx, -2
  0034c	8b c8		 mov	 ecx, eax
  0034e	e8 00 00 00 00	 call	 s370_vfetch4
  00353	89 45 68	 mov	 DWORD PTR micblok$[rbp+16], eax
  00356	8b 45 04	 mov	 eax, DWORD PTR amicblok$[rbp]
  00359	83 c0 14	 add	 eax, 20
  0035c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00361	4c 8b 84 24 70
	c5 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  00369	ba fe ff ff ff	 mov	 edx, -2
  0036e	8b c8		 mov	 ecx, eax
  00370	e8 00 00 00 00	 call	 s370_vfetch4
  00375	89 45 6c	 mov	 DWORD PTR micblok$[rbp+20], eax
  00378	8b 45 60	 mov	 eax, DWORD PTR micblok$[rbp+8]
  0037b	c1 e8 18	 shr	 eax, 24
  0037e	88 45 01	 mov	 BYTE PTR micpend$[rbp], al
  00381	8b 45 60	 mov	 eax, DWORD PTR micblok$[rbp+8]
  00384	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00389	89 45 10	 mov	 DWORD PTR vpswa$[rbp], eax
  0038c	8b 45 6c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  0038f	c1 e8 18	 shr	 eax, 24
  00392	88 45 0c	 mov	 BYTE PTR micevma$[rbp], al
  00395	8b 45 6c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  00398	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  0039d	c1 e8 10	 shr	 eax, 16
  003a0	88 45 0d	 mov	 BYTE PTR micevma2$[rbp], al
  003a3	8b 45 6c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  003a6	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  003ab	c1 e8 08	 shr	 eax, 8
  003ae	88 45 0e	 mov	 BYTE PTR micevma3$[rbp], al
  003b1	8b 45 6c	 mov	 eax, DWORD PTR micblok$[rbp+20]
  003b4	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  003b9	88 45 0f	 mov	 BYTE PTR micevma4$[rbp], al
  003bc	8b 45 08	 mov	 eax, DWORD PTR CR6$[rbp]
  003bf	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  003c4	85 c0		 test	 eax, eax
  003c6	74 37		 je	 SHORT $LN30@ecpsvm_dos
  003c8	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  003cd	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  003d5	4c 8b 8c 24 70
	c5 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  003dd	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  003e3	ba 01 00 00 00	 mov	 edx, 1
  003e8	8b 4d 68	 mov	 ecx, DWORD PTR micblok$[rbp+16]
  003eb	e8 00 00 00 00	 call	 s370_maddr_l
  003f0	48 8b 8c 24 70
	c5 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003f8	48 89 81 78 07
	00 00		 mov	 QWORD PTR [rcx+1912], rax
$LN30@ecpsvm_dos:
  003ff	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  00404	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0040c	4c 8b 8c 24 70
	c5 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00414	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0041a	ba 01 00 00 00	 mov	 edx, 1
  0041f	8b 4d 10	 mov	 ecx, DWORD PTR vpswa$[rbp]
  00422	e8 00 00 00 00	 call	 s370_maddr_l
  00427	48 89 45 18	 mov	 QWORD PTR vpswa_p$[rbp], rax
  0042b	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  00431	c1 e8 02	 shr	 eax, 2
  00434	83 e0 01	 and	 eax, 1
  00437	85 c0		 test	 eax, eax
  00439	74 1d		 je	 SHORT $LN31@ecpsvm_dos
  0043b	44 8b 4d 10	 mov	 r9d, DWORD PTR vpswa$[rbp]
  0043f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173404
  00446	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  0044b	48 8d 8d 80 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00452	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN31@ecpsvm_dos:
  00458	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  0045e	c1 e8 02	 shr	 eax, 2
  00461	83 e0 01	 and	 eax, 1
  00464	85 c0		 test	 eax, eax
  00466	74 53		 je	 SHORT $LN32@ecpsvm_dos
  00468	b9 01 00 00 00	 mov	 ecx, 1
  0046d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00473	48 8d 8d 80 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0047a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0047f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173406
  00486	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0048b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173407
  00492	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00497	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0049c	41 b9 03 00 00
	00		 mov	 r9d, 3
  004a2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173408
  004a9	ba a5 0d 00 00	 mov	 edx, 3493		; 00000da5H
  004ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173409
  004b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN32@ecpsvm_dos:
  004bb	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  004c1	c1 e8 02	 shr	 eax, 2
  004c4	83 e0 01	 and	 eax, 1
  004c7	85 c0		 test	 eax, eax
  004c9	74 1d		 je	 SHORT $LN33@ecpsvm_dos
  004cb	44 8b 4d 08	 mov	 r9d, DWORD PTR CR6$[rbp]
  004cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173411
  004d6	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  004db	48 8d 8d 80 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  004e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN33@ecpsvm_dos:
  004e8	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  004ee	c1 e8 02	 shr	 eax, 2
  004f1	83 e0 01	 and	 eax, 1
  004f4	85 c0		 test	 eax, eax
  004f6	74 53		 je	 SHORT $LN34@ecpsvm_dos
  004f8	b9 01 00 00 00	 mov	 ecx, 1
  004fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00503	48 8d 8d 80 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0050a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0050f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173413
  00516	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0051b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173414
  00522	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00527	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0052c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00532	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173415
  00539	ba a5 0d 00 00	 mov	 edx, 3493		; 00000da5H
  0053e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173416
  00545	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN34@ecpsvm_dos:
  0054b	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  00551	c1 e8 02	 shr	 eax, 2
  00554	83 e0 01	 and	 eax, 1
  00557	85 c0		 test	 eax, eax
  00559	74 1d		 je	 SHORT $LN35@ecpsvm_dos
  0055b	44 8b 4d 68	 mov	 r9d, DWORD PTR micblok$[rbp+16]
  0055f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173418
  00566	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  0056b	48 8d 8d 80 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00572	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN35@ecpsvm_dos:
  00578	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  0057e	c1 e8 02	 shr	 eax, 2
  00581	83 e0 01	 and	 eax, 1
  00584	85 c0		 test	 eax, eax
  00586	74 53		 je	 SHORT $LN36@ecpsvm_dos
  00588	b9 01 00 00 00	 mov	 ecx, 1
  0058d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00593	48 8d 8d 80 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0059a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0059f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173420
  005a6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173421
  005b2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005b7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005bc	41 b9 03 00 00
	00		 mov	 r9d, 3
  005c2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173422
  005c9	ba a5 0d 00 00	 mov	 edx, 3493		; 00000da5H
  005ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173423
  005d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN36@ecpsvm_dos:
  005db	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  005e1	c1 e8 02	 shr	 eax, 2
  005e4	83 e0 01	 and	 eax, 1
  005e7	85 c0		 test	 eax, eax
  005e9	74 19		 je	 SHORT $LN37@ecpsvm_dos
  005eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173425
  005f2	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  005f7	48 8d 8d 80 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  005fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN37@ecpsvm_dos:
  00604	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  0060a	c1 e8 02	 shr	 eax, 2
  0060d	83 e0 01	 and	 eax, 1
  00610	85 c0		 test	 eax, eax
  00612	74 48		 je	 SHORT $LN38@ecpsvm_dos
  00614	48 8d 8d 80 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0061b	e8 00 00 00 00	 call	 strlen
  00620	48 98		 cdqe
  00622	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00627	48 2b c8	 sub	 rcx, rax
  0062a	48 8b c1	 mov	 rax, rcx
  0062d	48 89 45 20	 mov	 QWORD PTR tv343[rbp], rax
  00631	48 8d 8d 80 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  00638	e8 00 00 00 00	 call	 strlen
  0063d	48 8d 84 05 80
	c2 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  00645	48 8b 4d 20	 mov	 rcx, QWORD PTR tv343[rbp]
  00649	44 8b c1	 mov	 r8d, ecx
  0064c	48 8b d0	 mov	 rdx, rax
  0064f	48 8b 8c 24 70
	c5 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00657	e8 00 00 00 00	 call	 display_psw
$LN38@ecpsvm_dos:
$LN4@ecpsvm_dos:
  0065c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00663	48 63 80 90 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5264]
  0066a	48 89 45 28	 mov	 QWORD PTR tv354[rbp], rax
  0066e	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  00675	48 8b f9	 mov	 rdi, rcx
  00678	33 c0		 xor	 eax, eax
  0067a	48 8b 4d 28	 mov	 rcx, QWORD PTR tv354[rbp]
  0067e	f3 aa		 rep stosb
$LN7@ecpsvm_dos:
  00680	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG173427
  00687	48 89 85 68 61
	01 00		 mov	 QWORD PTR vpregs$[rbp+104], rax
  0068e	33 c0		 xor	 eax, eax
  00690	85 c0		 test	 eax, eax
  00692	75 ec		 jne	 SHORT $LN7@ecpsvm_dos
  00694	33 c0		 xor	 eax, eax
  00696	85 c0		 test	 eax, eax
  00698	75 c2		 jne	 SHORT $LN4@ecpsvm_dos
  0069a	48 8b 55 18	 mov	 rdx, QWORD PTR vpswa_p$[rbp]
  0069e	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  006a5	e8 00 00 00 00	 call	 s370_load_psw
  006aa	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  006b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG173428
  006b7	48 8d 8d 80 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
  006c4	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  006ca	c1 e8 02	 shr	 eax, 2
  006cd	83 e0 01	 and	 eax, 1
  006d0	85 c0		 test	 eax, eax
  006d2	74 47		 je	 SHORT $LN39@ecpsvm_dos
  006d4	48 8d 8d 80 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006db	e8 00 00 00 00	 call	 strlen
  006e0	48 98		 cdqe
  006e2	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  006e7	48 2b c8	 sub	 rcx, rax
  006ea	48 8b c1	 mov	 rax, rcx
  006ed	48 89 45 30	 mov	 QWORD PTR tv372[rbp], rax
  006f1	48 8d 8d 80 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  006f8	e8 00 00 00 00	 call	 strlen
  006fd	48 8d 84 05 80
	c2 02 00	 lea	 rax, QWORD PTR buf$[rbp+rax]
  00705	48 8b 4d 30	 mov	 rcx, QWORD PTR tv372[rbp]
  00709	44 8b c1	 mov	 r8d, ecx
  0070c	48 8b d0	 mov	 rdx, rax
  0070f	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR vpregs$[rbp]
  00716	e8 00 00 00 00	 call	 display_psw
$LN39@ecpsvm_dos:
  0071b	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  00721	c1 e8 02	 shr	 eax, 2
  00724	83 e0 01	 and	 eax, 1
  00727	85 c0		 test	 eax, eax
  00729	74 53		 je	 SHORT $LN40@ecpsvm_dos
  0072b	b9 01 00 00 00	 mov	 ecx, 1
  00730	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00736	48 8d 8d 80 c2
	02 00		 lea	 rcx, QWORD PTR buf$[rbp]
  0073d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00742	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173431
  00749	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0074e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173432
  00755	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0075a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0075f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00765	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173433
  0076c	ba a5 0d 00 00	 mov	 edx, 3493		; 00000da5H
  00771	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173434
  00778	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN40@ecpsvm_dos:

; 3494 : 
; 3495 :     /*
; 3496 :     if(!(micevma & MICSTSM))
; 3497 :     {
; 3498 :         DEBUG_SASSISTX(SSM,MSGBUF(buf2, "SASSIST SSM reject : SSM Disabled in MICEVMA; EVMA=%2.2X",micevma));
; 3499 :         DEBUG_SASSISTX(SSM,WRMSG(HHC90000, "D", buf2));
; 3500 :         return(1);
; 3501 :     }
; 3502 :     */
; 3503 :     /* Get CR0 - set ref bit on  fetched CR0 (already done in prolog for MICBLOK) */
; 3504 :     cregs=MADDR(micblok.MICCREG,USE_REAL_ADDR,regs,ACCTYPE_READ,0);

  0077e	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  00783	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0078b	4c 8b 8c 24 70
	c5 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00793	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00799	ba 01 00 00 00	 mov	 edx, 1
  0079e	8b 4d 5c	 mov	 ecx, DWORD PTR micblok$[rbp+4]
  007a1	e8 00 00 00 00	 call	 s370_maddr_l
  007a6	48 89 45 38	 mov	 QWORD PTR cregs$[rbp], rax

; 3505 :     FETCH_FW(creg0,cregs);

  007aa	48 8b 4d 38	 mov	 rcx, QWORD PTR cregs$[rbp]
  007ae	e8 00 00 00 00	 call	 fetch_fw_noswap
  007b3	8b c8		 mov	 ecx, eax
  007b5	e8 00 00 00 00	 call	 _byteswap_ulong
  007ba	89 45 14	 mov	 DWORD PTR creg0$[rbp], eax

; 3506 : 
; 3507 :     /* Reject if V CR0 specifies SSM Suppression */
; 3508 :     if(creg0 & 0x40000000)

  007bd	8b 45 14	 mov	 eax, DWORD PTR creg0$[rbp]
  007c0	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  007c5	85 c0		 test	 eax, eax
  007c7	74 6d		 je	 SHORT $LN41@ecpsvm_dos

; 3509 :     {
; 3510 :         DEBUG_SASSISTX(SSM,WRMSG(HHC90000, "D", "SASSIST SSM reject : V SSM Suppr"));

  007c9	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  007cf	c1 e8 02	 shr	 eax, 2
  007d2	83 e0 01	 and	 eax, 1
  007d5	85 c0		 test	 eax, eax
  007d7	74 53		 je	 SHORT $LN42@ecpsvm_dos
  007d9	b9 01 00 00 00	 mov	 ecx, 1
  007de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173437
  007eb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  007f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173438
  007f7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173439
  00803	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00808	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0080d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00813	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173440
  0081a	ba b6 0d 00 00	 mov	 edx, 3510		; 00000db6H
  0081f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173441
  00826	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN42@ecpsvm_dos:

; 3511 :         return(1);

  0082c	b8 01 00 00 00	 mov	 eax, 1
  00831	e9 7a 04 00 00	 jmp	 $LN1@ecpsvm_dos
$LN41@ecpsvm_dos:

; 3512 :     }
; 3513 :     /* Load the requested SSM Mask */
; 3514 :     /* USE Normal vfetchb here ! not only do we want tranlsation */
; 3515 :     /* but also fetch protection control, ref bit, etc.. */
; 3516 :     reqmask=ARCH_DEP(vfetchb) (effective_addr2,b2,regs);

  00836	4c 8b 84 24 70
	c5 02 00	 mov	 r8, QWORD PTR regs$[rsp]
  0083e	8b 94 24 78 c5
	02 00		 mov	 edx, DWORD PTR b2$[rsp]
  00845	8b 8c 24 80 c5
	02 00		 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  0084c	e8 00 00 00 00	 call	 s370_vfetchb
  00851	88 45 00	 mov	 BYTE PTR reqmask$[rbp], al
$LN10@ecpsvm_dos:

; 3517 : 
; 3518 :     INITPSEUDOREGS(npregs);

  00854	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0085b	48 63 80 90 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5264]
  00862	48 89 45 40	 mov	 QWORD PTR tv426[rbp], rax
  00866	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR npregs$[rbp]
  0086d	48 8b f9	 mov	 rdi, rcx
  00870	33 c0		 xor	 eax, eax
  00872	48 8b 4d 40	 mov	 rcx, QWORD PTR tv426[rbp]
  00876	f3 aa		 rep stosb
$LN13@ecpsvm_dos:
  00878	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG173442
  0087f	48 89 85 e8 00
	00 00		 mov	 QWORD PTR npregs$[rbp+104], rax
  00886	33 c0		 xor	 eax, eax
  00888	85 c0		 test	 eax, eax
  0088a	75 ec		 jne	 SHORT $LN13@ecpsvm_dos
  0088c	33 c0		 xor	 eax, eax
  0088e	85 c0		 test	 eax, eax
  00890	75 c2		 jne	 SHORT $LN10@ecpsvm_dos

; 3519 :     /* Load the virtual PSW AGAIN in a new structure */
; 3520 : 
; 3521 :     ARCH_DEP(load_psw) (&npregs,vpswa_p);

  00892	48 8b 55 18	 mov	 rdx, QWORD PTR vpswa_p$[rbp]
  00896	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR npregs$[rbp]
  0089d	e8 00 00 00 00	 call	 s370_load_psw

; 3522 : 
; 3523 :     npregs.psw.sysmask=reqmask;

  008a2	0f b6 45 00	 movzx	 eax, BYTE PTR reqmask$[rbp]
  008a6	88 85 f8 00 00
	00		 mov	 BYTE PTR npregs$[rbp+120], al

; 3524 : 
; 3525 :     if(ecpsvm_check_pswtrans(regs,&micblok,micpend,&vpregs,&npregs))       /* Check PSW transition capability */

  008ac	48 8d 85 80 00
	00 00		 lea	 rax, QWORD PTR npregs$[rbp]
  008b3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008b8	4c 8d 8d 00 61
	01 00		 lea	 r9, QWORD PTR vpregs$[rbp]
  008bf	44 0f b6 45 01	 movzx	 r8d, BYTE PTR micpend$[rbp]
  008c4	48 8d 55 58	 lea	 rdx, QWORD PTR micblok$[rbp]
  008c8	48 8b 8c 24 70
	c5 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  008d0	e8 00 00 00 00	 call	 ecpsvm_check_pswtrans
  008d5	85 c0		 test	 eax, eax
  008d7	74 6d		 je	 SHORT $LN43@ecpsvm_dos

; 3526 :     {
; 3527 :         DEBUG_SASSISTX(SSM,WRMSG(HHC90000, "D", "SASSIST SSM Reject : New PSW too complex"));

  008d9	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  008df	c1 e8 02	 shr	 eax, 2
  008e2	83 e0 01	 and	 eax, 1
  008e5	85 c0		 test	 eax, eax
  008e7	74 53		 je	 SHORT $LN44@ecpsvm_dos
  008e9	b9 01 00 00 00	 mov	 ecx, 1
  008ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173445
  008fb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00900	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173446
  00907	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0090c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173447
  00913	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00918	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0091d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00923	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173448
  0092a	ba c7 0d 00 00	 mov	 edx, 3527		; 00000dc7H
  0092f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173449
  00936	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN44@ecpsvm_dos:

; 3528 :         return(1); /* Something in the NEW PSW we can't handle.. let CP do it */

  0093c	b8 01 00 00 00	 mov	 eax, 1
  00941	e9 6a 03 00 00	 jmp	 $LN1@ecpsvm_dos
$LN43@ecpsvm_dos:
$LN16@ecpsvm_dos:

; 3529 :     }
; 3530 : 
; 3531 :     /* While we are at it, set the IA in the V PSW */
; 3532 :     MAYBE_SET_PSW_IA_FROM_IP(regs);

  00946	48 8b 84 24 70
	c5 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  0094e	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00956	74 43		 je	 SHORT $LN45@ecpsvm_dos
  00958	48 8b 84 24 70
	c5 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  00960	8b 80 10 02 00
	00		 mov	 eax, DWORD PTR [rax+528]
  00966	48 8b 8c 24 70
	c5 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0096e	48 8b 94 24 70
	c5 02 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00976	48 8b 92 00 02
	00 00		 mov	 rdx, QWORD PTR [rdx+512]
  0097d	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00981	48 2b ca	 sub	 rcx, rdx
  00984	48 03 c1	 add	 rax, rcx
  00987	48 25 ff ff ff
	00		 and	 rax, 16777215		; 00ffffffH
  0098d	48 8b 8c 24 70
	c5 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00995	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
$LN45@ecpsvm_dos:
  0099b	33 c0		 xor	 eax, eax
  0099d	85 c0		 test	 eax, eax
  0099f	75 a5		 jne	 SHORT $LN16@ecpsvm_dos
$LN19@ecpsvm_dos:

; 3533 :     SET_PSW_IA_AND_MAYBE_IP(&npregs, regs->psw.IA);

  009a1	48 8b 84 24 70
	c5 02 00	 mov	 rax, QWORD PTR regs$[rsp]
  009a9	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  009af	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  009b4	89 85 08 01 00
	00		 mov	 DWORD PTR npregs$[rbp+136], eax
  009ba	48 83 bd 88 02
	00 00 00	 cmp	 QWORD PTR npregs$[rbp+520], 0
  009c2	74 41		 je	 SHORT $LN46@ecpsvm_dos
  009c4	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR npregs$[rbp+136]
  009ca	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  009cf	39 85 90 02 00
	00		 cmp	 DWORD PTR npregs$[rbp+528], eax
  009d5	75 23		 jne	 SHORT $LN47@ecpsvm_dos
  009d7	8b 85 08 01 00
	00		 mov	 eax, DWORD PTR npregs$[rbp+136]
  009dd	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  009e2	8b c0		 mov	 eax, eax
  009e4	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR npregs$[rbp+512]
  009eb	48 0b c8	 or	 rcx, rax
  009ee	48 8b c1	 mov	 rax, rcx
  009f1	48 89 85 e8 00
	00 00		 mov	 QWORD PTR npregs$[rbp+104], rax
  009f8	eb 0b		 jmp	 SHORT $LN48@ecpsvm_dos
$LN47@ecpsvm_dos:
  009fa	48 c7 85 88 02
	00 00 00 00 00
	00		 mov	 QWORD PTR npregs$[rbp+520], 0
$LN48@ecpsvm_dos:
$LN46@ecpsvm_dos:
  00a05	33 c0		 xor	 eax, eax
  00a07	85 c0		 test	 eax, eax
  00a09	75 96		 jne	 SHORT $LN19@ecpsvm_dos

; 3534 : 
; 3535 :     /* Set the change bit */
; 3536 :     MADDR(vpswa,USE_REAL_ADDR,regs,ACCTYPE_WRITE,0);

  00a0b	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  00a10	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00a18	4c 8b 8c 24 70
	c5 02 00	 mov	 r9, QWORD PTR regs$[rsp]
  00a20	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00a26	ba 01 00 00 00	 mov	 edx, 1
  00a2b	8b 4d 10	 mov	 ecx, DWORD PTR vpswa$[rbp]
  00a2e	e8 00 00 00 00	 call	 s370_maddr_l

; 3537 :     /* store the new PSW */
; 3538 :     ARCH_DEP(store_psw) (&npregs,vpswa_p);

  00a33	48 8b 55 18	 mov	 rdx, QWORD PTR vpswa_p$[rbp]
  00a37	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR npregs$[rbp]
  00a3e	e8 00 00 00 00	 call	 s370_store_psw

; 3539 :     DEBUG_SASSISTX(SSM,MSGBUF(buf2, "SASSIST SSM Complete : new SM = %2.2X",reqmask));

  00a43	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  00a49	c1 e8 02	 shr	 eax, 2
  00a4c	83 e0 01	 and	 eax, 1
  00a4f	85 c0		 test	 eax, eax
  00a51	74 20		 je	 SHORT $LN49@ecpsvm_dos
  00a53	0f b6 45 00	 movzx	 eax, BYTE PTR reqmask$[rbp]
  00a57	44 8b c8	 mov	 r9d, eax
  00a5a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173455
  00a61	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00a66	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf2$[rbp]
  00a6d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN49@ecpsvm_dos:

; 3540 :     DEBUG_SASSISTX(SSM,WRMSG(HHC90000, "D", buf2));

  00a73	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  00a79	c1 e8 02	 shr	 eax, 2
  00a7c	83 e0 01	 and	 eax, 1
  00a7f	85 c0		 test	 eax, eax
  00a81	74 53		 je	 SHORT $LN50@ecpsvm_dos
  00a83	b9 01 00 00 00	 mov	 ecx, 1
  00a88	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a8e	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf2$[rbp]
  00a95	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a9a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173457
  00aa1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00aa6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173458
  00aad	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ab2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ab7	41 b9 03 00 00
	00		 mov	 r9d, 3
  00abd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173459
  00ac4	ba d4 0d 00 00	 mov	 edx, 3540		; 00000dd4H
  00ac9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173460
  00ad0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN50@ecpsvm_dos:

; 3541 :     DEBUG_SASSISTX(SSM,MSGBUF(buf2, "SASSIST SSM New VIRT "));

  00ad6	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  00adc	c1 e8 02	 shr	 eax, 2
  00adf	83 e0 01	 and	 eax, 1
  00ae2	85 c0		 test	 eax, eax
  00ae4	74 19		 je	 SHORT $LN51@ecpsvm_dos
  00ae6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173462
  00aed	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00af2	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf2$[rbp]
  00af9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN51@ecpsvm_dos:

; 3542 :     DEBUG_SASSISTX(SSM,display_psw(&npregs, &buf2[strlen(buf2)], sizeof(buf2)-(int)strlen(buf2)));

  00aff	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  00b05	c1 e8 02	 shr	 eax, 2
  00b08	83 e0 01	 and	 eax, 1
  00b0b	85 c0		 test	 eax, eax
  00b0d	74 47		 je	 SHORT $LN52@ecpsvm_dos
  00b0f	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf2$[rbp]
  00b16	e8 00 00 00 00	 call	 strlen
  00b1b	48 98		 cdqe
  00b1d	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00b22	48 2b c8	 sub	 rcx, rax
  00b25	48 8b c1	 mov	 rax, rcx
  00b28	48 89 45 48	 mov	 QWORD PTR tv581[rbp], rax
  00b2c	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf2$[rbp]
  00b33	e8 00 00 00 00	 call	 strlen
  00b38	48 8d 84 05 80
	c1 02 00	 lea	 rax, QWORD PTR buf2$[rbp+rax]
  00b40	48 8b 4d 48	 mov	 rcx, QWORD PTR tv581[rbp]
  00b44	44 8b c1	 mov	 r8d, ecx
  00b47	48 8b d0	 mov	 rdx, rax
  00b4a	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR npregs$[rbp]
  00b51	e8 00 00 00 00	 call	 display_psw
$LN52@ecpsvm_dos:

; 3543 :     DEBUG_SASSISTX(SSM,WRMSG(HHC90000, "D", buf2));

  00b56	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  00b5c	c1 e8 02	 shr	 eax, 2
  00b5f	83 e0 01	 and	 eax, 1
  00b62	85 c0		 test	 eax, eax
  00b64	74 53		 je	 SHORT $LN53@ecpsvm_dos
  00b66	b9 01 00 00 00	 mov	 ecx, 1
  00b6b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b71	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf2$[rbp]
  00b78	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00b7d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173465
  00b84	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b89	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173466
  00b90	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b95	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b9a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00ba0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173467
  00ba7	ba d7 0d 00 00	 mov	 edx, 3543		; 00000dd7H
  00bac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173468
  00bb3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN53@ecpsvm_dos:

; 3544 :     DEBUG_SASSISTX(SSM,MSGBUF(buf2, "SASSIST SSM New REAL "));

  00bb9	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  00bbf	c1 e8 02	 shr	 eax, 2
  00bc2	83 e0 01	 and	 eax, 1
  00bc5	85 c0		 test	 eax, eax
  00bc7	74 19		 je	 SHORT $LN54@ecpsvm_dos
  00bc9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173470
  00bd0	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00bd5	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf2$[rbp]
  00bdc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN54@ecpsvm_dos:

; 3545 :     DEBUG_SASSISTX(SSM,display_psw(regs, &buf2[strlen(buf2)], sizeof(buf2)-(int)strlen(buf2)));

  00be2	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  00be8	c1 e8 02	 shr	 eax, 2
  00beb	83 e0 01	 and	 eax, 1
  00bee	85 c0		 test	 eax, eax
  00bf0	74 48		 je	 SHORT $LN55@ecpsvm_dos
  00bf2	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf2$[rbp]
  00bf9	e8 00 00 00 00	 call	 strlen
  00bfe	48 98		 cdqe
  00c00	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00c05	48 2b c8	 sub	 rcx, rax
  00c08	48 8b c1	 mov	 rax, rcx
  00c0b	48 89 45 50	 mov	 QWORD PTR tv616[rbp], rax
  00c0f	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf2$[rbp]
  00c16	e8 00 00 00 00	 call	 strlen
  00c1b	48 8d 84 05 80
	c1 02 00	 lea	 rax, QWORD PTR buf2$[rbp+rax]
  00c23	48 8b 4d 50	 mov	 rcx, QWORD PTR tv616[rbp]
  00c27	44 8b c1	 mov	 r8d, ecx
  00c2a	48 8b d0	 mov	 rdx, rax
  00c2d	48 8b 8c 24 70
	c5 02 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00c35	e8 00 00 00 00	 call	 display_psw
$LN55@ecpsvm_dos:

; 3546 :     DEBUG_SASSISTX(SSM,WRMSG(HHC90000, "D", buf2));

  00c3a	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+56
  00c40	c1 e8 02	 shr	 eax, 2
  00c43	83 e0 01	 and	 eax, 1
  00c46	85 c0		 test	 eax, eax
  00c48	74 53		 je	 SHORT $LN56@ecpsvm_dos
  00c4a	b9 01 00 00 00	 mov	 ecx, 1
  00c4f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c55	48 8d 8d 80 c1
	02 00		 lea	 rcx, QWORD PTR buf2$[rbp]
  00c5c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00c61	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173473
  00c68	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c6d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173474
  00c74	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c79	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c7e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c84	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173475
  00c8b	ba da 0d 00 00	 mov	 edx, 3546		; 00000ddaH
  00c90	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173476
  00c97	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN56@ecpsvm_dos:

; 3547 :     SASSIST_HIT(SSM);

  00c9d	48 8b 05 30 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_sastats+48
  00ca4	48 ff c0	 inc	 rax
  00ca7	48 89 05 30 00
	00 00		 mov	 QWORD PTR ecpsvm_sastats+48, rax

; 3548 :     return(0);

  00cae	33 c0		 xor	 eax, eax
$LN1@ecpsvm_dos:

; 3549 : }

  00cb0	48 8b 8d 80 c4
	02 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00cb7	48 33 cc	 xor	 rcx, rsp
  00cba	e8 00 00 00 00	 call	 __security_check_cookie
  00cbf	48 81 c4 58 c5
	02 00		 add	 rsp, 181592		; 0002c558H
  00cc6	5f		 pop	 rdi
  00cc7	5d		 pop	 rbp
  00cc8	c3		 ret	 0
ecpsvm_dossm ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
regs$ = 80
svccode$ = 88
ecpsvm_dosvc PROC

; 3758 : {

$LN8:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3759 : 
; 3760 :     if(regs->CR_L(6) & ECPSVM_CR6_SVCINHIB)

  0000d	b8 08 00 00 00	 mov	 eax, 8
  00012	48 6b c0 07	 imul	 rax, rax, 7
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR regs$[rsp]
  0001b	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00022	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00027	85 c0		 test	 eax, eax
  00029	74 6a		 je	 SHORT $LN2@ecpsvm_dos

; 3761 :     {
; 3762 :         DEBUG_SASSISTX(SVC,WRMSG(HHC90000, "D", "SASSIST SVC Reject : SVC Assist Inhibit"));

  0002b	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_sastats+24
  00031	c1 e8 02	 shr	 eax, 2
  00034	83 e0 01	 and	 eax, 1
  00037	85 c0		 test	 eax, eax
  00039	74 53		 je	 SHORT $LN3@ecpsvm_dos
  0003b	b9 01 00 00 00	 mov	 ecx, 1
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173796
  0004d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00052	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173797
  00059	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173798
  00065	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0006a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00075	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173799
  0007c	ba b2 0e 00 00	 mov	 edx, 3762		; 00000eb2H
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173800
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN3@ecpsvm_dos:

; 3763 :         return(1);      /* SVC SASSIST INHIBIT ON */

  0008e	b8 01 00 00 00	 mov	 eax, 1
  00093	eb 4b		 jmp	 SHORT $LN1@ecpsvm_dos
$LN2@ecpsvm_dos:

; 3764 :     }
; 3765 : 
; 3766 :     /* Check first if the CPU is in supervisor state.  If so, this is a CP-issued SVC.
; 3767 :        If it is SVC 8 (LINK) or SVC 12 (RETURN), attempt to handle these for CP.  All other
; 3768 :        SVC numbers are handled by CP.
; 3769 : 
; 3770 :        If the CPU is in problem state, then we can attempt to assist this SVC via VMA.
; 3771 :     */
; 3772 :     if(!PROBSTATE(&regs->psw))

  00095	48 8b 44 24 50	 mov	 rax, QWORD PTR regs$[rsp]
  0009a	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  0009e	83 e0 01	 and	 eax, 1
  000a1	85 c0		 test	 eax, eax
  000a3	75 2d		 jne	 SHORT $LN4@ecpsvm_dos

; 3773 :     {
; 3774 :           if(svccode==8)

  000a5	83 7c 24 58 08	 cmp	 DWORD PTR svccode$[rsp], 8
  000aa	75 0c		 jne	 SHORT $LN5@ecpsvm_dos

; 3775 :           {
; 3776 :               return ecpsvm_doCPlink(regs);

  000ac	48 8b 4c 24 50	 mov	 rcx, QWORD PTR regs$[rsp]
  000b1	e8 00 00 00 00	 call	 ecpsvm_doCPlink
  000b6	eb 28		 jmp	 SHORT $LN1@ecpsvm_dos
$LN5@ecpsvm_dos:

; 3777 :           }
; 3778 :           if(svccode==12)

  000b8	83 7c 24 58 0c	 cmp	 DWORD PTR svccode$[rsp], 12
  000bd	75 0c		 jne	 SHORT $LN6@ecpsvm_dos

; 3779 :           {
; 3780 :               return ecpsvm_doCPretrn(regs);

  000bf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR regs$[rsp]
  000c4	e8 00 00 00 00	 call	 ecpsvm_doCPretrn
  000c9	eb 15		 jmp	 SHORT $LN1@ecpsvm_dos
$LN6@ecpsvm_dos:

; 3781 :           }
; 3782 :           return(1);                                /* all other SVC numbers let CP handle */

  000cb	b8 01 00 00 00	 mov	 eax, 1
  000d0	eb 0e		 jmp	 SHORT $LN1@ecpsvm_dos
$LN4@ecpsvm_dos:

; 3783 :     }
; 3784 :     return ecpsvm_doassistsvc(regs,svccode);        /* problem state:  do VM assist for SVCs */

  000d2	8b 54 24 58	 mov	 edx, DWORD PTR svccode$[rsp]
  000d6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR regs$[rsp]
  000db	e8 00 00 00 00	 call	 ecpsvm_doassistsvc
$LN1@ecpsvm_dos:

; 3785 : }

  000e0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e4	c3		 ret	 0
ecpsvm_dosvc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_dw_noswap
_TEXT	SEGMENT
ptr$ = 8
value$ = 16
store_dw_noswap PROC					; COMDAT

; 834  :     inline void store_dw_noswap(void *ptr, U64 value) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 835  :       memcpy((BYTE *)ptr, (BYTE *)&value, 8);

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR ptr$[rsp]
  0000f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR value$[rsp]
  00014	48 89 08	 mov	 QWORD PTR [rax], rcx

; 836  :     }

  00017	c3		 ret	 0
store_dw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_dw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_dw_noswap PROC					; COMDAT

; 816  :     inline U64 fetch_dw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 817  :       U64 value;
; 818  :       memcpy(&value, (BYTE *)ptr, 8);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 04 24	 mov	 QWORD PTR value$[rsp], rax

; 819  :       return value;

  00015	48 8b 04 24	 mov	 rax, QWORD PTR value$[rsp]

; 820  :     }

  00019	48 83 c4 18	 add	 rsp, 24
  0001d	c3		 ret	 0
fetch_dw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_fw_noswap
_TEXT	SEGMENT
ptr$ = 8
value$ = 16
store_fw_noswap PROC					; COMDAT

; 764  :     inline void store_fw_noswap(void *ptr, U32 value) {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 765  :       memcpy((BYTE *)ptr, (BYTE *)&value, 4);

  00009	48 8b 44 24 08	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	8b 4c 24 10	 mov	 ecx, DWORD PTR value$[rsp]
  00012	89 08		 mov	 DWORD PTR [rax], ecx

; 766  :     }

  00014	c3		 ret	 0
store_fw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_fw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_fw_noswap PROC					; COMDAT

; 746  :     inline U32 fetch_fw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 747  :       U32 value;
; 748  :       memcpy(&value, (BYTE *)ptr, 4);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	8b 00		 mov	 eax, DWORD PTR [rax]
  00010	89 04 24	 mov	 DWORD PTR value$[rsp], eax

; 749  :       return value;

  00013	8b 04 24	 mov	 eax, DWORD PTR value$[rsp]

; 750  :     }

  00016	48 83 c4 18	 add	 rsp, 24
  0001a	c3		 ret	 0
fetch_fw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_hw_noswap
_TEXT	SEGMENT
ptr$ = 8
value$ = 16
store_hw_noswap PROC					; COMDAT

; 730  :     inline void store_hw_noswap(void *ptr, U16 value) {

  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 731  :       memcpy((BYTE *)ptr, (BYTE *)&value, 2);

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR ptr$[rsp]
  0000f	0f b7 4c 24 10	 movzx	 ecx, WORD PTR value$[rsp]
  00014	66 89 08	 mov	 WORD PTR [rax], cx

; 732  :     }

  00017	c3		 ret	 0
store_hw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_hw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_hw_noswap PROC					; COMDAT

; 712  :     inline U16 fetch_hw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 713  :       U16 value;
; 714  :       memcpy(&value, (BYTE *)ptr, 2);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00011	66 89 04 24	 mov	 WORD PTR value$[rsp], ax

; 715  :       return value;

  00015	0f b7 04 24	 movzx	 eax, WORD PTR value$[rsp]

; 716  :     }

  00019	48 83 c4 18	 add	 rsp, 24
  0001d	c3		 ret	 0
fetch_hw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
temp$1 = 64
effective_addr1$ = 68
effective_addr2$ = 72
b1$ = 76
b2$ = 80
inst$ = 112
regs$ = 120
s370_ecpsvm_prefmach_assist PROC

; 3389 : {

$LN21:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 3390 :     ECPSVM_PROLOG(PMASS);

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR inst$[rsp]
  00013	48 83 c0 02	 add	 rax, 2
  00017	48 8b c8	 mov	 rcx, rax
  0001a	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001f	8b c8		 mov	 ecx, eax
  00021	e8 00 00 00 00	 call	 _byteswap_ulong
  00026	89 44 24 40	 mov	 DWORD PTR temp$1[rsp], eax
  0002a	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  0002e	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00033	89 44 24 48	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00037	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  0003b	c1 e8 0c	 shr	 eax, 12
  0003e	83 e0 0f	 and	 eax, 15
  00041	89 44 24 50	 mov	 DWORD PTR b2$[rsp], eax
  00045	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  00049	c1 e8 10	 shr	 eax, 16
  0004c	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00051	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00055	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  00059	c1 e8 1c	 shr	 eax, 28
  0005c	83 e0 0f	 and	 eax, 15
  0005f	89 44 24 4c	 mov	 DWORD PTR b1$[rsp], eax
  00063	83 7c 24 4c 00	 cmp	 DWORD PTR b1$[rsp], 0
  00068	74 2a		 je	 SHORT $LN8@s370_ecpsv
  0006a	48 63 44 24 4c	 movsxd	 rax, DWORD PTR b1$[rsp]
  0006f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00074	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007b	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0007f	03 c8		 add	 ecx, eax
  00081	8b c1		 mov	 eax, ecx
  00083	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00087	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0008b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00090	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN8@s370_ecpsv:
  00094	83 7c 24 50 00	 cmp	 DWORD PTR b2$[rsp], 0
  00099	74 2a		 je	 SHORT $LN9@s370_ecpsv
  0009b	48 63 44 24 50	 movsxd	 rax, DWORD PTR b2$[rsp]
  000a0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a5	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000ac	8b 4c 24 48	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000b0	03 c8		 add	 ecx, eax
  000b2	8b c1		 mov	 eax, ecx
  000b4	89 44 24 48	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000b8	8b 44 24 48	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000bc	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000c1	89 44 24 48	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN9@s370_ecpsv:
$LN4@s370_ecpsv:
  000c5	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000ca	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ce	48 83 c0 06	 add	 rax, 6
  000d2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000d7	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000db	33 c0		 xor	 eax, eax
  000dd	83 f8 06	 cmp	 eax, 6
  000e0	74 0c		 je	 SHORT $LN10@s370_ecpsv
  000e2	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000e7	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN10@s370_ecpsv:
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	75 d1		 jne	 SHORT $LN4@s370_ecpsv
  000f4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000f9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  000fd	83 e0 01	 and	 eax, 1
  00100	85 c0		 test	 eax, eax
  00102	74 15		 je	 SHORT $LN11@s370_ecpsv
  00104	ba 02 00 00 00	 mov	 edx, 2
  00109	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0010e	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00113	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN11@s370_ecpsv:
$LN7@s370_ecpsv:
  00119	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0011e	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00124	d1 e8		 shr	 eax, 1
  00126	83 e0 01	 and	 eax, 1
  00129	85 c0		 test	 eax, eax
  0012b	74 18		 je	 SHORT $LN12@s370_ecpsv
  0012d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00132	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00138	ba fc ff ff ff	 mov	 edx, -4
  0013d	48 8b c8	 mov	 rcx, rax
  00140	e8 00 00 00 00	 call	 longjmp
$LN12@s370_ecpsv:
  00145	33 c0		 xor	 eax, eax
  00147	85 c0		 test	 eax, eax
  00149	75 ce		 jne	 SHORT $LN7@s370_ecpsv
  0014b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00152	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00158	c1 e8 11	 shr	 eax, 17
  0015b	83 e0 01	 and	 eax, 1
  0015e	85 c0		 test	 eax, eax
  00160	75 72		 jne	 SHORT $LN13@s370_ecpsv
  00162	8b 05 b8 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+696
  00168	c1 e8 02	 shr	 eax, 2
  0016b	83 e0 01	 and	 eax, 1
  0016e	85 c0		 test	 eax, eax
  00170	74 53		 je	 SHORT $LN14@s370_ecpsv
  00172	b9 01 00 00 00	 mov	 ecx, 1
  00177	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173199
  00184	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173200
  00190	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173201
  0019c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001a1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a6	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173202
  001b3	ba 3e 0d 00 00	 mov	 edx, 3390		; 00000d3eH
  001b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173203
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN14@s370_ecpsv:
  001c5	ba 01 00 00 00	 mov	 edx, 1
  001ca	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001cf	e8 00 00 00 00	 call	 s370_program_interrupt
$LN13@s370_ecpsv:
  001d4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001d9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  001dd	83 e0 01	 and	 eax, 1
  001e0	85 c0		 test	 eax, eax
  001e2	74 15		 je	 SHORT $LN15@s370_ecpsv
  001e4	ba 02 00 00 00	 mov	 edx, 2
  001e9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001ee	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001f3	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN15@s370_ecpsv:
  001f9	8b 05 b8 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+696
  001ff	d1 e8		 shr	 eax, 1
  00201	83 e0 01	 and	 eax, 1
  00204	85 c0		 test	 eax, eax
  00206	75 68		 jne	 SHORT $LN16@s370_ecpsv
  00208	8b 05 b8 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+696
  0020e	c1 e8 02	 shr	 eax, 2
  00211	83 e0 01	 and	 eax, 1
  00214	85 c0		 test	 eax, eax
  00216	74 53		 je	 SHORT $LN17@s370_ecpsv
  00218	b9 01 00 00 00	 mov	 ecx, 1
  0021d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00223	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173207
  0022a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173208
  00236	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173209
  00242	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00247	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00252	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173210
  00259	ba 3e 0d 00 00	 mov	 edx, 3390		; 00000d3eH
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173211
  00265	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@s370_ecpsv:
  0026b	e9 94 00 00 00	 jmp	 $LN1@s370_ecpsv
$LN16@s370_ecpsv:
  00270	b8 08 00 00 00	 mov	 eax, 8
  00275	48 6b c0 07	 imul	 rax, rax, 7
  00279	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0027e	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00285	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0028a	85 c0		 test	 eax, eax
  0028c	75 02		 jne	 SHORT $LN18@s370_ecpsv
  0028e	eb 74		 jmp	 SHORT $LN1@s370_ecpsv
$LN18@s370_ecpsv:
  00290	48 8b 05 a8 02
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+680
  00297	48 ff c0	 inc	 rax
  0029a	48 89 05 a8 02
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+680, rax
  002a1	8b 05 b8 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+696
  002a7	c1 e8 02	 shr	 eax, 2
  002aa	83 e0 01	 and	 eax, 1
  002ad	85 c0		 test	 eax, eax
  002af	74 53		 je	 SHORT $LN19@s370_ecpsv
  002b1	b9 01 00 00 00	 mov	 ecx, 1
  002b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173214
  002c3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173215
  002cf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173216
  002db	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e5	41 b9 03 00 00
	00		 mov	 r9d, 3
  002eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173217
  002f2	ba 3e 0d 00 00	 mov	 edx, 3390		; 00000d3eH
  002f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173218
  002fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN19@s370_ecpsv:
$LN1@s370_ecpsv:
$LN20@s370_ecpsv:

; 3391 : }

  00304	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00308	c3		 ret	 0
s370_ecpsvm_prefmach_assist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
effective_addr1$ = 64
effective_addr2$ = 68
temp$1 = 72
b1$ = 76
b2$ = 80
fretl$ = 84
maxsztbl$ = 88
numdw$ = 92
block$ = 96
inst$ = 128
regs$ = 136
s370_ecpsvm_extended_fretx PROC

; 3363 : {

$LN28:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 3364 :     U32 fretl;
; 3365 :     U32 maxsztbl;
; 3366 :     U32 numdw;
; 3367 :     U32 block;
; 3368 : 
; 3369 :     ECPSVM_PROLOG(FRETX);

  0000e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  00016	48 83 c0 02	 add	 rax, 2
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 fetch_fw_noswap
  00022	8b c8		 mov	 ecx, eax
  00024	e8 00 00 00 00	 call	 _byteswap_ulong
  00029	89 44 24 48	 mov	 DWORD PTR temp$1[rsp], eax
  0002d	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00031	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00036	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0003a	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0003e	c1 e8 0c	 shr	 eax, 12
  00041	83 e0 0f	 and	 eax, 15
  00044	89 44 24 50	 mov	 DWORD PTR b2$[rsp], eax
  00048	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0004c	c1 e8 10	 shr	 eax, 16
  0004f	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00054	89 44 24 40	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00058	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0005c	c1 e8 1c	 shr	 eax, 28
  0005f	83 e0 0f	 and	 eax, 15
  00062	89 44 24 4c	 mov	 DWORD PTR b1$[rsp], eax
  00066	83 7c 24 4c 00	 cmp	 DWORD PTR b1$[rsp], 0
  0006b	74 2d		 je	 SHORT $LN11@s370_ecpsv
  0006d	48 63 44 24 4c	 movsxd	 rax, DWORD PTR b1$[rsp]
  00072	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0007a	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00081	8b 4c 24 40	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00085	03 c8		 add	 ecx, eax
  00087	8b c1		 mov	 eax, ecx
  00089	89 44 24 40	 mov	 DWORD PTR effective_addr1$[rsp], eax
  0008d	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00091	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00096	89 44 24 40	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN11@s370_ecpsv:
  0009a	83 7c 24 50 00	 cmp	 DWORD PTR b2$[rsp], 0
  0009f	74 2d		 je	 SHORT $LN12@s370_ecpsv
  000a1	48 63 44 24 50	 movsxd	 rax, DWORD PTR b2$[rsp]
  000a6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000ae	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000b5	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000b9	03 c8		 add	 ecx, eax
  000bb	8b c1		 mov	 eax, ecx
  000bd	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000c1	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000c5	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000ca	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN12@s370_ecpsv:
$LN4@s370_ecpsv:
  000ce	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000d6	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000da	48 83 c0 06	 add	 rax, 6
  000de	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000e6	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000ea	33 c0		 xor	 eax, eax
  000ec	83 f8 06	 cmp	 eax, 6
  000ef	74 0f		 je	 SHORT $LN13@s370_ecpsv
  000f1	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000f9	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN13@s370_ecpsv:
  00100	33 c0		 xor	 eax, eax
  00102	85 c0		 test	 eax, eax
  00104	75 c8		 jne	 SHORT $LN4@s370_ecpsv
  00106	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0010e	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00112	83 e0 01	 and	 eax, 1
  00115	85 c0		 test	 eax, eax
  00117	74 1b		 je	 SHORT $LN14@s370_ecpsv
  00119	ba 02 00 00 00	 mov	 edx, 2
  0011e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00126	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0012e	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN14@s370_ecpsv:
$LN7@s370_ecpsv:
  00134	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0013c	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00142	d1 e8		 shr	 eax, 1
  00144	83 e0 01	 and	 eax, 1
  00147	85 c0		 test	 eax, eax
  00149	74 1b		 je	 SHORT $LN15@s370_ecpsv
  0014b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00153	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00159	ba fc ff ff ff	 mov	 edx, -4
  0015e	48 8b c8	 mov	 rcx, rax
  00161	e8 00 00 00 00	 call	 longjmp
$LN15@s370_ecpsv:
  00166	33 c0		 xor	 eax, eax
  00168	85 c0		 test	 eax, eax
  0016a	75 c8		 jne	 SHORT $LN7@s370_ecpsv
  0016c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00173	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00179	c1 e8 11	 shr	 eax, 17
  0017c	83 e0 01	 and	 eax, 1
  0017f	85 c0		 test	 eax, eax
  00181	75 75		 jne	 SHORT $LN16@s370_ecpsv
  00183	8b 05 98 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+664
  00189	c1 e8 02	 shr	 eax, 2
  0018c	83 e0 01	 and	 eax, 1
  0018f	85 c0		 test	 eax, eax
  00191	74 53		 je	 SHORT $LN17@s370_ecpsv
  00193	b9 01 00 00 00	 mov	 ecx, 1
  00198	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0019e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173150
  001a5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173151
  001b1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173152
  001bd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001c2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001c7	41 b9 03 00 00
	00		 mov	 r9d, 3
  001cd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173153
  001d4	ba 29 0d 00 00	 mov	 edx, 3369		; 00000d29H
  001d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173154
  001e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@s370_ecpsv:
  001e6	ba 01 00 00 00	 mov	 edx, 1
  001eb	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001f3	e8 00 00 00 00	 call	 s370_program_interrupt
$LN16@s370_ecpsv:
  001f8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00200	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00204	83 e0 01	 and	 eax, 1
  00207	85 c0		 test	 eax, eax
  00209	74 1b		 je	 SHORT $LN18@s370_ecpsv
  0020b	ba 02 00 00 00	 mov	 edx, 2
  00210	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00218	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00220	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN18@s370_ecpsv:
  00226	8b 05 98 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+664
  0022c	d1 e8		 shr	 eax, 1
  0022e	83 e0 01	 and	 eax, 1
  00231	85 c0		 test	 eax, eax
  00233	75 68		 jne	 SHORT $LN19@s370_ecpsv
  00235	8b 05 98 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+664
  0023b	c1 e8 02	 shr	 eax, 2
  0023e	83 e0 01	 and	 eax, 1
  00241	85 c0		 test	 eax, eax
  00243	74 53		 je	 SHORT $LN20@s370_ecpsv
  00245	b9 01 00 00 00	 mov	 ecx, 1
  0024a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00250	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173158
  00257	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0025c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173159
  00263	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00268	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173160
  0026f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00274	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00279	41 b9 03 00 00
	00		 mov	 r9d, 3
  0027f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173161
  00286	ba 29 0d 00 00	 mov	 edx, 3369		; 00000d29H
  0028b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173162
  00292	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN20@s370_ecpsv:
  00298	e9 e3 01 00 00	 jmp	 $LN1@s370_ecpsv
$LN19@s370_ecpsv:
  0029d	b8 08 00 00 00	 mov	 eax, 8
  002a2	48 6b c0 07	 imul	 rax, rax, 7
  002a6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002ae	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  002b5	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  002ba	85 c0		 test	 eax, eax
  002bc	75 05		 jne	 SHORT $LN21@s370_ecpsv
  002be	e9 bd 01 00 00	 jmp	 $LN1@s370_ecpsv
$LN21@s370_ecpsv:
  002c3	48 8b 05 88 02
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+648
  002ca	48 ff c0	 inc	 rax
  002cd	48 89 05 88 02
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+648, rax
  002d4	8b 05 98 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+664
  002da	c1 e8 02	 shr	 eax, 2
  002dd	83 e0 01	 and	 eax, 1
  002e0	85 c0		 test	 eax, eax
  002e2	74 53		 je	 SHORT $LN22@s370_ecpsv
  002e4	b9 01 00 00 00	 mov	 ecx, 1
  002e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173165
  002f6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173166
  00302	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00307	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173167
  0030e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00313	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00318	41 b9 03 00 00
	00		 mov	 r9d, 3
  0031e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173168
  00325	ba 29 0d 00 00	 mov	 edx, 3369		; 00000d29H
  0032a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173169
  00331	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN22@s370_ecpsv:

; 3370 : 
; 3371 :     numdw=regs->GR_L(0);

  00337	b8 08 00 00 00	 mov	 eax, 8
  0033c	48 6b c0 00	 imul	 rax, rax, 0
  00340	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00348	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0034f	89 44 24 5c	 mov	 DWORD PTR numdw$[rsp], eax

; 3372 :     block=regs->GR_L(1) & ADDRESS_MAXWRAP(regs);

  00353	b8 08 00 00 00	 mov	 eax, 8
  00358	48 6b c0 01	 imul	 rax, rax, 1
  0035c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00364	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0036b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00370	89 44 24 60	 mov	 DWORD PTR block$[rsp], eax

; 3373 :     maxsztbl=effective_addr1 & ADDRESS_MAXWRAP(regs);

  00374	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00378	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0037d	89 44 24 58	 mov	 DWORD PTR maxsztbl$[rsp], eax

; 3374 :     fretl=effective_addr2 & ADDRESS_MAXWRAP(regs);

  00381	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00385	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0038a	89 44 24 54	 mov	 DWORD PTR fretl$[rsp], eax

; 3375 :     if(ecpsvm_do_fretx(regs,block,numdw,maxsztbl,fretl)==0)

  0038e	8b 44 24 54	 mov	 eax, DWORD PTR fretl$[rsp]
  00392	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00396	44 8b 4c 24 58	 mov	 r9d, DWORD PTR maxsztbl$[rsp]
  0039b	44 0f b7 44 24
	5c		 movzx	 r8d, WORD PTR numdw$[rsp]
  003a1	8b 54 24 60	 mov	 edx, DWORD PTR block$[rsp]
  003a5	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003ad	e8 00 00 00 00	 call	 ecpsvm_do_fretx
  003b2	85 c0		 test	 eax, eax
  003b4	0f 85 c6 00 00
	00		 jne	 $LN23@s370_ecpsv
$LN10@s370_ecpsv:

; 3376 :     {
; 3377 :         BR14;

  003ba	b8 08 00 00 00	 mov	 eax, 8
  003bf	48 6b c0 0e	 imul	 rax, rax, 14
  003c3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003cb	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  003d2	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  003d7	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003df	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  003e5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003ed	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  003f5	74 6e		 je	 SHORT $LN24@s370_ecpsv
  003f7	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003ff	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00405	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  0040a	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00412	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00418	75 38		 jne	 SHORT $LN25@s370_ecpsv
  0041a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00422	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00428	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0042d	8b c0		 mov	 eax, eax
  0042f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00437	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  0043e	48 0b c8	 or	 rcx, rax
  00441	48 8b c1	 mov	 rax, rcx
  00444	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0044c	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00450	eb 13		 jmp	 SHORT $LN26@s370_ecpsv
$LN25@s370_ecpsv:
  00452	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0045a	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN26@s370_ecpsv:
$LN24@s370_ecpsv:
  00465	33 c0		 xor	 eax, eax
  00467	85 c0		 test	 eax, eax
  00469	0f 85 4b ff ff
	ff		 jne	 $LN10@s370_ecpsv

; 3378 :         CPASSIST_HIT(FRETX);

  0046f	48 8b 05 90 02
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+656
  00476	48 ff c0	 inc	 rax
  00479	48 89 05 90 02
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+656, rax
$LN23@s370_ecpsv:
$LN1@s370_ecpsv:
$LN27@s370_ecpsv:

; 3379 :     }
; 3380 :     return;
; 3381 : }

  00480	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00484	c3		 ret	 0
s370_ecpsvm_extended_fretx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
spix$ = 64
numdw$ = 68
freeblock$ = 72
effective_addr2$ = 76
effective_addr1$ = 80
trapdata$ = 84
traceptr$ = 88
temp$1 = 92
maxsztbl$ = 96
b1$ = 100
b2$ = 104
spixtbl$ = 108
numbytes$ = 112
nextblk$ = 116
maxdw$ = 120
tv386 = 128
buf$ = 144
__$ArrayPad$ = 400
inst$ = 432
regs$ = 440
s370_ecpsvm_extended_freex PROC

; 3170 : {

$LN44:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec a0 01
	00 00		 sub	 rsp, 416		; 000001a0H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 3171 :     char buf[256];
; 3172 :     U32 maxdw;
; 3173 :     U32 numdw;
; 3174 :     U32 numbytes;
; 3175 :     U32 maxsztbl;
; 3176 :     U32 spixtbl;
; 3177 :     BYTE spix;
; 3178 :     U32 freeblock;
; 3179 :     U32 trapdata;
; 3180 :     U32 nextblk;
; 3181 :     VADR traceptr;
; 3182 : 
; 3183 :     ECPSVM_PROLOG(FREEX);

  00024	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  0002c	48 83 c0 02	 add	 rax, 2
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 fetch_fw_noswap
  00038	8b c8		 mov	 ecx, eax
  0003a	e8 00 00 00 00	 call	 _byteswap_ulong
  0003f	89 44 24 5c	 mov	 DWORD PTR temp$1[rsp], eax
  00043	8b 44 24 5c	 mov	 eax, DWORD PTR temp$1[rsp]
  00047	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0004c	89 44 24 4c	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00050	8b 44 24 5c	 mov	 eax, DWORD PTR temp$1[rsp]
  00054	c1 e8 0c	 shr	 eax, 12
  00057	83 e0 0f	 and	 eax, 15
  0005a	89 44 24 68	 mov	 DWORD PTR b2$[rsp], eax
  0005e	8b 44 24 5c	 mov	 eax, DWORD PTR temp$1[rsp]
  00062	c1 e8 10	 shr	 eax, 16
  00065	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0006a	89 44 24 50	 mov	 DWORD PTR effective_addr1$[rsp], eax
  0006e	8b 44 24 5c	 mov	 eax, DWORD PTR temp$1[rsp]
  00072	c1 e8 1c	 shr	 eax, 28
  00075	83 e0 0f	 and	 eax, 15
  00078	89 44 24 64	 mov	 DWORD PTR b1$[rsp], eax
  0007c	83 7c 24 64 00	 cmp	 DWORD PTR b1$[rsp], 0
  00081	74 2d		 je	 SHORT $LN11@s370_ecpsv
  00083	48 63 44 24 64	 movsxd	 rax, DWORD PTR b1$[rsp]
  00088	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00090	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00097	8b 4c 24 50	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0009b	03 c8		 add	 ecx, eax
  0009d	8b c1		 mov	 eax, ecx
  0009f	89 44 24 50	 mov	 DWORD PTR effective_addr1$[rsp], eax
  000a3	8b 44 24 50	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  000a7	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000ac	89 44 24 50	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN11@s370_ecpsv:
  000b0	83 7c 24 68 00	 cmp	 DWORD PTR b2$[rsp], 0
  000b5	74 2d		 je	 SHORT $LN12@s370_ecpsv
  000b7	48 63 44 24 68	 movsxd	 rax, DWORD PTR b2$[rsp]
  000bc	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000c4	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000cb	8b 4c 24 4c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000cf	03 c8		 add	 ecx, eax
  000d1	8b c1		 mov	 eax, ecx
  000d3	89 44 24 4c	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000d7	8b 44 24 4c	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000db	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000e0	89 44 24 4c	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN12@s370_ecpsv:
$LN4@s370_ecpsv:
  000e4	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000ec	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000f0	48 83 c0 06	 add	 rax, 6
  000f4	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000fc	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00100	33 c0		 xor	 eax, eax
  00102	83 f8 06	 cmp	 eax, 6
  00105	74 0f		 je	 SHORT $LN13@s370_ecpsv
  00107	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0010f	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN13@s370_ecpsv:
  00116	33 c0		 xor	 eax, eax
  00118	85 c0		 test	 eax, eax
  0011a	75 c8		 jne	 SHORT $LN4@s370_ecpsv
  0011c	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00124	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00128	83 e0 01	 and	 eax, 1
  0012b	85 c0		 test	 eax, eax
  0012d	74 1b		 je	 SHORT $LN14@s370_ecpsv
  0012f	ba 02 00 00 00	 mov	 edx, 2
  00134	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0013c	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00144	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN14@s370_ecpsv:
$LN7@s370_ecpsv:
  0014a	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00152	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00158	d1 e8		 shr	 eax, 1
  0015a	83 e0 01	 and	 eax, 1
  0015d	85 c0		 test	 eax, eax
  0015f	74 1b		 je	 SHORT $LN15@s370_ecpsv
  00161	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00169	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  0016f	ba fc ff ff ff	 mov	 edx, -4
  00174	48 8b c8	 mov	 rcx, rax
  00177	e8 00 00 00 00	 call	 longjmp
$LN15@s370_ecpsv:
  0017c	33 c0		 xor	 eax, eax
  0017e	85 c0		 test	 eax, eax
  00180	75 c8		 jne	 SHORT $LN7@s370_ecpsv
  00182	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00189	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  0018f	c1 e8 11	 shr	 eax, 17
  00192	83 e0 01	 and	 eax, 1
  00195	85 c0		 test	 eax, eax
  00197	75 75		 jne	 SHORT $LN16@s370_ecpsv
  00199	8b 05 78 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+632
  0019f	c1 e8 02	 shr	 eax, 2
  001a2	83 e0 01	 and	 eax, 1
  001a5	85 c0		 test	 eax, eax
  001a7	74 53		 je	 SHORT $LN17@s370_ecpsv
  001a9	b9 01 00 00 00	 mov	 ecx, 1
  001ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172976
  001bb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172977
  001c7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172978
  001d3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001d8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001dd	41 b9 03 00 00
	00		 mov	 r9d, 3
  001e3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172979
  001ea	ba 6f 0c 00 00	 mov	 edx, 3183		; 00000c6fH
  001ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172980
  001f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@s370_ecpsv:
  001fc	ba 01 00 00 00	 mov	 edx, 1
  00201	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00209	e8 00 00 00 00	 call	 s370_program_interrupt
$LN16@s370_ecpsv:
  0020e	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00216	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  0021a	83 e0 01	 and	 eax, 1
  0021d	85 c0		 test	 eax, eax
  0021f	74 1b		 je	 SHORT $LN18@s370_ecpsv
  00221	ba 02 00 00 00	 mov	 edx, 2
  00226	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0022e	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00236	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN18@s370_ecpsv:
  0023c	8b 05 78 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+632
  00242	d1 e8		 shr	 eax, 1
  00244	83 e0 01	 and	 eax, 1
  00247	85 c0		 test	 eax, eax
  00249	75 68		 jne	 SHORT $LN19@s370_ecpsv
  0024b	8b 05 78 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+632
  00251	c1 e8 02	 shr	 eax, 2
  00254	83 e0 01	 and	 eax, 1
  00257	85 c0		 test	 eax, eax
  00259	74 53		 je	 SHORT $LN20@s370_ecpsv
  0025b	b9 01 00 00 00	 mov	 ecx, 1
  00260	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00266	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172984
  0026d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00272	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172985
  00279	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0027e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172986
  00285	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0028a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0028f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00295	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172987
  0029c	ba 6f 0c 00 00	 mov	 edx, 3183		; 00000c6fH
  002a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172988
  002a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN20@s370_ecpsv:
  002ae	e9 32 08 00 00	 jmp	 $LN1@s370_ecpsv
$LN19@s370_ecpsv:
  002b3	b8 08 00 00 00	 mov	 eax, 8
  002b8	48 6b c0 07	 imul	 rax, rax, 7
  002bc	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002c4	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  002cb	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  002d0	85 c0		 test	 eax, eax
  002d2	75 05		 jne	 SHORT $LN21@s370_ecpsv
  002d4	e9 0c 08 00 00	 jmp	 $LN1@s370_ecpsv
$LN21@s370_ecpsv:
  002d9	48 8b 05 68 02
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+616
  002e0	48 ff c0	 inc	 rax
  002e3	48 89 05 68 02
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+616, rax
  002ea	8b 05 78 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+632
  002f0	c1 e8 02	 shr	 eax, 2
  002f3	83 e0 01	 and	 eax, 1
  002f6	85 c0		 test	 eax, eax
  002f8	74 53		 je	 SHORT $LN22@s370_ecpsv
  002fa	b9 01 00 00 00	 mov	 ecx, 1
  002ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00305	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172991
  0030c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00311	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172992
  00318	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0031d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172993
  00324	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00329	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0032e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00334	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172994
  0033b	ba 6f 0c 00 00	 mov	 edx, 3183		; 00000c6fH
  00340	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172995
  00347	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN22@s370_ecpsv:

; 3184 :     numdw=regs->GR_L(0);

  0034d	b8 08 00 00 00	 mov	 eax, 8
  00352	48 6b c0 00	 imul	 rax, rax, 0
  00356	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0035e	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00365	89 44 24 44	 mov	 DWORD PTR numdw$[rsp], eax

; 3185 :     spixtbl=effective_addr2;

  00369	8b 44 24 4c	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  0036d	89 44 24 6c	 mov	 DWORD PTR spixtbl$[rsp], eax

; 3186 :     maxsztbl=effective_addr1;

  00371	8b 44 24 50	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00375	89 44 24 60	 mov	 DWORD PTR maxsztbl$[rsp], eax

; 3187 :     DEBUG_CPASSISTX(FREEX,MSGBUF(buf, "ECPS:VM FREEX DW = %4.4X",numdw));

  00379	8b 05 78 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+632
  0037f	c1 e8 02	 shr	 eax, 2
  00382	83 e0 01	 and	 eax, 1
  00385	85 c0		 test	 eax, eax
  00387	74 1f		 je	 SHORT $LN23@s370_ecpsv
  00389	44 8b 4c 24 44	 mov	 r9d, DWORD PTR numdw$[rsp]
  0038e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172997
  00395	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0039a	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  003a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN23@s370_ecpsv:

; 3188 :     DEBUG_CPASSISTX(FREEX,WRMSG(HHC90000, "D", buf));

  003a8	8b 05 78 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+632
  003ae	c1 e8 02	 shr	 eax, 2
  003b1	83 e0 01	 and	 eax, 1
  003b4	85 c0		 test	 eax, eax
  003b6	74 54		 je	 SHORT $LN24@s370_ecpsv
  003b8	b9 01 00 00 00	 mov	 ecx, 1
  003bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003c3	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  003cb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172999
  003d7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173000
  003e3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003e8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003ed	41 b9 03 00 00
	00		 mov	 r9d, 3
  003f3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173001
  003fa	ba 74 0c 00 00	 mov	 edx, 3188		; 00000c74H
  003ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173002
  00406	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN24@s370_ecpsv:

; 3189 :     if(numdw==0)

  0040c	83 7c 24 44 00	 cmp	 DWORD PTR numdw$[rsp], 0
  00411	75 05		 jne	 SHORT $LN25@s370_ecpsv

; 3190 :     {
; 3191 :         return;

  00413	e9 cd 06 00 00	 jmp	 $LN1@s370_ecpsv
$LN25@s370_ecpsv:

; 3192 :     }
; 3193 :     DEBUG_CPASSISTX(FREEX,MSGBUF(buf, "MAXSIZE ADDR = %6.6X, SUBPOOL INDEX TABLE = %6.6X",maxsztbl,spixtbl));

  00418	8b 05 78 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+632
  0041e	c1 e8 02	 shr	 eax, 2
  00421	83 e0 01	 and	 eax, 1
  00424	85 c0		 test	 eax, eax
  00426	74 27		 je	 SHORT $LN26@s370_ecpsv
  00428	8b 44 24 6c	 mov	 eax, DWORD PTR spixtbl$[rsp]
  0042c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00430	44 8b 4c 24 60	 mov	 r9d, DWORD PTR maxsztbl$[rsp]
  00435	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173005
  0043c	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00441	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00449	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN26@s370_ecpsv:

; 3194 :     DEBUG_CPASSISTX(FREEX,WRMSG(HHC90000, "D", buf));

  0044f	8b 05 78 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+632
  00455	c1 e8 02	 shr	 eax, 2
  00458	83 e0 01	 and	 eax, 1
  0045b	85 c0		 test	 eax, eax
  0045d	74 54		 je	 SHORT $LN27@s370_ecpsv
  0045f	b9 01 00 00 00	 mov	 ecx, 1
  00464	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0046a	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00472	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00477	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173007
  0047e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00483	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173008
  0048a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0048f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00494	41 b9 03 00 00
	00		 mov	 r9d, 3
  0049a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173009
  004a1	ba 7a 0c 00 00	 mov	 edx, 3194		; 00000c7aH
  004a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173010
  004ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN27@s370_ecpsv:

; 3195 : 
; 3196 :     if (sysblk.ecpsvm.freetrap)

  004b3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  004ba	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  004c0	c1 e8 13	 shr	 eax, 19
  004c3	83 e0 01	 and	 eax, 1
  004c6	85 c0		 test	 eax, eax
  004c8	74 0a		 je	 SHORT $LN28@s370_ecpsv

; 3197 :     {
; 3198 :         numdw++;

  004ca	8b 44 24 44	 mov	 eax, DWORD PTR numdw$[rsp]
  004ce	ff c0		 inc	 eax
  004d0	89 44 24 44	 mov	 DWORD PTR numdw$[rsp], eax
$LN28@s370_ecpsv:

; 3199 :     }
; 3200 : 
; 3201 :     /* E1 = @ of MAXSIZE (maximum # of DW allocatable by FREEX from subpools) */
; 3202 :     /*      followed by subpool pointers                                      */
; 3203 :     /* E2 = @ of subpool indices                                              */
; 3204 :     maxdw=EVM_L(maxsztbl);

  004d4	8b 44 24 60	 mov	 eax, DWORD PTR maxsztbl$[rsp]
  004d8	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  004dd	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  004e5	ba fe ff ff ff	 mov	 edx, -2
  004ea	8b c8		 mov	 ecx, eax
  004ec	e8 00 00 00 00	 call	 s370_vfetch4
  004f1	89 44 24 78	 mov	 DWORD PTR maxdw$[rsp], eax

; 3205 :     if(numdw>maxdw)

  004f5	8b 44 24 78	 mov	 eax, DWORD PTR maxdw$[rsp]
  004f9	39 44 24 44	 cmp	 DWORD PTR numdw$[rsp], eax
  004fd	76 68		 jbe	 SHORT $LN29@s370_ecpsv

; 3206 :     {
; 3207 :         DEBUG_CPASSISTX(FREEX,WRMSG(HHC90000, "D", "FREEX request beyond subpool capacity"));

  004ff	8b 05 78 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+632
  00505	c1 e8 02	 shr	 eax, 2
  00508	83 e0 01	 and	 eax, 1
  0050b	85 c0		 test	 eax, eax
  0050d	74 53		 je	 SHORT $LN30@s370_ecpsv
  0050f	b9 01 00 00 00	 mov	 ecx, 1
  00514	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0051a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173014
  00521	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00526	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173015
  0052d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00532	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173016
  00539	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0053e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00543	41 b9 03 00 00
	00		 mov	 r9d, 3
  00549	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173017
  00550	ba 87 0c 00 00	 mov	 edx, 3207		; 00000c87H
  00555	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173018
  0055c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN30@s370_ecpsv:

; 3208 :         return;

  00562	e9 7e 05 00 00	 jmp	 $LN1@s370_ecpsv
$LN29@s370_ecpsv:

; 3209 :     }
; 3210 :     /* Fetch subpool index */
; 3211 :     spix=EVM_IC(spixtbl+numdw);

  00567	8b 44 24 44	 mov	 eax, DWORD PTR numdw$[rsp]
  0056b	8b 4c 24 6c	 mov	 ecx, DWORD PTR spixtbl$[rsp]
  0056f	03 c8		 add	 ecx, eax
  00571	8b c1		 mov	 eax, ecx
  00573	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00578	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00580	ba fe ff ff ff	 mov	 edx, -2
  00585	8b c8		 mov	 ecx, eax
  00587	e8 00 00 00 00	 call	 s370_vfetchb
  0058c	88 44 24 40	 mov	 BYTE PTR spix$[rsp], al

; 3212 :     DEBUG_CPASSISTX(FREEX,MSGBUF(buf, "Subpool index = %X",spix));

  00590	8b 05 78 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+632
  00596	c1 e8 02	 shr	 eax, 2
  00599	83 e0 01	 and	 eax, 1
  0059c	85 c0		 test	 eax, eax
  0059e	74 22		 je	 SHORT $LN31@s370_ecpsv
  005a0	0f b6 44 24 40	 movzx	 eax, BYTE PTR spix$[rsp]
  005a5	44 8b c8	 mov	 r9d, eax
  005a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173020
  005af	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  005b4	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  005bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN31@s370_ecpsv:

; 3213 :     DEBUG_CPASSISTX(FREEX,WRMSG(HHC90000, "D", buf));

  005c2	8b 05 78 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+632
  005c8	c1 e8 02	 shr	 eax, 2
  005cb	83 e0 01	 and	 eax, 1
  005ce	85 c0		 test	 eax, eax
  005d0	74 54		 je	 SHORT $LN32@s370_ecpsv
  005d2	b9 01 00 00 00	 mov	 ecx, 1
  005d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005dd	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  005e5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173022
  005f1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173023
  005fd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00602	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00607	41 b9 03 00 00
	00		 mov	 r9d, 3
  0060d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173024
  00614	ba 8d 0c 00 00	 mov	 edx, 3213		; 00000c8dH
  00619	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173025
  00620	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN32@s370_ecpsv:

; 3214 :     /* Fetch value */
; 3215 :     freeblock=EVM_L(maxsztbl+4+spix);

  00626	0f b6 44 24 40	 movzx	 eax, BYTE PTR spix$[rsp]
  0062b	8b 4c 24 60	 mov	 ecx, DWORD PTR maxsztbl$[rsp]
  0062f	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  00633	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00638	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00640	ba fe ff ff ff	 mov	 edx, -2
  00645	8b c8		 mov	 ecx, eax
  00647	e8 00 00 00 00	 call	 s370_vfetch4
  0064c	89 44 24 48	 mov	 DWORD PTR freeblock$[rsp], eax

; 3216 :     DEBUG_CPASSISTX(FREEX,MSGBUF(buf, "Value in subpool table = %6.6X",freeblock));

  00650	8b 05 78 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+632
  00656	c1 e8 02	 shr	 eax, 2
  00659	83 e0 01	 and	 eax, 1
  0065c	85 c0		 test	 eax, eax
  0065e	74 1f		 je	 SHORT $LN33@s370_ecpsv
  00660	44 8b 4c 24 48	 mov	 r9d, DWORD PTR freeblock$[rsp]
  00665	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173027
  0066c	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00671	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00679	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN33@s370_ecpsv:

; 3217 :     DEBUG_CPASSISTX(FREEX,WRMSG(HHC90000, "D", buf));

  0067f	8b 05 78 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+632
  00685	c1 e8 02	 shr	 eax, 2
  00688	83 e0 01	 and	 eax, 1
  0068b	85 c0		 test	 eax, eax
  0068d	74 54		 je	 SHORT $LN34@s370_ecpsv
  0068f	b9 01 00 00 00	 mov	 ecx, 1
  00694	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0069a	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  006a2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173029
  006ae	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173030
  006ba	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006bf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006c4	41 b9 03 00 00
	00		 mov	 r9d, 3
  006ca	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173031
  006d1	ba 91 0c 00 00	 mov	 edx, 3217		; 00000c91H
  006d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173032
  006dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN34@s370_ecpsv:

; 3218 :     if(freeblock==0)

  006e3	83 7c 24 48 00	 cmp	 DWORD PTR freeblock$[rsp], 0
  006e8	75 05		 jne	 SHORT $LN35@s370_ecpsv

; 3219 :     {
; 3220 :         /* Can't fullfill request here */
; 3221 :         return;

  006ea	e9 f6 03 00 00	 jmp	 $LN1@s370_ecpsv
$LN35@s370_ecpsv:

; 3222 :     }
; 3223 :     nextblk=EVM_L(freeblock);

  006ef	8b 44 24 48	 mov	 eax, DWORD PTR freeblock$[rsp]
  006f3	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  006f8	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00700	ba fe ff ff ff	 mov	 edx, -2
  00705	8b c8		 mov	 ecx, eax
  00707	e8 00 00 00 00	 call	 s370_vfetch4
  0070c	89 44 24 74	 mov	 DWORD PTR nextblk$[rsp], eax

; 3224 :     EVM_ST(nextblk,maxsztbl+4+spix);

  00710	0f b6 44 24 40	 movzx	 eax, BYTE PTR spix$[rsp]
  00715	8b 4c 24 60	 mov	 ecx, DWORD PTR maxsztbl$[rsp]
  00719	8d 44 01 04	 lea	 eax, DWORD PTR [rcx+rax+4]
  0071d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00722	4c 8b 8c 24 b8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0072a	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00730	8b d0		 mov	 edx, eax
  00732	8b 4c 24 74	 mov	 ecx, DWORD PTR nextblk$[rsp]
  00736	e8 00 00 00 00	 call	 s370_vstore4

; 3225 : 
; 3226 :     /* If we are running with the FREE trap, fill the block with EEs and plug the
; 3227 :        trap identifier and the address of the caller at the end of the new block
; 3228 :     */
; 3229 :     if (sysblk.ecpsvm.freetrap)

  0073b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00742	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00748	c1 e8 13	 shr	 eax, 19
  0074b	83 e0 01	 and	 eax, 1
  0074e	85 c0		 test	 eax, eax
  00750	0f 84 eb 00 00
	00		 je	 $LN36@s370_ecpsv

; 3230 :     {
; 3231 :         numbytes=8*(numdw-1);

  00756	8b 44 24 44	 mov	 eax, DWORD PTR numdw$[rsp]
  0075a	8d 04 c5 f8 ff
	ff ff		 lea	 eax, DWORD PTR [rax*8-8]
  00761	89 44 24 70	 mov	 DWORD PTR numbytes$[rsp], eax

; 3232 :         memset((char*)regs->mainstor+freeblock, 0xEE, numbytes);

  00765	8b 44 24 70	 mov	 eax, DWORD PTR numbytes$[rsp]
  00769	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv386[rsp], rax
  00771	8b 4c 24 48	 mov	 ecx, DWORD PTR freeblock$[rsp]
  00775	48 8b 94 24 b8
	01 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0077d	48 03 8a 48 08
	00 00		 add	 rcx, QWORD PTR [rdx+2120]
  00784	48 8b f9	 mov	 rdi, rcx
  00787	b8 ee 00 00 00	 mov	 eax, 238		; 000000eeH
  0078c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv386[rsp]
  00794	f3 aa		 rep stosb

; 3233 :         trapdata=freeblock+numbytes;

  00796	8b 44 24 70	 mov	 eax, DWORD PTR numbytes$[rsp]
  0079a	8b 4c 24 48	 mov	 ecx, DWORD PTR freeblock$[rsp]
  0079e	03 c8		 add	 ecx, eax
  007a0	8b c1		 mov	 eax, ecx
  007a2	89 44 24 54	 mov	 DWORD PTR trapdata$[rsp], eax

; 3234 :         EVM_ST(0x9AC7E5D5,trapdata);

  007a6	8b 44 24 54	 mov	 eax, DWORD PTR trapdata$[rsp]
  007aa	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  007af	4c 8b 8c 24 b8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  007b7	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  007bd	8b d0		 mov	 edx, eax
  007bf	b9 d5 e5 c7 9a	 mov	 ecx, -1698175531	; 9ac7e5d5H
  007c4	e8 00 00 00 00	 call	 s370_vstore4

; 3235 :         trapdata+=4;

  007c9	8b 44 24 54	 mov	 eax, DWORD PTR trapdata$[rsp]
  007cd	83 c0 04	 add	 eax, 4
  007d0	89 44 24 54	 mov	 DWORD PTR trapdata$[rsp], eax

; 3236 :         EVM_ST(regs->GR_L(14),trapdata);

  007d4	8b 44 24 54	 mov	 eax, DWORD PTR trapdata$[rsp]
  007d8	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  007dd	b9 08 00 00 00	 mov	 ecx, 8
  007e2	48 6b c9 0e	 imul	 rcx, rcx, 14
  007e6	4c 8b 8c 24 b8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  007ee	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  007f4	8b d0		 mov	 edx, eax
  007f6	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  007fe	8b 8c 08 80 02
	00 00		 mov	 ecx, DWORD PTR [rax+rcx+640]
  00805	e8 00 00 00 00	 call	 s370_vstore4

; 3237 :         EVM_STC(regs->GR_LHLCL(0),trapdata);        /* store original number of doublewords requested */

  0080a	8b 44 24 54	 mov	 eax, DWORD PTR trapdata$[rsp]
  0080e	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00813	b9 08 00 00 00	 mov	 ecx, 8
  00818	48 6b c9 00	 imul	 rcx, rcx, 0
  0081c	4c 8b 8c 24 b8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00824	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0082a	8b d0		 mov	 edx, eax
  0082c	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00834	0f b6 8c 08 80
	02 00 00	 movzx	 ecx, BYTE PTR [rax+rcx+640]
  0083c	e8 00 00 00 00	 call	 s370_vstoreb
$LN36@s370_ecpsv:

; 3238 :     }
; 3239 : 
; 3240 :     if (EVM_IC(TRACFLG1) & TRAC67)

  00841	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00849	ba fe ff ff ff	 mov	 edx, -2
  0084e	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  00853	e8 00 00 00 00	 call	 s370_vfetchb
  00858	0f b6 c0	 movzx	 eax, al
  0085b	83 e0 04	 and	 eax, 4
  0085e	85 c0		 test	 eax, eax
  00860	0f 84 fe 00 00
	00		 je	 $LN37@s370_ecpsv

; 3241 :     {
; 3242 :         traceptr=ecpsvm_get_trace_entry(regs);

  00866	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0086e	e8 00 00 00 00	 call	 ecpsvm_get_trace_entry
  00873	89 44 24 58	 mov	 DWORD PTR traceptr$[rsp], eax

; 3243 :         EVM_ST(regs->GR_L(11),traceptr);

  00877	8b 44 24 58	 mov	 eax, DWORD PTR traceptr$[rsp]
  0087b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00880	b9 08 00 00 00	 mov	 ecx, 8
  00885	48 6b c9 0b	 imul	 rcx, rcx, 11
  00889	4c 8b 8c 24 b8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00891	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00897	8b d0		 mov	 edx, eax
  00899	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  008a1	8b 8c 08 80 02
	00 00		 mov	 ecx, DWORD PTR [rax+rcx+640]
  008a8	e8 00 00 00 00	 call	 s370_vstore4

; 3244 :         EVM_STC(TRCFREE,traceptr);

  008ad	8b 44 24 58	 mov	 eax, DWORD PTR traceptr$[rsp]
  008b1	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  008b6	4c 8b 8c 24 b8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  008be	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  008c4	8b d0		 mov	 edx, eax
  008c6	b1 86		 mov	 cl, 134			; 00000086H
  008c8	e8 00 00 00 00	 call	 s370_vstoreb

; 3245 :         EVM_ST(regs->GR_L(0),traceptr+4);

  008cd	8b 44 24 58	 mov	 eax, DWORD PTR traceptr$[rsp]
  008d1	83 c0 04	 add	 eax, 4
  008d4	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  008d9	b9 08 00 00 00	 mov	 ecx, 8
  008de	48 6b c9 00	 imul	 rcx, rcx, 0
  008e2	4c 8b 8c 24 b8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  008ea	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  008f0	8b d0		 mov	 edx, eax
  008f2	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  008fa	8b 8c 08 80 02
	00 00		 mov	 ecx, DWORD PTR [rax+rcx+640]
  00901	e8 00 00 00 00	 call	 s370_vstore4

; 3246 :         EVM_ST(freeblock,traceptr+8);

  00906	8b 44 24 58	 mov	 eax, DWORD PTR traceptr$[rsp]
  0090a	83 c0 08	 add	 eax, 8
  0090d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00912	4c 8b 8c 24 b8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0091a	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00920	8b d0		 mov	 edx, eax
  00922	8b 4c 24 48	 mov	 ecx, DWORD PTR freeblock$[rsp]
  00926	e8 00 00 00 00	 call	 s370_vstore4

; 3247 :         EVM_ST(regs->GR_L(14),traceptr+12);

  0092b	8b 44 24 58	 mov	 eax, DWORD PTR traceptr$[rsp]
  0092f	83 c0 0c	 add	 eax, 12
  00932	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00937	b9 08 00 00 00	 mov	 ecx, 8
  0093c	48 6b c9 0e	 imul	 rcx, rcx, 14
  00940	4c 8b 8c 24 b8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00948	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0094e	8b d0		 mov	 edx, eax
  00950	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00958	8b 8c 08 80 02
	00 00		 mov	 ecx, DWORD PTR [rax+rcx+640]
  0095f	e8 00 00 00 00	 call	 s370_vstore4
$LN37@s370_ecpsv:

; 3248 :     }
; 3249 : 
; 3250 :     DEBUG_CPASSISTX(FREEX,MSGBUF(buf, "New Value in subpool table = %6.6X",nextblk));

  00964	8b 05 78 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+632
  0096a	c1 e8 02	 shr	 eax, 2
  0096d	83 e0 01	 and	 eax, 1
  00970	85 c0		 test	 eax, eax
  00972	74 1f		 je	 SHORT $LN38@s370_ecpsv
  00974	44 8b 4c 24 74	 mov	 r9d, DWORD PTR nextblk$[rsp]
  00979	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173037
  00980	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00985	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0098d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN38@s370_ecpsv:

; 3251 :     DEBUG_CPASSISTX(FREEX,WRMSG(HHC90000, "D", buf));

  00993	8b 05 78 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+632
  00999	c1 e8 02	 shr	 eax, 2
  0099c	83 e0 01	 and	 eax, 1
  0099f	85 c0		 test	 eax, eax
  009a1	74 54		 je	 SHORT $LN39@s370_ecpsv
  009a3	b9 01 00 00 00	 mov	 ecx, 1
  009a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009ae	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  009b6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  009bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173039
  009c2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  009c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173040
  009ce	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  009d3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009d8	41 b9 03 00 00
	00		 mov	 r9d, 3
  009de	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG173041
  009e5	ba b3 0c 00 00	 mov	 edx, 3251		; 00000cb3H
  009ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG173042
  009f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN39@s370_ecpsv:

; 3252 :     regs->GR_L(1)=freeblock;

  009f7	b8 08 00 00 00	 mov	 eax, 8
  009fc	48 6b c0 01	 imul	 rax, rax, 1
  00a00	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a08	8b 54 24 48	 mov	 edx, DWORD PTR freeblock$[rsp]
  00a0c	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 3253 :     regs->psw.cc=0;

  00a13	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a1b	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN10@s370_ecpsv:

; 3254 :     BR14;

  00a1f	b8 08 00 00 00	 mov	 eax, 8
  00a24	48 6b c0 0e	 imul	 rax, rax, 14
  00a28	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a30	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00a37	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00a3c	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a44	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00a4a	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a52	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00a5a	74 6e		 je	 SHORT $LN40@s370_ecpsv
  00a5c	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a64	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00a6a	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00a6f	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a77	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00a7d	75 38		 jne	 SHORT $LN41@s370_ecpsv
  00a7f	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a87	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00a8d	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00a92	8b c0		 mov	 eax, eax
  00a94	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a9c	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00aa3	48 0b c8	 or	 rcx, rax
  00aa6	48 8b c1	 mov	 rax, rcx
  00aa9	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00ab1	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00ab5	eb 13		 jmp	 SHORT $LN42@s370_ecpsv
$LN41@s370_ecpsv:
  00ab7	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00abf	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN42@s370_ecpsv:
$LN40@s370_ecpsv:
  00aca	33 c0		 xor	 eax, eax
  00acc	85 c0		 test	 eax, eax
  00ace	0f 85 4b ff ff
	ff		 jne	 $LN10@s370_ecpsv

; 3255 :     CPASSIST_HIT(FREEX);

  00ad4	48 8b 05 70 02
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+624
  00adb	48 ff c0	 inc	 rax
  00ade	48 89 05 70 02
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+624, rax
$LN1@s370_ecpsv:
$LN43@s370_ecpsv:

; 3256 :     return;
; 3257 : }

  00ae5	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00aed	48 33 cc	 xor	 rcx, rsp
  00af0	e8 00 00 00 00	 call	 __security_check_cookie
  00af5	48 81 c4 a0 01
	00 00		 add	 rsp, 416		; 000001a0H
  00afc	5f		 pop	 rdi
  00afd	c3		 ret	 0
s370_ecpsvm_extended_freex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
pte$ = 64
effective_addr1$ = 68
pagnum$ = 72
temp$1 = 76
effective_addr2$ = 80
i$ = 84
page$ = 88
vma$ = 92
ste$ = 96
j$ = 100
p_pte$ = 104
b1$ = 108
b2$ = 112
vmb$ = 116
shrtable$ = 120
shrsegct$ = 124
segnum$ = 128
vmseg$ = 132
page2$ = 136
inst$ = 160
regs$ = 168
s370_ecpsvm_loc_chgshrpg PROC

; 3078 : {

$LN39:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 3079 : 
; 3080 : VADR  vmb;
; 3081 : VADR  vma;
; 3082 : VADR  vmseg;
; 3083 : VADR  shrtable;
; 3084 : VADR  ste;
; 3085 : VADR  p_pte;
; 3086 : VADR  page;
; 3087 : VADR  page2;
; 3088 : U32   shrsegct;
; 3089 : U32   i;
; 3090 : U32   j;
; 3091 : U32   segnum;
; 3092 : U32   pagnum;
; 3093 : U16   pte;
; 3094 : 
; 3095 :     ECPSVM_PROLOG(LCSPG);

  00011	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  00019	48 83 c0 02	 add	 rax, 2
  0001d	48 8b c8	 mov	 rcx, rax
  00020	e8 00 00 00 00	 call	 fetch_fw_noswap
  00025	8b c8		 mov	 ecx, eax
  00027	e8 00 00 00 00	 call	 _byteswap_ulong
  0002c	89 44 24 4c	 mov	 DWORD PTR temp$1[rsp], eax
  00030	8b 44 24 4c	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00039	89 44 24 50	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0003d	8b 44 24 4c	 mov	 eax, DWORD PTR temp$1[rsp]
  00041	c1 e8 0c	 shr	 eax, 12
  00044	83 e0 0f	 and	 eax, 15
  00047	89 44 24 70	 mov	 DWORD PTR b2$[rsp], eax
  0004b	8b 44 24 4c	 mov	 eax, DWORD PTR temp$1[rsp]
  0004f	c1 e8 10	 shr	 eax, 16
  00052	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00057	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  0005b	8b 44 24 4c	 mov	 eax, DWORD PTR temp$1[rsp]
  0005f	c1 e8 1c	 shr	 eax, 28
  00062	83 e0 0f	 and	 eax, 15
  00065	89 44 24 6c	 mov	 DWORD PTR b1$[rsp], eax
  00069	83 7c 24 6c 00	 cmp	 DWORD PTR b1$[rsp], 0
  0006e	74 2d		 je	 SHORT $LN19@s370_ecpsv
  00070	48 63 44 24 6c	 movsxd	 rax, DWORD PTR b1$[rsp]
  00075	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0007d	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00084	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00088	03 c8		 add	 ecx, eax
  0008a	8b c1		 mov	 eax, ecx
  0008c	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00090	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00094	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00099	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN19@s370_ecpsv:
  0009d	83 7c 24 70 00	 cmp	 DWORD PTR b2$[rsp], 0
  000a2	74 2d		 je	 SHORT $LN20@s370_ecpsv
  000a4	48 63 44 24 70	 movsxd	 rax, DWORD PTR b2$[rsp]
  000a9	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000b1	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000b8	8b 4c 24 50	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000bc	03 c8		 add	 ecx, eax
  000be	8b c1		 mov	 eax, ecx
  000c0	89 44 24 50	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000c4	8b 44 24 50	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000c8	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000cd	89 44 24 50	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN20@s370_ecpsv:
$LN4@s370_ecpsv:
  000d1	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000d9	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000dd	48 83 c0 06	 add	 rax, 6
  000e1	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000e9	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000ed	33 c0		 xor	 eax, eax
  000ef	83 f8 06	 cmp	 eax, 6
  000f2	74 0f		 je	 SHORT $LN21@s370_ecpsv
  000f4	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000fc	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN21@s370_ecpsv:
  00103	33 c0		 xor	 eax, eax
  00105	85 c0		 test	 eax, eax
  00107	75 c8		 jne	 SHORT $LN4@s370_ecpsv
  00109	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00111	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00115	83 e0 01	 and	 eax, 1
  00118	85 c0		 test	 eax, eax
  0011a	74 1b		 je	 SHORT $LN22@s370_ecpsv
  0011c	ba 02 00 00 00	 mov	 edx, 2
  00121	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00129	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00131	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN22@s370_ecpsv:
$LN7@s370_ecpsv:
  00137	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0013f	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00145	d1 e8		 shr	 eax, 1
  00147	83 e0 01	 and	 eax, 1
  0014a	85 c0		 test	 eax, eax
  0014c	74 1b		 je	 SHORT $LN23@s370_ecpsv
  0014e	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00156	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  0015c	ba fc ff ff ff	 mov	 edx, -4
  00161	48 8b c8	 mov	 rcx, rax
  00164	e8 00 00 00 00	 call	 longjmp
$LN23@s370_ecpsv:
  00169	33 c0		 xor	 eax, eax
  0016b	85 c0		 test	 eax, eax
  0016d	75 c8		 jne	 SHORT $LN7@s370_ecpsv
  0016f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00176	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  0017c	c1 e8 11	 shr	 eax, 17
  0017f	83 e0 01	 and	 eax, 1
  00182	85 c0		 test	 eax, eax
  00184	75 75		 jne	 SHORT $LN24@s370_ecpsv
  00186	8b 05 d8 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+728
  0018c	c1 e8 02	 shr	 eax, 2
  0018f	83 e0 01	 and	 eax, 1
  00192	85 c0		 test	 eax, eax
  00194	74 53		 je	 SHORT $LN25@s370_ecpsv
  00196	b9 01 00 00 00	 mov	 ecx, 1
  0019b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172904
  001a8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172905
  001b4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172906
  001c0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001c5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ca	41 b9 03 00 00
	00		 mov	 r9d, 3
  001d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172907
  001d7	ba 17 0c 00 00	 mov	 edx, 3095		; 00000c17H
  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172908
  001e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN25@s370_ecpsv:
  001e9	ba 01 00 00 00	 mov	 edx, 1
  001ee	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001f6	e8 00 00 00 00	 call	 s370_program_interrupt
$LN24@s370_ecpsv:
  001fb	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00203	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00207	83 e0 01	 and	 eax, 1
  0020a	85 c0		 test	 eax, eax
  0020c	74 1b		 je	 SHORT $LN26@s370_ecpsv
  0020e	ba 02 00 00 00	 mov	 edx, 2
  00213	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0021b	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00223	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN26@s370_ecpsv:
  00229	8b 05 d8 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+728
  0022f	d1 e8		 shr	 eax, 1
  00231	83 e0 01	 and	 eax, 1
  00234	85 c0		 test	 eax, eax
  00236	75 68		 jne	 SHORT $LN27@s370_ecpsv
  00238	8b 05 d8 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+728
  0023e	c1 e8 02	 shr	 eax, 2
  00241	83 e0 01	 and	 eax, 1
  00244	85 c0		 test	 eax, eax
  00246	74 53		 je	 SHORT $LN28@s370_ecpsv
  00248	b9 01 00 00 00	 mov	 ecx, 1
  0024d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00253	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172912
  0025a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0025f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172913
  00266	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0026b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172914
  00272	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00277	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0027c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00282	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172915
  00289	ba 17 0c 00 00	 mov	 edx, 3095		; 00000c17H
  0028e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172916
  00295	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN28@s370_ecpsv:
  0029b	e9 c1 03 00 00	 jmp	 $LN1@s370_ecpsv
$LN27@s370_ecpsv:
  002a0	b8 08 00 00 00	 mov	 eax, 8
  002a5	48 6b c0 07	 imul	 rax, rax, 7
  002a9	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002b1	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  002b8	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  002bd	85 c0		 test	 eax, eax
  002bf	75 05		 jne	 SHORT $LN29@s370_ecpsv
  002c1	e9 9b 03 00 00	 jmp	 $LN1@s370_ecpsv
$LN29@s370_ecpsv:
  002c6	48 8b 05 c8 02
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+712
  002cd	48 ff c0	 inc	 rax
  002d0	48 89 05 c8 02
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+712, rax
  002d7	8b 05 d8 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+728
  002dd	c1 e8 02	 shr	 eax, 2
  002e0	83 e0 01	 and	 eax, 1
  002e3	85 c0		 test	 eax, eax
  002e5	74 53		 je	 SHORT $LN30@s370_ecpsv
  002e7	b9 01 00 00 00	 mov	 ecx, 1
  002ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172919
  002f9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172920
  00305	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0030a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172921
  00311	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00316	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0031b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00321	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172922
  00328	ba 17 0c 00 00	 mov	 edx, 3095		; 00000c17H
  0032d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172923
  00334	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN30@s370_ecpsv:

; 3096 : 
; 3097 :     vmb=effective_addr1;

  0033a	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0033e	89 44 24 74	 mov	 DWORD PTR vmb$[rsp], eax

; 3098 :     vma=EVM_L(vmb+VMASSIST);

  00342	8b 44 24 74	 mov	 eax, DWORD PTR vmb$[rsp]
  00346	05 9c 01 00 00	 add	 eax, 412		; 0000019cH
  0034b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00350	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00358	ba fe ff ff ff	 mov	 edx, -2
  0035d	8b c8		 mov	 ecx, eax
  0035f	e8 00 00 00 00	 call	 s370_vfetch4
  00364	89 44 24 5c	 mov	 DWORD PTR vma$[rsp], eax

; 3099 :     vmseg=EVM_L(vmb+VMSEG);

  00368	8b 44 24 74	 mov	 eax, DWORD PTR vmb$[rsp]
  0036c	83 c0 10	 add	 eax, 16
  0036f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00374	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0037c	ba fe ff ff ff	 mov	 edx, -2
  00381	8b c8		 mov	 ecx, eax
  00383	e8 00 00 00 00	 call	 s370_vfetch4
  00388	89 84 24 84 00
	00 00		 mov	 DWORD PTR vmseg$[rsp], eax
$LN8@s370_ecpsv:

; 3100 : 
; 3101 :     while(vma)

  0038f	83 7c 24 5c 00	 cmp	 DWORD PTR vma$[rsp], 0
  00394	0f 84 f5 01 00
	00		 je	 $LN9@s370_ecpsv

; 3102 :     {
; 3103 :         shrtable=EVM_L(vma+VMASHRBK);

  0039a	8b 44 24 5c	 mov	 eax, DWORD PTR vma$[rsp]
  0039e	83 c0 04	 add	 eax, 4
  003a1	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  003a6	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  003ae	ba fe ff ff ff	 mov	 edx, -2
  003b3	8b c8		 mov	 ecx, eax
  003b5	e8 00 00 00 00	 call	 s370_vfetch4
  003ba	89 44 24 78	 mov	 DWORD PTR shrtable$[rsp], eax

; 3104 :         shrsegct=EVM_L(shrtable+SHRSEGCT);

  003be	8b 44 24 78	 mov	 eax, DWORD PTR shrtable$[rsp]
  003c2	83 c0 14	 add	 eax, 20
  003c5	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  003ca	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  003d2	ba fe ff ff ff	 mov	 edx, -2
  003d7	8b c8		 mov	 ecx, eax
  003d9	e8 00 00 00 00	 call	 s370_vfetch4
  003de	89 44 24 7c	 mov	 DWORD PTR shrsegct$[rsp], eax

; 3105 :         for (i=0;i<shrsegct;i++)

  003e2	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  003ea	eb 0a		 jmp	 SHORT $LN12@s370_ecpsv
$LN10@s370_ecpsv:
  003ec	8b 44 24 54	 mov	 eax, DWORD PTR i$[rsp]
  003f0	ff c0		 inc	 eax
  003f2	89 44 24 54	 mov	 DWORD PTR i$[rsp], eax
$LN12@s370_ecpsv:
  003f6	8b 44 24 7c	 mov	 eax, DWORD PTR shrsegct$[rsp]
  003fa	39 44 24 54	 cmp	 DWORD PTR i$[rsp], eax
  003fe	0f 83 65 01 00
	00		 jae	 $LN11@s370_ecpsv

; 3106 :         {
; 3107 :             segnum=EVM_IC(shrtable+SHRSEGNM+i) * 4;

  00404	8b 44 24 78	 mov	 eax, DWORD PTR shrtable$[rsp]
  00408	8b 4c 24 54	 mov	 ecx, DWORD PTR i$[rsp]
  0040c	8d 44 08 18	 lea	 eax, DWORD PTR [rax+rcx+24]
  00410	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00415	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0041d	ba fe ff ff ff	 mov	 edx, -2
  00422	8b c8		 mov	 ecx, eax
  00424	e8 00 00 00 00	 call	 s370_vfetchb
  00429	0f b6 c0	 movzx	 eax, al
  0042c	c1 e0 02	 shl	 eax, 2
  0042f	89 84 24 80 00
	00 00		 mov	 DWORD PTR segnum$[rsp], eax

; 3108 :             ste=EVM_L(vmseg+segnum);                // get the seg table entry for this segment

  00436	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR segnum$[rsp]
  0043d	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR vmseg$[rsp]
  00444	03 c8		 add	 ecx, eax
  00446	8b c1		 mov	 eax, ecx
  00448	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0044d	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00455	ba fe ff ff ff	 mov	 edx, -2
  0045a	8b c8		 mov	 ecx, eax
  0045c	e8 00 00 00 00	 call	 s370_vfetch4
  00461	89 44 24 60	 mov	 DWORD PTR ste$[rsp], eax

; 3109 :             if(!(ste & 0x00000001))                 // if segment is not invalid...

  00465	8b 44 24 60	 mov	 eax, DWORD PTR ste$[rsp]
  00469	83 e0 01	 and	 eax, 1
  0046c	85 c0		 test	 eax, eax
  0046e	0f 85 f0 00 00
	00		 jne	 $LN31@s370_ecpsv

; 3110 :             {
; 3111 :                 pagnum=ste & 0xf0000000;            // isolate page table length

  00474	8b 44 24 60	 mov	 eax, DWORD PTR ste$[rsp]
  00478	25 00 00 00 f0	 and	 eax, -268435456		; f0000000H
  0047d	89 44 24 48	 mov	 DWORD PTR pagnum$[rsp], eax

; 3112 :                 pagnum=pagnum >> 28;                // compute number of pages in segment

  00481	8b 44 24 48	 mov	 eax, DWORD PTR pagnum$[rsp]
  00485	c1 e8 1c	 shr	 eax, 28
  00488	89 44 24 48	 mov	 DWORD PTR pagnum$[rsp], eax

; 3113 :                 pagnum++;                           // make relative to 1

  0048c	8b 44 24 48	 mov	 eax, DWORD PTR pagnum$[rsp]
  00490	ff c0		 inc	 eax
  00492	89 44 24 48	 mov	 DWORD PTR pagnum$[rsp], eax

; 3114 :                 p_pte=ste & 0x00fffff8;             // isolate the PTE address

  00496	8b 44 24 60	 mov	 eax, DWORD PTR ste$[rsp]
  0049a	25 f8 ff ff 00	 and	 eax, 16777208		; 00fffff8H
  0049f	89 44 24 68	 mov	 DWORD PTR p_pte$[rsp], eax

; 3115 :                 for(j=0;j<pagnum;j++)

  004a3	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  004ab	eb 0a		 jmp	 SHORT $LN15@s370_ecpsv
$LN13@s370_ecpsv:
  004ad	8b 44 24 64	 mov	 eax, DWORD PTR j$[rsp]
  004b1	ff c0		 inc	 eax
  004b3	89 44 24 64	 mov	 DWORD PTR j$[rsp], eax
$LN15@s370_ecpsv:
  004b7	8b 44 24 48	 mov	 eax, DWORD PTR pagnum$[rsp]
  004bb	39 44 24 64	 cmp	 DWORD PTR j$[rsp], eax
  004bf	0f 83 9f 00 00
	00		 jae	 $LN14@s370_ecpsv

; 3116 :                 {
; 3117 :                     pte=EVM_LH(p_pte);

  004c5	8b 44 24 68	 mov	 eax, DWORD PTR p_pte$[rsp]
  004c9	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  004ce	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  004d6	ba fe ff ff ff	 mov	 edx, -2
  004db	8b c8		 mov	 ecx, eax
  004dd	e8 00 00 00 00	 call	 s370_vfetch2
  004e2	66 89 44 24 40	 mov	 WORD PTR pte$[rsp], ax

; 3118 :                     if(!(pte & 0x0008))             // if page is not invalid...

  004e7	0f b7 44 24 40	 movzx	 eax, WORD PTR pte$[rsp]
  004ec	83 e0 08	 and	 eax, 8
  004ef	85 c0		 test	 eax, eax
  004f1	75 61		 jne	 SHORT $LN32@s370_ecpsv

; 3119 :                     {
; 3120 :                         page=pte & 0xfff0;          // isolate page index

  004f3	0f b7 44 24 40	 movzx	 eax, WORD PTR pte$[rsp]
  004f8	25 f0 ff 00 00	 and	 eax, 65520		; 0000fff0H
  004fd	89 44 24 58	 mov	 DWORD PTR page$[rsp], eax

; 3121 :                         page=page<< 8;              // compute real page address

  00501	8b 44 24 58	 mov	 eax, DWORD PTR page$[rsp]
  00505	c1 e0 08	 shl	 eax, 8
  00508	89 44 24 58	 mov	 DWORD PTR page$[rsp], eax

; 3122 : #if defined(FEATURE_2K_STORAGE_KEYS)
; 3123 :                         page2=page+0x800;

  0050c	8b 44 24 58	 mov	 eax, DWORD PTR page$[rsp]
  00510	05 00 08 00 00	 add	 eax, 2048		; 00000800H
  00515	89 84 24 88 00
	00 00		 mov	 DWORD PTR page2$[rsp], eax

; 3124 :                         if(0
; 3125 :                            || (ARCH_DEP( get_storage_key )( page ) & STORKEY_CHANGE)
; 3126 :                            || (ARCH_DEP( get_storage_key )( page2 ) & STORKEY_CHANGE))

  0051c	33 c0		 xor	 eax, eax
  0051e	85 c0		 test	 eax, eax
  00520	75 2d		 jne	 SHORT $LN34@s370_ecpsv
  00522	8b 44 24 58	 mov	 eax, DWORD PTR page$[rsp]
  00526	8b c8		 mov	 ecx, eax
  00528	e8 00 00 00 00	 call	 s370_get_storage_key
  0052d	0f b6 c0	 movzx	 eax, al
  00530	83 e0 02	 and	 eax, 2
  00533	85 c0		 test	 eax, eax
  00535	75 18		 jne	 SHORT $LN34@s370_ecpsv
  00537	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR page2$[rsp]
  0053e	8b c8		 mov	 ecx, eax
  00540	e8 00 00 00 00	 call	 s370_get_storage_key
  00545	0f b6 c0	 movzx	 eax, al
  00548	83 e0 02	 and	 eax, 2
  0054b	85 c0		 test	 eax, eax
  0054d	74 05		 je	 SHORT $LN33@s370_ecpsv
$LN34@s370_ecpsv:

; 3127 : #else
; 3128 :                         if (ARCH_DEP( get_storage_key )( page ) & STORKEY_CHANGE)
; 3129 : #endif
; 3130 :                         {
; 3131 :                             return;                 // let CP handle if a page is changed

  0054f	e9 0d 01 00 00	 jmp	 $LN1@s370_ecpsv
$LN33@s370_ecpsv:
$LN32@s370_ecpsv:

; 3132 :                         }
; 3133 :                     } /* if pte... */
; 3134 :                     p_pte+=2;                       // -> next pte

  00554	8b 44 24 68	 mov	 eax, DWORD PTR p_pte$[rsp]
  00558	83 c0 02	 add	 eax, 2
  0055b	89 44 24 68	 mov	 DWORD PTR p_pte$[rsp], eax

; 3135 :                 }  /* next j */

  0055f	e9 49 ff ff ff	 jmp	 $LN13@s370_ecpsv
$LN14@s370_ecpsv:
$LN31@s370_ecpsv:

; 3136 :             } /* if ste... */
; 3137 :         } /* next i */

  00564	e9 83 fe ff ff	 jmp	 $LN10@s370_ecpsv
$LN11@s370_ecpsv:

; 3138 :         vma=EVM_L(vma+VMAFPNT);                     // -> next VMABLOK

  00569	8b 44 24 5c	 mov	 eax, DWORD PTR vma$[rsp]
  0056d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00572	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0057a	ba fe ff ff ff	 mov	 edx, -2
  0057f	8b c8		 mov	 ecx, eax
  00581	e8 00 00 00 00	 call	 s370_vfetch4
  00586	89 44 24 5c	 mov	 DWORD PTR vma$[rsp], eax

; 3139 :     } /* while vma != 0 */

  0058a	e9 00 fe ff ff	 jmp	 $LN8@s370_ecpsv
$LN9@s370_ecpsv:

; 3140 : 
; 3141 :     regs->psw.cc=0;                                 // no pages changed in any shared segment

  0058f	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00597	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN18@s370_ecpsv:

; 3142 :     BR14;

  0059b	b8 08 00 00 00	 mov	 eax, 8
  005a0	48 6b c0 0e	 imul	 rax, rax, 14
  005a4	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005ac	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  005b3	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  005b8	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005c0	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  005c6	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005ce	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  005d6	74 6e		 je	 SHORT $LN35@s370_ecpsv
  005d8	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005e0	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  005e6	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  005eb	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005f3	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  005f9	75 38		 jne	 SHORT $LN36@s370_ecpsv
  005fb	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00603	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00609	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0060e	8b c0		 mov	 eax, eax
  00610	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00618	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  0061f	48 0b c8	 or	 rcx, rax
  00622	48 8b c1	 mov	 rax, rcx
  00625	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0062d	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00631	eb 13		 jmp	 SHORT $LN37@s370_ecpsv
$LN36@s370_ecpsv:
  00633	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0063b	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN37@s370_ecpsv:
$LN35@s370_ecpsv:
  00646	33 c0		 xor	 eax, eax
  00648	85 c0		 test	 eax, eax
  0064a	0f 85 4b ff ff
	ff		 jne	 $LN18@s370_ecpsv

; 3143 :     CPASSIST_HIT(LCSPG);

  00650	48 8b 05 d0 02
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+720
  00657	48 ff c0	 inc	 rax
  0065a	48 89 05 d0 02
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+720, rax
$LN1@s370_ecpsv:
$LN38@s370_ecpsv:

; 3144 :     return;
; 3145 : }

  00661	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00668	c3		 ret	 0
s370_ecpsvm_loc_chgshrpg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
ia$ = 0
effective_addr2$ = 4
b2$ = 8
effective_addr1$ = 12
temp$1 = 16
b1$ = 20
tv372 = 24
psa$ = 32
newr$ = 128
buf$ = 90368
__$ArrayPad$ = 90624
inst$ = 90864
regs$ = 90872
s370_ecpsvm_store_level PROC

; 2964 : {

$LN50:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	b8 d8 62 01 00	 mov	 eax, 90840		; 000162d8H
  00011	e8 00 00 00 00	 call	 __chkstk
  00016	48 2b e0	 sub	 rsp, rax
  00019	48 8d ac 24 c0
	00 00 00	 lea	 rbp, QWORD PTR [rsp+192]
  00021	48 83 e5 80	 and	 rbp, -128		; ffffffffffffff80H
  00025	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002c	48 33 c4	 xor	 rax, rsp
  0002f	48 89 85 00 62
	01 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax

; 2965 :     char buf[256];
; 2966 :     VADR    ia;
; 2967 :     PSA_3XX *psa;
; 2968 :     REGS newr;
; 2969 : 
; 2970 :     ECPSVM_PROLOG(STEVL);

  00036	48 8b 84 24 f0
	62 01 00	 mov	 rax, QWORD PTR inst$[rsp]
  0003e	48 83 c0 02	 add	 rax, 2
  00042	48 8b c8	 mov	 rcx, rax
  00045	e8 00 00 00 00	 call	 fetch_fw_noswap
  0004a	8b c8		 mov	 ecx, eax
  0004c	e8 00 00 00 00	 call	 _byteswap_ulong
  00051	89 45 10	 mov	 DWORD PTR temp$1[rbp], eax
  00054	8b 45 10	 mov	 eax, DWORD PTR temp$1[rbp]
  00057	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0005c	89 45 04	 mov	 DWORD PTR effective_addr2$[rbp], eax
  0005f	8b 45 10	 mov	 eax, DWORD PTR temp$1[rbp]
  00062	c1 e8 0c	 shr	 eax, 12
  00065	83 e0 0f	 and	 eax, 15
  00068	89 45 08	 mov	 DWORD PTR b2$[rbp], eax
  0006b	8b 45 10	 mov	 eax, DWORD PTR temp$1[rbp]
  0006e	c1 e8 10	 shr	 eax, 16
  00071	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00076	89 45 0c	 mov	 DWORD PTR effective_addr1$[rbp], eax
  00079	8b 45 10	 mov	 eax, DWORD PTR temp$1[rbp]
  0007c	c1 e8 1c	 shr	 eax, 28
  0007f	83 e0 0f	 and	 eax, 15
  00082	89 45 14	 mov	 DWORD PTR b1$[rbp], eax
  00085	83 7d 14 00	 cmp	 DWORD PTR b1$[rbp], 0
  00089	74 28		 je	 SHORT $LN20@s370_ecpsv
  0008b	48 63 45 14	 movsxd	 rax, DWORD PTR b1$[rbp]
  0008f	48 8b 8c 24 f8
	62 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00097	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0009e	8b 4d 0c	 mov	 ecx, DWORD PTR effective_addr1$[rbp]
  000a1	03 c8		 add	 ecx, eax
  000a3	8b c1		 mov	 eax, ecx
  000a5	89 45 0c	 mov	 DWORD PTR effective_addr1$[rbp], eax
  000a8	8b 45 0c	 mov	 eax, DWORD PTR effective_addr1$[rbp]
  000ab	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000b0	89 45 0c	 mov	 DWORD PTR effective_addr1$[rbp], eax
$LN20@s370_ecpsv:
  000b3	83 7d 08 00	 cmp	 DWORD PTR b2$[rbp], 0
  000b7	74 28		 je	 SHORT $LN21@s370_ecpsv
  000b9	48 63 45 08	 movsxd	 rax, DWORD PTR b2$[rbp]
  000bd	48 8b 8c 24 f8
	62 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000c5	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000cc	8b 4d 04	 mov	 ecx, DWORD PTR effective_addr2$[rbp]
  000cf	03 c8		 add	 ecx, eax
  000d1	8b c1		 mov	 eax, ecx
  000d3	89 45 04	 mov	 DWORD PTR effective_addr2$[rbp], eax
  000d6	8b 45 04	 mov	 eax, DWORD PTR effective_addr2$[rbp]
  000d9	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000de	89 45 04	 mov	 DWORD PTR effective_addr2$[rbp], eax
$LN21@s370_ecpsv:
$LN4@s370_ecpsv:
  000e1	48 8b 84 24 f8
	62 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  000e9	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ed	48 83 c0 06	 add	 rax, 6
  000f1	48 8b 8c 24 f8
	62 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000f9	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000fd	33 c0		 xor	 eax, eax
  000ff	83 f8 06	 cmp	 eax, 6
  00102	74 0f		 je	 SHORT $LN22@s370_ecpsv
  00104	48 8b 84 24 f8
	62 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  0010c	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN22@s370_ecpsv:
  00113	33 c0		 xor	 eax, eax
  00115	85 c0		 test	 eax, eax
  00117	75 c8		 jne	 SHORT $LN4@s370_ecpsv
  00119	48 8b 84 24 f8
	62 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  00121	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00125	83 e0 01	 and	 eax, 1
  00128	85 c0		 test	 eax, eax
  0012a	74 1b		 je	 SHORT $LN23@s370_ecpsv
  0012c	ba 02 00 00 00	 mov	 edx, 2
  00131	48 8b 8c 24 f8
	62 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00139	48 8b 84 24 f8
	62 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  00141	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN23@s370_ecpsv:
$LN7@s370_ecpsv:
  00147	48 8b 84 24 f8
	62 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  0014f	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00155	d1 e8		 shr	 eax, 1
  00157	83 e0 01	 and	 eax, 1
  0015a	85 c0		 test	 eax, eax
  0015c	74 1b		 je	 SHORT $LN24@s370_ecpsv
  0015e	48 8b 84 24 f8
	62 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  00166	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  0016c	ba fc ff ff ff	 mov	 edx, -4
  00171	48 8b c8	 mov	 rcx, rax
  00174	e8 00 00 00 00	 call	 longjmp
$LN24@s370_ecpsv:
  00179	33 c0		 xor	 eax, eax
  0017b	85 c0		 test	 eax, eax
  0017d	75 c8		 jne	 SHORT $LN7@s370_ecpsv
  0017f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00186	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  0018c	c1 e8 11	 shr	 eax, 17
  0018f	83 e0 01	 and	 eax, 1
  00192	85 c0		 test	 eax, eax
  00194	75 75		 jne	 SHORT $LN25@s370_ecpsv
  00196	8b 05 58 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+600
  0019c	c1 e8 02	 shr	 eax, 2
  0019f	83 e0 01	 and	 eax, 1
  001a2	85 c0		 test	 eax, eax
  001a4	74 53		 je	 SHORT $LN26@s370_ecpsv
  001a6	b9 01 00 00 00	 mov	 ecx, 1
  001ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172801
  001b8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172802
  001c4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172803
  001d0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001d5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001da	41 b9 03 00 00
	00		 mov	 r9d, 3
  001e0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172804
  001e7	ba 9a 0b 00 00	 mov	 edx, 2970		; 00000b9aH
  001ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172805
  001f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN26@s370_ecpsv:
  001f9	ba 01 00 00 00	 mov	 edx, 1
  001fe	48 8b 8c 24 f8
	62 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00206	e8 00 00 00 00	 call	 s370_program_interrupt
$LN25@s370_ecpsv:
  0020b	48 8b 84 24 f8
	62 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  00213	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00217	83 e0 01	 and	 eax, 1
  0021a	85 c0		 test	 eax, eax
  0021c	74 1b		 je	 SHORT $LN27@s370_ecpsv
  0021e	ba 02 00 00 00	 mov	 edx, 2
  00223	48 8b 8c 24 f8
	62 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0022b	48 8b 84 24 f8
	62 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  00233	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN27@s370_ecpsv:
  00239	8b 05 58 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+600
  0023f	d1 e8		 shr	 eax, 1
  00241	83 e0 01	 and	 eax, 1
  00244	85 c0		 test	 eax, eax
  00246	75 68		 jne	 SHORT $LN28@s370_ecpsv
  00248	8b 05 58 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+600
  0024e	c1 e8 02	 shr	 eax, 2
  00251	83 e0 01	 and	 eax, 1
  00254	85 c0		 test	 eax, eax
  00256	74 53		 je	 SHORT $LN29@s370_ecpsv
  00258	b9 01 00 00 00	 mov	 ecx, 1
  0025d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00263	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172809
  0026a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0026f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172810
  00276	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0027b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172811
  00282	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00287	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0028c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00292	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172812
  00299	ba 9a 0b 00 00	 mov	 edx, 2970		; 00000b9aH
  0029e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172813
  002a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN29@s370_ecpsv:
  002ab	e9 94 06 00 00	 jmp	 $LN1@s370_ecpsv
$LN28@s370_ecpsv:
  002b0	b8 08 00 00 00	 mov	 eax, 8
  002b5	48 6b c0 07	 imul	 rax, rax, 7
  002b9	48 8b 8c 24 f8
	62 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002c1	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  002c8	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  002cd	85 c0		 test	 eax, eax
  002cf	75 05		 jne	 SHORT $LN30@s370_ecpsv
  002d1	e9 6e 06 00 00	 jmp	 $LN1@s370_ecpsv
$LN30@s370_ecpsv:
  002d6	48 8b 05 48 02
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+584
  002dd	48 ff c0	 inc	 rax
  002e0	48 89 05 48 02
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+584, rax
  002e7	8b 05 58 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+600
  002ed	c1 e8 02	 shr	 eax, 2
  002f0	83 e0 01	 and	 eax, 1
  002f3	85 c0		 test	 eax, eax
  002f5	74 53		 je	 SHORT $LN31@s370_ecpsv
  002f7	b9 01 00 00 00	 mov	 ecx, 1
  002fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00302	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172816
  00309	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0030e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172817
  00315	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0031a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172818
  00321	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00326	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0032b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00331	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172819
  00338	ba 9a 0b 00 00	 mov	 edx, 2970		; 00000b9aH
  0033d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172820
  00344	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN31@s370_ecpsv:

; 2971 :     EVM_ST(sysblk.ecpsvm.level,effective_addr1);

  0034a	8b 45 0c	 mov	 eax, DWORD PTR effective_addr1$[rbp]
  0034d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00352	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00359	8b 89 44 13 00
	00		 mov	 ecx, DWORD PTR [rcx+4932]
  0035f	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00365	4c 8b 8c 24 f8
	62 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  0036d	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00373	8b d0		 mov	 edx, eax
  00375	e8 00 00 00 00	 call	 s370_vstore4

; 2972 :     DEBUG_CPASSISTX(STEVL,MSGBUF(buf, "ECPS:VM STORE LEVEL %d called",sysblk.ecpsvm.level));

  0037a	8b 05 58 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+600
  00380	c1 e8 02	 shr	 eax, 2
  00383	83 e0 01	 and	 eax, 1
  00386	85 c0		 test	 eax, eax
  00388	74 2e		 je	 SHORT $LN32@s370_ecpsv
  0038a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00391	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00397	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0039c	44 8b c8	 mov	 r9d, eax
  0039f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172822
  003a6	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  003ab	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  003b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN32@s370_ecpsv:

; 2973 :     DEBUG_CPASSISTX(STEVL,WRMSG(HHC90000, "D", buf));

  003b8	8b 05 58 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+600
  003be	c1 e8 02	 shr	 eax, 2
  003c1	83 e0 01	 and	 eax, 1
  003c4	85 c0		 test	 eax, eax
  003c6	74 53		 je	 SHORT $LN33@s370_ecpsv
  003c8	b9 01 00 00 00	 mov	 ecx, 1
  003cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003d3	48 8d 8d 00 61
	01 00		 lea	 rcx, QWORD PTR buf$[rbp]
  003da	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172824
  003e6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172825
  003f2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003f7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003fc	41 b9 03 00 00
	00		 mov	 r9d, 3
  00402	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172826
  00409	ba 9d 0b 00 00	 mov	 edx, 2973		; 00000b9dH
  0040e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172827
  00415	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN33@s370_ecpsv:

; 2974 :     CPASSIST_HIT(STEVL);

  0041b	48 8b 05 50 02
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+592
  00422	48 ff c0	 inc	 rax
  00425	48 89 05 50 02
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+592, rax

; 2975 : 
; 2976 :     sysblk.ecpsvm.freetrap=0;           /* assume no free trap in effect */

  0042c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00433	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00439	0f ba f0 13	 btr	 eax, 19
  0043d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00444	89 81 44 13 00
	00		 mov	 DWORD PTR [rcx+4932], eax

; 2977 :     if(!sysblk.ecpsvm.enabletrap)       /* exit if ECPSVM YES NOTRAP was specified */

  0044a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00451	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00457	c1 e8 12	 shr	 eax, 18
  0045a	83 e0 01	 and	 eax, 1
  0045d	85 c0		 test	 eax, eax
  0045f	75 05		 jne	 SHORT $LN34@s370_ecpsv

; 2978 :     {
; 2979 :         return;

  00461	e9 de 04 00 00	 jmp	 $LN1@s370_ecpsv
$LN34@s370_ecpsv:

; 2980 :     }
; 2981 : 
; 2982 :     if(sysblk.ecpsvm.level != 20)

  00466	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0046d	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00473	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  00478	83 f8 14	 cmp	 eax, 20
  0047b	74 05		 je	 SHORT $LN35@s370_ecpsv

; 2983 :     {
; 2984 :         return;

  0047d	e9 c2 04 00 00	 jmp	 $LN1@s370_ecpsv
$LN35@s370_ecpsv:

; 2985 :     }
; 2986 : 
; 2987 :     /* Let's validate several CP instructions in DMKCPI to try to locate the code that
; 2988 :        NO-OPs the assist functions when the FRET/FRET trap is installed in CP.  During
; 2989 :        validation, do not examine base and displacements that could be different simply due
; 2990 :        to a re-assembly of DMKCPI.  If we don't find what we expect at any time, just
; 2991 :        exit from this function and allow CP to NO-OP the assist functions as usual.
; 2992 :     */
; 2993 :     ia=PSW_IA_FROM_IP(regs,0);

  00482	48 8b 84 24 f8
	62 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  0048a	8b 80 10 02 00
	00		 mov	 eax, DWORD PTR [rax+528]
  00490	48 8b 8c 24 f8
	62 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00498	48 8b 94 24 f8
	62 01 00	 mov	 rdx, QWORD PTR regs$[rsp]
  004a0	48 8b 92 00 02
	00 00		 mov	 rdx, QWORD PTR [rdx+512]
  004a7	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  004ab	48 2b ca	 sub	 rcx, rdx
  004ae	48 03 c1	 add	 rax, rcx
  004b1	48 25 ff ff ff
	00		 and	 rax, 16777215		; 00ffffffH
  004b7	89 45 00	 mov	 DWORD PTR ia$[rbp], eax

; 2994 :     if(EVM_L(ia) != 0x960C034A)         /*  OI    CPSTAT2,CPASTAVL+CPASTON  */

  004ba	8b 45 00	 mov	 eax, DWORD PTR ia$[rbp]
  004bd	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  004c2	4c 8b 84 24 f8
	62 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  004ca	ba fe ff ff ff	 mov	 edx, -2
  004cf	8b c8		 mov	 ecx, eax
  004d1	e8 00 00 00 00	 call	 s370_vfetch4
  004d6	3d 4a 03 0c 96	 cmp	 eax, -1777597622	; 960c034aH
  004db	74 05		 je	 SHORT $LN36@s370_ecpsv

; 2995 :         return;

  004dd	e9 62 04 00 00	 jmp	 $LN1@s370_ecpsv
$LN36@s370_ecpsv:

; 2996 :     ia+=4;

  004e2	8b 45 00	 mov	 eax, DWORD PTR ia$[rbp]
  004e5	83 c0 04	 add	 eax, 4
  004e8	89 45 00	 mov	 DWORD PTR ia$[rbp], eax

; 2997 :     if(EVM_L(ia) != 0xB7660440)         /*  LCTL  R6,R6,ZEROES */

  004eb	8b 45 00	 mov	 eax, DWORD PTR ia$[rbp]
  004ee	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  004f3	4c 8b 84 24 f8
	62 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  004fb	ba fe ff ff ff	 mov	 edx, -2
  00500	8b c8		 mov	 ecx, eax
  00502	e8 00 00 00 00	 call	 s370_vfetch4
  00507	3d 40 04 66 b7	 cmp	 eax, -1218051008	; b7660440H
  0050c	74 05		 je	 SHORT $LN37@s370_ecpsv

; 2998 :         return;

  0050e	e9 31 04 00 00	 jmp	 $LN1@s370_ecpsv
$LN37@s370_ecpsv:

; 2999 :     ia+=4;

  00513	8b 45 00	 mov	 eax, DWORD PTR ia$[rbp]
  00516	83 c0 04	 add	 eax, 4
  00519	89 45 00	 mov	 DWORD PTR ia$[rbp], eax

; 3000 :     if(EVM_L(ia) != 0xD50304B0)         /*  CLC   F20,0(R3) */

  0051c	8b 45 00	 mov	 eax, DWORD PTR ia$[rbp]
  0051f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00524	4c 8b 84 24 f8
	62 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  0052c	ba fe ff ff ff	 mov	 edx, -2
  00531	8b c8		 mov	 ecx, eax
  00533	e8 00 00 00 00	 call	 s370_vfetch4
  00538	3d b0 04 03 d5	 cmp	 eax, -721222480		; d50304b0H
  0053d	74 05		 je	 SHORT $LN38@s370_ecpsv

; 3001 :         return;

  0053f	e9 00 04 00 00	 jmp	 $LN1@s370_ecpsv
$LN38@s370_ecpsv:

; 3002 :     ia+=6;

  00544	8b 45 00	 mov	 eax, DWORD PTR ia$[rbp]
  00547	83 c0 06	 add	 eax, 6
  0054a	89 45 00	 mov	 DWORD PTR ia$[rbp], eax

; 3003 :     if(EVM_LH(ia) != 0x4740)            /*  BH    CPIPINT3 */

  0054d	8b 45 00	 mov	 eax, DWORD PTR ia$[rbp]
  00550	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00555	4c 8b 84 24 f8
	62 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  0055d	ba fe ff ff ff	 mov	 edx, -2
  00562	8b c8		 mov	 ecx, eax
  00564	e8 00 00 00 00	 call	 s370_vfetch2
  00569	0f b7 c0	 movzx	 eax, ax
  0056c	3d 40 47 00 00	 cmp	 eax, 18240		; 00004740H
  00571	74 05		 je	 SHORT $LN39@s370_ecpsv

; 3004 :         return;

  00573	e9 cc 03 00 00	 jmp	 $LN1@s370_ecpsv
$LN39@s370_ecpsv:

; 3005 :     ia+=4;

  00578	8b 45 00	 mov	 eax, DWORD PTR ia$[rbp]
  0057b	83 c0 04	 add	 eax, 4
  0057e	89 45 00	 mov	 DWORD PTR ia$[rbp], eax

; 3006 :     if(EVM_LH(ia) != 0x4780)            /*  BE    CPINTFRE */

  00581	8b 45 00	 mov	 eax, DWORD PTR ia$[rbp]
  00584	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00589	4c 8b 84 24 f8
	62 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  00591	ba fe ff ff ff	 mov	 edx, -2
  00596	8b c8		 mov	 ecx, eax
  00598	e8 00 00 00 00	 call	 s370_vfetch2
  0059d	0f b7 c0	 movzx	 eax, ax
  005a0	3d 80 47 00 00	 cmp	 eax, 18304		; 00004780H
  005a5	74 05		 je	 SHORT $LN40@s370_ecpsv

; 3007 :         return;

  005a7	e9 98 03 00 00	 jmp	 $LN1@s370_ecpsv
$LN40@s370_ecpsv:

; 3008 : 
; 3009 :     /* get B2(D2) effective addr from the BE instruction */
; 3010 :     effective_addr2=EVM_LH(ia+2);

  005ac	8b 45 00	 mov	 eax, DWORD PTR ia$[rbp]
  005af	83 c0 02	 add	 eax, 2
  005b2	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  005b7	4c 8b 84 24 f8
	62 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  005bf	ba fe ff ff ff	 mov	 edx, -2
  005c4	8b c8		 mov	 ecx, eax
  005c6	e8 00 00 00 00	 call	 s370_vfetch2
  005cb	0f b7 c0	 movzx	 eax, ax
  005ce	89 45 04	 mov	 DWORD PTR effective_addr2$[rbp], eax

; 3011 :     b2=(effective_addr2 >> 12) & 0x0F;

  005d1	8b 45 04	 mov	 eax, DWORD PTR effective_addr2$[rbp]
  005d4	c1 e8 0c	 shr	 eax, 12
  005d7	83 e0 0f	 and	 eax, 15
  005da	89 45 08	 mov	 DWORD PTR b2$[rbp], eax

; 3012 :     effective_addr2&=0x0FFF;

  005dd	8b 45 04	 mov	 eax, DWORD PTR effective_addr2$[rbp]
  005e0	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  005e5	89 45 04	 mov	 DWORD PTR effective_addr2$[rbp], eax

; 3013 :     effective_addr2+=regs->GR_L(b2);

  005e8	48 63 45 08	 movsxd	 rax, DWORD PTR b2$[rbp]
  005ec	48 8b 8c 24 f8
	62 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005f4	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  005fb	8b 4d 04	 mov	 ecx, DWORD PTR effective_addr2$[rbp]
  005fe	03 c8		 add	 ecx, eax
  00600	8b c1		 mov	 eax, ecx
  00602	89 45 04	 mov	 DWORD PTR effective_addr2$[rbp], eax

; 3014 : 
; 3015 :     /* effective_addr2 now points to label 'CPINTFRE' which is one instruction prior to where
; 3016 :        the trap disables this assist.  Ensure that code is present and if it is, continue.
; 3017 :        Else, bail out.
; 3018 :     */
; 3019 :     if(EVM_L(effective_addr2) != 0xD2070068)    /* CPINTFRE  MVC  PRNPSW(8),CPIPSWS+2*8 */

  00605	8b 45 04	 mov	 eax, DWORD PTR effective_addr2$[rbp]
  00608	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0060d	4c 8b 84 24 f8
	62 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  00615	ba fe ff ff ff	 mov	 edx, -2
  0061a	8b c8		 mov	 ecx, eax
  0061c	e8 00 00 00 00	 call	 s370_vfetch4
  00621	3d 68 00 07 d2	 cmp	 eax, -771293080		; d2070068H
  00626	74 05		 je	 SHORT $LN41@s370_ecpsv

; 3020 :         return;

  00628	e9 17 03 00 00	 jmp	 $LN1@s370_ecpsv
$LN41@s370_ecpsv:

; 3021 : 
; 3022 :     /* Ensure there are five consecutive L and MVC instructions that NO-OP the assist */
; 3023 :     /* That is, 5 ea 4-byte instructions + 5 ea 6-byte instructions = 50 bytes to validate */
; 3024 :     for(ia=effective_addr2+6;ia<effective_addr2+50;ia+=10)

  0062d	8b 45 04	 mov	 eax, DWORD PTR effective_addr2$[rbp]
  00630	83 c0 06	 add	 eax, 6
  00633	89 45 00	 mov	 DWORD PTR ia$[rbp], eax
  00636	eb 09		 jmp	 SHORT $LN10@s370_ecpsv
$LN8@s370_ecpsv:
  00638	8b 45 00	 mov	 eax, DWORD PTR ia$[rbp]
  0063b	83 c0 0a	 add	 eax, 10
  0063e	89 45 00	 mov	 DWORD PTR ia$[rbp], eax
$LN10@s370_ecpsv:
  00641	8b 45 04	 mov	 eax, DWORD PTR effective_addr2$[rbp]
  00644	83 c0 32	 add	 eax, 50			; 00000032H
  00647	39 45 00	 cmp	 DWORD PTR ia$[rbp], eax
  0064a	73 58		 jae	 SHORT $LN9@s370_ecpsv

; 3025 :     {
; 3026 :         if(EVM_LH(ia) != 0x5860)            /*  L    R6,CPATxxxx  */

  0064c	8b 45 00	 mov	 eax, DWORD PTR ia$[rbp]
  0064f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00654	4c 8b 84 24 f8
	62 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  0065c	ba fe ff ff ff	 mov	 edx, -2
  00661	8b c8		 mov	 ecx, eax
  00663	e8 00 00 00 00	 call	 s370_vfetch2
  00668	0f b7 c0	 movzx	 eax, ax
  0066b	3d 60 58 00 00	 cmp	 eax, 22624		; 00005860H
  00670	74 05		 je	 SHORT $LN42@s370_ecpsv

; 3027 :         return;

  00672	e9 cd 02 00 00	 jmp	 $LN1@s370_ecpsv
$LN42@s370_ecpsv:

; 3028 :         if(EVM_L(ia+4) != 0xD2056000)       /*  MVC  0(6,R6),NOOP */

  00677	8b 45 00	 mov	 eax, DWORD PTR ia$[rbp]
  0067a	83 c0 04	 add	 eax, 4
  0067d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00682	4c 8b 84 24 f8
	62 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  0068a	ba fe ff ff ff	 mov	 edx, -2
  0068f	8b c8		 mov	 ecx, eax
  00691	e8 00 00 00 00	 call	 s370_vfetch4
  00696	3d 00 60 05 d2	 cmp	 eax, -771399680		; d2056000H
  0069b	74 05		 je	 SHORT $LN43@s370_ecpsv

; 3029 :         return;

  0069d	e9 a2 02 00 00	 jmp	 $LN1@s370_ecpsv
$LN43@s370_ecpsv:

; 3030 :     }

  006a2	eb 94		 jmp	 SHORT $LN8@s370_ecpsv
$LN9@s370_ecpsv:

; 3031 : 
; 3032 :     /* Validate the instruction where we will resume execution upon return from STEVL */
; 3033 :     if(EVM_LH(ia) != 0x5840)                /*  L    R4,=F'-16'   */

  006a4	8b 45 00	 mov	 eax, DWORD PTR ia$[rbp]
  006a7	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  006ac	4c 8b 84 24 f8
	62 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  006b4	ba fe ff ff ff	 mov	 edx, -2
  006b9	8b c8		 mov	 ecx, eax
  006bb	e8 00 00 00 00	 call	 s370_vfetch2
  006c0	0f b7 c0	 movzx	 eax, ax
  006c3	3d 40 58 00 00	 cmp	 eax, 22592		; 00005840H
  006c8	74 05		 je	 SHORT $LN44@s370_ecpsv

; 3034 :         return;

  006ca	e9 75 02 00 00	 jmp	 $LN1@s370_ecpsv
$LN44@s370_ecpsv:

; 3035 : 
; 3036 :     /* If we make it here, we have validated that the FREE/FRET trap code exists. */
; 3037 :     /* Now perform the necessary instructions in DMKCPI that we are skipping over */
; 3038 :     EVM_STC(EVM_IC(CPSTAT2) | (CPASTAVL+CPASTON),CPSTAT2);

  006cf	4c 8b 84 24 f8
	62 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  006d7	ba fe ff ff ff	 mov	 edx, -2
  006dc	b9 4a 03 00 00	 mov	 ecx, 842		; 0000034aH
  006e1	e8 00 00 00 00	 call	 s370_vfetchb
  006e6	0f b6 c0	 movzx	 eax, al
  006e9	83 c8 0c	 or	 eax, 12
  006ec	4c 8b 8c 24 f8
	62 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  006f4	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  006fa	ba 4a 03 00 00	 mov	 edx, 842		; 0000034aH
  006ff	0f b6 c8	 movzx	 ecx, al
  00702	e8 00 00 00 00	 call	 s370_vstoreb

; 3039 :     regs->CR_L(6)=0;

  00707	b8 08 00 00 00	 mov	 eax, 8
  0070c	48 6b c0 07	 imul	 rax, rax, 7
  00710	48 8b 8c 24 f8
	62 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00718	c7 84 01 00 06
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax+1536], 0

; 3040 : 
; 3041 :     /* effective_addr2 still points to a MVC instruction that fills in the PGM New PSW;
; 3042 :        We need to calculate D2(B2) from the MVC to point to the PSW and then move it
; 3043 :        into PGM New.
; 3044 :     */
; 3045 :     effective_addr2=EVM_LH(effective_addr2+4);

  00723	8b 45 04	 mov	 eax, DWORD PTR effective_addr2$[rbp]
  00726	83 c0 04	 add	 eax, 4
  00729	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0072e	4c 8b 84 24 f8
	62 01 00	 mov	 r8, QWORD PTR regs$[rsp]
  00736	ba fe ff ff ff	 mov	 edx, -2
  0073b	8b c8		 mov	 ecx, eax
  0073d	e8 00 00 00 00	 call	 s370_vfetch2
  00742	0f b7 c0	 movzx	 eax, ax
  00745	89 45 04	 mov	 DWORD PTR effective_addr2$[rbp], eax

; 3046 :     b2=(effective_addr2 >> 12) & 0x0F;

  00748	8b 45 04	 mov	 eax, DWORD PTR effective_addr2$[rbp]
  0074b	c1 e8 0c	 shr	 eax, 12
  0074e	83 e0 0f	 and	 eax, 15
  00751	89 45 08	 mov	 DWORD PTR b2$[rbp], eax

; 3047 :     effective_addr2&=0x0FFF;

  00754	8b 45 04	 mov	 eax, DWORD PTR effective_addr2$[rbp]
  00757	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0075c	89 45 04	 mov	 DWORD PTR effective_addr2$[rbp], eax

; 3048 :     effective_addr2+=regs->GR_L(b2);

  0075f	48 63 45 08	 movsxd	 rax, DWORD PTR b2$[rbp]
  00763	48 8b 8c 24 f8
	62 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0076b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00772	8b 4d 04	 mov	 ecx, DWORD PTR effective_addr2$[rbp]
  00775	03 c8		 add	 ecx, eax
  00777	8b c1		 mov	 eax, ecx
  00779	89 45 04	 mov	 DWORD PTR effective_addr2$[rbp], eax
$LN13@s370_ecpsv:

; 3049 :     INITPSEUDOREGS(newr);

  0077c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00783	48 63 80 90 14
	00 00		 movsxd	 rax, DWORD PTR [rax+5264]
  0078a	48 89 45 18	 mov	 QWORD PTR tv372[rbp], rax
  0078e	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR newr$[rbp]
  00795	48 8b f9	 mov	 rdi, rcx
  00798	33 c0		 xor	 eax, eax
  0079a	48 8b 4d 18	 mov	 rcx, QWORD PTR tv372[rbp]
  0079e	f3 aa		 rep stosb
$LN16@s370_ecpsv:
  007a0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG172839
  007a7	48 89 85 e8 00
	00 00		 mov	 QWORD PTR newr$[rbp+104], rax
  007ae	33 c0		 xor	 eax, eax
  007b0	85 c0		 test	 eax, eax
  007b2	75 ec		 jne	 SHORT $LN16@s370_ecpsv
  007b4	33 c0		 xor	 eax, eax
  007b6	85 c0		 test	 eax, eax
  007b8	75 c2		 jne	 SHORT $LN13@s370_ecpsv

; 3050 :     ARCH_DEP(load_psw) (&newr, (BYTE *)&regs->mainstor[effective_addr2]);

  007ba	8b 45 04	 mov	 eax, DWORD PTR effective_addr2$[rbp]
  007bd	48 8b 8c 24 f8
	62 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  007c5	48 8b 89 48 08
	00 00		 mov	 rcx, QWORD PTR [rcx+2120]
  007cc	48 03 c8	 add	 rcx, rax
  007cf	48 8b c1	 mov	 rax, rcx
  007d2	48 8b d0	 mov	 rdx, rax
  007d5	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR newr$[rbp]
  007dc	e8 00 00 00 00	 call	 s370_load_psw

; 3051 :     psa=(PSA_3XX *)MADDR((VADR)0 , USE_PRIMARY_SPACE, regs, ACCTYPE_WRITE, 0);

  007e1	c6 44 24 28 00	 mov	 BYTE PTR [rsp+40], 0
  007e6	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  007ee	4c 8b 8c 24 f8
	62 01 00	 mov	 r9, QWORD PTR regs$[rsp]
  007f6	41 b8 fd ff ff
	ff		 mov	 r8d, -3
  007fc	ba 01 00 00 00	 mov	 edx, 1
  00801	33 c9		 xor	 ecx, ecx
  00803	e8 00 00 00 00	 call	 s370_maddr_l
  00808	48 89 45 20	 mov	 QWORD PTR psa$[rbp], rax

; 3052 :     ARCH_DEP(store_psw) (&newr, (BYTE *)&psa->pgmnew);

  0080c	48 8b 45 20	 mov	 rax, QWORD PTR psa$[rbp]
  00810	48 83 c0 68	 add	 rax, 104		; 00000068H
  00814	48 8b d0	 mov	 rdx, rax
  00817	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR newr$[rbp]
  0081e	e8 00 00 00 00	 call	 s370_store_psw

; 3053 : 
; 3054 :     /* Indicate that this assist is now running with the free trap present.
; 3055 :        Then, reset the PSW IA to the value in 'ia' right now; that is,
; 3056 :        just past the end of the assist no-ops.  CP FREE/FRET trap remains in effect.
; 3057 :     */
; 3058 :     DEBUG_CPASSISTX(STEVL,WRMSG(HHC90000, "D", "CP FREE/FRET trap detected; assist operational with trap in effect"));

  00823	8b 05 58 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+600
  00829	c1 e8 02	 shr	 eax, 2
  0082c	83 e0 01	 and	 eax, 1
  0082f	85 c0		 test	 eax, eax
  00831	74 53		 je	 SHORT $LN45@s370_ecpsv
  00833	b9 01 00 00 00	 mov	 ecx, 1
  00838	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0083e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172841
  00845	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0084a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172842
  00851	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00856	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172843
  0085d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00862	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00867	41 b9 03 00 00
	00		 mov	 r9d, 3
  0086d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172844
  00874	ba f2 0b 00 00	 mov	 edx, 3058		; 00000bf2H
  00879	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172845
  00880	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN45@s370_ecpsv:

; 3059 :     sysblk.ecpsvm.freetrap=1;

  00886	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0088d	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00893	0f ba e8 13	 bts	 eax, 19
  00897	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0089e	89 81 44 13 00
	00		 mov	 DWORD PTR [rcx+4932], eax
$LN19@s370_ecpsv:

; 3060 :     SET_PSW_IA_AND_MAYBE_IP(regs, ia);

  008a4	8b 45 00	 mov	 eax, DWORD PTR ia$[rbp]
  008a7	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  008ac	48 8b 8c 24 f8
	62 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  008b4	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  008ba	48 8b 84 24 f8
	62 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  008c2	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  008ca	74 6e		 je	 SHORT $LN46@s370_ecpsv
  008cc	48 8b 84 24 f8
	62 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  008d4	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  008da	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  008df	48 8b 8c 24 f8
	62 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  008e7	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  008ed	75 38		 jne	 SHORT $LN47@s370_ecpsv
  008ef	48 8b 84 24 f8
	62 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  008f7	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  008fd	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00902	8b c0		 mov	 eax, eax
  00904	48 8b 8c 24 f8
	62 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0090c	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00913	48 0b c8	 or	 rcx, rax
  00916	48 8b c1	 mov	 rax, rcx
  00919	48 8b 8c 24 f8
	62 01 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00921	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00925	eb 13		 jmp	 SHORT $LN48@s370_ecpsv
$LN47@s370_ecpsv:
  00927	48 8b 84 24 f8
	62 01 00	 mov	 rax, QWORD PTR regs$[rsp]
  0092f	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN48@s370_ecpsv:
$LN46@s370_ecpsv:
  0093a	33 c0		 xor	 eax, eax
  0093c	85 c0		 test	 eax, eax
  0093e	0f 85 60 ff ff
	ff		 jne	 $LN19@s370_ecpsv
$LN1@s370_ecpsv:
$LN49@s370_ecpsv:

; 3061 :     return;
; 3062 : }

  00944	48 8b 8d 00 62
	01 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0094b	48 33 cc	 xor	 rcx, rsp
  0094e	e8 00 00 00 00	 call	 __security_check_cookie
  00953	48 81 c4 d8 62
	01 00		 add	 rsp, 90840		; 000162d8H
  0095a	5f		 pop	 rdi
  0095b	5d		 pop	 rbp
  0095c	c3		 ret	 0
s370_ecpsvm_store_level ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
effective_addr2$ = 64
effective_addr1$ = 68
temp$1 = 72
tv211 = 76
b1$ = 80
b2$ = 84
inst$ = 112
regs$ = 120
s370_ecpsvm_disp2 PROC

; 2939 : {

$LN26:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 2940 :     ECPSVM_PROLOG(DISP2);

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR inst$[rsp]
  00013	48 83 c0 02	 add	 rax, 2
  00017	48 8b c8	 mov	 rcx, rax
  0001a	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001f	8b c8		 mov	 ecx, eax
  00021	e8 00 00 00 00	 call	 _byteswap_ulong
  00026	89 44 24 48	 mov	 DWORD PTR temp$1[rsp], eax
  0002a	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0002e	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00033	89 44 24 40	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00037	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0003b	c1 e8 0c	 shr	 eax, 12
  0003e	83 e0 0f	 and	 eax, 15
  00041	89 44 24 54	 mov	 DWORD PTR b2$[rsp], eax
  00045	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00049	c1 e8 10	 shr	 eax, 16
  0004c	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00051	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00055	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00059	c1 e8 1c	 shr	 eax, 28
  0005c	83 e0 0f	 and	 eax, 15
  0005f	89 44 24 50	 mov	 DWORD PTR b1$[rsp], eax
  00063	83 7c 24 50 00	 cmp	 DWORD PTR b1$[rsp], 0
  00068	74 2a		 je	 SHORT $LN10@s370_ecpsv
  0006a	48 63 44 24 50	 movsxd	 rax, DWORD PTR b1$[rsp]
  0006f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00074	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007b	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0007f	03 c8		 add	 ecx, eax
  00081	8b c1		 mov	 eax, ecx
  00083	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00087	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0008b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00090	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN10@s370_ecpsv:
  00094	83 7c 24 54 00	 cmp	 DWORD PTR b2$[rsp], 0
  00099	74 2a		 je	 SHORT $LN11@s370_ecpsv
  0009b	48 63 44 24 54	 movsxd	 rax, DWORD PTR b2$[rsp]
  000a0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a5	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000ac	8b 4c 24 40	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000b0	03 c8		 add	 ecx, eax
  000b2	8b c1		 mov	 eax, ecx
  000b4	89 44 24 40	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000b8	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000bc	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000c1	89 44 24 40	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN11@s370_ecpsv:
$LN4@s370_ecpsv:
  000c5	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000ca	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ce	48 83 c0 06	 add	 rax, 6
  000d2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000d7	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000db	33 c0		 xor	 eax, eax
  000dd	83 f8 06	 cmp	 eax, 6
  000e0	74 0c		 je	 SHORT $LN12@s370_ecpsv
  000e2	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000e7	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN12@s370_ecpsv:
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	75 d1		 jne	 SHORT $LN4@s370_ecpsv
  000f4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000f9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  000fd	83 e0 01	 and	 eax, 1
  00100	85 c0		 test	 eax, eax
  00102	74 15		 je	 SHORT $LN13@s370_ecpsv
  00104	ba 02 00 00 00	 mov	 edx, 2
  00109	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0010e	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00113	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN13@s370_ecpsv:
$LN7@s370_ecpsv:
  00119	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0011e	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00124	d1 e8		 shr	 eax, 1
  00126	83 e0 01	 and	 eax, 1
  00129	85 c0		 test	 eax, eax
  0012b	74 18		 je	 SHORT $LN14@s370_ecpsv
  0012d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00132	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00138	ba fc ff ff ff	 mov	 edx, -4
  0013d	48 8b c8	 mov	 rcx, rax
  00140	e8 00 00 00 00	 call	 longjmp
$LN14@s370_ecpsv:
  00145	33 c0		 xor	 eax, eax
  00147	85 c0		 test	 eax, eax
  00149	75 ce		 jne	 SHORT $LN7@s370_ecpsv
  0014b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00152	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00158	c1 e8 11	 shr	 eax, 17
  0015b	83 e0 01	 and	 eax, 1
  0015e	85 c0		 test	 eax, eax
  00160	75 72		 jne	 SHORT $LN15@s370_ecpsv
  00162	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  00168	c1 e8 02	 shr	 eax, 2
  0016b	83 e0 01	 and	 eax, 1
  0016e	85 c0		 test	 eax, eax
  00170	74 53		 je	 SHORT $LN16@s370_ecpsv
  00172	b9 01 00 00 00	 mov	 ecx, 1
  00177	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172724
  00184	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172725
  00190	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172726
  0019c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001a1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a6	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172727
  001b3	ba 7c 0b 00 00	 mov	 edx, 2940		; 00000b7cH
  001b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172728
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN16@s370_ecpsv:
  001c5	ba 01 00 00 00	 mov	 edx, 1
  001ca	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001cf	e8 00 00 00 00	 call	 s370_program_interrupt
$LN15@s370_ecpsv:
  001d4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001d9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  001dd	83 e0 01	 and	 eax, 1
  001e0	85 c0		 test	 eax, eax
  001e2	74 15		 je	 SHORT $LN17@s370_ecpsv
  001e4	ba 02 00 00 00	 mov	 edx, 2
  001e9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001ee	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001f3	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN17@s370_ecpsv:
  001f9	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  001ff	d1 e8		 shr	 eax, 1
  00201	83 e0 01	 and	 eax, 1
  00204	85 c0		 test	 eax, eax
  00206	75 68		 jne	 SHORT $LN18@s370_ecpsv
  00208	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  0020e	c1 e8 02	 shr	 eax, 2
  00211	83 e0 01	 and	 eax, 1
  00214	85 c0		 test	 eax, eax
  00216	74 53		 je	 SHORT $LN19@s370_ecpsv
  00218	b9 01 00 00 00	 mov	 ecx, 1
  0021d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00223	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172732
  0022a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172733
  00236	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172734
  00242	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00247	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00252	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172735
  00259	ba 7c 0b 00 00	 mov	 edx, 2940		; 00000b7cH
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172736
  00265	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN19@s370_ecpsv:
  0026b	e9 03 01 00 00	 jmp	 $LN1@s370_ecpsv
$LN18@s370_ecpsv:
  00270	b8 08 00 00 00	 mov	 eax, 8
  00275	48 6b c0 07	 imul	 rax, rax, 7
  00279	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0027e	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00285	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0028a	85 c0		 test	 eax, eax
  0028c	75 05		 jne	 SHORT $LN20@s370_ecpsv
  0028e	e9 e0 00 00 00	 jmp	 $LN1@s370_ecpsv
$LN20@s370_ecpsv:
  00293	48 8b 05 08 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+264
  0029a	48 ff c0	 inc	 rax
  0029d	48 89 05 08 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+264, rax
  002a4	8b 05 18 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+280
  002aa	c1 e8 02	 shr	 eax, 2
  002ad	83 e0 01	 and	 eax, 1
  002b0	85 c0		 test	 eax, eax
  002b2	74 53		 je	 SHORT $LN21@s370_ecpsv
  002b4	b9 01 00 00 00	 mov	 ecx, 1
  002b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172739
  002c6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172740
  002d2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172741
  002de	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e8	41 b9 03 00 00
	00		 mov	 r9d, 3
  002ee	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172742
  002f5	ba 7c 0b 00 00	 mov	 edx, 2940		; 00000b7cH
  002fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172743
  00301	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN21@s370_ecpsv:

; 2941 :     switch(ecpsvm_do_disp2(regs,effective_addr1,effective_addr2))

  00307	44 8b 44 24 40	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  0030c	8b 54 24 44	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  00310	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00315	e8 00 00 00 00	 call	 ecpsvm_do_disp2
  0031a	89 44 24 4c	 mov	 DWORD PTR tv211[rsp], eax
  0031e	83 7c 24 4c 00	 cmp	 DWORD PTR tv211[rsp], 0
  00323	74 10		 je	 SHORT $LN22@s370_ecpsv
  00325	83 7c 24 4c 01	 cmp	 DWORD PTR tv211[rsp], 1
  0032a	74 1c		 je	 SHORT $LN23@s370_ecpsv
  0032c	83 7c 24 4c 02	 cmp	 DWORD PTR tv211[rsp], 2
  00331	74 17		 je	 SHORT $LN24@s370_ecpsv
  00333	eb 3e		 jmp	 SHORT $LN8@s370_ecpsv
$LN22@s370_ecpsv:

; 2942 :     {
; 2943 :         case 0: /* Done */
; 2944 :             CPASSIST_HIT(DISP2);

  00335	48 8b 05 10 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+272
  0033c	48 ff c0	 inc	 rax
  0033f	48 89 05 10 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+272, rax

; 2945 :             return;

  00346	eb 2b		 jmp	 SHORT $LN1@s370_ecpsv
$LN23@s370_ecpsv:

; 2946 :         case 1: /* No-op */
; 2947 :             return;

  00348	eb 29		 jmp	 SHORT $LN1@s370_ecpsv
$LN24@s370_ecpsv:

; 2948 :         case 2: /* Done */
; 2949 :             CPASSIST_HIT(DISP2);

  0034a	48 8b 05 10 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+272
  00351	48 ff c0	 inc	 rax
  00354	48 89 05 10 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+272, rax

; 2950 :             RETURN_INTCHECK(regs);

  0035b	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00360	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00366	ba ff ff ff ff	 mov	 edx, -1
  0036b	48 8b c8	 mov	 rcx, rax
  0036e	e8 00 00 00 00	 call	 longjmp
$LN8@s370_ecpsv:
$LN1@s370_ecpsv:
$LN25@s370_ecpsv:

; 2951 :     }
; 2952 :     return;
; 2953 : }

  00373	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00377	c3		 ret	 0
s370_ecpsvm_disp2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
ccwaddr$ = 64
ccwctl$ = 68
effective_addr1$ = 72
temp$1 = 76
effective_addr2$ = 80
vcsw$ = 84
realct$ = 88
b1$ = 92
b2$ = 96
inst$ = 128
regs$ = 136
s370_ecpsvm_unxlate_ccw PROC

; 2895 : {

$LN37:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 2896 : VADR vcsw;
; 2897 : VADR ccwaddr;
; 2898 : U16  ccwctl;
; 2899 : int  realct;
; 2900 : 
; 2901 :     ECPSVM_PROLOG(UXCCW);

  0000e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  00016	48 83 c0 02	 add	 rax, 2
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 fetch_fw_noswap
  00022	8b c8		 mov	 ecx, eax
  00024	e8 00 00 00 00	 call	 _byteswap_ulong
  00029	89 44 24 4c	 mov	 DWORD PTR temp$1[rsp], eax
  0002d	8b 44 24 4c	 mov	 eax, DWORD PTR temp$1[rsp]
  00031	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00036	89 44 24 50	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0003a	8b 44 24 4c	 mov	 eax, DWORD PTR temp$1[rsp]
  0003e	c1 e8 0c	 shr	 eax, 12
  00041	83 e0 0f	 and	 eax, 15
  00044	89 44 24 60	 mov	 DWORD PTR b2$[rsp], eax
  00048	8b 44 24 4c	 mov	 eax, DWORD PTR temp$1[rsp]
  0004c	c1 e8 10	 shr	 eax, 16
  0004f	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00054	89 44 24 48	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00058	8b 44 24 4c	 mov	 eax, DWORD PTR temp$1[rsp]
  0005c	c1 e8 1c	 shr	 eax, 28
  0005f	83 e0 0f	 and	 eax, 15
  00062	89 44 24 5c	 mov	 DWORD PTR b1$[rsp], eax
  00066	83 7c 24 5c 00	 cmp	 DWORD PTR b1$[rsp], 0
  0006b	74 2d		 je	 SHORT $LN16@s370_ecpsv
  0006d	48 63 44 24 5c	 movsxd	 rax, DWORD PTR b1$[rsp]
  00072	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0007a	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00081	8b 4c 24 48	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00085	03 c8		 add	 ecx, eax
  00087	8b c1		 mov	 eax, ecx
  00089	89 44 24 48	 mov	 DWORD PTR effective_addr1$[rsp], eax
  0008d	8b 44 24 48	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00091	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00096	89 44 24 48	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN16@s370_ecpsv:
  0009a	83 7c 24 60 00	 cmp	 DWORD PTR b2$[rsp], 0
  0009f	74 2d		 je	 SHORT $LN17@s370_ecpsv
  000a1	48 63 44 24 60	 movsxd	 rax, DWORD PTR b2$[rsp]
  000a6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000ae	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000b5	8b 4c 24 50	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000b9	03 c8		 add	 ecx, eax
  000bb	8b c1		 mov	 eax, ecx
  000bd	89 44 24 50	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000c1	8b 44 24 50	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000c5	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000ca	89 44 24 50	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN17@s370_ecpsv:
$LN4@s370_ecpsv:
  000ce	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000d6	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000da	48 83 c0 06	 add	 rax, 6
  000de	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000e6	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000ea	33 c0		 xor	 eax, eax
  000ec	83 f8 06	 cmp	 eax, 6
  000ef	74 0f		 je	 SHORT $LN18@s370_ecpsv
  000f1	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000f9	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN18@s370_ecpsv:
  00100	33 c0		 xor	 eax, eax
  00102	85 c0		 test	 eax, eax
  00104	75 c8		 jne	 SHORT $LN4@s370_ecpsv
  00106	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0010e	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00112	83 e0 01	 and	 eax, 1
  00115	85 c0		 test	 eax, eax
  00117	74 1b		 je	 SHORT $LN19@s370_ecpsv
  00119	ba 02 00 00 00	 mov	 edx, 2
  0011e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00126	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0012e	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN19@s370_ecpsv:
$LN7@s370_ecpsv:
  00134	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0013c	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00142	d1 e8		 shr	 eax, 1
  00144	83 e0 01	 and	 eax, 1
  00147	85 c0		 test	 eax, eax
  00149	74 1b		 je	 SHORT $LN20@s370_ecpsv
  0014b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00153	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00159	ba fc ff ff ff	 mov	 edx, -4
  0015e	48 8b c8	 mov	 rcx, rax
  00161	e8 00 00 00 00	 call	 longjmp
$LN20@s370_ecpsv:
  00166	33 c0		 xor	 eax, eax
  00168	85 c0		 test	 eax, eax
  0016a	75 c8		 jne	 SHORT $LN7@s370_ecpsv
  0016c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00173	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00179	c1 e8 11	 shr	 eax, 17
  0017c	83 e0 01	 and	 eax, 1
  0017f	85 c0		 test	 eax, eax
  00181	75 75		 jne	 SHORT $LN21@s370_ecpsv
  00183	8b 05 b8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+440
  00189	c1 e8 02	 shr	 eax, 2
  0018c	83 e0 01	 and	 eax, 1
  0018f	85 c0		 test	 eax, eax
  00191	74 53		 je	 SHORT $LN22@s370_ecpsv
  00193	b9 01 00 00 00	 mov	 ecx, 1
  00198	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0019e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172669
  001a5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172670
  001b1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172671
  001bd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001c2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001c7	41 b9 03 00 00
	00		 mov	 r9d, 3
  001cd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172672
  001d4	ba 55 0b 00 00	 mov	 edx, 2901		; 00000b55H
  001d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172673
  001e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN22@s370_ecpsv:
  001e6	ba 01 00 00 00	 mov	 edx, 1
  001eb	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001f3	e8 00 00 00 00	 call	 s370_program_interrupt
$LN21@s370_ecpsv:
  001f8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00200	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00204	83 e0 01	 and	 eax, 1
  00207	85 c0		 test	 eax, eax
  00209	74 1b		 je	 SHORT $LN23@s370_ecpsv
  0020b	ba 02 00 00 00	 mov	 edx, 2
  00210	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00218	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00220	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN23@s370_ecpsv:
  00226	8b 05 b8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+440
  0022c	d1 e8		 shr	 eax, 1
  0022e	83 e0 01	 and	 eax, 1
  00231	85 c0		 test	 eax, eax
  00233	75 68		 jne	 SHORT $LN24@s370_ecpsv
  00235	8b 05 b8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+440
  0023b	c1 e8 02	 shr	 eax, 2
  0023e	83 e0 01	 and	 eax, 1
  00241	85 c0		 test	 eax, eax
  00243	74 53		 je	 SHORT $LN25@s370_ecpsv
  00245	b9 01 00 00 00	 mov	 ecx, 1
  0024a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00250	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172677
  00257	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0025c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172678
  00263	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00268	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172679
  0026f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00274	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00279	41 b9 03 00 00
	00		 mov	 r9d, 3
  0027f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172680
  00286	ba 55 0b 00 00	 mov	 edx, 2901		; 00000b55H
  0028b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172681
  00292	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN25@s370_ecpsv:
  00298	e9 2c 03 00 00	 jmp	 $LN1@s370_ecpsv
$LN24@s370_ecpsv:
  0029d	b8 08 00 00 00	 mov	 eax, 8
  002a2	48 6b c0 07	 imul	 rax, rax, 7
  002a6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002ae	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  002b5	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  002ba	85 c0		 test	 eax, eax
  002bc	75 05		 jne	 SHORT $LN26@s370_ecpsv
  002be	e9 06 03 00 00	 jmp	 $LN1@s370_ecpsv
$LN26@s370_ecpsv:
  002c3	48 8b 05 a8 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+424
  002ca	48 ff c0	 inc	 rax
  002cd	48 89 05 a8 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+424, rax
  002d4	8b 05 b8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+440
  002da	c1 e8 02	 shr	 eax, 2
  002dd	83 e0 01	 and	 eax, 1
  002e0	85 c0		 test	 eax, eax
  002e2	74 53		 je	 SHORT $LN27@s370_ecpsv
  002e4	b9 01 00 00 00	 mov	 ecx, 1
  002e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172684
  002f6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172685
  00302	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00307	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172686
  0030e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00313	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00318	41 b9 03 00 00
	00		 mov	 r9d, 3
  0031e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172687
  00325	ba 55 0b 00 00	 mov	 edx, 2901		; 00000b55H
  0032a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172688
  00331	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN27@s370_ecpsv:

; 2902 : 
; 2903 :     vcsw=EVM_L(effective_addr1);

  00337	8b 44 24 48	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0033b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00340	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00348	ba fe ff ff ff	 mov	 edx, -2
  0034d	8b c8		 mov	 ecx, eax
  0034f	e8 00 00 00 00	 call	 s370_vfetch4
  00354	89 44 24 54	 mov	 DWORD PTR vcsw$[rsp], eax

; 2904 :     ccwaddr=vcsw & 0x00FFFFFF;

  00358	8b 44 24 54	 mov	 eax, DWORD PTR vcsw$[rsp]
  0035c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00361	89 44 24 40	 mov	 DWORD PTR ccwaddr$[rsp], eax

; 2905 :     if(!ccwaddr)

  00365	83 7c 24 40 00	 cmp	 DWORD PTR ccwaddr$[rsp], 0
  0036a	0f 85 ba 00 00
	00		 jne	 $LN28@s370_ecpsv
$LN10@s370_ecpsv:

; 2906 :     {
; 2907 :         BR14;

  00370	b8 08 00 00 00	 mov	 eax, 8
  00375	48 6b c0 0e	 imul	 rax, rax, 14
  00379	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00381	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00388	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0038d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00395	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  0039b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003a3	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  003ab	74 6e		 je	 SHORT $LN29@s370_ecpsv
  003ad	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003b5	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  003bb	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  003c0	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003c8	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  003ce	75 38		 jne	 SHORT $LN30@s370_ecpsv
  003d0	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003d8	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  003de	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  003e3	8b c0		 mov	 eax, eax
  003e5	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003ed	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  003f4	48 0b c8	 or	 rcx, rax
  003f7	48 8b c1	 mov	 rax, rcx
  003fa	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00402	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00406	eb 13		 jmp	 SHORT $LN31@s370_ecpsv
$LN30@s370_ecpsv:
  00408	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00410	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN31@s370_ecpsv:
$LN29@s370_ecpsv:
  0041b	33 c0		 xor	 eax, eax
  0041d	85 c0		 test	 eax, eax
  0041f	0f 85 4b ff ff
	ff		 jne	 $LN10@s370_ecpsv

; 2908 :         return;         /* all done if VDEVCSW contains 0 */

  00425	e9 9f 01 00 00	 jmp	 $LN1@s370_ecpsv
$LN28@s370_ecpsv:

; 2909 :     }
; 2910 :     realct=0;

  0042a	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR realct$[rsp], 0

; 2911 :     ccwaddr-=8;

  00432	8b 44 24 40	 mov	 eax, DWORD PTR ccwaddr$[rsp]
  00436	83 e8 08	 sub	 eax, 8
  00439	89 44 24 40	 mov	 DWORD PTR ccwaddr$[rsp], eax

; 2912 :     ccwctl=1;

  0043d	b8 01 00 00 00	 mov	 eax, 1
  00442	66 89 44 24 44	 mov	 WORD PTR ccwctl$[rsp], ax
$LN11@s370_ecpsv:

; 2913 :     while (ccwctl != 0xFFFF)

  00447	0f b7 44 24 44	 movzx	 eax, WORD PTR ccwctl$[rsp]
  0044c	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  00451	74 49		 je	 SHORT $LN12@s370_ecpsv

; 2914 :     {
; 2915 :         ccwctl=EVM_LH(ccwaddr+4);

  00453	8b 44 24 40	 mov	 eax, DWORD PTR ccwaddr$[rsp]
  00457	83 c0 04	 add	 eax, 4
  0045a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0045f	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00467	ba fe ff ff ff	 mov	 edx, -2
  0046c	8b c8		 mov	 ecx, eax
  0046e	e8 00 00 00 00	 call	 s370_vfetch2
  00473	66 89 44 24 44	 mov	 WORD PTR ccwctl$[rsp], ax

; 2916 :         if(!(ccwctl & RCWGEN))          /* RCWGEN is set if CP generated the CCW */

  00478	0f b7 44 24 44	 movzx	 eax, WORD PTR ccwctl$[rsp]
  0047d	83 e0 40	 and	 eax, 64			; 00000040H
  00480	85 c0		 test	 eax, eax
  00482	75 0b		 jne	 SHORT $LN32@s370_ecpsv

; 2917 :         {
; 2918 :             realct+=8;                  /* count length of real CCWs that are not CP generated */

  00484	8b 44 24 58	 mov	 eax, DWORD PTR realct$[rsp]
  00488	83 c0 08	 add	 eax, 8
  0048b	89 44 24 58	 mov	 DWORD PTR realct$[rsp], eax
$LN32@s370_ecpsv:

; 2919 :         }
; 2920 :         ccwaddr-=8;                     /* back up one CCW, or into RCWBLOK header area */

  0048f	8b 44 24 40	 mov	 eax, DWORD PTR ccwaddr$[rsp]
  00493	83 e8 08	 sub	 eax, 8
  00496	89 44 24 40	 mov	 DWORD PTR ccwaddr$[rsp], eax

; 2921 :     }

  0049a	eb ab		 jmp	 SHORT $LN11@s370_ecpsv
$LN12@s370_ecpsv:

; 2922 : 
; 2923 :     /* ccwaddr now points at RCWTASK block */
; 2924 :     ccwaddr=EVM_L(ccwaddr+4);           /* Get RCWVCAW (vaddr of virtual CCW string) */

  0049c	8b 44 24 40	 mov	 eax, DWORD PTR ccwaddr$[rsp]
  004a0	83 c0 04	 add	 eax, 4
  004a3	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  004a8	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  004b0	ba fe ff ff ff	 mov	 edx, -2
  004b5	8b c8		 mov	 ecx, eax
  004b7	e8 00 00 00 00	 call	 s370_vfetch4
  004bc	89 44 24 40	 mov	 DWORD PTR ccwaddr$[rsp], eax

; 2925 :     ccwaddr+=realct;                    /* Compute ending vaddr to be placed in virtual CSW */

  004c0	8b 44 24 58	 mov	 eax, DWORD PTR realct$[rsp]
  004c4	8b 4c 24 40	 mov	 ecx, DWORD PTR ccwaddr$[rsp]
  004c8	03 c8		 add	 ecx, eax
  004ca	8b c1		 mov	 eax, ecx
  004cc	89 44 24 40	 mov	 DWORD PTR ccwaddr$[rsp], eax

; 2926 :     vcsw=(vcsw & 0xFF000000) | ccwaddr;

  004d0	8b 44 24 54	 mov	 eax, DWORD PTR vcsw$[rsp]
  004d4	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  004d9	0b 44 24 40	 or	 eax, DWORD PTR ccwaddr$[rsp]
  004dd	89 44 24 54	 mov	 DWORD PTR vcsw$[rsp], eax

; 2927 :     EVM_ST(vcsw,effective_addr1);

  004e1	8b 44 24 48	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  004e5	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  004ea	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  004f2	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  004f8	8b d0		 mov	 edx, eax
  004fa	8b 4c 24 54	 mov	 ecx, DWORD PTR vcsw$[rsp]
  004fe	e8 00 00 00 00	 call	 s370_vstore4
$LN15@s370_ecpsv:

; 2928 :     BR14;

  00503	b8 08 00 00 00	 mov	 eax, 8
  00508	48 6b c0 0e	 imul	 rax, rax, 14
  0050c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00514	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0051b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00520	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00528	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  0052e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00536	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  0053e	74 6e		 je	 SHORT $LN33@s370_ecpsv
  00540	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00548	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0054e	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00553	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0055b	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00561	75 38		 jne	 SHORT $LN34@s370_ecpsv
  00563	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0056b	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00571	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00576	8b c0		 mov	 eax, eax
  00578	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00580	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00587	48 0b c8	 or	 rcx, rax
  0058a	48 8b c1	 mov	 rax, rcx
  0058d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00595	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00599	eb 13		 jmp	 SHORT $LN35@s370_ecpsv
$LN34@s370_ecpsv:
  0059b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005a3	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN35@s370_ecpsv:
$LN33@s370_ecpsv:
  005ae	33 c0		 xor	 eax, eax
  005b0	85 c0		 test	 eax, eax
  005b2	0f 85 4b ff ff
	ff		 jne	 $LN15@s370_ecpsv

; 2929 :     CPASSIST_HIT(UXCCW);

  005b8	48 8b 05 b0 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+432
  005bf	48 ff c0	 inc	 rax
  005c2	48 89 05 b0 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+432, rax
$LN1@s370_ecpsv:
$LN36@s370_ecpsv:

; 2930 :     return;
; 2931 : }

  005c9	48 83 c4 78	 add	 rsp, 120		; 00000078H
  005cd	c3		 ret	 0
s370_ecpsvm_unxlate_ccw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
B_RCWCTL$ = 64
el$ = 68
B_VMOSTAT$ = 72
B_VDEVTYPC$ = 73
savearea$ = 76
ccwop$ = 80
vdev$ = 84
effective_addr1$ = 88
effective_addr2$ = 92
temp$1 = 96
rcw$ = 100
dl$ = 104
rc$ = 108
vstart_page$ = 112
cortable$ = 116
ccwcount$ = 120
b1$ = 124
b2$ = 128
vmb$ = 132
vlast_page$ = 136
tv518 = 140
tv726 = 144
iob$ = 148
rcaw$ = 152
tv904 = 156
raddr$ = 160
inst$ = 192
regs$ = 200
s370_ecpsvm_comm_ccwproc PROC

; 2655 : {

$LN162:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 2656 : VADR dl;
; 2657 : VADR el;
; 2658 : VADR vlast_page;
; 2659 : VADR vstart_page;
; 2660 : VADR cortable;
; 2661 : VADR savearea;
; 2662 : VADR vmb;
; 2663 : VADR vdev;
; 2664 : VADR rcw;
; 2665 : VADR iob;
; 2666 : VADR rcaw;
; 2667 : RADR raddr;
; 2668 : U32  ccwcount;
; 2669 : int  rc;
; 2670 : BYTE ccwop;
; 2671 : BYTE B_RCWCTL;
; 2672 : BYTE B_VMOSTAT;
; 2673 : BYTE B_VDEVTYPC;
; 2674 : 
; 2675 :     ECPSVM_PROLOG(CCWGN);

  00011	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  00019	48 83 c0 02	 add	 rax, 2
  0001d	48 8b c8	 mov	 rcx, rax
  00020	e8 00 00 00 00	 call	 fetch_fw_noswap
  00025	8b c8		 mov	 ecx, eax
  00027	e8 00 00 00 00	 call	 _byteswap_ulong
  0002c	89 44 24 60	 mov	 DWORD PTR temp$1[rsp], eax
  00030	8b 44 24 60	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00039	89 44 24 5c	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0003d	8b 44 24 60	 mov	 eax, DWORD PTR temp$1[rsp]
  00041	c1 e8 0c	 shr	 eax, 12
  00044	83 e0 0f	 and	 eax, 15
  00047	89 84 24 80 00
	00 00		 mov	 DWORD PTR b2$[rsp], eax
  0004e	8b 44 24 60	 mov	 eax, DWORD PTR temp$1[rsp]
  00052	c1 e8 10	 shr	 eax, 16
  00055	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0005a	89 44 24 58	 mov	 DWORD PTR effective_addr1$[rsp], eax
  0005e	8b 44 24 60	 mov	 eax, DWORD PTR temp$1[rsp]
  00062	c1 e8 1c	 shr	 eax, 28
  00065	83 e0 0f	 and	 eax, 15
  00068	89 44 24 7c	 mov	 DWORD PTR b1$[rsp], eax
  0006c	83 7c 24 7c 00	 cmp	 DWORD PTR b1$[rsp], 0
  00071	74 2d		 je	 SHORT $LN59@s370_ecpsv
  00073	48 63 44 24 7c	 movsxd	 rax, DWORD PTR b1$[rsp]
  00078	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00080	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00087	8b 4c 24 58	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0008b	03 c8		 add	 ecx, eax
  0008d	8b c1		 mov	 eax, ecx
  0008f	89 44 24 58	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00093	8b 44 24 58	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00097	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0009c	89 44 24 58	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN59@s370_ecpsv:
  000a0	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR b2$[rsp], 0
  000a8	74 30		 je	 SHORT $LN60@s370_ecpsv
  000aa	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR b2$[rsp]
  000b2	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000ba	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000c1	8b 4c 24 5c	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000c5	03 c8		 add	 ecx, eax
  000c7	8b c1		 mov	 eax, ecx
  000c9	89 44 24 5c	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000cd	8b 44 24 5c	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000d1	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000d6	89 44 24 5c	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN60@s370_ecpsv:
$LN4@s370_ecpsv:
  000da	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000e2	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000e6	48 83 c0 06	 add	 rax, 6
  000ea	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000f2	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000f6	33 c0		 xor	 eax, eax
  000f8	83 f8 06	 cmp	 eax, 6
  000fb	74 0f		 je	 SHORT $LN61@s370_ecpsv
  000fd	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00105	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN61@s370_ecpsv:
  0010c	33 c0		 xor	 eax, eax
  0010e	85 c0		 test	 eax, eax
  00110	75 c8		 jne	 SHORT $LN4@s370_ecpsv
  00112	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0011a	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  0011e	83 e0 01	 and	 eax, 1
  00121	85 c0		 test	 eax, eax
  00123	74 1b		 je	 SHORT $LN62@s370_ecpsv
  00125	ba 02 00 00 00	 mov	 edx, 2
  0012a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00132	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0013a	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN62@s370_ecpsv:
$LN7@s370_ecpsv:
  00140	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00148	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  0014e	d1 e8		 shr	 eax, 1
  00150	83 e0 01	 and	 eax, 1
  00153	85 c0		 test	 eax, eax
  00155	74 1b		 je	 SHORT $LN63@s370_ecpsv
  00157	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0015f	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00165	ba fc ff ff ff	 mov	 edx, -4
  0016a	48 8b c8	 mov	 rcx, rax
  0016d	e8 00 00 00 00	 call	 longjmp
$LN63@s370_ecpsv:
  00172	33 c0		 xor	 eax, eax
  00174	85 c0		 test	 eax, eax
  00176	75 c8		 jne	 SHORT $LN7@s370_ecpsv
  00178	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0017f	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00185	c1 e8 11	 shr	 eax, 17
  00188	83 e0 01	 and	 eax, 1
  0018b	85 c0		 test	 eax, eax
  0018d	75 75		 jne	 SHORT $LN64@s370_ecpsv
  0018f	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  00195	c1 e8 02	 shr	 eax, 2
  00198	83 e0 01	 and	 eax, 1
  0019b	85 c0		 test	 eax, eax
  0019d	74 53		 je	 SHORT $LN65@s370_ecpsv
  0019f	b9 01 00 00 00	 mov	 ecx, 1
  001a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172427
  001b1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172428
  001bd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172429
  001c9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ce	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001d3	41 b9 03 00 00
	00		 mov	 r9d, 3
  001d9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172430
  001e0	ba 73 0a 00 00	 mov	 edx, 2675		; 00000a73H
  001e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172431
  001ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN65@s370_ecpsv:
  001f2	ba 01 00 00 00	 mov	 edx, 1
  001f7	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001ff	e8 00 00 00 00	 call	 s370_program_interrupt
$LN64@s370_ecpsv:
  00204	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0020c	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00210	83 e0 01	 and	 eax, 1
  00213	85 c0		 test	 eax, eax
  00215	74 1b		 je	 SHORT $LN66@s370_ecpsv
  00217	ba 02 00 00 00	 mov	 edx, 2
  0021c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00224	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0022c	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN66@s370_ecpsv:
  00232	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  00238	d1 e8		 shr	 eax, 1
  0023a	83 e0 01	 and	 eax, 1
  0023d	85 c0		 test	 eax, eax
  0023f	75 68		 jne	 SHORT $LN67@s370_ecpsv
  00241	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  00247	c1 e8 02	 shr	 eax, 2
  0024a	83 e0 01	 and	 eax, 1
  0024d	85 c0		 test	 eax, eax
  0024f	74 53		 je	 SHORT $LN68@s370_ecpsv
  00251	b9 01 00 00 00	 mov	 ecx, 1
  00256	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0025c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172435
  00263	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00268	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172436
  0026f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00274	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172437
  0027b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00280	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00285	41 b9 03 00 00
	00		 mov	 r9d, 3
  0028b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172438
  00292	ba 73 0a 00 00	 mov	 edx, 2675		; 00000a73H
  00297	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172439
  0029e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN68@s370_ecpsv:
  002a4	e9 96 1d 00 00	 jmp	 $LN1@s370_ecpsv
$LN67@s370_ecpsv:
  002a9	b8 08 00 00 00	 mov	 eax, 8
  002ae	48 6b c0 07	 imul	 rax, rax, 7
  002b2	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002ba	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  002c1	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  002c6	85 c0		 test	 eax, eax
  002c8	75 05		 jne	 SHORT $LN69@s370_ecpsv
  002ca	e9 70 1d 00 00	 jmp	 $LN1@s370_ecpsv
$LN69@s370_ecpsv:
  002cf	48 8b 05 88 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+392
  002d6	48 ff c0	 inc	 rax
  002d9	48 89 05 88 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+392, rax
  002e0	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  002e6	c1 e8 02	 shr	 eax, 2
  002e9	83 e0 01	 and	 eax, 1
  002ec	85 c0		 test	 eax, eax
  002ee	74 53		 je	 SHORT $LN70@s370_ecpsv
  002f0	b9 01 00 00 00	 mov	 ecx, 1
  002f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172442
  00302	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00307	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172443
  0030e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00313	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172444
  0031a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0031f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00324	41 b9 03 00 00
	00		 mov	 r9d, 3
  0032a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172445
  00331	ba 73 0a 00 00	 mov	 edx, 2675		; 00000a73H
  00336	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172446
  0033d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN70@s370_ecpsv:

; 2676 :     dl=effective_addr1;

  00343	8b 44 24 58	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00347	89 44 24 68	 mov	 DWORD PTR dl$[rsp], eax

; 2677 :     el=effective_addr2;

  0034b	8b 44 24 5c	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  0034f	89 44 24 44	 mov	 DWORD PTR el$[rsp], eax

; 2678 :     savearea=regs->GR_L(13);

  00353	b8 08 00 00 00	 mov	 eax, 8
  00358	48 6b c0 0d	 imul	 rax, rax, 13
  0035c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00364	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0036b	89 44 24 4c	 mov	 DWORD PTR savearea$[rsp], eax

; 2679 :     vmb=regs->GR_L(11);

  0036f	b8 08 00 00 00	 mov	 eax, 8
  00374	48 6b c0 0b	 imul	 rax, rax, 11
  00378	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00380	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00387	89 84 24 84 00
	00 00		 mov	 DWORD PTR vmb$[rsp], eax

; 2680 : 
; 2681 :     if(EVM_IC(regs->GR_L(6)+RCWFLAG) & IDA)

  0038e	b8 08 00 00 00	 mov	 eax, 8
  00393	48 6b c0 06	 imul	 rax, rax, 6
  00397	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0039f	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  003a6	83 c0 04	 add	 eax, 4
  003a9	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  003ae	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  003b6	ba fe ff ff ff	 mov	 edx, -2
  003bb	8b c8		 mov	 ecx, eax
  003bd	e8 00 00 00 00	 call	 s370_vfetchb
  003c2	0f b6 c0	 movzx	 eax, al
  003c5	83 e0 04	 and	 eax, 4
  003c8	85 c0		 test	 eax, eax
  003ca	0f 84 22 01 00
	00		 je	 $LN71@s370_ecpsv

; 2682 :     {
; 2683 :         DEBUG_CPASSISTX(CCWGN,WRMSG(HHC90000, "D", "CCWGN - Exit DWDIDAL"));

  003d0	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  003d6	c1 e8 02	 shr	 eax, 2
  003d9	83 e0 01	 and	 eax, 1
  003dc	85 c0		 test	 eax, eax
  003de	74 53		 je	 SHORT $LN72@s370_ecpsv
  003e0	b9 01 00 00 00	 mov	 ecx, 1
  003e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172449
  003f2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172450
  003fe	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00403	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172451
  0040a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0040f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00414	41 b9 03 00 00
	00		 mov	 r9d, 3
  0041a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172452
  00421	ba 7b 0a 00 00	 mov	 edx, 2683		; 00000a7bH
  00426	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172453
  0042d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN72@s370_ecpsv:
$LN10@s370_ecpsv:

; 2684 :         SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+0));           /* IDA bit is set in CCW, exit to FWDIDAL */

  00433	8b 44 24 44	 mov	 eax, DWORD PTR el$[rsp]
  00437	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0043c	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00444	ba fe ff ff ff	 mov	 edx, -2
  00449	8b c8		 mov	 ecx, eax
  0044b	e8 00 00 00 00	 call	 s370_vfetch4
  00450	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00455	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0045d	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00463	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0046b	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00473	74 6e		 je	 SHORT $LN73@s370_ecpsv
  00475	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0047d	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00483	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00488	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00490	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00496	75 38		 jne	 SHORT $LN74@s370_ecpsv
  00498	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  004a0	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  004a6	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  004ab	8b c0		 mov	 eax, eax
  004ad	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004b5	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  004bc	48 0b c8	 or	 rcx, rax
  004bf	48 8b c1	 mov	 rax, rcx
  004c2	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004ca	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  004ce	eb 13		 jmp	 SHORT $LN75@s370_ecpsv
$LN74@s370_ecpsv:
  004d0	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  004d8	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN75@s370_ecpsv:
$LN73@s370_ecpsv:
  004e3	33 c0		 xor	 eax, eax
  004e5	85 c0		 test	 eax, eax
  004e7	0f 85 46 ff ff
	ff		 jne	 $LN10@s370_ecpsv

; 2685 :         return;

  004ed	e9 4d 1b 00 00	 jmp	 $LN1@s370_ecpsv
$LN71@s370_ecpsv:

; 2686 :     }
; 2687 : 
; 2688 :     vlast_page=(regs->GR_L(1)+regs->GR_L(4)) & 0x00FFF000;

  004f2	b8 08 00 00 00	 mov	 eax, 8
  004f7	48 6b c0 01	 imul	 rax, rax, 1
  004fb	b9 08 00 00 00	 mov	 ecx, 8
  00500	48 6b c9 04	 imul	 rcx, rcx, 4
  00504	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0050c	8b 84 02 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax+640]
  00513	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0051b	03 84 0a 80 02
	00 00		 add	 eax, DWORD PTR [rdx+rcx+640]
  00522	25 00 f0 ff 00	 and	 eax, 16773120		; 00fff000H
  00527	89 84 24 88 00
	00 00		 mov	 DWORD PTR vlast_page$[rsp], eax

; 2689 :     vstart_page=regs->GR_L(1) & 0x00FFF000;

  0052e	b8 08 00 00 00	 mov	 eax, 8
  00533	48 6b c0 01	 imul	 rax, rax, 1
  00537	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0053f	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00546	25 00 f0 ff 00	 and	 eax, 16773120		; 00fff000H
  0054b	89 44 24 70	 mov	 DWORD PTR vstart_page$[rsp], eax

; 2690 :     if(vstart_page != vlast_page)

  0054f	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR vlast_page$[rsp]
  00556	39 44 24 70	 cmp	 DWORD PTR vstart_page$[rsp], eax
  0055a	0f 84 25 01 00
	00		 je	 $LN76@s370_ecpsv

; 2691 :     {
; 2692 :         DEBUG_CPASSISTX(CCWGN,WRMSG(HHC90000, "D", "CCWGN - Exit CCWMANYF"));

  00560	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  00566	c1 e8 02	 shr	 eax, 2
  00569	83 e0 01	 and	 eax, 1
  0056c	85 c0		 test	 eax, eax
  0056e	74 53		 je	 SHORT $LN77@s370_ecpsv
  00570	b9 01 00 00 00	 mov	 ecx, 1
  00575	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0057b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172459
  00582	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00587	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172460
  0058e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00593	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172461
  0059a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0059f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005a4	41 b9 03 00 00
	00		 mov	 r9d, 3
  005aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172462
  005b1	ba 84 0a 00 00	 mov	 edx, 2692		; 00000a84H
  005b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172463
  005bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN77@s370_ecpsv:
$LN13@s370_ecpsv:

; 2693 :         SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+4));           /* CCW data area crosses page boundary, exit CCWMANYF */

  005c3	8b 44 24 44	 mov	 eax, DWORD PTR el$[rsp]
  005c7	83 c0 04	 add	 eax, 4
  005ca	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  005cf	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  005d7	ba fe ff ff ff	 mov	 edx, -2
  005dc	8b c8		 mov	 ecx, eax
  005de	e8 00 00 00 00	 call	 s370_vfetch4
  005e3	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  005e8	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005f0	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  005f6	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005fe	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00606	74 6e		 je	 SHORT $LN78@s370_ecpsv
  00608	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00610	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00616	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  0061b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00623	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00629	75 38		 jne	 SHORT $LN79@s370_ecpsv
  0062b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00633	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00639	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0063e	8b c0		 mov	 eax, eax
  00640	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00648	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  0064f	48 0b c8	 or	 rcx, rax
  00652	48 8b c1	 mov	 rax, rcx
  00655	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0065d	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00661	eb 13		 jmp	 SHORT $LN80@s370_ecpsv
$LN79@s370_ecpsv:
  00663	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0066b	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN80@s370_ecpsv:
$LN78@s370_ecpsv:
  00676	33 c0		 xor	 eax, eax
  00678	85 c0		 test	 eax, eax
  0067a	0f 85 43 ff ff
	ff		 jne	 $LN13@s370_ecpsv

; 2694 :         return;

  00680	e9 ba 19 00 00	 jmp	 $LN1@s370_ecpsv
$LN76@s370_ecpsv:

; 2695 :     }
; 2696 : 
; 2697 :     /* Check if the CCW data area page is paged-in and accessible.  If not,
; 2698 :        bring in the page where the CCW data area is located and lock it.
; 2699 :        If this function cannot be accomplished give it back to CP without
; 2700 :        changing the PSW IA.  This will "no-op" the assist and CP will redo CCWGENRL.
; 2701 :     */
; 2702 : 
; 2703 :     /* At CCWNXT9 */
; 2704 :     rc=ecpsvm_int_lra(regs,regs->GR_L(1),&raddr);

  00685	b8 08 00 00 00	 mov	 eax, 8
  0068a	48 6b c0 01	 imul	 rax, rax, 1
  0068e	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR raddr$[rsp]
  00696	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0069e	8b 94 01 80 02
	00 00		 mov	 edx, DWORD PTR [rcx+rax+640]
  006a5	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  006ad	e8 00 00 00 00	 call	 ecpsvm_int_lra
  006b2	89 44 24 6c	 mov	 DWORD PTR rc$[rsp], eax

; 2705 :     if(rc)

  006b6	83 7c 24 6c 00	 cmp	 DWORD PTR rc$[rsp], 0
  006bb	0f 84 a5 00 00
	00		 je	 $LN81@s370_ecpsv

; 2706 :     {
; 2707 :         rc=ecpsvm_tranbrng(regs,dl+0,regs->GR_L(1),&raddr);

  006c1	b8 08 00 00 00	 mov	 eax, 8
  006c6	48 6b c0 01	 imul	 rax, rax, 1
  006ca	4c 8d 8c 24 a0
	00 00 00	 lea	 r9, QWORD PTR raddr$[rsp]
  006d2	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  006da	44 8b 84 01 80
	02 00 00	 mov	 r8d, DWORD PTR [rcx+rax+640]
  006e2	8b 54 24 68	 mov	 edx, DWORD PTR dl$[rsp]
  006e6	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  006ee	e8 00 00 00 00	 call	 ecpsvm_tranbrng
  006f3	89 44 24 6c	 mov	 DWORD PTR rc$[rsp], eax

; 2708 :         if(rc)

  006f7	83 7c 24 6c 00	 cmp	 DWORD PTR rc$[rsp], 0
  006fc	74 68		 je	 SHORT $LN82@s370_ecpsv

; 2709 :         {
; 2710 :             DEBUG_CPASSISTX(CCWGN,WRMSG(HHC90000, "D", "CCWGN - Cant bring in the page; back to CP"));

  006fe	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  00704	c1 e8 02	 shr	 eax, 2
  00707	83 e0 01	 and	 eax, 1
  0070a	85 c0		 test	 eax, eax
  0070c	74 53		 je	 SHORT $LN83@s370_ecpsv
  0070e	b9 01 00 00 00	 mov	 ecx, 1
  00713	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00719	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172470
  00720	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00725	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172471
  0072c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00731	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172472
  00738	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0073d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00742	41 b9 03 00 00
	00		 mov	 r9d, 3
  00748	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172473
  0074f	ba 96 0a 00 00	 mov	 edx, 2710		; 00000a96H
  00754	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172474
  0075b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN83@s370_ecpsv:

; 2711 :             return;                                /* Cant bring in the page; give it back to CP */

  00761	e9 d9 18 00 00	 jmp	 $LN1@s370_ecpsv
$LN82@s370_ecpsv:
$LN81@s370_ecpsv:

; 2712 :         }
; 2713 :     }
; 2714 :     ecpsvm_lockpage1(regs,dl+0,raddr);

  00766	8b 44 24 68	 mov	 eax, DWORD PTR dl$[rsp]
  0076a	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR raddr$[rsp]
  00772	8b d0		 mov	 edx, eax
  00774	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0077c	e8 00 00 00 00	 call	 ecpsvm_lockpage1

; 2715 :     regs->GR_L(2)=raddr;

  00781	b8 08 00 00 00	 mov	 eax, 8
  00786	48 6b c0 02	 imul	 rax, rax, 2
  0078a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00792	8b 94 24 a0 00
	00 00		 mov	 edx, DWORD PTR raddr$[rsp]
  00799	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 2716 : 
; 2717 :     /* Plug the real data address into the real CCW;
; 2718 :        Keep local copy of RCWCTL and indicate page is to be unlocked later.
; 2719 :     */
; 2720 : 
; 2721 :     /* At CCWNXT9B */
; 2722 :     ccwop=EVM_IC(regs->GR_L(6));

  007a0	b8 08 00 00 00	 mov	 eax, 8
  007a5	48 6b c0 06	 imul	 rax, rax, 6
  007a9	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  007b1	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  007b8	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  007bd	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  007c5	ba fe ff ff ff	 mov	 edx, -2
  007ca	8b c8		 mov	 ecx, eax
  007cc	e8 00 00 00 00	 call	 s370_vfetchb
  007d1	88 44 24 50	 mov	 BYTE PTR ccwop$[rsp], al

; 2723 :     EVM_ST((ccwop << 24) | regs->GR_L(2),regs->GR_L(6));

  007d5	b8 08 00 00 00	 mov	 eax, 8
  007da	48 6b c0 06	 imul	 rax, rax, 6
  007de	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  007e6	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  007ed	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  007f2	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR ccwop$[rsp]
  007f7	c1 e1 18	 shl	 ecx, 24
  007fa	ba 08 00 00 00	 mov	 edx, 8
  007ff	48 6b d2 02	 imul	 rdx, rdx, 2
  00803	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0080b	41 0b 8c 10 80
	02 00 00	 or	 ecx, DWORD PTR [r8+rdx+640]
  00813	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0081b	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00821	8b d0		 mov	 edx, eax
  00823	e8 00 00 00 00	 call	 s370_vstore4

; 2724 :     B_RCWCTL=EVM_IC(regs->GR_L(6)+RCWCTL) | RCWIO;

  00828	b8 08 00 00 00	 mov	 eax, 8
  0082d	48 6b c0 06	 imul	 rax, rax, 6
  00831	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00839	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00840	83 c0 05	 add	 eax, 5
  00843	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00848	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00850	ba fe ff ff ff	 mov	 edx, -2
  00855	8b c8		 mov	 ecx, eax
  00857	e8 00 00 00 00	 call	 s370_vfetchb
  0085c	0f b6 c0	 movzx	 eax, al
  0085f	0f ba e8 07	 bts	 eax, 7
  00863	88 44 24 40	 mov	 BYTE PTR B_RCWCTL$[rsp], al

; 2725 :     EVM_STC(B_RCWCTL,regs->GR_L(6)+RCWCTL);

  00867	b8 08 00 00 00	 mov	 eax, 8
  0086c	48 6b c0 06	 imul	 rax, rax, 6
  00870	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00878	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0087f	83 c0 05	 add	 eax, 5
  00882	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00887	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0088f	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00895	8b d0		 mov	 edx, eax
  00897	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR B_RCWCTL$[rsp]
  0089c	e8 00 00 00 00	 call	 s370_vstoreb

; 2726 : 
; 2727 :     /* User running a saved system?  Check if CCW data is with a shared page */
; 2728 :     /* At CCWCHKSH */
; 2729 :     B_VMOSTAT=EVM_IC(vmb+VMOSTAT);

  008a1	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR vmb$[rsp]
  008a8	83 c0 5a	 add	 eax, 90			; 0000005aH
  008ab	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  008b0	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  008b8	ba fe ff ff ff	 mov	 edx, -2
  008bd	8b c8		 mov	 ecx, eax
  008bf	e8 00 00 00 00	 call	 s370_vfetchb
  008c4	88 44 24 48	 mov	 BYTE PTR B_VMOSTAT$[rsp], al

; 2730 :     if(B_VMOSTAT & VMSHR)

  008c8	0f b6 44 24 48	 movzx	 eax, BYTE PTR B_VMOSTAT$[rsp]
  008cd	83 e0 40	 and	 eax, 64			; 00000040H
  008d0	85 c0		 test	 eax, eax
  008d2	0f 84 a3 01 00
	00		 je	 $LN84@s370_ecpsv

; 2731 :     {
; 2732 :         vstart_page = regs->GR_L(2) & 0x00FFF000;

  008d8	b8 08 00 00 00	 mov	 eax, 8
  008dd	48 6b c0 02	 imul	 rax, rax, 2
  008e1	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  008e9	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  008f0	25 00 f0 ff 00	 and	 eax, 16773120		; 00fff000H
  008f5	89 44 24 70	 mov	 DWORD PTR vstart_page$[rsp], eax

; 2733 :         cortable=EVM_L(dl+0);

  008f9	8b 44 24 68	 mov	 eax, DWORD PTR dl$[rsp]
  008fd	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00902	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0090a	ba fe ff ff ff	 mov	 edx, -2
  0090f	8b c8		 mov	 ecx, eax
  00911	e8 00 00 00 00	 call	 s370_vfetch4
  00916	89 44 24 74	 mov	 DWORD PTR cortable$[rsp], eax

; 2734 :         cortable+=vstart_page >> 8;

  0091a	8b 44 24 70	 mov	 eax, DWORD PTR vstart_page$[rsp]
  0091e	c1 e8 08	 shr	 eax, 8
  00921	8b 4c 24 74	 mov	 ecx, DWORD PTR cortable$[rsp]
  00925	03 c8		 add	 ecx, eax
  00927	8b c1		 mov	 eax, ecx
  00929	89 44 24 74	 mov	 DWORD PTR cortable$[rsp], eax

; 2735 :         if(EVM_IC(cortable+CORFLAG) & CORSHARE)

  0092d	8b 44 24 74	 mov	 eax, DWORD PTR cortable$[rsp]
  00931	83 c0 08	 add	 eax, 8
  00934	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00939	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00941	ba fe ff ff ff	 mov	 edx, -2
  00946	8b c8		 mov	 ecx, eax
  00948	e8 00 00 00 00	 call	 s370_vfetchb
  0094d	0f b6 c0	 movzx	 eax, al
  00950	83 e0 08	 and	 eax, 8
  00953	85 c0		 test	 eax, eax
  00955	0f 84 20 01 00
	00		 je	 $LN85@s370_ecpsv

; 2736 :         {
; 2737 :             DEBUG_CPASSISTX(CCWGN,WRMSG(HHC90000, "D", "CCWGN - Exit SHRDPAGE"));

  0095b	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  00961	c1 e8 02	 shr	 eax, 2
  00964	83 e0 01	 and	 eax, 1
  00967	85 c0		 test	 eax, eax
  00969	74 53		 je	 SHORT $LN86@s370_ecpsv
  0096b	b9 01 00 00 00	 mov	 ecx, 1
  00970	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00976	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172478
  0097d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00982	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172479
  00989	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0098e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172480
  00995	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0099a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0099f	41 b9 03 00 00
	00		 mov	 r9d, 3
  009a5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172481
  009ac	ba b1 0a 00 00	 mov	 edx, 2737		; 00000ab1H
  009b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172482
  009b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN86@s370_ecpsv:
$LN16@s370_ecpsv:

; 2738 :             SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+12));      /* exit; CCW data area is in shared page  (SHRDPAGE) */

  009be	8b 44 24 44	 mov	 eax, DWORD PTR el$[rsp]
  009c2	83 c0 0c	 add	 eax, 12
  009c5	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  009ca	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  009d2	ba fe ff ff ff	 mov	 edx, -2
  009d7	8b c8		 mov	 ecx, eax
  009d9	e8 00 00 00 00	 call	 s370_vfetch4
  009de	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  009e3	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  009eb	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  009f1	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  009f9	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00a01	74 6e		 je	 SHORT $LN87@s370_ecpsv
  00a03	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a0b	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00a11	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00a16	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a1e	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00a24	75 38		 jne	 SHORT $LN88@s370_ecpsv
  00a26	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a2e	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00a34	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00a39	8b c0		 mov	 eax, eax
  00a3b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a43	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00a4a	48 0b c8	 or	 rcx, rax
  00a4d	48 8b c1	 mov	 rax, rcx
  00a50	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a58	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00a5c	eb 13		 jmp	 SHORT $LN89@s370_ecpsv
$LN88@s370_ecpsv:
  00a5e	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a66	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN89@s370_ecpsv:
$LN87@s370_ecpsv:
  00a71	33 c0		 xor	 eax, eax
  00a73	85 c0		 test	 eax, eax
  00a75	0f 85 43 ff ff
	ff		 jne	 $LN16@s370_ecpsv
$LN85@s370_ecpsv:
$LN84@s370_ecpsv:

; 2739 :         }
; 2740 :     }
; 2741 : 
; 2742 :     /* At CCWNXT11 */
; 2743 :     if(B_RCWCTL & RCWSHR)

  00a7b	0f b6 44 24 40	 movzx	 eax, BYTE PTR B_RCWCTL$[rsp]
  00a80	83 e0 01	 and	 eax, 1
  00a83	85 c0		 test	 eax, eax
  00a85	74 47		 je	 SHORT $LN90@s370_ecpsv

; 2744 :     {
; 2745 :         B_RCWCTL&=~RCWIO;

  00a87	0f b6 44 24 40	 movzx	 eax, BYTE PTR B_RCWCTL$[rsp]
  00a8c	0f ba f0 07	 btr	 eax, 7
  00a90	88 44 24 40	 mov	 BYTE PTR B_RCWCTL$[rsp], al

; 2746 :         EVM_STC(B_RCWCTL,regs->GR_L(6)+RCWCTL);

  00a94	b8 08 00 00 00	 mov	 eax, 8
  00a99	48 6b c0 06	 imul	 rax, rax, 6
  00a9d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00aa5	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00aac	83 c0 05	 add	 eax, 5
  00aaf	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00ab4	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00abc	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00ac2	8b d0		 mov	 edx, eax
  00ac4	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR B_RCWCTL$[rsp]
  00ac9	e8 00 00 00 00	 call	 s370_vstoreb
$LN90@s370_ecpsv:

; 2747 :     }
; 2748 : 
; 2749 :     /* At CCWNXT10/CLRSENSE */
; 2750 :     regs->GR_L(8)=EVM_L(savearea+SAVER8)+EVM_L(vmb+VMDVSTRT);

  00ace	8b 44 24 4c	 mov	 eax, DWORD PTR savearea$[rsp]
  00ad2	83 c0 30	 add	 eax, 48			; 00000030H
  00ad5	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00ada	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00ae2	ba fe ff ff ff	 mov	 edx, -2
  00ae7	8b c8		 mov	 ecx, eax
  00ae9	e8 00 00 00 00	 call	 s370_vfetch4
  00aee	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv518[rsp], eax
  00af5	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR vmb$[rsp]
  00afc	83 c1 20	 add	 ecx, 32			; 00000020H
  00aff	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  00b05	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00b0d	ba fe ff ff ff	 mov	 edx, -2
  00b12	e8 00 00 00 00	 call	 s370_vfetch4
  00b17	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv518[rsp]
  00b1e	03 c8		 add	 ecx, eax
  00b20	8b c1		 mov	 eax, ecx
  00b22	b9 08 00 00 00	 mov	 ecx, 8
  00b27	48 6b c9 08	 imul	 rcx, rcx, 8
  00b2b	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00b33	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 2751 :     vdev=regs->GR_L(8);

  00b3a	b8 08 00 00 00	 mov	 eax, 8
  00b3f	48 6b c0 08	 imul	 rax, rax, 8
  00b43	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00b4b	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00b52	89 44 24 54	 mov	 DWORD PTR vdev$[rsp], eax

; 2752 :     if(EVM_IC(vdev+VDEVFLAG) & VDEVUC)

  00b56	8b 44 24 54	 mov	 eax, DWORD PTR vdev$[rsp]
  00b5a	83 c0 07	 add	 eax, 7
  00b5d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00b62	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00b6a	ba fe ff ff ff	 mov	 edx, -2
  00b6f	8b c8		 mov	 ecx, eax
  00b71	e8 00 00 00 00	 call	 s370_vfetchb
  00b76	0f b6 c0	 movzx	 eax, al
  00b79	83 e0 01	 and	 eax, 1
  00b7c	85 c0		 test	 eax, eax
  00b7e	0f 84 25 01 00
	00		 je	 $LN91@s370_ecpsv

; 2753 :     {
; 2754 :         DEBUG_CPASSISTX(CCWGN,WRMSG(HHC90000, "D", "CCWGN - Exit CCWNXT10"));

  00b84	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  00b8a	c1 e8 02	 shr	 eax, 2
  00b8d	83 e0 01	 and	 eax, 1
  00b90	85 c0		 test	 eax, eax
  00b92	74 53		 je	 SHORT $LN92@s370_ecpsv
  00b94	b9 01 00 00 00	 mov	 ecx, 1
  00b99	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b9f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172489
  00ba6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00bab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172490
  00bb2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00bb7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172491
  00bbe	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00bc3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00bc8	41 b9 03 00 00
	00		 mov	 r9d, 3
  00bce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172492
  00bd5	ba c2 0a 00 00	 mov	 edx, 2754		; 00000ac2H
  00bda	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172493
  00be1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN92@s370_ecpsv:
$LN19@s370_ecpsv:

; 2755 :         SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+16));          /* exit to CCWNXT10 in CP; sense bytes are present */

  00be7	8b 44 24 44	 mov	 eax, DWORD PTR el$[rsp]
  00beb	83 c0 10	 add	 eax, 16
  00bee	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00bf3	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00bfb	ba fe ff ff ff	 mov	 edx, -2
  00c00	8b c8		 mov	 ecx, eax
  00c02	e8 00 00 00 00	 call	 s370_vfetch4
  00c07	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00c0c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00c14	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00c1a	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00c22	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00c2a	74 6e		 je	 SHORT $LN93@s370_ecpsv
  00c2c	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00c34	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00c3a	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00c3f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00c47	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00c4d	75 38		 jne	 SHORT $LN94@s370_ecpsv
  00c4f	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00c57	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00c5d	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00c62	8b c0		 mov	 eax, eax
  00c64	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00c6c	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00c73	48 0b c8	 or	 rcx, rax
  00c76	48 8b c1	 mov	 rax, rcx
  00c79	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00c81	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00c85	eb 13		 jmp	 SHORT $LN95@s370_ecpsv
$LN94@s370_ecpsv:
  00c87	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00c8f	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN95@s370_ecpsv:
$LN93@s370_ecpsv:
  00c9a	33 c0		 xor	 eax, eax
  00c9c	85 c0		 test	 eax, eax
  00c9e	0f 85 43 ff ff
	ff		 jne	 $LN19@s370_ecpsv

; 2756 :         return;

  00ca4	e9 96 13 00 00	 jmp	 $LN1@s370_ecpsv
$LN91@s370_ecpsv:

; 2757 :     }
; 2758 : 
; 2759 :     /* At CCWNXT12 */
; 2760 :     if(B_VMOSTAT & VMSHR)

  00ca9	0f b6 44 24 48	 movzx	 eax, BYTE PTR B_VMOSTAT$[rsp]
  00cae	83 e0 40	 and	 eax, 64			; 00000040H
  00cb1	85 c0		 test	 eax, eax
  00cb3	0f 84 36 01 00
	00		 je	 $LN96@s370_ecpsv

; 2761 :     {
; 2762 :         DEBUG_CPASSISTX(CCWGN,WRMSG(HHC90000, "D", "CCWGN - Exit CCWNXT12"));

  00cb9	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  00cbf	c1 e8 02	 shr	 eax, 2
  00cc2	83 e0 01	 and	 eax, 1
  00cc5	85 c0		 test	 eax, eax
  00cc7	74 53		 je	 SHORT $LN97@s370_ecpsv
  00cc9	b9 01 00 00 00	 mov	 ecx, 1
  00cce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00cd4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172499
  00cdb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00ce0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172500
  00ce7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00cec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172501
  00cf3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00cf8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00cfd	41 b9 03 00 00
	00		 mov	 r9d, 3
  00d03	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172502
  00d0a	ba ca 0a 00 00	 mov	 edx, 2762		; 00000acaH
  00d0f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172503
  00d16	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN97@s370_ecpsv:
$LN22@s370_ecpsv:

; 2763 :         SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+44));          /* exit to CCWNXT12 in CP; running with shared segments */

  00d1c	8b 44 24 44	 mov	 eax, DWORD PTR el$[rsp]
  00d20	83 c0 2c	 add	 eax, 44			; 0000002cH
  00d23	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00d28	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00d30	ba fe ff ff ff	 mov	 edx, -2
  00d35	8b c8		 mov	 ecx, eax
  00d37	e8 00 00 00 00	 call	 s370_vfetch4
  00d3c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00d41	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00d49	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00d4f	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00d57	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00d5f	74 6e		 je	 SHORT $LN98@s370_ecpsv
  00d61	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00d69	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00d6f	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00d74	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00d7c	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00d82	75 38		 jne	 SHORT $LN99@s370_ecpsv
  00d84	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00d8c	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00d92	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00d97	8b c0		 mov	 eax, eax
  00d99	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00da1	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00da8	48 0b c8	 or	 rcx, rax
  00dab	48 8b c1	 mov	 rax, rcx
  00dae	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00db6	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00dba	eb 13		 jmp	 SHORT $LN100@s370_ecpsv
$LN99@s370_ecpsv:
  00dbc	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00dc4	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN100@s370_ecpsv:
$LN98@s370_ecpsv:
  00dcf	33 c0		 xor	 eax, eax
  00dd1	85 c0		 test	 eax, eax
  00dd3	0f 85 43 ff ff
	ff		 jne	 $LN22@s370_ecpsv

; 2764 :         CPASSIST_HIT(CCWGN);                    /* partial translation was assisted */

  00dd9	48 8b 05 90 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+400
  00de0	48 ff c0	 inc	 rax
  00de3	48 89 05 90 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+400, rax

; 2765 :         return;

  00dea	e9 50 12 00 00	 jmp	 $LN1@s370_ecpsv
$LN96@s370_ecpsv:

; 2766 :     }
; 2767 : 
; 2768 :     /* At CCWNXT14 */
; 2769 :     if((EVM_IC(savearea+VIRFLAG) & (CD+CC)))

  00def	8b 44 24 4c	 mov	 eax, DWORD PTR savearea$[rsp]
  00df3	83 c0 0f	 add	 eax, 15
  00df6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00dfb	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00e03	ba fe ff ff ff	 mov	 edx, -2
  00e08	8b c8		 mov	 ecx, eax
  00e0a	e8 00 00 00 00	 call	 s370_vfetchb
  00e0f	0f b6 c0	 movzx	 eax, al
  00e12	25 c0 00 00 00	 and	 eax, 192		; 000000c0H
  00e17	85 c0		 test	 eax, eax
  00e19	0f 84 36 01 00
	00		 je	 $LN101@s370_ecpsv

; 2770 :     {
; 2771 :         DEBUG_CPASSISTX(CCWGN,WRMSG(HHC90000, "D", "CCWGN - Exit CCWNEXT"));

  00e1f	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  00e25	c1 e8 02	 shr	 eax, 2
  00e28	83 e0 01	 and	 eax, 1
  00e2b	85 c0		 test	 eax, eax
  00e2d	74 53		 je	 SHORT $LN102@s370_ecpsv
  00e2f	b9 01 00 00 00	 mov	 ecx, 1
  00e34	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00e3a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172509
  00e41	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00e46	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172510
  00e4d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00e52	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172511
  00e59	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00e5e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e63	41 b9 03 00 00
	00		 mov	 r9d, 3
  00e69	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172512
  00e70	ba d3 0a 00 00	 mov	 edx, 2771		; 00000ad3H
  00e75	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172513
  00e7c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN102@s370_ecpsv:
$LN25@s370_ecpsv:

; 2772 :         SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+20));          /* exit to CCWNEXT; CD or CC flag set in CCW, get next CCW */

  00e82	8b 44 24 44	 mov	 eax, DWORD PTR el$[rsp]
  00e86	83 c0 14	 add	 eax, 20
  00e89	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00e8e	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00e96	ba fe ff ff ff	 mov	 edx, -2
  00e9b	8b c8		 mov	 ecx, eax
  00e9d	e8 00 00 00 00	 call	 s370_vfetch4
  00ea2	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00ea7	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00eaf	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00eb5	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00ebd	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00ec5	74 6e		 je	 SHORT $LN103@s370_ecpsv
  00ec7	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00ecf	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00ed5	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00eda	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00ee2	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00ee8	75 38		 jne	 SHORT $LN104@s370_ecpsv
  00eea	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00ef2	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00ef8	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00efd	8b c0		 mov	 eax, eax
  00eff	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00f07	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00f0e	48 0b c8	 or	 rcx, rax
  00f11	48 8b c1	 mov	 rax, rcx
  00f14	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00f1c	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00f20	eb 13		 jmp	 SHORT $LN105@s370_ecpsv
$LN104@s370_ecpsv:
  00f22	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00f2a	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN105@s370_ecpsv:
$LN103@s370_ecpsv:
  00f35	33 c0		 xor	 eax, eax
  00f37	85 c0		 test	 eax, eax
  00f39	0f 85 43 ff ff
	ff		 jne	 $LN25@s370_ecpsv

; 2773 :         CPASSIST_HIT(CCWGN);

  00f3f	48 8b 05 90 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+400
  00f46	48 ff c0	 inc	 rax
  00f49	48 89 05 90 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+400, rax

; 2774 :         return;

  00f50	e9 ea 10 00 00	 jmp	 $LN1@s370_ecpsv
$LN101@s370_ecpsv:

; 2775 :     }
; 2776 : 
; 2777 :     /* At CCWCHKPV */
; 2778 :     if(EVM_IC(savearea+PRVFLAG) & (SMCOM+FWDTIC))

  00f55	8b 44 24 4c	 mov	 eax, DWORD PTR savearea$[rsp]
  00f59	83 c0 0d	 add	 eax, 13
  00f5c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00f61	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00f69	ba fe ff ff ff	 mov	 edx, -2
  00f6e	8b c8		 mov	 ecx, eax
  00f70	e8 00 00 00 00	 call	 s370_vfetchb
  00f75	0f b6 c0	 movzx	 eax, al
  00f78	83 e0 05	 and	 eax, 5
  00f7b	85 c0		 test	 eax, eax
  00f7d	0f 84 36 01 00
	00		 je	 $LN106@s370_ecpsv

; 2779 :     {
; 2780 :         DEBUG_CPASSISTX(CCWGN,WRMSG(HHC90000, "D", "CCWGN - Exit CCWNEXT(2)"));

  00f83	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  00f89	c1 e8 02	 shr	 eax, 2
  00f8c	83 e0 01	 and	 eax, 1
  00f8f	85 c0		 test	 eax, eax
  00f91	74 53		 je	 SHORT $LN107@s370_ecpsv
  00f93	b9 01 00 00 00	 mov	 ecx, 1
  00f98	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00f9e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172519
  00fa5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00faa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172520
  00fb1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00fb6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172521
  00fbd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00fc2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00fc7	41 b9 03 00 00
	00		 mov	 r9d, 3
  00fcd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172522
  00fd4	ba dc 0a 00 00	 mov	 edx, 2780		; 00000adcH
  00fd9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172523
  00fe0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN107@s370_ecpsv:
$LN28@s370_ecpsv:

; 2781 :         SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+20));          /* exit to CCWNEXT; previous CCW status modifier or fwd TIC */

  00fe6	8b 44 24 44	 mov	 eax, DWORD PTR el$[rsp]
  00fea	83 c0 14	 add	 eax, 20
  00fed	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00ff2	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00ffa	ba fe ff ff ff	 mov	 edx, -2
  00fff	8b c8		 mov	 ecx, eax
  01001	e8 00 00 00 00	 call	 s370_vfetch4
  01006	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0100b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01013	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  01019	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01021	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  01029	74 6e		 je	 SHORT $LN108@s370_ecpsv
  0102b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01033	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01039	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  0103e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01046	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  0104c	75 38		 jne	 SHORT $LN109@s370_ecpsv
  0104e	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01056	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0105c	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  01061	8b c0		 mov	 eax, eax
  01063	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0106b	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  01072	48 0b c8	 or	 rcx, rax
  01075	48 8b c1	 mov	 rax, rcx
  01078	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01080	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  01084	eb 13		 jmp	 SHORT $LN110@s370_ecpsv
$LN109@s370_ecpsv:
  01086	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0108e	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN110@s370_ecpsv:
$LN108@s370_ecpsv:
  01099	33 c0		 xor	 eax, eax
  0109b	85 c0		 test	 eax, eax
  0109d	0f 85 43 ff ff
	ff		 jne	 $LN28@s370_ecpsv

; 2782 :         CPASSIST_HIT(CCWGN);

  010a3	48 8b 05 90 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+400
  010aa	48 ff c0	 inc	 rax
  010ad	48 89 05 90 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+400, rax

; 2783 :         return;

  010b4	e9 86 0f 00 00	 jmp	 $LN1@s370_ecpsv
$LN106@s370_ecpsv:

; 2784 :     }
; 2785 : 
; 2786 :     /* Compute # of virtual CCWs, # of real CCWs, and plug into the RCWCCW block.  This must be in R10. */
; 2787 : 
; 2788 :     /* At CCWNXT13 */
; 2789 :     regs->GR_L(10)=EVM_L(savearea+THISRCW);

  010b9	8b 44 24 4c	 mov	 eax, DWORD PTR savearea$[rsp]
  010bd	83 c0 58	 add	 eax, 88			; 00000058H
  010c0	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  010c5	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  010cd	ba fe ff ff ff	 mov	 edx, -2
  010d2	8b c8		 mov	 ecx, eax
  010d4	e8 00 00 00 00	 call	 s370_vfetch4
  010d9	b9 08 00 00 00	 mov	 ecx, 8
  010de	48 6b c9 0a	 imul	 rcx, rcx, 10
  010e2	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  010ea	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 2790 :     rcw=regs->GR_L(10);

  010f1	b8 08 00 00 00	 mov	 eax, 8
  010f6	48 6b c0 0a	 imul	 rax, rax, 10
  010fa	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01102	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  01109	89 44 24 64	 mov	 DWORD PTR rcw$[rsp], eax

; 2791 :     ccwcount=(regs->GR_L(9)+8 - EVM_L(rcw+RCWVCAW)) >> 3;  /* end of virt CCW string minus start, div by 8 */

  0110d	b8 08 00 00 00	 mov	 eax, 8
  01112	48 6b c0 09	 imul	 rax, rax, 9
  01116	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0111e	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  01125	83 c0 08	 add	 eax, 8
  01128	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv726[rsp], eax
  0112f	8b 4c 24 64	 mov	 ecx, DWORD PTR rcw$[rsp]
  01133	83 c1 04	 add	 ecx, 4
  01136	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  0113c	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  01144	ba fe ff ff ff	 mov	 edx, -2
  01149	e8 00 00 00 00	 call	 s370_vfetch4
  0114e	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv726[rsp]
  01155	2b c8		 sub	 ecx, eax
  01157	8b c1		 mov	 eax, ecx
  01159	c1 e8 03	 shr	 eax, 3
  0115c	89 44 24 78	 mov	 DWORD PTR ccwcount$[rsp], eax

; 2792 :     EVM_STH(ccwcount,rcw+RCWVCNT);

  01160	8b 44 24 64	 mov	 eax, DWORD PTR rcw$[rsp]
  01164	83 c0 08	 add	 eax, 8
  01167	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0116c	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  01174	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0117a	8b d0		 mov	 edx, eax
  0117c	0f b7 4c 24 78	 movzx	 ecx, WORD PTR ccwcount$[rsp]
  01181	e8 00 00 00 00	 call	 s370_vstore2

; 2793 :     ccwcount=((regs->GR_L(6)+8) - (rcw+RCWHSIZ))  >> 3;    /* end of real CCW string minus start, div by 8 */

  01186	b8 08 00 00 00	 mov	 eax, 8
  0118b	48 6b c0 06	 imul	 rax, rax, 6
  0118f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01197	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0119e	83 c0 08	 add	 eax, 8
  011a1	8b 4c 24 64	 mov	 ecx, DWORD PTR rcw$[rsp]
  011a5	83 c1 10	 add	 ecx, 16
  011a8	2b c1		 sub	 eax, ecx
  011aa	c1 e8 03	 shr	 eax, 3
  011ad	89 44 24 78	 mov	 DWORD PTR ccwcount$[rsp], eax

; 2794 :     EVM_STH(ccwcount,rcw+RCWRCNT);

  011b1	8b 44 24 64	 mov	 eax, DWORD PTR rcw$[rsp]
  011b5	83 c0 0a	 add	 eax, 10
  011b8	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  011bd	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  011c5	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  011cb	8b d0		 mov	 edx, eax
  011cd	0f b7 4c 24 78	 movzx	 ecx, WORD PTR ccwcount$[rsp]
  011d2	e8 00 00 00 00	 call	 s370_vstore2

; 2795 : 
; 2796 :     /* At CCWNXT16 */
; 2797 :     if(EVM_IC(savearea+MEMO2) & STRTNEW)

  011d7	8b 44 24 4c	 mov	 eax, DWORD PTR savearea$[rsp]
  011db	83 c0 42	 add	 eax, 66			; 00000042H
  011de	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  011e3	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  011eb	ba fe ff ff ff	 mov	 edx, -2
  011f0	8b c8		 mov	 ecx, eax
  011f2	e8 00 00 00 00	 call	 s370_vfetchb
  011f7	0f b6 c0	 movzx	 eax, al
  011fa	83 e0 40	 and	 eax, 64			; 00000040H
  011fd	85 c0		 test	 eax, eax
  011ff	0f 84 36 01 00
	00		 je	 $LN111@s370_ecpsv

; 2798 :     {
; 2799 :         DEBUG_CPASSISTX(CCWGN,WRMSG(HHC90000, "D", "CCWGN - Exit CCWNEWV2"));

  01205	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  0120b	c1 e8 02	 shr	 eax, 2
  0120e	83 e0 01	 and	 eax, 1
  01211	85 c0		 test	 eax, eax
  01213	74 53		 je	 SHORT $LN112@s370_ecpsv
  01215	b9 01 00 00 00	 mov	 ecx, 1
  0121a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01220	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172529
  01227	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0122c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172530
  01233	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01238	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172531
  0123f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01244	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01249	41 b9 03 00 00
	00		 mov	 r9d, 3
  0124f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172532
  01256	ba ef 0a 00 00	 mov	 edx, 2799		; 00000aefH
  0125b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172533
  01262	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN112@s370_ecpsv:
$LN31@s370_ecpsv:

; 2800 :         SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+24));          /* exit to CCWNEWV2; start new CCW string */

  01268	8b 44 24 44	 mov	 eax, DWORD PTR el$[rsp]
  0126c	83 c0 18	 add	 eax, 24
  0126f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01274	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0127c	ba fe ff ff ff	 mov	 edx, -2
  01281	8b c8		 mov	 ecx, eax
  01283	e8 00 00 00 00	 call	 s370_vfetch4
  01288	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0128d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01295	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  0129b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  012a3	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  012ab	74 6e		 je	 SHORT $LN113@s370_ecpsv
  012ad	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  012b5	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  012bb	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  012c0	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  012c8	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  012ce	75 38		 jne	 SHORT $LN114@s370_ecpsv
  012d0	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  012d8	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  012de	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  012e3	8b c0		 mov	 eax, eax
  012e5	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  012ed	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  012f4	48 0b c8	 or	 rcx, rax
  012f7	48 8b c1	 mov	 rax, rcx
  012fa	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01302	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  01306	eb 13		 jmp	 SHORT $LN115@s370_ecpsv
$LN114@s370_ecpsv:
  01308	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01310	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN115@s370_ecpsv:
$LN113@s370_ecpsv:
  0131b	33 c0		 xor	 eax, eax
  0131d	85 c0		 test	 eax, eax
  0131f	0f 85 43 ff ff
	ff		 jne	 $LN31@s370_ecpsv

; 2801 :         CPASSIST_HIT(CCWGN);

  01325	48 8b 05 90 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+400
  0132c	48 ff c0	 inc	 rax
  0132f	48 89 05 90 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+400, rax

; 2802 :         return;

  01336	e9 04 0d 00 00	 jmp	 $LN1@s370_ecpsv
$LN111@s370_ecpsv:

; 2803 :     }
; 2804 :     if(EVM_IC(savearea+MEMO1) & HADUTIC)

  0133b	8b 44 24 4c	 mov	 eax, DWORD PTR savearea$[rsp]
  0133f	83 c0 41	 add	 eax, 65			; 00000041H
  01342	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01347	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0134f	ba fe ff ff ff	 mov	 edx, -2
  01354	8b c8		 mov	 ecx, eax
  01356	e8 00 00 00 00	 call	 s370_vfetchb
  0135b	0f b6 c0	 movzx	 eax, al
  0135e	83 e0 02	 and	 eax, 2
  01361	85 c0		 test	 eax, eax
  01363	0f 84 36 01 00
	00		 je	 $LN116@s370_ecpsv

; 2805 :     {
; 2806 :         DEBUG_CPASSISTX(CCWGN,WRMSG(HHC90000, "D", "CCWGN - Exit TICSCAN"));

  01369	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  0136f	c1 e8 02	 shr	 eax, 2
  01372	83 e0 01	 and	 eax, 1
  01375	85 c0		 test	 eax, eax
  01377	74 53		 je	 SHORT $LN117@s370_ecpsv
  01379	b9 01 00 00 00	 mov	 ecx, 1
  0137e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01384	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172539
  0138b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01390	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172540
  01397	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0139c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172541
  013a3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  013a8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  013ad	41 b9 03 00 00
	00		 mov	 r9d, 3
  013b3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172542
  013ba	ba f6 0a 00 00	 mov	 edx, 2806		; 00000af6H
  013bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172543
  013c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN117@s370_ecpsv:
$LN34@s370_ecpsv:

; 2807 :         SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+28));          /* exit to TICSCAN; unprocessed TICs remain */

  013cc	8b 44 24 44	 mov	 eax, DWORD PTR el$[rsp]
  013d0	83 c0 1c	 add	 eax, 28
  013d3	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  013d8	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  013e0	ba fe ff ff ff	 mov	 edx, -2
  013e5	8b c8		 mov	 ecx, eax
  013e7	e8 00 00 00 00	 call	 s370_vfetch4
  013ec	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  013f1	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  013f9	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  013ff	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01407	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  0140f	74 6e		 je	 SHORT $LN118@s370_ecpsv
  01411	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01419	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0141f	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  01424	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0142c	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  01432	75 38		 jne	 SHORT $LN119@s370_ecpsv
  01434	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0143c	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01442	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  01447	8b c0		 mov	 eax, eax
  01449	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01451	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  01458	48 0b c8	 or	 rcx, rax
  0145b	48 8b c1	 mov	 rax, rcx
  0145e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01466	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0146a	eb 13		 jmp	 SHORT $LN120@s370_ecpsv
$LN119@s370_ecpsv:
  0146c	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01474	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN120@s370_ecpsv:
$LN118@s370_ecpsv:
  0147f	33 c0		 xor	 eax, eax
  01481	85 c0		 test	 eax, eax
  01483	0f 85 43 ff ff
	ff		 jne	 $LN34@s370_ecpsv

; 2808 :         CPASSIST_HIT(CCWGN);

  01489	48 8b 05 90 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+400
  01490	48 ff c0	 inc	 rax
  01493	48 89 05 90 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+400, rax

; 2809 :         return;

  0149a	e9 a0 0b 00 00	 jmp	 $LN1@s370_ecpsv
$LN116@s370_ecpsv:

; 2810 :     }
; 2811 : 
; 2812 :     /* Plug the real CCW string address into the IOBLOK */
; 2813 :     /* At CCWNXT18 */
; 2814 :     regs->GR_L(10)=EVM_L(savearea+SAVER10);

  0149f	8b 44 24 4c	 mov	 eax, DWORD PTR savearea$[rsp]
  014a3	83 c0 38	 add	 eax, 56			; 00000038H
  014a6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  014ab	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  014b3	ba fe ff ff ff	 mov	 edx, -2
  014b8	8b c8		 mov	 ecx, eax
  014ba	e8 00 00 00 00	 call	 s370_vfetch4
  014bf	b9 08 00 00 00	 mov	 ecx, 8
  014c4	48 6b c9 0a	 imul	 rcx, rcx, 10
  014c8	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  014d0	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 2815 :     iob=regs->GR_L(10);

  014d7	b8 08 00 00 00	 mov	 eax, 8
  014dc	48 6b c0 0a	 imul	 rax, rax, 10
  014e0	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  014e8	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  014ef	89 84 24 94 00
	00 00		 mov	 DWORD PTR iob$[rsp], eax

; 2816 :     rcaw=EVM_L(savearea+FIRSTRCW)+RCWHSIZ;

  014f6	8b 44 24 4c	 mov	 eax, DWORD PTR savearea$[rsp]
  014fa	83 c0 44	 add	 eax, 68			; 00000044H
  014fd	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01502	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0150a	ba fe ff ff ff	 mov	 edx, -2
  0150f	8b c8		 mov	 ecx, eax
  01511	e8 00 00 00 00	 call	 s370_vfetch4
  01516	83 c0 10	 add	 eax, 16
  01519	89 84 24 98 00
	00 00		 mov	 DWORD PTR rcaw$[rsp], eax

; 2817 :     EVM_ST(rcaw,iob+IOBCAW);

  01520	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR iob$[rsp]
  01527	83 c0 20	 add	 eax, 32			; 00000020H
  0152a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0152f	4c 8b 8c 24 c8
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  01537	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0153d	8b d0		 mov	 edx, eax
  0153f	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR rcaw$[rsp]
  01546	e8 00 00 00 00	 call	 s370_vstore4

; 2818 : 
; 2819 :     if(EVM_L(savearea+DEVTABLE) == EVM_L(dl+4))

  0154b	8b 44 24 4c	 mov	 eax, DWORD PTR savearea$[rsp]
  0154f	83 c0 50	 add	 eax, 80			; 00000050H
  01552	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01557	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0155f	ba fe ff ff ff	 mov	 edx, -2
  01564	8b c8		 mov	 ecx, eax
  01566	e8 00 00 00 00	 call	 s370_vfetch4
  0156b	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv904[rsp], eax
  01572	8b 4c 24 68	 mov	 ecx, DWORD PTR dl$[rsp]
  01576	83 c1 04	 add	 ecx, 4
  01579	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  0157f	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  01587	ba fe ff ff ff	 mov	 edx, -2
  0158c	e8 00 00 00 00	 call	 s370_vfetch4
  01591	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv904[rsp]
  01598	3b c8		 cmp	 ecx, eax
  0159a	0f 85 36 01 00
	00		 jne	 $LN121@s370_ecpsv

; 2820 :     {
; 2821 :         DEBUG_CPASSISTX(CCWGN,WRMSG(HHC90000, "D", "CCWGN - Exit CCWDIAL"));

  015a0	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  015a6	c1 e8 02	 shr	 eax, 2
  015a9	83 e0 01	 and	 eax, 1
  015ac	85 c0		 test	 eax, eax
  015ae	74 53		 je	 SHORT $LN122@s370_ecpsv
  015b0	b9 01 00 00 00	 mov	 ecx, 1
  015b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  015bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172549
  015c2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  015c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172550
  015ce	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  015d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172551
  015da	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  015df	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  015e4	41 b9 03 00 00
	00		 mov	 r9d, 3
  015ea	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172552
  015f1	ba 05 0b 00 00	 mov	 edx, 2821		; 00000b05H
  015f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172553
  015fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN122@s370_ecpsv:
$LN37@s370_ecpsv:

; 2822 :         SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+32));          /* exit to CCWDIAL if dialed line */

  01603	8b 44 24 44	 mov	 eax, DWORD PTR el$[rsp]
  01607	83 c0 20	 add	 eax, 32			; 00000020H
  0160a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0160f	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  01617	ba fe ff ff ff	 mov	 edx, -2
  0161c	8b c8		 mov	 ecx, eax
  0161e	e8 00 00 00 00	 call	 s370_vfetch4
  01623	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01628	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01630	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  01636	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0163e	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  01646	74 6e		 je	 SHORT $LN123@s370_ecpsv
  01648	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01650	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01656	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  0165b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01663	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  01669	75 38		 jne	 SHORT $LN124@s370_ecpsv
  0166b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01673	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01679	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0167e	8b c0		 mov	 eax, eax
  01680	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01688	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  0168f	48 0b c8	 or	 rcx, rax
  01692	48 8b c1	 mov	 rax, rcx
  01695	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0169d	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  016a1	eb 13		 jmp	 SHORT $LN125@s370_ecpsv
$LN124@s370_ecpsv:
  016a3	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  016ab	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN125@s370_ecpsv:
$LN123@s370_ecpsv:
  016b6	33 c0		 xor	 eax, eax
  016b8	85 c0		 test	 eax, eax
  016ba	0f 85 43 ff ff
	ff		 jne	 $LN37@s370_ecpsv

; 2823 :         CPASSIST_HIT(CCWGN);

  016c0	48 8b 05 90 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+400
  016c7	48 ff c0	 inc	 rax
  016ca	48 89 05 90 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+400, rax

; 2824 :         return;

  016d1	e9 69 09 00 00	 jmp	 $LN1@s370_ecpsv
$LN121@s370_ecpsv:

; 2825 :     }
; 2826 : 
; 2827 :     B_VDEVTYPC=EVM_IC(vdev+VDEVTYPC);

  016d6	8b 44 24 54	 mov	 eax, DWORD PTR vdev$[rsp]
  016da	83 c0 04	 add	 eax, 4
  016dd	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  016e2	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  016ea	ba fe ff ff ff	 mov	 edx, -2
  016ef	8b c8		 mov	 ecx, eax
  016f1	e8 00 00 00 00	 call	 s370_vfetchb
  016f6	88 44 24 49	 mov	 BYTE PTR B_VDEVTYPC$[rsp], al

; 2828 :     if(B_VDEVTYPC & CLASGRAF)

  016fa	0f b6 44 24 49	 movzx	 eax, BYTE PTR B_VDEVTYPC$[rsp]
  016ff	83 e0 40	 and	 eax, 64			; 00000040H
  01702	85 c0		 test	 eax, eax
  01704	0f 84 c8 02 00
	00		 je	 $LN126@s370_ecpsv

; 2829 :     {
; 2830 :         if(!(EVM_IC(vdev+VDEVTYPE) & (TYP3277|TYP3278)))

  0170a	8b 44 24 54	 mov	 eax, DWORD PTR vdev$[rsp]
  0170e	83 c0 05	 add	 eax, 5
  01711	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01716	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0171e	ba fe ff ff ff	 mov	 edx, -2
  01723	8b c8		 mov	 ecx, eax
  01725	e8 00 00 00 00	 call	 s370_vfetchb
  0172a	0f b6 c0	 movzx	 eax, al
  0172d	83 e0 05	 and	 eax, 5
  01730	85 c0		 test	 eax, eax
  01732	0f 85 36 01 00
	00		 jne	 $LN127@s370_ecpsv

; 2831 :         {
; 2832 :             DEBUG_CPASSISTX(CCWGN,WRMSG(HHC90000, "D", "CCWGN - Exit CCWEXIT"));

  01738	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  0173e	c1 e8 02	 shr	 eax, 2
  01741	83 e0 01	 and	 eax, 1
  01744	85 c0		 test	 eax, eax
  01746	74 53		 je	 SHORT $LN128@s370_ecpsv
  01748	b9 01 00 00 00	 mov	 ecx, 1
  0174d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01753	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172560
  0175a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0175f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172561
  01766	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0176b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172562
  01772	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01777	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0177c	41 b9 03 00 00
	00		 mov	 r9d, 3
  01782	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172563
  01789	ba 10 0b 00 00	 mov	 edx, 2832		; 00000b10H
  0178e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172564
  01795	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN128@s370_ecpsv:
$LN40@s370_ecpsv:

; 2833 :             SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+40));      /* Not 3270 device; exit to CCWEXIT; we're done */

  0179b	8b 44 24 44	 mov	 eax, DWORD PTR el$[rsp]
  0179f	83 c0 28	 add	 eax, 40			; 00000028H
  017a2	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  017a7	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  017af	ba fe ff ff ff	 mov	 edx, -2
  017b4	8b c8		 mov	 ecx, eax
  017b6	e8 00 00 00 00	 call	 s370_vfetch4
  017bb	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  017c0	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  017c8	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  017ce	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  017d6	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  017de	74 6e		 je	 SHORT $LN129@s370_ecpsv
  017e0	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  017e8	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  017ee	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  017f3	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  017fb	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  01801	75 38		 jne	 SHORT $LN130@s370_ecpsv
  01803	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0180b	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01811	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  01816	8b c0		 mov	 eax, eax
  01818	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01820	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  01827	48 0b c8	 or	 rcx, rax
  0182a	48 8b c1	 mov	 rax, rcx
  0182d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01835	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  01839	eb 13		 jmp	 SHORT $LN131@s370_ecpsv
$LN130@s370_ecpsv:
  0183b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01843	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN131@s370_ecpsv:
$LN129@s370_ecpsv:
  0184e	33 c0		 xor	 eax, eax
  01850	85 c0		 test	 eax, eax
  01852	0f 85 43 ff ff
	ff		 jne	 $LN40@s370_ecpsv

; 2834 :             CPASSIST_HIT(CCWGN);

  01858	48 8b 05 90 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+400
  0185f	48 ff c0	 inc	 rax
  01862	48 89 05 90 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+400, rax

; 2835 :             return;

  01869	e9 d1 07 00 00	 jmp	 $LN1@s370_ecpsv
$LN127@s370_ecpsv:

; 2836 :         }
; 2837 :         if(!(EVM_IC(vdev+VDEVSTAT) & VDEVDED))

  0186e	8b 44 24 54	 mov	 eax, DWORD PTR vdev$[rsp]
  01872	83 c0 06	 add	 eax, 6
  01875	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0187a	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  01882	ba fe ff ff ff	 mov	 edx, -2
  01887	8b c8		 mov	 ecx, eax
  01889	e8 00 00 00 00	 call	 s370_vfetchb
  0188e	0f b6 c0	 movzx	 eax, al
  01891	83 e0 01	 and	 eax, 1
  01894	85 c0		 test	 eax, eax
  01896	0f 85 36 01 00
	00		 jne	 $LN132@s370_ecpsv

; 2838 :         {
; 2839 :             DEBUG_CPASSISTX(CCWGN,WRMSG(HHC90000, "D", "CCWGN - Exit CCWDIAL(2)"));

  0189c	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  018a2	c1 e8 02	 shr	 eax, 2
  018a5	83 e0 01	 and	 eax, 1
  018a8	85 c0		 test	 eax, eax
  018aa	74 53		 je	 SHORT $LN133@s370_ecpsv
  018ac	b9 01 00 00 00	 mov	 ecx, 1
  018b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  018b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172570
  018be	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  018c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172571
  018ca	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  018cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172572
  018d6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  018db	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  018e0	41 b9 03 00 00
	00		 mov	 r9d, 3
  018e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172573
  018ed	ba 17 0b 00 00	 mov	 edx, 2839		; 00000b17H
  018f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172574
  018f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN133@s370_ecpsv:
$LN43@s370_ecpsv:

; 2840 :             SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+32));      /* exit to CCWDIAL if i/o to non-dialed 3270 */

  018ff	8b 44 24 44	 mov	 eax, DWORD PTR el$[rsp]
  01903	83 c0 20	 add	 eax, 32			; 00000020H
  01906	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0190b	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  01913	ba fe ff ff ff	 mov	 edx, -2
  01918	8b c8		 mov	 ecx, eax
  0191a	e8 00 00 00 00	 call	 s370_vfetch4
  0191f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01924	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0192c	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  01932	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0193a	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  01942	74 6e		 je	 SHORT $LN134@s370_ecpsv
  01944	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0194c	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01952	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  01957	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0195f	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  01965	75 38		 jne	 SHORT $LN135@s370_ecpsv
  01967	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0196f	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01975	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0197a	8b c0		 mov	 eax, eax
  0197c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01984	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  0198b	48 0b c8	 or	 rcx, rax
  0198e	48 8b c1	 mov	 rax, rcx
  01991	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01999	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0199d	eb 13		 jmp	 SHORT $LN136@s370_ecpsv
$LN135@s370_ecpsv:
  0199f	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  019a7	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN136@s370_ecpsv:
$LN134@s370_ecpsv:
  019b2	33 c0		 xor	 eax, eax
  019b4	85 c0		 test	 eax, eax
  019b6	0f 85 43 ff ff
	ff		 jne	 $LN43@s370_ecpsv

; 2841 :             CPASSIST_HIT(CCWGN);

  019bc	48 8b 05 90 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+400
  019c3	48 ff c0	 inc	 rax
  019c6	48 89 05 90 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+400, rax

; 2842 :             return;

  019cd	e9 6d 06 00 00	 jmp	 $LN1@s370_ecpsv
$LN132@s370_ecpsv:
$LN126@s370_ecpsv:

; 2843 :         }
; 2844 :     }
; 2845 : 
; 2846 :     /* At CCWNXT19 */
; 2847 :     if(!(B_VDEVTYPC & CLASDASD))

  019d2	0f b6 44 24 49	 movzx	 eax, BYTE PTR B_VDEVTYPC$[rsp]
  019d7	83 e0 04	 and	 eax, 4
  019da	85 c0		 test	 eax, eax
  019dc	0f 85 36 01 00
	00		 jne	 $LN137@s370_ecpsv

; 2848 :     {
; 2849 :         DEBUG_CPASSISTX(CCWGN,WRMSG(HHC90000, "D", "CCWGN - Exit CCWEXIT(2)"));

  019e2	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  019e8	c1 e8 02	 shr	 eax, 2
  019eb	83 e0 01	 and	 eax, 1
  019ee	85 c0		 test	 eax, eax
  019f0	74 53		 je	 SHORT $LN138@s370_ecpsv
  019f2	b9 01 00 00 00	 mov	 ecx, 1
  019f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  019fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172580
  01a04	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01a09	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172581
  01a10	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01a15	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172582
  01a1c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01a21	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01a26	41 b9 03 00 00
	00		 mov	 r9d, 3
  01a2c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172583
  01a33	ba 21 0b 00 00	 mov	 edx, 2849		; 00000b21H
  01a38	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172584
  01a3f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN138@s370_ecpsv:
$LN46@s370_ecpsv:

; 2850 :         SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+40));          /* Not DASD; exit to CCWEXIT; we're done */

  01a45	8b 44 24 44	 mov	 eax, DWORD PTR el$[rsp]
  01a49	83 c0 28	 add	 eax, 40			; 00000028H
  01a4c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01a51	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  01a59	ba fe ff ff ff	 mov	 edx, -2
  01a5e	8b c8		 mov	 ecx, eax
  01a60	e8 00 00 00 00	 call	 s370_vfetch4
  01a65	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01a6a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01a72	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  01a78	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01a80	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  01a88	74 6e		 je	 SHORT $LN139@s370_ecpsv
  01a8a	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01a92	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01a98	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  01a9d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01aa5	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  01aab	75 38		 jne	 SHORT $LN140@s370_ecpsv
  01aad	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01ab5	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01abb	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  01ac0	8b c0		 mov	 eax, eax
  01ac2	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01aca	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  01ad1	48 0b c8	 or	 rcx, rax
  01ad4	48 8b c1	 mov	 rax, rcx
  01ad7	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01adf	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  01ae3	eb 13		 jmp	 SHORT $LN141@s370_ecpsv
$LN140@s370_ecpsv:
  01ae5	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01aed	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN141@s370_ecpsv:
$LN139@s370_ecpsv:
  01af8	33 c0		 xor	 eax, eax
  01afa	85 c0		 test	 eax, eax
  01afc	0f 85 43 ff ff
	ff		 jne	 $LN46@s370_ecpsv

; 2851 :         CPASSIST_HIT(CCWGN);

  01b02	48 8b 05 90 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+400
  01b09	48 ff c0	 inc	 rax
  01b0c	48 89 05 90 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+400, rax

; 2852 :         return;

  01b13	e9 27 05 00 00	 jmp	 $LN1@s370_ecpsv
$LN137@s370_ecpsv:

; 2853 :     }
; 2854 :     if(EVM_IC(vdev+VDEVFLG2) & VDEVRRF)

  01b18	8b 44 24 54	 mov	 eax, DWORD PTR vdev$[rsp]
  01b1c	83 c0 38	 add	 eax, 56			; 00000038H
  01b1f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01b24	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  01b2c	ba fe ff ff ff	 mov	 edx, -2
  01b31	8b c8		 mov	 ecx, eax
  01b33	e8 00 00 00 00	 call	 s370_vfetchb
  01b38	0f b6 c0	 movzx	 eax, al
  01b3b	25 80 00 00 00	 and	 eax, 128		; 00000080H
  01b40	85 c0		 test	 eax, eax
  01b42	0f 84 36 01 00
	00		 je	 $LN142@s370_ecpsv

; 2855 :     {
; 2856 :         DEBUG_CPASSISTX(CCWGN,WRMSG(HHC90000, "D", "CCWGN - Exit ITSAREL"));

  01b48	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  01b4e	c1 e8 02	 shr	 eax, 2
  01b51	83 e0 01	 and	 eax, 1
  01b54	85 c0		 test	 eax, eax
  01b56	74 53		 je	 SHORT $LN143@s370_ecpsv
  01b58	b9 01 00 00 00	 mov	 ecx, 1
  01b5d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01b63	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172590
  01b6a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01b6f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172591
  01b76	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01b7b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172592
  01b82	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01b87	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01b8c	41 b9 03 00 00
	00		 mov	 r9d, 3
  01b92	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172593
  01b99	ba 28 0b 00 00	 mov	 edx, 2856		; 00000b28H
  01b9e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172594
  01ba5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN143@s370_ecpsv:
$LN49@s370_ecpsv:

; 2857 :         SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+48));          /* DASD w/reserve-release; exit to ITSAREL */

  01bab	8b 44 24 44	 mov	 eax, DWORD PTR el$[rsp]
  01baf	83 c0 30	 add	 eax, 48			; 00000030H
  01bb2	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01bb7	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  01bbf	ba fe ff ff ff	 mov	 edx, -2
  01bc4	8b c8		 mov	 ecx, eax
  01bc6	e8 00 00 00 00	 call	 s370_vfetch4
  01bcb	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01bd0	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01bd8	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  01bde	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01be6	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  01bee	74 6e		 je	 SHORT $LN144@s370_ecpsv
  01bf0	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01bf8	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01bfe	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  01c03	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01c0b	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  01c11	75 38		 jne	 SHORT $LN145@s370_ecpsv
  01c13	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01c1b	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01c21	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  01c26	8b c0		 mov	 eax, eax
  01c28	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01c30	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  01c37	48 0b c8	 or	 rcx, rax
  01c3a	48 8b c1	 mov	 rax, rcx
  01c3d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01c45	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  01c49	eb 13		 jmp	 SHORT $LN146@s370_ecpsv
$LN145@s370_ecpsv:
  01c4b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01c53	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN146@s370_ecpsv:
$LN144@s370_ecpsv:
  01c5e	33 c0		 xor	 eax, eax
  01c60	85 c0		 test	 eax, eax
  01c62	0f 85 43 ff ff
	ff		 jne	 $LN49@s370_ecpsv

; 2858 :         CPASSIST_HIT(CCWGN);

  01c68	48 8b 05 90 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+400
  01c6f	48 ff c0	 inc	 rax
  01c72	48 89 05 90 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+400, rax

; 2859 :         return;

  01c79	e9 c1 03 00 00	 jmp	 $LN1@s370_ecpsv
$LN142@s370_ecpsv:

; 2860 :     }
; 2861 : 
; 2862 :     /* At CCWNXT28 */
; 2863 :     if(EVM_IC(savearea+MEMO1) & HADISAM)

  01c7e	8b 44 24 4c	 mov	 eax, DWORD PTR savearea$[rsp]
  01c82	83 c0 41	 add	 eax, 65			; 00000041H
  01c85	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01c8a	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  01c92	ba fe ff ff ff	 mov	 edx, -2
  01c97	8b c8		 mov	 ecx, eax
  01c99	e8 00 00 00 00	 call	 s370_vfetchb
  01c9e	0f b6 c0	 movzx	 eax, al
  01ca1	83 e0 01	 and	 eax, 1
  01ca4	85 c0		 test	 eax, eax
  01ca6	0f 84 c5 02 00
	00		 je	 $LN147@s370_ecpsv

; 2864 :     {
; 2865 :         if(EVM_IC(vdev+VDEVSTAT) & VDEVDED)

  01cac	8b 44 24 54	 mov	 eax, DWORD PTR vdev$[rsp]
  01cb0	83 c0 06	 add	 eax, 6
  01cb3	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01cb8	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  01cc0	ba fe ff ff ff	 mov	 edx, -2
  01cc5	8b c8		 mov	 ecx, eax
  01cc7	e8 00 00 00 00	 call	 s370_vfetchb
  01ccc	0f b6 c0	 movzx	 eax, al
  01ccf	83 e0 01	 and	 eax, 1
  01cd2	85 c0		 test	 eax, eax
  01cd4	0f 84 36 01 00
	00		 je	 $LN148@s370_ecpsv

; 2866 :         {
; 2867 :             DEBUG_CPASSISTX(CCWGN,WRMSG(HHC90000, "D", "CCWGN - Exit CALLISM"));

  01cda	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  01ce0	c1 e8 02	 shr	 eax, 2
  01ce3	83 e0 01	 and	 eax, 1
  01ce6	85 c0		 test	 eax, eax
  01ce8	74 53		 je	 SHORT $LN149@s370_ecpsv
  01cea	b9 01 00 00 00	 mov	 ecx, 1
  01cef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01cf5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172601
  01cfc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01d01	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172602
  01d08	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01d0d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172603
  01d14	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01d19	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01d1e	41 b9 03 00 00
	00		 mov	 r9d, 3
  01d24	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172604
  01d2b	ba 33 0b 00 00	 mov	 edx, 2867		; 00000b33H
  01d30	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172605
  01d37	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN149@s370_ecpsv:
$LN52@s370_ecpsv:

; 2868 :             SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+36));      /* ISAM ok to dedicated DASD; exit to CALLISM */

  01d3d	8b 44 24 44	 mov	 eax, DWORD PTR el$[rsp]
  01d41	83 c0 24	 add	 eax, 36			; 00000024H
  01d44	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01d49	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  01d51	ba fe ff ff ff	 mov	 edx, -2
  01d56	8b c8		 mov	 ecx, eax
  01d58	e8 00 00 00 00	 call	 s370_vfetch4
  01d5d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01d62	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01d6a	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  01d70	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01d78	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  01d80	74 6e		 je	 SHORT $LN150@s370_ecpsv
  01d82	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01d8a	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01d90	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  01d95	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01d9d	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  01da3	75 38		 jne	 SHORT $LN151@s370_ecpsv
  01da5	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01dad	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01db3	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  01db8	8b c0		 mov	 eax, eax
  01dba	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01dc2	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  01dc9	48 0b c8	 or	 rcx, rax
  01dcc	48 8b c1	 mov	 rax, rcx
  01dcf	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01dd7	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  01ddb	eb 13		 jmp	 SHORT $LN152@s370_ecpsv
$LN151@s370_ecpsv:
  01ddd	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01de5	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN152@s370_ecpsv:
$LN150@s370_ecpsv:
  01df0	33 c0		 xor	 eax, eax
  01df2	85 c0		 test	 eax, eax
  01df4	0f 85 43 ff ff
	ff		 jne	 $LN52@s370_ecpsv

; 2869 :             CPASSIST_HIT(CCWGN);

  01dfa	48 8b 05 90 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+400
  01e01	48 ff c0	 inc	 rax
  01e04	48 89 05 90 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+400, rax

; 2870 :             return;

  01e0b	e9 2f 02 00 00	 jmp	 $LN1@s370_ecpsv
$LN148@s370_ecpsv:

; 2871 :         }
; 2872 :         if(EVM_LH(vdev+VDEVRELN)==0)

  01e10	8b 44 24 54	 mov	 eax, DWORD PTR vdev$[rsp]
  01e14	83 c0 10	 add	 eax, 16
  01e17	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01e1c	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  01e24	ba fe ff ff ff	 mov	 edx, -2
  01e29	8b c8		 mov	 ecx, eax
  01e2b	e8 00 00 00 00	 call	 s370_vfetch2
  01e30	0f b7 c0	 movzx	 eax, ax
  01e33	85 c0		 test	 eax, eax
  01e35	0f 85 36 01 00
	00		 jne	 $LN153@s370_ecpsv

; 2873 :         {
; 2874 :             DEBUG_CPASSISTX(CCWGN,WRMSG(HHC90000, "D", "CCWGN - Exit CALLISM(2)"));

  01e3b	8b 05 98 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+408
  01e41	c1 e8 02	 shr	 eax, 2
  01e44	83 e0 01	 and	 eax, 1
  01e47	85 c0		 test	 eax, eax
  01e49	74 53		 je	 SHORT $LN154@s370_ecpsv
  01e4b	b9 01 00 00 00	 mov	 ecx, 1
  01e50	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01e56	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172611
  01e5d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01e62	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172612
  01e69	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01e6e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172613
  01e75	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01e7a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01e7f	41 b9 03 00 00
	00		 mov	 r9d, 3
  01e85	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172614
  01e8c	ba 3a 0b 00 00	 mov	 edx, 2874		; 00000b3aH
  01e91	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172615
  01e98	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN154@s370_ecpsv:
$LN55@s370_ecpsv:

; 2875 :             SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+36));      /* ISAM ok on full-volume MDISK; exit to CALLISM */

  01e9e	8b 44 24 44	 mov	 eax, DWORD PTR el$[rsp]
  01ea2	83 c0 24	 add	 eax, 36			; 00000024H
  01ea5	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01eaa	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  01eb2	ba fe ff ff ff	 mov	 edx, -2
  01eb7	8b c8		 mov	 ecx, eax
  01eb9	e8 00 00 00 00	 call	 s370_vfetch4
  01ebe	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01ec3	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01ecb	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  01ed1	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01ed9	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  01ee1	74 6e		 je	 SHORT $LN155@s370_ecpsv
  01ee3	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01eeb	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01ef1	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  01ef6	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01efe	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  01f04	75 38		 jne	 SHORT $LN156@s370_ecpsv
  01f06	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01f0e	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01f14	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  01f19	8b c0		 mov	 eax, eax
  01f1b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01f23	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  01f2a	48 0b c8	 or	 rcx, rax
  01f2d	48 8b c1	 mov	 rax, rcx
  01f30	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01f38	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  01f3c	eb 13		 jmp	 SHORT $LN157@s370_ecpsv
$LN156@s370_ecpsv:
  01f3e	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01f46	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN157@s370_ecpsv:
$LN155@s370_ecpsv:
  01f51	33 c0		 xor	 eax, eax
  01f53	85 c0		 test	 eax, eax
  01f55	0f 85 43 ff ff
	ff		 jne	 $LN55@s370_ecpsv

; 2876 :             CPASSIST_HIT(CCWGN);

  01f5b	48 8b 05 90 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+400
  01f62	48 ff c0	 inc	 rax
  01f65	48 89 05 90 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+400, rax

; 2877 :             return;

  01f6c	e9 ce 00 00 00	 jmp	 $LN1@s370_ecpsv
$LN153@s370_ecpsv:
$LN147@s370_ecpsv:
$LN58@s370_ecpsv:

; 2878 :         }
; 2879 :     }
; 2880 : 
; 2881 :     SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+40));          /* Exit to CCWEXIT; we're done */

  01f71	8b 44 24 44	 mov	 eax, DWORD PTR el$[rsp]
  01f75	83 c0 28	 add	 eax, 40			; 00000028H
  01f78	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01f7d	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  01f85	ba fe ff ff ff	 mov	 edx, -2
  01f8a	8b c8		 mov	 ecx, eax
  01f8c	e8 00 00 00 00	 call	 s370_vfetch4
  01f91	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01f96	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01f9e	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  01fa4	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01fac	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  01fb4	74 6e		 je	 SHORT $LN158@s370_ecpsv
  01fb6	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01fbe	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01fc4	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  01fc9	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01fd1	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  01fd7	75 38		 jne	 SHORT $LN159@s370_ecpsv
  01fd9	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01fe1	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01fe7	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  01fec	8b c0		 mov	 eax, eax
  01fee	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01ff6	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  01ffd	48 0b c8	 or	 rcx, rax
  02000	48 8b c1	 mov	 rax, rcx
  02003	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0200b	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0200f	eb 13		 jmp	 SHORT $LN160@s370_ecpsv
$LN159@s370_ecpsv:
  02011	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  02019	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN160@s370_ecpsv:
$LN158@s370_ecpsv:
  02024	33 c0		 xor	 eax, eax
  02026	85 c0		 test	 eax, eax
  02028	0f 85 43 ff ff
	ff		 jne	 $LN58@s370_ecpsv

; 2882 :     CPASSIST_HIT(CCWGN);

  0202e	48 8b 05 90 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+400
  02035	48 ff c0	 inc	 rax
  02038	48 89 05 90 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+400, rax
$LN1@s370_ecpsv:
$LN161@s370_ecpsv:

; 2883 :     return;
; 2884 : }

  0203f	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  02046	c3		 ret	 0
s370_ecpsvm_comm_ccwproc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
rdev$ = 64
effective_addr1$ = 68
effective_addr2$ = 72
rcublk$ = 76
cuix$ = 80
dvix$ = 84
temp$1 = 88
arioct$ = 92
rchblk$ = 96
chix$ = 100
b1$ = 104
b2$ = 108
rdvblk$ = 112
rchixtbl$ = 116
rchtbl$ = 120
rcutbl$ = 124
rdvtbl$ = 128
buf$ = 144
__$ArrayPad$ = 400
inst$ = 432
regs$ = 440
s370_ecpsvm_locate_rblock PROC

; 2511 : {

$LN42:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2512 :     char buf[256];
; 2513 :     U32 chix;           /* offset of RCH in RCH Array */
; 2514 :     U32 cuix;           /* Offset of RCU in RCU Array */
; 2515 :     U32 dvix;           /* Offset of RDV in RDV Array */
; 2516 :     VADR rchixtbl;      /* RCH Index Table */
; 2517 :     VADR rchtbl;        /* RCH Array */
; 2518 :     VADR rcutbl;        /* RCU Array */
; 2519 :     VADR rdvtbl;        /* RDV Array */
; 2520 :     VADR arioct;        /* Data list for SCNRU */
; 2521 : 
; 2522 :     VADR rchblk;        /* Effective RCHBLOK Address */
; 2523 :     VADR rcublk;        /* Effective RCUBLOK Address */
; 2524 :     VADR rdvblk;        /* Effective RDVBLOK Address */
; 2525 :     U16 rdev;
; 2526 : 
; 2527 :     ECPSVM_PROLOG(SCNRU);

  00023	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  0002b	48 83 c0 02	 add	 rax, 2
  0002f	48 8b c8	 mov	 rcx, rax
  00032	e8 00 00 00 00	 call	 fetch_fw_noswap
  00037	8b c8		 mov	 ecx, eax
  00039	e8 00 00 00 00	 call	 _byteswap_ulong
  0003e	89 44 24 58	 mov	 DWORD PTR temp$1[rsp], eax
  00042	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00046	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0004b	89 44 24 48	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0004f	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00053	c1 e8 0c	 shr	 eax, 12
  00056	83 e0 0f	 and	 eax, 15
  00059	89 44 24 6c	 mov	 DWORD PTR b2$[rsp], eax
  0005d	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00061	c1 e8 10	 shr	 eax, 16
  00064	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00069	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  0006d	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00071	c1 e8 1c	 shr	 eax, 28
  00074	83 e0 0f	 and	 eax, 15
  00077	89 44 24 68	 mov	 DWORD PTR b1$[rsp], eax
  0007b	83 7c 24 68 00	 cmp	 DWORD PTR b1$[rsp], 0
  00080	74 2d		 je	 SHORT $LN11@s370_ecpsv
  00082	48 63 44 24 68	 movsxd	 rax, DWORD PTR b1$[rsp]
  00087	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0008f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00096	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0009a	03 c8		 add	 ecx, eax
  0009c	8b c1		 mov	 eax, ecx
  0009e	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  000a2	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  000a6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000ab	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN11@s370_ecpsv:
  000af	83 7c 24 6c 00	 cmp	 DWORD PTR b2$[rsp], 0
  000b4	74 2d		 je	 SHORT $LN12@s370_ecpsv
  000b6	48 63 44 24 6c	 movsxd	 rax, DWORD PTR b2$[rsp]
  000bb	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000c3	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000ca	8b 4c 24 48	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000ce	03 c8		 add	 ecx, eax
  000d0	8b c1		 mov	 eax, ecx
  000d2	89 44 24 48	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000d6	8b 44 24 48	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000da	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000df	89 44 24 48	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN12@s370_ecpsv:
$LN4@s370_ecpsv:
  000e3	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000eb	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ef	48 83 c0 06	 add	 rax, 6
  000f3	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000fb	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000ff	33 c0		 xor	 eax, eax
  00101	83 f8 06	 cmp	 eax, 6
  00104	74 0f		 je	 SHORT $LN13@s370_ecpsv
  00106	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0010e	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN13@s370_ecpsv:
  00115	33 c0		 xor	 eax, eax
  00117	85 c0		 test	 eax, eax
  00119	75 c8		 jne	 SHORT $LN4@s370_ecpsv
  0011b	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00123	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00127	83 e0 01	 and	 eax, 1
  0012a	85 c0		 test	 eax, eax
  0012c	74 1b		 je	 SHORT $LN14@s370_ecpsv
  0012e	ba 02 00 00 00	 mov	 edx, 2
  00133	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0013b	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00143	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN14@s370_ecpsv:
$LN7@s370_ecpsv:
  00149	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00151	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00157	d1 e8		 shr	 eax, 1
  00159	83 e0 01	 and	 eax, 1
  0015c	85 c0		 test	 eax, eax
  0015e	74 1b		 je	 SHORT $LN15@s370_ecpsv
  00160	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00168	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  0016e	ba fc ff ff ff	 mov	 edx, -4
  00173	48 8b c8	 mov	 rcx, rax
  00176	e8 00 00 00 00	 call	 longjmp
$LN15@s370_ecpsv:
  0017b	33 c0		 xor	 eax, eax
  0017d	85 c0		 test	 eax, eax
  0017f	75 c8		 jne	 SHORT $LN7@s370_ecpsv
  00181	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00188	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  0018e	c1 e8 11	 shr	 eax, 17
  00191	83 e0 01	 and	 eax, 1
  00194	85 c0		 test	 eax, eax
  00196	75 75		 jne	 SHORT $LN16@s370_ecpsv
  00198	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+152
  0019e	c1 e8 02	 shr	 eax, 2
  001a1	83 e0 01	 and	 eax, 1
  001a4	85 c0		 test	 eax, eax
  001a6	74 53		 je	 SHORT $LN17@s370_ecpsv
  001a8	b9 01 00 00 00	 mov	 ecx, 1
  001ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172185
  001ba	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172186
  001c6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172187
  001d2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001d7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001dc	41 b9 03 00 00
	00		 mov	 r9d, 3
  001e2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172188
  001e9	ba df 09 00 00	 mov	 edx, 2527		; 000009dfH
  001ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172189
  001f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@s370_ecpsv:
  001fb	ba 01 00 00 00	 mov	 edx, 1
  00200	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00208	e8 00 00 00 00	 call	 s370_program_interrupt
$LN16@s370_ecpsv:
  0020d	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00215	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00219	83 e0 01	 and	 eax, 1
  0021c	85 c0		 test	 eax, eax
  0021e	74 1b		 je	 SHORT $LN18@s370_ecpsv
  00220	ba 02 00 00 00	 mov	 edx, 2
  00225	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0022d	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00235	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN18@s370_ecpsv:
  0023b	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+152
  00241	d1 e8		 shr	 eax, 1
  00243	83 e0 01	 and	 eax, 1
  00246	85 c0		 test	 eax, eax
  00248	75 68		 jne	 SHORT $LN19@s370_ecpsv
  0024a	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+152
  00250	c1 e8 02	 shr	 eax, 2
  00253	83 e0 01	 and	 eax, 1
  00256	85 c0		 test	 eax, eax
  00258	74 53		 je	 SHORT $LN20@s370_ecpsv
  0025a	b9 01 00 00 00	 mov	 ecx, 1
  0025f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00265	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172193
  0026c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00271	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172194
  00278	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0027d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172195
  00284	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00289	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0028e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00294	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172196
  0029b	ba df 09 00 00	 mov	 edx, 2527		; 000009dfH
  002a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172197
  002a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN20@s370_ecpsv:
  002ad	e9 17 07 00 00	 jmp	 $LN1@s370_ecpsv
$LN19@s370_ecpsv:
  002b2	b8 08 00 00 00	 mov	 eax, 8
  002b7	48 6b c0 07	 imul	 rax, rax, 7
  002bb	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002c3	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  002ca	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  002cf	85 c0		 test	 eax, eax
  002d1	75 05		 jne	 SHORT $LN21@s370_ecpsv
  002d3	e9 f1 06 00 00	 jmp	 $LN1@s370_ecpsv
$LN21@s370_ecpsv:
  002d8	48 8b 05 88 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+136
  002df	48 ff c0	 inc	 rax
  002e2	48 89 05 88 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+136, rax
  002e9	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+152
  002ef	c1 e8 02	 shr	 eax, 2
  002f2	83 e0 01	 and	 eax, 1
  002f5	85 c0		 test	 eax, eax
  002f7	74 53		 je	 SHORT $LN22@s370_ecpsv
  002f9	b9 01 00 00 00	 mov	 ecx, 1
  002fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00304	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172200
  0030b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00310	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172201
  00317	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0031c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172202
  00323	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00328	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0032d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00333	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172203
  0033a	ba df 09 00 00	 mov	 edx, 2527		; 000009dfH
  0033f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172204
  00346	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN22@s370_ecpsv:

; 2528 : 
; 2529 :     /* Obtain the Device address */
; 2530 :     rdev=(effective_addr1 & 0xfff);

  0034c	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00350	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00355	66 89 44 24 40	 mov	 WORD PTR rdev$[rsp], ax

; 2531 :     /* And the DMKRIO tables addresses */
; 2532 :     arioct=effective_addr2;

  0035a	8b 44 24 48	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  0035e	89 44 24 5c	 mov	 DWORD PTR arioct$[rsp], eax

; 2533 : 
; 2534 :     DEBUG_CPASSISTX(SCNRU,MSGBUF(buf, "ECPS:VM SCNRU called; RDEV=%4.4X ARIOCT=%6.6X",effective_addr1,arioct));

  00362	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+152
  00368	c1 e8 02	 shr	 eax, 2
  0036b	83 e0 01	 and	 eax, 1
  0036e	85 c0		 test	 eax, eax
  00370	74 27		 je	 SHORT $LN23@s370_ecpsv
  00372	8b 44 24 5c	 mov	 eax, DWORD PTR arioct$[rsp]
  00376	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0037a	44 8b 4c 24 44	 mov	 r9d, DWORD PTR effective_addr1$[rsp]
  0037f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172206
  00386	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0038b	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00393	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN23@s370_ecpsv:

; 2535 :     DEBUG_CPASSISTX(SCNRU,WRMSG(HHC90000, "D", buf));

  00399	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+152
  0039f	c1 e8 02	 shr	 eax, 2
  003a2	83 e0 01	 and	 eax, 1
  003a5	85 c0		 test	 eax, eax
  003a7	74 54		 je	 SHORT $LN24@s370_ecpsv
  003a9	b9 01 00 00 00	 mov	 ecx, 1
  003ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003b4	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  003bc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172208
  003c8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172209
  003d4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003d9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003de	41 b9 03 00 00
	00		 mov	 r9d, 3
  003e4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172210
  003eb	ba e7 09 00 00	 mov	 edx, 2535		; 000009e7H
  003f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172211
  003f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN24@s370_ecpsv:

; 2536 : 
; 2537 :     /* Get the Channel Index Table */
; 2538 :     rchixtbl= EVM_L(effective_addr2);

  003fd	8b 44 24 48	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00401	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00406	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0040e	ba fe ff ff ff	 mov	 edx, -2
  00413	8b c8		 mov	 ecx, eax
  00415	e8 00 00 00 00	 call	 s370_vfetch4
  0041a	89 44 24 74	 mov	 DWORD PTR rchixtbl$[rsp], eax

; 2539 : 
; 2540 :     /* Obtain the RCH offset */
; 2541 :     chix=EVM_LH(rchixtbl+((rdev & 0xf00) >> 7));

  0041e	0f b7 44 24 40	 movzx	 eax, WORD PTR rdev$[rsp]
  00423	25 00 0f 00 00	 and	 eax, 3840		; 00000f00H
  00428	c1 f8 07	 sar	 eax, 7
  0042b	8b 4c 24 74	 mov	 ecx, DWORD PTR rchixtbl$[rsp]
  0042f	03 c8		 add	 ecx, eax
  00431	8b c1		 mov	 eax, ecx
  00433	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00438	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00440	ba fe ff ff ff	 mov	 edx, -2
  00445	8b c8		 mov	 ecx, eax
  00447	e8 00 00 00 00	 call	 s370_vfetch2
  0044c	0f b7 c0	 movzx	 eax, ax
  0044f	89 44 24 64	 mov	 DWORD PTR chix$[rsp], eax

; 2542 : 
; 2543 :     DEBUG_CPASSISTX(SCNRU,MSGBUF(buf, "ECPS:VM SCNRU : RCH IX = %x",chix));

  00453	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+152
  00459	c1 e8 02	 shr	 eax, 2
  0045c	83 e0 01	 and	 eax, 1
  0045f	85 c0		 test	 eax, eax
  00461	74 1f		 je	 SHORT $LN25@s370_ecpsv
  00463	44 8b 4c 24 64	 mov	 r9d, DWORD PTR chix$[rsp]
  00468	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172213
  0046f	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00474	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0047c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN25@s370_ecpsv:

; 2544 :     DEBUG_CPASSISTX(SCNRU,WRMSG(HHC90000, "D", buf));

  00482	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+152
  00488	c1 e8 02	 shr	 eax, 2
  0048b	83 e0 01	 and	 eax, 1
  0048e	85 c0		 test	 eax, eax
  00490	74 54		 je	 SHORT $LN26@s370_ecpsv
  00492	b9 01 00 00 00	 mov	 ecx, 1
  00497	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0049d	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  004a5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172215
  004b1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172216
  004bd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004c2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004c7	41 b9 03 00 00
	00		 mov	 r9d, 3
  004cd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172217
  004d4	ba f0 09 00 00	 mov	 edx, 2544		; 000009f0H
  004d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172218
  004e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN26@s370_ecpsv:

; 2545 : 
; 2546 :     /* Check if Bit 0 set (no RCH) */
; 2547 :     if(chix & 0x8000)

  004e6	8b 44 24 64	 mov	 eax, DWORD PTR chix$[rsp]
  004ea	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  004ef	85 c0		 test	 eax, eax
  004f1	74 05		 je	 SHORT $LN27@s370_ecpsv

; 2548 :     {
; 2549 :         // WRMSG(HHC90000, "D", "ECPS:VM SCNRU : NO CHANNEL");
; 2550 :         /*
; 2551 :         regs->GR_L(6)=~0;
; 2552 :         regs->GR_L(7)=~0;
; 2553 :         regs->GR_L(8)=~0;
; 2554 :         SET_PSW_IA_AND_MAYBE_IP(regs, regs->GR_L(14));
; 2555 :         regs->psw.cc=1;
; 2556 :         */
; 2557 :         /* Right now, let CP handle the case */
; 2558 :         return;

  004f3	e9 d1 04 00 00	 jmp	 $LN1@s370_ecpsv
$LN27@s370_ecpsv:

; 2559 :     }
; 2560 : 
; 2561 :     /* Obtain the RCH Table pointer */
; 2562 :     rchtbl=EVM_L(arioct+4);

  004f8	8b 44 24 5c	 mov	 eax, DWORD PTR arioct$[rsp]
  004fc	83 c0 04	 add	 eax, 4
  004ff	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00504	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0050c	ba fe ff ff ff	 mov	 edx, -2
  00511	8b c8		 mov	 ecx, eax
  00513	e8 00 00 00 00	 call	 s370_vfetch4
  00518	89 44 24 78	 mov	 DWORD PTR rchtbl$[rsp], eax

; 2563 : 
; 2564 :     /* Add the RCH Index offset */
; 2565 :     rchblk=rchtbl+chix;

  0051c	8b 44 24 64	 mov	 eax, DWORD PTR chix$[rsp]
  00520	8b 4c 24 78	 mov	 ecx, DWORD PTR rchtbl$[rsp]
  00524	03 c8		 add	 ecx, eax
  00526	8b c1		 mov	 eax, ecx
  00528	89 44 24 60	 mov	 DWORD PTR rchblk$[rsp], eax

; 2566 : 
; 2567 :     /* Try to obtain RCU index with bits 8-12 of the device */
; 2568 :     cuix=EVM_LH(rchblk+0x20+((rdev & 0xf8)>>2));

  0052c	0f b7 44 24 40	 movzx	 eax, WORD PTR rdev$[rsp]
  00531	25 f8 00 00 00	 and	 eax, 248		; 000000f8H
  00536	c1 f8 02	 sar	 eax, 2
  00539	8b 4c 24 60	 mov	 ecx, DWORD PTR rchblk$[rsp]
  0053d	8d 44 01 20	 lea	 eax, DWORD PTR [rcx+rax+32]
  00541	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00546	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0054e	ba fe ff ff ff	 mov	 edx, -2
  00553	8b c8		 mov	 ecx, eax
  00555	e8 00 00 00 00	 call	 s370_vfetch2
  0055a	0f b7 c0	 movzx	 eax, ax
  0055d	89 44 24 50	 mov	 DWORD PTR cuix$[rsp], eax

; 2569 :     if(cuix & 0x8000)

  00561	8b 44 24 50	 mov	 eax, DWORD PTR cuix$[rsp]
  00565	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  0056a	85 c0		 test	 eax, eax
  0056c	74 47		 je	 SHORT $LN28@s370_ecpsv

; 2570 :     {
; 2571 :         /* Try with bits 8-11 */
; 2572 :         cuix=EVM_LH(rchblk+0x20+((rdev & 0xf0)>>2));

  0056e	0f b7 44 24 40	 movzx	 eax, WORD PTR rdev$[rsp]
  00573	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  00578	c1 f8 02	 sar	 eax, 2
  0057b	8b 4c 24 60	 mov	 ecx, DWORD PTR rchblk$[rsp]
  0057f	8d 44 01 20	 lea	 eax, DWORD PTR [rcx+rax+32]
  00583	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00588	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00590	ba fe ff ff ff	 mov	 edx, -2
  00595	8b c8		 mov	 ecx, eax
  00597	e8 00 00 00 00	 call	 s370_vfetch2
  0059c	0f b7 c0	 movzx	 eax, ax
  0059f	89 44 24 50	 mov	 DWORD PTR cuix$[rsp], eax

; 2573 :         if(cuix & 0x8000)

  005a3	8b 44 24 50	 mov	 eax, DWORD PTR cuix$[rsp]
  005a7	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  005ac	85 c0		 test	 eax, eax
  005ae	74 05		 je	 SHORT $LN29@s370_ecpsv

; 2574 :         {
; 2575 :             // WRMSG(HHC90000, "D", "ECPS:VM SCNRU : NO CONTROL UNIT");
; 2576 :             /*
; 2577 :             regs->GR_L(6)=rchblk;
; 2578 :             regs->GR_L(7)=~0;
; 2579 :             regs->GR_L(8)=~0;
; 2580 :             SET_PSW_IA_AND_MAYBE_IP(regs, regs->GR_L(14));
; 2581 :             regs->psw.cc=2;
; 2582 :             */
; 2583 :             return;

  005b0	e9 14 04 00 00	 jmp	 $LN1@s370_ecpsv
$LN29@s370_ecpsv:
$LN28@s370_ecpsv:

; 2584 :         }
; 2585 :     }
; 2586 :     DEBUG_CPASSISTX(SCNRU,MSGBUF(buf, "ECPS:VM SCNRU : RCU IX = %x",cuix));

  005b5	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+152
  005bb	c1 e8 02	 shr	 eax, 2
  005be	83 e0 01	 and	 eax, 1
  005c1	85 c0		 test	 eax, eax
  005c3	74 1f		 je	 SHORT $LN30@s370_ecpsv
  005c5	44 8b 4c 24 50	 mov	 r9d, DWORD PTR cuix$[rsp]
  005ca	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172223
  005d1	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  005d6	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  005de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN30@s370_ecpsv:

; 2587 :     DEBUG_CPASSISTX(SCNRU,WRMSG(HHC90000, "D", buf));

  005e4	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+152
  005ea	c1 e8 02	 shr	 eax, 2
  005ed	83 e0 01	 and	 eax, 1
  005f0	85 c0		 test	 eax, eax
  005f2	74 54		 je	 SHORT $LN31@s370_ecpsv
  005f4	b9 01 00 00 00	 mov	 ecx, 1
  005f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005ff	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00607	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0060c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172225
  00613	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00618	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172226
  0061f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00624	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00629	41 b9 03 00 00
	00		 mov	 r9d, 3
  0062f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172227
  00636	ba 1b 0a 00 00	 mov	 edx, 2587		; 00000a1bH
  0063b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172228
  00642	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN31@s370_ecpsv:

; 2588 :     rcutbl=EVM_L(arioct+8);

  00648	8b 44 24 5c	 mov	 eax, DWORD PTR arioct$[rsp]
  0064c	83 c0 08	 add	 eax, 8
  0064f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00654	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0065c	ba fe ff ff ff	 mov	 edx, -2
  00661	8b c8		 mov	 ecx, eax
  00663	e8 00 00 00 00	 call	 s370_vfetch4
  00668	89 44 24 7c	 mov	 DWORD PTR rcutbl$[rsp], eax

; 2589 :     rcublk=rcutbl+cuix;

  0066c	8b 44 24 50	 mov	 eax, DWORD PTR cuix$[rsp]
  00670	8b 4c 24 7c	 mov	 ecx, DWORD PTR rcutbl$[rsp]
  00674	03 c8		 add	 ecx, eax
  00676	8b c1		 mov	 eax, ecx
  00678	89 44 24 4c	 mov	 DWORD PTR rcublk$[rsp], eax

; 2590 :     dvix=EVM_LH(rcublk+0x28+((rdev & 0x00f)<<1));

  0067c	0f b7 44 24 40	 movzx	 eax, WORD PTR rdev$[rsp]
  00681	83 e0 0f	 and	 eax, 15
  00684	8b 4c 24 4c	 mov	 ecx, DWORD PTR rcublk$[rsp]
  00688	8d 44 41 28	 lea	 eax, DWORD PTR [rcx+rax*2+40]
  0068c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00691	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00699	ba fe ff ff ff	 mov	 edx, -2
  0069e	8b c8		 mov	 ecx, eax
  006a0	e8 00 00 00 00	 call	 s370_vfetch2
  006a5	0f b7 c0	 movzx	 eax, ax
  006a8	89 44 24 54	 mov	 DWORD PTR dvix$[rsp], eax

; 2591 :     if(EVM_IC(rcublk+5)&0x40)

  006ac	8b 44 24 4c	 mov	 eax, DWORD PTR rcublk$[rsp]
  006b0	83 c0 05	 add	 eax, 5
  006b3	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  006b8	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  006c0	ba fe ff ff ff	 mov	 edx, -2
  006c5	8b c8		 mov	 ecx, eax
  006c7	e8 00 00 00 00	 call	 s370_vfetchb
  006cc	0f b6 c0	 movzx	 eax, al
  006cf	83 e0 40	 and	 eax, 64			; 00000040H
  006d2	85 c0		 test	 eax, eax
  006d4	74 24		 je	 SHORT $LN32@s370_ecpsv

; 2592 :     {
; 2593 :         rcublk=EVM_L(rcublk+0x10);

  006d6	8b 44 24 4c	 mov	 eax, DWORD PTR rcublk$[rsp]
  006da	83 c0 10	 add	 eax, 16
  006dd	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  006e2	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  006ea	ba fe ff ff ff	 mov	 edx, -2
  006ef	8b c8		 mov	 ecx, eax
  006f1	e8 00 00 00 00	 call	 s370_vfetch4
  006f6	89 44 24 4c	 mov	 DWORD PTR rcublk$[rsp], eax
$LN32@s370_ecpsv:

; 2594 :     }
; 2595 :     if(dvix & 0x8000)

  006fa	8b 44 24 54	 mov	 eax, DWORD PTR dvix$[rsp]
  006fe	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00703	85 c0		 test	 eax, eax
  00705	74 05		 je	 SHORT $LN33@s370_ecpsv

; 2596 :     {
; 2597 :         // WRMSG(HHC90000, "D", "ECPS:VM SCNRU : NO RDEVBLOK");
; 2598 :         /*
; 2599 :         regs->GR_L(6)=rchblk;
; 2600 :         regs->GR_L(7)=rcublk;
; 2601 :         regs->GR_L(8)=~0;
; 2602 :         SET_PSW_IA_AND_MAYBE_IP(regs, regs->GR_L(14));
; 2603 :         regs->psw.cc=3;
; 2604 :         */
; 2605 :         return;

  00707	e9 bd 02 00 00	 jmp	 $LN1@s370_ecpsv
$LN33@s370_ecpsv:

; 2606 :     }
; 2607 :     DEBUG_CPASSISTX(SCNRU,MSGBUF(buf, "ECPS:VM SCNRU : RDV IX = %x",dvix));

  0070c	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+152
  00712	c1 e8 02	 shr	 eax, 2
  00715	83 e0 01	 and	 eax, 1
  00718	85 c0		 test	 eax, eax
  0071a	74 1f		 je	 SHORT $LN34@s370_ecpsv
  0071c	44 8b 4c 24 54	 mov	 r9d, DWORD PTR dvix$[rsp]
  00721	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172232
  00728	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0072d	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00735	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN34@s370_ecpsv:

; 2608 :     DEBUG_CPASSISTX(SCNRU,WRMSG(HHC90000, "D", buf));

  0073b	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+152
  00741	c1 e8 02	 shr	 eax, 2
  00744	83 e0 01	 and	 eax, 1
  00747	85 c0		 test	 eax, eax
  00749	74 54		 je	 SHORT $LN35@s370_ecpsv
  0074b	b9 01 00 00 00	 mov	 ecx, 1
  00750	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00756	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0075e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00763	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172234
  0076a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0076f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172235
  00776	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0077b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00780	41 b9 03 00 00
	00		 mov	 r9d, 3
  00786	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172236
  0078d	ba 30 0a 00 00	 mov	 edx, 2608		; 00000a30H
  00792	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172237
  00799	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN35@s370_ecpsv:

; 2609 :     dvix<<=3;

  0079f	8b 44 24 54	 mov	 eax, DWORD PTR dvix$[rsp]
  007a3	c1 e0 03	 shl	 eax, 3
  007a6	89 44 24 54	 mov	 DWORD PTR dvix$[rsp], eax

; 2610 :     rdvtbl=EVM_L(arioct+12);

  007aa	8b 44 24 5c	 mov	 eax, DWORD PTR arioct$[rsp]
  007ae	83 c0 0c	 add	 eax, 12
  007b1	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  007b6	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  007be	ba fe ff ff ff	 mov	 edx, -2
  007c3	8b c8		 mov	 ecx, eax
  007c5	e8 00 00 00 00	 call	 s370_vfetch4
  007ca	89 84 24 80 00
	00 00		 mov	 DWORD PTR rdvtbl$[rsp], eax

; 2611 :     rdvblk=rdvtbl+dvix;

  007d1	8b 44 24 54	 mov	 eax, DWORD PTR dvix$[rsp]
  007d5	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR rdvtbl$[rsp]
  007dc	03 c8		 add	 ecx, eax
  007de	8b c1		 mov	 eax, ecx
  007e0	89 44 24 70	 mov	 DWORD PTR rdvblk$[rsp], eax

; 2612 :     DEBUG_CPASSISTX(SCNRU,MSGBUF(buf, "ECPS:VM SCNRU : RCH = %6.6X, RCU = %6.6X, RDV = %6.6X",rchblk,rcublk,rdvblk));

  007e4	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+152
  007ea	c1 e8 02	 shr	 eax, 2
  007ed	83 e0 01	 and	 eax, 1
  007f0	85 c0		 test	 eax, eax
  007f2	74 2f		 je	 SHORT $LN36@s370_ecpsv
  007f4	8b 44 24 70	 mov	 eax, DWORD PTR rdvblk$[rsp]
  007f8	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  007fc	8b 44 24 4c	 mov	 eax, DWORD PTR rcublk$[rsp]
  00800	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00804	44 8b 4c 24 60	 mov	 r9d, DWORD PTR rchblk$[rsp]
  00809	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172239
  00810	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00815	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0081d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN36@s370_ecpsv:

; 2613 :     DEBUG_CPASSISTX(SCNRU,WRMSG(HHC90000, "D", buf));

  00823	8b 05 98 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+152
  00829	c1 e8 02	 shr	 eax, 2
  0082c	83 e0 01	 and	 eax, 1
  0082f	85 c0		 test	 eax, eax
  00831	74 54		 je	 SHORT $LN37@s370_ecpsv
  00833	b9 01 00 00 00	 mov	 ecx, 1
  00838	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0083e	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00846	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0084b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172241
  00852	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00857	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172242
  0085e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00863	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00868	41 b9 03 00 00
	00		 mov	 r9d, 3
  0086e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172243
  00875	ba 35 0a 00 00	 mov	 edx, 2613		; 00000a35H
  0087a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172244
  00881	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN37@s370_ecpsv:

; 2614 :     regs->GR_L(6)=rchblk;

  00887	b8 08 00 00 00	 mov	 eax, 8
  0088c	48 6b c0 06	 imul	 rax, rax, 6
  00890	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00898	8b 54 24 60	 mov	 edx, DWORD PTR rchblk$[rsp]
  0089c	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 2615 :     regs->GR_L(7)=rcublk;

  008a3	b8 08 00 00 00	 mov	 eax, 8
  008a8	48 6b c0 07	 imul	 rax, rax, 7
  008ac	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  008b4	8b 54 24 4c	 mov	 edx, DWORD PTR rcublk$[rsp]
  008b8	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 2616 :     regs->GR_L(8)=rdvblk;

  008bf	b8 08 00 00 00	 mov	 eax, 8
  008c4	48 6b c0 08	 imul	 rax, rax, 8
  008c8	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  008d0	8b 54 24 70	 mov	 edx, DWORD PTR rdvblk$[rsp]
  008d4	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 2617 :     regs->psw.cc=0;

  008db	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  008e3	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 2618 :     regs->GR_L(15)=0;

  008e7	b8 08 00 00 00	 mov	 eax, 8
  008ec	48 6b c0 0f	 imul	 rax, rax, 15
  008f0	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  008f8	c7 84 01 80 02
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax+640], 0
$LN10@s370_ecpsv:

; 2619 :     BR14;

  00903	b8 08 00 00 00	 mov	 eax, 8
  00908	48 6b c0 0e	 imul	 rax, rax, 14
  0090c	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00914	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0091b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00920	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00928	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  0092e	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00936	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  0093e	74 6e		 je	 SHORT $LN38@s370_ecpsv
  00940	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00948	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0094e	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00953	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0095b	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00961	75 38		 jne	 SHORT $LN39@s370_ecpsv
  00963	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0096b	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00971	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00976	8b c0		 mov	 eax, eax
  00978	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00980	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00987	48 0b c8	 or	 rcx, rax
  0098a	48 8b c1	 mov	 rax, rcx
  0098d	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00995	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00999	eb 13		 jmp	 SHORT $LN40@s370_ecpsv
$LN39@s370_ecpsv:
  0099b	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  009a3	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN40@s370_ecpsv:
$LN38@s370_ecpsv:
  009ae	33 c0		 xor	 eax, eax
  009b0	85 c0		 test	 eax, eax
  009b2	0f 85 4b ff ff
	ff		 jne	 $LN10@s370_ecpsv

; 2620 :     CPASSIST_HIT(SCNRU);

  009b8	48 8b 05 90 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+144
  009bf	48 ff c0	 inc	 rax
  009c2	48 89 05 90 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+144, rax
$LN1@s370_ecpsv:
$LN41@s370_ecpsv:

; 2621 : }

  009c9	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  009d1	48 33 cc	 xor	 rcx, rsp
  009d4	e8 00 00 00 00	 call	 __security_check_cookie
  009d9	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  009e0	c3		 ret	 0
s370_ecpsvm_locate_rblock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
B_VMRSTAT$ = 64
vmb$ = 68
extendmsk$ = 72
B_CPSTATUS$ = 73
B_VMPSTAT$ = 74
H_XINTMASK$ = 76
dlist$ = 80
DISPCNT$ = 84
elist$ = 88
F_VMPXINT$ = 92
F_VMIOINT$ = 96
B_VMDSTAT$ = 100
B_VMPEND$ = 101
B_VMESTAT$ = 102
iomask$ = 104
F_VMPSWHI$ = 108
effective_addr1$ = 112
effective_addr2$ = 116
temp$1 = 120
F_VMVCR0$ = 124
F_VMVCR2$ = 128
b1$ = 132
b2$ = 136
tv242 = 140
OXINT$ = 144
buf$ = 160
__$ArrayPad$ = 416
inst$ = 448
regs$ = 456
s370_ecpsvm_dispatch_main PROC

; 2185 : {

$LN123:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec b8 01
	00 00		 sub	 rsp, 440		; 000001b8H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2186 :     char buf[256];
; 2187 :     VADR dlist;
; 2188 :     VADR elist;
; 2189 :     VADR vmb;
; 2190 :     /* PSA Fetched Values */
; 2191 :     BYTE B_CPSTATUS;
; 2192 :     BYTE B_VMDSTAT;
; 2193 :     BYTE B_VMPSTAT;
; 2194 :     BYTE B_VMRSTAT;
; 2195 :     BYTE B_VMPEND;
; 2196 :     BYTE B_VMESTAT;
; 2197 : 
; 2198 :     VADR F_VMPXINT;
; 2199 :     VADR OXINT; /* Back chain ptr for exit 20 */
; 2200 :     U32  F_VMPSWHI;
; 2201 :     U32  F_VMVCR0;
; 2202 :     U32  F_VMIOINT;
; 2203 :     U32 F_VMVCR2;
; 2204 :     U32 DISPCNT;
; 2205 : 
; 2206 :     U16  H_XINTMASK;
; 2207 : 
; 2208 :     U32 iomask;
; 2209 :     BYTE extendmsk;     /* Extended I/O mask */
; 2210 : 
; 2211 :     ECPSVM_PROLOG(DISP0);

  00023	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  0002b	48 83 c0 02	 add	 rax, 2
  0002f	48 8b c8	 mov	 rcx, rax
  00032	e8 00 00 00 00	 call	 fetch_fw_noswap
  00037	8b c8		 mov	 ecx, eax
  00039	e8 00 00 00 00	 call	 _byteswap_ulong
  0003e	89 44 24 78	 mov	 DWORD PTR temp$1[rsp], eax
  00042	8b 44 24 78	 mov	 eax, DWORD PTR temp$1[rsp]
  00046	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0004b	89 44 24 74	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0004f	8b 44 24 78	 mov	 eax, DWORD PTR temp$1[rsp]
  00053	c1 e8 0c	 shr	 eax, 12
  00056	83 e0 0f	 and	 eax, 15
  00059	89 84 24 88 00
	00 00		 mov	 DWORD PTR b2$[rsp], eax
  00060	8b 44 24 78	 mov	 eax, DWORD PTR temp$1[rsp]
  00064	c1 e8 10	 shr	 eax, 16
  00067	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0006c	89 44 24 70	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00070	8b 44 24 78	 mov	 eax, DWORD PTR temp$1[rsp]
  00074	c1 e8 1c	 shr	 eax, 28
  00077	83 e0 0f	 and	 eax, 15
  0007a	89 84 24 84 00
	00 00		 mov	 DWORD PTR b1$[rsp], eax
  00081	83 bc 24 84 00
	00 00 00	 cmp	 DWORD PTR b1$[rsp], 0
  00089	74 30		 je	 SHORT $LN37@s370_ecpsv
  0008b	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR b1$[rsp]
  00093	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000a2	8b 4c 24 70	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  000a6	03 c8		 add	 ecx, eax
  000a8	8b c1		 mov	 eax, ecx
  000aa	89 44 24 70	 mov	 DWORD PTR effective_addr1$[rsp], eax
  000ae	8b 44 24 70	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  000b2	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000b7	89 44 24 70	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN37@s370_ecpsv:
  000bb	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR b2$[rsp], 0
  000c3	74 30		 je	 SHORT $LN38@s370_ecpsv
  000c5	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR b2$[rsp]
  000cd	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000d5	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000dc	8b 4c 24 74	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000e0	03 c8		 add	 ecx, eax
  000e2	8b c1		 mov	 eax, ecx
  000e4	89 44 24 74	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000e8	8b 44 24 74	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000ec	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000f1	89 44 24 74	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN38@s370_ecpsv:
$LN4@s370_ecpsv:
  000f5	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000fd	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00101	48 83 c0 06	 add	 rax, 6
  00105	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0010d	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00111	33 c0		 xor	 eax, eax
  00113	83 f8 06	 cmp	 eax, 6
  00116	74 0f		 je	 SHORT $LN39@s370_ecpsv
  00118	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00120	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN39@s370_ecpsv:
  00127	33 c0		 xor	 eax, eax
  00129	85 c0		 test	 eax, eax
  0012b	75 c8		 jne	 SHORT $LN4@s370_ecpsv
  0012d	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00135	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00139	83 e0 01	 and	 eax, 1
  0013c	85 c0		 test	 eax, eax
  0013e	74 1b		 je	 SHORT $LN40@s370_ecpsv
  00140	ba 02 00 00 00	 mov	 edx, 2
  00145	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0014d	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00155	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN40@s370_ecpsv:
$LN7@s370_ecpsv:
  0015b	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00163	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00169	d1 e8		 shr	 eax, 1
  0016b	83 e0 01	 and	 eax, 1
  0016e	85 c0		 test	 eax, eax
  00170	74 1b		 je	 SHORT $LN41@s370_ecpsv
  00172	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0017a	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00180	ba fc ff ff ff	 mov	 edx, -4
  00185	48 8b c8	 mov	 rcx, rax
  00188	e8 00 00 00 00	 call	 longjmp
$LN41@s370_ecpsv:
  0018d	33 c0		 xor	 eax, eax
  0018f	85 c0		 test	 eax, eax
  00191	75 c8		 jne	 SHORT $LN7@s370_ecpsv
  00193	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0019a	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  001a0	c1 e8 11	 shr	 eax, 17
  001a3	83 e0 01	 and	 eax, 1
  001a6	85 c0		 test	 eax, eax
  001a8	75 75		 jne	 SHORT $LN42@s370_ecpsv
  001aa	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  001b0	c1 e8 02	 shr	 eax, 2
  001b3	83 e0 01	 and	 eax, 1
  001b6	85 c0		 test	 eax, eax
  001b8	74 53		 je	 SHORT $LN43@s370_ecpsv
  001ba	b9 01 00 00 00	 mov	 ecx, 1
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171956
  001cc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171957
  001d8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171958
  001e4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001e9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ee	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171959
  001fb	ba a3 08 00 00	 mov	 edx, 2211		; 000008a3H
  00200	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171960
  00207	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN43@s370_ecpsv:
  0020d	ba 01 00 00 00	 mov	 edx, 1
  00212	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0021a	e8 00 00 00 00	 call	 s370_program_interrupt
$LN42@s370_ecpsv:
  0021f	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00227	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  0022b	83 e0 01	 and	 eax, 1
  0022e	85 c0		 test	 eax, eax
  00230	74 1b		 je	 SHORT $LN44@s370_ecpsv
  00232	ba 02 00 00 00	 mov	 edx, 2
  00237	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0023f	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00247	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN44@s370_ecpsv:
  0024d	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00253	d1 e8		 shr	 eax, 1
  00255	83 e0 01	 and	 eax, 1
  00258	85 c0		 test	 eax, eax
  0025a	75 68		 jne	 SHORT $LN45@s370_ecpsv
  0025c	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00262	c1 e8 02	 shr	 eax, 2
  00265	83 e0 01	 and	 eax, 1
  00268	85 c0		 test	 eax, eax
  0026a	74 53		 je	 SHORT $LN46@s370_ecpsv
  0026c	b9 01 00 00 00	 mov	 ecx, 1
  00271	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00277	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171964
  0027e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00283	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171965
  0028a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0028f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171966
  00296	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0029b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002a0	41 b9 03 00 00
	00		 mov	 r9d, 3
  002a6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171967
  002ad	ba a3 08 00 00	 mov	 edx, 2211		; 000008a3H
  002b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171968
  002b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN46@s370_ecpsv:
  002bf	e9 e9 16 00 00	 jmp	 $LN1@s370_ecpsv
$LN45@s370_ecpsv:
  002c4	b8 08 00 00 00	 mov	 eax, 8
  002c9	48 6b c0 07	 imul	 rax, rax, 7
  002cd	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002d5	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  002dc	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  002e1	85 c0		 test	 eax, eax
  002e3	75 05		 jne	 SHORT $LN47@s370_ecpsv
  002e5	e9 c3 16 00 00	 jmp	 $LN1@s370_ecpsv
$LN47@s370_ecpsv:
  002ea	48 8b 05 c8 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+200
  002f1	48 ff c0	 inc	 rax
  002f4	48 89 05 c8 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+200, rax
  002fb	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00301	c1 e8 02	 shr	 eax, 2
  00304	83 e0 01	 and	 eax, 1
  00307	85 c0		 test	 eax, eax
  00309	74 53		 je	 SHORT $LN48@s370_ecpsv
  0030b	b9 01 00 00 00	 mov	 ecx, 1
  00310	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00316	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171971
  0031d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00322	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171972
  00329	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0032e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171973
  00335	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0033a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0033f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00345	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171974
  0034c	ba a3 08 00 00	 mov	 edx, 2211		; 000008a3H
  00351	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171975
  00358	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN48@s370_ecpsv:

; 2212 : 
; 2213 :     dlist=effective_addr1;

  0035e	8b 44 24 70	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00362	89 44 24 50	 mov	 DWORD PTR dlist$[rsp], eax

; 2214 :     elist=effective_addr2;

  00366	8b 44 24 74	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  0036a	89 44 24 58	 mov	 DWORD PTR elist$[rsp], eax

; 2215 :     vmb=regs->GR_L(11);

  0036e	b8 08 00 00 00	 mov	 eax, 8
  00373	48 6b c0 0b	 imul	 rax, rax, 11
  00377	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0037f	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00386	89 44 24 44	 mov	 DWORD PTR vmb$[rsp], eax

; 2216 :     DISPCNT=EVM_L(dlist);

  0038a	8b 44 24 50	 mov	 eax, DWORD PTR dlist$[rsp]
  0038e	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00393	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0039b	ba fe ff ff ff	 mov	 edx, -2
  003a0	8b c8		 mov	 ecx, eax
  003a2	e8 00 00 00 00	 call	 s370_vfetch4
  003a7	89 44 24 54	 mov	 DWORD PTR DISPCNT$[rsp], eax

; 2217 :     DISPCNT++;

  003ab	8b 44 24 54	 mov	 eax, DWORD PTR DISPCNT$[rsp]
  003af	ff c0		 inc	 eax
  003b1	89 44 24 54	 mov	 DWORD PTR DISPCNT$[rsp], eax

; 2218 :     /* Question #1 : Are we currently running a user */
; 2219 :     B_CPSTATUS=EVM_IC(CPSTATUS);

  003b5	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  003bd	ba fe ff ff ff	 mov	 edx, -2
  003c2	b9 48 03 00 00	 mov	 ecx, 840		; 00000348H
  003c7	e8 00 00 00 00	 call	 s370_vfetchb
  003cc	88 44 24 49	 mov	 BYTE PTR B_CPSTATUS$[rsp], al

; 2220 :     if((B_CPSTATUS & CPRUN))

  003d0	0f b6 44 24 49	 movzx	 eax, BYTE PTR B_CPSTATUS$[rsp]
  003d5	83 e0 40	 and	 eax, 64			; 00000040H
  003d8	85 c0		 test	 eax, eax
  003da	0f 84 12 03 00
	00		 je	 $LN49@s370_ecpsv

; 2221 :     {
; 2222 :         DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", "DISP0 : CPRUN On"));

  003e0	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  003e6	c1 e8 02	 shr	 eax, 2
  003e9	83 e0 01	 and	 eax, 1
  003ec	85 c0		 test	 eax, eax
  003ee	74 53		 je	 SHORT $LN51@s370_ecpsv
  003f0	b9 01 00 00 00	 mov	 ecx, 1
  003f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171979
  00402	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00407	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171980
  0040e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00413	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171981
  0041a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0041f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00424	41 b9 03 00 00
	00		 mov	 r9d, 3
  0042a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171982
  00431	ba ae 08 00 00	 mov	 edx, 2222		; 000008aeH
  00436	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171983
  0043d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN51@s370_ecpsv:

; 2223 :         switch(ecpsvm_disp_runtime(regs,&vmb,dlist,elist))

  00443	44 8b 4c 24 58	 mov	 r9d, DWORD PTR elist$[rsp]
  00448	44 8b 44 24 50	 mov	 r8d, DWORD PTR dlist$[rsp]
  0044d	48 8d 54 24 44	 lea	 rdx, QWORD PTR vmb$[rsp]
  00452	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0045a	e8 00 00 00 00	 call	 ecpsvm_disp_runtime
  0045f	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv242[rsp], eax
  00466	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR tv242[rsp], 0
  0046e	74 0c		 je	 SHORT $LN52@s370_ecpsv
  00470	83 bc 24 8c 00
	00 00 01	 cmp	 DWORD PTR tv242[rsp], 1
  00478	74 3a		 je	 SHORT $LN53@s370_ecpsv
  0047a	eb 3d		 jmp	 SHORT $LN54@s370_ecpsv
$LN52@s370_ecpsv:

; 2224 :         {
; 2225 :             case 0: /* Exit taken - success */
; 2226 :             EVM_ST(DISPCNT,dlist);

  0047c	8b 44 24 50	 mov	 eax, DWORD PTR dlist$[rsp]
  00480	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00485	4c 8b 8c 24 c8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0048d	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00493	8b d0		 mov	 edx, eax
  00495	8b 4c 24 54	 mov	 ecx, DWORD PTR DISPCNT$[rsp]
  00499	e8 00 00 00 00	 call	 s370_vstore4

; 2227 :             CPASSIST_HIT(DISP0);

  0049e	48 8b 05 d0 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+208
  004a5	48 ff c0	 inc	 rax
  004a8	48 89 05 d0 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+208, rax

; 2228 :             return;

  004af	e9 f9 14 00 00	 jmp	 $LN1@s370_ecpsv
$LN53@s370_ecpsv:

; 2229 :             case 1: /* no-op DISP0 */
; 2230 :             return;

  004b4	e9 f4 14 00 00	 jmp	 $LN1@s370_ecpsv
$LN54@s370_ecpsv:

; 2231 :             default: /* Continue processing */
; 2232 :             break;
; 2233 :         }
; 2234 :         /* Load VMDSTAT */
; 2235 :         B_VMDSTAT=EVM_IC(vmb+VMDSTAT);

  004b9	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  004bd	83 c0 59	 add	 eax, 89			; 00000059H
  004c0	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  004c5	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  004cd	ba fe ff ff ff	 mov	 edx, -2
  004d2	8b c8		 mov	 ecx, eax
  004d4	e8 00 00 00 00	 call	 s370_vfetchb
  004d9	88 44 24 64	 mov	 BYTE PTR B_VMDSTAT$[rsp], al

; 2236 :         /* Check if I/O Old PSW has tranlation on */
; 2237 :         if(regs->mainstor[0x38] & 0x04)

  004dd	b8 01 00 00 00	 mov	 eax, 1
  004e2	48 6b c0 38	 imul	 rax, rax, 56		; 00000038H
  004e6	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004ee	48 8b 89 48 08
	00 00		 mov	 rcx, QWORD PTR [rcx+2120]
  004f5	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  004f9	83 e0 04	 and	 eax, 4
  004fc	85 c0		 test	 eax, eax
  004fe	0f 84 e9 01 00
	00		 je	 $LN55@s370_ecpsv

; 2238 :         {
; 2239 :             DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", "DISP0 : I/O Old as XLATE on"));

  00504	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  0050a	c1 e8 02	 shr	 eax, 2
  0050d	83 e0 01	 and	 eax, 1
  00510	85 c0		 test	 eax, eax
  00512	74 53		 je	 SHORT $LN56@s370_ecpsv
  00514	b9 01 00 00 00	 mov	 ecx, 1
  00519	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0051f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171989
  00526	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0052b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171990
  00532	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00537	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171991
  0053e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00543	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00548	41 b9 03 00 00
	00		 mov	 r9d, 3
  0054e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171992
  00555	ba bf 08 00 00	 mov	 edx, 2239		; 000008bfH
  0055a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171993
  00561	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN56@s370_ecpsv:

; 2240 :             /* Yes - I/O Interrupt while running a USER */
; 2241 :             if(B_VMDSTAT & VMDSP)

  00567	0f b6 44 24 64	 movzx	 eax, BYTE PTR B_VMDSTAT$[rsp]
  0056c	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00571	85 c0		 test	 eax, eax
  00573	0f 84 74 01 00
	00		 je	 $LN57@s370_ecpsv

; 2242 :             {
; 2243 :                 DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", "DISP0 : VMDSP on in VMBLOK - Clean status (Exit #36)"));

  00579	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  0057f	c1 e8 02	 shr	 eax, 2
  00582	83 e0 01	 and	 eax, 1
  00585	85 c0		 test	 eax, eax
  00587	74 53		 je	 SHORT $LN58@s370_ecpsv
  00589	b9 01 00 00 00	 mov	 ecx, 1
  0058e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00594	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171996
  0059b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171997
  005a7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171998
  005b3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005b8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005bd	41 b9 03 00 00
	00		 mov	 r9d, 3
  005c3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171999
  005ca	ba c3 08 00 00	 mov	 edx, 2243		; 000008c3H
  005cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172000
  005d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN58@s370_ecpsv:

; 2244 :                 /* Clean status - Do exit 36 */
; 2245 :                 regs->GR_L(11)=vmb;

  005dc	b8 08 00 00 00	 mov	 eax, 8
  005e1	48 6b c0 0b	 imul	 rax, rax, 11
  005e5	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005ed	8b 54 24 44	 mov	 edx, DWORD PTR vmb$[rsp]
  005f1	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
$LN12@s370_ecpsv:

; 2246 :                 SET_PSW_IA_AND_MAYBE_IP(regs, EVM_L(elist+36));

  005f8	8b 44 24 58	 mov	 eax, DWORD PTR elist$[rsp]
  005fc	83 c0 24	 add	 eax, 36			; 00000024H
  005ff	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00604	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0060c	ba fe ff ff ff	 mov	 edx, -2
  00611	8b c8		 mov	 ecx, eax
  00613	e8 00 00 00 00	 call	 s370_vfetch4
  00618	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0061d	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00625	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  0062b	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00633	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  0063b	74 6e		 je	 SHORT $LN59@s370_ecpsv
  0063d	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00645	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0064b	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00650	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00658	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  0065e	75 38		 jne	 SHORT $LN60@s370_ecpsv
  00660	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00668	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0066e	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00673	8b c0		 mov	 eax, eax
  00675	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0067d	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00684	48 0b c8	 or	 rcx, rax
  00687	48 8b c1	 mov	 rax, rcx
  0068a	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00692	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00696	eb 13		 jmp	 SHORT $LN61@s370_ecpsv
$LN60@s370_ecpsv:
  00698	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  006a0	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN61@s370_ecpsv:
$LN59@s370_ecpsv:
  006ab	33 c0		 xor	 eax, eax
  006ad	85 c0		 test	 eax, eax
  006af	0f 85 43 ff ff
	ff		 jne	 $LN12@s370_ecpsv

; 2247 :                 EVM_ST(DISPCNT,dlist);

  006b5	8b 44 24 50	 mov	 eax, DWORD PTR dlist$[rsp]
  006b9	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  006be	4c 8b 8c 24 c8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  006c6	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  006cc	8b d0		 mov	 edx, eax
  006ce	8b 4c 24 54	 mov	 ecx, DWORD PTR DISPCNT$[rsp]
  006d2	e8 00 00 00 00	 call	 s370_vstore4

; 2248 :                 CPASSIST_HIT(DISP0);

  006d7	48 8b 05 d0 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+208
  006de	48 ff c0	 inc	 rax
  006e1	48 89 05 d0 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+208, rax

; 2249 :                 return;

  006e8	e9 c0 12 00 00	 jmp	 $LN1@s370_ecpsv
$LN57@s370_ecpsv:
$LN55@s370_ecpsv:

; 2250 :             }
; 2251 :         }
; 2252 :     }

  006ed	e9 cd 01 00 00	 jmp	 $LN50@s370_ecpsv
$LN49@s370_ecpsv:

; 2253 :     else
; 2254 :     {
; 2255 :         DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", "DISP0 : CPRUN Off"));

  006f2	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  006f8	c1 e8 02	 shr	 eax, 2
  006fb	83 e0 01	 and	 eax, 1
  006fe	85 c0		 test	 eax, eax
  00700	74 53		 je	 SHORT $LN62@s370_ecpsv
  00702	b9 01 00 00 00	 mov	 ecx, 1
  00707	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0070d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172005
  00714	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00719	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172006
  00720	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00725	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172007
  0072c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00731	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00736	41 b9 03 00 00
	00		 mov	 r9d, 3
  0073c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172008
  00743	ba cf 08 00 00	 mov	 edx, 2255		; 000008cfH
  00748	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172009
  0074f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN62@s370_ecpsv:

; 2256 :         /* Check if was in Wait State */
; 2257 :         if(B_CPSTATUS & CPWAIT)

  00755	0f b6 44 24 49	 movzx	 eax, BYTE PTR B_CPSTATUS$[rsp]
  0075a	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0075f	85 c0		 test	 eax, eax
  00761	0f 84 58 01 00
	00		 je	 $LN63@s370_ecpsv

; 2258 :         {
; 2259 :             DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", "DISP0 : CPWAIT On : Exit #4"));

  00767	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  0076d	c1 e8 02	 shr	 eax, 2
  00770	83 e0 01	 and	 eax, 1
  00773	85 c0		 test	 eax, eax
  00775	74 53		 je	 SHORT $LN64@s370_ecpsv
  00777	b9 01 00 00 00	 mov	 ecx, 1
  0077c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00782	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172012
  00789	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0078e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172013
  00795	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0079a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172014
  007a1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007a6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007ab	41 b9 03 00 00
	00		 mov	 r9d, 3
  007b1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172015
  007b8	ba d3 08 00 00	 mov	 edx, 2259		; 000008d3H
  007bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172016
  007c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN64@s370_ecpsv:

; 2260 :             /* Take exit #4 : Coming out of wait state */
; 2261 :             /* DMKDSPC3 */
; 2262 :             /* No need to update R11 */
; 2263 :             CPASSIST_HIT(DISP0);

  007ca	48 8b 05 d0 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+208
  007d1	48 ff c0	 inc	 rax
  007d4	48 89 05 d0 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+208, rax
$LN15@s370_ecpsv:

; 2264 :             SET_PSW_IA_AND_MAYBE_IP(regs, EVM_L(elist+4));

  007db	8b 44 24 58	 mov	 eax, DWORD PTR elist$[rsp]
  007df	83 c0 04	 add	 eax, 4
  007e2	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  007e7	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  007ef	ba fe ff ff ff	 mov	 edx, -2
  007f4	8b c8		 mov	 ecx, eax
  007f6	e8 00 00 00 00	 call	 s370_vfetch4
  007fb	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00800	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00808	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  0080e	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00816	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  0081e	74 6e		 je	 SHORT $LN65@s370_ecpsv
  00820	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00828	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0082e	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00833	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0083b	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00841	75 38		 jne	 SHORT $LN66@s370_ecpsv
  00843	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0084b	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00851	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00856	8b c0		 mov	 eax, eax
  00858	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00860	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00867	48 0b c8	 or	 rcx, rax
  0086a	48 8b c1	 mov	 rax, rcx
  0086d	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00875	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00879	eb 13		 jmp	 SHORT $LN67@s370_ecpsv
$LN66@s370_ecpsv:
  0087b	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00883	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN67@s370_ecpsv:
$LN65@s370_ecpsv:
  0088e	33 c0		 xor	 eax, eax
  00890	85 c0		 test	 eax, eax
  00892	0f 85 43 ff ff
	ff		 jne	 $LN15@s370_ecpsv

; 2265 :             EVM_ST(DISPCNT,dlist);

  00898	8b 44 24 50	 mov	 eax, DWORD PTR dlist$[rsp]
  0089c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  008a1	4c 8b 8c 24 c8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  008a9	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  008af	8b d0		 mov	 edx, eax
  008b1	8b 4c 24 54	 mov	 ecx, DWORD PTR DISPCNT$[rsp]
  008b5	e8 00 00 00 00	 call	 s370_vstore4

; 2266 :             return;

  008ba	e9 ee 10 00 00	 jmp	 $LN1@s370_ecpsv
$LN63@s370_ecpsv:
$LN50@s370_ecpsv:

; 2267 :         }
; 2268 :     }
; 2269 :     /* VMB is now either original GPR11 or RUNUSER */
; 2270 :     /* DMKDSP - UNSTACK */
; 2271 :     DEBUG_CPASSISTX(DISP0,MSGBUF(buf, "DISP0 : At UNSTACK : VMBLOK = %8.8X",vmb));

  008bf	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  008c5	c1 e8 02	 shr	 eax, 2
  008c8	83 e0 01	 and	 eax, 1
  008cb	85 c0		 test	 eax, eax
  008cd	74 1f		 je	 SHORT $LN68@s370_ecpsv
  008cf	44 8b 4c 24 44	 mov	 r9d, DWORD PTR vmb$[rsp]
  008d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172021
  008db	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  008e0	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  008e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN68@s370_ecpsv:

; 2272 :     DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", buf));

  008ee	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  008f4	c1 e8 02	 shr	 eax, 2
  008f7	83 e0 01	 and	 eax, 1
  008fa	85 c0		 test	 eax, eax
  008fc	74 54		 je	 SHORT $LN69@s370_ecpsv
  008fe	b9 01 00 00 00	 mov	 ecx, 1
  00903	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00909	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00911	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00916	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172023
  0091d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00922	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172024
  00929	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0092e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00933	41 b9 03 00 00
	00		 mov	 r9d, 3
  00939	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172025
  00940	ba e0 08 00 00	 mov	 edx, 2272		; 000008e0H
  00945	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172026
  0094c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN69@s370_ecpsv:

; 2273 :     B_VMRSTAT=EVM_IC(vmb+VMRSTAT);

  00952	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  00956	83 c0 58	 add	 eax, 88			; 00000058H
  00959	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0095e	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00966	ba fe ff ff ff	 mov	 edx, -2
  0096b	8b c8		 mov	 ecx, eax
  0096d	e8 00 00 00 00	 call	 s370_vfetchb
  00972	88 44 24 40	 mov	 BYTE PTR B_VMRSTAT$[rsp], al

; 2274 :     if(B_VMRSTAT & VMCPWAIT)

  00976	0f b6 44 24 40	 movzx	 eax, BYTE PTR B_VMRSTAT$[rsp]
  0097b	25 ee 00 00 00	 and	 eax, 238		; 000000eeH
  00980	85 c0		 test	 eax, eax
  00982	0f 84 a7 01 00
	00		 je	 $LN70@s370_ecpsv

; 2275 :     {
; 2276 :         DEBUG_CPASSISTX(DISP0,MSGBUF(buf, "DISP0 : VMRSTAT VMCPWAIT On (%2.2X) - Taking exit #12",B_VMRSTAT));

  00988	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  0098e	c1 e8 02	 shr	 eax, 2
  00991	83 e0 01	 and	 eax, 1
  00994	85 c0		 test	 eax, eax
  00996	74 22		 je	 SHORT $LN71@s370_ecpsv
  00998	0f b6 44 24 40	 movzx	 eax, BYTE PTR B_VMRSTAT$[rsp]
  0099d	44 8b c8	 mov	 r9d, eax
  009a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172029
  009a7	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  009ac	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  009b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN71@s370_ecpsv:

; 2277 :         DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", buf));

  009ba	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  009c0	c1 e8 02	 shr	 eax, 2
  009c3	83 e0 01	 and	 eax, 1
  009c6	85 c0		 test	 eax, eax
  009c8	74 54		 je	 SHORT $LN72@s370_ecpsv
  009ca	b9 01 00 00 00	 mov	 ecx, 1
  009cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009d5	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  009dd	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  009e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172031
  009e9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  009ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172032
  009f5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  009fa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009ff	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a05	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172033
  00a0c	ba e5 08 00 00	 mov	 edx, 2277		; 000008e5H
  00a11	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172034
  00a18	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN72@s370_ecpsv:

; 2278 :         /* Take Exit 12 */
; 2279 :         regs->GR_L(11)=vmb;

  00a1e	b8 08 00 00 00	 mov	 eax, 8
  00a23	48 6b c0 0b	 imul	 rax, rax, 11
  00a27	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a2f	8b 54 24 44	 mov	 edx, DWORD PTR vmb$[rsp]
  00a33	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
$LN18@s370_ecpsv:

; 2280 :         SET_PSW_IA_AND_MAYBE_IP(regs, EVM_L(elist+12));

  00a3a	8b 44 24 58	 mov	 eax, DWORD PTR elist$[rsp]
  00a3e	83 c0 0c	 add	 eax, 12
  00a41	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00a46	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00a4e	ba fe ff ff ff	 mov	 edx, -2
  00a53	8b c8		 mov	 ecx, eax
  00a55	e8 00 00 00 00	 call	 s370_vfetch4
  00a5a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00a5f	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a67	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00a6d	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a75	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00a7d	74 6e		 je	 SHORT $LN73@s370_ecpsv
  00a7f	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a87	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00a8d	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00a92	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a9a	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00aa0	75 38		 jne	 SHORT $LN74@s370_ecpsv
  00aa2	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00aaa	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00ab0	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00ab5	8b c0		 mov	 eax, eax
  00ab7	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00abf	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00ac6	48 0b c8	 or	 rcx, rax
  00ac9	48 8b c1	 mov	 rax, rcx
  00acc	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00ad4	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00ad8	eb 13		 jmp	 SHORT $LN75@s370_ecpsv
$LN74@s370_ecpsv:
  00ada	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00ae2	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN75@s370_ecpsv:
$LN73@s370_ecpsv:
  00aed	33 c0		 xor	 eax, eax
  00aef	85 c0		 test	 eax, eax
  00af1	0f 85 43 ff ff
	ff		 jne	 $LN18@s370_ecpsv

; 2281 :         CPASSIST_HIT(DISP0);

  00af7	48 8b 05 d0 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+208
  00afe	48 ff c0	 inc	 rax
  00b01	48 89 05 d0 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+208, rax

; 2282 :         EVM_ST(DISPCNT,dlist);

  00b08	8b 44 24 50	 mov	 eax, DWORD PTR dlist$[rsp]
  00b0c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00b11	4c 8b 8c 24 c8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00b19	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00b1f	8b d0		 mov	 edx, eax
  00b21	8b 4c 24 54	 mov	 ecx, DWORD PTR DISPCNT$[rsp]
  00b25	e8 00 00 00 00	 call	 s370_vstore4

; 2283 :         return;

  00b2a	e9 7e 0e 00 00	 jmp	 $LN1@s370_ecpsv
$LN70@s370_ecpsv:

; 2284 :     }
; 2285 :     /* Check for PER/PPF (CKPEND) */
; 2286 :     B_VMPEND=EVM_IC(vmb+VMPEND);

  00b2f	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  00b33	83 c0 63	 add	 eax, 99			; 00000063H
  00b36	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00b3b	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00b43	ba fe ff ff ff	 mov	 edx, -2
  00b48	8b c8		 mov	 ecx, eax
  00b4a	e8 00 00 00 00	 call	 s370_vfetchb
  00b4f	88 44 24 65	 mov	 BYTE PTR B_VMPEND$[rsp], al

; 2287 :     if(B_VMPEND & (VMPERPND | VMPGPND))

  00b53	0f b6 44 24 65	 movzx	 eax, BYTE PTR B_VMPEND$[rsp]
  00b58	83 e0 48	 and	 eax, 72			; 00000048H
  00b5b	85 c0		 test	 eax, eax
  00b5d	0f 84 74 01 00
	00		 je	 $LN76@s370_ecpsv

; 2288 :     {
; 2289 :         DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", "DISP0 : PER/PPF Pending - Taking exit #16"));

  00b63	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00b69	c1 e8 02	 shr	 eax, 2
  00b6c	83 e0 01	 and	 eax, 1
  00b6f	85 c0		 test	 eax, eax
  00b71	74 53		 je	 SHORT $LN77@s370_ecpsv
  00b73	b9 01 00 00 00	 mov	 ecx, 1
  00b78	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b7e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172040
  00b85	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00b8a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172041
  00b91	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b96	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172042
  00b9d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ba2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ba7	41 b9 03 00 00
	00		 mov	 r9d, 3
  00bad	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172043
  00bb4	ba f1 08 00 00	 mov	 edx, 2289		; 000008f1H
  00bb9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172044
  00bc0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN77@s370_ecpsv:

; 2290 :         /* Take Exit 16 */
; 2291 :         regs->GR_L(11)=vmb;

  00bc6	b8 08 00 00 00	 mov	 eax, 8
  00bcb	48 6b c0 0b	 imul	 rax, rax, 11
  00bcf	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00bd7	8b 54 24 44	 mov	 edx, DWORD PTR vmb$[rsp]
  00bdb	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
$LN21@s370_ecpsv:

; 2292 :         SET_PSW_IA_AND_MAYBE_IP(regs, EVM_L(elist+16));

  00be2	8b 44 24 58	 mov	 eax, DWORD PTR elist$[rsp]
  00be6	83 c0 10	 add	 eax, 16
  00be9	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00bee	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00bf6	ba fe ff ff ff	 mov	 edx, -2
  00bfb	8b c8		 mov	 ecx, eax
  00bfd	e8 00 00 00 00	 call	 s370_vfetch4
  00c02	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00c07	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00c0f	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00c15	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00c1d	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00c25	74 6e		 je	 SHORT $LN78@s370_ecpsv
  00c27	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00c2f	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00c35	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00c3a	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00c42	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00c48	75 38		 jne	 SHORT $LN79@s370_ecpsv
  00c4a	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00c52	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00c58	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00c5d	8b c0		 mov	 eax, eax
  00c5f	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00c67	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00c6e	48 0b c8	 or	 rcx, rax
  00c71	48 8b c1	 mov	 rax, rcx
  00c74	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00c7c	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00c80	eb 13		 jmp	 SHORT $LN80@s370_ecpsv
$LN79@s370_ecpsv:
  00c82	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00c8a	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN80@s370_ecpsv:
$LN78@s370_ecpsv:
  00c95	33 c0		 xor	 eax, eax
  00c97	85 c0		 test	 eax, eax
  00c99	0f 85 43 ff ff
	ff		 jne	 $LN21@s370_ecpsv

; 2293 :         CPASSIST_HIT(DISP0);

  00c9f	48 8b 05 d0 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+208
  00ca6	48 ff c0	 inc	 rax
  00ca9	48 89 05 d0 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+208, rax

; 2294 :         EVM_ST(DISPCNT,dlist);

  00cb0	8b 44 24 50	 mov	 eax, DWORD PTR dlist$[rsp]
  00cb4	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00cb9	4c 8b 8c 24 c8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  00cc1	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00cc7	8b d0		 mov	 edx, eax
  00cc9	8b 4c 24 54	 mov	 ecx, DWORD PTR DISPCNT$[rsp]
  00ccd	e8 00 00 00 00	 call	 s370_vstore4

; 2295 :         return;

  00cd2	e9 d6 0c 00 00	 jmp	 $LN1@s370_ecpsv
$LN76@s370_ecpsv:

; 2296 :     }
; 2297 :     /* Now, check if we should unstack an external int */
; 2298 :     /* 1st check if VMPXINT is NULL */
; 2299 :     F_VMPSWHI=EVM_L(vmb+VMPSW);     /* Load top of virt PSW - Will need it */

  00cd7	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  00cdb	05 a8 00 00 00	 add	 eax, 168		; 000000a8H
  00ce0	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00ce5	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00ced	ba fe ff ff ff	 mov	 edx, -2
  00cf2	8b c8		 mov	 ecx, eax
  00cf4	e8 00 00 00 00	 call	 s370_vfetch4
  00cf9	89 44 24 6c	 mov	 DWORD PTR F_VMPSWHI$[rsp], eax

; 2300 :     B_VMPSTAT=EVM_IC(vmb+VMPSTAT);   /* Will need VMPSTAT for I/O ints too */

  00cfd	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  00d01	83 c0 5c	 add	 eax, 92			; 0000005cH
  00d04	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00d09	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00d11	ba fe ff ff ff	 mov	 edx, -2
  00d16	8b c8		 mov	 ecx, eax
  00d18	e8 00 00 00 00	 call	 s370_vfetchb
  00d1d	88 44 24 4a	 mov	 BYTE PTR B_VMPSTAT$[rsp], al

; 2301 :     F_VMPXINT=EVM_L(vmb+VMPXINT);

  00d21	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  00d25	05 84 01 00 00	 add	 eax, 388		; 00000184H
  00d2a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00d2f	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00d37	ba fe ff ff ff	 mov	 edx, -2
  00d3c	8b c8		 mov	 ecx, eax
  00d3e	e8 00 00 00 00	 call	 s370_vfetch4
  00d43	89 44 24 5c	 mov	 DWORD PTR F_VMPXINT$[rsp], eax

; 2302 :     DEBUG_CPASSISTX(DISP0,MSGBUF(buf, "DISP0 : Checking for EXT; Base VMPXINT=%8.8X",F_VMPXINT));

  00d47	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00d4d	c1 e8 02	 shr	 eax, 2
  00d50	83 e0 01	 and	 eax, 1
  00d53	85 c0		 test	 eax, eax
  00d55	74 1f		 je	 SHORT $LN81@s370_ecpsv
  00d57	44 8b 4c 24 5c	 mov	 r9d, DWORD PTR F_VMPXINT$[rsp]
  00d5c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172049
  00d63	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00d68	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00d70	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN81@s370_ecpsv:

; 2303 :     DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", buf));

  00d76	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00d7c	c1 e8 02	 shr	 eax, 2
  00d7f	83 e0 01	 and	 eax, 1
  00d82	85 c0		 test	 eax, eax
  00d84	74 54		 je	 SHORT $LN82@s370_ecpsv
  00d86	b9 01 00 00 00	 mov	 ecx, 1
  00d8b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00d91	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00d99	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00d9e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172051
  00da5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00daa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172052
  00db1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00db6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00dbb	41 b9 03 00 00
	00		 mov	 r9d, 3
  00dc1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172053
  00dc8	ba ff 08 00 00	 mov	 edx, 2303		; 000008ffH
  00dcd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172054
  00dd4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN82@s370_ecpsv:

; 2304 :     /* This is DMKDSP - CKEXT */
; 2305 :     if(F_VMPXINT!=0)

  00dda	83 7c 24 5c 00	 cmp	 DWORD PTR F_VMPXINT$[rsp], 0
  00ddf	0f 84 db 04 00
	00		 je	 $LN83@s370_ecpsv

; 2306 :     {
; 2307 :         DEBUG_CPASSISTX(DISP0,MSGBUF(buf, "DISP0 : VPSW HI = %8.8X",F_VMPSWHI));

  00de5	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00deb	c1 e8 02	 shr	 eax, 2
  00dee	83 e0 01	 and	 eax, 1
  00df1	85 c0		 test	 eax, eax
  00df3	74 1f		 je	 SHORT $LN84@s370_ecpsv
  00df5	44 8b 4c 24 6c	 mov	 r9d, DWORD PTR F_VMPSWHI$[rsp]
  00dfa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172057
  00e01	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00e06	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00e0e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN84@s370_ecpsv:

; 2308 :         DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", buf));

  00e14	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00e1a	c1 e8 02	 shr	 eax, 2
  00e1d	83 e0 01	 and	 eax, 1
  00e20	85 c0		 test	 eax, eax
  00e22	74 54		 je	 SHORT $LN85@s370_ecpsv
  00e24	b9 01 00 00 00	 mov	 ecx, 1
  00e29	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00e2f	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00e37	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00e3c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172059
  00e43	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00e48	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172060
  00e4f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00e54	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e59	41 b9 03 00 00
	00		 mov	 r9d, 3
  00e5f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172061
  00e66	ba 04 09 00 00	 mov	 edx, 2308		; 00000904H
  00e6b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172062
  00e72	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN85@s370_ecpsv:

; 2309 :         OXINT=vmb+VMPXINT;

  00e78	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  00e7c	05 84 01 00 00	 add	 eax, 388		; 00000184H
  00e81	89 84 24 90 00
	00 00		 mov	 DWORD PTR OXINT$[rsp], eax

; 2310 :         /* Check if Virtual PSW enabled for Externals */
; 2311 :         /* (works in both BC & EC modes) */
; 2312 :         if(F_VMPSWHI & 0x01000000)

  00e88	8b 44 24 6c	 mov	 eax, DWORD PTR F_VMPSWHI$[rsp]
  00e8c	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  00e91	85 c0		 test	 eax, eax
  00e93	0f 84 27 04 00
	00		 je	 $LN86@s370_ecpsv

; 2313 :         {
; 2314 :             DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", "DISP0 : PSW Enabled for EXT"));

  00e99	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00e9f	c1 e8 02	 shr	 eax, 2
  00ea2	83 e0 01	 and	 eax, 1
  00ea5	85 c0		 test	 eax, eax
  00ea7	74 53		 je	 SHORT $LN87@s370_ecpsv
  00ea9	b9 01 00 00 00	 mov	 ecx, 1
  00eae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00eb4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172065
  00ebb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00ec0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172066
  00ec7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ecc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172067
  00ed3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ed8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00edd	41 b9 03 00 00
	00		 mov	 r9d, 3
  00ee3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172068
  00eea	ba 0a 09 00 00	 mov	 edx, 2314		; 0000090aH
  00eef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172069
  00ef6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN87@s370_ecpsv:

; 2315 :             /* Use VMVCR0 or CR0 in ECBLOK */
; 2316 :             F_VMVCR0=EVM_L(vmb+VMVCR0);     /* CR0 or ECBLOK Address */

  00efc	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  00f00	83 c0 0c	 add	 eax, 12
  00f03	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00f08	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00f10	ba fe ff ff ff	 mov	 edx, -2
  00f15	8b c8		 mov	 ecx, eax
  00f17	e8 00 00 00 00	 call	 s370_vfetch4
  00f1c	89 44 24 7c	 mov	 DWORD PTR F_VMVCR0$[rsp], eax

; 2317 :             if(B_VMPSTAT & VMV370R) /* SET ECMODE ON ?? */

  00f20	0f b6 44 24 4a	 movzx	 eax, BYTE PTR B_VMPSTAT$[rsp]
  00f25	83 e0 40	 and	 eax, 64			; 00000040H
  00f28	85 c0		 test	 eax, eax
  00f2a	74 21		 je	 SHORT $LN88@s370_ecpsv

; 2318 :             {
; 2319 :                 F_VMVCR0=EVM_L(F_VMVCR0+0); /* EXTCR0 at disp +0 in ECBLOK */

  00f2c	8b 44 24 7c	 mov	 eax, DWORD PTR F_VMVCR0$[rsp]
  00f30	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00f35	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00f3d	ba fe ff ff ff	 mov	 edx, -2
  00f42	8b c8		 mov	 ecx, eax
  00f44	e8 00 00 00 00	 call	 s370_vfetch4
  00f49	89 44 24 7c	 mov	 DWORD PTR F_VMVCR0$[rsp], eax
$LN88@s370_ecpsv:

; 2320 :             }
; 2321 :             DEBUG_CPASSISTX(DISP0,MSGBUF(buf, "DISP0 : CR0 = %8.8X",F_VMVCR0));

  00f4d	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00f53	c1 e8 02	 shr	 eax, 2
  00f56	83 e0 01	 and	 eax, 1
  00f59	85 c0		 test	 eax, eax
  00f5b	74 1f		 je	 SHORT $LN89@s370_ecpsv
  00f5d	44 8b 4c 24 7c	 mov	 r9d, DWORD PTR F_VMVCR0$[rsp]
  00f62	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172072
  00f69	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00f6e	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00f76	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN89@s370_ecpsv:

; 2322 :             DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", buf));

  00f7c	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  00f82	c1 e8 02	 shr	 eax, 2
  00f85	83 e0 01	 and	 eax, 1
  00f88	85 c0		 test	 eax, eax
  00f8a	74 54		 je	 SHORT $LN90@s370_ecpsv
  00f8c	b9 01 00 00 00	 mov	 ecx, 1
  00f91	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00f97	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00f9f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00fa4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172074
  00fab	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00fb0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172075
  00fb7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00fbc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00fc1	41 b9 03 00 00
	00		 mov	 r9d, 3
  00fc7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172076
  00fce	ba 12 09 00 00	 mov	 edx, 2322		; 00000912H
  00fd3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172077
  00fda	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN90@s370_ecpsv:

; 2323 :             /* scan the XINTBLOKS for a mask match */
; 2324 :             /* Save OXINT in the loop for exit 20  */
; 2325 :             for(;F_VMPXINT;OXINT=F_VMPXINT,F_VMPXINT=EVM_L(F_VMPXINT))      /* XINTNEXT @ +0 in XINTBLOK */

  00fe0	eb 2c		 jmp	 SHORT $LN24@s370_ecpsv
$LN22@s370_ecpsv:
  00fe2	8b 44 24 5c	 mov	 eax, DWORD PTR F_VMPXINT$[rsp]
  00fe6	89 84 24 90 00
	00 00		 mov	 DWORD PTR OXINT$[rsp], eax
  00fed	8b 44 24 5c	 mov	 eax, DWORD PTR F_VMPXINT$[rsp]
  00ff1	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00ff6	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00ffe	ba fe ff ff ff	 mov	 edx, -2
  01003	8b c8		 mov	 ecx, eax
  01005	e8 00 00 00 00	 call	 s370_vfetch4
  0100a	89 44 24 5c	 mov	 DWORD PTR F_VMPXINT$[rsp], eax
$LN24@s370_ecpsv:
  0100e	83 7c 24 5c 00	 cmp	 DWORD PTR F_VMPXINT$[rsp], 0
  01013	0f 84 a7 02 00
	00		 je	 $LN23@s370_ecpsv

; 2326 :             {
; 2327 :                 H_XINTMASK=EVM_LH(F_VMPXINT+10);    /* Get interrupt subclass in XINTBLOK */

  01019	8b 44 24 5c	 mov	 eax, DWORD PTR F_VMPXINT$[rsp]
  0101d	83 c0 0a	 add	 eax, 10
  01020	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01025	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0102d	ba fe ff ff ff	 mov	 edx, -2
  01032	8b c8		 mov	 ecx, eax
  01034	e8 00 00 00 00	 call	 s370_vfetch2
  01039	66 89 44 24 4c	 mov	 WORD PTR H_XINTMASK$[rsp], ax

; 2328 :                 DEBUG_CPASSISTX(DISP0,MSGBUF(buf, "DISP0 : XINTMASK =  %4.4X\n",H_XINTMASK));

  0103e	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  01044	c1 e8 02	 shr	 eax, 2
  01047	83 e0 01	 and	 eax, 1
  0104a	85 c0		 test	 eax, eax
  0104c	74 22		 je	 SHORT $LN91@s370_ecpsv
  0104e	0f b7 44 24 4c	 movzx	 eax, WORD PTR H_XINTMASK$[rsp]
  01053	44 8b c8	 mov	 r9d, eax
  01056	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172079
  0105d	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  01062	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0106a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN91@s370_ecpsv:

; 2329 :                 DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", buf));

  01070	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  01076	c1 e8 02	 shr	 eax, 2
  01079	83 e0 01	 and	 eax, 1
  0107c	85 c0		 test	 eax, eax
  0107e	74 54		 je	 SHORT $LN92@s370_ecpsv
  01080	b9 01 00 00 00	 mov	 ecx, 1
  01085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0108b	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  01093	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172081
  0109f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  010a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172082
  010ab	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  010b0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  010b5	41 b9 03 00 00
	00		 mov	 r9d, 3
  010bb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172083
  010c2	ba 19 09 00 00	 mov	 edx, 2329		; 00000919H
  010c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172084
  010ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN92@s370_ecpsv:

; 2330 :                 H_XINTMASK &= F_VMVCR0;

  010d4	0f b7 44 24 4c	 movzx	 eax, WORD PTR H_XINTMASK$[rsp]
  010d9	23 44 24 7c	 and	 eax, DWORD PTR F_VMVCR0$[rsp]
  010dd	66 89 44 24 4c	 mov	 WORD PTR H_XINTMASK$[rsp], ax

; 2331 :                 if(H_XINTMASK)           /* Check against CR0 (External subclass mask) */

  010e2	0f b7 44 24 4c	 movzx	 eax, WORD PTR H_XINTMASK$[rsp]
  010e7	85 c0		 test	 eax, eax
  010e9	0f 84 cc 01 00
	00		 je	 $LN93@s370_ecpsv

; 2332 :                 {
; 2333 :                     DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", "DISP0 : EXT Hit - Taking exit #20"));

  010ef	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  010f5	c1 e8 02	 shr	 eax, 2
  010f8	83 e0 01	 and	 eax, 1
  010fb	85 c0		 test	 eax, eax
  010fd	74 53		 je	 SHORT $LN94@s370_ecpsv
  010ff	b9 01 00 00 00	 mov	 ecx, 1
  01104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0110a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172087
  01111	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01116	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172088
  0111d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172089
  01129	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0112e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01133	41 b9 03 00 00
	00		 mov	 r9d, 3
  01139	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172090
  01140	ba 1d 09 00 00	 mov	 edx, 2333		; 0000091dH
  01145	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172091
  0114c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN94@s370_ecpsv:

; 2334 :                     /* Enabled for this external */
; 2335 :                     /* Take exit 20 */
; 2336 :                     regs->GR_L(4)=H_XINTMASK;            /* Enabled subclass bits */

  01152	b8 08 00 00 00	 mov	 eax, 8
  01157	48 6b c0 04	 imul	 rax, rax, 4
  0115b	0f b7 4c 24 4c	 movzx	 ecx, WORD PTR H_XINTMASK$[rsp]
  01160	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  01168	89 8c 02 80 02
	00 00		 mov	 DWORD PTR [rdx+rax+640], ecx

; 2337 :                     regs->GR_L(5)=OXINT;                 /* XINTBLOK Back pointer (or VMPXINT) */

  0116f	b8 08 00 00 00	 mov	 eax, 8
  01174	48 6b c0 05	 imul	 rax, rax, 5
  01178	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01180	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR OXINT$[rsp]
  01187	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 2338 :                     regs->GR_L(6)=F_VMPXINT;             /* Current XINTBLOK */

  0118e	b8 08 00 00 00	 mov	 eax, 8
  01193	48 6b c0 06	 imul	 rax, rax, 6
  01197	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0119f	8b 54 24 5c	 mov	 edx, DWORD PTR F_VMPXINT$[rsp]
  011a3	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 2339 :                     regs->GR_L(11)=vmb;                  /* RUNUSER */

  011aa	b8 08 00 00 00	 mov	 eax, 8
  011af	48 6b c0 0b	 imul	 rax, rax, 11
  011b3	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  011bb	8b 54 24 44	 mov	 edx, DWORD PTR vmb$[rsp]
  011bf	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
$LN27@s370_ecpsv:

; 2340 :                     SET_PSW_IA_AND_MAYBE_IP(regs, EVM_L(elist+20));   /* Exit +20 */

  011c6	8b 44 24 58	 mov	 eax, DWORD PTR elist$[rsp]
  011ca	83 c0 14	 add	 eax, 20
  011cd	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  011d2	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  011da	ba fe ff ff ff	 mov	 edx, -2
  011df	8b c8		 mov	 ecx, eax
  011e1	e8 00 00 00 00	 call	 s370_vfetch4
  011e6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  011eb	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  011f3	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  011f9	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01201	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  01209	74 6e		 je	 SHORT $LN95@s370_ecpsv
  0120b	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01213	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01219	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  0121e	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01226	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  0122c	75 38		 jne	 SHORT $LN96@s370_ecpsv
  0122e	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01236	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0123c	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  01241	8b c0		 mov	 eax, eax
  01243	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0124b	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  01252	48 0b c8	 or	 rcx, rax
  01255	48 8b c1	 mov	 rax, rcx
  01258	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01260	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  01264	eb 13		 jmp	 SHORT $LN97@s370_ecpsv
$LN96@s370_ecpsv:
  01266	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0126e	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN97@s370_ecpsv:
$LN95@s370_ecpsv:
  01279	33 c0		 xor	 eax, eax
  0127b	85 c0		 test	 eax, eax
  0127d	0f 85 43 ff ff
	ff		 jne	 $LN27@s370_ecpsv

; 2341 :                     EVM_ST(DISPCNT,dlist);

  01283	8b 44 24 50	 mov	 eax, DWORD PTR dlist$[rsp]
  01287	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0128c	4c 8b 8c 24 c8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  01294	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0129a	8b d0		 mov	 edx, eax
  0129c	8b 4c 24 54	 mov	 ecx, DWORD PTR DISPCNT$[rsp]
  012a0	e8 00 00 00 00	 call	 s370_vstore4

; 2342 :                     CPASSIST_HIT(DISP0);

  012a5	48 8b 05 d0 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+208
  012ac	48 ff c0	 inc	 rax
  012af	48 89 05 d0 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+208, rax

; 2343 :                     return;

  012b6	e9 f2 06 00 00	 jmp	 $LN1@s370_ecpsv
$LN93@s370_ecpsv:

; 2344 :                 }
; 2345 :             }

  012bb	e9 22 fd ff ff	 jmp	 $LN22@s370_ecpsv
$LN23@s370_ecpsv:
$LN86@s370_ecpsv:
$LN83@s370_ecpsv:

; 2346 :         }
; 2347 :     }
; 2348 :     /* After CKEXT : No external pending/reflectable */
; 2349 : 
; 2350 :     /* This is DMKDSP UNSTIO */
; 2351 :     /* Check for pending I/O Interrupt */
; 2352 : 
; 2353 :     /* Load PIM */
; 2354 :     F_VMIOINT=EVM_LH(vmb+VMIOINT);

  012c0	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  012c4	83 c0 6a	 add	 eax, 106		; 0000006aH
  012c7	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  012cc	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  012d4	ba fe ff ff ff	 mov	 edx, -2
  012d9	8b c8		 mov	 ecx, eax
  012db	e8 00 00 00 00	 call	 s370_vfetch2
  012e0	0f b7 c0	 movzx	 eax, ax
  012e3	89 44 24 60	 mov	 DWORD PTR F_VMIOINT$[rsp], eax

; 2355 :     DEBUG_CPASSISTX(DISP0,MSGBUF(buf, "DISP0 : Checking for I/O; VMIOINT=%8.8X",F_VMIOINT));

  012e7	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  012ed	c1 e8 02	 shr	 eax, 2
  012f0	83 e0 01	 and	 eax, 1
  012f3	85 c0		 test	 eax, eax
  012f5	74 1f		 je	 SHORT $LN98@s370_ecpsv
  012f7	44 8b 4c 24 60	 mov	 r9d, DWORD PTR F_VMIOINT$[rsp]
  012fc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172096
  01303	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  01308	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  01310	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN98@s370_ecpsv:

; 2356 :     DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", buf));

  01316	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  0131c	c1 e8 02	 shr	 eax, 2
  0131f	83 e0 01	 and	 eax, 1
  01322	85 c0		 test	 eax, eax
  01324	74 54		 je	 SHORT $LN99@s370_ecpsv
  01326	b9 01 00 00 00	 mov	 ecx, 1
  0132b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01331	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  01339	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0133e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172098
  01345	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0134a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172099
  01351	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01356	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0135b	41 b9 03 00 00
	00		 mov	 r9d, 3
  01361	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172100
  01368	ba 34 09 00 00	 mov	 edx, 2356		; 00000934H
  0136d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172101
  01374	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN99@s370_ecpsv:

; 2357 :     if(F_VMIOINT!=0)        /* If anything in the pipe */

  0137a	83 7c 24 60 00	 cmp	 DWORD PTR F_VMIOINT$[rsp], 0
  0137f	0f 84 af 02 00
	00		 je	 $LN100@s370_ecpsv

; 2358 :     {
; 2359 :         F_VMIOINT <<=16;    /* Put IOINT mask in bits 0-15 */

  01385	8b 44 24 60	 mov	 eax, DWORD PTR F_VMIOINT$[rsp]
  01389	c1 e0 10	 shl	 eax, 16
  0138c	89 44 24 60	 mov	 DWORD PTR F_VMIOINT$[rsp], eax

; 2360 :         /* Is V-PSW in EC Mode ? */
; 2361 :         iomask=0;

  01390	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR iomask$[rsp], 0

; 2362 :         extendmsk=0;

  01398	c6 44 24 48 00	 mov	 BYTE PTR extendmsk$[rsp], 0

; 2363 :         B_VMESTAT=EVM_L(VMESTAT);

  0139d	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  013a5	ba fe ff ff ff	 mov	 edx, -2
  013aa	b9 5d 00 00 00	 mov	 ecx, 93			; 0000005dH
  013af	e8 00 00 00 00	 call	 s370_vfetch4
  013b4	88 44 24 66	 mov	 BYTE PTR B_VMESTAT$[rsp], al

; 2364 :         if(B_VMESTAT & VMEXTCM)     /* Implies VMV370R on */

  013b8	0f b6 44 24 66	 movzx	 eax, BYTE PTR B_VMESTAT$[rsp]
  013bd	83 e0 08	 and	 eax, 8
  013c0	85 c0		 test	 eax, eax
  013c2	74 1c		 je	 SHORT $LN101@s370_ecpsv

; 2365 :         {
; 2366 :             /* Check I/O bit */
; 2367 :             if(F_VMPSWHI & 0x02000000)

  013c4	8b 44 24 6c	 mov	 eax, DWORD PTR F_VMPSWHI$[rsp]
  013c8	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  013cd	85 c0		 test	 eax, eax
  013cf	74 0d		 je	 SHORT $LN103@s370_ecpsv

; 2368 :             {
; 2369 :                 iomask=0;

  013d1	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR iomask$[rsp], 0

; 2370 :                 extendmsk=1;

  013d9	c6 44 24 48 01	 mov	 BYTE PTR extendmsk$[rsp], 1
$LN103@s370_ecpsv:

; 2371 :             }
; 2372 :         }

  013de	eb 2b		 jmp	 SHORT $LN102@s370_ecpsv
$LN101@s370_ecpsv:

; 2373 :         else
; 2374 :         {
; 2375 :             /* BC Mode PSW */
; 2376 :             /* Isolate channel masks for channels 0-5 */
; 2377 :             iomask=F_VMPSWHI & 0xfc000000;

  013e0	8b 44 24 6c	 mov	 eax, DWORD PTR F_VMPSWHI$[rsp]
  013e4	25 00 00 00 fc	 and	 eax, -67108864		; fc000000H
  013e9	89 44 24 68	 mov	 DWORD PTR iomask$[rsp], eax

; 2378 :             if(B_VMPSTAT & VMV370R) /* SET ECMODE ON ? */

  013ed	0f b6 44 24 4a	 movzx	 eax, BYTE PTR B_VMPSTAT$[rsp]
  013f2	83 e0 40	 and	 eax, 64			; 00000040H
  013f5	85 c0		 test	 eax, eax
  013f7	74 12		 je	 SHORT $LN104@s370_ecpsv

; 2379 :             {
; 2380 :                 if(F_VMPSWHI & 0x02000000)

  013f9	8b 44 24 6c	 mov	 eax, DWORD PTR F_VMPSWHI$[rsp]
  013fd	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  01402	85 c0		 test	 eax, eax
  01404	74 05		 je	 SHORT $LN105@s370_ecpsv

; 2381 :                 {
; 2382 :                     extendmsk=1;

  01406	c6 44 24 48 01	 mov	 BYTE PTR extendmsk$[rsp], 1
$LN105@s370_ecpsv:
$LN104@s370_ecpsv:
$LN102@s370_ecpsv:

; 2383 :                 }
; 2384 :             }
; 2385 :         }
; 2386 :         if(extendmsk)

  0140b	0f b6 44 24 48	 movzx	 eax, BYTE PTR extendmsk$[rsp]
  01410	85 c0		 test	 eax, eax
  01412	74 64		 je	 SHORT $LN106@s370_ecpsv

; 2387 :         {
; 2388 :             F_VMVCR2=EVM_L(vmb+VMECEXT);

  01414	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  01418	83 c0 0c	 add	 eax, 12
  0141b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01420	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  01428	ba fe ff ff ff	 mov	 edx, -2
  0142d	8b c8		 mov	 ecx, eax
  0142f	e8 00 00 00 00	 call	 s370_vfetch4
  01434	89 84 24 80 00
	00 00		 mov	 DWORD PTR F_VMVCR2$[rsp], eax

; 2389 :             F_VMVCR2=EVM_L(F_VMVCR2+8);

  0143b	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR F_VMVCR2$[rsp]
  01442	83 c0 08	 add	 eax, 8
  01445	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0144a	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  01452	ba fe ff ff ff	 mov	 edx, -2
  01457	8b c8		 mov	 ecx, eax
  01459	e8 00 00 00 00	 call	 s370_vfetch4
  0145e	89 84 24 80 00
	00 00		 mov	 DWORD PTR F_VMVCR2$[rsp], eax

; 2390 :             iomask |= F_VMVCR2;

  01465	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR F_VMVCR2$[rsp]
  0146c	8b 4c 24 68	 mov	 ecx, DWORD PTR iomask$[rsp]
  01470	0b c8		 or	 ecx, eax
  01472	8b c1		 mov	 eax, ecx
  01474	89 44 24 68	 mov	 DWORD PTR iomask$[rsp], eax
$LN106@s370_ecpsv:

; 2391 :         }
; 2392 :         if(iomask & 0xffff0000)

  01478	8b 44 24 68	 mov	 eax, DWORD PTR iomask$[rsp]
  0147c	25 00 00 ff ff	 and	 eax, -65536		; ffff0000H
  01481	85 c0		 test	 eax, eax
  01483	0f 84 ab 01 00
	00		 je	 $LN107@s370_ecpsv

; 2393 :         {
; 2394 :             F_VMIOINT&=iomask;

  01489	8b 44 24 68	 mov	 eax, DWORD PTR iomask$[rsp]
  0148d	8b 4c 24 60	 mov	 ecx, DWORD PTR F_VMIOINT$[rsp]
  01491	23 c8		 and	 ecx, eax
  01493	8b c1		 mov	 eax, ecx
  01495	89 44 24 60	 mov	 DWORD PTR F_VMIOINT$[rsp], eax

; 2395 :             if(F_VMIOINT)

  01499	83 7c 24 60 00	 cmp	 DWORD PTR F_VMIOINT$[rsp], 0
  0149e	0f 84 90 01 00
	00		 je	 $LN108@s370_ecpsv

; 2396 :             {
; 2397 :                 DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", "DISP0 : I/O Hit - Taking exit #24"));

  014a4	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  014aa	c1 e8 02	 shr	 eax, 2
  014ad	83 e0 01	 and	 eax, 1
  014b0	85 c0		 test	 eax, eax
  014b2	74 53		 je	 SHORT $LN109@s370_ecpsv
  014b4	b9 01 00 00 00	 mov	 ecx, 1
  014b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  014bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172112
  014c6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  014cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172113
  014d2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  014d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172114
  014de	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  014e3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  014e8	41 b9 03 00 00
	00		 mov	 r9d, 3
  014ee	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172115
  014f5	ba 5d 09 00 00	 mov	 edx, 2397		; 0000095dH
  014fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172116
  01501	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN109@s370_ecpsv:

; 2398 :                 /* Take Exit 24 */
; 2399 :                 regs->GR_L(7)=F_VMIOINT;

  01507	b8 08 00 00 00	 mov	 eax, 8
  0150c	48 6b c0 07	 imul	 rax, rax, 7
  01510	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01518	8b 54 24 60	 mov	 edx, DWORD PTR F_VMIOINT$[rsp]
  0151c	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 2400 :                 regs->GR_L(11)=vmb;

  01523	b8 08 00 00 00	 mov	 eax, 8
  01528	48 6b c0 0b	 imul	 rax, rax, 11
  0152c	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01534	8b 54 24 44	 mov	 edx, DWORD PTR vmb$[rsp]
  01538	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
$LN30@s370_ecpsv:

; 2401 :                 SET_PSW_IA_AND_MAYBE_IP(regs, EVM_L(elist+24));   /* Exit +24 */

  0153f	8b 44 24 58	 mov	 eax, DWORD PTR elist$[rsp]
  01543	83 c0 18	 add	 eax, 24
  01546	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0154b	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  01553	ba fe ff ff ff	 mov	 edx, -2
  01558	8b c8		 mov	 ecx, eax
  0155a	e8 00 00 00 00	 call	 s370_vfetch4
  0155f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01564	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0156c	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  01572	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0157a	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  01582	74 6e		 je	 SHORT $LN110@s370_ecpsv
  01584	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0158c	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01592	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  01597	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0159f	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  015a5	75 38		 jne	 SHORT $LN111@s370_ecpsv
  015a7	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  015af	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  015b5	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  015ba	8b c0		 mov	 eax, eax
  015bc	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  015c4	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  015cb	48 0b c8	 or	 rcx, rax
  015ce	48 8b c1	 mov	 rax, rcx
  015d1	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  015d9	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  015dd	eb 13		 jmp	 SHORT $LN112@s370_ecpsv
$LN111@s370_ecpsv:
  015df	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  015e7	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN112@s370_ecpsv:
$LN110@s370_ecpsv:
  015f2	33 c0		 xor	 eax, eax
  015f4	85 c0		 test	 eax, eax
  015f6	0f 85 43 ff ff
	ff		 jne	 $LN30@s370_ecpsv

; 2402 :                 EVM_ST(DISPCNT,dlist);

  015fc	8b 44 24 50	 mov	 eax, DWORD PTR dlist$[rsp]
  01600	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01605	4c 8b 8c 24 c8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0160d	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  01613	8b d0		 mov	 edx, eax
  01615	8b 4c 24 54	 mov	 ecx, DWORD PTR DISPCNT$[rsp]
  01619	e8 00 00 00 00	 call	 s370_vstore4

; 2403 :                 CPASSIST_HIT(DISP0);

  0161e	48 8b 05 d0 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+208
  01625	48 ff c0	 inc	 rax
  01628	48 89 05 d0 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+208, rax

; 2404 :                 return;

  0162f	e9 79 03 00 00	 jmp	 $LN1@s370_ecpsv
$LN108@s370_ecpsv:
$LN107@s370_ecpsv:
$LN100@s370_ecpsv:

; 2405 :             }
; 2406 :         }
; 2407 :     }
; 2408 :     /* DMKDSP - CKWAIT */
; 2409 :     /* Clear Wait / Idle bits in VMRSTAT */
; 2410 :     B_VMRSTAT=EVM_IC(vmb+VMRSTAT);

  01634	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  01638	83 c0 58	 add	 eax, 88			; 00000058H
  0163b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01640	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  01648	ba fe ff ff ff	 mov	 edx, -2
  0164d	8b c8		 mov	 ecx, eax
  0164f	e8 00 00 00 00	 call	 s370_vfetchb
  01654	88 44 24 40	 mov	 BYTE PTR B_VMRSTAT$[rsp], al

; 2411 :     B_VMRSTAT &= ~(VMPSWAIT | VMIDLE);

  01658	0f b6 44 24 40	 movzx	 eax, BYTE PTR B_VMRSTAT$[rsp]
  0165d	83 e0 ee	 and	 eax, -18
  01660	88 44 24 40	 mov	 BYTE PTR B_VMRSTAT$[rsp], al

; 2412 :     if(F_VMPSWHI & 0x00020000)

  01664	8b 44 24 6c	 mov	 eax, DWORD PTR F_VMPSWHI$[rsp]
  01668	25 00 00 02 00	 and	 eax, 131072		; 00020000H
  0166d	85 c0		 test	 eax, eax
  0166f	0f 84 a6 01 00
	00		 je	 $LN113@s370_ecpsv

; 2413 :     {
; 2414 :         DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", "DISP0 : VWAIT - Taking exit #28"));

  01675	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  0167b	c1 e8 02	 shr	 eax, 2
  0167e	83 e0 01	 and	 eax, 1
  01681	85 c0		 test	 eax, eax
  01683	74 53		 je	 SHORT $LN114@s370_ecpsv
  01685	b9 01 00 00 00	 mov	 ecx, 1
  0168a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01690	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172122
  01697	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0169c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172123
  016a3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  016a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172124
  016af	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  016b4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  016b9	41 b9 03 00 00
	00		 mov	 r9d, 3
  016bf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172125
  016c6	ba 6e 09 00 00	 mov	 edx, 2414		; 0000096eH
  016cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172126
  016d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN114@s370_ecpsv:

; 2415 :         /* Take exit 28  */
; 2416 :         /* 2017-03-27 Set VMPSWAIT */
; 2417 :         B_VMRSTAT |= VMPSWAIT;

  016d8	0f b6 44 24 40	 movzx	 eax, BYTE PTR B_VMRSTAT$[rsp]
  016dd	83 c8 10	 or	 eax, 16
  016e0	88 44 24 40	 mov	 BYTE PTR B_VMRSTAT$[rsp], al

; 2418 :         EVM_STC(B_VMRSTAT,vmb+VMRSTAT);

  016e4	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  016e8	83 c0 58	 add	 eax, 88			; 00000058H
  016eb	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  016f0	4c 8b 8c 24 c8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  016f8	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  016fe	8b d0		 mov	 edx, eax
  01700	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR B_VMRSTAT$[rsp]
  01705	e8 00 00 00 00	 call	 s370_vstoreb

; 2419 :         /* end of 2017-03-27 */
; 2420 :         regs->GR_L(11)=vmb;

  0170a	b8 08 00 00 00	 mov	 eax, 8
  0170f	48 6b c0 0b	 imul	 rax, rax, 11
  01713	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0171b	8b 54 24 44	 mov	 edx, DWORD PTR vmb$[rsp]
  0171f	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
$LN33@s370_ecpsv:

; 2421 :         SET_PSW_IA_AND_MAYBE_IP(regs, EVM_L(elist+28));   /* Exit +28 */

  01726	8b 44 24 58	 mov	 eax, DWORD PTR elist$[rsp]
  0172a	83 c0 1c	 add	 eax, 28
  0172d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01732	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0173a	ba fe ff ff ff	 mov	 edx, -2
  0173f	8b c8		 mov	 ecx, eax
  01741	e8 00 00 00 00	 call	 s370_vfetch4
  01746	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0174b	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01753	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  01759	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01761	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  01769	74 6e		 je	 SHORT $LN115@s370_ecpsv
  0176b	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01773	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01779	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  0177e	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01786	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  0178c	75 38		 jne	 SHORT $LN116@s370_ecpsv
  0178e	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01796	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0179c	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  017a1	8b c0		 mov	 eax, eax
  017a3	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  017ab	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  017b2	48 0b c8	 or	 rcx, rax
  017b5	48 8b c1	 mov	 rax, rcx
  017b8	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  017c0	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  017c4	eb 13		 jmp	 SHORT $LN117@s370_ecpsv
$LN116@s370_ecpsv:
  017c6	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  017ce	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN117@s370_ecpsv:
$LN115@s370_ecpsv:
  017d9	33 c0		 xor	 eax, eax
  017db	85 c0		 test	 eax, eax
  017dd	0f 85 43 ff ff
	ff		 jne	 $LN33@s370_ecpsv

; 2422 :         CPASSIST_HIT(DISP0);

  017e3	48 8b 05 d0 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+208
  017ea	48 ff c0	 inc	 rax
  017ed	48 89 05 d0 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+208, rax

; 2423 :         EVM_ST(DISPCNT,dlist);

  017f4	8b 44 24 50	 mov	 eax, DWORD PTR dlist$[rsp]
  017f8	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  017fd	4c 8b 8c 24 c8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  01805	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0180b	8b d0		 mov	 edx, eax
  0180d	8b 4c 24 54	 mov	 ecx, DWORD PTR DISPCNT$[rsp]
  01811	e8 00 00 00 00	 call	 s370_vstore4

; 2424 :         return;

  01816	e9 92 01 00 00	 jmp	 $LN1@s370_ecpsv
$LN113@s370_ecpsv:

; 2425 :     }
; 2426 :     /* Take exit 0 (DISPATCH) */
; 2427 :     DEBUG_CPASSISTX(DISP0,WRMSG(HHC90000, "D", "DISP0 : DISPATCH - Taking exit #0"));

  0181b	8b 05 d8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+216
  01821	c1 e8 02	 shr	 eax, 2
  01824	83 e0 01	 and	 eax, 1
  01827	85 c0		 test	 eax, eax
  01829	74 53		 je	 SHORT $LN118@s370_ecpsv
  0182b	b9 01 00 00 00	 mov	 ecx, 1
  01830	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01836	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172131
  0183d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01842	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172132
  01849	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0184e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172133
  01855	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0185a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0185f	41 b9 03 00 00
	00		 mov	 r9d, 3
  01865	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG172134
  0186c	ba 7b 09 00 00	 mov	 edx, 2427		; 0000097bH
  01871	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG172135
  01878	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN118@s370_ecpsv:

; 2428 :     /* 2017-03-27 */
; 2429 :     EVM_STC(B_VMRSTAT,vmb+VMRSTAT);

  0187e	8b 44 24 44	 mov	 eax, DWORD PTR vmb$[rsp]
  01882	83 c0 58	 add	 eax, 88			; 00000058H
  01885	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0188a	4c 8b 8c 24 c8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  01892	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  01898	8b d0		 mov	 edx, eax
  0189a	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR B_VMRSTAT$[rsp]
  0189f	e8 00 00 00 00	 call	 s370_vstoreb

; 2430 :     /* end of 2017-03-27 */
; 2431 :     regs->GR_L(11)=vmb;

  018a4	b8 08 00 00 00	 mov	 eax, 8
  018a9	48 6b c0 0b	 imul	 rax, rax, 11
  018ad	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  018b5	8b 54 24 44	 mov	 edx, DWORD PTR vmb$[rsp]
  018b9	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
$LN36@s370_ecpsv:

; 2432 :     SET_PSW_IA_AND_MAYBE_IP(regs, EVM_L(elist+0));   /* Exit +0 */

  018c0	8b 44 24 58	 mov	 eax, DWORD PTR elist$[rsp]
  018c4	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  018c9	4c 8b 84 24 c8
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  018d1	ba fe ff ff ff	 mov	 edx, -2
  018d6	8b c8		 mov	 ecx, eax
  018d8	e8 00 00 00 00	 call	 s370_vfetch4
  018dd	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  018e2	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  018ea	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  018f0	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  018f8	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  01900	74 6e		 je	 SHORT $LN119@s370_ecpsv
  01902	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0190a	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01910	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  01915	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0191d	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  01923	75 38		 jne	 SHORT $LN120@s370_ecpsv
  01925	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0192d	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01933	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  01938	8b c0		 mov	 eax, eax
  0193a	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01942	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  01949	48 0b c8	 or	 rcx, rax
  0194c	48 8b c1	 mov	 rax, rcx
  0194f	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01957	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0195b	eb 13		 jmp	 SHORT $LN121@s370_ecpsv
$LN120@s370_ecpsv:
  0195d	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01965	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN121@s370_ecpsv:
$LN119@s370_ecpsv:
  01970	33 c0		 xor	 eax, eax
  01972	85 c0		 test	 eax, eax
  01974	0f 85 46 ff ff
	ff		 jne	 $LN36@s370_ecpsv

; 2433 :     CPASSIST_HIT(DISP0);

  0197a	48 8b 05 d0 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+208
  01981	48 ff c0	 inc	 rax
  01984	48 89 05 d0 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+208, rax

; 2434 :     EVM_ST(DISPCNT,dlist);

  0198b	8b 44 24 50	 mov	 eax, DWORD PTR dlist$[rsp]
  0198f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01994	4c 8b 8c 24 c8
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0199c	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  019a2	8b d0		 mov	 edx, eax
  019a4	8b 4c 24 54	 mov	 ecx, DWORD PTR DISPCNT$[rsp]
  019a8	e8 00 00 00 00	 call	 s370_vstore4
$LN1@s370_ecpsv:
$LN122@s370_ecpsv:

; 2435 :     return;
; 2436 : }

  019ad	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  019b5	48 33 cc	 xor	 rcx, rsp
  019b8	e8 00 00 00 00	 call	 __security_check_cookie
  019bd	48 81 c4 b8 01
	00 00		 add	 rsp, 440		; 000001b8H
  019c4	c3		 ret	 0
s370_ecpsvm_dispatch_main ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
effective_addr1$ = 64
effective_addr2$ = 68
temp$1 = 72
b1$ = 76
b2$ = 80
raddr$ = 88
inst$ = 112
regs$ = 120
s370_ecpsvm_decode_first_ccw PROC

; 1999 : {

$LN23:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 2000 : 
; 2001 : RADR raddr;
; 2002 : 
; 2003 :     ECPSVM_PROLOG(DFCCW);

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR inst$[rsp]
  00013	48 83 c0 02	 add	 rax, 2
  00017	48 8b c8	 mov	 rcx, rax
  0001a	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001f	8b c8		 mov	 ecx, eax
  00021	e8 00 00 00 00	 call	 _byteswap_ulong
  00026	89 44 24 48	 mov	 DWORD PTR temp$1[rsp], eax
  0002a	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0002e	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00033	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00037	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0003b	c1 e8 0c	 shr	 eax, 12
  0003e	83 e0 0f	 and	 eax, 15
  00041	89 44 24 50	 mov	 DWORD PTR b2$[rsp], eax
  00045	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00049	c1 e8 10	 shr	 eax, 16
  0004c	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00051	89 44 24 40	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00055	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00059	c1 e8 1c	 shr	 eax, 28
  0005c	83 e0 0f	 and	 eax, 15
  0005f	89 44 24 4c	 mov	 DWORD PTR b1$[rsp], eax
  00063	83 7c 24 4c 00	 cmp	 DWORD PTR b1$[rsp], 0
  00068	74 2a		 je	 SHORT $LN8@s370_ecpsv
  0006a	48 63 44 24 4c	 movsxd	 rax, DWORD PTR b1$[rsp]
  0006f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00074	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007b	8b 4c 24 40	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0007f	03 c8		 add	 ecx, eax
  00081	8b c1		 mov	 eax, ecx
  00083	89 44 24 40	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00087	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0008b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00090	89 44 24 40	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN8@s370_ecpsv:
  00094	83 7c 24 50 00	 cmp	 DWORD PTR b2$[rsp], 0
  00099	74 2a		 je	 SHORT $LN9@s370_ecpsv
  0009b	48 63 44 24 50	 movsxd	 rax, DWORD PTR b2$[rsp]
  000a0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a5	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000ac	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000b0	03 c8		 add	 ecx, eax
  000b2	8b c1		 mov	 eax, ecx
  000b4	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000b8	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000bc	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000c1	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN9@s370_ecpsv:
$LN4@s370_ecpsv:
  000c5	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000ca	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ce	48 83 c0 06	 add	 rax, 6
  000d2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000d7	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000db	33 c0		 xor	 eax, eax
  000dd	83 f8 06	 cmp	 eax, 6
  000e0	74 0c		 je	 SHORT $LN10@s370_ecpsv
  000e2	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000e7	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN10@s370_ecpsv:
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	75 d1		 jne	 SHORT $LN4@s370_ecpsv
  000f4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000f9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  000fd	83 e0 01	 and	 eax, 1
  00100	85 c0		 test	 eax, eax
  00102	74 15		 je	 SHORT $LN11@s370_ecpsv
  00104	ba 02 00 00 00	 mov	 edx, 2
  00109	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0010e	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00113	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN11@s370_ecpsv:
$LN7@s370_ecpsv:
  00119	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0011e	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00124	d1 e8		 shr	 eax, 1
  00126	83 e0 01	 and	 eax, 1
  00129	85 c0		 test	 eax, eax
  0012b	74 18		 je	 SHORT $LN12@s370_ecpsv
  0012d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00132	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00138	ba fc ff ff ff	 mov	 edx, -4
  0013d	48 8b c8	 mov	 rcx, rax
  00140	e8 00 00 00 00	 call	 longjmp
$LN12@s370_ecpsv:
  00145	33 c0		 xor	 eax, eax
  00147	85 c0		 test	 eax, eax
  00149	75 ce		 jne	 SHORT $LN7@s370_ecpsv
  0014b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00152	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00158	c1 e8 11	 shr	 eax, 17
  0015b	83 e0 01	 and	 eax, 1
  0015e	85 c0		 test	 eax, eax
  00160	75 72		 jne	 SHORT $LN13@s370_ecpsv
  00162	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+344
  00168	c1 e8 02	 shr	 eax, 2
  0016b	83 e0 01	 and	 eax, 1
  0016e	85 c0		 test	 eax, eax
  00170	74 53		 je	 SHORT $LN14@s370_ecpsv
  00172	b9 01 00 00 00	 mov	 ecx, 1
  00177	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171635
  00184	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171636
  00190	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171637
  0019c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001a1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a6	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171638
  001b3	ba d3 07 00 00	 mov	 edx, 2003		; 000007d3H
  001b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171639
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN14@s370_ecpsv:
  001c5	ba 01 00 00 00	 mov	 edx, 1
  001ca	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001cf	e8 00 00 00 00	 call	 s370_program_interrupt
$LN13@s370_ecpsv:
  001d4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001d9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  001dd	83 e0 01	 and	 eax, 1
  001e0	85 c0		 test	 eax, eax
  001e2	74 15		 je	 SHORT $LN15@s370_ecpsv
  001e4	ba 02 00 00 00	 mov	 edx, 2
  001e9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001ee	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001f3	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN15@s370_ecpsv:
  001f9	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+344
  001ff	d1 e8		 shr	 eax, 1
  00201	83 e0 01	 and	 eax, 1
  00204	85 c0		 test	 eax, eax
  00206	75 68		 jne	 SHORT $LN16@s370_ecpsv
  00208	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+344
  0020e	c1 e8 02	 shr	 eax, 2
  00211	83 e0 01	 and	 eax, 1
  00214	85 c0		 test	 eax, eax
  00216	74 53		 je	 SHORT $LN17@s370_ecpsv
  00218	b9 01 00 00 00	 mov	 ecx, 1
  0021d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00223	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171643
  0022a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171644
  00236	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171645
  00242	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00247	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00252	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171646
  00259	ba d3 07 00 00	 mov	 edx, 2003		; 000007d3H
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171647
  00265	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@s370_ecpsv:
  0026b	e9 41 01 00 00	 jmp	 $LN1@s370_ecpsv
$LN16@s370_ecpsv:
  00270	b8 08 00 00 00	 mov	 eax, 8
  00275	48 6b c0 07	 imul	 rax, rax, 7
  00279	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0027e	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00285	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0028a	85 c0		 test	 eax, eax
  0028c	75 05		 jne	 SHORT $LN18@s370_ecpsv
  0028e	e9 1e 01 00 00	 jmp	 $LN1@s370_ecpsv
$LN18@s370_ecpsv:
  00293	48 8b 05 48 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+328
  0029a	48 ff c0	 inc	 rax
  0029d	48 89 05 48 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+328, rax
  002a4	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+344
  002aa	c1 e8 02	 shr	 eax, 2
  002ad	83 e0 01	 and	 eax, 1
  002b0	85 c0		 test	 eax, eax
  002b2	74 53		 je	 SHORT $LN19@s370_ecpsv
  002b4	b9 01 00 00 00	 mov	 ecx, 1
  002b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171650
  002c6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171651
  002d2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171652
  002de	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e8	41 b9 03 00 00
	00		 mov	 r9d, 3
  002ee	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171653
  002f5	ba d3 07 00 00	 mov	 edx, 2003		; 000007d3H
  002fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171654
  00301	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN19@s370_ecpsv:

; 2004 : 
; 2005 :     if(ecpsvm_tranbrng(regs,effective_addr1,regs->GR_L(9),&raddr)!=0)

  00307	b8 08 00 00 00	 mov	 eax, 8
  0030c	48 6b c0 09	 imul	 rax, rax, 9
  00310	4c 8d 4c 24 58	 lea	 r9, QWORD PTR raddr$[rsp]
  00315	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0031a	44 8b 84 01 80
	02 00 00	 mov	 r8d, DWORD PTR [rcx+rax+640]
  00322	8b 54 24 40	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  00326	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0032b	e8 00 00 00 00	 call	 ecpsvm_tranbrng
  00330	85 c0		 test	 eax, eax
  00332	74 65		 je	 SHORT $LN20@s370_ecpsv

; 2006 :     {
; 2007 :         DEBUG_CPASSISTX(DFCCW,WRMSG(HHC90000, "D", "DFCCW cant translate vaddr; back to CP"));

  00334	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+344
  0033a	c1 e8 02	 shr	 eax, 2
  0033d	83 e0 01	 and	 eax, 1
  00340	85 c0		 test	 eax, eax
  00342	74 53		 je	 SHORT $LN21@s370_ecpsv
  00344	b9 01 00 00 00	 mov	 ecx, 1
  00349	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0034f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171657
  00356	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0035b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171658
  00362	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00367	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171659
  0036e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00373	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00378	41 b9 03 00 00
	00		 mov	 r9d, 3
  0037e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171660
  00385	ba d7 07 00 00	 mov	 edx, 2007		; 000007d7H
  0038a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171661
  00391	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN21@s370_ecpsv:

; 2008 :         return;

  00397	eb 18		 jmp	 SHORT $LN1@s370_ecpsv
$LN20@s370_ecpsv:

; 2009 :     }
; 2010 : 
; 2011 :     ecpsvm_do_deccw1(regs,effective_addr1,effective_addr2,raddr);

  00399	4c 8b 4c 24 58	 mov	 r9, QWORD PTR raddr$[rsp]
  0039e	44 8b 44 24 44	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  003a3	8b 54 24 40	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  003a7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  003ac	e8 00 00 00 00	 call	 ecpsvm_do_deccw1
$LN1@s370_ecpsv:
$LN22@s370_ecpsv:

; 2012 :     return;
; 2013 : }

  003b1	48 83 c4 68	 add	 rsp, 104		; 00000068H
  003b5	c3		 ret	 0
s370_ecpsvm_decode_first_ccw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
effective_addr2$ = 64
effective_addr1$ = 68
temp$1 = 72
b1$ = 76
b2$ = 80
inst$ = 112
regs$ = 120
s370_ecpsvm_inval_ptable PROC

; 1984 : {

$LN27:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1985 :     ECPSVM_PROLOG(VIPT);

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR inst$[rsp]
  00013	48 83 c0 02	 add	 rax, 2
  00017	48 8b c8	 mov	 rcx, rax
  0001a	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001f	8b c8		 mov	 ecx, eax
  00021	e8 00 00 00 00	 call	 _byteswap_ulong
  00026	89 44 24 48	 mov	 DWORD PTR temp$1[rsp], eax
  0002a	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0002e	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00033	89 44 24 40	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00037	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0003b	c1 e8 0c	 shr	 eax, 12
  0003e	83 e0 0f	 and	 eax, 15
  00041	89 44 24 50	 mov	 DWORD PTR b2$[rsp], eax
  00045	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00049	c1 e8 10	 shr	 eax, 16
  0004c	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00051	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00055	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00059	c1 e8 1c	 shr	 eax, 28
  0005c	83 e0 0f	 and	 eax, 15
  0005f	89 44 24 4c	 mov	 DWORD PTR b1$[rsp], eax
  00063	83 7c 24 4c 00	 cmp	 DWORD PTR b1$[rsp], 0
  00068	74 2a		 je	 SHORT $LN11@s370_ecpsv
  0006a	48 63 44 24 4c	 movsxd	 rax, DWORD PTR b1$[rsp]
  0006f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00074	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007b	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0007f	03 c8		 add	 ecx, eax
  00081	8b c1		 mov	 eax, ecx
  00083	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00087	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0008b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00090	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN11@s370_ecpsv:
  00094	83 7c 24 50 00	 cmp	 DWORD PTR b2$[rsp], 0
  00099	74 2a		 je	 SHORT $LN12@s370_ecpsv
  0009b	48 63 44 24 50	 movsxd	 rax, DWORD PTR b2$[rsp]
  000a0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a5	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000ac	8b 4c 24 40	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000b0	03 c8		 add	 ecx, eax
  000b2	8b c1		 mov	 eax, ecx
  000b4	89 44 24 40	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000b8	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000bc	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000c1	89 44 24 40	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN12@s370_ecpsv:
$LN4@s370_ecpsv:
  000c5	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000ca	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ce	48 83 c0 06	 add	 rax, 6
  000d2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000d7	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000db	33 c0		 xor	 eax, eax
  000dd	83 f8 06	 cmp	 eax, 6
  000e0	74 0c		 je	 SHORT $LN13@s370_ecpsv
  000e2	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000e7	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN13@s370_ecpsv:
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	75 d1		 jne	 SHORT $LN4@s370_ecpsv
  000f4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000f9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  000fd	83 e0 01	 and	 eax, 1
  00100	85 c0		 test	 eax, eax
  00102	74 15		 je	 SHORT $LN14@s370_ecpsv
  00104	ba 02 00 00 00	 mov	 edx, 2
  00109	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0010e	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00113	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN14@s370_ecpsv:
$LN7@s370_ecpsv:
  00119	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0011e	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00124	d1 e8		 shr	 eax, 1
  00126	83 e0 01	 and	 eax, 1
  00129	85 c0		 test	 eax, eax
  0012b	74 18		 je	 SHORT $LN15@s370_ecpsv
  0012d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00132	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00138	ba fc ff ff ff	 mov	 edx, -4
  0013d	48 8b c8	 mov	 rcx, rax
  00140	e8 00 00 00 00	 call	 longjmp
$LN15@s370_ecpsv:
  00145	33 c0		 xor	 eax, eax
  00147	85 c0		 test	 eax, eax
  00149	75 ce		 jne	 SHORT $LN7@s370_ecpsv
  0014b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00152	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00158	c1 e8 11	 shr	 eax, 17
  0015b	83 e0 01	 and	 eax, 1
  0015e	85 c0		 test	 eax, eax
  00160	75 72		 jne	 SHORT $LN16@s370_ecpsv
  00162	8b 05 38 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+568
  00168	c1 e8 02	 shr	 eax, 2
  0016b	83 e0 01	 and	 eax, 1
  0016e	85 c0		 test	 eax, eax
  00170	74 53		 je	 SHORT $LN17@s370_ecpsv
  00172	b9 01 00 00 00	 mov	 ecx, 1
  00177	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171586
  00184	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171587
  00190	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171588
  0019c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001a1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a6	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171589
  001b3	ba c1 07 00 00	 mov	 edx, 1985		; 000007c1H
  001b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171590
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@s370_ecpsv:
  001c5	ba 01 00 00 00	 mov	 edx, 1
  001ca	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001cf	e8 00 00 00 00	 call	 s370_program_interrupt
$LN16@s370_ecpsv:
  001d4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001d9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  001dd	83 e0 01	 and	 eax, 1
  001e0	85 c0		 test	 eax, eax
  001e2	74 15		 je	 SHORT $LN18@s370_ecpsv
  001e4	ba 02 00 00 00	 mov	 edx, 2
  001e9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001ee	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001f3	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN18@s370_ecpsv:
  001f9	8b 05 38 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+568
  001ff	d1 e8		 shr	 eax, 1
  00201	83 e0 01	 and	 eax, 1
  00204	85 c0		 test	 eax, eax
  00206	75 68		 jne	 SHORT $LN19@s370_ecpsv
  00208	8b 05 38 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+568
  0020e	c1 e8 02	 shr	 eax, 2
  00211	83 e0 01	 and	 eax, 1
  00214	85 c0		 test	 eax, eax
  00216	74 53		 je	 SHORT $LN20@s370_ecpsv
  00218	b9 01 00 00 00	 mov	 ecx, 1
  0021d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00223	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171594
  0022a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171595
  00236	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171596
  00242	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00247	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00252	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171597
  00259	ba c1 07 00 00	 mov	 edx, 1985		; 000007c1H
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171598
  00265	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN20@s370_ecpsv:
  0026b	e9 55 01 00 00	 jmp	 $LN1@s370_ecpsv
$LN19@s370_ecpsv:
  00270	b8 08 00 00 00	 mov	 eax, 8
  00275	48 6b c0 07	 imul	 rax, rax, 7
  00279	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0027e	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00285	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0028a	85 c0		 test	 eax, eax
  0028c	75 05		 jne	 SHORT $LN21@s370_ecpsv
  0028e	e9 32 01 00 00	 jmp	 $LN1@s370_ecpsv
$LN21@s370_ecpsv:
  00293	48 8b 05 28 02
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+552
  0029a	48 ff c0	 inc	 rax
  0029d	48 89 05 28 02
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+552, rax
  002a4	8b 05 38 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+568
  002aa	c1 e8 02	 shr	 eax, 2
  002ad	83 e0 01	 and	 eax, 1
  002b0	85 c0		 test	 eax, eax
  002b2	74 53		 je	 SHORT $LN22@s370_ecpsv
  002b4	b9 01 00 00 00	 mov	 ecx, 1
  002b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171601
  002c6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171602
  002d2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171603
  002de	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e8	41 b9 03 00 00
	00		 mov	 r9d, 3
  002ee	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171604
  002f5	ba c1 07 00 00	 mov	 edx, 1985		; 000007c1H
  002fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171605
  00301	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN22@s370_ecpsv:

; 1986 :     ecpsvm_zappage(regs, effective_addr1, effective_addr2);

  00307	44 8b 44 24 40	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  0030c	8b 54 24 44	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  00310	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00315	e8 00 00 00 00	 call	 ecpsvm_zappage
$LN10@s370_ecpsv:

; 1987 :     BR14;

  0031a	b8 08 00 00 00	 mov	 eax, 8
  0031f	48 6b c0 0e	 imul	 rax, rax, 14
  00323	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00328	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0032f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00334	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00339	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  0033f	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00344	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  0034c	74 5c		 je	 SHORT $LN23@s370_ecpsv
  0034e	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00353	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00359	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  0035e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00363	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00369	75 2f		 jne	 SHORT $LN24@s370_ecpsv
  0036b	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00370	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00376	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0037b	8b c0		 mov	 eax, eax
  0037d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00382	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00389	48 0b c8	 or	 rcx, rax
  0038c	48 8b c1	 mov	 rax, rcx
  0038f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00394	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00398	eb 10		 jmp	 SHORT $LN25@s370_ecpsv
$LN24@s370_ecpsv:
  0039a	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0039f	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN25@s370_ecpsv:
$LN23@s370_ecpsv:
  003aa	33 c0		 xor	 eax, eax
  003ac	85 c0		 test	 eax, eax
  003ae	0f 85 66 ff ff
	ff		 jne	 $LN10@s370_ecpsv

; 1988 :     CPASSIST_HIT(VIPT);

  003b4	48 8b 05 30 02
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+560
  003bb	48 ff c0	 inc	 rax
  003be	48 89 05 30 02
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+560, rax
$LN1@s370_ecpsv:
$LN26@s370_ecpsv:

; 1989 :     return;
; 1990 : 
; 1991 : }

  003c5	48 83 c4 68	 add	 rsp, 104		; 00000068H
  003c9	c3		 ret	 0
s370_ecpsvm_inval_ptable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
effective_addr2$ = 64
seg$ = 68
segment_table_len$ = 72
effective_addr1$ = 76
temp$1 = 80
ptr_segtabl$ = 84
b1$ = 88
b2$ = 92
ptr_segtabl_end$ = 96
tv251 = 100
pindex$ = 104
buf$ = 112
__$ArrayPad$ = 368
inst$ = 400
regs$ = 408
s370_ecpsvm_inval_segtab PROC

; 1940 : {

$LN32:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1941 :     char buf[256];
; 1942 :     VADR ptr_segtabl;
; 1943 :     VADR ptr_segtabl_end;
; 1944 :     VADR seg;
; 1945 :     VADR pindex;
; 1946 :     U16 segment_table_len;
; 1947 : 
; 1948 :     ECPSVM_PROLOG(VIST);

  00023	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  0002b	48 83 c0 02	 add	 rax, 2
  0002f	48 8b c8	 mov	 rcx, rax
  00032	e8 00 00 00 00	 call	 fetch_fw_noswap
  00037	8b c8		 mov	 ecx, eax
  00039	e8 00 00 00 00	 call	 _byteswap_ulong
  0003e	89 44 24 50	 mov	 DWORD PTR temp$1[rsp], eax
  00042	8b 44 24 50	 mov	 eax, DWORD PTR temp$1[rsp]
  00046	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0004b	89 44 24 40	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0004f	8b 44 24 50	 mov	 eax, DWORD PTR temp$1[rsp]
  00053	c1 e8 0c	 shr	 eax, 12
  00056	83 e0 0f	 and	 eax, 15
  00059	89 44 24 5c	 mov	 DWORD PTR b2$[rsp], eax
  0005d	8b 44 24 50	 mov	 eax, DWORD PTR temp$1[rsp]
  00061	c1 e8 10	 shr	 eax, 16
  00064	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00069	89 44 24 4c	 mov	 DWORD PTR effective_addr1$[rsp], eax
  0006d	8b 44 24 50	 mov	 eax, DWORD PTR temp$1[rsp]
  00071	c1 e8 1c	 shr	 eax, 28
  00074	83 e0 0f	 and	 eax, 15
  00077	89 44 24 58	 mov	 DWORD PTR b1$[rsp], eax
  0007b	83 7c 24 58 00	 cmp	 DWORD PTR b1$[rsp], 0
  00080	74 2d		 je	 SHORT $LN14@s370_ecpsv
  00082	48 63 44 24 58	 movsxd	 rax, DWORD PTR b1$[rsp]
  00087	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0008f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00096	8b 4c 24 4c	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0009a	03 c8		 add	 ecx, eax
  0009c	8b c1		 mov	 eax, ecx
  0009e	89 44 24 4c	 mov	 DWORD PTR effective_addr1$[rsp], eax
  000a2	8b 44 24 4c	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  000a6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000ab	89 44 24 4c	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN14@s370_ecpsv:
  000af	83 7c 24 5c 00	 cmp	 DWORD PTR b2$[rsp], 0
  000b4	74 2d		 je	 SHORT $LN15@s370_ecpsv
  000b6	48 63 44 24 5c	 movsxd	 rax, DWORD PTR b2$[rsp]
  000bb	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000c3	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000ca	8b 4c 24 40	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000ce	03 c8		 add	 ecx, eax
  000d0	8b c1		 mov	 eax, ecx
  000d2	89 44 24 40	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000d6	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000da	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000df	89 44 24 40	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN15@s370_ecpsv:
$LN4@s370_ecpsv:
  000e3	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000eb	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ef	48 83 c0 06	 add	 rax, 6
  000f3	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000fb	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000ff	33 c0		 xor	 eax, eax
  00101	83 f8 06	 cmp	 eax, 6
  00104	74 0f		 je	 SHORT $LN16@s370_ecpsv
  00106	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0010e	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN16@s370_ecpsv:
  00115	33 c0		 xor	 eax, eax
  00117	85 c0		 test	 eax, eax
  00119	75 c8		 jne	 SHORT $LN4@s370_ecpsv
  0011b	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00123	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00127	83 e0 01	 and	 eax, 1
  0012a	85 c0		 test	 eax, eax
  0012c	74 1b		 je	 SHORT $LN17@s370_ecpsv
  0012e	ba 02 00 00 00	 mov	 edx, 2
  00133	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0013b	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00143	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN17@s370_ecpsv:
$LN7@s370_ecpsv:
  00149	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00151	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00157	d1 e8		 shr	 eax, 1
  00159	83 e0 01	 and	 eax, 1
  0015c	85 c0		 test	 eax, eax
  0015e	74 1b		 je	 SHORT $LN18@s370_ecpsv
  00160	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00168	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  0016e	ba fc ff ff ff	 mov	 edx, -4
  00173	48 8b c8	 mov	 rcx, rax
  00176	e8 00 00 00 00	 call	 longjmp
$LN18@s370_ecpsv:
  0017b	33 c0		 xor	 eax, eax
  0017d	85 c0		 test	 eax, eax
  0017f	75 c8		 jne	 SHORT $LN7@s370_ecpsv
  00181	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00188	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  0018e	c1 e8 11	 shr	 eax, 17
  00191	83 e0 01	 and	 eax, 1
  00194	85 c0		 test	 eax, eax
  00196	75 75		 jne	 SHORT $LN19@s370_ecpsv
  00198	8b 05 18 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+536
  0019e	c1 e8 02	 shr	 eax, 2
  001a1	83 e0 01	 and	 eax, 1
  001a4	85 c0		 test	 eax, eax
  001a6	74 53		 je	 SHORT $LN20@s370_ecpsv
  001a8	b9 01 00 00 00	 mov	 ecx, 1
  001ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171523
  001ba	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171524
  001c6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171525
  001d2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001d7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001dc	41 b9 03 00 00
	00		 mov	 r9d, 3
  001e2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171526
  001e9	ba 9c 07 00 00	 mov	 edx, 1948		; 0000079cH
  001ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171527
  001f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN20@s370_ecpsv:
  001fb	ba 01 00 00 00	 mov	 edx, 1
  00200	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00208	e8 00 00 00 00	 call	 s370_program_interrupt
$LN19@s370_ecpsv:
  0020d	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00215	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00219	83 e0 01	 and	 eax, 1
  0021c	85 c0		 test	 eax, eax
  0021e	74 1b		 je	 SHORT $LN21@s370_ecpsv
  00220	ba 02 00 00 00	 mov	 edx, 2
  00225	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0022d	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00235	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN21@s370_ecpsv:
  0023b	8b 05 18 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+536
  00241	d1 e8		 shr	 eax, 1
  00243	83 e0 01	 and	 eax, 1
  00246	85 c0		 test	 eax, eax
  00248	75 68		 jne	 SHORT $LN22@s370_ecpsv
  0024a	8b 05 18 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+536
  00250	c1 e8 02	 shr	 eax, 2
  00253	83 e0 01	 and	 eax, 1
  00256	85 c0		 test	 eax, eax
  00258	74 53		 je	 SHORT $LN23@s370_ecpsv
  0025a	b9 01 00 00 00	 mov	 ecx, 1
  0025f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00265	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171531
  0026c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00271	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171532
  00278	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0027d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171533
  00284	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00289	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0028e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00294	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171534
  0029b	ba 9c 07 00 00	 mov	 edx, 1948		; 0000079cH
  002a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171535
  002a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN23@s370_ecpsv:
  002ad	e9 43 03 00 00	 jmp	 $LN1@s370_ecpsv
$LN22@s370_ecpsv:
  002b2	b8 08 00 00 00	 mov	 eax, 8
  002b7	48 6b c0 07	 imul	 rax, rax, 7
  002bb	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002c3	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  002ca	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  002cf	85 c0		 test	 eax, eax
  002d1	75 05		 jne	 SHORT $LN24@s370_ecpsv
  002d3	e9 1d 03 00 00	 jmp	 $LN1@s370_ecpsv
$LN24@s370_ecpsv:
  002d8	48 8b 05 08 02
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+520
  002df	48 ff c0	 inc	 rax
  002e2	48 89 05 08 02
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+520, rax
  002e9	8b 05 18 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+536
  002ef	c1 e8 02	 shr	 eax, 2
  002f2	83 e0 01	 and	 eax, 1
  002f5	85 c0		 test	 eax, eax
  002f7	74 53		 je	 SHORT $LN25@s370_ecpsv
  002f9	b9 01 00 00 00	 mov	 ecx, 1
  002fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00304	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171538
  0030b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00310	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171539
  00317	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0031c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171540
  00323	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00328	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0032d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00333	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171541
  0033a	ba 9c 07 00 00	 mov	 edx, 1948		; 0000079cH
  0033f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171542
  00346	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN25@s370_ecpsv:

; 1949 : 
; 1950 :     /* get shadow segment table origin and table length from ECBLOK */
; 1951 :     ptr_segtabl=EVM_L(effective_addr2) & 0x00FFFFF8;

  0034c	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00350	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00355	4c 8b 84 24 98
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0035d	ba fe ff ff ff	 mov	 edx, -2
  00362	8b c8		 mov	 ecx, eax
  00364	e8 00 00 00 00	 call	 s370_vfetch4
  00369	25 f8 ff ff 00	 and	 eax, 16777208		; 00fffff8H
  0036e	89 44 24 54	 mov	 DWORD PTR ptr_segtabl$[rsp], eax

; 1952 :     segment_table_len=EVM_LH(effective_addr2+4);

  00372	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00376	83 c0 04	 add	 eax, 4
  00379	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0037e	4c 8b 84 24 98
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00386	ba fe ff ff ff	 mov	 edx, -2
  0038b	8b c8		 mov	 ecx, eax
  0038d	e8 00 00 00 00	 call	 s370_vfetch2
  00392	66 89 44 24 48	 mov	 WORD PTR segment_table_len$[rsp], ax

; 1953 :     DEBUG_CPASSISTX(VIST,MSGBUF(buf, "VIST  : Seg table addr = %x,  len = %x",ptr_segtabl,segment_table_len));

  00397	8b 05 18 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+536
  0039d	c1 e8 02	 shr	 eax, 2
  003a0	83 e0 01	 and	 eax, 1
  003a3	85 c0		 test	 eax, eax
  003a5	74 25		 je	 SHORT $LN26@s370_ecpsv
  003a7	0f b7 44 24 48	 movzx	 eax, WORD PTR segment_table_len$[rsp]
  003ac	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  003b0	44 8b 4c 24 54	 mov	 r9d, DWORD PTR ptr_segtabl$[rsp]
  003b5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171544
  003bc	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  003c1	48 8d 4c 24 70	 lea	 rcx, QWORD PTR buf$[rsp]
  003c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN26@s370_ecpsv:

; 1954 :     DEBUG_CPASSISTX(VIST,WRMSG(HHC90000, "D", buf));

  003cc	8b 05 18 02 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+536
  003d2	c1 e8 02	 shr	 eax, 2
  003d5	83 e0 01	 and	 eax, 1
  003d8	85 c0		 test	 eax, eax
  003da	74 51		 je	 SHORT $LN27@s370_ecpsv
  003dc	b9 01 00 00 00	 mov	 ecx, 1
  003e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003e7	48 8d 4c 24 70	 lea	 rcx, QWORD PTR buf$[rsp]
  003ec	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171546
  003f8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171547
  00404	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00409	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0040e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00414	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171548
  0041b	ba a2 07 00 00	 mov	 edx, 1954		; 000007a2H
  00420	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171549
  00427	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN27@s370_ecpsv:

; 1955 : 
; 1956 :     ptr_segtabl_end=ptr_segtabl+segment_table_len;

  0042d	0f b7 44 24 48	 movzx	 eax, WORD PTR segment_table_len$[rsp]
  00432	8b 4c 24 54	 mov	 ecx, DWORD PTR ptr_segtabl$[rsp]
  00436	03 c8		 add	 ecx, eax
  00438	8b c1		 mov	 eax, ecx
  0043a	89 44 24 60	 mov	 DWORD PTR ptr_segtabl_end$[rsp], eax

; 1957 :     pindex=regs->GR_L(9);

  0043e	b8 08 00 00 00	 mov	 eax, 8
  00443	48 6b c0 09	 imul	 rax, rax, 9
  00447	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0044f	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00456	89 44 24 68	 mov	 DWORD PTR pindex$[rsp], eax

; 1958 : 
; 1959 :     /* Invalidate this segment, then invalidate the page table */
; 1960 :     for (seg=ptr_segtabl; seg<ptr_segtabl_end; seg+=4)

  0045a	8b 44 24 54	 mov	 eax, DWORD PTR ptr_segtabl$[rsp]
  0045e	89 44 24 44	 mov	 DWORD PTR seg$[rsp], eax
  00462	eb 0b		 jmp	 SHORT $LN10@s370_ecpsv
$LN8@s370_ecpsv:
  00464	8b 44 24 44	 mov	 eax, DWORD PTR seg$[rsp]
  00468	83 c0 04	 add	 eax, 4
  0046b	89 44 24 44	 mov	 DWORD PTR seg$[rsp], eax
$LN10@s370_ecpsv:
  0046f	8b 44 24 60	 mov	 eax, DWORD PTR ptr_segtabl_end$[rsp]
  00473	39 44 24 44	 cmp	 DWORD PTR seg$[rsp], eax
  00477	73 7e		 jae	 SHORT $LN9@s370_ecpsv

; 1961 :     {
; 1962 :         EVM_ST(EVM_L(seg) | 0x00000001, seg);

  00479	8b 44 24 44	 mov	 eax, DWORD PTR seg$[rsp]
  0047d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00482	89 44 24 64	 mov	 DWORD PTR tv251[rsp], eax
  00486	8b 4c 24 44	 mov	 ecx, DWORD PTR seg$[rsp]
  0048a	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  00490	4c 8b 84 24 98
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00498	ba fe ff ff ff	 mov	 edx, -2
  0049d	e8 00 00 00 00	 call	 s370_vfetch4
  004a2	83 c8 01	 or	 eax, 1
  004a5	4c 8b 8c 24 98
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  004ad	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  004b3	8b 4c 24 64	 mov	 ecx, DWORD PTR tv251[rsp]
  004b7	8b d1		 mov	 edx, ecx
  004b9	8b c8		 mov	 ecx, eax
  004bb	e8 00 00 00 00	 call	 s370_vstore4

; 1963 :         regs->GR_L(6)=seg;

  004c0	b8 08 00 00 00	 mov	 eax, 8
  004c5	48 6b c0 06	 imul	 rax, rax, 6
  004c9	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004d1	8b 54 24 44	 mov	 edx, DWORD PTR seg$[rsp]
  004d5	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 1964 :         ecpsvm_zappage(regs, effective_addr1, pindex);

  004dc	44 8b 44 24 68	 mov	 r8d, DWORD PTR pindex$[rsp]
  004e1	8b 54 24 4c	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  004e5	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004ed	e8 00 00 00 00	 call	 ecpsvm_zappage

; 1965 :     }

  004f2	e9 6d ff ff ff	 jmp	 $LN8@s370_ecpsv
$LN9@s370_ecpsv:

; 1966 : 
; 1967 :     /* Indicate Purge TLB required and return via GR8 */
; 1968 :     EVM_STC(EVM_IC(APSTAT2) | CPPTLBR,APSTAT2);

  004f7	4c 8b 84 24 98
	01 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  004ff	ba fe ff ff ff	 mov	 edx, -2
  00504	b9 9b 06 00 00	 mov	 ecx, 1691		; 0000069bH
  00509	e8 00 00 00 00	 call	 s370_vfetchb
  0050e	0f b6 c0	 movzx	 eax, al
  00511	83 c8 02	 or	 eax, 2
  00514	4c 8b 8c 24 98
	01 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  0051c	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  00522	ba 9b 06 00 00	 mov	 edx, 1691		; 0000069bH
  00527	0f b6 c8	 movzx	 ecx, al
  0052a	e8 00 00 00 00	 call	 s370_vstoreb
$LN13@s370_ecpsv:

; 1969 :     SET_PSW_IA_AND_MAYBE_IP(regs, regs->GR_L(8));

  0052f	b8 08 00 00 00	 mov	 eax, 8
  00534	48 6b c0 08	 imul	 rax, rax, 8
  00538	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00540	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00547	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0054c	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00554	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  0055a	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00562	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  0056a	74 6e		 je	 SHORT $LN28@s370_ecpsv
  0056c	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00574	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0057a	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  0057f	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00587	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  0058d	75 38		 jne	 SHORT $LN29@s370_ecpsv
  0058f	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00597	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0059d	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  005a2	8b c0		 mov	 eax, eax
  005a4	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005ac	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  005b3	48 0b c8	 or	 rcx, rax
  005b6	48 8b c1	 mov	 rax, rcx
  005b9	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005c1	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  005c5	eb 13		 jmp	 SHORT $LN30@s370_ecpsv
$LN29@s370_ecpsv:
  005c7	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005cf	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN30@s370_ecpsv:
$LN28@s370_ecpsv:
  005da	33 c0		 xor	 eax, eax
  005dc	85 c0		 test	 eax, eax
  005de	0f 85 4b ff ff
	ff		 jne	 $LN13@s370_ecpsv

; 1970 :     CPASSIST_HIT(VIST);

  005e4	48 8b 05 10 02
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+528
  005eb	48 ff c0	 inc	 rax
  005ee	48 89 05 10 02
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+528, rax
$LN1@s370_ecpsv:
$LN31@s370_ecpsv:

; 1971 :     return;
; 1972 : }

  005f5	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  005fd	48 33 cc	 xor	 rcx, rsp
  00600	e8 00 00 00 00	 call	 __security_check_cookie
  00605	48 81 c4 88 01
	00 00		 add	 rsp, 392		; 00000188H
  0060c	c3		 ret	 0
s370_ecpsvm_inval_segtab ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
effective_addr1$ = 64
effective_addr2$ = 68
temp$1 = 72
b1$ = 76
b2$ = 80
rc$ = 84
raddr$ = 88
inst$ = 112
regs$ = 120
s370_ecpsvm_tpage_lock PROC

; 1875 : {

$LN30:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1876 :     int rc;
; 1877 :     RADR raddr;
; 1878 :     ECPSVM_PROLOG(TRLOK);

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR inst$[rsp]
  00013	48 83 c0 02	 add	 rax, 2
  00017	48 8b c8	 mov	 rcx, rax
  0001a	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001f	8b c8		 mov	 ecx, eax
  00021	e8 00 00 00 00	 call	 _byteswap_ulong
  00026	89 44 24 48	 mov	 DWORD PTR temp$1[rsp], eax
  0002a	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0002e	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00033	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00037	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0003b	c1 e8 0c	 shr	 eax, 12
  0003e	83 e0 0f	 and	 eax, 15
  00041	89 44 24 50	 mov	 DWORD PTR b2$[rsp], eax
  00045	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00049	c1 e8 10	 shr	 eax, 16
  0004c	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00051	89 44 24 40	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00055	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00059	c1 e8 1c	 shr	 eax, 28
  0005c	83 e0 0f	 and	 eax, 15
  0005f	89 44 24 4c	 mov	 DWORD PTR b1$[rsp], eax
  00063	83 7c 24 4c 00	 cmp	 DWORD PTR b1$[rsp], 0
  00068	74 2a		 je	 SHORT $LN11@s370_ecpsv
  0006a	48 63 44 24 4c	 movsxd	 rax, DWORD PTR b1$[rsp]
  0006f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00074	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007b	8b 4c 24 40	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0007f	03 c8		 add	 ecx, eax
  00081	8b c1		 mov	 eax, ecx
  00083	89 44 24 40	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00087	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0008b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00090	89 44 24 40	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN11@s370_ecpsv:
  00094	83 7c 24 50 00	 cmp	 DWORD PTR b2$[rsp], 0
  00099	74 2a		 je	 SHORT $LN12@s370_ecpsv
  0009b	48 63 44 24 50	 movsxd	 rax, DWORD PTR b2$[rsp]
  000a0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a5	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000ac	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000b0	03 c8		 add	 ecx, eax
  000b2	8b c1		 mov	 eax, ecx
  000b4	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000b8	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000bc	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000c1	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN12@s370_ecpsv:
$LN4@s370_ecpsv:
  000c5	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000ca	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ce	48 83 c0 06	 add	 rax, 6
  000d2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000d7	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000db	33 c0		 xor	 eax, eax
  000dd	83 f8 06	 cmp	 eax, 6
  000e0	74 0c		 je	 SHORT $LN13@s370_ecpsv
  000e2	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000e7	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN13@s370_ecpsv:
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	75 d1		 jne	 SHORT $LN4@s370_ecpsv
  000f4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000f9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  000fd	83 e0 01	 and	 eax, 1
  00100	85 c0		 test	 eax, eax
  00102	74 15		 je	 SHORT $LN14@s370_ecpsv
  00104	ba 02 00 00 00	 mov	 edx, 2
  00109	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0010e	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00113	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN14@s370_ecpsv:
$LN7@s370_ecpsv:
  00119	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0011e	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00124	d1 e8		 shr	 eax, 1
  00126	83 e0 01	 and	 eax, 1
  00129	85 c0		 test	 eax, eax
  0012b	74 18		 je	 SHORT $LN15@s370_ecpsv
  0012d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00132	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00138	ba fc ff ff ff	 mov	 edx, -4
  0013d	48 8b c8	 mov	 rcx, rax
  00140	e8 00 00 00 00	 call	 longjmp
$LN15@s370_ecpsv:
  00145	33 c0		 xor	 eax, eax
  00147	85 c0		 test	 eax, eax
  00149	75 ce		 jne	 SHORT $LN7@s370_ecpsv
  0014b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00152	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00158	c1 e8 11	 shr	 eax, 17
  0015b	83 e0 01	 and	 eax, 1
  0015e	85 c0		 test	 eax, eax
  00160	75 72		 jne	 SHORT $LN16@s370_ecpsv
  00162	8b 05 f8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+504
  00168	c1 e8 02	 shr	 eax, 2
  0016b	83 e0 01	 and	 eax, 1
  0016e	85 c0		 test	 eax, eax
  00170	74 53		 je	 SHORT $LN17@s370_ecpsv
  00172	b9 01 00 00 00	 mov	 ecx, 1
  00177	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171431
  00184	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171432
  00190	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171433
  0019c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001a1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a6	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171434
  001b3	ba 56 07 00 00	 mov	 edx, 1878		; 00000756H
  001b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171435
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@s370_ecpsv:
  001c5	ba 01 00 00 00	 mov	 edx, 1
  001ca	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001cf	e8 00 00 00 00	 call	 s370_program_interrupt
$LN16@s370_ecpsv:
  001d4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001d9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  001dd	83 e0 01	 and	 eax, 1
  001e0	85 c0		 test	 eax, eax
  001e2	74 15		 je	 SHORT $LN18@s370_ecpsv
  001e4	ba 02 00 00 00	 mov	 edx, 2
  001e9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001ee	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001f3	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN18@s370_ecpsv:
  001f9	8b 05 f8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+504
  001ff	d1 e8		 shr	 eax, 1
  00201	83 e0 01	 and	 eax, 1
  00204	85 c0		 test	 eax, eax
  00206	75 68		 jne	 SHORT $LN19@s370_ecpsv
  00208	8b 05 f8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+504
  0020e	c1 e8 02	 shr	 eax, 2
  00211	83 e0 01	 and	 eax, 1
  00214	85 c0		 test	 eax, eax
  00216	74 53		 je	 SHORT $LN20@s370_ecpsv
  00218	b9 01 00 00 00	 mov	 ecx, 1
  0021d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00223	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171439
  0022a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171440
  00236	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171441
  00242	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00247	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00252	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171442
  00259	ba 56 07 00 00	 mov	 edx, 1878		; 00000756H
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171443
  00265	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN20@s370_ecpsv:
  0026b	e9 67 02 00 00	 jmp	 $LN1@s370_ecpsv
$LN19@s370_ecpsv:
  00270	b8 08 00 00 00	 mov	 eax, 8
  00275	48 6b c0 07	 imul	 rax, rax, 7
  00279	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0027e	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00285	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0028a	85 c0		 test	 eax, eax
  0028c	75 05		 jne	 SHORT $LN21@s370_ecpsv
  0028e	e9 44 02 00 00	 jmp	 $LN1@s370_ecpsv
$LN21@s370_ecpsv:
  00293	48 8b 05 e8 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+488
  0029a	48 ff c0	 inc	 rax
  0029d	48 89 05 e8 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+488, rax
  002a4	8b 05 f8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+504
  002aa	c1 e8 02	 shr	 eax, 2
  002ad	83 e0 01	 and	 eax, 1
  002b0	85 c0		 test	 eax, eax
  002b2	74 53		 je	 SHORT $LN22@s370_ecpsv
  002b4	b9 01 00 00 00	 mov	 ecx, 1
  002b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171446
  002c6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171447
  002d2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171448
  002de	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e8	41 b9 03 00 00
	00		 mov	 r9d, 3
  002ee	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171449
  002f5	ba 56 07 00 00	 mov	 edx, 1878		; 00000756H
  002fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171450
  00301	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN22@s370_ecpsv:

; 1879 :     DEBUG_CPASSISTX(TRLOK,WRMSG(HHC90000, "D", "TRANLOCK"));

  00307	8b 05 f8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+504
  0030d	c1 e8 02	 shr	 eax, 2
  00310	83 e0 01	 and	 eax, 1
  00313	85 c0		 test	 eax, eax
  00315	74 53		 je	 SHORT $LN23@s370_ecpsv
  00317	b9 01 00 00 00	 mov	 ecx, 1
  0031c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00322	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171452
  00329	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0032e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171453
  00335	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0033a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171454
  00341	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00346	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0034b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00351	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171455
  00358	ba 57 07 00 00	 mov	 edx, 1879		; 00000757H
  0035d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171456
  00364	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN23@s370_ecpsv:

; 1880 :     rc=ecpsvm_tranbrng(regs,effective_addr1,regs->GR_L(1),&raddr);

  0036a	b8 08 00 00 00	 mov	 eax, 8
  0036f	48 6b c0 01	 imul	 rax, rax, 1
  00373	4c 8d 4c 24 58	 lea	 r9, QWORD PTR raddr$[rsp]
  00378	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0037d	44 8b 84 01 80
	02 00 00	 mov	 r8d, DWORD PTR [rcx+rax+640]
  00385	8b 54 24 40	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  00389	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0038e	e8 00 00 00 00	 call	 ecpsvm_tranbrng
  00393	89 44 24 54	 mov	 DWORD PTR rc$[rsp], eax

; 1881 :     if(rc)

  00397	83 7c 24 54 00	 cmp	 DWORD PTR rc$[rsp], 0
  0039c	74 68		 je	 SHORT $LN24@s370_ecpsv

; 1882 :     {
; 1883 :         DEBUG_CPASSISTX(TRLOK,WRMSG(HHC90000, "D", "TRANLOCK - Back to CP"));

  0039e	8b 05 f8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+504
  003a4	c1 e8 02	 shr	 eax, 2
  003a7	83 e0 01	 and	 eax, 1
  003aa	85 c0		 test	 eax, eax
  003ac	74 53		 je	 SHORT $LN25@s370_ecpsv
  003ae	b9 01 00 00 00	 mov	 ecx, 1
  003b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171459
  003c0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171460
  003cc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171461
  003d8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003dd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003e2	41 b9 03 00 00
	00		 mov	 r9d, 3
  003e8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171462
  003ef	ba 5b 07 00 00	 mov	 edx, 1883		; 0000075bH
  003f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171463
  003fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN25@s370_ecpsv:

; 1884 :         return; /* Something not right : NO OP */

  00401	e9 d1 00 00 00	 jmp	 $LN1@s370_ecpsv
$LN24@s370_ecpsv:

; 1885 :     }
; 1886 :     /* Lock the page in Core Table */
; 1887 :     ecpsvm_lockpage1(regs,effective_addr1,raddr);

  00406	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0040a	4c 8b 44 24 58	 mov	 r8, QWORD PTR raddr$[rsp]
  0040f	8b d0		 mov	 edx, eax
  00411	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00416	e8 00 00 00 00	 call	 ecpsvm_lockpage1

; 1888 :     regs->psw.cc=0;

  0041b	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00420	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 1889 :     regs->GR_L(2)=raddr;

  00424	b8 08 00 00 00	 mov	 eax, 8
  00429	48 6b c0 02	 imul	 rax, rax, 2
  0042d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00432	8b 54 24 58	 mov	 edx, DWORD PTR raddr$[rsp]
  00436	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
$LN10@s370_ecpsv:

; 1890 :     SET_PSW_IA_AND_MAYBE_IP(regs, effective_addr2);

  0043d	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00441	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00446	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0044b	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00451	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00456	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  0045e	74 5c		 je	 SHORT $LN26@s370_ecpsv
  00460	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00465	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0046b	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00470	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00475	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  0047b	75 2f		 jne	 SHORT $LN27@s370_ecpsv
  0047d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00482	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00488	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0048d	8b c0		 mov	 eax, eax
  0048f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00494	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  0049b	48 0b c8	 or	 rcx, rax
  0049e	48 8b c1	 mov	 rax, rcx
  004a1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  004a6	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  004aa	eb 10		 jmp	 SHORT $LN28@s370_ecpsv
$LN27@s370_ecpsv:
  004ac	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  004b1	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN28@s370_ecpsv:
$LN26@s370_ecpsv:
  004bc	33 c0		 xor	 eax, eax
  004be	85 c0		 test	 eax, eax
  004c0	0f 85 77 ff ff
	ff		 jne	 $LN10@s370_ecpsv

; 1891 :     CPASSIST_HIT(TRLOK);

  004c6	48 8b 05 f0 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+496
  004cd	48 ff c0	 inc	 rax
  004d0	48 89 05 f0 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+496, rax
$LN1@s370_ecpsv:
$LN29@s370_ecpsv:

; 1892 :     return;
; 1893 : }

  004d7	48 83 c4 68	 add	 rsp, 104		; 00000068H
  004db	c3		 ret	 0
s370_ecpsvm_tpage_lock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
effective_addr1$ = 64
effective_addr2$ = 68
temp$1 = 72
b1$ = 76
b2$ = 80
rc$ = 84
raddr$ = 88
inst$ = 112
regs$ = 120
s370_ecpsvm_tpage PROC

; 1848 : {

$LN30:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1849 :     int rc;
; 1850 :     RADR raddr;
; 1851 :     ECPSVM_PROLOG(TRBRG);

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR inst$[rsp]
  00013	48 83 c0 02	 add	 rax, 2
  00017	48 8b c8	 mov	 rcx, rax
  0001a	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001f	8b c8		 mov	 ecx, eax
  00021	e8 00 00 00 00	 call	 _byteswap_ulong
  00026	89 44 24 48	 mov	 DWORD PTR temp$1[rsp], eax
  0002a	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0002e	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00033	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00037	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0003b	c1 e8 0c	 shr	 eax, 12
  0003e	83 e0 0f	 and	 eax, 15
  00041	89 44 24 50	 mov	 DWORD PTR b2$[rsp], eax
  00045	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00049	c1 e8 10	 shr	 eax, 16
  0004c	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00051	89 44 24 40	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00055	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00059	c1 e8 1c	 shr	 eax, 28
  0005c	83 e0 0f	 and	 eax, 15
  0005f	89 44 24 4c	 mov	 DWORD PTR b1$[rsp], eax
  00063	83 7c 24 4c 00	 cmp	 DWORD PTR b1$[rsp], 0
  00068	74 2a		 je	 SHORT $LN11@s370_ecpsv
  0006a	48 63 44 24 4c	 movsxd	 rax, DWORD PTR b1$[rsp]
  0006f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00074	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007b	8b 4c 24 40	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0007f	03 c8		 add	 ecx, eax
  00081	8b c1		 mov	 eax, ecx
  00083	89 44 24 40	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00087	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0008b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00090	89 44 24 40	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN11@s370_ecpsv:
  00094	83 7c 24 50 00	 cmp	 DWORD PTR b2$[rsp], 0
  00099	74 2a		 je	 SHORT $LN12@s370_ecpsv
  0009b	48 63 44 24 50	 movsxd	 rax, DWORD PTR b2$[rsp]
  000a0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a5	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000ac	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000b0	03 c8		 add	 ecx, eax
  000b2	8b c1		 mov	 eax, ecx
  000b4	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000b8	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000bc	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000c1	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN12@s370_ecpsv:
$LN4@s370_ecpsv:
  000c5	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000ca	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ce	48 83 c0 06	 add	 rax, 6
  000d2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000d7	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000db	33 c0		 xor	 eax, eax
  000dd	83 f8 06	 cmp	 eax, 6
  000e0	74 0c		 je	 SHORT $LN13@s370_ecpsv
  000e2	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000e7	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN13@s370_ecpsv:
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	75 d1		 jne	 SHORT $LN4@s370_ecpsv
  000f4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000f9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  000fd	83 e0 01	 and	 eax, 1
  00100	85 c0		 test	 eax, eax
  00102	74 15		 je	 SHORT $LN14@s370_ecpsv
  00104	ba 02 00 00 00	 mov	 edx, 2
  00109	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0010e	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00113	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN14@s370_ecpsv:
$LN7@s370_ecpsv:
  00119	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0011e	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00124	d1 e8		 shr	 eax, 1
  00126	83 e0 01	 and	 eax, 1
  00129	85 c0		 test	 eax, eax
  0012b	74 18		 je	 SHORT $LN15@s370_ecpsv
  0012d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00132	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00138	ba fc ff ff ff	 mov	 edx, -4
  0013d	48 8b c8	 mov	 rcx, rax
  00140	e8 00 00 00 00	 call	 longjmp
$LN15@s370_ecpsv:
  00145	33 c0		 xor	 eax, eax
  00147	85 c0		 test	 eax, eax
  00149	75 ce		 jne	 SHORT $LN7@s370_ecpsv
  0014b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00152	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00158	c1 e8 11	 shr	 eax, 17
  0015b	83 e0 01	 and	 eax, 1
  0015e	85 c0		 test	 eax, eax
  00160	75 72		 jne	 SHORT $LN16@s370_ecpsv
  00162	8b 05 d8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+472
  00168	c1 e8 02	 shr	 eax, 2
  0016b	83 e0 01	 and	 eax, 1
  0016e	85 c0		 test	 eax, eax
  00170	74 53		 je	 SHORT $LN17@s370_ecpsv
  00172	b9 01 00 00 00	 mov	 ecx, 1
  00177	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171360
  00184	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171361
  00190	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171362
  0019c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001a1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a6	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171363
  001b3	ba 3b 07 00 00	 mov	 edx, 1851		; 0000073bH
  001b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171364
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@s370_ecpsv:
  001c5	ba 01 00 00 00	 mov	 edx, 1
  001ca	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001cf	e8 00 00 00 00	 call	 s370_program_interrupt
$LN16@s370_ecpsv:
  001d4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001d9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  001dd	83 e0 01	 and	 eax, 1
  001e0	85 c0		 test	 eax, eax
  001e2	74 15		 je	 SHORT $LN18@s370_ecpsv
  001e4	ba 02 00 00 00	 mov	 edx, 2
  001e9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001ee	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001f3	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN18@s370_ecpsv:
  001f9	8b 05 d8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+472
  001ff	d1 e8		 shr	 eax, 1
  00201	83 e0 01	 and	 eax, 1
  00204	85 c0		 test	 eax, eax
  00206	75 68		 jne	 SHORT $LN19@s370_ecpsv
  00208	8b 05 d8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+472
  0020e	c1 e8 02	 shr	 eax, 2
  00211	83 e0 01	 and	 eax, 1
  00214	85 c0		 test	 eax, eax
  00216	74 53		 je	 SHORT $LN20@s370_ecpsv
  00218	b9 01 00 00 00	 mov	 ecx, 1
  0021d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00223	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171368
  0022a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171369
  00236	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171370
  00242	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00247	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00252	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171371
  00259	ba 3b 07 00 00	 mov	 edx, 1851		; 0000073bH
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171372
  00265	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN20@s370_ecpsv:
  0026b	e9 52 02 00 00	 jmp	 $LN1@s370_ecpsv
$LN19@s370_ecpsv:
  00270	b8 08 00 00 00	 mov	 eax, 8
  00275	48 6b c0 07	 imul	 rax, rax, 7
  00279	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0027e	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00285	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0028a	85 c0		 test	 eax, eax
  0028c	75 05		 jne	 SHORT $LN21@s370_ecpsv
  0028e	e9 2f 02 00 00	 jmp	 $LN1@s370_ecpsv
$LN21@s370_ecpsv:
  00293	48 8b 05 c8 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+456
  0029a	48 ff c0	 inc	 rax
  0029d	48 89 05 c8 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+456, rax
  002a4	8b 05 d8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+472
  002aa	c1 e8 02	 shr	 eax, 2
  002ad	83 e0 01	 and	 eax, 1
  002b0	85 c0		 test	 eax, eax
  002b2	74 53		 je	 SHORT $LN22@s370_ecpsv
  002b4	b9 01 00 00 00	 mov	 ecx, 1
  002b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171375
  002c6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171376
  002d2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171377
  002de	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e8	41 b9 03 00 00
	00		 mov	 r9d, 3
  002ee	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171378
  002f5	ba 3b 07 00 00	 mov	 edx, 1851		; 0000073bH
  002fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171379
  00301	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN22@s370_ecpsv:

; 1852 :     DEBUG_CPASSISTX(TRBRG,WRMSG(HHC90000, "D", "TRANBRNG"));

  00307	8b 05 d8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+472
  0030d	c1 e8 02	 shr	 eax, 2
  00310	83 e0 01	 and	 eax, 1
  00313	85 c0		 test	 eax, eax
  00315	74 53		 je	 SHORT $LN23@s370_ecpsv
  00317	b9 01 00 00 00	 mov	 ecx, 1
  0031c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00322	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171381
  00329	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0032e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171382
  00335	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0033a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171383
  00341	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00346	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0034b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00351	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171384
  00358	ba 3c 07 00 00	 mov	 edx, 1852		; 0000073cH
  0035d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171385
  00364	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN23@s370_ecpsv:

; 1853 :     rc=ecpsvm_tranbrng(regs,effective_addr1,regs->GR_L(1),&raddr);

  0036a	b8 08 00 00 00	 mov	 eax, 8
  0036f	48 6b c0 01	 imul	 rax, rax, 1
  00373	4c 8d 4c 24 58	 lea	 r9, QWORD PTR raddr$[rsp]
  00378	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0037d	44 8b 84 01 80
	02 00 00	 mov	 r8d, DWORD PTR [rcx+rax+640]
  00385	8b 54 24 40	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  00389	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0038e	e8 00 00 00 00	 call	 ecpsvm_tranbrng
  00393	89 44 24 54	 mov	 DWORD PTR rc$[rsp], eax

; 1854 :     if(rc)

  00397	83 7c 24 54 00	 cmp	 DWORD PTR rc$[rsp], 0
  0039c	74 68		 je	 SHORT $LN24@s370_ecpsv

; 1855 :     {
; 1856 :         DEBUG_CPASSISTX(TRBRG,WRMSG(HHC90000, "D", "TRANBRNG - Back to CP"));

  0039e	8b 05 d8 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+472
  003a4	c1 e8 02	 shr	 eax, 2
  003a7	83 e0 01	 and	 eax, 1
  003aa	85 c0		 test	 eax, eax
  003ac	74 53		 je	 SHORT $LN25@s370_ecpsv
  003ae	b9 01 00 00 00	 mov	 ecx, 1
  003b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171388
  003c0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171389
  003cc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171390
  003d8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003dd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003e2	41 b9 03 00 00
	00		 mov	 r9d, 3
  003e8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171391
  003ef	ba 40 07 00 00	 mov	 edx, 1856		; 00000740H
  003f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171392
  003fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN25@s370_ecpsv:

; 1857 :         return; /* Something not right : NO OP */

  00401	e9 bc 00 00 00	 jmp	 $LN1@s370_ecpsv
$LN24@s370_ecpsv:

; 1858 :     }
; 1859 :     regs->psw.cc=0;

  00406	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0040b	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0

; 1860 :     regs->GR_L(2)=raddr;

  0040f	b8 08 00 00 00	 mov	 eax, 8
  00414	48 6b c0 02	 imul	 rax, rax, 2
  00418	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0041d	8b 54 24 58	 mov	 edx, DWORD PTR raddr$[rsp]
  00421	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
$LN10@s370_ecpsv:

; 1861 :     SET_PSW_IA_AND_MAYBE_IP(regs, effective_addr2);

  00428	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  0042c	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00431	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00436	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  0043c	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00441	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00449	74 5c		 je	 SHORT $LN26@s370_ecpsv
  0044b	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00450	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00456	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  0045b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00460	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00466	75 2f		 jne	 SHORT $LN27@s370_ecpsv
  00468	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0046d	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00473	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00478	8b c0		 mov	 eax, eax
  0047a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0047f	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00486	48 0b c8	 or	 rcx, rax
  00489	48 8b c1	 mov	 rax, rcx
  0048c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00491	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00495	eb 10		 jmp	 SHORT $LN28@s370_ecpsv
$LN27@s370_ecpsv:
  00497	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0049c	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN28@s370_ecpsv:
$LN26@s370_ecpsv:
  004a7	33 c0		 xor	 eax, eax
  004a9	85 c0		 test	 eax, eax
  004ab	0f 85 77 ff ff
	ff		 jne	 $LN10@s370_ecpsv

; 1862 :     CPASSIST_HIT(TRBRG);

  004b1	48 8b 05 d0 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+464
  004b8	48 ff c0	 inc	 rax
  004bb	48 89 05 d0 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+464, rax
$LN1@s370_ecpsv:
$LN29@s370_ecpsv:

; 1863 :     return;
; 1864 : }

  004c2	48 83 c4 68	 add	 rsp, 104		; 00000068H
  004c6	c3		 ret	 0
s370_ecpsvm_tpage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
effective_addr2$ = 64
effective_addr1$ = 68
temp$1 = 72
tv211 = 76
tv217 = 80
b1$ = 84
b2$ = 88
inst$ = 112
regs$ = 120
s370_ecpsvm_disp1 PROC

; 1745 : {

$LN33:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1746 : 
; 1747 :     ECPSVM_PROLOG(DISP1);

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR inst$[rsp]
  00013	48 83 c0 02	 add	 rax, 2
  00017	48 8b c8	 mov	 rcx, rax
  0001a	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001f	8b c8		 mov	 ecx, eax
  00021	e8 00 00 00 00	 call	 _byteswap_ulong
  00026	89 44 24 48	 mov	 DWORD PTR temp$1[rsp], eax
  0002a	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0002e	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00033	89 44 24 40	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00037	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0003b	c1 e8 0c	 shr	 eax, 12
  0003e	83 e0 0f	 and	 eax, 15
  00041	89 44 24 58	 mov	 DWORD PTR b2$[rsp], eax
  00045	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00049	c1 e8 10	 shr	 eax, 16
  0004c	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00051	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00055	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00059	c1 e8 1c	 shr	 eax, 28
  0005c	83 e0 0f	 and	 eax, 15
  0005f	89 44 24 54	 mov	 DWORD PTR b1$[rsp], eax
  00063	83 7c 24 54 00	 cmp	 DWORD PTR b1$[rsp], 0
  00068	74 2a		 je	 SHORT $LN12@s370_ecpsv
  0006a	48 63 44 24 54	 movsxd	 rax, DWORD PTR b1$[rsp]
  0006f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00074	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007b	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0007f	03 c8		 add	 ecx, eax
  00081	8b c1		 mov	 eax, ecx
  00083	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00087	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0008b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00090	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN12@s370_ecpsv:
  00094	83 7c 24 58 00	 cmp	 DWORD PTR b2$[rsp], 0
  00099	74 2a		 je	 SHORT $LN13@s370_ecpsv
  0009b	48 63 44 24 58	 movsxd	 rax, DWORD PTR b2$[rsp]
  000a0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a5	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000ac	8b 4c 24 40	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000b0	03 c8		 add	 ecx, eax
  000b2	8b c1		 mov	 eax, ecx
  000b4	89 44 24 40	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000b8	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000bc	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000c1	89 44 24 40	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN13@s370_ecpsv:
$LN4@s370_ecpsv:
  000c5	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000ca	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ce	48 83 c0 06	 add	 rax, 6
  000d2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000d7	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000db	33 c0		 xor	 eax, eax
  000dd	83 f8 06	 cmp	 eax, 6
  000e0	74 0c		 je	 SHORT $LN14@s370_ecpsv
  000e2	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000e7	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN14@s370_ecpsv:
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	75 d1		 jne	 SHORT $LN4@s370_ecpsv
  000f4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000f9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  000fd	83 e0 01	 and	 eax, 1
  00100	85 c0		 test	 eax, eax
  00102	74 15		 je	 SHORT $LN15@s370_ecpsv
  00104	ba 02 00 00 00	 mov	 edx, 2
  00109	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0010e	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00113	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN15@s370_ecpsv:
$LN7@s370_ecpsv:
  00119	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0011e	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00124	d1 e8		 shr	 eax, 1
  00126	83 e0 01	 and	 eax, 1
  00129	85 c0		 test	 eax, eax
  0012b	74 18		 je	 SHORT $LN16@s370_ecpsv
  0012d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00132	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00138	ba fc ff ff ff	 mov	 edx, -4
  0013d	48 8b c8	 mov	 rcx, rax
  00140	e8 00 00 00 00	 call	 longjmp
$LN16@s370_ecpsv:
  00145	33 c0		 xor	 eax, eax
  00147	85 c0		 test	 eax, eax
  00149	75 ce		 jne	 SHORT $LN7@s370_ecpsv
  0014b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00152	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00158	c1 e8 11	 shr	 eax, 17
  0015b	83 e0 01	 and	 eax, 1
  0015e	85 c0		 test	 eax, eax
  00160	75 72		 jne	 SHORT $LN17@s370_ecpsv
  00162	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+248
  00168	c1 e8 02	 shr	 eax, 2
  0016b	83 e0 01	 and	 eax, 1
  0016e	85 c0		 test	 eax, eax
  00170	74 53		 je	 SHORT $LN18@s370_ecpsv
  00172	b9 01 00 00 00	 mov	 ecx, 1
  00177	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171237
  00184	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171238
  00190	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171239
  0019c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001a1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a6	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171240
  001b3	ba d3 06 00 00	 mov	 edx, 1747		; 000006d3H
  001b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171241
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN18@s370_ecpsv:
  001c5	ba 01 00 00 00	 mov	 edx, 1
  001ca	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001cf	e8 00 00 00 00	 call	 s370_program_interrupt
$LN17@s370_ecpsv:
  001d4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001d9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  001dd	83 e0 01	 and	 eax, 1
  001e0	85 c0		 test	 eax, eax
  001e2	74 15		 je	 SHORT $LN19@s370_ecpsv
  001e4	ba 02 00 00 00	 mov	 edx, 2
  001e9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001ee	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001f3	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN19@s370_ecpsv:
  001f9	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+248
  001ff	d1 e8		 shr	 eax, 1
  00201	83 e0 01	 and	 eax, 1
  00204	85 c0		 test	 eax, eax
  00206	75 68		 jne	 SHORT $LN20@s370_ecpsv
  00208	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+248
  0020e	c1 e8 02	 shr	 eax, 2
  00211	83 e0 01	 and	 eax, 1
  00214	85 c0		 test	 eax, eax
  00216	74 53		 je	 SHORT $LN21@s370_ecpsv
  00218	b9 01 00 00 00	 mov	 ecx, 1
  0021d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00223	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171245
  0022a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171246
  00236	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171247
  00242	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00247	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00252	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171248
  00259	ba d3 06 00 00	 mov	 edx, 1747		; 000006d3H
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171249
  00265	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN21@s370_ecpsv:
  0026b	e9 49 01 00 00	 jmp	 $LN1@s370_ecpsv
$LN20@s370_ecpsv:
  00270	b8 08 00 00 00	 mov	 eax, 8
  00275	48 6b c0 07	 imul	 rax, rax, 7
  00279	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0027e	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00285	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0028a	85 c0		 test	 eax, eax
  0028c	75 05		 jne	 SHORT $LN22@s370_ecpsv
  0028e	e9 26 01 00 00	 jmp	 $LN1@s370_ecpsv
$LN22@s370_ecpsv:
  00293	48 8b 05 e8 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+232
  0029a	48 ff c0	 inc	 rax
  0029d	48 89 05 e8 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+232, rax
  002a4	8b 05 f8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+248
  002aa	c1 e8 02	 shr	 eax, 2
  002ad	83 e0 01	 and	 eax, 1
  002b0	85 c0		 test	 eax, eax
  002b2	74 53		 je	 SHORT $LN23@s370_ecpsv
  002b4	b9 01 00 00 00	 mov	 ecx, 1
  002b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171252
  002c6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171253
  002d2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171254
  002de	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e8	41 b9 03 00 00
	00		 mov	 r9d, 3
  002ee	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG171255
  002f5	ba d3 06 00 00	 mov	 edx, 1747		; 000006d3H
  002fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG171256
  00301	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN23@s370_ecpsv:

; 1748 :     switch(ecpsvm_do_disp1(regs,effective_addr1,effective_addr2))

  00307	44 8b 44 24 40	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  0030c	8b 54 24 44	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  00310	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00315	e8 00 00 00 00	 call	 ecpsvm_do_disp1
  0031a	89 44 24 4c	 mov	 DWORD PTR tv211[rsp], eax
  0031e	83 7c 24 4c 00	 cmp	 DWORD PTR tv211[rsp], 0
  00323	74 13		 je	 SHORT $LN24@s370_ecpsv
  00325	83 7c 24 4c 01	 cmp	 DWORD PTR tv211[rsp], 1
  0032a	74 1f		 je	 SHORT $LN25@s370_ecpsv
  0032c	83 7c 24 4c 02	 cmp	 DWORD PTR tv211[rsp], 2
  00331	74 1a		 je	 SHORT $LN26@s370_ecpsv
  00333	e9 81 00 00 00	 jmp	 $LN31@s370_ecpsv
$LN24@s370_ecpsv:

; 1749 :     {
; 1750 :         case 0: /* Done */
; 1751 :             CPASSIST_HIT(DISP1);

  00338	48 8b 05 f0 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+240
  0033f	48 ff c0	 inc	 rax
  00342	48 89 05 f0 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+240, rax

; 1752 :             return;

  00349	eb 6e		 jmp	 SHORT $LN1@s370_ecpsv
$LN25@s370_ecpsv:

; 1753 :         case 1: /* No-op */
; 1754 :             break;

  0034b	eb 6c		 jmp	 SHORT $LN8@s370_ecpsv
$LN26@s370_ecpsv:

; 1755 :         case 2: /* Call DISP2 - INTCHECK NOT needed */
; 1756 :             switch(ecpsvm_do_disp2(regs,effective_addr1,effective_addr2))

  0034d	44 8b 44 24 40	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  00352	8b 54 24 44	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  00356	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0035b	e8 00 00 00 00	 call	 ecpsvm_do_disp2
  00360	89 44 24 50	 mov	 DWORD PTR tv217[rsp], eax
  00364	83 7c 24 50 00	 cmp	 DWORD PTR tv217[rsp], 0
  00369	74 10		 je	 SHORT $LN27@s370_ecpsv
  0036b	83 7c 24 50 01	 cmp	 DWORD PTR tv217[rsp], 1
  00370	74 1c		 je	 SHORT $LN28@s370_ecpsv
  00372	83 7c 24 50 02	 cmp	 DWORD PTR tv217[rsp], 2
  00377	74 17		 je	 SHORT $LN29@s370_ecpsv
  00379	eb 3e		 jmp	 SHORT $LN30@s370_ecpsv
$LN27@s370_ecpsv:

; 1757 :             {
; 1758 :                 case 0:
; 1759 :                     CPASSIST_HIT(DISP1);

  0037b	48 8b 05 f0 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+240
  00382	48 ff c0	 inc	 rax
  00385	48 89 05 f0 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+240, rax

; 1760 :                     return;

  0038c	eb 2b		 jmp	 SHORT $LN1@s370_ecpsv
$LN28@s370_ecpsv:

; 1761 :                 case 1:
; 1762 :                     return;

  0038e	eb 29		 jmp	 SHORT $LN1@s370_ecpsv
$LN29@s370_ecpsv:

; 1763 :                 case 2:
; 1764 :                     CPASSIST_HIT(DISP1);

  00390	48 8b 05 f0 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+240
  00397	48 ff c0	 inc	 rax
  0039a	48 89 05 f0 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+240, rax

; 1765 :                     RETURN_INTCHECK(regs);

  003a1	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  003a6	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  003ac	ba ff ff ff ff	 mov	 edx, -1
  003b1	48 8b c8	 mov	 rcx, rax
  003b4	e8 00 00 00 00	 call	 longjmp
$LN30@s370_ecpsv:
$LN31@s370_ecpsv:
$LN8@s370_ecpsv:
$LN1@s370_ecpsv:
$LN32@s370_ecpsv:

; 1766 :                 default:
; 1767 :                     break;
; 1768 :             }
; 1769 :             return;
; 1770 :         default:
; 1771 :             return;
; 1772 :     }
; 1773 : }

  003b9	48 83 c4 68	 add	 rsp, 104		; 00000068H
  003bd	c3		 ret	 0
s370_ecpsvm_disp1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
effective_addr2$ = 64
effective_addr1$ = 68
temp$1 = 72
b1$ = 76
b2$ = 80
inst$ = 112
regs$ = 120
s370_ecpsvm_locate_vblock PROC

; 1129 : {

$LN28:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1130 : 
; 1131 :     ECPSVM_PROLOG(SCNVU);

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR inst$[rsp]
  00013	48 83 c0 02	 add	 rax, 2
  00017	48 8b c8	 mov	 rcx, rax
  0001a	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001f	8b c8		 mov	 ecx, eax
  00021	e8 00 00 00 00	 call	 _byteswap_ulong
  00026	89 44 24 48	 mov	 DWORD PTR temp$1[rsp], eax
  0002a	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0002e	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00033	89 44 24 40	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00037	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0003b	c1 e8 0c	 shr	 eax, 12
  0003e	83 e0 0f	 and	 eax, 15
  00041	89 44 24 50	 mov	 DWORD PTR b2$[rsp], eax
  00045	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00049	c1 e8 10	 shr	 eax, 16
  0004c	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00051	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00055	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00059	c1 e8 1c	 shr	 eax, 28
  0005c	83 e0 0f	 and	 eax, 15
  0005f	89 44 24 4c	 mov	 DWORD PTR b1$[rsp], eax
  00063	83 7c 24 4c 00	 cmp	 DWORD PTR b1$[rsp], 0
  00068	74 2a		 je	 SHORT $LN11@s370_ecpsv
  0006a	48 63 44 24 4c	 movsxd	 rax, DWORD PTR b1$[rsp]
  0006f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00074	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007b	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0007f	03 c8		 add	 ecx, eax
  00081	8b c1		 mov	 eax, ecx
  00083	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00087	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0008b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00090	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN11@s370_ecpsv:
  00094	83 7c 24 50 00	 cmp	 DWORD PTR b2$[rsp], 0
  00099	74 2a		 je	 SHORT $LN12@s370_ecpsv
  0009b	48 63 44 24 50	 movsxd	 rax, DWORD PTR b2$[rsp]
  000a0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a5	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000ac	8b 4c 24 40	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000b0	03 c8		 add	 ecx, eax
  000b2	8b c1		 mov	 eax, ecx
  000b4	89 44 24 40	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000b8	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000bc	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000c1	89 44 24 40	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN12@s370_ecpsv:
$LN4@s370_ecpsv:
  000c5	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000ca	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ce	48 83 c0 06	 add	 rax, 6
  000d2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000d7	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000db	33 c0		 xor	 eax, eax
  000dd	83 f8 06	 cmp	 eax, 6
  000e0	74 0c		 je	 SHORT $LN13@s370_ecpsv
  000e2	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000e7	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN13@s370_ecpsv:
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	75 d1		 jne	 SHORT $LN4@s370_ecpsv
  000f4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000f9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  000fd	83 e0 01	 and	 eax, 1
  00100	85 c0		 test	 eax, eax
  00102	74 15		 je	 SHORT $LN14@s370_ecpsv
  00104	ba 02 00 00 00	 mov	 edx, 2
  00109	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0010e	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00113	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN14@s370_ecpsv:
$LN7@s370_ecpsv:
  00119	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0011e	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00124	d1 e8		 shr	 eax, 1
  00126	83 e0 01	 and	 eax, 1
  00129	85 c0		 test	 eax, eax
  0012b	74 18		 je	 SHORT $LN15@s370_ecpsv
  0012d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00132	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00138	ba fc ff ff ff	 mov	 edx, -4
  0013d	48 8b c8	 mov	 rcx, rax
  00140	e8 00 00 00 00	 call	 longjmp
$LN15@s370_ecpsv:
  00145	33 c0		 xor	 eax, eax
  00147	85 c0		 test	 eax, eax
  00149	75 ce		 jne	 SHORT $LN7@s370_ecpsv
  0014b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00152	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00158	c1 e8 11	 shr	 eax, 17
  0015b	83 e0 01	 and	 eax, 1
  0015e	85 c0		 test	 eax, eax
  00160	75 72		 jne	 SHORT $LN16@s370_ecpsv
  00162	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+184
  00168	c1 e8 02	 shr	 eax, 2
  0016b	83 e0 01	 and	 eax, 1
  0016e	85 c0		 test	 eax, eax
  00170	74 53		 je	 SHORT $LN17@s370_ecpsv
  00172	b9 01 00 00 00	 mov	 ecx, 1
  00177	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170418
  00184	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170419
  00190	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170420
  0019c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001a1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a6	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170421
  001b3	ba 6b 04 00 00	 mov	 edx, 1131		; 0000046bH
  001b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170422
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@s370_ecpsv:
  001c5	ba 01 00 00 00	 mov	 edx, 1
  001ca	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001cf	e8 00 00 00 00	 call	 s370_program_interrupt
$LN16@s370_ecpsv:
  001d4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001d9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  001dd	83 e0 01	 and	 eax, 1
  001e0	85 c0		 test	 eax, eax
  001e2	74 15		 je	 SHORT $LN18@s370_ecpsv
  001e4	ba 02 00 00 00	 mov	 edx, 2
  001e9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001ee	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001f3	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN18@s370_ecpsv:
  001f9	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+184
  001ff	d1 e8		 shr	 eax, 1
  00201	83 e0 01	 and	 eax, 1
  00204	85 c0		 test	 eax, eax
  00206	75 68		 jne	 SHORT $LN19@s370_ecpsv
  00208	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+184
  0020e	c1 e8 02	 shr	 eax, 2
  00211	83 e0 01	 and	 eax, 1
  00214	85 c0		 test	 eax, eax
  00216	74 53		 je	 SHORT $LN20@s370_ecpsv
  00218	b9 01 00 00 00	 mov	 ecx, 1
  0021d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00223	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170426
  0022a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170427
  00236	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170428
  00242	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00247	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00252	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170429
  00259	ba 6b 04 00 00	 mov	 edx, 1131		; 0000046bH
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170430
  00265	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN20@s370_ecpsv:
  0026b	e9 74 01 00 00	 jmp	 $LN1@s370_ecpsv
$LN19@s370_ecpsv:
  00270	b8 08 00 00 00	 mov	 eax, 8
  00275	48 6b c0 07	 imul	 rax, rax, 7
  00279	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0027e	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00285	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0028a	85 c0		 test	 eax, eax
  0028c	75 05		 jne	 SHORT $LN21@s370_ecpsv
  0028e	e9 51 01 00 00	 jmp	 $LN1@s370_ecpsv
$LN21@s370_ecpsv:
  00293	48 8b 05 a8 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+168
  0029a	48 ff c0	 inc	 rax
  0029d	48 89 05 a8 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+168, rax
  002a4	8b 05 b8 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+184
  002aa	c1 e8 02	 shr	 eax, 2
  002ad	83 e0 01	 and	 eax, 1
  002b0	85 c0		 test	 eax, eax
  002b2	74 53		 je	 SHORT $LN22@s370_ecpsv
  002b4	b9 01 00 00 00	 mov	 ecx, 1
  002b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170433
  002c6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170434
  002d2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170435
  002de	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e8	41 b9 03 00 00
	00		 mov	 r9d, 3
  002ee	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170436
  002f5	ba 6b 04 00 00	 mov	 edx, 1131		; 0000046bH
  002fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170437
  00301	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN22@s370_ecpsv:

; 1132 :     if(ecpsvm_do_scnvu(regs,effective_addr1,effective_addr2,regs->GR_L(1))!=0)

  00307	b8 08 00 00 00	 mov	 eax, 8
  0030c	48 6b c0 01	 imul	 rax, rax, 1
  00310	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00315	44 8b 8c 01 80
	02 00 00	 mov	 r9d, DWORD PTR [rcx+rax+640]
  0031d	44 8b 44 24 40	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  00322	8b 54 24 44	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  00326	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0032b	e8 00 00 00 00	 call	 ecpsvm_do_scnvu
  00330	85 c0		 test	 eax, eax
  00332	74 05		 je	 SHORT $LN23@s370_ecpsv

; 1133 :     {
; 1134 :         return;             /* something wrong, let CP do it */

  00334	e9 ab 00 00 00	 jmp	 $LN1@s370_ecpsv
$LN23@s370_ecpsv:

; 1135 :     }
; 1136 : 
; 1137 :     CPASSIST_HIT(SCNVU);

  00339	48 8b 05 b0 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+176
  00340	48 ff c0	 inc	 rax
  00343	48 89 05 b0 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+176, rax
$LN10@s370_ecpsv:

; 1138 :     BR14;

  0034a	b8 08 00 00 00	 mov	 eax, 8
  0034f	48 6b c0 0e	 imul	 rax, rax, 14
  00353	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00358	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0035f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00364	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00369	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  0036f	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00374	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  0037c	74 5c		 je	 SHORT $LN24@s370_ecpsv
  0037e	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00383	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00389	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  0038e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00393	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00399	75 2f		 jne	 SHORT $LN25@s370_ecpsv
  0039b	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  003a0	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  003a6	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  003ab	8b c0		 mov	 eax, eax
  003ad	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  003b2	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  003b9	48 0b c8	 or	 rcx, rax
  003bc	48 8b c1	 mov	 rax, rcx
  003bf	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  003c4	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  003c8	eb 10		 jmp	 SHORT $LN26@s370_ecpsv
$LN25@s370_ecpsv:
  003ca	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  003cf	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN26@s370_ecpsv:
$LN24@s370_ecpsv:
  003da	33 c0		 xor	 eax, eax
  003dc	85 c0		 test	 eax, eax
  003de	0f 85 66 ff ff
	ff		 jne	 $LN10@s370_ecpsv
$LN1@s370_ecpsv:
$LN27@s370_ecpsv:

; 1139 :     return;
; 1140 : }

  003e4	48 83 c4 68	 add	 rsp, 104		; 00000068H
  003e8	c3		 ret	 0
s370_ecpsvm_locate_vblock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
B_RCWCTL$ = 64
B_IOBSPEC2$ = 65
rcw$ = 68
el$ = 72
effective_addr1$ = 76
effective_addr2$ = 80
i$ = 84
temp$1 = 88
ptr_pl$ = 92
dl$ = 96
b1$ = 100
b2$ = 104
corsz$ = 108
tv681 = 112
inst$ = 144
regs$ = 152
s370_ecpsvm_free_ccwstor PROC

; 920  : {

$LN95:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 921  : VADR dl;
; 922  : VADR el;
; 923  : VADR ptr_pl;
; 924  : VADR rcw;
; 925  : VADR corsz;
; 926  : U32  i;
; 927  : BYTE B_RCWCTL;
; 928  : BYTE B_IOBSPEC2;
; 929  : 
; 930  :     ECPSVM_PROLOG(FCCWS);

  00011	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  00019	48 83 c0 02	 add	 rax, 2
  0001d	48 8b c8	 mov	 rcx, rax
  00020	e8 00 00 00 00	 call	 fetch_fw_noswap
  00025	8b c8		 mov	 ecx, eax
  00027	e8 00 00 00 00	 call	 _byteswap_ulong
  0002c	89 44 24 58	 mov	 DWORD PTR temp$1[rsp], eax
  00030	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00034	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00039	89 44 24 50	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0003d	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  00041	c1 e8 0c	 shr	 eax, 12
  00044	83 e0 0f	 and	 eax, 15
  00047	89 44 24 68	 mov	 DWORD PTR b2$[rsp], eax
  0004b	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  0004f	c1 e8 10	 shr	 eax, 16
  00052	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00057	89 44 24 4c	 mov	 DWORD PTR effective_addr1$[rsp], eax
  0005b	8b 44 24 58	 mov	 eax, DWORD PTR temp$1[rsp]
  0005f	c1 e8 1c	 shr	 eax, 28
  00062	83 e0 0f	 and	 eax, 15
  00065	89 44 24 64	 mov	 DWORD PTR b1$[rsp], eax
  00069	83 7c 24 64 00	 cmp	 DWORD PTR b1$[rsp], 0
  0006e	74 2d		 je	 SHORT $LN41@s370_ecpsv
  00070	48 63 44 24 64	 movsxd	 rax, DWORD PTR b1$[rsp]
  00075	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0007d	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00084	8b 4c 24 4c	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00088	03 c8		 add	 ecx, eax
  0008a	8b c1		 mov	 eax, ecx
  0008c	89 44 24 4c	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00090	8b 44 24 4c	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00094	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00099	89 44 24 4c	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN41@s370_ecpsv:
  0009d	83 7c 24 68 00	 cmp	 DWORD PTR b2$[rsp], 0
  000a2	74 2d		 je	 SHORT $LN42@s370_ecpsv
  000a4	48 63 44 24 68	 movsxd	 rax, DWORD PTR b2$[rsp]
  000a9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000b1	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000b8	8b 4c 24 50	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000bc	03 c8		 add	 ecx, eax
  000be	8b c1		 mov	 eax, ecx
  000c0	89 44 24 50	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000c4	8b 44 24 50	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000c8	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000cd	89 44 24 50	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN42@s370_ecpsv:
$LN4@s370_ecpsv:
  000d1	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000d9	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000dd	48 83 c0 06	 add	 rax, 6
  000e1	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000e9	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000ed	33 c0		 xor	 eax, eax
  000ef	83 f8 06	 cmp	 eax, 6
  000f2	74 0f		 je	 SHORT $LN43@s370_ecpsv
  000f4	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000fc	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN43@s370_ecpsv:
  00103	33 c0		 xor	 eax, eax
  00105	85 c0		 test	 eax, eax
  00107	75 c8		 jne	 SHORT $LN4@s370_ecpsv
  00109	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00111	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00115	83 e0 01	 and	 eax, 1
  00118	85 c0		 test	 eax, eax
  0011a	74 1b		 je	 SHORT $LN44@s370_ecpsv
  0011c	ba 02 00 00 00	 mov	 edx, 2
  00121	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00129	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00131	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN44@s370_ecpsv:
$LN7@s370_ecpsv:
  00137	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0013f	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00145	d1 e8		 shr	 eax, 1
  00147	83 e0 01	 and	 eax, 1
  0014a	85 c0		 test	 eax, eax
  0014c	74 1b		 je	 SHORT $LN45@s370_ecpsv
  0014e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00156	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  0015c	ba fc ff ff ff	 mov	 edx, -4
  00161	48 8b c8	 mov	 rcx, rax
  00164	e8 00 00 00 00	 call	 longjmp
$LN45@s370_ecpsv:
  00169	33 c0		 xor	 eax, eax
  0016b	85 c0		 test	 eax, eax
  0016d	75 c8		 jne	 SHORT $LN7@s370_ecpsv
  0016f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00176	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  0017c	c1 e8 11	 shr	 eax, 17
  0017f	83 e0 01	 and	 eax, 1
  00182	85 c0		 test	 eax, eax
  00184	75 75		 jne	 SHORT $LN46@s370_ecpsv
  00186	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+376
  0018c	c1 e8 02	 shr	 eax, 2
  0018f	83 e0 01	 and	 eax, 1
  00192	85 c0		 test	 eax, eax
  00194	74 53		 je	 SHORT $LN47@s370_ecpsv
  00196	b9 01 00 00 00	 mov	 ecx, 1
  0019b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170275
  001a8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170276
  001b4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170277
  001c0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001c5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ca	41 b9 03 00 00
	00		 mov	 r9d, 3
  001d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170278
  001d7	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170279
  001e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN47@s370_ecpsv:
  001e9	ba 01 00 00 00	 mov	 edx, 1
  001ee	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001f6	e8 00 00 00 00	 call	 s370_program_interrupt
$LN46@s370_ecpsv:
  001fb	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00203	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00207	83 e0 01	 and	 eax, 1
  0020a	85 c0		 test	 eax, eax
  0020c	74 1b		 je	 SHORT $LN48@s370_ecpsv
  0020e	ba 02 00 00 00	 mov	 edx, 2
  00213	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0021b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00223	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN48@s370_ecpsv:
  00229	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+376
  0022f	d1 e8		 shr	 eax, 1
  00231	83 e0 01	 and	 eax, 1
  00234	85 c0		 test	 eax, eax
  00236	75 68		 jne	 SHORT $LN49@s370_ecpsv
  00238	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+376
  0023e	c1 e8 02	 shr	 eax, 2
  00241	83 e0 01	 and	 eax, 1
  00244	85 c0		 test	 eax, eax
  00246	74 53		 je	 SHORT $LN50@s370_ecpsv
  00248	b9 01 00 00 00	 mov	 ecx, 1
  0024d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00253	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170283
  0025a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0025f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170284
  00266	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0026b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170285
  00272	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00277	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0027c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00282	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170286
  00289	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  0028e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170287
  00295	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN50@s370_ecpsv:
  0029b	e9 ed 0f 00 00	 jmp	 $LN1@s370_ecpsv
$LN49@s370_ecpsv:
  002a0	b8 08 00 00 00	 mov	 eax, 8
  002a5	48 6b c0 07	 imul	 rax, rax, 7
  002a9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002b1	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  002b8	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  002bd	85 c0		 test	 eax, eax
  002bf	75 05		 jne	 SHORT $LN51@s370_ecpsv
  002c1	e9 c7 0f 00 00	 jmp	 $LN1@s370_ecpsv
$LN51@s370_ecpsv:
  002c6	48 8b 05 68 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+360
  002cd	48 ff c0	 inc	 rax
  002d0	48 89 05 68 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+360, rax
  002d7	8b 05 78 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+376
  002dd	c1 e8 02	 shr	 eax, 2
  002e0	83 e0 01	 and	 eax, 1
  002e3	85 c0		 test	 eax, eax
  002e5	74 53		 je	 SHORT $LN52@s370_ecpsv
  002e7	b9 01 00 00 00	 mov	 ecx, 1
  002ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170290
  002f9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170291
  00305	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0030a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170292
  00311	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00316	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0031b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00321	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170293
  00328	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  0032d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170294
  00334	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN52@s370_ecpsv:

; 931  :     dl=effective_addr1;

  0033a	8b 44 24 4c	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0033e	89 44 24 60	 mov	 DWORD PTR dl$[rsp], eax

; 932  :     el=effective_addr2;

  00342	8b 44 24 50	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00346	89 44 24 48	 mov	 DWORD PTR el$[rsp], eax

; 933  :     ptr_pl=EVM_L(dl);               /* -> DMKPTRPL */

  0034a	8b 44 24 60	 mov	 eax, DWORD PTR dl$[rsp]
  0034e	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00353	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0035b	ba fe ff ff ff	 mov	 edx, -2
  00360	8b c8		 mov	 ecx, eax
  00362	e8 00 00 00 00	 call	 s370_vfetch4
  00367	89 44 24 5c	 mov	 DWORD PTR ptr_pl$[rsp], eax

; 934  :     corsz=EVM_L(ptr_pl);            /* DMKSYSRM - real machine size */

  0036b	8b 44 24 5c	 mov	 eax, DWORD PTR ptr_pl$[rsp]
  0036f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00374	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0037c	ba fe ff ff ff	 mov	 edx, -2
  00381	8b c8		 mov	 ecx, eax
  00383	e8 00 00 00 00	 call	 s370_vfetch4
  00388	89 44 24 6c	 mov	 DWORD PTR corsz$[rsp], eax

; 935  : 
; 936  :     for(i=0;i<12;i++)

  0038c	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00394	eb 0a		 jmp	 SHORT $LN10@s370_ecpsv
$LN8@s370_ecpsv:
  00396	8b 44 24 54	 mov	 eax, DWORD PTR i$[rsp]
  0039a	ff c0		 inc	 eax
  0039c	89 44 24 54	 mov	 DWORD PTR i$[rsp], eax
$LN10@s370_ecpsv:
  003a0	83 7c 24 54 0c	 cmp	 DWORD PTR i$[rsp], 12
  003a5	73 4f		 jae	 SHORT $LN9@s370_ecpsv

; 937  :     {
; 938  :         EVM_ST(regs->GR_L(i),regs->GR_L(13)+SAVEREGS+i*4);

  003a7	b8 08 00 00 00	 mov	 eax, 8
  003ac	48 6b c0 0d	 imul	 rax, rax, 13
  003b0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003b8	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  003bf	8b 4c 24 54	 mov	 ecx, DWORD PTR i$[rsp]
  003c3	8d 44 88 10	 lea	 eax, DWORD PTR [rax+rcx*4+16]
  003c7	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  003cc	8b 4c 24 54	 mov	 ecx, DWORD PTR i$[rsp]
  003d0	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  003d8	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  003de	8b d0		 mov	 edx, eax
  003e0	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  003e8	8b 8c c8 80 02
	00 00		 mov	 ecx, DWORD PTR [rax+rcx*8+640]
  003ef	e8 00 00 00 00	 call	 s370_vstore4

; 939  :     }

  003f4	eb a0		 jmp	 SHORT $LN8@s370_ecpsv
$LN9@s370_ecpsv:

; 940  : 
; 941  :     regs->GR_L(9)=corsz;

  003f6	b8 08 00 00 00	 mov	 eax, 8
  003fb	48 6b c0 09	 imul	 rax, rax, 9
  003ff	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00407	8b 54 24 6c	 mov	 edx, DWORD PTR corsz$[rsp]
  0040b	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 942  :     rcw=(EVM_L(regs->GR_L(10)+IOBCAW) & 0x00FFFFFF) - 16;

  00412	b8 08 00 00 00	 mov	 eax, 8
  00417	48 6b c0 0a	 imul	 rax, rax, 10
  0041b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00423	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0042a	83 c0 20	 add	 eax, 32			; 00000020H
  0042d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00432	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0043a	ba fe ff ff ff	 mov	 edx, -2
  0043f	8b c8		 mov	 ecx, eax
  00441	e8 00 00 00 00	 call	 s370_vfetch4
  00446	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0044b	83 e8 10	 sub	 eax, 16
  0044e	89 44 24 44	 mov	 DWORD PTR rcw$[rsp], eax

; 943  :     regs->GR_L(4)=rcw;

  00452	b8 08 00 00 00	 mov	 eax, 8
  00457	48 6b c0 04	 imul	 rax, rax, 4
  0045b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00463	8b 54 24 44	 mov	 edx, DWORD PTR rcw$[rsp]
  00467	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx
$LN11@s370_ecpsv:

; 944  : 
; 945  :     while (rcw!=0)

  0046e	83 7c 24 44 00	 cmp	 DWORD PTR rcw$[rsp], 0
  00473	0f 84 f5 0b 00
	00		 je	 $LN12@s370_ecpsv

; 946  :     {
; 947  :         /* At NXTFRET */
; 948  :         regs->GR_L(7)=rcw+16;

  00479	8b 44 24 44	 mov	 eax, DWORD PTR rcw$[rsp]
  0047d	83 c0 10	 add	 eax, 16
  00480	b9 08 00 00 00	 mov	 ecx, 8
  00485	48 6b c9 07	 imul	 rcx, rcx, 7
  00489	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00491	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 949  :         regs->GR_L(6)=EVM_LH(rcw+RCWRCNT);

  00498	8b 44 24 44	 mov	 eax, DWORD PTR rcw$[rsp]
  0049c	83 c0 0a	 add	 eax, 10
  0049f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  004a4	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  004ac	ba fe ff ff ff	 mov	 edx, -2
  004b1	8b c8		 mov	 ecx, eax
  004b3	e8 00 00 00 00	 call	 s370_vfetch2
  004b8	b9 08 00 00 00	 mov	 ecx, 8
  004bd	48 6b c9 06	 imul	 rcx, rcx, 6
  004c1	0f b7 c0	 movzx	 eax, ax
  004c4	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  004cc	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax
$LN13@s370_ecpsv:

; 950  :         while (regs->GR_L(6) > 0)

  004d3	b8 08 00 00 00	 mov	 eax, 8
  004d8	48 6b c0 06	 imul	 rax, rax, 6
  004dc	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004e4	83 bc 01 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax+640], 0
  004ec	0f 86 8a 09 00
	00		 jbe	 $LN14@s370_ecpsv

; 951  :         {
; 952  :             /* At NXTCCW */
; 953  :             B_RCWCTL=EVM_IC(regs->GR_L(7)+RCWCTL);

  004f2	b8 08 00 00 00	 mov	 eax, 8
  004f7	48 6b c0 07	 imul	 rax, rax, 7
  004fb	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00503	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0050a	83 c0 05	 add	 eax, 5
  0050d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00512	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0051a	ba fe ff ff ff	 mov	 edx, -2
  0051f	8b c8		 mov	 ecx, eax
  00521	e8 00 00 00 00	 call	 s370_vfetchb
  00526	88 44 24 40	 mov	 BYTE PTR B_RCWCTL$[rsp], al

; 954  :             if(B_RCWCTL & (RCWIO | RCWSHR))

  0052a	0f b6 44 24 40	 movzx	 eax, BYTE PTR B_RCWCTL$[rsp]
  0052f	25 81 00 00 00	 and	 eax, 129		; 00000081H
  00534	85 c0		 test	 eax, eax
  00536	0f 84 d6 08 00
	00		 je	 $LN53@s370_ecpsv

; 955  :             {
; 956  :                 regs->GR_L(5)=EVM_L(regs->GR_L(7)) & 0x00FFFFFF;

  0053c	b8 08 00 00 00	 mov	 eax, 8
  00541	48 6b c0 07	 imul	 rax, rax, 7
  00545	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0054d	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00554	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00559	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00561	ba fe ff ff ff	 mov	 edx, -2
  00566	8b c8		 mov	 ecx, eax
  00568	e8 00 00 00 00	 call	 s370_vfetch4
  0056d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00572	b9 08 00 00 00	 mov	 ecx, 8
  00577	48 6b c9 05	 imul	 rcx, rcx, 5
  0057b	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00583	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 957  :                 if(EVM_IC(regs->GR_L(7)+RCWFLAG) & IDA)

  0058a	b8 08 00 00 00	 mov	 eax, 8
  0058f	48 6b c0 07	 imul	 rax, rax, 7
  00593	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0059b	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  005a2	83 c0 04	 add	 eax, 4
  005a5	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  005aa	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  005b2	ba fe ff ff ff	 mov	 edx, -2
  005b7	8b c8		 mov	 ecx, eax
  005b9	e8 00 00 00 00	 call	 s370_vfetchb
  005be	0f b6 c0	 movzx	 eax, al
  005c1	83 e0 04	 and	 eax, 4
  005c4	85 c0		 test	 eax, eax
  005c6	0f 84 48 06 00
	00		 je	 $LN54@s370_ecpsv

; 958  :                 {
; 959  :                     /* At IDASET */
; 960  :                     regs->GR_L(1)=EVM_LH(regs->GR_L(7)+RCWCNT);

  005cc	b8 08 00 00 00	 mov	 eax, 8
  005d1	48 6b c0 07	 imul	 rax, rax, 7
  005d5	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005dd	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  005e4	83 c0 06	 add	 eax, 6
  005e7	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  005ec	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  005f4	ba fe ff ff ff	 mov	 edx, -2
  005f9	8b c8		 mov	 ecx, eax
  005fb	e8 00 00 00 00	 call	 s370_vfetch2
  00600	b9 08 00 00 00	 mov	 ecx, 8
  00605	48 6b c9 01	 imul	 rcx, rcx, 1
  00609	0f b7 c0	 movzx	 eax, ax
  0060c	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00614	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 961  :                     regs->GR_L(1)--;

  0061b	b8 08 00 00 00	 mov	 eax, 8
  00620	48 6b c0 01	 imul	 rax, rax, 1
  00624	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0062c	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00633	ff c8		 dec	 eax
  00635	b9 08 00 00 00	 mov	 ecx, 8
  0063a	48 6b c9 01	 imul	 rcx, rcx, 1
  0063e	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00646	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 962  :                     regs->GR_L(14)=EVM_L(regs->GR_L(5));

  0064d	b8 08 00 00 00	 mov	 eax, 8
  00652	48 6b c0 05	 imul	 rax, rax, 5
  00656	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0065e	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00665	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0066a	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00672	ba fe ff ff ff	 mov	 edx, -2
  00677	8b c8		 mov	 ecx, eax
  00679	e8 00 00 00 00	 call	 s370_vfetch4
  0067e	b9 08 00 00 00	 mov	 ecx, 8
  00683	48 6b c9 0e	 imul	 rcx, rcx, 14
  00687	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0068f	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 963  :                     regs->GR_L(15)=regs->GR_L(14);

  00696	b8 08 00 00 00	 mov	 eax, 8
  0069b	48 6b c0 0e	 imul	 rax, rax, 14
  0069f	b9 08 00 00 00	 mov	 ecx, 8
  006a4	48 6b c9 0f	 imul	 rcx, rcx, 15
  006a8	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  006b0	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  006b8	41 8b 84 00 80
	02 00 00	 mov	 eax, DWORD PTR [r8+rax+640]
  006c0	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 964  :                     if((EVM_IC(regs->GR_L(7)+RCWCOMND) & 0x0F) == 12)

  006c7	b8 08 00 00 00	 mov	 eax, 8
  006cc	48 6b c0 07	 imul	 rax, rax, 7
  006d0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  006d8	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  006df	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  006e4	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  006ec	ba fe ff ff ff	 mov	 edx, -2
  006f1	8b c8		 mov	 ecx, eax
  006f3	e8 00 00 00 00	 call	 s370_vfetchb
  006f8	0f b6 c0	 movzx	 eax, al
  006fb	83 e0 0f	 and	 eax, 15
  006fe	83 f8 0c	 cmp	 eax, 12
  00701	75 4d		 jne	 SHORT $LN56@s370_ecpsv

; 965  :                     {
; 966  :                         regs->GR_L(14)-=regs->GR_L(1);  /* decr start addr if read backward CCW cmd */

  00703	b8 08 00 00 00	 mov	 eax, 8
  00708	48 6b c0 0e	 imul	 rax, rax, 14
  0070c	b9 08 00 00 00	 mov	 ecx, 8
  00711	48 6b c9 01	 imul	 rcx, rcx, 1
  00715	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0071d	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00725	41 8b 8c 08 80
	02 00 00	 mov	 ecx, DWORD PTR [r8+rcx+640]
  0072d	8b 84 02 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax+640]
  00734	2b c1		 sub	 eax, ecx
  00736	b9 08 00 00 00	 mov	 ecx, 8
  0073b	48 6b c9 0e	 imul	 rcx, rcx, 14
  0073f	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00747	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 967  :                     }

  0074e	eb 48		 jmp	 SHORT $LN57@s370_ecpsv
$LN56@s370_ecpsv:

; 968  :                     else
; 969  :                     {
; 970  :                         regs->GR_L(15)+=regs->GR_L(1);  /* compute end addr of data buffer */

  00750	b8 08 00 00 00	 mov	 eax, 8
  00755	48 6b c0 0f	 imul	 rax, rax, 15
  00759	b9 08 00 00 00	 mov	 ecx, 8
  0075e	48 6b c9 01	 imul	 rcx, rcx, 1
  00762	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0076a	8b 84 02 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax+640]
  00771	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00779	03 84 0a 80 02
	00 00		 add	 eax, DWORD PTR [rdx+rcx+640]
  00780	b9 08 00 00 00	 mov	 ecx, 8
  00785	48 6b c9 0f	 imul	 rcx, rcx, 15
  00789	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00791	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax
$LN57@s370_ecpsv:

; 971  :                     }
; 972  :                     /* At IDLCHK */
; 973  :                     /* Determine how many IDAWs we need to examine; count ends up in R0 */
; 974  :                     regs->GR_L(14)=regs->GR_L(14) >> 11;

  00798	b8 08 00 00 00	 mov	 eax, 8
  0079d	48 6b c0 0e	 imul	 rax, rax, 14
  007a1	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  007a9	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  007b0	c1 e8 0b	 shr	 eax, 11
  007b3	b9 08 00 00 00	 mov	 ecx, 8
  007b8	48 6b c9 0e	 imul	 rcx, rcx, 14
  007bc	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  007c4	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 975  :                     regs->GR_L(15)=regs->GR_L(15) >> 11;

  007cb	b8 08 00 00 00	 mov	 eax, 8
  007d0	48 6b c0 0f	 imul	 rax, rax, 15
  007d4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  007dc	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  007e3	c1 e8 0b	 shr	 eax, 11
  007e6	b9 08 00 00 00	 mov	 ecx, 8
  007eb	48 6b c9 0f	 imul	 rcx, rcx, 15
  007ef	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  007f7	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 976  :                     regs->GR_L(15)-=regs->GR_L(14);

  007fe	b8 08 00 00 00	 mov	 eax, 8
  00803	48 6b c0 0f	 imul	 rax, rax, 15
  00807	b9 08 00 00 00	 mov	 ecx, 8
  0080c	48 6b c9 0e	 imul	 rcx, rcx, 14
  00810	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00818	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00820	41 8b 8c 08 80
	02 00 00	 mov	 ecx, DWORD PTR [r8+rcx+640]
  00828	8b 84 02 80 02
	00 00		 mov	 eax, DWORD PTR [rdx+rax+640]
  0082f	2b c1		 sub	 eax, ecx
  00831	b9 08 00 00 00	 mov	 ecx, 8
  00836	48 6b c9 0f	 imul	 rcx, rcx, 15
  0083a	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00842	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 977  :                     regs->GR_L(0)=regs->GR_L(15)+1;

  00849	b8 08 00 00 00	 mov	 eax, 8
  0084e	48 6b c0 0f	 imul	 rax, rax, 15
  00852	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0085a	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00861	ff c0		 inc	 eax
  00863	b9 08 00 00 00	 mov	 ecx, 8
  00868	48 6b c9 00	 imul	 rcx, rcx, 0
  0086c	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00874	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 978  : 
; 979  :                     if(B_RCWCTL & (RCWHMR | RCW2311))

  0087b	0f b6 44 24 40	 movzx	 eax, BYTE PTR B_RCWCTL$[rsp]
  00880	83 e0 24	 and	 eax, 36			; 00000024H
  00883	85 c0		 test	 eax, eax
  00885	0f 84 bf 00 00
	00		 je	 $LN58@s370_ecpsv
$LN17@s370_ecpsv:

; 980  :                     {
; 981  :                         SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+0));   /* Must do un-relocate.  Exit to UNREL */

  0088b	8b 44 24 48	 mov	 eax, DWORD PTR el$[rsp]
  0088f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00894	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0089c	ba fe ff ff ff	 mov	 edx, -2
  008a1	8b c8		 mov	 ecx, eax
  008a3	e8 00 00 00 00	 call	 s370_vfetch4
  008a8	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  008ad	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  008b5	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  008bb	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  008c3	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  008cb	74 6e		 je	 SHORT $LN59@s370_ecpsv
  008cd	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  008d5	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  008db	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  008e0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  008e8	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  008ee	75 38		 jne	 SHORT $LN60@s370_ecpsv
  008f0	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  008f8	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  008fe	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00903	8b c0		 mov	 eax, eax
  00905	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0090d	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00914	48 0b c8	 or	 rcx, rax
  00917	48 8b c1	 mov	 rax, rcx
  0091a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00922	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00926	eb 13		 jmp	 SHORT $LN61@s370_ecpsv
$LN60@s370_ecpsv:
  00928	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00930	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN61@s370_ecpsv:
$LN59@s370_ecpsv:
  0093b	33 c0		 xor	 eax, eax
  0093d	85 c0		 test	 eax, eax
  0093f	0f 85 46 ff ff
	ff		 jne	 $LN17@s370_ecpsv

; 982  :                         return;

  00945	e9 43 09 00 00	 jmp	 $LN1@s370_ecpsv
$LN58@s370_ecpsv:
$LN18@s370_ecpsv:

; 983  :                     }
; 984  : 
; 985  :                     /* At UNLOCK */
; 986  :                     /* Unlock the pages pointed to by each IDAW */
; 987  :                     while (regs->GR_L(0) !=0)

  0094a	b8 08 00 00 00	 mov	 eax, 8
  0094f	48 6b c0 00	 imul	 rax, rax, 0
  00953	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0095b	83 bc 01 80 02
	00 00 00	 cmp	 DWORD PTR [rcx+rax+640], 0
  00963	0f 84 a6 02 00
	00		 je	 $LN19@s370_ecpsv

; 988  :                     {
; 989  :                         regs->GR_L(2)=EVM_L(regs->GR_L(5));

  00969	b8 08 00 00 00	 mov	 eax, 8
  0096e	48 6b c0 05	 imul	 rax, rax, 5
  00972	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0097a	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00981	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00986	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  0098e	ba fe ff ff ff	 mov	 edx, -2
  00993	8b c8		 mov	 ecx, eax
  00995	e8 00 00 00 00	 call	 s370_vfetch4
  0099a	b9 08 00 00 00	 mov	 ecx, 8
  0099f	48 6b c9 02	 imul	 rcx, rcx, 2
  009a3	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  009ab	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 990  :                         if(regs->GR_L(2) < corsz)

  009b2	b8 08 00 00 00	 mov	 eax, 8
  009b7	48 6b c0 02	 imul	 rax, rax, 2
  009bb	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  009c3	8b 54 24 6c	 mov	 edx, DWORD PTR corsz$[rsp]
  009c7	39 94 01 80 02
	00 00		 cmp	 DWORD PTR [rcx+rax+640], edx
  009ce	0f 83 34 02 00
	00		 jae	 $LN62@s370_ecpsv

; 991  :                         {
; 992  :                             if(!(B_RCWCTL & RCWIO))

  009d4	0f b6 44 24 40	 movzx	 eax, BYTE PTR B_RCWCTL$[rsp]
  009d9	25 80 00 00 00	 and	 eax, 128		; 00000080H
  009de	85 c0		 test	 eax, eax
  009e0	0f 85 c7 00 00
	00		 jne	 $LN64@s370_ecpsv
$LN22@s370_ecpsv:

; 993  :                             {
; 994  :                                 SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+16));      /* No exit point provided for this condition, so */

  009e6	8b 44 24 48	 mov	 eax, DWORD PTR el$[rsp]
  009ea	83 c0 10	 add	 eax, 16
  009ed	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  009f2	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  009fa	ba fe ff ff ff	 mov	 edx, -2
  009ff	8b c8		 mov	 ecx, eax
  00a01	e8 00 00 00 00	 call	 s370_vfetch4
  00a06	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00a0b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a13	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00a19	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a21	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00a29	74 6e		 je	 SHORT $LN66@s370_ecpsv
  00a2b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a33	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00a39	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00a3e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a46	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00a4c	75 38		 jne	 SHORT $LN67@s370_ecpsv
  00a4e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a56	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00a5c	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00a61	8b c0		 mov	 eax, eax
  00a63	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a6b	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00a72	48 0b c8	 or	 rcx, rax
  00a75	48 8b c1	 mov	 rax, rcx
  00a78	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00a80	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00a84	eb 13		 jmp	 SHORT $LN68@s370_ecpsv
$LN67@s370_ecpsv:
  00a86	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00a8e	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN68@s370_ecpsv:
$LN66@s370_ecpsv:
  00a99	33 c0		 xor	 eax, eax
  00a9b	85 c0		 test	 eax, eax
  00a9d	0f 85 43 ff ff
	ff		 jne	 $LN22@s370_ecpsv

; 995  :                                 return;                             /* let's exit NXTCCW and let CP re-do this.      */

  00aa3	e9 e5 07 00 00	 jmp	 $LN1@s370_ecpsv

; 996  :                             }

  00aa8	e9 f4 00 00 00	 jmp	 $LN65@s370_ecpsv
$LN64@s370_ecpsv:

; 997  :                             else
; 998  :                             {
; 999  :                                 if(ecpsvm_unlockpage1(regs,ptr_pl,regs->GR_L(2))!=0)

  00aad	b8 08 00 00 00	 mov	 eax, 8
  00ab2	48 6b c0 02	 imul	 rax, rax, 2
  00ab6	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00abe	44 8b 84 01 80
	02 00 00	 mov	 r8d, DWORD PTR [rcx+rax+640]
  00ac6	8b 54 24 5c	 mov	 edx, DWORD PTR ptr_pl$[rsp]
  00aca	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00ad2	e8 00 00 00 00	 call	 ecpsvm_unlockpage1
  00ad7	85 c0		 test	 eax, eax
  00ad9	0f 84 c2 00 00
	00		 je	 $LN69@s370_ecpsv
$LN25@s370_ecpsv:

; 1000 :                                 {
; 1001 :                                     SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+8));   /* Something wrong; exit to PTRUL2 */

  00adf	8b 44 24 48	 mov	 eax, DWORD PTR el$[rsp]
  00ae3	83 c0 08	 add	 eax, 8
  00ae6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00aeb	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00af3	ba fe ff ff ff	 mov	 edx, -2
  00af8	8b c8		 mov	 ecx, eax
  00afa	e8 00 00 00 00	 call	 s370_vfetch4
  00aff	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00b04	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00b0c	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00b12	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00b1a	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00b22	74 6e		 je	 SHORT $LN70@s370_ecpsv
  00b24	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00b2c	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00b32	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00b37	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00b3f	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00b45	75 38		 jne	 SHORT $LN71@s370_ecpsv
  00b47	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00b4f	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00b55	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00b5a	8b c0		 mov	 eax, eax
  00b5c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00b64	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00b6b	48 0b c8	 or	 rcx, rax
  00b6e	48 8b c1	 mov	 rax, rcx
  00b71	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00b79	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00b7d	eb 13		 jmp	 SHORT $LN72@s370_ecpsv
$LN71@s370_ecpsv:
  00b7f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00b87	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN72@s370_ecpsv:
$LN70@s370_ecpsv:
  00b92	33 c0		 xor	 eax, eax
  00b94	85 c0		 test	 eax, eax
  00b96	0f 85 43 ff ff
	ff		 jne	 $LN25@s370_ecpsv

; 1002 :                                     return;

  00b9c	e9 ec 06 00 00	 jmp	 $LN1@s370_ecpsv
$LN69@s370_ecpsv:
$LN65@s370_ecpsv:

; 1003 :                                 }
; 1004 :                             }
; 1005 :                             /* Point to next IDAW; decrement remaining IDAW count */
; 1006 :                             regs->GR_L(5)+=4;

  00ba1	b8 08 00 00 00	 mov	 eax, 8
  00ba6	48 6b c0 05	 imul	 rax, rax, 5
  00baa	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00bb2	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00bb9	83 c0 04	 add	 eax, 4
  00bbc	b9 08 00 00 00	 mov	 ecx, 8
  00bc1	48 6b c9 05	 imul	 rcx, rcx, 5
  00bc5	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00bcd	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 1007 :                             regs->GR_L(0)--;

  00bd4	b8 08 00 00 00	 mov	 eax, 8
  00bd9	48 6b c0 00	 imul	 rax, rax, 0
  00bdd	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00be5	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00bec	ff c8		 dec	 eax
  00bee	b9 08 00 00 00	 mov	 ecx, 8
  00bf3	48 6b c9 00	 imul	 rcx, rcx, 0
  00bf7	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00bff	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 1008 :                         }

  00c06	eb 02		 jmp	 SHORT $LN63@s370_ecpsv
$LN62@s370_ecpsv:

; 1009 :                         else
; 1010 :                         {
; 1011 :                             break;      /* from while GR0!=0; this will take us to INCR8 below */

  00c08	eb 05		 jmp	 SHORT $LN19@s370_ecpsv
$LN63@s370_ecpsv:

; 1012 :                         }
; 1013 :                     }

  00c0a	e9 3b fd ff ff	 jmp	 $LN18@s370_ecpsv
$LN19@s370_ecpsv:

; 1014 :                 }

  00c0f	e9 fe 01 00 00	 jmp	 $LN55@s370_ecpsv
$LN54@s370_ecpsv:

; 1015 :                 else
; 1016 :                 {
; 1017 :                     /* unlock the page pointed to by the CCW data addresss */
; 1018 :                     regs->GR_L(2)=regs->GR_L(5);

  00c14	b8 08 00 00 00	 mov	 eax, 8
  00c19	48 6b c0 05	 imul	 rax, rax, 5
  00c1d	b9 08 00 00 00	 mov	 ecx, 8
  00c22	48 6b c9 02	 imul	 rcx, rcx, 2
  00c26	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00c2e	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00c36	41 8b 84 00 80
	02 00 00	 mov	 eax, DWORD PTR [r8+rax+640]
  00c3e	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 1019 :                     if(!(B_RCWCTL & RCWIO))

  00c45	0f b6 44 24 40	 movzx	 eax, BYTE PTR B_RCWCTL$[rsp]
  00c4a	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00c4f	85 c0		 test	 eax, eax
  00c51	0f 85 c7 00 00
	00		 jne	 $LN73@s370_ecpsv
$LN28@s370_ecpsv:

; 1020 :                     {
; 1021 :                         SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+16));      /* No exit point provided for this condition, so */

  00c57	8b 44 24 48	 mov	 eax, DWORD PTR el$[rsp]
  00c5b	83 c0 10	 add	 eax, 16
  00c5e	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00c63	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00c6b	ba fe ff ff ff	 mov	 edx, -2
  00c70	8b c8		 mov	 ecx, eax
  00c72	e8 00 00 00 00	 call	 s370_vfetch4
  00c77	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00c7c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00c84	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00c8a	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00c92	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00c9a	74 6e		 je	 SHORT $LN75@s370_ecpsv
  00c9c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00ca4	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00caa	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00caf	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00cb7	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00cbd	75 38		 jne	 SHORT $LN76@s370_ecpsv
  00cbf	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00cc7	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00ccd	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00cd2	8b c0		 mov	 eax, eax
  00cd4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00cdc	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00ce3	48 0b c8	 or	 rcx, rax
  00ce6	48 8b c1	 mov	 rax, rcx
  00ce9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00cf1	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00cf5	eb 13		 jmp	 SHORT $LN77@s370_ecpsv
$LN76@s370_ecpsv:
  00cf7	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00cff	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN77@s370_ecpsv:
$LN75@s370_ecpsv:
  00d0a	33 c0		 xor	 eax, eax
  00d0c	85 c0		 test	 eax, eax
  00d0e	0f 85 43 ff ff
	ff		 jne	 $LN28@s370_ecpsv

; 1022 :                         return;                             /* let's exit NXTCCW and let CP re-do this.      */

  00d14	e9 74 05 00 00	 jmp	 $LN1@s370_ecpsv

; 1023 :                     }

  00d19	e9 f4 00 00 00	 jmp	 $LN74@s370_ecpsv
$LN73@s370_ecpsv:

; 1024 :                     else
; 1025 :                     {
; 1026 :                         if(ecpsvm_unlockpage1(regs,ptr_pl,regs->GR_L(2))!=0)

  00d1e	b8 08 00 00 00	 mov	 eax, 8
  00d23	48 6b c0 02	 imul	 rax, rax, 2
  00d27	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00d2f	44 8b 84 01 80
	02 00 00	 mov	 r8d, DWORD PTR [rcx+rax+640]
  00d37	8b 54 24 5c	 mov	 edx, DWORD PTR ptr_pl$[rsp]
  00d3b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00d43	e8 00 00 00 00	 call	 ecpsvm_unlockpage1
  00d48	85 c0		 test	 eax, eax
  00d4a	0f 84 c2 00 00
	00		 je	 $LN78@s370_ecpsv
$LN31@s370_ecpsv:

; 1027 :                         {
; 1028 :                             SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+20));  /* Something wrong; exit to PTRUL1 */

  00d50	8b 44 24 48	 mov	 eax, DWORD PTR el$[rsp]
  00d54	83 c0 14	 add	 eax, 20
  00d57	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00d5c	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00d64	ba fe ff ff ff	 mov	 edx, -2
  00d69	8b c8		 mov	 ecx, eax
  00d6b	e8 00 00 00 00	 call	 s370_vfetch4
  00d70	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00d75	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00d7d	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00d83	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00d8b	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00d93	74 6e		 je	 SHORT $LN79@s370_ecpsv
  00d95	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00d9d	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00da3	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00da8	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00db0	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00db6	75 38		 jne	 SHORT $LN80@s370_ecpsv
  00db8	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00dc0	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00dc6	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00dcb	8b c0		 mov	 eax, eax
  00dcd	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00dd5	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  00ddc	48 0b c8	 or	 rcx, rax
  00ddf	48 8b c1	 mov	 rax, rcx
  00de2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00dea	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00dee	eb 13		 jmp	 SHORT $LN81@s370_ecpsv
$LN80@s370_ecpsv:
  00df0	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00df8	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN81@s370_ecpsv:
$LN79@s370_ecpsv:
  00e03	33 c0		 xor	 eax, eax
  00e05	85 c0		 test	 eax, eax
  00e07	0f 85 43 ff ff
	ff		 jne	 $LN31@s370_ecpsv

; 1029 :                             return;

  00e0d	e9 7b 04 00 00	 jmp	 $LN1@s370_ecpsv
$LN78@s370_ecpsv:
$LN74@s370_ecpsv:
$LN55@s370_ecpsv:
$LN53@s370_ecpsv:

; 1030 :                         }
; 1031 :                     }
; 1032 :                 }
; 1033 :             }
; 1034 :             /* At INCR8 */
; 1035 :             /* Point to next real CCW; decrement remaining CCW count */
; 1036 :             regs->GR_L(7)+=8;

  00e12	b8 08 00 00 00	 mov	 eax, 8
  00e17	48 6b c0 07	 imul	 rax, rax, 7
  00e1b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00e23	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00e2a	83 c0 08	 add	 eax, 8
  00e2d	b9 08 00 00 00	 mov	 ecx, 8
  00e32	48 6b c9 07	 imul	 rcx, rcx, 7
  00e36	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00e3e	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 1037 :             regs->GR_L(6)--;

  00e45	b8 08 00 00 00	 mov	 eax, 8
  00e4a	48 6b c0 06	 imul	 rax, rax, 6
  00e4e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00e56	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00e5d	ff c8		 dec	 eax
  00e5f	b9 08 00 00 00	 mov	 ecx, 8
  00e64	48 6b c9 06	 imul	 rcx, rcx, 6
  00e68	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00e70	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 1038 :         }

  00e77	e9 57 f6 ff ff	 jmp	 $LN13@s370_ecpsv
$LN14@s370_ecpsv:

; 1039 : 
; 1040 :         /* At FRETRCW */
; 1041 :         /* Load pointer to next RCWTASK if any, and FRET the current RCWTASK */
; 1042 :         regs->GR_L(0)=EVM_LH(rcw+RCWCCNT);

  00e7c	8b 44 24 44	 mov	 eax, DWORD PTR rcw$[rsp]
  00e80	83 c0 0e	 add	 eax, 14
  00e83	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00e88	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00e90	ba fe ff ff ff	 mov	 edx, -2
  00e95	8b c8		 mov	 ecx, eax
  00e97	e8 00 00 00 00	 call	 s370_vfetch2
  00e9c	b9 08 00 00 00	 mov	 ecx, 8
  00ea1	48 6b c9 00	 imul	 rcx, rcx, 0
  00ea5	0f b7 c0	 movzx	 eax, ax
  00ea8	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00eb0	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 1043 :         regs->GR_L(1)=rcw;

  00eb7	b8 08 00 00 00	 mov	 eax, 8
  00ebc	48 6b c0 01	 imul	 rax, rax, 1
  00ec0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00ec8	8b 54 24 44	 mov	 edx, DWORD PTR rcw$[rsp]
  00ecc	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 1044 :         rcw=EVM_L(rcw+RCWPNT);

  00ed3	8b 44 24 44	 mov	 eax, DWORD PTR rcw$[rsp]
  00ed7	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00edc	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00ee4	ba fe ff ff ff	 mov	 edx, -2
  00ee9	8b c8		 mov	 ecx, eax
  00eeb	e8 00 00 00 00	 call	 s370_vfetch4
  00ef0	89 44 24 44	 mov	 DWORD PTR rcw$[rsp], eax

; 1045 :         regs->GR_L(4)=rcw;

  00ef4	b8 08 00 00 00	 mov	 eax, 8
  00ef9	48 6b c0 04	 imul	 rax, rax, 4
  00efd	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00f05	8b 54 24 44	 mov	 edx, DWORD PTR rcw$[rsp]
  00f09	89 94 01 80 02
	00 00		 mov	 DWORD PTR [rcx+rax+640], edx

; 1046 :         if(ecpsvm_do_fretx(regs,regs->GR_L(1),regs->GR_L(0),EVM_L(dl+4),EVM_L(dl+8))!=0)

  00f10	8b 44 24 60	 mov	 eax, DWORD PTR dl$[rsp]
  00f14	83 c0 08	 add	 eax, 8
  00f17	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00f1c	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00f24	ba fe ff ff ff	 mov	 edx, -2
  00f29	8b c8		 mov	 ecx, eax
  00f2b	e8 00 00 00 00	 call	 s370_vfetch4
  00f30	89 44 24 70	 mov	 DWORD PTR tv681[rsp], eax
  00f34	8b 4c 24 60	 mov	 ecx, DWORD PTR dl$[rsp]
  00f38	83 c1 04	 add	 ecx, 4
  00f3b	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  00f41	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00f49	ba fe ff ff ff	 mov	 edx, -2
  00f4e	e8 00 00 00 00	 call	 s370_vfetch4
  00f53	b9 08 00 00 00	 mov	 ecx, 8
  00f58	48 6b c9 00	 imul	 rcx, rcx, 0
  00f5c	ba 08 00 00 00	 mov	 edx, 8
  00f61	48 6b d2 01	 imul	 rdx, rdx, 1
  00f65	44 8b 44 24 70	 mov	 r8d, DWORD PTR tv681[rsp]
  00f6a	44 89 44 24 20	 mov	 DWORD PTR [rsp+32], r8d
  00f6f	44 8b c8	 mov	 r9d, eax
  00f72	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00f7a	44 0f b7 84 08
	80 02 00 00	 movzx	 r8d, WORD PTR [rax+rcx+640]
  00f83	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00f8b	8b 94 10 80 02
	00 00		 mov	 edx, DWORD PTR [rax+rdx+640]
  00f92	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00f9a	e8 00 00 00 00	 call	 ecpsvm_do_fretx
  00f9f	85 c0		 test	 eax, eax
  00fa1	0f 84 c2 00 00
	00		 je	 $LN82@s370_ecpsv
$LN34@s370_ecpsv:

; 1047 :         {
; 1048 :             SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+4));       /* Cant do FRETX, exit to UNTFRET */

  00fa7	8b 44 24 48	 mov	 eax, DWORD PTR el$[rsp]
  00fab	83 c0 04	 add	 eax, 4
  00fae	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00fb3	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00fbb	ba fe ff ff ff	 mov	 edx, -2
  00fc0	8b c8		 mov	 ecx, eax
  00fc2	e8 00 00 00 00	 call	 s370_vfetch4
  00fc7	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00fcc	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00fd4	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00fda	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00fe2	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00fea	74 6e		 je	 SHORT $LN83@s370_ecpsv
  00fec	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00ff4	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00ffa	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00fff	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01007	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  0100d	75 38		 jne	 SHORT $LN84@s370_ecpsv
  0100f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01017	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  0101d	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  01022	8b c0		 mov	 eax, eax
  01024	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0102c	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  01033	48 0b c8	 or	 rcx, rax
  01036	48 8b c1	 mov	 rax, rcx
  01039	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01041	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  01045	eb 13		 jmp	 SHORT $LN85@s370_ecpsv
$LN84@s370_ecpsv:
  01047	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0104f	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN85@s370_ecpsv:
$LN83@s370_ecpsv:
  0105a	33 c0		 xor	 eax, eax
  0105c	85 c0		 test	 eax, eax
  0105e	0f 85 43 ff ff
	ff		 jne	 $LN34@s370_ecpsv

; 1049 :             return;

  01064	e9 24 02 00 00	 jmp	 $LN1@s370_ecpsv
$LN82@s370_ecpsv:

; 1050 :         }
; 1051 :     }

  01069	e9 00 f4 ff ff	 jmp	 $LN11@s370_ecpsv
$LN12@s370_ecpsv:

; 1052 : 
; 1053 :     /* After the FRET loop */
; 1054 :     EVM_ST(0,regs->GR_L(10)+IOBCAW);

  0106e	b8 08 00 00 00	 mov	 eax, 8
  01073	48 6b c0 0a	 imul	 rax, rax, 10
  01077	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0107f	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  01086	83 c0 20	 add	 eax, 32			; 00000020H
  01089	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0108e	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  01096	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  0109c	8b d0		 mov	 edx, eax
  0109e	33 c9		 xor	 ecx, ecx
  010a0	e8 00 00 00 00	 call	 s370_vstore4

; 1055 :     B_IOBSPEC2=EVM_IC(regs->GR_L(10)+IOBSPEC2);

  010a5	b8 08 00 00 00	 mov	 eax, 8
  010aa	48 6b c0 0a	 imul	 rax, rax, 10
  010ae	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  010b6	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  010bd	83 c0 39	 add	 eax, 57			; 00000039H
  010c0	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  010c5	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  010cd	ba fe ff ff ff	 mov	 edx, -2
  010d2	8b c8		 mov	 ecx, eax
  010d4	e8 00 00 00 00	 call	 s370_vfetchb
  010d9	88 44 24 41	 mov	 BYTE PTR B_IOBSPEC2$[rsp], al

; 1056 :     if(B_IOBSPEC2 & IOBUNREL)

  010dd	0f b6 44 24 41	 movzx	 eax, BYTE PTR B_IOBSPEC2$[rsp]
  010e2	83 e0 20	 and	 eax, 32			; 00000020H
  010e5	85 c0		 test	 eax, eax
  010e7	0f 84 d2 00 00
	00		 je	 $LN86@s370_ecpsv

; 1057 :     {
; 1058 :         if(!(B_IOBSPEC2 & IOBCLN))

  010ed	0f b6 44 24 41	 movzx	 eax, BYTE PTR B_IOBSPEC2$[rsp]
  010f2	83 e0 40	 and	 eax, 64			; 00000040H
  010f5	85 c0		 test	 eax, eax
  010f7	0f 85 c2 00 00
	00		 jne	 $LN87@s370_ecpsv
$LN37@s370_ecpsv:

; 1059 :         {
; 1060 :             SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+24));      /* MDISK with reserve/release, exit to ITSAREL */

  010fd	8b 44 24 48	 mov	 eax, DWORD PTR el$[rsp]
  01101	83 c0 18	 add	 eax, 24
  01104	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01109	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  01111	ba fe ff ff ff	 mov	 edx, -2
  01116	8b c8		 mov	 ecx, eax
  01118	e8 00 00 00 00	 call	 s370_vfetch4
  0111d	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  01122	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0112a	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  01130	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01138	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  01140	74 6e		 je	 SHORT $LN88@s370_ecpsv
  01142	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0114a	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01150	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  01155	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0115d	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  01163	75 38		 jne	 SHORT $LN89@s370_ecpsv
  01165	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0116d	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01173	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  01178	8b c0		 mov	 eax, eax
  0117a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01182	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  01189	48 0b c8	 or	 rcx, rax
  0118c	48 8b c1	 mov	 rax, rcx
  0118f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01197	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0119b	eb 13		 jmp	 SHORT $LN90@s370_ecpsv
$LN89@s370_ecpsv:
  0119d	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  011a5	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN90@s370_ecpsv:
$LN88@s370_ecpsv:
  011b0	33 c0		 xor	 eax, eax
  011b2	85 c0		 test	 eax, eax
  011b4	0f 85 43 ff ff
	ff		 jne	 $LN37@s370_ecpsv

; 1061 :             return;

  011ba	e9 ce 00 00 00	 jmp	 $LN1@s370_ecpsv
$LN87@s370_ecpsv:
$LN86@s370_ecpsv:
$LN40@s370_ecpsv:

; 1062 :         }
; 1063 :     }
; 1064 :     SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+12));      /* Success.  Exit to UNTFRXIT */

  011bf	8b 44 24 48	 mov	 eax, DWORD PTR el$[rsp]
  011c3	83 c0 0c	 add	 eax, 12
  011c6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  011cb	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  011d3	ba fe ff ff ff	 mov	 edx, -2
  011d8	8b c8		 mov	 ecx, eax
  011da	e8 00 00 00 00	 call	 s370_vfetch4
  011df	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  011e4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  011ec	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  011f2	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  011fa	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  01202	74 6e		 je	 SHORT $LN91@s370_ecpsv
  01204	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0120c	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01212	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  01217	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0121f	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  01225	75 38		 jne	 SHORT $LN92@s370_ecpsv
  01227	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0122f	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  01235	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0123a	8b c0		 mov	 eax, eax
  0123c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01244	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  0124b	48 0b c8	 or	 rcx, rax
  0124e	48 8b c1	 mov	 rax, rcx
  01251	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  01259	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  0125d	eb 13		 jmp	 SHORT $LN93@s370_ecpsv
$LN92@s370_ecpsv:
  0125f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  01267	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN93@s370_ecpsv:
$LN91@s370_ecpsv:
  01272	33 c0		 xor	 eax, eax
  01274	85 c0		 test	 eax, eax
  01276	0f 85 43 ff ff
	ff		 jne	 $LN40@s370_ecpsv

; 1065 :     CPASSIST_HIT(FCCWS);

  0127c	48 8b 05 70 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+368
  01283	48 ff c0	 inc	 rax
  01286	48 89 05 70 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+368, rax
$LN1@s370_ecpsv:
$LN94@s370_ecpsv:

; 1066 :     return;
; 1067 : }

  0128d	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  01294	c3		 ret	 0
s370_ecpsvm_free_ccwstor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
effective_addr1$ = 64
effective_addr2$ = 68
temp$1 = 72
b1$ = 76
b2$ = 80
el$ = 84
dl$ = 88
vaddr$ = 92
tv256 = 96
raddr$ = 104
inst$ = 128
regs$ = 136
s370_ecpsvm_decode_next_ccw PROC

; 843  : {

$LN31:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 844  : VADR dl;
; 845  : VADR el;
; 846  : RADR raddr;
; 847  : VADR vaddr;
; 848  : 
; 849  :     ECPSVM_PROLOG(DNCCW);

  0000e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  00016	48 83 c0 02	 add	 rax, 2
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 fetch_fw_noswap
  00022	8b c8		 mov	 ecx, eax
  00024	e8 00 00 00 00	 call	 _byteswap_ulong
  00029	89 44 24 48	 mov	 DWORD PTR temp$1[rsp], eax
  0002d	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00031	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00036	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0003a	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0003e	c1 e8 0c	 shr	 eax, 12
  00041	83 e0 0f	 and	 eax, 15
  00044	89 44 24 50	 mov	 DWORD PTR b2$[rsp], eax
  00048	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0004c	c1 e8 10	 shr	 eax, 16
  0004f	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00054	89 44 24 40	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00058	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0005c	c1 e8 1c	 shr	 eax, 28
  0005f	83 e0 0f	 and	 eax, 15
  00062	89 44 24 4c	 mov	 DWORD PTR b1$[rsp], eax
  00066	83 7c 24 4c 00	 cmp	 DWORD PTR b1$[rsp], 0
  0006b	74 2d		 je	 SHORT $LN11@s370_ecpsv
  0006d	48 63 44 24 4c	 movsxd	 rax, DWORD PTR b1$[rsp]
  00072	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0007a	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00081	8b 4c 24 40	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  00085	03 c8		 add	 ecx, eax
  00087	8b c1		 mov	 eax, ecx
  00089	89 44 24 40	 mov	 DWORD PTR effective_addr1$[rsp], eax
  0008d	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00091	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00096	89 44 24 40	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN11@s370_ecpsv:
  0009a	83 7c 24 50 00	 cmp	 DWORD PTR b2$[rsp], 0
  0009f	74 2d		 je	 SHORT $LN12@s370_ecpsv
  000a1	48 63 44 24 50	 movsxd	 rax, DWORD PTR b2$[rsp]
  000a6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000ae	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000b5	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000b9	03 c8		 add	 ecx, eax
  000bb	8b c1		 mov	 eax, ecx
  000bd	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000c1	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000c5	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000ca	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN12@s370_ecpsv:
$LN4@s370_ecpsv:
  000ce	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000d6	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000da	48 83 c0 06	 add	 rax, 6
  000de	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000e6	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000ea	33 c0		 xor	 eax, eax
  000ec	83 f8 06	 cmp	 eax, 6
  000ef	74 0f		 je	 SHORT $LN13@s370_ecpsv
  000f1	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000f9	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN13@s370_ecpsv:
  00100	33 c0		 xor	 eax, eax
  00102	85 c0		 test	 eax, eax
  00104	75 c8		 jne	 SHORT $LN4@s370_ecpsv
  00106	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0010e	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00112	83 e0 01	 and	 eax, 1
  00115	85 c0		 test	 eax, eax
  00117	74 1b		 je	 SHORT $LN14@s370_ecpsv
  00119	ba 02 00 00 00	 mov	 edx, 2
  0011e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00126	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0012e	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN14@s370_ecpsv:
$LN7@s370_ecpsv:
  00134	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0013c	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00142	d1 e8		 shr	 eax, 1
  00144	83 e0 01	 and	 eax, 1
  00147	85 c0		 test	 eax, eax
  00149	74 1b		 je	 SHORT $LN15@s370_ecpsv
  0014b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00153	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00159	ba fc ff ff ff	 mov	 edx, -4
  0015e	48 8b c8	 mov	 rcx, rax
  00161	e8 00 00 00 00	 call	 longjmp
$LN15@s370_ecpsv:
  00166	33 c0		 xor	 eax, eax
  00168	85 c0		 test	 eax, eax
  0016a	75 c8		 jne	 SHORT $LN7@s370_ecpsv
  0016c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00173	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00179	c1 e8 11	 shr	 eax, 17
  0017c	83 e0 01	 and	 eax, 1
  0017f	85 c0		 test	 eax, eax
  00181	75 75		 jne	 SHORT $LN16@s370_ecpsv
  00183	8b 05 38 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+312
  00189	c1 e8 02	 shr	 eax, 2
  0018c	83 e0 01	 and	 eax, 1
  0018f	85 c0		 test	 eax, eax
  00191	74 53		 je	 SHORT $LN17@s370_ecpsv
  00193	b9 01 00 00 00	 mov	 ecx, 1
  00198	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0019e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170132
  001a5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170133
  001b1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170134
  001bd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001c2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001c7	41 b9 03 00 00
	00		 mov	 r9d, 3
  001cd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170135
  001d4	ba 51 03 00 00	 mov	 edx, 849		; 00000351H
  001d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170136
  001e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@s370_ecpsv:
  001e6	ba 01 00 00 00	 mov	 edx, 1
  001eb	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  001f3	e8 00 00 00 00	 call	 s370_program_interrupt
$LN16@s370_ecpsv:
  001f8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00200	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00204	83 e0 01	 and	 eax, 1
  00207	85 c0		 test	 eax, eax
  00209	74 1b		 je	 SHORT $LN18@s370_ecpsv
  0020b	ba 02 00 00 00	 mov	 edx, 2
  00210	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00218	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00220	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN18@s370_ecpsv:
  00226	8b 05 38 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+312
  0022c	d1 e8		 shr	 eax, 1
  0022e	83 e0 01	 and	 eax, 1
  00231	85 c0		 test	 eax, eax
  00233	75 68		 jne	 SHORT $LN19@s370_ecpsv
  00235	8b 05 38 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+312
  0023b	c1 e8 02	 shr	 eax, 2
  0023e	83 e0 01	 and	 eax, 1
  00241	85 c0		 test	 eax, eax
  00243	74 53		 je	 SHORT $LN20@s370_ecpsv
  00245	b9 01 00 00 00	 mov	 ecx, 1
  0024a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00250	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170140
  00257	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0025c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170141
  00263	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00268	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170142
  0026f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00274	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00279	41 b9 03 00 00
	00		 mov	 r9d, 3
  0027f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170143
  00286	ba 51 03 00 00	 mov	 edx, 849		; 00000351H
  0028b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170144
  00292	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN20@s370_ecpsv:
  00298	e9 c1 03 00 00	 jmp	 $LN1@s370_ecpsv
$LN19@s370_ecpsv:
  0029d	b8 08 00 00 00	 mov	 eax, 8
  002a2	48 6b c0 07	 imul	 rax, rax, 7
  002a6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002ae	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  002b5	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  002ba	85 c0		 test	 eax, eax
  002bc	75 05		 jne	 SHORT $LN21@s370_ecpsv
  002be	e9 9b 03 00 00	 jmp	 $LN1@s370_ecpsv
$LN21@s370_ecpsv:
  002c3	48 8b 05 28 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+296
  002ca	48 ff c0	 inc	 rax
  002cd	48 89 05 28 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+296, rax
  002d4	8b 05 38 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+312
  002da	c1 e8 02	 shr	 eax, 2
  002dd	83 e0 01	 and	 eax, 1
  002e0	85 c0		 test	 eax, eax
  002e2	74 53		 je	 SHORT $LN22@s370_ecpsv
  002e4	b9 01 00 00 00	 mov	 ecx, 1
  002e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170147
  002f6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170148
  00302	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00307	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170149
  0030e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00313	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00318	41 b9 03 00 00
	00		 mov	 r9d, 3
  0031e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170150
  00325	ba 51 03 00 00	 mov	 edx, 849		; 00000351H
  0032a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170151
  00331	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN22@s370_ecpsv:

; 850  :     dl=effective_addr1;

  00337	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0033b	89 44 24 58	 mov	 DWORD PTR dl$[rsp], eax

; 851  :     el=effective_addr2;

  0033f	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00343	89 44 24 54	 mov	 DWORD PTR el$[rsp], eax

; 852  : 
; 853  :     vaddr=regs->GR_L(9)+8;

  00347	b8 08 00 00 00	 mov	 eax, 8
  0034c	48 6b c0 09	 imul	 rax, rax, 9
  00350	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00358	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0035f	83 c0 08	 add	 eax, 8
  00362	89 44 24 5c	 mov	 DWORD PTR vaddr$[rsp], eax

; 854  :     if(ecpsvm_tranbrng(regs,dl+0,vaddr,&raddr)!=0)

  00366	4c 8d 4c 24 68	 lea	 r9, QWORD PTR raddr$[rsp]
  0036b	44 8b 44 24 5c	 mov	 r8d, DWORD PTR vaddr$[rsp]
  00370	8b 54 24 58	 mov	 edx, DWORD PTR dl$[rsp]
  00374	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0037c	e8 00 00 00 00	 call	 ecpsvm_tranbrng
  00381	85 c0		 test	 eax, eax
  00383	74 68		 je	 SHORT $LN23@s370_ecpsv

; 855  :     {
; 856  :         DEBUG_CPASSISTX(DNCCW,WRMSG(HHC90000, "D", "DNCCW cant translate vaddr; back to CP"));

  00385	8b 05 38 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+312
  0038b	c1 e8 02	 shr	 eax, 2
  0038e	83 e0 01	 and	 eax, 1
  00391	85 c0		 test	 eax, eax
  00393	74 53		 je	 SHORT $LN24@s370_ecpsv
  00395	b9 01 00 00 00	 mov	 ecx, 1
  0039a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170154
  003a7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170155
  003b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170156
  003bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  003cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170157
  003d6	ba 58 03 00 00	 mov	 edx, 856		; 00000358H
  003db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170158
  003e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN24@s370_ecpsv:

; 857  :         return;

  003e8	e9 71 02 00 00	 jmp	 $LN1@s370_ecpsv
$LN23@s370_ecpsv:

; 858  :     }
; 859  : 
; 860  :     /* advance virtual CCW addr, real CCW addr.  Save VIRCOMND/VIRFLAG into PRVCOMND/PRVFLAG */
; 861  :     regs->GR_L(9)+=8;

  003ed	b8 08 00 00 00	 mov	 eax, 8
  003f2	48 6b c0 09	 imul	 rax, rax, 9
  003f6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  003fe	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00405	83 c0 08	 add	 eax, 8
  00408	b9 08 00 00 00	 mov	 ecx, 8
  0040d	48 6b c9 09	 imul	 rcx, rcx, 9
  00411	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00419	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 862  :     regs->GR_L(6)+=8;

  00420	b8 08 00 00 00	 mov	 eax, 8
  00425	48 6b c0 06	 imul	 rax, rax, 6
  00429	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00431	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00438	83 c0 08	 add	 eax, 8
  0043b	b9 08 00 00 00	 mov	 ecx, 8
  00440	48 6b c9 06	 imul	 rcx, rcx, 6
  00444	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  0044c	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 863  :     EVM_STH(EVM_LH(regs->GR_L(13)+VIRCOMND),regs->GR_L(13)+PRVCOMND);

  00453	b8 08 00 00 00	 mov	 eax, 8
  00458	48 6b c0 0d	 imul	 rax, rax, 13
  0045c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00464	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0046b	83 c0 0c	 add	 eax, 12
  0046e	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00473	89 44 24 60	 mov	 DWORD PTR tv256[rsp], eax
  00477	b9 08 00 00 00	 mov	 ecx, 8
  0047c	48 6b c9 0d	 imul	 rcx, rcx, 13
  00480	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  00488	8b 8c 0a 80 02
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+640]
  0048f	83 c1 0e	 add	 ecx, 14
  00492	81 e1 ff ff ff
	00		 and	 ecx, 16777215		; 00ffffffH
  00498	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  004a0	ba fe ff ff ff	 mov	 edx, -2
  004a5	e8 00 00 00 00	 call	 s370_vfetch2
  004aa	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR regs$[rsp]
  004b2	41 b8 fe ff ff
	ff		 mov	 r8d, -2
  004b8	8b 4c 24 60	 mov	 ecx, DWORD PTR tv256[rsp]
  004bc	8b d1		 mov	 edx, ecx
  004be	0f b7 c8	 movzx	 ecx, ax
  004c1	e8 00 00 00 00	 call	 s370_vstore2

; 864  : 
; 865  :     /* See if there is room for one more CCW in RCWTASK.  If not we have to exit */
; 866  :     if(regs->GR_L(6)+8 > regs->GR_L(7))

  004c6	b8 08 00 00 00	 mov	 eax, 8
  004cb	48 6b c0 06	 imul	 rax, rax, 6
  004cf	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004d7	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  004de	83 c0 08	 add	 eax, 8
  004e1	b9 08 00 00 00	 mov	 ecx, 8
  004e6	48 6b c9 07	 imul	 rcx, rcx, 7
  004ea	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR regs$[rsp]
  004f2	3b 84 0a 80 02
	00 00		 cmp	 eax, DWORD PTR [rdx+rcx+640]
  004f9	0f 86 22 01 00
	00		 jbe	 $LN25@s370_ecpsv

; 867  :     {
; 868  :         DEBUG_CPASSISTX(DFCCW,WRMSG(HHC90000, "D", "DNCCW - Exit CCWNROOM"));

  004ff	8b 05 58 01 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+344
  00505	c1 e8 02	 shr	 eax, 2
  00508	83 e0 01	 and	 eax, 1
  0050b	85 c0		 test	 eax, eax
  0050d	74 53		 je	 SHORT $LN26@s370_ecpsv
  0050f	b9 01 00 00 00	 mov	 ecx, 1
  00514	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0051a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170161
  00521	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00526	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170162
  0052d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00532	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170163
  00539	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0053e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00543	41 b9 03 00 00
	00		 mov	 r9d, 3
  00549	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170164
  00550	ba 64 03 00 00	 mov	 edx, 868		; 00000364H
  00555	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170165
  0055c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN26@s370_ecpsv:
$LN10@s370_ecpsv:

; 869  :         SET_PSW_IA_AND_MAYBE_IP(regs,EVM_L(el+4));           /* Not enough room in RCWTASK; exit to CCWNROOM */

  00562	8b 44 24 54	 mov	 eax, DWORD PTR el$[rsp]
  00566	83 c0 04	 add	 eax, 4
  00569	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0056e	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR regs$[rsp]
  00576	ba fe ff ff ff	 mov	 edx, -2
  0057b	8b c8		 mov	 ecx, eax
  0057d	e8 00 00 00 00	 call	 s370_vfetch4
  00582	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00587	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0058f	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00595	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0059d	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  005a5	74 6e		 je	 SHORT $LN27@s370_ecpsv
  005a7	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005af	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  005b5	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  005ba	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005c2	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  005c8	75 38		 jne	 SHORT $LN28@s370_ecpsv
  005ca	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  005d2	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  005d8	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  005dd	8b c0		 mov	 eax, eax
  005df	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005e7	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  005ee	48 0b c8	 or	 rcx, rax
  005f1	48 8b c1	 mov	 rax, rcx
  005f4	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  005fc	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00600	eb 13		 jmp	 SHORT $LN29@s370_ecpsv
$LN28@s370_ecpsv:
  00602	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0060a	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN29@s370_ecpsv:
$LN27@s370_ecpsv:
  00615	33 c0		 xor	 eax, eax
  00617	85 c0		 test	 eax, eax
  00619	0f 85 43 ff ff
	ff		 jne	 $LN10@s370_ecpsv

; 870  :         return;

  0061f	eb 3d		 jmp	 SHORT $LN1@s370_ecpsv
$LN25@s370_ecpsv:

; 871  :     }
; 872  :     /* Go directly into "decode first CCW" assist, and count a call to it */
; 873  :     ecpsvm_cpstats.DFCCW.call++;

  00621	48 8b 05 48 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+328
  00628	48 ff c0	 inc	 rax
  0062b	48 89 05 48 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+328, rax

; 874  :     ecpsvm_do_deccw1(regs,dl,el,raddr);

  00632	4c 8b 4c 24 68	 mov	 r9, QWORD PTR raddr$[rsp]
  00637	44 8b 44 24 54	 mov	 r8d, DWORD PTR el$[rsp]
  0063c	8b 54 24 58	 mov	 edx, DWORD PTR dl$[rsp]
  00640	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00648	e8 00 00 00 00	 call	 ecpsvm_do_deccw1

; 875  :     CPASSIST_HIT(DNCCW);

  0064d	48 8b 05 30 01
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+304
  00654	48 ff c0	 inc	 rax
  00657	48 89 05 30 01
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+304, rax
$LN1@s370_ecpsv:
$LN30@s370_ecpsv:

; 876  :     return;
; 877  : }

  0065e	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00662	c3		 ret	 0
s370_ecpsvm_decode_next_ccw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
effective_addr2$ = 64
effective_addr1$ = 68
temp$1 = 72
b1$ = 76
b2$ = 80
inst$ = 112
regs$ = 120
s370_ecpsvm_unlock_page PROC

; 675  : {

$LN28:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 676  :     ECPSVM_PROLOG(ULKPG);

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR inst$[rsp]
  00013	48 83 c0 02	 add	 rax, 2
  00017	48 8b c8	 mov	 rcx, rax
  0001a	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001f	8b c8		 mov	 ecx, eax
  00021	e8 00 00 00 00	 call	 _byteswap_ulong
  00026	89 44 24 48	 mov	 DWORD PTR temp$1[rsp], eax
  0002a	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0002e	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00033	89 44 24 40	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00037	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  0003b	c1 e8 0c	 shr	 eax, 12
  0003e	83 e0 0f	 and	 eax, 15
  00041	89 44 24 50	 mov	 DWORD PTR b2$[rsp], eax
  00045	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00049	c1 e8 10	 shr	 eax, 16
  0004c	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00051	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00055	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00059	c1 e8 1c	 shr	 eax, 28
  0005c	83 e0 0f	 and	 eax, 15
  0005f	89 44 24 4c	 mov	 DWORD PTR b1$[rsp], eax
  00063	83 7c 24 4c 00	 cmp	 DWORD PTR b1$[rsp], 0
  00068	74 2a		 je	 SHORT $LN11@s370_ecpsv
  0006a	48 63 44 24 4c	 movsxd	 rax, DWORD PTR b1$[rsp]
  0006f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00074	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007b	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0007f	03 c8		 add	 ecx, eax
  00081	8b c1		 mov	 eax, ecx
  00083	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00087	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0008b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00090	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN11@s370_ecpsv:
  00094	83 7c 24 50 00	 cmp	 DWORD PTR b2$[rsp], 0
  00099	74 2a		 je	 SHORT $LN12@s370_ecpsv
  0009b	48 63 44 24 50	 movsxd	 rax, DWORD PTR b2$[rsp]
  000a0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a5	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000ac	8b 4c 24 40	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000b0	03 c8		 add	 ecx, eax
  000b2	8b c1		 mov	 eax, ecx
  000b4	89 44 24 40	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000b8	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000bc	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000c1	89 44 24 40	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN12@s370_ecpsv:
$LN4@s370_ecpsv:
  000c5	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000ca	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ce	48 83 c0 06	 add	 rax, 6
  000d2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000d7	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000db	33 c0		 xor	 eax, eax
  000dd	83 f8 06	 cmp	 eax, 6
  000e0	74 0c		 je	 SHORT $LN13@s370_ecpsv
  000e2	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000e7	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN13@s370_ecpsv:
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	75 d1		 jne	 SHORT $LN4@s370_ecpsv
  000f4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000f9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  000fd	83 e0 01	 and	 eax, 1
  00100	85 c0		 test	 eax, eax
  00102	74 15		 je	 SHORT $LN14@s370_ecpsv
  00104	ba 02 00 00 00	 mov	 edx, 2
  00109	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0010e	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00113	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN14@s370_ecpsv:
$LN7@s370_ecpsv:
  00119	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0011e	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00124	d1 e8		 shr	 eax, 1
  00126	83 e0 01	 and	 eax, 1
  00129	85 c0		 test	 eax, eax
  0012b	74 18		 je	 SHORT $LN15@s370_ecpsv
  0012d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00132	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00138	ba fc ff ff ff	 mov	 edx, -4
  0013d	48 8b c8	 mov	 rcx, rax
  00140	e8 00 00 00 00	 call	 longjmp
$LN15@s370_ecpsv:
  00145	33 c0		 xor	 eax, eax
  00147	85 c0		 test	 eax, eax
  00149	75 ce		 jne	 SHORT $LN7@s370_ecpsv
  0014b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00152	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00158	c1 e8 11	 shr	 eax, 17
  0015b	83 e0 01	 and	 eax, 1
  0015e	85 c0		 test	 eax, eax
  00160	75 72		 jne	 SHORT $LN16@s370_ecpsv
  00162	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+120
  00168	c1 e8 02	 shr	 eax, 2
  0016b	83 e0 01	 and	 eax, 1
  0016e	85 c0		 test	 eax, eax
  00170	74 53		 je	 SHORT $LN17@s370_ecpsv
  00172	b9 01 00 00 00	 mov	 ecx, 1
  00177	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169956
  00184	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169957
  00190	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169958
  0019c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001a1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a6	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169959
  001b3	ba a4 02 00 00	 mov	 edx, 676		; 000002a4H
  001b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169960
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@s370_ecpsv:
  001c5	ba 01 00 00 00	 mov	 edx, 1
  001ca	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001cf	e8 00 00 00 00	 call	 s370_program_interrupt
$LN16@s370_ecpsv:
  001d4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001d9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  001dd	83 e0 01	 and	 eax, 1
  001e0	85 c0		 test	 eax, eax
  001e2	74 15		 je	 SHORT $LN18@s370_ecpsv
  001e4	ba 02 00 00 00	 mov	 edx, 2
  001e9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001ee	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001f3	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN18@s370_ecpsv:
  001f9	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+120
  001ff	d1 e8		 shr	 eax, 1
  00201	83 e0 01	 and	 eax, 1
  00204	85 c0		 test	 eax, eax
  00206	75 68		 jne	 SHORT $LN19@s370_ecpsv
  00208	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+120
  0020e	c1 e8 02	 shr	 eax, 2
  00211	83 e0 01	 and	 eax, 1
  00214	85 c0		 test	 eax, eax
  00216	74 53		 je	 SHORT $LN20@s370_ecpsv
  00218	b9 01 00 00 00	 mov	 ecx, 1
  0021d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00223	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169964
  0022a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169965
  00236	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169966
  00242	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00247	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00252	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169967
  00259	ba a4 02 00 00	 mov	 edx, 676		; 000002a4H
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169968
  00265	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN20@s370_ecpsv:
  0026b	e9 5e 01 00 00	 jmp	 $LN1@s370_ecpsv
$LN19@s370_ecpsv:
  00270	b8 08 00 00 00	 mov	 eax, 8
  00275	48 6b c0 07	 imul	 rax, rax, 7
  00279	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0027e	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00285	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0028a	85 c0		 test	 eax, eax
  0028c	75 05		 jne	 SHORT $LN21@s370_ecpsv
  0028e	e9 3b 01 00 00	 jmp	 $LN1@s370_ecpsv
$LN21@s370_ecpsv:
  00293	48 8b 05 68 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+104
  0029a	48 ff c0	 inc	 rax
  0029d	48 89 05 68 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+104, rax
  002a4	8b 05 78 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+120
  002aa	c1 e8 02	 shr	 eax, 2
  002ad	83 e0 01	 and	 eax, 1
  002b0	85 c0		 test	 eax, eax
  002b2	74 53		 je	 SHORT $LN22@s370_ecpsv
  002b4	b9 01 00 00 00	 mov	 ecx, 1
  002b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169971
  002c6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169972
  002d2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169973
  002de	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e8	41 b9 03 00 00
	00		 mov	 r9d, 3
  002ee	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169974
  002f5	ba a4 02 00 00	 mov	 edx, 676		; 000002a4H
  002fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169975
  00301	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN22@s370_ecpsv:

; 677  :     if(ecpsvm_unlockpage1(regs,effective_addr1,effective_addr2)!=0)

  00307	44 8b 44 24 40	 mov	 r8d, DWORD PTR effective_addr2$[rsp]
  0030c	8b 54 24 44	 mov	 edx, DWORD PTR effective_addr1$[rsp]
  00310	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00315	e8 00 00 00 00	 call	 ecpsvm_unlockpage1
  0031a	85 c0		 test	 eax, eax
  0031c	74 05		 je	 SHORT $LN23@s370_ecpsv

; 678  :     {
; 679  :         return;

  0031e	e9 ab 00 00 00	 jmp	 $LN1@s370_ecpsv
$LN23@s370_ecpsv:

; 680  :     }
; 681  : 
; 682  :     CPASSIST_HIT(ULKPG);

  00323	48 8b 05 70 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+112
  0032a	48 ff c0	 inc	 rax
  0032d	48 89 05 70 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+112, rax
$LN10@s370_ecpsv:

; 683  :     BR14;

  00334	b8 08 00 00 00	 mov	 eax, 8
  00339	48 6b c0 0e	 imul	 rax, rax, 14
  0033d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00342	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00349	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0034e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00353	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00359	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0035e	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00366	74 5c		 je	 SHORT $LN24@s370_ecpsv
  00368	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0036d	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00373	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00378	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0037d	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00383	75 2f		 jne	 SHORT $LN25@s370_ecpsv
  00385	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0038a	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00390	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00395	8b c0		 mov	 eax, eax
  00397	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0039c	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  003a3	48 0b c8	 or	 rcx, rax
  003a6	48 8b c1	 mov	 rax, rcx
  003a9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  003ae	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  003b2	eb 10		 jmp	 SHORT $LN26@s370_ecpsv
$LN25@s370_ecpsv:
  003b4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  003b9	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN26@s370_ecpsv:
$LN24@s370_ecpsv:
  003c4	33 c0		 xor	 eax, eax
  003c6	85 c0		 test	 eax, eax
  003c8	0f 85 66 ff ff
	ff		 jne	 $LN10@s370_ecpsv
$LN1@s370_ecpsv:
$LN27@s370_ecpsv:

; 684  :     return;
; 685  : }

  003ce	48 83 c4 68	 add	 rsp, 104		; 00000068H
  003d2	c3		 ret	 0
s370_ecpsvm_unlock_page ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
effective_addr1$ = 64
effective_addr2$ = 68
temp$1 = 72
b1$ = 76
b2$ = 80
pg$ = 84
ptr_pl$ = 88
buf$ = 96
__$ArrayPad$ = 352
inst$ = 384
regs$ = 392
s370_ecpsvm_lock_page PROC

; 592  : {

$LN29:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 593  :     char buf[256];
; 594  :     VADR ptr_pl;
; 595  :     VADR pg;
; 596  : 
; 597  :     ECPSVM_PROLOG(LCKPG);

  00023	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR inst$[rsp]
  0002b	48 83 c0 02	 add	 rax, 2
  0002f	48 8b c8	 mov	 rcx, rax
  00032	e8 00 00 00 00	 call	 fetch_fw_noswap
  00037	8b c8		 mov	 ecx, eax
  00039	e8 00 00 00 00	 call	 _byteswap_ulong
  0003e	89 44 24 48	 mov	 DWORD PTR temp$1[rsp], eax
  00042	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00046	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0004b	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
  0004f	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00053	c1 e8 0c	 shr	 eax, 12
  00056	83 e0 0f	 and	 eax, 15
  00059	89 44 24 50	 mov	 DWORD PTR b2$[rsp], eax
  0005d	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00061	c1 e8 10	 shr	 eax, 16
  00064	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00069	89 44 24 40	 mov	 DWORD PTR effective_addr1$[rsp], eax
  0006d	8b 44 24 48	 mov	 eax, DWORD PTR temp$1[rsp]
  00071	c1 e8 1c	 shr	 eax, 28
  00074	83 e0 0f	 and	 eax, 15
  00077	89 44 24 4c	 mov	 DWORD PTR b1$[rsp], eax
  0007b	83 7c 24 4c 00	 cmp	 DWORD PTR b1$[rsp], 0
  00080	74 2d		 je	 SHORT $LN11@s370_ecpsv
  00082	48 63 44 24 4c	 movsxd	 rax, DWORD PTR b1$[rsp]
  00087	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0008f	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00096	8b 4c 24 40	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0009a	03 c8		 add	 ecx, eax
  0009c	8b c1		 mov	 eax, ecx
  0009e	89 44 24 40	 mov	 DWORD PTR effective_addr1$[rsp], eax
  000a2	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  000a6	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000ab	89 44 24 40	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN11@s370_ecpsv:
  000af	83 7c 24 50 00	 cmp	 DWORD PTR b2$[rsp], 0
  000b4	74 2d		 je	 SHORT $LN12@s370_ecpsv
  000b6	48 63 44 24 50	 movsxd	 rax, DWORD PTR b2$[rsp]
  000bb	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000c3	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000ca	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000ce	03 c8		 add	 ecx, eax
  000d0	8b c1		 mov	 eax, ecx
  000d2	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000d6	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000da	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000df	89 44 24 44	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN12@s370_ecpsv:
$LN4@s370_ecpsv:
  000e3	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  000eb	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ef	48 83 c0 06	 add	 rax, 6
  000f3	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  000fb	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000ff	33 c0		 xor	 eax, eax
  00101	83 f8 06	 cmp	 eax, 6
  00104	74 0f		 je	 SHORT $LN13@s370_ecpsv
  00106	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0010e	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN13@s370_ecpsv:
  00115	33 c0		 xor	 eax, eax
  00117	85 c0		 test	 eax, eax
  00119	75 c8		 jne	 SHORT $LN4@s370_ecpsv
  0011b	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00123	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00127	83 e0 01	 and	 eax, 1
  0012a	85 c0		 test	 eax, eax
  0012c	74 1b		 je	 SHORT $LN14@s370_ecpsv
  0012e	ba 02 00 00 00	 mov	 edx, 2
  00133	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0013b	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00143	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN14@s370_ecpsv:
$LN7@s370_ecpsv:
  00149	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00151	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00157	d1 e8		 shr	 eax, 1
  00159	83 e0 01	 and	 eax, 1
  0015c	85 c0		 test	 eax, eax
  0015e	74 1b		 je	 SHORT $LN15@s370_ecpsv
  00160	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00168	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  0016e	ba fc ff ff ff	 mov	 edx, -4
  00173	48 8b c8	 mov	 rcx, rax
  00176	e8 00 00 00 00	 call	 longjmp
$LN15@s370_ecpsv:
  0017b	33 c0		 xor	 eax, eax
  0017d	85 c0		 test	 eax, eax
  0017f	75 c8		 jne	 SHORT $LN7@s370_ecpsv
  00181	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00188	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  0018e	c1 e8 11	 shr	 eax, 17
  00191	83 e0 01	 and	 eax, 1
  00194	85 c0		 test	 eax, eax
  00196	75 75		 jne	 SHORT $LN16@s370_ecpsv
  00198	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+88
  0019e	c1 e8 02	 shr	 eax, 2
  001a1	83 e0 01	 and	 eax, 1
  001a4	85 c0		 test	 eax, eax
  001a6	74 53		 je	 SHORT $LN17@s370_ecpsv
  001a8	b9 01 00 00 00	 mov	 ecx, 1
  001ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169839
  001ba	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169840
  001c6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169841
  001d2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001d7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001dc	41 b9 03 00 00
	00		 mov	 r9d, 3
  001e2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169842
  001e9	ba 55 02 00 00	 mov	 edx, 597		; 00000255H
  001ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169843
  001f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@s370_ecpsv:
  001fb	ba 01 00 00 00	 mov	 edx, 1
  00200	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00208	e8 00 00 00 00	 call	 s370_program_interrupt
$LN16@s370_ecpsv:
  0020d	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00215	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  00219	83 e0 01	 and	 eax, 1
  0021c	85 c0		 test	 eax, eax
  0021e	74 1b		 je	 SHORT $LN18@s370_ecpsv
  00220	ba 02 00 00 00	 mov	 edx, 2
  00225	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0022d	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00235	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN18@s370_ecpsv:
  0023b	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+88
  00241	d1 e8		 shr	 eax, 1
  00243	83 e0 01	 and	 eax, 1
  00246	85 c0		 test	 eax, eax
  00248	75 68		 jne	 SHORT $LN19@s370_ecpsv
  0024a	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+88
  00250	c1 e8 02	 shr	 eax, 2
  00253	83 e0 01	 and	 eax, 1
  00256	85 c0		 test	 eax, eax
  00258	74 53		 je	 SHORT $LN20@s370_ecpsv
  0025a	b9 01 00 00 00	 mov	 ecx, 1
  0025f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00265	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169847
  0026c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00271	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169848
  00278	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0027d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169849
  00284	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00289	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0028e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00294	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169850
  0029b	ba 55 02 00 00	 mov	 edx, 597		; 00000255H
  002a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169851
  002a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN20@s370_ecpsv:
  002ad	e9 2b 02 00 00	 jmp	 $LN1@s370_ecpsv
$LN19@s370_ecpsv:
  002b2	b8 08 00 00 00	 mov	 eax, 8
  002b7	48 6b c0 07	 imul	 rax, rax, 7
  002bb	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  002c3	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  002ca	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  002cf	85 c0		 test	 eax, eax
  002d1	75 05		 jne	 SHORT $LN21@s370_ecpsv
  002d3	e9 05 02 00 00	 jmp	 $LN1@s370_ecpsv
$LN21@s370_ecpsv:
  002d8	48 8b 05 48 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+72
  002df	48 ff c0	 inc	 rax
  002e2	48 89 05 48 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+72, rax
  002e9	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+88
  002ef	c1 e8 02	 shr	 eax, 2
  002f2	83 e0 01	 and	 eax, 1
  002f5	85 c0		 test	 eax, eax
  002f7	74 53		 je	 SHORT $LN22@s370_ecpsv
  002f9	b9 01 00 00 00	 mov	 ecx, 1
  002fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00304	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169854
  0030b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00310	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169855
  00317	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0031c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169856
  00323	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00328	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0032d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00333	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169857
  0033a	ba 55 02 00 00	 mov	 edx, 597		; 00000255H
  0033f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169858
  00346	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN22@s370_ecpsv:

; 598  : 
; 599  :     ptr_pl=effective_addr1;

  0034c	8b 44 24 40	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  00350	89 44 24 58	 mov	 DWORD PTR ptr_pl$[rsp], eax

; 600  :     pg=effective_addr2;

  00354	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  00358	89 44 24 54	 mov	 DWORD PTR pg$[rsp], eax

; 601  : 
; 602  :     DEBUG_CPASSISTX(LCKPG,MSGBUF(buf, "LKPG PAGE=%6.6X, PTRPL=%6.6X",pg,ptr_pl));

  0035c	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+88
  00362	c1 e8 02	 shr	 eax, 2
  00365	83 e0 01	 and	 eax, 1
  00368	85 c0		 test	 eax, eax
  0036a	74 24		 je	 SHORT $LN23@s370_ecpsv
  0036c	8b 44 24 58	 mov	 eax, DWORD PTR ptr_pl$[rsp]
  00370	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00374	44 8b 4c 24 54	 mov	 r9d, DWORD PTR pg$[rsp]
  00379	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169860
  00380	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00385	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  0038a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN23@s370_ecpsv:

; 603  :     DEBUG_CPASSISTX(LCKPG,WRMSG(HHC90000, "D", buf));

  00390	8b 05 58 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+88
  00396	c1 e8 02	 shr	 eax, 2
  00399	83 e0 01	 and	 eax, 1
  0039c	85 c0		 test	 eax, eax
  0039e	74 51		 je	 SHORT $LN24@s370_ecpsv
  003a0	b9 01 00 00 00	 mov	 ecx, 1
  003a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003ab	48 8d 4c 24 60	 lea	 rcx, QWORD PTR buf$[rsp]
  003b0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169862
  003bc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169863
  003c8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003cd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003d2	41 b9 03 00 00
	00		 mov	 r9d, 3
  003d8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169864
  003df	ba 5b 02 00 00	 mov	 edx, 603		; 0000025bH
  003e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169865
  003eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN24@s370_ecpsv:

; 604  : 
; 605  :     ecpsvm_lockpage1(regs,ptr_pl,pg);

  003f1	8b 44 24 54	 mov	 eax, DWORD PTR pg$[rsp]
  003f5	8b 4c 24 58	 mov	 ecx, DWORD PTR ptr_pl$[rsp]
  003f9	44 8b c0	 mov	 r8d, eax
  003fc	8b d1		 mov	 edx, ecx
  003fe	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00406	e8 00 00 00 00	 call	 ecpsvm_lockpage1

; 606  :     regs->psw.cc=0;

  0040b	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  00413	c6 40 7c 00	 mov	 BYTE PTR [rax+124], 0
$LN10@s370_ecpsv:

; 607  :     BR14;

  00417	b8 08 00 00 00	 mov	 eax, 8
  0041c	48 6b c0 0e	 imul	 rax, rax, 14
  00420	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00428	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0042f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00434	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0043c	89 81 88 00 00
	00		 mov	 DWORD PTR [rcx+136], eax
  00442	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0044a	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  00452	74 6e		 je	 SHORT $LN25@s370_ecpsv
  00454	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0045c	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00462	25 01 f8 ff 7f	 and	 eax, 2147481601		; 7ffff801H
  00467	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  0046f	39 81 10 02 00
	00		 cmp	 DWORD PTR [rcx+528], eax
  00475	75 38		 jne	 SHORT $LN26@s370_ecpsv
  00477	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  0047f	8b 80 88 00 00
	00		 mov	 eax, DWORD PTR [rax+136]
  00485	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0048a	8b c0		 mov	 eax, eax
  0048c	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  00494	48 8b 89 00 02
	00 00		 mov	 rcx, QWORD PTR [rcx+512]
  0049b	48 0b c8	 or	 rcx, rax
  0049e	48 8b c1	 mov	 rax, rcx
  004a1	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR regs$[rsp]
  004a9	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  004ad	eb 13		 jmp	 SHORT $LN27@s370_ecpsv
$LN26@s370_ecpsv:
  004af	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR regs$[rsp]
  004b7	48 c7 80 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+520], 0
$LN27@s370_ecpsv:
$LN25@s370_ecpsv:
  004c2	33 c0		 xor	 eax, eax
  004c4	85 c0		 test	 eax, eax
  004c6	0f 85 4b ff ff
	ff		 jne	 $LN10@s370_ecpsv

; 608  :     CPASSIST_HIT(LCKPG);

  004cc	48 8b 05 50 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+80
  004d3	48 ff c0	 inc	 rax
  004d6	48 89 05 50 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+80, rax
$LN1@s370_ecpsv:
$LN28@s370_ecpsv:

; 609  :     return;
; 610  : }

  004dd	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  004e5	48 33 cc	 xor	 rcx, rsp
  004e8	e8 00 00 00 00	 call	 __security_check_cookie
  004ed	48 81 c4 78 01
	00 00		 add	 rsp, 376		; 00000178H
  004f4	c3		 ret	 0
s370_ecpsvm_lock_page ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
temp$1 = 64
effective_addr1$ = 68
effective_addr2$ = 72
b1$ = 76
b2$ = 80
inst$ = 112
regs$ = 120
s370_ecpsvm_basic_fretx PROC

; 547  : {

$LN21:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 548  :     ECPSVM_PROLOG(FRET);

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR inst$[rsp]
  00013	48 83 c0 02	 add	 rax, 2
  00017	48 8b c8	 mov	 rcx, rax
  0001a	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001f	8b c8		 mov	 ecx, eax
  00021	e8 00 00 00 00	 call	 _byteswap_ulong
  00026	89 44 24 40	 mov	 DWORD PTR temp$1[rsp], eax
  0002a	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  0002e	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00033	89 44 24 48	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00037	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  0003b	c1 e8 0c	 shr	 eax, 12
  0003e	83 e0 0f	 and	 eax, 15
  00041	89 44 24 50	 mov	 DWORD PTR b2$[rsp], eax
  00045	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  00049	c1 e8 10	 shr	 eax, 16
  0004c	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00051	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00055	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  00059	c1 e8 1c	 shr	 eax, 28
  0005c	83 e0 0f	 and	 eax, 15
  0005f	89 44 24 4c	 mov	 DWORD PTR b1$[rsp], eax
  00063	83 7c 24 4c 00	 cmp	 DWORD PTR b1$[rsp], 0
  00068	74 2a		 je	 SHORT $LN8@s370_ecpsv
  0006a	48 63 44 24 4c	 movsxd	 rax, DWORD PTR b1$[rsp]
  0006f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00074	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007b	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0007f	03 c8		 add	 ecx, eax
  00081	8b c1		 mov	 eax, ecx
  00083	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00087	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0008b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00090	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN8@s370_ecpsv:
  00094	83 7c 24 50 00	 cmp	 DWORD PTR b2$[rsp], 0
  00099	74 2a		 je	 SHORT $LN9@s370_ecpsv
  0009b	48 63 44 24 50	 movsxd	 rax, DWORD PTR b2$[rsp]
  000a0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a5	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000ac	8b 4c 24 48	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000b0	03 c8		 add	 ecx, eax
  000b2	8b c1		 mov	 eax, ecx
  000b4	89 44 24 48	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000b8	8b 44 24 48	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000bc	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000c1	89 44 24 48	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN9@s370_ecpsv:
$LN4@s370_ecpsv:
  000c5	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000ca	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ce	48 83 c0 06	 add	 rax, 6
  000d2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000d7	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000db	33 c0		 xor	 eax, eax
  000dd	83 f8 06	 cmp	 eax, 6
  000e0	74 0c		 je	 SHORT $LN10@s370_ecpsv
  000e2	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000e7	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN10@s370_ecpsv:
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	75 d1		 jne	 SHORT $LN4@s370_ecpsv
  000f4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000f9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  000fd	83 e0 01	 and	 eax, 1
  00100	85 c0		 test	 eax, eax
  00102	74 15		 je	 SHORT $LN11@s370_ecpsv
  00104	ba 02 00 00 00	 mov	 edx, 2
  00109	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0010e	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00113	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN11@s370_ecpsv:
$LN7@s370_ecpsv:
  00119	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0011e	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00124	d1 e8		 shr	 eax, 1
  00126	83 e0 01	 and	 eax, 1
  00129	85 c0		 test	 eax, eax
  0012b	74 18		 je	 SHORT $LN12@s370_ecpsv
  0012d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00132	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00138	ba fc ff ff ff	 mov	 edx, -4
  0013d	48 8b c8	 mov	 rcx, rax
  00140	e8 00 00 00 00	 call	 longjmp
$LN12@s370_ecpsv:
  00145	33 c0		 xor	 eax, eax
  00147	85 c0		 test	 eax, eax
  00149	75 ce		 jne	 SHORT $LN7@s370_ecpsv
  0014b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00152	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00158	c1 e8 11	 shr	 eax, 17
  0015b	83 e0 01	 and	 eax, 1
  0015e	85 c0		 test	 eax, eax
  00160	75 72		 jne	 SHORT $LN13@s370_ecpsv
  00162	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+56
  00168	c1 e8 02	 shr	 eax, 2
  0016b	83 e0 01	 and	 eax, 1
  0016e	85 c0		 test	 eax, eax
  00170	74 53		 je	 SHORT $LN14@s370_ecpsv
  00172	b9 01 00 00 00	 mov	 ecx, 1
  00177	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169747
  00184	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169748
  00190	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169749
  0019c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001a1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a6	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169750
  001b3	ba 24 02 00 00	 mov	 edx, 548		; 00000224H
  001b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169751
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN14@s370_ecpsv:
  001c5	ba 01 00 00 00	 mov	 edx, 1
  001ca	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001cf	e8 00 00 00 00	 call	 s370_program_interrupt
$LN13@s370_ecpsv:
  001d4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001d9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  001dd	83 e0 01	 and	 eax, 1
  001e0	85 c0		 test	 eax, eax
  001e2	74 15		 je	 SHORT $LN15@s370_ecpsv
  001e4	ba 02 00 00 00	 mov	 edx, 2
  001e9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001ee	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001f3	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN15@s370_ecpsv:
  001f9	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+56
  001ff	d1 e8		 shr	 eax, 1
  00201	83 e0 01	 and	 eax, 1
  00204	85 c0		 test	 eax, eax
  00206	75 68		 jne	 SHORT $LN16@s370_ecpsv
  00208	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+56
  0020e	c1 e8 02	 shr	 eax, 2
  00211	83 e0 01	 and	 eax, 1
  00214	85 c0		 test	 eax, eax
  00216	74 53		 je	 SHORT $LN17@s370_ecpsv
  00218	b9 01 00 00 00	 mov	 ecx, 1
  0021d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00223	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169755
  0022a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169756
  00236	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169757
  00242	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00247	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00252	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169758
  00259	ba 24 02 00 00	 mov	 edx, 548		; 00000224H
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169759
  00265	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@s370_ecpsv:
  0026b	e9 94 00 00 00	 jmp	 $LN1@s370_ecpsv
$LN16@s370_ecpsv:
  00270	b8 08 00 00 00	 mov	 eax, 8
  00275	48 6b c0 07	 imul	 rax, rax, 7
  00279	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0027e	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00285	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0028a	85 c0		 test	 eax, eax
  0028c	75 02		 jne	 SHORT $LN18@s370_ecpsv
  0028e	eb 74		 jmp	 SHORT $LN1@s370_ecpsv
$LN18@s370_ecpsv:
  00290	48 8b 05 28 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+40
  00297	48 ff c0	 inc	 rax
  0029a	48 89 05 28 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+40, rax
  002a1	8b 05 38 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+56
  002a7	c1 e8 02	 shr	 eax, 2
  002aa	83 e0 01	 and	 eax, 1
  002ad	85 c0		 test	 eax, eax
  002af	74 53		 je	 SHORT $LN19@s370_ecpsv
  002b1	b9 01 00 00 00	 mov	 ecx, 1
  002b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169762
  002c3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169763
  002cf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169764
  002db	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e5	41 b9 03 00 00
	00		 mov	 r9d, 3
  002eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169765
  002f2	ba 24 02 00 00	 mov	 edx, 548		; 00000224H
  002f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169766
  002fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN19@s370_ecpsv:
$LN1@s370_ecpsv:
$LN20@s370_ecpsv:

; 549  : }

  00304	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00308	c3		 ret	 0
s370_ecpsvm_basic_fretx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ecpsvm.c
_TEXT	SEGMENT
temp$1 = 64
effective_addr1$ = 68
effective_addr2$ = 72
b1$ = 76
b2$ = 80
inst$ = 112
regs$ = 120
s370_ecpsvm_basic_freex PROC

; 535  : {

$LN21:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 536  :     ECPSVM_PROLOG(FREE);

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR inst$[rsp]
  00013	48 83 c0 02	 add	 rax, 2
  00017	48 8b c8	 mov	 rcx, rax
  0001a	e8 00 00 00 00	 call	 fetch_fw_noswap
  0001f	8b c8		 mov	 ecx, eax
  00021	e8 00 00 00 00	 call	 _byteswap_ulong
  00026	89 44 24 40	 mov	 DWORD PTR temp$1[rsp], eax
  0002a	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  0002e	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00033	89 44 24 48	 mov	 DWORD PTR effective_addr2$[rsp], eax
  00037	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  0003b	c1 e8 0c	 shr	 eax, 12
  0003e	83 e0 0f	 and	 eax, 15
  00041	89 44 24 50	 mov	 DWORD PTR b2$[rsp], eax
  00045	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  00049	c1 e8 10	 shr	 eax, 16
  0004c	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00051	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00055	8b 44 24 40	 mov	 eax, DWORD PTR temp$1[rsp]
  00059	c1 e8 1c	 shr	 eax, 28
  0005c	83 e0 0f	 and	 eax, 15
  0005f	89 44 24 4c	 mov	 DWORD PTR b1$[rsp], eax
  00063	83 7c 24 4c 00	 cmp	 DWORD PTR b1$[rsp], 0
  00068	74 2a		 je	 SHORT $LN8@s370_ecpsv
  0006a	48 63 44 24 4c	 movsxd	 rax, DWORD PTR b1$[rsp]
  0006f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00074	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0007b	8b 4c 24 44	 mov	 ecx, DWORD PTR effective_addr1$[rsp]
  0007f	03 c8		 add	 ecx, eax
  00081	8b c1		 mov	 eax, ecx
  00083	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
  00087	8b 44 24 44	 mov	 eax, DWORD PTR effective_addr1$[rsp]
  0008b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00090	89 44 24 44	 mov	 DWORD PTR effective_addr1$[rsp], eax
$LN8@s370_ecpsv:
  00094	83 7c 24 50 00	 cmp	 DWORD PTR b2$[rsp], 0
  00099	74 2a		 je	 SHORT $LN9@s370_ecpsv
  0009b	48 63 44 24 50	 movsxd	 rax, DWORD PTR b2$[rsp]
  000a0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a5	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000ac	8b 4c 24 48	 mov	 ecx, DWORD PTR effective_addr2$[rsp]
  000b0	03 c8		 add	 ecx, eax
  000b2	8b c1		 mov	 eax, ecx
  000b4	89 44 24 48	 mov	 DWORD PTR effective_addr2$[rsp], eax
  000b8	8b 44 24 48	 mov	 eax, DWORD PTR effective_addr2$[rsp]
  000bc	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  000c1	89 44 24 48	 mov	 DWORD PTR effective_addr2$[rsp], eax
$LN9@s370_ecpsv:
$LN4@s370_ecpsv:
  000c5	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000ca	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000ce	48 83 c0 06	 add	 rax, 6
  000d2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000d7	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  000db	33 c0		 xor	 eax, eax
  000dd	83 f8 06	 cmp	 eax, 6
  000e0	74 0c		 je	 SHORT $LN10@s370_ecpsv
  000e2	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000e7	c6 80 9a 00 00
	00 06		 mov	 BYTE PTR [rax+154], 6
$LN10@s370_ecpsv:
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	75 d1		 jne	 SHORT $LN4@s370_ecpsv
  000f4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  000f9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  000fd	83 e0 01	 and	 eax, 1
  00100	85 c0		 test	 eax, eax
  00102	74 15		 je	 SHORT $LN11@s370_ecpsv
  00104	ba 02 00 00 00	 mov	 edx, 2
  00109	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0010e	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00113	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN11@s370_ecpsv:
$LN7@s370_ecpsv:
  00119	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  0011e	8b 80 c8 08 00
	00		 mov	 eax, DWORD PTR [rax+2248]
  00124	d1 e8		 shr	 eax, 1
  00126	83 e0 01	 and	 eax, 1
  00129	85 c0		 test	 eax, eax
  0012b	74 18		 je	 SHORT $LN12@s370_ecpsv
  0012d	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00132	48 05 80 09 00
	00		 add	 rax, 2432		; 00000980H
  00138	ba fc ff ff ff	 mov	 edx, -4
  0013d	48 8b c8	 mov	 rcx, rax
  00140	e8 00 00 00 00	 call	 longjmp
$LN12@s370_ecpsv:
  00145	33 c0		 xor	 eax, eax
  00147	85 c0		 test	 eax, eax
  00149	75 ce		 jne	 SHORT $LN7@s370_ecpsv
  0014b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00152	8b 80 44 13 00
	00		 mov	 eax, DWORD PTR [rax+4932]
  00158	c1 e8 11	 shr	 eax, 17
  0015b	83 e0 01	 and	 eax, 1
  0015e	85 c0		 test	 eax, eax
  00160	75 72		 jne	 SHORT $LN13@s370_ecpsv
  00162	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+24
  00168	c1 e8 02	 shr	 eax, 2
  0016b	83 e0 01	 and	 eax, 1
  0016e	85 c0		 test	 eax, eax
  00170	74 53		 je	 SHORT $LN14@s370_ecpsv
  00172	b9 01 00 00 00	 mov	 ecx, 1
  00177	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169702
  00184	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169703
  00190	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169704
  0019c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001a1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a6	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169705
  001b3	ba 18 02 00 00	 mov	 edx, 536		; 00000218H
  001b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169706
  001bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN14@s370_ecpsv:
  001c5	ba 01 00 00 00	 mov	 edx, 1
  001ca	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001cf	e8 00 00 00 00	 call	 s370_program_interrupt
$LN13@s370_ecpsv:
  001d4	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001d9	0f b6 40 7a	 movzx	 eax, BYTE PTR [rax+122]
  001dd	83 e0 01	 and	 eax, 1
  001e0	85 c0		 test	 eax, eax
  001e2	74 15		 je	 SHORT $LN15@s370_ecpsv
  001e4	ba 02 00 00 00	 mov	 edx, 2
  001e9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001ee	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  001f3	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]
$LN15@s370_ecpsv:
  001f9	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+24
  001ff	d1 e8		 shr	 eax, 1
  00201	83 e0 01	 and	 eax, 1
  00204	85 c0		 test	 eax, eax
  00206	75 68		 jne	 SHORT $LN16@s370_ecpsv
  00208	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+24
  0020e	c1 e8 02	 shr	 eax, 2
  00211	83 e0 01	 and	 eax, 1
  00214	85 c0		 test	 eax, eax
  00216	74 53		 je	 SHORT $LN17@s370_ecpsv
  00218	b9 01 00 00 00	 mov	 ecx, 1
  0021d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00223	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169710
  0022a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169711
  00236	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169712
  00242	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00247	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00252	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169713
  00259	ba 18 02 00 00	 mov	 edx, 536		; 00000218H
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169714
  00265	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@s370_ecpsv:
  0026b	e9 94 00 00 00	 jmp	 $LN1@s370_ecpsv
$LN16@s370_ecpsv:
  00270	b8 08 00 00 00	 mov	 eax, 8
  00275	48 6b c0 07	 imul	 rax, rax, 7
  00279	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0027e	8b 84 01 00 06
	00 00		 mov	 eax, DWORD PTR [rcx+rax+1536]
  00285	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0028a	85 c0		 test	 eax, eax
  0028c	75 02		 jne	 SHORT $LN18@s370_ecpsv
  0028e	eb 74		 jmp	 SHORT $LN1@s370_ecpsv
$LN18@s370_ecpsv:
  00290	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR ecpsvm_cpstats+8
  00297	48 ff c0	 inc	 rax
  0029a	48 89 05 08 00
	00 00		 mov	 QWORD PTR ecpsvm_cpstats+8, rax
  002a1	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR ecpsvm_cpstats+24
  002a7	c1 e8 02	 shr	 eax, 2
  002aa	83 e0 01	 and	 eax, 1
  002ad	85 c0		 test	 eax, eax
  002af	74 53		 je	 SHORT $LN19@s370_ecpsv
  002b1	b9 01 00 00 00	 mov	 ecx, 1
  002b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169717
  002c3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169718
  002cf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169719
  002db	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e5	41 b9 03 00 00
	00		 mov	 r9d, 3
  002eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169720
  002f2	ba 18 02 00 00	 mov	 edx, 536		; 00000218H
  002f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169721
  002fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN19@s370_ecpsv:
$LN1@s370_ecpsv:
$LN20@s370_ecpsv:

; 537  : }

  00304	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00308	c3		 ret	 0
s370_ecpsvm_basic_freex ENDP
_TEXT	ENDS
END
