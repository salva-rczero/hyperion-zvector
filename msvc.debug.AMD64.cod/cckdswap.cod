; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
VOL1_KEYA DB	056H
	DB	04fH
	DB	04cH
	DB	031H
VOL1_KEY DB	0e5H
	DB	0d6H
	DB	0d3H
	DB	0f1H
IPL1_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f1H
IPL2_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f2H
iplpsw	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
iplccw1	DB	06H
	DB	00H
	DB	03aH
	DB	098H
	DB	060H
	DB	00H
	DB	00H
	DB	060H
iplccw2	DB	08H
	DB	00H
	DB	03aH
	DB	098H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
noiplpsw DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
noiplccw1 DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
noiplccw2 DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
ipl2data DB	07H
	DB	00H
	DB	03aH
	DB	0b8H
	DB	040H
	DB	00H
	DB	00H
	DB	06H
	DB	031H
	DB	00H
	DB	03aH
	DB	0beH
	DB	040H
	DB	00H
	DB	00H
	DB	05H
	DB	08H
	DB	00H
	DB	03aH
	DB	0a0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	00H
	DB	07fH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
CONST	ENDS
PUBLIC	syntax
PUBLIC	main
EXTRN	__imp__errno:PROC
EXTRN	__imp__lseeki64:PROC
EXTRN	__imp_close:PROC
EXTRN	__imp_read:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_initialize_utility:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_w32_hopen:PROC
EXTRN	__imp_cckd_swapend:PROC
EXTRN	__imp_cckd_chkdsk:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_is_dh_devid_typ:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
pdata	SEGMENT
$pdata$syntax DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$syntax
$pdata$main DD	imagerel $LN82
	DD	imagerel $LN82+3827
	DD	imagerel $unwind$main
pdata	ENDS
_DATA	SEGMENT
$SG159626 DB	'Swap ''endianness'' of a CCKD file', 00H
	ORG $+7
$SG159627 DB	'cckdswap', 00H
	ORG $+3
$SG159640 DB	'open()', 00H
	ORG $+1
$SG159641 DB	'E', 00H
	ORG $+2
$SG159642 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG159643 DB	'main', 00H
	ORG $+3
$SG159647 DB	'read()', 00H
	ORG $+1
$SG159648 DB	'E', 00H
	ORG $+2
$SG159644 DB	'cckdswap.c', 00H
	ORG $+1
$SG159653 DB	'E', 00H
	ORG $+2
$SG159646 DB	'incomplete', 00H
	ORG $+5
$SG159649 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG159650 DB	'main', 00H
	ORG $+3
$SG159659 DB	'read()', 00H
	ORG $+1
$SG159660 DB	'E', 00H
	ORG $+2
$SG159651 DB	'cckdswap.c', 00H
	ORG $+1
$SG159665 DB	'E', 00H
	ORG $+2
$SG159654 DB	'HHC00356%s %1d:%04X CCKD file %s: not a compressed dasd '
	DB	'file', 0aH, 00H
	ORG $+2
$SG159655 DB	'main', 00H
	ORG $+3
$SG159656 DB	'cckdswap.c', 00H
	ORG $+1
$SG159670 DB	'E', 00H
	ORG $+2
$SG159658 DB	'incomplete', 00H
	ORG $+5
$SG159661 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG159662 DB	'main', 00H
	ORG $+3
$SG159676 DB	'E', 00H
	ORG $+2
$SG159663 DB	'cckdswap.c', 00H
	ORG $+1
$SG159683 DB	'E', 00H
	ORG $+2
$SG159666 DB	'HHC00352%s %1d:%04X CCKD file %s: opened bit is on, use '
	DB	'-f', 0aH, 00H
$SG159667 DB	'main', 00H
	ORG $+3
$SG159682 DB	'read()', 00H
	ORG $+1
$SG159690 DB	'I', 00H
	ORG $+2
$SG159668 DB	'cckdswap.c', 00H
	ORG $+1
$SG159695 DB	'E', 00H
	ORG $+2
$SG159671 DB	'HHC00353%s %1d:%04X CCKD file %s: check disk errors', 0aH
	DB	00H
	ORG $+3
$SG159672 DB	'main', 00H
	ORG $+3
$SG159673 DB	'cckdswap.c', 00H
	ORG $+1
$SG159702 DB	'I', 00H
	ORG $+2
$SG159675 DB	'lseek()', 00H
$SG159678 DB	'main', 00H
	ORG $+3
$SG159677 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG159704 DB	'syntax', 00H
	ORG $+5
$SG159679 DB	'cckdswap.c', 00H
	ORG $+5
$SG159681 DB	'incomplete', 00H
	ORG $+5
$SG159684 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG159685 DB	'main', 00H
	ORG $+7
$SG159686 DB	'cckdswap.c', 00H
	ORG $+5
$SG159688 DB	'little-endian', 00H
	ORG $+2
$SG159689 DB	'big-endian', 00H
	ORG $+5
$SG159691 DB	'HHC00357%s %1d:%04X CCKD file %s: converting to %s', 0aH
	DB	00H
$SG159692 DB	'main', 00H
	ORG $+7
$SG159693 DB	'cckdswap.c', 00H
	ORG $+5
$SG159696 DB	'HHC00378%s %1d:%04X CCKD file %s: error during swap', 0aH
	DB	00H
	ORG $+3
$SG159697 DB	'main', 00H
	ORG $+3
$SG159698 DB	'cckdswap.c', 00H
	ORG $+5
$SG159703 DB	'HHC02495%s Usage: %s [-f] [-n] file1 [file2 ...]', 0aH, 'H'
	DB	'HC02495I   file    name of CCKD file', 0aH, 'HHC02495I Option'
	DB	's:', 0aH, 'HHC02495I   -f      force check even if OPENED bit'
	DB	' is on', 0aH, 'HHC02495I   -0      minimal checking (default)'
	DB	0aH, 'HHC02495I   -1      normal  checking', 0aH, 'HHC02495I  '
	DB	' -2      intermediate checking', 0aH, 'HHC02495I   -3      ma'
	DB	'ximal checking', 0aH, 00H
	ORG $+1
$SG159705 DB	'cckdswap.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main
	DD	021H
	DD	0e87H
voltbl	ENDS
xdata	SEGMENT
$unwind$syntax DD 010901H
	DD	08209H
$unwind$main DD	032919H
	DD	04240117H
	DD	0700aH
	DD	imagerel __GSHandlerCheck
	DD	02110H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdswap.c
_TEXT	SEGMENT
dev$ = 112
rc$ = 120
tv83 = 124
i$ = 128
tv177 = 132
tv183 = 136
tv214 = 140
tv220 = 144
tv243 = 148
tv249 = 152
tv285 = 156
tv291 = 160
force$ = 164
tv313 = 168
tv319 = 172
level$ = 176
tv343 = 180
tv349 = 184
tv379 = 188
tv385 = 192
tv450 = 196
tv456 = 200
tv482 = 204
tv488 = 208
tv507 = 212
tv513 = 216
tv162 = 220
pgm$ = 224
bigend$ = 232
tv205 = 240
tv276 = 248
tv409 = 256
tv475 = 264
tv167 = 272
tv172 = 280
tv209 = 288
tv238 = 296
tv280 = 304
tv308 = 312
tv338 = 320
tv368 = 328
tv374 = 336
tv413 = 344
tv477 = 352
tv502 = 360
cdevhdr$ = 368
devhdr$ = 880
devblk$ = 1392
__$ArrayPad$ = 8464
argc$ = 8496
argv$ = 8504
main	PROC

; 27   : {

$LN82:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	57		 push	 rdi
  0000a	b8 20 21 00 00	 mov	 eax, 8480		; 00002120H
  0000f	e8 00 00 00 00	 call	 __chkstk
  00014	48 2b e0	 sub	 rsp, rax
  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001e	48 33 c4	 xor	 rax, rsp
  00021	48 89 84 24 10
	21 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 28   : char           *pgm;                    /* less any extension (.ext) */
; 29   : CKD_DEVHDR      devhdr;                 /* CKD device header         */
; 30   : CCKD_DEVHDR     cdevhdr;                /* Compressed CKD device hdr */
; 31   : int             level = 0;              /* Chkdsk level              */

  00029	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR level$[rsp], 0

; 32   : int             force = 0;              /* 1=swap if OPENED bit on   */

  00034	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR force$[rsp], 0

; 33   : int             rc;                     /* Return code               */
; 34   : int             i;                      /* Index                     */
; 35   : int             bigend;                 /* 1=big-endian file         */
; 36   : DEVBLK          devblk;                 /* DEVBLK                    */
; 37   : DEVBLK         *dev=&devblk;            /* -> DEVBLK                 */

  0003f	48 8d 84 24 70
	05 00 00	 lea	 rax, QWORD PTR devblk$[rsp]
  00047	48 89 44 24 70	 mov	 QWORD PTR dev$[rsp], rax

; 38   : 
; 39   :     INITIALIZE_UTILITY( UTILITY_NAME, UTILITY_DESC, &pgm );

  0004c	48 8d 84 24 e0
	00 00 00	 lea	 rax, QWORD PTR pgm$[rsp]
  00054	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00059	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159626
  00060	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159627
  00067	48 8b 94 24 38
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006f	8b 8c 24 30 21
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_initialize_utility
  0007c	89 84 24 30 21
	00 00		 mov	 DWORD PTR argc$[rsp], eax

; 40   : 
; 41   :     /* parse the arguments */
; 42   :     for (argc--, argv++ ; argc > 0 ; argc--, argv++)

  00083	8b 84 24 30 21
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  0008a	ff c8		 dec	 eax
  0008c	89 84 24 30 21
	00 00		 mov	 DWORD PTR argc$[rsp], eax
  00093	48 8b 84 24 38
	21 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0009b	48 83 c0 08	 add	 rax, 8
  0009f	48 89 84 24 38
	21 00 00	 mov	 QWORD PTR argv$[rsp], rax
  000a7	eb 24		 jmp	 SHORT $LN4@main
$LN2@main:
  000a9	8b 84 24 30 21
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  000b0	ff c8		 dec	 eax
  000b2	89 84 24 30 21
	00 00		 mov	 DWORD PTR argc$[rsp], eax
  000b9	48 8b 84 24 38
	21 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000c1	48 83 c0 08	 add	 rax, 8
  000c5	48 89 84 24 38
	21 00 00	 mov	 QWORD PTR argv$[rsp], rax
$LN4@main:
  000cd	83 bc 24 30 21
	00 00 00	 cmp	 DWORD PTR argc$[rsp], 0
  000d5	0f 8e 36 01 00
	00		 jle	 $LN3@main

; 43   :     {
; 44   :         if(**argv != '-') break;

  000db	48 8b 84 24 38
	21 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000e3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e6	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000e9	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  000ec	74 05		 je	 SHORT $LN10@main
  000ee	e9 1e 01 00 00	 jmp	 $LN3@main
$LN10@main:

; 45   : 
; 46   :         switch(argv[0][1])

  000f3	b8 08 00 00 00	 mov	 eax, 8
  000f8	48 6b c0 00	 imul	 rax, rax, 0
  000fc	b9 01 00 00 00	 mov	 ecx, 1
  00101	48 6b c9 01	 imul	 rcx, rcx, 1
  00105	48 8b 94 24 38
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0010d	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00111	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  00115	89 44 24 7c	 mov	 DWORD PTR tv83[rsp], eax
  00119	8b 44 24 7c	 mov	 eax, DWORD PTR tv83[rsp]
  0011d	83 e8 30	 sub	 eax, 48			; 00000030H
  00120	89 44 24 7c	 mov	 DWORD PTR tv83[rsp], eax
  00124	83 7c 24 7c 36	 cmp	 DWORD PTR tv83[rsp], 54	; 00000036H
  00129	0f 87 cb 00 00
	00		 ja	 $LN19@main
  0012f	48 63 44 24 7c	 movsxd	 rax, DWORD PTR tv83[rsp]
  00134	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0013b	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN80@main[rcx+rax]
  00143	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN81@main[rcx+rax*4]
  0014a	48 03 c1	 add	 rax, rcx
  0014d	ff e0		 jmp	 rax
$LN11@main:
$LN12@main:
$LN13@main:
$LN14@main:
$LN15@main:

; 47   :         {
; 48   :             case '0':
; 49   :             case '1':
; 50   :             case '2':
; 51   :             case '3':
; 52   :             case '4':  if (argv[0][2] != '\0') return syntax( pgm );

  0014f	b8 08 00 00 00	 mov	 eax, 8
  00154	48 6b c0 00	 imul	 rax, rax, 0
  00158	b9 01 00 00 00	 mov	 ecx, 1
  0015d	48 6b c9 02	 imul	 rcx, rcx, 2
  00161	48 8b 94 24 38
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00169	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0016d	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  00171	85 c0		 test	 eax, eax
  00173	74 12		 je	 SHORT $LN16@main
  00175	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  0017d	e8 00 00 00 00	 call	 syntax
  00182	e9 00 0d 00 00	 jmp	 $LN1@main
$LN16@main:

; 53   :                        level = (argv[0][1] & 0xf);

  00187	b8 08 00 00 00	 mov	 eax, 8
  0018c	48 6b c0 00	 imul	 rax, rax, 0
  00190	b9 01 00 00 00	 mov	 ecx, 1
  00195	48 6b c9 01	 imul	 rcx, rcx, 1
  00199	48 8b 94 24 38
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  001a1	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  001a5	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  001a9	83 e0 0f	 and	 eax, 15
  001ac	89 84 24 b0 00
	00 00		 mov	 DWORD PTR level$[rsp], eax

; 54   :                        break;

  001b3	eb 57		 jmp	 SHORT $LN5@main
$LN17@main:

; 55   :             case 'f':  if (argv[0][2] != '\0') return syntax( pgm );

  001b5	b8 08 00 00 00	 mov	 eax, 8
  001ba	48 6b c0 00	 imul	 rax, rax, 0
  001be	b9 01 00 00 00	 mov	 ecx, 1
  001c3	48 6b c9 02	 imul	 rcx, rcx, 2
  001c7	48 8b 94 24 38
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  001cf	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  001d3	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  001d7	85 c0		 test	 eax, eax
  001d9	74 12		 je	 SHORT $LN18@main
  001db	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  001e3	e8 00 00 00 00	 call	 syntax
  001e8	e9 9a 0c 00 00	 jmp	 $LN1@main
$LN18@main:

; 56   :                        force = 1;

  001ed	c7 84 24 a4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR force$[rsp], 1

; 57   :                        break;

  001f8	eb 12		 jmp	 SHORT $LN5@main
$LN19@main:

; 58   :             default:   return syntax( pgm );

  001fa	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  00202	e8 00 00 00 00	 call	 syntax
  00207	e9 7b 0c 00 00	 jmp	 $LN1@main
$LN5@main:

; 59   :         }
; 60   :     }

  0020c	e9 98 fe ff ff	 jmp	 $LN2@main
$LN3@main:

; 61   : 
; 62   :     if (argc < 1) return syntax( pgm );

  00211	83 bc 24 30 21
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00219	7d 12		 jge	 SHORT $LN20@main
  0021b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  00223	e8 00 00 00 00	 call	 syntax
  00228	e9 5a 0c 00 00	 jmp	 $LN1@main
$LN20@main:

; 63   : 
; 64   :     for (i=0; i < argc; i++)

  0022d	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  00238	eb 10		 jmp	 SHORT $LN9@main
$LN7@main:
  0023a	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  00241	ff c0		 inc	 eax
  00243	89 84 24 80 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN9@main:
  0024a	8b 84 24 30 21
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  00251	39 84 24 80 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  00258	0f 8d 27 0c 00
	00		 jge	 $LN8@main

; 65   :     {
; 66   :         memset( dev, 0, sizeof( DEVBLK ));

  0025e	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dev$[rsp]
  00263	33 c0		 xor	 eax, eax
  00265	b9 a0 1b 00 00	 mov	 ecx, 7072		; 00001ba0H
  0026a	f3 aa		 rep stosb

; 67   :         dev->batch = 1;

  0026c	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00271	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00277	0f ba e8 0a	 bts	 eax, 10
  0027b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00280	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 68   : 
; 69   :         /* open the input file */
; 70   :         hostpath( dev->filename, argv[i], sizeof( dev->filename ));

  00286	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0028e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00293	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0029a	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  002a0	48 8b 94 24 38
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  002a8	48 8b 14 c2	 mov	 rdx, QWORD PTR [rdx+rax*8]
  002ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 71   : 
; 72   :         if ((dev->fd = HOPEN( dev->filename, O_RDWR | O_BINARY )) < 0)

  002b2	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  002b7	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  002bd	ba 02 80 00 00	 mov	 edx, 32770		; 00008002H
  002c2	48 8b c8	 mov	 rcx, rax
  002c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  002cb	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv162[rsp], eax
  002d2	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  002d7	8b 8c 24 dc 00
	00 00		 mov	 ecx, DWORD PTR tv162[rsp]
  002de	89 88 ac 01 00
	00		 mov	 DWORD PTR [rax+428], ecx
  002e4	83 bc 24 dc 00
	00 00 00	 cmp	 DWORD PTR tv162[rsp], 0
  002ec	0f 8d fe 00 00
	00		 jge	 $LN21@main

; 73   :         {
; 74   :             // "%1d:%04X CCKD file %s: error in function %s: %s"
; 75   :             FWRMSG( stderr, HHC00354, "E", LCSS_DEVNUM,

  002f2	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  002f8	74 12		 je	 SHORT $LN32@main
  002fa	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  002ff	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00303	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv177[rsp], eax
  0030a	eb 0b		 jmp	 SHORT $LN33@main
$LN32@main:
  0030c	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv177[rsp], 0
$LN33@main:
  00317	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0031d	74 14		 je	 SHORT $LN34@main
  0031f	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00324	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00328	d1 f8		 sar	 eax, 1
  0032a	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv183[rsp], eax
  00331	eb 0b		 jmp	 SHORT $LN35@main
$LN34@main:
  00333	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv183[rsp], 0
$LN35@main:
  0033e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00344	8b 08		 mov	 ecx, DWORD PTR [rax]
  00346	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0034c	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv167[rsp], rax
  00354	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00359	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00360	48 89 8c 24 18
	01 00 00	 mov	 QWORD PTR tv172[rsp], rcx
  00368	b9 02 00 00 00	 mov	 ecx, 2
  0036d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00373	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tv167[rsp]
  0037b	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00380	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159640
  00387	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0038c	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv172[rsp]
  00394	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00399	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv177[rsp]
  003a0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  003a4	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv183[rsp]
  003ab	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159641
  003b6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159642
  003c2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003c7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003cc	41 b9 03 00 00
	00		 mov	 r9d, 3
  003d2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159643
  003d9	ba 4c 00 00 00	 mov	 edx, 76			; 0000004cH
  003de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159644
  003e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 76   :                 dev->filename, "open()", strerror( errno ));
; 77   :             continue;

  003eb	e9 4a fe ff ff	 jmp	 $LN7@main
$LN21@main:

; 78   :         }
; 79   : 
; 80   :         /* read the CKD device header */
; 81   :         if ((rc = read( dev->fd, &devhdr, CKD_DEVHDR_SIZE )) < CKD_DEVHDR_SIZE)

  003f0	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  003f6	48 8d 94 24 70
	03 00 00	 lea	 rdx, QWORD PTR devhdr$[rsp]
  003fe	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00403	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00409	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  0040f	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  00413	48 63 44 24 78	 movsxd	 rax, DWORD PTR rc$[rsp]
  00418	48 3d 00 02 00
	00		 cmp	 rax, 512		; 00000200H
  0041e	0f 8d 2f 01 00
	00		 jge	 $LN22@main

; 82   :         {
; 83   :             // "%1d:%04X CCKD file %s: error in function %s at offset 0x%16.16"PRIX64": %s"
; 84   :             FWRMSG( stderr, HHC00355, "E", LCSS_DEVNUM,

  00424	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  00429	7d 18		 jge	 SHORT $LN36@main
  0042b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00431	8b 08		 mov	 ecx, DWORD PTR [rax]
  00433	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00439	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv205[rsp], rax
  00441	eb 0f		 jmp	 SHORT $LN37@main
$LN36@main:
  00443	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159646
  0044a	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv205[rsp], rax
$LN37@main:
  00452	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00458	74 12		 je	 SHORT $LN38@main
  0045a	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0045f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00463	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv214[rsp], eax
  0046a	eb 0b		 jmp	 SHORT $LN39@main
$LN38@main:
  0046c	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv214[rsp], 0
$LN39@main:
  00477	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0047d	74 14		 je	 SHORT $LN40@main
  0047f	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00484	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00488	d1 f8		 sar	 eax, 1
  0048a	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv220[rsp], eax
  00491	eb 0b		 jmp	 SHORT $LN41@main
$LN40@main:
  00493	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv220[rsp], 0
$LN41@main:
  0049e	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  004a3	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  004a9	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv209[rsp], rax
  004b1	b9 02 00 00 00	 mov	 ecx, 2
  004b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004bc	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv205[rsp]
  004c4	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  004c9	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  004d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159647
  004d9	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  004de	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv209[rsp]
  004e6	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  004eb	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv214[rsp]
  004f2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  004f6	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv220[rsp]
  004fd	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00501	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159648
  00508	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0050d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159649
  00514	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00519	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0051e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00524	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159650
  0052b	ba 55 00 00 00	 mov	 edx, 85			; 00000055H
  00530	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159651
  00537	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 85   :                 dev->filename, "read()", (U64) 0, rc < 0 ? strerror( errno ) : "incomplete" );
; 86   :             close( dev->fd );

  0053d	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00542	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00548	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 87   :             continue;

  0054e	e9 e7 fc ff ff	 jmp	 $LN7@main
$LN22@main:

; 88   :         }
; 89   : 
; 90   :         if (!is_dh_devid_typ( devhdr.dh_devid, ANY32_CMP_OR_SF_TYP ))

  00553	ba 00 60 00 60	 mov	 edx, 1610637312		; 60006000H
  00558	48 8d 8c 24 70
	03 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp]
  00560	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_dh_devid_typ
  00566	0f b6 c0	 movzx	 eax, al
  00569	85 c0		 test	 eax, eax
  0056b	0f 85 df 00 00
	00		 jne	 $LN23@main

; 91   :         {
; 92   :             // "%1d:%04X CCKD file %s: not a compressed dasd file"
; 93   :             FWRMSG( stderr, HHC00356, "E", LCSS_DEVNUM, dev->filename );

  00571	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00577	74 12		 je	 SHORT $LN42@main
  00579	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0057e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00582	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv243[rsp], eax
  00589	eb 0b		 jmp	 SHORT $LN43@main
$LN42@main:
  0058b	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv243[rsp], 0
$LN43@main:
  00596	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0059c	74 14		 je	 SHORT $LN44@main
  0059e	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  005a3	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  005a7	d1 f8		 sar	 eax, 1
  005a9	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv249[rsp], eax
  005b0	eb 0b		 jmp	 SHORT $LN45@main
$LN44@main:
  005b2	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv249[rsp], 0
$LN45@main:
  005bd	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  005c2	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  005c8	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv238[rsp], rax
  005d0	b9 02 00 00 00	 mov	 ecx, 2
  005d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005db	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR tv238[rsp]
  005e3	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  005e8	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv243[rsp]
  005ef	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  005f3	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv249[rsp]
  005fa	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  005fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159653
  00605	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0060a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159654
  00611	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00616	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0061b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00621	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159655
  00628	ba 5d 00 00 00	 mov	 edx, 93			; 0000005dH
  0062d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159656
  00634	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 94   :             close( dev->fd );

  0063a	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0063f	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00645	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 95   :             continue;

  0064b	e9 ea fb ff ff	 jmp	 $LN7@main
$LN23@main:

; 96   :         }
; 97   : 
; 98   :         dev->cckd64 = 0;

  00650	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00655	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  0065c	24 fe		 and	 al, 254			; 000000feH
  0065e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00663	88 81 10 13 00
	00		 mov	 BYTE PTR [rcx+4880], al

; 99   : 
; 100  :         /* read the compressed CKD device header */
; 101  :         if ((rc = read (dev->fd, &cdevhdr, CCKD_DEVHDR_SIZE)) < CCKD_DEVHDR_SIZE)

  00669	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  0066f	48 8d 94 24 70
	01 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  00677	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0067c	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00682	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00688	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  0068c	48 63 44 24 78	 movsxd	 rax, DWORD PTR rc$[rsp]
  00691	48 3d 00 02 00
	00		 cmp	 rax, 512		; 00000200H
  00697	0f 8d 2f 01 00
	00		 jge	 $LN24@main

; 102  :         {
; 103  :             FWRMSG( stderr, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  0069d	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  006a2	7d 18		 jge	 SHORT $LN46@main
  006a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  006aa	8b 08		 mov	 ecx, DWORD PTR [rax]
  006ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  006b2	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv276[rsp], rax
  006ba	eb 0f		 jmp	 SHORT $LN47@main
$LN46@main:
  006bc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159658
  006c3	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv276[rsp], rax
$LN47@main:
  006cb	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  006d1	74 12		 je	 SHORT $LN48@main
  006d3	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  006d8	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  006dc	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv285[rsp], eax
  006e3	eb 0b		 jmp	 SHORT $LN49@main
$LN48@main:
  006e5	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv285[rsp], 0
$LN49@main:
  006f0	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  006f6	74 14		 je	 SHORT $LN50@main
  006f8	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  006fd	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00701	d1 f8		 sar	 eax, 1
  00703	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv291[rsp], eax
  0070a	eb 0b		 jmp	 SHORT $LN51@main
$LN50@main:
  0070c	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv291[rsp], 0
$LN51@main:
  00717	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0071c	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00722	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv280[rsp], rax
  0072a	b9 02 00 00 00	 mov	 ecx, 2
  0072f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00735	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv276[rsp]
  0073d	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00742	48 c7 44 24 58
	00 02 00 00	 mov	 QWORD PTR [rsp+88], 512	; 00000200H
  0074b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159659
  00752	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00757	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR tv280[rsp]
  0075f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00764	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv285[rsp]
  0076b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0076f	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv291[rsp]
  00776	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0077a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159660
  00781	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00786	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159661
  0078d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00792	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00797	41 b9 03 00 00
	00		 mov	 r9d, 3
  0079d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159662
  007a4	ba 68 00 00 00	 mov	 edx, 104		; 00000068H
  007a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159663
  007b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 104  :                     "read()", (U64)CCKD_DEVHDR_POS, rc < 0 ? strerror( errno ) : "incomplete" );
; 105  :             close (dev->fd);

  007b6	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  007bb	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  007c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 106  :             continue;

  007c7	e9 6e fa ff ff	 jmp	 $LN7@main
$LN24@main:

; 107  :         }
; 108  : 
; 109  :         /* Check the OPENED bit */
; 110  :         if (!force && (cdevhdr.cdh_opts & CCKD_OPT_OPENED))

  007cc	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR force$[rsp], 0
  007d4	0f 85 f4 00 00
	00		 jne	 $LN25@main
  007da	0f b6 84 24 73
	01 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  007e2	25 80 00 00 00	 and	 eax, 128		; 00000080H
  007e7	85 c0		 test	 eax, eax
  007e9	0f 84 df 00 00
	00		 je	 $LN25@main

; 111  :         {
; 112  :             // "%1d:%04X CCKD file %s: opened bit is on, use -f"
; 113  :             FWRMSG( stderr, HHC00352, "E", LCSS_DEVNUM, dev->filename );

  007ef	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  007f5	74 12		 je	 SHORT $LN52@main
  007f7	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  007fc	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00800	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv313[rsp], eax
  00807	eb 0b		 jmp	 SHORT $LN53@main
$LN52@main:
  00809	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv313[rsp], 0
$LN53@main:
  00814	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0081a	74 14		 je	 SHORT $LN54@main
  0081c	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00821	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00825	d1 f8		 sar	 eax, 1
  00827	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv319[rsp], eax
  0082e	eb 0b		 jmp	 SHORT $LN55@main
$LN54@main:
  00830	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv319[rsp], 0
$LN55@main:
  0083b	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00840	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00846	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv308[rsp], rax
  0084e	b9 02 00 00 00	 mov	 ecx, 2
  00853	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00859	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR tv308[rsp]
  00861	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00866	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv313[rsp]
  0086d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00871	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR tv319[rsp]
  00878	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0087c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159665
  00883	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00888	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159666
  0088f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00894	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00899	41 b9 03 00 00
	00		 mov	 r9d, 3
  0089f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159667
  008a6	ba 71 00 00 00	 mov	 edx, 113		; 00000071H
  008ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159668
  008b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 114  :             close (dev->fd);

  008b8	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  008bd	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  008c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 115  :             continue;

  008c9	e9 6c f9 ff ff	 jmp	 $LN7@main
$LN25@main:

; 116  :         }
; 117  : 
; 118  :         /* get the byte order of the file */
; 119  :         bigend = (cdevhdr.cdh_opts & CCKD_OPT_BIGEND);

  008ce	0f b6 84 24 73
	01 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  008d6	83 e0 02	 and	 eax, 2
  008d9	89 84 24 e8 00
	00 00		 mov	 DWORD PTR bigend$[rsp], eax

; 120  : 
; 121  :         /* call chkdsk */
; 122  :         if (cckd_chkdsk (dev, level) < 0)

  008e0	8b 94 24 b0 00
	00 00		 mov	 edx, DWORD PTR level$[rsp]
  008e7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  008ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cckd_chkdsk
  008f2	85 c0		 test	 eax, eax
  008f4	0f 8d df 00 00
	00		 jge	 $LN26@main

; 123  :         {
; 124  :             // "%1d:%04X CCKD file %s: check disk errors"
; 125  :             FWRMSG( stderr, HHC00353, "E", LCSS_DEVNUM, dev->filename );

  008fa	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00900	74 12		 je	 SHORT $LN56@main
  00902	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00907	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0090b	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv343[rsp], eax
  00912	eb 0b		 jmp	 SHORT $LN57@main
$LN56@main:
  00914	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv343[rsp], 0
$LN57@main:
  0091f	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00925	74 14		 je	 SHORT $LN58@main
  00927	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0092c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00930	d1 f8		 sar	 eax, 1
  00932	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv349[rsp], eax
  00939	eb 0b		 jmp	 SHORT $LN59@main
$LN58@main:
  0093b	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv349[rsp], 0
$LN59@main:
  00946	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0094b	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00951	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv338[rsp], rax
  00959	b9 02 00 00 00	 mov	 ecx, 2
  0095e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00964	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR tv338[rsp]
  0096c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00971	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv343[rsp]
  00978	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0097c	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR tv349[rsp]
  00983	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00987	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159670
  0098e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00993	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159671
  0099a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0099f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009a4	41 b9 03 00 00
	00		 mov	 r9d, 3
  009aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159672
  009b1	ba 7d 00 00 00	 mov	 edx, 125		; 0000007dH
  009b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159673
  009bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 126  :             close (dev->fd);

  009c3	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  009c8	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  009ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 127  :             continue;

  009d4	e9 61 f8 ff ff	 jmp	 $LN7@main
$LN26@main:

; 128  :         }
; 129  : 
; 130  :         /* re-read the compressed CKD device header */
; 131  :         if (lseek (dev->fd, CCKD_DEVHDR_POS, SEEK_SET) < 0)

  009d9	45 33 c0	 xor	 r8d, r8d
  009dc	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  009e1	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  009e6	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  009ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  009f2	48 85 c0	 test	 rax, rax
  009f5	0f 8d 18 01 00
	00		 jge	 $LN27@main

; 132  :         {
; 133  :             // "%1d:%04X CCKD file %s: error in function %s at offset 0x%16.16"PRIX64": %s"
; 134  :             FWRMSG( stderr, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  009fb	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00a01	74 12		 je	 SHORT $LN60@main
  00a03	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00a08	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00a0c	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv379[rsp], eax
  00a13	eb 0b		 jmp	 SHORT $LN61@main
$LN60@main:
  00a15	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv379[rsp], 0
$LN61@main:
  00a20	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00a26	74 14		 je	 SHORT $LN62@main
  00a28	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00a2d	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00a31	d1 f8		 sar	 eax, 1
  00a33	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv385[rsp], eax
  00a3a	eb 0b		 jmp	 SHORT $LN63@main
$LN62@main:
  00a3c	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv385[rsp], 0
$LN63@main:
  00a47	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00a4d	8b 08		 mov	 ecx, DWORD PTR [rax]
  00a4f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00a55	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv368[rsp], rax
  00a5d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00a62	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00a69	48 89 8c 24 50
	01 00 00	 mov	 QWORD PTR tv374[rsp], rcx
  00a71	b9 02 00 00 00	 mov	 ecx, 2
  00a76	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a7c	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR tv368[rsp]
  00a84	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00a89	48 c7 44 24 58
	00 02 00 00	 mov	 QWORD PTR [rsp+88], 512	; 00000200H
  00a92	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159675
  00a99	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00a9e	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR tv374[rsp]
  00aa6	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00aab	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR tv379[rsp]
  00ab2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00ab6	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR tv385[rsp]
  00abd	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00ac1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159676
  00ac8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00acd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159677
  00ad4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ad9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ade	41 b9 03 00 00
	00		 mov	 r9d, 3
  00ae4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159678
  00aeb	ba 87 00 00 00	 mov	 edx, 135		; 00000087H
  00af0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159679
  00af7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 135  :                     "lseek()", (U64)CCKD_DEVHDR_POS, strerror( errno ));
; 136  :             close (dev->fd);

  00afd	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00b02	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00b08	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 137  :             continue;

  00b0e	e9 27 f7 ff ff	 jmp	 $LN7@main
$LN27@main:

; 138  :         }
; 139  :         if ((rc = read (dev->fd, &cdevhdr, CCKD_DEVHDR_SIZE)) < CCKD_DEVHDR_SIZE)

  00b13	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  00b19	48 8d 94 24 70
	01 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  00b21	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00b26	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00b2c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00b32	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  00b36	48 63 44 24 78	 movsxd	 rax, DWORD PTR rc$[rsp]
  00b3b	48 3d 00 02 00
	00		 cmp	 rax, 512		; 00000200H
  00b41	0f 8d 2f 01 00
	00		 jge	 $LN28@main

; 140  :         {
; 141  :             // "%1d:%04X CCKD file %s: error in function %s at offset 0x%16.16"PRIX64": %s"
; 142  :             FWRMSG( stderr, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  00b47	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  00b4c	7d 18		 jge	 SHORT $LN64@main
  00b4e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00b54	8b 08		 mov	 ecx, DWORD PTR [rax]
  00b56	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00b5c	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv409[rsp], rax
  00b64	eb 0f		 jmp	 SHORT $LN65@main
$LN64@main:
  00b66	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159681
  00b6d	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv409[rsp], rax
$LN65@main:
  00b75	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00b7b	74 12		 je	 SHORT $LN66@main
  00b7d	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00b82	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00b86	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv450[rsp], eax
  00b8d	eb 0b		 jmp	 SHORT $LN67@main
$LN66@main:
  00b8f	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv450[rsp], 0
$LN67@main:
  00b9a	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00ba0	74 14		 je	 SHORT $LN68@main
  00ba2	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00ba7	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00bab	d1 f8		 sar	 eax, 1
  00bad	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv456[rsp], eax
  00bb4	eb 0b		 jmp	 SHORT $LN69@main
$LN68@main:
  00bb6	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv456[rsp], 0
$LN69@main:
  00bc1	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00bc6	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00bcc	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv413[rsp], rax
  00bd4	b9 02 00 00 00	 mov	 ecx, 2
  00bd9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00bdf	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv409[rsp]
  00be7	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00bec	48 c7 44 24 58
	00 02 00 00	 mov	 QWORD PTR [rsp+88], 512	; 00000200H
  00bf5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159682
  00bfc	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00c01	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tv413[rsp]
  00c09	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00c0e	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR tv450[rsp]
  00c15	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00c19	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR tv456[rsp]
  00c20	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00c24	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159683
  00c2b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c30	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159684
  00c37	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c3c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c41	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c47	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159685
  00c4e	ba 8f 00 00 00	 mov	 edx, 143		; 0000008fH
  00c53	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159686
  00c5a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 143  :                     "read()", (U64)CCKD_DEVHDR_POS, rc < 0 ? strerror( errno ) : "incomplete" );
; 144  :             close (dev->fd);

  00c60	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00c65	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00c6b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 145  :             continue;

  00c71	e9 c4 f5 ff ff	 jmp	 $LN7@main
$LN28@main:

; 146  :         }
; 147  : 
; 148  :         /* swap the byte order of the file if chkdsk didn't do it for us */
; 149  :         if (bigend == (cdevhdr.cdh_opts & CCKD_OPT_BIGEND))

  00c76	0f b6 84 24 73
	01 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  00c7e	83 e0 02	 and	 eax, 2
  00c81	39 84 24 e8 00
	00 00		 cmp	 DWORD PTR bigend$[rsp], eax
  00c88	0f 85 e1 01 00
	00		 jne	 $LN29@main

; 150  :         {
; 151  :             // "%1d:%04X CCKD file %s: converting to %s"
; 152  :             WRMSG( HHC00357, "I", LCSS_DEVNUM, dev->filename,

  00c8e	0f b6 84 24 73
	01 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  00c96	83 e0 02	 and	 eax, 2
  00c99	85 c0		 test	 eax, eax
  00c9b	74 11		 je	 SHORT $LN70@main
  00c9d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159688
  00ca4	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv475[rsp], rax
  00cac	eb 0f		 jmp	 SHORT $LN71@main
$LN70@main:
  00cae	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159689
  00cb5	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv475[rsp], rax
$LN71@main:
  00cbd	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00cc3	74 12		 je	 SHORT $LN72@main
  00cc5	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00cca	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00cce	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv482[rsp], eax
  00cd5	eb 0b		 jmp	 SHORT $LN73@main
$LN72@main:
  00cd7	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv482[rsp], 0
$LN73@main:
  00ce2	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00ce8	74 14		 je	 SHORT $LN74@main
  00cea	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00cef	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00cf3	d1 f8		 sar	 eax, 1
  00cf5	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv488[rsp], eax
  00cfc	eb 0b		 jmp	 SHORT $LN75@main
$LN74@main:
  00cfe	c7 84 24 d0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv488[rsp], 0
$LN75@main:
  00d09	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00d0e	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00d14	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv477[rsp], rax
  00d1c	b9 01 00 00 00	 mov	 ecx, 1
  00d21	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00d27	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv475[rsp]
  00d2f	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00d34	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR tv477[rsp]
  00d3c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00d41	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR tv482[rsp]
  00d48	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00d4c	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR tv488[rsp]
  00d53	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00d57	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159690
  00d5e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00d63	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159691
  00d6a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00d6f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d74	41 b9 03 00 00
	00		 mov	 r9d, 3
  00d7a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159692
  00d81	ba 9a 00 00 00	 mov	 edx, 154		; 0000009aH
  00d86	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159693
  00d8d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 153  :                     (cdevhdr.cdh_opts & CCKD_OPT_BIGEND) ?
; 154  :                         "little-endian" : "big-endian" );
; 155  : 
; 156  :             if (cckd_swapend (dev) < 0)

  00d93	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00d98	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cckd_swapend
  00d9e	85 c0		 test	 eax, eax
  00da0	0f 8d c9 00 00
	00		 jge	 $LN30@main

; 157  :                 // "%1d:%04X CCKD file %s: error during swap"
; 158  :                 FWRMSG( stderr, HHC00378, "E", LCSS_DEVNUM, dev->filename );

  00da6	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00dac	74 12		 je	 SHORT $LN76@main
  00dae	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00db3	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00db7	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv507[rsp], eax
  00dbe	eb 0b		 jmp	 SHORT $LN77@main
$LN76@main:
  00dc0	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv507[rsp], 0
$LN77@main:
  00dcb	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00dd1	74 14		 je	 SHORT $LN78@main
  00dd3	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00dd8	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00ddc	d1 f8		 sar	 eax, 1
  00dde	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv513[rsp], eax
  00de5	eb 0b		 jmp	 SHORT $LN79@main
$LN78@main:
  00de7	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv513[rsp], 0
$LN79@main:
  00df2	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00df7	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00dfd	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv502[rsp], rax
  00e05	b9 02 00 00 00	 mov	 ecx, 2
  00e0a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00e10	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR tv502[rsp]
  00e18	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00e1d	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR tv507[rsp]
  00e24	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00e28	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR tv513[rsp]
  00e2f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00e33	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159695
  00e3a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00e3f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159696
  00e46	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00e4b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e50	41 b9 03 00 00
	00		 mov	 r9d, 3
  00e56	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159697
  00e5d	ba 9e 00 00 00	 mov	 edx, 158		; 0000009eH
  00e62	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159698
  00e69	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN30@main:
$LN29@main:

; 159  :         }
; 160  : 
; 161  :         close (dev->fd);

  00e6f	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00e74	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00e7a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 162  : 
; 163  :     } /* for each arg */

  00e80	e9 b5 f3 ff ff	 jmp	 $LN7@main
$LN8@main:

; 164  : 
; 165  :     return 0;

  00e85	33 c0		 xor	 eax, eax
$LN1@main:

; 166  : } /* end main */

  00e87	48 8b 8c 24 10
	21 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00e8f	48 33 cc	 xor	 rcx, rsp
  00e92	e8 00 00 00 00	 call	 __security_check_cookie
  00e97	48 81 c4 20 21
	00 00		 add	 rsp, 8480		; 00002120H
  00e9e	5f		 pop	 rdi
  00e9f	c3		 ret	 0
$LN81@main:
  00ea0	00 00 00 00	 DD	 $LN11@main
  00ea4	00 00 00 00	 DD	 $LN12@main
  00ea8	00 00 00 00	 DD	 $LN13@main
  00eac	00 00 00 00	 DD	 $LN14@main
  00eb0	00 00 00 00	 DD	 $LN15@main
  00eb4	00 00 00 00	 DD	 $LN17@main
  00eb8	00 00 00 00	 DD	 $LN19@main
$LN80@main:
  00ebc	00		 DB	 0
  00ebd	01		 DB	 1
  00ebe	02		 DB	 2
  00ebf	03		 DB	 3
  00ec0	04		 DB	 4
  00ec1	06		 DB	 6
  00ec2	06		 DB	 6
  00ec3	06		 DB	 6
  00ec4	06		 DB	 6
  00ec5	06		 DB	 6
  00ec6	06		 DB	 6
  00ec7	06		 DB	 6
  00ec8	06		 DB	 6
  00ec9	06		 DB	 6
  00eca	06		 DB	 6
  00ecb	06		 DB	 6
  00ecc	06		 DB	 6
  00ecd	06		 DB	 6
  00ece	06		 DB	 6
  00ecf	06		 DB	 6
  00ed0	06		 DB	 6
  00ed1	06		 DB	 6
  00ed2	06		 DB	 6
  00ed3	06		 DB	 6
  00ed4	06		 DB	 6
  00ed5	06		 DB	 6
  00ed6	06		 DB	 6
  00ed7	06		 DB	 6
  00ed8	06		 DB	 6
  00ed9	06		 DB	 6
  00eda	06		 DB	 6
  00edb	06		 DB	 6
  00edc	06		 DB	 6
  00edd	06		 DB	 6
  00ede	06		 DB	 6
  00edf	06		 DB	 6
  00ee0	06		 DB	 6
  00ee1	06		 DB	 6
  00ee2	06		 DB	 6
  00ee3	06		 DB	 6
  00ee4	06		 DB	 6
  00ee5	06		 DB	 6
  00ee6	06		 DB	 6
  00ee7	06		 DB	 6
  00ee8	06		 DB	 6
  00ee9	06		 DB	 6
  00eea	06		 DB	 6
  00eeb	06		 DB	 6
  00eec	06		 DB	 6
  00eed	06		 DB	 6
  00eee	06		 DB	 6
  00eef	06		 DB	 6
  00ef0	06		 DB	 6
  00ef1	06		 DB	 6
  00ef2	05		 DB	 5
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdswap.c
_TEXT	SEGMENT
pgm$ = 80
syntax	PROC

; 169  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 170  :     WRMSG( HHC02495, "I", pgm );

  00009	b9 01 00 00 00	 mov	 ecx, 1
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00014	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pgm$[rsp]
  00019	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159702
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159703
  00031	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00036	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00041	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159704
  00048	ba aa 00 00 00	 mov	 edx, 170		; 000000aaH
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159705
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 171  :     return -1;

  0005a	b8 ff ff ff ff	 mov	 eax, -1

; 172  : } /* end function syntax */

  0005f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00063	c3		 ret	 0
syntax	ENDP
_TEXT	ENDS
END
