; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsnprintf_s_l
PUBLIC	_vsnprintf_s
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	TUNTAP_CreateInterface
PUBLIC	TUNTAP_SetIPAddr
PUBLIC	TUNTAP_SetDestAddr
PUBLIC	TUNTAP_SetNetMask
PUBLIC	TUNTAP_SetBCastAddr
PUBLIC	TUNTAP_SetIPAddr6
PUBLIC	TUNTAP_GetMTU
PUBLIC	TUNTAP_SetMTU
PUBLIC	TUNTAP_GetMACAddr
PUBLIC	TUNTAP_SetMACAddr
PUBLIC	TUNTAP_SetFlags
PUBLIC	TUNTAP_GetFlags
PUBLIC	TT32_AddIPAddr
PUBLIC	TT32_DelIPAddr
PUBLIC	TT32_QryIPAddrs
PUBLIC	build_herc_iface_mac
PUBLIC	ParseMAC
PUBLIC	FormatMAC
PUBLIC	packet_trace
PUBLIC	net_data_trace
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp_isxdigit:PROC
EXTRN	__imp_isprint:PROC
EXTRN	__imp__errno:PROC
EXTRN	strcpy:PROC
EXTRN	strlen:PROC
EXTRN	__imp_strncpy:PROC
EXTRN	__imp_strdup:PROC
EXTRN	__imp_IsDebuggerPresent:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_rand:PROC
EXTRN	__imp_atoi:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vsnprintf_s:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	__imp_strlcpy:PROC
EXTRN	__imp_strlcat:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_inet_aton:PROC
EXTRN	__imp_w32_if_nametoindex:PROC
EXTRN	__imp_w32_inet_pton:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_guest_to_host:PROC
EXTRN	tt32_open:PROC
EXTRN	tt32_ioctl:PROC
EXTRN	tt32_build_herc_iface_mac:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_logmsg:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$_vsnprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$_vsnprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sscanf
pdata	ENDS
pdata	SEGMENT
$pdata$DebuggerTrace DD imagerel DebuggerTrace
	DD	imagerel DebuggerTrace+247
	DD	imagerel $unwind$DebuggerTrace
$pdata$TUNTAP_CreateInterface DD imagerel $LN6
	DD	imagerel $LN6+506
	DD	imagerel $unwind$TUNTAP_CreateInterface
$pdata$TUNTAP_SetIPAddr DD imagerel $LN13
	DD	imagerel $LN13+525
	DD	imagerel $unwind$TUNTAP_SetIPAddr
$pdata$TUNTAP_SetDestAddr DD imagerel $LN13
	DD	imagerel $LN13+514
	DD	imagerel $unwind$TUNTAP_SetDestAddr
$pdata$TUNTAP_SetNetMask DD imagerel $LN13
	DD	imagerel $LN13+514
	DD	imagerel $unwind$TUNTAP_SetNetMask
$pdata$TUNTAP_SetBCastAddr DD imagerel $LN13
	DD	imagerel $LN13+514
	DD	imagerel $unwind$TUNTAP_SetBCastAddr
$pdata$TUNTAP_SetIPAddr6 DD imagerel $LN12
	DD	imagerel $LN12+839
	DD	imagerel $unwind$TUNTAP_SetIPAddr6
$pdata$TUNTAP_GetMTU DD imagerel $LN10
	DD	imagerel $LN10+654
	DD	imagerel $unwind$TUNTAP_GetMTU
$pdata$TUNTAP_SetMTU DD imagerel $LN13
	DD	imagerel $LN13+601
	DD	imagerel $unwind$TUNTAP_SetMTU
$pdata$TUNTAP_GetMACAddr DD imagerel $LN9
	DD	imagerel $LN9+591
	DD	imagerel $unwind$TUNTAP_GetMACAddr
$pdata$TUNTAP_SetMACAddr DD imagerel $LN11
	DD	imagerel $LN11+513
	DD	imagerel $unwind$TUNTAP_SetMACAddr
$pdata$TUNTAP_SetFlags DD imagerel $LN7
	DD	imagerel $LN7+284
	DD	imagerel $unwind$TUNTAP_SetFlags
$pdata$TUNTAP_GetFlags DD imagerel $LN7
	DD	imagerel $LN7+318
	DD	imagerel $unwind$TUNTAP_GetFlags
$pdata$TT32_AddIPAddr DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$TT32_AddIPAddr
$pdata$TT32_DelIPAddr DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$TT32_DelIPAddr
$pdata$TT32_QryIPAddrs DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$TT32_QryIPAddrs
$pdata$build_herc_iface_mac DD imagerel $LN19
	DD	imagerel $LN19+469
	DD	imagerel $unwind$build_herc_iface_mac
$pdata$ParseMAC DD imagerel $LN12
	DD	imagerel $LN12+402
	DD	imagerel $unwind$ParseMAC
$pdata$FormatMAC DD imagerel $LN6
	DD	imagerel $LN6+342
	DD	imagerel $unwind$FormatMAC
$pdata$packet_trace DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$packet_trace
$pdata$net_data_trace DD imagerel $LN27
	DD	imagerel $LN27+1031
	DD	imagerel $unwind$net_data_trace
$pdata$TUNTAP_SetMode DD imagerel TUNTAP_SetMode
	DD	imagerel TUNTAP_SetMode+50
	DD	imagerel $unwind$TUNTAP_SetMode
pdata	ENDS
_DATA	SEGMENT
$SG159967 DB	'E', 00H
	ORG $+6
$SG159968 DB	'HHC00137%s Error opening TUN/TAP device %s: %s', 0aH, 00H
$SG159969 DB	'TUNTAP_CreateInterface', 00H
	ORG $+1
$SG159970 DB	'tuntap.c', 00H
	ORG $+3
$SG159973 DB	'E', 00H
	ORG $+2
$SG159974 DB	'HHC00138%s Error setting TUN/TAP mode %s: %s', 0aH, 00H
	ORG $+2
$SG159975 DB	'TUNTAP_CreateInterface', 00H
	ORG $+1
$SG159976 DB	'tuntap.c', 00H
	ORG $+3
$SG159989 DB	'NULL', 00H
	ORG $+3
$SG159990 DB	'E', 00H
	ORG $+2
$SG159991 DB	'HHC00140%s Invalid net device name %s', 0aH, 00H
	ORG $+1
$SG159992 DB	'TUNTAP_SetIPAddr', 00H
	ORG $+3
$SG159997 DB	'E', 00H
	ORG $+2
$SG159993 DB	'tuntap.c', 00H
	ORG $+3
$SG159996 DB	'NULL', 00H
	ORG $+3
$SG160014 DB	'E', 00H
	ORG $+2
$SG159998 DB	'HHC00141%s Net device %s: Invalid IP %s', 0aH, 00H
	ORG $+3
$SG160021 DB	'E', 00H
	ORG $+2
$SG159999 DB	'TUNTAP_SetIPAddr', 00H
	ORG $+3
$SG160038 DB	'E', 00H
	ORG $+2
$SG160000 DB	'tuntap.c', 00H
	ORG $+3
$SG160013 DB	'NULL', 00H
	ORG $+3
$SG160045 DB	'E', 00H
	ORG $+2
$SG160015 DB	'HHC00140%s Invalid net device name %s', 0aH, 00H
	ORG $+1
$SG160016 DB	'TUNTAP_SetDestAddr', 00H
	ORG $+1
$SG160062 DB	'E', 00H
	ORG $+2
$SG160017 DB	'tuntap.c', 00H
	ORG $+3
$SG160020 DB	'NULL', 00H
	ORG $+3
$SG160069 DB	'E', 00H
	ORG $+2
$SG160022 DB	'HHC00142%s Net device %s: Invalid destination address %s'
	DB	0aH, 00H
	ORG $+2
$SG160087 DB	'E', 00H
	ORG $+2
$SG160023 DB	'TUNTAP_SetDestAddr', 00H
	ORG $+1
$SG160093 DB	'E', 00H
	ORG $+2
$SG160024 DB	'tuntap.c', 00H
	ORG $+3
$SG160037 DB	'NULL', 00H
	ORG $+3
$SG160099 DB	'E', 00H
	ORG $+2
$SG160039 DB	'HHC00140%s Invalid net device name %s', 0aH, 00H
	ORG $+1
$SG160040 DB	'TUNTAP_SetNetMask', 00H
	ORG $+2
$SG160105 DB	'E', 00H
	ORG $+2
$SG160041 DB	'tuntap.c', 00H
	ORG $+3
$SG160044 DB	'NULL', 00H
	ORG $+3
$SG160110 DB	'E', 00H
	ORG $+2
$SG160046 DB	'HHC00143%s Net device %s: Invalid net mask %s', 0aH, 00H
	ORG $+1
$SG160047 DB	'TUNTAP_SetNetMask', 00H
	ORG $+2
$SG160128 DB	'E', 00H
	ORG $+2
$SG160048 DB	'tuntap.c', 00H
	ORG $+3
$SG160061 DB	'NULL', 00H
	ORG $+3
$SG160135 DB	'E', 00H
	ORG $+2
$SG160063 DB	'HHC00140%s Invalid net device name %s', 0aH, 00H
	ORG $+1
$SG160064 DB	'TUNTAP_SetBCastAddr', 00H
$SG160141 DB	'E', 00H
	ORG $+2
$SG160065 DB	'tuntap.c', 00H
	ORG $+3
$SG160068 DB	'NULL', 00H
	ORG $+3
$SG160145 DB	'%u', 00H
	ORG $+1
$SG160070 DB	'HHC00155%s Net device %s: Invalid broadcast address %s', 0aH
	DB	00H
$SG160071 DB	'TUNTAP_SetBCastAddr', 00H
$SG160159 DB	'E', 00H
	ORG $+2
$SG160072 DB	'tuntap.c', 00H
	ORG $+3
$SG160086 DB	'NULL', 00H
	ORG $+3
$SG160166 DB	'E', 00H
	ORG $+2
$SG160088 DB	'HHC00140%s Invalid net device name %s', 0aH, 00H
	ORG $+1
$SG160089 DB	'TUNTAP_SetIPAddr6', 00H
	ORG $+2
$SG160172 DB	'E', 00H
	ORG $+2
$SG160090 DB	'tuntap.c', 00H
	ORG $+3
$SG160092 DB	'NULL', 00H
	ORG $+3
$SG160192 DB	'E', 00H
	ORG $+2
$SG160094 DB	'HHC00141%s Net device %s: Invalid IP %s', 0aH, 00H
	ORG $+3
$SG160199 DB	'E', 00H
	ORG $+2
$SG160095 DB	'TUNTAP_SetIPAddr6', 00H
	ORG $+2
$SG160205 DB	'E', 00H
	ORG $+2
$SG160096 DB	'tuntap.c', 00H
	ORG $+3
$SG160098 DB	'NULL', 00H
	ORG $+3
$SG160223 DB	'E', 00H
	ORG $+2
$SG160100 DB	'HHC00153%s Net device %s: Invalid prefix length %s', 0aH
	DB	00H
$SG160230 DB	'E', 00H
	ORG $+2
$SG160101 DB	'TUNTAP_SetIPAddr6', 00H
	ORG $+2
$SG160245 DB	'E', 00H
	ORG $+2
$SG160102 DB	'tuntap.c', 00H
	ORG $+3
$SG160263 DB	'E', 00H
	ORG $+2
$SG160106 DB	'HHC00153%s Net device %s: Invalid prefix length %s', 0aH
	DB	00H
$SG160344 DB	'%x', 00H
	ORG $+1
$SG160107 DB	'TUNTAP_SetIPAddr6', 00H
	ORG $+2
$SG160402 DB	'CTC', 00H
$SG160108 DB	'tuntap.c', 00H
	ORG $+3
$SG160406 DB	'%2.2X', 00H
	ORG $+2
$SG160409 DB	'  ', 00H
	ORG $+1
$SG160111 DB	'HHC00141%s Net device %s: Invalid IP %s', 0aH, 00H
	ORG $+3
$SG160411 DB	' ', 00H
	ORG $+2
$SG160112 DB	'TUNTAP_SetIPAddr6', 00H
	ORG $+2
$SG160414 DB	'D', 00H
	ORG $+2
$SG160113 DB	'tuntap.c', 00H
	ORG $+3
$SG160127 DB	'NULL', 00H
	ORG $+3
$SG160418 DB	'I', 00H
	ORG $+2
$SG160129 DB	'HHC00140%s Invalid net device name %s', 0aH, 00H
	ORG $+1
$SG160130 DB	'TUNTAP_GetMTU', 00H
	ORG $+2
$SG160131 DB	'tuntap.c', 00H
	ORG $+7
$SG160133 DB	'Invalid parameters', 00H
	ORG $+5
$SG160134 DB	'TUNTAP_GetMTU', 00H
	ORG $+2
$SG160136 DB	'HHC00136%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG160137 DB	'TUNTAP_GetMTU', 00H
	ORG $+2
$SG160138 DB	'tuntap.c', 00H
	ORG $+7
$SG160140 DB	'TUNTAP_GetMTU', 00H
	ORG $+2
$SG160142 DB	'HHC00136%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG160143 DB	'TUNTAP_GetMTU', 00H
	ORG $+2
$SG160144 DB	'tuntap.c', 00H
	ORG $+3
$SG160158 DB	'NULL', 00H
	ORG $+7
$SG160160 DB	'HHC00140%s Invalid net device name %s', 0aH, 00H
	ORG $+1
$SG160161 DB	'TUNTAP_SetMTU', 00H
	ORG $+2
$SG160162 DB	'tuntap.c', 00H
	ORG $+3
$SG160165 DB	'NULL', 00H
	ORG $+7
$SG160167 DB	'HHC00144%s Net device %s: Invalid MTU %s', 0aH, 00H
	ORG $+6
$SG160168 DB	'TUNTAP_SetMTU', 00H
	ORG $+2
$SG160169 DB	'tuntap.c', 00H
	ORG $+7
$SG160173 DB	'HHC00144%s Net device %s: Invalid MTU %s', 0aH, 00H
	ORG $+6
$SG160174 DB	'TUNTAP_SetMTU', 00H
	ORG $+2
$SG160175 DB	'tuntap.c', 00H
	ORG $+3
$SG160191 DB	'NULL', 00H
	ORG $+7
$SG160193 DB	'HHC00140%s Invalid net device name %s', 0aH, 00H
	ORG $+1
$SG160194 DB	'TUNTAP_GetMACAddr', 00H
	ORG $+6
$SG160195 DB	'tuntap.c', 00H
	ORG $+7
$SG160197 DB	'Invalid parameters', 00H
	ORG $+5
$SG160198 DB	'TUNTAP_GetMACAddr', 00H
	ORG $+6
$SG160200 DB	'HHC00136%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG160201 DB	'TUNTAP_GetMACAddr', 00H
	ORG $+6
$SG160202 DB	'tuntap.c', 00H
	ORG $+7
$SG160204 DB	'TUNTAP_GetMACAddr', 00H
	ORG $+6
$SG160206 DB	'HHC00136%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG160207 DB	'TUNTAP_GetMACAddr', 00H
	ORG $+6
$SG160208 DB	'tuntap.c', 00H
	ORG $+3
$SG160222 DB	'NULL', 00H
	ORG $+7
$SG160224 DB	'HHC00140%s Invalid net device name %s', 0aH, 00H
	ORG $+1
$SG160225 DB	'TUNTAP_SetMACAddr', 00H
	ORG $+6
$SG160226 DB	'tuntap.c', 00H
	ORG $+3
$SG160229 DB	'NULL', 00H
	ORG $+7
$SG160231 DB	'HHC00145%s Net device %s: Invalid MAC address %s', 0aH, 00H
	ORG $+6
$SG160232 DB	'TUNTAP_SetMACAddr', 00H
	ORG $+6
$SG160233 DB	'tuntap.c', 00H
	ORG $+3
$SG160244 DB	'NULL', 00H
	ORG $+7
$SG160246 DB	'HHC00140%s Invalid net device name %s', 0aH, 00H
	ORG $+1
$SG160247 DB	'TUNTAP_SetFlags', 00H
$SG160248 DB	'tuntap.c', 00H
	ORG $+3
$SG160262 DB	'NULL', 00H
	ORG $+7
$SG160264 DB	'HHC00140%s Invalid net device name %s', 0aH, 00H
	ORG $+1
$SG160265 DB	'TUNTAP_GetFlags', 00H
$SG160266 DB	'tuntap.c', 00H
	ORG $+7
$SG160310 DB	'build_herc_iface_mac', 00H
	ORG $+3
$SG160311 DB	'tuntap.c', 00H
	ORG $+7
$SG160314 DB	'build_herc_iface_mac', 00H
	ORG $+3
$SG160312 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160315 DB	'tuntap.c', 00H
	ORG $+7
$SG160353 DB	'%02X:%02X:%02X:%02X:%02X:%02X', 00H
	ORG $+2
$SG160416 DB	'net_data_trace', 00H
	ORG $+9
$SG160316 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160363 DB	'packet trace', 00H
	ORG $+3
$SG160403 DB	'+%4.4X%c ', 00H
	ORG $+6
$SG160415 DB	'HHC00979%s %s: %s: %s %s %s', 0aH, 00H
	ORG $+3
$SG160417 DB	'tuntap.c', 00H
	ORG $+7
$SG160419 DB	'HHC00979%s %s: %s: %s %s %s', 0aH, 00H
	ORG $+3
$SG160420 DB	'net_data_trace', 00H
	ORG $+1
$SG160421 DB	'tuntap.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:net_data_trace
	DD	026H
	DD	03eeH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:FormatMAC
	DD	019H
	DD	0143H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ParseMAC
	DD	018H
	DD	0180H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:TUNTAP_GetFlags
	DD	01cH
	DD	0125H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:TUNTAP_SetFlags
	DD	01bH
	DD	0103H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:TUNTAP_SetMACAddr
	DD	01dH
	DD	01e7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:TUNTAP_GetMACAddr
	DD	01cH
	DD	0236H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:TUNTAP_SetMTU
	DD	01cH
	DD	0240H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:TUNTAP_GetMTU
	DD	01cH
	DD	0275H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:TUNTAP_SetIPAddr6
	DD	021H
	DD	032eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:TUNTAP_SetBCastAddr
	DD	01cH
	DD	01e9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:TUNTAP_SetNetMask
	DD	01cH
	DD	01e9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:TUNTAP_SetDestAddr
	DD	01cH
	DD	01e9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:TUNTAP_SetIPAddr
	DD	01cH
	DD	01f4H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:TUNTAP_CreateInterface
	DD	025H
	DD	01e1H
voltbl	ENDS
xdata	SEGMENT
$unwind$DebuggerTrace DD 011801H
	DD	0a218H
$unwind$TUNTAP_CreateInterface DD 032d19H
	DD	018011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$TUNTAP_SetIPAddr DD 032419H
	DD	0180112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$TUNTAP_SetDestAddr DD 032419H
	DD	0180112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$TUNTAP_SetNetMask DD 032419H
	DD	0180112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$TUNTAP_SetBCastAddr DD 032419H
	DD	0180112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$TUNTAP_SetIPAddr6 DD 032919H
	DD	0160117H
	DD	07010H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$TUNTAP_GetMTU DD 032419H
	DD	0180112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0b8H
$unwind$TUNTAP_SetMTU DD 032419H
	DD	0180112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$TUNTAP_GetMACAddr DD 032419H
	DD	0180112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$TUNTAP_SetMACAddr DD 042519H
	DD	0190113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0b8H
$unwind$TUNTAP_SetFlags DD 032319H
	DD	0140111H
	DD	0700aH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$TUNTAP_GetFlags DD 032419H
	DD	0160112H
	DD	0700bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$TT32_AddIPAddr DD 010d01H
	DD	0420dH
$unwind$TT32_DelIPAddr DD 010d01H
	DD	0420dH
$unwind$TT32_QryIPAddrs DD 010d01H
	DD	0420dH
$unwind$build_herc_iface_mac DD 010e01H
	DD	0620eH
$unwind$ParseMAC DD 011d19H
	DD	0c20eH
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$FormatMAC DD 021e19H
	DD	0700bd20fH
	DD	imagerel __GSHandlerCheck
	DD	068H
$unwind$packet_trace DD 011201H
	DD	08212H
$unwind$net_data_trace DD 032e19H
	DD	026011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$TUNTAP_SetMode DD 011201H
	DD	06212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s_l DD 011801H
	DD	0a218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
rc$ = 32
fd$ = 64
hifr$ = 72
iFlags$ = 80
TUNTAP_SetMode PROC

; 81   : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 82   :     int rc;
; 83   : 
; 84   :     /* Try TUNTAP_ioctl first */
; 85   :     rc = TUNTAP_IOCtl (fd, TUNSETIFF, (char *) hifr);

  00012	4c 8b 44 24 48	 mov	 r8, QWORD PTR hifr$[rsp]
  00017	ba ca 54 04 80	 mov	 edx, -2147199798	; ffffffff800454caH
  0001c	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00020	e8 00 00 00 00	 call	 tt32_ioctl
  00025	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 86   : 
; 87   : #if !defined( OPTION_W32_CTCI )
; 88   :     /* If invalid value, try with the pre-2.4.5 value */
; 89   :     if (0 > rc && errno == EINVAL)
; 90   :         rc = TUNTAP_IOCtl (fd, ('T' << 8) | 202, (char *) hifr);
; 91   : 
; 92   :     /* kludge for EPERM and linux 2.6.18 */
; 93   :     if (0 > rc && errno == EPERM && !(IFF_NO_HERCIFC & iFlags))
; 94   :     {
; 95   :         int             ifd[2];
; 96   :         const char     *hercifc;
; 97   :         pid_t           pid;
; 98   :         CTLREQ          ctlreq;
; 99   :         fd_set          selset;
; 100  :         struct timeval  tv;
; 101  :         int             sv_err;
; 102  :         int             status;
; 103  : 
; 104  :         if (socketpair (AF_UNIX, SOCK_STREAM, 0, ifd) < 0)
; 105  :             return -1;
; 106  : 
; 107  :         if (!(hercifc = get_symbol ("HERCULES_IFC")) || !*hercifc)
; 108  :             hercifc = HERCIFC_CMD;
; 109  : 
; 110  :         pid = fork();
; 111  : 
; 112  :         if (pid < 0)
; 113  :             return -1;
; 114  :         else if (pid == 0)
; 115  :         {
; 116  :             /* child */
; 117  :             char msglvl[16] = {0};
; 118  :             dup2 (ifd[0], STDIN_FILENO);
; 119  :             dup2 (STDOUT_FILENO, STDERR_FILENO);
; 120  :             dup2 (ifd[0], STDOUT_FILENO);
; 121  :             close (ifd[1]);
; 122  :             MSGBUF( msglvl, "%d", sysblk.msglvl );
; 123  :             execlp( hercifc, hercifc, msglvl, query_codepage(), NULL );
; 124  :             WRMSG( HHC00136, "E", "execlp()", strerror( errno ) );
; 125  :             exit( 127 );
; 126  :         }
; 127  : 
; 128  :         /* parent */
; 129  :         close(ifd[0]);
; 130  : 
; 131  :         /* Request hercifc to issue the TUNSETIFF ioctl */
; 132  :         memset (&ctlreq, 0, CTLREQ_SIZE);
; 133  :         ctlreq.iCtlOp = TUNSETIFF;
; 134  :         ctlreq.iProcID = fd;
; 135  :         memcpy (&ctlreq.iru.hifr, hifr, sizeof (struct hifr));
; 136  :         VERIFY(CTLREQ_SIZE == write (ifd[1], &ctlreq, CTLREQ_SIZE));
; 137  : 
; 138  :         /* Get response, if any, from hercifc */
; 139  :         FD_ZERO (&selset);
; 140  :         FD_SET (ifd[1], &selset);
; 141  :         tv.tv_sec = 5;
; 142  :         tv.tv_usec = 0;
; 143  :         rc = select (ifd[1]+1, &selset, NULL, NULL, &tv);
; 144  :         if (rc > 0)
; 145  :         {
; 146  :             rc = read (ifd[1], &ctlreq, CTLREQ_SIZE);
; 147  :             if (rc > 0)
; 148  :                 memcpy (hifr, &ctlreq.iru.hifr, sizeof (struct hifr));
; 149  :         }
; 150  :         else if (rc == 0)
; 151  :         {
; 152  :             // "Timeout for module %s, possible older version"
; 153  :             WRMSG( HHC00135, "E", hercifc );
; 154  :             errno = EPERM;
; 155  :             rc = -1;
; 156  :         }
; 157  : 
; 158  :         /* clean-up */
; 159  :         sv_err = errno;
; 160  :         close (ifd[1]);
; 161  :         kill (pid, SIGKILL);
; 162  :         waitpid (pid, &status, 0);
; 163  :         errno = sv_err;
; 164  :     }
; 165  : #endif /* if !defined( OPTION_W32_CTCI ) */
; 166  : 
; 167  :     return rc;

  00029	8b 44 24 20	 mov	 eax, DWORD PTR rc$[rsp]

; 168  : }   // End of function  TUNTAP_SetMode()

  0002d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00031	c3		 ret	 0
TUNTAP_SetMode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
c$ = 96
e$ = 97
i$ = 100
offset$ = 104
pType$ = 112
$T1 = 120
$T2 = 128
$T3 = 136
print_ebcdic$ = 144
print_ascii$ = 168
print_line$ = 192
tmp$ = 256
__$ArrayPad$ = 288
pDEVBLK$ = 320
pAddr$ = 328
iLen$ = 336
bDir$ = 344
bSev$ = 352
pWhat$ = 360
uOpt$ = 368
net_data_trace PROC

; 1385 : {

$LN27:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1386 :     char*         pType;
; 1387 :     int           offset;
; 1388 :     unsigned int  i;
; 1389 :     u_char        c = '\0';

  0002e	c6 44 24 60 00	 mov	 BYTE PTR c$[rsp], 0

; 1390 :     u_char        e = '\0';

  00033	c6 44 24 61 00	 mov	 BYTE PTR e$[rsp], 0
$LN4@net_data_t:

; 1391 :     char          print_ascii[17];
; 1392 :     char          print_ebcdic[17];
; 1393 :     char          print_line[64];
; 1394 :     char          tmp[32];
; 1395 : 
; 1396 :     UNREFERENCED( uOpt );

  00038	33 c0		 xor	 eax, eax
  0003a	85 c0		 test	 eax, eax
  0003c	75 fa		 jne	 SHORT $LN4@net_data_t

; 1397 : 
; 1398 : 
; 1399 :     if (pDEVBLK) pType = pDEVBLK->typname;

  0003e	48 83 bc 24 40
	01 00 00 00	 cmp	 QWORD PTR pDEVBLK$[rsp], 0
  00047	74 13		 je	 SHORT $LN11@net_data_t
  00049	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR pDEVBLK$[rsp]
  00051	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00055	48 89 44 24 70	 mov	 QWORD PTR pType$[rsp], rax
  0005a	eb 0c		 jmp	 SHORT $LN12@net_data_t
$LN11@net_data_t:

; 1400 :     else pType = "CTC";

  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160402
  00063	48 89 44 24 70	 mov	 QWORD PTR pType$[rsp], rax
$LN12@net_data_t:

; 1401 : 
; 1402 :     for (offset = 0; offset < iLen; )

  00068	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR offset$[rsp], 0
$LN5@net_data_t:
  00070	8b 84 24 50 01
	00 00		 mov	 eax, DWORD PTR iLen$[rsp]
  00077	39 44 24 68	 cmp	 DWORD PTR offset$[rsp], eax
  0007b	0f 8d 6d 03 00
	00		 jge	 $LN6@net_data_t

; 1403 :     {
; 1404 :         memset( print_ascii, ' ', sizeof(print_ascii)-1 );    /* set to spaces */

  00081	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR print_ascii$[rsp]
  00089	48 8b f8	 mov	 rdi, rax
  0008c	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00091	b9 10 00 00 00	 mov	 ecx, 16
  00096	f3 aa		 rep stosb

; 1405 :         print_ascii[sizeof(print_ascii)-1] = '\0';            /* with null termination */

  00098	b8 01 00 00 00	 mov	 eax, 1
  0009d	48 6b c0 10	 imul	 rax, rax, 16
  000a1	48 89 44 24 78	 mov	 QWORD PTR $T1[rsp], rax
  000a6	48 83 7c 24 78
	11		 cmp	 QWORD PTR $T1[rsp], 17
  000ac	73 02		 jae	 SHORT $LN21@net_data_t
  000ae	eb 05		 jmp	 SHORT $LN22@net_data_t
$LN21@net_data_t:
  000b0	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN22@net_data_t:
  000b5	48 8b 44 24 78	 mov	 rax, QWORD PTR $T1[rsp]
  000ba	c6 84 04 a8 00
	00 00 00	 mov	 BYTE PTR print_ascii$[rsp+rax], 0

; 1406 :         memset( print_ebcdic, ' ', sizeof(print_ebcdic)-1 );  /* set to spaces */

  000c2	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR print_ebcdic$[rsp]
  000ca	48 8b f8	 mov	 rdi, rax
  000cd	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  000d2	b9 10 00 00 00	 mov	 ecx, 16
  000d7	f3 aa		 rep stosb

; 1407 :         print_ebcdic[sizeof(print_ebcdic)-1] = '\0';          /* with null termination */

  000d9	b8 01 00 00 00	 mov	 eax, 1
  000de	48 6b c0 10	 imul	 rax, rax, 16
  000e2	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR $T2[rsp], rax
  000ea	48 83 bc 24 80
	00 00 00 11	 cmp	 QWORD PTR $T2[rsp], 17
  000f3	73 02		 jae	 SHORT $LN23@net_data_t
  000f5	eb 05		 jmp	 SHORT $LN24@net_data_t
$LN23@net_data_t:
  000f7	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN24@net_data_t:
  000fc	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR $T2[rsp]
  00104	c6 84 04 90 00
	00 00 00	 mov	 BYTE PTR print_ebcdic$[rsp+rax], 0

; 1408 :         memset( print_line, 0, sizeof( print_line ) );

  0010c	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR print_line$[rsp]
  00114	48 8b f8	 mov	 rdi, rax
  00117	33 c0		 xor	 eax, eax
  00119	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0011e	f3 aa		 rep stosb

; 1409 : 
; 1410 :         MSGBUF(print_line, "+%4.4X%c ", offset, bDir );

  00120	0f b6 84 24 58
	01 00 00	 movzx	 eax, BYTE PTR bDir$[rsp]
  00128	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0012c	44 8b 4c 24 68	 mov	 r9d, DWORD PTR offset$[rsp]
  00131	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160403
  00138	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0013d	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR print_line$[rsp]
  00145	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1411 : 
; 1412 :         for( i = 0; i < 16; i++ )

  0014b	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00153	eb 0a		 jmp	 SHORT $LN10@net_data_t
$LN8@net_data_t:
  00155	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  00159	ff c0		 inc	 eax
  0015b	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN10@net_data_t:
  0015f	83 7c 24 64 10	 cmp	 DWORD PTR i$[rsp], 16
  00164	0f 83 5f 01 00
	00		 jae	 $LN9@net_data_t

; 1413 :         {
; 1414 :             c = *pAddr++;

  0016a	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pAddr$[rsp]
  00172	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00175	88 44 24 60	 mov	 BYTE PTR c$[rsp], al
  00179	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pAddr$[rsp]
  00181	48 ff c0	 inc	 rax
  00184	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR pAddr$[rsp], rax

; 1415 : 
; 1416 :             if( offset < iLen )

  0018c	8b 84 24 50 01
	00 00		 mov	 eax, DWORD PTR iLen$[rsp]
  00193	39 44 24 68	 cmp	 DWORD PTR offset$[rsp], eax
  00197	0f 8d dc 00 00
	00		 jge	 $LN13@net_data_t

; 1417 :             {
; 1418 :                 MSGBUF(tmp,"%2.2X", c );

  0019d	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  001a2	44 8b c8	 mov	 r9d, eax
  001a5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160406
  001ac	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  001b1	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR tmp$[rsp]
  001b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1419 :                 tmp[sizeof(tmp)-1] = '\0';

  001bf	b8 01 00 00 00	 mov	 eax, 1
  001c4	48 6b c0 1f	 imul	 rax, rax, 31
  001c8	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR $T3[rsp], rax
  001d0	48 83 bc 24 88
	00 00 00 20	 cmp	 QWORD PTR $T3[rsp], 32	; 00000020H
  001d9	73 02		 jae	 SHORT $LN25@net_data_t
  001db	eb 05		 jmp	 SHORT $LN26@net_data_t
$LN25@net_data_t:
  001dd	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN26@net_data_t:
  001e2	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR $T3[rsp]
  001ea	c6 84 04 00 01
	00 00 00	 mov	 BYTE PTR tmp$[rsp+rax], 0

; 1420 :                 STRLCAT( print_line, tmp );

  001f2	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  001f8	48 8d 94 24 00
	01 00 00	 lea	 rdx, QWORD PTR tmp$[rsp]
  00200	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR print_line$[rsp]
  00208	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 1421 : 
; 1422 :                 print_ebcdic[i] = print_ascii[i] = '.';

  0020e	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  00212	c6 84 04 a8 00
	00 00 2e	 mov	 BYTE PTR print_ascii$[rsp+rax], 46 ; 0000002eH
  0021a	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  0021e	c6 84 04 90 00
	00 00 2e	 mov	 BYTE PTR print_ebcdic$[rsp+rax], 46 ; 0000002eH

; 1423 :                 e = guest_to_host( c );

  00226	0f b6 4c 24 60	 movzx	 ecx, BYTE PTR c$[rsp]
  0022b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_guest_to_host
  00231	88 44 24 61	 mov	 BYTE PTR e$[rsp], al

; 1424 : 
; 1425 :                 if( isprint( e ) )

  00235	0f b6 44 24 61	 movzx	 eax, BYTE PTR e$[rsp]
  0023a	8b c8		 mov	 ecx, eax
  0023c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isprint
  00242	85 c0		 test	 eax, eax
  00244	74 10		 je	 SHORT $LN15@net_data_t

; 1426 :                     print_ebcdic[i] = e;

  00246	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  0024a	0f b6 4c 24 61	 movzx	 ecx, BYTE PTR e$[rsp]
  0024f	88 8c 04 90 00
	00 00		 mov	 BYTE PTR print_ebcdic$[rsp+rax], cl
$LN15@net_data_t:

; 1427 :                 if( isprint( c ) )

  00256	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  0025b	8b c8		 mov	 ecx, eax
  0025d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isprint
  00263	85 c0		 test	 eax, eax
  00265	74 10		 je	 SHORT $LN16@net_data_t

; 1428 :                     print_ascii[i] = c;

  00267	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  0026b	0f b6 4c 24 60	 movzx	 ecx, BYTE PTR c$[rsp]
  00270	88 8c 04 a8 00
	00 00		 mov	 BYTE PTR print_ascii$[rsp+rax], cl
$LN16@net_data_t:

; 1429 :             }

  00277	eb 1b		 jmp	 SHORT $LN14@net_data_t
$LN13@net_data_t:

; 1430 :             else
; 1431 :             {
; 1432 :                 STRLCAT( print_line, "  " );

  00279	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0027f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160409
  00286	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR print_line$[rsp]
  0028e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN14@net_data_t:

; 1433 :             }
; 1434 : 
; 1435 :             offset++;

  00294	8b 44 24 68	 mov	 eax, DWORD PTR offset$[rsp]
  00298	ff c0		 inc	 eax
  0029a	89 44 24 68	 mov	 DWORD PTR offset$[rsp], eax

; 1436 :             if( ( offset & 3 ) == 0 )

  0029e	8b 44 24 68	 mov	 eax, DWORD PTR offset$[rsp]
  002a2	83 e0 03	 and	 eax, 3
  002a5	85 c0		 test	 eax, eax
  002a7	75 1b		 jne	 SHORT $LN17@net_data_t

; 1437 :             {
; 1438 :                 STRLCAT( print_line, " " );

  002a9	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  002af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160411
  002b6	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR print_line$[rsp]
  002be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN17@net_data_t:

; 1439 :             }
; 1440 :         }

  002c4	e9 8c fe ff ff	 jmp	 $LN8@net_data_t
$LN9@net_data_t:

; 1441 : 
; 1442 :         // HHC00979 "%s: %s: %s %s %s"
; 1443 :         if( bSev == 'D' ) {

  002c9	0f b6 84 24 60
	01 00 00	 movzx	 eax, BYTE PTR bSev$[rsp]
  002d1	83 f8 44	 cmp	 eax, 68			; 00000044H
  002d4	0f 85 8a 00 00
	00		 jne	 $LN18@net_data_t

; 1444 :           WRMSG(HHC00979, "D", pType, pWhat, print_line, print_ascii, print_ebcdic );

  002da	b9 01 00 00 00	 mov	 ecx, 1
  002df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002e5	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR print_ebcdic$[rsp]
  002ed	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  002f2	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR print_ascii$[rsp]
  002fa	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  002ff	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR print_line$[rsp]
  00307	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0030c	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR pWhat$[rsp]
  00314	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00319	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pType$[rsp]
  0031e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00323	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160414
  0032a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0032f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160415
  00336	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0033b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00340	41 b9 03 00 00
	00		 mov	 r9d, 3
  00346	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160416
  0034d	ba a4 05 00 00	 mov	 edx, 1444		; 000005a4H
  00352	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160417
  00359	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1445 :         } else {

  0035f	e9 85 00 00 00	 jmp	 $LN19@net_data_t
$LN18@net_data_t:

; 1446 :           WRMSG(HHC00979, "I", pType, pWhat, print_line, print_ascii, print_ebcdic );

  00364	b9 01 00 00 00	 mov	 ecx, 1
  00369	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0036f	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR print_ebcdic$[rsp]
  00377	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0037c	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR print_ascii$[rsp]
  00384	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00389	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR print_line$[rsp]
  00391	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00396	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR pWhat$[rsp]
  0039e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003a3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pType$[rsp]
  003a8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160418
  003b4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160419
  003c0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003c5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003ca	41 b9 03 00 00
	00		 mov	 r9d, 3
  003d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160420
  003d7	ba a6 05 00 00	 mov	 edx, 1446		; 000005a6H
  003dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160421
  003e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN19@net_data_t:

; 1447 :         }
; 1448 :     }

  003e9	e9 82 fc ff ff	 jmp	 $LN5@net_data_t
$LN6@net_data_t:
$LN20@net_data_t:

; 1449 : }

  003ee	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  003f6	48 33 cc	 xor	 rcx, rsp
  003f9	e8 00 00 00 00	 call	 __security_check_cookie
  003fe	48 81 c4 30 01
	00 00		 add	 rsp, 304		; 00000130H
  00405	5f		 pop	 rdi
  00406	c3		 ret	 0
net_data_trace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
pAddr$ = 80
iLen$ = 88
bDir$ = 96
packet_trace PROC

; 1376 : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1377 :     net_data_trace( NULL, pAddr, iLen, bDir, 'I', "packet trace", 0 );

  00012	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0001a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160363
  00021	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00026	c6 44 24 20 49	 mov	 BYTE PTR [rsp+32], 73	; 00000049H
  0002b	44 0f b6 4c 24
	60		 movzx	 r9d, BYTE PTR bDir$[rsp]
  00031	44 8b 44 24 58	 mov	 r8d, DWORD PTR iLen$[rsp]
  00036	48 8b 54 24 50	 mov	 rdx, QWORD PTR pAddr$[rsp]
  0003b	33 c9		 xor	 ecx, ecx
  0003d	e8 00 00 00 00	 call	 net_data_trace

; 1378 : }

  00042	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00046	c3		 ret	 0
packet_trace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
szMAC$ = 80
__$ArrayPad$ = 104
ppszMACAddr$ = 128
mac$ = 136
FormatMAC PROC

; 1350 : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 70	 sub	 rsp, 112		; 00000070H
  0000f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00016	48 33 c4	 xor	 rax, rsp
  00019	48 89 44 24 68	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1351 :     char szMAC[3 * IFHWADDRLEN] = {0};

  0001e	48 8d 44 24 50	 lea	 rax, QWORD PTR szMAC$[rsp]
  00023	48 8b f8	 mov	 rdi, rax
  00026	33 c0		 xor	 eax, eax
  00028	b9 12 00 00 00	 mov	 ecx, 18
  0002d	f3 aa		 rep stosb

; 1352 : 
; 1353 :     if (!ppszMACAddr || !mac)

  0002f	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR ppszMACAddr$[rsp], 0
  00038	74 0b		 je	 SHORT $LN3@FormatMAC
  0003a	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR mac$[rsp], 0
  00043	75 16		 jne	 SHORT $LN2@FormatMAC
$LN3@FormatMAC:

; 1354 :     {
; 1355 :         errno = EINVAL;

  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0004b	c7 00 16 00 00
	00		 mov	 DWORD PTR [rax], 22

; 1356 :         return -1;

  00051	b8 ff ff ff ff	 mov	 eax, -1
  00056	e9 e8 00 00 00	 jmp	 $LN1@FormatMAC
$LN2@FormatMAC:

; 1357 :     }
; 1358 : 
; 1359 :     MSGBUF( szMAC, "%02X:%02X:%02X:%02X:%02X:%02X",

  0005b	b8 01 00 00 00	 mov	 eax, 1
  00060	48 6b c0 05	 imul	 rax, rax, 5
  00064	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR mac$[rsp]
  0006c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00070	b9 01 00 00 00	 mov	 ecx, 1
  00075	48 6b c9 04	 imul	 rcx, rcx, 4
  00079	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR mac$[rsp]
  00081	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00085	ba 01 00 00 00	 mov	 edx, 1
  0008a	48 6b d2 03	 imul	 rdx, rdx, 3
  0008e	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR mac$[rsp]
  00096	0f b6 14 17	 movzx	 edx, BYTE PTR [rdi+rdx]
  0009a	bf 01 00 00 00	 mov	 edi, 1
  0009f	48 6b ff 02	 imul	 rdi, rdi, 2
  000a3	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR mac$[rsp]
  000ab	41 0f b6 3c 38	 movzx	 edi, BYTE PTR [r8+rdi]
  000b0	41 b8 01 00 00
	00		 mov	 r8d, 1
  000b6	4d 6b c0 01	 imul	 r8, r8, 1
  000ba	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR mac$[rsp]
  000c2	47 0f b6 04 01	 movzx	 r8d, BYTE PTR [r9+r8]
  000c7	41 b9 01 00 00
	00		 mov	 r9d, 1
  000cd	4d 6b c9 00	 imul	 r9, r9, 0
  000d1	4c 8b 94 24 88
	00 00 00	 mov	 r10, QWORD PTR mac$[rsp]
  000d9	47 0f b6 0c 0a	 movzx	 r9d, BYTE PTR [r10+r9]
  000de	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  000e2	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000e6	89 54 24 30	 mov	 DWORD PTR [rsp+48], edx
  000ea	89 7c 24 28	 mov	 DWORD PTR [rsp+40], edi
  000ee	44 89 44 24 20	 mov	 DWORD PTR [rsp+32], r8d
  000f3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160353
  000fa	ba 12 00 00 00	 mov	 edx, 18
  000ff	48 8d 4c 24 50	 lea	 rcx, QWORD PTR szMAC$[rsp]
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1360 :         mac[0], mac[1], mac[2], mac[3], mac[4], mac[5] );
; 1361 : 
; 1362 :     if (!(*ppszMACAddr = strdup( szMAC )))

  0010a	48 8d 4c 24 50	 lea	 rcx, QWORD PTR szMAC$[rsp]
  0010f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00115	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR ppszMACAddr$[rsp]
  0011d	48 89 01	 mov	 QWORD PTR [rcx], rax
  00120	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR ppszMACAddr$[rsp]
  00128	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0012c	75 13		 jne	 SHORT $LN4@FormatMAC

; 1363 :     {
; 1364 :         errno = ENOMEM;

  0012e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00134	c7 00 0c 00 00
	00		 mov	 DWORD PTR [rax], 12

; 1365 :         return -1;

  0013a	b8 ff ff ff ff	 mov	 eax, -1
  0013f	eb 02		 jmp	 SHORT $LN1@FormatMAC
$LN4@FormatMAC:

; 1366 :     }
; 1367 : 
; 1368 :     return 0;

  00141	33 c0		 xor	 eax, eax
$LN1@FormatMAC:

; 1369 : }

  00143	48 8b 4c 24 68	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00148	48 33 cc	 xor	 rcx, rsp
  0014b	e8 00 00 00 00	 call	 __security_check_cookie
  00150	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00154	5f		 pop	 rdi
  00155	c3		 ret	 0
FormatMAC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
sep$ = 32
i$ = 36
x$ = 40
$T1 = 48
work$ = 56
__$ArrayPad$ = 80
pszMACAddr$ = 112
pbMACAddr$ = 120
ParseMAC PROC

; 1289 : {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00015	48 33 c4	 xor	 rax, rsp
  00018	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1290 :     char    work[((sizeof(MAC)*3)-0)];
; 1291 :     BYTE    sep;
; 1292 :     int       x;
; 1293 :     unsigned  i;
; 1294 : 
; 1295 :     if (strlen(pszMACAddr) != ((sizeof(MAC)*3)-1)
; 1296 :         || (sizeof(MAC) > 1 &&

  0001d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pszMACAddr$[rsp]
  00022	e8 00 00 00 00	 call	 strlen
  00027	48 83 f8 11	 cmp	 rax, 17
  0002b	75 23		 jne	 SHORT $LN6@ParseMAC
  0002d	33 c0		 xor	 eax, eax
  0002f	83 f8 01	 cmp	 eax, 1
  00032	74 32		 je	 SHORT $LN5@ParseMAC
  00034	48 8b 44 24 70	 mov	 rax, QWORD PTR pszMACAddr$[rsp]
  00039	0f be 40 02	 movsx	 eax, BYTE PTR [rax+2]
  0003d	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00040	74 24		 je	 SHORT $LN5@ParseMAC
  00042	48 8b 44 24 70	 mov	 rax, QWORD PTR pszMACAddr$[rsp]
  00047	0f be 40 02	 movsx	 eax, BYTE PTR [rax+2]
  0004b	83 f8 3a	 cmp	 eax, 58			; 0000003aH
  0004e	74 16		 je	 SHORT $LN5@ParseMAC
$LN6@ParseMAC:

; 1297 :             *(pszMACAddr+2) != '-' &&
; 1298 :             *(pszMACAddr+2) != ':')
; 1299 :     )
; 1300 :     {
; 1301 :         errno = EINVAL;

  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00056	c7 00 16 00 00
	00		 mov	 DWORD PTR [rax], 22

; 1302 :         return -1;

  0005c	b8 ff ff ff ff	 mov	 eax, -1
  00061	e9 1a 01 00 00	 jmp	 $LN1@ParseMAC
$LN5@ParseMAC:

; 1303 :     }
; 1304 : 
; 1305 :     strncpy(work,pszMACAddr,((sizeof(MAC)*3)-1));

  00066	41 b8 11 00 00
	00		 mov	 r8d, 17
  0006c	48 8b 54 24 70	 mov	 rdx, QWORD PTR pszMACAddr$[rsp]
  00071	48 8d 4c 24 38	 lea	 rcx, QWORD PTR work$[rsp]
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncpy

; 1306 :     work[((sizeof(MAC)*3)-1)] = sep = *(pszMACAddr+2);

  0007c	48 8b 44 24 70	 mov	 rax, QWORD PTR pszMACAddr$[rsp]
  00081	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00085	88 44 24 20	 mov	 BYTE PTR sep$[rsp], al
  00089	b8 01 00 00 00	 mov	 eax, 1
  0008e	48 6b c0 11	 imul	 rax, rax, 17
  00092	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR sep$[rsp]
  00097	88 4c 04 38	 mov	 BYTE PTR work$[rsp+rax], cl

; 1307 : 
; 1308 :     for (i=0; i < sizeof(MAC); i++)

  0009b	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000a3	eb 0a		 jmp	 SHORT $LN4@ParseMAC
$LN2@ParseMAC:
  000a5	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  000a9	ff c0		 inc	 eax
  000ab	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@ParseMAC:
  000af	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  000b3	48 83 f8 06	 cmp	 rax, 6
  000b7	0f 83 c1 00 00
	00		 jae	 $LN3@ParseMAC

; 1309 :     {
; 1310 :         if
; 1311 :         (0
; 1312 :             || !isxdigit(work[(i*3)+0])
; 1313 :             || !isxdigit(work[(i*3)+1])
; 1314 :             ||  sep  !=  work[(i*3)+2]

  000bd	33 c0		 xor	 eax, eax
  000bf	85 c0		 test	 eax, eax
  000c1	75 4a		 jne	 SHORT $LN8@ParseMAC
  000c3	6b 44 24 24 03	 imul	 eax, DWORD PTR i$[rsp], 3
  000c8	8b c0		 mov	 eax, eax
  000ca	0f be 44 04 38	 movsx	 eax, BYTE PTR work$[rsp+rax]
  000cf	8b c8		 mov	 ecx, eax
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isxdigit
  000d7	85 c0		 test	 eax, eax
  000d9	74 32		 je	 SHORT $LN8@ParseMAC
  000db	6b 44 24 24 03	 imul	 eax, DWORD PTR i$[rsp], 3
  000e0	ff c0		 inc	 eax
  000e2	8b c0		 mov	 eax, eax
  000e4	0f be 44 04 38	 movsx	 eax, BYTE PTR work$[rsp+rax]
  000e9	8b c8		 mov	 ecx, eax
  000eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isxdigit
  000f1	85 c0		 test	 eax, eax
  000f3	74 18		 je	 SHORT $LN8@ParseMAC
  000f5	0f b6 44 24 20	 movzx	 eax, BYTE PTR sep$[rsp]
  000fa	6b 4c 24 24 03	 imul	 ecx, DWORD PTR i$[rsp], 3
  000ff	83 c1 02	 add	 ecx, 2
  00102	8b c9		 mov	 ecx, ecx
  00104	0f be 4c 0c 38	 movsx	 ecx, BYTE PTR work$[rsp+rcx]
  00109	3b c1		 cmp	 eax, ecx
  0010b	74 13		 je	 SHORT $LN7@ParseMAC
$LN8@ParseMAC:

; 1315 :         )
; 1316 :         {
; 1317 :             errno = EINVAL;

  0010d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00113	c7 00 16 00 00
	00		 mov	 DWORD PTR [rax], 22

; 1318 :             return -1;

  00119	b8 ff ff ff ff	 mov	 eax, -1
  0011e	eb 60		 jmp	 SHORT $LN1@ParseMAC
$LN7@ParseMAC:

; 1319 :         }
; 1320 : 
; 1321 :         work[(i*3)+2] = 0;

  00120	6b 44 24 24 03	 imul	 eax, DWORD PTR i$[rsp], 3
  00125	83 c0 02	 add	 eax, 2
  00128	8b c0		 mov	 eax, eax
  0012a	48 89 44 24 30	 mov	 QWORD PTR $T1[rsp], rax
  0012f	48 83 7c 24 30
	12		 cmp	 QWORD PTR $T1[rsp], 18
  00135	73 02		 jae	 SHORT $LN10@ParseMAC
  00137	eb 05		 jmp	 SHORT $LN11@ParseMAC
$LN10@ParseMAC:
  00139	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN11@ParseMAC:
  0013e	48 8b 44 24 30	 mov	 rax, QWORD PTR $T1[rsp]
  00143	c6 44 04 38 00	 mov	 BYTE PTR work$[rsp+rax], 0

; 1322 :         sscanf(&work[(i*3)+0],"%x",&x);

  00148	6b 44 24 24 03	 imul	 eax, DWORD PTR i$[rsp], 3
  0014d	8b c0		 mov	 eax, eax
  0014f	48 8d 44 04 38	 lea	 rax, QWORD PTR work$[rsp+rax]
  00154	4c 8d 44 24 28	 lea	 r8, QWORD PTR x$[rsp]
  00159	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160344
  00160	48 8b c8	 mov	 rcx, rax
  00163	e8 00 00 00 00	 call	 sscanf

; 1323 :         *(pbMACAddr+i) = x;

  00168	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0016c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pbMACAddr$[rsp]
  00171	0f b6 54 24 28	 movzx	 edx, BYTE PTR x$[rsp]
  00176	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 1324 :     }

  00179	e9 27 ff ff ff	 jmp	 $LN2@ParseMAC
$LN3@ParseMAC:

; 1325 : 
; 1326 :     return 0;

  0017e	33 c0		 xor	 eax, eax
$LN1@ParseMAC:
$LN9@ParseMAC:

; 1327 : }

  00180	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00185	48 33 cc	 xor	 rcx, rsp
  00188	e8 00 00 00 00	 call	 __security_check_cookie
  0018d	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00191	c3		 ret	 0
ParseMAC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
ip$ = 32
i$1 = 36
out_mac$ = 64
in_ip$ = 72
build_herc_iface_mac PROC

; 1169 : {

$LN19:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1170 :     // Routine to build a default MAC address for
; 1171 :     // CTCI/LCS/QETH device virtual interfaces...
; 1172 : 
; 1173 : BYTE ip[4];
; 1174 : 
; 1175 :     if (!out_mac)

  0000e	48 83 7c 24 40
	00		 cmp	 QWORD PTR out_mac$[rsp], 0
  00014	75 6e		 jne	 SHORT $LN11@build_herc
$LN4@build_herc:

; 1176 :     {
; 1177 :         ASSERT( FALSE );

  00016	33 c0		 xor	 eax, eax
  00018	83 f8 01	 cmp	 eax, 1
  0001b	74 5c		 je	 SHORT $LN12@build_herc
$LN7@build_herc:
  0001d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160310
  00024	41 b8 99 04 00
	00		 mov	 r8d, 1177		; 00000499H
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160311
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160312
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00044	85 c0		 test	 eax, eax
  00046	74 20		 je	 SHORT $LN13@build_herc
  00048	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160314
  0004f	41 b8 99 04 00
	00		 mov	 r8d, 1177		; 00000499H
  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160315
  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160316
  00063	e8 00 00 00 00	 call	 DebuggerTrace
$LN13@build_herc:
  00068	33 c0		 xor	 eax, eax
  0006a	85 c0		 test	 eax, eax
  0006c	75 af		 jne	 SHORT $LN7@build_herc
  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00074	85 c0		 test	 eax, eax
  00076	74 01		 je	 SHORT $LN14@build_herc
  00078	cc		 int	 3
$LN14@build_herc:
$LN12@build_herc:
  00079	33 c0		 xor	 eax, eax
  0007b	85 c0		 test	 eax, eax
  0007d	75 97		 jne	 SHORT $LN4@build_herc

; 1178 :         return;             // (nothing for us to do!)

  0007f	e9 4c 01 00 00	 jmp	 $LN1@build_herc
$LN11@build_herc:

; 1179 :     }
; 1180 : 
; 1181 :     // We base our default MAC address on the last three bytes
; 1182 :     // of the IPv4 address (see further below). If it doesn't
; 1183 :     // have an IP address assigned to it yet however (in_ip is
; 1184 :     // NULL), then we temporarily generate a random IP address
; 1185 :     // only for the purpose of generating a default/random MAC.
; 1186 : 
; 1187 :     if (in_ip)

  00084	48 83 7c 24 48
	00		 cmp	 QWORD PTR in_ip$[rsp], 0
  0008a	74 0d		 je	 SHORT $LN15@build_herc

; 1188 :         memcpy( ip, in_ip, 4 );   // (use the passed value)

  0008c	48 8b 44 24 48	 mov	 rax, QWORD PTR in_ip$[rsp]
  00091	8b 00		 mov	 eax, DWORD PTR [rax]
  00093	89 44 24 20	 mov	 DWORD PTR ip$[rsp], eax
  00097	eb 3c		 jmp	 SHORT $LN16@build_herc
$LN15@build_herc:

; 1189 :     else                          // (else create temporary)
; 1190 :     {
; 1191 :         int i; for(i=0; i < 4; i++)

  00099	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  000a1	eb 0a		 jmp	 SHORT $LN10@build_herc
$LN8@build_herc:
  000a3	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  000a7	ff c0		 inc	 eax
  000a9	89 44 24 24	 mov	 DWORD PTR i$1[rsp], eax
$LN10@build_herc:
  000ad	83 7c 24 24 04	 cmp	 DWORD PTR i$1[rsp], 4
  000b2	7d 21		 jge	 SHORT $LN9@build_herc

; 1192 :             ip[i] = (BYTE)(rand() % 256);

  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  000ba	99		 cdq
  000bb	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  000c1	03 c2		 add	 eax, edx
  000c3	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000c8	2b c2		 sub	 eax, edx
  000ca	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR i$1[rsp]
  000cf	88 44 0c 20	 mov	 BYTE PTR ip$[rsp+rcx], al
  000d3	eb ce		 jmp	 SHORT $LN8@build_herc
$LN9@build_herc:
$LN16@build_herc:

; 1193 :     }
; 1194 : 
; 1195 : #if defined( OPTION_W32_CTCI )
; 1196 : 
; 1197 :     // We prefer to let TunTap32 do it for us (since IT'S the one
; 1198 :     // that decides what it should really be) but if they're using
; 1199 :     // an older version of TunTap32 that doesn't have the function
; 1200 :     // then we'll do it ourselves just like before...
; 1201 : 
; 1202 :     if (tt32_build_herc_iface_mac( out_mac, ip ))

  000d5	48 8d 54 24 20	 lea	 rdx, QWORD PTR ip$[rsp]
  000da	48 8b 4c 24 40	 mov	 rcx, QWORD PTR out_mac$[rsp]
  000df	e8 00 00 00 00	 call	 tt32_build_herc_iface_mac
  000e4	85 c0		 test	 eax, eax
  000e6	74 51		 je	 SHORT $LN17@build_herc

; 1203 :     {
; 1204 :         out_mac[0] &= ~0x01;    // (ensure broadcast bit off)

  000e8	b8 01 00 00 00	 mov	 eax, 1
  000ed	48 6b c0 00	 imul	 rax, rax, 0
  000f1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR out_mac$[rsp]
  000f6	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000fa	83 e0 fe	 and	 eax, -2
  000fd	b9 01 00 00 00	 mov	 ecx, 1
  00102	48 6b c9 00	 imul	 rcx, rcx, 0
  00106	48 8b 54 24 40	 mov	 rdx, QWORD PTR out_mac$[rsp]
  0010b	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 1205 :         out_mac[0] |=  0x02;    // (set local assignment bit)

  0010e	b8 01 00 00 00	 mov	 eax, 1
  00113	48 6b c0 00	 imul	 rax, rax, 0
  00117	48 8b 4c 24 40	 mov	 rcx, QWORD PTR out_mac$[rsp]
  0011c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00120	83 c8 02	 or	 eax, 2
  00123	b9 01 00 00 00	 mov	 ecx, 1
  00128	48 6b c9 00	 imul	 rcx, rcx, 0
  0012c	48 8b 54 24 40	 mov	 rdx, QWORD PTR out_mac$[rsp]
  00131	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 1206 :         return;

  00134	e9 97 00 00 00	 jmp	 $LN1@build_herc
$LN17@build_herc:

; 1207 :     }
; 1208 : 
; 1209 : #endif
; 1210 : 
; 1211 :     // Build a default MAC addr based on the guest (destination) ip
; 1212 :     // address so as to effectively *UNOFFICIALLY* assign ourselves
; 1213 :     // the following Ethernet address block:
; 1214 : 
; 1215 :     /* (from: http://www.iana.org/assignments/ethernet-numbers)
; 1216 :        (only the first 2 and last 2 paragraphs are of interest)
; 1217 : 
; 1218 :         IANA ETHERNET ADDRESS BLOCK - UNICAST USE
; 1219 : 
; 1220 :         The IANA owns an Ethernet address block which may be used for
; 1221 :         unicast address asignments or other special purposes.
; 1222 : 
; 1223 :         The IANA may assign unicast global IEEE 802 MAC address from it's
; 1224 :         assigned OUI (00-00-5E) for use in IETF standard track protocols.  The
; 1225 :         intended usage is for dynamic mapping between IP addresses and IEEE
; 1226 :         802 MAC addresses.  These IEEE 802 MAC addresses are not to be
; 1227 :         permanently assigned to any hardware interface, nor is this a
; 1228 :         substitute for a network equipment supplier getting its own OUI.
; 1229 : 
; 1230 :         ... (snipped)
; 1231 : 
; 1232 :         Using this representation, the range of Internet Unicast addresses is:
; 1233 : 
; 1234 :                00-00-5E-00-00-00  to  00-00-5E-FF-FF-FF  in hex, ...
; 1235 : 
; 1236 :         ... (snipped)
; 1237 : 
; 1238 :         The low order 24 bits of these unicast addresses are assigned as
; 1239 :         follows:
; 1240 : 
; 1241 :         Dotted Decimal          Description                     Reference
; 1242 :         ----------------------- ------------------------------- ---------
; 1243 :         000.000.000-000.000.255 Reserved                        [IANA]
; 1244 :         000.001.000-000.001.255 Virual Router Redundancy (VRRP) [Hinden]
; 1245 :         000.002.000-127.255.255 Reserved                        [IANA]
; 1246 :         128.000.000-255.255.255 Hercules TUNTAP (CTCI)          [Fish] (*UNOFFICIAL*)
; 1247 :     */
; 1248 : 
; 1249 :     // Here's what we're basically doing:
; 1250 : 
; 1251 :     //    00-00-5E-00-00-00  to  00-00-5E-00-00-FF  =  'Reserved' by IANA
; 1252 :     //    00-00-5E-00-01-00  to  00-00-5E-00-01-FF  =  'VRRP' by Hinden
; 1253 :     //    00-00-5E-00-02-00  to  00-00-5E-7F-FF-FF  =  (unassigned)
; 1254 :     //    00-00-5E-80-00-00  to  00-00-5E-FF-FF-FF  =  'Hercules' by Fish (*UNOFFICIAL*)
; 1255 : 
; 1256 :     //    00-00-5E-00-00-00   (starting value)
; 1257 :     //    00-00-5E-ip-ip-ip   (move in low-order 3 bytes of destination IP address)
; 1258 :     //    00-00-5E-8p-ip-ip   ('OR' on the x'80' high-order bit)
; 1259 : 
; 1260 :     out_mac[0] = 0x02;          // (set local assignment bit)

  00139	b8 01 00 00 00	 mov	 eax, 1
  0013e	48 6b c0 00	 imul	 rax, rax, 0
  00142	48 8b 4c 24 40	 mov	 rcx, QWORD PTR out_mac$[rsp]
  00147	c6 04 01 02	 mov	 BYTE PTR [rcx+rax], 2

; 1261 :     out_mac[1] = 0x00;

  0014b	b8 01 00 00 00	 mov	 eax, 1
  00150	48 6b c0 01	 imul	 rax, rax, 1
  00154	48 8b 4c 24 40	 mov	 rcx, QWORD PTR out_mac$[rsp]
  00159	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 1262 :     out_mac[2] = 0x5E;

  0015d	b8 01 00 00 00	 mov	 eax, 1
  00162	48 6b c0 02	 imul	 rax, rax, 2
  00166	48 8b 4c 24 40	 mov	 rcx, QWORD PTR out_mac$[rsp]
  0016b	c6 04 01 5e	 mov	 BYTE PTR [rcx+rax], 94	; 0000005eH

; 1263 :     out_mac[3] = ip[1] | 0x80;  // (Hercules *UNOFFICIAL* range)

  0016f	b8 01 00 00 00	 mov	 eax, 1
  00174	48 6b c0 01	 imul	 rax, rax, 1
  00178	0f b6 44 04 20	 movzx	 eax, BYTE PTR ip$[rsp+rax]
  0017d	0f ba e8 07	 bts	 eax, 7
  00181	b9 01 00 00 00	 mov	 ecx, 1
  00186	48 6b c9 03	 imul	 rcx, rcx, 3
  0018a	48 8b 54 24 40	 mov	 rdx, QWORD PTR out_mac$[rsp]
  0018f	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 1264 :     out_mac[4] = ip[2];

  00192	b8 01 00 00 00	 mov	 eax, 1
  00197	48 6b c0 02	 imul	 rax, rax, 2
  0019b	b9 01 00 00 00	 mov	 ecx, 1
  001a0	48 6b c9 04	 imul	 rcx, rcx, 4
  001a4	48 8b 54 24 40	 mov	 rdx, QWORD PTR out_mac$[rsp]
  001a9	0f b6 44 04 20	 movzx	 eax, BYTE PTR ip$[rsp+rax]
  001ae	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 1265 :     out_mac[5] = ip[3];

  001b1	b8 01 00 00 00	 mov	 eax, 1
  001b6	48 6b c0 03	 imul	 rax, rax, 3
  001ba	b9 01 00 00 00	 mov	 ecx, 1
  001bf	48 6b c9 05	 imul	 rcx, rcx, 5
  001c3	48 8b 54 24 40	 mov	 rdx, QWORD PTR out_mac$[rsp]
  001c8	0f b6 44 04 20	 movzx	 eax, BYTE PTR ip$[rsp+rax]
  001cd	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN1@build_herc:

; 1266 : }

  001d0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001d4	c3		 ret	 0
build_herc_iface_mac ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
fd$ = 48
ipv4addrs$ = 56
TT32_QryIPAddrs PROC

; 981  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 982  :     // PROGRAMMING NOTE: buffer should be 256 bytes minimum
; 983  :     return TUNTAP_IOCtl( fd, TT32QIFDSTADDRS, (char*)ipv4addrs );

  0000d	4c 8b 44 24 38	 mov	 r8, QWORD PTR ipv4addrs$[rsp]
  00012	ba e2 54 04 40	 mov	 edx, 1074025698		; 400454e2H
  00017	8b 4c 24 30	 mov	 ecx, DWORD PTR fd$[rsp]
  0001b	e8 00 00 00 00	 call	 tt32_ioctl

; 984  : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
TT32_QryIPAddrs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
fd$ = 48
ipv4addr$ = 56
TT32_DelIPAddr PROC

; 974  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 975  :     return TUNTAP_IOCtl( fd, TT32DIFDSTADDR, (char*)ipv4addr );

  0000d	4c 8b 44 24 38	 mov	 r8, QWORD PTR ipv4addr$[rsp]
  00012	ba e1 54 04 80	 mov	 edx, -2147199775	; ffffffff800454e1H
  00017	8b 4c 24 30	 mov	 ecx, DWORD PTR fd$[rsp]
  0001b	e8 00 00 00 00	 call	 tt32_ioctl

; 976  : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
TT32_DelIPAddr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
fd$ = 48
ipv4addr$ = 56
TT32_AddIPAddr PROC

; 967  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 968  :     return TUNTAP_IOCtl( fd, TT32AIFDSTADDR, (char*)ipv4addr );

  0000d	4c 8b 44 24 38	 mov	 r8, QWORD PTR ipv4addr$[rsp]
  00012	ba e0 54 04 80	 mov	 edx, -2147199776	; ffffffff800454e0H
  00017	8b 4c 24 30	 mov	 ecx, DWORD PTR fd$[rsp]
  0001b	e8 00 00 00 00	 call	 tt32_ioctl

; 969  : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
TT32_AddIPAddr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
rc$ = 64
tv68 = 72
sin$ = 80
hifr$ = 96
__$ArrayPad$ = 160
pszNetDevName$ = 192
piFlags$ = 200
TUNTAP_GetFlags PROC

; 778  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 779  :     struct hifr         hifr;
; 780  :     struct sockaddr_in* sin;
; 781  :     int                 rc;
; 782  : 
; 783  :     if( !pszNetDevName || !*pszNetDevName )

  00024	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  0002d	74 0f		 je	 SHORT $LN3@TUNTAP_Get
  0002f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  00037	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003a	85 c0		 test	 eax, eax
  0003c	75 7e		 jne	 SHORT $LN2@TUNTAP_Get
$LN3@TUNTAP_Get:

; 784  :     {
; 785  :         // "Invalid net device name %s"
; 786  :         WRMSG( HHC00140, "E", pszNetDevName ? pszNetDevName : "NULL" );

  0003e	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  00047	74 0f		 je	 SHORT $LN5@TUNTAP_Get
  00049	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  00051	48 89 44 24 48	 mov	 QWORD PTR tv68[rsp], rax
  00056	eb 0c		 jmp	 SHORT $LN6@TUNTAP_Get
$LN5@TUNTAP_Get:
  00058	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160262
  0005f	48 89 44 24 48	 mov	 QWORD PTR tv68[rsp], rax
$LN6@TUNTAP_Get:
  00064	b9 01 00 00 00	 mov	 ecx, 1
  00069	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0006f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv68[rsp]
  00074	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160263
  00080	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00085	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160264
  0008c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00091	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00096	41 b9 03 00 00
	00		 mov	 r9d, 3
  0009c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160265
  000a3	ba 12 03 00 00	 mov	 edx, 786		; 00000312H
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160266
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 787  :         return -1;

  000b5	b8 ff ff ff ff	 mov	 eax, -1
  000ba	eb 69		 jmp	 SHORT $LN1@TUNTAP_Get
$LN2@TUNTAP_Get:

; 788  :     }
; 789  : 
; 790  :     memset( &hifr, 0, sizeof( struct hifr ) );

  000bc	48 8d 44 24 60	 lea	 rax, QWORD PTR hifr$[rsp]
  000c1	48 8b f8	 mov	 rdi, rax
  000c4	33 c0		 xor	 eax, eax
  000c6	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000cb	f3 aa		 rep stosb

; 791  :     STRLCPY( hifr.hifr_name, pszNetDevName );

  000cd	41 b8 10 00 00
	00		 mov	 r8d, 16
  000d3	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR pszNetDevName$[rsp]
  000db	48 8d 4c 24 60	 lea	 rcx, QWORD PTR hifr$[rsp]
  000e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 792  :     sin = (struct sockaddr_in*)&hifr.hifr_addr;

  000e6	48 8d 44 24 70	 lea	 rax, QWORD PTR hifr$[rsp+16]
  000eb	48 89 44 24 50	 mov	 QWORD PTR sin$[rsp], rax

; 793  :     sin->sin_family = AF_INET;

  000f0	b8 02 00 00 00	 mov	 eax, 2
  000f5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR sin$[rsp]
  000fa	66 89 01	 mov	 WORD PTR [rcx], ax

; 794  : 
; 795  :     // PROGRAMMING NOTE: hercifc can't "get" information,
; 796  :     // only "set" it. Thus because we normally use hercifc
; 797  :     // to issue ioctl codes to the interface (on non-Win32)
; 798  :     // we bypass hercifc altogether and issue the ioctl
; 799  :     // ourselves directly to the device itself, bypassing
; 800  :     // hercifc completely. Note that for Win32 however,
; 801  :     // 'TUNTAP_IOCtl' routes to a TunTap32.DLL call and
; 802  :     // thus works just fine. We need special handling
; 803  :     // only for non-Win32 platforms. - Fish
; 804  : 
; 805  : #if defined( OPTION_W32_CTCI )
; 806  : 
; 807  :     rc = TUNTAP_IOCtl( 0, SIOCGIFFLAGS, (char*)&hifr );

  000fd	4c 8d 44 24 60	 lea	 r8, QWORD PTR hifr$[rsp]
  00102	ba 13 89 00 00	 mov	 edx, 35091		; 00008913H
  00107	33 c9		 xor	 ecx, ecx
  00109	e8 00 00 00 00	 call	 tt32_ioctl
  0010e	89 44 24 40	 mov	 DWORD PTR rc$[rsp], eax

; 808  : 
; 809  : #else // (non-Win32 platforms)
; 810  :     {
; 811  :         int sockfd = socket( AF_INET, SOCK_DGRAM, 0 );
; 812  :         rc = ioctl( sockfd, SIOCGIFFLAGS, &hifr );
; 813  :     }
; 814  : #endif
; 815  : 
; 816  :     *piFlags = hifr.hifr_flags;

  00112	0f bf 44 24 70	 movsx	 eax, WORD PTR hifr$[rsp+16]
  00117	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR piFlags$[rsp]
  0011f	89 01		 mov	 DWORD PTR [rcx], eax

; 817  : 
; 818  :     return rc;

  00121	8b 44 24 40	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@TUNTAP_Get:

; 819  : }   // End of function  TUNTAP_GetFlags()

  00125	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0012d	48 33 cc	 xor	 rcx, rsp
  00130	e8 00 00 00 00	 call	 __security_check_cookie
  00135	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  0013c	5f		 pop	 rdi
  0013d	c3		 ret	 0
TUNTAP_GetFlags ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
tv68 = 64
hifr$ = 80
__$ArrayPad$ = 144
pszNetDevName$ = 176
iFlags$ = 184
TUNTAP_SetFlags PROC

; 754  : {

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	57		 push	 rdi
  0000a	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 755  :     struct hifr         hifr;
; 756  : 
; 757  :     if( !pszNetDevName || !*pszNetDevName )

  00023	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  0002c	74 0f		 je	 SHORT $LN3@TUNTAP_Set
  0002e	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  00036	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00039	85 c0		 test	 eax, eax
  0003b	75 7e		 jne	 SHORT $LN2@TUNTAP_Set
$LN3@TUNTAP_Set:

; 758  :     {
; 759  :         // "Invalid net device name %s"
; 760  :         WRMSG( HHC00140, "E", pszNetDevName ? pszNetDevName : "NULL" );

  0003d	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  00046	74 0f		 je	 SHORT $LN5@TUNTAP_Set
  00048	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  00050	48 89 44 24 40	 mov	 QWORD PTR tv68[rsp], rax
  00055	eb 0c		 jmp	 SHORT $LN6@TUNTAP_Set
$LN5@TUNTAP_Set:
  00057	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160244
  0005e	48 89 44 24 40	 mov	 QWORD PTR tv68[rsp], rax
$LN6@TUNTAP_Set:
  00063	b9 01 00 00 00	 mov	 ecx, 1
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0006e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv68[rsp]
  00073	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00078	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160245
  0007f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00084	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160246
  0008b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00090	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00095	41 b9 03 00 00
	00		 mov	 r9d, 3
  0009b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160247
  000a2	ba f8 02 00 00	 mov	 edx, 760		; 000002f8H
  000a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160248
  000ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 761  :         return -1;

  000b4	b8 ff ff ff ff	 mov	 eax, -1
  000b9	eb 48		 jmp	 SHORT $LN1@TUNTAP_Set
$LN2@TUNTAP_Set:

; 762  :     }
; 763  : 
; 764  :     memset( &hifr, 0, sizeof( struct hifr ) );

  000bb	48 8d 44 24 50	 lea	 rax, QWORD PTR hifr$[rsp]
  000c0	48 8b f8	 mov	 rdi, rax
  000c3	33 c0		 xor	 eax, eax
  000c5	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000ca	f3 aa		 rep stosb

; 765  :     STRLCPY( hifr.hifr_name, pszNetDevName );

  000cc	41 b8 10 00 00
	00		 mov	 r8d, 16
  000d2	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pszNetDevName$[rsp]
  000da	48 8d 4c 24 50	 lea	 rcx, QWORD PTR hifr$[rsp]
  000df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 766  :     hifr.hifr_flags = iFlags;

  000e5	0f b7 84 24 b8
	00 00 00	 movzx	 eax, WORD PTR iFlags$[rsp]
  000ed	66 89 44 24 60	 mov	 WORD PTR hifr$[rsp+16], ax

; 767  : 
; 768  :     return TUNTAP_IOCtl( 0, SIOCSIFFLAGS, (char*)&hifr );

  000f2	4c 8d 44 24 50	 lea	 r8, QWORD PTR hifr$[rsp]
  000f7	ba 14 89 00 00	 mov	 edx, 35092		; 00008914H
  000fc	33 c9		 xor	 ecx, ecx
  000fe	e8 00 00 00 00	 call	 tt32_ioctl
$LN1@TUNTAP_Set:

; 769  : }   // End of function  TUNTAP_SetFlags()

  00103	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0010b	48 33 cc	 xor	 rcx, rsp
  0010e	e8 00 00 00 00	 call	 __security_check_cookie
  00113	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  0011a	5f		 pop	 rdi
  0011b	c3		 ret	 0
TUNTAP_SetFlags ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
tv68 = 80
tv85 = 88
addr$ = 96
hifr$ = 112
mac$ = 176
__$ArrayPad$ = 184
pszNetDevName$ = 224
pszMACAddr$ = 232
TUNTAP_SetMACAddr PROC

; 717  : {

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 718  :     struct hifr         hifr;
; 719  :     struct sockaddr*    addr;
; 720  :     MAC                 mac;
; 721  : 
; 722  :     if( !pszNetDevName || !*pszNetDevName )

  00025	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  0002e	74 13		 je	 SHORT $LN3@TUNTAP_Set
  00030	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  00038	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003b	85 c0		 test	 eax, eax
  0003d	0f 85 81 00 00
	00		 jne	 $LN2@TUNTAP_Set
$LN3@TUNTAP_Set:

; 723  :     {
; 724  :         // "Invalid net device name %s"
; 725  :         WRMSG( HHC00140, "E", pszNetDevName ? pszNetDevName : "NULL" );

  00043	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  0004c	74 0f		 je	 SHORT $LN7@TUNTAP_Set
  0004e	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  00056	48 89 44 24 50	 mov	 QWORD PTR tv68[rsp], rax
  0005b	eb 0c		 jmp	 SHORT $LN8@TUNTAP_Set
$LN7@TUNTAP_Set:
  0005d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160222
  00064	48 89 44 24 50	 mov	 QWORD PTR tv68[rsp], rax
$LN8@TUNTAP_Set:
  00069	b9 01 00 00 00	 mov	 ecx, 1
  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00074	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv68[rsp]
  00079	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160223
  00085	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0008a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160224
  00091	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00096	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0009b	41 b9 03 00 00
	00		 mov	 r9d, 3
  000a1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160225
  000a8	ba d5 02 00 00	 mov	 edx, 725		; 000002d5H
  000ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160226
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 726  :         return -1;

  000ba	b8 ff ff ff ff	 mov	 eax, -1
  000bf	e9 23 01 00 00	 jmp	 $LN1@TUNTAP_Set
$LN2@TUNTAP_Set:

; 727  :     }
; 728  : 
; 729  :     if( !pszMACAddr || ParseMAC( pszMACAddr, mac ) != 0 )

  000c4	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR pszMACAddr$[rsp], 0
  000cd	74 1d		 je	 SHORT $LN5@TUNTAP_Set
  000cf	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR mac$[rsp]
  000d7	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR pszMACAddr$[rsp]
  000df	e8 00 00 00 00	 call	 ParseMAC
  000e4	85 c0		 test	 eax, eax
  000e6	0f 84 8b 00 00
	00		 je	 $LN4@TUNTAP_Set
$LN5@TUNTAP_Set:

; 730  :     {
; 731  :         // "Net device %s: Invalid MAC address %s"
; 732  :         WRMSG( HHC00145, "E", pszNetDevName, pszMACAddr ? pszMACAddr : "NULL" );

  000ec	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR pszMACAddr$[rsp], 0
  000f5	74 0f		 je	 SHORT $LN9@TUNTAP_Set
  000f7	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR pszMACAddr$[rsp]
  000ff	48 89 44 24 58	 mov	 QWORD PTR tv85[rsp], rax
  00104	eb 0c		 jmp	 SHORT $LN10@TUNTAP_Set
$LN9@TUNTAP_Set:
  00106	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160229
  0010d	48 89 44 24 58	 mov	 QWORD PTR tv85[rsp], rax
$LN10@TUNTAP_Set:
  00112	b9 01 00 00 00	 mov	 ecx, 1
  00117	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0011d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv85[rsp]
  00122	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00127	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR pszNetDevName$[rsp]
  0012f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00134	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160230
  0013b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00140	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160231
  00147	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0014c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00151	41 b9 03 00 00
	00		 mov	 r9d, 3
  00157	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160232
  0015e	ba dc 02 00 00	 mov	 edx, 732		; 000002dcH
  00163	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160233
  0016a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 733  :         return -1;

  00170	b8 ff ff ff ff	 mov	 eax, -1
  00175	eb 70		 jmp	 SHORT $LN1@TUNTAP_Set
$LN4@TUNTAP_Set:

; 734  :     }
; 735  : 
; 736  :     memset( &hifr, 0, sizeof( struct hifr ) );

  00177	48 8d 44 24 70	 lea	 rax, QWORD PTR hifr$[rsp]
  0017c	48 8b f8	 mov	 rdi, rax
  0017f	33 c0		 xor	 eax, eax
  00181	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00186	f3 aa		 rep stosb

; 737  :     STRLCPY( hifr.hifr_name, pszNetDevName );

  00188	41 b8 10 00 00
	00		 mov	 r8d, 16
  0018e	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR pszNetDevName$[rsp]
  00196	48 8d 4c 24 70	 lea	 rcx, QWORD PTR hifr$[rsp]
  0019b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 738  :     addr = (struct sockaddr*)&hifr.hifr_hwaddr;

  001a1	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR hifr$[rsp+16]
  001a9	48 89 44 24 60	 mov	 QWORD PTR addr$[rsp], rax

; 739  :     memcpy( addr->sa_data, mac, IFHWADDRLEN );

  001ae	48 8b 44 24 60	 mov	 rax, QWORD PTR addr$[rsp]
  001b3	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR mac$[rsp]
  001bb	48 8d 78 02	 lea	 rdi, QWORD PTR [rax+2]
  001bf	48 8b f1	 mov	 rsi, rcx
  001c2	b9 06 00 00 00	 mov	 ecx, 6
  001c7	f3 a4		 rep movsb

; 740  :     addr->sa_family = 1;    // ARPHRD_ETHER

  001c9	b8 01 00 00 00	 mov	 eax, 1
  001ce	48 8b 4c 24 60	 mov	 rcx, QWORD PTR addr$[rsp]
  001d3	66 89 01	 mov	 WORD PTR [rcx], ax

; 741  : 
; 742  :     return TUNTAP_IOCtl( 0, SIOCSIFHWADDR, (char*)&hifr );

  001d6	4c 8d 44 24 70	 lea	 r8, QWORD PTR hifr$[rsp]
  001db	ba 24 89 00 00	 mov	 edx, 35108		; 00008924H
  001e0	33 c9		 xor	 ecx, ecx
  001e2	e8 00 00 00 00	 call	 tt32_ioctl
$LN1@TUNTAP_Set:

; 743  : 
; 744  : }   // End of function  TUNTAP_SetMACAddr()

  001e7	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001ef	48 33 cc	 xor	 rcx, rsp
  001f2	e8 00 00 00 00	 call	 __security_check_cookie
  001f7	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  001fe	5f		 pop	 rdi
  001ff	5e		 pop	 rsi
  00200	c3		 ret	 0
TUNTAP_SetMACAddr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
rc$ = 80
tv68 = 88
addr$ = 96
tv136 = 104
hifr$ = 112
__$ArrayPad$ = 176
pszNetDevName$ = 208
ppszMACAddr$ = 216
TUNTAP_GetMACAddr PROC

; 657  : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 658  : #if defined(OPTION_TUNTAP_GETMACADDR)
; 659  :     struct hifr         hifr;
; 660  :     struct sockaddr*    addr;
; 661  :     int                 rc;
; 662  : 
; 663  :     if( !pszNetDevName || !*pszNetDevName )

  00024	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  0002d	74 13		 je	 SHORT $LN3@TUNTAP_Get
  0002f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  00037	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003a	85 c0		 test	 eax, eax
  0003c	0f 85 81 00 00
	00		 jne	 $LN2@TUNTAP_Get
$LN3@TUNTAP_Get:

; 664  :     {
; 665  :         // "Invalid net device name %s"
; 666  :         WRMSG( HHC00140, "E", pszNetDevName ? pszNetDevName : "NULL" );

  00042	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  0004b	74 0f		 je	 SHORT $LN7@TUNTAP_Get
  0004d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  00055	48 89 44 24 58	 mov	 QWORD PTR tv68[rsp], rax
  0005a	eb 0c		 jmp	 SHORT $LN8@TUNTAP_Get
$LN7@TUNTAP_Get:
  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160191
  00063	48 89 44 24 58	 mov	 QWORD PTR tv68[rsp], rax
$LN8@TUNTAP_Get:
  00068	b9 01 00 00 00	 mov	 ecx, 1
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00073	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv68[rsp]
  00078	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160192
  00084	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160193
  00090	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00095	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0009a	41 b9 03 00 00
	00		 mov	 r9d, 3
  000a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160194
  000a7	ba 9a 02 00 00	 mov	 edx, 666		; 0000029aH
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160195
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 667  :         return -1;

  000b9	b8 ff ff ff ff	 mov	 eax, -1
  000be	e9 73 01 00 00	 jmp	 $LN1@TUNTAP_Get
$LN2@TUNTAP_Get:

; 668  :     }
; 669  : 
; 670  :     if( !ppszMACAddr )

  000c3	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR ppszMACAddr$[rsp], 0
  000cc	75 69		 jne	 SHORT $LN4@TUNTAP_Get

; 671  :     {
; 672  :         // "Error in function %s: %s"
; 673  :         WRMSG( HHC00136, "E", "TUNTAP_GetMACAddr", "Invalid parameters" );

  000ce	b9 01 00 00 00	 mov	 ecx, 1
  000d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160197
  000e0	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160198
  000ec	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160199
  000f8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160200
  00104	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00109	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0010e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00114	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160201
  0011b	ba a1 02 00 00	 mov	 edx, 673		; 000002a1H
  00120	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160202
  00127	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 674  :         return -1;

  0012d	b8 ff ff ff ff	 mov	 eax, -1
  00132	e9 ff 00 00 00	 jmp	 $LN1@TUNTAP_Get
$LN4@TUNTAP_Get:

; 675  :     }
; 676  : 
; 677  :     *ppszMACAddr = NULL;

  00137	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR ppszMACAddr$[rsp]
  0013f	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 678  : 
; 679  :     memset( &hifr, 0, sizeof( struct hifr ) );

  00146	48 8d 44 24 70	 lea	 rax, QWORD PTR hifr$[rsp]
  0014b	48 8b f8	 mov	 rdi, rax
  0014e	33 c0		 xor	 eax, eax
  00150	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00155	f3 aa		 rep stosb

; 680  :     STRLCPY( hifr.hifr_name, pszNetDevName );

  00157	41 b8 10 00 00
	00		 mov	 r8d, 16
  0015d	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR pszNetDevName$[rsp]
  00165	48 8d 4c 24 70	 lea	 rcx, QWORD PTR hifr$[rsp]
  0016a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 681  :     addr = (struct sockaddr*)&hifr.hifr_hwaddr;

  00170	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR hifr$[rsp+16]
  00178	48 89 44 24 60	 mov	 QWORD PTR addr$[rsp], rax

; 682  :     addr->sa_family = 1;    // ARPHRD_ETHER

  0017d	b8 01 00 00 00	 mov	 eax, 1
  00182	48 8b 4c 24 60	 mov	 rcx, QWORD PTR addr$[rsp]
  00187	66 89 01	 mov	 WORD PTR [rcx], ax

; 683  : 
; 684  : #if defined( OPTION_W32_CTCI )
; 685  :     rc = TUNTAP_IOCtl( 0, SIOCGIFHWADDR, (char*)&hifr );

  0018a	4c 8d 44 24 70	 lea	 r8, QWORD PTR hifr$[rsp]
  0018f	ba 27 89 00 00	 mov	 edx, 35111		; 00008927H
  00194	33 c9		 xor	 ecx, ecx
  00196	e8 00 00 00 00	 call	 tt32_ioctl
  0019b	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 686  : #else // (non-Win32 platforms)
; 687  :     {
; 688  :         int sockfd = socket( AF_INET, SOCK_DGRAM, 0 );
; 689  :         rc = ioctl( sockfd, SIOCGIFHWADDR, &hifr );
; 690  :         close( sockfd );
; 691  :     }
; 692  : #endif
; 693  :     if( rc < 0 )

  0019f	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  001a4	7d 77		 jge	 SHORT $LN5@TUNTAP_Get

; 694  :     {
; 695  :         // "Error in function %s: %s"
; 696  :         WRMSG( HHC00136, "E", "TUNTAP_GetMACAddr", strerror( errno ));

  001a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  001ac	8b 08		 mov	 ecx, DWORD PTR [rax]
  001ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  001b4	48 89 44 24 68	 mov	 QWORD PTR tv136[rsp], rax
  001b9	b9 01 00 00 00	 mov	 ecx, 1
  001be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001c4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv136[rsp]
  001c9	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160204
  001d5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160205
  001e1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160206
  001ed	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001f2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f7	41 b9 03 00 00
	00		 mov	 r9d, 3
  001fd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160207
  00204	ba b8 02 00 00	 mov	 edx, 696		; 000002b8H
  00209	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160208
  00210	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 697  :         return -1;

  00216	b8 ff ff ff ff	 mov	 eax, -1
  0021b	eb 19		 jmp	 SHORT $LN1@TUNTAP_Get
$LN5@TUNTAP_Get:

; 698  :     }
; 699  : 
; 700  :     return FormatMAC( ppszMACAddr, (BYTE*) addr->sa_data );

  0021d	48 8b 44 24 60	 mov	 rax, QWORD PTR addr$[rsp]
  00222	48 83 c0 02	 add	 rax, 2
  00226	48 8b d0	 mov	 rdx, rax
  00229	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR ppszMACAddr$[rsp]
  00231	e8 00 00 00 00	 call	 FormatMAC
$LN1@TUNTAP_Get:

; 701  : #else // defined(OPTION_TUNTAP_GETMACADDR)
; 702  :     UNREFERENCED(pszNetDevName);
; 703  :     UNREFERENCED(ppszMACAddr);
; 704  :     // "Error in function %s: %s"
; 705  :     WRMSG( HHC00136, "E", "TUNTAP_GetMACAddr", "Unsupported" );
; 706  :     return -1; // (unsupported)
; 707  : #endif // defined(OPTION_TUNTAP_GETMACADDR)
; 708  : }   // End of function  TUNTAP_GetMACAddr()

  00236	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0023e	48 33 cc	 xor	 rcx, rsp
  00241	e8 00 00 00 00	 call	 __security_check_cookie
  00246	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0024d	5f		 pop	 rdi
  0024e	c3		 ret	 0
TUNTAP_GetMACAddr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
iMTU$ = 80
tv68 = 88
tv83 = 96
hifr$ = 112
__$ArrayPad$ = 176
pszNetDevName$ = 208
pszMTU$ = 216
TUNTAP_SetMTU PROC

; 618  : {

$LN13:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 619  :     struct hifr         hifr;
; 620  :     int                 iMTU;
; 621  : 
; 622  :     if( !pszNetDevName || !*pszNetDevName )

  00024	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  0002d	74 13		 je	 SHORT $LN3@TUNTAP_Set
  0002f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  00037	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003a	85 c0		 test	 eax, eax
  0003c	0f 85 81 00 00
	00		 jne	 $LN2@TUNTAP_Set
$LN3@TUNTAP_Set:

; 623  :     {
; 624  :         // "Invalid net device name %s"
; 625  :         WRMSG( HHC00140, "E", pszNetDevName ? pszNetDevName : "NULL" );

  00042	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  0004b	74 0f		 je	 SHORT $LN9@TUNTAP_Set
  0004d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  00055	48 89 44 24 58	 mov	 QWORD PTR tv68[rsp], rax
  0005a	eb 0c		 jmp	 SHORT $LN10@TUNTAP_Set
$LN9@TUNTAP_Set:
  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160158
  00063	48 89 44 24 58	 mov	 QWORD PTR tv68[rsp], rax
$LN10@TUNTAP_Set:
  00068	b9 01 00 00 00	 mov	 ecx, 1
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00073	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv68[rsp]
  00078	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160159
  00084	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160160
  00090	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00095	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0009a	41 b9 03 00 00
	00		 mov	 r9d, 3
  000a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160161
  000a7	ba 71 02 00 00	 mov	 edx, 625		; 00000271H
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160162
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 626  :         return -1;

  000b9	b8 ff ff ff ff	 mov	 eax, -1
  000be	e9 7d 01 00 00	 jmp	 $LN1@TUNTAP_Set
$LN2@TUNTAP_Set:

; 627  :     }
; 628  : 
; 629  :     if( !pszMTU  || !*pszMTU )

  000c3	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR pszMTU$[rsp], 0
  000cc	74 13		 je	 SHORT $LN5@TUNTAP_Set
  000ce	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR pszMTU$[rsp]
  000d6	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000d9	85 c0		 test	 eax, eax
  000db	0f 85 8e 00 00
	00		 jne	 $LN4@TUNTAP_Set
$LN5@TUNTAP_Set:

; 630  :     {
; 631  :         // "Net device %s: Invalid MTU %s"
; 632  :         WRMSG( HHC00144, "E", pszNetDevName, pszMTU ? pszMTU : "NULL" );

  000e1	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR pszMTU$[rsp], 0
  000ea	74 0f		 je	 SHORT $LN11@TUNTAP_Set
  000ec	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR pszMTU$[rsp]
  000f4	48 89 44 24 60	 mov	 QWORD PTR tv83[rsp], rax
  000f9	eb 0c		 jmp	 SHORT $LN12@TUNTAP_Set
$LN11@TUNTAP_Set:
  000fb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160165
  00102	48 89 44 24 60	 mov	 QWORD PTR tv83[rsp], rax
$LN12@TUNTAP_Set:
  00107	b9 01 00 00 00	 mov	 ecx, 1
  0010c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00112	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv83[rsp]
  00117	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0011c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR pszNetDevName$[rsp]
  00124	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00129	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160166
  00130	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00135	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160167
  0013c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00141	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00146	41 b9 03 00 00
	00		 mov	 r9d, 3
  0014c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160168
  00153	ba 78 02 00 00	 mov	 edx, 632		; 00000278H
  00158	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160169
  0015f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 633  :         return -1;

  00165	b8 ff ff ff ff	 mov	 eax, -1
  0016a	e9 d1 00 00 00	 jmp	 $LN1@TUNTAP_Set
$LN4@TUNTAP_Set:

; 634  :     }
; 635  : 
; 636  :     iMTU = atoi( pszMTU );

  0016f	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR pszMTU$[rsp]
  00177	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  0017d	89 44 24 50	 mov	 DWORD PTR iMTU$[rsp], eax

; 637  :     if( iMTU < 46 || iMTU > 65536 )

  00181	83 7c 24 50 2e	 cmp	 DWORD PTR iMTU$[rsp], 46 ; 0000002eH
  00186	7c 0a		 jl	 SHORT $LN7@TUNTAP_Set
  00188	81 7c 24 50 00
	00 01 00	 cmp	 DWORD PTR iMTU$[rsp], 65536 ; 00010000H
  00190	7e 68		 jle	 SHORT $LN6@TUNTAP_Set
$LN7@TUNTAP_Set:

; 638  :     {
; 639  :         // "Net device %s: Invalid MTU %s"
; 640  :         WRMSG( HHC00144, "E", pszNetDevName, pszMTU );

  00192	b9 01 00 00 00	 mov	 ecx, 1
  00197	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0019d	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR pszMTU$[rsp]
  001a5	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001aa	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR pszNetDevName$[rsp]
  001b2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160172
  001be	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160173
  001ca	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001cf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001d4	41 b9 03 00 00
	00		 mov	 r9d, 3
  001da	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160174
  001e1	ba 80 02 00 00	 mov	 edx, 640		; 00000280H
  001e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160175
  001ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 641  :         return -1;

  001f3	b8 ff ff ff ff	 mov	 eax, -1
  001f8	eb 46		 jmp	 SHORT $LN1@TUNTAP_Set
$LN6@TUNTAP_Set:

; 642  :     }
; 643  : 
; 644  :     memset( &hifr, 0, sizeof( struct hifr ) );

  001fa	48 8d 44 24 70	 lea	 rax, QWORD PTR hifr$[rsp]
  001ff	48 8b f8	 mov	 rdi, rax
  00202	33 c0		 xor	 eax, eax
  00204	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00209	f3 aa		 rep stosb

; 645  :     STRLCPY( hifr.hifr_name, pszNetDevName );

  0020b	41 b8 10 00 00
	00		 mov	 r8d, 16
  00211	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR pszNetDevName$[rsp]
  00219	48 8d 4c 24 70	 lea	 rcx, QWORD PTR hifr$[rsp]
  0021e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 646  :     hifr.hifr_mtu = iMTU;

  00224	8b 44 24 50	 mov	 eax, DWORD PTR iMTU$[rsp]
  00228	89 84 24 80 00
	00 00		 mov	 DWORD PTR hifr$[rsp+16], eax

; 647  : 
; 648  :     return TUNTAP_IOCtl( 0, SIOCSIFMTU, (char*)&hifr );

  0022f	4c 8d 44 24 70	 lea	 r8, QWORD PTR hifr$[rsp]
  00234	ba 22 89 00 00	 mov	 edx, 35106		; 00008922H
  00239	33 c9		 xor	 ecx, ecx
  0023b	e8 00 00 00 00	 call	 tt32_ioctl
$LN1@TUNTAP_Set:

; 649  : }   // End of function  TUNTAP_SetMTU()

  00240	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00248	48 33 cc	 xor	 rcx, rsp
  0024b	e8 00 00 00 00	 call	 __security_check_cookie
  00250	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  00257	5f		 pop	 rdi
  00258	c3		 ret	 0
TUNTAP_SetMTU ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
rc$ = 80
tv72 = 88
tv139 = 96
hifr$ = 112
szMTU$ = 176
__$ArrayPad$ = 184
pszNetDevName$ = 208
ppszMTU$ = 216
TUNTAP_GetMTU PROC

; 562  : {

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 563  :     struct hifr         hifr;
; 564  :     int                 rc;
; 565  :     char                szMTU[8] = {0};

  00024	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR szMTU$[rsp]
  0002c	48 8b f8	 mov	 rdi, rax
  0002f	33 c0		 xor	 eax, eax
  00031	b9 08 00 00 00	 mov	 ecx, 8
  00036	f3 aa		 rep stosb

; 566  : 
; 567  :     if( !pszNetDevName || !*pszNetDevName )

  00038	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  00041	74 13		 je	 SHORT $LN3@TUNTAP_Get
  00043	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  0004b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0004e	85 c0		 test	 eax, eax
  00050	0f 85 81 00 00
	00		 jne	 $LN2@TUNTAP_Get
$LN3@TUNTAP_Get:

; 568  :     {
; 569  :         // "Invalid net device name %s"
; 570  :         WRMSG( HHC00140, "E", pszNetDevName ? pszNetDevName : "NULL" );

  00056	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  0005f	74 0f		 je	 SHORT $LN8@TUNTAP_Get
  00061	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  00069	48 89 44 24 58	 mov	 QWORD PTR tv72[rsp], rax
  0006e	eb 0c		 jmp	 SHORT $LN9@TUNTAP_Get
$LN8@TUNTAP_Get:
  00070	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160127
  00077	48 89 44 24 58	 mov	 QWORD PTR tv72[rsp], rax
$LN9@TUNTAP_Get:
  0007c	b9 01 00 00 00	 mov	 ecx, 1
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00087	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv72[rsp]
  0008c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00091	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160128
  00098	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160129
  000a4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000a9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ae	41 b9 03 00 00
	00		 mov	 r9d, 3
  000b4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160130
  000bb	ba 3a 02 00 00	 mov	 edx, 570		; 0000023aH
  000c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160131
  000c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 571  :         return -1;

  000cd	b8 ff ff ff ff	 mov	 eax, -1
  000d2	e9 9e 01 00 00	 jmp	 $LN1@TUNTAP_Get
$LN2@TUNTAP_Get:

; 572  :     }
; 573  : 
; 574  :     if( !ppszMTU )

  000d7	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR ppszMTU$[rsp], 0
  000e0	75 69		 jne	 SHORT $LN4@TUNTAP_Get

; 575  :     {
; 576  :         // HHC00136 "Error in function %s: %s"
; 577  :         WRMSG( HHC00136, "E", "TUNTAP_GetMTU", "Invalid parameters" );

  000e2	b9 01 00 00 00	 mov	 ecx, 1
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160133
  000f4	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160134
  00100	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00105	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160135
  0010c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00111	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160136
  00118	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0011d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00122	41 b9 03 00 00
	00		 mov	 r9d, 3
  00128	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160137
  0012f	ba 41 02 00 00	 mov	 edx, 577		; 00000241H
  00134	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160138
  0013b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 578  :         return -1;

  00141	b8 ff ff ff ff	 mov	 eax, -1
  00146	e9 2a 01 00 00	 jmp	 $LN1@TUNTAP_Get
$LN4@TUNTAP_Get:

; 579  :     }
; 580  : 
; 581  :     *ppszMTU = NULL;

  0014b	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR ppszMTU$[rsp]
  00153	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 582  : 
; 583  :     memset( &hifr, 0, sizeof( struct hifr ) );

  0015a	48 8d 44 24 70	 lea	 rax, QWORD PTR hifr$[rsp]
  0015f	48 8b f8	 mov	 rdi, rax
  00162	33 c0		 xor	 eax, eax
  00164	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00169	f3 aa		 rep stosb

; 584  :     STRLCPY( hifr.hifr_name, pszNetDevName );

  0016b	41 b8 10 00 00
	00		 mov	 r8d, 16
  00171	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR pszNetDevName$[rsp]
  00179	48 8d 4c 24 70	 lea	 rcx, QWORD PTR hifr$[rsp]
  0017e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 585  : 
; 586  : #if defined( OPTION_W32_CTCI )
; 587  :     rc = TUNTAP_IOCtl( 0, SIOCGIFMTU, (char*)&hifr );

  00184	4c 8d 44 24 70	 lea	 r8, QWORD PTR hifr$[rsp]
  00189	ba 21 89 00 00	 mov	 edx, 35105		; 00008921H
  0018e	33 c9		 xor	 ecx, ecx
  00190	e8 00 00 00 00	 call	 tt32_ioctl
  00195	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 588  : #else // (non-Win32 platforms)
; 589  :     {
; 590  :         int sockfd = socket( AF_INET, SOCK_DGRAM, 0 );
; 591  :         rc = ioctl( sockfd, SIOCGIFMTU, &hifr );
; 592  :         close( sockfd );
; 593  :     }
; 594  : #endif
; 595  :     if( rc < 0 )

  00199	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  0019e	7d 77		 jge	 SHORT $LN5@TUNTAP_Get

; 596  :     {
; 597  :         // "Error in function %s: %s"
; 598  :         WRMSG( HHC00136, "E", "TUNTAP_GetMTU", strerror( errno ));

  001a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  001a6	8b 08		 mov	 ecx, DWORD PTR [rax]
  001a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  001ae	48 89 44 24 60	 mov	 QWORD PTR tv139[rsp], rax
  001b3	b9 01 00 00 00	 mov	 ecx, 1
  001b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001be	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv139[rsp]
  001c3	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160140
  001cf	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160141
  001db	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160142
  001e7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f1	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160143
  001fe	ba 56 02 00 00	 mov	 edx, 598		; 00000256H
  00203	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160144
  0020a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 599  :         return -1;

  00210	b8 ff ff ff ff	 mov	 eax, -1
  00215	eb 5e		 jmp	 SHORT $LN1@TUNTAP_Get
$LN5@TUNTAP_Get:

; 600  :     }
; 601  : 
; 602  :     MSGBUF( szMTU, "%u", hifr.hifr_mtu );

  00217	44 8b 8c 24 80
	00 00 00	 mov	 r9d, DWORD PTR hifr$[rsp+16]
  0021f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160145
  00226	ba 08 00 00 00	 mov	 edx, 8
  0022b	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR szMTU$[rsp]
  00233	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 603  :     if (!(*ppszMTU = strdup( szMTU )))

  00239	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR szMTU$[rsp]
  00241	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00247	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR ppszMTU$[rsp]
  0024f	48 89 01	 mov	 QWORD PTR [rcx], rax
  00252	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR ppszMTU$[rsp]
  0025a	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0025e	75 13		 jne	 SHORT $LN6@TUNTAP_Get

; 604  :     {
; 605  :         errno = ENOMEM;

  00260	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00266	c7 00 0c 00 00
	00		 mov	 DWORD PTR [rax], 12

; 606  :         return -1;

  0026c	b8 ff ff ff ff	 mov	 eax, -1
  00271	eb 02		 jmp	 SHORT $LN1@TUNTAP_Get
$LN6@TUNTAP_Get:

; 607  :     }
; 608  : 
; 609  :     return 0;

  00273	33 c0		 xor	 eax, eax
$LN1@TUNTAP_Get:

; 610  : }   // End of function  TUNTAP_GetMTU()

  00275	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0027d	48 33 cc	 xor	 rcx, rsp
  00280	e8 00 00 00 00	 call	 __security_check_cookie
  00285	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0028c	5f		 pop	 rdi
  0028d	c3		 ret	 0
TUNTAP_GetMTU ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
iPfxSiz$ = 80
tv68 = 88
hifr$ = 96
__$ArrayPad$ = 160
pszNetDevName$ = 192
pszIPAddr6$ = 200
pszPrefixSize6$ = 208
TUNTAP_SetIPAddr6 PROC

; 505  : {

$LN12:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 81 ec b0 00
	00 00		 sub	 rsp, 176		; 000000b0H
  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001e	48 33 c4	 xor	 rax, rsp
  00021	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 506  :     struct hifr         hifr;
; 507  :     int                 iPfxSiz;
; 508  : 
; 509  :     if( !pszNetDevName || !*pszNetDevName )

  00029	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  00032	74 13		 je	 SHORT $LN3@TUNTAP_Set
  00034	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  0003c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003f	85 c0		 test	 eax, eax
  00041	0f 85 81 00 00
	00		 jne	 $LN2@TUNTAP_Set
$LN3@TUNTAP_Set:

; 510  :     {
; 511  :         // "Invalid net device name %s"
; 512  :         WRMSG( HHC00140, "E", pszNetDevName ? pszNetDevName : "NULL" );

  00047	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  00050	74 0f		 je	 SHORT $LN10@TUNTAP_Set
  00052	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  0005a	48 89 44 24 58	 mov	 QWORD PTR tv68[rsp], rax
  0005f	eb 0c		 jmp	 SHORT $LN11@TUNTAP_Set
$LN10@TUNTAP_Set:
  00061	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160086
  00068	48 89 44 24 58	 mov	 QWORD PTR tv68[rsp], rax
$LN11@TUNTAP_Set:
  0006d	b9 01 00 00 00	 mov	 ecx, 1
  00072	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00078	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv68[rsp]
  0007d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160087
  00089	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160088
  00095	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0009a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0009f	41 b9 03 00 00
	00		 mov	 r9d, 3
  000a5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160089
  000ac	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  000b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160090
  000b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 513  :         return -1;

  000be	b8 ff ff ff ff	 mov	 eax, -1
  000c3	e9 66 02 00 00	 jmp	 $LN1@TUNTAP_Set
$LN2@TUNTAP_Set:

; 514  :     }
; 515  : 
; 516  :     if( !pszIPAddr6 )

  000c8	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR pszIPAddr6$[rsp], 0
  000d1	75 6a		 jne	 SHORT $LN4@TUNTAP_Set

; 517  :     {
; 518  :         // "Net device %s: Invalid IP %s"
; 519  :         WRMSG( HHC00141, "E", pszNetDevName, "NULL" );

  000d3	b9 01 00 00 00	 mov	 ecx, 1
  000d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160092
  000e5	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000ea	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR pszNetDevName$[rsp]
  000f2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160093
  000fe	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00103	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160094
  0010a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0010f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00114	41 b9 03 00 00
	00		 mov	 r9d, 3
  0011a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160095
  00121	ba 07 02 00 00	 mov	 edx, 519		; 00000207H
  00126	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160096
  0012d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 520  :         return -1;

  00133	b8 ff ff ff ff	 mov	 eax, -1
  00138	e9 f1 01 00 00	 jmp	 $LN1@TUNTAP_Set
$LN4@TUNTAP_Set:

; 521  :     }
; 522  : 
; 523  :     if( !pszPrefixSize6 )

  0013d	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR pszPrefixSize6$[rsp], 0
  00146	75 6a		 jne	 SHORT $LN5@TUNTAP_Set

; 524  :     {
; 525  :         // "Net device %s: Invalid prefix length %s"
; 526  :         WRMSG( HHC00153, "E", pszNetDevName, "NULL" );

  00148	b9 01 00 00 00	 mov	 ecx, 1
  0014d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00153	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160098
  0015a	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0015f	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR pszNetDevName$[rsp]
  00167	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0016c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160099
  00173	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00178	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160100
  0017f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00184	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00189	41 b9 03 00 00
	00		 mov	 r9d, 3
  0018f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160101
  00196	ba 0e 02 00 00	 mov	 edx, 526		; 0000020eH
  0019b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160102
  001a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 527  :         return -1;

  001a8	b8 ff ff ff ff	 mov	 eax, -1
  001ad	e9 7c 01 00 00	 jmp	 $LN1@TUNTAP_Set
$LN5@TUNTAP_Set:

; 528  :     }
; 529  : 
; 530  :     iPfxSiz = atoi( pszPrefixSize6 );

  001b2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR pszPrefixSize6$[rsp]
  001ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  001c0	89 44 24 50	 mov	 DWORD PTR iPfxSiz$[rsp], eax

; 531  :     if( iPfxSiz < 0 || iPfxSiz > 128 )

  001c4	83 7c 24 50 00	 cmp	 DWORD PTR iPfxSiz$[rsp], 0
  001c9	7c 0a		 jl	 SHORT $LN7@TUNTAP_Set
  001cb	81 7c 24 50 80
	00 00 00	 cmp	 DWORD PTR iPfxSiz$[rsp], 128 ; 00000080H
  001d3	7e 6b		 jle	 SHORT $LN6@TUNTAP_Set
$LN7@TUNTAP_Set:

; 532  :     {
; 533  :         // "Net device %s: Invalid prefix length %s"
; 534  :         WRMSG( HHC00153, "E", pszNetDevName, pszPrefixSize6 );

  001d5	b9 01 00 00 00	 mov	 ecx, 1
  001da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001e0	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR pszPrefixSize6$[rsp]
  001e8	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001ed	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR pszNetDevName$[rsp]
  001f5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160105
  00201	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00206	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160106
  0020d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00212	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00217	41 b9 03 00 00
	00		 mov	 r9d, 3
  0021d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160107
  00224	ba 16 02 00 00	 mov	 edx, 534		; 00000216H
  00229	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160108
  00230	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 535  :         return -1;

  00236	b8 ff ff ff ff	 mov	 eax, -1
  0023b	e9 ee 00 00 00	 jmp	 $LN1@TUNTAP_Set
$LN6@TUNTAP_Set:

; 536  :     }
; 537  : 
; 538  :     memset( &hifr, 0, sizeof( struct hifr ) );

  00240	48 8d 44 24 60	 lea	 rax, QWORD PTR hifr$[rsp]
  00245	48 8b f8	 mov	 rdi, rax
  00248	33 c0		 xor	 eax, eax
  0024a	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0024f	f3 aa		 rep stosb

; 539  :     STRLCPY( hifr.hifr_name, pszNetDevName );

  00251	41 b8 10 00 00
	00		 mov	 r8d, 16
  00257	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR pszNetDevName$[rsp]
  0025f	48 8d 4c 24 60	 lea	 rcx, QWORD PTR hifr$[rsp]
  00264	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 540  : 
; 541  :     if( hinet_pton( AF_INET6, pszIPAddr6, &hifr.hifr6_addr ) != 1 )

  0026a	4c 8d 84 24 80
	00 00 00	 lea	 r8, QWORD PTR hifr$[rsp+32]
  00272	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR pszIPAddr6$[rsp]
  0027a	b9 17 00 00 00	 mov	 ecx, 23
  0027f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_inet_pton
  00285	83 f8 01	 cmp	 eax, 1
  00288	74 68		 je	 SHORT $LN8@TUNTAP_Set

; 542  :     {
; 543  :         // "Net device %s: Invalid IP %s"
; 544  :         WRMSG( HHC00141, "E", pszNetDevName, pszIPAddr6 );

  0028a	b9 01 00 00 00	 mov	 ecx, 1
  0028f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00295	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR pszIPAddr6$[rsp]
  0029d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002a2	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR pszNetDevName$[rsp]
  002aa	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160110
  002b6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160111
  002c2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002c7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002cc	41 b9 03 00 00
	00		 mov	 r9d, 3
  002d2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160112
  002d9	ba 20 02 00 00	 mov	 edx, 544		; 00000220H
  002de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160113
  002e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 545  :         return -1;

  002eb	b8 ff ff ff ff	 mov	 eax, -1
  002f0	eb 3c		 jmp	 SHORT $LN1@TUNTAP_Set
$LN8@TUNTAP_Set:

; 546  :     }
; 547  : 
; 548  :     hifr.hifr6_prefixlen = iPfxSiz;

  002f2	8b 44 24 50	 mov	 eax, DWORD PTR iPfxSiz$[rsp]
  002f6	89 84 24 90 00
	00 00		 mov	 DWORD PTR hifr$[rsp+48], eax

; 549  :     hifr.hifr6_ifindex = hif_nametoindex( pszNetDevName );

  002fd	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR pszNetDevName$[rsp]
  00305	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_if_nametoindex
  0030b	89 84 24 94 00
	00 00		 mov	 DWORD PTR hifr$[rsp+52], eax

; 550  :     hifr.hifr_afamily = AF_INET6;

  00312	c7 84 24 98 00
	00 00 17 00 00
	00		 mov	 DWORD PTR hifr$[rsp+56], 23

; 551  : 
; 552  :     return TUNTAP_IOCtl( 0, SIOCSIFADDR, (char*)&hifr );

  0031d	4c 8d 44 24 60	 lea	 r8, QWORD PTR hifr$[rsp]
  00322	ba 16 89 00 00	 mov	 edx, 35094		; 00008916H
  00327	33 c9		 xor	 ecx, ecx
  00329	e8 00 00 00 00	 call	 tt32_ioctl
$LN1@TUNTAP_Set:

; 553  : }   // End of function  TUNTAP_SetIPAddr6()

  0032e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00336	48 33 cc	 xor	 rcx, rsp
  00339	e8 00 00 00 00	 call	 __security_check_cookie
  0033e	48 81 c4 b0 00
	00 00		 add	 rsp, 176		; 000000b0H
  00345	5f		 pop	 rdi
  00346	c3		 ret	 0
TUNTAP_SetIPAddr6 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
tv94 = 80
tv68 = 88
sin$ = 96
tv128 = 104
hifr$ = 112
__$ArrayPad$ = 176
pszNetDevName$ = 208
pszBCastAddr$ = 216
TUNTAP_SetBCastAddr PROC

; 468  : {

$LN13:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 469  :     struct hifr         hifr;
; 470  :     struct sockaddr_in* sin;
; 471  : 
; 472  :     if( !pszNetDevName || !*pszNetDevName )

  00024	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  0002d	74 13		 je	 SHORT $LN3@TUNTAP_Set
  0002f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  00037	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003a	85 c0		 test	 eax, eax
  0003c	0f 85 81 00 00
	00		 jne	 $LN2@TUNTAP_Set
$LN3@TUNTAP_Set:

; 473  :     {
; 474  :         // "Invalid net device name %s"
; 475  :         WRMSG( HHC00140, "E", pszNetDevName ? pszNetDevName : "NULL" );

  00042	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  0004b	74 0f		 je	 SHORT $LN7@TUNTAP_Set
  0004d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  00055	48 89 44 24 58	 mov	 QWORD PTR tv68[rsp], rax
  0005a	eb 0c		 jmp	 SHORT $LN8@TUNTAP_Set
$LN7@TUNTAP_Set:
  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160061
  00063	48 89 44 24 58	 mov	 QWORD PTR tv68[rsp], rax
$LN8@TUNTAP_Set:
  00068	b9 01 00 00 00	 mov	 ecx, 1
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00073	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv68[rsp]
  00078	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160062
  00084	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160063
  00090	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00095	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0009a	41 b9 03 00 00
	00		 mov	 r9d, 3
  000a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160064
  000a7	ba db 01 00 00	 mov	 edx, 475		; 000001dbH
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160065
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 476  :         return -1;

  000b9	b8 ff ff ff ff	 mov	 eax, -1
  000be	e9 26 01 00 00	 jmp	 $LN1@TUNTAP_Set
$LN2@TUNTAP_Set:

; 477  :     }
; 478  : 
; 479  :     memset( &hifr, 0, sizeof( struct hifr ) );

  000c3	48 8d 44 24 70	 lea	 rax, QWORD PTR hifr$[rsp]
  000c8	48 8b f8	 mov	 rdi, rax
  000cb	33 c0		 xor	 eax, eax
  000cd	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000d2	f3 aa		 rep stosb

; 480  :     STRLCPY( hifr.hifr_name, pszNetDevName );

  000d4	41 b8 10 00 00
	00		 mov	 r8d, 16
  000da	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR pszNetDevName$[rsp]
  000e2	48 8d 4c 24 70	 lea	 rcx, QWORD PTR hifr$[rsp]
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 481  :     sin = (struct sockaddr_in*)&hifr.hifr_broadaddr;

  000ed	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR hifr$[rsp+16]
  000f5	48 89 44 24 60	 mov	 QWORD PTR sin$[rsp], rax

; 482  :     sin->sin_family = AF_INET;

  000fa	b8 02 00 00 00	 mov	 eax, 2
  000ff	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sin$[rsp]
  00104	66 89 01	 mov	 WORD PTR [rcx], ax

; 483  :     set_sockaddr_in_sin_len( sin );
; 484  : 
; 485  :     if( !pszBCastAddr  ||

  00107	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR pszBCastAddr$[rsp], 0
  00110	74 22		 je	 SHORT $LN5@TUNTAP_Set
  00112	48 8b 44 24 60	 mov	 rax, QWORD PTR sin$[rsp]
  00117	48 83 c0 04	 add	 rax, 4
  0011b	48 8b d0	 mov	 rdx, rax
  0011e	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR pszBCastAddr$[rsp]
  00126	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_aton
  0012c	85 c0		 test	 eax, eax
  0012e	0f 85 a4 00 00
	00		 jne	 $LN4@TUNTAP_Set
$LN5@TUNTAP_Set:

; 486  :         !inet_aton( pszBCastAddr, &sin->sin_addr ) )
; 487  :     {
; 488  :         // "Net device %s: Invalid broadcast address %s"
; 489  :         WRMSG( HHC00155, "E", pszNetDevName, !pszBCastAddr ? "NULL" : pszBCastAddr );

  00134	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR pszBCastAddr$[rsp], 0
  0013d	75 0a		 jne	 SHORT $LN9@TUNTAP_Set
  0013f	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv94[rsp], 1
  00147	eb 08		 jmp	 SHORT $LN10@TUNTAP_Set
$LN9@TUNTAP_Set:
  00149	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv94[rsp], 0
$LN10@TUNTAP_Set:
  00151	83 7c 24 50 00	 cmp	 DWORD PTR tv94[rsp], 0
  00156	74 0e		 je	 SHORT $LN11@TUNTAP_Set
  00158	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160068
  0015f	48 89 44 24 68	 mov	 QWORD PTR tv128[rsp], rax
  00164	eb 0d		 jmp	 SHORT $LN12@TUNTAP_Set
$LN11@TUNTAP_Set:
  00166	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR pszBCastAddr$[rsp]
  0016e	48 89 44 24 68	 mov	 QWORD PTR tv128[rsp], rax
$LN12@TUNTAP_Set:
  00173	b9 01 00 00 00	 mov	 ecx, 1
  00178	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0017e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv128[rsp]
  00183	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00188	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR pszNetDevName$[rsp]
  00190	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160069
  0019c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160070
  001a8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ad	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b2	41 b9 03 00 00
	00		 mov	 r9d, 3
  001b8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160071
  001bf	ba e9 01 00 00	 mov	 edx, 489		; 000001e9H
  001c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160072
  001cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 490  :             return -1;

  001d1	b8 ff ff ff ff	 mov	 eax, -1
  001d6	eb 11		 jmp	 SHORT $LN1@TUNTAP_Set
$LN4@TUNTAP_Set:

; 491  :     }
; 492  : 
; 493  :     return TUNTAP_IOCtl( 0, SIOCSIFBRDADDR, (char*)&hifr );

  001d8	4c 8d 44 24 70	 lea	 r8, QWORD PTR hifr$[rsp]
  001dd	ba 1a 89 00 00	 mov	 edx, 35098		; 0000891aH
  001e2	33 c9		 xor	 ecx, ecx
  001e4	e8 00 00 00 00	 call	 tt32_ioctl
$LN1@TUNTAP_Set:

; 494  : }   // End of function  TUNTAP_SetBCastAddr()

  001e9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001f1	48 33 cc	 xor	 rcx, rsp
  001f4	e8 00 00 00 00	 call	 __security_check_cookie
  001f9	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  00200	5f		 pop	 rdi
  00201	c3		 ret	 0
TUNTAP_SetBCastAddr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
tv94 = 80
tv68 = 88
sin$ = 96
tv128 = 104
hifr$ = 112
__$ArrayPad$ = 176
pszNetDevName$ = 208
pszNetMask$ = 216
TUNTAP_SetNetMask PROC

; 432  : {

$LN13:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 433  :     struct hifr         hifr;
; 434  :     struct sockaddr_in* sin;
; 435  : 
; 436  :     if( !pszNetDevName || !*pszNetDevName )

  00024	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  0002d	74 13		 je	 SHORT $LN3@TUNTAP_Set
  0002f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  00037	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003a	85 c0		 test	 eax, eax
  0003c	0f 85 81 00 00
	00		 jne	 $LN2@TUNTAP_Set
$LN3@TUNTAP_Set:

; 437  :     {
; 438  :         // "Invalid net device name %s"
; 439  :         WRMSG( HHC00140, "E", pszNetDevName ? pszNetDevName : "NULL" );

  00042	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  0004b	74 0f		 je	 SHORT $LN7@TUNTAP_Set
  0004d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  00055	48 89 44 24 58	 mov	 QWORD PTR tv68[rsp], rax
  0005a	eb 0c		 jmp	 SHORT $LN8@TUNTAP_Set
$LN7@TUNTAP_Set:
  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160037
  00063	48 89 44 24 58	 mov	 QWORD PTR tv68[rsp], rax
$LN8@TUNTAP_Set:
  00068	b9 01 00 00 00	 mov	 ecx, 1
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00073	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv68[rsp]
  00078	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160038
  00084	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160039
  00090	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00095	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0009a	41 b9 03 00 00
	00		 mov	 r9d, 3
  000a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160040
  000a7	ba b7 01 00 00	 mov	 edx, 439		; 000001b7H
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160041
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 440  :         return -1;

  000b9	b8 ff ff ff ff	 mov	 eax, -1
  000be	e9 26 01 00 00	 jmp	 $LN1@TUNTAP_Set
$LN2@TUNTAP_Set:

; 441  :     }
; 442  : 
; 443  :     memset( &hifr, 0, sizeof( struct hifr ) );

  000c3	48 8d 44 24 70	 lea	 rax, QWORD PTR hifr$[rsp]
  000c8	48 8b f8	 mov	 rdi, rax
  000cb	33 c0		 xor	 eax, eax
  000cd	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000d2	f3 aa		 rep stosb

; 444  :     STRLCPY( hifr.hifr_name, pszNetDevName );

  000d4	41 b8 10 00 00
	00		 mov	 r8d, 16
  000da	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR pszNetDevName$[rsp]
  000e2	48 8d 4c 24 70	 lea	 rcx, QWORD PTR hifr$[rsp]
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 445  :     sin = (struct sockaddr_in*)&hifr.hifr_netmask;

  000ed	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR hifr$[rsp+16]
  000f5	48 89 44 24 60	 mov	 QWORD PTR sin$[rsp], rax

; 446  :     sin->sin_family = AF_INET;

  000fa	b8 02 00 00 00	 mov	 eax, 2
  000ff	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sin$[rsp]
  00104	66 89 01	 mov	 WORD PTR [rcx], ax

; 447  :     set_sockaddr_in_sin_len( sin );
; 448  : 
; 449  :     if( !pszNetMask  ||

  00107	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR pszNetMask$[rsp], 0
  00110	74 22		 je	 SHORT $LN5@TUNTAP_Set
  00112	48 8b 44 24 60	 mov	 rax, QWORD PTR sin$[rsp]
  00117	48 83 c0 04	 add	 rax, 4
  0011b	48 8b d0	 mov	 rdx, rax
  0011e	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR pszNetMask$[rsp]
  00126	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_aton
  0012c	85 c0		 test	 eax, eax
  0012e	0f 85 a4 00 00
	00		 jne	 $LN4@TUNTAP_Set
$LN5@TUNTAP_Set:

; 450  :         !inet_aton( pszNetMask, &sin->sin_addr ) )
; 451  :     {
; 452  :         // "Net device %s: Invalid net mask %s"
; 453  :         WRMSG( HHC00143, "E", pszNetDevName, !pszNetMask ? "NULL" : pszNetMask );

  00134	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR pszNetMask$[rsp], 0
  0013d	75 0a		 jne	 SHORT $LN9@TUNTAP_Set
  0013f	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv94[rsp], 1
  00147	eb 08		 jmp	 SHORT $LN10@TUNTAP_Set
$LN9@TUNTAP_Set:
  00149	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv94[rsp], 0
$LN10@TUNTAP_Set:
  00151	83 7c 24 50 00	 cmp	 DWORD PTR tv94[rsp], 0
  00156	74 0e		 je	 SHORT $LN11@TUNTAP_Set
  00158	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160044
  0015f	48 89 44 24 68	 mov	 QWORD PTR tv128[rsp], rax
  00164	eb 0d		 jmp	 SHORT $LN12@TUNTAP_Set
$LN11@TUNTAP_Set:
  00166	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR pszNetMask$[rsp]
  0016e	48 89 44 24 68	 mov	 QWORD PTR tv128[rsp], rax
$LN12@TUNTAP_Set:
  00173	b9 01 00 00 00	 mov	 ecx, 1
  00178	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0017e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv128[rsp]
  00183	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00188	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR pszNetDevName$[rsp]
  00190	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160045
  0019c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160046
  001a8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ad	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b2	41 b9 03 00 00
	00		 mov	 r9d, 3
  001b8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160047
  001bf	ba c5 01 00 00	 mov	 edx, 453		; 000001c5H
  001c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160048
  001cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 454  :             return -1;

  001d1	b8 ff ff ff ff	 mov	 eax, -1
  001d6	eb 11		 jmp	 SHORT $LN1@TUNTAP_Set
$LN4@TUNTAP_Set:

; 455  :     }
; 456  : 
; 457  :     return TUNTAP_IOCtl( 0, SIOCSIFNETMASK, (char*)&hifr );

  001d8	4c 8d 44 24 70	 lea	 r8, QWORD PTR hifr$[rsp]
  001dd	ba 1c 89 00 00	 mov	 edx, 35100		; 0000891cH
  001e2	33 c9		 xor	 ecx, ecx
  001e4	e8 00 00 00 00	 call	 tt32_ioctl
$LN1@TUNTAP_Set:

; 458  : }   // End of function  TUNTAP_SetNetMask()

  001e9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001f1	48 33 cc	 xor	 rcx, rsp
  001f4	e8 00 00 00 00	 call	 __security_check_cookie
  001f9	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  00200	5f		 pop	 rdi
  00201	c3		 ret	 0
TUNTAP_SetNetMask ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
tv94 = 80
tv68 = 88
sin$ = 96
tv128 = 104
hifr$ = 112
__$ArrayPad$ = 176
pszNetDevName$ = 208
pszDestAddr$ = 216
TUNTAP_SetDestAddr PROC

; 397  : {

$LN13:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 398  :     struct hifr         hifr;
; 399  :     struct sockaddr_in* sin;
; 400  : 
; 401  :     if( !pszNetDevName || !*pszNetDevName )

  00024	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  0002d	74 13		 je	 SHORT $LN3@TUNTAP_Set
  0002f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  00037	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003a	85 c0		 test	 eax, eax
  0003c	0f 85 81 00 00
	00		 jne	 $LN2@TUNTAP_Set
$LN3@TUNTAP_Set:

; 402  :     {
; 403  :         // "Invalid net device name %s"
; 404  :         WRMSG( HHC00140, "E", pszNetDevName ? pszNetDevName : "NULL" );

  00042	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  0004b	74 0f		 je	 SHORT $LN7@TUNTAP_Set
  0004d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  00055	48 89 44 24 58	 mov	 QWORD PTR tv68[rsp], rax
  0005a	eb 0c		 jmp	 SHORT $LN8@TUNTAP_Set
$LN7@TUNTAP_Set:
  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160013
  00063	48 89 44 24 58	 mov	 QWORD PTR tv68[rsp], rax
$LN8@TUNTAP_Set:
  00068	b9 01 00 00 00	 mov	 ecx, 1
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00073	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv68[rsp]
  00078	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160014
  00084	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160015
  00090	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00095	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0009a	41 b9 03 00 00
	00		 mov	 r9d, 3
  000a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160016
  000a7	ba 94 01 00 00	 mov	 edx, 404		; 00000194H
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160017
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 405  :         return -1;

  000b9	b8 ff ff ff ff	 mov	 eax, -1
  000be	e9 26 01 00 00	 jmp	 $LN1@TUNTAP_Set
$LN2@TUNTAP_Set:

; 406  :     }
; 407  : 
; 408  :     memset( &hifr, 0, sizeof( struct hifr ) );

  000c3	48 8d 44 24 70	 lea	 rax, QWORD PTR hifr$[rsp]
  000c8	48 8b f8	 mov	 rdi, rax
  000cb	33 c0		 xor	 eax, eax
  000cd	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000d2	f3 aa		 rep stosb

; 409  :     STRLCPY( hifr.hifr_name, pszNetDevName );

  000d4	41 b8 10 00 00
	00		 mov	 r8d, 16
  000da	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR pszNetDevName$[rsp]
  000e2	48 8d 4c 24 70	 lea	 rcx, QWORD PTR hifr$[rsp]
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 410  :     sin = (struct sockaddr_in*)&hifr.hifr_addr;

  000ed	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR hifr$[rsp+16]
  000f5	48 89 44 24 60	 mov	 QWORD PTR sin$[rsp], rax

; 411  :     sin->sin_family = AF_INET;

  000fa	b8 02 00 00 00	 mov	 eax, 2
  000ff	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sin$[rsp]
  00104	66 89 01	 mov	 WORD PTR [rcx], ax

; 412  :     set_sockaddr_in_sin_len( sin );
; 413  : 
; 414  :     if( !pszDestAddr  ||

  00107	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR pszDestAddr$[rsp], 0
  00110	74 22		 je	 SHORT $LN5@TUNTAP_Set
  00112	48 8b 44 24 60	 mov	 rax, QWORD PTR sin$[rsp]
  00117	48 83 c0 04	 add	 rax, 4
  0011b	48 8b d0	 mov	 rdx, rax
  0011e	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR pszDestAddr$[rsp]
  00126	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_aton
  0012c	85 c0		 test	 eax, eax
  0012e	0f 85 a4 00 00
	00		 jne	 $LN4@TUNTAP_Set
$LN5@TUNTAP_Set:

; 415  :         !inet_aton( pszDestAddr, &sin->sin_addr ) )
; 416  :     {
; 417  :         // "Net device %s: Invalid destination address %s"
; 418  :         WRMSG( HHC00142, "E", pszNetDevName, !pszDestAddr ? "NULL" : pszDestAddr );

  00134	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR pszDestAddr$[rsp], 0
  0013d	75 0a		 jne	 SHORT $LN9@TUNTAP_Set
  0013f	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv94[rsp], 1
  00147	eb 08		 jmp	 SHORT $LN10@TUNTAP_Set
$LN9@TUNTAP_Set:
  00149	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv94[rsp], 0
$LN10@TUNTAP_Set:
  00151	83 7c 24 50 00	 cmp	 DWORD PTR tv94[rsp], 0
  00156	74 0e		 je	 SHORT $LN11@TUNTAP_Set
  00158	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160020
  0015f	48 89 44 24 68	 mov	 QWORD PTR tv128[rsp], rax
  00164	eb 0d		 jmp	 SHORT $LN12@TUNTAP_Set
$LN11@TUNTAP_Set:
  00166	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR pszDestAddr$[rsp]
  0016e	48 89 44 24 68	 mov	 QWORD PTR tv128[rsp], rax
$LN12@TUNTAP_Set:
  00173	b9 01 00 00 00	 mov	 ecx, 1
  00178	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0017e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv128[rsp]
  00183	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00188	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR pszNetDevName$[rsp]
  00190	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160021
  0019c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160022
  001a8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ad	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b2	41 b9 03 00 00
	00		 mov	 r9d, 3
  001b8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160023
  001bf	ba a2 01 00 00	 mov	 edx, 418		; 000001a2H
  001c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160024
  001cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 419  :             return -1;

  001d1	b8 ff ff ff ff	 mov	 eax, -1
  001d6	eb 11		 jmp	 SHORT $LN1@TUNTAP_Set
$LN4@TUNTAP_Set:

; 420  :     }
; 421  : 
; 422  :     return TUNTAP_IOCtl( 0, SIOCSIFDSTADDR, (char*)&hifr );

  001d8	4c 8d 44 24 70	 lea	 r8, QWORD PTR hifr$[rsp]
  001dd	ba 18 89 00 00	 mov	 edx, 35096		; 00008918H
  001e2	33 c9		 xor	 ecx, ecx
  001e4	e8 00 00 00 00	 call	 tt32_ioctl
$LN1@TUNTAP_Set:

; 423  : }   // End of function  TUNTAP_SetDestAddr()

  001e9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001f1	48 33 cc	 xor	 rcx, rsp
  001f4	e8 00 00 00 00	 call	 __security_check_cookie
  001f9	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  00200	5f		 pop	 rdi
  00201	c3		 ret	 0
TUNTAP_SetDestAddr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
tv94 = 80
tv68 = 88
sin$ = 96
tv128 = 104
hifr$ = 112
__$ArrayPad$ = 176
pszNetDevName$ = 208
pszIPAddr$ = 216
TUNTAP_SetIPAddr PROC

; 361  : {

$LN13:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 362  :     struct hifr         hifr;
; 363  :     struct sockaddr_in* sin;
; 364  : 
; 365  :     if( !pszNetDevName || !*pszNetDevName )

  00024	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  0002d	74 13		 je	 SHORT $LN3@TUNTAP_Set
  0002f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  00037	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003a	85 c0		 test	 eax, eax
  0003c	0f 85 81 00 00
	00		 jne	 $LN2@TUNTAP_Set
$LN3@TUNTAP_Set:

; 366  :     {
; 367  :         // "Invalid net device name %s"
; 368  :         WRMSG( HHC00140, "E", pszNetDevName ? pszNetDevName : "NULL" );

  00042	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR pszNetDevName$[rsp], 0
  0004b	74 0f		 je	 SHORT $LN7@TUNTAP_Set
  0004d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  00055	48 89 44 24 58	 mov	 QWORD PTR tv68[rsp], rax
  0005a	eb 0c		 jmp	 SHORT $LN8@TUNTAP_Set
$LN7@TUNTAP_Set:
  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159989
  00063	48 89 44 24 58	 mov	 QWORD PTR tv68[rsp], rax
$LN8@TUNTAP_Set:
  00068	b9 01 00 00 00	 mov	 ecx, 1
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00073	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv68[rsp]
  00078	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159990
  00084	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159991
  00090	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00095	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0009a	41 b9 03 00 00
	00		 mov	 r9d, 3
  000a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159992
  000a7	ba 70 01 00 00	 mov	 edx, 368		; 00000170H
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159993
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 369  :         return -1;

  000b9	b8 ff ff ff ff	 mov	 eax, -1
  000be	e9 31 01 00 00	 jmp	 $LN1@TUNTAP_Set
$LN2@TUNTAP_Set:

; 370  :     }
; 371  : 
; 372  :     memset( &hifr, 0, sizeof( struct hifr ) );

  000c3	48 8d 44 24 70	 lea	 rax, QWORD PTR hifr$[rsp]
  000c8	48 8b f8	 mov	 rdi, rax
  000cb	33 c0		 xor	 eax, eax
  000cd	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000d2	f3 aa		 rep stosb

; 373  :     STRLCPY( hifr.hifr_name, pszNetDevName );

  000d4	41 b8 10 00 00
	00		 mov	 r8d, 16
  000da	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR pszNetDevName$[rsp]
  000e2	48 8d 4c 24 70	 lea	 rcx, QWORD PTR hifr$[rsp]
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 374  :     sin = (struct sockaddr_in*)&hifr.hifr_addr;

  000ed	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR hifr$[rsp+16]
  000f5	48 89 44 24 60	 mov	 QWORD PTR sin$[rsp], rax

; 375  :     sin->sin_family = AF_INET;

  000fa	b8 02 00 00 00	 mov	 eax, 2
  000ff	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sin$[rsp]
  00104	66 89 01	 mov	 WORD PTR [rcx], ax

; 376  :     set_sockaddr_in_sin_len( sin );
; 377  :     hifr.hifr_afamily = AF_INET;

  00107	c7 84 24 a8 00
	00 00 02 00 00
	00		 mov	 DWORD PTR hifr$[rsp+56], 2

; 378  : 
; 379  :     if( !pszIPAddr  ||

  00112	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR pszIPAddr$[rsp], 0
  0011b	74 22		 je	 SHORT $LN5@TUNTAP_Set
  0011d	48 8b 44 24 60	 mov	 rax, QWORD PTR sin$[rsp]
  00122	48 83 c0 04	 add	 rax, 4
  00126	48 8b d0	 mov	 rdx, rax
  00129	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR pszIPAddr$[rsp]
  00131	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_aton
  00137	85 c0		 test	 eax, eax
  00139	0f 85 a4 00 00
	00		 jne	 $LN4@TUNTAP_Set
$LN5@TUNTAP_Set:

; 380  :         !inet_aton( pszIPAddr, &sin->sin_addr ) )
; 381  :     {
; 382  :         // "Net device %s: Invalid IP %s"
; 383  :         WRMSG( HHC00141, "E", pszNetDevName, !pszIPAddr ? "NULL" : pszIPAddr );

  0013f	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR pszIPAddr$[rsp], 0
  00148	75 0a		 jne	 SHORT $LN9@TUNTAP_Set
  0014a	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv94[rsp], 1
  00152	eb 08		 jmp	 SHORT $LN10@TUNTAP_Set
$LN9@TUNTAP_Set:
  00154	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv94[rsp], 0
$LN10@TUNTAP_Set:
  0015c	83 7c 24 50 00	 cmp	 DWORD PTR tv94[rsp], 0
  00161	74 0e		 je	 SHORT $LN11@TUNTAP_Set
  00163	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159996
  0016a	48 89 44 24 68	 mov	 QWORD PTR tv128[rsp], rax
  0016f	eb 0d		 jmp	 SHORT $LN12@TUNTAP_Set
$LN11@TUNTAP_Set:
  00171	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR pszIPAddr$[rsp]
  00179	48 89 44 24 68	 mov	 QWORD PTR tv128[rsp], rax
$LN12@TUNTAP_Set:
  0017e	b9 01 00 00 00	 mov	 ecx, 1
  00183	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00189	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv128[rsp]
  0018e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00193	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR pszNetDevName$[rsp]
  0019b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159997
  001a7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159998
  001b3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001b8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001bd	41 b9 03 00 00
	00		 mov	 r9d, 3
  001c3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159999
  001ca	ba 7f 01 00 00	 mov	 edx, 383		; 0000017fH
  001cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160000
  001d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 384  :         return -1;

  001dc	b8 ff ff ff ff	 mov	 eax, -1
  001e1	eb 11		 jmp	 SHORT $LN1@TUNTAP_Set
$LN4@TUNTAP_Set:

; 385  :     }
; 386  : 
; 387  :     return TUNTAP_IOCtl( 0, SIOCSIFADDR, (char*)&hifr );

  001e3	4c 8d 44 24 70	 lea	 r8, QWORD PTR hifr$[rsp]
  001e8	ba 16 89 00 00	 mov	 edx, 35094		; 00008916H
  001ed	33 c9		 xor	 ecx, ecx
  001ef	e8 00 00 00 00	 call	 tt32_ioctl
$LN1@TUNTAP_Set:

; 388  : }   // End of function  TUNTAP_SetIPAddr()

  001f4	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001fc	48 33 cc	 xor	 rcx, rsp
  001ff	e8 00 00 00 00	 call	 __security_check_cookie
  00204	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  0020b	5f		 pop	 rdi
  0020c	c3		 ret	 0
TUNTAP_SetIPAddr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tuntap.c
_TEXT	SEGMENT
fd$ = 80
tv70 = 88
tv135 = 96
hifr$1 = 112
__$ArrayPad$ = 176
pszTUNDevice$ = 208
iFlags$ = 216
pfd$ = 224
pszNetDevName$ = 232
TUNTAP_CreateInterface PROC

; 231  : {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	57		 push	 rdi
  00014	48 81 ec c0 00
	00 00		 sub	 rsp, 192		; 000000c0H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 232  :     int fd;                        // File descriptor
; 233  : #if !defined( OPTION_W32_CTCI )
; 234  :     struct utsname utsbuf;
; 235  : 
; 236  :     if( uname( &utsbuf ) != 0 )
; 237  :     {
; 238  :         // "Error in function %s: %s"
; 239  :         WRMSG( HHC00136, "E", "uname()", strerror( errno ));
; 240  : 
; 241  :         return -1;
; 242  :     }
; 243  : #endif
; 244  : 
; 245  :     // Open TUN device
; 246  :     fd = TUNTAP_Open( pszTUNDevice, O_RDWR | (iFlags & IFF_OSOCK) );

  0002d	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR iFlags$[rsp]
  00034	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00039	83 c8 02	 or	 eax, 2
  0003c	8b d0		 mov	 edx, eax
  0003e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR pszTUNDevice$[rsp]
  00046	e8 00 00 00 00	 call	 tt32_open
  0004b	89 44 24 50	 mov	 DWORD PTR fd$[rsp], eax

; 247  : 
; 248  :     if( fd < 0 )

  0004f	83 7c 24 50 00	 cmp	 DWORD PTR fd$[rsp], 0
  00054	7d 7b		 jge	 SHORT $LN2@TUNTAP_Cre

; 249  :     {
; 250  :         // "Error opening TUN/TAP device %s: %s"
; 251  :         WRMSG( HHC00137, "E", pszTUNDevice, strerror( errno ));

  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0005c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00064	48 89 44 24 58	 mov	 QWORD PTR tv70[rsp], rax
  00069	b9 01 00 00 00	 mov	 ecx, 1
  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00074	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv70[rsp]
  00079	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0007e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR pszTUNDevice$[rsp]
  00086	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0008b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159967
  00092	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159968
  0009e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000a3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a8	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159969
  000b5	ba fb 00 00 00	 mov	 edx, 251		; 000000fbH
  000ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159970
  000c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 252  :         return -1;

  000c7	b8 ff ff ff ff	 mov	 eax, -1
  000cc	e9 10 01 00 00	 jmp	 $LN1@TUNTAP_Cre
$LN2@TUNTAP_Cre:

; 253  :     }
; 254  : 
; 255  :     *pfd = fd;

  000d1	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR pfd$[rsp]
  000d9	8b 4c 24 50	 mov	 ecx, DWORD PTR fd$[rsp]
  000dd	89 08		 mov	 DWORD PTR [rax], ecx

; 256  : 
; 257  : #if !defined( OPTION_W32_CTCI )
; 258  :     if ( strncasecmp( utsbuf.sysname, "linux",  5 ) == 0 )
; 259  : #endif
; 260  :     {
; 261  : #if defined (__linux__) || defined(OPTION_W32_CTCI)
; 262  :         // Linux kernel (builtin tun device) or Windows
; 263  :         struct hifr hifr;
; 264  : 
; 265  :         memset( &hifr, 0, sizeof( hifr ) );

  000df	48 8d 44 24 70	 lea	 rax, QWORD PTR hifr$1[rsp]
  000e4	48 8b f8	 mov	 rdi, rax
  000e7	33 c0		 xor	 eax, eax
  000e9	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000ee	f3 aa		 rep stosb

; 266  :         hifr.hifr_flags = iFlags & ~(iFlags & IFF_OSOCK) & 0xffff;

  000f0	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR iFlags$[rsp]
  000f7	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  000fc	f7 d0		 not	 eax
  000fe	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR iFlags$[rsp]
  00105	23 c8		 and	 ecx, eax
  00107	8b c1		 mov	 eax, ecx
  00109	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0010e	66 89 84 24 80
	00 00 00	 mov	 WORD PTR hifr$1[rsp+16], ax

; 267  :         if(*pszNetDevName)

  00116	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR pszNetDevName$[rsp]
  0011e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00121	85 c0		 test	 eax, eax
  00123	74 19		 je	 SHORT $LN3@TUNTAP_Cre

; 268  :             STRLCPY( hifr.hifr_name, pszNetDevName );

  00125	41 b8 10 00 00
	00		 mov	 r8d, 16
  0012b	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR pszNetDevName$[rsp]
  00133	48 8d 4c 24 70	 lea	 rcx, QWORD PTR hifr$1[rsp]
  00138	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
$LN3@TUNTAP_Cre:

; 269  : 
; 270  :         if( TUNTAP_SetMode (fd, &hifr, iFlags) < 0 )

  0013e	44 8b 84 24 d8
	00 00 00	 mov	 r8d, DWORD PTR iFlags$[rsp]
  00146	48 8d 54 24 70	 lea	 rdx, QWORD PTR hifr$1[rsp]
  0014b	8b 4c 24 50	 mov	 ecx, DWORD PTR fd$[rsp]
  0014f	e8 00 00 00 00	 call	 TUNTAP_SetMode
  00154	85 c0		 test	 eax, eax
  00156	7d 75		 jge	 SHORT $LN4@TUNTAP_Cre

; 271  :         {
; 272  : #if !defined( OPTION_W32_CTCI )
; 273  :             logmsg("nohif %x\n", IFF_NO_HERCIFC & iFlags);
; 274  :             if (EPERM == errno && (IFF_NO_HERCIFC & iFlags))
; 275  :                 // "Preconfigured interface %s does not exist or is not accessible by Hercules (EPERM)"
; 276  :                 WRMSG( HHC00154, "E", hifr.hifr_name );
; 277  :             else
; 278  : #endif // !defined( OPTION_W32_CTCI )
; 279  :                 // "Error setting TUN/TAP mode %s: %s"
; 280  :                 WRMSG( HHC00138, "E", hifr.hifr_name, strerror( errno ));

  00158	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0015e	8b 08		 mov	 ecx, DWORD PTR [rax]
  00160	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00166	48 89 44 24 60	 mov	 QWORD PTR tv135[rsp], rax
  0016b	b9 01 00 00 00	 mov	 ecx, 1
  00170	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00176	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv135[rsp]
  0017b	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00180	48 8d 4c 24 70	 lea	 rcx, QWORD PTR hifr$1[rsp]
  00185	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0018a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159973
  00191	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00196	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159974
  0019d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001a2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a7	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ad	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159975
  001b4	ba 18 01 00 00	 mov	 edx, 280		; 00000118H
  001b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159976
  001c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 281  :             return -1;

  001c6	b8 ff ff ff ff	 mov	 eax, -1
  001cb	eb 14		 jmp	 SHORT $LN1@TUNTAP_Cre
$LN4@TUNTAP_Cre:

; 282  :         }
; 283  : 
; 284  :         strcpy( pszNetDevName, hifr.hifr_name );

  001cd	48 8d 54 24 70	 lea	 rdx, QWORD PTR hifr$1[rsp]
  001d2	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR pszNetDevName$[rsp]
  001da	e8 00 00 00 00	 call	 strcpy

; 285  : #endif /* __linux__ || OPTION_W32_CTCI */
; 286  :     }
; 287  : #if !defined( OPTION_W32_CTCI )
; 288  :     else
; 289  :     {
; 290  :         if ((iFlags & IFF_TUN) && !strstr(pszTUNDevice, "tun")) {
; 291  :              WRMSG( HHC00156, "W", pszTUNDevice );
; 292  :         }
; 293  :         if ((iFlags & IFF_TAP) && !strstr(pszTUNDevice, "tap")) {
; 294  :              WRMSG( HHC00157, "W", pszTUNDevice );
; 295  :         }
; 296  : 
; 297  :         // Other OS: Simply use basename of the device
; 298  :         // Notes: (JAP) This is problematic at best. Until we have a
; 299  :         //        clean FreeBSD compile from the base tree I can't
; 300  :         //        spend a lot of time on this... so it will remain.
; 301  :         //        My best guess is that this will cause other functions
; 302  :         //        to fail miserably but I have no way to test it.
; 303  :         // This should work on OS X with Christoph Pfisterer's TUN driver,
; 304  :         //        since it does set the device name to the basename of the
; 305  :         //        file. -- JRM
; 306  :         char *p = strrchr( pszTUNDevice, '/' );
; 307  : 
; 308  :         if( p )
; 309  :             strncpy( pszNetDevName, ++p, IFNAMSIZ );
; 310  :         else
; 311  :         {
; 312  :             // "Invalid TUN/TAP device name %s"
; 313  :             WRMSG( HHC00139, "E", pszTUNDevice );
; 314  :             return -1;
; 315  :         }
; 316  :     }
; 317  : #endif // !defined( OPTION_W32_CTCI )
; 318  : 
; 319  :     return 0;

  001df	33 c0		 xor	 eax, eax
$LN1@TUNTAP_Cre:

; 320  : }   // End of function  TUNTAP_CreateInterface()

  001e1	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001e9	48 33 cc	 xor	 rcx, rsp
  001ec	e8 00 00 00 00	 call	 __security_check_cookie
  001f1	48 81 c4 c0 00
	00 00		 add	 rsp, 192		; 000000c0H
  001f8	5f		 pop	 rdi
  001f9	c3		 ret	 0
TUNTAP_CreateInterface ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dbgtrace.h
_TEXT	SEGMENT
buffsize$ = 48
rc$ = 52
chunksize$ = 56
buffer$ = 64
args$ = 72
fmt$ = 96
DebuggerTrace PROC

; 94   :   static inline void DebuggerTrace(char* fmt, ...) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 95   :       const int chunksize = 512;

  00018	c7 44 24 38 00
	02 00 00	 mov	 DWORD PTR chunksize$[rsp], 512 ; 00000200H

; 96   :       int buffsize = 0;

  00020	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR buffsize$[rsp], 0

; 97   :       char* buffer = NULL;

  00028	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR buffer$[rsp], 0

; 98   :       int rc = -1;

  00031	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 99   :       va_list args;
; 100  :       va_start( args, fmt );

  00039	48 8d 44 24 68	 lea	 rax, QWORD PTR fmt$[rsp+8]
  0003e	48 89 44 24 48	 mov	 QWORD PTR args$[rsp], rax
$LN9@DebuggerTr:
$LN4@DebuggerTr:

; 101  :       do {
; 102  :           if (buffer) free( buffer );

  00043	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00049	74 0b		 je	 SHORT $LN5@DebuggerTr
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN5@DebuggerTr:

; 103  :           buffsize += chunksize;

  00056	8b 44 24 38	 mov	 eax, DWORD PTR chunksize$[rsp]
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0005e	03 c8		 add	 ecx, eax
  00060	8b c1		 mov	 eax, ecx
  00062	89 44 24 30	 mov	 DWORD PTR buffsize$[rsp], eax

; 104  :           buffer = malloc( buffsize + 1 );

  00066	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  0006a	ff c0		 inc	 eax
  0006c	48 98		 cdqe
  0006e	48 8b c8	 mov	 rcx, rax
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00077	48 89 44 24 40	 mov	 QWORD PTR buffer$[rsp], rax

; 105  :           if (!buffer) BREAK_INTO_DEBUGGER();

  0007c	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00082	75 01		 jne	 SHORT $LN6@DebuggerTr
  00084	cc		 int	 3
$LN6@DebuggerTr:

; 106  :           rc = _vsnprintf_s( buffer, buffsize+1, buffsize, fmt, args);

  00085	48 63 44 24 30	 movsxd	 rax, DWORD PTR buffsize$[rsp]
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0008e	ff c1		 inc	 ecx
  00090	48 63 c9	 movsxd	 rcx, ecx
  00093	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00098	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0009d	4c 8b 4c 24 60	 mov	 r9, QWORD PTR fmt$[rsp]
  000a2	4c 8b c0	 mov	 r8, rax
  000a5	48 8b d1	 mov	 rdx, rcx
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000ad	e8 00 00 00 00	 call	 _vsnprintf_s
  000b2	89 44 24 34	 mov	 DWORD PTR rc$[rsp], eax

; 107  :       } while (rc < 0 || rc >= buffsize);

  000b6	83 7c 24 34 00	 cmp	 DWORD PTR rc$[rsp], 0
  000bb	7c 86		 jl	 SHORT $LN4@DebuggerTr
  000bd	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  000c1	39 44 24 34	 cmp	 DWORD PTR rc$[rsp], eax
  000c5	0f 8d 78 ff ff
	ff		 jge	 $LN9@DebuggerTr

; 108  :       OutputDebugStringA( buffer ); /* send to debugger pane */

  000cb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 109  :       if (buffer) free( buffer );

  000d6	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  000dc	74 0b		 je	 SHORT $LN7@DebuggerTr
  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@DebuggerTr:

; 110  :       va_end( args );

  000e9	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0

; 111  :   }

  000f2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f6	c3		 ret	 0
DebuggerTrace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sscanf	PROC						; COMDAT

; 2247 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsscanf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2252 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2253 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2254 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2152 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2153 :         return __stdio_common_vsscanf(

  00018	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  0003d	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_MaxCount$ = 80
_Format$ = 88
_ArgList$ = 96
_vsnprintf_s PROC					; COMDAT

; 1598 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1599 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00022	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0002b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Format$[rsp]
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR _MaxCount$[rsp]
  00035	48 8b 54 24 48	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0003f	e8 00 00 00 00	 call	 _vsnprintf_s_l

; 1600 :     }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
_vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s_l
_TEXT	SEGMENT
_Result$ = 64
tv74 = 68
_Buffer$ = 96
_BufferCount$ = 104
_MaxCount$ = 112
_Format$ = 120
_Locale$ = 128
_ArgList$ = 136
_vsnprintf_s_l PROC					; COMDAT

; 1577 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1578 :         int const _Result = __stdio_common_vsnprintf_s(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00032	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00037	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Format$[rsp]
  0003c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00041	4c 8b 4c 24 70	 mov	 r9, QWORD PTR _MaxCount$[rsp]
  00046	4c 8b 44 24 68	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  0004b	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00050	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsnprintf_s
  00059	89 44 24 40	 mov	 DWORD PTR _Result$[rsp], eax

; 1579 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1580 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1581 : 
; 1582 :         return _Result < 0 ? -1 : _Result;

  0005d	83 7c 24 40 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00062	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  00064	c7 44 24 44 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  0006c	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0006e	8b 44 24 40	 mov	 eax, DWORD PTR _Result$[rsp]
  00072	89 44 24 44	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  00076	8b 44 24 44	 mov	 eax, DWORD PTR tv74[rsp]

; 1583 :     }

  0007a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0007e	c3		 ret	 0
_vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00007	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
