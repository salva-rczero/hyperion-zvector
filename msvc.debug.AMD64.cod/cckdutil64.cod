; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
VOL1_KEYA DB	056H
	DB	04fH
	DB	04cH
	DB	031H
VOL1_KEY DB	0e5H
	DB	0d6H
	DB	0d3H
	DB	0f1H
IPL1_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f1H
IPL2_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f2H
iplpsw	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
iplccw1	DB	06H
	DB	00H
	DB	03aH
	DB	098H
	DB	060H
	DB	00H
	DB	00H
	DB	060H
iplccw2	DB	08H
	DB	00H
	DB	03aH
	DB	098H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
noiplpsw DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
noiplccw1 DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
noiplccw2 DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
ipl2data DB	07H
	DB	00H
	DB	03aH
	DB	0b8H
	DB	040H
	DB	00H
	DB	00H
	DB	06H
	DB	031H
	DB	00H
	DB	03aH
	DB	0beH
	DB	040H
	DB	00H
	DB	00H
	DB	05H
	DB	08H
	DB	00H
	DB	03aH
	DB	0a0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	00H
	DB	07fH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vsnprintf_l
PUBLIC	_vsprintf_l
PUBLIC	_vsnprintf_s_l
PUBLIC	_vsnprintf_s
PUBLIC	sprintf
PUBLIC	fetch_hw_noswap
PUBLIC	fetch_fw_noswap
PUBLIC	cckd64_swapend
PUBLIC	cckd64_swapend_chdr
PUBLIC	cckd64_swapend_l1
PUBLIC	cckd64_swapend_l2
PUBLIC	cckd64_swapend_free
PUBLIC	cckd64_comp
PUBLIC	cckd64_chkdsk
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp__errno:PROC
EXTRN	__imp_IsDebuggerPresent:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_calloc:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_qsort:PROC
EXTRN	_byteswap_ushort:PROC
EXTRN	_byteswap_ulong:PROC
EXTRN	_byteswap_uint64:PROC
EXTRN	__imp__chsize_s:PROC
EXTRN	__imp__lseeki64:PROC
EXTRN	__imp_read:PROC
EXTRN	__imp_write:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vsprintf:PROC
EXTRN	__imp___stdio_common_vsnprintf_s:PROC
EXTRN	__imp__fstat64:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_get_file_accmode_flags:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_w32_fprintf:PROC
EXTRN	dasd_lookup:PROC
EXTRN	comp_to_str:PROC
EXTRN	spc_typ_to_str:PROC
EXTRN	cckd_swapend:PROC
EXTRN	cckd_def_opt_bigend:PROC
EXTRN	cckd_comp:PROC
EXTRN	cckd_chkdsk:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_logmsg:PROC
EXTRN	cdsk_valid_trk:PROC
EXTRN	dh_devid_typ:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memcmp:PROC
EXTRN	__imp_extgui:DWORD
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+118
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$_vsnprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$_vsnprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sprintf
pdata	ENDS
pdata	SEGMENT
$pdata$DebuggerTrace DD imagerel DebuggerTrace
	DD	imagerel DebuggerTrace+247
	DD	imagerel $unwind$DebuggerTrace
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_hw_noswap DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$fetch_hw_noswap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_fw_noswap DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$fetch_fw_noswap
pdata	ENDS
pdata	SEGMENT
$pdata$cckd64_swapend DD imagerel $LN123
	DD	imagerel $LN123+5871
	DD	imagerel $unwind$cckd64_swapend
$pdata$cckd64_swapend_chdr DD imagerel $LN3
	DD	imagerel $LN3+260
	DD	imagerel $unwind$cckd64_swapend_chdr
$pdata$cckd64_swapend_l1 DD imagerel $LN6
	DD	imagerel $LN6+83
	DD	imagerel $unwind$cckd64_swapend_l1
$pdata$cckd64_swapend_l2 DD imagerel $LN6
	DD	imagerel $LN6+180
	DD	imagerel $unwind$cckd64_swapend_l2
$pdata$cckd64_swapend_free DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$cckd64_swapend_free
$pdata$cckd64_comp DD imagerel $LN274
	DD	imagerel $LN274+14737
	DD	imagerel $unwind$cckd64_comp
$pdata$cckd64_chkdsk DD imagerel $LN828
	DD	imagerel $LN828+45423
	DD	imagerel $unwind$cckd64_chkdsk
$pdata$comp_spctab64_sort DD imagerel comp_spctab64_sort
	DD	imagerel comp_spctab64_sort+155
	DD	imagerel $unwind$comp_spctab64_sort
$pdata$cdsk_spctab64_sort DD imagerel cdsk_spctab64_sort
	DD	imagerel cdsk_spctab64_sort+155
	DD	imagerel $unwind$cdsk_spctab64_sort
$pdata$cdsk_build_free_space64 DD imagerel cdsk_build_free_space64
	DD	imagerel cdsk_build_free_space64+519
	DD	imagerel $unwind$cdsk_build_free_space64
pdata	ENDS
_DATA	SEGMENT
$SG168741 DB	'SIZE=%llu', 0aH, 00H
	ORG $+5
$SG168744 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG168802 DB	'E', 00H
	ORG $+2
$SG168748 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG168807 DB	'E', 00H
	ORG $+2
$SG168754 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG168814 DB	'E', 00H
	ORG $+2
$SG168758 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG168819 DB	'E', 00H
	ORG $+2
$SG168765 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG168826 DB	'read()', 00H
	ORG $+1
$SG168827 DB	'E', 00H
	ORG $+2
$SG168769 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG168832 DB	'read()', 00H
	ORG $+1
$SG168833 DB	'E', 00H
	ORG $+2
$SG168774 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG168841 DB	'E', 00H
	ORG $+2
$SG168778 DB	'FREE_BLK', 00H
	ORG $+3
$SG168847 DB	'E', 00H
	ORG $+2
$SG168782 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG168854 DB	'E', 00H
	ORG $+2
$SG168786 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG168858 DB	'E', 00H
	ORG $+2
$SG168792 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG169148 DB	'E', 00H
	ORG $+2
$SG168796 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG169152 DB	'E', 00H
	ORG $+2
$SG168801 DB	'fstat()', 00H
$SG168803 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG169165 DB	'I', 00H
	ORG $+2
$SG168804 DB	'cckd64_swapend', 00H
	ORG $+1
$SG168805 DB	'cckdutil64.c', 00H
	ORG $+3
$SG168806 DB	'fstat()', 00H
$SG168808 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG169171 DB	'I', 00H
	ORG $+2
$SG168809 DB	'cckd64_swapend', 00H
	ORG $+1
$SG168810 DB	'cckdutil64.c', 00H
	ORG $+3
$SG168813 DB	'lseek()', 00H
$SG168818 DB	'lseek()', 00H
$SG168815 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG169208 DB	'I', 00H
	ORG $+2
$SG168816 DB	'cckd64_swapend', 00H
	ORG $+1
$SG168817 DB	'cckdutil64.c', 00H
	ORG $+3
$SG168821 DB	'cckd64_swapend', 00H
	ORG $+1
$SG168840 DB	'write()', 00H
$SG168820 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG169212 DB	'I', 00H
	ORG $+2
$SG168822 DB	'cckdutil64.c', 00H
	ORG $+3
$SG168825 DB	'incomplete', 00H
	ORG $+5
$SG168829 DB	'cckd64_swapend', 00H
	ORG $+1
$SG168846 DB	'write()', 00H
$SG168828 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG169273 DB	'I', 00H
	ORG $+2
$SG168830 DB	'cckdutil64.c', 00H
	ORG $+3
$SG168831 DB	'incomplete', 00H
	ORG $+5
$SG168835 DB	'cckd64_swapend', 00H
	ORG $+1
$SG169166 DB	'HHC00357%s %1d:%04X CCKD file %s: converting to %s', 0aH
	DB	00H
	ORG $+4
$SG168834 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG169277 DB	'I', 00H
	ORG $+2
$SG168836 DB	'cckdutil64.c', 00H
	ORG $+3
$SG168839 DB	'incomplete', 00H
	ORG $+5
$SG168843 DB	'cckd64_swapend', 00H
	ORG $+1
$SG169172 DB	'HHC00357%s %1d:%04X CCKD file %s: converting to %s', 0aH
	DB	00H
	ORG $+4
$SG168842 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG169283 DB	'I', 00H
	ORG $+2
$SG168844 DB	'cckdutil64.c', 00H
	ORG $+3
$SG168845 DB	'incomplete', 00H
	ORG $+5
$SG168849 DB	'cckd64_swapend', 00H
	ORG $+1
$SG169300 DB	'fstat()', 00H
$SG168848 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG169287 DB	'I', 00H
	ORG $+2
$SG168850 DB	'cckdutil64.c', 00H
	ORG $+3
$SG168851 DB	'malloc(%d)', 00H
	ORG $+1
$SG169301 DB	'E', 00H
	ORG $+2
$SG168855 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG169306 DB	'E', 00H
	ORG $+2
$SG168856 DB	'cckd64_swapend', 00H
	ORG $+1
$SG168857 DB	'cckdutil64.c', 00H
	ORG $+3
$SG168859 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG169313 DB	'E', 00H
	ORG $+2
$SG168860 DB	'cckd64_swapend', 00H
	ORG $+1
$SG168861 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169139 DB	'SIZE=%llu', 0aH, 00H
	ORG $+1
$SG169318 DB	'E', 00H
	ORG $+2
$SG169142 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG169325 DB	'read()', 00H
	ORG $+1
$SG169326 DB	'E', 00H
	ORG $+2
$SG169149 DB	'HHC00356%s %1d:%04X CCKD file %s: not a compressed dasd '
	DB	'file', 0aH, 00H
	ORG $+2
$SG169150 DB	'cckd64_comp', 00H
$SG169332 DB	'E', 00H
	ORG $+2
$SG169151 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169153 DB	'HHC00356%s %1d:%04X CCKD file %s: not a compressed dasd '
	DB	'file', 0aH, 00H
	ORG $+2
$SG169154 DB	'cckd64_comp', 00H
$SG169340 DB	'E', 00H
	ORG $+2
$SG169155 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169158 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG169331 DB	'read()', 00H
	ORG $+1
$SG169346 DB	'E', 00H
	ORG $+2
$SG169163 DB	'little-endian', 00H
	ORG $+2
$SG169164 DB	'big-endian', 00H
	ORG $+1
$SG169353 DB	'E', 00H
	ORG $+2
$SG169167 DB	'cckd64_comp', 00H
$SG169357 DB	'E', 00H
	ORG $+2
$SG169168 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169169 DB	'little-endian', 00H
	ORG $+2
$SG169170 DB	'big-endian', 00H
	ORG $+1
$SG169364 DB	'E', 00H
	ORG $+2
$SG169173 DB	'cckd64_comp', 00H
$SG169368 DB	'E', 00H
	ORG $+2
$SG169174 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169183 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170015 DB	'E', 00H
	ORG $+2
$SG169193 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170019 DB	'E', 00H
	ORG $+2
$SG169209 DB	'HHC00358%s %1d:%04X CCKD file %s: file already compresse'
	DB	'd', 0aH, 00H
	ORG $+1
$SG170035 DB	'I', 00H
	ORG $+2
$SG169210 DB	'cckd64_comp', 00H
$SG170041 DB	'I', 00H
	ORG $+2
$SG169211 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169213 DB	'HHC00358%s %1d:%04X CCKD file %s: file already compresse'
	DB	'd', 0aH, 00H
	ORG $+1
$SG170052 DB	'E', 00H
	ORG $+2
$SG169214 DB	'cckd64_comp', 00H
$SG170056 DB	'E', 00H
	ORG $+2
$SG169215 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169222 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170064 DB	'E', 00H
	ORG $+2
$SG169233 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170069 DB	'E', 00H
	ORG $+2
$SG169237 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170077 DB	'E', 00H
	ORG $+2
$SG169241 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170082 DB	'E', 00H
	ORG $+2
$SG169249 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170093 DB	'E', 00H
	ORG $+2
$SG169253 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170098 DB	'E', 00H
	ORG $+2
$SG169258 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170106 DB	'E', 00H
	ORG $+2
$SG169263 DB	'cckd64_comp', 00H
$SG170111 DB	'E', 00H
	ORG $+2
$SG169264 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169305 DB	'fstat()', 00H
$SG169265 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169267 DB	'cckd64_comp', 00H
$SG170118 DB	'W', 00H
	ORG $+2
$SG169268 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169312 DB	'lseek()', 00H
$SG169269 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169317 DB	'lseek()', 00H
$SG169274 DB	'HHC00359%s %1d:%04X CCKD file %s: compress successful, %'
	DB	'lld bytes released', 0aH, 00H
$SG170122 DB	'W', 00H
	ORG $+2
$SG169275 DB	'cckd64_comp', 00H
$SG170129 DB	'W', 00H
	ORG $+2
$SG169276 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169278 DB	'HHC00359%s %1d:%04X CCKD file %s: compress successful, %'
	DB	'lld bytes released', 0aH, 00H
$SG170133 DB	'W', 00H
	ORG $+2
$SG169279 DB	'cckd64_comp', 00H
$SG170140 DB	'W', 00H
	ORG $+2
$SG169280 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169284 DB	'HHC00360%s %1d:%04X CCKD file %s: compress successful, L'
	DB	'2 tables relocated', 0aH, 00H
$SG170144 DB	'W', 00H
	ORG $+2
$SG169285 DB	'cckd64_comp', 00H
$SG170151 DB	'W', 00H
	ORG $+2
$SG169286 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169288 DB	'HHC00360%s %1d:%04X CCKD file %s: compress successful, L'
	DB	'2 tables relocated', 0aH, 00H
$SG170155 DB	'W', 00H
	ORG $+2
$SG169289 DB	'cckd64_comp', 00H
$SG170197 DB	'%s', 00H
	ORG $+1
$SG169290 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169292 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170200 DB	'%s', 00H
	ORG $+1
$SG169302 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG170207 DB	'W', 00H
	ORG $+2
$SG169303 DB	'cckd64_comp', 00H
$SG170211 DB	'W', 00H
	ORG $+2
$SG169304 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169307 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG170217 DB	'W', 00H
	ORG $+2
$SG169308 DB	'cckd64_comp', 00H
$SG170221 DB	'W', 00H
	ORG $+2
$SG169309 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169314 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG170235 DB	'W', 00H
	ORG $+2
$SG169315 DB	'cckd64_comp', 00H
$SG170239 DB	'W', 00H
	ORG $+2
$SG169316 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169339 DB	'write()', 00H
$SG169319 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG170249 DB	'W', 00H
	ORG $+2
$SG169320 DB	'cckd64_comp', 00H
$SG170253 DB	'W', 00H
	ORG $+2
$SG169321 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169324 DB	'incomplete', 00H
	ORG $+5
$SG169328 DB	'cckd64_comp', 00H
$SG170199 DB	'[%d]', 00H
	ORG $+7
$SG169327 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG170286 DB	'W', 00H
	ORG $+2
$SG169329 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169330 DB	'incomplete', 00H
	ORG $+5
$SG169334 DB	'cckd64_comp', 00H
$SG170202 DB	'[%d]', 00H
	ORG $+7
$SG169333 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG170290 DB	'W', 00H
	ORG $+2
$SG169335 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169338 DB	'incomplete', 00H
	ORG $+5
$SG169342 DB	'cckd64_comp', 00H
$SG170304 DB	'W', 00H
	ORG $+2
$SG169345 DB	'write()', 00H
$SG169341 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG170308 DB	'W', 00H
	ORG $+2
$SG169343 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169344 DB	'incomplete', 00H
	ORG $+5
$SG169348 DB	'cckd64_comp', 00H
$SG170315 DB	'W', 00H
	ORG $+2
$SG170036 DB	'HHC00357%s %1d:%04X CCKD file %s: converting to %s', 0aH
	DB	00H
	ORG $+4
$SG169347 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG170319 DB	'W', 00H
	ORG $+2
$SG169349 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169350 DB	'malloc(%lld)', 00H
	ORG $+3
$SG169354 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG170326 DB	'W', 00H
	ORG $+2
$SG169355 DB	'cckd64_comp', 00H
$SG170330 DB	'W', 00H
	ORG $+2
$SG169356 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169358 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG170339 DB	'W', 00H
	ORG $+2
$SG169359 DB	'cckd64_comp', 00H
$SG170343 DB	'W', 00H
	ORG $+2
$SG169360 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169361 DB	'calloc(%lld)', 00H
	ORG $+3
$SG169365 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG170394 DB	'I', 00H
	ORG $+2
$SG169366 DB	'cckd64_comp', 00H
$SG170398 DB	'I', 00H
	ORG $+2
$SG169367 DB	'cckdutil64.c', 00H
	ORG $+3
$SG169369 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG170446 DB	'I', 00H
	ORG $+2
$SG169370 DB	'cckd64_comp', 00H
$SG170450 DB	'I', 00H
	ORG $+2
$SG169371 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170003 DB	'SIZE=%llu', 0aH, 00H
	ORG $+1
$SG170458 DB	'I', 00H
	ORG $+2
$SG170006 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170462 DB	'I', 00H
	ORG $+2
$SG170016 DB	'HHC00356%s %1d:%04X CCKD file %s: not a compressed dasd '
	DB	'file', 0aH, 00H
	ORG $+2
$SG170017 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170018 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170020 DB	'HHC00356%s %1d:%04X CCKD file %s: not a compressed dasd '
	DB	'file', 0aH, 00H
	ORG $+2
$SG170021 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170022 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170026 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170479 DB	'E', 00H
	ORG $+2
$SG170033 DB	'little-endian', 00H
	ORG $+2
$SG170034 DB	'big-endian', 00H
	ORG $+1
$SG170483 DB	'E', 00H
	ORG $+2
$SG170037 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170038 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170039 DB	'little-endian', 00H
	ORG $+2
$SG170040 DB	'big-endian', 00H
	ORG $+1
$SG170491 DB	'W', 00H
	ORG $+2
$SG170042 DB	'HHC00357%s %1d:%04X CCKD file %s: converting to %s', 0aH
	DB	00H
$SG170496 DB	'W', 00H
	ORG $+2
$SG170043 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170044 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170053 DB	'HHC00361%s %1d:%04X CCKD file %s: dasd lookup error type'
	DB	' %02X cylinders %d', 0aH, 00H
$SG170504 DB	'W', 00H
	ORG $+2
$SG170054 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170055 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170057 DB	'HHC00361%s %1d:%04X CCKD file %s: dasd lookup error type'
	DB	' %02X cylinders %d', 0aH, 00H
$SG170509 DB	'W', 00H
	ORG $+2
$SG170058 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170059 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170063 DB	'track size', 00H
	ORG $+1
$SG170529 DB	'W', 00H
	ORG $+2
$SG170065 DB	'HHC00362%s %1d:%04X CCKD file %s: bad %s %lld, expecting'
	DB	' %lld', 0aH, 00H
	ORG $+1
$SG170066 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170067 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170068 DB	'track size', 00H
	ORG $+1
$SG170533 DB	'W', 00H
	ORG $+2
$SG170070 DB	'HHC00362%s %1d:%04X CCKD file %s: bad %s %lld, expecting'
	DB	' %lld', 0aH, 00H
	ORG $+1
$SG170071 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170072 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170076 DB	'number of heads', 00H
$SG170078 DB	'HHC00362%s %1d:%04X CCKD file %s: bad %s %lld, expecting'
	DB	' %lld', 0aH, 00H
	ORG $+1
$SG170079 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170080 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170081 DB	'number of heads', 00H
$SG170083 DB	'HHC00362%s %1d:%04X CCKD file %s: bad %s %lld, expecting'
	DB	' %lld', 0aH, 00H
	ORG $+1
$SG170084 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170085 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170092 DB	'num_L1tab', 00H
	ORG $+2
$SG170595 DB	'I', 00H
	ORG $+2
$SG170094 DB	'HHC00362%s %1d:%04X CCKD file %s: bad %s %lld, expecting'
	DB	' %lld', 0aH, 00H
	ORG $+1
$SG170095 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170096 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170097 DB	'num_L1tab', 00H
	ORG $+2
$SG170599 DB	'I', 00H
	ORG $+2
$SG170099 DB	'HHC00362%s %1d:%04X CCKD file %s: bad %s %lld, expecting'
	DB	' %lld', 0aH, 00H
	ORG $+1
$SG170100 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170101 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170105 DB	'file length to contain L1 table', 00H
$SG170107 DB	'HHC00362%s %1d:%04X CCKD file %s: bad %s %lld, expecting'
	DB	' %lld', 0aH, 00H
	ORG $+1
$SG170108 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170109 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170110 DB	'file length to contain L1 table', 00H
$SG170112 DB	'HHC00362%s %1d:%04X CCKD file %s: bad %s %lld, expecting'
	DB	' %lld', 0aH, 00H
	ORG $+1
$SG170113 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170114 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170119 DB	'HHC00364%s %1d:%04X CCKD file %s: forcing check level %d'
	DB	0aH, 00H
	ORG $+2
$SG170628 DB	'E', 00H
	ORG $+2
$SG170120 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170121 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170123 DB	'HHC00364%s %1d:%04X CCKD file %s: forcing check level %d'
	DB	0aH, 00H
	ORG $+2
$SG170633 DB	'E', 00H
	ORG $+2
$SG170124 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170125 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170130 DB	'HHC00363%s %1d:%04X CCKD file %s: cdevhdr inconsistencie'
	DB	's found, code %4.4X', 0aH, 00H
	ORG $+3
$SG170131 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170132 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170134 DB	'HHC00363%s %1d:%04X CCKD file %s: cdevhdr inconsistencie'
	DB	's found, code %4.4X', 0aH, 00H
	ORG $+3
$SG170135 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170136 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170141 DB	'HHC00364%s %1d:%04X CCKD file %s: forcing check level %d'
	DB	0aH, 00H
	ORG $+2
$SG170640 DB	'E', 00H
	ORG $+2
$SG170142 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170143 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170145 DB	'HHC00364%s %1d:%04X CCKD file %s: forcing check level %d'
	DB	0aH, 00H
	ORG $+2
$SG170645 DB	'E', 00H
	ORG $+2
$SG170146 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170147 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170152 DB	'HHC00364%s %1d:%04X CCKD file %s: forcing check level %d'
	DB	0aH, 00H
	ORG $+2
$SG170652 DB	'read()', 00H
	ORG $+1
$SG170653 DB	'E', 00H
	ORG $+2
$SG170153 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170154 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170156 DB	'HHC00364%s %1d:%04X CCKD file %s: forcing check level %d'
	DB	0aH, 00H
	ORG $+2
$SG170658 DB	'read()', 00H
	ORG $+1
$SG170659 DB	'E', 00H
	ORG $+2
$SG170157 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170158 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170166 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170667 DB	'E', 00H
	ORG $+2
$SG170184 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170208 DB	'HHC00365%s %1d:%04X CCKD file %s: %s offset 0x%16.16llX '
	DB	'len %lld is out of bounds', 0aH, 00H
	ORG $+1
$SG170673 DB	'E', 00H
	ORG $+2
$SG170209 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170210 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170213 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170490 DB	'file opened read-only', 00H
	ORG $+2
$SG170212 DB	'HHC00365%s %1d:%04X CCKD file %s: %s offset 0x%16.16llX '
	DB	'len %lld is out of bounds', 0aH, 00H
	ORG $+1
$SG170680 DB	'E', 00H
	ORG $+2
$SG170214 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170219 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170495 DB	'file opened read-only', 00H
	ORG $+2
$SG170218 DB	'HHC00366%s %1d:%04X CCKD file %s: %s offset 0x%16.16llX '
	DB	'len %lld overlaps %s offset 0x%llX', 0aH, 00H
$SG170684 DB	'E', 00H
	ORG $+2
$SG170220 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170222 DB	'HHC00366%s %1d:%04X CCKD file %s: %s offset 0x%16.16llX '
	DB	'len %lld overlaps %s offset 0x%llX', 0aH, 00H
$SG170691 DB	'E', 00H
	ORG $+2
$SG170223 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170224 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170236 DB	'HHC00367%s %1d:%04X CCKD file %s: %s[%d] l2 inconsistenc'
	DB	'y: len %lld, size %lld', 0aH, 00H
$SG170237 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170238 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170240 DB	'HHC00367%s %1d:%04X CCKD file %s: %s[%d] l2 inconsistenc'
	DB	'y: len %lld, size %lld', 0aH, 00H
$SG170241 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170242 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170250 DB	'HHC00364%s %1d:%04X CCKD file %s: forcing check level %d'
	DB	0aH, 00H
	ORG $+2
$SG170695 DB	'E', 00H
	ORG $+2
$SG170251 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170252 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170254 DB	'HHC00364%s %1d:%04X CCKD file %s: forcing check level %d'
	DB	0aH, 00H
	ORG $+6
$SG170255 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170256 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170263 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170266 DB	'FREE_BLK', 00H
	ORG $+7
$SG170277 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170287 DB	'HHC00368%s %1d:%04X CCKD file %s: free space errors dete'
	DB	'cted', 0aH, 00H
	ORG $+2
$SG170288 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170289 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170291 DB	'HHC00368%s %1d:%04X CCKD file %s: free space errors dete'
	DB	'cted', 0aH, 00H
	ORG $+2
$SG170292 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170293 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170298 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170305 DB	'HHC00369%s %1d:%04X CCKD file %s: %s[%d] hdr error offse'
	DB	't 0x%16.16llX: %2.2X%2.2X%2.2X%2.2X%2.2X', 0aH, 00H
	ORG $+6
$SG170306 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170307 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170310 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170503 DB	'missing compression', 00H
	ORG $+4
$SG170309 DB	'HHC00369%s %1d:%04X CCKD file %s: %s[%d] hdr error offse'
	DB	't 0x%16.16llX: %2.2X%2.2X%2.2X%2.2X%2.2X', 0aH, 00H
	ORG $+6
$SG170311 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170316 DB	'HHC00364%s %1d:%04X CCKD file %s: forcing check level %d'
	DB	0aH, 00H
	ORG $+6
$SG170317 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170318 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170320 DB	'HHC00364%s %1d:%04X CCKD file %s: forcing check level %d'
	DB	0aH, 00H
	ORG $+6
$SG170321 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170322 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170328 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170508 DB	'missing compression', 00H
	ORG $+4
$SG170327 DB	'HHC00370%s %1d:%04X CCKD file %s: %s[%d] compressed usin'
	DB	'g %s, not supported', 0aH, 00H
	ORG $+3
$SG170329 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170331 DB	'HHC00370%s %1d:%04X CCKD file %s: %s[%d] compressed usin'
	DB	'g %s, not supported', 0aH, 00H
	ORG $+3
$SG170332 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170333 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170340 DB	'HHC00371%s %1d:%04X CCKD file %s: %s[%d] offset 0x%16.16'
	DB	'llX len %lld validation error', 0aH, 00H
	ORG $+1
$SG170341 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170342 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170345 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170596 DB	'HHC00377%s %1d:%04X CCKD file %s: free space rebuilt', 0aH
	DB	00H
	ORG $+2
$SG170344 DB	'HHC00371%s %1d:%04X CCKD file %s: %s[%d] offset 0x%16.16'
	DB	'llX len %lld validation error', 0aH, 00H
	ORG $+1
$SG170346 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170356 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170396 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170600 DB	'HHC00377%s %1d:%04X CCKD file %s: free space rebuilt', 0aH
	DB	00H
	ORG $+2
$SG170395 DB	'HHC00372%s %1d:%04X CCKD file %s: %s[%d] recovered offse'
	DB	't 0x%16.16llX len %lld', 0aH, 00H
$SG170397 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170399 DB	'HHC00372%s %1d:%04X CCKD file %s: %s[%d] recovered offse'
	DB	't 0x%16.16llX len %lld', 0aH, 00H
$SG170400 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170401 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170408 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170447 DB	'HHC00372%s %1d:%04X CCKD file %s: %s[%d] recovered offse'
	DB	't 0x%16.16llX len %lld', 0aH, 00H
$SG170448 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170449 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170451 DB	'HHC00372%s %1d:%04X CCKD file %s: %s[%d] recovered offse'
	DB	't 0x%16.16llX len %lld', 0aH, 00H
$SG170452 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170453 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170459 DB	'HHC00373%s %1d:%04X CCKD file %s: %lld %s images recover'
	DB	'ed', 0aH, 00H
	ORG $+4
$SG170460 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170461 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170463 DB	'HHC00373%s %1d:%04X CCKD file %s: %lld %s images recover'
	DB	'ed', 0aH, 00H
	ORG $+4
$SG170464 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170465 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170480 DB	'HHC00374%s %1d:%04X CCKD file %s: not enough file space '
	DB	'for recovery', 0aH, 00H
	ORG $+2
$SG170481 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170482 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170485 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170627 DB	'fstat()', 00H
$SG170484 DB	'HHC00374%s %1d:%04X CCKD file %s: not enough file space '
	DB	'for recovery', 0aH, 00H
	ORG $+2
$SG170486 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170492 DB	'HHC00375%s %1d:%04X CCKD file %s: recovery not completed'
	DB	': %s', 0aH, 00H
	ORG $+2
$SG170493 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170494 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170497 DB	'HHC00375%s %1d:%04X CCKD file %s: recovery not completed'
	DB	': %s', 0aH, 00H
	ORG $+2
$SG170498 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170499 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170505 DB	'HHC00375%s %1d:%04X CCKD file %s: recovery not completed'
	DB	': %s', 0aH, 00H
	ORG $+2
$SG170506 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170507 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170510 DB	'HHC00375%s %1d:%04X CCKD file %s: recovery not completed'
	DB	': %s', 0aH, 00H
	ORG $+2
$SG170511 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170512 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170515 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170521 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170531 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170632 DB	'fstat()', 00H
$SG170530 DB	'HHC00376%s %1d:%04X CCKD file %s: free space not rebuilt'
	DB	', file opened read-only', 0aH, 00H
	ORG $+7
$SG170532 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170535 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170639 DB	'lseek()', 00H
$SG170534 DB	'HHC00376%s %1d:%04X CCKD file %s: free space not rebuilt'
	DB	', file opened read-only', 0aH, 00H
	ORG $+7
$SG170536 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170543 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170547 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170553 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170557 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170569 DB	'FREE_BLK', 00H
	ORG $+7
$SG170573 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170578 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170582 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170586 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170590 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170597 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170598 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170601 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170602 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170606 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170607 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170610 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170644 DB	'lseek()', 00H
$SG170608 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG170611 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170630 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170666 DB	'write()', 00H
$SG170612 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG170615 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170617 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170629 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
	ORG $+4
$SG170631 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170634 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
	ORG $+4
$SG170635 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170636 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170642 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170672 DB	'write()', 00H
$SG170641 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+6
$SG170643 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170647 DB	'cckd64_chkdsk', 00H
	ORG $+10
$SG170646 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+6
$SG170648 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170651 DB	'incomplete', 00H
	ORG $+13
$SG170654 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+6
$SG170655 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170656 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170657 DB	'incomplete', 00H
	ORG $+13
$SG170660 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+6
$SG170661 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170662 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170665 DB	'incomplete', 00H
	ORG $+13
$SG170668 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+6
$SG170669 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170670 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170671 DB	'incomplete', 00H
	ORG $+13
$SG170674 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+6
$SG170675 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170676 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170677 DB	'malloc(%lld)', 00H
	ORG $+3
$SG170681 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
	ORG $+4
$SG170682 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170683 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170685 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
	ORG $+4
$SG170686 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170687 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170688 DB	'calloc(%lld)', 00H
	ORG $+3
$SG170692 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
	ORG $+4
$SG170693 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170694 DB	'cckdutil64.c', 00H
	ORG $+3
$SG170696 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
	ORG $+4
$SG170697 DB	'cckd64_chkdsk', 00H
	ORG $+2
$SG170698 DB	'cckdutil64.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cckd64_chkdsk
	DD	022H
	DD	0b155H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cckd64_comp
	DD	01dH
	DD	03978H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cckd64_swapend
	DD	01cH
	DD	016d7H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_fw_noswap DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_hw_noswap DD 010901H
	DD	02209H
xdata	ENDS
xdata	SEGMENT
$unwind$DebuggerTrace DD 011801H
	DD	0a218H
$unwind$cckd64_swapend DD 022419H
	DD	02950112H
	DD	imagerel __GSHandlerCheck
	DD	01490H
$unwind$cckd64_swapend_chdr DD 010901H
	DD	04209H
$unwind$cckd64_swapend_l1 DD 010d01H
	DD	0620dH
$unwind$cckd64_swapend_l2 DD 010901H
	DD	06209H
$unwind$cckd64_swapend_free DD 010901H
	DD	04209H
$unwind$cckd64_comp DD 032519H
	DD	085040113H
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	042810H
$unwind$cckd64_chkdsk DD 042a19H
	DD	086350118H
	DD	0600a700bH
	DD	imagerel __GSHandlerCheck
	DD	043190H
$unwind$comp_spctab64_sort DD 010e01H
	DD	0220eH
$unwind$cdsk_spctab64_sort DD 010e01H
	DD	0220eH
$unwind$cdsk_build_free_space64 DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s_l DD 011801H
	DD	0a218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 011801H
	DD	08218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil64.c
_TEXT	SEGMENT
i$ = 32
tv181 = 40
spctab$ = 64
s$ = 72
cdsk_build_free_space64 PROC

; 2839 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2840 : int i;
; 2841 : 
; 2842 :     for (i = 0; i < s; i++)

  0000d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00015	eb 0a		 jmp	 SHORT $LN4@cdsk_build
$LN2@cdsk_build:
  00017	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0001b	ff c0		 inc	 eax
  0001d	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@cdsk_build:
  00021	8b 44 24 48	 mov	 eax, DWORD PTR s$[rsp]
  00025	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  00029	7d 2b		 jge	 SHORT $LN3@cdsk_build

; 2843 :         if (spctab[i].spc_typ == SPCTAB_FREE)

  0002b	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00030	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00034	48 8b 4c 24 40	 mov	 rcx, QWORD PTR spctab$[rsp]
  00039	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0003d	83 f8 07	 cmp	 eax, 7
  00040	75 12		 jne	 SHORT $LN10@cdsk_build

; 2844 :             spctab[i].spc_typ = SPCTAB_NONE;

  00042	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00047	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR spctab$[rsp]
  00050	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
$LN10@cdsk_build:
  00054	eb c1		 jmp	 SHORT $LN2@cdsk_build
$LN3@cdsk_build:

; 2845 :     qsort (spctab, s, sizeof(SPCTAB64), cdsk_spctab64_sort);

  00056	48 63 44 24 48	 movsxd	 rax, DWORD PTR s$[rsp]
  0005b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:cdsk_spctab64_sort
  00062	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  00068	48 8b d0	 mov	 rdx, rax
  0006b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR spctab$[rsp]
  00070	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort
$LN5@cdsk_build:

; 2846 :     while (spctab[s-1].spc_typ == SPCTAB_NONE) s--;

  00076	8b 44 24 48	 mov	 eax, DWORD PTR s$[rsp]
  0007a	ff c8		 dec	 eax
  0007c	48 98		 cdqe
  0007e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00082	48 8b 4c 24 40	 mov	 rcx, QWORD PTR spctab$[rsp]
  00087	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0008b	85 c0		 test	 eax, eax
  0008d	75 0c		 jne	 SHORT $LN6@cdsk_build
  0008f	8b 44 24 48	 mov	 eax, DWORD PTR s$[rsp]
  00093	ff c8		 dec	 eax
  00095	89 44 24 48	 mov	 DWORD PTR s$[rsp], eax
  00099	eb db		 jmp	 SHORT $LN5@cdsk_build
$LN6@cdsk_build:

; 2847 :     for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  0009b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000a3	eb 0a		 jmp	 SHORT $LN9@cdsk_build
$LN7@cdsk_build:
  000a5	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000a9	ff c0		 inc	 eax
  000ab	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN9@cdsk_build:
  000af	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  000b4	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  000b8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR spctab$[rsp]
  000bd	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000c1	83 f8 08	 cmp	 eax, 8
  000c4	0f 84 14 01 00
	00		 je	 $LN8@cdsk_build

; 2848 :         if (spctab[i].spc_off + spctab[i].spc_siz < spctab[i+1].spc_off)

  000ca	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  000cf	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  000d3	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  000d8	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  000dc	48 8b 54 24 40	 mov	 rdx, QWORD PTR spctab$[rsp]
  000e1	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  000e6	48 8b 54 24 40	 mov	 rdx, QWORD PTR spctab$[rsp]
  000eb	48 03 44 0a 20	 add	 rax, QWORD PTR [rdx+rcx+32]
  000f0	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  000f4	ff c1		 inc	 ecx
  000f6	48 63 c9	 movsxd	 rcx, ecx
  000f9	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  000fd	48 8b 54 24 40	 mov	 rdx, QWORD PTR spctab$[rsp]
  00102	48 3b 44 0a 10	 cmp	 rax, QWORD PTR [rdx+rcx+16]
  00107	0f 83 cc 00 00
	00		 jae	 $LN11@cdsk_build

; 2849 :         {
; 2850 :             spctab[s].spc_typ = SPCTAB_FREE;

  0010d	48 63 44 24 48	 movsxd	 rax, DWORD PTR s$[rsp]
  00112	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00116	48 8b 4c 24 40	 mov	 rcx, QWORD PTR spctab$[rsp]
  0011b	c6 04 01 07	 mov	 BYTE PTR [rcx+rax], 7

; 2851 :             spctab[s].spc_val = -1;

  0011f	48 63 44 24 48	 movsxd	 rax, DWORD PTR s$[rsp]
  00124	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00128	48 8b 4c 24 40	 mov	 rcx, QWORD PTR spctab$[rsp]
  0012d	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 2852 :             spctab[s].spc_off = spctab[i].spc_off + spctab[i].spc_siz;

  00135	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0013a	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0013e	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00143	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  00147	48 8b 54 24 40	 mov	 rdx, QWORD PTR spctab$[rsp]
  0014c	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  00151	48 8b 54 24 40	 mov	 rdx, QWORD PTR spctab$[rsp]
  00156	48 03 44 0a 20	 add	 rax, QWORD PTR [rdx+rcx+32]
  0015b	48 63 4c 24 48	 movsxd	 rcx, DWORD PTR s$[rsp]
  00160	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  00164	48 8b 54 24 40	 mov	 rdx, QWORD PTR spctab$[rsp]
  00169	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax

; 2853 :             spctab[s].spc_len =

  0016e	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00172	ff c0		 inc	 eax
  00174	48 98		 cdqe
  00176	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0017a	48 63 4c 24 48	 movsxd	 rcx, DWORD PTR s$[rsp]
  0017f	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  00183	48 8b 54 24 40	 mov	 rdx, QWORD PTR spctab$[rsp]
  00188	4c 8b 44 24 40	 mov	 r8, QWORD PTR spctab$[rsp]
  0018d	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00192	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  00197	48 2b c1	 sub	 rax, rcx
  0019a	48 89 44 24 28	 mov	 QWORD PTR tv181[rsp], rax
  0019f	48 63 44 24 48	 movsxd	 rax, DWORD PTR s$[rsp]
  001a4	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  001a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR spctab$[rsp]
  001ad	48 8b 54 24 28	 mov	 rdx, QWORD PTR tv181[rsp]
  001b2	48 89 54 01 20	 mov	 QWORD PTR [rcx+rax+32], rdx
  001b7	48 63 44 24 48	 movsxd	 rax, DWORD PTR s$[rsp]
  001bc	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  001c0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR spctab$[rsp]
  001c5	48 8b 54 24 28	 mov	 rdx, QWORD PTR tv181[rsp]
  001ca	48 89 54 01 18	 mov	 QWORD PTR [rcx+rax+24], rdx

; 2854 :             spctab[s].spc_siz = spctab[i+1].spc_off - spctab[s].spc_off;
; 2855 :             s++;

  001cf	8b 44 24 48	 mov	 eax, DWORD PTR s$[rsp]
  001d3	ff c0		 inc	 eax
  001d5	89 44 24 48	 mov	 DWORD PTR s$[rsp], eax
$LN11@cdsk_build:

; 2856 :         }

  001d9	e9 c7 fe ff ff	 jmp	 $LN7@cdsk_build
$LN8@cdsk_build:

; 2857 :     qsort (spctab, s, sizeof(SPCTAB64), cdsk_spctab64_sort);

  001de	48 63 44 24 48	 movsxd	 rax, DWORD PTR s$[rsp]
  001e3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:cdsk_spctab64_sort
  001ea	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  001f0	48 8b d0	 mov	 rdx, rax
  001f3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR spctab$[rsp]
  001f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 2858 :     return s;

  001fe	8b 44 24 48	 mov	 eax, DWORD PTR s$[rsp]

; 2859 : }

  00202	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00206	c3		 ret	 0
cdsk_build_free_space64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil64.c
_TEXT	SEGMENT
x$ = 0
y$ = 8
a$ = 32
b$ = 40
cdsk_spctab64_sort PROC

; 2824 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 2825 : const SPCTAB64 *x = a, *y = b;

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00013	48 89 04 24	 mov	 QWORD PTR x$[rsp], rax
  00017	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  0001c	48 89 44 24 08	 mov	 QWORD PTR y$[rsp], rax

; 2826 : 
; 2827 :          if (x->spc_typ == SPCTAB_NONE) return +1;

  00021	48 8b 04 24	 mov	 rax, QWORD PTR x$[rsp]
  00025	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00028	85 c0		 test	 eax, eax
  0002a	75 09		 jne	 SHORT $LN2@cdsk_spcta
  0002c	b8 01 00 00 00	 mov	 eax, 1
  00031	eb 63		 jmp	 SHORT $LN1@cdsk_spcta
  00033	eb 61		 jmp	 SHORT $LN3@cdsk_spcta
$LN2@cdsk_spcta:

; 2828 :     else if (y->spc_typ == SPCTAB_NONE) return -1;

  00035	48 8b 44 24 08	 mov	 rax, QWORD PTR y$[rsp]
  0003a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0003d	85 c0		 test	 eax, eax
  0003f	75 09		 jne	 SHORT $LN4@cdsk_spcta
  00041	b8 ff ff ff ff	 mov	 eax, -1
  00046	eb 4e		 jmp	 SHORT $LN1@cdsk_spcta
  00048	eb 4c		 jmp	 SHORT $LN5@cdsk_spcta
$LN4@cdsk_spcta:

; 2829 :     else if (x->spc_typ == SPCTAB_EOF)  return +1;

  0004a	48 8b 04 24	 mov	 rax, QWORD PTR x$[rsp]
  0004e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00051	83 f8 08	 cmp	 eax, 8
  00054	75 09		 jne	 SHORT $LN6@cdsk_spcta
  00056	b8 01 00 00 00	 mov	 eax, 1
  0005b	eb 39		 jmp	 SHORT $LN1@cdsk_spcta
  0005d	eb 37		 jmp	 SHORT $LN7@cdsk_spcta
$LN6@cdsk_spcta:

; 2830 :     else if (y->spc_typ == SPCTAB_EOF)  return -1;

  0005f	48 8b 44 24 08	 mov	 rax, QWORD PTR y$[rsp]
  00064	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00067	83 f8 08	 cmp	 eax, 8
  0006a	75 09		 jne	 SHORT $LN8@cdsk_spcta
  0006c	b8 ff ff ff ff	 mov	 eax, -1
  00071	eb 23		 jmp	 SHORT $LN1@cdsk_spcta
  00073	eb 21		 jmp	 SHORT $LN9@cdsk_spcta
$LN8@cdsk_spcta:

; 2831 :     else if (x->spc_off < y->spc_off)   return -1;

  00075	48 8b 04 24	 mov	 rax, QWORD PTR x$[rsp]
  00079	48 8b 4c 24 08	 mov	 rcx, QWORD PTR y$[rsp]
  0007e	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00082	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  00086	73 09		 jae	 SHORT $LN10@cdsk_spcta
  00088	b8 ff ff ff ff	 mov	 eax, -1
  0008d	eb 07		 jmp	 SHORT $LN1@cdsk_spcta
  0008f	eb 05		 jmp	 SHORT $LN11@cdsk_spcta
$LN10@cdsk_spcta:

; 2832 :     else                                return +1;

  00091	b8 01 00 00 00	 mov	 eax, 1
$LN11@cdsk_spcta:
$LN9@cdsk_spcta:
$LN7@cdsk_spcta:
$LN5@cdsk_spcta:
$LN3@cdsk_spcta:
$LN1@cdsk_spcta:

; 2833 : } /* end function cdsk_spctab64_sort */

  00096	48 83 c4 18	 add	 rsp, 24
  0009a	c3		 ret	 0
cdsk_spctab64_sort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil64.c
_TEXT	SEGMENT
x$ = 0
y$ = 8
a$ = 32
b$ = 40
comp_spctab64_sort PROC

; 921  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 922  : const SPCTAB64 *x = a, *y = b;

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00013	48 89 04 24	 mov	 QWORD PTR x$[rsp], rax
  00017	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  0001c	48 89 44 24 08	 mov	 QWORD PTR y$[rsp], rax

; 923  : 
; 924  :          if (x->spc_typ == SPCTAB_NONE) return +1;

  00021	48 8b 04 24	 mov	 rax, QWORD PTR x$[rsp]
  00025	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00028	85 c0		 test	 eax, eax
  0002a	75 09		 jne	 SHORT $LN2@comp_spcta
  0002c	b8 01 00 00 00	 mov	 eax, 1
  00031	eb 63		 jmp	 SHORT $LN1@comp_spcta
  00033	eb 61		 jmp	 SHORT $LN3@comp_spcta
$LN2@comp_spcta:

; 925  :     else if (y->spc_typ == SPCTAB_NONE) return -1;

  00035	48 8b 44 24 08	 mov	 rax, QWORD PTR y$[rsp]
  0003a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0003d	85 c0		 test	 eax, eax
  0003f	75 09		 jne	 SHORT $LN4@comp_spcta
  00041	b8 ff ff ff ff	 mov	 eax, -1
  00046	eb 4e		 jmp	 SHORT $LN1@comp_spcta
  00048	eb 4c		 jmp	 SHORT $LN5@comp_spcta
$LN4@comp_spcta:

; 926  :     else if (x->spc_typ == SPCTAB_EOF)  return +1;

  0004a	48 8b 04 24	 mov	 rax, QWORD PTR x$[rsp]
  0004e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00051	83 f8 08	 cmp	 eax, 8
  00054	75 09		 jne	 SHORT $LN6@comp_spcta
  00056	b8 01 00 00 00	 mov	 eax, 1
  0005b	eb 39		 jmp	 SHORT $LN1@comp_spcta
  0005d	eb 37		 jmp	 SHORT $LN7@comp_spcta
$LN6@comp_spcta:

; 927  :     else if (y->spc_typ == SPCTAB_EOF)  return -1;

  0005f	48 8b 44 24 08	 mov	 rax, QWORD PTR y$[rsp]
  00064	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00067	83 f8 08	 cmp	 eax, 8
  0006a	75 09		 jne	 SHORT $LN8@comp_spcta
  0006c	b8 ff ff ff ff	 mov	 eax, -1
  00071	eb 23		 jmp	 SHORT $LN1@comp_spcta
  00073	eb 21		 jmp	 SHORT $LN9@comp_spcta
$LN8@comp_spcta:

; 928  :     else if (x->spc_off < y->spc_off)   return -1;

  00075	48 8b 04 24	 mov	 rax, QWORD PTR x$[rsp]
  00079	48 8b 4c 24 08	 mov	 rcx, QWORD PTR y$[rsp]
  0007e	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00082	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  00086	73 09		 jae	 SHORT $LN10@comp_spcta
  00088	b8 ff ff ff ff	 mov	 eax, -1
  0008d	eb 07		 jmp	 SHORT $LN1@comp_spcta
  0008f	eb 05		 jmp	 SHORT $LN11@comp_spcta
$LN10@comp_spcta:

; 929  :     else                                return +1;

  00091	b8 01 00 00 00	 mov	 eax, 1
$LN11@comp_spcta:
$LN9@comp_spcta:
$LN7@comp_spcta:
$LN5@comp_spcta:
$LN3@comp_spcta:
$LN1@comp_spcta:

; 930  : }

  00096	48 83 c4 18	 add	 rsp, 24
  0009a	c3		 ret	 0
comp_spctab64_sort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil64.c
_TEXT	SEGMENT
i$ = 144
spctab$ = 152
s$ = 160
hdrerr$ = 164
trktyp$ = 165
fd$ = 168
len$ = 176
fsperr$ = 184
recovery$ = 185
rc$ = 188
off$ = 192
l$ = 200
j$ = 208
swapend$ = 216
heads$ = 220
n$ = 224
trk$ = 232
valid$ = 236
ckddasd$ = 237
shadow$ = 238
f$ = 240
L1idx$ = 248
comp$ = 252
l2$ = 256
blkgrp$ = 264
trks$ = 268
rcvtab$ = 272
fbadasd$ = 280
comperrs$ = 281
pass$ = 284
blkgrpsz$ = 288
l1size$ = 292
trksz$ = 296
fsp$ = 304
cyls$ = 312
l1$ = 320
lopos$ = 328
cyl$ = 336
head$ = 340
ro$ = 344
l2x$ = 348
tv1129 = 352
l2errs$ = 360
imgtyp$ = 368
hipos$ = 376
blkgrps$ = 384
flen$1 = 392
tv536 = 400
tv542 = 404
tv564 = 408
tv570 = 412
blks$ = 416
tv618 = 420
tv624 = 424
tv644 = 428
tv650 = 432
tv681 = 436
tv687 = 440
tv740 = 444
tv746 = 448
tv772 = 452
tv778 = 456
tv795 = 460
tv801 = 464
tv814 = 468
tv820 = 472
tv826 = 476
tv864 = 480
tv870 = 484
tv876 = 488
tv882 = 492
tv888 = 496
tv894 = 500
tv899 = 504
tv916 = 508
tv922 = 512
tv940 = 516
tv946 = 520
tv968 = 524
tv974 = 528
tv991 = 532
tv997 = 536
tv1022 = 540
tv1060 = 544
tv1077 = 548
tv1083 = 552
err$2 = 556
tv1586 = 560
tv1658 = 564
tv1664 = 568
tv1689 = 572
tv1695 = 576
tv1730 = 580
tv1736 = 584
tv1767 = 588
tv1773 = 592
tv1905 = 596
tv1911 = 600
tv1974 = 604
tv1980 = 608
tv2048 = 612
tv2054 = 616
tv2071 = 620
tv2077 = 624
tv2333 = 628
tv2339 = 632
tv2355 = 636
tv2361 = 640
tv2479 = 644
tv2485 = 648
tv2529 = 652
tv2535 = 656
tv2598 = 660
tv2604 = 664
tv2621 = 668
tv2627 = 672
tv2662 = 676
tv2668 = 680
tv2694 = 684
tv2700 = 688
tv2733 = 692
tv2739 = 696
tv2761 = 700
tv2767 = 704
tv3170 = 708
tv3176 = 712
tv3199 = 716
tv3205 = 720
tv3594 = 724
tv3600 = 728
tv3623 = 732
tv3629 = 736
tv3713 = 740
tv3719 = 744
tv3739 = 748
tv3745 = 752
tv3964 = 756
tv3970 = 760
tv3986 = 764
tv3992 = 768
tv4064 = 772
tv4070 = 776
tv4087 = 780
tv4093 = 784
tv4148 = 788
tv4154 = 792
tv4171 = 796
tv4177 = 800
tv4292 = 804
tv4298 = 808
tv4314 = 812
tv4320 = 816
tv4885 = 820
tv4891 = 824
tv4907 = 828
tv4913 = 832
tv4927 = 836
tv4929 = 840
tv5023 = 844
tv5029 = 848
tv5050 = 852
tv5056 = 856
tv5082 = 860
tv5120 = 864
tv5142 = 868
tv5148 = 872
tv5176 = 876
tv5182 = 880
tv5206 = 884
tv5212 = 888
tv5240 = 892
tv5246 = 896
tv5270 = 900
tv5276 = 904
tv5305 = 908
tv5311 = 912
tv5364 = 916
tv5370 = 920
tv5400 = 924
tv5406 = 928
tv5427 = 932
tv5433 = 936
tv86 = 940
tv227 = 944
tv233 = 948
tv248 = 952
tv290 = 956
tv296 = 960
tv317 = 964
tv323 = 968
tv379 = 972
tv385 = 976
tv404 = 980
tv410 = 984
tv443 = 988
tv481 = 992
tv501 = 996
tv507 = 1000
ckd$3 = 1008
flen$4 = 1016
fpos$5 = 1024
tv207 = 1032
tv211 = 1036
tv272 = 1040
tv372 = 1044
tv397 = 1048
tv909 = 1052
tv933 = 1056
tv2448 = 1060
tv2452 = 1064
tv2456 = 1068
tv2464 = 1072
tv2498 = 1076
tv2502 = 1080
tv2506 = 1084
tv2514 = 1088
tv3059 = 1092
tv3070 = 1096
fdflags$ = 1100
cckd$ = 1104
tv5231 = 1112
tv5261 = 1120
$T6 = 1128
tv283 = 1136
tv310 = 1144
tv1254 = 1152
tv2407 = 1160
tv2855 = 1168
fpos$7 = 1176
tv3351 = 1184
tv3790 = 1192
tv3801 = 1200
cckd_maxsize$ = 1208
tv5167 = 1216
tv5197 = 1224
tv312 = 1232
tv5417 = 1240
tv137 = 1248
tv204 = 1256
tv222 = 1264
tv257 = 1272
tv285 = 1280
tv790 = 1288
tv374 = 1296
tv399 = 1304
tv435 = 1312
tv438 = 1320
tv493 = 1328
tv496 = 1336
tv526 = 1344
tv528 = 1352
tv531 = 1360
tv554 = 1368
tv556 = 1376
tv559 = 1384
tv610 = 1392
tv613 = 1400
tv636 = 1408
tv639 = 1416
tv672 = 1424
tv676 = 1432
tv699 = 1440
tv703 = 1448
tv767 = 1456
tv5422 = 1464
tv911 = 1472
tv935 = 1480
tv963 = 1488
tv986 = 1496
tv1017 = 1504
tv1072 = 1512
tv1144 = 1520
tv1354 = 1528
tv1359 = 1536
tv1391 = 1544
tv1644 = 1552
tv1648 = 1560
tv1653 = 1568
tv1675 = 1576
tv1679 = 1584
tv1684 = 1592
tv1711 = 1600
tv1716 = 1608
tv1720 = 1616
tv1748 = 1624
tv1753 = 1632
tv1757 = 1640
tv1885 = 1648
tv1889 = 1656
tv1893 = 1664
tv1897 = 1672
tv1900 = 1680
tv1954 = 1688
tv1958 = 1696
tv1962 = 1704
tv1966 = 1712
tv1969 = 1720
tv2043 = 1728
tv2066 = 1736
tv2120 = 1744
tv2254 = 1752
tv2328 = 1760
tv2350 = 1768
tv2395 = 1776
tv2467 = 1784
tv2471 = 1792
tv2474 = 1800
tv2517 = 1808
tv2521 = 1816
tv2524 = 1824
tv2593 = 1832
tv2616 = 1840
tv2647 = 1848
tv2654 = 1856
tv2657 = 1864
tv2679 = 1872
tv2686 = 1880
tv2689 = 1888
tv2725 = 1896
tv2728 = 1904
tv2753 = 1912
tv2756 = 1920
tv2863 = 1928
tv3159 = 1936
tv3162 = 1944
tv3165 = 1952
tv3188 = 1960
tv3191 = 1968
tv3194 = 1976
tv3359 = 1984
tv3583 = 1992
tv3586 = 2000
tv3589 = 2008
tv3612 = 2016
tv3615 = 2024
tv3618 = 2032
tv3704 = 2040
tv3708 = 2048
tv3730 = 2056
tv3734 = 2064
tv3959 = 2072
tv3981 = 2080
tv4059 = 2088
tv4082 = 2096
tv4143 = 2104
tv4166 = 2112
tv4195 = 2120
tv4243 = 2128
tv4287 = 2136
tv4309 = 2144
tv4413 = 2152
tv4438 = 2160
tv4486 = 2168
tv4508 = 2176
tv4733 = 2184
tv4785 = 2192
tv4812 = 2200
tv4833 = 2208
tv4854 = 2216
tv4880 = 2224
tv4902 = 2232
tv4970 = 2240
tv4980 = 2248
tv5013 = 2256
tv5018 = 2264
tv5040 = 2272
tv5045 = 2280
tv5071 = 2288
tv5077 = 2296
tv5131 = 2304
tv5137 = 2312
tv5171 = 2320
tv5201 = 2328
tv5235 = 2336
tv5265 = 2344
tv5295 = 2352
tv5300 = 2360
tv5354 = 2368
tv5359 = 2376
tv5390 = 2384
tv5395 = 2392
devhdr$ = 2400
trkhdr$8 = 2912
r0$9 = 2920
freeblk$ = 2928
l2ent$ = 2944
cdevhdr$ = 2960
fst$ = 3472
cdevhdr2$ = 3536
l2tab$ = 4048
empty_l2$ = 8144
space1$10 = 12240
space2$11 = 12272
compmask$ = 12304
buf$12 = 12560
buf$13 = 12624
buf$ = 12688
__$ArrayPad$ = 274832
dev$ = 274880
level$ = 274888
cckd64_chkdsk PROC

; 944  : {

$LN828:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	56		 push	 rsi
  0000a	57		 push	 rdi
  0000b	b8 a8 31 04 00	 mov	 eax, 274856		; 000431a8H
  00010	e8 00 00 00 00	 call	 __chkstk
  00015	48 2b e0	 sub	 rsp, rax
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 84 24 90
	31 04 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 945  : CCKD64_EXT     *cckd;                   /* -> ckd extension          */
; 946  : int             fd;                     /* file descriptor           */
; 947  : struct stat     fst;                    /* file status information   */
; 948  : int             fdflags;                /* file descriptor flags     */
; 949  : U64             cckd_maxsize;           /* max cckd file size        */
; 950  : int             ro;                     /* 1=file opened read-only   */
; 951  : S64             f, i, j, l, n;          /* work integers             */
; 952  : int             L1idx, l2x;             /* l1, l2 table indexes      */
; 953  : U32             imgtyp;                 /* Dasd image type           */
; 954  : BYTE            compmask[256];          /* compression byte mask
; 955  :                                            00 - supported
; 956  :                                            0x - valid, not supported
; 957  :                                            ff - invalid              */
; 958  : U64             off;                    /* file offset               */
; 959  : U64             len;                    /* length to read            */
; 960  : int             rc;                     /* function return code      */
; 961  : int             comp;                   /* trkhdr compression byte[0]*/
; 962  : int             cyl;                    /* trkhdr cyl      bytes[1-2]*/
; 963  : int             head;                   /* trkhdr head     bytes[3-4]*/
; 964  : int             trk;                    /* trkhdr calculated trk     */
; 965  : int             cyls;                   /* number cylinders          */
; 966  : int             heads;                  /* number heads/cylinder     */
; 967  : int             trks;                   /* number tracks             */
; 968  : unsigned int    trksz;                  /* track size                */
; 969  : int             blks;                   /* number fba blocks         */
; 970  : int             blkgrp;                 /* current block group nbr   */
; 971  : int             blkgrps;                /* number fba block groups   */
; 972  : unsigned int    blkgrpsz;               /* fba block group size      */
; 973  : BYTE            trktyp;                 /* track type (TRK, BLKGRP)  */
; 974  : BYTE            ckddasd=0;              /* 1=ckd                     */

  0002a	c6 84 24 ed 00
	00 00 00	 mov	 BYTE PTR ckddasd$[rsp], 0

; 975  : BYTE            fbadasd=0;              /* 1= fba                    */

  00032	c6 84 24 18 01
	00 00 00	 mov	 BYTE PTR fbadasd$[rsp], 0

; 976  : BYTE            shadow=0;               /* 0xff=shadow file          */

  0003a	c6 84 24 ee 00
	00 00 00	 mov	 BYTE PTR shadow$[rsp], 0

; 977  : BYTE            hdrerr=0;               /* non-zero: header errors   */

  00042	c6 84 24 a4 00
	00 00 00	 mov	 BYTE PTR hdrerr$[rsp], 0

; 978  : BYTE            fsperr=0;               /* 1=rebuild free space      */

  0004a	c6 84 24 b8 00
	00 00 00	 mov	 BYTE PTR fsperr$[rsp], 0

; 979  : BYTE            comperrs=0;             /* 1=unsupported comp found  */

  00052	c6 84 24 19 01
	00 00 00	 mov	 BYTE PTR comperrs$[rsp], 0

; 980  : BYTE            recovery=0;             /* 1=perform track recovery  */

  0005a	c6 84 24 b9 00
	00 00 00	 mov	 BYTE PTR recovery$[rsp], 0

; 981  : BYTE            valid;                  /* 1=valid trk recovered     */
; 982  : int             l1size;                 /* size of l1 table          */
; 983  : BYTE            swapend=0;              /* 1=call cckd_swapend       */

  00062	c6 84 24 d8 00
	00 00 00	 mov	 BYTE PTR swapend$[rsp], 0

; 984  : U64             lopos, hipos;           /* low/high file positions   */
; 985  : int             pass;                   /* recovery pass number (fba)*/
; 986  : int             s;                      /* space table index         */
; 987  : SPCTAB64       *spctab=NULL;            /* -> space table            */

  0006a	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR spctab$[rsp], 0

; 988  : BYTE           *l2errs=NULL;            /* l2 error table            */

  00076	48 c7 84 24 68
	01 00 00 00 00
	00 00		 mov	 QWORD PTR l2errs$[rsp], 0

; 989  : BYTE           *rcvtab=NULL;            /* recovered tracks          */

  00082	48 c7 84 24 10
	01 00 00 00 00
	00 00		 mov	 QWORD PTR rcvtab$[rsp], 0

; 990  : CKD_DEVHDR      devhdr;                 /* device header             */
; 991  : CCKD64_DEVHDR   cdevhdr;                /* compressed device header  */
; 992  : CCKD64_DEVHDR   cdevhdr2;               /* compressed device header 2*/
; 993  : CCKD64_L1ENT   *l1=NULL;                /* -> level 1 table          */

  0008e	48 c7 84 24 40
	01 00 00 00 00
	00 00		 mov	 QWORD PTR l1$[rsp], 0

; 994  : CCKD64_L2ENT    l2ent;                  /* level 2 entry             */
; 995  : CCKD64_L2ENT    l2tab[256];             /* level 2 table             */
; 996  : CCKD64_L2ENT  **l2=NULL;                /* -> level 2 table array    */

  0009a	48 c7 84 24 00
	01 00 00 00 00
	00 00		 mov	 QWORD PTR l2$[rsp], 0

; 997  : CCKD64_L2ENT    empty_l2[256];          /* Empty l2 table            */
; 998  : CCKD64_FREEBLK  freeblk;                /* free block                */
; 999  : CCKD64_FREEBLK *fsp=NULL;               /* free blocks (new format)  */

  000a6	48 c7 84 24 30
	01 00 00 00 00
	00 00		 mov	 QWORD PTR fsp$[rsp], 0

; 1000 : BYTE            buf[4*65536];           /* buffer                    */
; 1001 : 
; 1002 :     /* Get fd */
; 1003 :     cckd = dev->cckd_ext;

  000b2	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  000ba	48 8b 80 08 13
	00 00		 mov	 rax, QWORD PTR [rax+4872]
  000c1	48 89 84 24 50
	04 00 00	 mov	 QWORD PTR cckd$[rsp], rax

; 1004 :     if (cckd == NULL)

  000c9	48 83 bc 24 50
	04 00 00 00	 cmp	 QWORD PTR cckd$[rsp], 0
  000d2	75 17		 jne	 SHORT $LN144@cckd64_chk

; 1005 :         fd = dev->fd;

  000d4	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  000dc	8b 80 ac 01 00
	00		 mov	 eax, DWORD PTR [rax+428]
  000e2	89 84 24 a8 00
	00 00		 mov	 DWORD PTR fd$[rsp], eax
  000e9	eb 22		 jmp	 SHORT $LN145@cckd64_chk
$LN144@cckd64_chk:

; 1006 :     else
; 1007 :         fd = cckd->fd[cckd->sfn];

  000eb	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR cckd$[rsp]
  000f3	48 63 40 3c	 movsxd	 rax, DWORD PTR [rax+60]
  000f7	48 8b 8c 24 50
	04 00 00	 mov	 rcx, QWORD PTR cckd$[rsp]
  000ff	8b 84 81 f0 00
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+240]
  00106	89 84 24 a8 00
	00 00		 mov	 DWORD PTR fd$[rsp], eax
$LN145@cckd64_chk:

; 1008 : 
; 1009 :     /* Get some file information */
; 1010 :     if ( fstat (fd, &fst) < 0 )

  0010d	48 8d 94 24 90
	0d 00 00	 lea	 rdx, QWORD PTR fst$[rsp]
  00115	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0011c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fstat64
  00122	85 c0		 test	 eax, eax
  00124	7d 05		 jge	 SHORT $LN146@cckd64_chk

; 1011 :         goto cdsk_fstat_error;

  00126	e9 d1 a1 00 00	 jmp	 $cdsk_fstat_error$829
$LN146@cckd64_chk:

; 1012 :     gui_fprintf (stderr, "SIZE=%"PRIu64"\n", (U64) fst.st_size);

  0012b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00132	83 38 00	 cmp	 DWORD PTR [rax], 0
  00135	74 23		 je	 SHORT $LN147@cckd64_chk
  00137	b9 02 00 00 00	 mov	 ecx, 2
  0013c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00142	4c 8b 84 24 a8
	0d 00 00	 mov	 r8, QWORD PTR fst$[rsp+24]
  0014a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170003
  00151	48 8b c8	 mov	 rcx, rax
  00154	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN147@cckd64_chk:

; 1013 :     hipos = fst.st_size;

  0015a	48 8b 84 24 a8
	0d 00 00	 mov	 rax, QWORD PTR fst$[rsp+24]
  00162	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR hipos$[rsp], rax

; 1014 :     cckd_maxsize = CCKD64_MAXSIZE;

  0016a	48 c7 84 24 b8
	04 00 00 ff ff
	ff ff		 mov	 QWORD PTR cckd_maxsize$[rsp], -1

; 1015 :     fdflags = get_file_accmode_flags(fd);

  00176	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0017d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_get_file_accmode_flags
  00183	89 84 24 4c 04
	00 00		 mov	 DWORD PTR fdflags$[rsp], eax

; 1016 :     ro = (fdflags & O_RDWR) == 0;

  0018a	8b 84 24 4c 04
	00 00		 mov	 eax, DWORD PTR fdflags$[rsp]
  00191	83 e0 02	 and	 eax, 2
  00194	85 c0		 test	 eax, eax
  00196	75 0d		 jne	 SHORT $LN508@cckd64_chk
  00198	c7 84 24 ac 03
	00 00 01 00 00
	00		 mov	 DWORD PTR tv86[rsp], 1
  001a3	eb 0b		 jmp	 SHORT $LN509@cckd64_chk
$LN508@cckd64_chk:
  001a5	c7 84 24 ac 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv86[rsp], 0
$LN509@cckd64_chk:
  001b0	8b 84 24 ac 03
	00 00		 mov	 eax, DWORD PTR tv86[rsp]
  001b7	89 84 24 58 01
	00 00		 mov	 DWORD PTR ro$[rsp], eax

; 1017 : 
; 1018 :     /* Build table for compression byte test */
; 1019 :     memset (compmask, 0xff, 256);

  001be	48 8d 84 24 10
	30 00 00	 lea	 rax, QWORD PTR compmask$[rsp]
  001c6	48 8b f8	 mov	 rdi, rax
  001c9	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  001ce	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  001d3	f3 aa		 rep stosb

; 1020 :     compmask[0] = 0;

  001d5	b8 01 00 00 00	 mov	 eax, 1
  001da	48 6b c0 00	 imul	 rax, rax, 0
  001de	48 89 84 24 68
	04 00 00	 mov	 QWORD PTR $T6[rsp], rax
  001e6	48 81 bc 24 68
	04 00 00 00 01
	00 00		 cmp	 QWORD PTR $T6[rsp], 256	; 00000100H
  001f2	73 02		 jae	 SHORT $LN510@cckd64_chk
  001f4	eb 05		 jmp	 SHORT $LN511@cckd64_chk
$LN510@cckd64_chk:
  001f6	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN511@cckd64_chk:
  001fb	48 8b 84 24 68
	04 00 00	 mov	 rax, QWORD PTR $T6[rsp]
  00203	c6 84 04 10 30
	00 00 00	 mov	 BYTE PTR compmask$[rsp+rax], 0

; 1021 : #if defined( HAVE_ZLIB )
; 1022 :     compmask[CCKD_COMPRESS_ZLIB] = 0;
; 1023 : #else
; 1024 :     compmask[CCKD_COMPRESS_ZLIB] = 1;

  0020b	b8 01 00 00 00	 mov	 eax, 1
  00210	48 6b c0 01	 imul	 rax, rax, 1
  00214	c6 84 04 10 30
	00 00 01	 mov	 BYTE PTR compmask$[rsp+rax], 1

; 1025 : #endif
; 1026 : #if defined( CCKD_BZIP2 )
; 1027 :     compmask[CCKD_COMPRESS_BZIP2] = 0;
; 1028 : #else
; 1029 :     compmask[CCKD_COMPRESS_BZIP2] = 2;

  0021c	b8 01 00 00 00	 mov	 eax, 1
  00221	48 6b c0 02	 imul	 rax, rax, 2
  00225	c6 84 04 10 30
	00 00 02	 mov	 BYTE PTR compmask$[rsp+rax], 2

; 1030 : #endif
; 1031 : 
; 1032 :     /*---------------------------------------------------------------
; 1033 :      * Header checks
; 1034 :      *---------------------------------------------------------------*/
; 1035 : 
; 1036 :     /* Read the device header */
; 1037 :     off = 0;

  0022d	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR off$[rsp], 0

; 1038 :     if ( lseek (fd, off, SEEK_SET) < 0)

  00239	45 33 c0	 xor	 r8d, r8d
  0023c	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  00244	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0024b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00251	48 85 c0	 test	 rax, rax
  00254	7d 05		 jge	 SHORT $LN148@cckd64_chk

; 1039 :         goto cdsk_lseek_error;

  00256	e9 d7 a2 00 00	 jmp	 $cdsk_lseek_error$830
$LN148@cckd64_chk:

; 1040 :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  0025b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00262	83 38 00	 cmp	 DWORD PTR [rax], 0
  00265	74 43		 je	 SHORT $LN149@cckd64_chk
  00267	41 b8 01 00 00
	00		 mov	 r8d, 1
  0026d	33 d2		 xor	 edx, edx
  0026f	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00276	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0027c	48 89 84 24 e0
	04 00 00	 mov	 QWORD PTR tv137[rsp], rax
  00284	b9 02 00 00 00	 mov	 ecx, 2
  00289	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0028f	48 8b 8c 24 e0
	04 00 00	 mov	 rcx, QWORD PTR tv137[rsp]
  00297	4c 8b c1	 mov	 r8, rcx
  0029a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170006
  002a1	48 8b c8	 mov	 rcx, rax
  002a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN149@cckd64_chk:

; 1041 :     len = CKD_DEVHDR_SIZE;

  002aa	48 c7 84 24 b0
	00 00 00 00 02
	00 00		 mov	 QWORD PTR len$[rsp], 512 ; 00000200H

; 1042 :     if ((U64)(rc = read (fd, &devhdr, (unsigned int) len)) != len)

  002b6	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  002be	48 8d 94 24 60
	09 00 00	 lea	 rdx, QWORD PTR devhdr$[rsp]
  002c6	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  002cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  002d3	89 84 24 bc 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  002da	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  002e2	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  002ea	74 05		 je	 SHORT $LN150@cckd64_chk

; 1043 :         goto cdsk_read_error;

  002ec	e9 91 a4 00 00	 jmp	 $cdsk_read_error$831
$LN150@cckd64_chk:

; 1044 : 
; 1045 :     /* Device header checks */
; 1046 :     dev->cckd64 = 1;

  002f1	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  002f9	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  00300	0c 01		 or	 al, 1
  00302	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0030a	88 81 10 13 00
	00		 mov	 BYTE PTR [rcx+4880], al

; 1047 :     imgtyp = dh_devid_typ( devhdr.dh_devid );

  00310	48 8d 8c 24 60
	09 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp]
  00318	e8 00 00 00 00	 call	 dh_devid_typ
  0031d	89 84 24 70 01
	00 00		 mov	 DWORD PTR imgtyp$[rsp], eax

; 1048 : 
; 1049 :          if (imgtyp & CKD64_CMP_OR_SF_TYP) ckddasd = 1;

  00324	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR imgtyp$[rsp]
  0032b	25 00 00 60 00	 and	 eax, 6291456		; 00600000H
  00330	85 c0		 test	 eax, eax
  00332	74 0d		 je	 SHORT $LN151@cckd64_chk
  00334	c6 84 24 ed 00
	00 00 01	 mov	 BYTE PTR ckddasd$[rsp], 1
  0033c	e9 09 02 00 00	 jmp	 $LN152@cckd64_chk
$LN151@cckd64_chk:

; 1050 :     else if (imgtyp & FBA64_CMP_OR_SF_TYP) fbadasd = 1;

  00341	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR imgtyp$[rsp]
  00348	83 e0 60	 and	 eax, 96			; 00000060H
  0034b	85 c0		 test	 eax, eax
  0034d	74 0d		 je	 SHORT $LN153@cckd64_chk
  0034f	c6 84 24 18 01
	00 00 01	 mov	 BYTE PTR fbadasd$[rsp], 1
  00357	e9 ee 01 00 00	 jmp	 $LN154@cckd64_chk
$LN153@cckd64_chk:

; 1051 :     else
; 1052 :     {
; 1053 :         if (imgtyp & ANY32_CMP_OR_SF_TYP)

  0035c	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR imgtyp$[rsp]
  00363	25 00 60 00 60	 and	 eax, 1610637312		; 60006000H
  00368	85 c0		 test	 eax, eax
  0036a	74 38		 je	 SHORT $LN155@cckd64_chk

; 1054 :         {
; 1055 :             dev->cckd64 = 0;

  0036c	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00374	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  0037b	24 fe		 and	 al, 254			; 000000feH
  0037d	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00385	88 81 10 13 00
	00		 mov	 BYTE PTR [rcx+4880], al

; 1056 :             return cckd_chkdsk( dev, level );

  0038b	8b 94 24 c8 31
	04 00		 mov	 edx, DWORD PTR level$[rsp]
  00392	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0039a	e8 00 00 00 00	 call	 cckd_chkdsk
  0039f	e9 b1 ad 00 00	 jmp	 $LN1@cckd64_chk
$LN155@cckd64_chk:

; 1057 :         }
; 1058 : 
; 1059 :         // "%1d:%04X CCKD file %s: not a compressed dasd file"
; 1060 :         if (dev->batch)

  003a4	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  003ac	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  003b2	c1 e8 0a	 shr	 eax, 10
  003b5	83 e0 01	 and	 eax, 1
  003b8	85 c0		 test	 eax, eax
  003ba	0f 84 ad 00 00
	00		 je	 $LN156@cckd64_chk

; 1061 :             FWRMSG( stdout, HHC00356, "E", SSID_TO_LCSS( dev->ssid ),

  003c0	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  003c8	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  003ce	48 89 84 24 e8
	04 00 00	 mov	 QWORD PTR tv204[rsp], rax
  003d6	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003de	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  003e2	89 8c 24 08 04
	00 00		 mov	 DWORD PTR tv207[rsp], ecx
  003e9	48 8b 94 24 c0
	31 04 00	 mov	 rdx, QWORD PTR dev$[rsp]
  003f1	0f b7 52 44	 movzx	 edx, WORD PTR [rdx+68]
  003f5	d1 fa		 sar	 edx, 1
  003f7	89 94 24 0c 04
	00 00		 mov	 DWORD PTR tv211[rsp], edx
  003fe	b9 01 00 00 00	 mov	 ecx, 1
  00403	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00409	48 8b 8c 24 e8
	04 00 00	 mov	 rcx, QWORD PTR tv204[rsp]
  00411	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00416	8b 8c 24 08 04
	00 00		 mov	 ecx, DWORD PTR tv207[rsp]
  0041d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00421	8b 8c 24 0c 04
	00 00		 mov	 ecx, DWORD PTR tv211[rsp]
  00428	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0042c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170015
  00433	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00438	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170016
  0043f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00444	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00449	41 b9 03 00 00
	00		 mov	 r9d, 3
  0044f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170017
  00456	ba 26 04 00 00	 mov	 edx, 1062		; 00000426H
  0045b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170018
  00462	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00468	e9 d8 00 00 00	 jmp	 $LN157@cckd64_chk
$LN156@cckd64_chk:

; 1062 :                 dev->devnum, dev->filename );
; 1063 :         else
; 1064 :             WRMSG( HHC00356, "E", LCSS_DEVNUM, dev->filename );

  0046d	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00476	74 15		 je	 SHORT $LN512@cckd64_chk
  00478	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00480	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00484	89 84 24 b0 03
	00 00		 mov	 DWORD PTR tv227[rsp], eax
  0048b	eb 0b		 jmp	 SHORT $LN513@cckd64_chk
$LN512@cckd64_chk:
  0048d	c7 84 24 b0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv227[rsp], 0
$LN513@cckd64_chk:
  00498	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  004a1	74 17		 je	 SHORT $LN514@cckd64_chk
  004a3	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  004ab	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  004af	d1 f8		 sar	 eax, 1
  004b1	89 84 24 b4 03
	00 00		 mov	 DWORD PTR tv233[rsp], eax
  004b8	eb 0b		 jmp	 SHORT $LN515@cckd64_chk
$LN514@cckd64_chk:
  004ba	c7 84 24 b4 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv233[rsp], 0
$LN515@cckd64_chk:
  004c5	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  004cd	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  004d3	48 89 84 24 f0
	04 00 00	 mov	 QWORD PTR tv222[rsp], rax
  004db	b9 01 00 00 00	 mov	 ecx, 1
  004e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004e6	48 8b 8c 24 f0
	04 00 00	 mov	 rcx, QWORD PTR tv222[rsp]
  004ee	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  004f3	8b 8c 24 b0 03
	00 00		 mov	 ecx, DWORD PTR tv227[rsp]
  004fa	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  004fe	8b 8c 24 b4 03
	00 00		 mov	 ecx, DWORD PTR tv233[rsp]
  00505	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00509	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170019
  00510	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00515	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170020
  0051c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00521	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00526	41 b9 03 00 00
	00		 mov	 r9d, 3
  0052c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170021
  00533	ba 28 04 00 00	 mov	 edx, 1064		; 00000428H
  00538	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170022
  0053f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN157@cckd64_chk:

; 1065 :         goto cdsk_error;

  00545	e9 fb ab 00 00	 jmp	 $cdsk_error$832
$LN154@cckd64_chk:
$LN152@cckd64_chk:

; 1066 :     }
; 1067 : 
; 1068 :     if (imgtyp & ANY64_SF_TYP)

  0054a	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR imgtyp$[rsp]
  00551	25 20 00 20 00	 and	 eax, 2097184		; 00200020H
  00556	85 c0		 test	 eax, eax
  00558	74 08		 je	 SHORT $LN158@cckd64_chk

; 1069 :         shadow = 0xff;

  0055a	c6 84 24 ee 00
	00 00 ff	 mov	 BYTE PTR shadow$[rsp], 255 ; 000000ffH
$LN158@cckd64_chk:

; 1070 : 
; 1071 :     trktyp = ckddasd ? SPCTAB_TRK : SPCTAB_BLKGRP;

  00562	0f b6 84 24 ed
	00 00 00	 movzx	 eax, BYTE PTR ckddasd$[rsp]
  0056a	85 c0		 test	 eax, eax
  0056c	74 0d		 je	 SHORT $LN516@cckd64_chk
  0056e	c7 84 24 b8 03
	00 00 05 00 00
	00		 mov	 DWORD PTR tv248[rsp], 5
  00579	eb 0b		 jmp	 SHORT $LN517@cckd64_chk
$LN516@cckd64_chk:
  0057b	c7 84 24 b8 03
	00 00 06 00 00
	00		 mov	 DWORD PTR tv248[rsp], 6
$LN517@cckd64_chk:
  00586	0f b6 84 24 b8
	03 00 00	 movzx	 eax, BYTE PTR tv248[rsp]
  0058e	88 84 24 a5 00
	00 00		 mov	 BYTE PTR trktyp$[rsp], al

; 1072 : 
; 1073 :     /* Read the cckd device header */
; 1074 :     off = CCKD64_DEVHDR_POS;

  00595	48 c7 84 24 c0
	00 00 00 00 02
	00 00		 mov	 QWORD PTR off$[rsp], 512 ; 00000200H

; 1075 :     if ( lseek (fd, off, SEEK_SET) < 0)

  005a1	45 33 c0	 xor	 r8d, r8d
  005a4	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  005ac	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  005b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  005b9	48 85 c0	 test	 rax, rax
  005bc	7d 05		 jge	 SHORT $LN159@cckd64_chk

; 1076 :         goto cdsk_lseek_error;

  005be	e9 6f 9f 00 00	 jmp	 $cdsk_lseek_error$830
$LN159@cckd64_chk:

; 1077 :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  005c3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  005ca	83 38 00	 cmp	 DWORD PTR [rax], 0
  005cd	74 43		 je	 SHORT $LN160@cckd64_chk
  005cf	41 b8 01 00 00
	00		 mov	 r8d, 1
  005d5	33 d2		 xor	 edx, edx
  005d7	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  005de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  005e4	48 89 84 24 f8
	04 00 00	 mov	 QWORD PTR tv257[rsp], rax
  005ec	b9 02 00 00 00	 mov	 ecx, 2
  005f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005f7	48 8b 8c 24 f8
	04 00 00	 mov	 rcx, QWORD PTR tv257[rsp]
  005ff	4c 8b c1	 mov	 r8, rcx
  00602	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170026
  00609	48 8b c8	 mov	 rcx, rax
  0060c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN160@cckd64_chk:

; 1078 :     len = CCKD64_DEVHDR_SIZE;

  00612	48 c7 84 24 b0
	00 00 00 00 02
	00 00		 mov	 QWORD PTR len$[rsp], 512 ; 00000200H

; 1079 :     if ((U64)(rc = read (fd, &cdevhdr, (unsigned int) len)) != len)

  0061e	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  00626	48 8d 94 24 90
	0b 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  0062e	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00635	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  0063b	89 84 24 bc 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  00642	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  0064a	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  00652	74 05		 je	 SHORT $LN161@cckd64_chk

; 1080 :         goto cdsk_read_error;

  00654	e9 29 a1 00 00	 jmp	 $cdsk_read_error$831
$LN161@cckd64_chk:

; 1081 : 
; 1082 :     /* Endianess check */
; 1083 :     if ((cdevhdr.cdh_opts & CCKD_OPT_BIGEND) != cckd_def_opt_bigend())

  00659	0f b6 84 24 93
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  00661	83 e0 02	 and	 eax, 2
  00664	89 84 24 10 04
	00 00		 mov	 DWORD PTR tv272[rsp], eax
  0066b	e8 00 00 00 00	 call	 cckd_def_opt_bigend
  00670	8b 8c 24 10 04
	00 00		 mov	 ecx, DWORD PTR tv272[rsp]
  00677	3b c8		 cmp	 ecx, eax
  00679	0f 84 a1 02 00
	00		 je	 $LN162@cckd64_chk

; 1084 :     {
; 1085 :         if (!ro)

  0067f	83 bc 24 58 01
	00 00 00	 cmp	 DWORD PTR ro$[rsp], 0
  00687	0f 85 7e 02 00
	00		 jne	 $LN163@cckd64_chk

; 1086 :         {
; 1087 :             if(dev->batch)

  0068d	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00695	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0069b	c1 e8 0a	 shr	 eax, 10
  0069e	83 e0 01	 and	 eax, 1
  006a1	85 c0		 test	 eax, eax
  006a3	0f 84 19 01 00
	00		 je	 $LN165@cckd64_chk

; 1088 :                 // "%1d:%04X CCKD file %s: converting to %s"
; 1089 :                 FWRMSG( stdout, HHC00357, "I", LCSS_DEVNUM, dev->filename,

  006a9	0f b6 84 24 93
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  006b1	83 e0 02	 and	 eax, 2
  006b4	85 c0		 test	 eax, eax
  006b6	74 11		 je	 SHORT $LN518@cckd64_chk
  006b8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170033
  006bf	48 89 84 24 70
	04 00 00	 mov	 QWORD PTR tv283[rsp], rax
  006c7	eb 0f		 jmp	 SHORT $LN519@cckd64_chk
$LN518@cckd64_chk:
  006c9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170034
  006d0	48 89 84 24 70
	04 00 00	 mov	 QWORD PTR tv283[rsp], rax
$LN519@cckd64_chk:
  006d8	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  006e1	74 15		 je	 SHORT $LN520@cckd64_chk
  006e3	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  006eb	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  006ef	89 84 24 bc 03
	00 00		 mov	 DWORD PTR tv290[rsp], eax
  006f6	eb 0b		 jmp	 SHORT $LN521@cckd64_chk
$LN520@cckd64_chk:
  006f8	c7 84 24 bc 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv290[rsp], 0
$LN521@cckd64_chk:
  00703	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0070c	74 17		 je	 SHORT $LN522@cckd64_chk
  0070e	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00716	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0071a	d1 f8		 sar	 eax, 1
  0071c	89 84 24 c0 03
	00 00		 mov	 DWORD PTR tv296[rsp], eax
  00723	eb 0b		 jmp	 SHORT $LN523@cckd64_chk
$LN522@cckd64_chk:
  00725	c7 84 24 c0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv296[rsp], 0
$LN523@cckd64_chk:
  00730	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00738	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0073e	48 89 84 24 00
	05 00 00	 mov	 QWORD PTR tv285[rsp], rax
  00746	b9 01 00 00 00	 mov	 ecx, 1
  0074b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00751	48 8b 8c 24 70
	04 00 00	 mov	 rcx, QWORD PTR tv283[rsp]
  00759	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0075e	48 8b 8c 24 00
	05 00 00	 mov	 rcx, QWORD PTR tv285[rsp]
  00766	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0076b	8b 8c 24 bc 03
	00 00		 mov	 ecx, DWORD PTR tv290[rsp]
  00772	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00776	8b 8c 24 c0 03
	00 00		 mov	 ecx, DWORD PTR tv296[rsp]
  0077d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00781	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170035
  00788	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0078d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170036
  00794	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00799	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0079e	41 b9 03 00 00
	00		 mov	 r9d, 3
  007a4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170037
  007ab	ba 43 04 00 00	 mov	 edx, 1091		; 00000443H
  007b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170038
  007b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  007bd	e9 14 01 00 00	 jmp	 $LN166@cckd64_chk
$LN165@cckd64_chk:

; 1090 :                         (cdevhdr.cdh_opts & CCKD_OPT_BIGEND) ?
; 1091 :                             "little-endian" : "big-endian" );
; 1092 :             else
; 1093 :                 // "%1d:%04X CCKD file %s: converting to %s"
; 1094 :                 WRMSG( HHC00357, "I", LCSS_DEVNUM, dev->filename,

  007c2	0f b6 84 24 93
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  007ca	83 e0 02	 and	 eax, 2
  007cd	85 c0		 test	 eax, eax
  007cf	74 11		 je	 SHORT $LN524@cckd64_chk
  007d1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170039
  007d8	48 89 84 24 78
	04 00 00	 mov	 QWORD PTR tv310[rsp], rax
  007e0	eb 0f		 jmp	 SHORT $LN525@cckd64_chk
$LN524@cckd64_chk:
  007e2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170040
  007e9	48 89 84 24 78
	04 00 00	 mov	 QWORD PTR tv310[rsp], rax
$LN525@cckd64_chk:
  007f1	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  007fa	74 15		 je	 SHORT $LN526@cckd64_chk
  007fc	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00804	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00808	89 84 24 c4 03
	00 00		 mov	 DWORD PTR tv317[rsp], eax
  0080f	eb 0b		 jmp	 SHORT $LN527@cckd64_chk
$LN526@cckd64_chk:
  00811	c7 84 24 c4 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv317[rsp], 0
$LN527@cckd64_chk:
  0081c	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00825	74 17		 je	 SHORT $LN528@cckd64_chk
  00827	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0082f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00833	d1 f8		 sar	 eax, 1
  00835	89 84 24 c8 03
	00 00		 mov	 DWORD PTR tv323[rsp], eax
  0083c	eb 0b		 jmp	 SHORT $LN529@cckd64_chk
$LN528@cckd64_chk:
  0083e	c7 84 24 c8 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv323[rsp], 0
$LN529@cckd64_chk:
  00849	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00851	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00857	48 89 84 24 d0
	04 00 00	 mov	 QWORD PTR tv312[rsp], rax
  0085f	b9 01 00 00 00	 mov	 ecx, 1
  00864	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0086a	48 8b 8c 24 78
	04 00 00	 mov	 rcx, QWORD PTR tv310[rsp]
  00872	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00877	48 8b 8c 24 d0
	04 00 00	 mov	 rcx, QWORD PTR tv312[rsp]
  0087f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00884	8b 8c 24 c4 03
	00 00		 mov	 ecx, DWORD PTR tv317[rsp]
  0088b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0088f	8b 8c 24 c8 03
	00 00		 mov	 ecx, DWORD PTR tv323[rsp]
  00896	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0089a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170041
  008a1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170042
  008ad	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008b2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008b7	41 b9 03 00 00
	00		 mov	 r9d, 3
  008bd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170043
  008c4	ba 48 04 00 00	 mov	 edx, 1096		; 00000448H
  008c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170044
  008d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN166@cckd64_chk:

; 1095 :                        (cdevhdr.cdh_opts & CCKD_OPT_BIGEND) ?
; 1096 :                         "little-endian" : "big-endian" );
; 1097 : 
; 1098 :             if (cckd64_swapend (dev) < 0)

  008d6	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  008de	e8 00 00 00 00	 call	 cckd64_swapend
  008e3	85 c0		 test	 eax, eax
  008e5	7d 05		 jge	 SHORT $LN167@cckd64_chk

; 1099 :                 goto cdsk_error;

  008e7	e9 59 a8 00 00	 jmp	 $cdsk_error$832
$LN167@cckd64_chk:

; 1100 : 
; 1101 :             if (level < 0)

  008ec	83 bc 24 c8 31
	04 00 00	 cmp	 DWORD PTR level$[rsp], 0
  008f4	7d 0b		 jge	 SHORT $LN168@cckd64_chk

; 1102 :                 level = 0;

  008f6	c7 84 24 c8 31
	04 00 00 00 00
	00		 mov	 DWORD PTR level$[rsp], 0
$LN168@cckd64_chk:

; 1103 : 
; 1104 :             swapend = 0;

  00901	c6 84 24 d8 00
	00 00 00	 mov	 BYTE PTR swapend$[rsp], 0

; 1105 :         }

  00909	eb 08		 jmp	 SHORT $LN164@cckd64_chk
$LN163@cckd64_chk:

; 1106 :         else
; 1107 :             swapend = 1;

  0090b	c6 84 24 d8 00
	00 00 01	 mov	 BYTE PTR swapend$[rsp], 1
$LN164@cckd64_chk:

; 1108 : 
; 1109 :         cckd64_swapend_chdr (&cdevhdr);

  00913	48 8d 8c 24 90
	0b 00 00	 lea	 rcx, QWORD PTR cdevhdr$[rsp]
  0091b	e8 00 00 00 00	 call	 cckd64_swapend_chdr
$LN162@cckd64_chk:

; 1110 :     }
; 1111 : 
; 1112 :     /* ckd checks */
; 1113 :     if (ckddasd)

  00920	0f b6 84 24 ed
	00 00 00	 movzx	 eax, BYTE PTR ckddasd$[rsp]
  00928	85 c0		 test	 eax, eax
  0092a	0f 84 f5 07 00
	00		 je	 $LN169@cckd64_chk

; 1114 :     {
; 1115 :         CKDDEV *ckd;
; 1116 : 
; 1117 :         FETCH_LE_FW( heads,  devhdr.dh_heads   );

  00930	48 8d 8c 24 68
	09 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp+8]
  00938	e8 00 00 00 00	 call	 fetch_fw_noswap
  0093d	8b c8		 mov	 ecx, eax
  0093f	e8 00 00 00 00	 call	 _byteswap_ulong
  00944	8b c8		 mov	 ecx, eax
  00946	e8 00 00 00 00	 call	 _byteswap_ulong
  0094b	89 84 24 dc 00
	00 00		 mov	 DWORD PTR heads$[rsp], eax

; 1118 :         FETCH_LE_FW( cyls,  cdevhdr.cdh_cyls   );

  00952	48 8d 8c 24 9c
	0b 00 00	 lea	 rcx, QWORD PTR cdevhdr$[rsp+12]
  0095a	e8 00 00 00 00	 call	 fetch_fw_noswap
  0095f	8b c8		 mov	 ecx, eax
  00961	e8 00 00 00 00	 call	 _byteswap_ulong
  00966	8b c8		 mov	 ecx, eax
  00968	e8 00 00 00 00	 call	 _byteswap_ulong
  0096d	89 84 24 38 01
	00 00		 mov	 DWORD PTR cyls$[rsp], eax

; 1119 :         FETCH_LE_FW( trksz,  devhdr.dh_trksize );

  00974	48 8d 8c 24 6c
	09 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp+12]
  0097c	e8 00 00 00 00	 call	 fetch_fw_noswap
  00981	8b c8		 mov	 ecx, eax
  00983	e8 00 00 00 00	 call	 _byteswap_ulong
  00988	8b c8		 mov	 ecx, eax
  0098a	e8 00 00 00 00	 call	 _byteswap_ulong
  0098f	89 84 24 28 01
	00 00		 mov	 DWORD PTR trksz$[rsp], eax

; 1120 : 
; 1121 :         trks = heads * cyls;

  00996	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR heads$[rsp]
  0099d	0f af 84 24 38
	01 00 00	 imul	 eax, DWORD PTR cyls$[rsp]
  009a5	89 84 24 0c 01
	00 00		 mov	 DWORD PTR trks$[rsp], eax

; 1122 : 
; 1123 :         /* ckd dasd lookup */
; 1124 :         ckd = dasd_lookup (DASD_CKDDEV, NULL, devhdr.dh_devtyp, 0);

  009ac	0f b6 84 24 70
	09 00 00	 movzx	 eax, BYTE PTR devhdr$[rsp+16]
  009b4	45 33 c9	 xor	 r9d, r9d
  009b7	44 8b c0	 mov	 r8d, eax
  009ba	33 d2		 xor	 edx, edx
  009bc	b9 01 00 00 00	 mov	 ecx, 1
  009c1	e8 00 00 00 00	 call	 dasd_lookup
  009c6	48 89 84 24 f0
	03 00 00	 mov	 QWORD PTR ckd$3[rsp], rax

; 1125 :         if (ckd == NULL)

  009ce	48 83 bc 24 f0
	03 00 00 00	 cmp	 QWORD PTR ckd$3[rsp], 0
  009d7	0f 85 22 02 00
	00		 jne	 $LN171@cckd64_chk

; 1126 :         {
; 1127 :             if(dev->batch)

  009dd	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  009e5	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  009eb	c1 e8 0a	 shr	 eax, 10
  009ee	83 e0 01	 and	 eax, 1
  009f1	85 c0		 test	 eax, eax
  009f3	0f 84 03 01 00
	00		 je	 $LN172@cckd64_chk

; 1128 :                 // "%1d:%04X CCKD file %s: dasd lookup error type %02X cylinders %d"
; 1129 :                 FWRMSG( stdout, HHC00361, "E", LCSS_DEVNUM, dev->filename,

  009f9	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00a02	74 15		 je	 SHORT $LN530@cckd64_chk
  00a04	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a0c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00a10	89 84 24 cc 03
	00 00		 mov	 DWORD PTR tv379[rsp], eax
  00a17	eb 0b		 jmp	 SHORT $LN531@cckd64_chk
$LN530@cckd64_chk:
  00a19	c7 84 24 cc 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv379[rsp], 0
$LN531@cckd64_chk:
  00a24	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00a2d	74 17		 je	 SHORT $LN532@cckd64_chk
  00a2f	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a37	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00a3b	d1 f8		 sar	 eax, 1
  00a3d	89 84 24 d0 03
	00 00		 mov	 DWORD PTR tv385[rsp], eax
  00a44	eb 0b		 jmp	 SHORT $LN533@cckd64_chk
$LN532@cckd64_chk:
  00a46	c7 84 24 d0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv385[rsp], 0
$LN533@cckd64_chk:
  00a51	0f b6 84 24 70
	09 00 00	 movzx	 eax, BYTE PTR devhdr$[rsp+16]
  00a59	89 84 24 14 04
	00 00		 mov	 DWORD PTR tv372[rsp], eax
  00a60	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00a68	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00a6f	48 89 8c 24 10
	05 00 00	 mov	 QWORD PTR tv374[rsp], rcx
  00a77	b9 01 00 00 00	 mov	 ecx, 1
  00a7c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a82	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cyls$[rsp]
  00a89	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00a8d	8b 8c 24 14 04
	00 00		 mov	 ecx, DWORD PTR tv372[rsp]
  00a94	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00a98	48 8b 8c 24 10
	05 00 00	 mov	 rcx, QWORD PTR tv374[rsp]
  00aa0	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00aa5	8b 8c 24 cc 03
	00 00		 mov	 ecx, DWORD PTR tv379[rsp]
  00aac	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00ab0	8b 8c 24 d0 03
	00 00		 mov	 ecx, DWORD PTR tv385[rsp]
  00ab7	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00abb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170052
  00ac2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ac7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170053
  00ace	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ad3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ad8	41 b9 03 00 00
	00		 mov	 r9d, 3
  00ade	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170054
  00ae5	ba 6a 04 00 00	 mov	 edx, 1130		; 0000046aH
  00aea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170055
  00af1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00af7	e9 fe 00 00 00	 jmp	 $LN173@cckd64_chk
$LN172@cckd64_chk:

; 1130 :                         devhdr.dh_devtyp, cyls );
; 1131 :             else
; 1132 :                 // "%1d:%04X CCKD file %s: dasd lookup error type %02X cylinders %d"
; 1133 :                 WRMSG( HHC00361, "E", LCSS_DEVNUM, dev->filename,

  00afc	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00b05	74 15		 je	 SHORT $LN534@cckd64_chk
  00b07	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b0f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00b13	89 84 24 d4 03
	00 00		 mov	 DWORD PTR tv404[rsp], eax
  00b1a	eb 0b		 jmp	 SHORT $LN535@cckd64_chk
$LN534@cckd64_chk:
  00b1c	c7 84 24 d4 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv404[rsp], 0
$LN535@cckd64_chk:
  00b27	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00b30	74 17		 je	 SHORT $LN536@cckd64_chk
  00b32	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b3a	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00b3e	d1 f8		 sar	 eax, 1
  00b40	89 84 24 d8 03
	00 00		 mov	 DWORD PTR tv410[rsp], eax
  00b47	eb 0b		 jmp	 SHORT $LN537@cckd64_chk
$LN536@cckd64_chk:
  00b49	c7 84 24 d8 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv410[rsp], 0
$LN537@cckd64_chk:
  00b54	0f b6 84 24 70
	09 00 00	 movzx	 eax, BYTE PTR devhdr$[rsp+16]
  00b5c	89 84 24 18 04
	00 00		 mov	 DWORD PTR tv397[rsp], eax
  00b63	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00b6b	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00b72	48 89 8c 24 18
	05 00 00	 mov	 QWORD PTR tv399[rsp], rcx
  00b7a	b9 01 00 00 00	 mov	 ecx, 1
  00b7f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b85	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR cyls$[rsp]
  00b8c	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00b90	8b 8c 24 18 04
	00 00		 mov	 ecx, DWORD PTR tv397[rsp]
  00b97	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00b9b	48 8b 8c 24 18
	05 00 00	 mov	 rcx, QWORD PTR tv399[rsp]
  00ba3	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00ba8	8b 8c 24 d4 03
	00 00		 mov	 ecx, DWORD PTR tv404[rsp]
  00baf	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00bb3	8b 8c 24 d8 03
	00 00		 mov	 ecx, DWORD PTR tv410[rsp]
  00bba	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00bbe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170056
  00bc5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00bca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170057
  00bd1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00bd6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00bdb	41 b9 03 00 00
	00		 mov	 r9d, 3
  00be1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170058
  00be8	ba 6e 04 00 00	 mov	 edx, 1134		; 0000046eH
  00bed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170059
  00bf4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN173@cckd64_chk:

; 1134 :                        devhdr.dh_devtyp, cyls );
; 1135 :              goto cdsk_error;

  00bfa	e9 46 a5 00 00	 jmp	 $cdsk_error$832
$LN171@cckd64_chk:

; 1136 :         }
; 1137 : 
; 1138 :         /* track size check */
; 1139 :         n = CKD_TRKHDR_SIZE

  00bff	48 8b 84 24 f0
	03 00 00	 mov	 rax, QWORD PTR ckd$3[rsp]
  00c07	0f b7 40 16	 movzx	 eax, WORD PTR [rax+22]
  00c0b	48 83 c0 25	 add	 rax, 37			; 00000025H
  00c0f	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR n$[rsp], rax

; 1140 :           + CKD_R0_SIZE + CKD_R0_DLEN  /* r0 length */
; 1141 :           + CKD_RECHDR_SIZE + ckd->r1  /* max data length */
; 1142 :           + CKD_ENDTRK_SIZE;
; 1143 :         n = ((n+511)/512)*512;

  00c17	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR n$[rsp]
  00c1f	48 05 ff 01 00
	00		 add	 rax, 511		; 000001ffH
  00c25	48 99		 cdq
  00c27	48 81 e2 ff 01
	00 00		 and	 rdx, 511		; 000001ffH
  00c2e	48 03 c2	 add	 rax, rdx
  00c31	48 c1 f8 09	 sar	 rax, 9
  00c35	48 69 c0 00 02
	00 00		 imul	 rax, rax, 512		; 00000200H
  00c3c	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR n$[rsp], rax

; 1144 :         if ((S64)trksz != n)

  00c44	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR trksz$[rsp]
  00c4b	48 3b 84 24 e0
	00 00 00	 cmp	 rax, QWORD PTR n$[rsp]
  00c53	0f 84 42 02 00
	00		 je	 $LN174@cckd64_chk

; 1145 :         {
; 1146 :             if(dev->batch)

  00c59	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c61	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00c67	c1 e8 0a	 shr	 eax, 10
  00c6a	83 e0 01	 and	 eax, 1
  00c6d	85 c0		 test	 eax, eax
  00c6f	0f 84 13 01 00
	00		 je	 $LN175@cckd64_chk

; 1147 :                 // "%1d:%04X CCKD file %s: bad %s %"PRId64", expecting %"PRId64
; 1148 :                 FWRMSG( stdout, HHC00362, "E", LCSS_DEVNUM, dev->filename,

  00c75	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00c7e	74 15		 je	 SHORT $LN538@cckd64_chk
  00c80	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c88	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00c8c	89 84 24 dc 03
	00 00		 mov	 DWORD PTR tv443[rsp], eax
  00c93	eb 0b		 jmp	 SHORT $LN539@cckd64_chk
$LN538@cckd64_chk:
  00c95	c7 84 24 dc 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv443[rsp], 0
$LN539@cckd64_chk:
  00ca0	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00ca9	74 17		 je	 SHORT $LN540@cckd64_chk
  00cab	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00cb3	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00cb7	d1 f8		 sar	 eax, 1
  00cb9	89 84 24 e0 03
	00 00		 mov	 DWORD PTR tv481[rsp], eax
  00cc0	eb 0b		 jmp	 SHORT $LN541@cckd64_chk
$LN540@cckd64_chk:
  00cc2	c7 84 24 e0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv481[rsp], 0
$LN541@cckd64_chk:
  00ccd	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR trksz$[rsp]
  00cd4	48 89 84 24 20
	05 00 00	 mov	 QWORD PTR tv435[rsp], rax
  00cdc	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00ce4	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00ceb	48 89 8c 24 28
	05 00 00	 mov	 QWORD PTR tv438[rsp], rcx
  00cf3	b9 01 00 00 00	 mov	 ecx, 1
  00cf8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00cfe	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR n$[rsp]
  00d06	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00d0b	48 8b 8c 24 20
	05 00 00	 mov	 rcx, QWORD PTR tv435[rsp]
  00d13	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00d18	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170063
  00d1f	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00d24	48 8b 8c 24 28
	05 00 00	 mov	 rcx, QWORD PTR tv438[rsp]
  00d2c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00d31	8b 8c 24 dc 03
	00 00		 mov	 ecx, DWORD PTR tv443[rsp]
  00d38	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00d3c	8b 8c 24 e0 03
	00 00		 mov	 ecx, DWORD PTR tv481[rsp]
  00d43	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00d47	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170064
  00d4e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00d53	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170065
  00d5a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00d5f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d64	41 b9 03 00 00
	00		 mov	 r9d, 3
  00d6a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170066
  00d71	ba 7d 04 00 00	 mov	 edx, 1149		; 0000047dH
  00d76	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170067
  00d7d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00d83	e9 0e 01 00 00	 jmp	 $LN176@cckd64_chk
$LN175@cckd64_chk:

; 1149 :                         "track size", (U64)trksz, n );
; 1150 :             else
; 1151 :                 // "%1d:%04X CCKD file %s: bad %s %"PRId64", expecting %"PRId64
; 1152 :                 WRMSG( HHC00362, "E", LCSS_DEVNUM, dev->filename,

  00d88	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00d91	74 15		 je	 SHORT $LN542@cckd64_chk
  00d93	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00d9b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00d9f	89 84 24 e4 03
	00 00		 mov	 DWORD PTR tv501[rsp], eax
  00da6	eb 0b		 jmp	 SHORT $LN543@cckd64_chk
$LN542@cckd64_chk:
  00da8	c7 84 24 e4 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv501[rsp], 0
$LN543@cckd64_chk:
  00db3	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00dbc	74 17		 je	 SHORT $LN544@cckd64_chk
  00dbe	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00dc6	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00dca	d1 f8		 sar	 eax, 1
  00dcc	89 84 24 e8 03
	00 00		 mov	 DWORD PTR tv507[rsp], eax
  00dd3	eb 0b		 jmp	 SHORT $LN545@cckd64_chk
$LN544@cckd64_chk:
  00dd5	c7 84 24 e8 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv507[rsp], 0
$LN545@cckd64_chk:
  00de0	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR trksz$[rsp]
  00de7	48 89 84 24 30
	05 00 00	 mov	 QWORD PTR tv493[rsp], rax
  00def	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00df7	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00dfe	48 89 8c 24 38
	05 00 00	 mov	 QWORD PTR tv496[rsp], rcx
  00e06	b9 01 00 00 00	 mov	 ecx, 1
  00e0b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00e11	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR n$[rsp]
  00e19	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00e1e	48 8b 8c 24 30
	05 00 00	 mov	 rcx, QWORD PTR tv493[rsp]
  00e26	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00e2b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170068
  00e32	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00e37	48 8b 8c 24 38
	05 00 00	 mov	 rcx, QWORD PTR tv496[rsp]
  00e3f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00e44	8b 8c 24 e4 03
	00 00		 mov	 ecx, DWORD PTR tv501[rsp]
  00e4b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00e4f	8b 8c 24 e8 03
	00 00		 mov	 ecx, DWORD PTR tv507[rsp]
  00e56	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00e5a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170069
  00e61	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00e66	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170070
  00e6d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00e72	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e77	41 b9 03 00 00
	00		 mov	 r9d, 3
  00e7d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170071
  00e84	ba 81 04 00 00	 mov	 edx, 1153		; 00000481H
  00e89	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170072
  00e90	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN176@cckd64_chk:

; 1153 :                        "track size", (U64)trksz, n );
; 1154 :              goto cdsk_error;

  00e96	e9 aa a2 00 00	 jmp	 $cdsk_error$832
$LN174@cckd64_chk:

; 1155 :         }
; 1156 : 
; 1157 :         /* number of heads check */
; 1158 :         if (heads != ckd->heads)

  00e9b	48 8b 84 24 f0
	03 00 00	 mov	 rax, QWORD PTR ckd$3[rsp]
  00ea3	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  00ea7	39 84 24 dc 00
	00 00		 cmp	 DWORD PTR heads$[rsp], eax
  00eae	0f 84 6c 02 00
	00		 je	 $LN177@cckd64_chk

; 1159 :         {
; 1160 :             if(dev->batch)

  00eb4	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ebc	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00ec2	c1 e8 0a	 shr	 eax, 10
  00ec5	83 e0 01	 and	 eax, 1
  00ec8	85 c0		 test	 eax, eax
  00eca	0f 84 28 01 00
	00		 je	 $LN178@cckd64_chk

; 1161 :                 // "%1d:%04X CCKD file %s: bad %s %"PRId64", expecting %"PRId64
; 1162 :                 FWRMSG( stdout, HHC00362, "E", LCSS_DEVNUM, dev->filename,

  00ed0	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00ed9	74 15		 je	 SHORT $LN546@cckd64_chk
  00edb	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ee3	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00ee7	89 84 24 90 01
	00 00		 mov	 DWORD PTR tv536[rsp], eax
  00eee	eb 0b		 jmp	 SHORT $LN547@cckd64_chk
$LN546@cckd64_chk:
  00ef0	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv536[rsp], 0
$LN547@cckd64_chk:
  00efb	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00f04	74 17		 je	 SHORT $LN548@cckd64_chk
  00f06	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f0e	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00f12	d1 f8		 sar	 eax, 1
  00f14	89 84 24 94 01
	00 00		 mov	 DWORD PTR tv542[rsp], eax
  00f1b	eb 0b		 jmp	 SHORT $LN549@cckd64_chk
$LN548@cckd64_chk:
  00f1d	c7 84 24 94 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv542[rsp], 0
$LN549@cckd64_chk:
  00f28	48 8b 84 24 f0
	03 00 00	 mov	 rax, QWORD PTR ckd$3[rsp]
  00f30	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  00f34	48 89 84 24 40
	05 00 00	 mov	 QWORD PTR tv526[rsp], rax
  00f3c	48 63 8c 24 dc
	00 00 00	 movsxd	 rcx, DWORD PTR heads$[rsp]
  00f44	48 89 8c 24 48
	05 00 00	 mov	 QWORD PTR tv528[rsp], rcx
  00f4c	48 8b 94 24 c0
	31 04 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00f54	48 81 c2 a4 00
	00 00		 add	 rdx, 164		; 000000a4H
  00f5b	48 89 94 24 50
	05 00 00	 mov	 QWORD PTR tv531[rsp], rdx
  00f63	b9 01 00 00 00	 mov	 ecx, 1
  00f68	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00f6e	48 8b 8c 24 40
	05 00 00	 mov	 rcx, QWORD PTR tv526[rsp]
  00f76	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00f7b	48 8b 8c 24 48
	05 00 00	 mov	 rcx, QWORD PTR tv528[rsp]
  00f83	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00f88	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170076
  00f8f	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00f94	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR tv531[rsp]
  00f9c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00fa1	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR tv536[rsp]
  00fa8	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00fac	8b 8c 24 94 01
	00 00		 mov	 ecx, DWORD PTR tv542[rsp]
  00fb3	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00fb7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170077
  00fbe	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00fc3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170078
  00fca	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00fcf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00fd4	41 b9 03 00 00
	00		 mov	 r9d, 3
  00fda	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170079
  00fe1	ba 8b 04 00 00	 mov	 edx, 1163		; 0000048bH
  00fe6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170080
  00fed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00ff3	e9 23 01 00 00	 jmp	 $LN179@cckd64_chk
$LN178@cckd64_chk:

; 1163 :                         "number of heads", (U64)heads, (U64)ckd->heads );
; 1164 :             else
; 1165 :                 // "%1d:%04X CCKD file %s: bad %s %"PRId64", expecting %"PRId64
; 1166 :                 WRMSG( HHC00362, "E", LCSS_DEVNUM, dev->filename,

  00ff8	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01001	74 15		 je	 SHORT $LN550@cckd64_chk
  01003	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0100b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0100f	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv564[rsp], eax
  01016	eb 0b		 jmp	 SHORT $LN551@cckd64_chk
$LN550@cckd64_chk:
  01018	c7 84 24 98 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv564[rsp], 0
$LN551@cckd64_chk:
  01023	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0102c	74 17		 je	 SHORT $LN552@cckd64_chk
  0102e	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01036	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0103a	d1 f8		 sar	 eax, 1
  0103c	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv570[rsp], eax
  01043	eb 0b		 jmp	 SHORT $LN553@cckd64_chk
$LN552@cckd64_chk:
  01045	c7 84 24 9c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv570[rsp], 0
$LN553@cckd64_chk:
  01050	48 8b 84 24 f0
	03 00 00	 mov	 rax, QWORD PTR ckd$3[rsp]
  01058	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  0105c	48 89 84 24 58
	05 00 00	 mov	 QWORD PTR tv554[rsp], rax
  01064	48 63 8c 24 dc
	00 00 00	 movsxd	 rcx, DWORD PTR heads$[rsp]
  0106c	48 89 8c 24 60
	05 00 00	 mov	 QWORD PTR tv556[rsp], rcx
  01074	48 8b 94 24 c0
	31 04 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0107c	48 81 c2 a4 00
	00 00		 add	 rdx, 164		; 000000a4H
  01083	48 89 94 24 68
	05 00 00	 mov	 QWORD PTR tv559[rsp], rdx
  0108b	b9 01 00 00 00	 mov	 ecx, 1
  01090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01096	48 8b 8c 24 58
	05 00 00	 mov	 rcx, QWORD PTR tv554[rsp]
  0109e	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  010a3	48 8b 8c 24 60
	05 00 00	 mov	 rcx, QWORD PTR tv556[rsp]
  010ab	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  010b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170081
  010b7	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  010bc	48 8b 8c 24 68
	05 00 00	 mov	 rcx, QWORD PTR tv559[rsp]
  010c4	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  010c9	8b 8c 24 98 01
	00 00		 mov	 ecx, DWORD PTR tv564[rsp]
  010d0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  010d4	8b 8c 24 9c 01
	00 00		 mov	 ecx, DWORD PTR tv570[rsp]
  010db	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  010df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170082
  010e6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  010eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170083
  010f2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  010f7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  010fc	41 b9 03 00 00
	00		 mov	 r9d, 3
  01102	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170084
  01109	ba 8f 04 00 00	 mov	 edx, 1167		; 0000048fH
  0110e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170085
  01115	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN179@cckd64_chk:

; 1167 :                       "number of heads", (U64)heads, (U64)ckd->heads );
; 1168 :              goto cdsk_error;

  0111b	e9 25 a0 00 00	 jmp	 $cdsk_error$832
$LN177@cckd64_chk:

; 1169 :         }
; 1170 :     } /* if (ckddasd) */

  01120	e9 ae 00 00 00	 jmp	 $LN170@cckd64_chk
$LN169@cckd64_chk:

; 1171 : 
; 1172 :     /* fba checks */
; 1173 :     else
; 1174 :     {
; 1175 :         /* Note: cyls & heads are setup for ckd type hdr checks */
; 1176 :         FETCH_LE_FW( blks, cdevhdr.cdh_cyls );

  01125	48 8d 8c 24 9c
	0b 00 00	 lea	 rcx, QWORD PTR cdevhdr$[rsp+12]
  0112d	e8 00 00 00 00	 call	 fetch_fw_noswap
  01132	8b c8		 mov	 ecx, eax
  01134	e8 00 00 00 00	 call	 _byteswap_ulong
  01139	8b c8		 mov	 ecx, eax
  0113b	e8 00 00 00 00	 call	 _byteswap_ulong
  01140	89 84 24 a0 01
	00 00		 mov	 DWORD PTR blks$[rsp], eax

; 1177 : 
; 1178 :         trks = blks / CFBA_BLKS_PER_GRP;

  01147	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR blks$[rsp]
  0114e	99		 cdq
  0114f	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  01154	f7 f9		 idiv	 ecx
  01156	89 84 24 0c 01
	00 00		 mov	 DWORD PTR trks$[rsp], eax

; 1179 :         if (   blks % CFBA_BLKS_PER_GRP ) trks++;

  0115d	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR blks$[rsp]
  01164	99		 cdq
  01165	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  0116a	f7 f9		 idiv	 ecx
  0116c	8b c2		 mov	 eax, edx
  0116e	85 c0		 test	 eax, eax
  01170	74 10		 je	 SHORT $LN180@cckd64_chk
  01172	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR trks$[rsp]
  01179	ff c0		 inc	 eax
  0117b	89 84 24 0c 01
	00 00		 mov	 DWORD PTR trks$[rsp], eax
$LN180@cckd64_chk:

; 1180 : 
; 1181 :         trksz = CKD_TRKHDR_SIZE + CFBA_BLKGRP_SIZE;

  01182	c7 84 24 28 01
	00 00 05 f0 00
	00		 mov	 DWORD PTR trksz$[rsp], 61445 ; 0000f005H

; 1182 :         heads = 65536;

  0118d	c7 84 24 dc 00
	00 00 00 00 01
	00		 mov	 DWORD PTR heads$[rsp], 65536 ; 00010000H

; 1183 : 
; 1184 :         cyls = trks / heads;

  01198	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR trks$[rsp]
  0119f	99		 cdq
  011a0	f7 bc 24 dc 00
	00 00		 idiv	 DWORD PTR heads$[rsp]
  011a7	89 84 24 38 01
	00 00		 mov	 DWORD PTR cyls$[rsp], eax

; 1185 :         if (   trks % heads) cyls++;

  011ae	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR trks$[rsp]
  011b5	99		 cdq
  011b6	f7 bc 24 dc 00
	00 00		 idiv	 DWORD PTR heads$[rsp]
  011bd	8b c2		 mov	 eax, edx
  011bf	85 c0		 test	 eax, eax
  011c1	74 10		 je	 SHORT $LN181@cckd64_chk
  011c3	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cyls$[rsp]
  011ca	ff c0		 inc	 eax
  011cc	89 84 24 38 01
	00 00		 mov	 DWORD PTR cyls$[rsp], eax
$LN181@cckd64_chk:
$LN170@cckd64_chk:

; 1186 :     }
; 1187 : 
; 1188 :     /* fba variables */
; 1189 :     blkgrps = trks;

  011d3	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR trks$[rsp]
  011da	89 84 24 80 01
	00 00		 mov	 DWORD PTR blkgrps$[rsp], eax

; 1190 :     blkgrpsz = trksz;

  011e1	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR trksz$[rsp]
  011e8	89 84 24 20 01
	00 00		 mov	 DWORD PTR blkgrpsz$[rsp], eax

; 1191 : 
; 1192 :     /* `num_L1tab' check */
; 1193 :     n = trks / 256;

  011ef	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR trks$[rsp]
  011f6	99		 cdq
  011f7	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  011fd	03 c2		 add	 eax, edx
  011ff	c1 f8 08	 sar	 eax, 8
  01202	48 98		 cdqe
  01204	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR n$[rsp], rax

; 1194 :     if (trks % 256) n++;

  0120c	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR trks$[rsp]
  01213	99		 cdq
  01214	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0121a	03 c2		 add	 eax, edx
  0121c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01221	2b c2		 sub	 eax, edx
  01223	85 c0		 test	 eax, eax
  01225	74 13		 je	 SHORT $LN182@cckd64_chk
  01227	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR n$[rsp]
  0122f	48 ff c0	 inc	 rax
  01232	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR n$[rsp], rax
$LN182@cckd64_chk:

; 1195 : 
; 1196 :     if (cdevhdr.num_L1tab != n && cdevhdr.num_L1tab != n + 1)

  0123a	48 63 84 24 94
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  01242	48 3b 84 24 e0
	00 00 00	 cmp	 rax, QWORD PTR n$[rsp]
  0124a	0f 84 60 02 00
	00		 je	 $LN183@cckd64_chk
  01250	48 63 84 24 94
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  01258	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR n$[rsp]
  01260	48 ff c1	 inc	 rcx
  01263	48 3b c1	 cmp	 rax, rcx
  01266	0f 84 44 02 00
	00		 je	 $LN183@cckd64_chk

; 1197 :     {
; 1198 :         if(dev->batch)

  0126c	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01274	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0127a	c1 e8 0a	 shr	 eax, 10
  0127d	83 e0 01	 and	 eax, 1
  01280	85 c0		 test	 eax, eax
  01282	0f 84 14 01 00
	00		 je	 $LN184@cckd64_chk

; 1199 :             // "%1d:%04X CCKD file %s: bad %s %"PRId64", expecting %"PRId64
; 1200 :             FWRMSG( stdout, HHC00362, "E", LCSS_DEVNUM, dev->filename,

  01288	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01291	74 15		 je	 SHORT $LN554@cckd64_chk
  01293	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0129b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0129f	89 84 24 a4 01
	00 00		 mov	 DWORD PTR tv618[rsp], eax
  012a6	eb 0b		 jmp	 SHORT $LN555@cckd64_chk
$LN554@cckd64_chk:
  012a8	c7 84 24 a4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv618[rsp], 0
$LN555@cckd64_chk:
  012b3	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  012bc	74 17		 je	 SHORT $LN556@cckd64_chk
  012be	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  012c6	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  012ca	d1 f8		 sar	 eax, 1
  012cc	89 84 24 a8 01
	00 00		 mov	 DWORD PTR tv624[rsp], eax
  012d3	eb 0b		 jmp	 SHORT $LN557@cckd64_chk
$LN556@cckd64_chk:
  012d5	c7 84 24 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv624[rsp], 0
$LN557@cckd64_chk:
  012e0	48 63 84 24 94
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  012e8	48 89 84 24 70
	05 00 00	 mov	 QWORD PTR tv610[rsp], rax
  012f0	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  012f8	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  012ff	48 89 8c 24 78
	05 00 00	 mov	 QWORD PTR tv613[rsp], rcx
  01307	b9 01 00 00 00	 mov	 ecx, 1
  0130c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01312	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR n$[rsp]
  0131a	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0131f	48 8b 8c 24 70
	05 00 00	 mov	 rcx, QWORD PTR tv610[rsp]
  01327	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0132c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170092
  01333	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01338	48 8b 8c 24 78
	05 00 00	 mov	 rcx, QWORD PTR tv613[rsp]
  01340	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01345	8b 8c 24 a4 01
	00 00		 mov	 ecx, DWORD PTR tv618[rsp]
  0134c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01350	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR tv624[rsp]
  01357	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0135b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170093
  01362	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01367	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170094
  0136e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01373	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01378	41 b9 03 00 00
	00		 mov	 r9d, 3
  0137e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170095
  01385	ba b1 04 00 00	 mov	 edx, 1201		; 000004b1H
  0138a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170096
  01391	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  01397	e9 0f 01 00 00	 jmp	 $LN185@cckd64_chk
$LN184@cckd64_chk:

; 1201 :                     "num_L1tab", (S64)cdevhdr.num_L1tab, n );
; 1202 :         else
; 1203 :             // "%1d:%04X CCKD file %s: bad %s %"PRId64", expecting %"PRId64
; 1204 :             WRMSG( HHC00362, "E", LCSS_DEVNUM, dev->filename,

  0139c	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  013a5	74 15		 je	 SHORT $LN558@cckd64_chk
  013a7	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  013af	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  013b3	89 84 24 ac 01
	00 00		 mov	 DWORD PTR tv644[rsp], eax
  013ba	eb 0b		 jmp	 SHORT $LN559@cckd64_chk
$LN558@cckd64_chk:
  013bc	c7 84 24 ac 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv644[rsp], 0
$LN559@cckd64_chk:
  013c7	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  013d0	74 17		 je	 SHORT $LN560@cckd64_chk
  013d2	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  013da	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  013de	d1 f8		 sar	 eax, 1
  013e0	89 84 24 b0 01
	00 00		 mov	 DWORD PTR tv650[rsp], eax
  013e7	eb 0b		 jmp	 SHORT $LN561@cckd64_chk
$LN560@cckd64_chk:
  013e9	c7 84 24 b0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv650[rsp], 0
$LN561@cckd64_chk:
  013f4	48 63 84 24 94
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  013fc	48 89 84 24 80
	05 00 00	 mov	 QWORD PTR tv636[rsp], rax
  01404	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0140c	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  01413	48 89 8c 24 88
	05 00 00	 mov	 QWORD PTR tv639[rsp], rcx
  0141b	b9 01 00 00 00	 mov	 ecx, 1
  01420	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01426	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR n$[rsp]
  0142e	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  01433	48 8b 8c 24 80
	05 00 00	 mov	 rcx, QWORD PTR tv636[rsp]
  0143b	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  01440	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170097
  01447	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0144c	48 8b 8c 24 88
	05 00 00	 mov	 rcx, QWORD PTR tv639[rsp]
  01454	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01459	8b 8c 24 ac 01
	00 00		 mov	 ecx, DWORD PTR tv644[rsp]
  01460	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01464	8b 8c 24 b0 01
	00 00		 mov	 ecx, DWORD PTR tv650[rsp]
  0146b	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0146f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170098
  01476	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0147b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170099
  01482	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01487	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0148c	41 b9 03 00 00
	00		 mov	 r9d, 3
  01492	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170100
  01499	ba b5 04 00 00	 mov	 edx, 1205		; 000004b5H
  0149e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170101
  014a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN185@cckd64_chk:

; 1205 :                    "num_L1tab", (S64)cdevhdr.num_L1tab, n );
; 1206 :         goto cdsk_error;

  014ab	e9 95 9c 00 00	 jmp	 $cdsk_error$832
$LN183@cckd64_chk:

; 1207 :     }
; 1208 :     l1size = cdevhdr.num_L1tab * CCKD64_L1ENT_SIZE;

  014b0	48 63 84 24 94
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  014b8	48 c1 e0 03	 shl	 rax, 3
  014bc	89 84 24 24 01
	00 00		 mov	 DWORD PTR l1size$[rsp], eax

; 1209 :     if (CCKD64_L1TAB_POS + l1size > fst.st_size)

  014c3	48 63 84 24 24
	01 00 00	 movsxd	 rax, DWORD PTR l1size$[rsp]
  014cb	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  014d1	48 3b 84 24 a8
	0d 00 00	 cmp	 rax, QWORD PTR fst$[rsp+24]
  014d9	0f 8e 50 02 00
	00		 jle	 $LN186@cckd64_chk

; 1210 :     {
; 1211 :         if(dev->batch)

  014df	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  014e7	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  014ed	c1 e8 0a	 shr	 eax, 10
  014f0	83 e0 01	 and	 eax, 1
  014f3	85 c0		 test	 eax, eax
  014f5	0f 84 1a 01 00
	00		 je	 $LN187@cckd64_chk

; 1212 :             // "%1d:%04X CCKD file %s: bad %s %"PRId64", expecting %"PRId64
; 1213 :             FWRMSG( stdout, HHC00362, "E", LCSS_DEVNUM, dev->filename,

  014fb	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01504	74 15		 je	 SHORT $LN562@cckd64_chk
  01506	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0150e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01512	89 84 24 b4 01
	00 00		 mov	 DWORD PTR tv681[rsp], eax
  01519	eb 0b		 jmp	 SHORT $LN563@cckd64_chk
$LN562@cckd64_chk:
  0151b	c7 84 24 b4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv681[rsp], 0
$LN563@cckd64_chk:
  01526	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0152f	74 17		 je	 SHORT $LN564@cckd64_chk
  01531	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01539	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0153d	d1 f8		 sar	 eax, 1
  0153f	89 84 24 b8 01
	00 00		 mov	 DWORD PTR tv687[rsp], eax
  01546	eb 0b		 jmp	 SHORT $LN565@cckd64_chk
$LN564@cckd64_chk:
  01548	c7 84 24 b8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv687[rsp], 0
$LN565@cckd64_chk:
  01553	48 63 84 24 24
	01 00 00	 movsxd	 rax, DWORD PTR l1size$[rsp]
  0155b	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  01561	48 89 84 24 90
	05 00 00	 mov	 QWORD PTR tv672[rsp], rax
  01569	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01571	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  01578	48 89 8c 24 98
	05 00 00	 mov	 QWORD PTR tv676[rsp], rcx
  01580	b9 01 00 00 00	 mov	 ecx, 1
  01585	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0158b	48 8b 8c 24 90
	05 00 00	 mov	 rcx, QWORD PTR tv672[rsp]
  01593	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  01598	48 8b 8c 24 a8
	0d 00 00	 mov	 rcx, QWORD PTR fst$[rsp+24]
  015a0	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  015a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170105
  015ac	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  015b1	48 8b 8c 24 98
	05 00 00	 mov	 rcx, QWORD PTR tv676[rsp]
  015b9	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  015be	8b 8c 24 b4 01
	00 00		 mov	 ecx, DWORD PTR tv681[rsp]
  015c5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  015c9	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR tv687[rsp]
  015d0	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  015d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170106
  015db	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  015e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170107
  015e7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  015ec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  015f1	41 b9 03 00 00
	00		 mov	 r9d, 3
  015f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170108
  015fe	ba be 04 00 00	 mov	 edx, 1214		; 000004beH
  01603	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170109
  0160a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  01610	e9 15 01 00 00	 jmp	 $LN188@cckd64_chk
$LN187@cckd64_chk:

; 1214 :                     "file length to contain L1 table", fst.st_size, (S64)CCKD64_L1TAB_POS + l1size );
; 1215 :         else
; 1216 :             // "%1d:%04X CCKD file %s: bad %s %"PRId64", expecting %"PRId64
; 1217 :             WRMSG( HHC00362, "E", LCSS_DEVNUM, dev->filename,

  01615	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0161e	74 15		 je	 SHORT $LN566@cckd64_chk
  01620	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01628	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0162c	89 84 24 bc 01
	00 00		 mov	 DWORD PTR tv740[rsp], eax
  01633	eb 0b		 jmp	 SHORT $LN567@cckd64_chk
$LN566@cckd64_chk:
  01635	c7 84 24 bc 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv740[rsp], 0
$LN567@cckd64_chk:
  01640	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01649	74 17		 je	 SHORT $LN568@cckd64_chk
  0164b	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01653	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01657	d1 f8		 sar	 eax, 1
  01659	89 84 24 c0 01
	00 00		 mov	 DWORD PTR tv746[rsp], eax
  01660	eb 0b		 jmp	 SHORT $LN569@cckd64_chk
$LN568@cckd64_chk:
  01662	c7 84 24 c0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv746[rsp], 0
$LN569@cckd64_chk:
  0166d	48 63 84 24 24
	01 00 00	 movsxd	 rax, DWORD PTR l1size$[rsp]
  01675	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  0167b	48 89 84 24 a0
	05 00 00	 mov	 QWORD PTR tv699[rsp], rax
  01683	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0168b	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  01692	48 89 8c 24 a8
	05 00 00	 mov	 QWORD PTR tv703[rsp], rcx
  0169a	b9 01 00 00 00	 mov	 ecx, 1
  0169f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  016a5	48 8b 8c 24 a0
	05 00 00	 mov	 rcx, QWORD PTR tv699[rsp]
  016ad	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  016b2	48 8b 8c 24 a8
	0d 00 00	 mov	 rcx, QWORD PTR fst$[rsp+24]
  016ba	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  016bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170110
  016c6	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  016cb	48 8b 8c 24 a8
	05 00 00	 mov	 rcx, QWORD PTR tv703[rsp]
  016d3	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  016d8	8b 8c 24 bc 01
	00 00		 mov	 ecx, DWORD PTR tv740[rsp]
  016df	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  016e3	8b 8c 24 c0 01
	00 00		 mov	 ecx, DWORD PTR tv746[rsp]
  016ea	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  016ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170111
  016f5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  016fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170112
  01701	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01706	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0170b	41 b9 03 00 00
	00		 mov	 r9d, 3
  01711	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170113
  01718	ba c2 04 00 00	 mov	 edx, 1218		; 000004c2H
  0171d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170114
  01724	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN188@cckd64_chk:

; 1218 :                   "file length to contain L1 table", fst.st_size, (S64)CCKD64_L1TAB_POS + l1size );
; 1219 :         goto cdsk_error;

  0172a	e9 16 9a 00 00	 jmp	 $cdsk_error$832
$LN186@cckd64_chk:

; 1220 :     }
; 1221 : 
; 1222 :     /* check level 2 if SPERRS bit on */
; 1223 :     if (!ro && level < 2 && (cdevhdr.cdh_opts & CCKD_OPT_SPERRS))

  0172f	83 bc 24 58 01
	00 00 00	 cmp	 DWORD PTR ro$[rsp], 0
  01737	0f 85 13 02 00
	00		 jne	 $LN189@cckd64_chk
  0173d	83 bc 24 c8 31
	04 00 02	 cmp	 DWORD PTR level$[rsp], 2
  01745	0f 8d 05 02 00
	00		 jge	 $LN189@cckd64_chk
  0174b	0f b6 84 24 93
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  01753	83 e0 20	 and	 eax, 32			; 00000020H
  01756	85 c0		 test	 eax, eax
  01758	0f 84 f2 01 00
	00		 je	 $LN189@cckd64_chk

; 1224 :     {
; 1225 :         level = 2;

  0175e	c7 84 24 c8 31
	04 00 02 00 00
	00		 mov	 DWORD PTR level$[rsp], 2

; 1226 :         if(dev->batch)

  01769	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01771	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01777	c1 e8 0a	 shr	 eax, 10
  0177a	83 e0 01	 and	 eax, 1
  0177d	85 c0		 test	 eax, eax
  0177f	0f 84 e8 00 00
	00		 je	 $LN190@cckd64_chk

; 1227 :             FWRMSG( stdout, HHC00364, "W", LCSS_DEVNUM, dev->filename, level );

  01785	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0178e	74 15		 je	 SHORT $LN570@cckd64_chk
  01790	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01798	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0179c	89 84 24 c4 01
	00 00		 mov	 DWORD PTR tv772[rsp], eax
  017a3	eb 0b		 jmp	 SHORT $LN571@cckd64_chk
$LN570@cckd64_chk:
  017a5	c7 84 24 c4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv772[rsp], 0
$LN571@cckd64_chk:
  017b0	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  017b9	74 17		 je	 SHORT $LN572@cckd64_chk
  017bb	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  017c3	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  017c7	d1 f8		 sar	 eax, 1
  017c9	89 84 24 c8 01
	00 00		 mov	 DWORD PTR tv778[rsp], eax
  017d0	eb 0b		 jmp	 SHORT $LN573@cckd64_chk
$LN572@cckd64_chk:
  017d2	c7 84 24 c8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv778[rsp], 0
$LN573@cckd64_chk:
  017dd	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  017e5	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  017eb	48 89 84 24 b0
	05 00 00	 mov	 QWORD PTR tv767[rsp], rax
  017f3	b9 01 00 00 00	 mov	 ecx, 1
  017f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  017fe	8b 8c 24 c8 31
	04 00		 mov	 ecx, DWORD PTR level$[rsp]
  01805	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  01809	48 8b 8c 24 b0
	05 00 00	 mov	 rcx, QWORD PTR tv767[rsp]
  01811	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01816	8b 8c 24 c4 01
	00 00		 mov	 ecx, DWORD PTR tv772[rsp]
  0181d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01821	8b 8c 24 c8 01
	00 00		 mov	 ecx, DWORD PTR tv778[rsp]
  01828	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0182c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170118
  01833	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01838	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170119
  0183f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01844	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01849	41 b9 03 00 00
	00		 mov	 r9d, 3
  0184f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170120
  01856	ba cb 04 00 00	 mov	 edx, 1227		; 000004cbH
  0185b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170121
  01862	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  01868	e9 e3 00 00 00	 jmp	 $LN191@cckd64_chk
$LN190@cckd64_chk:

; 1228 :         else
; 1229 :             WRMSG( HHC00364, "W", LCSS_DEVNUM, dev->filename, level );

  0186d	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01876	74 15		 je	 SHORT $LN574@cckd64_chk
  01878	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01880	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01884	89 84 24 cc 01
	00 00		 mov	 DWORD PTR tv795[rsp], eax
  0188b	eb 0b		 jmp	 SHORT $LN575@cckd64_chk
$LN574@cckd64_chk:
  0188d	c7 84 24 cc 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv795[rsp], 0
$LN575@cckd64_chk:
  01898	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  018a1	74 17		 je	 SHORT $LN576@cckd64_chk
  018a3	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  018ab	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  018af	d1 f8		 sar	 eax, 1
  018b1	89 84 24 d0 01
	00 00		 mov	 DWORD PTR tv801[rsp], eax
  018b8	eb 0b		 jmp	 SHORT $LN577@cckd64_chk
$LN576@cckd64_chk:
  018ba	c7 84 24 d0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv801[rsp], 0
$LN577@cckd64_chk:
  018c5	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  018cd	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  018d3	48 89 84 24 08
	05 00 00	 mov	 QWORD PTR tv790[rsp], rax
  018db	b9 01 00 00 00	 mov	 ecx, 1
  018e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  018e6	8b 8c 24 c8 31
	04 00		 mov	 ecx, DWORD PTR level$[rsp]
  018ed	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  018f1	48 8b 8c 24 08
	05 00 00	 mov	 rcx, QWORD PTR tv790[rsp]
  018f9	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  018fe	8b 8c 24 cc 01
	00 00		 mov	 ecx, DWORD PTR tv795[rsp]
  01905	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01909	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR tv801[rsp]
  01910	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01914	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170122
  0191b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01920	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170123
  01927	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0192c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01931	41 b9 03 00 00
	00		 mov	 r9d, 3
  01937	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170124
  0193e	ba cd 04 00 00	 mov	 edx, 1229		; 000004cdH
  01943	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170125
  0194a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN191@cckd64_chk:
$LN189@cckd64_chk:

; 1230 :     }
; 1231 : 
; 1232 :     /* cdevhdr inconsistencies check */
; 1233 :     hdrerr  = 0;

  01950	c6 84 24 a4 00
	00 00 00	 mov	 BYTE PTR hdrerr$[rsp], 0

; 1234 :     hdrerr |= (U64)fst.st_size != cdevhdr.cdh_size && cdevhdr.cdh_size != cdevhdr.free_off   ? 0x0001 : 0;

  01958	48 8b 84 24 a0
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+16]
  01960	48 39 84 24 a8
	0d 00 00	 cmp	 QWORD PTR fst$[rsp+24], rax
  01968	74 1f		 je	 SHORT $LN578@cckd64_chk
  0196a	48 8b 84 24 b0
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+32]
  01972	48 39 84 24 a0
	0b 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+16], rax
  0197a	74 0d		 je	 SHORT $LN578@cckd64_chk
  0197c	c7 84 24 d4 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv814[rsp], 1
  01987	eb 0b		 jmp	 SHORT $LN579@cckd64_chk
$LN578@cckd64_chk:
  01989	c7 84 24 d4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv814[rsp], 0
$LN579@cckd64_chk:
  01994	0f b6 84 24 a4
	00 00 00	 movzx	 eax, BYTE PTR hdrerr$[rsp]
  0199c	0b 84 24 d4 01
	00 00		 or	 eax, DWORD PTR tv814[rsp]
  019a3	88 84 24 a4 00
	00 00		 mov	 BYTE PTR hdrerr$[rsp], al

; 1235 :     hdrerr |= cdevhdr.cdh_size !=      cdevhdr.free_total  +  cdevhdr.cdh_used               ? 0x0002 : 0;

  019aa	48 8b 84 24 a8
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+24]
  019b2	48 8b 8c 24 b8
	0b 00 00	 mov	 rcx, QWORD PTR cdevhdr$[rsp+40]
  019ba	48 03 c8	 add	 rcx, rax
  019bd	48 8b c1	 mov	 rax, rcx
  019c0	48 39 84 24 a0
	0b 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+16], rax
  019c8	74 0d		 je	 SHORT $LN580@cckd64_chk
  019ca	c7 84 24 d8 01
	00 00 02 00 00
	00		 mov	 DWORD PTR tv820[rsp], 2
  019d5	eb 0b		 jmp	 SHORT $LN581@cckd64_chk
$LN580@cckd64_chk:
  019d7	c7 84 24 d8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv820[rsp], 0
$LN581@cckd64_chk:
  019e2	0f b6 84 24 a4
	00 00 00	 movzx	 eax, BYTE PTR hdrerr$[rsp]
  019ea	0b 84 24 d8 01
	00 00		 or	 eax, DWORD PTR tv820[rsp]
  019f1	88 84 24 a4 00
	00 00		 mov	 BYTE PTR hdrerr$[rsp], al

; 1236 :     hdrerr |= cdevhdr.free_largest  >  cdevhdr.free_total  -  cdevhdr.free_imbed             ? 0x0004 : 0;

  019f8	48 8b 84 24 d0
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+64]
  01a00	48 8b 8c 24 b8
	0b 00 00	 mov	 rcx, QWORD PTR cdevhdr$[rsp+40]
  01a08	48 2b c8	 sub	 rcx, rax
  01a0b	48 8b c1	 mov	 rax, rcx
  01a0e	48 39 84 24 c0
	0b 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+48], rax
  01a16	76 0d		 jbe	 SHORT $LN582@cckd64_chk
  01a18	c7 84 24 dc 01
	00 00 04 00 00
	00		 mov	 DWORD PTR tv826[rsp], 4
  01a23	eb 0b		 jmp	 SHORT $LN583@cckd64_chk
$LN582@cckd64_chk:
  01a25	c7 84 24 dc 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv826[rsp], 0
$LN583@cckd64_chk:
  01a30	0f b6 84 24 a4
	00 00 00	 movzx	 eax, BYTE PTR hdrerr$[rsp]
  01a38	0b 84 24 dc 01
	00 00		 or	 eax, DWORD PTR tv826[rsp]
  01a3f	88 84 24 a4 00
	00 00		 mov	 BYTE PTR hdrerr$[rsp], al

; 1237 :     hdrerr |= cdevhdr.free_off == 0 && cdevhdr.free_num    != 0                              ? 0x0008 : 0;

  01a46	48 83 bc 24 b0
	0b 00 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+32], 0
  01a4f	75 18		 jne	 SHORT $LN584@cckd64_chk
  01a51	48 83 bc 24 c8
	0b 00 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+56], 0
  01a5a	74 0d		 je	 SHORT $LN584@cckd64_chk
  01a5c	c7 84 24 e0 01
	00 00 08 00 00
	00		 mov	 DWORD PTR tv864[rsp], 8
  01a67	eb 0b		 jmp	 SHORT $LN585@cckd64_chk
$LN584@cckd64_chk:
  01a69	c7 84 24 e0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv864[rsp], 0
$LN585@cckd64_chk:
  01a74	0f b6 84 24 a4
	00 00 00	 movzx	 eax, BYTE PTR hdrerr$[rsp]
  01a7c	0b 84 24 e0 01
	00 00		 or	 eax, DWORD PTR tv864[rsp]
  01a83	88 84 24 a4 00
	00 00		 mov	 BYTE PTR hdrerr$[rsp], al

; 1238 :     hdrerr |= cdevhdr.free_off == 0 && cdevhdr.free_total  != cdevhdr.free_imbed             ? 0x0010 : 0;

  01a8a	48 83 bc 24 b0
	0b 00 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+32], 0
  01a93	75 1f		 jne	 SHORT $LN586@cckd64_chk
  01a95	48 8b 84 24 d0
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+64]
  01a9d	48 39 84 24 b8
	0b 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+40], rax
  01aa5	74 0d		 je	 SHORT $LN586@cckd64_chk
  01aa7	c7 84 24 e4 01
	00 00 10 00 00
	00		 mov	 DWORD PTR tv870[rsp], 16
  01ab2	eb 0b		 jmp	 SHORT $LN587@cckd64_chk
$LN586@cckd64_chk:
  01ab4	c7 84 24 e4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv870[rsp], 0
$LN587@cckd64_chk:
  01abf	0f b6 84 24 a4
	00 00 00	 movzx	 eax, BYTE PTR hdrerr$[rsp]
  01ac7	0b 84 24 e4 01
	00 00		 or	 eax, DWORD PTR tv870[rsp]
  01ace	88 84 24 a4 00
	00 00		 mov	 BYTE PTR hdrerr$[rsp], al

; 1239 :     hdrerr |= cdevhdr.free_off != 0 && cdevhdr.free_total  == 0                              ? 0x0020 : 0;

  01ad5	48 83 bc 24 b0
	0b 00 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+32], 0
  01ade	74 18		 je	 SHORT $LN588@cckd64_chk
  01ae0	48 83 bc 24 b8
	0b 00 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+40], 0
  01ae9	75 0d		 jne	 SHORT $LN588@cckd64_chk
  01aeb	c7 84 24 e8 01
	00 00 20 00 00
	00		 mov	 DWORD PTR tv876[rsp], 32 ; 00000020H
  01af6	eb 0b		 jmp	 SHORT $LN589@cckd64_chk
$LN588@cckd64_chk:
  01af8	c7 84 24 e8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv876[rsp], 0
$LN589@cckd64_chk:
  01b03	0f b6 84 24 a4
	00 00 00	 movzx	 eax, BYTE PTR hdrerr$[rsp]
  01b0b	0b 84 24 e8 01
	00 00		 or	 eax, DWORD PTR tv876[rsp]
  01b12	88 84 24 a4 00
	00 00		 mov	 BYTE PTR hdrerr$[rsp], al

; 1240 :     hdrerr |= cdevhdr.free_off != 0 && cdevhdr.free_num    == 0                              ? 0x0040 : 0;

  01b19	48 83 bc 24 b0
	0b 00 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+32], 0
  01b22	74 18		 je	 SHORT $LN590@cckd64_chk
  01b24	48 83 bc 24 c8
	0b 00 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+56], 0
  01b2d	75 0d		 jne	 SHORT $LN590@cckd64_chk
  01b2f	c7 84 24 ec 01
	00 00 40 00 00
	00		 mov	 DWORD PTR tv882[rsp], 64 ; 00000040H
  01b3a	eb 0b		 jmp	 SHORT $LN591@cckd64_chk
$LN590@cckd64_chk:
  01b3c	c7 84 24 ec 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv882[rsp], 0
$LN591@cckd64_chk:
  01b47	0f b6 84 24 a4
	00 00 00	 movzx	 eax, BYTE PTR hdrerr$[rsp]
  01b4f	0b 84 24 ec 01
	00 00		 or	 eax, DWORD PTR tv882[rsp]
  01b56	88 84 24 a4 00
	00 00		 mov	 BYTE PTR hdrerr$[rsp], al

; 1241 :     hdrerr |= cdevhdr.free_num == 0 && cdevhdr.free_total  != cdevhdr.free_imbed             ? 0x0080 : 0;

  01b5d	48 83 bc 24 c8
	0b 00 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+56], 0
  01b66	75 1f		 jne	 SHORT $LN592@cckd64_chk
  01b68	48 8b 84 24 d0
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+64]
  01b70	48 39 84 24 b8
	0b 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+40], rax
  01b78	74 0d		 je	 SHORT $LN592@cckd64_chk
  01b7a	c7 84 24 f0 01
	00 00 80 00 00
	00		 mov	 DWORD PTR tv888[rsp], 128 ; 00000080H
  01b85	eb 0b		 jmp	 SHORT $LN593@cckd64_chk
$LN592@cckd64_chk:
  01b87	c7 84 24 f0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv888[rsp], 0
$LN593@cckd64_chk:
  01b92	0f b6 84 24 a4
	00 00 00	 movzx	 eax, BYTE PTR hdrerr$[rsp]
  01b9a	0b 84 24 f0 01
	00 00		 or	 eax, DWORD PTR tv888[rsp]
  01ba1	88 84 24 a4 00
	00 00		 mov	 BYTE PTR hdrerr$[rsp], al

; 1242 :     hdrerr |= cdevhdr.free_num != 0 && cdevhdr.free_total  <= cdevhdr.free_imbed             ? 0x0100 : 0;

  01ba8	48 83 bc 24 c8
	0b 00 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+56], 0
  01bb1	74 1f		 je	 SHORT $LN594@cckd64_chk
  01bb3	48 8b 84 24 d0
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+64]
  01bbb	48 39 84 24 b8
	0b 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+40], rax
  01bc3	77 0d		 ja	 SHORT $LN594@cckd64_chk
  01bc5	c7 84 24 f4 01
	00 00 00 01 00
	00		 mov	 DWORD PTR tv894[rsp], 256 ; 00000100H
  01bd0	eb 0b		 jmp	 SHORT $LN595@cckd64_chk
$LN594@cckd64_chk:
  01bd2	c7 84 24 f4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv894[rsp], 0
$LN595@cckd64_chk:
  01bdd	0f b6 84 24 a4
	00 00 00	 movzx	 eax, BYTE PTR hdrerr$[rsp]
  01be5	0b 84 24 f4 01
	00 00		 or	 eax, DWORD PTR tv894[rsp]
  01bec	88 84 24 a4 00
	00 00		 mov	 BYTE PTR hdrerr$[rsp], al

; 1243 :     hdrerr |= cdevhdr.free_imbed    >  cdevhdr.free_total                                    ? 0x0200 : 0;

  01bf3	48 8b 84 24 b8
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+40]
  01bfb	48 39 84 24 d0
	0b 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+64], rax
  01c03	76 0d		 jbe	 SHORT $LN596@cckd64_chk
  01c05	c7 84 24 f8 01
	00 00 00 02 00
	00		 mov	 DWORD PTR tv899[rsp], 512 ; 00000200H
  01c10	eb 0b		 jmp	 SHORT $LN597@cckd64_chk
$LN596@cckd64_chk:
  01c12	c7 84 24 f8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv899[rsp], 0
$LN597@cckd64_chk:
  01c1d	0f b6 84 24 a4
	00 00 00	 movzx	 eax, BYTE PTR hdrerr$[rsp]
  01c25	0b 84 24 f8 01
	00 00		 or	 eax, DWORD PTR tv899[rsp]
  01c2c	88 84 24 a4 00
	00 00		 mov	 BYTE PTR hdrerr$[rsp], al

; 1244 : 
; 1245 :     /* Additional checking if header errors */
; 1246 :     if (hdrerr != 0)

  01c33	0f b6 84 24 a4
	00 00 00	 movzx	 eax, BYTE PTR hdrerr$[rsp]
  01c3b	85 c0		 test	 eax, eax
  01c3d	0f 84 07 04 00
	00		 je	 $LN192@cckd64_chk

; 1247 :     {
; 1248 :         // "%1d:%04X CCKD file %s: cdevhdr inconsistencies found, code %4.4X"
; 1249 :         if(dev->batch)

  01c43	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01c4b	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01c51	c1 e8 0a	 shr	 eax, 10
  01c54	83 e0 01	 and	 eax, 1
  01c57	85 c0		 test	 eax, eax
  01c59	0f 84 f8 00 00
	00		 je	 $LN193@cckd64_chk

; 1250 :             FWRMSG( stdout, HHC00363, "W", LCSS_DEVNUM, dev->filename, hdrerr );

  01c5f	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01c68	74 15		 je	 SHORT $LN598@cckd64_chk
  01c6a	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01c72	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01c76	89 84 24 fc 01
	00 00		 mov	 DWORD PTR tv916[rsp], eax
  01c7d	eb 0b		 jmp	 SHORT $LN599@cckd64_chk
$LN598@cckd64_chk:
  01c7f	c7 84 24 fc 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv916[rsp], 0
$LN599@cckd64_chk:
  01c8a	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01c93	74 17		 je	 SHORT $LN600@cckd64_chk
  01c95	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01c9d	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01ca1	d1 f8		 sar	 eax, 1
  01ca3	89 84 24 00 02
	00 00		 mov	 DWORD PTR tv922[rsp], eax
  01caa	eb 0b		 jmp	 SHORT $LN601@cckd64_chk
$LN600@cckd64_chk:
  01cac	c7 84 24 00 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv922[rsp], 0
$LN601@cckd64_chk:
  01cb7	0f b6 84 24 a4
	00 00 00	 movzx	 eax, BYTE PTR hdrerr$[rsp]
  01cbf	89 84 24 1c 04
	00 00		 mov	 DWORD PTR tv909[rsp], eax
  01cc6	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01cce	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  01cd5	48 89 8c 24 c0
	05 00 00	 mov	 QWORD PTR tv911[rsp], rcx
  01cdd	b9 01 00 00 00	 mov	 ecx, 1
  01ce2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01ce8	8b 8c 24 1c 04
	00 00		 mov	 ecx, DWORD PTR tv909[rsp]
  01cef	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  01cf3	48 8b 8c 24 c0
	05 00 00	 mov	 rcx, QWORD PTR tv911[rsp]
  01cfb	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01d00	8b 8c 24 fc 01
	00 00		 mov	 ecx, DWORD PTR tv916[rsp]
  01d07	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01d0b	8b 8c 24 00 02
	00 00		 mov	 ecx, DWORD PTR tv922[rsp]
  01d12	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01d16	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170129
  01d1d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01d22	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170130
  01d29	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01d2e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01d33	41 b9 03 00 00
	00		 mov	 r9d, 3
  01d39	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170131
  01d40	ba e2 04 00 00	 mov	 edx, 1250		; 000004e2H
  01d45	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170132
  01d4c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  01d52	e9 f3 00 00 00	 jmp	 $LN194@cckd64_chk
$LN193@cckd64_chk:

; 1251 :         else
; 1252 :             WRMSG( HHC00363, "W", LCSS_DEVNUM, dev->filename, hdrerr );

  01d57	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01d60	74 15		 je	 SHORT $LN602@cckd64_chk
  01d62	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01d6a	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01d6e	89 84 24 04 02
	00 00		 mov	 DWORD PTR tv940[rsp], eax
  01d75	eb 0b		 jmp	 SHORT $LN603@cckd64_chk
$LN602@cckd64_chk:
  01d77	c7 84 24 04 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv940[rsp], 0
$LN603@cckd64_chk:
  01d82	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01d8b	74 17		 je	 SHORT $LN604@cckd64_chk
  01d8d	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01d95	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01d99	d1 f8		 sar	 eax, 1
  01d9b	89 84 24 08 02
	00 00		 mov	 DWORD PTR tv946[rsp], eax
  01da2	eb 0b		 jmp	 SHORT $LN605@cckd64_chk
$LN604@cckd64_chk:
  01da4	c7 84 24 08 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv946[rsp], 0
$LN605@cckd64_chk:
  01daf	0f b6 84 24 a4
	00 00 00	 movzx	 eax, BYTE PTR hdrerr$[rsp]
  01db7	89 84 24 20 04
	00 00		 mov	 DWORD PTR tv933[rsp], eax
  01dbe	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01dc6	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  01dcd	48 89 8c 24 c8
	05 00 00	 mov	 QWORD PTR tv935[rsp], rcx
  01dd5	b9 01 00 00 00	 mov	 ecx, 1
  01dda	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01de0	8b 8c 24 20 04
	00 00		 mov	 ecx, DWORD PTR tv933[rsp]
  01de7	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  01deb	48 8b 8c 24 c8
	05 00 00	 mov	 rcx, QWORD PTR tv935[rsp]
  01df3	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01df8	8b 8c 24 04 02
	00 00		 mov	 ecx, DWORD PTR tv940[rsp]
  01dff	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01e03	8b 8c 24 08 02
	00 00		 mov	 ecx, DWORD PTR tv946[rsp]
  01e0a	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01e0e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170133
  01e15	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01e1a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170134
  01e21	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01e26	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01e2b	41 b9 03 00 00
	00		 mov	 r9d, 3
  01e31	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170135
  01e38	ba e4 04 00 00	 mov	 edx, 1252		; 000004e4H
  01e3d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170136
  01e44	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN194@cckd64_chk:

; 1253 :         if (level < 1)

  01e4a	83 bc 24 c8 31
	04 00 01	 cmp	 DWORD PTR level$[rsp], 1
  01e52	0f 8d f2 01 00
	00		 jge	 $LN195@cckd64_chk

; 1254 :         {
; 1255 :             level = 1;

  01e58	c7 84 24 c8 31
	04 00 01 00 00
	00		 mov	 DWORD PTR level$[rsp], 1

; 1256 :             if(dev->batch)

  01e63	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01e6b	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01e71	c1 e8 0a	 shr	 eax, 10
  01e74	83 e0 01	 and	 eax, 1
  01e77	85 c0		 test	 eax, eax
  01e79	0f 84 e8 00 00
	00		 je	 $LN196@cckd64_chk

; 1257 :                 FWRMSG( stdout, HHC00364, "W", LCSS_DEVNUM, dev->filename, level );

  01e7f	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01e88	74 15		 je	 SHORT $LN606@cckd64_chk
  01e8a	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01e92	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01e96	89 84 24 0c 02
	00 00		 mov	 DWORD PTR tv968[rsp], eax
  01e9d	eb 0b		 jmp	 SHORT $LN607@cckd64_chk
$LN606@cckd64_chk:
  01e9f	c7 84 24 0c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv968[rsp], 0
$LN607@cckd64_chk:
  01eaa	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01eb3	74 17		 je	 SHORT $LN608@cckd64_chk
  01eb5	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01ebd	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01ec1	d1 f8		 sar	 eax, 1
  01ec3	89 84 24 10 02
	00 00		 mov	 DWORD PTR tv974[rsp], eax
  01eca	eb 0b		 jmp	 SHORT $LN609@cckd64_chk
$LN608@cckd64_chk:
  01ecc	c7 84 24 10 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv974[rsp], 0
$LN609@cckd64_chk:
  01ed7	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01edf	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  01ee5	48 89 84 24 d0
	05 00 00	 mov	 QWORD PTR tv963[rsp], rax
  01eed	b9 01 00 00 00	 mov	 ecx, 1
  01ef2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01ef8	8b 8c 24 c8 31
	04 00		 mov	 ecx, DWORD PTR level$[rsp]
  01eff	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  01f03	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR tv963[rsp]
  01f0b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01f10	8b 8c 24 0c 02
	00 00		 mov	 ecx, DWORD PTR tv968[rsp]
  01f17	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01f1b	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR tv974[rsp]
  01f22	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01f26	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170140
  01f2d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01f32	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170141
  01f39	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01f3e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01f43	41 b9 03 00 00
	00		 mov	 r9d, 3
  01f49	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170142
  01f50	ba e9 04 00 00	 mov	 edx, 1257		; 000004e9H
  01f55	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170143
  01f5c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  01f62	e9 e3 00 00 00	 jmp	 $LN197@cckd64_chk
$LN196@cckd64_chk:

; 1258 :             else
; 1259 :                 WRMSG( HHC00364, "W", LCSS_DEVNUM, dev->filename, level );

  01f67	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01f70	74 15		 je	 SHORT $LN610@cckd64_chk
  01f72	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01f7a	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01f7e	89 84 24 14 02
	00 00		 mov	 DWORD PTR tv991[rsp], eax
  01f85	eb 0b		 jmp	 SHORT $LN611@cckd64_chk
$LN610@cckd64_chk:
  01f87	c7 84 24 14 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv991[rsp], 0
$LN611@cckd64_chk:
  01f92	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01f9b	74 17		 je	 SHORT $LN612@cckd64_chk
  01f9d	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01fa5	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01fa9	d1 f8		 sar	 eax, 1
  01fab	89 84 24 18 02
	00 00		 mov	 DWORD PTR tv997[rsp], eax
  01fb2	eb 0b		 jmp	 SHORT $LN613@cckd64_chk
$LN612@cckd64_chk:
  01fb4	c7 84 24 18 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv997[rsp], 0
$LN613@cckd64_chk:
  01fbf	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01fc7	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  01fcd	48 89 84 24 d8
	05 00 00	 mov	 QWORD PTR tv986[rsp], rax
  01fd5	b9 01 00 00 00	 mov	 ecx, 1
  01fda	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01fe0	8b 8c 24 c8 31
	04 00		 mov	 ecx, DWORD PTR level$[rsp]
  01fe7	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  01feb	48 8b 8c 24 d8
	05 00 00	 mov	 rcx, QWORD PTR tv986[rsp]
  01ff3	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01ff8	8b 8c 24 14 02
	00 00		 mov	 ecx, DWORD PTR tv991[rsp]
  01fff	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02003	8b 8c 24 18 02
	00 00		 mov	 ecx, DWORD PTR tv997[rsp]
  0200a	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0200e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170144
  02015	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0201a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170145
  02021	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02026	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0202b	41 b9 03 00 00
	00		 mov	 r9d, 3
  02031	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170146
  02038	ba eb 04 00 00	 mov	 edx, 1259		; 000004ebH
  0203d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170147
  02044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN197@cckd64_chk:
$LN195@cckd64_chk:
$LN192@cckd64_chk:

; 1260 :         }
; 1261 :     }
; 1262 : 
; 1263 :     /* Additional checking if not properly closed */
; 1264 :     if (level < 1 && (cdevhdr.cdh_opts & CCKD_OPT_OPENED))

  0204a	83 bc 24 c8 31
	04 00 01	 cmp	 DWORD PTR level$[rsp], 1
  02052	0f 8d 07 02 00
	00		 jge	 $LN198@cckd64_chk
  02058	0f b6 84 24 93
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  02060	25 80 00 00 00	 and	 eax, 128		; 00000080H
  02065	85 c0		 test	 eax, eax
  02067	0f 84 f2 01 00
	00		 je	 $LN198@cckd64_chk

; 1265 :     {
; 1266 :         level = 1;

  0206d	c7 84 24 c8 31
	04 00 01 00 00
	00		 mov	 DWORD PTR level$[rsp], 1

; 1267 :         if(dev->batch)

  02078	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02080	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02086	c1 e8 0a	 shr	 eax, 10
  02089	83 e0 01	 and	 eax, 1
  0208c	85 c0		 test	 eax, eax
  0208e	0f 84 e8 00 00
	00		 je	 $LN199@cckd64_chk

; 1268 :             FWRMSG( stdout, HHC00364, "W", LCSS_DEVNUM, dev->filename, level );

  02094	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0209d	74 15		 je	 SHORT $LN614@cckd64_chk
  0209f	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  020a7	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  020ab	89 84 24 1c 02
	00 00		 mov	 DWORD PTR tv1022[rsp], eax
  020b2	eb 0b		 jmp	 SHORT $LN615@cckd64_chk
$LN614@cckd64_chk:
  020b4	c7 84 24 1c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1022[rsp], 0
$LN615@cckd64_chk:
  020bf	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  020c8	74 17		 je	 SHORT $LN616@cckd64_chk
  020ca	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  020d2	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  020d6	d1 f8		 sar	 eax, 1
  020d8	89 84 24 20 02
	00 00		 mov	 DWORD PTR tv1060[rsp], eax
  020df	eb 0b		 jmp	 SHORT $LN617@cckd64_chk
$LN616@cckd64_chk:
  020e1	c7 84 24 20 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1060[rsp], 0
$LN617@cckd64_chk:
  020ec	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  020f4	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  020fa	48 89 84 24 e0
	05 00 00	 mov	 QWORD PTR tv1017[rsp], rax
  02102	b9 01 00 00 00	 mov	 ecx, 1
  02107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0210d	8b 8c 24 c8 31
	04 00		 mov	 ecx, DWORD PTR level$[rsp]
  02114	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  02118	48 8b 8c 24 e0
	05 00 00	 mov	 rcx, QWORD PTR tv1017[rsp]
  02120	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02125	8b 8c 24 1c 02
	00 00		 mov	 ecx, DWORD PTR tv1022[rsp]
  0212c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02130	8b 8c 24 20 02
	00 00		 mov	 ecx, DWORD PTR tv1060[rsp]
  02137	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0213b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170151
  02142	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02147	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170152
  0214e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02153	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02158	41 b9 03 00 00
	00		 mov	 r9d, 3
  0215e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170153
  02165	ba f4 04 00 00	 mov	 edx, 1268		; 000004f4H
  0216a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170154
  02171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  02177	e9 e3 00 00 00	 jmp	 $LN200@cckd64_chk
$LN199@cckd64_chk:

; 1269 :         else
; 1270 :             WRMSG( HHC00364, "W", LCSS_DEVNUM, dev->filename, level );

  0217c	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02185	74 15		 je	 SHORT $LN618@cckd64_chk
  02187	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0218f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02193	89 84 24 24 02
	00 00		 mov	 DWORD PTR tv1077[rsp], eax
  0219a	eb 0b		 jmp	 SHORT $LN619@cckd64_chk
$LN618@cckd64_chk:
  0219c	c7 84 24 24 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1077[rsp], 0
$LN619@cckd64_chk:
  021a7	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  021b0	74 17		 je	 SHORT $LN620@cckd64_chk
  021b2	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  021ba	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  021be	d1 f8		 sar	 eax, 1
  021c0	89 84 24 28 02
	00 00		 mov	 DWORD PTR tv1083[rsp], eax
  021c7	eb 0b		 jmp	 SHORT $LN621@cckd64_chk
$LN620@cckd64_chk:
  021c9	c7 84 24 28 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1083[rsp], 0
$LN621@cckd64_chk:
  021d4	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  021dc	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  021e2	48 89 84 24 e8
	05 00 00	 mov	 QWORD PTR tv1072[rsp], rax
  021ea	b9 01 00 00 00	 mov	 ecx, 1
  021ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  021f5	8b 8c 24 c8 31
	04 00		 mov	 ecx, DWORD PTR level$[rsp]
  021fc	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  02200	48 8b 8c 24 e8
	05 00 00	 mov	 rcx, QWORD PTR tv1072[rsp]
  02208	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0220d	8b 8c 24 24 02
	00 00		 mov	 ecx, DWORD PTR tv1077[rsp]
  02214	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02218	8b 8c 24 28 02
	00 00		 mov	 ecx, DWORD PTR tv1083[rsp]
  0221f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02223	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170155
  0222a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0222f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170156
  02236	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0223b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02240	41 b9 03 00 00
	00		 mov	 r9d, 3
  02246	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170157
  0224d	ba f6 04 00 00	 mov	 edx, 1270		; 000004f6H
  02252	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170158
  02259	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN200@cckd64_chk:
$LN198@cckd64_chk:

; 1271 :     }
; 1272 : 
; 1273 :     /* Additional checking if last opened for read/write */
; 1274 :     if (level < 0 && (cdevhdr.cdh_opts & CCKD_OPT_OPENRW))

  0225f	83 bc 24 c8 31
	04 00 00	 cmp	 DWORD PTR level$[rsp], 0
  02267	7d 1a		 jge	 SHORT $LN201@cckd64_chk
  02269	0f b6 84 24 93
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  02271	83 e0 40	 and	 eax, 64			; 00000040H
  02274	85 c0		 test	 eax, eax
  02276	74 0b		 je	 SHORT $LN201@cckd64_chk

; 1275 :         level = 0;

  02278	c7 84 24 c8 31
	04 00 00 00 00
	00		 mov	 DWORD PTR level$[rsp], 0
$LN201@cckd64_chk:

; 1276 : 
; 1277 :     /* Set check level -1 */
; 1278 :     if (level == 0 && !dev->batch && !hdrerr
; 1279 :      && (cdevhdr.cdh_opts & (CCKD_OPT_OPENED | CCKD_OPT_SPERRS)) == 0
; 1280 :      && ((cdevhdr.cdh_opts & (CCKD_OPT_OPENRW)) == 0 || ro))

  02283	83 bc 24 c8 31
	04 00 00	 cmp	 DWORD PTR level$[rsp], 0
  0228b	75 59		 jne	 SHORT $LN202@cckd64_chk
  0228d	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02295	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0229b	c1 e8 0a	 shr	 eax, 10
  0229e	83 e0 01	 and	 eax, 1
  022a1	85 c0		 test	 eax, eax
  022a3	75 41		 jne	 SHORT $LN202@cckd64_chk
  022a5	0f b6 84 24 a4
	00 00 00	 movzx	 eax, BYTE PTR hdrerr$[rsp]
  022ad	85 c0		 test	 eax, eax
  022af	75 35		 jne	 SHORT $LN202@cckd64_chk
  022b1	0f b6 84 24 93
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  022b9	25 a0 00 00 00	 and	 eax, 160		; 000000a0H
  022be	85 c0		 test	 eax, eax
  022c0	75 24		 jne	 SHORT $LN202@cckd64_chk
  022c2	0f b6 84 24 93
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  022ca	83 e0 40	 and	 eax, 64			; 00000040H
  022cd	85 c0		 test	 eax, eax
  022cf	74 0a		 je	 SHORT $LN203@cckd64_chk
  022d1	83 bc 24 58 01
	00 00 00	 cmp	 DWORD PTR ro$[rsp], 0
  022d9	74 0b		 je	 SHORT $LN202@cckd64_chk
$LN203@cckd64_chk:

; 1281 :         level = -1;

  022db	c7 84 24 c8 31
	04 00 ff ff ff
	ff		 mov	 DWORD PTR level$[rsp], -1
$LN202@cckd64_chk:

; 1282 : 
; 1283 :     /* Build empty l2 table */
; 1284 :     memset (&empty_l2, shadow, CCKD64_L2TAB_SIZE);

  022e6	0f b6 84 24 ee
	00 00 00	 movzx	 eax, BYTE PTR shadow$[rsp]
  022ee	48 98		 cdqe
  022f0	48 8d 8c 24 d0
	1f 00 00	 lea	 rcx, QWORD PTR empty_l2$[rsp]
  022f8	48 8b f9	 mov	 rdi, rcx
  022fb	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  02300	f3 aa		 rep stosb

; 1285 :     if (shadow == 0 && cdevhdr.cdh_nullfmt != 0)

  02302	0f b6 84 24 ee
	00 00 00	 movzx	 eax, BYTE PTR shadow$[rsp]
  0230a	85 c0		 test	 eax, eax
  0230c	75 7f		 jne	 SHORT $LN204@cckd64_chk
  0230e	0f b6 84 24 d8
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+72]
  02316	85 c0		 test	 eax, eax
  02318	74 73		 je	 SHORT $LN204@cckd64_chk

; 1286 :         for (i = 0; i < 256; i++)

  0231a	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  02326	eb 13		 jmp	 SHORT $LN4@cckd64_chk
$LN2@cckd64_chk:
  02328	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  02330	48 ff c0	 inc	 rax
  02333	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN4@cckd64_chk:
  0233b	48 81 bc 24 90
	00 00 00 00 01
	00 00		 cmp	 QWORD PTR i$[rsp], 256	; 00000100H
  02347	7d 44		 jge	 SHORT $LN3@cckd64_chk

; 1287 :             empty_l2[i].L2_len = empty_l2[i].L2_size = cdevhdr.cdh_nullfmt;

  02349	0f b6 84 24 d8
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+72]
  02351	66 89 84 24 60
	01 00 00	 mov	 WORD PTR tv1129[rsp], ax
  02359	48 6b 84 24 90
	00 00 00 10	 imul	 rax, QWORD PTR i$[rsp], 16
  02362	0f b7 8c 24 60
	01 00 00	 movzx	 ecx, WORD PTR tv1129[rsp]
  0236a	66 89 8c 04 da
	1f 00 00	 mov	 WORD PTR empty_l2$[rsp+rax+10], cx
  02372	48 6b 84 24 90
	00 00 00 10	 imul	 rax, QWORD PTR i$[rsp], 16
  0237b	0f b7 8c 24 60
	01 00 00	 movzx	 ecx, WORD PTR tv1129[rsp]
  02383	66 89 8c 04 d8
	1f 00 00	 mov	 WORD PTR empty_l2$[rsp+rax+8], cx
  0238b	eb 9b		 jmp	 SHORT $LN2@cckd64_chk
$LN3@cckd64_chk:
$LN204@cckd64_chk:

; 1288 : 
; 1289 :     /*---------------------------------------------------------------
; 1290 :      * read the level 1 table
; 1291 :      *---------------------------------------------------------------*/
; 1292 :     len = l1size;

  0238d	48 63 84 24 24
	01 00 00	 movsxd	 rax, DWORD PTR l1size$[rsp]
  02395	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR len$[rsp], rax

; 1293 :     if ((l1 = malloc((size_t)len)) == NULL)

  0239d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  023a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  023ab	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR l1$[rsp], rax
  023b3	48 83 bc 24 40
	01 00 00 00	 cmp	 QWORD PTR l1$[rsp], 0
  023bc	75 05		 jne	 SHORT $LN205@cckd64_chk

; 1294 :         goto cdsk_error;

  023be	e9 82 8d 00 00	 jmp	 $cdsk_error$832
$LN205@cckd64_chk:

; 1295 :     off = CCKD64_L1TAB_POS;

  023c3	48 c7 84 24 c0
	00 00 00 00 04
	00 00		 mov	 QWORD PTR off$[rsp], 1024 ; 00000400H

; 1296 :     if ( lseek (fd, off, SEEK_SET) < 0)

  023cf	45 33 c0	 xor	 r8d, r8d
  023d2	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  023da	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  023e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  023e7	48 85 c0	 test	 rax, rax
  023ea	7d 05		 jge	 SHORT $LN206@cckd64_chk

; 1297 :         goto cdsk_lseek_error;

  023ec	e9 41 81 00 00	 jmp	 $cdsk_lseek_error$830
$LN206@cckd64_chk:

; 1298 :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  023f1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  023f8	83 38 00	 cmp	 DWORD PTR [rax], 0
  023fb	74 43		 je	 SHORT $LN207@cckd64_chk
  023fd	41 b8 01 00 00
	00		 mov	 r8d, 1
  02403	33 d2		 xor	 edx, edx
  02405	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0240c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  02412	48 89 84 24 f0
	05 00 00	 mov	 QWORD PTR tv1144[rsp], rax
  0241a	b9 02 00 00 00	 mov	 ecx, 2
  0241f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02425	48 8b 8c 24 f0
	05 00 00	 mov	 rcx, QWORD PTR tv1144[rsp]
  0242d	4c 8b c1	 mov	 r8, rcx
  02430	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170166
  02437	48 8b c8	 mov	 rcx, rax
  0243a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN207@cckd64_chk:

; 1299 :     if ((U64)(rc = read (fd, l1, (unsigned int) len)) != len)

  02440	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  02448	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  02450	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  02457	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  0245d	89 84 24 bc 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  02464	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  0246c	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  02474	74 05		 je	 SHORT $LN208@cckd64_chk

; 1300 :         goto cdsk_read_error;

  02476	e9 07 83 00 00	 jmp	 $cdsk_read_error$831
$LN208@cckd64_chk:

; 1301 :     if (swapend) cckd64_swapend_l1 (l1, cdevhdr.num_L1tab);

  0247b	0f b6 84 24 d8
	00 00 00	 movzx	 eax, BYTE PTR swapend$[rsp]
  02483	85 c0		 test	 eax, eax
  02485	74 14		 je	 SHORT $LN209@cckd64_chk
  02487	8b 94 24 94 0b
	00 00		 mov	 edx, DWORD PTR cdevhdr$[rsp+4]
  0248e	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  02496	e8 00 00 00 00	 call	 cckd64_swapend_l1
$LN209@cckd64_chk:

; 1302 :     lopos = CCKD64_L1TAB_POS + l1size;

  0249b	48 63 84 24 24
	01 00 00	 movsxd	 rax, DWORD PTR l1size$[rsp]
  024a3	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  024a9	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR lopos$[rsp], rax

; 1303 : 
; 1304 :     /*---------------------------------------------------------------
; 1305 :      * initialize the space table
; 1306 :      *---------------------------------------------------------------*/
; 1307 : 
; 1308 :     /* find number of non-null l1 entries */
; 1309 :     for (i = n = 0; i < cdevhdr.num_L1tab; i++)

  024b1	48 c7 84 24 e0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR n$[rsp], 0
  024bd	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR n$[rsp]
  024c5	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
  024cd	eb 13		 jmp	 SHORT $LN7@cckd64_chk
$LN5@cckd64_chk:
  024cf	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  024d7	48 ff c0	 inc	 rax
  024da	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN7@cckd64_chk:
  024e2	48 63 84 24 94
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  024ea	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  024f2	7d 43		 jge	 SHORT $LN6@cckd64_chk

; 1310 :         if (l1[i] != CCKD64_NOSIZE && l1[i] != CCKD64_MAXSIZE)

  024f4	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR l1$[rsp]
  024fc	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  02504	48 83 3c c8 00	 cmp	 QWORD PTR [rax+rcx*8], 0
  02509	74 2a		 je	 SHORT $LN210@cckd64_chk
  0250b	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR l1$[rsp]
  02513	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  0251b	48 83 3c c8 ff	 cmp	 QWORD PTR [rax+rcx*8], -1
  02520	74 13		 je	 SHORT $LN210@cckd64_chk

; 1311 :             n++;

  02522	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR n$[rsp]
  0252a	48 ff c0	 inc	 rax
  0252d	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR n$[rsp], rax
$LN210@cckd64_chk:
  02535	eb 98		 jmp	 SHORT $LN5@cckd64_chk
$LN6@cckd64_chk:

; 1312 : 
; 1313 :     if (level >= 4) n = cdevhdr.num_L1tab;

  02537	83 bc 24 c8 31
	04 00 04	 cmp	 DWORD PTR level$[rsp], 4
  0253f	7c 10		 jl	 SHORT $LN211@cckd64_chk
  02541	48 63 84 24 94
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  02549	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR n$[rsp], rax
$LN211@cckd64_chk:

; 1314 : 
; 1315 :     /* calculate max possible space table entries */
; 1316 :     n = 1 + 1 + 1                    // devhdr, cdevhdr, l1tab

  02551	48 69 84 24 e0
	00 00 00 00 01
	00 00		 imul	 rax, QWORD PTR n$[rsp], 256 ; 00000100H
  0255d	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR n$[rsp]
  02565	48 8d 44 01 03	 lea	 rax, QWORD PTR [rcx+rax+3]
  0256a	48 69 8c 24 e0
	00 00 00 00 01
	00 00		 imul	 rcx, QWORD PTR n$[rsp], 256 ; 00000100H
  02576	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR n$[rsp]
  0257e	48 8d 4c 0a 01	 lea	 rcx, QWORD PTR [rdx+rcx+1]
  02583	48 8d 44 08 02	 lea	 rax, QWORD PTR [rax+rcx+2]
  02588	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR n$[rsp], rax

; 1317 :       + n                            // l2tabs
; 1318 :       + (n * 256)                    // trk/blk images
; 1319 :       + (1 + n + (n * 256) + 1)      // max possible free spaces
; 1320 :       + 1;                           // end-of-file
; 1321 : 
; 1322 :     /* obtain the space table */
; 1323 :     len = sizeof(SPCTAB64);

  02590	48 c7 84 24 b0
	00 00 00 28 00
	00 00		 mov	 QWORD PTR len$[rsp], 40	; 00000028H

; 1324 :     if ((spctab = calloc((size_t)n, (size_t)len)) == NULL)

  0259c	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR len$[rsp]
  025a4	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR n$[rsp]
  025ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  025b2	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR spctab$[rsp], rax
  025ba	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR spctab$[rsp], 0
  025c3	75 05		 jne	 SHORT $LN212@cckd64_chk

; 1325 :         goto cdsk_calloc_error;

  025c5	e9 1a 89 00 00	 jmp	 $cdsk_calloc_error$833
$LN212@cckd64_chk:

; 1326 : 
; 1327 :     /* populate the table with what we have */
; 1328 :     s = 0;

  025ca	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR s$[rsp], 0

; 1329 : 
; 1330 :     /* devhdr */
; 1331 :     spctab[s].spc_typ = SPCTAB_DEVHDR;

  025d5	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  025dd	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  025e1	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  025e9	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1

; 1332 :     spctab[s].spc_val = -1;

  025ed	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  025f5	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  025f9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02601	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 1333 :     spctab[s].spc_off = 0;

  02609	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02611	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  02615	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0261d	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 1334 :     spctab[s].spc_len =

  02626	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0262e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  02632	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0263a	48 c7 44 01 20
	00 02 00 00	 mov	 QWORD PTR [rcx+rax+32], 512 ; 00000200H
  02643	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0264b	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0264f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02657	48 c7 44 01 18
	00 02 00 00	 mov	 QWORD PTR [rcx+rax+24], 512 ; 00000200H

; 1335 :     spctab[s].spc_siz = CKD_DEVHDR_SIZE;
; 1336 :     s++;

  02660	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  02667	ff c0		 inc	 eax
  02669	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 1337 :     /* cdevhdr */
; 1338 :     spctab[s].spc_typ = SPCTAB_CDEVHDR;

  02670	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02678	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0267c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02684	c6 04 01 02	 mov	 BYTE PTR [rcx+rax], 2

; 1339 :     spctab[s].spc_val = -1;

  02688	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02690	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  02694	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0269c	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 1340 :     spctab[s].spc_off = CCKD64_DEVHDR_POS;

  026a4	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  026ac	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  026b0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  026b8	48 c7 44 01 10
	00 02 00 00	 mov	 QWORD PTR [rcx+rax+16], 512 ; 00000200H

; 1341 :     spctab[s].spc_len =

  026c1	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  026c9	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  026cd	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  026d5	48 c7 44 01 20
	00 02 00 00	 mov	 QWORD PTR [rcx+rax+32], 512 ; 00000200H
  026de	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  026e6	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  026ea	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  026f2	48 c7 44 01 18
	00 02 00 00	 mov	 QWORD PTR [rcx+rax+24], 512 ; 00000200H

; 1342 :     spctab[s].spc_siz = CCKD64_DEVHDR_SIZE;
; 1343 :     s++;

  026fb	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  02702	ff c0		 inc	 eax
  02704	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 1344 :     /* l1 table */
; 1345 :     spctab[s].spc_typ = SPCTAB_L1;

  0270b	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02713	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  02717	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0271f	c6 04 01 03	 mov	 BYTE PTR [rcx+rax], 3

; 1346 :     spctab[s].spc_val = -1;

  02723	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0272b	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0272f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02737	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 1347 :     spctab[s].spc_off = CCKD64_L1TAB_POS;

  0273f	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02747	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0274b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02753	48 c7 44 01 10
	00 04 00 00	 mov	 QWORD PTR [rcx+rax+16], 1024 ; 00000400H

; 1348 :     spctab[s].spc_len =

  0275c	48 63 84 24 24
	01 00 00	 movsxd	 rax, DWORD PTR l1size$[rsp]
  02764	48 89 84 24 80
	04 00 00	 mov	 QWORD PTR tv1254[rsp], rax
  0276c	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02774	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  02778	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02780	48 8b 94 24 80
	04 00 00	 mov	 rdx, QWORD PTR tv1254[rsp]
  02788	48 89 54 01 20	 mov	 QWORD PTR [rcx+rax+32], rdx
  0278d	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02795	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  02799	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  027a1	48 8b 94 24 80
	04 00 00	 mov	 rdx, QWORD PTR tv1254[rsp]
  027a9	48 89 54 01 18	 mov	 QWORD PTR [rcx+rax+24], rdx

; 1349 :     spctab[s].spc_siz = l1size;
; 1350 :     s++;

  027ae	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  027b5	ff c0		 inc	 eax
  027b7	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 1351 :     /* l2 tables */
; 1352 :     for (i = 0; i < cdevhdr.num_L1tab && level < 4; i++)

  027be	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  027ca	eb 13		 jmp	 SHORT $LN10@cckd64_chk
$LN8@cckd64_chk:
  027cc	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  027d4	48 ff c0	 inc	 rax
  027d7	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN10@cckd64_chk:
  027df	48 63 84 24 94
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  027e7	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  027ef	0f 8d f1 00 00
	00		 jge	 $LN9@cckd64_chk
  027f5	83 bc 24 c8 31
	04 00 04	 cmp	 DWORD PTR level$[rsp], 4
  027fd	0f 8d e3 00 00
	00		 jge	 $LN9@cckd64_chk

; 1353 :     {
; 1354 :         if (l1[i] == CCKD64_NOSIZE || l1[i] == CCKD64_MAXSIZE)

  02803	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR l1$[rsp]
  0280b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  02813	48 83 3c c8 00	 cmp	 QWORD PTR [rax+rcx*8], 0
  02818	74 17		 je	 SHORT $LN214@cckd64_chk
  0281a	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR l1$[rsp]
  02822	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  0282a	48 83 3c c8 ff	 cmp	 QWORD PTR [rax+rcx*8], -1
  0282f	75 02		 jne	 SHORT $LN213@cckd64_chk
$LN214@cckd64_chk:

; 1355 :             continue;

  02831	eb 99		 jmp	 SHORT $LN8@cckd64_chk
$LN213@cckd64_chk:

; 1356 :         spctab[s].spc_typ = SPCTAB_L2;

  02833	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0283b	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0283f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02847	c6 04 01 04	 mov	 BYTE PTR [rcx+rax], 4

; 1357 :         spctab[s].spc_val = (int) i;

  0284b	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02853	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  02857	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0285f	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR i$[rsp]
  02866	89 54 01 04	 mov	 DWORD PTR [rcx+rax+4], edx

; 1358 :         spctab[s].spc_off = l1[i];

  0286a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02872	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  02876	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0287e	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  02886	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR i$[rsp]
  0288e	48 8b 14 fa	 mov	 rdx, QWORD PTR [rdx+rdi*8]
  02892	48 89 54 01 10	 mov	 QWORD PTR [rcx+rax+16], rdx

; 1359 :         spctab[s].spc_len =

  02897	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0289f	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  028a3	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  028ab	48 c7 44 01 20
	00 10 00 00	 mov	 QWORD PTR [rcx+rax+32], 4096 ; 00001000H
  028b4	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  028bc	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  028c0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  028c8	48 c7 44 01 18
	00 10 00 00	 mov	 QWORD PTR [rcx+rax+24], 4096 ; 00001000H

; 1360 :         spctab[s].spc_siz = CCKD64_L2TAB_SIZE;
; 1361 :         s++;

  028d1	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  028d8	ff c0		 inc	 eax
  028da	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 1362 :     }

  028e1	e9 e6 fe ff ff	 jmp	 $LN8@cckd64_chk
$LN9@cckd64_chk:

; 1363 :     /* end-of-file */
; 1364 :     spctab[s].spc_typ = SPCTAB_EOF;

  028e6	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  028ee	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  028f2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  028fa	c6 04 01 08	 mov	 BYTE PTR [rcx+rax], 8

; 1365 :     spctab[s].spc_val = -1;

  028fe	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02906	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0290a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02912	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 1366 :     spctab[s].spc_off = (U64)fst.st_size;

  0291a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02922	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  02926	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0292e	48 8b 94 24 a8
	0d 00 00	 mov	 rdx, QWORD PTR fst$[rsp+24]
  02936	48 89 54 01 10	 mov	 QWORD PTR [rcx+rax+16], rdx

; 1367 :     spctab[s].spc_len =

  0293b	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02943	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  02947	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0294f	48 c7 44 01 20
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+32], 0
  02958	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02960	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  02964	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0296c	48 c7 44 01 18
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+24], 0

; 1368 :     spctab[s].spc_siz = 0;
; 1369 :     s++;

  02975	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  0297c	ff c0		 inc	 eax
  0297e	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 1370 : 
; 1371 :     qsort (spctab, s, sizeof(SPCTAB64), cdsk_spctab64_sort);

  02985	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0298d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:cdsk_spctab64_sort
  02994	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  0299a	48 8b d0	 mov	 rdx, rax
  0299d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  029a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 1372 : 
; 1373 :     /*---------------------------------------------------------------
; 1374 :      * Quick return if level -1
; 1375 :      *---------------------------------------------------------------*/
; 1376 : 
; 1377 :     if (level < 0)

  029ab	83 bc 24 c8 31
	04 00 00	 cmp	 DWORD PTR level$[rsp], 0
  029b3	0f 8d af 00 00
	00		 jge	 $LN215@cckd64_chk

; 1378 :     {
; 1379 :         int err = 0;

  029b9	c7 84 24 2c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR err$2[rsp], 0

; 1380 :         /* check for overlaps */
; 1381 :         for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  029c4	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  029d0	eb 13		 jmp	 SHORT $LN13@cckd64_chk
$LN11@cckd64_chk:
  029d2	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  029da	48 ff c0	 inc	 rax
  029dd	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN13@cckd64_chk:
  029e5	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  029ee	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  029f6	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  029fa	83 f8 08	 cmp	 eax, 8
  029fd	74 5a		 je	 SHORT $LN12@cckd64_chk

; 1382 :             if (spctab[i].spc_off + spctab[i].spc_siz > spctab[i+1].spc_off)

  029ff	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  02a08	48 6b 8c 24 90
	00 00 00 28	 imul	 rcx, QWORD PTR i$[rsp], 40 ; 00000028H
  02a11	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  02a19	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  02a1e	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  02a26	48 03 44 0a 20	 add	 rax, QWORD PTR [rdx+rcx+32]
  02a2b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  02a33	48 ff c1	 inc	 rcx
  02a36	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  02a3a	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  02a42	48 3b 44 0a 10	 cmp	 rax, QWORD PTR [rdx+rcx+16]
  02a47	76 0b		 jbe	 SHORT $LN216@cckd64_chk

; 1383 :                 err = 1;

  02a49	c7 84 24 2c 02
	00 00 01 00 00
	00		 mov	 DWORD PTR err$2[rsp], 1
$LN216@cckd64_chk:
  02a54	e9 79 ff ff ff	 jmp	 $LN11@cckd64_chk
$LN12@cckd64_chk:

; 1384 :         /* exit if no errors */
; 1385 :         if (!err) goto cdsk_return_ok;

  02a59	83 bc 24 2c 02
	00 00 00	 cmp	 DWORD PTR err$2[rsp], 0
  02a61	75 05		 jne	 SHORT $LN217@cckd64_chk
  02a63	e9 76 75 00 00	 jmp	 $cdsk_return_ok$834
$LN217@cckd64_chk:
$LN215@cckd64_chk:

; 1386 :     }
; 1387 : 
; 1388 :     /*---------------------------------------------------------------
; 1389 :      * obtain the l2errs table and recovery table
; 1390 :      *---------------------------------------------------------------*/
; 1391 : 
; 1392 :     len = sizeof(BYTE);

  02a68	48 c7 84 24 b0
	00 00 00 01 00
	00 00		 mov	 QWORD PTR len$[rsp], 1

; 1393 : 
; 1394 :     n = cdevhdr.num_L1tab;

  02a74	48 63 84 24 94
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  02a7c	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR n$[rsp], rax

; 1395 :     if ((l2errs = calloc((size_t)n, (size_t)len)) == NULL)

  02a84	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR len$[rsp]
  02a8c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR n$[rsp]
  02a94	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  02a9a	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR l2errs$[rsp], rax
  02aa2	48 83 bc 24 68
	01 00 00 00	 cmp	 QWORD PTR l2errs$[rsp], 0
  02aab	75 05		 jne	 SHORT $LN218@cckd64_chk

; 1396 :         goto cdsk_calloc_error;

  02aad	e9 32 84 00 00	 jmp	 $cdsk_calloc_error$833
$LN218@cckd64_chk:

; 1397 : 
; 1398 :     n = trks;

  02ab2	48 63 84 24 0c
	01 00 00	 movsxd	 rax, DWORD PTR trks$[rsp]
  02aba	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR n$[rsp], rax

; 1399 :     if ((rcvtab = calloc((size_t)n, (size_t)len)) == NULL)

  02ac2	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR len$[rsp]
  02aca	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR n$[rsp]
  02ad2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  02ad8	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR rcvtab$[rsp], rax
  02ae0	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR rcvtab$[rsp], 0
  02ae9	75 05		 jne	 SHORT $LN219@cckd64_chk

; 1400 :         goto cdsk_calloc_error;

  02aeb	e9 f4 83 00 00	 jmp	 $cdsk_calloc_error$833
$LN219@cckd64_chk:

; 1401 : 
; 1402 :     /*---------------------------------------------------------------
; 1403 :      * Special processing for level 4 (recover everything)
; 1404 :      *---------------------------------------------------------------*/
; 1405 : 
; 1406 :     if (level == 4)

  02af0	83 bc 24 c8 31
	04 00 04	 cmp	 DWORD PTR level$[rsp], 4
  02af8	75 53		 jne	 SHORT $LN220@cckd64_chk

; 1407 :     {
; 1408 :         memset (l2errs, 1, cdevhdr.num_L1tab);

  02afa	48 63 84 24 94
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  02b02	48 89 84 24 f8
	05 00 00	 mov	 QWORD PTR tv1354[rsp], rax
  02b0a	48 8b bc 24 68
	01 00 00	 mov	 rdi, QWORD PTR l2errs$[rsp]
  02b12	b8 01 00 00 00	 mov	 eax, 1
  02b17	48 8b 8c 24 f8
	05 00 00	 mov	 rcx, QWORD PTR tv1354[rsp]
  02b1f	f3 aa		 rep stosb

; 1409 :         memset (rcvtab, 1, trks);

  02b21	48 63 84 24 0c
	01 00 00	 movsxd	 rax, DWORD PTR trks$[rsp]
  02b29	48 89 84 24 00
	06 00 00	 mov	 QWORD PTR tv1359[rsp], rax
  02b31	48 8b bc 24 10
	01 00 00	 mov	 rdi, QWORD PTR rcvtab$[rsp]
  02b39	b8 01 00 00 00	 mov	 eax, 1
  02b3e	48 8b 8c 24 00
	06 00 00	 mov	 rcx, QWORD PTR tv1359[rsp]
  02b46	f3 aa		 rep stosb

; 1410 :         goto cdsk_recovery;

  02b48	e9 1f 2e 00 00	 jmp	 $cdsk_recovery$835
$LN220@cckd64_chk:

; 1411 :     }
; 1412 : 
; 1413 :     /*---------------------------------------------------------------
; 1414 :      * Read the level 2 tables
; 1415 :      *---------------------------------------------------------------*/
; 1416 : 
; 1417 :     for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  02b4d	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  02b59	eb 13		 jmp	 SHORT $LN16@cckd64_chk
$LN14@cckd64_chk:
  02b5b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  02b63	48 ff c0	 inc	 rax
  02b66	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN16@cckd64_chk:
  02b6e	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  02b77	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02b7f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  02b83	83 f8 08	 cmp	 eax, 8
  02b86	0f 84 a5 02 00
	00		 je	 $LN15@cckd64_chk

; 1418 :     {
; 1419 :         if (spctab[i].spc_typ != SPCTAB_L2
; 1420 :          || spctab[i].spc_off < lopos || spctab[i].spc_off > hipos)

  02b8c	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  02b95	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02b9d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  02ba1	83 f8 04	 cmp	 eax, 4
  02ba4	75 40		 jne	 SHORT $LN222@cckd64_chk
  02ba6	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  02baf	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02bb7	48 8b 94 24 48
	01 00 00	 mov	 rdx, QWORD PTR lopos$[rsp]
  02bbf	48 39 54 01 10	 cmp	 QWORD PTR [rcx+rax+16], rdx
  02bc4	72 20		 jb	 SHORT $LN222@cckd64_chk
  02bc6	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  02bcf	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02bd7	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR hipos$[rsp]
  02bdf	48 39 54 01 10	 cmp	 QWORD PTR [rcx+rax+16], rdx
  02be4	76 05		 jbe	 SHORT $LN221@cckd64_chk
$LN222@cckd64_chk:

; 1421 :             continue;

  02be6	e9 70 ff ff ff	 jmp	 $LN14@cckd64_chk
$LN221@cckd64_chk:

; 1422 : 
; 1423 :         off = spctab[i].spc_off;

  02beb	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  02bf4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02bfc	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  02c01	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 1424 :         if ( lseek (fd, off, SEEK_SET) < 0 )

  02c09	45 33 c0	 xor	 r8d, r8d
  02c0c	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  02c14	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  02c1b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  02c21	48 85 c0	 test	 rax, rax
  02c24	7d 05		 jge	 SHORT $LN223@cckd64_chk

; 1425 :             goto cdsk_lseek_error;

  02c26	e9 07 79 00 00	 jmp	 $cdsk_lseek_error$830
$LN223@cckd64_chk:

; 1426 :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  02c2b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  02c32	83 38 00	 cmp	 DWORD PTR [rax], 0
  02c35	74 43		 je	 SHORT $LN224@cckd64_chk
  02c37	41 b8 01 00 00
	00		 mov	 r8d, 1
  02c3d	33 d2		 xor	 edx, edx
  02c3f	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  02c46	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  02c4c	48 89 84 24 08
	06 00 00	 mov	 QWORD PTR tv1391[rsp], rax
  02c54	b9 02 00 00 00	 mov	 ecx, 2
  02c59	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02c5f	48 8b 8c 24 08
	06 00 00	 mov	 rcx, QWORD PTR tv1391[rsp]
  02c67	4c 8b c1	 mov	 r8, rcx
  02c6a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170184
  02c71	48 8b c8	 mov	 rcx, rax
  02c74	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN224@cckd64_chk:

; 1427 :         len = CCKD64_L2TAB_SIZE;

  02c7a	48 c7 84 24 b0
	00 00 00 00 10
	00 00		 mov	 QWORD PTR len$[rsp], 4096 ; 00001000H

; 1428 :         if ((U64)(rc = read (fd, l2tab, (unsigned int) len)) != len)

  02c86	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  02c8e	48 8d 94 24 d0
	0f 00 00	 lea	 rdx, QWORD PTR l2tab$[rsp]
  02c96	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  02c9d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  02ca3	89 84 24 bc 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  02caa	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  02cb2	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  02cba	74 05		 je	 SHORT $LN225@cckd64_chk

; 1429 :             goto cdsk_read_error;

  02cbc	e9 c1 7a 00 00	 jmp	 $cdsk_read_error$831
$LN225@cckd64_chk:

; 1430 :         if (swapend) cckd64_swapend_l2 (l2tab);

  02cc1	0f b6 84 24 d8
	00 00 00	 movzx	 eax, BYTE PTR swapend$[rsp]
  02cc9	85 c0		 test	 eax, eax
  02ccb	74 0d		 je	 SHORT $LN226@cckd64_chk
  02ccd	48 8d 8c 24 d0
	0f 00 00	 lea	 rcx, QWORD PTR l2tab$[rsp]
  02cd5	e8 00 00 00 00	 call	 cckd64_swapend_l2
$LN226@cckd64_chk:

; 1431 : 
; 1432 :         /* add trks/blkgrps to the space table */
; 1433 :         for (j = 0; j < 256; j++)

  02cda	48 c7 84 24 d0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR j$[rsp], 0
  02ce6	eb 13		 jmp	 SHORT $LN19@cckd64_chk
$LN17@cckd64_chk:
  02ce8	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  02cf0	48 ff c0	 inc	 rax
  02cf3	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR j$[rsp], rax
$LN19@cckd64_chk:
  02cfb	48 81 bc 24 d0
	00 00 00 00 01
	00 00		 cmp	 QWORD PTR j$[rsp], 256	; 00000100H
  02d07	0f 8d 1f 01 00
	00		 jge	 $LN18@cckd64_chk

; 1434 :         {
; 1435 :             if (l2tab[j].L2_trkoff != CCKD64_NOSIZE && l2tab[j].L2_trkoff != CCKD64_MAXSIZE)

  02d0d	48 6b 84 24 d0
	00 00 00 10	 imul	 rax, QWORD PTR j$[rsp], 16
  02d16	48 83 bc 04 d0
	0f 00 00 00	 cmp	 QWORD PTR l2tab$[rsp+rax], 0
  02d1f	0f 84 02 01 00
	00		 je	 $LN227@cckd64_chk
  02d25	48 6b 84 24 d0
	00 00 00 10	 imul	 rax, QWORD PTR j$[rsp], 16
  02d2e	48 83 bc 04 d0
	0f 00 00 ff	 cmp	 QWORD PTR l2tab$[rsp+rax], -1
  02d37	0f 84 ea 00 00
	00		 je	 $LN227@cckd64_chk

; 1436 :             {
; 1437 :                 spctab[s].spc_typ = trktyp;

  02d3d	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02d45	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  02d49	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02d51	0f b6 94 24 a5
	00 00 00	 movzx	 edx, BYTE PTR trktyp$[rsp]
  02d59	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 1438 :                 spctab[s].spc_val = (int)((S64)spctab[i].spc_val * 256 + j);

  02d5c	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  02d65	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02d6d	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  02d72	48 69 c0 00 01
	00 00		 imul	 rax, rax, 256		; 00000100H
  02d79	48 03 84 24 d0
	00 00 00	 add	 rax, QWORD PTR j$[rsp]
  02d81	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  02d89	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  02d8d	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  02d95	89 44 0a 04	 mov	 DWORD PTR [rdx+rcx+4], eax

; 1439 :                 spctab[s].spc_off = l2tab[j].L2_trkoff;

  02d99	48 6b 84 24 d0
	00 00 00 10	 imul	 rax, QWORD PTR j$[rsp], 16
  02da2	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  02daa	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  02dae	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  02db6	48 8b 84 04 d0
	0f 00 00	 mov	 rax, QWORD PTR l2tab$[rsp+rax]
  02dbe	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax

; 1440 :                 spctab[s].spc_len = l2tab[j].L2_len;

  02dc3	48 6b 84 24 d0
	00 00 00 10	 imul	 rax, QWORD PTR j$[rsp], 16
  02dcc	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  02dd4	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  02dd8	0f b7 84 04 d8
	0f 00 00	 movzx	 eax, WORD PTR l2tab$[rsp+rax+8]
  02de0	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  02de8	48 89 44 0a 18	 mov	 QWORD PTR [rdx+rcx+24], rax

; 1441 :                 spctab[s].spc_siz = l2tab[j].L2_size;

  02ded	48 6b 84 24 d0
	00 00 00 10	 imul	 rax, QWORD PTR j$[rsp], 16
  02df6	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  02dfe	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  02e02	0f b7 84 04 da
	0f 00 00	 movzx	 eax, WORD PTR l2tab$[rsp+rax+10]
  02e0a	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  02e12	48 89 44 0a 20	 mov	 QWORD PTR [rdx+rcx+32], rax

; 1442 :                 s++;

  02e17	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  02e1e	ff c0		 inc	 eax
  02e20	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax
$LN227@cckd64_chk:

; 1443 :             }
; 1444 :         }

  02e27	e9 bc fe ff ff	 jmp	 $LN17@cckd64_chk
$LN18@cckd64_chk:

; 1445 :     }

  02e2c	e9 2a fd ff ff	 jmp	 $LN14@cckd64_chk
$LN15@cckd64_chk:

; 1446 :     qsort (spctab, s, sizeof(SPCTAB64), cdsk_spctab64_sort);

  02e31	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02e39	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:cdsk_spctab64_sort
  02e40	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  02e46	48 8b d0	 mov	 rdx, rax
  02e49	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02e51	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 1447 : 
; 1448 :     /*---------------------------------------------------------------
; 1449 :      * Consistency checks.
; 1450 :      *
; 1451 :      * The space table is now populated with everything but free
; 1452 :      * space.  Therefore we can infer what the free space should
; 1453 :      * be (ie gaps between allocated spaces).
; 1454 :      *---------------------------------------------------------------*/
; 1455 : 
; 1456 :     lopos = CCKD64_L1TAB_POS + l1size;

  02e57	48 63 84 24 24
	01 00 00	 movsxd	 rax, DWORD PTR l1size$[rsp]
  02e5f	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  02e65	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR lopos$[rsp], rax

; 1457 :     hipos = fst.st_size;

  02e6d	48 8b 84 24 a8
	0d 00 00	 mov	 rax, QWORD PTR fst$[rsp+24]
  02e75	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR hipos$[rsp], rax

; 1458 : 
; 1459 :     /* Make adjustment if new format free space is at the end */
; 1460 :     len = spctab[s-1].spc_off - (spctab[s-2].spc_off + spctab[s-2].spc_siz);

  02e7d	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  02e84	ff c8		 dec	 eax
  02e86	48 98		 cdqe
  02e88	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  02e8c	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR s$[rsp]
  02e93	83 e9 02	 sub	 ecx, 2
  02e96	48 63 c9	 movsxd	 rcx, ecx
  02e99	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  02e9d	8b 94 24 a0 00
	00 00		 mov	 edx, DWORD PTR s$[rsp]
  02ea4	83 ea 02	 sub	 edx, 2
  02ea7	48 63 d2	 movsxd	 rdx, edx
  02eaa	48 6b d2 28	 imul	 rdx, rdx, 40		; 00000028H
  02eae	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  02eb6	48 8b 4c 0f 10	 mov	 rcx, QWORD PTR [rdi+rcx+16]
  02ebb	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  02ec3	48 03 4c 17 20	 add	 rcx, QWORD PTR [rdi+rdx+32]
  02ec8	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  02ed0	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  02ed5	48 2b c1	 sub	 rax, rcx
  02ed8	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR len$[rsp], rax

; 1461 :     if (len > 0
; 1462 :      && cdevhdr.cdh_size == cdevhdr.free_off
; 1463 :      && cdevhdr.cdh_size + len == spctab[s-1].spc_off)

  02ee0	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR len$[rsp], 0
  02ee9	0f 86 ad 00 00
	00		 jbe	 $LN228@cckd64_chk
  02eef	48 8b 84 24 b0
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+32]
  02ef7	48 39 84 24 a0
	0b 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+16], rax
  02eff	0f 85 97 00 00
	00		 jne	 $LN228@cckd64_chk
  02f05	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  02f0d	48 8b 8c 24 a0
	0b 00 00	 mov	 rcx, QWORD PTR cdevhdr$[rsp+16]
  02f15	48 03 c8	 add	 rcx, rax
  02f18	48 8b c1	 mov	 rax, rcx
  02f1b	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR s$[rsp]
  02f22	ff c9		 dec	 ecx
  02f24	48 63 c9	 movsxd	 rcx, ecx
  02f27	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  02f2b	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  02f33	48 3b 44 0a 10	 cmp	 rax, QWORD PTR [rdx+rcx+16]
  02f38	75 62		 jne	 SHORT $LN228@cckd64_chk

; 1464 :     {
; 1465 :         spctab[s-1].spc_off -= len;

  02f3a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  02f41	ff c8		 dec	 eax
  02f43	48 98		 cdqe
  02f45	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  02f49	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02f51	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR len$[rsp]
  02f59	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  02f5e	48 2b c2	 sub	 rax, rdx
  02f61	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR s$[rsp]
  02f68	ff c9		 dec	 ecx
  02f6a	48 63 c9	 movsxd	 rcx, ecx
  02f6d	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  02f71	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  02f79	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax

; 1466 :         hipos -= len;

  02f7e	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  02f86	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR hipos$[rsp]
  02f8e	48 2b c8	 sub	 rcx, rax
  02f91	48 8b c1	 mov	 rax, rcx
  02f94	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR hipos$[rsp], rax
$LN228@cckd64_chk:

; 1467 :     }
; 1468 : 
; 1469 :     memset( &cdevhdr2, 0, CCKD64_DEVHDR_SIZE );

  02f9c	48 8d 84 24 d0
	0d 00 00	 lea	 rax, QWORD PTR cdevhdr2$[rsp]
  02fa4	48 8b f8	 mov	 rdi, rax
  02fa7	33 c0		 xor	 eax, eax
  02fa9	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  02fae	f3 aa		 rep stosb

; 1470 :     for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  02fb0	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  02fbc	eb 13		 jmp	 SHORT $LN22@cckd64_chk
$LN20@cckd64_chk:
  02fbe	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  02fc6	48 ff c0	 inc	 rax
  02fc9	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN22@cckd64_chk:
  02fd1	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  02fda	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02fe2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  02fe6	83 f8 08	 cmp	 eax, 8
  02fe9	0f 84 fe 0e 00
	00		 je	 $LN21@cckd64_chk

; 1471 :     {
; 1472 :         /* Calculate gap size */
; 1473 :         len = spctab[i+1].spc_off - (spctab[i].spc_off + spctab[i].spc_siz);

  02fef	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  02ff7	48 ff c0	 inc	 rax
  02ffa	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  02ffe	48 6b 8c 24 90
	00 00 00 28	 imul	 rcx, QWORD PTR i$[rsp], 40 ; 00000028H
  03007	48 6b 94 24 90
	00 00 00 28	 imul	 rdx, QWORD PTR i$[rsp], 40 ; 00000028H
  03010	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  03018	48 8b 4c 0f 10	 mov	 rcx, QWORD PTR [rdi+rcx+16]
  0301d	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  03025	48 03 4c 17 20	 add	 rcx, QWORD PTR [rdi+rdx+32]
  0302a	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  03032	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  03037	48 2b c1	 sub	 rax, rcx
  0303a	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR len$[rsp], rax

; 1474 : 
; 1475 :         /* Update space statistics */
; 1476 :         cdevhdr2.cdh_size += spctab[i].spc_siz + len;

  03042	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  0304b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03053	48 8b 44 01 20	 mov	 rax, QWORD PTR [rcx+rax+32]
  03058	48 03 84 24 b0
	00 00 00	 add	 rax, QWORD PTR len$[rsp]
  03060	48 8b 8c 24 e0
	0d 00 00	 mov	 rcx, QWORD PTR cdevhdr2$[rsp+16]
  03068	48 03 c8	 add	 rcx, rax
  0306b	48 8b c1	 mov	 rax, rcx
  0306e	48 89 84 24 e0
	0d 00 00	 mov	 QWORD PTR cdevhdr2$[rsp+16], rax

; 1477 :         cdevhdr2.cdh_used += spctab[i].spc_len;

  03076	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  0307f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03087	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  0308c	48 8b 8c 24 e8
	0d 00 00	 mov	 rcx, QWORD PTR cdevhdr2$[rsp+24]
  03094	48 03 c8	 add	 rcx, rax
  03097	48 8b c1	 mov	 rax, rcx
  0309a	48 89 84 24 e8
	0d 00 00	 mov	 QWORD PTR cdevhdr2$[rsp+24], rax

; 1478 :         if (len > 0)

  030a2	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR len$[rsp], 0
  030ab	76 53		 jbe	 SHORT $LN229@cckd64_chk

; 1479 :         {
; 1480 :             cdevhdr2.free_num++;

  030ad	48 8b 84 24 08
	0e 00 00	 mov	 rax, QWORD PTR cdevhdr2$[rsp+56]
  030b5	48 ff c0	 inc	 rax
  030b8	48 89 84 24 08
	0e 00 00	 mov	 QWORD PTR cdevhdr2$[rsp+56], rax

; 1481 :             cdevhdr2.free_total += len;

  030c0	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  030c8	48 8b 8c 24 f8
	0d 00 00	 mov	 rcx, QWORD PTR cdevhdr2$[rsp+40]
  030d0	48 03 c8	 add	 rcx, rax
  030d3	48 8b c1	 mov	 rax, rcx
  030d6	48 89 84 24 f8
	0d 00 00	 mov	 QWORD PTR cdevhdr2$[rsp+40], rax

; 1482 :             if (cdevhdr2.free_largest < len)

  030de	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  030e6	48 39 84 24 00
	0e 00 00	 cmp	 QWORD PTR cdevhdr2$[rsp+48], rax
  030ee	73 10		 jae	 SHORT $LN230@cckd64_chk

; 1483 :                 cdevhdr2.free_largest = len;

  030f0	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  030f8	48 89 84 24 00
	0e 00 00	 mov	 QWORD PTR cdevhdr2$[rsp+48], rax
$LN230@cckd64_chk:
$LN229@cckd64_chk:

; 1484 :         }
; 1485 :         if (spctab[i].spc_typ == trktyp)

  03100	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03109	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03111	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03115	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  0311d	3b c1		 cmp	 eax, ecx
  0311f	0f 85 8a 00 00
	00		 jne	 $LN231@cckd64_chk

; 1486 :         {
; 1487 :             cdevhdr2.free_total += spctab[i].spc_siz - spctab[i].spc_len;

  03125	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  0312e	48 6b 8c 24 90
	00 00 00 28	 imul	 rcx, QWORD PTR i$[rsp], 40 ; 00000028H
  03137	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  0313f	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  03147	48 8b 4c 0f 18	 mov	 rcx, QWORD PTR [rdi+rcx+24]
  0314c	48 8b 44 02 20	 mov	 rax, QWORD PTR [rdx+rax+32]
  03151	48 2b c1	 sub	 rax, rcx
  03154	48 8b 8c 24 f8
	0d 00 00	 mov	 rcx, QWORD PTR cdevhdr2$[rsp+40]
  0315c	48 03 c8	 add	 rcx, rax
  0315f	48 8b c1	 mov	 rax, rcx
  03162	48 89 84 24 f8
	0d 00 00	 mov	 QWORD PTR cdevhdr2$[rsp+40], rax

; 1488 :             cdevhdr2.free_imbed += spctab[i].spc_siz - spctab[i].spc_len;

  0316a	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03173	48 6b 8c 24 90
	00 00 00 28	 imul	 rcx, QWORD PTR i$[rsp], 40 ; 00000028H
  0317c	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  03184	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  0318c	48 8b 4c 0f 18	 mov	 rcx, QWORD PTR [rdi+rcx+24]
  03191	48 8b 44 02 20	 mov	 rax, QWORD PTR [rdx+rax+32]
  03196	48 2b c1	 sub	 rax, rcx
  03199	48 8b 8c 24 10
	0e 00 00	 mov	 rcx, QWORD PTR cdevhdr2$[rsp+64]
  031a1	48 03 c8	 add	 rcx, rax
  031a4	48 8b c1	 mov	 rax, rcx
  031a7	48 89 84 24 10
	0e 00 00	 mov	 QWORD PTR cdevhdr2$[rsp+64], rax
$LN231@cckd64_chk:

; 1489 :         }
; 1490 : 
; 1491 :         /* ignore devhdr, cdevhdr and l1 (these are `out of bounds') */
; 1492 :         if (spctab[i].spc_typ == SPCTAB_DEVHDR
; 1493 :          || spctab[i].spc_typ == SPCTAB_CDEVHDR
; 1494 :          || spctab[i].spc_typ == SPCTAB_L1

  031af	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  031b8	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  031c0	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  031c4	83 f8 01	 cmp	 eax, 1
  031c7	74 34		 je	 SHORT $LN233@cckd64_chk
  031c9	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  031d2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  031da	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  031de	83 f8 02	 cmp	 eax, 2
  031e1	74 1a		 je	 SHORT $LN233@cckd64_chk
  031e3	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  031ec	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  031f4	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  031f8	83 f8 03	 cmp	 eax, 3
  031fb	75 05		 jne	 SHORT $LN232@cckd64_chk
$LN233@cckd64_chk:

; 1495 :            )
; 1496 :             continue;

  031fd	e9 bc fd ff ff	 jmp	 $LN20@cckd64_chk
$LN232@cckd64_chk:

; 1497 : 
; 1498 :         /* check if the space is out of bounds */
; 1499 :         valid = spctab[i].spc_off >= lopos

  03202	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  0320b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03213	48 8b 94 24 48
	01 00 00	 mov	 rdx, QWORD PTR lopos$[rsp]
  0321b	48 39 54 01 10	 cmp	 QWORD PTR [rcx+rax+16], rdx
  03220	72 43		 jb	 SHORT $LN622@cckd64_chk
  03222	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  0322b	48 6b 8c 24 90
	00 00 00 28	 imul	 rcx, QWORD PTR i$[rsp], 40 ; 00000028H
  03234	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  0323c	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  03241	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  03249	48 03 44 0a 20	 add	 rax, QWORD PTR [rdx+rcx+32]
  0324e	48 3b 84 24 78
	01 00 00	 cmp	 rax, QWORD PTR hipos$[rsp]
  03256	77 0d		 ja	 SHORT $LN622@cckd64_chk
  03258	c7 84 24 30 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv1586[rsp], 1
  03263	eb 0b		 jmp	 SHORT $LN623@cckd64_chk
$LN622@cckd64_chk:
  03265	c7 84 24 30 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1586[rsp], 0
$LN623@cckd64_chk:
  03270	0f b6 84 24 30
	02 00 00	 movzx	 eax, BYTE PTR tv1586[rsp]
  03278	88 84 24 ec 00
	00 00		 mov	 BYTE PTR valid$[rsp], al

; 1500 :              && spctab[i].spc_off + spctab[i].spc_siz <= hipos;
; 1501 : 
; 1502 :         /* Overlap check */
; 1503 :         if ((S64)len < 0 || !valid)

  0327f	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR len$[rsp], 0
  03288	7c 10		 jl	 SHORT $LN236@cckd64_chk
  0328a	0f b6 84 24 ec
	00 00 00	 movzx	 eax, BYTE PTR valid$[rsp]
  03292	85 c0		 test	 eax, eax
  03294	0f 85 80 08 00
	00		 jne	 $LN234@cckd64_chk
$LN236@cckd64_chk:

; 1504 :         {
; 1505 :             char space1[32], space2[32];
; 1506 :             recovery = 1;

  0329a	c6 84 24 b9 00
	00 00 01	 mov	 BYTE PTR recovery$[rsp], 1

; 1507 : 
; 1508 :             /* issue error message */
; 1509 :             j = MSGBUF(space1, "%s", spc_typ_to_str( spctab[i].spc_typ ));

  032a2	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  032ab	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  032b3	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  032b7	e8 00 00 00 00	 call	 spc_typ_to_str
  032bc	4c 8b c8	 mov	 r9, rax
  032bf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170197
  032c6	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  032cb	48 8d 8c 24 d0
	2f 00 00	 lea	 rcx, QWORD PTR space1$10[rsp]
  032d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  032d9	48 98		 cdqe
  032db	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR j$[rsp], rax

; 1510 :             if (spctab[i].spc_val >= 0)

  032e3	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  032ec	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  032f4	83 7c 01 04 00	 cmp	 DWORD PTR [rcx+rax+4], 0
  032f9	7c 32		 jl	 SHORT $LN237@cckd64_chk

; 1511 :                 sprintf(space1+j, "[%d]", spctab[i].spc_val);

  032fb	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03304	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR j$[rsp]
  0330c	48 8d 8c 0c d0
	2f 00 00	 lea	 rcx, QWORD PTR space1$10[rsp+rcx]
  03314	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  0331c	44 8b 44 02 04	 mov	 r8d, DWORD PTR [rdx+rax+4]
  03321	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170199
  03328	e8 00 00 00 00	 call	 sprintf
$LN237@cckd64_chk:

; 1512 :             j = MSGBUF(space2, "%s", spc_typ_to_str( spctab[i+1].spc_typ ));

  0332d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  03335	48 ff c0	 inc	 rax
  03338	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0333c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03344	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  03348	e8 00 00 00 00	 call	 spc_typ_to_str
  0334d	4c 8b c8	 mov	 r9, rax
  03350	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170200
  03357	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0335c	48 8d 8c 24 f0
	2f 00 00	 lea	 rcx, QWORD PTR space2$11[rsp]
  03364	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  0336a	48 98		 cdqe
  0336c	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR j$[rsp], rax

; 1513 :             if (spctab[i+1].spc_val >= 0)

  03374	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  0337c	48 ff c0	 inc	 rax
  0337f	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  03383	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0338b	83 7c 01 04 00	 cmp	 DWORD PTR [rcx+rax+4], 0
  03390	7c 38		 jl	 SHORT $LN238@cckd64_chk

; 1514 :                 sprintf(space2+j, "[%d]", spctab[i+1].spc_val);

  03392	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  0339a	48 ff c0	 inc	 rax
  0339d	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  033a1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR j$[rsp]
  033a9	48 8d 8c 0c f0
	2f 00 00	 lea	 rcx, QWORD PTR space2$11[rsp+rcx]
  033b1	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  033b9	44 8b 44 02 04	 mov	 r8d, DWORD PTR [rdx+rax+4]
  033be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170202
  033c5	e8 00 00 00 00	 call	 sprintf
$LN238@cckd64_chk:

; 1515 : 
; 1516 :             if (!valid)

  033ca	0f b6 84 24 ec
	00 00 00	 movzx	 eax, BYTE PTR valid$[rsp]
  033d2	85 c0		 test	 eax, eax
  033d4	0f 85 9e 02 00
	00		 jne	 $LN239@cckd64_chk

; 1517 :             {
; 1518 :                 if(dev->batch)

  033da	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  033e2	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  033e8	c1 e8 0a	 shr	 eax, 10
  033eb	83 e0 01	 and	 eax, 1
  033ee	85 c0		 test	 eax, eax
  033f0	0f 84 41 01 00
	00		 je	 $LN241@cckd64_chk

; 1519 :                     // "%1d:%04X CCKD file %s: %s offset 0x%16.16"PRIX64" len %"PRId64" is out of bounds"
; 1520 :                     FWRMSG( stdout, HHC00365, "W", LCSS_DEVNUM, dev->filename,

  033f6	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  033ff	74 15		 je	 SHORT $LN624@cckd64_chk
  03401	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03409	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0340d	89 84 24 34 02
	00 00		 mov	 DWORD PTR tv1658[rsp], eax
  03414	eb 0b		 jmp	 SHORT $LN625@cckd64_chk
$LN624@cckd64_chk:
  03416	c7 84 24 34 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1658[rsp], 0
$LN625@cckd64_chk:
  03421	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0342a	74 17		 je	 SHORT $LN626@cckd64_chk
  0342c	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03434	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03438	d1 f8		 sar	 eax, 1
  0343a	89 84 24 38 02
	00 00		 mov	 DWORD PTR tv1664[rsp], eax
  03441	eb 0b		 jmp	 SHORT $LN627@cckd64_chk
$LN626@cckd64_chk:
  03443	c7 84 24 38 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1664[rsp], 0
$LN627@cckd64_chk:
  0344e	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03457	48 89 84 24 10
	06 00 00	 mov	 QWORD PTR tv1644[rsp], rax
  0345f	48 6b 8c 24 90
	00 00 00 28	 imul	 rcx, QWORD PTR i$[rsp], 40 ; 00000028H
  03468	48 89 8c 24 18
	06 00 00	 mov	 QWORD PTR tv1648[rsp], rcx
  03470	48 8b 94 24 c0
	31 04 00	 mov	 rdx, QWORD PTR dev$[rsp]
  03478	48 81 c2 a4 00
	00 00		 add	 rdx, 164		; 000000a4H
  0347f	48 89 94 24 20
	06 00 00	 mov	 QWORD PTR tv1653[rsp], rdx
  03487	b9 01 00 00 00	 mov	 ecx, 1
  0348c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03492	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0349a	48 8b 94 24 10
	06 00 00	 mov	 rdx, QWORD PTR tv1644[rsp]
  034a2	48 8b 4c 11 20	 mov	 rcx, QWORD PTR [rcx+rdx+32]
  034a7	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  034ac	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  034b4	48 8b 94 24 18
	06 00 00	 mov	 rdx, QWORD PTR tv1648[rsp]
  034bc	48 8b 4c 11 10	 mov	 rcx, QWORD PTR [rcx+rdx+16]
  034c1	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  034c6	48 8d 8c 24 d0
	2f 00 00	 lea	 rcx, QWORD PTR space1$10[rsp]
  034ce	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  034d3	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR tv1653[rsp]
  034db	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  034e0	8b 8c 24 34 02
	00 00		 mov	 ecx, DWORD PTR tv1658[rsp]
  034e7	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  034eb	8b 8c 24 38 02
	00 00		 mov	 ecx, DWORD PTR tv1664[rsp]
  034f2	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  034f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170207
  034fd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03502	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170208
  03509	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0350e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03513	41 b9 03 00 00
	00		 mov	 r9d, 3
  03519	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170209
  03520	ba f1 05 00 00	 mov	 edx, 1521		; 000005f1H
  03525	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170210
  0352c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  03532	e9 3c 01 00 00	 jmp	 $LN242@cckd64_chk
$LN241@cckd64_chk:

; 1521 :                             space1, spctab[i].spc_off, spctab[i].spc_siz );
; 1522 :                 else
; 1523 :                     // "%1d:%04X CCKD file %s: %s offset 0x%16.16"PRIX64" len %"PRId64" is out of bounds"
; 1524 :                     WRMSG( HHC00365, "W", LCSS_DEVNUM, dev->filename,

  03537	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03540	74 15		 je	 SHORT $LN628@cckd64_chk
  03542	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0354a	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0354e	89 84 24 3c 02
	00 00		 mov	 DWORD PTR tv1689[rsp], eax
  03555	eb 0b		 jmp	 SHORT $LN629@cckd64_chk
$LN628@cckd64_chk:
  03557	c7 84 24 3c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1689[rsp], 0
$LN629@cckd64_chk:
  03562	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0356b	74 17		 je	 SHORT $LN630@cckd64_chk
  0356d	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03575	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03579	d1 f8		 sar	 eax, 1
  0357b	89 84 24 40 02
	00 00		 mov	 DWORD PTR tv1695[rsp], eax
  03582	eb 0b		 jmp	 SHORT $LN631@cckd64_chk
$LN630@cckd64_chk:
  03584	c7 84 24 40 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1695[rsp], 0
$LN631@cckd64_chk:
  0358f	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03598	48 89 84 24 28
	06 00 00	 mov	 QWORD PTR tv1675[rsp], rax
  035a0	48 6b 8c 24 90
	00 00 00 28	 imul	 rcx, QWORD PTR i$[rsp], 40 ; 00000028H
  035a9	48 89 8c 24 30
	06 00 00	 mov	 QWORD PTR tv1679[rsp], rcx
  035b1	48 8b 94 24 c0
	31 04 00	 mov	 rdx, QWORD PTR dev$[rsp]
  035b9	48 81 c2 a4 00
	00 00		 add	 rdx, 164		; 000000a4H
  035c0	48 89 94 24 38
	06 00 00	 mov	 QWORD PTR tv1684[rsp], rdx
  035c8	b9 01 00 00 00	 mov	 ecx, 1
  035cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  035d3	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  035db	48 8b 94 24 28
	06 00 00	 mov	 rdx, QWORD PTR tv1675[rsp]
  035e3	48 8b 4c 11 20	 mov	 rcx, QWORD PTR [rcx+rdx+32]
  035e8	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  035ed	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  035f5	48 8b 94 24 30
	06 00 00	 mov	 rdx, QWORD PTR tv1679[rsp]
  035fd	48 8b 4c 11 10	 mov	 rcx, QWORD PTR [rcx+rdx+16]
  03602	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  03607	48 8d 8c 24 d0
	2f 00 00	 lea	 rcx, QWORD PTR space1$10[rsp]
  0360f	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03614	48 8b 8c 24 38
	06 00 00	 mov	 rcx, QWORD PTR tv1684[rsp]
  0361c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03621	8b 8c 24 3c 02
	00 00		 mov	 ecx, DWORD PTR tv1689[rsp]
  03628	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0362c	8b 8c 24 40 02
	00 00		 mov	 ecx, DWORD PTR tv1695[rsp]
  03633	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  03637	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170211
  0363e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03643	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170212
  0364a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0364f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03654	41 b9 03 00 00
	00		 mov	 r9d, 3
  0365a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170213
  03661	ba f5 05 00 00	 mov	 edx, 1525		; 000005f5H
  03666	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170214
  0366d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN242@cckd64_chk:

; 1525 :                            space1, spctab[i].spc_off, spctab[i].spc_siz );
; 1526 :             }

  03673	e9 f5 02 00 00	 jmp	 $LN240@cckd64_chk
$LN239@cckd64_chk:

; 1527 :             else
; 1528 :             {
; 1529 :                 if(dev->batch)

  03678	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03680	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  03686	c1 e8 0a	 shr	 eax, 10
  03689	83 e0 01	 and	 eax, 1
  0368c	85 c0		 test	 eax, eax
  0368e	0f 84 6f 01 00
	00		 je	 $LN243@cckd64_chk

; 1530 :                     // "%1d:%04X CCKD file %s: %s offset 0x%16.16"PRIX64" len %"PRId64" overlaps %s offset 0x%"PRIX64
; 1531 :                     FWRMSG( stdout, HHC00366, "W", LCSS_DEVNUM, dev->filename,

  03694	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0369d	74 15		 je	 SHORT $LN632@cckd64_chk
  0369f	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  036a7	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  036ab	89 84 24 44 02
	00 00		 mov	 DWORD PTR tv1730[rsp], eax
  036b2	eb 0b		 jmp	 SHORT $LN633@cckd64_chk
$LN632@cckd64_chk:
  036b4	c7 84 24 44 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1730[rsp], 0
$LN633@cckd64_chk:
  036bf	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  036c8	74 17		 je	 SHORT $LN634@cckd64_chk
  036ca	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  036d2	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  036d6	d1 f8		 sar	 eax, 1
  036d8	89 84 24 48 02
	00 00		 mov	 DWORD PTR tv1736[rsp], eax
  036df	eb 0b		 jmp	 SHORT $LN635@cckd64_chk
$LN634@cckd64_chk:
  036e1	c7 84 24 48 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1736[rsp], 0
$LN635@cckd64_chk:
  036ec	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  036f4	48 ff c0	 inc	 rax
  036f7	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  036fb	48 89 84 24 40
	06 00 00	 mov	 QWORD PTR tv1711[rsp], rax
  03703	48 6b 8c 24 90
	00 00 00 28	 imul	 rcx, QWORD PTR i$[rsp], 40 ; 00000028H
  0370c	48 89 8c 24 48
	06 00 00	 mov	 QWORD PTR tv1716[rsp], rcx
  03714	48 6b 94 24 90
	00 00 00 28	 imul	 rdx, QWORD PTR i$[rsp], 40 ; 00000028H
  0371d	48 89 94 24 50
	06 00 00	 mov	 QWORD PTR tv1720[rsp], rdx
  03725	48 8b bc 24 c0
	31 04 00	 mov	 rdi, QWORD PTR dev$[rsp]
  0372d	48 81 c7 a4 00
	00 00		 add	 rdi, 164		; 000000a4H
  03734	b9 01 00 00 00	 mov	 ecx, 1
  03739	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0373f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03747	48 8b 94 24 40
	06 00 00	 mov	 rdx, QWORD PTR tv1711[rsp]
  0374f	48 8b 4c 11 10	 mov	 rcx, QWORD PTR [rcx+rdx+16]
  03754	48 89 4c 24 70	 mov	 QWORD PTR [rsp+112], rcx
  03759	48 8d 8c 24 f0
	2f 00 00	 lea	 rcx, QWORD PTR space2$11[rsp]
  03761	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  03766	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0376e	48 8b 94 24 48
	06 00 00	 mov	 rdx, QWORD PTR tv1716[rsp]
  03776	48 8b 4c 11 20	 mov	 rcx, QWORD PTR [rcx+rdx+32]
  0377b	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  03780	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03788	48 8b 94 24 50
	06 00 00	 mov	 rdx, QWORD PTR tv1720[rsp]
  03790	48 8b 4c 11 10	 mov	 rcx, QWORD PTR [rcx+rdx+16]
  03795	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0379a	48 8d 8c 24 d0
	2f 00 00	 lea	 rcx, QWORD PTR space1$10[rsp]
  037a2	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  037a7	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  037ac	8b 8c 24 44 02
	00 00		 mov	 ecx, DWORD PTR tv1730[rsp]
  037b3	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  037b7	8b 8c 24 48 02
	00 00		 mov	 ecx, DWORD PTR tv1736[rsp]
  037be	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  037c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170217
  037c9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  037ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170218
  037d5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  037da	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  037df	41 b9 03 00 00
	00		 mov	 r9d, 3
  037e5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170219
  037ec	ba fc 05 00 00	 mov	 edx, 1532		; 000005fcH
  037f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170220
  037f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  037fe	e9 6a 01 00 00	 jmp	 $LN244@cckd64_chk
$LN243@cckd64_chk:

; 1532 :                             space1, spctab[i].spc_off, spctab[i].spc_siz, space2, spctab[i+1].spc_off );
; 1533 :                 else
; 1534 :                     // "%1d:%04X CCKD file %s: %s offset 0x%16.16"PRIX64" len %"PRId64" overlaps %s offset 0x%"PRIX64
; 1535 :                     WRMSG( HHC00366, "W", LCSS_DEVNUM, dev->filename,

  03803	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0380c	74 15		 je	 SHORT $LN636@cckd64_chk
  0380e	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03816	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0381a	89 84 24 4c 02
	00 00		 mov	 DWORD PTR tv1767[rsp], eax
  03821	eb 0b		 jmp	 SHORT $LN637@cckd64_chk
$LN636@cckd64_chk:
  03823	c7 84 24 4c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1767[rsp], 0
$LN637@cckd64_chk:
  0382e	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03837	74 17		 je	 SHORT $LN638@cckd64_chk
  03839	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03841	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03845	d1 f8		 sar	 eax, 1
  03847	89 84 24 50 02
	00 00		 mov	 DWORD PTR tv1773[rsp], eax
  0384e	eb 0b		 jmp	 SHORT $LN639@cckd64_chk
$LN638@cckd64_chk:
  03850	c7 84 24 50 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1773[rsp], 0
$LN639@cckd64_chk:
  0385b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  03863	48 ff c0	 inc	 rax
  03866	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0386a	48 89 84 24 58
	06 00 00	 mov	 QWORD PTR tv1748[rsp], rax
  03872	48 6b 8c 24 90
	00 00 00 28	 imul	 rcx, QWORD PTR i$[rsp], 40 ; 00000028H
  0387b	48 89 8c 24 60
	06 00 00	 mov	 QWORD PTR tv1753[rsp], rcx
  03883	48 6b 94 24 90
	00 00 00 28	 imul	 rdx, QWORD PTR i$[rsp], 40 ; 00000028H
  0388c	48 89 94 24 68
	06 00 00	 mov	 QWORD PTR tv1757[rsp], rdx
  03894	48 8b bc 24 c0
	31 04 00	 mov	 rdi, QWORD PTR dev$[rsp]
  0389c	48 81 c7 a4 00
	00 00		 add	 rdi, 164		; 000000a4H
  038a3	b9 01 00 00 00	 mov	 ecx, 1
  038a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  038ae	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  038b6	48 8b 94 24 58
	06 00 00	 mov	 rdx, QWORD PTR tv1748[rsp]
  038be	48 8b 4c 11 10	 mov	 rcx, QWORD PTR [rcx+rdx+16]
  038c3	48 89 4c 24 70	 mov	 QWORD PTR [rsp+112], rcx
  038c8	48 8d 8c 24 f0
	2f 00 00	 lea	 rcx, QWORD PTR space2$11[rsp]
  038d0	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  038d5	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  038dd	48 8b 94 24 60
	06 00 00	 mov	 rdx, QWORD PTR tv1753[rsp]
  038e5	48 8b 4c 11 20	 mov	 rcx, QWORD PTR [rcx+rdx+32]
  038ea	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  038ef	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  038f7	48 8b 94 24 68
	06 00 00	 mov	 rdx, QWORD PTR tv1757[rsp]
  038ff	48 8b 4c 11 10	 mov	 rcx, QWORD PTR [rcx+rdx+16]
  03904	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  03909	48 8d 8c 24 d0
	2f 00 00	 lea	 rcx, QWORD PTR space1$10[rsp]
  03911	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03916	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  0391b	8b 8c 24 4c 02
	00 00		 mov	 ecx, DWORD PTR tv1767[rsp]
  03922	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  03926	8b 8c 24 50 02
	00 00		 mov	 ecx, DWORD PTR tv1773[rsp]
  0392d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  03931	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170221
  03938	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0393d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170222
  03944	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03949	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0394e	41 b9 03 00 00
	00		 mov	 r9d, 3
  03954	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170223
  0395b	ba 00 06 00 00	 mov	 edx, 1536		; 00000600H
  03960	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170224
  03967	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN244@cckd64_chk:
$LN240@cckd64_chk:

; 1536 :                            space1, spctab[i].spc_off, spctab[i].spc_siz, space2, spctab[i+1].spc_off );
; 1537 :             }
; 1538 : 
; 1539 :             /* setup recovery */
; 1540 :             if (spctab[i].spc_typ == SPCTAB_L2)

  0396d	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03976	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0397e	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03982	83 f8 04	 cmp	 eax, 4
  03985	75 5c		 jne	 SHORT $LN245@cckd64_chk

; 1541 :             {
; 1542 :                 l2errs[spctab[i].spc_val] = 1;

  03987	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03990	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03998	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  0399d	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR l2errs$[rsp]
  039a5	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1

; 1543 :                 /* Mark all tracks for the l2 for recovery */
; 1544 :                 memset (rcvtab + (spctab[i].spc_val*256), 1, 256);

  039a9	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  039b2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  039ba	69 44 01 04 00
	01 00 00	 imul	 eax, DWORD PTR [rcx+rax+4], 256 ; 00000100H
  039c2	48 98		 cdqe
  039c4	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  039cc	48 03 c8	 add	 rcx, rax
  039cf	48 8b c1	 mov	 rax, rcx
  039d2	48 8b f8	 mov	 rdi, rax
  039d5	b8 01 00 00 00	 mov	 eax, 1
  039da	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  039df	f3 aa		 rep stosb

; 1545 :             }

  039e1	eb 43		 jmp	 SHORT $LN246@cckd64_chk
$LN245@cckd64_chk:

; 1546 :             else if (spctab[i].spc_typ == trktyp)

  039e3	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  039ec	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  039f4	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  039f8	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  03a00	3b c1		 cmp	 eax, ecx
  03a02	75 22		 jne	 SHORT $LN247@cckd64_chk

; 1547 :                 rcvtab[spctab[i].spc_val] = 1;

  03a04	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03a0d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03a15	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  03a1a	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  03a22	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1
$LN247@cckd64_chk:
$LN246@cckd64_chk:

; 1548 : 
; 1549 :             if (spctab[i+1].spc_typ == SPCTAB_L2 && valid)

  03a26	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  03a2e	48 ff c0	 inc	 rax
  03a31	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  03a35	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03a3d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03a41	83 f8 04	 cmp	 eax, 4
  03a44	75 74		 jne	 SHORT $LN248@cckd64_chk
  03a46	0f b6 84 24 ec
	00 00 00	 movzx	 eax, BYTE PTR valid$[rsp]
  03a4e	85 c0		 test	 eax, eax
  03a50	74 68		 je	 SHORT $LN248@cckd64_chk

; 1550 :             {
; 1551 :                 l2errs[spctab[i+1].spc_val] = 1;

  03a52	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  03a5a	48 ff c0	 inc	 rax
  03a5d	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  03a61	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03a69	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  03a6e	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR l2errs$[rsp]
  03a76	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1

; 1552 :                 memset (rcvtab + (spctab[i+1].spc_val*256), 1, 256);

  03a7a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  03a82	48 ff c0	 inc	 rax
  03a85	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  03a89	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03a91	69 44 01 04 00
	01 00 00	 imul	 eax, DWORD PTR [rcx+rax+4], 256 ; 00000100H
  03a99	48 98		 cdqe
  03a9b	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  03aa3	48 03 c8	 add	 rcx, rax
  03aa6	48 8b c1	 mov	 rax, rcx
  03aa9	48 8b f8	 mov	 rdi, rax
  03aac	b8 01 00 00 00	 mov	 eax, 1
  03ab1	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  03ab6	f3 aa		 rep stosb

; 1553 :             }

  03ab8	eb 5b		 jmp	 SHORT $LN249@cckd64_chk
$LN248@cckd64_chk:

; 1554 :             else if (spctab[i+1].spc_typ == trktyp && valid)

  03aba	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  03ac2	48 ff c0	 inc	 rax
  03ac5	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  03ac9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03ad1	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03ad5	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  03add	3b c1		 cmp	 eax, ecx
  03adf	75 34		 jne	 SHORT $LN250@cckd64_chk
  03ae1	0f b6 84 24 ec
	00 00 00	 movzx	 eax, BYTE PTR valid$[rsp]
  03ae9	85 c0		 test	 eax, eax
  03aeb	74 28		 je	 SHORT $LN250@cckd64_chk

; 1555 :                 rcvtab[spctab[i+1].spc_val] = 1;

  03aed	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  03af5	48 ff c0	 inc	 rax
  03af8	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  03afc	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03b04	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  03b09	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  03b11	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1
$LN250@cckd64_chk:
$LN249@cckd64_chk:

; 1556 : 
; 1557 :         } /* if overlap or out of bounds */

  03b15	e9 ce 03 00 00	 jmp	 $LN235@cckd64_chk
$LN234@cckd64_chk:

; 1558 : 
; 1559 :         /* Check image l2 entry consistency */
; 1560 :         else if (spctab[i].spc_typ == trktyp
; 1561 :          && (spctab[i].spc_len < CKD_TRKHDR_SIZE

  03b1a	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03b23	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03b2b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03b2f	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  03b37	3b c1		 cmp	 eax, ecx
  03b39	0f 85 a9 03 00
	00		 jne	 $LN251@cckd64_chk
  03b3f	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03b48	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03b50	48 83 7c 01 18
	05		 cmp	 QWORD PTR [rcx+rax+24], 5
  03b56	72 51		 jb	 SHORT $LN252@cckd64_chk
  03b58	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03b61	48 6b 8c 24 90
	00 00 00 28	 imul	 rcx, QWORD PTR i$[rsp], 40 ; 00000028H
  03b6a	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  03b72	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  03b7a	48 8b 4c 0f 20	 mov	 rcx, QWORD PTR [rdi+rcx+32]
  03b7f	48 39 4c 02 18	 cmp	 QWORD PTR [rdx+rax+24], rcx
  03b84	77 23		 ja	 SHORT $LN252@cckd64_chk
  03b86	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03b8f	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR trksz$[rsp]
  03b96	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  03b9e	48 39 4c 02 18	 cmp	 QWORD PTR [rdx+rax+24], rcx
  03ba3	0f 86 3f 03 00
	00		 jbe	 $LN251@cckd64_chk
$LN252@cckd64_chk:

; 1562 :           || spctab[i].spc_len > spctab[i].spc_siz
; 1563 :           || spctab[i].spc_len > trksz))
; 1564 :         {
; 1565 :             recovery = 1;

  03ba9	c6 84 24 b9 00
	00 00 01	 mov	 BYTE PTR recovery$[rsp], 1

; 1566 : 
; 1567 :             /* issue error message */
; 1568 :             if(dev->batch)

  03bb1	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03bb9	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  03bbf	c1 e8 0a	 shr	 eax, 10
  03bc2	83 e0 01	 and	 eax, 1
  03bc5	85 c0		 test	 eax, eax
  03bc7	0f 84 7f 01 00
	00		 je	 $LN253@cckd64_chk

; 1569 :                 // "%1d:%04X CCKD file %s: %s[%d] l2 inconsistency: len %"PRId64", size %"PRId64
; 1570 :                 FWRMSG( stdout, HHC00367, "W", LCSS_DEVNUM, dev->filename,

  03bcd	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03bd6	74 15		 je	 SHORT $LN640@cckd64_chk
  03bd8	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03be0	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03be4	89 84 24 54 02
	00 00		 mov	 DWORD PTR tv1905[rsp], eax
  03beb	eb 0b		 jmp	 SHORT $LN641@cckd64_chk
$LN640@cckd64_chk:
  03bed	c7 84 24 54 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1905[rsp], 0
$LN641@cckd64_chk:
  03bf8	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03c01	74 17		 je	 SHORT $LN642@cckd64_chk
  03c03	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03c0b	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03c0f	d1 f8		 sar	 eax, 1
  03c11	89 84 24 58 02
	00 00		 mov	 DWORD PTR tv1911[rsp], eax
  03c18	eb 0b		 jmp	 SHORT $LN643@cckd64_chk
$LN642@cckd64_chk:
  03c1a	c7 84 24 58 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1911[rsp], 0
$LN643@cckd64_chk:
  03c25	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03c2e	48 89 84 24 70
	06 00 00	 mov	 QWORD PTR tv1885[rsp], rax
  03c36	48 6b 8c 24 90
	00 00 00 28	 imul	 rcx, QWORD PTR i$[rsp], 40 ; 00000028H
  03c3f	48 89 8c 24 78
	06 00 00	 mov	 QWORD PTR tv1889[rsp], rcx
  03c47	48 6b 94 24 90
	00 00 00 28	 imul	 rdx, QWORD PTR i$[rsp], 40 ; 00000028H
  03c50	48 89 94 24 80
	06 00 00	 mov	 QWORD PTR tv1893[rsp], rdx
  03c58	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  03c60	e8 00 00 00 00	 call	 spc_typ_to_str
  03c65	48 89 84 24 88
	06 00 00	 mov	 QWORD PTR tv1897[rsp], rax
  03c6d	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03c75	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  03c7c	48 89 8c 24 90
	06 00 00	 mov	 QWORD PTR tv1900[rsp], rcx
  03c84	b9 01 00 00 00	 mov	 ecx, 1
  03c89	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03c8f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03c97	48 8b 94 24 70
	06 00 00	 mov	 rdx, QWORD PTR tv1885[rsp]
  03c9f	48 8b 4c 11 20	 mov	 rcx, QWORD PTR [rcx+rdx+32]
  03ca4	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  03ca9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03cb1	48 8b 94 24 78
	06 00 00	 mov	 rdx, QWORD PTR tv1889[rsp]
  03cb9	48 8b 4c 11 18	 mov	 rcx, QWORD PTR [rcx+rdx+24]
  03cbe	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  03cc3	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03ccb	48 8b 94 24 80
	06 00 00	 mov	 rdx, QWORD PTR tv1893[rsp]
  03cd3	8b 4c 11 04	 mov	 ecx, DWORD PTR [rcx+rdx+4]
  03cd7	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  03cdb	48 8b 8c 24 88
	06 00 00	 mov	 rcx, QWORD PTR tv1897[rsp]
  03ce3	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03ce8	48 8b 8c 24 90
	06 00 00	 mov	 rcx, QWORD PTR tv1900[rsp]
  03cf0	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03cf5	8b 8c 24 54 02
	00 00		 mov	 ecx, DWORD PTR tv1905[rsp]
  03cfc	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  03d00	8b 8c 24 58 02
	00 00		 mov	 ecx, DWORD PTR tv1911[rsp]
  03d07	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  03d0b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170235
  03d12	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03d17	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170236
  03d1e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03d23	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03d28	41 b9 03 00 00
	00		 mov	 r9d, 3
  03d2e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170237
  03d35	ba 23 06 00 00	 mov	 edx, 1571		; 00000623H
  03d3a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170238
  03d41	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  03d47	e9 7a 01 00 00	 jmp	 $LN254@cckd64_chk
$LN253@cckd64_chk:

; 1571 :                         spc_typ_to_str( trktyp ), spctab[i].spc_val, spctab[i].spc_len, spctab[i].spc_siz );
; 1572 :             else
; 1573 :                 // "%1d:%04X CCKD file %s: %s[%d] l2 inconsistency: len %"PRId64", size %"PRId64
; 1574 :                 WRMSG( HHC00367, "W", LCSS_DEVNUM, dev->filename,

  03d4c	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03d55	74 15		 je	 SHORT $LN644@cckd64_chk
  03d57	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03d5f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03d63	89 84 24 5c 02
	00 00		 mov	 DWORD PTR tv1974[rsp], eax
  03d6a	eb 0b		 jmp	 SHORT $LN645@cckd64_chk
$LN644@cckd64_chk:
  03d6c	c7 84 24 5c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1974[rsp], 0
$LN645@cckd64_chk:
  03d77	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03d80	74 17		 je	 SHORT $LN646@cckd64_chk
  03d82	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03d8a	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03d8e	d1 f8		 sar	 eax, 1
  03d90	89 84 24 60 02
	00 00		 mov	 DWORD PTR tv1980[rsp], eax
  03d97	eb 0b		 jmp	 SHORT $LN647@cckd64_chk
$LN646@cckd64_chk:
  03d99	c7 84 24 60 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1980[rsp], 0
$LN647@cckd64_chk:
  03da4	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03dad	48 89 84 24 98
	06 00 00	 mov	 QWORD PTR tv1954[rsp], rax
  03db5	48 6b 8c 24 90
	00 00 00 28	 imul	 rcx, QWORD PTR i$[rsp], 40 ; 00000028H
  03dbe	48 89 8c 24 a0
	06 00 00	 mov	 QWORD PTR tv1958[rsp], rcx
  03dc6	48 6b 94 24 90
	00 00 00 28	 imul	 rdx, QWORD PTR i$[rsp], 40 ; 00000028H
  03dcf	48 89 94 24 a8
	06 00 00	 mov	 QWORD PTR tv1962[rsp], rdx
  03dd7	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  03ddf	e8 00 00 00 00	 call	 spc_typ_to_str
  03de4	48 89 84 24 b0
	06 00 00	 mov	 QWORD PTR tv1966[rsp], rax
  03dec	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03df4	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  03dfb	48 89 8c 24 b8
	06 00 00	 mov	 QWORD PTR tv1969[rsp], rcx
  03e03	b9 01 00 00 00	 mov	 ecx, 1
  03e08	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03e0e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03e16	48 8b 94 24 98
	06 00 00	 mov	 rdx, QWORD PTR tv1954[rsp]
  03e1e	48 8b 4c 11 20	 mov	 rcx, QWORD PTR [rcx+rdx+32]
  03e23	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  03e28	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03e30	48 8b 94 24 a0
	06 00 00	 mov	 rdx, QWORD PTR tv1958[rsp]
  03e38	48 8b 4c 11 18	 mov	 rcx, QWORD PTR [rcx+rdx+24]
  03e3d	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  03e42	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03e4a	48 8b 94 24 a8
	06 00 00	 mov	 rdx, QWORD PTR tv1962[rsp]
  03e52	8b 4c 11 04	 mov	 ecx, DWORD PTR [rcx+rdx+4]
  03e56	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  03e5a	48 8b 8c 24 b0
	06 00 00	 mov	 rcx, QWORD PTR tv1966[rsp]
  03e62	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03e67	48 8b 8c 24 b8
	06 00 00	 mov	 rcx, QWORD PTR tv1969[rsp]
  03e6f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03e74	8b 8c 24 5c 02
	00 00		 mov	 ecx, DWORD PTR tv1974[rsp]
  03e7b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  03e7f	8b 8c 24 60 02
	00 00		 mov	 ecx, DWORD PTR tv1980[rsp]
  03e86	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  03e8a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170239
  03e91	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03e96	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170240
  03e9d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03ea2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03ea7	41 b9 03 00 00
	00		 mov	 r9d, 3
  03ead	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170241
  03eb4	ba 27 06 00 00	 mov	 edx, 1575		; 00000627H
  03eb9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170242
  03ec0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN254@cckd64_chk:

; 1575 :                        spc_typ_to_str( trktyp ), spctab[i].spc_val, spctab[i].spc_len, spctab[i].spc_siz );
; 1576 : 
; 1577 :             /* setup recovery */
; 1578 :             rcvtab[spctab[i].spc_val] = 1;

  03ec6	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03ecf	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03ed7	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  03edc	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  03ee4	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1
$LN251@cckd64_chk:
$LN235@cckd64_chk:

; 1579 :         } /* if inconsistent l2 */
; 1580 :     } /* for each space */

  03ee8	e9 d1 f0 ff ff	 jmp	 $LN20@cckd64_chk
$LN21@cckd64_chk:

; 1581 : 
; 1582 :     /* remove any l2 tables or tracks in error from the space table */
; 1583 :     for (i = 0; recovery && spctab[i].spc_typ != SPCTAB_EOF; i++)

  03eed	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  03ef9	eb 13		 jmp	 SHORT $LN25@cckd64_chk
$LN23@cckd64_chk:
  03efb	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  03f03	48 ff c0	 inc	 rax
  03f06	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN25@cckd64_chk:
  03f0e	0f b6 84 24 b9
	00 00 00	 movzx	 eax, BYTE PTR recovery$[rsp]
  03f16	85 c0		 test	 eax, eax
  03f18	0f 84 bf 00 00
	00		 je	 $LN24@cckd64_chk
  03f1e	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03f27	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03f2f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03f33	83 f8 08	 cmp	 eax, 8
  03f36	0f 84 a1 00 00
	00		 je	 $LN24@cckd64_chk

; 1584 :         if ((spctab[i].spc_typ == SPCTAB_L2 && l2errs[spctab[i].spc_val])
; 1585 :          || (spctab[i].spc_typ == trktyp    && rcvtab[spctab[i].spc_val]))

  03f3c	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03f45	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03f4d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03f51	83 f8 04	 cmp	 eax, 4
  03f54	75 26		 jne	 SHORT $LN257@cckd64_chk
  03f56	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03f5f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03f67	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  03f6c	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR l2errs$[rsp]
  03f74	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03f78	85 c0		 test	 eax, eax
  03f7a	75 47		 jne	 SHORT $LN256@cckd64_chk
$LN257@cckd64_chk:
  03f7c	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03f85	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03f8d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03f91	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  03f99	3b c1		 cmp	 eax, ecx
  03f9b	75 3b		 jne	 SHORT $LN255@cckd64_chk
  03f9d	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03fa6	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03fae	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  03fb3	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  03fbb	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03fbf	85 c0		 test	 eax, eax
  03fc1	74 15		 je	 SHORT $LN255@cckd64_chk
$LN256@cckd64_chk:

; 1586 :             spctab[i].spc_typ = SPCTAB_NONE;

  03fc3	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  03fcc	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03fd4	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
$LN255@cckd64_chk:
  03fd8	e9 1e ff ff ff	 jmp	 $LN23@cckd64_chk
$LN24@cckd64_chk:

; 1587 : 
; 1588 :     /* overlaps are serious */
; 1589 :     if (recovery && level < 3)

  03fdd	0f b6 84 24 b9
	00 00 00	 movzx	 eax, BYTE PTR recovery$[rsp]
  03fe5	85 c0		 test	 eax, eax
  03fe7	0f 84 00 02 00
	00		 je	 $LN258@cckd64_chk
  03fed	83 bc 24 c8 31
	04 00 03	 cmp	 DWORD PTR level$[rsp], 3
  03ff5	0f 8d f2 01 00
	00		 jge	 $LN258@cckd64_chk

; 1590 :     {
; 1591 :         // "%1d:%04X CCKD file %s: forcing check level %d"
; 1592 :         level = 3;

  03ffb	c7 84 24 c8 31
	04 00 03 00 00
	00		 mov	 DWORD PTR level$[rsp], 3

; 1593 :         if(dev->batch)

  04006	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0400e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  04014	c1 e8 0a	 shr	 eax, 10
  04017	83 e0 01	 and	 eax, 1
  0401a	85 c0		 test	 eax, eax
  0401c	0f 84 e8 00 00
	00		 je	 $LN259@cckd64_chk

; 1594 :             FWRMSG( stdout, HHC00364, "W", LCSS_DEVNUM, dev->filename, level );

  04022	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0402b	74 15		 je	 SHORT $LN648@cckd64_chk
  0402d	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04035	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  04039	89 84 24 64 02
	00 00		 mov	 DWORD PTR tv2048[rsp], eax
  04040	eb 0b		 jmp	 SHORT $LN649@cckd64_chk
$LN648@cckd64_chk:
  04042	c7 84 24 64 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2048[rsp], 0
$LN649@cckd64_chk:
  0404d	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04056	74 17		 je	 SHORT $LN650@cckd64_chk
  04058	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04060	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  04064	d1 f8		 sar	 eax, 1
  04066	89 84 24 68 02
	00 00		 mov	 DWORD PTR tv2054[rsp], eax
  0406d	eb 0b		 jmp	 SHORT $LN651@cckd64_chk
$LN650@cckd64_chk:
  0406f	c7 84 24 68 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2054[rsp], 0
$LN651@cckd64_chk:
  0407a	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04082	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  04088	48 89 84 24 c0
	06 00 00	 mov	 QWORD PTR tv2043[rsp], rax
  04090	b9 01 00 00 00	 mov	 ecx, 1
  04095	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0409b	8b 8c 24 c8 31
	04 00		 mov	 ecx, DWORD PTR level$[rsp]
  040a2	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  040a6	48 8b 8c 24 c0
	06 00 00	 mov	 rcx, QWORD PTR tv2043[rsp]
  040ae	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  040b3	8b 8c 24 64 02
	00 00		 mov	 ecx, DWORD PTR tv2048[rsp]
  040ba	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  040be	8b 8c 24 68 02
	00 00		 mov	 ecx, DWORD PTR tv2054[rsp]
  040c5	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  040c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170249
  040d0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  040d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170250
  040dc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  040e1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  040e6	41 b9 03 00 00
	00		 mov	 r9d, 3
  040ec	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170251
  040f3	ba 3a 06 00 00	 mov	 edx, 1594		; 0000063aH
  040f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170252
  040ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  04105	e9 e3 00 00 00	 jmp	 $LN260@cckd64_chk
$LN259@cckd64_chk:

; 1595 :         else
; 1596 :             WRMSG( HHC00364, "W", LCSS_DEVNUM, dev->filename, level );

  0410a	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04113	74 15		 je	 SHORT $LN652@cckd64_chk
  04115	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0411d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  04121	89 84 24 6c 02
	00 00		 mov	 DWORD PTR tv2071[rsp], eax
  04128	eb 0b		 jmp	 SHORT $LN653@cckd64_chk
$LN652@cckd64_chk:
  0412a	c7 84 24 6c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2071[rsp], 0
$LN653@cckd64_chk:
  04135	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0413e	74 17		 je	 SHORT $LN654@cckd64_chk
  04140	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04148	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0414c	d1 f8		 sar	 eax, 1
  0414e	89 84 24 70 02
	00 00		 mov	 DWORD PTR tv2077[rsp], eax
  04155	eb 0b		 jmp	 SHORT $LN655@cckd64_chk
$LN654@cckd64_chk:
  04157	c7 84 24 70 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2077[rsp], 0
$LN655@cckd64_chk:
  04162	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0416a	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  04170	48 89 84 24 c8
	06 00 00	 mov	 QWORD PTR tv2066[rsp], rax
  04178	b9 01 00 00 00	 mov	 ecx, 1
  0417d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  04183	8b 8c 24 c8 31
	04 00		 mov	 ecx, DWORD PTR level$[rsp]
  0418a	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  0418e	48 8b 8c 24 c8
	06 00 00	 mov	 rcx, QWORD PTR tv2066[rsp]
  04196	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0419b	8b 8c 24 6c 02
	00 00		 mov	 ecx, DWORD PTR tv2071[rsp]
  041a2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  041a6	8b 8c 24 70 02
	00 00		 mov	 ecx, DWORD PTR tv2077[rsp]
  041ad	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  041b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170253
  041b8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  041bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170254
  041c4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  041c9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  041ce	41 b9 03 00 00
	00		 mov	 r9d, 3
  041d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170255
  041db	ba 3c 06 00 00	 mov	 edx, 1596		; 0000063cH
  041e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170256
  041e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN260@cckd64_chk:
$LN258@cckd64_chk:

; 1597 :     }
; 1598 : 
; 1599 :     /* Rebuild free space if any errors */
; 1600 :     if (recovery || hdrerr
; 1601 :      || cdevhdr.cdh_size     != cdevhdr2.cdh_size
; 1602 :      || cdevhdr.cdh_used     != cdevhdr2.cdh_used
; 1603 :      || cdevhdr.free_num     != cdevhdr2.free_num
; 1604 :      || cdevhdr.free_largest != cdevhdr2.free_largest
; 1605 :      || cdevhdr.free_total   != cdevhdr2.free_total
; 1606 :      || cdevhdr.free_imbed   != cdevhdr2.free_imbed

  041ed	0f b6 84 24 b9
	00 00 00	 movzx	 eax, BYTE PTR recovery$[rsp]
  041f5	85 c0		 test	 eax, eax
  041f7	75 78		 jne	 SHORT $LN262@cckd64_chk
  041f9	0f b6 84 24 a4
	00 00 00	 movzx	 eax, BYTE PTR hdrerr$[rsp]
  04201	85 c0		 test	 eax, eax
  04203	75 6c		 jne	 SHORT $LN262@cckd64_chk
  04205	48 8b 84 24 e0
	0d 00 00	 mov	 rax, QWORD PTR cdevhdr2$[rsp+16]
  0420d	48 39 84 24 a0
	0b 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+16], rax
  04215	75 5a		 jne	 SHORT $LN262@cckd64_chk
  04217	48 8b 84 24 e8
	0d 00 00	 mov	 rax, QWORD PTR cdevhdr2$[rsp+24]
  0421f	48 39 84 24 a8
	0b 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+24], rax
  04227	75 48		 jne	 SHORT $LN262@cckd64_chk
  04229	48 8b 84 24 08
	0e 00 00	 mov	 rax, QWORD PTR cdevhdr2$[rsp+56]
  04231	48 39 84 24 c8
	0b 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+56], rax
  04239	75 36		 jne	 SHORT $LN262@cckd64_chk
  0423b	48 8b 84 24 00
	0e 00 00	 mov	 rax, QWORD PTR cdevhdr2$[rsp+48]
  04243	48 39 84 24 c0
	0b 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+48], rax
  0424b	75 24		 jne	 SHORT $LN262@cckd64_chk
  0424d	48 8b 84 24 f8
	0d 00 00	 mov	 rax, QWORD PTR cdevhdr2$[rsp+40]
  04255	48 39 84 24 b8
	0b 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+40], rax
  0425d	75 12		 jne	 SHORT $LN262@cckd64_chk
  0425f	48 8b 84 24 10
	0e 00 00	 mov	 rax, QWORD PTR cdevhdr2$[rsp+64]
  04267	48 39 84 24 d0
	0b 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+64], rax
  0426f	74 08		 je	 SHORT $LN261@cckd64_chk
$LN262@cckd64_chk:

; 1607 :     )
; 1608 :         fsperr = 1;

  04271	c6 84 24 b8 00
	00 00 01	 mov	 BYTE PTR fsperr$[rsp], 1
$LN261@cckd64_chk:

; 1609 : 
; 1610 :     /*---------------------------------------------------------------
; 1611 :      * read the free space
; 1612 :      *---------------------------------------------------------------*/
; 1613 : 
; 1614 :     lopos = CCKD64_L1TAB_POS + l1size;

  04279	48 63 84 24 24
	01 00 00	 movsxd	 rax, DWORD PTR l1size$[rsp]
  04281	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  04287	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR lopos$[rsp], rax

; 1615 :     hipos = fst.st_size;

  0428f	48 8b 84 24 a8
	0d 00 00	 mov	 rax, QWORD PTR fst$[rsp+24]
  04297	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR hipos$[rsp], rax

; 1616 : 
; 1617 :     if (level >= 1 && !fsperr)

  0429f	83 bc 24 c8 31
	04 00 01	 cmp	 DWORD PTR level$[rsp], 1
  042a7	0f 8c d1 06 00
	00		 jl	 $LN263@cckd64_chk
  042ad	0f b6 84 24 b8
	00 00 00	 movzx	 eax, BYTE PTR fsperr$[rsp]
  042b5	85 c0		 test	 eax, eax
  042b7	0f 85 c1 06 00
	00		 jne	 $LN263@cckd64_chk
$LN26@cckd64_chk:

; 1618 :     {
; 1619 :         while (cdevhdr.free_off) // `while' so code can break

  042bd	48 83 bc 24 b0
	0b 00 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+32], 0
  042c6	0f 84 b2 06 00
	00		 je	 $LN27@cckd64_chk

; 1620 :         {
; 1621 :             fsperr = 1;  // be pessimistic

  042cc	c6 84 24 b8 00
	00 00 01	 mov	 BYTE PTR fsperr$[rsp], 1

; 1622 :             fsp = NULL;

  042d4	48 c7 84 24 30
	01 00 00 00 00
	00 00		 mov	 QWORD PTR fsp$[rsp], 0

; 1623 : 
; 1624 :             /* Read the free space */
; 1625 :             off = cdevhdr.free_off;

  042e0	48 8b 84 24 b0
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+32]
  042e8	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 1626 :             len = CCKD64_FREEBLK_SIZE;

  042f0	48 c7 84 24 b0
	00 00 00 10 00
	00 00		 mov	 QWORD PTR len$[rsp], 16

; 1627 :             if (off < lopos || off + CCKD64_FREEBLK_SIZE > hipos
; 1628 :              || lseek (fd, off, SEEK_SET) < 0
; 1629 :              || (U64)(rc = read (fd, &freeblk, (unsigned int) len)) != len)

  042fc	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR lopos$[rsp]
  04304	48 39 84 24 c0
	00 00 00	 cmp	 QWORD PTR off$[rsp], rax
  0430c	72 69		 jb	 SHORT $LN265@cckd64_chk
  0430e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR off$[rsp]
  04316	48 83 c0 10	 add	 rax, 16
  0431a	48 3b 84 24 78
	01 00 00	 cmp	 rax, QWORD PTR hipos$[rsp]
  04322	77 53		 ja	 SHORT $LN265@cckd64_chk
  04324	45 33 c0	 xor	 r8d, r8d
  04327	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  0432f	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  04336	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0433c	48 85 c0	 test	 rax, rax
  0433f	7c 36		 jl	 SHORT $LN265@cckd64_chk
  04341	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  04349	48 8d 94 24 70
	0b 00 00	 lea	 rdx, QWORD PTR freeblk$[rsp]
  04351	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  04358	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  0435e	89 84 24 bc 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  04365	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  0436d	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  04375	74 05		 je	 SHORT $LN264@cckd64_chk
$LN265@cckd64_chk:

; 1630 :                 break;

  04377	e9 02 06 00 00	 jmp	 $LN27@cckd64_chk
$LN264@cckd64_chk:

; 1631 : 
; 1632 :             gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  0437c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  04383	83 38 00	 cmp	 DWORD PTR [rax], 0
  04386	74 43		 je	 SHORT $LN266@cckd64_chk
  04388	41 b8 01 00 00
	00		 mov	 r8d, 1
  0438e	33 d2		 xor	 edx, edx
  04390	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  04397	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0439d	48 89 84 24 d0
	06 00 00	 mov	 QWORD PTR tv2120[rsp], rax
  043a5	b9 02 00 00 00	 mov	 ecx, 2
  043aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  043b0	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR tv2120[rsp]
  043b8	4c 8b c1	 mov	 r8, rcx
  043bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170263
  043c2	48 8b c8	 mov	 rcx, rax
  043c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN266@cckd64_chk:

; 1633 : 
; 1634 :             if (memcmp (&freeblk, "FREE_BLK", 8) == 0)

  043cb	41 b8 08 00 00
	00		 mov	 r8d, 8
  043d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170266
  043d8	48 8d 8c 24 70
	0b 00 00	 lea	 rcx, QWORD PTR freeblk$[rsp]
  043e0	e8 00 00 00 00	 call	 memcmp
  043e5	85 c0		 test	 eax, eax
  043e7	0f 85 61 02 00
	00		 jne	 $LN267@cckd64_chk

; 1635 :             {
; 1636 :                 /* new format free space */
; 1637 :                 len = cdevhdr.free_num * CCKD64_FREEBLK_SIZE;

  043ed	48 6b 84 24 c8
	0b 00 00 10	 imul	 rax, QWORD PTR cdevhdr$[rsp+56], 16
  043f6	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR len$[rsp], rax

; 1638 :                 if ((fsp = malloc((size_t)len)) == NULL
; 1639 :                  || (U64)(rc = read (fd, fsp, (unsigned int) len)) != len)

  043fe	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  04406	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0440c	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR fsp$[rsp], rax
  04414	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR fsp$[rsp], 0
  0441d	74 36		 je	 SHORT $LN270@cckd64_chk
  0441f	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  04427	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR fsp$[rsp]
  0442f	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  04436	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  0443c	89 84 24 bc 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  04443	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  0444b	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  04453	74 05		 je	 SHORT $LN269@cckd64_chk
$LN270@cckd64_chk:

; 1640 :                     break;

  04455	e9 24 05 00 00	 jmp	 $LN27@cckd64_chk
$LN269@cckd64_chk:

; 1641 : 
; 1642 :                 for (i = 0; i < cdevhdr.free_num; i++)

  0445a	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  04466	eb 13		 jmp	 SHORT $LN30@cckd64_chk
$LN28@cckd64_chk:
  04468	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  04470	48 ff c0	 inc	 rax
  04473	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN30@cckd64_chk:
  0447b	48 8b 84 24 c8
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+56]
  04483	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  0448b	0f 8d 9e 01 00
	00		 jge	 $LN29@cckd64_chk

; 1643 :                 {
; 1644 :                     if (swapend) cckd64_swapend_free (&fsp[i]);

  04491	0f b6 84 24 d8
	00 00 00	 movzx	 eax, BYTE PTR swapend$[rsp]
  04499	85 c0		 test	 eax, eax
  0449b	74 1f		 je	 SHORT $LN271@cckd64_chk
  0449d	48 6b 84 24 90
	00 00 00 10	 imul	 rax, QWORD PTR i$[rsp], 16
  044a6	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR fsp$[rsp]
  044ae	48 03 c8	 add	 rcx, rax
  044b1	48 8b c1	 mov	 rax, rcx
  044b4	48 8b c8	 mov	 rcx, rax
  044b7	e8 00 00 00 00	 call	 cckd64_swapend_free
$LN271@cckd64_chk:

; 1645 :                     spctab[s].spc_typ = SPCTAB_FREE;

  044bc	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  044c4	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  044c8	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  044d0	c6 04 01 07	 mov	 BYTE PTR [rcx+rax], 7

; 1646 :                     spctab[s].spc_val = -1;

  044d4	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  044dc	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  044e0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  044e8	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 1647 :                     spctab[s].spc_off = fsp[i].fb_offnxt;

  044f0	48 6b 84 24 90
	00 00 00 10	 imul	 rax, QWORD PTR i$[rsp], 16
  044f9	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  04501	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  04505	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  0450d	48 8b bc 24 30
	01 00 00	 mov	 rdi, QWORD PTR fsp$[rsp]
  04515	48 8b 04 07	 mov	 rax, QWORD PTR [rdi+rax]
  04519	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax

; 1648 :                     spctab[s].spc_len =

  0451e	48 6b 84 24 90
	00 00 00 10	 imul	 rax, QWORD PTR i$[rsp], 16
  04527	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  0452f	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  04533	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  0453b	48 8b bc 24 30
	01 00 00	 mov	 rdi, QWORD PTR fsp$[rsp]
  04543	48 8b 44 07 08	 mov	 rax, QWORD PTR [rdi+rax+8]
  04548	48 89 44 0a 20	 mov	 QWORD PTR [rdx+rcx+32], rax
  0454d	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  04555	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  04559	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  04561	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  04565	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  0456d	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  04575	48 8b 44 07 20	 mov	 rax, QWORD PTR [rdi+rax+32]
  0457a	48 89 44 0a 18	 mov	 QWORD PTR [rdx+rcx+24], rax

; 1649 :                     spctab[s].spc_siz = fsp[i].fb_len;
; 1650 :                     /* Free space should be ascending */
; 1651 :                     if (spctab[s].spc_off < lopos
; 1652 :                      || spctab[s].spc_off + spctab[s].spc_siz > hipos)

  0457f	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  04587	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0458b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  04593	48 8b 94 24 48
	01 00 00	 mov	 rdx, QWORD PTR lopos$[rsp]
  0459b	48 39 54 01 10	 cmp	 QWORD PTR [rcx+rax+16], rdx
  045a0	72 3c		 jb	 SHORT $LN273@cckd64_chk
  045a2	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  045aa	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  045ae	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  045b6	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  045ba	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  045c2	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  045c7	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  045cf	48 03 44 0a 20	 add	 rax, QWORD PTR [rdx+rcx+32]
  045d4	48 3b 84 24 78
	01 00 00	 cmp	 rax, QWORD PTR hipos$[rsp]
  045dc	76 02		 jbe	 SHORT $LN272@cckd64_chk
$LN273@cckd64_chk:

; 1653 :                         break;

  045de	eb 4f		 jmp	 SHORT $LN29@cckd64_chk
$LN272@cckd64_chk:

; 1654 :                     lopos = spctab[s].spc_off + spctab[s].spc_siz;

  045e0	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  045e8	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  045ec	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  045f4	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  045f8	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  04600	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  04605	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  0460d	48 03 44 0a 20	 add	 rax, QWORD PTR [rdx+rcx+32]
  04612	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR lopos$[rsp], rax

; 1655 :                     s++;

  0461a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  04621	ff c0		 inc	 eax
  04623	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 1656 :                 } /* for each free space */

  0462a	e9 39 fe ff ff	 jmp	 $LN28@cckd64_chk
$LN29@cckd64_chk:

; 1657 :                 if (i >= cdevhdr.free_num)

  0462f	48 8b 84 24 c8
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+56]
  04637	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  0463f	7c 08		 jl	 SHORT $LN274@cckd64_chk

; 1658 :                     fsperr = 0;

  04641	c6 84 24 b8 00
	00 00 00	 mov	 BYTE PTR fsperr$[rsp], 0
$LN274@cckd64_chk:

; 1659 :             } /* new format free space */

  04649	e9 40 02 00 00	 jmp	 $LN268@cckd64_chk
$LN267@cckd64_chk:

; 1660 :             else
; 1661 :             {
; 1662 :                 /* old format free space */
; 1663 :                 off = cdevhdr.free_off;

  0464e	48 8b 84 24 b0
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+32]
  04656	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 1664 :                 len = CCKD64_FREEBLK_SIZE;

  0465e	48 c7 84 24 b0
	00 00 00 10 00
	00 00		 mov	 QWORD PTR len$[rsp], 16

; 1665 :                 for (i = 0; i < cdevhdr.free_num; i++)

  0466a	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  04676	eb 13		 jmp	 SHORT $LN33@cckd64_chk
$LN31@cckd64_chk:
  04678	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  04680	48 ff c0	 inc	 rax
  04683	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN33@cckd64_chk:
  0468b	48 8b 84 24 c8
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+56]
  04693	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  0469b	0f 8d c8 01 00
	00		 jge	 $LN32@cckd64_chk

; 1666 :                 {
; 1667 :                     if (off < lopos || off > hipos) break;

  046a1	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR lopos$[rsp]
  046a9	48 39 84 24 c0
	00 00 00	 cmp	 QWORD PTR off$[rsp], rax
  046b1	72 12		 jb	 SHORT $LN276@cckd64_chk
  046b3	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR hipos$[rsp]
  046bb	48 39 84 24 c0
	00 00 00	 cmp	 QWORD PTR off$[rsp], rax
  046c3	76 05		 jbe	 SHORT $LN275@cckd64_chk
$LN276@cckd64_chk:
  046c5	e9 9f 01 00 00	 jmp	 $LN32@cckd64_chk
$LN275@cckd64_chk:

; 1668 :                     if (lseek (fd, off, SEEK_SET) < 0)

  046ca	45 33 c0	 xor	 r8d, r8d
  046cd	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  046d5	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  046dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  046e2	48 85 c0	 test	 rax, rax
  046e5	7d 05		 jge	 SHORT $LN277@cckd64_chk

; 1669 :                         goto cdsk_lseek_error;

  046e7	e9 46 5e 00 00	 jmp	 $cdsk_lseek_error$830
$LN277@cckd64_chk:

; 1670 :                     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  046ec	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  046f3	83 38 00	 cmp	 DWORD PTR [rax], 0
  046f6	74 43		 je	 SHORT $LN278@cckd64_chk
  046f8	41 b8 01 00 00
	00		 mov	 r8d, 1
  046fe	33 d2		 xor	 edx, edx
  04700	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  04707	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0470d	48 89 84 24 d8
	06 00 00	 mov	 QWORD PTR tv2254[rsp], rax
  04715	b9 02 00 00 00	 mov	 ecx, 2
  0471a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  04720	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR tv2254[rsp]
  04728	4c 8b c1	 mov	 r8, rcx
  0472b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170277
  04732	48 8b c8	 mov	 rcx, rax
  04735	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN278@cckd64_chk:

; 1671 :                     if ((U64)(rc = read (fd, &freeblk, (unsigned int) len)) != len)

  0473b	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  04743	48 8d 94 24 70
	0b 00 00	 lea	 rdx, QWORD PTR freeblk$[rsp]
  0474b	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  04752	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  04758	89 84 24 bc 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  0475f	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  04767	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  0476f	74 05		 je	 SHORT $LN279@cckd64_chk

; 1672 :                         goto cdsk_read_error;

  04771	e9 0c 60 00 00	 jmp	 $cdsk_read_error$831
$LN279@cckd64_chk:

; 1673 :                     if (swapend) cckd64_swapend_free (&freeblk);

  04776	0f b6 84 24 d8
	00 00 00	 movzx	 eax, BYTE PTR swapend$[rsp]
  0477e	85 c0		 test	 eax, eax
  04780	74 0d		 je	 SHORT $LN280@cckd64_chk
  04782	48 8d 8c 24 70
	0b 00 00	 lea	 rcx, QWORD PTR freeblk$[rsp]
  0478a	e8 00 00 00 00	 call	 cckd64_swapend_free
$LN280@cckd64_chk:

; 1674 :                     spctab[s].spc_typ = SPCTAB_FREE;

  0478f	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  04797	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0479b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  047a3	c6 04 01 07	 mov	 BYTE PTR [rcx+rax], 7

; 1675 :                     spctab[s].spc_val = -1;

  047a7	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  047af	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  047b3	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  047bb	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 1676 :                     spctab[s].spc_off = off;

  047c3	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  047cb	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  047cf	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  047d7	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  047df	48 89 54 01 10	 mov	 QWORD PTR [rcx+rax+16], rdx

; 1677 :                     spctab[s].spc_len =

  047e4	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  047ec	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  047f0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  047f8	48 8b 94 24 78
	0b 00 00	 mov	 rdx, QWORD PTR freeblk$[rsp+8]
  04800	48 89 54 01 20	 mov	 QWORD PTR [rcx+rax+32], rdx
  04805	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0480d	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  04811	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  04819	48 8b 94 24 78
	0b 00 00	 mov	 rdx, QWORD PTR freeblk$[rsp+8]
  04821	48 89 54 01 18	 mov	 QWORD PTR [rcx+rax+24], rdx

; 1678 :                     spctab[s].spc_siz = freeblk.fb_len;
; 1679 :                     s++;

  04826	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  0482d	ff c0		 inc	 eax
  0482f	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 1680 :                     lopos = off + freeblk.fb_len;

  04836	48 8b 84 24 78
	0b 00 00	 mov	 rax, QWORD PTR freeblk$[rsp+8]
  0483e	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  04846	48 03 c8	 add	 rcx, rax
  04849	48 8b c1	 mov	 rax, rcx
  0484c	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR lopos$[rsp], rax

; 1681 :                     off = freeblk.fb_offnxt;

  04854	48 8b 84 24 70
	0b 00 00	 mov	 rax, QWORD PTR freeblk$[rsp]
  0485c	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 1682 :                 }

  04864	e9 0f fe ff ff	 jmp	 $LN31@cckd64_chk
$LN32@cckd64_chk:

; 1683 :                 if (i >= cdevhdr.free_num && freeblk.fb_offnxt == 0)

  04869	48 8b 84 24 c8
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+56]
  04871	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  04879	7c 13		 jl	 SHORT $LN281@cckd64_chk
  0487b	48 83 bc 24 70
	0b 00 00 00	 cmp	 QWORD PTR freeblk$[rsp], 0
  04884	75 08		 jne	 SHORT $LN281@cckd64_chk

; 1684 :                     fsperr = 0;

  04886	c6 84 24 b8 00
	00 00 00	 mov	 BYTE PTR fsperr$[rsp], 0
$LN281@cckd64_chk:
$LN268@cckd64_chk:

; 1685 :             } /* if old format free space */
; 1686 : 
; 1687 :             if (fsp) free(fsp);

  0488e	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR fsp$[rsp], 0
  04897	74 0e		 je	 SHORT $LN282@cckd64_chk
  04899	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR fsp$[rsp]
  048a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN282@cckd64_chk:

; 1688 :             fsp = NULL;

  048a7	48 c7 84 24 30
	01 00 00 00 00
	00 00		 mov	 QWORD PTR fsp$[rsp], 0

; 1689 : 
; 1690 :             /* Check for gaps/overlaps */
; 1691 :             qsort (spctab, s, sizeof(SPCTAB64), cdsk_spctab64_sort);

  048b3	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  048bb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:cdsk_spctab64_sort
  048c2	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  048c8	48 8b d0	 mov	 rdx, rax
  048cb	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  048d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 1692 :             for (i = 0; !fsperr && spctab[i].spc_typ != SPCTAB_EOF; i++)

  048d9	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  048e5	eb 13		 jmp	 SHORT $LN36@cckd64_chk
$LN34@cckd64_chk:
  048e7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  048ef	48 ff c0	 inc	 rax
  048f2	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN36@cckd64_chk:
  048fa	0f b6 84 24 b8
	00 00 00	 movzx	 eax, BYTE PTR fsperr$[rsp]
  04902	85 c0		 test	 eax, eax
  04904	75 71		 jne	 SHORT $LN35@cckd64_chk
  04906	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  0490f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  04917	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0491b	83 f8 08	 cmp	 eax, 8
  0491e	74 57		 je	 SHORT $LN35@cckd64_chk

; 1693 :                 if (spctab[i].spc_off + spctab[i].spc_siz != spctab[i+1].spc_off)

  04920	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  04929	48 6b 8c 24 90
	00 00 00 28	 imul	 rcx, QWORD PTR i$[rsp], 40 ; 00000028H
  04932	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  0493a	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  0493f	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  04947	48 03 44 0a 20	 add	 rax, QWORD PTR [rdx+rcx+32]
  0494c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  04954	48 ff c1	 inc	 rcx
  04957	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  0495b	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  04963	48 3b 44 0a 10	 cmp	 rax, QWORD PTR [rdx+rcx+16]
  04968	74 08		 je	 SHORT $LN283@cckd64_chk

; 1694 :                     fsperr = 1;

  0496a	c6 84 24 b8 00
	00 00 01	 mov	 BYTE PTR fsperr$[rsp], 1
$LN283@cckd64_chk:
  04972	e9 70 ff ff ff	 jmp	 $LN34@cckd64_chk
$LN35@cckd64_chk:

; 1695 :             break;

  04977	eb 05		 jmp	 SHORT $LN27@cckd64_chk

; 1696 :         } /* while (cdevhdr.free_off) */

  04979	e9 3f f9 ff ff	 jmp	 $LN26@cckd64_chk
$LN27@cckd64_chk:
$LN263@cckd64_chk:

; 1697 :     } /* if (level >= 1 && !fsperr) */
; 1698 : 
; 1699 :     if (fsperr)

  0497e	0f b6 84 24 b8
	00 00 00	 movzx	 eax, BYTE PTR fsperr$[rsp]
  04986	85 c0		 test	 eax, eax
  04988	0f 84 d1 01 00
	00		 je	 $LN284@cckd64_chk

; 1700 :     {
; 1701 :         // "%1d:%04X CCKD file %s: free space errors detected"
; 1702 :         if(dev->batch)

  0498e	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04996	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0499c	c1 e8 0a	 shr	 eax, 10
  0499f	83 e0 01	 and	 eax, 1
  049a2	85 c0		 test	 eax, eax
  049a4	0f 84 dd 00 00
	00		 je	 $LN285@cckd64_chk

; 1703 :             FWRMSG( stdout, HHC00368, "W", LCSS_DEVNUM, dev->filename );

  049aa	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  049b3	74 15		 je	 SHORT $LN656@cckd64_chk
  049b5	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  049bd	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  049c1	89 84 24 74 02
	00 00		 mov	 DWORD PTR tv2333[rsp], eax
  049c8	eb 0b		 jmp	 SHORT $LN657@cckd64_chk
$LN656@cckd64_chk:
  049ca	c7 84 24 74 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2333[rsp], 0
$LN657@cckd64_chk:
  049d5	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  049de	74 17		 je	 SHORT $LN658@cckd64_chk
  049e0	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  049e8	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  049ec	d1 f8		 sar	 eax, 1
  049ee	89 84 24 78 02
	00 00		 mov	 DWORD PTR tv2339[rsp], eax
  049f5	eb 0b		 jmp	 SHORT $LN659@cckd64_chk
$LN658@cckd64_chk:
  049f7	c7 84 24 78 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2339[rsp], 0
$LN659@cckd64_chk:
  04a02	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04a0a	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  04a10	48 89 84 24 e0
	06 00 00	 mov	 QWORD PTR tv2328[rsp], rax
  04a18	b9 01 00 00 00	 mov	 ecx, 1
  04a1d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  04a23	48 8b 8c 24 e0
	06 00 00	 mov	 rcx, QWORD PTR tv2328[rsp]
  04a2b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  04a30	8b 8c 24 74 02
	00 00		 mov	 ecx, DWORD PTR tv2333[rsp]
  04a37	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  04a3b	8b 8c 24 78 02
	00 00		 mov	 ecx, DWORD PTR tv2339[rsp]
  04a42	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  04a46	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170286
  04a4d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  04a52	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170287
  04a59	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  04a5e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  04a63	41 b9 03 00 00
	00		 mov	 r9d, 3
  04a69	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170288
  04a70	ba a7 06 00 00	 mov	 edx, 1703		; 000006a7H
  04a75	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170289
  04a7c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  04a82	e9 d8 00 00 00	 jmp	 $LN286@cckd64_chk
$LN285@cckd64_chk:

; 1704 :         else
; 1705 :             WRMSG( HHC00368, "W", LCSS_DEVNUM, dev->filename );

  04a87	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04a90	74 15		 je	 SHORT $LN660@cckd64_chk
  04a92	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04a9a	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  04a9e	89 84 24 7c 02
	00 00		 mov	 DWORD PTR tv2355[rsp], eax
  04aa5	eb 0b		 jmp	 SHORT $LN661@cckd64_chk
$LN660@cckd64_chk:
  04aa7	c7 84 24 7c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2355[rsp], 0
$LN661@cckd64_chk:
  04ab2	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04abb	74 17		 je	 SHORT $LN662@cckd64_chk
  04abd	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04ac5	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  04ac9	d1 f8		 sar	 eax, 1
  04acb	89 84 24 80 02
	00 00		 mov	 DWORD PTR tv2361[rsp], eax
  04ad2	eb 0b		 jmp	 SHORT $LN663@cckd64_chk
$LN662@cckd64_chk:
  04ad4	c7 84 24 80 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2361[rsp], 0
$LN663@cckd64_chk:
  04adf	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04ae7	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  04aed	48 89 84 24 e8
	06 00 00	 mov	 QWORD PTR tv2350[rsp], rax
  04af5	b9 01 00 00 00	 mov	 ecx, 1
  04afa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  04b00	48 8b 8c 24 e8
	06 00 00	 mov	 rcx, QWORD PTR tv2350[rsp]
  04b08	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  04b0d	8b 8c 24 7c 02
	00 00		 mov	 ecx, DWORD PTR tv2355[rsp]
  04b14	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  04b18	8b 8c 24 80 02
	00 00		 mov	 ecx, DWORD PTR tv2361[rsp]
  04b1f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  04b23	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170290
  04b2a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  04b2f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170291
  04b36	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  04b3b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  04b40	41 b9 03 00 00
	00		 mov	 r9d, 3
  04b46	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170292
  04b4d	ba a9 06 00 00	 mov	 edx, 1705		; 000006a9H
  04b52	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170293
  04b59	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN286@cckd64_chk:
$LN284@cckd64_chk:
$cdsk_space_check$836:

; 1706 :     }
; 1707 : 
; 1708 :     /*---------------------------------------------------------------
; 1709 :      * Read track headers/images
; 1710 :      *---------------------------------------------------------------*/
; 1711 : 
; 1712 : cdsk_space_check:
; 1713 : 
; 1714 :     if (level >= 2)

  04b5f	83 bc 24 c8 31
	04 00 02	 cmp	 DWORD PTR level$[rsp], 2
  04b67	0f 8c ff 0d 00
	00		 jl	 $LN287@cckd64_chk

; 1715 :     {
; 1716 :         for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  04b6d	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  04b79	eb 13		 jmp	 SHORT $LN39@cckd64_chk
$LN37@cckd64_chk:
  04b7b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  04b83	48 ff c0	 inc	 rax
  04b86	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN39@cckd64_chk:
  04b8e	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  04b97	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  04b9f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  04ba3	83 f8 08	 cmp	 eax, 8
  04ba6	0f 84 c0 0d 00
	00		 je	 $LN38@cckd64_chk

; 1717 :         {
; 1718 :             if (spctab[i].spc_typ != trktyp) continue;

  04bac	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  04bb5	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  04bbd	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  04bc1	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  04bc9	3b c1		 cmp	 eax, ecx
  04bcb	74 02		 je	 SHORT $LN288@cckd64_chk
  04bcd	eb ac		 jmp	 SHORT $LN37@cckd64_chk
$LN288@cckd64_chk:

; 1719 : 
; 1720 :             /* read the header or image depending on the check level */
; 1721 :             off = spctab[i].spc_off;

  04bcf	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  04bd8	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  04be0	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  04be5	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 1722 :             if ( lseek (fd, off, SEEK_SET) < 0 )

  04bed	45 33 c0	 xor	 r8d, r8d
  04bf0	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  04bf8	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  04bff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  04c05	48 85 c0	 test	 rax, rax
  04c08	7d 05		 jge	 SHORT $LN289@cckd64_chk

; 1723 :                 goto cdsk_lseek_error;

  04c0a	e9 23 59 00 00	 jmp	 $cdsk_lseek_error$830
$LN289@cckd64_chk:

; 1724 :             gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  04c0f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  04c16	83 38 00	 cmp	 DWORD PTR [rax], 0
  04c19	74 43		 je	 SHORT $LN290@cckd64_chk
  04c1b	41 b8 01 00 00
	00		 mov	 r8d, 1
  04c21	33 d2		 xor	 edx, edx
  04c23	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  04c2a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  04c30	48 89 84 24 f0
	06 00 00	 mov	 QWORD PTR tv2395[rsp], rax
  04c38	b9 02 00 00 00	 mov	 ecx, 2
  04c3d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  04c43	48 8b 8c 24 f0
	06 00 00	 mov	 rcx, QWORD PTR tv2395[rsp]
  04c4b	4c 8b c1	 mov	 r8, rcx
  04c4e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170298
  04c55	48 8b c8	 mov	 rcx, rax
  04c58	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN290@cckd64_chk:

; 1725 :             len = level < 3 ? CKD_TRKHDR_SIZE : spctab[i].spc_len;

  04c5e	83 bc 24 c8 31
	04 00 03	 cmp	 DWORD PTR level$[rsp], 3
  04c66	7d 0e		 jge	 SHORT $LN664@cckd64_chk
  04c68	48 c7 84 24 88
	04 00 00 05 00
	00 00		 mov	 QWORD PTR tv2407[rsp], 5
  04c74	eb 1e		 jmp	 SHORT $LN665@cckd64_chk
$LN664@cckd64_chk:
  04c76	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  04c7f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  04c87	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  04c8c	48 89 84 24 88
	04 00 00	 mov	 QWORD PTR tv2407[rsp], rax
$LN665@cckd64_chk:
  04c94	48 8b 84 24 88
	04 00 00	 mov	 rax, QWORD PTR tv2407[rsp]
  04c9c	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR len$[rsp], rax

; 1726 :             if ((U64)(rc = read (fd, buf, (unsigned int) len)) != len)

  04ca4	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  04cac	48 8d 94 24 90
	31 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  04cb4	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  04cbb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  04cc1	89 84 24 bc 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  04cc8	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  04cd0	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  04cd8	74 05		 je	 SHORT $LN291@cckd64_chk

; 1727 :                 goto cdsk_read_error;

  04cda	e9 a3 5a 00 00	 jmp	 $cdsk_read_error$831
$LN291@cckd64_chk:

; 1728 : 
; 1729 :             /* Extract header info */
; 1730 :             comp = buf[0];

  04cdf	b8 01 00 00 00	 mov	 eax, 1
  04ce4	48 6b c0 00	 imul	 rax, rax, 0
  04ce8	0f b6 84 04 90
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  04cf0	89 84 24 fc 00
	00 00		 mov	 DWORD PTR comp$[rsp], eax

; 1731 :             cyl  = fetch_hw (buf + 1);

  04cf7	48 8d 84 24 91
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+1]
  04cff	48 8b c8	 mov	 rcx, rax
  04d02	e8 00 00 00 00	 call	 fetch_hw_noswap
  04d07	0f b7 c8	 movzx	 ecx, ax
  04d0a	e8 00 00 00 00	 call	 _byteswap_ushort
  04d0f	0f b7 c0	 movzx	 eax, ax
  04d12	89 84 24 50 01
	00 00		 mov	 DWORD PTR cyl$[rsp], eax

; 1732 :             head = fetch_hw (buf + 3);

  04d19	48 8d 84 24 93
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+3]
  04d21	48 8b c8	 mov	 rcx, rax
  04d24	e8 00 00 00 00	 call	 fetch_hw_noswap
  04d29	0f b7 c8	 movzx	 ecx, ax
  04d2c	e8 00 00 00 00	 call	 _byteswap_ushort
  04d31	0f b7 c0	 movzx	 eax, ax
  04d34	89 84 24 54 01
	00 00		 mov	 DWORD PTR head$[rsp], eax

; 1733 :             trk  = cyl * heads + head;

  04d3b	8b 84 24 50 01
	00 00		 mov	 eax, DWORD PTR cyl$[rsp]
  04d42	0f af 84 24 dc
	00 00 00	 imul	 eax, DWORD PTR heads$[rsp]
  04d4a	03 84 24 54 01
	00 00		 add	 eax, DWORD PTR head$[rsp]
  04d51	89 84 24 e8 00
	00 00		 mov	 DWORD PTR trk$[rsp], eax

; 1734 : 
; 1735 :             /* Validate header info */
; 1736 :             if (compmask[comp] == 0xff
; 1737 :              || cyl >= cyls || head >= heads
; 1738 :              || trk != spctab[i].spc_val)

  04d58	48 63 84 24 fc
	00 00 00	 movsxd	 rax, DWORD PTR comp$[rsp]
  04d60	0f b6 84 04 10
	30 00 00	 movzx	 eax, BYTE PTR compmask$[rsp+rax]
  04d68	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  04d6d	74 42		 je	 SHORT $LN293@cckd64_chk
  04d6f	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cyls$[rsp]
  04d76	39 84 24 50 01
	00 00		 cmp	 DWORD PTR cyl$[rsp], eax
  04d7d	7d 32		 jge	 SHORT $LN293@cckd64_chk
  04d7f	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR heads$[rsp]
  04d86	39 84 24 54 01
	00 00		 cmp	 DWORD PTR head$[rsp], eax
  04d8d	7d 22		 jge	 SHORT $LN293@cckd64_chk
  04d8f	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  04d98	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  04da0	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  04da4	39 84 24 e8 00
	00 00		 cmp	 DWORD PTR trk$[rsp], eax
  04dab	0f 84 27 06 00
	00		 je	 $LN292@cckd64_chk
$LN293@cckd64_chk:

; 1739 :             {
; 1740 :                 if(dev->batch)

  04db1	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04db9	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  04dbf	c1 e8 0a	 shr	 eax, 10
  04dc2	83 e0 01	 and	 eax, 1
  04dc5	85 c0		 test	 eax, eax
  04dc7	0f 84 e0 01 00
	00		 je	 $LN294@cckd64_chk

; 1741 :                     FWRMSG( stdout, HHC00369, "W", LCSS_DEVNUM, dev->filename,

  04dcd	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04dd6	74 15		 je	 SHORT $LN666@cckd64_chk
  04dd8	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04de0	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  04de4	89 84 24 84 02
	00 00		 mov	 DWORD PTR tv2479[rsp], eax
  04deb	eb 0b		 jmp	 SHORT $LN667@cckd64_chk
$LN666@cckd64_chk:
  04ded	c7 84 24 84 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2479[rsp], 0
$LN667@cckd64_chk:
  04df8	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04e01	74 17		 je	 SHORT $LN668@cckd64_chk
  04e03	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04e0b	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  04e0f	d1 f8		 sar	 eax, 1
  04e11	89 84 24 88 02
	00 00		 mov	 DWORD PTR tv2485[rsp], eax
  04e18	eb 0b		 jmp	 SHORT $LN669@cckd64_chk
$LN668@cckd64_chk:
  04e1a	c7 84 24 88 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2485[rsp], 0
$LN669@cckd64_chk:
  04e25	b8 01 00 00 00	 mov	 eax, 1
  04e2a	48 6b c0 04	 imul	 rax, rax, 4
  04e2e	0f b6 84 04 90
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  04e36	89 84 24 24 04
	00 00		 mov	 DWORD PTR tv2448[rsp], eax
  04e3d	b9 01 00 00 00	 mov	 ecx, 1
  04e42	48 6b c9 03	 imul	 rcx, rcx, 3
  04e46	0f b6 8c 0c 90
	31 00 00	 movzx	 ecx, BYTE PTR buf$[rsp+rcx]
  04e4e	89 8c 24 28 04
	00 00		 mov	 DWORD PTR tv2452[rsp], ecx
  04e55	ba 01 00 00 00	 mov	 edx, 1
  04e5a	48 6b d2 02	 imul	 rdx, rdx, 2
  04e5e	0f b6 94 14 90
	31 00 00	 movzx	 edx, BYTE PTR buf$[rsp+rdx]
  04e66	89 94 24 2c 04
	00 00		 mov	 DWORD PTR tv2456[rsp], edx
  04e6d	bf 01 00 00 00	 mov	 edi, 1
  04e72	48 6b ff 01	 imul	 rdi, rdi, 1
  04e76	0f b6 bc 3c 90
	31 00 00	 movzx	 edi, BYTE PTR buf$[rsp+rdi]
  04e7e	41 b8 01 00 00
	00		 mov	 r8d, 1
  04e84	4d 6b c0 00	 imul	 r8, r8, 0
  04e88	46 0f b6 84 04
	90 31 00 00	 movzx	 r8d, BYTE PTR buf$[rsp+r8]
  04e91	44 89 84 24 30
	04 00 00	 mov	 DWORD PTR tv2464[rsp], r8d
  04e99	4c 6b 8c 24 90
	00 00 00 28	 imul	 r9, QWORD PTR i$[rsp], 40 ; 00000028H
  04ea2	4c 89 8c 24 f8
	06 00 00	 mov	 QWORD PTR tv2467[rsp], r9
  04eaa	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  04eb2	e8 00 00 00 00	 call	 spc_typ_to_str
  04eb7	48 89 84 24 00
	07 00 00	 mov	 QWORD PTR tv2471[rsp], rax
  04ebf	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  04ec7	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  04ece	48 89 8c 24 08
	07 00 00	 mov	 QWORD PTR tv2474[rsp], rcx
  04ed6	b9 01 00 00 00	 mov	 ecx, 1
  04edb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  04ee1	8b 8c 24 24 04
	00 00		 mov	 ecx, DWORD PTR tv2448[rsp]
  04ee8	89 8c 24 88 00
	00 00		 mov	 DWORD PTR [rsp+136], ecx
  04eef	8b 8c 24 28 04
	00 00		 mov	 ecx, DWORD PTR tv2452[rsp]
  04ef6	89 8c 24 80 00
	00 00		 mov	 DWORD PTR [rsp+128], ecx
  04efd	8b 8c 24 2c 04
	00 00		 mov	 ecx, DWORD PTR tv2456[rsp]
  04f04	89 4c 24 78	 mov	 DWORD PTR [rsp+120], ecx
  04f08	89 7c 24 70	 mov	 DWORD PTR [rsp+112], edi
  04f0c	8b 8c 24 30 04
	00 00		 mov	 ecx, DWORD PTR tv2464[rsp]
  04f13	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  04f17	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  04f1f	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  04f24	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  04f2c	48 8b 94 24 f8
	06 00 00	 mov	 rdx, QWORD PTR tv2467[rsp]
  04f34	8b 4c 11 04	 mov	 ecx, DWORD PTR [rcx+rdx+4]
  04f38	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  04f3c	48 8b 8c 24 00
	07 00 00	 mov	 rcx, QWORD PTR tv2471[rsp]
  04f44	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  04f49	48 8b 8c 24 08
	07 00 00	 mov	 rcx, QWORD PTR tv2474[rsp]
  04f51	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  04f56	8b 8c 24 84 02
	00 00		 mov	 ecx, DWORD PTR tv2479[rsp]
  04f5d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  04f61	8b 8c 24 88 02
	00 00		 mov	 ecx, DWORD PTR tv2485[rsp]
  04f68	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  04f6c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170304
  04f73	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  04f78	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170305
  04f7f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  04f84	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  04f89	41 b9 03 00 00
	00		 mov	 r9d, 3
  04f8f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170306
  04f96	ba cf 06 00 00	 mov	 edx, 1743		; 000006cfH
  04f9b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170307
  04fa2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  04fa8	e9 db 01 00 00	 jmp	 $LN295@cckd64_chk
$LN294@cckd64_chk:

; 1742 :                             spc_typ_to_str( trktyp ), spctab[i].spc_val, off,
; 1743 :                             buf[0],buf[1],buf[2],buf[3],buf[4] );
; 1744 :                 else
; 1745 :                     WRMSG( HHC00369, "W", LCSS_DEVNUM, dev->filename,

  04fad	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04fb6	74 15		 je	 SHORT $LN670@cckd64_chk
  04fb8	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04fc0	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  04fc4	89 84 24 8c 02
	00 00		 mov	 DWORD PTR tv2529[rsp], eax
  04fcb	eb 0b		 jmp	 SHORT $LN671@cckd64_chk
$LN670@cckd64_chk:
  04fcd	c7 84 24 8c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2529[rsp], 0
$LN671@cckd64_chk:
  04fd8	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04fe1	74 17		 je	 SHORT $LN672@cckd64_chk
  04fe3	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04feb	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  04fef	d1 f8		 sar	 eax, 1
  04ff1	89 84 24 90 02
	00 00		 mov	 DWORD PTR tv2535[rsp], eax
  04ff8	eb 0b		 jmp	 SHORT $LN673@cckd64_chk
$LN672@cckd64_chk:
  04ffa	c7 84 24 90 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2535[rsp], 0
$LN673@cckd64_chk:
  05005	b8 01 00 00 00	 mov	 eax, 1
  0500a	48 6b c0 04	 imul	 rax, rax, 4
  0500e	0f b6 84 04 90
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  05016	89 84 24 34 04
	00 00		 mov	 DWORD PTR tv2498[rsp], eax
  0501d	b9 01 00 00 00	 mov	 ecx, 1
  05022	48 6b c9 03	 imul	 rcx, rcx, 3
  05026	0f b6 8c 0c 90
	31 00 00	 movzx	 ecx, BYTE PTR buf$[rsp+rcx]
  0502e	89 8c 24 38 04
	00 00		 mov	 DWORD PTR tv2502[rsp], ecx
  05035	ba 01 00 00 00	 mov	 edx, 1
  0503a	48 6b d2 02	 imul	 rdx, rdx, 2
  0503e	0f b6 94 14 90
	31 00 00	 movzx	 edx, BYTE PTR buf$[rsp+rdx]
  05046	89 94 24 3c 04
	00 00		 mov	 DWORD PTR tv2506[rsp], edx
  0504d	bf 01 00 00 00	 mov	 edi, 1
  05052	48 6b ff 01	 imul	 rdi, rdi, 1
  05056	0f b6 bc 3c 90
	31 00 00	 movzx	 edi, BYTE PTR buf$[rsp+rdi]
  0505e	41 b8 01 00 00
	00		 mov	 r8d, 1
  05064	4d 6b c0 00	 imul	 r8, r8, 0
  05068	46 0f b6 84 04
	90 31 00 00	 movzx	 r8d, BYTE PTR buf$[rsp+r8]
  05071	44 89 84 24 40
	04 00 00	 mov	 DWORD PTR tv2514[rsp], r8d
  05079	4c 6b 8c 24 90
	00 00 00 28	 imul	 r9, QWORD PTR i$[rsp], 40 ; 00000028H
  05082	4c 89 8c 24 10
	07 00 00	 mov	 QWORD PTR tv2517[rsp], r9
  0508a	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  05092	e8 00 00 00 00	 call	 spc_typ_to_str
  05097	48 89 84 24 18
	07 00 00	 mov	 QWORD PTR tv2521[rsp], rax
  0509f	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  050a7	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  050ae	48 89 8c 24 20
	07 00 00	 mov	 QWORD PTR tv2524[rsp], rcx
  050b6	b9 01 00 00 00	 mov	 ecx, 1
  050bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  050c1	8b 8c 24 34 04
	00 00		 mov	 ecx, DWORD PTR tv2498[rsp]
  050c8	89 8c 24 88 00
	00 00		 mov	 DWORD PTR [rsp+136], ecx
  050cf	8b 8c 24 38 04
	00 00		 mov	 ecx, DWORD PTR tv2502[rsp]
  050d6	89 8c 24 80 00
	00 00		 mov	 DWORD PTR [rsp+128], ecx
  050dd	8b 8c 24 3c 04
	00 00		 mov	 ecx, DWORD PTR tv2506[rsp]
  050e4	89 4c 24 78	 mov	 DWORD PTR [rsp+120], ecx
  050e8	89 7c 24 70	 mov	 DWORD PTR [rsp+112], edi
  050ec	8b 8c 24 40 04
	00 00		 mov	 ecx, DWORD PTR tv2514[rsp]
  050f3	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  050f7	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  050ff	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  05104	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0510c	48 8b 94 24 10
	07 00 00	 mov	 rdx, QWORD PTR tv2517[rsp]
  05114	8b 4c 11 04	 mov	 ecx, DWORD PTR [rcx+rdx+4]
  05118	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  0511c	48 8b 8c 24 18
	07 00 00	 mov	 rcx, QWORD PTR tv2521[rsp]
  05124	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  05129	48 8b 8c 24 20
	07 00 00	 mov	 rcx, QWORD PTR tv2524[rsp]
  05131	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  05136	8b 8c 24 8c 02
	00 00		 mov	 ecx, DWORD PTR tv2529[rsp]
  0513d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  05141	8b 8c 24 90 02
	00 00		 mov	 ecx, DWORD PTR tv2535[rsp]
  05148	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0514c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170308
  05153	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  05158	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170309
  0515f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  05164	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  05169	41 b9 03 00 00
	00		 mov	 r9d, 3
  0516f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170310
  05176	ba d3 06 00 00	 mov	 edx, 1747		; 000006d3H
  0517b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170311
  05182	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN295@cckd64_chk:

; 1746 :                            spc_typ_to_str( trktyp ), spctab[i].spc_val, off,
; 1747 :                            buf[0],buf[1],buf[2],buf[3],buf[4] );
; 1748 : 
; 1749 :                 /* recover this track */
; 1750 :                 rcvtab[spctab[i].spc_val] = recovery = 1;

  05188	c6 84 24 b9 00
	00 00 01	 mov	 BYTE PTR recovery$[rsp], 1
  05190	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  05199	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  051a1	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  051a6	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  051ae	0f b6 94 24 b9
	00 00 00	 movzx	 edx, BYTE PTR recovery$[rsp]
  051b6	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 1751 :                 spctab[i].spc_typ = SPCTAB_NONE;

  051b9	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  051c2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  051ca	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 1752 : 
; 1753 :                 /* Force level 3 checking */
; 1754 :                 if (level < 3)

  051ce	83 bc 24 c8 31
	04 00 03	 cmp	 DWORD PTR level$[rsp], 3
  051d6	0f 8d f7 01 00
	00		 jge	 $LN296@cckd64_chk

; 1755 :                 {
; 1756 :                     level = 3;

  051dc	c7 84 24 c8 31
	04 00 03 00 00
	00		 mov	 DWORD PTR level$[rsp], 3

; 1757 :                     if(dev->batch)

  051e7	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  051ef	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  051f5	c1 e8 0a	 shr	 eax, 10
  051f8	83 e0 01	 and	 eax, 1
  051fb	85 c0		 test	 eax, eax
  051fd	0f 84 e8 00 00
	00		 je	 $LN297@cckd64_chk

; 1758 :                         FWRMSG( stdout, HHC00364, "W", LCSS_DEVNUM,

  05203	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0520c	74 15		 je	 SHORT $LN674@cckd64_chk
  0520e	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  05216	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0521a	89 84 24 94 02
	00 00		 mov	 DWORD PTR tv2598[rsp], eax
  05221	eb 0b		 jmp	 SHORT $LN675@cckd64_chk
$LN674@cckd64_chk:
  05223	c7 84 24 94 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2598[rsp], 0
$LN675@cckd64_chk:
  0522e	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  05237	74 17		 je	 SHORT $LN676@cckd64_chk
  05239	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  05241	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  05245	d1 f8		 sar	 eax, 1
  05247	89 84 24 98 02
	00 00		 mov	 DWORD PTR tv2604[rsp], eax
  0524e	eb 0b		 jmp	 SHORT $LN677@cckd64_chk
$LN676@cckd64_chk:
  05250	c7 84 24 98 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2604[rsp], 0
$LN677@cckd64_chk:
  0525b	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  05263	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  05269	48 89 84 24 28
	07 00 00	 mov	 QWORD PTR tv2593[rsp], rax
  05271	b9 01 00 00 00	 mov	 ecx, 1
  05276	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0527c	8b 8c 24 c8 31
	04 00		 mov	 ecx, DWORD PTR level$[rsp]
  05283	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  05287	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR tv2593[rsp]
  0528f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  05294	8b 8c 24 94 02
	00 00		 mov	 ecx, DWORD PTR tv2598[rsp]
  0529b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0529f	8b 8c 24 98 02
	00 00		 mov	 ecx, DWORD PTR tv2604[rsp]
  052a6	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  052aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170315
  052b1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  052b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170316
  052bd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  052c2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  052c7	41 b9 03 00 00
	00		 mov	 r9d, 3
  052cd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170317
  052d4	ba df 06 00 00	 mov	 edx, 1759		; 000006dfH
  052d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170318
  052e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  052e6	e9 e3 00 00 00	 jmp	 $LN298@cckd64_chk
$LN297@cckd64_chk:

; 1759 :                                 dev->filename, level );
; 1760 :                     else
; 1761 :                         WRMSG( HHC00364, "W", LCSS_DEVNUM, dev->filename, level );

  052eb	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  052f4	74 15		 je	 SHORT $LN678@cckd64_chk
  052f6	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  052fe	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  05302	89 84 24 9c 02
	00 00		 mov	 DWORD PTR tv2621[rsp], eax
  05309	eb 0b		 jmp	 SHORT $LN679@cckd64_chk
$LN678@cckd64_chk:
  0530b	c7 84 24 9c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2621[rsp], 0
$LN679@cckd64_chk:
  05316	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0531f	74 17		 je	 SHORT $LN680@cckd64_chk
  05321	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  05329	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0532d	d1 f8		 sar	 eax, 1
  0532f	89 84 24 a0 02
	00 00		 mov	 DWORD PTR tv2627[rsp], eax
  05336	eb 0b		 jmp	 SHORT $LN681@cckd64_chk
$LN680@cckd64_chk:
  05338	c7 84 24 a0 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2627[rsp], 0
$LN681@cckd64_chk:
  05343	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0534b	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  05351	48 89 84 24 30
	07 00 00	 mov	 QWORD PTR tv2616[rsp], rax
  05359	b9 01 00 00 00	 mov	 ecx, 1
  0535e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  05364	8b 8c 24 c8 31
	04 00		 mov	 ecx, DWORD PTR level$[rsp]
  0536b	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  0536f	48 8b 8c 24 30
	07 00 00	 mov	 rcx, QWORD PTR tv2616[rsp]
  05377	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0537c	8b 8c 24 9c 02
	00 00		 mov	 ecx, DWORD PTR tv2621[rsp]
  05383	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  05387	8b 8c 24 a0 02
	00 00		 mov	 ecx, DWORD PTR tv2627[rsp]
  0538e	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  05392	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170319
  05399	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0539e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170320
  053a5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  053aa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  053af	41 b9 03 00 00
	00		 mov	 r9d, 3
  053b5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170321
  053bc	ba e1 06 00 00	 mov	 edx, 1761		; 000006e1H
  053c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170322
  053c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN298@cckd64_chk:

; 1762 :                     goto cdsk_space_check;

  053ce	e9 8c f7 ff ff	 jmp	 $cdsk_space_check$836
$LN296@cckd64_chk:

; 1763 :                 }
; 1764 :                 continue;

  053d3	e9 a3 f7 ff ff	 jmp	 $LN37@cckd64_chk
$LN292@cckd64_chk:

; 1765 :             } /* if invalid header info */
; 1766 : 
; 1767 :             /* Check if compression supported */
; 1768 :             if (compmask[comp])

  053d8	48 63 84 24 fc
	00 00 00	 movsxd	 rax, DWORD PTR comp$[rsp]
  053e0	0f b6 84 04 10
	30 00 00	 movzx	 eax, BYTE PTR compmask$[rsp+rax]
  053e8	85 c0		 test	 eax, eax
  053ea	0f 84 8e 02 00
	00		 je	 $LN299@cckd64_chk

; 1769 :             {
; 1770 :                 comperrs = 1;

  053f0	c6 84 24 19 01
	00 00 01	 mov	 BYTE PTR comperrs$[rsp], 1

; 1771 :                 if(dev->batch)

  053f8	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  05400	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  05406	c1 e8 0a	 shr	 eax, 10
  05409	83 e0 01	 and	 eax, 1
  0540c	85 c0		 test	 eax, eax
  0540e	0f 84 35 01 00
	00		 je	 $LN300@cckd64_chk

; 1772 :                     FWRMSG( stdout, HHC00370, "W", LCSS_DEVNUM, dev->filename,

  05414	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0541d	74 15		 je	 SHORT $LN682@cckd64_chk
  0541f	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  05427	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0542b	89 84 24 a4 02
	00 00		 mov	 DWORD PTR tv2662[rsp], eax
  05432	eb 0b		 jmp	 SHORT $LN683@cckd64_chk
$LN682@cckd64_chk:
  05434	c7 84 24 a4 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2662[rsp], 0
$LN683@cckd64_chk:
  0543f	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  05448	74 17		 je	 SHORT $LN684@cckd64_chk
  0544a	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  05452	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  05456	d1 f8		 sar	 eax, 1
  05458	89 84 24 a8 02
	00 00		 mov	 DWORD PTR tv2668[rsp], eax
  0545f	eb 0b		 jmp	 SHORT $LN685@cckd64_chk
$LN684@cckd64_chk:
  05461	c7 84 24 a8 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2668[rsp], 0
$LN685@cckd64_chk:
  0546c	48 63 84 24 fc
	00 00 00	 movsxd	 rax, DWORD PTR comp$[rsp]
  05474	0f b6 8c 04 10
	30 00 00	 movzx	 ecx, BYTE PTR compmask$[rsp+rax]
  0547c	e8 00 00 00 00	 call	 comp_to_str
  05481	48 89 84 24 38
	07 00 00	 mov	 QWORD PTR tv2647[rsp], rax
  05489	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  05491	e8 00 00 00 00	 call	 spc_typ_to_str
  05496	48 89 84 24 40
	07 00 00	 mov	 QWORD PTR tv2654[rsp], rax
  0549e	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  054a6	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  054ad	48 89 8c 24 48
	07 00 00	 mov	 QWORD PTR tv2657[rsp], rcx
  054b5	b9 01 00 00 00	 mov	 ecx, 1
  054ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  054c0	48 8b 8c 24 38
	07 00 00	 mov	 rcx, QWORD PTR tv2647[rsp]
  054c8	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  054cd	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  054d4	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  054d8	48 8b 8c 24 40
	07 00 00	 mov	 rcx, QWORD PTR tv2654[rsp]
  054e0	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  054e5	48 8b 8c 24 48
	07 00 00	 mov	 rcx, QWORD PTR tv2657[rsp]
  054ed	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  054f2	8b 8c 24 a4 02
	00 00		 mov	 ecx, DWORD PTR tv2662[rsp]
  054f9	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  054fd	8b 8c 24 a8 02
	00 00		 mov	 ecx, DWORD PTR tv2668[rsp]
  05504	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  05508	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170326
  0550f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  05514	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170327
  0551b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  05520	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  05525	41 b9 03 00 00
	00		 mov	 r9d, 3
  0552b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170328
  05532	ba ed 06 00 00	 mov	 edx, 1773		; 000006edH
  05537	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170329
  0553e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  05544	e9 30 01 00 00	 jmp	 $LN301@cckd64_chk
$LN300@cckd64_chk:

; 1773 :                             spc_typ_to_str( trktyp ), trk, comp_to_str( compmask[ comp ]));
; 1774 :                 else
; 1775 :                     WRMSG( HHC00370, "W", LCSS_DEVNUM, dev->filename,

  05549	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  05552	74 15		 je	 SHORT $LN686@cckd64_chk
  05554	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0555c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  05560	89 84 24 ac 02
	00 00		 mov	 DWORD PTR tv2694[rsp], eax
  05567	eb 0b		 jmp	 SHORT $LN687@cckd64_chk
$LN686@cckd64_chk:
  05569	c7 84 24 ac 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2694[rsp], 0
$LN687@cckd64_chk:
  05574	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0557d	74 17		 je	 SHORT $LN688@cckd64_chk
  0557f	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  05587	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0558b	d1 f8		 sar	 eax, 1
  0558d	89 84 24 b0 02
	00 00		 mov	 DWORD PTR tv2700[rsp], eax
  05594	eb 0b		 jmp	 SHORT $LN689@cckd64_chk
$LN688@cckd64_chk:
  05596	c7 84 24 b0 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2700[rsp], 0
$LN689@cckd64_chk:
  055a1	48 63 84 24 fc
	00 00 00	 movsxd	 rax, DWORD PTR comp$[rsp]
  055a9	0f b6 8c 04 10
	30 00 00	 movzx	 ecx, BYTE PTR compmask$[rsp+rax]
  055b1	e8 00 00 00 00	 call	 comp_to_str
  055b6	48 89 84 24 50
	07 00 00	 mov	 QWORD PTR tv2679[rsp], rax
  055be	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  055c6	e8 00 00 00 00	 call	 spc_typ_to_str
  055cb	48 89 84 24 58
	07 00 00	 mov	 QWORD PTR tv2686[rsp], rax
  055d3	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  055db	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  055e2	48 89 8c 24 60
	07 00 00	 mov	 QWORD PTR tv2689[rsp], rcx
  055ea	b9 01 00 00 00	 mov	 ecx, 1
  055ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  055f5	48 8b 8c 24 50
	07 00 00	 mov	 rcx, QWORD PTR tv2679[rsp]
  055fd	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  05602	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  05609	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  0560d	48 8b 8c 24 58
	07 00 00	 mov	 rcx, QWORD PTR tv2686[rsp]
  05615	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0561a	48 8b 8c 24 60
	07 00 00	 mov	 rcx, QWORD PTR tv2689[rsp]
  05622	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  05627	8b 8c 24 ac 02
	00 00		 mov	 ecx, DWORD PTR tv2694[rsp]
  0562e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  05632	8b 8c 24 b0 02
	00 00		 mov	 ecx, DWORD PTR tv2700[rsp]
  05639	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0563d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170330
  05644	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  05649	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170331
  05650	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  05655	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0565a	41 b9 03 00 00
	00		 mov	 r9d, 3
  05660	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170332
  05667	ba f0 06 00 00	 mov	 edx, 1776		; 000006f0H
  0566c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170333
  05673	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN301@cckd64_chk:

; 1776 :                            spc_typ_to_str( trktyp ), trk, comp_to_str( compmask[ comp ]));
; 1777 :                 continue;

  05679	e9 fd f4 ff ff	 jmp	 $LN37@cckd64_chk
$LN299@cckd64_chk:

; 1778 :             }
; 1779 : 
; 1780 :             /* Validate the space if check level 3 */
; 1781 :             if (level > 2)

  0567e	83 bc 24 c8 31
	04 00 02	 cmp	 DWORD PTR level$[rsp], 2
  05686	0f 8e db 02 00
	00		 jle	 $LN302@cckd64_chk

; 1782 :             {
; 1783 :                 if (!cdsk_valid_trk (trk, buf, heads, (int) len))

  0568c	44 8b 8c 24 b0
	00 00 00	 mov	 r9d, DWORD PTR len$[rsp]
  05694	44 8b 84 24 dc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  0569c	48 8d 94 24 90
	31 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  056a4	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  056ab	e8 00 00 00 00	 call	 cdsk_valid_trk
  056b0	85 c0		 test	 eax, eax
  056b2	0f 85 9b 02 00
	00		 jne	 $LN303@cckd64_chk

; 1784 :                 {
; 1785 :                     if(dev->batch)

  056b8	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  056c0	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  056c6	c1 e8 0a	 shr	 eax, 10
  056c9	83 e0 01	 and	 eax, 1
  056cc	85 c0		 test	 eax, eax
  056ce	0f 84 25 01 00
	00		 je	 $LN305@cckd64_chk

; 1786 :                         // "%1d:%04X CCKD file %s: %s[%d] offset 0x%16.16"PRIX64" len %"PRId64" validation error"
; 1787 :                         FWRMSG( stdout, HHC00371, "W", LCSS_DEVNUM, dev->filename,

  056d4	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  056dd	74 15		 je	 SHORT $LN690@cckd64_chk
  056df	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  056e7	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  056eb	89 84 24 b4 02
	00 00		 mov	 DWORD PTR tv2733[rsp], eax
  056f2	eb 0b		 jmp	 SHORT $LN691@cckd64_chk
$LN690@cckd64_chk:
  056f4	c7 84 24 b4 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2733[rsp], 0
$LN691@cckd64_chk:
  056ff	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  05708	74 17		 je	 SHORT $LN692@cckd64_chk
  0570a	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  05712	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  05716	d1 f8		 sar	 eax, 1
  05718	89 84 24 b8 02
	00 00		 mov	 DWORD PTR tv2739[rsp], eax
  0571f	eb 0b		 jmp	 SHORT $LN693@cckd64_chk
$LN692@cckd64_chk:
  05721	c7 84 24 b8 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2739[rsp], 0
$LN693@cckd64_chk:
  0572c	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  05734	e8 00 00 00 00	 call	 spc_typ_to_str
  05739	48 89 84 24 68
	07 00 00	 mov	 QWORD PTR tv2725[rsp], rax
  05741	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  05749	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  05750	48 89 8c 24 70
	07 00 00	 mov	 QWORD PTR tv2728[rsp], rcx
  05758	b9 01 00 00 00	 mov	 ecx, 1
  0575d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  05763	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  0576b	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  05770	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  05778	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0577d	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  05784	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  05788	48 8b 8c 24 68
	07 00 00	 mov	 rcx, QWORD PTR tv2725[rsp]
  05790	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  05795	48 8b 8c 24 70
	07 00 00	 mov	 rcx, QWORD PTR tv2728[rsp]
  0579d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  057a2	8b 8c 24 b4 02
	00 00		 mov	 ecx, DWORD PTR tv2733[rsp]
  057a9	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  057ad	8b 8c 24 b8 02
	00 00		 mov	 ecx, DWORD PTR tv2739[rsp]
  057b4	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  057b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170339
  057bf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  057c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170340
  057cb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  057d0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  057d5	41 b9 03 00 00
	00		 mov	 r9d, 3
  057db	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170341
  057e2	ba fc 06 00 00	 mov	 edx, 1788		; 000006fcH
  057e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170342
  057ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  057f4	e9 20 01 00 00	 jmp	 $LN306@cckd64_chk
$LN305@cckd64_chk:

; 1788 :                                 spc_typ_to_str( trktyp ), trk, off, len );
; 1789 :                     else
; 1790 :                         // "%1d:%04X CCKD file %s: %s[%d] offset 0x%16.16"PRIX64" len %"PRId64" validation error"
; 1791 :                         WRMSG( HHC00371, "W", LCSS_DEVNUM, dev->filename,

  057f9	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  05802	74 15		 je	 SHORT $LN694@cckd64_chk
  05804	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0580c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  05810	89 84 24 bc 02
	00 00		 mov	 DWORD PTR tv2761[rsp], eax
  05817	eb 0b		 jmp	 SHORT $LN695@cckd64_chk
$LN694@cckd64_chk:
  05819	c7 84 24 bc 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2761[rsp], 0
$LN695@cckd64_chk:
  05824	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0582d	74 17		 je	 SHORT $LN696@cckd64_chk
  0582f	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  05837	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0583b	d1 f8		 sar	 eax, 1
  0583d	89 84 24 c0 02
	00 00		 mov	 DWORD PTR tv2767[rsp], eax
  05844	eb 0b		 jmp	 SHORT $LN697@cckd64_chk
$LN696@cckd64_chk:
  05846	c7 84 24 c0 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2767[rsp], 0
$LN697@cckd64_chk:
  05851	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  05859	e8 00 00 00 00	 call	 spc_typ_to_str
  0585e	48 89 84 24 78
	07 00 00	 mov	 QWORD PTR tv2753[rsp], rax
  05866	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0586e	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  05875	48 89 8c 24 80
	07 00 00	 mov	 QWORD PTR tv2756[rsp], rcx
  0587d	b9 01 00 00 00	 mov	 ecx, 1
  05882	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  05888	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  05890	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  05895	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  0589d	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  058a2	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  058a9	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  058ad	48 8b 8c 24 78
	07 00 00	 mov	 rcx, QWORD PTR tv2753[rsp]
  058b5	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  058ba	48 8b 8c 24 80
	07 00 00	 mov	 rcx, QWORD PTR tv2756[rsp]
  058c2	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  058c7	8b 8c 24 bc 02
	00 00		 mov	 ecx, DWORD PTR tv2761[rsp]
  058ce	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  058d2	8b 8c 24 c0 02
	00 00		 mov	 ecx, DWORD PTR tv2767[rsp]
  058d9	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  058dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170343
  058e4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  058e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170344
  058f0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  058f5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  058fa	41 b9 03 00 00
	00		 mov	 r9d, 3
  05900	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170345
  05907	ba 00 07 00 00	 mov	 edx, 1792		; 00000700H
  0590c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170346
  05913	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN306@cckd64_chk:

; 1792 :                                spc_typ_to_str( trktyp ), trk, off, len );
; 1793 : 
; 1794 :                     /* recover this track */
; 1795 :                     rcvtab[trk] = recovery = 1;

  05919	c6 84 24 b9 00
	00 00 01	 mov	 BYTE PTR recovery$[rsp], 1
  05921	48 63 84 24 e8
	00 00 00	 movsxd	 rax, DWORD PTR trk$[rsp]
  05929	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  05931	0f b6 94 24 b9
	00 00 00	 movzx	 edx, BYTE PTR recovery$[rsp]
  05939	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 1796 :                     spctab[i].spc_typ = SPCTAB_NONE;

  0593c	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  05945	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0594d	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 1797 :                 } /* if invalid space */

  05951	eb 14		 jmp	 SHORT $LN304@cckd64_chk
$LN303@cckd64_chk:

; 1798 :                 else
; 1799 :                     rcvtab[trk] = 0;

  05953	48 63 84 24 e8
	00 00 00	 movsxd	 rax, DWORD PTR trk$[rsp]
  0595b	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  05963	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
$LN304@cckd64_chk:
$LN302@cckd64_chk:

; 1800 :             } /* if level > 2 */
; 1801 :         } /* for each space */

  05967	e9 0f f2 ff ff	 jmp	 $LN37@cckd64_chk
$LN38@cckd64_chk:
$LN287@cckd64_chk:
$cdsk_recovery$835:

; 1802 :     } /* if (level >= 2) */
; 1803 : 
; 1804 :     /*---------------------------------------------------------------
; 1805 :      * Recovery
; 1806 :      *---------------------------------------------------------------*/
; 1807 : 
; 1808 : cdsk_recovery:
; 1809 : 
; 1810 :     if (recovery || level == 4)

  0596c	0f b6 84 24 b9
	00 00 00	 movzx	 eax, BYTE PTR recovery$[rsp]
  05974	85 c0		 test	 eax, eax
  05976	75 0e		 jne	 SHORT $LN308@cckd64_chk
  05978	83 bc 24 c8 31
	04 00 04	 cmp	 DWORD PTR level$[rsp], 4
  05980	0f 85 cc 31 00
	00		 jne	 $LN307@cckd64_chk
$LN308@cckd64_chk:

; 1811 :     {
; 1812 :      U64 flen, fpos;
; 1813 : 
; 1814 :         /*-----------------------------------------------------------
; 1815 :          * Phase 1 -- recover trk/blkgrp images
; 1816 :          *-----------------------------------------------------------*/
; 1817 :         /*
; 1818 :          * Reset the end-of-file pos to the file size
; 1819 :          * It might have been changed if new format free space
; 1820 :          * occurred at the end of the file.
; 1821 :          */
; 1822 :         qsort (spctab, s, sizeof(SPCTAB64), cdsk_spctab64_sort);

  05986	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0598e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:cdsk_spctab64_sort
  05995	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  0599b	48 8b d0	 mov	 rdx, rax
  0599e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  059a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort
$LN40@cckd64_chk:

; 1823 :         while (spctab[s-1].spc_typ == SPCTAB_NONE) s--;

  059ac	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  059b3	ff c8		 dec	 eax
  059b5	48 98		 cdqe
  059b7	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  059bb	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  059c3	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  059c7	85 c0		 test	 eax, eax
  059c9	75 12		 jne	 SHORT $LN41@cckd64_chk
  059cb	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  059d2	ff c8		 dec	 eax
  059d4	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax
  059db	eb cf		 jmp	 SHORT $LN40@cckd64_chk
$LN41@cckd64_chk:

; 1824 :         spctab[s-1].spc_off = fst.st_size;

  059dd	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  059e4	ff c8		 dec	 eax
  059e6	48 98		 cdqe
  059e8	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  059ec	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  059f4	48 8b 94 24 a8
	0d 00 00	 mov	 rdx, QWORD PTR fst$[rsp+24]
  059fc	48 89 54 01 10	 mov	 QWORD PTR [rcx+rax+16], rdx

; 1825 : 
; 1826 :         /* count number tracks to be recovered */
; 1827 :         for (i = n = 0; i < trks; i++)

  05a01	48 c7 84 24 e0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR n$[rsp], 0
  05a0d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR n$[rsp]
  05a15	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
  05a1d	eb 13		 jmp	 SHORT $LN44@cckd64_chk
$LN42@cckd64_chk:
  05a1f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  05a27	48 ff c0	 inc	 rax
  05a2a	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN44@cckd64_chk:
  05a32	48 63 84 24 0c
	01 00 00	 movsxd	 rax, DWORD PTR trks$[rsp]
  05a3a	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  05a42	7d 33		 jge	 SHORT $LN43@cckd64_chk

; 1828 :             if (rcvtab[i] == 1)

  05a44	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  05a4c	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  05a54	48 03 c8	 add	 rcx, rax
  05a57	48 8b c1	 mov	 rax, rcx
  05a5a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  05a5d	83 f8 01	 cmp	 eax, 1
  05a60	75 13		 jne	 SHORT $LN309@cckd64_chk

; 1829 :                n++;

  05a62	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR n$[rsp]
  05a6a	48 ff c0	 inc	 rax
  05a6d	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR n$[rsp], rax
$LN309@cckd64_chk:
  05a75	eb a8		 jmp	 SHORT $LN42@cckd64_chk
$LN43@cckd64_chk:

; 1830 : 
; 1831 :         /*-----------------------------------------------------------
; 1832 :          * ckd recovery
; 1833 :          *-----------------------------------------------------------*/
; 1834 :         if (ckddasd)

  05a77	0f b6 84 24 ed
	00 00 00	 movzx	 eax, BYTE PTR ckddasd$[rsp]
  05a7f	85 c0		 test	 eax, eax
  05a81	0f 84 89 0e 00
	00		 je	 $LN310@cckd64_chk

; 1835 :         {
; 1836 :             /* recovery loop */
; 1837 :             s = cdsk_build_free_space64 (spctab, s);

  05a87	8b 94 24 a0 00
	00 00		 mov	 edx, DWORD PTR s$[rsp]
  05a8e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  05a96	e8 00 00 00 00	 call	 cdsk_build_free_space64
  05a9b	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 1838 :             for (f = 0; spctab[f].spc_typ != SPCTAB_EOF && n; )

  05aa2	48 c7 84 24 f0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR f$[rsp], 0
$LN45@cckd64_chk:
  05aae	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  05ab7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  05abf	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  05ac3	83 f8 08	 cmp	 eax, 8
  05ac6	0f 84 44 0e 00
	00		 je	 $LN46@cckd64_chk
  05acc	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR n$[rsp], 0
  05ad5	0f 84 35 0e 00
	00		 je	 $LN46@cckd64_chk

; 1839 :             {
; 1840 :                 /* next free space if too small */
; 1841 :                 if (spctab[f].spc_typ != SPCTAB_FREE
; 1842 :                  || spctab[f].spc_siz <= CKD_MIN_TRKSIZE)

  05adb	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  05ae4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  05aec	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  05af0	83 f8 07	 cmp	 eax, 7
  05af3	75 19		 jne	 SHORT $LN312@cckd64_chk
  05af5	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  05afe	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  05b06	48 83 7c 01 20
	0d		 cmp	 QWORD PTR [rcx+rax+32], 13
  05b0c	77 65		 ja	 SHORT $LN311@cckd64_chk
$LN312@cckd64_chk:

; 1843 :                 {
; 1844 :                     for (f = f + 1; spctab[f].spc_typ != SPCTAB_EOF; f++)

  05b0e	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  05b16	48 ff c0	 inc	 rax
  05b19	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR f$[rsp], rax
  05b21	eb 13		 jmp	 SHORT $LN50@cckd64_chk
$LN48@cckd64_chk:
  05b23	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  05b2b	48 ff c0	 inc	 rax
  05b2e	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR f$[rsp], rax
$LN50@cckd64_chk:
  05b36	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  05b3f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  05b47	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  05b4b	83 f8 08	 cmp	 eax, 8
  05b4e	74 1e		 je	 SHORT $LN49@cckd64_chk

; 1845 :                         if (spctab[f].spc_typ == SPCTAB_FREE)

  05b50	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  05b59	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  05b61	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  05b65	83 f8 07	 cmp	 eax, 7
  05b68	75 02		 jne	 SHORT $LN313@cckd64_chk

; 1846 :                             break;

  05b6a	eb 02		 jmp	 SHORT $LN49@cckd64_chk
$LN313@cckd64_chk:
  05b6c	eb b5		 jmp	 SHORT $LN48@cckd64_chk
$LN49@cckd64_chk:

; 1847 :                     continue;

  05b6e	e9 3b ff ff ff	 jmp	 $LN45@cckd64_chk
$LN311@cckd64_chk:

; 1848 :                 }
; 1849 : 
; 1850 :                 fpos = spctab[f].spc_off;

  05b73	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  05b7c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  05b84	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  05b89	48 89 84 24 98
	04 00 00	 mov	 QWORD PTR fpos$7[rsp], rax

; 1851 :                 flen = spctab[f].spc_siz;

  05b91	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  05b9a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  05ba2	48 8b 44 01 20	 mov	 rax, QWORD PTR [rcx+rax+32]
  05ba7	48 89 84 24 f8
	03 00 00	 mov	 QWORD PTR flen$4[rsp], rax

; 1852 : 
; 1853 :                 /* length to read */
; 1854 :                 len = flen < sizeof(buf) ? flen : sizeof(buf);

  05baf	48 81 bc 24 f8
	03 00 00 00 00
	04 00		 cmp	 QWORD PTR flen$4[rsp], 262144 ; 00040000H
  05bbb	73 12		 jae	 SHORT $LN698@cckd64_chk
  05bbd	48 8b 84 24 f8
	03 00 00	 mov	 rax, QWORD PTR flen$4[rsp]
  05bc5	48 89 84 24 90
	04 00 00	 mov	 QWORD PTR tv2855[rsp], rax
  05bcd	eb 0c		 jmp	 SHORT $LN699@cckd64_chk
$LN698@cckd64_chk:
  05bcf	48 c7 84 24 90
	04 00 00 00 00
	04 00		 mov	 QWORD PTR tv2855[rsp], 262144 ; 00040000H
$LN699@cckd64_chk:
  05bdb	48 8b 84 24 90
	04 00 00	 mov	 rax, QWORD PTR tv2855[rsp]
  05be3	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR len$[rsp], rax

; 1855 : 
; 1856 :                 /* read the free space */
; 1857 :                 off = fpos;

  05beb	48 8b 84 24 98
	04 00 00	 mov	 rax, QWORD PTR fpos$7[rsp]
  05bf3	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 1858 :                 if (lseek (fd, off, SEEK_SET) < 0)

  05bfb	45 33 c0	 xor	 r8d, r8d
  05bfe	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  05c06	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  05c0d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  05c13	48 85 c0	 test	 rax, rax
  05c16	7d 05		 jge	 SHORT $LN314@cckd64_chk

; 1859 :                     goto cdsk_lseek_error;

  05c18	e9 15 49 00 00	 jmp	 $cdsk_lseek_error$830
$LN314@cckd64_chk:

; 1860 :                 gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  05c1d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  05c24	83 38 00	 cmp	 DWORD PTR [rax], 0
  05c27	74 43		 je	 SHORT $LN315@cckd64_chk
  05c29	41 b8 01 00 00
	00		 mov	 r8d, 1
  05c2f	33 d2		 xor	 edx, edx
  05c31	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  05c38	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  05c3e	48 89 84 24 88
	07 00 00	 mov	 QWORD PTR tv2863[rsp], rax
  05c46	b9 02 00 00 00	 mov	 ecx, 2
  05c4b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  05c51	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR tv2863[rsp]
  05c59	4c 8b c1	 mov	 r8, rcx
  05c5c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170356
  05c63	48 8b c8	 mov	 rcx, rax
  05c66	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN315@cckd64_chk:

; 1861 :                 if ((U64)(rc = read (fd, buf, (unsigned int) len)) != len)

  05c6c	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  05c74	48 8d 94 24 90
	31 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  05c7c	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  05c83	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  05c89	89 84 24 bc 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  05c90	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  05c98	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  05ca0	74 05		 je	 SHORT $LN316@cckd64_chk

; 1862 :                     goto cdsk_read_error;

  05ca2	e9 db 4a 00 00	 jmp	 $cdsk_read_error$831
$LN316@cckd64_chk:

; 1863 : 
; 1864 :                 /* Scan the space for a trkhdr */
; 1865 :                 for (i = 0; i < (S64)(len - CKD_MIN_TRKSIZE); i++)

  05ca7	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  05cb3	eb 13		 jmp	 SHORT $LN53@cckd64_chk
$LN51@cckd64_chk:
  05cb5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  05cbd	48 ff c0	 inc	 rax
  05cc0	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN53@cckd64_chk:
  05cc8	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  05cd0	48 83 e8 0d	 sub	 rax, 13
  05cd4	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  05cdc	0f 8d 87 0b 00
	00		 jge	 $LN52@cckd64_chk

; 1866 :                 {
; 1867 :                     CKD_TRKHDR  trkhdr;
; 1868 :                     CKD_R0      r0;
; 1869 : 
; 1870 :                     /* Check compression byte */
; 1871 :                     if (compmask[buf[i]])

  05ce2	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  05cea	0f b6 84 04 90
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  05cf2	0f b6 84 04 10
	30 00 00	 movzx	 eax, BYTE PTR compmask$[rsp+rax]
  05cfa	85 c0		 test	 eax, eax
  05cfc	74 02		 je	 SHORT $LN317@cckd64_chk

; 1872 :                         continue;

  05cfe	eb b5		 jmp	 SHORT $LN51@cckd64_chk
$LN317@cckd64_chk:

; 1873 : 
; 1874 :                     /* Fetch possible trkhdr */
; 1875 :                     memcpy( &trkhdr, &buf[i], CKD_TRKHDR_SIZE );

  05d00	48 8d 84 24 60
	0b 00 00	 lea	 rax, QWORD PTR trkhdr$8[rsp]
  05d08	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  05d10	48 8b f8	 mov	 rdi, rax
  05d13	48 8d b4 0c 90
	31 00 00	 lea	 rsi, QWORD PTR buf$[rsp+rcx]
  05d1b	b9 05 00 00 00	 mov	 ecx, 5
  05d20	f3 a4		 rep movsb

; 1876 :                     comp =           trkhdr.bin;

  05d22	0f b6 84 24 60
	0b 00 00	 movzx	 eax, BYTE PTR trkhdr$8[rsp]
  05d2a	89 84 24 fc 00
	00 00		 mov	 DWORD PTR comp$[rsp], eax

; 1877 :                     cyl  = fetch_hw( trkhdr.cyl );

  05d31	48 8d 8c 24 61
	0b 00 00	 lea	 rcx, QWORD PTR trkhdr$8[rsp+1]
  05d39	e8 00 00 00 00	 call	 fetch_hw_noswap
  05d3e	0f b7 c8	 movzx	 ecx, ax
  05d41	e8 00 00 00 00	 call	 _byteswap_ushort
  05d46	0f b7 c0	 movzx	 eax, ax
  05d49	89 84 24 50 01
	00 00		 mov	 DWORD PTR cyl$[rsp], eax

; 1878 :                     head = fetch_hw( trkhdr.head );

  05d50	48 8d 8c 24 63
	0b 00 00	 lea	 rcx, QWORD PTR trkhdr$8[rsp+3]
  05d58	e8 00 00 00 00	 call	 fetch_hw_noswap
  05d5d	0f b7 c8	 movzx	 ecx, ax
  05d60	e8 00 00 00 00	 call	 _byteswap_ushort
  05d65	0f b7 c0	 movzx	 eax, ax
  05d68	89 84 24 54 01
	00 00		 mov	 DWORD PTR head$[rsp], eax

; 1879 :                     trk  = (cyl * heads) + head;

  05d6f	8b 84 24 50 01
	00 00		 mov	 eax, DWORD PTR cyl$[rsp]
  05d76	0f af 84 24 dc
	00 00 00	 imul	 eax, DWORD PTR heads$[rsp]
  05d7e	03 84 24 54 01
	00 00		 add	 eax, DWORD PTR head$[rsp]
  05d85	89 84 24 e8 00
	00 00		 mov	 DWORD PTR trk$[rsp], eax

; 1880 : 
; 1881 :                     /* Validate possible trkhdr */
; 1882 :                     if (0
; 1883 :                         || cyl  >= cyls
; 1884 :                         || head >= heads
; 1885 :                         || rcvtab[trk] != 1

  05d8c	33 c0		 xor	 eax, eax
  05d8e	85 c0		 test	 eax, eax
  05d90	75 39		 jne	 SHORT $LN319@cckd64_chk
  05d92	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR cyls$[rsp]
  05d99	39 84 24 50 01
	00 00		 cmp	 DWORD PTR cyl$[rsp], eax
  05da0	7d 29		 jge	 SHORT $LN319@cckd64_chk
  05da2	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR heads$[rsp]
  05da9	39 84 24 54 01
	00 00		 cmp	 DWORD PTR head$[rsp], eax
  05db0	7d 19		 jge	 SHORT $LN319@cckd64_chk
  05db2	48 63 84 24 e8
	00 00 00	 movsxd	 rax, DWORD PTR trk$[rsp]
  05dba	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  05dc2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  05dc6	83 f8 01	 cmp	 eax, 1
  05dc9	74 05		 je	 SHORT $LN318@cckd64_chk
$LN319@cckd64_chk:

; 1886 :                     )
; 1887 :                         continue;

  05dcb	e9 e5 fe ff ff	 jmp	 $LN51@cckd64_chk
$LN318@cckd64_chk:

; 1888 : 
; 1889 :                     /* Quick validation for compress none */
; 1890 :                     if (comp == CCKD_COMPRESS_NONE)

  05dd0	83 bc 24 fc 00
	00 00 00	 cmp	 DWORD PTR comp$[rsp], 0
  05dd8	0f 85 9c 00 00
	00		 jne	 $LN320@cckd64_chk

; 1891 :                     {
; 1892 :                         memcpy( &r0, &buf[i+CKD_TRKHDR_SIZE], CKD_R0_SIZE );

  05dde	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  05de6	48 8b 84 04 95
	31 00 00	 mov	 rax, QWORD PTR buf$[rsp+rax+5]
  05dee	48 89 84 24 68
	0b 00 00	 mov	 QWORD PTR r0$9[rsp], rax

; 1893 : 
; 1894 :                         if (0
; 1895 :                             || fetch_hw( r0.cyl  ) != cyl         // r0 cyl
; 1896 :                             || fetch_hw( r0.head ) != head        // r0 head
; 1897 :                             ||           r0.rec    != 0           // r0 record
; 1898 :                             ||           r0.klen   != 0           // r0 key length
; 1899 :                             || fetch_hw( r0.dlen ) != CKD_R0_DLEN // r0 data length

  05df6	33 c0		 xor	 eax, eax
  05df8	85 c0		 test	 eax, eax
  05dfa	75 77		 jne	 SHORT $LN323@cckd64_chk
  05dfc	48 8d 8c 24 68
	0b 00 00	 lea	 rcx, QWORD PTR r0$9[rsp]
  05e04	e8 00 00 00 00	 call	 fetch_hw_noswap
  05e09	0f b7 c8	 movzx	 ecx, ax
  05e0c	e8 00 00 00 00	 call	 _byteswap_ushort
  05e11	0f b7 c0	 movzx	 eax, ax
  05e14	3b 84 24 50 01
	00 00		 cmp	 eax, DWORD PTR cyl$[rsp]
  05e1b	75 56		 jne	 SHORT $LN323@cckd64_chk
  05e1d	48 8d 8c 24 6a
	0b 00 00	 lea	 rcx, QWORD PTR r0$9[rsp+2]
  05e25	e8 00 00 00 00	 call	 fetch_hw_noswap
  05e2a	0f b7 c8	 movzx	 ecx, ax
  05e2d	e8 00 00 00 00	 call	 _byteswap_ushort
  05e32	0f b7 c0	 movzx	 eax, ax
  05e35	3b 84 24 54 01
	00 00		 cmp	 eax, DWORD PTR head$[rsp]
  05e3c	75 35		 jne	 SHORT $LN323@cckd64_chk
  05e3e	0f b6 84 24 6c
	0b 00 00	 movzx	 eax, BYTE PTR r0$9[rsp+4]
  05e46	85 c0		 test	 eax, eax
  05e48	75 29		 jne	 SHORT $LN323@cckd64_chk
  05e4a	0f b6 84 24 6d
	0b 00 00	 movzx	 eax, BYTE PTR r0$9[rsp+5]
  05e52	85 c0		 test	 eax, eax
  05e54	75 1d		 jne	 SHORT $LN323@cckd64_chk
  05e56	48 8d 8c 24 6e
	0b 00 00	 lea	 rcx, QWORD PTR r0$9[rsp+6]
  05e5e	e8 00 00 00 00	 call	 fetch_hw_noswap
  05e63	0f b7 c8	 movzx	 ecx, ax
  05e66	e8 00 00 00 00	 call	 _byteswap_ushort
  05e6b	0f b7 c0	 movzx	 eax, ax
  05e6e	83 f8 08	 cmp	 eax, 8
  05e71	74 05		 je	 SHORT $LN322@cckd64_chk
$LN323@cckd64_chk:

; 1900 :                         )
; 1901 :                             continue;

  05e73	e9 3d fe ff ff	 jmp	 $LN51@cckd64_chk
$LN322@cckd64_chk:

; 1902 :                     }

  05e78	eb 7b		 jmp	 SHORT $LN321@cckd64_chk
$LN320@cckd64_chk:

; 1903 : 
; 1904 :                     /* Quick validation for zlib */
; 1905 :                     else if (comp == CCKD_COMPRESS_ZLIB
; 1906 :                      && fetch_hw(buf + i + 5) % 31 != 0)

  05e7a	83 bc 24 fc 00
	00 00 01	 cmp	 DWORD PTR comp$[rsp], 1
  05e82	75 38		 jne	 SHORT $LN324@cckd64_chk
  05e84	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  05e8c	48 8d 84 04 95
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+5]
  05e94	48 8b c8	 mov	 rcx, rax
  05e97	e8 00 00 00 00	 call	 fetch_hw_noswap
  05e9c	0f b7 c8	 movzx	 ecx, ax
  05e9f	e8 00 00 00 00	 call	 _byteswap_ushort
  05ea4	0f b7 c0	 movzx	 eax, ax
  05ea7	99		 cdq
  05ea8	b9 1f 00 00 00	 mov	 ecx, 31
  05ead	f7 f9		 idiv	 ecx
  05eaf	8b c2		 mov	 eax, edx
  05eb1	85 c0		 test	 eax, eax
  05eb3	74 07		 je	 SHORT $LN324@cckd64_chk

; 1907 :                         continue;

  05eb5	e9 fb fd ff ff	 jmp	 $LN51@cckd64_chk
  05eba	eb 39		 jmp	 SHORT $LN325@cckd64_chk
$LN324@cckd64_chk:

; 1908 : 
; 1909 :                     /* Quick validation for bzip2 */
; 1910 :                     else if (comp == CCKD_COMPRESS_BZIP2
; 1911 :                      && (buf[i+5] != 'B' || buf[i+6] != 'Z'))

  05ebc	83 bc 24 fc 00
	00 00 02	 cmp	 DWORD PTR comp$[rsp], 2
  05ec4	75 2f		 jne	 SHORT $LN326@cckd64_chk
  05ec6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  05ece	0f b6 84 04 95
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax+5]
  05ed6	83 f8 42	 cmp	 eax, 66			; 00000042H
  05ed9	75 15		 jne	 SHORT $LN327@cckd64_chk
  05edb	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  05ee3	0f b6 84 04 96
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax+6]
  05eeb	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  05eee	74 05		 je	 SHORT $LN326@cckd64_chk
$LN327@cckd64_chk:

; 1912 :                         continue;

  05ef0	e9 c0 fd ff ff	 jmp	 $LN51@cckd64_chk
$LN326@cckd64_chk:
$LN325@cckd64_chk:
$LN321@cckd64_chk:

; 1913 :                     /*
; 1914 :                      * If we are in `borrowed space' then start over
; 1915 :                      * with the current position at the beginning
; 1916 :                      */
; 1917 :                     if (flen > len && i > (S64)(len - trksz))

  05ef5	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  05efd	48 39 84 24 f8
	03 00 00	 cmp	 QWORD PTR flen$4[rsp], rax
  05f05	76 24		 jbe	 SHORT $LN328@cckd64_chk
  05f07	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR trksz$[rsp]
  05f0e	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  05f16	48 2b c8	 sub	 rcx, rax
  05f19	48 8b c1	 mov	 rax, rcx
  05f1c	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  05f24	7e 05		 jle	 SHORT $LN328@cckd64_chk

; 1918 :                         break;

  05f26	e9 3e 09 00 00	 jmp	 $LN52@cckd64_chk
$LN328@cckd64_chk:

; 1919 : 
; 1920 :                     /* Checks for comp none */
; 1921 :                     if (comp == CCKD_COMPRESS_NONE)

  05f2b	83 bc 24 fc 00
	00 00 00	 cmp	 DWORD PTR comp$[rsp], 0
  05f33	75 74		 jne	 SHORT $LN329@cckd64_chk

; 1922 :                     {
; 1923 :                         l = len - i;

  05f35	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  05f3d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  05f45	48 2b c8	 sub	 rcx, rax
  05f48	48 8b c1	 mov	 rax, rcx
  05f4b	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR l$[rsp], rax

; 1924 :                         if ((l = cdsk_valid_trk (trk, buf+i, heads, (int) -l)))

  05f53	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  05f5b	48 f7 d8	 neg	 rax
  05f5e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  05f66	48 8d 8c 0c 90
	31 00 00	 lea	 rcx, QWORD PTR buf$[rsp+rcx]
  05f6e	44 8b c8	 mov	 r9d, eax
  05f71	44 8b 84 24 dc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  05f79	48 8b d1	 mov	 rdx, rcx
  05f7c	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  05f83	e8 00 00 00 00	 call	 cdsk_valid_trk
  05f88	48 98		 cdqe
  05f8a	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR l$[rsp], rax
  05f92	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR l$[rsp], 0
  05f9b	74 07		 je	 SHORT $LN330@cckd64_chk

; 1925 :                             goto cdsk_ckd_recover;

  05f9d	e9 22 05 00 00	 jmp	 $cdsk_ckd_recover$837
  05fa2	eb 05		 jmp	 SHORT $LN331@cckd64_chk
$LN330@cckd64_chk:

; 1926 :                         else
; 1927 :                              continue;

  05fa4	e9 0c fd ff ff	 jmp	 $LN51@cckd64_chk
$LN331@cckd64_chk:
$LN329@cckd64_chk:

; 1928 :                     }
; 1929 : 
; 1930 :                     /* Check short `length' */
; 1931 :                     if (flen == len && (l = len - i) <= 1024)

  05fa9	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  05fb1	48 39 84 24 f8
	03 00 00	 cmp	 QWORD PTR flen$4[rsp], rax
  05fb9	0f 85 c3 00 00
	00		 jne	 $LN332@cckd64_chk
  05fbf	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  05fc7	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  05fcf	48 2b c8	 sub	 rcx, rax
  05fd2	48 8b c1	 mov	 rax, rcx
  05fd5	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR l$[rsp], rax
  05fdd	48 81 bc 24 c8
	00 00 00 00 04
	00 00		 cmp	 QWORD PTR l$[rsp], 1024	; 00000400H
  05fe9	0f 8f 93 00 00
	00		 jg	 $LN332@cckd64_chk

; 1932 :                     {
; 1933 :                         if (cdsk_valid_trk (trk, buf+i, heads, (int) l))

  05fef	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  05ff7	48 8d 84 04 90
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  05fff	44 8b 8c 24 c8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  06007	44 8b 84 24 dc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  0600f	48 8b d0	 mov	 rdx, rax
  06012	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  06019	e8 00 00 00 00	 call	 cdsk_valid_trk
  0601e	85 c0		 test	 eax, eax
  06020	74 60		 je	 SHORT $LN333@cckd64_chk
$LN54@cckd64_chk:

; 1934 :                         {
; 1935 :                             while (cdsk_valid_trk (trk, buf+i, heads, (int) --l));

  06022	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  0602a	48 ff c8	 dec	 rax
  0602d	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR l$[rsp], rax
  06035	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  0603d	48 8d 84 04 90
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  06045	44 8b 8c 24 c8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  0604d	44 8b 84 24 dc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  06055	48 8b d0	 mov	 rdx, rax
  06058	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  0605f	e8 00 00 00 00	 call	 cdsk_valid_trk
  06064	85 c0		 test	 eax, eax
  06066	74 02		 je	 SHORT $LN55@cckd64_chk
  06068	eb b8		 jmp	 SHORT $LN54@cckd64_chk
$LN55@cckd64_chk:

; 1936 :                             l++;

  0606a	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  06072	48 ff c0	 inc	 rax
  06075	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR l$[rsp], rax

; 1937 :                             goto cdsk_ckd_recover;

  0607d	e9 42 04 00 00	 jmp	 $cdsk_ckd_recover$837
$LN333@cckd64_chk:
$LN332@cckd64_chk:

; 1938 :                         }
; 1939 :                     }
; 1940 : 
; 1941 :                     /* Scan for next trkhdr */
; 1942 :                     for (j = i +          CKD_MIN_TRKSIZE;

  06082	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  0608a	48 83 c0 0d	 add	 rax, 13
  0608e	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR j$[rsp], rax
  06096	eb 13		 jmp	 SHORT $LN58@cckd64_chk
$LN56@cckd64_chk:

; 1944 :                          j++)

  06098	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  060a0	48 ff c0	 inc	 rax
  060a3	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR j$[rsp], rax
$LN58@cckd64_chk:

; 1943 :                          j <= (S64)(len - CKD_MIN_TRKSIZE);

  060ab	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  060b3	48 83 e8 0d	 sub	 rax, 13
  060b7	48 39 84 24 d0
	00 00 00	 cmp	 QWORD PTR j$[rsp], rax
  060bf	0f 8f 93 02 00
	00		 jg	 $LN57@cckd64_chk

; 1945 :                     {
; 1946 :                         if (j - i > (S64) trksz)

  060c5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  060cd	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR j$[rsp]
  060d5	48 2b c8	 sub	 rcx, rax
  060d8	48 8b c1	 mov	 rax, rcx
  060db	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR trksz$[rsp]
  060e2	48 3b c1	 cmp	 rax, rcx
  060e5	7e 05		 jle	 SHORT $LN334@cckd64_chk

; 1947 :                             break;

  060e7	e9 6c 02 00 00	 jmp	 $LN57@cckd64_chk
$LN334@cckd64_chk:

; 1948 : 
; 1949 :                         if (compmask[buf[j]] != 0)

  060ec	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  060f4	0f b6 84 04 90
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  060fc	0f b6 84 04 10
	30 00 00	 movzx	 eax, BYTE PTR compmask$[rsp+rax]
  06104	85 c0		 test	 eax, eax
  06106	74 02		 je	 SHORT $LN335@cckd64_chk

; 1950 :                             continue;

  06108	eb 8e		 jmp	 SHORT $LN56@cckd64_chk
$LN335@cckd64_chk:

; 1951 : 
; 1952 :                         memcpy( &trkhdr, &buf[j], CKD_TRKHDR_SIZE );

  0610a	48 8d 84 24 60
	0b 00 00	 lea	 rax, QWORD PTR trkhdr$8[rsp]
  06112	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR j$[rsp]
  0611a	48 8b f8	 mov	 rdi, rax
  0611d	48 8d b4 0c 90
	31 00 00	 lea	 rsi, QWORD PTR buf$[rsp+rcx]
  06125	b9 05 00 00 00	 mov	 ecx, 5
  0612a	f3 a4		 rep movsb

; 1953 :                         if (0
; 1954 :                             || fetch_hw( trkhdr.cyl  ) >= cyls
; 1955 :                             || fetch_hw( trkhdr.head ) >= heads

  0612c	33 c0		 xor	 eax, eax
  0612e	85 c0		 test	 eax, eax
  06130	75 42		 jne	 SHORT $LN337@cckd64_chk
  06132	48 8d 8c 24 61
	0b 00 00	 lea	 rcx, QWORD PTR trkhdr$8[rsp+1]
  0613a	e8 00 00 00 00	 call	 fetch_hw_noswap
  0613f	0f b7 c8	 movzx	 ecx, ax
  06142	e8 00 00 00 00	 call	 _byteswap_ushort
  06147	0f b7 c0	 movzx	 eax, ax
  0614a	3b 84 24 38 01
	00 00		 cmp	 eax, DWORD PTR cyls$[rsp]
  06151	7d 21		 jge	 SHORT $LN337@cckd64_chk
  06153	48 8d 8c 24 63
	0b 00 00	 lea	 rcx, QWORD PTR trkhdr$8[rsp+3]
  0615b	e8 00 00 00 00	 call	 fetch_hw_noswap
  06160	0f b7 c8	 movzx	 ecx, ax
  06163	e8 00 00 00 00	 call	 _byteswap_ushort
  06168	0f b7 c0	 movzx	 eax, ax
  0616b	3b 84 24 dc 00
	00 00		 cmp	 eax, DWORD PTR heads$[rsp]
  06172	7c 05		 jl	 SHORT $LN336@cckd64_chk
$LN337@cckd64_chk:

; 1956 :                         )
; 1957 :                             continue;

  06174	e9 1f ff ff ff	 jmp	 $LN56@cckd64_chk
$LN336@cckd64_chk:

; 1958 : 
; 1959 :                         /* check uncompressed hdr */
; 1960 :                         if (comp == CCKD_COMPRESS_NONE)

  06179	83 bc 24 fc 00
	00 00 00	 cmp	 DWORD PTR comp$[rsp], 0
  06181	0f 85 e5 00 00
	00		 jne	 $LN338@cckd64_chk

; 1961 :                         {
; 1962 :                             memcpy( &r0, &buf[i+CKD_TRKHDR_SIZE], CKD_R0_SIZE );

  06187	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  0618f	48 8b 84 04 95
	31 00 00	 mov	 rax, QWORD PTR buf$[rsp+rax+5]
  06197	48 89 84 24 68
	0b 00 00	 mov	 QWORD PTR r0$9[rsp], rax

; 1963 :                             if (0
; 1964 :                                 || fetch_hw( r0.cyl  ) != fetch_hw( trkhdr.cyl  )
; 1965 :                                 || fetch_hw( r0.head ) != fetch_hw( trkhdr.head )
; 1966 :                                 ||           r0.rec    != 0
; 1967 :                                 ||           r0.klen   != 0
; 1968 :                                 || fetch_hw( r0.dlen ) != CKD_R0_DLEN

  0619f	33 c0		 xor	 eax, eax
  061a1	85 c0		 test	 eax, eax
  061a3	0f 85 b9 00 00
	00		 jne	 $LN341@cckd64_chk
  061a9	48 8d 8c 24 68
	0b 00 00	 lea	 rcx, QWORD PTR r0$9[rsp]
  061b1	e8 00 00 00 00	 call	 fetch_hw_noswap
  061b6	0f b7 c8	 movzx	 ecx, ax
  061b9	e8 00 00 00 00	 call	 _byteswap_ushort
  061be	0f b7 c0	 movzx	 eax, ax
  061c1	89 84 24 44 04
	00 00		 mov	 DWORD PTR tv3059[rsp], eax
  061c8	48 8d 8c 24 61
	0b 00 00	 lea	 rcx, QWORD PTR trkhdr$8[rsp+1]
  061d0	e8 00 00 00 00	 call	 fetch_hw_noswap
  061d5	0f b7 c8	 movzx	 ecx, ax
  061d8	e8 00 00 00 00	 call	 _byteswap_ushort
  061dd	0f b7 c0	 movzx	 eax, ax
  061e0	8b 8c 24 44 04
	00 00		 mov	 ecx, DWORD PTR tv3059[rsp]
  061e7	3b c8		 cmp	 ecx, eax
  061e9	75 77		 jne	 SHORT $LN341@cckd64_chk
  061eb	48 8d 8c 24 6a
	0b 00 00	 lea	 rcx, QWORD PTR r0$9[rsp+2]
  061f3	e8 00 00 00 00	 call	 fetch_hw_noswap
  061f8	0f b7 c8	 movzx	 ecx, ax
  061fb	e8 00 00 00 00	 call	 _byteswap_ushort
  06200	0f b7 c0	 movzx	 eax, ax
  06203	89 84 24 48 04
	00 00		 mov	 DWORD PTR tv3070[rsp], eax
  0620a	48 8d 8c 24 63
	0b 00 00	 lea	 rcx, QWORD PTR trkhdr$8[rsp+3]
  06212	e8 00 00 00 00	 call	 fetch_hw_noswap
  06217	0f b7 c8	 movzx	 ecx, ax
  0621a	e8 00 00 00 00	 call	 _byteswap_ushort
  0621f	0f b7 c0	 movzx	 eax, ax
  06222	8b 8c 24 48 04
	00 00		 mov	 ecx, DWORD PTR tv3070[rsp]
  06229	3b c8		 cmp	 ecx, eax
  0622b	75 35		 jne	 SHORT $LN341@cckd64_chk
  0622d	0f b6 84 24 6c
	0b 00 00	 movzx	 eax, BYTE PTR r0$9[rsp+4]
  06235	85 c0		 test	 eax, eax
  06237	75 29		 jne	 SHORT $LN341@cckd64_chk
  06239	0f b6 84 24 6d
	0b 00 00	 movzx	 eax, BYTE PTR r0$9[rsp+5]
  06241	85 c0		 test	 eax, eax
  06243	75 1d		 jne	 SHORT $LN341@cckd64_chk
  06245	48 8d 8c 24 6e
	0b 00 00	 lea	 rcx, QWORD PTR r0$9[rsp+6]
  0624d	e8 00 00 00 00	 call	 fetch_hw_noswap
  06252	0f b7 c8	 movzx	 ecx, ax
  06255	e8 00 00 00 00	 call	 _byteswap_ushort
  0625a	0f b7 c0	 movzx	 eax, ax
  0625d	83 f8 08	 cmp	 eax, 8
  06260	74 05		 je	 SHORT $LN340@cckd64_chk
$LN341@cckd64_chk:

; 1969 :                             )
; 1970 :                                 continue;

  06262	e9 31 fe ff ff	 jmp	 $LN56@cckd64_chk
$LN340@cckd64_chk:

; 1971 :                         }

  06267	e9 91 00 00 00	 jmp	 $LN339@cckd64_chk
$LN338@cckd64_chk:

; 1972 : 
; 1973 :                         /* check zlib compressed header */
; 1974 :                         else if (buf[j] == CCKD_COMPRESS_ZLIB
; 1975 :                          && fetch_hw(buf + j + 5) % 31 != 0)

  0626c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  06274	0f b6 84 04 90
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  0627c	83 f8 01	 cmp	 eax, 1
  0627f	75 38		 jne	 SHORT $LN342@cckd64_chk
  06281	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  06289	48 8d 84 04 95
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+5]
  06291	48 8b c8	 mov	 rcx, rax
  06294	e8 00 00 00 00	 call	 fetch_hw_noswap
  06299	0f b7 c8	 movzx	 ecx, ax
  0629c	e8 00 00 00 00	 call	 _byteswap_ushort
  062a1	0f b7 c0	 movzx	 eax, ax
  062a4	99		 cdq
  062a5	b9 1f 00 00 00	 mov	 ecx, 31
  062aa	f7 f9		 idiv	 ecx
  062ac	8b c2		 mov	 eax, edx
  062ae	85 c0		 test	 eax, eax
  062b0	74 07		 je	 SHORT $LN342@cckd64_chk

; 1976 :                                 continue;

  062b2	e9 e1 fd ff ff	 jmp	 $LN56@cckd64_chk
  062b7	eb 44		 jmp	 SHORT $LN343@cckd64_chk
$LN342@cckd64_chk:

; 1977 : 
; 1978 :                         /* check bzip2 compressed header */
; 1979 :                         else if (buf[j] == CCKD_COMPRESS_BZIP2
; 1980 :                          && (buf[j+5] != 'B' || buf[j+6] != 'Z'))

  062b9	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  062c1	0f b6 84 04 90
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  062c9	83 f8 02	 cmp	 eax, 2
  062cc	75 2f		 jne	 SHORT $LN344@cckd64_chk
  062ce	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  062d6	0f b6 84 04 95
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax+5]
  062de	83 f8 42	 cmp	 eax, 66			; 00000042H
  062e1	75 15		 jne	 SHORT $LN345@cckd64_chk
  062e3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  062eb	0f b6 84 04 96
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax+6]
  062f3	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  062f6	74 05		 je	 SHORT $LN344@cckd64_chk
$LN345@cckd64_chk:

; 1981 :                                 continue;

  062f8	e9 9b fd ff ff	 jmp	 $LN56@cckd64_chk
$LN344@cckd64_chk:
$LN343@cckd64_chk:
$LN339@cckd64_chk:

; 1982 : 
; 1983 :                         /* check to possible trkhdr */
; 1984 :                         l = j - i;

  062fd	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06305	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR j$[rsp]
  0630d	48 2b c8	 sub	 rcx, rax
  06310	48 8b c1	 mov	 rax, rcx
  06313	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR l$[rsp], rax

; 1985 :                         if (cdsk_valid_trk (trk, buf+i, heads, (int) l))

  0631b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06323	48 8d 84 04 90
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  0632b	44 8b 8c 24 c8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  06333	44 8b 84 24 dc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  0633b	48 8b d0	 mov	 rdx, rax
  0633e	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  06345	e8 00 00 00 00	 call	 cdsk_valid_trk
  0634a	85 c0		 test	 eax, eax
  0634c	74 05		 je	 SHORT $LN346@cckd64_chk

; 1986 :                         {
; 1987 : #if 0
; 1988 :                             while (cdsk_valid_trk (trk, buf+i, heads, (int) --l));
; 1989 :                             l++;
; 1990 : #endif
; 1991 :                             goto cdsk_ckd_recover;

  0634e	e9 71 01 00 00	 jmp	 $cdsk_ckd_recover$837
$LN346@cckd64_chk:

; 1992 :                         }
; 1993 : 
; 1994 :                     } /* scan for next trkhdr */

  06353	e9 40 fd ff ff	 jmp	 $LN56@cckd64_chk
$LN57@cckd64_chk:

; 1995 : 
; 1996 :                     /* Check `length' */
; 1997 :                     if (flen == len && (l = (S64)len - i) <= (S64)trksz)

  06358	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  06360	48 39 84 24 f8
	03 00 00	 cmp	 QWORD PTR flen$4[rsp], rax
  06368	0f 85 c6 00 00
	00		 jne	 $LN347@cckd64_chk
  0636e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06376	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  0637e	48 2b c8	 sub	 rcx, rax
  06381	48 8b c1	 mov	 rax, rcx
  06384	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR l$[rsp], rax
  0638c	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR trksz$[rsp]
  06393	48 39 84 24 c8
	00 00 00	 cmp	 QWORD PTR l$[rsp], rax
  0639b	0f 8f 93 00 00
	00		 jg	 $LN347@cckd64_chk

; 1998 :                     {
; 1999 :                         if (cdsk_valid_trk (trk, buf+i, heads, (int) l))

  063a1	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  063a9	48 8d 84 04 90
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  063b1	44 8b 8c 24 c8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  063b9	44 8b 84 24 dc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  063c1	48 8b d0	 mov	 rdx, rax
  063c4	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  063cb	e8 00 00 00 00	 call	 cdsk_valid_trk
  063d0	85 c0		 test	 eax, eax
  063d2	74 60		 je	 SHORT $LN348@cckd64_chk
$LN59@cckd64_chk:

; 2000 :                         {
; 2001 :                             while (cdsk_valid_trk (trk, buf+i, heads, (int) --l));

  063d4	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  063dc	48 ff c8	 dec	 rax
  063df	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR l$[rsp], rax
  063e7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  063ef	48 8d 84 04 90
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  063f7	44 8b 8c 24 c8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  063ff	44 8b 84 24 dc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  06407	48 8b d0	 mov	 rdx, rax
  0640a	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  06411	e8 00 00 00 00	 call	 cdsk_valid_trk
  06416	85 c0		 test	 eax, eax
  06418	74 02		 je	 SHORT $LN60@cckd64_chk
  0641a	eb b8		 jmp	 SHORT $LN59@cckd64_chk
$LN60@cckd64_chk:

; 2002 :                             l++;

  0641c	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  06424	48 ff c0	 inc	 rax
  06427	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR l$[rsp], rax

; 2003 :                             goto cdsk_ckd_recover;

  0642f	e9 90 00 00 00	 jmp	 $cdsk_ckd_recover$837
$LN348@cckd64_chk:
$LN347@cckd64_chk:

; 2004 :                         }
; 2005 :                     }
; 2006 : 
; 2007 :                     /* Scan all lengths */
; 2008 :                     for (l = CKD_MIN_TRKSIZE; i + l <= (S64) len; l++)

  06434	48 c7 84 24 c8
	00 00 00 0d 00
	00 00		 mov	 QWORD PTR l$[rsp], 13
  06440	eb 13		 jmp	 SHORT $LN63@cckd64_chk
$LN61@cckd64_chk:
  06442	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  0644a	48 ff c0	 inc	 rax
  0644d	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR l$[rsp], rax
$LN63@cckd64_chk:
  06455	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  0645d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  06465	48 03 c8	 add	 rcx, rax
  06468	48 8b c1	 mov	 rax, rcx
  0646b	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  06473	7f 4a		 jg	 SHORT $LN62@cckd64_chk

; 2009 :                     {
; 2010 :                         if (l > (S64)trksz)

  06475	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR trksz$[rsp]
  0647c	48 39 84 24 c8
	00 00 00	 cmp	 QWORD PTR l$[rsp], rax
  06484	7e 02		 jle	 SHORT $LN349@cckd64_chk

; 2011 :                             break;

  06486	eb 37		 jmp	 SHORT $LN62@cckd64_chk
$LN349@cckd64_chk:

; 2012 :                         if (cdsk_valid_trk (trk, buf+i, heads, (int) l))

  06488	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06490	48 8d 84 04 90
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  06498	44 8b 8c 24 c8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  064a0	44 8b 84 24 dc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  064a8	48 8b d0	 mov	 rdx, rax
  064ab	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  064b2	e8 00 00 00 00	 call	 cdsk_valid_trk
  064b7	85 c0		 test	 eax, eax
  064b9	74 02		 je	 SHORT $LN350@cckd64_chk

; 2013 :                             goto cdsk_ckd_recover;

  064bb	eb 07		 jmp	 SHORT $cdsk_ckd_recover$837
$LN350@cckd64_chk:

; 2014 :                     } /* for all lengths */

  064bd	eb 83		 jmp	 SHORT $LN61@cckd64_chk
$LN62@cckd64_chk:

; 2015 : 
; 2016 :                     continue;

  064bf	e9 f1 f7 ff ff	 jmp	 $LN51@cckd64_chk
$cdsk_ckd_recover$837:

; 2017 : 
; 2018 : cdsk_ckd_recover:
; 2019 :                     if(dev->batch)

  064c4	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  064cc	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  064d2	c1 e8 0a	 shr	 eax, 10
  064d5	83 e0 01	 and	 eax, 1
  064d8	85 c0		 test	 eax, eax
  064da	0f 84 43 01 00
	00		 je	 $LN351@cckd64_chk

; 2020 :                         // "%1d:%04X CCKD file %s: %s[%d] recovered offset 0x%16.16"PRIX64" len %"PRId64
; 2021 :                         FWRMSG( stdout, HHC00372, "I", LCSS_DEVNUM, dev->filename,

  064e0	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  064e9	74 15		 je	 SHORT $LN700@cckd64_chk
  064eb	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  064f3	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  064f7	89 84 24 c4 02
	00 00		 mov	 DWORD PTR tv3170[rsp], eax
  064fe	eb 0b		 jmp	 SHORT $LN701@cckd64_chk
$LN700@cckd64_chk:
  06500	c7 84 24 c4 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3170[rsp], 0
$LN701@cckd64_chk:
  0650b	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  06514	74 17		 je	 SHORT $LN702@cckd64_chk
  06516	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0651e	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  06522	d1 f8		 sar	 eax, 1
  06524	89 84 24 c8 02
	00 00		 mov	 DWORD PTR tv3176[rsp], eax
  0652b	eb 0b		 jmp	 SHORT $LN703@cckd64_chk
$LN702@cckd64_chk:
  0652d	c7 84 24 c8 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3176[rsp], 0
$LN703@cckd64_chk:
  06538	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06540	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  06548	48 03 c8	 add	 rcx, rax
  0654b	48 8b c1	 mov	 rax, rcx
  0654e	48 89 84 24 90
	07 00 00	 mov	 QWORD PTR tv3159[rsp], rax
  06556	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  0655e	e8 00 00 00 00	 call	 spc_typ_to_str
  06563	48 89 84 24 98
	07 00 00	 mov	 QWORD PTR tv3162[rsp], rax
  0656b	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  06573	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0657a	48 89 8c 24 a0
	07 00 00	 mov	 QWORD PTR tv3165[rsp], rcx
  06582	b9 01 00 00 00	 mov	 ecx, 1
  06587	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0658d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR l$[rsp]
  06595	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  0659a	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR tv3159[rsp]
  065a2	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  065a7	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  065ae	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  065b2	48 8b 8c 24 98
	07 00 00	 mov	 rcx, QWORD PTR tv3162[rsp]
  065ba	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  065bf	48 8b 8c 24 a0
	07 00 00	 mov	 rcx, QWORD PTR tv3165[rsp]
  065c7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  065cc	8b 8c 24 c4 02
	00 00		 mov	 ecx, DWORD PTR tv3170[rsp]
  065d3	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  065d7	8b 8c 24 c8 02
	00 00		 mov	 ecx, DWORD PTR tv3176[rsp]
  065de	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  065e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170394
  065e9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  065ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170395
  065f5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  065fa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  065ff	41 b9 03 00 00
	00		 mov	 r9d, 3
  06605	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170396
  0660c	ba e6 07 00 00	 mov	 edx, 2022		; 000007e6H
  06611	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170397
  06618	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0661e	e9 3e 01 00 00	 jmp	 $LN352@cckd64_chk
$LN351@cckd64_chk:

; 2022 :                                 spc_typ_to_str( trktyp ), trk, off + i, l );
; 2023 :                     else
; 2024 :                         // "%1d:%04X CCKD file %s: %s[%d] recovered offset 0x%16.16"PRIX64" len %"PRId64
; 2025 :                         WRMSG( HHC00372, "I", LCSS_DEVNUM, dev->filename,

  06623	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0662c	74 15		 je	 SHORT $LN704@cckd64_chk
  0662e	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  06636	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0663a	89 84 24 cc 02
	00 00		 mov	 DWORD PTR tv3199[rsp], eax
  06641	eb 0b		 jmp	 SHORT $LN705@cckd64_chk
$LN704@cckd64_chk:
  06643	c7 84 24 cc 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3199[rsp], 0
$LN705@cckd64_chk:
  0664e	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  06657	74 17		 je	 SHORT $LN706@cckd64_chk
  06659	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  06661	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  06665	d1 f8		 sar	 eax, 1
  06667	89 84 24 d0 02
	00 00		 mov	 DWORD PTR tv3205[rsp], eax
  0666e	eb 0b		 jmp	 SHORT $LN707@cckd64_chk
$LN706@cckd64_chk:
  06670	c7 84 24 d0 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3205[rsp], 0
$LN707@cckd64_chk:
  0667b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06683	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  0668b	48 03 c8	 add	 rcx, rax
  0668e	48 8b c1	 mov	 rax, rcx
  06691	48 89 84 24 a8
	07 00 00	 mov	 QWORD PTR tv3188[rsp], rax
  06699	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  066a1	e8 00 00 00 00	 call	 spc_typ_to_str
  066a6	48 89 84 24 b0
	07 00 00	 mov	 QWORD PTR tv3191[rsp], rax
  066ae	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  066b6	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  066bd	48 89 8c 24 b8
	07 00 00	 mov	 QWORD PTR tv3194[rsp], rcx
  066c5	b9 01 00 00 00	 mov	 ecx, 1
  066ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  066d0	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR l$[rsp]
  066d8	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  066dd	48 8b 8c 24 a8
	07 00 00	 mov	 rcx, QWORD PTR tv3188[rsp]
  066e5	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  066ea	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  066f1	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  066f5	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR tv3191[rsp]
  066fd	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  06702	48 8b 8c 24 b8
	07 00 00	 mov	 rcx, QWORD PTR tv3194[rsp]
  0670a	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0670f	8b 8c 24 cc 02
	00 00		 mov	 ecx, DWORD PTR tv3199[rsp]
  06716	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0671a	8b 8c 24 d0 02
	00 00		 mov	 ecx, DWORD PTR tv3205[rsp]
  06721	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  06725	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170398
  0672c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  06731	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170399
  06738	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0673d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  06742	41 b9 03 00 00
	00		 mov	 r9d, 3
  06748	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170400
  0674f	ba ea 07 00 00	 mov	 edx, 2026		; 000007eaH
  06754	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170401
  0675b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN352@cckd64_chk:

; 2026 :                                spc_typ_to_str( trktyp ), trk, off + i, l );
; 2027 :                     n--;

  06761	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR n$[rsp]
  06769	48 ff c8	 dec	 rax
  0676c	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR n$[rsp], rax

; 2028 :                     rcvtab[trk] = 2;

  06774	48 63 84 24 e8
	00 00 00	 movsxd	 rax, DWORD PTR trk$[rsp]
  0677c	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  06784	c6 04 01 02	 mov	 BYTE PTR [rcx+rax], 2

; 2029 : 
; 2030 :                     /* add recovered track to the space table */
; 2031 :                     spctab[s].spc_typ = trktyp;

  06788	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  06790	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  06794	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0679c	0f b6 94 24 a5
	00 00 00	 movzx	 edx, BYTE PTR trktyp$[rsp]
  067a4	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 2032 :                     spctab[s].spc_val = trk;

  067a7	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  067af	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  067b3	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  067bb	8b 94 24 e8 00
	00 00		 mov	 edx, DWORD PTR trk$[rsp]
  067c2	89 54 01 04	 mov	 DWORD PTR [rcx+rax+4], edx

; 2033 :                     spctab[s].spc_off = fpos + i;

  067c6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  067ce	48 8b 8c 24 98
	04 00 00	 mov	 rcx, QWORD PTR fpos$7[rsp]
  067d6	48 03 c8	 add	 rcx, rax
  067d9	48 8b c1	 mov	 rax, rcx
  067dc	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  067e4	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  067e8	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  067f0	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax

; 2034 :                     spctab[s].spc_len =

  067f5	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  067fd	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  06801	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  06809	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR l$[rsp]
  06811	48 89 54 01 20	 mov	 QWORD PTR [rcx+rax+32], rdx
  06816	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0681e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  06822	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0682a	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR l$[rsp]
  06832	48 89 54 01 18	 mov	 QWORD PTR [rcx+rax+24], rdx

; 2035 :                     spctab[s].spc_siz = l;
; 2036 :                     s++;

  06837	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  0683e	ff c0		 inc	 eax
  06840	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 2037 :                     /*
; 2038 :                      * adjust `i' knowing it will be incremented
; 2039 :                      * in the `for' loop above.
; 2040 :                      */
; 2041 :                     i += l - 1;

  06847	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  0684f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR l$[rsp]
  06857	48 8d 44 08 ff	 lea	 rax, QWORD PTR [rax+rcx-1]
  0685c	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax

; 2042 :                 } /* for each byte in the free space */

  06864	e9 4c f4 ff ff	 jmp	 $LN51@cckd64_chk
$LN52@cckd64_chk:

; 2043 : 
; 2044 :                 /* Adjust the free space for what we processed */
; 2045 :                 spctab[f].spc_off += i;

  06869	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  06872	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0687a	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  0687f	48 03 84 24 90
	00 00 00	 add	 rax, QWORD PTR i$[rsp]
  06887	48 6b 8c 24 f0
	00 00 00 28	 imul	 rcx, QWORD PTR f$[rsp], 40 ; 00000028H
  06890	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  06898	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax

; 2046 :                 spctab[f].spc_len -= i;

  0689d	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  068a6	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  068ae	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR i$[rsp]
  068b6	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  068bb	48 2b c2	 sub	 rax, rdx
  068be	48 6b 8c 24 f0
	00 00 00 28	 imul	 rcx, QWORD PTR f$[rsp], 40 ; 00000028H
  068c7	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  068cf	48 89 44 0a 18	 mov	 QWORD PTR [rdx+rcx+24], rax

; 2047 :                 spctab[f].spc_siz -= i;

  068d4	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  068dd	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  068e5	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR i$[rsp]
  068ed	48 8b 44 01 20	 mov	 rax, QWORD PTR [rcx+rax+32]
  068f2	48 2b c2	 sub	 rax, rdx
  068f5	48 6b 8c 24 f0
	00 00 00 28	 imul	 rcx, QWORD PTR f$[rsp], 40 ; 00000028H
  068fe	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  06906	48 89 44 0a 20	 mov	 QWORD PTR [rdx+rcx+32], rax

; 2048 : 
; 2049 :             } /* for each free space */

  0690b	e9 9e f1 ff ff	 jmp	 $LN45@cckd64_chk
$LN46@cckd64_chk:
$LN310@cckd64_chk:

; 2050 : 
; 2051 :         } /* if ckddasd */
; 2052 : 
; 2053 :         /*-----------------------------------------------------------
; 2054 :          * fba recovery
; 2055 :          *-----------------------------------------------------------*/
; 2056 : 
; 2057 :         /*
; 2058 :          * FBA blkgrps are harder to recover than CKD tracks because
; 2059 :          * there is not any information within the blkgrp itself to
; 2060 :          * validate (unlike a track, which has count fields that
; 2061 :          * terminate in an end-of-track marker).
; 2062 :          *
; 2063 :          * On the first pass we recover all compressed blkgrps since
; 2064 :          * these are readily validated (they must uncompress to a
; 2065 :          * certain size, CFBA_BLKGRP_SIZE+CKD_TRKHDR_SIZE).  We
; 2066 :          * also recover uncompressed blkgrps if they are followed by
; 2067 :          * a valid trkhdr (and don't occur too close to the beginning
; 2068 :          * of the file).
; 2069 :          *
; 2070 :          * On the second pass we recover all uncompressed blkgrps
; 2071 :          * that weren't recovered in the first pass.  The only
; 2072 :          * criteria is that the compression byte is zero and the
; 2073 :          * 4 byte blkgrp number is in range and there are at least
; 2074 :          * CFBA_BLKGRP_SIZE bytes following.
; 2075 :          */
; 2076 : 
; 2077 :         for (pass = 0; fbadasd && pass < 2; pass++)

  06910	c7 84 24 1c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR pass$[rsp], 0
  0691b	eb 10		 jmp	 SHORT $LN66@cckd64_chk
$LN64@cckd64_chk:
  0691d	8b 84 24 1c 01
	00 00		 mov	 eax, DWORD PTR pass$[rsp]
  06924	ff c0		 inc	 eax
  06926	89 84 24 1c 01
	00 00		 mov	 DWORD PTR pass$[rsp], eax
$LN66@cckd64_chk:
  0692d	0f b6 84 24 18
	01 00 00	 movzx	 eax, BYTE PTR fbadasd$[rsp]
  06935	85 c0		 test	 eax, eax
  06937	0f 84 7c 0e 00
	00		 je	 $LN65@cckd64_chk
  0693d	83 bc 24 1c 01
	00 00 02	 cmp	 DWORD PTR pass$[rsp], 2
  06945	0f 8d 6e 0e 00
	00		 jge	 $LN65@cckd64_chk

; 2078 :         {
; 2079 :             lopos = CCKD64_L1TAB_POS + (cdevhdr.num_L1tab * sizeof( CCKD64_L1ENT ));

  0694b	48 63 84 24 94
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  06953	48 8d 04 c5 00
	04 00 00	 lea	 rax, QWORD PTR [rax*8+1024]
  0695b	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR lopos$[rsp], rax

; 2080 :             if (pass == 0)

  06963	83 bc 24 1c 01
	00 00 00	 cmp	 DWORD PTR pass$[rsp], 0
  0696b	75 25		 jne	 SHORT $LN353@cckd64_chk

; 2081 :                 lopos += (cdevhdr.num_L1tab * CCKD64_L2TAB_SIZE);

  0696d	48 63 84 24 94
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  06975	48 69 c0 00 10
	00 00		 imul	 rax, rax, 4096		; 00001000H
  0697c	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR lopos$[rsp]
  06984	48 03 c8	 add	 rcx, rax
  06987	48 8b c1	 mov	 rax, rcx
  0698a	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR lopos$[rsp], rax
$LN353@cckd64_chk:

; 2082 : 
; 2083 :             /* recovery loop */
; 2084 :             s = cdsk_build_free_space64 (spctab, s);

  06992	8b 94 24 a0 00
	00 00		 mov	 edx, DWORD PTR s$[rsp]
  06999	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  069a1	e8 00 00 00 00	 call	 cdsk_build_free_space64
  069a6	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 2085 :             for (f = 0; spctab[f].spc_typ != SPCTAB_EOF && n > 0; )

  069ad	48 c7 84 24 f0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR f$[rsp], 0
$LN67@cckd64_chk:
  069b9	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  069c2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  069ca	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  069ce	83 f8 08	 cmp	 eax, 8
  069d1	0f 84 dd 0d 00
	00		 je	 $LN68@cckd64_chk
  069d7	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR n$[rsp], 0
  069e0	0f 8e ce 0d 00
	00		 jle	 $LN68@cckd64_chk

; 2086 :             {
; 2087 :                 U64 flen, fpos;
; 2088 : 
; 2089 :                 /* next free space if too small */
; 2090 :                 if (spctab[f].spc_typ != SPCTAB_FREE
; 2091 :                  || spctab[f].spc_siz <= CKD_MIN_TRKSIZE
; 2092 :                  || (pass == 1 && spctab[f].spc_siz < blkgrpsz))

  069e6	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  069ef	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  069f7	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  069fb	83 f8 07	 cmp	 eax, 7
  069fe	75 46		 jne	 SHORT $LN355@cckd64_chk
  06a00	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  06a09	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  06a11	48 83 7c 01 20
	0d		 cmp	 QWORD PTR [rcx+rax+32], 13
  06a17	76 2d		 jbe	 SHORT $LN355@cckd64_chk
  06a19	83 bc 24 1c 01
	00 00 01	 cmp	 DWORD PTR pass$[rsp], 1
  06a21	0f 85 84 00 00
	00		 jne	 $LN354@cckd64_chk
  06a27	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  06a30	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR blkgrpsz$[rsp]
  06a37	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  06a3f	48 39 4c 02 20	 cmp	 QWORD PTR [rdx+rax+32], rcx
  06a44	73 65		 jae	 SHORT $LN354@cckd64_chk
$LN355@cckd64_chk:

; 2093 :                 {
; 2094 :                     for (f = f + 1; spctab[f].spc_typ != SPCTAB_EOF; f++)

  06a46	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  06a4e	48 ff c0	 inc	 rax
  06a51	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR f$[rsp], rax
  06a59	eb 13		 jmp	 SHORT $LN72@cckd64_chk
$LN70@cckd64_chk:
  06a5b	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  06a63	48 ff c0	 inc	 rax
  06a66	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR f$[rsp], rax
$LN72@cckd64_chk:
  06a6e	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  06a77	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  06a7f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  06a83	83 f8 08	 cmp	 eax, 8
  06a86	74 1e		 je	 SHORT $LN71@cckd64_chk

; 2095 :                         if (spctab[f].spc_typ == SPCTAB_FREE)

  06a88	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  06a91	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  06a99	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  06a9d	83 f8 07	 cmp	 eax, 7
  06aa0	75 02		 jne	 SHORT $LN356@cckd64_chk

; 2096 :                             break;

  06aa2	eb 02		 jmp	 SHORT $LN71@cckd64_chk
$LN356@cckd64_chk:
  06aa4	eb b5		 jmp	 SHORT $LN70@cckd64_chk
$LN71@cckd64_chk:

; 2097 :                     continue;

  06aa6	e9 0e ff ff ff	 jmp	 $LN67@cckd64_chk
$LN354@cckd64_chk:

; 2098 :                 }
; 2099 : 
; 2100 :                 fpos = spctab[f].spc_off;

  06aab	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  06ab4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  06abc	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  06ac1	48 89 84 24 00
	04 00 00	 mov	 QWORD PTR fpos$5[rsp], rax

; 2101 :                 flen = spctab[f].spc_siz;

  06ac9	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  06ad2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  06ada	48 8b 44 01 20	 mov	 rax, QWORD PTR [rcx+rax+32]
  06adf	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR flen$1[rsp], rax

; 2102 :                 /*
; 2103 :                  * calculate length to read
; 2104 :                  * if flen > len then we only read part of the space
; 2105 :                  */
; 2106 :                 len = flen < sizeof(buf) ? flen : sizeof(buf);

  06ae7	48 81 bc 24 88
	01 00 00 00 00
	04 00		 cmp	 QWORD PTR flen$1[rsp], 262144 ; 00040000H
  06af3	73 12		 jae	 SHORT $LN708@cckd64_chk
  06af5	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR flen$1[rsp]
  06afd	48 89 84 24 a0
	04 00 00	 mov	 QWORD PTR tv3351[rsp], rax
  06b05	eb 0c		 jmp	 SHORT $LN709@cckd64_chk
$LN708@cckd64_chk:
  06b07	48 c7 84 24 a0
	04 00 00 00 00
	04 00		 mov	 QWORD PTR tv3351[rsp], 262144 ; 00040000H
$LN709@cckd64_chk:
  06b13	48 8b 84 24 a0
	04 00 00	 mov	 rax, QWORD PTR tv3351[rsp]
  06b1b	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR len$[rsp], rax

; 2107 : 
; 2108 :                 /* read the free space */
; 2109 :                 off = fpos;

  06b23	48 8b 84 24 00
	04 00 00	 mov	 rax, QWORD PTR fpos$5[rsp]
  06b2b	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 2110 :                 if (lseek (fd, off, SEEK_SET) < 0)

  06b33	45 33 c0	 xor	 r8d, r8d
  06b36	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  06b3e	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  06b45	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  06b4b	48 85 c0	 test	 rax, rax
  06b4e	7d 05		 jge	 SHORT $LN357@cckd64_chk

; 2111 :                     goto cdsk_lseek_error;

  06b50	e9 dd 39 00 00	 jmp	 $cdsk_lseek_error$830
$LN357@cckd64_chk:

; 2112 :                 gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  06b55	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  06b5c	83 38 00	 cmp	 DWORD PTR [rax], 0
  06b5f	74 43		 je	 SHORT $LN358@cckd64_chk
  06b61	41 b8 01 00 00
	00		 mov	 r8d, 1
  06b67	33 d2		 xor	 edx, edx
  06b69	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  06b70	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  06b76	48 89 84 24 c0
	07 00 00	 mov	 QWORD PTR tv3359[rsp], rax
  06b7e	b9 02 00 00 00	 mov	 ecx, 2
  06b83	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  06b89	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR tv3359[rsp]
  06b91	4c 8b c1	 mov	 r8, rcx
  06b94	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170408
  06b9b	48 8b c8	 mov	 rcx, rax
  06b9e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN358@cckd64_chk:

; 2113 :                 if ((U64)(rc = read (fd, buf, (unsigned int) len)) != len)

  06ba4	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  06bac	48 8d 94 24 90
	31 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  06bb4	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  06bbb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  06bc1	89 84 24 bc 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  06bc8	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  06bd0	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  06bd8	74 05		 je	 SHORT $LN359@cckd64_chk

; 2114 :                     goto cdsk_read_error;

  06bda	e9 a3 3b 00 00	 jmp	 $cdsk_read_error$831
$LN359@cckd64_chk:

; 2115 : 
; 2116 :                 /* Scan the space */
; 2117 :                 for (i = 0; i < (S64)(len - CKD_MIN_TRKSIZE); i++)

  06bdf	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  06beb	eb 13		 jmp	 SHORT $LN75@cckd64_chk
$LN73@cckd64_chk:
  06bed	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06bf5	48 ff c0	 inc	 rax
  06bf8	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN75@cckd64_chk:
  06c00	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  06c08	48 83 e8 0d	 sub	 rax, 13
  06c0c	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  06c14	0f 8d f3 0a 00
	00		 jge	 $LN74@cckd64_chk

; 2118 :                 {
; 2119 :                     /* For pass 1 the size left must be at least blkgrpsz */
; 2120 :                     if (pass == 1 && len - i < (U64)blkgrpsz)

  06c1a	83 bc 24 1c 01
	00 00 01	 cmp	 DWORD PTR pass$[rsp], 1
  06c22	75 27		 jne	 SHORT $LN360@cckd64_chk
  06c24	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06c2c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  06c34	48 2b c8	 sub	 rcx, rax
  06c37	48 8b c1	 mov	 rax, rcx
  06c3a	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR blkgrpsz$[rsp]
  06c41	48 3b c1	 cmp	 rax, rcx
  06c44	73 05		 jae	 SHORT $LN360@cckd64_chk

; 2121 :                         break;

  06c46	e9 c2 0a 00 00	 jmp	 $LN74@cckd64_chk
$LN360@cckd64_chk:

; 2122 : 
; 2123 :                     /* Check compression byte */
; 2124 :                     if ((pass == 0 && compmask[buf[i]])
; 2125 :                      || (pass == 1 && buf[i] != CCKD_COMPRESS_NONE))

  06c4b	83 bc 24 1c 01
	00 00 00	 cmp	 DWORD PTR pass$[rsp], 0
  06c53	75 1c		 jne	 SHORT $LN363@cckd64_chk
  06c55	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06c5d	0f b6 84 04 90
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  06c65	0f b6 84 04 10
	30 00 00	 movzx	 eax, BYTE PTR compmask$[rsp+rax]
  06c6d	85 c0		 test	 eax, eax
  06c6f	75 1e		 jne	 SHORT $LN362@cckd64_chk
$LN363@cckd64_chk:
  06c71	83 bc 24 1c 01
	00 00 01	 cmp	 DWORD PTR pass$[rsp], 1
  06c79	75 19		 jne	 SHORT $LN361@cckd64_chk
  06c7b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06c83	0f b6 84 04 90
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  06c8b	85 c0		 test	 eax, eax
  06c8d	74 05		 je	 SHORT $LN361@cckd64_chk
$LN362@cckd64_chk:

; 2126 :                         continue;

  06c8f	e9 59 ff ff ff	 jmp	 $LN73@cckd64_chk
$LN361@cckd64_chk:

; 2127 : 
; 2128 :                     /* Fetch possible trkhdr */
; 2129 :                     comp = buf[i];

  06c94	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06c9c	0f b6 84 04 90
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  06ca4	89 84 24 fc 00
	00 00		 mov	 DWORD PTR comp$[rsp], eax

; 2130 :                     blkgrp = fetch_fw (buf + i + 1);

  06cab	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06cb3	48 8d 84 04 91
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+1]
  06cbb	48 8b c8	 mov	 rcx, rax
  06cbe	e8 00 00 00 00	 call	 fetch_fw_noswap
  06cc3	8b c8		 mov	 ecx, eax
  06cc5	e8 00 00 00 00	 call	 _byteswap_ulong
  06cca	89 84 24 08 01
	00 00		 mov	 DWORD PTR blkgrp$[rsp], eax

; 2131 : 
; 2132 :                     /* Validate possible trkhdr */
; 2133 :                     if (blkgrp < 0 || blkgrp >= blkgrps
; 2134 :                      || rcvtab[blkgrp] != 1)

  06cd1	83 bc 24 08 01
	00 00 00	 cmp	 DWORD PTR blkgrp$[rsp], 0
  06cd9	7c 29		 jl	 SHORT $LN365@cckd64_chk
  06cdb	8b 84 24 80 01
	00 00		 mov	 eax, DWORD PTR blkgrps$[rsp]
  06ce2	39 84 24 08 01
	00 00		 cmp	 DWORD PTR blkgrp$[rsp], eax
  06ce9	7d 19		 jge	 SHORT $LN365@cckd64_chk
  06ceb	48 63 84 24 08
	01 00 00	 movsxd	 rax, DWORD PTR blkgrp$[rsp]
  06cf3	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  06cfb	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  06cff	83 f8 01	 cmp	 eax, 1
  06d02	74 05		 je	 SHORT $LN364@cckd64_chk
$LN365@cckd64_chk:

; 2135 :                         continue;

  06d04	e9 e4 fe ff ff	 jmp	 $LN73@cckd64_chk
$LN364@cckd64_chk:

; 2136 : 
; 2137 :                     /* Validation for compress none */
; 2138 :                     if (comp == CCKD_COMPRESS_NONE
; 2139 :                      && flen == len && len - i < (U64)blkgrpsz)

  06d09	83 bc 24 fc 00
	00 00 00	 cmp	 DWORD PTR comp$[rsp], 0
  06d11	75 3b		 jne	 SHORT $LN366@cckd64_chk
  06d13	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  06d1b	48 39 84 24 88
	01 00 00	 cmp	 QWORD PTR flen$1[rsp], rax
  06d23	75 29		 jne	 SHORT $LN366@cckd64_chk
  06d25	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06d2d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  06d35	48 2b c8	 sub	 rcx, rax
  06d38	48 8b c1	 mov	 rax, rcx
  06d3b	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR blkgrpsz$[rsp]
  06d42	48 3b c1	 cmp	 rax, rcx
  06d45	73 07		 jae	 SHORT $LN366@cckd64_chk

; 2140 :                         continue;

  06d47	e9 a1 fe ff ff	 jmp	 $LN73@cckd64_chk
  06d4c	eb 7b		 jmp	 SHORT $LN367@cckd64_chk
$LN366@cckd64_chk:

; 2141 : 
; 2142 :                     /* Quick validation for zlib */
; 2143 :                     else if (comp == CCKD_COMPRESS_ZLIB
; 2144 :                      && fetch_hw(buf + i + 5) % 31 != 0)

  06d4e	83 bc 24 fc 00
	00 00 01	 cmp	 DWORD PTR comp$[rsp], 1
  06d56	75 38		 jne	 SHORT $LN368@cckd64_chk
  06d58	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06d60	48 8d 84 04 95
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+5]
  06d68	48 8b c8	 mov	 rcx, rax
  06d6b	e8 00 00 00 00	 call	 fetch_hw_noswap
  06d70	0f b7 c8	 movzx	 ecx, ax
  06d73	e8 00 00 00 00	 call	 _byteswap_ushort
  06d78	0f b7 c0	 movzx	 eax, ax
  06d7b	99		 cdq
  06d7c	b9 1f 00 00 00	 mov	 ecx, 31
  06d81	f7 f9		 idiv	 ecx
  06d83	8b c2		 mov	 eax, edx
  06d85	85 c0		 test	 eax, eax
  06d87	74 07		 je	 SHORT $LN368@cckd64_chk

; 2145 :                         continue;

  06d89	e9 5f fe ff ff	 jmp	 $LN73@cckd64_chk
  06d8e	eb 39		 jmp	 SHORT $LN369@cckd64_chk
$LN368@cckd64_chk:

; 2146 : 
; 2147 :                     /* Quick validation for bzip2 */
; 2148 :                     else if (comp == CCKD_COMPRESS_BZIP2
; 2149 :                      && (buf[i+5] != 'B' || buf[i+6] != 'Z'))

  06d90	83 bc 24 fc 00
	00 00 02	 cmp	 DWORD PTR comp$[rsp], 2
  06d98	75 2f		 jne	 SHORT $LN370@cckd64_chk
  06d9a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06da2	0f b6 84 04 95
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax+5]
  06daa	83 f8 42	 cmp	 eax, 66			; 00000042H
  06dad	75 15		 jne	 SHORT $LN371@cckd64_chk
  06daf	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06db7	0f b6 84 04 96
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax+6]
  06dbf	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  06dc2	74 05		 je	 SHORT $LN370@cckd64_chk
$LN371@cckd64_chk:

; 2150 :                         continue;

  06dc4	e9 24 fe ff ff	 jmp	 $LN73@cckd64_chk
$LN370@cckd64_chk:
$LN369@cckd64_chk:
$LN367@cckd64_chk:

; 2151 :                     /*
; 2152 :                      * If we are in `borrowed space' then start over
; 2153 :                      * with the current position at the beginning
; 2154 :                      */
; 2155 :                     if (flen > len && i > (S64)(len - blkgrpsz))

  06dc9	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  06dd1	48 39 84 24 88
	01 00 00	 cmp	 QWORD PTR flen$1[rsp], rax
  06dd9	76 24		 jbe	 SHORT $LN372@cckd64_chk
  06ddb	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR blkgrpsz$[rsp]
  06de2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  06dea	48 2b c8	 sub	 rcx, rax
  06ded	48 8b c1	 mov	 rax, rcx
  06df0	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  06df8	7e 05		 jle	 SHORT $LN372@cckd64_chk

; 2156 :                         break;

  06dfa	e9 0e 09 00 00	 jmp	 $LN74@cckd64_chk
$LN372@cckd64_chk:

; 2157 : 
; 2158 :                     /* Checks for comp none */
; 2159 :                     if (comp == CCKD_COMPRESS_NONE)

  06dff	83 bc 24 fc 00
	00 00 00	 cmp	 DWORD PTR comp$[rsp], 0
  06e07	0f 85 2a 01 00
	00		 jne	 $LN373@cckd64_chk

; 2160 :                     {
; 2161 :                         l = blkgrpsz;

  06e0d	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR blkgrpsz$[rsp]
  06e14	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR l$[rsp], rax

; 2162 :                         if (len - i < (U64)blkgrpsz || fpos + i < lopos)

  06e1c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06e24	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  06e2c	48 2b c8	 sub	 rcx, rax
  06e2f	48 8b c1	 mov	 rax, rcx
  06e32	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR blkgrpsz$[rsp]
  06e39	48 3b c1	 cmp	 rax, rcx
  06e3c	72 20		 jb	 SHORT $LN375@cckd64_chk
  06e3e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06e46	48 8b 8c 24 00
	04 00 00	 mov	 rcx, QWORD PTR fpos$5[rsp]
  06e4e	48 03 c8	 add	 rcx, rax
  06e51	48 8b c1	 mov	 rax, rcx
  06e54	48 3b 84 24 48
	01 00 00	 cmp	 rax, QWORD PTR lopos$[rsp]
  06e5c	73 05		 jae	 SHORT $LN374@cckd64_chk
$LN375@cckd64_chk:

; 2163 :                             continue;

  06e5e	e9 8a fd ff ff	 jmp	 $LN73@cckd64_chk
$LN374@cckd64_chk:

; 2164 :                         if (len - i == (U64)blkgrpsz && flen == len)

  06e63	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06e6b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  06e73	48 2b c8	 sub	 rcx, rax
  06e76	48 8b c1	 mov	 rax, rcx
  06e79	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR blkgrpsz$[rsp]
  06e80	48 3b c1	 cmp	 rax, rcx
  06e83	75 17		 jne	 SHORT $LN376@cckd64_chk
  06e85	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  06e8d	48 39 84 24 88
	01 00 00	 cmp	 QWORD PTR flen$1[rsp], rax
  06e95	75 05		 jne	 SHORT $LN376@cckd64_chk

; 2165 :                             goto cdsk_fba_recover;

  06e97	e9 8e 04 00 00	 jmp	 $cdsk_fba_recover$838
$LN376@cckd64_chk:

; 2166 :                         /* Pass 0 checks */
; 2167 :                         if (pass == 0
; 2168 :                          && (len - i - l < CKD_MIN_TRKSIZE

  06e9c	83 bc 24 1c 01
	00 00 00	 cmp	 DWORD PTR pass$[rsp], 0
  06ea4	0f 85 88 00 00
	00		 jne	 $LN377@cckd64_chk
  06eaa	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06eb2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  06eba	48 2b c8	 sub	 rcx, rax
  06ebd	48 8b c1	 mov	 rax, rcx
  06ec0	48 2b 84 24 c8
	00 00 00	 sub	 rax, QWORD PTR l$[rsp]
  06ec8	48 83 f8 0d	 cmp	 rax, 13
  06ecc	72 5f		 jb	 SHORT $LN378@cckd64_chk
  06ece	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  06ed6	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  06ede	48 03 c8	 add	 rcx, rax
  06ee1	48 8b c1	 mov	 rax, rcx
  06ee4	0f b6 84 04 90
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  06eec	0f b6 84 04 10
	30 00 00	 movzx	 eax, BYTE PTR compmask$[rsp+rax]
  06ef4	85 c0		 test	 eax, eax
  06ef6	75 35		 jne	 SHORT $LN378@cckd64_chk
  06ef8	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06f00	48 8d 84 04 90
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  06f08	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR l$[rsp]
  06f10	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  06f15	48 8b c8	 mov	 rcx, rax
  06f18	e8 00 00 00 00	 call	 fetch_fw_noswap
  06f1d	8b c8		 mov	 ecx, eax
  06f1f	e8 00 00 00 00	 call	 _byteswap_ulong
  06f24	3b 84 24 80 01
	00 00		 cmp	 eax, DWORD PTR blkgrps$[rsp]
  06f2b	72 05		 jb	 SHORT $LN377@cckd64_chk
$LN378@cckd64_chk:

; 2169 :                           || compmask[buf[i+l]]
; 2170 :                           || fetch_fw (buf+i+l+1) >= (U32)blkgrps)
; 2171 :                            )
; 2172 :                             continue;

  06f2d	e9 bb fc ff ff	 jmp	 $LN73@cckd64_chk
$LN377@cckd64_chk:

; 2173 :                         goto cdsk_fba_recover;

  06f32	e9 f3 03 00 00	 jmp	 $cdsk_fba_recover$838
$LN373@cckd64_chk:

; 2174 :                     }
; 2175 : 
; 2176 :                     /* The tests below are for pass 0 only */
; 2177 :                     if (pass == 1)

  06f37	83 bc 24 1c 01
	00 00 01	 cmp	 DWORD PTR pass$[rsp], 1
  06f3f	75 05		 jne	 SHORT $LN379@cckd64_chk

; 2178 :                         continue;

  06f41	e9 a7 fc ff ff	 jmp	 $LN73@cckd64_chk
$LN379@cckd64_chk:

; 2179 : 
; 2180 :                     /* Check short `length' */
; 2181 :                     if (flen == len && (l = len - i) <= 1024)

  06f46	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  06f4e	48 39 84 24 88
	01 00 00	 cmp	 QWORD PTR flen$1[rsp], rax
  06f56	0f 85 c3 00 00
	00		 jne	 $LN380@cckd64_chk
  06f5c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06f64	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  06f6c	48 2b c8	 sub	 rcx, rax
  06f6f	48 8b c1	 mov	 rax, rcx
  06f72	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR l$[rsp], rax
  06f7a	48 81 bc 24 c8
	00 00 00 00 04
	00 00		 cmp	 QWORD PTR l$[rsp], 1024	; 00000400H
  06f86	0f 8f 93 00 00
	00		 jg	 $LN380@cckd64_chk

; 2182 :                     {
; 2183 :                         if (cdsk_valid_trk (blkgrp, buf+i, heads, (int) l))

  06f8c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06f94	48 8d 84 04 90
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  06f9c	44 8b 8c 24 c8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  06fa4	44 8b 84 24 dc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  06fac	48 8b d0	 mov	 rdx, rax
  06faf	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR blkgrp$[rsp]
  06fb6	e8 00 00 00 00	 call	 cdsk_valid_trk
  06fbb	85 c0		 test	 eax, eax
  06fbd	74 60		 je	 SHORT $LN381@cckd64_chk
$LN76@cckd64_chk:

; 2184 :                         {
; 2185 :                             while (cdsk_valid_trk (blkgrp, buf+i, heads, (int) --l));

  06fbf	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  06fc7	48 ff c8	 dec	 rax
  06fca	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR l$[rsp], rax
  06fd2	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  06fda	48 8d 84 04 90
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  06fe2	44 8b 8c 24 c8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  06fea	44 8b 84 24 dc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  06ff2	48 8b d0	 mov	 rdx, rax
  06ff5	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR blkgrp$[rsp]
  06ffc	e8 00 00 00 00	 call	 cdsk_valid_trk
  07001	85 c0		 test	 eax, eax
  07003	74 02		 je	 SHORT $LN77@cckd64_chk
  07005	eb b8		 jmp	 SHORT $LN76@cckd64_chk
$LN77@cckd64_chk:

; 2186 :                             l++;

  07007	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  0700f	48 ff c0	 inc	 rax
  07012	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR l$[rsp], rax

; 2187 :                             goto cdsk_fba_recover;

  0701a	e9 0b 03 00 00	 jmp	 $cdsk_fba_recover$838
$LN381@cckd64_chk:
$LN380@cckd64_chk:

; 2188 :                         }
; 2189 :                     }
; 2190 : 
; 2191 :                     /* Scan for next trkhdr */
; 2192 :                     for (j = i +          CKD_MIN_TRKSIZE;

  0701f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  07027	48 83 c0 0d	 add	 rax, 13
  0702b	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR j$[rsp], rax
  07033	eb 13		 jmp	 SHORT $LN80@cckd64_chk
$LN78@cckd64_chk:

; 2194 :                          j++)

  07035	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  0703d	48 ff c0	 inc	 rax
  07040	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR j$[rsp], rax
$LN80@cckd64_chk:

; 2193 :                          j <= (S64)(len - CKD_MIN_TRKSIZE);

  07048	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  07050	48 83 e8 0d	 sub	 rax, 13
  07054	48 39 84 24 d0
	00 00 00	 cmp	 QWORD PTR j$[rsp], rax
  0705c	0f 8f 5c 01 00
	00		 jg	 $LN79@cckd64_chk

; 2195 :                     {
; 2196 :                         if (j - i > (S64)blkgrpsz) break;

  07062	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  0706a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR j$[rsp]
  07072	48 2b c8	 sub	 rcx, rax
  07075	48 8b c1	 mov	 rax, rcx
  07078	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR blkgrpsz$[rsp]
  0707f	48 3b c1	 cmp	 rax, rcx
  07082	7e 05		 jle	 SHORT $LN382@cckd64_chk
  07084	e9 35 01 00 00	 jmp	 $LN79@cckd64_chk
$LN382@cckd64_chk:

; 2197 : 
; 2198 :                         if (compmask[buf[j]] != 0
; 2199 :                          || fetch_fw(buf+j+1) >= (U32)blkgrps)

  07089	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  07091	0f b6 84 04 90
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  07099	0f b6 84 04 10
	30 00 00	 movzx	 eax, BYTE PTR compmask$[rsp+rax]
  070a1	85 c0		 test	 eax, eax
  070a3	75 28		 jne	 SHORT $LN384@cckd64_chk
  070a5	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  070ad	48 8d 84 04 91
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+1]
  070b5	48 8b c8	 mov	 rcx, rax
  070b8	e8 00 00 00 00	 call	 fetch_fw_noswap
  070bd	8b c8		 mov	 ecx, eax
  070bf	e8 00 00 00 00	 call	 _byteswap_ulong
  070c4	3b 84 24 80 01
	00 00		 cmp	 eax, DWORD PTR blkgrps$[rsp]
  070cb	72 05		 jb	 SHORT $LN383@cckd64_chk
$LN384@cckd64_chk:

; 2200 :                             continue;

  070cd	e9 63 ff ff ff	 jmp	 $LN78@cckd64_chk
$LN383@cckd64_chk:

; 2201 : 
; 2202 :                         /* check zlib compressed header */
; 2203 :                         if (buf[j] == CCKD_COMPRESS_ZLIB
; 2204 :                          && fetch_hw(buf + j + 5) % 31 != 0)

  070d2	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  070da	0f b6 84 04 90
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  070e2	83 f8 01	 cmp	 eax, 1
  070e5	75 38		 jne	 SHORT $LN385@cckd64_chk
  070e7	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  070ef	48 8d 84 04 95
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+5]
  070f7	48 8b c8	 mov	 rcx, rax
  070fa	e8 00 00 00 00	 call	 fetch_hw_noswap
  070ff	0f b7 c8	 movzx	 ecx, ax
  07102	e8 00 00 00 00	 call	 _byteswap_ushort
  07107	0f b7 c0	 movzx	 eax, ax
  0710a	99		 cdq
  0710b	b9 1f 00 00 00	 mov	 ecx, 31
  07110	f7 f9		 idiv	 ecx
  07112	8b c2		 mov	 eax, edx
  07114	85 c0		 test	 eax, eax
  07116	74 07		 je	 SHORT $LN385@cckd64_chk

; 2205 :                             continue;

  07118	e9 18 ff ff ff	 jmp	 $LN78@cckd64_chk
  0711d	eb 44		 jmp	 SHORT $LN386@cckd64_chk
$LN385@cckd64_chk:

; 2206 : 
; 2207 :                         /* check bzip2 compressed header */
; 2208 :                         else if (buf[j] == CCKD_COMPRESS_BZIP2
; 2209 :                          && (buf[j+5] != 'B' || buf[j+6] != 'Z'))

  0711f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  07127	0f b6 84 04 90
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  0712f	83 f8 02	 cmp	 eax, 2
  07132	75 2f		 jne	 SHORT $LN387@cckd64_chk
  07134	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  0713c	0f b6 84 04 95
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax+5]
  07144	83 f8 42	 cmp	 eax, 66			; 00000042H
  07147	75 15		 jne	 SHORT $LN388@cckd64_chk
  07149	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  07151	0f b6 84 04 96
	31 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax+6]
  07159	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  0715c	74 05		 je	 SHORT $LN387@cckd64_chk
$LN388@cckd64_chk:

; 2210 :                                 continue;

  0715e	e9 d2 fe ff ff	 jmp	 $LN78@cckd64_chk
$LN387@cckd64_chk:
$LN386@cckd64_chk:

; 2211 : 
; 2212 :                         /* check to possible trkhdr */
; 2213 :                         l = j - i;

  07163	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  0716b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR j$[rsp]
  07173	48 2b c8	 sub	 rcx, rax
  07176	48 8b c1	 mov	 rax, rcx
  07179	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR l$[rsp], rax

; 2214 :                         if (cdsk_valid_trk (blkgrp, buf+i, heads, (int) l))

  07181	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  07189	48 8d 84 04 90
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  07191	44 8b 8c 24 c8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  07199	44 8b 84 24 dc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  071a1	48 8b d0	 mov	 rdx, rax
  071a4	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR blkgrp$[rsp]
  071ab	e8 00 00 00 00	 call	 cdsk_valid_trk
  071b0	85 c0		 test	 eax, eax
  071b2	74 05		 je	 SHORT $LN389@cckd64_chk

; 2215 :                         {
; 2216 : #if 0
; 2217 :                             while (cdsk_valid_trk (blkgrp, buf+i, heads, (int) --l));
; 2218 :                             l++;
; 2219 : #endif
; 2220 :                             goto cdsk_fba_recover;

  071b4	e9 71 01 00 00	 jmp	 $cdsk_fba_recover$838
$LN389@cckd64_chk:

; 2221 :                         }
; 2222 : 
; 2223 :                     } /* scan for next trkhdr */

  071b9	e9 77 fe ff ff	 jmp	 $LN78@cckd64_chk
$LN79@cckd64_chk:

; 2224 : 
; 2225 :                     /* Check `length' */
; 2226 :                     l = len - i;

  071be	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  071c6	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  071ce	48 2b c8	 sub	 rcx, rax
  071d1	48 8b c1	 mov	 rax, rcx
  071d4	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR l$[rsp], rax

; 2227 :                     if (flen == len && l <= (S64)blkgrpsz)

  071dc	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  071e4	48 39 84 24 88
	01 00 00	 cmp	 QWORD PTR flen$1[rsp], rax
  071ec	0f 85 a8 00 00
	00		 jne	 $LN390@cckd64_chk
  071f2	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR blkgrpsz$[rsp]
  071f9	48 39 84 24 c8
	00 00 00	 cmp	 QWORD PTR l$[rsp], rax
  07201	0f 8f 93 00 00
	00		 jg	 $LN390@cckd64_chk

; 2228 :                     {
; 2229 :                         if (cdsk_valid_trk (blkgrp, buf+i, heads, (int) l))

  07207	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  0720f	48 8d 84 04 90
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  07217	44 8b 8c 24 c8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  0721f	44 8b 84 24 dc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  07227	48 8b d0	 mov	 rdx, rax
  0722a	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR blkgrp$[rsp]
  07231	e8 00 00 00 00	 call	 cdsk_valid_trk
  07236	85 c0		 test	 eax, eax
  07238	74 60		 je	 SHORT $LN391@cckd64_chk
$LN81@cckd64_chk:

; 2230 :                         {
; 2231 :                             while (cdsk_valid_trk (blkgrp, buf+i, heads, (int) --l));

  0723a	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  07242	48 ff c8	 dec	 rax
  07245	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR l$[rsp], rax
  0724d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  07255	48 8d 84 04 90
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  0725d	44 8b 8c 24 c8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  07265	44 8b 84 24 dc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  0726d	48 8b d0	 mov	 rdx, rax
  07270	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR blkgrp$[rsp]
  07277	e8 00 00 00 00	 call	 cdsk_valid_trk
  0727c	85 c0		 test	 eax, eax
  0727e	74 02		 je	 SHORT $LN82@cckd64_chk
  07280	eb b8		 jmp	 SHORT $LN81@cckd64_chk
$LN82@cckd64_chk:

; 2232 :                             l++;

  07282	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  0728a	48 ff c0	 inc	 rax
  0728d	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR l$[rsp], rax

; 2233 :                             goto cdsk_fba_recover;

  07295	e9 90 00 00 00	 jmp	 $cdsk_fba_recover$838
$LN391@cckd64_chk:
$LN390@cckd64_chk:

; 2234 :                         }
; 2235 :                     }
; 2236 : 
; 2237 :                     /* Scan all lengths */
; 2238 :                     for (l = CKD_MIN_TRKSIZE; i + l <= (S64)len; l++)

  0729a	48 c7 84 24 c8
	00 00 00 0d 00
	00 00		 mov	 QWORD PTR l$[rsp], 13
  072a6	eb 13		 jmp	 SHORT $LN85@cckd64_chk
$LN83@cckd64_chk:
  072a8	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  072b0	48 ff c0	 inc	 rax
  072b3	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR l$[rsp], rax
$LN85@cckd64_chk:
  072bb	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  072c3	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  072cb	48 03 c8	 add	 rcx, rax
  072ce	48 8b c1	 mov	 rax, rcx
  072d1	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  072d9	7f 4a		 jg	 SHORT $LN84@cckd64_chk

; 2239 :                     {
; 2240 :                         if (l > (S64)blkgrpsz)

  072db	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR blkgrpsz$[rsp]
  072e2	48 39 84 24 c8
	00 00 00	 cmp	 QWORD PTR l$[rsp], rax
  072ea	7e 02		 jle	 SHORT $LN392@cckd64_chk

; 2241 :                             break;

  072ec	eb 37		 jmp	 SHORT $LN84@cckd64_chk
$LN392@cckd64_chk:

; 2242 :                         if (cdsk_valid_trk (blkgrp, buf+i, heads, (int) l))

  072ee	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  072f6	48 8d 84 04 90
	31 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  072fe	44 8b 8c 24 c8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  07306	44 8b 84 24 dc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  0730e	48 8b d0	 mov	 rdx, rax
  07311	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR blkgrp$[rsp]
  07318	e8 00 00 00 00	 call	 cdsk_valid_trk
  0731d	85 c0		 test	 eax, eax
  0731f	74 02		 je	 SHORT $LN393@cckd64_chk

; 2243 :                             goto cdsk_fba_recover;

  07321	eb 07		 jmp	 SHORT $cdsk_fba_recover$838
$LN393@cckd64_chk:

; 2244 :                     } /* for all lengths */

  07323	eb 83		 jmp	 SHORT $LN83@cckd64_chk
$LN84@cckd64_chk:

; 2245 : 
; 2246 :                     continue;

  07325	e9 c3 f8 ff ff	 jmp	 $LN73@cckd64_chk
$cdsk_fba_recover$838:

; 2247 : 
; 2248 : cdsk_fba_recover:
; 2249 :                     if(dev->batch)

  0732a	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  07332	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  07338	c1 e8 0a	 shr	 eax, 10
  0733b	83 e0 01	 and	 eax, 1
  0733e	85 c0		 test	 eax, eax
  07340	0f 84 43 01 00
	00		 je	 $LN394@cckd64_chk

; 2250 :                         // "%1d:%04X CCKD file %s: %s[%d] recovered offset 0x%16.16"PRIX64" len %"PRId64
; 2251 : 
; 2252 :                         FWRMSG( stdout, HHC00372, "I", LCSS_DEVNUM, dev->filename,

  07346	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0734f	74 15		 je	 SHORT $LN710@cckd64_chk
  07351	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  07359	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0735d	89 84 24 d4 02
	00 00		 mov	 DWORD PTR tv3594[rsp], eax
  07364	eb 0b		 jmp	 SHORT $LN711@cckd64_chk
$LN710@cckd64_chk:
  07366	c7 84 24 d4 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3594[rsp], 0
$LN711@cckd64_chk:
  07371	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0737a	74 17		 je	 SHORT $LN712@cckd64_chk
  0737c	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  07384	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  07388	d1 f8		 sar	 eax, 1
  0738a	89 84 24 d8 02
	00 00		 mov	 DWORD PTR tv3600[rsp], eax
  07391	eb 0b		 jmp	 SHORT $LN713@cckd64_chk
$LN712@cckd64_chk:
  07393	c7 84 24 d8 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3600[rsp], 0
$LN713@cckd64_chk:
  0739e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  073a6	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  073ae	48 03 c8	 add	 rcx, rax
  073b1	48 8b c1	 mov	 rax, rcx
  073b4	48 89 84 24 c8
	07 00 00	 mov	 QWORD PTR tv3583[rsp], rax
  073bc	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  073c4	e8 00 00 00 00	 call	 spc_typ_to_str
  073c9	48 89 84 24 d0
	07 00 00	 mov	 QWORD PTR tv3586[rsp], rax
  073d1	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  073d9	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  073e0	48 89 8c 24 d8
	07 00 00	 mov	 QWORD PTR tv3589[rsp], rcx
  073e8	b9 01 00 00 00	 mov	 ecx, 1
  073ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  073f3	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR l$[rsp]
  073fb	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  07400	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR tv3583[rsp]
  07408	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0740d	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR blkgrp$[rsp]
  07414	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  07418	48 8b 8c 24 d0
	07 00 00	 mov	 rcx, QWORD PTR tv3586[rsp]
  07420	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  07425	48 8b 8c 24 d8
	07 00 00	 mov	 rcx, QWORD PTR tv3589[rsp]
  0742d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  07432	8b 8c 24 d4 02
	00 00		 mov	 ecx, DWORD PTR tv3594[rsp]
  07439	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0743d	8b 8c 24 d8 02
	00 00		 mov	 ecx, DWORD PTR tv3600[rsp]
  07444	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  07448	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170446
  0744f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  07454	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170447
  0745b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  07460	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  07465	41 b9 03 00 00
	00		 mov	 r9d, 3
  0746b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170448
  07472	ba cd 08 00 00	 mov	 edx, 2253		; 000008cdH
  07477	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170449
  0747e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  07484	e9 3e 01 00 00	 jmp	 $LN395@cckd64_chk
$LN394@cckd64_chk:

; 2253 :                                 spc_typ_to_str( trktyp ), blkgrp, off + i, l );
; 2254 :                     else
; 2255 :                         // "%1d:%04X CCKD file %s: %s[%d] recovered offset 0x%16.16"PRIX64" len %"PRId64
; 2256 :                         WRMSG( HHC00372, "I", LCSS_DEVNUM, dev->filename,

  07489	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  07492	74 15		 je	 SHORT $LN714@cckd64_chk
  07494	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0749c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  074a0	89 84 24 dc 02
	00 00		 mov	 DWORD PTR tv3623[rsp], eax
  074a7	eb 0b		 jmp	 SHORT $LN715@cckd64_chk
$LN714@cckd64_chk:
  074a9	c7 84 24 dc 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3623[rsp], 0
$LN715@cckd64_chk:
  074b4	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  074bd	74 17		 je	 SHORT $LN716@cckd64_chk
  074bf	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  074c7	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  074cb	d1 f8		 sar	 eax, 1
  074cd	89 84 24 e0 02
	00 00		 mov	 DWORD PTR tv3629[rsp], eax
  074d4	eb 0b		 jmp	 SHORT $LN717@cckd64_chk
$LN716@cckd64_chk:
  074d6	c7 84 24 e0 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3629[rsp], 0
$LN717@cckd64_chk:
  074e1	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  074e9	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  074f1	48 03 c8	 add	 rcx, rax
  074f4	48 8b c1	 mov	 rax, rcx
  074f7	48 89 84 24 e0
	07 00 00	 mov	 QWORD PTR tv3612[rsp], rax
  074ff	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  07507	e8 00 00 00 00	 call	 spc_typ_to_str
  0750c	48 89 84 24 e8
	07 00 00	 mov	 QWORD PTR tv3615[rsp], rax
  07514	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0751c	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  07523	48 89 8c 24 f0
	07 00 00	 mov	 QWORD PTR tv3618[rsp], rcx
  0752b	b9 01 00 00 00	 mov	 ecx, 1
  07530	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  07536	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR l$[rsp]
  0753e	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  07543	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR tv3612[rsp]
  0754b	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  07550	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR blkgrp$[rsp]
  07557	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  0755b	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR tv3615[rsp]
  07563	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  07568	48 8b 8c 24 f0
	07 00 00	 mov	 rcx, QWORD PTR tv3618[rsp]
  07570	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  07575	8b 8c 24 dc 02
	00 00		 mov	 ecx, DWORD PTR tv3623[rsp]
  0757c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  07580	8b 8c 24 e0 02
	00 00		 mov	 ecx, DWORD PTR tv3629[rsp]
  07587	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0758b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170450
  07592	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  07597	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170451
  0759e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  075a3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  075a8	41 b9 03 00 00
	00		 mov	 r9d, 3
  075ae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170452
  075b5	ba d1 08 00 00	 mov	 edx, 2257		; 000008d1H
  075ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170453
  075c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN395@cckd64_chk:

; 2257 :                                spc_typ_to_str( trktyp ), blkgrp, off + i, l );
; 2258 :                     n--;

  075c7	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR n$[rsp]
  075cf	48 ff c8	 dec	 rax
  075d2	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR n$[rsp], rax

; 2259 :                     rcvtab[blkgrp] = 2;

  075da	48 63 84 24 08
	01 00 00	 movsxd	 rax, DWORD PTR blkgrp$[rsp]
  075e2	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  075ea	c6 04 01 02	 mov	 BYTE PTR [rcx+rax], 2

; 2260 : 
; 2261 :                     /* Enable recovery of comp 0 blkgrps for pass 0 */
; 2262 :                     if (fpos + i < lopos)

  075ee	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  075f6	48 8b 8c 24 00
	04 00 00	 mov	 rcx, QWORD PTR fpos$5[rsp]
  075fe	48 03 c8	 add	 rcx, rax
  07601	48 8b c1	 mov	 rax, rcx
  07604	48 3b 84 24 48
	01 00 00	 cmp	 rax, QWORD PTR lopos$[rsp]
  0760c	73 1e		 jae	 SHORT $LN396@cckd64_chk

; 2263 :                         lopos = fpos + i;

  0760e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  07616	48 8b 8c 24 00
	04 00 00	 mov	 rcx, QWORD PTR fpos$5[rsp]
  0761e	48 03 c8	 add	 rcx, rax
  07621	48 8b c1	 mov	 rax, rcx
  07624	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR lopos$[rsp], rax
$LN396@cckd64_chk:

; 2264 : 
; 2265 :                     /* add recovered block group to the space table */
; 2266 :                     spctab[s].spc_typ = trktyp;

  0762c	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  07634	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  07638	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07640	0f b6 94 24 a5
	00 00 00	 movzx	 edx, BYTE PTR trktyp$[rsp]
  07648	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 2267 :                     spctab[s].spc_val = blkgrp;

  0764b	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  07653	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  07657	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0765f	8b 94 24 08 01
	00 00		 mov	 edx, DWORD PTR blkgrp$[rsp]
  07666	89 54 01 04	 mov	 DWORD PTR [rcx+rax+4], edx

; 2268 :                     spctab[s].spc_off = fpos + i;

  0766a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  07672	48 8b 8c 24 00
	04 00 00	 mov	 rcx, QWORD PTR fpos$5[rsp]
  0767a	48 03 c8	 add	 rcx, rax
  0767d	48 8b c1	 mov	 rax, rcx
  07680	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  07688	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  0768c	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  07694	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax

; 2269 :                     spctab[s].spc_len =

  07699	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  076a1	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  076a5	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  076ad	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR l$[rsp]
  076b5	48 89 54 01 20	 mov	 QWORD PTR [rcx+rax+32], rdx
  076ba	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  076c2	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  076c6	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  076ce	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR l$[rsp]
  076d6	48 89 54 01 18	 mov	 QWORD PTR [rcx+rax+24], rdx

; 2270 :                     spctab[s].spc_siz = l;
; 2271 :                     s++;

  076db	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  076e2	ff c0		 inc	 eax
  076e4	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 2272 :                     /*
; 2273 :                      * adjust `i' knowing it will be incremented
; 2274 :                      * in the `for' loop above.
; 2275 :                      */
; 2276 :                     i += l - 1;

  076eb	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  076f3	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR l$[rsp]
  076fb	48 8d 44 08 ff	 lea	 rax, QWORD PTR [rax+rcx-1]
  07700	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax

; 2277 :                 } /* for each byte in the free space */

  07708	e9 e0 f4 ff ff	 jmp	 $LN73@cckd64_chk
$LN74@cckd64_chk:

; 2278 : 
; 2279 :                 /* Adjust the free space for what we processed */
; 2280 :                 spctab[f].spc_off += i;

  0770d	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  07716	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0771e	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  07723	48 03 84 24 90
	00 00 00	 add	 rax, QWORD PTR i$[rsp]
  0772b	48 6b 8c 24 f0
	00 00 00 28	 imul	 rcx, QWORD PTR f$[rsp], 40 ; 00000028H
  07734	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  0773c	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax

; 2281 :                 spctab[f].spc_len -= i;

  07741	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  0774a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07752	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR i$[rsp]
  0775a	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  0775f	48 2b c2	 sub	 rax, rdx
  07762	48 6b 8c 24 f0
	00 00 00 28	 imul	 rcx, QWORD PTR f$[rsp], 40 ; 00000028H
  0776b	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  07773	48 89 44 0a 18	 mov	 QWORD PTR [rdx+rcx+24], rax

; 2282 :                 spctab[f].spc_siz -= i;

  07778	48 6b 84 24 f0
	00 00 00 28	 imul	 rax, QWORD PTR f$[rsp], 40 ; 00000028H
  07781	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07789	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR i$[rsp]
  07791	48 8b 44 01 20	 mov	 rax, QWORD PTR [rcx+rax+32]
  07796	48 2b c2	 sub	 rax, rdx
  07799	48 6b 8c 24 f0
	00 00 00 28	 imul	 rcx, QWORD PTR f$[rsp], 40 ; 00000028H
  077a2	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  077aa	48 89 44 0a 20	 mov	 QWORD PTR [rdx+rcx+32], rax

; 2283 : 
; 2284 :             } /* for each free space */

  077af	e9 05 f2 ff ff	 jmp	 $LN67@cckd64_chk
$LN68@cckd64_chk:

; 2285 : 
; 2286 :         } /* if fbadasd */

  077b4	e9 64 f1 ff ff	 jmp	 $LN64@cckd64_chk
$LN65@cckd64_chk:

; 2287 : 
; 2288 :         for (i = n = 0; i < trks; i++)

  077b9	48 c7 84 24 e0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR n$[rsp], 0
  077c5	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR n$[rsp]
  077cd	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
  077d5	eb 13		 jmp	 SHORT $LN88@cckd64_chk
$LN86@cckd64_chk:
  077d7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  077df	48 ff c0	 inc	 rax
  077e2	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN88@cckd64_chk:
  077ea	48 63 84 24 0c
	01 00 00	 movsxd	 rax, DWORD PTR trks$[rsp]
  077f2	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  077fa	7d 33		 jge	 SHORT $LN87@cckd64_chk

; 2289 :             if (rcvtab[i] == 2)

  077fc	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  07804	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  0780c	48 03 c8	 add	 rcx, rax
  0780f	48 8b c1	 mov	 rax, rcx
  07812	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  07815	83 f8 02	 cmp	 eax, 2
  07818	75 13		 jne	 SHORT $LN397@cckd64_chk

; 2290 :                 n++;

  0781a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR n$[rsp]
  07822	48 ff c0	 inc	 rax
  07825	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR n$[rsp], rax
$LN397@cckd64_chk:
  0782d	eb a8		 jmp	 SHORT $LN86@cckd64_chk
$LN87@cckd64_chk:

; 2291 : 
; 2292 :         if(dev->batch)

  0782f	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  07837	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0783d	c1 e8 0a	 shr	 eax, 10
  07840	83 e0 01	 and	 eax, 1
  07843	85 c0		 test	 eax, eax
  07845	0f 84 0d 01 00
	00		 je	 $LN398@cckd64_chk

; 2293 :             // "%1d:%04X CCKD file %s: %"PRId64" %s images recovered"
; 2294 :             FWRMSG( stdout, HHC00373, "I", LCSS_DEVNUM, dev->filename,

  0784b	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  07854	74 15		 je	 SHORT $LN718@cckd64_chk
  07856	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0785e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  07862	89 84 24 e4 02
	00 00		 mov	 DWORD PTR tv3713[rsp], eax
  07869	eb 0b		 jmp	 SHORT $LN719@cckd64_chk
$LN718@cckd64_chk:
  0786b	c7 84 24 e4 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3713[rsp], 0
$LN719@cckd64_chk:
  07876	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0787f	74 17		 je	 SHORT $LN720@cckd64_chk
  07881	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  07889	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0788d	d1 f8		 sar	 eax, 1
  0788f	89 84 24 e8 02
	00 00		 mov	 DWORD PTR tv3719[rsp], eax
  07896	eb 0b		 jmp	 SHORT $LN721@cckd64_chk
$LN720@cckd64_chk:
  07898	c7 84 24 e8 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3719[rsp], 0
$LN721@cckd64_chk:
  078a3	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  078ab	e8 00 00 00 00	 call	 spc_typ_to_str
  078b0	48 89 84 24 f8
	07 00 00	 mov	 QWORD PTR tv3704[rsp], rax
  078b8	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  078c0	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  078c7	48 89 8c 24 00
	08 00 00	 mov	 QWORD PTR tv3708[rsp], rcx
  078cf	b9 01 00 00 00	 mov	 ecx, 1
  078d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  078da	48 8b 8c 24 f8
	07 00 00	 mov	 rcx, QWORD PTR tv3704[rsp]
  078e2	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  078e7	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR n$[rsp]
  078ef	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  078f4	48 8b 8c 24 00
	08 00 00	 mov	 rcx, QWORD PTR tv3708[rsp]
  078fc	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  07901	8b 8c 24 e4 02
	00 00		 mov	 ecx, DWORD PTR tv3713[rsp]
  07908	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0790c	8b 8c 24 e8 02
	00 00		 mov	 ecx, DWORD PTR tv3719[rsp]
  07913	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  07917	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170458
  0791e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  07923	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170459
  0792a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0792f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  07934	41 b9 03 00 00
	00		 mov	 r9d, 3
  0793a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170460
  07941	ba f7 08 00 00	 mov	 edx, 2295		; 000008f7H
  07946	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170461
  0794d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  07953	e9 08 01 00 00	 jmp	 $LN399@cckd64_chk
$LN398@cckd64_chk:

; 2295 :                     n, spc_typ_to_str( trktyp ));
; 2296 :         else
; 2297 :             // "%1d:%04X CCKD file %s: %"PRId64" %s images recovered"
; 2298 :             WRMSG( HHC00373, "I", LCSS_DEVNUM, dev->filename,

  07958	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  07961	74 15		 je	 SHORT $LN722@cckd64_chk
  07963	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0796b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0796f	89 84 24 ec 02
	00 00		 mov	 DWORD PTR tv3739[rsp], eax
  07976	eb 0b		 jmp	 SHORT $LN723@cckd64_chk
$LN722@cckd64_chk:
  07978	c7 84 24 ec 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3739[rsp], 0
$LN723@cckd64_chk:
  07983	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0798c	74 17		 je	 SHORT $LN724@cckd64_chk
  0798e	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  07996	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0799a	d1 f8		 sar	 eax, 1
  0799c	89 84 24 f0 02
	00 00		 mov	 DWORD PTR tv3745[rsp], eax
  079a3	eb 0b		 jmp	 SHORT $LN725@cckd64_chk
$LN724@cckd64_chk:
  079a5	c7 84 24 f0 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3745[rsp], 0
$LN725@cckd64_chk:
  079b0	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  079b8	e8 00 00 00 00	 call	 spc_typ_to_str
  079bd	48 89 84 24 08
	08 00 00	 mov	 QWORD PTR tv3730[rsp], rax
  079c5	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  079cd	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  079d4	48 89 8c 24 10
	08 00 00	 mov	 QWORD PTR tv3734[rsp], rcx
  079dc	b9 01 00 00 00	 mov	 ecx, 1
  079e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  079e7	48 8b 8c 24 08
	08 00 00	 mov	 rcx, QWORD PTR tv3730[rsp]
  079ef	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  079f4	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR n$[rsp]
  079fc	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  07a01	48 8b 8c 24 10
	08 00 00	 mov	 rcx, QWORD PTR tv3734[rsp]
  07a09	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  07a0e	8b 8c 24 ec 02
	00 00		 mov	 ecx, DWORD PTR tv3739[rsp]
  07a15	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  07a19	8b 8c 24 f0 02
	00 00		 mov	 ecx, DWORD PTR tv3745[rsp]
  07a20	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  07a24	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170462
  07a2b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  07a30	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170463
  07a37	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  07a3c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  07a41	41 b9 03 00 00
	00		 mov	 r9d, 3
  07a47	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170464
  07a4e	ba fb 08 00 00	 mov	 edx, 2299		; 000008fbH
  07a53	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170465
  07a5a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN399@cckd64_chk:

; 2299 :                    n, spc_typ_to_str( trktyp ));
; 2300 : 
; 2301 :         /*-----------------------------------------------------------
; 2302 :          * Phase 2 -- rebuild affected l2 tables
; 2303 :          *-----------------------------------------------------------*/
; 2304 : 
; 2305 :         /*
; 2306 :          * Make sure there's at least one non-zero `rcvtab' entry
; 2307 :          * for l2 tables in `l2errs'.  Space validation may have
; 2308 :          * turned off all `rcvtab' entries for an l2.
; 2309 :          */
; 2310 :         for (i = 0; i < cdevhdr.num_L1tab; i++)

  07a60	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  07a6c	eb 13		 jmp	 SHORT $LN91@cckd64_chk
$LN89@cckd64_chk:
  07a6e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  07a76	48 ff c0	 inc	 rax
  07a79	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN91@cckd64_chk:
  07a81	48 63 84 24 94
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  07a89	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  07a91	7d 37		 jge	 SHORT $LN90@cckd64_chk

; 2311 :             if (l2errs[i])

  07a93	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  07a9b	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR l2errs$[rsp]
  07aa3	48 03 c8	 add	 rcx, rax
  07aa6	48 8b c1	 mov	 rax, rcx
  07aa9	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  07aac	85 c0		 test	 eax, eax
  07aae	74 18		 je	 SHORT $LN400@cckd64_chk

; 2312 :                 rcvtab[i*256] = 1;

  07ab0	48 69 84 24 90
	00 00 00 00 01
	00 00		 imul	 rax, QWORD PTR i$[rsp], 256 ; 00000100H
  07abc	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  07ac4	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1
$LN400@cckd64_chk:
  07ac8	eb a4		 jmp	 SHORT $LN89@cckd64_chk
$LN90@cckd64_chk:

; 2313 : 
; 2314 :         /* Get storage for the l2 table array */
; 2315 :         n = cdevhdr.num_L1tab;

  07aca	48 63 84 24 94
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  07ad2	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR n$[rsp], rax

; 2316 :         len = sizeof(void *);

  07ada	48 c7 84 24 b0
	00 00 00 08 00
	00 00		 mov	 QWORD PTR len$[rsp], 8

; 2317 :         if ((l2 = calloc((size_t)n, (size_t)len)) == NULL)

  07ae6	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR len$[rsp]
  07aee	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR n$[rsp]
  07af6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  07afc	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR l2$[rsp], rax
  07b04	48 83 bc 24 00
	01 00 00 00	 cmp	 QWORD PTR l2$[rsp], 0
  07b0d	75 05		 jne	 SHORT $LN401@cckd64_chk

; 2318 :             goto cdsk_calloc_error;

  07b0f	e9 d0 33 00 00	 jmp	 $cdsk_calloc_error$833
$LN401@cckd64_chk:

; 2319 : 
; 2320 :         /* Get storage for the rebuilt l2 tables */
; 2321 :         len = CCKD64_L2TAB_SIZE;

  07b14	48 c7 84 24 b0
	00 00 00 00 10
	00 00		 mov	 QWORD PTR len$[rsp], 4096 ; 00001000H

; 2322 :         for (i = 0; i < trks; i++)

  07b20	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  07b2c	eb 13		 jmp	 SHORT $LN94@cckd64_chk
$LN92@cckd64_chk:
  07b2e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  07b36	48 ff c0	 inc	 rax
  07b39	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN94@cckd64_chk:
  07b41	48 63 84 24 0c
	01 00 00	 movsxd	 rax, DWORD PTR trks$[rsp]
  07b49	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  07b51	0f 8d 0d 01 00
	00		 jge	 $LN93@cckd64_chk

; 2323 :         {
; 2324 :             L1idx = (int)(i / 256);

  07b57	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  07b5f	48 99		 cdq
  07b61	48 81 e2 ff 00
	00 00		 and	 rdx, 255		; 000000ffH
  07b68	48 03 c2	 add	 rax, rdx
  07b6b	48 c1 f8 08	 sar	 rax, 8
  07b6f	89 84 24 f8 00
	00 00		 mov	 DWORD PTR L1idx$[rsp], eax

; 2325 :             if (rcvtab[i] != 0 && l2[L1idx] == NULL)

  07b76	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  07b7e	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  07b86	48 03 c8	 add	 rcx, rax
  07b89	48 8b c1	 mov	 rax, rcx
  07b8c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  07b8f	85 c0		 test	 eax, eax
  07b91	0f 84 c8 00 00
	00		 je	 $LN402@cckd64_chk
  07b97	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR L1idx$[rsp]
  07b9f	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  07ba7	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  07bac	0f 85 ad 00 00
	00		 jne	 $LN402@cckd64_chk

; 2326 :             {
; 2327 :                 if ((l2[L1idx] = malloc((size_t)len)) == NULL)

  07bb2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  07bba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  07bc0	48 89 84 24 a8
	04 00 00	 mov	 QWORD PTR tv3790[rsp], rax
  07bc8	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR L1idx$[rsp]
  07bd0	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  07bd8	48 8b 94 24 a8
	04 00 00	 mov	 rdx, QWORD PTR tv3790[rsp]
  07be0	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx
  07be4	48 83 bc 24 a8
	04 00 00 00	 cmp	 QWORD PTR tv3790[rsp], 0
  07bed	75 05		 jne	 SHORT $LN403@cckd64_chk

; 2328 :                     goto cdsk_malloc_error;

  07bef	e9 96 30 00 00	 jmp	 $cdsk_malloc_error$839
$LN403@cckd64_chk:

; 2329 :                 l1[L1idx] = shadow ? CCKD64_SHADOW_NO_OFFSET : CCKD64_BASE_NO_OFFSET;

  07bf4	0f b6 84 24 ee
	00 00 00	 movzx	 eax, BYTE PTR shadow$[rsp]
  07bfc	85 c0		 test	 eax, eax
  07bfe	74 0e		 je	 SHORT $LN726@cckd64_chk
  07c00	48 c7 84 24 b0
	04 00 00 ff ff
	ff ff		 mov	 QWORD PTR tv3801[rsp], -1
  07c0c	eb 0c		 jmp	 SHORT $LN727@cckd64_chk
$LN726@cckd64_chk:
  07c0e	48 c7 84 24 b0
	04 00 00 00 00
	00 00		 mov	 QWORD PTR tv3801[rsp], 0
$LN727@cckd64_chk:
  07c1a	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR L1idx$[rsp]
  07c22	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  07c2a	48 8b 94 24 b0
	04 00 00	 mov	 rdx, QWORD PTR tv3801[rsp]
  07c32	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx

; 2330 :                 memcpy( l2[L1idx], &empty_l2, (size_t)len );

  07c36	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR L1idx$[rsp]
  07c3e	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  07c46	48 8d 94 24 d0
	1f 00 00	 lea	 rdx, QWORD PTR empty_l2$[rsp]
  07c4e	48 8b 3c c1	 mov	 rdi, QWORD PTR [rcx+rax*8]
  07c52	48 8b f2	 mov	 rsi, rdx
  07c55	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  07c5d	f3 a4		 rep movsb
$LN402@cckd64_chk:

; 2331 :             }
; 2332 :         }

  07c5f	e9 ca fe ff ff	 jmp	 $LN92@cckd64_chk
$LN93@cckd64_chk:

; 2333 : 
; 2334 :         /* Rebuild the l2 tables */
; 2335 :         qsort (spctab, s, sizeof(SPCTAB64), cdsk_spctab64_sort);

  07c64	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  07c6c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:cdsk_spctab64_sort
  07c73	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  07c79	48 8b d0	 mov	 rdx, rax
  07c7c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07c84	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 2336 :         for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  07c8a	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  07c96	eb 13		 jmp	 SHORT $LN97@cckd64_chk
$LN95@cckd64_chk:
  07c98	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  07ca0	48 ff c0	 inc	 rax
  07ca3	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN97@cckd64_chk:
  07cab	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  07cb4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07cbc	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  07cc0	83 f8 08	 cmp	 eax, 8
  07cc3	0f 84 bd 01 00
	00		 je	 $LN96@cckd64_chk

; 2337 :         {
; 2338 :             if (spctab[i].spc_typ == SPCTAB_L2 && l2[spctab[i].spc_val])

  07cc9	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  07cd2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07cda	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  07cde	83 f8 04	 cmp	 eax, 4
  07ce1	75 3f		 jne	 SHORT $LN404@cckd64_chk
  07ce3	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  07cec	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07cf4	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  07cf9	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  07d01	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  07d06	74 1a		 je	 SHORT $LN404@cckd64_chk

; 2339 :                 spctab[i].spc_typ = SPCTAB_NONE;

  07d08	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  07d11	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07d19	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
  07d1d	e9 5f 01 00 00	 jmp	 $LN405@cckd64_chk
$LN404@cckd64_chk:

; 2340 :             else if (spctab[i].spc_typ == trktyp && l2[spctab[i].spc_val/256])

  07d22	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  07d2b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07d33	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  07d37	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  07d3f	3b c1		 cmp	 eax, ecx
  07d41	0f 85 3a 01 00
	00		 jne	 $LN406@cckd64_chk
  07d47	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  07d50	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07d58	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  07d5c	99		 cdq
  07d5d	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  07d63	03 c2		 add	 eax, edx
  07d65	c1 f8 08	 sar	 eax, 8
  07d68	48 98		 cdqe
  07d6a	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  07d72	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  07d77	0f 84 04 01 00
	00		 je	 $LN406@cckd64_chk

; 2341 :             {
; 2342 :                 L1idx = spctab[i].spc_val / 256;

  07d7d	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  07d86	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07d8e	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  07d92	99		 cdq
  07d93	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  07d99	03 c2		 add	 eax, edx
  07d9b	c1 f8 08	 sar	 eax, 8
  07d9e	89 84 24 f8 00
	00 00		 mov	 DWORD PTR L1idx$[rsp], eax

; 2343 :                 l2x = spctab[i].spc_val % 256;

  07da5	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  07dae	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07db6	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  07dba	99		 cdq
  07dbb	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  07dc1	03 c2		 add	 eax, edx
  07dc3	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  07dc8	2b c2		 sub	 eax, edx
  07dca	89 84 24 5c 01
	00 00		 mov	 DWORD PTR l2x$[rsp], eax

; 2344 :                 l2[L1idx][l2x].L2_trkoff = spctab[i].spc_off;

  07dd1	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  07dda	48 63 8c 24 f8
	00 00 00	 movsxd	 rcx, DWORD PTR L1idx$[rsp]
  07de2	48 63 94 24 5c
	01 00 00	 movsxd	 rdx, DWORD PTR l2x$[rsp]
  07dea	48 6b d2 10	 imul	 rdx, rdx, 16
  07dee	48 8b bc 24 00
	01 00 00	 mov	 rdi, QWORD PTR l2$[rsp]
  07df6	48 8b 0c cf	 mov	 rcx, QWORD PTR [rdi+rcx*8]
  07dfa	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  07e02	48 8b 44 07 10	 mov	 rax, QWORD PTR [rdi+rax+16]
  07e07	48 89 04 11	 mov	 QWORD PTR [rcx+rdx], rax

; 2345 :                 l2[L1idx][l2x].L2_len    = (U16) spctab[i].spc_len;

  07e0b	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  07e14	48 63 8c 24 f8
	00 00 00	 movsxd	 rcx, DWORD PTR L1idx$[rsp]
  07e1c	48 63 94 24 5c
	01 00 00	 movsxd	 rdx, DWORD PTR l2x$[rsp]
  07e24	48 6b d2 10	 imul	 rdx, rdx, 16
  07e28	48 8b bc 24 00
	01 00 00	 mov	 rdi, QWORD PTR l2$[rsp]
  07e30	48 8b 0c cf	 mov	 rcx, QWORD PTR [rdi+rcx*8]
  07e34	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  07e3c	0f b7 44 07 18	 movzx	 eax, WORD PTR [rdi+rax+24]
  07e41	66 89 44 11 08	 mov	 WORD PTR [rcx+rdx+8], ax

; 2346 :                 l2[L1idx][l2x].L2_size   = (U16) spctab[i].spc_siz;

  07e46	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  07e4f	48 63 8c 24 f8
	00 00 00	 movsxd	 rcx, DWORD PTR L1idx$[rsp]
  07e57	48 63 94 24 5c
	01 00 00	 movsxd	 rdx, DWORD PTR l2x$[rsp]
  07e5f	48 6b d2 10	 imul	 rdx, rdx, 16
  07e63	48 8b bc 24 00
	01 00 00	 mov	 rdi, QWORD PTR l2$[rsp]
  07e6b	48 8b 0c cf	 mov	 rcx, QWORD PTR [rdi+rcx*8]
  07e6f	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  07e77	0f b7 44 07 20	 movzx	 eax, WORD PTR [rdi+rax+32]
  07e7c	66 89 44 11 0a	 mov	 WORD PTR [rcx+rdx+10], ax
$LN406@cckd64_chk:
$LN405@cckd64_chk:

; 2347 :             }
; 2348 :         } /* for each space */

  07e81	e9 12 fe ff ff	 jmp	 $LN95@cckd64_chk
$LN96@cckd64_chk:

; 2349 :         qsort (spctab, s, sizeof(SPCTAB64), cdsk_spctab64_sort);

  07e86	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  07e8e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:cdsk_spctab64_sort
  07e95	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  07e9b	48 8b d0	 mov	 rdx, rax
  07e9e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07ea6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort
$LN98@cckd64_chk:

; 2350 :         while (spctab[s-1].spc_typ == SPCTAB_NONE) s--;

  07eac	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  07eb3	ff c8		 dec	 eax
  07eb5	48 98		 cdqe
  07eb7	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  07ebb	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07ec3	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  07ec7	85 c0		 test	 eax, eax
  07ec9	75 12		 jne	 SHORT $LN99@cckd64_chk
  07ecb	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  07ed2	ff c8		 dec	 eax
  07ed4	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax
  07edb	eb cf		 jmp	 SHORT $LN98@cckd64_chk
$LN99@cckd64_chk:

; 2351 : 
; 2352 :         /* Look for empty l2 tables */
; 2353 :         for (i = 0; i < cdevhdr.num_L1tab; i++)

  07edd	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  07ee9	eb 13		 jmp	 SHORT $LN102@cckd64_chk
$LN100@cckd64_chk:
  07eeb	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  07ef3	48 ff c0	 inc	 rax
  07ef6	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN102@cckd64_chk:
  07efe	48 63 84 24 94
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  07f06	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  07f0e	7d 79		 jge	 SHORT $LN101@cckd64_chk

; 2354 :             if (l2[i] != NULL
; 2355 :              && memcmp (l2[i], &empty_l2, CCKD64_L2TAB_SIZE) == 0)

  07f10	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR l2$[rsp]
  07f18	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  07f20	48 83 3c c8 00	 cmp	 QWORD PTR [rax+rcx*8], 0
  07f25	74 5d		 je	 SHORT $LN407@cckd64_chk
  07f27	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  07f2d	48 8d 94 24 d0
	1f 00 00	 lea	 rdx, QWORD PTR empty_l2$[rsp]
  07f35	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR l2$[rsp]
  07f3d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  07f45	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  07f49	e8 00 00 00 00	 call	 memcmp
  07f4e	85 c0		 test	 eax, eax
  07f50	75 32		 jne	 SHORT $LN407@cckd64_chk

; 2356 :             {
; 2357 :                 free (l2[i]);

  07f52	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR l2$[rsp]
  07f5a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  07f62	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  07f66	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 2358 :                 l2[i] = NULL;

  07f6c	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR l2$[rsp]
  07f74	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  07f7c	48 c7 04 c8 00
	00 00 00	 mov	 QWORD PTR [rax+rcx*8], 0
$LN407@cckd64_chk:

; 2359 :             }

  07f84	e9 62 ff ff ff	 jmp	 $LN100@cckd64_chk
$LN101@cckd64_chk:

; 2360 :         /*
; 2361 :          * `s-1' indexes the SPCTAB_EOF space table entry.
; 2362 :          * Set its `pos' to the maximum allowed value to ensure
; 2363 :          * there will be free space for the rebuilt l2 tables.
; 2364 :          */
; 2365 :         spctab[s-1].spc_off = cckd_maxsize;

  07f89	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  07f90	ff c8		 dec	 eax
  07f92	48 98		 cdqe
  07f94	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  07f98	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07fa0	48 8b 94 24 b8
	04 00 00	 mov	 rdx, QWORD PTR cckd_maxsize$[rsp]
  07fa8	48 89 54 01 10	 mov	 QWORD PTR [rcx+rax+16], rdx

; 2366 : 
; 2367 :         /* Build the free space */
; 2368 :         s = cdsk_build_free_space64 (spctab, s);

  07fad	8b 94 24 a0 00
	00 00		 mov	 edx, DWORD PTR s$[rsp]
  07fb4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07fbc	e8 00 00 00 00	 call	 cdsk_build_free_space64
  07fc1	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 2369 : 
; 2370 :         /* Find space for the rebuilt l2 tables */
; 2371 :         for (i = j = 0; i < cdevhdr.num_L1tab; i++)

  07fc8	48 c7 84 24 d0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR j$[rsp], 0
  07fd4	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  07fdc	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
  07fe4	eb 13		 jmp	 SHORT $LN105@cckd64_chk
$LN103@cckd64_chk:
  07fe6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  07fee	48 ff c0	 inc	 rax
  07ff1	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN105@cckd64_chk:
  07ff9	48 63 84 24 94
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  08001	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  08009	0f 8d eb 03 00
	00		 jge	 $LN104@cckd64_chk

; 2372 :         {
; 2373 :             if (l2[i] == NULL) continue;

  0800f	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR l2$[rsp]
  08017	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  0801f	48 83 3c c8 00	 cmp	 QWORD PTR [rax+rcx*8], 0
  08024	75 02		 jne	 SHORT $LN408@cckd64_chk
  08026	eb be		 jmp	 SHORT $LN103@cckd64_chk
$LN408@cckd64_chk:

; 2374 : 
; 2375 :             /* find a free space */
; 2376 :             for ( ; spctab[j].spc_typ != SPCTAB_EOF; j++)

  08028	eb 13		 jmp	 SHORT $LN108@cckd64_chk
$LN106@cckd64_chk:
  0802a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  08032	48 ff c0	 inc	 rax
  08035	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR j$[rsp], rax
$LN108@cckd64_chk:
  0803d	48 6b 84 24 d0
	00 00 00 28	 imul	 rax, QWORD PTR j$[rsp], 40 ; 00000028H
  08046	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0804e	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  08052	83 f8 08	 cmp	 eax, 8
  08055	74 3a		 je	 SHORT $LN107@cckd64_chk

; 2377 :                 if (spctab[j].spc_typ == SPCTAB_FREE
; 2378 :                  && spctab[j].spc_siz >= CCKD64_L2TAB_SIZE)

  08057	48 6b 84 24 d0
	00 00 00 28	 imul	 rax, QWORD PTR j$[rsp], 40 ; 00000028H
  08060	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08068	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0806c	83 f8 07	 cmp	 eax, 7
  0806f	75 1e		 jne	 SHORT $LN409@cckd64_chk
  08071	48 6b 84 24 d0
	00 00 00 28	 imul	 rax, QWORD PTR j$[rsp], 40 ; 00000028H
  0807a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08082	48 81 7c 01 20
	00 10 00 00	 cmp	 QWORD PTR [rcx+rax+32], 4096 ; 00001000H
  0808b	72 02		 jb	 SHORT $LN409@cckd64_chk

; 2379 :                      break;

  0808d	eb 02		 jmp	 SHORT $LN107@cckd64_chk
$LN409@cckd64_chk:
  0808f	eb 99		 jmp	 SHORT $LN106@cckd64_chk
$LN107@cckd64_chk:

; 2380 : 
; 2381 :             /* weird error if no space */
; 2382 :             if (spctab[j].spc_typ == SPCTAB_EOF)

  08091	48 6b 84 24 d0
	00 00 00 28	 imul	 rax, QWORD PTR j$[rsp], 40 ; 00000028H
  0809a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  080a2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  080a6	83 f8 08	 cmp	 eax, 8
  080a9	0f 85 d6 01 00
	00		 jne	 $LN410@cckd64_chk

; 2383 :             {
; 2384 :                 if(dev->batch)

  080af	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  080b7	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  080bd	c1 e8 0a	 shr	 eax, 10
  080c0	83 e0 01	 and	 eax, 1
  080c3	85 c0		 test	 eax, eax
  080c5	0f 84 dd 00 00
	00		 je	 $LN411@cckd64_chk

; 2385 :                     FWRMSG( stdout, HHC00374, "E", LCSS_DEVNUM, dev->filename );

  080cb	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  080d4	74 15		 je	 SHORT $LN728@cckd64_chk
  080d6	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  080de	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  080e2	89 84 24 f4 02
	00 00		 mov	 DWORD PTR tv3964[rsp], eax
  080e9	eb 0b		 jmp	 SHORT $LN729@cckd64_chk
$LN728@cckd64_chk:
  080eb	c7 84 24 f4 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3964[rsp], 0
$LN729@cckd64_chk:
  080f6	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  080ff	74 17		 je	 SHORT $LN730@cckd64_chk
  08101	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08109	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0810d	d1 f8		 sar	 eax, 1
  0810f	89 84 24 f8 02
	00 00		 mov	 DWORD PTR tv3970[rsp], eax
  08116	eb 0b		 jmp	 SHORT $LN731@cckd64_chk
$LN730@cckd64_chk:
  08118	c7 84 24 f8 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3970[rsp], 0
$LN731@cckd64_chk:
  08123	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0812b	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  08131	48 89 84 24 18
	08 00 00	 mov	 QWORD PTR tv3959[rsp], rax
  08139	b9 01 00 00 00	 mov	 ecx, 1
  0813e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  08144	48 8b 8c 24 18
	08 00 00	 mov	 rcx, QWORD PTR tv3959[rsp]
  0814c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  08151	8b 8c 24 f4 02
	00 00		 mov	 ecx, DWORD PTR tv3964[rsp]
  08158	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0815c	8b 8c 24 f8 02
	00 00		 mov	 ecx, DWORD PTR tv3970[rsp]
  08163	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  08167	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170479
  0816e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  08173	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170480
  0817a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0817f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  08184	41 b9 03 00 00
	00		 mov	 r9d, 3
  0818a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170481
  08191	ba 51 09 00 00	 mov	 edx, 2385		; 00000951H
  08196	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170482
  0819d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  081a3	e9 d8 00 00 00	 jmp	 $LN412@cckd64_chk
$LN411@cckd64_chk:

; 2386 :                 else
; 2387 :                     WRMSG( HHC00374, "E", LCSS_DEVNUM, dev->filename );

  081a8	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  081b1	74 15		 je	 SHORT $LN732@cckd64_chk
  081b3	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  081bb	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  081bf	89 84 24 fc 02
	00 00		 mov	 DWORD PTR tv3986[rsp], eax
  081c6	eb 0b		 jmp	 SHORT $LN733@cckd64_chk
$LN732@cckd64_chk:
  081c8	c7 84 24 fc 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3986[rsp], 0
$LN733@cckd64_chk:
  081d3	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  081dc	74 17		 je	 SHORT $LN734@cckd64_chk
  081de	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  081e6	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  081ea	d1 f8		 sar	 eax, 1
  081ec	89 84 24 00 03
	00 00		 mov	 DWORD PTR tv3992[rsp], eax
  081f3	eb 0b		 jmp	 SHORT $LN735@cckd64_chk
$LN734@cckd64_chk:
  081f5	c7 84 24 00 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3992[rsp], 0
$LN735@cckd64_chk:
  08200	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08208	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0820e	48 89 84 24 20
	08 00 00	 mov	 QWORD PTR tv3981[rsp], rax
  08216	b9 01 00 00 00	 mov	 ecx, 1
  0821b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  08221	48 8b 8c 24 20
	08 00 00	 mov	 rcx, QWORD PTR tv3981[rsp]
  08229	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0822e	8b 8c 24 fc 02
	00 00		 mov	 ecx, DWORD PTR tv3986[rsp]
  08235	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  08239	8b 8c 24 00 03
	00 00		 mov	 ecx, DWORD PTR tv3992[rsp]
  08240	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  08244	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170483
  0824b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  08250	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170484
  08257	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0825c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  08261	41 b9 03 00 00
	00		 mov	 r9d, 3
  08267	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170485
  0826e	ba 53 09 00 00	 mov	 edx, 2387		; 00000953H
  08273	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170486
  0827a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN412@cckd64_chk:

; 2388 :                 goto cdsk_error;

  08280	e9 c0 2e 00 00	 jmp	 $cdsk_error$832
$LN410@cckd64_chk:

; 2389 :             }
; 2390 : 
; 2391 :             /* add l2 space */
; 2392 :             l1[i]             = spctab[j].spc_off;

  08285	48 6b 84 24 d0
	00 00 00 28	 imul	 rax, QWORD PTR j$[rsp], 40 ; 00000028H
  0828e	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  08296	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR i$[rsp]
  0829e	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  082a6	48 8b 44 07 10	 mov	 rax, QWORD PTR [rdi+rax+16]
  082ab	48 89 04 d1	 mov	 QWORD PTR [rcx+rdx*8], rax

; 2393 :             spctab[s].spc_typ = SPCTAB_L2;

  082af	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  082b7	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  082bb	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  082c3	c6 04 01 04	 mov	 BYTE PTR [rcx+rax], 4

; 2394 :             spctab[s].spc_val = (int) i;

  082c7	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  082cf	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  082d3	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  082db	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR i$[rsp]
  082e2	89 54 01 04	 mov	 DWORD PTR [rcx+rax+4], edx

; 2395 :             spctab[s].spc_off = spctab[j].spc_off;

  082e6	48 6b 84 24 d0
	00 00 00 28	 imul	 rax, QWORD PTR j$[rsp], 40 ; 00000028H
  082ef	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  082f7	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  082fb	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  08303	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  0830b	48 8b 44 07 10	 mov	 rax, QWORD PTR [rdi+rax+16]
  08310	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax

; 2396 :             spctab[s].spc_len =

  08315	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0831d	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  08321	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08329	48 c7 44 01 20
	00 10 00 00	 mov	 QWORD PTR [rcx+rax+32], 4096 ; 00001000H
  08332	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0833a	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0833e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08346	48 c7 44 01 18
	00 10 00 00	 mov	 QWORD PTR [rcx+rax+24], 4096 ; 00001000H

; 2397 :             spctab[s].spc_siz = CCKD64_L2TAB_SIZE;
; 2398 :             s++;

  0834f	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  08356	ff c0		 inc	 eax
  08358	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 2399 : 
; 2400 :             /* adjust the free space */
; 2401 :             spctab[j].spc_off += CCKD64_L2TAB_SIZE;

  0835f	48 6b 84 24 d0
	00 00 00 28	 imul	 rax, QWORD PTR j$[rsp], 40 ; 00000028H
  08368	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08370	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  08375	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  0837b	48 6b 8c 24 d0
	00 00 00 28	 imul	 rcx, QWORD PTR j$[rsp], 40 ; 00000028H
  08384	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  0838c	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax

; 2402 :             spctab[j].spc_len -= CCKD64_L2TAB_SIZE;

  08391	48 6b 84 24 d0
	00 00 00 28	 imul	 rax, QWORD PTR j$[rsp], 40 ; 00000028H
  0839a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  083a2	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  083a7	48 2d 00 10 00
	00		 sub	 rax, 4096		; 00001000H
  083ad	48 6b 8c 24 d0
	00 00 00 28	 imul	 rcx, QWORD PTR j$[rsp], 40 ; 00000028H
  083b6	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  083be	48 89 44 0a 18	 mov	 QWORD PTR [rdx+rcx+24], rax

; 2403 :             spctab[j].spc_siz -= CCKD64_L2TAB_SIZE;

  083c3	48 6b 84 24 d0
	00 00 00 28	 imul	 rax, QWORD PTR j$[rsp], 40 ; 00000028H
  083cc	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  083d4	48 8b 44 01 20	 mov	 rax, QWORD PTR [rcx+rax+32]
  083d9	48 2d 00 10 00
	00		 sub	 rax, 4096		; 00001000H
  083df	48 6b 8c 24 d0
	00 00 00 28	 imul	 rcx, QWORD PTR j$[rsp], 40 ; 00000028H
  083e8	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  083f0	48 89 44 0a 20	 mov	 QWORD PTR [rdx+rcx+32], rax

; 2404 :         } /* for each l2 table */

  083f5	e9 ec fb ff ff	 jmp	 $LN103@cckd64_chk
$LN104@cckd64_chk:

; 2405 : 
; 2406 : 
; 2407 :         /*-----------------------------------------------------------
; 2408 :          * Phase 3 -- write l1 and l2 tables
; 2409 :          *-----------------------------------------------------------*/
; 2410 : 
; 2411 :         if (ro)

  083fa	83 bc 24 58 01
	00 00 00	 cmp	 DWORD PTR ro$[rsp], 0
  08402	0f 84 ee 01 00
	00		 je	 $LN413@cckd64_chk

; 2412 :         {
; 2413 :             if(dev->batch)

  08408	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08410	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  08416	c1 e8 0a	 shr	 eax, 10
  08419	83 e0 01	 and	 eax, 1
  0841c	85 c0		 test	 eax, eax
  0841e	0f 84 e9 00 00
	00		 je	 $LN414@cckd64_chk

; 2414 :                 FWRMSG( stdout, HHC00375, "W", LCSS_DEVNUM, dev->filename,

  08424	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0842d	74 15		 je	 SHORT $LN736@cckd64_chk
  0842f	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08437	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0843b	89 84 24 04 03
	00 00		 mov	 DWORD PTR tv4064[rsp], eax
  08442	eb 0b		 jmp	 SHORT $LN737@cckd64_chk
$LN736@cckd64_chk:
  08444	c7 84 24 04 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4064[rsp], 0
$LN737@cckd64_chk:
  0844f	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  08458	74 17		 je	 SHORT $LN738@cckd64_chk
  0845a	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08462	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  08466	d1 f8		 sar	 eax, 1
  08468	89 84 24 08 03
	00 00		 mov	 DWORD PTR tv4070[rsp], eax
  0846f	eb 0b		 jmp	 SHORT $LN739@cckd64_chk
$LN738@cckd64_chk:
  08471	c7 84 24 08 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4070[rsp], 0
$LN739@cckd64_chk:
  0847c	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08484	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0848a	48 89 84 24 28
	08 00 00	 mov	 QWORD PTR tv4059[rsp], rax
  08492	b9 01 00 00 00	 mov	 ecx, 1
  08497	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0849d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170490
  084a4	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  084a9	48 8b 8c 24 28
	08 00 00	 mov	 rcx, QWORD PTR tv4059[rsp]
  084b1	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  084b6	8b 8c 24 04 03
	00 00		 mov	 ecx, DWORD PTR tv4064[rsp]
  084bd	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  084c1	8b 8c 24 08 03
	00 00		 mov	 ecx, DWORD PTR tv4070[rsp]
  084c8	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  084cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170491
  084d3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  084d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170492
  084df	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  084e4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  084e9	41 b9 03 00 00
	00		 mov	 r9d, 3
  084ef	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170493
  084f6	ba 6f 09 00 00	 mov	 edx, 2415		; 0000096fH
  084fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170494
  08502	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  08508	e9 e4 00 00 00	 jmp	 $LN415@cckd64_chk
$LN414@cckd64_chk:

; 2415 :                         "file opened read-only" );
; 2416 :             else
; 2417 :                 WRMSG( HHC00375, "W", LCSS_DEVNUM, dev->filename,

  0850d	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  08516	74 15		 je	 SHORT $LN740@cckd64_chk
  08518	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08520	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  08524	89 84 24 0c 03
	00 00		 mov	 DWORD PTR tv4087[rsp], eax
  0852b	eb 0b		 jmp	 SHORT $LN741@cckd64_chk
$LN740@cckd64_chk:
  0852d	c7 84 24 0c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4087[rsp], 0
$LN741@cckd64_chk:
  08538	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  08541	74 17		 je	 SHORT $LN742@cckd64_chk
  08543	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0854b	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0854f	d1 f8		 sar	 eax, 1
  08551	89 84 24 10 03
	00 00		 mov	 DWORD PTR tv4093[rsp], eax
  08558	eb 0b		 jmp	 SHORT $LN743@cckd64_chk
$LN742@cckd64_chk:
  0855a	c7 84 24 10 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4093[rsp], 0
$LN743@cckd64_chk:
  08565	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0856d	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  08573	48 89 84 24 30
	08 00 00	 mov	 QWORD PTR tv4082[rsp], rax
  0857b	b9 01 00 00 00	 mov	 ecx, 1
  08580	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  08586	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170495
  0858d	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  08592	48 8b 8c 24 30
	08 00 00	 mov	 rcx, QWORD PTR tv4082[rsp]
  0859a	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0859f	8b 8c 24 0c 03
	00 00		 mov	 ecx, DWORD PTR tv4087[rsp]
  085a6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  085aa	8b 8c 24 10 03
	00 00		 mov	 ecx, DWORD PTR tv4093[rsp]
  085b1	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  085b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170496
  085bc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  085c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170497
  085c8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  085cd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  085d2	41 b9 03 00 00
	00		 mov	 r9d, 3
  085d8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170498
  085df	ba 72 09 00 00	 mov	 edx, 2418		; 00000972H
  085e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170499
  085eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN415@cckd64_chk:

; 2418 :                        "file opened read-only" );
; 2419 :               goto cdsk_error;

  085f1	e9 4f 2b 00 00	 jmp	 $cdsk_error$832
$LN413@cckd64_chk:

; 2420 :         }
; 2421 :         if (comperrs)

  085f6	0f b6 84 24 19
	01 00 00	 movzx	 eax, BYTE PTR comperrs$[rsp]
  085fe	85 c0		 test	 eax, eax
  08600	0f 84 ee 01 00
	00		 je	 $LN416@cckd64_chk

; 2422 :         {
; 2423 :             if(dev->batch)

  08606	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0860e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  08614	c1 e8 0a	 shr	 eax, 10
  08617	83 e0 01	 and	 eax, 1
  0861a	85 c0		 test	 eax, eax
  0861c	0f 84 e9 00 00
	00		 je	 $LN417@cckd64_chk

; 2424 :                 FWRMSG( stdout, HHC00375, "W", LCSS_DEVNUM, dev->filename,

  08622	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0862b	74 15		 je	 SHORT $LN744@cckd64_chk
  0862d	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08635	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  08639	89 84 24 14 03
	00 00		 mov	 DWORD PTR tv4148[rsp], eax
  08640	eb 0b		 jmp	 SHORT $LN745@cckd64_chk
$LN744@cckd64_chk:
  08642	c7 84 24 14 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4148[rsp], 0
$LN745@cckd64_chk:
  0864d	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  08656	74 17		 je	 SHORT $LN746@cckd64_chk
  08658	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08660	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  08664	d1 f8		 sar	 eax, 1
  08666	89 84 24 18 03
	00 00		 mov	 DWORD PTR tv4154[rsp], eax
  0866d	eb 0b		 jmp	 SHORT $LN747@cckd64_chk
$LN746@cckd64_chk:
  0866f	c7 84 24 18 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4154[rsp], 0
$LN747@cckd64_chk:
  0867a	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08682	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  08688	48 89 84 24 38
	08 00 00	 mov	 QWORD PTR tv4143[rsp], rax
  08690	b9 01 00 00 00	 mov	 ecx, 1
  08695	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0869b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170503
  086a2	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  086a7	48 8b 8c 24 38
	08 00 00	 mov	 rcx, QWORD PTR tv4143[rsp]
  086af	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  086b4	8b 8c 24 14 03
	00 00		 mov	 ecx, DWORD PTR tv4148[rsp]
  086bb	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  086bf	8b 8c 24 18 03
	00 00		 mov	 ecx, DWORD PTR tv4154[rsp]
  086c6	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  086ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170504
  086d1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  086d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170505
  086dd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  086e2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  086e7	41 b9 03 00 00
	00		 mov	 r9d, 3
  086ed	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170506
  086f4	ba 79 09 00 00	 mov	 edx, 2425		; 00000979H
  086f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170507
  08700	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  08706	e9 e4 00 00 00	 jmp	 $LN418@cckd64_chk
$LN417@cckd64_chk:

; 2425 :                         "missing compression" );
; 2426 :             else
; 2427 :                 WRMSG( HHC00375, "W", LCSS_DEVNUM, dev->filename,

  0870b	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  08714	74 15		 je	 SHORT $LN748@cckd64_chk
  08716	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0871e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  08722	89 84 24 1c 03
	00 00		 mov	 DWORD PTR tv4171[rsp], eax
  08729	eb 0b		 jmp	 SHORT $LN749@cckd64_chk
$LN748@cckd64_chk:
  0872b	c7 84 24 1c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4171[rsp], 0
$LN749@cckd64_chk:
  08736	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0873f	74 17		 je	 SHORT $LN750@cckd64_chk
  08741	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08749	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0874d	d1 f8		 sar	 eax, 1
  0874f	89 84 24 20 03
	00 00		 mov	 DWORD PTR tv4177[rsp], eax
  08756	eb 0b		 jmp	 SHORT $LN751@cckd64_chk
$LN750@cckd64_chk:
  08758	c7 84 24 20 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4177[rsp], 0
$LN751@cckd64_chk:
  08763	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0876b	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  08771	48 89 84 24 40
	08 00 00	 mov	 QWORD PTR tv4166[rsp], rax
  08779	b9 01 00 00 00	 mov	 ecx, 1
  0877e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  08784	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170508
  0878b	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  08790	48 8b 8c 24 40
	08 00 00	 mov	 rcx, QWORD PTR tv4166[rsp]
  08798	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0879d	8b 8c 24 1c 03
	00 00		 mov	 ecx, DWORD PTR tv4171[rsp]
  087a4	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  087a8	8b 8c 24 20 03
	00 00		 mov	 ecx, DWORD PTR tv4177[rsp]
  087af	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  087b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170509
  087ba	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  087bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170510
  087c6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  087cb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  087d0	41 b9 03 00 00
	00		 mov	 r9d, 3
  087d6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170511
  087dd	ba 7c 09 00 00	 mov	 edx, 2428		; 0000097cH
  087e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170512
  087e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN418@cckd64_chk:

; 2428 :                        "missing compression" );
; 2429 :             goto cdsk_error;

  087ef	e9 51 29 00 00	 jmp	 $cdsk_error$832
$LN416@cckd64_chk:

; 2430 :         }
; 2431 : 
; 2432 :         /* Write the l1 table */
; 2433 :         off = CCKD64_L1TAB_POS;

  087f4	48 c7 84 24 c0
	00 00 00 00 04
	00 00		 mov	 QWORD PTR off$[rsp], 1024 ; 00000400H

; 2434 :         if (lseek (fd, off, SEEK_SET) < 0)

  08800	45 33 c0	 xor	 r8d, r8d
  08803	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  0880b	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  08812	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  08818	48 85 c0	 test	 rax, rax
  0881b	7d 05		 jge	 SHORT $LN419@cckd64_chk

; 2435 :             goto cdsk_lseek_error;

  0881d	e9 10 1d 00 00	 jmp	 $cdsk_lseek_error$830
$LN419@cckd64_chk:

; 2436 :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  08822	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  08829	83 38 00	 cmp	 DWORD PTR [rax], 0
  0882c	74 43		 je	 SHORT $LN420@cckd64_chk
  0882e	41 b8 01 00 00
	00		 mov	 r8d, 1
  08834	33 d2		 xor	 edx, edx
  08836	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0883d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  08843	48 89 84 24 48
	08 00 00	 mov	 QWORD PTR tv4195[rsp], rax
  0884b	b9 02 00 00 00	 mov	 ecx, 2
  08850	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  08856	48 8b 8c 24 48
	08 00 00	 mov	 rcx, QWORD PTR tv4195[rsp]
  0885e	4c 8b c1	 mov	 r8, rcx
  08861	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170515
  08868	48 8b c8	 mov	 rcx, rax
  0886b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN420@cckd64_chk:

; 2437 :         len = l1size;

  08871	48 63 84 24 24
	01 00 00	 movsxd	 rax, DWORD PTR l1size$[rsp]
  08879	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR len$[rsp], rax

; 2438 :         if ((U64)(rc = write (fd, l1, (unsigned int) len)) != len)

  08881	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  08889	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  08891	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  08898	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  0889e	89 84 24 bc 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  088a5	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  088ad	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  088b5	74 05		 je	 SHORT $LN421@cckd64_chk

; 2439 :             goto cdsk_write_error;

  088b7	e9 4a 21 00 00	 jmp	 $cdsk_write_error$840
$LN421@cckd64_chk:

; 2440 : 
; 2441 :         /* Write l2 tables */
; 2442 :         qsort (spctab, s, sizeof(SPCTAB64), cdsk_spctab64_sort);

  088bc	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  088c4	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:cdsk_spctab64_sort
  088cb	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  088d1	48 8b d0	 mov	 rdx, rax
  088d4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  088dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 2443 :         for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  088e2	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  088ee	eb 13		 jmp	 SHORT $LN111@cckd64_chk
$LN109@cckd64_chk:
  088f0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  088f8	48 ff c0	 inc	 rax
  088fb	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN111@cckd64_chk:
  08903	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  0890c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08914	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  08918	83 f8 08	 cmp	 eax, 8
  0891b	0f 84 66 01 00
	00		 je	 $LN110@cckd64_chk

; 2444 :         {
; 2445 :             L1idx = spctab[i].spc_val;

  08921	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  0892a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08932	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  08936	89 84 24 f8 00
	00 00		 mov	 DWORD PTR L1idx$[rsp], eax

; 2446 :             if (spctab[i].spc_typ != SPCTAB_L2 || l2[L1idx] == NULL)

  0893d	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  08946	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0894e	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  08952	83 f8 04	 cmp	 eax, 4
  08955	75 17		 jne	 SHORT $LN423@cckd64_chk
  08957	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR L1idx$[rsp]
  0895f	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  08967	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0896c	75 02		 jne	 SHORT $LN422@cckd64_chk
$LN423@cckd64_chk:

; 2447 :                 continue;

  0896e	eb 80		 jmp	 SHORT $LN109@cckd64_chk
$LN422@cckd64_chk:

; 2448 :             off = l1[L1idx];

  08970	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR L1idx$[rsp]
  08978	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  08980	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  08984	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 2449 :             if (lseek (fd, off, SEEK_SET) < 0)

  0898c	45 33 c0	 xor	 r8d, r8d
  0898f	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  08997	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0899e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  089a4	48 85 c0	 test	 rax, rax
  089a7	7d 05		 jge	 SHORT $LN424@cckd64_chk

; 2450 :                 goto cdsk_lseek_error;

  089a9	e9 84 1b 00 00	 jmp	 $cdsk_lseek_error$830
$LN424@cckd64_chk:

; 2451 :             gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  089ae	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  089b5	83 38 00	 cmp	 DWORD PTR [rax], 0
  089b8	74 43		 je	 SHORT $LN425@cckd64_chk
  089ba	41 b8 01 00 00
	00		 mov	 r8d, 1
  089c0	33 d2		 xor	 edx, edx
  089c2	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  089c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  089cf	48 89 84 24 50
	08 00 00	 mov	 QWORD PTR tv4243[rsp], rax
  089d7	b9 02 00 00 00	 mov	 ecx, 2
  089dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  089e2	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR tv4243[rsp]
  089ea	4c 8b c1	 mov	 r8, rcx
  089ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170521
  089f4	48 8b c8	 mov	 rcx, rax
  089f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN425@cckd64_chk:

; 2452 :             len = CCKD64_L2TAB_SIZE;

  089fd	48 c7 84 24 b0
	00 00 00 00 10
	00 00		 mov	 QWORD PTR len$[rsp], 4096 ; 00001000H

; 2453 :             if ((U64)(rc = write (fd, l2[L1idx], (unsigned int) len)) != len)

  08a09	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR L1idx$[rsp]
  08a11	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  08a19	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  08a21	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  08a25	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  08a2c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  08a32	89 84 24 bc 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  08a39	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  08a41	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  08a49	74 05		 je	 SHORT $LN426@cckd64_chk

; 2454 :                 goto cdsk_write_error;

  08a4b	e9 b6 1f 00 00	 jmp	 $cdsk_write_error$840
$LN426@cckd64_chk:

; 2455 :             free (l2[L1idx]);

  08a50	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR L1idx$[rsp]
  08a58	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  08a60	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  08a64	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 2456 :             l2[L1idx] = NULL;

  08a6a	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR L1idx$[rsp]
  08a72	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  08a7a	48 c7 04 c1 00
	00 00 00	 mov	 QWORD PTR [rcx+rax*8], 0

; 2457 :         } /* for each space */

  08a82	e9 69 fe ff ff	 jmp	 $LN109@cckd64_chk
$LN110@cckd64_chk:

; 2458 : 
; 2459 :         /* Free recovery related storage */
; 2460 :         if (l2)

  08a87	48 83 bc 24 00
	01 00 00 00	 cmp	 QWORD PTR l2$[rsp], 0
  08a90	0f 84 80 00 00
	00		 je	 $LN427@cckd64_chk

; 2461 :         {
; 2462 :             for (i = 0; i < cdevhdr.num_L1tab; i++)

  08a96	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  08aa2	eb 13		 jmp	 SHORT $LN114@cckd64_chk
$LN112@cckd64_chk:
  08aa4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  08aac	48 ff c0	 inc	 rax
  08aaf	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN114@cckd64_chk:
  08ab7	48 63 84 24 94
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  08abf	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  08ac7	7d 33		 jge	 SHORT $LN113@cckd64_chk

; 2463 :                 if (l2[i])

  08ac9	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR l2$[rsp]
  08ad1	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  08ad9	48 83 3c c8 00	 cmp	 QWORD PTR [rax+rcx*8], 0
  08ade	74 1a		 je	 SHORT $LN428@cckd64_chk

; 2464 :                     free (l2[i]);

  08ae0	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR l2$[rsp]
  08ae8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  08af0	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  08af4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN428@cckd64_chk:
  08afa	eb a8		 jmp	 SHORT $LN112@cckd64_chk
$LN113@cckd64_chk:

; 2465 :             free (l2); l2 = NULL;

  08afc	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  08b04	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  08b0a	48 c7 84 24 00
	01 00 00 00 00
	00 00		 mov	 QWORD PTR l2$[rsp], 0
$LN427@cckd64_chk:

; 2466 :         }
; 2467 :         free (l2errs); l2errs = NULL;

  08b16	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR l2errs$[rsp]
  08b1e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  08b24	48 c7 84 24 68
	01 00 00 00 00
	00 00		 mov	 QWORD PTR l2errs$[rsp], 0

; 2468 :         free (rcvtab); rcvtab = NULL;

  08b30	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  08b38	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  08b3e	48 c7 84 24 10
	01 00 00 00 00
	00 00		 mov	 QWORD PTR rcvtab$[rsp], 0

; 2469 : 
; 2470 :         /* Ensure we do free space recovery */
; 2471 :         fsperr = 1;

  08b4a	c6 84 24 b8 00
	00 00 01	 mov	 BYTE PTR fsperr$[rsp], 1
$LN307@cckd64_chk:

; 2472 : 
; 2473 :     } /* if (recovery || level >= 4) */
; 2474 : 
; 2475 :     /*---------------------------------------------------------------
; 2476 :      * Rebuild free space
; 2477 :      *---------------------------------------------------------------*/
; 2478 : 
; 2479 :     if (fsperr && ro)

  08b52	0f b6 84 24 b8
	00 00 00	 movzx	 eax, BYTE PTR fsperr$[rsp]
  08b5a	85 c0		 test	 eax, eax
  08b5c	0f 84 e4 01 00
	00		 je	 $LN429@cckd64_chk
  08b62	83 bc 24 58 01
	00 00 00	 cmp	 DWORD PTR ro$[rsp], 0
  08b6a	0f 84 d6 01 00
	00		 je	 $LN429@cckd64_chk

; 2480 :     {
; 2481 :         if(dev->batch)

  08b70	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08b78	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  08b7e	c1 e8 0a	 shr	 eax, 10
  08b81	83 e0 01	 and	 eax, 1
  08b84	85 c0		 test	 eax, eax
  08b86	0f 84 dd 00 00
	00		 je	 $LN431@cckd64_chk

; 2482 :               FWRMSG( stdout, HHC00376, "W", LCSS_DEVNUM, dev->filename );

  08b8c	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  08b95	74 15		 je	 SHORT $LN752@cckd64_chk
  08b97	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08b9f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  08ba3	89 84 24 24 03
	00 00		 mov	 DWORD PTR tv4292[rsp], eax
  08baa	eb 0b		 jmp	 SHORT $LN753@cckd64_chk
$LN752@cckd64_chk:
  08bac	c7 84 24 24 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4292[rsp], 0
$LN753@cckd64_chk:
  08bb7	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  08bc0	74 17		 je	 SHORT $LN754@cckd64_chk
  08bc2	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08bca	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  08bce	d1 f8		 sar	 eax, 1
  08bd0	89 84 24 28 03
	00 00		 mov	 DWORD PTR tv4298[rsp], eax
  08bd7	eb 0b		 jmp	 SHORT $LN755@cckd64_chk
$LN754@cckd64_chk:
  08bd9	c7 84 24 28 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4298[rsp], 0
$LN755@cckd64_chk:
  08be4	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08bec	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  08bf2	48 89 84 24 58
	08 00 00	 mov	 QWORD PTR tv4287[rsp], rax
  08bfa	b9 01 00 00 00	 mov	 ecx, 1
  08bff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  08c05	48 8b 8c 24 58
	08 00 00	 mov	 rcx, QWORD PTR tv4287[rsp]
  08c0d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  08c12	8b 8c 24 24 03
	00 00		 mov	 ecx, DWORD PTR tv4292[rsp]
  08c19	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  08c1d	8b 8c 24 28 03
	00 00		 mov	 ecx, DWORD PTR tv4298[rsp]
  08c24	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  08c28	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170529
  08c2f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  08c34	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170530
  08c3b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  08c40	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  08c45	41 b9 03 00 00
	00		 mov	 r9d, 3
  08c4b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170531
  08c52	ba b2 09 00 00	 mov	 edx, 2482		; 000009b2H
  08c57	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170532
  08c5e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  08c64	e9 d8 00 00 00	 jmp	 $LN432@cckd64_chk
$LN431@cckd64_chk:

; 2483 :           else
; 2484 :               WRMSG( HHC00376, "W", LCSS_DEVNUM, dev->filename );

  08c69	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  08c72	74 15		 je	 SHORT $LN756@cckd64_chk
  08c74	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08c7c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  08c80	89 84 24 2c 03
	00 00		 mov	 DWORD PTR tv4314[rsp], eax
  08c87	eb 0b		 jmp	 SHORT $LN757@cckd64_chk
$LN756@cckd64_chk:
  08c89	c7 84 24 2c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4314[rsp], 0
$LN757@cckd64_chk:
  08c94	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  08c9d	74 17		 je	 SHORT $LN758@cckd64_chk
  08c9f	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08ca7	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  08cab	d1 f8		 sar	 eax, 1
  08cad	89 84 24 30 03
	00 00		 mov	 DWORD PTR tv4320[rsp], eax
  08cb4	eb 0b		 jmp	 SHORT $LN759@cckd64_chk
$LN758@cckd64_chk:
  08cb6	c7 84 24 30 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4320[rsp], 0
$LN759@cckd64_chk:
  08cc1	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08cc9	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  08ccf	48 89 84 24 60
	08 00 00	 mov	 QWORD PTR tv4309[rsp], rax
  08cd7	b9 01 00 00 00	 mov	 ecx, 1
  08cdc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  08ce2	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR tv4309[rsp]
  08cea	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  08cef	8b 8c 24 2c 03
	00 00		 mov	 ecx, DWORD PTR tv4314[rsp]
  08cf6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  08cfa	8b 8c 24 30 03
	00 00		 mov	 ecx, DWORD PTR tv4320[rsp]
  08d01	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  08d05	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170533
  08d0c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  08d11	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170534
  08d18	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  08d1d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  08d22	41 b9 03 00 00
	00		 mov	 r9d, 3
  08d28	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170535
  08d2f	ba b4 09 00 00	 mov	 edx, 2484		; 000009b4H
  08d34	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170536
  08d3b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN432@cckd64_chk:

; 2485 :     }

  08d41	e9 98 12 00 00	 jmp	 $LN430@cckd64_chk
$LN429@cckd64_chk:

; 2486 :     else if (fsperr)

  08d46	0f b6 84 24 b8
	00 00 00	 movzx	 eax, BYTE PTR fsperr$[rsp]
  08d4e	85 c0		 test	 eax, eax
  08d50	0f 84 88 12 00
	00		 je	 $LN433@cckd64_chk
$cdsk_fsperr_retry$841:

; 2487 :     {
; 2488 :         /*-----------------------------------------------------------
; 2489 :          * Phase 1 -- build the free space
; 2490 :          *            make sure the last space isn't free space and
; 2491 :          *            that each free space is long enough (8 bytes).
; 2492 :          *-----------------------------------------------------------*/
; 2493 : 
; 2494 : cdsk_fsperr_retry:
; 2495 : 
; 2496 :         s = cdsk_build_free_space64 (spctab, s);

  08d56	8b 94 24 a0 00
	00 00		 mov	 edx, DWORD PTR s$[rsp]
  08d5d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08d65	e8 00 00 00 00	 call	 cdsk_build_free_space64
  08d6a	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 2497 : 
; 2498 :         /*
; 2499 :          * spctab[s-1] is the SPCTAB_EOF entry.
; 2500 :          * if spctab[s-2] is SPCTAB_FREE then discard it
; 2501 :          */
; 2502 :         if (spctab[s-2].spc_typ == SPCTAB_FREE)

  08d71	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  08d78	83 e8 02	 sub	 eax, 2
  08d7b	48 98		 cdqe
  08d7d	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  08d81	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08d89	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  08d8d	83 f8 07	 cmp	 eax, 7
  08d90	0f 85 a9 00 00
	00		 jne	 $LN434@cckd64_chk

; 2503 :         {
; 2504 :             spctab[s-1].spc_typ = SPCTAB_NONE;

  08d96	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  08d9d	ff c8		 dec	 eax
  08d9f	48 98		 cdqe
  08da1	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  08da5	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08dad	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 2505 :             spctab[s-2].spc_typ = SPCTAB_EOF;

  08db1	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  08db8	83 e8 02	 sub	 eax, 2
  08dbb	48 98		 cdqe
  08dbd	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  08dc1	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08dc9	c6 04 01 08	 mov	 BYTE PTR [rcx+rax], 8

; 2506 :             spctab[s-2].spc_val = -1;

  08dcd	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  08dd4	83 e8 02	 sub	 eax, 2
  08dd7	48 98		 cdqe
  08dd9	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  08ddd	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08de5	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 2507 :             spctab[s-2].spc_len =

  08ded	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  08df4	83 e8 02	 sub	 eax, 2
  08df7	48 98		 cdqe
  08df9	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  08dfd	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08e05	48 c7 44 01 20
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+32], 0
  08e0e	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  08e15	83 e8 02	 sub	 eax, 2
  08e18	48 98		 cdqe
  08e1a	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  08e1e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08e26	48 c7 44 01 18
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+24], 0

; 2508 :             spctab[s-2].spc_siz = 0;
; 2509 :             s--;

  08e2f	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  08e36	ff c8		 dec	 eax
  08e38	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax
$LN434@cckd64_chk:

; 2510 :         }
; 2511 :         /*
; 2512 :          * Check for short free spaces.
; 2513 :          * If found, shift left until the next free space or eof.
; 2514 :          */
; 2515 :         for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  08e3f	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  08e4b	eb 13		 jmp	 SHORT $LN117@cckd64_chk
$LN115@cckd64_chk:
  08e4d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  08e55	48 ff c0	 inc	 rax
  08e58	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN117@cckd64_chk:
  08e60	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  08e69	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08e71	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  08e75	83 f8 08	 cmp	 eax, 8
  08e78	74 37		 je	 SHORT $LN116@cckd64_chk

; 2516 :             if (spctab[i].spc_typ == SPCTAB_FREE
; 2517 :              && spctab[i].spc_siz < CCKD64_FREEBLK_SIZE)

  08e7a	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  08e83	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08e8b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  08e8f	83 f8 07	 cmp	 eax, 7
  08e92	75 1b		 jne	 SHORT $LN435@cckd64_chk
  08e94	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  08e9d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08ea5	48 83 7c 01 20
	10		 cmp	 QWORD PTR [rcx+rax+32], 16
  08eab	73 02		 jae	 SHORT $LN435@cckd64_chk

; 2518 :                 break;

  08ead	eb 02		 jmp	 SHORT $LN116@cckd64_chk
$LN435@cckd64_chk:
  08eaf	eb 9c		 jmp	 SHORT $LN115@cckd64_chk
$LN116@cckd64_chk:

; 2519 :         if (spctab[i].spc_typ != SPCTAB_EOF)

  08eb1	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  08eba	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08ec2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  08ec6	83 f8 08	 cmp	 eax, 8
  08ec9	0f 84 04 05 00
	00		 je	 $LN436@cckd64_chk

; 2520 :         {
; 2521 :             /* Shift following space left */
; 2522 :             l = spctab[i++].spc_siz;

  08ecf	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  08ed8	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08ee0	48 8b 44 01 20	 mov	 rax, QWORD PTR [rcx+rax+32]
  08ee5	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR l$[rsp], rax
  08eed	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  08ef5	48 ff c0	 inc	 rax
  08ef8	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN118@cckd64_chk:

; 2523 :             while (spctab[i].spc_typ != SPCTAB_FREE && spctab[i].spc_typ != SPCTAB_EOF)

  08f00	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  08f09	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08f11	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  08f15	83 f8 07	 cmp	 eax, 7
  08f18	0f 84 b0 04 00
	00		 je	 $LN119@cckd64_chk
  08f1e	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  08f27	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08f2f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  08f33	83 f8 08	 cmp	 eax, 8
  08f36	0f 84 92 04 00
	00		 je	 $LN119@cckd64_chk

; 2524 :             {
; 2525 :                 /* Read the space and write shifted to the left */
; 2526 :                 off = spctab[i].spc_off;

  08f3c	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  08f45	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08f4d	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  08f52	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 2527 :                 if (lseek (fd, off, SEEK_SET) < 0)

  08f5a	45 33 c0	 xor	 r8d, r8d
  08f5d	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  08f65	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  08f6c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  08f72	48 85 c0	 test	 rax, rax
  08f75	7d 05		 jge	 SHORT $LN437@cckd64_chk

; 2528 :                     goto cdsk_lseek_error;

  08f77	e9 b6 15 00 00	 jmp	 $cdsk_lseek_error$830
$LN437@cckd64_chk:

; 2529 :                 gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  08f7c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  08f83	83 38 00	 cmp	 DWORD PTR [rax], 0
  08f86	74 43		 je	 SHORT $LN438@cckd64_chk
  08f88	41 b8 01 00 00
	00		 mov	 r8d, 1
  08f8e	33 d2		 xor	 edx, edx
  08f90	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  08f97	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  08f9d	48 89 84 24 68
	08 00 00	 mov	 QWORD PTR tv4413[rsp], rax
  08fa5	b9 02 00 00 00	 mov	 ecx, 2
  08faa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  08fb0	48 8b 8c 24 68
	08 00 00	 mov	 rcx, QWORD PTR tv4413[rsp]
  08fb8	4c 8b c1	 mov	 r8, rcx
  08fbb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170543
  08fc2	48 8b c8	 mov	 rcx, rax
  08fc5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN438@cckd64_chk:

; 2530 :                 len = spctab[i].spc_siz;

  08fcb	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  08fd4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08fdc	48 8b 44 01 20	 mov	 rax, QWORD PTR [rcx+rax+32]
  08fe1	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR len$[rsp], rax

; 2531 :                 if ((U64)(rc = read (fd, buf, (unsigned int) len)) != len)

  08fe9	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  08ff1	48 8d 94 24 90
	31 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  08ff9	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09000	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  09006	89 84 24 bc 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  0900d	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  09015	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  0901d	74 05		 je	 SHORT $LN439@cckd64_chk

; 2532 :                     goto cdsk_read_error;

  0901f	e9 5e 17 00 00	 jmp	 $cdsk_read_error$831
$LN439@cckd64_chk:

; 2533 :                 off -= l;

  09024	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  0902c	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  09034	48 2b c8	 sub	 rcx, rax
  09037	48 8b c1	 mov	 rax, rcx
  0903a	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 2534 :                 if (lseek (fd, off, SEEK_SET) < 0)

  09042	45 33 c0	 xor	 r8d, r8d
  09045	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  0904d	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0905a	48 85 c0	 test	 rax, rax
  0905d	7d 05		 jge	 SHORT $LN440@cckd64_chk

; 2535 :                     goto cdsk_lseek_error;

  0905f	e9 ce 14 00 00	 jmp	 $cdsk_lseek_error$830
$LN440@cckd64_chk:

; 2536 :                 gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  09064	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  0906b	83 38 00	 cmp	 DWORD PTR [rax], 0
  0906e	74 43		 je	 SHORT $LN441@cckd64_chk
  09070	41 b8 01 00 00
	00		 mov	 r8d, 1
  09076	33 d2		 xor	 edx, edx
  09078	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0907f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  09085	48 89 84 24 70
	08 00 00	 mov	 QWORD PTR tv4438[rsp], rax
  0908d	b9 02 00 00 00	 mov	 ecx, 2
  09092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  09098	48 8b 8c 24 70
	08 00 00	 mov	 rcx, QWORD PTR tv4438[rsp]
  090a0	4c 8b c1	 mov	 r8, rcx
  090a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170547
  090aa	48 8b c8	 mov	 rcx, rax
  090ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN441@cckd64_chk:

; 2537 :                 if ((U64)(rc = write (fd, buf, (unsigned int) len)) != len)

  090b3	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  090bb	48 8d 94 24 90
	31 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  090c3	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  090ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  090d0	89 84 24 bc 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  090d7	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  090df	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  090e7	74 05		 je	 SHORT $LN442@cckd64_chk

; 2538 :                     goto cdsk_write_error;

  090e9	e9 18 19 00 00	 jmp	 $cdsk_write_error$840
$LN442@cckd64_chk:

; 2539 :                 spctab[i].spc_off -= l;

  090ee	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  090f7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  090ff	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR l$[rsp]
  09107	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  0910c	48 2b c2	 sub	 rax, rdx
  0910f	48 6b 8c 24 90
	00 00 00 28	 imul	 rcx, QWORD PTR i$[rsp], 40 ; 00000028H
  09118	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  09120	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax

; 2540 : 
; 2541 :                 /* Update the l2 or l1 table entry */
; 2542 :                 if (spctab[i].spc_typ == trktyp)

  09125	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  0912e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09136	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0913a	0f b6 8c 24 a5
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  09142	3b c1		 cmp	 eax, ecx
  09144	0f 85 03 02 00
	00		 jne	 $LN443@cckd64_chk

; 2543 :                 {
; 2544 :                     L1idx = spctab[i].spc_val/256;

  0914a	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  09153	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0915b	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  0915f	99		 cdq
  09160	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  09166	03 c2		 add	 eax, edx
  09168	c1 f8 08	 sar	 eax, 8
  0916b	89 84 24 f8 00
	00 00		 mov	 DWORD PTR L1idx$[rsp], eax

; 2545 :                     l2x = spctab[i].spc_val%256;

  09172	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  0917b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09183	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  09187	99		 cdq
  09188	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0918e	03 c2		 add	 eax, edx
  09190	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  09195	2b c2		 sub	 eax, edx
  09197	89 84 24 5c 01
	00 00		 mov	 DWORD PTR l2x$[rsp], eax

; 2546 :                     off = l1[L1idx] + l2x * CCKD64_L2ENT_SIZE;

  0919e	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR L1idx$[rsp]
  091a6	48 63 8c 24 5c
	01 00 00	 movsxd	 rcx, DWORD PTR l2x$[rsp]
  091ae	48 6b c9 10	 imul	 rcx, rcx, 16
  091b2	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  091ba	48 03 0c c2	 add	 rcx, QWORD PTR [rdx+rax*8]
  091be	48 8b c1	 mov	 rax, rcx
  091c1	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 2547 :                     if (lseek (fd, off, SEEK_SET) < 0)

  091c9	45 33 c0	 xor	 r8d, r8d
  091cc	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  091d4	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  091db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  091e1	48 85 c0	 test	 rax, rax
  091e4	7d 05		 jge	 SHORT $LN445@cckd64_chk

; 2548 :                         goto cdsk_lseek_error;

  091e6	e9 47 13 00 00	 jmp	 $cdsk_lseek_error$830
$LN445@cckd64_chk:

; 2549 :                     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  091eb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  091f2	83 38 00	 cmp	 DWORD PTR [rax], 0
  091f5	74 43		 je	 SHORT $LN446@cckd64_chk
  091f7	41 b8 01 00 00
	00		 mov	 r8d, 1
  091fd	33 d2		 xor	 edx, edx
  091ff	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09206	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0920c	48 89 84 24 78
	08 00 00	 mov	 QWORD PTR tv4486[rsp], rax
  09214	b9 02 00 00 00	 mov	 ecx, 2
  09219	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0921f	48 8b 8c 24 78
	08 00 00	 mov	 rcx, QWORD PTR tv4486[rsp]
  09227	4c 8b c1	 mov	 r8, rcx
  0922a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170553
  09231	48 8b c8	 mov	 rcx, rax
  09234	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN446@cckd64_chk:

; 2550 :                     len = CCKD64_L2ENT_SIZE;

  0923a	48 c7 84 24 b0
	00 00 00 10 00
	00 00		 mov	 QWORD PTR len$[rsp], 16

; 2551 :                     if ((U64)(rc = read (fd, &l2ent, (unsigned int) len)) != len)

  09246	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  0924e	48 8d 94 24 80
	0b 00 00	 lea	 rdx, QWORD PTR l2ent$[rsp]
  09256	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0925d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  09263	89 84 24 bc 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  0926a	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  09272	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  0927a	74 05		 je	 SHORT $LN447@cckd64_chk

; 2552 :                         goto cdsk_read_error;

  0927c	e9 01 15 00 00	 jmp	 $cdsk_read_error$831
$LN447@cckd64_chk:

; 2553 :                     l2ent.L2_trkoff -= l;

  09281	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR l$[rsp]
  09289	48 8b 8c 24 80
	0b 00 00	 mov	 rcx, QWORD PTR l2ent$[rsp]
  09291	48 2b c8	 sub	 rcx, rax
  09294	48 8b c1	 mov	 rax, rcx
  09297	48 89 84 24 80
	0b 00 00	 mov	 QWORD PTR l2ent$[rsp], rax

; 2554 :                     if (lseek (fd, off, SEEK_SET) < 0)

  0929f	45 33 c0	 xor	 r8d, r8d
  092a2	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  092aa	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  092b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  092b7	48 85 c0	 test	 rax, rax
  092ba	7d 05		 jge	 SHORT $LN448@cckd64_chk

; 2555 :                         goto cdsk_lseek_error;

  092bc	e9 71 12 00 00	 jmp	 $cdsk_lseek_error$830
$LN448@cckd64_chk:

; 2556 :                     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  092c1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  092c8	83 38 00	 cmp	 DWORD PTR [rax], 0
  092cb	74 43		 je	 SHORT $LN449@cckd64_chk
  092cd	41 b8 01 00 00
	00		 mov	 r8d, 1
  092d3	33 d2		 xor	 edx, edx
  092d5	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  092dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  092e2	48 89 84 24 80
	08 00 00	 mov	 QWORD PTR tv4508[rsp], rax
  092ea	b9 02 00 00 00	 mov	 ecx, 2
  092ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  092f5	48 8b 8c 24 80
	08 00 00	 mov	 rcx, QWORD PTR tv4508[rsp]
  092fd	4c 8b c1	 mov	 r8, rcx
  09300	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170557
  09307	48 8b c8	 mov	 rcx, rax
  0930a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN449@cckd64_chk:

; 2557 :                     if ((U64)(rc = write (fd, &l2ent, (unsigned int) len)) != len)

  09310	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  09318	48 8d 94 24 80
	0b 00 00	 lea	 rdx, QWORD PTR l2ent$[rsp]
  09320	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09327	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  0932d	89 84 24 bc 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  09334	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  0933c	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  09344	74 05		 je	 SHORT $LN450@cckd64_chk

; 2558 :                         goto cdsk_write_error;

  09346	e9 bb 16 00 00	 jmp	 $cdsk_write_error$840
$LN450@cckd64_chk:

; 2559 :                 } /* trk/blkgrp relocated */

  0934b	eb 69		 jmp	 SHORT $LN444@cckd64_chk
$LN443@cckd64_chk:

; 2560 :                 else if (spctab[i].spc_typ == SPCTAB_L2)

  0934d	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  09356	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0935e	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  09362	83 f8 04	 cmp	 eax, 4
  09365	75 4f		 jne	 SHORT $LN451@cckd64_chk

; 2561 :                     l1[spctab[i].spc_val] -= l;

  09367	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  09370	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09378	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  0937d	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  09385	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR l$[rsp]
  0938d	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  09391	48 2b c2	 sub	 rax, rdx
  09394	48 6b 8c 24 90
	00 00 00 28	 imul	 rcx, QWORD PTR i$[rsp], 40 ; 00000028H
  0939d	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  093a5	48 63 4c 0a 04	 movsxd	 rcx, DWORD PTR [rdx+rcx+4]
  093aa	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  093b2	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax
$LN451@cckd64_chk:
$LN444@cckd64_chk:

; 2562 :                 i++;

  093b6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  093be	48 ff c0	 inc	 rax
  093c1	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax

; 2563 :             } /* while not FREE space or EOF */

  093c9	e9 32 fb ff ff	 jmp	 $LN118@cckd64_chk
$LN119@cckd64_chk:

; 2564 :             goto cdsk_fsperr_retry;

  093ce	e9 83 f9 ff ff	 jmp	 $cdsk_fsperr_retry$841
$LN436@cckd64_chk:

; 2565 :         } /* if short free space found */
; 2566 : 
; 2567 :         /*-----------------------------------------------------------
; 2568 :          * Phase 2 -- rebuild free space statistics
; 2569 :          *-----------------------------------------------------------*/
; 2570 : 
; 2571 :         cdevhdr.cdh_vrm[0] = CCKD_VERSION;

  093d3	b8 01 00 00 00	 mov	 eax, 1
  093d8	48 6b c0 00	 imul	 rax, rax, 0
  093dc	c6 84 04 90 0b
	00 00 00	 mov	 BYTE PTR cdevhdr$[rsp+rax], 0

; 2572 :         cdevhdr.cdh_vrm[1] = CCKD_RELEASE;

  093e4	b8 01 00 00 00	 mov	 eax, 1
  093e9	48 6b c0 01	 imul	 rax, rax, 1
  093ed	c6 84 04 90 0b
	00 00 03	 mov	 BYTE PTR cdevhdr$[rsp+rax], 3

; 2573 :         cdevhdr.cdh_vrm[2] = CCKD_MODLVL;

  093f5	b8 01 00 00 00	 mov	 eax, 1
  093fa	48 6b c0 02	 imul	 rax, rax, 2
  093fe	c6 84 04 90 0b
	00 00 01	 mov	 BYTE PTR cdevhdr$[rsp+rax], 1

; 2574 : 
; 2575 :         cdevhdr.cdh_size     =

  09406	48 c7 84 24 d0
	0b 00 00 00 00
	00 00		 mov	 QWORD PTR cdevhdr$[rsp+64], 0
  09412	48 8b 84 24 d0
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+64]
  0941a	48 89 84 24 c8
	0b 00 00	 mov	 QWORD PTR cdevhdr$[rsp+56], rax
  09422	48 8b 84 24 c8
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+56]
  0942a	48 89 84 24 c0
	0b 00 00	 mov	 QWORD PTR cdevhdr$[rsp+48], rax
  09432	48 8b 84 24 c0
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+48]
  0943a	48 89 84 24 b8
	0b 00 00	 mov	 QWORD PTR cdevhdr$[rsp+40], rax
  09442	48 8b 84 24 b8
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+40]
  0944a	48 89 84 24 b0
	0b 00 00	 mov	 QWORD PTR cdevhdr$[rsp+32], rax
  09452	48 8b 84 24 b0
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+32]
  0945a	48 89 84 24 a8
	0b 00 00	 mov	 QWORD PTR cdevhdr$[rsp+24], rax
  09462	48 8b 84 24 a8
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+24]
  0946a	48 89 84 24 a0
	0b 00 00	 mov	 QWORD PTR cdevhdr$[rsp+16], rax

; 2576 :         cdevhdr.cdh_used     =
; 2577 :         cdevhdr.free_off     =
; 2578 :         cdevhdr.free_total   =
; 2579 :         cdevhdr.free_largest =
; 2580 :         cdevhdr.free_num     =
; 2581 :         cdevhdr.free_imbed   = 0;
; 2582 : 
; 2583 :         for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  09472	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  0947e	eb 13		 jmp	 SHORT $LN122@cckd64_chk
$LN120@cckd64_chk:
  09480	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  09488	48 ff c0	 inc	 rax
  0948b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN122@cckd64_chk:
  09493	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  0949c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  094a4	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  094a8	83 f8 08	 cmp	 eax, 8
  094ab	0f 84 b3 01 00
	00		 je	 $LN121@cckd64_chk

; 2584 :             if (spctab[i].spc_typ == SPCTAB_FREE)

  094b1	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  094ba	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  094c2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  094c6	83 f8 07	 cmp	 eax, 7
  094c9	0f 85 ae 00 00
	00		 jne	 $LN452@cckd64_chk

; 2585 :             {
; 2586 :                 cdevhdr.cdh_size += spctab[i].spc_siz;

  094cf	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  094d8	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  094e0	48 8b 44 01 20	 mov	 rax, QWORD PTR [rcx+rax+32]
  094e5	48 8b 8c 24 a0
	0b 00 00	 mov	 rcx, QWORD PTR cdevhdr$[rsp+16]
  094ed	48 03 c8	 add	 rcx, rax
  094f0	48 8b c1	 mov	 rax, rcx
  094f3	48 89 84 24 a0
	0b 00 00	 mov	 QWORD PTR cdevhdr$[rsp+16], rax

; 2587 : 
; 2588 :                 if (spctab[i].spc_siz > cdevhdr.free_largest)

  094fb	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  09504	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0950c	48 8b 94 24 c0
	0b 00 00	 mov	 rdx, QWORD PTR cdevhdr$[rsp+48]
  09514	48 39 54 01 20	 cmp	 QWORD PTR [rcx+rax+32], rdx
  09519	76 1e		 jbe	 SHORT $LN454@cckd64_chk

; 2589 :                     cdevhdr.free_largest = spctab[i].spc_siz;

  0951b	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  09524	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0952c	48 8b 44 01 20	 mov	 rax, QWORD PTR [rcx+rax+32]
  09531	48 89 84 24 c0
	0b 00 00	 mov	 QWORD PTR cdevhdr$[rsp+48], rax
$LN454@cckd64_chk:

; 2590 : 
; 2591 :                 cdevhdr.free_total += spctab[i].spc_siz;

  09539	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  09542	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0954a	48 8b 44 01 20	 mov	 rax, QWORD PTR [rcx+rax+32]
  0954f	48 8b 8c 24 b8
	0b 00 00	 mov	 rcx, QWORD PTR cdevhdr$[rsp+40]
  09557	48 03 c8	 add	 rcx, rax
  0955a	48 8b c1	 mov	 rax, rcx
  0955d	48 89 84 24 b8
	0b 00 00	 mov	 QWORD PTR cdevhdr$[rsp+40], rax

; 2592 :                 cdevhdr.free_num++;

  09565	48 8b 84 24 c8
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+56]
  0956d	48 ff c0	 inc	 rax
  09570	48 89 84 24 c8
	0b 00 00	 mov	 QWORD PTR cdevhdr$[rsp+56], rax

; 2593 :             }

  09578	e9 e2 00 00 00	 jmp	 $LN453@cckd64_chk
$LN452@cckd64_chk:

; 2594 :             else
; 2595 :             {
; 2596 :                 cdevhdr.cdh_size   += spctab[i].spc_siz;

  0957d	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  09586	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0958e	48 8b 44 01 20	 mov	 rax, QWORD PTR [rcx+rax+32]
  09593	48 8b 8c 24 a0
	0b 00 00	 mov	 rcx, QWORD PTR cdevhdr$[rsp+16]
  0959b	48 03 c8	 add	 rcx, rax
  0959e	48 8b c1	 mov	 rax, rcx
  095a1	48 89 84 24 a0
	0b 00 00	 mov	 QWORD PTR cdevhdr$[rsp+16], rax

; 2597 :                 cdevhdr.cdh_used   += spctab[i].spc_len;

  095a9	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  095b2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  095ba	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  095bf	48 8b 8c 24 a8
	0b 00 00	 mov	 rcx, QWORD PTR cdevhdr$[rsp+24]
  095c7	48 03 c8	 add	 rcx, rax
  095ca	48 8b c1	 mov	 rax, rcx
  095cd	48 89 84 24 a8
	0b 00 00	 mov	 QWORD PTR cdevhdr$[rsp+24], rax

; 2598 :                 cdevhdr.free_total += spctab[i].spc_siz - spctab[i].spc_len;

  095d5	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  095de	48 6b 8c 24 90
	00 00 00 28	 imul	 rcx, QWORD PTR i$[rsp], 40 ; 00000028H
  095e7	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  095ef	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  095f7	48 8b 4c 0f 18	 mov	 rcx, QWORD PTR [rdi+rcx+24]
  095fc	48 8b 44 02 20	 mov	 rax, QWORD PTR [rdx+rax+32]
  09601	48 2b c1	 sub	 rax, rcx
  09604	48 8b 8c 24 b8
	0b 00 00	 mov	 rcx, QWORD PTR cdevhdr$[rsp+40]
  0960c	48 03 c8	 add	 rcx, rax
  0960f	48 8b c1	 mov	 rax, rcx
  09612	48 89 84 24 b8
	0b 00 00	 mov	 QWORD PTR cdevhdr$[rsp+40], rax

; 2599 :                 cdevhdr.free_imbed += spctab[i].spc_siz - spctab[i].spc_len;

  0961a	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  09623	48 6b 8c 24 90
	00 00 00 28	 imul	 rcx, QWORD PTR i$[rsp], 40 ; 00000028H
  0962c	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  09634	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  0963c	48 8b 4c 0f 18	 mov	 rcx, QWORD PTR [rdi+rcx+24]
  09641	48 8b 44 02 20	 mov	 rax, QWORD PTR [rdx+rax+32]
  09646	48 2b c1	 sub	 rax, rcx
  09649	48 8b 8c 24 d0
	0b 00 00	 mov	 rcx, QWORD PTR cdevhdr$[rsp+64]
  09651	48 03 c8	 add	 rcx, rax
  09654	48 8b c1	 mov	 rax, rcx
  09657	48 89 84 24 d0
	0b 00 00	 mov	 QWORD PTR cdevhdr$[rsp+64], rax
$LN453@cckd64_chk:

; 2600 :              }

  0965f	e9 1c fe ff ff	 jmp	 $LN120@cckd64_chk
$LN121@cckd64_chk:

; 2601 : 
; 2602 :         /*-----------------------------------------------------------
; 2603 :          * Phase 3 -- write the free space
; 2604 :          *-----------------------------------------------------------*/
; 2605 : 
; 2606 :         if (cdevhdr.free_num)

  09664	48 83 bc 24 c8
	0b 00 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+56], 0
  0966d	0f 84 c5 05 00
	00		 je	 $LN455@cckd64_chk

; 2607 :         {
; 2608 :             /* size needed for new format free space */
; 2609 :             len = (cdevhdr.free_num+1) * CCKD64_FREEBLK_SIZE;

  09673	48 8b 84 24 c8
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+56]
  0967b	48 ff c0	 inc	 rax
  0967e	48 6b c0 10	 imul	 rax, rax, 16
  09682	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR len$[rsp], rax

; 2610 : 
; 2611 :             /* look for existing free space to fit new format free space */
; 2612 :             for (i = 0, off = 0; !off && spctab[i].spc_typ != SPCTAB_EOF; i++)

  0968a	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  09696	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR off$[rsp], 0
  096a2	eb 13		 jmp	 SHORT $LN125@cckd64_chk
$LN123@cckd64_chk:
  096a4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  096ac	48 ff c0	 inc	 rax
  096af	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN125@cckd64_chk:
  096b7	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR off$[rsp], 0
  096c0	75 77		 jne	 SHORT $LN124@cckd64_chk
  096c2	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  096cb	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  096d3	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  096d7	83 f8 08	 cmp	 eax, 8
  096da	74 5d		 je	 SHORT $LN124@cckd64_chk

; 2613 :                 if (spctab[i].spc_typ == SPCTAB_FREE && len <= spctab[i].spc_siz)

  096dc	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  096e5	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  096ed	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  096f1	83 f8 07	 cmp	 eax, 7
  096f4	75 3e		 jne	 SHORT $LN456@cckd64_chk
  096f6	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  096ff	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09707	48 8b 44 01 20	 mov	 rax, QWORD PTR [rcx+rax+32]
  0970c	48 39 84 24 b0
	00 00 00	 cmp	 QWORD PTR len$[rsp], rax
  09714	77 1e		 ja	 SHORT $LN456@cckd64_chk

; 2614 :                     off = spctab[i].spc_off;

  09716	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  0971f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09727	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  0972c	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax
$LN456@cckd64_chk:
  09734	e9 6b ff ff ff	 jmp	 $LN123@cckd64_chk
$LN124@cckd64_chk:

; 2615 : 
; 2616 :             /* if no applicable space see if we can append to the file */
; 2617 :             if (!off && cckd_maxsize - cdevhdr.cdh_size >= len)

  09739	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR off$[rsp], 0
  09742	75 30		 jne	 SHORT $LN457@cckd64_chk
  09744	48 8b 84 24 a0
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+16]
  0974c	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR cckd_maxsize$[rsp]
  09754	48 2b c8	 sub	 rcx, rax
  09757	48 8b c1	 mov	 rax, rcx
  0975a	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  09762	72 10		 jb	 SHORT $LN457@cckd64_chk

; 2618 :                 off = cdevhdr.cdh_size;

  09764	48 8b 84 24 a0
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+16]
  0976c	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax
$LN457@cckd64_chk:

; 2619 : 
; 2620 :             /* get free space buffer */
; 2621 :             if (off && (fsp = malloc((size_t)len)) == NULL)

  09774	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR off$[rsp], 0
  0977d	74 2d		 je	 SHORT $LN458@cckd64_chk
  0977f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  09787	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0978d	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR fsp$[rsp], rax
  09795	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR fsp$[rsp], 0
  0979e	75 0c		 jne	 SHORT $LN458@cckd64_chk

; 2622 :                 off = 0;

  097a0	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR off$[rsp], 0
$LN458@cckd64_chk:

; 2623 : 
; 2624 :             if (off)

  097ac	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR off$[rsp], 0
  097b5	0f 84 c1 01 00
	00		 je	 $LN459@cckd64_chk

; 2625 :             {
; 2626 :                 /* new format free space */
; 2627 :                 memcpy (fsp, "FREE_BLK", 8);

  097bb	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR fsp$[rsp]
  097c3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR $SG170569
  097ca	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2628 :                 for (i = 0, j = 1; spctab[i].spc_typ != SPCTAB_EOF; i++)

  097cd	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  097d9	48 c7 84 24 d0
	00 00 00 01 00
	00 00		 mov	 QWORD PTR j$[rsp], 1
  097e5	eb 13		 jmp	 SHORT $LN128@cckd64_chk
$LN126@cckd64_chk:
  097e7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  097ef	48 ff c0	 inc	 rax
  097f2	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN128@cckd64_chk:
  097fa	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  09803	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0980b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0980f	83 f8 08	 cmp	 eax, 8
  09812	0f 84 89 00 00
	00		 je	 $LN127@cckd64_chk

; 2629 :                     if (spctab[i].spc_typ == SPCTAB_FREE)

  09818	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  09821	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09829	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0982d	83 f8 07	 cmp	 eax, 7
  09830	75 6a		 jne	 SHORT $LN461@cckd64_chk

; 2630 :                     {
; 2631 :                         fsp[j].fb_offnxt = spctab[i].spc_off;

  09832	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  0983b	48 6b 8c 24 d0
	00 00 00 10	 imul	 rcx, QWORD PTR j$[rsp], 16
  09844	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR fsp$[rsp]
  0984c	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  09854	48 8b 44 07 10	 mov	 rax, QWORD PTR [rdi+rax+16]
  09859	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax

; 2632 :                         fsp[j++].fb_len = spctab[i].spc_siz;

  0985d	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  09866	48 6b 8c 24 d0
	00 00 00 10	 imul	 rcx, QWORD PTR j$[rsp], 16
  0986f	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR fsp$[rsp]
  09877	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  0987f	48 8b 44 07 20	 mov	 rax, QWORD PTR [rdi+rax+32]
  09884	48 89 44 0a 08	 mov	 QWORD PTR [rdx+rcx+8], rax
  09889	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  09891	48 ff c0	 inc	 rax
  09894	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR j$[rsp], rax
$LN461@cckd64_chk:

; 2633 :                     }

  0989c	e9 46 ff ff ff	 jmp	 $LN126@cckd64_chk
$LN127@cckd64_chk:

; 2634 : 
; 2635 :                 /* Write the free space */
; 2636 :                 if (lseek (fd, off, SEEK_SET) < 0)

  098a1	45 33 c0	 xor	 r8d, r8d
  098a4	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  098ac	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  098b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  098b9	48 85 c0	 test	 rax, rax
  098bc	7d 05		 jge	 SHORT $LN462@cckd64_chk

; 2637 :                     goto cdsk_lseek_error;

  098be	e9 6f 0c 00 00	 jmp	 $cdsk_lseek_error$830
$LN462@cckd64_chk:

; 2638 :                 gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  098c3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  098ca	83 38 00	 cmp	 DWORD PTR [rax], 0
  098cd	74 43		 je	 SHORT $LN463@cckd64_chk
  098cf	41 b8 01 00 00
	00		 mov	 r8d, 1
  098d5	33 d2		 xor	 edx, edx
  098d7	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  098de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  098e4	48 89 84 24 88
	08 00 00	 mov	 QWORD PTR tv4733[rsp], rax
  098ec	b9 02 00 00 00	 mov	 ecx, 2
  098f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  098f7	48 8b 8c 24 88
	08 00 00	 mov	 rcx, QWORD PTR tv4733[rsp]
  098ff	4c 8b c1	 mov	 r8, rcx
  09902	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170573
  09909	48 8b c8	 mov	 rcx, rax
  0990c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN463@cckd64_chk:

; 2639 :                 if ((U64)(rc = write (fd, fsp, (unsigned int) len)) != len)

  09912	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  0991a	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR fsp$[rsp]
  09922	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09929	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  0992f	89 84 24 bc 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  09936	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  0993e	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  09946	74 05		 je	 SHORT $LN464@cckd64_chk

; 2640 :                     goto cdsk_write_error;

  09948	e9 b9 10 00 00	 jmp	 $cdsk_write_error$840
$LN464@cckd64_chk:

; 2641 :                 cdevhdr.free_off = off;

  0994d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR off$[rsp]
  09955	48 89 84 24 b0
	0b 00 00	 mov	 QWORD PTR cdevhdr$[rsp+32], rax

; 2642 : 
; 2643 :                 free (fsp);

  0995d	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR fsp$[rsp]
  09965	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 2644 :                 fsp = NULL;

  0996b	48 c7 84 24 30
	01 00 00 00 00
	00 00		 mov	 QWORD PTR fsp$[rsp], 0

; 2645 :             } /* new format free space */

  09977	e9 bc 02 00 00	 jmp	 $LN460@cckd64_chk
$LN459@cckd64_chk:

; 2646 :             else
; 2647 :             {
; 2648 :                 /* old format free space */
; 2649 :                 len = CCKD64_FREEBLK_SIZE;

  0997c	48 c7 84 24 b0
	00 00 00 10 00
	00 00		 mov	 QWORD PTR len$[rsp], 16

; 2650 :                 for (i = 0; spctab[i].spc_typ != SPCTAB_FREE; i++);

  09988	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  09994	eb 13		 jmp	 SHORT $LN131@cckd64_chk
$LN129@cckd64_chk:
  09996	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  0999e	48 ff c0	 inc	 rax
  099a1	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN131@cckd64_chk:
  099a9	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  099b2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  099ba	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  099be	83 f8 07	 cmp	 eax, 7
  099c1	74 02		 je	 SHORT $LN130@cckd64_chk
  099c3	eb d1		 jmp	 SHORT $LN129@cckd64_chk
$LN130@cckd64_chk:

; 2651 :                 cdevhdr.free_off = spctab[i].spc_off;

  099c5	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  099ce	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  099d6	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  099db	48 89 84 24 b0
	0b 00 00	 mov	 QWORD PTR cdevhdr$[rsp+32], rax

; 2652 :                 off = spctab[i].spc_off;

  099e3	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  099ec	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  099f4	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  099f9	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 2653 :                 freeblk.fb_offnxt = 0;

  09a01	48 c7 84 24 70
	0b 00 00 00 00
	00 00		 mov	 QWORD PTR freeblk$[rsp], 0

; 2654 :                 freeblk.fb_len = spctab[i].spc_siz;

  09a0d	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  09a16	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09a1e	48 8b 44 01 20	 mov	 rax, QWORD PTR [rcx+rax+32]
  09a23	48 89 84 24 78
	0b 00 00	 mov	 QWORD PTR freeblk$[rsp+8], rax

; 2655 :                 for (i = i + 1; spctab[i].spc_typ != SPCTAB_EOF; i++)

  09a2b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  09a33	48 ff c0	 inc	 rax
  09a36	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
  09a3e	eb 13		 jmp	 SHORT $LN134@cckd64_chk
$LN132@cckd64_chk:
  09a40	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  09a48	48 ff c0	 inc	 rax
  09a4b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN134@cckd64_chk:
  09a53	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  09a5c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09a64	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  09a68	83 f8 08	 cmp	 eax, 8
  09a6b	0f 84 28 01 00
	00		 je	 $LN133@cckd64_chk

; 2656 :                     if (spctab[i].spc_typ == SPCTAB_FREE)

  09a71	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  09a7a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09a82	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  09a86	83 f8 07	 cmp	 eax, 7
  09a89	0f 85 05 01 00
	00		 jne	 $LN465@cckd64_chk

; 2657 :                     {
; 2658 :                         freeblk.fb_offnxt = spctab[i].spc_off;

  09a8f	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  09a98	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09aa0	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  09aa5	48 89 84 24 70
	0b 00 00	 mov	 QWORD PTR freeblk$[rsp], rax

; 2659 :                         if (lseek (fd, off, SEEK_SET) < 0)

  09aad	45 33 c0	 xor	 r8d, r8d
  09ab0	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  09ab8	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09abf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  09ac5	48 85 c0	 test	 rax, rax
  09ac8	7d 05		 jge	 SHORT $LN466@cckd64_chk

; 2660 :                             goto cdsk_lseek_error;

  09aca	e9 63 0a 00 00	 jmp	 $cdsk_lseek_error$830
$LN466@cckd64_chk:

; 2661 :                         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  09acf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  09ad6	83 38 00	 cmp	 DWORD PTR [rax], 0
  09ad9	74 43		 je	 SHORT $LN467@cckd64_chk
  09adb	41 b8 01 00 00
	00		 mov	 r8d, 1
  09ae1	33 d2		 xor	 edx, edx
  09ae3	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09aea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  09af0	48 89 84 24 90
	08 00 00	 mov	 QWORD PTR tv4785[rsp], rax
  09af8	b9 02 00 00 00	 mov	 ecx, 2
  09afd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  09b03	48 8b 8c 24 90
	08 00 00	 mov	 rcx, QWORD PTR tv4785[rsp]
  09b0b	4c 8b c1	 mov	 r8, rcx
  09b0e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170578
  09b15	48 8b c8	 mov	 rcx, rax
  09b18	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN467@cckd64_chk:

; 2662 :                         if ((U64)write (fd, &freeblk, (unsigned int) len) != len)

  09b1e	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  09b26	48 8d 94 24 70
	0b 00 00	 lea	 rdx, QWORD PTR freeblk$[rsp]
  09b2e	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09b35	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  09b3b	48 98		 cdqe
  09b3d	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  09b45	74 05		 je	 SHORT $LN468@cckd64_chk

; 2663 :                             goto cdsk_write_error;

  09b47	e9 ba 0e 00 00	 jmp	 $cdsk_write_error$840
$LN468@cckd64_chk:

; 2664 :                         off = spctab[i].spc_off;

  09b4c	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  09b55	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09b5d	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  09b62	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 2665 :                         freeblk.fb_offnxt = 0;

  09b6a	48 c7 84 24 70
	0b 00 00 00 00
	00 00		 mov	 QWORD PTR freeblk$[rsp], 0

; 2666 :                         freeblk.fb_len = spctab[i].spc_len;

  09b76	48 6b 84 24 90
	00 00 00 28	 imul	 rax, QWORD PTR i$[rsp], 40 ; 00000028H
  09b7f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09b87	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  09b8c	48 89 84 24 78
	0b 00 00	 mov	 QWORD PTR freeblk$[rsp+8], rax
$LN465@cckd64_chk:

; 2667 :                     }

  09b94	e9 a7 fe ff ff	 jmp	 $LN132@cckd64_chk
$LN133@cckd64_chk:

; 2668 :                 if (lseek (fd, off, SEEK_SET) < 0)

  09b99	45 33 c0	 xor	 r8d, r8d
  09b9c	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  09ba4	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09bab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  09bb1	48 85 c0	 test	 rax, rax
  09bb4	7d 05		 jge	 SHORT $LN469@cckd64_chk

; 2669 :                     goto cdsk_lseek_error;

  09bb6	e9 77 09 00 00	 jmp	 $cdsk_lseek_error$830
$LN469@cckd64_chk:

; 2670 :                 gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  09bbb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  09bc2	83 38 00	 cmp	 DWORD PTR [rax], 0
  09bc5	74 43		 je	 SHORT $LN470@cckd64_chk
  09bc7	41 b8 01 00 00
	00		 mov	 r8d, 1
  09bcd	33 d2		 xor	 edx, edx
  09bcf	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09bd6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  09bdc	48 89 84 24 98
	08 00 00	 mov	 QWORD PTR tv4812[rsp], rax
  09be4	b9 02 00 00 00	 mov	 ecx, 2
  09be9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  09bef	48 8b 8c 24 98
	08 00 00	 mov	 rcx, QWORD PTR tv4812[rsp]
  09bf7	4c 8b c1	 mov	 r8, rcx
  09bfa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170582
  09c01	48 8b c8	 mov	 rcx, rax
  09c04	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN470@cckd64_chk:

; 2671 :                 if ((U64)write (fd, &freeblk, (unsigned int) len) != len)

  09c0a	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  09c12	48 8d 94 24 70
	0b 00 00	 lea	 rdx, QWORD PTR freeblk$[rsp]
  09c1a	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09c21	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  09c27	48 98		 cdqe
  09c29	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  09c31	74 05		 je	 SHORT $LN471@cckd64_chk

; 2672 :                     goto cdsk_write_error;

  09c33	e9 ce 0d 00 00	 jmp	 $cdsk_write_error$840
$LN471@cckd64_chk:
$LN460@cckd64_chk:
$LN455@cckd64_chk:

; 2673 :             } /* old format free space */
; 2674 :         } /* if (cdevhdr.free_num) */
; 2675 : 
; 2676 :         /* Write cdevhdr and l1 table */
; 2677 :         off = CCKD64_DEVHDR_POS;

  09c38	48 c7 84 24 c0
	00 00 00 00 02
	00 00		 mov	 QWORD PTR off$[rsp], 512 ; 00000200H

; 2678 :         if (lseek (fd, off, SEEK_SET) < 0)

  09c44	45 33 c0	 xor	 r8d, r8d
  09c47	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  09c4f	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09c56	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  09c5c	48 85 c0	 test	 rax, rax
  09c5f	7d 05		 jge	 SHORT $LN472@cckd64_chk

; 2679 :             goto cdsk_lseek_error;

  09c61	e9 cc 08 00 00	 jmp	 $cdsk_lseek_error$830
$LN472@cckd64_chk:

; 2680 :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  09c66	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  09c6d	83 38 00	 cmp	 DWORD PTR [rax], 0
  09c70	74 43		 je	 SHORT $LN473@cckd64_chk
  09c72	41 b8 01 00 00
	00		 mov	 r8d, 1
  09c78	33 d2		 xor	 edx, edx
  09c7a	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09c81	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  09c87	48 89 84 24 a0
	08 00 00	 mov	 QWORD PTR tv4833[rsp], rax
  09c8f	b9 02 00 00 00	 mov	 ecx, 2
  09c94	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  09c9a	48 8b 8c 24 a0
	08 00 00	 mov	 rcx, QWORD PTR tv4833[rsp]
  09ca2	4c 8b c1	 mov	 r8, rcx
  09ca5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170586
  09cac	48 8b c8	 mov	 rcx, rax
  09caf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN473@cckd64_chk:

; 2681 :         len = CCKD64_DEVHDR_SIZE;

  09cb5	48 c7 84 24 b0
	00 00 00 00 02
	00 00		 mov	 QWORD PTR len$[rsp], 512 ; 00000200H

; 2682 :         if ((U64)write (fd, &cdevhdr, (unsigned int) len) != len)

  09cc1	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  09cc9	48 8d 94 24 90
	0b 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  09cd1	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09cd8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  09cde	48 98		 cdqe
  09ce0	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  09ce8	74 05		 je	 SHORT $LN474@cckd64_chk

; 2683 :             goto cdsk_write_error;

  09cea	e9 17 0d 00 00	 jmp	 $cdsk_write_error$840
$LN474@cckd64_chk:

; 2684 : 
; 2685 :         off = CCKD64_L1TAB_POS;

  09cef	48 c7 84 24 c0
	00 00 00 00 04
	00 00		 mov	 QWORD PTR off$[rsp], 1024 ; 00000400H

; 2686 :         if (lseek (fd, off, SEEK_SET) < 0)

  09cfb	45 33 c0	 xor	 r8d, r8d
  09cfe	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  09d06	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09d0d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  09d13	48 85 c0	 test	 rax, rax
  09d16	7d 05		 jge	 SHORT $LN475@cckd64_chk

; 2687 :             goto cdsk_lseek_error;

  09d18	e9 15 08 00 00	 jmp	 $cdsk_lseek_error$830
$LN475@cckd64_chk:

; 2688 :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  09d1d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  09d24	83 38 00	 cmp	 DWORD PTR [rax], 0
  09d27	74 43		 je	 SHORT $LN476@cckd64_chk
  09d29	41 b8 01 00 00
	00		 mov	 r8d, 1
  09d2f	33 d2		 xor	 edx, edx
  09d31	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09d38	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  09d3e	48 89 84 24 a8
	08 00 00	 mov	 QWORD PTR tv4854[rsp], rax
  09d46	b9 02 00 00 00	 mov	 ecx, 2
  09d4b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  09d51	48 8b 8c 24 a8
	08 00 00	 mov	 rcx, QWORD PTR tv4854[rsp]
  09d59	4c 8b c1	 mov	 r8, rcx
  09d5c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170590
  09d63	48 8b c8	 mov	 rcx, rax
  09d66	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN476@cckd64_chk:

; 2689 :         len = l1size;

  09d6c	48 63 84 24 24
	01 00 00	 movsxd	 rax, DWORD PTR l1size$[rsp]
  09d74	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR len$[rsp], rax

; 2690 :         if ((U64)write (fd, l1, (unsigned int) len) != len)

  09d7c	44 8b 84 24 b0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  09d84	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  09d8c	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09d93	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  09d99	48 98		 cdqe
  09d9b	48 3b 84 24 b0
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  09da3	74 05		 je	 SHORT $LN477@cckd64_chk

; 2691 :             goto cdsk_write_error;

  09da5	e9 5c 0c 00 00	 jmp	 $cdsk_write_error$840
$LN477@cckd64_chk:

; 2692 : 
; 2693 :         /* Truncate the file */
; 2694 :         off = cdevhdr.cdh_size;

  09daa	48 8b 84 24 a0
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+16]
  09db2	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 2695 :         if (cdevhdr.free_off == cdevhdr.cdh_size)

  09dba	48 8b 84 24 a0
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+16]
  09dc2	48 39 84 24 b0
	0b 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+32], rax
  09dca	75 25		 jne	 SHORT $LN478@cckd64_chk

; 2696 :             off += (cdevhdr.free_num+1) * CCKD64_FREEBLK_SIZE;

  09dcc	48 8b 84 24 c8
	0b 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+56]
  09dd4	48 ff c0	 inc	 rax
  09dd7	48 6b c0 10	 imul	 rax, rax, 16
  09ddb	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  09de3	48 03 c8	 add	 rcx, rax
  09de6	48 8b c1	 mov	 rax, rcx
  09de9	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax
$LN478@cckd64_chk:

; 2697 :         rc = ftruncate (fd, off);

  09df1	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  09df9	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09e00	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__chsize_s
  09e06	89 84 24 bc 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax

; 2698 : 
; 2699 :         if(dev->batch)

  09e0d	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  09e15	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  09e1b	c1 e8 0a	 shr	 eax, 10
  09e1e	83 e0 01	 and	 eax, 1
  09e21	85 c0		 test	 eax, eax
  09e23	0f 84 dd 00 00
	00		 je	 $LN479@cckd64_chk

; 2700 :             FWRMSG( stdout, HHC00377, "I", LCSS_DEVNUM, dev->filename );

  09e29	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  09e32	74 15		 je	 SHORT $LN760@cckd64_chk
  09e34	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  09e3c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  09e40	89 84 24 34 03
	00 00		 mov	 DWORD PTR tv4885[rsp], eax
  09e47	eb 0b		 jmp	 SHORT $LN761@cckd64_chk
$LN760@cckd64_chk:
  09e49	c7 84 24 34 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4885[rsp], 0
$LN761@cckd64_chk:
  09e54	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  09e5d	74 17		 je	 SHORT $LN762@cckd64_chk
  09e5f	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  09e67	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  09e6b	d1 f8		 sar	 eax, 1
  09e6d	89 84 24 38 03
	00 00		 mov	 DWORD PTR tv4891[rsp], eax
  09e74	eb 0b		 jmp	 SHORT $LN763@cckd64_chk
$LN762@cckd64_chk:
  09e76	c7 84 24 38 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4891[rsp], 0
$LN763@cckd64_chk:
  09e81	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  09e89	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  09e8f	48 89 84 24 b0
	08 00 00	 mov	 QWORD PTR tv4880[rsp], rax
  09e97	b9 01 00 00 00	 mov	 ecx, 1
  09e9c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  09ea2	48 8b 8c 24 b0
	08 00 00	 mov	 rcx, QWORD PTR tv4880[rsp]
  09eaa	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  09eaf	8b 8c 24 34 03
	00 00		 mov	 ecx, DWORD PTR tv4885[rsp]
  09eb6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  09eba	8b 8c 24 38 03
	00 00		 mov	 ecx, DWORD PTR tv4891[rsp]
  09ec1	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  09ec5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170595
  09ecc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  09ed1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170596
  09ed8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  09edd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  09ee2	41 b9 03 00 00
	00		 mov	 r9d, 3
  09ee8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170597
  09eef	ba 8c 0a 00 00	 mov	 edx, 2700		; 00000a8cH
  09ef4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170598
  09efb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  09f01	e9 d8 00 00 00	 jmp	 $LN480@cckd64_chk
$LN479@cckd64_chk:

; 2701 :         else
; 2702 :             WRMSG( HHC00377, "I", LCSS_DEVNUM, dev->filename );

  09f06	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  09f0f	74 15		 je	 SHORT $LN764@cckd64_chk
  09f11	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  09f19	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  09f1d	89 84 24 3c 03
	00 00		 mov	 DWORD PTR tv4907[rsp], eax
  09f24	eb 0b		 jmp	 SHORT $LN765@cckd64_chk
$LN764@cckd64_chk:
  09f26	c7 84 24 3c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4907[rsp], 0
$LN765@cckd64_chk:
  09f31	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  09f3a	74 17		 je	 SHORT $LN766@cckd64_chk
  09f3c	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  09f44	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  09f48	d1 f8		 sar	 eax, 1
  09f4a	89 84 24 40 03
	00 00		 mov	 DWORD PTR tv4913[rsp], eax
  09f51	eb 0b		 jmp	 SHORT $LN767@cckd64_chk
$LN766@cckd64_chk:
  09f53	c7 84 24 40 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4913[rsp], 0
$LN767@cckd64_chk:
  09f5e	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  09f66	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  09f6c	48 89 84 24 b8
	08 00 00	 mov	 QWORD PTR tv4902[rsp], rax
  09f74	b9 01 00 00 00	 mov	 ecx, 1
  09f79	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  09f7f	48 8b 8c 24 b8
	08 00 00	 mov	 rcx, QWORD PTR tv4902[rsp]
  09f87	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  09f8c	8b 8c 24 3c 03
	00 00		 mov	 ecx, DWORD PTR tv4907[rsp]
  09f93	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  09f97	8b 8c 24 40 03
	00 00		 mov	 ecx, DWORD PTR tv4913[rsp]
  09f9e	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  09fa2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170599
  09fa9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  09fae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170600
  09fb5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  09fba	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  09fbf	41 b9 03 00 00
	00		 mov	 r9d, 3
  09fc5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170601
  09fcc	ba 8e 0a 00 00	 mov	 edx, 2702		; 00000a8eH
  09fd1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170602
  09fd8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN480@cckd64_chk:
$LN433@cckd64_chk:
$LN430@cckd64_chk:
$cdsk_return_ok$834:

; 2703 : 
; 2704 :     } /* if (fsperr) */
; 2705 : 
; 2706 :     /*---------------------------------------------------------------
; 2707 :      * Return
; 2708 :      *---------------------------------------------------------------*/
; 2709 : 
; 2710 : cdsk_return_ok:
; 2711 : 
; 2712 :     rc = recovery ? 2 : fsperr ? 1 : 0;

  09fde	0f b6 84 24 b9
	00 00 00	 movzx	 eax, BYTE PTR recovery$[rsp]
  09fe6	85 c0		 test	 eax, eax
  09fe8	74 0d		 je	 SHORT $LN770@cckd64_chk
  09fea	c7 84 24 48 03
	00 00 02 00 00
	00		 mov	 DWORD PTR tv4929[rsp], 2
  09ff5	eb 32		 jmp	 SHORT $LN771@cckd64_chk
$LN770@cckd64_chk:
  09ff7	0f b6 84 24 b8
	00 00 00	 movzx	 eax, BYTE PTR fsperr$[rsp]
  09fff	85 c0		 test	 eax, eax
  0a001	74 0d		 je	 SHORT $LN768@cckd64_chk
  0a003	c7 84 24 44 03
	00 00 01 00 00
	00		 mov	 DWORD PTR tv4927[rsp], 1
  0a00e	eb 0b		 jmp	 SHORT $LN769@cckd64_chk
$LN768@cckd64_chk:
  0a010	c7 84 24 44 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4927[rsp], 0
$LN769@cckd64_chk:
  0a01b	8b 84 24 44 03
	00 00		 mov	 eax, DWORD PTR tv4927[rsp]
  0a022	89 84 24 48 03
	00 00		 mov	 DWORD PTR tv4929[rsp], eax
$LN771@cckd64_chk:
  0a029	8b 84 24 48 03
	00 00		 mov	 eax, DWORD PTR tv4929[rsp]
  0a030	89 84 24 bc 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax

; 2713 : 
; 2714 :     if (!ro && (cdevhdr.cdh_opts & (CCKD_OPT_OPENRW | CCKD_OPT_OPENED | CCKD_OPT_SPERRS)))

  0a037	83 bc 24 58 01
	00 00 00	 cmp	 DWORD PTR ro$[rsp], 0
  0a03f	0f 85 60 01 00
	00		 jne	 $LN481@cckd64_chk
  0a045	0f b6 84 24 93
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  0a04d	25 e0 00 00 00	 and	 eax, 224		; 000000e0H
  0a052	85 c0		 test	 eax, eax
  0a054	0f 84 4b 01 00
	00		 je	 $LN481@cckd64_chk

; 2715 :     {
; 2716 :         cdevhdr.cdh_opts &= ~(CCKD_OPT_OPENED | CCKD_OPT_SPERRS);

  0a05a	0f b6 84 24 93
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  0a062	25 5f ff ff ff	 and	 eax, -161		; ffffffffffffff5fH
  0a067	88 84 24 93 0b
	00 00		 mov	 BYTE PTR cdevhdr$[rsp+3], al

; 2717 : 
; 2718 :         /* Set version.release.modlvl */
; 2719 :         cdevhdr.cdh_vrm[0] = CCKD_VERSION;

  0a06e	b8 01 00 00 00	 mov	 eax, 1
  0a073	48 6b c0 00	 imul	 rax, rax, 0
  0a077	c6 84 04 90 0b
	00 00 00	 mov	 BYTE PTR cdevhdr$[rsp+rax], 0

; 2720 :         cdevhdr.cdh_vrm[1] = CCKD_RELEASE;

  0a07f	b8 01 00 00 00	 mov	 eax, 1
  0a084	48 6b c0 01	 imul	 rax, rax, 1
  0a088	c6 84 04 90 0b
	00 00 03	 mov	 BYTE PTR cdevhdr$[rsp+rax], 3

; 2721 :         cdevhdr.cdh_vrm[2] = CCKD_MODLVL;

  0a090	b8 01 00 00 00	 mov	 eax, 1
  0a095	48 6b c0 02	 imul	 rax, rax, 2
  0a099	c6 84 04 90 0b
	00 00 01	 mov	 BYTE PTR cdevhdr$[rsp+rax], 1

; 2722 : 
; 2723 :         off = CCKD64_DEVHDR_POS;

  0a0a1	48 c7 84 24 c0
	00 00 00 00 02
	00 00		 mov	 QWORD PTR off$[rsp], 512 ; 00000200H

; 2724 :         if (lseek (fd, CCKD64_DEVHDR_POS, SEEK_SET) >= 0)

  0a0ad	45 33 c0	 xor	 r8d, r8d
  0a0b0	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  0a0b5	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0a0bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0a0c2	48 85 c0	 test	 rax, rax
  0a0c5	0f 8c 8b 00 00
	00		 jl	 $LN482@cckd64_chk
$LN137@cckd64_chk:

; 2725 :             VERIFY(CCKD64_DEVHDR_SIZE == write (fd, &cdevhdr, CCKD64_DEVHDR_SIZE));

  0a0cb	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  0a0d1	48 8d 94 24 90
	0b 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  0a0d9	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0a0e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  0a0e6	48 98		 cdqe
  0a0e8	48 3d 00 02 00
	00		 cmp	 rax, 512		; 00000200H
  0a0ee	74 5c		 je	 SHORT $LN483@cckd64_chk
$LN140@cckd64_chk:
  0a0f0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG170606
  0a0f7	41 b8 a5 0a 00
	00		 mov	 r8d, 2725		; 00000aa5H
  0a0fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170607
  0a104	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170608
  0a10b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0a111	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0a117	85 c0		 test	 eax, eax
  0a119	74 20		 je	 SHORT $LN484@cckd64_chk
  0a11b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG170610
  0a122	41 b8 a5 0a 00
	00		 mov	 r8d, 2725		; 00000aa5H
  0a128	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170611
  0a12f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170612
  0a136	e8 00 00 00 00	 call	 DebuggerTrace
$LN484@cckd64_chk:
  0a13b	33 c0		 xor	 eax, eax
  0a13d	85 c0		 test	 eax, eax
  0a13f	75 af		 jne	 SHORT $LN140@cckd64_chk
  0a141	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0a147	85 c0		 test	 eax, eax
  0a149	74 01		 je	 SHORT $LN485@cckd64_chk
  0a14b	cc		 int	 3
$LN485@cckd64_chk:
$LN483@cckd64_chk:
  0a14c	33 c0		 xor	 eax, eax
  0a14e	85 c0		 test	 eax, eax
  0a150	0f 85 75 ff ff
	ff		 jne	 $LN137@cckd64_chk
$LN482@cckd64_chk:

; 2726 :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  0a156	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  0a15d	83 38 00	 cmp	 DWORD PTR [rax], 0
  0a160	74 43		 je	 SHORT $LN486@cckd64_chk
  0a162	41 b8 01 00 00
	00		 mov	 r8d, 1
  0a168	33 d2		 xor	 edx, edx
  0a16a	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0a171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0a177	48 89 84 24 c0
	08 00 00	 mov	 QWORD PTR tv4970[rsp], rax
  0a17f	b9 02 00 00 00	 mov	 ecx, 2
  0a184	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0a18a	48 8b 8c 24 c0
	08 00 00	 mov	 rcx, QWORD PTR tv4970[rsp]
  0a192	4c 8b c1	 mov	 r8, rcx
  0a195	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170615
  0a19c	48 8b c8	 mov	 rcx, rax
  0a19f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN486@cckd64_chk:
$LN481@cckd64_chk:
$cdsk_return$842:

; 2727 :     }
; 2728 : 
; 2729 : cdsk_return:
; 2730 : 
; 2731 :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  0a1a5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  0a1ac	83 38 00	 cmp	 DWORD PTR [rax], 0
  0a1af	74 43		 je	 SHORT $LN487@cckd64_chk
  0a1b1	41 b8 01 00 00
	00		 mov	 r8d, 1
  0a1b7	33 d2		 xor	 edx, edx
  0a1b9	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0a1c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0a1c6	48 89 84 24 c8
	08 00 00	 mov	 QWORD PTR tv4980[rsp], rax
  0a1ce	b9 02 00 00 00	 mov	 ecx, 2
  0a1d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0a1d9	48 8b 8c 24 c8
	08 00 00	 mov	 rcx, QWORD PTR tv4980[rsp]
  0a1e1	4c 8b c1	 mov	 r8, rcx
  0a1e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170617
  0a1eb	48 8b c8	 mov	 rcx, rax
  0a1ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN487@cckd64_chk:

; 2732 : 
; 2733 :     /* free all space */
; 2734 :     if (l1)     free (l1);

  0a1f4	48 83 bc 24 40
	01 00 00 00	 cmp	 QWORD PTR l1$[rsp], 0
  0a1fd	74 0e		 je	 SHORT $LN488@cckd64_chk
  0a1ff	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  0a207	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN488@cckd64_chk:

; 2735 :     if (spctab) free (spctab);

  0a20d	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR spctab$[rsp], 0
  0a216	74 0e		 je	 SHORT $LN489@cckd64_chk
  0a218	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0a220	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN489@cckd64_chk:

; 2736 :     if (l2errs) free (l2errs);

  0a226	48 83 bc 24 68
	01 00 00 00	 cmp	 QWORD PTR l2errs$[rsp], 0
  0a22f	74 0e		 je	 SHORT $LN490@cckd64_chk
  0a231	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR l2errs$[rsp]
  0a239	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN490@cckd64_chk:

; 2737 :     if (rcvtab) free (rcvtab);

  0a23f	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR rcvtab$[rsp], 0
  0a248	74 0e		 je	 SHORT $LN491@cckd64_chk
  0a24a	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  0a252	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN491@cckd64_chk:

; 2738 :     if (fsp)    free (fsp);

  0a258	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR fsp$[rsp], 0
  0a261	74 0e		 je	 SHORT $LN492@cckd64_chk
  0a263	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR fsp$[rsp]
  0a26b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN492@cckd64_chk:

; 2739 :     if (l2)

  0a271	48 83 bc 24 00
	01 00 00 00	 cmp	 QWORD PTR l2$[rsp], 0
  0a27a	74 74		 je	 SHORT $LN493@cckd64_chk

; 2740 :     {
; 2741 :         for (i = 0; i < cdevhdr.num_L1tab; i++)

  0a27c	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  0a288	eb 13		 jmp	 SHORT $LN143@cckd64_chk
$LN141@cckd64_chk:
  0a28a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  0a292	48 ff c0	 inc	 rax
  0a295	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN143@cckd64_chk:
  0a29d	48 63 84 24 94
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  0a2a5	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  0a2ad	7d 33		 jge	 SHORT $LN142@cckd64_chk

; 2742 :             if (l2[i]) free (l2[i]);

  0a2af	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR l2$[rsp]
  0a2b7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  0a2bf	48 83 3c c8 00	 cmp	 QWORD PTR [rax+rcx*8], 0
  0a2c4	74 1a		 je	 SHORT $LN494@cckd64_chk
  0a2c6	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR l2$[rsp]
  0a2ce	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  0a2d6	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  0a2da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN494@cckd64_chk:
  0a2e0	eb a8		 jmp	 SHORT $LN141@cckd64_chk
$LN142@cckd64_chk:

; 2743 :         free (l2);

  0a2e2	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  0a2ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN493@cckd64_chk:

; 2744 :     }
; 2745 : 
; 2746 :     return rc;

  0a2f0	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR rc$[rsp]
  0a2f7	e9 59 0e 00 00	 jmp	 $LN1@cckd64_chk
$cdsk_fstat_error$829:

; 2747 : 
; 2748 :     /*---------------------------------------------------------------
; 2749 :      * Error exits
; 2750 :      *---------------------------------------------------------------*/
; 2751 : 
; 2752 : cdsk_fstat_error:
; 2753 :     if(dev->batch)

  0a2fc	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a304	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0a30a	c1 e8 0a	 shr	 eax, 10
  0a30d	83 e0 01	 and	 eax, 1
  0a310	85 c0		 test	 eax, eax
  0a312	0f 84 0d 01 00
	00		 je	 $LN495@cckd64_chk

; 2754 :         FWRMSG( stdout, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  0a318	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a321	74 15		 je	 SHORT $LN772@cckd64_chk
  0a323	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a32b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0a32f	89 84 24 4c 03
	00 00		 mov	 DWORD PTR tv5023[rsp], eax
  0a336	eb 0b		 jmp	 SHORT $LN773@cckd64_chk
$LN772@cckd64_chk:
  0a338	c7 84 24 4c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5023[rsp], 0
$LN773@cckd64_chk:
  0a343	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a34c	74 17		 je	 SHORT $LN774@cckd64_chk
  0a34e	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a356	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0a35a	d1 f8		 sar	 eax, 1
  0a35c	89 84 24 50 03
	00 00		 mov	 DWORD PTR tv5029[rsp], eax
  0a363	eb 0b		 jmp	 SHORT $LN775@cckd64_chk
$LN774@cckd64_chk:
  0a365	c7 84 24 50 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5029[rsp], 0
$LN775@cckd64_chk:
  0a370	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0a376	8b 08		 mov	 ecx, DWORD PTR [rax]
  0a378	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0a37e	48 89 84 24 d0
	08 00 00	 mov	 QWORD PTR tv5013[rsp], rax
  0a386	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0a38e	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0a395	48 89 8c 24 d8
	08 00 00	 mov	 QWORD PTR tv5018[rsp], rcx
  0a39d	b9 01 00 00 00	 mov	 ecx, 1
  0a3a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0a3a8	48 8b 8c 24 d0
	08 00 00	 mov	 rcx, QWORD PTR tv5013[rsp]
  0a3b0	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0a3b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170627
  0a3bc	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0a3c1	48 8b 8c 24 d8
	08 00 00	 mov	 rcx, QWORD PTR tv5018[rsp]
  0a3c9	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0a3ce	8b 8c 24 4c 03
	00 00		 mov	 ecx, DWORD PTR tv5023[rsp]
  0a3d5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0a3d9	8b 8c 24 50 03
	00 00		 mov	 ecx, DWORD PTR tv5029[rsp]
  0a3e0	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0a3e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170628
  0a3eb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0a3f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170629
  0a3f7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0a3fc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0a401	41 b9 03 00 00
	00		 mov	 r9d, 3
  0a407	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170630
  0a40e	ba c3 0a 00 00	 mov	 edx, 2755		; 00000ac3H
  0a413	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170631
  0a41a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0a420	e9 08 01 00 00	 jmp	 $LN496@cckd64_chk
$LN495@cckd64_chk:

; 2755 :                 "fstat()", strerror( errno ));
; 2756 :     else
; 2757 :         WRMSG( HHC00354, "E", LCSS_DEVNUM, dev->filename,

  0a425	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a42e	74 15		 je	 SHORT $LN776@cckd64_chk
  0a430	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a438	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0a43c	89 84 24 54 03
	00 00		 mov	 DWORD PTR tv5050[rsp], eax
  0a443	eb 0b		 jmp	 SHORT $LN777@cckd64_chk
$LN776@cckd64_chk:
  0a445	c7 84 24 54 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5050[rsp], 0
$LN777@cckd64_chk:
  0a450	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a459	74 17		 je	 SHORT $LN778@cckd64_chk
  0a45b	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a463	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0a467	d1 f8		 sar	 eax, 1
  0a469	89 84 24 58 03
	00 00		 mov	 DWORD PTR tv5056[rsp], eax
  0a470	eb 0b		 jmp	 SHORT $LN779@cckd64_chk
$LN778@cckd64_chk:
  0a472	c7 84 24 58 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5056[rsp], 0
$LN779@cckd64_chk:
  0a47d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0a483	8b 08		 mov	 ecx, DWORD PTR [rax]
  0a485	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0a48b	48 89 84 24 e0
	08 00 00	 mov	 QWORD PTR tv5040[rsp], rax
  0a493	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0a49b	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0a4a2	48 89 8c 24 e8
	08 00 00	 mov	 QWORD PTR tv5045[rsp], rcx
  0a4aa	b9 01 00 00 00	 mov	 ecx, 1
  0a4af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0a4b5	48 8b 8c 24 e0
	08 00 00	 mov	 rcx, QWORD PTR tv5040[rsp]
  0a4bd	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0a4c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170632
  0a4c9	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0a4ce	48 8b 8c 24 e8
	08 00 00	 mov	 rcx, QWORD PTR tv5045[rsp]
  0a4d6	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0a4db	8b 8c 24 54 03
	00 00		 mov	 ecx, DWORD PTR tv5050[rsp]
  0a4e2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0a4e6	8b 8c 24 58 03
	00 00		 mov	 ecx, DWORD PTR tv5056[rsp]
  0a4ed	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0a4f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170633
  0a4f8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0a4fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170634
  0a504	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0a509	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0a50e	41 b9 03 00 00
	00		 mov	 r9d, 3
  0a514	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170635
  0a51b	ba c6 0a 00 00	 mov	 edx, 2758		; 00000ac6H
  0a520	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170636
  0a527	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN496@cckd64_chk:

; 2758 :                "fstat()", strerror( errno ));
; 2759 :     goto cdsk_error;

  0a52d	e9 13 0c 00 00	 jmp	 $cdsk_error$832
$cdsk_lseek_error$830:

; 2760 : 
; 2761 : cdsk_lseek_error:
; 2762 :     if(dev->batch)

  0a532	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a53a	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0a540	c1 e8 0a	 shr	 eax, 10
  0a543	83 e0 01	 and	 eax, 1
  0a546	85 c0		 test	 eax, eax
  0a548	0f 84 1a 01 00
	00		 je	 $LN497@cckd64_chk

; 2763 :         FWRMSG( stdout, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  0a54e	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a557	74 15		 je	 SHORT $LN780@cckd64_chk
  0a559	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a561	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0a565	89 84 24 5c 03
	00 00		 mov	 DWORD PTR tv5082[rsp], eax
  0a56c	eb 0b		 jmp	 SHORT $LN781@cckd64_chk
$LN780@cckd64_chk:
  0a56e	c7 84 24 5c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5082[rsp], 0
$LN781@cckd64_chk:
  0a579	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a582	74 17		 je	 SHORT $LN782@cckd64_chk
  0a584	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a58c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0a590	d1 f8		 sar	 eax, 1
  0a592	89 84 24 60 03
	00 00		 mov	 DWORD PTR tv5120[rsp], eax
  0a599	eb 0b		 jmp	 SHORT $LN783@cckd64_chk
$LN782@cckd64_chk:
  0a59b	c7 84 24 60 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5120[rsp], 0
$LN783@cckd64_chk:
  0a5a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0a5ac	8b 08		 mov	 ecx, DWORD PTR [rax]
  0a5ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0a5b4	48 89 84 24 f0
	08 00 00	 mov	 QWORD PTR tv5071[rsp], rax
  0a5bc	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0a5c4	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0a5cb	48 89 8c 24 f8
	08 00 00	 mov	 QWORD PTR tv5077[rsp], rcx
  0a5d3	b9 01 00 00 00	 mov	 ecx, 1
  0a5d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0a5de	48 8b 8c 24 f0
	08 00 00	 mov	 rcx, QWORD PTR tv5071[rsp]
  0a5e6	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0a5eb	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  0a5f3	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0a5f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170639
  0a5ff	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0a604	48 8b 8c 24 f8
	08 00 00	 mov	 rcx, QWORD PTR tv5077[rsp]
  0a60c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0a611	8b 8c 24 5c 03
	00 00		 mov	 ecx, DWORD PTR tv5082[rsp]
  0a618	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0a61c	8b 8c 24 60 03
	00 00		 mov	 ecx, DWORD PTR tv5120[rsp]
  0a623	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0a627	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170640
  0a62e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0a633	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170641
  0a63a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0a63f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0a644	41 b9 03 00 00
	00		 mov	 r9d, 3
  0a64a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170642
  0a651	ba cc 0a 00 00	 mov	 edx, 2764		; 00000accH
  0a656	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170643
  0a65d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0a663	e9 15 01 00 00	 jmp	 $LN498@cckd64_chk
$LN497@cckd64_chk:

; 2764 :                 "lseek()", off, strerror (errno ));
; 2765 :     else
; 2766 :         WRMSG( HHC00355, "E", LCSS_DEVNUM, dev->filename,

  0a668	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a671	74 15		 je	 SHORT $LN784@cckd64_chk
  0a673	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a67b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0a67f	89 84 24 64 03
	00 00		 mov	 DWORD PTR tv5142[rsp], eax
  0a686	eb 0b		 jmp	 SHORT $LN785@cckd64_chk
$LN784@cckd64_chk:
  0a688	c7 84 24 64 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5142[rsp], 0
$LN785@cckd64_chk:
  0a693	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a69c	74 17		 je	 SHORT $LN786@cckd64_chk
  0a69e	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a6a6	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0a6aa	d1 f8		 sar	 eax, 1
  0a6ac	89 84 24 68 03
	00 00		 mov	 DWORD PTR tv5148[rsp], eax
  0a6b3	eb 0b		 jmp	 SHORT $LN787@cckd64_chk
$LN786@cckd64_chk:
  0a6b5	c7 84 24 68 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5148[rsp], 0
$LN787@cckd64_chk:
  0a6c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0a6c6	8b 08		 mov	 ecx, DWORD PTR [rax]
  0a6c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0a6ce	48 89 84 24 00
	09 00 00	 mov	 QWORD PTR tv5131[rsp], rax
  0a6d6	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0a6de	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0a6e5	48 89 8c 24 08
	09 00 00	 mov	 QWORD PTR tv5137[rsp], rcx
  0a6ed	b9 01 00 00 00	 mov	 ecx, 1
  0a6f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0a6f8	48 8b 8c 24 00
	09 00 00	 mov	 rcx, QWORD PTR tv5131[rsp]
  0a700	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0a705	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  0a70d	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0a712	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170644
  0a719	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0a71e	48 8b 8c 24 08
	09 00 00	 mov	 rcx, QWORD PTR tv5137[rsp]
  0a726	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0a72b	8b 8c 24 64 03
	00 00		 mov	 ecx, DWORD PTR tv5142[rsp]
  0a732	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0a736	8b 8c 24 68 03
	00 00		 mov	 ecx, DWORD PTR tv5148[rsp]
  0a73d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0a741	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170645
  0a748	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0a74d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170646
  0a754	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0a759	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0a75e	41 b9 03 00 00
	00		 mov	 r9d, 3
  0a764	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170647
  0a76b	ba cf 0a 00 00	 mov	 edx, 2767		; 00000acfH
  0a770	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170648
  0a777	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN498@cckd64_chk:

; 2767 :                "lseek()", off, strerror( errno ));
; 2768 :     goto cdsk_error;

  0a77d	e9 c3 09 00 00	 jmp	 $cdsk_error$832
$cdsk_read_error$831:

; 2769 : 
; 2770 : cdsk_read_error:
; 2771 :     if(dev->batch)

  0a782	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a78a	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0a790	c1 e8 0a	 shr	 eax, 10
  0a793	83 e0 01	 and	 eax, 1
  0a796	85 c0		 test	 eax, eax
  0a798	0f 84 34 01 00
	00		 je	 $LN499@cckd64_chk

; 2772 :         FWRMSG( stdout, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  0a79e	83 bc 24 bc 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  0a7a6	7d 18		 jge	 SHORT $LN788@cckd64_chk
  0a7a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0a7ae	8b 08		 mov	 ecx, DWORD PTR [rax]
  0a7b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0a7b6	48 89 84 24 c0
	04 00 00	 mov	 QWORD PTR tv5167[rsp], rax
  0a7be	eb 0f		 jmp	 SHORT $LN789@cckd64_chk
$LN788@cckd64_chk:
  0a7c0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170651
  0a7c7	48 89 84 24 c0
	04 00 00	 mov	 QWORD PTR tv5167[rsp], rax
$LN789@cckd64_chk:
  0a7cf	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a7d8	74 15		 je	 SHORT $LN790@cckd64_chk
  0a7da	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a7e2	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0a7e6	89 84 24 6c 03
	00 00		 mov	 DWORD PTR tv5176[rsp], eax
  0a7ed	eb 0b		 jmp	 SHORT $LN791@cckd64_chk
$LN790@cckd64_chk:
  0a7ef	c7 84 24 6c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5176[rsp], 0
$LN791@cckd64_chk:
  0a7fa	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a803	74 17		 je	 SHORT $LN792@cckd64_chk
  0a805	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a80d	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0a811	d1 f8		 sar	 eax, 1
  0a813	89 84 24 70 03
	00 00		 mov	 DWORD PTR tv5182[rsp], eax
  0a81a	eb 0b		 jmp	 SHORT $LN793@cckd64_chk
$LN792@cckd64_chk:
  0a81c	c7 84 24 70 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5182[rsp], 0
$LN793@cckd64_chk:
  0a827	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a82f	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0a835	48 89 84 24 10
	09 00 00	 mov	 QWORD PTR tv5171[rsp], rax
  0a83d	b9 01 00 00 00	 mov	 ecx, 1
  0a842	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0a848	48 8b 8c 24 c0
	04 00 00	 mov	 rcx, QWORD PTR tv5167[rsp]
  0a850	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0a855	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  0a85d	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0a862	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170652
  0a869	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0a86e	48 8b 8c 24 10
	09 00 00	 mov	 rcx, QWORD PTR tv5171[rsp]
  0a876	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0a87b	8b 8c 24 6c 03
	00 00		 mov	 ecx, DWORD PTR tv5176[rsp]
  0a882	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0a886	8b 8c 24 70 03
	00 00		 mov	 ecx, DWORD PTR tv5182[rsp]
  0a88d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0a891	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170653
  0a898	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0a89d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170654
  0a8a4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0a8a9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0a8ae	41 b9 03 00 00
	00		 mov	 r9d, 3
  0a8b4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170655
  0a8bb	ba d5 0a 00 00	 mov	 edx, 2773		; 00000ad5H
  0a8c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170656
  0a8c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0a8cd	e9 2f 01 00 00	 jmp	 $LN500@cckd64_chk
$LN499@cckd64_chk:

; 2773 :                 "read()", off, rc < 0 ? strerror( errno ) : "incomplete" );
; 2774 :     else
; 2775 :         WRMSG( HHC00355, "E", LCSS_DEVNUM, dev->filename,

  0a8d2	83 bc 24 bc 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  0a8da	7d 18		 jge	 SHORT $LN794@cckd64_chk
  0a8dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0a8e2	8b 08		 mov	 ecx, DWORD PTR [rax]
  0a8e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0a8ea	48 89 84 24 c8
	04 00 00	 mov	 QWORD PTR tv5197[rsp], rax
  0a8f2	eb 0f		 jmp	 SHORT $LN795@cckd64_chk
$LN794@cckd64_chk:
  0a8f4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170657
  0a8fb	48 89 84 24 c8
	04 00 00	 mov	 QWORD PTR tv5197[rsp], rax
$LN795@cckd64_chk:
  0a903	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a90c	74 15		 je	 SHORT $LN796@cckd64_chk
  0a90e	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a916	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0a91a	89 84 24 74 03
	00 00		 mov	 DWORD PTR tv5206[rsp], eax
  0a921	eb 0b		 jmp	 SHORT $LN797@cckd64_chk
$LN796@cckd64_chk:
  0a923	c7 84 24 74 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5206[rsp], 0
$LN797@cckd64_chk:
  0a92e	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a937	74 17		 je	 SHORT $LN798@cckd64_chk
  0a939	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a941	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0a945	d1 f8		 sar	 eax, 1
  0a947	89 84 24 78 03
	00 00		 mov	 DWORD PTR tv5212[rsp], eax
  0a94e	eb 0b		 jmp	 SHORT $LN799@cckd64_chk
$LN798@cckd64_chk:
  0a950	c7 84 24 78 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5212[rsp], 0
$LN799@cckd64_chk:
  0a95b	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a963	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0a969	48 89 84 24 18
	09 00 00	 mov	 QWORD PTR tv5201[rsp], rax
  0a971	b9 01 00 00 00	 mov	 ecx, 1
  0a976	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0a97c	48 8b 8c 24 c8
	04 00 00	 mov	 rcx, QWORD PTR tv5197[rsp]
  0a984	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0a989	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  0a991	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0a996	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170658
  0a99d	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0a9a2	48 8b 8c 24 18
	09 00 00	 mov	 rcx, QWORD PTR tv5201[rsp]
  0a9aa	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0a9af	8b 8c 24 74 03
	00 00		 mov	 ecx, DWORD PTR tv5206[rsp]
  0a9b6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0a9ba	8b 8c 24 78 03
	00 00		 mov	 ecx, DWORD PTR tv5212[rsp]
  0a9c1	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0a9c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170659
  0a9cc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0a9d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170660
  0a9d8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0a9dd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0a9e2	41 b9 03 00 00
	00		 mov	 r9d, 3
  0a9e8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170661
  0a9ef	ba d8 0a 00 00	 mov	 edx, 2776		; 00000ad8H
  0a9f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170662
  0a9fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN500@cckd64_chk:

; 2776 :                "read()", off, rc < 0 ? strerror( errno ) : "incomplete" );
; 2777 :     goto cdsk_error;

  0aa01	e9 3f 07 00 00	 jmp	 $cdsk_error$832
$cdsk_write_error$840:

; 2778 : 
; 2779 : cdsk_write_error:
; 2780 :     if(dev->batch)

  0aa06	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0aa0e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0aa14	c1 e8 0a	 shr	 eax, 10
  0aa17	83 e0 01	 and	 eax, 1
  0aa1a	85 c0		 test	 eax, eax
  0aa1c	0f 84 34 01 00
	00		 je	 $LN501@cckd64_chk

; 2781 :         FWRMSG( stdout, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  0aa22	83 bc 24 bc 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  0aa2a	7d 18		 jge	 SHORT $LN800@cckd64_chk
  0aa2c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0aa32	8b 08		 mov	 ecx, DWORD PTR [rax]
  0aa34	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0aa3a	48 89 84 24 58
	04 00 00	 mov	 QWORD PTR tv5231[rsp], rax
  0aa42	eb 0f		 jmp	 SHORT $LN801@cckd64_chk
$LN800@cckd64_chk:
  0aa44	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170665
  0aa4b	48 89 84 24 58
	04 00 00	 mov	 QWORD PTR tv5231[rsp], rax
$LN801@cckd64_chk:
  0aa53	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0aa5c	74 15		 je	 SHORT $LN802@cckd64_chk
  0aa5e	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0aa66	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0aa6a	89 84 24 7c 03
	00 00		 mov	 DWORD PTR tv5240[rsp], eax
  0aa71	eb 0b		 jmp	 SHORT $LN803@cckd64_chk
$LN802@cckd64_chk:
  0aa73	c7 84 24 7c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5240[rsp], 0
$LN803@cckd64_chk:
  0aa7e	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0aa87	74 17		 je	 SHORT $LN804@cckd64_chk
  0aa89	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0aa91	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0aa95	d1 f8		 sar	 eax, 1
  0aa97	89 84 24 80 03
	00 00		 mov	 DWORD PTR tv5246[rsp], eax
  0aa9e	eb 0b		 jmp	 SHORT $LN805@cckd64_chk
$LN804@cckd64_chk:
  0aaa0	c7 84 24 80 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5246[rsp], 0
$LN805@cckd64_chk:
  0aaab	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0aab3	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0aab9	48 89 84 24 20
	09 00 00	 mov	 QWORD PTR tv5235[rsp], rax
  0aac1	b9 01 00 00 00	 mov	 ecx, 1
  0aac6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0aacc	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR tv5231[rsp]
  0aad4	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0aad9	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  0aae1	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0aae6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170666
  0aaed	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0aaf2	48 8b 8c 24 20
	09 00 00	 mov	 rcx, QWORD PTR tv5235[rsp]
  0aafa	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0aaff	8b 8c 24 7c 03
	00 00		 mov	 ecx, DWORD PTR tv5240[rsp]
  0ab06	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0ab0a	8b 8c 24 80 03
	00 00		 mov	 ecx, DWORD PTR tv5246[rsp]
  0ab11	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0ab15	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170667
  0ab1c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0ab21	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170668
  0ab28	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0ab2d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0ab32	41 b9 03 00 00
	00		 mov	 r9d, 3
  0ab38	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170669
  0ab3f	ba de 0a 00 00	 mov	 edx, 2782		; 00000adeH
  0ab44	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170670
  0ab4b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0ab51	e9 2f 01 00 00	 jmp	 $LN502@cckd64_chk
$LN501@cckd64_chk:

; 2782 :                 "write()", off, rc < 0 ? strerror( errno ) : "incomplete" );
; 2783 :     else
; 2784 :         WRMSG( HHC00355, "E", LCSS_DEVNUM, dev->filename,

  0ab56	83 bc 24 bc 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  0ab5e	7d 18		 jge	 SHORT $LN806@cckd64_chk
  0ab60	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0ab66	8b 08		 mov	 ecx, DWORD PTR [rax]
  0ab68	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0ab6e	48 89 84 24 60
	04 00 00	 mov	 QWORD PTR tv5261[rsp], rax
  0ab76	eb 0f		 jmp	 SHORT $LN807@cckd64_chk
$LN806@cckd64_chk:
  0ab78	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170671
  0ab7f	48 89 84 24 60
	04 00 00	 mov	 QWORD PTR tv5261[rsp], rax
$LN807@cckd64_chk:
  0ab87	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0ab90	74 15		 je	 SHORT $LN808@cckd64_chk
  0ab92	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0ab9a	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0ab9e	89 84 24 84 03
	00 00		 mov	 DWORD PTR tv5270[rsp], eax
  0aba5	eb 0b		 jmp	 SHORT $LN809@cckd64_chk
$LN808@cckd64_chk:
  0aba7	c7 84 24 84 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5270[rsp], 0
$LN809@cckd64_chk:
  0abb2	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0abbb	74 17		 je	 SHORT $LN810@cckd64_chk
  0abbd	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0abc5	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0abc9	d1 f8		 sar	 eax, 1
  0abcb	89 84 24 88 03
	00 00		 mov	 DWORD PTR tv5276[rsp], eax
  0abd2	eb 0b		 jmp	 SHORT $LN811@cckd64_chk
$LN810@cckd64_chk:
  0abd4	c7 84 24 88 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5276[rsp], 0
$LN811@cckd64_chk:
  0abdf	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0abe7	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0abed	48 89 84 24 28
	09 00 00	 mov	 QWORD PTR tv5265[rsp], rax
  0abf5	b9 01 00 00 00	 mov	 ecx, 1
  0abfa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0ac00	48 8b 8c 24 60
	04 00 00	 mov	 rcx, QWORD PTR tv5261[rsp]
  0ac08	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0ac0d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  0ac15	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0ac1a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170672
  0ac21	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0ac26	48 8b 8c 24 28
	09 00 00	 mov	 rcx, QWORD PTR tv5265[rsp]
  0ac2e	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0ac33	8b 8c 24 84 03
	00 00		 mov	 ecx, DWORD PTR tv5270[rsp]
  0ac3a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0ac3e	8b 8c 24 88 03
	00 00		 mov	 ecx, DWORD PTR tv5276[rsp]
  0ac45	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0ac49	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170673
  0ac50	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0ac55	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170674
  0ac5c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0ac61	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0ac66	41 b9 03 00 00
	00		 mov	 r9d, 3
  0ac6c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170675
  0ac73	ba e1 0a 00 00	 mov	 edx, 2785		; 00000ae1H
  0ac78	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170676
  0ac7f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN502@cckd64_chk:

; 2785 :                "write()", off, rc < 0 ? strerror( errno ) : "incomplete" );
; 2786 :     goto cdsk_error;

  0ac85	e9 bb 04 00 00	 jmp	 $cdsk_error$832
$cdsk_malloc_error$839:

; 2787 : 
; 2788 : cdsk_malloc_error:
; 2789 :     {
; 2790 :         char buf[64];
; 2791 :         MSGBUF( buf, "malloc(%"PRId64")", len);

  0ac8a	4c 8b 8c 24 b0
	00 00 00	 mov	 r9, QWORD PTR len$[rsp]
  0ac92	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170677
  0ac99	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0ac9e	48 8d 8c 24 10
	31 00 00	 lea	 rcx, QWORD PTR buf$12[rsp]
  0aca6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2792 :         if(dev->batch)

  0acac	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0acb4	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0acba	c1 e8 0a	 shr	 eax, 10
  0acbd	83 e0 01	 and	 eax, 1
  0acc0	85 c0		 test	 eax, eax
  0acc2	0f 84 0e 01 00
	00		 je	 $LN503@cckd64_chk

; 2793 :             FWRMSG( stdout, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  0acc8	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0acd1	74 15		 je	 SHORT $LN812@cckd64_chk
  0acd3	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0acdb	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0acdf	89 84 24 8c 03
	00 00		 mov	 DWORD PTR tv5305[rsp], eax
  0ace6	eb 0b		 jmp	 SHORT $LN813@cckd64_chk
$LN812@cckd64_chk:
  0ace8	c7 84 24 8c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5305[rsp], 0
$LN813@cckd64_chk:
  0acf3	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0acfc	74 17		 je	 SHORT $LN814@cckd64_chk
  0acfe	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0ad06	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0ad0a	d1 f8		 sar	 eax, 1
  0ad0c	89 84 24 90 03
	00 00		 mov	 DWORD PTR tv5311[rsp], eax
  0ad13	eb 0b		 jmp	 SHORT $LN815@cckd64_chk
$LN814@cckd64_chk:
  0ad15	c7 84 24 90 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5311[rsp], 0
$LN815@cckd64_chk:
  0ad20	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0ad26	8b 08		 mov	 ecx, DWORD PTR [rax]
  0ad28	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0ad2e	48 89 84 24 30
	09 00 00	 mov	 QWORD PTR tv5295[rsp], rax
  0ad36	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0ad3e	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0ad45	48 89 8c 24 38
	09 00 00	 mov	 QWORD PTR tv5300[rsp], rcx
  0ad4d	b9 01 00 00 00	 mov	 ecx, 1
  0ad52	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0ad58	48 8b 8c 24 30
	09 00 00	 mov	 rcx, QWORD PTR tv5295[rsp]
  0ad60	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0ad65	48 8d 8c 24 10
	31 00 00	 lea	 rcx, QWORD PTR buf$12[rsp]
  0ad6d	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0ad72	48 8b 8c 24 38
	09 00 00	 mov	 rcx, QWORD PTR tv5300[rsp]
  0ad7a	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0ad7f	8b 8c 24 8c 03
	00 00		 mov	 ecx, DWORD PTR tv5305[rsp]
  0ad86	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0ad8a	8b 8c 24 90 03
	00 00		 mov	 ecx, DWORD PTR tv5311[rsp]
  0ad91	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0ad95	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170680
  0ad9c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0ada1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170681
  0ada8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0adad	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0adb2	41 b9 03 00 00
	00		 mov	 r9d, 3
  0adb8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170682
  0adbf	ba ea 0a 00 00	 mov	 edx, 2794		; 00000aeaH
  0adc4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170683
  0adcb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0add1	e9 09 01 00 00	 jmp	 $LN504@cckd64_chk
$LN503@cckd64_chk:

; 2794 :                     buf, strerror( errno ));
; 2795 :         else
; 2796 :              WRMSG( HHC00354, "E", LCSS_DEVNUM, dev->filename,

  0add6	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0addf	74 15		 je	 SHORT $LN816@cckd64_chk
  0ade1	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0ade9	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0aded	89 84 24 94 03
	00 00		 mov	 DWORD PTR tv5364[rsp], eax
  0adf4	eb 0b		 jmp	 SHORT $LN817@cckd64_chk
$LN816@cckd64_chk:
  0adf6	c7 84 24 94 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5364[rsp], 0
$LN817@cckd64_chk:
  0ae01	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0ae0a	74 17		 je	 SHORT $LN818@cckd64_chk
  0ae0c	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0ae14	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0ae18	d1 f8		 sar	 eax, 1
  0ae1a	89 84 24 98 03
	00 00		 mov	 DWORD PTR tv5370[rsp], eax
  0ae21	eb 0b		 jmp	 SHORT $LN819@cckd64_chk
$LN818@cckd64_chk:
  0ae23	c7 84 24 98 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5370[rsp], 0
$LN819@cckd64_chk:
  0ae2e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0ae34	8b 08		 mov	 ecx, DWORD PTR [rax]
  0ae36	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0ae3c	48 89 84 24 40
	09 00 00	 mov	 QWORD PTR tv5354[rsp], rax
  0ae44	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0ae4c	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0ae53	48 89 8c 24 48
	09 00 00	 mov	 QWORD PTR tv5359[rsp], rcx
  0ae5b	b9 01 00 00 00	 mov	 ecx, 1
  0ae60	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0ae66	48 8b 8c 24 40
	09 00 00	 mov	 rcx, QWORD PTR tv5354[rsp]
  0ae6e	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0ae73	48 8d 8c 24 10
	31 00 00	 lea	 rcx, QWORD PTR buf$12[rsp]
  0ae7b	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0ae80	48 8b 8c 24 48
	09 00 00	 mov	 rcx, QWORD PTR tv5359[rsp]
  0ae88	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0ae8d	8b 8c 24 94 03
	00 00		 mov	 ecx, DWORD PTR tv5364[rsp]
  0ae94	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0ae98	8b 8c 24 98 03
	00 00		 mov	 ecx, DWORD PTR tv5370[rsp]
  0ae9f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0aea3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170684
  0aeaa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0aeaf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170685
  0aeb6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0aebb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0aec0	41 b9 03 00 00
	00		 mov	 r9d, 3
  0aec6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170686
  0aecd	ba ed 0a 00 00	 mov	 edx, 2797		; 00000aedH
  0aed2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170687
  0aed9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN504@cckd64_chk:

; 2797 :                     buf, strerror( errno ));
; 2798 :     }
; 2799 :     goto cdsk_error;

  0aedf	e9 61 02 00 00	 jmp	 $cdsk_error$832
$cdsk_calloc_error$833:

; 2800 : 
; 2801 : cdsk_calloc_error:
; 2802 :     {
; 2803 :         char buf[64];
; 2804 :         MSGBUF( buf, "calloc(%"PRId64")", n * len);

  0aee4	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR n$[rsp]
  0aeec	48 0f af 84 24
	b0 00 00 00	 imul	 rax, QWORD PTR len$[rsp]
  0aef5	4c 8b c8	 mov	 r9, rax
  0aef8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170688
  0aeff	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0af04	48 8d 8c 24 50
	31 00 00	 lea	 rcx, QWORD PTR buf$13[rsp]
  0af0c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2805 :         if(dev->batch)

  0af12	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0af1a	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0af20	c1 e8 0a	 shr	 eax, 10
  0af23	83 e0 01	 and	 eax, 1
  0af26	85 c0		 test	 eax, eax
  0af28	0f 84 0e 01 00
	00		 je	 $LN505@cckd64_chk

; 2806 :             FWRMSG( stdout, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  0af2e	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0af37	74 15		 je	 SHORT $LN820@cckd64_chk
  0af39	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0af41	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0af45	89 84 24 9c 03
	00 00		 mov	 DWORD PTR tv5400[rsp], eax
  0af4c	eb 0b		 jmp	 SHORT $LN821@cckd64_chk
$LN820@cckd64_chk:
  0af4e	c7 84 24 9c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5400[rsp], 0
$LN821@cckd64_chk:
  0af59	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0af62	74 17		 je	 SHORT $LN822@cckd64_chk
  0af64	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0af6c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0af70	d1 f8		 sar	 eax, 1
  0af72	89 84 24 a0 03
	00 00		 mov	 DWORD PTR tv5406[rsp], eax
  0af79	eb 0b		 jmp	 SHORT $LN823@cckd64_chk
$LN822@cckd64_chk:
  0af7b	c7 84 24 a0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5406[rsp], 0
$LN823@cckd64_chk:
  0af86	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0af8c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0af8e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0af94	48 89 84 24 50
	09 00 00	 mov	 QWORD PTR tv5390[rsp], rax
  0af9c	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0afa4	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0afab	48 89 8c 24 58
	09 00 00	 mov	 QWORD PTR tv5395[rsp], rcx
  0afb3	b9 01 00 00 00	 mov	 ecx, 1
  0afb8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0afbe	48 8b 8c 24 50
	09 00 00	 mov	 rcx, QWORD PTR tv5390[rsp]
  0afc6	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0afcb	48 8d 8c 24 50
	31 00 00	 lea	 rcx, QWORD PTR buf$13[rsp]
  0afd3	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0afd8	48 8b 8c 24 58
	09 00 00	 mov	 rcx, QWORD PTR tv5395[rsp]
  0afe0	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0afe5	8b 8c 24 9c 03
	00 00		 mov	 ecx, DWORD PTR tv5400[rsp]
  0afec	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0aff0	8b 8c 24 a0 03
	00 00		 mov	 ecx, DWORD PTR tv5406[rsp]
  0aff7	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0affb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170691
  0b002	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0b007	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170692
  0b00e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0b013	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0b018	41 b9 03 00 00
	00		 mov	 r9d, 3
  0b01e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170693
  0b025	ba f7 0a 00 00	 mov	 edx, 2807		; 00000af7H
  0b02a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170694
  0b031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0b037	e9 09 01 00 00	 jmp	 $LN506@cckd64_chk
$LN505@cckd64_chk:

; 2807 :                     buf, strerror( errno ));
; 2808 :         else
; 2809 :              WRMSG( HHC00354, "E", LCSS_DEVNUM, dev->filename,

  0b03c	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0b045	74 15		 je	 SHORT $LN824@cckd64_chk
  0b047	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0b04f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0b053	89 84 24 a4 03
	00 00		 mov	 DWORD PTR tv5427[rsp], eax
  0b05a	eb 0b		 jmp	 SHORT $LN825@cckd64_chk
$LN824@cckd64_chk:
  0b05c	c7 84 24 a4 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5427[rsp], 0
$LN825@cckd64_chk:
  0b067	48 83 bc 24 c0
	31 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0b070	74 17		 je	 SHORT $LN826@cckd64_chk
  0b072	48 8b 84 24 c0
	31 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0b07a	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0b07e	d1 f8		 sar	 eax, 1
  0b080	89 84 24 a8 03
	00 00		 mov	 DWORD PTR tv5433[rsp], eax
  0b087	eb 0b		 jmp	 SHORT $LN827@cckd64_chk
$LN826@cckd64_chk:
  0b089	c7 84 24 a8 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5433[rsp], 0
$LN827@cckd64_chk:
  0b094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0b09a	8b 08		 mov	 ecx, DWORD PTR [rax]
  0b09c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0b0a2	48 89 84 24 d8
	04 00 00	 mov	 QWORD PTR tv5417[rsp], rax
  0b0aa	48 8b 8c 24 c0
	31 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0b0b2	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0b0b9	48 89 8c 24 b8
	05 00 00	 mov	 QWORD PTR tv5422[rsp], rcx
  0b0c1	b9 01 00 00 00	 mov	 ecx, 1
  0b0c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0b0cc	48 8b 8c 24 d8
	04 00 00	 mov	 rcx, QWORD PTR tv5417[rsp]
  0b0d4	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0b0d9	48 8d 8c 24 50
	31 00 00	 lea	 rcx, QWORD PTR buf$13[rsp]
  0b0e1	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0b0e6	48 8b 8c 24 b8
	05 00 00	 mov	 rcx, QWORD PTR tv5422[rsp]
  0b0ee	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0b0f3	8b 8c 24 a4 03
	00 00		 mov	 ecx, DWORD PTR tv5427[rsp]
  0b0fa	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0b0fe	8b 8c 24 a8 03
	00 00		 mov	 ecx, DWORD PTR tv5433[rsp]
  0b105	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0b109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170695
  0b110	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0b115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170696
  0b11c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0b121	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0b126	41 b9 03 00 00
	00		 mov	 r9d, 3
  0b12c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170697
  0b133	ba fa 0a 00 00	 mov	 edx, 2810		; 00000afaH
  0b138	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170698
  0b13f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN506@cckd64_chk:
$cdsk_error$832:

; 2810 :                     buf, strerror( errno ));
; 2811 :     }
; 2812 :     goto cdsk_error;
; 2813 : 
; 2814 : cdsk_error:
; 2815 :     rc = -1;

  0b145	c7 84 24 bc 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR rc$[rsp], -1

; 2816 :     goto cdsk_return;

  0b150	e9 50 f0 ff ff	 jmp	 $cdsk_return$842
$LN1@cckd64_chk:
$LN507@cckd64_chk:

; 2817 : 
; 2818 : } /* end function cckd64_chkdsk */

  0b155	48 8b 8c 24 90
	31 04 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0b15d	48 33 cc	 xor	 rcx, rsp
  0b160	e8 00 00 00 00	 call	 __security_check_cookie
  0b165	48 81 c4 a8 31
	04 00		 add	 rsp, 274856		; 000431a8H
  0b16c	5f		 pop	 rdi
  0b16d	5e		 pop	 rsi
  0b16e	c3		 ret	 0
cckd64_chkdsk ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil64.c
_TEXT	SEGMENT
i$ = 112
s$ = 116
spctab$ = 120
fd$ = 128
rc$ = 132
j$ = 136
len$ = 144
relocate$ = 152
off$ = 160
l$ = 168
l2$ = 176
l1$ = 184
p$ = 192
n$ = 200
tv310 = 204
rbuf$ = 208
rlen$ = 216
tv184 = 224
tv190 = 228
tv240 = 232
tv246 = 236
tv267 = 240
tv273 = 244
tv776 = 248
tv782 = 252
tv798 = 256
tv804 = 260
tv1494 = 264
tv1500 = 268
tv1518 = 272
tv1524 = 276
tv1544 = 280
tv1550 = 284
tv1566 = 288
tv1572 = 292
tv1657 = 296
tv1663 = 300
tv1684 = 304
tv1690 = 308
tv1716 = 312
tv1722 = 316
tv1744 = 320
tv1750 = 324
tv1778 = 328
tv1784 = 332
tv1808 = 336
tv1814 = 340
tv1874 = 344
tv1880 = 348
tv1904 = 352
tv1910 = 356
tv1939 = 360
tv1945 = 364
tv1966 = 368
tv1972 = 372
tv2003 = 376
tv2009 = 380
tv2030 = 384
tv2036 = 388
l1size$ = 392
l2area$ = 400
tv164 = 408
tv168 = 412
tv223 = 416
cckd$ = 424
tv233 = 432
tv260 = 440
tv548 = 448
tv1769 = 456
tv1799 = 464
tv1865 = 472
tv1895 = 480
tv95 = 488
tv161 = 496
tv179 = 504
tv208 = 512
tv235 = 520
tv262 = 528
tv362 = 536
tv565 = 544
tv771 = 552
tv793 = 560
tv922 = 568
next$ = 576
tv1133 = 584
tv1163 = 592
tv1246 = 600
tv1387 = 608
tv1408 = 616
tv1442 = 624
tv1487 = 632
tv1489 = 640
tv1511 = 648
tv1513 = 656
tv1539 = 664
tv1561 = 672
tv1585 = 680
tv1647 = 688
tv1652 = 696
tv1674 = 704
tv1679 = 712
tv1705 = 720
tv1711 = 728
tv1733 = 736
tv1739 = 744
tv1773 = 752
tv1803 = 760
tv1869 = 768
tv1899 = 776
tv1929 = 784
tv1934 = 792
tv1956 = 800
tv1961 = 808
tv1993 = 816
tv1998 = 824
tv2020 = 832
tv2025 = 840
fst$ = 848
cdevhdr$ = 912
devhdr$ = 1424
zero_l2$ = 1936
ff_l2$ = 6032
buf$1 = 10128
buf$2 = 10192
buf$ = 10256
__$ArrayPad$ = 272400
dev$ = 272432
cckd64_comp PROC

; 324  : {

$LN274:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	b8 20 28 04 00	 mov	 eax, 272416		; 00042820H
  0000b	e8 00 00 00 00	 call	 __chkstk
  00010	48 2b e0	 sub	 rsp, rax
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 84 24 10
	28 04 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 325  : CCKD64_EXT     *cckd;                   /* -> cckd extension         */
; 326  : int             fd;                     /* File descriptor           */
; 327  : struct stat     fst;                    /* File status buffer        */
; 328  : int             rc;                     /* Return code               */
; 329  : U64             off;                    /* File offset               */
; 330  : U64             l2area;                 /* Boundary for l2 tables    */
; 331  : U64             len;                    /* Length                    */
; 332  : int             i, j, l, n;             /* Work variables            */
; 333  : BYTE            relocate = 0;           /* 1=spaces will be relocated*/

  00025	c6 84 24 98 00
	00 00 00	 mov	 BYTE PTR relocate$[rsp], 0

; 334  : U64             l1size;                 /* l1 table size             */
; 335  : U64             next;                   /* offset of next space      */
; 336  : int             s;                      /* space table index         */
; 337  : CKD_DEVHDR      devhdr;                 /* CKD device header         */
; 338  : CCKD64_DEVHDR   cdevhdr;                /* CCKD device header        */
; 339  : CCKD64_L1ENT   *l1=NULL;                /* ->L1tab table             */

  0002d	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR l1$[rsp], 0

; 340  : CCKD64_L2ENT  **l2=NULL;                /* ->L2tab table array       */

  00039	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR l2$[rsp], 0

; 341  : SPCTAB64       *spctab=NULL;            /* -> space table            */

  00045	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR spctab$[rsp], 0

; 342  : BYTE           *rbuf=NULL;              /* Relocation buffer         */

  0004e	48 c7 84 24 d0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR rbuf$[rsp], 0

; 343  : BYTE           *p;                      /* -> relocation buffer      */
; 344  : U64             rlen=0;                 /* Relocation buffer length  */

  0005a	48 c7 84 24 d8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR rlen$[rsp], 0

; 345  : CCKD64_L2ENT    zero_l2[256];           /* Empty l2 table (zeros)    */
; 346  : CCKD64_L2ENT    ff_l2[256];             /* Empty l2 table (0xff's)   */
; 347  : BYTE            buf[256*1024];          /* 256K Buffer               */
; 348  : 
; 349  :     if (!dev->cckd64)

  00066	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0006e	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  00075	24 01		 and	 al, 1
  00077	0f b6 c0	 movzx	 eax, al
  0007a	85 c0		 test	 eax, eax
  0007c	75 12		 jne	 SHORT $LN64@cckd64_com

; 350  :         return cckd_comp( dev );

  0007e	48 8b 8c 24 30
	28 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00086	e8 00 00 00 00	 call	 cckd_comp
  0008b	e9 e8 38 00 00	 jmp	 $LN1@cckd64_com
$LN64@cckd64_com:

; 351  : 
; 352  :     /*---------------------------------------------------------------
; 353  :      * Get fd
; 354  :      *---------------------------------------------------------------*/
; 355  :     cckd = dev->cckd_ext;

  00090	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00098	48 8b 80 08 13
	00 00		 mov	 rax, QWORD PTR [rax+4872]
  0009f	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR cckd$[rsp], rax

; 356  :     if (cckd == NULL)

  000a7	48 83 bc 24 a8
	01 00 00 00	 cmp	 QWORD PTR cckd$[rsp], 0
  000b0	75 17		 jne	 SHORT $LN65@cckd64_com

; 357  :         fd = dev->fd;

  000b2	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  000ba	8b 80 ac 01 00
	00		 mov	 eax, DWORD PTR [rax+428]
  000c0	89 84 24 80 00
	00 00		 mov	 DWORD PTR fd$[rsp], eax
  000c7	eb 22		 jmp	 SHORT $LN66@cckd64_com
$LN65@cckd64_com:

; 358  :     else
; 359  :         fd = cckd->fd[cckd->sfn];

  000c9	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR cckd$[rsp]
  000d1	48 63 40 3c	 movsxd	 rax, DWORD PTR [rax+60]
  000d5	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR cckd$[rsp]
  000dd	8b 84 81 f0 00
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+240]
  000e4	89 84 24 80 00
	00 00		 mov	 DWORD PTR fd$[rsp], eax
$LN66@cckd64_com:

; 360  : 
; 361  :     /*---------------------------------------------------------------
; 362  :      * Get file statistics
; 363  :      *---------------------------------------------------------------*/
; 364  :     if (fstat (fd, &fst) < 0)

  000eb	48 8d 94 24 50
	03 00 00	 lea	 rdx, QWORD PTR fst$[rsp]
  000f3	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  000fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fstat64
  00100	85 c0		 test	 eax, eax
  00102	7d 05		 jge	 SHORT $LN67@cckd64_com

; 365  :         goto comp_fstat_error;

  00104	e9 16 2a 00 00	 jmp	 $comp_fstat_error$275
$LN67@cckd64_com:

; 366  :     gui_fprintf (stderr, "SIZE=%"PRIu64"\n", (U64) fst.st_size);

  00109	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00110	83 38 00	 cmp	 DWORD PTR [rax], 0
  00113	74 23		 je	 SHORT $LN68@cckd64_com
  00115	b9 02 00 00 00	 mov	 ecx, 2
  0011a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00120	4c 8b 84 24 68
	03 00 00	 mov	 r8, QWORD PTR fst$[rsp+24]
  00128	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169139
  0012f	48 8b c8	 mov	 rcx, rax
  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN68@cckd64_com:

; 367  : 
; 368  :     /*---------------------------------------------------------------
; 369  :      * Read device header
; 370  :      *---------------------------------------------------------------*/
; 371  :     off = 0;

  00138	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR off$[rsp], 0

; 372  :     if (lseek( fd, off, SEEK_SET ) < 0)

  00144	45 33 c0	 xor	 r8d, r8d
  00147	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  0014f	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00156	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0015c	48 85 c0	 test	 rax, rax
  0015f	7d 05		 jge	 SHORT $LN69@cckd64_com

; 373  :         goto comp_lseek_error;

  00161	e9 ef 2b 00 00	 jmp	 $comp_lseek_error$276
$LN69@cckd64_com:

; 374  :     gui_fprintf( stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  00166	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  0016d	83 38 00	 cmp	 DWORD PTR [rax], 0
  00170	74 43		 je	 SHORT $LN70@cckd64_com
  00172	41 b8 01 00 00
	00		 mov	 r8d, 1
  00178	33 d2		 xor	 edx, edx
  0017a	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00181	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00187	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR tv95[rsp], rax
  0018f	b9 02 00 00 00	 mov	 ecx, 2
  00194	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0019a	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR tv95[rsp]
  001a2	4c 8b c1	 mov	 r8, rcx
  001a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169142
  001ac	48 8b c8	 mov	 rcx, rax
  001af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN70@cckd64_com:

; 375  :     len = CKD_DEVHDR_SIZE;

  001b5	48 c7 84 24 90
	00 00 00 00 02
	00 00		 mov	 QWORD PTR len$[rsp], 512 ; 00000200H

; 376  :     if ((U64)(rc = read( fd, &devhdr, (unsigned int) len )) != len)

  001c1	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  001c9	48 8d 94 24 90
	05 00 00	 lea	 rdx, QWORD PTR devhdr$[rsp]
  001d1	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  001d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  001de	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  001e5	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  001ed	48 3b 84 24 90
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  001f5	74 05		 je	 SHORT $LN71@cckd64_com

; 377  :         goto comp_read_error;

  001f7	e9 a9 2d 00 00	 jmp	 $comp_read_error$277
$LN71@cckd64_com:

; 378  : 
; 379  :     dev->cckd64 = 1;

  001fc	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00204	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  0020b	0c 01		 or	 al, 1
  0020d	48 8b 8c 24 30
	28 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00215	88 81 10 13 00
	00		 mov	 BYTE PTR [rcx+4880], al

; 380  :     if (!(dh_devid_typ( devhdr.dh_devid ) & ANY64_CMP_OR_SF_TYP))

  0021b	48 8d 8c 24 90
	05 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp]
  00223	e8 00 00 00 00	 call	 dh_devid_typ
  00228	25 60 00 60 00	 and	 eax, 6291552		; 00600060H
  0022d	85 c0		 test	 eax, eax
  0022f	0f 85 ed 01 00
	00		 jne	 $LN72@cckd64_com

; 381  :     {
; 382  :         if (dh_devid_typ( devhdr.dh_devid ) & ANY32_CMP_OR_SF_TYP)

  00235	48 8d 8c 24 90
	05 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp]
  0023d	e8 00 00 00 00	 call	 dh_devid_typ
  00242	25 00 60 00 60	 and	 eax, 1610637312		; 60006000H
  00247	85 c0		 test	 eax, eax
  00249	74 31		 je	 SHORT $LN73@cckd64_com

; 383  :         {
; 384  :             dev->cckd64 = 0;

  0024b	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00253	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  0025a	24 fe		 and	 al, 254			; 000000feH
  0025c	48 8b 8c 24 30
	28 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00264	88 81 10 13 00
	00		 mov	 BYTE PTR [rcx+4880], al

; 385  :             return cckd_comp( dev );

  0026a	48 8b 8c 24 30
	28 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00272	e8 00 00 00 00	 call	 cckd_comp
  00277	e9 fc 36 00 00	 jmp	 $LN1@cckd64_com
$LN73@cckd64_com:

; 386  :         }
; 387  : 
; 388  :         // "%1d:%04X CCKD file %s: not a compressed dasd file"
; 389  :         if (dev->batch)

  0027c	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00284	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0028a	c1 e8 0a	 shr	 eax, 10
  0028d	83 e0 01	 and	 eax, 1
  00290	85 c0		 test	 eax, eax
  00292	0f 84 ad 00 00
	00		 je	 $LN74@cckd64_com

; 390  :             FWRMSG( stdout, HHC00356, "E", SSID_TO_LCSS( dev->ssid ),

  00298	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  002a0	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  002a6	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR tv161[rsp], rax
  002ae	48 8b 8c 24 30
	28 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002b6	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  002ba	89 8c 24 98 01
	00 00		 mov	 DWORD PTR tv164[rsp], ecx
  002c1	48 8b 94 24 30
	28 04 00	 mov	 rdx, QWORD PTR dev$[rsp]
  002c9	0f b7 52 44	 movzx	 edx, WORD PTR [rdx+68]
  002cd	d1 fa		 sar	 edx, 1
  002cf	89 94 24 9c 01
	00 00		 mov	 DWORD PTR tv168[rsp], edx
  002d6	b9 01 00 00 00	 mov	 ecx, 1
  002db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002e1	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR tv161[rsp]
  002e9	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  002ee	8b 8c 24 98 01
	00 00		 mov	 ecx, DWORD PTR tv164[rsp]
  002f5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  002f9	8b 8c 24 9c 01
	00 00		 mov	 ecx, DWORD PTR tv168[rsp]
  00300	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00304	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169148
  0030b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00310	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169149
  00317	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0031c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00321	41 b9 03 00 00
	00		 mov	 r9d, 3
  00327	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169150
  0032e	ba 87 01 00 00	 mov	 edx, 391		; 00000187H
  00333	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169151
  0033a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00340	e9 d8 00 00 00	 jmp	 $LN75@cckd64_com
$LN74@cckd64_com:

; 391  :                 dev->devnum, dev->filename );
; 392  :         else
; 393  :             WRMSG( HHC00356, "E", LCSS_DEVNUM, dev->filename );

  00345	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0034e	74 15		 je	 SHORT $LN178@cckd64_com
  00350	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00358	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0035c	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv184[rsp], eax
  00363	eb 0b		 jmp	 SHORT $LN179@cckd64_com
$LN178@cckd64_com:
  00365	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv184[rsp], 0
$LN179@cckd64_com:
  00370	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00379	74 17		 je	 SHORT $LN180@cckd64_com
  0037b	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00383	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00387	d1 f8		 sar	 eax, 1
  00389	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv190[rsp], eax
  00390	eb 0b		 jmp	 SHORT $LN181@cckd64_com
$LN180@cckd64_com:
  00392	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv190[rsp], 0
$LN181@cckd64_com:
  0039d	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  003a5	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  003ab	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR tv179[rsp], rax
  003b3	b9 01 00 00 00	 mov	 ecx, 1
  003b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003be	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR tv179[rsp]
  003c6	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  003cb	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR tv184[rsp]
  003d2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  003d6	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR tv190[rsp]
  003dd	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169152
  003e8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169153
  003f4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003f9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003fe	41 b9 03 00 00
	00		 mov	 r9d, 3
  00404	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169154
  0040b	ba 89 01 00 00	 mov	 edx, 393		; 00000189H
  00410	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169155
  00417	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN75@cckd64_com:

; 394  :         goto comp_error;

  0041d	e9 46 35 00 00	 jmp	 $comp_error$278
$LN72@cckd64_com:
$comp_restart$279:

; 395  :     }
; 396  : 
; 397  : comp_restart:
; 398  : 
; 399  :     /*---------------------------------------------------------------
; 400  :      * Read compressed device header
; 401  :      *---------------------------------------------------------------*/
; 402  :     off = CCKD64_DEVHDR_POS;

  00422	48 c7 84 24 a0
	00 00 00 00 02
	00 00		 mov	 QWORD PTR off$[rsp], 512 ; 00000200H

; 403  :     if (lseek (fd, off, SEEK_SET) < 0)

  0042e	45 33 c0	 xor	 r8d, r8d
  00431	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  00439	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00440	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00446	48 85 c0	 test	 rax, rax
  00449	7d 05		 jge	 SHORT $LN76@cckd64_com

; 404  :         goto comp_lseek_error;

  0044b	e9 05 29 00 00	 jmp	 $comp_lseek_error$276
$LN76@cckd64_com:

; 405  :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  00450	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00457	83 38 00	 cmp	 DWORD PTR [rax], 0
  0045a	74 43		 je	 SHORT $LN77@cckd64_com
  0045c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00462	33 d2		 xor	 edx, edx
  00464	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0046b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00471	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR tv208[rsp], rax
  00479	b9 02 00 00 00	 mov	 ecx, 2
  0047e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00484	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR tv208[rsp]
  0048c	4c 8b c1	 mov	 r8, rcx
  0048f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169158
  00496	48 8b c8	 mov	 rcx, rax
  00499	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN77@cckd64_com:

; 406  :     len = CCKD64_DEVHDR_SIZE;

  0049f	48 c7 84 24 90
	00 00 00 00 02
	00 00		 mov	 QWORD PTR len$[rsp], 512 ; 00000200H

; 407  :     if ((U64)(rc = read (fd, &cdevhdr, (unsigned int) len)) != len)

  004ab	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  004b3	48 8d 94 24 90
	03 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  004bb	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  004c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  004c8	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  004cf	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  004d7	48 3b 84 24 90
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  004df	74 05		 je	 SHORT $LN78@cckd64_com

; 408  :         goto comp_read_error;

  004e1	e9 bf 2a 00 00	 jmp	 $comp_read_error$277
$LN78@cckd64_com:

; 409  : 
; 410  :     /*---------------------------------------------------------------
; 411  :      * Check the endianness of the file
; 412  :      *---------------------------------------------------------------*/
; 413  :     if ((cdevhdr.cdh_opts & CCKD_OPT_BIGEND) != cckd_def_opt_bigend())

  004e6	0f b6 84 24 93
	03 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  004ee	83 e0 02	 and	 eax, 2
  004f1	89 84 24 a0 01
	00 00		 mov	 DWORD PTR tv223[rsp], eax
  004f8	e8 00 00 00 00	 call	 cckd_def_opt_bigend
  004fd	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR tv223[rsp]
  00504	3b c8		 cmp	 ecx, eax
  00506	0f 84 66 02 00
	00		 je	 $LN79@cckd64_com

; 414  :     {
; 415  :         if(dev->batch)

  0050c	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00514	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0051a	c1 e8 0a	 shr	 eax, 10
  0051d	83 e0 01	 and	 eax, 1
  00520	85 c0		 test	 eax, eax
  00522	0f 84 19 01 00
	00		 je	 $LN80@cckd64_com

; 416  :             // "%1d:%04X CCKD file %s: converting to %s"
; 417  :             FWRMSG( stdout, HHC00357, "I", LCSS_DEVNUM, dev->filename,

  00528	0f b6 84 24 93
	03 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  00530	83 e0 02	 and	 eax, 2
  00533	85 c0		 test	 eax, eax
  00535	74 11		 je	 SHORT $LN182@cckd64_com
  00537	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169163
  0053e	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR tv233[rsp], rax
  00546	eb 0f		 jmp	 SHORT $LN183@cckd64_com
$LN182@cckd64_com:
  00548	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169164
  0054f	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR tv233[rsp], rax
$LN183@cckd64_com:
  00557	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00560	74 15		 je	 SHORT $LN184@cckd64_com
  00562	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0056a	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0056e	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv240[rsp], eax
  00575	eb 0b		 jmp	 SHORT $LN185@cckd64_com
$LN184@cckd64_com:
  00577	c7 84 24 e8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv240[rsp], 0
$LN185@cckd64_com:
  00582	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0058b	74 17		 je	 SHORT $LN186@cckd64_com
  0058d	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00595	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00599	d1 f8		 sar	 eax, 1
  0059b	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv246[rsp], eax
  005a2	eb 0b		 jmp	 SHORT $LN187@cckd64_com
$LN186@cckd64_com:
  005a4	c7 84 24 ec 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv246[rsp], 0
$LN187@cckd64_com:
  005af	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  005b7	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  005bd	48 89 84 24 08
	02 00 00	 mov	 QWORD PTR tv235[rsp], rax
  005c5	b9 01 00 00 00	 mov	 ecx, 1
  005ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005d0	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR tv233[rsp]
  005d8	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  005dd	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR tv235[rsp]
  005e5	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  005ea	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR tv240[rsp]
  005f1	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  005f5	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR tv246[rsp]
  005fc	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00600	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169165
  00607	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0060c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169166
  00613	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00618	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0061d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00623	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169167
  0062a	ba a3 01 00 00	 mov	 edx, 419		; 000001a3H
  0062f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169168
  00636	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0063c	e9 14 01 00 00	 jmp	 $LN81@cckd64_com
$LN80@cckd64_com:

; 418  :                     (cdevhdr.cdh_opts & CCKD_OPT_BIGEND) ?
; 419  :                         "little-endian" : "big-endian" );
; 420  :         else
; 421  :             // "%1d:%04X CCKD file %s: converting to %s"
; 422  :             WRMSG( HHC00357, "I", LCSS_DEVNUM, dev->filename,

  00641	0f b6 84 24 93
	03 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  00649	83 e0 02	 and	 eax, 2
  0064c	85 c0		 test	 eax, eax
  0064e	74 11		 je	 SHORT $LN188@cckd64_com
  00650	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169169
  00657	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR tv260[rsp], rax
  0065f	eb 0f		 jmp	 SHORT $LN189@cckd64_com
$LN188@cckd64_com:
  00661	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169170
  00668	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR tv260[rsp], rax
$LN189@cckd64_com:
  00670	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00679	74 15		 je	 SHORT $LN190@cckd64_com
  0067b	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00683	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00687	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv267[rsp], eax
  0068e	eb 0b		 jmp	 SHORT $LN191@cckd64_com
$LN190@cckd64_com:
  00690	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv267[rsp], 0
$LN191@cckd64_com:
  0069b	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  006a4	74 17		 je	 SHORT $LN192@cckd64_com
  006a6	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  006ae	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  006b2	d1 f8		 sar	 eax, 1
  006b4	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv273[rsp], eax
  006bb	eb 0b		 jmp	 SHORT $LN193@cckd64_com
$LN192@cckd64_com:
  006bd	c7 84 24 f4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv273[rsp], 0
$LN193@cckd64_com:
  006c8	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  006d0	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  006d6	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR tv262[rsp], rax
  006de	b9 01 00 00 00	 mov	 ecx, 1
  006e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006e9	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR tv260[rsp]
  006f1	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  006f6	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR tv262[rsp]
  006fe	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00703	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR tv267[rsp]
  0070a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0070e	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR tv273[rsp]
  00715	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00719	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169171
  00720	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00725	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169172
  0072c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00731	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00736	41 b9 03 00 00
	00		 mov	 r9d, 3
  0073c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169173
  00743	ba a8 01 00 00	 mov	 edx, 424		; 000001a8H
  00748	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169174
  0074f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN81@cckd64_com:

; 423  :                    (cdevhdr.cdh_opts & CCKD_OPT_BIGEND) ?
; 424  :                     "little-endian" : "big-endian" );
; 425  : 
; 426  :         if (cckd64_swapend (dev) < 0)

  00755	48 8b 8c 24 30
	28 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0075d	e8 00 00 00 00	 call	 cckd64_swapend
  00762	85 c0		 test	 eax, eax
  00764	7d 07		 jge	 SHORT $LN82@cckd64_com

; 427  :             goto comp_error;

  00766	e9 fd 31 00 00	 jmp	 $comp_error$278
  0076b	eb 05		 jmp	 SHORT $LN83@cckd64_com
$LN82@cckd64_com:

; 428  :         else
; 429  :             goto comp_restart;

  0076d	e9 b0 fc ff ff	 jmp	 $comp_restart$279
$LN83@cckd64_com:
$LN79@cckd64_com:

; 430  :     }
; 431  : 
; 432  :     /*---------------------------------------------------------------
; 433  :      * Some header checks
; 434  :      *---------------------------------------------------------------*/
; 435  :     if (cdevhdr.cdh_size   != (U64)fst.st_size
; 436  :      || cdevhdr.cdh_size   != cdevhdr.cdh_used || cdevhdr.free_off     != 0
; 437  :      || cdevhdr.free_total != 0                || cdevhdr.free_largest != 0
; 438  :      || cdevhdr.free_num   != 0                || cdevhdr.free_imbed   != 0)

  00772	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR fst$[rsp+24]
  0077a	48 39 84 24 a0
	03 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+16], rax
  00782	75 49		 jne	 SHORT $LN85@cckd64_com
  00784	48 8b 84 24 a8
	03 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+24]
  0078c	48 39 84 24 a0
	03 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+16], rax
  00794	75 37		 jne	 SHORT $LN85@cckd64_com
  00796	48 83 bc 24 b0
	03 00 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+32], 0
  0079f	75 2c		 jne	 SHORT $LN85@cckd64_com
  007a1	48 83 bc 24 b8
	03 00 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+40], 0
  007aa	75 21		 jne	 SHORT $LN85@cckd64_com
  007ac	48 83 bc 24 c0
	03 00 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+48], 0
  007b5	75 16		 jne	 SHORT $LN85@cckd64_com
  007b7	48 83 bc 24 c8
	03 00 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+56], 0
  007c0	75 0b		 jne	 SHORT $LN85@cckd64_com
  007c2	48 83 bc 24 d0
	03 00 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+64], 0
  007cb	74 08		 je	 SHORT $LN84@cckd64_com
$LN85@cckd64_com:

; 439  :         relocate = 1;

  007cd	c6 84 24 98 00
	00 00 01	 mov	 BYTE PTR relocate$[rsp], 1
$LN84@cckd64_com:

; 440  : 
; 441  :     /*---------------------------------------------------------------
; 442  :      * Build empty l2 tables
; 443  :      *---------------------------------------------------------------*/
; 444  :     memset( &zero_l2, 0, CCKD64_L2TAB_SIZE );

  007d5	48 8d 84 24 90
	07 00 00	 lea	 rax, QWORD PTR zero_l2$[rsp]
  007dd	48 8b f8	 mov	 rdi, rax
  007e0	33 c0		 xor	 eax, eax
  007e2	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  007e7	f3 aa		 rep stosb

; 445  :     if (cdevhdr.cdh_nullfmt != 0)

  007e9	0f b6 84 24 d8
	03 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+72]
  007f1	85 c0		 test	 eax, eax
  007f3	74 62		 je	 SHORT $LN86@cckd64_com

; 446  :         for (i = 0; i < 256; i++)

  007f5	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  007fd	eb 0a		 jmp	 SHORT $LN4@cckd64_com
$LN2@cckd64_com:
  007ff	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  00803	ff c0		 inc	 eax
  00805	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN4@cckd64_com:
  00809	81 7c 24 70 00
	01 00 00	 cmp	 DWORD PTR i$[rsp], 256	; 00000100H
  00811	7d 44		 jge	 SHORT $LN3@cckd64_com

; 447  :             zero_l2[i].L2_len = zero_l2[i].L2_size = cdevhdr.cdh_nullfmt;

  00813	0f b6 84 24 d8
	03 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+72]
  0081b	66 89 84 24 cc
	00 00 00	 mov	 WORD PTR tv310[rsp], ax
  00823	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00828	48 6b c0 10	 imul	 rax, rax, 16
  0082c	0f b7 8c 24 cc
	00 00 00	 movzx	 ecx, WORD PTR tv310[rsp]
  00834	66 89 8c 04 9a
	07 00 00	 mov	 WORD PTR zero_l2$[rsp+rax+10], cx
  0083c	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00841	48 6b c0 10	 imul	 rax, rax, 16
  00845	0f b7 8c 24 cc
	00 00 00	 movzx	 ecx, WORD PTR tv310[rsp]
  0084d	66 89 8c 04 98
	07 00 00	 mov	 WORD PTR zero_l2$[rsp+rax+8], cx
  00855	eb a8		 jmp	 SHORT $LN2@cckd64_com
$LN3@cckd64_com:
$LN86@cckd64_com:

; 448  :     memset (&ff_l2, 0xff, CCKD64_L2TAB_SIZE);

  00857	48 8d 84 24 90
	17 00 00	 lea	 rax, QWORD PTR ff_l2$[rsp]
  0085f	48 8b f8	 mov	 rdi, rax
  00862	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00867	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  0086c	f3 aa		 rep stosb

; 449  : 
; 450  :     /*---------------------------------------------------------------
; 451  :      * Read the l1 table
; 452  :      *---------------------------------------------------------------*/
; 453  :     l1size = len = cdevhdr.num_L1tab * CCKD64_L1ENT_SIZE;

  0086e	48 63 84 24 94
	03 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  00876	48 c1 e0 03	 shl	 rax, 3
  0087a	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR len$[rsp], rax
  00882	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  0088a	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR l1size$[rsp], rax

; 454  :     if ((l1 = malloc((size_t)len)) == NULL)

  00892	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  0089a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  008a0	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR l1$[rsp], rax
  008a8	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR l1$[rsp], 0
  008b1	75 05		 jne	 SHORT $LN87@cckd64_com

; 455  :         goto comp_malloc_error;

  008b3	e9 f5 2b 00 00	 jmp	 $comp_malloc_error$280
$LN87@cckd64_com:

; 456  :     off = CCKD64_L1TAB_POS;

  008b8	48 c7 84 24 a0
	00 00 00 00 04
	00 00		 mov	 QWORD PTR off$[rsp], 1024 ; 00000400H

; 457  :     if (lseek (fd, off, SEEK_SET) < 0)

  008c4	45 33 c0	 xor	 r8d, r8d
  008c7	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  008cf	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  008d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  008dc	48 85 c0	 test	 rax, rax
  008df	7d 05		 jge	 SHORT $LN88@cckd64_com

; 458  :         goto comp_lseek_error;

  008e1	e9 6f 24 00 00	 jmp	 $comp_lseek_error$276
$LN88@cckd64_com:

; 459  :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  008e6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  008ed	83 38 00	 cmp	 DWORD PTR [rax], 0
  008f0	74 43		 je	 SHORT $LN89@cckd64_com
  008f2	41 b8 01 00 00
	00		 mov	 r8d, 1
  008f8	33 d2		 xor	 edx, edx
  008fa	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00901	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00907	48 89 84 24 18
	02 00 00	 mov	 QWORD PTR tv362[rsp], rax
  0090f	b9 02 00 00 00	 mov	 ecx, 2
  00914	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0091a	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR tv362[rsp]
  00922	4c 8b c1	 mov	 r8, rcx
  00925	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169183
  0092c	48 8b c8	 mov	 rcx, rax
  0092f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN89@cckd64_com:

; 460  :     if ((U64)(rc = read (fd, l1, (unsigned int) len)) != len)

  00935	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  0093d	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  00945	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0094c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00952	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  00959	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  00961	48 3b 84 24 90
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  00969	74 05		 je	 SHORT $LN90@cckd64_com

; 461  :         goto comp_read_error;

  0096b	e9 35 26 00 00	 jmp	 $comp_read_error$277
$LN90@cckd64_com:

; 462  : 
; 463  :     /*---------------------------------------------------------------
; 464  :      * Build the space table
; 465  :      *---------------------------------------------------------------*/
; 466  :     n = 1 + 1 + 1 + cdevhdr.num_L1tab + 1;

  00970	8b 84 24 94 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  00977	83 c0 04	 add	 eax, 4
  0097a	89 84 24 c8 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 467  :     for (i = 0; i < cdevhdr.num_L1tab; i++)

  00981	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00989	eb 0a		 jmp	 SHORT $LN7@cckd64_com
$LN5@cckd64_com:
  0098b	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  0098f	ff c0		 inc	 eax
  00991	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN7@cckd64_com:
  00995	8b 84 24 94 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  0099c	39 44 24 70	 cmp	 DWORD PTR i$[rsp], eax
  009a0	7d 3d		 jge	 SHORT $LN6@cckd64_com

; 468  :         if (l1[i] != CCKD64_NOSIZE && l1[i] != CCKD64_MAXSIZE)

  009a2	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  009a7	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  009af	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  009b4	74 27		 je	 SHORT $LN91@cckd64_com
  009b6	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  009bb	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  009c3	48 83 3c c1 ff	 cmp	 QWORD PTR [rcx+rax*8], -1
  009c8	74 13		 je	 SHORT $LN91@cckd64_com

; 469  :             n += 256;

  009ca	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  009d1	05 00 01 00 00	 add	 eax, 256		; 00000100H
  009d6	89 84 24 c8 00
	00 00		 mov	 DWORD PTR n$[rsp], eax
$LN91@cckd64_com:
  009dd	eb ac		 jmp	 SHORT $LN5@cckd64_com
$LN6@cckd64_com:

; 470  :     len = sizeof(SPCTAB64);

  009df	48 c7 84 24 90
	00 00 00 28 00
	00 00		 mov	 QWORD PTR len$[rsp], 40	; 00000028H

; 471  :     if ((spctab = calloc(n, (size_t)len)) == NULL)

  009eb	48 63 84 24 c8
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  009f3	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR len$[rsp]
  009fb	48 8b c8	 mov	 rcx, rax
  009fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  00a04	48 89 44 24 78	 mov	 QWORD PTR spctab$[rsp], rax
  00a09	48 83 7c 24 78
	00		 cmp	 QWORD PTR spctab$[rsp], 0
  00a0f	75 05		 jne	 SHORT $LN92@cckd64_com

; 472  :         goto comp_calloc_error;

  00a11	e9 f1 2c 00 00	 jmp	 $comp_calloc_error$281
$LN92@cckd64_com:

; 473  :     s = 0;

  00a16	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR s$[rsp], 0

; 474  :     spctab[s].spc_typ = SPCTAB_DEVHDR;

  00a1e	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00a23	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00a27	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00a2c	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1

; 475  :     spctab[s].spc_val = -1;

  00a30	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00a35	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00a39	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00a3e	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 476  :     spctab[s].spc_off = 0;

  00a46	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00a4b	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00a4f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00a54	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 477  :     spctab[s].spc_len =

  00a5d	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00a62	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00a66	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00a6b	48 c7 44 01 20
	00 02 00 00	 mov	 QWORD PTR [rcx+rax+32], 512 ; 00000200H
  00a74	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00a79	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00a7d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00a82	48 c7 44 01 18
	00 02 00 00	 mov	 QWORD PTR [rcx+rax+24], 512 ; 00000200H

; 478  :     spctab[s].spc_siz = CKD_DEVHDR_SIZE;
; 479  :     s++;

  00a8b	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  00a8f	ff c0		 inc	 eax
  00a91	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax

; 480  :     spctab[s].spc_typ = SPCTAB_CDEVHDR;

  00a95	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00a9a	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00a9e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00aa3	c6 04 01 02	 mov	 BYTE PTR [rcx+rax], 2

; 481  :     spctab[s].spc_val = -1;

  00aa7	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00aac	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00ab0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00ab5	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 482  :     spctab[s].spc_off = CCKD64_DEVHDR_POS;

  00abd	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00ac2	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00ac6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00acb	48 c7 44 01 10
	00 02 00 00	 mov	 QWORD PTR [rcx+rax+16], 512 ; 00000200H

; 483  :     spctab[s].spc_len =

  00ad4	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00ad9	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00add	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00ae2	48 c7 44 01 20
	00 02 00 00	 mov	 QWORD PTR [rcx+rax+32], 512 ; 00000200H
  00aeb	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00af0	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00af4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00af9	48 c7 44 01 18
	00 02 00 00	 mov	 QWORD PTR [rcx+rax+24], 512 ; 00000200H

; 484  :     spctab[s].spc_siz = CCKD64_DEVHDR_SIZE;
; 485  :     s++;

  00b02	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  00b06	ff c0		 inc	 eax
  00b08	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax

; 486  :     spctab[s].spc_typ = SPCTAB_L1;

  00b0c	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00b11	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00b15	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00b1a	c6 04 01 03	 mov	 BYTE PTR [rcx+rax], 3

; 487  :     spctab[s].spc_val = -1;

  00b1e	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00b23	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00b27	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00b2c	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 488  :     spctab[s].spc_off = CCKD64_L1TAB_POS;

  00b34	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00b39	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00b3d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00b42	48 c7 44 01 10
	00 04 00 00	 mov	 QWORD PTR [rcx+rax+16], 1024 ; 00000400H

; 489  :     spctab[s].spc_len =

  00b4b	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00b50	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00b54	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00b59	48 8b 94 24 88
	01 00 00	 mov	 rdx, QWORD PTR l1size$[rsp]
  00b61	48 89 54 01 20	 mov	 QWORD PTR [rcx+rax+32], rdx
  00b66	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00b6b	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00b6f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00b74	48 8b 94 24 88
	01 00 00	 mov	 rdx, QWORD PTR l1size$[rsp]
  00b7c	48 89 54 01 18	 mov	 QWORD PTR [rcx+rax+24], rdx

; 490  :     spctab[s].spc_siz = l1size;
; 491  :     s++;

  00b81	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  00b85	ff c0		 inc	 eax
  00b87	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax

; 492  :     spctab[s].spc_typ = SPCTAB_EOF;

  00b8b	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00b90	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00b94	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00b99	c6 04 01 08	 mov	 BYTE PTR [rcx+rax], 8

; 493  :     spctab[s].spc_val = -1;

  00b9d	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00ba2	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00ba6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00bab	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 494  :     spctab[s].spc_off = fst.st_size;

  00bb3	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00bb8	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00bbc	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00bc1	48 8b 94 24 68
	03 00 00	 mov	 rdx, QWORD PTR fst$[rsp+24]
  00bc9	48 89 54 01 10	 mov	 QWORD PTR [rcx+rax+16], rdx

; 495  :     spctab[s].spc_len =

  00bce	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00bd3	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00bd7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00bdc	48 c7 44 01 20
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+32], 0
  00be5	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00bea	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00bee	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00bf3	48 c7 44 01 18
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+24], 0

; 496  :     spctab[s].spc_siz = 0;
; 497  :     s++;

  00bfc	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  00c00	ff c0		 inc	 eax
  00c02	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax

; 498  : 
; 499  :     for (i = 0; i < cdevhdr.num_L1tab; i++)

  00c06	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00c0e	eb 0a		 jmp	 SHORT $LN10@cckd64_com
$LN8@cckd64_com:
  00c10	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  00c14	ff c0		 inc	 eax
  00c16	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN10@cckd64_com:
  00c1a	8b 84 24 94 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  00c21	39 44 24 70	 cmp	 DWORD PTR i$[rsp], eax
  00c25	0f 8d b9 00 00
	00		 jge	 $LN9@cckd64_com

; 500  :         if (l1[i] != CCKD64_NOSIZE && l1[i] != CCKD64_MAXSIZE)

  00c2b	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00c30	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  00c38	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00c3d	0f 84 9c 00 00
	00		 je	 $LN93@cckd64_com
  00c43	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00c48	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  00c50	48 83 3c c1 ff	 cmp	 QWORD PTR [rcx+rax*8], -1
  00c55	0f 84 84 00 00
	00		 je	 $LN93@cckd64_com

; 501  :         {
; 502  :             spctab[s].spc_typ = SPCTAB_L2;

  00c5b	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00c60	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00c64	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00c69	c6 04 01 04	 mov	 BYTE PTR [rcx+rax], 4

; 503  :             spctab[s].spc_val = i;

  00c6d	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00c72	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00c76	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00c7b	8b 54 24 70	 mov	 edx, DWORD PTR i$[rsp]
  00c7f	89 54 01 04	 mov	 DWORD PTR [rcx+rax+4], edx

; 504  :             spctab[s].spc_off = l1[i];

  00c83	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00c88	48 63 4c 24 74	 movsxd	 rcx, DWORD PTR s$[rsp]
  00c8d	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  00c91	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  00c96	48 8b bc 24 b8
	00 00 00	 mov	 rdi, QWORD PTR l1$[rsp]
  00c9e	48 8b 04 c7	 mov	 rax, QWORD PTR [rdi+rax*8]
  00ca2	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax

; 505  :             spctab[s].spc_len =

  00ca7	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00cac	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00cb0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00cb5	48 c7 44 01 20
	00 10 00 00	 mov	 QWORD PTR [rcx+rax+32], 4096 ; 00001000H
  00cbe	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00cc3	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00cc7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00ccc	48 c7 44 01 18
	00 10 00 00	 mov	 QWORD PTR [rcx+rax+24], 4096 ; 00001000H

; 506  :             spctab[s].spc_siz = CCKD64_L2TAB_SIZE;
; 507  :             s++;

  00cd5	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  00cd9	ff c0		 inc	 eax
  00cdb	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax
$LN93@cckd64_com:

; 508  :         }

  00cdf	e9 2c ff ff ff	 jmp	 $LN8@cckd64_com
$LN9@cckd64_com:

; 509  :     qsort (spctab, s, sizeof(SPCTAB64), comp_spctab64_sort);

  00ce4	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00ce9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:comp_spctab64_sort
  00cf0	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  00cf6	48 8b d0	 mov	 rdx, rax
  00cf9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00cfe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 510  : 
; 511  :     /*---------------------------------------------------------------
; 512  :      * Read level 2 tables
; 513  :      *---------------------------------------------------------------*/
; 514  :     n = cdevhdr.num_L1tab;

  00d04	8b 84 24 94 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  00d0b	89 84 24 c8 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 515  :     len = sizeof (void *);

  00d12	48 c7 84 24 90
	00 00 00 08 00
	00 00		 mov	 QWORD PTR len$[rsp], 8

; 516  :     if ((l2 = calloc(n, (size_t)len)) == NULL)

  00d1e	48 63 84 24 c8
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  00d26	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR len$[rsp]
  00d2e	48 8b c8	 mov	 rcx, rax
  00d31	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  00d37	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR l2$[rsp], rax
  00d3f	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR l2$[rsp], 0
  00d48	75 05		 jne	 SHORT $LN94@cckd64_com

; 517  :         goto comp_calloc_error;

  00d4a	e9 b8 29 00 00	 jmp	 $comp_calloc_error$281
$LN94@cckd64_com:

; 518  :     for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  00d4f	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00d57	eb 0a		 jmp	 SHORT $LN13@cckd64_com
$LN11@cckd64_com:
  00d59	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  00d5d	ff c0		 inc	 eax
  00d5f	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN13@cckd64_com:
  00d63	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00d68	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00d6c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00d71	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00d75	83 f8 08	 cmp	 eax, 8
  00d78	0f 84 a8 03 00
	00		 je	 $LN12@cckd64_com

; 519  :     {
; 520  :         if (spctab[i].spc_typ != SPCTAB_L2) continue;

  00d7e	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00d83	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00d87	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00d8c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00d90	83 f8 04	 cmp	 eax, 4
  00d93	74 02		 je	 SHORT $LN95@cckd64_com
  00d95	eb c2		 jmp	 SHORT $LN11@cckd64_com
$LN95@cckd64_com:

; 521  :         l = spctab[i].spc_val;

  00d97	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00d9c	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00da0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00da5	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  00da9	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax

; 522  :         len = CCKD64_L2TAB_SIZE;

  00db0	48 c7 84 24 90
	00 00 00 00 10
	00 00		 mov	 QWORD PTR len$[rsp], 4096 ; 00001000H

; 523  :         if ((l2[l] = malloc((size_t)len)) == NULL)

  00dbc	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  00dc4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00dca	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR tv548[rsp], rax
  00dd2	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  00dda	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  00de2	48 8b 94 24 c0
	01 00 00	 mov	 rdx, QWORD PTR tv548[rsp]
  00dea	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx
  00dee	48 83 bc 24 c0
	01 00 00 00	 cmp	 QWORD PTR tv548[rsp], 0
  00df7	75 05		 jne	 SHORT $LN96@cckd64_com

; 524  :             goto comp_malloc_error;

  00df9	e9 af 26 00 00	 jmp	 $comp_malloc_error$280
$LN96@cckd64_com:

; 525  :         off = spctab[i].spc_off;

  00dfe	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00e03	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00e07	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00e0c	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  00e11	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 526  :         if (lseek (fd, off, SEEK_SET) < 0)

  00e19	45 33 c0	 xor	 r8d, r8d
  00e1c	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  00e24	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00e2b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00e31	48 85 c0	 test	 rax, rax
  00e34	7d 05		 jge	 SHORT $LN97@cckd64_com

; 527  :             goto comp_lseek_error;

  00e36	e9 1a 1f 00 00	 jmp	 $comp_lseek_error$276
$LN97@cckd64_com:

; 528  :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  00e3b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00e42	83 38 00	 cmp	 DWORD PTR [rax], 0
  00e45	74 43		 je	 SHORT $LN98@cckd64_com
  00e47	41 b8 01 00 00
	00		 mov	 r8d, 1
  00e4d	33 d2		 xor	 edx, edx
  00e4f	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00e56	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00e5c	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR tv565[rsp], rax
  00e64	b9 02 00 00 00	 mov	 ecx, 2
  00e69	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00e6f	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR tv565[rsp]
  00e77	4c 8b c1	 mov	 r8, rcx
  00e7a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169193
  00e81	48 8b c8	 mov	 rcx, rax
  00e84	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN98@cckd64_com:

; 529  :         if ((U64)(rc = read (fd, l2[l], (unsigned int) len)) != len)

  00e8a	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  00e92	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  00e9a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  00ea2	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00ea6	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00ead	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00eb3	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  00eba	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  00ec2	48 3b 84 24 90
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  00eca	74 05		 je	 SHORT $LN99@cckd64_com

; 530  :             goto comp_read_error;

  00ecc	e9 d4 20 00 00	 jmp	 $comp_read_error$277
$LN99@cckd64_com:

; 531  :         for (j = 0; j < 256; j++)

  00ed1	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR j$[rsp], 0
  00edc	eb 10		 jmp	 SHORT $LN16@cckd64_com
$LN14@cckd64_com:
  00ede	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  00ee5	ff c0		 inc	 eax
  00ee7	89 84 24 88 00
	00 00		 mov	 DWORD PTR j$[rsp], eax
$LN16@cckd64_com:
  00eee	81 bc 24 88 00
	00 00 00 01 00
	00		 cmp	 DWORD PTR j$[rsp], 256	; 00000100H
  00ef9	0f 8d 47 01 00
	00		 jge	 $LN15@cckd64_com

; 532  :         {
; 533  :             if (l2[l][j].L2_trkoff == CCKD64_NOSIZE || l2[l][j].L2_trkoff == CCKD64_MAXSIZE)

  00eff	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  00f07	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  00f0f	48 6b c9 10	 imul	 rcx, rcx, 16
  00f13	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR l2$[rsp]
  00f1b	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00f1f	48 83 3c 08 00	 cmp	 QWORD PTR [rax+rcx], 0
  00f24	74 27		 je	 SHORT $LN101@cckd64_com
  00f26	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  00f2e	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  00f36	48 6b c9 10	 imul	 rcx, rcx, 16
  00f3a	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR l2$[rsp]
  00f42	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00f46	48 83 3c 08 ff	 cmp	 QWORD PTR [rax+rcx], -1
  00f4b	75 02		 jne	 SHORT $LN100@cckd64_com
$LN101@cckd64_com:

; 534  :                 continue;

  00f4d	eb 8f		 jmp	 SHORT $LN14@cckd64_com
$LN100@cckd64_com:

; 535  :             spctab[s].spc_typ = SPCTAB_TRK;

  00f4f	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00f54	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00f58	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00f5d	c6 04 01 05	 mov	 BYTE PTR [rcx+rax], 5

; 536  :             spctab[s].spc_val = spctab[i].spc_val*256 + j;

  00f61	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00f66	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00f6a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00f6f	69 44 01 04 00
	01 00 00	 imul	 eax, DWORD PTR [rcx+rax+4], 256 ; 00000100H
  00f77	03 84 24 88 00
	00 00		 add	 eax, DWORD PTR j$[rsp]
  00f7e	48 63 4c 24 74	 movsxd	 rcx, DWORD PTR s$[rsp]
  00f83	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  00f87	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  00f8c	89 44 0a 04	 mov	 DWORD PTR [rdx+rcx+4], eax

; 537  :             spctab[s].spc_off = l2[l][j].L2_trkoff;

  00f90	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  00f98	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  00fa0	48 6b c9 10	 imul	 rcx, rcx, 16
  00fa4	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR l2$[rsp]
  00fac	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00fb0	48 63 54 24 74	 movsxd	 rdx, DWORD PTR s$[rsp]
  00fb5	48 6b d2 28	 imul	 rdx, rdx, 40		; 00000028H
  00fb9	48 8b 7c 24 78	 mov	 rdi, QWORD PTR spctab$[rsp]
  00fbe	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00fc2	48 89 44 17 10	 mov	 QWORD PTR [rdi+rdx+16], rax

; 538  :             spctab[s].spc_len = l2[l][j].L2_len;

  00fc7	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  00fcf	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  00fd7	48 6b c9 10	 imul	 rcx, rcx, 16
  00fdb	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR l2$[rsp]
  00fe3	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00fe7	48 63 54 24 74	 movsxd	 rdx, DWORD PTR s$[rsp]
  00fec	48 6b d2 28	 imul	 rdx, rdx, 40		; 00000028H
  00ff0	0f b7 44 08 08	 movzx	 eax, WORD PTR [rax+rcx+8]
  00ff5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00ffa	48 89 44 11 18	 mov	 QWORD PTR [rcx+rdx+24], rax

; 539  :             spctab[s].spc_siz = l2[l][j].L2_size;

  00fff	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  01007	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  0100f	48 6b c9 10	 imul	 rcx, rcx, 16
  01013	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR l2$[rsp]
  0101b	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0101f	48 63 54 24 74	 movsxd	 rdx, DWORD PTR s$[rsp]
  01024	48 6b d2 28	 imul	 rdx, rdx, 40		; 00000028H
  01028	0f b7 44 08 0a	 movzx	 eax, WORD PTR [rax+rcx+10]
  0102d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01032	48 89 44 11 20	 mov	 QWORD PTR [rcx+rdx+32], rax

; 540  :             s++;

  01037	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  0103b	ff c0		 inc	 eax
  0103d	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax

; 541  :         } /* for each l2 entry */

  01041	e9 98 fe ff ff	 jmp	 $LN14@cckd64_com
$LN15@cckd64_com:

; 542  :         /* check if empty l2 table */
; 543  :         if (memcmp (l2[l], &zero_l2, CCKD64_L2TAB_SIZE) == 0
; 544  :          || memcmp (l2[l], &ff_l2,   CCKD64_L2TAB_SIZE) == 0)

  01046	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  0104e	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  01054	48 8d 94 24 90
	07 00 00	 lea	 rdx, QWORD PTR zero_l2$[rsp]
  0105c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  01064	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  01068	e8 00 00 00 00	 call	 memcmp
  0106d	85 c0		 test	 eax, eax
  0106f	74 2f		 je	 SHORT $LN103@cckd64_com
  01071	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  01079	41 b8 00 10 00
	00		 mov	 r8d, 4096		; 00001000H
  0107f	48 8d 94 24 90
	17 00 00	 lea	 rdx, QWORD PTR ff_l2$[rsp]
  01087	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  0108f	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  01093	e8 00 00 00 00	 call	 memcmp
  01098	85 c0		 test	 eax, eax
  0109a	0f 85 81 00 00
	00		 jne	 $LN102@cckd64_com
$LN103@cckd64_com:

; 545  :         {
; 546  :             l1[l] = l2[l][0].L2_trkoff; /* CCKD64_NOSIZE or CCKD64_MAXSIZE */

  010a0	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  010a8	b9 10 00 00 00	 mov	 ecx, 16
  010ad	48 6b c9 00	 imul	 rcx, rcx, 0
  010b1	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR l2$[rsp]
  010b9	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  010bd	48 63 94 24 a8
	00 00 00	 movsxd	 rdx, DWORD PTR l$[rsp]
  010c5	48 8b bc 24 b8
	00 00 00	 mov	 rdi, QWORD PTR l1$[rsp]
  010cd	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  010d1	48 89 04 d7	 mov	 QWORD PTR [rdi+rdx*8], rax

; 547  :             spctab[i].spc_typ = SPCTAB_NONE;

  010d5	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  010da	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  010de	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  010e3	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 548  :             free (l2[l]);

  010e7	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  010ef	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  010f7	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  010fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 549  :             l2[l] = NULL;

  01101	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  01109	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  01111	48 c7 04 c1 00
	00 00 00	 mov	 QWORD PTR [rcx+rax*8], 0

; 550  :             relocate = 1;

  01119	c6 84 24 98 00
	00 00 01	 mov	 BYTE PTR relocate$[rsp], 1
$LN102@cckd64_com:

; 551  :         }
; 552  :     } /* for each space */

  01121	e9 33 fc ff ff	 jmp	 $LN11@cckd64_com
$LN12@cckd64_com:

; 553  :     qsort (spctab, s, sizeof(SPCTAB64), comp_spctab64_sort);

  01126	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  0112b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:comp_spctab64_sort
  01132	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  01138	48 8b d0	 mov	 rdx, rax
  0113b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01140	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort
$LN17@cckd64_com:

; 554  :     while (spctab[s-1].spc_typ == SPCTAB_NONE) s--;

  01146	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  0114a	ff c8		 dec	 eax
  0114c	48 98		 cdqe
  0114e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01152	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01157	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0115b	85 c0		 test	 eax, eax
  0115d	75 0c		 jne	 SHORT $LN18@cckd64_com
  0115f	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  01163	ff c8		 dec	 eax
  01165	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax
  01169	eb db		 jmp	 SHORT $LN17@cckd64_com
$LN18@cckd64_com:

; 555  :     /* set relocate flag if last space is free space */
; 556  :     if (spctab[s-2].spc_off + spctab[s-2].spc_len != spctab[s-1].spc_off)

  0116b	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  0116f	83 e8 02	 sub	 eax, 2
  01172	48 98		 cdqe
  01174	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01178	8b 4c 24 74	 mov	 ecx, DWORD PTR s$[rsp]
  0117c	83 e9 02	 sub	 ecx, 2
  0117f	48 63 c9	 movsxd	 rcx, ecx
  01182	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  01186	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  0118b	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  01190	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01195	48 03 44 0a 18	 add	 rax, QWORD PTR [rdx+rcx+24]
  0119a	8b 4c 24 74	 mov	 ecx, DWORD PTR s$[rsp]
  0119e	ff c9		 dec	 ecx
  011a0	48 63 c9	 movsxd	 rcx, ecx
  011a3	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  011a7	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  011ac	48 3b 44 0a 10	 cmp	 rax, QWORD PTR [rdx+rcx+16]
  011b1	74 08		 je	 SHORT $LN104@cckd64_com

; 557  :         relocate = 1;

  011b3	c6 84 24 98 00
	00 00 01	 mov	 BYTE PTR relocate$[rsp], 1
$LN104@cckd64_com:

; 558  : 
; 559  :     /*---------------------------------------------------------------
; 560  :      * relocate l2 tables in order
; 561  :      *---------------------------------------------------------------*/
; 562  : 
; 563  :     /* determine l2 area */
; 564  :     l2area = CCKD64_L1TAB_POS + l1size;

  011bb	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR l1size$[rsp]
  011c3	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  011c9	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR l2area$[rsp], rax

; 565  :     for (i = 0; i < cdevhdr.num_L1tab; i++)

  011d1	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  011d9	eb 0a		 jmp	 SHORT $LN21@cckd64_com
$LN19@cckd64_com:
  011db	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  011df	ff c0		 inc	 eax
  011e1	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN21@cckd64_com:
  011e5	8b 84 24 94 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  011ec	39 44 24 70	 cmp	 DWORD PTR i$[rsp], eax
  011f0	7d 65		 jge	 SHORT $LN20@cckd64_com

; 566  :     {
; 567  :         if (l1[i] == CCKD64_NOSIZE || l1[i] == CCKD64_MAXSIZE)

  011f2	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  011f7	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  011ff	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  01204	74 14		 je	 SHORT $LN106@cckd64_com
  01206	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  0120b	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  01213	48 83 3c c1 ff	 cmp	 QWORD PTR [rcx+rax*8], -1
  01218	75 02		 jne	 SHORT $LN105@cckd64_com
$LN106@cckd64_com:

; 568  :             continue;

  0121a	eb bf		 jmp	 SHORT $LN19@cckd64_com
$LN105@cckd64_com:

; 569  :         if (l1[i] != l2area)

  0121c	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01221	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  01229	48 8b 94 24 90
	01 00 00	 mov	 rdx, QWORD PTR l2area$[rsp]
  01231	48 39 14 c1	 cmp	 QWORD PTR [rcx+rax*8], rdx
  01235	74 08		 je	 SHORT $LN107@cckd64_com

; 570  :             relocate = 1;

  01237	c6 84 24 98 00
	00 00 01	 mov	 BYTE PTR relocate$[rsp], 1
$LN107@cckd64_com:

; 571  :         l2area += CCKD64_L2TAB_SIZE;

  0123f	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR l2area$[rsp]
  01247	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  0124d	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR l2area$[rsp], rax

; 572  :     }

  01255	eb 84		 jmp	 SHORT $LN19@cckd64_com
$LN20@cckd64_com:

; 573  : 
; 574  :     /* quick return if all l2 tables are orderered and no free space */
; 575  :     if (!relocate)

  01257	0f b6 84 24 98
	00 00 00	 movzx	 eax, BYTE PTR relocate$[rsp]
  0125f	85 c0		 test	 eax, eax
  01261	0f 85 62 02 00
	00		 jne	 $LN108@cckd64_com

; 576  :     {
; 577  :         for (i = 1; spctab[i].spc_typ != SPCTAB_EOF; i++)

  01267	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  0126f	eb 0a		 jmp	 SHORT $LN24@cckd64_com
$LN22@cckd64_com:
  01271	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  01275	ff c0		 inc	 eax
  01277	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN24@cckd64_com:
  0127b	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01280	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01284	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01289	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0128d	83 f8 08	 cmp	 eax, 8
  01290	74 46		 je	 SHORT $LN23@cckd64_com

; 578  :             if (spctab[i-1].spc_off + spctab[i-1].spc_len != spctab[i].spc_off)

  01292	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  01296	ff c8		 dec	 eax
  01298	48 98		 cdqe
  0129a	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0129e	8b 4c 24 70	 mov	 ecx, DWORD PTR i$[rsp]
  012a2	ff c9		 dec	 ecx
  012a4	48 63 c9	 movsxd	 rcx, ecx
  012a7	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  012ab	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  012b0	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  012b5	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  012ba	48 03 44 0a 18	 add	 rax, QWORD PTR [rdx+rcx+24]
  012bf	48 63 4c 24 70	 movsxd	 rcx, DWORD PTR i$[rsp]
  012c4	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  012c8	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  012cd	48 3b 44 0a 10	 cmp	 rax, QWORD PTR [rdx+rcx+16]
  012d2	74 02		 je	 SHORT $LN109@cckd64_com

; 579  :                 break;

  012d4	eb 02		 jmp	 SHORT $LN23@cckd64_com
$LN109@cckd64_com:
  012d6	eb 99		 jmp	 SHORT $LN22@cckd64_com
$LN23@cckd64_com:

; 580  :         if (spctab[i].spc_typ == SPCTAB_EOF)

  012d8	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  012dd	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  012e1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  012e6	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  012ea	83 f8 08	 cmp	 eax, 8
  012ed	0f 85 d6 01 00
	00		 jne	 $LN110@cckd64_com

; 581  :         {
; 582  :             if(dev->batch)

  012f3	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  012fb	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01301	c1 e8 0a	 shr	 eax, 10
  01304	83 e0 01	 and	 eax, 1
  01307	85 c0		 test	 eax, eax
  01309	0f 84 dd 00 00
	00		 je	 $LN111@cckd64_com

; 583  :                 FWRMSG( stdout, HHC00358, "I", LCSS_DEVNUM, dev->filename );

  0130f	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01318	74 15		 je	 SHORT $LN194@cckd64_com
  0131a	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01322	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01326	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv776[rsp], eax
  0132d	eb 0b		 jmp	 SHORT $LN195@cckd64_com
$LN194@cckd64_com:
  0132f	c7 84 24 f8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv776[rsp], 0
$LN195@cckd64_com:
  0133a	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01343	74 17		 je	 SHORT $LN196@cckd64_com
  01345	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0134d	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01351	d1 f8		 sar	 eax, 1
  01353	89 84 24 fc 00
	00 00		 mov	 DWORD PTR tv782[rsp], eax
  0135a	eb 0b		 jmp	 SHORT $LN197@cckd64_com
$LN196@cckd64_com:
  0135c	c7 84 24 fc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv782[rsp], 0
$LN197@cckd64_com:
  01367	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0136f	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  01375	48 89 84 24 28
	02 00 00	 mov	 QWORD PTR tv771[rsp], rax
  0137d	b9 01 00 00 00	 mov	 ecx, 1
  01382	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01388	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR tv771[rsp]
  01390	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01395	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR tv776[rsp]
  0139c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  013a0	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR tv782[rsp]
  013a7	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  013ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169208
  013b2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  013b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169209
  013be	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  013c3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  013c8	41 b9 03 00 00
	00		 mov	 r9d, 3
  013ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169210
  013d5	ba 47 02 00 00	 mov	 edx, 583		; 00000247H
  013da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169211
  013e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  013e7	e9 d8 00 00 00	 jmp	 $LN112@cckd64_com
$LN111@cckd64_com:

; 584  :             else
; 585  :                 WRMSG( HHC00358, "I", LCSS_DEVNUM, dev->filename );

  013ec	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  013f5	74 15		 je	 SHORT $LN198@cckd64_com
  013f7	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  013ff	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01403	89 84 24 00 01
	00 00		 mov	 DWORD PTR tv798[rsp], eax
  0140a	eb 0b		 jmp	 SHORT $LN199@cckd64_com
$LN198@cckd64_com:
  0140c	c7 84 24 00 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv798[rsp], 0
$LN199@cckd64_com:
  01417	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01420	74 17		 je	 SHORT $LN200@cckd64_com
  01422	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0142a	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0142e	d1 f8		 sar	 eax, 1
  01430	89 84 24 04 01
	00 00		 mov	 DWORD PTR tv804[rsp], eax
  01437	eb 0b		 jmp	 SHORT $LN201@cckd64_com
$LN200@cckd64_com:
  01439	c7 84 24 04 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv804[rsp], 0
$LN201@cckd64_com:
  01444	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0144c	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  01452	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR tv793[rsp], rax
  0145a	b9 01 00 00 00	 mov	 ecx, 1
  0145f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01465	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR tv793[rsp]
  0146d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01472	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR tv798[rsp]
  01479	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0147d	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR tv804[rsp]
  01484	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01488	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169212
  0148f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01494	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169213
  0149b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  014a0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  014a5	41 b9 03 00 00
	00		 mov	 r9d, 3
  014ab	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169214
  014b2	ba 49 02 00 00	 mov	 edx, 585		; 00000249H
  014b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169215
  014be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN112@cckd64_com:

; 586  :             goto comp_return_ok;

  014c4	e9 44 15 00 00	 jmp	 $comp_return_ok$282
$LN110@cckd64_com:
$LN108@cckd64_com:

; 587  :         }
; 588  :     }
; 589  : 
; 590  :     /* file will be updated */
; 591  :     cdevhdr.cdh_opts |= CCKD_OPT_OPENRW;

  014c9	0f b6 84 24 93
	03 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  014d1	83 c8 40	 or	 eax, 64			; 00000040H
  014d4	88 84 24 93 03
	00 00		 mov	 BYTE PTR cdevhdr$[rsp+3], al

; 592  : 
; 593  :     /* calculate track size within the l2 area */
; 594  :     for (i = 0, rlen = 0; spctab[i].spc_off < l2area; i++)

  014db	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  014e3	48 c7 84 24 d8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR rlen$[rsp], 0
  014ef	eb 0a		 jmp	 SHORT $LN27@cckd64_com
$LN25@cckd64_com:
  014f1	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  014f5	ff c0		 inc	 eax
  014f7	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN27@cckd64_com:
  014fb	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01500	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01504	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01509	48 8b 94 24 90
	01 00 00	 mov	 rdx, QWORD PTR l2area$[rsp]
  01511	48 39 54 01 10	 cmp	 QWORD PTR [rcx+rax+16], rdx
  01516	73 41		 jae	 SHORT $LN26@cckd64_com

; 595  :         if (spctab[i].spc_typ == SPCTAB_TRK)

  01518	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  0151d	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01521	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01526	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0152a	83 f8 05	 cmp	 eax, 5
  0152d	75 28		 jne	 SHORT $LN113@cckd64_com

; 596  :             rlen += sizeof(spctab[i].spc_val) + sizeof(spctab[i].spc_len)

  0152f	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01534	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01538	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  0153d	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  01542	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR rlen$[rsp]
  0154a	48 8d 44 01 0c	 lea	 rax, QWORD PTR [rcx+rax+12]
  0154f	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR rlen$[rsp], rax
$LN113@cckd64_com:
  01557	eb 98		 jmp	 SHORT $LN25@cckd64_com
$LN26@cckd64_com:

; 597  :                  +  spctab[i].spc_len;
; 598  : 
; 599  :     /* read any tracks in the l2area into rbuf */
; 600  :     if ((len = rlen) > 0)

  01559	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR rlen$[rsp]
  01561	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR len$[rsp], rax
  01569	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR len$[rsp], 0
  01572	0f 86 42 02 00
	00		 jbe	 $LN114@cckd64_com

; 601  :     {
; 602  :         if ((rbuf = malloc((size_t)len)) == NULL)

  01578	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  01580	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  01586	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR rbuf$[rsp], rax
  0158e	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR rbuf$[rsp], 0
  01597	75 05		 jne	 SHORT $LN115@cckd64_com

; 603  :             goto comp_malloc_error;

  01599	e9 0f 1f 00 00	 jmp	 $comp_malloc_error$280
$LN115@cckd64_com:

; 604  :         for (i = 0, p = rbuf; spctab[i].spc_off < l2area; i++)

  0159e	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  015a6	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  015ae	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR p$[rsp], rax
  015b6	eb 0a		 jmp	 SHORT $LN30@cckd64_com
$LN28@cckd64_com:
  015b8	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  015bc	ff c0		 inc	 eax
  015be	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN30@cckd64_com:
  015c2	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  015c7	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  015cb	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  015d0	48 8b 94 24 90
	01 00 00	 mov	 rdx, QWORD PTR l2area$[rsp]
  015d8	48 39 54 01 10	 cmp	 QWORD PTR [rcx+rax+16], rdx
  015dd	0f 83 92 01 00
	00		 jae	 $LN29@cckd64_com

; 605  :         {
; 606  :             if (spctab[i].spc_typ != SPCTAB_TRK) continue;

  015e3	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  015e8	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  015ec	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  015f1	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  015f5	83 f8 05	 cmp	 eax, 5
  015f8	74 02		 je	 SHORT $LN116@cckd64_com
  015fa	eb bc		 jmp	 SHORT $LN28@cckd64_com
$LN116@cckd64_com:

; 607  :             memcpy (p, &spctab[i].spc_val, sizeof(spctab[i].spc_val));

  015fc	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01601	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01605	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  0160d	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01612	8b 44 02 04	 mov	 eax, DWORD PTR [rdx+rax+4]
  01616	89 01		 mov	 DWORD PTR [rcx], eax

; 608  :             p += sizeof(spctab[i].spc_val);

  01618	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01620	48 83 c0 04	 add	 rax, 4
  01624	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR p$[rsp], rax

; 609  :             memcpy (p, &spctab[i].spc_len, sizeof(spctab[i].spc_len));

  0162c	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01631	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01635	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  0163d	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01642	48 8b 44 02 18	 mov	 rax, QWORD PTR [rdx+rax+24]
  01647	48 89 01	 mov	 QWORD PTR [rcx], rax

; 610  :             p += sizeof(spctab[i].spc_len);

  0164a	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01652	48 83 c0 08	 add	 rax, 8
  01656	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR p$[rsp], rax

; 611  :             off = spctab[i].spc_off;

  0165e	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01663	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01667	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  0166c	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  01671	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 612  :             if (lseek (fd, off, SEEK_SET) < 0)

  01679	45 33 c0	 xor	 r8d, r8d
  0167c	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  01684	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0168b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  01691	48 85 c0	 test	 rax, rax
  01694	7d 05		 jge	 SHORT $LN117@cckd64_com

; 613  :                 goto comp_lseek_error;

  01696	e9 ba 16 00 00	 jmp	 $comp_lseek_error$276
$LN117@cckd64_com:

; 614  :             gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  0169b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  016a2	83 38 00	 cmp	 DWORD PTR [rax], 0
  016a5	74 43		 je	 SHORT $LN118@cckd64_com
  016a7	41 b8 01 00 00
	00		 mov	 r8d, 1
  016ad	33 d2		 xor	 edx, edx
  016af	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  016b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  016bc	48 89 84 24 38
	02 00 00	 mov	 QWORD PTR tv922[rsp], rax
  016c4	b9 02 00 00 00	 mov	 ecx, 2
  016c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  016cf	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR tv922[rsp]
  016d7	4c 8b c1	 mov	 r8, rcx
  016da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169222
  016e1	48 8b c8	 mov	 rcx, rax
  016e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN118@cckd64_com:

; 615  :             len = spctab[i].spc_len;

  016ea	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  016ef	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  016f3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  016f8	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  016fd	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR len$[rsp], rax

; 616  :             if ((U64)(rc = read (fd, p, (unsigned int) len)) != len)

  01705	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  0170d	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  01715	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0171c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  01722	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  01729	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  01731	48 3b 84 24 90
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  01739	74 05		 je	 SHORT $LN119@cckd64_com

; 617  :                 goto comp_read_error;

  0173b	e9 65 18 00 00	 jmp	 $comp_read_error$277
$LN119@cckd64_com:

; 618  :             p += len;

  01740	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  01748	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  01750	48 03 c8	 add	 rcx, rax
  01753	48 8b c1	 mov	 rax, rcx
  01756	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR p$[rsp], rax

; 619  :             spctab[i].spc_typ = SPCTAB_NONE;

  0175e	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01763	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01767	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  0176c	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 620  :         } /* for each space in the l2 area */

  01770	e9 43 fe ff ff	 jmp	 $LN28@cckd64_com
$LN29@cckd64_com:

; 621  :         qsort (spctab, s, sizeof(SPCTAB64), comp_spctab64_sort);

  01775	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  0177a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:comp_spctab64_sort
  01781	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  01787	48 8b d0	 mov	 rdx, rax
  0178a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  0178f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort
$LN31@cckd64_com:

; 622  :         while (spctab[s-1].spc_typ == SPCTAB_NONE) s--;

  01795	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  01799	ff c8		 dec	 eax
  0179b	48 98		 cdqe
  0179d	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  017a1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  017a6	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  017aa	85 c0		 test	 eax, eax
  017ac	75 0c		 jne	 SHORT $LN32@cckd64_com
  017ae	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  017b2	ff c8		 dec	 eax
  017b4	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax
  017b8	eb db		 jmp	 SHORT $LN31@cckd64_com
$LN32@cckd64_com:
$LN114@cckd64_com:

; 623  :     } /* if any tracks to relocate */
; 624  : 
; 625  :     /* remove all l2 tables from the space table */
; 626  :     for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  017ba	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  017c2	eb 0a		 jmp	 SHORT $LN35@cckd64_com
$LN33@cckd64_com:
  017c4	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  017c8	ff c0		 inc	 eax
  017ca	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN35@cckd64_com:
  017ce	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  017d3	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  017d7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  017dc	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  017e0	83 f8 08	 cmp	 eax, 8
  017e3	74 2b		 je	 SHORT $LN34@cckd64_com

; 627  :         if (spctab[i].spc_typ == SPCTAB_L2)

  017e5	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  017ea	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  017ee	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  017f3	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  017f7	83 f8 04	 cmp	 eax, 4
  017fa	75 12		 jne	 SHORT $LN120@cckd64_com

; 628  :             spctab[i].spc_typ = SPCTAB_NONE;

  017fc	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01801	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01805	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  0180a	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
$LN120@cckd64_com:
  0180e	eb b4		 jmp	 SHORT $LN33@cckd64_com
$LN34@cckd64_com:

; 629  :     qsort (spctab, s, sizeof(SPCTAB64), comp_spctab64_sort);

  01810	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01815	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:comp_spctab64_sort
  0181c	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  01822	48 8b d0	 mov	 rdx, rax
  01825	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  0182a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort
$LN36@cckd64_com:

; 630  :     while (spctab[s-1].spc_typ == SPCTAB_NONE) s--;

  01830	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  01834	ff c8		 dec	 eax
  01836	48 98		 cdqe
  01838	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0183c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01841	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01845	85 c0		 test	 eax, eax
  01847	75 0c		 jne	 SHORT $LN37@cckd64_com
  01849	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  0184d	ff c8		 dec	 eax
  0184f	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax
  01853	eb db		 jmp	 SHORT $LN36@cckd64_com
$LN37@cckd64_com:

; 631  : 
; 632  :     /* add all l2 tables at their ordered offsets */
; 633  :     off = CCKD64_L1TAB_POS + l1size;

  01855	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR l1size$[rsp]
  0185d	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  01863	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 634  :     for (i = 0; i < cdevhdr.num_L1tab; i++)

  0186b	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  01873	eb 0a		 jmp	 SHORT $LN40@cckd64_com
$LN38@cckd64_com:
  01875	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  01879	ff c0		 inc	 eax
  0187b	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN40@cckd64_com:
  0187f	8b 84 24 94 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  01886	39 44 24 70	 cmp	 DWORD PTR i$[rsp], eax
  0188a	0f 8d c0 00 00
	00		 jge	 $LN39@cckd64_com

; 635  :     {
; 636  :         if (l1[i] == CCKD64_NOSIZE || l1[i] == CCKD64_MAXSIZE)

  01890	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01895	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  0189d	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  018a2	74 14		 je	 SHORT $LN122@cckd64_com
  018a4	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  018a9	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  018b1	48 83 3c c1 ff	 cmp	 QWORD PTR [rcx+rax*8], -1
  018b6	75 02		 jne	 SHORT $LN121@cckd64_com
$LN122@cckd64_com:

; 637  :             continue;

  018b8	eb bb		 jmp	 SHORT $LN38@cckd64_com
$LN121@cckd64_com:

; 638  :         spctab[s].spc_typ = SPCTAB_L2;

  018ba	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  018bf	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  018c3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  018c8	c6 04 01 04	 mov	 BYTE PTR [rcx+rax], 4

; 639  :         spctab[s].spc_val = i;

  018cc	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  018d1	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  018d5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  018da	8b 54 24 70	 mov	 edx, DWORD PTR i$[rsp]
  018de	89 54 01 04	 mov	 DWORD PTR [rcx+rax+4], edx

; 640  :         spctab[s].spc_off = off;

  018e2	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  018e7	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  018eb	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  018f0	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  018f8	48 89 54 01 10	 mov	 QWORD PTR [rcx+rax+16], rdx

; 641  :         spctab[s].spc_len =

  018fd	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01902	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01906	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  0190b	48 c7 44 01 20
	00 10 00 00	 mov	 QWORD PTR [rcx+rax+32], 4096 ; 00001000H
  01914	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01919	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0191d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01922	48 c7 44 01 18
	00 10 00 00	 mov	 QWORD PTR [rcx+rax+24], 4096 ; 00001000H

; 642  :         spctab[s].spc_siz = CCKD64_L2TAB_SIZE;
; 643  :         s++;

  0192b	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  0192f	ff c0		 inc	 eax
  01931	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax

; 644  :         off += CCKD64_L2TAB_SIZE;

  01935	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR off$[rsp]
  0193d	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  01943	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 645  :     }

  0194b	e9 25 ff ff ff	 jmp	 $LN38@cckd64_com
$LN39@cckd64_com:

; 646  :     qsort (spctab, s, sizeof(SPCTAB64), comp_spctab64_sort);

  01950	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01955	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:comp_spctab64_sort
  0195c	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  01962	48 8b d0	 mov	 rdx, rax
  01965	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  0196a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 647  :     /* set end-of-file position */
; 648  :     spctab[s-1].spc_off = spctab[s-2].spc_off + spctab[s-2].spc_len;

  01970	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  01974	83 e8 02	 sub	 eax, 2
  01977	48 98		 cdqe
  01979	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0197d	8b 4c 24 74	 mov	 ecx, DWORD PTR s$[rsp]
  01981	83 e9 02	 sub	 ecx, 2
  01984	48 63 c9	 movsxd	 rcx, ecx
  01987	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  0198b	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01990	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  01995	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  0199a	48 03 44 0a 18	 add	 rax, QWORD PTR [rdx+rcx+24]
  0199f	8b 4c 24 74	 mov	 ecx, DWORD PTR s$[rsp]
  019a3	ff c9		 dec	 ecx
  019a5	48 63 c9	 movsxd	 rcx, ecx
  019a8	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  019ac	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  019b1	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax

; 649  : 
; 650  :     /*---------------------------------------------------------------
; 651  :      * Perform compression
; 652  :      *---------------------------------------------------------------*/
; 653  : 
; 654  :     /* move spaces left */
; 655  :     for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  019b6	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  019be	eb 0a		 jmp	 SHORT $LN43@cckd64_com
$LN41@cckd64_com:
  019c0	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  019c4	ff c0		 inc	 eax
  019c6	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN43@cckd64_com:
  019ca	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  019cf	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  019d3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  019d8	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  019dc	83 f8 08	 cmp	 eax, 8
  019df	0f 84 6e 03 00
	00		 je	 $LN42@cckd64_com

; 656  :     {
; 657  :         /* ignore contiguous spaces */
; 658  :         if (spctab[i].spc_off + spctab[i].spc_len == spctab[i+1].spc_off)

  019e5	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  019ea	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  019ee	48 63 4c 24 70	 movsxd	 rcx, DWORD PTR i$[rsp]
  019f3	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  019f7	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  019fc	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  01a01	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01a06	48 03 44 0a 18	 add	 rax, QWORD PTR [rdx+rcx+24]
  01a0b	8b 4c 24 70	 mov	 ecx, DWORD PTR i$[rsp]
  01a0f	ff c1		 inc	 ecx
  01a11	48 63 c9	 movsxd	 rcx, ecx
  01a14	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  01a18	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01a1d	48 3b 44 0a 10	 cmp	 rax, QWORD PTR [rdx+rcx+16]
  01a22	75 02		 jne	 SHORT $LN123@cckd64_com

; 659  :             continue;

  01a24	eb 9a		 jmp	 SHORT $LN41@cckd64_com
$LN123@cckd64_com:

; 660  : 
; 661  :         /* found a gap */
; 662  :         off = spctab[i+1].spc_off;

  01a26	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  01a2a	ff c0		 inc	 eax
  01a2c	48 98		 cdqe
  01a2e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01a32	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01a37	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  01a3c	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 663  : 
; 664  :         /* figure out how much we can read */
; 665  :         for (len = 0, j = i + 1; spctab[j].spc_typ != SPCTAB_EOF; j++)

  01a44	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR len$[rsp], 0
  01a50	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  01a54	ff c0		 inc	 eax
  01a56	89 84 24 88 00
	00 00		 mov	 DWORD PTR j$[rsp], eax
  01a5d	eb 10		 jmp	 SHORT $LN46@cckd64_com
$LN44@cckd64_com:
  01a5f	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  01a66	ff c0		 inc	 eax
  01a68	89 84 24 88 00
	00 00		 mov	 DWORD PTR j$[rsp], eax
$LN46@cckd64_com:
  01a6f	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  01a77	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01a7b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01a80	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01a84	83 f8 08	 cmp	 eax, 8
  01a87	0f 84 2b 01 00
	00		 je	 $LN45@cckd64_com

; 666  :         {
; 667  :             if (len + spctab[j].spc_len > sizeof(buf))

  01a8d	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  01a95	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01a99	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01a9e	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  01aa3	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  01aab	48 03 c8	 add	 rcx, rax
  01aae	48 8b c1	 mov	 rax, rcx
  01ab1	48 3d 00 00 04
	00		 cmp	 rax, 262144		; 00040000H
  01ab7	76 05		 jbe	 SHORT $LN124@cckd64_com

; 668  :                 break;

  01ab9	e9 fa 00 00 00	 jmp	 $LN45@cckd64_com
$LN124@cckd64_com:

; 669  :             next = spctab[j].spc_off + spctab[j].spc_len;

  01abe	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  01ac6	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01aca	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  01ad2	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  01ad6	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01adb	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  01ae0	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01ae5	48 03 44 0a 18	 add	 rax, QWORD PTR [rdx+rcx+24]
  01aea	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR next$[rsp], rax

; 670  :             spctab[j].spc_off = spctab[i].spc_off + spctab[i].spc_len + len;

  01af2	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01af7	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01afb	48 63 4c 24 70	 movsxd	 rcx, DWORD PTR i$[rsp]
  01b00	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  01b04	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01b09	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  01b0e	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01b13	48 03 44 0a 18	 add	 rax, QWORD PTR [rdx+rcx+24]
  01b18	48 03 84 24 90
	00 00 00	 add	 rax, QWORD PTR len$[rsp]
  01b20	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  01b28	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  01b2c	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01b31	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax

; 671  :             spctab[j].spc_siz = spctab[j].spc_len;

  01b36	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  01b3e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01b42	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  01b4a	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  01b4e	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01b53	48 8b 7c 24 78	 mov	 rdi, QWORD PTR spctab$[rsp]
  01b58	48 8b 44 07 18	 mov	 rax, QWORD PTR [rdi+rax+24]
  01b5d	48 89 44 0a 20	 mov	 QWORD PTR [rdx+rcx+32], rax

; 672  :             len += spctab[j].spc_len;

  01b62	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  01b6a	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01b6e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01b73	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  01b78	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  01b80	48 03 c8	 add	 rcx, rax
  01b83	48 8b c1	 mov	 rax, rcx
  01b86	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR len$[rsp], rax

; 673  :             if (next != spctab[j+1].spc_off)

  01b8e	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  01b95	ff c0		 inc	 eax
  01b97	48 98		 cdqe
  01b99	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01b9d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01ba2	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  01ba7	48 39 84 24 40
	02 00 00	 cmp	 QWORD PTR next$[rsp], rax
  01baf	74 02		 je	 SHORT $LN125@cckd64_com

; 674  :                 break;

  01bb1	eb 05		 jmp	 SHORT $LN45@cckd64_com
$LN125@cckd64_com:

; 675  :         } /* search for contiguous spaces */

  01bb3	e9 a7 fe ff ff	 jmp	 $LN44@cckd64_com
$LN45@cckd64_com:

; 676  : 
; 677  :         /* this can happen if the next space is end-of-file */
; 678  :         if (len == 0)

  01bb8	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR len$[rsp], 0
  01bc1	75 05		 jne	 SHORT $LN126@cckd64_com

; 679  :             continue;

  01bc3	e9 f8 fd ff ff	 jmp	 $LN41@cckd64_com
$LN126@cckd64_com:

; 680  : 
; 681  :         /* read the image(s) to be relocated */
; 682  :         if (lseek (fd, off, SEEK_SET) < 0)

  01bc8	45 33 c0	 xor	 r8d, r8d
  01bcb	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  01bd3	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  01bda	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  01be0	48 85 c0	 test	 rax, rax
  01be3	7d 05		 jge	 SHORT $LN127@cckd64_com

; 683  :             goto comp_lseek_error;

  01be5	e9 6b 11 00 00	 jmp	 $comp_lseek_error$276
$LN127@cckd64_com:

; 684  :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  01bea	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  01bf1	83 38 00	 cmp	 DWORD PTR [rax], 0
  01bf4	74 43		 je	 SHORT $LN128@cckd64_com
  01bf6	41 b8 01 00 00
	00		 mov	 r8d, 1
  01bfc	33 d2		 xor	 edx, edx
  01bfe	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  01c05	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  01c0b	48 89 84 24 48
	02 00 00	 mov	 QWORD PTR tv1133[rsp], rax
  01c13	b9 02 00 00 00	 mov	 ecx, 2
  01c18	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01c1e	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR tv1133[rsp]
  01c26	4c 8b c1	 mov	 r8, rcx
  01c29	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169233
  01c30	48 8b c8	 mov	 rcx, rax
  01c33	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN128@cckd64_com:

; 685  :         if ((U64)(rc = read (fd, buf, (unsigned int) len)) != len)

  01c39	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  01c41	48 8d 94 24 10
	28 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  01c49	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  01c50	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  01c56	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  01c5d	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  01c65	48 3b 84 24 90
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  01c6d	74 05		 je	 SHORT $LN129@cckd64_com

; 686  :             goto comp_write_error;

  01c6f	e9 b5 15 00 00	 jmp	 $comp_write_error$283
$LN129@cckd64_com:

; 687  : 
; 688  :         /* write the images */
; 689  :         off = spctab[i].spc_off + spctab[i].spc_len;

  01c74	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01c79	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01c7d	48 63 4c 24 70	 movsxd	 rcx, DWORD PTR i$[rsp]
  01c82	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  01c86	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01c8b	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  01c90	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01c95	48 03 44 0a 18	 add	 rax, QWORD PTR [rdx+rcx+24]
  01c9a	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 690  :         if (lseek (fd, off, SEEK_SET) < 0)

  01ca2	45 33 c0	 xor	 r8d, r8d
  01ca5	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  01cad	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  01cb4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  01cba	48 85 c0	 test	 rax, rax
  01cbd	7d 05		 jge	 SHORT $LN130@cckd64_com

; 691  :             goto comp_lseek_error;

  01cbf	e9 91 10 00 00	 jmp	 $comp_lseek_error$276
$LN130@cckd64_com:

; 692  :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  01cc4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  01ccb	83 38 00	 cmp	 DWORD PTR [rax], 0
  01cce	74 43		 je	 SHORT $LN131@cckd64_com
  01cd0	41 b8 01 00 00
	00		 mov	 r8d, 1
  01cd6	33 d2		 xor	 edx, edx
  01cd8	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  01cdf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  01ce5	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR tv1163[rsp], rax
  01ced	b9 02 00 00 00	 mov	 ecx, 2
  01cf2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01cf8	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR tv1163[rsp]
  01d00	4c 8b c1	 mov	 r8, rcx
  01d03	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169237
  01d0a	48 8b c8	 mov	 rcx, rax
  01d0d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN131@cckd64_com:

; 693  :         if ((U64)(rc = write (fd, buf, (unsigned int) len)) != len)

  01d13	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  01d1b	48 8d 94 24 10
	28 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  01d23	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  01d2a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  01d30	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  01d37	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  01d3f	48 3b 84 24 90
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  01d47	74 05		 je	 SHORT $LN132@cckd64_com

; 694  :             goto comp_write_error;

  01d49	e9 db 14 00 00	 jmp	 $comp_write_error$283
$LN132@cckd64_com:

; 695  :     }

  01d4e	e9 6d fc ff ff	 jmp	 $LN41@cckd64_com
$LN42@cckd64_com:

; 696  : 
; 697  :     /* adjust the size of the file */
; 698  :     spctab[s-1].spc_off = spctab[s-2].spc_off + spctab[s-2].spc_len;

  01d53	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  01d57	83 e8 02	 sub	 eax, 2
  01d5a	48 98		 cdqe
  01d5c	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01d60	8b 4c 24 74	 mov	 ecx, DWORD PTR s$[rsp]
  01d64	83 e9 02	 sub	 ecx, 2
  01d67	48 63 c9	 movsxd	 rcx, ecx
  01d6a	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  01d6e	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01d73	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  01d78	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01d7d	48 03 44 0a 18	 add	 rax, QWORD PTR [rdx+rcx+24]
  01d82	8b 4c 24 74	 mov	 ecx, DWORD PTR s$[rsp]
  01d86	ff c9		 dec	 ecx
  01d88	48 63 c9	 movsxd	 rcx, ecx
  01d8b	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  01d8f	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01d94	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax

; 699  : 
; 700  :     /*---------------------------------------------------------------
; 701  :      * Write spaces relocated from the l2area to the end of the file
; 702  :      *---------------------------------------------------------------*/
; 703  :     off = spctab[s-1].spc_off;

  01d99	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  01d9d	ff c8		 dec	 eax
  01d9f	48 98		 cdqe
  01da1	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01da5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01daa	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  01daf	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 704  :     p = rbuf;

  01db7	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  01dbf	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR p$[rsp], rax
$LN47@cckd64_com:

; 705  :     while (rlen)

  01dc7	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR rlen$[rsp], 0
  01dd0	0f 84 e9 01 00
	00		 je	 $LN48@cckd64_com

; 706  :     {
; 707  :         spctab[s].spc_typ = SPCTAB_TRK;

  01dd6	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01ddb	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01ddf	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01de4	c6 04 01 05	 mov	 BYTE PTR [rcx+rax], 5

; 708  :         spctab[s].spc_off = off;

  01de8	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01ded	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01df1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01df6	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  01dfe	48 89 54 01 10	 mov	 QWORD PTR [rcx+rax+16], rdx

; 709  :         memcpy (&spctab[s].spc_val, p, sizeof(spctab[s].spc_val));

  01e03	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01e08	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01e0c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01e11	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  01e19	8b 12		 mov	 edx, DWORD PTR [rdx]
  01e1b	89 54 01 04	 mov	 DWORD PTR [rcx+rax+4], edx

; 710  :         p += sizeof(spctab[s].spc_val);

  01e1f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01e27	48 83 c0 04	 add	 rax, 4
  01e2b	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR p$[rsp], rax

; 711  :         memcpy (&spctab[s].spc_len, p, sizeof(spctab[s].spc_len));

  01e33	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01e38	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01e3c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01e41	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  01e49	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  01e4c	48 89 54 01 18	 mov	 QWORD PTR [rcx+rax+24], rdx

; 712  :         spctab[s].spc_siz = spctab[s].spc_len;

  01e51	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01e56	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01e5a	48 63 4c 24 74	 movsxd	 rcx, DWORD PTR s$[rsp]
  01e5f	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  01e63	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01e68	48 8b 7c 24 78	 mov	 rdi, QWORD PTR spctab$[rsp]
  01e6d	48 8b 44 07 18	 mov	 rax, QWORD PTR [rdi+rax+24]
  01e72	48 89 44 0a 20	 mov	 QWORD PTR [rdx+rcx+32], rax

; 713  :         p += sizeof(spctab[s].spc_len);

  01e77	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01e7f	48 83 c0 08	 add	 rax, 8
  01e83	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR p$[rsp], rax

; 714  : 
; 715  :         if (lseek (fd, off, SEEK_SET) < 0)

  01e8b	45 33 c0	 xor	 r8d, r8d
  01e8e	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  01e96	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  01e9d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  01ea3	48 85 c0	 test	 rax, rax
  01ea6	7d 05		 jge	 SHORT $LN133@cckd64_com

; 716  :             goto comp_lseek_error;

  01ea8	e9 a8 0e 00 00	 jmp	 $comp_lseek_error$276
$LN133@cckd64_com:

; 717  :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  01ead	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  01eb4	83 38 00	 cmp	 DWORD PTR [rax], 0
  01eb7	74 43		 je	 SHORT $LN134@cckd64_com
  01eb9	41 b8 01 00 00
	00		 mov	 r8d, 1
  01ebf	33 d2		 xor	 edx, edx
  01ec1	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  01ec8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  01ece	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR tv1246[rsp], rax
  01ed6	b9 02 00 00 00	 mov	 ecx, 2
  01edb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01ee1	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR tv1246[rsp]
  01ee9	4c 8b c1	 mov	 r8, rcx
  01eec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169241
  01ef3	48 8b c8	 mov	 rcx, rax
  01ef6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN134@cckd64_com:

; 718  :         len = spctab[s].spc_len;

  01efc	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01f01	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  01f05	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01f0a	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  01f0f	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR len$[rsp], rax

; 719  :         if ((U64)(rc = write (fd, p, (unsigned int) len)) != len)

  01f17	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  01f1f	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  01f27	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  01f2e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  01f34	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  01f3b	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  01f43	48 3b 84 24 90
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  01f4b	74 05		 je	 SHORT $LN135@cckd64_com

; 720  :             goto comp_write_error;

  01f4d	e9 d7 12 00 00	 jmp	 $comp_write_error$283
$LN135@cckd64_com:

; 721  : 
; 722  :         p += len;

  01f52	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  01f5a	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  01f62	48 03 c8	 add	 rcx, rax
  01f65	48 8b c1	 mov	 rax, rcx
  01f68	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR p$[rsp], rax

; 723  :         off += len;

  01f70	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  01f78	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  01f80	48 03 c8	 add	 rcx, rax
  01f83	48 8b c1	 mov	 rax, rcx
  01f86	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 724  :         rlen -= len + sizeof(spctab[s].spc_val) + sizeof(spctab[s].spc_len);

  01f8e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  01f96	48 83 c0 0c	 add	 rax, 12
  01f9a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR rlen$[rsp]
  01fa2	48 2b c8	 sub	 rcx, rax
  01fa5	48 8b c1	 mov	 rax, rcx
  01fa8	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR rlen$[rsp], rax

; 725  :         s++;

  01fb0	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  01fb4	ff c0		 inc	 eax
  01fb6	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax

; 726  :     } /* for each relocated space in l2area */

  01fba	e9 08 fe ff ff	 jmp	 $LN47@cckd64_com
$LN48@cckd64_com:

; 727  : 
; 728  :     /* adjust the space table */
; 729  :     if (rbuf)

  01fbf	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR rbuf$[rsp], 0
  01fc8	0f 84 80 00 00
	00		 je	 $LN136@cckd64_com

; 730  :     {
; 731  :         free (rbuf); rbuf = NULL;

  01fce	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rbuf$[rsp]
  01fd6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  01fdc	48 c7 84 24 d0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR rbuf$[rsp], 0

; 732  :         qsort (spctab, s, sizeof(SPCTAB64), comp_spctab64_sort);

  01fe8	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01fed	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:comp_spctab64_sort
  01ff4	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  01ffa	48 8b d0	 mov	 rdx, rax
  01ffd	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  02002	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 733  :         spctab[s-1].spc_off = spctab[s-2].spc_off + spctab[s-2].spc_len;

  02008	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  0200c	83 e8 02	 sub	 eax, 2
  0200f	48 98		 cdqe
  02011	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  02015	8b 4c 24 74	 mov	 ecx, DWORD PTR s$[rsp]
  02019	83 e9 02	 sub	 ecx, 2
  0201c	48 63 c9	 movsxd	 rcx, ecx
  0201f	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  02023	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  02028	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  0202d	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  02032	48 03 44 0a 18	 add	 rax, QWORD PTR [rdx+rcx+24]
  02037	8b 4c 24 74	 mov	 ecx, DWORD PTR s$[rsp]
  0203b	ff c9		 dec	 ecx
  0203d	48 63 c9	 movsxd	 rcx, ecx
  02040	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  02044	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  02049	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN136@cckd64_com:

; 734  :     }
; 735  : 
; 736  :     /*---------------------------------------------------------------
; 737  :      * Update the device header
; 738  :      *---------------------------------------------------------------*/
; 739  :     cdevhdr.cdh_size     =

  0204e	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  02052	ff c8		 dec	 eax
  02054	48 98		 cdqe
  02056	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0205a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  0205f	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  02064	48 89 84 24 a8
	03 00 00	 mov	 QWORD PTR cdevhdr$[rsp+24], rax
  0206c	48 8b 84 24 a8
	03 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+24]
  02074	48 89 84 24 a0
	03 00 00	 mov	 QWORD PTR cdevhdr$[rsp+16], rax

; 740  :     cdevhdr.cdh_used     = spctab[s-1].spc_off;
; 741  : 
; 742  :     cdevhdr.free_off     =

  0207c	48 c7 84 24 d0
	03 00 00 00 00
	00 00		 mov	 QWORD PTR cdevhdr$[rsp+64], 0
  02088	48 8b 84 24 d0
	03 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+64]
  02090	48 89 84 24 c8
	03 00 00	 mov	 QWORD PTR cdevhdr$[rsp+56], rax
  02098	48 8b 84 24 c8
	03 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+56]
  020a0	48 89 84 24 c0
	03 00 00	 mov	 QWORD PTR cdevhdr$[rsp+48], rax
  020a8	48 8b 84 24 c0
	03 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+48]
  020b0	48 89 84 24 b8
	03 00 00	 mov	 QWORD PTR cdevhdr$[rsp+40], rax
  020b8	48 8b 84 24 b8
	03 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+40]
  020c0	48 89 84 24 b0
	03 00 00	 mov	 QWORD PTR cdevhdr$[rsp+32], rax

; 743  :     cdevhdr.free_total   =
; 744  :     cdevhdr.free_largest =
; 745  :     cdevhdr.free_num     =
; 746  :     cdevhdr.free_imbed   = 0;
; 747  : 
; 748  :     cdevhdr.cdh_vrm[0] = CCKD_VERSION;

  020c8	b8 01 00 00 00	 mov	 eax, 1
  020cd	48 6b c0 00	 imul	 rax, rax, 0
  020d1	c6 84 04 90 03
	00 00 00	 mov	 BYTE PTR cdevhdr$[rsp+rax], 0

; 749  :     cdevhdr.cdh_vrm[1] = CCKD_RELEASE;

  020d9	b8 01 00 00 00	 mov	 eax, 1
  020de	48 6b c0 01	 imul	 rax, rax, 1
  020e2	c6 84 04 90 03
	00 00 03	 mov	 BYTE PTR cdevhdr$[rsp+rax], 3

; 750  :     cdevhdr.cdh_vrm[2] = CCKD_MODLVL;

  020ea	b8 01 00 00 00	 mov	 eax, 1
  020ef	48 6b c0 02	 imul	 rax, rax, 2
  020f3	c6 84 04 90 03
	00 00 01	 mov	 BYTE PTR cdevhdr$[rsp+rax], 1

; 751  : 
; 752  :     /*---------------------------------------------------------------
; 753  :      * Update the lookup tables
; 754  :      *---------------------------------------------------------------*/
; 755  :     for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  020fb	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  02103	eb 0a		 jmp	 SHORT $LN51@cckd64_com
$LN49@cckd64_com:
  02105	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  02109	ff c0		 inc	 eax
  0210b	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN51@cckd64_com:
  0210f	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  02114	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  02118	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  0211d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  02121	83 f8 08	 cmp	 eax, 8
  02124	0f 84 75 01 00
	00		 je	 $LN50@cckd64_com

; 756  :         if (spctab[i].spc_typ == SPCTAB_L2)

  0212a	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  0212f	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  02133	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  02138	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0213c	83 f8 04	 cmp	 eax, 4
  0213f	75 37		 jne	 SHORT $LN137@cckd64_com

; 757  :             l1[spctab[i].spc_val] = spctab[i].spc_off;

  02141	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  02146	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0214a	48 63 4c 24 70	 movsxd	 rcx, DWORD PTR i$[rsp]
  0214f	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  02153	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  02158	48 63 4c 0a 04	 movsxd	 rcx, DWORD PTR [rdx+rcx+4]
  0215d	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  02165	48 8b 7c 24 78	 mov	 rdi, QWORD PTR spctab$[rsp]
  0216a	48 8b 44 07 10	 mov	 rax, QWORD PTR [rdi+rax+16]
  0216f	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax
  02173	e9 22 01 00 00	 jmp	 $LN138@cckd64_com
$LN137@cckd64_com:

; 758  :         else if (spctab[i].spc_typ == SPCTAB_TRK)

  02178	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  0217d	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  02181	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  02186	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0218a	83 f8 05	 cmp	 eax, 5
  0218d	0f 85 07 01 00
	00		 jne	 $LN139@cckd64_com

; 759  :         {
; 760  :             l = spctab[i].spc_val / 256;

  02193	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  02198	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0219c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  021a1	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  021a5	99		 cdq
  021a6	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  021ac	03 c2		 add	 eax, edx
  021ae	c1 f8 08	 sar	 eax, 8
  021b1	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax

; 761  :             j = spctab[i].spc_val % 256;

  021b8	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  021bd	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  021c1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  021c6	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  021ca	99		 cdq
  021cb	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  021d1	03 c2		 add	 eax, edx
  021d3	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  021d8	2b c2		 sub	 eax, edx
  021da	89 84 24 88 00
	00 00		 mov	 DWORD PTR j$[rsp], eax

; 762  :             l2[l][j].L2_trkoff  = spctab[i].spc_off;

  021e1	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  021e6	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  021ea	48 63 8c 24 a8
	00 00 00	 movsxd	 rcx, DWORD PTR l$[rsp]
  021f2	48 63 94 24 88
	00 00 00	 movsxd	 rdx, DWORD PTR j$[rsp]
  021fa	48 6b d2 10	 imul	 rdx, rdx, 16
  021fe	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR l2$[rsp]
  02206	48 8b 0c cf	 mov	 rcx, QWORD PTR [rdi+rcx*8]
  0220a	48 8b 7c 24 78	 mov	 rdi, QWORD PTR spctab$[rsp]
  0220f	48 8b 44 07 10	 mov	 rax, QWORD PTR [rdi+rax+16]
  02214	48 89 04 11	 mov	 QWORD PTR [rcx+rdx], rax

; 763  :             l2[l][j].L2_len  =

  02218	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  0221d	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  02221	48 63 8c 24 a8
	00 00 00	 movsxd	 rcx, DWORD PTR l$[rsp]
  02229	48 63 94 24 88
	00 00 00	 movsxd	 rdx, DWORD PTR j$[rsp]
  02231	48 6b d2 10	 imul	 rdx, rdx, 16
  02235	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR l2$[rsp]
  0223d	48 8b 0c cf	 mov	 rcx, QWORD PTR [rdi+rcx*8]
  02241	48 8b 7c 24 78	 mov	 rdi, QWORD PTR spctab$[rsp]
  02246	0f b7 44 07 18	 movzx	 eax, WORD PTR [rdi+rax+24]
  0224b	66 89 44 11 0a	 mov	 WORD PTR [rcx+rdx+10], ax
  02250	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  02258	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  02260	48 6b c9 10	 imul	 rcx, rcx, 16
  02264	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR l2$[rsp]
  0226c	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  02270	48 63 94 24 a8
	00 00 00	 movsxd	 rdx, DWORD PTR l$[rsp]
  02278	48 63 bc 24 88
	00 00 00	 movsxd	 rdi, DWORD PTR j$[rsp]
  02280	48 6b ff 10	 imul	 rdi, rdi, 16
  02284	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR l2$[rsp]
  0228c	49 8b 14 d0	 mov	 rdx, QWORD PTR [r8+rdx*8]
  02290	0f b7 44 08 0a	 movzx	 eax, WORD PTR [rax+rcx+10]
  02295	66 89 44 3a 08	 mov	 WORD PTR [rdx+rdi+8], ax
$LN139@cckd64_com:
$LN138@cckd64_com:

; 764  :             l2[l][j].L2_size = (U16) spctab[i].spc_len;
; 765  :         }

  0229a	e9 66 fe ff ff	 jmp	 $LN49@cckd64_com
$LN50@cckd64_com:

; 766  : 
; 767  :     /*---------------------------------------------------------------
; 768  :      * Write the cdevhdr, l1 table and l2 tables
; 769  :      *---------------------------------------------------------------*/
; 770  : 
; 771  :     /* write cdevhdr */
; 772  :     off = CCKD64_DEVHDR_POS;

  0229f	48 c7 84 24 a0
	00 00 00 00 02
	00 00		 mov	 QWORD PTR off$[rsp], 512 ; 00000200H

; 773  :     if (lseek (fd, off, SEEK_SET) < 0)

  022ab	45 33 c0	 xor	 r8d, r8d
  022ae	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  022b6	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  022bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  022c3	48 85 c0	 test	 rax, rax
  022c6	7d 05		 jge	 SHORT $LN140@cckd64_com

; 774  :         goto comp_lseek_error;

  022c8	e9 88 0a 00 00	 jmp	 $comp_lseek_error$276
$LN140@cckd64_com:

; 775  :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  022cd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  022d4	83 38 00	 cmp	 DWORD PTR [rax], 0
  022d7	74 43		 je	 SHORT $LN141@cckd64_com
  022d9	41 b8 01 00 00
	00		 mov	 r8d, 1
  022df	33 d2		 xor	 edx, edx
  022e1	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  022e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  022ee	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR tv1387[rsp], rax
  022f6	b9 02 00 00 00	 mov	 ecx, 2
  022fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02301	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR tv1387[rsp]
  02309	4c 8b c1	 mov	 r8, rcx
  0230c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169249
  02313	48 8b c8	 mov	 rcx, rax
  02316	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN141@cckd64_com:

; 776  :     len = CCKD64_DEVHDR_SIZE;

  0231c	48 c7 84 24 90
	00 00 00 00 02
	00 00		 mov	 QWORD PTR len$[rsp], 512 ; 00000200H

; 777  :     if ((U64)(rc = write (fd, &cdevhdr, (unsigned int) len)) != len)

  02328	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  02330	48 8d 94 24 90
	03 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  02338	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0233f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  02345	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  0234c	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  02354	48 3b 84 24 90
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  0235c	74 05		 je	 SHORT $LN142@cckd64_com

; 778  :         goto comp_write_error;

  0235e	e9 c6 0e 00 00	 jmp	 $comp_write_error$283
$LN142@cckd64_com:

; 779  : 
; 780  :     /* write l1 table */
; 781  :     off = CCKD64_L1TAB_POS;

  02363	48 c7 84 24 a0
	00 00 00 00 04
	00 00		 mov	 QWORD PTR off$[rsp], 1024 ; 00000400H

; 782  :     if (lseek (fd, off, SEEK_SET) < 0)

  0236f	45 33 c0	 xor	 r8d, r8d
  02372	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  0237a	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  02381	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  02387	48 85 c0	 test	 rax, rax
  0238a	7d 05		 jge	 SHORT $LN143@cckd64_com

; 783  :         goto comp_lseek_error;

  0238c	e9 c4 09 00 00	 jmp	 $comp_lseek_error$276
$LN143@cckd64_com:

; 784  :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  02391	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  02398	83 38 00	 cmp	 DWORD PTR [rax], 0
  0239b	74 43		 je	 SHORT $LN144@cckd64_com
  0239d	41 b8 01 00 00
	00		 mov	 r8d, 1
  023a3	33 d2		 xor	 edx, edx
  023a5	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  023ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  023b2	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR tv1408[rsp], rax
  023ba	b9 02 00 00 00	 mov	 ecx, 2
  023bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  023c5	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR tv1408[rsp]
  023cd	4c 8b c1	 mov	 r8, rcx
  023d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169253
  023d7	48 8b c8	 mov	 rcx, rax
  023da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN144@cckd64_com:

; 785  :     len = l1size;

  023e0	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR l1size$[rsp]
  023e8	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR len$[rsp], rax

; 786  :     if ((U64)(rc = write (fd, l1, (unsigned int) len)) != len)

  023f0	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  023f8	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  02400	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  02407	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  0240d	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  02414	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  0241c	48 3b 84 24 90
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  02424	74 05		 je	 SHORT $LN145@cckd64_com

; 787  :         goto comp_write_error;

  02426	e9 fe 0d 00 00	 jmp	 $comp_write_error$283
$LN145@cckd64_com:

; 788  : 
; 789  :     /* write l2 tables */
; 790  :     for (i = 0; i < cdevhdr.num_L1tab; i++)

  0242b	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  02433	eb 0a		 jmp	 SHORT $LN54@cckd64_com
$LN52@cckd64_com:
  02435	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  02439	ff c0		 inc	 eax
  0243b	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN54@cckd64_com:
  0243f	8b 84 24 94 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  02446	39 44 24 70	 cmp	 DWORD PTR i$[rsp], eax
  0244a	0f 8d 0f 01 00
	00		 jge	 $LN53@cckd64_com

; 791  :         if (l1[i] != CCKD64_NOSIZE && l1[i] != CCKD64_MAXSIZE)

  02450	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  02455	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  0245d	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  02462	0f 84 f2 00 00
	00		 je	 $LN146@cckd64_com
  02468	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  0246d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  02475	48 83 3c c1 ff	 cmp	 QWORD PTR [rcx+rax*8], -1
  0247a	0f 84 da 00 00
	00		 je	 $LN146@cckd64_com

; 792  :         {
; 793  :             off = l1[i];

  02480	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  02485	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  0248d	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  02491	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 794  :             if (lseek (fd, off, SEEK_SET) < 0)

  02499	45 33 c0	 xor	 r8d, r8d
  0249c	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  024a4	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  024ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  024b1	48 85 c0	 test	 rax, rax
  024b4	7d 05		 jge	 SHORT $LN147@cckd64_com

; 795  :                 goto comp_lseek_error;

  024b6	e9 9a 08 00 00	 jmp	 $comp_lseek_error$276
$LN147@cckd64_com:

; 796  :             gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  024bb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  024c2	83 38 00	 cmp	 DWORD PTR [rax], 0
  024c5	74 43		 je	 SHORT $LN148@cckd64_com
  024c7	41 b8 01 00 00
	00		 mov	 r8d, 1
  024cd	33 d2		 xor	 edx, edx
  024cf	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  024d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  024dc	48 89 84 24 70
	02 00 00	 mov	 QWORD PTR tv1442[rsp], rax
  024e4	b9 02 00 00 00	 mov	 ecx, 2
  024e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  024ef	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR tv1442[rsp]
  024f7	4c 8b c1	 mov	 r8, rcx
  024fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169258
  02501	48 8b c8	 mov	 rcx, rax
  02504	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN148@cckd64_com:

; 797  :             len = CCKD64_L2TAB_SIZE;

  0250a	48 c7 84 24 90
	00 00 00 00 10
	00 00		 mov	 QWORD PTR len$[rsp], 4096 ; 00001000H

; 798  :             if ((U64)(rc = write (fd, l2[i], (unsigned int) len)) != len)

  02516	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  0251b	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  02523	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  0252b	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0252f	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  02536	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  0253c	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  02543	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR rc$[rsp]
  0254b	48 3b 84 24 90
	00 00 00	 cmp	 rax, QWORD PTR len$[rsp]
  02553	74 05		 je	 SHORT $LN149@cckd64_com

; 799  :                 goto comp_lseek_error;

  02555	e9 fb 07 00 00	 jmp	 $comp_lseek_error$276
$LN149@cckd64_com:
$LN146@cckd64_com:

; 800  :         }

  0255a	e9 d6 fe ff ff	 jmp	 $LN52@cckd64_com
$LN53@cckd64_com:

; 801  : 
; 802  :     /* truncate the file */
; 803  :     off = spctab[s-1].spc_off;

  0255f	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  02563	ff c8		 dec	 eax
  02565	48 98		 cdqe
  02567	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0256b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  02570	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  02575	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 804  :     if (off < (U64) fst.st_size)

  0257d	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR fst$[rsp+24]
  02585	48 39 84 24 a0
	00 00 00	 cmp	 QWORD PTR off$[rsp], rax
  0258d	0f 83 a9 02 00
	00		 jae	 $LN150@cckd64_com
$LN57@cckd64_com:

; 805  :     {
; 806  :         VERIFY(!ftruncate (fd, off));

  02593	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  0259b	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  025a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__chsize_s
  025a8	85 c0		 test	 eax, eax
  025aa	74 5c		 je	 SHORT $LN152@cckd64_com
$LN60@cckd64_com:
  025ac	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169263
  025b3	41 b8 26 03 00
	00		 mov	 r8d, 806		; 00000326H
  025b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169264
  025c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169265
  025c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  025cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  025d3	85 c0		 test	 eax, eax
  025d5	74 20		 je	 SHORT $LN153@cckd64_com
  025d7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169267
  025de	41 b8 26 03 00
	00		 mov	 r8d, 806		; 00000326H
  025e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169268
  025eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169269
  025f2	e8 00 00 00 00	 call	 DebuggerTrace
$LN153@cckd64_com:
  025f7	33 c0		 xor	 eax, eax
  025f9	85 c0		 test	 eax, eax
  025fb	75 af		 jne	 SHORT $LN60@cckd64_com
  025fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  02603	85 c0		 test	 eax, eax
  02605	74 01		 je	 SHORT $LN154@cckd64_com
  02607	cc		 int	 3
$LN154@cckd64_com:
$LN152@cckd64_com:
  02608	33 c0		 xor	 eax, eax
  0260a	85 c0		 test	 eax, eax
  0260c	75 85		 jne	 SHORT $LN57@cckd64_com

; 807  :         if(dev->batch)

  0260e	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02616	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0261c	c1 e8 0a	 shr	 eax, 10
  0261f	83 e0 01	 and	 eax, 1
  02622	85 c0		 test	 eax, eax
  02624	0f 84 09 01 00
	00		 je	 $LN155@cckd64_com

; 808  :             FWRMSG( stdout, HHC00359, "I", LCSS_DEVNUM, dev->filename,

  0262a	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02633	74 15		 je	 SHORT $LN202@cckd64_com
  02635	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0263d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02641	89 84 24 08 01
	00 00		 mov	 DWORD PTR tv1494[rsp], eax
  02648	eb 0b		 jmp	 SHORT $LN203@cckd64_com
$LN202@cckd64_com:
  0264a	c7 84 24 08 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1494[rsp], 0
$LN203@cckd64_com:
  02655	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0265e	74 17		 je	 SHORT $LN204@cckd64_com
  02660	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02668	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0266c	d1 f8		 sar	 eax, 1
  0266e	89 84 24 0c 01
	00 00		 mov	 DWORD PTR tv1500[rsp], eax
  02675	eb 0b		 jmp	 SHORT $LN205@cckd64_com
$LN204@cckd64_com:
  02677	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1500[rsp], 0
$LN205@cckd64_com:
  02682	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR off$[rsp]
  0268a	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR fst$[rsp+24]
  02692	48 2b c8	 sub	 rcx, rax
  02695	48 8b c1	 mov	 rax, rcx
  02698	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR tv1487[rsp], rax
  026a0	48 8b 8c 24 30
	28 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  026a8	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  026af	48 89 8c 24 80
	02 00 00	 mov	 QWORD PTR tv1489[rsp], rcx
  026b7	b9 01 00 00 00	 mov	 ecx, 1
  026bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  026c2	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR tv1487[rsp]
  026ca	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  026cf	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR tv1489[rsp]
  026d7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  026dc	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR tv1494[rsp]
  026e3	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  026e7	8b 8c 24 0c 01
	00 00		 mov	 ecx, DWORD PTR tv1500[rsp]
  026ee	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  026f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169273
  026f9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  026fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169274
  02705	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0270a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0270f	41 b9 03 00 00
	00		 mov	 r9d, 3
  02715	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169275
  0271c	ba 29 03 00 00	 mov	 edx, 809		; 00000329H
  02721	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169276
  02728	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0272e	e9 04 01 00 00	 jmp	 $LN156@cckd64_com
$LN155@cckd64_com:

; 809  :                     fst.st_size - off );
; 810  :         else
; 811  :             WRMSG( HHC00359, "I", LCSS_DEVNUM, dev->filename, fst.st_size - off );

  02733	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0273c	74 15		 je	 SHORT $LN206@cckd64_com
  0273e	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02746	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0274a	89 84 24 10 01
	00 00		 mov	 DWORD PTR tv1518[rsp], eax
  02751	eb 0b		 jmp	 SHORT $LN207@cckd64_com
$LN206@cckd64_com:
  02753	c7 84 24 10 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1518[rsp], 0
$LN207@cckd64_com:
  0275e	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02767	74 17		 je	 SHORT $LN208@cckd64_com
  02769	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02771	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02775	d1 f8		 sar	 eax, 1
  02777	89 84 24 14 01
	00 00		 mov	 DWORD PTR tv1524[rsp], eax
  0277e	eb 0b		 jmp	 SHORT $LN209@cckd64_com
$LN208@cckd64_com:
  02780	c7 84 24 14 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1524[rsp], 0
$LN209@cckd64_com:
  0278b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR off$[rsp]
  02793	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR fst$[rsp+24]
  0279b	48 2b c8	 sub	 rcx, rax
  0279e	48 8b c1	 mov	 rax, rcx
  027a1	48 89 84 24 88
	02 00 00	 mov	 QWORD PTR tv1511[rsp], rax
  027a9	48 8b 8c 24 30
	28 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  027b1	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  027b8	48 89 8c 24 90
	02 00 00	 mov	 QWORD PTR tv1513[rsp], rcx
  027c0	b9 01 00 00 00	 mov	 ecx, 1
  027c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  027cb	48 8b 8c 24 88
	02 00 00	 mov	 rcx, QWORD PTR tv1511[rsp]
  027d3	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  027d8	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR tv1513[rsp]
  027e0	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  027e5	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR tv1518[rsp]
  027ec	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  027f0	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR tv1524[rsp]
  027f7	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  027fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169277
  02802	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02807	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169278
  0280e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02813	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02818	41 b9 03 00 00
	00		 mov	 r9d, 3
  0281e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169279
  02825	ba 2b 03 00 00	 mov	 edx, 811		; 0000032bH
  0282a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169280
  02831	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN156@cckd64_com:

; 812  :     }

  02837	e9 d1 01 00 00	 jmp	 $LN151@cckd64_com
$LN150@cckd64_com:

; 813  :     else
; 814  :     {
; 815  :         if(dev->batch)

  0283c	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02844	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0284a	c1 e8 0a	 shr	 eax, 10
  0284d	83 e0 01	 and	 eax, 1
  02850	85 c0		 test	 eax, eax
  02852	0f 84 dd 00 00
	00		 je	 $LN157@cckd64_com

; 816  :             FWRMSG( stdout, HHC00360, "I", LCSS_DEVNUM, dev->filename );

  02858	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02861	74 15		 je	 SHORT $LN210@cckd64_com
  02863	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0286b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0286f	89 84 24 18 01
	00 00		 mov	 DWORD PTR tv1544[rsp], eax
  02876	eb 0b		 jmp	 SHORT $LN211@cckd64_com
$LN210@cckd64_com:
  02878	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1544[rsp], 0
$LN211@cckd64_com:
  02883	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0288c	74 17		 je	 SHORT $LN212@cckd64_com
  0288e	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02896	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0289a	d1 f8		 sar	 eax, 1
  0289c	89 84 24 1c 01
	00 00		 mov	 DWORD PTR tv1550[rsp], eax
  028a3	eb 0b		 jmp	 SHORT $LN213@cckd64_com
$LN212@cckd64_com:
  028a5	c7 84 24 1c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1550[rsp], 0
$LN213@cckd64_com:
  028b0	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  028b8	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  028be	48 89 84 24 98
	02 00 00	 mov	 QWORD PTR tv1539[rsp], rax
  028c6	b9 01 00 00 00	 mov	 ecx, 1
  028cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  028d1	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR tv1539[rsp]
  028d9	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  028de	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR tv1544[rsp]
  028e5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  028e9	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR tv1550[rsp]
  028f0	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  028f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169283
  028fb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02900	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169284
  02907	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0290c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02911	41 b9 03 00 00
	00		 mov	 r9d, 3
  02917	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169285
  0291e	ba 30 03 00 00	 mov	 edx, 816		; 00000330H
  02923	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169286
  0292a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  02930	e9 d8 00 00 00	 jmp	 $LN158@cckd64_com
$LN157@cckd64_com:

; 817  :         else
; 818  :             WRMSG( HHC00360, "I", LCSS_DEVNUM, dev->filename );

  02935	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0293e	74 15		 je	 SHORT $LN214@cckd64_com
  02940	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02948	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0294c	89 84 24 20 01
	00 00		 mov	 DWORD PTR tv1566[rsp], eax
  02953	eb 0b		 jmp	 SHORT $LN215@cckd64_com
$LN214@cckd64_com:
  02955	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1566[rsp], 0
$LN215@cckd64_com:
  02960	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02969	74 17		 je	 SHORT $LN216@cckd64_com
  0296b	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02973	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02977	d1 f8		 sar	 eax, 1
  02979	89 84 24 24 01
	00 00		 mov	 DWORD PTR tv1572[rsp], eax
  02980	eb 0b		 jmp	 SHORT $LN217@cckd64_com
$LN216@cckd64_com:
  02982	c7 84 24 24 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1572[rsp], 0
$LN217@cckd64_com:
  0298d	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02995	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0299b	48 89 84 24 a0
	02 00 00	 mov	 QWORD PTR tv1561[rsp], rax
  029a3	b9 01 00 00 00	 mov	 ecx, 1
  029a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  029ae	48 8b 8c 24 a0
	02 00 00	 mov	 rcx, QWORD PTR tv1561[rsp]
  029b6	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  029bb	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR tv1566[rsp]
  029c2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  029c6	8b 8c 24 24 01
	00 00		 mov	 ecx, DWORD PTR tv1572[rsp]
  029cd	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  029d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169287
  029d8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  029dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169288
  029e4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  029e9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  029ee	41 b9 03 00 00
	00		 mov	 r9d, 3
  029f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169289
  029fb	ba 32 03 00 00	 mov	 edx, 818		; 00000332H
  02a00	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169290
  02a07	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN158@cckd64_com:
$LN151@cckd64_com:
$comp_return_ok$282:

; 819  :     }
; 820  : 
; 821  :     /*---------------------------------------------------------------
; 822  :      * Return
; 823  :      *---------------------------------------------------------------*/
; 824  : 
; 825  : comp_return_ok:
; 826  : 
; 827  :     rc = 0;

  02a0d	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR rc$[rsp], 0
$comp_return$284:

; 828  : 
; 829  : comp_return:
; 830  : 
; 831  :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  02a18	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  02a1f	83 38 00	 cmp	 DWORD PTR [rax], 0
  02a22	74 43		 je	 SHORT $LN159@cckd64_com
  02a24	41 b8 01 00 00
	00		 mov	 r8d, 1
  02a2a	33 d2		 xor	 edx, edx
  02a2c	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  02a33	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  02a39	48 89 84 24 a8
	02 00 00	 mov	 QWORD PTR tv1585[rsp], rax
  02a41	b9 02 00 00 00	 mov	 ecx, 2
  02a46	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02a4c	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR tv1585[rsp]
  02a54	4c 8b c1	 mov	 r8, rcx
  02a57	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169292
  02a5e	48 8b c8	 mov	 rcx, rax
  02a61	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN159@cckd64_com:

; 832  : 
; 833  :     if (rbuf) free(rbuf);

  02a67	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR rbuf$[rsp], 0
  02a70	74 0e		 je	 SHORT $LN160@cckd64_com
  02a72	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rbuf$[rsp]
  02a7a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN160@cckd64_com:

; 834  :     if (l2)

  02a80	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR l2$[rsp], 0
  02a89	74 5c		 je	 SHORT $LN161@cckd64_com

; 835  :     {
; 836  :         for (i = 0; i < cdevhdr.num_L1tab; i++)

  02a8b	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  02a93	eb 0a		 jmp	 SHORT $LN63@cckd64_com
$LN61@cckd64_com:
  02a95	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  02a99	ff c0		 inc	 eax
  02a9b	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN63@cckd64_com:
  02a9f	8b 84 24 94 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  02aa6	39 44 24 70	 cmp	 DWORD PTR i$[rsp], eax
  02aaa	7d 2d		 jge	 SHORT $LN62@cckd64_com

; 837  :             if (l2[i])

  02aac	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  02ab1	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  02ab9	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  02abe	74 17		 je	 SHORT $LN162@cckd64_com

; 838  :                 free (l2[i]);

  02ac0	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  02ac5	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  02acd	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  02ad1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN162@cckd64_com:
  02ad7	eb bc		 jmp	 SHORT $LN61@cckd64_com
$LN62@cckd64_com:

; 839  :         free (l2);

  02ad9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  02ae1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN161@cckd64_com:

; 840  :     }
; 841  :     if (l1) free (l1);

  02ae7	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR l1$[rsp], 0
  02af0	74 0e		 je	 SHORT $LN163@cckd64_com
  02af2	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  02afa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN163@cckd64_com:

; 842  :     if (spctab) free (spctab);

  02b00	48 83 7c 24 78
	00		 cmp	 QWORD PTR spctab$[rsp], 0
  02b06	74 0b		 je	 SHORT $LN164@cckd64_com
  02b08	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  02b0d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN164@cckd64_com:

; 843  : 
; 844  :     return rc;

  02b13	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc$[rsp]
  02b1a	e9 59 0e 00 00	 jmp	 $LN1@cckd64_com
$comp_fstat_error$275:

; 845  : 
; 846  :     /*---------------------------------------------------------------
; 847  :      * Error exits
; 848  :      *---------------------------------------------------------------*/
; 849  : 
; 850  : comp_fstat_error:
; 851  :     if(dev->batch)

  02b1f	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02b27	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02b2d	c1 e8 0a	 shr	 eax, 10
  02b30	83 e0 01	 and	 eax, 1
  02b33	85 c0		 test	 eax, eax
  02b35	0f 84 0d 01 00
	00		 je	 $LN165@cckd64_com

; 852  :         FWRMSG( stdout, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  02b3b	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02b44	74 15		 je	 SHORT $LN218@cckd64_com
  02b46	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02b4e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02b52	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv1657[rsp], eax
  02b59	eb 0b		 jmp	 SHORT $LN219@cckd64_com
$LN218@cckd64_com:
  02b5b	c7 84 24 28 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1657[rsp], 0
$LN219@cckd64_com:
  02b66	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02b6f	74 17		 je	 SHORT $LN220@cckd64_com
  02b71	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02b79	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02b7d	d1 f8		 sar	 eax, 1
  02b7f	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv1663[rsp], eax
  02b86	eb 0b		 jmp	 SHORT $LN221@cckd64_com
$LN220@cckd64_com:
  02b88	c7 84 24 2c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1663[rsp], 0
$LN221@cckd64_com:
  02b93	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  02b99	8b 08		 mov	 ecx, DWORD PTR [rax]
  02b9b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  02ba1	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR tv1647[rsp], rax
  02ba9	48 8b 8c 24 30
	28 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02bb1	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  02bb8	48 89 8c 24 b8
	02 00 00	 mov	 QWORD PTR tv1652[rsp], rcx
  02bc0	b9 01 00 00 00	 mov	 ecx, 1
  02bc5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02bcb	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR tv1647[rsp]
  02bd3	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  02bd8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169300
  02bdf	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  02be4	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR tv1652[rsp]
  02bec	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02bf1	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR tv1657[rsp]
  02bf8	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02bfc	8b 8c 24 2c 01
	00 00		 mov	 ecx, DWORD PTR tv1663[rsp]
  02c03	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02c07	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169301
  02c0e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02c13	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169302
  02c1a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02c1f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02c24	41 b9 03 00 00
	00		 mov	 r9d, 3
  02c2a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169303
  02c31	ba 55 03 00 00	 mov	 edx, 853		; 00000355H
  02c36	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169304
  02c3d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  02c43	e9 08 01 00 00	 jmp	 $LN166@cckd64_com
$LN165@cckd64_com:

; 853  :                 "fstat()", strerror( errno ));
; 854  :     else
; 855  :         WRMSG( HHC00354, "E", LCSS_DEVNUM, dev->filename,

  02c48	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02c51	74 15		 je	 SHORT $LN222@cckd64_com
  02c53	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02c5b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02c5f	89 84 24 30 01
	00 00		 mov	 DWORD PTR tv1684[rsp], eax
  02c66	eb 0b		 jmp	 SHORT $LN223@cckd64_com
$LN222@cckd64_com:
  02c68	c7 84 24 30 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1684[rsp], 0
$LN223@cckd64_com:
  02c73	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02c7c	74 17		 je	 SHORT $LN224@cckd64_com
  02c7e	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02c86	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02c8a	d1 f8		 sar	 eax, 1
  02c8c	89 84 24 34 01
	00 00		 mov	 DWORD PTR tv1690[rsp], eax
  02c93	eb 0b		 jmp	 SHORT $LN225@cckd64_com
$LN224@cckd64_com:
  02c95	c7 84 24 34 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1690[rsp], 0
$LN225@cckd64_com:
  02ca0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  02ca6	8b 08		 mov	 ecx, DWORD PTR [rax]
  02ca8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  02cae	48 89 84 24 c0
	02 00 00	 mov	 QWORD PTR tv1674[rsp], rax
  02cb6	48 8b 8c 24 30
	28 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02cbe	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  02cc5	48 89 8c 24 c8
	02 00 00	 mov	 QWORD PTR tv1679[rsp], rcx
  02ccd	b9 01 00 00 00	 mov	 ecx, 1
  02cd2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02cd8	48 8b 8c 24 c0
	02 00 00	 mov	 rcx, QWORD PTR tv1674[rsp]
  02ce0	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  02ce5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169305
  02cec	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  02cf1	48 8b 8c 24 c8
	02 00 00	 mov	 rcx, QWORD PTR tv1679[rsp]
  02cf9	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02cfe	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR tv1684[rsp]
  02d05	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02d09	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR tv1690[rsp]
  02d10	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02d14	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169306
  02d1b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02d20	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169307
  02d27	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02d2c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02d31	41 b9 03 00 00
	00		 mov	 r9d, 3
  02d37	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169308
  02d3e	ba 58 03 00 00	 mov	 edx, 856		; 00000358H
  02d43	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169309
  02d4a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN166@cckd64_com:

; 856  :                "fstat()", strerror( errno ));
; 857  :     goto comp_error;

  02d50	e9 13 0c 00 00	 jmp	 $comp_error$278
$comp_lseek_error$276:

; 858  : 
; 859  : comp_lseek_error:
; 860  :     if(dev->batch)

  02d55	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02d5d	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02d63	c1 e8 0a	 shr	 eax, 10
  02d66	83 e0 01	 and	 eax, 1
  02d69	85 c0		 test	 eax, eax
  02d6b	0f 84 1a 01 00
	00		 je	 $LN167@cckd64_com

; 861  :         FWRMSG( stdout, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  02d71	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02d7a	74 15		 je	 SHORT $LN226@cckd64_com
  02d7c	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02d84	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02d88	89 84 24 38 01
	00 00		 mov	 DWORD PTR tv1716[rsp], eax
  02d8f	eb 0b		 jmp	 SHORT $LN227@cckd64_com
$LN226@cckd64_com:
  02d91	c7 84 24 38 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1716[rsp], 0
$LN227@cckd64_com:
  02d9c	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02da5	74 17		 je	 SHORT $LN228@cckd64_com
  02da7	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02daf	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02db3	d1 f8		 sar	 eax, 1
  02db5	89 84 24 3c 01
	00 00		 mov	 DWORD PTR tv1722[rsp], eax
  02dbc	eb 0b		 jmp	 SHORT $LN229@cckd64_com
$LN228@cckd64_com:
  02dbe	c7 84 24 3c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1722[rsp], 0
$LN229@cckd64_com:
  02dc9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  02dcf	8b 08		 mov	 ecx, DWORD PTR [rax]
  02dd1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  02dd7	48 89 84 24 d0
	02 00 00	 mov	 QWORD PTR tv1705[rsp], rax
  02ddf	48 8b 8c 24 30
	28 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02de7	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  02dee	48 89 8c 24 d8
	02 00 00	 mov	 QWORD PTR tv1711[rsp], rcx
  02df6	b9 01 00 00 00	 mov	 ecx, 1
  02dfb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02e01	48 8b 8c 24 d0
	02 00 00	 mov	 rcx, QWORD PTR tv1705[rsp]
  02e09	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  02e0e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  02e16	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  02e1b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169312
  02e22	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  02e27	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR tv1711[rsp]
  02e2f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02e34	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR tv1716[rsp]
  02e3b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02e3f	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR tv1722[rsp]
  02e46	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02e4a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169313
  02e51	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02e56	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169314
  02e5d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02e62	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02e67	41 b9 03 00 00
	00		 mov	 r9d, 3
  02e6d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169315
  02e74	ba 5e 03 00 00	 mov	 edx, 862		; 0000035eH
  02e79	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169316
  02e80	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  02e86	e9 15 01 00 00	 jmp	 $LN168@cckd64_com
$LN167@cckd64_com:

; 862  :                 "lseek()", off, strerror( errno ));
; 863  :     else
; 864  :         WRMSG( HHC00355, "E", LCSS_DEVNUM, dev->filename,

  02e8b	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02e94	74 15		 je	 SHORT $LN230@cckd64_com
  02e96	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02e9e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02ea2	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv1744[rsp], eax
  02ea9	eb 0b		 jmp	 SHORT $LN231@cckd64_com
$LN230@cckd64_com:
  02eab	c7 84 24 40 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1744[rsp], 0
$LN231@cckd64_com:
  02eb6	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02ebf	74 17		 je	 SHORT $LN232@cckd64_com
  02ec1	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02ec9	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02ecd	d1 f8		 sar	 eax, 1
  02ecf	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv1750[rsp], eax
  02ed6	eb 0b		 jmp	 SHORT $LN233@cckd64_com
$LN232@cckd64_com:
  02ed8	c7 84 24 44 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1750[rsp], 0
$LN233@cckd64_com:
  02ee3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  02ee9	8b 08		 mov	 ecx, DWORD PTR [rax]
  02eeb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  02ef1	48 89 84 24 e0
	02 00 00	 mov	 QWORD PTR tv1733[rsp], rax
  02ef9	48 8b 8c 24 30
	28 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02f01	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  02f08	48 89 8c 24 e8
	02 00 00	 mov	 QWORD PTR tv1739[rsp], rcx
  02f10	b9 01 00 00 00	 mov	 ecx, 1
  02f15	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02f1b	48 8b 8c 24 e0
	02 00 00	 mov	 rcx, QWORD PTR tv1733[rsp]
  02f23	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  02f28	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  02f30	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  02f35	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169317
  02f3c	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  02f41	48 8b 8c 24 e8
	02 00 00	 mov	 rcx, QWORD PTR tv1739[rsp]
  02f49	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02f4e	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR tv1744[rsp]
  02f55	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02f59	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR tv1750[rsp]
  02f60	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02f64	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169318
  02f6b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02f70	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169319
  02f77	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02f7c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02f81	41 b9 03 00 00
	00		 mov	 r9d, 3
  02f87	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169320
  02f8e	ba 61 03 00 00	 mov	 edx, 865		; 00000361H
  02f93	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169321
  02f9a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN168@cckd64_com:

; 865  :                "lseek()", off, strerror( errno ));
; 866  :     goto comp_error;

  02fa0	e9 c3 09 00 00	 jmp	 $comp_error$278
$comp_read_error$277:

; 867  : 
; 868  : comp_read_error:
; 869  :     if(dev->batch)

  02fa5	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02fad	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02fb3	c1 e8 0a	 shr	 eax, 10
  02fb6	83 e0 01	 and	 eax, 1
  02fb9	85 c0		 test	 eax, eax
  02fbb	0f 84 34 01 00
	00		 je	 $LN169@cckd64_com

; 870  :         FWRMSG( stdout, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  02fc1	83 bc 24 84 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  02fc9	7d 18		 jge	 SHORT $LN234@cckd64_com
  02fcb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  02fd1	8b 08		 mov	 ecx, DWORD PTR [rax]
  02fd3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  02fd9	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv1769[rsp], rax
  02fe1	eb 0f		 jmp	 SHORT $LN235@cckd64_com
$LN234@cckd64_com:
  02fe3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169324
  02fea	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv1769[rsp], rax
$LN235@cckd64_com:
  02ff2	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02ffb	74 15		 je	 SHORT $LN236@cckd64_com
  02ffd	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03005	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03009	89 84 24 48 01
	00 00		 mov	 DWORD PTR tv1778[rsp], eax
  03010	eb 0b		 jmp	 SHORT $LN237@cckd64_com
$LN236@cckd64_com:
  03012	c7 84 24 48 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1778[rsp], 0
$LN237@cckd64_com:
  0301d	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03026	74 17		 je	 SHORT $LN238@cckd64_com
  03028	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03030	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03034	d1 f8		 sar	 eax, 1
  03036	89 84 24 4c 01
	00 00		 mov	 DWORD PTR tv1784[rsp], eax
  0303d	eb 0b		 jmp	 SHORT $LN239@cckd64_com
$LN238@cckd64_com:
  0303f	c7 84 24 4c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1784[rsp], 0
$LN239@cckd64_com:
  0304a	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03052	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  03058	48 89 84 24 f0
	02 00 00	 mov	 QWORD PTR tv1773[rsp], rax
  03060	b9 01 00 00 00	 mov	 ecx, 1
  03065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0306b	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR tv1769[rsp]
  03073	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  03078	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  03080	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  03085	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169325
  0308c	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03091	48 8b 8c 24 f0
	02 00 00	 mov	 rcx, QWORD PTR tv1773[rsp]
  03099	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0309e	8b 8c 24 48 01
	00 00		 mov	 ecx, DWORD PTR tv1778[rsp]
  030a5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  030a9	8b 8c 24 4c 01
	00 00		 mov	 ecx, DWORD PTR tv1784[rsp]
  030b0	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  030b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169326
  030bb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  030c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169327
  030c7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  030cc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  030d1	41 b9 03 00 00
	00		 mov	 r9d, 3
  030d7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169328
  030de	ba 67 03 00 00	 mov	 edx, 871		; 00000367H
  030e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169329
  030ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  030f0	e9 2f 01 00 00	 jmp	 $LN170@cckd64_com
$LN169@cckd64_com:

; 871  :                 "read()", off, rc < 0 ? strerror( errno ) : "incomplete" );
; 872  :     else
; 873  :         WRMSG( HHC00355, "E", LCSS_DEVNUM, dev->filename,

  030f5	83 bc 24 84 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  030fd	7d 18		 jge	 SHORT $LN240@cckd64_com
  030ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  03105	8b 08		 mov	 ecx, DWORD PTR [rax]
  03107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0310d	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv1799[rsp], rax
  03115	eb 0f		 jmp	 SHORT $LN241@cckd64_com
$LN240@cckd64_com:
  03117	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169330
  0311e	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv1799[rsp], rax
$LN241@cckd64_com:
  03126	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0312f	74 15		 je	 SHORT $LN242@cckd64_com
  03131	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03139	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0313d	89 84 24 50 01
	00 00		 mov	 DWORD PTR tv1808[rsp], eax
  03144	eb 0b		 jmp	 SHORT $LN243@cckd64_com
$LN242@cckd64_com:
  03146	c7 84 24 50 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1808[rsp], 0
$LN243@cckd64_com:
  03151	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0315a	74 17		 je	 SHORT $LN244@cckd64_com
  0315c	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03164	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03168	d1 f8		 sar	 eax, 1
  0316a	89 84 24 54 01
	00 00		 mov	 DWORD PTR tv1814[rsp], eax
  03171	eb 0b		 jmp	 SHORT $LN245@cckd64_com
$LN244@cckd64_com:
  03173	c7 84 24 54 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1814[rsp], 0
$LN245@cckd64_com:
  0317e	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03186	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0318c	48 89 84 24 f8
	02 00 00	 mov	 QWORD PTR tv1803[rsp], rax
  03194	b9 01 00 00 00	 mov	 ecx, 1
  03199	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0319f	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR tv1799[rsp]
  031a7	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  031ac	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  031b4	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  031b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169331
  031c0	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  031c5	48 8b 8c 24 f8
	02 00 00	 mov	 rcx, QWORD PTR tv1803[rsp]
  031cd	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  031d2	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR tv1808[rsp]
  031d9	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  031dd	8b 8c 24 54 01
	00 00		 mov	 ecx, DWORD PTR tv1814[rsp]
  031e4	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  031e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169332
  031ef	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  031f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169333
  031fb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03200	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03205	41 b9 03 00 00
	00		 mov	 r9d, 3
  0320b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169334
  03212	ba 6a 03 00 00	 mov	 edx, 874		; 0000036aH
  03217	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169335
  0321e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN170@cckd64_com:

; 874  :                "read()", off, rc < 0 ? strerror( errno ) : "incomplete" );
; 875  :     goto comp_error;

  03224	e9 3f 07 00 00	 jmp	 $comp_error$278
$comp_write_error$283:

; 876  : 
; 877  : comp_write_error:
; 878  :     if(dev->batch)

  03229	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03231	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  03237	c1 e8 0a	 shr	 eax, 10
  0323a	83 e0 01	 and	 eax, 1
  0323d	85 c0		 test	 eax, eax
  0323f	0f 84 34 01 00
	00		 je	 $LN171@cckd64_com

; 879  :         FWRMSG( stdout, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  03245	83 bc 24 84 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  0324d	7d 18		 jge	 SHORT $LN246@cckd64_com
  0324f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  03255	8b 08		 mov	 ecx, DWORD PTR [rax]
  03257	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0325d	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR tv1865[rsp], rax
  03265	eb 0f		 jmp	 SHORT $LN247@cckd64_com
$LN246@cckd64_com:
  03267	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169338
  0326e	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR tv1865[rsp], rax
$LN247@cckd64_com:
  03276	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0327f	74 15		 je	 SHORT $LN248@cckd64_com
  03281	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03289	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0328d	89 84 24 58 01
	00 00		 mov	 DWORD PTR tv1874[rsp], eax
  03294	eb 0b		 jmp	 SHORT $LN249@cckd64_com
$LN248@cckd64_com:
  03296	c7 84 24 58 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1874[rsp], 0
$LN249@cckd64_com:
  032a1	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  032aa	74 17		 je	 SHORT $LN250@cckd64_com
  032ac	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  032b4	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  032b8	d1 f8		 sar	 eax, 1
  032ba	89 84 24 5c 01
	00 00		 mov	 DWORD PTR tv1880[rsp], eax
  032c1	eb 0b		 jmp	 SHORT $LN251@cckd64_com
$LN250@cckd64_com:
  032c3	c7 84 24 5c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1880[rsp], 0
$LN251@cckd64_com:
  032ce	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  032d6	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  032dc	48 89 84 24 00
	03 00 00	 mov	 QWORD PTR tv1869[rsp], rax
  032e4	b9 01 00 00 00	 mov	 ecx, 1
  032e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  032ef	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR tv1865[rsp]
  032f7	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  032fc	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  03304	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  03309	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169339
  03310	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03315	48 8b 8c 24 00
	03 00 00	 mov	 rcx, QWORD PTR tv1869[rsp]
  0331d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03322	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR tv1874[rsp]
  03329	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0332d	8b 8c 24 5c 01
	00 00		 mov	 ecx, DWORD PTR tv1880[rsp]
  03334	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  03338	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169340
  0333f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03344	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169341
  0334b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03350	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03355	41 b9 03 00 00
	00		 mov	 r9d, 3
  0335b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169342
  03362	ba 70 03 00 00	 mov	 edx, 880		; 00000370H
  03367	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169343
  0336e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  03374	e9 2f 01 00 00	 jmp	 $LN172@cckd64_com
$LN171@cckd64_com:

; 880  :                 "write()", off, rc < 0 ? strerror( errno ) : "incomplete" );
; 881  :     else
; 882  :         WRMSG( HHC00355, "E", LCSS_DEVNUM, dev->filename,

  03379	83 bc 24 84 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  03381	7d 18		 jge	 SHORT $LN252@cckd64_com
  03383	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  03389	8b 08		 mov	 ecx, DWORD PTR [rax]
  0338b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  03391	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR tv1895[rsp], rax
  03399	eb 0f		 jmp	 SHORT $LN253@cckd64_com
$LN252@cckd64_com:
  0339b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169344
  033a2	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR tv1895[rsp], rax
$LN253@cckd64_com:
  033aa	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  033b3	74 15		 je	 SHORT $LN254@cckd64_com
  033b5	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  033bd	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  033c1	89 84 24 60 01
	00 00		 mov	 DWORD PTR tv1904[rsp], eax
  033c8	eb 0b		 jmp	 SHORT $LN255@cckd64_com
$LN254@cckd64_com:
  033ca	c7 84 24 60 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1904[rsp], 0
$LN255@cckd64_com:
  033d5	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  033de	74 17		 je	 SHORT $LN256@cckd64_com
  033e0	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  033e8	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  033ec	d1 f8		 sar	 eax, 1
  033ee	89 84 24 64 01
	00 00		 mov	 DWORD PTR tv1910[rsp], eax
  033f5	eb 0b		 jmp	 SHORT $LN257@cckd64_com
$LN256@cckd64_com:
  033f7	c7 84 24 64 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1910[rsp], 0
$LN257@cckd64_com:
  03402	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0340a	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  03410	48 89 84 24 08
	03 00 00	 mov	 QWORD PTR tv1899[rsp], rax
  03418	b9 01 00 00 00	 mov	 ecx, 1
  0341d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03423	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR tv1895[rsp]
  0342b	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  03430	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  03438	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0343d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169345
  03444	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03449	48 8b 8c 24 08
	03 00 00	 mov	 rcx, QWORD PTR tv1899[rsp]
  03451	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03456	8b 8c 24 60 01
	00 00		 mov	 ecx, DWORD PTR tv1904[rsp]
  0345d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  03461	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR tv1910[rsp]
  03468	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0346c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169346
  03473	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03478	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169347
  0347f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03484	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03489	41 b9 03 00 00
	00		 mov	 r9d, 3
  0348f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169348
  03496	ba 73 03 00 00	 mov	 edx, 883		; 00000373H
  0349b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169349
  034a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN172@cckd64_com:

; 883  :                "write()", off, rc < 0 ? strerror( errno ) : "incomplete" );
; 884  :     goto comp_error;

  034a8	e9 bb 04 00 00	 jmp	 $comp_error$278
$comp_malloc_error$280:

; 885  : 
; 886  : comp_malloc_error:
; 887  :     {
; 888  :         char buf[64];
; 889  :         MSGBUF( buf, "malloc(%"PRId64")", len);

  034ad	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR len$[rsp]
  034b5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169350
  034bc	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  034c1	48 8d 8c 24 90
	27 00 00	 lea	 rcx, QWORD PTR buf$1[rsp]
  034c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 890  :         if(dev->batch)

  034cf	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  034d7	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  034dd	c1 e8 0a	 shr	 eax, 10
  034e0	83 e0 01	 and	 eax, 1
  034e3	85 c0		 test	 eax, eax
  034e5	0f 84 0e 01 00
	00		 je	 $LN173@cckd64_com

; 891  :             FWRMSG( stdout, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  034eb	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  034f4	74 15		 je	 SHORT $LN258@cckd64_com
  034f6	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  034fe	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03502	89 84 24 68 01
	00 00		 mov	 DWORD PTR tv1939[rsp], eax
  03509	eb 0b		 jmp	 SHORT $LN259@cckd64_com
$LN258@cckd64_com:
  0350b	c7 84 24 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1939[rsp], 0
$LN259@cckd64_com:
  03516	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0351f	74 17		 je	 SHORT $LN260@cckd64_com
  03521	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03529	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0352d	d1 f8		 sar	 eax, 1
  0352f	89 84 24 6c 01
	00 00		 mov	 DWORD PTR tv1945[rsp], eax
  03536	eb 0b		 jmp	 SHORT $LN261@cckd64_com
$LN260@cckd64_com:
  03538	c7 84 24 6c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1945[rsp], 0
$LN261@cckd64_com:
  03543	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  03549	8b 08		 mov	 ecx, DWORD PTR [rax]
  0354b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  03551	48 89 84 24 10
	03 00 00	 mov	 QWORD PTR tv1929[rsp], rax
  03559	48 8b 8c 24 30
	28 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03561	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  03568	48 89 8c 24 18
	03 00 00	 mov	 QWORD PTR tv1934[rsp], rcx
  03570	b9 01 00 00 00	 mov	 ecx, 1
  03575	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0357b	48 8b 8c 24 10
	03 00 00	 mov	 rcx, QWORD PTR tv1929[rsp]
  03583	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  03588	48 8d 8c 24 90
	27 00 00	 lea	 rcx, QWORD PTR buf$1[rsp]
  03590	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03595	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR tv1934[rsp]
  0359d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  035a2	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR tv1939[rsp]
  035a9	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  035ad	8b 8c 24 6c 01
	00 00		 mov	 ecx, DWORD PTR tv1945[rsp]
  035b4	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  035b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169353
  035bf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  035c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169354
  035cb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  035d0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  035d5	41 b9 03 00 00
	00		 mov	 r9d, 3
  035db	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169355
  035e2	ba 7c 03 00 00	 mov	 edx, 892		; 0000037cH
  035e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169356
  035ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  035f4	e9 09 01 00 00	 jmp	 $LN174@cckd64_com
$LN173@cckd64_com:

; 892  :                     buf, strerror( errno ));
; 893  :         else
; 894  :             WRMSG( HHC00354, "E", LCSS_DEVNUM, dev->filename,

  035f9	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03602	74 15		 je	 SHORT $LN262@cckd64_com
  03604	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0360c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03610	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv1966[rsp], eax
  03617	eb 0b		 jmp	 SHORT $LN263@cckd64_com
$LN262@cckd64_com:
  03619	c7 84 24 70 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1966[rsp], 0
$LN263@cckd64_com:
  03624	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0362d	74 17		 je	 SHORT $LN264@cckd64_com
  0362f	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03637	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0363b	d1 f8		 sar	 eax, 1
  0363d	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv1972[rsp], eax
  03644	eb 0b		 jmp	 SHORT $LN265@cckd64_com
$LN264@cckd64_com:
  03646	c7 84 24 74 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1972[rsp], 0
$LN265@cckd64_com:
  03651	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  03657	8b 08		 mov	 ecx, DWORD PTR [rax]
  03659	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0365f	48 89 84 24 20
	03 00 00	 mov	 QWORD PTR tv1956[rsp], rax
  03667	48 8b 8c 24 30
	28 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0366f	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  03676	48 89 8c 24 28
	03 00 00	 mov	 QWORD PTR tv1961[rsp], rcx
  0367e	b9 01 00 00 00	 mov	 ecx, 1
  03683	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03689	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR tv1956[rsp]
  03691	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  03696	48 8d 8c 24 90
	27 00 00	 lea	 rcx, QWORD PTR buf$1[rsp]
  0369e	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  036a3	48 8b 8c 24 28
	03 00 00	 mov	 rcx, QWORD PTR tv1961[rsp]
  036ab	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  036b0	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR tv1966[rsp]
  036b7	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  036bb	8b 8c 24 74 01
	00 00		 mov	 ecx, DWORD PTR tv1972[rsp]
  036c2	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  036c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169357
  036cd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  036d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169358
  036d9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  036de	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  036e3	41 b9 03 00 00
	00		 mov	 r9d, 3
  036e9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169359
  036f0	ba 7f 03 00 00	 mov	 edx, 895		; 0000037fH
  036f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169360
  036fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN174@cckd64_com:

; 895  :                    buf, strerror( errno ));
; 896  :         goto comp_error;

  03702	e9 61 02 00 00	 jmp	 $comp_error$278
$comp_calloc_error$281:

; 897  :     }
; 898  : comp_calloc_error:
; 899  :     {
; 900  :         char buf[64];
; 901  :         MSGBUF( buf, "calloc(%"PRId64")", n * len);

  03707	48 63 84 24 c8
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  0370f	48 0f af 84 24
	90 00 00 00	 imul	 rax, QWORD PTR len$[rsp]
  03718	4c 8b c8	 mov	 r9, rax
  0371b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169361
  03722	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  03727	48 8d 8c 24 d0
	27 00 00	 lea	 rcx, QWORD PTR buf$2[rsp]
  0372f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 902  :         if(dev->batch)

  03735	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0373d	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  03743	c1 e8 0a	 shr	 eax, 10
  03746	83 e0 01	 and	 eax, 1
  03749	85 c0		 test	 eax, eax
  0374b	0f 84 0e 01 00
	00		 je	 $LN175@cckd64_com

; 903  :             FWRMSG( stdout, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  03751	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0375a	74 15		 je	 SHORT $LN266@cckd64_com
  0375c	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03764	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03768	89 84 24 78 01
	00 00		 mov	 DWORD PTR tv2003[rsp], eax
  0376f	eb 0b		 jmp	 SHORT $LN267@cckd64_com
$LN266@cckd64_com:
  03771	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2003[rsp], 0
$LN267@cckd64_com:
  0377c	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03785	74 17		 je	 SHORT $LN268@cckd64_com
  03787	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0378f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03793	d1 f8		 sar	 eax, 1
  03795	89 84 24 7c 01
	00 00		 mov	 DWORD PTR tv2009[rsp], eax
  0379c	eb 0b		 jmp	 SHORT $LN269@cckd64_com
$LN268@cckd64_com:
  0379e	c7 84 24 7c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2009[rsp], 0
$LN269@cckd64_com:
  037a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  037af	8b 08		 mov	 ecx, DWORD PTR [rax]
  037b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  037b7	48 89 84 24 30
	03 00 00	 mov	 QWORD PTR tv1993[rsp], rax
  037bf	48 8b 8c 24 30
	28 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  037c7	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  037ce	48 89 8c 24 38
	03 00 00	 mov	 QWORD PTR tv1998[rsp], rcx
  037d6	b9 01 00 00 00	 mov	 ecx, 1
  037db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  037e1	48 8b 8c 24 30
	03 00 00	 mov	 rcx, QWORD PTR tv1993[rsp]
  037e9	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  037ee	48 8d 8c 24 d0
	27 00 00	 lea	 rcx, QWORD PTR buf$2[rsp]
  037f6	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  037fb	48 8b 8c 24 38
	03 00 00	 mov	 rcx, QWORD PTR tv1998[rsp]
  03803	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03808	8b 8c 24 78 01
	00 00		 mov	 ecx, DWORD PTR tv2003[rsp]
  0380f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  03813	8b 8c 24 7c 01
	00 00		 mov	 ecx, DWORD PTR tv2009[rsp]
  0381a	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0381e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169364
  03825	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0382a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169365
  03831	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03836	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0383b	41 b9 03 00 00
	00		 mov	 r9d, 3
  03841	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169366
  03848	ba 88 03 00 00	 mov	 edx, 904		; 00000388H
  0384d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169367
  03854	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0385a	e9 09 01 00 00	 jmp	 $LN176@cckd64_com
$LN175@cckd64_com:

; 904  :                     buf, strerror( errno ));
; 905  :         else
; 906  :             WRMSG( HHC00354, "E", LCSS_DEVNUM, dev->filename,

  0385f	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03868	74 15		 je	 SHORT $LN270@cckd64_com
  0386a	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03872	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03876	89 84 24 80 01
	00 00		 mov	 DWORD PTR tv2030[rsp], eax
  0387d	eb 0b		 jmp	 SHORT $LN271@cckd64_com
$LN270@cckd64_com:
  0387f	c7 84 24 80 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2030[rsp], 0
$LN271@cckd64_com:
  0388a	48 83 bc 24 30
	28 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03893	74 17		 je	 SHORT $LN272@cckd64_com
  03895	48 8b 84 24 30
	28 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0389d	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  038a1	d1 f8		 sar	 eax, 1
  038a3	89 84 24 84 01
	00 00		 mov	 DWORD PTR tv2036[rsp], eax
  038aa	eb 0b		 jmp	 SHORT $LN273@cckd64_com
$LN272@cckd64_com:
  038ac	c7 84 24 84 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2036[rsp], 0
$LN273@cckd64_com:
  038b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  038bd	8b 08		 mov	 ecx, DWORD PTR [rax]
  038bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  038c5	48 89 84 24 40
	03 00 00	 mov	 QWORD PTR tv2020[rsp], rax
  038cd	48 8b 8c 24 30
	28 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  038d5	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  038dc	48 89 8c 24 48
	03 00 00	 mov	 QWORD PTR tv2025[rsp], rcx
  038e4	b9 01 00 00 00	 mov	 ecx, 1
  038e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  038ef	48 8b 8c 24 40
	03 00 00	 mov	 rcx, QWORD PTR tv2020[rsp]
  038f7	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  038fc	48 8d 8c 24 d0
	27 00 00	 lea	 rcx, QWORD PTR buf$2[rsp]
  03904	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03909	48 8b 8c 24 48
	03 00 00	 mov	 rcx, QWORD PTR tv2025[rsp]
  03911	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03916	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR tv2030[rsp]
  0391d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  03921	8b 8c 24 84 01
	00 00		 mov	 ecx, DWORD PTR tv2036[rsp]
  03928	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0392c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169368
  03933	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03938	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169369
  0393f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03944	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03949	41 b9 03 00 00
	00		 mov	 r9d, 3
  0394f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169370
  03956	ba 8b 03 00 00	 mov	 edx, 907		; 0000038bH
  0395b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169371
  03962	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN176@cckd64_com:
$comp_error$278:

; 907  :                    buf, strerror( errno ));
; 908  :         goto comp_error;
; 909  :     }
; 910  : comp_error:
; 911  : 
; 912  :     rc = -1;

  03968	c7 84 24 84 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR rc$[rsp], -1

; 913  :     goto comp_return;

  03973	e9 a0 f0 ff ff	 jmp	 $comp_return$284
$LN1@cckd64_com:

; 914  : 
; 915  : } /* cckd64_comp() */

  03978	48 8b 8c 24 10
	28 04 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  03980	48 33 cc	 xor	 rcx, rsp
  03983	e8 00 00 00 00	 call	 __security_check_cookie
  03988	48 81 c4 20 28
	04 00		 add	 rsp, 272416		; 00042820H
  0398f	5f		 pop	 rdi
  03990	c3		 ret	 0
cckd64_comp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil64.c
_TEXT	SEGMENT
fb$ = 48
cckd64_swapend_free PROC

; 315  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 316  :     fb->fb_offnxt = SWAP64( fb->fb_offnxt );

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR fb$[rsp]
  0000e	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00011	e8 00 00 00 00	 call	 _byteswap_uint64
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fb$[rsp]
  0001b	48 89 01	 mov	 QWORD PTR [rcx], rax

; 317  :     fb->fb_len    = SWAP64( fb->fb_len    );

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR fb$[rsp]
  00023	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00027	e8 00 00 00 00	 call	 _byteswap_uint64
  0002c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fb$[rsp]
  00031	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 318  : }

  00035	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00039	c3		 ret	 0
cckd64_swapend_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil64.c
_TEXT	SEGMENT
i$ = 32
l2$ = 64
cckd64_swapend_l2 PROC

; 301  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 302  :     int  i;
; 303  :     for (i = 0; i < 256; i++)

  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00011	eb 0a		 jmp	 SHORT $LN4@cckd64_swa
$LN2@cckd64_swa:
  00013	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00017	ff c0		 inc	 eax
  00019	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@cckd64_swa:
  0001d	81 7c 24 20 00
	01 00 00	 cmp	 DWORD PTR i$[rsp], 256	; 00000100H
  00025	0f 8d 84 00 00
	00		 jge	 $LN3@cckd64_swa

; 304  :     {
; 305  :         l2[i].L2_trkoff = SWAP64( l2[i].L2_trkoff );

  0002b	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00030	48 6b c0 10	 imul	 rax, rax, 16
  00034	48 8b 4c 24 40	 mov	 rcx, QWORD PTR l2$[rsp]
  00039	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0003d	e8 00 00 00 00	 call	 _byteswap_uint64
  00042	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00047	48 6b c9 10	 imul	 rcx, rcx, 16
  0004b	48 8b 54 24 40	 mov	 rdx, QWORD PTR l2$[rsp]
  00050	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax

; 306  :         l2[i].L2_len    = SWAP16( l2[i].L2_len    );

  00054	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00059	48 6b c0 10	 imul	 rax, rax, 16
  0005d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR l2$[rsp]
  00062	0f b7 4c 01 08	 movzx	 ecx, WORD PTR [rcx+rax+8]
  00067	e8 00 00 00 00	 call	 _byteswap_ushort
  0006c	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00071	48 6b c9 10	 imul	 rcx, rcx, 16
  00075	48 8b 54 24 40	 mov	 rdx, QWORD PTR l2$[rsp]
  0007a	66 89 44 0a 08	 mov	 WORD PTR [rdx+rcx+8], ax

; 307  :         l2[i].L2_size   = SWAP16( l2[i].L2_size   );

  0007f	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00084	48 6b c0 10	 imul	 rax, rax, 16
  00088	48 8b 4c 24 40	 mov	 rcx, QWORD PTR l2$[rsp]
  0008d	0f b7 4c 01 0a	 movzx	 ecx, WORD PTR [rcx+rax+10]
  00092	e8 00 00 00 00	 call	 _byteswap_ushort
  00097	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  0009c	48 6b c9 10	 imul	 rcx, rcx, 16
  000a0	48 8b 54 24 40	 mov	 rdx, QWORD PTR l2$[rsp]
  000a5	66 89 44 0a 0a	 mov	 WORD PTR [rdx+rcx+10], ax

; 308  :     }

  000aa	e9 64 ff ff ff	 jmp	 $LN2@cckd64_swa
$LN3@cckd64_swa:

; 309  : }

  000af	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b3	c3		 ret	 0
cckd64_swapend_l2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil64.c
_TEXT	SEGMENT
i$ = 32
l1$ = 64
num_L1tab$ = 72
cckd64_swapend_l1 PROC

; 291  : {

$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 292  :     int  i;
; 293  :     for (i = 0; i < num_L1tab; i++)

  0000d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00015	eb 0a		 jmp	 SHORT $LN4@cckd64_swa
$LN2@cckd64_swa:
  00017	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0001b	ff c0		 inc	 eax
  0001d	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@cckd64_swa:
  00021	8b 44 24 48	 mov	 eax, DWORD PTR num_L1tab$[rsp]
  00025	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  00029	7d 23		 jge	 SHORT $LN3@cckd64_swa

; 294  :         l1[i] = SWAP64( l1[i] );

  0002b	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00030	48 8b 4c 24 40	 mov	 rcx, QWORD PTR l1$[rsp]
  00035	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00039	e8 00 00 00 00	 call	 _byteswap_uint64
  0003e	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00043	48 8b 54 24 40	 mov	 rdx, QWORD PTR l1$[rsp]
  00048	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax
  0004c	eb c9		 jmp	 SHORT $LN2@cckd64_swa
$LN3@cckd64_swa:

; 295  : }

  0004e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00052	c3		 ret	 0
cckd64_swapend_l1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil64.c
_TEXT	SEGMENT
cdevhdr$ = 48
cckd64_swapend_chdr PROC

; 271  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 272  :     /* fix the compressed ckd header */
; 273  :     cdevhdr->cdh_opts ^= CCKD_OPT_BIGEND;

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  0000e	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  00012	83 f0 02	 xor	 eax, 2
  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  0001a	88 41 03	 mov	 BYTE PTR [rcx+3], al

; 274  : 
; 275  :     cdevhdr->num_L1tab    = SWAP32( cdevhdr->num_L1tab    );

  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  00022	8b 48 04	 mov	 ecx, DWORD PTR [rax+4]
  00025	e8 00 00 00 00	 call	 _byteswap_ulong
  0002a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  0002f	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 276  :     cdevhdr->num_L2tab    = SWAP32( cdevhdr->num_L2tab    );

  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  00037	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  0003a	e8 00 00 00 00	 call	 _byteswap_ulong
  0003f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  00044	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 277  :     cdevhdr->cdh_size     = SWAP64( cdevhdr->cdh_size     );

  00047	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  0004c	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00050	e8 00 00 00 00	 call	 _byteswap_uint64
  00055	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  0005a	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 278  :     cdevhdr->cdh_used     = SWAP64( cdevhdr->cdh_used     );

  0005e	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  00063	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00067	e8 00 00 00 00	 call	 _byteswap_uint64
  0006c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  00071	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 279  :     cdevhdr->free_off     = SWAP64( cdevhdr->free_off     );

  00075	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  0007a	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0007e	e8 00 00 00 00	 call	 _byteswap_uint64
  00083	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  00088	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 280  :     cdevhdr->free_total   = SWAP64( cdevhdr->free_total   );

  0008c	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  00091	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  00095	e8 00 00 00 00	 call	 _byteswap_uint64
  0009a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  0009f	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 281  :     cdevhdr->free_largest = SWAP64( cdevhdr->free_largest );

  000a3	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  000a8	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  000ac	e8 00 00 00 00	 call	 _byteswap_uint64
  000b1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  000b6	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 282  :     cdevhdr->free_num     = SWAP64( cdevhdr->free_num     );

  000ba	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  000bf	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  000c3	e8 00 00 00 00	 call	 _byteswap_uint64
  000c8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  000cd	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 283  :     cdevhdr->free_imbed   = SWAP64( cdevhdr->free_imbed   );

  000d1	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  000d6	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  000da	e8 00 00 00 00	 call	 _byteswap_uint64
  000df	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  000e4	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 284  :     cdevhdr->cmp_parm     = SWAP16( cdevhdr->cmp_parm     );

  000e8	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  000ed	0f b7 48 4a	 movzx	 ecx, WORD PTR [rax+74]
  000f1	e8 00 00 00 00	 call	 _byteswap_ushort
  000f6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  000fb	66 89 41 4a	 mov	 WORD PTR [rcx+74], ax

; 285  : }

  000ff	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00103	c3		 ret	 0
cckd64_swapend_chdr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil64.c
_TEXT	SEGMENT
fd$ = 112
len$ = 116
rc$ = 120
i$ = 124
off$ = 128
l1$ = 136
swapend$ = 144
tv144 = 148
tv434 = 152
tv440 = 156
tv461 = 160
tv467 = 164
tv493 = 168
tv499 = 172
tv521 = 176
tv527 = 180
tv587 = 184
tv593 = 188
tv617 = 192
tv623 = 196
tv651 = 200
tv657 = 204
tv681 = 208
tv687 = 212
tv716 = 216
tv722 = 220
tv743 = 224
tv749 = 228
hipos$ = 232
tv141 = 240
cckd$ = 248
lopos$ = 256
tv578 = 264
tv608 = 272
tv642 = 280
tv672 = 288
tv95 = 296
tv156 = 304
tv188 = 312
tv210 = 320
tv258 = 328
tv279 = 336
tv304 = 344
tv337 = 352
tv358 = 360
tv384 = 368
tv405 = 376
tv424 = 384
tv429 = 392
tv451 = 400
tv456 = 408
tv482 = 416
tv488 = 424
tv510 = 432
tv516 = 440
tv582 = 448
tv612 = 456
tv646 = 464
tv676 = 472
tv706 = 480
tv711 = 488
tv733 = 496
tv738 = 504
freeblk$ = 512
fst$ = 528
cdevhdr$ = 592
l2$ = 1104
buf$1 = 5200
__$ArrayPad$ = 5264
dev$ = 5296
cckd64_swapend PROC

; 40   : {

$LN123:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	b8 a8 14 00 00	 mov	 eax, 5288		; 000014a8H
  0000a	e8 00 00 00 00	 call	 __chkstk
  0000f	48 2b e0	 sub	 rsp, rax
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 84 24 90
	14 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 41   : CCKD64_EXT       *cckd;                 /* -> cckd extension         */
; 42   : int               fd;                   /* File descriptor           */
; 43   : int               rc;                   /* Return code               */
; 44   : struct stat       fst;                  /* File status buffer        */
; 45   : int               i;                    /* Index                     */
; 46   : int               swapend;              /* 1=swap space              */
; 47   : int               len;                  /* Length                    */
; 48   : U64               off, lopos, hipos;    /* File offsets              */
; 49   : CCKD64_DEVHDR     cdevhdr;              /* Compressed ckd header     */
; 50   : CCKD64_L1ENT     *l1 = NULL;            /* Level 1 table             */

  00024	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR l1$[rsp], 0

; 51   : CCKD64_L2ENT      l2[256];              /* Level 2 table             */
; 52   : CCKD64_FREEBLK    freeblk;              /* Free block                */
; 53   : 
; 54   :     if (!dev->cckd64)

  00030	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00038	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  0003f	24 01		 and	 al, 1
  00041	0f b6 c0	 movzx	 eax, al
  00044	85 c0		 test	 eax, eax
  00046	75 12		 jne	 SHORT $LN11@cckd64_swa

; 55   :         return cckd_swapend( dev );

  00048	48 8b 8c 24 b0
	14 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00050	e8 00 00 00 00	 call	 cckd_swapend
  00055	e9 7d 16 00 00	 jmp	 $LN1@cckd64_swa
$LN11@cckd64_swa:

; 56   : 
; 57   :     /* Get fd */
; 58   :     cckd = dev->cckd_ext;

  0005a	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00062	48 8b 80 08 13
	00 00		 mov	 rax, QWORD PTR [rax+4872]
  00069	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR cckd$[rsp], rax

; 59   :     if (cckd == NULL)

  00071	48 83 bc 24 f8
	00 00 00 00	 cmp	 QWORD PTR cckd$[rsp], 0
  0007a	75 14		 jne	 SHORT $LN12@cckd64_swa

; 60   :         fd = dev->fd;

  0007c	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00084	8b 80 ac 01 00
	00		 mov	 eax, DWORD PTR [rax+428]
  0008a	89 44 24 70	 mov	 DWORD PTR fd$[rsp], eax
  0008e	eb 1f		 jmp	 SHORT $LN13@cckd64_swa
$LN12@cckd64_swa:

; 61   :     else
; 62   :         fd = cckd->fd[cckd->sfn];

  00090	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR cckd$[rsp]
  00098	48 63 40 3c	 movsxd	 rax, DWORD PTR [rax+60]
  0009c	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR cckd$[rsp]
  000a4	8b 84 81 f0 00
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+240]
  000ab	89 44 24 70	 mov	 DWORD PTR fd$[rsp], eax
$LN13@cckd64_swa:

; 63   : 
; 64   :     /* Get file size */
; 65   :     if (fstat (fd, &fst) < 0)

  000af	48 8d 94 24 10
	02 00 00	 lea	 rdx, QWORD PTR fst$[rsp]
  000b7	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  000bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fstat64
  000c1	85 c0		 test	 eax, eax
  000c3	7d 05		 jge	 SHORT $LN14@cckd64_swa

; 66   :         goto cswp_fstat_error;

  000c5	e9 1b 0a 00 00	 jmp	 $cswp_fstat_error$124
$LN14@cckd64_swa:

; 67   :     gui_fprintf (stderr, "SIZE=%"PRIu64"\n", (U64) fst.st_size);

  000ca	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  000d1	83 38 00	 cmp	 DWORD PTR [rax], 0
  000d4	74 23		 je	 SHORT $LN15@cckd64_swa
  000d6	b9 02 00 00 00	 mov	 ecx, 2
  000db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000e1	4c 8b 84 24 28
	02 00 00	 mov	 r8, QWORD PTR fst$[rsp+24]
  000e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168741
  000f0	48 8b c8	 mov	 rcx, rax
  000f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN15@cckd64_swa:

; 68   :     hipos = fst.st_size;

  000f9	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR fst$[rsp+24]
  00101	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR hipos$[rsp], rax

; 69   : 
; 70   :     /* Device header */
; 71   :     off = CCKD64_DEVHDR_POS;

  00109	48 c7 84 24 80
	00 00 00 00 02
	00 00		 mov	 QWORD PTR off$[rsp], 512 ; 00000200H

; 72   :     if (lseek (fd, off, SEEK_SET) < 0)

  00115	45 33 c0	 xor	 r8d, r8d
  00118	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  00120	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00124	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0012a	48 85 c0	 test	 rax, rax
  0012d	7d 05		 jge	 SHORT $LN16@cckd64_swa

; 73   :         goto cswp_lseek_error;

  0012f	e9 e7 0b 00 00	 jmp	 $cswp_lseek_error$125
$LN16@cckd64_swa:

; 74   :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  00134	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  0013b	83 38 00	 cmp	 DWORD PTR [rax], 0
  0013e	74 40		 je	 SHORT $LN17@cckd64_swa
  00140	41 b8 01 00 00
	00		 mov	 r8d, 1
  00146	33 d2		 xor	 edx, edx
  00148	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  0014c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00152	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv95[rsp], rax
  0015a	b9 02 00 00 00	 mov	 ecx, 2
  0015f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00165	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR tv95[rsp]
  0016d	4c 8b c1	 mov	 r8, rcx
  00170	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168744
  00177	48 8b c8	 mov	 rcx, rax
  0017a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN17@cckd64_swa:

; 75   :     len = CCKD64_DEVHDR_SIZE;

  00180	c7 44 24 74 00
	02 00 00	 mov	 DWORD PTR len$[rsp], 512 ; 00000200H

; 76   :     if ((rc = read (fd, &cdevhdr, len)) != len)

  00188	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  0018d	48 8d 94 24 50
	02 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  00195	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00199	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  0019f	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  001a3	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  001a7	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  001ab	74 05		 je	 SHORT $LN18@cckd64_swa

; 77   :         goto cswp_read_error;

  001ad	e9 b9 0d 00 00	 jmp	 $cswp_read_error$126
$LN18@cckd64_swa:

; 78   : 
; 79   :     swapend = (cdevhdr.cdh_opts & CCKD_OPT_BIGEND) != cckd_def_opt_bigend();

  001b2	0f b6 84 24 53
	02 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  001ba	83 e0 02	 and	 eax, 2
  001bd	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv141[rsp], eax
  001c4	e8 00 00 00 00	 call	 cckd_def_opt_bigend
  001c9	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR tv141[rsp]
  001d0	3b c8		 cmp	 ecx, eax
  001d2	74 0d		 je	 SHORT $LN73@cckd64_swa
  001d4	c7 84 24 94 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv144[rsp], 1
  001df	eb 0b		 jmp	 SHORT $LN74@cckd64_swa
$LN73@cckd64_swa:
  001e1	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv144[rsp], 0
$LN74@cckd64_swa:
  001ec	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR tv144[rsp]
  001f3	89 84 24 90 00
	00 00		 mov	 DWORD PTR swapend$[rsp], eax

; 80   : 
; 81   :     cckd64_swapend_chdr (&cdevhdr);

  001fa	48 8d 8c 24 50
	02 00 00	 lea	 rcx, QWORD PTR cdevhdr$[rsp]
  00202	e8 00 00 00 00	 call	 cckd64_swapend_chdr

; 82   : 
; 83   :     cdevhdr.cdh_opts |= CCKD_OPT_OPENRW;

  00207	0f b6 84 24 53
	02 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  0020f	83 c8 40	 or	 eax, 64			; 00000040H
  00212	88 84 24 53 02
	00 00		 mov	 BYTE PTR cdevhdr$[rsp+3], al

; 84   :     if (lseek (fd, off, SEEK_SET) < 0)

  00219	45 33 c0	 xor	 r8d, r8d
  0021c	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  00224	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00228	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0022e	48 85 c0	 test	 rax, rax
  00231	7d 05		 jge	 SHORT $LN19@cckd64_swa

; 85   :         goto cswp_lseek_error;

  00233	e9 e3 0a 00 00	 jmp	 $cswp_lseek_error$125
$LN19@cckd64_swa:

; 86   :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  00238	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  0023f	83 38 00	 cmp	 DWORD PTR [rax], 0
  00242	74 40		 je	 SHORT $LN20@cckd64_swa
  00244	41 b8 01 00 00
	00		 mov	 r8d, 1
  0024a	33 d2		 xor	 edx, edx
  0024c	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00250	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00256	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv156[rsp], rax
  0025e	b9 02 00 00 00	 mov	 ecx, 2
  00263	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00269	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR tv156[rsp]
  00271	4c 8b c1	 mov	 r8, rcx
  00274	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168748
  0027b	48 8b c8	 mov	 rcx, rax
  0027e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN20@cckd64_swa:

; 87   :     if ((rc = write (fd, &cdevhdr, len)) != len)

  00284	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  00289	48 8d 94 24 50
	02 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  00291	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00295	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  0029b	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  0029f	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  002a3	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  002a7	74 05		 je	 SHORT $LN21@cckd64_swa

; 88   :         goto cswp_write_error;

  002a9	e9 3b 0f 00 00	 jmp	 $cswp_write_error$127
$LN21@cckd64_swa:

; 89   : 
; 90   :     if (!swapend)

  002ae	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR swapend$[rsp], 0
  002b6	75 0d		 jne	 SHORT $LN22@cckd64_swa

; 91   :         cckd64_swapend_chdr (&cdevhdr);

  002b8	48 8d 8c 24 50
	02 00 00	 lea	 rcx, QWORD PTR cdevhdr$[rsp]
  002c0	e8 00 00 00 00	 call	 cckd64_swapend_chdr
$LN22@cckd64_swa:

; 92   : 
; 93   :     /* l1 table */
; 94   :     len = cdevhdr.num_L1tab * CCKD64_L1ENT_SIZE;

  002c5	48 63 84 24 54
	02 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  002cd	48 c1 e0 03	 shl	 rax, 3
  002d1	89 44 24 74	 mov	 DWORD PTR len$[rsp], eax

; 95   :     if ((l1 = malloc (len)) == NULL)

  002d5	48 63 44 24 74	 movsxd	 rax, DWORD PTR len$[rsp]
  002da	48 8b c8	 mov	 rcx, rax
  002dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  002e3	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR l1$[rsp], rax
  002eb	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR l1$[rsp], 0
  002f4	75 05		 jne	 SHORT $LN23@cckd64_swa

; 96   :         goto cswp_malloc_error;

  002f6	e9 6c 11 00 00	 jmp	 $cswp_malloc_error$128
$LN23@cckd64_swa:

; 97   :     off = CCKD64_L1TAB_POS;

  002fb	48 c7 84 24 80
	00 00 00 00 04
	00 00		 mov	 QWORD PTR off$[rsp], 1024 ; 00000400H

; 98   :     if (lseek (fd, off, SEEK_SET) < 0)

  00307	45 33 c0	 xor	 r8d, r8d
  0030a	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  00312	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00316	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0031c	48 85 c0	 test	 rax, rax
  0031f	7d 05		 jge	 SHORT $LN24@cckd64_swa

; 99   :         goto cswp_lseek_error;

  00321	e9 f5 09 00 00	 jmp	 $cswp_lseek_error$125
$LN24@cckd64_swa:

; 100  :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  00326	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  0032d	83 38 00	 cmp	 DWORD PTR [rax], 0
  00330	74 40		 je	 SHORT $LN25@cckd64_swa
  00332	41 b8 01 00 00
	00		 mov	 r8d, 1
  00338	33 d2		 xor	 edx, edx
  0033a	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  0033e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00344	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv188[rsp], rax
  0034c	b9 02 00 00 00	 mov	 ecx, 2
  00351	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00357	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR tv188[rsp]
  0035f	4c 8b c1	 mov	 r8, rcx
  00362	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168754
  00369	48 8b c8	 mov	 rcx, rax
  0036c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN25@cckd64_swa:

; 101  :     if ((rc = read (fd, l1, len)) != len)

  00372	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  00377	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  0037f	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00383	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00389	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  0038d	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  00391	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  00395	74 05		 je	 SHORT $LN26@cckd64_swa

; 102  :         goto cswp_read_error;

  00397	e9 cf 0b 00 00	 jmp	 $cswp_read_error$126
$LN26@cckd64_swa:

; 103  : 
; 104  :     cckd64_swapend_l1 (l1, cdevhdr.num_L1tab);

  0039c	8b 94 24 54 02
	00 00		 mov	 edx, DWORD PTR cdevhdr$[rsp+4]
  003a3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  003ab	e8 00 00 00 00	 call	 cckd64_swapend_l1

; 105  : 
; 106  :     if (lseek (fd, off, SEEK_SET) < 0)

  003b0	45 33 c0	 xor	 r8d, r8d
  003b3	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  003bb	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  003bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  003c5	48 85 c0	 test	 rax, rax
  003c8	7d 05		 jge	 SHORT $LN27@cckd64_swa

; 107  :         goto cswp_lseek_error;

  003ca	e9 4c 09 00 00	 jmp	 $cswp_lseek_error$125
$LN27@cckd64_swa:

; 108  :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  003cf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  003d6	83 38 00	 cmp	 DWORD PTR [rax], 0
  003d9	74 40		 je	 SHORT $LN28@cckd64_swa
  003db	41 b8 01 00 00
	00		 mov	 r8d, 1
  003e1	33 d2		 xor	 edx, edx
  003e3	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  003e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  003ed	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv210[rsp], rax
  003f5	b9 02 00 00 00	 mov	 ecx, 2
  003fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00400	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR tv210[rsp]
  00408	4c 8b c1	 mov	 r8, rcx
  0040b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168758
  00412	48 8b c8	 mov	 rcx, rax
  00415	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN28@cckd64_swa:

; 109  :     if ((rc = write (fd, l1, len)) != len)

  0041b	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  00420	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  00428	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  0042c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  00432	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  00436	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  0043a	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  0043e	74 05		 je	 SHORT $LN29@cckd64_swa

; 110  :         goto cswp_write_error;

  00440	e9 a4 0d 00 00	 jmp	 $cswp_write_error$127
$LN29@cckd64_swa:

; 111  : 
; 112  :     if (!swapend)

  00445	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR swapend$[rsp], 0
  0044d	75 14		 jne	 SHORT $LN30@cckd64_swa

; 113  :         cckd64_swapend_l1 (l1, cdevhdr.num_L1tab);

  0044f	8b 94 24 54 02
	00 00		 mov	 edx, DWORD PTR cdevhdr$[rsp+4]
  00456	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  0045e	e8 00 00 00 00	 call	 cckd64_swapend_l1
$LN30@cckd64_swa:

; 114  : 
; 115  :     lopos = CCKD64_L1TAB_POS + len;

  00463	48 63 44 24 74	 movsxd	 rax, DWORD PTR len$[rsp]
  00468	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  0046e	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR lopos$[rsp], rax

; 116  : 
; 117  :     /* l2 tables */
; 118  :     for (i = 0; i < cdevhdr.num_L1tab; i++)

  00476	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0047e	eb 0a		 jmp	 SHORT $LN4@cckd64_swa
$LN2@cckd64_swa:
  00480	8b 44 24 7c	 mov	 eax, DWORD PTR i$[rsp]
  00484	ff c0		 inc	 eax
  00486	89 44 24 7c	 mov	 DWORD PTR i$[rsp], eax
$LN4@cckd64_swa:
  0048a	8b 84 24 54 02
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  00491	39 44 24 7c	 cmp	 DWORD PTR i$[rsp], eax
  00495	0f 8d cd 01 00
	00		 jge	 $LN3@cckd64_swa

; 119  :     {
; 120  :         if (0
; 121  :             || l1[i] == CCKD64_NOSIZE
; 122  :             || l1[i] == CCKD64_MAXSIZE
; 123  :             || l1[i] < lopos
; 124  :             || l1[i] > hipos - CCKD64_L2TAB_SIZE

  0049b	33 c0		 xor	 eax, eax
  0049d	85 c0		 test	 eax, eax
  0049f	75 65		 jne	 SHORT $LN32@cckd64_swa
  004a1	48 63 44 24 7c	 movsxd	 rax, DWORD PTR i$[rsp]
  004a6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  004ae	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  004b3	74 51		 je	 SHORT $LN32@cckd64_swa
  004b5	48 63 44 24 7c	 movsxd	 rax, DWORD PTR i$[rsp]
  004ba	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  004c2	48 83 3c c1 ff	 cmp	 QWORD PTR [rcx+rax*8], -1
  004c7	74 3d		 je	 SHORT $LN32@cckd64_swa
  004c9	48 63 44 24 7c	 movsxd	 rax, DWORD PTR i$[rsp]
  004ce	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  004d6	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR lopos$[rsp]
  004de	48 39 14 c1	 cmp	 QWORD PTR [rcx+rax*8], rdx
  004e2	72 22		 jb	 SHORT $LN32@cckd64_swa
  004e4	48 63 44 24 7c	 movsxd	 rax, DWORD PTR i$[rsp]
  004e9	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR hipos$[rsp]
  004f1	48 81 e9 00 10
	00 00		 sub	 rcx, 4096		; 00001000H
  004f8	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  00500	48 39 0c c2	 cmp	 QWORD PTR [rdx+rax*8], rcx
  00504	76 05		 jbe	 SHORT $LN31@cckd64_swa
$LN32@cckd64_swa:

; 125  :         )
; 126  :             continue;

  00506	e9 75 ff ff ff	 jmp	 $LN2@cckd64_swa
$LN31@cckd64_swa:

; 127  : 
; 128  :         off = l1[i];

  0050b	48 63 44 24 7c	 movsxd	 rax, DWORD PTR i$[rsp]
  00510	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  00518	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  0051c	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 129  :         if (lseek (fd, off, SEEK_SET) < 0)

  00524	45 33 c0	 xor	 r8d, r8d
  00527	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  0052f	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00533	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00539	48 85 c0	 test	 rax, rax
  0053c	7d 05		 jge	 SHORT $LN33@cckd64_swa

; 130  :             goto cswp_lseek_error;

  0053e	e9 d8 07 00 00	 jmp	 $cswp_lseek_error$125
$LN33@cckd64_swa:

; 131  :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  00543	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  0054a	83 38 00	 cmp	 DWORD PTR [rax], 0
  0054d	74 40		 je	 SHORT $LN34@cckd64_swa
  0054f	41 b8 01 00 00
	00		 mov	 r8d, 1
  00555	33 d2		 xor	 edx, edx
  00557	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  0055b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00561	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv258[rsp], rax
  00569	b9 02 00 00 00	 mov	 ecx, 2
  0056e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00574	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR tv258[rsp]
  0057c	4c 8b c1	 mov	 r8, rcx
  0057f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168765
  00586	48 8b c8	 mov	 rcx, rax
  00589	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN34@cckd64_swa:

; 132  :         len = CCKD64_L2TAB_SIZE;

  0058f	c7 44 24 74 00
	10 00 00	 mov	 DWORD PTR len$[rsp], 4096 ; 00001000H

; 133  :         if ((rc = read (fd, l2, len)) != len)

  00597	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  0059c	48 8d 94 24 50
	04 00 00	 lea	 rdx, QWORD PTR l2$[rsp]
  005a4	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  005a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  005ae	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  005b2	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  005b6	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  005ba	74 05		 je	 SHORT $LN35@cckd64_swa

; 134  :             goto cswp_read_error;

  005bc	e9 aa 09 00 00	 jmp	 $cswp_read_error$126
$LN35@cckd64_swa:

; 135  : 
; 136  :         cckd64_swapend_l2 (l2);

  005c1	48 8d 8c 24 50
	04 00 00	 lea	 rcx, QWORD PTR l2$[rsp]
  005c9	e8 00 00 00 00	 call	 cckd64_swapend_l2

; 137  : 
; 138  :         if (lseek (fd, off, SEEK_SET) < 0)

  005ce	45 33 c0	 xor	 r8d, r8d
  005d1	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  005d9	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  005dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  005e3	48 85 c0	 test	 rax, rax
  005e6	7d 05		 jge	 SHORT $LN36@cckd64_swa

; 139  :             goto cswp_lseek_error;

  005e8	e9 2e 07 00 00	 jmp	 $cswp_lseek_error$125
$LN36@cckd64_swa:

; 140  :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  005ed	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  005f4	83 38 00	 cmp	 DWORD PTR [rax], 0
  005f7	74 40		 je	 SHORT $LN37@cckd64_swa
  005f9	41 b8 01 00 00
	00		 mov	 r8d, 1
  005ff	33 d2		 xor	 edx, edx
  00601	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00605	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0060b	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv279[rsp], rax
  00613	b9 02 00 00 00	 mov	 ecx, 2
  00618	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0061e	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR tv279[rsp]
  00626	4c 8b c1	 mov	 r8, rcx
  00629	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168769
  00630	48 8b c8	 mov	 rcx, rax
  00633	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN37@cckd64_swa:

; 141  :         if ((rc = write (fd, l2, len)) != len)

  00639	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  0063e	48 8d 94 24 50
	04 00 00	 lea	 rdx, QWORD PTR l2$[rsp]
  00646	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  0064a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  00650	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  00654	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  00658	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  0065c	74 05		 je	 SHORT $LN38@cckd64_swa

; 142  :             goto cswp_write_error;

  0065e	e9 86 0b 00 00	 jmp	 $cswp_write_error$127
$LN38@cckd64_swa:

; 143  :     }

  00663	e9 18 fe ff ff	 jmp	 $LN2@cckd64_swa
$LN3@cckd64_swa:

; 144  : 
; 145  :     free (l1);

  00668	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  00670	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 146  :     l1 = NULL;

  00676	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR l1$[rsp], 0

; 147  : 
; 148  :     /* free space */
; 149  :     if (cdevhdr.free_off && cdevhdr.free_off >= lopos
; 150  :      && cdevhdr.free_off <= hipos - CCKD64_FREEBLK_SIZE)

  00682	48 83 bc 24 70
	02 00 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+32], 0
  0068b	0f 84 4d 04 00
	00		 je	 $LN39@cckd64_swa
  00691	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR lopos$[rsp]
  00699	48 39 84 24 70
	02 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+32], rax
  006a1	0f 82 37 04 00
	00		 jb	 $LN39@cckd64_swa
  006a7	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR hipos$[rsp]
  006af	48 83 e8 10	 sub	 rax, 16
  006b3	48 39 84 24 70
	02 00 00	 cmp	 QWORD PTR cdevhdr$[rsp+32], rax
  006bb	0f 87 1d 04 00
	00		 ja	 $LN39@cckd64_swa

; 151  :     {
; 152  :         off = cdevhdr.free_off;

  006c1	48 8b 84 24 70
	02 00 00	 mov	 rax, QWORD PTR cdevhdr$[rsp+32]
  006c9	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 153  :         if (lseek (fd, off, SEEK_SET) < 0)

  006d1	45 33 c0	 xor	 r8d, r8d
  006d4	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  006dc	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  006e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  006e6	48 85 c0	 test	 rax, rax
  006e9	7d 05		 jge	 SHORT $LN40@cckd64_swa

; 154  :             goto cswp_lseek_error;

  006eb	e9 2b 06 00 00	 jmp	 $cswp_lseek_error$125
$LN40@cckd64_swa:

; 155  :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  006f0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  006f7	83 38 00	 cmp	 DWORD PTR [rax], 0
  006fa	74 40		 je	 SHORT $LN41@cckd64_swa
  006fc	41 b8 01 00 00
	00		 mov	 r8d, 1
  00702	33 d2		 xor	 edx, edx
  00704	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00708	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0070e	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv304[rsp], rax
  00716	b9 02 00 00 00	 mov	 ecx, 2
  0071b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00721	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tv304[rsp]
  00729	4c 8b c1	 mov	 r8, rcx
  0072c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168774
  00733	48 8b c8	 mov	 rcx, rax
  00736	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN41@cckd64_swa:

; 156  :         len = CCKD64_FREEBLK_SIZE;

  0073c	c7 44 24 74 10
	00 00 00	 mov	 DWORD PTR len$[rsp], 16

; 157  :         if ((rc = read (fd, &freeblk, len)) != len)

  00744	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  00749	48 8d 94 24 00
	02 00 00	 lea	 rdx, QWORD PTR freeblk$[rsp]
  00751	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00755	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  0075b	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  0075f	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  00763	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  00767	74 05		 je	 SHORT $LN42@cckd64_swa

; 158  :             goto cswp_read_error;

  00769	e9 fd 07 00 00	 jmp	 $cswp_read_error$126
$LN42@cckd64_swa:

; 159  :         if (memcmp(&freeblk, "FREE_BLK", 8) == 0)

  0076e	41 b8 08 00 00
	00		 mov	 r8d, 8
  00774	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168778
  0077b	48 8d 8c 24 00
	02 00 00	 lea	 rcx, QWORD PTR freeblk$[rsp]
  00783	e8 00 00 00 00	 call	 memcmp
  00788	85 c0		 test	 eax, eax
  0078a	0f 85 97 01 00
	00		 jne	 $LN43@cckd64_swa

; 160  :         {
; 161  :             /* New format free space */
; 162  :             for (i = 0; i < cdevhdr.free_num; i++)

  00790	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00798	eb 0a		 jmp	 SHORT $LN7@cckd64_swa
$LN5@cckd64_swa:
  0079a	8b 44 24 7c	 mov	 eax, DWORD PTR i$[rsp]
  0079e	ff c0		 inc	 eax
  007a0	89 44 24 7c	 mov	 DWORD PTR i$[rsp], eax
$LN7@cckd64_swa:
  007a4	48 63 44 24 7c	 movsxd	 rax, DWORD PTR i$[rsp]
  007a9	48 3b 84 24 88
	02 00 00	 cmp	 rax, QWORD PTR cdevhdr$[rsp+56]
  007b1	0f 8d 6b 01 00
	00		 jge	 $LN6@cckd64_swa

; 163  :             {
; 164  :                 off += CCKD64_FREEBLK_SIZE;

  007b7	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR off$[rsp]
  007bf	48 83 c0 10	 add	 rax, 16
  007c3	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 165  :                 if (off > hipos - CCKD64_FREEBLK_SIZE)

  007cb	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR hipos$[rsp]
  007d3	48 83 e8 10	 sub	 rax, 16
  007d7	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR off$[rsp], rax
  007df	76 05		 jbe	 SHORT $LN45@cckd64_swa

; 166  :                     break;

  007e1	e9 3c 01 00 00	 jmp	 $LN6@cckd64_swa
$LN45@cckd64_swa:

; 167  :                 if (lseek (fd, off, SEEK_SET) < 0)

  007e6	45 33 c0	 xor	 r8d, r8d
  007e9	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  007f1	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  007f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  007fb	48 85 c0	 test	 rax, rax
  007fe	7d 05		 jge	 SHORT $LN46@cckd64_swa

; 168  :                     goto cswp_lseek_error;

  00800	e9 16 05 00 00	 jmp	 $cswp_lseek_error$125
$LN46@cckd64_swa:

; 169  :                 gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  00805	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  0080c	83 38 00	 cmp	 DWORD PTR [rax], 0
  0080f	74 40		 je	 SHORT $LN47@cckd64_swa
  00811	41 b8 01 00 00
	00		 mov	 r8d, 1
  00817	33 d2		 xor	 edx, edx
  00819	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  0081d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00823	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv337[rsp], rax
  0082b	b9 02 00 00 00	 mov	 ecx, 2
  00830	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00836	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR tv337[rsp]
  0083e	4c 8b c1	 mov	 r8, rcx
  00841	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168782
  00848	48 8b c8	 mov	 rcx, rax
  0084b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN47@cckd64_swa:

; 170  :                 if ((rc = read (fd, &freeblk, len)) != len)

  00851	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  00856	48 8d 94 24 00
	02 00 00	 lea	 rdx, QWORD PTR freeblk$[rsp]
  0085e	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00862	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00868	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  0086c	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  00870	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  00874	74 05		 je	 SHORT $LN48@cckd64_swa

; 171  :                     goto cswp_read_error;

  00876	e9 f0 06 00 00	 jmp	 $cswp_read_error$126
$LN48@cckd64_swa:

; 172  : 
; 173  :                 cckd64_swapend_free (&freeblk);

  0087b	48 8d 8c 24 00
	02 00 00	 lea	 rcx, QWORD PTR freeblk$[rsp]
  00883	e8 00 00 00 00	 call	 cckd64_swapend_free

; 174  : 
; 175  :                 if (lseek (fd, off, SEEK_SET) < 0)

  00888	45 33 c0	 xor	 r8d, r8d
  0088b	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  00893	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00897	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0089d	48 85 c0	 test	 rax, rax
  008a0	7d 05		 jge	 SHORT $LN49@cckd64_swa

; 176  :                     goto cswp_lseek_error;

  008a2	e9 74 04 00 00	 jmp	 $cswp_lseek_error$125
$LN49@cckd64_swa:

; 177  :                 gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  008a7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  008ae	83 38 00	 cmp	 DWORD PTR [rax], 0
  008b1	74 40		 je	 SHORT $LN50@cckd64_swa
  008b3	41 b8 01 00 00
	00		 mov	 r8d, 1
  008b9	33 d2		 xor	 edx, edx
  008bb	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  008bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  008c5	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv358[rsp], rax
  008cd	b9 02 00 00 00	 mov	 ecx, 2
  008d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008d8	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR tv358[rsp]
  008e0	4c 8b c1	 mov	 r8, rcx
  008e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168786
  008ea	48 8b c8	 mov	 rcx, rax
  008ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN50@cckd64_swa:

; 178  :                 if ((rc = write (fd, &freeblk, len)) != len)

  008f3	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  008f8	48 8d 94 24 00
	02 00 00	 lea	 rdx, QWORD PTR freeblk$[rsp]
  00900	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00904	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  0090a	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  0090e	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  00912	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  00916	74 05		 je	 SHORT $LN51@cckd64_swa

; 179  :                     goto cswp_write_error;

  00918	e9 cc 08 00 00	 jmp	 $cswp_write_error$127
$LN51@cckd64_swa:

; 180  :             } /* for each free space */

  0091d	e9 78 fe ff ff	 jmp	 $LN5@cckd64_swa
$LN6@cckd64_swa:

; 181  :         } /* if new format free space */

  00922	e9 b7 01 00 00	 jmp	 $LN44@cckd64_swa
$LN43@cckd64_swa:

; 182  :         else
; 183  :         {
; 184  :             /* Old format free space */
; 185  :             for (i = 0; i < cdevhdr.free_num; i++)

  00927	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0092f	eb 0a		 jmp	 SHORT $LN10@cckd64_swa
$LN8@cckd64_swa:
  00931	8b 44 24 7c	 mov	 eax, DWORD PTR i$[rsp]
  00935	ff c0		 inc	 eax
  00937	89 44 24 7c	 mov	 DWORD PTR i$[rsp], eax
$LN10@cckd64_swa:
  0093b	48 63 44 24 7c	 movsxd	 rax, DWORD PTR i$[rsp]
  00940	48 3b 84 24 88
	02 00 00	 cmp	 rax, QWORD PTR cdevhdr$[rsp+56]
  00948	0f 8d 90 01 00
	00		 jge	 $LN9@cckd64_swa

; 186  :             {
; 187  :                 if (off < lopos || off > hipos - CCKD64_FREEBLK_SIZE)

  0094e	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR lopos$[rsp]
  00956	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR off$[rsp], rax
  0095e	72 16		 jb	 SHORT $LN53@cckd64_swa
  00960	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR hipos$[rsp]
  00968	48 83 e8 10	 sub	 rax, 16
  0096c	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR off$[rsp], rax
  00974	76 05		 jbe	 SHORT $LN52@cckd64_swa
$LN53@cckd64_swa:

; 188  :                     break;

  00976	e9 63 01 00 00	 jmp	 $LN9@cckd64_swa
$LN52@cckd64_swa:

; 189  :                 if (lseek (fd, off, SEEK_SET) < 0)

  0097b	45 33 c0	 xor	 r8d, r8d
  0097e	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  00986	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  0098a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00990	48 85 c0	 test	 rax, rax
  00993	7d 05		 jge	 SHORT $LN54@cckd64_swa

; 190  :                     goto cswp_lseek_error;

  00995	e9 81 03 00 00	 jmp	 $cswp_lseek_error$125
$LN54@cckd64_swa:

; 191  :                 gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  0099a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  009a1	83 38 00	 cmp	 DWORD PTR [rax], 0
  009a4	74 40		 je	 SHORT $LN55@cckd64_swa
  009a6	41 b8 01 00 00
	00		 mov	 r8d, 1
  009ac	33 d2		 xor	 edx, edx
  009ae	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  009b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  009b8	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR tv384[rsp], rax
  009c0	b9 02 00 00 00	 mov	 ecx, 2
  009c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009cb	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR tv384[rsp]
  009d3	4c 8b c1	 mov	 r8, rcx
  009d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168792
  009dd	48 8b c8	 mov	 rcx, rax
  009e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN55@cckd64_swa:

; 192  :                 if ((rc = read (fd, &freeblk, len)) != len)

  009e6	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  009eb	48 8d 94 24 00
	02 00 00	 lea	 rdx, QWORD PTR freeblk$[rsp]
  009f3	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  009f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  009fd	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  00a01	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  00a05	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  00a09	74 05		 je	 SHORT $LN56@cckd64_swa

; 193  :                     goto cswp_read_error;

  00a0b	e9 5b 05 00 00	 jmp	 $cswp_read_error$126
$LN56@cckd64_swa:

; 194  : 
; 195  :                 cckd64_swapend_free (&freeblk);

  00a10	48 8d 8c 24 00
	02 00 00	 lea	 rcx, QWORD PTR freeblk$[rsp]
  00a18	e8 00 00 00 00	 call	 cckd64_swapend_free

; 196  : 
; 197  :                 if (lseek (fd, off, SEEK_SET) < 0)

  00a1d	45 33 c0	 xor	 r8d, r8d
  00a20	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  00a28	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00a2c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00a32	48 85 c0	 test	 rax, rax
  00a35	7d 05		 jge	 SHORT $LN57@cckd64_swa

; 198  :                     goto cswp_lseek_error;

  00a37	e9 df 02 00 00	 jmp	 $cswp_lseek_error$125
$LN57@cckd64_swa:

; 199  :                 gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  00a3c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00a43	83 38 00	 cmp	 DWORD PTR [rax], 0
  00a46	74 40		 je	 SHORT $LN58@cckd64_swa
  00a48	41 b8 01 00 00
	00		 mov	 r8d, 1
  00a4e	33 d2		 xor	 edx, edx
  00a50	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00a54	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00a5a	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv405[rsp], rax
  00a62	b9 02 00 00 00	 mov	 ecx, 2
  00a67	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a6d	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR tv405[rsp]
  00a75	4c 8b c1	 mov	 r8, rcx
  00a78	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168796
  00a7f	48 8b c8	 mov	 rcx, rax
  00a82	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN58@cckd64_swa:

; 200  :                 if ((rc = write (fd, &freeblk, len)) != len)

  00a88	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  00a8d	48 8d 94 24 00
	02 00 00	 lea	 rdx, QWORD PTR freeblk$[rsp]
  00a95	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00a99	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  00a9f	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  00aa3	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  00aa7	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  00aab	74 05		 je	 SHORT $LN59@cckd64_swa

; 201  :                     goto cswp_write_error;

  00aad	e9 37 07 00 00	 jmp	 $cswp_write_error$127
$LN59@cckd64_swa:

; 202  : 
; 203  :                 if (!swapend)

  00ab2	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR swapend$[rsp], 0
  00aba	75 0d		 jne	 SHORT $LN60@cckd64_swa

; 204  :                     cckd64_swapend_free (&freeblk);

  00abc	48 8d 8c 24 00
	02 00 00	 lea	 rcx, QWORD PTR freeblk$[rsp]
  00ac4	e8 00 00 00 00	 call	 cckd64_swapend_free
$LN60@cckd64_swa:

; 205  : 
; 206  :                 off = freeblk.fb_offnxt;

  00ac9	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR freeblk$[rsp]
  00ad1	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 207  :             } /* for each free space */

  00ad9	e9 53 fe ff ff	 jmp	 $LN8@cckd64_swa
$LN9@cckd64_swa:
$LN44@cckd64_swa:
$LN39@cckd64_swa:

; 208  :         } /* else old format free space */
; 209  :     } /* if free space */
; 210  : 
; 211  :     return 0;

  00ade	33 c0		 xor	 eax, eax
  00ae0	e9 f2 0b 00 00	 jmp	 $LN1@cckd64_swa
$cswp_fstat_error$124:

; 212  : 
; 213  :     /* error exits */
; 214  : cswp_fstat_error:
; 215  :     if(dev->batch)

  00ae5	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00aed	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00af3	c1 e8 0a	 shr	 eax, 10
  00af6	83 e0 01	 and	 eax, 1
  00af9	85 c0		 test	 eax, eax
  00afb	0f 84 0d 01 00
	00		 je	 $LN61@cckd64_swa

; 216  :         FWRMSG( stdout, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  00b01	48 83 bc 24 b0
	14 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00b0a	74 15		 je	 SHORT $LN75@cckd64_swa
  00b0c	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b14	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00b18	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv434[rsp], eax
  00b1f	eb 0b		 jmp	 SHORT $LN76@cckd64_swa
$LN75@cckd64_swa:
  00b21	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv434[rsp], 0
$LN76@cckd64_swa:
  00b2c	48 83 bc 24 b0
	14 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00b35	74 17		 je	 SHORT $LN77@cckd64_swa
  00b37	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b3f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00b43	d1 f8		 sar	 eax, 1
  00b45	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv440[rsp], eax
  00b4c	eb 0b		 jmp	 SHORT $LN78@cckd64_swa
$LN77@cckd64_swa:
  00b4e	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv440[rsp], 0
$LN78@cckd64_swa:
  00b59	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00b5f	8b 08		 mov	 ecx, DWORD PTR [rax]
  00b61	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00b67	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR tv424[rsp], rax
  00b6f	48 8b 8c 24 b0
	14 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00b77	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00b7e	48 89 8c 24 88
	01 00 00	 mov	 QWORD PTR tv429[rsp], rcx
  00b86	b9 01 00 00 00	 mov	 ecx, 1
  00b8b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b91	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR tv424[rsp]
  00b99	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00b9e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168801
  00ba5	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00baa	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR tv429[rsp]
  00bb2	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00bb7	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv434[rsp]
  00bbe	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00bc2	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv440[rsp]
  00bc9	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00bcd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168802
  00bd4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00bd9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168803
  00be0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00be5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00bea	41 b9 03 00 00
	00		 mov	 r9d, 3
  00bf0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168804
  00bf7	ba d9 00 00 00	 mov	 edx, 217		; 000000d9H
  00bfc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168805
  00c03	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00c09	e9 08 01 00 00	 jmp	 $LN62@cckd64_swa
$LN61@cckd64_swa:

; 217  :                 "fstat()", strerror( errno ));
; 218  :     else
; 219  :         WRMSG( HHC00354, "E", LCSS_DEVNUM, dev->filename,

  00c0e	48 83 bc 24 b0
	14 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00c17	74 15		 je	 SHORT $LN79@cckd64_swa
  00c19	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c21	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00c25	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv461[rsp], eax
  00c2c	eb 0b		 jmp	 SHORT $LN80@cckd64_swa
$LN79@cckd64_swa:
  00c2e	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv461[rsp], 0
$LN80@cckd64_swa:
  00c39	48 83 bc 24 b0
	14 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00c42	74 17		 je	 SHORT $LN81@cckd64_swa
  00c44	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c4c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00c50	d1 f8		 sar	 eax, 1
  00c52	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv467[rsp], eax
  00c59	eb 0b		 jmp	 SHORT $LN82@cckd64_swa
$LN81@cckd64_swa:
  00c5b	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv467[rsp], 0
$LN82@cckd64_swa:
  00c66	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00c6c	8b 08		 mov	 ecx, DWORD PTR [rax]
  00c6e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00c74	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR tv451[rsp], rax
  00c7c	48 8b 8c 24 b0
	14 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00c84	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00c8b	48 89 8c 24 98
	01 00 00	 mov	 QWORD PTR tv456[rsp], rcx
  00c93	b9 01 00 00 00	 mov	 ecx, 1
  00c98	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c9e	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR tv451[rsp]
  00ca6	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00cab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168806
  00cb2	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00cb7	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR tv456[rsp]
  00cbf	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00cc4	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv461[rsp]
  00ccb	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00ccf	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv467[rsp]
  00cd6	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00cda	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168807
  00ce1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ce6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168808
  00ced	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00cf2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00cf7	41 b9 03 00 00
	00		 mov	 r9d, 3
  00cfd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168809
  00d04	ba dc 00 00 00	 mov	 edx, 220		; 000000dcH
  00d09	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168810
  00d10	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN62@cckd64_swa:

; 220  :               "fstat()", strerror( errno ));
; 221  :     goto cswp_error;

  00d16	e9 9e 09 00 00	 jmp	 $cswp_error$129
$cswp_lseek_error$125:

; 222  : 
; 223  : cswp_lseek_error:
; 224  :     if(dev->batch)

  00d1b	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00d23	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00d29	c1 e8 0a	 shr	 eax, 10
  00d2c	83 e0 01	 and	 eax, 1
  00d2f	85 c0		 test	 eax, eax
  00d31	0f 84 1a 01 00
	00		 je	 $LN63@cckd64_swa

; 225  :         FWRMSG( stdout, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  00d37	48 83 bc 24 b0
	14 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00d40	74 15		 je	 SHORT $LN83@cckd64_swa
  00d42	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00d4a	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00d4e	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv493[rsp], eax
  00d55	eb 0b		 jmp	 SHORT $LN84@cckd64_swa
$LN83@cckd64_swa:
  00d57	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv493[rsp], 0
$LN84@cckd64_swa:
  00d62	48 83 bc 24 b0
	14 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00d6b	74 17		 je	 SHORT $LN85@cckd64_swa
  00d6d	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00d75	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00d79	d1 f8		 sar	 eax, 1
  00d7b	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv499[rsp], eax
  00d82	eb 0b		 jmp	 SHORT $LN86@cckd64_swa
$LN85@cckd64_swa:
  00d84	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv499[rsp], 0
$LN86@cckd64_swa:
  00d8f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00d95	8b 08		 mov	 ecx, DWORD PTR [rax]
  00d97	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00d9d	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR tv482[rsp], rax
  00da5	48 8b 8c 24 b0
	14 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00dad	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00db4	48 89 8c 24 a8
	01 00 00	 mov	 QWORD PTR tv488[rsp], rcx
  00dbc	b9 01 00 00 00	 mov	 ecx, 1
  00dc1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00dc7	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR tv482[rsp]
  00dcf	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00dd4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  00ddc	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00de1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168813
  00de8	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00ded	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR tv488[rsp]
  00df5	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00dfa	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv493[rsp]
  00e01	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00e05	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR tv499[rsp]
  00e0c	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00e10	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168814
  00e17	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00e1c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168815
  00e23	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00e28	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e2d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00e33	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168816
  00e3a	ba e2 00 00 00	 mov	 edx, 226		; 000000e2H
  00e3f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168817
  00e46	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00e4c	e9 15 01 00 00	 jmp	 $LN64@cckd64_swa
$LN63@cckd64_swa:

; 226  :                 "lseek()", off, strerror( errno ));
; 227  :     else
; 228  :         WRMSG( HHC00355, "E", LCSS_DEVNUM, dev->filename,

  00e51	48 83 bc 24 b0
	14 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00e5a	74 15		 je	 SHORT $LN87@cckd64_swa
  00e5c	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e64	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00e68	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv521[rsp], eax
  00e6f	eb 0b		 jmp	 SHORT $LN88@cckd64_swa
$LN87@cckd64_swa:
  00e71	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv521[rsp], 0
$LN88@cckd64_swa:
  00e7c	48 83 bc 24 b0
	14 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00e85	74 17		 je	 SHORT $LN89@cckd64_swa
  00e87	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e8f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00e93	d1 f8		 sar	 eax, 1
  00e95	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv527[rsp], eax
  00e9c	eb 0b		 jmp	 SHORT $LN90@cckd64_swa
$LN89@cckd64_swa:
  00e9e	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv527[rsp], 0
$LN90@cckd64_swa:
  00ea9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00eaf	8b 08		 mov	 ecx, DWORD PTR [rax]
  00eb1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00eb7	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR tv510[rsp], rax
  00ebf	48 8b 8c 24 b0
	14 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00ec7	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00ece	48 89 8c 24 b8
	01 00 00	 mov	 QWORD PTR tv516[rsp], rcx
  00ed6	b9 01 00 00 00	 mov	 ecx, 1
  00edb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00ee1	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR tv510[rsp]
  00ee9	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00eee	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  00ef6	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00efb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168818
  00f02	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00f07	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR tv516[rsp]
  00f0f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00f14	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR tv521[rsp]
  00f1b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00f1f	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv527[rsp]
  00f26	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00f2a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168819
  00f31	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00f36	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168820
  00f3d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00f42	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00f47	41 b9 03 00 00
	00		 mov	 r9d, 3
  00f4d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168821
  00f54	ba e5 00 00 00	 mov	 edx, 229		; 000000e5H
  00f59	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168822
  00f60	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN64@cckd64_swa:

; 229  :               "lseek()", off, strerror( errno ));
; 230  :     goto cswp_error;

  00f66	e9 4e 07 00 00	 jmp	 $cswp_error$129
$cswp_read_error$126:

; 231  : 
; 232  : cswp_read_error:
; 233  :     if(dev->batch)

  00f6b	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f73	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00f79	c1 e8 0a	 shr	 eax, 10
  00f7c	83 e0 01	 and	 eax, 1
  00f7f	85 c0		 test	 eax, eax
  00f81	0f 84 31 01 00
	00		 je	 $LN65@cckd64_swa

; 234  :         FWRMSG( stdout, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  00f87	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  00f8c	7d 18		 jge	 SHORT $LN91@cckd64_swa
  00f8e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00f94	8b 08		 mov	 ecx, DWORD PTR [rax]
  00f96	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00f9c	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv578[rsp], rax
  00fa4	eb 0f		 jmp	 SHORT $LN92@cckd64_swa
$LN91@cckd64_swa:
  00fa6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168825
  00fad	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv578[rsp], rax
$LN92@cckd64_swa:
  00fb5	48 83 bc 24 b0
	14 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00fbe	74 15		 je	 SHORT $LN93@cckd64_swa
  00fc0	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00fc8	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00fcc	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv587[rsp], eax
  00fd3	eb 0b		 jmp	 SHORT $LN94@cckd64_swa
$LN93@cckd64_swa:
  00fd5	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv587[rsp], 0
$LN94@cckd64_swa:
  00fe0	48 83 bc 24 b0
	14 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00fe9	74 17		 je	 SHORT $LN95@cckd64_swa
  00feb	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ff3	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00ff7	d1 f8		 sar	 eax, 1
  00ff9	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv593[rsp], eax
  01000	eb 0b		 jmp	 SHORT $LN96@cckd64_swa
$LN95@cckd64_swa:
  01002	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv593[rsp], 0
$LN96@cckd64_swa:
  0100d	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01015	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0101b	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR tv582[rsp], rax
  01023	b9 01 00 00 00	 mov	 ecx, 1
  01028	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0102e	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv578[rsp]
  01036	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0103b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  01043	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  01048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168826
  0104f	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01054	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR tv582[rsp]
  0105c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01061	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR tv587[rsp]
  01068	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0106c	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR tv593[rsp]
  01073	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168827
  0107e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01083	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168828
  0108a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0108f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01094	41 b9 03 00 00
	00		 mov	 r9d, 3
  0109a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168829
  010a1	ba eb 00 00 00	 mov	 edx, 235		; 000000ebH
  010a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168830
  010ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  010b3	e9 2c 01 00 00	 jmp	 $LN66@cckd64_swa
$LN65@cckd64_swa:

; 235  :                 "read()", off, rc < 0 ? strerror( errno ) : "incomplete" );
; 236  :     else
; 237  :         WRMSG( HHC00355, "E", LCSS_DEVNUM, dev->filename,

  010b8	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  010bd	7d 18		 jge	 SHORT $LN97@cckd64_swa
  010bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  010c5	8b 08		 mov	 ecx, DWORD PTR [rax]
  010c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  010cd	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv608[rsp], rax
  010d5	eb 0f		 jmp	 SHORT $LN98@cckd64_swa
$LN97@cckd64_swa:
  010d7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168831
  010de	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv608[rsp], rax
$LN98@cckd64_swa:
  010e6	48 83 bc 24 b0
	14 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  010ef	74 15		 je	 SHORT $LN99@cckd64_swa
  010f1	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  010f9	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  010fd	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv617[rsp], eax
  01104	eb 0b		 jmp	 SHORT $LN100@cckd64_swa
$LN99@cckd64_swa:
  01106	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv617[rsp], 0
$LN100@cckd64_swa:
  01111	48 83 bc 24 b0
	14 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0111a	74 17		 je	 SHORT $LN101@cckd64_swa
  0111c	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01124	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01128	d1 f8		 sar	 eax, 1
  0112a	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv623[rsp], eax
  01131	eb 0b		 jmp	 SHORT $LN102@cckd64_swa
$LN101@cckd64_swa:
  01133	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv623[rsp], 0
$LN102@cckd64_swa:
  0113e	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01146	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0114c	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv612[rsp], rax
  01154	b9 01 00 00 00	 mov	 ecx, 1
  01159	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0115f	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tv608[rsp]
  01167	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0116c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  01174	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  01179	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168832
  01180	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01185	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR tv612[rsp]
  0118d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01192	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR tv617[rsp]
  01199	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0119d	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR tv623[rsp]
  011a4	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  011a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168833
  011af	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  011b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168834
  011bb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  011c0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  011c5	41 b9 03 00 00
	00		 mov	 r9d, 3
  011cb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168835
  011d2	ba ee 00 00 00	 mov	 edx, 238		; 000000eeH
  011d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168836
  011de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN66@cckd64_swa:

; 238  :               "read()", off, rc < 0 ? strerror( errno ) : "incomplete" );
; 239  :     goto cswp_error;

  011e4	e9 d0 04 00 00	 jmp	 $cswp_error$129
$cswp_write_error$127:

; 240  : 
; 241  : cswp_write_error:
; 242  :     if(dev->batch)

  011e9	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  011f1	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  011f7	c1 e8 0a	 shr	 eax, 10
  011fa	83 e0 01	 and	 eax, 1
  011fd	85 c0		 test	 eax, eax
  011ff	0f 84 31 01 00
	00		 je	 $LN67@cckd64_swa

; 243  :         FWRMSG( stdout, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  01205	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  0120a	7d 18		 jge	 SHORT $LN103@cckd64_swa
  0120c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  01212	8b 08		 mov	 ecx, DWORD PTR [rax]
  01214	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0121a	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv642[rsp], rax
  01222	eb 0f		 jmp	 SHORT $LN104@cckd64_swa
$LN103@cckd64_swa:
  01224	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168839
  0122b	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv642[rsp], rax
$LN104@cckd64_swa:
  01233	48 83 bc 24 b0
	14 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0123c	74 15		 je	 SHORT $LN105@cckd64_swa
  0123e	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01246	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0124a	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv651[rsp], eax
  01251	eb 0b		 jmp	 SHORT $LN106@cckd64_swa
$LN105@cckd64_swa:
  01253	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv651[rsp], 0
$LN106@cckd64_swa:
  0125e	48 83 bc 24 b0
	14 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01267	74 17		 je	 SHORT $LN107@cckd64_swa
  01269	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01271	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01275	d1 f8		 sar	 eax, 1
  01277	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv657[rsp], eax
  0127e	eb 0b		 jmp	 SHORT $LN108@cckd64_swa
$LN107@cckd64_swa:
  01280	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv657[rsp], 0
$LN108@cckd64_swa:
  0128b	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01293	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  01299	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv646[rsp], rax
  012a1	b9 01 00 00 00	 mov	 ecx, 1
  012a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  012ac	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv642[rsp]
  012b4	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  012b9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  012c1	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  012c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168840
  012cd	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  012d2	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR tv646[rsp]
  012da	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  012df	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR tv651[rsp]
  012e6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  012ea	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR tv657[rsp]
  012f1	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  012f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168841
  012fc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01301	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168842
  01308	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0130d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01312	41 b9 03 00 00
	00		 mov	 r9d, 3
  01318	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168843
  0131f	ba f4 00 00 00	 mov	 edx, 244		; 000000f4H
  01324	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168844
  0132b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  01331	e9 2c 01 00 00	 jmp	 $LN68@cckd64_swa
$LN67@cckd64_swa:

; 244  :                 "write()", off, rc < 0 ? strerror( errno ) : "incomplete" );
; 245  :     else
; 246  :         WRMSG( HHC00355, "E", LCSS_DEVNUM, dev->filename,

  01336	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  0133b	7d 18		 jge	 SHORT $LN109@cckd64_swa
  0133d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  01343	8b 08		 mov	 ecx, DWORD PTR [rax]
  01345	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0134b	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv672[rsp], rax
  01353	eb 0f		 jmp	 SHORT $LN110@cckd64_swa
$LN109@cckd64_swa:
  01355	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168845
  0135c	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv672[rsp], rax
$LN110@cckd64_swa:
  01364	48 83 bc 24 b0
	14 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0136d	74 15		 je	 SHORT $LN111@cckd64_swa
  0136f	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01377	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0137b	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv681[rsp], eax
  01382	eb 0b		 jmp	 SHORT $LN112@cckd64_swa
$LN111@cckd64_swa:
  01384	c7 84 24 d0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv681[rsp], 0
$LN112@cckd64_swa:
  0138f	48 83 bc 24 b0
	14 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01398	74 17		 je	 SHORT $LN113@cckd64_swa
  0139a	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  013a2	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  013a6	d1 f8		 sar	 eax, 1
  013a8	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv687[rsp], eax
  013af	eb 0b		 jmp	 SHORT $LN114@cckd64_swa
$LN113@cckd64_swa:
  013b1	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv687[rsp], 0
$LN114@cckd64_swa:
  013bc	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  013c4	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  013ca	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR tv676[rsp], rax
  013d2	b9 01 00 00 00	 mov	 ecx, 1
  013d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  013dd	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv672[rsp]
  013e5	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  013ea	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  013f2	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  013f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168846
  013fe	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01403	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR tv676[rsp]
  0140b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01410	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR tv681[rsp]
  01417	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0141b	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR tv687[rsp]
  01422	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01426	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168847
  0142d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01432	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168848
  01439	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0143e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01443	41 b9 03 00 00
	00		 mov	 r9d, 3
  01449	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168849
  01450	ba f7 00 00 00	 mov	 edx, 247		; 000000f7H
  01455	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168850
  0145c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN68@cckd64_swa:

; 247  :               "write()", off, rc < 0 ? strerror( errno ) : "incomplete" );
; 248  :     goto cswp_error;

  01462	e9 52 02 00 00	 jmp	 $cswp_error$129
$cswp_malloc_error$128:

; 249  : 
; 250  : cswp_malloc_error:
; 251  :     {
; 252  :         char buf[64];
; 253  :         MSGBUF( buf, "malloc(%d)", len);

  01467	44 8b 4c 24 74	 mov	 r9d, DWORD PTR len$[rsp]
  0146c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168851
  01473	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  01478	48 8d 8c 24 50
	14 00 00	 lea	 rcx, QWORD PTR buf$1[rsp]
  01480	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 254  :         if(dev->batch)

  01486	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0148e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01494	c1 e8 0a	 shr	 eax, 10
  01497	83 e0 01	 and	 eax, 1
  0149a	85 c0		 test	 eax, eax
  0149c	0f 84 0e 01 00
	00		 je	 $LN69@cckd64_swa

; 255  :             FWRMSG( stdout, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  014a2	48 83 bc 24 b0
	14 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  014ab	74 15		 je	 SHORT $LN115@cckd64_swa
  014ad	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  014b5	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  014b9	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv716[rsp], eax
  014c0	eb 0b		 jmp	 SHORT $LN116@cckd64_swa
$LN115@cckd64_swa:
  014c2	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv716[rsp], 0
$LN116@cckd64_swa:
  014cd	48 83 bc 24 b0
	14 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  014d6	74 17		 je	 SHORT $LN117@cckd64_swa
  014d8	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  014e0	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  014e4	d1 f8		 sar	 eax, 1
  014e6	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv722[rsp], eax
  014ed	eb 0b		 jmp	 SHORT $LN118@cckd64_swa
$LN117@cckd64_swa:
  014ef	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv722[rsp], 0
$LN118@cckd64_swa:
  014fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  01500	8b 08		 mov	 ecx, DWORD PTR [rax]
  01502	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  01508	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR tv706[rsp], rax
  01510	48 8b 8c 24 b0
	14 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01518	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0151f	48 89 8c 24 e8
	01 00 00	 mov	 QWORD PTR tv711[rsp], rcx
  01527	b9 01 00 00 00	 mov	 ecx, 1
  0152c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01532	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR tv706[rsp]
  0153a	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0153f	48 8d 8c 24 50
	14 00 00	 lea	 rcx, QWORD PTR buf$1[rsp]
  01547	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0154c	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR tv711[rsp]
  01554	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01559	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR tv716[rsp]
  01560	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01564	8b 8c 24 dc 00
	00 00		 mov	 ecx, DWORD PTR tv722[rsp]
  0156b	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0156f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168854
  01576	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0157b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168855
  01582	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01587	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0158c	41 b9 03 00 00
	00		 mov	 r9d, 3
  01592	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168856
  01599	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0159e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168857
  015a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  015ab	e9 09 01 00 00	 jmp	 $LN70@cckd64_swa
$LN69@cckd64_swa:

; 256  :                     buf, strerror( errno ));
; 257  :         else
; 258  :              WRMSG( HHC00354, "E", LCSS_DEVNUM, dev->filename,

  015b0	48 83 bc 24 b0
	14 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  015b9	74 15		 je	 SHORT $LN119@cckd64_swa
  015bb	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  015c3	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  015c7	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv743[rsp], eax
  015ce	eb 0b		 jmp	 SHORT $LN120@cckd64_swa
$LN119@cckd64_swa:
  015d0	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv743[rsp], 0
$LN120@cckd64_swa:
  015db	48 83 bc 24 b0
	14 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  015e4	74 17		 je	 SHORT $LN121@cckd64_swa
  015e6	48 8b 84 24 b0
	14 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  015ee	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  015f2	d1 f8		 sar	 eax, 1
  015f4	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv749[rsp], eax
  015fb	eb 0b		 jmp	 SHORT $LN122@cckd64_swa
$LN121@cckd64_swa:
  015fd	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv749[rsp], 0
$LN122@cckd64_swa:
  01608	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0160e	8b 08		 mov	 ecx, DWORD PTR [rax]
  01610	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  01616	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR tv733[rsp], rax
  0161e	48 8b 8c 24 b0
	14 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01626	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0162d	48 89 8c 24 f8
	01 00 00	 mov	 QWORD PTR tv738[rsp], rcx
  01635	b9 01 00 00 00	 mov	 ecx, 1
  0163a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01640	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR tv733[rsp]
  01648	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0164d	48 8d 8c 24 50
	14 00 00	 lea	 rcx, QWORD PTR buf$1[rsp]
  01655	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0165a	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR tv738[rsp]
  01662	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01667	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR tv743[rsp]
  0166e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01672	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR tv749[rsp]
  01679	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0167d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168858
  01684	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01689	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168859
  01690	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01695	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0169a	41 b9 03 00 00
	00		 mov	 r9d, 3
  016a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168860
  016a7	ba 03 01 00 00	 mov	 edx, 259		; 00000103H
  016ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168861
  016b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN70@cckd64_swa:
$cswp_error$129:

; 259  :                     buf, strerror( errno ));
; 260  :         goto cswp_error;
; 261  :     }
; 262  : cswp_error:
; 263  :     if (l1) free(l1);

  016b9	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR l1$[rsp], 0
  016c2	74 0e		 je	 SHORT $LN71@cckd64_swa
  016c4	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  016cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN71@cckd64_swa:

; 264  :     return -1;

  016d2	b8 ff ff ff ff	 mov	 eax, -1
$LN1@cckd64_swa:

; 265  : }

  016d7	48 8b 8c 24 90
	14 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  016df	48 33 cc	 xor	 rcx, rsp
  016e2	e8 00 00 00 00	 call	 __security_check_cookie
  016e7	48 81 c4 a8 14
	00 00		 add	 rsp, 5288		; 000014a8H
  016ee	c3		 ret	 0
cckd64_swapend ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_fw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_fw_noswap PROC					; COMDAT

; 746  :     inline U32 fetch_fw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 747  :       U32 value;
; 748  :       memcpy(&value, (BYTE *)ptr, 4);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	8b 00		 mov	 eax, DWORD PTR [rax]
  00010	89 04 24	 mov	 DWORD PTR value$[rsp], eax

; 749  :       return value;

  00013	8b 04 24	 mov	 eax, DWORD PTR value$[rsp]

; 750  :     }

  00016	48 83 c4 18	 add	 rsp, 24
  0001a	c3		 ret	 0
fetch_fw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_hw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_hw_noswap PROC					; COMDAT

; 712  :     inline U16 fetch_hw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 713  :       U16 value;
; 714  :       memcpy(&value, (BYTE *)ptr, 2);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00011	66 89 04 24	 mov	 WORD PTR value$[rsp], ax

; 715  :       return value;

  00015	0f b7 04 24	 movzx	 eax, WORD PTR value$[rsp]

; 716  :     }

  00019	48 83 c4 18	 add	 rsp, 24
  0001d	c3		 ret	 0
fetch_hw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dbgtrace.h
_TEXT	SEGMENT
buffsize$ = 48
rc$ = 52
chunksize$ = 56
buffer$ = 64
args$ = 72
fmt$ = 96
DebuggerTrace PROC

; 94   :   static inline void DebuggerTrace(char* fmt, ...) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 95   :       const int chunksize = 512;

  00018	c7 44 24 38 00
	02 00 00	 mov	 DWORD PTR chunksize$[rsp], 512 ; 00000200H

; 96   :       int buffsize = 0;

  00020	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR buffsize$[rsp], 0

; 97   :       char* buffer = NULL;

  00028	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR buffer$[rsp], 0

; 98   :       int rc = -1;

  00031	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 99   :       va_list args;
; 100  :       va_start( args, fmt );

  00039	48 8d 44 24 68	 lea	 rax, QWORD PTR fmt$[rsp+8]
  0003e	48 89 44 24 48	 mov	 QWORD PTR args$[rsp], rax
$LN9@DebuggerTr:
$LN4@DebuggerTr:

; 101  :       do {
; 102  :           if (buffer) free( buffer );

  00043	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00049	74 0b		 je	 SHORT $LN5@DebuggerTr
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN5@DebuggerTr:

; 103  :           buffsize += chunksize;

  00056	8b 44 24 38	 mov	 eax, DWORD PTR chunksize$[rsp]
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0005e	03 c8		 add	 ecx, eax
  00060	8b c1		 mov	 eax, ecx
  00062	89 44 24 30	 mov	 DWORD PTR buffsize$[rsp], eax

; 104  :           buffer = malloc( buffsize + 1 );

  00066	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  0006a	ff c0		 inc	 eax
  0006c	48 98		 cdqe
  0006e	48 8b c8	 mov	 rcx, rax
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00077	48 89 44 24 40	 mov	 QWORD PTR buffer$[rsp], rax

; 105  :           if (!buffer) BREAK_INTO_DEBUGGER();

  0007c	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00082	75 01		 jne	 SHORT $LN6@DebuggerTr
  00084	cc		 int	 3
$LN6@DebuggerTr:

; 106  :           rc = _vsnprintf_s( buffer, buffsize+1, buffsize, fmt, args);

  00085	48 63 44 24 30	 movsxd	 rax, DWORD PTR buffsize$[rsp]
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0008e	ff c1		 inc	 ecx
  00090	48 63 c9	 movsxd	 rcx, ecx
  00093	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00098	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0009d	4c 8b 4c 24 60	 mov	 r9, QWORD PTR fmt$[rsp]
  000a2	4c 8b c0	 mov	 r8, rax
  000a5	48 8b d1	 mov	 rdx, rcx
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000ad	e8 00 00 00 00	 call	 _vsnprintf_s
  000b2	89 44 24 34	 mov	 DWORD PTR rc$[rsp], eax

; 107  :       } while (rc < 0 || rc >= buffsize);

  000b6	83 7c 24 34 00	 cmp	 DWORD PTR rc$[rsp], 0
  000bb	7c 86		 jl	 SHORT $LN4@DebuggerTr
  000bd	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  000c1	39 44 24 34	 cmp	 DWORD PTR rc$[rsp], eax
  000c5	0f 8d 78 ff ff
	ff		 jge	 $LN9@DebuggerTr

; 108  :       OutputDebugStringA( buffer ); /* send to debugger pane */

  000cb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 109  :       if (buffer) free( buffer );

  000d6	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  000dc	74 0b		 je	 SHORT $LN7@DebuggerTr
  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@DebuggerTr:

; 110  :       va_end( args );

  000e9	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0

; 111  :   }

  000f2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f6	c3		 ret	 0
DebuggerTrace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sprintf	PROC						; COMDAT

; 1771 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsprintf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 1777 : 
; 1778 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 1779 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 1780 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_MaxCount$ = 80
_Format$ = 88
_ArgList$ = 96
_vsnprintf_s PROC					; COMDAT

; 1598 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1599 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00022	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0002b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Format$[rsp]
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR _MaxCount$[rsp]
  00035	48 8b 54 24 48	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0003f	e8 00 00 00 00	 call	 _vsnprintf_s_l

; 1600 :     }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
_vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s_l
_TEXT	SEGMENT
_Result$ = 64
tv74 = 68
_Buffer$ = 96
_BufferCount$ = 104
_MaxCount$ = 112
_Format$ = 120
_Locale$ = 128
_ArgList$ = 136
_vsnprintf_s_l PROC					; COMDAT

; 1577 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1578 :         int const _Result = __stdio_common_vsnprintf_s(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00032	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00037	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Format$[rsp]
  0003c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00041	4c 8b 4c 24 70	 mov	 r9, QWORD PTR _MaxCount$[rsp]
  00046	4c 8b 44 24 68	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  0004b	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00050	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsnprintf_s
  00059	89 44 24 40	 mov	 DWORD PTR _Result$[rsp], eax

; 1579 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1580 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1581 : 
; 1582 :         return _Result < 0 ? -1 : _Result;

  0005d	83 7c 24 40 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00062	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  00064	c7 44 24 44 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  0006c	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0006e	8b 44 24 40	 mov	 eax, DWORD PTR _Result$[rsp]
  00072	89 44 24 44	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  00076	8b 44 24 44	 mov	 eax, DWORD PTR tv74[rsp]

; 1583 :     }

  0007a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0007e	c3		 ret	 0
_vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT

; 1458 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1459 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  00027	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  0002c	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00038	e8 00 00 00 00	 call	 _vsnprintf_l

; 1460 :     }

  0003d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00041	c3		 ret	 0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnprintf_l PROC					; COMDAT

; 1391 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00020	48 83 c8 01	 or	 rax, 1
  00024	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00029	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00033	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00038	4c 8b 4c 24 60	 mov	 r9, QWORD PTR _Format$[rsp]
  0003d	4c 8b 44 24 58	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  00042	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf
  00050	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00054	83 7c 24 30 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00059	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  0005b	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  00063	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00065	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]
  00069	89 44 24 34	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  0006d	8b 44 24 34	 mov	 eax, DWORD PTR tv74[rsp]

; 1397 :     }

  00071	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00075	c3		 ret	 0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
