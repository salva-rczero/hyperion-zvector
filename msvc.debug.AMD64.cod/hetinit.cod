; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	het_string_to_upper
PUBLIC	main
EXTRN	__imp_toupper:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_initialize_utility:PROC
EXTRN	__imp_het_open:PROC
EXTRN	__imp_het_close:PROC
EXTRN	__imp_het_write:PROC
EXTRN	__imp_het_tapemark:PROC
EXTRN	__imp_het_cntl:PROC
EXTRN	__imp_het_error:PROC
EXTRN	__imp_getopt:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_fet_open:PROC
EXTRN	__imp_fet_close:PROC
EXTRN	__imp_fet_write:PROC
EXTRN	__imp_fet_tapemark:PROC
EXTRN	__imp_fet_error:PROC
EXTRN	__imp_sl_vol:PROC
EXTRN	__imp_sl_ds1:PROC
EXTRN	__imp_sl_error:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_optind:DWORD
EXTRN	__security_cookie:QWORD
pdata	SEGMENT
$pdata$usage DD	imagerel usage
	DD	imagerel usage+95
	DD	imagerel $unwind$usage
$pdata$het_string_to_upper DD imagerel $LN6
	DD	imagerel $LN6+89
	DD	imagerel $unwind$het_string_to_upper
$pdata$main DD	imagerel $LN58
	DD	imagerel $LN58+2912
	DD	imagerel $unwind$main
pdata	ENDS
_DATA	SEGMENT
$SG159321 DB	'I', 00H
	ORG $+14
$SG159322 DB	'HHC02729%s Usage: %s [options] outfile [volser] [owner]', 0aH
	DB	'HHC02728I   outfile   output file', 0aH, 'HHC02729I Options:', 0aH
	DB	'HHC02729I   -d        disable compression', 0aH, 'HHC02729I  '
	DB	' -h        display usage summary', 0aH, 'HHC02729I   -i      '
	DB	'  create an IEHINITT formatted tape (default: on)', 0aH, 'HHC'
	DB	'02729I   -n        create an NL tape', 0aH, 00H
	ORG $+2
$SG159323 DB	'usage', 00H
	ORG $+2
$SG159391 DB	'E', 00H
	ORG $+2
$SG159324 DB	'hetinit.c', 00H
	ORG $+2
$SG159397 DB	'E', 00H
	ORG $+2
$SG159366 DB	'HET IEHINITT', 00H
	ORG $+3
$SG159367 DB	'hetinit', 00H
$SG159368 DB	'dhin', 00H
	ORG $+3
$SG159377 DB	'.fkt', 00H
	ORG $+3
$SG159390 DB	'fet_open()', 00H
	ORG $+1
$SG159403 DB	'E', 00H
	ORG $+2
$SG159392 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159393 DB	'main', 00H
	ORG $+3
$SG159394 DB	'hetinit.c', 00H
	ORG $+2
$SG159411 DB	'E', 00H
	ORG $+2
$SG159396 DB	'het_open()', 00H
	ORG $+1
$SG159421 DB	'E', 00H
	ORG $+2
$SG159398 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159399 DB	'main', 00H
	ORG $+3
$SG159400 DB	'hetinit.c', 00H
	ORG $+2
$SG159426 DB	'E', 00H
	ORG $+2
$SG159402 DB	'het_cntl()', 00H
	ORG $+1
$SG159433 DB	'E', 00H
	ORG $+2
$SG159404 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159405 DB	'main', 00H
	ORG $+3
$SG159406 DB	'hetinit.c', 00H
	ORG $+2
$SG159443 DB	'E', 00H
	ORG $+2
$SG159410 DB	'sl_vol1()', 00H
	ORG $+2
$SG159448 DB	'E', 00H
	ORG $+2
$SG159412 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159413 DB	'main', 00H
	ORG $+3
$SG159414 DB	'hetinit.c', 00H
	ORG $+2
$SG159459 DB	'E', 00H
	ORG $+2
$SG159420 DB	'fet_write() for VOL1', 00H
	ORG $+3
$SG159422 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159423 DB	'main', 00H
	ORG $+3
$SG159424 DB	'hetinit.c', 00H
	ORG $+2
$SG159464 DB	'E', 00H
	ORG $+2
$SG159425 DB	'het_write() for VOL1', 00H
	ORG $+3
$SG159427 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159428 DB	'main', 00H
	ORG $+3
$SG159429 DB	'hetinit.c', 00H
	ORG $+2
$SG159474 DB	'E', 00H
	ORG $+2
$SG159430 DB	'_IEHINITT_', 00H
	ORG $+1
$SG159479 DB	'E', 00H
	ORG $+2
$SG159432 DB	'sl_hdr1()', 00H
	ORG $+6
$SG159434 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159435 DB	'main', 00H
	ORG $+3
$SG159436 DB	'hetinit.c', 00H
	ORG $+6
$SG159442 DB	'fet_write() for HDR1', 00H
	ORG $+3
$SG159444 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159445 DB	'main', 00H
	ORG $+3
$SG159446 DB	'hetinit.c', 00H
	ORG $+6
$SG159447 DB	'het_write() for HDR1', 00H
	ORG $+3
$SG159449 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159450 DB	'main', 00H
	ORG $+3
$SG159451 DB	'hetinit.c', 00H
	ORG $+6
$SG159458 DB	'fet_tapemark()', 00H
	ORG $+1
$SG159460 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159461 DB	'main', 00H
	ORG $+3
$SG159462 DB	'hetinit.c', 00H
	ORG $+6
$SG159463 DB	'het_tapemark()', 00H
	ORG $+1
$SG159465 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159466 DB	'main', 00H
	ORG $+3
$SG159467 DB	'hetinit.c', 00H
	ORG $+6
$SG159473 DB	'fet_tapemark()', 00H
	ORG $+1
$SG159475 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159476 DB	'main', 00H
	ORG $+3
$SG159477 DB	'hetinit.c', 00H
	ORG $+6
$SG159478 DB	'het_tapemark()', 00H
	ORG $+1
$SG159480 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159481 DB	'main', 00H
	ORG $+3
$SG159482 DB	'hetinit.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main
	DD	01aH
	DD	0b48H
voltbl	ENDS
xdata	SEGMENT
$unwind$usage DD 010901H
	DD	08209H
$unwind$het_string_to_upper DD 010901H
	DD	06209H
$unwind$main DD	022219H
	DD	02f0110H
	DD	imagerel __GSHandlerCheck
	DD	0160H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hetinit.c
_TEXT	SEGMENT
rc$ = 80
o_faketape$ = 84
tv76 = 88
o_iehinitt$ = 92
o_nl$ = 96
hetb$ = 104
fetb$ = 112
o_compress$ = 120
tv462 = 124
pgm$ = 128
o_filename$ = 136
o_volser$ = 144
o_owner$ = 152
tv162 = 160
tv180 = 168
tv198 = 176
tv217 = 184
tv241 = 192
tv254 = 200
tv277 = 208
tv333 = 216
tv346 = 224
tv367 = 232
tv380 = 240
tv400 = 248
tv413 = 256
lab$ = 272
__$ArrayPad$ = 352
argc$ = 384
argv$ = 392
main	PROC

; 57   : {

$LN58:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00010	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00017	48 33 c4	 xor	 rax, rsp
  0001a	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 58   :     char           *pgm;                    /* less any extension (.ext) */
; 59   :     int             rc;
; 60   :     SLLABEL         lab;
; 61   :     HETB           *hetb;                   /* used for aws and het tapes*/
; 62   :     FETB           *fetb;                   /* used for faketapes        */
; 63   :     int             o_iehinitt;
; 64   :     int             o_nl;
; 65   :     int             o_compress;
; 66   :     int             o_faketape;
; 67   :     char           *o_filename;
; 68   :     char           *o_owner;
; 69   :     char           *o_volser;
; 70   : 
; 71   :     INITIALIZE_UTILITY( UTILITY_NAME, UTILITY_DESC, &pgm );

  00022	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR pgm$[rsp]
  0002a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159366
  00036	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159367
  0003d	48 8b 94 24 88
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00045	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_initialize_utility
  00052	89 84 24 80 01
	00 00		 mov	 DWORD PTR argc$[rsp], eax

; 72   : 
; 73   :     hetb = NULL;

  00059	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR hetb$[rsp], 0

; 74   :     fetb = NULL;

  00062	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR fetb$[rsp], 0

; 75   :     o_filename = NULL;

  0006b	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR o_filename$[rsp], 0

; 76   :     o_faketape = FALSE;

  00077	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR o_faketape$[rsp], 0

; 77   :     o_iehinitt = TRUE;

  0007f	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR o_iehinitt$[rsp], 1

; 78   :     o_nl = FALSE;

  00087	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR o_nl$[rsp], 0

; 79   :     o_compress = TRUE;

  0008f	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR o_compress$[rsp], 1

; 80   :     o_owner = NULL;

  00097	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR o_owner$[rsp], 0

; 81   :     o_volser = NULL;

  000a3	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR o_volser$[rsp], 0
$LN2@main:

; 82   : 
; 83   :     while( TRUE )

  000af	33 c0		 xor	 eax, eax
  000b1	83 f8 01	 cmp	 eax, 1
  000b4	0f 84 a6 00 00
	00		 je	 $LN3@main

; 84   :     {
; 85   :         rc = getopt( argc, argv, "dhin" );

  000ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159368
  000c1	48 8b 94 24 88
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  000c9	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getopt
  000d6	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 86   :         if( rc == -1 )

  000da	83 7c 24 50 ff	 cmp	 DWORD PTR rc$[rsp], -1
  000df	75 02		 jne	 SHORT $LN6@main

; 87   :         {
; 88   :             break;

  000e1	eb 7d		 jmp	 SHORT $LN3@main
$LN6@main:

; 89   :         }
; 90   : 
; 91   :         switch( rc )

  000e3	8b 44 24 50	 mov	 eax, DWORD PTR rc$[rsp]
  000e7	89 44 24 58	 mov	 DWORD PTR tv76[rsp], eax
  000eb	83 7c 24 58 64	 cmp	 DWORD PTR tv76[rsp], 100 ; 00000064H
  000f0	74 17		 je	 SHORT $LN7@main
  000f2	83 7c 24 58 68	 cmp	 DWORD PTR tv76[rsp], 104 ; 00000068H
  000f7	74 1a		 je	 SHORT $LN8@main
  000f9	83 7c 24 58 69	 cmp	 DWORD PTR tv76[rsp], 105 ; 00000069H
  000fe	74 25		 je	 SHORT $LN9@main
  00100	83 7c 24 58 6e	 cmp	 DWORD PTR tv76[rsp], 110 ; 0000006eH
  00105	74 30		 je	 SHORT $LN10@main
  00107	eb 40		 jmp	 SHORT $LN11@main
$LN7@main:

; 92   :         {
; 93   :             case 'd':
; 94   :                 o_compress = FALSE;

  00109	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR o_compress$[rsp], 0

; 95   :             break;

  00111	eb 48		 jmp	 SHORT $LN4@main
$LN8@main:

; 96   : 
; 97   :             case 'h':
; 98   :                 usage( pgm );

  00113	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  0011b	e8 00 00 00 00	 call	 usage

; 99   :                 goto exit;

  00120	e9 e7 09 00 00	 jmp	 $exit$59
$LN9@main:

; 100  : 
; 101  :             case 'i':
; 102  :                 o_iehinitt = TRUE;

  00125	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR o_iehinitt$[rsp], 1

; 103  :                 o_nl = FALSE;

  0012d	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR o_nl$[rsp], 0

; 104  :             break;

  00135	eb 24		 jmp	 SHORT $LN4@main
$LN10@main:

; 105  : 
; 106  :             case 'n':
; 107  :                 o_iehinitt = FALSE;

  00137	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR o_iehinitt$[rsp], 0

; 108  :                 o_nl = TRUE;

  0013f	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR o_nl$[rsp], 1

; 109  :             break;

  00147	eb 12		 jmp	 SHORT $LN4@main
$LN11@main:

; 110  : 
; 111  :             default:
; 112  :                 usage( pgm );

  00149	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  00151	e8 00 00 00 00	 call	 usage

; 113  :                 goto exit;

  00156	e9 b1 09 00 00	 jmp	 $exit$59
$LN4@main:

; 114  :         }
; 115  :     }

  0015b	e9 4f ff ff ff	 jmp	 $LN2@main
$LN3@main:

; 116  : 
; 117  :     argc -= optind;

  00160	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00167	8b 00		 mov	 eax, DWORD PTR [rax]
  00169	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  00170	2b c8		 sub	 ecx, eax
  00172	8b c1		 mov	 eax, ecx
  00174	89 84 24 80 01
	00 00		 mov	 DWORD PTR argc$[rsp], eax

; 118  : 
; 119  :     if( argc < 1 )

  0017b	83 bc 24 80 01
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00183	7d 12		 jge	 SHORT $LN12@main

; 120  :     {
; 121  :         usage( pgm );

  00185	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  0018d	e8 00 00 00 00	 call	 usage

; 122  :         goto exit;

  00192	e9 75 09 00 00	 jmp	 $exit$59
$LN12@main:

; 123  :     }
; 124  : 
; 125  :     o_filename = argv[ optind ];

  00197	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  0019e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  001a1	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001a9	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  001ad	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR o_filename$[rsp], rax

; 126  : 
; 127  :     if ( ( rc = (int)strlen( o_filename ) ) > 4 && ( rc = strcasecmp( &o_filename[rc-4], ".fkt" ) ) == 0 )

  001b5	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR o_filename$[rsp]
  001bd	e8 00 00 00 00	 call	 strlen
  001c2	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
  001c6	83 7c 24 50 04	 cmp	 DWORD PTR rc$[rsp], 4
  001cb	7e 3a		 jle	 SHORT $LN13@main
  001cd	8b 44 24 50	 mov	 eax, DWORD PTR rc$[rsp]
  001d1	83 e8 04	 sub	 eax, 4
  001d4	48 98		 cdqe
  001d6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR o_filename$[rsp]
  001de	48 03 c8	 add	 rcx, rax
  001e1	48 8b c1	 mov	 rax, rcx
  001e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159377
  001eb	48 8b c8	 mov	 rcx, rax
  001ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  001f4	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
  001f8	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  001fd	75 08		 jne	 SHORT $LN13@main

; 128  :     {
; 129  :         o_faketape = TRUE;

  001ff	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR o_faketape$[rsp], 1
$LN13@main:

; 130  :     }
; 131  : 
; 132  :     if( o_iehinitt )

  00207	83 7c 24 5c 00	 cmp	 DWORD PTR o_iehinitt$[rsp], 0
  0020c	0f 84 8e 00 00
	00		 je	 $LN14@main

; 133  :     {
; 134  :         if( argc == 2 )

  00212	83 bc 24 80 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0021a	75 23		 jne	 SHORT $LN15@main

; 135  :         {
; 136  :             o_volser = argv[ optind + 1 ];

  0021c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00223	8b 00		 mov	 eax, DWORD PTR [rax]
  00225	ff c0		 inc	 eax
  00227	48 98		 cdqe
  00229	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00231	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00235	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR o_volser$[rsp], rax

; 137  :         }

  0023d	eb 61		 jmp	 SHORT $LN16@main
$LN15@main:

; 138  :         else if( argc == 3 )

  0023f	83 bc 24 80 01
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00247	75 45		 jne	 SHORT $LN17@main

; 139  :         {
; 140  :             o_volser = argv[ optind + 1 ];

  00249	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00250	8b 00		 mov	 eax, DWORD PTR [rax]
  00252	ff c0		 inc	 eax
  00254	48 98		 cdqe
  00256	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0025e	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00262	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR o_volser$[rsp], rax

; 141  :             o_owner = argv[ optind + 2 ];

  0026a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00271	8b 00		 mov	 eax, DWORD PTR [rax]
  00273	83 c0 02	 add	 eax, 2
  00276	48 98		 cdqe
  00278	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00280	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00284	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR o_owner$[rsp], rax

; 142  :         }

  0028c	eb 12		 jmp	 SHORT $LN18@main
$LN17@main:

; 143  :         else
; 144  :         {
; 145  :             usage( pgm );

  0028e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  00296	e8 00 00 00 00	 call	 usage

; 146  :             goto exit;

  0029b	e9 6c 08 00 00	 jmp	 $exit$59
$LN18@main:
$LN16@main:
$LN14@main:

; 147  :         }
; 148  :     }
; 149  : 
; 150  :     if( o_nl )

  002a0	83 7c 24 60 00	 cmp	 DWORD PTR o_nl$[rsp], 0
  002a5	74 1c		 je	 SHORT $LN19@main

; 151  :     {
; 152  :         if( argc != 1 )

  002a7	83 bc 24 80 01
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  002af	74 12		 je	 SHORT $LN20@main

; 153  :         {
; 154  :             usage( pgm );

  002b1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  002b9	e8 00 00 00 00	 call	 usage

; 155  :             goto exit;

  002be	e9 49 08 00 00	 jmp	 $exit$59
$LN20@main:
$LN19@main:

; 156  :         }
; 157  :     }
; 158  : 
; 159  :     if( o_volser )

  002c3	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR o_volser$[rsp], 0
  002cc	74 0d		 je	 SHORT $LN21@main

; 160  :         het_string_to_upper( o_volser );

  002ce	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR o_volser$[rsp]
  002d6	e8 00 00 00 00	 call	 het_string_to_upper
$LN21@main:

; 161  : 
; 162  :     if( o_owner )

  002db	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR o_owner$[rsp], 0
  002e4	74 0d		 je	 SHORT $LN22@main

; 163  :         het_string_to_upper( o_owner );

  002e6	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR o_owner$[rsp]
  002ee	e8 00 00 00 00	 call	 het_string_to_upper
$LN22@main:

; 164  : 
; 165  :     if ( o_faketape )

  002f3	83 7c 24 54 00	 cmp	 DWORD PTR o_faketape$[rsp], 0
  002f8	0f 84 a0 00 00
	00		 je	 $LN23@main

; 166  :     {
; 167  :         rc = fet_open( &fetb, o_filename, FETOPEN_CREATE );

  002fe	41 b8 01 00 00
	00		 mov	 r8d, 1
  00304	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR o_filename$[rsp]
  0030c	48 8d 4c 24 70	 lea	 rcx, QWORD PTR fetb$[rsp]
  00311	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_open
  00317	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 168  :         if ( rc < 0 )

  0031b	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  00320	7d 77		 jge	 SHORT $LN25@main

; 169  :         {
; 170  :             // "Error in function %s: %s"
; 171  :             FWRMSG( stderr, HHC00075, "E", "fet_open()", fet_error( rc ) );

  00322	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  00326	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_error
  0032c	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv162[rsp], rax
  00334	b9 02 00 00 00	 mov	 ecx, 2
  00339	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0033f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv162[rsp]
  00347	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0034c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159390
  00353	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00358	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159391
  0035f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00364	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159392
  0036b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00370	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00375	41 b9 03 00 00
	00		 mov	 r9d, 3
  0037b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159393
  00382	ba ab 00 00 00	 mov	 edx, 171		; 000000abH
  00387	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159394
  0038e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 172  :             goto exit;

  00394	e9 73 07 00 00	 jmp	 $exit$59
$LN25@main:

; 173  :         }
; 174  : 
; 175  :     }

  00399	e9 32 01 00 00	 jmp	 $LN24@main
$LN23@main:

; 176  :     else
; 177  :     {
; 178  :         rc = het_open( &hetb, o_filename, HETOPEN_CREATE );

  0039e	41 b8 01 00 00
	00		 mov	 r8d, 1
  003a4	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR o_filename$[rsp]
  003ac	48 8d 4c 24 68	 lea	 rcx, QWORD PTR hetb$[rsp]
  003b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_open
  003b7	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 179  :         if( rc < 0 )

  003bb	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  003c0	7d 77		 jge	 SHORT $LN26@main

; 180  :         {
; 181  :             // "Error in function %s: %s"
; 182  :             FWRMSG( stderr, HHC00075, "E", "het_open()", het_error( rc ) );

  003c2	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  003c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  003cc	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv180[rsp], rax
  003d4	b9 02 00 00 00	 mov	 ecx, 2
  003d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003df	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv180[rsp]
  003e7	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159396
  003f3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159397
  003ff	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00404	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159398
  0040b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00410	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00415	41 b9 03 00 00
	00		 mov	 r9d, 3
  0041b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159399
  00422	ba b6 00 00 00	 mov	 edx, 182		; 000000b6H
  00427	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159400
  0042e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 183  :             goto exit;

  00434	e9 d3 06 00 00	 jmp	 $exit$59
$LN26@main:

; 184  :         }
; 185  : 
; 186  :         rc = het_cntl( hetb, HETCNTL_SET | HETCNTL_COMPRESS, o_compress );

  00439	44 8b 44 24 78	 mov	 r8d, DWORD PTR o_compress$[rsp]
  0043e	ba 01 01 00 00	 mov	 edx, 257		; 00000101H
  00443	48 8b 4c 24 68	 mov	 rcx, QWORD PTR hetb$[rsp]
  00448	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_cntl
  0044e	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 187  :         if( rc < 0 )

  00452	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  00457	7d 77		 jge	 SHORT $LN27@main

; 188  :         {
; 189  :             // "Error in function %s: %s"
; 190  :             FWRMSG( stderr, HHC00075, "E", "het_cntl()", het_error( rc ) );

  00459	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  0045d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  00463	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv198[rsp], rax
  0046b	b9 02 00 00 00	 mov	 ecx, 2
  00470	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00476	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv198[rsp]
  0047e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00483	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159402
  0048a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0048f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159403
  00496	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0049b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159404
  004a2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004a7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004ac	41 b9 03 00 00
	00		 mov	 r9d, 3
  004b2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159405
  004b9	ba be 00 00 00	 mov	 edx, 190		; 000000beH
  004be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159406
  004c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 191  :             goto exit;

  004cb	e9 3c 06 00 00	 jmp	 $exit$59
$LN27@main:
$LN24@main:

; 192  :         }
; 193  :     }
; 194  : 
; 195  :     if( o_iehinitt )

  004d0	83 7c 24 5c 00	 cmp	 DWORD PTR o_iehinitt$[rsp], 0
  004d5	0f 84 e3 03 00
	00		 je	 $LN28@main

; 196  :     {
; 197  :         rc = sl_vol1( &lab, o_volser, o_owner );

  004db	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR o_owner$[rsp]
  004e3	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR o_volser$[rsp]
  004eb	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR lab$[rsp]
  004f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sl_vol
  004f9	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 198  :         if( rc < 0 )

  004fd	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  00502	7d 77		 jge	 SHORT $LN30@main

; 199  :         {
; 200  :             // "Error in function %s: %s"
; 201  :             FWRMSG( stderr, HHC00075, "E", "sl_vol1()", sl_error( rc ) );

  00504	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  00508	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sl_error
  0050e	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv217[rsp], rax
  00516	b9 02 00 00 00	 mov	 ecx, 2
  0051b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00521	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv217[rsp]
  00529	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0052e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159410
  00535	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0053a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159411
  00541	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00546	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159412
  0054d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00552	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00557	41 b9 03 00 00
	00		 mov	 r9d, 3
  0055d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159413
  00564	ba c9 00 00 00	 mov	 edx, 201		; 000000c9H
  00569	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159414
  00570	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 202  :             goto exit;

  00576	e9 91 05 00 00	 jmp	 $exit$59
$LN30@main:

; 203  :         }
; 204  : 
; 205  :         if ( o_faketape )

  0057b	83 7c 24 54 00	 cmp	 DWORD PTR o_faketape$[rsp], 0
  00580	74 1e		 je	 SHORT $LN31@main

; 206  :             rc = fet_write( fetb, &lab, (U16)sizeof( lab ) );

  00582	66 41 b8 50 00	 mov	 r8w, 80			; 00000050H
  00587	48 8d 94 24 10
	01 00 00	 lea	 rdx, QWORD PTR lab$[rsp]
  0058f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR fetb$[rsp]
  00594	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_write
  0059a	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
  0059e	eb 1d		 jmp	 SHORT $LN32@main
$LN31@main:

; 207  :         else
; 208  :             rc = het_write( hetb, &lab, sizeof( lab ) );

  005a0	41 b8 50 00 00
	00		 mov	 r8d, 80			; 00000050H
  005a6	48 8d 94 24 10
	01 00 00	 lea	 rdx, QWORD PTR lab$[rsp]
  005ae	48 8b 4c 24 68	 mov	 rcx, QWORD PTR hetb$[rsp]
  005b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_write
  005b9	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
$LN32@main:

; 209  :         if( rc < 0 )

  005bd	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  005c2	0f 8d f2 00 00
	00		 jge	 $LN33@main

; 210  :         {
; 211  :             if ( o_faketape )

  005c8	83 7c 24 54 00	 cmp	 DWORD PTR o_faketape$[rsp], 0
  005cd	74 74		 je	 SHORT $LN34@main

; 212  :                 FWRMSG( stderr, HHC00075, "E", "fet_write() for VOL1", fet_error( rc ) );

  005cf	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  005d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_error
  005d9	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv241[rsp], rax
  005e1	b9 02 00 00 00	 mov	 ecx, 2
  005e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005ec	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv241[rsp]
  005f4	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  005f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159420
  00600	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00605	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159421
  0060c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00611	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159422
  00618	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0061d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00622	41 b9 03 00 00
	00		 mov	 r9d, 3
  00628	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159423
  0062f	ba d4 00 00 00	 mov	 edx, 212		; 000000d4H
  00634	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159424
  0063b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00641	eb 72		 jmp	 SHORT $LN35@main
$LN34@main:

; 213  :             else
; 214  :                 FWRMSG( stderr, HHC00075, "E", "het_write() for VOL1", het_error( rc ) );

  00643	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  00647	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  0064d	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv254[rsp], rax
  00655	b9 02 00 00 00	 mov	 ecx, 2
  0065a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00660	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR tv254[rsp]
  00668	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0066d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159425
  00674	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00679	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159426
  00680	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00685	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159427
  0068c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00691	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00696	41 b9 03 00 00
	00		 mov	 r9d, 3
  0069c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159428
  006a3	ba d6 00 00 00	 mov	 edx, 214		; 000000d6H
  006a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159429
  006af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN35@main:

; 215  :             goto exit;

  006b5	e9 52 04 00 00	 jmp	 $exit$59
$LN33@main:

; 216  :         }
; 217  : 
; 218  :         rc = sl_hdr1( &lab, SL_INITDSN, NULL, 0, 0, NULL, 0 );

  006ba	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  006c2	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  006cb	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  006d3	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  006db	45 33 c9	 xor	 r9d, r9d
  006de	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159430
  006e5	ba 02 00 00 00	 mov	 edx, 2
  006ea	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR lab$[rsp]
  006f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sl_ds1
  006f8	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 219  :         if( rc < 0 )

  006fc	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  00701	7d 77		 jge	 SHORT $LN36@main

; 220  :         {
; 221  :             // "Error in function %s: %s"
; 222  :             FWRMSG( stderr, HHC00075, "E", "sl_hdr1()", sl_error( rc ) );

  00703	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  00707	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sl_error
  0070d	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv277[rsp], rax
  00715	b9 02 00 00 00	 mov	 ecx, 2
  0071a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00720	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tv277[rsp]
  00728	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0072d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159432
  00734	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00739	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159433
  00740	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00745	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159434
  0074c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00751	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00756	41 b9 03 00 00
	00		 mov	 r9d, 3
  0075c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159435
  00763	ba de 00 00 00	 mov	 edx, 222		; 000000deH
  00768	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159436
  0076f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 223  :             goto exit;

  00775	e9 92 03 00 00	 jmp	 $exit$59
$LN36@main:

; 224  :         }
; 225  : 
; 226  :         if ( o_faketape )

  0077a	83 7c 24 54 00	 cmp	 DWORD PTR o_faketape$[rsp], 0
  0077f	74 1e		 je	 SHORT $LN37@main

; 227  :             rc = fet_write( fetb, &lab, (U16)sizeof(lab) );

  00781	66 41 b8 50 00	 mov	 r8w, 80			; 00000050H
  00786	48 8d 94 24 10
	01 00 00	 lea	 rdx, QWORD PTR lab$[rsp]
  0078e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR fetb$[rsp]
  00793	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_write
  00799	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
  0079d	eb 1d		 jmp	 SHORT $LN38@main
$LN37@main:

; 228  :         else
; 229  :             rc = het_write( hetb, &lab, sizeof( lab ) );

  0079f	41 b8 50 00 00
	00		 mov	 r8d, 80			; 00000050H
  007a5	48 8d 94 24 10
	01 00 00	 lea	 rdx, QWORD PTR lab$[rsp]
  007ad	48 8b 4c 24 68	 mov	 rcx, QWORD PTR hetb$[rsp]
  007b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_write
  007b8	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
$LN38@main:

; 230  :         if( rc < 0 )

  007bc	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  007c1	0f 8d f2 00 00
	00		 jge	 $LN39@main

; 231  :         {
; 232  :             if ( o_faketape )

  007c7	83 7c 24 54 00	 cmp	 DWORD PTR o_faketape$[rsp], 0
  007cc	74 74		 je	 SHORT $LN40@main

; 233  :                 FWRMSG( stderr, HHC00075, "E", "fet_write() for HDR1", fet_error( rc ) );

  007ce	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  007d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_error
  007d8	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv333[rsp], rax
  007e0	b9 02 00 00 00	 mov	 ecx, 2
  007e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007eb	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tv333[rsp]
  007f3	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  007f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159442
  007ff	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00804	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159443
  0080b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00810	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159444
  00817	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0081c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00821	41 b9 03 00 00
	00		 mov	 r9d, 3
  00827	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159445
  0082e	ba e9 00 00 00	 mov	 edx, 233		; 000000e9H
  00833	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159446
  0083a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00840	eb 72		 jmp	 SHORT $LN41@main
$LN40@main:

; 234  :             else
; 235  :                 FWRMSG( stderr, HHC00075, "E", "het_write() for HDR1", het_error( rc ) );

  00842	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  00846	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  0084c	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv346[rsp], rax
  00854	b9 02 00 00 00	 mov	 ecx, 2
  00859	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0085f	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tv346[rsp]
  00867	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0086c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159447
  00873	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00878	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159448
  0087f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00884	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159449
  0088b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00890	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00895	41 b9 03 00 00
	00		 mov	 r9d, 3
  0089b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159450
  008a2	ba eb 00 00 00	 mov	 edx, 235		; 000000ebH
  008a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159451
  008ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN41@main:

; 236  :             goto exit;

  008b4	e9 53 02 00 00	 jmp	 $exit$59
$LN39@main:

; 237  :         }
; 238  : 
; 239  :     }

  008b9	e9 2f 01 00 00	 jmp	 $LN29@main
$LN28@main:

; 240  :     else if( o_nl )

  008be	83 7c 24 60 00	 cmp	 DWORD PTR o_nl$[rsp], 0
  008c3	0f 84 24 01 00
	00		 je	 $LN42@main

; 241  :     {
; 242  :         if ( o_faketape )

  008c9	83 7c 24 54 00	 cmp	 DWORD PTR o_faketape$[rsp], 0
  008ce	74 11		 je	 SHORT $LN43@main

; 243  :             rc = fet_tapemark( fetb );

  008d0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR fetb$[rsp]
  008d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_tapemark
  008db	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
  008df	eb 0f		 jmp	 SHORT $LN44@main
$LN43@main:

; 244  :         else
; 245  :             rc = het_tapemark( hetb );

  008e1	48 8b 4c 24 68	 mov	 rcx, QWORD PTR hetb$[rsp]
  008e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_tapemark
  008ec	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
$LN44@main:

; 246  :         if( rc < 0 )

  008f0	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  008f5	0f 8d f2 00 00
	00		 jge	 $LN45@main

; 247  :         {
; 248  :             if ( o_faketape )

  008fb	83 7c 24 54 00	 cmp	 DWORD PTR o_faketape$[rsp], 0
  00900	74 74		 je	 SHORT $LN46@main

; 249  :                 FWRMSG( stderr, HHC00075, "E", "fet_tapemark()", fet_error( rc ) );

  00902	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  00906	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_error
  0090c	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv367[rsp], rax
  00914	b9 02 00 00 00	 mov	 ecx, 2
  00919	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0091f	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR tv367[rsp]
  00927	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0092c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159458
  00933	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00938	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159459
  0093f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00944	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159460
  0094b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00950	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00955	41 b9 03 00 00
	00		 mov	 r9d, 3
  0095b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159461
  00962	ba f9 00 00 00	 mov	 edx, 249		; 000000f9H
  00967	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159462
  0096e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00974	eb 72		 jmp	 SHORT $LN47@main
$LN46@main:

; 250  :             else
; 251  :                 FWRMSG( stderr, HHC00075, "E", "het_tapemark()", het_error( rc ) );

  00976	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  0097a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  00980	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv380[rsp], rax
  00988	b9 02 00 00 00	 mov	 ecx, 2
  0098d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00993	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv380[rsp]
  0099b	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  009a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159463
  009a7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  009ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159464
  009b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  009b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159465
  009bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  009c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  009cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159466
  009d6	ba fb 00 00 00	 mov	 edx, 251		; 000000fbH
  009db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159467
  009e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN47@main:

; 252  :             goto exit;

  009e8	e9 1f 01 00 00	 jmp	 $exit$59
$LN45@main:
$LN42@main:
$LN29@main:

; 253  :         }
; 254  :     }
; 255  : 
; 256  :     if ( o_faketape )

  009ed	83 7c 24 54 00	 cmp	 DWORD PTR o_faketape$[rsp], 0
  009f2	74 11		 je	 SHORT $LN48@main

; 257  :         rc = fet_tapemark( fetb );

  009f4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR fetb$[rsp]
  009f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_tapemark
  009ff	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
  00a03	eb 0f		 jmp	 SHORT $LN49@main
$LN48@main:

; 258  :     else
; 259  :         rc = het_tapemark( hetb );

  00a05	48 8b 4c 24 68	 mov	 rcx, QWORD PTR hetb$[rsp]
  00a0a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_tapemark
  00a10	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
$LN49@main:

; 260  :     if( rc < 0 )

  00a14	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  00a19	0f 8d ed 00 00
	00		 jge	 $LN50@main

; 261  :     {
; 262  :         if ( o_faketape )

  00a1f	83 7c 24 54 00	 cmp	 DWORD PTR o_faketape$[rsp], 0
  00a24	74 74		 je	 SHORT $LN51@main

; 263  :             FWRMSG( stderr, HHC00075, "E", "fet_tapemark()", fet_error( rc ) );

  00a26	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  00a2a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_error
  00a30	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv400[rsp], rax
  00a38	b9 02 00 00 00	 mov	 ecx, 2
  00a3d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a43	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv400[rsp]
  00a4b	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00a50	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159473
  00a57	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a5c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159474
  00a63	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a68	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159475
  00a6f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a74	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a79	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a7f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159476
  00a86	ba 07 01 00 00	 mov	 edx, 263		; 00000107H
  00a8b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159477
  00a92	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00a98	eb 72		 jmp	 SHORT $LN52@main
$LN51@main:

; 264  :         else
; 265  :             FWRMSG( stderr, HHC00075, "E", "het_tapemark()", het_error( rc ) );

  00a9a	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  00a9e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  00aa4	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv413[rsp], rax
  00aac	b9 02 00 00 00	 mov	 ecx, 2
  00ab1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00ab7	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv413[rsp]
  00abf	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00ac4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159478
  00acb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00ad0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159479
  00ad7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00adc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159480
  00ae3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ae8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00aed	41 b9 03 00 00
	00		 mov	 r9d, 3
  00af3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159481
  00afa	ba 09 01 00 00	 mov	 edx, 265		; 00000109H
  00aff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159482
  00b06	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN52@main:
$LN50@main:
$exit$59:

; 266  :         goto exit;
; 267  :     }
; 268  : 
; 269  : exit:
; 270  :     if ( o_faketape)

  00b0c	83 7c 24 54 00	 cmp	 DWORD PTR o_faketape$[rsp], 0
  00b11	74 0d		 je	 SHORT $LN53@main

; 271  :         fet_close( &fetb );

  00b13	48 8d 4c 24 70	 lea	 rcx, QWORD PTR fetb$[rsp]
  00b18	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_close
  00b1e	eb 0b		 jmp	 SHORT $LN54@main
$LN53@main:

; 272  :     else
; 273  :         het_close( &hetb );

  00b20	48 8d 4c 24 68	 lea	 rcx, QWORD PTR hetb$[rsp]
  00b25	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_close
$LN54@main:

; 274  : 
; 275  :     return( rc < 0 );

  00b2b	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  00b30	7d 0a		 jge	 SHORT $LN56@main
  00b32	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR tv462[rsp], 1
  00b3a	eb 08		 jmp	 SHORT $LN57@main
$LN56@main:
  00b3c	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv462[rsp], 0
$LN57@main:
  00b44	8b 44 24 7c	 mov	 eax, DWORD PTR tv462[rsp]

; 276  : }

  00b48	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00b50	48 33 cc	 xor	 rcx, rsp
  00b53	e8 00 00 00 00	 call	 __security_check_cookie
  00b58	48 81 c4 78 01
	00 00		 add	 rsp, 376		; 00000178H
  00b5f	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hetinit.c
_TEXT	SEGMENT
i$ = 32
source$ = 64
het_string_to_upper PROC

; 45   : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 46   : int i;
; 47   : 
; 48   :     for (i = 0; source[i] != '\0'; i++)

  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00011	eb 0a		 jmp	 SHORT $LN4@het_string
$LN2@het_string:
  00013	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00017	ff c0		 inc	 eax
  00019	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@het_string:
  0001d	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR source$[rsp]
  00027	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0002b	85 c0		 test	 eax, eax
  0002d	74 25		 je	 SHORT $LN3@het_string

; 49   :         source[i] = toupper(source[i]);

  0002f	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00034	48 8b 4c 24 40	 mov	 rcx, QWORD PTR source$[rsp]
  00039	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0003d	8b c8		 mov	 ecx, eax
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_toupper
  00045	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  0004a	48 8b 54 24 40	 mov	 rdx, QWORD PTR source$[rsp]
  0004f	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00052	eb bf		 jmp	 SHORT $LN2@het_string
$LN3@het_string:

; 50   : }

  00054	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00058	c3		 ret	 0
het_string_to_upper ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hetinit.c
_TEXT	SEGMENT
pgm$ = 80
usage	PROC

; 36   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 37   :     // "Usage: %s ...
; 38   :     WRMSG( HHC02729, "I", pgm );

  00009	b9 01 00 00 00	 mov	 ecx, 1
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00014	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pgm$[rsp]
  00019	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159321
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159322
  00031	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00036	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00041	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159323
  00048	ba 26 00 00 00	 mov	 edx, 38			; 00000026H
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159324
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 39   : }

  0005a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005e	c3		 ret	 0
usage	ENDP
_TEXT	ENDS
END
