; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	MACTabAdd
PUBLIC	MACTabRem
PUBLIC	IsMACTab
PUBLIC	EtherIpv4CkSumOffload
PUBLIC	CheckSum
PUBLIC	InetCheckSum
PUBLIC	PseudoHdrCheckSum
PUBLIC	read_tuntap
EXTRN	__imp_htons:PROC
EXTRN	__imp_ntohs:PROC
EXTRN	tt32_read:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memcmp:PROC
EXTRN	__security_cookie:QWORD
pdata	SEGMENT
$pdata$MACTabAdd DD imagerel $LN11
	DD	imagerel $LN11+218
	DD	imagerel $unwind$MACTabAdd
$pdata$MACTabRem DD imagerel $LN7
	DD	imagerel $LN7+120
	DD	imagerel $unwind$MACTabRem
$pdata$IsMACTab DD imagerel $LN8
	DD	imagerel $LN8+115
	DD	imagerel $unwind$IsMACTab
$pdata$EtherIpv4CkSumOffload DD imagerel $LN15
	DD	imagerel $LN15+658
	DD	imagerel $unwind$EtherIpv4CkSumOffload
$pdata$CheckSum DD imagerel $LN12
	DD	imagerel $LN12+2079
	DD	imagerel $unwind$CheckSum
$pdata$InetCheckSum DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$InetCheckSum
$pdata$PseudoHdrCheckSum DD imagerel $LN3
	DD	imagerel $LN3+150
	DD	imagerel $unwind$PseudoHdrCheckSum
$pdata$read_tuntap DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$read_tuntap
pdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:PseudoHdrCheckSum
	DD	013H
	DD	084H
voltbl	ENDS
xdata	SEGMENT
$unwind$MACTabAdd DD 031501H
	DD	070116215H
	DD	06010H
$unwind$MACTabRem DD 020f01H
	DD	0700b520fH
$unwind$IsMACTab DD 010e01H
	DD	0620eH
$unwind$EtherIpv4CkSumOffload DD 010e01H
	DD	0c20eH
$unwind$CheckSum DD 010d01H
	DD	0620dH
$unwind$InetCheckSum DD 010d01H
	DD	0420dH
$unwind$PseudoHdrCheckSum DD 011819H
	DD	08209H
	DD	imagerel __GSHandlerCheck
	DD	030H
$unwind$read_tuntap DD 011701H
	DD	06217H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\netsupp.c
_TEXT	SEGMENT
pSum$ = 8
FoldSum32 PROC

; 97   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 98   :     *pSum  = (*pSum >> 16) + (*pSum & 0xFFFF);  // (add hi 16 to lo 16)

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR pSum$[rsp]
  0000a	8b 00		 mov	 eax, DWORD PTR [rax]
  0000c	c1 e8 10	 shr	 eax, 16
  0000f	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pSum$[rsp]
  00014	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00016	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0001c	03 c1		 add	 eax, ecx
  0001e	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pSum$[rsp]
  00023	89 01		 mov	 DWORD PTR [rcx], eax

; 99   :     *pSum  = (*pSum >> 16) + (*pSum & 0xFFFF);  // (add carry (if any))

  00025	48 8b 44 24 08	 mov	 rax, QWORD PTR pSum$[rsp]
  0002a	8b 00		 mov	 eax, DWORD PTR [rax]
  0002c	c1 e8 10	 shr	 eax, 16
  0002f	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pSum$[rsp]
  00034	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00036	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0003c	03 c1		 add	 eax, ecx
  0003e	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pSum$[rsp]
  00043	89 01		 mov	 DWORD PTR [rcx], eax

; 100  : }

  00045	c3		 ret	 0
FoldSum32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\netsupp.c
_TEXT	SEGMENT
nBytesRead$ = 32
fd$ = 64
buffer$ = 72
nBuffLen$ = 80
secs$ = 88
read_tuntap PROC

; 367  : {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 368  :     int nBytesRead;
; 369  : 
; 370  : #if !defined( OPTION_W32_CTCI ) // (i.e. Linux only)
; 371  : 
; 372  :     int rc;
; 373  :     fd_set readset;
; 374  :     struct timeval tv = {secs,0};
; 375  :     FD_ZERO( &readset );
; 376  :     FD_SET( fd, &readset );
; 377  :     while ((rc = select( fd+1, &readset, NULL, NULL, &tv )) < 0 && errno == EINTR);
; 378  :     if (rc < 0)
; 379  :         return -1;
; 380  :     if (rc == 0)
; 381  :         return 0;
; 382  : 
; 383  : #endif // !defined( OPTION_W32_CTCI ) // (i.e. Linux only)
; 384  : 
; 385  :     nBytesRead = TUNTAP_Read( fd, buffer, nBuffLen );

  00017	44 8b 44 24 50	 mov	 r8d, DWORD PTR nBuffLen$[rsp]
  0001c	48 8b 54 24 48	 mov	 rdx, QWORD PTR buffer$[rsp]
  00021	8b 4c 24 40	 mov	 ecx, DWORD PTR fd$[rsp]
  00025	e8 00 00 00 00	 call	 tt32_read
  0002a	89 44 24 20	 mov	 DWORD PTR nBytesRead$[rsp], eax

; 386  :     return nBytesRead;

  0002e	8b 44 24 20	 mov	 eax, DWORD PTR nBytesRead$[rsp]

; 387  : }

  00032	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00036	c3		 ret	 0
read_tuntap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\netsupp.c
_TEXT	SEGMENT
ph$ = 32
__$ArrayPad$ = 48
pIP$ = 80
PseudoHdrCheckSum PROC

; 107  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 44 24 30	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 108  :     pseudo_hdr  ph;
; 109  : 
; 110  :     ph.ph_ip_src  =  pIP->ip_src;

  00018	48 8b 44 24 50	 mov	 rax, QWORD PTR pIP$[rsp]
  0001d	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00020	89 44 24 20	 mov	 DWORD PTR ph$[rsp], eax

; 111  :     ph.ph_ip_dst  =  pIP->ip_dst;

  00024	48 8b 44 24 50	 mov	 rax, QWORD PTR pIP$[rsp]
  00029	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0002c	89 44 24 24	 mov	 DWORD PTR ph$[rsp+4], eax

; 112  :     ph.ph_zero    =  0;

  00030	c6 44 24 28 00	 mov	 BYTE PTR ph$[rsp+8], 0

; 113  :     ph.ph_ip_p    =  pIP->ip_p;

  00035	48 8b 44 24 50	 mov	 rax, QWORD PTR pIP$[rsp]
  0003a	0f b6 40 09	 movzx	 eax, BYTE PTR [rax+9]
  0003e	88 44 24 29	 mov	 BYTE PTR ph$[rsp+9], al

; 114  :     ph.ph_ulen    =  htons( ntohs( pIP->ip_len ) - (pIP->ip_hl * 4) );

  00042	48 8b 44 24 50	 mov	 rax, QWORD PTR pIP$[rsp]
  00047	0f b7 48 02	 movzx	 ecx, WORD PTR [rax+2]
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ntohs
  00051	0f b7 c0	 movzx	 eax, ax
  00054	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pIP$[rsp]
  00059	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0005c	80 e1 0f	 and	 cl, 15
  0005f	0f b6 c9	 movzx	 ecx, cl
  00062	c1 e1 02	 shl	 ecx, 2
  00065	2b c1		 sub	 eax, ecx
  00067	0f b7 c8	 movzx	 ecx, ax
  0006a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_htons
  00070	66 89 44 24 2a	 mov	 WORD PTR ph$[rsp+10], ax

; 115  : 
; 116  :     return CheckSum( (BYTE*) &ph, pseudo_hdr_size );

  00075	ba 0c 00 00 00	 mov	 edx, 12
  0007a	48 8d 4c 24 20	 lea	 rcx, QWORD PTR ph$[rsp]
  0007f	e8 00 00 00 00	 call	 CheckSum

; 117  : }

  00084	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00089	48 33 cc	 xor	 rcx, rsp
  0008c	e8 00 00 00 00	 call	 __security_check_cookie
  00091	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00095	c3		 ret	 0
PseudoHdrCheckSum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\netsupp.c
_TEXT	SEGMENT
pBuffer$ = 48
nBytes$ = 56
InetCheckSum PROC

; 253  : {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 254  :     return ~CheckSum( pBuffer, nBytes );    // COMPLEMENTED!

  0000d	8b 54 24 38	 mov	 edx, DWORD PTR nBytes$[rsp]
  00011	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pBuffer$[rsp]
  00016	e8 00 00 00 00	 call	 CheckSum
  0001b	0f b7 c0	 movzx	 eax, ax
  0001e	f7 d0		 not	 eax

; 255  : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
InetCheckSum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\netsupp.c
_TEXT	SEGMENT
nSum$ = 32
puShort$ = 40
pBuffer$ = 64
nBytes$ = 72
CheckSum PROC

; 124  : {

$LN12:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 125  :     U32   nSum     =  0;

  0000d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR nSum$[rsp], 0

; 126  :     U16*  puShort  =  (U16*) pBuffer;

  00015	48 8b 44 24 40	 mov	 rax, QWORD PTR pBuffer$[rsp]
  0001a	48 89 44 24 28	 mov	 QWORD PTR puShort$[rsp], rax
$LN2@CheckSum:

; 127  : 
; 128  :     while ((nBytes -= 128) >= 0)

  0001f	8b 44 24 48	 mov	 eax, DWORD PTR nBytes$[rsp]
  00023	2d 80 00 00 00	 sub	 eax, 128		; 00000080H
  00028	89 44 24 48	 mov	 DWORD PTR nBytes$[rsp], eax
  0002c	83 7c 24 48 00	 cmp	 DWORD PTR nBytes$[rsp], 0
  00031	0f 8c 5e 05 00
	00		 jl	 $LN3@CheckSum

; 129  :     {
; 130  :         nSum  +=  *( puShort +  0 );

  00037	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0003c	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0003f	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00043	03 c8		 add	 ecx, eax
  00045	8b c1		 mov	 eax, ecx
  00047	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 131  :         nSum  +=  *( puShort +  1 );

  0004b	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00050	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  00054	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00058	03 c8		 add	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 132  :         nSum  +=  *( puShort +  2 );

  00060	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00065	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00069	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  0006d	03 c8		 add	 ecx, eax
  0006f	8b c1		 mov	 eax, ecx
  00071	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 133  :         nSum  +=  *( puShort +  3 );

  00075	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0007a	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  0007e	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00082	03 c8		 add	 ecx, eax
  00084	8b c1		 mov	 eax, ecx
  00086	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 134  :         nSum  +=  *( puShort +  4 );

  0008a	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0008f	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00093	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00097	03 c8		 add	 ecx, eax
  00099	8b c1		 mov	 eax, ecx
  0009b	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 135  :         nSum  +=  *( puShort +  5 );

  0009f	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  000a4	0f b7 40 0a	 movzx	 eax, WORD PTR [rax+10]
  000a8	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  000ac	03 c8		 add	 ecx, eax
  000ae	8b c1		 mov	 eax, ecx
  000b0	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 136  :         nSum  +=  *( puShort +  6 );

  000b4	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  000b9	0f b7 40 0c	 movzx	 eax, WORD PTR [rax+12]
  000bd	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  000c1	03 c8		 add	 ecx, eax
  000c3	8b c1		 mov	 eax, ecx
  000c5	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 137  :         nSum  +=  *( puShort +  7 );

  000c9	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  000ce	0f b7 40 0e	 movzx	 eax, WORD PTR [rax+14]
  000d2	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  000d6	03 c8		 add	 ecx, eax
  000d8	8b c1		 mov	 eax, ecx
  000da	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 138  :         nSum  +=  *( puShort +  8 );

  000de	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  000e3	0f b7 40 10	 movzx	 eax, WORD PTR [rax+16]
  000e7	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  000eb	03 c8		 add	 ecx, eax
  000ed	8b c1		 mov	 eax, ecx
  000ef	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 139  :         nSum  +=  *( puShort +  9 );

  000f3	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  000f8	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  000fc	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00100	03 c8		 add	 ecx, eax
  00102	8b c1		 mov	 eax, ecx
  00104	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 140  :         nSum  +=  *( puShort + 10 );

  00108	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0010d	0f b7 40 14	 movzx	 eax, WORD PTR [rax+20]
  00111	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00115	03 c8		 add	 ecx, eax
  00117	8b c1		 mov	 eax, ecx
  00119	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 141  :         nSum  +=  *( puShort + 11 );

  0011d	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00122	0f b7 40 16	 movzx	 eax, WORD PTR [rax+22]
  00126	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  0012a	03 c8		 add	 ecx, eax
  0012c	8b c1		 mov	 eax, ecx
  0012e	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 142  :         nSum  +=  *( puShort + 12 );

  00132	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00137	0f b7 40 18	 movzx	 eax, WORD PTR [rax+24]
  0013b	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  0013f	03 c8		 add	 ecx, eax
  00141	8b c1		 mov	 eax, ecx
  00143	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 143  :         nSum  +=  *( puShort + 13 );

  00147	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0014c	0f b7 40 1a	 movzx	 eax, WORD PTR [rax+26]
  00150	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00154	03 c8		 add	 ecx, eax
  00156	8b c1		 mov	 eax, ecx
  00158	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 144  :         nSum  +=  *( puShort + 14 );

  0015c	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00161	0f b7 40 1c	 movzx	 eax, WORD PTR [rax+28]
  00165	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00169	03 c8		 add	 ecx, eax
  0016b	8b c1		 mov	 eax, ecx
  0016d	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 145  :         nSum  +=  *( puShort + 15 );

  00171	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00176	0f b7 40 1e	 movzx	 eax, WORD PTR [rax+30]
  0017a	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  0017e	03 c8		 add	 ecx, eax
  00180	8b c1		 mov	 eax, ecx
  00182	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 146  :         nSum  +=  *( puShort + 16 );

  00186	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0018b	0f b7 40 20	 movzx	 eax, WORD PTR [rax+32]
  0018f	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00193	03 c8		 add	 ecx, eax
  00195	8b c1		 mov	 eax, ecx
  00197	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 147  :         nSum  +=  *( puShort + 17 );

  0019b	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  001a0	0f b7 40 22	 movzx	 eax, WORD PTR [rax+34]
  001a4	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  001a8	03 c8		 add	 ecx, eax
  001aa	8b c1		 mov	 eax, ecx
  001ac	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 148  :         nSum  +=  *( puShort + 18 );

  001b0	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  001b5	0f b7 40 24	 movzx	 eax, WORD PTR [rax+36]
  001b9	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  001bd	03 c8		 add	 ecx, eax
  001bf	8b c1		 mov	 eax, ecx
  001c1	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 149  :         nSum  +=  *( puShort + 19 );

  001c5	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  001ca	0f b7 40 26	 movzx	 eax, WORD PTR [rax+38]
  001ce	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  001d2	03 c8		 add	 ecx, eax
  001d4	8b c1		 mov	 eax, ecx
  001d6	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 150  :         nSum  +=  *( puShort + 20 );

  001da	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  001df	0f b7 40 28	 movzx	 eax, WORD PTR [rax+40]
  001e3	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  001e7	03 c8		 add	 ecx, eax
  001e9	8b c1		 mov	 eax, ecx
  001eb	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 151  :         nSum  +=  *( puShort + 21 );

  001ef	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  001f4	0f b7 40 2a	 movzx	 eax, WORD PTR [rax+42]
  001f8	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  001fc	03 c8		 add	 ecx, eax
  001fe	8b c1		 mov	 eax, ecx
  00200	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 152  :         nSum  +=  *( puShort + 22 );

  00204	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00209	0f b7 40 2c	 movzx	 eax, WORD PTR [rax+44]
  0020d	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00211	03 c8		 add	 ecx, eax
  00213	8b c1		 mov	 eax, ecx
  00215	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 153  :         nSum  +=  *( puShort + 23 );

  00219	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0021e	0f b7 40 2e	 movzx	 eax, WORD PTR [rax+46]
  00222	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00226	03 c8		 add	 ecx, eax
  00228	8b c1		 mov	 eax, ecx
  0022a	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 154  :         nSum  +=  *( puShort + 24 );

  0022e	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00233	0f b7 40 30	 movzx	 eax, WORD PTR [rax+48]
  00237	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  0023b	03 c8		 add	 ecx, eax
  0023d	8b c1		 mov	 eax, ecx
  0023f	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 155  :         nSum  +=  *( puShort + 25 );

  00243	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00248	0f b7 40 32	 movzx	 eax, WORD PTR [rax+50]
  0024c	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00250	03 c8		 add	 ecx, eax
  00252	8b c1		 mov	 eax, ecx
  00254	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 156  :         nSum  +=  *( puShort + 26 );

  00258	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0025d	0f b7 40 34	 movzx	 eax, WORD PTR [rax+52]
  00261	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00265	03 c8		 add	 ecx, eax
  00267	8b c1		 mov	 eax, ecx
  00269	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 157  :         nSum  +=  *( puShort + 27 );

  0026d	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00272	0f b7 40 36	 movzx	 eax, WORD PTR [rax+54]
  00276	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  0027a	03 c8		 add	 ecx, eax
  0027c	8b c1		 mov	 eax, ecx
  0027e	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 158  :         nSum  +=  *( puShort + 28 );

  00282	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00287	0f b7 40 38	 movzx	 eax, WORD PTR [rax+56]
  0028b	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  0028f	03 c8		 add	 ecx, eax
  00291	8b c1		 mov	 eax, ecx
  00293	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 159  :         nSum  +=  *( puShort + 29 );

  00297	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0029c	0f b7 40 3a	 movzx	 eax, WORD PTR [rax+58]
  002a0	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  002a4	03 c8		 add	 ecx, eax
  002a6	8b c1		 mov	 eax, ecx
  002a8	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 160  :         nSum  +=  *( puShort + 30 );

  002ac	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  002b1	0f b7 40 3c	 movzx	 eax, WORD PTR [rax+60]
  002b5	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  002b9	03 c8		 add	 ecx, eax
  002bb	8b c1		 mov	 eax, ecx
  002bd	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 161  :         nSum  +=  *( puShort + 31 );

  002c1	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  002c6	0f b7 40 3e	 movzx	 eax, WORD PTR [rax+62]
  002ca	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  002ce	03 c8		 add	 ecx, eax
  002d0	8b c1		 mov	 eax, ecx
  002d2	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 162  :         nSum  +=  *( puShort + 32 );

  002d6	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  002db	0f b7 40 40	 movzx	 eax, WORD PTR [rax+64]
  002df	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  002e3	03 c8		 add	 ecx, eax
  002e5	8b c1		 mov	 eax, ecx
  002e7	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 163  :         nSum  +=  *( puShort + 33 );

  002eb	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  002f0	0f b7 40 42	 movzx	 eax, WORD PTR [rax+66]
  002f4	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  002f8	03 c8		 add	 ecx, eax
  002fa	8b c1		 mov	 eax, ecx
  002fc	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 164  :         nSum  +=  *( puShort + 34 );

  00300	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00305	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00309	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  0030d	03 c8		 add	 ecx, eax
  0030f	8b c1		 mov	 eax, ecx
  00311	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 165  :         nSum  +=  *( puShort + 35 );

  00315	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0031a	0f b7 40 46	 movzx	 eax, WORD PTR [rax+70]
  0031e	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00322	03 c8		 add	 ecx, eax
  00324	8b c1		 mov	 eax, ecx
  00326	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 166  :         nSum  +=  *( puShort + 36 );

  0032a	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0032f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00333	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00337	03 c8		 add	 ecx, eax
  00339	8b c1		 mov	 eax, ecx
  0033b	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 167  :         nSum  +=  *( puShort + 37 );

  0033f	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00344	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  00348	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  0034c	03 c8		 add	 ecx, eax
  0034e	8b c1		 mov	 eax, ecx
  00350	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 168  :         nSum  +=  *( puShort + 38 );

  00354	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00359	0f b7 40 4c	 movzx	 eax, WORD PTR [rax+76]
  0035d	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00361	03 c8		 add	 ecx, eax
  00363	8b c1		 mov	 eax, ecx
  00365	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 169  :         nSum  +=  *( puShort + 39 );

  00369	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0036e	0f b7 40 4e	 movzx	 eax, WORD PTR [rax+78]
  00372	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00376	03 c8		 add	 ecx, eax
  00378	8b c1		 mov	 eax, ecx
  0037a	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 170  :         nSum  +=  *( puShort + 40 );

  0037e	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00383	0f b7 40 50	 movzx	 eax, WORD PTR [rax+80]
  00387	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  0038b	03 c8		 add	 ecx, eax
  0038d	8b c1		 mov	 eax, ecx
  0038f	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 171  :         nSum  +=  *( puShort + 41 );

  00393	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00398	0f b7 40 52	 movzx	 eax, WORD PTR [rax+82]
  0039c	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  003a0	03 c8		 add	 ecx, eax
  003a2	8b c1		 mov	 eax, ecx
  003a4	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 172  :         nSum  +=  *( puShort + 42 );

  003a8	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  003ad	0f b7 40 54	 movzx	 eax, WORD PTR [rax+84]
  003b1	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  003b5	03 c8		 add	 ecx, eax
  003b7	8b c1		 mov	 eax, ecx
  003b9	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 173  :         nSum  +=  *( puShort + 43 );

  003bd	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  003c2	0f b7 40 56	 movzx	 eax, WORD PTR [rax+86]
  003c6	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  003ca	03 c8		 add	 ecx, eax
  003cc	8b c1		 mov	 eax, ecx
  003ce	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 174  :         nSum  +=  *( puShort + 44 );

  003d2	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  003d7	0f b7 40 58	 movzx	 eax, WORD PTR [rax+88]
  003db	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  003df	03 c8		 add	 ecx, eax
  003e1	8b c1		 mov	 eax, ecx
  003e3	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 175  :         nSum  +=  *( puShort + 45 );

  003e7	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  003ec	0f b7 40 5a	 movzx	 eax, WORD PTR [rax+90]
  003f0	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  003f4	03 c8		 add	 ecx, eax
  003f6	8b c1		 mov	 eax, ecx
  003f8	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 176  :         nSum  +=  *( puShort + 46 );

  003fc	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00401	0f b7 40 5c	 movzx	 eax, WORD PTR [rax+92]
  00405	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00409	03 c8		 add	 ecx, eax
  0040b	8b c1		 mov	 eax, ecx
  0040d	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 177  :         nSum  +=  *( puShort + 47 );

  00411	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00416	0f b7 40 5e	 movzx	 eax, WORD PTR [rax+94]
  0041a	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  0041e	03 c8		 add	 ecx, eax
  00420	8b c1		 mov	 eax, ecx
  00422	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 178  :         nSum  +=  *( puShort + 48 );

  00426	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0042b	0f b7 40 60	 movzx	 eax, WORD PTR [rax+96]
  0042f	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00433	03 c8		 add	 ecx, eax
  00435	8b c1		 mov	 eax, ecx
  00437	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 179  :         nSum  +=  *( puShort + 49 );

  0043b	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00440	0f b7 40 62	 movzx	 eax, WORD PTR [rax+98]
  00444	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00448	03 c8		 add	 ecx, eax
  0044a	8b c1		 mov	 eax, ecx
  0044c	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 180  :         nSum  +=  *( puShort + 50 );

  00450	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00455	0f b7 40 64	 movzx	 eax, WORD PTR [rax+100]
  00459	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  0045d	03 c8		 add	 ecx, eax
  0045f	8b c1		 mov	 eax, ecx
  00461	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 181  :         nSum  +=  *( puShort + 51 );

  00465	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0046a	0f b7 40 66	 movzx	 eax, WORD PTR [rax+102]
  0046e	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00472	03 c8		 add	 ecx, eax
  00474	8b c1		 mov	 eax, ecx
  00476	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 182  :         nSum  +=  *( puShort + 52 );

  0047a	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0047f	0f b7 40 68	 movzx	 eax, WORD PTR [rax+104]
  00483	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00487	03 c8		 add	 ecx, eax
  00489	8b c1		 mov	 eax, ecx
  0048b	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 183  :         nSum  +=  *( puShort + 53 );

  0048f	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00494	0f b7 40 6a	 movzx	 eax, WORD PTR [rax+106]
  00498	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  0049c	03 c8		 add	 ecx, eax
  0049e	8b c1		 mov	 eax, ecx
  004a0	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 184  :         nSum  +=  *( puShort + 54 );

  004a4	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  004a9	0f b7 40 6c	 movzx	 eax, WORD PTR [rax+108]
  004ad	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  004b1	03 c8		 add	 ecx, eax
  004b3	8b c1		 mov	 eax, ecx
  004b5	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 185  :         nSum  +=  *( puShort + 55 );

  004b9	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  004be	0f b7 40 6e	 movzx	 eax, WORD PTR [rax+110]
  004c2	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  004c6	03 c8		 add	 ecx, eax
  004c8	8b c1		 mov	 eax, ecx
  004ca	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 186  :         nSum  +=  *( puShort + 56 );

  004ce	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  004d3	0f b7 40 70	 movzx	 eax, WORD PTR [rax+112]
  004d7	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  004db	03 c8		 add	 ecx, eax
  004dd	8b c1		 mov	 eax, ecx
  004df	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 187  :         nSum  +=  *( puShort + 57 );

  004e3	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  004e8	0f b7 40 72	 movzx	 eax, WORD PTR [rax+114]
  004ec	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  004f0	03 c8		 add	 ecx, eax
  004f2	8b c1		 mov	 eax, ecx
  004f4	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 188  :         nSum  +=  *( puShort + 58 );

  004f8	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  004fd	0f b7 40 74	 movzx	 eax, WORD PTR [rax+116]
  00501	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00505	03 c8		 add	 ecx, eax
  00507	8b c1		 mov	 eax, ecx
  00509	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 189  :         nSum  +=  *( puShort + 59 );

  0050d	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00512	0f b7 40 76	 movzx	 eax, WORD PTR [rax+118]
  00516	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  0051a	03 c8		 add	 ecx, eax
  0051c	8b c1		 mov	 eax, ecx
  0051e	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 190  :         nSum  +=  *( puShort + 60 );

  00522	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00527	0f b7 40 78	 movzx	 eax, WORD PTR [rax+120]
  0052b	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  0052f	03 c8		 add	 ecx, eax
  00531	8b c1		 mov	 eax, ecx
  00533	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 191  :         nSum  +=  *( puShort + 61 );

  00537	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0053c	0f b7 40 7a	 movzx	 eax, WORD PTR [rax+122]
  00540	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00544	03 c8		 add	 ecx, eax
  00546	8b c1		 mov	 eax, ecx
  00548	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 192  :         nSum  +=  *( puShort + 62 );

  0054c	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00551	0f b7 40 7c	 movzx	 eax, WORD PTR [rax+124]
  00555	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00559	03 c8		 add	 ecx, eax
  0055b	8b c1		 mov	 eax, ecx
  0055d	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 193  :         nSum  +=  *( puShort + 63 );

  00561	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00566	0f b7 40 7e	 movzx	 eax, WORD PTR [rax+126]
  0056a	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  0056e	03 c8		 add	 ecx, eax
  00570	8b c1		 mov	 eax, ecx
  00572	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 194  :         puShort += 64;

  00576	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0057b	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00581	48 89 44 24 28	 mov	 QWORD PTR puShort$[rsp], rax

; 195  :         FoldSum32( &nSum );

  00586	48 8d 4c 24 20	 lea	 rcx, QWORD PTR nSum$[rsp]
  0058b	e8 00 00 00 00	 call	 FoldSum32

; 196  :     }

  00590	e9 8a fa ff ff	 jmp	 $LN2@CheckSum
$LN3@CheckSum:

; 197  :     nBytes += 128;

  00595	8b 44 24 48	 mov	 eax, DWORD PTR nBytes$[rsp]
  00599	05 80 00 00 00	 add	 eax, 128		; 00000080H
  0059e	89 44 24 48	 mov	 DWORD PTR nBytes$[rsp], eax
$LN4@CheckSum:

; 198  : 
; 199  :     while ((nBytes -= 32) >= 0)

  005a2	8b 44 24 48	 mov	 eax, DWORD PTR nBytes$[rsp]
  005a6	83 e8 20	 sub	 eax, 32			; 00000020H
  005a9	89 44 24 48	 mov	 DWORD PTR nBytes$[rsp], eax
  005ad	83 7c 24 48 00	 cmp	 DWORD PTR nBytes$[rsp], 0
  005b2	0f 8c 62 01 00
	00		 jl	 $LN5@CheckSum

; 200  :     {
; 201  :         nSum  +=  *( puShort +  0 );

  005b8	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  005bd	0f b7 00	 movzx	 eax, WORD PTR [rax]
  005c0	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  005c4	03 c8		 add	 ecx, eax
  005c6	8b c1		 mov	 eax, ecx
  005c8	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 202  :         nSum  +=  *( puShort +  1 );

  005cc	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  005d1	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  005d5	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  005d9	03 c8		 add	 ecx, eax
  005db	8b c1		 mov	 eax, ecx
  005dd	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 203  :         nSum  +=  *( puShort +  2 );

  005e1	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  005e6	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  005ea	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  005ee	03 c8		 add	 ecx, eax
  005f0	8b c1		 mov	 eax, ecx
  005f2	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 204  :         nSum  +=  *( puShort +  3 );

  005f6	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  005fb	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  005ff	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00603	03 c8		 add	 ecx, eax
  00605	8b c1		 mov	 eax, ecx
  00607	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 205  :         nSum  +=  *( puShort +  4 );

  0060b	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00610	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00614	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00618	03 c8		 add	 ecx, eax
  0061a	8b c1		 mov	 eax, ecx
  0061c	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 206  :         nSum  +=  *( puShort +  5 );

  00620	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00625	0f b7 40 0a	 movzx	 eax, WORD PTR [rax+10]
  00629	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  0062d	03 c8		 add	 ecx, eax
  0062f	8b c1		 mov	 eax, ecx
  00631	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 207  :         nSum  +=  *( puShort +  6 );

  00635	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0063a	0f b7 40 0c	 movzx	 eax, WORD PTR [rax+12]
  0063e	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00642	03 c8		 add	 ecx, eax
  00644	8b c1		 mov	 eax, ecx
  00646	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 208  :         nSum  +=  *( puShort +  7 );

  0064a	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0064f	0f b7 40 0e	 movzx	 eax, WORD PTR [rax+14]
  00653	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00657	03 c8		 add	 ecx, eax
  00659	8b c1		 mov	 eax, ecx
  0065b	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 209  :         nSum  +=  *( puShort +  8 );

  0065f	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00664	0f b7 40 10	 movzx	 eax, WORD PTR [rax+16]
  00668	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  0066c	03 c8		 add	 ecx, eax
  0066e	8b c1		 mov	 eax, ecx
  00670	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 210  :         nSum  +=  *( puShort +  9 );

  00674	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00679	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  0067d	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00681	03 c8		 add	 ecx, eax
  00683	8b c1		 mov	 eax, ecx
  00685	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 211  :         nSum  +=  *( puShort + 10 );

  00689	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0068e	0f b7 40 14	 movzx	 eax, WORD PTR [rax+20]
  00692	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00696	03 c8		 add	 ecx, eax
  00698	8b c1		 mov	 eax, ecx
  0069a	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 212  :         nSum  +=  *( puShort + 11 );

  0069e	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  006a3	0f b7 40 16	 movzx	 eax, WORD PTR [rax+22]
  006a7	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  006ab	03 c8		 add	 ecx, eax
  006ad	8b c1		 mov	 eax, ecx
  006af	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 213  :         nSum  +=  *( puShort + 12 );

  006b3	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  006b8	0f b7 40 18	 movzx	 eax, WORD PTR [rax+24]
  006bc	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  006c0	03 c8		 add	 ecx, eax
  006c2	8b c1		 mov	 eax, ecx
  006c4	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 214  :         nSum  +=  *( puShort + 13 );

  006c8	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  006cd	0f b7 40 1a	 movzx	 eax, WORD PTR [rax+26]
  006d1	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  006d5	03 c8		 add	 ecx, eax
  006d7	8b c1		 mov	 eax, ecx
  006d9	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 215  :         nSum  +=  *( puShort + 14 );

  006dd	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  006e2	0f b7 40 1c	 movzx	 eax, WORD PTR [rax+28]
  006e6	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  006ea	03 c8		 add	 ecx, eax
  006ec	8b c1		 mov	 eax, ecx
  006ee	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 216  :         nSum  +=  *( puShort + 15 );

  006f2	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  006f7	0f b7 40 1e	 movzx	 eax, WORD PTR [rax+30]
  006fb	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  006ff	03 c8		 add	 ecx, eax
  00701	8b c1		 mov	 eax, ecx
  00703	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 217  :         puShort += 16;

  00707	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0070c	48 83 c0 20	 add	 rax, 32			; 00000020H
  00710	48 89 44 24 28	 mov	 QWORD PTR puShort$[rsp], rax

; 218  :     }

  00715	e9 88 fe ff ff	 jmp	 $LN4@CheckSum
$LN5@CheckSum:

; 219  :     nBytes += 32;

  0071a	8b 44 24 48	 mov	 eax, DWORD PTR nBytes$[rsp]
  0071e	83 c0 20	 add	 eax, 32			; 00000020H
  00721	89 44 24 48	 mov	 DWORD PTR nBytes$[rsp], eax

; 220  : 
; 221  :     FoldSum32( &nSum );

  00725	48 8d 4c 24 20	 lea	 rcx, QWORD PTR nSum$[rsp]
  0072a	e8 00 00 00 00	 call	 FoldSum32
$LN6@CheckSum:

; 222  : 
; 223  :     while ((nBytes -= 8) >= 0)

  0072f	8b 44 24 48	 mov	 eax, DWORD PTR nBytes$[rsp]
  00733	83 e8 08	 sub	 eax, 8
  00736	89 44 24 48	 mov	 DWORD PTR nBytes$[rsp], eax
  0073a	83 7c 24 48 00	 cmp	 DWORD PTR nBytes$[rsp], 0
  0073f	7c 63		 jl	 SHORT $LN7@CheckSum

; 224  :     {
; 225  :         nSum  +=  *( puShort + 0 );

  00741	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00746	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00749	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  0074d	03 c8		 add	 ecx, eax
  0074f	8b c1		 mov	 eax, ecx
  00751	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 226  :         nSum  +=  *( puShort + 1 );

  00755	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0075a	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  0075e	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00762	03 c8		 add	 ecx, eax
  00764	8b c1		 mov	 eax, ecx
  00766	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 227  :         nSum  +=  *( puShort + 2 );

  0076a	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  0076f	0f b7 40 04	 movzx	 eax, WORD PTR [rax+4]
  00773	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00777	03 c8		 add	 ecx, eax
  00779	8b c1		 mov	 eax, ecx
  0077b	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 228  :         nSum  +=  *( puShort + 3 );

  0077f	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00784	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  00788	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  0078c	03 c8		 add	 ecx, eax
  0078e	8b c1		 mov	 eax, ecx
  00790	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 229  :         puShort += 4;

  00794	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  00799	48 83 c0 08	 add	 rax, 8
  0079d	48 89 44 24 28	 mov	 QWORD PTR puShort$[rsp], rax

; 230  :     }

  007a2	eb 8b		 jmp	 SHORT $LN6@CheckSum
$LN7@CheckSum:

; 231  :     nBytes += 8;

  007a4	8b 44 24 48	 mov	 eax, DWORD PTR nBytes$[rsp]
  007a8	83 c0 08	 add	 eax, 8
  007ab	89 44 24 48	 mov	 DWORD PTR nBytes$[rsp], eax
$LN8@CheckSum:

; 232  : 
; 233  :     while ((nBytes -= 2) >= 0)

  007af	8b 44 24 48	 mov	 eax, DWORD PTR nBytes$[rsp]
  007b3	83 e8 02	 sub	 eax, 2
  007b6	89 44 24 48	 mov	 DWORD PTR nBytes$[rsp], eax
  007ba	83 7c 24 48 00	 cmp	 DWORD PTR nBytes$[rsp], 0
  007bf	7c 24		 jl	 SHORT $LN9@CheckSum

; 234  :     {
; 235  :         nSum  +=  *( puShort + 0 );

  007c1	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  007c6	0f b7 00	 movzx	 eax, WORD PTR [rax]
  007c9	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  007cd	03 c8		 add	 ecx, eax
  007cf	8b c1		 mov	 eax, ecx
  007d1	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax

; 236  :         puShort += 1;

  007d5	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  007da	48 83 c0 02	 add	 rax, 2
  007de	48 89 44 24 28	 mov	 QWORD PTR puShort$[rsp], rax

; 237  :     }

  007e3	eb ca		 jmp	 SHORT $LN8@CheckSum
$LN9@CheckSum:

; 238  :     nBytes += 2;

  007e5	8b 44 24 48	 mov	 eax, DWORD PTR nBytes$[rsp]
  007e9	83 c0 02	 add	 eax, 2
  007ec	89 44 24 48	 mov	 DWORD PTR nBytes$[rsp], eax

; 239  : 
; 240  :     if (nBytes)

  007f0	83 7c 24 48 00	 cmp	 DWORD PTR nBytes$[rsp], 0
  007f5	74 14		 je	 SHORT $LN10@CheckSum

; 241  :         nSum  +=  *( (BYTE*) puShort );

  007f7	48 8b 44 24 28	 mov	 rax, QWORD PTR puShort$[rsp]
  007fc	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  007ff	8b 4c 24 20	 mov	 ecx, DWORD PTR nSum$[rsp]
  00803	03 c8		 add	 ecx, eax
  00805	8b c1		 mov	 eax, ecx
  00807	89 44 24 20	 mov	 DWORD PTR nSum$[rsp], eax
$LN10@CheckSum:

; 242  : 
; 243  :     FoldSum32( &nSum );

  0080b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR nSum$[rsp]
  00810	e8 00 00 00 00	 call	 FoldSum32

; 244  : 
; 245  :     return (U16) nSum;      // (UN-complemented!)

  00815	0f b7 44 24 20	 movzx	 eax, WORD PTR nSum$[rsp]

; 246  : }

  0081a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0081e	c3		 ret	 0
CheckSum ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\netsupp.c
_TEXT	SEGMENT
nIPHdrLen$ = 32
nPacketLen$ = 36
pIP$ = 40
tv87 = 48
pUDP$1 = 56
pTCP$2 = 64
pPacket$ = 72
pICMP$3 = 80
tv185 = 88
pFrame$ = 112
nBytes$ = 120
EtherIpv4CkSumOffload PROC

; 262  : {

$LN15:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 263  :     ip_hdr*   pIP;
; 264  :     BYTE      nIPHdrLen;
; 265  :     BYTE*     pPacket;
; 266  :     U16       nPacketLen;
; 267  : 
; 268  :     // We only handle IPv4 checksum offloading
; 269  : 
; 270  :     if (ETHERTYPE_IP != ntohs( ((eth_hdr*) pFrame)->ether_type ))

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR pFrame$[rsp]
  00013	0f b7 48 0c	 movzx	 ecx, WORD PTR [rax+12]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ntohs
  0001d	0f b7 c0	 movzx	 eax, ax
  00020	3d 00 08 00 00	 cmp	 eax, 2048		; 00000800H
  00025	74 05		 je	 SHORT $LN6@EtherIpv4C

; 271  :         return;

  00027	e9 61 02 00 00	 jmp	 $LN1@EtherIpv4C
$LN6@EtherIpv4C:

; 272  : 
; 273  :     pIP      =  (ip_hdr*) (((BYTE*)pFrame) + eth_hdr_size);

  0002c	48 8b 44 24 70	 mov	 rax, QWORD PTR pFrame$[rsp]
  00031	48 83 c0 0e	 add	 rax, 14
  00035	48 89 44 24 28	 mov	 QWORD PTR pIP$[rsp], rax

; 274  :     nBytes  -=  eth_hdr_size;

  0003a	48 8b 44 24 78	 mov	 rax, QWORD PTR nBytes$[rsp]
  0003f	48 83 e8 0e	 sub	 rax, 14
  00043	48 89 44 24 78	 mov	 QWORD PTR nBytes$[rsp], rax
$LN2@EtherIpv4C:

; 275  : 
; 276  :     while (nBytes > ip_hdr_size)

  00048	48 83 7c 24 78
	14		 cmp	 QWORD PTR nBytes$[rsp], 20
  0004e	0f 86 39 02 00
	00		 jbe	 $LN3@EtherIpv4C

; 277  :     {
; 278  :         nPacketLen =  ntohs( pIP->ip_len );

  00054	48 8b 44 24 28	 mov	 rax, QWORD PTR pIP$[rsp]
  00059	0f b7 48 02	 movzx	 ecx, WORD PTR [rax+2]
  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ntohs
  00063	66 89 44 24 24	 mov	 WORD PTR nPacketLen$[rsp], ax

; 279  :         nIPHdrLen  =  pIP->ip_hl * sizeof( U32 );

  00068	48 8b 44 24 28	 mov	 rax, QWORD PTR pIP$[rsp]
  0006d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00070	24 0f		 and	 al, 15
  00072	0f b6 c0	 movzx	 eax, al
  00075	48 c1 e0 02	 shl	 rax, 2
  00079	88 44 24 20	 mov	 BYTE PTR nIPHdrLen$[rsp], al

; 280  :         pPacket    =  (((BYTE*)pIP) + nIPHdrLen);

  0007d	0f b6 44 24 20	 movzx	 eax, BYTE PTR nIPHdrLen$[rsp]
  00082	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pIP$[rsp]
  00087	48 03 c8	 add	 rcx, rax
  0008a	48 8b c1	 mov	 rax, rcx
  0008d	48 89 44 24 48	 mov	 QWORD PTR pPacket$[rsp], rax

; 281  : 
; 282  :         /* Only compute checksum if not already present */
; 283  : 
; 284  :         if (!pIP->ip_sum)

  00092	48 8b 44 24 28	 mov	 rax, QWORD PTR pIP$[rsp]
  00097	0f b7 40 0a	 movzx	 eax, WORD PTR [rax+10]
  0009b	85 c0		 test	 eax, eax
  0009d	0f 85 99 01 00
	00		 jne	 $LN7@EtherIpv4C

; 285  :         {
; 286  :             switch (pIP->ip_p)

  000a3	48 8b 44 24 28	 mov	 rax, QWORD PTR pIP$[rsp]
  000a8	0f b6 40 09	 movzx	 eax, BYTE PTR [rax+9]
  000ac	88 44 24 30	 mov	 BYTE PTR tv87[rsp], al
  000b0	80 7c 24 30 01	 cmp	 BYTE PTR tv87[rsp], 1
  000b5	0f 84 ff 00 00
	00		 je	 $LN10@EtherIpv4C
  000bb	80 7c 24 30 06	 cmp	 BYTE PTR tv87[rsp], 6
  000c0	74 0c		 je	 SHORT $LN8@EtherIpv4C
  000c2	80 7c 24 30 11	 cmp	 BYTE PTR tv87[rsp], 17
  000c7	74 78		 je	 SHORT $LN9@EtherIpv4C
  000c9	e9 49 01 00 00	 jmp	 $LN11@EtherIpv4C
$LN8@EtherIpv4C:

; 287  :             {
; 288  :                 case IPPROTO_TCP:
; 289  :                 {
; 290  :                     tcp_hdr* pTCP = (tcp_hdr*) pPacket;

  000ce	48 8b 44 24 48	 mov	 rax, QWORD PTR pPacket$[rsp]
  000d3	48 89 44 24 40	 mov	 QWORD PTR pTCP$2[rsp], rax

; 291  : 
; 292  :                     pIP->ip_sum  = 0;   // (start clean)

  000d8	33 c0		 xor	 eax, eax
  000da	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pIP$[rsp]
  000df	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax

; 293  :                     pTCP->th_sum = 0;   // (start clean)

  000e3	33 c0		 xor	 eax, eax
  000e5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pTCP$2[rsp]
  000ea	66 89 41 10	 mov	 WORD PTR [rcx+16], ax

; 294  : 
; 295  :                     // Handle upper TCP layer first
; 296  : 
; 297  :                     pTCP->th_sum = PseudoHdrCheckSum( pIP );

  000ee	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pIP$[rsp]
  000f3	e8 00 00 00 00	 call	 PseudoHdrCheckSum
  000f8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pTCP$2[rsp]
  000fd	66 89 41 10	 mov	 WORD PTR [rcx+16], ax

; 298  :                     pTCP->th_sum = InetCheckSum( (BYTE*) pTCP, (S32)( nPacketLen - nIPHdrLen ));

  00101	0f b7 44 24 24	 movzx	 eax, WORD PTR nPacketLen$[rsp]
  00106	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR nIPHdrLen$[rsp]
  0010b	2b c1		 sub	 eax, ecx
  0010d	8b d0		 mov	 edx, eax
  0010f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pTCP$2[rsp]
  00114	e8 00 00 00 00	 call	 InetCheckSum
  00119	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pTCP$2[rsp]
  0011e	66 89 41 10	 mov	 WORD PTR [rcx+16], ax

; 299  : 
; 300  :                     // Handle lower IP layer last
; 301  : 
; 302  :                     pIP->ip_sum = InetCheckSum( (BYTE*) pIP, (S32) nIPHdrLen );

  00122	0f b6 44 24 20	 movzx	 eax, BYTE PTR nIPHdrLen$[rsp]
  00127	8b d0		 mov	 edx, eax
  00129	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pIP$[rsp]
  0012e	e8 00 00 00 00	 call	 InetCheckSum
  00133	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pIP$[rsp]
  00138	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax

; 303  :                 }
; 304  :                 break;

  0013c	e9 fb 00 00 00	 jmp	 $LN4@EtherIpv4C
$LN9@EtherIpv4C:

; 305  : 
; 306  :                 case IPPROTO_UDP:
; 307  :                 {
; 308  :                     udp_hdr* pUDP = (udp_hdr*) pPacket;

  00141	48 8b 44 24 48	 mov	 rax, QWORD PTR pPacket$[rsp]
  00146	48 89 44 24 38	 mov	 QWORD PTR pUDP$1[rsp], rax

; 309  : 
; 310  :                     pIP->ip_sum  = 0;   // (start clean)

  0014b	33 c0		 xor	 eax, eax
  0014d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pIP$[rsp]
  00152	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax

; 311  :                     pUDP->uh_sum = 0;   // (start clean)

  00156	33 c0		 xor	 eax, eax
  00158	48 8b 4c 24 38	 mov	 rcx, QWORD PTR pUDP$1[rsp]
  0015d	66 89 41 06	 mov	 WORD PTR [rcx+6], ax

; 312  : 
; 313  :                     // Handle upper UDP layer first
; 314  : 
; 315  :                     pUDP->uh_sum = PseudoHdrCheckSum( pIP );

  00161	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pIP$[rsp]
  00166	e8 00 00 00 00	 call	 PseudoHdrCheckSum
  0016b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR pUDP$1[rsp]
  00170	66 89 41 06	 mov	 WORD PTR [rcx+6], ax

; 316  :                     pUDP->uh_sum = InetCheckSum( (BYTE*) pUDP, (S32) ntohs( pUDP->uh_ulen ));

  00174	48 8b 44 24 38	 mov	 rax, QWORD PTR pUDP$1[rsp]
  00179	0f b7 48 04	 movzx	 ecx, WORD PTR [rax+4]
  0017d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ntohs
  00183	0f b7 c0	 movzx	 eax, ax
  00186	8b d0		 mov	 edx, eax
  00188	48 8b 4c 24 38	 mov	 rcx, QWORD PTR pUDP$1[rsp]
  0018d	e8 00 00 00 00	 call	 InetCheckSum
  00192	48 8b 4c 24 38	 mov	 rcx, QWORD PTR pUDP$1[rsp]
  00197	66 89 41 06	 mov	 WORD PTR [rcx+6], ax

; 317  : 
; 318  :                     // Handle lower IP layer last
; 319  : 
; 320  :                     pIP->ip_sum = InetCheckSum( (BYTE*) pIP, (S32) nIPHdrLen );

  0019b	0f b6 44 24 20	 movzx	 eax, BYTE PTR nIPHdrLen$[rsp]
  001a0	8b d0		 mov	 edx, eax
  001a2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pIP$[rsp]
  001a7	e8 00 00 00 00	 call	 InetCheckSum
  001ac	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pIP$[rsp]
  001b1	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax

; 321  :                 }
; 322  :                 break;

  001b5	e9 82 00 00 00	 jmp	 $LN4@EtherIpv4C
$LN10@EtherIpv4C:

; 323  : 
; 324  :                 case IPPROTO_ICMP:
; 325  :                 {
; 326  :                     icmp_hdr* pICMP = (icmp_hdr*) pPacket;

  001ba	48 8b 44 24 48	 mov	 rax, QWORD PTR pPacket$[rsp]
  001bf	48 89 44 24 50	 mov	 QWORD PTR pICMP$3[rsp], rax

; 327  : 
; 328  :                     pIP->ip_sum     = 0;   // (start clean)

  001c4	33 c0		 xor	 eax, eax
  001c6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pIP$[rsp]
  001cb	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax

; 329  :                     pICMP->icmp_sum = 0;   // (start clean)

  001cf	33 c0		 xor	 eax, eax
  001d1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pICMP$3[rsp]
  001d6	66 89 41 02	 mov	 WORD PTR [rcx+2], ax

; 330  : 
; 331  :                     // Handle upper ICMP layer first
; 332  : 
; 333  :                     // pICMP->icmp_sum = PseudoHdrCheckSum( pIP );
; 334  :                     pICMP->icmp_sum = InetCheckSum( (BYTE*) pICMP, (S32)( nPacketLen - nIPHdrLen ));

  001da	0f b7 44 24 24	 movzx	 eax, WORD PTR nPacketLen$[rsp]
  001df	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR nIPHdrLen$[rsp]
  001e4	2b c1		 sub	 eax, ecx
  001e6	8b d0		 mov	 edx, eax
  001e8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pICMP$3[rsp]
  001ed	e8 00 00 00 00	 call	 InetCheckSum
  001f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pICMP$3[rsp]
  001f7	66 89 41 02	 mov	 WORD PTR [rcx+2], ax

; 335  : 
; 336  :                     // Handle lower IP layer last
; 337  : 
; 338  :                     pIP->ip_sum = InetCheckSum( (BYTE*) pIP, (S32) nIPHdrLen );

  001fb	0f b6 44 24 20	 movzx	 eax, BYTE PTR nIPHdrLen$[rsp]
  00200	8b d0		 mov	 edx, eax
  00202	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pIP$[rsp]
  00207	e8 00 00 00 00	 call	 InetCheckSum
  0020c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pIP$[rsp]
  00211	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax

; 339  :                 }
; 340  :                 break;

  00215	eb 25		 jmp	 SHORT $LN4@EtherIpv4C
$LN11@EtherIpv4C:

; 341  : 
; 342  :                 default: // (some other protocol)
; 343  :                 {
; 344  :                     // But since it IS an IP packet we need to
; 345  :                     // still calculate the IP header checksum!
; 346  : 
; 347  :                     pIP->ip_sum = 0;   // (start clean)

  00217	33 c0		 xor	 eax, eax
  00219	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pIP$[rsp]
  0021e	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax

; 348  :                     pIP->ip_sum = InetCheckSum( (BYTE*) pIP, (S32) nIPHdrLen );

  00222	0f b6 44 24 20	 movzx	 eax, BYTE PTR nIPHdrLen$[rsp]
  00227	8b d0		 mov	 edx, eax
  00229	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pIP$[rsp]
  0022e	e8 00 00 00 00	 call	 InetCheckSum
  00233	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pIP$[rsp]
  00238	66 89 41 0a	 mov	 WORD PTR [rcx+10], ax
$LN4@EtherIpv4C:
$LN7@EtherIpv4C:

; 349  :                 }
; 350  :                 break;
; 351  :             }
; 352  :         }
; 353  : 
; 354  :         // Go on to the next IP packet...
; 355  : 
; 356  :         pIP = (ip_hdr*) (((BYTE*)pIP) + nPacketLen );

  0023c	0f b7 44 24 24	 movzx	 eax, WORD PTR nPacketLen$[rsp]
  00241	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pIP$[rsp]
  00246	48 03 c8	 add	 rcx, rax
  00249	48 8b c1	 mov	 rax, rcx
  0024c	48 89 44 24 28	 mov	 QWORD PTR pIP$[rsp], rax

; 357  :         nBytes -= MIN( nBytes, (size_t) nPacketLen );

  00251	0f b7 44 24 24	 movzx	 eax, WORD PTR nPacketLen$[rsp]
  00256	48 39 44 24 78	 cmp	 QWORD PTR nBytes$[rsp], rax
  0025b	73 0c		 jae	 SHORT $LN13@EtherIpv4C
  0025d	48 8b 44 24 78	 mov	 rax, QWORD PTR nBytes$[rsp]
  00262	48 89 44 24 58	 mov	 QWORD PTR tv185[rsp], rax
  00267	eb 0a		 jmp	 SHORT $LN14@EtherIpv4C
$LN13@EtherIpv4C:
  00269	0f b7 44 24 24	 movzx	 eax, WORD PTR nPacketLen$[rsp]
  0026e	48 89 44 24 58	 mov	 QWORD PTR tv185[rsp], rax
$LN14@EtherIpv4C:
  00273	48 8b 44 24 58	 mov	 rax, QWORD PTR tv185[rsp]
  00278	48 8b 4c 24 78	 mov	 rcx, QWORD PTR nBytes$[rsp]
  0027d	48 2b c8	 sub	 rcx, rax
  00280	48 8b c1	 mov	 rax, rcx
  00283	48 89 44 24 78	 mov	 QWORD PTR nBytes$[rsp], rax

; 358  : 
; 359  :     } // while (nBytes > ip_hdr_size)

  00288	e9 bb fd ff ff	 jmp	 $LN2@EtherIpv4C
$LN3@EtherIpv4C:
$LN1@EtherIpv4C:

; 360  : }

  0028d	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00291	c3		 ret	 0
EtherIpv4CkSumOffload ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\netsupp.c
_TEXT	SEGMENT
i$ = 32
tab$ = 64
mac$ = 72
IsMACTab PROC

; 83   : {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 84   :     int  i;
; 85   :     for (i=0; i < MACTABMAX; i++)

  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00016	eb 0a		 jmp	 SHORT $LN4@IsMACTab
$LN2@IsMACTab:
  00018	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0001c	ff c0		 inc	 eax
  0001e	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@IsMACTab:
  00022	83 7c 24 20 20	 cmp	 DWORD PTR i$[rsp], 32	; 00000020H
  00027	7d 40		 jge	 SHORT $LN3@IsMACTab

; 86   :         if (tab[i].inuse)

  00029	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0002e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tab$[rsp]
  00033	0f b6 04 c1	 movzx	 eax, BYTE PTR [rcx+rax*8]
  00037	85 c0		 test	 eax, eax
  00039	74 2c		 je	 SHORT $LN5@IsMACTab

; 87   :             if (memcmp( tab[i].mac, mac, sizeof( tab[i].mac )) == 0)

  0003b	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00040	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tab$[rsp]
  00045	48 8d 44 c1 02	 lea	 rax, QWORD PTR [rcx+rax*8+2]
  0004a	41 b8 06 00 00
	00		 mov	 r8d, 6
  00050	48 8b 54 24 48	 mov	 rdx, QWORD PTR mac$[rsp]
  00055	48 8b c8	 mov	 rcx, rax
  00058	e8 00 00 00 00	 call	 memcmp
  0005d	85 c0		 test	 eax, eax
  0005f	75 06		 jne	 SHORT $LN6@IsMACTab

; 88   :                 return i;

  00061	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00065	eb 07		 jmp	 SHORT $LN1@IsMACTab
$LN6@IsMACTab:
$LN5@IsMACTab:
  00067	eb af		 jmp	 SHORT $LN2@IsMACTab
$LN3@IsMACTab:

; 89   :     return -ENOENT; // (not found)

  00069	b8 fe ff ff ff	 mov	 eax, -2
$LN1@IsMACTab:

; 90   : }

  0006e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00072	c3		 ret	 0
IsMACTab ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\netsupp.c
_TEXT	SEGMENT
i$ = 32
tab$ = 64
mac$ = 72
MACTabRem PROC

; 61   : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 62   :     int  i;
; 63   : 
; 64   :     for (i=0; i < MACTABMAX; i++)

  0000f	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00017	eb 0a		 jmp	 SHORT $LN4@MACTabRem
$LN2@MACTabRem:
  00019	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0001d	ff c0		 inc	 eax
  0001f	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@MACTabRem:
  00023	83 7c 24 20 20	 cmp	 DWORD PTR i$[rsp], 32	; 00000020H
  00028	7d 46		 jge	 SHORT $LN3@MACTabRem

; 65   :     {
; 66   :         if (memcmp( tab[i].mac, mac, sizeof( tab[i].mac )) == 0)

  0002a	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tab$[rsp]
  00034	48 8d 44 c1 02	 lea	 rax, QWORD PTR [rcx+rax*8+2]
  00039	41 b8 06 00 00
	00		 mov	 r8d, 6
  0003f	48 8b 54 24 48	 mov	 rdx, QWORD PTR mac$[rsp]
  00044	48 8b c8	 mov	 rcx, rax
  00047	e8 00 00 00 00	 call	 memcmp
  0004c	85 c0		 test	 eax, eax
  0004e	75 1e		 jne	 SHORT $LN5@MACTabRem

; 67   :         {
; 68   :             memset( &tab[i], 0, sizeof( MACTAB ));

  00050	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00055	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tab$[rsp]
  0005a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0005e	48 8b f8	 mov	 rdi, rax
  00061	33 c0		 xor	 eax, eax
  00063	b9 08 00 00 00	 mov	 ecx, 8
  00068	f3 aa		 rep stosb

; 69   :             return 0;

  0006a	33 c0		 xor	 eax, eax
  0006c	eb 04		 jmp	 SHORT $LN1@MACTabRem
$LN5@MACTabRem:

; 70   :         }
; 71   :     }

  0006e	eb a9		 jmp	 SHORT $LN2@MACTabRem
$LN3@MACTabRem:

; 72   : 
; 73   : #if 0 // technically this should be an error
; 74   :     return -ENOENT; // (not found)
; 75   : #else // but we'll treat it as success
; 76   :     return 0;       // (not found)

  00070	33 c0		 xor	 eax, eax
$LN1@MACTabRem:

; 77   : #endif
; 78   : }

  00072	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00076	5f		 pop	 rdi
  00077	c3		 ret	 0
MACTabRem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\netsupp.c
_TEXT	SEGMENT
i$ = 32
n$ = 36
tab$ = 80
mac$ = 88
flags$ = 96
MACTabAdd PROC

; 26   : {

$LN11:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 27   :     int  i, n = -1;

  00015	c7 44 24 24 ff
	ff ff ff	 mov	 DWORD PTR n$[rsp], -1

; 28   : 
; 29   :     for (i=0; i < MACTABMAX; i++)

  0001d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00025	eb 0a		 jmp	 SHORT $LN4@MACTabAdd
$LN2@MACTabAdd:
  00027	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0002b	ff c0		 inc	 eax
  0002d	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@MACTabAdd:
  00031	83 7c 24 20 20	 cmp	 DWORD PTR i$[rsp], 32	; 00000020H
  00036	7d 4f		 jge	 SHORT $LN3@MACTabAdd

; 30   :     {
; 31   :         if (tab[i].inuse)

  00038	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0003d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tab$[rsp]
  00042	0f b6 04 c1	 movzx	 eax, BYTE PTR [rcx+rax*8]
  00046	85 c0		 test	 eax, eax
  00048	74 2c		 je	 SHORT $LN5@MACTabAdd

; 32   :         {
; 33   :             if (memcmp( tab[i].mac, mac, sizeof( tab[i].mac )) == 0)

  0004a	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0004f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tab$[rsp]
  00054	48 8d 44 c1 02	 lea	 rax, QWORD PTR [rcx+rax*8+2]
  00059	41 b8 06 00 00
	00		 mov	 r8d, 6
  0005f	48 8b 54 24 58	 mov	 rdx, QWORD PTR mac$[rsp]
  00064	48 8b c8	 mov	 rcx, rax
  00067	e8 00 00 00 00	 call	 memcmp
  0006c	85 c0		 test	 eax, eax
  0006e	75 04		 jne	 SHORT $LN7@MACTabAdd

; 34   : #if 0 // technically this should be an error
; 35   :                 return -EEXIST; // (already exists)
; 36   : #else // but we'll treat it as success
; 37   :                 return 0;       // (already exists)

  00070	33 c0		 xor	 eax, eax
  00072	eb 5f		 jmp	 SHORT $LN1@MACTabAdd
$LN7@MACTabAdd:

; 38   : #endif
; 39   :         }

  00074	eb 0f		 jmp	 SHORT $LN6@MACTabAdd
$LN5@MACTabAdd:

; 40   :         else // (unused entry)
; 41   :         {
; 42   :             if (n < 0)

  00076	83 7c 24 24 00	 cmp	 DWORD PTR n$[rsp], 0
  0007b	7d 08		 jge	 SHORT $LN8@MACTabAdd

; 43   :                 n = i;

  0007d	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00081	89 44 24 24	 mov	 DWORD PTR n$[rsp], eax
$LN8@MACTabAdd:
$LN6@MACTabAdd:

; 44   :         }
; 45   :     }

  00085	eb a0		 jmp	 SHORT $LN2@MACTabAdd
$LN3@MACTabAdd:

; 46   : 
; 47   :     if (n < 0)

  00087	83 7c 24 24 00	 cmp	 DWORD PTR n$[rsp], 0
  0008c	7d 07		 jge	 SHORT $LN9@MACTabAdd

; 48   :         return -ENOSPC; // (table full)

  0008e	b8 e4 ff ff ff	 mov	 eax, -28
  00093	eb 3e		 jmp	 SHORT $LN1@MACTabAdd
$LN9@MACTabAdd:

; 49   : 
; 50   :     tab[n].inuse = TRUE;

  00095	48 63 44 24 24	 movsxd	 rax, DWORD PTR n$[rsp]
  0009a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tab$[rsp]
  0009f	c6 04 c1 01	 mov	 BYTE PTR [rcx+rax*8], 1

; 51   :     tab[n].flags = flags;

  000a3	48 63 44 24 24	 movsxd	 rax, DWORD PTR n$[rsp]
  000a8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tab$[rsp]
  000ad	0f b6 54 24 60	 movzx	 edx, BYTE PTR flags$[rsp]
  000b2	88 54 c1 01	 mov	 BYTE PTR [rcx+rax*8+1], dl

; 52   : 
; 53   :     memcpy( tab[n].mac, mac, sizeof( tab[n].mac ));

  000b6	48 63 44 24 24	 movsxd	 rax, DWORD PTR n$[rsp]
  000bb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tab$[rsp]
  000c0	48 8d 7c c1 02	 lea	 rdi, QWORD PTR [rcx+rax*8+2]
  000c5	48 8b 74 24 58	 mov	 rsi, QWORD PTR mac$[rsp]
  000ca	b9 06 00 00 00	 mov	 ecx, 6
  000cf	f3 a4		 rep movsb

; 54   : 
; 55   :     return 0;

  000d1	33 c0		 xor	 eax, eax
$LN1@MACTabAdd:

; 56   : }

  000d3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d7	5f		 pop	 rdi
  000d8	5e		 pop	 rsi
  000d9	c3		 ret	 0
MACTabAdd ENDP
_TEXT	ENDS
END
