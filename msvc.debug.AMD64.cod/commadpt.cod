; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	overstrike_2741_pairs
PUBLIC	overstrike_rxvt4apl_chars
_DATA	SEGMENT
COMM	commadpt_kw:DWORD
_DATA	ENDS
_DATA	SEGMENT
commadpt_immed_command DB 00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
$SG159164 DB	'IDLE', 00H
	ORG $+3
$SG159165 DB	'READ', 00H
	ORG $+3
$SG159166 DB	'WRITE', 00H
	ORG $+2
$SG159167 DB	'ENABLE', 00H
	ORG $+1
$SG159168 DB	'DIAL', 00H
	ORG $+3
$SG159169 DB	'DISABLE', 00H
$SG159170 DB	'PREPARE', 00H
$SG159171 DB	'POLL', 00H
	ORG $+3
$SG159172 DB	'TINIT', 00H
	ORG $+2
$SG159173 DB	'TCLOSED', 00H
$SG159174 DB	'SHUTDOWN', 00H
	ORG $+3
$SG159178 DB	'lport', 00H
	ORG $+2
$SG159179 DB	'%79s', 00H
	ORG $+3
$SG159180 DB	'lhost', 00H
	ORG $+2
$SG159181 DB	'%79s', 00H
	ORG $+3
$SG159182 DB	'rport', 00H
	ORG $+2
$SG159183 DB	'%79s', 00H
	ORG $+3
$SG159184 DB	'rhost', 00H
	ORG $+2
$SG159185 DB	'%79s', 00H
	ORG $+3
$SG159186 DB	'dial', 00H
	ORG $+3
$SG159187 DB	'%79s', 00H
	ORG $+3
$SG159188 DB	'rto', 00H
$SG159189 DB	'%79s', 00H
	ORG $+3
$SG159190 DB	'pto', 00H
$SG159191 DB	'%79s', 00H
	ORG $+3
$SG159192 DB	'eto', 00H
$SG159193 DB	'%79s', 00H
	ORG $+3
$SG159194 DB	'switched', 00H
	ORG $+3
$SG159195 DB	'%79s', 00H
	ORG $+3
$SG159196 DB	'lnctl', 00H
	ORG $+2
$SG159197 DB	'%79s', 00H
	ORG $+3
$SG159198 DB	'term', 00H
	ORG $+3
$SG159199 DB	'%79s', 00H
	ORG $+3
$SG159200 DB	'code', 00H
	ORG $+3
$SG159201 DB	'%79s', 00H
	ORG $+3
$SG159206 DB	'iskip', 00H
	ORG $+2
$SG159208 DB	'bs', 00H
	ORG $+1
$SG159202 DB	'uctrans', 00H
$SG159203 DB	'%79s', 00H
	ORG $+3
$SG159204 DB	'skip', 00H
	ORG $+3
$SG159205 DB	'%79s', 00H
	ORG $+3
$SG159207 DB	'%79s', 00H
	ORG $+3
$SG159209 DB	'%79s', 00H
	ORG $+3
$SG159210 DB	'break', 00H
	ORG $+2
$SG159211 DB	'%79s', 00H
	ORG $+3
$SG159212 DB	'prepend', 00H
$SG159213 DB	'%79s', 00H
	ORG $+3
$SG159214 DB	'append', 00H
	ORG $+1
$SG159215 DB	'%79s', 00H
	ORG $+3
$SG159216 DB	'eol', 00H
$SG159217 DB	'%79s', 00H
	ORG $+3
$SG159218 DB	'crlf', 00H
	ORG $+3
$SG159219 DB	'%79s', 00H
	ORG $+3
$SG159220 DB	'sendcr', 00H
	ORG $+1
$SG159221 DB	'%79s', 00H
	ORG $+3
$SG159222 DB	'binary', 00H
	ORG $+1
$SG159223 DB	'%79s', 00H
	ORG $+3
$SG159224 DB	'ka', 00H
	ORG $+1
$SG159225 DB	'%79s', 00H
	ORG $+3
$SG159226 DB	'crlf2cr', 00H
$SG159227 DB	'%79s', 00H
	ORG $+3
overstrike_2741_pairs DB 093H
	DB	0a6H
	DB	0c9H
	DB	0ccH
	DB	0ccH
	DB	0cfH
	DB	0c9H
	DB	0eeH
	DB	0c3H
	DB	0e7H
	DB	0c5H
	DB	0c6H
	DB	093H
	DB	0a6H
	DB	0a3H
	DB	0ccH
	DB	0a6H
	DB	0eeH
	DB	0c9H
	DB	0f0H
	DB	076H
	DB	0c5H
	DB	0caH
	DB	0e4H
	DB	0c6H
	DB	0e1H
	ORG $+2
$SG160493 DB	'BSC', 00H
overstrike_rxvt4apl_chars DB 0e5H
	DB	0e8H
	DB	089H
	DB	09dH
	DB	0a6H
	DB	097H
	DB	0eaH
	DB	0edH
	DB	0a1H
	DB	093H
	DB	021H
	DB	084H
	DB	098H
	ORG $+3
$SG160492 DB	'NONE', 00H
	ORG $+3
$SG160494 DB	'ASYNC', 00H
_DATA	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsnprintf_s_l
PUBLIC	_vsnprintf_s
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	commadpt_ring_init
PUBLIC	hdl_check_depends_ep
PUBLIC	hdl_define_devtypes_ep
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp_toupper:PROC
EXTRN	__imp__errno:PROC
EXTRN	strcmp:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp_IsDebuggerPresent:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_atoi:PROC
EXTRN	__imp_bind:PROC
EXTRN	__imp_connect:PROC
EXTRN	__imp_getpeername:PROC
EXTRN	__imp_getsockopt:PROC
EXTRN	__imp_htons:PROC
EXTRN	__imp_inet_ntoa:PROC
EXTRN	__imp_listen:PROC
EXTRN	__imp_ntohs:PROC
EXTRN	__imp_recv:PROC
EXTRN	__imp_send:PROC
EXTRN	__imp_setsockopt:PROC
EXTRN	__imp_gethostbyname:PROC
EXTRN	__imp_getservbyname:PROC
EXTRN	__imp_WSAGetLastError:PROC
EXTRN	__imp_write:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vsnprintf_s:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	__imp_fthread_self:PROC
EXTRN	__imp_hthread_initialize_lock:PROC
EXTRN	__imp_hthread_obtain_lock:PROC
EXTRN	__imp_hthread_release_lock:PROC
EXTRN	__imp_hthread_initialize_condition:PROC
EXTRN	__imp_hthread_signal_condition:PROC
EXTRN	__imp_hthread_wait_condition:PROC
EXTRN	__imp_hthread_create_thread:PROC
EXTRN	__imp_hthread_set_thread_prio:PROC
EXTRN	__imp_hthread_get_thread_prio:PROC
EXTRN	__imp_strlcpy:PROC
EXTRN	__imp_strlcat:PROC
EXTRN	__imp_reverse_bits:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_w32_strerror_r:PROC
EXTRN	__imp_socketpair:PROC
EXTRN	__imp_usleep:PROC
EXTRN	__imp_socket_set_blocking_mode:PROC
EXTRN	__imp_socket_is_socket:PROC
EXTRN	__imp_set_socket_keepalive:PROC
EXTRN	__imp_get_socket_keepalive:PROC
EXTRN	__imp_w32_socket:PROC
EXTRN	__imp_w32_accept:PROC
EXTRN	__imp_w32_close_socket:PROC
EXTRN	__imp_w32_FD_SET:PROC
EXTRN	__imp_w32_FD_ISSET:PROC
EXTRN	__imp_w32_select:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_w32_basename:PROC
EXTRN	__imp_host_to_guest:PROC
EXTRN	__imp_guest_to_host:PROC
EXTRN	__imp_read_socket:PROC
EXTRN	__imp_write_socket:PROC
EXTRN	__imp_parse_conkpalv:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_logmsg:PROC
EXTRN	__imp_parser:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_sysblk:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$_vsnprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$_vsnprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sscanf
pdata	ENDS
pdata	SEGMENT
$pdata$DebuggerTrace DD imagerel DebuggerTrace
	DD	imagerel DebuggerTrace+247
	DD	imagerel $unwind$DebuggerTrace
$pdata$logdump DD imagerel logdump
	DD	imagerel logdump+1439
	DD	imagerel $unwind$logdump
$pdata$commadpt_ring_init DD imagerel $LN4
	DD	imagerel $LN4+234
	DD	imagerel $unwind$commadpt_ring_init
$pdata$commadpt_ring_terminate DD imagerel commadpt_ring_terminate
	DD	imagerel commadpt_ring_terminate+245
	DD	imagerel $unwind$commadpt_ring_terminate
$pdata$commadpt_ring_pushbfr DD imagerel commadpt_ring_pushbfr
	DD	imagerel commadpt_ring_pushbfr+91
	DD	imagerel $unwind$commadpt_ring_pushbfr
$pdata$commadpt_ring_pop DD imagerel commadpt_ring_pop
	DD	imagerel commadpt_ring_pop+135
	DD	imagerel $unwind$commadpt_ring_pop
$pdata$commadpt_ring_popbfr DD imagerel commadpt_ring_popbfr
	DD	imagerel commadpt_ring_popbfr+110
	DD	imagerel $unwind$commadpt_ring_popbfr
$pdata$commadpt_clean_device DD imagerel commadpt_clean_device
	DD	imagerel commadpt_clean_device+625
	DD	imagerel $unwind$commadpt_clean_device
$pdata$commadpt_alloc_device DD imagerel commadpt_alloc_device
	DD	imagerel commadpt_alloc_device+669
	DD	imagerel $unwind$commadpt_alloc_device
$pdata$commadpt_getport DD imagerel commadpt_getport
	DD	imagerel commadpt_getport+91
	DD	imagerel $unwind$commadpt_getport
$pdata$commadpt_getaddr DD imagerel commadpt_getaddr
	DD	imagerel commadpt_getaddr+83
	DD	imagerel $unwind$commadpt_getaddr
$pdata$commadpt_connout DD imagerel commadpt_connout
	DD	imagerel commadpt_connout+730
	DD	imagerel $unwind$commadpt_connout
$pdata$commadpt_initiate_userdial DD imagerel commadpt_initiate_userdial
	DD	imagerel commadpt_initiate_userdial+1784
	DD	imagerel $unwind$commadpt_initiate_userdial
$pdata$connect_message DD imagerel connect_message
	DD	imagerel connect_message+837
	DD	imagerel $unwind$connect_message
$pdata$commadpt_read_poll DD imagerel commadpt_read_poll
	DD	imagerel commadpt_read_poll+148
	DD	imagerel $unwind$commadpt_read_poll
$pdata$commadpt_read_tty DD imagerel commadpt_read_tty
	DD	imagerel commadpt_read_tty+2922
	DD	imagerel $unwind$commadpt_read_tty
$pdata$commadpt_read DD imagerel commadpt_read
	DD	imagerel commadpt_read+384
	DD	imagerel $unwind$commadpt_read
$pdata$SET_COMM_KEEPALIVE DD imagerel SET_COMM_KEEPALIVE
	DD	imagerel SET_COMM_KEEPALIVE+1049
	DD	imagerel $unwind$SET_COMM_KEEPALIVE
$pdata$commadpt_thread DD imagerel commadpt_thread
	DD	imagerel commadpt_thread+8832
	DD	imagerel $unwind$commadpt_thread
$pdata$commadpt_wakeup DD imagerel commadpt_wakeup
	DD	imagerel commadpt_wakeup+167
	DD	imagerel $unwind$commadpt_wakeup
$pdata$commadpt_wait DD imagerel commadpt_wait
	DD	imagerel commadpt_wait+65
	DD	imagerel $unwind$commadpt_wait
$pdata$commadpt_halt_or_clear DD imagerel commadpt_halt_or_clear
	DD	imagerel commadpt_halt_or_clear+210
	DD	imagerel $unwind$commadpt_halt_or_clear
$pdata$msg01007e DD imagerel msg01007e
	DD	imagerel msg01007e+213
	DD	imagerel $unwind$msg01007e
$pdata$msg01008e DD imagerel msg01008e
	DD	imagerel msg01008e+213
	DD	imagerel $unwind$msg01008e
$pdata$msg01009w DD imagerel msg01009w
	DD	imagerel msg01009w+394
	DD	imagerel $unwind$msg01009w
$pdata$commadpt_init_handler DD imagerel commadpt_init_handler
	DD	imagerel commadpt_init_handler+10916
	DD	imagerel $unwind$commadpt_init_handler
$pdata$commadpt_query_device DD imagerel commadpt_query_device
	DD	imagerel commadpt_query_device+647
	DD	imagerel $unwind$commadpt_query_device
$pdata$commadpt_close_device DD imagerel commadpt_close_device
	DD	imagerel commadpt_close_device+587
	DD	imagerel $unwind$commadpt_close_device
$pdata$commadpt_execute_ccw DD imagerel commadpt_execute_ccw
	DD	imagerel commadpt_execute_ccw+12384
	DD	imagerel $unwind$commadpt_execute_ccw
$pdata$hdl_check_depends_ep DD imagerel $LN15
	DD	imagerel $LN15+152
	DD	imagerel $unwind$hdl_check_depends_ep
$pdata$hdl_define_devtypes_ep DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$hdl_define_devtypes_ep
pdata	ENDS
_DATA	SEGMENT
	ORG $+10
commadpt_pendccw_text DQ FLAT:$SG159164
	DQ	FLAT:$SG159165
	DQ	FLAT:$SG159166
	DQ	FLAT:$SG159167
	DQ	FLAT:$SG159168
	DQ	FLAT:$SG159169
	DQ	FLAT:$SG159170
	DQ	FLAT:$SG159171
	DQ	FLAT:$SG159172
	DQ	FLAT:$SG159173
	DQ	FLAT:$SG159174
telnet_binary DB 0ffH
	DB	0fdH
	DB	00H
	DB	0ffH
	DB	0fbH
	DB	00H
	ORG $+2
ptab	DQ	FLAT:$SG159178
	DQ	FLAT:$SG159179
	DQ	FLAT:$SG159180
	DQ	FLAT:$SG159181
	DQ	FLAT:$SG159182
	DQ	FLAT:$SG159183
	DQ	FLAT:$SG159184
	DQ	FLAT:$SG159185
	DQ	FLAT:$SG159186
	DQ	FLAT:$SG159187
	DQ	FLAT:$SG159188
	DQ	FLAT:$SG159189
	DQ	FLAT:$SG159190
	DQ	FLAT:$SG159191
	DQ	FLAT:$SG159192
	DQ	FLAT:$SG159193
	DQ	FLAT:$SG159194
	DQ	FLAT:$SG159195
	DQ	FLAT:$SG159196
	DQ	FLAT:$SG159197
	DQ	FLAT:$SG159198
	DQ	FLAT:$SG159199
	DQ	FLAT:$SG159200
	DQ	FLAT:$SG159201
	DQ	FLAT:$SG159202
	DQ	FLAT:$SG159203
	DQ	FLAT:$SG159204
	DQ	FLAT:$SG159205
	DQ	FLAT:$SG159206
	DQ	FLAT:$SG159207
	DQ	FLAT:$SG159208
	DQ	FLAT:$SG159209
	DQ	FLAT:$SG159210
	DQ	FLAT:$SG159211
	DQ	FLAT:$SG159212
	DQ	FLAT:$SG159213
	DQ	FLAT:$SG159214
	DQ	FLAT:$SG159215
	DQ	FLAT:$SG159216
	DQ	FLAT:$SG159217
	DQ	FLAT:$SG159218
	DQ	FLAT:$SG159219
	DQ	FLAT:$SG159220
	DQ	FLAT:$SG159221
	DQ	FLAT:$SG159222
	DQ	FLAT:$SG159223
	DQ	FLAT:$SG159224
	DQ	FLAT:$SG159225
	DQ	FLAT:$SG159226
	DQ	FLAT:$SG159227
	DQ	0000000000000000H
	DQ	0000000000000000H
overstrike_map DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
rxvt4apl_from_2741 DB 03fH
	DB	020H
	DB	031H
	DB	03fH
	DB	032H
	DB	03fH
	DB	03fH
	DB	033H
	DB	034H
	DB	03fH
	DB	03fH
	DB	035H
	DB	03fH
	DB	036H
	DB	037H
	DB	03fH
	DB	038H
	DB	03fH
	DB	03fH
	DB	039H
	DB	03fH
	DB	030H
	DB	05dH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	095H
	DB	03fH
	DB	096H
	DB	03fH
	DB	03fH
	DB	04H
	DB	090H
	DB	03fH
	DB	03fH
	DB	02fH
	DB	03fH
	DB	053H
	DB	054H
	DB	03fH
	DB	03fH
	DB	055H
	DB	056H
	DB	03fH
	DB	057H
	DB	03fH
	DB	03fH
	DB	058H
	DB	03fH
	DB	059H
	DB	05aH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	02cH
	DB	084H
	DB	03fH
	DB	03fH
	DB	0aH
	DB	03fH
	DB	017H
	DB	01bH
	DB	03fH
	DB	02bH
	DB	03fH
	DB	03fH
	DB	04aH
	DB	03fH
	DB	04bH
	DB	04cH
	DB	03fH
	DB	03fH
	DB	04dH
	DB	04eH
	DB	03fH
	DB	04fH
	DB	03fH
	DB	03fH
	DB	050H
	DB	03fH
	DB	051H
	DB	052H
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	05bH
	DB	09dH
	DB	03fH
	DB	03fH
	DB	0dH
	DB	03fH
	DB	08H
	DB	087H
	DB	03fH
	DB	03fH
	DB	092H
	DB	041H
	DB	03fH
	DB	042H
	DB	03fH
	DB	03fH
	DB	043H
	DB	044H
	DB	03fH
	DB	03fH
	DB	045H
	DB	03fH
	DB	046H
	DB	047H
	DB	03fH
	DB	048H
	DB	03fH
	DB	03fH
	DB	049H
	DB	03fH
	DB	03fH
	DB	02eH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	09H
	DB	03fH
	DB	086H
	DB	03fH
	DB	03fH
	DB	07fH
	DB	03fH
	DB	020H
	DB	09aH
	DB	03fH
	DB	0fdH
	DB	03fH
	DB	03fH
	DB	03cH
	DB	0f3H
	DB	03fH
	DB	03fH
	DB	03dH
	DB	03fH
	DB	0f2H
	DB	03eH
	DB	03fH
	DB	086H
	DB	03fH
	DB	03fH
	DB	0faH
	DB	03fH
	DB	05eH
	DB	029H
	DB	03fH
	DB	03fH
	DB	03fH
	DB	095H
	DB	03fH
	DB	096H
	DB	03fH
	DB	03fH
	DB	03fH
	DB	085H
	DB	03fH
	DB	03fH
	DB	05cH
	DB	03fH
	DB	08dH
	DB	07eH
	DB	03fH
	DB	03fH
	DB	08bH
	DB	0fcH
	DB	03fH
	DB	0f7H
	DB	03fH
	DB	03fH
	DB	083H
	DB	03fH
	DB	08cH
	DB	082H
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03bH
	DB	084H
	DB	03fH
	DB	03fH
	DB	0aH
	DB	03fH
	DB	017H
	DB	01bH
	DB	03fH
	DB	02dH
	DB	03fH
	DB	03fH
	DB	0f8H
	DB	03fH
	DB	027H
	DB	095H
	DB	03fH
	DB	03fH
	DB	07cH
	DB	0e7H
	DB	03fH
	DB	0f9H
	DB	03fH
	DB	03fH
	DB	02aH
	DB	03fH
	DB	03fH
	DB	0fbH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	028H
	DB	09dH
	DB	03fH
	DB	03fH
	DB	0dH
	DB	03fH
	DB	08H
	DB	087H
	DB	03fH
	DB	03fH
	DB	0f6H
	DB	0e0H
	DB	03fH
	DB	0e6H
	DB	03fH
	DB	03fH
	DB	0efH
	DB	08fH
	DB	03fH
	DB	03fH
	DB	0eeH
	DB	03fH
	DB	05fH
	DB	0ecH
	DB	03fH
	DB	091H
	DB	03fH
	DB	03fH
	DB	0e2H
	DB	03fH
	DB	03fH
	DB	03aH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	09H
	DB	03fH
	DB	086H
	DB	03fH
	DB	03fH
	DB	07fH
rxvt4apl_to_2741 DB 088H
	DB	088H
	DB	088H
	DB	088H
	DB	01fH
	DB	088H
	DB	088H
	DB	088H
	DB	05dH
	DB	07aH
	DB	03bH
	DB	088H
	DB	088H
	DB	05bH
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	05eH
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	03eH
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	01H
	DB	0b7H
	DB	096H
	DB	016H
	DB	057H
	DB	08bH
	DB	061H
	DB	0c5H
	DB	0d7H
	DB	096H
	DB	0cfH
	DB	040H
	DB	037H
	DB	0c0H
	DB	076H
	DB	023H
	DB	015H
	DB	02H
	DB	04H
	DB	07H
	DB	08H
	DB	0bH
	DB	0dH
	DB	0eH
	DB	010H
	DB	013H
	DB	0f6H
	DB	0b7H
	DB	087H
	DB	08bH
	DB	08eH
	DB	0d1H
	DB	020H
	DB	0e2H
	DB	0e4H
	DB	0e7H
	DB	0e8H
	DB	0ebH
	DB	0edH
	DB	0eeH
	DB	0f0H
	DB	0f3H
	DB	0c3H
	DB	0c5H
	DB	0c6H
	DB	0c9H
	DB	0caH
	DB	0ccH
	DB	0cfH
	DB	0d1H
	DB	0d2H
	DB	0a5H
	DB	0a6H
	DB	0a9H
	DB	0aaH
	DB	0acH
	DB	0afH
	DB	0b1H
	DB	0b2H
	DB	057H
	DB	0a3H
	DB	016H
	DB	095H
	DB	0edH
	DB	088H
	DB	062H
	DB	064H
	DB	067H
	DB	068H
	DB	06bH
	DB	06dH
	DB	06eH
	DB	070H
	DB	073H
	DB	043H
	DB	045H
	DB	046H
	DB	049H
	DB	04aH
	DB	04cH
	DB	04fH
	DB	051H
	DB	052H
	DB	025H
	DB	026H
	DB	029H
	DB	02aH
	DB	02cH
	DB	02fH
	DB	031H
	DB	032H
	DB	088H
	DB	0c9H
	DB	088H
	DB	0a6H
	DB	088H
	DB	088H
	DB	088H
	DB	0b2H
	DB	0afH
	DB	088H
	DB	0a0H
	DB	090H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	0a9H
	DB	0b1H
	DB	0a5H
	DB	088H
	DB	0e8H
	DB	020H
	DB	0f0H
	DB	061H
	DB	088H
	DB	088H
	DB	0c6H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	082H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	0e2H
	DB	088H
	DB	0f3H
	DB	088H
	DB	088H
	DB	088H
	DB	0e4H
	DB	0caH
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	0eeH
	DB	088H
	DB	0ebH
	DB	0e7H
	DB	088H
	DB	088H
	DB	08dH
	DB	088H
	DB	088H
	DB	088H
	DB	0e1H
	DB	0acH
	DB	0c3H
	DB	0ccH
	DB	093H
	DB	0d2H
	DB	0aaH
	DB	084H
	DB	088H
	DB	088H
xlate_table_ebcd_toebcdic DB 03fH
	DB	040H
	DB	0f1H
	DB	03fH
	DB	0f2H
	DB	03fH
	DB	03fH
	DB	0f3H
	DB	0f4H
	DB	03fH
	DB	03fH
	DB	0f5H
	DB	03fH
	DB	0f6H
	DB	0f7H
	DB	03fH
	DB	0f8H
	DB	03fH
	DB	03fH
	DB	0f9H
	DB	03fH
	DB	0f0H
	DB	07bH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	035H
	DB	03fH
	DB	036H
	DB	03fH
	DB	03fH
	DB	037H
	DB	07cH
	DB	03fH
	DB	03fH
	DB	061H
	DB	03fH
	DB	0a2H
	DB	0a3H
	DB	03fH
	DB	03fH
	DB	0a4H
	DB	0a5H
	DB	03fH
	DB	0a6H
	DB	03fH
	DB	03fH
	DB	0a7H
	DB	03fH
	DB	0a8H
	DB	0a9H
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	06bH
	DB	024H
	DB	03fH
	DB	03fH
	DB	025H
	DB	03fH
	DB	026H
	DB	027H
	DB	03fH
	DB	060H
	DB	03fH
	DB	03fH
	DB	091H
	DB	03fH
	DB	092H
	DB	093H
	DB	03fH
	DB	03fH
	DB	094H
	DB	095H
	DB	03fH
	DB	096H
	DB	03fH
	DB	03fH
	DB	097H
	DB	03fH
	DB	098H
	DB	099H
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	05bH
	DB	014H
	DB	03fH
	DB	03fH
	DB	015H
	DB	03fH
	DB	016H
	DB	017H
	DB	03fH
	DB	03fH
	DB	050H
	DB	081H
	DB	03fH
	DB	082H
	DB	03fH
	DB	03fH
	DB	083H
	DB	084H
	DB	03fH
	DB	03fH
	DB	085H
	DB	03fH
	DB	086H
	DB	087H
	DB	03fH
	DB	088H
	DB	03fH
	DB	03fH
	DB	089H
	DB	03fH
	DB	03fH
	DB	04bH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	05H
	DB	03fH
	DB	06H
	DB	03fH
	DB	03fH
	DB	07H
	DB	03fH
	DB	040H
	DB	07eH
	DB	03fH
	DB	04cH
	DB	03fH
	DB	03fH
	DB	05eH
	DB	07aH
	DB	03fH
	DB	03fH
	DB	06cH
	DB	03fH
	DB	07dH
	DB	06eH
	DB	03fH
	DB	05cH
	DB	03fH
	DB	03fH
	DB	04dH
	DB	03fH
	DB	05dH
	DB	07fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	035H
	DB	03fH
	DB	036H
	DB	03fH
	DB	03fH
	DB	03fH
	DB	04aH
	DB	03fH
	DB	03fH
	DB	06fH
	DB	03fH
	DB	0e2H
	DB	0e3H
	DB	03fH
	DB	03fH
	DB	0e4H
	DB	0e5H
	DB	03fH
	DB	0e6H
	DB	03fH
	DB	03fH
	DB	0e7H
	DB	03fH
	DB	0e8H
	DB	0e9H
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	04fH
	DB	024H
	DB	03fH
	DB	03fH
	DB	025H
	DB	03fH
	DB	026H
	DB	027H
	DB	03fH
	DB	06dH
	DB	03fH
	DB	03fH
	DB	0d1H
	DB	03fH
	DB	0d2H
	DB	0d3H
	DB	03fH
	DB	03fH
	DB	0d4H
	DB	0d5H
	DB	03fH
	DB	0d6H
	DB	03fH
	DB	03fH
	DB	0d7H
	DB	03fH
	DB	0d8H
	DB	0d9H
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	05aH
	DB	014H
	DB	03fH
	DB	03fH
	DB	015H
	DB	03fH
	DB	016H
	DB	017H
	DB	03fH
	DB	03fH
	DB	04eH
	DB	0c1H
	DB	03fH
	DB	0c2H
	DB	03fH
	DB	03fH
	DB	0c3H
	DB	0c4H
	DB	03fH
	DB	03fH
	DB	0c5H
	DB	03fH
	DB	0c6H
	DB	0c7H
	DB	03fH
	DB	0c8H
	DB	03fH
	DB	03fH
	DB	0c9H
	DB	03fH
	DB	03fH
	DB	05fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	05H
	DB	03fH
	DB	06H
	DB	03fH
	DB	03fH
	DB	07H
xlate_table_ebcd_fromebcdic DB 088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	07aH
	DB	07cH
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	05bH
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	058H
	DB	05bH
	DB	05dH
	DB	05eH
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	038H
	DB	03bH
	DB	088H
	DB	03eH
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	05eH
	DB	088H
	DB	088H
	DB	088H
	DB	01cH
	DB	01fH
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	01H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	0a0H
	DB	076H
	DB	084H
	DB	093H
	DB	0e1H
	DB	0b7H
	DB	061H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	0d7H
	DB	057H
	DB	090H
	DB	095H
	DB	087H
	DB	0f6H
	DB	040H
	DB	023H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	037H
	DB	08bH
	DB	0c0H
	DB	08eH
	DB	0a3H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	016H
	DB	020H
	DB	08dH
	DB	082H
	DB	096H
	DB	088H
	DB	062H
	DB	064H
	DB	067H
	DB	068H
	DB	06bH
	DB	06dH
	DB	06eH
	DB	070H
	DB	073H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	043H
	DB	045H
	DB	046H
	DB	049H
	DB	04aH
	DB	04cH
	DB	04fH
	DB	051H
	DB	052H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	025H
	DB	026H
	DB	029H
	DB	02aH
	DB	02cH
	DB	02fH
	DB	031H
	DB	032H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	0e2H
	DB	0e4H
	DB	0e7H
	DB	0e8H
	DB	0ebH
	DB	0edH
	DB	0eeH
	DB	0f0H
	DB	0f3H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	0c3H
	DB	0c5H
	DB	0c6H
	DB	0c9H
	DB	0caH
	DB	0ccH
	DB	0cfH
	DB	0d1H
	DB	0d2H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	0a5H
	DB	0a6H
	DB	0a9H
	DB	0aaH
	DB	0acH
	DB	0afH
	DB	0b1H
	DB	0b2H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	015H
	DB	02H
	DB	04H
	DB	07H
	DB	08H
	DB	0bH
	DB	0dH
	DB	0eH
	DB	010H
	DB	013H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
	DB	088H
xlate_table_cc_toebcdic DB 03fH
	DB	040H
	DB	0f1H
	DB	03fH
	DB	0f2H
	DB	03fH
	DB	03fH
	DB	0f3H
	DB	0f5H
	DB	03fH
	DB	03fH
	DB	0f7H
	DB	03fH
	DB	0f6H
	DB	0f8H
	DB	03fH
	DB	0f4H
	DB	03fH
	DB	03fH
	DB	0f0H
	DB	03fH
	DB	0a9H
	DB	0f9H
	DB	03fH
	DB	03fH
	DB	034H
	DB	035H
	DB	03fH
	DB	036H
	DB	03fH
	DB	03fH
	DB	037H
	DB	0a3H
	DB	03fH
	DB	03fH
	DB	0a7H
	DB	03fH
	DB	095H
	DB	0a4H
	DB	03fH
	DB	03fH
	DB	085H
	DB	084H
	DB	03fH
	DB	092H
	DB	03fH
	DB	03fH
	DB	083H
	DB	03fH
	DB	093H
	DB	088H
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	082H
	DB	024H
	DB	03fH
	DB	03fH
	DB	025H
	DB	03fH
	DB	026H
	DB	027H
	DB	03fH
	DB	05aH
	DB	03fH
	DB	03fH
	DB	094H
	DB	03fH
	DB	04bH
	DB	0a5H
	DB	03fH
	DB	03fH
	DB	07dH
	DB	099H
	DB	03fH
	DB	089H
	DB	03fH
	DB	03fH
	DB	081H
	DB	03fH
	DB	096H
	DB	0a2H
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	0a6H
	DB	014H
	DB	03fH
	DB	03fH
	DB	015H
	DB	03fH
	DB	016H
	DB	017H
	DB	03fH
	DB	03fH
	DB	091H
	DB	087H
	DB	03fH
	DB	07eH
	DB	03fH
	DB	03fH
	DB	086H
	DB	097H
	DB	03fH
	DB	03fH
	DB	05eH
	DB	03fH
	DB	098H
	DB	06bH
	DB	03fH
	DB	061H
	DB	03fH
	DB	03fH
	DB	0a8H
	DB	03fH
	DB	03fH
	DB	060H
	DB	03fH
	DB	03fH
	DB	04H
	DB	05H
	DB	03fH
	DB	06H
	DB	03fH
	DB	03fH
	DB	07H
	DB	03fH
	DB	040H
	DB	04fH
	DB	03fH
	DB	07cH
	DB	03fH
	DB	03fH
	DB	07bH
	DB	06cH
	DB	03fH
	DB	03fH
	DB	050H
	DB	03fH
	DB	04cH
	DB	05cH
	DB	03fH
	DB	05bH
	DB	03fH
	DB	03fH
	DB	05dH
	DB	03fH
	DB	0e9H
	DB	04dH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	036H
	DB	03fH
	DB	03fH
	DB	037H
	DB	0e3H
	DB	03fH
	DB	03fH
	DB	0e7H
	DB	03fH
	DB	0d5H
	DB	0e4H
	DB	03fH
	DB	03fH
	DB	0c5H
	DB	0c4H
	DB	03fH
	DB	0d2H
	DB	03fH
	DB	03fH
	DB	0c3H
	DB	03fH
	DB	0d3H
	DB	0c8H
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	0c2H
	DB	024H
	DB	03fH
	DB	03fH
	DB	025H
	DB	03fH
	DB	03fH
	DB	027H
	DB	03fH
	DB	06eH
	DB	03fH
	DB	03fH
	DB	0d4H
	DB	03fH
	DB	04bH
	DB	0e5H
	DB	03fH
	DB	03fH
	DB	07fH
	DB	0d9H
	DB	03fH
	DB	0c9H
	DB	03fH
	DB	03fH
	DB	0c1H
	DB	03fH
	DB	0d6H
	DB	0e2H
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	0e6H
	DB	014H
	DB	03fH
	DB	03fH
	DB	015H
	DB	03fH
	DB	016H
	DB	03fH
	DB	03fH
	DB	03fH
	DB	0d1H
	DB	0c7H
	DB	03fH
	DB	04eH
	DB	03fH
	DB	03fH
	DB	0c6H
	DB	0d7H
	DB	03fH
	DB	03fH
	DB	07aH
	DB	03fH
	DB	0d8H
	DB	06bH
	DB	03fH
	DB	06fH
	DB	03fH
	DB	03fH
	DB	0e8H
	DB	03fH
	DB	03fH
	DB	06dH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	05H
	DB	03fH
	DB	06H
	DB	03fH
	DB	03fH
	DB	03fH
xlate_table_cc_fromebcdic DB 0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	07aH
	DB	07cH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	05bH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	058H
	DB	05bH
	DB	05dH
	DB	05eH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	038H
	DB	03bH
	DB	0ebH
	DB	03eH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	05eH
	DB	0ebH
	DB	019H
	DB	01aH
	DB	01cH
	DB	01fH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	01H
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	045H
	DB	08dH
	DB	096H
	DB	0e4H
	DB	082H
	DB	08bH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	040H
	DB	090H
	DB	08eH
	DB	093H
	DB	06bH
	DB	0ebH
	DB	076H
	DB	070H
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	06eH
	DB	088H
	DB	0f6H
	DB	0c0H
	DB	0f0H
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	087H
	DB	084H
	DB	049H
	DB	064H
	DB	0c9H
	DB	0ebH
	DB	04fH
	DB	037H
	DB	02fH
	DB	02aH
	DB	029H
	DB	067H
	DB	062H
	DB	032H
	DB	04cH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	061H
	DB	02cH
	DB	031H
	DB	043H
	DB	025H
	DB	051H
	DB	068H
	DB	06dH
	DB	04aH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	052H
	DB	020H
	DB	026H
	DB	046H
	DB	057H
	DB	023H
	DB	073H
	DB	015H
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0cfH
	DB	0b7H
	DB	0afH
	DB	0aaH
	DB	0a9H
	DB	0e7H
	DB	0e2H
	DB	0b2H
	DB	0ccH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0e1H
	DB	0acH
	DB	0b1H
	DB	0c3H
	DB	0a5H
	DB	0d1H
	DB	0e8H
	DB	0edH
	DB	0caH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0d2H
	DB	0a0H
	DB	0a6H
	DB	0c6H
	DB	0d7H
	DB	0a3H
	DB	0f3H
	DB	095H
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	013H
	DB	02H
	DB	04H
	DB	07H
	DB	010H
	DB	08H
	DB	0dH
	DB	0bH
	DB	0eH
	DB	016H
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
	DB	0ebH
byte_parity_table DB 00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
$SG159288 DB	'YES', 00H
$SG159289 DB	'NO', 00H
	ORG $+1
$SG159290 DB	'YES', 00H
$SG159291 DB	'NO', 00H
	ORG $+1
$SG159292 DB	'YES', 00H
$SG159293 DB	'NO', 00H
	ORG $+1
$SG159294 DB	'D', 00H
	ORG $+6
$SG159295 DB	'HHC01064%s %1d:%04X COMM: %s: status text=%s, trans=%s, '
	DB	'tws=%s', 0aH, 00H
$SG159296 DB	'logdump', 00H
$SG159297 DB	'commadpt.c', 00H
	ORG $+1
$SG159298 DB	'D', 00H
	ORG $+2
$SG159299 DB	'HHC01049%s %1d:%04X COMM: %s: dump of %u (0x%04x) byte(s'
	DB	')', 0aH, 00H
	ORG $+1
$SG159304 DB	'D', 00H
	ORG $+2
$SG159300 DB	'logdump', 00H
$SG159301 DB	'commadpt.c', 00H
	ORG $+1
$SG159310 DB	' ', 00H
	ORG $+2
$SG159305 DB	'HHC01050%s %1d:%04X COMM: %s: %s', 0aH, 00H
	ORG $+2
$SG159312 DB	'D', 00H
	ORG $+2
$SG159306 DB	'logdump', 00H
$SG159307 DB	'commadpt.c', 00H
	ORG $+1
$SG159308 DB	'%04X:', 00H
	ORG $+2
$SG159311 DB	'%02X', 00H
	ORG $+3
$SG159326 DB	'D', 00H
	ORG $+2
$SG159313 DB	'HHC01050%s %1d:%04X COMM: %s: %s', 0aH, 00H
	ORG $+2
$SG159341 DB	'D', 00H
	ORG $+2
$SG159314 DB	'logdump', 00H
$SG159315 DB	'commadpt.c', 00H
	ORG $+1
$SG159401 DB	'D', 00H
	ORG $+2
$SG159325 DB	'allocated', 00H
	ORG $+2
$SG159407 DB	'D', 00H
	ORG $+2
$SG159327 DB	'HHC01065%s Ring buffer for ring %p at %p %s', 0aH, 00H
	ORG $+3
$SG159328 DB	'commadpt_ring_init', 00H
	ORG $+1
$SG159423 DB	'E', 00H
	ORG $+2
$SG159329 DB	'commadpt.c', 00H
	ORG $+1
$SG159340 DB	'freed', 00H
	ORG $+2
$SG159435 DB	'tcp', 00H
$SG159342 DB	'HHC01065%s Ring buffer for ring %p at %p %s', 0aH, 00H
	ORG $+3
$SG159343 DB	'commadpt_ring_terminate', 00H
$SG159344 DB	'commadpt.c', 00H
	ORG $+1
$SG159476 DB	'I', 00H
	ORG $+2
$SG159398 DB	'commadpt.c:613', 00H
	ORG $+1
$SG159400 DB	'control block freed', 00H
$SG159498 DB	'D', 00H
	ORG $+2
$SG159402 DB	'HHC01052%s %1d:%04X COMM: clean: %s', 0aH, 00H
	ORG $+3
$SG159403 DB	'commadpt_clean_device', 00H
	ORG $+2
$SG159404 DB	'commadpt.c', 00H
	ORG $+1
$SG159507 DB	'D', 00H
	ORG $+2
$SG159406 DB	'control block not freed: not allocated', 00H
	ORG $+1
$SG159408 DB	'HHC01052%s %1d:%04X COMM: clean: %s', 0aH, 00H
	ORG $+3
$SG159409 DB	'commadpt_clean_device', 00H
	ORG $+2
$SG159410 DB	'commadpt.c', 00H
	ORG $+1
$SG159511 DB	'D', 00H
	ORG $+2
$SG159422 DB	'malloc(%d)', 00H
	ORG $+1
$SG159516 DB	'D', 00H
	ORG $+2
$SG159424 DB	'HHC01000%s %1d:%04X COMM: error in function %s: %s', 0aH
	DB	00H
$SG159526 DB	'D', 00H
	ORG $+2
$SG159425 DB	'commadpt_alloc_device', 00H
	ORG $+2
$SG159426 DB	'commadpt.c', 00H
	ORG $+1
$SG159535 DB	'D', 00H
	ORG $+2
$SG159468 DB	'commadpt_connout', 00H
	ORG $+3
$SG159541 DB	'D', 00H
	ORG $+2
$SG159469 DB	'commadpt.c', 00H
	ORG $+5
$SG159470 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159472 DB	'commadpt_connout', 00H
	ORG $+3
$SG159582 DB	'TTY', 00H
$SG159473 DB	'commadpt.c', 00H
	ORG $+5
$SG159474 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159478 DB	'commadpt_connout', 00H
	ORG $+7
$SG159477 DB	'HHC01001%s %1d:%04X COMM: connect out to %s:%d failed du'
	DB	'ring initial status: %s', 0aH, 00H
	ORG $+3
$SG159584 DB	'I', 00H
	ORG $+2
$SG159479 DB	'commadpt.c', 00H
	ORG $+1
$SG159596 DB	0dH, 0aH, 00H
	ORG $+1
$SG159499 DB	'HHC01066%s %1d:%04X COMM: found data beyond EON', 0aH, 00H
	ORG $+3
$SG159605 DB	'TTY', 00H
$SG159500 DB	'commadpt_initiate_userdial', 00H
	ORG $+1
$SG159607 DB	'I', 00H
	ORG $+2
$SG159501 DB	'commadpt.c', 00H
	ORG $+5
$SG159508 DB	'HHC01067%s %1d:%04X COMM: found incorrect IP address sec'
	DB	'tion at position %d', 0aH, 00H
	ORG $+3
$SG159509 DB	'commadpt_initiate_userdial', 00H
	ORG $+1
$SG159672 DB	'D', 00H
	ORG $+2
$SG159510 DB	'commadpt.c', 00H
	ORG $+1
$SG159678 DB	'D', 00H
	ORG $+2
$SG159512 DB	'HHC01068%s %1d:%04X COMM: %d (0x%04X) greater than 255 ('
	DB	'0xFE)', 0aH, 00H
	ORG $+1
$SG159513 DB	'commadpt_initiate_userdial', 00H
	ORG $+1
$SG159684 DB	'D', 00H
	ORG $+2
$SG159514 DB	'commadpt.c', 00H
	ORG $+1
$SG159766 DB	'W', 00H
	ORG $+2
$SG159517 DB	'HHC01069%s %1d:%04X COMM: too many separators in dial da'
	DB	'ta', 0aH, 00H
$SG159772 DB	'E', 00H
	ORG $+2
$SG159518 DB	'commadpt_initiate_userdial', 00H
	ORG $+1
$SG159777 DB	'W', 00H
	ORG $+2
$SG159519 DB	'commadpt.c', 00H
	ORG $+1
$SG159783 DB	'E', 00H
	ORG $+2
$SG159527 DB	'HHC01070%s %1d:%04X COMM: incorrect dial data byte %02X', 0aH
	DB	00H
	ORG $+3
$SG159787 DB	'I', 00H
	ORG $+2
$SG159528 DB	'commadpt_initiate_userdial', 00H
	ORG $+1
$SG159869 DB	'I', 00H
	ORG $+2
$SG159529 DB	'commadpt.c', 00H
	ORG $+5
$SG159536 DB	'HHC01071%s %1d:%04X COMM: not enough separator in dial d'
	DB	'ata, %d found', 0aH, 00H
	ORG $+1
$SG159537 DB	'commadpt_initiate_userdial', 00H
	ORG $+1
$SG159875 DB	'E', 00H
	ORG $+2
$SG159538 DB	'commadpt.c', 00H
	ORG $+1
$SG159583 DB	'2741', 00H
	ORG $+7
$SG159542 DB	'HHC01072%s %1d:%04X COMM: destination tcp port %d exceed'
	DB	's maximum of 65535', 0aH, 00H
$SG159884 DB	'W', 00H
	ORG $+2
$SG159543 DB	'commadpt_initiate_userdial', 00H
	ORG $+1
$SG159909 DB	'E', 00H
	ORG $+2
$SG159544 DB	'commadpt.c', 00H
	ORG $+1
$SG159914 DB	'I', 00H
	ORG $+2
$SG159585 DB	'HHC01073%s %s:%d terminal connected cua %04X term %s', 0aH
	DB	00H
	ORG $+2
$SG159587 DB	'connect_message', 00H
$SG159588 DB	'commadpt.c', 00H
	ORG $+5
$SG159591 DB	'connect_message', 00H
$SG159606 DB	'2741', 00H
	ORG $+3
$SG159589 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159592 DB	'commadpt.c', 00H
	ORG $+5
$SG159597 DB	'connect_message', 00H
$SG159608 DB	'HHC01073%s %s:%d terminal connected cua %04X term %s', 0aH
	DB	00H
	ORG $+2
$SG159593 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159598 DB	'commadpt.c', 00H
	ORG $+5
$SG159601 DB	'connect_message', 00H
$SG159674 DB	'commadpt_read_tty', 00H
	ORG $+6
$SG159599 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159602 DB	'commadpt.c', 00H
	ORG $+5
$SG159609 DB	'connect_message', 00H
$SG159680 DB	'commadpt_read_tty', 00H
	ORG $+6
$SG159603 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159610 DB	'commadpt.c', 00H
	ORG $+1
$SG159922 DB	'D', 00H
	ORG $+2
$SG159613 DB	'connect_message', 00H
$SG159614 DB	'commadpt.c', 00H
	ORG $+5
$SG159617 DB	'connect_message', 00H
$SG159685 DB	'HHC01055%s %1d:%04X COMM: received telnet IAC 0x%02x', 0aH
	DB	00H
	ORG $+2
$SG159615 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159618 DB	'commadpt.c', 00H
	ORG $+5
$SG159686 DB	'commadpt_read_tty', 00H
	ORG $+6
$SG159619 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159722 DB	'RCV2', 00H
	ORG $+3
$SG159673 DB	'HHC01053%s %1d:%04X COMM: received telnet command 0x%02x'
	DB	' 0x%02x', 0aH, 00H
	ORG $+3
$SG159908 DB	'bind()', 00H
	ORG $+1
$SG159942 DB	'D', 00H
	ORG $+2
$SG159675 DB	'commadpt.c', 00H
	ORG $+5
$SG159679 DB	'HHC01054%s %1d:%04X COMM: sending telnet command 0x%02x '
	DB	'0x%02x', 0aH, 00H
$SG159681 DB	'commadpt.c', 00H
	ORG $+1
$SG159952 DB	'D', 00H
	ORG $+2
$SG159687 DB	'commadpt.c', 00H
	ORG $+1
$SG159736 DB	'RECV', 00H
	ORG $+3
$SG159996 DB	'D', 00H
	ORG $+2
$SG159742 DB	'commadpt.c:1166', 00H
$SG159768 DB	'SET_COMM_KEEPALIVE', 00H
	ORG $+5
$SG159767 DB	'HHC01096%s %1d:%04X COMM: This build of Hercules has onl'
	DB	'y partial TCP keepalive support', 0aH, 00H
	ORG $+3
$SG160002 DB	'D', 00H
	ORG $+2
$SG159769 DB	'commadpt.c', 00H
	ORG $+1
$SG160010 DB	'E', 00H
	ORG $+2
$SG159771 DB	'set_socket_keepalive()', 00H
	ORG $+1
$SG159773 DB	'HHC01000%s %1d:%04X COMM: error in function %s: %s', 0aH
	DB	00H
$SG160016 DB	'D', 00H
	ORG $+2
$SG159774 DB	'SET_COMM_KEEPALIVE', 00H
	ORG $+1
$SG160024 DB	'D', 00H
	ORG $+2
$SG159775 DB	'commadpt.c', 00H
	ORG $+5
$SG159779 DB	'SET_COMM_KEEPALIVE', 00H
	ORG $+5
$SG159778 DB	'HHC01092%s %1d:%04X COMM: Not all TCP keepalive settings'
	DB	' honored', 0aH, 00H
	ORG $+2
$SG160029 DB	'D', 00H
	ORG $+2
$SG159780 DB	'commadpt.c', 00H
	ORG $+1
$SG160042 DB	'D', 00H
	ORG $+2
$SG159782 DB	'get_socket_keepalive()', 00H
	ORG $+1
$SG159784 DB	'HHC01000%s %1d:%04X COMM: error in function %s: %s', 0aH
	DB	00H
$SG160060 DB	'D', 00H
	ORG $+2
$SG159785 DB	'SET_COMM_KEEPALIVE', 00H
	ORG $+1
$SG160069 DB	'W', 00H
	ORG $+2
$SG159786 DB	'commadpt.c', 00H
	ORG $+1
$SG160079 DB	'I', 00H
	ORG $+2
$SG159788 DB	'HHC01093%s %1d:%04X COMM: Keepalive: (%d,%d,%d)', 0aH, 00H
	ORG $+3
$SG160095 DB	'I', 00H
	ORG $+2
$SG159789 DB	'SET_COMM_KEEPALIVE', 00H
	ORG $+1
$SG160144 DB	'E', 00H
	ORG $+2
$SG159790 DB	'commadpt.c', 00H
	ORG $+1
$SG160156 DB	'E', 00H
	ORG $+2
$SG159865 DB	'commadpt.c:1299', 00H
$SG159866 DB	'commadpt.c:1310', 00H
$SG159867 DB	'%1d:%04X communication thread', 00H
	ORG $+2
$SG159868 DB	'commadpt.c:1313', 00H
$SG159870 DB	'HHC00100%s Thread id %8.8x, prio %d, name ''%s'' started'
	DB	0aH, 00H
$SG159871 DB	'commadpt_thread', 00H
$SG159872 DB	'commadpt.c', 00H
	ORG $+5
$SG159877 DB	'commadpt_thread', 00H
$SG159910 DB	'HHC01000%s %1d:%04X COMM: error in function %s: %s', 0aH
	DB	00H
	ORG $+4
$SG159876 DB	'HHC01002%s %1d:%04X COMM: cannot obtain socket for incom'
	DB	'ing calls: %s', 0aH, 00H
	ORG $+1
$SG159878 DB	'commadpt.c', 00H
	ORG $+1
$SG160170 DB	'W', 00H
	ORG $+2
$SG159879 DB	'commadpt.c:1327', 00H
$SG159923 DB	'HHC01074%s %1d:%04X COMM: cthread - entry - devexec %s', 0aH
	DB	00H
$SG159885 DB	'HHC01003%s %1d:%04X COMM: waiting 5 seconds for port %d '
	DB	'to become available', 0aH, 00H
	ORG $+3
$SG159886 DB	'commadpt_thread', 00H
$SG159887 DB	'commadpt.c', 00H
	ORG $+1
$SG160174 DB	'I', 00H
	ORG $+2
$SG159889 DB	'commadpt.c:1358', 00H
$SG159891 DB	'commadpt.c:1367', 00H
$SG159892 DB	'commadpt.c:1378', 00H
$SG159893 DB	'commadpt.c', 00H
	ORG $+1
$SG160250 DB	'D', 00H
	ORG $+2
$SG159894 DB	'commadpt.c:1380', 00H
$SG159896 DB	'commadpt.c:1388', 00H
$SG159899 DB	'commadpt_thread', 00H
$SG159900 DB	'commadpt.c', 00H
	ORG $+5
$SG159901 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159903 DB	'commadpt_thread', 00H
$SG159904 DB	'commadpt.c', 00H
	ORG $+5
$SG159907 DB	'commadpt.c:1396', 00H
$SG159953 DB	'HHC01076%s %1d:%04X COMM: writing byte %02X in socket', 0aH
	DB	00H
	ORG $+1
$SG159905 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159911 DB	'commadpt_thread', 00H
$SG159912 DB	'commadpt.c', 00H
	ORG $+5
$SG159916 DB	'commadpt_thread', 00H
$SG160011 DB	'HHC01000%s %1d:%04X COMM: error in function %s: %s', 0aH
	DB	00H
	ORG $+4
$SG159915 DB	'HHC01004%s %1d:%04X COMM: listening on port %d for incom'
	DB	'ing TCP connections', 0aH, 00H
	ORG $+3
$SG159917 DB	'commadpt.c', 00H
	ORG $+1
$SG160255 DB	'I', 00H
	ORG $+2
$SG159919 DB	'commadpt.c:1425', 00H
$SG159924 DB	'commadpt_thread', 00H
$SG159925 DB	'commadpt.c', 00H
	ORG $+1
$SG160260 DB	'D', 00H
	ORG $+2
$SG159930 DB	'commadpt.c:1471', 00H
$SG159934 DB	'commadpt.c:1480', 00H
$SG159943 DB	'HHC01075%s %1d:%04X COMM: poll command abort, poll addre'
	DB	'ss > 7 bytes', 0aH, 00H
	ORG $+2
$SG159944 DB	'commadpt_thread', 00H
$SG159945 DB	'commadpt.c', 00H
	ORG $+1
$SG160265 DB	'E', 00H
	ORG $+2
$SG159946 DB	'commadpt.c:1529', 00H
$SG159954 DB	'commadpt_thread', 00H
$SG159955 DB	'commadpt.c', 00H
	ORG $+1
$SG160270 DB	'E', 00H
	ORG $+2
$SG159960 DB	'commadpt.c:1578', 00H
$SG159962 DB	'commadpt.c:1592', 00H
$SG159965 DB	'commadpt.c:1600', 00H
$SG159968 DB	'commadpt.c:1607', 00H
$SG159971 DB	'commadpt.c:1620', 00H
$SG159978 DB	'commadpt.c:1644', 00H
$SG159983 DB	'commadpt.c:1683', 00H
$SG159986 DB	'commadpt.c:1698', 00H
$SG159990 DB	'commadpt.c:1706', 00H
$SG159993 DB	'commadpt.c:1722', 00H
$SG159994 DB	'commadpt.c:1736', 00H
$SG160017 DB	'HHC01079%s %1d:%04X COMM: cthread - select time out', 0aH
	DB	00H
	ORG $+3
$SG159997 DB	'HHC01077%s %1d:%04X COMM: cthread - select in maxfd %d /'
	DB	' devexec %s', 0aH, 00H
	ORG $+3
$SG159998 DB	'commadpt_thread', 00H
$SG159999 DB	'commadpt.c', 00H
	ORG $+1
$SG160279 DB	'*', 00H
	ORG $+2
$SG160000 DB	'commadpt.c', 00H
	ORG $+1
$SG160287 DB	'*', 00H
	ORG $+2
$SG160003 DB	'HHC01078%s %1d:%04X COMM: cthread - select out return co'
	DB	'de %d', 0aH, 00H
	ORG $+1
$SG160004 DB	'commadpt_thread', 00H
$SG160005 DB	'commadpt.c', 00H
	ORG $+1
$SG160301 DB	'bsc', 00H
$SG160006 DB	'commadpt.c:1749', 00H
$SG160009 DB	'select()', 00H
	ORG $+3
$SG160276 DB	'LPORT', 00H
	ORG $+2
$SG160306 DB	'tty', 00H
$SG160012 DB	'commadpt_thread', 00H
$SG160013 DB	'commadpt.c', 00H
	ORG $+1
$SG160328 DB	'no', 00H
	ORG $+1
$SG160018 DB	'commadpt_thread', 00H
$SG160019 DB	'commadpt.c', 00H
	ORG $+1
$SG160331 DB	'yes', 00H
$SG160020 DB	'commadpt.c:1771', 00H
$SG160025 DB	'HHC01080%s %1d:%04X COMM: cthread - ipc pipe closed', 0aH
	DB	00H
	ORG $+3
$SG160026 DB	'commadpt_thread', 00H
$SG160027 DB	'commadpt.c', 00H
	ORG $+1
$SG160336 DB	'no', 00H
	ORG $+1
$SG160030 DB	'HHC01081%s %1d:%04X COMM: cthread - ipc pipe data: code '
	DB	'%d', 0aH, 00H
$SG160339 DB	'yes', 00H
$SG160031 DB	'commadpt_thread', 00H
$SG160032 DB	'commadpt.c', 00H
	ORG $+1
$SG160344 DB	'no', 00H
	ORG $+1
$SG160036 DB	'commadpt.c:1807', 00H
$SG160037 DB	'commadpt.c:1808', 00H
$SG160043 DB	'HHC01082%s %1d:%04X COMM: cthread - inbound socket data', 0aH
	DB	00H
	ORG $+3
$SG160281 DB	'LHOST', 00H
	ORG $+2
$SG160340 DB	'SENDCR', 00H
	ORG $+1
$SG160347 DB	'yes', 00H
$SG160044 DB	'commadpt_thread', 00H
$SG160045 DB	'commadpt.c', 00H
	ORG $+1
$SG160352 DB	'no', 00H
	ORG $+1
$SG160055 DB	'commadpt.c:1858', 00H
$SG160061 DB	'HHC01083%s %1d:%04X COMM: cthread - socket write availab'
	DB	'le', 0aH, 00H
$SG160355 DB	'yes', 00H
$SG160062 DB	'commadpt_thread', 00H
$SG160063 DB	'commadpt.c', 00H
	ORG $+5
$SG160071 DB	'commadpt_thread', 00H
$SG160096 DB	'HHC00101%s Thread id %8.8x, prio %d, name ''%s'' ended', 0aH
	DB	00H
	ORG $+2
$SG160070 DB	'HHC01005%s %1d:%04X COMM: outgoing call failed during %s'
	DB	' command: %s', 0aH, 00H
	ORG $+2
$SG160072 DB	'commadpt.c', 00H
	ORG $+1
$SG160359 DB	'%x', 00H
	ORG $+1
$SG160074 DB	'commadpt.c:1908', 00H
$SG160080 DB	'HHC01006%s %1d:%04X COMM: incoming call', 0aH, 00H
	ORG $+3
$SG160284 DB	'RPORT', 00H
	ORG $+2
$SG160348 DB	'BINARY', 00H
	ORG $+1
$SG160362 DB	'%x', 00H
	ORG $+1
$SG160081 DB	'commadpt_thread', 00H
$SG160082 DB	'commadpt.c', 00H
	ORG $+1
$SG160365 DB	'%x', 00H
	ORG $+1
$SG160088 DB	'commadpt.c:1961', 00H
$SG160093 DB	'commadpt.c:1992', 00H
$SG160094 DB	'commadpt.c:2001', 00H
$SG160097 DB	'commadpt_thread', 00H
$SG160098 DB	'commadpt.c', 00H
	ORG $+1
$SG160368 DB	'%x', 00H
	ORG $+1
$SG160099 DB	'commadpt.c:2002', 00H
$SG160114 DB	'commadpt_wakeup', 00H
$SG160115 DB	'commadpt.c', 00H
	ORG $+5
$SG160118 DB	'commadpt_wakeup', 00H
$SG160145 DB	'HHC01007%s %1d:%04X COMM: option %s value %s invalid', 0aH
	DB	00H
	ORG $+2
$SG160116 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160119 DB	'commadpt.c', 00H
	ORG $+5
$SG160127 DB	'commadpt.c:2024', 00H
$SG160175 DB	'HHC01010%s %1d:%04X COMM: RPORT parameter ignored', 0aH, 00H
	ORG $+5
$SG160120 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160133 DB	'commadpt.c:2034', 00H
$SG160134 DB	'commadpt.c:2047', 00H
$SG160135 DB	'commadpt.c:2050', 00H
$SG160146 DB	'msg01007e', 00H
	ORG $+2
$SG160371 DB	'%x', 00H
	ORG $+1
$SG160147 DB	'commadpt.c', 00H
	ORG $+5
$SG160251 DB	'HHC01058%s %1d:%04X COMM: initialization starting', 0aH, 00H
	ORG $+5
$SG160157 DB	'HHC01008%s %1d:%04X COMM: missing parameter: DIAL(%s) an'
	DB	'd %s not specified', 0aH, 00H
$SG160382 DB	'yes', 00H
$SG160158 DB	'msg01008e', 00H
	ORG $+2
$SG160383 DB	'1', 00H
	ORG $+2
$SG160159 DB	'commadpt.c', 00H
	ORG $+5
$SG160171 DB	'HHC01009%s %1d:%04X COMM: conflicting parameter: DIAL(%s'
	DB	') and %s=%s specified', 0aH, 00H
	ORG $+1
$SG160172 DB	'msg01009w', 00H
	ORG $+2
$SG160387 DB	'no', 00H
	ORG $+1
$SG160173 DB	'commadpt.c', 00H
	ORG $+1
$SG160388 DB	'0', 00H
	ORG $+2
$SG160176 DB	'msg01009w', 00H
	ORG $+2
$SG160390 DB	'in', 00H
	ORG $+1
$SG160177 DB	'commadpt.c', 00H
	ORG $+1
$SG160392 DB	'out', 00H
$SG160252 DB	'commadpt_init_handler', 00H
	ORG $+2
$SG160253 DB	'commadpt.c', 00H
	ORG $+1
$SG160393 DB	'E', 00H
	ORG $+2
$SG160256 DB	'HHC01011%s %1d:%04X COMM: initialization not performed', 0aH
	DB	00H
$SG160257 DB	'commadpt_init_handler', 00H
	ORG $+2
$SG160258 DB	'commadpt.c', 00H
	ORG $+5
$SG160262 DB	'commadpt_init_handler', 00H
	ORG $+2
$SG160261 DB	'HHC01059%s %1d:%04X COMM: initialization: control block '
	DB	'allocated', 0aH, 00H
	ORG $+1
$SG160400 DB	'no', 00H
	ORG $+1
$SG160263 DB	'commadpt.c', 00H
	ORG $+1
$SG160404 DB	'KA', 00H
	ORG $+1
$SG160266 DB	'HHC01012%s %1d:%04X COMM: error parsing %s', 0aH, 00H
$SG160408 DB	'no', 00H
	ORG $+1
$SG160267 DB	'commadpt_init_handler', 00H
	ORG $+2
$SG160268 DB	'commadpt.c', 00H
	ORG $+1
$SG160411 DB	'yes', 00H
$SG160271 DB	'HHC01012%s %1d:%04X COMM: error parsing %s', 0aH, 00H
$SG160415 DB	'NO', 00H
	ORG $+1
$SG160272 DB	'commadpt_init_handler', 00H
	ORG $+2
$SG160273 DB	'commadpt.c', 00H
	ORG $+1
$SG160289 DB	'RHOST', 00H
	ORG $+2
$SG160297 DB	'tele2', 00H
	ORG $+2
$SG160298 DB	'ibm1', 00H
	ORG $+3
$SG160302 DB	'LNCTL', 00H
	ORG $+2
$SG160309 DB	'2741', 00H
	ORG $+3
$SG160384 DB	'inout', 00H
	ORG $+2
$SG160417 DB	'IN', 00H
	ORG $+1
$SG160312 DB	'rxvt4apl', 00H
	ORG $+3
$SG160313 DB	'TERM', 00H
	ORG $+3
$SG160317 DB	'corr', 00H
	ORG $+3
$SG160320 DB	'ebcd', 00H
	ORG $+3
$SG160323 DB	'none', 00H
	ORG $+3
$SG160324 DB	'CODE', 00H
	ORG $+3
$SG160332 DB	'CRLF', 00H
	ORG $+3
$SG160419 DB	'OUT', 00H
$SG160356 DB	'UCTRANS', 00H
$SG160374 DB	'dumb', 00H
	ORG $+3
$SG160377 DB	'dumb', 00H
	ORG $+3
$SG160394 DB	'HHC01013%s %1d:%04X COMM: incorrect switched/dial specif'
	DB	'ication %s: defaulting to DIAL=OUT', 0aH, 00H
$SG160432 DB	'%d', 00H
	ORG $+1
$SG160395 DB	'commadpt_init_handler', 00H
	ORG $+2
$SG160396 DB	'commadpt.c', 00H
	ORG $+1
$SG160433 DB	'ETO', 00H
$SG160412 DB	'CRLF2CR', 00H
$SG160421 DB	'INOUT', 00H
	ORG $+2
$SG160423 DB	'*ERR*', 00H
	ORG $+2
$SG160426 DB	'LPORT', 00H
	ORG $+2
$SG160428 DB	'RPORT', 00H
	ORG $+2
$SG160430 DB	'RHOST', 00H
	ORG $+2
$SG160437 DB	'LPORT', 00H
	ORG $+2
$SG160439 DB	'%d', 00H
	ORG $+1
$SG160440 DB	'RPORT', 00H
	ORG $+2
$SG160442 DB	'RHOST', 00H
	ORG $+2
$SG160445 DB	'%d', 00H
	ORG $+1
$SG160446 DB	'LPORT', 00H
	ORG $+2
$SG160448 DB	'%d', 00H
	ORG $+1
$SG160449 DB	'RPORT', 00H
	ORG $+2
$SG160451 DB	'LHOST', 00H
	ORG $+2
$SG160453 DB	'RHOST', 00H
	ORG $+2
$SG160455 DB	'I', 00H
	ORG $+2
$SG160456 DB	'HHC01014%s %1d:%04X COMM: initialization failed due to p'
	DB	'revious errors', 0aH, 00H
$SG160457 DB	'commadpt_init_handler', 00H
	ORG $+2
$SG160458 DB	'commadpt.c', 00H
	ORG $+1
$SG160479 DB	'E', 00H
	ORG $+2
$SG160459 DB	'commadpt.c:2627', 00H
$SG160460 DB	'&dev->commadpt->lock', 00H
	ORG $+3
$SG160461 DB	'commadpt.c:2630', 00H
$SG160462 DB	'commadpt.c:2631', 00H
$SG160464 DB	'commadpt_init_handler', 00H
	ORG $+2
$SG160465 DB	'commadpt.c', 00H
	ORG $+5
$SG160466 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160468 DB	'commadpt_init_handler', 00H
	ORG $+2
$SG160469 DB	'commadpt.c', 00H
	ORG $+5
$SG160470 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG160472 DB	'commadpt.c:2637', 00H
$SG160476 DB	'commadpt %4.4X thread', 00H
	ORG $+2
$SG160477 DB	'commadpt.c:2657', 00H
$SG160480 DB	'HHC00102%s Error in function create_thread(): %s', 0aH, 00H
	ORG $+2
$SG160485 DB	'E', 00H
	ORG $+2
$SG160481 DB	'commadpt_init_handler', 00H
	ORG $+2
$SG160482 DB	'commadpt.c', 00H
	ORG $+1
$SG160514 DB	'.', 00H
	ORG $+2
$SG160483 DB	'commadpt.c:2661', 00H
$SG160486 DB	'HHC01015%s %1d:%04X COMM: BSC communication thread did n'
	DB	'ot initialize', 0aH, 00H
	ORG $+1
$SG160487 DB	'commadpt_init_handler', 00H
	ORG $+2
$SG160488 DB	'commadpt.c', 00H
	ORG $+1
$SG160515 DB	'YES', 00H
$SG160489 DB	'commadpt.c:2669', 00H
$SG160490 DB	'commadpt.c:2675', 00H
commadpt_lnctl_names DQ FLAT:$SG160492
	DQ	FLAT:$SG160493
	DQ	FLAT:$SG160494
$SG160508 DB	'LINE', 00H
	ORG $+3
$SG160516 DB	'NO', 00H
	ORG $+1
$SG160517 DB	'YES', 00H
$SG160518 DB	'NO', 00H
	ORG $+1
$SG160519 DB	'ENA', 00H
$SG160520 DB	'DISA', 00H
	ORG $+3
$SG160521 DB	'%s STA=%s CN=%s, EIB=%s OP=%s IO[%llu]', 00H
	ORG $+1
$SG160528 DB	'D', 00H
	ORG $+2
$SG160536 DB	'D', 00H
	ORG $+2
$SG160529 DB	'HHC01060%s %1d:%04X COMM: closing down', 0aH, 00H
$SG160530 DB	'commadpt_close_device', 00H
	ORG $+2
$SG160531 DB	'commadpt.c', 00H
	ORG $+1
$SG160611 DB	'D', 00H
	ORG $+2
$SG160533 DB	'commadpt.c:2722', 00H
$SG160537 DB	'HHC01061%s %1d:%04X COMM: closed down', 0aH, 00H
	ORG $+1
$SG160538 DB	'commadpt_close_device', 00H
	ORG $+2
$SG160539 DB	'commadpt.c', 00H
	ORG $+1
$SG160636 DB	'EIB', 00H
$SG160612 DB	'HHC01063%s %1d:%04X COMM: CCW exec - entry code %x', 0aH
	DB	00H
$SG160638 DB	'D', 00H
	ORG $+2
$SG160613 DB	'commadpt_execute_ccw', 00H
	ORG $+3
$SG160614 DB	'commadpt.c', 00H
	ORG $+5
$SG160615 DB	'commadpt.c:2780', 00H
$SG160637 DB	'NO EIB', 00H
	ORG $+1
$SG160639 DB	'HHC01084%s %1d:%04X COMM: set mode %s', 0aH, 00H
	ORG $+1
$SG160640 DB	'commadpt_execute_ccw', 00H
	ORG $+3
$SG160641 DB	'commadpt.c', 00H
	ORG $+1
$SG160719 DB	'Read', 00H
	ORG $+3
$SG160723 DB	'Writ', 00H
	ORG $+3
$SG160729 DB	'RCV0', 00H
	ORG $+7
$SG160781 DB	'commadpt.c:3704', 00H
$SG160823 DB	'DEVBLK', 00H
	ORG $+1
comadpt_device_hndinfo DQ FLAT:commadpt_init_handler
	DQ	FLAT:commadpt_execute_ccw
	DQ	FLAT:commadpt_close_device
	DQ	FLAT:commadpt_query_device
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:commadpt_halt_or_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:commadpt_immed_command
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
$SG160819 DB	'SDL 4.60', 00H
	ORG $+7
$SG160820 DB	'HERCULES', 00H
	ORG $+7
$SG160822 DB	'SDL 4.00', 00H
	ORG $+7
$SG160825 DB	'SDL 4.2', 00H
$SG160826 DB	'SYSBLK', 00H
	ORG $+1
$SG160831 DB	'2703', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:commadpt_query_device
	DD	025H
	DD	026fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:commadpt_init_handler
	DD	020H
	DD	02a27H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:commadpt_thread
	DD	01cH
	DD	0223eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:commadpt_read
	DD	016H
	DD	0168H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:commadpt_read_tty
	DD	020H
	DD	0b52H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:connect_message
	DD	023H
	DD	032dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:commadpt_connout
	DD	016H
	DD	02c2H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:commadpt_alloc_device
	DD	017H
	DD	0284H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:logdump
	DD	025H
	DD	0587H
voltbl	ENDS
xdata	SEGMENT
$unwind$DebuggerTrace DD 011801H
	DD	0a218H
$unwind$logdump DD 022d19H
	DD	02d011bH
	DD	imagerel __GSHandlerCheck
	DD	0150H
$unwind$commadpt_ring_init DD 011301H
	DD	0a213H
$unwind$commadpt_ring_terminate DD 010d01H
	DD	0a20dH
$unwind$commadpt_ring_pushbfr DD 011301H
	DD	06213H
$unwind$commadpt_ring_pop DD 010901H
	DD	02209H
$unwind$commadpt_ring_popbfr DD 011301H
	DD	06213H
$unwind$commadpt_clean_device DD 010901H
	DD	0c209H
$unwind$commadpt_alloc_device DD 031f19H
	DD	014010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	098H
$unwind$commadpt_getport DD 010901H
	DD	06209H
$unwind$commadpt_getaddr DD 010e01H
	DD	0620eH
$unwind$commadpt_connout DD 021e19H
	DD	035010cH
	DD	imagerel __GSHandlerCheck
	DD	0190H
$unwind$commadpt_initiate_userdial DD 020c01H
	DD	019010cH
$unwind$connect_message DD 022b19H
	DD	0350119H
	DD	imagerel __GSHandlerCheck
	DD	0190H
$unwind$commadpt_read_poll DD 010901H
	DD	06209H
$unwind$commadpt_read_tty DD 022819H
	DD	0990116H
	DD	imagerel __GSHandlerCheck
	DD	04b0H
$unwind$commadpt_read DD 021e19H
	DD	029010cH
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$SET_COMM_KEEPALIVE DD 021001H
	DD	0170110H
$unwind$commadpt_thread DD 022419H
	DD	0c450112H
	DD	imagerel __GSHandlerCheck
	DD	06218H
$unwind$commadpt_wakeup DD 010d01H
	DD	0420dH
$unwind$commadpt_wait DD 010901H
	DD	06209H
$unwind$commadpt_halt_or_clear DD 010901H
	DD	04209H
$unwind$msg01007e DD 011301H
	DD	0e213H
$unwind$msg01008e DD 011301H
	DD	0e213H
$unwind$msg01009w DD 011801H
	DD	0e218H
$unwind$commadpt_init_handler DD 032819H
	DD	03e0116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	01e8H
$unwind$commadpt_query_device DD 022d19H
	DD	035011bH
	DD	imagerel __GSHandlerCheck
	DD	0190H
$unwind$commadpt_close_device DD 010901H
	DD	0c209H
$unwind$commadpt_execute_ccw DD 041c01H
	DD	019011cH
	DD	060147015H
$unwind$hdl_check_depends_ep DD 010901H
	DD	06209H
$unwind$hdl_define_devtypes_ep DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s_l DD 011801H
	DD	0a218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
defdev$ = 48
hdl_define_devtypes_ep PROC

; 3773 : HDL_DEVICE_SECTION;

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3774 : {
; 3775 :     HDL_DEVICE(2703, comadpt_device_hndinfo );

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:comadpt_device_hndinfo
  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160831
  00017	ff 54 24 30	 call	 QWORD PTR defdev$[rsp]

; 3776 : }
; 3777 : END_DEVICE_SECTION

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
hdl_define_devtypes_ep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
depchk_rc$ = 32
depchk$ = 64
hdl_check_depends_ep PROC

; 3754 : HDL_DEPENDENCY_SECTION;

$LN15:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 0
$LN4@hdl_check_:

; 3755 : {
; 3756 :      HDL_DEPENDENCY(HERCULES);

  00011	41 b8 08 00 00
	00		 mov	 r8d, 8
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160819
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160820
  00025	ff 54 24 40	 call	 QWORD PTR depchk$[rsp]
  00029	85 c0		 test	 eax, eax
  0002b	74 08		 je	 SHORT $LN11@hdl_check_
  0002d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 1
$LN11@hdl_check_:
  00035	33 c0		 xor	 eax, eax
  00037	85 c0		 test	 eax, eax
  00039	75 d6		 jne	 SHORT $LN4@hdl_check_
$LN7@hdl_check_:

; 3757 :      HDL_DEPENDENCY(DEVBLK);

  0003b	41 b8 a0 1b 00
	00		 mov	 r8d, 7072		; 00001ba0H
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160822
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160823
  0004f	ff 54 24 40	 call	 QWORD PTR depchk$[rsp]
  00053	85 c0		 test	 eax, eax
  00055	74 08		 je	 SHORT $LN12@hdl_check_
  00057	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 1
$LN12@hdl_check_:
  0005f	33 c0		 xor	 eax, eax
  00061	85 c0		 test	 eax, eax
  00063	75 d6		 jne	 SHORT $LN7@hdl_check_
$LN10@hdl_check_:

; 3758 :      HDL_DEPENDENCY(SYSBLK);

  00065	41 b8 00 76 01
	00		 mov	 r8d, 95744		; 00017600H
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160825
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160826
  00079	ff 54 24 40	 call	 QWORD PTR depchk$[rsp]
  0007d	85 c0		 test	 eax, eax
  0007f	74 08		 je	 SHORT $LN13@hdl_check_
  00081	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 1
$LN13@hdl_check_:
  00089	33 c0		 xor	 eax, eax
  0008b	85 c0		 test	 eax, eax
  0008d	75 d6		 jne	 SHORT $LN10@hdl_check_

; 3759 : }
; 3760 : END_DEPENDENCY_SECTION

  0008f	8b 44 24 20	 mov	 eax, DWORD PTR depchk_rc$[rsp]
  00093	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00097	c3		 ret	 0
hdl_check_depends_ep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
b$ = 80
num$ = 84
gotdle$ = 88
turnxpar$ = 89
setux$ = 90
b1$ = 91
b2$ = 92
i$ = 96
j$ = 100
tv842 = 104
tv960 = 108
tv138 = 112
tv681 = 116
tv77 = 120
tv83 = 124
tv142 = 128
tv145 = 132
tv158 = 136
tv162 = 140
tv315 = 144
tv321 = 148
tv339 = 152
tv412 = 156
tv807 = 160
tv1031 = 164
tv72 = 168
tv310 = 176
tv439 = 184
dev$ = 224
code$ = 232
flags$ = 240
chained$ = 248
count$ = 256
prevcode$ = 264
ccwseq$ = 272
iobuf$ = 280
more$ = 288
unitstat$ = 296
residual$ = 304
commadpt_execute_ccw PROC

; 2758 : {

  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
$LN4@commadpt_e:

; 2759 : U32 num;                        /* Work : Actual CCW transfer count                   */
; 2760 : BYTE    b;                      /* Input processing work variable : Current character */
; 2761 : BYTE    setux;                  /* EOT kludge */
; 2762 : BYTE    turnxpar;               /* Write contains turn to transparent mode */
; 2763 : int     i;                      /* work */
; 2764 : u_int   j;                      /* work */
; 2765 : BYTE    gotdle;                 /* Write routine DLE marker */
; 2766 : BYTE    b1, b2;                 /* 2741 overstrike rewriting */
; 2767 :     UNREFERENCED(flags);

  0001c	33 c0		 xor	 eax, eax
  0001e	85 c0		 test	 eax, eax
  00020	75 fa		 jne	 SHORT $LN4@commadpt_e
$LN7@commadpt_e:

; 2768 :     UNREFERENCED(chained);

  00022	33 c0		 xor	 eax, eax
  00024	85 c0		 test	 eax, eax
  00026	75 fa		 jne	 SHORT $LN7@commadpt_e
$LN10@commadpt_e:

; 2769 :     UNREFERENCED(prevcode);

  00028	33 c0		 xor	 eax, eax
  0002a	85 c0		 test	 eax, eax
  0002c	75 fa		 jne	 SHORT $LN10@commadpt_e
$LN13@commadpt_e:

; 2770 :     UNREFERENCED(ccwseq);

  0002e	33 c0		 xor	 eax, eax
  00030	85 c0		 test	 eax, eax
  00032	75 fa		 jne	 SHORT $LN13@commadpt_e

; 2771 : 
; 2772 :     *residual = 0;

  00034	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  0003c	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 2773 :     /*
; 2774 :      * Obtain the COMMADPT lock
; 2775 :      */
; 2776 :     if(dev->ccwtrace)

  00042	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0004a	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00050	c1 e8 0f	 shr	 eax, 15
  00053	83 e0 01	 and	 eax, 1
  00056	85 c0		 test	 eax, eax
  00058	0f 84 bd 00 00
	00		 je	 $LN34@commadpt_e

; 2777 :     {
; 2778 :         WRMSG(HHC01063,"D",LCSS_DEVNUM,code);

  0005e	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00067	74 12		 je	 SHORT $LN192@commadpt_e
  00069	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00071	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00075	89 44 24 78	 mov	 DWORD PTR tv77[rsp], eax
  00079	eb 08		 jmp	 SHORT $LN193@commadpt_e
$LN192@commadpt_e:
  0007b	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN193@commadpt_e:
  00083	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0008c	74 14		 je	 SHORT $LN194@commadpt_e
  0008e	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00096	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0009a	d1 f8		 sar	 eax, 1
  0009c	89 44 24 7c	 mov	 DWORD PTR tv83[rsp], eax
  000a0	eb 08		 jmp	 SHORT $LN195@commadpt_e
$LN194@commadpt_e:
  000a2	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv83[rsp], 0
$LN195@commadpt_e:
  000aa	0f b6 84 24 e8
	00 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  000b2	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv72[rsp], eax
  000b9	b9 01 00 00 00	 mov	 ecx, 1
  000be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000c4	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv72[rsp]
  000cb	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  000cf	8b 4c 24 78	 mov	 ecx, DWORD PTR tv77[rsp]
  000d3	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000d7	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv83[rsp]
  000db	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160611
  000e6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160612
  000f2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000fc	41 b9 03 00 00
	00		 mov	 r9d, 3
  00102	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160613
  00109	ba da 0a 00 00	 mov	 edx, 2778		; 00000adaH
  0010e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160614
  00115	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN34@commadpt_e:

; 2779 :     }
; 2780 :     obtain_lock(&dev->commadpt->lock);

  0011b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00123	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0012a	48 83 c0 68	 add	 rax, 104		; 00000068H
  0012e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160615
  00135	48 8b c8	 mov	 rcx, rax
  00138	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 2781 :     if(code != 0x06) /* for any command other than PREPARE */

  0013e	0f b6 84 24 e8
	00 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  00146	83 f8 06	 cmp	 eax, 6
  00149	74 2e		 je	 SHORT $LN35@commadpt_e

; 2782 :     {
; 2783 :         dev->commadpt->haltprepare = 0;

  0014b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00153	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0015a	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00160	0f ba f0 1a	 btr	 eax, 26
  00164	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0016c	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00173	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax
$LN35@commadpt_e:

; 2784 :     }
; 2785 :     switch (code)

  00179	0f b6 84 24 e8
	00 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  00181	89 44 24 70	 mov	 DWORD PTR tv138[rsp], eax
  00185	8b 44 24 70	 mov	 eax, DWORD PTR tv138[rsp]
  00189	ff c8		 dec	 eax
  0018b	89 44 24 70	 mov	 DWORD PTR tv138[rsp], eax
  0018f	81 7c 24 70 e3
	00 00 00	 cmp	 DWORD PTR tv138[rsp], 227 ; 000000e3H
  00197	0f 87 ea 2c 00
	00		 ja	 $LN188@commadpt_e
  0019d	48 63 44 24 70	 movsxd	 rax, DWORD PTR tv138[rsp]
  001a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  001a9	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN221@commadpt_e[rcx+rax]
  001b1	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN222@commadpt_e[rcx+rax*4]
  001b8	48 03 c1	 add	 rax, rcx
  001bb	ff e0		 jmp	 rax
$LN36@commadpt_e:

; 2786 :     {
; 2787 :         /*---------------------------------------------------------------*/
; 2788 :         /* CONTROL NO-OP                                                 */
; 2789 :         /*---------------------------------------------------------------*/
; 2790 :         case 0x03:
; 2791 :             *residual=0;

  001bd	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  001c5	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 2792 :             *unitstat=CSW_CE|CSW_DE;

  001cb	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  001d3	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 2793 :             break;

  001d6	e9 d0 2c 00 00	 jmp	 $LN14@commadpt_e
$LN37@commadpt_e:

; 2794 : 
; 2795 :         /*---------------------------------------------------------------*/
; 2796 :         /* BASIC SENSE                                                   */
; 2797 :         /*---------------------------------------------------------------*/
; 2798 :         case 0x04:
; 2799 :             num=count<dev->numsense?count:dev->numsense;

  001db	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001e3	8b 80 60 03 00
	00		 mov	 eax, DWORD PTR [rax+864]
  001e9	39 84 24 00 01
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  001f0	73 10		 jae	 SHORT $LN196@commadpt_e
  001f2	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  001f9	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv142[rsp], eax
  00200	eb 15		 jmp	 SHORT $LN197@commadpt_e
$LN196@commadpt_e:
  00202	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0020a	8b 80 60 03 00
	00		 mov	 eax, DWORD PTR [rax+864]
  00210	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv142[rsp], eax
$LN197@commadpt_e:
  00217	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR tv142[rsp]
  0021e	89 44 24 54	 mov	 DWORD PTR num$[rsp], eax

; 2800 :             *more=count<dev->numsense?1:0;

  00222	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0022a	8b 80 60 03 00
	00		 mov	 eax, DWORD PTR [rax+864]
  00230	39 84 24 00 01
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  00237	73 0d		 jae	 SHORT $LN198@commadpt_e
  00239	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv145[rsp], 1
  00244	eb 0b		 jmp	 SHORT $LN199@commadpt_e
$LN198@commadpt_e:
  00246	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv145[rsp], 0
$LN199@commadpt_e:
  00251	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR more$[rsp]
  00259	0f b6 8c 24 84
	00 00 00	 movzx	 ecx, BYTE PTR tv145[rsp]
  00261	88 08		 mov	 BYTE PTR [rax], cl

; 2801 :             memcpy(iobuf,dev->sense,num);

  00263	8b 44 24 54	 mov	 eax, DWORD PTR num$[rsp]
  00267	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0026f	48 81 c1 64 03
	00 00		 add	 rcx, 868		; 00000364H
  00276	48 8b bc 24 18
	01 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  0027e	48 8b f1	 mov	 rsi, rcx
  00281	8b c8		 mov	 ecx, eax
  00283	f3 a4		 rep movsb

; 2802 :             *residual=count-num;

  00285	8b 44 24 54	 mov	 eax, DWORD PTR num$[rsp]
  00289	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  00290	2b c8		 sub	 ecx, eax
  00292	8b c1		 mov	 eax, ecx
  00294	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  0029c	89 01		 mov	 DWORD PTR [rcx], eax

; 2803 :             *unitstat=CSW_CE|CSW_DE;

  0029e	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  002a6	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 2804 :             break;

  002a9	e9 fd 2b 00 00	 jmp	 $LN14@commadpt_e
$LN38@commadpt_e:

; 2805 : 
; 2806 :         /*---------------------------------------------------------------*/
; 2807 :         /* SENSE ID                                                      */
; 2808 :         /*---------------------------------------------------------------*/
; 2809 :         case 0xE4:
; 2810 :             /* Calculate residual byte count */
; 2811 :             num = (count < dev->numdevid) ? count : dev->numdevid;

  002ae	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002b6	8b 80 64 04 00
	00		 mov	 eax, DWORD PTR [rax+1124]
  002bc	39 84 24 00 01
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  002c3	73 10		 jae	 SHORT $LN200@commadpt_e
  002c5	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  002cc	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv158[rsp], eax
  002d3	eb 15		 jmp	 SHORT $LN201@commadpt_e
$LN200@commadpt_e:
  002d5	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002dd	8b 80 64 04 00
	00		 mov	 eax, DWORD PTR [rax+1124]
  002e3	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv158[rsp], eax
$LN201@commadpt_e:
  002ea	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv158[rsp]
  002f1	89 44 24 54	 mov	 DWORD PTR num$[rsp], eax

; 2812 :             *residual = count - num;

  002f5	8b 44 24 54	 mov	 eax, DWORD PTR num$[rsp]
  002f9	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  00300	2b c8		 sub	 ecx, eax
  00302	8b c1		 mov	 eax, ecx
  00304	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  0030c	89 01		 mov	 DWORD PTR [rcx], eax

; 2813 :             *more = count < dev->numdevid ? 1 : 0;

  0030e	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00316	8b 80 64 04 00
	00		 mov	 eax, DWORD PTR [rax+1124]
  0031c	39 84 24 00 01
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  00323	73 0d		 jae	 SHORT $LN202@commadpt_e
  00325	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv162[rsp], 1
  00330	eb 0b		 jmp	 SHORT $LN203@commadpt_e
$LN202@commadpt_e:
  00332	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv162[rsp], 0
$LN203@commadpt_e:
  0033d	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR more$[rsp]
  00345	0f b6 8c 24 8c
	00 00 00	 movzx	 ecx, BYTE PTR tv162[rsp]
  0034d	88 08		 mov	 BYTE PTR [rax], cl

; 2814 : 
; 2815 :             /* Copy device identifier bytes to channel I/O Buffer */
; 2816 :             memcpy (iobuf, dev->devid, num);

  0034f	8b 44 24 54	 mov	 eax, DWORD PTR num$[rsp]
  00353	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0035b	48 81 c1 68 04
	00 00		 add	 rcx, 1128		; 00000468H
  00362	48 8b bc 24 18
	01 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  0036a	48 8b f1	 mov	 rsi, rcx
  0036d	8b c8		 mov	 ecx, eax
  0036f	f3 a4		 rep movsb

; 2817 : 
; 2818 :             /* Return unit status */
; 2819 :             *unitstat = CSW_CE | CSW_DE;

  00371	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00379	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 2820 :             break;

  0037c	e9 2a 2b 00 00	 jmp	 $LN14@commadpt_e
$LN39@commadpt_e:

; 2821 : 
; 2822 :         /*---------------------------------------------------------------*/
; 2823 :         /* ENABLE                                                        */
; 2824 :         /*---------------------------------------------------------------*/
; 2825 :         case 0x27:
; 2826 :             if(dev->commadpt->dialin+dev->commadpt->dialout*2==2)

  00381	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00389	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00390	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00396	c1 e8 03	 shr	 eax, 3
  00399	83 e0 01	 and	 eax, 1
  0039c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003a4	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  003ab	8b 89 68 01 00
	00		 mov	 ecx, DWORD PTR [rcx+360]
  003b1	c1 e9 04	 shr	 ecx, 4
  003b4	83 e1 01	 and	 ecx, 1
  003b7	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  003ba	83 f8 02	 cmp	 eax, 2
  003bd	75 42		 jne	 SHORT $LN40@commadpt_e

; 2827 :             {
; 2828 :                 /* Enable makes no sense on a dial out only line */
; 2829 :                 *unitstat=CSW_CE|CSW_DE|CSW_UC;

  003bf	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  003c7	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 2830 :                 dev->sense[0]=SENSE_IR;

  003ca	b8 01 00 00 00	 mov	 eax, 1
  003cf	48 6b c0 00	 imul	 rax, rax, 0
  003d3	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003db	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 2831 :                 dev->sense[1]=0x2E; /* Simulate Failed Call In */

  003e3	b8 01 00 00 00	 mov	 eax, 1
  003e8	48 6b c0 01	 imul	 rax, rax, 1
  003ec	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003f4	c6 84 01 64 03
	00 00 2e	 mov	 BYTE PTR [rcx+rax+868], 46 ; 0000002eH

; 2832 :                 break;

  003fc	e9 aa 2a 00 00	 jmp	 $LN14@commadpt_e
$LN40@commadpt_e:

; 2833 :             }
; 2834 :             if(dev->commadpt->connect)

  00401	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00409	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00410	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00416	d1 e8		 shr	 eax, 1
  00418	83 e0 01	 and	 eax, 1
  0041b	85 c0		 test	 eax, eax
  0041d	74 3d		 je	 SHORT $LN41@commadpt_e

; 2835 :             {
; 2836 :                 /* Already connected */
; 2837 :                 dev->commadpt->enabled=1;

  0041f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00427	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0042e	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00434	83 c8 01	 or	 eax, 1
  00437	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0043f	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00446	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2838 :                 *unitstat=CSW_CE|CSW_DE;

  0044c	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00454	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 2839 :                 break;

  00457	e9 4f 2a 00 00	 jmp	 $LN14@commadpt_e
$LN41@commadpt_e:

; 2840 :             }
; 2841 :             dev->commadpt->curpending=COMMADPT_PEND_ENABLE;

  0045c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00464	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0046b	c6 40 3c 03	 mov	 BYTE PTR [rax+60], 3

; 2842 :             commadpt_wakeup(dev->commadpt,0);

  0046f	33 d2		 xor	 edx, edx
  00471	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00479	48 8b 88 68 11
	00 00		 mov	 rcx, QWORD PTR [rax+4456]
  00480	e8 00 00 00 00	 call	 commadpt_wakeup

; 2843 :             commadpt_wait(dev);

  00485	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0048d	e8 00 00 00 00	 call	 commadpt_wait

; 2844 :             /* Is the device still there? If not, for example when
; 2845 :                Hercules is shutting down, continuing here will cause a segfault */
; 2846 :             if (!dev) break;

  00492	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0049b	75 05		 jne	 SHORT $LN42@commadpt_e
  0049d	e9 09 2a 00 00	 jmp	 $LN14@commadpt_e
$LN42@commadpt_e:

; 2847 :             if (!dev->commadpt) break;

  004a2	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004aa	48 83 b8 68 11
	00 00 00	 cmp	 QWORD PTR [rax+4456], 0
  004b2	75 05		 jne	 SHORT $LN43@commadpt_e
  004b4	e9 f2 29 00 00	 jmp	 $LN14@commadpt_e
$LN43@commadpt_e:

; 2848 :             /* If the line is not connected now, then ENABLE failed */
; 2849 :             if(dev->commadpt->connect)

  004b9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004c1	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  004c8	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  004ce	d1 e8		 shr	 eax, 1
  004d0	83 e0 01	 and	 eax, 1
  004d3	85 c0		 test	 eax, eax
  004d5	74 58		 je	 SHORT $LN44@commadpt_e

; 2850 :             {
; 2851 :                 *unitstat=CSW_CE|CSW_DE;

  004d7	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  004df	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 2852 :                 dev->commadpt->enabled=1;

  004e2	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004ea	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  004f1	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  004f7	83 c8 01	 or	 eax, 1
  004fa	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00502	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00509	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2853 :                 /* Clean the input buffer */
; 2854 :                 commadpt_ring_flush(&dev->commadpt->inbfr);

  0050f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00517	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0051e	48 83 c0 78	 add	 rax, 120		; 00000078H
  00522	48 8b c8	 mov	 rcx, rax
  00525	e8 00 00 00 00	 call	 commadpt_ring_flush

; 2855 :                 break;

  0052a	e9 7c 29 00 00	 jmp	 $LN14@commadpt_e
$LN44@commadpt_e:

; 2856 :             }
; 2857 :             if(dev->commadpt->haltpending)

  0052f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00537	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0053e	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00544	c1 e8 08	 shr	 eax, 8
  00547	83 e0 01	 and	 eax, 1
  0054a	85 c0		 test	 eax, eax
  0054c	74 3e		 je	 SHORT $LN45@commadpt_e

; 2858 :             {
; 2859 :                 *unitstat=CSW_CE|CSW_DE|CSW_UX;

  0054e	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00556	c6 00 0d	 mov	 BYTE PTR [rax], 13

; 2860 :                 dev->commadpt->haltpending=0;

  00559	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00561	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00568	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0056e	0f ba f0 08	 btr	 eax, 8
  00572	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0057a	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00581	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2861 :                 break;

  00587	e9 1f 29 00 00	 jmp	 $LN14@commadpt_e
$LN45@commadpt_e:

; 2862 :             }
; 2863 :             if(dev->commadpt->dialin)

  0058c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00594	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0059b	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  005a1	c1 e8 03	 shr	 eax, 3
  005a4	83 e0 01	 and	 eax, 1
  005a7	85 c0		 test	 eax, eax
  005a9	74 3f		 je	 SHORT $LN46@commadpt_e

; 2864 :             {
; 2865 :                 *unitstat=CSW_CE|CSW_DE|CSW_UC;

  005ab	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  005b3	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 2866 :                 dev->sense[0]=SENSE_IR;

  005b6	b8 01 00 00 00	 mov	 eax, 1
  005bb	48 6b c0 00	 imul	 rax, rax, 0
  005bf	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  005c7	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 2867 :                 dev->sense[1]=0x2e;

  005cf	b8 01 00 00 00	 mov	 eax, 1
  005d4	48 6b c0 01	 imul	 rax, rax, 1
  005d8	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  005e0	c6 84 01 64 03
	00 00 2e	 mov	 BYTE PTR [rcx+rax+868], 46 ; 0000002eH

; 2868 :             }

  005e8	eb 3d		 jmp	 SHORT $LN47@commadpt_e
$LN46@commadpt_e:

; 2869 :             else
; 2870 :             {
; 2871 :                 *unitstat=CSW_CE|CSW_DE|CSW_UC;

  005ea	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  005f2	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 2872 :                 dev->sense[0]=SENSE_IR;

  005f5	b8 01 00 00 00	 mov	 eax, 1
  005fa	48 6b c0 00	 imul	 rax, rax, 0
  005fe	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00606	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 2873 :                 dev->sense[1]=0x21;

  0060e	b8 01 00 00 00	 mov	 eax, 1
  00613	48 6b c0 01	 imul	 rax, rax, 1
  00617	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0061f	c6 84 01 64 03
	00 00 21	 mov	 BYTE PTR [rcx+rax+868], 33 ; 00000021H
$LN47@commadpt_e:

; 2874 :             }
; 2875 :             break;

  00627	e9 7f 28 00 00	 jmp	 $LN14@commadpt_e
$LN48@commadpt_e:

; 2876 : 
; 2877 :         /*---------------------------------------------------------------*/
; 2878 :         /* DISABLE                                                       */
; 2879 :         /*---------------------------------------------------------------*/
; 2880 :         case 0x2F:
; 2881 :             /* Reset some flags */
; 2882 :             dev->commadpt->xparwwait=0;

  0062c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00634	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0063b	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00641	0f ba f0 09	 btr	 eax, 9
  00645	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0064d	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00654	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2883 :             commadpt_ring_flush(&dev->commadpt->inbfr);      /* Flush buffers */

  0065a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00662	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00669	48 83 c0 78	 add	 rax, 120		; 00000078H
  0066d	48 8b c8	 mov	 rcx, rax
  00670	e8 00 00 00 00	 call	 commadpt_ring_flush

; 2884 :             commadpt_ring_flush(&dev->commadpt->outbfr);      /* Flush buffers */

  00675	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0067d	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00684	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0068a	48 8b c8	 mov	 rcx, rax
  0068d	e8 00 00 00 00	 call	 commadpt_ring_flush

; 2885 :             commadpt_ring_flush(&dev->commadpt->ttybuf);      /* Flush buffers */

  00692	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0069a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  006a1	48 05 18 01 00
	00		 add	 rax, 280		; 00000118H
  006a7	48 8b c8	 mov	 rcx, rax
  006aa	e8 00 00 00 00	 call	 commadpt_ring_flush

; 2886 : 
; 2887 :             if((!dev->commadpt->dialin && !dev->commadpt->dialout) || !dev->commadpt->connect)

  006af	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  006b7	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  006be	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  006c4	c1 e8 03	 shr	 eax, 3
  006c7	83 e0 01	 and	 eax, 1
  006ca	85 c0		 test	 eax, eax
  006cc	75 1f		 jne	 SHORT $LN51@commadpt_e
  006ce	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  006d6	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  006dd	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  006e3	c1 e8 04	 shr	 eax, 4
  006e6	83 e0 01	 and	 eax, 1
  006e9	85 c0		 test	 eax, eax
  006eb	74 1e		 je	 SHORT $LN50@commadpt_e
$LN51@commadpt_e:
  006ed	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  006f5	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  006fc	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00702	d1 e8		 shr	 eax, 1
  00704	83 e0 01	 and	 eax, 1
  00707	85 c0		 test	 eax, eax
  00709	75 3d		 jne	 SHORT $LN49@commadpt_e
$LN50@commadpt_e:

; 2888 :             {
; 2889 :                 *unitstat=CSW_CE|CSW_DE;

  0070b	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00713	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 2890 :                 dev->commadpt->enabled=0;

  00716	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0071e	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00725	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0072b	83 e0 fe	 and	 eax, -2			; fffffffeH
  0072e	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00736	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  0073d	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2891 :                 break;

  00743	e9 63 27 00 00	 jmp	 $LN14@commadpt_e
$LN49@commadpt_e:

; 2892 :             }
; 2893 :             dev->commadpt->curpending=COMMADPT_PEND_DISABLE;

  00748	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00750	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00757	c6 40 3c 05	 mov	 BYTE PTR [rax+60], 5

; 2894 :             commadpt_wakeup(dev->commadpt,0);

  0075b	33 d2		 xor	 edx, edx
  0075d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00765	48 8b 88 68 11
	00 00		 mov	 rcx, QWORD PTR [rax+4456]
  0076c	e8 00 00 00 00	 call	 commadpt_wakeup

; 2895 :             commadpt_wait(dev);

  00771	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00779	e8 00 00 00 00	 call	 commadpt_wait

; 2896 :             dev->commadpt->enabled=0;

  0077e	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00786	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0078d	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00793	83 e0 fe	 and	 eax, -2			; fffffffeH
  00796	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0079e	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  007a5	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2897 :             *unitstat=CSW_CE|CSW_DE;

  007ab	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  007b3	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 2898 :             break;

  007b6	e9 f0 26 00 00	 jmp	 $LN14@commadpt_e
$LN52@commadpt_e:

; 2899 :         /*---------------------------------------------------------------*/
; 2900 :         /* SET MODE                                                      */
; 2901 :         /*---------------------------------------------------------------*/
; 2902 :         case 0x23:
; 2903 :             /* Transparent Write Wait State test */
; 2904 :             if(dev->commadpt->xparwwait)

  007bb	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  007c3	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  007ca	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  007d0	c1 e8 09	 shr	 eax, 9
  007d3	83 e0 01	 and	 eax, 1
  007d6	85 c0		 test	 eax, eax
  007d8	74 29		 je	 SHORT $LN53@commadpt_e

; 2905 :             {
; 2906 :                 *unitstat=CSW_CE|CSW_DE|CSW_UC;

  007da	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  007e2	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 2907 :                 dev->sense[0]=SENSE_CR;

  007e5	b8 01 00 00 00	 mov	 eax, 1
  007ea	48 6b c0 00	 imul	 rax, rax, 0
  007ee	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  007f6	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 2908 :                 return;

  007fe	e9 e8 26 00 00	 jmp	 $LN1@commadpt_e
$LN53@commadpt_e:

; 2909 :             }
; 2910 :             num=1;

  00803	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR num$[rsp], 1

; 2911 :             *residual=count-num;

  0080b	8b 44 24 54	 mov	 eax, DWORD PTR num$[rsp]
  0080f	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  00816	2b c8		 sub	 ecx, eax
  00818	8b c1		 mov	 eax, ecx
  0081a	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  00822	89 01		 mov	 DWORD PTR [rcx], eax

; 2912 :             *unitstat=CSW_CE|CSW_DE;

  00824	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  0082c	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 2913 :             if(dev->ccwtrace)

  0082f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00837	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0083d	c1 e8 0f	 shr	 eax, 15
  00840	83 e0 01	 and	 eax, 1
  00843	85 c0		 test	 eax, eax
  00845	0f 84 fe 00 00
	00		 je	 $LN54@commadpt_e

; 2914 :             {
; 2915 :                 WRMSG(HHC01084,"D",LCSS_DEVNUM,iobuf[0]&0x40 ? "EIB":"NO EIB");

  0084b	b8 01 00 00 00	 mov	 eax, 1
  00850	48 6b c0 00	 imul	 rax, rax, 0
  00854	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  0085c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00860	83 e0 40	 and	 eax, 64			; 00000040H
  00863	85 c0		 test	 eax, eax
  00865	74 11		 je	 SHORT $LN204@commadpt_e
  00867	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160636
  0086e	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv310[rsp], rax
  00876	eb 0f		 jmp	 SHORT $LN205@commadpt_e
$LN204@commadpt_e:
  00878	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160637
  0087f	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv310[rsp], rax
$LN205@commadpt_e:
  00887	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00890	74 15		 je	 SHORT $LN206@commadpt_e
  00892	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0089a	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0089e	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv315[rsp], eax
  008a5	eb 0b		 jmp	 SHORT $LN207@commadpt_e
$LN206@commadpt_e:
  008a7	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv315[rsp], 0
$LN207@commadpt_e:
  008b2	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  008bb	74 17		 je	 SHORT $LN208@commadpt_e
  008bd	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  008c5	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  008c9	d1 f8		 sar	 eax, 1
  008cb	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv321[rsp], eax
  008d2	eb 0b		 jmp	 SHORT $LN209@commadpt_e
$LN208@commadpt_e:
  008d4	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv321[rsp], 0
$LN209@commadpt_e:
  008df	b9 01 00 00 00	 mov	 ecx, 1
  008e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008ea	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv310[rsp]
  008f2	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  008f7	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv315[rsp]
  008fe	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00902	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv321[rsp]
  00909	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0090d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160638
  00914	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00919	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160639
  00920	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00925	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0092a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00930	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160640
  00937	ba 63 0b 00 00	 mov	 edx, 2915		; 00000b63H
  0093c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160641
  00943	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN54@commadpt_e:

; 2916 :             }
; 2917 :             dev->commadpt->eibmode=(iobuf[0]&0x40)?1:0;

  00949	b8 01 00 00 00	 mov	 eax, 1
  0094e	48 6b c0 00	 imul	 rax, rax, 0
  00952	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  0095a	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0095e	83 e0 40	 and	 eax, 64			; 00000040H
  00961	85 c0		 test	 eax, eax
  00963	74 0d		 je	 SHORT $LN210@commadpt_e
  00965	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv339[rsp], 1
  00970	eb 0b		 jmp	 SHORT $LN211@commadpt_e
$LN210@commadpt_e:
  00972	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv339[rsp], 0
$LN211@commadpt_e:
  0097d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00985	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0098c	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv339[rsp]
  00993	83 e1 01	 and	 ecx, 1
  00996	c1 e1 02	 shl	 ecx, 2
  00999	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0099f	83 e0 fb	 and	 eax, -5			; fffffffbH
  009a2	0b c1		 or	 eax, ecx
  009a4	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  009ac	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  009b3	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2918 :             break;

  009b9	e9 ed 24 00 00	 jmp	 $LN14@commadpt_e
$LN55@commadpt_e:

; 2919 :         /*---------------------------------------------------------------*/
; 2920 :         /* POLL Command                                                  */
; 2921 :         /*---------------------------------------------------------------*/
; 2922 :         case 0x09:
; 2923 :             /* Transparent Write Wait State test */
; 2924 :             if(dev->commadpt->xparwwait)

  009be	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  009c6	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  009cd	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  009d3	c1 e8 09	 shr	 eax, 9
  009d6	83 e0 01	 and	 eax, 1
  009d9	85 c0		 test	 eax, eax
  009db	74 29		 je	 SHORT $LN56@commadpt_e

; 2925 :             {
; 2926 :                 *unitstat=CSW_CE|CSW_DE|CSW_UC;

  009dd	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  009e5	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 2927 :                 dev->sense[0]=SENSE_CR;

  009e8	b8 01 00 00 00	 mov	 eax, 1
  009ed	48 6b c0 00	 imul	 rax, rax, 0
  009f1	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  009f9	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 2928 :                 return;

  00a01	e9 e5 24 00 00	 jmp	 $LN1@commadpt_e
$LN56@commadpt_e:

; 2929 :             }
; 2930 :             /* Save POLL data */
; 2931 :             commadpt_ring_flush(&dev->commadpt->pollbfr);

  00a06	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a0e	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00a15	48 05 c8 00 00
	00		 add	 rax, 200		; 000000c8H
  00a1b	48 8b c8	 mov	 rcx, rax
  00a1e	e8 00 00 00 00	 call	 commadpt_ring_flush

; 2932 :             commadpt_ring_pushbfr(&dev->commadpt->pollbfr,iobuf,count);

  00a23	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  00a2a	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00a32	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00a39	48 81 c1 c8 00
	00 00		 add	 rcx, 200		; 000000c8H
  00a40	44 8b c0	 mov	 r8d, eax
  00a43	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR iobuf$[rsp]
  00a4b	e8 00 00 00 00	 call	 commadpt_ring_pushbfr

; 2933 :             /* Set some utility variables */
; 2934 :             dev->commadpt->pollused=0;

  00a50	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a58	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00a5f	33 c9		 xor	 ecx, ecx
  00a61	66 89 88 66 01
	00 00		 mov	 WORD PTR [rax+358], cx

; 2935 :             dev->commadpt->badpoll=0;

  00a68	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a70	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00a77	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00a7d	0f ba f0 0f	 btr	 eax, 15
  00a81	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00a89	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00a90	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2936 :             /* Tell thread */
; 2937 :             dev->commadpt->curpending=COMMADPT_PEND_POLL;

  00a96	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a9e	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00aa5	c6 40 3c 07	 mov	 BYTE PTR [rax+60], 7

; 2938 :             commadpt_wakeup(dev->commadpt,0);

  00aa9	33 d2		 xor	 edx, edx
  00aab	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ab3	48 8b 88 68 11
	00 00		 mov	 rcx, QWORD PTR [rax+4456]
  00aba	e8 00 00 00 00	 call	 commadpt_wakeup

; 2939 :             commadpt_wait(dev);

  00abf	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00ac7	e8 00 00 00 00	 call	 commadpt_wait

; 2940 :             /* Flush the output & poll rings */
; 2941 :             commadpt_ring_flush(&dev->commadpt->outbfr);

  00acc	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ad4	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00adb	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00ae1	48 8b c8	 mov	 rcx, rax
  00ae4	e8 00 00 00 00	 call	 commadpt_ring_flush

; 2942 :             commadpt_ring_flush(&dev->commadpt->pollbfr);

  00ae9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00af1	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00af8	48 05 c8 00 00
	00		 add	 rax, 200		; 000000c8H
  00afe	48 8b c8	 mov	 rcx, rax
  00b01	e8 00 00 00 00	 call	 commadpt_ring_flush

; 2943 :             /* Check for HALT */
; 2944 :             if(dev->commadpt->haltpending)

  00b06	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b0e	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00b15	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00b1b	c1 e8 08	 shr	 eax, 8
  00b1e	83 e0 01	 and	 eax, 1
  00b21	85 c0		 test	 eax, eax
  00b23	74 3e		 je	 SHORT $LN57@commadpt_e

; 2945 :             {
; 2946 :                 *unitstat=CSW_CE|CSW_DE|CSW_UX;

  00b25	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00b2d	c6 00 0d	 mov	 BYTE PTR [rax], 13

; 2947 :                 dev->commadpt->haltpending=0;

  00b30	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b38	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00b3f	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00b45	0f ba f0 08	 btr	 eax, 8
  00b49	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00b51	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00b58	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2948 :                 break;

  00b5e	e9 48 23 00 00	 jmp	 $LN14@commadpt_e
$LN57@commadpt_e:

; 2949 :             }
; 2950 :             /* Check for bad poll data */
; 2951 :             if(dev->commadpt->badpoll)

  00b63	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b6b	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00b72	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00b78	c1 e8 0f	 shr	 eax, 15
  00b7b	83 e0 01	 and	 eax, 1
  00b7e	85 c0		 test	 eax, eax
  00b80	74 42		 je	 SHORT $LN58@commadpt_e

; 2952 :             {
; 2953 :                 *unitstat=CSW_CE|CSW_DE|CSW_UC;

  00b82	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00b8a	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 2954 :                 dev->sense[0]=0x08;

  00b8d	b8 01 00 00 00	 mov	 eax, 1
  00b92	48 6b c0 00	 imul	 rax, rax, 0
  00b96	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00b9e	c6 84 01 64 03
	00 00 08	 mov	 BYTE PTR [rcx+rax+868], 8

; 2955 :                 dev->sense[1]=0x84;

  00ba6	b8 01 00 00 00	 mov	 eax, 1
  00bab	48 6b c0 01	 imul	 rax, rax, 1
  00baf	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00bb7	c6 84 01 64 03
	00 00 84	 mov	 BYTE PTR [rcx+rax+868], 132 ; 00000084H

; 2956 :                 break;

  00bbf	e9 e7 22 00 00	 jmp	 $LN14@commadpt_e
$LN58@commadpt_e:

; 2957 :             }
; 2958 :             /* Determine remaining length */
; 2959 :             *residual=count-dev->commadpt->pollused;

  00bc4	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00bcc	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00bd3	0f b7 80 66 01
	00 00		 movzx	 eax, WORD PTR [rax+358]
  00bda	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  00be1	2b c8		 sub	 ecx, eax
  00be3	8b c1		 mov	 eax, ecx
  00be5	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  00bed	89 01		 mov	 DWORD PTR [rcx], eax

; 2960 :             /* Determine if SM should be set (succesfull or unsucessfull POLLs) */
; 2961 :             /* exhausting poll data when all stations reported NO data          */
; 2962 :             /* does not set Status Modifier                                     */
; 2963 :             *unitstat=CSW_CE|CSW_DE|(dev->commadpt->pollsm?CSW_SM:0);

  00bef	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00bf7	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00bfe	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00c04	c1 e8 0e	 shr	 eax, 14
  00c07	83 e0 01	 and	 eax, 1
  00c0a	85 c0		 test	 eax, eax
  00c0c	74 0d		 je	 SHORT $LN212@commadpt_e
  00c0e	c7 84 24 9c 00
	00 00 40 00 00
	00		 mov	 DWORD PTR tv412[rsp], 64 ; 00000040H
  00c19	eb 0b		 jmp	 SHORT $LN213@commadpt_e
$LN212@commadpt_e:
  00c1b	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv412[rsp], 0
$LN213@commadpt_e:
  00c26	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR tv412[rsp]
  00c2d	83 c8 0c	 or	 eax, 12
  00c30	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR unitstat$[rsp]
  00c38	88 01		 mov	 BYTE PTR [rcx], al

; 2964 :             /* NOTE : The index byte (and rest) are in the Input Ring */
; 2965 :             break;

  00c3a	e9 6c 22 00 00	 jmp	 $LN14@commadpt_e
$LN59@commadpt_e:

; 2966 : 
; 2967 :         /*---------------------------------------------------------------*/
; 2968 :         /* DIAL                                                          */
; 2969 :         /* Info on DIAL DATA :                                           */
; 2970 :         /* Dial character formats :                                      */
; 2971 :         /*                        x x x x 0 0 0 0 : 0                    */
; 2972 :         /*                            ........                           */
; 2973 :         /*                        x x x x 1 0 0 1 : 9                    */
; 2974 :         /*                        x x x x 1 1 0 0 : SEP                  */
; 2975 :         /*                        x x x x 1 1 0 1 : EON                  */
; 2976 :         /* EON is ignored                                                */
; 2977 :         /* format is : AAA/SEP/BBB/SEP/CCC/SEP/DDD/SEP/PPPP              */
; 2978 :         /*          where A,B,C,D,P are numbers from 0 to 9              */
; 2979 :         /* This perfoms an outgoing call to AAA.BBB.CCC.DDD port PPPP    */
; 2980 :         /*---------------------------------------------------------------*/
; 2981 :         case 0x29:
; 2982 :             /* The line must have dial-out capability */
; 2983 :             if(!dev->commadpt->dialout)

  00c3f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c47	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00c4e	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00c54	c1 e8 04	 shr	 eax, 4
  00c57	83 e0 01	 and	 eax, 1
  00c5a	85 c0		 test	 eax, eax
  00c5c	75 42		 jne	 SHORT $LN60@commadpt_e

; 2984 :             {
; 2985 :                 *unitstat=CSW_CE|CSW_DE|CSW_UC;

  00c5e	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00c66	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 2986 :                 dev->sense[0]=SENSE_CR;

  00c69	b8 01 00 00 00	 mov	 eax, 1
  00c6e	48 6b c0 00	 imul	 rax, rax, 0
  00c72	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00c7a	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 2987 :                 dev->sense[1]=0x04;

  00c82	b8 01 00 00 00	 mov	 eax, 1
  00c87	48 6b c0 01	 imul	 rax, rax, 1
  00c8b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00c93	c6 84 01 64 03
	00 00 04	 mov	 BYTE PTR [rcx+rax+868], 4

; 2988 :                 break;

  00c9b	e9 0b 22 00 00	 jmp	 $LN14@commadpt_e
$LN60@commadpt_e:

; 2989 :             }
; 2990 :             /* The line must be disabled */
; 2991 :             if(dev->commadpt->enabled)

  00ca0	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ca8	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00caf	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00cb5	83 e0 01	 and	 eax, 1
  00cb8	85 c0		 test	 eax, eax
  00cba	74 42		 je	 SHORT $LN61@commadpt_e

; 2992 :             {
; 2993 :                 *unitstat=CSW_CE|CSW_DE|CSW_UC;

  00cbc	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00cc4	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 2994 :                 dev->sense[0]=SENSE_CR;

  00cc7	b8 01 00 00 00	 mov	 eax, 1
  00ccc	48 6b c0 00	 imul	 rax, rax, 0
  00cd0	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00cd8	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 2995 :                 dev->sense[1]=0x05;

  00ce0	b8 01 00 00 00	 mov	 eax, 1
  00ce5	48 6b c0 01	 imul	 rax, rax, 1
  00ce9	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00cf1	c6 84 01 64 03
	00 00 05	 mov	 BYTE PTR [rcx+rax+868], 5

; 2996 :                 break;

  00cf9	e9 ad 21 00 00	 jmp	 $LN14@commadpt_e
$LN61@commadpt_e:

; 2997 :             }
; 2998 :             num=count>sizeof(dev->commadpt->dialdata) ? sizeof(dev->commadpt->dialdata) : count;

  00cfe	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  00d05	48 83 f8 20	 cmp	 rax, 32			; 00000020H
  00d09	76 0e		 jbe	 SHORT $LN214@commadpt_e
  00d0b	48 c7 84 24 b8
	00 00 00 20 00
	00 00		 mov	 QWORD PTR tv439[rsp], 32 ; 00000020H
  00d17	eb 0f		 jmp	 SHORT $LN215@commadpt_e
$LN214@commadpt_e:
  00d19	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  00d20	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv439[rsp], rax
$LN215@commadpt_e:
  00d28	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR tv439[rsp]
  00d2f	89 44 24 54	 mov	 DWORD PTR num$[rsp], eax

; 2999 :             memcpy(dev->commadpt->dialdata,iobuf,num);

  00d33	8b 44 24 54	 mov	 eax, DWORD PTR num$[rsp]
  00d37	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00d3f	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00d46	48 81 c1 42 01
	00 00		 add	 rcx, 322		; 00000142H
  00d4d	48 8b f9	 mov	 rdi, rcx
  00d50	48 8b b4 24 18
	01 00 00	 mov	 rsi, QWORD PTR iobuf$[rsp]
  00d58	8b c8		 mov	 ecx, eax
  00d5a	f3 a4		 rep movsb

; 3000 :             dev->commadpt->curpending=COMMADPT_PEND_DIAL;

  00d5c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00d64	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00d6b	c6 40 3c 04	 mov	 BYTE PTR [rax+60], 4

; 3001 :             commadpt_wakeup(dev->commadpt,0);

  00d6f	33 d2		 xor	 edx, edx
  00d71	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00d79	48 8b 88 68 11
	00 00		 mov	 rcx, QWORD PTR [rax+4456]
  00d80	e8 00 00 00 00	 call	 commadpt_wakeup

; 3002 :             commadpt_wait(dev);

  00d85	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00d8d	e8 00 00 00 00	 call	 commadpt_wait

; 3003 :             *residual=count-num;

  00d92	8b 44 24 54	 mov	 eax, DWORD PTR num$[rsp]
  00d96	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  00d9d	2b c8		 sub	 ecx, eax
  00d9f	8b c1		 mov	 eax, ecx
  00da1	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  00da9	89 01		 mov	 DWORD PTR [rcx], eax

; 3004 :             if(dev->commadpt->haltpending)

  00dab	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00db3	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00dba	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00dc0	c1 e8 08	 shr	 eax, 8
  00dc3	83 e0 01	 and	 eax, 1
  00dc6	85 c0		 test	 eax, eax
  00dc8	74 3e		 je	 SHORT $LN62@commadpt_e

; 3005 :             {
; 3006 :                 *unitstat=CSW_CE|CSW_DE|CSW_UX;

  00dca	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00dd2	c6 00 0d	 mov	 BYTE PTR [rax], 13

; 3007 :                 dev->commadpt->haltpending=0;

  00dd5	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ddd	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00de4	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00dea	0f ba f0 08	 btr	 eax, 8
  00dee	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00df6	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00dfd	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3008 :                 break;

  00e03	e9 a3 20 00 00	 jmp	 $LN14@commadpt_e
$LN62@commadpt_e:

; 3009 :             }
; 3010 :             if(!dev->commadpt->connect)

  00e08	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e10	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00e17	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00e1d	d1 e8		 shr	 eax, 1
  00e1f	83 e0 01	 and	 eax, 1
  00e22	85 c0		 test	 eax, eax
  00e24	75 53		 jne	 SHORT $LN63@commadpt_e

; 3011 :             {
; 3012 :                 *unitstat=CSW_CE|CSW_DE|CSW_UC;

  00e26	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00e2e	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3013 :                 dev->sense[0]=SENSE_IR;

  00e31	b8 01 00 00 00	 mov	 eax, 1
  00e36	48 6b c0 00	 imul	 rax, rax, 0
  00e3a	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00e42	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 3014 :                 dev->commadpt->enabled=0;

  00e4a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e52	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00e59	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00e5f	83 e0 fe	 and	 eax, -2			; fffffffeH
  00e62	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00e6a	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00e71	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3015 :             }

  00e77	eb 38		 jmp	 SHORT $LN64@commadpt_e
$LN63@commadpt_e:

; 3016 :             else
; 3017 :             {
; 3018 :                 *unitstat=CSW_CE|CSW_DE;

  00e79	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00e81	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3019 :                 dev->commadpt->enabled=1;

  00e84	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e8c	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00e93	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00e99	83 c8 01	 or	 eax, 1
  00e9c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00ea4	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00eab	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax
$LN64@commadpt_e:

; 3020 :             }
; 3021 :             break;

  00eb1	e9 f5 1f 00 00	 jmp	 $LN14@commadpt_e
$LN65@commadpt_e:
$LN66@commadpt_e:

; 3022 : 
; 3023 :         /*---------------------------------------------------------------*/
; 3024 :         /* READ                                                          */
; 3025 :         /*---------------------------------------------------------------*/
; 3026 :         case 0x02:
; 3027 :         case 0x0a:          /* also INHIBIT */
; 3028 :             setux=0;

  00eb6	c6 44 24 5a 00	 mov	 BYTE PTR setux$[rsp], 0

; 3029 :             /* Check the line is enabled */
; 3030 :             if(!dev->commadpt->enabled)

  00ebb	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ec3	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00eca	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00ed0	83 e0 01	 and	 eax, 1
  00ed3	85 c0		 test	 eax, eax
  00ed5	75 42		 jne	 SHORT $LN67@commadpt_e

; 3031 :             {
; 3032 :                 *unitstat=CSW_CE|CSW_DE|CSW_UC;

  00ed7	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00edf	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3033 :                 dev->sense[0]=SENSE_CR;

  00ee2	b8 01 00 00 00	 mov	 eax, 1
  00ee7	48 6b c0 00	 imul	 rax, rax, 0
  00eeb	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00ef3	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 3034 :                 dev->sense[1]=0x06;

  00efb	b8 01 00 00 00	 mov	 eax, 1
  00f00	48 6b c0 01	 imul	 rax, rax, 1
  00f04	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00f0c	c6 84 01 64 03
	00 00 06	 mov	 BYTE PTR [rcx+rax+868], 6

; 3035 :                 break;

  00f14	e9 92 1f 00 00	 jmp	 $LN14@commadpt_e
$LN67@commadpt_e:

; 3036 :             }
; 3037 :             /* Transparent Write Wait State test */
; 3038 :             if(dev->commadpt->xparwwait)

  00f19	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f21	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00f28	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00f2e	c1 e8 09	 shr	 eax, 9
  00f31	83 e0 01	 and	 eax, 1
  00f34	85 c0		 test	 eax, eax
  00f36	74 29		 je	 SHORT $LN68@commadpt_e

; 3039 :             {
; 3040 :                 *unitstat=CSW_CE|CSW_DE|CSW_UC;

  00f38	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00f40	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3041 :                 dev->sense[0]=SENSE_CR;

  00f43	b8 01 00 00 00	 mov	 eax, 1
  00f48	48 6b c0 00	 imul	 rax, rax, 0
  00f4c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00f54	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 3042 :                 break;

  00f5c	e9 4a 1f 00 00	 jmp	 $LN14@commadpt_e
$LN68@commadpt_e:

; 3043 :             }
; 3044 :             /* Check for any remaining data in read work buffer */
; 3045 :             /* for async, we allow all reads to wait (even if data is available now) */
; 3046 :             /* (APL\360 2741 race cond III circumvention) see APLSASUP label UNRZ19 */
; 3047 :             if(dev->commadpt->readcomp && IS_BSC_LNCTL(dev->commadpt))

  00f61	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f69	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00f70	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00f76	c1 e8 11	 shr	 eax, 17
  00f79	83 e0 01	 and	 eax, 1
  00f7c	85 c0		 test	 eax, eax
  00f7e	0f 84 bd 00 00
	00		 je	 $LN69@commadpt_e
  00f84	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f8c	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00f93	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00f97	83 f8 01	 cmp	 eax, 1
  00f9a	0f 85 a1 00 00
	00		 jne	 $LN69@commadpt_e

; 3048 :             {
; 3049 :                 if (dev->commadpt->rdwrk.havedata)

  00fa0	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00fa8	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00faf	8b 80 10 01 00
	00		 mov	 eax, DWORD PTR [rax+272]
  00fb5	83 e0 01	 and	 eax, 1
  00fb8	85 c0		 test	 eax, eax
  00fba	0f 84 81 00 00
	00		 je	 $LN70@commadpt_e

; 3050 :                 {
; 3051 :                     num=(U32)commadpt_ring_popbfr(&dev->commadpt->rdwrk,iobuf,count);

  00fc0	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  00fc7	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00fcf	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00fd6	48 81 c1 f0 00
	00 00		 add	 rcx, 240		; 000000f0H
  00fdd	44 8b c0	 mov	 r8d, eax
  00fe0	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR iobuf$[rsp]
  00fe8	e8 00 00 00 00	 call	 commadpt_ring_popbfr
  00fed	89 44 24 54	 mov	 DWORD PTR num$[rsp], eax

; 3052 :                     if(dev->commadpt->rdwrk.havedata)

  00ff1	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ff9	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01000	8b 80 10 01 00
	00		 mov	 eax, DWORD PTR [rax+272]
  01006	83 e0 01	 and	 eax, 1
  01009	85 c0		 test	 eax, eax
  0100b	74 0b		 je	 SHORT $LN71@commadpt_e

; 3053 :                     {
; 3054 :                         *more=1;

  0100d	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR more$[rsp]
  01015	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN71@commadpt_e:

; 3055 :                     }
; 3056 :                     *residual=count-num;

  01018	8b 44 24 54	 mov	 eax, DWORD PTR num$[rsp]
  0101c	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  01023	2b c8		 sub	 ecx, eax
  01025	8b c1		 mov	 eax, ecx
  01027	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  0102f	89 01		 mov	 DWORD PTR [rcx], eax

; 3057 :                     *unitstat=CSW_CE|CSW_DE;

  01031	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  01039	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3058 :                     break;

  0103c	e9 6a 1e 00 00	 jmp	 $LN14@commadpt_e
$LN70@commadpt_e:
$LN69@commadpt_e:

; 3059 :                 }
; 3060 :             }
; 3061 :             if(IS_ASYNC_LNCTL(dev->commadpt) && dev->commadpt->telnet_int)

  01041	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01049	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01050	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  01054	83 f8 02	 cmp	 eax, 2
  01057	0f 85 87 00 00
	00		 jne	 $LN72@commadpt_e
  0105d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01065	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0106c	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01072	c1 e8 15	 shr	 eax, 21
  01075	83 e0 01	 and	 eax, 1
  01078	85 c0		 test	 eax, eax
  0107a	74 68		 je	 SHORT $LN72@commadpt_e

; 3062 :             {
; 3063 :                 dev->commadpt->telnet_int = 0;

  0107c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01084	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0108b	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01091	0f ba f0 15	 btr	 eax, 21
  01095	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0109d	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  010a4	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3064 :                 *residual=count;

  010aa	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  010b2	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  010b9	89 08		 mov	 DWORD PTR [rax], ecx

; 3065 :                 *unitstat=CSW_CE|CSW_DE|CSW_UC;

  010bb	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  010c3	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3066 :                 dev->sense[0]=SENSE_IR;

  010c6	b8 01 00 00 00	 mov	 eax, 1
  010cb	48 6b c0 00	 imul	 rax, rax, 0
  010cf	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  010d7	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 3067 :                 break;

  010df	e9 c7 1d 00 00	 jmp	 $LN14@commadpt_e
$LN72@commadpt_e:

; 3068 :             }
; 3069 :             /* Catch a race condition.                                                           */
; 3070 :             /* TCAM likes to issue halt I/O as a matter of routine, and it expects to get back a */
; 3071 :             /* unit exception along with the normal channel end + device end.                    */
; 3072 :             /* Sometimes the halt I/O loses the race (with the write CCW) and we catch up here.  */
; 3073 :             if(IS_ASYNC_LNCTL(dev->commadpt) && dev->commadpt->haltpending)

  010e4	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  010ec	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  010f3	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  010f7	83 f8 02	 cmp	 eax, 2
  010fa	75 6b		 jne	 SHORT $LN73@commadpt_e
  010fc	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01104	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0110b	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01111	c1 e8 08	 shr	 eax, 8
  01114	83 e0 01	 and	 eax, 1
  01117	85 c0		 test	 eax, eax
  01119	74 4c		 je	 SHORT $LN73@commadpt_e

; 3074 :             {
; 3075 :                 dev->commadpt->haltpending = 0;

  0111b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01123	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0112a	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01130	0f ba f0 08	 btr	 eax, 8
  01134	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0113c	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01143	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3076 :                 *residual=0;

  01149	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  01151	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 3077 :                 *unitstat=CSW_CE|CSW_DE|CSW_UX;

  01157	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  0115f	c6 00 0d	 mov	 BYTE PTR [rax], 13

; 3078 :                 break;

  01162	e9 44 1d 00 00	 jmp	 $LN14@commadpt_e
$LN73@commadpt_e:

; 3079 :             }
; 3080 : 
; 3081 :             if(dev->commadpt->datalostcond)

  01167	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0116f	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01176	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0117c	c1 e8 12	 shr	 eax, 18
  0117f	83 e0 01	 and	 eax, 1
  01182	85 c0		 test	 eax, eax
  01184	74 6a		 je	 SHORT $LN74@commadpt_e

; 3082 :             {
; 3083 :                 dev->commadpt->datalostcond=0;

  01186	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0118e	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01195	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0119b	0f ba f0 12	 btr	 eax, 18
  0119f	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  011a7	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  011ae	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3084 :                 commadpt_ring_flush(&dev->commadpt->inbfr);

  011b4	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  011bc	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  011c3	48 83 c0 78	 add	 rax, 120		; 00000078H
  011c7	48 8b c8	 mov	 rcx, rax
  011ca	e8 00 00 00 00	 call	 commadpt_ring_flush

; 3085 :                 *residual=count;

  011cf	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  011d7	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  011de	89 08		 mov	 DWORD PTR [rax], ecx

; 3086 :                 *unitstat=CSW_CE|CSW_DE;

  011e0	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  011e8	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3087 :                 break;

  011eb	e9 bb 1c 00 00	 jmp	 $LN14@commadpt_e
$LN74@commadpt_e:

; 3088 :             }
; 3089 :             dev->commadpt->readcomp=0;

  011f0	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  011f8	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  011ff	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01205	0f ba f0 11	 btr	 eax, 17
  01209	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01211	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01218	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3090 :             *unitstat=0;

  0121e	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  01226	c6 00 00	 mov	 BYTE PTR [rax], 0

; 3091 :             num=0;

  01229	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR num$[rsp], 0
$LN16@commadpt_e:

; 3092 :                 /* The following is the BIG READ ROUTINE MESS */
; 3093 :                 /* the manual's indications on when to exit   */
; 3094 :                 /* a read and what to transfer to the main    */
; 3095 :                 /* storage is fuzzy (at best)                 */
; 3096 :                 /*                                            */
; 3097 :                 /* The line input can be in 3 possible        */
; 3098 :                 /* conditions :                               */
; 3099 :                 /*     Transparent Text Mode                  */
; 3100 :                 /*     Text Mode                              */
; 3101 :                 /*     none of the above (initial status)     */
; 3102 :                 /* transition from one mode to the other is   */
; 3103 :                 /* also not very well documented              */
; 3104 :                 /* so the following code is based on          */
; 3105 :                 /* empirical knowledge and some interpretation*/
; 3106 :                 /* also... the logic should probably be       */
; 3107 :                 /* rewritten                                  */
; 3108 : 
; 3109 :                 /* We will remain in READ state with the thread */
; 3110 :                 /* as long as we haven't met a read ending condition */
; 3111 :             while(1)

  01231	33 c0		 xor	 eax, eax
  01233	83 f8 01	 cmp	 eax, 1
  01236	0f 84 89 0f 00
	00		 je	 $LN17@commadpt_e

; 3112 :             {
; 3113 :                 /* READ state */
; 3114 :                 dev->commadpt->curpending=COMMADPT_PEND_READ;

  0123c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01244	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0124b	c6 40 3c 01	 mov	 BYTE PTR [rax+60], 1

; 3115 :                 /* Tell worker thread */
; 3116 :                 commadpt_wakeup(dev->commadpt,0);

  0124f	33 d2		 xor	 edx, edx
  01251	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01259	48 8b 88 68 11
	00 00		 mov	 rcx, QWORD PTR [rax+4456]
  01260	e8 00 00 00 00	 call	 commadpt_wakeup

; 3117 :                 /* Wait for some data */
; 3118 :                 commadpt_wait(dev);

  01265	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0126d	e8 00 00 00 00	 call	 commadpt_wait

; 3119 : 
; 3120 :                 /* If we are not connected, the read fails */
; 3121 :                 if(!dev->commadpt->connect)

  01272	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0127a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01281	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01287	d1 e8		 shr	 eax, 1
  01289	83 e0 01	 and	 eax, 1
  0128c	85 c0		 test	 eax, eax
  0128e	75 29		 jne	 SHORT $LN75@commadpt_e

; 3122 :                 {
; 3123 :                     *unitstat=CSW_DE|CSW_CE|CSW_UC;

  01290	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  01298	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3124 :                     dev->sense[0]=SENSE_IR;

  0129b	b8 01 00 00 00	 mov	 eax, 1
  012a0	48 6b c0 00	 imul	 rax, rax, 0
  012a4	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  012ac	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 3125 :                     break;

  012b4	e9 0c 0f 00 00	 jmp	 $LN17@commadpt_e
$LN75@commadpt_e:

; 3126 :                 }
; 3127 : 
; 3128 :                 /* If the I/O was halted - indicate Unit Check */
; 3129 :                 if(dev->commadpt->haltpending)

  012b9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  012c1	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  012c8	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  012ce	c1 e8 08	 shr	 eax, 8
  012d1	83 e0 01	 and	 eax, 1
  012d4	85 c0		 test	 eax, eax
  012d6	74 3e		 je	 SHORT $LN76@commadpt_e

; 3130 :                 {
; 3131 :                     *unitstat=CSW_CE|CSW_DE|CSW_UX;

  012d8	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  012e0	c6 00 0d	 mov	 BYTE PTR [rax], 13

; 3132 :                     dev->commadpt->haltpending=0;

  012e3	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  012eb	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  012f2	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  012f8	0f ba f0 08	 btr	 eax, 8
  012fc	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01304	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  0130b	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3133 :                     break;

  01311	e9 af 0e 00 00	 jmp	 $LN17@commadpt_e
$LN76@commadpt_e:

; 3134 :                 }
; 3135 : 
; 3136 :                 if (IS_ASYNC_LNCTL(dev->commadpt) && dev->commadpt->telnet_int)

  01316	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0131e	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01325	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  01329	83 f8 02	 cmp	 eax, 2
  0132c	0f 85 87 00 00
	00		 jne	 $LN77@commadpt_e
  01332	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0133a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01341	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01347	c1 e8 15	 shr	 eax, 21
  0134a	83 e0 01	 and	 eax, 1
  0134d	85 c0		 test	 eax, eax
  0134f	74 68		 je	 SHORT $LN77@commadpt_e

; 3137 :                 {
; 3138 :                     dev->commadpt->telnet_int = 0;

  01351	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01359	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01360	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01366	0f ba f0 15	 btr	 eax, 21
  0136a	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01372	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01379	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3139 :                     *residual=count;

  0137f	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  01387	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  0138e	89 08		 mov	 DWORD PTR [rax], ecx

; 3140 :                     *unitstat=CSW_CE|CSW_DE|CSW_UC;

  01390	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  01398	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3141 :                     dev->sense[0]=SENSE_IR;

  0139b	b8 01 00 00 00	 mov	 eax, 1
  013a0	48 6b c0 00	 imul	 rax, rax, 0
  013a4	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  013ac	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 3142 :                     break;

  013b4	e9 0c 0e 00 00	 jmp	 $LN17@commadpt_e
$LN77@commadpt_e:

; 3143 :                 }
; 3144 : 
; 3145 :                 /* If no data is present - 3 seconds have passed without */
; 3146 :                 /* receiving data (or a SYNC)                            */
; 3147 :                 /* (28 seconds for LNCTL_ASYNC)                          */
; 3148 :                 /* INHIBIT command does not time out                     */
; 3149 :                 /* eol_flag set means data is present */
; 3150 :                 if(!dev->commadpt->inbfr.havedata && code != 0x0a && !dev->commadpt->eol_flag)

  013b9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  013c1	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  013c8	8b 80 98 00 00
	00		 mov	 eax, DWORD PTR [rax+152]
  013ce	83 e0 01	 and	 eax, 1
  013d1	85 c0		 test	 eax, eax
  013d3	75 6e		 jne	 SHORT $LN78@commadpt_e
  013d5	0f b6 84 24 e8
	00 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  013dd	83 f8 0a	 cmp	 eax, 10
  013e0	74 61		 je	 SHORT $LN78@commadpt_e
  013e2	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  013ea	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  013f1	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  013f7	c1 e8 16	 shr	 eax, 22
  013fa	83 e0 01	 and	 eax, 1
  013fd	85 c0		 test	 eax, eax
  013ff	75 42		 jne	 SHORT $LN78@commadpt_e

; 3151 :                 {
; 3152 :                     *unitstat=CSW_DE|CSW_CE|CSW_UC;

  01401	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  01409	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3153 :                     dev->sense[0]=0x01;

  0140c	b8 01 00 00 00	 mov	 eax, 1
  01411	48 6b c0 00	 imul	 rax, rax, 0
  01415	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0141d	c6 84 01 64 03
	00 00 01	 mov	 BYTE PTR [rcx+rax+868], 1

; 3154 :                     dev->sense[1]=0xe3;

  01425	b8 01 00 00 00	 mov	 eax, 1
  0142a	48 6b c0 01	 imul	 rax, rax, 1
  0142e	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01436	c6 84 01 64 03
	00 00 e3	 mov	 BYTE PTR [rcx+rax+868], 227 ; 000000e3H

; 3155 :                     break;

  0143e	e9 82 0d 00 00	 jmp	 $LN17@commadpt_e
$LN78@commadpt_e:

; 3156 :                 }
; 3157 :                 if (IS_BSC_LNCTL(dev->commadpt))

  01443	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0144b	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01452	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  01456	83 f8 01	 cmp	 eax, 1
  01459	0f 85 a6 0b 00
	00		 jne	 $LN79@commadpt_e
$LN218@commadpt_e:
$LN18@commadpt_e:

; 3158 :                 {
; 3159 :                     /* Start processing data flow here */
; 3160 :                     /* Pop bytes until we run out of data or */
; 3161 :                     /* until the processing indicates the read */
; 3162 :                     /* should now terminate */
; 3163 :                     while( dev->commadpt->inbfr.havedata
; 3164 :                             && !dev->commadpt->readcomp)

  0145f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01467	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0146e	8b 80 98 00 00
	00		 mov	 eax, DWORD PTR [rax+152]
  01474	83 e0 01	 and	 eax, 1
  01477	85 c0		 test	 eax, eax
  01479	0f 84 86 0b 00
	00		 je	 $LN19@commadpt_e
  0147f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01487	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0148e	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01494	c1 e8 11	 shr	 eax, 17
  01497	83 e0 01	 and	 eax, 1
  0149a	85 c0		 test	 eax, eax
  0149c	0f 85 63 0b 00
	00		 jne	 $LN19@commadpt_e

; 3165 :                     {
; 3166 :                         /* fetch 1 byte from the input ring */
; 3167 :                         b=commadpt_ring_pop(&dev->commadpt->inbfr);

  014a2	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  014aa	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  014b1	48 83 c0 78	 add	 rax, 120		; 00000078H
  014b5	48 8b c8	 mov	 rcx, rax
  014b8	e8 00 00 00 00	 call	 commadpt_ring_pop
  014bd	88 44 24 50	 mov	 BYTE PTR b$[rsp], al

; 3168 :                         if(!dev->commadpt->gotdle)

  014c1	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  014c9	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  014d0	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  014d6	c1 e8 0d	 shr	 eax, 13
  014d9	83 e0 01	 and	 eax, 1
  014dc	85 c0		 test	 eax, eax
  014de	75 3d		 jne	 SHORT $LN80@commadpt_e

; 3169 :                         {
; 3170 :                             if(b==0x10)

  014e0	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  014e5	83 f8 10	 cmp	 eax, 16
  014e8	75 33		 jne	 SHORT $LN81@commadpt_e

; 3171 :                             {
; 3172 :                                 dev->commadpt->gotdle=1;

  014ea	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  014f2	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  014f9	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  014ff	0f ba e8 0d	 bts	 eax, 13
  01503	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0150b	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01512	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3173 :                                 continue;

  01518	e9 42 ff ff ff	 jmp	 $LN18@commadpt_e
$LN81@commadpt_e:
$LN80@commadpt_e:

; 3174 :                             }
; 3175 :                         }
; 3176 :                         if(dev->commadpt->in_textmode)

  0151d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01525	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0152c	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01532	c1 e8 0b	 shr	 eax, 11
  01535	83 e0 01	 and	 eax, 1
  01538	85 c0		 test	 eax, eax
  0153a	0f 84 02 08 00
	00		 je	 $LN82@commadpt_e

; 3177 :                         {
; 3178 :                             if(dev->commadpt->in_xparmode)

  01540	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01548	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0154f	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01555	c1 e8 0c	 shr	 eax, 12
  01558	83 e0 01	 and	 eax, 1
  0155b	85 c0		 test	 eax, eax
  0155d	0f 84 37 04 00
	00		 je	 $LN84@commadpt_e

; 3179 :                             {
; 3180 :                                 /* TRANSPARENT MODE READ */
; 3181 :                                 if(dev->commadpt->gotdle)

  01563	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0156b	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01572	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01578	c1 e8 0d	 shr	 eax, 13
  0157b	83 e0 01	 and	 eax, 1
  0157e	85 c0		 test	 eax, eax
  01580	0f 84 ed 03 00
	00		 je	 $LN86@commadpt_e

; 3182 :                                 {
; 3183 :                                     switch(b)

  01586	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  0158b	89 44 24 74	 mov	 DWORD PTR tv681[rsp], eax
  0158f	8b 44 24 74	 mov	 eax, DWORD PTR tv681[rsp]
  01593	83 e8 03	 sub	 eax, 3
  01596	89 44 24 74	 mov	 DWORD PTR tv681[rsp], eax
  0159a	83 7c 24 74 2f	 cmp	 DWORD PTR tv681[rsp], 47 ; 0000002fH
  0159f	0f 87 8b 03 00
	00		 ja	 $LN97@commadpt_e
  015a5	48 63 44 24 74	 movsxd	 rax, DWORD PTR tv681[rsp]
  015aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  015b1	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN219@commadpt_e[rcx+rax]
  015b9	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN220@commadpt_e[rcx+rax*4]
  015c0	48 03 c1	 add	 rax, rcx
  015c3	ff e0		 jmp	 rax
$LN88@commadpt_e:

; 3184 :                                     {
; 3185 :                                         case 0x10:
; 3186 :                                             commadpt_ring_push(&dev->commadpt->rdwrk,b);

  015c5	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  015cd	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  015d4	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  015da	0f b6 54 24 50	 movzx	 edx, BYTE PTR b$[rsp]
  015df	48 8b c8	 mov	 rcx, rax
  015e2	e8 00 00 00 00	 call	 commadpt_ring_push

; 3187 :                                             break;

  015e7	e9 85 03 00 00	 jmp	 $LN20@commadpt_e
$LN89@commadpt_e:

; 3188 :                                         case 0x32:
; 3189 :                                             break;

  015ec	e9 80 03 00 00	 jmp	 $LN20@commadpt_e
$LN90@commadpt_e:

; 3190 :                                         case 0x1F: /* ITB - Exit xparent, set EIB - do NOT exit read yet */
; 3191 :                                             dev->commadpt->in_xparmode=0;

  015f1	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  015f9	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01600	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01606	0f ba f0 0c	 btr	 eax, 12
  0160a	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01612	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01619	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3192 :                                             commadpt_ring_push(&dev->commadpt->rdwrk,0x10);

  0161f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01627	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0162e	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01634	b2 10		 mov	 dl, 16
  01636	48 8b c8	 mov	 rcx, rax
  01639	e8 00 00 00 00	 call	 commadpt_ring_push

; 3193 :                                             commadpt_ring_push(&dev->commadpt->rdwrk,b);

  0163e	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01646	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0164d	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01653	0f b6 54 24 50	 movzx	 edx, BYTE PTR b$[rsp]
  01658	48 8b c8	 mov	 rcx, rax
  0165b	e8 00 00 00 00	 call	 commadpt_ring_push

; 3194 :                                             if(dev->commadpt->eibmode)

  01660	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01668	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0166f	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01675	c1 e8 02	 shr	 eax, 2
  01678	83 e0 01	 and	 eax, 1
  0167b	85 c0		 test	 eax, eax
  0167d	74 1f		 je	 SHORT $LN91@commadpt_e

; 3195 :                                             {
; 3196 :                                                 commadpt_ring_push(&dev->commadpt->rdwrk,0);

  0167f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01687	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0168e	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01694	33 d2		 xor	 edx, edx
  01696	48 8b c8	 mov	 rcx, rax
  01699	e8 00 00 00 00	 call	 commadpt_ring_push
$LN91@commadpt_e:

; 3197 :                                             }
; 3198 :                                             break;

  0169e	e9 ce 02 00 00	 jmp	 $LN20@commadpt_e
$LN92@commadpt_e:

; 3199 :                                         case 0x26: /* ETB - Same as ITB but DO exit read now */
; 3200 :                                             dev->commadpt->in_xparmode=0;

  016a3	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  016ab	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  016b2	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  016b8	0f ba f0 0c	 btr	 eax, 12
  016bc	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  016c4	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  016cb	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3201 :                                             commadpt_ring_push(&dev->commadpt->rdwrk,0x10);

  016d1	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  016d9	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  016e0	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  016e6	b2 10		 mov	 dl, 16
  016e8	48 8b c8	 mov	 rcx, rax
  016eb	e8 00 00 00 00	 call	 commadpt_ring_push

; 3202 :                                             commadpt_ring_push(&dev->commadpt->rdwrk,b);

  016f0	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  016f8	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  016ff	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01705	0f b6 54 24 50	 movzx	 edx, BYTE PTR b$[rsp]
  0170a	48 8b c8	 mov	 rcx, rax
  0170d	e8 00 00 00 00	 call	 commadpt_ring_push

; 3203 :                                             if(dev->commadpt->eibmode)

  01712	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0171a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01721	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01727	c1 e8 02	 shr	 eax, 2
  0172a	83 e0 01	 and	 eax, 1
  0172d	85 c0		 test	 eax, eax
  0172f	74 1f		 je	 SHORT $LN93@commadpt_e

; 3204 :                                             {
; 3205 :                                                 commadpt_ring_push(&dev->commadpt->rdwrk,0);

  01731	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01739	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01740	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01746	33 d2		 xor	 edx, edx
  01748	48 8b c8	 mov	 rcx, rax
  0174b	e8 00 00 00 00	 call	 commadpt_ring_push
$LN93@commadpt_e:

; 3206 :                                             }
; 3207 :                                             dev->commadpt->readcomp=1;

  01750	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01758	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0175f	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01765	0f ba e8 11	 bts	 eax, 17
  01769	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01771	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01778	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3208 :                                             break;

  0177e	e9 ee 01 00 00	 jmp	 $LN20@commadpt_e
$LN94@commadpt_e:

; 3209 :                                         case 0x03: /* ETX - Same as ETB */
; 3210 :                                             dev->commadpt->in_xparmode=0;

  01783	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0178b	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01792	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01798	0f ba f0 0c	 btr	 eax, 12
  0179c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  017a4	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  017ab	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3211 :                                             commadpt_ring_push(&dev->commadpt->rdwrk,0x10);

  017b1	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  017b9	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  017c0	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  017c6	b2 10		 mov	 dl, 16
  017c8	48 8b c8	 mov	 rcx, rax
  017cb	e8 00 00 00 00	 call	 commadpt_ring_push

; 3212 :                                             commadpt_ring_push(&dev->commadpt->rdwrk,b);

  017d0	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  017d8	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  017df	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  017e5	0f b6 54 24 50	 movzx	 edx, BYTE PTR b$[rsp]
  017ea	48 8b c8	 mov	 rcx, rax
  017ed	e8 00 00 00 00	 call	 commadpt_ring_push

; 3213 :                                             if(dev->commadpt->eibmode)

  017f2	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  017fa	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01801	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01807	c1 e8 02	 shr	 eax, 2
  0180a	83 e0 01	 and	 eax, 1
  0180d	85 c0		 test	 eax, eax
  0180f	74 1f		 je	 SHORT $LN95@commadpt_e

; 3214 :                                             {
; 3215 :                                                 commadpt_ring_push(&dev->commadpt->rdwrk,0);

  01811	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01819	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01820	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01826	33 d2		 xor	 edx, edx
  01828	48 8b c8	 mov	 rcx, rax
  0182b	e8 00 00 00 00	 call	 commadpt_ring_push
$LN95@commadpt_e:

; 3216 :                                             }
; 3217 :                                             dev->commadpt->readcomp=1;

  01830	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01838	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0183f	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01845	0f ba e8 11	 bts	 eax, 17
  01849	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01851	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01858	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3218 :                                             break;

  0185e	e9 0e 01 00 00	 jmp	 $LN20@commadpt_e
$LN96@commadpt_e:

; 3219 :                                         case 0x2D: /* ENQ */
; 3220 :                                             dev->commadpt->in_xparmode=0;

  01863	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0186b	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01872	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01878	0f ba f0 0c	 btr	 eax, 12
  0187c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01884	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  0188b	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3221 :                                             dev->commadpt->in_textmode=0;

  01891	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01899	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  018a0	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  018a6	0f ba f0 0b	 btr	 eax, 11
  018aa	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  018b2	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  018b9	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3222 :                                             commadpt_ring_push(&dev->commadpt->rdwrk,0x10);

  018bf	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  018c7	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  018ce	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  018d4	b2 10		 mov	 dl, 16
  018d6	48 8b c8	 mov	 rcx, rax
  018d9	e8 00 00 00 00	 call	 commadpt_ring_push

; 3223 :                                             commadpt_ring_push(&dev->commadpt->rdwrk,b);

  018de	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  018e6	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  018ed	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  018f3	0f b6 54 24 50	 movzx	 edx, BYTE PTR b$[rsp]
  018f8	48 8b c8	 mov	 rcx, rax
  018fb	e8 00 00 00 00	 call	 commadpt_ring_push

; 3224 :                                             dev->commadpt->readcomp=1;

  01900	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01908	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0190f	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01915	0f ba e8 11	 bts	 eax, 17
  01919	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01921	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01928	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3225 :                                             break;

  0192e	eb 41		 jmp	 SHORT $LN20@commadpt_e
$LN97@commadpt_e:

; 3226 :                                         default:
; 3227 :                                             commadpt_ring_push(&dev->commadpt->rdwrk,0x10);

  01930	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01938	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0193f	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01945	b2 10		 mov	 dl, 16
  01947	48 8b c8	 mov	 rcx, rax
  0194a	e8 00 00 00 00	 call	 commadpt_ring_push

; 3228 :                                             commadpt_ring_push(&dev->commadpt->rdwrk,b);

  0194f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01957	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0195e	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01964	0f b6 54 24 50	 movzx	 edx, BYTE PTR b$[rsp]
  01969	48 8b c8	 mov	 rcx, rax
  0196c	e8 00 00 00 00	 call	 commadpt_ring_push
$LN20@commadpt_e:

; 3229 :                                             break;
; 3230 :                                     }
; 3231 :                                 }

  01971	eb 22		 jmp	 SHORT $LN87@commadpt_e
$LN86@commadpt_e:

; 3232 :                                 else
; 3233 :                                 {
; 3234 :                                     commadpt_ring_push(&dev->commadpt->rdwrk,b);

  01973	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0197b	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01982	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01988	0f b6 54 24 50	 movzx	 edx, BYTE PTR b$[rsp]
  0198d	48 8b c8	 mov	 rcx, rax
  01990	e8 00 00 00 00	 call	 commadpt_ring_push
$LN87@commadpt_e:

; 3235 :                                 }
; 3236 :                             }

  01995	e9 a3 03 00 00	 jmp	 $LN85@commadpt_e
$LN84@commadpt_e:

; 3237 :                             else
; 3238 :                             {
; 3239 :                                 if(b!=0x32)

  0199a	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  0199f	83 f8 32	 cmp	 eax, 50			; 00000032H
  019a2	0f 84 95 03 00
	00		 je	 $LN98@commadpt_e

; 3240 :                                 {
; 3241 :                                      /* TEXT MODE READ */
; 3242 :                                     if(dev->commadpt->gotdle)

  019a8	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  019b0	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  019b7	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  019bd	c1 e8 0d	 shr	 eax, 13
  019c0	83 e0 01	 and	 eax, 1
  019c3	85 c0		 test	 eax, eax
  019c5	0f 84 14 01 00
	00		 je	 $LN99@commadpt_e

; 3243 :                                     {
; 3244 :                                         switch(b)

  019cb	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  019d0	88 84 24 a0 00
	00 00		 mov	 BYTE PTR tv807[rsp], al
  019d7	80 bc 24 a0 00
	00 00 02	 cmp	 BYTE PTR tv807[rsp], 2
  019df	74 0c		 je	 SHORT $LN101@commadpt_e
  019e1	80 bc 24 a0 00
	00 00 2d	 cmp	 BYTE PTR tv807[rsp], 45	; 0000002dH
  019e9	74 32		 je	 SHORT $LN102@commadpt_e
  019eb	eb 60		 jmp	 SHORT $LN103@commadpt_e
$LN101@commadpt_e:

; 3245 :                                         {
; 3246 :                                             case 0x02: /* STX */
; 3247 :                                             dev->commadpt->in_xparmode=1;

  019ed	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  019f5	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  019fc	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01a02	0f ba e8 0c	 bts	 eax, 12
  01a06	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01a0e	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01a15	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3248 :                                             break;

  01a1b	eb 7c		 jmp	 SHORT $LN22@commadpt_e
$LN102@commadpt_e:

; 3249 :                                             case 0x2D: /* ENQ */
; 3250 :                                             dev->commadpt->readcomp=1;

  01a1d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01a25	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01a2c	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01a32	0f ba e8 11	 bts	 eax, 17
  01a36	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01a3e	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01a45	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3251 :                                             break;

  01a4b	eb 4c		 jmp	 SHORT $LN22@commadpt_e
$LN103@commadpt_e:

; 3252 :                                             default:
; 3253 :                                                 if((b&0xf0)==0x60 || (b&0xf0)==0x70)

  01a4d	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  01a52	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  01a57	83 f8 60	 cmp	 eax, 96			; 00000060H
  01a5a	74 0f		 je	 SHORT $LN105@commadpt_e
  01a5c	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  01a61	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  01a66	83 f8 70	 cmp	 eax, 112		; 00000070H
  01a69	75 2e		 jne	 SHORT $LN104@commadpt_e
$LN105@commadpt_e:

; 3254 :                                                 {
; 3255 :                                                     dev->commadpt->readcomp=1;

  01a6b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01a73	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01a7a	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01a80	0f ba e8 11	 bts	 eax, 17
  01a84	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01a8c	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01a93	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax
$LN104@commadpt_e:
$LN22@commadpt_e:

; 3256 :                                                 }
; 3257 :                                                 break;
; 3258 :                                         }
; 3259 :                                         commadpt_ring_push(&dev->commadpt->rdwrk,0x10);

  01a99	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01aa1	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01aa8	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01aae	b2 10		 mov	 dl, 16
  01ab0	48 8b c8	 mov	 rcx, rax
  01ab3	e8 00 00 00 00	 call	 commadpt_ring_push

; 3260 :                                         commadpt_ring_push(&dev->commadpt->rdwrk,b);

  01ab8	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01ac0	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01ac7	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01acd	0f b6 54 24 50	 movzx	 edx, BYTE PTR b$[rsp]
  01ad2	48 8b c8	 mov	 rcx, rax
  01ad5	e8 00 00 00 00	 call	 commadpt_ring_push

; 3261 :                                     }

  01ada	e9 5e 02 00 00	 jmp	 $LN100@commadpt_e
$LN99@commadpt_e:

; 3262 :                                     else
; 3263 :                                     {
; 3264 :                                         switch(b)

  01adf	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  01ae4	88 44 24 68	 mov	 BYTE PTR tv842[rsp], al
  01ae8	80 7c 24 68 03	 cmp	 BYTE PTR tv842[rsp], 3
  01aed	0f 84 05 01 00
	00		 je	 $LN109@commadpt_e
  01af3	80 7c 24 68 1f	 cmp	 BYTE PTR tv842[rsp], 31
  01af8	0f 84 bb 01 00
	00		 je	 $LN111@commadpt_e
  01afe	80 7c 24 68 26	 cmp	 BYTE PTR tv842[rsp], 38	; 00000026H
  01b03	0f 84 ef 00 00
	00		 je	 $LN108@commadpt_e
  01b09	80 7c 24 68 2d	 cmp	 BYTE PTR tv842[rsp], 45	; 0000002dH
  01b0e	74 10		 je	 SHORT $LN106@commadpt_e
  01b10	80 7c 24 68 3d	 cmp	 BYTE PTR tv842[rsp], 61	; 0000003dH
  01b15	0f 84 88 00 00
	00		 je	 $LN107@commadpt_e
  01b1b	e9 fb 01 00 00	 jmp	 $LN113@commadpt_e
$LN106@commadpt_e:

; 3265 :                                         {
; 3266 :                                             case 0x2D:      /* ENQ */
; 3267 :                                                 dev->commadpt->readcomp=1;

  01b20	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01b28	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01b2f	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01b35	0f ba e8 11	 bts	 eax, 17
  01b39	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01b41	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01b48	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3268 :                                                 dev->commadpt->in_textmode=0;

  01b4e	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01b56	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01b5d	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01b63	0f ba f0 0b	 btr	 eax, 11
  01b67	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01b6f	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01b76	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3269 :                                                 commadpt_ring_push(&dev->commadpt->rdwrk,b);

  01b7c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01b84	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01b8b	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01b91	0f b6 54 24 50	 movzx	 edx, BYTE PTR b$[rsp]
  01b96	48 8b c8	 mov	 rcx, rax
  01b99	e8 00 00 00 00	 call	 commadpt_ring_push

; 3270 :                                                 break;

  01b9e	e9 9a 01 00 00	 jmp	 $LN24@commadpt_e
$LN107@commadpt_e:

; 3271 :                                             case 0x3D:      /* NAK */
; 3272 :                                                 dev->commadpt->readcomp=1;

  01ba3	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01bab	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01bb2	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01bb8	0f ba e8 11	 bts	 eax, 17
  01bbc	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01bc4	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01bcb	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3273 :                                                 commadpt_ring_push(&dev->commadpt->rdwrk,b);

  01bd1	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01bd9	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01be0	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01be6	0f b6 54 24 50	 movzx	 edx, BYTE PTR b$[rsp]
  01beb	48 8b c8	 mov	 rcx, rax
  01bee	e8 00 00 00 00	 call	 commadpt_ring_push

; 3274 :                                                 break;

  01bf3	e9 45 01 00 00	 jmp	 $LN24@commadpt_e
$LN108@commadpt_e:
$LN109@commadpt_e:

; 3275 :                                             case 0x26:      /* ETB */
; 3276 :                                             case 0x03:      /* ETX */
; 3277 :                                                 dev->commadpt->readcomp=1;

  01bf8	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01c00	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01c07	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01c0d	0f ba e8 11	 bts	 eax, 17
  01c11	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01c19	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01c20	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3278 :                                                 dev->commadpt->in_textmode=0;

  01c26	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01c2e	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01c35	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01c3b	0f ba f0 0b	 btr	 eax, 11
  01c3f	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01c47	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01c4e	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3279 :                                                 commadpt_ring_push(&dev->commadpt->rdwrk,b);

  01c54	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01c5c	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01c63	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01c69	0f b6 54 24 50	 movzx	 edx, BYTE PTR b$[rsp]
  01c6e	48 8b c8	 mov	 rcx, rax
  01c71	e8 00 00 00 00	 call	 commadpt_ring_push

; 3280 :                                                 if(dev->commadpt->eibmode)

  01c76	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01c7e	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01c85	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01c8b	c1 e8 02	 shr	 eax, 2
  01c8e	83 e0 01	 and	 eax, 1
  01c91	85 c0		 test	 eax, eax
  01c93	74 1f		 je	 SHORT $LN110@commadpt_e

; 3281 :                                                 {
; 3282 :                                                     commadpt_ring_push(&dev->commadpt->rdwrk,0);

  01c95	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01c9d	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01ca4	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01caa	33 d2		 xor	 edx, edx
  01cac	48 8b c8	 mov	 rcx, rax
  01caf	e8 00 00 00 00	 call	 commadpt_ring_push
$LN110@commadpt_e:

; 3283 :                                                 }
; 3284 :                                                 break;

  01cb4	e9 84 00 00 00	 jmp	 $LN24@commadpt_e
$LN111@commadpt_e:

; 3285 :                                             case 0x1F:      /* ITB */
; 3286 :                                                 commadpt_ring_push(&dev->commadpt->rdwrk,b);

  01cb9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01cc1	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01cc8	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01cce	0f b6 54 24 50	 movzx	 edx, BYTE PTR b$[rsp]
  01cd3	48 8b c8	 mov	 rcx, rax
  01cd6	e8 00 00 00 00	 call	 commadpt_ring_push

; 3287 :                                                 if(dev->commadpt->eibmode)

  01cdb	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01ce3	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01cea	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01cf0	c1 e8 02	 shr	 eax, 2
  01cf3	83 e0 01	 and	 eax, 1
  01cf6	85 c0		 test	 eax, eax
  01cf8	74 1f		 je	 SHORT $LN112@commadpt_e

; 3288 :                                                 {
; 3289 :                                                     commadpt_ring_push(&dev->commadpt->rdwrk,0);

  01cfa	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01d02	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01d09	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01d0f	33 d2		 xor	 edx, edx
  01d11	48 8b c8	 mov	 rcx, rax
  01d14	e8 00 00 00 00	 call	 commadpt_ring_push
$LN112@commadpt_e:

; 3290 :                                                 }
; 3291 :                                                 break;

  01d19	eb 22		 jmp	 SHORT $LN24@commadpt_e
$LN113@commadpt_e:

; 3292 :                                             default:
; 3293 :                                                 commadpt_ring_push(&dev->commadpt->rdwrk,b);

  01d1b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01d23	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01d2a	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01d30	0f b6 54 24 50	 movzx	 edx, BYTE PTR b$[rsp]
  01d35	48 8b c8	 mov	 rcx, rax
  01d38	e8 00 00 00 00	 call	 commadpt_ring_push
$LN24@commadpt_e:
$LN100@commadpt_e:
$LN98@commadpt_e:
$LN85@commadpt_e:

; 3294 :                                                 break;
; 3295 :                                         }
; 3296 :                                     }
; 3297 :                                 }
; 3298 :                             }
; 3299 :                         }

  01d3d	e9 90 02 00 00	 jmp	 $LN83@commadpt_e
$LN82@commadpt_e:

; 3300 :                         else
; 3301 :                         {
; 3302 :                             if(b!=0x32)

  01d42	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  01d47	83 f8 32	 cmp	 eax, 50			; 00000032H
  01d4a	0f 84 82 02 00
	00		 je	 $LN114@commadpt_e

; 3303 :                             {
; 3304 :                                 if(dev->commadpt->gotdle)

  01d50	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01d58	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01d5f	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01d65	c1 e8 0d	 shr	 eax, 13
  01d68	83 e0 01	 and	 eax, 1
  01d6b	85 c0		 test	 eax, eax
  01d6d	0f 84 42 01 00
	00		 je	 $LN115@commadpt_e

; 3305 :                                 {
; 3306 :                                     if((b & 0xf0) == 0x60 || (b&0xf0)==0x70)

  01d73	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  01d78	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  01d7d	83 f8 60	 cmp	 eax, 96			; 00000060H
  01d80	74 0f		 je	 SHORT $LN119@commadpt_e
  01d82	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  01d87	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  01d8c	83 f8 70	 cmp	 eax, 112		; 00000070H
  01d8f	75 74		 jne	 SHORT $LN117@commadpt_e
$LN119@commadpt_e:

; 3307 :                                     {
; 3308 :                                         commadpt_ring_push(&dev->commadpt->rdwrk,0x10);

  01d91	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01d99	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01da0	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01da6	b2 10		 mov	 dl, 16
  01da8	48 8b c8	 mov	 rcx, rax
  01dab	e8 00 00 00 00	 call	 commadpt_ring_push

; 3309 :                                         commadpt_ring_push(&dev->commadpt->rdwrk,b);

  01db0	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01db8	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01dbf	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01dc5	0f b6 54 24 50	 movzx	 edx, BYTE PTR b$[rsp]
  01dca	48 8b c8	 mov	 rcx, rax
  01dcd	e8 00 00 00 00	 call	 commadpt_ring_push

; 3310 :                                         dev->commadpt->readcomp=1;

  01dd2	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01dda	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01de1	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01de7	0f ba e8 11	 bts	 eax, 17
  01deb	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01df3	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01dfa	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3311 :                                     }

  01e00	e9 ab 00 00 00	 jmp	 $LN118@commadpt_e
$LN117@commadpt_e:

; 3312 :                                     else
; 3313 :                                     {
; 3314 :                                         if(b==0x02)

  01e05	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  01e0a	83 f8 02	 cmp	 eax, 2
  01e0d	0f 85 9d 00 00
	00		 jne	 $LN120@commadpt_e

; 3315 :                                         {
; 3316 :                                             commadpt_ring_push(&dev->commadpt->rdwrk,0x10);

  01e13	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01e1b	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01e22	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01e28	b2 10		 mov	 dl, 16
  01e2a	48 8b c8	 mov	 rcx, rax
  01e2d	e8 00 00 00 00	 call	 commadpt_ring_push

; 3317 :                                             commadpt_ring_push(&dev->commadpt->rdwrk,b);

  01e32	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01e3a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01e41	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01e47	0f b6 54 24 50	 movzx	 edx, BYTE PTR b$[rsp]
  01e4c	48 8b c8	 mov	 rcx, rax
  01e4f	e8 00 00 00 00	 call	 commadpt_ring_push

; 3318 :                                             dev->commadpt->in_textmode=1;

  01e54	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01e5c	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01e63	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01e69	0f ba e8 0b	 bts	 eax, 11
  01e6d	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01e75	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01e7c	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3319 :                                             dev->commadpt->in_xparmode=1;

  01e82	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01e8a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01e91	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01e97	0f ba e8 0c	 bts	 eax, 12
  01e9b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01ea3	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01eaa	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax
$LN120@commadpt_e:
$LN118@commadpt_e:

; 3320 :                                         }
; 3321 :                                     }
; 3322 :                                 }

  01eb0	e9 1d 01 00 00	 jmp	 $LN116@commadpt_e
$LN115@commadpt_e:

; 3323 :                                 else
; 3324 :                                 {
; 3325 :                                     switch(b)

  01eb5	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  01eba	88 44 24 6c	 mov	 BYTE PTR tv960[rsp], al
  01ebe	80 7c 24 6c 01	 cmp	 BYTE PTR tv960[rsp], 1
  01ec3	74 5d		 je	 SHORT $LN122@commadpt_e
  01ec5	80 7c 24 6c 02	 cmp	 BYTE PTR tv960[rsp], 2
  01eca	74 56		 je	 SHORT $LN123@commadpt_e
  01ecc	80 7c 24 6c 2d	 cmp	 BYTE PTR tv960[rsp], 45	; 0000002dH
  01ed1	74 7f		 je	 SHORT $LN124@commadpt_e
  01ed3	80 7c 24 6c 37	 cmp	 BYTE PTR tv960[rsp], 55	; 00000037H
  01ed8	74 10		 je	 SHORT $LN121@commadpt_e
  01eda	80 7c 24 6c 3d	 cmp	 BYTE PTR tv960[rsp], 61	; 0000003dH
  01edf	0f 84 9d 00 00
	00		 je	 $LN125@commadpt_e
  01ee5	e9 c6 00 00 00	 jmp	 $LN126@commadpt_e
$LN121@commadpt_e:

; 3326 :                                     {
; 3327 :                                         case 0x37:  /* EOT */
; 3328 :                                             setux=1;

  01eea	c6 44 24 5a 01	 mov	 BYTE PTR setux$[rsp], 1

; 3329 :                                             dev->commadpt->readcomp=1;

  01eef	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01ef7	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01efe	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01f04	0f ba e8 11	 bts	 eax, 17
  01f08	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01f10	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01f17	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3330 :                                             break;

  01f1d	e9 8e 00 00 00	 jmp	 $LN26@commadpt_e
$LN122@commadpt_e:
$LN123@commadpt_e:

; 3331 :                                         case 0x01:
; 3332 :                                         case 0x02:
; 3333 :                                             dev->commadpt->in_textmode=1;

  01f22	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01f2a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01f31	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01f37	0f ba e8 0b	 bts	 eax, 11
  01f3b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01f43	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01f4a	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3334 :                                             break;

  01f50	eb 5e		 jmp	 SHORT $LN26@commadpt_e
$LN124@commadpt_e:

; 3335 :                                         case 0x2D: /* ENQ */
; 3336 :                                             dev->commadpt->readcomp=1;

  01f52	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01f5a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01f61	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01f67	0f ba e8 11	 bts	 eax, 17
  01f6b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01f73	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01f7a	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3337 :                                             break;

  01f80	eb 2e		 jmp	 SHORT $LN26@commadpt_e
$LN125@commadpt_e:

; 3338 :                                         case 0x3D: /* NAK */
; 3339 :                                             dev->commadpt->readcomp=1;

  01f82	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01f8a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01f91	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01f97	0f ba e8 11	 bts	 eax, 17
  01f9b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01fa3	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01faa	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax
$LN126@commadpt_e:
$LN26@commadpt_e:

; 3340 :                                             break;
; 3341 :                                         default:
; 3342 :                                             break;
; 3343 :                                     }
; 3344 :                                     commadpt_ring_push(&dev->commadpt->rdwrk,b);

  01fb0	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01fb8	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01fbf	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01fc5	0f b6 54 24 50	 movzx	 edx, BYTE PTR b$[rsp]
  01fca	48 8b c8	 mov	 rcx, rax
  01fcd	e8 00 00 00 00	 call	 commadpt_ring_push
$LN116@commadpt_e:
$LN114@commadpt_e:
$LN83@commadpt_e:

; 3345 :                                 }
; 3346 :                             }
; 3347 :                         }
; 3348 :                         dev->commadpt->gotdle=0;

  01fd2	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01fda	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01fe1	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01fe7	0f ba f0 0d	 btr	 eax, 13
  01feb	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01ff3	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01ffa	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3349 :                     } /* END WHILE - READ FROM DATA BUFFER */

  02000	e9 5a f4 ff ff	 jmp	 $LN218@commadpt_e
$LN19@commadpt_e:
$LN79@commadpt_e:

; 3350 :                 } /* end of if (bsc) */
; 3351 :                 /* If readcomp is set, then we may exit the read loop */
; 3352 :                 if(dev->commadpt->readcomp || dev->commadpt->eol_flag)

  02005	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0200d	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02014	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0201a	c1 e8 11	 shr	 eax, 17
  0201d	83 e0 01	 and	 eax, 1
  02020	85 c0		 test	 eax, eax
  02022	75 23		 jne	 SHORT $LN128@commadpt_e
  02024	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0202c	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02033	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02039	c1 e8 16	 shr	 eax, 22
  0203c	83 e0 01	 and	 eax, 1
  0203f	85 c0		 test	 eax, eax
  02041	0f 84 79 01 00
	00		 je	 $LN127@commadpt_e
$LN128@commadpt_e:

; 3353 :                 {
; 3354 :                     if (dev->commadpt->rdwrk.havedata || dev->commadpt->eol_flag)

  02047	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0204f	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02056	8b 80 10 01 00
	00		 mov	 eax, DWORD PTR [rax+272]
  0205c	83 e0 01	 and	 eax, 1
  0205f	85 c0		 test	 eax, eax
  02061	75 23		 jne	 SHORT $LN130@commadpt_e
  02063	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0206b	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02072	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02078	c1 e8 16	 shr	 eax, 22
  0207b	83 e0 01	 and	 eax, 1
  0207e	85 c0		 test	 eax, eax
  02080	0f 84 3a 01 00
	00		 je	 $LN129@commadpt_e
$LN130@commadpt_e:

; 3355 :                     {
; 3356 :                         num=(U32)commadpt_ring_popbfr(&dev->commadpt->rdwrk,iobuf,count);

  02086	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  0208d	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02095	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  0209c	48 81 c1 f0 00
	00 00		 add	 rcx, 240		; 000000f0H
  020a3	44 8b c0	 mov	 r8d, eax
  020a6	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR iobuf$[rsp]
  020ae	e8 00 00 00 00	 call	 commadpt_ring_popbfr
  020b3	89 44 24 54	 mov	 DWORD PTR num$[rsp], eax

; 3357 :                         if(dev->commadpt->rdwrk.havedata)

  020b7	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  020bf	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  020c6	8b 80 10 01 00
	00		 mov	 eax, DWORD PTR [rax+272]
  020cc	83 e0 01	 and	 eax, 1
  020cf	85 c0		 test	 eax, eax
  020d1	74 0b		 je	 SHORT $LN131@commadpt_e

; 3358 :                         {
; 3359 :                             *more=1;

  020d3	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR more$[rsp]
  020db	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN131@commadpt_e:

; 3360 :                         }
; 3361 :                         *residual=count-num;

  020de	8b 44 24 54	 mov	 eax, DWORD PTR num$[rsp]
  020e2	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  020e9	2b c8		 sub	 ecx, eax
  020eb	8b c1		 mov	 eax, ecx
  020ed	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  020f5	89 01		 mov	 DWORD PTR [rcx], eax

; 3362 :                         *unitstat=CSW_CE|CSW_DE|(setux?CSW_UX:0);

  020f7	0f b6 44 24 5a	 movzx	 eax, BYTE PTR setux$[rsp]
  020fc	85 c0		 test	 eax, eax
  020fe	74 0d		 je	 SHORT $LN216@commadpt_e
  02100	c7 84 24 a4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv1031[rsp], 1
  0210b	eb 0b		 jmp	 SHORT $LN217@commadpt_e
$LN216@commadpt_e:
  0210d	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1031[rsp], 0
$LN217@commadpt_e:
  02118	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR tv1031[rsp]
  0211f	83 c8 0c	 or	 eax, 12
  02122	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR unitstat$[rsp]
  0212a	88 01		 mov	 BYTE PTR [rcx], al

; 3363 :                         logdump("Read",dev,iobuf,num);

  0212c	8b 44 24 54	 mov	 eax, DWORD PTR num$[rsp]
  02130	44 8b c8	 mov	 r9d, eax
  02133	4c 8b 84 24 18
	01 00 00	 mov	 r8, QWORD PTR iobuf$[rsp]
  0213b	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  02143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160719
  0214a	e8 00 00 00 00	 call	 logdump

; 3364 :                         if(IS_ASYNC_LNCTL(dev->commadpt)&& !dev->commadpt->rdwrk.havedata && *residual > 0)

  0214f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02157	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0215e	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  02162	83 f8 02	 cmp	 eax, 2
  02165	75 57		 jne	 SHORT $LN132@commadpt_e
  02167	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0216f	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02176	8b 80 10 01 00
	00		 mov	 eax, DWORD PTR [rax+272]
  0217c	83 e0 01	 and	 eax, 1
  0217f	85 c0		 test	 eax, eax
  02181	75 3b		 jne	 SHORT $LN132@commadpt_e
  02183	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  0218b	83 38 00	 cmp	 DWORD PTR [rax], 0
  0218e	76 2e		 jbe	 SHORT $LN132@commadpt_e

; 3365 :                             dev->commadpt->eol_flag = 0;

  02190	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02198	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0219f	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  021a5	0f ba f0 16	 btr	 eax, 22
  021a9	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  021b1	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  021b8	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax
$LN132@commadpt_e:

; 3366 :                         break;

  021be	eb 05		 jmp	 SHORT $LN17@commadpt_e
$LN129@commadpt_e:
$LN127@commadpt_e:

; 3367 :                     }
; 3368 :                 }
; 3369 :             } /* END WHILE - READ FROM THREAD */

  021c0	e9 6c f0 ff ff	 jmp	 $LN16@commadpt_e
$LN17@commadpt_e:

; 3370 :             break;

  021c5	e9 e1 0c 00 00	 jmp	 $LN14@commadpt_e
$LN133@commadpt_e:
$LN134@commadpt_e:

; 3371 : 
; 3372 :         /*---------------------------------------------------------------*/
; 3373 :         /* WRITE                                                         */
; 3374 :         /*---------------------------------------------------------------*/
; 3375 :         case 0x01:
; 3376 :         case 0x0d:       /* also CCW=BREAK */
; 3377 :                 logdump("Writ",dev,iobuf,count);

  021ca	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  021d1	44 8b c8	 mov	 r9d, eax
  021d4	4c 8b 84 24 18
	01 00 00	 mov	 r8, QWORD PTR iobuf$[rsp]
  021dc	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  021e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160723
  021eb	e8 00 00 00 00	 call	 logdump

; 3378 :                 *residual=count;

  021f0	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  021f8	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  021ff	89 08		 mov	 DWORD PTR [rax], ecx

; 3379 : 
; 3380 :                 /* Check if we have an opened path */
; 3381 :                 if(!dev->commadpt->connect)

  02201	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02209	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02210	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02216	d1 e8		 shr	 eax, 1
  02218	83 e0 01	 and	 eax, 1
  0221b	85 c0		 test	 eax, eax
  0221d	75 29		 jne	 SHORT $LN135@commadpt_e

; 3382 :                 {
; 3383 :                     *unitstat=CSW_CE|CSW_DE|CSW_UC;

  0221f	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  02227	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3384 :                     dev->sense[0]=SENSE_IR;

  0222a	b8 01 00 00 00	 mov	 eax, 1
  0222f	48 6b c0 00	 imul	 rax, rax, 0
  02233	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0223b	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 3385 :                     break;

  02243	e9 63 0c 00 00	 jmp	 $LN14@commadpt_e
$LN135@commadpt_e:

; 3386 :                 }
; 3387 : 
; 3388 :                 /* Check if the line has been enabled */
; 3389 :                 if(!dev->commadpt->enabled)

  02248	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02250	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02257	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0225d	83 e0 01	 and	 eax, 1
  02260	85 c0		 test	 eax, eax
  02262	75 29		 jne	 SHORT $LN136@commadpt_e

; 3390 :                 {
; 3391 :                     *unitstat=CSW_CE|CSW_DE|CSW_UC;

  02264	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  0226c	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3392 :                     dev->sense[0]=SENSE_CR;

  0226f	b8 01 00 00 00	 mov	 eax, 1
  02274	48 6b c0 00	 imul	 rax, rax, 0
  02278	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02280	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 3393 :                     break;

  02288	e9 1e 0c 00 00	 jmp	 $LN14@commadpt_e
$LN136@commadpt_e:

; 3394 :                 }
; 3395 : 
; 3396 :                 dev->commadpt->haltpending = 0; /* circumvent APL\360 2741 race cond II */

  0228d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02295	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0229c	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  022a2	0f ba f0 08	 btr	 eax, 8
  022a6	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  022ae	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  022b5	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3397 :                 /* read 1 byte to check for pending input */
; 3398 :                 i=read_socket(dev->commadpt->sfd,&b,1);

  022bb	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  022c3	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  022ca	41 b8 01 00 00
	00		 mov	 r8d, 1
  022d0	48 8d 54 24 50	 lea	 rdx, QWORD PTR b$[rsp]
  022d5	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  022d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read_socket
  022de	89 44 24 60	 mov	 DWORD PTR i$[rsp], eax

; 3399 :                 if (IS_ASYNC_LNCTL(dev->commadpt))

  022e2	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  022ea	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  022f1	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  022f5	83 f8 02	 cmp	 eax, 2
  022f8	75 4a		 jne	 SHORT $LN137@commadpt_e

; 3400 :                 {
; 3401 :                     if(i>0)

  022fa	83 7c 24 60 00	 cmp	 DWORD PTR i$[rsp], 0
  022ff	7e 3e		 jle	 SHORT $LN139@commadpt_e

; 3402 :                     {
; 3403 :                         logdump("RCV0",dev,&b,1);

  02301	41 b9 01 00 00
	00		 mov	 r9d, 1
  02307	4c 8d 44 24 50	 lea	 r8, QWORD PTR b$[rsp]
  0230c	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  02314	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160729
  0231b	e8 00 00 00 00	 call	 logdump

; 3404 :                         commadpt_read_tty(dev->commadpt,&b,1);

  02320	41 b8 01 00 00
	00		 mov	 r8d, 1
  02326	48 8d 54 24 50	 lea	 rdx, QWORD PTR b$[rsp]
  0232b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02333	48 8b 88 68 11
	00 00		 mov	 rcx, QWORD PTR [rax+4456]
  0233a	e8 00 00 00 00	 call	 commadpt_read_tty
$LN139@commadpt_e:

; 3405 :                     }
; 3406 :                 }

  0233f	e9 81 00 00 00	 jmp	 $LN138@commadpt_e
$LN137@commadpt_e:

; 3407 :                 else
; 3408 :                 {
; 3409 :                     if(i>0)

  02344	83 7c 24 60 00	 cmp	 DWORD PTR i$[rsp], 0
  02349	7e 20		 jle	 SHORT $LN140@commadpt_e

; 3410 :                     {
; 3411 :                     /* Push it in the communication input buffer ring */
; 3412 :                         commadpt_ring_push(&dev->commadpt->inbfr,b);

  0234b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02353	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0235a	48 83 c0 78	 add	 rax, 120		; 00000078H
  0235e	0f b6 54 24 50	 movzx	 edx, BYTE PTR b$[rsp]
  02363	48 8b c8	 mov	 rcx, rax
  02366	e8 00 00 00 00	 call	 commadpt_ring_push
$LN140@commadpt_e:

; 3413 :                     }
; 3414 :                     /* Set UX on write if line has pending inbound data */
; 3415 :                     if(dev->commadpt->inbfr.havedata)

  0236b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02373	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0237a	8b 80 98 00 00
	00		 mov	 eax, DWORD PTR [rax+152]
  02380	83 e0 01	 and	 eax, 1
  02383	85 c0		 test	 eax, eax
  02385	74 3e		 je	 SHORT $LN141@commadpt_e

; 3416 :                     {
; 3417 :                         dev->commadpt->datalostcond=1;

  02387	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0238f	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02396	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0239c	0f ba e8 12	 bts	 eax, 18
  023a0	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  023a8	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  023af	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3418 :                         *unitstat=CSW_CE|CSW_DE|CSW_UX;

  023b5	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  023bd	c6 00 0d	 mov	 BYTE PTR [rax], 13

; 3419 :                         break;

  023c0	e9 e6 0a 00 00	 jmp	 $LN14@commadpt_e
$LN141@commadpt_e:
$LN138@commadpt_e:

; 3420 :                     }
; 3421 :                 }  /* end of else (async) */
; 3422 :                 /*
; 3423 :                  * Fill in the Write Buffer
; 3424 :                  */
; 3425 : 
; 3426 :                 /* To start : not transparent mode, no DLE received yet */
; 3427 :                 turnxpar=0;

  023c5	c6 44 24 59 00	 mov	 BYTE PTR turnxpar$[rsp], 0

; 3428 :                 gotdle=0;

  023ca	c6 44 24 58 00	 mov	 BYTE PTR gotdle$[rsp], 0

; 3429 :                 if(IS_ASYNC_LNCTL(dev->commadpt) && dev->commadpt->telnet_int
; 3430 :                    /* ugly hack for TSO ATTN to fix IEA000I 0C3,IOE,01,0E40,40008900002C,,,TCAM */
; 3431 :                    && !(iobuf[0] == 0xdf && iobuf[1] == 0xdf && iobuf[2] == 0xdf && count == 3))

  023cf	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  023d7	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  023de	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  023e2	83 f8 02	 cmp	 eax, 2
  023e5	0f 85 e9 00 00
	00		 jne	 $LN142@commadpt_e
  023eb	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  023f3	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  023fa	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02400	c1 e8 15	 shr	 eax, 21
  02403	83 e0 01	 and	 eax, 1
  02406	85 c0		 test	 eax, eax
  02408	0f 84 c6 00 00
	00		 je	 $LN142@commadpt_e
  0240e	b8 01 00 00 00	 mov	 eax, 1
  02413	48 6b c0 00	 imul	 rax, rax, 0
  02417	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  0241f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  02423	3d df 00 00 00	 cmp	 eax, 223		; 000000dfH
  02428	75 42		 jne	 SHORT $LN143@commadpt_e
  0242a	b8 01 00 00 00	 mov	 eax, 1
  0242f	48 6b c0 01	 imul	 rax, rax, 1
  02433	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  0243b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0243f	3d df 00 00 00	 cmp	 eax, 223		; 000000dfH
  02444	75 26		 jne	 SHORT $LN143@commadpt_e
  02446	b8 01 00 00 00	 mov	 eax, 1
  0244b	48 6b c0 02	 imul	 rax, rax, 2
  0244f	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  02457	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0245b	3d df 00 00 00	 cmp	 eax, 223		; 000000dfH
  02460	75 0a		 jne	 SHORT $LN143@commadpt_e
  02462	83 bc 24 00 01
	00 00 03	 cmp	 DWORD PTR count$[rsp], 3
  0246a	74 68		 je	 SHORT $LN142@commadpt_e
$LN143@commadpt_e:

; 3432 :                 {
; 3433 :                        dev->commadpt->telnet_int = 0;

  0246c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02474	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0247b	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02481	0f ba f0 15	 btr	 eax, 21
  02485	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0248d	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  02494	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3434 :                        *residual=count;

  0249a	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  024a2	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  024a9	89 08		 mov	 DWORD PTR [rax], ecx

; 3435 :                        *unitstat=CSW_CE|CSW_DE|CSW_UC;

  024ab	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  024b3	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3436 :                        dev->sense[0]=SENSE_IR;

  024b6	b8 01 00 00 00	 mov	 eax, 1
  024bb	48 6b c0 00	 imul	 rax, rax, 0
  024bf	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  024c7	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 3437 :                        break;

  024cf	e9 d7 09 00 00	 jmp	 $LN14@commadpt_e
$LN142@commadpt_e:

; 3438 :                 }
; 3439 : 
; 3440 :                 /* Scan the I/O buffer */
; 3441 :                 for(i=0;(U32)i<count;i++)

  024d4	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  024dc	eb 0a		 jmp	 SHORT $LN30@commadpt_e
$LN28@commadpt_e:
  024de	8b 44 24 60	 mov	 eax, DWORD PTR i$[rsp]
  024e2	ff c0		 inc	 eax
  024e4	89 44 24 60	 mov	 DWORD PTR i$[rsp], eax
$LN30@commadpt_e:
  024e8	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  024ef	39 44 24 60	 cmp	 DWORD PTR i$[rsp], eax
  024f3	0f 83 f9 04 00
	00		 jae	 $LN29@commadpt_e

; 3442 :                 {
; 3443 :                     /* Get 1 byte */
; 3444 :                     b=iobuf[i];

  024f9	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  024fe	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  02506	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0250a	88 44 24 50	 mov	 BYTE PTR b$[rsp], al

; 3445 : 
; 3446 :                     if (IS_ASYNC_LNCTL(dev->commadpt))

  0250e	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02516	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0251d	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  02521	83 f8 02	 cmp	 eax, 2
  02524	0f 85 05 04 00
	00		 jne	 $LN144@commadpt_e

; 3447 :                     {
; 3448 :                         if (dev->commadpt->byte_skip_table[b])

  0252a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02532	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02539	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR b$[rsp]
  0253e	0f b6 84 08 71
	01 00 00	 movzx	 eax, BYTE PTR [rax+rcx+369]
  02546	85 c0		 test	 eax, eax
  02548	74 02		 je	 SHORT $LN146@commadpt_e

; 3449 :                         continue;

  0254a	eb 92		 jmp	 SHORT $LN28@commadpt_e
$LN146@commadpt_e:

; 3450 :                         if (dev->commadpt->term == COMMADPT_TERM_TTY)

  0254c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02554	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0255b	0f b6 40 09	 movzx	 eax, BYTE PTR [rax+9]
  0255f	85 c0		 test	 eax, eax
  02561	75 1a		 jne	 SHORT $LN147@commadpt_e

; 3451 :                         {
; 3452 :                             b = reverse_bits( b ) & 0x7f;

  02563	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR b$[rsp]
  02568	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_reverse_bits
  0256e	0f b6 c0	 movzx	 eax, al
  02571	83 e0 7f	 and	 eax, 127		; 0000007fH
  02574	88 44 24 50	 mov	 BYTE PTR b$[rsp], al

; 3453 :                         }

  02578	e9 ad 03 00 00	 jmp	 $LN148@commadpt_e
$LN147@commadpt_e:

; 3454 :                         else
; 3455 :                         { /* 2741 */
; 3456 :                             if (count == 1 && b == CIRCLE_D)

  0257d	83 bc 24 00 01
	00 00 01	 cmp	 DWORD PTR count$[rsp], 1
  02585	75 14		 jne	 SHORT $LN149@commadpt_e
  02587	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  0258c	83 f8 16	 cmp	 eax, 22
  0258f	75 0a		 jne	 SHORT $LN149@commadpt_e

; 3457 :                             {
; 3458 :                                 b = 0x00; /* map initial Circle-D to NUL */

  02591	c6 44 24 50 00	 mov	 BYTE PTR b$[rsp], 0

; 3459 :                             }

  02596	e9 8f 03 00 00	 jmp	 $LN150@commadpt_e
$LN149@commadpt_e:

; 3460 :                             else if (dev->commadpt->rxvt4apl)

  0259b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  025a3	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  025aa	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  025b0	c1 e8 1b	 shr	 eax, 27
  025b3	83 e0 01	 and	 eax, 1
  025b6	85 c0		 test	 eax, eax
  025b8	0f 84 21 03 00
	00		 je	 $LN151@commadpt_e

; 3461 :                             {
; 3462 :                                 if (dev->commadpt->overstrike_flag == 1 && (b & 0x7f) == 0x5d)

  025be	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  025c6	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  025cd	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  025d3	c1 e8 1c	 shr	 eax, 28
  025d6	83 e0 01	 and	 eax, 1
  025d9	83 f8 01	 cmp	 eax, 1
  025dc	75 6e		 jne	 SHORT $LN153@commadpt_e
  025de	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  025e3	83 e0 7f	 and	 eax, 127		; 0000007fH
  025e6	83 f8 5d	 cmp	 eax, 93			; 0000005dH
  025e9	75 61		 jne	 SHORT $LN153@commadpt_e

; 3463 :                                 { /* char is another backspace but overstrike was expected */
; 3464 :                                     dev->commadpt->overstrike_flag = 0;

  025eb	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  025f3	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  025fa	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02600	0f ba f0 1c	 btr	 eax, 28
  02604	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0260c	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  02613	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3465 :                                     dev->commadpt->saved_char = b;

  02619	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02621	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02628	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR b$[rsp]
  0262d	88 88 7c 03 00
	00		 mov	 BYTE PTR [rax+892], cl

; 3466 :                                     b = rxvt4apl_from_2741[b];

  02633	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  02638	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:rxvt4apl_from_2741
  0263f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  02643	88 44 24 50	 mov	 BYTE PTR b$[rsp], al

; 3467 :                                 }

  02647	e9 91 02 00 00	 jmp	 $LN154@commadpt_e
$LN153@commadpt_e:

; 3468 :                                 else if (dev->commadpt->overstrike_flag == 1)

  0264c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02654	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0265b	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02661	c1 e8 1c	 shr	 eax, 28
  02664	83 e0 01	 and	 eax, 1
  02667	83 f8 01	 cmp	 eax, 1
  0266a	0f 85 0b 01 00
	00		 jne	 $LN155@commadpt_e

; 3469 :                                 {
; 3470 :                                     dev->commadpt->overstrike_flag = 0;

  02670	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02678	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0267f	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02685	0f ba f0 1c	 btr	 eax, 28
  02689	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02691	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  02698	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3471 :                                     if (((u_int)dev->commadpt->saved_char) > ((u_int)b))

  0269e	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  026a6	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  026ad	0f b6 80 7c 03
	00 00		 movzx	 eax, BYTE PTR [rax+892]
  026b4	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR b$[rsp]
  026b9	3b c1		 cmp	 eax, ecx
  026bb	76 25		 jbe	 SHORT $LN157@commadpt_e

; 3472 :                                     {
; 3473 :                                         b1 = b;

  026bd	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  026c2	88 44 24 5b	 mov	 BYTE PTR b1$[rsp], al

; 3474 :                                         b2 = dev->commadpt->saved_char;

  026c6	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  026ce	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  026d5	0f b6 80 7c 03
	00 00		 movzx	 eax, BYTE PTR [rax+892]
  026dc	88 44 24 5c	 mov	 BYTE PTR b2$[rsp], al

; 3475 :                                     }

  026e0	eb 23		 jmp	 SHORT $LN158@commadpt_e
$LN157@commadpt_e:

; 3476 :                                     else
; 3477 :                                     {
; 3478 :                                         b1 = dev->commadpt->saved_char;

  026e2	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  026ea	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  026f1	0f b6 80 7c 03
	00 00		 movzx	 eax, BYTE PTR [rax+892]
  026f8	88 44 24 5b	 mov	 BYTE PTR b1$[rsp], al

; 3479 :                                         b2 = b;

  026fc	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  02701	88 44 24 5c	 mov	 BYTE PTR b2$[rsp], al
$LN158@commadpt_e:

; 3480 :                                     }
; 3481 :                                     b = '?';

  02705	c6 44 24 50 3f	 mov	 BYTE PTR b$[rsp], 63	; 0000003fH

; 3482 :                                     for (j = 0; j < sizeof(overstrike_2741_pairs); j+=2) {

  0270a	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  02712	eb 0b		 jmp	 SHORT $LN33@commadpt_e
$LN31@commadpt_e:
  02714	8b 44 24 64	 mov	 eax, DWORD PTR j$[rsp]
  02718	83 c0 02	 add	 eax, 2
  0271b	89 44 24 64	 mov	 DWORD PTR j$[rsp], eax
$LN33@commadpt_e:
  0271f	8b 44 24 64	 mov	 eax, DWORD PTR j$[rsp]
  02723	48 83 f8 1a	 cmp	 rax, 26
  02727	73 4d		 jae	 SHORT $LN32@commadpt_e

; 3483 :                                         if (overstrike_2741_pairs[j] == b1 && overstrike_2741_pairs[j+1] == b2) {

  02729	8b 44 24 64	 mov	 eax, DWORD PTR j$[rsp]
  0272d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:overstrike_2741_pairs
  02734	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  02738	0f b6 4c 24 5b	 movzx	 ecx, BYTE PTR b1$[rsp]
  0273d	3b c1		 cmp	 eax, ecx
  0273f	75 33		 jne	 SHORT $LN159@commadpt_e
  02741	8b 44 24 64	 mov	 eax, DWORD PTR j$[rsp]
  02745	ff c0		 inc	 eax
  02747	8b c0		 mov	 eax, eax
  02749	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:overstrike_2741_pairs
  02750	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  02754	0f b6 4c 24 5c	 movzx	 ecx, BYTE PTR b2$[rsp]
  02759	3b c1		 cmp	 eax, ecx
  0275b	75 17		 jne	 SHORT $LN159@commadpt_e

; 3484 :                                             b = overstrike_rxvt4apl_chars[j>>1];

  0275d	8b 44 24 64	 mov	 eax, DWORD PTR j$[rsp]
  02761	d1 e8		 shr	 eax, 1
  02763	8b c0		 mov	 eax, eax
  02765	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:overstrike_rxvt4apl_chars
  0276c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  02770	88 44 24 50	 mov	 BYTE PTR b$[rsp], al
$LN159@commadpt_e:

; 3485 :                                         }
; 3486 :                                     }

  02774	eb 9e		 jmp	 SHORT $LN31@commadpt_e
$LN32@commadpt_e:

; 3487 :                                 }

  02776	e9 62 01 00 00	 jmp	 $LN156@commadpt_e
$LN155@commadpt_e:

; 3488 :                                 else if ((b & 0x7f) == 0x5d /* 2741 backspace */
; 3489 :                                       && (dev->commadpt->saved_char & 0x7f) != 0x5d
; 3490 :                                       && (dev->commadpt->saved_char & 0x7f) != 0x3b
; 3491 :                                       && (dev->commadpt->saved_char & 0x7f) != 0x7f)

  0277b	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  02780	83 e0 7f	 and	 eax, 127		; 0000007fH
  02783	83 f8 5d	 cmp	 eax, 93			; 0000005dH
  02786	0f 85 a5 00 00
	00		 jne	 $LN160@commadpt_e
  0278c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02794	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0279b	0f b6 80 7c 03
	00 00		 movzx	 eax, BYTE PTR [rax+892]
  027a2	83 e0 7f	 and	 eax, 127		; 0000007fH
  027a5	83 f8 5d	 cmp	 eax, 93			; 0000005dH
  027a8	0f 84 83 00 00
	00		 je	 $LN160@commadpt_e
  027ae	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  027b6	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  027bd	0f b6 80 7c 03
	00 00		 movzx	 eax, BYTE PTR [rax+892]
  027c4	83 e0 7f	 and	 eax, 127		; 0000007fH
  027c7	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  027ca	74 65		 je	 SHORT $LN160@commadpt_e
  027cc	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  027d4	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  027db	0f b6 80 7c 03
	00 00		 movzx	 eax, BYTE PTR [rax+892]
  027e2	83 e0 7f	 and	 eax, 127		; 0000007fH
  027e5	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  027e8	74 47		 je	 SHORT $LN160@commadpt_e

; 3492 :                                 {
; 3493 :                                     dev->commadpt->overstrike_flag = 1;

  027ea	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  027f2	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  027f9	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  027ff	0f ba e8 1c	 bts	 eax, 28
  02803	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0280b	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  02812	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3494 :                                     b = rxvt4apl_from_2741[b];

  02818	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  0281d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:rxvt4apl_from_2741
  02824	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  02828	88 44 24 50	 mov	 BYTE PTR b$[rsp], al

; 3495 :                                 }

  0282c	e9 ac 00 00 00	 jmp	 $LN161@commadpt_e
$LN160@commadpt_e:

; 3496 :                                 else
; 3497 :                                 {
; 3498 :                                     dev->commadpt->overstrike_flag = 0;

  02831	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02839	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02840	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02846	0f ba f0 1c	 btr	 eax, 28
  0284a	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02852	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  02859	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3499 :                                     dev->commadpt->saved_char = b;

  0285f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02867	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0286e	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR b$[rsp]
  02873	88 88 7c 03 00
	00		 mov	 BYTE PTR [rax+892], cl

; 3500 :                                     b = rxvt4apl_from_2741[b];

  02879	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  0287e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:rxvt4apl_from_2741
  02885	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  02889	88 44 24 50	 mov	 BYTE PTR b$[rsp], al

; 3501 :                                     if (b == 0x0d && dev->commadpt->crlf_opt) /* ascii CR? */

  0288d	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  02892	83 f8 0d	 cmp	 eax, 13
  02895	75 46		 jne	 SHORT $LN162@commadpt_e
  02897	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0289f	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  028a6	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  028ac	c1 e8 1d	 shr	 eax, 29
  028af	83 e0 01	 and	 eax, 1
  028b2	85 c0		 test	 eax, eax
  028b4	74 27		 je	 SHORT $LN162@commadpt_e

; 3502 :                                     {   /* 2741 NL has been mapped to CR, we need to append LF to this (sigh) */
; 3503 :                                         commadpt_ring_push(&dev->commadpt->outbfr,b);

  028b6	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  028be	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  028c5	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  028cb	0f b6 54 24 50	 movzx	 edx, BYTE PTR b$[rsp]
  028d0	48 8b c8	 mov	 rcx, rax
  028d3	e8 00 00 00 00	 call	 commadpt_ring_push

; 3504 :                                         b = 0x0a;

  028d8	c6 44 24 50 0a	 mov	 BYTE PTR b$[rsp], 10
$LN162@commadpt_e:
$LN161@commadpt_e:
$LN156@commadpt_e:
$LN154@commadpt_e:

; 3505 :                                     }
; 3506 :                                 }
; 3507 :                             }

  028dd	eb 4b		 jmp	 SHORT $LN152@commadpt_e
$LN151@commadpt_e:

; 3508 :                             else if (dev->commadpt->code_table_toebcdic)

  028df	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  028e7	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  028ee	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  028f3	74 35		 je	 SHORT $LN163@commadpt_e

; 3509 :                             {
; 3510 :                                 b = dev->commadpt->code_table_toebcdic[b];  // first translate to EBCDIC

  028f5	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  028fd	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02904	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR b$[rsp]
  02909	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0290d	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  02911	88 44 24 50	 mov	 BYTE PTR b$[rsp], al

; 3511 :                                 b = guest_to_host(b) & 0x7f; // then EBCDIC to ASCII

  02915	0f b6 4c 24 50	 movzx	 ecx, BYTE PTR b$[rsp]
  0291a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_guest_to_host
  02920	0f b6 c0	 movzx	 eax, al
  02923	83 e0 7f	 and	 eax, 127		; 0000007fH
  02926	88 44 24 50	 mov	 BYTE PTR b$[rsp], al
$LN163@commadpt_e:
$LN152@commadpt_e:
$LN150@commadpt_e:
$LN148@commadpt_e:

; 3512 :                             }
; 3513 :                         }
; 3514 :                     }

  0292a	e9 9c 00 00 00	 jmp	 $LN145@commadpt_e
$LN144@commadpt_e:

; 3515 :                     else
; 3516 :                     {   /* line is BSC */
; 3517 :                         /* If we are in transparent mode, we must double the DLEs */
; 3518 :                         if(turnxpar)

  0292f	0f b6 44 24 59	 movzx	 eax, BYTE PTR turnxpar$[rsp]
  02934	85 c0		 test	 eax, eax
  02936	74 2b		 je	 SHORT $LN164@commadpt_e

; 3519 :                         {
; 3520 :                             /* Check for a DLE */
; 3521 :                             if(b==0x10)

  02938	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  0293d	83 f8 10	 cmp	 eax, 16
  02940	75 1f		 jne	 SHORT $LN166@commadpt_e

; 3522 :                             {
; 3523 :                                 /* put another one in the output buffer */
; 3524 :                                 commadpt_ring_push(&dev->commadpt->outbfr,0x10);

  02942	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0294a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02951	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  02957	b2 10		 mov	 dl, 16
  02959	48 8b c8	 mov	 rcx, rax
  0295c	e8 00 00 00 00	 call	 commadpt_ring_push
$LN166@commadpt_e:

; 3525 :                             }
; 3526 :                         }

  02961	eb 68		 jmp	 SHORT $LN165@commadpt_e
$LN164@commadpt_e:

; 3527 :                         else        /* non transparent mode */
; 3528 :                         {
; 3529 :                             if(b==0x10)

  02963	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  02968	83 f8 10	 cmp	 eax, 16
  0296b	75 07		 jne	 SHORT $LN167@commadpt_e

; 3530 :                             {
; 3531 :                                 gotdle=1;   /* Indicate we have a DLE for next pass */

  0296d	c6 44 24 58 01	 mov	 BYTE PTR gotdle$[rsp], 1

; 3532 :                             }

  02972	eb 57		 jmp	 SHORT $LN168@commadpt_e
$LN167@commadpt_e:

; 3533 :                             else
; 3534 :                             {
; 3535 :                                 /* If there was a DLE on previous pass */
; 3536 :                                 if(gotdle)

  02974	0f b6 44 24 58	 movzx	 eax, BYTE PTR gotdle$[rsp]
  02979	85 c0		 test	 eax, eax
  0297b	74 16		 je	 SHORT $LN169@commadpt_e

; 3537 :                                 {
; 3538 :                                     /* check for DLE/STX */
; 3539 :                                     if(b==0x02)

  0297d	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  02982	83 f8 02	 cmp	 eax, 2
  02985	75 05		 jne	 SHORT $LN171@commadpt_e

; 3540 :                                     {
; 3541 :                                         /* Indicate transparent mode on */
; 3542 :                                         turnxpar=1;

  02987	c6 44 24 59 01	 mov	 BYTE PTR turnxpar$[rsp], 1
$LN171@commadpt_e:

; 3543 :                                     }
; 3544 :                                    gotdle=0;

  0298c	c6 44 24 58 00	 mov	 BYTE PTR gotdle$[rsp], 0

; 3545 :                                 }

  02991	eb 38		 jmp	 SHORT $LN170@commadpt_e
$LN169@commadpt_e:

; 3546 :                                 else
; 3547 :                                 {
; 3548 :                                     if((b==0x03) || (b==0x26))

  02993	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  02998	83 f8 03	 cmp	 eax, 3
  0299b	74 0a		 je	 SHORT $LN173@commadpt_e
  0299d	0f b6 44 24 50	 movzx	 eax, BYTE PTR b$[rsp]
  029a2	83 f8 26	 cmp	 eax, 38			; 00000026H
  029a5	75 24		 jne	 SHORT $LN172@commadpt_e
$LN173@commadpt_e:

; 3549 :                                     {
; 3550 :                                         commadpt_ring_push(&dev->commadpt->outbfr,b);

  029a7	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  029af	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  029b6	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  029bc	0f b6 54 24 50	 movzx	 edx, BYTE PTR b$[rsp]
  029c1	48 8b c8	 mov	 rcx, rax
  029c4	e8 00 00 00 00	 call	 commadpt_ring_push

; 3551 :                                         break;

  029c9	eb 27		 jmp	 SHORT $LN29@commadpt_e
$LN172@commadpt_e:
$LN170@commadpt_e:
$LN168@commadpt_e:
$LN165@commadpt_e:
$LN145@commadpt_e:

; 3552 :                                     }
; 3553 :                                 }
; 3554 :                             }
; 3555 :                         }
; 3556 :                     }  /* end of else (async) */
; 3557 :                     /* Put the current byte on the output ring */
; 3558 :                     commadpt_ring_push(&dev->commadpt->outbfr,b);

  029cb	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  029d3	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  029da	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  029e0	0f b6 54 24 50	 movzx	 edx, BYTE PTR b$[rsp]
  029e5	48 8b c8	 mov	 rcx, rax
  029e8	e8 00 00 00 00	 call	 commadpt_ring_push

; 3559 :                 }

  029ed	e9 ec fa ff ff	 jmp	 $LN28@commadpt_e
$LN29@commadpt_e:

; 3560 :             if (IS_BSC_LNCTL(dev->commadpt))

  029f2	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  029fa	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02a01	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  02a05	83 f8 01	 cmp	 eax, 1
  02a08	75 67		 jne	 SHORT $LN174@commadpt_e

; 3561 :             {
; 3562 :                 /* If we had a DLE/STX, the line is now in Transparent Write Wait state */
; 3563 :                 /* meaning that no CCW codes except Write, No-Op, Sense are allowed     */
; 3564 :                 /* (that's what the manual says.. I doubt DISABLE is disallowed)        */
; 3565 :                 /* Anyway.. The program will have an opportunity to turn XPARENT mode   */
; 3566 :                 /* off on the next CCW.                                                 */
; 3567 :                 /* CAVEAT : The manual doesn't say if the line remains in transparent   */
; 3568 :                 /*          Write Wait state if the next CCW doesn't start with DLE/ETX */
; 3569 :                 /*          or DLE/ITB                                                  */
; 3570 :                 if(turnxpar)

  02a0a	0f b6 44 24 59	 movzx	 eax, BYTE PTR turnxpar$[rsp]
  02a0f	85 c0		 test	 eax, eax
  02a11	74 30		 je	 SHORT $LN175@commadpt_e

; 3571 :                 {
; 3572 :                     dev->commadpt->xparwwait=1;

  02a13	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02a1b	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02a22	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02a28	0f ba e8 09	 bts	 eax, 9
  02a2c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02a34	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  02a3b	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3573 :                 }

  02a41	eb 2e		 jmp	 SHORT $LN176@commadpt_e
$LN175@commadpt_e:

; 3574 :                 else
; 3575 :                 {
; 3576 :                     dev->commadpt->xparwwait=0;

  02a43	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02a4b	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02a52	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02a58	0f ba f0 09	 btr	 eax, 9
  02a5c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02a64	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  02a6b	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax
$LN176@commadpt_e:
$LN174@commadpt_e:

; 3577 :                 }
; 3578 :             }  /* end of if(bsc line) */
; 3579 :             /* Indicate to the worker thread the current operation is OUTPUT */
; 3580 :             dev->commadpt->curpending=COMMADPT_PEND_WRITE;

  02a71	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02a79	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02a80	c6 40 3c 02	 mov	 BYTE PTR [rax+60], 2

; 3581 : 
; 3582 :             /* All bytes written out - residual = 0 */
; 3583 :             *residual=0;

  02a84	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  02a8c	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 3584 : 
; 3585 :             /* Wake-up the worker thread */
; 3586 :             commadpt_wakeup(dev->commadpt,0);

  02a92	33 d2		 xor	 edx, edx
  02a94	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02a9c	48 8b 88 68 11
	00 00		 mov	 rcx, QWORD PTR [rax+4456]
  02aa3	e8 00 00 00 00	 call	 commadpt_wakeup

; 3587 : 
; 3588 :             /* Wait for operation completion */
; 3589 :             commadpt_wait(dev);

  02aa8	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02ab0	e8 00 00 00 00	 call	 commadpt_wait

; 3590 : 
; 3591 :             /* Check if the line is still connected */
; 3592 :             if(!dev->commadpt->connect)

  02ab5	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02abd	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02ac4	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02aca	d1 e8		 shr	 eax, 1
  02acc	83 e0 01	 and	 eax, 1
  02acf	85 c0		 test	 eax, eax
  02ad1	75 29		 jne	 SHORT $LN177@commadpt_e

; 3593 :             {
; 3594 :                 *unitstat=CSW_CE|CSW_DE|CSW_UC;

  02ad3	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  02adb	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3595 :                 dev->sense[0]=SENSE_IR;

  02ade	b8 01 00 00 00	 mov	 eax, 1
  02ae3	48 6b c0 00	 imul	 rax, rax, 0
  02ae7	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02aef	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 3596 :                 break;

  02af7	e9 af 03 00 00	 jmp	 $LN14@commadpt_e
$LN177@commadpt_e:

; 3597 :             }
; 3598 : 
; 3599 :             /* Check if the I/O was interrupted */
; 3600 :             if(dev->commadpt->haltpending)

  02afc	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02b04	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02b0b	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02b11	c1 e8 08	 shr	 eax, 8
  02b14	83 e0 01	 and	 eax, 1
  02b17	85 c0		 test	 eax, eax
  02b19	74 3e		 je	 SHORT $LN178@commadpt_e

; 3601 :             {
; 3602 :                 *unitstat=CSW_CE|CSW_DE|CSW_UX;

  02b1b	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  02b23	c6 00 0d	 mov	 BYTE PTR [rax], 13

; 3603 :                 dev->commadpt->haltpending = 0;

  02b26	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02b2e	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02b35	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02b3b	0f ba f0 08	 btr	 eax, 8
  02b3f	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02b47	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  02b4e	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3604 :                 break;

  02b54	e9 52 03 00 00	 jmp	 $LN14@commadpt_e
$LN178@commadpt_e:

; 3605 :             }
; 3606 :             *unitstat=CSW_CE|CSW_DE;

  02b59	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  02b61	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3607 :             break;

  02b64	e9 42 03 00 00	 jmp	 $LN14@commadpt_e
$LN179@commadpt_e:

; 3608 : 
; 3609 :         /*---------------------------------------------------------------*/
; 3610 :         /* PREPARE                                                       */
; 3611 :         /* NOTE : DO NOT SET RESIDUAL to 0 : Otherwise, channel.c        */
; 3612 :         /*        will reflect a channel prot check - residual           */
; 3613 :         /*        should indicate NO data was transfered for this        */
; 3614 :         /*        pseudo-read operation                                  */
; 3615 :         /*---------------------------------------------------------------*/
; 3616 :         case 0x06:
; 3617 :             *residual=count;

  02b69	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  02b71	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  02b78	89 08		 mov	 DWORD PTR [rax], ecx

; 3618 :             /* PREPARE not allowed unless line is enabled */
; 3619 :             if(!dev->commadpt->enabled)

  02b7a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02b82	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02b89	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02b8f	83 e0 01	 and	 eax, 1
  02b92	85 c0		 test	 eax, eax
  02b94	75 42		 jne	 SHORT $LN180@commadpt_e

; 3620 :             {
; 3621 :                 *unitstat=CSW_CE|CSW_DE|CSW_UC;

  02b96	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  02b9e	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3622 :                 dev->sense[0]=SENSE_CR;

  02ba1	b8 01 00 00 00	 mov	 eax, 1
  02ba6	48 6b c0 00	 imul	 rax, rax, 0
  02baa	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02bb2	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 3623 :                 dev->sense[1]=0x06;

  02bba	b8 01 00 00 00	 mov	 eax, 1
  02bbf	48 6b c0 01	 imul	 rax, rax, 1
  02bc3	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02bcb	c6 84 01 64 03
	00 00 06	 mov	 BYTE PTR [rcx+rax+868], 6

; 3624 :                 break;

  02bd3	e9 d3 02 00 00	 jmp	 $LN14@commadpt_e
$LN180@commadpt_e:

; 3625 :             }
; 3626 : 
; 3627 :             if(IS_ASYNC_LNCTL(dev->commadpt) && dev->commadpt->haltprepare)

  02bd8	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02be0	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02be7	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  02beb	83 f8 02	 cmp	 eax, 2
  02bee	75 2f		 jne	 SHORT $LN181@commadpt_e
  02bf0	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02bf8	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02bff	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02c05	c1 e8 1a	 shr	 eax, 26
  02c08	83 e0 01	 and	 eax, 1
  02c0b	85 c0		 test	 eax, eax
  02c0d	74 10		 je	 SHORT $LN181@commadpt_e

; 3628 :             {  /* circumvent APL\360 2741 race cond I */
; 3629 :                 *unitstat=CSW_CE|CSW_DE|CSW_UX;

  02c0f	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  02c17	c6 00 0d	 mov	 BYTE PTR [rax], 13

; 3630 :                 break;

  02c1a	e9 8c 02 00 00	 jmp	 $LN14@commadpt_e
$LN181@commadpt_e:

; 3631 :             } /* end of if(async) */
; 3632 : 
; 3633 :             if(IS_ASYNC_LNCTL(dev->commadpt) && dev->commadpt->telnet_int)

  02c1f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02c27	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02c2e	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  02c32	83 f8 02	 cmp	 eax, 2
  02c35	0f 85 c6 00 00
	00		 jne	 $LN182@commadpt_e
  02c3b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02c43	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02c4a	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02c50	c1 e8 15	 shr	 eax, 21
  02c53	83 e0 01	 and	 eax, 1
  02c56	85 c0		 test	 eax, eax
  02c58	0f 84 a3 00 00
	00		 je	 $LN182@commadpt_e

; 3634 :             {
; 3635 :                 dev->commadpt->telnet_int = 0;

  02c5e	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02c66	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02c6d	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02c73	0f ba f0 15	 btr	 eax, 21
  02c77	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02c7f	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  02c86	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3636 :                 *unitstat=CSW_CE|CSW_DE;

  02c8c	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  02c94	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3637 :                 if(dev->commadpt->haltpending)

  02c97	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02c9f	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02ca6	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02cac	c1 e8 08	 shr	 eax, 8
  02caf	83 e0 01	 and	 eax, 1
  02cb2	85 c0		 test	 eax, eax
  02cb4	74 46		 je	 SHORT $LN183@commadpt_e

; 3638 :                 {
; 3639 :                     dev->commadpt->haltpending=0;

  02cb6	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02cbe	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02cc5	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02ccb	0f ba f0 08	 btr	 eax, 8
  02ccf	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02cd7	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  02cde	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3640 :                     *unitstat |= CSW_UX;

  02ce4	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  02cec	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  02cef	83 c8 01	 or	 eax, 1
  02cf2	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR unitstat$[rsp]
  02cfa	88 01		 mov	 BYTE PTR [rcx], al
$LN183@commadpt_e:

; 3641 :                 }
; 3642 :                 break;

  02cfc	e9 aa 01 00 00	 jmp	 $LN14@commadpt_e
$LN182@commadpt_e:

; 3643 :             } /* end of if(async) */
; 3644 : 
; 3645 :             /* Transparent Write Wait State test */
; 3646 :             if(dev->commadpt->xparwwait)

  02d01	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02d09	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02d10	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02d16	c1 e8 09	 shr	 eax, 9
  02d19	83 e0 01	 and	 eax, 1
  02d1c	85 c0		 test	 eax, eax
  02d1e	74 29		 je	 SHORT $LN184@commadpt_e

; 3647 :             {
; 3648 :                 *unitstat=CSW_CE|CSW_DE|CSW_UC;

  02d20	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  02d28	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3649 :                 dev->sense[0]=SENSE_CR;

  02d2b	b8 01 00 00 00	 mov	 eax, 1
  02d30	48 6b c0 00	 imul	 rax, rax, 0
  02d34	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02d3c	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 3650 :                 return;

  02d44	e9 a2 01 00 00	 jmp	 $LN1@commadpt_e
$LN184@commadpt_e:

; 3651 :             }
; 3652 : 
; 3653 :             /* If data is present, prepare ends immediatly */
; 3654 :             if(dev->commadpt->inbfr.havedata)

  02d49	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02d51	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02d58	8b 80 98 00 00
	00		 mov	 eax, DWORD PTR [rax+152]
  02d5e	83 e0 01	 and	 eax, 1
  02d61	85 c0		 test	 eax, eax
  02d63	74 10		 je	 SHORT $LN185@commadpt_e

; 3655 :             {
; 3656 :                 *unitstat=CSW_CE|CSW_DE;

  02d65	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  02d6d	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3657 :                 break;

  02d70	e9 36 01 00 00	 jmp	 $LN14@commadpt_e
$LN185@commadpt_e:

; 3658 :             }
; 3659 : 
; 3660 :             /* Indicate to the worker thread to notify us when data arrives */
; 3661 :             dev->commadpt->curpending=COMMADPT_PEND_PREPARE;

  02d75	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02d7d	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02d84	c6 40 3c 06	 mov	 BYTE PTR [rax+60], 6

; 3662 : 
; 3663 :             /* Wakeup worker thread */
; 3664 :             commadpt_wakeup(dev->commadpt,0);

  02d88	33 d2		 xor	 edx, edx
  02d8a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02d92	48 8b 88 68 11
	00 00		 mov	 rcx, QWORD PTR [rax+4456]
  02d99	e8 00 00 00 00	 call	 commadpt_wakeup

; 3665 : 
; 3666 :             /* Wait for completion */
; 3667 :             commadpt_wait(dev);

  02d9e	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02da6	e8 00 00 00 00	 call	 commadpt_wait

; 3668 : 
; 3669 :             /* If I/O was halted (this one happens often) */
; 3670 :             if(dev->commadpt->haltpending)

  02dab	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02db3	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02dba	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02dc0	c1 e8 08	 shr	 eax, 8
  02dc3	83 e0 01	 and	 eax, 1
  02dc6	85 c0		 test	 eax, eax
  02dc8	74 3e		 je	 SHORT $LN186@commadpt_e

; 3671 :             {
; 3672 :                 *unitstat=CSW_CE|CSW_DE|CSW_UX;

  02dca	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  02dd2	c6 00 0d	 mov	 BYTE PTR [rax], 13

; 3673 :                 dev->commadpt->haltpending=0;

  02dd5	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02ddd	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02de4	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02dea	0f ba f0 08	 btr	 eax, 8
  02dee	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02df6	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  02dfd	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3674 :                 break;

  02e03	e9 a3 00 00 00	 jmp	 $LN14@commadpt_e
$LN186@commadpt_e:

; 3675 :             }
; 3676 : 
; 3677 :             /* Check if the line is still connected */
; 3678 :             if(!dev->commadpt->connect)

  02e08	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02e10	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02e17	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02e1d	d1 e8		 shr	 eax, 1
  02e1f	83 e0 01	 and	 eax, 1
  02e22	85 c0		 test	 eax, eax
  02e24	75 26		 jne	 SHORT $LN187@commadpt_e

; 3679 :             {
; 3680 :                 *unitstat=CSW_CE|CSW_DE|CSW_UC;

  02e26	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  02e2e	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3681 :                 dev->sense[0]=SENSE_IR;

  02e31	b8 01 00 00 00	 mov	 eax, 1
  02e36	48 6b c0 00	 imul	 rax, rax, 0
  02e3a	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02e42	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 3682 :                 break;

  02e4a	eb 5f		 jmp	 SHORT $LN14@commadpt_e
$LN187@commadpt_e:

; 3683 :             }
; 3684 : 
; 3685 :             /* Normal Prepare exit condition - data is present in the input buffer */
; 3686 :             *unitstat=CSW_CE|CSW_DE;

  02e4c	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  02e54	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3687 :             dev->commadpt->telnet_int = 0;

  02e57	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02e5f	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02e66	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02e6c	0f ba f0 15	 btr	 eax, 21
  02e70	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02e78	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  02e7f	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 3688 :             break;

  02e85	eb 24		 jmp	 SHORT $LN14@commadpt_e
$LN188@commadpt_e:

; 3689 : 
; 3690 :         default:
; 3691 :         /*---------------------------------------------------------------*/
; 3692 :         /* INVALID OPERATION                                             */
; 3693 :         /*---------------------------------------------------------------*/
; 3694 :             /* Set command reject sense byte, and unit check status */
; 3695 :             *unitstat=CSW_CE+CSW_DE+CSW_UC;

  02e87	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  02e8f	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3696 :             dev->sense[0]=SENSE_CR;

  02e92	b8 01 00 00 00	 mov	 eax, 1
  02e97	48 6b c0 00	 imul	 rax, rax, 0
  02e9b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02ea3	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H
$LN14@commadpt_e:

; 3697 :             break;
; 3698 : 
; 3699 :     }
; 3700 :     /* Is the device still there? If not, for example when
; 3701 :        Hercules is shutting down, releasing the lock may cause a segfault */
; 3702 :     if (dev)

  02eab	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02eb4	74 35		 je	 SHORT $LN189@commadpt_e

; 3703 :         if (dev->commadpt)

  02eb6	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02ebe	48 83 b8 68 11
	00 00 00	 cmp	 QWORD PTR [rax+4456], 0
  02ec6	74 23		 je	 SHORT $LN190@commadpt_e

; 3704 :             release_lock(&dev->commadpt->lock);

  02ec8	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02ed0	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02ed7	48 83 c0 68	 add	 rax, 104		; 00000068H
  02edb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160781
  02ee2	48 8b c8	 mov	 rcx, rax
  02ee5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock
$LN190@commadpt_e:
$LN189@commadpt_e:
$LN1@commadpt_e:

; 3705 : }

  02eeb	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  02ef2	5f		 pop	 rdi
  02ef3	5e		 pop	 rsi
  02ef4	c3		 ret	 0
  02ef5	0f 1f 00	 npad	 3
$LN222@commadpt_e:
  02ef8	00 00 00 00	 DD	 $LN133@commadpt_e
  02efc	00 00 00 00	 DD	 $LN65@commadpt_e
  02f00	00 00 00 00	 DD	 $LN36@commadpt_e
  02f04	00 00 00 00	 DD	 $LN37@commadpt_e
  02f08	00 00 00 00	 DD	 $LN179@commadpt_e
  02f0c	00 00 00 00	 DD	 $LN55@commadpt_e
  02f10	00 00 00 00	 DD	 $LN66@commadpt_e
  02f14	00 00 00 00	 DD	 $LN134@commadpt_e
  02f18	00 00 00 00	 DD	 $LN52@commadpt_e
  02f1c	00 00 00 00	 DD	 $LN39@commadpt_e
  02f20	00 00 00 00	 DD	 $LN59@commadpt_e
  02f24	00 00 00 00	 DD	 $LN48@commadpt_e
  02f28	00 00 00 00	 DD	 $LN38@commadpt_e
  02f2c	00 00 00 00	 DD	 $LN188@commadpt_e
$LN221@commadpt_e:
  02f30	00		 DB	 0
  02f31	01		 DB	 1
  02f32	02		 DB	 2
  02f33	03		 DB	 3
  02f34	0d		 DB	 13
  02f35	04		 DB	 4
  02f36	0d		 DB	 13
  02f37	0d		 DB	 13
  02f38	05		 DB	 5
  02f39	06		 DB	 6
  02f3a	0d		 DB	 13
  02f3b	0d		 DB	 13
  02f3c	07		 DB	 7
  02f3d	0d		 DB	 13
  02f3e	0d		 DB	 13
  02f3f	0d		 DB	 13
  02f40	0d		 DB	 13
  02f41	0d		 DB	 13
  02f42	0d		 DB	 13
  02f43	0d		 DB	 13
  02f44	0d		 DB	 13
  02f45	0d		 DB	 13
  02f46	0d		 DB	 13
  02f47	0d		 DB	 13
  02f48	0d		 DB	 13
  02f49	0d		 DB	 13
  02f4a	0d		 DB	 13
  02f4b	0d		 DB	 13
  02f4c	0d		 DB	 13
  02f4d	0d		 DB	 13
  02f4e	0d		 DB	 13
  02f4f	0d		 DB	 13
  02f50	0d		 DB	 13
  02f51	0d		 DB	 13
  02f52	08		 DB	 8
  02f53	0d		 DB	 13
  02f54	0d		 DB	 13
  02f55	0d		 DB	 13
  02f56	09		 DB	 9
  02f57	0d		 DB	 13
  02f58	0a		 DB	 10
  02f59	0d		 DB	 13
  02f5a	0d		 DB	 13
  02f5b	0d		 DB	 13
  02f5c	0d		 DB	 13
  02f5d	0d		 DB	 13
  02f5e	0b		 DB	 11
  02f5f	0d		 DB	 13
  02f60	0d		 DB	 13
  02f61	0d		 DB	 13
  02f62	0d		 DB	 13
  02f63	0d		 DB	 13
  02f64	0d		 DB	 13
  02f65	0d		 DB	 13
  02f66	0d		 DB	 13
  02f67	0d		 DB	 13
  02f68	0d		 DB	 13
  02f69	0d		 DB	 13
  02f6a	0d		 DB	 13
  02f6b	0d		 DB	 13
  02f6c	0d		 DB	 13
  02f6d	0d		 DB	 13
  02f6e	0d		 DB	 13
  02f6f	0d		 DB	 13
  02f70	0d		 DB	 13
  02f71	0d		 DB	 13
  02f72	0d		 DB	 13
  02f73	0d		 DB	 13
  02f74	0d		 DB	 13
  02f75	0d		 DB	 13
  02f76	0d		 DB	 13
  02f77	0d		 DB	 13
  02f78	0d		 DB	 13
  02f79	0d		 DB	 13
  02f7a	0d		 DB	 13
  02f7b	0d		 DB	 13
  02f7c	0d		 DB	 13
  02f7d	0d		 DB	 13
  02f7e	0d		 DB	 13
  02f7f	0d		 DB	 13
  02f80	0d		 DB	 13
  02f81	0d		 DB	 13
  02f82	0d		 DB	 13
  02f83	0d		 DB	 13
  02f84	0d		 DB	 13
  02f85	0d		 DB	 13
  02f86	0d		 DB	 13
  02f87	0d		 DB	 13
  02f88	0d		 DB	 13
  02f89	0d		 DB	 13
  02f8a	0d		 DB	 13
  02f8b	0d		 DB	 13
  02f8c	0d		 DB	 13
  02f8d	0d		 DB	 13
  02f8e	0d		 DB	 13
  02f8f	0d		 DB	 13
  02f90	0d		 DB	 13
  02f91	0d		 DB	 13
  02f92	0d		 DB	 13
  02f93	0d		 DB	 13
  02f94	0d		 DB	 13
  02f95	0d		 DB	 13
  02f96	0d		 DB	 13
  02f97	0d		 DB	 13
  02f98	0d		 DB	 13
  02f99	0d		 DB	 13
  02f9a	0d		 DB	 13
  02f9b	0d		 DB	 13
  02f9c	0d		 DB	 13
  02f9d	0d		 DB	 13
  02f9e	0d		 DB	 13
  02f9f	0d		 DB	 13
  02fa0	0d		 DB	 13
  02fa1	0d		 DB	 13
  02fa2	0d		 DB	 13
  02fa3	0d		 DB	 13
  02fa4	0d		 DB	 13
  02fa5	0d		 DB	 13
  02fa6	0d		 DB	 13
  02fa7	0d		 DB	 13
  02fa8	0d		 DB	 13
  02fa9	0d		 DB	 13
  02faa	0d		 DB	 13
  02fab	0d		 DB	 13
  02fac	0d		 DB	 13
  02fad	0d		 DB	 13
  02fae	0d		 DB	 13
  02faf	0d		 DB	 13
  02fb0	0d		 DB	 13
  02fb1	0d		 DB	 13
  02fb2	0d		 DB	 13
  02fb3	0d		 DB	 13
  02fb4	0d		 DB	 13
  02fb5	0d		 DB	 13
  02fb6	0d		 DB	 13
  02fb7	0d		 DB	 13
  02fb8	0d		 DB	 13
  02fb9	0d		 DB	 13
  02fba	0d		 DB	 13
  02fbb	0d		 DB	 13
  02fbc	0d		 DB	 13
  02fbd	0d		 DB	 13
  02fbe	0d		 DB	 13
  02fbf	0d		 DB	 13
  02fc0	0d		 DB	 13
  02fc1	0d		 DB	 13
  02fc2	0d		 DB	 13
  02fc3	0d		 DB	 13
  02fc4	0d		 DB	 13
  02fc5	0d		 DB	 13
  02fc6	0d		 DB	 13
  02fc7	0d		 DB	 13
  02fc8	0d		 DB	 13
  02fc9	0d		 DB	 13
  02fca	0d		 DB	 13
  02fcb	0d		 DB	 13
  02fcc	0d		 DB	 13
  02fcd	0d		 DB	 13
  02fce	0d		 DB	 13
  02fcf	0d		 DB	 13
  02fd0	0d		 DB	 13
  02fd1	0d		 DB	 13
  02fd2	0d		 DB	 13
  02fd3	0d		 DB	 13
  02fd4	0d		 DB	 13
  02fd5	0d		 DB	 13
  02fd6	0d		 DB	 13
  02fd7	0d		 DB	 13
  02fd8	0d		 DB	 13
  02fd9	0d		 DB	 13
  02fda	0d		 DB	 13
  02fdb	0d		 DB	 13
  02fdc	0d		 DB	 13
  02fdd	0d		 DB	 13
  02fde	0d		 DB	 13
  02fdf	0d		 DB	 13
  02fe0	0d		 DB	 13
  02fe1	0d		 DB	 13
  02fe2	0d		 DB	 13
  02fe3	0d		 DB	 13
  02fe4	0d		 DB	 13
  02fe5	0d		 DB	 13
  02fe6	0d		 DB	 13
  02fe7	0d		 DB	 13
  02fe8	0d		 DB	 13
  02fe9	0d		 DB	 13
  02fea	0d		 DB	 13
  02feb	0d		 DB	 13
  02fec	0d		 DB	 13
  02fed	0d		 DB	 13
  02fee	0d		 DB	 13
  02fef	0d		 DB	 13
  02ff0	0d		 DB	 13
  02ff1	0d		 DB	 13
  02ff2	0d		 DB	 13
  02ff3	0d		 DB	 13
  02ff4	0d		 DB	 13
  02ff5	0d		 DB	 13
  02ff6	0d		 DB	 13
  02ff7	0d		 DB	 13
  02ff8	0d		 DB	 13
  02ff9	0d		 DB	 13
  02ffa	0d		 DB	 13
  02ffb	0d		 DB	 13
  02ffc	0d		 DB	 13
  02ffd	0d		 DB	 13
  02ffe	0d		 DB	 13
  02fff	0d		 DB	 13
  03000	0d		 DB	 13
  03001	0d		 DB	 13
  03002	0d		 DB	 13
  03003	0d		 DB	 13
  03004	0d		 DB	 13
  03005	0d		 DB	 13
  03006	0d		 DB	 13
  03007	0d		 DB	 13
  03008	0d		 DB	 13
  03009	0d		 DB	 13
  0300a	0d		 DB	 13
  0300b	0d		 DB	 13
  0300c	0d		 DB	 13
  0300d	0d		 DB	 13
  0300e	0d		 DB	 13
  0300f	0d		 DB	 13
  03010	0d		 DB	 13
  03011	0d		 DB	 13
  03012	0d		 DB	 13
  03013	0c		 DB	 12
$LN220@commadpt_e:
  03014	00 00 00 00	 DD	 $LN94@commadpt_e
  03018	00 00 00 00	 DD	 $LN88@commadpt_e
  0301c	00 00 00 00	 DD	 $LN90@commadpt_e
  03020	00 00 00 00	 DD	 $LN92@commadpt_e
  03024	00 00 00 00	 DD	 $LN96@commadpt_e
  03028	00 00 00 00	 DD	 $LN89@commadpt_e
  0302c	00 00 00 00	 DD	 $LN97@commadpt_e
$LN219@commadpt_e:
  03030	00		 DB	 0
  03031	06		 DB	 6
  03032	06		 DB	 6
  03033	06		 DB	 6
  03034	06		 DB	 6
  03035	06		 DB	 6
  03036	06		 DB	 6
  03037	06		 DB	 6
  03038	06		 DB	 6
  03039	06		 DB	 6
  0303a	06		 DB	 6
  0303b	06		 DB	 6
  0303c	06		 DB	 6
  0303d	01		 DB	 1
  0303e	06		 DB	 6
  0303f	06		 DB	 6
  03040	06		 DB	 6
  03041	06		 DB	 6
  03042	06		 DB	 6
  03043	06		 DB	 6
  03044	06		 DB	 6
  03045	06		 DB	 6
  03046	06		 DB	 6
  03047	06		 DB	 6
  03048	06		 DB	 6
  03049	06		 DB	 6
  0304a	06		 DB	 6
  0304b	06		 DB	 6
  0304c	02		 DB	 2
  0304d	06		 DB	 6
  0304e	06		 DB	 6
  0304f	06		 DB	 6
  03050	06		 DB	 6
  03051	06		 DB	 6
  03052	06		 DB	 6
  03053	03		 DB	 3
  03054	06		 DB	 6
  03055	06		 DB	 6
  03056	06		 DB	 6
  03057	06		 DB	 6
  03058	06		 DB	 6
  03059	06		 DB	 6
  0305a	04		 DB	 4
  0305b	06		 DB	 6
  0305c	06		 DB	 6
  0305d	06		 DB	 6
  0305e	06		 DB	 6
  0305f	05		 DB	 5
commadpt_execute_ccw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
tv71 = 80
tv77 = 84
tv156 = 88
tv162 = 92
dev$ = 112
commadpt_close_device PROC

; 2710 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 2711 :     if (dev->ccwtrace)

  00009	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0000e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00014	c1 e8 0f	 shr	 eax, 15
  00017	83 e0 01	 and	 eax, 1
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 97 00 00
	00		 je	 $LN2@commadpt_c

; 2712 :     {
; 2713 :         // "%1d:%04X COMM: closing down"
; 2714 :         WRMSG( HHC01060, "D", LCSS_DEVNUM );

  00022	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00028	74 0f		 je	 SHORT $LN7@commadpt_c
  0002a	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0002f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00033	89 44 24 50	 mov	 DWORD PTR tv71[rsp], eax
  00037	eb 08		 jmp	 SHORT $LN8@commadpt_c
$LN7@commadpt_c:
  00039	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN8@commadpt_c:
  00041	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00047	74 11		 je	 SHORT $LN9@commadpt_c
  00049	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0004e	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00052	d1 f8		 sar	 eax, 1
  00054	89 44 24 54	 mov	 DWORD PTR tv77[rsp], eax
  00058	eb 08		 jmp	 SHORT $LN10@commadpt_c
$LN9@commadpt_c:
  0005a	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN10@commadpt_c:
  00062	b9 01 00 00 00	 mov	 ecx, 1
  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0006d	8b 4c 24 50	 mov	 ecx, DWORD PTR tv71[rsp]
  00071	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00075	8b 4c 24 54	 mov	 ecx, DWORD PTR tv77[rsp]
  00079	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160528
  00084	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160529
  00090	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00095	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0009a	41 b9 03 00 00
	00		 mov	 r9d, 3
  000a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160530
  000a7	ba 9a 0a 00 00	 mov	 edx, 2714		; 00000a9aH
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160531
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN2@commadpt_c:

; 2715 :     }
; 2716 : 
; 2717 :     /* Terminate current I/O thread if necessary */
; 2718 :     if (dev->busy)

  000b9	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  000be	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  000c4	c1 e8 13	 shr	 eax, 19
  000c7	83 e0 01	 and	 eax, 1
  000ca	85 c0		 test	 eax, eax
  000cc	74 0a		 je	 SHORT $LN3@commadpt_c

; 2719 :         commadpt_halt_or_clear( dev );

  000ce	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  000d3	e8 00 00 00 00	 call	 commadpt_halt_or_clear
$LN3@commadpt_c:

; 2720 : 
; 2721 :     /* Obtain the CA lock */
; 2722 :     obtain_lock( &dev->commadpt->lock );

  000d8	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  000dd	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  000e4	48 83 c0 68	 add	 rax, 104		; 00000068H
  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160533
  000ef	48 8b c8	 mov	 rcx, rax
  000f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 2723 : 
; 2724 :     /* Terminate worker thread if it is still up */
; 2725 :     if (dev->commadpt->have_cthread)

  000f8	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  000fd	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00104	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0010a	c1 e8 05	 shr	 eax, 5
  0010d	83 e0 01	 and	 eax, 1
  00110	85 c0		 test	 eax, eax
  00112	74 67		 je	 SHORT $LN4@commadpt_c

; 2726 :     {
; 2727 :         dev->commadpt->curpending   = COMMADPT_PEND_SHUTDOWN;

  00114	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00119	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00120	c6 40 3c 0a	 mov	 BYTE PTR [rax+60], 10

; 2728 : 
; 2729 :         commadpt_wakeup( dev->commadpt, 0 );

  00124	33 d2		 xor	 edx, edx
  00126	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0012b	48 8b 88 68 11
	00 00		 mov	 rcx, QWORD PTR [rax+4456]
  00132	e8 00 00 00 00	 call	 commadpt_wakeup

; 2730 :         commadpt_wait( dev );

  00137	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0013c	e8 00 00 00 00	 call	 commadpt_wait

; 2731 : 
; 2732 :         dev->commadpt->cthread      = (TID) -1;

  00141	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00146	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0014d	c7 40 38 ff ff
	ff ff		 mov	 DWORD PTR [rax+56], -1	; ffffffffH

; 2733 :         dev->commadpt->have_cthread = 0;

  00154	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00159	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00160	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00166	83 e0 df	 and	 eax, -33		; ffffffdfH
  00169	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0016e	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00175	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax
$LN4@commadpt_c:

; 2734 :     }
; 2735 : 
; 2736 : 
; 2737 :     /* Free all work storage */
; 2738 :     /* The CA lock will be released by the cleanup routine */
; 2739 :     commadpt_clean_device( dev );  // also does "release_lock( &dev->commadpt->lock );"

  0017b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00180	e8 00 00 00 00	 call	 commadpt_clean_device

; 2740 : 
; 2741 :     /* Indicate to hercules the device is no longer opened */
; 2742 :     dev->fd = -1;

  00185	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0018a	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 2743 : 
; 2744 :     if (dev->ccwtrace)

  00194	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00199	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0019f	c1 e8 0f	 shr	 eax, 15
  001a2	83 e0 01	 and	 eax, 1
  001a5	85 c0		 test	 eax, eax
  001a7	0f 84 97 00 00
	00		 je	 $LN5@commadpt_c

; 2745 :     {
; 2746 :         // "%1d:%04X COMM: closed down"
; 2747 :         WRMSG( HHC01061, "D", LCSS_DEVNUM );

  001ad	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  001b3	74 0f		 je	 SHORT $LN11@commadpt_c
  001b5	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  001ba	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  001be	89 44 24 58	 mov	 DWORD PTR tv156[rsp], eax
  001c2	eb 08		 jmp	 SHORT $LN12@commadpt_c
$LN11@commadpt_c:
  001c4	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv156[rsp], 0
$LN12@commadpt_c:
  001cc	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  001d2	74 11		 je	 SHORT $LN13@commadpt_c
  001d4	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  001d9	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  001dd	d1 f8		 sar	 eax, 1
  001df	89 44 24 5c	 mov	 DWORD PTR tv162[rsp], eax
  001e3	eb 08		 jmp	 SHORT $LN14@commadpt_c
$LN13@commadpt_c:
  001e5	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv162[rsp], 0
$LN14@commadpt_c:
  001ed	b9 01 00 00 00	 mov	 ecx, 1
  001f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001f8	8b 4c 24 58	 mov	 ecx, DWORD PTR tv156[rsp]
  001fc	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00200	8b 4c 24 5c	 mov	 ecx, DWORD PTR tv162[rsp]
  00204	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00208	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160536
  0020f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00214	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160537
  0021b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00220	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00225	41 b9 03 00 00
	00		 mov	 r9d, 3
  0022b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160538
  00232	ba bb 0a 00 00	 mov	 edx, 2747		; 00000abbH
  00237	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160539
  0023e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN5@commadpt_c:

; 2748 :     }
; 2749 :     return 0;

  00244	33 c0		 xor	 eax, eax

; 2750 : }

  00246	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0024a	c3		 ret	 0
commadpt_close_device ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
$T1 = 80
tv136 = 88
tv143 = 96
tv149 = 104
tv158 = 112
filename$ = 128
__$ArrayPad$ = 400
dev$ = 432
devclass$ = 440
buflen$ = 448
buffer$ = 456
commadpt_query_device PROC

; 2691 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2692 :     char filename[ PATH_MAX + 1 ];      /* full path or just name    */
; 2693 : 
; 2694 :     BEGIN_DEVICE_CLASS_QUERY( "LINE", dev, devclass, buflen, buffer );

  0002d	48 83 bc 24 b8
	01 00 00 00	 cmp	 QWORD PTR devclass$[rsp], 0
  00036	74 12		 je	 SHORT $LN2@commadpt_q
  00038	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR devclass$[rsp]
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160508
  00047	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN2@commadpt_q:
  0004a	48 83 bc 24 b0
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00053	74 20		 je	 SHORT $LN4@commadpt_q
  00055	48 83 bc 24 b8
	01 00 00 00	 cmp	 QWORD PTR devclass$[rsp], 0
  0005e	74 15		 je	 SHORT $LN4@commadpt_q
  00060	83 bc 24 c0 01
	00 00 00	 cmp	 DWORD PTR buflen$[rsp], 0
  00068	74 0b		 je	 SHORT $LN4@commadpt_q
  0006a	48 83 bc 24 c8
	01 00 00 00	 cmp	 QWORD PTR buffer$[rsp], 0
  00073	75 05		 jne	 SHORT $LN3@commadpt_q
$LN4@commadpt_q:
  00075	e9 f5 01 00 00	 jmp	 $LN1@commadpt_q
$LN3@commadpt_q:
  0007a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00081	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00087	c1 e8 1a	 shr	 eax, 26
  0008a	83 e0 01	 and	 eax, 1
  0008d	85 c0		 test	 eax, eax
  0008f	74 75		 je	 SHORT $LN5@commadpt_q
  00091	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00099	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0009f	48 8b c8	 mov	 rcx, rax
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_basename
  000a8	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  000ae	48 8b d0	 mov	 rdx, rax
  000b1	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  000b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
  000bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160514
  000c6	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  000ce	e8 00 00 00 00	 call	 strcmp
  000d3	85 c0		 test	 eax, eax
  000d5	75 2d		 jne	 SHORT $LN7@commadpt_q
  000d7	b8 01 00 00 00	 mov	 eax, 1
  000dc	48 6b c0 00	 imul	 rax, rax, 0
  000e0	48 89 44 24 50	 mov	 QWORD PTR $T1[rsp], rax
  000e5	48 81 7c 24 50
	05 01 00 00	 cmp	 QWORD PTR $T1[rsp], 261	; 00000105H
  000ee	73 02		 jae	 SHORT $LN9@commadpt_q
  000f0	eb 05		 jmp	 SHORT $LN10@commadpt_q
$LN9@commadpt_q:
  000f2	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN10@commadpt_q:
  000f7	48 8b 44 24 50	 mov	 rax, QWORD PTR $T1[rsp]
  000fc	c6 84 04 80 00
	00 00 00	 mov	 BYTE PTR filename$[rsp+rax], 0
$LN7@commadpt_q:
  00104	eb 25		 jmp	 SHORT $LN6@commadpt_q
$LN5@commadpt_q:
  00106	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0010e	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00114	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  0011a	48 8b d0	 mov	 rdx, rax
  0011d	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  00125	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
$LN6@commadpt_q:

; 2695 : 
; 2696 :     snprintf(buffer,buflen,"%s STA=%s CN=%s, EIB=%s OP=%s IO[%"PRIu64"]",

  0012b	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00133	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0013a	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00140	c1 e8 02	 shr	 eax, 2
  00143	83 e0 01	 and	 eax, 1
  00146	85 c0		 test	 eax, eax
  00148	74 0e		 je	 SHORT $LN11@commadpt_q
  0014a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160515
  00151	48 89 44 24 58	 mov	 QWORD PTR tv136[rsp], rax
  00156	eb 0c		 jmp	 SHORT $LN12@commadpt_q
$LN11@commadpt_q:
  00158	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160516
  0015f	48 89 44 24 58	 mov	 QWORD PTR tv136[rsp], rax
$LN12@commadpt_q:
  00164	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0016c	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00173	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00179	d1 e8		 shr	 eax, 1
  0017b	83 e0 01	 and	 eax, 1
  0017e	85 c0		 test	 eax, eax
  00180	74 0e		 je	 SHORT $LN13@commadpt_q
  00182	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160517
  00189	48 89 44 24 60	 mov	 QWORD PTR tv143[rsp], rax
  0018e	eb 0c		 jmp	 SHORT $LN14@commadpt_q
$LN13@commadpt_q:
  00190	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160518
  00197	48 89 44 24 60	 mov	 QWORD PTR tv143[rsp], rax
$LN14@commadpt_q:
  0019c	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001a4	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  001ab	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  001b1	83 e0 01	 and	 eax, 1
  001b4	85 c0		 test	 eax, eax
  001b6	74 0e		 je	 SHORT $LN15@commadpt_q
  001b8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160519
  001bf	48 89 44 24 68	 mov	 QWORD PTR tv149[rsp], rax
  001c4	eb 0c		 jmp	 SHORT $LN16@commadpt_q
$LN15@commadpt_q:
  001c6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160520
  001cd	48 89 44 24 68	 mov	 QWORD PTR tv149[rsp], rax
$LN16@commadpt_q:
  001d2	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001da	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  001e1	0f b6 40 3c	 movzx	 eax, BYTE PTR [rax+60]
  001e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:commadpt_pendccw_text
  001ec	48 8b 94 24 b0
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  001f4	48 8b 92 68 11
	00 00		 mov	 rdx, QWORD PTR [rdx+4456]
  001fb	0f b6 52 08	 movzx	 edx, BYTE PTR [rdx+8]
  001ff	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:commadpt_lnctl_names
  00206	4c 63 8c 24 c0
	01 00 00	 movsxd	 r9, DWORD PTR buflen$[rsp]
  0020e	4c 89 4c 24 70	 mov	 QWORD PTR tv158[rsp], r9
  00213	4c 8b 94 24 b0
	01 00 00	 mov	 r10, QWORD PTR dev$[rsp]
  0021b	4d 8b 92 00 06
	00 00		 mov	 r10, QWORD PTR [r10+1536]
  00222	4c 89 54 24 40	 mov	 QWORD PTR [rsp+64], r10
  00227	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  0022b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00230	48 8b 44 24 58	 mov	 rax, QWORD PTR tv136[rsp]
  00235	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0023a	48 8b 44 24 60	 mov	 rax, QWORD PTR tv143[rsp]
  0023f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00244	48 8b 44 24 68	 mov	 rax, QWORD PTR tv149[rsp]
  00249	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024e	4d 8b 0c d0	 mov	 r9, QWORD PTR [r8+rdx*8]
  00252	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160521
  00259	48 8b 44 24 70	 mov	 rax, QWORD PTR tv158[rsp]
  0025e	48 8b d0	 mov	 rdx, rax
  00261	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00269	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN1@commadpt_q:
$LN8@commadpt_q:

; 2697 :             commadpt_lnctl_names[dev->commadpt->lnctl],
; 2698 :             dev->commadpt->enabled?"ENA":"DISA",
; 2699 :             dev->commadpt->connect?"YES":"NO",
; 2700 :             dev->commadpt->eibmode?"YES":"NO",
; 2701 :             commadpt_pendccw_text[dev->commadpt->curpending],
; 2702 :             dev->excps );
; 2703 : }

  0026f	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00277	48 33 cc	 xor	 rcx, rsp
  0027a	e8 00 00 00 00	 call	 __security_check_cookie
  0027f	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00286	c3		 ret	 0
commadpt_query_device ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
j$ = 80
errcnt$ = 84
bf$ = 88
rc$ = 92
ix$ = 96
in_temp$ = 100
dialt$ = 104
i$ = 112
tv353 = 116
tv992 = 120
tv1007 = 124
pc$ = 128
idle$1 = 132
intv$2 = 136
cnt$3 = 140
tv84 = 144
tv133 = 148
tv139 = 152
tv157 = 156
tv163 = 160
tv309 = 164
tv315 = 168
tv335 = 172
tv341 = 176
tv903 = 180
tv909 = 184
etospec$ = 188
tv1183 = 192
tv1189 = 196
tv1262 = 200
tv1411 = 204
tv1417 = 208
tv78 = 212
$T4 = 216
$T5 = 224
$T6 = 232
$T7 = 240
$T8 = 248
$T9 = 256
tv302 = 264
tv328 = 272
tv1387 = 280
res$ = 288
fmtbfr$ = 368
thread_name$ = 448
__$ArrayPad$ = 488
dev$ = 512
argc$ = 520
argv$ = 528
commadpt_init_handler PROC

; 2079 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 81 ec f0 01
	00 00		 sub	 rsp, 496		; 000001f0H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2080 :     char    thread_name[33];
; 2081 :     int     i,j;
; 2082 :     int     ix;
; 2083 :     int     rc;
; 2084 :     int     pc;             /* Parse code */
; 2085 :     int     errcnt;
; 2086 :     struct  in_addr in_temp;
; 2087 :     char   *dialt;
; 2088 :     char    fmtbfr[65];
; 2089 :     int     etospec;        /* ETO= Specified */
; 2090 :     union   { int num; char text[MAX_PARSER_STRLEN+1];  /* (+1 for null terminator) */ } res;
; 2091 :     char    bf[4];
; 2092 : 
; 2093 :     /* For re-initialisation, close the existing file, if any */
; 2094 :     if (dev->fd >= 0)

  00028	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00030	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  00037	7c 1a		 jl	 SHORT $LN29@commadpt_i

; 2095 :         (dev->hnd->close)(dev);

  00039	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00041	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  00048	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00050	ff 50 10	 call	 QWORD PTR [rax+16]
$LN29@commadpt_i:

; 2096 : 
; 2097 :     dev->excps = 0;

  00053	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0005b	48 c7 80 00 06
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+1536], 0

; 2098 : 
; 2099 :     dev->devtype=0x2703;

  00066	b8 03 27 00 00	 mov	 eax, 9987		; 00002703H
  0006b	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00073	66 89 41 4a	 mov	 WORD PTR [rcx+74], ax

; 2100 :     if(dev->ccwtrace)

  00077	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0007f	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00085	c1 e8 0f	 shr	 eax, 15
  00088	83 e0 01	 and	 eax, 1
  0008b	85 c0		 test	 eax, eax
  0008d	0f 84 b5 00 00
	00		 je	 $LN30@commadpt_i

; 2101 :     {
; 2102 :         WRMSG(HHC01058,"D",LCSS_DEVNUM);

  00093	48 83 bc 24 00
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0009c	74 15		 je	 SHORT $LN152@commadpt_i
  0009e	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000a6	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  000aa	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv78[rsp], eax
  000b1	eb 0b		 jmp	 SHORT $LN153@commadpt_i
$LN152@commadpt_i:
  000b3	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv78[rsp], 0
$LN153@commadpt_i:
  000be	48 83 bc 24 00
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000c7	74 17		 je	 SHORT $LN154@commadpt_i
  000c9	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000d1	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  000d5	d1 f8		 sar	 eax, 1
  000d7	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv84[rsp], eax
  000de	eb 0b		 jmp	 SHORT $LN155@commadpt_i
$LN154@commadpt_i:
  000e0	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv84[rsp], 0
$LN155@commadpt_i:
  000eb	b9 01 00 00 00	 mov	 ecx, 1
  000f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000f6	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR tv78[rsp]
  000fd	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00101	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv84[rsp]
  00108	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0010c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160250
  00113	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00118	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160251
  0011f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00124	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00129	41 b9 03 00 00
	00		 mov	 r9d, 3
  0012f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160252
  00136	ba 36 08 00 00	 mov	 edx, 2102		; 00000836H
  0013b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160253
  00142	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN30@commadpt_i:

; 2103 :     }
; 2104 : 
; 2105 :     rc=commadpt_alloc_device(dev);

  00148	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00150	e8 00 00 00 00	 call	 commadpt_alloc_device
  00155	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax

; 2106 :     if(rc<0)

  00159	83 7c 24 5c 00	 cmp	 DWORD PTR rc$[rsp], 0
  0015e	0f 8d bf 00 00
	00		 jge	 $LN31@commadpt_i

; 2107 :     {
; 2108 :         WRMSG(HHC01011, "I",LCSS_DEVNUM);

  00164	48 83 bc 24 00
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0016d	74 15		 je	 SHORT $LN156@commadpt_i
  0016f	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00177	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0017b	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv133[rsp], eax
  00182	eb 0b		 jmp	 SHORT $LN157@commadpt_i
$LN156@commadpt_i:
  00184	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv133[rsp], 0
$LN157@commadpt_i:
  0018f	48 83 bc 24 00
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00198	74 17		 je	 SHORT $LN158@commadpt_i
  0019a	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001a2	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  001a6	d1 f8		 sar	 eax, 1
  001a8	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv139[rsp], eax
  001af	eb 0b		 jmp	 SHORT $LN159@commadpt_i
$LN158@commadpt_i:
  001b1	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv139[rsp], 0
$LN159@commadpt_i:
  001bc	b9 01 00 00 00	 mov	 ecx, 1
  001c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001c7	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv133[rsp]
  001ce	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001d2	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv139[rsp]
  001d9	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  001dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160255
  001e4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160256
  001f0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001f5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001fa	41 b9 03 00 00
	00		 mov	 r9d, 3
  00200	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160257
  00207	ba 3c 08 00 00	 mov	 edx, 2108		; 0000083cH
  0020c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160258
  00213	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2109 :         return(-1);

  00219	b8 ff ff ff ff	 mov	 eax, -1
  0021e	e9 04 28 00 00	 jmp	 $LN1@commadpt_i
$LN31@commadpt_i:

; 2110 :     }
; 2111 :     if(dev->ccwtrace)

  00223	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0022b	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00231	c1 e8 0f	 shr	 eax, 15
  00234	83 e0 01	 and	 eax, 1
  00237	85 c0		 test	 eax, eax
  00239	0f 84 b5 00 00
	00		 je	 $LN32@commadpt_i

; 2112 :     {
; 2113 :         WRMSG(HHC01059,"D",LCSS_DEVNUM);

  0023f	48 83 bc 24 00
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00248	74 15		 je	 SHORT $LN160@commadpt_i
  0024a	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00252	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00256	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv157[rsp], eax
  0025d	eb 0b		 jmp	 SHORT $LN161@commadpt_i
$LN160@commadpt_i:
  0025f	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv157[rsp], 0
$LN161@commadpt_i:
  0026a	48 83 bc 24 00
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00273	74 17		 je	 SHORT $LN162@commadpt_i
  00275	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0027d	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00281	d1 f8		 sar	 eax, 1
  00283	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv163[rsp], eax
  0028a	eb 0b		 jmp	 SHORT $LN163@commadpt_i
$LN162@commadpt_i:
  0028c	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv163[rsp], 0
$LN163@commadpt_i:
  00297	b9 01 00 00 00	 mov	 ecx, 1
  0029c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002a2	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv157[rsp]
  002a9	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  002ad	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv163[rsp]
  002b4	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  002b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160260
  002bf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160261
  002cb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002d0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002d5	41 b9 03 00 00
	00		 mov	 r9d, 3
  002db	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160262
  002e2	ba 41 08 00 00	 mov	 edx, 2113		; 00000841H
  002e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160263
  002ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN32@commadpt_i:

; 2114 :     }
; 2115 :     errcnt=0;

  002f4	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR errcnt$[rsp], 0

; 2116 :     /*
; 2117 :      * Initialise ports & hosts
; 2118 :     */
; 2119 :     dev->commadpt->sfd=-1;

  002fc	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00304	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0030b	c7 40 4c ff ff
	ff ff		 mov	 DWORD PTR [rax+76], -1

; 2120 :     dev->commadpt->lport=0;

  00312	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0031a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00321	33 c9		 xor	 ecx, ecx
  00323	66 89 48 3e	 mov	 WORD PTR [rax+62], cx

; 2121 :     dev->commadpt->rport=0;

  00327	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0032f	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00336	33 c9		 xor	 ecx, ecx
  00338	66 89 48 44	 mov	 WORD PTR [rax+68], cx

; 2122 :     dev->commadpt->lhost=INADDR_ANY;

  0033c	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00344	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0034b	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [rax+64], 0

; 2123 :     dev->commadpt->rhost=INADDR_NONE;

  00352	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0035a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00361	c7 40 48 ff ff
	ff ff		 mov	 DWORD PTR [rax+72], -1	; ffffffffH

; 2124 :     dev->commadpt->dialin=0;

  00368	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00370	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00377	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0037d	83 e0 f7	 and	 eax, -9			; fffffff7H
  00380	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00388	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  0038f	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2125 :     dev->commadpt->dialout=1;

  00395	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0039d	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  003a4	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  003aa	83 c8 10	 or	 eax, 16
  003ad	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003b5	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  003bc	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2126 :     dev->commadpt->rto=3000;        /* Read Time-Out in milis */

  003c2	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003ca	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  003d1	c7 40 20 b8 0b
	00 00		 mov	 DWORD PTR [rax+32], 3000 ; 00000bb8H

; 2127 :     dev->commadpt->pto=3000;        /* Poll Time-out in milis */

  003d8	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003e0	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  003e7	c7 40 24 b8 0b
	00 00		 mov	 DWORD PTR [rax+36], 3000 ; 00000bb8H

; 2128 :     dev->commadpt->eto=10000;       /* Enable Time-out in milis */

  003ee	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003f6	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  003fd	c7 40 28 10 27
	00 00		 mov	 DWORD PTR [rax+40], 10000 ; 00002710H

; 2129 :     dev->commadpt->kaidle = sysblk.kaidle;

  00404	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0040c	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00413	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0041a	8b 89 b0 10 00
	00		 mov	 ecx, DWORD PTR [rcx+4272]
  00420	89 48 2c	 mov	 DWORD PTR [rax+44], ecx

; 2130 :     dev->commadpt->kaintv = sysblk.kaintv;

  00423	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0042b	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00432	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00439	8b 89 b4 10 00
	00		 mov	 ecx, DWORD PTR [rcx+4276]
  0043f	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 2131 :     dev->commadpt->kacnt  = sysblk.kacnt;

  00442	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0044a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00451	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00458	8b 89 b8 10 00
	00		 mov	 ecx, DWORD PTR [rcx+4280]
  0045e	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 2132 :     dev->commadpt->lnctl=COMMADPT_LNCTL_BSC;

  00461	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00469	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00470	c6 40 08 01	 mov	 BYTE PTR [rax+8], 1

; 2133 :     dev->commadpt->term=COMMADPT_TERM_TTY;

  00474	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0047c	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00483	c6 40 09 00	 mov	 BYTE PTR [rax+9], 0

; 2134 :     dev->commadpt->uctrans=FALSE;

  00487	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0048f	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00496	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0049c	0f ba f0 17	 btr	 eax, 23
  004a0	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  004a8	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  004af	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2135 :     dev->commadpt->code_table_toebcdic   = xlate_table_ebcd_toebcdic;

  004b5	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004bd	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  004c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:xlate_table_ebcd_toebcdic
  004cb	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2136 :     dev->commadpt->code_table_fromebcdic = xlate_table_ebcd_fromebcdic;

  004cf	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004d7	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  004de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:xlate_table_ebcd_fromebcdic
  004e5	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2137 :     memset(dev->commadpt->byte_skip_table, 0, sizeof(dev->commadpt->byte_skip_table) );

  004e9	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004f1	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  004f8	48 05 71 01 00
	00		 add	 rax, 369		; 00000171H
  004fe	48 8b f8	 mov	 rdi, rax
  00501	33 c0		 xor	 eax, eax
  00503	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00508	f3 aa		 rep stosb

; 2138 :     memset(dev->commadpt->input_byte_skip_table, 0, sizeof(dev->commadpt->input_byte_skip_table) );

  0050a	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00512	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00519	48 05 71 02 00
	00		 add	 rax, 625		; 00000271H
  0051f	48 8b f8	 mov	 rdi, rax
  00522	33 c0		 xor	 eax, eax
  00524	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00529	f3 aa		 rep stosb

; 2139 :     dev->commadpt->dumb_bs=0;

  0052b	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00533	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0053a	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00540	0f ba f0 18	 btr	 eax, 24
  00544	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0054c	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00553	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2140 :     dev->commadpt->dumb_break=0;

  00559	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00561	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00568	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0056e	0f ba f0 19	 btr	 eax, 25
  00572	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0057a	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00581	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2141 :     dev->commadpt->prepend_length = 0;

  00587	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0058f	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00596	c6 80 71 03 00
	00 00		 mov	 BYTE PTR [rax+881], 0

; 2142 :     dev->commadpt->append_length = 0;

  0059d	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  005a5	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  005ac	c6 80 76 03 00
	00 00		 mov	 BYTE PTR [rax+886], 0

; 2143 :     dev->commadpt->rxvt4apl = 0;

  005b3	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  005bb	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  005c2	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  005c8	0f ba f0 1b	 btr	 eax, 27
  005cc	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  005d4	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  005db	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2144 :     dev->commadpt->overstrike_flag = 0;

  005e1	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  005e9	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  005f0	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  005f6	0f ba f0 1c	 btr	 eax, 28
  005fa	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00602	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00609	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2145 :     dev->commadpt->crlf_opt = 0;

  0060f	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00617	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0061e	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00624	0f ba f0 1d	 btr	 eax, 29
  00628	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00630	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00637	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2146 :     dev->commadpt->sendcr_opt = 0;

  0063d	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00645	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0064c	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00652	0f ba f0 1e	 btr	 eax, 30
  00656	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0065e	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00665	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2147 :     dev->commadpt->binary_opt = 0;

  0066b	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00673	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0067a	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00680	0f ba f0 1f	 btr	 eax, 31
  00684	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0068c	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00693	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2148 :     dev->commadpt->crlf2cr_opt = 0;

  00699	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  006a1	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  006a8	8b 80 6c 01 00
	00		 mov	 eax, DWORD PTR [rax+364]
  006ae	83 e0 fe	 and	 eax, -2			; fffffffeH
  006b1	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  006b9	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  006c0	89 81 6c 01 00
	00		 mov	 DWORD PTR [rcx+364], eax

; 2149 :     dev->commadpt->eol_char = 0x0d;   // default is ascii CR

  006c6	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  006ce	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  006d5	c6 80 7b 03 00
	00 0d		 mov	 BYTE PTR [rax+891], 13

; 2150 :     memset(dev->commadpt->prepend_bytes, 0, sizeof(dev->commadpt->prepend_bytes));

  006dc	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  006e4	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  006eb	48 05 72 03 00
	00		 add	 rax, 882		; 00000372H
  006f1	48 8b f8	 mov	 rdi, rax
  006f4	33 c0		 xor	 eax, eax
  006f6	b9 04 00 00 00	 mov	 ecx, 4
  006fb	f3 aa		 rep stosb

; 2151 :     memset(dev->commadpt->append_bytes, 0, sizeof(dev->commadpt->append_bytes));

  006fd	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00705	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0070c	48 05 77 03 00
	00		 add	 rax, 887		; 00000377H
  00712	48 8b f8	 mov	 rdi, rax
  00715	33 c0		 xor	 eax, eax
  00717	b9 04 00 00 00	 mov	 ecx, 4
  0071c	f3 aa		 rep stosb

; 2152 :     etospec=0;

  0071e	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR etospec$[rsp], 0

; 2153 : 
; 2154 :     for(i=0;i<argc;i++)

  00729	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00731	eb 0a		 jmp	 SHORT $LN4@commadpt_i
$LN2@commadpt_i:
  00733	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  00737	ff c0		 inc	 eax
  00739	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN4@commadpt_i:
  0073d	8b 84 24 08 02
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  00744	39 44 24 70	 cmp	 DWORD PTR i$[rsp], eax
  00748	0f 8d ff 14 00
	00		 jge	 $LN3@commadpt_i

; 2155 :     {
; 2156 :         pc=parser(ptab,argv[i],&res);

  0074e	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00753	4c 8d 84 24 20
	01 00 00	 lea	 r8, QWORD PTR res$[rsp]
  0075b	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00763	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00767	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:ptab
  0076e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_parser
  00774	89 84 24 80 00
	00 00		 mov	 DWORD PTR pc$[rsp], eax

; 2157 :         if(pc<0)

  0077b	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR pc$[rsp], 0
  00783	0f 8d ea 00 00
	00		 jge	 $LN33@commadpt_i

; 2158 :         {
; 2159 :             WRMSG(HHC01012, "E",LCSS_DEVNUM,argv[i]);

  00789	48 83 bc 24 00
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00792	74 15		 je	 SHORT $LN164@commadpt_i
  00794	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0079c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  007a0	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv309[rsp], eax
  007a7	eb 0b		 jmp	 SHORT $LN165@commadpt_i
$LN164@commadpt_i:
  007a9	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv309[rsp], 0
$LN165@commadpt_i:
  007b4	48 83 bc 24 00
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  007bd	74 17		 je	 SHORT $LN166@commadpt_i
  007bf	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  007c7	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  007cb	d1 f8		 sar	 eax, 1
  007cd	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv315[rsp], eax
  007d4	eb 0b		 jmp	 SHORT $LN167@commadpt_i
$LN166@commadpt_i:
  007d6	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv315[rsp], 0
$LN167@commadpt_i:
  007e1	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  007e6	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv302[rsp], rax
  007ee	b9 01 00 00 00	 mov	 ecx, 1
  007f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007f9	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00801	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR tv302[rsp]
  00809	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  0080d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00812	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv309[rsp]
  00819	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0081d	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv315[rsp]
  00824	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00828	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160265
  0082f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00834	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160266
  0083b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00840	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00845	41 b9 03 00 00
	00		 mov	 r9d, 3
  0084b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160267
  00852	ba 6f 08 00 00	 mov	 edx, 2159		; 0000086fH
  00857	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160268
  0085e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2160 :             errcnt++;

  00864	8b 44 24 54	 mov	 eax, DWORD PTR errcnt$[rsp]
  00868	ff c0		 inc	 eax
  0086a	89 44 24 54	 mov	 DWORD PTR errcnt$[rsp], eax

; 2161 :             continue;

  0086e	e9 c0 fe ff ff	 jmp	 $LN2@commadpt_i
$LN33@commadpt_i:

; 2162 :         }
; 2163 :         if(pc==0)

  00873	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR pc$[rsp], 0
  0087b	0f 85 ea 00 00
	00		 jne	 $LN34@commadpt_i

; 2164 :         {
; 2165 :             WRMSG(HHC01012, "E",LCSS_DEVNUM,argv[i]);

  00881	48 83 bc 24 00
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0088a	74 15		 je	 SHORT $LN168@commadpt_i
  0088c	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00894	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00898	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv335[rsp], eax
  0089f	eb 0b		 jmp	 SHORT $LN169@commadpt_i
$LN168@commadpt_i:
  008a1	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv335[rsp], 0
$LN169@commadpt_i:
  008ac	48 83 bc 24 00
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  008b5	74 17		 je	 SHORT $LN170@commadpt_i
  008b7	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  008bf	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  008c3	d1 f8		 sar	 eax, 1
  008c5	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv341[rsp], eax
  008cc	eb 0b		 jmp	 SHORT $LN171@commadpt_i
$LN170@commadpt_i:
  008ce	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv341[rsp], 0
$LN171@commadpt_i:
  008d9	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  008de	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv328[rsp], rax
  008e6	b9 01 00 00 00	 mov	 ecx, 1
  008eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008f1	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  008f9	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR tv328[rsp]
  00901	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00905	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0090a	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR tv335[rsp]
  00911	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00915	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR tv341[rsp]
  0091c	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00920	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160270
  00927	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0092c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160271
  00933	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00938	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0093d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00943	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160272
  0094a	ba 75 08 00 00	 mov	 edx, 2165		; 00000875H
  0094f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160273
  00956	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2166 :             errcnt++;

  0095c	8b 44 24 54	 mov	 eax, DWORD PTR errcnt$[rsp]
  00960	ff c0		 inc	 eax
  00962	89 44 24 54	 mov	 DWORD PTR errcnt$[rsp], eax

; 2167 :             continue;

  00966	e9 c8 fd ff ff	 jmp	 $LN2@commadpt_i
$LN34@commadpt_i:

; 2168 :         }
; 2169 :         switch(pc)

  0096b	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR pc$[rsp]
  00972	89 44 24 74	 mov	 DWORD PTR tv353[rsp], eax
  00976	8b 44 24 74	 mov	 eax, DWORD PTR tv353[rsp]
  0097a	ff c8		 dec	 eax
  0097c	89 44 24 74	 mov	 DWORD PTR tv353[rsp], eax
  00980	83 7c 24 74 18	 cmp	 DWORD PTR tv353[rsp], 24
  00985	0f 87 bd 12 00
	00		 ja	 $LN121@commadpt_i
  0098b	48 63 44 24 74	 movsxd	 rax, DWORD PTR tv353[rsp]
  00990	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00997	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN198@commadpt_i[rcx+rax*4]
  0099e	48 03 c1	 add	 rax, rcx
  009a1	ff e0		 jmp	 rax
$LN35@commadpt_i:

; 2170 :         {
; 2171 :             case COMMADPT_KW_LPORT:
; 2172 :                 rc=commadpt_getport(res.text);

  009a3	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  009ab	e8 00 00 00 00	 call	 commadpt_getport
  009b0	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax

; 2173 :                 if(rc<0)

  009b4	83 7c 24 5c 00	 cmp	 DWORD PTR rc$[rsp], 0
  009b9	7d 2b		 jge	 SHORT $LN36@commadpt_i

; 2174 :                 {
; 2175 :                     errcnt++;

  009bb	8b 44 24 54	 mov	 eax, DWORD PTR errcnt$[rsp]
  009bf	ff c0		 inc	 eax
  009c1	89 44 24 54	 mov	 DWORD PTR errcnt$[rsp], eax

; 2176 :                     msg01007e(dev,"LPORT",res.text);

  009c5	4c 8d 84 24 20
	01 00 00	 lea	 r8, QWORD PTR res$[rsp]
  009cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160276
  009d4	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  009dc	e8 00 00 00 00	 call	 msg01007e

; 2177 :                     break;

  009e1	e9 62 12 00 00	 jmp	 $LN5@commadpt_i
$LN36@commadpt_i:

; 2178 :                 }
; 2179 :                 dev->commadpt->lport=rc;

  009e6	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  009ee	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  009f5	0f b7 4c 24 5c	 movzx	 ecx, WORD PTR rc$[rsp]
  009fa	66 89 48 3e	 mov	 WORD PTR [rax+62], cx

; 2180 :                 break;

  009fe	e9 45 12 00 00	 jmp	 $LN5@commadpt_i
$LN37@commadpt_i:

; 2181 :             case COMMADPT_KW_LHOST:
; 2182 :                 if(strcmp(res.text,"*")==0)

  00a03	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160279
  00a0a	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00a12	e8 00 00 00 00	 call	 strcmp
  00a17	85 c0		 test	 eax, eax
  00a19	75 1b		 jne	 SHORT $LN38@commadpt_i

; 2183 :                 {
; 2184 :                     dev->commadpt->lhost=INADDR_ANY;

  00a1b	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a23	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00a2a	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [rax+64], 0

; 2185 :                     break;

  00a31	e9 12 12 00 00	 jmp	 $LN5@commadpt_i
$LN38@commadpt_i:

; 2186 :                 }
; 2187 :                 rc=commadpt_getaddr(&dev->commadpt->lhost,res.text);

  00a36	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a3e	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00a45	48 83 c0 40	 add	 rax, 64			; 00000040H
  00a49	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR res$[rsp]
  00a51	48 8b c8	 mov	 rcx, rax
  00a54	e8 00 00 00 00	 call	 commadpt_getaddr
  00a59	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax

; 2188 :                 if(rc!=0)

  00a5d	83 7c 24 5c 00	 cmp	 DWORD PTR rc$[rsp], 0
  00a62	74 26		 je	 SHORT $LN39@commadpt_i

; 2189 :                 {
; 2190 :                     msg01007e(dev,"LHOST",res.text);

  00a64	4c 8d 84 24 20
	01 00 00	 lea	 r8, QWORD PTR res$[rsp]
  00a6c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160281
  00a73	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00a7b	e8 00 00 00 00	 call	 msg01007e

; 2191 :                     errcnt++;

  00a80	8b 44 24 54	 mov	 eax, DWORD PTR errcnt$[rsp]
  00a84	ff c0		 inc	 eax
  00a86	89 44 24 54	 mov	 DWORD PTR errcnt$[rsp], eax
$LN39@commadpt_i:

; 2192 :                 }
; 2193 :                 break;

  00a8a	e9 b9 11 00 00	 jmp	 $LN5@commadpt_i
$LN40@commadpt_i:

; 2194 :             case COMMADPT_KW_RPORT:
; 2195 :                 rc=commadpt_getport(res.text);

  00a8f	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00a97	e8 00 00 00 00	 call	 commadpt_getport
  00a9c	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax

; 2196 :                 if(rc<0)

  00aa0	83 7c 24 5c 00	 cmp	 DWORD PTR rc$[rsp], 0
  00aa5	7d 2b		 jge	 SHORT $LN41@commadpt_i

; 2197 :                 {
; 2198 :                     errcnt++;

  00aa7	8b 44 24 54	 mov	 eax, DWORD PTR errcnt$[rsp]
  00aab	ff c0		 inc	 eax
  00aad	89 44 24 54	 mov	 DWORD PTR errcnt$[rsp], eax

; 2199 :                     msg01007e(dev,"RPORT",res.text);

  00ab1	4c 8d 84 24 20
	01 00 00	 lea	 r8, QWORD PTR res$[rsp]
  00ab9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160284
  00ac0	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00ac8	e8 00 00 00 00	 call	 msg01007e

; 2200 :                     break;

  00acd	e9 76 11 00 00	 jmp	 $LN5@commadpt_i
$LN41@commadpt_i:

; 2201 :                 }
; 2202 :                 dev->commadpt->rport=rc;

  00ad2	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ada	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00ae1	0f b7 4c 24 5c	 movzx	 ecx, WORD PTR rc$[rsp]
  00ae6	66 89 48 44	 mov	 WORD PTR [rax+68], cx

; 2203 :                 break;

  00aea	e9 59 11 00 00	 jmp	 $LN5@commadpt_i
$LN42@commadpt_i:

; 2204 :             case COMMADPT_KW_RHOST:
; 2205 :                 if(strcmp(res.text,"*")==0)

  00aef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160287
  00af6	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00afe	e8 00 00 00 00	 call	 strcmp
  00b03	85 c0		 test	 eax, eax
  00b05	75 1b		 jne	 SHORT $LN43@commadpt_i

; 2206 :                 {
; 2207 :                     dev->commadpt->rhost=INADDR_NONE;

  00b07	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b0f	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00b16	c7 40 48 ff ff
	ff ff		 mov	 DWORD PTR [rax+72], -1	; ffffffffH

; 2208 :                     break;

  00b1d	e9 26 11 00 00	 jmp	 $LN5@commadpt_i
$LN43@commadpt_i:

; 2209 :                 }
; 2210 :                 rc=commadpt_getaddr(&dev->commadpt->rhost,res.text);

  00b22	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b2a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00b31	48 83 c0 48	 add	 rax, 72			; 00000048H
  00b35	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR res$[rsp]
  00b3d	48 8b c8	 mov	 rcx, rax
  00b40	e8 00 00 00 00	 call	 commadpt_getaddr
  00b45	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax

; 2211 :                 if(rc!=0)

  00b49	83 7c 24 5c 00	 cmp	 DWORD PTR rc$[rsp], 0
  00b4e	74 26		 je	 SHORT $LN44@commadpt_i

; 2212 :                 {
; 2213 :                     msg01007e(dev,"RHOST",res.text);

  00b50	4c 8d 84 24 20
	01 00 00	 lea	 r8, QWORD PTR res$[rsp]
  00b58	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160289
  00b5f	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00b67	e8 00 00 00 00	 call	 msg01007e

; 2214 :                     errcnt++;

  00b6c	8b 44 24 54	 mov	 eax, DWORD PTR errcnt$[rsp]
  00b70	ff c0		 inc	 eax
  00b72	89 44 24 54	 mov	 DWORD PTR errcnt$[rsp], eax
$LN44@commadpt_i:

; 2215 :                 }
; 2216 :                 break;

  00b76	e9 cd 10 00 00	 jmp	 $LN5@commadpt_i
$LN45@commadpt_i:

; 2217 :             case COMMADPT_KW_READTO:
; 2218 :                 dev->commadpt->rto=atoi(res.text);

  00b7b	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00b83	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00b89	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00b91	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00b98	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 2219 :                 break;

  00b9b	e9 a8 10 00 00	 jmp	 $LN5@commadpt_i
$LN46@commadpt_i:

; 2220 :             case COMMADPT_KW_POLLTO:
; 2221 :                 dev->commadpt->pto=atoi(res.text);

  00ba0	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00ba8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00bae	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00bb6	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00bbd	89 41 24	 mov	 DWORD PTR [rcx+36], eax

; 2222 :                 break;

  00bc0	e9 83 10 00 00	 jmp	 $LN5@commadpt_i
$LN47@commadpt_i:

; 2223 :             case COMMADPT_KW_ENABLETO:
; 2224 :                 dev->commadpt->eto=atoi(res.text);

  00bc5	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00bcd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00bd3	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00bdb	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00be2	89 41 28	 mov	 DWORD PTR [rcx+40], eax

; 2225 :                 etospec=1;

  00be5	c7 84 24 bc 00
	00 00 01 00 00
	00		 mov	 DWORD PTR etospec$[rsp], 1

; 2226 :                 break;

  00bf0	e9 53 10 00 00	 jmp	 $LN5@commadpt_i
$LN48@commadpt_i:

; 2227 :             case COMMADPT_KW_LNCTL:
; 2228 :                 if(strcasecmp(res.text,"tele2")==0
; 2229 :                 || strcasecmp(res.text,"ibm1")==0 )

  00bf5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160297
  00bfc	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00c04	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00c0a	85 c0		 test	 eax, eax
  00c0c	74 19		 je	 SHORT $LN51@commadpt_i
  00c0e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160298
  00c15	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00c1d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00c23	85 c0		 test	 eax, eax
  00c25	75 2b		 jne	 SHORT $LN49@commadpt_i
$LN51@commadpt_i:

; 2230 :                 {
; 2231 :                     dev->commadpt->lnctl = COMMADPT_LNCTL_ASYNC;

  00c27	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c2f	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00c36	c6 40 08 02	 mov	 BYTE PTR [rax+8], 2

; 2232 :                     dev->commadpt->rto=28000;        /* Read Time-Out in milis */

  00c3a	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c42	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00c49	c7 40 20 60 6d
	00 00		 mov	 DWORD PTR [rax+32], 28000 ; 00006d60H

; 2233 :                 }

  00c50	eb 4a		 jmp	 SHORT $LN50@commadpt_i
$LN49@commadpt_i:

; 2234 :                 else if(strcasecmp(res.text,"bsc")==0)

  00c52	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160301
  00c59	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00c61	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00c67	85 c0		 test	 eax, eax
  00c69	75 15		 jne	 SHORT $LN52@commadpt_i

; 2235 :                 {
; 2236 :                     dev->commadpt->lnctl = COMMADPT_LNCTL_BSC;

  00c6b	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c73	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00c7a	c6 40 08 01	 mov	 BYTE PTR [rax+8], 1

; 2237 :                 }

  00c7e	eb 1c		 jmp	 SHORT $LN53@commadpt_i
$LN52@commadpt_i:

; 2238 :                 else
; 2239 :                 {
; 2240 :                     msg01007e(dev,"LNCTL",res.text);

  00c80	4c 8d 84 24 20
	01 00 00	 lea	 r8, QWORD PTR res$[rsp]
  00c88	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160302
  00c8f	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00c97	e8 00 00 00 00	 call	 msg01007e
$LN53@commadpt_i:
$LN50@commadpt_i:

; 2241 :                 }
; 2242 :                 break;

  00c9c	e9 a7 0f 00 00	 jmp	 $LN5@commadpt_i
$LN54@commadpt_i:

; 2243 :             case COMMADPT_KW_TERM:
; 2244 :                 if(strcasecmp(res.text,"tty")==0)

  00ca1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160306
  00ca8	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00cb0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00cb6	85 c0		 test	 eax, eax
  00cb8	75 18		 jne	 SHORT $LN55@commadpt_i

; 2245 :                 {
; 2246 :                     dev->commadpt->term = COMMADPT_TERM_TTY;

  00cba	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00cc2	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00cc9	c6 40 09 00	 mov	 BYTE PTR [rax+9], 0

; 2247 :                 }

  00ccd	e9 a6 00 00 00	 jmp	 $LN56@commadpt_i
$LN55@commadpt_i:

; 2248 :                 else if(strcasecmp(res.text,"2741")==0)

  00cd2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160309
  00cd9	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00ce1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00ce7	85 c0		 test	 eax, eax
  00ce9	75 15		 jne	 SHORT $LN57@commadpt_i

; 2249 :                 {
; 2250 :                     dev->commadpt->term = COMMADPT_TERM_2741;

  00ceb	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00cf3	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00cfa	c6 40 09 01	 mov	 BYTE PTR [rax+9], 1

; 2251 :                 }

  00cfe	eb 78		 jmp	 SHORT $LN58@commadpt_i
$LN57@commadpt_i:

; 2252 :                 else if(strcasecmp(res.text,"rxvt4apl")==0)

  00d00	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160312
  00d07	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00d0f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00d15	85 c0		 test	 eax, eax
  00d17	75 43		 jne	 SHORT $LN59@commadpt_i

; 2253 :                 {
; 2254 :                     dev->commadpt->term = COMMADPT_TERM_2741;

  00d19	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00d21	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00d28	c6 40 09 01	 mov	 BYTE PTR [rax+9], 1

; 2255 :                     dev->commadpt->rxvt4apl = 1;

  00d2c	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00d34	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00d3b	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00d41	0f ba e8 1b	 bts	 eax, 27
  00d45	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00d4d	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00d54	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2256 :                 }

  00d5a	eb 1c		 jmp	 SHORT $LN60@commadpt_i
$LN59@commadpt_i:

; 2257 :                 else
; 2258 :                 {
; 2259 :                     msg01007e(dev,"TERM",res.text);

  00d5c	4c 8d 84 24 20
	01 00 00	 lea	 r8, QWORD PTR res$[rsp]
  00d64	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160313
  00d6b	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00d73	e8 00 00 00 00	 call	 msg01007e
$LN60@commadpt_i:
$LN58@commadpt_i:
$LN56@commadpt_i:

; 2260 :                 }
; 2261 :                 break;

  00d78	e9 cb 0e 00 00	 jmp	 $LN5@commadpt_i
$LN61@commadpt_i:

; 2262 :             case COMMADPT_KW_CODE:
; 2263 :                 if(strcasecmp(res.text,"corr")==0)

  00d7d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160317
  00d84	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00d8c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00d92	85 c0		 test	 eax, eax
  00d94	75 39		 jne	 SHORT $LN62@commadpt_i

; 2264 :                 {
; 2265 :                     dev->commadpt->code_table_toebcdic   = xlate_table_cc_toebcdic;

  00d96	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00d9e	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00da5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:xlate_table_cc_toebcdic
  00dac	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2266 :                     dev->commadpt->code_table_fromebcdic = xlate_table_cc_fromebcdic;

  00db0	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00db8	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00dbf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:xlate_table_cc_fromebcdic
  00dc6	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2267 :                 }

  00dca	e9 b4 00 00 00	 jmp	 $LN63@commadpt_i
$LN62@commadpt_i:

; 2268 :                 else if(strcasecmp(res.text,"ebcd")==0)

  00dcf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160320
  00dd6	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00dde	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00de4	85 c0		 test	 eax, eax
  00de6	75 36		 jne	 SHORT $LN64@commadpt_i

; 2269 :                 {
; 2270 :                     dev->commadpt->code_table_toebcdic   = xlate_table_ebcd_toebcdic;

  00de8	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00df0	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00df7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:xlate_table_ebcd_toebcdic
  00dfe	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2271 :                     dev->commadpt->code_table_fromebcdic = xlate_table_ebcd_fromebcdic;

  00e02	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e0a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00e11	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:xlate_table_ebcd_fromebcdic
  00e18	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2272 :                 }

  00e1c	eb 65		 jmp	 SHORT $LN65@commadpt_i
$LN64@commadpt_i:

; 2273 :                 else if(strcasecmp(res.text,"none")==0)

  00e1e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160323
  00e25	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00e2d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00e33	85 c0		 test	 eax, eax
  00e35	75 30		 jne	 SHORT $LN66@commadpt_i

; 2274 :                 {
; 2275 :                     dev->commadpt->code_table_toebcdic   = NULL;

  00e37	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e3f	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00e46	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 2276 :                     dev->commadpt->code_table_fromebcdic = NULL;

  00e4e	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e56	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00e5d	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 2277 :                 }

  00e65	eb 1c		 jmp	 SHORT $LN67@commadpt_i
$LN66@commadpt_i:

; 2278 :                 else
; 2279 :                 {
; 2280 :                     msg01007e(dev,"CODE",res.text);

  00e67	4c 8d 84 24 20
	01 00 00	 lea	 r8, QWORD PTR res$[rsp]
  00e6f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160324
  00e76	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00e7e	e8 00 00 00 00	 call	 msg01007e
$LN67@commadpt_i:
$LN65@commadpt_i:
$LN63@commadpt_i:

; 2281 :                 }
; 2282 :                 break;

  00e83	e9 c0 0d 00 00	 jmp	 $LN5@commadpt_i
$LN68@commadpt_i:

; 2283 :             case COMMADPT_KW_CRLF:
; 2284 :                 if(strcasecmp(res.text,"no")==0)

  00e88	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160328
  00e8f	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00e97	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00e9d	85 c0		 test	 eax, eax
  00e9f	75 30		 jne	 SHORT $LN69@commadpt_i

; 2285 :                 {
; 2286 :                     dev->commadpt->crlf_opt = FALSE;

  00ea1	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ea9	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00eb0	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00eb6	0f ba f0 1d	 btr	 eax, 29
  00eba	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00ec2	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00ec9	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2287 :                 }

  00ecf	eb 65		 jmp	 SHORT $LN70@commadpt_i
$LN69@commadpt_i:

; 2288 :                 else if(strcasecmp(res.text,"yes")==0)

  00ed1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160331
  00ed8	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00ee0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00ee6	85 c0		 test	 eax, eax
  00ee8	75 30		 jne	 SHORT $LN71@commadpt_i

; 2289 :                 {
; 2290 :                     dev->commadpt->crlf_opt = TRUE;

  00eea	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ef2	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00ef9	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00eff	0f ba e8 1d	 bts	 eax, 29
  00f03	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00f0b	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00f12	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2291 :                 }

  00f18	eb 1c		 jmp	 SHORT $LN72@commadpt_i
$LN71@commadpt_i:

; 2292 :                 else
; 2293 :                 {
; 2294 :                     msg01007e(dev,"CRLF",res.text);

  00f1a	4c 8d 84 24 20
	01 00 00	 lea	 r8, QWORD PTR res$[rsp]
  00f22	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160332
  00f29	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00f31	e8 00 00 00 00	 call	 msg01007e
$LN72@commadpt_i:
$LN70@commadpt_i:

; 2295 :                 }
; 2296 :                 break;

  00f36	e9 0d 0d 00 00	 jmp	 $LN5@commadpt_i
$LN73@commadpt_i:

; 2297 :             case COMMADPT_KW_SENDCR:
; 2298 :                 if(strcasecmp(res.text,"no")==0)

  00f3b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160336
  00f42	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00f4a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00f50	85 c0		 test	 eax, eax
  00f52	75 30		 jne	 SHORT $LN74@commadpt_i

; 2299 :                 {
; 2300 :                     dev->commadpt->sendcr_opt = FALSE;

  00f54	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f5c	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00f63	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00f69	0f ba f0 1e	 btr	 eax, 30
  00f6d	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00f75	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00f7c	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2301 :                 }

  00f82	eb 65		 jmp	 SHORT $LN75@commadpt_i
$LN74@commadpt_i:

; 2302 :                 else if(strcasecmp(res.text,"yes")==0)

  00f84	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160339
  00f8b	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00f93	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00f99	85 c0		 test	 eax, eax
  00f9b	75 30		 jne	 SHORT $LN76@commadpt_i

; 2303 :                 {
; 2304 :                     dev->commadpt->sendcr_opt = TRUE;

  00f9d	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00fa5	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00fac	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00fb2	0f ba e8 1e	 bts	 eax, 30
  00fb6	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00fbe	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00fc5	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2305 :                 }

  00fcb	eb 1c		 jmp	 SHORT $LN77@commadpt_i
$LN76@commadpt_i:

; 2306 :                 else
; 2307 :                 {
; 2308 :                     msg01007e(dev,"SENDCR",res.text);

  00fcd	4c 8d 84 24 20
	01 00 00	 lea	 r8, QWORD PTR res$[rsp]
  00fd5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160340
  00fdc	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00fe4	e8 00 00 00 00	 call	 msg01007e
$LN77@commadpt_i:
$LN75@commadpt_i:

; 2309 :                 }
; 2310 :                 break;

  00fe9	e9 5a 0c 00 00	 jmp	 $LN5@commadpt_i
$LN78@commadpt_i:

; 2311 :             case COMMADPT_KW_BINARY:
; 2312 :                 if(strcasecmp(res.text,"no")==0)

  00fee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160344
  00ff5	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  00ffd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  01003	85 c0		 test	 eax, eax
  01005	75 30		 jne	 SHORT $LN79@commadpt_i

; 2313 :                 {
; 2314 :                     dev->commadpt->binary_opt = FALSE;

  01007	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0100f	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01016	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0101c	0f ba f0 1f	 btr	 eax, 31
  01020	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01028	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  0102f	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2315 :                 }

  01035	eb 65		 jmp	 SHORT $LN80@commadpt_i
$LN79@commadpt_i:

; 2316 :                 else if(strcasecmp(res.text,"yes")==0)

  01037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160347
  0103e	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  01046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0104c	85 c0		 test	 eax, eax
  0104e	75 30		 jne	 SHORT $LN81@commadpt_i

; 2317 :                 {
; 2318 :                     dev->commadpt->binary_opt = TRUE;

  01050	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01058	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0105f	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01065	0f ba e8 1f	 bts	 eax, 31
  01069	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01071	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01078	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2319 :                 }

  0107e	eb 1c		 jmp	 SHORT $LN82@commadpt_i
$LN81@commadpt_i:

; 2320 :                 else
; 2321 :                 {
; 2322 :                     msg01007e(dev,"BINARY",res.text);

  01080	4c 8d 84 24 20
	01 00 00	 lea	 r8, QWORD PTR res$[rsp]
  01088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160348
  0108f	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01097	e8 00 00 00 00	 call	 msg01007e
$LN82@commadpt_i:
$LN80@commadpt_i:

; 2323 :                 }
; 2324 :                 break;

  0109c	e9 a7 0b 00 00	 jmp	 $LN5@commadpt_i
$LN83@commadpt_i:

; 2325 :             case COMMADPT_KW_UCTRANS:
; 2326 :                 if(strcasecmp(res.text,"no")==0)

  010a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160352
  010a8	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  010b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  010b6	85 c0		 test	 eax, eax
  010b8	75 30		 jne	 SHORT $LN84@commadpt_i

; 2327 :                 {
; 2328 :                     dev->commadpt->uctrans = FALSE;

  010ba	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  010c2	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  010c9	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  010cf	0f ba f0 17	 btr	 eax, 23
  010d3	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  010db	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  010e2	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2329 :                 }

  010e8	eb 65		 jmp	 SHORT $LN85@commadpt_i
$LN84@commadpt_i:

; 2330 :                 else if(strcasecmp(res.text,"yes")==0)

  010ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160355
  010f1	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  010f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  010ff	85 c0		 test	 eax, eax
  01101	75 30		 jne	 SHORT $LN86@commadpt_i

; 2331 :                 {
; 2332 :                     dev->commadpt->uctrans = TRUE;

  01103	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0110b	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01112	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01118	0f ba e8 17	 bts	 eax, 23
  0111c	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01124	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  0112b	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2333 :                 }

  01131	eb 1c		 jmp	 SHORT $LN87@commadpt_i
$LN86@commadpt_i:

; 2334 :                 else
; 2335 :                 {
; 2336 :                     msg01007e(dev,"UCTRANS",res.text);

  01133	4c 8d 84 24 20
	01 00 00	 lea	 r8, QWORD PTR res$[rsp]
  0113b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160356
  01142	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0114a	e8 00 00 00 00	 call	 msg01007e
$LN87@commadpt_i:
$LN85@commadpt_i:

; 2337 :                 }
; 2338 :                 break;

  0114f	e9 f4 0a 00 00	 jmp	 $LN5@commadpt_i
$LN88@commadpt_i:

; 2339 :             case COMMADPT_KW_EOL:
; 2340 :                 if  (strlen(res.text) < 2)

  01154	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  0115c	e8 00 00 00 00	 call	 strlen
  01161	48 83 f8 02	 cmp	 rax, 2
  01165	73 05		 jae	 SHORT $LN89@commadpt_i

; 2341 :                     break;

  01167	e9 dc 0a 00 00	 jmp	 $LN5@commadpt_i
$LN89@commadpt_i:

; 2342 :                 bf[0] = res.text[0];

  0116c	b8 01 00 00 00	 mov	 eax, 1
  01171	48 6b c0 00	 imul	 rax, rax, 0
  01175	b9 01 00 00 00	 mov	 ecx, 1
  0117a	48 6b c9 00	 imul	 rcx, rcx, 0
  0117e	0f b6 84 04 20
	01 00 00	 movzx	 eax, BYTE PTR res$[rsp+rax]
  01186	88 44 0c 58	 mov	 BYTE PTR bf$[rsp+rcx], al

; 2343 :                 bf[1] = res.text[1];

  0118a	b8 01 00 00 00	 mov	 eax, 1
  0118f	48 6b c0 01	 imul	 rax, rax, 1
  01193	b9 01 00 00 00	 mov	 ecx, 1
  01198	48 6b c9 01	 imul	 rcx, rcx, 1
  0119c	0f b6 84 04 20
	01 00 00	 movzx	 eax, BYTE PTR res$[rsp+rax]
  011a4	88 44 0c 58	 mov	 BYTE PTR bf$[rsp+rcx], al

; 2344 :                 bf[2] = 0;

  011a8	b8 01 00 00 00	 mov	 eax, 1
  011ad	48 6b c0 02	 imul	 rax, rax, 2
  011b1	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR $T4[rsp], rax
  011b9	48 83 bc 24 d8
	00 00 00 04	 cmp	 QWORD PTR $T4[rsp], 4
  011c2	73 02		 jae	 SHORT $LN172@commadpt_i
  011c4	eb 05		 jmp	 SHORT $LN173@commadpt_i
$LN172@commadpt_i:
  011c6	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN173@commadpt_i:
  011cb	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR $T4[rsp]
  011d3	c6 44 04 58 00	 mov	 BYTE PTR bf$[rsp+rax], 0

; 2345 :                 sscanf(bf, "%x", &ix);

  011d8	4c 8d 44 24 60	 lea	 r8, QWORD PTR ix$[rsp]
  011dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160359
  011e4	48 8d 4c 24 58	 lea	 rcx, QWORD PTR bf$[rsp]
  011e9	e8 00 00 00 00	 call	 sscanf

; 2346 :                 dev->commadpt->eol_char = ix;

  011ee	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  011f6	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  011fd	0f b6 4c 24 60	 movzx	 ecx, BYTE PTR ix$[rsp]
  01202	88 88 7b 03 00
	00		 mov	 BYTE PTR [rax+891], cl

; 2347 :                 break;

  01208	e9 3b 0a 00 00	 jmp	 $LN5@commadpt_i
$LN90@commadpt_i:

; 2348 :             case COMMADPT_KW_SKIP:
; 2349 :                 if  (strlen(res.text) < 2)

  0120d	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  01215	e8 00 00 00 00	 call	 strlen
  0121a	48 83 f8 02	 cmp	 rax, 2
  0121e	73 05		 jae	 SHORT $LN91@commadpt_i

; 2350 :                     break;

  01220	e9 23 0a 00 00	 jmp	 $LN5@commadpt_i
$LN91@commadpt_i:

; 2351 :                 for (j=0; j < (int)strlen(res.text); j+= 2)

  01225	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  0122d	eb 0b		 jmp	 SHORT $LN9@commadpt_i
$LN7@commadpt_i:
  0122f	8b 44 24 50	 mov	 eax, DWORD PTR j$[rsp]
  01233	83 c0 02	 add	 eax, 2
  01236	89 44 24 50	 mov	 DWORD PTR j$[rsp], eax
$LN9@commadpt_i:
  0123a	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  01242	e8 00 00 00 00	 call	 strlen
  01247	39 44 24 50	 cmp	 DWORD PTR j$[rsp], eax
  0124b	0f 8d 9f 00 00
	00		 jge	 $LN8@commadpt_i

; 2352 :                 {
; 2353 :                     bf[0] = res.text[j+0];

  01251	8b 44 24 50	 mov	 eax, DWORD PTR j$[rsp]
  01255	48 98		 cdqe
  01257	b9 01 00 00 00	 mov	 ecx, 1
  0125c	48 6b c9 00	 imul	 rcx, rcx, 0
  01260	0f b6 84 04 20
	01 00 00	 movzx	 eax, BYTE PTR res$[rsp+rax]
  01268	88 44 0c 58	 mov	 BYTE PTR bf$[rsp+rcx], al

; 2354 :                     bf[1] = res.text[j+1];

  0126c	8b 44 24 50	 mov	 eax, DWORD PTR j$[rsp]
  01270	ff c0		 inc	 eax
  01272	48 98		 cdqe
  01274	b9 01 00 00 00	 mov	 ecx, 1
  01279	48 6b c9 01	 imul	 rcx, rcx, 1
  0127d	0f b6 84 04 20
	01 00 00	 movzx	 eax, BYTE PTR res$[rsp+rax]
  01285	88 44 0c 58	 mov	 BYTE PTR bf$[rsp+rcx], al

; 2355 :                     bf[2] = 0;

  01289	b8 01 00 00 00	 mov	 eax, 1
  0128e	48 6b c0 02	 imul	 rax, rax, 2
  01292	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR $T5[rsp], rax
  0129a	48 83 bc 24 e0
	00 00 00 04	 cmp	 QWORD PTR $T5[rsp], 4
  012a3	73 02		 jae	 SHORT $LN174@commadpt_i
  012a5	eb 05		 jmp	 SHORT $LN175@commadpt_i
$LN174@commadpt_i:
  012a7	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN175@commadpt_i:
  012ac	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR $T5[rsp]
  012b4	c6 44 04 58 00	 mov	 BYTE PTR bf$[rsp+rax], 0

; 2356 :                     sscanf(bf, "%x", &ix);

  012b9	4c 8d 44 24 60	 lea	 r8, QWORD PTR ix$[rsp]
  012be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160362
  012c5	48 8d 4c 24 58	 lea	 rcx, QWORD PTR bf$[rsp]
  012ca	e8 00 00 00 00	 call	 sscanf

; 2357 :                     dev->commadpt->byte_skip_table[ix] = 1;

  012cf	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  012d7	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  012de	48 63 4c 24 60	 movsxd	 rcx, DWORD PTR ix$[rsp]
  012e3	c6 84 08 71 01
	00 00 01	 mov	 BYTE PTR [rax+rcx+369], 1

; 2358 :                 }

  012eb	e9 3f ff ff ff	 jmp	 $LN7@commadpt_i
$LN8@commadpt_i:

; 2359 :                 break;

  012f0	e9 53 09 00 00	 jmp	 $LN5@commadpt_i
$LN92@commadpt_i:

; 2360 :             case COMMADPT_KW_PREPEND:
; 2361 :                 if  (strlen(res.text) != 2 && strlen(res.text) != 4
; 2362 :                   && strlen(res.text) != 6 && strlen(res.text) != 8)

  012f5	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  012fd	e8 00 00 00 00	 call	 strlen
  01302	48 83 f8 02	 cmp	 rax, 2
  01306	74 3e		 je	 SHORT $LN93@commadpt_i
  01308	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  01310	e8 00 00 00 00	 call	 strlen
  01315	48 83 f8 04	 cmp	 rax, 4
  01319	74 2b		 je	 SHORT $LN93@commadpt_i
  0131b	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  01323	e8 00 00 00 00	 call	 strlen
  01328	48 83 f8 06	 cmp	 rax, 6
  0132c	74 18		 je	 SHORT $LN93@commadpt_i
  0132e	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  01336	e8 00 00 00 00	 call	 strlen
  0133b	48 83 f8 08	 cmp	 rax, 8
  0133f	74 05		 je	 SHORT $LN93@commadpt_i

; 2363 :                     break;

  01341	e9 02 09 00 00	 jmp	 $LN5@commadpt_i
$LN93@commadpt_i:

; 2364 :                 for (j=0; j < (int)strlen(res.text); j+= 2)

  01346	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  0134e	eb 0b		 jmp	 SHORT $LN12@commadpt_i
$LN10@commadpt_i:
  01350	8b 44 24 50	 mov	 eax, DWORD PTR j$[rsp]
  01354	83 c0 02	 add	 eax, 2
  01357	89 44 24 50	 mov	 DWORD PTR j$[rsp], eax
$LN12@commadpt_i:
  0135b	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  01363	e8 00 00 00 00	 call	 strlen
  01368	39 44 24 50	 cmp	 DWORD PTR j$[rsp], eax
  0136c	0f 8d a7 00 00
	00		 jge	 $LN11@commadpt_i

; 2365 :                 {
; 2366 :                     bf[0] = res.text[j+0];

  01372	8b 44 24 50	 mov	 eax, DWORD PTR j$[rsp]
  01376	48 98		 cdqe
  01378	b9 01 00 00 00	 mov	 ecx, 1
  0137d	48 6b c9 00	 imul	 rcx, rcx, 0
  01381	0f b6 84 04 20
	01 00 00	 movzx	 eax, BYTE PTR res$[rsp+rax]
  01389	88 44 0c 58	 mov	 BYTE PTR bf$[rsp+rcx], al

; 2367 :                     bf[1] = res.text[j+1];

  0138d	8b 44 24 50	 mov	 eax, DWORD PTR j$[rsp]
  01391	ff c0		 inc	 eax
  01393	48 98		 cdqe
  01395	b9 01 00 00 00	 mov	 ecx, 1
  0139a	48 6b c9 01	 imul	 rcx, rcx, 1
  0139e	0f b6 84 04 20
	01 00 00	 movzx	 eax, BYTE PTR res$[rsp+rax]
  013a6	88 44 0c 58	 mov	 BYTE PTR bf$[rsp+rcx], al

; 2368 :                     bf[2] = 0;

  013aa	b8 01 00 00 00	 mov	 eax, 1
  013af	48 6b c0 02	 imul	 rax, rax, 2
  013b3	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR $T6[rsp], rax
  013bb	48 83 bc 24 e8
	00 00 00 04	 cmp	 QWORD PTR $T6[rsp], 4
  013c4	73 02		 jae	 SHORT $LN176@commadpt_i
  013c6	eb 05		 jmp	 SHORT $LN177@commadpt_i
$LN176@commadpt_i:
  013c8	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN177@commadpt_i:
  013cd	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR $T6[rsp]
  013d5	c6 44 04 58 00	 mov	 BYTE PTR bf$[rsp+rax], 0

; 2369 :                     sscanf(bf, "%x", &ix);

  013da	4c 8d 44 24 60	 lea	 r8, QWORD PTR ix$[rsp]
  013df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160365
  013e6	48 8d 4c 24 58	 lea	 rcx, QWORD PTR bf$[rsp]
  013eb	e8 00 00 00 00	 call	 sscanf

; 2370 :                     dev->commadpt->prepend_bytes[j>>1] = ix;

  013f0	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  013f8	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  013ff	8b 4c 24 50	 mov	 ecx, DWORD PTR j$[rsp]
  01403	d1 f9		 sar	 ecx, 1
  01405	48 63 c9	 movsxd	 rcx, ecx
  01408	0f b6 54 24 60	 movzx	 edx, BYTE PTR ix$[rsp]
  0140d	88 94 08 72 03
	00 00		 mov	 BYTE PTR [rax+rcx+882], dl

; 2371 :                 }

  01414	e9 37 ff ff ff	 jmp	 $LN10@commadpt_i
$LN11@commadpt_i:

; 2372 :                 dev->commadpt->prepend_length = strlen(res.text) >> 1;

  01419	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  01421	e8 00 00 00 00	 call	 strlen
  01426	48 d1 e8	 shr	 rax, 1
  01429	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01431	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01438	88 81 71 03 00
	00		 mov	 BYTE PTR [rcx+881], al

; 2373 :                 break;

  0143e	e9 05 08 00 00	 jmp	 $LN5@commadpt_i
$LN94@commadpt_i:

; 2374 :             case COMMADPT_KW_APPEND:
; 2375 :                 if  (strlen(res.text) != 2 && strlen(res.text) != 4
; 2376 :                   && strlen(res.text) != 6 && strlen(res.text) != 8)

  01443	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  0144b	e8 00 00 00 00	 call	 strlen
  01450	48 83 f8 02	 cmp	 rax, 2
  01454	74 3e		 je	 SHORT $LN95@commadpt_i
  01456	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  0145e	e8 00 00 00 00	 call	 strlen
  01463	48 83 f8 04	 cmp	 rax, 4
  01467	74 2b		 je	 SHORT $LN95@commadpt_i
  01469	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  01471	e8 00 00 00 00	 call	 strlen
  01476	48 83 f8 06	 cmp	 rax, 6
  0147a	74 18		 je	 SHORT $LN95@commadpt_i
  0147c	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  01484	e8 00 00 00 00	 call	 strlen
  01489	48 83 f8 08	 cmp	 rax, 8
  0148d	74 05		 je	 SHORT $LN95@commadpt_i

; 2377 :                     break;

  0148f	e9 b4 07 00 00	 jmp	 $LN5@commadpt_i
$LN95@commadpt_i:

; 2378 :                 for (j=0; j < (int)strlen(res.text); j+= 2)

  01494	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  0149c	eb 0b		 jmp	 SHORT $LN15@commadpt_i
$LN13@commadpt_i:
  0149e	8b 44 24 50	 mov	 eax, DWORD PTR j$[rsp]
  014a2	83 c0 02	 add	 eax, 2
  014a5	89 44 24 50	 mov	 DWORD PTR j$[rsp], eax
$LN15@commadpt_i:
  014a9	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  014b1	e8 00 00 00 00	 call	 strlen
  014b6	39 44 24 50	 cmp	 DWORD PTR j$[rsp], eax
  014ba	0f 8d a7 00 00
	00		 jge	 $LN14@commadpt_i

; 2379 :                 {
; 2380 :                     bf[0] = res.text[j+0];

  014c0	8b 44 24 50	 mov	 eax, DWORD PTR j$[rsp]
  014c4	48 98		 cdqe
  014c6	b9 01 00 00 00	 mov	 ecx, 1
  014cb	48 6b c9 00	 imul	 rcx, rcx, 0
  014cf	0f b6 84 04 20
	01 00 00	 movzx	 eax, BYTE PTR res$[rsp+rax]
  014d7	88 44 0c 58	 mov	 BYTE PTR bf$[rsp+rcx], al

; 2381 :                     bf[1] = res.text[j+1];

  014db	8b 44 24 50	 mov	 eax, DWORD PTR j$[rsp]
  014df	ff c0		 inc	 eax
  014e1	48 98		 cdqe
  014e3	b9 01 00 00 00	 mov	 ecx, 1
  014e8	48 6b c9 01	 imul	 rcx, rcx, 1
  014ec	0f b6 84 04 20
	01 00 00	 movzx	 eax, BYTE PTR res$[rsp+rax]
  014f4	88 44 0c 58	 mov	 BYTE PTR bf$[rsp+rcx], al

; 2382 :                     bf[2] = 0;

  014f8	b8 01 00 00 00	 mov	 eax, 1
  014fd	48 6b c0 02	 imul	 rax, rax, 2
  01501	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR $T7[rsp], rax
  01509	48 83 bc 24 f0
	00 00 00 04	 cmp	 QWORD PTR $T7[rsp], 4
  01512	73 02		 jae	 SHORT $LN178@commadpt_i
  01514	eb 05		 jmp	 SHORT $LN179@commadpt_i
$LN178@commadpt_i:
  01516	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN179@commadpt_i:
  0151b	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR $T7[rsp]
  01523	c6 44 04 58 00	 mov	 BYTE PTR bf$[rsp+rax], 0

; 2383 :                     sscanf(bf, "%x", &ix);

  01528	4c 8d 44 24 60	 lea	 r8, QWORD PTR ix$[rsp]
  0152d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160368
  01534	48 8d 4c 24 58	 lea	 rcx, QWORD PTR bf$[rsp]
  01539	e8 00 00 00 00	 call	 sscanf

; 2384 :                     dev->commadpt->append_bytes[j>>1] = ix;

  0153e	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01546	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0154d	8b 4c 24 50	 mov	 ecx, DWORD PTR j$[rsp]
  01551	d1 f9		 sar	 ecx, 1
  01553	48 63 c9	 movsxd	 rcx, ecx
  01556	0f b6 54 24 60	 movzx	 edx, BYTE PTR ix$[rsp]
  0155b	88 94 08 77 03
	00 00		 mov	 BYTE PTR [rax+rcx+887], dl

; 2385 :                 }

  01562	e9 37 ff ff ff	 jmp	 $LN13@commadpt_i
$LN14@commadpt_i:

; 2386 :                 dev->commadpt->append_length = strlen(res.text) >> 1;

  01567	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  0156f	e8 00 00 00 00	 call	 strlen
  01574	48 d1 e8	 shr	 rax, 1
  01577	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0157f	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01586	88 81 76 03 00
	00		 mov	 BYTE PTR [rcx+886], al

; 2387 :                 break;

  0158c	e9 b7 06 00 00	 jmp	 $LN5@commadpt_i
$LN96@commadpt_i:

; 2388 :             case COMMADPT_KW_ISKIP:
; 2389 :                 if  (strlen(res.text) < 2)

  01591	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  01599	e8 00 00 00 00	 call	 strlen
  0159e	48 83 f8 02	 cmp	 rax, 2
  015a2	73 05		 jae	 SHORT $LN97@commadpt_i

; 2390 :                     break;

  015a4	e9 9f 06 00 00	 jmp	 $LN5@commadpt_i
$LN97@commadpt_i:

; 2391 :                 for (j=0; j < (int)strlen(res.text); j+= 2)

  015a9	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  015b1	eb 0b		 jmp	 SHORT $LN18@commadpt_i
$LN16@commadpt_i:
  015b3	8b 44 24 50	 mov	 eax, DWORD PTR j$[rsp]
  015b7	83 c0 02	 add	 eax, 2
  015ba	89 44 24 50	 mov	 DWORD PTR j$[rsp], eax
$LN18@commadpt_i:
  015be	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  015c6	e8 00 00 00 00	 call	 strlen
  015cb	39 44 24 50	 cmp	 DWORD PTR j$[rsp], eax
  015cf	0f 8d 9f 00 00
	00		 jge	 $LN17@commadpt_i

; 2392 :                 {
; 2393 :                     bf[0] = res.text[j+0];

  015d5	8b 44 24 50	 mov	 eax, DWORD PTR j$[rsp]
  015d9	48 98		 cdqe
  015db	b9 01 00 00 00	 mov	 ecx, 1
  015e0	48 6b c9 00	 imul	 rcx, rcx, 0
  015e4	0f b6 84 04 20
	01 00 00	 movzx	 eax, BYTE PTR res$[rsp+rax]
  015ec	88 44 0c 58	 mov	 BYTE PTR bf$[rsp+rcx], al

; 2394 :                     bf[1] = res.text[j+1];

  015f0	8b 44 24 50	 mov	 eax, DWORD PTR j$[rsp]
  015f4	ff c0		 inc	 eax
  015f6	48 98		 cdqe
  015f8	b9 01 00 00 00	 mov	 ecx, 1
  015fd	48 6b c9 01	 imul	 rcx, rcx, 1
  01601	0f b6 84 04 20
	01 00 00	 movzx	 eax, BYTE PTR res$[rsp+rax]
  01609	88 44 0c 58	 mov	 BYTE PTR bf$[rsp+rcx], al

; 2395 :                     bf[2] = 0;

  0160d	b8 01 00 00 00	 mov	 eax, 1
  01612	48 6b c0 02	 imul	 rax, rax, 2
  01616	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR $T8[rsp], rax
  0161e	48 83 bc 24 f8
	00 00 00 04	 cmp	 QWORD PTR $T8[rsp], 4
  01627	73 02		 jae	 SHORT $LN180@commadpt_i
  01629	eb 05		 jmp	 SHORT $LN181@commadpt_i
$LN180@commadpt_i:
  0162b	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN181@commadpt_i:
  01630	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR $T8[rsp]
  01638	c6 44 04 58 00	 mov	 BYTE PTR bf$[rsp+rax], 0

; 2396 :                     sscanf(bf, "%x", &ix);

  0163d	4c 8d 44 24 60	 lea	 r8, QWORD PTR ix$[rsp]
  01642	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160371
  01649	48 8d 4c 24 58	 lea	 rcx, QWORD PTR bf$[rsp]
  0164e	e8 00 00 00 00	 call	 sscanf

; 2397 :                     dev->commadpt->input_byte_skip_table[ix] = 1;

  01653	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0165b	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01662	48 63 4c 24 60	 movsxd	 rcx, DWORD PTR ix$[rsp]
  01667	c6 84 08 71 02
	00 00 01	 mov	 BYTE PTR [rax+rcx+625], 1

; 2398 :                 }

  0166f	e9 3f ff ff ff	 jmp	 $LN16@commadpt_i
$LN17@commadpt_i:

; 2399 :                 break;

  01674	e9 cf 05 00 00	 jmp	 $LN5@commadpt_i
$LN98@commadpt_i:

; 2400 :             case COMMADPT_KW_BS:
; 2401 :                 if(strcasecmp(res.text,"dumb")==0) {

  01679	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160374
  01680	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  01688	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0168e	85 c0		 test	 eax, eax
  01690	75 2e		 jne	 SHORT $LN99@commadpt_i

; 2402 :                     dev->commadpt->dumb_bs = 1;

  01692	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0169a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  016a1	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  016a7	0f ba e8 18	 bts	 eax, 24
  016ab	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  016b3	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  016ba	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax
$LN99@commadpt_i:

; 2403 :                 }
; 2404 :                 break;

  016c0	e9 83 05 00 00	 jmp	 $LN5@commadpt_i
$LN100@commadpt_i:

; 2405 :             case COMMADPT_KW_BREAK:
; 2406 :                 if(strcasecmp(res.text,"dumb")==0)

  016c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160377
  016cc	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  016d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  016da	85 c0		 test	 eax, eax
  016dc	75 2e		 jne	 SHORT $LN101@commadpt_i

; 2407 :                     dev->commadpt->dumb_break = 1;

  016de	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  016e6	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  016ed	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  016f3	0f ba e8 19	 bts	 eax, 25
  016f7	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  016ff	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01706	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax
$LN101@commadpt_i:

; 2408 :                 break;

  0170c	e9 37 05 00 00	 jmp	 $LN5@commadpt_i
$LN102@commadpt_i:
$LN103@commadpt_i:

; 2409 :             case COMMADPT_KW_SWITCHED:
; 2410 :             case COMMADPT_KW_DIAL:
; 2411 :                 if(strcasecmp(res.text,"yes")==0 || strcmp(res.text,"1")==0 || strcasecmp(res.text,"inout")==0)

  01711	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160382
  01718	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  01720	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  01726	85 c0		 test	 eax, eax
  01728	74 31		 je	 SHORT $LN105@commadpt_i
  0172a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160383
  01731	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  01739	e8 00 00 00 00	 call	 strcmp
  0173e	85 c0		 test	 eax, eax
  01740	74 19		 je	 SHORT $LN105@commadpt_i
  01742	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160384
  01749	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  01751	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  01757	85 c0		 test	 eax, eax
  01759	75 5f		 jne	 SHORT $LN104@commadpt_i
$LN105@commadpt_i:

; 2412 :                 {
; 2413 :                     dev->commadpt->dialin=1;

  0175b	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01763	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0176a	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01770	83 c8 08	 or	 eax, 8
  01773	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0177b	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01782	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2414 :                     dev->commadpt->dialout=1;

  01788	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01790	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01797	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0179d	83 c8 10	 or	 eax, 16
  017a0	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  017a8	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  017af	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2415 :                     break;

  017b5	e9 8e 04 00 00	 jmp	 $LN5@commadpt_i
$LN104@commadpt_i:

; 2416 :                 }
; 2417 :                 if(strcasecmp(res.text,"no")==0 || strcmp(res.text,"0")==0)

  017ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160387
  017c1	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  017c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  017cf	85 c0		 test	 eax, eax
  017d1	74 18		 je	 SHORT $LN107@commadpt_i
  017d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160388
  017da	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  017e2	e8 00 00 00 00	 call	 strcmp
  017e7	85 c0		 test	 eax, eax
  017e9	75 5f		 jne	 SHORT $LN106@commadpt_i
$LN107@commadpt_i:

; 2418 :                 {
; 2419 :                     dev->commadpt->dialin=0;

  017eb	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  017f3	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  017fa	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01800	83 e0 f7	 and	 eax, -9			; fffffff7H
  01803	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0180b	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01812	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2420 :                     dev->commadpt->dialout=0;

  01818	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01820	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01827	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0182d	83 e0 ef	 and	 eax, -17		; ffffffefH
  01830	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01838	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  0183f	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2421 :                     break;

  01845	e9 fe 03 00 00	 jmp	 $LN5@commadpt_i
$LN106@commadpt_i:

; 2422 :                 }
; 2423 :                 if(strcasecmp(res.text,"in")==0)

  0184a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160390
  01851	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  01859	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0185f	85 c0		 test	 eax, eax
  01861	75 5f		 jne	 SHORT $LN108@commadpt_i

; 2424 :                 {
; 2425 :                     dev->commadpt->dialin=1;

  01863	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0186b	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01872	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01878	83 c8 08	 or	 eax, 8
  0187b	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01883	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  0188a	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2426 :                     dev->commadpt->dialout=0;

  01890	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01898	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0189f	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  018a5	83 e0 ef	 and	 eax, -17		; ffffffefH
  018a8	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  018b0	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  018b7	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2427 :                     break;

  018bd	e9 86 03 00 00	 jmp	 $LN5@commadpt_i
$LN108@commadpt_i:

; 2428 :                 }
; 2429 :                 if(strcasecmp(res.text,"out")==0)

  018c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160392
  018c9	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  018d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  018d7	85 c0		 test	 eax, eax
  018d9	75 5f		 jne	 SHORT $LN109@commadpt_i

; 2430 :                 {
; 2431 :                     dev->commadpt->dialin=0;

  018db	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  018e3	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  018ea	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  018f0	83 e0 f7	 and	 eax, -9			; fffffff7H
  018f3	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  018fb	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01902	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2432 :                     dev->commadpt->dialout=1;

  01908	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01910	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01917	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0191d	83 c8 10	 or	 eax, 16
  01920	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01928	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  0192f	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2433 :                     break;

  01935	e9 0e 03 00 00	 jmp	 $LN5@commadpt_i
$LN109@commadpt_i:

; 2434 :                 }
; 2435 :                 WRMSG(HHC01013, "E",LCSS_DEVNUM,res.text);

  0193a	48 83 bc 24 00
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01943	74 15		 je	 SHORT $LN182@commadpt_i
  01945	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0194d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01951	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv903[rsp], eax
  01958	eb 0b		 jmp	 SHORT $LN183@commadpt_i
$LN182@commadpt_i:
  0195a	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv903[rsp], 0
$LN183@commadpt_i:
  01965	48 83 bc 24 00
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0196e	74 17		 je	 SHORT $LN184@commadpt_i
  01970	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01978	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0197c	d1 f8		 sar	 eax, 1
  0197e	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv909[rsp], eax
  01985	eb 0b		 jmp	 SHORT $LN185@commadpt_i
$LN184@commadpt_i:
  01987	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv909[rsp], 0
$LN185@commadpt_i:
  01992	b9 01 00 00 00	 mov	 ecx, 1
  01997	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0199d	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  019a5	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  019aa	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv903[rsp]
  019b1	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  019b5	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR tv909[rsp]
  019bc	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  019c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160393
  019c7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  019cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160394
  019d3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  019d8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  019dd	41 b9 03 00 00
	00		 mov	 r9d, 3
  019e3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160395
  019ea	ba 83 09 00 00	 mov	 edx, 2435		; 00000983H
  019ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160396
  019f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2436 :                 dev->commadpt->dialin=0;

  019fc	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01a04	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01a0b	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01a11	83 e0 f7	 and	 eax, -9			; fffffff7H
  01a14	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01a1c	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01a23	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2437 :                 dev->commadpt->dialout=0;

  01a29	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01a31	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01a38	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01a3e	83 e0 ef	 and	 eax, -17		; ffffffefH
  01a41	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01a49	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01a50	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2438 :                 break;

  01a56	e9 ed 01 00 00	 jmp	 $LN5@commadpt_i
$LN110@commadpt_i:

; 2439 :             case COMMADPT_KW_KA:
; 2440 :                 if(strcasecmp(res.text,"no")==0)

  01a5b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160400
  01a62	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  01a6a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  01a70	85 c0		 test	 eax, eax
  01a72	75 47		 jne	 SHORT $LN111@commadpt_i

; 2441 :                 {
; 2442 :                     dev->commadpt->kaidle=0;

  01a74	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01a7c	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01a83	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [rax+44], 0

; 2443 :                     dev->commadpt->kaintv=0;

  01a8a	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01a92	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01a99	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [rax+48], 0

; 2444 :                     dev->commadpt->kacnt=0;

  01aa0	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01aa8	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01aaf	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [rax+52], 0

; 2445 :                 }

  01ab6	e9 dc 00 00 00	 jmp	 $LN112@commadpt_i
$LN111@commadpt_i:

; 2446 :                 else
; 2447 :                 {
; 2448 :                     int idle=-1,intv=-1,cnt=-1;

  01abb	c7 84 24 84 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR idle$1[rsp], -1
  01ac6	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR intv$2[rsp], -1
  01ad1	c7 84 24 8c 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR cnt$3[rsp], -1

; 2449 :                     if (parse_conkpalv(res.text,&idle,&intv,&cnt)==0
; 2450 :                         || (idle==0 && intv==0 && cnt==0))

  01adc	4c 8d 8c 24 8c
	00 00 00	 lea	 r9, QWORD PTR cnt$3[rsp]
  01ae4	4c 8d 84 24 88
	00 00 00	 lea	 r8, QWORD PTR intv$2[rsp]
  01aec	48 8d 94 24 84
	00 00 00	 lea	 rdx, QWORD PTR idle$1[rsp]
  01af4	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  01afc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_parse_conkpalv
  01b02	85 c0		 test	 eax, eax
  01b04	74 1e		 je	 SHORT $LN115@commadpt_i
  01b06	83 bc 24 84 00
	00 00 00	 cmp	 DWORD PTR idle$1[rsp], 0
  01b0e	75 61		 jne	 SHORT $LN113@commadpt_i
  01b10	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR intv$2[rsp], 0
  01b18	75 57		 jne	 SHORT $LN113@commadpt_i
  01b1a	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR cnt$3[rsp], 0
  01b22	75 4d		 jne	 SHORT $LN113@commadpt_i
$LN115@commadpt_i:

; 2451 :                     {
; 2452 :                         dev->commadpt->kaidle = idle;

  01b24	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01b2c	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01b33	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR idle$1[rsp]
  01b3a	89 48 2c	 mov	 DWORD PTR [rax+44], ecx

; 2453 :                         dev->commadpt->kaintv = intv;

  01b3d	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01b45	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01b4c	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR intv$2[rsp]
  01b53	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 2454 :                         dev->commadpt->kacnt  = cnt;

  01b56	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01b5e	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01b65	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR cnt$3[rsp]
  01b6c	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 2455 :                     }

  01b6f	eb 26		 jmp	 SHORT $LN114@commadpt_i
$LN113@commadpt_i:

; 2456 :                     else
; 2457 :                     {
; 2458 :                         msg01007e(dev,"KA",res.text);

  01b71	4c 8d 84 24 20
	01 00 00	 lea	 r8, QWORD PTR res$[rsp]
  01b79	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160404
  01b80	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01b88	e8 00 00 00 00	 call	 msg01007e

; 2459 :                         errcnt++;

  01b8d	8b 44 24 54	 mov	 eax, DWORD PTR errcnt$[rsp]
  01b91	ff c0		 inc	 eax
  01b93	89 44 24 54	 mov	 DWORD PTR errcnt$[rsp], eax
$LN114@commadpt_i:
$LN112@commadpt_i:

; 2460 :                     }
; 2461 :                 }
; 2462 :                 break;

  01b97	e9 ac 00 00 00	 jmp	 $LN5@commadpt_i
$LN116@commadpt_i:

; 2463 :             case COMMADPT_KW_CRLF2CR:
; 2464 :                 if(strcasecmp(res.text,"no")==0)

  01b9c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160408
  01ba3	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  01bab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  01bb1	85 c0		 test	 eax, eax
  01bb3	75 2f		 jne	 SHORT $LN117@commadpt_i

; 2465 :                 {
; 2466 :                     dev->commadpt->crlf2cr_opt = FALSE;

  01bb5	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01bbd	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01bc4	8b 80 6c 01 00
	00		 mov	 eax, DWORD PTR [rax+364]
  01bca	83 e0 fe	 and	 eax, -2			; fffffffeH
  01bcd	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01bd5	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01bdc	89 81 6c 01 00
	00		 mov	 DWORD PTR [rcx+364], eax

; 2467 :                 }

  01be2	eb 64		 jmp	 SHORT $LN118@commadpt_i
$LN117@commadpt_i:

; 2468 :                 else if(strcasecmp(res.text,"yes")==0)

  01be4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160411
  01beb	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  01bf3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  01bf9	85 c0		 test	 eax, eax
  01bfb	75 2f		 jne	 SHORT $LN119@commadpt_i

; 2469 :                 {
; 2470 :                     dev->commadpt->crlf2cr_opt = TRUE;

  01bfd	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01c05	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01c0c	8b 80 6c 01 00
	00		 mov	 eax, DWORD PTR [rax+364]
  01c12	83 c8 01	 or	 eax, 1
  01c15	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01c1d	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01c24	89 81 6c 01 00
	00		 mov	 DWORD PTR [rcx+364], eax

; 2471 :                 }

  01c2a	eb 1c		 jmp	 SHORT $LN120@commadpt_i
$LN119@commadpt_i:

; 2472 :                 else
; 2473 :                 {
; 2474 :                     msg01007e(dev,"CRLF2CR",res.text);

  01c2c	4c 8d 84 24 20
	01 00 00	 lea	 r8, QWORD PTR res$[rsp]
  01c34	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160412
  01c3b	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01c43	e8 00 00 00 00	 call	 msg01007e
$LN120@commadpt_i:
$LN118@commadpt_i:
$LN121@commadpt_i:
$LN5@commadpt_i:

; 2475 :                 }
; 2476 :                 break;
; 2477 :             default:
; 2478 :                 break;
; 2479 :         }
; 2480 :     }

  01c48	e9 e6 ea ff ff	 jmp	 $LN2@commadpt_i
$LN3@commadpt_i:

; 2481 :     /*
; 2482 :      * Check parameters consistency
; 2483 :      * when DIAL=NO :
; 2484 :      *     lport must not be 0
; 2485 :      *     lhost may be anything
; 2486 :      *     rport must not be 0
; 2487 :      *     rhost must not be INADDR_NONE
; 2488 :      * when DIAL=IN or DIAL=INOUT
; 2489 :      *     lport must NOT be 0
; 2490 :      *     lhost may be anything
; 2491 :      *     rport MUST be 0
; 2492 :      *     rhost MUST be INADDR_NONE
; 2493 :      * when DIAL=OUT
; 2494 :      *     lport MUST be 0
; 2495 :      *     lhost MUST be INADDR_ANY
; 2496 :      *     rport MUST be 0
; 2497 :      *     rhost MUST be INADDR_NONE
; 2498 :     */
; 2499 :     switch(dev->commadpt->dialin+dev->commadpt->dialout*2)

  01c4d	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01c55	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01c5c	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01c62	c1 e8 03	 shr	 eax, 3
  01c65	83 e0 01	 and	 eax, 1
  01c68	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01c70	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01c77	8b 89 68 01 00
	00		 mov	 ecx, DWORD PTR [rcx+360]
  01c7d	c1 e9 04	 shr	 ecx, 4
  01c80	83 e1 01	 and	 ecx, 1
  01c83	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  01c86	89 44 24 78	 mov	 DWORD PTR tv992[rsp], eax
  01c8a	83 7c 24 78 00	 cmp	 DWORD PTR tv992[rsp], 0
  01c8f	74 17		 je	 SHORT $LN122@commadpt_i
  01c91	83 7c 24 78 01	 cmp	 DWORD PTR tv992[rsp], 1
  01c96	74 1e		 je	 SHORT $LN123@commadpt_i
  01c98	83 7c 24 78 02	 cmp	 DWORD PTR tv992[rsp], 2
  01c9d	74 25		 je	 SHORT $LN124@commadpt_i
  01c9f	83 7c 24 78 03	 cmp	 DWORD PTR tv992[rsp], 3
  01ca4	74 2c		 je	 SHORT $LN125@commadpt_i
  01ca6	eb 38		 jmp	 SHORT $LN126@commadpt_i
$LN122@commadpt_i:

; 2500 :     {
; 2501 :         case 0:
; 2502 :             dialt="NO";

  01ca8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160415
  01caf	48 89 44 24 68	 mov	 QWORD PTR dialt$[rsp], rax

; 2503 :             break;

  01cb4	eb 36		 jmp	 SHORT $LN19@commadpt_i
$LN123@commadpt_i:

; 2504 :         case 1:
; 2505 :             dialt="IN";

  01cb6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160417
  01cbd	48 89 44 24 68	 mov	 QWORD PTR dialt$[rsp], rax

; 2506 :             break;

  01cc2	eb 28		 jmp	 SHORT $LN19@commadpt_i
$LN124@commadpt_i:

; 2507 :         case 2:
; 2508 :             dialt="OUT";

  01cc4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160419
  01ccb	48 89 44 24 68	 mov	 QWORD PTR dialt$[rsp], rax

; 2509 :             break;

  01cd0	eb 1a		 jmp	 SHORT $LN19@commadpt_i
$LN125@commadpt_i:

; 2510 :         case 3:
; 2511 :             dialt="INOUT";

  01cd2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160421
  01cd9	48 89 44 24 68	 mov	 QWORD PTR dialt$[rsp], rax

; 2512 :             break;

  01cde	eb 0c		 jmp	 SHORT $LN19@commadpt_i
$LN126@commadpt_i:

; 2513 :         default:
; 2514 :             dialt="*ERR*";

  01ce0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160423
  01ce7	48 89 44 24 68	 mov	 QWORD PTR dialt$[rsp], rax
$LN19@commadpt_i:

; 2515 :             break;
; 2516 :     }
; 2517 :     switch(dev->commadpt->dialin+dev->commadpt->dialout*2)

  01cec	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01cf4	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01cfb	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01d01	c1 e8 03	 shr	 eax, 3
  01d04	83 e0 01	 and	 eax, 1
  01d07	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01d0f	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  01d16	8b 89 68 01 00
	00		 mov	 ecx, DWORD PTR [rcx+360]
  01d1c	c1 e9 04	 shr	 ecx, 4
  01d1f	83 e1 01	 and	 ecx, 1
  01d22	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  01d25	89 44 24 7c	 mov	 DWORD PTR tv1007[rsp], eax
  01d29	83 7c 24 7c 00	 cmp	 DWORD PTR tv1007[rsp], 0
  01d2e	74 26		 je	 SHORT $LN127@commadpt_i
  01d30	83 7c 24 7c 01	 cmp	 DWORD PTR tv1007[rsp], 1
  01d35	0f 84 5a 01 00
	00		 je	 $LN132@commadpt_i
  01d3b	83 7c 24 7c 02	 cmp	 DWORD PTR tv1007[rsp], 2
  01d40	0f 84 5d 02 00
	00		 je	 $LN137@commadpt_i
  01d46	83 7c 24 7c 03	 cmp	 DWORD PTR tv1007[rsp], 3
  01d4b	0f 84 44 01 00
	00		 je	 $LN133@commadpt_i
  01d51	e9 15 04 00 00	 jmp	 $LN21@commadpt_i
$LN127@commadpt_i:

; 2518 :     {
; 2519 :         case 0: /* DIAL = NO */
; 2520 :             dev->commadpt->eto=0;

  01d56	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01d5e	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01d65	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [rax+40], 0

; 2521 :             if(dev->commadpt->lport==0)

  01d6c	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01d74	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01d7b	0f b7 40 3e	 movzx	 eax, WORD PTR [rax+62]
  01d7f	85 c0		 test	 eax, eax
  01d81	75 23		 jne	 SHORT $LN128@commadpt_i

; 2522 :             {
; 2523 :                 msg01008e(dev,dialt,"LPORT");

  01d83	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160426
  01d8a	48 8b 54 24 68	 mov	 rdx, QWORD PTR dialt$[rsp]
  01d8f	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01d97	e8 00 00 00 00	 call	 msg01008e

; 2524 :                 errcnt++;

  01d9c	8b 44 24 54	 mov	 eax, DWORD PTR errcnt$[rsp]
  01da0	ff c0		 inc	 eax
  01da2	89 44 24 54	 mov	 DWORD PTR errcnt$[rsp], eax
$LN128@commadpt_i:

; 2525 :             }
; 2526 :             if(dev->commadpt->rport==0)

  01da6	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01dae	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01db5	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01db9	85 c0		 test	 eax, eax
  01dbb	75 23		 jne	 SHORT $LN129@commadpt_i

; 2527 :             {
; 2528 :                 msg01008e(dev,dialt,"RPORT");

  01dbd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160428
  01dc4	48 8b 54 24 68	 mov	 rdx, QWORD PTR dialt$[rsp]
  01dc9	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01dd1	e8 00 00 00 00	 call	 msg01008e

; 2529 :                 errcnt++;

  01dd6	8b 44 24 54	 mov	 eax, DWORD PTR errcnt$[rsp]
  01dda	ff c0		 inc	 eax
  01ddc	89 44 24 54	 mov	 DWORD PTR errcnt$[rsp], eax
$LN129@commadpt_i:

; 2530 :             }
; 2531 :             if(dev->commadpt->rhost==INADDR_NONE)

  01de0	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01de8	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01def	83 78 48 ff	 cmp	 DWORD PTR [rax+72], -1	; ffffffffH
  01df3	75 23		 jne	 SHORT $LN130@commadpt_i

; 2532 :             {
; 2533 :                 msg01008e(dev,dialt,"RHOST");

  01df5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160430
  01dfc	48 8b 54 24 68	 mov	 rdx, QWORD PTR dialt$[rsp]
  01e01	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01e09	e8 00 00 00 00	 call	 msg01008e

; 2534 :                 errcnt++;

  01e0e	8b 44 24 54	 mov	 eax, DWORD PTR errcnt$[rsp]
  01e12	ff c0		 inc	 eax
  01e14	89 44 24 54	 mov	 DWORD PTR errcnt$[rsp], eax
$LN130@commadpt_i:

; 2535 :             }
; 2536 :             if(etospec)

  01e18	83 bc 24 bc 00
	00 00 00	 cmp	 DWORD PTR etospec$[rsp], 0
  01e20	74 58		 je	 SHORT $LN131@commadpt_i

; 2537 :             {
; 2538 :                 MSGBUF(fmtbfr,"%d",dev->commadpt->eto);

  01e22	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01e2a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01e31	44 8b 48 28	 mov	 r9d, DWORD PTR [rax+40]
  01e35	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160432
  01e3c	ba 41 00 00 00	 mov	 edx, 65			; 00000041H
  01e41	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR fmtbfr$[rsp]
  01e49	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2539 :                 msg01009w(dev,dialt,"ETO",fmtbfr);

  01e4f	4c 8d 8c 24 70
	01 00 00	 lea	 r9, QWORD PTR fmtbfr$[rsp]
  01e57	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160433
  01e5e	48 8b 54 24 68	 mov	 rdx, QWORD PTR dialt$[rsp]
  01e63	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01e6b	e8 00 00 00 00	 call	 msg01009w

; 2540 :                 errcnt++;

  01e70	8b 44 24 54	 mov	 eax, DWORD PTR errcnt$[rsp]
  01e74	ff c0		 inc	 eax
  01e76	89 44 24 54	 mov	 DWORD PTR errcnt$[rsp], eax
$LN131@commadpt_i:

; 2541 :             }
; 2542 :             dev->commadpt->eto=0;

  01e7a	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01e82	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01e89	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [rax+40], 0

; 2543 :             break;

  01e90	e9 d6 02 00 00	 jmp	 $LN21@commadpt_i
$LN132@commadpt_i:
$LN133@commadpt_i:

; 2544 :         case 1: /* DIAL = IN */
; 2545 :         case 3: /* DIAL = INOUT */
; 2546 :             if(dev->commadpt->lport==0)

  01e95	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01e9d	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01ea4	0f b7 40 3e	 movzx	 eax, WORD PTR [rax+62]
  01ea8	85 c0		 test	 eax, eax
  01eaa	75 23		 jne	 SHORT $LN134@commadpt_i

; 2547 :             {
; 2548 :                 msg01008e(dev,dialt,"LPORT");

  01eac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160437
  01eb3	48 8b 54 24 68	 mov	 rdx, QWORD PTR dialt$[rsp]
  01eb8	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01ec0	e8 00 00 00 00	 call	 msg01008e

; 2549 :                 errcnt++;

  01ec5	8b 44 24 54	 mov	 eax, DWORD PTR errcnt$[rsp]
  01ec9	ff c0		 inc	 eax
  01ecb	89 44 24 54	 mov	 DWORD PTR errcnt$[rsp], eax
$LN134@commadpt_i:

; 2550 :             }
; 2551 :             if(dev->commadpt->rport!=0)

  01ecf	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01ed7	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01ede	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01ee2	85 c0		 test	 eax, eax
  01ee4	74 51		 je	 SHORT $LN135@commadpt_i

; 2552 :             {
; 2553 :                 MSGBUF(fmtbfr,"%d",dev->commadpt->rport);

  01ee6	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01eee	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01ef5	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01ef9	44 8b c8	 mov	 r9d, eax
  01efc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160439
  01f03	ba 41 00 00 00	 mov	 edx, 65			; 00000041H
  01f08	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR fmtbfr$[rsp]
  01f10	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2554 :                 msg01009w(dev,dialt,"RPORT",fmtbfr);

  01f16	4c 8d 8c 24 70
	01 00 00	 lea	 r9, QWORD PTR fmtbfr$[rsp]
  01f1e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160440
  01f25	48 8b 54 24 68	 mov	 rdx, QWORD PTR dialt$[rsp]
  01f2a	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01f32	e8 00 00 00 00	 call	 msg01009w
$LN135@commadpt_i:

; 2555 :             }
; 2556 :             if(dev->commadpt->rhost!=INADDR_NONE)

  01f37	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01f3f	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01f46	83 78 48 ff	 cmp	 DWORD PTR [rax+72], -1	; ffffffffH
  01f4a	74 52		 je	 SHORT $LN136@commadpt_i

; 2557 :             {
; 2558 :                 in_temp.s_addr=dev->commadpt->rhost;

  01f4c	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01f54	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01f5b	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01f5e	89 44 24 64	 mov	 DWORD PTR in_temp$[rsp], eax

; 2559 :                 msg01009w(dev,dialt,"RHOST",inet_ntoa(in_temp));

  01f62	8b 4c 24 64	 mov	 ecx, DWORD PTR in_temp$[rsp]
  01f66	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_ntoa
  01f6c	4c 8b c8	 mov	 r9, rax
  01f6f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160442
  01f76	48 8b 54 24 68	 mov	 rdx, QWORD PTR dialt$[rsp]
  01f7b	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01f83	e8 00 00 00 00	 call	 msg01009w

; 2560 :                 dev->commadpt->rhost=INADDR_NONE;

  01f88	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01f90	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01f97	c7 40 48 ff ff
	ff ff		 mov	 DWORD PTR [rax+72], -1	; ffffffffH
$LN136@commadpt_i:

; 2561 :             }
; 2562 :             break;

  01f9e	e9 c8 01 00 00	 jmp	 $LN21@commadpt_i
$LN137@commadpt_i:

; 2563 :         case 2: /* DIAL = OUT */
; 2564 :             if(dev->commadpt->lport!=0)

  01fa3	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01fab	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01fb2	0f b7 40 3e	 movzx	 eax, WORD PTR [rax+62]
  01fb6	85 c0		 test	 eax, eax
  01fb8	74 66		 je	 SHORT $LN138@commadpt_i

; 2565 :             {
; 2566 :                 MSGBUF(fmtbfr,"%d",dev->commadpt->lport);

  01fba	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01fc2	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  01fc9	0f b7 40 3e	 movzx	 eax, WORD PTR [rax+62]
  01fcd	44 8b c8	 mov	 r9d, eax
  01fd0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160445
  01fd7	ba 41 00 00 00	 mov	 edx, 65			; 00000041H
  01fdc	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR fmtbfr$[rsp]
  01fe4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2567 :                 msg01009w(dev,dialt,"LPORT",fmtbfr);

  01fea	4c 8d 8c 24 70
	01 00 00	 lea	 r9, QWORD PTR fmtbfr$[rsp]
  01ff2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160446
  01ff9	48 8b 54 24 68	 mov	 rdx, QWORD PTR dialt$[rsp]
  01ffe	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02006	e8 00 00 00 00	 call	 msg01009w

; 2568 :                 dev->commadpt->lport=0;

  0200b	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02013	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0201a	33 c9		 xor	 ecx, ecx
  0201c	66 89 48 3e	 mov	 WORD PTR [rax+62], cx
$LN138@commadpt_i:

; 2569 :             }
; 2570 :             if(dev->commadpt->rport!=0)

  02020	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02028	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0202f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02033	85 c0		 test	 eax, eax
  02035	74 66		 je	 SHORT $LN139@commadpt_i

; 2571 :             {
; 2572 :                 MSGBUF(fmtbfr,"%d",dev->commadpt->rport);

  02037	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0203f	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02046	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0204a	44 8b c8	 mov	 r9d, eax
  0204d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160448
  02054	ba 41 00 00 00	 mov	 edx, 65			; 00000041H
  02059	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR fmtbfr$[rsp]
  02061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2573 :                 msg01009w(dev,dialt,"RPORT",fmtbfr);

  02067	4c 8d 8c 24 70
	01 00 00	 lea	 r9, QWORD PTR fmtbfr$[rsp]
  0206f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160449
  02076	48 8b 54 24 68	 mov	 rdx, QWORD PTR dialt$[rsp]
  0207b	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02083	e8 00 00 00 00	 call	 msg01009w

; 2574 :                 dev->commadpt->rport=0;

  02088	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02090	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02097	33 c9		 xor	 ecx, ecx
  02099	66 89 48 44	 mov	 WORD PTR [rax+68], cx
$LN139@commadpt_i:

; 2575 :             }
; 2576 :             if(dev->commadpt->lhost!=INADDR_ANY)    /* Actually it's more like INADDR_NONE */

  0209d	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  020a5	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  020ac	83 78 40 00	 cmp	 DWORD PTR [rax+64], 0
  020b0	74 52		 je	 SHORT $LN140@commadpt_i

; 2577 :             {
; 2578 :                 in_temp.s_addr=dev->commadpt->lhost;

  020b2	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  020ba	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  020c1	8b 40 40	 mov	 eax, DWORD PTR [rax+64]
  020c4	89 44 24 64	 mov	 DWORD PTR in_temp$[rsp], eax

; 2579 :                 msg01009w(dev,dialt,"LHOST",inet_ntoa(in_temp));

  020c8	8b 4c 24 64	 mov	 ecx, DWORD PTR in_temp$[rsp]
  020cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_ntoa
  020d2	4c 8b c8	 mov	 r9, rax
  020d5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160451
  020dc	48 8b 54 24 68	 mov	 rdx, QWORD PTR dialt$[rsp]
  020e1	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  020e9	e8 00 00 00 00	 call	 msg01009w

; 2580 :                 dev->commadpt->lhost=INADDR_ANY;

  020ee	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  020f6	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  020fd	c7 40 40 00 00
	00 00		 mov	 DWORD PTR [rax+64], 0
$LN140@commadpt_i:

; 2581 :             }
; 2582 :             if(dev->commadpt->rhost!=INADDR_NONE)

  02104	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0210c	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02113	83 78 48 ff	 cmp	 DWORD PTR [rax+72], -1	; ffffffffH
  02117	74 52		 je	 SHORT $LN141@commadpt_i

; 2583 :             {
; 2584 :                 in_temp.s_addr=dev->commadpt->rhost;

  02119	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02121	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02128	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0212b	89 44 24 64	 mov	 DWORD PTR in_temp$[rsp], eax

; 2585 :                 msg01009w(dev,dialt,"RHOST",inet_ntoa(in_temp));

  0212f	8b 4c 24 64	 mov	 ecx, DWORD PTR in_temp$[rsp]
  02133	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_ntoa
  02139	4c 8b c8	 mov	 r9, rax
  0213c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160453
  02143	48 8b 54 24 68	 mov	 rdx, QWORD PTR dialt$[rsp]
  02148	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02150	e8 00 00 00 00	 call	 msg01009w

; 2586 :                 dev->commadpt->rhost=INADDR_NONE;

  02155	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0215d	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02164	c7 40 48 ff ff
	ff ff		 mov	 DWORD PTR [rax+72], -1	; ffffffffH
$LN141@commadpt_i:
$LN21@commadpt_i:

; 2587 :             }
; 2588 :             break;
; 2589 :     }
; 2590 :     if(errcnt>0)

  0216b	83 7c 24 54 00	 cmp	 DWORD PTR errcnt$[rsp], 0
  02170	0f 8e bf 00 00
	00		 jle	 $LN142@commadpt_i

; 2591 :     {
; 2592 :         WRMSG(HHC01014, "I",LCSS_DEVNUM);

  02176	48 83 bc 24 00
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0217f	74 15		 je	 SHORT $LN186@commadpt_i
  02181	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02189	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0218d	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv1183[rsp], eax
  02194	eb 0b		 jmp	 SHORT $LN187@commadpt_i
$LN186@commadpt_i:
  02196	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1183[rsp], 0
$LN187@commadpt_i:
  021a1	48 83 bc 24 00
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  021aa	74 17		 je	 SHORT $LN188@commadpt_i
  021ac	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  021b4	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  021b8	d1 f8		 sar	 eax, 1
  021ba	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv1189[rsp], eax
  021c1	eb 0b		 jmp	 SHORT $LN189@commadpt_i
$LN188@commadpt_i:
  021c3	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1189[rsp], 0
$LN189@commadpt_i:
  021ce	b9 01 00 00 00	 mov	 ecx, 1
  021d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  021d9	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR tv1183[rsp]
  021e0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  021e4	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR tv1189[rsp]
  021eb	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  021ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160455
  021f6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  021fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160456
  02202	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02207	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0220c	41 b9 03 00 00
	00		 mov	 r9d, 3
  02212	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160457
  02219	ba 20 0a 00 00	 mov	 edx, 2592		; 00000a20H
  0221e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160458
  02225	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2593 :         return -1;

  0222b	b8 ff ff ff ff	 mov	 eax, -1
  02230	e9 f2 07 00 00	 jmp	 $LN1@commadpt_i
$LN142@commadpt_i:

; 2594 :     }
; 2595 :     in_temp.s_addr=dev->commadpt->lhost;

  02235	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0223d	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02244	8b 40 40	 mov	 eax, DWORD PTR [rax+64]
  02247	89 44 24 64	 mov	 DWORD PTR in_temp$[rsp], eax

; 2596 :     in_temp.s_addr=dev->commadpt->rhost;

  0224b	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02253	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0225a	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0225d	89 44 24 64	 mov	 DWORD PTR in_temp$[rsp], eax

; 2597 :     dev->bufsize=256;

  02261	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02269	c7 80 d8 01 00
	00 00 01 00 00	 mov	 DWORD PTR [rax+472], 256 ; 00000100H

; 2598 :     dev->numsense=2;

  02273	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0227b	c7 80 60 03 00
	00 02 00 00 00	 mov	 DWORD PTR [rax+864], 2

; 2599 :     memset(dev->sense, 0, sizeof(dev->sense));

  02285	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0228d	48 05 64 03 00
	00		 add	 rax, 868		; 00000364H
  02293	48 8b f8	 mov	 rdi, rax
  02296	33 c0		 xor	 eax, eax
  02298	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  0229d	f3 aa		 rep stosb

; 2600 : 
; 2601 :     /* Initialise various flags & statuses */
; 2602 :     dev->commadpt->enabled=0;

  0229f	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  022a7	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  022ae	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  022b4	83 e0 fe	 and	 eax, -2			; fffffffeH
  022b7	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  022bf	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  022c6	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2603 :     dev->commadpt->connect=0;

  022cc	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  022d4	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  022db	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  022e1	83 e0 fd	 and	 eax, -3			; fffffffdH
  022e4	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  022ec	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  022f3	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2604 :     dev->fd=100;    /* Ensures 'close' function called */

  022f9	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02301	c7 80 ac 01 00
	00 64 00 00 00	 mov	 DWORD PTR [rax+428], 100 ; 00000064H

; 2605 :     dev->commadpt->devnum=dev->devnum;

  0230b	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02313	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0231a	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02322	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  02326	66 89 88 40 01
	00 00		 mov	 WORD PTR [rax+320], cx

; 2606 : 
; 2607 :     dev->commadpt->telnet_opt=0;

  0232d	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02335	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0233c	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02342	0f ba f0 13	 btr	 eax, 19
  02346	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0234e	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  02355	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2608 :     dev->commadpt->telnet_iac=0;

  0235b	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02363	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0236a	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02370	0f ba f0 14	 btr	 eax, 20
  02374	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0237c	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  02383	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2609 :     dev->commadpt->telnet_int=0;

  02389	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02391	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02398	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0239e	0f ba f0 15	 btr	 eax, 21
  023a2	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  023aa	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  023b1	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2610 :     dev->commadpt->eol_flag=0;

  023b7	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  023bf	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  023c6	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  023cc	0f ba f0 16	 btr	 eax, 22
  023d0	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  023d8	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  023df	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2611 :     dev->commadpt->telnet_cmd=0;

  023e5	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  023ed	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  023f4	c6 80 70 01 00
	00 00		 mov	 BYTE PTR [rax+368], 0

; 2612 : 
; 2613 :     dev->commadpt->haltpending=0;

  023fb	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02403	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0240a	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02410	0f ba f0 08	 btr	 eax, 8
  02414	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0241c	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  02423	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2614 :     dev->commadpt->haltprepare=0;

  02429	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02431	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02438	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0243e	0f ba f0 1a	 btr	 eax, 26
  02442	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0244a	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  02451	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2615 : 
; 2616 :     /* Initialize the device identifier bytes */
; 2617 :     dev->numdevid = sysblk.legacysenseid ? 7 : 0;

  02457	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0245e	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  02464	c1 e8 14	 shr	 eax, 20
  02467	83 e0 01	 and	 eax, 1
  0246a	85 c0		 test	 eax, eax
  0246c	74 0d		 je	 SHORT $LN190@commadpt_i
  0246e	c7 84 24 c8 00
	00 00 07 00 00
	00		 mov	 DWORD PTR tv1262[rsp], 7
  02479	eb 0b		 jmp	 SHORT $LN191@commadpt_i
$LN190@commadpt_i:
  0247b	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1262[rsp], 0
$LN191@commadpt_i:
  02486	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0248e	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR tv1262[rsp]
  02495	89 88 64 04 00
	00		 mov	 DWORD PTR [rax+1124], ecx

; 2618 :     dev->devid[0] = 0xFF;

  0249b	b8 01 00 00 00	 mov	 eax, 1
  024a0	48 6b c0 00	 imul	 rax, rax, 0
  024a4	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  024ac	c6 84 01 68 04
	00 00 ff	 mov	 BYTE PTR [rcx+rax+1128], 255 ; 000000ffH

; 2619 :     dev->devid[1] = dev->devtype >> 8;

  024b4	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  024bc	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  024c0	c1 f8 08	 sar	 eax, 8
  024c3	b9 01 00 00 00	 mov	 ecx, 1
  024c8	48 6b c9 01	 imul	 rcx, rcx, 1
  024cc	48 8b 94 24 00
	02 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  024d4	88 84 0a 68 04
	00 00		 mov	 BYTE PTR [rdx+rcx+1128], al

; 2620 :     dev->devid[2] = dev->devtype & 0xFF;

  024db	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  024e3	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  024e7	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  024ec	b9 01 00 00 00	 mov	 ecx, 1
  024f1	48 6b c9 02	 imul	 rcx, rcx, 2
  024f5	48 8b 94 24 00
	02 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  024fd	88 84 0a 68 04
	00 00		 mov	 BYTE PTR [rdx+rcx+1128], al

; 2621 :     dev->devid[3] = 0x00;

  02504	b8 01 00 00 00	 mov	 eax, 1
  02509	48 6b c0 03	 imul	 rax, rax, 3
  0250d	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02515	c6 84 01 68 04
	00 00 00	 mov	 BYTE PTR [rcx+rax+1128], 0

; 2622 :     dev->devid[4] = dev->devtype >> 8;

  0251d	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02525	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  02529	c1 f8 08	 sar	 eax, 8
  0252c	b9 01 00 00 00	 mov	 ecx, 1
  02531	48 6b c9 04	 imul	 rcx, rcx, 4
  02535	48 8b 94 24 00
	02 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0253d	88 84 0a 68 04
	00 00		 mov	 BYTE PTR [rdx+rcx+1128], al

; 2623 :     dev->devid[5] = dev->devtype & 0xFF;

  02544	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0254c	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  02550	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  02555	b9 01 00 00 00	 mov	 ecx, 1
  0255a	48 6b c9 05	 imul	 rcx, rcx, 5
  0255e	48 8b 94 24 00
	02 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  02566	88 84 0a 68 04
	00 00		 mov	 BYTE PTR [rdx+rcx+1128], al

; 2624 :     dev->devid[6] = 0x00;

  0256d	b8 01 00 00 00	 mov	 eax, 1
  02572	48 6b c0 06	 imul	 rax, rax, 6
  02576	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0257e	c6 84 01 68 04
	00 00 00	 mov	 BYTE PTR [rcx+rax+1128], 0

; 2625 : 
; 2626 :     /* Initialize the CA lock */
; 2627 :     initialize_lock(&dev->commadpt->lock);

  02586	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0258e	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02595	48 83 c0 68	 add	 rax, 104		; 00000068H
  02599	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160459
  025a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160460
  025a7	48 8b c8	 mov	 rcx, rax
  025aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_lock

; 2628 : 
; 2629 :     /* Initialise thread->I/O & halt initiation EVB */
; 2630 :     initialize_condition(&dev->commadpt->ipc);

  025b0	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  025b8	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  025bf	48 83 c0 58	 add	 rax, 88			; 00000058H
  025c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160461
  025ca	48 8b c8	 mov	 rcx, rax
  025cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_condition

; 2631 :     initialize_condition(&dev->commadpt->ipc_halt);

  025d3	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  025db	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  025e2	48 83 c0 60	 add	 rax, 96			; 00000060H
  025e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160462
  025ed	48 8b c8	 mov	 rcx, rax
  025f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_condition
$LN25@commadpt_i:

; 2632 : 
; 2633 :     /* Allocate I/O -> Thread signaling pipe */
; 2634 :     VERIFY(!create_pipe(dev->commadpt->pipe));

  025f6	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  025fe	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02605	48 83 c0 70	 add	 rax, 112		; 00000070H
  02609	4c 8b c8	 mov	 r9, rax
  0260c	45 33 c0	 xor	 r8d, r8d
  0260f	ba 01 00 00 00	 mov	 edx, 1
  02614	b9 02 00 00 00	 mov	 ecx, 2
  02619	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_socketpair
  0261f	85 c0		 test	 eax, eax
  02621	74 5c		 je	 SHORT $LN143@commadpt_i
$LN28@commadpt_i:
  02623	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160464
  0262a	41 b8 4a 0a 00
	00		 mov	 r8d, 2634		; 00000a4aH
  02630	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160465
  02637	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160466
  0263e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  02644	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0264a	85 c0		 test	 eax, eax
  0264c	74 20		 je	 SHORT $LN144@commadpt_i
  0264e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160468
  02655	41 b8 4a 0a 00
	00		 mov	 r8d, 2634		; 00000a4aH
  0265b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160469
  02662	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160470
  02669	e8 00 00 00 00	 call	 DebuggerTrace
$LN144@commadpt_i:
  0266e	33 c0		 xor	 eax, eax
  02670	85 c0		 test	 eax, eax
  02672	75 af		 jne	 SHORT $LN28@commadpt_i
  02674	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0267a	85 c0		 test	 eax, eax
  0267c	74 01		 je	 SHORT $LN145@commadpt_i
  0267e	cc		 int	 3
$LN145@commadpt_i:
$LN143@commadpt_i:
  0267f	33 c0		 xor	 eax, eax
  02681	85 c0		 test	 eax, eax
  02683	0f 85 6d ff ff
	ff		 jne	 $LN25@commadpt_i

; 2635 : 
; 2636 :     /* Obtain the CA lock */
; 2637 :     obtain_lock(&dev->commadpt->lock);

  02689	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02691	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02698	48 83 c0 68	 add	 rax, 104		; 00000068H
  0269c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160472
  026a3	48 8b c8	 mov	 rcx, rax
  026a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 2638 : 
; 2639 :     /* Indicate listen required if DIAL!=OUT */
; 2640 :     if(dev->commadpt->dialin ||

  026ac	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  026b4	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  026bb	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  026c1	c1 e8 03	 shr	 eax, 3
  026c4	83 e0 01	 and	 eax, 1
  026c7	85 c0		 test	 eax, eax
  026c9	75 3e		 jne	 SHORT $LN148@commadpt_i
  026cb	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  026d3	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  026da	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  026e0	c1 e8 03	 shr	 eax, 3
  026e3	83 e0 01	 and	 eax, 1
  026e6	85 c0		 test	 eax, eax
  026e8	75 4e		 jne	 SHORT $LN146@commadpt_i
  026ea	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  026f2	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  026f9	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  026ff	c1 e8 04	 shr	 eax, 4
  02702	83 e0 01	 and	 eax, 1
  02705	85 c0		 test	 eax, eax
  02707	75 2f		 jne	 SHORT $LN146@commadpt_i
$LN148@commadpt_i:

; 2641 :             (!dev->commadpt->dialin && !dev->commadpt->dialout))
; 2642 :     {
; 2643 :         dev->commadpt->dolisten=1;

  02709	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02711	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02718	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0271e	83 c8 40	 or	 eax, 64			; 00000040H
  02721	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02729	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  02730	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2644 :     }

  02736	eb 2d		 jmp	 SHORT $LN147@commadpt_i
$LN146@commadpt_i:

; 2645 :     else
; 2646 :     {
; 2647 :         dev->commadpt->dolisten=0;

  02738	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02740	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02747	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0274d	83 e0 bf	 and	 eax, -65		; ffffffbfH
  02750	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02758	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  0275f	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax
$LN147@commadpt_i:

; 2648 :     }
; 2649 : 
; 2650 :     /* Start the async worker thread */
; 2651 : 
; 2652 :     /* Set thread-name for debugging purposes */
; 2653 :     MSGBUF(thread_name, "commadpt %4.4X thread", dev->devnum);

  02765	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0276d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02771	44 8b c8	 mov	 r9d, eax
  02774	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160476
  0277b	ba 21 00 00 00	 mov	 edx, 33			; 00000021H
  02780	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR thread_name$[rsp]
  02788	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2654 :     thread_name[sizeof(thread_name)-1]=0;

  0278e	b8 01 00 00 00	 mov	 eax, 1
  02793	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  02797	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR $T9[rsp], rax
  0279f	48 83 bc 24 00
	01 00 00 21	 cmp	 QWORD PTR $T9[rsp], 33	; 00000021H
  027a8	73 02		 jae	 SHORT $LN192@commadpt_i
  027aa	eb 05		 jmp	 SHORT $LN193@commadpt_i
$LN192@commadpt_i:
  027ac	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN193@commadpt_i:
  027b1	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR $T9[rsp]
  027b9	c6 84 04 c0 01
	00 00 00	 mov	 BYTE PTR thread_name$[rsp+rax], 0

; 2655 : 
; 2656 :     dev->commadpt->curpending=COMMADPT_PEND_TINIT;

  027c1	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  027c9	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  027d0	c6 40 3c 08	 mov	 BYTE PTR [rax+60], 8

; 2657 :     rc = create_thread(&dev->commadpt->cthread,DETACHED,commadpt_thread,dev->commadpt,thread_name);

  027d4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  027db	48 05 88 10 00
	00		 add	 rax, 4232		; 00001088H
  027e1	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  027e9	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  027f0	48 83 c1 38	 add	 rcx, 56			; 00000038H
  027f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160477
  027fb	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  02800	48 8d 94 24 c0
	01 00 00	 lea	 rdx, QWORD PTR thread_name$[rsp]
  02808	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0280d	48 8b 94 24 00
	02 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  02815	4c 8b 8a 68 11
	00 00		 mov	 r9, QWORD PTR [rdx+4456]
  0281c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:commadpt_thread
  02823	48 8b d0	 mov	 rdx, rax
  02826	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  0282c	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax

; 2658 :     if(rc)

  02830	83 7c 24 5c 00	 cmp	 DWORD PTR rc$[rsp], 0
  02835	0f 84 93 00 00
	00		 je	 $LN149@commadpt_i

; 2659 :     {
; 2660 :         WRMSG(HHC00102, "E", strerror(rc));

  0283b	8b 4c 24 5c	 mov	 ecx, DWORD PTR rc$[rsp]
  0283f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  02845	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv1387[rsp], rax
  0284d	b9 01 00 00 00	 mov	 ecx, 1
  02852	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02858	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv1387[rsp]
  02860	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02865	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160479
  0286c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02871	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160480
  02878	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0287d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02882	41 b9 03 00 00
	00		 mov	 r9d, 3
  02888	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160481
  0288f	ba 64 0a 00 00	 mov	 edx, 2660		; 00000a64H
  02894	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160482
  0289b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2661 :         release_lock(&dev->commadpt->lock);

  028a1	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  028a9	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  028b0	48 83 c0 68	 add	 rax, 104		; 00000068H
  028b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160483
  028bb	48 8b c8	 mov	 rcx, rax
  028be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2662 :         return -1;

  028c4	b8 ff ff ff ff	 mov	 eax, -1
  028c9	e9 59 01 00 00	 jmp	 $LN1@commadpt_i
$LN149@commadpt_i:

; 2663 :     }
; 2664 :     commadpt_wait(dev);

  028ce	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  028d6	e8 00 00 00 00	 call	 commadpt_wait

; 2665 :     if(dev->commadpt->curpending!=COMMADPT_PEND_IDLE)

  028db	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  028e3	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  028ea	0f b6 40 3c	 movzx	 eax, BYTE PTR [rax+60]
  028ee	85 c0		 test	 eax, eax
  028f0	0f 84 df 00 00
	00		 je	 $LN150@commadpt_i

; 2666 :     {
; 2667 :         WRMSG(HHC01015, "E",LCSS_DEVNUM);

  028f6	48 83 bc 24 00
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  028ff	74 15		 je	 SHORT $LN194@commadpt_i
  02901	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02909	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0290d	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv1411[rsp], eax
  02914	eb 0b		 jmp	 SHORT $LN195@commadpt_i
$LN194@commadpt_i:
  02916	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1411[rsp], 0
$LN195@commadpt_i:
  02921	48 83 bc 24 00
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0292a	74 17		 je	 SHORT $LN196@commadpt_i
  0292c	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02934	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02938	d1 f8		 sar	 eax, 1
  0293a	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv1417[rsp], eax
  02941	eb 0b		 jmp	 SHORT $LN197@commadpt_i
$LN196@commadpt_i:
  02943	c7 84 24 d0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1417[rsp], 0
$LN197@commadpt_i:
  0294e	b9 01 00 00 00	 mov	 ecx, 1
  02953	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02959	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR tv1411[rsp]
  02960	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02964	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR tv1417[rsp]
  0296b	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0296f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160485
  02976	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0297b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160486
  02982	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02987	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0298c	41 b9 03 00 00
	00		 mov	 r9d, 3
  02992	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160487
  02999	ba 6b 0a 00 00	 mov	 edx, 2667		; 00000a6bH
  0299e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160488
  029a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2668 :         /* Release the CA lock */
; 2669 :         release_lock(&dev->commadpt->lock);

  029ab	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  029b3	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  029ba	48 83 c0 68	 add	 rax, 104		; 00000068H
  029be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160489
  029c5	48 8b c8	 mov	 rcx, rax
  029c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2670 :         return -1;

  029ce	b8 ff ff ff ff	 mov	 eax, -1
  029d3	eb 52		 jmp	 SHORT $LN1@commadpt_i
$LN150@commadpt_i:

; 2671 :     }
; 2672 :     dev->commadpt->have_cthread=1;

  029d5	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  029dd	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  029e4	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  029ea	83 c8 20	 or	 eax, 32			; 00000020H
  029ed	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  029f5	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  029fc	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2673 : 
; 2674 :     /* Release the CA lock */
; 2675 :     release_lock(&dev->commadpt->lock);

  02a02	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02a0a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  02a11	48 83 c0 68	 add	 rax, 104		; 00000068H
  02a15	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160490
  02a1c	48 8b c8	 mov	 rcx, rax
  02a1f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2676 :     /* Indicate succesfull completion */
; 2677 :     return 0;

  02a25	33 c0		 xor	 eax, eax
$LN1@commadpt_i:
$LN151@commadpt_i:

; 2678 : }

  02a27	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  02a2f	48 33 cc	 xor	 rcx, rsp
  02a32	e8 00 00 00 00	 call	 __security_check_cookie
  02a37	48 81 c4 f0 01
	00 00		 add	 rsp, 496		; 000001f0H
  02a3e	5f		 pop	 rdi
  02a3f	c3		 ret	 0
$LN198@commadpt_i:
  02a40	00 00 00 00	 DD	 $LN35@commadpt_i
  02a44	00 00 00 00	 DD	 $LN37@commadpt_i
  02a48	00 00 00 00	 DD	 $LN40@commadpt_i
  02a4c	00 00 00 00	 DD	 $LN42@commadpt_i
  02a50	00 00 00 00	 DD	 $LN103@commadpt_i
  02a54	00 00 00 00	 DD	 $LN45@commadpt_i
  02a58	00 00 00 00	 DD	 $LN46@commadpt_i
  02a5c	00 00 00 00	 DD	 $LN47@commadpt_i
  02a60	00 00 00 00	 DD	 $LN102@commadpt_i
  02a64	00 00 00 00	 DD	 $LN48@commadpt_i
  02a68	00 00 00 00	 DD	 $LN54@commadpt_i
  02a6c	00 00 00 00	 DD	 $LN61@commadpt_i
  02a70	00 00 00 00	 DD	 $LN83@commadpt_i
  02a74	00 00 00 00	 DD	 $LN90@commadpt_i
  02a78	00 00 00 00	 DD	 $LN96@commadpt_i
  02a7c	00 00 00 00	 DD	 $LN98@commadpt_i
  02a80	00 00 00 00	 DD	 $LN100@commadpt_i
  02a84	00 00 00 00	 DD	 $LN92@commadpt_i
  02a88	00 00 00 00	 DD	 $LN94@commadpt_i
  02a8c	00 00 00 00	 DD	 $LN88@commadpt_i
  02a90	00 00 00 00	 DD	 $LN68@commadpt_i
  02a94	00 00 00 00	 DD	 $LN73@commadpt_i
  02a98	00 00 00 00	 DD	 $LN78@commadpt_i
  02a9c	00 00 00 00	 DD	 $LN110@commadpt_i
  02aa0	00 00 00 00	 DD	 $LN116@commadpt_i
commadpt_init_handler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
tv70 = 96
tv76 = 100
tv90 = 104
tv128 = 108
dev$ = 128
dialt$ = 136
kw$ = 144
kv$ = 152
msg01009w PROC

; 2068 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 2069 :     // "%1d:%04X COMM: conflicting parameter: DIAL(%s) and %s=%s specified"
; 2070 :     WRMSG(HHC01009, "W",LCSS_DEVNUM,dialt,kw,kv);

  00018	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00021	74 12		 je	 SHORT $LN3@msg01009w
  00023	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0002b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0002f	89 44 24 60	 mov	 DWORD PTR tv70[rsp], eax
  00033	eb 08		 jmp	 SHORT $LN4@msg01009w
$LN3@msg01009w:
  00035	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
$LN4@msg01009w:
  0003d	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00046	74 14		 je	 SHORT $LN5@msg01009w
  00048	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00050	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00054	d1 f8		 sar	 eax, 1
  00056	89 44 24 64	 mov	 DWORD PTR tv76[rsp], eax
  0005a	eb 08		 jmp	 SHORT $LN6@msg01009w
$LN5@msg01009w:
  0005c	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv76[rsp], 0
$LN6@msg01009w:
  00064	b9 01 00 00 00	 mov	 ecx, 1
  00069	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0006f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR kv$[rsp]
  00077	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0007c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR kw$[rsp]
  00084	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00089	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dialt$[rsp]
  00091	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00096	8b 4c 24 60	 mov	 ecx, DWORD PTR tv70[rsp]
  0009a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0009e	8b 4c 24 64	 mov	 ecx, DWORD PTR tv76[rsp]
  000a2	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160170
  000ad	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160171
  000b9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000be	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c3	41 b9 03 00 00
	00		 mov	 r9d, 3
  000c9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160172
  000d0	ba 16 08 00 00	 mov	 edx, 2070		; 00000816H
  000d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160173
  000dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2071 :     // "%1d:%04X COMM: RPORT parameter ignored"
; 2072 :     WRMSG(HHC01010, "I",LCSS_DEVNUM);

  000e2	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000eb	74 12		 je	 SHORT $LN7@msg01009w
  000ed	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000f5	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  000f9	89 44 24 68	 mov	 DWORD PTR tv90[rsp], eax
  000fd	eb 08		 jmp	 SHORT $LN8@msg01009w
$LN7@msg01009w:
  000ff	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv90[rsp], 0
$LN8@msg01009w:
  00107	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00110	74 14		 je	 SHORT $LN9@msg01009w
  00112	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0011a	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0011e	d1 f8		 sar	 eax, 1
  00120	89 44 24 6c	 mov	 DWORD PTR tv128[rsp], eax
  00124	eb 08		 jmp	 SHORT $LN10@msg01009w
$LN9@msg01009w:
  00126	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv128[rsp], 0
$LN10@msg01009w:
  0012e	b9 01 00 00 00	 mov	 ecx, 1
  00133	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00139	8b 4c 24 68	 mov	 ecx, DWORD PTR tv90[rsp]
  0013d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00141	8b 4c 24 6c	 mov	 ecx, DWORD PTR tv128[rsp]
  00145	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00149	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160174
  00150	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00155	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160175
  0015c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00161	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00166	41 b9 03 00 00
	00		 mov	 r9d, 3
  0016c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160176
  00173	ba 18 08 00 00	 mov	 edx, 2072		; 00000818H
  00178	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160177
  0017f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2073 : }

  00185	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00189	c3		 ret	 0
msg01009w ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
tv69 = 96
tv75 = 100
dev$ = 128
dialt$ = 136
kw$ = 144
msg01008e PROC

; 2063 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 2064 :     // "%1d:%04X COMM: missing parameter: DIAL(%s) and %s not specified"
; 2065 :     WRMSG(HHC01008, "E",LCSS_DEVNUM,dialt,kw);

  00013	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0001c	74 12		 je	 SHORT $LN3@msg01008e
  0001e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00026	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0002a	89 44 24 60	 mov	 DWORD PTR tv69[rsp], eax
  0002e	eb 08		 jmp	 SHORT $LN4@msg01008e
$LN3@msg01008e:
  00030	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv69[rsp], 0
$LN4@msg01008e:
  00038	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00041	74 14		 je	 SHORT $LN5@msg01008e
  00043	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0004b	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0004f	d1 f8		 sar	 eax, 1
  00051	89 44 24 64	 mov	 DWORD PTR tv75[rsp], eax
  00055	eb 08		 jmp	 SHORT $LN6@msg01008e
$LN5@msg01008e:
  00057	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN6@msg01008e:
  0005f	b9 01 00 00 00	 mov	 ecx, 1
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0006a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR kw$[rsp]
  00072	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00077	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dialt$[rsp]
  0007f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00084	8b 4c 24 60	 mov	 ecx, DWORD PTR tv69[rsp]
  00088	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0008c	8b 4c 24 64	 mov	 ecx, DWORD PTR tv75[rsp]
  00090	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160156
  0009b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160157
  000a7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000ac	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b1	41 b9 03 00 00
	00		 mov	 r9d, 3
  000b7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160158
  000be	ba 11 08 00 00	 mov	 edx, 2065		; 00000811H
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160159
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2066 : }

  000d0	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000d4	c3		 ret	 0
msg01008e ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
tv69 = 96
tv75 = 100
dev$ = 128
kw$ = 136
kv$ = 144
msg01007e PROC

; 2058 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 2059 :     // "%1d:%04X COMM: option %s value %s invalid"
; 2060 :     WRMSG(HHC01007, "E",LCSS_DEVNUM,kw,kv);

  00013	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0001c	74 12		 je	 SHORT $LN3@msg01007e
  0001e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00026	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0002a	89 44 24 60	 mov	 DWORD PTR tv69[rsp], eax
  0002e	eb 08		 jmp	 SHORT $LN4@msg01007e
$LN3@msg01007e:
  00030	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv69[rsp], 0
$LN4@msg01007e:
  00038	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00041	74 14		 je	 SHORT $LN5@msg01007e
  00043	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0004b	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0004f	d1 f8		 sar	 eax, 1
  00051	89 44 24 64	 mov	 DWORD PTR tv75[rsp], eax
  00055	eb 08		 jmp	 SHORT $LN6@msg01007e
$LN5@msg01007e:
  00057	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN6@msg01007e:
  0005f	b9 01 00 00 00	 mov	 ecx, 1
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0006a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR kv$[rsp]
  00072	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00077	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR kw$[rsp]
  0007f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00084	8b 4c 24 60	 mov	 ecx, DWORD PTR tv69[rsp]
  00088	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0008c	8b 4c 24 64	 mov	 ecx, DWORD PTR tv75[rsp]
  00090	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160144
  0009b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160145
  000a7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000ac	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b1	41 b9 03 00 00
	00		 mov	 r9d, 3
  000b7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160146
  000be	ba 0c 08 00 00	 mov	 edx, 2060		; 0000080cH
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160147
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2061 : }

  000d0	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000d4	c3		 ret	 0
msg01007e ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
dev$ = 48
commadpt_halt_or_clear PROC

; 2031 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2032 :     if (dev->busy)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  0000e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00014	c1 e8 13	 shr	 eax, 19
  00017	83 e0 01	 and	 eax, 1
  0001a	85 c0		 test	 eax, eax
  0001c	0f 84 ab 00 00
	00		 je	 $LN2@commadpt_h

; 2033 :     {
; 2034 :         obtain_lock( &dev->commadpt->lock );

  00022	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  00027	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  0002e	48 83 c0 68	 add	 rax, 104		; 00000068H
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160133
  00039	48 8b c8	 mov	 rcx, rax
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 2035 :         {
; 2036 :             commadpt_wakeup( dev->commadpt, 1 );

  00042	b2 01		 mov	 dl, 1
  00044	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  00049	48 8b 88 68 11
	00 00		 mov	 rcx, QWORD PTR [rax+4456]
  00050	e8 00 00 00 00	 call	 commadpt_wakeup

; 2037 : 
; 2038 :             /* Due to the mysteries of the host OS scheduling */
; 2039 :             /* the wait_condition may or may not exit after   */
; 2040 :             /* the CCW executor thread relinquishes control   */
; 2041 :             /* This however should not be of any concern      */
; 2042 :             /*                                                */
; 2043 :             /* but returning from the wait guarantees that    */
; 2044 :             /* the working thread will (or has) notified      */
; 2045 :             /* the CCW executor to terminate the current I/O  */
; 2046 : 
; 2047 :             wait_condition( &dev->commadpt->ipc_halt, &dev->commadpt->lock );

  00055	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  0005a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00061	48 83 c0 68	 add	 rax, 104		; 00000068H
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  0006a	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00071	48 83 c1 60	 add	 rcx, 96			; 00000060H
  00075	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160134
  0007c	48 8b d0	 mov	 rdx, rax
  0007f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_wait_condition

; 2048 :             dev->commadpt->haltprepare = 1; /* part of APL\360 2741 race cond I circumvention */

  00085	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  0008a	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00091	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00097	0f ba e8 1a	 bts	 eax, 26
  0009b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  000a0	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  000a7	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 2049 :         }
; 2050 :         release_lock( &dev->commadpt->lock );

  000ad	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  000b2	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  000b9	48 83 c0 68	 add	 rax, 104		; 00000068H
  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160135
  000c4	48 8b c8	 mov	 rcx, rax
  000c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock
$LN2@commadpt_h:

; 2051 :     }
; 2052 : }

  000cd	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000d1	c3		 ret	 0
commadpt_halt_or_clear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
ca$ = 32
dev$ = 64
commadpt_wait PROC

; 2021 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2022 :     COMMADPT *ca;
; 2023 :     ca=dev->commadpt;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0000e	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00015	48 89 44 24 20	 mov	 QWORD PTR ca$[rsp], rax

; 2024 :     wait_condition(&ca->ipc,&ca->lock);

  0001a	48 8b 44 24 20	 mov	 rax, QWORD PTR ca$[rsp]
  0001f	48 83 c0 68	 add	 rax, 104		; 00000068H
  00023	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ca$[rsp]
  00028	48 83 c1 58	 add	 rcx, 88			; 00000058H
  0002c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160127
  00033	48 8b d0	 mov	 rdx, rax
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_wait_condition

; 2025 : }

  0003c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00040	c3		 ret	 0
commadpt_wait ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
ca$ = 48
code$ = 56
commadpt_wakeup PROC

; 2012 : {

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@commadpt_w:

; 2013 :     VERIFY(1 == write_pipe(ca->pipe[1],&code,1));

  0000d	b8 04 00 00 00	 mov	 eax, 4
  00012	48 6b c0 01	 imul	 rax, rax, 1
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ca$[rsp]
  0001b	48 63 44 01 70	 movsxd	 rax, DWORD PTR [rcx+rax+112]
  00020	45 33 c9	 xor	 r9d, r9d
  00023	41 b8 01 00 00
	00		 mov	 r8d, 1
  00029	48 8d 54 24 38	 lea	 rdx, QWORD PTR code$[rsp]
  0002e	48 8b c8	 mov	 rcx, rax
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_send
  00037	83 f8 01	 cmp	 eax, 1
  0003a	74 5c		 je	 SHORT $LN8@commadpt_w
$LN7@commadpt_w:
  0003c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160114
  00043	41 b8 dd 07 00
	00		 mov	 r8d, 2013		; 000007ddH
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160115
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160116
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00063	85 c0		 test	 eax, eax
  00065	74 20		 je	 SHORT $LN9@commadpt_w
  00067	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG160118
  0006e	41 b8 dd 07 00
	00		 mov	 r8d, 2013		; 000007ddH
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160119
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160120
  00082	e8 00 00 00 00	 call	 DebuggerTrace
$LN9@commadpt_w:
  00087	33 c0		 xor	 eax, eax
  00089	85 c0		 test	 eax, eax
  0008b	75 af		 jne	 SHORT $LN7@commadpt_w
  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00093	85 c0		 test	 eax, eax
  00095	74 01		 je	 SHORT $LN10@commadpt_w
  00097	cc		 int	 3
$LN10@commadpt_w:
$LN8@commadpt_w:
  00098	33 c0		 xor	 eax, eax
  0009a	85 c0		 test	 eax, eax
  0009c	0f 85 6b ff ff
	ff		 jne	 $LN4@commadpt_w

; 2014 : }

  000a2	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000a6	c3		 ret	 0
commadpt_wakeup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
ca$ = 96
b$ = 104
maxfd$ = 108
devnum$ = 112
rc$ = 116
pipecom$ = 120
ca_shutdown$ = 124
tempfd$ = 128
pollact$ = 132
writecont$ = 136
dopoll$1 = 140
init_signaled$ = 144
tv437 = 148
i$ = 152
tv1081 = 156
tv1142 = 160
tv$ = 168
seltv$ = 176
tv409 = 184
tv471 = 188
gotenq$2 = 192
tv574 = 196
tv621 = 200
tv638 = 204
tv674 = 208
tv691 = 212
tv720 = 216
tv797 = 220
tv817 = 224
sockopt$ = 228
tv195 = 232
tv201 = 236
tv356 = 240
tv373 = 244
tv379 = 248
tv424 = 252
tv539 = 256
tv587 = 260
tv590 = 264
tv595 = 268
tv837 = 272
tv866 = 276
tv892 = 280
tv913 = 284
tv957 = 288
tv973 = 292
tv979 = 296
tv991 = 300
tv1064 = 304
tv1129 = 308
soerrsz$ = 312
soerr$ = 316
tv1175 = 320
tv1220 = 324
tv1316 = 328
tv1321 = 332
tv84 = 336
tv89 = 340
tv153 = 344
tv145 = 352
tv312 = 360
tv1332 = 368
tv416 = 376
tv1336 = 384
tv828 = 392
tv883 = 400
tv1163 = 408
tv1337 = 416
tv1167 = 424
sin$ = 432
rfd$ = 448
wfd$ = 8656
xfd$ = 16864
threadname$ = 25072
__$ArrayPad$ = 25112
vca$ = 25136
commadpt_thread PROC

; 1271 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	b8 28 62 00 00	 mov	 eax, 25128		; 00006228H
  0000a	e8 00 00 00 00	 call	 __chkstk
  0000f	48 2b e0	 sub	 rsp, rax
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 84 24 18
	62 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1272 :     COMMADPT    *ca;            /* Work CA Control Block Pointer     */
; 1273 :     int        sockopt;         /* Used for setsocketoption          */
; 1274 :     struct sockaddr_in sin;     /* bind socket address structure     */
; 1275 :     int devnum;                 /* device number copy for convenience*/
; 1276 :     int rc;                     /* return code from various rtns     */
; 1277 :     struct timeval tv;          /* select timeout structure          */
; 1278 :     struct timeval *seltv;      /* ptr to the timeout structure      */
; 1279 :     fd_set      rfd,wfd,xfd;    /* SELECT File Descriptor Sets       */
; 1280 :     BYTE        pipecom;        /* Byte read from IPC pipe           */
; 1281 :     int tempfd;                 /* Temporary FileDesc holder         */
; 1282 :     BYTE b;                     /* Work data byte                    */
; 1283 :     int writecont;              /* Write contention active           */
; 1284 :     int soerr;                  /* getsockopt SOERROR value          */
; 1285 :     socklen_t   soerrsz;        /* Size for getsockopt               */
; 1286 :     int maxfd;                  /* highest FD for select             */
; 1287 :     int ca_shutdown;            /* Thread shutdown internal flag     */
; 1288 :     int init_signaled;          /* Thread initialisation signaled    */
; 1289 :     int pollact;                /* A Poll Command is in progress     */
; 1290 :     int i;                      /* Ye Old Loop Counter               */
; 1291 :     char threadname[40];
; 1292 : 
; 1293 :     /*---------------------END OF DECLARES---------------------------*/
; 1294 : 
; 1295 :     /* fetch the commadpt structure */
; 1296 :     ca=(COMMADPT *)vca;

  00024	48 8b 84 24 30
	62 00 00	 mov	 rax, QWORD PTR vca$[rsp]
  0002c	48 89 44 24 60	 mov	 QWORD PTR ca$[rsp], rax

; 1297 : 
; 1298 :     /* Obtain the CA lock */
; 1299 :     obtain_lock(&ca->lock);

  00031	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00036	48 83 c0 68	 add	 rax, 104		; 00000068H
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159865
  00041	48 8b c8	 mov	 rcx, rax
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 1300 : 
; 1301 :     /* get a work copy of devnum (for messages) */
; 1302 :     devnum=ca->devnum;

  0004a	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0004f	0f b7 80 40 01
	00 00		 movzx	 eax, WORD PTR [rax+320]
  00056	89 44 24 70	 mov	 DWORD PTR devnum$[rsp], eax

; 1303 : 
; 1304 :     /* reset shutdown flag */
; 1305 :     ca_shutdown=0;

  0005a	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR ca_shutdown$[rsp], 0

; 1306 : 
; 1307 :     init_signaled=0;

  00062	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR init_signaled$[rsp], 0

; 1308 : 
; 1309 :     /* Set server thread priority; ignore any errors */
; 1310 :     set_thread_priority( sysblk.srvprio);

  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fthread_self
  00073	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159866
  0007a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00081	8b 91 74 13 00
	00		 mov	 edx, DWORD PTR [rcx+4980]
  00087	8b c8		 mov	 ecx, eax
  00089	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_set_thread_prio

; 1311 : 
; 1312 :     MSGBUF(threadname, "%1d:%04X communication thread", SSID_TO_LCSS(ca->dev->ssid), devnum);

  0008f	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00094	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00097	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0009b	d1 f8		 sar	 eax, 1
  0009d	8b 4c 24 70	 mov	 ecx, DWORD PTR devnum$[rsp]
  000a1	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000a5	44 8b c8	 mov	 r9d, eax
  000a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159867
  000af	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  000b4	48 8d 8c 24 f0
	61 00 00	 lea	 rcx, QWORD PTR threadname$[rsp]
  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1313 :     LOG_THREAD_BEGIN( threadname );

  000c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fthread_self
  000c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159868
  000cf	8b c8		 mov	 ecx, eax
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_get_thread_prio
  000d7	89 84 24 50 01
	00 00		 mov	 DWORD PTR tv84[rsp], eax
  000de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fthread_self
  000e4	89 84 24 54 01
	00 00		 mov	 DWORD PTR tv89[rsp], eax
  000eb	b9 01 00 00 00	 mov	 ecx, 1
  000f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000f6	48 8d 8c 24 f0
	61 00 00	 lea	 rcx, QWORD PTR threadname$[rsp]
  000fe	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00103	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR tv84[rsp]
  0010a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0010e	8b 8c 24 54 01
	00 00		 mov	 ecx, DWORD PTR tv89[rsp]
  00115	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00119	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159869
  00120	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00125	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159870
  0012c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00131	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00136	41 b9 03 00 00
	00		 mov	 r9d, 3
  0013c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159871
  00143	ba 21 05 00 00	 mov	 edx, 1313		; 00000521H
  00148	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159872
  0014f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1314 : 
; 1315 :     pollact=0;  /* Initialise Poll activity flag */

  00155	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR pollact$[rsp], 0

; 1316 : 
; 1317 :     /* Determine if we should listen */
; 1318 :     /* if this is a DIAL=OUT only line, no listen is necessary */
; 1319 :     if(ca->dolisten)

  00160	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00165	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0016b	c1 e8 06	 shr	 eax, 6
  0016e	83 e0 01	 and	 eax, 1
  00171	85 c0		 test	 eax, eax
  00173	0f 84 1c 06 00
	00		 je	 $LN27@commadpt_t

; 1320 :     {
; 1321 :         /* Create the socket for a listen */
; 1322 :         ca->lfd=socket(AF_INET,SOCK_STREAM,0);

  00179	45 33 c0	 xor	 r8d, r8d
  0017c	ba 01 00 00 00	 mov	 edx, 1
  00181	b9 02 00 00 00	 mov	 ecx, 2
  00186	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_socket
  0018c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  00191	89 41 50	 mov	 DWORD PTR [rcx+80], eax

; 1323 :         if(!socket_is_socket(ca->lfd))

  00194	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00199	8b 48 50	 mov	 ecx, DWORD PTR [rax+80]
  0019c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_socket_is_socket
  001a2	85 c0		 test	 eax, eax
  001a4	0f 85 cb 00 00
	00		 jne	 $LN28@commadpt_t

; 1324 :         {
; 1325 :             WRMSG(HHC01002, "E",SSID_TO_LCSS(ca->dev->ssid),devnum,strerror(HSO_errno));

  001aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  001b0	8b c8		 mov	 ecx, eax
  001b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  001b8	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv145[rsp], rax
  001c0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  001c5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001c8	0f b7 49 44	 movzx	 ecx, WORD PTR [rcx+68]
  001cc	d1 f9		 sar	 ecx, 1
  001ce	89 8c 24 58 01
	00 00		 mov	 DWORD PTR tv153[rsp], ecx
  001d5	b9 01 00 00 00	 mov	 ecx, 1
  001da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001e0	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR tv145[rsp]
  001e8	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  001ed	8b 4c 24 70	 mov	 ecx, DWORD PTR devnum$[rsp]
  001f1	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001f5	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR tv153[rsp]
  001fc	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00200	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159875
  00207	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0020c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159876
  00213	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00218	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0021d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00223	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159877
  0022a	ba 2d 05 00 00	 mov	 edx, 1325		; 0000052dH
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159878
  00236	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1326 :             ca->have_cthread=0;

  0023c	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00241	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00247	83 e0 df	 and	 eax, -33		; ffffffdfH
  0024a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  0024f	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 1327 :             release_lock(&ca->lock);

  00255	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0025a	48 83 c0 68	 add	 rax, 104		; 00000068H
  0025e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159879
  00265	48 8b c8	 mov	 rcx, rax
  00268	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 1328 :             return NULL;

  0026e	33 c0		 xor	 eax, eax
  00270	e9 c9 1f 00 00	 jmp	 $LN1@commadpt_t
$LN28@commadpt_t:

; 1329 :         }
; 1330 :         /* Turn blocking I/O off */
; 1331 :         /* set socket to NON-blocking mode */
; 1332 :         socket_set_blocking_mode(ca->lfd,0);

  00275	33 d2		 xor	 edx, edx
  00277	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0027c	8b 48 50	 mov	 ecx, DWORD PTR [rax+80]
  0027f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_socket_set_blocking_mode

; 1333 : 
; 1334 :         /* Reuse the address regardless of any */
; 1335 :         /* spurious connection on that port    */
; 1336 :         sockopt=1;

  00285	c7 84 24 e4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR sockopt$[rsp], 1

; 1337 :         setsockopt(ca->lfd,SOL_SOCKET,SO_REUSEADDR,(GETSET_SOCKOPT_T*)&sockopt,sizeof(sockopt));

  00290	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00295	48 63 40 50	 movsxd	 rax, DWORD PTR [rax+80]
  00299	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  002a1	4c 8d 8c 24 e4
	00 00 00	 lea	 r9, QWORD PTR sockopt$[rsp]
  002a9	41 b8 04 00 00
	00		 mov	 r8d, 4
  002af	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  002b4	48 8b c8	 mov	 rcx, rax
  002b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setsockopt

; 1338 : 
; 1339 :         /* Bind the socket */
; 1340 :         sin.sin_family=AF_INET;

  002bd	b8 02 00 00 00	 mov	 eax, 2
  002c2	66 89 84 24 b0
	01 00 00	 mov	 WORD PTR sin$[rsp], ax

; 1341 :         sin.sin_addr.s_addr=ca->lhost;

  002ca	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  002cf	8b 40 40	 mov	 eax, DWORD PTR [rax+64]
  002d2	89 84 24 b4 01
	00 00		 mov	 DWORD PTR sin$[rsp+4], eax

; 1342 :         sin.sin_port=htons(ca->lport);

  002d9	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  002de	0f b7 48 3e	 movzx	 ecx, WORD PTR [rax+62]
  002e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_htons
  002e8	66 89 84 24 b2
	01 00 00	 mov	 WORD PTR sin$[rsp+2], ax
$LN2@commadpt_t:

; 1343 :         while(1)

  002f0	33 c0		 xor	 eax, eax
  002f2	83 f8 01	 cmp	 eax, 1
  002f5	0f 84 d4 03 00
	00		 je	 $LN3@commadpt_t

; 1344 :         {
; 1345 :             rc=bind(ca->lfd,(struct sockaddr *)&sin,sizeof(sin));

  002fb	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00300	48 63 40 50	 movsxd	 rax, DWORD PTR [rax+80]
  00304	41 b8 10 00 00
	00		 mov	 r8d, 16
  0030a	48 8d 94 24 b0
	01 00 00	 lea	 rdx, QWORD PTR sin$[rsp]
  00312	48 8b c8	 mov	 rcx, rax
  00315	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_bind
  0031b	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 1346 :             if(rc<0)

  0031f	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  00324	0f 8d 9e 03 00
	00		 jge	 $LN29@commadpt_t

; 1347 :             {
; 1348 :                 if(HSO_errno==HSO_EADDRINUSE)

  0032a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00330	3d 40 27 00 00	 cmp	 eax, 10048		; 00002740H
  00335	0f 85 e3 02 00
	00		 jne	 $LN31@commadpt_t

; 1349 :                 {
; 1350 :                     WRMSG(HHC01003, "W",SSID_TO_LCSS(ca->dev->ssid),devnum,ca->lport);

  0033b	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00340	0f b7 40 3e	 movzx	 eax, WORD PTR [rax+62]
  00344	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv195[rsp], eax
  0034b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  00350	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00353	0f b7 49 44	 movzx	 ecx, WORD PTR [rcx+68]
  00357	d1 f9		 sar	 ecx, 1
  00359	89 8c 24 ec 00
	00 00		 mov	 DWORD PTR tv201[rsp], ecx
  00360	b9 01 00 00 00	 mov	 ecx, 1
  00365	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0036b	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR tv195[rsp]
  00372	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00376	8b 4c 24 70	 mov	 ecx, DWORD PTR devnum$[rsp]
  0037a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0037e	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR tv201[rsp]
  00385	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00389	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159884
  00390	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00395	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159885
  0039c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003a1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003a6	41 b9 03 00 00
	00		 mov	 r9d, 3
  003ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159886
  003b3	ba 46 05 00 00	 mov	 edx, 1350		; 00000546H
  003b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159887
  003bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1351 :                     /*
; 1352 :                      * Check for a shutdown condition on entry
; 1353 :                      */
; 1354 :                     if(ca->curpending==COMMADPT_PEND_SHUTDOWN)

  003c5	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  003ca	0f b6 40 3c	 movzx	 eax, BYTE PTR [rax+60]
  003ce	83 f8 0a	 cmp	 eax, 10
  003d1	75 2f		 jne	 SHORT $LN33@commadpt_t

; 1355 :                     {
; 1356 :                         ca_shutdown=1;

  003d3	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR ca_shutdown$[rsp], 1

; 1357 :                         ca->curpending=COMMADPT_PEND_IDLE;

  003db	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  003e0	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1358 :                         signal_condition(&ca->ipc);

  003e4	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  003e9	48 83 c0 58	 add	 rax, 88			; 00000058H
  003ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159889
  003f4	48 8b c8	 mov	 rcx, rax
  003f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1359 :                         break;

  003fd	e9 cd 02 00 00	 jmp	 $LN3@commadpt_t
$LN33@commadpt_t:

; 1360 :                     }
; 1361 : 
; 1362 :                     /* Set to wait 5 seconds or input on the IPC pipe */
; 1363 :                     /* whichever comes 1st                            */
; 1364 :                     if(!init_signaled)

  00402	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR init_signaled$[rsp], 0
  0040a	75 2d		 jne	 SHORT $LN34@commadpt_t

; 1365 :                     {
; 1366 :                         ca->curpending=COMMADPT_PEND_IDLE;

  0040c	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00411	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1367 :                         signal_condition(&ca->ipc);

  00415	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0041a	48 83 c0 58	 add	 rax, 88			; 00000058H
  0041e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159891
  00425	48 8b c8	 mov	 rcx, rax
  00428	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1368 :                         init_signaled=1;

  0042e	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR init_signaled$[rsp], 1
$LN34@commadpt_t:

; 1369 :                     }
; 1370 : 
; 1371 :                     FD_ZERO(&rfd);

  00439	c7 84 24 c0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR rfd$[rsp], 0

; 1372 :                     FD_ZERO(&wfd);

  00444	c7 84 24 d0 21
	00 00 00 00 00
	00		 mov	 DWORD PTR wfd$[rsp], 0

; 1373 :                     FD_ZERO(&xfd);

  0044f	c7 84 24 e0 41
	00 00 00 00 00
	00		 mov	 DWORD PTR xfd$[rsp], 0

; 1374 :                     FD_SET(ca->pipe[1],&rfd);

  0045a	b8 04 00 00 00	 mov	 eax, 4
  0045f	48 6b c0 01	 imul	 rax, rax, 1
  00463	48 8d 94 24 c0
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  0046b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  00470	8b 4c 01 70	 mov	 ecx, DWORD PTR [rcx+rax+112]
  00474	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1375 :                     tv.tv_sec=5;

  0047a	c7 84 24 a8 00
	00 00 05 00 00
	00		 mov	 DWORD PTR tv$[rsp], 5

; 1376 :                     tv.tv_usec=0;

  00485	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv$[rsp+4], 0

; 1377 : 
; 1378 :                     release_lock(&ca->lock);

  00490	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00495	48 83 c0 68	 add	 rax, 104		; 00000068H
  00499	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159892
  004a0	48 8b c8	 mov	 rcx, rax
  004a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 1379 :                     rc=select(ca->pipe[1]+1,&rfd,&wfd,&xfd,&tv);

  004a9	b8 04 00 00 00	 mov	 eax, 4
  004ae	48 6b c0 01	 imul	 rax, rax, 1
  004b2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  004b7	8b 44 01 70	 mov	 eax, DWORD PTR [rcx+rax+112]
  004bb	ff c0		 inc	 eax
  004bd	c7 44 24 30 63
	05 00 00	 mov	 DWORD PTR [rsp+48], 1379 ; 00000563H
  004c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159893
  004cc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004d1	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR tv$[rsp]
  004d9	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  004de	4c 8d 8c 24 e0
	41 00 00	 lea	 r9, QWORD PTR xfd$[rsp]
  004e6	4c 8d 84 24 d0
	21 00 00	 lea	 r8, QWORD PTR wfd$[rsp]
  004ee	48 8d 94 24 c0
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  004f6	8b c8		 mov	 ecx, eax
  004f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_select
  004fe	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 1380 :                     obtain_lock(&ca->lock);

  00502	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00507	48 83 c0 68	 add	 rax, 104		; 00000068H
  0050b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159894
  00512	48 8b c8	 mov	 rcx, rax
  00515	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 1381 :                     /*
; 1382 :                      * Check for a shutdown condition again after the sleep
; 1383 :                      */
; 1384 :                     if(ca->curpending==COMMADPT_PEND_SHUTDOWN)

  0051b	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00520	0f b6 40 3c	 movzx	 eax, BYTE PTR [rax+60]
  00524	83 f8 0a	 cmp	 eax, 10
  00527	75 2f		 jne	 SHORT $LN35@commadpt_t

; 1385 :                     {
; 1386 :                         ca_shutdown=1;

  00529	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR ca_shutdown$[rsp], 1

; 1387 :                         ca->curpending=COMMADPT_PEND_IDLE;

  00531	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00536	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1388 :                         signal_condition(&ca->ipc);

  0053a	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0053f	48 83 c0 58	 add	 rax, 88			; 00000058H
  00543	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159896
  0054a	48 8b c8	 mov	 rcx, rax
  0054d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1389 :                         break;

  00553	e9 77 01 00 00	 jmp	 $LN3@commadpt_t
$LN35@commadpt_t:

; 1390 :                     }
; 1391 :                     if(rc!=0)

  00558	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  0055d	0f 84 b6 00 00
	00		 je	 $LN36@commadpt_t
$LN6@commadpt_t:

; 1392 :                     {
; 1393 :                         /* Ignore any other command at this stage */
; 1394 :                         VERIFY(0 <= read_pipe(ca->pipe[1],&b,1));

  00563	b8 04 00 00 00	 mov	 eax, 4
  00568	48 6b c0 01	 imul	 rax, rax, 1
  0056c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  00571	48 63 44 01 70	 movsxd	 rax, DWORD PTR [rcx+rax+112]
  00576	45 33 c9	 xor	 r9d, r9d
  00579	41 b8 01 00 00
	00		 mov	 r8d, 1
  0057f	48 8d 54 24 68	 lea	 rdx, QWORD PTR b$[rsp]
  00584	48 8b c8	 mov	 rcx, rax
  00587	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_recv
  0058d	85 c0		 test	 eax, eax
  0058f	7d 5c		 jge	 SHORT $LN37@commadpt_t
$LN9@commadpt_t:
  00591	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159899
  00598	41 b8 72 05 00
	00		 mov	 r8d, 1394		; 00000572H
  0059e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159900
  005a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159901
  005ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  005b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  005b8	85 c0		 test	 eax, eax
  005ba	74 20		 je	 SHORT $LN38@commadpt_t
  005bc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159903
  005c3	41 b8 72 05 00
	00		 mov	 r8d, 1394		; 00000572H
  005c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159904
  005d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159905
  005d7	e8 00 00 00 00	 call	 DebuggerTrace
$LN38@commadpt_t:
  005dc	33 c0		 xor	 eax, eax
  005de	85 c0		 test	 eax, eax
  005e0	75 af		 jne	 SHORT $LN9@commadpt_t
  005e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  005e8	85 c0		 test	 eax, eax
  005ea	74 01		 je	 SHORT $LN39@commadpt_t
  005ec	cc		 int	 3
$LN39@commadpt_t:
$LN37@commadpt_t:
  005ed	33 c0		 xor	 eax, eax
  005ef	85 c0		 test	 eax, eax
  005f1	0f 85 6c ff ff
	ff		 jne	 $LN6@commadpt_t

; 1395 :                         ca->curpending=COMMADPT_PEND_IDLE;

  005f7	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  005fc	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1396 :                         signal_condition(&ca->ipc);

  00600	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00605	48 83 c0 58	 add	 rax, 88			; 00000058H
  00609	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159907
  00610	48 8b c8	 mov	 rcx, rax
  00613	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition
$LN36@commadpt_t:

; 1397 :                     }
; 1398 :                 }

  00619	e9 a8 00 00 00	 jmp	 $LN32@commadpt_t
$LN31@commadpt_t:

; 1399 :                 else
; 1400 :                 {
; 1401 :                     WRMSG(HHC01000, "E",SSID_TO_LCSS(ca->dev->ssid),devnum,"bind()",strerror(HSO_errno));

  0061e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00624	8b c8		 mov	 ecx, eax
  00626	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0062c	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv312[rsp], rax
  00634	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  00639	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0063c	0f b7 49 44	 movzx	 ecx, WORD PTR [rcx+68]
  00640	d1 f9		 sar	 ecx, 1
  00642	89 8c 24 f0 00
	00 00		 mov	 DWORD PTR tv356[rsp], ecx
  00649	b9 01 00 00 00	 mov	 ecx, 1
  0064e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00654	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR tv312[rsp]
  0065c	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00661	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159908
  00668	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0066d	8b 4c 24 70	 mov	 ecx, DWORD PTR devnum$[rsp]
  00671	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00675	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR tv356[rsp]
  0067c	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00680	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159909
  00687	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0068c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159910
  00693	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00698	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0069d	41 b9 03 00 00
	00		 mov	 r9d, 3
  006a3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159911
  006aa	ba 79 05 00 00	 mov	 edx, 1401		; 00000579H
  006af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159912
  006b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1402 :                     ca_shutdown=1;

  006bc	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR ca_shutdown$[rsp], 1

; 1403 :                     break;

  006c4	eb 09		 jmp	 SHORT $LN3@commadpt_t
$LN32@commadpt_t:

; 1404 :                 }
; 1405 :             }

  006c6	eb 02		 jmp	 SHORT $LN30@commadpt_t
$LN29@commadpt_t:

; 1406 :             else
; 1407 :             {
; 1408 :                 break;

  006c8	eb 05		 jmp	 SHORT $LN3@commadpt_t
$LN30@commadpt_t:

; 1409 :             }
; 1410 :         }

  006ca	e9 21 fc ff ff	 jmp	 $LN2@commadpt_t
$LN3@commadpt_t:

; 1411 :         /* Start the listen */
; 1412 :         if(!ca_shutdown)

  006cf	83 7c 24 7c 00	 cmp	 DWORD PTR ca_shutdown$[rsp], 0
  006d4	0f 85 bb 00 00
	00		 jne	 $LN40@commadpt_t

; 1413 :         {
; 1414 :             listen(ca->lfd,10);

  006da	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  006df	48 63 40 50	 movsxd	 rax, DWORD PTR [rax+80]
  006e3	ba 0a 00 00 00	 mov	 edx, 10
  006e8	48 8b c8	 mov	 rcx, rax
  006eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_listen

; 1415 :             WRMSG(HHC01004, "I",

  006f1	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  006f6	0f b7 40 3e	 movzx	 eax, WORD PTR [rax+62]
  006fa	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv373[rsp], eax
  00701	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  00706	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00709	0f b7 49 44	 movzx	 ecx, WORD PTR [rcx+68]
  0070d	d1 f9		 sar	 ecx, 1
  0070f	89 8c 24 f8 00
	00 00		 mov	 DWORD PTR tv379[rsp], ecx
  00716	b9 01 00 00 00	 mov	 ecx, 1
  0071b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00721	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR tv373[rsp]
  00728	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  0072c	8b 4c 24 70	 mov	 ecx, DWORD PTR devnum$[rsp]
  00730	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00734	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR tv379[rsp]
  0073b	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0073f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159914
  00746	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0074b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159915
  00752	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00757	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0075c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00762	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159916
  00769	ba 8a 05 00 00	 mov	 edx, 1418		; 0000058aH
  0076e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159917
  00775	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1416 :                     SSID_TO_LCSS(ca->dev->ssid),
; 1417 :                     devnum,
; 1418 :                     ca->lport);
; 1419 :             ca->listening=1;

  0077b	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00780	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00786	0f ba e8 07	 bts	 eax, 7
  0078a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  0078f	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax
$LN40@commadpt_t:
$LN27@commadpt_t:

; 1420 :         }
; 1421 :     }
; 1422 :     if(!init_signaled)

  00795	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR init_signaled$[rsp], 0
  0079d	75 2d		 jne	 SHORT $LN41@commadpt_t

; 1423 :     {
; 1424 :         ca->curpending=COMMADPT_PEND_IDLE;

  0079f	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  007a4	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1425 :         signal_condition(&ca->ipc);

  007a8	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  007ad	48 83 c0 58	 add	 rax, 88			; 00000058H
  007b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159919
  007b8	48 8b c8	 mov	 rcx, rax
  007bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1426 :         init_signaled=1;

  007c1	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR init_signaled$[rsp], 1
$LN41@commadpt_t:
$LN167@commadpt_t:
$LN166@commadpt_t:
$LN165@commadpt_t:
$LN164@commadpt_t:
$LN163@commadpt_t:
$LN162@commadpt_t:
$LN161@commadpt_t:
$LN160@commadpt_t:
$LN159@commadpt_t:
$LN10@commadpt_t:

; 1427 :     }
; 1428 : 
; 1429 :     /* The MAIN select loop */
; 1430 :     /* It will listen on the following sockets : */
; 1431 :     /* ca->lfd : The listen socket */
; 1432 :     /* ca->sfd :
; 1433 :      *         read : When a read, prepare or DIAL command is in effect
; 1434 :      *        write : When a write contention occurs
; 1435 :      * ca->pipe[0] : Always
; 1436 :      *
; 1437 :      * A 3 Seconds timer is started for a read operation
; 1438 :      */
; 1439 : 
; 1440 :     while(!ca_shutdown)

  007cc	83 7c 24 7c 00	 cmp	 DWORD PTR ca_shutdown$[rsp], 0
  007d1	0f 85 8d 19 00
	00		 jne	 $LN11@commadpt_t

; 1441 :     {
; 1442 :         FD_ZERO(&rfd);

  007d7	c7 84 24 c0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR rfd$[rsp], 0

; 1443 :         FD_ZERO(&wfd);

  007e2	c7 84 24 d0 21
	00 00 00 00 00
	00		 mov	 DWORD PTR wfd$[rsp], 0

; 1444 :         FD_ZERO(&xfd);

  007ed	c7 84 24 e0 41
	00 00 00 00 00
	00		 mov	 DWORD PTR xfd$[rsp], 0

; 1445 :         maxfd=0;

  007f8	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR maxfd$[rsp], 0

; 1446 :         if(ca->listening)

  00800	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00805	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0080b	c1 e8 07	 shr	 eax, 7
  0080e	83 e0 01	 and	 eax, 1
  00811	85 c0		 test	 eax, eax
  00813	74 4b		 je	 SHORT $LN42@commadpt_t

; 1447 :         {
; 1448 :                 FD_SET(ca->lfd,&rfd);

  00815	48 8d 94 24 c0
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  0081d	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00822	8b 48 50	 mov	 ecx, DWORD PTR [rax+80]
  00825	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1449 :                 maxfd=maxfd<ca->lfd?ca->lfd:maxfd;

  0082b	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00830	8b 40 50	 mov	 eax, DWORD PTR [rax+80]
  00833	39 44 24 6c	 cmp	 DWORD PTR maxfd$[rsp], eax
  00837	7d 11		 jge	 SHORT $LN141@commadpt_t
  00839	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0083e	8b 40 50	 mov	 eax, DWORD PTR [rax+80]
  00841	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv409[rsp], eax
  00848	eb 0b		 jmp	 SHORT $LN142@commadpt_t
$LN141@commadpt_t:
  0084a	8b 44 24 6c	 mov	 eax, DWORD PTR maxfd$[rsp]
  0084e	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv409[rsp], eax
$LN142@commadpt_t:
  00855	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR tv409[rsp]
  0085c	89 44 24 6c	 mov	 DWORD PTR maxfd$[rsp], eax
$LN42@commadpt_t:

; 1450 :         }
; 1451 :         seltv=NULL;

  00860	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR seltv$[rsp], 0

; 1452 :         if(ca->dev->ccwtrace)

  0086c	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00871	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00874	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0087a	c1 e8 0f	 shr	 eax, 15
  0087d	83 e0 01	 and	 eax, 1
  00880	85 c0		 test	 eax, eax
  00882	0f 84 a8 00 00
	00		 je	 $LN43@commadpt_t

; 1453 :         {
; 1454 :             WRMSG(HHC01074,"D",

  00888	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0088d	0f b6 40 3c	 movzx	 eax, BYTE PTR [rax+60]
  00891	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv416[rsp], rax
  00899	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:commadpt_pendccw_text
  008a0	48 89 8c 24 70
	01 00 00	 mov	 QWORD PTR tv1332[rsp], rcx
  008a8	48 8b 54 24 60	 mov	 rdx, QWORD PTR ca$[rsp]
  008ad	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  008b0	0f b7 52 44	 movzx	 edx, WORD PTR [rdx+68]
  008b4	d1 fa		 sar	 edx, 1
  008b6	89 94 24 fc 00
	00 00		 mov	 DWORD PTR tv424[rsp], edx
  008bd	b9 01 00 00 00	 mov	 ecx, 1
  008c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008c8	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR tv1332[rsp]
  008d0	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR tv416[rsp]
  008d8	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  008dc	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  008e1	8b 4c 24 70	 mov	 ecx, DWORD PTR devnum$[rsp]
  008e5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  008e9	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR tv424[rsp]
  008f0	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  008f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159922
  008fb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00900	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159923
  00907	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0090c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00911	41 b9 03 00 00
	00		 mov	 r9d, 3
  00917	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159924
  0091e	ba b1 05 00 00	 mov	 edx, 1457		; 000005b1H
  00923	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159925
  0092a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN43@commadpt_t:

; 1455 :                             SSID_TO_LCSS(ca->dev->ssid),
; 1456 :                             devnum,
; 1457 :                             commadpt_pendccw_text[ca->curpending]);
; 1458 :         }
; 1459 :         writecont=0;

  00930	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR writecont$[rsp], 0

; 1460 :         switch(ca->curpending)

  0093b	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00940	0f b6 40 3c	 movzx	 eax, BYTE PTR [rax+60]
  00944	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv437[rsp], eax
  0094b	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR tv437[rsp]
  00952	ff c8		 dec	 eax
  00954	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv437[rsp], eax
  0095b	83 bc 24 94 00
	00 00 09	 cmp	 DWORD PTR tv437[rsp], 9
  00963	0f 87 02 0a 00
	00		 ja	 $LN89@commadpt_t
  00969	48 63 84 24 94
	00 00 00	 movsxd	 rax, DWORD PTR tv437[rsp]
  00971	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00978	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN168@commadpt_t[rcx+rax*4]
  0097f	48 03 c1	 add	 rax, rcx
  00982	ff e0		 jmp	 rax
$LN44@commadpt_t:

; 1461 :         {
; 1462 :             case COMMADPT_PEND_SHUTDOWN:
; 1463 :                 ca_shutdown=1;

  00984	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR ca_shutdown$[rsp], 1

; 1464 :                 break;

  0098c	e9 da 09 00 00	 jmp	 $LN12@commadpt_t

; 1465 :             case COMMADPT_PEND_IDLE:
; 1466 :                 break;

  00991	e9 d5 09 00 00	 jmp	 $LN12@commadpt_t
$LN46@commadpt_t:

; 1467 :             case COMMADPT_PEND_READ:
; 1468 :                 if(!ca->connect)

  00996	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0099b	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  009a1	d1 e8		 shr	 eax, 1
  009a3	83 e0 01	 and	 eax, 1
  009a6	85 c0		 test	 eax, eax
  009a8	75 27		 jne	 SHORT $LN47@commadpt_t

; 1469 :                 {
; 1470 :                     ca->curpending=COMMADPT_PEND_IDLE;

  009aa	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  009af	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1471 :                     signal_condition(&ca->ipc);

  009b3	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  009b8	48 83 c0 58	 add	 rax, 88			; 00000058H
  009bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159930
  009c3	48 8b c8	 mov	 rcx, rax
  009c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1472 :                     break;

  009cc	e9 9a 09 00 00	 jmp	 $LN12@commadpt_t
$LN47@commadpt_t:

; 1473 :                 }
; 1474 :                 if(ca->inbfr.havedata || ca->eol_flag)

  009d1	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  009d6	8b 80 98 00 00
	00		 mov	 eax, DWORD PTR [rax+152]
  009dc	83 e0 01	 and	 eax, 1
  009df	85 c0		 test	 eax, eax
  009e1	75 15		 jne	 SHORT $LN49@commadpt_t
  009e3	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  009e8	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  009ee	c1 e8 16	 shr	 eax, 22
  009f1	83 e0 01	 and	 eax, 1
  009f4	85 c0		 test	 eax, eax
  009f6	74 40		 je	 SHORT $LN48@commadpt_t
$LN49@commadpt_t:

; 1475 :                 {
; 1476 :                     if (ca->term == COMMADPT_TERM_2741) {

  009f8	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  009fd	0f b6 40 09	 movzx	 eax, BYTE PTR [rax+9]
  00a01	83 f8 01	 cmp	 eax, 1
  00a04	75 0b		 jne	 SHORT $LN50@commadpt_t

; 1477 :                         usleep(10000);

  00a06	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00a0b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_usleep
$LN50@commadpt_t:

; 1478 :                     }
; 1479 :                     ca->curpending=COMMADPT_PEND_IDLE;

  00a11	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00a16	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1480 :                     signal_condition(&ca->ipc);

  00a1a	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00a1f	48 83 c0 58	 add	 rax, 88			; 00000058H
  00a23	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159934
  00a2a	48 8b c8	 mov	 rcx, rax
  00a2d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1481 :                     break;

  00a33	e9 33 09 00 00	 jmp	 $LN12@commadpt_t
$LN48@commadpt_t:

; 1482 :                 }
; 1483 :                 seltv=commadpt_setto(&tv,ca->rto);

  00a38	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00a3d	8b 50 20	 mov	 edx, DWORD PTR [rax+32]
  00a40	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR tv$[rsp]
  00a48	e8 00 00 00 00	 call	 commadpt_setto
  00a4d	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR seltv$[rsp], rax

; 1484 :                 FD_SET(ca->sfd,&rfd);

  00a55	48 8d 94 24 c0
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  00a5d	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00a62	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  00a65	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1485 :                 maxfd=maxfd<ca->sfd?ca->sfd:maxfd;

  00a6b	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00a70	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  00a73	39 44 24 6c	 cmp	 DWORD PTR maxfd$[rsp], eax
  00a77	7d 11		 jge	 SHORT $LN143@commadpt_t
  00a79	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00a7e	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  00a81	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv471[rsp], eax
  00a88	eb 0b		 jmp	 SHORT $LN144@commadpt_t
$LN143@commadpt_t:
  00a8a	8b 44 24 6c	 mov	 eax, DWORD PTR maxfd$[rsp]
  00a8e	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv471[rsp], eax
$LN144@commadpt_t:
  00a95	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR tv471[rsp]
  00a9c	89 44 24 6c	 mov	 DWORD PTR maxfd$[rsp], eax

; 1486 :                 break;

  00aa0	e9 c6 08 00 00	 jmp	 $LN12@commadpt_t
$LN51@commadpt_t:

; 1487 :             case COMMADPT_PEND_POLL:
; 1488 :                 /* Poll active check - provision for write contention */
; 1489 :                 /* pollact will be reset when NON syn data is received*/
; 1490 :                 /* or when the read times out                         */
; 1491 :                 /* Also prevents WRITE from exiting early             */
; 1492 :                 if(!pollact && !writecont)

  00aa5	83 bc 24 84 00
	00 00 00	 cmp	 DWORD PTR pollact$[rsp], 0
  00aad	0f 85 0b 02 00
	00		 jne	 $LN52@commadpt_t
  00ab3	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR writecont$[rsp], 0
  00abb	0f 85 fd 01 00
	00		 jne	 $LN52@commadpt_t

; 1493 :                 {
; 1494 :                     int gotenq;
; 1495 : 
; 1496 :                     pollact=1;

  00ac1	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR pollact$[rsp], 1

; 1497 :                     gotenq=0;

  00acc	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR gotenq$2[rsp], 0

; 1498 :                     /* Send SYN+SYN */
; 1499 :                     commadpt_ring_push(&ca->outbfr,0x32);

  00ad7	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00adc	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00ae2	b2 32		 mov	 dl, 50			; 00000032H
  00ae4	48 8b c8	 mov	 rcx, rax
  00ae7	e8 00 00 00 00	 call	 commadpt_ring_push

; 1500 :                     commadpt_ring_push(&ca->outbfr,0x32);

  00aec	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00af1	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00af7	b2 32		 mov	 dl, 50			; 00000032H
  00af9	48 8b c8	 mov	 rcx, rax
  00afc	e8 00 00 00 00	 call	 commadpt_ring_push

; 1501 :                     /* Fill the Output ring with POLL Data */
; 1502 :                     /* Up to 7 chars or ENQ                */
; 1503 :                     for(i=0;i<7;i++)

  00b01	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  00b0c	eb 10		 jmp	 SHORT $LN16@commadpt_t
$LN14@commadpt_t:
  00b0e	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  00b15	ff c0		 inc	 eax
  00b17	89 84 24 98 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN16@commadpt_t:
  00b1e	83 bc 24 98 00
	00 00 07	 cmp	 DWORD PTR i$[rsp], 7
  00b26	7d 7c		 jge	 SHORT $LN15@commadpt_t

; 1504 :                     {
; 1505 :                         if(!ca->pollbfr.havedata)

  00b28	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00b2d	8b 80 e8 00 00
	00		 mov	 eax, DWORD PTR [rax+232]
  00b33	83 e0 01	 and	 eax, 1
  00b36	85 c0		 test	 eax, eax
  00b38	75 02		 jne	 SHORT $LN53@commadpt_t

; 1506 :                         {
; 1507 :                             break;

  00b3a	eb 68		 jmp	 SHORT $LN15@commadpt_t
$LN53@commadpt_t:

; 1508 :                         }
; 1509 :                         ca->pollused++;

  00b3c	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00b41	0f b7 80 66 01
	00 00		 movzx	 eax, WORD PTR [rax+358]
  00b48	66 ff c0	 inc	 ax
  00b4b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  00b50	66 89 81 66 01
	00 00		 mov	 WORD PTR [rcx+358], ax

; 1510 :                         b=commadpt_ring_pop(&ca->pollbfr);

  00b57	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00b5c	48 05 c8 00 00
	00		 add	 rax, 200		; 000000c8H
  00b62	48 8b c8	 mov	 rcx, rax
  00b65	e8 00 00 00 00	 call	 commadpt_ring_pop
  00b6a	88 44 24 68	 mov	 BYTE PTR b$[rsp], al

; 1511 :                         if(b!=0x2D)

  00b6e	0f b6 44 24 68	 movzx	 eax, BYTE PTR b$[rsp]
  00b73	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00b76	74 1a		 je	 SHORT $LN54@commadpt_t

; 1512 :                         {
; 1513 :                             commadpt_ring_push(&ca->outbfr,b);

  00b78	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00b7d	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00b83	0f b6 54 24 68	 movzx	 edx, BYTE PTR b$[rsp]
  00b88	48 8b c8	 mov	 rcx, rax
  00b8b	e8 00 00 00 00	 call	 commadpt_ring_push

; 1514 :                         }

  00b90	eb 0d		 jmp	 SHORT $LN55@commadpt_t
$LN54@commadpt_t:

; 1515 :                         else
; 1516 :                         {
; 1517 :                             gotenq=1;

  00b92	c7 84 24 c0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR gotenq$2[rsp], 1

; 1518 :                             break;

  00b9d	eb 05		 jmp	 SHORT $LN15@commadpt_t
$LN55@commadpt_t:

; 1519 :                         }
; 1520 :                     }

  00b9f	e9 6a ff ff ff	 jmp	 $LN14@commadpt_t
$LN15@commadpt_t:

; 1521 :                     if(!gotenq)

  00ba4	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR gotenq$2[rsp], 0
  00bac	0f 85 c8 00 00
	00		 jne	 $LN56@commadpt_t

; 1522 :                     {
; 1523 :                         if(ca->dev->ccwtrace)

  00bb2	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00bb7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00bba	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00bc0	c1 e8 0f	 shr	 eax, 15
  00bc3	83 e0 01	 and	 eax, 1
  00bc6	85 c0		 test	 eax, eax
  00bc8	74 6f		 je	 SHORT $LN57@commadpt_t

; 1524 :                         {
; 1525 :                             WRMSG(HHC01075,"D",SSID_TO_LCSS(ca->dev->ssid),devnum);

  00bca	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00bcf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00bd2	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00bd6	d1 f8		 sar	 eax, 1
  00bd8	89 84 24 00 01
	00 00		 mov	 DWORD PTR tv539[rsp], eax
  00bdf	b9 01 00 00 00	 mov	 ecx, 1
  00be4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00bea	8b 4c 24 70	 mov	 ecx, DWORD PTR devnum$[rsp]
  00bee	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00bf2	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR tv539[rsp]
  00bf9	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00bfd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159942
  00c04	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c09	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159943
  00c10	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c15	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c1a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c20	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159944
  00c27	ba f5 05 00 00	 mov	 edx, 1525		; 000005f5H
  00c2c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159945
  00c33	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN57@commadpt_t:

; 1526 :                         }
; 1527 :                         ca->badpoll=1;

  00c39	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00c3e	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00c44	0f ba e8 0f	 bts	 eax, 15
  00c48	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  00c4d	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 1528 :                         ca->curpending=COMMADPT_PEND_IDLE;

  00c53	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00c58	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1529 :                         signal_condition(&ca->ipc);

  00c5c	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00c61	48 83 c0 58	 add	 rax, 88			; 00000058H
  00c65	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159946
  00c6c	48 8b c8	 mov	 rcx, rax
  00c6f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1530 :                         break;

  00c75	e9 f1 06 00 00	 jmp	 $LN12@commadpt_t
$LN56@commadpt_t:

; 1531 :                     }
; 1532 :                     b=commadpt_ring_pop(&ca->pollbfr);

  00c7a	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00c7f	48 05 c8 00 00
	00		 add	 rax, 200		; 000000c8H
  00c85	48 8b c8	 mov	 rcx, rax
  00c88	e8 00 00 00 00	 call	 commadpt_ring_pop
  00c8d	88 44 24 68	 mov	 BYTE PTR b$[rsp], al

; 1533 :                     ca->pollix=b;

  00c91	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00c96	0f b6 4c 24 68	 movzx	 ecx, BYTE PTR b$[rsp]
  00c9b	88 88 64 01 00
	00		 mov	 BYTE PTR [rax+356], cl

; 1534 :                     seltv=commadpt_setto(&tv,ca->pto);

  00ca1	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00ca6	8b 50 24	 mov	 edx, DWORD PTR [rax+36]
  00ca9	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR tv$[rsp]
  00cb1	e8 00 00 00 00	 call	 commadpt_setto
  00cb6	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR seltv$[rsp], rax
$LN52@commadpt_t:

; 1535 :                 }
; 1536 :                 if(!writecont && ca->pto!=0)

  00cbe	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR writecont$[rsp], 0
  00cc6	75 66		 jne	 SHORT $LN58@commadpt_t
  00cc8	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00ccd	83 78 24 00	 cmp	 DWORD PTR [rax+36], 0
  00cd1	74 5b		 je	 SHORT $LN58@commadpt_t

; 1537 :                 {
; 1538 :                     /* Set tv value (have been set earlier) */
; 1539 :                     seltv=&tv;

  00cd3	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR tv$[rsp]
  00cdb	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR seltv$[rsp], rax

; 1540 :                     /* Set to read data still               */
; 1541 :                     FD_SET(ca->sfd,&rfd);

  00ce3	48 8d 94 24 c0
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  00ceb	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00cf0	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  00cf3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1542 :                     maxfd=maxfd<ca->sfd?ca->sfd:maxfd;

  00cf9	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00cfe	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  00d01	39 44 24 6c	 cmp	 DWORD PTR maxfd$[rsp], eax
  00d05	7d 11		 jge	 SHORT $LN145@commadpt_t
  00d07	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00d0c	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  00d0f	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv574[rsp], eax
  00d16	eb 0b		 jmp	 SHORT $LN146@commadpt_t
$LN145@commadpt_t:
  00d18	8b 44 24 6c	 mov	 eax, DWORD PTR maxfd$[rsp]
  00d1c	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv574[rsp], eax
$LN146@commadpt_t:
  00d23	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR tv574[rsp]
  00d2a	89 44 24 6c	 mov	 DWORD PTR maxfd$[rsp], eax
$LN58@commadpt_t:
$LN59@commadpt_t:

; 1543 :                 }
; 1544 :                 /* FALLTHRU */
; 1545 :                 /* DO NOT BREAK - Continue with WRITE processing */
; 1546 :             case COMMADPT_PEND_WRITE:
; 1547 :                 if(!writecont)

  00d2e	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR writecont$[rsp], 0
  00d36	0f 85 d8 01 00
	00		 jne	 $LN60@commadpt_t
$LN17@commadpt_t:

; 1548 :                 {
; 1549 :                     while(ca->outbfr.havedata)

  00d3c	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00d41	8b 80 c0 00 00
	00		 mov	 eax, DWORD PTR [rax+192]
  00d47	83 e0 01	 and	 eax, 1
  00d4a	85 c0		 test	 eax, eax
  00d4c	0f 84 c0 01 00
	00		 je	 $LN18@commadpt_t

; 1550 :                     {
; 1551 :                         b=commadpt_ring_pop(&ca->outbfr);

  00d52	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00d57	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00d5d	48 8b c8	 mov	 rcx, rax
  00d60	e8 00 00 00 00	 call	 commadpt_ring_pop
  00d65	88 44 24 68	 mov	 BYTE PTR b$[rsp], al

; 1552 :                         if(ca->dev->ccwtrace)

  00d69	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00d6e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00d71	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00d77	c1 e8 0f	 shr	 eax, 15
  00d7a	83 e0 01	 and	 eax, 1
  00d7d	85 c0		 test	 eax, eax
  00d7f	0f 84 9c 00 00
	00		 je	 $LN62@commadpt_t

; 1553 :                         {
; 1554 :                                 WRMSG(HHC01076,"D",SSID_TO_LCSS(ca->dev->ssid),ca->devnum,b);

  00d85	0f b6 44 24 68	 movzx	 eax, BYTE PTR b$[rsp]
  00d8a	89 84 24 04 01
	00 00		 mov	 DWORD PTR tv587[rsp], eax
  00d91	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  00d96	0f b7 89 40 01
	00 00		 movzx	 ecx, WORD PTR [rcx+320]
  00d9d	89 8c 24 08 01
	00 00		 mov	 DWORD PTR tv590[rsp], ecx
  00da4	48 8b 54 24 60	 mov	 rdx, QWORD PTR ca$[rsp]
  00da9	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00dac	0f b7 52 44	 movzx	 edx, WORD PTR [rdx+68]
  00db0	d1 fa		 sar	 edx, 1
  00db2	89 94 24 0c 01
	00 00		 mov	 DWORD PTR tv595[rsp], edx
  00db9	b9 01 00 00 00	 mov	 ecx, 1
  00dbe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00dc4	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR tv587[rsp]
  00dcb	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00dcf	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR tv590[rsp]
  00dd6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00dda	8b 8c 24 0c 01
	00 00		 mov	 ecx, DWORD PTR tv595[rsp]
  00de1	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00de5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159952
  00dec	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00df1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159953
  00df8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00dfd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e02	41 b9 03 00 00
	00		 mov	 r9d, 3
  00e08	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159954
  00e0f	ba 12 06 00 00	 mov	 edx, 1554		; 00000612H
  00e14	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159955
  00e1b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN62@commadpt_t:

; 1555 :                         }
; 1556 :                         rc=write_socket(ca->sfd,&b,1);

  00e21	41 b8 01 00 00
	00		 mov	 r8d, 1
  00e27	48 8d 54 24 68	 lea	 rdx, QWORD PTR b$[rsp]
  00e2c	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00e31	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  00e34	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write_socket
  00e3a	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 1557 :                         if(rc!=1)

  00e3e	83 7c 24 74 01	 cmp	 DWORD PTR rc$[rsp], 1
  00e43	0f 84 c4 00 00
	00		 je	 $LN63@commadpt_t

; 1558 :                         {
; 1559 :                             if(0
; 1560 : #ifndef WIN32
; 1561 :                                 || EAGAIN == errno
; 1562 : #endif
; 1563 :                                 || HSO_EWOULDBLOCK == HSO_errno

  00e49	33 c0		 xor	 eax, eax
  00e4b	85 c0		 test	 eax, eax
  00e4d	75 0d		 jne	 SHORT $LN66@commadpt_t
  00e4f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00e55	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  00e5a	75 5a		 jne	 SHORT $LN64@commadpt_t
$LN66@commadpt_t:

; 1564 :                             )
; 1565 :                             {
; 1566 :                                 /* Contending for write */
; 1567 :                                 writecont=1;

  00e5c	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR writecont$[rsp], 1

; 1568 :                                 FD_SET(ca->sfd,&wfd);

  00e67	48 8d 94 24 d0
	21 00 00	 lea	 rdx, QWORD PTR wfd$[rsp]
  00e6f	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00e74	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  00e77	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1569 :                                 maxfd=maxfd<ca->sfd?ca->sfd:maxfd;

  00e7d	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00e82	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  00e85	39 44 24 6c	 cmp	 DWORD PTR maxfd$[rsp], eax
  00e89	7d 11		 jge	 SHORT $LN147@commadpt_t
  00e8b	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00e90	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  00e93	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv621[rsp], eax
  00e9a	eb 0b		 jmp	 SHORT $LN148@commadpt_t
$LN147@commadpt_t:
  00e9c	8b 44 24 6c	 mov	 eax, DWORD PTR maxfd$[rsp]
  00ea0	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv621[rsp], eax
$LN148@commadpt_t:
  00ea7	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR tv621[rsp]
  00eae	89 44 24 6c	 mov	 DWORD PTR maxfd$[rsp], eax

; 1570 :                                 break;

  00eb2	eb 5e		 jmp	 SHORT $LN18@commadpt_t

; 1571 :                             }

  00eb4	eb 57		 jmp	 SHORT $LN65@commadpt_t
$LN64@commadpt_t:

; 1572 :                             else
; 1573 :                             {
; 1574 :                                 close_socket(ca->sfd);

  00eb6	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00ebb	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  00ebe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1575 :                                 ca->sfd=-1;

  00ec4	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00ec9	c7 40 4c ff ff
	ff ff		 mov	 DWORD PTR [rax+76], -1

; 1576 :                                 ca->connect=0;

  00ed0	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00ed5	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00edb	83 e0 fd	 and	 eax, -3			; fffffffdH
  00ede	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  00ee3	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 1577 :                                 ca->curpending=COMMADPT_PEND_IDLE;

  00ee9	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00eee	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1578 :                                 signal_condition(&ca->ipc);

  00ef2	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00ef7	48 83 c0 58	 add	 rax, 88			; 00000058H
  00efb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159960
  00f02	48 8b c8	 mov	 rcx, rax
  00f05	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1579 :                                 break;

  00f0b	eb 05		 jmp	 SHORT $LN18@commadpt_t
$LN65@commadpt_t:
$LN63@commadpt_t:

; 1580 :                             }
; 1581 :                         }
; 1582 :                     }

  00f0d	e9 2a fe ff ff	 jmp	 $LN17@commadpt_t
$LN18@commadpt_t:

; 1583 :                 }

  00f12	eb 4b		 jmp	 SHORT $LN61@commadpt_t
$LN60@commadpt_t:

; 1584 :                 else
; 1585 :                 {
; 1586 :                         FD_SET(ca->sfd,&wfd);

  00f14	48 8d 94 24 d0
	21 00 00	 lea	 rdx, QWORD PTR wfd$[rsp]
  00f1c	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00f21	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  00f24	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1587 :                         maxfd=maxfd<ca->sfd?ca->sfd:maxfd;

  00f2a	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00f2f	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  00f32	39 44 24 6c	 cmp	 DWORD PTR maxfd$[rsp], eax
  00f36	7d 11		 jge	 SHORT $LN149@commadpt_t
  00f38	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00f3d	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  00f40	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv638[rsp], eax
  00f47	eb 0b		 jmp	 SHORT $LN150@commadpt_t
$LN149@commadpt_t:
  00f49	8b 44 24 6c	 mov	 eax, DWORD PTR maxfd$[rsp]
  00f4d	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv638[rsp], eax
$LN150@commadpt_t:
  00f54	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR tv638[rsp]
  00f5b	89 44 24 6c	 mov	 DWORD PTR maxfd$[rsp], eax
$LN61@commadpt_t:

; 1588 :                 }
; 1589 :                 if(!writecont && !pollact)

  00f5f	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR writecont$[rsp], 0
  00f67	75 31		 jne	 SHORT $LN67@commadpt_t
  00f69	83 bc 24 84 00
	00 00 00	 cmp	 DWORD PTR pollact$[rsp], 0
  00f71	75 27		 jne	 SHORT $LN67@commadpt_t

; 1590 :                 {
; 1591 :                         ca->curpending=COMMADPT_PEND_IDLE;

  00f73	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00f78	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1592 :                         signal_condition(&ca->ipc);

  00f7c	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00f81	48 83 c0 58	 add	 rax, 88			; 00000058H
  00f85	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159962
  00f8c	48 8b c8	 mov	 rcx, rax
  00f8f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1593 :                         break;

  00f95	e9 d1 03 00 00	 jmp	 $LN12@commadpt_t
$LN67@commadpt_t:

; 1594 :                 }
; 1595 :                 break;

  00f9a	e9 cc 03 00 00	 jmp	 $LN12@commadpt_t
$LN68@commadpt_t:

; 1596 :             case COMMADPT_PEND_DIAL:
; 1597 :                 if(ca->connect)

  00f9f	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00fa4	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00faa	d1 e8		 shr	 eax, 1
  00fac	83 e0 01	 and	 eax, 1
  00faf	85 c0		 test	 eax, eax
  00fb1	74 27		 je	 SHORT $LN69@commadpt_t

; 1598 :                 {
; 1599 :                     ca->curpending=COMMADPT_PEND_IDLE;

  00fb3	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00fb8	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1600 :                     signal_condition(&ca->ipc);

  00fbc	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00fc1	48 83 c0 58	 add	 rax, 88			; 00000058H
  00fc5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159965
  00fcc	48 8b c8	 mov	 rcx, rax
  00fcf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1601 :                     break;

  00fd5	e9 91 03 00 00	 jmp	 $LN12@commadpt_t
$LN69@commadpt_t:

; 1602 :                 }
; 1603 :                 rc=commadpt_initiate_userdial(ca);

  00fda	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  00fdf	e8 00 00 00 00	 call	 commadpt_initiate_userdial
  00fe4	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 1604 :                 if(rc!=0 || (rc==0 && ca->connect))

  00fe8	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  00fed	75 1b		 jne	 SHORT $LN71@commadpt_t
  00fef	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  00ff4	75 3b		 jne	 SHORT $LN70@commadpt_t
  00ff6	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  00ffb	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01001	d1 e8		 shr	 eax, 1
  01003	83 e0 01	 and	 eax, 1
  01006	85 c0		 test	 eax, eax
  01008	74 27		 je	 SHORT $LN70@commadpt_t
$LN71@commadpt_t:

; 1605 :                 {
; 1606 :                     ca->curpending=COMMADPT_PEND_IDLE;

  0100a	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0100f	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1607 :                     signal_condition(&ca->ipc);

  01013	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01018	48 83 c0 58	 add	 rax, 88			; 00000058H
  0101c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159968
  01023	48 8b c8	 mov	 rcx, rax
  01026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1608 :                     break;

  0102c	e9 3a 03 00 00	 jmp	 $LN12@commadpt_t
$LN70@commadpt_t:

; 1609 :                 }
; 1610 :                 FD_SET(ca->sfd,&wfd);

  01031	48 8d 94 24 d0
	21 00 00	 lea	 rdx, QWORD PTR wfd$[rsp]
  01039	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0103e	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  01041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1611 : #if defined(_MSVC_)
; 1612 :                 FD_SET(ca->sfd,&xfd);

  01047	48 8d 94 24 e0
	41 00 00	 lea	 rdx, QWORD PTR xfd$[rsp]
  0104f	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01054	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  01057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1613 : #endif /* defined(_MSVC_) */
; 1614 :                 maxfd=maxfd<ca->sfd?ca->sfd:maxfd;

  0105d	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01062	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  01065	39 44 24 6c	 cmp	 DWORD PTR maxfd$[rsp], eax
  01069	7d 11		 jge	 SHORT $LN151@commadpt_t
  0106b	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01070	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  01073	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv674[rsp], eax
  0107a	eb 0b		 jmp	 SHORT $LN152@commadpt_t
$LN151@commadpt_t:
  0107c	8b 44 24 6c	 mov	 eax, DWORD PTR maxfd$[rsp]
  01080	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv674[rsp], eax
$LN152@commadpt_t:
  01087	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR tv674[rsp]
  0108e	89 44 24 6c	 mov	 DWORD PTR maxfd$[rsp], eax

; 1615 :                 break;

  01092	e9 d4 02 00 00	 jmp	 $LN12@commadpt_t
$LN72@commadpt_t:

; 1616 :             case COMMADPT_PEND_ENABLE:
; 1617 :                 if(ca->connect)

  01097	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0109c	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  010a2	d1 e8		 shr	 eax, 1
  010a4	83 e0 01	 and	 eax, 1
  010a7	85 c0		 test	 eax, eax
  010a9	74 27		 je	 SHORT $LN73@commadpt_t

; 1618 :                 {
; 1619 :                     ca->curpending=COMMADPT_PEND_IDLE;

  010ab	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  010b0	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1620 :                     signal_condition(&ca->ipc);

  010b4	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  010b9	48 83 c0 58	 add	 rax, 88			; 00000058H
  010bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159971
  010c4	48 8b c8	 mov	 rcx, rax
  010c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1621 :                     break;

  010cd	e9 99 02 00 00	 jmp	 $LN12@commadpt_t
$LN73@commadpt_t:

; 1622 :                 }
; 1623 :                 switch(ca->dialin+ca->dialout*2)

  010d2	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  010d7	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  010dd	c1 e8 03	 shr	 eax, 3
  010e0	83 e0 01	 and	 eax, 1
  010e3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  010e8	8b 89 68 01 00
	00		 mov	 ecx, DWORD PTR [rcx+360]
  010ee	c1 e9 04	 shr	 ecx, 4
  010f1	83 e1 01	 and	 ecx, 1
  010f4	8d 04 48	 lea	 eax, DWORD PTR [rax+rcx*2]
  010f7	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv691[rsp], eax
  010fe	83 bc 24 d4 00
	00 00 00	 cmp	 DWORD PTR tv691[rsp], 0
  01106	74 13		 je	 SHORT $LN74@commadpt_t
  01108	83 bc 24 d4 00
	00 00 02	 cmp	 DWORD PTR tv691[rsp], 2
  01110	0f 84 2b 01 00
	00		 je	 $LN83@commadpt_t
  01116	e9 24 01 00 00	 jmp	 $LN80@commadpt_t
$LN74@commadpt_t:

; 1624 :                 {
; 1625 :                     case 0: /* DIAL=NO */
; 1626 :                         /* callissued is set here when the call */
; 1627 :                         /* actually failed. But we want to time */
; 1628 :                         /* a bit for program issuing ENABLES in */
; 1629 :                         /* a tight loop                         */
; 1630 :                         if(ca->callissued)

  0111b	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01120	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01126	c1 e8 10	 shr	 eax, 16
  01129	83 e0 01	 and	 eax, 1
  0112c	85 c0		 test	 eax, eax
  0112e	74 22		 je	 SHORT $LN75@commadpt_t

; 1631 :                         {
; 1632 :                             seltv=commadpt_setto(&tv,ca->eto);

  01130	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01135	8b 50 28	 mov	 edx, DWORD PTR [rax+40]
  01138	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR tv$[rsp]
  01140	e8 00 00 00 00	 call	 commadpt_setto
  01145	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR seltv$[rsp], rax

; 1633 :                             break;

  0114d	e9 11 01 00 00	 jmp	 $LN19@commadpt_t
$LN75@commadpt_t:

; 1634 :                         }
; 1635 :                         /* Issue a Connect out */
; 1636 :                         rc=commadpt_connout(ca);

  01152	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  01157	e8 00 00 00 00	 call	 commadpt_connout
  0115c	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 1637 :                         if(rc==0)

  01160	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  01165	0f 85 b5 00 00
	00		 jne	 $LN76@commadpt_t

; 1638 :                         {
; 1639 :                             /* Call issued */
; 1640 :                             if(ca->connect)

  0116b	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01170	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01176	d1 e8		 shr	 eax, 1
  01178	83 e0 01	 and	 eax, 1
  0117b	85 c0		 test	 eax, eax
  0117d	74 24		 je	 SHORT $LN78@commadpt_t

; 1641 :                             {
; 1642 :                                 /* Call completed already */
; 1643 :                                 ca->curpending=COMMADPT_PEND_IDLE;

  0117f	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01184	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1644 :                                 signal_condition(&ca->ipc);

  01188	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0118d	48 83 c0 58	 add	 rax, 88			; 00000058H
  01191	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159978
  01198	48 8b c8	 mov	 rcx, rax
  0119b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1645 :                             }

  011a1	eb 7b		 jmp	 SHORT $LN79@commadpt_t
$LN78@commadpt_t:

; 1646 :                             else
; 1647 :                             {
; 1648 :                                 /* Call initiated - FD will be ready */
; 1649 :                                 /* for writing when the connect ends */
; 1650 :                                 /* getsockopt/SOERROR will tell if   */
; 1651 :                                 /* the call was sucessfull or not    */
; 1652 :                                 FD_SET(ca->sfd,&wfd);

  011a3	48 8d 94 24 d0
	21 00 00	 lea	 rdx, QWORD PTR wfd$[rsp]
  011ab	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  011b0	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  011b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1653 : #if defined(_MSVC_)
; 1654 :                                 FD_SET(ca->sfd,&xfd);

  011b9	48 8d 94 24 e0
	41 00 00	 lea	 rdx, QWORD PTR xfd$[rsp]
  011c1	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  011c6	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  011c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1655 : #endif /* defined(_MSVC_) */
; 1656 :                                 maxfd=maxfd<ca->sfd?ca->sfd:maxfd;

  011cf	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  011d4	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  011d7	39 44 24 6c	 cmp	 DWORD PTR maxfd$[rsp], eax
  011db	7d 11		 jge	 SHORT $LN153@commadpt_t
  011dd	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  011e2	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  011e5	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv720[rsp], eax
  011ec	eb 0b		 jmp	 SHORT $LN154@commadpt_t
$LN153@commadpt_t:
  011ee	8b 44 24 6c	 mov	 eax, DWORD PTR maxfd$[rsp]
  011f2	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv720[rsp], eax
$LN154@commadpt_t:
  011f9	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR tv720[rsp]
  01200	89 44 24 6c	 mov	 DWORD PTR maxfd$[rsp], eax

; 1657 :                                 ca->callissued=1;

  01204	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01209	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0120f	0f ba e8 10	 bts	 eax, 16
  01213	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  01218	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax
$LN79@commadpt_t:

; 1658 :                             }
; 1659 :                         }

  0121e	eb 1d		 jmp	 SHORT $LN77@commadpt_t
$LN76@commadpt_t:

; 1660 :                         /* Call did not succeed                                 */
; 1661 :                         /* Manual says : on a leased line, if DSR is not up     */
; 1662 :                         /* the terminate enable after a timeout.. That is       */
; 1663 :                         /* what the call just did (although the time out        */
; 1664 :                         /* was probably instantaneous)                          */
; 1665 :                         /* This is the equivalent of the comm equipment         */
; 1666 :                         /* being offline                                        */
; 1667 :                         /*       INITIATE A 3 SECOND TIMEOUT                    */
; 1668 :                         /* to prevent OSes from issuing a loop of ENABLES       */
; 1669 :                         else
; 1670 :                         {
; 1671 :                             seltv=commadpt_setto(&tv,ca->eto);

  01220	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01225	8b 50 28	 mov	 edx, DWORD PTR [rax+40]
  01228	48 8d 8c 24 a8
	00 00 00	 lea	 rcx, QWORD PTR tv$[rsp]
  01230	e8 00 00 00 00	 call	 commadpt_setto
  01235	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR seltv$[rsp], rax
$LN77@commadpt_t:

; 1672 :                         }
; 1673 :                         break;

  0123d	eb 24		 jmp	 SHORT $LN19@commadpt_t
$LN80@commadpt_t:

; 1674 :                     default:
; 1675 :                     case 3: /* DIAL=INOUT */
; 1676 :                     case 1: /* DIAL=IN */
; 1677 :                         /* Wait forever */
; 1678 :                         break;

  0123f	eb 22		 jmp	 SHORT $LN19@commadpt_t
$LN83@commadpt_t:

; 1679 :                     case 2: /* DIAL=OUT */
; 1680 :                         /* Makes no sense                               */
; 1681 :                         /* line must be enabled through a DIAL command  */
; 1682 :                         ca->curpending=COMMADPT_PEND_IDLE;

  01241	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01246	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1683 :                         signal_condition(&ca->ipc);

  0124a	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0124f	48 83 c0 58	 add	 rax, 88			; 00000058H
  01253	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159983
  0125a	48 8b c8	 mov	 rcx, rax
  0125d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition
$LN19@commadpt_t:

; 1684 :                         break;
; 1685 :                 }
; 1686 :                 /* For cases not DIAL=OUT, the listen is already started */
; 1687 :                 break;

  01263	e9 03 01 00 00	 jmp	 $LN12@commadpt_t
$LN84@commadpt_t:

; 1688 : 
; 1689 :                 /* The CCW Executor says : DISABLE */
; 1690 :             case COMMADPT_PEND_DISABLE:
; 1691 :                 if(ca->connect)

  01268	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0126d	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01273	d1 e8		 shr	 eax, 1
  01275	83 e0 01	 and	 eax, 1
  01278	85 c0		 test	 eax, eax
  0127a	74 33		 je	 SHORT $LN85@commadpt_t

; 1692 :                 {
; 1693 :                     close_socket(ca->sfd);

  0127c	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01281	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  01284	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1694 :                     ca->sfd=-1;

  0128a	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0128f	c7 40 4c ff ff
	ff ff		 mov	 DWORD PTR [rax+76], -1

; 1695 :                     ca->connect=0;

  01296	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0129b	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  012a1	83 e0 fd	 and	 eax, -3			; fffffffdH
  012a4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  012a9	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax
$LN85@commadpt_t:

; 1696 :                 }
; 1697 :                 ca->curpending=COMMADPT_PEND_IDLE;

  012af	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  012b4	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1698 :                 signal_condition(&ca->ipc);

  012b8	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  012bd	48 83 c0 58	 add	 rax, 88			; 00000058H
  012c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159986
  012c8	48 8b c8	 mov	 rcx, rax
  012cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1699 :                 break;

  012d1	e9 95 00 00 00	 jmp	 $LN12@commadpt_t
$LN86@commadpt_t:

; 1700 : 
; 1701 :                 /* A PREPARE has been issued */
; 1702 :             case COMMADPT_PEND_PREPARE:
; 1703 :                 if(!ca->connect || ca->inbfr.havedata)

  012d6	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  012db	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  012e1	d1 e8		 shr	 eax, 1
  012e3	83 e0 01	 and	 eax, 1
  012e6	85 c0		 test	 eax, eax
  012e8	74 12		 je	 SHORT $LN88@commadpt_t
  012ea	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  012ef	8b 80 98 00 00
	00		 mov	 eax, DWORD PTR [rax+152]
  012f5	83 e0 01	 and	 eax, 1
  012f8	85 c0		 test	 eax, eax
  012fa	74 24		 je	 SHORT $LN87@commadpt_t
$LN88@commadpt_t:

; 1704 :                 {
; 1705 :                     ca->curpending=COMMADPT_PEND_IDLE;

  012fc	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01301	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1706 :                     signal_condition(&ca->ipc);

  01305	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0130a	48 83 c0 58	 add	 rax, 88			; 00000058H
  0130e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159990
  01315	48 8b c8	 mov	 rcx, rax
  01318	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1707 :                     break;

  0131e	eb 4b		 jmp	 SHORT $LN12@commadpt_t
$LN87@commadpt_t:

; 1708 :                 }
; 1709 :                 FD_SET(ca->sfd,&rfd);

  01320	48 8d 94 24 c0
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  01328	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0132d	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  01330	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1710 :                 maxfd=maxfd<ca->sfd?ca->sfd:maxfd;

  01336	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0133b	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  0133e	39 44 24 6c	 cmp	 DWORD PTR maxfd$[rsp], eax
  01342	7d 11		 jge	 SHORT $LN155@commadpt_t
  01344	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01349	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  0134c	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv797[rsp], eax
  01353	eb 0b		 jmp	 SHORT $LN156@commadpt_t
$LN155@commadpt_t:
  01355	8b 44 24 6c	 mov	 eax, DWORD PTR maxfd$[rsp]
  01359	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv797[rsp], eax
$LN156@commadpt_t:
  01360	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR tv797[rsp]
  01367	89 44 24 6c	 mov	 DWORD PTR maxfd$[rsp], eax
$LN89@commadpt_t:
$LN12@commadpt_t:

; 1711 :                 break;
; 1712 : 
; 1713 :                 /* Don't know - shouldn't be here anyway */
; 1714 :             default:
; 1715 :                 break;
; 1716 :         }
; 1717 : 
; 1718 :         /* If the CA is shutting down, exit the loop now */
; 1719 :         if(ca_shutdown)

  0136b	83 7c 24 7c 00	 cmp	 DWORD PTR ca_shutdown$[rsp], 0
  01370	74 27		 je	 SHORT $LN90@commadpt_t

; 1720 :         {
; 1721 :             ca->curpending=COMMADPT_PEND_IDLE;

  01372	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01377	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1722 :             signal_condition(&ca->ipc);

  0137b	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01380	48 83 c0 58	 add	 rax, 88			; 00000058H
  01384	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159993
  0138b	48 8b c8	 mov	 rcx, rax
  0138e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1723 :             break;

  01394	e9 cb 0d 00 00	 jmp	 $LN11@commadpt_t
$LN90@commadpt_t:

; 1724 :         }
; 1725 : 
; 1726 :         /* Set the IPC pipe in the select */
; 1727 :         FD_SET(ca->pipe[0],&rfd);

  01399	b8 04 00 00 00	 mov	 eax, 4
  0139e	48 6b c0 00	 imul	 rax, rax, 0
  013a2	48 8d 94 24 c0
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  013aa	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  013af	8b 4c 01 70	 mov	 ecx, DWORD PTR [rcx+rax+112]
  013b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 1728 : 
; 1729 :         /* The the MAX File Desc for Arg 1 of SELECT */
; 1730 :         maxfd=maxfd<ca->pipe[0]?ca->pipe[0]:maxfd;

  013b9	b8 04 00 00 00	 mov	 eax, 4
  013be	48 6b c0 00	 imul	 rax, rax, 0
  013c2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  013c7	8b 44 01 70	 mov	 eax, DWORD PTR [rcx+rax+112]
  013cb	39 44 24 6c	 cmp	 DWORD PTR maxfd$[rsp], eax
  013cf	7d 1b		 jge	 SHORT $LN157@commadpt_t
  013d1	b8 04 00 00 00	 mov	 eax, 4
  013d6	48 6b c0 00	 imul	 rax, rax, 0
  013da	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  013df	8b 44 01 70	 mov	 eax, DWORD PTR [rcx+rax+112]
  013e3	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv817[rsp], eax
  013ea	eb 0b		 jmp	 SHORT $LN158@commadpt_t
$LN157@commadpt_t:
  013ec	8b 44 24 6c	 mov	 eax, DWORD PTR maxfd$[rsp]
  013f0	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv817[rsp], eax
$LN158@commadpt_t:
  013f7	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR tv817[rsp]
  013fe	89 44 24 6c	 mov	 DWORD PTR maxfd$[rsp], eax

; 1731 :         maxfd++;

  01402	8b 44 24 6c	 mov	 eax, DWORD PTR maxfd$[rsp]
  01406	ff c0		 inc	 eax
  01408	89 44 24 6c	 mov	 DWORD PTR maxfd$[rsp], eax

; 1732 : 
; 1733 :         /* Release the CA Lock before the select - all FDs addressed by the select are only */
; 1734 :         /* handled by the thread, and communication from CCW Executor/others to this thread */
; 1735 :         /* is via the pipe, which queues the info                                           */
; 1736 :         release_lock(&ca->lock);

  0140c	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01411	48 83 c0 68	 add	 rax, 104		; 00000068H
  01415	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159994
  0141c	48 8b c8	 mov	 rcx, rax
  0141f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 1737 : 
; 1738 :         if(ca->dev->ccwtrace)

  01425	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0142a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0142d	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01433	c1 e8 0f	 shr	 eax, 15
  01436	83 e0 01	 and	 eax, 1
  01439	85 c0		 test	 eax, eax
  0143b	0f 84 b0 00 00
	00		 je	 $LN91@commadpt_t

; 1739 :         {
; 1740 :                 WRMSG(HHC01077,"D",SSID_TO_LCSS(ca->dev->ssid),devnum,maxfd,commadpt_pendccw_text[ca->curpending]);

  01441	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01446	0f b6 40 3c	 movzx	 eax, BYTE PTR [rax+60]
  0144a	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR tv828[rsp], rax
  01452	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:commadpt_pendccw_text
  01459	48 89 8c 24 80
	01 00 00	 mov	 QWORD PTR tv1336[rsp], rcx
  01461	48 8b 54 24 60	 mov	 rdx, QWORD PTR ca$[rsp]
  01466	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  01469	0f b7 52 44	 movzx	 edx, WORD PTR [rdx+68]
  0146d	d1 fa		 sar	 edx, 1
  0146f	89 94 24 10 01
	00 00		 mov	 DWORD PTR tv837[rsp], edx
  01476	b9 01 00 00 00	 mov	 ecx, 1
  0147b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01481	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR tv1336[rsp]
  01489	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR tv828[rsp]
  01491	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  01495	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0149a	8b 4c 24 6c	 mov	 ecx, DWORD PTR maxfd$[rsp]
  0149e	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  014a2	8b 4c 24 70	 mov	 ecx, DWORD PTR devnum$[rsp]
  014a6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  014aa	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR tv837[rsp]
  014b1	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  014b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159996
  014bc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  014c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159997
  014c8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  014cd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  014d2	41 b9 03 00 00
	00		 mov	 r9d, 3
  014d8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159998
  014df	ba cc 06 00 00	 mov	 edx, 1740		; 000006ccH
  014e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159999
  014eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN91@commadpt_t:

; 1741 :         }
; 1742 :         rc=select(maxfd,&rfd,&wfd,&xfd,seltv);

  014f1	c7 44 24 30 ce
	06 00 00	 mov	 DWORD PTR [rsp+48], 1742 ; 000006ceH
  014f9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG160000
  01500	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  01505	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR seltv$[rsp]
  0150d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01512	4c 8d 8c 24 e0
	41 00 00	 lea	 r9, QWORD PTR xfd$[rsp]
  0151a	4c 8d 84 24 d0
	21 00 00	 lea	 r8, QWORD PTR wfd$[rsp]
  01522	48 8d 94 24 c0
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  0152a	8b 4c 24 6c	 mov	 ecx, DWORD PTR maxfd$[rsp]
  0152e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_select
  01534	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 1743 : 
; 1744 :         if(ca->dev->ccwtrace)

  01538	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0153d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01540	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01546	c1 e8 0f	 shr	 eax, 15
  01549	83 e0 01	 and	 eax, 1
  0154c	85 c0		 test	 eax, eax
  0154e	74 77		 je	 SHORT $LN92@commadpt_t

; 1745 :         {
; 1746 :                 WRMSG(HHC01078,"D",SSID_TO_LCSS(ca->dev->ssid),devnum,rc);

  01550	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01555	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01558	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0155c	d1 f8		 sar	 eax, 1
  0155e	89 84 24 14 01
	00 00		 mov	 DWORD PTR tv866[rsp], eax
  01565	b9 01 00 00 00	 mov	 ecx, 1
  0156a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01570	8b 4c 24 74	 mov	 ecx, DWORD PTR rc$[rsp]
  01574	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  01578	8b 4c 24 70	 mov	 ecx, DWORD PTR devnum$[rsp]
  0157c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01580	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR tv866[rsp]
  01587	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0158b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160002
  01592	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01597	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160003
  0159e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  015a3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  015a8	41 b9 03 00 00
	00		 mov	 r9d, 3
  015ae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160004
  015b5	ba d2 06 00 00	 mov	 edx, 1746		; 000006d2H
  015ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160005
  015c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN92@commadpt_t:

; 1747 :         }
; 1748 :         /* Get the CA lock back */
; 1749 :         obtain_lock(&ca->lock);

  015c7	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  015cc	48 83 c0 68	 add	 rax, 104		; 00000068H
  015d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160006
  015d7	48 8b c8	 mov	 rcx, rax
  015da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 1750 : 
; 1751 :         if(rc==-1)

  015e0	83 7c 24 74 ff	 cmp	 DWORD PTR rc$[rsp], -1
  015e5	0f 85 b3 00 00
	00		 jne	 $LN93@commadpt_t

; 1752 :         {
; 1753 :             if(errno==EINTR)

  015eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  015f1	83 38 04	 cmp	 DWORD PTR [rax], 4
  015f4	75 05		 jne	 SHORT $LN94@commadpt_t

; 1754 :                 continue;  /* thanks Fish! */

  015f6	e9 d1 f1 ff ff	 jmp	 $LN10@commadpt_t
$LN94@commadpt_t:

; 1755 :             WRMSG(HHC01000, "E",SSID_TO_LCSS(ca->dev->ssid),devnum,"select()",strerror(HSO_errno));

  015fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  01601	8b c8		 mov	 ecx, eax
  01603	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  01609	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR tv883[rsp], rax
  01611	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  01616	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  01619	0f b7 49 44	 movzx	 ecx, WORD PTR [rcx+68]
  0161d	d1 f9		 sar	 ecx, 1
  0161f	89 8c 24 18 01
	00 00		 mov	 DWORD PTR tv892[rsp], ecx
  01626	b9 01 00 00 00	 mov	 ecx, 1
  0162b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01631	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR tv883[rsp]
  01639	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0163e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160009
  01645	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0164a	8b 4c 24 70	 mov	 ecx, DWORD PTR devnum$[rsp]
  0164e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01652	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR tv892[rsp]
  01659	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0165d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160010
  01664	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01669	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160011
  01670	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01675	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0167a	41 b9 03 00 00
	00		 mov	 r9d, 3
  01680	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160012
  01687	ba db 06 00 00	 mov	 edx, 1755		; 000006dbH
  0168c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160013
  01693	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1756 :             break;

  01699	e9 c6 0a 00 00	 jmp	 $LN11@commadpt_t
$LN93@commadpt_t:

; 1757 :         }
; 1758 : 
; 1759 :         /* Select timed out */
; 1760 :         if(rc==0)

  0169e	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  016a3	0f 85 d3 00 00
	00		 jne	 $LN95@commadpt_t

; 1761 :         {
; 1762 :             pollact=0;  /* Poll not active */

  016a9	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR pollact$[rsp], 0

; 1763 :             if(ca->dev->ccwtrace)

  016b4	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  016b9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  016bc	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  016c2	c1 e8 0f	 shr	 eax, 15
  016c5	83 e0 01	 and	 eax, 1
  016c8	85 c0		 test	 eax, eax
  016ca	74 6f		 je	 SHORT $LN96@commadpt_t

; 1764 :             {
; 1765 :                 WRMSG(HHC01079,"D",SSID_TO_LCSS(ca->dev->ssid),devnum);

  016cc	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  016d1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  016d4	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  016d8	d1 f8		 sar	 eax, 1
  016da	89 84 24 1c 01
	00 00		 mov	 DWORD PTR tv913[rsp], eax
  016e1	b9 01 00 00 00	 mov	 ecx, 1
  016e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  016ec	8b 4c 24 70	 mov	 ecx, DWORD PTR devnum$[rsp]
  016f0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  016f4	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR tv913[rsp]
  016fb	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  016ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160016
  01706	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0170b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160017
  01712	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01717	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0171c	41 b9 03 00 00
	00		 mov	 r9d, 3
  01722	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160018
  01729	ba e5 06 00 00	 mov	 edx, 1765		; 000006e5H
  0172e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160019
  01735	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN96@commadpt_t:

; 1766 :             }
; 1767 :             /* Reset Call issued flag */
; 1768 :             ca->callissued=0;

  0173b	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01740	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01746	0f ba f0 10	 btr	 eax, 16
  0174a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  0174f	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 1769 : 
; 1770 :             /* timeout condition */
; 1771 :             signal_condition(&ca->ipc);

  01755	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0175a	48 83 c0 58	 add	 rax, 88			; 00000058H
  0175e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160020
  01765	48 8b c8	 mov	 rcx, rax
  01768	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1772 :             ca->curpending=COMMADPT_PEND_IDLE;

  0176e	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01773	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1773 :             continue;

  01777	e9 50 f0 ff ff	 jmp	 $LN159@commadpt_t
$LN95@commadpt_t:

; 1774 :         }
; 1775 : 
; 1776 :         if(FD_ISSET(ca->pipe[0],&rfd))

  0177c	b8 04 00 00 00	 mov	 eax, 4
  01781	48 6b c0 00	 imul	 rax, rax, 0
  01785	48 8d 94 24 c0
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  0178d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  01792	8b 4c 01 70	 mov	 ecx, DWORD PTR [rcx+rax+112]
  01796	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  0179c	85 c0		 test	 eax, eax
  0179e	0f 84 2b 02 00
	00		 je	 $LN97@commadpt_t

; 1777 :         {
; 1778 :             rc=read_pipe(ca->pipe[0],&pipecom,1);

  017a4	b8 04 00 00 00	 mov	 eax, 4
  017a9	48 6b c0 00	 imul	 rax, rax, 0
  017ad	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  017b2	48 63 44 01 70	 movsxd	 rax, DWORD PTR [rcx+rax+112]
  017b7	45 33 c9	 xor	 r9d, r9d
  017ba	41 b8 01 00 00
	00		 mov	 r8d, 1
  017c0	48 8d 54 24 78	 lea	 rdx, QWORD PTR pipecom$[rsp]
  017c5	48 8b c8	 mov	 rcx, rax
  017c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_recv
  017ce	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 1779 :             if(rc==0)

  017d2	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  017d7	0f 85 94 00 00
	00		 jne	 $LN98@commadpt_t

; 1780 :             {
; 1781 :                 if(ca->dev->ccwtrace)

  017dd	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  017e2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  017e5	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  017eb	c1 e8 0f	 shr	 eax, 15
  017ee	83 e0 01	 and	 eax, 1
  017f1	85 c0		 test	 eax, eax
  017f3	74 6f		 je	 SHORT $LN99@commadpt_t

; 1782 :                 {
; 1783 :                         WRMSG(HHC01080,"D",SSID_TO_LCSS(ca->dev->ssid),devnum);

  017f5	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  017fa	48 8b 00	 mov	 rax, QWORD PTR [rax]
  017fd	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01801	d1 f8		 sar	 eax, 1
  01803	89 84 24 20 01
	00 00		 mov	 DWORD PTR tv957[rsp], eax
  0180a	b9 01 00 00 00	 mov	 ecx, 1
  0180f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01815	8b 4c 24 70	 mov	 ecx, DWORD PTR devnum$[rsp]
  01819	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0181d	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR tv957[rsp]
  01824	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01828	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160024
  0182f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01834	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160025
  0183b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01840	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01845	41 b9 03 00 00
	00		 mov	 r9d, 3
  0184b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160026
  01852	ba f7 06 00 00	 mov	 edx, 1783		; 000006f7H
  01857	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160027
  0185e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN99@commadpt_t:

; 1784 :                 }
; 1785 :                 /* Pipe closed : terminate thread & release CA */
; 1786 :                 ca_shutdown=1;

  01864	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR ca_shutdown$[rsp], 1

; 1787 :                 break;

  0186c	e9 f3 08 00 00	 jmp	 $LN11@commadpt_t
$LN98@commadpt_t:

; 1788 :             }
; 1789 :             if(ca->dev->ccwtrace)

  01871	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01876	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01879	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0187f	c1 e8 0f	 shr	 eax, 15
  01882	83 e0 01	 and	 eax, 1
  01885	85 c0		 test	 eax, eax
  01887	0f 84 86 00 00
	00		 je	 $LN100@commadpt_t

; 1790 :             {
; 1791 :                 WRMSG(HHC01081,"D",SSID_TO_LCSS(ca->dev->ssid),devnum,pipecom);

  0188d	0f b6 44 24 78	 movzx	 eax, BYTE PTR pipecom$[rsp]
  01892	89 84 24 24 01
	00 00		 mov	 DWORD PTR tv973[rsp], eax
  01899	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  0189e	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  018a1	0f b7 49 44	 movzx	 ecx, WORD PTR [rcx+68]
  018a5	d1 f9		 sar	 ecx, 1
  018a7	89 8c 24 28 01
	00 00		 mov	 DWORD PTR tv979[rsp], ecx
  018ae	b9 01 00 00 00	 mov	 ecx, 1
  018b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  018b9	8b 8c 24 24 01
	00 00		 mov	 ecx, DWORD PTR tv973[rsp]
  018c0	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  018c4	8b 4c 24 70	 mov	 ecx, DWORD PTR devnum$[rsp]
  018c8	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  018cc	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR tv979[rsp]
  018d3	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  018d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160029
  018de	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  018e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160030
  018ea	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  018ef	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  018f4	41 b9 03 00 00
	00		 mov	 r9d, 3
  018fa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160031
  01901	ba ff 06 00 00	 mov	 edx, 1791		; 000006ffH
  01906	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160032
  0190d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN100@commadpt_t:

; 1792 :             }
; 1793 :             switch(pipecom)

  01913	0f b6 44 24 78	 movzx	 eax, BYTE PTR pipecom$[rsp]
  01918	88 84 24 2c 01
	00 00		 mov	 BYTE PTR tv991[rsp], al
  0191f	80 bc 24 2c 01
	00 00 01	 cmp	 BYTE PTR tv991[rsp], 1
  01927	74 0a		 je	 SHORT $LN102@commadpt_t
  01929	e9 9c 00 00 00	 jmp	 $LN104@commadpt_t

; 1794 :             {
; 1795 :                 case 0: /* redrive select */
; 1796 :                         /* occurs when a new CCW is being executed */
; 1797 :                     break;

  0192e	e9 97 00 00 00	 jmp	 $LN21@commadpt_t
$LN102@commadpt_t:

; 1798 :                 case 1: /* Halt current I/O */
; 1799 :                     ca->callissued=0;

  01933	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01938	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0193e	0f ba f0 10	 btr	 eax, 16
  01942	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  01947	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 1800 :                     if(ca->curpending==COMMADPT_PEND_DIAL)

  0194d	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01952	0f b6 40 3c	 movzx	 eax, BYTE PTR [rax+60]
  01956	83 f8 04	 cmp	 eax, 4
  01959	75 1a		 jne	 SHORT $LN103@commadpt_t

; 1801 :                     {
; 1802 :                         close_socket(ca->sfd);

  0195b	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01960	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  01963	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1803 :                         ca->sfd=-1;

  01969	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0196e	c7 40 4c ff ff
	ff ff		 mov	 DWORD PTR [rax+76], -1
$LN103@commadpt_t:

; 1804 :                     }
; 1805 :                     ca->curpending=COMMADPT_PEND_IDLE;

  01975	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0197a	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1806 :                     ca->haltpending=1;

  0197e	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01983	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01989	0f ba e8 08	 bts	 eax, 8
  0198d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  01992	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 1807 :                     signal_condition(&ca->ipc);

  01998	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0199d	48 83 c0 58	 add	 rax, 88			; 00000058H
  019a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160036
  019a8	48 8b c8	 mov	 rcx, rax
  019ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1808 :                     signal_condition(&ca->ipc_halt);    /* Tell the halt initiator too */

  019b1	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  019b6	48 83 c0 60	 add	 rax, 96			; 00000060H
  019ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160037
  019c1	48 8b c8	 mov	 rcx, rax
  019c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition
$LN104@commadpt_t:
$LN21@commadpt_t:

; 1809 :                     break;
; 1810 :                 default:
; 1811 :                     break;
; 1812 :             }
; 1813 :             continue;

  019ca	e9 fd ed ff ff	 jmp	 $LN160@commadpt_t
$LN97@commadpt_t:

; 1814 :         }
; 1815 :         if(ca->connect)

  019cf	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  019d4	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  019da	d1 e8		 shr	 eax, 1
  019dc	83 e0 01	 and	 eax, 1
  019df	85 c0		 test	 eax, eax
  019e1	0f 84 db 01 00
	00		 je	 $LN105@commadpt_t

; 1816 :         {
; 1817 :             if(FD_ISSET(ca->sfd,&rfd))

  019e7	48 8d 94 24 c0
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  019ef	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  019f4	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  019f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  019fd	85 c0		 test	 eax, eax
  019ff	0f 84 bd 01 00
	00		 je	 $LN106@commadpt_t

; 1818 :             {
; 1819 :                 int dopoll;
; 1820 :                 dopoll=0;

  01a05	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR dopoll$1[rsp], 0

; 1821 :                 if(ca->dev->ccwtrace)

  01a10	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01a15	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01a18	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01a1e	c1 e8 0f	 shr	 eax, 15
  01a21	83 e0 01	 and	 eax, 1
  01a24	85 c0		 test	 eax, eax
  01a26	74 6f		 je	 SHORT $LN107@commadpt_t

; 1822 :                 {
; 1823 :                         WRMSG(HHC01082,"D",SSID_TO_LCSS(ca->dev->ssid),devnum);

  01a28	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01a2d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01a30	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01a34	d1 f8		 sar	 eax, 1
  01a36	89 84 24 30 01
	00 00		 mov	 DWORD PTR tv1064[rsp], eax
  01a3d	b9 01 00 00 00	 mov	 ecx, 1
  01a42	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01a48	8b 4c 24 70	 mov	 ecx, DWORD PTR devnum$[rsp]
  01a4c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01a50	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR tv1064[rsp]
  01a57	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01a5b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160042
  01a62	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01a67	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160043
  01a6e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01a73	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01a78	41 b9 03 00 00
	00		 mov	 r9d, 3
  01a7e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160044
  01a85	ba 1f 07 00 00	 mov	 edx, 1823		; 0000071fH
  01a8a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160045
  01a91	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN107@commadpt_t:

; 1824 :                 }
; 1825 :                 if(pollact && IS_BSC_LNCTL(ca))

  01a97	83 bc 24 84 00
	00 00 00	 cmp	 DWORD PTR pollact$[rsp], 0
  01a9f	0f 84 9a 00 00
	00		 je	 $LN108@commadpt_t
  01aa5	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01aaa	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  01aae	83 f8 01	 cmp	 eax, 1
  01ab1	0f 85 88 00 00
	00		 jne	 $LN108@commadpt_t

; 1826 :                 {
; 1827 :                     switch(commadpt_read_poll(ca))

  01ab7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  01abc	e8 00 00 00 00	 call	 commadpt_read_poll
  01ac1	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv1081[rsp], eax
  01ac8	83 bc 24 9c 00
	00 00 00	 cmp	 DWORD PTR tv1081[rsp], 0
  01ad0	74 16		 je	 SHORT $LN109@commadpt_t
  01ad2	83 bc 24 9c 00
	00 00 01	 cmp	 DWORD PTR tv1081[rsp], 1
  01ada	74 19		 je	 SHORT $LN110@commadpt_t
  01adc	83 bc 24 9c 00
	00 00 02	 cmp	 DWORD PTR tv1081[rsp], 2
  01ae4	74 27		 je	 SHORT $LN111@commadpt_t
  01ae6	eb 4c		 jmp	 SHORT $LN112@commadpt_t
$LN109@commadpt_t:

; 1828 :                     {
; 1829 :                         case 0: /* Only SYNs received */
; 1830 :                                 /* Continue the timeout */
; 1831 :                             dopoll=1;

  01ae8	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR dopoll$1[rsp], 1

; 1832 :                             break;

  01af3	eb 4a		 jmp	 SHORT $LN23@commadpt_t
$LN110@commadpt_t:

; 1833 :                         case 1: /* EOT Received */
; 1834 :                             /* Send next poll sequence */
; 1835 :                             pollact=0;

  01af5	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR pollact$[rsp], 0

; 1836 :                             dopoll=1;

  01b00	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR dopoll$1[rsp], 1

; 1837 :                             break;

  01b0b	eb 32		 jmp	 SHORT $LN23@commadpt_t
$LN111@commadpt_t:

; 1838 :                         case 2: /* Something else received */
; 1839 :                             /* Index byte already stored in inbfr */
; 1840 :                             /* read the remaining data and return */
; 1841 :                             ca->pollsm=1;

  01b0d	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01b12	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01b18	0f ba e8 0e	 bts	 eax, 14
  01b1c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  01b21	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 1842 :                             dopoll=0;

  01b27	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR dopoll$1[rsp], 0

; 1843 :                             break;

  01b32	eb 0b		 jmp	 SHORT $LN23@commadpt_t
$LN112@commadpt_t:

; 1844 :                         default:
; 1845 :                             /* Same as 0 */
; 1846 :                             dopoll=1;

  01b34	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR dopoll$1[rsp], 1
$LN23@commadpt_t:
$LN108@commadpt_t:

; 1847 :                             break;
; 1848 :                     }
; 1849 :                 }
; 1850 :                 if(IS_ASYNC_LNCTL(ca) || !dopoll)

  01b3f	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01b44	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  01b48	83 f8 02	 cmp	 eax, 2
  01b4b	74 0a		 je	 SHORT $LN114@commadpt_t
  01b4d	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR dopoll$1[rsp], 0
  01b55	75 6b		 jne	 SHORT $LN113@commadpt_t
$LN114@commadpt_t:

; 1851 :                 {
; 1852 :                     commadpt_read(ca);

  01b57	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  01b5c	e8 00 00 00 00	 call	 commadpt_read

; 1853 :                     if(IS_ASYNC_LNCTL(ca) && !ca->eol_flag && !ca->telnet_int) {

  01b61	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01b66	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  01b6a	83 f8 02	 cmp	 eax, 2
  01b6d	75 2c		 jne	 SHORT $LN115@commadpt_t
  01b6f	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01b74	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01b7a	c1 e8 16	 shr	 eax, 22
  01b7d	83 e0 01	 and	 eax, 1
  01b80	85 c0		 test	 eax, eax
  01b82	75 17		 jne	 SHORT $LN115@commadpt_t
  01b84	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01b89	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01b8f	c1 e8 15	 shr	 eax, 21
  01b92	83 e0 01	 and	 eax, 1
  01b95	85 c0		 test	 eax, eax
  01b97	75 02		 jne	 SHORT $LN115@commadpt_t

; 1854 :                         /* async: EOL char not yet received and not attn: no data to read */
; 1855 :                         /* ... just remain in COMMADPT_PEND_READ state ... */
; 1856 :                     } else {

  01b99	eb 22		 jmp	 SHORT $LN116@commadpt_t
$LN115@commadpt_t:

; 1857 :                         ca->curpending=COMMADPT_PEND_IDLE;

  01b9b	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01ba0	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1858 :                         signal_condition(&ca->ipc);

  01ba4	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01ba9	48 83 c0 58	 add	 rax, 88			; 00000058H
  01bad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160055
  01bb4	48 8b c8	 mov	 rcx, rax
  01bb7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition
$LN116@commadpt_t:

; 1859 :                     }
; 1860 :                     continue;

  01bbd	e9 0a ec ff ff	 jmp	 $LN161@commadpt_t
$LN113@commadpt_t:
$LN106@commadpt_t:
$LN105@commadpt_t:

; 1861 :                 }
; 1862 :             }
; 1863 :         }
; 1864 :         if(ca->sfd>=0)

  01bc2	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01bc7	83 78 4c 00	 cmp	 DWORD PTR [rax+76], 0
  01bcb	0f 8c e5 02 00
	00		 jl	 $LN117@commadpt_t

; 1865 :         {
; 1866 : #if defined(_MSVC_)
; 1867 :             if(FD_ISSET(ca->sfd,&wfd) || FD_ISSET(ca->sfd,&xfd))

  01bd1	48 8d 94 24 d0
	21 00 00	 lea	 rdx, QWORD PTR wfd$[rsp]
  01bd9	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01bde	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  01be1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  01be7	85 c0		 test	 eax, eax
  01be9	75 1e		 jne	 SHORT $LN119@commadpt_t
  01beb	48 8d 94 24 e0
	41 00 00	 lea	 rdx, QWORD PTR xfd$[rsp]
  01bf3	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01bf8	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  01bfb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  01c01	85 c0		 test	 eax, eax
  01c03	0f 84 ad 02 00
	00		 je	 $LN118@commadpt_t
$LN119@commadpt_t:

; 1868 : #else /* defined(_MSVC_) */
; 1869 :             if(FD_ISSET(ca->sfd,&wfd))
; 1870 : #endif /* defined(_MSVC_) */
; 1871 :             {
; 1872 :                 if(ca->dev->ccwtrace)

  01c09	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01c0e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01c11	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01c17	c1 e8 0f	 shr	 eax, 15
  01c1a	83 e0 01	 and	 eax, 1
  01c1d	85 c0		 test	 eax, eax
  01c1f	74 6f		 je	 SHORT $LN120@commadpt_t

; 1873 :                 {
; 1874 :                         WRMSG(HHC01083,"D",SSID_TO_LCSS(ca->dev->ssid),devnum);

  01c21	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01c26	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01c29	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01c2d	d1 f8		 sar	 eax, 1
  01c2f	89 84 24 34 01
	00 00		 mov	 DWORD PTR tv1129[rsp], eax
  01c36	b9 01 00 00 00	 mov	 ecx, 1
  01c3b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01c41	8b 4c 24 70	 mov	 ecx, DWORD PTR devnum$[rsp]
  01c45	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01c49	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR tv1129[rsp]
  01c50	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01c54	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160060
  01c5b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01c60	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160061
  01c67	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01c6c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01c71	41 b9 03 00 00
	00		 mov	 r9d, 3
  01c77	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160062
  01c7e	ba 52 07 00 00	 mov	 edx, 1874		; 00000752H
  01c83	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160063
  01c8a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN120@commadpt_t:

; 1875 :                 }
; 1876 :                 switch(ca->curpending)

  01c90	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01c95	0f b6 40 3c	 movzx	 eax, BYTE PTR [rax+60]
  01c99	88 84 24 a0 00
	00 00		 mov	 BYTE PTR tv1142[rsp], al
  01ca0	80 bc 24 a0 00
	00 00 02	 cmp	 BYTE PTR tv1142[rsp], 2
  01ca8	0f 84 f8 01 00
	00		 je	 $LN127@commadpt_t
  01cae	80 bc 24 a0 00
	00 00 03	 cmp	 BYTE PTR tv1142[rsp], 3
  01cb6	74 0f		 je	 SHORT $LN122@commadpt_t
  01cb8	80 bc 24 a0 00
	00 00 04	 cmp	 BYTE PTR tv1142[rsp], 4
  01cc0	74 05		 je	 SHORT $LN121@commadpt_t
  01cc2	e9 ea 01 00 00	 jmp	 $LN128@commadpt_t
$LN121@commadpt_t:
$LN122@commadpt_t:

; 1877 :                 {
; 1878 :                     case COMMADPT_PEND_DIAL:
; 1879 :                     case COMMADPT_PEND_ENABLE:  /* Leased line enable call case */
; 1880 :                     soerrsz=sizeof(soerr);

  01cc7	c7 84 24 38 01
	00 00 04 00 00
	00		 mov	 DWORD PTR soerrsz$[rsp], 4

; 1881 :                     getsockopt(ca->sfd,SOL_SOCKET,SO_ERROR,(GETSET_SOCKOPT_T*)&soerr,&soerrsz);

  01cd2	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01cd7	48 63 40 4c	 movsxd	 rax, DWORD PTR [rax+76]
  01cdb	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR soerrsz$[rsp]
  01ce3	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  01ce8	4c 8d 8c 24 3c
	01 00 00	 lea	 r9, QWORD PTR soerr$[rsp]
  01cf0	41 b8 07 10 00
	00		 mov	 r8d, 4103		; 00001007H
  01cf6	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  01cfb	48 8b c8	 mov	 rcx, rax
  01cfe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getsockopt

; 1882 : #if defined(_MSVC_)
; 1883 :                     if(FD_ISSET(ca->sfd,&wfd))

  01d04	48 8d 94 24 d0
	21 00 00	 lea	 rdx, QWORD PTR wfd$[rsp]
  01d0c	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01d11	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  01d14	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  01d1a	85 c0		 test	 eax, eax
  01d1c	74 1e		 je	 SHORT $LN123@commadpt_t

; 1884 : #else /* defined(_MSVC_) */
; 1885 :                     if(soerr==0)
; 1886 : #endif /* defined(_MSVC_) */
; 1887 :                     {
; 1888 :                         ca->connect=1;

  01d1e	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01d23	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01d29	83 c8 02	 or	 eax, 2
  01d2c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  01d31	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 1889 :                     }

  01d37	e9 46 01 00 00	 jmp	 $LN124@commadpt_t
$LN123@commadpt_t:

; 1890 :                     else
; 1891 : #if defined(_MSVC_)
; 1892 :                     if(FD_ISSET(ca->sfd,&xfd))

  01d3c	48 8d 94 24 e0
	41 00 00	 lea	 rdx, QWORD PTR xfd$[rsp]
  01d44	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01d49	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  01d4c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  01d52	85 c0		 test	 eax, eax
  01d54	0f 84 28 01 00
	00		 je	 $LN125@commadpt_t

; 1893 : #else /* defined(_MSVC_) */
; 1894 :                     if(soerr!=0)
; 1895 : #endif /* defined(_MSVC_) */
; 1896 :                     {
; 1897 :                         WRMSG(HHC01005, "W",SSID_TO_LCSS(ca->dev->ssid),devnum,commadpt_pendccw_text[ca->curpending],strerror(soerr));

  01d5a	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR soerr$[rsp]
  01d61	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  01d67	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR tv1163[rsp], rax
  01d6f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  01d74	0f b6 49 3c	 movzx	 ecx, BYTE PTR [rcx+60]
  01d78	48 89 8c 24 a8
	01 00 00	 mov	 QWORD PTR tv1167[rsp], rcx
  01d80	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:commadpt_pendccw_text
  01d87	48 89 94 24 a0
	01 00 00	 mov	 QWORD PTR tv1337[rsp], rdx
  01d8f	4c 8b 44 24 60	 mov	 r8, QWORD PTR ca$[rsp]
  01d94	4d 8b 00	 mov	 r8, QWORD PTR [r8]
  01d97	45 0f b7 40 44	 movzx	 r8d, WORD PTR [r8+68]
  01d9c	41 d1 f8	 sar	 r8d, 1
  01d9f	44 89 84 24 40
	01 00 00	 mov	 DWORD PTR tv1175[rsp], r8d
  01da7	b9 01 00 00 00	 mov	 ecx, 1
  01dac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01db2	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR tv1163[rsp]
  01dba	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01dbf	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR tv1337[rsp]
  01dc7	48 8b 94 24 a8
	01 00 00	 mov	 rdx, QWORD PTR tv1167[rsp]
  01dcf	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  01dd3	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01dd8	8b 4c 24 70	 mov	 ecx, DWORD PTR devnum$[rsp]
  01ddc	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01de0	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR tv1175[rsp]
  01de7	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01deb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160069
  01df2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01df7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160070
  01dfe	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01e03	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01e08	41 b9 03 00 00
	00		 mov	 r9d, 3
  01e0e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160071
  01e15	ba 69 07 00 00	 mov	 edx, 1897		; 00000769H
  01e1a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160072
  01e21	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1898 :                         if(ca->curpending==COMMADPT_PEND_ENABLE)

  01e27	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01e2c	0f b6 40 3c	 movzx	 eax, BYTE PTR [rax+60]
  01e30	83 f8 03	 cmp	 eax, 3
  01e33	75 1a		 jne	 SHORT $LN126@commadpt_t

; 1899 :                         {
; 1900 :                             /* Ensure top of the loop doesn't restart a new call */
; 1901 :                             /* but starts a 3 second timer instead               */
; 1902 :                             ca->callissued=1;

  01e35	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01e3a	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01e40	0f ba e8 10	 bts	 eax, 16
  01e44	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  01e49	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax
$LN126@commadpt_t:

; 1903 :                         }
; 1904 :                         ca->connect=0;

  01e4f	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01e54	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01e5a	83 e0 fd	 and	 eax, -3			; fffffffdH
  01e5d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  01e62	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 1905 :                         close_socket(ca->sfd);

  01e68	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01e6d	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  01e70	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1906 :                         ca->sfd=-1;

  01e76	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01e7b	c7 40 4c ff ff
	ff ff		 mov	 DWORD PTR [rax+76], -1
$LN125@commadpt_t:
$LN124@commadpt_t:

; 1907 :                     }
; 1908 :                     signal_condition(&ca->ipc);

  01e82	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01e87	48 83 c0 58	 add	 rax, 88			; 00000058H
  01e8b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160074
  01e92	48 8b c8	 mov	 rcx, rax
  01e95	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1909 :                     ca->curpending=COMMADPT_PEND_IDLE;

  01e9b	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01ea0	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1910 :                     break;

  01ea4	eb 0b		 jmp	 SHORT $LN25@commadpt_t
$LN127@commadpt_t:

; 1911 : 
; 1912 :                     case COMMADPT_PEND_WRITE:
; 1913 :                     writecont=0;

  01ea6	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR writecont$[rsp], 0
$LN128@commadpt_t:
$LN25@commadpt_t:

; 1914 :                     break;
; 1915 : 
; 1916 :                     default:
; 1917 :                     break;
; 1918 :                 }
; 1919 :                 continue;

  01eb1	e9 16 e9 ff ff	 jmp	 $LN162@commadpt_t
$LN118@commadpt_t:
$LN117@commadpt_t:

; 1920 :             }
; 1921 :         }
; 1922 :         /* Test for incoming call */
; 1923 :         if(ca->listening)

  01eb6	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01ebb	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01ec1	c1 e8 07	 shr	 eax, 7
  01ec4	83 e0 01	 and	 eax, 1
  01ec7	85 c0		 test	 eax, eax
  01ec9	0f 84 90 02 00
	00		 je	 $LN129@commadpt_t

; 1924 :         {
; 1925 :             if(FD_ISSET(ca->lfd,&rfd))

  01ecf	48 8d 94 24 c0
	01 00 00	 lea	 rdx, QWORD PTR rfd$[rsp]
  01ed7	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01edc	8b 48 50	 mov	 ecx, DWORD PTR [rax+80]
  01edf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  01ee5	85 c0		 test	 eax, eax
  01ee7	0f 84 72 02 00
	00		 je	 $LN130@commadpt_t

; 1926 :             {
; 1927 :                 WRMSG(HHC01006, "I",SSID_TO_LCSS(ca->dev->ssid),devnum);

  01eed	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01ef2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01ef5	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01ef9	d1 f8		 sar	 eax, 1
  01efb	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv1220[rsp], eax
  01f02	b9 01 00 00 00	 mov	 ecx, 1
  01f07	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01f0d	8b 4c 24 70	 mov	 ecx, DWORD PTR devnum$[rsp]
  01f11	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01f15	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR tv1220[rsp]
  01f1c	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01f20	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160079
  01f27	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01f2c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160080
  01f33	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01f38	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01f3d	41 b9 03 00 00
	00		 mov	 r9d, 3
  01f43	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160081
  01f4a	ba 87 07 00 00	 mov	 edx, 1927		; 00000787H
  01f4f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160082
  01f56	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1928 :                 tempfd=accept(ca->lfd,NULL,0);

  01f5c	45 33 c0	 xor	 r8d, r8d
  01f5f	33 d2		 xor	 edx, edx
  01f61	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01f66	8b 48 50	 mov	 ecx, DWORD PTR [rax+80]
  01f69	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_accept
  01f6f	89 84 24 80 00
	00 00		 mov	 DWORD PTR tempfd$[rsp], eax

; 1929 :                 if(tempfd<0)

  01f76	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR tempfd$[rsp], 0
  01f7e	7d 05		 jge	 SHORT $LN131@commadpt_t

; 1930 :                 {
; 1931 :                     continue;

  01f80	e9 47 e8 ff ff	 jmp	 $LN163@commadpt_t
$LN131@commadpt_t:

; 1932 :                 }
; 1933 :                 /* If the line is already connected, just close */
; 1934 :                 /* this call                                    */
; 1935 :                 if(ca->connect)

  01f85	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01f8a	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01f90	d1 e8		 shr	 eax, 1
  01f92	83 e0 01	 and	 eax, 1
  01f95	85 c0		 test	 eax, eax
  01f97	74 12		 je	 SHORT $LN132@commadpt_t

; 1936 :                 {
; 1937 :                     close_socket(tempfd);

  01f99	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tempfd$[rsp]
  01fa0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1938 :                     continue;

  01fa6	e9 21 e8 ff ff	 jmp	 $LN164@commadpt_t
$LN132@commadpt_t:

; 1939 :                 }
; 1940 :                 /* Turn non-blocking I/O on */
; 1941 :                 /* set socket to NON-blocking mode */
; 1942 :                 socket_set_blocking_mode(tempfd,0);

  01fab	33 d2		 xor	 edx, edx
  01fad	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tempfd$[rsp]
  01fb4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_socket_set_blocking_mode

; 1943 : 
; 1944 :                 /* Check the line type & current operation */
; 1945 : 
; 1946 :                 /* if DIAL=IN or DIAL=INOUT or DIAL=NO */
; 1947 :                 if(ca->dialin || (ca->dialin+ca->dialout==0))

  01fba	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01fbf	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01fc5	c1 e8 03	 shr	 eax, 3
  01fc8	83 e0 01	 and	 eax, 1
  01fcb	85 c0		 test	 eax, eax
  01fcd	75 2c		 jne	 SHORT $LN134@commadpt_t
  01fcf	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  01fd4	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  01fda	c1 e8 03	 shr	 eax, 3
  01fdd	83 e0 01	 and	 eax, 1
  01fe0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  01fe5	8b 89 68 01 00
	00		 mov	 ecx, DWORD PTR [rcx+360]
  01feb	c1 e9 04	 shr	 ecx, 4
  01fee	83 e1 01	 and	 ecx, 1
  01ff1	03 c1		 add	 eax, ecx
  01ff3	85 c0		 test	 eax, eax
  01ff5	0f 85 57 01 00
	00		 jne	 $LN133@commadpt_t
$LN134@commadpt_t:

; 1948 :                 {
; 1949 :                     /* check if ENABLE is in progress */
; 1950 :                     if(ca->curpending==COMMADPT_PEND_ENABLE)

  01ffb	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  02000	0f b6 40 3c	 movzx	 eax, BYTE PTR [rax+60]
  02004	83 f8 03	 cmp	 eax, 3
  02007	0f 85 a7 00 00
	00		 jne	 $LN135@commadpt_t

; 1951 :                     {
; 1952 :                         /* Accept the call, indicate the line */
; 1953 :                         /* is connected and notify CCW exec   */
; 1954 :                         ca->curpending=COMMADPT_PEND_IDLE;

  0200d	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  02012	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1955 :                         ca->connect=1;

  02016	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0201b	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02021	83 c8 02	 or	 eax, 2
  02024	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  02029	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 1956 : 
; 1957 :                         /* dhd - Try to detect dropped connections */
; 1958 :                         SET_COMM_KEEPALIVE( tempfd, ca );

  0202f	48 8b 54 24 60	 mov	 rdx, QWORD PTR ca$[rsp]
  02034	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tempfd$[rsp]
  0203b	e8 00 00 00 00	 call	 SET_COMM_KEEPALIVE

; 1959 : 
; 1960 :                         ca->sfd=tempfd;

  02040	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  02045	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tempfd$[rsp]
  0204c	89 48 4c	 mov	 DWORD PTR [rax+76], ecx

; 1961 :                         signal_condition(&ca->ipc);

  0204f	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  02054	48 83 c0 58	 add	 rax, 88			; 00000058H
  02058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160088
  0205f	48 8b c8	 mov	 rcx, rax
  02062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1962 :                         if (IS_ASYNC_LNCTL(ca)) {

  02068	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0206d	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  02071	83 f8 02	 cmp	 eax, 2
  02074	75 39		 jne	 SHORT $LN136@commadpt_t

; 1963 :                             connect_message(ca->sfd, ca->devnum, ca->term, ca->binary_opt);

  02076	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0207b	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  02081	c1 e8 1f	 shr	 eax, 31
  02084	83 e0 01	 and	 eax, 1
  02087	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  0208c	0f b6 49 09	 movzx	 ecx, BYTE PTR [rcx+9]
  02090	48 8b 54 24 60	 mov	 rdx, QWORD PTR ca$[rsp]
  02095	0f b7 92 40 01
	00 00		 movzx	 edx, WORD PTR [rdx+320]
  0209c	44 8b c8	 mov	 r9d, eax
  0209f	44 8b c1	 mov	 r8d, ecx
  020a2	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  020a7	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  020aa	e8 00 00 00 00	 call	 connect_message
$LN136@commadpt_t:

; 1964 :                         }
; 1965 :                         continue;

  020af	e9 18 e7 ff ff	 jmp	 $LN165@commadpt_t
$LN135@commadpt_t:

; 1966 :                     }
; 1967 :                     /* if this is a leased line, accept the */
; 1968 :                     /* call anyway                          */
; 1969 :                     if(ca->dialin==0)

  020b4	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  020b9	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  020bf	c1 e8 03	 shr	 eax, 3
  020c2	83 e0 01	 and	 eax, 1
  020c5	85 c0		 test	 eax, eax
  020c7	0f 85 85 00 00
	00		 jne	 $LN137@commadpt_t

; 1970 :                     {
; 1971 :                         ca->connect=1;

  020cd	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  020d2	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  020d8	83 c8 02	 or	 eax, 2
  020db	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  020e0	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 1972 : 
; 1973 :                         /* dhd - Try to detect dropped connections */
; 1974 :                         SET_COMM_KEEPALIVE( tempfd, ca );

  020e6	48 8b 54 24 60	 mov	 rdx, QWORD PTR ca$[rsp]
  020eb	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tempfd$[rsp]
  020f2	e8 00 00 00 00	 call	 SET_COMM_KEEPALIVE

; 1975 : 
; 1976 :                         ca->sfd=tempfd;

  020f7	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  020fc	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tempfd$[rsp]
  02103	89 48 4c	 mov	 DWORD PTR [rax+76], ecx

; 1977 :                         if (IS_ASYNC_LNCTL(ca)) {

  02106	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0210b	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  0210f	83 f8 02	 cmp	 eax, 2
  02112	75 39		 jne	 SHORT $LN138@commadpt_t

; 1978 :                             connect_message(ca->sfd, ca->devnum, ca->term, ca->binary_opt);

  02114	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  02119	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0211f	c1 e8 1f	 shr	 eax, 31
  02122	83 e0 01	 and	 eax, 1
  02125	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ca$[rsp]
  0212a	0f b6 49 09	 movzx	 ecx, BYTE PTR [rcx+9]
  0212e	48 8b 54 24 60	 mov	 rdx, QWORD PTR ca$[rsp]
  02133	0f b7 92 40 01
	00 00		 movzx	 edx, WORD PTR [rdx+320]
  0213a	44 8b c8	 mov	 r9d, eax
  0213d	44 8b c1	 mov	 r8d, ecx
  02140	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  02145	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  02148	e8 00 00 00 00	 call	 connect_message
$LN138@commadpt_t:

; 1979 :                         }
; 1980 :                         continue;

  0214d	e9 7a e6 ff ff	 jmp	 $LN166@commadpt_t
$LN137@commadpt_t:
$LN133@commadpt_t:

; 1981 :                     }
; 1982 :                 }
; 1983 :                 /* All other cases : just reject the call */
; 1984 :                 close_socket(tempfd);

  02152	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tempfd$[rsp]
  02159	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket
$LN130@commadpt_t:
$LN129@commadpt_t:

; 1985 :             }
; 1986 :         }
; 1987 :     }

  0215f	e9 68 e6 ff ff	 jmp	 $LN167@commadpt_t
$LN11@commadpt_t:

; 1988 :     ca->curpending=COMMADPT_PEND_CLOSED;

  02164	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  02169	c6 40 3c 09	 mov	 BYTE PTR [rax+60], 9

; 1989 :     /* Check if we already signaled the init process  */
; 1990 :     if(!init_signaled)

  0216d	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR init_signaled$[rsp], 0
  02175	75 19		 jne	 SHORT $LN139@commadpt_t

; 1991 :     {
; 1992 :         signal_condition(&ca->ipc);

  02177	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  0217c	48 83 c0 58	 add	 rax, 88			; 00000058H
  02180	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160093
  02187	48 8b c8	 mov	 rcx, rax
  0218a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition
$LN139@commadpt_t:

; 1993 :     }
; 1994 :     /* The CA is shutting down - terminate the thread */
; 1995 :     /* NOTE : the requestor was already notified upon */
; 1996 :     /*        detection of PEND_SHTDOWN. However      */
; 1997 :     /*        the requestor will only run when the    */
; 1998 :     /*        lock is released, because back          */
; 1999 :     /*        notification was made while holding     */
; 2000 :     /*        the lock                                */
; 2001 :     LOG_THREAD_END( threadname );

  02190	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fthread_self
  02196	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160094
  0219d	8b c8		 mov	 ecx, eax
  0219f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_get_thread_prio
  021a5	89 84 24 48 01
	00 00		 mov	 DWORD PTR tv1316[rsp], eax
  021ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fthread_self
  021b2	89 84 24 4c 01
	00 00		 mov	 DWORD PTR tv1321[rsp], eax
  021b9	b9 01 00 00 00	 mov	 ecx, 1
  021be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  021c4	48 8d 8c 24 f0
	61 00 00	 lea	 rcx, QWORD PTR threadname$[rsp]
  021cc	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  021d1	8b 8c 24 48 01
	00 00		 mov	 ecx, DWORD PTR tv1316[rsp]
  021d8	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  021dc	8b 8c 24 4c 01
	00 00		 mov	 ecx, DWORD PTR tv1321[rsp]
  021e3	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  021e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160095
  021ee	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  021f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160096
  021fa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  021ff	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02204	41 b9 03 00 00
	00		 mov	 r9d, 3
  0220a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160097
  02211	ba d1 07 00 00	 mov	 edx, 2001		; 000007d1H
  02216	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160098
  0221d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2002 :     release_lock(&ca->lock);

  02223	48 8b 44 24 60	 mov	 rax, QWORD PTR ca$[rsp]
  02228	48 83 c0 68	 add	 rax, 104		; 00000068H
  0222c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160099
  02233	48 8b c8	 mov	 rcx, rax
  02236	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2003 :     return NULL;

  0223c	33 c0		 xor	 eax, eax
$LN1@commadpt_t:

; 2004 : }

  0223e	48 8b 8c 24 18
	62 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  02246	48 33 cc	 xor	 rcx, rsp
  02249	e8 00 00 00 00	 call	 __security_check_cookie
  0224e	48 81 c4 28 62
	00 00		 add	 rsp, 25128		; 00006228H
  02255	c3		 ret	 0
  02256	66 90		 npad	 2
$LN168@commadpt_t:
  02258	00 00 00 00	 DD	 $LN46@commadpt_t
  0225c	00 00 00 00	 DD	 $LN59@commadpt_t
  02260	00 00 00 00	 DD	 $LN72@commadpt_t
  02264	00 00 00 00	 DD	 $LN68@commadpt_t
  02268	00 00 00 00	 DD	 $LN84@commadpt_t
  0226c	00 00 00 00	 DD	 $LN86@commadpt_t
  02270	00 00 00 00	 DD	 $LN51@commadpt_t
  02274	00 00 00 00	 DD	 $LN89@commadpt_t
  02278	00 00 00 00	 DD	 $LN89@commadpt_t
  0227c	00 00 00 00	 DD	 $LN44@commadpt_t
commadpt_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
rc$1 = 96
tv71 = 100
tv76 = 104
tv134 = 108
tv139 = 112
tv152 = 116
tv157 = 120
tv180 = 124
tv185 = 128
idle$2 = 132
intv$3 = 136
cnt$4 = 140
tv206 = 144
tv211 = 148
tv128 = 152
tv174 = 160
tempfd$ = 192
ca$ = 200
SET_COMM_KEEPALIVE PROC

; 1198 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 1199 :     if (ca->kaidle && ca->kaintv && ca->kacnt)

  00010	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00018	83 78 2c 00	 cmp	 DWORD PTR [rax+44], 0
  0001c	0f 84 ef 03 00
	00		 je	 $LN2@SET_COMM_K
  00022	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  0002a	83 78 30 00	 cmp	 DWORD PTR [rax+48], 0
  0002e	0f 84 dd 03 00
	00		 je	 $LN2@SET_COMM_K
  00034	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  0003c	83 78 34 00	 cmp	 DWORD PTR [rax+52], 0
  00040	0f 84 cb 03 00
	00		 je	 $LN2@SET_COMM_K

; 1200 :     {
; 1201 : #if !defined( HAVE_BASIC_KEEPALIVE )
; 1202 : 
; 1203 :         UNREFERENCED( tempfd );
; 1204 : 
; 1205 :         // "%1d:%04X COMM: This build of Hercules does not support TCP keepalive"
; 1206 :         WRMSG( HHC01094, "E", SSID_TO_LCSS( ca->dev->ssid ), ca->devnum );
; 1207 : 
; 1208 : #else // basic, partial or full: must attempt setting keepalive
; 1209 : 
; 1210 :         int rc, idle, intv, cnt;
; 1211 : 
; 1212 :   #if !defined( HAVE_FULL_KEEPALIVE ) && !defined( HAVE_PARTIAL_KEEPALIVE )
; 1213 : 
; 1214 :         // "%1d:%04X COMM: This build of Hercules has only basic TCP keepalive support"
; 1215 :         WRMSG( HHC01095, "W", SSID_TO_LCSS( ca->dev->ssid ), ca->devnum );
; 1216 : 
; 1217 :   #elif !defined( HAVE_FULL_KEEPALIVE )
; 1218 : 
; 1219 :         // "%1d:%04X COMM: This build of Hercules has only partial TCP keepalive support"
; 1220 :         WRMSG( HHC01096, "W", SSID_TO_LCSS( ca->dev->ssid ), ca->devnum );

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  0004e	0f b7 80 40 01
	00 00		 movzx	 eax, WORD PTR [rax+320]
  00055	89 44 24 64	 mov	 DWORD PTR tv71[rsp], eax
  00059	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  00061	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00064	0f b7 49 44	 movzx	 ecx, WORD PTR [rcx+68]
  00068	d1 f9		 sar	 ecx, 1
  0006a	89 4c 24 68	 mov	 DWORD PTR tv76[rsp], ecx
  0006e	b9 01 00 00 00	 mov	 ecx, 1
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00079	8b 4c 24 64	 mov	 ecx, DWORD PTR tv71[rsp]
  0007d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00081	8b 4c 24 68	 mov	 ecx, DWORD PTR tv76[rsp]
  00085	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159766
  00090	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00095	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159767
  0009c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000a1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a6	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159768
  000b3	ba c4 04 00 00	 mov	 edx, 1220		; 000004c4H
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159769
  000bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1221 : 
; 1222 :   #endif // (basic or partial)
; 1223 : 
; 1224 :         /* Try setting the values first */
; 1225 :         rc = set_socket_keepalive( tempfd,

  000c5	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  000cd	44 8b 48 34	 mov	 r9d, DWORD PTR [rax+52]
  000d1	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  000d9	44 8b 40 30	 mov	 r8d, DWORD PTR [rax+48]
  000dd	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  000e5	8b 50 2c	 mov	 edx, DWORD PTR [rax+44]
  000e8	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR tempfd$[rsp]
  000ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_set_socket_keepalive
  000f5	89 44 24 60	 mov	 DWORD PTR rc$1[rsp], eax

; 1226 :             ca->kaidle, ca->kaintv, ca->kacnt );
; 1227 : 
; 1228 :         if (rc < 0)

  000f9	83 7c 24 60 00	 cmp	 DWORD PTR rc$1[rsp], 0
  000fe	0f 8d b3 00 00
	00		 jge	 $LN3@SET_COMM_K

; 1229 :         {
; 1230 :             // "%1d:%04X COMM: error in function %s: %s"
; 1231 :             WRMSG( HHC01000, "E",

  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  0010a	8b c8		 mov	 ecx, eax
  0010c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00112	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv128[rsp], rax
  0011a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  00122	0f b7 89 40 01
	00 00		 movzx	 ecx, WORD PTR [rcx+320]
  00129	89 4c 24 6c	 mov	 DWORD PTR tv134[rsp], ecx
  0012d	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR ca$[rsp]
  00135	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00138	0f b7 52 44	 movzx	 edx, WORD PTR [rdx+68]
  0013c	d1 fa		 sar	 edx, 1
  0013e	89 54 24 70	 mov	 DWORD PTR tv139[rsp], edx
  00142	b9 01 00 00 00	 mov	 ecx, 1
  00147	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0014d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv128[rsp]
  00155	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0015a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159771
  00161	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00166	8b 4c 24 6c	 mov	 ecx, DWORD PTR tv134[rsp]
  0016a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0016e	8b 4c 24 70	 mov	 ecx, DWORD PTR tv139[rsp]
  00172	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00176	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159772
  0017d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00182	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159773
  00189	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0018e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00193	41 b9 03 00 00
	00		 mov	 r9d, 3
  00199	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159774
  001a0	ba d1 04 00 00	 mov	 edx, 1233		; 000004d1H
  001a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159775
  001ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1232 :                 SSID_TO_LCSS( ca->dev->ssid ), ca->devnum,
; 1233 :                 "set_socket_keepalive()", strerror( HSO_errno ));
; 1234 :             return;

  001b2	e9 5a 02 00 00	 jmp	 $LN1@SET_COMM_K
$LN3@SET_COMM_K:

; 1235 :         }
; 1236 : 
; 1237 :         /* Issue partial success warning if needed */
; 1238 :         if (rc > 0)

  001b7	83 7c 24 60 00	 cmp	 DWORD PTR rc$1[rsp], 0
  001bc	7e 7f		 jle	 SHORT $LN4@SET_COMM_K

; 1239 :             // "%1d:%04X COMM: Not all TCP keepalive settings honored"
; 1240 :             WRMSG( HHC01092, "W",

  001be	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  001c6	0f b7 80 40 01
	00 00		 movzx	 eax, WORD PTR [rax+320]
  001cd	89 44 24 74	 mov	 DWORD PTR tv152[rsp], eax
  001d1	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  001d9	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001dc	0f b7 49 44	 movzx	 ecx, WORD PTR [rcx+68]
  001e0	d1 f9		 sar	 ecx, 1
  001e2	89 4c 24 78	 mov	 DWORD PTR tv157[rsp], ecx
  001e6	b9 01 00 00 00	 mov	 ecx, 1
  001eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001f1	8b 4c 24 74	 mov	 ecx, DWORD PTR tv152[rsp]
  001f5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001f9	8b 4c 24 78	 mov	 ecx, DWORD PTR tv157[rsp]
  001fd	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00201	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159777
  00208	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0020d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159778
  00214	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00219	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0021e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00224	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159779
  0022b	ba d9 04 00 00	 mov	 edx, 1241		; 000004d9H
  00230	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159780
  00237	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN4@SET_COMM_K:

; 1241 :                 SSID_TO_LCSS( ca->dev->ssid ), ca->devnum );
; 1242 : 
; 1243 :         /* Now see which values the system actually accepted */
; 1244 :         if (get_socket_keepalive( tempfd, &idle, &intv, &cnt ) < 0)

  0023d	4c 8d 8c 24 8c
	00 00 00	 lea	 r9, QWORD PTR cnt$4[rsp]
  00245	4c 8d 84 24 88
	00 00 00	 lea	 r8, QWORD PTR intv$3[rsp]
  0024d	48 8d 94 24 84
	00 00 00	 lea	 rdx, QWORD PTR idle$2[rsp]
  00255	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR tempfd$[rsp]
  0025c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_get_socket_keepalive
  00262	85 c0		 test	 eax, eax
  00264	0f 8d b9 00 00
	00		 jge	 $LN5@SET_COMM_K

; 1245 :         {
; 1246 :             // "%1d:%04X COMM: error in function %s: %s"
; 1247 :             WRMSG( HHC01000, "E",

  0026a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00270	8b c8		 mov	 ecx, eax
  00272	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00278	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv174[rsp], rax
  00280	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  00288	0f b7 89 40 01
	00 00		 movzx	 ecx, WORD PTR [rcx+320]
  0028f	89 4c 24 7c	 mov	 DWORD PTR tv180[rsp], ecx
  00293	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR ca$[rsp]
  0029b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0029e	0f b7 52 44	 movzx	 edx, WORD PTR [rdx+68]
  002a2	d1 fa		 sar	 edx, 1
  002a4	89 94 24 80 00
	00 00		 mov	 DWORD PTR tv185[rsp], edx
  002ab	b9 01 00 00 00	 mov	 ecx, 1
  002b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002b6	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv174[rsp]
  002be	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  002c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159782
  002ca	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  002cf	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv180[rsp]
  002d3	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  002d7	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv185[rsp]
  002de	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  002e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159783
  002e9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159784
  002f5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002fa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002ff	41 b9 03 00 00
	00		 mov	 r9d, 3
  00305	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159785
  0030c	ba e1 04 00 00	 mov	 edx, 1249		; 000004e1H
  00311	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159786
  00318	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1248 :                 SSID_TO_LCSS( ca->dev->ssid ), ca->devnum,
; 1249 :                 "get_socket_keepalive()", strerror( HSO_errno ));
; 1250 :             return;

  0031e	e9 ee 00 00 00	 jmp	 $LN1@SET_COMM_K
$LN5@SET_COMM_K:

; 1251 :         }
; 1252 : 
; 1253 :         /* Save values actually being used for later */
; 1254 :         ca->kaidle = idle;

  00323	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  0032b	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR idle$2[rsp]
  00332	89 48 2c	 mov	 DWORD PTR [rax+44], ecx

; 1255 :         ca->kaintv = intv;

  00335	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  0033d	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR intv$3[rsp]
  00344	89 48 30	 mov	 DWORD PTR [rax+48], ecx

; 1256 :         ca->kacnt  = cnt;

  00347	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  0034f	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR cnt$4[rsp]
  00356	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 1257 : 
; 1258 :         // "%1d:%04X COMM: Keepalive: (%d,%d,%d)"
; 1259 :         WRMSG( HHC01093, "I",

  00359	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00361	0f b7 80 40 01
	00 00		 movzx	 eax, WORD PTR [rax+320]
  00368	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv206[rsp], eax
  0036f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  00377	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0037a	0f b7 49 44	 movzx	 ecx, WORD PTR [rcx+68]
  0037e	d1 f9		 sar	 ecx, 1
  00380	89 8c 24 94 00
	00 00		 mov	 DWORD PTR tv211[rsp], ecx
  00387	b9 01 00 00 00	 mov	 ecx, 1
  0038c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00392	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  0039a	8b 49 34	 mov	 ecx, DWORD PTR [rcx+52]
  0039d	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  003a1	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  003a9	8b 49 30	 mov	 ecx, DWORD PTR [rcx+48]
  003ac	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  003b0	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  003b8	8b 49 2c	 mov	 ecx, DWORD PTR [rcx+44]
  003bb	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  003bf	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv206[rsp]
  003c6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  003ca	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv211[rsp]
  003d1	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159787
  003dc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159788
  003e8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003ed	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003f2	41 b9 03 00 00
	00		 mov	 r9d, 3
  003f8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159789
  003ff	ba ed 04 00 00	 mov	 edx, 1261		; 000004edH
  00404	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159790
  0040b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN2@SET_COMM_K:
$LN1@SET_COMM_K:

; 1260 :             SSID_TO_LCSS( ca->dev->ssid ), ca->devnum,
; 1261 :             ca->kaidle, ca->kaintv, ca->kacnt );
; 1262 : 
; 1263 : #endif // (KEEPALIVE)
; 1264 :     }
; 1265 : }

  00411	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00418	c3		 ret	 0
SET_COMM_KEEPALIVE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
tv$ = 8
tmo$ = 16
commadpt_setto PROC

; 1176 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1177 :     if(tmo!=0)

  00009	83 7c 24 10 00	 cmp	 DWORD PTR tmo$[rsp], 0
  0000e	74 56		 je	 SHORT $LN2@commadpt_s

; 1178 :     {
; 1179 :         if(tmo<0)

  00010	83 7c 24 10 00	 cmp	 DWORD PTR tmo$[rsp], 0
  00015	7d 19		 jge	 SHORT $LN3@commadpt_s

; 1180 :         {
; 1181 :             tv->tv_sec=0;

  00017	48 8b 44 24 08	 mov	 rax, QWORD PTR tv$[rsp]
  0001c	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 1182 :             tv->tv_usec=1;

  00022	48 8b 44 24 08	 mov	 rax, QWORD PTR tv$[rsp]
  00027	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [rax+4], 1

; 1183 :         }

  0002e	eb 2f		 jmp	 SHORT $LN4@commadpt_s
$LN3@commadpt_s:

; 1184 :         else
; 1185 :         {
; 1186 :             tv->tv_sec=tmo/1000;

  00030	8b 44 24 10	 mov	 eax, DWORD PTR tmo$[rsp]
  00034	99		 cdq
  00035	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  0003a	f7 f9		 idiv	 ecx
  0003c	48 8b 4c 24 08	 mov	 rcx, QWORD PTR tv$[rsp]
  00041	89 01		 mov	 DWORD PTR [rcx], eax

; 1187 :             tv->tv_usec=(tmo%1000)*1000;

  00043	8b 44 24 10	 mov	 eax, DWORD PTR tmo$[rsp]
  00047	99		 cdq
  00048	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  0004d	f7 f9		 idiv	 ecx
  0004f	8b c2		 mov	 eax, edx
  00051	69 c0 e8 03 00
	00		 imul	 eax, eax, 1000		; 000003e8H
  00057	48 8b 4c 24 08	 mov	 rcx, QWORD PTR tv$[rsp]
  0005c	89 41 04	 mov	 DWORD PTR [rcx+4], eax
$LN4@commadpt_s:

; 1188 :         }
; 1189 :         return(tv);

  0005f	48 8b 44 24 08	 mov	 rax, QWORD PTR tv$[rsp]
  00064	eb 02		 jmp	 SHORT $LN1@commadpt_s
$LN2@commadpt_s:

; 1190 :     }
; 1191 :     return(NULL);

  00066	33 c0		 xor	 eax, eax
$LN1@commadpt_s:

; 1192 : }

  00068	c3		 ret	 0
commadpt_setto ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
rc$ = 32
gotdata$ = 36
bfr$ = 48
__$ArrayPad$ = 304
ca$ = 336
commadpt_read PROC

; 1119 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1120 : BYTE    bfr[256];
; 1121 : int     gotdata;
; 1122 : int     rc;
; 1123 : 
; 1124 :     gotdata=0;

  0001e	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR gotdata$[rsp], 0
$LN2@commadpt_r:

; 1125 :     for (;;)
; 1126 :     {
; 1127 :      /* if (IS_BSC_LNCTL(ca))
; 1128 :         {
; 1129 :             rc=read_socket(ca->sfd,bfr,256);
; 1130 :         }
; 1131 :         else
; 1132 :         { */
; 1133 :             /* read_socket has changed from 3.04 to 3.06 - async needs old way */
; 1134 :             /* is BSC similarly broken? */
; 1135 :             /* --> Yes, it is! I propose to fully remove the if/else construct     */
; 1136 :             /*                 i.e. to handle BSC and async identically here (JW)  */
; 1137 : #ifdef _MSVC_
; 1138 :             rc=recv(ca->sfd,bfr,256,0);

  00026	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  0002e	48 63 40 4c	 movsxd	 rax, DWORD PTR [rax+76]
  00032	45 33 c9	 xor	 r9d, r9d
  00035	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  0003b	48 8d 54 24 30	 lea	 rdx, QWORD PTR bfr$[rsp]
  00040	48 8b c8	 mov	 rcx, rax
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_recv
  00049	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 1139 : #else
; 1140 :             rc=read(ca->sfd,bfr,256);
; 1141 : #endif
; 1142 :      /* } */
; 1143 :         if (rc <= 0)

  0004d	83 7c 24 20 00	 cmp	 DWORD PTR rc$[rsp], 0
  00052	7f 02		 jg	 SHORT $LN5@commadpt_r

; 1144 :             break;

  00054	eb 79		 jmp	 SHORT $LN3@commadpt_r
$LN5@commadpt_r:

; 1145 :         logdump("RECV",ca->dev,bfr,rc);

  00056	48 63 44 24 20	 movsxd	 rax, DWORD PTR rc$[rsp]
  0005b	4c 8b c8	 mov	 r9, rax
  0005e	4c 8d 44 24 30	 lea	 r8, QWORD PTR bfr$[rsp]
  00063	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  0006b	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159736
  00075	e8 00 00 00 00	 call	 logdump

; 1146 :         if (IS_ASYNC_LNCTL(ca))

  0007a	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00082	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00086	83 f8 02	 cmp	 eax, 2
  00089	75 19		 jne	 SHORT $LN6@commadpt_r

; 1147 :         {
; 1148 :             commadpt_read_tty(ca, bfr, rc);

  0008b	44 8b 44 24 20	 mov	 r8d, DWORD PTR rc$[rsp]
  00090	48 8d 54 24 30	 lea	 rdx, QWORD PTR bfr$[rsp]
  00095	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  0009d	e8 00 00 00 00	 call	 commadpt_read_tty

; 1149 :         }

  000a2	eb 1e		 jmp	 SHORT $LN7@commadpt_r
$LN6@commadpt_r:

; 1150 :         else
; 1151 :         {
; 1152 :             commadpt_ring_pushbfr(&ca->inbfr,bfr,(size_t)rc);

  000a4	48 63 44 24 20	 movsxd	 rax, DWORD PTR rc$[rsp]
  000a9	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  000b1	48 83 c1 78	 add	 rcx, 120		; 00000078H
  000b5	4c 8b c0	 mov	 r8, rax
  000b8	48 8d 54 24 30	 lea	 rdx, QWORD PTR bfr$[rsp]
  000bd	e8 00 00 00 00	 call	 commadpt_ring_pushbfr
$LN7@commadpt_r:

; 1153 :         }  /* end of else (async) */
; 1154 :         gotdata=1;

  000c2	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR gotdata$[rsp], 1

; 1155 :     }

  000ca	e9 57 ff ff ff	 jmp	 $LN2@commadpt_r
$LN3@commadpt_r:

; 1156 :     if(!gotdata)

  000cf	83 7c 24 24 00	 cmp	 DWORD PTR gotdata$[rsp], 0
  000d4	0f 85 8e 00 00
	00		 jne	 $LN8@commadpt_r

; 1157 :     {
; 1158 :         if(ca->connect)

  000da	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  000e2	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  000e8	d1 e8		 shr	 eax, 1
  000ea	83 e0 01	 and	 eax, 1
  000ed	85 c0		 test	 eax, eax
  000ef	74 77		 je	 SHORT $LN9@commadpt_r

; 1159 :         {
; 1160 :             ca->connect=0;

  000f1	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  000f9	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  000ff	83 e0 fd	 and	 eax, -3			; fffffffdH
  00102	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  0010a	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 1161 :             close_socket(ca->sfd);

  00110	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00118	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  0011b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 1162 :             ca->sfd=-1;

  00121	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00129	c7 40 4c ff ff
	ff ff		 mov	 DWORD PTR [rax+76], -1

; 1163 :             if(ca->curpending!=COMMADPT_PEND_IDLE)

  00130	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00138	0f b6 40 3c	 movzx	 eax, BYTE PTR [rax+60]
  0013c	85 c0		 test	 eax, eax
  0013e	74 28		 je	 SHORT $LN10@commadpt_r

; 1164 :             {
; 1165 :                 ca->curpending=COMMADPT_PEND_IDLE;

  00140	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00148	c6 40 3c 00	 mov	 BYTE PTR [rax+60], 0

; 1166 :                 signal_condition(&ca->ipc);

  0014c	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00154	48 83 c0 58	 add	 rax, 88			; 00000058H
  00158	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159742
  0015f	48 8b c8	 mov	 rcx, rax
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition
$LN10@commadpt_r:
$LN9@commadpt_r:
$LN8@commadpt_r:

; 1167 :             }
; 1168 :         }
; 1169 :     }
; 1170 : }

  00168	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00170	48 33 cc	 xor	 rcx, rsp
  00173	e8 00 00 00 00	 call	 __security_check_cookie
  00178	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  0017f	c3		 ret	 0
commadpt_read ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
c$ = 96
tty_bp$ = 100
i1$ = 104
bfr3$ = 108
j$ = 112
dump_bp$ = 116
tv221 = 120
tv149 = 124
crflag$ = 128
tv81 = 132
tv84 = 136
tv88 = 140
tv93 = 144
tv160 = 148
tv164 = 152
tv168 = 156
tv173 = 160
tv200 = 164
tv204 = 168
tv209 = 172
tty_buf$ = 176
dump_buf$ = 688
__$ArrayPad$ = 1200
ca$ = 1232
bfr$ = 1240
len$ = 1248
commadpt_read_tty PROC

; 921  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec c8 04
	00 00		 sub	 rsp, 1224		; 000004c8H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 b0
	04 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 922  :     BYTE        bfr3[3];
; 923  :     BYTE        c;
; 924  :     BYTE        dump_buf[TTYLINE_SZ];
; 925  :     int         dump_bp=0;

  00028	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR dump_bp$[rsp], 0

; 926  :     BYTE        tty_buf[TTYLINE_SZ];
; 927  :     int         tty_bp=0;

  00030	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tty_bp$[rsp], 0

; 928  :     int i1;
; 929  :     u_int j;
; 930  :     int crflag = 0;

  00038	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR crflag$[rsp], 0

; 931  :     for (i1 = 0; i1 < len; i1++)

  00043	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR i1$[rsp], 0
  0004b	eb 0a		 jmp	 SHORT $LN4@commadpt_r
$LN2@commadpt_r:
  0004d	8b 44 24 68	 mov	 eax, DWORD PTR i1$[rsp]
  00051	ff c0		 inc	 eax
  00053	89 44 24 68	 mov	 DWORD PTR i1$[rsp], eax
$LN4@commadpt_r:
  00057	8b 84 24 e0 04
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  0005e	39 44 24 68	 cmp	 DWORD PTR i1$[rsp], eax
  00062	0f 8d eb 05 00
	00		 jge	 $LN3@commadpt_r

; 932  :     {
; 933  :         c = (unsigned char) bfr[i1];

  00068	48 63 44 24 68	 movsxd	 rax, DWORD PTR i1$[rsp]
  0006d	48 8b 8c 24 d8
	04 00 00	 mov	 rcx, QWORD PTR bfr$[rsp]
  00075	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00079	88 44 24 60	 mov	 BYTE PTR c$[rsp], al

; 934  :         if (ca->telnet_opt)

  0007d	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00085	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0008b	c1 e8 13	 shr	 eax, 19
  0008e	83 e0 01	 and	 eax, 1
  00091	85 c0		 test	 eax, eax
  00093	0f 84 98 02 00
	00		 je	 $LN21@commadpt_r

; 935  :         {
; 936  :             ca->telnet_opt = 0;

  00099	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  000a1	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  000a7	0f ba f0 13	 btr	 eax, 19
  000ab	48 8b 8c 24 d0
	04 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  000b3	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 937  :             if(ca->dev->ccwtrace)

  000b9	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  000ca	c1 e8 0f	 shr	 eax, 15
  000cd	83 e0 01	 and	 eax, 1
  000d0	85 c0		 test	 eax, eax
  000d2	0f 84 c6 00 00
	00		 je	 $LN22@commadpt_r

; 938  :                 WRMSG(HHC01053,"D",

  000d8	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  000dd	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv81[rsp], eax
  000e4	48 8b 8c 24 d0
	04 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  000ec	0f b6 89 70 01
	00 00		 movzx	 ecx, BYTE PTR [rcx+368]
  000f3	89 8c 24 88 00
	00 00		 mov	 DWORD PTR tv84[rsp], ecx
  000fa	48 8b 94 24 d0
	04 00 00	 mov	 rdx, QWORD PTR ca$[rsp]
  00102	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00105	0f b7 52 48	 movzx	 edx, WORD PTR [rdx+72]
  00109	89 94 24 8c 00
	00 00		 mov	 DWORD PTR tv88[rsp], edx
  00110	4c 8b 84 24 d0
	04 00 00	 mov	 r8, QWORD PTR ca$[rsp]
  00118	4d 8b 00	 mov	 r8, QWORD PTR [r8]
  0011b	45 0f b7 40 44	 movzx	 r8d, WORD PTR [r8+68]
  00120	41 d1 f8	 sar	 r8d, 1
  00123	44 89 84 24 90
	00 00 00	 mov	 DWORD PTR tv93[rsp], r8d
  0012b	b9 01 00 00 00	 mov	 ecx, 1
  00130	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00136	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv81[rsp]
  0013d	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00141	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv84[rsp]
  00148	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  0014c	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv88[rsp]
  00153	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00157	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv93[rsp]
  0015e	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00162	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159672
  00169	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0016e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159673
  00175	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0017a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0017f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00185	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159674
  0018c	ba ad 03 00 00	 mov	 edx, 941		; 000003adH
  00191	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159675
  00198	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN22@commadpt_r:

; 939  :                         SSID_TO_LCSS(ca->dev->ssid),
; 940  :                         ca->dev->devnum,
; 941  :                         ca->telnet_cmd, c);
; 942  :             if (c == 0x00 && ca->binary_opt)

  0019e	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  001a3	85 c0		 test	 eax, eax
  001a5	75 1d		 jne	 SHORT $LN23@commadpt_r
  001a7	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  001af	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  001b5	c1 e8 1f	 shr	 eax, 31
  001b8	83 e0 01	 and	 eax, 1
  001bb	85 c0		 test	 eax, eax
  001bd	74 05		 je	 SHORT $LN23@commadpt_r

; 943  :                 continue; /* for binary: assume it's a response, so don't answer */

  001bf	e9 89 fe ff ff	 jmp	 $LN2@commadpt_r
$LN23@commadpt_r:

; 944  :             bfr3[0] = 0xff;  /* IAC */

  001c4	b8 01 00 00 00	 mov	 eax, 1
  001c9	48 6b c0 00	 imul	 rax, rax, 0
  001cd	c6 44 04 6c ff	 mov	 BYTE PTR bfr3$[rsp+rax], 255 ; 000000ffH

; 945  :         /* set won't/don't for all received commands */
; 946  :             bfr3[1] = (ca->telnet_cmd == 0xfd) ? 0xfc : 0xfe;

  001d2	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  001da	0f b6 80 70 01
	00 00		 movzx	 eax, BYTE PTR [rax+368]
  001e1	3d fd 00 00 00	 cmp	 eax, 253		; 000000fdH
  001e6	75 0a		 jne	 SHORT $LN63@commadpt_r
  001e8	c7 44 24 7c fc
	00 00 00	 mov	 DWORD PTR tv149[rsp], 252 ; 000000fcH
  001f0	eb 08		 jmp	 SHORT $LN64@commadpt_r
$LN63@commadpt_r:
  001f2	c7 44 24 7c fe
	00 00 00	 mov	 DWORD PTR tv149[rsp], 254 ; 000000feH
$LN64@commadpt_r:
  001fa	b8 01 00 00 00	 mov	 eax, 1
  001ff	48 6b c0 01	 imul	 rax, rax, 1
  00203	0f b6 4c 24 7c	 movzx	 ecx, BYTE PTR tv149[rsp]
  00208	88 4c 04 6c	 mov	 BYTE PTR bfr3$[rsp+rax], cl

; 947  :             bfr3[2] = c;

  0020c	b8 01 00 00 00	 mov	 eax, 1
  00211	48 6b c0 02	 imul	 rax, rax, 2
  00215	0f b6 4c 24 60	 movzx	 ecx, BYTE PTR c$[rsp]
  0021a	88 4c 04 6c	 mov	 BYTE PTR bfr3$[rsp+rax], cl

; 948  :             if(ca->dev->ccwtrace)

  0021e	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00226	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00229	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0022f	c1 e8 0f	 shr	 eax, 15
  00232	83 e0 01	 and	 eax, 1
  00235	85 c0		 test	 eax, eax
  00237	0f 84 ce 00 00
	00		 je	 $LN24@commadpt_r

; 949  :                 WRMSG(HHC01054,"D",

  0023d	b8 01 00 00 00	 mov	 eax, 1
  00242	48 6b c0 02	 imul	 rax, rax, 2
  00246	0f b6 44 04 6c	 movzx	 eax, BYTE PTR bfr3$[rsp+rax]
  0024b	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv160[rsp], eax
  00252	b9 01 00 00 00	 mov	 ecx, 1
  00257	48 6b c9 01	 imul	 rcx, rcx, 1
  0025b	0f b6 4c 0c 6c	 movzx	 ecx, BYTE PTR bfr3$[rsp+rcx]
  00260	89 8c 24 98 00
	00 00		 mov	 DWORD PTR tv164[rsp], ecx
  00267	48 8b 94 24 d0
	04 00 00	 mov	 rdx, QWORD PTR ca$[rsp]
  0026f	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00272	0f b7 52 48	 movzx	 edx, WORD PTR [rdx+72]
  00276	89 94 24 9c 00
	00 00		 mov	 DWORD PTR tv168[rsp], edx
  0027d	4c 8b 84 24 d0
	04 00 00	 mov	 r8, QWORD PTR ca$[rsp]
  00285	4d 8b 00	 mov	 r8, QWORD PTR [r8]
  00288	45 0f b7 40 44	 movzx	 r8d, WORD PTR [r8+68]
  0028d	41 d1 f8	 sar	 r8d, 1
  00290	44 89 84 24 a0
	00 00 00	 mov	 DWORD PTR tv173[rsp], r8d
  00298	b9 01 00 00 00	 mov	 ecx, 1
  0029d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002a3	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv160[rsp]
  002aa	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  002ae	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv164[rsp]
  002b5	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  002b9	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv168[rsp]
  002c0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  002c4	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv173[rsp]
  002cb	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  002cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159678
  002d6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159679
  002e2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002ec	41 b9 03 00 00
	00		 mov	 r9d, 3
  002f2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159680
  002f9	ba b8 03 00 00	 mov	 edx, 952		; 000003b8H
  002fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159681
  00305	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN24@commadpt_r:

; 950  :                         SSID_TO_LCSS(ca->dev->ssid),
; 951  :                         ca->dev->devnum,
; 952  :                         bfr3[1], bfr3[2]);
; 953  :             commadpt_ring_pushbfr(&ca->outbfr,bfr3,3);

  0030b	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00313	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00319	41 b8 03 00 00
	00		 mov	 r8d, 3
  0031f	48 8d 54 24 6c	 lea	 rdx, QWORD PTR bfr3$[rsp]
  00324	48 8b c8	 mov	 rcx, rax
  00327	e8 00 00 00 00	 call	 commadpt_ring_pushbfr

; 954  :             continue;

  0032c	e9 1c fd ff ff	 jmp	 $LN2@commadpt_r
$LN21@commadpt_r:

; 955  :         }
; 956  :         if (ca->telnet_iac)

  00331	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00339	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0033f	c1 e8 14	 shr	 eax, 20
  00342	83 e0 01	 and	 eax, 1
  00345	85 c0		 test	 eax, eax
  00347	0f 84 cf 01 00
	00		 je	 $LN25@commadpt_r

; 957  :         {
; 958  :             ca->telnet_iac = 0;

  0034d	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00355	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0035b	0f ba f0 14	 btr	 eax, 20
  0035f	48 8b 8c 24 d0
	04 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  00367	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 959  :             if(ca->dev->ccwtrace)

  0036d	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00375	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00378	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0037e	c1 e8 0f	 shr	 eax, 15
  00381	83 e0 01	 and	 eax, 1
  00384	85 c0		 test	 eax, eax
  00386	0f 84 a2 00 00
	00		 je	 $LN26@commadpt_r

; 960  :                 WRMSG(HHC01055,"D",

  0038c	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  00391	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv200[rsp], eax
  00398	48 8b 8c 24 d0
	04 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  003a0	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  003a3	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  003a7	89 8c 24 a8 00
	00 00		 mov	 DWORD PTR tv204[rsp], ecx
  003ae	48 8b 94 24 d0
	04 00 00	 mov	 rdx, QWORD PTR ca$[rsp]
  003b6	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  003b9	0f b7 52 44	 movzx	 edx, WORD PTR [rdx+68]
  003bd	d1 fa		 sar	 edx, 1
  003bf	89 94 24 ac 00
	00 00		 mov	 DWORD PTR tv209[rsp], edx
  003c6	b9 01 00 00 00	 mov	 ecx, 1
  003cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003d1	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv200[rsp]
  003d8	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  003dc	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv204[rsp]
  003e3	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  003e7	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR tv209[rsp]
  003ee	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159684
  003f9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159685
  00405	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0040a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0040f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00415	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159686
  0041c	ba c3 03 00 00	 mov	 edx, 963		; 000003c3H
  00421	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159687
  00428	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN26@commadpt_r:

; 961  :                         SSID_TO_LCSS(ca->dev->ssid),
; 962  :                         ca->dev->devnum,
; 963  :                         c);
; 964  :             switch (c)

  0042e	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  00433	88 44 24 78	 mov	 BYTE PTR tv221[rsp], al
  00437	80 7c 24 78 f4	 cmp	 BYTE PTR tv221[rsp], 244 ; 000000f4H
  0043c	74 4b		 je	 SHORT $LN29@commadpt_r
  0043e	80 7c 24 78 fb	 cmp	 BYTE PTR tv221[rsp], 251 ; 000000fbH
  00443	74 0c		 je	 SHORT $LN27@commadpt_r
  00445	80 7c 24 78 fd	 cmp	 BYTE PTR tv221[rsp], 253 ; 000000fdH
  0044a	74 05		 je	 SHORT $LN28@commadpt_r
  0044c	e9 c6 00 00 00	 jmp	 $LN5@commadpt_r
$LN27@commadpt_r:
$LN28@commadpt_r:

; 965  :             {
; 966  :                 case 0xFB:  /* TELNET WILL option cmd */
; 967  :                 case 0xFD:  /* TELNET DO option cmd */
; 968  :                     ca->telnet_opt = 1;

  00451	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00459	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0045f	0f ba e8 13	 bts	 eax, 19
  00463	48 8b 8c 24 d0
	04 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  0046b	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 969  :                     ca->telnet_cmd = c;

  00471	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00479	0f b6 4c 24 60	 movzx	 ecx, BYTE PTR c$[rsp]
  0047e	88 88 70 01 00
	00		 mov	 BYTE PTR [rax+368], cl

; 970  :                     break;

  00484	e9 8e 00 00 00	 jmp	 $LN5@commadpt_r
$LN29@commadpt_r:

; 971  :                 case 0xF4:  /* TELNET interrupt */
; 972  :                     if (!ca->telnet_int)

  00489	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00491	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00497	c1 e8 15	 shr	 eax, 21
  0049a	83 e0 01	 and	 eax, 1
  0049d	85 c0		 test	 eax, eax
  0049f	75 76		 jne	 SHORT $LN30@commadpt_r

; 973  :                     {
; 974  :                         ca->telnet_int = 1;

  004a1	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  004a9	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  004af	0f ba e8 15	 bts	 eax, 21
  004b3	48 8b 8c 24 d0
	04 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  004bb	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 975  :                         commadpt_ring_flush(&ca->ttybuf);

  004c1	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  004c9	48 05 18 01 00
	00		 add	 rax, 280		; 00000118H
  004cf	48 8b c8	 mov	 rcx, rax
  004d2	e8 00 00 00 00	 call	 commadpt_ring_flush

; 976  :                         commadpt_ring_flush(&ca->inbfr);

  004d7	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  004df	48 83 c0 78	 add	 rax, 120		; 00000078H
  004e3	48 8b c8	 mov	 rcx, rax
  004e6	e8 00 00 00 00	 call	 commadpt_ring_flush

; 977  :                         commadpt_ring_flush(&ca->rdwrk);

  004eb	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  004f3	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  004f9	48 8b c8	 mov	 rcx, rax
  004fc	e8 00 00 00 00	 call	 commadpt_ring_flush

; 978  :                         commadpt_ring_flush(&ca->outbfr);

  00501	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00509	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0050f	48 8b c8	 mov	 rcx, rax
  00512	e8 00 00 00 00	 call	 commadpt_ring_flush
$LN30@commadpt_r:
$LN5@commadpt_r:

; 979  :                     }
; 980  :                     break;
; 981  :             }
; 982  :             continue;

  00517	e9 31 fb ff ff	 jmp	 $LN2@commadpt_r
$LN25@commadpt_r:

; 983  :         }
; 984  :         if (c == 0xFF)

  0051c	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  00521	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  00526	75 27		 jne	 SHORT $LN31@commadpt_r

; 985  :         {  /* TELNET IAC */
; 986  :             ca->telnet_iac = 1;

  00528	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00530	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00536	0f ba e8 14	 bts	 eax, 20
  0053a	48 8b 8c 24 d0
	04 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  00542	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 987  :             continue;

  00548	e9 00 fb ff ff	 jmp	 $LN2@commadpt_r

; 988  :         }

  0054d	eb 20		 jmp	 SHORT $LN32@commadpt_r
$LN31@commadpt_r:

; 989  :         else
; 990  :         {
; 991  :             ca->telnet_iac = 0;

  0054f	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00557	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0055d	0f ba f0 14	 btr	 eax, 20
  00561	48 8b 8c 24 d0
	04 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  00569	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax
$LN32@commadpt_r:

; 992  :         }
; 993  :         if (c == ca->eol_char) { // char was CR ?

  0056f	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  00574	48 8b 8c 24 d0
	04 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  0057c	0f b6 89 7b 03
	00 00		 movzx	 ecx, BYTE PTR [rcx+891]
  00583	3b c1		 cmp	 eax, ecx
  00585	75 0b		 jne	 SHORT $LN33@commadpt_r

; 994  :             crflag = 1;

  00587	c7 84 24 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR crflag$[rsp], 1
$LN33@commadpt_r:

; 995  :         }
; 996  :         if (c == 0x03 && ca->dumb_break)

  00592	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  00597	83 f8 03	 cmp	 eax, 3
  0059a	0f 85 93 00 00
	00		 jne	 $LN34@commadpt_r
  005a0	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  005a8	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  005ae	c1 e8 19	 shr	 eax, 25
  005b1	83 e0 01	 and	 eax, 1
  005b4	85 c0		 test	 eax, eax
  005b6	74 7b		 je	 SHORT $LN34@commadpt_r

; 997  :         {  /* Ctrl-C */
; 998  :             ca->telnet_int = 1;

  005b8	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  005c0	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  005c6	0f ba e8 15	 bts	 eax, 21
  005ca	48 8b 8c 24 d0
	04 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  005d2	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 999  :             commadpt_ring_flush(&ca->ttybuf);

  005d8	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  005e0	48 05 18 01 00
	00		 add	 rax, 280		; 00000118H
  005e6	48 8b c8	 mov	 rcx, rax
  005e9	e8 00 00 00 00	 call	 commadpt_ring_flush

; 1000 :             commadpt_ring_flush(&ca->inbfr);

  005ee	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  005f6	48 83 c0 78	 add	 rax, 120		; 00000078H
  005fa	48 8b c8	 mov	 rcx, rax
  005fd	e8 00 00 00 00	 call	 commadpt_ring_flush

; 1001 :             commadpt_ring_flush(&ca->rdwrk);

  00602	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  0060a	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00610	48 8b c8	 mov	 rcx, rax
  00613	e8 00 00 00 00	 call	 commadpt_ring_flush

; 1002 :             commadpt_ring_flush(&ca->outbfr);

  00618	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00620	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00626	48 8b c8	 mov	 rcx, rax
  00629	e8 00 00 00 00	 call	 commadpt_ring_flush

; 1003 :             continue;

  0062e	e9 1a fa ff ff	 jmp	 $LN2@commadpt_r
$LN34@commadpt_r:

; 1004 :         }
; 1005 :         commadpt_ring_push(&ca->ttybuf,c);

  00633	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  0063b	48 05 18 01 00
	00		 add	 rax, 280		; 00000118H
  00641	0f b6 54 24 60	 movzx	 edx, BYTE PTR c$[rsp]
  00646	48 8b c8	 mov	 rcx, rax
  00649	e8 00 00 00 00	 call	 commadpt_ring_push

; 1006 :     }

  0064e	e9 fa f9 ff ff	 jmp	 $LN2@commadpt_r
$LN3@commadpt_r:

; 1007 :     if (crflag)

  00653	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR crflag$[rsp], 0
  0065b	0f 84 f1 04 00
	00		 je	 $LN35@commadpt_r

; 1008 :     {   /* process complete line, perform editing and translation, etc. */
; 1009 :         if (ca->prepend_length)

  00661	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00669	0f b6 80 71 03
	00 00		 movzx	 eax, BYTE PTR [rax+881]
  00670	85 c0		 test	 eax, eax
  00672	74 68		 je	 SHORT $LN36@commadpt_r

; 1010 :         {
; 1011 :             for (i1 = 0; i1 < ca->prepend_length; i1++) {

  00674	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR i1$[rsp], 0
  0067c	eb 0a		 jmp	 SHORT $LN9@commadpt_r
$LN7@commadpt_r:
  0067e	8b 44 24 68	 mov	 eax, DWORD PTR i1$[rsp]
  00682	ff c0		 inc	 eax
  00684	89 44 24 68	 mov	 DWORD PTR i1$[rsp], eax
$LN9@commadpt_r:
  00688	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00690	0f b6 80 71 03
	00 00		 movzx	 eax, BYTE PTR [rax+881]
  00697	39 44 24 68	 cmp	 DWORD PTR i1$[rsp], eax
  0069b	7d 3f		 jge	 SHORT $LN8@commadpt_r

; 1012 :                 tty_buf[tty_bp++] = ca->prepend_bytes[i1];

  0069d	48 63 44 24 68	 movsxd	 rax, DWORD PTR i1$[rsp]
  006a2	48 63 4c 24 64	 movsxd	 rcx, DWORD PTR tty_bp$[rsp]
  006a7	48 8b 94 24 d0
	04 00 00	 mov	 rdx, QWORD PTR ca$[rsp]
  006af	0f b6 84 02 72
	03 00 00	 movzx	 eax, BYTE PTR [rdx+rax+882]
  006b7	88 84 0c b0 00
	00 00		 mov	 BYTE PTR tty_buf$[rsp+rcx], al
  006be	8b 44 24 64	 mov	 eax, DWORD PTR tty_bp$[rsp]
  006c2	ff c0		 inc	 eax
  006c4	89 44 24 64	 mov	 DWORD PTR tty_bp$[rsp], eax

; 1013 :                 if (tty_bp >= TTYLINE_SZ)

  006c8	81 7c 24 64 00
	02 00 00	 cmp	 DWORD PTR tty_bp$[rsp], 512 ; 00000200H
  006d0	7c 08		 jl	 SHORT $LN37@commadpt_r

; 1014 :                     tty_bp = TTYLINE_SZ - 1;   // prevent buf overflow

  006d2	c7 44 24 64 ff
	01 00 00	 mov	 DWORD PTR tty_bp$[rsp], 511 ; 000001ffH
$LN37@commadpt_r:

; 1015 :             }

  006da	eb a2		 jmp	 SHORT $LN7@commadpt_r
$LN8@commadpt_r:
$LN36@commadpt_r:
$LN67@commadpt_r:
$LN66@commadpt_r:
$LN65@commadpt_r:
$LN10@commadpt_r:

; 1016 :         }
; 1017 :         while (ca->ttybuf.havedata)

  006dc	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  006e4	8b 80 38 01 00
	00		 mov	 eax, DWORD PTR [rax+312]
  006ea	83 e0 01	 and	 eax, 1
  006ed	85 c0		 test	 eax, eax
  006ef	0f 84 ee 02 00
	00		 je	 $LN11@commadpt_r

; 1018 :         {
; 1019 :             c = commadpt_ring_pop(&ca->ttybuf);

  006f5	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  006fd	48 05 18 01 00
	00		 add	 rax, 280		; 00000118H
  00703	48 8b c8	 mov	 rcx, rax
  00706	e8 00 00 00 00	 call	 commadpt_ring_pop
  0070b	88 44 24 60	 mov	 BYTE PTR c$[rsp], al

; 1020 :             if ((c & 0x7f) == 0x08 && ca->dumb_bs)   // backspace editing

  0070f	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  00714	83 e0 7f	 and	 eax, 127		; 0000007fH
  00717	83 f8 08	 cmp	 eax, 8
  0071a	75 2b		 jne	 SHORT $LN38@commadpt_r
  0071c	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00724	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0072a	c1 e8 18	 shr	 eax, 24
  0072d	83 e0 01	 and	 eax, 1
  00730	85 c0		 test	 eax, eax
  00732	74 13		 je	 SHORT $LN38@commadpt_r

; 1021 :             {
; 1022 :                 if (tty_bp > 0)

  00734	83 7c 24 64 00	 cmp	 DWORD PTR tty_bp$[rsp], 0
  00739	7e 0a		 jle	 SHORT $LN39@commadpt_r

; 1023 :                     tty_bp --;

  0073b	8b 44 24 64	 mov	 eax, DWORD PTR tty_bp$[rsp]
  0073f	ff c8		 dec	 eax
  00741	89 44 24 64	 mov	 DWORD PTR tty_bp$[rsp], eax
$LN39@commadpt_r:

; 1024 :                 continue;

  00745	eb 95		 jmp	 SHORT $LN10@commadpt_r
$LN38@commadpt_r:

; 1025 :             }
; 1026 :             if (ca->input_byte_skip_table[c])

  00747	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  0074c	48 8b 8c 24 d0
	04 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  00754	0f b6 84 01 71
	02 00 00	 movzx	 eax, BYTE PTR [rcx+rax+625]
  0075c	85 c0		 test	 eax, eax
  0075e	74 05		 je	 SHORT $LN40@commadpt_r

; 1027 :                 continue;   // skip this byte per cfg

  00760	e9 77 ff ff ff	 jmp	 $LN65@commadpt_r
$LN40@commadpt_r:

; 1028 : 
; 1029 :             if (1
; 1030 :                 && ca->crlf2cr_opt      /* dhd: CRLF2CR option? */
; 1031 :                 && (c & 0x7f) == 0x0a   /* dhd: is this a <LF>? */
; 1032 :                 && tty_bp > 0           /* dhd: and something in buffer? */

  00765	33 c0		 xor	 eax, eax
  00767	83 f8 01	 cmp	 eax, 1
  0076a	74 45		 je	 SHORT $LN41@commadpt_r
  0076c	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00774	8b 80 6c 01 00
	00		 mov	 eax, DWORD PTR [rax+364]
  0077a	83 e0 01	 and	 eax, 1
  0077d	85 c0		 test	 eax, eax
  0077f	74 30		 je	 SHORT $LN41@commadpt_r
  00781	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  00786	83 e0 7f	 and	 eax, 127		; 0000007fH
  00789	83 f8 0a	 cmp	 eax, 10
  0078c	75 23		 jne	 SHORT $LN41@commadpt_r
  0078e	83 7c 24 64 00	 cmp	 DWORD PTR tty_bp$[rsp], 0
  00793	7e 1c		 jle	 SHORT $LN41@commadpt_r

; 1033 :             )
; 1034 :             {
; 1035 :                 if (0xb1 == tty_buf[tty_bp-1])  /* dhd: <LF> follows <CR>? */

  00795	8b 44 24 64	 mov	 eax, DWORD PTR tty_bp$[rsp]
  00799	ff c8		 dec	 eax
  0079b	48 98		 cdqe
  0079d	0f b6 84 04 b0
	00 00 00	 movzx	 eax, BYTE PTR tty_buf$[rsp+rax]
  007a5	3d b1 00 00 00	 cmp	 eax, 177		; 000000b1H
  007aa	75 05		 jne	 SHORT $LN42@commadpt_r

; 1036 :                     continue;                   /* dhd: skip <LF> to avoid problems */

  007ac	e9 2b ff ff ff	 jmp	 $LN66@commadpt_r
$LN42@commadpt_r:
$LN41@commadpt_r:

; 1037 :             }
; 1038 : 
; 1039 :             if (!(ca->rxvt4apl || !ca->code_table_fromebcdic))

  007b1	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  007b9	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  007bf	c1 e8 1b	 shr	 eax, 27
  007c2	83 e0 01	 and	 eax, 1
  007c5	85 c0		 test	 eax, eax
  007c7	75 1b		 jne	 SHORT $LN43@commadpt_r
  007c9	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  007d1	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  007d6	74 0c		 je	 SHORT $LN43@commadpt_r

; 1040 :             { /* tty33 and 2741 emulation are 7-bit, code=none and rxvt4apl want 8 bit */
; 1041 :                 c &= 0x7f;  // make 7 bit ASCII

  007d8	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  007dd	83 e0 7f	 and	 eax, 127		; 0000007fH
  007e0	88 44 24 60	 mov	 BYTE PTR c$[rsp], al
$LN43@commadpt_r:

; 1042 :             }
; 1043 :             if  (ca->uctrans && c >= 'a' && c <= 'z')

  007e4	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  007ec	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  007f2	c1 e8 17	 shr	 eax, 23
  007f5	83 e0 01	 and	 eax, 1
  007f8	85 c0		 test	 eax, eax
  007fa	74 25		 je	 SHORT $LN44@commadpt_r
  007fc	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  00801	83 f8 61	 cmp	 eax, 97			; 00000061H
  00804	7c 1b		 jl	 SHORT $LN44@commadpt_r
  00806	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  0080b	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  0080e	7f 11		 jg	 SHORT $LN44@commadpt_r

; 1044 :             {
; 1045 :                 c = toupper( c );     /* make uppercase */

  00810	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  00815	8b c8		 mov	 ecx, eax
  00817	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_toupper
  0081d	88 44 24 60	 mov	 BYTE PTR c$[rsp], al
$LN44@commadpt_r:

; 1046 :             }
; 1047 :             /* now map the character from ASCII into proper S/370 byte format */
; 1048 :             if (ca->term == COMMADPT_TERM_TTY)

  00821	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00829	0f b6 40 09	 movzx	 eax, BYTE PTR [rax+9]
  0082d	85 c0		 test	 eax, eax
  0082f	75 3a		 jne	 SHORT $LN45@commadpt_r

; 1049 :             {
; 1050 :                 if (byte_parity_table[(unsigned int)(c & 0x7f)])

  00831	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  00836	83 e0 7f	 and	 eax, 127		; 0000007fH
  00839	8b c0		 mov	 eax, eax
  0083b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:byte_parity_table
  00842	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00846	85 c0		 test	 eax, eax
  00848	74 0d		 je	 SHORT $LN47@commadpt_r

; 1051 :                     c |= 0x80;     // make even parity

  0084a	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  0084f	0f ba e8 07	 bts	 eax, 7
  00853	88 44 24 60	 mov	 BYTE PTR c$[rsp], al
$LN47@commadpt_r:

; 1052 : 
; 1053 :                 c = reverse_bits( c );

  00857	0f b6 4c 24 60	 movzx	 ecx, BYTE PTR c$[rsp]
  0085c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_reverse_bits
  00862	88 44 24 60	 mov	 BYTE PTR c$[rsp], al

; 1054 :             }

  00866	e9 46 01 00 00	 jmp	 $LN46@commadpt_r
$LN45@commadpt_r:

; 1055 :             else
; 1056 :             {   /* 2741 */
; 1057 :                 if (ca->rxvt4apl)

  0086b	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00873	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00879	c1 e8 1b	 shr	 eax, 27
  0087c	83 e0 01	 and	 eax, 1
  0087f	85 c0		 test	 eax, eax
  00881	0f 84 ed 00 00
	00		 je	 $LN48@commadpt_r

; 1058 :                 {
; 1059 :                     if (overstrike_map[c] == 1)

  00887	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  0088c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:overstrike_map
  00893	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00897	83 f8 01	 cmp	 eax, 1
  0089a	0f 85 be 00 00
	00		 jne	 $LN50@commadpt_r

; 1060 :                     {
; 1061 :                         for (j = 0; j < sizeof(overstrike_rxvt4apl_chars); j++)

  008a0	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  008a8	eb 0a		 jmp	 SHORT $LN14@commadpt_r
$LN12@commadpt_r:
  008aa	8b 44 24 70	 mov	 eax, DWORD PTR j$[rsp]
  008ae	ff c0		 inc	 eax
  008b0	89 44 24 70	 mov	 DWORD PTR j$[rsp], eax
$LN14@commadpt_r:
  008b4	8b 44 24 70	 mov	 eax, DWORD PTR j$[rsp]
  008b8	48 83 f8 0d	 cmp	 rax, 13
  008bc	0f 83 9a 00 00
	00		 jae	 $LN13@commadpt_r

; 1062 :                         {
; 1063 :                             if (c == overstrike_rxvt4apl_chars[j])

  008c2	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  008c7	8b 4c 24 70	 mov	 ecx, DWORD PTR j$[rsp]
  008cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:overstrike_rxvt4apl_chars
  008d2	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  008d6	3b c1		 cmp	 eax, ecx
  008d8	75 7d		 jne	 SHORT $LN52@commadpt_r

; 1064 :                             {
; 1065 :                                 tty_buf[tty_bp++] = overstrike_2741_pairs[j*2];

  008da	8b 44 24 70	 mov	 eax, DWORD PTR j$[rsp]
  008de	03 c0		 add	 eax, eax
  008e0	8b c0		 mov	 eax, eax
  008e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:overstrike_2741_pairs
  008e9	48 63 54 24 64	 movsxd	 rdx, DWORD PTR tty_bp$[rsp]
  008ee	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  008f2	88 84 14 b0 00
	00 00		 mov	 BYTE PTR tty_buf$[rsp+rdx], al
  008f9	8b 44 24 64	 mov	 eax, DWORD PTR tty_bp$[rsp]
  008fd	ff c0		 inc	 eax
  008ff	89 44 24 64	 mov	 DWORD PTR tty_bp$[rsp], eax

; 1066 :                                 if (tty_bp >= TTYLINE_SZ)

  00903	81 7c 24 64 00
	02 00 00	 cmp	 DWORD PTR tty_bp$[rsp], 512 ; 00000200H
  0090b	7c 08		 jl	 SHORT $LN53@commadpt_r

; 1067 :                                     tty_bp = TTYLINE_SZ - 1;   // prevent buf overflow

  0090d	c7 44 24 64 ff
	01 00 00	 mov	 DWORD PTR tty_bp$[rsp], 511 ; 000001ffH
$LN53@commadpt_r:

; 1068 :                                 tty_buf[tty_bp++] = 0xDD;      // 2741 backspace

  00915	48 63 44 24 64	 movsxd	 rax, DWORD PTR tty_bp$[rsp]
  0091a	c6 84 04 b0 00
	00 00 dd	 mov	 BYTE PTR tty_buf$[rsp+rax], 221 ; 000000ddH
  00922	8b 44 24 64	 mov	 eax, DWORD PTR tty_bp$[rsp]
  00926	ff c0		 inc	 eax
  00928	89 44 24 64	 mov	 DWORD PTR tty_bp$[rsp], eax

; 1069 :                                 if (tty_bp >= TTYLINE_SZ)

  0092c	81 7c 24 64 00
	02 00 00	 cmp	 DWORD PTR tty_bp$[rsp], 512 ; 00000200H
  00934	7c 08		 jl	 SHORT $LN54@commadpt_r

; 1070 :                                     tty_bp = TTYLINE_SZ - 1;   // prevent buf overflow

  00936	c7 44 24 64 ff
	01 00 00	 mov	 DWORD PTR tty_bp$[rsp], 511 ; 000001ffH
$LN54@commadpt_r:

; 1071 :                                 c = overstrike_2741_pairs[ (j*2) + 1];

  0093e	8b 44 24 70	 mov	 eax, DWORD PTR j$[rsp]
  00942	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  00946	8b c0		 mov	 eax, eax
  00948	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:overstrike_2741_pairs
  0094f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00953	88 44 24 60	 mov	 BYTE PTR c$[rsp], al
$LN52@commadpt_r:

; 1072 :                             }
; 1073 :                         }

  00957	e9 4e ff ff ff	 jmp	 $LN12@commadpt_r
$LN13@commadpt_r:

; 1074 :                     }

  0095c	eb 14		 jmp	 SHORT $LN51@commadpt_r
$LN50@commadpt_r:

; 1075 :                     else
; 1076 :                     {
; 1077 :                         c = rxvt4apl_to_2741[c];

  0095e	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  00963	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:rxvt4apl_to_2741
  0096a	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0096e	88 44 24 60	 mov	 BYTE PTR c$[rsp], al
$LN51@commadpt_r:

; 1078 :                     }
; 1079 :                 }

  00972	eb 3d		 jmp	 SHORT $LN49@commadpt_r
$LN48@commadpt_r:

; 1080 :                 else if (ca->code_table_fromebcdic)

  00974	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  0097c	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  00981	74 2e		 je	 SHORT $LN55@commadpt_r

; 1081 :                 {
; 1082 :                     c = host_to_guest(c & 0x7f);  // first translate to EBCDIC

  00983	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  00988	83 e0 7f	 and	 eax, 127		; 0000007fH
  0098b	0f b6 c8	 movzx	 ecx, al
  0098e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_host_to_guest
  00994	88 44 24 60	 mov	 BYTE PTR c$[rsp], al

; 1083 :                     c = ca->code_table_fromebcdic[ c ];   // then to 2741 code

  00998	0f b6 44 24 60	 movzx	 eax, BYTE PTR c$[rsp]
  0099d	48 8b 8c 24 d0
	04 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  009a5	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  009a9	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  009ad	88 44 24 60	 mov	 BYTE PTR c$[rsp], al
$LN55@commadpt_r:
$LN49@commadpt_r:
$LN46@commadpt_r:

; 1084 :                 }
; 1085 :             }
; 1086 :             tty_buf[tty_bp++] = c;

  009b1	48 63 44 24 64	 movsxd	 rax, DWORD PTR tty_bp$[rsp]
  009b6	0f b6 4c 24 60	 movzx	 ecx, BYTE PTR c$[rsp]
  009bb	88 8c 04 b0 00
	00 00		 mov	 BYTE PTR tty_buf$[rsp+rax], cl
  009c2	8b 44 24 64	 mov	 eax, DWORD PTR tty_bp$[rsp]
  009c6	ff c0		 inc	 eax
  009c8	89 44 24 64	 mov	 DWORD PTR tty_bp$[rsp], eax

; 1087 :             if (tty_bp >= TTYLINE_SZ)

  009cc	81 7c 24 64 00
	02 00 00	 cmp	 DWORD PTR tty_bp$[rsp], 512 ; 00000200H
  009d4	7c 08		 jl	 SHORT $LN56@commadpt_r

; 1088 :                 tty_bp = TTYLINE_SZ - 1;   // prevent buf overflow

  009d6	c7 44 24 64 ff
	01 00 00	 mov	 DWORD PTR tty_bp$[rsp], 511 ; 000001ffH
$LN56@commadpt_r:

; 1089 :         }

  009de	e9 f9 fc ff ff	 jmp	 $LN67@commadpt_r
$LN11@commadpt_r:

; 1090 :         if (ca->append_length)

  009e3	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  009eb	0f b6 80 76 03
	00 00		 movzx	 eax, BYTE PTR [rax+886]
  009f2	85 c0		 test	 eax, eax
  009f4	74 68		 je	 SHORT $LN57@commadpt_r

; 1091 :         {
; 1092 :             for (i1 = 0; i1 < ca->append_length; i1++) {

  009f6	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR i1$[rsp], 0
  009fe	eb 0a		 jmp	 SHORT $LN17@commadpt_r
$LN15@commadpt_r:
  00a00	8b 44 24 68	 mov	 eax, DWORD PTR i1$[rsp]
  00a04	ff c0		 inc	 eax
  00a06	89 44 24 68	 mov	 DWORD PTR i1$[rsp], eax
$LN17@commadpt_r:
  00a0a	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00a12	0f b6 80 76 03
	00 00		 movzx	 eax, BYTE PTR [rax+886]
  00a19	39 44 24 68	 cmp	 DWORD PTR i1$[rsp], eax
  00a1d	7d 3f		 jge	 SHORT $LN16@commadpt_r

; 1093 :                 tty_buf[tty_bp++] = ca->append_bytes[i1];

  00a1f	48 63 44 24 68	 movsxd	 rax, DWORD PTR i1$[rsp]
  00a24	48 63 4c 24 64	 movsxd	 rcx, DWORD PTR tty_bp$[rsp]
  00a29	48 8b 94 24 d0
	04 00 00	 mov	 rdx, QWORD PTR ca$[rsp]
  00a31	0f b6 84 02 77
	03 00 00	 movzx	 eax, BYTE PTR [rdx+rax+887]
  00a39	88 84 0c b0 00
	00 00		 mov	 BYTE PTR tty_buf$[rsp+rcx], al
  00a40	8b 44 24 64	 mov	 eax, DWORD PTR tty_bp$[rsp]
  00a44	ff c0		 inc	 eax
  00a46	89 44 24 64	 mov	 DWORD PTR tty_bp$[rsp], eax

; 1094 :                 if (tty_bp >= TTYLINE_SZ)

  00a4a	81 7c 24 64 00
	02 00 00	 cmp	 DWORD PTR tty_bp$[rsp], 512 ; 00000200H
  00a52	7c 08		 jl	 SHORT $LN58@commadpt_r

; 1095 :                     tty_bp = TTYLINE_SZ - 1;   // prevent buf overflow

  00a54	c7 44 24 64 ff
	01 00 00	 mov	 DWORD PTR tty_bp$[rsp], 511 ; 000001ffH
$LN58@commadpt_r:

; 1096 :             }

  00a5c	eb a2		 jmp	 SHORT $LN15@commadpt_r
$LN16@commadpt_r:
$LN57@commadpt_r:

; 1097 :         }
; 1098 :         if (tty_bp > 0) {

  00a5e	83 7c 24 64 00	 cmp	 DWORD PTR tty_bp$[rsp], 0
  00a63	7e 76		 jle	 SHORT $LN59@commadpt_r

; 1099 :             for (i1 = 0; i1 < tty_bp; i1++) {

  00a65	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR i1$[rsp], 0
  00a6d	eb 0a		 jmp	 SHORT $LN20@commadpt_r
$LN18@commadpt_r:
  00a6f	8b 44 24 68	 mov	 eax, DWORD PTR i1$[rsp]
  00a73	ff c0		 inc	 eax
  00a75	89 44 24 68	 mov	 DWORD PTR i1$[rsp], eax
$LN20@commadpt_r:
  00a79	8b 44 24 64	 mov	 eax, DWORD PTR tty_bp$[rsp]
  00a7d	39 44 24 68	 cmp	 DWORD PTR i1$[rsp], eax
  00a81	7d 58		 jge	 SHORT $LN19@commadpt_r

; 1100 :                 commadpt_ring_push(&ca->rdwrk, tty_buf[i1]);

  00a83	48 63 44 24 68	 movsxd	 rax, DWORD PTR i1$[rsp]
  00a88	48 8b 8c 24 d0
	04 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  00a90	48 81 c1 f0 00
	00 00		 add	 rcx, 240		; 000000f0H
  00a97	0f b6 94 04 b0
	00 00 00	 movzx	 edx, BYTE PTR tty_buf$[rsp+rax]
  00a9f	e8 00 00 00 00	 call	 commadpt_ring_push

; 1101 :                 dump_buf[dump_bp++] = tty_buf[i1];

  00aa4	48 63 44 24 68	 movsxd	 rax, DWORD PTR i1$[rsp]
  00aa9	48 63 4c 24 74	 movsxd	 rcx, DWORD PTR dump_bp$[rsp]
  00aae	0f b6 84 04 b0
	00 00 00	 movzx	 eax, BYTE PTR tty_buf$[rsp+rax]
  00ab6	88 84 0c b0 02
	00 00		 mov	 BYTE PTR dump_buf$[rsp+rcx], al
  00abd	8b 44 24 74	 mov	 eax, DWORD PTR dump_bp$[rsp]
  00ac1	ff c0		 inc	 eax
  00ac3	89 44 24 74	 mov	 DWORD PTR dump_bp$[rsp], eax

; 1102 :                 if (dump_bp >= TTYLINE_SZ) dump_bp = TTYLINE_SZ - 1;

  00ac7	81 7c 24 74 00
	02 00 00	 cmp	 DWORD PTR dump_bp$[rsp], 512 ; 00000200H
  00acf	7c 08		 jl	 SHORT $LN60@commadpt_r
  00ad1	c7 44 24 74 ff
	01 00 00	 mov	 DWORD PTR dump_bp$[rsp], 511 ; 000001ffH
$LN60@commadpt_r:

; 1103 :             }

  00ad9	eb 94		 jmp	 SHORT $LN18@commadpt_r
$LN19@commadpt_r:
$LN59@commadpt_r:

; 1104 :         }
; 1105 :         logdump("RCV2",ca->dev,dump_buf,dump_bp);

  00adb	48 63 44 24 74	 movsxd	 rax, DWORD PTR dump_bp$[rsp]
  00ae0	4c 8b c8	 mov	 r9, rax
  00ae3	4c 8d 84 24 b0
	02 00 00	 lea	 r8, QWORD PTR dump_buf$[rsp]
  00aeb	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00af3	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00af6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159722
  00afd	e8 00 00 00 00	 call	 logdump

; 1106 :         ca->eol_flag = 1; // set end of line flag

  00b02	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00b0a	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00b10	0f ba e8 16	 bts	 eax, 22
  00b14	48 8b 8c 24 d0
	04 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  00b1c	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 1107 :         if (ca->sendcr_opt)

  00b22	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00b2a	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00b30	c1 e8 1e	 shr	 eax, 30
  00b33	83 e0 01	 and	 eax, 1
  00b36	85 c0		 test	 eax, eax
  00b38	74 18		 je	 SHORT $LN61@commadpt_r

; 1108 :         {
; 1109 :             /* move carriage to left margin */
; 1110 :             commadpt_ring_push(&ca->outbfr,0x0d);

  00b3a	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00b42	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00b48	b2 0d		 mov	 dl, 13
  00b4a	48 8b c8	 mov	 rcx, rax
  00b4d	e8 00 00 00 00	 call	 commadpt_ring_push
$LN61@commadpt_r:
$LN35@commadpt_r:

; 1111 :         }
; 1112 :     } /* end of if(crflag) */
; 1113 : }

  00b52	48 8b 8c 24 b0
	04 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00b5a	48 33 cc	 xor	 rcx, rsp
  00b5d	e8 00 00 00 00	 call	 __security_check_cookie
  00b62	48 81 c4 c8 04
	00 00		 add	 rsp, 1224		; 000004c8H
  00b69	c3		 ret	 0
commadpt_read_tty ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
b$ = 32
rc$ = 36
ca$ = 64
commadpt_read_poll PROC

; 896  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN8@commadpt_r:
$LN2@commadpt_r:

; 897  :     BYTE b;
; 898  :     int rc;
; 899  :     while((rc=read_socket(ca->sfd,&b,1))>0)

  00009	41 b8 01 00 00
	00		 mov	 r8d, 1
  0000f	48 8d 54 24 20	 lea	 rdx, QWORD PTR b$[rsp]
  00014	48 8b 44 24 40	 mov	 rax, QWORD PTR ca$[rsp]
  00019	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read_socket
  00022	89 44 24 24	 mov	 DWORD PTR rc$[rsp], eax
  00026	83 7c 24 24 00	 cmp	 DWORD PTR rc$[rsp], 0
  0002b	7e 1f		 jle	 SHORT $LN3@commadpt_r

; 900  :     {
; 901  :         if(b==0x32)

  0002d	0f b6 44 24 20	 movzx	 eax, BYTE PTR b$[rsp]
  00032	83 f8 32	 cmp	 eax, 50			; 00000032H
  00035	75 02		 jne	 SHORT $LN4@commadpt_r

; 902  :         {
; 903  :             continue;

  00037	eb d0		 jmp	 SHORT $LN2@commadpt_r
$LN4@commadpt_r:

; 904  :         }
; 905  :         if(b==0x37)

  00039	0f b6 44 24 20	 movzx	 eax, BYTE PTR b$[rsp]
  0003e	83 f8 37	 cmp	 eax, 55			; 00000037H
  00041	75 07		 jne	 SHORT $LN5@commadpt_r

; 906  :         {
; 907  :             return(1);

  00043	b8 01 00 00 00	 mov	 eax, 1
  00048	eb 45		 jmp	 SHORT $LN1@commadpt_r
$LN5@commadpt_r:

; 908  :         }
; 909  :     }

  0004a	eb bd		 jmp	 SHORT $LN8@commadpt_r
$LN3@commadpt_r:

; 910  :     if(rc>0)

  0004c	83 7c 24 24 00	 cmp	 DWORD PTR rc$[rsp], 0
  00051	7e 3a		 jle	 SHORT $LN6@commadpt_r

; 911  :     {
; 912  :         /* Store POLL IX in bfr followed by byte */
; 913  :         commadpt_ring_push(&ca->inbfr,ca->pollix);

  00053	48 8b 44 24 40	 mov	 rax, QWORD PTR ca$[rsp]
  00058	48 83 c0 78	 add	 rax, 120		; 00000078H
  0005c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ca$[rsp]
  00061	0f b6 91 64 01
	00 00		 movzx	 edx, BYTE PTR [rcx+356]
  00068	48 8b c8	 mov	 rcx, rax
  0006b	e8 00 00 00 00	 call	 commadpt_ring_push

; 914  :         commadpt_ring_push(&ca->inbfr,b);

  00070	48 8b 44 24 40	 mov	 rax, QWORD PTR ca$[rsp]
  00075	48 83 c0 78	 add	 rax, 120		; 00000078H
  00079	0f b6 54 24 20	 movzx	 edx, BYTE PTR b$[rsp]
  0007e	48 8b c8	 mov	 rcx, rax
  00081	e8 00 00 00 00	 call	 commadpt_ring_push

; 915  :         return(2);

  00086	b8 02 00 00 00	 mov	 eax, 2
  0008b	eb 02		 jmp	 SHORT $LN1@commadpt_r
$LN6@commadpt_r:

; 916  :     }
; 917  :     return(0);

  0008d	33 c0		 xor	 eax, eax
$LN1@commadpt_r:

; 918  : }

  0008f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00093	c3		 ret	 0
commadpt_read_poll ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
namelen$ = 96
tv162 = 100
tv72 = 104
tv157 = 112
ipaddr$ = 120
client$ = 128
msgtext$ = 144
__$ArrayPad$ = 400
sfd$ = 432
devnum$ = 440
term$ = 448
binary_opt$ = 456
connect_message PROC

; 867  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00012	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 868  : struct      sockaddr_in client;
; 869  : socklen_t   namelen;
; 870  : char       *ipaddr;
; 871  : char        msgtext[256];
; 872  : 
; 873  :     namelen = sizeof(client);

  0002b	c7 44 24 60 10
	00 00 00	 mov	 DWORD PTR namelen$[rsp], 16

; 874  :     (void)getpeername (sfd, (struct sockaddr *)&client, &namelen);

  00033	48 63 84 24 b0
	01 00 00	 movsxd	 rax, DWORD PTR sfd$[rsp]
  0003b	4c 8d 44 24 60	 lea	 r8, QWORD PTR namelen$[rsp]
  00040	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR client$[rsp]
  00048	48 8b c8	 mov	 rcx, rax
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getpeername

; 875  :     ipaddr = inet_ntoa(client.sin_addr);

  00051	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR client$[rsp+4]
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_ntoa
  0005e	48 89 44 24 78	 mov	 QWORD PTR ipaddr$[rsp], rax

; 876  : 
; 877  :     MSGBUF( msgtext,

  00063	83 bc 24 c0 01
	00 00 00	 cmp	 DWORD PTR term$[rsp], 0
  0006b	75 0e		 jne	 SHORT $LN31@connect_me
  0006d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159582
  00074	48 89 44 24 68	 mov	 QWORD PTR tv72[rsp], rax
  00079	eb 0c		 jmp	 SHORT $LN32@connect_me
$LN31@connect_me:
  0007b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159583
  00082	48 89 44 24 68	 mov	 QWORD PTR tv72[rsp], rax
$LN32@connect_me:
  00087	0f b7 8c 24 82
	00 00 00	 movzx	 ecx, WORD PTR client$[rsp+2]
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ntohs
  00095	0f b7 c0	 movzx	 eax, ax
  00098	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv72[rsp]
  0009d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000a2	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR devnum$[rsp]
  000a9	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  000ad	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000b1	48 8b 44 24 78	 mov	 rax, QWORD PTR ipaddr$[rsp]
  000b6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000bb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159584
  000c2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159585
  000c9	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  000ce	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR msgtext$[rsp]
  000d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN4@connect_me:

; 878  :             MSG( HHC01073, "I", ipaddr, (int)ntohs(client.sin_port),
; 879  :                            devnum, (term == COMMADPT_TERM_TTY) ? "TTY" : "2741" ) );
; 880  : 
; 881  :     VERIFY(0 <= write(sfd, msgtext, (u_int)strlen(msgtext)));

  000dc	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR msgtext$[rsp]
  000e4	e8 00 00 00 00	 call	 strlen
  000e9	44 8b c0	 mov	 r8d, eax
  000ec	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR msgtext$[rsp]
  000f4	8b 8c 24 b0 01
	00 00		 mov	 ecx, DWORD PTR sfd$[rsp]
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  00101	85 c0		 test	 eax, eax
  00103	7d 5c		 jge	 SHORT $LN20@connect_me
$LN7@connect_me:
  00105	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159587
  0010c	41 b8 71 03 00
	00		 mov	 r8d, 881		; 00000371H
  00112	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159588
  00119	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159589
  00120	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00126	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0012c	85 c0		 test	 eax, eax
  0012e	74 20		 je	 SHORT $LN21@connect_me
  00130	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159591
  00137	41 b8 71 03 00
	00		 mov	 r8d, 881		; 00000371H
  0013d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159592
  00144	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159593
  0014b	e8 00 00 00 00	 call	 DebuggerTrace
$LN21@connect_me:
  00150	33 c0		 xor	 eax, eax
  00152	85 c0		 test	 eax, eax
  00154	75 af		 jne	 SHORT $LN7@connect_me
  00156	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0015c	85 c0		 test	 eax, eax
  0015e	74 01		 je	 SHORT $LN22@connect_me
  00160	cc		 int	 3
$LN22@connect_me:
$LN20@connect_me:
  00161	33 c0		 xor	 eax, eax
  00163	85 c0		 test	 eax, eax
  00165	0f 85 71 ff ff
	ff		 jne	 $LN4@connect_me
$LN10@connect_me:

; 882  :     VERIFY(2 == write(sfd, "\r\n", 2));

  0016b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00171	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159596
  00178	8b 8c 24 b0 01
	00 00		 mov	 ecx, DWORD PTR sfd$[rsp]
  0017f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  00185	83 f8 02	 cmp	 eax, 2
  00188	74 5c		 je	 SHORT $LN23@connect_me
$LN13@connect_me:
  0018a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159597
  00191	41 b8 72 03 00
	00		 mov	 r8d, 882		; 00000372H
  00197	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159598
  0019e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159599
  001a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  001ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  001b1	85 c0		 test	 eax, eax
  001b3	74 20		 je	 SHORT $LN24@connect_me
  001b5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159601
  001bc	41 b8 72 03 00
	00		 mov	 r8d, 882		; 00000372H
  001c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159602
  001c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159603
  001d0	e8 00 00 00 00	 call	 DebuggerTrace
$LN24@connect_me:
  001d5	33 c0		 xor	 eax, eax
  001d7	85 c0		 test	 eax, eax
  001d9	75 af		 jne	 SHORT $LN13@connect_me
  001db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  001e1	85 c0		 test	 eax, eax
  001e3	74 01		 je	 SHORT $LN25@connect_me
  001e5	cc		 int	 3
$LN25@connect_me:
$LN23@connect_me:
  001e6	33 c0		 xor	 eax, eax
  001e8	85 c0		 test	 eax, eax
  001ea	0f 85 7b ff ff
	ff		 jne	 $LN10@connect_me

; 883  : 
; 884  :     WRMSG(HHC01073,"I", ipaddr, (int)ntohs(client.sin_port), devnum, (term == COMMADPT_TERM_TTY) ? "TTY" : "2741");

  001f0	83 bc 24 c0 01
	00 00 00	 cmp	 DWORD PTR term$[rsp], 0
  001f8	75 0e		 jne	 SHORT $LN33@connect_me
  001fa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159605
  00201	48 89 44 24 70	 mov	 QWORD PTR tv157[rsp], rax
  00206	eb 0c		 jmp	 SHORT $LN34@connect_me
$LN33@connect_me:
  00208	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159606
  0020f	48 89 44 24 70	 mov	 QWORD PTR tv157[rsp], rax
$LN34@connect_me:
  00214	0f b7 8c 24 82
	00 00 00	 movzx	 ecx, WORD PTR client$[rsp+2]
  0021c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ntohs
  00222	0f b7 c0	 movzx	 eax, ax
  00225	89 44 24 64	 mov	 DWORD PTR tv162[rsp], eax
  00229	b9 01 00 00 00	 mov	 ecx, 1
  0022e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00234	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv157[rsp]
  00239	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0023e	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR devnum$[rsp]
  00245	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00249	8b 4c 24 64	 mov	 ecx, DWORD PTR tv162[rsp]
  0024d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00251	48 8b 4c 24 78	 mov	 rcx, QWORD PTR ipaddr$[rsp]
  00256	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0025b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159607
  00262	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00267	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159608
  0026e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00273	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00278	41 b9 03 00 00
	00		 mov	 r9d, 3
  0027e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159609
  00285	ba 74 03 00 00	 mov	 edx, 884		; 00000374H
  0028a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159610
  00291	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 885  : 
; 886  :     if (binary_opt)

  00297	83 bc 24 c8 01
	00 00 00	 cmp	 DWORD PTR binary_opt$[rsp], 0
  0029f	0f 84 88 00 00
	00		 je	 $LN26@connect_me
$LN16@connect_me:

; 887  :         VERIFY(sizeof(telnet_binary) == write(sfd, telnet_binary, sizeof(telnet_binary)));

  002a5	41 b8 06 00 00
	00		 mov	 r8d, 6
  002ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:telnet_binary
  002b2	8b 8c 24 b0 01
	00 00		 mov	 ecx, DWORD PTR sfd$[rsp]
  002b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  002bf	48 98		 cdqe
  002c1	48 83 f8 06	 cmp	 rax, 6
  002c5	74 5c		 je	 SHORT $LN27@connect_me
$LN19@connect_me:
  002c7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159613
  002ce	41 b8 77 03 00
	00		 mov	 r8d, 887		; 00000377H
  002d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159614
  002db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159615
  002e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  002e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  002ee	85 c0		 test	 eax, eax
  002f0	74 20		 je	 SHORT $LN28@connect_me
  002f2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159617
  002f9	41 b8 77 03 00
	00		 mov	 r8d, 887		; 00000377H
  002ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159618
  00306	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159619
  0030d	e8 00 00 00 00	 call	 DebuggerTrace
$LN28@connect_me:
  00312	33 c0		 xor	 eax, eax
  00314	85 c0		 test	 eax, eax
  00316	75 af		 jne	 SHORT $LN19@connect_me
  00318	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0031e	85 c0		 test	 eax, eax
  00320	74 01		 je	 SHORT $LN29@connect_me
  00322	cc		 int	 3
$LN29@connect_me:
$LN27@connect_me:
  00323	33 c0		 xor	 eax, eax
  00325	85 c0		 test	 eax, eax
  00327	0f 85 78 ff ff
	ff		 jne	 $LN16@connect_me
$LN26@connect_me:

; 888  : 
; 889  :     return;
; 890  : }

  0032d	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00335	48 33 cc	 xor	 rcx, rsp
  00338	e8 00 00 00 00	 call	 __security_check_cookie
  0033d	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00344	c3		 ret	 0
connect_message ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
cur$ = 96
i$ = 100
incdata$ = 104
dotcount$ = 108
destip$ = 112
tv129 = 116
destport$ = 120
goteon$ = 124
tv75 = 128
tv80 = 132
tv137 = 136
tv140 = 140
tv145 = 144
tv159 = 148
tv164 = 152
tv184 = 156
tv189 = 160
tv209 = 164
tv212 = 168
tv217 = 172
tv248 = 176
tv253 = 180
tv272 = 184
tv277 = 188
ca$ = 208
commadpt_initiate_userdial PROC

; 756  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 757  :     int dotcount;       /* Number of seps (the 4th is the port separator) */
; 758  :     int i;              /* work                                           */
; 759  :     int cur;            /* Current section                                */
; 760  :     in_addr_t   destip; /* Destination IP address                         */
; 761  :     U16 destport;       /* Destination TCP port                           */
; 762  :     int incdata;        /* Incorrect dial data found                      */
; 763  :     int goteon;         /* EON presence flag                              */
; 764  : 
; 765  :    /* See the DIAL CCW portion in execute_ccw for dial format information */
; 766  : 
; 767  :     incdata=0;

  0000c	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR incdata$[rsp], 0

; 768  :     goteon=0;

  00014	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR goteon$[rsp], 0

; 769  :     dotcount=0;

  0001c	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR dotcount$[rsp], 0

; 770  :     cur=0;

  00024	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR cur$[rsp], 0

; 771  :     destip=0;

  0002c	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR destip$[rsp], 0

; 772  :     for(i=0;i<ca->dialcount;i++)

  00034	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0003c	eb 0a		 jmp	 SHORT $LN4@commadpt_i
$LN2@commadpt_i:
  0003e	8b 44 24 64	 mov	 eax, DWORD PTR i$[rsp]
  00042	ff c0		 inc	 eax
  00044	89 44 24 64	 mov	 DWORD PTR i$[rsp], eax
$LN4@commadpt_i:
  00048	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00050	0f b7 80 62 01
	00 00		 movzx	 eax, WORD PTR [rax+354]
  00057	39 44 24 64	 cmp	 DWORD PTR i$[rsp], eax
  0005b	0f 8d a0 04 00
	00		 jge	 $LN3@commadpt_i

; 773  :     {
; 774  :         if(goteon)

  00061	83 7c 24 7c 00	 cmp	 DWORD PTR goteon$[rsp], 0
  00066	0f 84 b7 00 00
	00		 je	 $LN7@commadpt_i

; 775  :         {
; 776  :             /* EON MUST be last data byte */
; 777  :             if(ca->dev->ccwtrace)

  0006c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00074	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00077	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0007d	c1 e8 0f	 shr	 eax, 15
  00080	83 e0 01	 and	 eax, 1
  00083	85 c0		 test	 eax, eax
  00085	0f 84 8b 00 00
	00		 je	 $LN8@commadpt_i

; 778  :             {
; 779  :                 WRMSG(HHC01066,"D",SSID_TO_LCSS(ca->dev->ssid),ca->devnum);

  0008b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00093	0f b7 80 40 01
	00 00		 movzx	 eax, WORD PTR [rax+320]
  0009a	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv75[rsp], eax
  000a1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  000a9	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ac	0f b7 49 44	 movzx	 ecx, WORD PTR [rcx+68]
  000b0	d1 f9		 sar	 ecx, 1
  000b2	89 8c 24 84 00
	00 00		 mov	 DWORD PTR tv80[rsp], ecx
  000b9	b9 01 00 00 00	 mov	 ecx, 1
  000be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000c4	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv75[rsp]
  000cb	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000cf	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv80[rsp]
  000d6	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159498
  000e1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159499
  000ed	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f7	41 b9 03 00 00
	00		 mov	 r9d, 3
  000fd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159500
  00104	ba 0b 03 00 00	 mov	 edx, 779		; 0000030bH
  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159501
  00110	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN8@commadpt_i:

; 780  :             }
; 781  :             incdata=1;

  00116	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR incdata$[rsp], 1

; 782  :             break;

  0011e	e9 de 03 00 00	 jmp	 $LN3@commadpt_i
$LN7@commadpt_i:

; 783  :         }
; 784  :         switch(ca->dialdata[i]&0x0f)

  00123	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  00128	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  00130	0f b6 84 01 42
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+322]
  00138	83 e0 0f	 and	 eax, 15
  0013b	89 44 24 74	 mov	 DWORD PTR tv129[rsp], eax
  0013f	8b 44 24 74	 mov	 eax, DWORD PTR tv129[rsp]
  00143	83 e8 0a	 sub	 eax, 10
  00146	89 44 24 74	 mov	 DWORD PTR tv129[rsp], eax
  0014a	83 7c 24 74 05	 cmp	 DWORD PTR tv129[rsp], 5
  0014f	0f 87 71 03 00
	00		 ja	 $LN21@commadpt_i
  00155	48 63 44 24 74	 movsxd	 rax, DWORD PTR tv129[rsp]
  0015a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00161	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN29@commadpt_i[rcx+rax*4]
  00168	48 03 c1	 add	 rax, rcx
  0016b	ff e0		 jmp	 rax
$LN9@commadpt_i:

; 785  :         {
; 786  :             case 0x0d:  /* SEP */
; 787  :                 if(dotcount<4)

  0016d	83 7c 24 6c 04	 cmp	 DWORD PTR dotcount$[rsp], 4
  00172	0f 8d aa 01 00
	00		 jge	 $LN10@commadpt_i

; 788  :                 {
; 789  :                     if(cur>255)

  00178	81 7c 24 60 ff
	00 00 00	 cmp	 DWORD PTR cur$[rsp], 255 ; 000000ffH
  00180	0f 8e 6a 01 00
	00		 jle	 $LN12@commadpt_i

; 790  :                     {
; 791  :                         incdata=1;

  00186	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR incdata$[rsp], 1

; 792  :                         if(ca->dev->ccwtrace)

  0018e	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00196	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00199	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0019f	c1 e8 0f	 shr	 eax, 15
  001a2	83 e0 01	 and	 eax, 1
  001a5	85 c0		 test	 eax, eax
  001a7	0f 84 3e 01 00
	00		 je	 $LN13@commadpt_i

; 793  :                         {
; 794  :                             WRMSG(HHC01067,"D",SSID_TO_LCSS(ca->dev->ssid),ca->devnum,dotcount+1);

  001ad	8b 44 24 6c	 mov	 eax, DWORD PTR dotcount$[rsp]
  001b1	ff c0		 inc	 eax
  001b3	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv137[rsp], eax
  001ba	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  001c2	0f b7 89 40 01
	00 00		 movzx	 ecx, WORD PTR [rcx+320]
  001c9	89 8c 24 8c 00
	00 00		 mov	 DWORD PTR tv140[rsp], ecx
  001d0	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR ca$[rsp]
  001d8	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  001db	0f b7 52 44	 movzx	 edx, WORD PTR [rdx+68]
  001df	d1 fa		 sar	 edx, 1
  001e1	89 94 24 90 00
	00 00		 mov	 DWORD PTR tv145[rsp], edx
  001e8	b9 01 00 00 00	 mov	 ecx, 1
  001ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001f3	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv137[rsp]
  001fa	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  001fe	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv140[rsp]
  00205	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00209	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv145[rsp]
  00210	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00214	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159507
  0021b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00220	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159508
  00227	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0022c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00231	41 b9 03 00 00
	00		 mov	 r9d, 3
  00237	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159509
  0023e	ba 1a 03 00 00	 mov	 edx, 794		; 0000031aH
  00243	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159510
  0024a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 795  :                             WRMSG(HHC01068,"D",SSID_TO_LCSS(ca->dev->ssid),ca->devnum,cur,cur);

  00250	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00258	0f b7 80 40 01
	00 00		 movzx	 eax, WORD PTR [rax+320]
  0025f	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv159[rsp], eax
  00266	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  0026e	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00271	0f b7 49 44	 movzx	 ecx, WORD PTR [rcx+68]
  00275	d1 f9		 sar	 ecx, 1
  00277	89 8c 24 98 00
	00 00		 mov	 DWORD PTR tv164[rsp], ecx
  0027e	b9 01 00 00 00	 mov	 ecx, 1
  00283	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00289	8b 4c 24 60	 mov	 ecx, DWORD PTR cur$[rsp]
  0028d	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00291	8b 4c 24 60	 mov	 ecx, DWORD PTR cur$[rsp]
  00295	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00299	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv159[rsp]
  002a0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  002a4	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv164[rsp]
  002ab	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  002af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159511
  002b6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159512
  002c2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002c7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002cc	41 b9 03 00 00
	00		 mov	 r9d, 3
  002d2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159513
  002d9	ba 1b 03 00 00	 mov	 edx, 795		; 0000031bH
  002de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159514
  002e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN13@commadpt_i:

; 796  :                         }
; 797  :                         break;

  002eb	e9 03 02 00 00	 jmp	 $LN5@commadpt_i
$LN12@commadpt_i:

; 798  :                     }
; 799  :                     destip<<=8;

  002f0	8b 44 24 70	 mov	 eax, DWORD PTR destip$[rsp]
  002f4	c1 e0 08	 shl	 eax, 8
  002f7	89 44 24 70	 mov	 DWORD PTR destip$[rsp], eax

; 800  :                     destip+=cur;

  002fb	8b 44 24 60	 mov	 eax, DWORD PTR cur$[rsp]
  002ff	8b 4c 24 70	 mov	 ecx, DWORD PTR destip$[rsp]
  00303	03 c8		 add	 ecx, eax
  00305	8b c1		 mov	 eax, ecx
  00307	89 44 24 70	 mov	 DWORD PTR destip$[rsp], eax

; 801  :                     cur=0;

  0030b	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR cur$[rsp], 0

; 802  :                     dotcount++;

  00313	8b 44 24 6c	 mov	 eax, DWORD PTR dotcount$[rsp]
  00317	ff c0		 inc	 eax
  00319	89 44 24 6c	 mov	 DWORD PTR dotcount$[rsp], eax

; 803  :                 }

  0031d	e9 b7 00 00 00	 jmp	 $LN11@commadpt_i
$LN10@commadpt_i:

; 804  :                 else
; 805  :                 {
; 806  :                     incdata=1;

  00322	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR incdata$[rsp], 1

; 807  :                     if(ca->dev->ccwtrace)

  0032a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00332	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00335	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0033b	c1 e8 0f	 shr	 eax, 15
  0033e	83 e0 01	 and	 eax, 1
  00341	85 c0		 test	 eax, eax
  00343	0f 84 8b 00 00
	00		 je	 $LN14@commadpt_i

; 808  :                     {
; 809  :                         WRMSG(HHC01069,"D",SSID_TO_LCSS(ca->dev->ssid),ca->devnum);

  00349	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00351	0f b7 80 40 01
	00 00		 movzx	 eax, WORD PTR [rax+320]
  00358	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv184[rsp], eax
  0035f	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  00367	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0036a	0f b7 49 44	 movzx	 ecx, WORD PTR [rcx+68]
  0036e	d1 f9		 sar	 ecx, 1
  00370	89 8c 24 a0 00
	00 00		 mov	 DWORD PTR tv189[rsp], ecx
  00377	b9 01 00 00 00	 mov	 ecx, 1
  0037c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00382	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv184[rsp]
  00389	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0038d	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv189[rsp]
  00394	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00398	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159516
  0039f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159517
  003ab	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003b0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003b5	41 b9 03 00 00
	00		 mov	 r9d, 3
  003bb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159518
  003c2	ba 29 03 00 00	 mov	 edx, 809		; 00000329H
  003c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159519
  003ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN14@commadpt_i:

; 810  :                     }
; 811  :                     break;

  003d4	e9 1a 01 00 00	 jmp	 $LN5@commadpt_i
$LN11@commadpt_i:

; 812  :                 }
; 813  :                 break;

  003d9	e9 15 01 00 00	 jmp	 $LN5@commadpt_i
$LN15@commadpt_i:

; 814  :             case 0x0c: /* EON */
; 815  :                 goteon=1;

  003de	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR goteon$[rsp], 1

; 816  :                 break;

  003e6	e9 08 01 00 00	 jmp	 $LN5@commadpt_i
$LN16@commadpt_i:
$LN17@commadpt_i:
$LN18@commadpt_i:
$LN19@commadpt_i:

; 817  : 
; 818  :                 /* A,B,E,F not valid */
; 819  :             case 0x0a:
; 820  :             case 0x0b:
; 821  :             case 0x0e:
; 822  :             case 0x0f:
; 823  :                 incdata=1;

  003eb	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR incdata$[rsp], 1

; 824  :                 if(ca->dev->ccwtrace)

  003f3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  003fb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003fe	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00404	c1 e8 0f	 shr	 eax, 15
  00407	83 e0 01	 and	 eax, 1
  0040a	85 c0		 test	 eax, eax
  0040c	0f 84 b2 00 00
	00		 je	 $LN20@commadpt_i

; 825  :                 {
; 826  :                     WRMSG(HHC01070,"D",SSID_TO_LCSS(ca->dev->ssid),ca->devnum,ca->dialdata[i]);

  00412	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  00417	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  0041f	0f b6 84 01 42
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+322]
  00427	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv209[rsp], eax
  0042e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  00436	0f b7 89 40 01
	00 00		 movzx	 ecx, WORD PTR [rcx+320]
  0043d	89 8c 24 a8 00
	00 00		 mov	 DWORD PTR tv212[rsp], ecx
  00444	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR ca$[rsp]
  0044c	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0044f	0f b7 52 44	 movzx	 edx, WORD PTR [rdx+68]
  00453	d1 fa		 sar	 edx, 1
  00455	89 94 24 ac 00
	00 00		 mov	 DWORD PTR tv217[rsp], edx
  0045c	b9 01 00 00 00	 mov	 ecx, 1
  00461	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00467	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv209[rsp]
  0046e	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00472	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv212[rsp]
  00479	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0047d	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR tv217[rsp]
  00484	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00488	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159526
  0048f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00494	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159527
  0049b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004a0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004a5	41 b9 03 00 00
	00		 mov	 r9d, 3
  004ab	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159528
  004b2	ba 3a 03 00 00	 mov	 edx, 826		; 0000033aH
  004b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159529
  004be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN20@commadpt_i:

; 827  :                 }
; 828  :                 break;

  004c4	eb 2d		 jmp	 SHORT $LN5@commadpt_i
$LN21@commadpt_i:

; 829  :             default:
; 830  :                 cur*=10;

  004c6	6b 44 24 60 0a	 imul	 eax, DWORD PTR cur$[rsp], 10
  004cb	89 44 24 60	 mov	 DWORD PTR cur$[rsp], eax

; 831  :                 cur+=ca->dialdata[i]&0x0f;

  004cf	48 63 44 24 64	 movsxd	 rax, DWORD PTR i$[rsp]
  004d4	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  004dc	0f b6 84 01 42
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+322]
  004e4	83 e0 0f	 and	 eax, 15
  004e7	8b 4c 24 60	 mov	 ecx, DWORD PTR cur$[rsp]
  004eb	03 c8		 add	 ecx, eax
  004ed	8b c1		 mov	 eax, ecx
  004ef	89 44 24 60	 mov	 DWORD PTR cur$[rsp], eax
$LN5@commadpt_i:

; 832  :                 break;
; 833  :         }
; 834  :         if(incdata)

  004f3	83 7c 24 68 00	 cmp	 DWORD PTR incdata$[rsp], 0
  004f8	74 02		 je	 SHORT $LN22@commadpt_i

; 835  :         {
; 836  :             break;

  004fa	eb 05		 jmp	 SHORT $LN3@commadpt_i
$LN22@commadpt_i:

; 837  :         }
; 838  :     }

  004fc	e9 3d fb ff ff	 jmp	 $LN2@commadpt_i
$LN3@commadpt_i:

; 839  :     if(incdata)

  00501	83 7c 24 68 00	 cmp	 DWORD PTR incdata$[rsp], 0
  00506	74 0a		 je	 SHORT $LN23@commadpt_i

; 840  :     {
; 841  :         return -1;

  00508	b8 ff ff ff ff	 mov	 eax, -1
  0050d	e9 c5 01 00 00	 jmp	 $LN1@commadpt_i
$LN23@commadpt_i:

; 842  :     }
; 843  :     if(dotcount<4)

  00512	83 7c 24 6c 04	 cmp	 DWORD PTR dotcount$[rsp], 4
  00517	0f 8d bc 00 00
	00		 jge	 $LN24@commadpt_i

; 844  :     {
; 845  :         if(ca->dev->ccwtrace)

  0051d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00525	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00528	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0052e	c1 e8 0f	 shr	 eax, 15
  00531	83 e0 01	 and	 eax, 1
  00534	85 c0		 test	 eax, eax
  00536	0f 84 93 00 00
	00		 je	 $LN25@commadpt_i

; 846  :         {
; 847  :             WRMSG(HHC01071,"D",SSID_TO_LCSS(ca->dev->ssid),ca->devnum,dotcount);

  0053c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00544	0f b7 80 40 01
	00 00		 movzx	 eax, WORD PTR [rax+320]
  0054b	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv248[rsp], eax
  00552	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  0055a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0055d	0f b7 49 44	 movzx	 ecx, WORD PTR [rcx+68]
  00561	d1 f9		 sar	 ecx, 1
  00563	89 8c 24 b4 00
	00 00		 mov	 DWORD PTR tv253[rsp], ecx
  0056a	b9 01 00 00 00	 mov	 ecx, 1
  0056f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00575	8b 4c 24 6c	 mov	 ecx, DWORD PTR dotcount$[rsp]
  00579	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  0057d	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR tv248[rsp]
  00584	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00588	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv253[rsp]
  0058f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00593	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159535
  0059a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0059f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159536
  005a6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005ab	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005b0	41 b9 03 00 00
	00		 mov	 r9d, 3
  005b6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159537
  005bd	ba 4f 03 00 00	 mov	 edx, 847		; 0000034fH
  005c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159538
  005c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN25@commadpt_i:

; 848  :         }
; 849  :         return -1;

  005cf	b8 ff ff ff ff	 mov	 eax, -1
  005d4	e9 fe 00 00 00	 jmp	 $LN1@commadpt_i
$LN24@commadpt_i:

; 850  :     }
; 851  :     if(cur>65535)

  005d9	81 7c 24 60 ff
	ff 00 00	 cmp	 DWORD PTR cur$[rsp], 65535 ; 0000ffffH
  005e1	0f 8e b9 00 00
	00		 jle	 $LN26@commadpt_i

; 852  :     {
; 853  :         if(ca->dev->ccwtrace)

  005e7	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  005ef	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005f2	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  005f8	c1 e8 0f	 shr	 eax, 15
  005fb	83 e0 01	 and	 eax, 1
  005fe	85 c0		 test	 eax, eax
  00600	0f 84 93 00 00
	00		 je	 $LN27@commadpt_i

; 854  :         {
; 855  :             WRMSG(HHC01072,"D",SSID_TO_LCSS(ca->dev->ssid),ca->devnum,cur);

  00606	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  0060e	0f b7 80 40 01
	00 00		 movzx	 eax, WORD PTR [rax+320]
  00615	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv272[rsp], eax
  0061c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  00624	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00627	0f b7 49 44	 movzx	 ecx, WORD PTR [rcx+68]
  0062b	d1 f9		 sar	 ecx, 1
  0062d	89 8c 24 bc 00
	00 00		 mov	 DWORD PTR tv277[rsp], ecx
  00634	b9 01 00 00 00	 mov	 ecx, 1
  00639	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0063f	8b 4c 24 60	 mov	 ecx, DWORD PTR cur$[rsp]
  00643	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00647	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR tv272[rsp]
  0064e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00652	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR tv277[rsp]
  00659	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0065d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159541
  00664	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00669	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159542
  00670	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00675	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0067a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00680	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159543
  00687	ba 57 03 00 00	 mov	 edx, 855		; 00000357H
  0068c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159544
  00693	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN27@commadpt_i:

; 856  :         }
; 857  :         return -1;

  00699	b8 ff ff ff ff	 mov	 eax, -1
  0069e	eb 37		 jmp	 SHORT $LN1@commadpt_i
$LN26@commadpt_i:

; 858  :     }
; 859  :     destport=cur;

  006a0	0f b7 44 24 60	 movzx	 eax, WORD PTR cur$[rsp]
  006a5	66 89 44 24 78	 mov	 WORD PTR destport$[rsp], ax

; 860  :     /* Update RHOST/RPORT */
; 861  :     ca->rport=destport;

  006aa	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  006b2	0f b7 4c 24 78	 movzx	 ecx, WORD PTR destport$[rsp]
  006b7	66 89 48 44	 mov	 WORD PTR [rax+68], cx

; 862  :     ca->rhost=destip;

  006bb	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  006c3	8b 4c 24 70	 mov	 ecx, DWORD PTR destip$[rsp]
  006c7	89 48 48	 mov	 DWORD PTR [rax+72], ecx

; 863  :     return(commadpt_connout(ca));

  006ca	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  006d2	e8 00 00 00 00	 call	 commadpt_connout
$LN1@commadpt_i:

; 864  : }

  006d7	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  006de	c3		 ret	 0
  006df	90		 npad	 1
$LN29@commadpt_i:
  006e0	00 00 00 00	 DD	 $LN16@commadpt_i
  006e4	00 00 00 00	 DD	 $LN17@commadpt_i
  006e8	00 00 00 00	 DD	 $LN15@commadpt_i
  006ec	00 00 00 00	 DD	 $LN9@commadpt_i
  006f0	00 00 00 00	 DD	 $LN18@commadpt_i
  006f4	00 00 00 00	 DD	 $LN19@commadpt_i
commadpt_initiate_userdial ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
rc$ = 96
intmp$ = 100
tv149 = 104
tv155 = 108
tv160 = 112
tv151 = 120
sin$ = 128
wbfr$ = 144
__$ArrayPad$ = 400
ca$ = 432
commadpt_connout PROC

; 704  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 705  :     int rc;
; 706  :     char        wbfr[256];
; 707  :     struct      sockaddr_in     sin;
; 708  :     struct      in_addr intmp;
; 709  :     sin.sin_family=AF_INET;

  0001e	b8 02 00 00 00	 mov	 eax, 2
  00023	66 89 84 24 80
	00 00 00	 mov	 WORD PTR sin$[rsp], ax

; 710  :     sin.sin_addr.s_addr=ca->rhost;

  0002b	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00033	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00036	89 84 24 84 00
	00 00		 mov	 DWORD PTR sin$[rsp+4], eax

; 711  :     sin.sin_port=htons(ca->rport);

  0003d	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00045	0f b7 48 44	 movzx	 ecx, WORD PTR [rax+68]
  00049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_htons
  0004f	66 89 84 24 82
	00 00 00	 mov	 WORD PTR sin$[rsp+2], ax

; 712  :     if(socket_is_socket(ca->sfd))

  00057	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  0005f	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_socket_is_socket
  00068	85 c0		 test	 eax, eax
  0006a	74 30		 je	 SHORT $LN8@commadpt_c

; 713  :     {
; 714  :         close_socket(ca->sfd);

  0006c	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00074	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 715  :         ca->connect=0;

  0007d	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00085	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0008b	83 e0 fd	 and	 eax, -3			; fffffffdH
  0008e	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  00096	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax
$LN8@commadpt_c:

; 716  :     }
; 717  :     ca->sfd=socket(AF_INET,SOCK_STREAM,0);

  0009c	45 33 c0	 xor	 r8d, r8d
  0009f	ba 01 00 00 00	 mov	 edx, 1
  000a4	b9 02 00 00 00	 mov	 ecx, 2
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_socket
  000af	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  000b7	89 41 4c	 mov	 DWORD PTR [rcx+76], eax

; 718  :     /* set socket to NON-blocking mode */
; 719  :     socket_set_blocking_mode(ca->sfd,0);

  000ba	33 d2		 xor	 edx, edx
  000bc	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  000c4	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  000c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_socket_set_blocking_mode

; 720  :     rc=connect(ca->sfd,(struct sockaddr *)&sin,sizeof(sin));

  000cd	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  000d5	48 63 40 4c	 movsxd	 rax, DWORD PTR [rax+76]
  000d9	41 b8 10 00 00
	00		 mov	 r8d, 16
  000df	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR sin$[rsp]
  000e7	48 8b c8	 mov	 rcx, rax
  000ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_connect
  000f0	89 44 24 60	 mov	 DWORD PTR rc$[rsp], eax

; 721  :     if(rc<0)

  000f4	83 7c 24 60 00	 cmp	 DWORD PTR rc$[rsp], 0
  000f9	0f 8d a2 01 00
	00		 jge	 $LN9@commadpt_c

; 722  :     {
; 723  : #if defined(_MSVC_)
; 724  :         if(HSO_errno==HSO_EWOULDBLOCK)

  000ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00105	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  0010a	75 0c		 jne	 SHORT $LN10@commadpt_c

; 725  : #else /* defined(_MSVC_) */
; 726  :         if(HSO_errno==HSO_EINPROGRESS)
; 727  : #endif /* defined(_MSVC_) */
; 728  :         {
; 729  :             return(0);

  0010c	33 c0		 xor	 eax, eax
  0010e	e9 af 01 00 00	 jmp	 $LN1@commadpt_c

; 730  :         }

  00113	e9 89 01 00 00	 jmp	 $LN11@commadpt_c
$LN10@commadpt_c:
$LN4@commadpt_c:

; 731  :         else
; 732  :         {
; 733  :             VERIFY(!strerror_r(HSO_errno,wbfr,256));

  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  0011e	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  00124	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR wbfr$[rsp]
  0012c	8b c8		 mov	 ecx, eax
  0012e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror_r
  00134	85 c0		 test	 eax, eax
  00136	74 5c		 je	 SHORT $LN12@commadpt_c
$LN7@commadpt_c:
  00138	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159468
  0013f	41 b8 dd 02 00
	00		 mov	 r8d, 733		; 000002ddH
  00145	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159469
  0014c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159470
  00153	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00159	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0015f	85 c0		 test	 eax, eax
  00161	74 20		 je	 SHORT $LN13@commadpt_c
  00163	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159472
  0016a	41 b8 dd 02 00
	00		 mov	 r8d, 733		; 000002ddH
  00170	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159473
  00177	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159474
  0017e	e8 00 00 00 00	 call	 DebuggerTrace
$LN13@commadpt_c:
  00183	33 c0		 xor	 eax, eax
  00185	85 c0		 test	 eax, eax
  00187	75 af		 jne	 SHORT $LN7@commadpt_c
  00189	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0018f	85 c0		 test	 eax, eax
  00191	74 01		 je	 SHORT $LN14@commadpt_c
  00193	cc		 int	 3
$LN14@commadpt_c:
$LN12@commadpt_c:
  00194	33 c0		 xor	 eax, eax
  00196	85 c0		 test	 eax, eax
  00198	0f 85 7a ff ff
	ff		 jne	 $LN4@commadpt_c

; 734  :             intmp.s_addr=ca->rhost;

  0019e	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  001a6	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  001a9	89 44 24 64	 mov	 DWORD PTR intmp$[rsp], eax

; 735  :             WRMSG(HHC01001, "I",

  001ad	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  001b5	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  001b9	89 44 24 68	 mov	 DWORD PTR tv149[rsp], eax
  001bd	8b 4c 24 64	 mov	 ecx, DWORD PTR intmp$[rsp]
  001c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_inet_ntoa
  001c7	48 89 44 24 78	 mov	 QWORD PTR tv151[rsp], rax
  001cc	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  001d4	0f b7 89 40 01
	00 00		 movzx	 ecx, WORD PTR [rcx+320]
  001db	89 4c 24 6c	 mov	 DWORD PTR tv155[rsp], ecx
  001df	48 8b 94 24 b0
	01 00 00	 mov	 rdx, QWORD PTR ca$[rsp]
  001e7	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  001ea	0f b7 52 44	 movzx	 edx, WORD PTR [rdx+68]
  001ee	d1 fa		 sar	 edx, 1
  001f0	89 54 24 70	 mov	 DWORD PTR tv160[rsp], edx
  001f4	b9 01 00 00 00	 mov	 ecx, 1
  001f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001ff	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR wbfr$[rsp]
  00207	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0020c	8b 4c 24 68	 mov	 ecx, DWORD PTR tv149[rsp]
  00210	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00214	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv151[rsp]
  00219	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0021e	8b 4c 24 6c	 mov	 ecx, DWORD PTR tv155[rsp]
  00222	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00226	8b 4c 24 70	 mov	 ecx, DWORD PTR tv160[rsp]
  0022a	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0022e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159476
  00235	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0023a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159477
  00241	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00246	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00251	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159478
  00258	ba e4 02 00 00	 mov	 edx, 740		; 000002e4H
  0025d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159479
  00264	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 736  :                     SSID_TO_LCSS(ca->dev->ssid),
; 737  :                     ca->devnum,
; 738  :                     inet_ntoa(intmp),
; 739  :                     ca->rport,
; 740  :                     wbfr);
; 741  :             close_socket(ca->sfd);

  0026a	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00272	8b 48 4c	 mov	 ecx, DWORD PTR [rax+76]
  00275	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 742  :             ca->connect=0;

  0027b	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  00283	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  00289	83 e0 fd	 and	 eax, -3			; fffffffdH
  0028c	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  00294	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 743  :             return(-1);

  0029a	b8 ff ff ff ff	 mov	 eax, -1
  0029f	eb 21		 jmp	 SHORT $LN1@commadpt_c
$LN11@commadpt_c:
$LN9@commadpt_c:

; 744  :         }
; 745  :     }
; 746  :     ca->connect=1;

  002a1	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR ca$[rsp]
  002a9	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  002af	83 c8 02	 or	 eax, 2
  002b2	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR ca$[rsp]
  002ba	89 81 68 01 00
	00		 mov	 DWORD PTR [rcx+360], eax

; 747  :     return(0);

  002c0	33 c0		 xor	 eax, eax
$LN1@commadpt_c:

; 748  : }

  002c2	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  002ca	48 33 cc	 xor	 rcx, rsp
  002cd	e8 00 00 00 00	 call	 __security_check_cookie
  002d2	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  002d9	c3		 ret	 0
commadpt_connout ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
he$ = 32
ia$ = 64
txt$ = 72
commadpt_getaddr PROC

; 687  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 688  :     struct hostent *he;
; 689  :     he=gethostbyname(txt);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR txt$[rsp]
  00013	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_gethostbyname
  00019	48 89 44 24 20	 mov	 QWORD PTR he$[rsp], rax

; 690  :     if(he==NULL)

  0001e	48 83 7c 24 20
	00		 cmp	 QWORD PTR he$[rsp], 0
  00024	75 07		 jne	 SHORT $LN2@commadpt_g

; 691  :     {
; 692  :         return(-1);

  00026	b8 ff ff ff ff	 mov	 eax, -1
  0002b	eb 21		 jmp	 SHORT $LN1@commadpt_g
$LN2@commadpt_g:

; 693  :     }
; 694  :     memcpy(ia,he->h_addr_list[0],4);

  0002d	b8 08 00 00 00	 mov	 eax, 8
  00032	48 6b c0 00	 imul	 rax, rax, 0
  00036	48 8b 4c 24 20	 mov	 rcx, QWORD PTR he$[rsp]
  0003b	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  0003f	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00043	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ia$[rsp]
  00048	8b 00		 mov	 eax, DWORD PTR [rax]
  0004a	89 01		 mov	 DWORD PTR [rcx], eax

; 695  :     return(0);

  0004c	33 c0		 xor	 eax, eax
$LN1@commadpt_g:

; 696  : }

  0004e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00052	c3		 ret	 0
commadpt_getaddr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
pno$ = 32
se$ = 40
txt$ = 64
commadpt_getport PROC

; 667  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 668  :     int pno;
; 669  :     struct servent *se;
; 670  :     pno=atoi(txt);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR txt$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00014	89 44 24 20	 mov	 DWORD PTR pno$[rsp], eax

; 671  :     if(pno==0)

  00018	83 7c 24 20 00	 cmp	 DWORD PTR pno$[rsp], 0
  0001d	75 33		 jne	 SHORT $LN2@commadpt_g

; 672  :     {
; 673  :         se=getservbyname(txt,"tcp");

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159435
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR txt$[rsp]
  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getservbyname
  00031	48 89 44 24 28	 mov	 QWORD PTR se$[rsp], rax

; 674  :         if(se==NULL)

  00036	48 83 7c 24 28
	00		 cmp	 QWORD PTR se$[rsp], 0
  0003c	75 07		 jne	 SHORT $LN3@commadpt_g

; 675  :         {
; 676  :             return -1;

  0003e	b8 ff ff ff ff	 mov	 eax, -1
  00043	eb 11		 jmp	 SHORT $LN1@commadpt_g
$LN3@commadpt_g:

; 677  :         }
; 678  :         pno=se->s_port;

  00045	48 8b 44 24 28	 mov	 rax, QWORD PTR se$[rsp]
  0004a	0f bf 40 18	 movsx	 eax, WORD PTR [rax+24]
  0004e	89 44 24 20	 mov	 DWORD PTR pno$[rsp], eax
$LN2@commadpt_g:

; 679  :     }
; 680  :     return(pno);

  00052	8b 44 24 20	 mov	 eax, DWORD PTR pno$[rsp]
$LN1@commadpt_g:

; 681  : }

  00056	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005a	c3		 ret	 0
commadpt_getport ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
tv84 = 96
tv90 = 100
tv72 = 104
buf$1 = 112
__$ArrayPad$ = 152
dev$ = 176
commadpt_alloc_device PROC

; 640  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec a0 00
	00 00		 sub	 rsp, 160		; 000000a0H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 641  :     dev->commadpt=malloc(sizeof(COMMADPT));

  0001f	b9 80 03 00 00	 mov	 ecx, 896		; 00000380H
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0002a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00032	48 89 81 68 11
	00 00		 mov	 QWORD PTR [rcx+4456], rax

; 642  :     if(dev->commadpt==NULL)

  00039	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00041	48 83 b8 68 11
	00 00 00	 cmp	 QWORD PTR [rax+4456], 0
  00049	0f 85 f1 00 00
	00		 jne	 $LN2@commadpt_a

; 643  :     {
; 644  :         char buf[40];
; 645  :         MSGBUF(buf, "malloc(%d)", (int)sizeof(COMMADPT));

  0004f	41 b9 80 03 00
	00		 mov	 r9d, 896		; 00000380H
  00055	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159422
  0005c	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00061	48 8d 4c 24 70	 lea	 rcx, QWORD PTR buf$1[rsp]
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 646  :         WRMSG(HHC01000, "E",LCSS_DEVNUM, buf, strerror(errno));

  0006c	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00075	74 12		 je	 SHORT $LN4@commadpt_a
  00077	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0007f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00083	89 44 24 60	 mov	 DWORD PTR tv84[rsp], eax
  00087	eb 08		 jmp	 SHORT $LN5@commadpt_a
$LN4@commadpt_a:
  00089	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
$LN5@commadpt_a:
  00091	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0009a	74 14		 je	 SHORT $LN6@commadpt_a
  0009c	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000a4	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  000a8	d1 f8		 sar	 eax, 1
  000aa	89 44 24 64	 mov	 DWORD PTR tv90[rsp], eax
  000ae	eb 08		 jmp	 SHORT $LN7@commadpt_a
$LN6@commadpt_a:
  000b0	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv90[rsp], 0
$LN7@commadpt_a:
  000b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000be	8b 08		 mov	 ecx, DWORD PTR [rax]
  000c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  000c6	48 89 44 24 68	 mov	 QWORD PTR tv72[rsp], rax
  000cb	b9 01 00 00 00	 mov	 ecx, 1
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000d6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv72[rsp]
  000db	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  000e0	48 8d 4c 24 70	 lea	 rcx, QWORD PTR buf$1[rsp]
  000e5	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000ea	8b 4c 24 60	 mov	 ecx, DWORD PTR tv84[rsp]
  000ee	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000f2	8b 4c 24 64	 mov	 ecx, DWORD PTR tv90[rsp]
  000f6	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159423
  00101	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00106	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159424
  0010d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00112	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00117	41 b9 03 00 00
	00		 mov	 r9d, 3
  0011d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159425
  00124	ba 86 02 00 00	 mov	 edx, 646		; 00000286H
  00129	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159426
  00130	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 647  :         return -1;

  00136	b8 ff ff ff ff	 mov	 eax, -1
  0013b	e9 44 01 00 00	 jmp	 $LN1@commadpt_a
$LN2@commadpt_a:

; 648  :     }
; 649  :     memset(dev->commadpt, 0, sizeof(COMMADPT) );

  00140	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00148	48 8b b8 68 11
	00 00		 mov	 rdi, QWORD PTR [rax+4456]
  0014f	33 c0		 xor	 eax, eax
  00151	b9 80 03 00 00	 mov	 ecx, 896		; 00000380H
  00156	f3 aa		 rep stosb

; 650  :     commadpt_ring_init(&dev->commadpt->inbfr,4096,dev->ccwtrace);

  00158	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00160	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00166	c1 e8 0f	 shr	 eax, 15
  00169	83 e0 01	 and	 eax, 1
  0016c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00174	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  0017b	48 83 c1 78	 add	 rcx, 120		; 00000078H
  0017f	44 8b c0	 mov	 r8d, eax
  00182	ba 00 10 00 00	 mov	 edx, 4096		; 00001000H
  00187	e8 00 00 00 00	 call	 commadpt_ring_init

; 651  :     commadpt_ring_init(&dev->commadpt->outbfr,4096,dev->ccwtrace);

  0018c	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00194	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0019a	c1 e8 0f	 shr	 eax, 15
  0019d	83 e0 01	 and	 eax, 1
  001a0	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  001a8	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  001af	48 81 c1 a0 00
	00 00		 add	 rcx, 160		; 000000a0H
  001b6	44 8b c0	 mov	 r8d, eax
  001b9	ba 00 10 00 00	 mov	 edx, 4096		; 00001000H
  001be	e8 00 00 00 00	 call	 commadpt_ring_init

; 652  :     commadpt_ring_init(&dev->commadpt->pollbfr,4096,dev->ccwtrace);

  001c3	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001cb	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  001d1	c1 e8 0f	 shr	 eax, 15
  001d4	83 e0 01	 and	 eax, 1
  001d7	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  001df	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  001e6	48 81 c1 c8 00
	00 00		 add	 rcx, 200		; 000000c8H
  001ed	44 8b c0	 mov	 r8d, eax
  001f0	ba 00 10 00 00	 mov	 edx, 4096		; 00001000H
  001f5	e8 00 00 00 00	 call	 commadpt_ring_init

; 653  :     commadpt_ring_init(&dev->commadpt->rdwrk,65536,dev->ccwtrace);

  001fa	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00202	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00208	c1 e8 0f	 shr	 eax, 15
  0020b	83 e0 01	 and	 eax, 1
  0020e	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00216	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  0021d	48 81 c1 f0 00
	00 00		 add	 rcx, 240		; 000000f0H
  00224	44 8b c0	 mov	 r8d, eax
  00227	ba 00 00 01 00	 mov	 edx, 65536		; 00010000H
  0022c	e8 00 00 00 00	 call	 commadpt_ring_init

; 654  :     commadpt_ring_init(&dev->commadpt->ttybuf,TTYLINE_SZ,dev->ccwtrace);

  00231	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00239	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0023f	c1 e8 0f	 shr	 eax, 15
  00242	83 e0 01	 and	 eax, 1
  00245	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0024d	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00254	48 81 c1 18 01
	00 00		 add	 rcx, 280		; 00000118H
  0025b	44 8b c0	 mov	 r8d, eax
  0025e	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  00263	e8 00 00 00 00	 call	 commadpt_ring_init

; 655  :     dev->commadpt->dev=dev;

  00268	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00270	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00277	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0027f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 656  :     return 0;

  00282	33 c0		 xor	 eax, eax
$LN1@commadpt_a:

; 657  : }

  00284	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0028c	48 33 cc	 xor	 rcx, rsp
  0028f	e8 00 00 00 00	 call	 __security_check_cookie
  00294	48 81 c4 a0 00
	00 00		 add	 rsp, 160		; 000000a0H
  0029b	5f		 pop	 rdi
  0029c	c3		 ret	 0
commadpt_alloc_device ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
tv147 = 80
tv151 = 84
tv168 = 88
tv172 = 92
dev$ = 112
commadpt_clean_device PROC

; 594  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 595  :     if (!dev)

  00009	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0000f	75 05		 jne	 SHORT $LN2@commadpt_c

; 596  :     {
; 597  :         /*
; 598  :          * Shouldn't happen.. But during shutdown, some weird
; 599  :          * things happen !
; 600  :          */
; 601  :         return;

  00011	e9 56 02 00 00	 jmp	 $LN1@commadpt_c
$LN2@commadpt_c:

; 602  :     }
; 603  : 
; 604  :     if (dev->commadpt)

  00016	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0001b	48 83 b8 68 11
	00 00 00	 cmp	 QWORD PTR [rax+4456], 0
  00023	0f 84 af 01 00
	00		 je	 $LN3@commadpt_c

; 605  :     {
; 606  :         commadpt_ring_terminate( &dev->commadpt->inbfr,   dev->ccwtrace );

  00029	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0002e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00034	c1 e8 0f	 shr	 eax, 15
  00037	83 e0 01	 and	 eax, 1
  0003a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0003f	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00046	48 83 c1 78	 add	 rcx, 120		; 00000078H
  0004a	8b d0		 mov	 edx, eax
  0004c	e8 00 00 00 00	 call	 commadpt_ring_terminate

; 607  :         commadpt_ring_terminate( &dev->commadpt->outbfr,  dev->ccwtrace );

  00051	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00056	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0005c	c1 e8 0f	 shr	 eax, 15
  0005f	83 e0 01	 and	 eax, 1
  00062	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00067	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  0006e	48 81 c1 a0 00
	00 00		 add	 rcx, 160		; 000000a0H
  00075	8b d0		 mov	 edx, eax
  00077	e8 00 00 00 00	 call	 commadpt_ring_terminate

; 608  :         commadpt_ring_terminate( &dev->commadpt->rdwrk,   dev->ccwtrace );

  0007c	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00081	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00087	c1 e8 0f	 shr	 eax, 15
  0008a	83 e0 01	 and	 eax, 1
  0008d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00092	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  00099	48 81 c1 f0 00
	00 00		 add	 rcx, 240		; 000000f0H
  000a0	8b d0		 mov	 edx, eax
  000a2	e8 00 00 00 00	 call	 commadpt_ring_terminate

; 609  :         commadpt_ring_terminate( &dev->commadpt->pollbfr, dev->ccwtrace );

  000a7	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  000ac	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  000b2	c1 e8 0f	 shr	 eax, 15
  000b5	83 e0 01	 and	 eax, 1
  000b8	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  000bd	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  000c4	48 81 c1 c8 00
	00 00		 add	 rcx, 200		; 000000c8H
  000cb	8b d0		 mov	 edx, eax
  000cd	e8 00 00 00 00	 call	 commadpt_ring_terminate

; 610  :         commadpt_ring_terminate( &dev->commadpt->ttybuf,  dev->ccwtrace );

  000d2	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  000d7	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  000dd	c1 e8 0f	 shr	 eax, 15
  000e0	83 e0 01	 and	 eax, 1
  000e3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  000e8	48 8b 89 68 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4456]
  000ef	48 81 c1 18 01
	00 00		 add	 rcx, 280		; 00000118H
  000f6	8b d0		 mov	 edx, eax
  000f8	e8 00 00 00 00	 call	 commadpt_ring_terminate

; 611  : 
; 612  :         /* release the CA lock */
; 613  :         release_lock( &dev->commadpt->lock );

  000fd	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00102	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00109	48 83 c0 68	 add	 rax, 104		; 00000068H
  0010d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159398
  00114	48 8b c8	 mov	 rcx, rax
  00117	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 614  : 
; 615  :         free( dev->commadpt );

  0011d	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00122	48 8b 88 68 11
	00 00		 mov	 rcx, QWORD PTR [rax+4456]
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 616  :         dev->commadpt = NULL;

  0012f	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00134	48 c7 80 68 11
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4456], 0

; 617  : 
; 618  :         if (dev->ccwtrace)

  0013f	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00144	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0014a	c1 e8 0f	 shr	 eax, 15
  0014d	83 e0 01	 and	 eax, 1
  00150	85 c0		 test	 eax, eax
  00152	74 7f		 je	 SHORT $LN5@commadpt_c

; 619  :         {
; 620  :             // "%1d:%04X COMM: clean: %s"
; 621  :             WRMSG( HHC01052, "D", SSID_TO_LCSS( dev->ssid ),

  00154	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00159	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0015d	89 44 24 50	 mov	 DWORD PTR tv147[rsp], eax
  00161	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00166	0f b7 49 44	 movzx	 ecx, WORD PTR [rcx+68]
  0016a	d1 f9		 sar	 ecx, 1
  0016c	89 4c 24 54	 mov	 DWORD PTR tv151[rsp], ecx
  00170	b9 01 00 00 00	 mov	 ecx, 1
  00175	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0017b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159400
  00182	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00187	8b 4c 24 50	 mov	 ecx, DWORD PTR tv147[rsp]
  0018b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0018f	8b 4c 24 54	 mov	 ecx, DWORD PTR tv151[rsp]
  00193	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00197	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159401
  0019e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159402
  001aa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001af	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b4	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159403
  001c1	ba 6e 02 00 00	 mov	 edx, 622		; 0000026eH
  001c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159404
  001cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN5@commadpt_c:

; 622  :                 dev->devnum, "control block freed" );
; 623  :         }
; 624  :     }

  001d3	e9 94 00 00 00	 jmp	 $LN4@commadpt_c
$LN3@commadpt_c:

; 625  :     else
; 626  :     {
; 627  :         if (dev->ccwtrace)

  001d8	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  001dd	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  001e3	c1 e8 0f	 shr	 eax, 15
  001e6	83 e0 01	 and	 eax, 1
  001e9	85 c0		 test	 eax, eax
  001eb	74 7f		 je	 SHORT $LN6@commadpt_c

; 628  :         {
; 629  :             // "%1d:%04X COMM: clean: %s"
; 630  :             WRMSG( HHC01052, "D", SSID_TO_LCSS( dev->ssid ),

  001ed	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  001f2	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  001f6	89 44 24 58	 mov	 DWORD PTR tv168[rsp], eax
  001fa	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  001ff	0f b7 49 44	 movzx	 ecx, WORD PTR [rcx+68]
  00203	d1 f9		 sar	 ecx, 1
  00205	89 4c 24 5c	 mov	 DWORD PTR tv172[rsp], ecx
  00209	b9 01 00 00 00	 mov	 ecx, 1
  0020e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00214	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159406
  0021b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00220	8b 4c 24 58	 mov	 ecx, DWORD PTR tv168[rsp]
  00224	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00228	8b 4c 24 5c	 mov	 ecx, DWORD PTR tv172[rsp]
  0022c	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00230	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159407
  00237	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0023c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159408
  00243	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00248	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00253	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159409
  0025a	ba 77 02 00 00	 mov	 edx, 631		; 00000277H
  0025f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159410
  00266	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN6@commadpt_c:
$LN4@commadpt_c:
$LN1@commadpt_c:

; 631  :                 dev->devnum, "control block not freed: not allocated" );
; 632  :         }
; 633  :     }
; 634  : }

  0026c	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00270	c3		 ret	 0
commadpt_clean_device ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
i$ = 32
ring$ = 64
b$ = 72
sz$ = 80
commadpt_ring_popbfr PROC

; 581  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 582  :     size_t i;
; 583  :     for(i=0;i<sz && ring->havedata;i++)

  00013	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0001c	eb 0d		 jmp	 SHORT $LN4@commadpt_r
$LN2@commadpt_r:
  0001e	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  00023	48 ff c0	 inc	 rax
  00026	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN4@commadpt_r:
  0002b	48 8b 44 24 50	 mov	 rax, QWORD PTR sz$[rsp]
  00030	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  00035	73 2d		 jae	 SHORT $LN3@commadpt_r
  00037	48 8b 44 24 40	 mov	 rax, QWORD PTR ring$[rsp]
  0003c	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  0003f	83 e0 01	 and	 eax, 1
  00042	85 c0		 test	 eax, eax
  00044	74 1e		 je	 SHORT $LN3@commadpt_r

; 584  :     {
; 585  :         b[i]=commadpt_ring_pop(ring);

  00046	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ring$[rsp]
  0004b	e8 00 00 00 00	 call	 commadpt_ring_pop
  00050	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00055	48 8b 54 24 48	 mov	 rdx, QWORD PTR b$[rsp]
  0005a	48 03 d1	 add	 rdx, rcx
  0005d	48 8b ca	 mov	 rcx, rdx
  00060	88 01		 mov	 BYTE PTR [rcx], al

; 586  :     }

  00062	eb ba		 jmp	 SHORT $LN2@commadpt_r
$LN3@commadpt_r:

; 587  :     return i;

  00064	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]

; 588  : }

  00069	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006d	c3		 ret	 0
commadpt_ring_popbfr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
b$ = 0
ring$ = 32
commadpt_ring_pop PROC

; 563  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 564  :     register BYTE b;
; 565  :     b=ring->bfr[ring->lo++];

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ring$[rsp]
  0000e	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00012	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ring$[rsp]
  00017	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0001a	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0001e	88 04 24	 mov	 BYTE PTR b$[rsp], al
  00021	48 8b 44 24 20	 mov	 rax, QWORD PTR ring$[rsp]
  00026	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0002a	48 ff c0	 inc	 rax
  0002d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ring$[rsp]
  00032	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 566  :     if(ring->lo>=ring->sz)

  00036	48 8b 44 24 20	 mov	 rax, QWORD PTR ring$[rsp]
  0003b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ring$[rsp]
  00040	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00044	48 39 48 18	 cmp	 QWORD PTR [rax+24], rcx
  00048	72 0d		 jb	 SHORT $LN2@commadpt_r

; 567  :     {
; 568  :         ring->lo=0;

  0004a	48 8b 44 24 20	 mov	 rax, QWORD PTR ring$[rsp]
  0004f	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
$LN2@commadpt_r:

; 569  :     }
; 570  :     if(ring->hi==ring->lo)

  00057	48 8b 44 24 20	 mov	 rax, QWORD PTR ring$[rsp]
  0005c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ring$[rsp]
  00061	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00065	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  00069	75 13		 jne	 SHORT $LN3@commadpt_r

; 571  :     {
; 572  :         ring->havedata=0;

  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR ring$[rsp]
  00070	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  00073	83 e0 fe	 and	 eax, -2			; fffffffeH
  00076	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ring$[rsp]
  0007b	89 41 20	 mov	 DWORD PTR [rcx+32], eax
$LN3@commadpt_r:

; 573  :     }
; 574  :     return b;

  0007e	0f b6 04 24	 movzx	 eax, BYTE PTR b$[rsp]

; 575  : }

  00082	48 83 c4 18	 add	 rsp, 24
  00086	c3		 ret	 0
commadpt_ring_pop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
i$ = 32
ring$ = 64
b$ = 72
sz$ = 80
commadpt_ring_pushbfr PROC

; 551  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 552  :     size_t i;
; 553  :     for(i=0;i<sz;i++)

  00013	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0001c	eb 0d		 jmp	 SHORT $LN4@commadpt_r
$LN2@commadpt_r:
  0001e	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  00023	48 ff c0	 inc	 rax
  00026	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN4@commadpt_r:
  0002b	48 8b 44 24 50	 mov	 rax, QWORD PTR sz$[rsp]
  00030	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  00035	73 1f		 jae	 SHORT $LN3@commadpt_r

; 554  :     {
; 555  :         commadpt_ring_push(ring,b[i]);

  00037	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  0003c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR b$[rsp]
  00041	48 03 c8	 add	 rcx, rax
  00044	48 8b c1	 mov	 rax, rcx
  00047	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  0004a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ring$[rsp]
  0004f	e8 00 00 00 00	 call	 commadpt_ring_push

; 556  :     }

  00054	eb c8		 jmp	 SHORT $LN2@commadpt_r
$LN3@commadpt_r:

; 557  : }

  00056	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005a	c3		 ret	 0
commadpt_ring_pushbfr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
ring$ = 8
b$ = 16
commadpt_ring_push PROC

; 534  : {

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 535  :     ring->bfr[ring->hi++]=b;

  00009	48 8b 44 24 08	 mov	 rax, QWORD PTR ring$[rsp]
  0000e	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00012	48 8b 4c 24 08	 mov	 rcx, QWORD PTR ring$[rsp]
  00017	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0001a	0f b6 54 24 10	 movzx	 edx, BYTE PTR b$[rsp]
  0001f	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00022	48 8b 44 24 08	 mov	 rax, QWORD PTR ring$[rsp]
  00027	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0002b	48 ff c0	 inc	 rax
  0002e	48 8b 4c 24 08	 mov	 rcx, QWORD PTR ring$[rsp]
  00033	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 536  :     if(ring->hi>=ring->sz)

  00037	48 8b 44 24 08	 mov	 rax, QWORD PTR ring$[rsp]
  0003c	48 8b 4c 24 08	 mov	 rcx, QWORD PTR ring$[rsp]
  00041	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00045	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  00049	72 0d		 jb	 SHORT $LN2@commadpt_r

; 537  :     {
; 538  :         ring->hi=0;

  0004b	48 8b 44 24 08	 mov	 rax, QWORD PTR ring$[rsp]
  00050	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0
$LN2@commadpt_r:

; 539  :     }
; 540  :     if(ring->hi==ring->lo)

  00058	48 8b 44 24 08	 mov	 rax, QWORD PTR ring$[rsp]
  0005d	48 8b 4c 24 08	 mov	 rcx, QWORD PTR ring$[rsp]
  00062	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00066	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  0006a	75 13		 jne	 SHORT $LN3@commadpt_r

; 541  :     {
; 542  :         ring->overflow=1;

  0006c	48 8b 44 24 08	 mov	 rax, QWORD PTR ring$[rsp]
  00071	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  00074	83 c8 02	 or	 eax, 2
  00077	48 8b 4c 24 08	 mov	 rcx, QWORD PTR ring$[rsp]
  0007c	89 41 20	 mov	 DWORD PTR [rcx+32], eax
$LN3@commadpt_r:

; 543  :     }
; 544  :     ring->havedata=1;

  0007f	48 8b 44 24 08	 mov	 rax, QWORD PTR ring$[rsp]
  00084	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  00087	83 c8 01	 or	 eax, 1
  0008a	48 8b 4c 24 08	 mov	 rcx, QWORD PTR ring$[rsp]
  0008f	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 545  : }

  00092	c3		 ret	 0
commadpt_ring_push ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
ring$ = 8
commadpt_ring_flush PROC

; 523  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 524  :     ring->hi=0;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR ring$[rsp]
  0000a	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 525  :     ring->lo=0;

  00012	48 8b 44 24 08	 mov	 rax, QWORD PTR ring$[rsp]
  00017	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 526  :     ring->havedata=0;

  0001f	48 8b 44 24 08	 mov	 rax, QWORD PTR ring$[rsp]
  00024	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  00027	83 e0 fe	 and	 eax, -2			; fffffffeH
  0002a	48 8b 4c 24 08	 mov	 rcx, QWORD PTR ring$[rsp]
  0002f	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 527  :     ring->overflow=0;

  00032	48 8b 44 24 08	 mov	 rax, QWORD PTR ring$[rsp]
  00037	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  0003a	83 e0 fd	 and	 eax, -3			; fffffffdH
  0003d	48 8b 4c 24 08	 mov	 rcx, QWORD PTR ring$[rsp]
  00042	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 528  : }

  00045	c3		 ret	 0
commadpt_ring_flush ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
ring$ = 96
trace$ = 104
commadpt_ring_terminate PROC

; 499  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 500  :     if(trace)

  0000d	83 7c 24 68 00	 cmp	 DWORD PTR trace$[rsp], 0
  00012	74 6a		 je	 SHORT $LN2@commadpt_r

; 501  :     {
; 502  :         WRMSG(HHC01065,"D",

  00014	b9 01 00 00 00	 mov	 ecx, 1
  00019	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0001f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159340
  00026	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0002b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ring$[rsp]
  00030	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00033	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00038	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ring$[rsp]
  0003d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159341
  00049	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159342
  00055	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0005a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00065	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159343
  0006c	ba f9 01 00 00	 mov	 edx, 505		; 000001f9H
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159344
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN2@commadpt_r:

; 503  :             ring,
; 504  :             ring->bfr,
; 505  :               "freed");
; 506  :     }
; 507  :     if(ring->bfr!=NULL)

  0007e	48 8b 44 24 60	 mov	 rax, QWORD PTR ring$[rsp]
  00083	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00087	74 1a		 je	 SHORT $LN3@commadpt_r

; 508  :     {
; 509  :         free(ring->bfr);

  00089	48 8b 44 24 60	 mov	 rax, QWORD PTR ring$[rsp]
  0008e	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00091	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 510  :         ring->bfr=NULL;

  00097	48 8b 44 24 60	 mov	 rax, QWORD PTR ring$[rsp]
  0009c	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN3@commadpt_r:

; 511  :     }
; 512  :     ring->sz=0;

  000a3	48 8b 44 24 60	 mov	 rax, QWORD PTR ring$[rsp]
  000a8	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 513  :     ring->hi=0;

  000b0	48 8b 44 24 60	 mov	 rax, QWORD PTR ring$[rsp]
  000b5	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 514  :     ring->lo=0;

  000bd	48 8b 44 24 60	 mov	 rax, QWORD PTR ring$[rsp]
  000c2	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 515  :     ring->havedata=0;

  000ca	48 8b 44 24 60	 mov	 rax, QWORD PTR ring$[rsp]
  000cf	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  000d2	83 e0 fe	 and	 eax, -2			; fffffffeH
  000d5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ring$[rsp]
  000da	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 516  :     ring->overflow=0;

  000dd	48 8b 44 24 60	 mov	 rax, QWORD PTR ring$[rsp]
  000e2	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  000e5	83 e0 fd	 and	 eax, -3			; fffffffdH
  000e8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ring$[rsp]
  000ed	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 517  : }

  000f0	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f4	c3		 ret	 0
commadpt_ring_terminate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
ring$ = 96
sz$ = 104
trace$ = 112
commadpt_ring_init PROC

; 479  : {

$LN4:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 480  :     ring->bfr=malloc(sz);

  00013	48 8b 4c 24 68	 mov	 rcx, QWORD PTR sz$[rsp]
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0001e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ring$[rsp]
  00023	48 89 01	 mov	 QWORD PTR [rcx], rax

; 481  :     ring->sz=sz;

  00026	48 8b 44 24 60	 mov	 rax, QWORD PTR ring$[rsp]
  0002b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR sz$[rsp]
  00030	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 482  :     ring->hi=0;

  00034	48 8b 44 24 60	 mov	 rax, QWORD PTR ring$[rsp]
  00039	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 483  :     ring->lo=0;

  00041	48 8b 44 24 60	 mov	 rax, QWORD PTR ring$[rsp]
  00046	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 484  :     ring->havedata=0;

  0004e	48 8b 44 24 60	 mov	 rax, QWORD PTR ring$[rsp]
  00053	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  00056	83 e0 fe	 and	 eax, -2			; fffffffeH
  00059	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ring$[rsp]
  0005e	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 485  :     ring->overflow=0;

  00061	48 8b 44 24 60	 mov	 rax, QWORD PTR ring$[rsp]
  00066	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  00069	83 e0 fd	 and	 eax, -3			; fffffffdH
  0006c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ring$[rsp]
  00071	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 486  :     if(trace)

  00074	83 7c 24 70 00	 cmp	 DWORD PTR trace$[rsp], 0
  00079	74 6a		 je	 SHORT $LN2@commadpt_r

; 487  :     {
; 488  :         WRMSG(HHC01065,"D",

  0007b	b9 01 00 00 00	 mov	 ecx, 1
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159325
  0008d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00092	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ring$[rsp]
  00097	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0009a	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0009f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ring$[rsp]
  000a4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159326
  000b0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159327
  000bc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c6	41 b9 03 00 00
	00		 mov	 r9d, 3
  000cc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159328
  000d3	ba eb 01 00 00	 mov	 edx, 491		; 000001ebH
  000d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159329
  000df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN2@commadpt_r:

; 489  :             ring,
; 490  :             ring->bfr,
; 491  :             "allocated");
; 492  :     }
; 493  : }

  000e5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000e9	c3		 ret	 0
commadpt_ring_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\commadpt.c
_TEXT	SEGMENT
i$ = 112
tv144 = 120
tv150 = 124
tv174 = 128
tv180 = 132
tv218 = 136
tv224 = 140
tv91 = 144
tv95 = 148
tv73 = 152
tv80 = 160
tv87 = 168
$T1 = 176
$T2 = 184
byte$ = 192
buf$ = 208
__$ArrayPad$ = 336
txt$ = 368
dev$ = 376
bfr$ = 384
sz$ = 392
logdump	PROC

; 429  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 430  :     char buf[128];
; 431  :     char byte[5];
; 432  :     size_t i;
; 433  :     if ( !dev->ccwtrace )

  0002d	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00035	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0003b	c1 e8 0f	 shr	 eax, 15
  0003e	83 e0 01	 and	 eax, 1
  00041	85 c0		 test	 eax, eax
  00043	75 05		 jne	 SHORT $LN5@logdump

; 434  :     {
; 435  :         return;

  00045	e9 3d 05 00 00	 jmp	 $LN1@logdump
$LN5@logdump:

; 436  :     }
; 437  :     WRMSG(HHC01064,"D",

  0004a	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00052	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00059	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0005f	c1 e8 09	 shr	 eax, 9
  00062	83 e0 01	 and	 eax, 1
  00065	85 c0		 test	 eax, eax
  00067	74 11		 je	 SHORT $LN10@logdump
  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159288
  00070	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv73[rsp], rax
  00078	eb 0f		 jmp	 SHORT $LN11@logdump
$LN10@logdump:
  0007a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159289
  00081	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv73[rsp], rax
$LN11@logdump:
  00089	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00091	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  00098	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0009e	c1 e8 0c	 shr	 eax, 12
  000a1	83 e0 01	 and	 eax, 1
  000a4	85 c0		 test	 eax, eax
  000a6	74 11		 je	 SHORT $LN12@logdump
  000a8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159290
  000af	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv80[rsp], rax
  000b7	eb 0f		 jmp	 SHORT $LN13@logdump
$LN12@logdump:
  000b9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159291
  000c0	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv80[rsp], rax
$LN13@logdump:
  000c8	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000d0	48 8b 80 68 11
	00 00		 mov	 rax, QWORD PTR [rax+4456]
  000d7	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  000dd	c1 e8 0b	 shr	 eax, 11
  000e0	83 e0 01	 and	 eax, 1
  000e3	85 c0		 test	 eax, eax
  000e5	74 11		 je	 SHORT $LN14@logdump
  000e7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159292
  000ee	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv87[rsp], rax
  000f6	eb 0f		 jmp	 SHORT $LN15@logdump
$LN14@logdump:
  000f8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159293
  000ff	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv87[rsp], rax
$LN15@logdump:
  00107	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0010f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00113	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv91[rsp], eax
  0011a	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00122	0f b7 49 44	 movzx	 ecx, WORD PTR [rcx+68]
  00126	d1 f9		 sar	 ecx, 1
  00128	89 8c 24 94 00
	00 00		 mov	 DWORD PTR tv95[rsp], ecx
  0012f	b9 01 00 00 00	 mov	 ecx, 1
  00134	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0013a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv73[rsp]
  00142	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00147	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv80[rsp]
  0014f	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00154	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv87[rsp]
  0015c	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00161	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR txt$[rsp]
  00169	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0016e	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv91[rsp]
  00175	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00179	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv95[rsp]
  00180	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00184	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159294
  0018b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00190	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159295
  00197	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0019c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a1	41 b9 03 00 00
	00		 mov	 r9d, 3
  001a7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159296
  001ae	ba bb 01 00 00	 mov	 edx, 443		; 000001bbH
  001b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159297
  001ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 438  :             SSID_TO_LCSS(dev->ssid),
; 439  :             dev->devnum,
; 440  :             txt,
; 441  :             dev->commadpt->in_textmode?"YES":"NO",
; 442  :             dev->commadpt->in_xparmode?"YES":"NO",
; 443  :             dev->commadpt->xparwwait?"YES":"NO");
; 444  :     WRMSG(HHC01049, "D",LCSS_DEVNUM,txt,(u_int)sz,(u_int)sz);

  001c0	48 83 bc 24 78
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  001c9	74 12		 je	 SHORT $LN16@logdump
  001cb	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001d3	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  001d7	89 44 24 78	 mov	 DWORD PTR tv144[rsp], eax
  001db	eb 08		 jmp	 SHORT $LN17@logdump
$LN16@logdump:
  001dd	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv144[rsp], 0
$LN17@logdump:
  001e5	48 83 bc 24 78
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  001ee	74 14		 je	 SHORT $LN18@logdump
  001f0	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001f8	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  001fc	d1 f8		 sar	 eax, 1
  001fe	89 44 24 7c	 mov	 DWORD PTR tv150[rsp], eax
  00202	eb 08		 jmp	 SHORT $LN19@logdump
$LN18@logdump:
  00204	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv150[rsp], 0
$LN19@logdump:
  0020c	b9 01 00 00 00	 mov	 ecx, 1
  00211	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00217	8b 8c 24 88 01
	00 00		 mov	 ecx, DWORD PTR sz$[rsp]
  0021e	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00222	8b 8c 24 88 01
	00 00		 mov	 ecx, DWORD PTR sz$[rsp]
  00229	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  0022d	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR txt$[rsp]
  00235	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0023a	8b 4c 24 78	 mov	 ecx, DWORD PTR tv144[rsp]
  0023e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00242	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv150[rsp]
  00246	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0024a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159298
  00251	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00256	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159299
  0025d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00262	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00267	41 b9 03 00 00
	00		 mov	 r9d, 3
  0026d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159300
  00274	ba bc 01 00 00	 mov	 edx, 444		; 000001bcH
  00279	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159301
  00280	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 445  :     buf[0] = 0;

  00286	b8 01 00 00 00	 mov	 eax, 1
  0028b	48 6b c0 00	 imul	 rax, rax, 0
  0028f	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR $T1[rsp], rax
  00297	48 81 bc 24 b0
	00 00 00 80 00
	00 00		 cmp	 QWORD PTR $T1[rsp], 128	; 00000080H
  002a3	73 02		 jae	 SHORT $LN20@logdump
  002a5	eb 05		 jmp	 SHORT $LN21@logdump
$LN20@logdump:
  002a7	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN21@logdump:
  002ac	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR $T1[rsp]
  002b4	c6 84 04 d0 00
	00 00 00	 mov	 BYTE PTR buf$[rsp+rax], 0

; 446  :     for( i=0; i<sz; i++ )

  002bc	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  002c5	eb 0d		 jmp	 SHORT $LN4@logdump
$LN2@logdump:
  002c7	48 8b 44 24 70	 mov	 rax, QWORD PTR i$[rsp]
  002cc	48 ff c0	 inc	 rax
  002cf	48 89 44 24 70	 mov	 QWORD PTR i$[rsp], rax
$LN4@logdump:
  002d4	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR sz$[rsp]
  002dc	48 39 44 24 70	 cmp	 QWORD PTR i$[rsp], rax
  002e1	0f 83 d1 01 00
	00		 jae	 $LN3@logdump

; 447  :     {
; 448  :         if( i%16 == 0 )

  002e7	33 d2		 xor	 edx, edx
  002e9	48 8b 44 24 70	 mov	 rax, QWORD PTR i$[rsp]
  002ee	b9 10 00 00 00	 mov	 ecx, 16
  002f3	48 f7 f1	 div	 rcx
  002f6	48 8b c2	 mov	 rax, rdx
  002f9	48 85 c0	 test	 rax, rax
  002fc	0f 85 30 01 00
	00		 jne	 $LN6@logdump

; 449  :         {
; 450  :             if( i !=0 )

  00302	48 83 7c 24 70
	00		 cmp	 QWORD PTR i$[rsp], 0
  00308	0f 84 05 01 00
	00		 je	 $LN7@logdump

; 451  :             {
; 452  :                 WRMSG(HHC01050,"D",LCSS_DEVNUM,txt,buf);

  0030e	48 83 bc 24 78
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00317	74 15		 je	 SHORT $LN22@logdump
  00319	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00321	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00325	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv174[rsp], eax
  0032c	eb 0b		 jmp	 SHORT $LN23@logdump
$LN22@logdump:
  0032e	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv174[rsp], 0
$LN23@logdump:
  00339	48 83 bc 24 78
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00342	74 17		 je	 SHORT $LN24@logdump
  00344	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0034c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00350	d1 f8		 sar	 eax, 1
  00352	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv180[rsp], eax
  00359	eb 0b		 jmp	 SHORT $LN25@logdump
$LN24@logdump:
  0035b	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv180[rsp], 0
$LN25@logdump:
  00366	b9 01 00 00 00	 mov	 ecx, 1
  0036b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00371	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00379	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0037e	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR txt$[rsp]
  00386	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0038b	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv174[rsp]
  00392	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00396	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv180[rsp]
  0039d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159304
  003a8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159305
  003b4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003b9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003be	41 b9 03 00 00
	00		 mov	 r9d, 3
  003c4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159306
  003cb	ba c4 01 00 00	 mov	 edx, 452		; 000001c4H
  003d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159307
  003d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 453  :                 buf[0] = 0;

  003dd	b8 01 00 00 00	 mov	 eax, 1
  003e2	48 6b c0 00	 imul	 rax, rax, 0
  003e6	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR $T2[rsp], rax
  003ee	48 81 bc 24 b8
	00 00 00 80 00
	00 00		 cmp	 QWORD PTR $T2[rsp], 128	; 00000080H
  003fa	73 02		 jae	 SHORT $LN26@logdump
  003fc	eb 05		 jmp	 SHORT $LN27@logdump
$LN26@logdump:
  003fe	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN27@logdump:
  00403	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR $T2[rsp]
  0040b	c6 84 04 d0 00
	00 00 00	 mov	 BYTE PTR buf$[rsp+rax], 0
$LN7@logdump:

; 454  :             }
; 455  :             MSGBUF(buf, "%04X:", (unsigned) i);

  00413	44 8b 4c 24 70	 mov	 r9d, DWORD PTR i$[rsp]
  00418	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159308
  0041f	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00424	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0042c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN6@logdump:

; 456  :         }
; 457  :         if( i%4 == 0 )

  00432	33 d2		 xor	 edx, edx
  00434	48 8b 44 24 70	 mov	 rax, QWORD PTR i$[rsp]
  00439	b9 04 00 00 00	 mov	 ecx, 4
  0043e	48 f7 f1	 div	 rcx
  00441	48 8b c2	 mov	 rax, rdx
  00444	48 85 c0	 test	 rax, rax
  00447	75 1b		 jne	 SHORT $LN8@logdump

; 458  :         {
; 459  :             STRLCAT( buf, " " );

  00449	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  0044f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159310
  00456	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0045e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN8@logdump:

; 460  :         }
; 461  :         MSGBUF(byte, "%02X",bfr[i]);

  00464	48 8b 44 24 70	 mov	 rax, QWORD PTR i$[rsp]
  00469	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR bfr$[rsp]
  00471	48 03 c8	 add	 rcx, rax
  00474	48 8b c1	 mov	 rax, rcx
  00477	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0047a	44 8b c8	 mov	 r9d, eax
  0047d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159311
  00484	ba 05 00 00 00	 mov	 edx, 5
  00489	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR byte$[rsp]
  00491	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 462  :         STRLCAT( buf, byte );

  00497	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  0049d	48 8d 94 24 c0
	00 00 00	 lea	 rdx, QWORD PTR byte$[rsp]
  004a5	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  004ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 463  :     }

  004b3	e9 0f fe ff ff	 jmp	 $LN2@logdump
$LN3@logdump:

; 464  :     WRMSG(HHC01050,"D",LCSS_DEVNUM,txt,buf);

  004b8	48 83 bc 24 78
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  004c1	74 15		 je	 SHORT $LN28@logdump
  004c3	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004cb	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  004cf	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv218[rsp], eax
  004d6	eb 0b		 jmp	 SHORT $LN29@logdump
$LN28@logdump:
  004d8	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv218[rsp], 0
$LN29@logdump:
  004e3	48 83 bc 24 78
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  004ec	74 17		 je	 SHORT $LN30@logdump
  004ee	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004f6	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  004fa	d1 f8		 sar	 eax, 1
  004fc	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv224[rsp], eax
  00503	eb 0b		 jmp	 SHORT $LN31@logdump
$LN30@logdump:
  00505	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv224[rsp], 0
$LN31@logdump:
  00510	b9 01 00 00 00	 mov	 ecx, 1
  00515	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0051b	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00523	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00528	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR txt$[rsp]
  00530	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00535	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv218[rsp]
  0053c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00540	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv224[rsp]
  00547	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0054b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159312
  00552	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00557	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159313
  0055e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00563	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00568	41 b9 03 00 00
	00		 mov	 r9d, 3
  0056e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159314
  00575	ba d0 01 00 00	 mov	 edx, 464		; 000001d0H
  0057a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159315
  00581	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN1@logdump:
$LN9@logdump:

; 465  : }

  00587	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0058f	48 33 cc	 xor	 rcx, rsp
  00592	e8 00 00 00 00	 call	 __security_check_cookie
  00597	48 81 c4 68 01
	00 00		 add	 rsp, 360		; 00000168H
  0059e	c3		 ret	 0
logdump	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dbgtrace.h
_TEXT	SEGMENT
buffsize$ = 48
rc$ = 52
chunksize$ = 56
buffer$ = 64
args$ = 72
fmt$ = 96
DebuggerTrace PROC

; 94   :   static inline void DebuggerTrace(char* fmt, ...) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 95   :       const int chunksize = 512;

  00018	c7 44 24 38 00
	02 00 00	 mov	 DWORD PTR chunksize$[rsp], 512 ; 00000200H

; 96   :       int buffsize = 0;

  00020	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR buffsize$[rsp], 0

; 97   :       char* buffer = NULL;

  00028	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR buffer$[rsp], 0

; 98   :       int rc = -1;

  00031	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 99   :       va_list args;
; 100  :       va_start( args, fmt );

  00039	48 8d 44 24 68	 lea	 rax, QWORD PTR fmt$[rsp+8]
  0003e	48 89 44 24 48	 mov	 QWORD PTR args$[rsp], rax
$LN9@DebuggerTr:
$LN4@DebuggerTr:

; 101  :       do {
; 102  :           if (buffer) free( buffer );

  00043	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00049	74 0b		 je	 SHORT $LN5@DebuggerTr
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN5@DebuggerTr:

; 103  :           buffsize += chunksize;

  00056	8b 44 24 38	 mov	 eax, DWORD PTR chunksize$[rsp]
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0005e	03 c8		 add	 ecx, eax
  00060	8b c1		 mov	 eax, ecx
  00062	89 44 24 30	 mov	 DWORD PTR buffsize$[rsp], eax

; 104  :           buffer = malloc( buffsize + 1 );

  00066	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  0006a	ff c0		 inc	 eax
  0006c	48 98		 cdqe
  0006e	48 8b c8	 mov	 rcx, rax
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00077	48 89 44 24 40	 mov	 QWORD PTR buffer$[rsp], rax

; 105  :           if (!buffer) BREAK_INTO_DEBUGGER();

  0007c	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00082	75 01		 jne	 SHORT $LN6@DebuggerTr
  00084	cc		 int	 3
$LN6@DebuggerTr:

; 106  :           rc = _vsnprintf_s( buffer, buffsize+1, buffsize, fmt, args);

  00085	48 63 44 24 30	 movsxd	 rax, DWORD PTR buffsize$[rsp]
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0008e	ff c1		 inc	 ecx
  00090	48 63 c9	 movsxd	 rcx, ecx
  00093	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00098	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0009d	4c 8b 4c 24 60	 mov	 r9, QWORD PTR fmt$[rsp]
  000a2	4c 8b c0	 mov	 r8, rax
  000a5	48 8b d1	 mov	 rdx, rcx
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000ad	e8 00 00 00 00	 call	 _vsnprintf_s
  000b2	89 44 24 34	 mov	 DWORD PTR rc$[rsp], eax

; 107  :       } while (rc < 0 || rc >= buffsize);

  000b6	83 7c 24 34 00	 cmp	 DWORD PTR rc$[rsp], 0
  000bb	7c 86		 jl	 SHORT $LN4@DebuggerTr
  000bd	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  000c1	39 44 24 34	 cmp	 DWORD PTR rc$[rsp], eax
  000c5	0f 8d 78 ff ff
	ff		 jge	 $LN9@DebuggerTr

; 108  :       OutputDebugStringA( buffer ); /* send to debugger pane */

  000cb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 109  :       if (buffer) free( buffer );

  000d6	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  000dc	74 0b		 je	 SHORT $LN7@DebuggerTr
  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@DebuggerTr:

; 110  :       va_end( args );

  000e9	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0

; 111  :   }

  000f2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f6	c3		 ret	 0
DebuggerTrace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sscanf	PROC						; COMDAT

; 2247 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsscanf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2252 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2253 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2254 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2152 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2153 :         return __stdio_common_vsscanf(

  00018	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  0003d	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_MaxCount$ = 80
_Format$ = 88
_ArgList$ = 96
_vsnprintf_s PROC					; COMDAT

; 1598 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1599 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00022	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0002b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Format$[rsp]
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR _MaxCount$[rsp]
  00035	48 8b 54 24 48	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0003f	e8 00 00 00 00	 call	 _vsnprintf_s_l

; 1600 :     }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
_vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s_l
_TEXT	SEGMENT
_Result$ = 64
tv74 = 68
_Buffer$ = 96
_BufferCount$ = 104
_MaxCount$ = 112
_Format$ = 120
_Locale$ = 128
_ArgList$ = 136
_vsnprintf_s_l PROC					; COMDAT

; 1577 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1578 :         int const _Result = __stdio_common_vsnprintf_s(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00032	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00037	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Format$[rsp]
  0003c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00041	4c 8b 4c 24 70	 mov	 r9, QWORD PTR _MaxCount$[rsp]
  00046	4c 8b 44 24 68	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  0004b	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00050	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsnprintf_s
  00059	89 44 24 40	 mov	 DWORD PTR _Result$[rsp], eax

; 1579 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1580 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1581 : 
; 1582 :         return _Result < 0 ? -1 : _Result;

  0005d	83 7c 24 40 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00062	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  00064	c7 44 24 44 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  0006c	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0006e	8b 44 24 40	 mov	 eax, DWORD PTR _Result$[rsp]
  00072	89 44 24 44	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  00076	8b 44 24 44	 mov	 eax, DWORD PTR tv74[rsp]

; 1583 :     }

  0007a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0007e	c3		 ret	 0
_vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00007	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
