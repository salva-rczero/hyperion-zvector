; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	open_omatape
PUBLIC	close_omatape
PUBLIC	close_omatape2
PUBLIC	rewind_omatape
PUBLIC	fsb_omatape
PUBLIC	bsb_omatape
PUBLIC	fsf_omatape
PUBLIC	bsf_omatape
PUBLIC	read_omadesc
PUBLIC	fsb_omaheaders
PUBLIC	fsb_omafixed
PUBLIC	read_omaheaders
PUBLIC	read_omafixed
PUBLIC	read_omatext
PUBLIC	read_omatape
PUBLIC	readhdr_omaheaders
EXTRN	__imp__errno:PROC
EXTRN	strchr:PROC
EXTRN	strcmp:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp__lseeki64:PROC
EXTRN	__imp_close:PROC
EXTRN	__imp_read:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_ferror:PROC
EXTRN	__imp_fgets:PROC
EXTRN	__imp_fopen:PROC
EXTRN	__imp_rewind:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	__imp_strlcpy:PROC
EXTRN	__imp_strlcat:PROC
EXTRN	__imp_rtrim:PROC
EXTRN	__imp_parse_args:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_w32_fclose:PROC
EXTRN	__imp_w32_hopen:PROC
EXTRN	__imp_host_to_guest:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	build_senseX:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memcmp:PROC
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sscanf
pdata	ENDS
pdata	SEGMENT
$pdata$open_omatape DD imagerel $LN17
	DD	imagerel $LN17+945
	DD	imagerel $unwind$open_omatape
$pdata$close_omatape DD imagerel $LN3
	DD	imagerel $LN3+97
	DD	imagerel $unwind$close_omatape
$pdata$close_omatape2 DD imagerel $LN9
	DD	imagerel $LN9+459
	DD	imagerel $unwind$close_omatape2
$pdata$rewind_omatape DD imagerel $LN9
	DD	imagerel $LN9+73
	DD	imagerel $unwind$rewind_omatape
$pdata$fsb_omatape DD imagerel $LN10
	DD	imagerel $LN10+252
	DD	imagerel $unwind$fsb_omatape
$pdata$bsb_omatape DD imagerel $LN15
	DD	imagerel $LN15+566
	DD	imagerel $unwind$bsb_omatape
$pdata$fsf_omatape DD imagerel $LN10
	DD	imagerel $LN10+143
	DD	imagerel $unwind$fsf_omatape
$pdata$bsf_omatape DD imagerel $LN20
	DD	imagerel $LN20+1174
	DD	imagerel $unwind$bsf_omatape
$pdata$read_omadesc DD imagerel $LN87
	DD	imagerel $LN87+4894
	DD	imagerel $unwind$read_omadesc
$pdata$fsb_omaheaders DD imagerel $LN6
	DD	imagerel $LN6+289
	DD	imagerel $unwind$fsb_omaheaders
$pdata$fsb_omafixed DD imagerel $LN13
	DD	imagerel $LN13+729
	DD	imagerel $unwind$fsb_omafixed
$pdata$read_omaheaders DD imagerel $LN15
	DD	imagerel $LN15+1033
	DD	imagerel $unwind$read_omaheaders
$pdata$read_omafixed DD imagerel $LN14
	DD	imagerel $LN14+1003
	DD	imagerel $unwind$read_omafixed
$pdata$read_omatext DD imagerel $LN33
	DD	imagerel $LN33+1828
	DD	imagerel $unwind$read_omatext
$pdata$read_omatape DD imagerel $LN12
	DD	imagerel $LN12+340
	DD	imagerel $unwind$read_omatape
$pdata$readhdr_omaheaders DD imagerel $LN24
	DD	imagerel $LN24+1838
	DD	imagerel $unwind$readhdr_omaheaders
pdata	ENDS
_DATA	SEGMENT
$SG169236 DB	'r', 00H
	ORG $+6
$SG169237 DB	'fopen()', 00H
$SG169238 DB	'OMA', 00H
$SG169239 DB	'E', 00H
	ORG $+2
$SG169246 DB	'@TDF', 00H
	ORG $+3
$SG169240 DB	'HHC00205%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s: %s', 0aH, 00H
	ORG $+3
$SG169241 DB	'read_omadesc', 00H
	ORG $+3
$SG169242 DB	'omatape.c', 00H
	ORG $+2
$SG169247 DB	'OMA', 00H
$SG169248 DB	'E', 00H
	ORG $+6
$SG169249 DB	'HHC00206%s %1d:%04X Tape file %s, type %s: not a valid @'
	DB	'TDF file', 0aH, 00H
	ORG $+2
$SG169254 DB	'OMA', 00H
$SG169250 DB	'read_omadesc', 00H
	ORG $+3
$SG169251 DB	'omatape.c', 00H
	ORG $+2
$SG169255 DB	'E', 00H
	ORG $+2
$SG169253 DB	'fgets()', 00H
$SG169256 DB	'HHC00205%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s: %s', 0aH, 00H
	ORG $+3
$SG169257 DB	'read_omadesc', 00H
	ORG $+3
$SG169258 DB	'omatape.c', 00H
	ORG $+2
$SG169260 DB	'OMA', 00H
$SG169261 DB	'E', 00H
	ORG $+6
$SG169262 DB	'HHC00206%s %1d:%04X Tape file %s, type %s: not a valid @'
	DB	'TDF file', 0aH, 00H
	ORG $+2
$SG169267 DB	'OMA', 00H
$SG169263 DB	'read_omadesc', 00H
	ORG $+3
$SG169264 DB	'omatape.c', 00H
	ORG $+2
$SG169268 DB	'E', 00H
	ORG $+2
$SG169266 DB	'malloc()', 00H
	ORG $+7
$SG169270 DB	'read_omadesc', 00H
	ORG $+3
$SG169273 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG169269 DB	'HHC00205%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s: %s', 0aH, 00H
	ORG $+3
$SG169271 DB	'omatape.c', 00H
	ORG $+2
$SG169275 DB	'EOT', 00H
$SG169277 DB	'TM', 00H
	ORG $+1
$SG169281 DB	'OMA', 00H
$SG169280 DB	'filename or format missing', 00H
	ORG $+1
$SG169282 DB	'E', 00H
	ORG $+2
$SG169283 DB	'HHC00207%s %1d:%04X Tape file %s, type %s: line %d: %s', 0aH
	DB	00H
$SG169284 DB	'read_omadesc', 00H
	ORG $+3
$SG169285 DB	'omatape.c', 00H
	ORG $+2
$SG169291 DB	'OMA', 00H
$SG169289 DB	'filename %s too long', 00H
	ORG $+3
$SG169290 DB	'filename ''%s'' too long', 00H
	ORG $+1
$SG169292 DB	'E', 00H
	ORG $+2
$SG169299 DB	'/', 00H
	ORG $+2
$SG169293 DB	'HHC00207%s %1d:%04X Tape file %s, type %s: line %d: %s', 0aH
	DB	00H
$SG169294 DB	'read_omadesc', 00H
	ORG $+3
$SG169295 DB	'omatape.c', 00H
	ORG $+2
$SG169312 DB	'OMA', 00H
$SG169301 DB	'HEADERS', 00H
$SG169303 DB	'TEXT', 00H
	ORG $+3
$SG169306 DB	'FIXED', 00H
	ORG $+2
$SG169307 DB	'UNDEFINED', 00H
	ORG $+2
$SG169313 DB	'E', 00H
	ORG $+2
$SG169310 DB	'RECSIZE', 00H
$SG169311 DB	'keyword RECSIZE missing', 00H
$SG169314 DB	'HHC00207%s %1d:%04X Tape file %s, type %s: line %d: %s', 0aH
	DB	00H
$SG169315 DB	'read_omadesc', 00H
	ORG $+3
$SG169316 DB	'omatape.c', 00H
	ORG $+2
$SG169319 DB	'%u%c', 00H
	ORG $+3
$SG169321 DB	'OMA', 00H
$SG169320 DB	'invalid record size %s', 00H
	ORG $+1
$SG169322 DB	'E', 00H
	ORG $+2
$SG169327 DB	'OMA', 00H
$SG169323 DB	'HHC00207%s %1d:%04X Tape file %s, type %s: line %d: %s', 0aH
	DB	00H
$SG169324 DB	'read_omadesc', 00H
	ORG $+3
$SG169325 DB	'omatape.c', 00H
	ORG $+2
$SG169328 DB	'E', 00H
	ORG $+2
$SG169326 DB	'invalid record format ''%s''', 00H
	ORG $+1
$SG169334 DB	'OMA', 00H
$SG169329 DB	'HHC00207%s %1d:%04X Tape file %s, type %s: line %d: %s', 0aH
	DB	00H
$SG169330 DB	'read_omadesc', 00H
	ORG $+3
$SG169331 DB	'omatape.c', 00H
	ORG $+2
$SG169335 DB	'E', 00H
	ORG $+2
$SG169333 DB	'fgets()', 00H
$SG169353 DB	'*', 00H
	ORG $+6
$SG169336 DB	'HHC00205%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s: %s', 0aH, 00H
	ORG $+3
$SG169337 DB	'read_omadesc', 00H
	ORG $+3
$SG169338 DB	'omatape.c', 00H
	ORG $+2
$SG169362 DB	'open()', 00H
	ORG $+1
$SG169363 DB	'OMA', 00H
$SG169364 DB	'E', 00H
	ORG $+6
$SG169366 DB	'open_omatape', 00H
	ORG $+3
$SG169408 DB	'lseek()', 00H
$SG169365 DB	'HHC00205%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s: %s', 0aH, 00H
	ORG $+3
$SG169367 DB	'omatape.c', 00H
	ORG $+2
$SG169409 DB	'OMA', 00H
$SG169410 DB	'E', 00H
	ORG $+6
$SG169411 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169415 DB	'read()', 00H
	ORG $+1
$SG169416 DB	'OMA', 00H
$SG169412 DB	'readhdr_omaheaders', 00H
	ORG $+1
$SG169417 DB	'E', 00H
	ORG $+2
$SG169413 DB	'omatape.c', 00H
	ORG $+6
$SG169418 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169424 DB	'OMA', 00H
$SG169419 DB	'readhdr_omaheaders', 00H
	ORG $+1
$SG169425 DB	'E', 00H
	ORG $+2
$SG169420 DB	'omatape.c', 00H
	ORG $+2
$SG169434 DB	'OMA', 00H
$SG169422 DB	'unexpected end of file', 00H
	ORG $+1
$SG169423 DB	'readhdr_omaheaders()', 00H
	ORG $+3
$SG169427 DB	'readhdr_omaheaders', 00H
	ORG $+5
$SG169426 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169435 DB	'E', 00H
	ORG $+2
$SG169428 DB	'omatape.c', 00H
	ORG $+2
$SG169431 DB	'@HDF', 00H
	ORG $+3
$SG169460 DB	'read()', 00H
	ORG $+1
$SG169461 DB	'OMA', 00H
$SG169432 DB	'invalid block header', 00H
	ORG $+3
$SG169433 DB	'readhdr_omaheaders()', 00H
	ORG $+3
$SG169436 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169462 DB	'E', 00H
	ORG $+2
$SG169437 DB	'readhdr_omaheaders', 00H
	ORG $+1
$SG169469 DB	'OMA', 00H
$SG169438 DB	'omatape.c', 00H
	ORG $+6
$SG169464 DB	'read_omaheaders', 00H
$SG169467 DB	'unexpected end of file', 00H
	ORG $+1
$SG169463 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169470 DB	'E', 00H
	ORG $+2
$SG169465 DB	'omatape.c', 00H
	ORG $+2
$SG169492 DB	'OMA', 00H
$SG169468 DB	'read_omaheaders()', 00H
	ORG $+6
$SG169472 DB	'read_omaheaders', 00H
$SG169491 DB	'lseek()', 00H
$SG169471 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169493 DB	'E', 00H
	ORG $+2
$SG169473 DB	'omatape.c', 00H
	ORG $+6
$SG169494 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169498 DB	'read()', 00H
	ORG $+1
$SG169499 DB	'OMA', 00H
$SG169495 DB	'read_omafixed', 00H
	ORG $+2
$SG169496 DB	'omatape.c', 00H
	ORG $+2
$SG169500 DB	'E', 00H
	ORG $+2
$SG169531 DB	'lseek()', 00H
$SG169501 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169532 DB	'OMA', 00H
$SG169502 DB	'read_omafixed', 00H
	ORG $+2
$SG169503 DB	'omatape.c', 00H
	ORG $+2
$SG169533 DB	'E', 00H
	ORG $+2
$SG169534 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169545 DB	'read()', 00H
	ORG $+1
$SG169546 DB	'OMA', 00H
$SG169535 DB	'read_omatext', 00H
	ORG $+3
$SG169536 DB	'omatape.c', 00H
	ORG $+2
$SG169547 DB	'E', 00H
	ORG $+2
$SG169552 DB	'unexpected end of file', 00H
	ORG $+1
$SG169548 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169554 DB	'OMA', 00H
$SG169549 DB	'read_omatext', 00H
	ORG $+3
$SG169550 DB	'omatape.c', 00H
	ORG $+2
$SG169555 DB	'E', 00H
	ORG $+2
$SG169553 DB	'read_omatext()', 00H
	ORG $+1
$SG169556 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169562 DB	'OMA', 00H
$SG169557 DB	'read_omatext', 00H
	ORG $+3
$SG169558 DB	'omatape.c', 00H
	ORG $+2
$SG169563 DB	'E', 00H
	ORG $+2
$SG169560 DB	'invalid block header', 00H
	ORG $+3
$SG169561 DB	'read_omatext()', 00H
	ORG $+1
$SG169637 DB	'lseek()', 00H
$SG169564 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169638 DB	'OMA', 00H
$SG169565 DB	'read_omatext', 00H
	ORG $+3
$SG169566 DB	'omatape.c', 00H
	ORG $+2
$SG169639 DB	'E', 00H
	ORG $+2
$SG169640 DB	'HHC00205%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s: %s', 0aH, 00H
	ORG $+3
$SG169641 DB	'fsb_omafixed', 00H
	ORG $+3
$SG169642 DB	'omatape.c', 00H
	ORG $+2
$SG169687 DB	'OMA', 00H
$SG169686 DB	'lseek()', 00H
$SG169688 DB	'E', 00H
	ORG $+6
$SG169690 DB	'bsf_omatape', 00H
$SG169729 DB	'OMA', 00H
$SG169730 DB	'I', 00H
	ORG $+6
$SG169689 DB	'HHC00205%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s: %s', 0aH, 00H
	ORG $+3
$SG169691 DB	'omatape.c', 00H
	ORG $+2
$SG169738 DB	'*', 00H
	ORG $+2
$SG169731 DB	'HHC00201%s %1d:%04X Tape file %s, type %s: tape closed', 0aH
	DB	00H
$SG169732 DB	'close_omatape2', 00H
	ORG $+1
$SG169733 DB	'omatape.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:readhdr_omaheaders
	DD	025H
	DD	0716H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:read_omadesc
	DD	018H
	DD	01304H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:open_omatape
	DD	020H
	DD	0399H
voltbl	ENDS
xdata	SEGMENT
$unwind$open_omatape DD 022819H
	DD	0390116H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
$unwind$close_omatape DD 010901H
	DD	04209H
$unwind$close_omatape2 DD 010901H
	DD	0e209H
$unwind$rewind_omatape DD 011301H
	DD	04213H
$unwind$fsb_omatape DD 011301H
	DD	08213H
$unwind$bsb_omatape DD 011301H
	DD	0c213H
$unwind$fsf_omatape DD 011301H
	DD	04213H
$unwind$bsf_omatape DD 021601H
	DD	0190116H
$unwind$read_omadesc DD 042019H
	DD	0c3010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	0600H
$unwind$fsb_omaheaders DD 011801H
	DD	0c218H
$unwind$fsb_omafixed DD 021b01H
	DD	015011bH
$unwind$read_omaheaders DD 021b01H
	DD	019011bH
$unwind$read_omafixed DD 021b01H
	DD	019011bH
$unwind$read_omatext DD 021b01H
	DD	021011bH
$unwind$read_omatape DD 011801H
	DD	08218H
$unwind$readhdr_omaheaders DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\omatape.c
_TEXT	SEGMENT
curblkl$ = 112
tv84 = 116
tv90 = 120
tv156 = 124
tv162 = 128
rc$ = 132
tv188 = 136
tv194 = 140
tv265 = 144
tv271 = 148
padding$ = 152
prvhdro$ = 156
nxthdro$ = 160
rcoff$ = 168
tv71 = 176
tv75 = 184
tv79 = 192
tv143 = 200
tv147 = 208
tv151 = 216
tv179 = 224
tv183 = 232
tv256 = 240
tv260 = 248
omahdr$ = 256
__$ArrayPad$ = 272
dev$ = 304
omadesc$ = 312
blkpos$ = 320
pcurblkl$ = 328
pprvhdro$ = 336
pnxthdro$ = 344
unitstat$ = 352
code$ = 360
readhdr_omaheaders PROC

; 393  : {

$LN24:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 394  : int             rc;                     /* Return code               */
; 395  : off_t           rcoff;                  /* Return code from lseek()  */
; 396  : int             padding;                /* Number of padding bytes   */
; 397  : OMATAPE_BLKHDR  omahdr;                 /* OMATAPE block header      */
; 398  : S32             curblkl;                /* Length of current block   */
; 399  : S32             prvhdro;                /* Offset of previous header */
; 400  : S32             nxthdro;                /* Offset of next header     */
; 401  : 
; 402  :     /* Seek to start of block header */
; 403  :     rcoff = lseek (dev->fd, blkpos, SEEK_SET);

  0002d	48 63 84 24 40
	01 00 00	 movsxd	 rax, DWORD PTR blkpos$[rsp]
  00035	45 33 c0	 xor	 r8d, r8d
  00038	48 8b d0	 mov	 rdx, rax
  0003b	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00043	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0004f	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR rcoff$[rsp], rax

; 404  :     if (rcoff < 0)

  00057	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR rcoff$[rsp], 0
  00060	0f 8d 45 01 00
	00		 jge	 $LN2@readhdr_om

; 405  :     {
; 406  :         /* Handle seek error condition */
; 407  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, omadesc->filename, "OMA", "lseek()", (off_t)blkpos, strerror(errno));

  00066	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0006f	74 12		 je	 SHORT $LN8@readhdr_om
  00071	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00079	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0007d	89 44 24 74	 mov	 DWORD PTR tv84[rsp], eax
  00081	eb 08		 jmp	 SHORT $LN9@readhdr_om
$LN8@readhdr_om:
  00083	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
$LN9@readhdr_om:
  0008b	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00094	74 14		 je	 SHORT $LN10@readhdr_om
  00096	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0009e	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  000a2	d1 f8		 sar	 eax, 1
  000a4	89 44 24 78	 mov	 DWORD PTR tv90[rsp], eax
  000a8	eb 08		 jmp	 SHORT $LN11@readhdr_om
$LN10@readhdr_om:
  000aa	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv90[rsp], 0
$LN11@readhdr_om:
  000b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000b8	8b 08		 mov	 ecx, DWORD PTR [rax]
  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  000c0	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv71[rsp], rax
  000c8	48 63 8c 24 40
	01 00 00	 movsxd	 rcx, DWORD PTR blkpos$[rsp]
  000d0	48 89 8c 24 b8
	00 00 00	 mov	 QWORD PTR tv75[rsp], rcx
  000d8	48 8b 94 24 38
	01 00 00	 mov	 rdx, QWORD PTR omadesc$[rsp]
  000e0	48 89 94 24 c0
	00 00 00	 mov	 QWORD PTR tv79[rsp], rdx
  000e8	b9 01 00 00 00	 mov	 ecx, 1
  000ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000f3	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv71[rsp]
  000fb	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00100	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv75[rsp]
  00108	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0010d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169408
  00114	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00119	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169409
  00120	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00125	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv79[rsp]
  0012d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00132	8b 4c 24 74	 mov	 ecx, DWORD PTR tv84[rsp]
  00136	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0013a	8b 4c 24 78	 mov	 ecx, DWORD PTR tv90[rsp]
  0013e	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169410
  00149	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0014e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169411
  00155	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0015a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0015f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00165	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169412
  0016c	ba 97 01 00 00	 mov	 edx, 407		; 00000197H
  00171	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169413
  00178	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 408  : 
; 409  :         /* Set unit check with equipment check */
; 410  :         build_senseX(TAPE_BSENSE_LOCATEERR,dev,unitstat,code);

  0017e	44 0f b6 8c 24
	68 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00187	4c 8b 84 24 60
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0018f	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00197	b9 0e 00 00 00	 mov	 ecx, 14
  0019c	e8 00 00 00 00	 call	 build_senseX

; 411  :         return -1;

  001a1	b8 ff ff ff ff	 mov	 eax, -1
  001a6	e9 6b 05 00 00	 jmp	 $LN1@readhdr_om
$LN2@readhdr_om:

; 412  :     }
; 413  : 
; 414  :     /* Read the 16-byte block header */
; 415  :     rc = read (dev->fd, &omahdr, sizeof(omahdr));

  001ab	41 b8 10 00 00
	00		 mov	 r8d, 16
  001b1	48 8d 94 24 00
	01 00 00	 lea	 rdx, QWORD PTR omahdr$[rsp]
  001b9	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001c1	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  001c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  001cd	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax

; 416  : 
; 417  :     /* Handle read error condition */
; 418  :     if (rc < 0)

  001d4	83 bc 24 84 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  001dc	0f 8d 4e 01 00
	00		 jge	 $LN3@readhdr_om

; 419  :     {
; 420  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, omadesc->filename, "OMA", "read()", (off_t)blkpos,

  001e2	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  001eb	74 12		 je	 SHORT $LN12@readhdr_om
  001ed	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001f5	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  001f9	89 44 24 7c	 mov	 DWORD PTR tv156[rsp], eax
  001fd	eb 08		 jmp	 SHORT $LN13@readhdr_om
$LN12@readhdr_om:
  001ff	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv156[rsp], 0
$LN13@readhdr_om:
  00207	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00210	74 17		 je	 SHORT $LN14@readhdr_om
  00212	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0021a	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0021e	d1 f8		 sar	 eax, 1
  00220	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv162[rsp], eax
  00227	eb 0b		 jmp	 SHORT $LN15@readhdr_om
$LN14@readhdr_om:
  00229	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv162[rsp], 0
$LN15@readhdr_om:
  00234	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0023a	8b 08		 mov	 ecx, DWORD PTR [rax]
  0023c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00242	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv143[rsp], rax
  0024a	48 63 8c 24 40
	01 00 00	 movsxd	 rcx, DWORD PTR blkpos$[rsp]
  00252	48 89 8c 24 d0
	00 00 00	 mov	 QWORD PTR tv147[rsp], rcx
  0025a	48 8b 94 24 38
	01 00 00	 mov	 rdx, QWORD PTR omadesc$[rsp]
  00262	48 89 94 24 d8
	00 00 00	 mov	 QWORD PTR tv151[rsp], rdx
  0026a	b9 01 00 00 00	 mov	 ecx, 1
  0026f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00275	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR tv143[rsp]
  0027d	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00282	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tv147[rsp]
  0028a	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0028f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169415
  00296	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0029b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169416
  002a2	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  002a7	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tv151[rsp]
  002af	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  002b4	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv156[rsp]
  002b8	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  002bc	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv162[rsp]
  002c3	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  002c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169417
  002ce	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169418
  002da	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002df	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e4	41 b9 03 00 00
	00		 mov	 r9d, 3
  002ea	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169419
  002f1	ba a5 01 00 00	 mov	 edx, 421		; 000001a5H
  002f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169420
  002fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 421  :                 strerror(errno));
; 422  : 
; 423  :         /* Set unit check with equipment check */
; 424  :         build_senseX(TAPE_BSENSE_READFAIL,dev,unitstat,code);

  00303	44 0f b6 8c 24
	68 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0030c	4c 8b 84 24 60
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00314	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0031c	b9 02 00 00 00	 mov	 ecx, 2
  00321	e8 00 00 00 00	 call	 build_senseX

; 425  :         return -1;

  00326	b8 ff ff ff ff	 mov	 eax, -1
  0032b	e9 e6 03 00 00	 jmp	 $LN1@readhdr_om
$LN3@readhdr_om:

; 426  :     }
; 427  : 
; 428  :     /* Handle end of file within block header */
; 429  :     if (rc < (int)sizeof(omahdr))

  00330	83 bc 24 84 00
	00 00 10	 cmp	 DWORD PTR rc$[rsp], 16
  00338	0f 8d 40 01 00
	00		 jge	 $LN4@readhdr_om

; 430  :     {
; 431  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, omadesc->filename, "OMA", "readhdr_omaheaders()", (off_t)blkpos, "unexpected end of file");

  0033e	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00347	74 15		 je	 SHORT $LN16@readhdr_om
  00349	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00351	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00355	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv188[rsp], eax
  0035c	eb 0b		 jmp	 SHORT $LN17@readhdr_om
$LN16@readhdr_om:
  0035e	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv188[rsp], 0
$LN17@readhdr_om:
  00369	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00372	74 17		 je	 SHORT $LN18@readhdr_om
  00374	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0037c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00380	d1 f8		 sar	 eax, 1
  00382	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv194[rsp], eax
  00389	eb 0b		 jmp	 SHORT $LN19@readhdr_om
$LN18@readhdr_om:
  0038b	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv194[rsp], 0
$LN19@readhdr_om:
  00396	48 63 84 24 40
	01 00 00	 movsxd	 rax, DWORD PTR blkpos$[rsp]
  0039e	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv179[rsp], rax
  003a6	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR omadesc$[rsp]
  003ae	48 89 8c 24 e8
	00 00 00	 mov	 QWORD PTR tv183[rsp], rcx
  003b6	b9 01 00 00 00	 mov	 ecx, 1
  003bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169422
  003c8	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  003cd	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tv179[rsp]
  003d5	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  003da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169423
  003e1	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  003e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169424
  003ed	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  003f2	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR tv183[rsp]
  003fa	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  003ff	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv188[rsp]
  00406	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0040a	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv194[rsp]
  00411	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00415	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169425
  0041c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00421	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169426
  00428	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0042d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00432	41 b9 03 00 00
	00		 mov	 r9d, 3
  00438	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169427
  0043f	ba af 01 00 00	 mov	 edx, 431		; 000001afH
  00444	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169428
  0044b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 432  : 
; 433  :         /* Set unit check with data check and partial record */
; 434  :         build_senseX(TAPE_BSENSE_BLOCKSHORT,dev,unitstat,code);

  00451	44 0f b6 8c 24
	68 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0045a	4c 8b 84 24 60
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00462	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0046a	b9 11 00 00 00	 mov	 ecx, 17
  0046f	e8 00 00 00 00	 call	 build_senseX

; 435  :         return -1;

  00474	b8 ff ff ff ff	 mov	 eax, -1
  00479	e9 98 02 00 00	 jmp	 $LN1@readhdr_om
$LN4@readhdr_om:

; 436  :     }
; 437  : 
; 438  :     /* Extract the current block length and previous header offset */
; 439  :     curblkl = (S32)(((U32)(omahdr.curblkl[3]) << 24)

  0047e	b8 01 00 00 00	 mov	 eax, 1
  00483	48 6b c0 03	 imul	 rax, rax, 3
  00487	0f b6 84 04 00
	01 00 00	 movzx	 eax, BYTE PTR omahdr$[rsp+rax]
  0048f	c1 e0 18	 shl	 eax, 24
  00492	b9 01 00 00 00	 mov	 ecx, 1
  00497	48 6b c9 02	 imul	 rcx, rcx, 2
  0049b	0f b6 8c 0c 00
	01 00 00	 movzx	 ecx, BYTE PTR omahdr$[rsp+rcx]
  004a3	c1 e1 10	 shl	 ecx, 16
  004a6	0b c1		 or	 eax, ecx
  004a8	b9 01 00 00 00	 mov	 ecx, 1
  004ad	48 6b c9 01	 imul	 rcx, rcx, 1
  004b1	0f b6 8c 0c 00
	01 00 00	 movzx	 ecx, BYTE PTR omahdr$[rsp+rcx]
  004b9	c1 e1 08	 shl	 ecx, 8
  004bc	0b c1		 or	 eax, ecx
  004be	b9 01 00 00 00	 mov	 ecx, 1
  004c3	48 6b c9 00	 imul	 rcx, rcx, 0
  004c7	0f b6 8c 0c 00
	01 00 00	 movzx	 ecx, BYTE PTR omahdr$[rsp+rcx]
  004cf	0b c1		 or	 eax, ecx
  004d1	89 44 24 70	 mov	 DWORD PTR curblkl$[rsp], eax

; 440  :                     | ((U32)(omahdr.curblkl[2]) << 16)
; 441  :                     | ((U32)(omahdr.curblkl[1]) << 8)
; 442  :                     | omahdr.curblkl[0]);
; 443  :     prvhdro = (S32)((U32)(omahdr.prvhdro[3]) << 24)

  004d5	b8 01 00 00 00	 mov	 eax, 1
  004da	48 6b c0 03	 imul	 rax, rax, 3
  004de	0f b6 84 04 04
	01 00 00	 movzx	 eax, BYTE PTR omahdr$[rsp+rax+4]
  004e6	c1 e0 18	 shl	 eax, 24
  004e9	b9 01 00 00 00	 mov	 ecx, 1
  004ee	48 6b c9 02	 imul	 rcx, rcx, 2
  004f2	0f b6 8c 0c 04
	01 00 00	 movzx	 ecx, BYTE PTR omahdr$[rsp+rcx+4]
  004fa	c1 e1 10	 shl	 ecx, 16
  004fd	0b c1		 or	 eax, ecx
  004ff	b9 01 00 00 00	 mov	 ecx, 1
  00504	48 6b c9 01	 imul	 rcx, rcx, 1
  00508	0f b6 8c 0c 04
	01 00 00	 movzx	 ecx, BYTE PTR omahdr$[rsp+rcx+4]
  00510	c1 e1 08	 shl	 ecx, 8
  00513	0b c1		 or	 eax, ecx
  00515	b9 01 00 00 00	 mov	 ecx, 1
  0051a	48 6b c9 00	 imul	 rcx, rcx, 0
  0051e	0f b6 8c 0c 04
	01 00 00	 movzx	 ecx, BYTE PTR omahdr$[rsp+rcx+4]
  00526	0b c1		 or	 eax, ecx
  00528	89 84 24 9c 00
	00 00		 mov	 DWORD PTR prvhdro$[rsp], eax

; 444  :                     | ((U32)(omahdr.prvhdro[2]) << 16)
; 445  :                     | ((U32)(omahdr.prvhdro[1]) << 8)
; 446  :                     | omahdr.prvhdro[0];
; 447  : 
; 448  :     /* Check for valid block header */
; 449  :     if (curblkl < -1 || curblkl == 0 || curblkl > MAX_TAPE_BLKSIZE
; 450  :         || memcmp(omahdr.omaid, "@HDF", 4) != 0)

  0052f	83 7c 24 70 ff	 cmp	 DWORD PTR curblkl$[rsp], -1
  00534	7c 33		 jl	 SHORT $LN6@readhdr_om
  00536	83 7c 24 70 00	 cmp	 DWORD PTR curblkl$[rsp], 0
  0053b	74 2c		 je	 SHORT $LN6@readhdr_om
  0053d	81 7c 24 70 00
	00 20 00	 cmp	 DWORD PTR curblkl$[rsp], 2097152 ; 00200000H
  00545	7f 22		 jg	 SHORT $LN6@readhdr_om
  00547	41 b8 04 00 00
	00		 mov	 r8d, 4
  0054d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169431
  00554	48 8d 8c 24 08
	01 00 00	 lea	 rcx, QWORD PTR omahdr$[rsp+8]
  0055c	e8 00 00 00 00	 call	 memcmp
  00561	85 c0		 test	 eax, eax
  00563	0f 84 3d 01 00
	00		 je	 $LN5@readhdr_om
$LN6@readhdr_om:

; 451  :     {
; 452  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, omadesc->filename, "OMA", "readhdr_omaheaders()", (off_t)blkpos, "invalid block header");

  00569	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00572	74 15		 je	 SHORT $LN20@readhdr_om
  00574	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0057c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00580	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv265[rsp], eax
  00587	eb 0b		 jmp	 SHORT $LN21@readhdr_om
$LN20@readhdr_om:
  00589	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv265[rsp], 0
$LN21@readhdr_om:
  00594	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0059d	74 17		 je	 SHORT $LN22@readhdr_om
  0059f	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  005a7	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  005ab	d1 f8		 sar	 eax, 1
  005ad	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv271[rsp], eax
  005b4	eb 0b		 jmp	 SHORT $LN23@readhdr_om
$LN22@readhdr_om:
  005b6	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv271[rsp], 0
$LN23@readhdr_om:
  005c1	48 63 84 24 40
	01 00 00	 movsxd	 rax, DWORD PTR blkpos$[rsp]
  005c9	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv256[rsp], rax
  005d1	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR omadesc$[rsp]
  005d9	48 89 8c 24 f8
	00 00 00	 mov	 QWORD PTR tv260[rsp], rcx
  005e1	b9 01 00 00 00	 mov	 ecx, 1
  005e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169432
  005f3	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  005f8	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv256[rsp]
  00600	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00605	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169433
  0060c	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00611	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169434
  00618	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0061d	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv260[rsp]
  00625	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0062a	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv265[rsp]
  00631	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00635	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv271[rsp]
  0063c	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00640	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169435
  00647	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0064c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169436
  00653	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00658	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0065d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00663	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169437
  0066a	ba c4 01 00 00	 mov	 edx, 452		; 000001c4H
  0066f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169438
  00676	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 453  : 
; 454  :         build_senseX(TAPE_BSENSE_READFAIL,dev,unitstat,code);

  0067c	44 0f b6 8c 24
	68 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00685	4c 8b 84 24 60
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0068d	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00695	b9 02 00 00 00	 mov	 ecx, 2
  0069a	e8 00 00 00 00	 call	 build_senseX

; 455  :         return -1;

  0069f	b8 ff ff ff ff	 mov	 eax, -1
  006a4	eb 70		 jmp	 SHORT $LN1@readhdr_om
$LN5@readhdr_om:

; 456  :     }
; 457  : 
; 458  :     /* Calculate the number of padding bytes which follow the data */
; 459  :     padding = (16 - (curblkl & 15)) & 15;

  006a6	8b 44 24 70	 mov	 eax, DWORD PTR curblkl$[rsp]
  006aa	83 e0 0f	 and	 eax, 15
  006ad	b9 10 00 00 00	 mov	 ecx, 16
  006b2	2b c8		 sub	 ecx, eax
  006b4	8b c1		 mov	 eax, ecx
  006b6	83 e0 0f	 and	 eax, 15
  006b9	89 84 24 98 00
	00 00		 mov	 DWORD PTR padding$[rsp], eax

; 460  : 
; 461  :     /* Calculate the offset of the next block header */
; 462  :     nxthdro = blkpos + sizeof(OMATAPE_BLKHDR) + curblkl + padding;

  006c0	48 63 84 24 40
	01 00 00	 movsxd	 rax, DWORD PTR blkpos$[rsp]
  006c8	48 63 4c 24 70	 movsxd	 rcx, DWORD PTR curblkl$[rsp]
  006cd	48 8d 44 08 10	 lea	 rax, QWORD PTR [rax+rcx+16]
  006d2	48 63 8c 24 98
	00 00 00	 movsxd	 rcx, DWORD PTR padding$[rsp]
  006da	48 03 c1	 add	 rax, rcx
  006dd	89 84 24 a0 00
	00 00		 mov	 DWORD PTR nxthdro$[rsp], eax

; 463  : 
; 464  :     /* Return current block length and previous/next header offsets */
; 465  :     *pcurblkl = curblkl;

  006e4	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pcurblkl$[rsp]
  006ec	8b 4c 24 70	 mov	 ecx, DWORD PTR curblkl$[rsp]
  006f0	89 08		 mov	 DWORD PTR [rax], ecx

; 466  :     *pprvhdro = prvhdro;

  006f2	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR pprvhdro$[rsp]
  006fa	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR prvhdro$[rsp]
  00701	89 08		 mov	 DWORD PTR [rax], ecx

; 467  :     *pnxthdro = nxthdro;

  00703	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR pnxthdro$[rsp]
  0070b	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR nxthdro$[rsp]
  00712	89 08		 mov	 DWORD PTR [rax], ecx

; 468  :     return 0;

  00714	33 c0		 xor	 eax, eax
$LN1@readhdr_om:

; 469  : 
; 470  : } /* end function readhdr_omaheaders */

  00716	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0071e	48 33 cc	 xor	 rcx, rsp
  00721	e8 00 00 00 00	 call	 __security_check_cookie
  00726	48 81 c4 28 01
	00 00		 add	 rsp, 296		; 00000128H
  0072d	c3		 ret	 0
readhdr_omaheaders ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\omatape.c
_TEXT	SEGMENT
len$ = 48
tv73 = 52
omadesc$ = 56
dev$ = 80
buf$ = 88
unitstat$ = 96
code$ = 104
read_omatape PROC

; 739  : {

$LN12:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 740  : int len;
; 741  : OMATAPE_DESC *omadesc;
; 742  :     omadesc = (OMATAPE_DESC*)(dev->omadesc);

  00018	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  0001d	48 8b 80 f8 0f
	00 00		 mov	 rax, QWORD PTR [rax+4088]
  00024	48 89 44 24 38	 mov	 QWORD PTR omadesc$[rsp], rax

; 743  :     omadesc += (dev->curfilen-1);

  00029	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  0002e	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  00035	ff c8		 dec	 eax
  00037	48 98		 cdqe
  00039	48 69 c0 08 01
	00 00		 imul	 rax, rax, 264		; 00000108H
  00040	48 8b 4c 24 38	 mov	 rcx, QWORD PTR omadesc$[rsp]
  00045	48 03 c8	 add	 rcx, rax
  00048	48 8b c1	 mov	 rax, rcx
  0004b	48 89 44 24 38	 mov	 QWORD PTR omadesc$[rsp], rax

; 744  : 
; 745  :     switch (omadesc->format)

  00050	48 8b 44 24 38	 mov	 rax, QWORD PTR omadesc$[rsp]
  00055	0f b6 80 05 01
	00 00		 movzx	 eax, BYTE PTR [rax+261]
  0005c	88 44 24 34	 mov	 BYTE PTR tv73[rsp], al
  00060	80 7c 24 34 45	 cmp	 BYTE PTR tv73[rsp], 69	; 00000045H
  00065	0f 84 b9 00 00
	00		 je	 $LN9@read_omata
  0006b	80 7c 24 34 46	 cmp	 BYTE PTR tv73[rsp], 70	; 00000046H
  00070	74 3d		 je	 SHORT $LN6@read_omata
  00072	80 7c 24 34 48	 cmp	 BYTE PTR tv73[rsp], 72	; 00000048H
  00077	74 0e		 je	 SHORT $LN5@read_omata
  00079	80 7c 24 34 54	 cmp	 BYTE PTR tv73[rsp], 84	; 00000054H
  0007e	74 57		 je	 SHORT $LN7@read_omata
  00080	80 7c 24 34 58	 cmp	 BYTE PTR tv73[rsp], 88	; 00000058H
  00085	74 78		 je	 SHORT $LN8@read_omata
$LN5@read_omata:

; 746  :     {
; 747  :     default:
; 748  :     case 'H':
; 749  :         len = read_omaheaders (dev, omadesc, buf, unitstat,code);

  00087	0f b6 44 24 68	 movzx	 eax, BYTE PTR code$[rsp]
  0008c	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00090	4c 8b 4c 24 60	 mov	 r9, QWORD PTR unitstat$[rsp]
  00095	4c 8b 44 24 58	 mov	 r8, QWORD PTR buf$[rsp]
  0009a	48 8b 54 24 38	 mov	 rdx, QWORD PTR omadesc$[rsp]
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  000a4	e8 00 00 00 00	 call	 read_omaheaders
  000a9	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 750  :         break;

  000ad	eb 7d		 jmp	 SHORT $LN2@read_omata
$LN6@read_omata:

; 751  :     case 'F':
; 752  :         len = read_omafixed (dev, omadesc, buf, unitstat,code);

  000af	0f b6 44 24 68	 movzx	 eax, BYTE PTR code$[rsp]
  000b4	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  000b8	4c 8b 4c 24 60	 mov	 r9, QWORD PTR unitstat$[rsp]
  000bd	4c 8b 44 24 58	 mov	 r8, QWORD PTR buf$[rsp]
  000c2	48 8b 54 24 38	 mov	 rdx, QWORD PTR omadesc$[rsp]
  000c7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  000cc	e8 00 00 00 00	 call	 read_omafixed
  000d1	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 753  :         break;

  000d5	eb 55		 jmp	 SHORT $LN2@read_omata
$LN7@read_omata:

; 754  :     case 'T':
; 755  :         len = read_omatext (dev, omadesc, buf, unitstat,code);

  000d7	0f b6 44 24 68	 movzx	 eax, BYTE PTR code$[rsp]
  000dc	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  000e0	4c 8b 4c 24 60	 mov	 r9, QWORD PTR unitstat$[rsp]
  000e5	4c 8b 44 24 58	 mov	 r8, QWORD PTR buf$[rsp]
  000ea	48 8b 54 24 38	 mov	 rdx, QWORD PTR omadesc$[rsp]
  000ef	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  000f4	e8 00 00 00 00	 call	 read_omatext
  000f9	89 44 24 30	 mov	 DWORD PTR len$[rsp], eax

; 756  :         break;

  000fd	eb 2d		 jmp	 SHORT $LN2@read_omata
$LN8@read_omata:

; 757  :     case 'X':
; 758  :         len=0;

  000ff	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR len$[rsp], 0

; 759  :         dev->curfilen++;

  00107	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  0010c	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  00113	66 ff c0	 inc	 ax
  00116	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  0011b	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 760  :         break;

  00122	eb 08		 jmp	 SHORT $LN2@read_omata
$LN9@read_omata:

; 761  :     case 'E':
; 762  :         len=0;

  00124	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR len$[rsp], 0
$LN2@read_omata:

; 763  :         break;
; 764  :     } /* end switch(omadesc->format) */
; 765  : 
; 766  :     if (len >= 0)

  0012c	83 7c 24 30 00	 cmp	 DWORD PTR len$[rsp], 0
  00131	7c 18		 jl	 SHORT $LN10@read_omata

; 767  :         dev->blockid++;

  00133	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  00138	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  0013e	ff c0		 inc	 eax
  00140	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  00145	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax
$LN10@read_omata:

; 768  : 
; 769  :     return len;

  0014b	8b 44 24 30	 mov	 eax, DWORD PTR len$[rsp]

; 770  : }

  0014f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00153	c3		 ret	 0
read_omatape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\omatape.c
_TEXT	SEGMENT
c$ = 112
blkpos$ = 116
pos$ = 120
rc$ = 124
num$ = 128
tv85 = 132
tv91 = 136
tv184 = 140
tv190 = 144
tv216 = 148
tv222 = 152
tv248 = 156
tv254 = 160
rcoff$ = 168
tv72 = 176
tv76 = 184
tv80 = 192
tv171 = 200
tv175 = 208
tv179 = 216
tv207 = 224
tv211 = 232
tv239 = 240
tv243 = 248
dev$ = 272
omadesc$ = 280
buf$ = 288
unitstat$ = 296
code$ = 304
read_omatext PROC

; 618  : {

$LN33:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H

; 619  : int             rc;                     /* Return code               */
; 620  : off_t           rcoff;                  /* Return code from lseek()  */
; 621  : int             num;                    /* Number of characters read */
; 622  : int             pos;                    /* Position in I/O buffer    */
; 623  : long            blkpos;                 /* Offset of block in file   */
; 624  : BYTE            c;                      /* Character work area       */
; 625  : 
; 626  :     /* Initialize current block position */
; 627  :     blkpos = dev->nxtblkpos;

  0001b	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00023	8b 80 08 10 00
	00		 mov	 eax, DWORD PTR [rax+4104]
  00029	89 44 24 74	 mov	 DWORD PTR blkpos$[rsp], eax

; 628  : 
; 629  :     /* Seek to new current block position */
; 630  :     rcoff = lseek (dev->fd, blkpos, SEEK_SET);

  0002d	48 63 44 24 74	 movsxd	 rax, DWORD PTR blkpos$[rsp]
  00032	45 33 c0	 xor	 r8d, r8d
  00035	48 8b d0	 mov	 rdx, rax
  00038	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00040	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0004c	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR rcoff$[rsp], rax

; 631  :     if (rcoff < 0)

  00054	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR rcoff$[rsp], 0
  0005d	0f 8d 54 01 00
	00		 jge	 $LN5@read_omate

; 632  :     {
; 633  :         /* Handle seek error condition */
; 634  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, omadesc->filename, "OMA", "lseek()", (off_t)blkpos, strerror(errno));

  00063	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0006c	74 15		 je	 SHORT $LN17@read_omate
  0006e	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00076	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0007a	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv85[rsp], eax
  00081	eb 0b		 jmp	 SHORT $LN18@read_omate
$LN17@read_omate:
  00083	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv85[rsp], 0
$LN18@read_omate:
  0008e	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00097	74 17		 je	 SHORT $LN19@read_omate
  00099	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000a1	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  000a5	d1 f8		 sar	 eax, 1
  000a7	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv91[rsp], eax
  000ae	eb 0b		 jmp	 SHORT $LN20@read_omate
$LN19@read_omate:
  000b0	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv91[rsp], 0
$LN20@read_omate:
  000bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000c1	8b 08		 mov	 ecx, DWORD PTR [rax]
  000c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  000c9	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv72[rsp], rax
  000d1	48 63 4c 24 74	 movsxd	 rcx, DWORD PTR blkpos$[rsp]
  000d6	48 89 8c 24 b8
	00 00 00	 mov	 QWORD PTR tv76[rsp], rcx
  000de	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR omadesc$[rsp]
  000e6	48 89 94 24 c0
	00 00 00	 mov	 QWORD PTR tv80[rsp], rdx
  000ee	b9 01 00 00 00	 mov	 ecx, 1
  000f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000f9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv72[rsp]
  00101	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00106	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv76[rsp]
  0010e	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169531
  0011a	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0011f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169532
  00126	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0012b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv80[rsp]
  00133	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00138	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv85[rsp]
  0013f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00143	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv91[rsp]
  0014a	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0014e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169533
  00155	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0015a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169534
  00161	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00166	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0016b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00171	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169535
  00178	ba 7a 02 00 00	 mov	 edx, 634		; 0000027aH
  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169536
  00184	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 635  : 
; 636  :         /* Set unit check with equipment check */
; 637  :         build_senseX(TAPE_BSENSE_LOCATEERR,dev,unitstat,code);

  0018a	44 0f b6 8c 24
	30 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00193	4c 8b 84 24 28
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0019b	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  001a3	b9 0e 00 00 00	 mov	 ecx, 14
  001a8	e8 00 00 00 00	 call	 build_senseX

; 638  :         return -1;

  001ad	b8 ff ff ff ff	 mov	 eax, -1
  001b2	e9 65 05 00 00	 jmp	 $LN1@read_omate
$LN5@read_omate:

; 639  :     }
; 640  : 
; 641  :     /* Read data from tape file until end of line */
; 642  :     for (num = 0, pos = 0; ; )

  001b7	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR num$[rsp], 0
  001c2	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR pos$[rsp], 0
$LN2@read_omate:

; 643  :     {
; 644  :         rc = read (dev->fd, &c, 1);

  001ca	41 b8 01 00 00
	00		 mov	 r8d, 1
  001d0	48 8d 54 24 70	 lea	 rdx, QWORD PTR c$[rsp]
  001d5	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001dd	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  001e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  001e9	89 44 24 7c	 mov	 DWORD PTR rc$[rsp], eax

; 645  :         if (rc < 1) break;

  001ed	83 7c 24 7c 01	 cmp	 DWORD PTR rc$[rsp], 1
  001f2	7d 02		 jge	 SHORT $LN6@read_omate
  001f4	eb 7d		 jmp	 SHORT $LN3@read_omate
$LN6@read_omate:

; 646  : 
; 647  :         /* Treat X'1A' as end of file */
; 648  :         if (c == '\x1A')

  001f6	0f b6 44 24 70	 movzx	 eax, BYTE PTR c$[rsp]
  001fb	83 f8 1a	 cmp	 eax, 26
  001fe	75 0a		 jne	 SHORT $LN7@read_omate

; 649  :         {
; 650  :             rc = 0;

  00200	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0

; 651  :             break;

  00208	eb 69		 jmp	 SHORT $LN3@read_omate
$LN7@read_omate:

; 652  :         }
; 653  : 
; 654  :         /* Count characters read */
; 655  :         num++;

  0020a	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR num$[rsp]
  00211	ff c0		 inc	 eax
  00213	89 84 24 80 00
	00 00		 mov	 DWORD PTR num$[rsp], eax

; 656  : 
; 657  :         /* Ignore carriage return character */
; 658  :         if (c == '\r') continue;

  0021a	0f b6 44 24 70	 movzx	 eax, BYTE PTR c$[rsp]
  0021f	83 f8 0d	 cmp	 eax, 13
  00222	75 02		 jne	 SHORT $LN8@read_omate
  00224	eb a4		 jmp	 SHORT $LN2@read_omate
$LN8@read_omate:

; 659  : 
; 660  :         /* Exit if newline character */
; 661  :         if (c == '\n') break;

  00226	0f b6 44 24 70	 movzx	 eax, BYTE PTR c$[rsp]
  0022b	83 f8 0a	 cmp	 eax, 10
  0022e	75 02		 jne	 SHORT $LN9@read_omate
  00230	eb 41		 jmp	 SHORT $LN3@read_omate
$LN9@read_omate:

; 662  : 
; 663  :         /* Ignore characters in excess of I/O buffer length */
; 664  :         if (pos >= MAX_TAPE_BLKSIZE) continue;

  00232	81 7c 24 78 00
	00 20 00	 cmp	 DWORD PTR pos$[rsp], 2097152 ; 00200000H
  0023a	7c 02		 jl	 SHORT $LN10@read_omate
  0023c	eb 8c		 jmp	 SHORT $LN2@read_omate
$LN10@read_omate:

; 665  : 
; 666  :         /* Translate character to EBCDIC and copy to I/O buffer */
; 667  :         if (buf != NULL)

  0023e	48 83 bc 24 20
	01 00 00 00	 cmp	 QWORD PTR buf$[rsp], 0
  00247	74 1b		 je	 SHORT $LN11@read_omate

; 668  :             buf[pos] = host_to_guest(c);

  00249	0f b6 4c 24 70	 movzx	 ecx, BYTE PTR c$[rsp]
  0024e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_host_to_guest
  00254	48 63 4c 24 78	 movsxd	 rcx, DWORD PTR pos$[rsp]
  00259	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR buf$[rsp]
  00261	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN11@read_omate:

; 669  : 
; 670  :         /* Count characters copied or skipped */
; 671  :         pos++;

  00264	8b 44 24 78	 mov	 eax, DWORD PTR pos$[rsp]
  00268	ff c0		 inc	 eax
  0026a	89 44 24 78	 mov	 DWORD PTR pos$[rsp], eax

; 672  : 
; 673  :     } /* end for(num) */

  0026e	e9 57 ff ff ff	 jmp	 $LN2@read_omate
$LN3@read_omate:

; 674  : 
; 675  :     /* At end of file return zero to indicate tapemark */
; 676  :     if (rc == 0 && num == 0)

  00273	83 7c 24 7c 00	 cmp	 DWORD PTR rc$[rsp], 0
  00278	75 7e		 jne	 SHORT $LN12@read_omate
  0027a	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR num$[rsp], 0
  00282	75 74		 jne	 SHORT $LN12@read_omate

; 677  :     {
; 678  :         close (dev->fd);

  00284	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0028c	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00292	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 679  :         dev->fd = -1;

  00298	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002a0	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 680  :         dev->curfilen++;

  002aa	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002b2	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  002b9	66 ff c0	 inc	 ax
  002bc	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002c4	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 681  :         dev->nxtblkpos = 0;

  002cb	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002d3	48 c7 80 08 10
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4104], 0

; 682  :         dev->prvblkpos = -1;

  002de	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002e6	48 c7 80 10 10
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+4112], -1

; 683  :         return 0;

  002f1	33 c0		 xor	 eax, eax
  002f3	e9 24 04 00 00	 jmp	 $LN1@read_omate
$LN12@read_omate:

; 684  :     }
; 685  : 
; 686  :     /* Handle read error condition */
; 687  :     if (rc < 0)

  002f8	83 7c 24 7c 00	 cmp	 DWORD PTR rc$[rsp], 0
  002fd	0f 8d 54 01 00
	00		 jge	 $LN13@read_omate

; 688  :     {
; 689  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, omadesc->filename, "OMA", "read()", (off_t)blkpos,

  00303	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0030c	74 15		 je	 SHORT $LN21@read_omate
  0030e	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00316	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0031a	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv184[rsp], eax
  00321	eb 0b		 jmp	 SHORT $LN22@read_omate
$LN21@read_omate:
  00323	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv184[rsp], 0
$LN22@read_omate:
  0032e	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00337	74 17		 je	 SHORT $LN23@read_omate
  00339	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00341	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00345	d1 f8		 sar	 eax, 1
  00347	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv190[rsp], eax
  0034e	eb 0b		 jmp	 SHORT $LN24@read_omate
$LN23@read_omate:
  00350	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv190[rsp], 0
$LN24@read_omate:
  0035b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00361	8b 08		 mov	 ecx, DWORD PTR [rax]
  00363	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00369	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv171[rsp], rax
  00371	48 63 4c 24 74	 movsxd	 rcx, DWORD PTR blkpos$[rsp]
  00376	48 89 8c 24 d0
	00 00 00	 mov	 QWORD PTR tv175[rsp], rcx
  0037e	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR omadesc$[rsp]
  00386	48 89 94 24 d8
	00 00 00	 mov	 QWORD PTR tv179[rsp], rdx
  0038e	b9 01 00 00 00	 mov	 ecx, 1
  00393	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00399	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR tv171[rsp]
  003a1	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  003a6	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tv175[rsp]
  003ae	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  003b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169545
  003ba	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  003bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169546
  003c6	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  003cb	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tv179[rsp]
  003d3	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  003d8	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv184[rsp]
  003df	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  003e3	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv190[rsp]
  003ea	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169547
  003f5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169548
  00401	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00406	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0040b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00411	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169549
  00418	ba b2 02 00 00	 mov	 edx, 690		; 000002b2H
  0041d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169550
  00424	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 690  :                 strerror(errno));
; 691  : 
; 692  :         build_senseX(TAPE_BSENSE_READFAIL,dev,unitstat,code);

  0042a	44 0f b6 8c 24
	30 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00433	4c 8b 84 24 28
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0043b	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00443	b9 02 00 00 00	 mov	 ecx, 2
  00448	e8 00 00 00 00	 call	 build_senseX

; 693  :         return -1;

  0044d	b8 ff ff ff ff	 mov	 eax, -1
  00452	e9 c5 02 00 00	 jmp	 $LN1@read_omate
$LN13@read_omate:

; 694  :     }
; 695  : 
; 696  :     /* Check for block not terminated by newline */
; 697  :     if (rc < 1)

  00457	83 7c 24 7c 01	 cmp	 DWORD PTR rc$[rsp], 1
  0045c	0f 8d 3d 01 00
	00		 jge	 $LN14@read_omate

; 698  :     {
; 699  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, omadesc->filename, "OMA", "read_omatext()", (off_t)blkpos, "unexpected end of file");

  00462	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0046b	74 15		 je	 SHORT $LN25@read_omate
  0046d	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00475	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00479	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv216[rsp], eax
  00480	eb 0b		 jmp	 SHORT $LN26@read_omate
$LN25@read_omate:
  00482	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv216[rsp], 0
$LN26@read_omate:
  0048d	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00496	74 17		 je	 SHORT $LN27@read_omate
  00498	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004a0	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  004a4	d1 f8		 sar	 eax, 1
  004a6	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv222[rsp], eax
  004ad	eb 0b		 jmp	 SHORT $LN28@read_omate
$LN27@read_omate:
  004af	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv222[rsp], 0
$LN28@read_omate:
  004ba	48 63 44 24 74	 movsxd	 rax, DWORD PTR blkpos$[rsp]
  004bf	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv207[rsp], rax
  004c7	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR omadesc$[rsp]
  004cf	48 89 8c 24 e8
	00 00 00	 mov	 QWORD PTR tv211[rsp], rcx
  004d7	b9 01 00 00 00	 mov	 ecx, 1
  004dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169552
  004e9	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  004ee	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tv207[rsp]
  004f6	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  004fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169553
  00502	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00507	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169554
  0050e	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00513	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR tv211[rsp]
  0051b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00520	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv216[rsp]
  00527	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0052b	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv222[rsp]
  00532	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00536	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169555
  0053d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00542	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169556
  00549	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0054e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00553	41 b9 03 00 00
	00		 mov	 r9d, 3
  00559	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169557
  00560	ba bb 02 00 00	 mov	 edx, 699		; 000002bbH
  00565	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169558
  0056c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 700  : 
; 701  :         /* Set unit check with data check and partial record */
; 702  :         build_senseX(TAPE_BSENSE_BLOCKSHORT,dev,unitstat,code);

  00572	44 0f b6 8c 24
	30 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0057b	4c 8b 84 24 28
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00583	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0058b	b9 11 00 00 00	 mov	 ecx, 17
  00590	e8 00 00 00 00	 call	 build_senseX

; 703  :         return -1;

  00595	b8 ff ff ff ff	 mov	 eax, -1
  0059a	e9 7d 01 00 00	 jmp	 $LN1@read_omate
$LN14@read_omate:

; 704  :     }
; 705  : 
; 706  :     /* Check for invalid zero length block */
; 707  :     if (pos == 0)

  0059f	83 7c 24 78 00	 cmp	 DWORD PTR pos$[rsp], 0
  005a4	0f 85 3a 01 00
	00		 jne	 $LN15@read_omate

; 708  :     {
; 709  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, omadesc->filename, "OMA", "read_omatext()", (off_t)blkpos, "invalid block header");

  005aa	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  005b3	74 15		 je	 SHORT $LN29@read_omate
  005b5	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  005bd	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  005c1	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv248[rsp], eax
  005c8	eb 0b		 jmp	 SHORT $LN30@read_omate
$LN29@read_omate:
  005ca	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv248[rsp], 0
$LN30@read_omate:
  005d5	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  005de	74 17		 je	 SHORT $LN31@read_omate
  005e0	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  005e8	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  005ec	d1 f8		 sar	 eax, 1
  005ee	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv254[rsp], eax
  005f5	eb 0b		 jmp	 SHORT $LN32@read_omate
$LN31@read_omate:
  005f7	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv254[rsp], 0
$LN32@read_omate:
  00602	48 63 44 24 74	 movsxd	 rax, DWORD PTR blkpos$[rsp]
  00607	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv239[rsp], rax
  0060f	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR omadesc$[rsp]
  00617	48 89 8c 24 f8
	00 00 00	 mov	 QWORD PTR tv243[rsp], rcx
  0061f	b9 01 00 00 00	 mov	 ecx, 1
  00624	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0062a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169560
  00631	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00636	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv239[rsp]
  0063e	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00643	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169561
  0064a	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0064f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169562
  00656	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0065b	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv243[rsp]
  00663	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00668	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv248[rsp]
  0066f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00673	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv254[rsp]
  0067a	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0067e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169563
  00685	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0068a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169564
  00691	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00696	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0069b	41 b9 03 00 00
	00		 mov	 r9d, 3
  006a1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169565
  006a8	ba c5 02 00 00	 mov	 edx, 709		; 000002c5H
  006ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169566
  006b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 710  : 
; 711  :         /* Set unit check with equipment check */
; 712  :         build_senseX(TAPE_BSENSE_BLOCKSHORT,dev,unitstat,code);

  006ba	44 0f b6 8c 24
	30 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  006c3	4c 8b 84 24 28
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  006cb	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  006d3	b9 11 00 00 00	 mov	 ecx, 17
  006d8	e8 00 00 00 00	 call	 build_senseX

; 713  :         return -1;

  006dd	b8 ff ff ff ff	 mov	 eax, -1
  006e2	eb 38		 jmp	 SHORT $LN1@read_omate
$LN15@read_omate:

; 714  :     }
; 715  : 
; 716  :     /* Calculate the offsets of the next and previous blocks */
; 717  :     dev->nxtblkpos = blkpos + num;

  006e4	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR num$[rsp]
  006eb	8b 4c 24 74	 mov	 ecx, DWORD PTR blkpos$[rsp]
  006ef	03 c8		 add	 ecx, eax
  006f1	8b c1		 mov	 eax, ecx
  006f3	48 98		 cdqe
  006f5	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  006fd	48 89 81 08 10
	00 00		 mov	 QWORD PTR [rcx+4104], rax

; 718  :     dev->prvblkpos = blkpos;

  00704	48 63 44 24 74	 movsxd	 rax, DWORD PTR blkpos$[rsp]
  00709	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00711	48 89 81 10 10
	00 00		 mov	 QWORD PTR [rcx+4112], rax

; 719  : 
; 720  :     /* Return block length */
; 721  :     return pos;

  00718	8b 44 24 78	 mov	 eax, DWORD PTR pos$[rsp]
$LN1@read_omate:

; 722  : 
; 723  : } /* end function read_omatext */

  0071c	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  00723	c3		 ret	 0
read_omatext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\omatape.c
_TEXT	SEGMENT
blkpos$ = 112
blklen$ = 116
tv85 = 120
tv91 = 124
tv159 = 128
tv165 = 132
rcoff$ = 136
tv72 = 144
tv76 = 152
tv80 = 160
tv146 = 168
tv150 = 176
tv154 = 184
dev$ = 208
omadesc$ = 216
buf$ = 224
unitstat$ = 232
code$ = 240
read_omafixed PROC

; 551  : {

$LN14:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 552  : off_t           rcoff;                  /* Return code from lseek()  */
; 553  : int             blklen;                 /* Block length              */
; 554  : long            blkpos;                 /* Offset of block in file   */
; 555  : 
; 556  :     /* Initialize current block position */
; 557  :     blkpos = dev->nxtblkpos;

  0001b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00023	8b 80 08 10 00
	00		 mov	 eax, DWORD PTR [rax+4104]
  00029	89 44 24 70	 mov	 DWORD PTR blkpos$[rsp], eax

; 558  : 
; 559  :     /* Seek to new current block position */
; 560  :     rcoff = lseek (dev->fd, blkpos, SEEK_SET);

  0002d	48 63 44 24 70	 movsxd	 rax, DWORD PTR blkpos$[rsp]
  00032	45 33 c0	 xor	 r8d, r8d
  00035	48 8b d0	 mov	 rdx, rax
  00038	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00040	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0004c	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR rcoff$[rsp], rax

; 561  :     if (rcoff < 0)

  00054	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR rcoff$[rsp], 0
  0005d	0f 8d 42 01 00
	00		 jge	 $LN2@read_omafi

; 562  :     {
; 563  :         /* Handle seek error condition */
; 564  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, omadesc->filename, "OMA", "lseek()", (off_t)blkpos, strerror(errno));

  00063	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0006c	74 12		 je	 SHORT $LN6@read_omafi
  0006e	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00076	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0007a	89 44 24 78	 mov	 DWORD PTR tv85[rsp], eax
  0007e	eb 08		 jmp	 SHORT $LN7@read_omafi
$LN6@read_omafi:
  00080	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv85[rsp], 0
$LN7@read_omafi:
  00088	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00091	74 14		 je	 SHORT $LN8@read_omafi
  00093	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0009b	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0009f	d1 f8		 sar	 eax, 1
  000a1	89 44 24 7c	 mov	 DWORD PTR tv91[rsp], eax
  000a5	eb 08		 jmp	 SHORT $LN9@read_omafi
$LN8@read_omafi:
  000a7	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
$LN9@read_omafi:
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000b5	8b 08		 mov	 ecx, DWORD PTR [rax]
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  000bd	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv72[rsp], rax
  000c5	48 63 4c 24 70	 movsxd	 rcx, DWORD PTR blkpos$[rsp]
  000ca	48 89 8c 24 98
	00 00 00	 mov	 QWORD PTR tv76[rsp], rcx
  000d2	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR omadesc$[rsp]
  000da	48 89 94 24 a0
	00 00 00	 mov	 QWORD PTR tv80[rsp], rdx
  000e2	b9 01 00 00 00	 mov	 ecx, 1
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000ed	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv72[rsp]
  000f5	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  000fa	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv76[rsp]
  00102	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00107	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169491
  0010e	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169492
  0011a	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0011f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv80[rsp]
  00127	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0012c	8b 4c 24 78	 mov	 ecx, DWORD PTR tv85[rsp]
  00130	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00134	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv91[rsp]
  00138	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169493
  00143	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00148	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169494
  0014f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00154	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00159	41 b9 03 00 00
	00		 mov	 r9d, 3
  0015f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169495
  00166	ba 34 02 00 00	 mov	 edx, 564		; 00000234H
  0016b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169496
  00172	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 565  : 
; 566  :         /* Set unit check with equipment check */
; 567  :         build_senseX(TAPE_BSENSE_LOCATEERR,dev,unitstat,code);

  00178	44 0f b6 8c 24
	f0 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00181	4c 8b 84 24 e8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00189	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00191	b9 0e 00 00 00	 mov	 ecx, 14
  00196	e8 00 00 00 00	 call	 build_senseX

; 568  :         return -1;

  0019b	b8 ff ff ff ff	 mov	 eax, -1
  001a0	e9 3e 02 00 00	 jmp	 $LN1@read_omafi
$LN2@read_omafi:

; 569  :     }
; 570  : 
; 571  :     /* Read fixed length block or short final block */
; 572  :     blklen = read (dev->fd, buf, omadesc->blklen);

  001a5	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR omadesc$[rsp]
  001ad	0f b7 80 06 01
	00 00		 movzx	 eax, WORD PTR [rax+262]
  001b4	44 8b c0	 mov	 r8d, eax
  001b7	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR buf$[rsp]
  001bf	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001c7	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  001cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  001d3	89 44 24 74	 mov	 DWORD PTR blklen$[rsp], eax

; 573  : 
; 574  :     /* Handle read error condition */
; 575  :     if (blklen < 0)

  001d7	83 7c 24 74 00	 cmp	 DWORD PTR blklen$[rsp], 0
  001dc	0f 8d 54 01 00
	00		 jge	 $LN3@read_omafi

; 576  :     {
; 577  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, omadesc->filename, "OMA", "read()", (off_t)blkpos,

  001e2	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  001eb	74 15		 je	 SHORT $LN10@read_omafi
  001ed	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001f5	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  001f9	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv159[rsp], eax
  00200	eb 0b		 jmp	 SHORT $LN11@read_omafi
$LN10@read_omafi:
  00202	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv159[rsp], 0
$LN11@read_omafi:
  0020d	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00216	74 17		 je	 SHORT $LN12@read_omafi
  00218	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00220	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00224	d1 f8		 sar	 eax, 1
  00226	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv165[rsp], eax
  0022d	eb 0b		 jmp	 SHORT $LN13@read_omafi
$LN12@read_omafi:
  0022f	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv165[rsp], 0
$LN13@read_omafi:
  0023a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00240	8b 08		 mov	 ecx, DWORD PTR [rax]
  00242	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00248	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv146[rsp], rax
  00250	48 63 4c 24 70	 movsxd	 rcx, DWORD PTR blkpos$[rsp]
  00255	48 89 8c 24 b0
	00 00 00	 mov	 QWORD PTR tv150[rsp], rcx
  0025d	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR omadesc$[rsp]
  00265	48 89 94 24 b8
	00 00 00	 mov	 QWORD PTR tv154[rsp], rdx
  0026d	b9 01 00 00 00	 mov	 ecx, 1
  00272	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00278	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv146[rsp]
  00280	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00285	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv150[rsp]
  0028d	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00292	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169498
  00299	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0029e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169499
  002a5	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  002aa	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv154[rsp]
  002b2	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  002b7	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv159[rsp]
  002be	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  002c2	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv165[rsp]
  002c9	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  002cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169500
  002d4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169501
  002e0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002ea	41 b9 03 00 00
	00		 mov	 r9d, 3
  002f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169502
  002f7	ba 42 02 00 00	 mov	 edx, 578		; 00000242H
  002fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169503
  00303	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 578  :                 strerror(errno));
; 579  : 
; 580  :         build_senseX(TAPE_BSENSE_READFAIL,dev,unitstat,code);

  00309	44 0f b6 8c 24
	f0 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00312	4c 8b 84 24 e8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0031a	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00322	b9 02 00 00 00	 mov	 ecx, 2
  00327	e8 00 00 00 00	 call	 build_senseX

; 581  :         return -1;

  0032c	b8 ff ff ff ff	 mov	 eax, -1
  00331	e9 ad 00 00 00	 jmp	 $LN1@read_omafi
$LN3@read_omafi:

; 582  :     }
; 583  : 
; 584  :     /* At end of file return zero to indicate tapemark */
; 585  :     if (blklen == 0)

  00336	83 7c 24 74 00	 cmp	 DWORD PTR blklen$[rsp], 0
  0033b	75 71		 jne	 SHORT $LN4@read_omafi

; 586  :     {
; 587  :         close (dev->fd);

  0033d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00345	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  0034b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 588  :         dev->fd = -1;

  00351	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00359	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 589  :         dev->curfilen++;

  00363	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0036b	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  00372	66 ff c0	 inc	 ax
  00375	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0037d	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 590  :         dev->nxtblkpos = 0;

  00384	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0038c	48 c7 80 08 10
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4104], 0

; 591  :         dev->prvblkpos = -1;

  00397	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0039f	48 c7 80 10 10
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+4112], -1

; 592  :         return 0;

  003aa	33 c0		 xor	 eax, eax
  003ac	eb 35		 jmp	 SHORT $LN1@read_omafi
$LN4@read_omafi:

; 593  :     }
; 594  : 
; 595  :     /* Calculate the offsets of the next and previous blocks */
; 596  :     dev->nxtblkpos = blkpos + blklen;

  003ae	8b 44 24 74	 mov	 eax, DWORD PTR blklen$[rsp]
  003b2	8b 4c 24 70	 mov	 ecx, DWORD PTR blkpos$[rsp]
  003b6	03 c8		 add	 ecx, eax
  003b8	8b c1		 mov	 eax, ecx
  003ba	48 98		 cdqe
  003bc	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003c4	48 89 81 08 10
	00 00		 mov	 QWORD PTR [rcx+4104], rax

; 597  :     dev->prvblkpos = blkpos;

  003cb	48 63 44 24 70	 movsxd	 rax, DWORD PTR blkpos$[rsp]
  003d0	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003d8	48 89 81 10 10
	00 00		 mov	 QWORD PTR [rcx+4112], rax

; 598  : 
; 599  :     /* Return block length, or zero to indicate tapemark */
; 600  :     return blklen;

  003df	8b 44 24 74	 mov	 eax, DWORD PTR blklen$[rsp]
$LN1@read_omafi:

; 601  : 
; 602  : } /* end function read_omafixed */

  003e3	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  003ea	c3		 ret	 0
read_omafixed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\omatape.c
_TEXT	SEGMENT
rc$ = 112
blkpos$ = 116
curblkl$ = 120
tv140 = 124
tv146 = 128
tv172 = 132
tv178 = 136
nxthdro$ = 140
prvhdro$ = 144
tv95 = 152
tv131 = 160
tv135 = 168
tv163 = 176
tv167 = 184
dev$ = 208
omadesc$ = 216
buf$ = 224
unitstat$ = 232
code$ = 240
read_omaheaders PROC

; 483  : {

$LN15:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 484  : int             rc;                     /* Return code               */
; 485  : long            blkpos;                 /* Offset to block header    */
; 486  : S32             curblkl;                /* Length of current block   */
; 487  : S32             prvhdro;                /* Offset of previous header */
; 488  : S32             nxthdro;                /* Offset of next header     */
; 489  : 
; 490  :     /* Read the 16-byte block header */
; 491  :     blkpos = dev->nxtblkpos;

  0001b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00023	8b 80 08 10 00
	00		 mov	 eax, DWORD PTR [rax+4104]
  00029	89 44 24 74	 mov	 DWORD PTR blkpos$[rsp], eax

; 492  :     rc = readhdr_omaheaders (dev, omadesc, blkpos, &curblkl,

  0002d	0f b6 84 24 f0
	00 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  00035	88 44 24 38	 mov	 BYTE PTR [rsp+56], al
  00039	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00041	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00046	48 8d 84 24 8c
	00 00 00	 lea	 rax, QWORD PTR nxthdro$[rsp]
  0004e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00053	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR prvhdro$[rsp]
  0005b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00060	4c 8d 4c 24 78	 lea	 r9, QWORD PTR curblkl$[rsp]
  00065	44 8b 44 24 74	 mov	 r8d, DWORD PTR blkpos$[rsp]
  0006a	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR omadesc$[rsp]
  00072	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0007a	e8 00 00 00 00	 call	 readhdr_omaheaders
  0007f	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 493  :                             &prvhdro, &nxthdro, unitstat,code);
; 494  :     if (rc < 0) return -1;

  00083	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  00088	7d 0a		 jge	 SHORT $LN2@read_omahe
  0008a	b8 ff ff ff ff	 mov	 eax, -1
  0008f	e9 6d 03 00 00	 jmp	 $LN1@read_omahe
$LN2@read_omahe:

; 495  : 
; 496  :     /* Update the offsets of the next and previous blocks */
; 497  :     dev->nxtblkpos = nxthdro;

  00094	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR nxthdro$[rsp]
  0009c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  000a4	48 89 81 08 10
	00 00		 mov	 QWORD PTR [rcx+4104], rax

; 498  :     dev->prvblkpos = blkpos;

  000ab	48 63 44 24 74	 movsxd	 rax, DWORD PTR blkpos$[rsp]
  000b0	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  000b8	48 89 81 10 10
	00 00		 mov	 QWORD PTR [rcx+4112], rax

; 499  : 
; 500  :     /* Increment file number and return zero if tapemark */
; 501  :     if (curblkl == -1)

  000bf	83 7c 24 78 ff	 cmp	 DWORD PTR curblkl$[rsp], -1
  000c4	75 74		 jne	 SHORT $LN3@read_omahe

; 502  :     {
; 503  :         close (dev->fd);

  000c6	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000ce	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 504  :         dev->fd = -1;

  000da	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000e2	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 505  :         dev->curfilen++;

  000ec	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000f4	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  000fb	66 ff c0	 inc	 ax
  000fe	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00106	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 506  :         dev->nxtblkpos = 0;

  0010d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00115	48 c7 80 08 10
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4104], 0

; 507  :         dev->prvblkpos = -1;

  00120	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00128	48 c7 80 10 10
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+4112], -1

; 508  :         return 0;

  00133	33 c0		 xor	 eax, eax
  00135	e9 c7 02 00 00	 jmp	 $LN1@read_omahe
$LN3@read_omahe:

; 509  :     }
; 510  : 
; 511  :     /* Read data block from tape file */
; 512  :     rc = read (dev->fd, buf, curblkl);

  0013a	44 8b 44 24 78	 mov	 r8d, DWORD PTR curblkl$[rsp]
  0013f	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR buf$[rsp]
  00147	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0014f	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00155	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  0015b	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 513  : 
; 514  :     /* Handle read error condition */
; 515  :     if (rc < 0)

  0015f	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  00164	0f 8d 4b 01 00
	00		 jge	 $LN4@read_omahe

; 516  :     {
; 517  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, omadesc->filename, "OMA", "read()", (off_t)blkpos,

  0016a	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00173	74 12		 je	 SHORT $LN7@read_omahe
  00175	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0017d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00181	89 44 24 7c	 mov	 DWORD PTR tv140[rsp], eax
  00185	eb 08		 jmp	 SHORT $LN8@read_omahe
$LN7@read_omahe:
  00187	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv140[rsp], 0
$LN8@read_omahe:
  0018f	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00198	74 17		 je	 SHORT $LN9@read_omahe
  0019a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001a2	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  001a6	d1 f8		 sar	 eax, 1
  001a8	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv146[rsp], eax
  001af	eb 0b		 jmp	 SHORT $LN10@read_omahe
$LN9@read_omahe:
  001b1	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv146[rsp], 0
$LN10@read_omahe:
  001bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  001c2	8b 08		 mov	 ecx, DWORD PTR [rax]
  001c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  001ca	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv95[rsp], rax
  001d2	48 63 4c 24 74	 movsxd	 rcx, DWORD PTR blkpos$[rsp]
  001d7	48 89 8c 24 a0
	00 00 00	 mov	 QWORD PTR tv131[rsp], rcx
  001df	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR omadesc$[rsp]
  001e7	48 89 94 24 a8
	00 00 00	 mov	 QWORD PTR tv135[rsp], rdx
  001ef	b9 01 00 00 00	 mov	 ecx, 1
  001f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001fa	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv95[rsp]
  00202	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00207	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv131[rsp]
  0020f	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00214	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169460
  0021b	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00220	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169461
  00227	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0022c	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv135[rsp]
  00234	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00239	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv140[rsp]
  0023d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00241	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv146[rsp]
  00248	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0024c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169462
  00253	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00258	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169463
  0025f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00264	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00269	41 b9 03 00 00
	00		 mov	 r9d, 3
  0026f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169464
  00276	ba 06 02 00 00	 mov	 edx, 518		; 00000206H
  0027b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169465
  00282	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 518  :                 strerror(errno));
; 519  : 
; 520  :         /* Set unit check with equipment check */
; 521  :         build_senseX(TAPE_BSENSE_READFAIL,dev,unitstat,code);

  00288	44 0f b6 8c 24
	f0 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00291	4c 8b 84 24 e8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00299	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  002a1	b9 02 00 00 00	 mov	 ecx, 2
  002a6	e8 00 00 00 00	 call	 build_senseX

; 522  :         return -1;

  002ab	b8 ff ff ff ff	 mov	 eax, -1
  002b0	e9 4c 01 00 00	 jmp	 $LN1@read_omahe
$LN4@read_omahe:

; 523  :     }
; 524  : 
; 525  :     /* Handle end of file within data block */
; 526  :     if (rc < curblkl)

  002b5	8b 44 24 78	 mov	 eax, DWORD PTR curblkl$[rsp]
  002b9	39 44 24 70	 cmp	 DWORD PTR rc$[rsp], eax
  002bd	0f 8d 3a 01 00
	00		 jge	 $LN5@read_omahe

; 527  :     {
; 528  :         WRMSG(HHC00204, "E", LCSS_DEVNUM, omadesc->filename, "OMA", "read_omaheaders()", (off_t)blkpos, "unexpected end of file");

  002c3	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  002cc	74 15		 je	 SHORT $LN11@read_omahe
  002ce	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002d6	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  002da	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv172[rsp], eax
  002e1	eb 0b		 jmp	 SHORT $LN12@read_omahe
$LN11@read_omahe:
  002e3	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv172[rsp], 0
$LN12@read_omahe:
  002ee	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  002f7	74 17		 je	 SHORT $LN13@read_omahe
  002f9	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00301	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00305	d1 f8		 sar	 eax, 1
  00307	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv178[rsp], eax
  0030e	eb 0b		 jmp	 SHORT $LN14@read_omahe
$LN13@read_omahe:
  00310	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv178[rsp], 0
$LN14@read_omahe:
  0031b	48 63 44 24 74	 movsxd	 rax, DWORD PTR blkpos$[rsp]
  00320	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv163[rsp], rax
  00328	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR omadesc$[rsp]
  00330	48 89 8c 24 b8
	00 00 00	 mov	 QWORD PTR tv167[rsp], rcx
  00338	b9 01 00 00 00	 mov	 ecx, 1
  0033d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00343	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169467
  0034a	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  0034f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv163[rsp]
  00357	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0035c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169468
  00363	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00368	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169469
  0036f	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00374	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv167[rsp]
  0037c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00381	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv172[rsp]
  00388	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0038c	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv178[rsp]
  00393	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00397	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169470
  0039e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169471
  003aa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003af	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003b4	41 b9 03 00 00
	00		 mov	 r9d, 3
  003ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169472
  003c1	ba 10 02 00 00	 mov	 edx, 528		; 00000210H
  003c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169473
  003cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 529  : 
; 530  :         /* Set unit check with data check and partial record */
; 531  :         build_senseX(TAPE_BSENSE_BLOCKSHORT,dev,unitstat,code);

  003d3	44 0f b6 8c 24
	f0 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  003dc	4c 8b 84 24 e8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  003e4	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  003ec	b9 11 00 00 00	 mov	 ecx, 17
  003f1	e8 00 00 00 00	 call	 build_senseX

; 532  :         return -1;

  003f6	b8 ff ff ff ff	 mov	 eax, -1
  003fb	eb 04		 jmp	 SHORT $LN1@read_omahe
$LN5@read_omahe:

; 533  :     }
; 534  : 
; 535  :     /* Return block length */
; 536  :     return curblkl;

  003fd	8b 44 24 78	 mov	 eax, DWORD PTR curblkl$[rsp]
$LN1@read_omahe:

; 537  : 
; 538  : } /* end function read_omaheaders */

  00401	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00408	c3		 ret	 0
read_omaheaders ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\omatape.c
_TEXT	SEGMENT
curblkl$ = 112
tv85 = 116
tv91 = 120
eofpos$ = 128
blkpos$ = 136
tv74 = 144
tv80 = 152
dev$ = 176
omadesc$ = 184
unitstat$ = 192
code$ = 200
fsb_omafixed PROC

; 866  : {

$LN13:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 867  : off_t           eofpos;                 /* Offset of end of file     */
; 868  : off_t           blkpos;                 /* Offset of current block   */
; 869  : int             curblkl;                /* Length of current block   */
; 870  : 
; 871  :     /* Initialize current block position */
; 872  :     blkpos = dev->nxtblkpos;

  0001b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00023	48 8b 80 08 10
	00 00		 mov	 rax, QWORD PTR [rax+4104]
  0002a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR blkpos$[rsp], rax

; 873  : 
; 874  :     /* Seek to end of file to determine file size */
; 875  :     eofpos = lseek (dev->fd, 0, SEEK_END);

  00032	41 b8 02 00 00
	00		 mov	 r8d, 2
  00038	33 d2		 xor	 edx, edx
  0003a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00042	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0004e	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR eofpos$[rsp], rax

; 876  :     if (eofpos < 0 || eofpos >= LONG_MAX)

  00056	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR eofpos$[rsp], 0
  0005f	7c 12		 jl	 SHORT $LN3@fsb_omafix
  00061	48 81 bc 24 80
	00 00 00 ff ff
	ff 7f		 cmp	 QWORD PTR eofpos$[rsp], 2147483647 ; 7fffffffH
  0006d	0f 8c 42 01 00
	00		 jl	 $LN2@fsb_omafix
$LN3@fsb_omafix:

; 877  :     {
; 878  :         /* Handle seek error condition */
; 879  :         if ( eofpos >= LONG_MAX) errno = EOVERFLOW;

  00073	48 81 bc 24 80
	00 00 00 ff ff
	ff 7f		 cmp	 QWORD PTR eofpos$[rsp], 2147483647 ; 7fffffffH
  0007f	7c 0c		 jl	 SHORT $LN4@fsb_omafix
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00087	c7 00 84 00 00
	00		 mov	 DWORD PTR [rax], 132	; 00000084H
$LN4@fsb_omafix:

; 880  :         WRMSG (HHC00205, "E", LCSS_DEVNUM, omadesc->filename, "OMA", "lseek()", strerror(errno));

  0008d	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00096	74 12		 je	 SHORT $LN9@fsb_omafix
  00098	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000a0	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  000a4	89 44 24 74	 mov	 DWORD PTR tv85[rsp], eax
  000a8	eb 08		 jmp	 SHORT $LN10@fsb_omafix
$LN9@fsb_omafix:
  000aa	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv85[rsp], 0
$LN10@fsb_omafix:
  000b2	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000bb	74 14		 je	 SHORT $LN11@fsb_omafix
  000bd	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000c5	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  000c9	d1 f8		 sar	 eax, 1
  000cb	89 44 24 78	 mov	 DWORD PTR tv91[rsp], eax
  000cf	eb 08		 jmp	 SHORT $LN12@fsb_omafix
$LN11@fsb_omafix:
  000d1	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
$LN12@fsb_omafix:
  000d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000df	8b 08		 mov	 ecx, DWORD PTR [rax]
  000e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  000e7	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv74[rsp], rax
  000ef	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR omadesc$[rsp]
  000f7	48 89 8c 24 98
	00 00 00	 mov	 QWORD PTR tv80[rsp], rcx
  000ff	b9 01 00 00 00	 mov	 ecx, 1
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0010a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv74[rsp]
  00112	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00117	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169637
  0011e	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00123	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169638
  0012a	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0012f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv80[rsp]
  00137	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0013c	8b 4c 24 74	 mov	 ecx, DWORD PTR tv85[rsp]
  00140	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00144	8b 4c 24 78	 mov	 ecx, DWORD PTR tv91[rsp]
  00148	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0014c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169639
  00153	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00158	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169640
  0015f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00164	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00169	41 b9 03 00 00
	00		 mov	 r9d, 3
  0016f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169641
  00176	ba 70 03 00 00	 mov	 edx, 880		; 00000370H
  0017b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169642
  00182	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 881  : 
; 882  :         /* Set unit check with equipment check */
; 883  :         build_senseX(TAPE_BSENSE_LOCATEERR,dev,unitstat,code);

  00188	44 0f b6 8c 24
	c8 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00191	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00199	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  001a1	b9 0e 00 00 00	 mov	 ecx, 14
  001a6	e8 00 00 00 00	 call	 build_senseX

; 884  :         return -1;

  001ab	b8 ff ff ff ff	 mov	 eax, -1
  001b0	e9 1c 01 00 00	 jmp	 $LN1@fsb_omafix
$LN2@fsb_omafix:

; 885  :     }
; 886  : 
; 887  :     /* Check if already at end of file */
; 888  :     if (blkpos >= eofpos)

  001b5	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR eofpos$[rsp]
  001bd	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR blkpos$[rsp], rax
  001c5	0f 8c 85 00 00
	00		 jl	 $LN5@fsb_omafix

; 889  :     {
; 890  :         /* Close the current OMA file */
; 891  :         if (dev->fd >= 0)

  001cb	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001d3	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  001da	7c 14		 jl	 SHORT $LN6@fsb_omafix

; 892  :             close (dev->fd);

  001dc	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001e4	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  001ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close
$LN6@fsb_omafix:

; 893  :         dev->fd = -1;

  001f0	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001f8	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 894  :         dev->nxtblkpos = 0;

  00202	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0020a	48 c7 80 08 10
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4104], 0

; 895  :         dev->prvblkpos = -1;

  00215	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0021d	48 c7 80 10 10
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+4112], -1

; 896  : 
; 897  :         /* Increment the file number */
; 898  :         dev->curfilen++;

  00228	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00230	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  00237	66 ff c0	 inc	 ax
  0023a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00242	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 899  : 
; 900  :         /* Return zero to indicate tapemark */
; 901  :         return 0;

  00249	33 c0		 xor	 eax, eax
  0024b	e9 81 00 00 00	 jmp	 $LN1@fsb_omafix
$LN5@fsb_omafix:

; 902  :     }
; 903  : 
; 904  :     /* Calculate current block length */
; 905  :     curblkl = (int)(eofpos - blkpos);

  00250	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR blkpos$[rsp]
  00258	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR eofpos$[rsp]
  00260	48 2b c8	 sub	 rcx, rax
  00263	48 8b c1	 mov	 rax, rcx
  00266	89 44 24 70	 mov	 DWORD PTR curblkl$[rsp], eax

; 906  :     if (curblkl > omadesc->blklen)

  0026a	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR omadesc$[rsp]
  00272	0f b7 80 06 01
	00 00		 movzx	 eax, WORD PTR [rax+262]
  00279	39 44 24 70	 cmp	 DWORD PTR curblkl$[rsp], eax
  0027d	7e 13		 jle	 SHORT $LN7@fsb_omafix

; 907  :         curblkl = omadesc->blklen;

  0027f	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR omadesc$[rsp]
  00287	0f b7 80 06 01
	00 00		 movzx	 eax, WORD PTR [rax+262]
  0028e	89 44 24 70	 mov	 DWORD PTR curblkl$[rsp], eax
$LN7@fsb_omafix:

; 908  : 
; 909  :     /* Update the offsets of the next and previous blocks */
; 910  :     dev->nxtblkpos = (long)(blkpos + curblkl);

  00292	48 63 44 24 70	 movsxd	 rax, DWORD PTR curblkl$[rsp]
  00297	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  0029f	48 03 c8	 add	 rcx, rax
  002a2	48 8b c1	 mov	 rax, rcx
  002a5	48 98		 cdqe
  002a7	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002af	48 89 81 08 10
	00 00		 mov	 QWORD PTR [rcx+4104], rax

; 911  :     dev->prvblkpos = (long)(blkpos);

  002b6	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR blkpos$[rsp]
  002be	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002c6	48 89 81 10 10
	00 00		 mov	 QWORD PTR [rcx+4112], rax

; 912  : 
; 913  :     /* Return block length */
; 914  :     return curblkl;

  002cd	8b 44 24 70	 mov	 eax, DWORD PTR curblkl$[rsp]
$LN1@fsb_omafix:

; 915  : 
; 916  : } /* end function fsb_omafixed */

  002d1	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  002d8	c3		 ret	 0
fsb_omafixed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\omatape.c
_TEXT	SEGMENT
blkpos$ = 64
curblkl$ = 68
rc$ = 72
nxthdro$ = 76
prvhdro$ = 80
dev$ = 112
omadesc$ = 120
unitstat$ = 128
code$ = 136
fsb_omaheaders PROC

; 813  : {

$LN6:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 814  : int             rc;                     /* Return code               */
; 815  : long            blkpos;                 /* Offset of block header    */
; 816  : S32             curblkl;                /* Length of current block   */
; 817  : S32             prvhdro;                /* Offset of previous header */
; 818  : S32             nxthdro;                /* Offset of next header     */
; 819  : 
; 820  :     /* Initialize current block position */
; 821  :     blkpos = dev->nxtblkpos;

  00018	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0001d	8b 80 08 10 00
	00		 mov	 eax, DWORD PTR [rax+4104]
  00023	89 44 24 40	 mov	 DWORD PTR blkpos$[rsp], eax

; 822  : 
; 823  :     /* Read the 16-byte block header */
; 824  :     rc = readhdr_omaheaders (dev, omadesc, blkpos, &curblkl,

  00027	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  0002f	88 44 24 38	 mov	 BYTE PTR [rsp+56], al
  00033	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  0003b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00040	48 8d 44 24 4c	 lea	 rax, QWORD PTR nxthdro$[rsp]
  00045	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0004a	48 8d 44 24 50	 lea	 rax, QWORD PTR prvhdro$[rsp]
  0004f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00054	4c 8d 4c 24 44	 lea	 r9, QWORD PTR curblkl$[rsp]
  00059	44 8b 44 24 40	 mov	 r8d, DWORD PTR blkpos$[rsp]
  0005e	48 8b 54 24 78	 mov	 rdx, QWORD PTR omadesc$[rsp]
  00063	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00068	e8 00 00 00 00	 call	 readhdr_omaheaders
  0006d	89 44 24 48	 mov	 DWORD PTR rc$[rsp], eax

; 825  :                             &prvhdro, &nxthdro, unitstat,code);
; 826  :     if (rc < 0) return -1;

  00071	83 7c 24 48 00	 cmp	 DWORD PTR rc$[rsp], 0
  00076	7d 0a		 jge	 SHORT $LN2@fsb_omahea
  00078	b8 ff ff ff ff	 mov	 eax, -1
  0007d	e9 9a 00 00 00	 jmp	 $LN1@fsb_omahea
$LN2@fsb_omahea:

; 827  : 
; 828  :     /* Check if tapemark was skipped */
; 829  :     if (curblkl == -1)

  00082	83 7c 24 44 ff	 cmp	 DWORD PTR curblkl$[rsp], -1
  00087	75 6d		 jne	 SHORT $LN3@fsb_omahea

; 830  :     {
; 831  :         /* Close the current OMA file */
; 832  :         if (dev->fd >= 0)

  00089	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0008e	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  00095	7c 11		 jl	 SHORT $LN4@fsb_omahea

; 833  :             close (dev->fd);

  00097	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0009c	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close
$LN4@fsb_omahea:

; 834  :         dev->fd = -1;

  000a8	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  000ad	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 835  :         dev->nxtblkpos = 0;

  000b7	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  000bc	48 c7 80 08 10
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4104], 0

; 836  :         dev->prvblkpos = -1;

  000c7	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  000cc	48 c7 80 10 10
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+4112], -1

; 837  : 
; 838  :         /* Increment the file number */
; 839  :         dev->curfilen++;

  000d7	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  000dc	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  000e3	66 ff c0	 inc	 ax
  000e6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  000eb	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 840  : 
; 841  :         /* Return zero to indicate tapemark */
; 842  :         return 0;

  000f2	33 c0		 xor	 eax, eax
  000f4	eb 26		 jmp	 SHORT $LN1@fsb_omahea
$LN3@fsb_omahea:

; 843  :     }
; 844  : 
; 845  :     /* Update the offsets of the next and previous blocks */
; 846  :     dev->nxtblkpos = nxthdro;

  000f6	48 63 44 24 4c	 movsxd	 rax, DWORD PTR nxthdro$[rsp]
  000fb	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00100	48 89 81 08 10
	00 00		 mov	 QWORD PTR [rcx+4104], rax

; 847  :     dev->prvblkpos = blkpos;

  00107	48 63 44 24 40	 movsxd	 rax, DWORD PTR blkpos$[rsp]
  0010c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00111	48 89 81 10 10
	00 00		 mov	 QWORD PTR [rcx+4112], rax

; 848  : 
; 849  :     /* Return block length */
; 850  :     return curblkl;

  00118	8b 44 24 44	 mov	 eax, DWORD PTR curblkl$[rsp]
$LN1@fsb_omahea:

; 851  : 
; 852  : } /* end function fsb_omaheaders */

  0011c	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00120	c3		 ret	 0
fsb_omaheaders ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\omatape.c
_TEXT	SEGMENT
filecount$ = 112
stmt$ = 116
tdftab$ = 120
i$ = 128
oma$ = 136
tdffilenm$ = 144
pathlen$ = 152
c$ = 160
blklen$ = 164
tdfformat$ = 168
tv92 = 176
tv130 = 180
tv172 = 184
tv178 = 188
tv204 = 192
tv210 = 196
tv230 = 200
tv236 = 204
tv267 = 208
tv273 = 212
tv369 = 216
tv375 = 220
tv412 = 224
tv418 = 228
tv526 = 232
tv532 = 236
tv565 = 240
tv571 = 244
tv603 = 248
tv641 = 252
tv666 = 256
tv672 = 260
tdfblklen$ = 264
tdfreckwd$ = 272
argc$ = 280
tv81 = 288
tv87 = 296
tv167 = 304
tv193 = 312
tv199 = 320
tv225 = 328
tv256 = 336
tv262 = 344
tv364 = 352
tv407 = 360
tv521 = 368
tv560 = 376
tv598 = 384
tv655 = 392
tv661 = 400
argv$ = 408
buf$ = 448
str$ = 752
pathname$ = 1264
__$ArrayPad$ = 1536
dev$ = 1584
read_omadesc PROC

; 34   : {

$LN87:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 81 ec 18 06
	00 00		 sub	 rsp, 1560		; 00000618H
  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00015	48 33 c4	 xor	 rax, rsp
  00018	48 89 84 24 00
	06 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 35   : FILE*           oma;                    /* OMA tape descriptor file  */
; 36   : OMATAPE_DESC*   tdftab;                 /* -> Tape descriptor array  */
; 37   : int             i;                      /* Array subscript           */
; 38   : int             stmt;                   /* TDF file statement number */
; 39   : int             argc;                   /* Parsed TDF record argc    */
; 40   : char*           argv[ 4 ];              /* Parsed TDF record argv    */
; 41   : char*           tdffilenm;              /* -> Filename in TDF record */
; 42   : char*           tdfformat;              /* -> Format in TDF record   */
; 43   : char*           tdfreckwd;              /* -> Keyword in TDF record  */
; 44   : char*           tdfblklen;              /* -> Length in TDF record   */
; 45   : char            str[512];               /* Stmt. read from OMA file  */
; 46   : char            pathname[ MAX_PATH + 1];/* file path in host format  */
; 47   : char            buf[ MAX_PATH + 32 ];   /* Work for MSGBUF use       */
; 48   : size_t          pathlen;                /* Length of TDF path name   */
; 49   : U16             filecount;              /* Number of files           */
; 50   : U32             blklen;                 /* Fixed block length        */
; 51   : BYTE            c;                      /* Work area for sscanf      */
; 52   : 
; 53   :     /* Normalize path separators to be all '/' forward slashes */
; 54   :     hostpath( pathname, dev->filename, sizeof( pathname ));

  00020	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00028	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0002e	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8d 8c 24 f0
	04 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 55   : 
; 56   :     /* Isolate the base path name of the TDF file */
; 57   :     for (pathlen = strlen( pathname ); pathlen > 0; )

  00045	48 8d 8c 24 f0
	04 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  0004d	e8 00 00 00 00	 call	 strlen
  00052	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR pathlen$[rsp], rax
$LN2@read_omade:
  0005a	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR pathlen$[rsp], 0
  00063	76 2c		 jbe	 SHORT $LN3@read_omade

; 58   :     {
; 59   :         pathlen--;

  00065	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pathlen$[rsp]
  0006d	48 ff c8	 dec	 rax
  00070	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR pathlen$[rsp], rax

; 60   :         if (pathname[ pathlen - 1 ] == '/') break;

  00078	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pathlen$[rsp]
  00080	0f be 84 04 ef
	04 00 00	 movsx	 eax, BYTE PTR pathname$[rsp+rax-1]
  00088	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0008b	75 02		 jne	 SHORT $LN14@read_omade
  0008d	eb 02		 jmp	 SHORT $LN3@read_omade
$LN14@read_omade:

; 61   :     }

  0008f	eb c9		 jmp	 SHORT $LN2@read_omade
$LN3@read_omade:

; 62   : 
; 63   :     /* Open the TDF tape descriptor file */
; 64   :     if (!(oma = fopen( pathname, "r" )))

  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169236
  00098	48 8d 8c 24 f0
	04 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  000a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  000a6	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR oma$[rsp], rax
  000ae	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR oma$[rsp], 0
  000b7	0f 85 1e 01 00
	00		 jne	 $LN15@read_omade

; 65   :     {
; 66   :         // "%1d:%04X Tape file %s, type %s: error in function %s: %s"
; 67   :         WRMSG( HHC00205, "E", LCSS_DEVNUM, dev->filename, "OMA", "fopen()", strerror( errno ));

  000bd	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000c6	74 15		 je	 SHORT $LN43@read_omade
  000c8	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000d0	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  000d4	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv92[rsp], eax
  000db	eb 0b		 jmp	 SHORT $LN44@read_omade
$LN43@read_omade:
  000dd	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv92[rsp], 0
$LN44@read_omade:
  000e8	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000f1	74 17		 je	 SHORT $LN45@read_omade
  000f3	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000fb	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  000ff	d1 f8		 sar	 eax, 1
  00101	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv130[rsp], eax
  00108	eb 0b		 jmp	 SHORT $LN46@read_omade
$LN45@read_omade:
  0010a	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv130[rsp], 0
$LN46@read_omade:
  00115	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0011b	8b 08		 mov	 ecx, DWORD PTR [rax]
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00123	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv81[rsp], rax
  0012b	48 8b 8c 24 30
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00133	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0013a	48 89 8c 24 28
	01 00 00	 mov	 QWORD PTR tv87[rsp], rcx
  00142	b9 01 00 00 00	 mov	 ecx, 1
  00147	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0014d	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv81[rsp]
  00155	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0015a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169237
  00161	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00166	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169238
  0016d	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00172	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR tv87[rsp]
  0017a	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0017f	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR tv92[rsp]
  00186	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0018a	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv130[rsp]
  00191	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169239
  0019c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169240
  001a8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ad	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b2	41 b9 03 00 00
	00		 mov	 r9d, 3
  001b8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169241
  001bf	ba 43 00 00 00	 mov	 edx, 67			; 00000043H
  001c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169242
  001cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 68   :         return -1;

  001d1	b8 ff ff ff ff	 mov	 eax, -1
  001d6	e9 29 11 00 00	 jmp	 $LN1@read_omade
$LN15@read_omade:

; 69   :     }
; 70   : 
; 71   :     /* Check that the first record is a @TDF header
; 72   :        and count the number of records in the file. */
; 73   :     for (filecount = 0; fgets( str, sizeof( str ), oma ); filecount++)

  001db	33 c0		 xor	 eax, eax
  001dd	66 89 44 24 70	 mov	 WORD PTR filecount$[rsp], ax
  001e2	eb 0d		 jmp	 SHORT $LN7@read_omade
$LN5@read_omade:
  001e4	0f b7 44 24 70	 movzx	 eax, WORD PTR filecount$[rsp]
  001e9	66 ff c0	 inc	 ax
  001ec	66 89 44 24 70	 mov	 WORD PTR filecount$[rsp], ax
$LN7@read_omade:
  001f1	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR oma$[rsp]
  001f9	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  001fe	48 8d 8c 24 f0
	02 00 00	 lea	 rcx, QWORD PTR str$[rsp]
  00206	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fgets
  0020c	48 85 c0	 test	 rax, rax
  0020f	0f 84 6f 01 00
	00		 je	 $LN6@read_omade

; 74   :     {
; 75   :         if (filecount != 0)     /* If not first record */

  00215	0f b7 44 24 70	 movzx	 eax, WORD PTR filecount$[rsp]
  0021a	85 c0		 test	 eax, eax
  0021c	74 02		 je	 SHORT $LN16@read_omade

; 76   :             continue;           /* then just count it  */

  0021e	eb c4		 jmp	 SHORT $LN5@read_omade
$LN16@read_omade:

; 77   : 
; 78   :         /* Check that the first record is a @TDF header */
; 79   :         if (0
; 80   :             || memcmp( str, "@TDF", 4 ) != 0
; 81   :             || (1

  00220	33 c0		 xor	 eax, eax
  00222	85 c0		 test	 eax, eax
  00224	75 5d		 jne	 SHORT $LN18@read_omade
  00226	41 b8 04 00 00
	00		 mov	 r8d, 4
  0022c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169246
  00233	48 8d 8c 24 f0
	02 00 00	 lea	 rcx, QWORD PTR str$[rsp]
  0023b	e8 00 00 00 00	 call	 memcmp
  00240	85 c0		 test	 eax, eax
  00242	75 3f		 jne	 SHORT $LN18@read_omade
  00244	33 c0		 xor	 eax, eax
  00246	83 f8 01	 cmp	 eax, 1
  00249	0f 84 30 01 00
	00		 je	 $LN17@read_omade
  0024f	b8 01 00 00 00	 mov	 eax, 1
  00254	48 6b c0 04	 imul	 rax, rax, 4
  00258	0f be 84 04 f0
	02 00 00	 movsx	 eax, BYTE PTR str$[rsp+rax]
  00260	83 f8 0d	 cmp	 eax, 13
  00263	0f 84 16 01 00
	00		 je	 $LN17@read_omade
  00269	b8 01 00 00 00	 mov	 eax, 1
  0026e	48 6b c0 04	 imul	 rax, rax, 4
  00272	0f be 84 04 f0
	02 00 00	 movsx	 eax, BYTE PTR str$[rsp+rax]
  0027a	83 f8 0a	 cmp	 eax, 10
  0027d	0f 84 fc 00 00
	00		 je	 $LN17@read_omade
$LN18@read_omade:

; 82   :                 && str[4] != '\r'
; 83   :                 && str[4] != '\n'
; 84   :                )
; 85   :         )
; 86   :         {
; 87   :             // "%1d:%04X Tape file %s, type %s: not a valid @TDF file"
; 88   :             WRMSG( HHC00206, "E", LCSS_DEVNUM, dev->filename, "OMA" );

  00283	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0028c	74 15		 je	 SHORT $LN47@read_omade
  0028e	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00296	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0029a	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv172[rsp], eax
  002a1	eb 0b		 jmp	 SHORT $LN48@read_omade
$LN47@read_omade:
  002a3	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv172[rsp], 0
$LN48@read_omade:
  002ae	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  002b7	74 17		 je	 SHORT $LN49@read_omade
  002b9	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002c1	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  002c5	d1 f8		 sar	 eax, 1
  002c7	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv178[rsp], eax
  002ce	eb 0b		 jmp	 SHORT $LN50@read_omade
$LN49@read_omade:
  002d0	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv178[rsp], 0
$LN50@read_omade:
  002db	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002e3	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  002e9	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv167[rsp], rax
  002f1	b9 01 00 00 00	 mov	 ecx, 1
  002f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169247
  00303	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00308	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR tv167[rsp]
  00310	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00315	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR tv172[rsp]
  0031c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00320	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR tv178[rsp]
  00327	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0032b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169248
  00332	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00337	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169249
  0033e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00343	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00348	41 b9 03 00 00
	00		 mov	 r9d, 3
  0034e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169250
  00355	ba 58 00 00 00	 mov	 edx, 88			; 00000058H
  0035a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169251
  00361	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 89   :             fclose( oma );

  00367	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR oma$[rsp]
  0036f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fclose

; 90   :             return -1;

  00375	b8 ff ff ff ff	 mov	 eax, -1
  0037a	e9 85 0f 00 00	 jmp	 $LN1@read_omade
$LN17@read_omade:

; 91   :         }
; 92   :     }

  0037f	e9 60 fe ff ff	 jmp	 $LN5@read_omade
$LN6@read_omade:

; 93   : 
; 94   :     /* Check for EOF or I/O error */
; 95   :     if (ferror( oma ))

  00384	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR oma$[rsp]
  0038c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ferror
  00392	85 c0		 test	 eax, eax
  00394	0f 84 2c 01 00
	00		 je	 $LN19@read_omade

; 96   :     {
; 97   :         // "%1d:%04X Tape file %s, type %s: error in function %s: %s"
; 98   :         WRMSG( HHC00205, "E", LCSS_DEVNUM, dev->filename, "OMA", "fgets()", strerror( errno ));

  0039a	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  003a3	74 15		 je	 SHORT $LN51@read_omade
  003a5	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003ad	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  003b1	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv204[rsp], eax
  003b8	eb 0b		 jmp	 SHORT $LN52@read_omade
$LN51@read_omade:
  003ba	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv204[rsp], 0
$LN52@read_omade:
  003c5	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  003ce	74 17		 je	 SHORT $LN53@read_omade
  003d0	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003d8	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  003dc	d1 f8		 sar	 eax, 1
  003de	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv210[rsp], eax
  003e5	eb 0b		 jmp	 SHORT $LN54@read_omade
$LN53@read_omade:
  003e7	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv210[rsp], 0
$LN54@read_omade:
  003f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  003f8	8b 08		 mov	 ecx, DWORD PTR [rax]
  003fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00400	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv193[rsp], rax
  00408	48 8b 8c 24 30
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00410	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00417	48 89 8c 24 40
	01 00 00	 mov	 QWORD PTR tv199[rsp], rcx
  0041f	b9 01 00 00 00	 mov	 ecx, 1
  00424	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0042a	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR tv193[rsp]
  00432	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00437	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169253
  0043e	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00443	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169254
  0044a	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0044f	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR tv199[rsp]
  00457	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0045c	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR tv204[rsp]
  00463	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00467	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR tv210[rsp]
  0046e	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00472	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169255
  00479	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0047e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169256
  00485	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0048a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0048f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00495	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169257
  0049c	ba 62 00 00 00	 mov	 edx, 98			; 00000062H
  004a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169258
  004a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 99   :         fclose( oma );

  004ae	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR oma$[rsp]
  004b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fclose

; 100  :         return -1;

  004bc	b8 ff ff ff ff	 mov	 eax, -1
  004c1	e9 3e 0e 00 00	 jmp	 $LN1@read_omade
$LN19@read_omade:

; 101  :     }
; 102  : 
; 103  :     /* Check for empty file or file with only @TDF statement */
; 104  :     if (filecount < 2)

  004c6	0f b7 44 24 70	 movzx	 eax, WORD PTR filecount$[rsp]
  004cb	83 f8 02	 cmp	 eax, 2
  004ce	0f 8d fc 00 00
	00		 jge	 $LN20@read_omade

; 105  :     {
; 106  :         // "%1d:%04X Tape file %s, type %s: not a valid @TDF file"
; 107  :         WRMSG( HHC00206, "E", LCSS_DEVNUM, dev->filename, "OMA" );

  004d4	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  004dd	74 15		 je	 SHORT $LN55@read_omade
  004df	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004e7	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  004eb	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv230[rsp], eax
  004f2	eb 0b		 jmp	 SHORT $LN56@read_omade
$LN55@read_omade:
  004f4	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv230[rsp], 0
$LN56@read_omade:
  004ff	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00508	74 17		 je	 SHORT $LN57@read_omade
  0050a	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00512	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00516	d1 f8		 sar	 eax, 1
  00518	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv236[rsp], eax
  0051f	eb 0b		 jmp	 SHORT $LN58@read_omade
$LN57@read_omade:
  00521	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv236[rsp], 0
$LN58@read_omade:
  0052c	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00534	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0053a	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv225[rsp], rax
  00542	b9 01 00 00 00	 mov	 ecx, 1
  00547	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0054d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169260
  00554	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00559	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR tv225[rsp]
  00561	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00566	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR tv230[rsp]
  0056d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00571	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR tv236[rsp]
  00578	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0057c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169261
  00583	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00588	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169262
  0058f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00594	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00599	41 b9 03 00 00
	00		 mov	 r9d, 3
  0059f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169263
  005a6	ba 6b 00 00 00	 mov	 edx, 107		; 0000006bH
  005ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169264
  005b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 108  :         fclose( oma );

  005b8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR oma$[rsp]
  005c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fclose

; 109  :         return -1;

  005c6	b8 ff ff ff ff	 mov	 eax, -1
  005cb	e9 34 0d 00 00	 jmp	 $LN1@read_omade
$LN20@read_omade:

; 110  :     }
; 111  : 
; 112  :     /* Obtain storage for the tape descriptor array */
; 113  :     if (!(tdftab = (OMATAPE_DESC*) malloc( filecount * sizeof( OMATAPE_DESC ))))

  005d0	0f b7 44 24 70	 movzx	 eax, WORD PTR filecount$[rsp]
  005d5	48 69 c0 08 01
	00 00		 imul	 rax, rax, 264		; 00000108H
  005dc	48 8b c8	 mov	 rcx, rax
  005df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  005e5	48 89 44 24 78	 mov	 QWORD PTR tdftab$[rsp], rax
  005ea	48 83 7c 24 78
	00		 cmp	 QWORD PTR tdftab$[rsp], 0
  005f0	0f 85 1e 01 00
	00		 jne	 $LN21@read_omade

; 114  :     {
; 115  :         // "%1d:%04X Tape file %s, type %s: error in function %s: %s"
; 116  :         WRMSG( HHC00205, "E", LCSS_DEVNUM, dev->filename, "OMA", "malloc()", strerror( errno ));

  005f6	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  005ff	74 15		 je	 SHORT $LN59@read_omade
  00601	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00609	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0060d	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv267[rsp], eax
  00614	eb 0b		 jmp	 SHORT $LN60@read_omade
$LN59@read_omade:
  00616	c7 84 24 d0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv267[rsp], 0
$LN60@read_omade:
  00621	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0062a	74 17		 je	 SHORT $LN61@read_omade
  0062c	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00634	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00638	d1 f8		 sar	 eax, 1
  0063a	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv273[rsp], eax
  00641	eb 0b		 jmp	 SHORT $LN62@read_omade
$LN61@read_omade:
  00643	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv273[rsp], 0
$LN62@read_omade:
  0064e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00654	8b 08		 mov	 ecx, DWORD PTR [rax]
  00656	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0065c	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv256[rsp], rax
  00664	48 8b 8c 24 30
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0066c	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00673	48 89 8c 24 58
	01 00 00	 mov	 QWORD PTR tv262[rsp], rcx
  0067b	b9 01 00 00 00	 mov	 ecx, 1
  00680	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00686	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR tv256[rsp]
  0068e	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00693	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169266
  0069a	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0069f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169267
  006a6	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  006ab	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tv262[rsp]
  006b3	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  006b8	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR tv267[rsp]
  006bf	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  006c3	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR tv273[rsp]
  006ca	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  006ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169268
  006d5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169269
  006e1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006e6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006eb	41 b9 03 00 00
	00		 mov	 r9d, 3
  006f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169270
  006f8	ba 74 00 00 00	 mov	 edx, 116		; 00000074H
  006fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169271
  00704	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 117  :         return -1;

  0070a	b8 ff ff ff ff	 mov	 eax, -1
  0070f	e9 f0 0b 00 00	 jmp	 $LN1@read_omade
$LN21@read_omade:

; 118  :     }
; 119  : 
; 120  :     /* Rewind OMA file back to the beginning */
; 121  :     rewind( oma );

  00714	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR oma$[rsp]
  0071c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rewind

; 122  : 
; 123  :     /* Now read and actually process each statement in the file... */
; 124  :     for (filecount = 0, stmt = 1; fgets( str, sizeof( str ), oma ); stmt++)

  00722	33 c0		 xor	 eax, eax
  00724	66 89 44 24 70	 mov	 WORD PTR filecount$[rsp], ax
  00729	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR stmt$[rsp], 1
  00731	eb 0a		 jmp	 SHORT $LN10@read_omade
$LN8@read_omade:
  00733	8b 44 24 74	 mov	 eax, DWORD PTR stmt$[rsp]
  00737	ff c0		 inc	 eax
  00739	89 44 24 74	 mov	 DWORD PTR stmt$[rsp], eax
$LN10@read_omade:
  0073d	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR oma$[rsp]
  00745	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  0074a	48 8d 8c 24 f0
	02 00 00	 lea	 rcx, QWORD PTR str$[rsp]
  00752	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fgets
  00758	48 85 c0	 test	 rax, rax
  0075b	0f 84 f9 09 00
	00		 je	 $LN9@read_omade

; 125  :     {
; 126  :         /* (skip @TDF statement) */
; 127  :         if (stmt == 1)

  00761	83 7c 24 74 01	 cmp	 DWORD PTR stmt$[rsp], 1
  00766	75 02		 jne	 SHORT $LN22@read_omade

; 128  :             continue;

  00768	eb c9		 jmp	 SHORT $LN8@read_omade
$LN22@read_omade:

; 129  : 
; 130  :         /* (remove trailing whitespace) */
; 131  :         RTRIM( str );

  0076a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169273
  00771	48 8d 8c 24 f0
	02 00 00	 lea	 rcx, QWORD PTR str$[rsp]
  00779	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rtrim

; 132  : 
; 133  :         /* Clear the tape descriptor array entry */
; 134  :         memset( &(tdftab[ filecount ]), 0, sizeof( OMATAPE_DESC ));

  0077f	0f b7 44 24 70	 movzx	 eax, WORD PTR filecount$[rsp]
  00784	48 69 c0 08 01
	00 00		 imul	 rax, rax, 264		; 00000108H
  0078b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tdftab$[rsp]
  00790	48 03 c8	 add	 rcx, rax
  00793	48 8b c1	 mov	 rax, rcx
  00796	48 8b f8	 mov	 rdi, rax
  00799	33 c0		 xor	 eax, eax
  0079b	b9 08 01 00 00	 mov	 ecx, 264		; 00000108H
  007a0	f3 aa		 rep stosb

; 135  : 
; 136  :         /* Exit if EOT record encountered */
; 137  :         if (str_caseless_eq( str, "EOT" ))

  007a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169275
  007a9	48 8d 8c 24 f0
	02 00 00	 lea	 rcx, QWORD PTR str$[rsp]
  007b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  007b7	85 c0		 test	 eax, eax
  007b9	75 05		 jne	 SHORT $LN23@read_omade

; 138  :             break;

  007bb	e9 9a 09 00 00	 jmp	 $LN9@read_omade
$LN23@read_omade:

; 139  : 
; 140  :         /* TM tapemark record? */
; 141  :         if (str_caseless_eq( str, "TM" ))

  007c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169277
  007c7	48 8d 8c 24 f0
	02 00 00	 lea	 rcx, QWORD PTR str$[rsp]
  007cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  007d5	85 c0		 test	 eax, eax
  007d7	75 2b		 jne	 SHORT $LN24@read_omade

; 142  :         {
; 143  :             tdftab[ filecount++ ].format = 'X';

  007d9	0f b7 44 24 70	 movzx	 eax, WORD PTR filecount$[rsp]
  007de	48 69 c0 08 01
	00 00		 imul	 rax, rax, 264		; 00000108H
  007e5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tdftab$[rsp]
  007ea	c6 84 01 05 01
	00 00 58	 mov	 BYTE PTR [rcx+rax+261], 88 ; 00000058H
  007f2	0f b7 44 24 70	 movzx	 eax, WORD PTR filecount$[rsp]
  007f7	66 ff c0	 inc	 ax
  007fa	66 89 44 24 70	 mov	 WORD PTR filecount$[rsp], ax

; 144  :             continue;

  007ff	e9 2f ff ff ff	 jmp	 $LN8@read_omade
$LN24@read_omade:

; 145  :         }
; 146  : 
; 147  :         /* Parse the TDF record */
; 148  :         parse_args( str, 4, argv, &argc );

  00804	4c 8d 8c 24 18
	01 00 00	 lea	 r9, QWORD PTR argc$[rsp]
  0080c	4c 8d 84 24 98
	01 00 00	 lea	 r8, QWORD PTR argv$[rsp]
  00814	ba 04 00 00 00	 mov	 edx, 4
  00819	48 8d 8c 24 f0
	02 00 00	 lea	 rcx, QWORD PTR str$[rsp]
  00821	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_parse_args

; 149  : 
; 150  :         tdffilenm = argv[0];            /* -> Filename in TDF record */

  00827	b8 08 00 00 00	 mov	 eax, 8
  0082c	48 6b c0 00	 imul	 rax, rax, 0
  00830	48 8b 84 04 98
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp+rax]
  00838	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tdffilenm$[rsp], rax

; 151  :         tdfformat = argv[1];            /* -> Format in TDF record   */

  00840	b8 08 00 00 00	 mov	 eax, 8
  00845	48 6b c0 01	 imul	 rax, rax, 1
  00849	48 8b 84 04 98
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp+rax]
  00851	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tdfformat$[rsp], rax

; 152  :         tdfreckwd = argv[2];            /* -> Keyword in TDF record  */

  00859	b8 08 00 00 00	 mov	 eax, 8
  0085e	48 6b c0 02	 imul	 rax, rax, 2
  00862	48 8b 84 04 98
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp+rax]
  0086a	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tdfreckwd$[rsp], rax

; 153  :         tdfblklen = argv[3];            /* -> Length in TDF record   */

  00872	b8 08 00 00 00	 mov	 eax, 8
  00877	48 6b c0 03	 imul	 rax, rax, 3
  0087b	48 8b 84 04 98
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp+rax]
  00883	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tdfblklen$[rsp], rax

; 154  : 
; 155  :         /* Check for missing fields */
; 156  :         if (0
; 157  :             || !tdffilenm
; 158  :             || !tdfformat

  0088b	33 c0		 xor	 eax, eax
  0088d	85 c0		 test	 eax, eax
  0088f	75 1a		 jne	 SHORT $LN26@read_omade
  00891	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR tdffilenm$[rsp], 0
  0089a	74 0f		 je	 SHORT $LN26@read_omade
  0089c	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR tdfformat$[rsp], 0
  008a5	0f 85 fd 00 00
	00		 jne	 $LN25@read_omade
$LN26@read_omade:

; 159  :         )
; 160  :         {
; 161  :             // "%1d:%04X Tape file %s, type %s: line %d: %s"
; 162  :             WRMSG( HHC00207, "E", LCSS_DEVNUM, dev->filename, "OMA", stmt, "filename or format missing" );

  008ab	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  008b4	74 15		 je	 SHORT $LN63@read_omade
  008b6	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  008be	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  008c2	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv369[rsp], eax
  008c9	eb 0b		 jmp	 SHORT $LN64@read_omade
$LN63@read_omade:
  008cb	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv369[rsp], 0
$LN64@read_omade:
  008d6	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  008df	74 17		 je	 SHORT $LN65@read_omade
  008e1	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  008e9	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  008ed	d1 f8		 sar	 eax, 1
  008ef	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv375[rsp], eax
  008f6	eb 0b		 jmp	 SHORT $LN66@read_omade
$LN65@read_omade:
  008f8	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv375[rsp], 0
$LN66@read_omade:
  00903	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0090b	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00911	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv364[rsp], rax
  00919	b9 01 00 00 00	 mov	 ecx, 1
  0091e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00924	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169280
  0092b	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00930	8b 4c 24 74	 mov	 ecx, DWORD PTR stmt$[rsp]
  00934	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00938	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169281
  0093f	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00944	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR tv364[rsp]
  0094c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00951	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR tv369[rsp]
  00958	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0095c	8b 8c 24 dc 00
	00 00		 mov	 ecx, DWORD PTR tv375[rsp]
  00963	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00967	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169282
  0096e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00973	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169283
  0097a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0097f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00984	41 b9 03 00 00
	00		 mov	 r9d, 3
  0098a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169284
  00991	ba a2 00 00 00	 mov	 edx, 162		; 000000a2H
  00996	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169285
  0099d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 163  :             goto omadesc_error;

  009a3	e9 3e 09 00 00	 jmp	 $omadesc_error$88
$LN25@read_omade:

; 164  :         }
; 165  : 
; 166  :         /* Check that the file name is not too long */
; 167  :         if (pathlen + 1 + strlen( tdffilenm ) + 1 >= sizeof( tdftab[ filecount ].filename ))

  009a8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tdffilenm$[rsp]
  009b0	e8 00 00 00 00	 call	 strlen
  009b5	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pathlen$[rsp]
  009bd	48 8d 44 01 02	 lea	 rax, QWORD PTR [rcx+rax+2]
  009c2	48 3d 05 01 00
	00		 cmp	 rax, 261		; 00000105H
  009c8	0f 82 5b 01 00
	00		 jb	 $LN27@read_omade

; 168  :         {
; 169  :             if (!strchr( tdffilenm, SPACE ))

  009ce	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  009d3	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tdffilenm$[rsp]
  009db	e8 00 00 00 00	 call	 strchr
  009e0	48 85 c0	 test	 rax, rax
  009e3	75 24		 jne	 SHORT $LN28@read_omade

; 170  :                 MSGBUF( buf, "filename %s too long",   tdffilenm );

  009e5	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR tdffilenm$[rsp]
  009ed	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169289
  009f4	ba 24 01 00 00	 mov	 edx, 292		; 00000124H
  009f9	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00a01	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00a07	eb 22		 jmp	 SHORT $LN29@read_omade
$LN28@read_omade:

; 171  :             else
; 172  :                 MSGBUF( buf, "filename '%s' too long", tdffilenm );

  00a09	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR tdffilenm$[rsp]
  00a11	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169290
  00a18	ba 24 01 00 00	 mov	 edx, 292		; 00000124H
  00a1d	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00a25	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN29@read_omade:

; 173  : 
; 174  :             // "%1d:%04X Tape file %s, type %s: line %d: %s"
; 175  :             WRMSG( HHC00207, "E", LCSS_DEVNUM, dev->filename, "OMA", stmt, buf );

  00a2b	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00a34	74 15		 je	 SHORT $LN67@read_omade
  00a36	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a3e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00a42	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv412[rsp], eax
  00a49	eb 0b		 jmp	 SHORT $LN68@read_omade
$LN67@read_omade:
  00a4b	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv412[rsp], 0
$LN68@read_omade:
  00a56	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00a5f	74 17		 je	 SHORT $LN69@read_omade
  00a61	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a69	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00a6d	d1 f8		 sar	 eax, 1
  00a6f	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv418[rsp], eax
  00a76	eb 0b		 jmp	 SHORT $LN70@read_omade
$LN69@read_omade:
  00a78	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv418[rsp], 0
$LN70@read_omade:
  00a83	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a8b	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00a91	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv407[rsp], rax
  00a99	b9 01 00 00 00	 mov	 ecx, 1
  00a9e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00aa4	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00aac	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00ab1	8b 4c 24 74	 mov	 ecx, DWORD PTR stmt$[rsp]
  00ab5	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00ab9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169291
  00ac0	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00ac5	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR tv407[rsp]
  00acd	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00ad2	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR tv412[rsp]
  00ad9	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00add	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR tv418[rsp]
  00ae4	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00ae8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169292
  00aef	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00af4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169293
  00afb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b00	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b05	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b0b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169294
  00b12	ba af 00 00 00	 mov	 edx, 175		; 000000afH
  00b17	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169295
  00b1e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 176  :             goto omadesc_error;

  00b24	e9 bd 07 00 00	 jmp	 $omadesc_error$88
$LN27@read_omade:

; 177  :         }
; 178  : 
; 179  :         /* Convert the file name to Unix format */
; 180  :         for (i=0; i < (int) strlen( tdffilenm ); i++)

  00b29	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  00b34	eb 10		 jmp	 SHORT $LN13@read_omade
$LN11@read_omade:
  00b36	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  00b3d	ff c0		 inc	 eax
  00b3f	89 84 24 80 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN13@read_omade:
  00b46	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tdffilenm$[rsp]
  00b4e	e8 00 00 00 00	 call	 strlen
  00b53	39 84 24 80 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  00b5a	7d 2f		 jge	 SHORT $LN12@read_omade

; 181  :         {
; 182  :             if (tdffilenm[i] == '\\')

  00b5c	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00b64	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tdffilenm$[rsp]
  00b6c	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00b70	83 f8 5c	 cmp	 eax, 92			; 0000005cH
  00b73	75 14		 jne	 SHORT $LN30@read_omade

; 183  :                 tdffilenm[i] = '/';

  00b75	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00b7d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tdffilenm$[rsp]
  00b85	c6 04 01 2f	 mov	 BYTE PTR [rcx+rax], 47	; 0000002fH
$LN30@read_omade:

; 184  :         }

  00b89	eb ab		 jmp	 SHORT $LN11@read_omade
$LN12@read_omade:

; 185  : 
; 186  :         /* Prefix the file name with the base path name
; 187  :            ONLY if the filename is NOT an absolute path.
; 188  :         */
; 189  : #if defined(_MSVC_)
; 190  :         if (tdffilenm[1] != ':')   // (not Windows absolute path)

  00b8b	b8 01 00 00 00	 mov	 eax, 1
  00b90	48 6b c0 01	 imul	 rax, rax, 1
  00b94	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tdffilenm$[rsp]
  00b9c	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00ba0	83 f8 3a	 cmp	 eax, 58			; 0000003aH
  00ba3	0f 84 ae 00 00
	00		 je	 $LN31@read_omade

; 191  : #else
; 192  :         if (tdffilenm[0] != '/')   // (not Unix absolute path)
; 193  : #endif
; 194  :         {
; 195  :             /* (use memcpy since "pathlen" has already been checked above) */
; 196  :             memcpy( tdftab[ filecount ].filename, dev->filename, pathlen );

  00ba9	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00bb1	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00bb7	0f b7 4c 24 70	 movzx	 ecx, WORD PTR filecount$[rsp]
  00bbc	48 69 c9 08 01
	00 00		 imul	 rcx, rcx, 264		; 00000108H
  00bc3	48 8b 54 24 78	 mov	 rdx, QWORD PTR tdftab$[rsp]
  00bc8	48 03 d1	 add	 rdx, rcx
  00bcb	48 8b ca	 mov	 rcx, rdx
  00bce	48 8b f9	 mov	 rdi, rcx
  00bd1	48 8b f0	 mov	 rsi, rax
  00bd4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pathlen$[rsp]
  00bdc	f3 a4		 rep movsb

; 197  :             tdftab[ filecount ].filename[ pathlen ] = 0;

  00bde	0f b7 44 24 70	 movzx	 eax, WORD PTR filecount$[rsp]
  00be3	48 69 c0 08 01
	00 00		 imul	 rax, rax, 264		; 00000108H
  00bea	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tdftab$[rsp]
  00bef	48 03 c8	 add	 rcx, rax
  00bf2	48 8b c1	 mov	 rax, rcx
  00bf5	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pathlen$[rsp]
  00bfd	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0

; 198  : 
; 199  :             /* Append path separator only if needed */
; 200  :             if (tdftab[ filecount ].filename[ pathlen - 1 ] != '/')

  00c01	0f b7 44 24 70	 movzx	 eax, WORD PTR filecount$[rsp]
  00c06	48 69 c0 08 01
	00 00		 imul	 rax, rax, 264		; 00000108H
  00c0d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tdftab$[rsp]
  00c12	48 03 c8	 add	 rcx, rax
  00c15	48 8b c1	 mov	 rax, rcx
  00c18	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pathlen$[rsp]
  00c20	0f be 44 08 ff	 movsx	 eax, BYTE PTR [rax+rcx-1]
  00c25	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00c28	74 2d		 je	 SHORT $LN32@read_omade

; 201  :                 STRLCAT( tdftab[ filecount ].filename, "/" );

  00c2a	0f b7 44 24 70	 movzx	 eax, WORD PTR filecount$[rsp]
  00c2f	48 69 c0 08 01
	00 00		 imul	 rax, rax, 264		; 00000108H
  00c36	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tdftab$[rsp]
  00c3b	48 03 c8	 add	 rcx, rax
  00c3e	48 8b c1	 mov	 rax, rcx
  00c41	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00c47	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169299
  00c4e	48 8b c8	 mov	 rcx, rax
  00c51	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN32@read_omade:
$LN31@read_omade:

; 202  :         }
; 203  : 
; 204  :         /* Save the file name in the tape descriptor array */
; 205  :         STRLCAT( tdftab[ filecount ].filename, tdffilenm );

  00c57	0f b7 44 24 70	 movzx	 eax, WORD PTR filecount$[rsp]
  00c5c	48 69 c0 08 01
	00 00		 imul	 rax, rax, 264		; 00000108H
  00c63	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tdftab$[rsp]
  00c68	48 03 c8	 add	 rcx, rax
  00c6b	48 8b c1	 mov	 rax, rcx
  00c6e	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00c74	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tdffilenm$[rsp]
  00c7c	48 8b c8	 mov	 rcx, rax
  00c7f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 206  : 
; 207  :         /* Check for valid file format code */
; 208  :         if (str_caseless_eq( tdfformat, "HEADERS" ))

  00c85	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169301
  00c8c	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tdfformat$[rsp]
  00c94	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00c9a	85 c0		 test	 eax, eax
  00c9c	75 2b		 jne	 SHORT $LN33@read_omade

; 209  :         {
; 210  :             tdftab[ filecount++ ].format = 'H';

  00c9e	0f b7 44 24 70	 movzx	 eax, WORD PTR filecount$[rsp]
  00ca3	48 69 c0 08 01
	00 00		 imul	 rax, rax, 264		; 00000108H
  00caa	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tdftab$[rsp]
  00caf	c6 84 01 05 01
	00 00 48	 mov	 BYTE PTR [rcx+rax+261], 72 ; 00000048H
  00cb7	0f b7 44 24 70	 movzx	 eax, WORD PTR filecount$[rsp]
  00cbc	66 ff c0	 inc	 ax
  00cbf	66 89 44 24 70	 mov	 WORD PTR filecount$[rsp], ax

; 211  :             continue;

  00cc4	e9 6a fa ff ff	 jmp	 $LN8@read_omade
$LN33@read_omade:

; 212  :         }
; 213  : 
; 214  :         if (str_caseless_eq( tdfformat, "TEXT" ))

  00cc9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169303
  00cd0	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tdfformat$[rsp]
  00cd8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00cde	85 c0		 test	 eax, eax
  00ce0	75 2b		 jne	 SHORT $LN34@read_omade

; 215  :         {
; 216  :             tdftab[ filecount++ ].format = 'T';

  00ce2	0f b7 44 24 70	 movzx	 eax, WORD PTR filecount$[rsp]
  00ce7	48 69 c0 08 01
	00 00		 imul	 rax, rax, 264		; 00000108H
  00cee	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tdftab$[rsp]
  00cf3	c6 84 01 05 01
	00 00 54	 mov	 BYTE PTR [rcx+rax+261], 84 ; 00000054H
  00cfb	0f b7 44 24 70	 movzx	 eax, WORD PTR filecount$[rsp]
  00d00	66 ff c0	 inc	 ax
  00d03	66 89 44 24 70	 mov	 WORD PTR filecount$[rsp], ax

; 217  :             continue;

  00d08	e9 26 fa ff ff	 jmp	 $LN8@read_omade
$LN34@read_omade:

; 218  :         }
; 219  : 
; 220  :         if /* (treat UNDEFINED same as FIXED) */
; 221  :         (0
; 222  :             || str_caseless_eq( tdfformat, "FIXED"     )
; 223  :             || str_caseless_eq( tdfformat, "UNDEFINED" )

  00d0d	33 c0		 xor	 eax, eax
  00d0f	85 c0		 test	 eax, eax
  00d11	75 36		 jne	 SHORT $LN36@read_omade
  00d13	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169306
  00d1a	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tdfformat$[rsp]
  00d22	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00d28	85 c0		 test	 eax, eax
  00d2a	74 1d		 je	 SHORT $LN36@read_omade
  00d2c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169307
  00d33	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tdfformat$[rsp]
  00d3b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00d41	85 c0		 test	 eax, eax
  00d43	0f 85 ec 02 00
	00		 jne	 $LN35@read_omade
$LN36@read_omade:

; 224  :         )
; 225  :         {
; 226  :             /* Check for RECSIZE keyword */
; 227  :             if (0
; 228  :                 || !tdfreckwd
; 229  :                 || str_caseless_ne( tdfreckwd, "RECSIZE" )

  00d49	33 c0		 xor	 eax, eax
  00d4b	85 c0		 test	 eax, eax
  00d4d	75 28		 jne	 SHORT $LN38@read_omade
  00d4f	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR tdfreckwd$[rsp], 0
  00d58	74 1d		 je	 SHORT $LN38@read_omade
  00d5a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169310
  00d61	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tdfreckwd$[rsp]
  00d69	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00d6f	85 c0		 test	 eax, eax
  00d71	0f 84 fd 00 00
	00		 je	 $LN37@read_omade
$LN38@read_omade:

; 230  :             )
; 231  :             {
; 232  :                 // "%1d:%04X Tape file %s, type %s: line %d: %s"
; 233  :                 WRMSG( HHC00207, "E", LCSS_DEVNUM, dev->filename, "OMA", stmt, "keyword RECSIZE missing" );

  00d77	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00d80	74 15		 je	 SHORT $LN71@read_omade
  00d82	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00d8a	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00d8e	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv526[rsp], eax
  00d95	eb 0b		 jmp	 SHORT $LN72@read_omade
$LN71@read_omade:
  00d97	c7 84 24 e8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv526[rsp], 0
$LN72@read_omade:
  00da2	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00dab	74 17		 je	 SHORT $LN73@read_omade
  00dad	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00db5	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00db9	d1 f8		 sar	 eax, 1
  00dbb	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv532[rsp], eax
  00dc2	eb 0b		 jmp	 SHORT $LN74@read_omade
$LN73@read_omade:
  00dc4	c7 84 24 ec 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv532[rsp], 0
$LN74@read_omade:
  00dcf	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00dd7	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00ddd	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR tv521[rsp], rax
  00de5	b9 01 00 00 00	 mov	 ecx, 1
  00dea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00df0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169311
  00df7	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00dfc	8b 4c 24 74	 mov	 ecx, DWORD PTR stmt$[rsp]
  00e00	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00e04	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169312
  00e0b	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00e10	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR tv521[rsp]
  00e18	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00e1d	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR tv526[rsp]
  00e24	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00e28	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR tv532[rsp]
  00e2f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00e33	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169313
  00e3a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00e3f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169314
  00e46	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00e4b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e50	41 b9 03 00 00
	00		 mov	 r9d, 3
  00e56	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169315
  00e5d	ba e9 00 00 00	 mov	 edx, 233		; 000000e9H
  00e62	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169316
  00e69	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 234  :                 goto omadesc_error;

  00e6f	e9 72 04 00 00	 jmp	 $omadesc_error$88
$LN37@read_omade:

; 235  :             }
; 236  : 
; 237  :             /* Check for valid fixed block length */
; 238  :             if (0
; 239  :                 || !tdfblklen
; 240  :                 || sscanf( tdfblklen, "%u%c", &blklen, &c ) != 1
; 241  :                 || blklen < 1
; 242  :                 || blklen > USHRT_MAX  // (max U16)

  00e74	33 c0		 xor	 eax, eax
  00e76	85 c0		 test	 eax, eax
  00e78	75 4f		 jne	 SHORT $LN40@read_omade
  00e7a	48 83 bc 24 08
	01 00 00 00	 cmp	 QWORD PTR tdfblklen$[rsp], 0
  00e83	74 44		 je	 SHORT $LN40@read_omade
  00e85	4c 8d 8c 24 a0
	00 00 00	 lea	 r9, QWORD PTR c$[rsp]
  00e8d	4c 8d 84 24 a4
	00 00 00	 lea	 r8, QWORD PTR blklen$[rsp]
  00e95	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169319
  00e9c	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tdfblklen$[rsp]
  00ea4	e8 00 00 00 00	 call	 sscanf
  00ea9	83 f8 01	 cmp	 eax, 1
  00eac	75 1b		 jne	 SHORT $LN40@read_omade
  00eae	83 bc 24 a4 00
	00 00 01	 cmp	 DWORD PTR blklen$[rsp], 1
  00eb6	72 11		 jb	 SHORT $LN40@read_omade
  00eb8	81 bc 24 a4 00
	00 00 ff ff 00
	00		 cmp	 DWORD PTR blklen$[rsp], 65535 ; 0000ffffH
  00ec3	0f 86 20 01 00
	00		 jbe	 $LN39@read_omade
$LN40@read_omade:

; 243  :             )
; 244  :             {
; 245  :                 MSGBUF( buf, "invalid record size %s", tdfblklen );

  00ec9	4c 8b 8c 24 08
	01 00 00	 mov	 r9, QWORD PTR tdfblklen$[rsp]
  00ed1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169320
  00ed8	ba 24 01 00 00	 mov	 edx, 292		; 00000124H
  00edd	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00ee5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 246  : 
; 247  :                 // "%1d:%04X Tape file %s, type %s: line %d: %s"
; 248  :                 WRMSG( HHC00207, "E", LCSS_DEVNUM, dev->filename, "OMA", stmt, buf );

  00eeb	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00ef4	74 15		 je	 SHORT $LN75@read_omade
  00ef6	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00efe	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00f02	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv565[rsp], eax
  00f09	eb 0b		 jmp	 SHORT $LN76@read_omade
$LN75@read_omade:
  00f0b	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv565[rsp], 0
$LN76@read_omade:
  00f16	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00f1f	74 17		 je	 SHORT $LN77@read_omade
  00f21	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f29	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00f2d	d1 f8		 sar	 eax, 1
  00f2f	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv571[rsp], eax
  00f36	eb 0b		 jmp	 SHORT $LN78@read_omade
$LN77@read_omade:
  00f38	c7 84 24 f4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv571[rsp], 0
$LN78@read_omade:
  00f43	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f4b	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00f51	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv560[rsp], rax
  00f59	b9 01 00 00 00	 mov	 ecx, 1
  00f5e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00f64	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00f6c	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00f71	8b 4c 24 74	 mov	 ecx, DWORD PTR stmt$[rsp]
  00f75	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00f79	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169321
  00f80	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00f85	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR tv560[rsp]
  00f8d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00f92	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR tv565[rsp]
  00f99	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00f9d	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR tv571[rsp]
  00fa4	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00fa8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169322
  00faf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00fb4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169323
  00fbb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00fc0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00fc5	41 b9 03 00 00
	00		 mov	 r9d, 3
  00fcb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169324
  00fd2	ba f8 00 00 00	 mov	 edx, 248		; 000000f8H
  00fd7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169325
  00fde	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 249  :                 goto omadesc_error;

  00fe4	e9 fd 02 00 00	 jmp	 $omadesc_error$88
$LN39@read_omade:

; 250  :             }
; 251  : 
; 252  :             /* Set format and block length in descriptor array */
; 253  :             tdftab[ filecount ].format = 'F';

  00fe9	0f b7 44 24 70	 movzx	 eax, WORD PTR filecount$[rsp]
  00fee	48 69 c0 08 01
	00 00		 imul	 rax, rax, 264		; 00000108H
  00ff5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tdftab$[rsp]
  00ffa	c6 84 01 05 01
	00 00 46	 mov	 BYTE PTR [rcx+rax+261], 70 ; 00000046H

; 254  :             tdftab[ filecount ].blklen = (U16) blklen;

  01002	0f b7 44 24 70	 movzx	 eax, WORD PTR filecount$[rsp]
  01007	48 69 c0 08 01
	00 00		 imul	 rax, rax, 264		; 00000108H
  0100e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tdftab$[rsp]
  01013	0f b7 94 24 a4
	00 00 00	 movzx	 edx, WORD PTR blklen$[rsp]
  0101b	66 89 94 01 06
	01 00 00	 mov	 WORD PTR [rcx+rax+262], dx

; 255  :             filecount++;

  01023	0f b7 44 24 70	 movzx	 eax, WORD PTR filecount$[rsp]
  01028	66 ff c0	 inc	 ax
  0102b	66 89 44 24 70	 mov	 WORD PTR filecount$[rsp], ax

; 256  :             continue;

  01030	e9 fe f6 ff ff	 jmp	 $LN8@read_omade
$LN35@read_omade:

; 257  :         }
; 258  : 
; 259  :         /* Not a TDF format that we recognize/support */
; 260  :         MSGBUF( buf, "invalid record format '%s'", tdfformat );

  01035	4c 8b 8c 24 a8
	00 00 00	 mov	 r9, QWORD PTR tdfformat$[rsp]
  0103d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169326
  01044	ba 24 01 00 00	 mov	 edx, 292		; 00000124H
  01049	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  01051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 261  : 
; 262  :         // "%1d:%04X Tape file %s, type %s: line %d: %s"
; 263  :         WRMSG( HHC00207, "E", LCSS_DEVNUM, dev->filename, "OMA", stmt, buf );

  01057	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01060	74 15		 je	 SHORT $LN79@read_omade
  01062	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0106a	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0106e	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv603[rsp], eax
  01075	eb 0b		 jmp	 SHORT $LN80@read_omade
$LN79@read_omade:
  01077	c7 84 24 f8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv603[rsp], 0
$LN80@read_omade:
  01082	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0108b	74 17		 je	 SHORT $LN81@read_omade
  0108d	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01095	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01099	d1 f8		 sar	 eax, 1
  0109b	89 84 24 fc 00
	00 00		 mov	 DWORD PTR tv641[rsp], eax
  010a2	eb 0b		 jmp	 SHORT $LN82@read_omade
$LN81@read_omade:
  010a4	c7 84 24 fc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv641[rsp], 0
$LN82@read_omade:
  010af	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  010b7	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  010bd	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR tv598[rsp], rax
  010c5	b9 01 00 00 00	 mov	 ecx, 1
  010ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  010d0	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  010d8	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  010dd	8b 4c 24 74	 mov	 ecx, DWORD PTR stmt$[rsp]
  010e1	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  010e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169327
  010ec	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  010f1	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR tv598[rsp]
  010f9	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  010fe	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR tv603[rsp]
  01105	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01109	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR tv641[rsp]
  01110	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01114	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169328
  0111b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01120	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169329
  01127	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0112c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01131	41 b9 03 00 00
	00		 mov	 r9d, 3
  01137	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169330
  0113e	ba 07 01 00 00	 mov	 edx, 263		; 00000107H
  01143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169331
  0114a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 264  :         goto omadesc_error;

  01150	e9 91 01 00 00	 jmp	 $omadesc_error$88

; 265  :     }

  01155	e9 d9 f5 ff ff	 jmp	 $LN8@read_omade
$LN9@read_omade:

; 266  :     /* end for( fgets( str, oma ) ) */
; 267  : 
; 268  :     /* Check for EOF or I/O error */
; 269  :     if (ferror( oma ))

  0115a	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR oma$[rsp]
  01162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ferror
  01168	85 c0		 test	 eax, eax
  0116a	0f 84 16 01 00
	00		 je	 $LN41@read_omade

; 270  :     {
; 271  :         // "%1d:%04X Tape file %s, type %s: error in function %s: %s"
; 272  :         WRMSG( HHC00205, "E", LCSS_DEVNUM, dev->filename, "OMA", "fgets()", strerror( errno ));

  01170	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01179	74 15		 je	 SHORT $LN83@read_omade
  0117b	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01183	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01187	89 84 24 00 01
	00 00		 mov	 DWORD PTR tv666[rsp], eax
  0118e	eb 0b		 jmp	 SHORT $LN84@read_omade
$LN83@read_omade:
  01190	c7 84 24 00 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv666[rsp], 0
$LN84@read_omade:
  0119b	48 83 bc 24 30
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  011a4	74 17		 je	 SHORT $LN85@read_omade
  011a6	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  011ae	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  011b2	d1 f8		 sar	 eax, 1
  011b4	89 84 24 04 01
	00 00		 mov	 DWORD PTR tv672[rsp], eax
  011bb	eb 0b		 jmp	 SHORT $LN86@read_omade
$LN85@read_omade:
  011bd	c7 84 24 04 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv672[rsp], 0
$LN86@read_omade:
  011c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  011ce	8b 08		 mov	 ecx, DWORD PTR [rax]
  011d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  011d6	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR tv655[rsp], rax
  011de	48 8b 8c 24 30
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  011e6	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  011ed	48 89 8c 24 90
	01 00 00	 mov	 QWORD PTR tv661[rsp], rcx
  011f5	b9 01 00 00 00	 mov	 ecx, 1
  011fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01200	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR tv655[rsp]
  01208	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0120d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169333
  01214	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  01219	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169334
  01220	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01225	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR tv661[rsp]
  0122d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01232	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR tv666[rsp]
  01239	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0123d	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR tv672[rsp]
  01244	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01248	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169335
  0124f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01254	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169336
  0125b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01260	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01265	41 b9 03 00 00
	00		 mov	 r9d, 3
  0126b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169337
  01272	ba 10 01 00 00	 mov	 edx, 272		; 00000110H
  01277	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169338
  0127e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 273  :         goto omadesc_error;

  01284	eb 60		 jmp	 SHORT $omadesc_error$88
$LN41@read_omade:

; 274  :     }
; 275  : 
; 276  :     /* Close the OMA file */
; 277  :     fclose( oma );

  01286	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR oma$[rsp]
  0128e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fclose

; 278  : 
; 279  :     /* Force an EOT as last entry */
; 280  :     tdftab[ filecount++ ].format = 'E';

  01294	0f b7 44 24 70	 movzx	 eax, WORD PTR filecount$[rsp]
  01299	48 69 c0 08 01
	00 00		 imul	 rax, rax, 264		; 00000108H
  012a0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tdftab$[rsp]
  012a5	c6 84 01 05 01
	00 00 45	 mov	 BYTE PTR [rcx+rax+261], 69 ; 00000045H
  012ad	0f b7 44 24 70	 movzx	 eax, WORD PTR filecount$[rsp]
  012b2	66 ff c0	 inc	 ax
  012b5	66 89 44 24 70	 mov	 WORD PTR filecount$[rsp], ax

; 281  : 
; 282  :     /* Save the file count and TDF array pointer in the device block */
; 283  :     dev->omafiles = filecount;

  012ba	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  012c2	0f b7 4c 24 70	 movzx	 ecx, WORD PTR filecount$[rsp]
  012c7	66 89 88 00 10
	00 00		 mov	 WORD PTR [rax+4096], cx

; 284  :     dev->omadesc  = tdftab;

  012ce	48 8b 84 24 30
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  012d6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tdftab$[rsp]
  012db	48 89 88 f8 0f
	00 00		 mov	 QWORD PTR [rax+4088], rcx

; 285  : 
; 286  :     return 0;

  012e2	33 c0		 xor	 eax, eax
  012e4	eb 1e		 jmp	 SHORT $LN1@read_omade
$omadesc_error$88:

; 287  : 
; 288  : omadesc_error:
; 289  : 
; 290  :     free( tdftab );

  012e6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tdftab$[rsp]
  012eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 291  :     fclose( oma );

  012f1	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR oma$[rsp]
  012f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fclose

; 292  :     return -1;

  012ff	b8 ff ff ff ff	 mov	 eax, -1
$LN1@read_omade:

; 293  : 
; 294  : } /* end function read_omadesc */

  01304	48 8b 8c 24 00
	06 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0130c	48 33 cc	 xor	 rcx, rsp
  0130f	e8 00 00 00 00	 call	 __security_check_cookie
  01314	48 81 c4 18 06
	00 00		 add	 rsp, 1560		; 00000618H
  0131b	5f		 pop	 rdi
  0131c	5e		 pop	 rsi
  0131d	c3		 ret	 0
read_omadesc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\omatape.c
_TEXT	SEGMENT
pos$ = 112
rc$ = 120
omadesc$ = 128
tv175 = 136
tv147 = 140
tv153 = 144
prvhdro$ = 148
tv201 = 152
nxthdro$ = 160
curblkl$ = 164
tv136 = 168
tv142 = 176
dev$ = 208
unitstat$ = 216
code$ = 224
bsf_omatape PROC

; 966  : {

$LN20:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 967  : int             rc;                     /* Return code               */
; 968  : off_t           pos;                    /* File position             */
; 969  : OMATAPE_DESC   *omadesc;                /* -> OMA descriptor entry   */
; 970  : S32             curblkl;                /* Length of current block   */
; 971  : S32             prvhdro;                /* Offset of previous header */
; 972  : S32             nxthdro;                /* Offset of next header     */
; 973  : 
; 974  :     /* Close the current OMA file */
; 975  :     if (dev->fd >= 0)

  00016	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0001e	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  00025	7c 14		 jl	 SHORT $LN4@bsf_omatap

; 976  :         close (dev->fd);

  00027	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0002f	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close
$LN4@bsf_omatap:

; 977  :     dev->fd = -1;

  0003b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00043	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 978  :     dev->nxtblkpos = 0;

  0004d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00055	48 c7 80 08 10
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4104], 0

; 979  :     dev->prvblkpos = -1;

  00060	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00068	48 c7 80 10 10
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+4112], -1

; 980  : 
; 981  :     /* Exit with tape at load point if currently on first file */
; 982  :     if (dev->curfilen <= 1)

  00073	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0007b	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  00082	83 f8 01	 cmp	 eax, 1
  00085	7f 2d		 jg	 SHORT $LN5@bsf_omatap

; 983  :     {
; 984  :         build_senseX(TAPE_BSENSE_LOADPTERR,dev,unitstat,code);

  00087	44 0f b6 8c 24
	e0 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00090	4c 8b 84 24 d8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00098	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  000a0	b9 09 00 00 00	 mov	 ecx, 9
  000a5	e8 00 00 00 00	 call	 build_senseX

; 985  :         return -1;

  000aa	b8 ff ff ff ff	 mov	 eax, -1
  000af	e9 da 03 00 00	 jmp	 $LN1@bsf_omatap
$LN5@bsf_omatap:

; 986  :     }
; 987  : 
; 988  :     /* Decrement current file number */
; 989  :     dev->curfilen--;

  000b4	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000bc	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  000c3	66 ff c8	 dec	 ax
  000c6	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  000ce	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 990  : 
; 991  :     /* Point to the current file entry in the OMA descriptor table */
; 992  :     omadesc = (OMATAPE_DESC*)(dev->omadesc);

  000d5	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000dd	48 8b 80 f8 0f
	00 00		 mov	 rax, QWORD PTR [rax+4088]
  000e4	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR omadesc$[rsp], rax

; 993  :     omadesc += (dev->curfilen-1);

  000ec	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000f4	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  000fb	ff c8		 dec	 eax
  000fd	48 98		 cdqe
  000ff	48 69 c0 08 01
	00 00		 imul	 rax, rax, 264		; 00000108H
  00106	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR omadesc$[rsp]
  0010e	48 03 c8	 add	 rcx, rax
  00111	48 8b c1	 mov	 rax, rcx
  00114	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR omadesc$[rsp], rax

; 994  : 
; 995  :     /* Open the new current file */
; 996  :     rc = open_omatape (dev, unitstat,code);

  0011c	44 0f b6 84 24
	e0 00 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  00125	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  0012d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00135	e8 00 00 00 00	 call	 open_omatape
  0013a	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 997  :     if (rc < 0) return rc;

  0013e	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  00143	7d 09		 jge	 SHORT $LN6@bsf_omatap
  00145	8b 44 24 78	 mov	 eax, DWORD PTR rc$[rsp]
  00149	e9 40 03 00 00	 jmp	 $LN1@bsf_omatap
$LN6@bsf_omatap:

; 998  : 
; 999  :     /* Reposition before tapemark header at end of file, or
; 1000 :        to end of file for fixed block or ASCII text files */
; 1001 :     pos = 0;

  0014e	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR pos$[rsp], 0

; 1002 :     if ( 'H' == omadesc->format )

  00157	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR omadesc$[rsp]
  0015f	0f be 80 05 01
	00 00		 movsx	 eax, BYTE PTR [rax+261]
  00166	83 f8 48	 cmp	 eax, 72			; 00000048H
  00169	75 0e		 jne	 SHORT $LN7@bsf_omatap

; 1003 :         pos -= sizeof(OMATAPE_BLKHDR);

  0016b	48 8b 44 24 70	 mov	 rax, QWORD PTR pos$[rsp]
  00170	48 83 e8 10	 sub	 rax, 16
  00174	48 89 44 24 70	 mov	 QWORD PTR pos$[rsp], rax
$LN7@bsf_omatap:

; 1004 : 
; 1005 :     pos = lseek (dev->fd, pos, SEEK_END);

  00179	41 b8 02 00 00
	00		 mov	 r8d, 2
  0017f	48 8b 54 24 70	 mov	 rdx, QWORD PTR pos$[rsp]
  00184	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0018c	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00192	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00198	48 89 44 24 70	 mov	 QWORD PTR pos$[rsp], rax

; 1006 :     if (pos < 0)

  0019d	48 83 7c 24 70
	00		 cmp	 QWORD PTR pos$[rsp], 0
  001a3	0f 8d 5e 01 00
	00		 jge	 $LN8@bsf_omatap

; 1007 :     {
; 1008 :         /* Handle seek error condition */
; 1009 :         WRMSG (HHC00205, "E", LCSS_DEVNUM, omadesc->filename, "OMA", "lseek()", strerror(errno));

  001a9	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  001b2	74 15		 je	 SHORT $LN14@bsf_omatap
  001b4	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001bc	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  001c0	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv147[rsp], eax
  001c7	eb 0b		 jmp	 SHORT $LN15@bsf_omatap
$LN14@bsf_omatap:
  001c9	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv147[rsp], 0
$LN15@bsf_omatap:
  001d4	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  001dd	74 17		 je	 SHORT $LN16@bsf_omatap
  001df	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001e7	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  001eb	d1 f8		 sar	 eax, 1
  001ed	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv153[rsp], eax
  001f4	eb 0b		 jmp	 SHORT $LN17@bsf_omatap
$LN16@bsf_omatap:
  001f6	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv153[rsp], 0
$LN17@bsf_omatap:
  00201	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00207	8b 08		 mov	 ecx, DWORD PTR [rax]
  00209	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0020f	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv136[rsp], rax
  00217	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR omadesc$[rsp]
  0021f	48 89 8c 24 b0
	00 00 00	 mov	 QWORD PTR tv142[rsp], rcx
  00227	b9 01 00 00 00	 mov	 ecx, 1
  0022c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00232	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv136[rsp]
  0023a	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0023f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169686
  00246	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0024b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169687
  00252	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00257	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv142[rsp]
  0025f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00264	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv147[rsp]
  0026b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0026f	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv153[rsp]
  00276	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0027a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169688
  00281	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00286	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169689
  0028d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00292	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00297	41 b9 03 00 00
	00		 mov	 r9d, 3
  0029d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169690
  002a4	ba f1 03 00 00	 mov	 edx, 1009		; 000003f1H
  002a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169691
  002b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1010 : 
; 1011 :         /* Set unit check with equipment check */
; 1012 :         build_senseX(TAPE_BSENSE_LOCATEERR,dev,unitstat,code);

  002b6	44 0f b6 8c 24
	e0 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  002bf	4c 8b 84 24 d8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  002c7	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  002cf	b9 0e 00 00 00	 mov	 ecx, 14
  002d4	e8 00 00 00 00	 call	 build_senseX

; 1013 :         dev->sense[0] = SENSE_EC;

  002d9	b8 01 00 00 00	 mov	 eax, 1
  002de	48 6b c0 00	 imul	 rax, rax, 0
  002e2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002ea	c6 84 01 64 03
	00 00 10	 mov	 BYTE PTR [rcx+rax+868], 16

; 1014 :         *unitstat = CSW_CE | CSW_DE | CSW_UC;

  002f2	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  002fa	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 1015 :         return -1;

  002fd	b8 ff ff ff ff	 mov	 eax, -1
  00302	e9 87 01 00 00	 jmp	 $LN1@bsf_omatap
$LN8@bsf_omatap:

; 1016 :     }
; 1017 :     dev->nxtblkpos = pos;

  00307	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0030f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pos$[rsp]
  00314	48 89 88 08 10
	00 00		 mov	 QWORD PTR [rax+4104], rcx

; 1018 :     dev->prvblkpos = -1;

  0031b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00323	48 c7 80 10 10
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+4112], -1

; 1019 : 
; 1020 :     /* Determine the offset of the previous block */
; 1021 :     switch (omadesc->format)

  0032e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR omadesc$[rsp]
  00336	0f b6 80 05 01
	00 00		 movzx	 eax, BYTE PTR [rax+261]
  0033d	88 84 24 88 00
	00 00		 mov	 BYTE PTR tv175[rsp], al
  00344	80 bc 24 88 00
	00 00 46	 cmp	 BYTE PTR tv175[rsp], 70	; 00000046H
  0034c	0f 84 a3 00 00
	00		 je	 $LN11@bsf_omatap
  00352	80 bc 24 88 00
	00 00 48	 cmp	 BYTE PTR tv175[rsp], 72	; 00000048H
  0035a	74 13		 je	 SHORT $LN9@bsf_omatap
  0035c	80 bc 24 88 00
	00 00 54	 cmp	 BYTE PTR tv175[rsp], 84	; 00000054H
  00364	0f 84 0f 01 00
	00		 je	 $LN12@bsf_omatap
  0036a	e9 1d 01 00 00	 jmp	 $LN2@bsf_omatap
$LN9@bsf_omatap:

; 1022 :     {
; 1023 :     case 'H':
; 1024 :         /* For OMA headers files, read the tapemark header
; 1025 :            and extract the previous block offset */
; 1026 :         rc = readhdr_omaheaders (dev, omadesc, pos, &curblkl,

  0036f	0f b6 84 24 e0
	00 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  00377	88 44 24 38	 mov	 BYTE PTR [rsp+56], al
  0037b	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00383	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00388	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR nxthdro$[rsp]
  00390	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00395	48 8d 84 24 94
	00 00 00	 lea	 rax, QWORD PTR prvhdro$[rsp]
  0039d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003a2	4c 8d 8c 24 a4
	00 00 00	 lea	 r9, QWORD PTR curblkl$[rsp]
  003aa	44 8b 44 24 70	 mov	 r8d, DWORD PTR pos$[rsp]
  003af	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR omadesc$[rsp]
  003b7	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003bf	e8 00 00 00 00	 call	 readhdr_omaheaders
  003c4	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 1027 :                                 &prvhdro, &nxthdro, unitstat,code);
; 1028 :         if (rc < 0) return -1;

  003c8	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  003cd	7d 0a		 jge	 SHORT $LN10@bsf_omatap
  003cf	b8 ff ff ff ff	 mov	 eax, -1
  003d4	e9 b5 00 00 00	 jmp	 $LN1@bsf_omatap
$LN10@bsf_omatap:

; 1029 :         dev->prvblkpos = prvhdro;

  003d9	48 63 84 24 94
	00 00 00	 movsxd	 rax, DWORD PTR prvhdro$[rsp]
  003e1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003e9	48 89 81 10 10
	00 00		 mov	 QWORD PTR [rcx+4112], rax

; 1030 :         break;

  003f0	e9 97 00 00 00	 jmp	 $LN2@bsf_omatap
$LN11@bsf_omatap:

; 1031 :     case 'F':
; 1032 :         /* For OMA fixed block files, calculate the previous block
; 1033 :            offset allowing for a possible short final block */
; 1034 :         pos = (pos + omadesc->blklen - 1) / omadesc->blklen;

  003f5	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR omadesc$[rsp]
  003fd	0f b7 80 06 01
	00 00		 movzx	 eax, WORD PTR [rax+262]
  00404	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pos$[rsp]
  00409	48 8d 44 01 ff	 lea	 rax, QWORD PTR [rcx+rax-1]
  0040e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR omadesc$[rsp]
  00416	0f b7 89 06 01
	00 00		 movzx	 ecx, WORD PTR [rcx+262]
  0041d	48 99		 cdq
  0041f	48 f7 f9	 idiv	 rcx
  00422	48 89 44 24 70	 mov	 QWORD PTR pos$[rsp], rax

; 1035 :         dev->prvblkpos = (pos > 0 ? (pos - 1) * omadesc->blklen : -1);

  00427	48 83 7c 24 70
	00		 cmp	 QWORD PTR pos$[rsp], 0
  0042d	7e 25		 jle	 SHORT $LN18@bsf_omatap
  0042f	48 8b 44 24 70	 mov	 rax, QWORD PTR pos$[rsp]
  00434	48 ff c8	 dec	 rax
  00437	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR omadesc$[rsp]
  0043f	0f b7 89 06 01
	00 00		 movzx	 ecx, WORD PTR [rcx+262]
  00446	48 0f af c1	 imul	 rax, rcx
  0044a	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv201[rsp], rax
  00452	eb 0c		 jmp	 SHORT $LN19@bsf_omatap
$LN18@bsf_omatap:
  00454	48 c7 84 24 98
	00 00 00 ff ff
	ff ff		 mov	 QWORD PTR tv201[rsp], -1
$LN19@bsf_omatap:
  00460	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00468	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv201[rsp]
  00470	48 89 88 10 10
	00 00		 mov	 QWORD PTR [rax+4112], rcx

; 1036 :         break;

  00477	eb 13		 jmp	 SHORT $LN2@bsf_omatap
$LN12@bsf_omatap:

; 1037 :     case 'T':
; 1038 :         /* For OMA ASCII text files, the previous block is unknown */
; 1039 :         dev->prvblkpos = -1;

  00479	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00481	48 c7 80 10 10
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+4112], -1
$LN2@bsf_omatap:

; 1040 :         break;
; 1041 :     } /* end switch(omadesc->format) */
; 1042 : 
; 1043 :     /* Return normal status */
; 1044 :     return 0;

  0048c	33 c0		 xor	 eax, eax
$LN1@bsf_omatap:

; 1045 : 
; 1046 : } /* end function bsf_omatape */

  0048e	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00495	c3		 ret	 0
bsf_omatape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\omatape.c
_TEXT	SEGMENT
dev$ = 48
unitstat$ = 56
code$ = 64
fsf_omatape PROC

; 782  : {

$LN10:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@fsf_omatap:

; 783  :     UNREFERENCED(unitstat);

  00013	33 c0		 xor	 eax, eax
  00015	85 c0		 test	 eax, eax
  00017	75 fa		 jne	 SHORT $LN4@fsf_omatap
$LN7@fsf_omatap:

; 784  :     UNREFERENCED(code);

  00019	33 c0		 xor	 eax, eax
  0001b	85 c0		 test	 eax, eax
  0001d	75 fa		 jne	 SHORT $LN7@fsf_omatap

; 785  : 
; 786  :     /* Close the current OMA file */
; 787  :     if (dev->fd >= 0)

  0001f	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  00024	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  0002b	7c 11		 jl	 SHORT $LN8@fsf_omatap

; 788  :         close (dev->fd);

  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  00032	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close
$LN8@fsf_omatap:

; 789  :     dev->fd = -1;

  0003e	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  00043	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 790  :     dev->nxtblkpos = 0;

  0004d	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  00052	48 c7 80 08 10
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4104], 0

; 791  :     dev->prvblkpos = -1;

  0005d	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  00062	48 c7 80 10 10
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+4112], -1

; 792  : 
; 793  :     /* Increment the current file number */
; 794  :     dev->curfilen++;

  0006d	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  00072	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  00079	66 ff c0	 inc	 ax
  0007c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  00081	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 795  : 
; 796  :     /* Return normal status */
; 797  :     return 0;

  00088	33 c0		 xor	 eax, eax

; 798  : 
; 799  : } /* end function fsf_omatape */

  0008a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008e	c3		 ret	 0
fsf_omatape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\omatape.c
_TEXT	SEGMENT
prvhdro$ = 64
blkpos$ = 68
tv130 = 72
rc$ = 76
nxthdro$ = 80
curblkl$ = 84
omadesc$ = 88
dev$ = 112
unitstat$ = 120
code$ = 128
bsb_omatape PROC

; 1063 : {

$LN15:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1064 : int             rc;                     /* Return code               */
; 1065 : OMATAPE_DESC   *omadesc;                /* -> OMA descriptor entry   */
; 1066 : long            blkpos;                 /* Offset of block header    */
; 1067 : S32             curblkl;                /* Length of current block   */
; 1068 : S32             prvhdro = 0;            /* Offset of previous header */

  00013	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR prvhdro$[rsp], 0

; 1069 : S32             nxthdro;                /* Offset of next header     */
; 1070 : 
; 1071 :     /* Point to the current file entry in the OMA descriptor table */
; 1072 :     omadesc = (OMATAPE_DESC*)(dev->omadesc);

  0001b	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00020	48 8b 80 f8 0f
	00 00		 mov	 rax, QWORD PTR [rax+4088]
  00027	48 89 44 24 58	 mov	 QWORD PTR omadesc$[rsp], rax

; 1073 :     omadesc += (dev->curfilen-1);

  0002c	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00031	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  00038	ff c8		 dec	 eax
  0003a	48 98		 cdqe
  0003c	48 69 c0 08 01
	00 00		 imul	 rax, rax, 264		; 00000108H
  00043	48 8b 4c 24 58	 mov	 rcx, QWORD PTR omadesc$[rsp]
  00048	48 03 c8	 add	 rcx, rax
  0004b	48 8b c1	 mov	 rax, rcx
  0004e	48 89 44 24 58	 mov	 QWORD PTR omadesc$[rsp], rax

; 1074 : 
; 1075 :     /* Backspace file if current position is at start of file */
; 1076 :     if (dev->nxtblkpos == 0)

  00053	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00058	48 83 b8 08 10
	00 00 00	 cmp	 QWORD PTR [rax+4104], 0
  00060	0f 85 84 00 00
	00		 jne	 $LN4@bsb_omatap

; 1077 :     {
; 1078 :         /* Unit check if already at start of tape */
; 1079 :         if (dev->curfilen <= 1)

  00066	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0006b	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  00072	83 f8 01	 cmp	 eax, 1
  00075	7f 27		 jg	 SHORT $LN5@bsb_omatap

; 1080 :         {
; 1081 :             build_senseX(TAPE_BSENSE_LOADPTERR,dev,unitstat,code);

  00077	44 0f b6 8c 24
	80 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00080	4c 8b 44 24 78	 mov	 r8, QWORD PTR unitstat$[rsp]
  00085	48 8b 54 24 70	 mov	 rdx, QWORD PTR dev$[rsp]
  0008a	b9 09 00 00 00	 mov	 ecx, 9
  0008f	e8 00 00 00 00	 call	 build_senseX

; 1082 :             return -1;

  00094	b8 ff ff ff ff	 mov	 eax, -1
  00099	e9 93 01 00 00	 jmp	 $LN1@bsb_omatap
$LN5@bsb_omatap:

; 1083 :         }
; 1084 : 
; 1085 :         /* Perform backspace file operation */
; 1086 :         rc = bsf_omatape (dev, unitstat,code);

  0009e	44 0f b6 84 24
	80 00 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  000a7	48 8b 54 24 78	 mov	 rdx, QWORD PTR unitstat$[rsp]
  000ac	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  000b1	e8 00 00 00 00	 call	 bsf_omatape
  000b6	89 44 24 4c	 mov	 DWORD PTR rc$[rsp], eax

; 1087 :         if (rc < 0) return -1;

  000ba	83 7c 24 4c 00	 cmp	 DWORD PTR rc$[rsp], 0
  000bf	7d 0a		 jge	 SHORT $LN6@bsb_omatap
  000c1	b8 ff ff ff ff	 mov	 eax, -1
  000c6	e9 66 01 00 00	 jmp	 $LN1@bsb_omatap
$LN6@bsb_omatap:

; 1088 : 
; 1089 :         dev->blockid--;

  000cb	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  000d0	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  000d6	ff c8		 dec	 eax
  000d8	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  000dd	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax

; 1090 : 
; 1091 :         /* Return zero to indicate tapemark detected */
; 1092 :         return 0;

  000e3	33 c0		 xor	 eax, eax
  000e5	e9 47 01 00 00	 jmp	 $LN1@bsb_omatap
$LN4@bsb_omatap:

; 1093 :     }
; 1094 : 
; 1095 :     /* Unit check if previous block position is unknown */
; 1096 :     if (dev->prvblkpos < 0)

  000ea	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  000ef	48 83 b8 10 10
	00 00 00	 cmp	 QWORD PTR [rax+4112], 0
  000f7	7d 27		 jge	 SHORT $LN7@bsb_omatap

; 1097 :     {
; 1098 :         build_senseX(TAPE_BSENSE_LOADPTERR,dev,unitstat,code);

  000f9	44 0f b6 8c 24
	80 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00102	4c 8b 44 24 78	 mov	 r8, QWORD PTR unitstat$[rsp]
  00107	48 8b 54 24 70	 mov	 rdx, QWORD PTR dev$[rsp]
  0010c	b9 09 00 00 00	 mov	 ecx, 9
  00111	e8 00 00 00 00	 call	 build_senseX

; 1099 :         return -1;

  00116	b8 ff ff ff ff	 mov	 eax, -1
  0011b	e9 11 01 00 00	 jmp	 $LN1@bsb_omatap
$LN7@bsb_omatap:

; 1100 :     }
; 1101 : 
; 1102 :     /* Backspace to previous block position */
; 1103 :     blkpos = dev->prvblkpos;

  00120	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00125	8b 80 10 10 00
	00		 mov	 eax, DWORD PTR [rax+4112]
  0012b	89 44 24 44	 mov	 DWORD PTR blkpos$[rsp], eax

; 1104 : 
; 1105 :     /* Determine new previous block position */
; 1106 :     switch (omadesc->format)

  0012f	48 8b 44 24 58	 mov	 rax, QWORD PTR omadesc$[rsp]
  00134	0f b6 80 05 01
	00 00		 movzx	 eax, BYTE PTR [rax+261]
  0013b	88 44 24 48	 mov	 BYTE PTR tv130[rsp], al
  0013f	80 7c 24 48 46	 cmp	 BYTE PTR tv130[rsp], 70	; 00000046H
  00144	74 6e		 je	 SHORT $LN10@bsb_omatap
  00146	80 7c 24 48 48	 cmp	 BYTE PTR tv130[rsp], 72	; 00000048H
  0014b	74 10		 je	 SHORT $LN8@bsb_omatap
  0014d	80 7c 24 48 54	 cmp	 BYTE PTR tv130[rsp], 84	; 00000054H
  00152	0f 84 92 00 00
	00		 je	 $LN13@bsb_omatap
  00158	e9 95 00 00 00	 jmp	 $LN2@bsb_omatap
$LN8@bsb_omatap:

; 1107 :     {
; 1108 :     case 'H':
; 1109 :         /* For OMA headers files, read the previous block header to
; 1110 :            extract the block length and new previous block offset */
; 1111 :         rc = readhdr_omaheaders (dev, omadesc, blkpos, &curblkl,

  0015d	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  00165	88 44 24 38	 mov	 BYTE PTR [rsp+56], al
  00169	48 8b 44 24 78	 mov	 rax, QWORD PTR unitstat$[rsp]
  0016e	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00173	48 8d 44 24 50	 lea	 rax, QWORD PTR nxthdro$[rsp]
  00178	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0017d	48 8d 44 24 40	 lea	 rax, QWORD PTR prvhdro$[rsp]
  00182	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00187	4c 8d 4c 24 54	 lea	 r9, QWORD PTR curblkl$[rsp]
  0018c	44 8b 44 24 44	 mov	 r8d, DWORD PTR blkpos$[rsp]
  00191	48 8b 54 24 58	 mov	 rdx, QWORD PTR omadesc$[rsp]
  00196	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0019b	e8 00 00 00 00	 call	 readhdr_omaheaders
  001a0	89 44 24 4c	 mov	 DWORD PTR rc$[rsp], eax

; 1112 :                                 &prvhdro, &nxthdro, unitstat,code);
; 1113 :         if (rc < 0) return -1;

  001a4	83 7c 24 4c 00	 cmp	 DWORD PTR rc$[rsp], 0
  001a9	7d 07		 jge	 SHORT $LN9@bsb_omatap
  001ab	b8 ff ff ff ff	 mov	 eax, -1
  001b0	eb 7f		 jmp	 SHORT $LN1@bsb_omatap
$LN9@bsb_omatap:

; 1114 :         break;

  001b2	eb 3e		 jmp	 SHORT $LN2@bsb_omatap
$LN10@bsb_omatap:

; 1115 :     case 'F':
; 1116 :         /* For OMA fixed block files, calculate the new previous
; 1117 :            block offset by subtracting the fixed block length */
; 1118 :         if (blkpos >= omadesc->blklen)

  001b4	48 8b 44 24 58	 mov	 rax, QWORD PTR omadesc$[rsp]
  001b9	0f b7 80 06 01
	00 00		 movzx	 eax, WORD PTR [rax+262]
  001c0	39 44 24 44	 cmp	 DWORD PTR blkpos$[rsp], eax
  001c4	7c 1a		 jl	 SHORT $LN11@bsb_omatap

; 1119 :             prvhdro = blkpos - omadesc->blklen;

  001c6	48 8b 44 24 58	 mov	 rax, QWORD PTR omadesc$[rsp]
  001cb	0f b7 80 06 01
	00 00		 movzx	 eax, WORD PTR [rax+262]
  001d2	8b 4c 24 44	 mov	 ecx, DWORD PTR blkpos$[rsp]
  001d6	2b c8		 sub	 ecx, eax
  001d8	8b c1		 mov	 eax, ecx
  001da	89 44 24 40	 mov	 DWORD PTR prvhdro$[rsp], eax
  001de	eb 08		 jmp	 SHORT $LN12@bsb_omatap
$LN11@bsb_omatap:

; 1120 :         else
; 1121 :             prvhdro = -1;

  001e0	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR prvhdro$[rsp], -1
$LN12@bsb_omatap:

; 1122 :         break;

  001e8	eb 08		 jmp	 SHORT $LN2@bsb_omatap
$LN13@bsb_omatap:

; 1123 :     case 'T':
; 1124 :         /* For OMA ASCII text files, new previous block is unknown */
; 1125 :         prvhdro = -1;

  001ea	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR prvhdro$[rsp], -1
$LN2@bsb_omatap:

; 1126 :         break;
; 1127 :     } /* end switch(omadesc->format) */
; 1128 : 
; 1129 :     /* Update the offsets of the next and previous blocks */
; 1130 :     dev->nxtblkpos = blkpos;

  001f2	48 63 44 24 44	 movsxd	 rax, DWORD PTR blkpos$[rsp]
  001f7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  001fc	48 89 81 08 10
	00 00		 mov	 QWORD PTR [rcx+4104], rax

; 1131 :     dev->prvblkpos = prvhdro;

  00203	48 63 44 24 40	 movsxd	 rax, DWORD PTR prvhdro$[rsp]
  00208	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0020d	48 89 81 10 10
	00 00		 mov	 QWORD PTR [rcx+4112], rax

; 1132 : 
; 1133 :     dev->blockid--;

  00214	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00219	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  0021f	ff c8		 dec	 eax
  00221	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00226	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax

; 1134 : 
; 1135 :     /* Return +1 to indicate backspace successful */
; 1136 :     return +1;

  0022c	b8 01 00 00 00	 mov	 eax, 1
$LN1@bsb_omatap:

; 1137 : 
; 1138 : } /* end function bsb_omatape */

  00231	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00235	c3		 ret	 0
bsb_omatape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\omatape.c
_TEXT	SEGMENT
rc$ = 48
tv73 = 52
omadesc$ = 56
dev$ = 80
unitstat$ = 88
code$ = 96
fsb_omatape PROC

; 926  : {

$LN10:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 927  : int             rc;                     /* Return code               */
; 928  : OMATAPE_DESC   *omadesc;                /* -> OMA descriptor entry   */
; 929  : 
; 930  :     /* Point to the current file entry in the OMA descriptor table */
; 931  :     omadesc = (OMATAPE_DESC*)(dev->omadesc);

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  00018	48 8b 80 f8 0f
	00 00		 mov	 rax, QWORD PTR [rax+4088]
  0001f	48 89 44 24 38	 mov	 QWORD PTR omadesc$[rsp], rax

; 932  :     omadesc += (dev->curfilen-1);

  00024	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  00029	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  00030	ff c8		 dec	 eax
  00032	48 98		 cdqe
  00034	48 69 c0 08 01
	00 00		 imul	 rax, rax, 264		; 00000108H
  0003b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR omadesc$[rsp]
  00040	48 03 c8	 add	 rcx, rax
  00043	48 8b c1	 mov	 rax, rcx
  00046	48 89 44 24 38	 mov	 QWORD PTR omadesc$[rsp], rax

; 933  : 
; 934  :     /* Forward space block depending on OMA file type */
; 935  :     switch (omadesc->format)

  0004b	48 8b 44 24 38	 mov	 rax, QWORD PTR omadesc$[rsp]
  00050	0f b6 80 05 01
	00 00		 movzx	 eax, BYTE PTR [rax+261]
  00057	88 44 24 34	 mov	 BYTE PTR tv73[rsp], al
  0005b	80 7c 24 34 46	 cmp	 BYTE PTR tv73[rsp], 70	; 00000046H
  00060	74 2e		 je	 SHORT $LN6@fsb_omatap
  00062	80 7c 24 34 48	 cmp	 BYTE PTR tv73[rsp], 72	; 00000048H
  00067	74 07		 je	 SHORT $LN5@fsb_omatap
  00069	80 7c 24 34 54	 cmp	 BYTE PTR tv73[rsp], 84	; 00000054H
  0006e	74 40		 je	 SHORT $LN7@fsb_omatap
$LN5@fsb_omatap:

; 936  :     {
; 937  :     default:
; 938  :     case 'H':
; 939  :         rc = fsb_omaheaders (dev, omadesc, unitstat,code);

  00070	44 0f b6 4c 24
	60		 movzx	 r9d, BYTE PTR code$[rsp]
  00076	4c 8b 44 24 58	 mov	 r8, QWORD PTR unitstat$[rsp]
  0007b	48 8b 54 24 38	 mov	 rdx, QWORD PTR omadesc$[rsp]
  00080	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  00085	e8 00 00 00 00	 call	 fsb_omaheaders
  0008a	89 44 24 30	 mov	 DWORD PTR rc$[rsp], eax

; 940  :         break;

  0008e	eb 44		 jmp	 SHORT $LN2@fsb_omatap
$LN6@fsb_omatap:

; 941  :     case 'F':
; 942  :         rc = fsb_omafixed (dev, omadesc, unitstat,code);

  00090	44 0f b6 4c 24
	60		 movzx	 r9d, BYTE PTR code$[rsp]
  00096	4c 8b 44 24 58	 mov	 r8, QWORD PTR unitstat$[rsp]
  0009b	48 8b 54 24 38	 mov	 rdx, QWORD PTR omadesc$[rsp]
  000a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  000a5	e8 00 00 00 00	 call	 fsb_omafixed
  000aa	89 44 24 30	 mov	 DWORD PTR rc$[rsp], eax

; 943  :         break;

  000ae	eb 24		 jmp	 SHORT $LN2@fsb_omatap
$LN7@fsb_omatap:

; 944  :     case 'T':
; 945  :         rc = read_omatext (dev, omadesc, NULL, unitstat,code);

  000b0	0f b6 44 24 60	 movzx	 eax, BYTE PTR code$[rsp]
  000b5	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  000b9	4c 8b 4c 24 58	 mov	 r9, QWORD PTR unitstat$[rsp]
  000be	45 33 c0	 xor	 r8d, r8d
  000c1	48 8b 54 24 38	 mov	 rdx, QWORD PTR omadesc$[rsp]
  000c6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  000cb	e8 00 00 00 00	 call	 read_omatext
  000d0	89 44 24 30	 mov	 DWORD PTR rc$[rsp], eax
$LN2@fsb_omatap:

; 946  :         break;
; 947  :     } /* end switch(omadesc->format) */
; 948  : 
; 949  :     if (rc >= 0) dev->blockid++;

  000d4	83 7c 24 30 00	 cmp	 DWORD PTR rc$[rsp], 0
  000d9	7c 18		 jl	 SHORT $LN8@fsb_omatap
  000db	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  000e0	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  000e6	ff c0		 inc	 eax
  000e8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  000ed	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax
$LN8@fsb_omatap:

; 950  : 
; 951  :     return rc;

  000f3	8b 44 24 30	 mov	 eax, DWORD PTR rc$[rsp]

; 952  : 
; 953  : } /* end function fsb_omatape */

  000f7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000fb	c3		 ret	 0
fsb_omatape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\omatape.c
_TEXT	SEGMENT
dev$ = 48
unitstat$ = 56
code$ = 64
rewind_omatape PROC

; 1191 : {

$LN9:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@rewind_oma:

; 1192 :     UNREFERENCED(unitstat);

  00013	33 c0		 xor	 eax, eax
  00015	85 c0		 test	 eax, eax
  00017	75 fa		 jne	 SHORT $LN4@rewind_oma
$LN7@rewind_oma:

; 1193 :     UNREFERENCED(code);

  00019	33 c0		 xor	 eax, eax
  0001b	85 c0		 test	 eax, eax
  0001d	75 fa		 jne	 SHORT $LN7@rewind_oma

; 1194 :     close_omatape2(dev);

  0001f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  00024	e8 00 00 00 00	 call	 close_omatape2

; 1195 :     dev->fenced = 0;

  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  0002e	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00034	83 e0 fe	 and	 eax, -2			; fffffffeH
  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  0003c	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 1196 :     return 0;

  00042	33 c0		 xor	 eax, eax

; 1197 : }

  00044	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00048	c3		 ret	 0
rewind_omatape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\omatape.c
_TEXT	SEGMENT
tv72 = 96
tv78 = 100
tv67 = 104
dev$ = 128
close_omatape2 PROC

; 1146 : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1147 :     if (dev->fd >= 0)

  00009	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00011	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  00018	0f 8c e0 00 00
	00		 jl	 $LN2@close_omat

; 1148 :     {
; 1149 :         WRMSG (HHC00201, "I", LCSS_DEVNUM, dev->filename, "OMA");

  0001e	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00027	74 12		 je	 SHORT $LN5@close_omat
  00029	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00031	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00035	89 44 24 60	 mov	 DWORD PTR tv72[rsp], eax
  00039	eb 08		 jmp	 SHORT $LN6@close_omat
$LN5@close_omat:
  0003b	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN6@close_omat:
  00043	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0004c	74 14		 je	 SHORT $LN7@close_omat
  0004e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00056	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0005a	d1 f8		 sar	 eax, 1
  0005c	89 44 24 64	 mov	 DWORD PTR tv78[rsp], eax
  00060	eb 08		 jmp	 SHORT $LN8@close_omat
$LN7@close_omat:
  00062	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
$LN8@close_omat:
  0006a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00072	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00078	48 89 44 24 68	 mov	 QWORD PTR tv67[rsp], rax
  0007d	b9 01 00 00 00	 mov	 ecx, 1
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169729
  0008f	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00094	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv67[rsp]
  00099	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0009e	8b 4c 24 60	 mov	 ecx, DWORD PTR tv72[rsp]
  000a2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000a6	8b 4c 24 64	 mov	 ecx, DWORD PTR tv78[rsp]
  000aa	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169730
  000b5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169731
  000c1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000cb	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169732
  000d8	ba 7d 04 00 00	 mov	 edx, 1149		; 0000047dH
  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169733
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1150 :         close (dev->fd);

  000ea	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000f2	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  000f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close
$LN2@close_omat:

; 1151 :     }
; 1152 :     dev->fd=-1;

  000fe	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00106	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 1153 :     if (dev->omadesc != NULL)

  00110	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00118	48 83 b8 f8 0f
	00 00 00	 cmp	 QWORD PTR [rax+4088], 0
  00120	74 28		 je	 SHORT $LN3@close_omat

; 1154 :     {
; 1155 :         free (dev->omadesc);

  00122	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0012a	48 8b 88 f8 0f
	00 00		 mov	 rcx, QWORD PTR [rax+4088]
  00131	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1156 :         dev->omadesc = NULL;

  00137	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0013f	48 c7 80 f8 0f
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4088], 0
$LN3@close_omat:

; 1157 :     }
; 1158 : 
; 1159 :     /* Reset the device dependent fields */
; 1160 :     dev->nxtblkpos=0;

  0014a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00152	48 c7 80 08 10
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4104], 0

; 1161 :     dev->prvblkpos=-1;

  0015d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00165	48 c7 80 10 10
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+4112], -1

; 1162 :     dev->curfilen=1;

  00170	b8 01 00 00 00	 mov	 eax, 1
  00175	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0017d	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 1163 :     dev->blockid=0;

  00184	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0018c	c7 80 04 10 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4100], 0

; 1164 :     dev->fenced = 0;

  00196	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0019e	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  001a4	83 e0 fe	 and	 eax, -2			; fffffffeH
  001a7	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  001af	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 1165 :     dev->omafiles = 0;

  001b5	33 c0		 xor	 eax, eax
  001b7	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  001bf	66 89 81 00 10
	00 00		 mov	 WORD PTR [rcx+4096], ax

; 1166 :     return;
; 1167 : }

  001c6	48 83 c4 78	 add	 rsp, 120		; 00000078H
  001ca	c3		 ret	 0
close_omatape2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\omatape.c
_TEXT	SEGMENT
dev$ = 48
close_omatape PROC

; 1177 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1178 :     close_omatape2(dev);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  0000e	e8 00 00 00 00	 call	 close_omatape2

; 1179 :     STRLCPY( dev->filename, TAPE_UNLOADED );

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  00018	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0001e	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169738
  0002b	48 8b c8	 mov	 rcx, rax
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 1180 :     dev->blockid = 0;

  00034	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  00039	c7 80 04 10 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4100], 0

; 1181 :     dev->fenced = 0;

  00043	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  00048	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0004e	83 e0 fe	 and	 eax, -2			; fffffffeH
  00051	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  00056	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 1182 :     return;
; 1183 : }

  0005c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00060	c3		 ret	 0
close_omatape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\omatape.c
_TEXT	SEGMENT
fd$ = 112
omadesc$ = 120
tv164 = 128
tv170 = 132
rc$ = 136
tv153 = 144
tv159 = 152
pathname$ = 160
__$ArrayPad$ = 432
dev$ = 464
unitstat$ = 472
code$ = 480
open_omatape PROC

; 304  : {

$LN17:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 305  : int             fd;                     /* File descriptor integer   */
; 306  : int             rc;                     /* Return code               */
; 307  : OMATAPE_DESC   *omadesc;                /* -> OMA descriptor entry   */
; 308  : char            pathname[MAX_PATH];     /* file path in host format  */
; 309  : 
; 310  :      /* Check for no tape in drive */
; 311  :      if (!strcmp (dev->filename, TAPE_UNLOADED))

  00028	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00030	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169353
  0003d	48 8b c8	 mov	 rcx, rax
  00040	e8 00 00 00 00	 call	 strcmp
  00045	85 c0		 test	 eax, eax
  00047	75 2a		 jne	 SHORT $LN2@open_omata

; 312  :      {
; 313  :          build_senseX(TAPE_BSENSE_TAPEUNLOADED,dev,unitstat,code);

  00049	44 0f b6 8c 24
	e0 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00052	4c 8b 84 24 d8
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0005a	48 8b 94 24 d0
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00062	33 c9		 xor	 ecx, ecx
  00064	e8 00 00 00 00	 call	 build_senseX

; 314  :          return -1;

  00069	b8 ff ff ff ff	 mov	 eax, -1
  0006e	e9 26 03 00 00	 jmp	 $LN1@open_omata
$LN2@open_omata:

; 315  :      }
; 316  : 
; 317  :     /* Read the OMA descriptor file if necessary */
; 318  :     if (dev->omadesc == NULL)

  00073	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0007b	48 83 b8 f8 0f
	00 00 00	 cmp	 QWORD PTR [rax+4088], 0
  00083	75 5d		 jne	 SHORT $LN3@open_omata

; 319  :     {
; 320  :         rc = read_omadesc (dev);

  00085	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0008d	e8 00 00 00 00	 call	 read_omadesc
  00092	89 84 24 88 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax

; 321  :         if (rc < 0)

  00099	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  000a1	7d 2d		 jge	 SHORT $LN4@open_omata

; 322  :         {
; 323  :             build_senseX(TAPE_BSENSE_TAPELOADFAIL,dev,unitstat,code);

  000a3	44 0f b6 8c 24
	e0 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  000ac	4c 8b 84 24 d8
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  000b4	48 8b 94 24 d0
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  000bc	b9 01 00 00 00	 mov	 ecx, 1
  000c1	e8 00 00 00 00	 call	 build_senseX

; 324  :             return -1;

  000c6	b8 ff ff ff ff	 mov	 eax, -1
  000cb	e9 c9 02 00 00	 jmp	 $LN1@open_omata
$LN4@open_omata:

; 325  :         }
; 326  :         dev->blockid = 0;

  000d0	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000d8	c7 80 04 10 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4100], 0
$LN3@open_omata:

; 327  :     }
; 328  : 
; 329  :     dev->fenced = 0;

  000e2	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000ea	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  000f0	83 e0 fe	 and	 eax, -2			; fffffffeH
  000f3	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  000fb	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 330  : 
; 331  :     /* Unit exception if beyond end of tape */
; 332  :     /* ISW: CHANGED PROCESSING - RETURN UNDEFINITE Tape Marks  */
; 333  :     /*       NOTE: The last entry in the TDF table is ALWAYS   */
; 334  :     /*              an EOT Condition                           */
; 335  :     /*              This is ensured by the TDF reading routine */
; 336  :     if(dev->curfilen>dev->omafiles)

  00101	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00109	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  00110	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00118	0f b7 89 00 10
	00 00		 movzx	 ecx, WORD PTR [rcx+4096]
  0011f	3b c1		 cmp	 eax, ecx
  00121	7e 25		 jle	 SHORT $LN5@open_omata

; 337  :     {
; 338  :         dev->curfilen=dev->omafiles;

  00123	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0012b	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00133	0f b7 89 00 10
	00 00		 movzx	 ecx, WORD PTR [rcx+4096]
  0013a	66 89 88 02 10
	00 00		 mov	 WORD PTR [rax+4098], cx

; 339  :         return(0);

  00141	33 c0		 xor	 eax, eax
  00143	e9 51 02 00 00	 jmp	 $LN1@open_omata
$LN5@open_omata:

; 340  :     }
; 341  : 
; 342  :     /* Point to the current file entry in the OMA descriptor table */
; 343  :     omadesc = (OMATAPE_DESC*)(dev->omadesc);

  00148	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00150	48 8b 80 f8 0f
	00 00		 mov	 rax, QWORD PTR [rax+4088]
  00157	48 89 44 24 78	 mov	 QWORD PTR omadesc$[rsp], rax

; 344  :     omadesc += (dev->curfilen-1);

  0015c	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00164	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  0016b	ff c8		 dec	 eax
  0016d	48 98		 cdqe
  0016f	48 69 c0 08 01
	00 00		 imul	 rax, rax, 264		; 00000108H
  00176	48 8b 4c 24 78	 mov	 rcx, QWORD PTR omadesc$[rsp]
  0017b	48 03 c8	 add	 rcx, rax
  0017e	48 8b c1	 mov	 rax, rcx
  00181	48 89 44 24 78	 mov	 QWORD PTR omadesc$[rsp], rax

; 345  :     if(omadesc->format=='X')

  00186	48 8b 44 24 78	 mov	 rax, QWORD PTR omadesc$[rsp]
  0018b	0f be 80 05 01
	00 00		 movsx	 eax, BYTE PTR [rax+261]
  00192	83 f8 58	 cmp	 eax, 88			; 00000058H
  00195	75 07		 jne	 SHORT $LN6@open_omata

; 346  :     {
; 347  :         return 0;

  00197	33 c0		 xor	 eax, eax
  00199	e9 fb 01 00 00	 jmp	 $LN1@open_omata
$LN6@open_omata:

; 348  :     }
; 349  :     if(omadesc->format=='E')

  0019e	48 8b 44 24 78	 mov	 rax, QWORD PTR omadesc$[rsp]
  001a3	0f be 80 05 01
	00 00		 movsx	 eax, BYTE PTR [rax+261]
  001aa	83 f8 45	 cmp	 eax, 69			; 00000045H
  001ad	75 07		 jne	 SHORT $LN7@open_omata

; 350  :     {
; 351  :         return 0;

  001af	33 c0		 xor	 eax, eax
  001b1	e9 e3 01 00 00	 jmp	 $LN1@open_omata
$LN7@open_omata:

; 352  :     }
; 353  : 
; 354  :     /* Open the OMATAPE file */
; 355  :     hostpath(pathname, omadesc->filename, sizeof(pathname));

  001b6	48 8b 44 24 78	 mov	 rax, QWORD PTR omadesc$[rsp]
  001bb	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  001c1	48 8b d0	 mov	 rdx, rax
  001c4	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 356  :     fd = HOPEN (pathname, O_RDONLY | O_BINARY);

  001d2	ba 00 80 00 00	 mov	 edx, 32768		; 00008000H
  001d7	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  001df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  001e5	89 44 24 70	 mov	 DWORD PTR fd$[rsp], eax

; 357  : 
; 358  :     /* Check for successful open */
; 359  :     if (fd < 0 || lseek (fd, 0, SEEK_END) > LONG_MAX)

  001e9	83 7c 24 70 00	 cmp	 DWORD PTR fd$[rsp], 0
  001ee	7c 1e		 jl	 SHORT $LN9@open_omata
  001f0	41 b8 02 00 00
	00		 mov	 r8d, 2
  001f6	33 d2		 xor	 edx, edx
  001f8	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  001fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00202	48 3d ff ff ff
	7f		 cmp	 rax, 2147483647		; 7fffffffH
  00208	0f 8e 58 01 00
	00		 jle	 $LN8@open_omata
$LN9@open_omata:

; 360  :     {
; 361  :         if (fd >= 0)            /* (if open was successful, then it) */

  0020e	83 7c 24 70 00	 cmp	 DWORD PTR fd$[rsp], 0
  00213	7c 0c		 jl	 SHORT $LN10@open_omata

; 362  :             errno = EOVERFLOW;  /* (must have been a lseek overflow) */

  00215	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0021b	c7 00 84 00 00
	00		 mov	 DWORD PTR [rax], 132	; 00000084H
$LN10@open_omata:

; 363  : 
; 364  :         // "%1d:%04X Tape file %s, type %s: error in function %s: %s"
; 365  :         WRMSG (HHC00205, "E", LCSS_DEVNUM, omadesc->filename, "OMA", "open()", strerror(errno));

  00221	48 83 bc 24 d0
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0022a	74 15		 je	 SHORT $LN13@open_omata
  0022c	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00234	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00238	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv164[rsp], eax
  0023f	eb 0b		 jmp	 SHORT $LN14@open_omata
$LN13@open_omata:
  00241	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv164[rsp], 0
$LN14@open_omata:
  0024c	48 83 bc 24 d0
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00255	74 17		 je	 SHORT $LN15@open_omata
  00257	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0025f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00263	d1 f8		 sar	 eax, 1
  00265	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv170[rsp], eax
  0026c	eb 0b		 jmp	 SHORT $LN16@open_omata
$LN15@open_omata:
  0026e	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv170[rsp], 0
$LN16@open_omata:
  00279	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0027f	8b 08		 mov	 ecx, DWORD PTR [rax]
  00281	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00287	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv153[rsp], rax
  0028f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR omadesc$[rsp]
  00294	48 89 8c 24 98
	00 00 00	 mov	 QWORD PTR tv159[rsp], rcx
  0029c	b9 01 00 00 00	 mov	 ecx, 1
  002a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002a7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv153[rsp]
  002af	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  002b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169362
  002bb	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  002c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169363
  002c7	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  002cc	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv159[rsp]
  002d4	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  002d9	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv164[rsp]
  002e0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  002e4	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv170[rsp]
  002eb	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  002ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169364
  002f6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169365
  00302	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00307	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0030c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00312	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169366
  00319	ba 6d 01 00 00	 mov	 edx, 365		; 0000016dH
  0031e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169367
  00325	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 366  : 
; 367  :         if (fd >= 0)

  0032b	83 7c 24 70 00	 cmp	 DWORD PTR fd$[rsp], 0
  00330	7c 0a		 jl	 SHORT $LN11@open_omata

; 368  :             close(fd);          /* (close the file if it was opened) */

  00332	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00336	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close
$LN11@open_omata:

; 369  : 
; 370  :         build_senseX(TAPE_BSENSE_TAPELOADFAIL,dev,unitstat,code);

  0033c	44 0f b6 8c 24
	e0 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00345	4c 8b 84 24 d8
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0034d	48 8b 94 24 d0
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00355	b9 01 00 00 00	 mov	 ecx, 1
  0035a	e8 00 00 00 00	 call	 build_senseX

; 371  :         return -1;

  0035f	b8 ff ff ff ff	 mov	 eax, -1
  00364	eb 33		 jmp	 SHORT $LN1@open_omata
$LN8@open_omata:

; 372  :     }
; 373  : 
; 374  :     /* OMA tapes are always read-only */
; 375  :     dev->readonly = 1;

  00366	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0036e	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00374	83 c8 02	 or	 eax, 2
  00377	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0037f	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 376  : 
; 377  :     /* Store the file descriptor in the device block */
; 378  :     dev->fd = fd;

  00385	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0038d	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00391	89 88 ac 01 00
	00		 mov	 DWORD PTR [rax+428], ecx

; 379  :     return 0;

  00397	33 c0		 xor	 eax, eax
$LN1@open_omata:

; 380  : 
; 381  : } /* end function open_omatape */

  00399	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  003a1	48 33 cc	 xor	 rcx, rsp
  003a4	e8 00 00 00 00	 call	 __security_check_cookie
  003a9	48 81 c4 c8 01
	00 00		 add	 rsp, 456		; 000001c8H
  003b0	c3		 ret	 0
open_omatape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sscanf	PROC						; COMDAT

; 2247 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsscanf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2252 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2253 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2254 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2152 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2153 :         return __stdio_common_vsscanf(

  00018	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  0003d	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00007	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
END
