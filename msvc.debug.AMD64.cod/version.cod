; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG159052 DB	'Built with: Microsoft Visual Studio 2022 (MSVC 193431937'
	DB	' 0)', 00H
	ORG $+4
$SG159053 DB	'Build type: Windows MSVC AMD64 ** DEBUG ** host architec'
	DB	'ture build', 00H
	ORG $+5
$SG159054 DB	'Modes: S/370 ESA/390 z/Arch', 00H
	ORG $+4
$SG159055 DB	'Max CPU Engines: 64', 00H
	ORG $+4
$SG159056 DB	'Using   shared libraries', 00H
	ORG $+7
$SG159057 DB	'Using   Fish threads Threading Model', 00H
	ORG $+3
$SG159058 DB	'Using   Error-Checking Mutex Locking Model', 00H
	ORG $+5
$SG159059 DB	'With    Shared Devices support', 00H
	ORG $+1
$SG159060 DB	'With    Dynamic loading support', 00H
$SG159061 DB	'With    External GUI support', 00H
	ORG $+3
$SG159062 DB	'With    Partial TCP keepalive support', 00H
	ORG $+2
$SG159063 DB	'With    IPV6 support', 00H
	ORG $+3
$SG159064 DB	'With    HTTP Server support', 00H
	ORG $+4
$SG159065 DB	'With    sqrtl support', 00H
	ORG $+2
$SG159066 DB	'With    Signal handling', 00H
$SG159067 DB	'With    Watchdog monitoring', 00H
	ORG $+4
$SG159068 DB	'Without CCKD BZIP2 support', 00H
	ORG $+5
$SG159069 DB	'Without HET BZIP2 support', 00H
	ORG $+6
$SG159070 DB	'Without ZLIB support', 00H
	ORG $+3
$SG159071 DB	'Without Regular Expressions support', 00H
	ORG $+4
$SG159072 DB	'Without Object REXX support', 00H
	ORG $+4
$SG159073 DB	'With    Regina REXX support', 00H
	ORG $+4
$SG159074 DB	'Without Automatic Operator support', 00H
	ORG $+5
$SG159075 DB	'Without National Language Support', 00H
	ORG $+6
$SG159076 DB	'With    CCKD64 Support', 00H
	ORG $+1
$SG159077 DB	'With    Transactional-Execution Facility support', 00H
	ORG $+7
$SG159078 DB	'With    "Optimized" instructions', 00H
	ORG $+7
$SG159079 DB	'With    OPTION_USE_SKAIP_AS_LOCK', 00H
	ORG $+7
$SG159080 DB	'With    OPTION_SIE2BK_FLD_COPY', 00H
	ORG $+9
$SG159081 DB	'Machine dependent assists: cmpxchg1 cmpxchg4 cmpxchg8 cm'
	DB	'pxchg16 hatomics=msvcIntrinsics', 00H
_DATA	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	init_sysblk_version_str_arrays
PUBLIC	display_version
PUBLIC	display_build_options
PUBLIC	display_extpkg_vers
PUBLIC	get_buildinfo_strings
EXTRN	__imp_strdup:PROC
EXTRN	__imp_realloc:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_setvbuf:PROC
EXTRN	init_hostinfo:PROC
EXTRN	format_hostinfo:PROC
EXTRN	hprintf:PROC
EXTRN	rtrim:PROC
EXTRN	w32_snprintf:PROC
EXTRN	w32_fprintf:PROC
EXTRN	fwritemsg:PROC
EXTRN	crypto_version:PROC
EXTRN	decnumber_version:PROC
EXTRN	softfloat_version:PROC
EXTRN	telnet_version:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	hostinfo:BYTE
EXTRN	__imp_sysblk:BYTE
EXTRN	__imp_extgui:DWORD
EXTRN	__security_cookie:QWORD
pdata	SEGMENT
$pdata$init_sysblk_version_str_arrays DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$init_sysblk_version_str_arrays
$pdata$display_version DD imagerel $LN8
	DD	imagerel $LN8+329
	DD	imagerel $unwind$display_version
$pdata$display_build_options DD imagerel $LN6
	DD	imagerel $LN6+85
	DD	imagerel $unwind$display_build_options
$pdata$display_extpkg_vers DD imagerel $LN6
	DD	imagerel $LN6+85
	DD	imagerel $unwind$display_extpkg_vers
$pdata$display_str DD imagerel display_str
	DD	imagerel display_str+163
	DD	imagerel $unwind$display_str
$pdata$init_hercver_strings DD imagerel init_hercver_strings
	DD	imagerel init_hercver_strings+543
	DD	imagerel $unwind$init_hercver_strings
$pdata$init_bldopts_strings DD imagerel init_bldopts_strings
	DD	imagerel init_bldopts_strings+375
	DD	imagerel $unwind$init_bldopts_strings
$pdata$init_extpkgs_strings DD imagerel init_extpkgs_strings
	DD	imagerel init_extpkgs_strings+619
	DD	imagerel $unwind$init_extpkgs_strings
$pdata$append_ptr_to_array DD imagerel append_ptr_to_array
	DD	imagerel append_ptr_to_array+105
	DD	imagerel $unwind$append_ptr_to_array
pdata	ENDS
_DATA	SEGMENT
$SG159098 DB	'%s', 0aH, 00H
$SG159099 DB	'%s', 0aH, 00H
build_info DQ	FLAT:$SG159052
	DQ	FLAT:$SG159053
	DQ	FLAT:$SG159054
	DQ	FLAT:$SG159055
	DQ	FLAT:$SG159056
	DQ	FLAT:$SG159057
	DQ	FLAT:$SG159058
	DQ	FLAT:$SG159059
	DQ	FLAT:$SG159060
	DQ	FLAT:$SG159061
	DQ	FLAT:$SG159062
	DQ	FLAT:$SG159063
	DQ	FLAT:$SG159064
	DQ	FLAT:$SG159065
	DQ	FLAT:$SG159066
	DQ	FLAT:$SG159067
	DQ	FLAT:$SG159068
	DQ	FLAT:$SG159069
	DQ	FLAT:$SG159070
	DQ	FLAT:$SG159071
	DQ	FLAT:$SG159072
	DQ	FLAT:$SG159073
	DQ	FLAT:$SG159074
	DQ	FLAT:$SG159075
	DQ	FLAT:$SG159076
	DQ	FLAT:$SG159077
	DQ	FLAT:$SG159078
	DQ	FLAT:$SG159079
	DQ	FLAT:$SG159080
	DQ	FLAT:$SG159081
$SG159100 DB	'%s', 0aH, 00H
$SG159120 DB	'I', 00H
	ORG $+2
$SG159101 DB	'display_str', 00H
$SG159192 DB	'I', 00H
	ORG $+2
$SG159102 DB	'version.c', 00H
	ORG $+2
$SG159122 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159196 DB	'I', 00H
	ORG $+2
$SG159119 DB	'4.6.0.10893-SDL-DEV-g5b56a850-modified', 00H
	ORG $+1
$SG159121 DB	'HHC01413%s %s version %s', 0aH, 00H
	ORG $+2
$SG159198 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159200 DB	'I', 00H
	ORG $+2
$SG159191 DB	'4.6.0.10893-SDL-DEV-g5b56a850-modified', 00H
	ORG $+1
$SG159193 DB	'HHC02499%s Hercules utility %s - version %s', 0aH, 00H
	ORG $+3
$SG159194 DB	'4.6.0.10893-SDL-DEV-g5b56a850-modified', 00H
	ORG $+1
$SG159195 DB	'Hercules', 00H
	ORG $+3
$SG159202 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159204 DB	'I', 00H
	ORG $+2
$SG159197 DB	'HHC01413%s %s version %s', 0aH, 00H
	ORG $+6
$SG159201 DB	'HHC01414%s %s', 0aH, 00H
	ORG $+1
$SG159206 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159199 DB	'(C) Copyright 1999-2023 by Roger Bowler, Jan Jaeger, and'
	DB	' others', 00H
$SG159203 DB	'** The SoftDevLabs version of Hercules **', 00H
	ORG $+2
$SG159209 DB	'I', 00H
	ORG $+2
$SG159205 DB	'HHC01417%s %s', 0aH, 00H
	ORG $+1
$SG159207 DB	'19:16:23', 00H
	ORG $+3
$SG159211 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159234 DB	'I', 00H
	ORG $+2
$SG159208 DB	'Feb  6 2023', 00H
$SG159237 DB	'I', 00H
	ORG $+2
$SG159210 DB	'HHC01415%s Build date: %s at %s', 0aH, 00H
	ORG $+3
$SG159236 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159264 DB	'I', 00H
	ORG $+2
$SG159235 DB	'HHC01417%s %s', 0aH, 00H
	ORG $+1
$SG159238 DB	'HHC01417%s %s', 0aH, 00H
	ORG $+1
$SG159239 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159262 DB	'crypto', 00H
	ORG $+1
$SG159263 DB	'Built with %s external package version %s', 00H
	ORG $+2
$SG159266 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159269 DB	'I', 00H
	ORG $+2
$SG159265 DB	'HHC01417%s %s', 0aH, 00H
	ORG $+1
$SG159267 DB	'decNumber', 00H
	ORG $+2
$SG159271 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159274 DB	'I', 00H
	ORG $+2
$SG159268 DB	'Built with %s external package version %s', 00H
	ORG $+2
$SG159276 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159279 DB	'I', 00H
	ORG $+2
$SG159270 DB	'HHC01417%s %s', 0aH, 00H
	ORG $+1
$SG159272 DB	'SoftFloat', 00H
	ORG $+2
$SG159277 DB	'telnet', 00H
	ORG $+5
$SG159273 DB	'Built with %s external package version %s', 00H
	ORG $+6
$SG159275 DB	'HHC01417%s %s', 0aH, 00H
	ORG $+1
$SG159278 DB	'Built with %s external package version %s', 00H
	ORG $+6
$SG159280 DB	'HHC01417%s %s', 0aH, 00H
	ORG $+1
$SG159281 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:init_extpkgs_strings
	DD	011H
	DD	0253H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:init_bldopts_strings
	DD	011H
	DD	015fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:init_hercver_strings
	DD	016H
	DD	0207H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:display_version
	DD	01fH
	DD	0131H
voltbl	ENDS
xdata	SEGMENT
$unwind$init_sysblk_version_str_arrays DD 010901H
	DD	04209H
$unwind$display_version DD 022719H
	DD	02b0115H
	DD	imagerel __GSHandlerCheck
	DD	0140H
$unwind$display_build_options DD 010d01H
	DD	0620dH
$unwind$display_extpkg_vers DD 010d01H
	DD	0620dH
$unwind$display_str DD 011201H
	DD	08212H
$unwind$init_hercver_strings DD 021e19H
	DD	02b010cH
	DD	imagerel __GSHandlerCheck
	DD	0140H
$unwind$init_bldopts_strings DD 021919H
	DD	04f0107H
	DD	imagerel __GSHandlerCheck
	DD	0260H
$unwind$init_extpkgs_strings DD 021919H
	DD	04d0107H
	DD	imagerel __GSHandlerCheck
	DD	0250H
$unwind$append_ptr_to_array DD 011301H
	DD	04213H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\version.c
_TEXT	SEGMENT
count$ = 48
array$ = 56
ptr$ = 64
append_ptr_to_array PROC

; 877  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 878  :     *array = realloc( *array, ((*count) + 1) * sizeof( void* ));

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR count$[rsp]
  00018	8b 00		 mov	 eax, DWORD PTR [rax]
  0001a	ff c0		 inc	 eax
  0001c	48 98		 cdqe
  0001e	48 c1 e0 03	 shl	 rax, 3
  00022	48 8b d0	 mov	 rdx, rax
  00025	48 8b 44 24 38	 mov	 rax, QWORD PTR array$[rsp]
  0002a	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0002d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realloc
  00033	48 8b 4c 24 38	 mov	 rcx, QWORD PTR array$[rsp]
  00038	48 89 01	 mov	 QWORD PTR [rcx], rax

; 879  :     (*array)[ *count ] = ptr;

  0003b	48 8b 44 24 30	 mov	 rax, QWORD PTR count$[rsp]
  00040	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00043	48 8b 4c 24 38	 mov	 rcx, QWORD PTR array$[rsp]
  00048	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0004b	48 8b 54 24 40	 mov	 rdx, QWORD PTR ptr$[rsp]
  00050	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx

; 880  :     ++*count;

  00054	48 8b 44 24 30	 mov	 rax, QWORD PTR count$[rsp]
  00059	8b 00		 mov	 eax, DWORD PTR [rax]
  0005b	ff c0		 inc	 eax
  0005d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR count$[rsp]
  00062	89 01		 mov	 DWORD PTR [rcx], eax

; 881  : }

  00064	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00068	c3		 ret	 0
append_ptr_to_array ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\version.c
_TEXT	SEGMENT
count$ = 48
array$ = 56
pkgbuf$1 = 64
buf$2 = 320
__$ArrayPad$ = 592
init_extpkgs_strings PROC

; 946  : {

  00000	48 81 ec 68 02
	00 00		 sub	 rsp, 616		; 00000268H
  00007	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000e	48 33 c4	 xor	 rax, rsp
  00011	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 947  :     int count = 0;

  00019	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR count$[rsp], 0

; 948  :     const char*** array;
; 949  :     array = &sysblk.extpkg_vers;

  00021	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00028	48 83 c0 60	 add	 rax, 96			; 00000060H
  0002c	48 89 44 24 38	 mov	 QWORD PTR array$[rsp], rax

; 950  :     if (*array) return; /* already built */

  00031	48 8b 44 24 38	 mov	 rax, QWORD PTR array$[rsp]
  00036	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0003a	74 05		 je	 SHORT $LN2@init_extpk
  0003c	e9 12 02 00 00	 jmp	 $LN1@init_extpk
$LN2@init_extpk:

; 951  : 
; 952  :     {
; 953  :         char pkgbuf[256];
; 954  :         char buf[272];  /* to contain pkgbuf + message header and being conservative */
; 955  : 
; 956  :         MSGBUF( pkgbuf, "Built with %s external package version %s", "crypto", crypto_version());

  00041	e8 00 00 00 00	 call	 crypto_version
  00046	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159262
  00052	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159263
  00059	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0005e	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pkgbuf$1[rsp]
  00063	e8 00 00 00 00	 call	 w32_snprintf

; 957  :         MSGBUF( buf, MSG( HHC01417, "I", pkgbuf ));

  00068	48 8d 44 24 40	 lea	 rax, QWORD PTR pkgbuf$1[rsp]
  0006d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00072	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159264
  00079	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159265
  00080	ba 10 01 00 00	 mov	 edx, 272		; 00000110H
  00085	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR buf$2[rsp]
  0008d	e8 00 00 00 00	 call	 w32_snprintf

; 958  :         APPEND_STR( strdup( RTRIM( buf )));

  00092	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159266
  00099	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR buf$2[rsp]
  000a1	e8 00 00 00 00	 call	 rtrim
  000a6	48 8b c8	 mov	 rcx, rax
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  000af	4c 8b c0	 mov	 r8, rax
  000b2	48 8b 54 24 38	 mov	 rdx, QWORD PTR array$[rsp]
  000b7	48 8d 4c 24 30	 lea	 rcx, QWORD PTR count$[rsp]
  000bc	e8 00 00 00 00	 call	 append_ptr_to_array

; 959  : 
; 960  :         MSGBUF( pkgbuf, "Built with %s external package version %s", "decNumber", decnumber_version());

  000c1	e8 00 00 00 00	 call	 decnumber_version
  000c6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000cb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159267
  000d2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159268
  000d9	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  000de	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pkgbuf$1[rsp]
  000e3	e8 00 00 00 00	 call	 w32_snprintf

; 961  :         MSGBUF( buf, MSG( HHC01417, "I", pkgbuf ));

  000e8	48 8d 44 24 40	 lea	 rax, QWORD PTR pkgbuf$1[rsp]
  000ed	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159269
  000f9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159270
  00100	ba 10 01 00 00	 mov	 edx, 272		; 00000110H
  00105	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR buf$2[rsp]
  0010d	e8 00 00 00 00	 call	 w32_snprintf

; 962  :         APPEND_STR( strdup( RTRIM( buf )));

  00112	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159271
  00119	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR buf$2[rsp]
  00121	e8 00 00 00 00	 call	 rtrim
  00126	48 8b c8	 mov	 rcx, rax
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0012f	4c 8b c0	 mov	 r8, rax
  00132	48 8b 54 24 38	 mov	 rdx, QWORD PTR array$[rsp]
  00137	48 8d 4c 24 30	 lea	 rcx, QWORD PTR count$[rsp]
  0013c	e8 00 00 00 00	 call	 append_ptr_to_array

; 963  : 
; 964  :         MSGBUF( pkgbuf, "Built with %s external package version %s", "SoftFloat", softfloat_version());

  00141	e8 00 00 00 00	 call	 softfloat_version
  00146	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159272
  00152	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159273
  00159	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0015e	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pkgbuf$1[rsp]
  00163	e8 00 00 00 00	 call	 w32_snprintf

; 965  :         MSGBUF( buf, MSG( HHC01417, "I", pkgbuf ));

  00168	48 8d 44 24 40	 lea	 rax, QWORD PTR pkgbuf$1[rsp]
  0016d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00172	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159274
  00179	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159275
  00180	ba 10 01 00 00	 mov	 edx, 272		; 00000110H
  00185	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR buf$2[rsp]
  0018d	e8 00 00 00 00	 call	 w32_snprintf

; 966  :         APPEND_STR( strdup( RTRIM( buf )));

  00192	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159276
  00199	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR buf$2[rsp]
  001a1	e8 00 00 00 00	 call	 rtrim
  001a6	48 8b c8	 mov	 rcx, rax
  001a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  001af	4c 8b c0	 mov	 r8, rax
  001b2	48 8b 54 24 38	 mov	 rdx, QWORD PTR array$[rsp]
  001b7	48 8d 4c 24 30	 lea	 rcx, QWORD PTR count$[rsp]
  001bc	e8 00 00 00 00	 call	 append_ptr_to_array

; 967  : 
; 968  :         MSGBUF( pkgbuf, "Built with %s external package version %s", "telnet", telnet_version());

  001c1	e8 00 00 00 00	 call	 telnet_version
  001c6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001cb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159277
  001d2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159278
  001d9	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  001de	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pkgbuf$1[rsp]
  001e3	e8 00 00 00 00	 call	 w32_snprintf

; 969  :         MSGBUF( buf, MSG( HHC01417, "I", pkgbuf ));

  001e8	48 8d 44 24 40	 lea	 rax, QWORD PTR pkgbuf$1[rsp]
  001ed	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159279
  001f9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159280
  00200	ba 10 01 00 00	 mov	 edx, 272		; 00000110H
  00205	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR buf$2[rsp]
  0020d	e8 00 00 00 00	 call	 w32_snprintf

; 970  :         APPEND_STR( strdup( RTRIM( buf )));

  00212	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159281
  00219	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR buf$2[rsp]
  00221	e8 00 00 00 00	 call	 rtrim
  00226	48 8b c8	 mov	 rcx, rax
  00229	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0022f	4c 8b c0	 mov	 r8, rax
  00232	48 8b 54 24 38	 mov	 rdx, QWORD PTR array$[rsp]
  00237	48 8d 4c 24 30	 lea	 rcx, QWORD PTR count$[rsp]
  0023c	e8 00 00 00 00	 call	 append_ptr_to_array

; 971  :     }
; 972  : 
; 973  :     APPEND_STR( NULL );

  00241	45 33 c0	 xor	 r8d, r8d
  00244	48 8b 54 24 38	 mov	 rdx, QWORD PTR array$[rsp]
  00249	48 8d 4c 24 30	 lea	 rcx, QWORD PTR count$[rsp]
  0024e	e8 00 00 00 00	 call	 append_ptr_to_array
$LN1@init_extpk:

; 974  : }

  00253	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0025b	48 33 cc	 xor	 rcx, rsp
  0025e	e8 00 00 00 00	 call	 __security_check_cookie
  00263	48 81 c4 68 02
	00 00		 add	 rsp, 616		; 00000268H
  0026a	c3		 ret	 0
init_extpkgs_strings ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\version.c
_TEXT	SEGMENT
num_strs$1 = 48
count$ = 52
ppszBldInfoStr$2 = 56
array$ = 64
buf$3 = 80
wrkbuf$4 = 352
__$ArrayPad$ = 608
init_bldopts_strings PROC

; 913  : {

  00000	48 81 ec 78 02
	00 00		 sub	 rsp, 632		; 00000278H
  00007	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000e	48 33 c4	 xor	 rax, rsp
  00011	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 914  :     int count = 0;

  00019	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR count$[rsp], 0

; 915  :     const char*** array;
; 916  :     array = &sysblk.bld_opts;

  00021	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00028	48 83 c0 58	 add	 rax, 88			; 00000058H
  0002c	48 89 44 24 40	 mov	 QWORD PTR array$[rsp], rax

; 917  :     if (*array) return; /* already built */

  00031	48 8b 44 24 40	 mov	 rax, QWORD PTR array$[rsp]
  00036	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0003a	74 05		 je	 SHORT $LN5@init_bldop
  0003c	e9 1e 01 00 00	 jmp	 $LN1@init_bldop
$LN5@init_bldop:

; 918  : 
; 919  :     {
; 920  :         unsigned int num_strs;
; 921  :         const char** ppszBldInfoStr = NULL;

  00041	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR ppszBldInfoStr$2[rsp], 0

; 922  :         char wrkbuf[256];
; 923  :         char buf[272];
; 924  : 
; 925  :         num_strs = get_buildinfo_strings( &ppszBldInfoStr );

  0004a	48 8d 4c 24 38	 lea	 rcx, QWORD PTR ppszBldInfoStr$2[rsp]
  0004f	e8 00 00 00 00	 call	 get_buildinfo_strings
  00054	89 44 24 30	 mov	 DWORD PTR num_strs$1[rsp], eax

; 926  : 
; 927  :         for (; num_strs; num_strs--, ppszBldInfoStr++ )

  00058	eb 18		 jmp	 SHORT $LN4@init_bldop
$LN2@init_bldop:
  0005a	8b 44 24 30	 mov	 eax, DWORD PTR num_strs$1[rsp]
  0005e	ff c8		 dec	 eax
  00060	89 44 24 30	 mov	 DWORD PTR num_strs$1[rsp], eax
  00064	48 8b 44 24 38	 mov	 rax, QWORD PTR ppszBldInfoStr$2[rsp]
  00069	48 83 c0 08	 add	 rax, 8
  0006d	48 89 44 24 38	 mov	 QWORD PTR ppszBldInfoStr$2[rsp], rax
$LN4@init_bldop:
  00072	83 7c 24 30 00	 cmp	 DWORD PTR num_strs$1[rsp], 0
  00077	74 58		 je	 SHORT $LN3@init_bldop

; 928  :         {
; 929  :             MSGBUF( buf, MSG( HHC01417, "I", *ppszBldInfoStr ));

  00079	48 8b 44 24 38	 mov	 rax, QWORD PTR ppszBldInfoStr$2[rsp]
  0007e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00081	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00086	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159234
  0008d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159235
  00094	ba 10 01 00 00	 mov	 edx, 272		; 00000110H
  00099	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$3[rsp]
  0009e	e8 00 00 00 00	 call	 w32_snprintf

; 930  :             APPEND_STR( strdup( RTRIM( buf )));

  000a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159236
  000aa	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$3[rsp]
  000af	e8 00 00 00 00	 call	 rtrim
  000b4	48 8b c8	 mov	 rcx, rax
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  000bd	4c 8b c0	 mov	 r8, rax
  000c0	48 8b 54 24 40	 mov	 rdx, QWORD PTR array$[rsp]
  000c5	48 8d 4c 24 34	 lea	 rcx, QWORD PTR count$[rsp]
  000ca	e8 00 00 00 00	 call	 append_ptr_to_array

; 931  :         }

  000cf	eb 89		 jmp	 SHORT $LN2@init_bldop
$LN3@init_bldop:

; 932  : 
; 933  :         init_hostinfo( &hostinfo );

  000d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:hostinfo
  000d8	e8 00 00 00 00	 call	 init_hostinfo

; 934  :         format_hostinfo( &hostinfo, wrkbuf, sizeof( wrkbuf ));

  000dd	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  000e3	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR wrkbuf$4[rsp]
  000eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:hostinfo
  000f2	e8 00 00 00 00	 call	 format_hostinfo

; 935  : 
; 936  :         MSGBUF( buf, MSG( HHC01417, "I", wrkbuf ));

  000f7	48 8d 84 24 60
	01 00 00	 lea	 rax, QWORD PTR wrkbuf$4[rsp]
  000ff	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00104	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159237
  0010b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159238
  00112	ba 10 01 00 00	 mov	 edx, 272		; 00000110H
  00117	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$3[rsp]
  0011c	e8 00 00 00 00	 call	 w32_snprintf

; 937  :         APPEND_STR( strdup( RTRIM( buf )));

  00121	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159239
  00128	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$3[rsp]
  0012d	e8 00 00 00 00	 call	 rtrim
  00132	48 8b c8	 mov	 rcx, rax
  00135	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0013b	4c 8b c0	 mov	 r8, rax
  0013e	48 8b 54 24 40	 mov	 rdx, QWORD PTR array$[rsp]
  00143	48 8d 4c 24 34	 lea	 rcx, QWORD PTR count$[rsp]
  00148	e8 00 00 00 00	 call	 append_ptr_to_array

; 938  :     }
; 939  : 
; 940  :     APPEND_STR( NULL );

  0014d	45 33 c0	 xor	 r8d, r8d
  00150	48 8b 54 24 40	 mov	 rdx, QWORD PTR array$[rsp]
  00155	48 8d 4c 24 34	 lea	 rcx, QWORD PTR count$[rsp]
  0015a	e8 00 00 00 00	 call	 append_ptr_to_array
$LN1@init_bldop:

; 941  : }

  0015f	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00167	48 33 cc	 xor	 rcx, rsp
  0016a	e8 00 00 00 00	 call	 __security_check_cookie
  0016f	48 81 c4 78 02
	00 00		 add	 rsp, 632		; 00000278H
  00176	c3		 ret	 0
init_bldopts_strings ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\version.c
_TEXT	SEGMENT
count$ = 48
array$ = 56
buf$ = 64
__$ArrayPad$ = 320
prog$ = 352
init_hercver_strings PROC

; 886  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 887  :     int count = 0; const char*** array = &sysblk.vers_info;

  0001e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR count$[rsp], 0
  00026	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0002d	48 83 c0 50	 add	 rax, 80			; 00000050H
  00031	48 89 44 24 38	 mov	 QWORD PTR array$[rsp], rax

; 888  :     char buf[256]; if (*array) return; // (already built)

  00036	48 8b 44 24 38	 mov	 rax, QWORD PTR array$[rsp]
  0003b	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0003f	74 05		 je	 SHORT $LN2@init_hercv
  00041	e9 c1 01 00 00	 jmp	 $LN1@init_hercv
$LN2@init_hercv:

; 889  : 
; 890  :     // prog = Utility (HHC02499), NULL = Hercules (HHC01413).
; 891  :     if (prog) MSGBUF( buf, MSG( HHC02499, "I",   prog,     VERSION ));

  00046	48 83 bc 24 60
	01 00 00 00	 cmp	 QWORD PTR prog$[rsp], 0
  0004f	74 38		 je	 SHORT $LN3@init_hercv
  00051	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159191
  00058	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0005d	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR prog$[rsp]
  00065	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159192
  00071	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159193
  00078	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0007d	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  00082	e8 00 00 00 00	 call	 w32_snprintf
  00087	eb 35		 jmp	 SHORT $LN4@init_hercv
$LN3@init_hercv:

; 892  :     else      MSGBUF( buf, MSG( HHC01413, "I", "Hercules", VERSION ));

  00089	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159194
  00090	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00095	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159195
  0009c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159196
  000a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159197
  000af	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  000b4	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  000b9	e8 00 00 00 00	 call	 w32_snprintf
$LN4@init_hercv:

; 893  : 
; 894  :     APPEND_STR( strdup( RTRIM( buf )));

  000be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159198
  000c5	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  000ca	e8 00 00 00 00	 call	 rtrim
  000cf	48 8b c8	 mov	 rcx, rax
  000d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  000d8	4c 8b c0	 mov	 r8, rax
  000db	48 8b 54 24 38	 mov	 rdx, QWORD PTR array$[rsp]
  000e0	48 8d 4c 24 30	 lea	 rcx, QWORD PTR count$[rsp]
  000e5	e8 00 00 00 00	 call	 append_ptr_to_array

; 895  : 
; 896  :     MSGBUF( buf, MSG( HHC01414, "I", HERCULES_COPYRIGHT ));

  000ea	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159199
  000f1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159200
  000fd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159201
  00104	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00109	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  0010e	e8 00 00 00 00	 call	 w32_snprintf

; 897  :     APPEND_STR( strdup( RTRIM( buf )));

  00113	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159202
  0011a	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  0011f	e8 00 00 00 00	 call	 rtrim
  00124	48 8b c8	 mov	 rcx, rax
  00127	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0012d	4c 8b c0	 mov	 r8, rax
  00130	48 8b 54 24 38	 mov	 rdx, QWORD PTR array$[rsp]
  00135	48 8d 4c 24 30	 lea	 rcx, QWORD PTR count$[rsp]
  0013a	e8 00 00 00 00	 call	 append_ptr_to_array

; 898  : 
; 899  : #if defined( CUSTOM_BUILD_STRING )
; 900  :     MSGBUF( buf, MSG( HHC01417, "I", CUSTOM_BUILD_STRING ));

  0013f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159203
  00146	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159204
  00152	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159205
  00159	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0015e	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  00163	e8 00 00 00 00	 call	 w32_snprintf

; 901  :     APPEND_STR( strdup( RTRIM( buf )));

  00168	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159206
  0016f	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  00174	e8 00 00 00 00	 call	 rtrim
  00179	48 8b c8	 mov	 rcx, rax
  0017c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00182	4c 8b c0	 mov	 r8, rax
  00185	48 8b 54 24 38	 mov	 rdx, QWORD PTR array$[rsp]
  0018a	48 8d 4c 24 30	 lea	 rcx, QWORD PTR count$[rsp]
  0018f	e8 00 00 00 00	 call	 append_ptr_to_array

; 902  : #endif
; 903  : 
; 904  :     MSGBUF( buf, MSG( HHC01415, "I", __DATE__, __TIME__ ));

  00194	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159207
  0019b	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001a0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159208
  001a7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ac	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159209
  001b3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159210
  001ba	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  001bf	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  001c4	e8 00 00 00 00	 call	 w32_snprintf

; 905  :     APPEND_STR( strdup( RTRIM( buf )));

  001c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159211
  001d0	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  001d5	e8 00 00 00 00	 call	 rtrim
  001da	48 8b c8	 mov	 rcx, rax
  001dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  001e3	4c 8b c0	 mov	 r8, rax
  001e6	48 8b 54 24 38	 mov	 rdx, QWORD PTR array$[rsp]
  001eb	48 8d 4c 24 30	 lea	 rcx, QWORD PTR count$[rsp]
  001f0	e8 00 00 00 00	 call	 append_ptr_to_array

; 906  : 
; 907  :     APPEND_STR( NULL );

  001f5	45 33 c0	 xor	 r8d, r8d
  001f8	48 8b 54 24 38	 mov	 rdx, QWORD PTR array$[rsp]
  001fd	48 8d 4c 24 30	 lea	 rcx, QWORD PTR count$[rsp]
  00202	e8 00 00 00 00	 call	 append_ptr_to_array
$LN1@init_hercv:

; 908  : }

  00207	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0020f	48 33 cc	 xor	 rcx, rsp
  00212	e8 00 00 00 00	 call	 __security_check_cookie
  00217	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  0021e	c3		 ret	 0
init_hercver_strings ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\version.c
_TEXT	SEGMENT
f$ = 80
httpfd$ = 88
str$ = 96
display_str PROC

; 789  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 790  :     if (f != stdout)

  00012	b9 01 00 00 00	 mov	 ecx, 1
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0001d	48 39 44 24 50	 cmp	 QWORD PTR f$[rsp], rax
  00022	74 36		 je	 SHORT $LN2@display_st

; 791  :         if (httpfd)

  00024	83 7c 24 58 00	 cmp	 DWORD PTR httpfd$[rsp], 0
  00029	74 17		 je	 SHORT $LN4@display_st

; 792  :             hprintf( httpfd, "%s\n", str );

  0002b	4c 8b 44 24 60	 mov	 r8, QWORD PTR str$[rsp]
  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159098
  00037	8b 4c 24 58	 mov	 ecx, DWORD PTR httpfd$[rsp]
  0003b	e8 00 00 00 00	 call	 hprintf
  00040	eb 16		 jmp	 SHORT $LN5@display_st
$LN4@display_st:

; 793  :         else
; 794  :             fprintf( f, "%s\n", str );

  00042	4c 8b 44 24 60	 mov	 r8, QWORD PTR str$[rsp]
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159099
  0004e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR f$[rsp]
  00053	e8 00 00 00 00	 call	 w32_fprintf
$LN5@display_st:
  00058	eb 44		 jmp	 SHORT $LN3@display_st
$LN2@display_st:

; 795  :     else
; 796  :         LOGMSG( "%s\n", str );

  0005a	b9 01 00 00 00	 mov	 ecx, 1
  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00065	48 8b 4c 24 60	 mov	 rcx, QWORD PTR str$[rsp]
  0006a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159100
  00076	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0007b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00080	41 b9 03 00 00
	00		 mov	 r9d, 3
  00086	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159101
  0008d	ba 1c 03 00 00	 mov	 edx, 796		; 0000031cH
  00092	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159102
  00099	e8 00 00 00 00	 call	 fwritemsg
$LN3@display_st:

; 797  : }

  0009e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a2	c3		 ret	 0
display_str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\version.c
_TEXT	SEGMENT
pppszBldInfoStr$ = 8
get_buildinfo_strings PROC

; 779  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 780  :     if (!pppszBldInfoStr) return 0;

  00005	48 83 7c 24 08
	00		 cmp	 QWORD PTR pppszBldInfoStr$[rsp], 0
  0000b	75 04		 jne	 SHORT $LN2@get_buildi
  0000d	33 c0		 xor	 eax, eax
  0000f	eb 14		 jmp	 SHORT $LN1@get_buildi
$LN2@get_buildi:

; 781  :     *pppszBldInfoStr = build_info;

  00011	48 8b 44 24 08	 mov	 rax, QWORD PTR pppszBldInfoStr$[rsp]
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:build_info
  0001d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 782  :     return ( sizeof(build_info) / sizeof(build_info[0]) );

  00020	b8 1e 00 00 00	 mov	 eax, 30
$LN1@get_buildi:

; 783  : }

  00025	c3		 ret	 0
get_buildinfo_strings ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\version.c
_TEXT	SEGMENT
p$ = 32
f$ = 64
httpfd$ = 72
display_extpkg_vers PROC

; 848  : {

$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 849  :     const char** p;
; 850  :     for (p = sysblk.extpkg_vers; *p; ++p)

  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00014	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00018	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  0001d	eb 0e		 jmp	 SHORT $LN4@display_ex
$LN2@display_ex:
  0001f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00024	48 83 c0 08	 add	 rax, 8
  00028	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
$LN4@display_ex:
  0002d	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00032	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00036	74 18		 je	 SHORT $LN3@display_ex

; 851  :         display_str( f, httpfd, *p );

  00038	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003d	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00040	8b 54 24 48	 mov	 edx, DWORD PTR httpfd$[rsp]
  00044	48 8b 4c 24 40	 mov	 rcx, QWORD PTR f$[rsp]
  00049	e8 00 00 00 00	 call	 display_str
  0004e	eb cf		 jmp	 SHORT $LN2@display_ex
$LN3@display_ex:

; 852  : }

  00050	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00054	c3		 ret	 0
display_extpkg_vers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\version.c
_TEXT	SEGMENT
p$ = 32
f$ = 64
httpfd$ = 72
display_build_options PROC

; 832  : {

$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 833  :     const char** p;
; 834  :     for (p = sysblk.bld_opts; *p; ++p)

  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00014	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00018	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  0001d	eb 0e		 jmp	 SHORT $LN4@display_bu
$LN2@display_bu:
  0001f	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00024	48 83 c0 08	 add	 rax, 8
  00028	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
$LN4@display_bu:
  0002d	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00032	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00036	74 18		 je	 SHORT $LN3@display_bu

; 835  :         display_str( f, httpfd, *p );

  00038	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003d	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00040	8b 54 24 48	 mov	 edx, DWORD PTR httpfd$[rsp]
  00044	48 8b 4c 24 40	 mov	 rcx, QWORD PTR f$[rsp]
  00049	e8 00 00 00 00	 call	 display_str
  0004e	eb cf		 jmp	 SHORT $LN2@display_bu
$LN3@display_bu:

; 836  : }

  00050	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00054	c3		 ret	 0
display_build_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\version.c
_TEXT	SEGMENT
p$ = 48
buf$1 = 64
__$ArrayPad$ = 320
f$ = 352
httpfd$ = 360
prog$ = 368
display_version PROC

; 803  : {

$LN8:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 804  :     const char** p = sysblk.vers_info;

  00027	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0002e	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00032	48 89 44 24 30	 mov	 QWORD PTR p$[rsp], rax

; 805  : 
; 806  :     /* If external gui being used, set stdout & stderr streams
; 807  :        to unbuffered so we don't have to flush them all the time
; 808  :        in order to ensure consistent sequence of log messages.
; 809  :     */
; 810  :     if (extgui)

  00037	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  0003e	83 38 00	 cmp	 DWORD PTR [rax], 0
  00041	74 3e		 je	 SHORT $LN5@display_ve

; 811  :     {
; 812  :         setvbuf( stderr, NULL, _IONBF, 0 );

  00043	b9 02 00 00 00	 mov	 ecx, 2
  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0004e	45 33 c9	 xor	 r9d, r9d
  00051	41 b8 04 00 00
	00		 mov	 r8d, 4
  00057	33 d2		 xor	 edx, edx
  00059	48 8b c8	 mov	 rcx, rax
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setvbuf

; 813  :         setvbuf( stdout, NULL, _IONBF, 0 );

  00062	b9 01 00 00 00	 mov	 ecx, 1
  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0006d	45 33 c9	 xor	 r9d, r9d
  00070	41 b8 04 00 00
	00		 mov	 r8d, 4
  00076	33 d2		 xor	 edx, edx
  00078	48 8b c8	 mov	 rcx, rax
  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setvbuf
$LN5@display_ve:

; 814  :     }
; 815  : 
; 816  :     if (prog)  // called from e.g. "cgibin_debug_version_info()"?

  00081	48 83 bc 24 70
	01 00 00 00	 cmp	 QWORD PTR prog$[rsp], 0
  0008a	74 6c		 je	 SHORT $LN6@display_ve

; 817  :     {
; 818  :         char buf[256];
; 819  :         MSGBUF( buf, MSG( HHC01413, "I", prog, VERSION ));

  0008c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159119
  00093	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00098	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR prog$[rsp]
  000a0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159120
  000ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159121
  000b3	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  000b8	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$1[rsp]
  000bd	e8 00 00 00 00	 call	 w32_snprintf

; 820  :         display_str( f, httpfd, RTRIM( buf ));

  000c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159122
  000c9	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$1[rsp]
  000ce	e8 00 00 00 00	 call	 rtrim
  000d3	4c 8b c0	 mov	 r8, rax
  000d6	8b 94 24 68 01
	00 00		 mov	 edx, DWORD PTR httpfd$[rsp]
  000dd	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR f$[rsp]
  000e5	e8 00 00 00 00	 call	 display_str

; 821  :         ++p; // (skip past first str)

  000ea	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  000ef	48 83 c0 08	 add	 rax, 8
  000f3	48 89 44 24 30	 mov	 QWORD PTR p$[rsp], rax
$LN6@display_ve:

; 822  :     }
; 823  : 
; 824  :     for (; *p; ++p)

  000f8	eb 0e		 jmp	 SHORT $LN4@display_ve
$LN2@display_ve:
  000fa	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  000ff	48 83 c0 08	 add	 rax, 8
  00103	48 89 44 24 30	 mov	 QWORD PTR p$[rsp], rax
$LN4@display_ve:
  00108	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  0010d	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00111	74 1e		 je	 SHORT $LN3@display_ve

; 825  :         display_str( f, httpfd, *p );

  00113	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  00118	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  0011b	8b 94 24 68 01
	00 00		 mov	 edx, DWORD PTR httpfd$[rsp]
  00122	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR f$[rsp]
  0012a	e8 00 00 00 00	 call	 display_str
  0012f	eb c9		 jmp	 SHORT $LN2@display_ve
$LN3@display_ve:

; 826  : }

  00131	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00139	48 33 cc	 xor	 rcx, rsp
  0013c	e8 00 00 00 00	 call	 __security_check_cookie
  00141	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  00148	c3		 ret	 0
display_version ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\version.c
_TEXT	SEGMENT
prog$ = 48
init_sysblk_version_str_arrays PROC

; 865  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 866  :     init_hercver_strings( prog );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR prog$[rsp]
  0000e	e8 00 00 00 00	 call	 init_hercver_strings

; 867  :     init_bldopts_strings();

  00013	e8 00 00 00 00	 call	 init_bldopts_strings

; 868  :     init_extpkgs_strings();

  00018	e8 00 00 00 00	 call	 init_extpkgs_strings

; 869  : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
init_sysblk_version_str_arrays ENDP
_TEXT	ENDS
END
