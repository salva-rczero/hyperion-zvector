; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	z900_PutGetCBNTab
PUBLIC	z900_PutIndexCDSSTab
PUBLIC	z900_PutIndex009
PUBLIC	z900_PutIndex109
PUBLIC	z900_PutIndex209
PUBLIC	z900_PutIndex309
PUBLIC	z900_PutIndex409
PUBLIC	z900_PutIndex509
PUBLIC	z900_PutIndex609
PUBLIC	z900_PutIndex709
PUBLIC	z900_PutIndex010
PUBLIC	z900_PutIndex110
PUBLIC	z900_PutIndex210
PUBLIC	z900_PutIndex310
PUBLIC	z900_PutIndex410
PUBLIC	z900_PutIndex510
PUBLIC	z900_PutIndex610
PUBLIC	z900_PutIndex710
PUBLIC	z900_PutIndex011
PUBLIC	z900_PutIndex111
PUBLIC	z900_PutIndex211
PUBLIC	z900_PutIndex311
PUBLIC	z900_PutIndex411
PUBLIC	z900_PutIndex511
PUBLIC	z900_PutIndex611
PUBLIC	z900_PutIndex711
PUBLIC	z900_PutIndex012
PUBLIC	z900_PutIndex112
PUBLIC	z900_PutIndex212
PUBLIC	z900_PutIndex312
PUBLIC	z900_PutIndex412
PUBLIC	z900_PutIndex512
PUBLIC	z900_PutIndex612
PUBLIC	z900_PutIndex712
PUBLIC	z900_PutIndex013
PUBLIC	z900_PutIndex113
PUBLIC	z900_PutIndex213
PUBLIC	z900_PutIndex313
PUBLIC	z900_PutIndex413
PUBLIC	z900_PutIndex513
PUBLIC	z900_PutIndex613
PUBLIC	z900_PutIndex713
PUBLIC	z900_PutGetCBN09
PUBLIC	z900_PutGetCBN10
PUBLIC	z900_PutGetCBN11
PUBLIC	z900_PutGetCBN12
PUBLIC	z900_PutGetCBN13
PUBLIC	z900_PutIndexTab09
PUBLIC	z900_PutIndexTab10
PUBLIC	z900_PutIndexTab11
PUBLIC	z900_PutIndexTab12
PUBLIC	z900_PutIndexTab13
PUBLIC	s370_PutGetCBNTab
PUBLIC	s370_PutIndexCDSSTab
PUBLIC	s370_PutIndex009
PUBLIC	s370_PutIndex109
PUBLIC	s370_PutIndex209
PUBLIC	s370_PutIndex309
PUBLIC	s370_PutIndex409
PUBLIC	s370_PutIndex509
PUBLIC	s370_PutIndex609
PUBLIC	s370_PutIndex709
PUBLIC	s370_PutIndex010
PUBLIC	s370_PutIndex110
PUBLIC	s370_PutIndex210
PUBLIC	s370_PutIndex310
PUBLIC	s370_PutIndex410
PUBLIC	s370_PutIndex510
PUBLIC	s370_PutIndex610
PUBLIC	s370_PutIndex710
PUBLIC	s370_PutIndex011
PUBLIC	s370_PutIndex111
PUBLIC	s370_PutIndex211
PUBLIC	s370_PutIndex311
PUBLIC	s370_PutIndex411
PUBLIC	s370_PutIndex511
PUBLIC	s370_PutIndex611
PUBLIC	s370_PutIndex711
PUBLIC	s370_PutIndex012
PUBLIC	s370_PutIndex112
PUBLIC	s370_PutIndex212
PUBLIC	s370_PutIndex312
PUBLIC	s370_PutIndex412
PUBLIC	s370_PutIndex512
PUBLIC	s370_PutIndex612
PUBLIC	s370_PutIndex712
PUBLIC	s370_PutIndex013
PUBLIC	s370_PutIndex113
PUBLIC	s370_PutIndex213
PUBLIC	s370_PutIndex313
PUBLIC	s370_PutIndex413
PUBLIC	s370_PutIndex513
PUBLIC	s370_PutIndex613
PUBLIC	s370_PutIndex713
PUBLIC	s370_PutGetCBN09
PUBLIC	s370_PutGetCBN10
PUBLIC	s370_PutGetCBN11
PUBLIC	s370_PutGetCBN12
PUBLIC	s370_PutGetCBN13
PUBLIC	s370_PutIndexTab09
PUBLIC	s370_PutIndexTab10
PUBLIC	s370_PutIndexTab11
PUBLIC	s370_PutIndexTab12
PUBLIC	s370_PutIndexTab13
PUBLIC	s390_PutGetCBNTab
PUBLIC	s390_PutIndexCDSSTab
PUBLIC	s390_PutIndex009
PUBLIC	s390_PutIndex109
PUBLIC	s390_PutIndex209
PUBLIC	s390_PutIndex309
PUBLIC	s390_PutIndex409
PUBLIC	s390_PutIndex509
PUBLIC	s390_PutIndex609
PUBLIC	s390_PutIndex709
PUBLIC	s390_PutIndex010
PUBLIC	s390_PutIndex110
PUBLIC	s390_PutIndex210
PUBLIC	s390_PutIndex310
PUBLIC	s390_PutIndex410
PUBLIC	s390_PutIndex510
PUBLIC	s390_PutIndex610
PUBLIC	s390_PutIndex710
PUBLIC	s390_PutIndex011
PUBLIC	s390_PutIndex111
PUBLIC	s390_PutIndex211
PUBLIC	s390_PutIndex311
PUBLIC	s390_PutIndex411
PUBLIC	s390_PutIndex511
PUBLIC	s390_PutIndex611
PUBLIC	s390_PutIndex711
PUBLIC	s390_PutIndex012
PUBLIC	s390_PutIndex112
PUBLIC	s390_PutIndex212
PUBLIC	s390_PutIndex312
PUBLIC	s390_PutIndex412
PUBLIC	s390_PutIndex512
PUBLIC	s390_PutIndex612
PUBLIC	s390_PutIndex712
PUBLIC	s390_PutIndex013
PUBLIC	s390_PutIndex113
PUBLIC	s390_PutIndex213
PUBLIC	s390_PutIndex313
PUBLIC	s390_PutIndex413
PUBLIC	s390_PutIndex513
PUBLIC	s390_PutIndex613
PUBLIC	s390_PutIndex713
PUBLIC	s390_PutGetCBN09
PUBLIC	s390_PutGetCBN10
PUBLIC	s390_PutGetCBN11
PUBLIC	s390_PutGetCBN12
PUBLIC	s390_PutGetCBN13
PUBLIC	s390_PutIndexTab09
PUBLIC	s390_PutIndexTab10
PUBLIC	s390_PutIndexTab11
PUBLIC	s390_PutIndexTab12
PUBLIC	s390_PutIndexTab13
_DATA	SEGMENT
z900_PutGetCBNTab DQ FLAT:z900_PutGetCBN09
	DQ	FLAT:z900_PutGetCBN10
	DQ	FLAT:z900_PutGetCBN11
	DQ	FLAT:z900_PutGetCBN12
	DQ	FLAT:z900_PutGetCBN13
z900_PutIndexCDSSTab DQ FLAT:z900_PutIndexTab09
	DQ	FLAT:z900_PutIndexTab10
	DQ	FLAT:z900_PutIndexTab11
	DQ	FLAT:z900_PutIndexTab12
	DQ	FLAT:z900_PutIndexTab13
z900_PutIndexTab09 DQ FLAT:z900_PutIndex009
	DQ	FLAT:z900_PutIndex109
	DQ	FLAT:z900_PutIndex209
	DQ	FLAT:z900_PutIndex309
	DQ	FLAT:z900_PutIndex409
	DQ	FLAT:z900_PutIndex509
	DQ	FLAT:z900_PutIndex609
	DQ	FLAT:z900_PutIndex709
z900_PutIndexTab10 DQ FLAT:z900_PutIndex010
	DQ	FLAT:z900_PutIndex110
	DQ	FLAT:z900_PutIndex210
	DQ	FLAT:z900_PutIndex310
	DQ	FLAT:z900_PutIndex410
	DQ	FLAT:z900_PutIndex510
	DQ	FLAT:z900_PutIndex610
	DQ	FLAT:z900_PutIndex710
z900_PutIndexTab11 DQ FLAT:z900_PutIndex011
	DQ	FLAT:z900_PutIndex111
	DQ	FLAT:z900_PutIndex211
	DQ	FLAT:z900_PutIndex311
	DQ	FLAT:z900_PutIndex411
	DQ	FLAT:z900_PutIndex511
	DQ	FLAT:z900_PutIndex611
	DQ	FLAT:z900_PutIndex711
z900_PutIndexTab12 DQ FLAT:z900_PutIndex012
	DQ	FLAT:z900_PutIndex112
	DQ	FLAT:z900_PutIndex212
	DQ	FLAT:z900_PutIndex312
	DQ	FLAT:z900_PutIndex412
	DQ	FLAT:z900_PutIndex512
	DQ	FLAT:z900_PutIndex612
	DQ	FLAT:z900_PutIndex712
z900_PutIndexTab13 DQ FLAT:z900_PutIndex013
	DQ	FLAT:z900_PutIndex113
	DQ	FLAT:z900_PutIndex213
	DQ	FLAT:z900_PutIndex313
	DQ	FLAT:z900_PutIndex413
	DQ	FLAT:z900_PutIndex513
	DQ	FLAT:z900_PutIndex613
	DQ	FLAT:z900_PutIndex713
s370_PutGetCBNTab DQ FLAT:s370_PutGetCBN09
	DQ	FLAT:s370_PutGetCBN10
	DQ	FLAT:s370_PutGetCBN11
	DQ	FLAT:s370_PutGetCBN12
	DQ	FLAT:s370_PutGetCBN13
s370_PutIndexCDSSTab DQ FLAT:s370_PutIndexTab09
	DQ	FLAT:s370_PutIndexTab10
	DQ	FLAT:s370_PutIndexTab11
	DQ	FLAT:s370_PutIndexTab12
	DQ	FLAT:s370_PutIndexTab13
s370_PutIndexTab09 DQ FLAT:s370_PutIndex009
	DQ	FLAT:s370_PutIndex109
	DQ	FLAT:s370_PutIndex209
	DQ	FLAT:s370_PutIndex309
	DQ	FLAT:s370_PutIndex409
	DQ	FLAT:s370_PutIndex509
	DQ	FLAT:s370_PutIndex609
	DQ	FLAT:s370_PutIndex709
s370_PutIndexTab10 DQ FLAT:s370_PutIndex010
	DQ	FLAT:s370_PutIndex110
	DQ	FLAT:s370_PutIndex210
	DQ	FLAT:s370_PutIndex310
	DQ	FLAT:s370_PutIndex410
	DQ	FLAT:s370_PutIndex510
	DQ	FLAT:s370_PutIndex610
	DQ	FLAT:s370_PutIndex710
s370_PutIndexTab11 DQ FLAT:s370_PutIndex011
	DQ	FLAT:s370_PutIndex111
	DQ	FLAT:s370_PutIndex211
	DQ	FLAT:s370_PutIndex311
	DQ	FLAT:s370_PutIndex411
	DQ	FLAT:s370_PutIndex511
	DQ	FLAT:s370_PutIndex611
	DQ	FLAT:s370_PutIndex711
s370_PutIndexTab12 DQ FLAT:s370_PutIndex012
	DQ	FLAT:s370_PutIndex112
	DQ	FLAT:s370_PutIndex212
	DQ	FLAT:s370_PutIndex312
	DQ	FLAT:s370_PutIndex412
	DQ	FLAT:s370_PutIndex512
	DQ	FLAT:s370_PutIndex612
	DQ	FLAT:s370_PutIndex712
s370_PutIndexTab13 DQ FLAT:s370_PutIndex013
	DQ	FLAT:s370_PutIndex113
	DQ	FLAT:s370_PutIndex213
	DQ	FLAT:s370_PutIndex313
	DQ	FLAT:s370_PutIndex413
	DQ	FLAT:s370_PutIndex513
	DQ	FLAT:s370_PutIndex613
	DQ	FLAT:s370_PutIndex713
s390_PutGetCBNTab DQ FLAT:s390_PutGetCBN09
	DQ	FLAT:s390_PutGetCBN10
	DQ	FLAT:s390_PutGetCBN11
	DQ	FLAT:s390_PutGetCBN12
	DQ	FLAT:s390_PutGetCBN13
s390_PutIndexCDSSTab DQ FLAT:s390_PutIndexTab09
	DQ	FLAT:s390_PutIndexTab10
	DQ	FLAT:s390_PutIndexTab11
	DQ	FLAT:s390_PutIndexTab12
	DQ	FLAT:s390_PutIndexTab13
s390_PutIndexTab09 DQ FLAT:s390_PutIndex009
	DQ	FLAT:s390_PutIndex109
	DQ	FLAT:s390_PutIndex209
	DQ	FLAT:s390_PutIndex309
	DQ	FLAT:s390_PutIndex409
	DQ	FLAT:s390_PutIndex509
	DQ	FLAT:s390_PutIndex609
	DQ	FLAT:s390_PutIndex709
s390_PutIndexTab10 DQ FLAT:s390_PutIndex010
	DQ	FLAT:s390_PutIndex110
	DQ	FLAT:s390_PutIndex210
	DQ	FLAT:s390_PutIndex310
	DQ	FLAT:s390_PutIndex410
	DQ	FLAT:s390_PutIndex510
	DQ	FLAT:s390_PutIndex610
	DQ	FLAT:s390_PutIndex710
s390_PutIndexTab11 DQ FLAT:s390_PutIndex011
	DQ	FLAT:s390_PutIndex111
	DQ	FLAT:s390_PutIndex211
	DQ	FLAT:s390_PutIndex311
	DQ	FLAT:s390_PutIndex411
	DQ	FLAT:s390_PutIndex511
	DQ	FLAT:s390_PutIndex611
	DQ	FLAT:s390_PutIndex711
s390_PutIndexTab12 DQ FLAT:s390_PutIndex012
	DQ	FLAT:s390_PutIndex112
	DQ	FLAT:s390_PutIndex212
	DQ	FLAT:s390_PutIndex312
	DQ	FLAT:s390_PutIndex412
	DQ	FLAT:s390_PutIndex512
	DQ	FLAT:s390_PutIndex612
	DQ	FLAT:s390_PutIndex712
s390_PutIndexTab13 DQ FLAT:s390_PutIndex013
	DQ	FLAT:s390_PutIndex113
	DQ	FLAT:s390_PutIndex213
	DQ	FLAT:s390_PutIndex313
	DQ	FLAT:s390_PutIndex413
	DQ	FLAT:s390_PutIndex513
	DQ	FLAT:s390_PutIndex613
	DQ	FLAT:s390_PutIndex713
_DATA	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
EXTRN	s370_cmpsc_vfetchb:PROC
EXTRN	s370_cmpsc_vstoreb:PROC
EXTRN	s370_cmpsc_vstore2:PROC
EXTRN	s390_cmpsc_vfetchb:PROC
EXTRN	s390_cmpsc_vstoreb:PROC
EXTRN	s390_cmpsc_vstore2:PROC
EXTRN	z900_cmpsc_vfetchb:PROC
EXTRN	z900_cmpsc_vstoreb:PROC
EXTRN	z900_cmpsc_vstore2:PROC
pdata	SEGMENT
$pdata$s370_PutIndex009 DD imagerel $LN5
	DD	imagerel $LN5+159
	DD	imagerel $unwind$s370_PutIndex009
$pdata$s370_PutIndex109 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s370_PutIndex109
$pdata$s370_PutIndex209 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s370_PutIndex209
$pdata$s370_PutIndex309 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s370_PutIndex309
$pdata$s370_PutIndex409 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s370_PutIndex409
$pdata$s370_PutIndex509 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s370_PutIndex509
$pdata$s370_PutIndex609 DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$s370_PutIndex609
$pdata$s370_PutIndex709 DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$s370_PutIndex709
$pdata$s370_PutIndex010 DD imagerel $LN5
	DD	imagerel $LN5+159
	DD	imagerel $unwind$s370_PutIndex010
$pdata$s370_PutIndex110 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s370_PutIndex110
$pdata$s370_PutIndex210 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s370_PutIndex210
$pdata$s370_PutIndex310 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s370_PutIndex310
$pdata$s370_PutIndex410 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s370_PutIndex410
$pdata$s370_PutIndex510 DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$s370_PutIndex510
$pdata$s370_PutIndex610 DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$s370_PutIndex610
$pdata$s370_PutIndex710 DD imagerel $LN5
	DD	imagerel $LN5+276
	DD	imagerel $unwind$s370_PutIndex710
$pdata$s370_PutIndex011 DD imagerel $LN5
	DD	imagerel $LN5+159
	DD	imagerel $unwind$s370_PutIndex011
$pdata$s370_PutIndex111 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s370_PutIndex111
$pdata$s370_PutIndex211 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s370_PutIndex211
$pdata$s370_PutIndex311 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s370_PutIndex311
$pdata$s370_PutIndex411 DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$s370_PutIndex411
$pdata$s370_PutIndex511 DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$s370_PutIndex511
$pdata$s370_PutIndex611 DD imagerel $LN5
	DD	imagerel $LN5+276
	DD	imagerel $unwind$s370_PutIndex611
$pdata$s370_PutIndex711 DD imagerel $LN5
	DD	imagerel $LN5+277
	DD	imagerel $unwind$s370_PutIndex711
$pdata$s370_PutIndex012 DD imagerel $LN5
	DD	imagerel $LN5+159
	DD	imagerel $unwind$s370_PutIndex012
$pdata$s370_PutIndex112 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s370_PutIndex112
$pdata$s370_PutIndex212 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s370_PutIndex212
$pdata$s370_PutIndex312 DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$s370_PutIndex312
$pdata$s370_PutIndex412 DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$s370_PutIndex412
$pdata$s370_PutIndex512 DD imagerel $LN5
	DD	imagerel $LN5+276
	DD	imagerel $unwind$s370_PutIndex512
$pdata$s370_PutIndex612 DD imagerel $LN5
	DD	imagerel $LN5+277
	DD	imagerel $unwind$s370_PutIndex612
$pdata$s370_PutIndex712 DD imagerel $LN5
	DD	imagerel $LN5+277
	DD	imagerel $unwind$s370_PutIndex712
$pdata$s370_PutIndex013 DD imagerel $LN5
	DD	imagerel $LN5+159
	DD	imagerel $unwind$s370_PutIndex013
$pdata$s370_PutIndex113 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s370_PutIndex113
$pdata$s370_PutIndex213 DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$s370_PutIndex213
$pdata$s370_PutIndex313 DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$s370_PutIndex313
$pdata$s370_PutIndex413 DD imagerel $LN5
	DD	imagerel $LN5+276
	DD	imagerel $unwind$s370_PutIndex413
$pdata$s370_PutIndex513 DD imagerel $LN5
	DD	imagerel $LN5+277
	DD	imagerel $unwind$s370_PutIndex513
$pdata$s370_PutIndex613 DD imagerel $LN5
	DD	imagerel $LN5+277
	DD	imagerel $unwind$s370_PutIndex613
$pdata$s370_PutIndex713 DD imagerel $LN5
	DD	imagerel $LN5+277
	DD	imagerel $unwind$s370_PutIndex713
$pdata$s390_PutIndex009 DD imagerel $LN5
	DD	imagerel $LN5+159
	DD	imagerel $unwind$s390_PutIndex009
$pdata$s390_PutIndex109 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s390_PutIndex109
$pdata$s390_PutIndex209 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s390_PutIndex209
$pdata$s390_PutIndex309 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s390_PutIndex309
$pdata$s390_PutIndex409 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s390_PutIndex409
$pdata$s390_PutIndex509 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s390_PutIndex509
$pdata$s390_PutIndex609 DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$s390_PutIndex609
$pdata$s390_PutIndex709 DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$s390_PutIndex709
$pdata$s390_PutIndex010 DD imagerel $LN5
	DD	imagerel $LN5+159
	DD	imagerel $unwind$s390_PutIndex010
$pdata$s390_PutIndex110 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s390_PutIndex110
$pdata$s390_PutIndex210 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s390_PutIndex210
$pdata$s390_PutIndex310 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s390_PutIndex310
$pdata$s390_PutIndex410 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s390_PutIndex410
$pdata$s390_PutIndex510 DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$s390_PutIndex510
$pdata$s390_PutIndex610 DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$s390_PutIndex610
$pdata$s390_PutIndex710 DD imagerel $LN5
	DD	imagerel $LN5+276
	DD	imagerel $unwind$s390_PutIndex710
$pdata$s390_PutIndex011 DD imagerel $LN5
	DD	imagerel $LN5+159
	DD	imagerel $unwind$s390_PutIndex011
$pdata$s390_PutIndex111 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s390_PutIndex111
$pdata$s390_PutIndex211 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s390_PutIndex211
$pdata$s390_PutIndex311 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s390_PutIndex311
$pdata$s390_PutIndex411 DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$s390_PutIndex411
$pdata$s390_PutIndex511 DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$s390_PutIndex511
$pdata$s390_PutIndex611 DD imagerel $LN5
	DD	imagerel $LN5+276
	DD	imagerel $unwind$s390_PutIndex611
$pdata$s390_PutIndex711 DD imagerel $LN5
	DD	imagerel $LN5+277
	DD	imagerel $unwind$s390_PutIndex711
$pdata$s390_PutIndex012 DD imagerel $LN5
	DD	imagerel $LN5+159
	DD	imagerel $unwind$s390_PutIndex012
$pdata$s390_PutIndex112 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s390_PutIndex112
$pdata$s390_PutIndex212 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s390_PutIndex212
$pdata$s390_PutIndex312 DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$s390_PutIndex312
$pdata$s390_PutIndex412 DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$s390_PutIndex412
$pdata$s390_PutIndex512 DD imagerel $LN5
	DD	imagerel $LN5+276
	DD	imagerel $unwind$s390_PutIndex512
$pdata$s390_PutIndex612 DD imagerel $LN5
	DD	imagerel $LN5+277
	DD	imagerel $unwind$s390_PutIndex612
$pdata$s390_PutIndex712 DD imagerel $LN5
	DD	imagerel $LN5+277
	DD	imagerel $unwind$s390_PutIndex712
$pdata$s390_PutIndex013 DD imagerel $LN5
	DD	imagerel $LN5+159
	DD	imagerel $unwind$s390_PutIndex013
$pdata$s390_PutIndex113 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$s390_PutIndex113
$pdata$s390_PutIndex213 DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$s390_PutIndex213
$pdata$s390_PutIndex313 DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$s390_PutIndex313
$pdata$s390_PutIndex413 DD imagerel $LN5
	DD	imagerel $LN5+276
	DD	imagerel $unwind$s390_PutIndex413
$pdata$s390_PutIndex513 DD imagerel $LN5
	DD	imagerel $LN5+277
	DD	imagerel $unwind$s390_PutIndex513
$pdata$s390_PutIndex613 DD imagerel $LN5
	DD	imagerel $LN5+277
	DD	imagerel $unwind$s390_PutIndex613
$pdata$s390_PutIndex713 DD imagerel $LN5
	DD	imagerel $LN5+277
	DD	imagerel $unwind$s390_PutIndex713
$pdata$z900_PutIndex009 DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$z900_PutIndex009
$pdata$z900_PutIndex109 DD imagerel $LN5
	DD	imagerel $LN5+232
	DD	imagerel $unwind$z900_PutIndex109
$pdata$z900_PutIndex209 DD imagerel $LN5
	DD	imagerel $LN5+232
	DD	imagerel $unwind$z900_PutIndex209
$pdata$z900_PutIndex309 DD imagerel $LN5
	DD	imagerel $LN5+232
	DD	imagerel $unwind$z900_PutIndex309
$pdata$z900_PutIndex409 DD imagerel $LN5
	DD	imagerel $LN5+232
	DD	imagerel $unwind$z900_PutIndex409
$pdata$z900_PutIndex509 DD imagerel $LN5
	DD	imagerel $LN5+232
	DD	imagerel $unwind$z900_PutIndex509
$pdata$z900_PutIndex609 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$z900_PutIndex609
$pdata$z900_PutIndex709 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$z900_PutIndex709
$pdata$z900_PutIndex010 DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$z900_PutIndex010
$pdata$z900_PutIndex110 DD imagerel $LN5
	DD	imagerel $LN5+232
	DD	imagerel $unwind$z900_PutIndex110
$pdata$z900_PutIndex210 DD imagerel $LN5
	DD	imagerel $LN5+232
	DD	imagerel $unwind$z900_PutIndex210
$pdata$z900_PutIndex310 DD imagerel $LN5
	DD	imagerel $LN5+232
	DD	imagerel $unwind$z900_PutIndex310
$pdata$z900_PutIndex410 DD imagerel $LN5
	DD	imagerel $LN5+232
	DD	imagerel $unwind$z900_PutIndex410
$pdata$z900_PutIndex510 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$z900_PutIndex510
$pdata$z900_PutIndex610 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$z900_PutIndex610
$pdata$z900_PutIndex710 DD imagerel $LN5
	DD	imagerel $LN5+278
	DD	imagerel $unwind$z900_PutIndex710
$pdata$z900_PutIndex011 DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$z900_PutIndex011
$pdata$z900_PutIndex111 DD imagerel $LN5
	DD	imagerel $LN5+232
	DD	imagerel $unwind$z900_PutIndex111
$pdata$z900_PutIndex211 DD imagerel $LN5
	DD	imagerel $LN5+232
	DD	imagerel $unwind$z900_PutIndex211
$pdata$z900_PutIndex311 DD imagerel $LN5
	DD	imagerel $LN5+232
	DD	imagerel $unwind$z900_PutIndex311
$pdata$z900_PutIndex411 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$z900_PutIndex411
$pdata$z900_PutIndex511 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$z900_PutIndex511
$pdata$z900_PutIndex611 DD imagerel $LN5
	DD	imagerel $LN5+278
	DD	imagerel $unwind$z900_PutIndex611
$pdata$z900_PutIndex711 DD imagerel $LN5
	DD	imagerel $LN5+279
	DD	imagerel $unwind$z900_PutIndex711
$pdata$z900_PutIndex012 DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$z900_PutIndex012
$pdata$z900_PutIndex112 DD imagerel $LN5
	DD	imagerel $LN5+232
	DD	imagerel $unwind$z900_PutIndex112
$pdata$z900_PutIndex212 DD imagerel $LN5
	DD	imagerel $LN5+232
	DD	imagerel $unwind$z900_PutIndex212
$pdata$z900_PutIndex312 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$z900_PutIndex312
$pdata$z900_PutIndex412 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$z900_PutIndex412
$pdata$z900_PutIndex512 DD imagerel $LN5
	DD	imagerel $LN5+278
	DD	imagerel $unwind$z900_PutIndex512
$pdata$z900_PutIndex612 DD imagerel $LN5
	DD	imagerel $LN5+279
	DD	imagerel $unwind$z900_PutIndex612
$pdata$z900_PutIndex712 DD imagerel $LN5
	DD	imagerel $LN5+279
	DD	imagerel $unwind$z900_PutIndex712
$pdata$z900_PutIndex013 DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$z900_PutIndex013
$pdata$z900_PutIndex113 DD imagerel $LN5
	DD	imagerel $LN5+232
	DD	imagerel $unwind$z900_PutIndex113
$pdata$z900_PutIndex213 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$z900_PutIndex213
$pdata$z900_PutIndex313 DD imagerel $LN5
	DD	imagerel $LN5+231
	DD	imagerel $unwind$z900_PutIndex313
$pdata$z900_PutIndex413 DD imagerel $LN5
	DD	imagerel $LN5+278
	DD	imagerel $unwind$z900_PutIndex413
$pdata$z900_PutIndex513 DD imagerel $LN5
	DD	imagerel $LN5+279
	DD	imagerel $unwind$z900_PutIndex513
$pdata$z900_PutIndex613 DD imagerel $LN5
	DD	imagerel $LN5+279
	DD	imagerel $unwind$z900_PutIndex613
$pdata$z900_PutIndex713 DD imagerel $LN5
	DD	imagerel $LN5+279
	DD	imagerel $unwind$z900_PutIndex713
pdata	ENDS
xdata	SEGMENT
$unwind$s370_PutIndex009 DD 010901H
	DD	06209H
$unwind$s370_PutIndex109 DD 010901H
	DD	08209H
$unwind$s370_PutIndex209 DD 010901H
	DD	08209H
$unwind$s370_PutIndex309 DD 010901H
	DD	08209H
$unwind$s370_PutIndex409 DD 010901H
	DD	08209H
$unwind$s370_PutIndex509 DD 010901H
	DD	08209H
$unwind$s370_PutIndex609 DD 010901H
	DD	08209H
$unwind$s370_PutIndex709 DD 010901H
	DD	08209H
$unwind$s370_PutIndex010 DD 010901H
	DD	06209H
$unwind$s370_PutIndex110 DD 010901H
	DD	08209H
$unwind$s370_PutIndex210 DD 010901H
	DD	08209H
$unwind$s370_PutIndex310 DD 010901H
	DD	08209H
$unwind$s370_PutIndex410 DD 010901H
	DD	08209H
$unwind$s370_PutIndex510 DD 010901H
	DD	08209H
$unwind$s370_PutIndex610 DD 010901H
	DD	08209H
$unwind$s370_PutIndex710 DD 010901H
	DD	08209H
$unwind$s370_PutIndex011 DD 010901H
	DD	06209H
$unwind$s370_PutIndex111 DD 010901H
	DD	08209H
$unwind$s370_PutIndex211 DD 010901H
	DD	08209H
$unwind$s370_PutIndex311 DD 010901H
	DD	08209H
$unwind$s370_PutIndex411 DD 010901H
	DD	08209H
$unwind$s370_PutIndex511 DD 010901H
	DD	08209H
$unwind$s370_PutIndex611 DD 010901H
	DD	08209H
$unwind$s370_PutIndex711 DD 010901H
	DD	08209H
$unwind$s370_PutIndex012 DD 010901H
	DD	06209H
$unwind$s370_PutIndex112 DD 010901H
	DD	08209H
$unwind$s370_PutIndex212 DD 010901H
	DD	08209H
$unwind$s370_PutIndex312 DD 010901H
	DD	08209H
$unwind$s370_PutIndex412 DD 010901H
	DD	08209H
$unwind$s370_PutIndex512 DD 010901H
	DD	08209H
$unwind$s370_PutIndex612 DD 010901H
	DD	08209H
$unwind$s370_PutIndex712 DD 010901H
	DD	08209H
$unwind$s370_PutIndex013 DD 010901H
	DD	06209H
$unwind$s370_PutIndex113 DD 010901H
	DD	08209H
$unwind$s370_PutIndex213 DD 010901H
	DD	08209H
$unwind$s370_PutIndex313 DD 010901H
	DD	08209H
$unwind$s370_PutIndex413 DD 010901H
	DD	08209H
$unwind$s370_PutIndex513 DD 010901H
	DD	08209H
$unwind$s370_PutIndex613 DD 010901H
	DD	08209H
$unwind$s370_PutIndex713 DD 010901H
	DD	08209H
$unwind$s390_PutIndex009 DD 010901H
	DD	06209H
$unwind$s390_PutIndex109 DD 010901H
	DD	08209H
$unwind$s390_PutIndex209 DD 010901H
	DD	08209H
$unwind$s390_PutIndex309 DD 010901H
	DD	08209H
$unwind$s390_PutIndex409 DD 010901H
	DD	08209H
$unwind$s390_PutIndex509 DD 010901H
	DD	08209H
$unwind$s390_PutIndex609 DD 010901H
	DD	08209H
$unwind$s390_PutIndex709 DD 010901H
	DD	08209H
$unwind$s390_PutIndex010 DD 010901H
	DD	06209H
$unwind$s390_PutIndex110 DD 010901H
	DD	08209H
$unwind$s390_PutIndex210 DD 010901H
	DD	08209H
$unwind$s390_PutIndex310 DD 010901H
	DD	08209H
$unwind$s390_PutIndex410 DD 010901H
	DD	08209H
$unwind$s390_PutIndex510 DD 010901H
	DD	08209H
$unwind$s390_PutIndex610 DD 010901H
	DD	08209H
$unwind$s390_PutIndex710 DD 010901H
	DD	08209H
$unwind$s390_PutIndex011 DD 010901H
	DD	06209H
$unwind$s390_PutIndex111 DD 010901H
	DD	08209H
$unwind$s390_PutIndex211 DD 010901H
	DD	08209H
$unwind$s390_PutIndex311 DD 010901H
	DD	08209H
$unwind$s390_PutIndex411 DD 010901H
	DD	08209H
$unwind$s390_PutIndex511 DD 010901H
	DD	08209H
$unwind$s390_PutIndex611 DD 010901H
	DD	08209H
$unwind$s390_PutIndex711 DD 010901H
	DD	08209H
$unwind$s390_PutIndex012 DD 010901H
	DD	06209H
$unwind$s390_PutIndex112 DD 010901H
	DD	08209H
$unwind$s390_PutIndex212 DD 010901H
	DD	08209H
$unwind$s390_PutIndex312 DD 010901H
	DD	08209H
$unwind$s390_PutIndex412 DD 010901H
	DD	08209H
$unwind$s390_PutIndex512 DD 010901H
	DD	08209H
$unwind$s390_PutIndex612 DD 010901H
	DD	08209H
$unwind$s390_PutIndex712 DD 010901H
	DD	08209H
$unwind$s390_PutIndex013 DD 010901H
	DD	06209H
$unwind$s390_PutIndex113 DD 010901H
	DD	08209H
$unwind$s390_PutIndex213 DD 010901H
	DD	08209H
$unwind$s390_PutIndex313 DD 010901H
	DD	08209H
$unwind$s390_PutIndex413 DD 010901H
	DD	08209H
$unwind$s390_PutIndex513 DD 010901H
	DD	08209H
$unwind$s390_PutIndex613 DD 010901H
	DD	08209H
$unwind$s390_PutIndex713 DD 010901H
	DD	08209H
$unwind$z900_PutIndex009 DD 010901H
	DD	06209H
$unwind$z900_PutIndex109 DD 010901H
	DD	08209H
$unwind$z900_PutIndex209 DD 010901H
	DD	08209H
$unwind$z900_PutIndex309 DD 010901H
	DD	08209H
$unwind$z900_PutIndex409 DD 010901H
	DD	08209H
$unwind$z900_PutIndex509 DD 010901H
	DD	08209H
$unwind$z900_PutIndex609 DD 010901H
	DD	08209H
$unwind$z900_PutIndex709 DD 010901H
	DD	08209H
$unwind$z900_PutIndex010 DD 010901H
	DD	06209H
$unwind$z900_PutIndex110 DD 010901H
	DD	08209H
$unwind$z900_PutIndex210 DD 010901H
	DD	08209H
$unwind$z900_PutIndex310 DD 010901H
	DD	08209H
$unwind$z900_PutIndex410 DD 010901H
	DD	08209H
$unwind$z900_PutIndex510 DD 010901H
	DD	08209H
$unwind$z900_PutIndex610 DD 010901H
	DD	08209H
$unwind$z900_PutIndex710 DD 010901H
	DD	08209H
$unwind$z900_PutIndex011 DD 010901H
	DD	06209H
$unwind$z900_PutIndex111 DD 010901H
	DD	08209H
$unwind$z900_PutIndex211 DD 010901H
	DD	08209H
$unwind$z900_PutIndex311 DD 010901H
	DD	08209H
$unwind$z900_PutIndex411 DD 010901H
	DD	08209H
$unwind$z900_PutIndex511 DD 010901H
	DD	08209H
$unwind$z900_PutIndex611 DD 010901H
	DD	08209H
$unwind$z900_PutIndex711 DD 010901H
	DD	08209H
$unwind$z900_PutIndex012 DD 010901H
	DD	06209H
$unwind$z900_PutIndex112 DD 010901H
	DD	08209H
$unwind$z900_PutIndex212 DD 010901H
	DD	08209H
$unwind$z900_PutIndex312 DD 010901H
	DD	08209H
$unwind$z900_PutIndex412 DD 010901H
	DD	08209H
$unwind$z900_PutIndex512 DD 010901H
	DD	08209H
$unwind$z900_PutIndex612 DD 010901H
	DD	08209H
$unwind$z900_PutIndex712 DD 010901H
	DD	08209H
$unwind$z900_PutIndex013 DD 010901H
	DD	06209H
$unwind$z900_PutIndex113 DD 010901H
	DD	08209H
$unwind$z900_PutIndex213 DD 010901H
	DD	08209H
$unwind$z900_PutIndex313 DD 010901H
	DD	08209H
$unwind$z900_PutIndex413 DD 010901H
	DD	08209H
$unwind$z900_PutIndex513 DD 010901H
	DD	08209H
$unwind$z900_PutIndex613 DD 010901H
	DD	08209H
$unwind$z900_PutIndex713 DD 010901H
	DD	08209H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
pPutIndex$ = 8
z900_PutGetCBN13 PROC

; 486  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 487  :          if (&ARCH_DEP( PutIndex013 ) == pPutIndex) return 0;

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex013
  0000c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00011	75 06		 jne	 SHORT $LN2@z900_PutGe
  00013	32 c0		 xor	 al, al
  00015	eb 7c		 jmp	 SHORT $LN1@z900_PutGe
  00017	eb 7a		 jmp	 SHORT $LN3@z900_PutGe
$LN2@z900_PutGe:

; 488  :     else if (&ARCH_DEP( PutIndex113 ) == pPutIndex) return 1;

  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex113
  00020	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00025	75 06		 jne	 SHORT $LN4@z900_PutGe
  00027	b0 01		 mov	 al, 1
  00029	eb 68		 jmp	 SHORT $LN1@z900_PutGe
  0002b	eb 66		 jmp	 SHORT $LN5@z900_PutGe
$LN4@z900_PutGe:

; 489  :     else if (&ARCH_DEP( PutIndex213 ) == pPutIndex) return 2;

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex213
  00034	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00039	75 06		 jne	 SHORT $LN6@z900_PutGe
  0003b	b0 02		 mov	 al, 2
  0003d	eb 54		 jmp	 SHORT $LN1@z900_PutGe
  0003f	eb 52		 jmp	 SHORT $LN7@z900_PutGe
$LN6@z900_PutGe:

; 490  :     else if (&ARCH_DEP( PutIndex313 ) == pPutIndex) return 3;

  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex313
  00048	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  0004d	75 06		 jne	 SHORT $LN8@z900_PutGe
  0004f	b0 03		 mov	 al, 3
  00051	eb 40		 jmp	 SHORT $LN1@z900_PutGe
  00053	eb 3e		 jmp	 SHORT $LN9@z900_PutGe
$LN8@z900_PutGe:

; 491  :     else if (&ARCH_DEP( PutIndex413 ) == pPutIndex) return 4;

  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex413
  0005c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00061	75 06		 jne	 SHORT $LN10@z900_PutGe
  00063	b0 04		 mov	 al, 4
  00065	eb 2c		 jmp	 SHORT $LN1@z900_PutGe
  00067	eb 2a		 jmp	 SHORT $LN11@z900_PutGe
$LN10@z900_PutGe:

; 492  :     else if (&ARCH_DEP( PutIndex513 ) == pPutIndex) return 5;

  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex513
  00070	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00075	75 06		 jne	 SHORT $LN12@z900_PutGe
  00077	b0 05		 mov	 al, 5
  00079	eb 18		 jmp	 SHORT $LN1@z900_PutGe
  0007b	eb 16		 jmp	 SHORT $LN13@z900_PutGe
$LN12@z900_PutGe:

; 493  :     else if (&ARCH_DEP( PutIndex613 ) == pPutIndex) return 6;

  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex613
  00084	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00089	75 06		 jne	 SHORT $LN14@z900_PutGe
  0008b	b0 06		 mov	 al, 6
  0008d	eb 04		 jmp	 SHORT $LN1@z900_PutGe
  0008f	eb 02		 jmp	 SHORT $LN15@z900_PutGe
$LN14@z900_PutGe:

; 494  :     else                                return 7;

  00091	b0 07		 mov	 al, 7
$LN15@z900_PutGe:
$LN13@z900_PutGe:
$LN11@z900_PutGe:
$LN9@z900_PutGe:
$LN7@z900_PutGe:
$LN5@z900_PutGe:
$LN3@z900_PutGe:
$LN1@z900_PutGe:

; 495  : }

  00093	c3		 ret	 0
z900_PutGetCBN13 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
pPutIndex$ = 8
z900_PutGetCBN12 PROC

; 474  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 475  :          if (&ARCH_DEP( PutIndex012 ) == pPutIndex) return 0;

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex012
  0000c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00011	75 06		 jne	 SHORT $LN2@z900_PutGe
  00013	32 c0		 xor	 al, al
  00015	eb 7c		 jmp	 SHORT $LN1@z900_PutGe
  00017	eb 7a		 jmp	 SHORT $LN3@z900_PutGe
$LN2@z900_PutGe:

; 476  :     else if (&ARCH_DEP( PutIndex112 ) == pPutIndex) return 1;

  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex112
  00020	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00025	75 06		 jne	 SHORT $LN4@z900_PutGe
  00027	b0 01		 mov	 al, 1
  00029	eb 68		 jmp	 SHORT $LN1@z900_PutGe
  0002b	eb 66		 jmp	 SHORT $LN5@z900_PutGe
$LN4@z900_PutGe:

; 477  :     else if (&ARCH_DEP( PutIndex212 ) == pPutIndex) return 2;

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex212
  00034	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00039	75 06		 jne	 SHORT $LN6@z900_PutGe
  0003b	b0 02		 mov	 al, 2
  0003d	eb 54		 jmp	 SHORT $LN1@z900_PutGe
  0003f	eb 52		 jmp	 SHORT $LN7@z900_PutGe
$LN6@z900_PutGe:

; 478  :     else if (&ARCH_DEP( PutIndex312 ) == pPutIndex) return 3;

  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex312
  00048	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  0004d	75 06		 jne	 SHORT $LN8@z900_PutGe
  0004f	b0 03		 mov	 al, 3
  00051	eb 40		 jmp	 SHORT $LN1@z900_PutGe
  00053	eb 3e		 jmp	 SHORT $LN9@z900_PutGe
$LN8@z900_PutGe:

; 479  :     else if (&ARCH_DEP( PutIndex412 ) == pPutIndex) return 4;

  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex412
  0005c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00061	75 06		 jne	 SHORT $LN10@z900_PutGe
  00063	b0 04		 mov	 al, 4
  00065	eb 2c		 jmp	 SHORT $LN1@z900_PutGe
  00067	eb 2a		 jmp	 SHORT $LN11@z900_PutGe
$LN10@z900_PutGe:

; 480  :     else if (&ARCH_DEP( PutIndex512 ) == pPutIndex) return 5;

  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex512
  00070	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00075	75 06		 jne	 SHORT $LN12@z900_PutGe
  00077	b0 05		 mov	 al, 5
  00079	eb 18		 jmp	 SHORT $LN1@z900_PutGe
  0007b	eb 16		 jmp	 SHORT $LN13@z900_PutGe
$LN12@z900_PutGe:

; 481  :     else if (&ARCH_DEP( PutIndex612 ) == pPutIndex) return 6;

  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex612
  00084	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00089	75 06		 jne	 SHORT $LN14@z900_PutGe
  0008b	b0 06		 mov	 al, 6
  0008d	eb 04		 jmp	 SHORT $LN1@z900_PutGe
  0008f	eb 02		 jmp	 SHORT $LN15@z900_PutGe
$LN14@z900_PutGe:

; 482  :     else                                return 7;

  00091	b0 07		 mov	 al, 7
$LN15@z900_PutGe:
$LN13@z900_PutGe:
$LN11@z900_PutGe:
$LN9@z900_PutGe:
$LN7@z900_PutGe:
$LN5@z900_PutGe:
$LN3@z900_PutGe:
$LN1@z900_PutGe:

; 483  : }

  00093	c3		 ret	 0
z900_PutGetCBN12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
pPutIndex$ = 8
z900_PutGetCBN11 PROC

; 462  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 463  :          if (&ARCH_DEP( PutIndex011 ) == pPutIndex) return 0;

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex011
  0000c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00011	75 06		 jne	 SHORT $LN2@z900_PutGe
  00013	32 c0		 xor	 al, al
  00015	eb 7c		 jmp	 SHORT $LN1@z900_PutGe
  00017	eb 7a		 jmp	 SHORT $LN3@z900_PutGe
$LN2@z900_PutGe:

; 464  :     else if (&ARCH_DEP( PutIndex111 ) == pPutIndex) return 1;

  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex111
  00020	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00025	75 06		 jne	 SHORT $LN4@z900_PutGe
  00027	b0 01		 mov	 al, 1
  00029	eb 68		 jmp	 SHORT $LN1@z900_PutGe
  0002b	eb 66		 jmp	 SHORT $LN5@z900_PutGe
$LN4@z900_PutGe:

; 465  :     else if (&ARCH_DEP( PutIndex211 ) == pPutIndex) return 2;

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex211
  00034	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00039	75 06		 jne	 SHORT $LN6@z900_PutGe
  0003b	b0 02		 mov	 al, 2
  0003d	eb 54		 jmp	 SHORT $LN1@z900_PutGe
  0003f	eb 52		 jmp	 SHORT $LN7@z900_PutGe
$LN6@z900_PutGe:

; 466  :     else if (&ARCH_DEP( PutIndex311 ) == pPutIndex) return 3;

  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex311
  00048	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  0004d	75 06		 jne	 SHORT $LN8@z900_PutGe
  0004f	b0 03		 mov	 al, 3
  00051	eb 40		 jmp	 SHORT $LN1@z900_PutGe
  00053	eb 3e		 jmp	 SHORT $LN9@z900_PutGe
$LN8@z900_PutGe:

; 467  :     else if (&ARCH_DEP( PutIndex411 ) == pPutIndex) return 4;

  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex411
  0005c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00061	75 06		 jne	 SHORT $LN10@z900_PutGe
  00063	b0 04		 mov	 al, 4
  00065	eb 2c		 jmp	 SHORT $LN1@z900_PutGe
  00067	eb 2a		 jmp	 SHORT $LN11@z900_PutGe
$LN10@z900_PutGe:

; 468  :     else if (&ARCH_DEP( PutIndex511 ) == pPutIndex) return 5;

  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex511
  00070	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00075	75 06		 jne	 SHORT $LN12@z900_PutGe
  00077	b0 05		 mov	 al, 5
  00079	eb 18		 jmp	 SHORT $LN1@z900_PutGe
  0007b	eb 16		 jmp	 SHORT $LN13@z900_PutGe
$LN12@z900_PutGe:

; 469  :     else if (&ARCH_DEP( PutIndex611 ) == pPutIndex) return 6;

  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex611
  00084	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00089	75 06		 jne	 SHORT $LN14@z900_PutGe
  0008b	b0 06		 mov	 al, 6
  0008d	eb 04		 jmp	 SHORT $LN1@z900_PutGe
  0008f	eb 02		 jmp	 SHORT $LN15@z900_PutGe
$LN14@z900_PutGe:

; 470  :     else                                return 7;

  00091	b0 07		 mov	 al, 7
$LN15@z900_PutGe:
$LN13@z900_PutGe:
$LN11@z900_PutGe:
$LN9@z900_PutGe:
$LN7@z900_PutGe:
$LN5@z900_PutGe:
$LN3@z900_PutGe:
$LN1@z900_PutGe:

; 471  : }

  00093	c3		 ret	 0
z900_PutGetCBN11 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
pPutIndex$ = 8
z900_PutGetCBN10 PROC

; 450  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 451  :          if (&ARCH_DEP( PutIndex010 ) == pPutIndex) return 0;

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex010
  0000c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00011	75 06		 jne	 SHORT $LN2@z900_PutGe
  00013	32 c0		 xor	 al, al
  00015	eb 7c		 jmp	 SHORT $LN1@z900_PutGe
  00017	eb 7a		 jmp	 SHORT $LN3@z900_PutGe
$LN2@z900_PutGe:

; 452  :     else if (&ARCH_DEP( PutIndex110 ) == pPutIndex) return 1;

  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex110
  00020	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00025	75 06		 jne	 SHORT $LN4@z900_PutGe
  00027	b0 01		 mov	 al, 1
  00029	eb 68		 jmp	 SHORT $LN1@z900_PutGe
  0002b	eb 66		 jmp	 SHORT $LN5@z900_PutGe
$LN4@z900_PutGe:

; 453  :     else if (&ARCH_DEP( PutIndex210 ) == pPutIndex) return 2;

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex210
  00034	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00039	75 06		 jne	 SHORT $LN6@z900_PutGe
  0003b	b0 02		 mov	 al, 2
  0003d	eb 54		 jmp	 SHORT $LN1@z900_PutGe
  0003f	eb 52		 jmp	 SHORT $LN7@z900_PutGe
$LN6@z900_PutGe:

; 454  :     else if (&ARCH_DEP( PutIndex310 ) == pPutIndex) return 3;

  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex310
  00048	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  0004d	75 06		 jne	 SHORT $LN8@z900_PutGe
  0004f	b0 03		 mov	 al, 3
  00051	eb 40		 jmp	 SHORT $LN1@z900_PutGe
  00053	eb 3e		 jmp	 SHORT $LN9@z900_PutGe
$LN8@z900_PutGe:

; 455  :     else if (&ARCH_DEP( PutIndex410 ) == pPutIndex) return 4;

  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex410
  0005c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00061	75 06		 jne	 SHORT $LN10@z900_PutGe
  00063	b0 04		 mov	 al, 4
  00065	eb 2c		 jmp	 SHORT $LN1@z900_PutGe
  00067	eb 2a		 jmp	 SHORT $LN11@z900_PutGe
$LN10@z900_PutGe:

; 456  :     else if (&ARCH_DEP( PutIndex510 ) == pPutIndex) return 5;

  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex510
  00070	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00075	75 06		 jne	 SHORT $LN12@z900_PutGe
  00077	b0 05		 mov	 al, 5
  00079	eb 18		 jmp	 SHORT $LN1@z900_PutGe
  0007b	eb 16		 jmp	 SHORT $LN13@z900_PutGe
$LN12@z900_PutGe:

; 457  :     else if (&ARCH_DEP( PutIndex610 ) == pPutIndex) return 6;

  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex610
  00084	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00089	75 06		 jne	 SHORT $LN14@z900_PutGe
  0008b	b0 06		 mov	 al, 6
  0008d	eb 04		 jmp	 SHORT $LN1@z900_PutGe
  0008f	eb 02		 jmp	 SHORT $LN15@z900_PutGe
$LN14@z900_PutGe:

; 458  :     else                                return 7;

  00091	b0 07		 mov	 al, 7
$LN15@z900_PutGe:
$LN13@z900_PutGe:
$LN11@z900_PutGe:
$LN9@z900_PutGe:
$LN7@z900_PutGe:
$LN5@z900_PutGe:
$LN3@z900_PutGe:
$LN1@z900_PutGe:

; 459  : }

  00093	c3		 ret	 0
z900_PutGetCBN10 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
pPutIndex$ = 8
z900_PutGetCBN09 PROC

; 438  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 439  :          if (&ARCH_DEP( PutIndex009 ) == pPutIndex) return 0;

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex009
  0000c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00011	75 06		 jne	 SHORT $LN2@z900_PutGe
  00013	32 c0		 xor	 al, al
  00015	eb 7c		 jmp	 SHORT $LN1@z900_PutGe
  00017	eb 7a		 jmp	 SHORT $LN3@z900_PutGe
$LN2@z900_PutGe:

; 440  :     else if (&ARCH_DEP( PutIndex109 ) == pPutIndex) return 1;

  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex109
  00020	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00025	75 06		 jne	 SHORT $LN4@z900_PutGe
  00027	b0 01		 mov	 al, 1
  00029	eb 68		 jmp	 SHORT $LN1@z900_PutGe
  0002b	eb 66		 jmp	 SHORT $LN5@z900_PutGe
$LN4@z900_PutGe:

; 441  :     else if (&ARCH_DEP( PutIndex209 ) == pPutIndex) return 2;

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex209
  00034	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00039	75 06		 jne	 SHORT $LN6@z900_PutGe
  0003b	b0 02		 mov	 al, 2
  0003d	eb 54		 jmp	 SHORT $LN1@z900_PutGe
  0003f	eb 52		 jmp	 SHORT $LN7@z900_PutGe
$LN6@z900_PutGe:

; 442  :     else if (&ARCH_DEP( PutIndex309 ) == pPutIndex) return 3;

  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex309
  00048	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  0004d	75 06		 jne	 SHORT $LN8@z900_PutGe
  0004f	b0 03		 mov	 al, 3
  00051	eb 40		 jmp	 SHORT $LN1@z900_PutGe
  00053	eb 3e		 jmp	 SHORT $LN9@z900_PutGe
$LN8@z900_PutGe:

; 443  :     else if (&ARCH_DEP( PutIndex409 ) == pPutIndex) return 4;

  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex409
  0005c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00061	75 06		 jne	 SHORT $LN10@z900_PutGe
  00063	b0 04		 mov	 al, 4
  00065	eb 2c		 jmp	 SHORT $LN1@z900_PutGe
  00067	eb 2a		 jmp	 SHORT $LN11@z900_PutGe
$LN10@z900_PutGe:

; 444  :     else if (&ARCH_DEP( PutIndex509 ) == pPutIndex) return 5;

  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex509
  00070	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00075	75 06		 jne	 SHORT $LN12@z900_PutGe
  00077	b0 05		 mov	 al, 5
  00079	eb 18		 jmp	 SHORT $LN1@z900_PutGe
  0007b	eb 16		 jmp	 SHORT $LN13@z900_PutGe
$LN12@z900_PutGe:

; 445  :     else if (&ARCH_DEP( PutIndex609 ) == pPutIndex) return 6;

  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:z900_PutIndex609
  00084	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00089	75 06		 jne	 SHORT $LN14@z900_PutGe
  0008b	b0 06		 mov	 al, 6
  0008d	eb 04		 jmp	 SHORT $LN1@z900_PutGe
  0008f	eb 02		 jmp	 SHORT $LN15@z900_PutGe
$LN14@z900_PutGe:

; 446  :     else                                return 7;

  00091	b0 07		 mov	 al, 7
$LN15@z900_PutGe:
$LN13@z900_PutGe:
$LN11@z900_PutGe:
$LN9@z900_PutGe:
$LN7@z900_PutGe:
$LN5@z900_PutGe:
$LN3@z900_PutGe:
$LN1@z900_PutGe:

; 447  : }

  00093	c3		 ret	 0
z900_PutGetCBN09 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv142 = 32
tv71 = 36
tv153 = 40
tv154 = 48
pPIBLK$ = 80
z900_PutIndex713 PROC

; 425  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 426  :     store_op_hw( (pPIBLK->index >> 4) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFE00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv154[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 f9 04	 sar	 ecx, 4
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv153[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv153[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 fe 00 00	 and	 eax, 65024		; 0000fe00H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv154[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 427  :     store_op_b( (pPIBLK->index << 4), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 83 c0 02	 add	 rax, 2
  00087	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008c	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  00090	c1 e1 04	 shl	 ecx, 4
  00093	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00098	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009c	48 8b d0	 mov	 rdx, rax
  0009f	e8 00 00 00 00	 call	 z900_cmpsc_vstoreb

; 428  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a4	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ac	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000b0	48 83 c0 02	 add	 rax, 2
  000b4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b9	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000bc	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 429  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000c0	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000cb	48 83 e8 02	 sub	 rax, 2
  000cf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 430  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex413 );

  000da	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000df	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex413
  000ea	48 89 08	 mov	 QWORD PTR [rax], rcx

; 431  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000ed	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f5	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000f9	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000fb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv142[rsp], 1
  00103	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  00105	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN4@z900_PutIn:
  0010d	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv142[rsp]

; 432  : }

  00112	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00116	c3		 ret	 0
z900_PutIndex713 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv142 = 32
tv71 = 36
tv153 = 40
tv154 = 48
pPIBLK$ = 80
z900_PutIndex613 PROC

; 416  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 417  :     store_op_hw( (pPIBLK->index >> 3) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFC00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv154[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 f9 03	 sar	 ecx, 3
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv153[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv153[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 fc 00 00	 and	 eax, 64512		; 0000fc00H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv154[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 418  :     store_op_b( (pPIBLK->index << 5), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 83 c0 02	 add	 rax, 2
  00087	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008c	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  00090	c1 e1 05	 shl	 ecx, 5
  00093	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00098	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009c	48 8b d0	 mov	 rdx, rax
  0009f	e8 00 00 00 00	 call	 z900_cmpsc_vstoreb

; 419  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a4	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ac	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000b0	48 83 c0 02	 add	 rax, 2
  000b4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b9	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000bc	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 420  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000c0	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000cb	48 83 e8 02	 sub	 rax, 2
  000cf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 421  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex313 );

  000da	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000df	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex313
  000ea	48 89 08	 mov	 QWORD PTR [rax], rcx

; 422  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000ed	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f9	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000fb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv142[rsp], 1
  00103	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  00105	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN4@z900_PutIn:
  0010d	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv142[rsp]

; 423  : }

  00112	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00116	c3		 ret	 0
z900_PutIndex613 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv142 = 32
tv71 = 36
tv153 = 40
tv154 = 48
pPIBLK$ = 80
z900_PutIndex513 PROC

; 407  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 408  :     store_op_hw( (pPIBLK->index >> 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF800), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv154[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 f9 02	 sar	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv153[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv153[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv154[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 409  :     store_op_b( (pPIBLK->index << 6), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 83 c0 02	 add	 rax, 2
  00087	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008c	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  00090	c1 e1 06	 shl	 ecx, 6
  00093	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00098	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009c	48 8b d0	 mov	 rdx, rax
  0009f	e8 00 00 00 00	 call	 z900_cmpsc_vstoreb

; 410  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a4	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ac	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000b0	48 83 c0 02	 add	 rax, 2
  000b4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b9	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000bc	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 411  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000c0	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000cb	48 83 e8 02	 sub	 rax, 2
  000cf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 412  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex213 );

  000da	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000df	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex213
  000ea	48 89 08	 mov	 QWORD PTR [rax], rcx

; 413  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000ed	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f9	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000fb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv142[rsp], 1
  00103	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  00105	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN4@z900_PutIn:
  0010d	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv142[rsp]

; 414  : }

  00112	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00116	c3		 ret	 0
z900_PutIndex513 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv142 = 32
tv71 = 36
tv153 = 40
tv154 = 48
pPIBLK$ = 80
z900_PutIndex413 PROC

; 398  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 399  :     store_op_hw( (pPIBLK->index >> 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv154[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 f9		 sar	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv153[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv153[rsp]
  00040	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv154[rsp]
  0006a	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 400  :     store_op_b( (pPIBLK->index << 7), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 83 c0 02	 add	 rax, 2
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008f	c1 e1 07	 shl	 ecx, 7
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00097	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009b	48 8b d0	 mov	 rdx, rax
  0009e	e8 00 00 00 00	 call	 z900_cmpsc_vstoreb

; 401  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a3	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ab	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000af	48 83 c0 02	 add	 rax, 2
  000b3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b8	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000bb	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 402  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000bf	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ca	48 83 e8 02	 sub	 rax, 2
  000ce	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 403  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex113 );

  000d9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000de	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex113
  000e9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 404  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000ec	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f4	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f8	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000fa	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv142[rsp], 1
  00102	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  00104	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN4@z900_PutIn:
  0010c	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv142[rsp]

; 405  : }

  00111	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00115	c3		 ret	 0
z900_PutIndex413 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv130 = 32
tv70 = 36
tv139 = 40
tv140 = 48
pPIBLK$ = 80
z900_PutIndex313 PROC

; 390  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 391  :     store_op_hw( (pPIBLK->index     ) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xE000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv140[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	89 4c 24 24	 mov	 DWORD PTR tv70[rsp], ecx
  00023	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00028	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002b	48 89 54 24 28	 mov	 QWORD PTR tv139[rsp], rdx
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00035	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  00039	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv139[rsp]
  0003e	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00042	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  00047	0f b6 c0	 movzx	 eax, al
  0004a	c1 e0 08	 shl	 eax, 8
  0004d	25 00 e0 00 00	 and	 eax, 57344		; 0000e000H
  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR tv70[rsp]
  00056	0b c8		 or	 ecx, eax
  00058	8b c1		 mov	 eax, ecx
  0005a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005f	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00063	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv140[rsp]
  00068	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006c	0f b7 c8	 movzx	 ecx, ax
  0006f	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 392  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  00074	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00079	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00080	48 83 c0 02	 add	 rax, 2
  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00089	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008c	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 393  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  00090	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009b	48 83 e8 02	 sub	 rax, 2
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 394  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex013 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex013
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 395  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN4@z900_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv130[rsp]

; 396  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
z900_PutIndex313 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
z900_PutIndex213 PROC

; 382  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 383  :     store_op_hw( (pPIBLK->index << 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xC000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 e1		 shl	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00040	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 c0 00 00	 and	 eax, 49152		; 0000c000H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006a	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 384  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 385  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 386  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex713 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex713
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 387  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000c9	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@z900_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 388  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
z900_PutIndex213 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
z900_PutIndex113 PROC

; 374  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 375  :     store_op_hw( (pPIBLK->index << 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0x8000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 02	 shl	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 376  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 ff c0	 inc	 rax
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008e	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 377  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00092	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009d	48 ff c8	 dec	 rax
  000a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 378  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex613 );

  000ab	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000b0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex613
  000bb	48 89 08	 mov	 QWORD PTR [rax], rcx

; 379  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000ca	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cc	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d4	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@z900_PutIn:
  000de	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 380  : }

  000e3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e7	c3		 ret	 0
z900_PutIndex113 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv89 = 32
pPIBLK$ = 64
z900_PutIndex013 PROC

; 366  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 367  :     store_op_hw( (pPIBLK->index << 3), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00016	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001a	c1 e1 03	 shl	 ecx, 3
  0001d	48 8b 54 24 40	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00022	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  00026	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  0002a	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 368  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  0002f	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00034	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00037	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003b	48 ff c0	 inc	 rax
  0003e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00043	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00046	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 369  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  0004a	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0004f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00052	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00055	48 ff c8	 dec	 rax
  00058	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00060	48 89 01	 mov	 QWORD PTR [rcx], rax

; 370  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex513 );

  00063	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00068	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex513
  00073	48 89 08	 mov	 QWORD PTR [rax], rcx

; 371  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  00076	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  00082	73 0a		 jae	 SHORT $LN3@z900_PutIn
  00084	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  0008c	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  0008e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN4@z900_PutIn:
  00096	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv89[rsp]

; 372  : }

  0009b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009f	c3		 ret	 0
z900_PutIndex013 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv142 = 32
tv71 = 36
tv153 = 40
tv154 = 48
pPIBLK$ = 80
z900_PutIndex712 PROC

; 351  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 352  :     store_op_hw( (pPIBLK->index >> 3) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFE00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv154[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 f9 03	 sar	 ecx, 3
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv153[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv153[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 fe 00 00	 and	 eax, 65024		; 0000fe00H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv154[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 353  :     store_op_b( (pPIBLK->index << 5), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 83 c0 02	 add	 rax, 2
  00087	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008c	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  00090	c1 e1 05	 shl	 ecx, 5
  00093	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00098	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009c	48 8b d0	 mov	 rdx, rax
  0009f	e8 00 00 00 00	 call	 z900_cmpsc_vstoreb

; 354  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a4	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ac	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000b0	48 83 c0 02	 add	 rax, 2
  000b4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b9	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000bc	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 355  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000c0	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000cb	48 83 e8 02	 sub	 rax, 2
  000cf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 356  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex312 );

  000da	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000df	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex312
  000ea	48 89 08	 mov	 QWORD PTR [rax], rcx

; 357  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000ed	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f9	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000fb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv142[rsp], 1
  00103	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  00105	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN4@z900_PutIn:
  0010d	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv142[rsp]

; 358  : }

  00112	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00116	c3		 ret	 0
z900_PutIndex712 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv142 = 32
tv71 = 36
tv153 = 40
tv154 = 48
pPIBLK$ = 80
z900_PutIndex612 PROC

; 342  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 343  :     store_op_hw( (pPIBLK->index >> 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFC00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv154[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 f9 02	 sar	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv153[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv153[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 fc 00 00	 and	 eax, 64512		; 0000fc00H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv154[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 344  :     store_op_b( (pPIBLK->index << 6), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 83 c0 02	 add	 rax, 2
  00087	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008c	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  00090	c1 e1 06	 shl	 ecx, 6
  00093	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00098	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009c	48 8b d0	 mov	 rdx, rax
  0009f	e8 00 00 00 00	 call	 z900_cmpsc_vstoreb

; 345  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a4	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ac	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000b0	48 83 c0 02	 add	 rax, 2
  000b4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b9	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000bc	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 346  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000c0	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000cb	48 83 e8 02	 sub	 rax, 2
  000cf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 347  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex212 );

  000da	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000df	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex212
  000ea	48 89 08	 mov	 QWORD PTR [rax], rcx

; 348  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000ed	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f9	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000fb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv142[rsp], 1
  00103	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  00105	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN4@z900_PutIn:
  0010d	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv142[rsp]

; 349  : }

  00112	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00116	c3		 ret	 0
z900_PutIndex612 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv142 = 32
tv71 = 36
tv153 = 40
tv154 = 48
pPIBLK$ = 80
z900_PutIndex512 PROC

; 333  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 334  :     store_op_hw( (pPIBLK->index >> 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF800), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv154[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 f9		 sar	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv153[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv153[rsp]
  00040	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv154[rsp]
  0006a	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 335  :     store_op_b( (pPIBLK->index << 7), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 83 c0 02	 add	 rax, 2
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008f	c1 e1 07	 shl	 ecx, 7
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00097	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009b	48 8b d0	 mov	 rdx, rax
  0009e	e8 00 00 00 00	 call	 z900_cmpsc_vstoreb

; 336  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a3	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ab	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000af	48 83 c0 02	 add	 rax, 2
  000b3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b8	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000bb	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 337  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000bf	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ca	48 83 e8 02	 sub	 rax, 2
  000ce	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 338  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex112 );

  000d9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000de	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex112
  000e9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 339  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000ec	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f4	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f8	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000fa	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv142[rsp], 1
  00102	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  00104	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN4@z900_PutIn:
  0010c	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv142[rsp]

; 340  : }

  00111	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00115	c3		 ret	 0
z900_PutIndex512 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv130 = 32
tv70 = 36
tv139 = 40
tv140 = 48
pPIBLK$ = 80
z900_PutIndex412 PROC

; 325  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 326  :     store_op_hw( (pPIBLK->index     ) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv140[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	89 4c 24 24	 mov	 DWORD PTR tv70[rsp], ecx
  00023	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00028	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002b	48 89 54 24 28	 mov	 QWORD PTR tv139[rsp], rdx
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00035	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  00039	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv139[rsp]
  0003e	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00042	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  00047	0f b6 c0	 movzx	 eax, al
  0004a	c1 e0 08	 shl	 eax, 8
  0004d	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR tv70[rsp]
  00056	0b c8		 or	 ecx, eax
  00058	8b c1		 mov	 eax, ecx
  0005a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005f	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00063	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv140[rsp]
  00068	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006c	0f b7 c8	 movzx	 ecx, ax
  0006f	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 327  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  00074	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00079	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00080	48 83 c0 02	 add	 rax, 2
  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00089	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008c	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 328  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  00090	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009b	48 83 e8 02	 sub	 rax, 2
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 329  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex012 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex012
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 330  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN4@z900_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv130[rsp]

; 331  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
z900_PutIndex412 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
z900_PutIndex312 PROC

; 317  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 318  :     store_op_hw( (pPIBLK->index << 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xE000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 e1		 shl	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00040	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 e0 00 00	 and	 eax, 57344		; 0000e000H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006a	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 319  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 320  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 321  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex712 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex712
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 322  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000c9	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@z900_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 323  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
z900_PutIndex312 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
z900_PutIndex212 PROC

; 309  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 310  :     store_op_hw( (pPIBLK->index << 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xC000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 02	 shl	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 c0 00 00	 and	 eax, 49152		; 0000c000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 311  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 ff c0	 inc	 rax
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008e	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 312  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00092	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009d	48 ff c8	 dec	 rax
  000a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 313  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex612 );

  000ab	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000b0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex612
  000bb	48 89 08	 mov	 QWORD PTR [rax], rcx

; 314  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000ca	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cc	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d4	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@z900_PutIn:
  000de	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 315  : }

  000e3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e7	c3		 ret	 0
z900_PutIndex212 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
z900_PutIndex112 PROC

; 301  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 302  :     store_op_hw( (pPIBLK->index << 3) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0x8000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 03	 shl	 ecx, 3
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 303  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 ff c0	 inc	 rax
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008e	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 304  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00092	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009d	48 ff c8	 dec	 rax
  000a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 305  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex512 );

  000ab	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000b0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex512
  000bb	48 89 08	 mov	 QWORD PTR [rax], rcx

; 306  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000ca	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cc	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d4	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@z900_PutIn:
  000de	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 307  : }

  000e3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e7	c3		 ret	 0
z900_PutIndex112 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv89 = 32
pPIBLK$ = 64
z900_PutIndex012 PROC

; 293  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 294  :     store_op_hw( (pPIBLK->index << 4), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00016	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001a	c1 e1 04	 shl	 ecx, 4
  0001d	48 8b 54 24 40	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00022	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  00026	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  0002a	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 295  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  0002f	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00034	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00037	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003b	48 ff c0	 inc	 rax
  0003e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00043	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00046	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 296  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  0004a	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0004f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00052	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00055	48 ff c8	 dec	 rax
  00058	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00060	48 89 01	 mov	 QWORD PTR [rcx], rax

; 297  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex412 );

  00063	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00068	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex412
  00073	48 89 08	 mov	 QWORD PTR [rax], rcx

; 298  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  00076	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  00082	73 0a		 jae	 SHORT $LN3@z900_PutIn
  00084	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  0008c	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  0008e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN4@z900_PutIn:
  00096	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv89[rsp]

; 299  : }

  0009b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009f	c3		 ret	 0
z900_PutIndex012 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv142 = 32
tv71 = 36
tv153 = 40
tv154 = 48
pPIBLK$ = 80
z900_PutIndex711 PROC

; 278  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 279  :     store_op_hw( (pPIBLK->index >> 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFE00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv154[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 f9 02	 sar	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv153[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv153[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 fe 00 00	 and	 eax, 65024		; 0000fe00H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv154[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 280  :     store_op_b( (pPIBLK->index << 6), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 83 c0 02	 add	 rax, 2
  00087	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008c	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  00090	c1 e1 06	 shl	 ecx, 6
  00093	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00098	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009c	48 8b d0	 mov	 rdx, rax
  0009f	e8 00 00 00 00	 call	 z900_cmpsc_vstoreb

; 281  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a4	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ac	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000b0	48 83 c0 02	 add	 rax, 2
  000b4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b9	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000bc	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 282  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000c0	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000cb	48 83 e8 02	 sub	 rax, 2
  000cf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 283  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex211 );

  000da	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000df	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex211
  000ea	48 89 08	 mov	 QWORD PTR [rax], rcx

; 284  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000ed	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f9	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000fb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv142[rsp], 1
  00103	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  00105	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN4@z900_PutIn:
  0010d	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv142[rsp]

; 285  : }

  00112	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00116	c3		 ret	 0
z900_PutIndex711 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv142 = 32
tv71 = 36
tv153 = 40
tv154 = 48
pPIBLK$ = 80
z900_PutIndex611 PROC

; 269  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 270  :     store_op_hw( (pPIBLK->index >> 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFC00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv154[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 f9		 sar	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv153[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv153[rsp]
  00040	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 fc 00 00	 and	 eax, 64512		; 0000fc00H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv154[rsp]
  0006a	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 271  :     store_op_b( (pPIBLK->index << 7), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 83 c0 02	 add	 rax, 2
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008f	c1 e1 07	 shl	 ecx, 7
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00097	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009b	48 8b d0	 mov	 rdx, rax
  0009e	e8 00 00 00 00	 call	 z900_cmpsc_vstoreb

; 272  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a3	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ab	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000af	48 83 c0 02	 add	 rax, 2
  000b3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b8	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000bb	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 273  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000bf	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ca	48 83 e8 02	 sub	 rax, 2
  000ce	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 274  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex111 );

  000d9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000de	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex111
  000e9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 275  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000ec	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f4	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f8	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000fa	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv142[rsp], 1
  00102	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  00104	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN4@z900_PutIn:
  0010c	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv142[rsp]

; 276  : }

  00111	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00115	c3		 ret	 0
z900_PutIndex611 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv130 = 32
tv70 = 36
tv139 = 40
tv140 = 48
pPIBLK$ = 80
z900_PutIndex511 PROC

; 261  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 262  :     store_op_hw( (pPIBLK->index     ) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF800), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv140[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	89 4c 24 24	 mov	 DWORD PTR tv70[rsp], ecx
  00023	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00028	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002b	48 89 54 24 28	 mov	 QWORD PTR tv139[rsp], rdx
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00035	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  00039	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv139[rsp]
  0003e	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00042	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  00047	0f b6 c0	 movzx	 eax, al
  0004a	c1 e0 08	 shl	 eax, 8
  0004d	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR tv70[rsp]
  00056	0b c8		 or	 ecx, eax
  00058	8b c1		 mov	 eax, ecx
  0005a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005f	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00063	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv140[rsp]
  00068	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006c	0f b7 c8	 movzx	 ecx, ax
  0006f	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 263  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  00074	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00079	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00080	48 83 c0 02	 add	 rax, 2
  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00089	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008c	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 264  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  00090	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009b	48 83 e8 02	 sub	 rax, 2
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 265  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex011 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex011
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 266  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN4@z900_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv130[rsp]

; 267  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
z900_PutIndex511 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
z900_PutIndex411 PROC

; 253  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 254  :     store_op_hw( (pPIBLK->index << 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 e1		 shl	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00040	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006a	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 255  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 256  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 257  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex711 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex711
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 258  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000c9	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@z900_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 259  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
z900_PutIndex411 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
z900_PutIndex311 PROC

; 245  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 246  :     store_op_hw( (pPIBLK->index << 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xE000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 02	 shl	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 e0 00 00	 and	 eax, 57344		; 0000e000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 247  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 ff c0	 inc	 rax
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008e	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 248  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00092	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009d	48 ff c8	 dec	 rax
  000a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 249  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex611 );

  000ab	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000b0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex611
  000bb	48 89 08	 mov	 QWORD PTR [rax], rcx

; 250  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000ca	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cc	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d4	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@z900_PutIn:
  000de	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 251  : }

  000e3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e7	c3		 ret	 0
z900_PutIndex311 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
z900_PutIndex211 PROC

; 237  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 238  :     store_op_hw( (pPIBLK->index << 3) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xC000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 03	 shl	 ecx, 3
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 c0 00 00	 and	 eax, 49152		; 0000c000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 239  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 ff c0	 inc	 rax
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008e	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 240  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00092	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009d	48 ff c8	 dec	 rax
  000a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 241  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex511 );

  000ab	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000b0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex511
  000bb	48 89 08	 mov	 QWORD PTR [rax], rcx

; 242  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000ca	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cc	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d4	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@z900_PutIn:
  000de	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 243  : }

  000e3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e7	c3		 ret	 0
z900_PutIndex211 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
z900_PutIndex111 PROC

; 229  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 230  :     store_op_hw( (pPIBLK->index << 4) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0x8000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 04	 shl	 ecx, 4
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 231  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 ff c0	 inc	 rax
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008e	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 232  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00092	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009d	48 ff c8	 dec	 rax
  000a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 233  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex411 );

  000ab	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000b0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex411
  000bb	48 89 08	 mov	 QWORD PTR [rax], rcx

; 234  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000ca	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cc	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d4	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@z900_PutIn:
  000de	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 235  : }

  000e3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e7	c3		 ret	 0
z900_PutIndex111 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv89 = 32
pPIBLK$ = 64
z900_PutIndex011 PROC

; 221  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 222  :     store_op_hw( (pPIBLK->index << 5), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00016	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001a	c1 e1 05	 shl	 ecx, 5
  0001d	48 8b 54 24 40	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00022	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  00026	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  0002a	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 223  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  0002f	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00034	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00037	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003b	48 ff c0	 inc	 rax
  0003e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00043	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00046	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 224  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  0004a	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0004f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00052	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00055	48 ff c8	 dec	 rax
  00058	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00060	48 89 01	 mov	 QWORD PTR [rcx], rax

; 225  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex311 );

  00063	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00068	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex311
  00073	48 89 08	 mov	 QWORD PTR [rax], rcx

; 226  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  00076	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  00082	73 0a		 jae	 SHORT $LN3@z900_PutIn
  00084	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  0008c	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  0008e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN4@z900_PutIn:
  00096	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv89[rsp]

; 227  : }

  0009b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009f	c3		 ret	 0
z900_PutIndex011 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv142 = 32
tv71 = 36
tv153 = 40
tv154 = 48
pPIBLK$ = 80
z900_PutIndex710 PROC

; 206  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 207  :     store_op_hw( (pPIBLK->index >> 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFE00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv154[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 f9		 sar	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv153[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv153[rsp]
  00040	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 fe 00 00	 and	 eax, 65024		; 0000fe00H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv154[rsp]
  0006a	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 208  :     store_op_b( (pPIBLK->index << 7), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 83 c0 02	 add	 rax, 2
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008f	c1 e1 07	 shl	 ecx, 7
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00097	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009b	48 8b d0	 mov	 rdx, rax
  0009e	e8 00 00 00 00	 call	 z900_cmpsc_vstoreb

; 209  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a3	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ab	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000af	48 83 c0 02	 add	 rax, 2
  000b3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b8	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000bb	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 210  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000bf	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ca	48 83 e8 02	 sub	 rax, 2
  000ce	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 211  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex110 );

  000d9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000de	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex110
  000e9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 212  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000ec	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f4	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f8	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000fa	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv142[rsp], 1
  00102	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  00104	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN4@z900_PutIn:
  0010c	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv142[rsp]

; 213  : }

  00111	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00115	c3		 ret	 0
z900_PutIndex710 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv130 = 32
tv70 = 36
tv139 = 40
tv140 = 48
pPIBLK$ = 80
z900_PutIndex610 PROC

; 198  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 199  :     store_op_hw( (pPIBLK->index     ) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFC00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv140[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	89 4c 24 24	 mov	 DWORD PTR tv70[rsp], ecx
  00023	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00028	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002b	48 89 54 24 28	 mov	 QWORD PTR tv139[rsp], rdx
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00035	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  00039	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv139[rsp]
  0003e	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00042	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  00047	0f b6 c0	 movzx	 eax, al
  0004a	c1 e0 08	 shl	 eax, 8
  0004d	25 00 fc 00 00	 and	 eax, 64512		; 0000fc00H
  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR tv70[rsp]
  00056	0b c8		 or	 ecx, eax
  00058	8b c1		 mov	 eax, ecx
  0005a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005f	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00063	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv140[rsp]
  00068	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006c	0f b7 c8	 movzx	 ecx, ax
  0006f	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 200  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  00074	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00079	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00080	48 83 c0 02	 add	 rax, 2
  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00089	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008c	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 201  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  00090	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009b	48 83 e8 02	 sub	 rax, 2
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 202  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex010 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex010
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 203  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN4@z900_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv130[rsp]

; 204  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
z900_PutIndex610 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
z900_PutIndex510 PROC

; 190  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 191  :     store_op_hw( (pPIBLK->index << 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF800), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 e1		 shl	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00040	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006a	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 192  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 193  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 194  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex710 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex710
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 195  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000c9	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@z900_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 196  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
z900_PutIndex510 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
z900_PutIndex410 PROC

; 182  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 183  :     store_op_hw( (pPIBLK->index << 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 02	 shl	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 184  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 ff c0	 inc	 rax
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008e	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 185  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00092	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009d	48 ff c8	 dec	 rax
  000a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 186  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex610 );

  000ab	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000b0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex610
  000bb	48 89 08	 mov	 QWORD PTR [rax], rcx

; 187  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000ca	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cc	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d4	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@z900_PutIn:
  000de	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 188  : }

  000e3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e7	c3		 ret	 0
z900_PutIndex410 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
z900_PutIndex310 PROC

; 174  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 175  :     store_op_hw( (pPIBLK->index << 3) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xE000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 03	 shl	 ecx, 3
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 e0 00 00	 and	 eax, 57344		; 0000e000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 176  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 ff c0	 inc	 rax
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008e	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 177  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00092	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009d	48 ff c8	 dec	 rax
  000a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 178  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex510 );

  000ab	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000b0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex510
  000bb	48 89 08	 mov	 QWORD PTR [rax], rcx

; 179  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000ca	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cc	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d4	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@z900_PutIn:
  000de	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 180  : }

  000e3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e7	c3		 ret	 0
z900_PutIndex310 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
z900_PutIndex210 PROC

; 166  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 167  :     store_op_hw( (pPIBLK->index << 4) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xC000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 04	 shl	 ecx, 4
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 c0 00 00	 and	 eax, 49152		; 0000c000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 168  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 ff c0	 inc	 rax
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008e	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 169  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00092	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009d	48 ff c8	 dec	 rax
  000a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 170  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex410 );

  000ab	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000b0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex410
  000bb	48 89 08	 mov	 QWORD PTR [rax], rcx

; 171  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000ca	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cc	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d4	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@z900_PutIn:
  000de	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 172  : }

  000e3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e7	c3		 ret	 0
z900_PutIndex210 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
z900_PutIndex110 PROC

; 158  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 159  :     store_op_hw( (pPIBLK->index << 5) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0x8000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 05	 shl	 ecx, 5
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 160  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 ff c0	 inc	 rax
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008e	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 161  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00092	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009d	48 ff c8	 dec	 rax
  000a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 162  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex310 );

  000ab	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000b0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex310
  000bb	48 89 08	 mov	 QWORD PTR [rax], rcx

; 163  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000ca	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cc	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d4	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@z900_PutIn:
  000de	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 164  : }

  000e3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e7	c3		 ret	 0
z900_PutIndex110 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv89 = 32
pPIBLK$ = 64
z900_PutIndex010 PROC

; 150  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 151  :     store_op_hw( (pPIBLK->index << 6), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00016	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001a	c1 e1 06	 shl	 ecx, 6
  0001d	48 8b 54 24 40	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00022	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  00026	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  0002a	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 152  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  0002f	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00034	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00037	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003b	48 ff c0	 inc	 rax
  0003e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00043	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00046	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 153  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  0004a	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0004f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00052	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00055	48 ff c8	 dec	 rax
  00058	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00060	48 89 01	 mov	 QWORD PTR [rcx], rax

; 154  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex210 );

  00063	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00068	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex210
  00073	48 89 08	 mov	 QWORD PTR [rax], rcx

; 155  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  00076	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  00082	73 0a		 jae	 SHORT $LN3@z900_PutIn
  00084	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  0008c	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  0008e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN4@z900_PutIn:
  00096	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv89[rsp]

; 156  : }

  0009b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009f	c3		 ret	 0
z900_PutIndex010 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv130 = 32
tv70 = 36
tv139 = 40
tv140 = 48
pPIBLK$ = 80
z900_PutIndex709 PROC

; 136  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 137  :     store_op_hw( (pPIBLK->index     ) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFE00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv140[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	89 4c 24 24	 mov	 DWORD PTR tv70[rsp], ecx
  00023	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00028	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002b	48 89 54 24 28	 mov	 QWORD PTR tv139[rsp], rdx
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00035	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  00039	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv139[rsp]
  0003e	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00042	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  00047	0f b6 c0	 movzx	 eax, al
  0004a	c1 e0 08	 shl	 eax, 8
  0004d	25 00 fe 00 00	 and	 eax, 65024		; 0000fe00H
  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR tv70[rsp]
  00056	0b c8		 or	 ecx, eax
  00058	8b c1		 mov	 eax, ecx
  0005a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005f	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00063	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv140[rsp]
  00068	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006c	0f b7 c8	 movzx	 ecx, ax
  0006f	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 138  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  00074	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00079	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00080	48 83 c0 02	 add	 rax, 2
  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00089	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008c	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 139  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  00090	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009b	48 83 e8 02	 sub	 rax, 2
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 140  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex009 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex009
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 141  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN4@z900_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv130[rsp]

; 142  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
z900_PutIndex709 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
z900_PutIndex609 PROC

; 128  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 129  :     store_op_hw( (pPIBLK->index << 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFC00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 e1		 shl	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00040	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 fc 00 00	 and	 eax, 64512		; 0000fc00H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006a	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 130  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 131  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 132  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex709 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex709
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 133  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@z900_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 134  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
z900_PutIndex609 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
z900_PutIndex509 PROC

; 120  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 121  :     store_op_hw( (pPIBLK->index << 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF800), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 02	 shl	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 122  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 ff c0	 inc	 rax
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008e	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 123  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00092	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009d	48 ff c8	 dec	 rax
  000a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 124  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex609 );

  000ab	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000b0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex609
  000bb	48 89 08	 mov	 QWORD PTR [rax], rcx

; 125  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000ca	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cc	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d4	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@z900_PutIn:
  000de	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 126  : }

  000e3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e7	c3		 ret	 0
z900_PutIndex509 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
z900_PutIndex409 PROC

; 112  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 113  :     store_op_hw( (pPIBLK->index << 3) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 03	 shl	 ecx, 3
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 114  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 ff c0	 inc	 rax
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008e	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 115  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00092	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009d	48 ff c8	 dec	 rax
  000a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 116  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex509 );

  000ab	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000b0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex509
  000bb	48 89 08	 mov	 QWORD PTR [rax], rcx

; 117  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000ca	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cc	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d4	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@z900_PutIn:
  000de	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 118  : }

  000e3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e7	c3		 ret	 0
z900_PutIndex409 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
z900_PutIndex309 PROC

; 104  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 105  :     store_op_hw( (pPIBLK->index << 4) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xE000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 04	 shl	 ecx, 4
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 e0 00 00	 and	 eax, 57344		; 0000e000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 106  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 ff c0	 inc	 rax
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008e	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 107  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00092	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009d	48 ff c8	 dec	 rax
  000a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 108  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex409 );

  000ab	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000b0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex409
  000bb	48 89 08	 mov	 QWORD PTR [rax], rcx

; 109  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000ca	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cc	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d4	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@z900_PutIn:
  000de	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 110  : }

  000e3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e7	c3		 ret	 0
z900_PutIndex309 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
z900_PutIndex209 PROC

; 96   : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 97   :     store_op_hw( (pPIBLK->index << 5) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xC000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 05	 shl	 ecx, 5
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 c0 00 00	 and	 eax, 49152		; 0000c000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 98   :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 ff c0	 inc	 rax
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008e	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 99   :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00092	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009d	48 ff c8	 dec	 rax
  000a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 100  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex309 );

  000ab	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000b0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex309
  000bb	48 89 08	 mov	 QWORD PTR [rax], rcx

; 101  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000ca	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cc	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d4	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@z900_PutIn:
  000de	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 102  : }

  000e3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e7	c3		 ret	 0
z900_PutIndex209 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
z900_PutIndex109 PROC

; 88   : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 89   :     store_op_hw( (pPIBLK->index << 6) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0x8000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 06	 shl	 ecx, 6
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	49 8b 48 20	 mov	 rcx, QWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 z900_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	48 8b 51 20	 mov	 rdx, QWORD PTR [rcx+32]
  0006f	0f b7 c8	 movzx	 ecx, ax
  00072	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 90   :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00083	48 ff c0	 inc	 rax
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008e	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 91   :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00092	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009d	48 ff c8	 dec	 rax
  000a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 92   :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex209 );

  000ab	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000b0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex209
  000bb	48 89 08	 mov	 QWORD PTR [rax], rcx

; 93   :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000ca	73 0a		 jae	 SHORT $LN3@z900_PutIn
  000cc	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d4	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  000d6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@z900_PutIn:
  000de	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 94   : }

  000e3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e7	c3		 ret	 0
z900_PutIndex109 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv89 = 32
pPIBLK$ = 64
z900_PutIndex009 PROC

; 80   : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 81   :     store_op_hw( (pPIBLK->index << 7), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00016	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001a	c1 e1 07	 shl	 ecx, 7
  0001d	48 8b 54 24 40	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00022	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  00026	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  0002a	e8 00 00 00 00	 call	 z900_cmpsc_vstore2

; 82   :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  0002f	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00034	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00037	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003b	48 ff c0	 inc	 rax
  0003e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00043	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00046	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 83   :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  0004a	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0004f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00052	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00055	48 ff c8	 dec	 rax
  00058	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00060	48 89 01	 mov	 QWORD PTR [rcx], rax

; 84   :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex109 );

  00063	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00068	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_PutIndex109
  00073	48 89 08	 mov	 QWORD PTR [rax], rcx

; 85   :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  00076	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  00082	73 0a		 jae	 SHORT $LN3@z900_PutIn
  00084	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  0008c	eb 08		 jmp	 SHORT $LN4@z900_PutIn
$LN3@z900_PutIn:
  0008e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN4@z900_PutIn:
  00096	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv89[rsp]

; 86   : }

  0009b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009f	c3		 ret	 0
z900_PutIndex009 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
pPutIndex$ = 8
s390_PutGetCBN13 PROC

; 486  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 487  :          if (&ARCH_DEP( PutIndex013 ) == pPutIndex) return 0;

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex013
  0000c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00011	75 06		 jne	 SHORT $LN2@s390_PutGe
  00013	32 c0		 xor	 al, al
  00015	eb 7c		 jmp	 SHORT $LN1@s390_PutGe
  00017	eb 7a		 jmp	 SHORT $LN3@s390_PutGe
$LN2@s390_PutGe:

; 488  :     else if (&ARCH_DEP( PutIndex113 ) == pPutIndex) return 1;

  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex113
  00020	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00025	75 06		 jne	 SHORT $LN4@s390_PutGe
  00027	b0 01		 mov	 al, 1
  00029	eb 68		 jmp	 SHORT $LN1@s390_PutGe
  0002b	eb 66		 jmp	 SHORT $LN5@s390_PutGe
$LN4@s390_PutGe:

; 489  :     else if (&ARCH_DEP( PutIndex213 ) == pPutIndex) return 2;

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex213
  00034	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00039	75 06		 jne	 SHORT $LN6@s390_PutGe
  0003b	b0 02		 mov	 al, 2
  0003d	eb 54		 jmp	 SHORT $LN1@s390_PutGe
  0003f	eb 52		 jmp	 SHORT $LN7@s390_PutGe
$LN6@s390_PutGe:

; 490  :     else if (&ARCH_DEP( PutIndex313 ) == pPutIndex) return 3;

  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex313
  00048	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  0004d	75 06		 jne	 SHORT $LN8@s390_PutGe
  0004f	b0 03		 mov	 al, 3
  00051	eb 40		 jmp	 SHORT $LN1@s390_PutGe
  00053	eb 3e		 jmp	 SHORT $LN9@s390_PutGe
$LN8@s390_PutGe:

; 491  :     else if (&ARCH_DEP( PutIndex413 ) == pPutIndex) return 4;

  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex413
  0005c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00061	75 06		 jne	 SHORT $LN10@s390_PutGe
  00063	b0 04		 mov	 al, 4
  00065	eb 2c		 jmp	 SHORT $LN1@s390_PutGe
  00067	eb 2a		 jmp	 SHORT $LN11@s390_PutGe
$LN10@s390_PutGe:

; 492  :     else if (&ARCH_DEP( PutIndex513 ) == pPutIndex) return 5;

  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex513
  00070	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00075	75 06		 jne	 SHORT $LN12@s390_PutGe
  00077	b0 05		 mov	 al, 5
  00079	eb 18		 jmp	 SHORT $LN1@s390_PutGe
  0007b	eb 16		 jmp	 SHORT $LN13@s390_PutGe
$LN12@s390_PutGe:

; 493  :     else if (&ARCH_DEP( PutIndex613 ) == pPutIndex) return 6;

  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex613
  00084	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00089	75 06		 jne	 SHORT $LN14@s390_PutGe
  0008b	b0 06		 mov	 al, 6
  0008d	eb 04		 jmp	 SHORT $LN1@s390_PutGe
  0008f	eb 02		 jmp	 SHORT $LN15@s390_PutGe
$LN14@s390_PutGe:

; 494  :     else                                return 7;

  00091	b0 07		 mov	 al, 7
$LN15@s390_PutGe:
$LN13@s390_PutGe:
$LN11@s390_PutGe:
$LN9@s390_PutGe:
$LN7@s390_PutGe:
$LN5@s390_PutGe:
$LN3@s390_PutGe:
$LN1@s390_PutGe:

; 495  : }

  00093	c3		 ret	 0
s390_PutGetCBN13 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
pPutIndex$ = 8
s390_PutGetCBN12 PROC

; 474  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 475  :          if (&ARCH_DEP( PutIndex012 ) == pPutIndex) return 0;

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex012
  0000c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00011	75 06		 jne	 SHORT $LN2@s390_PutGe
  00013	32 c0		 xor	 al, al
  00015	eb 7c		 jmp	 SHORT $LN1@s390_PutGe
  00017	eb 7a		 jmp	 SHORT $LN3@s390_PutGe
$LN2@s390_PutGe:

; 476  :     else if (&ARCH_DEP( PutIndex112 ) == pPutIndex) return 1;

  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex112
  00020	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00025	75 06		 jne	 SHORT $LN4@s390_PutGe
  00027	b0 01		 mov	 al, 1
  00029	eb 68		 jmp	 SHORT $LN1@s390_PutGe
  0002b	eb 66		 jmp	 SHORT $LN5@s390_PutGe
$LN4@s390_PutGe:

; 477  :     else if (&ARCH_DEP( PutIndex212 ) == pPutIndex) return 2;

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex212
  00034	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00039	75 06		 jne	 SHORT $LN6@s390_PutGe
  0003b	b0 02		 mov	 al, 2
  0003d	eb 54		 jmp	 SHORT $LN1@s390_PutGe
  0003f	eb 52		 jmp	 SHORT $LN7@s390_PutGe
$LN6@s390_PutGe:

; 478  :     else if (&ARCH_DEP( PutIndex312 ) == pPutIndex) return 3;

  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex312
  00048	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  0004d	75 06		 jne	 SHORT $LN8@s390_PutGe
  0004f	b0 03		 mov	 al, 3
  00051	eb 40		 jmp	 SHORT $LN1@s390_PutGe
  00053	eb 3e		 jmp	 SHORT $LN9@s390_PutGe
$LN8@s390_PutGe:

; 479  :     else if (&ARCH_DEP( PutIndex412 ) == pPutIndex) return 4;

  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex412
  0005c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00061	75 06		 jne	 SHORT $LN10@s390_PutGe
  00063	b0 04		 mov	 al, 4
  00065	eb 2c		 jmp	 SHORT $LN1@s390_PutGe
  00067	eb 2a		 jmp	 SHORT $LN11@s390_PutGe
$LN10@s390_PutGe:

; 480  :     else if (&ARCH_DEP( PutIndex512 ) == pPutIndex) return 5;

  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex512
  00070	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00075	75 06		 jne	 SHORT $LN12@s390_PutGe
  00077	b0 05		 mov	 al, 5
  00079	eb 18		 jmp	 SHORT $LN1@s390_PutGe
  0007b	eb 16		 jmp	 SHORT $LN13@s390_PutGe
$LN12@s390_PutGe:

; 481  :     else if (&ARCH_DEP( PutIndex612 ) == pPutIndex) return 6;

  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex612
  00084	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00089	75 06		 jne	 SHORT $LN14@s390_PutGe
  0008b	b0 06		 mov	 al, 6
  0008d	eb 04		 jmp	 SHORT $LN1@s390_PutGe
  0008f	eb 02		 jmp	 SHORT $LN15@s390_PutGe
$LN14@s390_PutGe:

; 482  :     else                                return 7;

  00091	b0 07		 mov	 al, 7
$LN15@s390_PutGe:
$LN13@s390_PutGe:
$LN11@s390_PutGe:
$LN9@s390_PutGe:
$LN7@s390_PutGe:
$LN5@s390_PutGe:
$LN3@s390_PutGe:
$LN1@s390_PutGe:

; 483  : }

  00093	c3		 ret	 0
s390_PutGetCBN12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
pPutIndex$ = 8
s390_PutGetCBN11 PROC

; 462  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 463  :          if (&ARCH_DEP( PutIndex011 ) == pPutIndex) return 0;

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex011
  0000c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00011	75 06		 jne	 SHORT $LN2@s390_PutGe
  00013	32 c0		 xor	 al, al
  00015	eb 7c		 jmp	 SHORT $LN1@s390_PutGe
  00017	eb 7a		 jmp	 SHORT $LN3@s390_PutGe
$LN2@s390_PutGe:

; 464  :     else if (&ARCH_DEP( PutIndex111 ) == pPutIndex) return 1;

  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex111
  00020	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00025	75 06		 jne	 SHORT $LN4@s390_PutGe
  00027	b0 01		 mov	 al, 1
  00029	eb 68		 jmp	 SHORT $LN1@s390_PutGe
  0002b	eb 66		 jmp	 SHORT $LN5@s390_PutGe
$LN4@s390_PutGe:

; 465  :     else if (&ARCH_DEP( PutIndex211 ) == pPutIndex) return 2;

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex211
  00034	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00039	75 06		 jne	 SHORT $LN6@s390_PutGe
  0003b	b0 02		 mov	 al, 2
  0003d	eb 54		 jmp	 SHORT $LN1@s390_PutGe
  0003f	eb 52		 jmp	 SHORT $LN7@s390_PutGe
$LN6@s390_PutGe:

; 466  :     else if (&ARCH_DEP( PutIndex311 ) == pPutIndex) return 3;

  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex311
  00048	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  0004d	75 06		 jne	 SHORT $LN8@s390_PutGe
  0004f	b0 03		 mov	 al, 3
  00051	eb 40		 jmp	 SHORT $LN1@s390_PutGe
  00053	eb 3e		 jmp	 SHORT $LN9@s390_PutGe
$LN8@s390_PutGe:

; 467  :     else if (&ARCH_DEP( PutIndex411 ) == pPutIndex) return 4;

  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex411
  0005c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00061	75 06		 jne	 SHORT $LN10@s390_PutGe
  00063	b0 04		 mov	 al, 4
  00065	eb 2c		 jmp	 SHORT $LN1@s390_PutGe
  00067	eb 2a		 jmp	 SHORT $LN11@s390_PutGe
$LN10@s390_PutGe:

; 468  :     else if (&ARCH_DEP( PutIndex511 ) == pPutIndex) return 5;

  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex511
  00070	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00075	75 06		 jne	 SHORT $LN12@s390_PutGe
  00077	b0 05		 mov	 al, 5
  00079	eb 18		 jmp	 SHORT $LN1@s390_PutGe
  0007b	eb 16		 jmp	 SHORT $LN13@s390_PutGe
$LN12@s390_PutGe:

; 469  :     else if (&ARCH_DEP( PutIndex611 ) == pPutIndex) return 6;

  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex611
  00084	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00089	75 06		 jne	 SHORT $LN14@s390_PutGe
  0008b	b0 06		 mov	 al, 6
  0008d	eb 04		 jmp	 SHORT $LN1@s390_PutGe
  0008f	eb 02		 jmp	 SHORT $LN15@s390_PutGe
$LN14@s390_PutGe:

; 470  :     else                                return 7;

  00091	b0 07		 mov	 al, 7
$LN15@s390_PutGe:
$LN13@s390_PutGe:
$LN11@s390_PutGe:
$LN9@s390_PutGe:
$LN7@s390_PutGe:
$LN5@s390_PutGe:
$LN3@s390_PutGe:
$LN1@s390_PutGe:

; 471  : }

  00093	c3		 ret	 0
s390_PutGetCBN11 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
pPutIndex$ = 8
s390_PutGetCBN10 PROC

; 450  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 451  :          if (&ARCH_DEP( PutIndex010 ) == pPutIndex) return 0;

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex010
  0000c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00011	75 06		 jne	 SHORT $LN2@s390_PutGe
  00013	32 c0		 xor	 al, al
  00015	eb 7c		 jmp	 SHORT $LN1@s390_PutGe
  00017	eb 7a		 jmp	 SHORT $LN3@s390_PutGe
$LN2@s390_PutGe:

; 452  :     else if (&ARCH_DEP( PutIndex110 ) == pPutIndex) return 1;

  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex110
  00020	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00025	75 06		 jne	 SHORT $LN4@s390_PutGe
  00027	b0 01		 mov	 al, 1
  00029	eb 68		 jmp	 SHORT $LN1@s390_PutGe
  0002b	eb 66		 jmp	 SHORT $LN5@s390_PutGe
$LN4@s390_PutGe:

; 453  :     else if (&ARCH_DEP( PutIndex210 ) == pPutIndex) return 2;

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex210
  00034	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00039	75 06		 jne	 SHORT $LN6@s390_PutGe
  0003b	b0 02		 mov	 al, 2
  0003d	eb 54		 jmp	 SHORT $LN1@s390_PutGe
  0003f	eb 52		 jmp	 SHORT $LN7@s390_PutGe
$LN6@s390_PutGe:

; 454  :     else if (&ARCH_DEP( PutIndex310 ) == pPutIndex) return 3;

  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex310
  00048	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  0004d	75 06		 jne	 SHORT $LN8@s390_PutGe
  0004f	b0 03		 mov	 al, 3
  00051	eb 40		 jmp	 SHORT $LN1@s390_PutGe
  00053	eb 3e		 jmp	 SHORT $LN9@s390_PutGe
$LN8@s390_PutGe:

; 455  :     else if (&ARCH_DEP( PutIndex410 ) == pPutIndex) return 4;

  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex410
  0005c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00061	75 06		 jne	 SHORT $LN10@s390_PutGe
  00063	b0 04		 mov	 al, 4
  00065	eb 2c		 jmp	 SHORT $LN1@s390_PutGe
  00067	eb 2a		 jmp	 SHORT $LN11@s390_PutGe
$LN10@s390_PutGe:

; 456  :     else if (&ARCH_DEP( PutIndex510 ) == pPutIndex) return 5;

  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex510
  00070	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00075	75 06		 jne	 SHORT $LN12@s390_PutGe
  00077	b0 05		 mov	 al, 5
  00079	eb 18		 jmp	 SHORT $LN1@s390_PutGe
  0007b	eb 16		 jmp	 SHORT $LN13@s390_PutGe
$LN12@s390_PutGe:

; 457  :     else if (&ARCH_DEP( PutIndex610 ) == pPutIndex) return 6;

  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex610
  00084	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00089	75 06		 jne	 SHORT $LN14@s390_PutGe
  0008b	b0 06		 mov	 al, 6
  0008d	eb 04		 jmp	 SHORT $LN1@s390_PutGe
  0008f	eb 02		 jmp	 SHORT $LN15@s390_PutGe
$LN14@s390_PutGe:

; 458  :     else                                return 7;

  00091	b0 07		 mov	 al, 7
$LN15@s390_PutGe:
$LN13@s390_PutGe:
$LN11@s390_PutGe:
$LN9@s390_PutGe:
$LN7@s390_PutGe:
$LN5@s390_PutGe:
$LN3@s390_PutGe:
$LN1@s390_PutGe:

; 459  : }

  00093	c3		 ret	 0
s390_PutGetCBN10 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
pPutIndex$ = 8
s390_PutGetCBN09 PROC

; 438  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 439  :          if (&ARCH_DEP( PutIndex009 ) == pPutIndex) return 0;

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex009
  0000c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00011	75 06		 jne	 SHORT $LN2@s390_PutGe
  00013	32 c0		 xor	 al, al
  00015	eb 7c		 jmp	 SHORT $LN1@s390_PutGe
  00017	eb 7a		 jmp	 SHORT $LN3@s390_PutGe
$LN2@s390_PutGe:

; 440  :     else if (&ARCH_DEP( PutIndex109 ) == pPutIndex) return 1;

  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex109
  00020	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00025	75 06		 jne	 SHORT $LN4@s390_PutGe
  00027	b0 01		 mov	 al, 1
  00029	eb 68		 jmp	 SHORT $LN1@s390_PutGe
  0002b	eb 66		 jmp	 SHORT $LN5@s390_PutGe
$LN4@s390_PutGe:

; 441  :     else if (&ARCH_DEP( PutIndex209 ) == pPutIndex) return 2;

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex209
  00034	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00039	75 06		 jne	 SHORT $LN6@s390_PutGe
  0003b	b0 02		 mov	 al, 2
  0003d	eb 54		 jmp	 SHORT $LN1@s390_PutGe
  0003f	eb 52		 jmp	 SHORT $LN7@s390_PutGe
$LN6@s390_PutGe:

; 442  :     else if (&ARCH_DEP( PutIndex309 ) == pPutIndex) return 3;

  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex309
  00048	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  0004d	75 06		 jne	 SHORT $LN8@s390_PutGe
  0004f	b0 03		 mov	 al, 3
  00051	eb 40		 jmp	 SHORT $LN1@s390_PutGe
  00053	eb 3e		 jmp	 SHORT $LN9@s390_PutGe
$LN8@s390_PutGe:

; 443  :     else if (&ARCH_DEP( PutIndex409 ) == pPutIndex) return 4;

  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex409
  0005c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00061	75 06		 jne	 SHORT $LN10@s390_PutGe
  00063	b0 04		 mov	 al, 4
  00065	eb 2c		 jmp	 SHORT $LN1@s390_PutGe
  00067	eb 2a		 jmp	 SHORT $LN11@s390_PutGe
$LN10@s390_PutGe:

; 444  :     else if (&ARCH_DEP( PutIndex509 ) == pPutIndex) return 5;

  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex509
  00070	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00075	75 06		 jne	 SHORT $LN12@s390_PutGe
  00077	b0 05		 mov	 al, 5
  00079	eb 18		 jmp	 SHORT $LN1@s390_PutGe
  0007b	eb 16		 jmp	 SHORT $LN13@s390_PutGe
$LN12@s390_PutGe:

; 445  :     else if (&ARCH_DEP( PutIndex609 ) == pPutIndex) return 6;

  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s390_PutIndex609
  00084	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00089	75 06		 jne	 SHORT $LN14@s390_PutGe
  0008b	b0 06		 mov	 al, 6
  0008d	eb 04		 jmp	 SHORT $LN1@s390_PutGe
  0008f	eb 02		 jmp	 SHORT $LN15@s390_PutGe
$LN14@s390_PutGe:

; 446  :     else                                return 7;

  00091	b0 07		 mov	 al, 7
$LN15@s390_PutGe:
$LN13@s390_PutGe:
$LN11@s390_PutGe:
$LN9@s390_PutGe:
$LN7@s390_PutGe:
$LN5@s390_PutGe:
$LN3@s390_PutGe:
$LN1@s390_PutGe:

; 447  : }

  00093	c3		 ret	 0
s390_PutGetCBN09 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv143 = 32
tv71 = 36
tv154 = 40
tv155 = 48
pPIBLK$ = 80
s390_PutIndex713 PROC

; 425  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 426  :     store_op_hw( (pPIBLK->index >> 4) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFE00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 f9 04	 sar	 ecx, 4
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv154[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv154[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 fe 00 00	 and	 eax, 65024		; 0000fe00H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 427  :     store_op_b( (pPIBLK->index << 4), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 83 c0 02	 add	 rax, 2
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008f	c1 e1 04	 shl	 ecx, 4
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00097	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009b	8b d0		 mov	 edx, eax
  0009d	e8 00 00 00 00	 call	 s390_cmpsc_vstoreb

; 428  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a2	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000aa	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ae	48 83 c0 02	 add	 rax, 2
  000b2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ba	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 429  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c9	48 83 e8 02	 sub	 rax, 2
  000cd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d5	48 89 01	 mov	 QWORD PTR [rcx], rax

; 430  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex413 );

  000d8	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000dd	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex413
  000e8	48 89 08	 mov	 QWORD PTR [rax], rcx

; 431  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000eb	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f3	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000f7	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000f9	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00101	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  00103	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN4@s390_PutIn:
  0010b	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv143[rsp]

; 432  : }

  00110	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00114	c3		 ret	 0
s390_PutIndex713 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv143 = 32
tv71 = 36
tv154 = 40
tv155 = 48
pPIBLK$ = 80
s390_PutIndex613 PROC

; 416  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 417  :     store_op_hw( (pPIBLK->index >> 3) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFC00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 f9 03	 sar	 ecx, 3
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv154[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv154[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 fc 00 00	 and	 eax, 64512		; 0000fc00H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 418  :     store_op_b( (pPIBLK->index << 5), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 83 c0 02	 add	 rax, 2
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008f	c1 e1 05	 shl	 ecx, 5
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00097	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009b	8b d0		 mov	 edx, eax
  0009d	e8 00 00 00 00	 call	 s390_cmpsc_vstoreb

; 419  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a2	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000aa	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ae	48 83 c0 02	 add	 rax, 2
  000b2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ba	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 420  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c9	48 83 e8 02	 sub	 rax, 2
  000cd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d5	48 89 01	 mov	 QWORD PTR [rcx], rax

; 421  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex313 );

  000d8	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000dd	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex313
  000e8	48 89 08	 mov	 QWORD PTR [rax], rcx

; 422  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000eb	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f3	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f7	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000f9	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00101	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  00103	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN4@s390_PutIn:
  0010b	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv143[rsp]

; 423  : }

  00110	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00114	c3		 ret	 0
s390_PutIndex613 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv143 = 32
tv71 = 36
tv154 = 40
tv155 = 48
pPIBLK$ = 80
s390_PutIndex513 PROC

; 407  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 408  :     store_op_hw( (pPIBLK->index >> 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF800), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 f9 02	 sar	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv154[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv154[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 409  :     store_op_b( (pPIBLK->index << 6), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 83 c0 02	 add	 rax, 2
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008f	c1 e1 06	 shl	 ecx, 6
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00097	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009b	8b d0		 mov	 edx, eax
  0009d	e8 00 00 00 00	 call	 s390_cmpsc_vstoreb

; 410  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a2	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000aa	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ae	48 83 c0 02	 add	 rax, 2
  000b2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ba	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 411  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c9	48 83 e8 02	 sub	 rax, 2
  000cd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d5	48 89 01	 mov	 QWORD PTR [rcx], rax

; 412  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex213 );

  000d8	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000dd	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex213
  000e8	48 89 08	 mov	 QWORD PTR [rax], rcx

; 413  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000eb	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f3	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f7	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000f9	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00101	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  00103	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN4@s390_PutIn:
  0010b	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv143[rsp]

; 414  : }

  00110	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00114	c3		 ret	 0
s390_PutIndex513 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv143 = 32
tv71 = 36
tv154 = 40
tv155 = 48
pPIBLK$ = 80
s390_PutIndex413 PROC

; 398  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 399  :     store_op_hw( (pPIBLK->index >> 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 f9		 sar	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv154[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv154[rsp]
  00040	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  0006a	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006d	0f b7 c8	 movzx	 ecx, ax
  00070	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 400  :     store_op_b( (pPIBLK->index << 7), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00081	48 83 c0 02	 add	 rax, 2
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008e	c1 e1 07	 shl	 ecx, 7
  00091	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00096	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009a	8b d0		 mov	 edx, eax
  0009c	e8 00 00 00 00	 call	 s390_cmpsc_vstoreb

; 401  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a1	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a9	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ad	48 83 c0 02	 add	 rax, 2
  000b1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b6	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000b9	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 402  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c8	48 83 e8 02	 sub	 rax, 2
  000cc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d1	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d4	48 89 01	 mov	 QWORD PTR [rcx], rax

; 403  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex113 );

  000d7	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000dc	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex113
  000e7	48 89 08	 mov	 QWORD PTR [rax], rcx

; 404  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000ea	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ef	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f2	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f6	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000f8	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00100	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  00102	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN4@s390_PutIn:
  0010a	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv143[rsp]

; 405  : }

  0010f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00113	c3		 ret	 0
s390_PutIndex413 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv130 = 32
tv70 = 36
tv139 = 40
tv140 = 48
pPIBLK$ = 80
s390_PutIndex313 PROC

; 390  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 391  :     store_op_hw( (pPIBLK->index     ) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xE000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv140[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	89 4c 24 24	 mov	 DWORD PTR tv70[rsp], ecx
  00023	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00028	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002b	48 89 54 24 28	 mov	 QWORD PTR tv139[rsp], rdx
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00035	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  00039	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv139[rsp]
  0003e	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00042	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  00047	0f b6 c0	 movzx	 eax, al
  0004a	c1 e0 08	 shl	 eax, 8
  0004d	25 00 e0 00 00	 and	 eax, 57344		; 0000e000H
  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR tv70[rsp]
  00056	0b c8		 or	 ecx, eax
  00058	8b c1		 mov	 eax, ecx
  0005a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005f	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00063	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv140[rsp]
  00068	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006b	0f b7 c8	 movzx	 ecx, ax
  0006e	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 392  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  00073	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00078	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007f	48 83 c0 02	 add	 rax, 2
  00083	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00088	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008b	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 393  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  0008f	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00094	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 83 e8 02	 sub	 rax, 2
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 394  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex013 );

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex013
  000b9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 395  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c8	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000ca	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  000d2	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN4@s390_PutIn:
  000dc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv130[rsp]

; 396  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
s390_PutIndex313 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s390_PutIndex213 PROC

; 382  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 383  :     store_op_hw( (pPIBLK->index << 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xC000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 e1		 shl	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00040	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 c0 00 00	 and	 eax, 49152		; 0000c000H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006a	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006d	0f b7 c8	 movzx	 ecx, ax
  00070	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 384  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00081	48 ff c0	 inc	 rax
  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00089	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008c	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 385  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00090	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009b	48 ff c8	 dec	 rax
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 386  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex713 );

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex713
  000b9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 387  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000c8	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000ca	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d2	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s390_PutIn:
  000dc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 388  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
s390_PutIndex213 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s390_PutIndex113 PROC

; 374  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 375  :     store_op_hw( (pPIBLK->index << 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0x8000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 02	 shl	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 376  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 377  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 378  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex613 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex613
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 379  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000c9	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s390_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 380  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s390_PutIndex113 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv89 = 32
pPIBLK$ = 64
s390_PutIndex013 PROC

; 366  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 367  :     store_op_hw( (pPIBLK->index << 3), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00016	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001a	c1 e1 03	 shl	 ecx, 3
  0001d	48 8b 54 24 40	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00022	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  00026	8b 50 20	 mov	 edx, DWORD PTR [rax+32]
  00029	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 368  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00033	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00036	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003a	48 ff c0	 inc	 rax
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00042	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00045	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 369  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00054	48 ff c8	 dec	 rax
  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0005f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 370  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex513 );

  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00067	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex513
  00072	48 89 08	 mov	 QWORD PTR [rax], rcx

; 371  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  00075	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  00081	73 0a		 jae	 SHORT $LN3@s390_PutIn
  00083	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  0008b	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  0008d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN4@s390_PutIn:
  00095	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv89[rsp]

; 372  : }

  0009a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009e	c3		 ret	 0
s390_PutIndex013 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv143 = 32
tv71 = 36
tv154 = 40
tv155 = 48
pPIBLK$ = 80
s390_PutIndex712 PROC

; 351  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 352  :     store_op_hw( (pPIBLK->index >> 3) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFE00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 f9 03	 sar	 ecx, 3
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv154[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv154[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 fe 00 00	 and	 eax, 65024		; 0000fe00H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 353  :     store_op_b( (pPIBLK->index << 5), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 83 c0 02	 add	 rax, 2
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008f	c1 e1 05	 shl	 ecx, 5
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00097	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009b	8b d0		 mov	 edx, eax
  0009d	e8 00 00 00 00	 call	 s390_cmpsc_vstoreb

; 354  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a2	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000aa	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ae	48 83 c0 02	 add	 rax, 2
  000b2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ba	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 355  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c9	48 83 e8 02	 sub	 rax, 2
  000cd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d5	48 89 01	 mov	 QWORD PTR [rcx], rax

; 356  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex312 );

  000d8	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000dd	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex312
  000e8	48 89 08	 mov	 QWORD PTR [rax], rcx

; 357  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000eb	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f3	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f7	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000f9	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00101	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  00103	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN4@s390_PutIn:
  0010b	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv143[rsp]

; 358  : }

  00110	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00114	c3		 ret	 0
s390_PutIndex712 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv143 = 32
tv71 = 36
tv154 = 40
tv155 = 48
pPIBLK$ = 80
s390_PutIndex612 PROC

; 342  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 343  :     store_op_hw( (pPIBLK->index >> 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFC00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 f9 02	 sar	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv154[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv154[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 fc 00 00	 and	 eax, 64512		; 0000fc00H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 344  :     store_op_b( (pPIBLK->index << 6), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 83 c0 02	 add	 rax, 2
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008f	c1 e1 06	 shl	 ecx, 6
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00097	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009b	8b d0		 mov	 edx, eax
  0009d	e8 00 00 00 00	 call	 s390_cmpsc_vstoreb

; 345  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a2	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000aa	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ae	48 83 c0 02	 add	 rax, 2
  000b2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ba	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 346  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c9	48 83 e8 02	 sub	 rax, 2
  000cd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d5	48 89 01	 mov	 QWORD PTR [rcx], rax

; 347  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex212 );

  000d8	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000dd	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex212
  000e8	48 89 08	 mov	 QWORD PTR [rax], rcx

; 348  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000eb	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f3	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f7	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000f9	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00101	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  00103	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN4@s390_PutIn:
  0010b	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv143[rsp]

; 349  : }

  00110	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00114	c3		 ret	 0
s390_PutIndex612 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv143 = 32
tv71 = 36
tv154 = 40
tv155 = 48
pPIBLK$ = 80
s390_PutIndex512 PROC

; 333  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 334  :     store_op_hw( (pPIBLK->index >> 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF800), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 f9		 sar	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv154[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv154[rsp]
  00040	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  0006a	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006d	0f b7 c8	 movzx	 ecx, ax
  00070	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 335  :     store_op_b( (pPIBLK->index << 7), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00081	48 83 c0 02	 add	 rax, 2
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008e	c1 e1 07	 shl	 ecx, 7
  00091	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00096	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009a	8b d0		 mov	 edx, eax
  0009c	e8 00 00 00 00	 call	 s390_cmpsc_vstoreb

; 336  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a1	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a9	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ad	48 83 c0 02	 add	 rax, 2
  000b1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b6	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000b9	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 337  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c8	48 83 e8 02	 sub	 rax, 2
  000cc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d1	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d4	48 89 01	 mov	 QWORD PTR [rcx], rax

; 338  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex112 );

  000d7	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000dc	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex112
  000e7	48 89 08	 mov	 QWORD PTR [rax], rcx

; 339  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000ea	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ef	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f2	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f6	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000f8	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00100	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  00102	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN4@s390_PutIn:
  0010a	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv143[rsp]

; 340  : }

  0010f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00113	c3		 ret	 0
s390_PutIndex512 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv130 = 32
tv70 = 36
tv139 = 40
tv140 = 48
pPIBLK$ = 80
s390_PutIndex412 PROC

; 325  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 326  :     store_op_hw( (pPIBLK->index     ) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv140[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	89 4c 24 24	 mov	 DWORD PTR tv70[rsp], ecx
  00023	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00028	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002b	48 89 54 24 28	 mov	 QWORD PTR tv139[rsp], rdx
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00035	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  00039	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv139[rsp]
  0003e	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00042	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  00047	0f b6 c0	 movzx	 eax, al
  0004a	c1 e0 08	 shl	 eax, 8
  0004d	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR tv70[rsp]
  00056	0b c8		 or	 ecx, eax
  00058	8b c1		 mov	 eax, ecx
  0005a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005f	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00063	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv140[rsp]
  00068	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006b	0f b7 c8	 movzx	 ecx, ax
  0006e	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 327  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  00073	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00078	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007f	48 83 c0 02	 add	 rax, 2
  00083	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00088	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008b	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 328  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  0008f	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00094	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 83 e8 02	 sub	 rax, 2
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 329  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex012 );

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex012
  000b9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 330  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c8	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000ca	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  000d2	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN4@s390_PutIn:
  000dc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv130[rsp]

; 331  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
s390_PutIndex412 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s390_PutIndex312 PROC

; 317  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 318  :     store_op_hw( (pPIBLK->index << 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xE000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 e1		 shl	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00040	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 e0 00 00	 and	 eax, 57344		; 0000e000H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006a	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006d	0f b7 c8	 movzx	 ecx, ax
  00070	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 319  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00081	48 ff c0	 inc	 rax
  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00089	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008c	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 320  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00090	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009b	48 ff c8	 dec	 rax
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 321  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex712 );

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex712
  000b9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 322  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000c8	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000ca	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d2	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s390_PutIn:
  000dc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 323  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
s390_PutIndex312 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s390_PutIndex212 PROC

; 309  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 310  :     store_op_hw( (pPIBLK->index << 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xC000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 02	 shl	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 c0 00 00	 and	 eax, 49152		; 0000c000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 311  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 312  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 313  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex612 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex612
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 314  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000c9	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s390_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 315  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s390_PutIndex212 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s390_PutIndex112 PROC

; 301  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 302  :     store_op_hw( (pPIBLK->index << 3) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0x8000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 03	 shl	 ecx, 3
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 303  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 304  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 305  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex512 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex512
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 306  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000c9	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s390_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 307  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s390_PutIndex112 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv89 = 32
pPIBLK$ = 64
s390_PutIndex012 PROC

; 293  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 294  :     store_op_hw( (pPIBLK->index << 4), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00016	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001a	c1 e1 04	 shl	 ecx, 4
  0001d	48 8b 54 24 40	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00022	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  00026	8b 50 20	 mov	 edx, DWORD PTR [rax+32]
  00029	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 295  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00033	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00036	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003a	48 ff c0	 inc	 rax
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00042	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00045	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 296  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00054	48 ff c8	 dec	 rax
  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0005f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 297  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex412 );

  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00067	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex412
  00072	48 89 08	 mov	 QWORD PTR [rax], rcx

; 298  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  00075	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  00081	73 0a		 jae	 SHORT $LN3@s390_PutIn
  00083	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  0008b	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  0008d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN4@s390_PutIn:
  00095	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv89[rsp]

; 299  : }

  0009a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009e	c3		 ret	 0
s390_PutIndex012 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv143 = 32
tv71 = 36
tv154 = 40
tv155 = 48
pPIBLK$ = 80
s390_PutIndex711 PROC

; 278  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 279  :     store_op_hw( (pPIBLK->index >> 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFE00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 f9 02	 sar	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv154[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv154[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 fe 00 00	 and	 eax, 65024		; 0000fe00H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 280  :     store_op_b( (pPIBLK->index << 6), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 83 c0 02	 add	 rax, 2
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008f	c1 e1 06	 shl	 ecx, 6
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00097	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009b	8b d0		 mov	 edx, eax
  0009d	e8 00 00 00 00	 call	 s390_cmpsc_vstoreb

; 281  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a2	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000aa	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ae	48 83 c0 02	 add	 rax, 2
  000b2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ba	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 282  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c9	48 83 e8 02	 sub	 rax, 2
  000cd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d5	48 89 01	 mov	 QWORD PTR [rcx], rax

; 283  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex211 );

  000d8	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000dd	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex211
  000e8	48 89 08	 mov	 QWORD PTR [rax], rcx

; 284  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000eb	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f3	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f7	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000f9	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00101	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  00103	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN4@s390_PutIn:
  0010b	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv143[rsp]

; 285  : }

  00110	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00114	c3		 ret	 0
s390_PutIndex711 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv143 = 32
tv71 = 36
tv154 = 40
tv155 = 48
pPIBLK$ = 80
s390_PutIndex611 PROC

; 269  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 270  :     store_op_hw( (pPIBLK->index >> 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFC00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 f9		 sar	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv154[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv154[rsp]
  00040	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 fc 00 00	 and	 eax, 64512		; 0000fc00H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  0006a	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006d	0f b7 c8	 movzx	 ecx, ax
  00070	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 271  :     store_op_b( (pPIBLK->index << 7), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00081	48 83 c0 02	 add	 rax, 2
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008e	c1 e1 07	 shl	 ecx, 7
  00091	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00096	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009a	8b d0		 mov	 edx, eax
  0009c	e8 00 00 00 00	 call	 s390_cmpsc_vstoreb

; 272  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a1	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a9	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ad	48 83 c0 02	 add	 rax, 2
  000b1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b6	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000b9	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 273  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c8	48 83 e8 02	 sub	 rax, 2
  000cc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d1	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d4	48 89 01	 mov	 QWORD PTR [rcx], rax

; 274  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex111 );

  000d7	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000dc	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex111
  000e7	48 89 08	 mov	 QWORD PTR [rax], rcx

; 275  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000ea	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ef	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f2	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f6	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000f8	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00100	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  00102	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN4@s390_PutIn:
  0010a	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv143[rsp]

; 276  : }

  0010f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00113	c3		 ret	 0
s390_PutIndex611 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv130 = 32
tv70 = 36
tv139 = 40
tv140 = 48
pPIBLK$ = 80
s390_PutIndex511 PROC

; 261  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 262  :     store_op_hw( (pPIBLK->index     ) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF800), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv140[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	89 4c 24 24	 mov	 DWORD PTR tv70[rsp], ecx
  00023	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00028	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002b	48 89 54 24 28	 mov	 QWORD PTR tv139[rsp], rdx
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00035	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  00039	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv139[rsp]
  0003e	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00042	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  00047	0f b6 c0	 movzx	 eax, al
  0004a	c1 e0 08	 shl	 eax, 8
  0004d	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR tv70[rsp]
  00056	0b c8		 or	 ecx, eax
  00058	8b c1		 mov	 eax, ecx
  0005a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005f	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00063	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv140[rsp]
  00068	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006b	0f b7 c8	 movzx	 ecx, ax
  0006e	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 263  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  00073	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00078	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007f	48 83 c0 02	 add	 rax, 2
  00083	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00088	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008b	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 264  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  0008f	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00094	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 83 e8 02	 sub	 rax, 2
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 265  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex011 );

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex011
  000b9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 266  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c8	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000ca	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  000d2	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN4@s390_PutIn:
  000dc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv130[rsp]

; 267  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
s390_PutIndex511 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s390_PutIndex411 PROC

; 253  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 254  :     store_op_hw( (pPIBLK->index << 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 e1		 shl	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00040	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006a	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006d	0f b7 c8	 movzx	 ecx, ax
  00070	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 255  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00081	48 ff c0	 inc	 rax
  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00089	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008c	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 256  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00090	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009b	48 ff c8	 dec	 rax
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 257  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex711 );

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex711
  000b9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 258  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000c8	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000ca	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d2	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s390_PutIn:
  000dc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 259  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
s390_PutIndex411 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s390_PutIndex311 PROC

; 245  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 246  :     store_op_hw( (pPIBLK->index << 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xE000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 02	 shl	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 e0 00 00	 and	 eax, 57344		; 0000e000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 247  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 248  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 249  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex611 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex611
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 250  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000c9	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s390_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 251  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s390_PutIndex311 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s390_PutIndex211 PROC

; 237  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 238  :     store_op_hw( (pPIBLK->index << 3) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xC000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 03	 shl	 ecx, 3
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 c0 00 00	 and	 eax, 49152		; 0000c000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 239  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 240  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 241  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex511 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex511
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 242  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s390_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 243  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s390_PutIndex211 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s390_PutIndex111 PROC

; 229  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 230  :     store_op_hw( (pPIBLK->index << 4) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0x8000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 04	 shl	 ecx, 4
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 231  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 232  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 233  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex411 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex411
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 234  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s390_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 235  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s390_PutIndex111 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv89 = 32
pPIBLK$ = 64
s390_PutIndex011 PROC

; 221  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 222  :     store_op_hw( (pPIBLK->index << 5), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00016	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001a	c1 e1 05	 shl	 ecx, 5
  0001d	48 8b 54 24 40	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00022	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  00026	8b 50 20	 mov	 edx, DWORD PTR [rax+32]
  00029	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 223  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00033	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00036	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003a	48 ff c0	 inc	 rax
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00042	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00045	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 224  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00054	48 ff c8	 dec	 rax
  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0005f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 225  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex311 );

  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00067	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex311
  00072	48 89 08	 mov	 QWORD PTR [rax], rcx

; 226  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  00075	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  00081	73 0a		 jae	 SHORT $LN3@s390_PutIn
  00083	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  0008b	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  0008d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN4@s390_PutIn:
  00095	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv89[rsp]

; 227  : }

  0009a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009e	c3		 ret	 0
s390_PutIndex011 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv143 = 32
tv71 = 36
tv154 = 40
tv155 = 48
pPIBLK$ = 80
s390_PutIndex710 PROC

; 206  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 207  :     store_op_hw( (pPIBLK->index >> 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFE00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 f9		 sar	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv154[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv154[rsp]
  00040	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 fe 00 00	 and	 eax, 65024		; 0000fe00H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  0006a	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006d	0f b7 c8	 movzx	 ecx, ax
  00070	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 208  :     store_op_b( (pPIBLK->index << 7), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00081	48 83 c0 02	 add	 rax, 2
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008e	c1 e1 07	 shl	 ecx, 7
  00091	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00096	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009a	8b d0		 mov	 edx, eax
  0009c	e8 00 00 00 00	 call	 s390_cmpsc_vstoreb

; 209  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a1	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a9	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ad	48 83 c0 02	 add	 rax, 2
  000b1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b6	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000b9	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 210  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c8	48 83 e8 02	 sub	 rax, 2
  000cc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d1	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d4	48 89 01	 mov	 QWORD PTR [rcx], rax

; 211  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex110 );

  000d7	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000dc	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex110
  000e7	48 89 08	 mov	 QWORD PTR [rax], rcx

; 212  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000ea	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ef	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f2	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f6	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000f8	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00100	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  00102	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN4@s390_PutIn:
  0010a	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv143[rsp]

; 213  : }

  0010f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00113	c3		 ret	 0
s390_PutIndex710 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv130 = 32
tv70 = 36
tv139 = 40
tv140 = 48
pPIBLK$ = 80
s390_PutIndex610 PROC

; 198  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 199  :     store_op_hw( (pPIBLK->index     ) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFC00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv140[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	89 4c 24 24	 mov	 DWORD PTR tv70[rsp], ecx
  00023	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00028	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002b	48 89 54 24 28	 mov	 QWORD PTR tv139[rsp], rdx
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00035	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  00039	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv139[rsp]
  0003e	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00042	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  00047	0f b6 c0	 movzx	 eax, al
  0004a	c1 e0 08	 shl	 eax, 8
  0004d	25 00 fc 00 00	 and	 eax, 64512		; 0000fc00H
  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR tv70[rsp]
  00056	0b c8		 or	 ecx, eax
  00058	8b c1		 mov	 eax, ecx
  0005a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005f	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00063	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv140[rsp]
  00068	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006b	0f b7 c8	 movzx	 ecx, ax
  0006e	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 200  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  00073	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00078	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007f	48 83 c0 02	 add	 rax, 2
  00083	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00088	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008b	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 201  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  0008f	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00094	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 83 e8 02	 sub	 rax, 2
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 202  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex010 );

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex010
  000b9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 203  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c8	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000ca	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  000d2	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN4@s390_PutIn:
  000dc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv130[rsp]

; 204  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
s390_PutIndex610 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s390_PutIndex510 PROC

; 190  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 191  :     store_op_hw( (pPIBLK->index << 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF800), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 e1		 shl	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00040	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006a	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006d	0f b7 c8	 movzx	 ecx, ax
  00070	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 192  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00081	48 ff c0	 inc	 rax
  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00089	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008c	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 193  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00090	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009b	48 ff c8	 dec	 rax
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 194  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex710 );

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex710
  000b9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 195  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000c8	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000ca	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d2	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s390_PutIn:
  000dc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 196  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
s390_PutIndex510 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s390_PutIndex410 PROC

; 182  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 183  :     store_op_hw( (pPIBLK->index << 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 02	 shl	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 184  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 185  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 186  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex610 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex610
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 187  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s390_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 188  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s390_PutIndex410 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s390_PutIndex310 PROC

; 174  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 175  :     store_op_hw( (pPIBLK->index << 3) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xE000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 03	 shl	 ecx, 3
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 e0 00 00	 and	 eax, 57344		; 0000e000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 176  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 177  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 178  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex510 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex510
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 179  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s390_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 180  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s390_PutIndex310 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s390_PutIndex210 PROC

; 166  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 167  :     store_op_hw( (pPIBLK->index << 4) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xC000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 04	 shl	 ecx, 4
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 c0 00 00	 and	 eax, 49152		; 0000c000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 168  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 169  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 170  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex410 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex410
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 171  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s390_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 172  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s390_PutIndex210 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s390_PutIndex110 PROC

; 158  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 159  :     store_op_hw( (pPIBLK->index << 5) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0x8000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 05	 shl	 ecx, 5
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 160  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 161  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 162  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex310 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex310
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 163  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s390_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 164  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s390_PutIndex110 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv89 = 32
pPIBLK$ = 64
s390_PutIndex010 PROC

; 150  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 151  :     store_op_hw( (pPIBLK->index << 6), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00016	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001a	c1 e1 06	 shl	 ecx, 6
  0001d	48 8b 54 24 40	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00022	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  00026	8b 50 20	 mov	 edx, DWORD PTR [rax+32]
  00029	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 152  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00033	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00036	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003a	48 ff c0	 inc	 rax
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00042	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00045	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 153  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00054	48 ff c8	 dec	 rax
  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0005f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 154  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex210 );

  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00067	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex210
  00072	48 89 08	 mov	 QWORD PTR [rax], rcx

; 155  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  00075	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  00081	73 0a		 jae	 SHORT $LN3@s390_PutIn
  00083	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  0008b	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  0008d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN4@s390_PutIn:
  00095	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv89[rsp]

; 156  : }

  0009a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009e	c3		 ret	 0
s390_PutIndex010 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv130 = 32
tv70 = 36
tv139 = 40
tv140 = 48
pPIBLK$ = 80
s390_PutIndex709 PROC

; 136  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 137  :     store_op_hw( (pPIBLK->index     ) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFE00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv140[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	89 4c 24 24	 mov	 DWORD PTR tv70[rsp], ecx
  00023	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00028	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002b	48 89 54 24 28	 mov	 QWORD PTR tv139[rsp], rdx
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00035	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  00039	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv139[rsp]
  0003e	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00042	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  00047	0f b6 c0	 movzx	 eax, al
  0004a	c1 e0 08	 shl	 eax, 8
  0004d	25 00 fe 00 00	 and	 eax, 65024		; 0000fe00H
  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR tv70[rsp]
  00056	0b c8		 or	 ecx, eax
  00058	8b c1		 mov	 eax, ecx
  0005a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005f	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00063	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv140[rsp]
  00068	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006b	0f b7 c8	 movzx	 ecx, ax
  0006e	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 138  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  00073	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00078	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007f	48 83 c0 02	 add	 rax, 2
  00083	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00088	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008b	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 139  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  0008f	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00094	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 83 e8 02	 sub	 rax, 2
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 140  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex009 );

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex009
  000b9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 141  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c8	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000ca	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  000d2	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN4@s390_PutIn:
  000dc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv130[rsp]

; 142  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
s390_PutIndex709 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s390_PutIndex609 PROC

; 128  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 129  :     store_op_hw( (pPIBLK->index << 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFC00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 e1		 shl	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00040	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 fc 00 00	 and	 eax, 64512		; 0000fc00H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006a	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006d	0f b7 c8	 movzx	 ecx, ax
  00070	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 130  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00081	48 ff c0	 inc	 rax
  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00089	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008c	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 131  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00090	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009b	48 ff c8	 dec	 rax
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 132  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex709 );

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex709
  000b9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 133  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c8	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000ca	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d2	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s390_PutIn:
  000dc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 134  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
s390_PutIndex609 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s390_PutIndex509 PROC

; 120  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 121  :     store_op_hw( (pPIBLK->index << 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF800), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 02	 shl	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 122  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 123  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 124  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex609 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex609
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 125  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s390_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 126  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s390_PutIndex509 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s390_PutIndex409 PROC

; 112  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 113  :     store_op_hw( (pPIBLK->index << 3) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 03	 shl	 ecx, 3
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 114  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 115  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 116  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex509 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex509
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 117  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s390_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 118  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s390_PutIndex409 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s390_PutIndex309 PROC

; 104  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 105  :     store_op_hw( (pPIBLK->index << 4) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xE000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 04	 shl	 ecx, 4
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 e0 00 00	 and	 eax, 57344		; 0000e000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 106  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 107  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 108  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex409 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex409
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 109  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s390_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 110  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s390_PutIndex309 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s390_PutIndex209 PROC

; 96   : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 97   :     store_op_hw( (pPIBLK->index << 5) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xC000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 05	 shl	 ecx, 5
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 c0 00 00	 and	 eax, 49152		; 0000c000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 98   :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 99   :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 100  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex309 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex309
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 101  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s390_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 102  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s390_PutIndex209 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s390_PutIndex109 PROC

; 88   : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 89   :     store_op_hw( (pPIBLK->index << 6) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0x8000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 06	 shl	 ecx, 6
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s390_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 90   :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 91   :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 92   :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex209 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex209
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 93   :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s390_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s390_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 94   : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s390_PutIndex109 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv89 = 32
pPIBLK$ = 64
s390_PutIndex009 PROC

; 80   : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 81   :     store_op_hw( (pPIBLK->index << 7), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00016	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001a	c1 e1 07	 shl	 ecx, 7
  0001d	48 8b 54 24 40	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00022	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  00026	8b 50 20	 mov	 edx, DWORD PTR [rax+32]
  00029	e8 00 00 00 00	 call	 s390_cmpsc_vstore2

; 82   :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00033	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00036	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003a	48 ff c0	 inc	 rax
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00042	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00045	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 83   :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00054	48 ff c8	 dec	 rax
  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0005f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 84   :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex109 );

  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00067	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_PutIndex109
  00072	48 89 08	 mov	 QWORD PTR [rax], rcx

; 85   :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  00075	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  00081	73 0a		 jae	 SHORT $LN3@s390_PutIn
  00083	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  0008b	eb 08		 jmp	 SHORT $LN4@s390_PutIn
$LN3@s390_PutIn:
  0008d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN4@s390_PutIn:
  00095	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv89[rsp]

; 86   : }

  0009a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009e	c3		 ret	 0
s390_PutIndex009 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
pPutIndex$ = 8
s370_PutGetCBN13 PROC

; 486  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 487  :          if (&ARCH_DEP( PutIndex013 ) == pPutIndex) return 0;

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex013
  0000c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00011	75 06		 jne	 SHORT $LN2@s370_PutGe
  00013	32 c0		 xor	 al, al
  00015	eb 7c		 jmp	 SHORT $LN1@s370_PutGe
  00017	eb 7a		 jmp	 SHORT $LN3@s370_PutGe
$LN2@s370_PutGe:

; 488  :     else if (&ARCH_DEP( PutIndex113 ) == pPutIndex) return 1;

  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex113
  00020	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00025	75 06		 jne	 SHORT $LN4@s370_PutGe
  00027	b0 01		 mov	 al, 1
  00029	eb 68		 jmp	 SHORT $LN1@s370_PutGe
  0002b	eb 66		 jmp	 SHORT $LN5@s370_PutGe
$LN4@s370_PutGe:

; 489  :     else if (&ARCH_DEP( PutIndex213 ) == pPutIndex) return 2;

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex213
  00034	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00039	75 06		 jne	 SHORT $LN6@s370_PutGe
  0003b	b0 02		 mov	 al, 2
  0003d	eb 54		 jmp	 SHORT $LN1@s370_PutGe
  0003f	eb 52		 jmp	 SHORT $LN7@s370_PutGe
$LN6@s370_PutGe:

; 490  :     else if (&ARCH_DEP( PutIndex313 ) == pPutIndex) return 3;

  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex313
  00048	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  0004d	75 06		 jne	 SHORT $LN8@s370_PutGe
  0004f	b0 03		 mov	 al, 3
  00051	eb 40		 jmp	 SHORT $LN1@s370_PutGe
  00053	eb 3e		 jmp	 SHORT $LN9@s370_PutGe
$LN8@s370_PutGe:

; 491  :     else if (&ARCH_DEP( PutIndex413 ) == pPutIndex) return 4;

  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex413
  0005c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00061	75 06		 jne	 SHORT $LN10@s370_PutGe
  00063	b0 04		 mov	 al, 4
  00065	eb 2c		 jmp	 SHORT $LN1@s370_PutGe
  00067	eb 2a		 jmp	 SHORT $LN11@s370_PutGe
$LN10@s370_PutGe:

; 492  :     else if (&ARCH_DEP( PutIndex513 ) == pPutIndex) return 5;

  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex513
  00070	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00075	75 06		 jne	 SHORT $LN12@s370_PutGe
  00077	b0 05		 mov	 al, 5
  00079	eb 18		 jmp	 SHORT $LN1@s370_PutGe
  0007b	eb 16		 jmp	 SHORT $LN13@s370_PutGe
$LN12@s370_PutGe:

; 493  :     else if (&ARCH_DEP( PutIndex613 ) == pPutIndex) return 6;

  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex613
  00084	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00089	75 06		 jne	 SHORT $LN14@s370_PutGe
  0008b	b0 06		 mov	 al, 6
  0008d	eb 04		 jmp	 SHORT $LN1@s370_PutGe
  0008f	eb 02		 jmp	 SHORT $LN15@s370_PutGe
$LN14@s370_PutGe:

; 494  :     else                                return 7;

  00091	b0 07		 mov	 al, 7
$LN15@s370_PutGe:
$LN13@s370_PutGe:
$LN11@s370_PutGe:
$LN9@s370_PutGe:
$LN7@s370_PutGe:
$LN5@s370_PutGe:
$LN3@s370_PutGe:
$LN1@s370_PutGe:

; 495  : }

  00093	c3		 ret	 0
s370_PutGetCBN13 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
pPutIndex$ = 8
s370_PutGetCBN12 PROC

; 474  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 475  :          if (&ARCH_DEP( PutIndex012 ) == pPutIndex) return 0;

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex012
  0000c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00011	75 06		 jne	 SHORT $LN2@s370_PutGe
  00013	32 c0		 xor	 al, al
  00015	eb 7c		 jmp	 SHORT $LN1@s370_PutGe
  00017	eb 7a		 jmp	 SHORT $LN3@s370_PutGe
$LN2@s370_PutGe:

; 476  :     else if (&ARCH_DEP( PutIndex112 ) == pPutIndex) return 1;

  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex112
  00020	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00025	75 06		 jne	 SHORT $LN4@s370_PutGe
  00027	b0 01		 mov	 al, 1
  00029	eb 68		 jmp	 SHORT $LN1@s370_PutGe
  0002b	eb 66		 jmp	 SHORT $LN5@s370_PutGe
$LN4@s370_PutGe:

; 477  :     else if (&ARCH_DEP( PutIndex212 ) == pPutIndex) return 2;

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex212
  00034	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00039	75 06		 jne	 SHORT $LN6@s370_PutGe
  0003b	b0 02		 mov	 al, 2
  0003d	eb 54		 jmp	 SHORT $LN1@s370_PutGe
  0003f	eb 52		 jmp	 SHORT $LN7@s370_PutGe
$LN6@s370_PutGe:

; 478  :     else if (&ARCH_DEP( PutIndex312 ) == pPutIndex) return 3;

  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex312
  00048	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  0004d	75 06		 jne	 SHORT $LN8@s370_PutGe
  0004f	b0 03		 mov	 al, 3
  00051	eb 40		 jmp	 SHORT $LN1@s370_PutGe
  00053	eb 3e		 jmp	 SHORT $LN9@s370_PutGe
$LN8@s370_PutGe:

; 479  :     else if (&ARCH_DEP( PutIndex412 ) == pPutIndex) return 4;

  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex412
  0005c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00061	75 06		 jne	 SHORT $LN10@s370_PutGe
  00063	b0 04		 mov	 al, 4
  00065	eb 2c		 jmp	 SHORT $LN1@s370_PutGe
  00067	eb 2a		 jmp	 SHORT $LN11@s370_PutGe
$LN10@s370_PutGe:

; 480  :     else if (&ARCH_DEP( PutIndex512 ) == pPutIndex) return 5;

  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex512
  00070	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00075	75 06		 jne	 SHORT $LN12@s370_PutGe
  00077	b0 05		 mov	 al, 5
  00079	eb 18		 jmp	 SHORT $LN1@s370_PutGe
  0007b	eb 16		 jmp	 SHORT $LN13@s370_PutGe
$LN12@s370_PutGe:

; 481  :     else if (&ARCH_DEP( PutIndex612 ) == pPutIndex) return 6;

  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex612
  00084	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00089	75 06		 jne	 SHORT $LN14@s370_PutGe
  0008b	b0 06		 mov	 al, 6
  0008d	eb 04		 jmp	 SHORT $LN1@s370_PutGe
  0008f	eb 02		 jmp	 SHORT $LN15@s370_PutGe
$LN14@s370_PutGe:

; 482  :     else                                return 7;

  00091	b0 07		 mov	 al, 7
$LN15@s370_PutGe:
$LN13@s370_PutGe:
$LN11@s370_PutGe:
$LN9@s370_PutGe:
$LN7@s370_PutGe:
$LN5@s370_PutGe:
$LN3@s370_PutGe:
$LN1@s370_PutGe:

; 483  : }

  00093	c3		 ret	 0
s370_PutGetCBN12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
pPutIndex$ = 8
s370_PutGetCBN11 PROC

; 462  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 463  :          if (&ARCH_DEP( PutIndex011 ) == pPutIndex) return 0;

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex011
  0000c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00011	75 06		 jne	 SHORT $LN2@s370_PutGe
  00013	32 c0		 xor	 al, al
  00015	eb 7c		 jmp	 SHORT $LN1@s370_PutGe
  00017	eb 7a		 jmp	 SHORT $LN3@s370_PutGe
$LN2@s370_PutGe:

; 464  :     else if (&ARCH_DEP( PutIndex111 ) == pPutIndex) return 1;

  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex111
  00020	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00025	75 06		 jne	 SHORT $LN4@s370_PutGe
  00027	b0 01		 mov	 al, 1
  00029	eb 68		 jmp	 SHORT $LN1@s370_PutGe
  0002b	eb 66		 jmp	 SHORT $LN5@s370_PutGe
$LN4@s370_PutGe:

; 465  :     else if (&ARCH_DEP( PutIndex211 ) == pPutIndex) return 2;

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex211
  00034	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00039	75 06		 jne	 SHORT $LN6@s370_PutGe
  0003b	b0 02		 mov	 al, 2
  0003d	eb 54		 jmp	 SHORT $LN1@s370_PutGe
  0003f	eb 52		 jmp	 SHORT $LN7@s370_PutGe
$LN6@s370_PutGe:

; 466  :     else if (&ARCH_DEP( PutIndex311 ) == pPutIndex) return 3;

  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex311
  00048	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  0004d	75 06		 jne	 SHORT $LN8@s370_PutGe
  0004f	b0 03		 mov	 al, 3
  00051	eb 40		 jmp	 SHORT $LN1@s370_PutGe
  00053	eb 3e		 jmp	 SHORT $LN9@s370_PutGe
$LN8@s370_PutGe:

; 467  :     else if (&ARCH_DEP( PutIndex411 ) == pPutIndex) return 4;

  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex411
  0005c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00061	75 06		 jne	 SHORT $LN10@s370_PutGe
  00063	b0 04		 mov	 al, 4
  00065	eb 2c		 jmp	 SHORT $LN1@s370_PutGe
  00067	eb 2a		 jmp	 SHORT $LN11@s370_PutGe
$LN10@s370_PutGe:

; 468  :     else if (&ARCH_DEP( PutIndex511 ) == pPutIndex) return 5;

  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex511
  00070	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00075	75 06		 jne	 SHORT $LN12@s370_PutGe
  00077	b0 05		 mov	 al, 5
  00079	eb 18		 jmp	 SHORT $LN1@s370_PutGe
  0007b	eb 16		 jmp	 SHORT $LN13@s370_PutGe
$LN12@s370_PutGe:

; 469  :     else if (&ARCH_DEP( PutIndex611 ) == pPutIndex) return 6;

  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex611
  00084	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00089	75 06		 jne	 SHORT $LN14@s370_PutGe
  0008b	b0 06		 mov	 al, 6
  0008d	eb 04		 jmp	 SHORT $LN1@s370_PutGe
  0008f	eb 02		 jmp	 SHORT $LN15@s370_PutGe
$LN14@s370_PutGe:

; 470  :     else                                return 7;

  00091	b0 07		 mov	 al, 7
$LN15@s370_PutGe:
$LN13@s370_PutGe:
$LN11@s370_PutGe:
$LN9@s370_PutGe:
$LN7@s370_PutGe:
$LN5@s370_PutGe:
$LN3@s370_PutGe:
$LN1@s370_PutGe:

; 471  : }

  00093	c3		 ret	 0
s370_PutGetCBN11 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
pPutIndex$ = 8
s370_PutGetCBN10 PROC

; 450  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 451  :          if (&ARCH_DEP( PutIndex010 ) == pPutIndex) return 0;

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex010
  0000c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00011	75 06		 jne	 SHORT $LN2@s370_PutGe
  00013	32 c0		 xor	 al, al
  00015	eb 7c		 jmp	 SHORT $LN1@s370_PutGe
  00017	eb 7a		 jmp	 SHORT $LN3@s370_PutGe
$LN2@s370_PutGe:

; 452  :     else if (&ARCH_DEP( PutIndex110 ) == pPutIndex) return 1;

  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex110
  00020	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00025	75 06		 jne	 SHORT $LN4@s370_PutGe
  00027	b0 01		 mov	 al, 1
  00029	eb 68		 jmp	 SHORT $LN1@s370_PutGe
  0002b	eb 66		 jmp	 SHORT $LN5@s370_PutGe
$LN4@s370_PutGe:

; 453  :     else if (&ARCH_DEP( PutIndex210 ) == pPutIndex) return 2;

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex210
  00034	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00039	75 06		 jne	 SHORT $LN6@s370_PutGe
  0003b	b0 02		 mov	 al, 2
  0003d	eb 54		 jmp	 SHORT $LN1@s370_PutGe
  0003f	eb 52		 jmp	 SHORT $LN7@s370_PutGe
$LN6@s370_PutGe:

; 454  :     else if (&ARCH_DEP( PutIndex310 ) == pPutIndex) return 3;

  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex310
  00048	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  0004d	75 06		 jne	 SHORT $LN8@s370_PutGe
  0004f	b0 03		 mov	 al, 3
  00051	eb 40		 jmp	 SHORT $LN1@s370_PutGe
  00053	eb 3e		 jmp	 SHORT $LN9@s370_PutGe
$LN8@s370_PutGe:

; 455  :     else if (&ARCH_DEP( PutIndex410 ) == pPutIndex) return 4;

  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex410
  0005c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00061	75 06		 jne	 SHORT $LN10@s370_PutGe
  00063	b0 04		 mov	 al, 4
  00065	eb 2c		 jmp	 SHORT $LN1@s370_PutGe
  00067	eb 2a		 jmp	 SHORT $LN11@s370_PutGe
$LN10@s370_PutGe:

; 456  :     else if (&ARCH_DEP( PutIndex510 ) == pPutIndex) return 5;

  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex510
  00070	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00075	75 06		 jne	 SHORT $LN12@s370_PutGe
  00077	b0 05		 mov	 al, 5
  00079	eb 18		 jmp	 SHORT $LN1@s370_PutGe
  0007b	eb 16		 jmp	 SHORT $LN13@s370_PutGe
$LN12@s370_PutGe:

; 457  :     else if (&ARCH_DEP( PutIndex610 ) == pPutIndex) return 6;

  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex610
  00084	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00089	75 06		 jne	 SHORT $LN14@s370_PutGe
  0008b	b0 06		 mov	 al, 6
  0008d	eb 04		 jmp	 SHORT $LN1@s370_PutGe
  0008f	eb 02		 jmp	 SHORT $LN15@s370_PutGe
$LN14@s370_PutGe:

; 458  :     else                                return 7;

  00091	b0 07		 mov	 al, 7
$LN15@s370_PutGe:
$LN13@s370_PutGe:
$LN11@s370_PutGe:
$LN9@s370_PutGe:
$LN7@s370_PutGe:
$LN5@s370_PutGe:
$LN3@s370_PutGe:
$LN1@s370_PutGe:

; 459  : }

  00093	c3		 ret	 0
s370_PutGetCBN10 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
pPutIndex$ = 8
s370_PutGetCBN09 PROC

; 438  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 439  :          if (&ARCH_DEP( PutIndex009 ) == pPutIndex) return 0;

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex009
  0000c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00011	75 06		 jne	 SHORT $LN2@s370_PutGe
  00013	32 c0		 xor	 al, al
  00015	eb 7c		 jmp	 SHORT $LN1@s370_PutGe
  00017	eb 7a		 jmp	 SHORT $LN3@s370_PutGe
$LN2@s370_PutGe:

; 440  :     else if (&ARCH_DEP( PutIndex109 ) == pPutIndex) return 1;

  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex109
  00020	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00025	75 06		 jne	 SHORT $LN4@s370_PutGe
  00027	b0 01		 mov	 al, 1
  00029	eb 68		 jmp	 SHORT $LN1@s370_PutGe
  0002b	eb 66		 jmp	 SHORT $LN5@s370_PutGe
$LN4@s370_PutGe:

; 441  :     else if (&ARCH_DEP( PutIndex209 ) == pPutIndex) return 2;

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex209
  00034	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00039	75 06		 jne	 SHORT $LN6@s370_PutGe
  0003b	b0 02		 mov	 al, 2
  0003d	eb 54		 jmp	 SHORT $LN1@s370_PutGe
  0003f	eb 52		 jmp	 SHORT $LN7@s370_PutGe
$LN6@s370_PutGe:

; 442  :     else if (&ARCH_DEP( PutIndex309 ) == pPutIndex) return 3;

  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex309
  00048	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  0004d	75 06		 jne	 SHORT $LN8@s370_PutGe
  0004f	b0 03		 mov	 al, 3
  00051	eb 40		 jmp	 SHORT $LN1@s370_PutGe
  00053	eb 3e		 jmp	 SHORT $LN9@s370_PutGe
$LN8@s370_PutGe:

; 443  :     else if (&ARCH_DEP( PutIndex409 ) == pPutIndex) return 4;

  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex409
  0005c	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00061	75 06		 jne	 SHORT $LN10@s370_PutGe
  00063	b0 04		 mov	 al, 4
  00065	eb 2c		 jmp	 SHORT $LN1@s370_PutGe
  00067	eb 2a		 jmp	 SHORT $LN11@s370_PutGe
$LN10@s370_PutGe:

; 444  :     else if (&ARCH_DEP( PutIndex509 ) == pPutIndex) return 5;

  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex509
  00070	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00075	75 06		 jne	 SHORT $LN12@s370_PutGe
  00077	b0 05		 mov	 al, 5
  00079	eb 18		 jmp	 SHORT $LN1@s370_PutGe
  0007b	eb 16		 jmp	 SHORT $LN13@s370_PutGe
$LN12@s370_PutGe:

; 445  :     else if (&ARCH_DEP( PutIndex609 ) == pPutIndex) return 6;

  0007d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:s370_PutIndex609
  00084	48 3b 44 24 08	 cmp	 rax, QWORD PTR pPutIndex$[rsp]
  00089	75 06		 jne	 SHORT $LN14@s370_PutGe
  0008b	b0 06		 mov	 al, 6
  0008d	eb 04		 jmp	 SHORT $LN1@s370_PutGe
  0008f	eb 02		 jmp	 SHORT $LN15@s370_PutGe
$LN14@s370_PutGe:

; 446  :     else                                return 7;

  00091	b0 07		 mov	 al, 7
$LN15@s370_PutGe:
$LN13@s370_PutGe:
$LN11@s370_PutGe:
$LN9@s370_PutGe:
$LN7@s370_PutGe:
$LN5@s370_PutGe:
$LN3@s370_PutGe:
$LN1@s370_PutGe:

; 447  : }

  00093	c3		 ret	 0
s370_PutGetCBN09 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv143 = 32
tv71 = 36
tv154 = 40
tv155 = 48
pPIBLK$ = 80
s370_PutIndex713 PROC

; 425  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 426  :     store_op_hw( (pPIBLK->index >> 4) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFE00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 f9 04	 sar	 ecx, 4
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv154[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv154[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 fe 00 00	 and	 eax, 65024		; 0000fe00H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 427  :     store_op_b( (pPIBLK->index << 4), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 83 c0 02	 add	 rax, 2
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008f	c1 e1 04	 shl	 ecx, 4
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00097	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009b	8b d0		 mov	 edx, eax
  0009d	e8 00 00 00 00	 call	 s370_cmpsc_vstoreb

; 428  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a2	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000aa	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ae	48 83 c0 02	 add	 rax, 2
  000b2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ba	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 429  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c9	48 83 e8 02	 sub	 rax, 2
  000cd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d5	48 89 01	 mov	 QWORD PTR [rcx], rax

; 430  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex413 );

  000d8	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000dd	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex413
  000e8	48 89 08	 mov	 QWORD PTR [rax], rcx

; 431  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000eb	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f3	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000f7	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000f9	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00101	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  00103	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN4@s370_PutIn:
  0010b	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv143[rsp]

; 432  : }

  00110	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00114	c3		 ret	 0
s370_PutIndex713 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv143 = 32
tv71 = 36
tv154 = 40
tv155 = 48
pPIBLK$ = 80
s370_PutIndex613 PROC

; 416  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 417  :     store_op_hw( (pPIBLK->index >> 3) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFC00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 f9 03	 sar	 ecx, 3
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv154[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv154[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 fc 00 00	 and	 eax, 64512		; 0000fc00H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 418  :     store_op_b( (pPIBLK->index << 5), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 83 c0 02	 add	 rax, 2
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008f	c1 e1 05	 shl	 ecx, 5
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00097	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009b	8b d0		 mov	 edx, eax
  0009d	e8 00 00 00 00	 call	 s370_cmpsc_vstoreb

; 419  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a2	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000aa	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ae	48 83 c0 02	 add	 rax, 2
  000b2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ba	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 420  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c9	48 83 e8 02	 sub	 rax, 2
  000cd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d5	48 89 01	 mov	 QWORD PTR [rcx], rax

; 421  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex313 );

  000d8	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000dd	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex313
  000e8	48 89 08	 mov	 QWORD PTR [rax], rcx

; 422  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000eb	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f3	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f7	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000f9	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00101	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  00103	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN4@s370_PutIn:
  0010b	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv143[rsp]

; 423  : }

  00110	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00114	c3		 ret	 0
s370_PutIndex613 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv143 = 32
tv71 = 36
tv154 = 40
tv155 = 48
pPIBLK$ = 80
s370_PutIndex513 PROC

; 407  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 408  :     store_op_hw( (pPIBLK->index >> 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF800), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 f9 02	 sar	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv154[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv154[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 409  :     store_op_b( (pPIBLK->index << 6), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 83 c0 02	 add	 rax, 2
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008f	c1 e1 06	 shl	 ecx, 6
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00097	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009b	8b d0		 mov	 edx, eax
  0009d	e8 00 00 00 00	 call	 s370_cmpsc_vstoreb

; 410  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a2	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000aa	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ae	48 83 c0 02	 add	 rax, 2
  000b2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ba	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 411  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c9	48 83 e8 02	 sub	 rax, 2
  000cd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d5	48 89 01	 mov	 QWORD PTR [rcx], rax

; 412  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex213 );

  000d8	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000dd	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex213
  000e8	48 89 08	 mov	 QWORD PTR [rax], rcx

; 413  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000eb	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f3	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f7	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000f9	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00101	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  00103	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN4@s370_PutIn:
  0010b	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv143[rsp]

; 414  : }

  00110	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00114	c3		 ret	 0
s370_PutIndex513 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv143 = 32
tv71 = 36
tv154 = 40
tv155 = 48
pPIBLK$ = 80
s370_PutIndex413 PROC

; 398  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 399  :     store_op_hw( (pPIBLK->index >> 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 f9		 sar	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv154[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv154[rsp]
  00040	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  0006a	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006d	0f b7 c8	 movzx	 ecx, ax
  00070	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 400  :     store_op_b( (pPIBLK->index << 7), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00081	48 83 c0 02	 add	 rax, 2
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008e	c1 e1 07	 shl	 ecx, 7
  00091	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00096	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009a	8b d0		 mov	 edx, eax
  0009c	e8 00 00 00 00	 call	 s370_cmpsc_vstoreb

; 401  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a1	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a9	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ad	48 83 c0 02	 add	 rax, 2
  000b1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b6	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000b9	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 402  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c8	48 83 e8 02	 sub	 rax, 2
  000cc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d1	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d4	48 89 01	 mov	 QWORD PTR [rcx], rax

; 403  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex113 );

  000d7	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000dc	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex113
  000e7	48 89 08	 mov	 QWORD PTR [rax], rcx

; 404  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000ea	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ef	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f2	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f6	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000f8	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00100	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  00102	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN4@s370_PutIn:
  0010a	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv143[rsp]

; 405  : }

  0010f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00113	c3		 ret	 0
s370_PutIndex413 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv130 = 32
tv70 = 36
tv139 = 40
tv140 = 48
pPIBLK$ = 80
s370_PutIndex313 PROC

; 390  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 391  :     store_op_hw( (pPIBLK->index     ) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xE000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv140[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	89 4c 24 24	 mov	 DWORD PTR tv70[rsp], ecx
  00023	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00028	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002b	48 89 54 24 28	 mov	 QWORD PTR tv139[rsp], rdx
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00035	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  00039	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv139[rsp]
  0003e	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00042	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  00047	0f b6 c0	 movzx	 eax, al
  0004a	c1 e0 08	 shl	 eax, 8
  0004d	25 00 e0 00 00	 and	 eax, 57344		; 0000e000H
  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR tv70[rsp]
  00056	0b c8		 or	 ecx, eax
  00058	8b c1		 mov	 eax, ecx
  0005a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005f	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00063	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv140[rsp]
  00068	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006b	0f b7 c8	 movzx	 ecx, ax
  0006e	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 392  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  00073	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00078	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007f	48 83 c0 02	 add	 rax, 2
  00083	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00088	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008b	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 393  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  0008f	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00094	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 83 e8 02	 sub	 rax, 2
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 394  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex013 );

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex013
  000b9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 395  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c8	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000ca	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  000d2	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN4@s370_PutIn:
  000dc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv130[rsp]

; 396  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
s370_PutIndex313 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s370_PutIndex213 PROC

; 382  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 383  :     store_op_hw( (pPIBLK->index << 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xC000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 e1		 shl	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00040	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 c0 00 00	 and	 eax, 49152		; 0000c000H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006a	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006d	0f b7 c8	 movzx	 ecx, ax
  00070	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 384  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00081	48 ff c0	 inc	 rax
  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00089	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008c	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 385  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00090	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009b	48 ff c8	 dec	 rax
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 386  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex713 );

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex713
  000b9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 387  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000c8	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000ca	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d2	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s370_PutIn:
  000dc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 388  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
s370_PutIndex213 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s370_PutIndex113 PROC

; 374  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 375  :     store_op_hw( (pPIBLK->index << 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0x8000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 02	 shl	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 376  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 377  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 378  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex613 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex613
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 379  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000c9	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s370_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 380  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s370_PutIndex113 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv89 = 32
pPIBLK$ = 64
s370_PutIndex013 PROC

; 366  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 367  :     store_op_hw( (pPIBLK->index << 3), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00016	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001a	c1 e1 03	 shl	 ecx, 3
  0001d	48 8b 54 24 40	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00022	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  00026	8b 50 20	 mov	 edx, DWORD PTR [rax+32]
  00029	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 368  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00033	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00036	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003a	48 ff c0	 inc	 rax
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00042	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00045	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 369  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00054	48 ff c8	 dec	 rax
  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0005f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 370  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex513 );

  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00067	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex513
  00072	48 89 08	 mov	 QWORD PTR [rax], rcx

; 371  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  00075	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  00081	73 0a		 jae	 SHORT $LN3@s370_PutIn
  00083	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  0008b	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  0008d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN4@s370_PutIn:
  00095	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv89[rsp]

; 372  : }

  0009a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009e	c3		 ret	 0
s370_PutIndex013 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv143 = 32
tv71 = 36
tv154 = 40
tv155 = 48
pPIBLK$ = 80
s370_PutIndex712 PROC

; 351  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 352  :     store_op_hw( (pPIBLK->index >> 3) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFE00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 f9 03	 sar	 ecx, 3
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv154[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv154[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 fe 00 00	 and	 eax, 65024		; 0000fe00H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 353  :     store_op_b( (pPIBLK->index << 5), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 83 c0 02	 add	 rax, 2
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008f	c1 e1 05	 shl	 ecx, 5
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00097	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009b	8b d0		 mov	 edx, eax
  0009d	e8 00 00 00 00	 call	 s370_cmpsc_vstoreb

; 354  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a2	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000aa	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ae	48 83 c0 02	 add	 rax, 2
  000b2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ba	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 355  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c9	48 83 e8 02	 sub	 rax, 2
  000cd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d5	48 89 01	 mov	 QWORD PTR [rcx], rax

; 356  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex312 );

  000d8	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000dd	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex312
  000e8	48 89 08	 mov	 QWORD PTR [rax], rcx

; 357  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000eb	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f3	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f7	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000f9	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00101	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  00103	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN4@s370_PutIn:
  0010b	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv143[rsp]

; 358  : }

  00110	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00114	c3		 ret	 0
s370_PutIndex712 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv143 = 32
tv71 = 36
tv154 = 40
tv155 = 48
pPIBLK$ = 80
s370_PutIndex612 PROC

; 342  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 343  :     store_op_hw( (pPIBLK->index >> 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFC00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 f9 02	 sar	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv154[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv154[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 fc 00 00	 and	 eax, 64512		; 0000fc00H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 344  :     store_op_b( (pPIBLK->index << 6), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 83 c0 02	 add	 rax, 2
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008f	c1 e1 06	 shl	 ecx, 6
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00097	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009b	8b d0		 mov	 edx, eax
  0009d	e8 00 00 00 00	 call	 s370_cmpsc_vstoreb

; 345  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a2	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000aa	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ae	48 83 c0 02	 add	 rax, 2
  000b2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ba	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 346  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c9	48 83 e8 02	 sub	 rax, 2
  000cd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d5	48 89 01	 mov	 QWORD PTR [rcx], rax

; 347  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex212 );

  000d8	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000dd	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex212
  000e8	48 89 08	 mov	 QWORD PTR [rax], rcx

; 348  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000eb	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f3	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f7	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000f9	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00101	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  00103	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN4@s370_PutIn:
  0010b	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv143[rsp]

; 349  : }

  00110	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00114	c3		 ret	 0
s370_PutIndex612 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv143 = 32
tv71 = 36
tv154 = 40
tv155 = 48
pPIBLK$ = 80
s370_PutIndex512 PROC

; 333  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 334  :     store_op_hw( (pPIBLK->index >> 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF800), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 f9		 sar	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv154[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv154[rsp]
  00040	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  0006a	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006d	0f b7 c8	 movzx	 ecx, ax
  00070	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 335  :     store_op_b( (pPIBLK->index << 7), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00081	48 83 c0 02	 add	 rax, 2
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008e	c1 e1 07	 shl	 ecx, 7
  00091	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00096	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009a	8b d0		 mov	 edx, eax
  0009c	e8 00 00 00 00	 call	 s370_cmpsc_vstoreb

; 336  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a1	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a9	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ad	48 83 c0 02	 add	 rax, 2
  000b1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b6	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000b9	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 337  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c8	48 83 e8 02	 sub	 rax, 2
  000cc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d1	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d4	48 89 01	 mov	 QWORD PTR [rcx], rax

; 338  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex112 );

  000d7	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000dc	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex112
  000e7	48 89 08	 mov	 QWORD PTR [rax], rcx

; 339  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000ea	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ef	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f2	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f6	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000f8	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00100	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  00102	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN4@s370_PutIn:
  0010a	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv143[rsp]

; 340  : }

  0010f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00113	c3		 ret	 0
s370_PutIndex512 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv130 = 32
tv70 = 36
tv139 = 40
tv140 = 48
pPIBLK$ = 80
s370_PutIndex412 PROC

; 325  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 326  :     store_op_hw( (pPIBLK->index     ) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv140[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	89 4c 24 24	 mov	 DWORD PTR tv70[rsp], ecx
  00023	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00028	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002b	48 89 54 24 28	 mov	 QWORD PTR tv139[rsp], rdx
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00035	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  00039	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv139[rsp]
  0003e	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00042	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  00047	0f b6 c0	 movzx	 eax, al
  0004a	c1 e0 08	 shl	 eax, 8
  0004d	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR tv70[rsp]
  00056	0b c8		 or	 ecx, eax
  00058	8b c1		 mov	 eax, ecx
  0005a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005f	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00063	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv140[rsp]
  00068	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006b	0f b7 c8	 movzx	 ecx, ax
  0006e	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 327  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  00073	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00078	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007f	48 83 c0 02	 add	 rax, 2
  00083	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00088	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008b	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 328  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  0008f	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00094	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 83 e8 02	 sub	 rax, 2
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 329  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex012 );

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex012
  000b9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 330  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c8	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000ca	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  000d2	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN4@s370_PutIn:
  000dc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv130[rsp]

; 331  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
s370_PutIndex412 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s370_PutIndex312 PROC

; 317  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 318  :     store_op_hw( (pPIBLK->index << 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xE000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 e1		 shl	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00040	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 e0 00 00	 and	 eax, 57344		; 0000e000H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006a	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006d	0f b7 c8	 movzx	 ecx, ax
  00070	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 319  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00081	48 ff c0	 inc	 rax
  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00089	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008c	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 320  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00090	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009b	48 ff c8	 dec	 rax
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 321  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex712 );

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex712
  000b9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 322  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000c8	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000ca	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d2	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s370_PutIn:
  000dc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 323  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
s370_PutIndex312 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s370_PutIndex212 PROC

; 309  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 310  :     store_op_hw( (pPIBLK->index << 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xC000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 02	 shl	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 c0 00 00	 and	 eax, 49152		; 0000c000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 311  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 312  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 313  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex612 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex612
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 314  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000c9	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s370_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 315  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s370_PutIndex212 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s370_PutIndex112 PROC

; 301  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 302  :     store_op_hw( (pPIBLK->index << 3) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0x8000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 03	 shl	 ecx, 3
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 303  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 304  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 305  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex512 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex512
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 306  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000c9	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s370_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 307  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s370_PutIndex112 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv89 = 32
pPIBLK$ = 64
s370_PutIndex012 PROC

; 293  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 294  :     store_op_hw( (pPIBLK->index << 4), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00016	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001a	c1 e1 04	 shl	 ecx, 4
  0001d	48 8b 54 24 40	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00022	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  00026	8b 50 20	 mov	 edx, DWORD PTR [rax+32]
  00029	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 295  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00033	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00036	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003a	48 ff c0	 inc	 rax
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00042	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00045	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 296  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00054	48 ff c8	 dec	 rax
  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0005f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 297  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex412 );

  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00067	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex412
  00072	48 89 08	 mov	 QWORD PTR [rax], rcx

; 298  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  00075	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  00081	73 0a		 jae	 SHORT $LN3@s370_PutIn
  00083	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  0008b	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  0008d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN4@s370_PutIn:
  00095	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv89[rsp]

; 299  : }

  0009a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009e	c3		 ret	 0
s370_PutIndex012 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv143 = 32
tv71 = 36
tv154 = 40
tv155 = 48
pPIBLK$ = 80
s370_PutIndex711 PROC

; 278  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 279  :     store_op_hw( (pPIBLK->index >> 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFE00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 f9 02	 sar	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv154[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv154[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 fe 00 00	 and	 eax, 65024		; 0000fe00H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 280  :     store_op_b( (pPIBLK->index << 6), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 83 c0 02	 add	 rax, 2
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008f	c1 e1 06	 shl	 ecx, 6
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00097	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009b	8b d0		 mov	 edx, eax
  0009d	e8 00 00 00 00	 call	 s370_cmpsc_vstoreb

; 281  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a2	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000aa	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ae	48 83 c0 02	 add	 rax, 2
  000b2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ba	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 282  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c9	48 83 e8 02	 sub	 rax, 2
  000cd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d5	48 89 01	 mov	 QWORD PTR [rcx], rax

; 283  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex211 );

  000d8	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000dd	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex211
  000e8	48 89 08	 mov	 QWORD PTR [rax], rcx

; 284  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000eb	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000f0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f3	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f7	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000f9	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00101	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  00103	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN4@s370_PutIn:
  0010b	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv143[rsp]

; 285  : }

  00110	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00114	c3		 ret	 0
s370_PutIndex711 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv143 = 32
tv71 = 36
tv154 = 40
tv155 = 48
pPIBLK$ = 80
s370_PutIndex611 PROC

; 269  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 270  :     store_op_hw( (pPIBLK->index >> 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFC00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 f9		 sar	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv154[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv154[rsp]
  00040	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 fc 00 00	 and	 eax, 64512		; 0000fc00H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  0006a	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006d	0f b7 c8	 movzx	 ecx, ax
  00070	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 271  :     store_op_b( (pPIBLK->index << 7), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00081	48 83 c0 02	 add	 rax, 2
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008e	c1 e1 07	 shl	 ecx, 7
  00091	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00096	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009a	8b d0		 mov	 edx, eax
  0009c	e8 00 00 00 00	 call	 s370_cmpsc_vstoreb

; 272  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a1	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a9	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ad	48 83 c0 02	 add	 rax, 2
  000b1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b6	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000b9	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 273  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c8	48 83 e8 02	 sub	 rax, 2
  000cc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d1	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d4	48 89 01	 mov	 QWORD PTR [rcx], rax

; 274  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex111 );

  000d7	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000dc	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex111
  000e7	48 89 08	 mov	 QWORD PTR [rax], rcx

; 275  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000ea	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ef	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f2	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f6	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000f8	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00100	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  00102	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN4@s370_PutIn:
  0010a	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv143[rsp]

; 276  : }

  0010f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00113	c3		 ret	 0
s370_PutIndex611 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv130 = 32
tv70 = 36
tv139 = 40
tv140 = 48
pPIBLK$ = 80
s370_PutIndex511 PROC

; 261  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 262  :     store_op_hw( (pPIBLK->index     ) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF800), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv140[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	89 4c 24 24	 mov	 DWORD PTR tv70[rsp], ecx
  00023	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00028	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002b	48 89 54 24 28	 mov	 QWORD PTR tv139[rsp], rdx
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00035	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  00039	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv139[rsp]
  0003e	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00042	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  00047	0f b6 c0	 movzx	 eax, al
  0004a	c1 e0 08	 shl	 eax, 8
  0004d	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR tv70[rsp]
  00056	0b c8		 or	 ecx, eax
  00058	8b c1		 mov	 eax, ecx
  0005a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005f	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00063	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv140[rsp]
  00068	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006b	0f b7 c8	 movzx	 ecx, ax
  0006e	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 263  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  00073	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00078	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007f	48 83 c0 02	 add	 rax, 2
  00083	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00088	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008b	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 264  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  0008f	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00094	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 83 e8 02	 sub	 rax, 2
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 265  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex011 );

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex011
  000b9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 266  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c8	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000ca	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  000d2	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN4@s370_PutIn:
  000dc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv130[rsp]

; 267  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
s370_PutIndex511 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s370_PutIndex411 PROC

; 253  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 254  :     store_op_hw( (pPIBLK->index << 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 e1		 shl	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00040	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006a	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006d	0f b7 c8	 movzx	 ecx, ax
  00070	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 255  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00081	48 ff c0	 inc	 rax
  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00089	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008c	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 256  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00090	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009b	48 ff c8	 dec	 rax
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 257  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex711 );

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex711
  000b9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 258  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000c8	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000ca	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d2	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s370_PutIn:
  000dc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 259  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
s370_PutIndex411 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s370_PutIndex311 PROC

; 245  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 246  :     store_op_hw( (pPIBLK->index << 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xE000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 02	 shl	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 e0 00 00	 and	 eax, 57344		; 0000e000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 247  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 248  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 249  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex611 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex611
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 250  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000c9	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s370_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 251  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s370_PutIndex311 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s370_PutIndex211 PROC

; 237  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 238  :     store_op_hw( (pPIBLK->index << 3) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xC000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 03	 shl	 ecx, 3
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 c0 00 00	 and	 eax, 49152		; 0000c000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 239  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 240  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 241  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex511 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex511
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 242  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s370_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 243  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s370_PutIndex211 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s370_PutIndex111 PROC

; 229  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 230  :     store_op_hw( (pPIBLK->index << 4) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0x8000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 04	 shl	 ecx, 4
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 231  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 232  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 233  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex411 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex411
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 234  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s370_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 235  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s370_PutIndex111 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv89 = 32
pPIBLK$ = 64
s370_PutIndex011 PROC

; 221  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 222  :     store_op_hw( (pPIBLK->index << 5), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00016	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001a	c1 e1 05	 shl	 ecx, 5
  0001d	48 8b 54 24 40	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00022	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  00026	8b 50 20	 mov	 edx, DWORD PTR [rax+32]
  00029	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 223  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00033	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00036	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003a	48 ff c0	 inc	 rax
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00042	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00045	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 224  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00054	48 ff c8	 dec	 rax
  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0005f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 225  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex311 );

  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00067	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex311
  00072	48 89 08	 mov	 QWORD PTR [rax], rcx

; 226  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  00075	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  00081	73 0a		 jae	 SHORT $LN3@s370_PutIn
  00083	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  0008b	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  0008d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN4@s370_PutIn:
  00095	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv89[rsp]

; 227  : }

  0009a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009e	c3		 ret	 0
s370_PutIndex011 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv143 = 32
tv71 = 36
tv154 = 40
tv155 = 48
pPIBLK$ = 80
s370_PutIndex710 PROC

; 206  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 207  :     store_op_hw( (pPIBLK->index >> 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFE00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 f9		 sar	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv154[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv154[rsp]
  00040	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 fe 00 00	 and	 eax, 65024		; 0000fe00H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  0006a	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006d	0f b7 c8	 movzx	 ecx, ax
  00070	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 208  :     store_op_b( (pPIBLK->index << 7), pPIBLK->pCMPSCBLK->pOp1 + 2, pPIBLK->pMEMBLK );

  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00081	48 83 c0 02	 add	 rax, 2
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0008e	c1 e1 07	 shl	 ecx, 7
  00091	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00096	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  0009a	8b d0		 mov	 edx, eax
  0009c	e8 00 00 00 00	 call	 s370_cmpsc_vstoreb

; 209  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  000a1	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000a6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a9	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ad	48 83 c0 02	 add	 rax, 2
  000b1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000b6	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000b9	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 210  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c8	48 83 e8 02	 sub	 rax, 2
  000cc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000d1	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d4	48 89 01	 mov	 QWORD PTR [rcx], rax

; 211  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex110 );

  000d7	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000dc	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex110
  000e7	48 89 08	 mov	 QWORD PTR [rax], rcx

; 212  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000ea	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ef	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f2	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000f6	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000f8	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00100	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  00102	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN4@s370_PutIn:
  0010a	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv143[rsp]

; 213  : }

  0010f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00113	c3		 ret	 0
s370_PutIndex710 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv130 = 32
tv70 = 36
tv139 = 40
tv140 = 48
pPIBLK$ = 80
s370_PutIndex610 PROC

; 198  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 199  :     store_op_hw( (pPIBLK->index     ) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFC00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv140[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	89 4c 24 24	 mov	 DWORD PTR tv70[rsp], ecx
  00023	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00028	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002b	48 89 54 24 28	 mov	 QWORD PTR tv139[rsp], rdx
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00035	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  00039	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv139[rsp]
  0003e	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00042	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  00047	0f b6 c0	 movzx	 eax, al
  0004a	c1 e0 08	 shl	 eax, 8
  0004d	25 00 fc 00 00	 and	 eax, 64512		; 0000fc00H
  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR tv70[rsp]
  00056	0b c8		 or	 ecx, eax
  00058	8b c1		 mov	 eax, ecx
  0005a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005f	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00063	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv140[rsp]
  00068	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006b	0f b7 c8	 movzx	 ecx, ax
  0006e	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 200  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  00073	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00078	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007f	48 83 c0 02	 add	 rax, 2
  00083	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00088	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008b	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 201  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  0008f	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00094	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 83 e8 02	 sub	 rax, 2
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 202  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex010 );

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex010
  000b9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 203  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c8	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000ca	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  000d2	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN4@s370_PutIn:
  000dc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv130[rsp]

; 204  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
s370_PutIndex610 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s370_PutIndex510 PROC

; 190  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 191  :     store_op_hw( (pPIBLK->index << 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF800), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 e1		 shl	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00040	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006a	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006d	0f b7 c8	 movzx	 ecx, ax
  00070	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 192  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00081	48 ff c0	 inc	 rax
  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00089	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008c	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 193  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00090	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009b	48 ff c8	 dec	 rax
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 194  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex710 );

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex710
  000b9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 195  :     return (pPIBLK->pCMPSCBLK->nLen1 < 3);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 83 38 03	 cmp	 QWORD PTR [rax], 3
  000c8	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000ca	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d2	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s370_PutIn:
  000dc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 196  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
s370_PutIndex510 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s370_PutIndex410 PROC

; 182  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 183  :     store_op_hw( (pPIBLK->index << 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 02	 shl	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 184  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 185  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 186  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex610 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex610
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 187  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s370_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 188  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s370_PutIndex410 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s370_PutIndex310 PROC

; 174  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 175  :     store_op_hw( (pPIBLK->index << 3) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xE000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 03	 shl	 ecx, 3
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 e0 00 00	 and	 eax, 57344		; 0000e000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 176  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 177  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 178  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex510 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex510
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 179  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s370_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 180  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s370_PutIndex310 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s370_PutIndex210 PROC

; 166  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 167  :     store_op_hw( (pPIBLK->index << 4) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xC000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 04	 shl	 ecx, 4
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 c0 00 00	 and	 eax, 49152		; 0000c000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 168  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 169  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 170  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex410 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex410
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 171  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s370_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 172  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s370_PutIndex210 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s370_PutIndex110 PROC

; 158  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 159  :     store_op_hw( (pPIBLK->index << 5) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0x8000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 05	 shl	 ecx, 5
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 160  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 161  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 162  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex310 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex310
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 163  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s370_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 164  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s370_PutIndex110 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv89 = 32
pPIBLK$ = 64
s370_PutIndex010 PROC

; 150  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 151  :     store_op_hw( (pPIBLK->index << 6), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00016	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001a	c1 e1 06	 shl	 ecx, 6
  0001d	48 8b 54 24 40	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00022	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  00026	8b 50 20	 mov	 edx, DWORD PTR [rax+32]
  00029	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 152  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00033	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00036	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003a	48 ff c0	 inc	 rax
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00042	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00045	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 153  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00054	48 ff c8	 dec	 rax
  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0005f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 154  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex210 );

  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00067	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex210
  00072	48 89 08	 mov	 QWORD PTR [rax], rcx

; 155  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  00075	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  00081	73 0a		 jae	 SHORT $LN3@s370_PutIn
  00083	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  0008b	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  0008d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN4@s370_PutIn:
  00095	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv89[rsp]

; 156  : }

  0009a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009e	c3		 ret	 0
s370_PutIndex010 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv130 = 32
tv70 = 36
tv139 = 40
tv140 = 48
pPIBLK$ = 80
s370_PutIndex709 PROC

; 136  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 137  :     store_op_hw( (pPIBLK->index     ) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFE00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv140[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	89 4c 24 24	 mov	 DWORD PTR tv70[rsp], ecx
  00023	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00028	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002b	48 89 54 24 28	 mov	 QWORD PTR tv139[rsp], rdx
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00035	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  00039	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv139[rsp]
  0003e	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00042	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  00047	0f b6 c0	 movzx	 eax, al
  0004a	c1 e0 08	 shl	 eax, 8
  0004d	25 00 fe 00 00	 and	 eax, 65024		; 0000fe00H
  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR tv70[rsp]
  00056	0b c8		 or	 ecx, eax
  00058	8b c1		 mov	 eax, ecx
  0005a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005f	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00063	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv140[rsp]
  00068	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006b	0f b7 c8	 movzx	 ecx, ax
  0006e	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 138  :     pPIBLK->pCMPSCBLK->pOp1   += 2;

  00073	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00078	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007f	48 83 c0 02	 add	 rax, 2
  00083	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00088	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008b	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 139  :     pPIBLK->pCMPSCBLK->nLen1  -= 2;

  0008f	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00094	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00097	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009a	48 83 e8 02	 sub	 rax, 2
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 140  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex009 );

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex009
  000b9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 141  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c8	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000ca	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  000d2	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN4@s370_PutIn:
  000dc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv130[rsp]

; 142  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
s370_PutIndex709 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s370_PutIndex609 PROC

; 128  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 129  :     store_op_hw( (pPIBLK->index << 1) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xFC00), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	d1 e1		 shl	 ecx, 1
  00021	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00025	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002a	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002d	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00032	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00037	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00040	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00044	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  00049	0f b6 c0	 movzx	 eax, al
  0004c	c1 e0 08	 shl	 eax, 8
  0004f	25 00 fc 00 00	 and	 eax, 64512		; 0000fc00H
  00054	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00058	0b c8		 or	 ecx, eax
  0005a	8b c1		 mov	 eax, ecx
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00061	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006a	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006d	0f b7 c8	 movzx	 ecx, ax
  00070	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 130  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00081	48 ff c0	 inc	 rax
  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00089	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008c	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 131  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00090	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009b	48 ff c8	 dec	 rax
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a6	48 89 01	 mov	 QWORD PTR [rcx], rax

; 132  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex709 );

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000ae	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex709
  000b9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 133  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bc	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c8	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000ca	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d2	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s370_PutIn:
  000dc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 134  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
s370_PutIndex609 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s370_PutIndex509 PROC

; 120  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 121  :     store_op_hw( (pPIBLK->index << 2) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF800), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 02	 shl	 ecx, 2
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 f8 00 00	 and	 eax, 63488		; 0000f800H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 122  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 123  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 124  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex609 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex609
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 125  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s370_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 126  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s370_PutIndex509 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s370_PutIndex409 PROC

; 112  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 113  :     store_op_hw( (pPIBLK->index << 3) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xF000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 03	 shl	 ecx, 3
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 114  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 115  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 116  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex509 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex509
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 117  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s370_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 118  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s370_PutIndex409 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s370_PutIndex309 PROC

; 104  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 105  :     store_op_hw( (pPIBLK->index << 4) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xE000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 04	 shl	 ecx, 4
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 e0 00 00	 and	 eax, 57344		; 0000e000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 106  :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 107  :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 108  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex409 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex409
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 109  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s370_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 110  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s370_PutIndex309 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s370_PutIndex209 PROC

; 96   : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 97   :     store_op_hw( (pPIBLK->index << 5) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0xC000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 05	 shl	 ecx, 5
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 c0 00 00	 and	 eax, 49152		; 0000c000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 98   :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 99   :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 100  :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex309 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex309
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 101  :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s370_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 102  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s370_PutIndex209 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv131 = 32
tv71 = 36
tv140 = 40
tv141 = 48
pPIBLK$ = 80
s370_PutIndex109 PROC

; 88   : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 89   :     store_op_hw( (pPIBLK->index << 6) | (((U16)fetch_op_b( pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK ) << 8) & 0x8000), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0001b	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001f	c1 e1 06	 shl	 ecx, 6
  00022	89 4c 24 24	 mov	 DWORD PTR tv71[rsp], ecx
  00026	48 8b 54 24 50	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  0002b	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  0002e	48 89 54 24 28	 mov	 QWORD PTR tv140[rsp], rdx
  00033	4c 8b 44 24 50	 mov	 r8, QWORD PTR pPIBLK$[rsp]
  00038	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0003c	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00041	41 8b 48 20	 mov	 ecx, DWORD PTR [r8+32]
  00045	e8 00 00 00 00	 call	 s370_cmpsc_vfetchb
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	c1 e0 08	 shl	 eax, 8
  00050	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  00055	8b 4c 24 24	 mov	 ecx, DWORD PTR tv71[rsp]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00062	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  0006b	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  0006e	0f b7 c8	 movzx	 ecx, ax
  00071	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 90   :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00082	48 ff c0	 inc	 rax
  00085	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0008a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 91   :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 ff c8	 dec	 rax
  0009f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  000a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a7	48 89 01	 mov	 QWORD PTR [rcx], rax

; 92   :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex209 );

  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000af	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex209
  000ba	48 89 08	 mov	 QWORD PTR [rax], rcx

; 93   :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  000bd	48 8b 44 24 50	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  000c2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c5	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  000c9	73 0a		 jae	 SHORT $LN3@s370_PutIn
  000cb	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  000d3	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  000d5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN4@s370_PutIn:
  000dd	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv131[rsp]

; 94   : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
s370_PutIndex109 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscput.c
_TEXT	SEGMENT
tv89 = 32
pPIBLK$ = 64
s370_PutIndex009 PROC

; 80   : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 81   :     store_op_hw( (pPIBLK->index << 7), pPIBLK->pCMPSCBLK->pOp1, pPIBLK->pMEMBLK );

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00016	0f b7 49 18	 movzx	 ecx, WORD PTR [rcx+24]
  0001a	c1 e1 07	 shl	 ecx, 7
  0001d	48 8b 54 24 40	 mov	 rdx, QWORD PTR pPIBLK$[rsp]
  00022	4c 8b 42 08	 mov	 r8, QWORD PTR [rdx+8]
  00026	8b 50 20	 mov	 edx, DWORD PTR [rax+32]
  00029	e8 00 00 00 00	 call	 s370_cmpsc_vstore2

; 82   :     pPIBLK->pCMPSCBLK->pOp1   += 1;

  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00033	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00036	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003a	48 ff c0	 inc	 rax
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  00042	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00045	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 83   :     pPIBLK->pCMPSCBLK->nLen1  -= 1;

  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00054	48 ff c8	 dec	 rax
  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pPIBLK$[rsp]
  0005c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0005f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 84   :     *pPIBLK->ppPutIndex = ARCH_DEP( PutIndex109 );

  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  00067	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_PutIndex109
  00072	48 89 08	 mov	 QWORD PTR [rax], rcx

; 85   :     return (pPIBLK->pCMPSCBLK->nLen1 < 2);

  00075	48 8b 44 24 40	 mov	 rax, QWORD PTR pPIBLK$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 83 38 02	 cmp	 QWORD PTR [rax], 2
  00081	73 0a		 jae	 SHORT $LN3@s370_PutIn
  00083	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  0008b	eb 08		 jmp	 SHORT $LN4@s370_PutIn
$LN3@s370_PutIn:
  0008d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN4@s370_PutIn:
  00095	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv89[rsp]

; 86   : }

  0009a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009e	c3		 ret	 0
s370_PutIndex009 ENDP
_TEXT	ENDS
END
