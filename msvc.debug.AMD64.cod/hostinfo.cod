; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	hostinfo:BYTE:0270H
_DATA	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	init_hostinfo
PUBLIC	format_hostinfo
EXTRN	_byteswap_ulong:PROC
EXTRN	_byteswap_uint64:PROC
EXTRN	strlcpy:PROC
EXTRN	strlcat:PROC
EXTRN	w32_init_hostinfo:PROC
EXTRN	w32_snprintf:PROC
EXTRN	w32_hpagesize:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
$SG159094 DB	01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$init_hostinfo DD imagerel $LN13
	DD	imagerel $LN13+513
	DD	imagerel $unwind$init_hostinfo
$pdata$format_hostinfo DD imagerel $LN11
	DD	imagerel $LN11+510
	DD	imagerel $unwind$format_hostinfo
pdata	ENDS
_DATA	SEGMENT
$SG159068 DB	'END ', 00H
	ORG $+3
$SG159069 DB	'HOST_INFO', 00H
	ORG $+2
$SG159090 DB	' MP=%d', 00H
	ORG $+1
$SG159093 DB	' UP', 00H
$SG159070 DB	'HOST_INFO', 00H
	ORG $+6
$SG159071 DB	'SDL 4.00', 00H
	ORG $+7
$SG159087 DB	' LP=%d, Cores=%d, CPUs=%d', 00H
	ORG $+6
$SG159095 DB	'Running on: %s (%s-%s %s)%s', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:format_hostinfo
	DD	020H
	DD	01e6H
voltbl	ENDS
xdata	SEGMENT
$unwind$init_hostinfo DD 020a01H
	DD	07006320aH
$unwind$format_hostinfo DD 022819H
	DD	0130116H
	DD	imagerel __GSHandlerCheck
	DD	080H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hostinfo.c
_TEXT	SEGMENT
num_procs$1 = 64
__$ArrayPad$ = 128
pHostInfo$ = 160
pszHostInfoStrBuff$ = 168
nHostInfoStrBuffSiz$ = 176
format_hostinfo PROC

; 244  : {

$LN11:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 245  :     if ( pszHostInfoStrBuff && nHostInfoStrBuffSiz )

  00028	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR pszHostInfoStrBuff$[rsp], 0
  00031	0f 84 a7 01 00
	00		 je	 $LN2@format_hos
  00037	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR nHostInfoStrBuffSiz$[rsp], 0
  00040	0f 84 98 01 00
	00		 je	 $LN2@format_hos

; 246  :     {
; 247  :         char num_procs[64];
; 248  :         if ( !pHostInfo ) pHostInfo = &hostinfo;

  00046	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR pHostInfo$[rsp], 0
  0004f	75 0f		 jne	 SHORT $LN3@format_hos
  00051	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:hostinfo
  00058	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR pHostInfo$[rsp], rax
$LN3@format_hos:

; 249  : 
; 250  :         if ( pHostInfo->num_packages     != 0 &&
; 251  :              pHostInfo->num_physical_cpu != 0 &&

  00060	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00068	83 b8 c4 01 00
	00 00		 cmp	 DWORD PTR [rax+452], 0
  0006f	74 6d		 je	 SHORT $LN4@format_hos
  00071	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00079	83 b8 bc 01 00
	00 00		 cmp	 DWORD PTR [rax+444], 0
  00080	74 5c		 je	 SHORT $LN4@format_hos
  00082	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  0008a	83 b8 c0 01 00
	00 00		 cmp	 DWORD PTR [rax+448], 0
  00091	74 4b		 je	 SHORT $LN4@format_hos

; 252  :              pHostInfo->num_logical_cpu  != 0 )
; 253  :         {
; 254  :             MSGBUF( num_procs, " LP=%d, Cores=%d, CPUs=%d", pHostInfo->num_logical_cpu,

  00093	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  0009b	8b 80 c4 01 00
	00		 mov	 eax, DWORD PTR [rax+452]
  000a1	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000a5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  000ad	8b 80 bc 01 00
	00		 mov	 eax, DWORD PTR [rax+444]
  000b3	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000b7	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  000bf	44 8b 88 c0 01
	00 00		 mov	 r9d, DWORD PTR [rax+448]
  000c6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159087
  000cd	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000d2	48 8d 4c 24 40	 lea	 rcx, QWORD PTR num_procs$1[rsp]
  000d7	e8 00 00 00 00	 call	 w32_snprintf

; 255  :                                 pHostInfo->num_physical_cpu, pHostInfo->num_packages );
; 256  :         }

  000dc	eb 79		 jmp	 SHORT $LN5@format_hos
$LN4@format_hos:

; 257  :         else
; 258  :         {
; 259  :             if ( pHostInfo->num_procs > 1 )

  000de	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  000e6	83 b8 b8 01 00
	00 01		 cmp	 DWORD PTR [rax+440], 1
  000ed	7e 27		 jle	 SHORT $LN6@format_hos

; 260  :                 MSGBUF( num_procs, " MP=%d", pHostInfo->num_procs );

  000ef	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  000f7	44 8b 88 b8 01
	00 00		 mov	 r9d, DWORD PTR [rax+440]
  000fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159090
  00105	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0010a	48 8d 4c 24 40	 lea	 rcx, QWORD PTR num_procs$1[rsp]
  0010f	e8 00 00 00 00	 call	 w32_snprintf
  00114	eb 41		 jmp	 SHORT $LN7@format_hos
$LN6@format_hos:

; 261  :             else if ( pHostInfo->num_procs == 1 )

  00116	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  0011e	83 b8 b8 01 00
	00 01		 cmp	 DWORD PTR [rax+440], 1
  00125	75 19		 jne	 SHORT $LN8@format_hos

; 262  :                 STRLCPY( num_procs, " UP" );

  00127	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0012d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159093
  00134	48 8d 4c 24 40	 lea	 rcx, QWORD PTR num_procs$1[rsp]
  00139	e8 00 00 00 00	 call	 strlcpy
  0013e	eb 17		 jmp	 SHORT $LN9@format_hos
$LN8@format_hos:

; 263  :             else
; 264  :                 STRLCPY( num_procs, "" );

  00140	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  00146	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159094
  0014d	48 8d 4c 24 40	 lea	 rcx, QWORD PTR num_procs$1[rsp]
  00152	e8 00 00 00 00	 call	 strlcpy
$LN9@format_hos:
$LN7@format_hos:
$LN5@format_hos:

; 265  :         }
; 266  : 
; 267  : #if defined( OPTION_LONG_HOSTINFO )
; 268  :         snprintf( pszHostInfoStrBuff, nHostInfoStrBuffSiz,
; 269  :             "Running on %s %s-%s. %s, %s%s",
; 270  :             pHostInfo->nodename,
; 271  :             pHostInfo->sysname,
; 272  :             pHostInfo->release,
; 273  :             pHostInfo->version,     // (show host version too)
; 274  :             pHostInfo->machine,
; 275  :             num_procs
; 276  :         );
; 277  : #else // (short: no host version info)
; 278  :         snprintf( pszHostInfoStrBuff, nHostInfoStrBuffSiz,

  00157	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  0015f	48 05 30 01 00
	00		 add	 rax, 304		; 00000130H
  00165	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pHostInfo$[rsp]
  0016d	48 81 c1 b0 00
	00 00		 add	 rcx, 176		; 000000b0H
  00174	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR pHostInfo$[rsp]
  0017c	48 83 c2 30	 add	 rdx, 48			; 00000030H
  00180	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pHostInfo$[rsp]
  00188	49 83 c0 70	 add	 r8, 112			; 00000070H
  0018c	4c 8d 4c 24 40	 lea	 r9, QWORD PTR num_procs$1[rsp]
  00191	4c 89 4c 24 38	 mov	 QWORD PTR [rsp+56], r9
  00196	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0019b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001a0	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  001a5	4d 8b c8	 mov	 r9, r8
  001a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159095
  001af	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR nHostInfoStrBuffSiz$[rsp]
  001b7	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR pszHostInfoStrBuff$[rsp]
  001bf	e8 00 00 00 00	 call	 w32_snprintf

; 279  :             "Running on: %s (%s-%s %s)%s",
; 280  :             pHostInfo->nodename,
; 281  :             pHostInfo->sysname,
; 282  :             pHostInfo->release,
; 283  :             pHostInfo->machine,
; 284  :             num_procs
; 285  :         );
; 286  : #endif
; 287  :         *(pszHostInfoStrBuff + nHostInfoStrBuffSiz - 1) = 0;

  001c4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR nHostInfoStrBuffSiz$[rsp]
  001cc	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR pszHostInfoStrBuff$[rsp]
  001d4	48 03 c8	 add	 rcx, rax
  001d7	48 8b c1	 mov	 rax, rcx
  001da	c6 40 ff 00	 mov	 BYTE PTR [rax-1], 0
$LN2@format_hos:

; 288  :     }
; 289  :     return pszHostInfoStrBuff;

  001de	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR pszHostInfoStrBuff$[rsp]

; 290  : }

  001e6	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001ee	48 33 cc	 xor	 rcx, rsp
  001f1	e8 00 00 00 00	 call	 __security_check_cookie
  001f6	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  001fd	c3		 ret	 0
format_hostinfo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hostinfo.c
_TEXT	SEGMENT
pHostInfo$ = 48
init_hostinfo PROC

; 32   : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H

; 33   : #if defined( HAVE_SYS_UTSNAME_H )
; 34   :     struct utsname uname_info;
; 35   : #endif
; 36   : 
; 37   :     if ( !pHostInfo ) pHostInfo = &hostinfo;

  0000a	48 83 7c 24 30
	00		 cmp	 QWORD PTR pHostInfo$[rsp], 0
  00010	75 0c		 jne	 SHORT $LN8@init_hosti
  00012	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:hostinfo
  00019	48 89 44 24 30	 mov	 QWORD PTR pHostInfo$[rsp], rax
$LN8@init_hosti:
$LN4@init_hosti:
$LN7@init_hosti:

; 38   : 
; 39   :     INIT_BLOCK_HEADER_TRAILER( pHostInfo, HOST_INFO );

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00023	48 05 60 02 00
	00		 add	 rax, 608		; 00000260H
  00029	48 8b f8	 mov	 rdi, rax
  0002c	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00031	b9 10 00 00 00	 mov	 ecx, 16
  00036	f3 aa		 rep stosb
  00038	48 8b 44 24 30	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  0003d	48 8b 7c 24 30	 mov	 rdi, QWORD PTR pHostInfo$[rsp]
  00042	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00047	b9 10 00 00 00	 mov	 ecx, 16
  0004c	f3 aa		 rep stosb
  0004e	48 8b 44 24 30	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00053	48 05 60 02 00
	00		 add	 rax, 608		; 00000260H
  00059	41 b8 10 00 00
	00		 mov	 r8d, 16
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159068
  00066	48 8b c8	 mov	 rcx, rax
  00069	e8 00 00 00 00	 call	 strlcpy
  0006e	48 8b 44 24 30	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00073	48 05 60 02 00
	00		 add	 rax, 608		; 00000260H
  00079	41 b8 10 00 00
	00		 mov	 r8d, 16
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159069
  00086	48 8b c8	 mov	 rcx, rax
  00089	e8 00 00 00 00	 call	 strlcat
  0008e	48 8b 44 24 30	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00093	41 b8 10 00 00
	00		 mov	 r8d, 16
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159070
  000a0	48 8b c8	 mov	 rcx, rax
  000a3	e8 00 00 00 00	 call	 strlcpy
  000a8	33 c0		 xor	 eax, eax
  000aa	85 c0		 test	 eax, eax
  000ac	0f 85 6c ff ff
	ff		 jne	 $LN7@init_hosti
  000b2	48 8b 44 24 30	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  000b7	48 83 c0 10	 add	 rax, 16
  000bb	48 8b f8	 mov	 rdi, rax
  000be	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  000c3	b9 10 00 00 00	 mov	 ecx, 16
  000c8	f3 aa		 rep stosb
  000ca	48 8b 44 24 30	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  000cf	48 83 c0 10	 add	 rax, 16
  000d3	41 b8 10 00 00
	00		 mov	 r8d, 16
  000d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159071
  000e0	48 8b c8	 mov	 rcx, rax
  000e3	e8 00 00 00 00	 call	 strlcpy
  000e8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pHostInfo$[rsp]
  000ed	e8 00 00 00 00	 call	 _byteswap_uint64
  000f2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pHostInfo$[rsp]
  000f7	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
  000fb	b9 70 02 00 00	 mov	 ecx, 624		; 00000270H
  00100	e8 00 00 00 00	 call	 _byteswap_ulong
  00105	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pHostInfo$[rsp]
  0010a	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  0010d	33 c0		 xor	 eax, eax
  0010f	85 c0		 test	 eax, eax
  00111	0f 85 07 ff ff
	ff		 jne	 $LN4@init_hosti

; 40   : 
; 41   :     pHostInfo->valid_cache_nums = TRUE;     /* assume the cache size numbers are good */

  00117	48 8b 44 24 30	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  0011c	c7 80 d8 01 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+472], 1

; 42   : 
; 43   : #if defined(_MSVC_)
; 44   :     w32_init_hostinfo( pHostInfo );

  00126	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pHostInfo$[rsp]
  0012b	e8 00 00 00 00	 call	 w32_init_hostinfo

; 45   : #else
; 46   :    #if defined( HAVE_SYS_UTSNAME_H )
; 47   :     uname(        &uname_info );
; 48   :     STRLCPY( pHostInfo->sysname,  uname_info.sysname  );
; 49   :     STRLCPY( pHostInfo->nodename, uname_info.nodename );
; 50   :     STRLCPY( pHostInfo->release,  uname_info.release  );
; 51   :     STRLCPY( pHostInfo->version,  uname_info.version  );
; 52   :     STRLCPY( pHostInfo->machine,  uname_info.machine  );
; 53   :    #else
; 54   :     STRLCPY( pHostInfo->sysname,  "(unknown)" );
; 55   :     STRLCPY( pHostInfo->nodename, "(unknown)" );
; 56   :     STRLCPY( pHostInfo->release,  "(unknown)" );
; 57   :     STRLCPY( pHostInfo->version,  "(unknown)" );
; 58   :     STRLCPY( pHostInfo->machine,  "(unknown)" );
; 59   :    #endif
; 60   :    #if defined(HAVE_SYSCONF)
; 61   :       #if defined(HAVE_DECL__SC_NPROCESSORS_CONF) && \
; 62   :                   HAVE_DECL__SC_NPROCESSORS_CONF
; 63   :         pHostInfo->num_procs = sysconf(_SC_NPROCESSORS_CONF);
; 64   :       #endif
; 65   :       #if defined(HAVE_DECL__SC_PHYS_PAGES) && \
; 66   :                   HAVE_DECL__SC_PHYS_PAGES
; 67   :         pHostInfo->ullTotalPhys = (RADR)((RADR)sysconf(_SC_PAGESIZE) * (RADR)sysconf(_SC_PHYS_PAGES));
; 68   :       #endif
; 69   :    #endif
; 70   : #endif
; 71   : 
; 72   : #if defined( __APPLE__ ) || defined( FREEBSD_OR_NETBSD )
; 73   :     /* The mibs #ifdef-ed out below are not available on FreeBSD 9.1 */
; 74   :     {
; 75   :         size_t  length;
; 76   :         int     mib[2];
; 77   :         int     iRV;
; 78   :         uint64_t ui64RV;
; 79   : #if defined(VM_SWAPUSAGE)
; 80   :         struct  xsw_usage   xsu;
; 81   : #endif
; 82   :         char    machine[64];
; 83   : 
; 84   :         memset(machine,0,sizeof(machine));
; 85   : 
; 86   :         mib[0] = CTL_HW;
; 87   : 
; 88   :         length = sizeof(machine);
; 89   :         if ( sysctl( mib, 2, &machine, &length, NULL, 0 ) != -1 )
; 90   :         {
; 91   :             machine[length] = 0;
; 92   :             STRLCPY( pHostInfo->machine, machine );
; 93   :         }
; 94   : 
; 95   :         length = sizeof(iRV);
; 96   :         if ( sysctlbyname("kern.maxfilesperproc", &iRV, &length, NULL, 0 ) != -1 )
; 97   :             pHostInfo->maxfilesopen = iRV;
; 98   : 
; 99   :         length = sizeof(iRV);
; 100  :         if ( sysctlbyname("hw.packages", &iRV, &length, NULL, 0 ) != -1 )
; 101  :             pHostInfo->num_packages = iRV;
; 102  : 
; 103  :         length = sizeof(iRV);
; 104  :         if ( sysctlbyname("hw.physicalcpu", &iRV, &length, NULL, 0 ) != -1 )
; 105  :             pHostInfo->num_physical_cpu = iRV;
; 106  : 
; 107  :         length = sizeof(iRV);
; 108  :         if ( sysctlbyname("hw.logicalcpu", &iRV, &length, NULL, 0 ) != -1 )
; 109  :             pHostInfo->num_logical_cpu = iRV;
; 110  : 
; 111  :         length = sizeof(iRV);
; 112  :         if ( sysctlbyname("hw.vectorunit", &iRV, &length, NULL, 0 ) != -1 )
; 113  :             pHostInfo->vector_unit = iRV;
; 114  : 
; 115  :         length = sizeof(iRV);
; 116  :         if ( sysctlbyname("hw.optional.floatingpoint", &iRV, &length, NULL, 0 ) != -1 )
; 117  :             pHostInfo->fp_unit = iRV;
; 118  : 
; 119  :         length = sizeof(ui64RV);
; 120  :         if ( sysctlbyname("hw.busfrequency", &ui64RV, &length, NULL, 0 ) != -1 )
; 121  :             pHostInfo->bus_speed = ui64RV;
; 122  : 
; 123  :         length = sizeof(ui64RV);
; 124  :         if ( sysctlbyname("hw.cpufrequency", &ui64RV, &length, NULL, 0 ) != -1 )
; 125  :             pHostInfo->cpu_speed = ui64RV;
; 126  : 
; 127  :         length = (size_t)sizeof(iRV);
; 128  :         iRV = 0;
; 129  :         if ( sysctlbyname("hw.optional.x86_64", &iRV, &length, NULL, 0 ) != -1 )
; 130  :         {
; 131  :             char mach[64];
; 132  : 
; 133  :             MSGBUF( mach, "%s %s", iRV != 0 ? "64-bit" : "32-bit", pHostInfo->machine );
; 134  :             STRLCPY( pHostInfo->machine, mach );
; 135  :             pHostInfo->cpu_64bits = 1;
; 136  :         }
; 137  : 
; 138  :         iRV = 0;
; 139  :         if ( sysctlbyname("hw.optional.aes", &iRV, &length, NULL, 0 ) != -1 )
; 140  :         {
; 141  :             char mach[64];
; 142  : 
; 143  :             MSGBUF( mach, "%s %s", iRV != 0 ? "64-bit" : "32-bit", pHostInfo->machine );
; 144  :             STRLCPY( pHostInfo->machine, mach );
; 145  :             pHostInfo->cpu_aes_extns = 1;
; 146  :         }
; 147  : 
; 148  : #if defined(HW_MEMSIZE)
; 149  :         length = sizeof(ui64RV);
; 150  :         mib[1] = HW_MEMSIZE;
; 151  :         if ( sysctl( mib, 2, &ui64RV, &length, NULL, 0 ) != -1 )
; 152  :             pHostInfo->TotalPhys = ui64RV;
; 153  : #endif
; 154  : 
; 155  :         length = sizeof(iRV);
; 156  :         mib[1] = HW_USERMEM;
; 157  :         if ( sysctl( mib, 2, &iRV, &length, NULL, 0 ) != -1 )
; 158  :             pHostInfo->AvailPhys = iRV;
; 159  : 
; 160  :         length = sizeof(iRV);
; 161  :         mib[1] = HW_PAGESIZE;
; 162  :         if ( sysctl( mib, 2, &iRV, &length, NULL, 0 ) != -1 )
; 163  :             pHostInfo->hostpagesz = iRV;
; 164  : 
; 165  : #if defined(HW_CACHELINE)
; 166  :         length = sizeof(iRV);
; 167  :         mib[1] = HW_CACHELINE;
; 168  :         if ( sysctl( mib, 2, &iRV, &length, NULL, 0 ) != -1 )
; 169  :             pHostInfo->cachelinesz = iRV;
; 170  : #endif
; 171  : 
; 172  : #if defined(HW_L1ICACHESIZE)
; 173  :         length = sizeof(iRV);
; 174  :         mib[1] = HW_L1ICACHESIZE;
; 175  :         if ( sysctl( mib, 2, &iRV, &length, NULL, 0 ) != -1 )
; 176  :             pHostInfo->L1Icachesz = iRV;
; 177  : #endif
; 178  : 
; 179  : #if defined(HW_L1DCACHESIZE)
; 180  :         length = sizeof(iRV);
; 181  :         mib[1] = HW_L1DCACHESIZE;
; 182  :         if ( sysctl( mib, 2, &iRV, &length, NULL, 0 ) != -1 )
; 183  :             pHostInfo->L1Dcachesz = iRV;
; 184  : #endif
; 185  : 
; 186  : #if defined(HW_L2CACHESIZE)
; 187  :         length = sizeof(iRV);
; 188  :         mib[1] = HW_L2CACHESIZE;
; 189  :         if ( sysctl( mib, 2, &iRV, &length, NULL, 0 ) != -1 )
; 190  :             pHostInfo->L2cachesz = iRV;
; 191  : #endif
; 192  : 
; 193  : #if defined(HW_L3CACHESIZE)
; 194  :         length = sizeof(iRV);
; 195  :         mib[1] = HW_L3CACHESIZE;
; 196  :         if ( sysctl( mib, 2, &iRV, &length, NULL, 0 ) != -1 )
; 197  :             pHostInfo->L3cachesz = iRV;
; 198  : #endif
; 199  : 
; 200  :         mib[0] = CTL_VM;
; 201  : 
; 202  : #if defined(VM_SWAPUSAGE)
; 203  :         length = sizeof(xsu);
; 204  :         mib[1] = VM_SWAPUSAGE;
; 205  :         if ( sysctl( mib, 2, &xsu, &length, NULL, 0 ) != -1 )
; 206  :         {
; 207  :             pHostInfo->TotalPageFile = xsu.xsu_total;
; 208  :             pHostInfo->AvailPageFile = xsu.xsu_total - xsu.xsu_used;
; 209  :         }
; 210  : #endif
; 211  :     }
; 212  : #endif /* #if defined( __APPLE__ ) || defined( FREEBSD_OR_NETBSD ) */
; 213  : 
; 214  :     pHostInfo->hostpagesz = (U64) HPAGESIZE();

  00130	e8 00 00 00 00	 call	 w32_hpagesize
  00135	8b c0		 mov	 eax, eax
  00137	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pHostInfo$[rsp]
  0013c	48 89 81 20 02
	00 00		 mov	 QWORD PTR [rcx+544], rax

; 215  : 
; 216  :     if ( pHostInfo->cachelinesz == 0 )

  00143	48 8b 44 24 30	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00148	48 83 b8 f0 01
	00 00 00	 cmp	 QWORD PTR [rax+496], 0
  00150	75 1f		 jne	 SHORT $LN9@init_hosti

; 217  :     {
; 218  :         pHostInfo->cachelinesz = 64;

  00152	48 8b 44 24 30	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00157	48 c7 80 f0 01
	00 00 40 00 00
	00		 mov	 QWORD PTR [rax+496], 64	; 00000040H

; 219  :         pHostInfo->valid_cache_nums = FALSE;

  00162	48 8b 44 24 30	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00167	c7 80 d8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+472], 0
$LN9@init_hosti:

; 220  :     }
; 221  : 
; 222  :     if ( pHostInfo->L1Dcachesz == 0 && pHostInfo->L1Icachesz == 0 && pHostInfo->L1Ucachesz == 0 )

  00171	48 8b 44 24 30	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00176	48 83 b8 00 02
	00 00 00	 cmp	 QWORD PTR [rax+512], 0
  0017e	75 4d		 jne	 SHORT $LN10@init_hosti
  00180	48 8b 44 24 30	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00185	48 83 b8 f8 01
	00 00 00	 cmp	 QWORD PTR [rax+504], 0
  0018d	75 3e		 jne	 SHORT $LN10@init_hosti
  0018f	48 8b 44 24 30	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00194	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  0019c	75 2f		 jne	 SHORT $LN10@init_hosti

; 223  :     {
; 224  :         pHostInfo->L1Dcachesz = pHostInfo->L1Icachesz = ((U64)8 << SHIFT_KILOBYTE );

  0019e	48 8b 44 24 30	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  001a3	48 c7 80 f8 01
	00 00 00 20 00
	00		 mov	 QWORD PTR [rax+504], 8192 ; 00002000H
  001ae	48 8b 44 24 30	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  001b3	48 c7 80 00 02
	00 00 00 20 00
	00		 mov	 QWORD PTR [rax+512], 8192 ; 00002000H

; 225  :         pHostInfo->valid_cache_nums = FALSE;

  001be	48 8b 44 24 30	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  001c3	c7 80 d8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+472], 0
$LN10@init_hosti:

; 226  :     }
; 227  : 
; 228  :     if ( pHostInfo->L2cachesz == 0 )

  001cd	48 8b 44 24 30	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  001d2	48 83 b8 10 02
	00 00 00	 cmp	 QWORD PTR [rax+528], 0
  001da	75 1f		 jne	 SHORT $LN11@init_hosti

; 229  :     {
; 230  :         pHostInfo->L2cachesz = ((U64)256 << SHIFT_KILOBYTE );

  001dc	48 8b 44 24 30	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  001e1	48 c7 80 10 02
	00 00 00 00 04
	00		 mov	 QWORD PTR [rax+528], 262144 ; 00040000H

; 231  :         pHostInfo->valid_cache_nums = FALSE;

  001ec	48 8b 44 24 30	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  001f1	c7 80 d8 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+472], 0
$LN11@init_hosti:

; 232  :     }
; 233  : 
; 234  :     return;
; 235  : }

  001fb	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001ff	5f		 pop	 rdi
  00200	c3		 ret	 0
init_hostinfo ENDP
_TEXT	ENDS
END
