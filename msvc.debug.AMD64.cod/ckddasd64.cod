; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
VOL1_KEYA DB	056H
	DB	04fH
	DB	04cH
	DB	031H
VOL1_KEY DB	0e5H
	DB	0d6H
	DB	0d3H
	DB	0f1H
IPL1_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f1H
IPL2_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f2H
iplpsw	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
iplccw1	DB	06H
	DB	00H
	DB	03aH
	DB	098H
	DB	060H
	DB	00H
	DB	00H
	DB	060H
iplccw2	DB	08H
	DB	00H
	DB	03aH
	DB	098H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
noiplpsw DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
noiplccw1 DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
noiplccw2 DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
ipl2data DB	07H
	DB	00H
	DB	03aH
	DB	0b8H
	DB	040H
	DB	00H
	DB	00H
	DB	06H
	DB	031H
	DB	00H
	DB	03aH
	DB	0beH
	DB	040H
	DB	00H
	DB	00H
	DB	05H
	DB	08H
	DB	00H
	DB	03aH
	DB	0a0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	00H
	DB	07fH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	ORG $+5
?nulls@?BL@??ckd64_dasd_init_handler@@9@9	ORG $+12	; `ckd64_dasd_init_handler'::`27'::nulls
CONST	ENDS
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	fetch_hw_noswap
PUBLIC	store_hw_noswap
PUBLIC	fetch_fw_noswap
PUBLIC	ckd64_dasd_init_handler
EXTRN	__imp__errno:PROC
EXTRN	strchr:PROC
EXTRN	strrchr:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	strlen:PROC
EXTRN	_byteswap_ushort:PROC
EXTRN	_byteswap_ulong:PROC
EXTRN	__imp__lseeki64:PROC
EXTRN	__imp_close:PROC
EXTRN	__imp_read:PROC
EXTRN	__imp_write:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	__imp__fstat64:PROC
EXTRN	__imp__stat64:PROC
EXTRN	__imp_is_numeric:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_w32_hopen:PROC
EXTRN	dasd_lookup:PROC
EXTRN	dasd_build_ckd_devid:PROC
EXTRN	dasd_build_ckd_devchar:PROC
EXTRN	dasd_build_ckd_config_data:PROC
EXTRN	shared_ckd_init:PROC
EXTRN	ckd_dasd_init_handler:PROC
EXTRN	cckd64_dasd_init_handler:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	gen_dasd_serial:PROC
EXTRN	is_dh_devid_typ:PROC
EXTRN	cckd_sf_parse_sfn:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memcmp:PROC
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
$SG169971 DB	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sscanf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_hw_noswap DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$fetch_hw_noswap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_fw_noswap DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$fetch_fw_noswap
pdata	ENDS
pdata	SEGMENT
$pdata$ckd64_dasd_init_handler DD imagerel $LN202
	DD	imagerel $LN202+10604
	DD	imagerel $unwind$ckd64_dasd_init_handler
pdata	ENDS
_DATA	SEGMENT
$SG169863 DB	'%hx', 00H
$SG169866 DB	'E', 00H
	ORG $+10
$SG169867 DB	'HHC00400%s %1d:%04X CKD file: name missing or invalid fi'
	DB	'lename length', 0aH, 00H
	ORG $+1
$SG169868 DB	'ckd64_dasd_init_handler', 00H
$SG169869 DB	'ckddasd64.c', 00H
$SG169872 DB	'%s', 00H
	ORG $+1
$SG169873 DB	'''%s''', 00H
	ORG $+3
$SG169877 DB	'E', 00H
	ORG $+2
$SG169896 DB	'noftio', 00H
	ORG $+1
$SG169901 DB	'ro', 00H
	ORG $+1
$SG169878 DB	'HHC00401%s %1d:%04X CKD file %s: open error: not found', 0aH
	DB	00H
$SG169879 DB	'ckd64_dasd_init_handler', 00H
$SG169880 DB	'ckddasd64.c', 00H
$SG169906 DB	'fw', 00H
	ORG $+1
$SG169884 DB	'lazywrite', 00H
	ORG $+2
$SG169900 DB	'rdonly', 00H
	ORG $+1
$SG169908 DB	'sf=', 00H
$SG169886 DB	'nolazywrite', 00H
$SG169910 DB	'cu=', 00H
$SG169889 DB	'fulltrackio', 00H
$SG169914 DB	'E', 00H
	ORG $+2
$SG169890 DB	'fulltrkio', 00H
	ORG $+2
$SG169891 DB	'ftio', 00H
	ORG $+3
$SG169921 DB	'open()', 00H
	ORG $+1
$SG169922 DB	'E', 00H
	ORG $+2
$SG169894 DB	'nofulltrackio', 00H
	ORG $+2
$SG169895 DB	'nofulltrkio', 00H
$SG169927 DB	'E', 00H
	ORG $+2
$SG169899 DB	'readonly', 00H
	ORG $+3
$SG169933 DB	'E', 00H
	ORG $+2
$SG169904 DB	'fakewrite', 00H
	ORG $+2
$SG169940 DB	'read()', 00H
	ORG $+1
$SG169941 DB	'E', 00H
	ORG $+2
$SG169905 DB	'fakewrt', 00H
$SG169912 DB	'ser=', 00H
	ORG $+3
$SG169916 DB	'ckd64_dasd_init_handler', 00H
$SG169915 DB	'HHC00402%s %1d:%04X CKD file: parameter %s in argument %'
	DB	'd is invalid', 0aH, 00H
	ORG $+2
$SG169917 DB	'ckddasd64.c', 00H
$SG169947 DB	'E', 00H
	ORG $+2
$SG169923 DB	'HHC00404%s %1d:%04X CKD file %s: error in function %s: %'
	DB	's', 0aH, 00H
	ORG $+1
$SG169956 DB	'E', 00H
	ORG $+2
$SG169924 DB	'ckd64_dasd_init_handler', 00H
$SG169925 DB	'ckddasd64.c', 00H
	ORG $+4
$SG169928 DB	'HHC00405%s %1d:%04X CKD file %s: only one base file is a'
	DB	'llowed', 0aH, 00H
$SG169929 DB	'ckd64_dasd_init_handler', 00H
$SG169930 DB	'ckddasd64.c', 00H
$SG169964 DB	'E', 00H
	ORG $+2
$SG169932 DB	'fstat()', 00H
$SG169934 DB	'HHC00404%s %1d:%04X CKD file %s: error in function %s: %'
	DB	's', 0aH, 00H
	ORG $+1
$SG169974 DB	'I', 00H
	ORG $+2
$SG169935 DB	'ckd64_dasd_init_handler', 00H
$SG169936 DB	'ckddasd64.c', 00H
$SG169983 DB	'E', 00H
	ORG $+2
$SG169942 DB	'HHC00404%s %1d:%04X CKD file %s: error in function %s: %'
	DB	's', 0aH, 00H
	ORG $+1
$SG169989 DB	'E', 00H
	ORG $+2
$SG169943 DB	'ckd64_dasd_init_handler', 00H
$SG169944 DB	'ckddasd64.c', 00H
$SG170003 DB	'E', 00H
	ORG $+2
$SG169945 DB	'CKD header incomplete', 00H
	ORG $+2
$SG169946 DB	'read()', 00H
	ORG $+1
$SG169948 DB	'HHC00404%s %1d:%04X CKD file %s: error in function %s: %'
	DB	's', 0aH, 00H
	ORG $+1
$SG170011 DB	'I', 00H
	ORG $+2
$SG169949 DB	'ckd64_dasd_init_handler', 00H
$SG169950 DB	'ckddasd64.c', 00H
$SG170021 DB	'E', 00H
	ORG $+2
$SG169957 DB	'HHC00406%s %1d:%04X CKD file %s: ckd header invalid', 0aH
	DB	00H
	ORG $+3
$SG169958 DB	'ckd64_dasd_init_handler', 00H
$SG169959 DB	'ckddasd64.c', 00H
$SG169962 DB	'CCKD64', 00H
	ORG $+1
$SG169963 DB	'CKD64', 00H
	ORG $+2
$SG169972 DB	'CCKD64', 00H
	ORG $+1
$SG170029 DB	'E', 00H
	ORG $+2
$SG169965 DB	'HHC00407%s %1d:%04X %s file %s: only 1 CCKD file allowed'
	DB	0aH, 00H
	ORG $+2
$SG169982 DB	'read()', 00H
	ORG $+1
$SG170036 DB	'E', 00H
	ORG $+2
$SG169966 DB	'ckd64_dasd_init_handler', 00H
$SG169967 DB	'ckddasd64.c', 00H
$SG170046 DB	'E', 00H
	ORG $+2
$SG169970 DB	' with fake writing', 00H
	ORG $+1
$SG169973 DB	'CKD64', 00H
	ORG $+2
$SG169988 DB	'read()', 00H
	ORG $+1
$SG170051 DB	'E', 00H
	ORG $+2
$SG169975 DB	'HHC00476%s %1d:%04X %s file %s: opened r/o%s', 0aH, 00H
	ORG $+2
$SG169976 DB	'ckd64_dasd_init_handler', 00H
$SG169977 DB	'ckddasd64.c', 00H
$SG170058 DB	'I', 00H
	ORG $+2
$SG169984 DB	'HHC00404%s %1d:%04X CKD file %s: error in function %s: %'
	DB	's', 0aH, 00H
	ORG $+1
$SG170065 DB	'E', 00H
	ORG $+2
$SG169985 DB	'ckd64_dasd_init_handler', 00H
$SG169986 DB	'ckddasd64.c', 00H
	ORG $+4
$SG169987 DB	'CCKD header incomplete', 00H
	ORG $+1
$SG169990 DB	'HHC00404%s %1d:%04X CKD file %s: error in function %s: %'
	DB	's', 0aH, 00H
	ORG $+5
$SG169991 DB	'ckd64_dasd_init_handler', 00H
$SG169992 DB	'ckddasd64.c', 00H
$SG170001 DB	'CCKD64', 00H
	ORG $+1
$SG170002 DB	'CKD64', 00H
	ORG $+6
$SG170005 DB	'ckd64_dasd_init_handler', 00H
$SG170004 DB	'HHC00408%s %1d:%04X %s file %s: ckd file out of sequence'
	DB	' or bad size', 0aH, 00H
	ORG $+2
$SG170006 DB	'ckddasd64.c', 00H
$SG170009 DB	'CCKD64', 00H
	ORG $+1
$SG170010 DB	'CKD64', 00H
	ORG $+6
$SG170012 DB	'HHC00409%s %1d:%04X %s file %s: seq %02d cyls %6d-%-6d', 0aH
	DB	00H
$SG170013 DB	'ckd64_dasd_init_handler', 00H
$SG170014 DB	'ckddasd64.c', 00H
$SG170019 DB	'CCKD64', 00H
	ORG $+1
$SG170020 DB	'CKD64', 00H
	ORG $+6
$SG170023 DB	'ckd64_dasd_init_handler', 00H
$SG170022 DB	'HHC00410%s %1d:%04X %s file %s: found heads %d trklen %d'
	DB	', expected heads %d trklen %d', 0aH, 00H
	ORG $+1
$SG170024 DB	'ckddasd64.c', 00H
$SG170027 DB	'CCKD64', 00H
	ORG $+1
$SG170028 DB	'CKD64', 00H
	ORG $+6
$SG170031 DB	'ckd64_dasd_init_handler', 00H
$SG170030 DB	'HHC00411%s %1d:%04X %s file %s: ckd header inconsistent '
	DB	'with file size', 0aH, 00H
$SG170032 DB	'ckddasd64.c', 00H
$SG170034 DB	'CCKD64', 00H
	ORG $+1
$SG170035 DB	'CKD64', 00H
	ORG $+6
$SG170038 DB	'ckd64_dasd_init_handler', 00H
$SG170037 DB	'HHC00412%s %1d:%04X %s file %s: ckd header high cylinder'
	DB	' incorrect', 0aH, 00H
	ORG $+4
$SG170039 DB	'ckddasd64.c', 00H
$SG170044 DB	'CCKD64', 00H
	ORG $+1
$SG170045 DB	'CKD64', 00H
	ORG $+6
$SG170048 DB	'ckd64_dasd_init_handler', 00H
$SG170047 DB	'HHC00413%s %1d:%04X %s file %s: maximum CKD files exceed'
	DB	'ed: %d', 0aH, 00H
$SG170049 DB	'ckddasd64.c', 00H
	ORG $+4
$SG170052 DB	'HHC00415%s %1d:%04X CKD file %s: device type %4.4X not f'
	DB	'ound in dasd table', 0aH, 00H
	ORG $+4
$SG170053 DB	'ckd64_dasd_init_handler', 00H
$SG170054 DB	'ckddasd64.c', 00H
$SG170056 DB	'CCKD64', 00H
	ORG $+1
$SG170057 DB	'CKD64', 00H
	ORG $+6
$SG170060 DB	'ckd64_dasd_init_handler', 00H
$SG170059 DB	'HHC00470%s %1d:%04X %s file %s: model %s cyls %d heads %'
	DB	'd tracks %d trklen %d', 0aH, 00H
	ORG $+1
$SG170061 DB	'ckddasd64.c', 00H
$SG170063 DB	'CCKD64', 00H
	ORG $+1
$SG170064 DB	'CKD64', 00H
	ORG $+6
$SG170066 DB	'HHC00416%s %1d:%04X %s file %s: control unit %s not foun'
	DB	'd in dasd table', 0aH, 00H
	ORG $+7
$SG170067 DB	'ckd64_dasd_init_handler', 00H
$SG170068 DB	'ckddasd64.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ckd64_dasd_init_handler
	DD	021H
	DD	02952H
voltbl	ENDS
xdata	SEGMENT
$unwind$ckd64_dasd_init_handler DD 042919H
	DD	0f30117H
	DD	0600f7010H
	DD	imagerel __GSHandlerCheck
	DD	0780H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_fw_noswap DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_hw_noswap DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\ckddasd64.c
_TEXT	SEGMENT
fileseq$ = 128
i$ = 132
cckd$ = 136
rc$ = 140
highcyl$ = 144
cyls$ = 148
sfxchar$ = 152
heads$ = 156
trks$ = 160
sfxptr$ = 168
trksize$ = 176
tv129 = 180
tv179 = 184
tv185 = 188
tv427 = 192
tv433 = 196
tv452 = 200
tv512 = 204
tv518 = 208
tv537 = 212
tv543 = 216
tv568 = 220
tv574 = 224
tv601 = 228
tv607 = 232
tv624 = 236
tv630 = 240
tv698 = 244
tv704 = 248
tv729 = 252
tv735 = 256
tv767 = 260
tv805 = 264
tv833 = 268
tv839 = 272
tv856 = 276
tv862 = 280
tv914 = 284
tv950 = 288
tv956 = 292
tv1009 = 296
tv1022 = 300
tv1028 = 304
tv1092 = 308
tv1098 = 312
tv1133 = 316
tv1139 = 320
tv1162 = 324
tv1168 = 328
tv1221 = 332
tv1227 = 336
tv1256 = 340
tv1262 = 344
tv1295 = 348
tv1301 = 352
tv1368 = 356
tv1374 = 360
tv91 = 364
cu$ = 368
tv1250 = 376
tv418 = 380
tv1013 = 384
tv724 = 392
tv758 = 400
tv762 = 408
tv945 = 416
tv1017 = 424
tv1055 = 432
tv1128 = 440
tv1157 = 448
tv1216 = 456
tv1290 = 464
tv1351 = 472
tv1359 = 480
tv1363 = 488
tv420 = 496
tv471 = 504
tv559 = 512
tv592 = 520
tv824 = 528
tv1434 = 536
statbuf$ = 544
devhdr$ = 608
cdevhdr$ = 1120
serial$ = 1632
filename$ = 1648
__$ArrayPad$ = 1920
dev$ = 1968
argc$ = 1976
argv$ = 1984
ckd64_dasd_init_handler PROC

; 46   : {

$LN202:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	56		 push	 rsi
  0000f	57		 push	 rdi
  00010	48 81 ec 98 07
	00 00		 sub	 rsp, 1944		; 00000798H
  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001e	48 33 c4	 xor	 rax, rsp
  00021	48 89 84 24 80
	07 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 47   : int             rc;                     /* Return code               */
; 48   : struct stat     statbuf;                /* File information          */
; 49   : CKD_DEVHDR      devhdr;                 /* Device header             */
; 50   : CCKD64_DEVHDR   cdevhdr;                /* Compressed device header  */
; 51   : int             i;                      /* Loop index                */
; 52   : BYTE            fileseq;                /* File sequence number      */
; 53   : char           *sfxptr;                 /* -> Last char of file name */
; 54   : char            sfxchar;                /* Last char of file name    */
; 55   : int             heads;                  /* #of heads in CKD file     */
; 56   : int             trksize;                /* Track size of CKD file    */
; 57   : int             trks;                   /* #of tracks in CKD file    */
; 58   : int             cyls;                   /* #of cylinders in CKD file */
; 59   : int             highcyl;                /* Highest cyl# in CKD file  */
; 60   : char           *cu = NULL;              /* Specified control unit    */

  00029	48 c7 84 24 70
	01 00 00 00 00
	00 00		 mov	 QWORD PTR cu$[rsp], 0

; 61   : int             cckd=0;                 /* 1 if compressed CKD       */

  00035	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR cckd$[rsp], 0

; 62   : char         filename[FILENAME_MAX+3];  /* work area for display     */
; 63   : BYTE            serial[12+1] = {0};     /* Dasd serial number        */

  00040	48 8d 84 24 60
	06 00 00	 lea	 rax, QWORD PTR serial$[rsp]
  00048	48 8b f8	 mov	 rdi, rax
  0004b	33 c0		 xor	 eax, eax
  0004d	b9 0d 00 00 00	 mov	 ecx, 13
  00052	f3 aa		 rep stosb

; 64   : 
; 65   :     dev->rcd = &dasd_build_ckd_config_data;

  00054	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:dasd_build_ckd_config_data
  00063	48 89 88 b8 02
	00 00		 mov	 QWORD PTR [rax+696], rcx

; 66   : 
; 67   :     /* For re-initialisation, close the existing file, if any */
; 68   :     if (dev->fd >= 0)

  0006a	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00072	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  00079	7c 1a		 jl	 SHORT $LN8@ckd64_dasd

; 69   :         (dev->hnd->close)(dev);

  0007b	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00083	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  0008a	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00092	ff 50 10	 call	 QWORD PTR [rax+16]
$LN8@ckd64_dasd:

; 70   : 
; 71   :     if(!sscanf(dev->typname,"%hx",&(dev->devtype)))

  00095	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0009d	48 83 c0 4a	 add	 rax, 74			; 0000004aH
  000a1	4c 8b c0	 mov	 r8, rax
  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169863
  000ab	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000b3	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  000b7	e8 00 00 00 00	 call	 sscanf
  000bc	85 c0		 test	 eax, eax
  000be	75 11		 jne	 SHORT $LN9@ckd64_dasd

; 72   :         dev->devtype = 0x3380;

  000c0	b8 80 33 00 00	 mov	 eax, 13184		; 00003380H
  000c5	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  000cd	66 89 41 4a	 mov	 WORD PTR [rcx+74], ax
$LN9@ckd64_dasd:

; 73   : 
; 74   :     /* The first argument is the file name */
; 75   :     if (argc == 0 || strlen(argv[0]) >= sizeof(dev->filename))

  000d1	83 bc 24 b8 07
	00 00 00	 cmp	 DWORD PTR argc$[rsp], 0
  000d9	74 26		 je	 SHORT $LN11@ckd64_dasd
  000db	b8 08 00 00 00	 mov	 eax, 8
  000e0	48 6b c0 00	 imul	 rax, rax, 0
  000e4	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000ec	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000f0	e8 00 00 00 00	 call	 strlen
  000f5	48 3d 05 01 00
	00		 cmp	 rax, 261		; 00000105H
  000fb	0f 82 bf 00 00
	00		 jb	 $LN10@ckd64_dasd
$LN11@ckd64_dasd:

; 76   :     {
; 77   :         // "%1d:%04X CKD file: name missing or invalid filename length"
; 78   :         WRMSG( HHC00400, "E", LCSS_DEVNUM );

  00101	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0010a	74 15		 je	 SHORT $LN82@ckd64_dasd
  0010c	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00114	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00118	89 84 24 6c 01
	00 00		 mov	 DWORD PTR tv91[rsp], eax
  0011f	eb 0b		 jmp	 SHORT $LN83@ckd64_dasd
$LN82@ckd64_dasd:
  00121	c7 84 24 6c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv91[rsp], 0
$LN83@ckd64_dasd:
  0012c	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00135	74 17		 je	 SHORT $LN84@ckd64_dasd
  00137	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0013f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00143	d1 f8		 sar	 eax, 1
  00145	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv129[rsp], eax
  0014c	eb 0b		 jmp	 SHORT $LN85@ckd64_dasd
$LN84@ckd64_dasd:
  0014e	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv129[rsp], 0
$LN85@ckd64_dasd:
  00159	b9 01 00 00 00	 mov	 ecx, 1
  0015e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00164	8b 8c 24 6c 01
	00 00		 mov	 ecx, DWORD PTR tv91[rsp]
  0016b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0016f	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv129[rsp]
  00176	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0017a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169866
  00181	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00186	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169867
  0018d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00192	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00197	41 b9 03 00 00
	00		 mov	 r9d, 3
  0019d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169868
  001a4	ba 4e 00 00 00	 mov	 edx, 78			; 0000004eH
  001a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169869
  001b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 79   :         return -1;

  001b6	b8 ff ff ff ff	 mov	 eax, -1
  001bb	e9 92 27 00 00	 jmp	 $LN1@ckd64_dasd
$LN10@ckd64_dasd:

; 80   :     }
; 81   : 
; 82   :     /* reset excps count */
; 83   :     dev->excps = 0;

  001c0	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001c8	48 c7 80 00 06
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+1536], 0

; 84   : 
; 85   :     /* Save the file name in the device block */
; 86   :     hostpath(dev->filename, argv[0], sizeof(dev->filename));

  001d3	b8 08 00 00 00	 mov	 eax, 8
  001d8	48 6b c0 00	 imul	 rax, rax, 0
  001dc	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  001e4	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  001eb	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  001f1	48 8b 94 24 c0
	07 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  001f9	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  001fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 87   : 
; 88   :     if (strchr(dev->filename, SPACE) == NULL)

  00203	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0020b	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00211	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00216	48 8b c8	 mov	 rcx, rax
  00219	e8 00 00 00 00	 call	 strchr
  0021e	48 85 c0	 test	 rax, rax
  00221	75 2d		 jne	 SHORT $LN12@ckd64_dasd

; 89   :     {
; 90   :         MSGBUF(filename, "%s", dev->filename);

  00223	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0022b	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00231	4c 8b c8	 mov	 r9, rax
  00234	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169872
  0023b	ba 07 01 00 00	 mov	 edx, 263		; 00000107H
  00240	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  00248	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 91   :     }

  0024e	eb 2b		 jmp	 SHORT $LN13@ckd64_dasd
$LN12@ckd64_dasd:

; 92   :     else
; 93   :     {
; 94   :         MSGBUF(filename, "'%s'", dev->filename);

  00250	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00258	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0025e	4c 8b c8	 mov	 r9, rax
  00261	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169873
  00268	ba 07 01 00 00	 mov	 edx, 263		; 00000107H
  0026d	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  00275	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN13@ckd64_dasd:

; 95   :     }
; 96   : 
; 97   : #if defined( OPTION_SHARED_DEVICES )
; 98   :     /* Device is shareable */
; 99   :     dev->shareable = 1;

  0027b	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00283	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00289	83 c8 08	 or	 eax, 8
  0028c	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00294	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 100  : #endif // defined( OPTION_SHARED_DEVICES )
; 101  : 
; 102  :     /* Check for possible remote device */
; 103  :     if (stat(dev->filename, &statbuf) < 0)

  0029a	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002a2	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  002a8	48 8d 94 24 20
	02 00 00	 lea	 rdx, QWORD PTR statbuf$[rsp]
  002b0	48 8b c8	 mov	 rcx, rax
  002b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stat64
  002b9	85 c0		 test	 eax, eax
  002bb	0f 8d 0b 01 00
	00		 jge	 $LN14@ckd64_dasd

; 104  :     {
; 105  :         rc = shared_ckd_init ( dev, argc, argv);

  002c1	4c 8b 84 24 c0
	07 00 00	 mov	 r8, QWORD PTR argv$[rsp]
  002c9	8b 94 24 b8 07
	00 00		 mov	 edx, DWORD PTR argc$[rsp]
  002d0	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002d8	e8 00 00 00 00	 call	 shared_ckd_init
  002dd	89 84 24 8c 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax

; 106  :         if (rc < 0)

  002e4	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  002ec	0f 8d ce 00 00
	00		 jge	 $LN15@ckd64_dasd

; 107  :         {
; 108  :             // "%1d:%04X CKD file %s: open error: not found"
; 109  :             WRMSG( HHC00401, "E", LCSS_DEVNUM, filename );

  002f2	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  002fb	74 15		 je	 SHORT $LN86@ckd64_dasd
  002fd	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00305	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00309	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv179[rsp], eax
  00310	eb 0b		 jmp	 SHORT $LN87@ckd64_dasd
$LN86@ckd64_dasd:
  00312	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv179[rsp], 0
$LN87@ckd64_dasd:
  0031d	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00326	74 17		 je	 SHORT $LN88@ckd64_dasd
  00328	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00330	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00334	d1 f8		 sar	 eax, 1
  00336	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv185[rsp], eax
  0033d	eb 0b		 jmp	 SHORT $LN89@ckd64_dasd
$LN88@ckd64_dasd:
  0033f	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv185[rsp], 0
$LN89@ckd64_dasd:
  0034a	b9 01 00 00 00	 mov	 ecx, 1
  0034f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00355	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  0035d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00362	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR tv179[rsp]
  00369	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0036d	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR tv185[rsp]
  00374	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00378	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169877
  0037f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00384	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169878
  0038b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00390	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00395	41 b9 03 00 00
	00		 mov	 r9d, 3
  0039b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169879
  003a2	ba 6d 00 00 00	 mov	 edx, 109		; 0000006dH
  003a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169880
  003ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 110  :             return -1;

  003b4	b8 ff ff ff ff	 mov	 eax, -1
  003b9	e9 94 25 00 00	 jmp	 $LN1@ckd64_dasd

; 111  :         }

  003be	eb 0c		 jmp	 SHORT $LN16@ckd64_dasd
$LN15@ckd64_dasd:

; 112  :         else
; 113  :             return rc;

  003c0	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR rc$[rsp]
  003c7	e9 86 25 00 00	 jmp	 $LN1@ckd64_dasd
$LN16@ckd64_dasd:
$LN14@ckd64_dasd:

; 114  :     }
; 115  : 
; 116  :     /* No active track or cache entry */
; 117  :     dev->bufcur = dev->cache = -1;

  003cc	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003d4	c7 80 f8 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+504], -1
  003de	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003e6	c7 80 c0 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+448], -1

; 118  : 
; 119  :     /* Locate and save the last character of the file name */
; 120  :     sfxptr = strrchr (dev->filename, PATHSEPC);

  003f0	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003f8	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  003fe	ba 2f 00 00 00	 mov	 edx, 47			; 0000002fH
  00403	48 8b c8	 mov	 rcx, rax
  00406	e8 00 00 00 00	 call	 strrchr
  0040b	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR sfxptr$[rsp], rax

; 121  :     if (sfxptr == NULL) sfxptr = dev->filename + 1;

  00413	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR sfxptr$[rsp], 0
  0041c	75 16		 jne	 SHORT $LN17@ckd64_dasd
  0041e	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00426	48 05 a5 00 00
	00		 add	 rax, 165		; 000000a5H
  0042c	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR sfxptr$[rsp], rax
$LN17@ckd64_dasd:

; 122  :     sfxptr = strchr (sfxptr, '.');

  00434	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  00439	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR sfxptr$[rsp]
  00441	e8 00 00 00 00	 call	 strchr
  00446	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR sfxptr$[rsp], rax

; 123  :     if (sfxptr == NULL) sfxptr = dev->filename + strlen(dev->filename);

  0044e	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR sfxptr$[rsp], 0
  00457	75 2e		 jne	 SHORT $LN18@ckd64_dasd
  00459	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00461	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00467	48 8b c8	 mov	 rcx, rax
  0046a	e8 00 00 00 00	 call	 strlen
  0046f	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00477	48 8d 84 01 a4
	00 00 00	 lea	 rax, QWORD PTR [rcx+rax+164]
  0047f	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR sfxptr$[rsp], rax
$LN18@ckd64_dasd:

; 124  :     sfxptr--;

  00487	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR sfxptr$[rsp]
  0048f	48 ff c8	 dec	 rax
  00492	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR sfxptr$[rsp], rax

; 125  :     sfxchar = *sfxptr;

  0049a	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR sfxptr$[rsp]
  004a2	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  004a5	88 84 24 98 00
	00 00		 mov	 BYTE PTR sfxchar$[rsp], al

; 126  : 
; 127  :     /* process the remaining arguments */
; 128  :     for (i = 1; i < argc; i++)

  004ac	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR i$[rsp], 1
  004b7	eb 10		 jmp	 SHORT $LN4@ckd64_dasd
$LN2@ckd64_dasd:
  004b9	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  004c0	ff c0		 inc	 eax
  004c2	89 84 24 84 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN4@ckd64_dasd:
  004c9	8b 84 24 b8 07
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  004d0	39 84 24 84 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  004d7	0f 8d a2 05 00
	00		 jge	 $LN3@ckd64_dasd

; 129  :     {
; 130  :         if (strcasecmp ("lazywrite", argv[i]) == 0)

  004dd	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  004e5	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004ed	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  004f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169884
  004f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  004fe	85 c0		 test	 eax, eax
  00500	75 22		 jne	 SHORT $LN19@ckd64_dasd

; 131  :         {
; 132  :             dev->ckdnolazywr = 0;

  00502	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0050a	8b 80 14 13 00
	00		 mov	 eax, DWORD PTR [rax+4884]
  00510	0f ba f0 11	 btr	 eax, 17
  00514	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0051c	89 81 14 13 00
	00		 mov	 DWORD PTR [rcx+4884], eax

; 133  :             continue;

  00522	eb 95		 jmp	 SHORT $LN2@ckd64_dasd
$LN19@ckd64_dasd:

; 134  :         }
; 135  :         if (strcasecmp ("nolazywrite", argv[i]) == 0)

  00524	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0052c	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00534	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00538	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169886
  0053f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00545	85 c0		 test	 eax, eax
  00547	75 25		 jne	 SHORT $LN20@ckd64_dasd

; 136  :         {
; 137  :             dev->ckdnolazywr = 1;

  00549	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00551	8b 80 14 13 00
	00		 mov	 eax, DWORD PTR [rax+4884]
  00557	0f ba e8 11	 bts	 eax, 17
  0055b	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00563	89 81 14 13 00
	00		 mov	 DWORD PTR [rcx+4884], eax

; 138  :             continue;

  00569	e9 4b ff ff ff	 jmp	 $LN2@ckd64_dasd
$LN20@ckd64_dasd:

; 139  :         }
; 140  :         if (strcasecmp ("fulltrackio", argv[i]) == 0 ||
; 141  :             strcasecmp ("fulltrkio",   argv[i]) == 0 ||

  0056e	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00576	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0057e	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00582	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169889
  00589	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0058f	85 c0		 test	 eax, eax
  00591	74 4a		 je	 SHORT $LN22@ckd64_dasd
  00593	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0059b	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  005a3	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  005a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169890
  005ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  005b4	85 c0		 test	 eax, eax
  005b6	74 25		 je	 SHORT $LN22@ckd64_dasd
  005b8	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  005c0	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  005c8	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  005cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169891
  005d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  005d9	85 c0		 test	 eax, eax
  005db	75 25		 jne	 SHORT $LN21@ckd64_dasd
$LN22@ckd64_dasd:

; 142  :             strcasecmp ("ftio",        argv[i]) == 0)
; 143  :         {
; 144  :             dev->ckdnolazywr = 0;

  005dd	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  005e5	8b 80 14 13 00
	00		 mov	 eax, DWORD PTR [rax+4884]
  005eb	0f ba f0 11	 btr	 eax, 17
  005ef	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  005f7	89 81 14 13 00
	00		 mov	 DWORD PTR [rcx+4884], eax

; 145  :             continue;

  005fd	e9 b7 fe ff ff	 jmp	 $LN2@ckd64_dasd
$LN21@ckd64_dasd:

; 146  :         }
; 147  :         if (strcasecmp ("nofulltrackio", argv[i]) == 0 ||
; 148  :             strcasecmp ("nofulltrkio",   argv[i]) == 0 ||

  00602	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0060a	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00612	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00616	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169894
  0061d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00623	85 c0		 test	 eax, eax
  00625	74 4a		 je	 SHORT $LN24@ckd64_dasd
  00627	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0062f	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00637	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0063b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169895
  00642	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00648	85 c0		 test	 eax, eax
  0064a	74 25		 je	 SHORT $LN24@ckd64_dasd
  0064c	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00654	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0065c	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00660	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169896
  00667	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0066d	85 c0		 test	 eax, eax
  0066f	75 25		 jne	 SHORT $LN23@ckd64_dasd
$LN24@ckd64_dasd:

; 149  :             strcasecmp ("noftio",        argv[i]) == 0)
; 150  :         {
; 151  :             dev->ckdnolazywr = 1;

  00671	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00679	8b 80 14 13 00
	00		 mov	 eax, DWORD PTR [rax+4884]
  0067f	0f ba e8 11	 bts	 eax, 17
  00683	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0068b	89 81 14 13 00
	00		 mov	 DWORD PTR [rcx+4884], eax

; 152  :             continue;

  00691	e9 23 fe ff ff	 jmp	 $LN2@ckd64_dasd
$LN23@ckd64_dasd:

; 153  :         }
; 154  :         if (strcasecmp ("readonly", argv[i]) == 0 ||
; 155  :             strcasecmp ("rdonly",   argv[i]) == 0 ||

  00696	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0069e	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  006a6	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  006aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169899
  006b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  006b7	85 c0		 test	 eax, eax
  006b9	74 4a		 je	 SHORT $LN26@ckd64_dasd
  006bb	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  006c3	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  006cb	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  006cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169900
  006d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  006dc	85 c0		 test	 eax, eax
  006de	74 25		 je	 SHORT $LN26@ckd64_dasd
  006e0	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  006e8	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  006f0	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  006f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169901
  006fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00701	85 c0		 test	 eax, eax
  00703	75 25		 jne	 SHORT $LN25@ckd64_dasd
$LN26@ckd64_dasd:

; 156  :             strcasecmp ("ro",       argv[i]) == 0)
; 157  :         {
; 158  :             dev->ckdrdonly = 1;

  00705	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0070d	8b 80 14 13 00
	00		 mov	 eax, DWORD PTR [rax+4884]
  00713	0f ba e8 12	 bts	 eax, 18
  00717	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0071f	89 81 14 13 00
	00		 mov	 DWORD PTR [rcx+4884], eax

; 159  :             continue;

  00725	e9 8f fd ff ff	 jmp	 $LN2@ckd64_dasd
$LN25@ckd64_dasd:

; 160  :         }
; 161  :         if (strcasecmp ("fakewrite", argv[i]) == 0 ||
; 162  :             strcasecmp ("fakewrt",   argv[i]) == 0 ||

  0072a	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00732	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0073a	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0073e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169904
  00745	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0074b	85 c0		 test	 eax, eax
  0074d	74 4a		 je	 SHORT $LN28@ckd64_dasd
  0074f	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00757	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0075f	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00763	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169905
  0076a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00770	85 c0		 test	 eax, eax
  00772	74 25		 je	 SHORT $LN28@ckd64_dasd
  00774	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0077c	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00784	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00788	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169906
  0078f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00795	85 c0		 test	 eax, eax
  00797	75 25		 jne	 SHORT $LN27@ckd64_dasd
$LN28@ckd64_dasd:

; 163  :             strcasecmp ("fw",        argv[i]) == 0)
; 164  :         {
; 165  :             dev->ckdfakewr = 1;

  00799	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  007a1	8b 80 14 13 00
	00		 mov	 eax, DWORD PTR [rax+4884]
  007a7	0f ba e8 14	 bts	 eax, 20
  007ab	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  007b3	89 81 14 13 00
	00		 mov	 DWORD PTR [rcx+4884], eax

; 166  :             continue;

  007b9	e9 fb fc ff ff	 jmp	 $LN2@ckd64_dasd
$LN27@ckd64_dasd:

; 167  :         }
; 168  :         if (strlen (argv[i]) > 3 &&

  007be	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  007c6	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  007ce	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  007d2	e8 00 00 00 00	 call	 strlen
  007d7	48 83 f8 03	 cmp	 rax, 3
  007db	76 57		 jbe	 SHORT $LN29@ckd64_dasd
  007dd	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  007e5	41 b8 03 00 00
	00		 mov	 r8d, 3
  007eb	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  007f3	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  007f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169908
  007fe	e8 00 00 00 00	 call	 memcmp
  00803	85 c0		 test	 eax, eax
  00805	75 2d		 jne	 SHORT $LN29@ckd64_dasd

; 169  :             memcmp ("sf=", argv[i], 3) == 0)
; 170  :         {
; 171  :             /* Parse the shadow file name parameter */
; 172  :             cckd_sf_parse_sfn( dev, argv[i]+3 );

  00807	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0080f	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00817	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  0081b	48 83 c0 03	 add	 rax, 3
  0081f	48 8b d0	 mov	 rdx, rax
  00822	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0082a	e8 00 00 00 00	 call	 cckd_sf_parse_sfn

; 173  :             continue;

  0082f	e9 85 fc ff ff	 jmp	 $LN2@ckd64_dasd
$LN29@ckd64_dasd:

; 174  :         }
; 175  :         if (strlen (argv[i]) > 3
; 176  :          && memcmp("cu=", argv[i], 3) == 0)

  00834	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0083c	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00844	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00848	e8 00 00 00 00	 call	 strlen
  0084d	48 83 f8 03	 cmp	 rax, 3
  00851	76 4f		 jbe	 SHORT $LN30@ckd64_dasd
  00853	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0085b	41 b8 03 00 00
	00		 mov	 r8d, 3
  00861	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00869	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0086d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169910
  00874	e8 00 00 00 00	 call	 memcmp
  00879	85 c0		 test	 eax, eax
  0087b	75 25		 jne	 SHORT $LN30@ckd64_dasd

; 177  :         {
; 178  :             cu = argv[i]+3;

  0087d	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00885	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0088d	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00891	48 83 c0 03	 add	 rax, 3
  00895	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR cu$[rsp], rax

; 179  :             continue;

  0089d	e9 17 fc ff ff	 jmp	 $LN2@ckd64_dasd
$LN30@ckd64_dasd:

; 180  :         }
; 181  :         if (strlen (argv[i]) > 4
; 182  :          && memcmp("ser=", argv[i], 4) == 0)

  008a2	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  008aa	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  008b2	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  008b6	e8 00 00 00 00	 call	 strlen
  008bb	48 83 f8 04	 cmp	 rax, 4
  008bf	0f 86 b2 00 00
	00		 jbe	 $LN31@ckd64_dasd
  008c5	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  008cd	41 b8 04 00 00
	00		 mov	 r8d, 4
  008d3	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  008db	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  008df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169912
  008e6	e8 00 00 00 00	 call	 memcmp
  008eb	85 c0		 test	 eax, eax
  008ed	0f 85 84 00 00
	00		 jne	 $LN31@ckd64_dasd

; 183  :         {
; 184  :             if (1
; 185  :                 && is_numeric( argv[i]+4 )
; 186  :                 && strlen( argv[i]+4 ) == sizeof( dev->serial )

  008f3	33 c0		 xor	 eax, eax
  008f5	83 f8 01	 cmp	 eax, 1
  008f8	74 7d		 je	 SHORT $LN32@ckd64_dasd
  008fa	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00902	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0090a	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  0090e	48 83 c0 04	 add	 rax, 4
  00912	48 8b c8	 mov	 rcx, rax
  00915	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_numeric
  0091b	0f b6 c0	 movzx	 eax, al
  0091e	85 c0		 test	 eax, eax
  00920	74 55		 je	 SHORT $LN32@ckd64_dasd
  00922	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0092a	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00932	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00936	48 83 c0 04	 add	 rax, 4
  0093a	48 8b c8	 mov	 rcx, rax
  0093d	e8 00 00 00 00	 call	 strlen
  00942	48 83 f8 0c	 cmp	 rax, 12
  00946	75 2f		 jne	 SHORT $LN32@ckd64_dasd

; 187  :             )
; 188  :             {
; 189  :                 memcpy( serial, argv[i]+4, sizeof( dev->serial ));

  00948	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00950	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00958	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  0095c	48 8d 8c 24 60
	06 00 00	 lea	 rcx, QWORD PTR serial$[rsp]
  00964	48 8b f9	 mov	 rdi, rcx
  00967	48 8d 70 04	 lea	 rsi, QWORD PTR [rax+4]
  0096b	b9 0c 00 00 00	 mov	 ecx, 12
  00970	f3 a4		 rep movsb

; 190  :                 continue;

  00972	e9 42 fb ff ff	 jmp	 $LN2@ckd64_dasd
$LN32@ckd64_dasd:
$LN31@ckd64_dasd:

; 191  :             }
; 192  :         }
; 193  : 
; 194  :         // "%1d:%04X CKD file: parameter %s in argument %d is invalid"
; 195  :         WRMSG( HHC00402, "E", LCSS_DEVNUM, argv[i], i + 1 );

  00977	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00980	74 15		 je	 SHORT $LN90@ckd64_dasd
  00982	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0098a	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0098e	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv427[rsp], eax
  00995	eb 0b		 jmp	 SHORT $LN91@ckd64_dasd
$LN90@ckd64_dasd:
  00997	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv427[rsp], 0
$LN91@ckd64_dasd:
  009a2	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  009ab	74 17		 je	 SHORT $LN92@ckd64_dasd
  009ad	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  009b5	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  009b9	d1 f8		 sar	 eax, 1
  009bb	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv433[rsp], eax
  009c2	eb 0b		 jmp	 SHORT $LN93@ckd64_dasd
$LN92@ckd64_dasd:
  009c4	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv433[rsp], 0
$LN93@ckd64_dasd:
  009cf	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  009d6	ff c0		 inc	 eax
  009d8	89 84 24 7c 01
	00 00		 mov	 DWORD PTR tv418[rsp], eax
  009df	48 63 8c 24 84
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  009e7	48 89 8c 24 f0
	01 00 00	 mov	 QWORD PTR tv420[rsp], rcx
  009ef	b9 01 00 00 00	 mov	 ecx, 1
  009f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009fa	8b 8c 24 7c 01
	00 00		 mov	 ecx, DWORD PTR tv418[rsp]
  00a01	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00a05	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00a0d	48 8b 94 24 f0
	01 00 00	 mov	 rdx, QWORD PTR tv420[rsp]
  00a15	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00a19	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00a1e	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR tv427[rsp]
  00a25	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00a29	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR tv433[rsp]
  00a30	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00a34	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169914
  00a3b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a40	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169915
  00a47	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a4c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a51	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a57	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169916
  00a5e	ba c3 00 00 00	 mov	 edx, 195		; 000000c3H
  00a63	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169917
  00a6a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 196  :         return -1;

  00a70	b8 ff ff ff ff	 mov	 eax, -1
  00a75	e9 d8 1e 00 00	 jmp	 $LN1@ckd64_dasd

; 197  :     }

  00a7a	e9 3a fa ff ff	 jmp	 $LN2@ckd64_dasd
$LN3@ckd64_dasd:

; 198  : 
; 199  :     /* Initialize the total tracks and cylinders */
; 200  :     dev->ckdtrks = 0;

  00a7f	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a87	c7 80 bc 12 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4796], 0

; 201  :     dev->ckdcyls = 0;

  00a91	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a99	c7 80 b8 12 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4792], 0

; 202  : 
; 203  :     /* Open all of the CKD image files which comprise this volume */
; 204  :     for (fileseq = 1;;)

  00aa3	c6 84 24 80 00
	00 00 01	 mov	 BYTE PTR fileseq$[rsp], 1
$LN5@ckd64_dasd:

; 205  :     {
; 206  :         /* Open the CKD image file */
; 207  :         dev->fd = HOPEN (dev->filename, dev->ckdrdonly ?

  00aab	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ab3	8b 80 14 13 00
	00		 mov	 eax, DWORD PTR [rax+4884]
  00ab9	c1 e8 12	 shr	 eax, 18
  00abc	83 e0 01	 and	 eax, 1
  00abf	85 c0		 test	 eax, eax
  00ac1	74 0d		 je	 SHORT $LN94@ckd64_dasd
  00ac3	c7 84 24 c8 00
	00 00 00 80 00
	00		 mov	 DWORD PTR tv452[rsp], 32768 ; 00008000H
  00ace	eb 0b		 jmp	 SHORT $LN95@ckd64_dasd
$LN94@ckd64_dasd:
  00ad0	c7 84 24 c8 00
	00 00 02 80 00
	00		 mov	 DWORD PTR tv452[rsp], 32770 ; 00008002H
$LN95@ckd64_dasd:
  00adb	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ae3	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00ae9	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR tv452[rsp]
  00af0	48 8b c8	 mov	 rcx, rax
  00af3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  00af9	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00b01	89 81 ac 01 00
	00		 mov	 DWORD PTR [rcx+428], eax

; 208  :                         O_RDONLY|O_BINARY : O_RDWR|O_BINARY);
; 209  :         if (dev->fd < 0)

  00b07	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b0f	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  00b16	0f 8d 64 01 00
	00		 jge	 $LN33@ckd64_dasd

; 210  :         {   /* Try read-only if shadow file present */
; 211  :             if (!dev->ckdrdonly && dev->dasdsfn != NULL)

  00b1c	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b24	8b 80 14 13 00
	00		 mov	 eax, DWORD PTR [rax+4884]
  00b2a	c1 e8 12	 shr	 eax, 18
  00b2d	83 e0 01	 and	 eax, 1
  00b30	85 c0		 test	 eax, eax
  00b32	75 3c		 jne	 SHORT $LN34@ckd64_dasd
  00b34	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b3c	48 83 b8 70 11
	00 00 00	 cmp	 QWORD PTR [rax+4464], 0
  00b44	74 2a		 je	 SHORT $LN34@ckd64_dasd

; 212  :                 dev->fd = HOPEN (dev->filename, O_RDONLY|O_BINARY);

  00b46	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b4e	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00b54	ba 00 80 00 00	 mov	 edx, 32768		; 00008000H
  00b59	48 8b c8	 mov	 rcx, rax
  00b5c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  00b62	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00b6a	89 81 ac 01 00
	00		 mov	 DWORD PTR [rcx+428], eax
$LN34@ckd64_dasd:

; 213  :             if (dev->fd < 0)

  00b70	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b78	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  00b7f	0f 8d fb 00 00
	00		 jge	 $LN35@ckd64_dasd

; 214  :             {
; 215  :                 // "%1d:%04X CKD file %s: error in function %s: %s"
; 216  :                 WRMSG( HHC00404, "E", LCSS_DEVNUM,

  00b85	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00b8e	74 15		 je	 SHORT $LN96@ckd64_dasd
  00b90	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b98	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00b9c	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv512[rsp], eax
  00ba3	eb 0b		 jmp	 SHORT $LN97@ckd64_dasd
$LN96@ckd64_dasd:
  00ba5	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv512[rsp], 0
$LN97@ckd64_dasd:
  00bb0	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00bb9	74 17		 je	 SHORT $LN98@ckd64_dasd
  00bbb	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00bc3	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00bc7	d1 f8		 sar	 eax, 1
  00bc9	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv518[rsp], eax
  00bd0	eb 0b		 jmp	 SHORT $LN99@ckd64_dasd
$LN98@ckd64_dasd:
  00bd2	c7 84 24 d0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv518[rsp], 0
$LN99@ckd64_dasd:
  00bdd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00be3	8b 08		 mov	 ecx, DWORD PTR [rax]
  00be5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00beb	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR tv471[rsp], rax
  00bf3	b9 01 00 00 00	 mov	 ecx, 1
  00bf8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00bfe	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR tv471[rsp]
  00c06	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00c0b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169921
  00c12	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00c17	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  00c1f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00c24	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR tv512[rsp]
  00c2b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00c2f	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR tv518[rsp]
  00c36	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00c3a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169922
  00c41	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c46	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169923
  00c4d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c52	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c57	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c5d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169924
  00c64	ba d9 00 00 00	 mov	 edx, 217		; 000000d9H
  00c69	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169925
  00c70	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 217  :                                  filename, "open()", strerror( errno ));
; 218  :                 return -1;

  00c76	b8 ff ff ff ff	 mov	 eax, -1
  00c7b	e9 d2 1c 00 00	 jmp	 $LN1@ckd64_dasd
$LN35@ckd64_dasd:
$LN33@ckd64_dasd:

; 219  :             }
; 220  :         }
; 221  : 
; 222  :         /* If shadow file, only one base file is allowed */
; 223  :         if (fileseq > 1 && dev->dasdsfn != NULL)

  00c80	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR fileseq$[rsp]
  00c88	83 f8 01	 cmp	 eax, 1
  00c8b	0f 8e e2 00 00
	00		 jle	 $LN36@ckd64_dasd
  00c91	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c99	48 83 b8 70 11
	00 00 00	 cmp	 QWORD PTR [rax+4464], 0
  00ca1	0f 84 cc 00 00
	00		 je	 $LN36@ckd64_dasd

; 224  :         {
; 225  :             // "%1d:%04X CKD file %s: only one base file is allowed"
; 226  :             WRMSG( HHC00405, "E", LCSS_DEVNUM, filename );

  00ca7	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00cb0	74 15		 je	 SHORT $LN100@ckd64_dasd
  00cb2	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00cba	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00cbe	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv537[rsp], eax
  00cc5	eb 0b		 jmp	 SHORT $LN101@ckd64_dasd
$LN100@ckd64_dasd:
  00cc7	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv537[rsp], 0
$LN101@ckd64_dasd:
  00cd2	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00cdb	74 17		 je	 SHORT $LN102@ckd64_dasd
  00cdd	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ce5	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00ce9	d1 f8		 sar	 eax, 1
  00ceb	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv543[rsp], eax
  00cf2	eb 0b		 jmp	 SHORT $LN103@ckd64_dasd
$LN102@ckd64_dasd:
  00cf4	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv543[rsp], 0
$LN103@ckd64_dasd:
  00cff	b9 01 00 00 00	 mov	 ecx, 1
  00d04	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00d0a	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  00d12	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00d17	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR tv537[rsp]
  00d1e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00d22	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR tv543[rsp]
  00d29	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00d2d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169927
  00d34	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00d39	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169928
  00d40	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00d45	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d4a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00d50	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169929
  00d57	ba e2 00 00 00	 mov	 edx, 226		; 000000e2H
  00d5c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169930
  00d63	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 227  :             return -1;

  00d69	b8 ff ff ff ff	 mov	 eax, -1
  00d6e	e9 df 1b 00 00	 jmp	 $LN1@ckd64_dasd
$LN36@ckd64_dasd:

; 228  :         }
; 229  : 
; 230  :         /* Determine the device size */
; 231  :         rc = fstat (dev->fd, &statbuf);

  00d73	48 8d 94 24 20
	02 00 00	 lea	 rdx, QWORD PTR statbuf$[rsp]
  00d7b	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00d83	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00d89	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fstat64
  00d8f	89 84 24 8c 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax

; 232  :         if (rc < 0)

  00d96	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  00d9e	0f 8d fb 00 00
	00		 jge	 $LN37@ckd64_dasd

; 233  :         {
; 234  :             // "%1d:%04X CKD file %s: error in function %s: %s"
; 235  :             WRMSG( HHC00404, "E", LCSS_DEVNUM, filename, "fstat()", strerror( errno ));

  00da4	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00dad	74 15		 je	 SHORT $LN104@ckd64_dasd
  00daf	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00db7	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00dbb	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv568[rsp], eax
  00dc2	eb 0b		 jmp	 SHORT $LN105@ckd64_dasd
$LN104@ckd64_dasd:
  00dc4	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv568[rsp], 0
$LN105@ckd64_dasd:
  00dcf	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00dd8	74 17		 je	 SHORT $LN106@ckd64_dasd
  00dda	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00de2	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00de6	d1 f8		 sar	 eax, 1
  00de8	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv574[rsp], eax
  00def	eb 0b		 jmp	 SHORT $LN107@ckd64_dasd
$LN106@ckd64_dasd:
  00df1	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv574[rsp], 0
$LN107@ckd64_dasd:
  00dfc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00e02	8b 08		 mov	 ecx, DWORD PTR [rax]
  00e04	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00e0a	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR tv559[rsp], rax
  00e12	b9 01 00 00 00	 mov	 ecx, 1
  00e17	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00e1d	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR tv559[rsp]
  00e25	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00e2a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169932
  00e31	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00e36	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  00e3e	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00e43	8b 8c 24 dc 00
	00 00		 mov	 ecx, DWORD PTR tv568[rsp]
  00e4a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00e4e	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR tv574[rsp]
  00e55	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00e59	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169933
  00e60	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00e65	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169934
  00e6c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00e71	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e76	41 b9 03 00 00
	00		 mov	 r9d, 3
  00e7c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169935
  00e83	ba eb 00 00 00	 mov	 edx, 235		; 000000ebH
  00e88	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169936
  00e8f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 236  :             return -1;

  00e95	b8 ff ff ff ff	 mov	 eax, -1
  00e9a	e9 b3 1a 00 00	 jmp	 $LN1@ckd64_dasd
$LN37@ckd64_dasd:

; 237  :         }
; 238  : 
; 239  :         /* Read the device header */
; 240  :         rc = read (dev->fd, &devhdr, CKD_DEVHDR_SIZE);

  00e9f	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  00ea5	48 8d 94 24 60
	02 00 00	 lea	 rdx, QWORD PTR devhdr$[rsp]
  00ead	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00eb5	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00ebb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00ec1	89 84 24 8c 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax

; 241  :         if (rc < (int)CKD_DEVHDR_SIZE)

  00ec8	81 bc 24 8c 00
	00 00 00 02 00
	00		 cmp	 DWORD PTR rc$[rsp], 512	; 00000200H
  00ed3	0f 8d e8 01 00
	00		 jge	 $LN38@ckd64_dasd

; 242  :         {
; 243  :             if (rc < 0)

  00ed9	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  00ee1	0f 8d f6 00 00
	00		 jge	 $LN39@ckd64_dasd

; 244  :                 // "%1d:%04X CKD file %s: error in function %s: %s"
; 245  :                 WRMSG( HHC00404, "E", LCSS_DEVNUM,

  00ee7	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00ef0	74 15		 je	 SHORT $LN108@ckd64_dasd
  00ef2	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00efa	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00efe	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv601[rsp], eax
  00f05	eb 0b		 jmp	 SHORT $LN109@ckd64_dasd
$LN108@ckd64_dasd:
  00f07	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv601[rsp], 0
$LN109@ckd64_dasd:
  00f12	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00f1b	74 17		 je	 SHORT $LN110@ckd64_dasd
  00f1d	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f25	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00f29	d1 f8		 sar	 eax, 1
  00f2b	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv607[rsp], eax
  00f32	eb 0b		 jmp	 SHORT $LN111@ckd64_dasd
$LN110@ckd64_dasd:
  00f34	c7 84 24 e8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv607[rsp], 0
$LN111@ckd64_dasd:
  00f3f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00f45	8b 08		 mov	 ecx, DWORD PTR [rax]
  00f47	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00f4d	48 89 84 24 08
	02 00 00	 mov	 QWORD PTR tv592[rsp], rax
  00f55	b9 01 00 00 00	 mov	 ecx, 1
  00f5a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00f60	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR tv592[rsp]
  00f68	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00f6d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169940
  00f74	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00f79	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  00f81	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00f86	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR tv601[rsp]
  00f8d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00f91	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR tv607[rsp]
  00f98	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00f9c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169941
  00fa3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00fa8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169942
  00faf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00fb4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00fb9	41 b9 03 00 00
	00		 mov	 r9d, 3
  00fbf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169943
  00fc6	ba f6 00 00 00	 mov	 edx, 246		; 000000f6H
  00fcb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169944
  00fd2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00fd8	e9 da 00 00 00	 jmp	 $LN40@ckd64_dasd
$LN39@ckd64_dasd:

; 246  :                        filename, "read()", strerror( errno ));
; 247  :             else
; 248  :                 // "%1d:%04X CKD file %s: error in function %s: %s"
; 249  :                 WRMSG( HHC00404, "E", LCSS_DEVNUM,

  00fdd	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00fe6	74 15		 je	 SHORT $LN112@ckd64_dasd
  00fe8	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ff0	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00ff4	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv624[rsp], eax
  00ffb	eb 0b		 jmp	 SHORT $LN113@ckd64_dasd
$LN112@ckd64_dasd:
  00ffd	c7 84 24 ec 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv624[rsp], 0
$LN113@ckd64_dasd:
  01008	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01011	74 17		 je	 SHORT $LN114@ckd64_dasd
  01013	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0101b	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0101f	d1 f8		 sar	 eax, 1
  01021	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv630[rsp], eax
  01028	eb 0b		 jmp	 SHORT $LN115@ckd64_dasd
$LN114@ckd64_dasd:
  0102a	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv630[rsp], 0
$LN115@ckd64_dasd:
  01035	b9 01 00 00 00	 mov	 ecx, 1
  0103a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169945
  01047	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0104c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169946
  01053	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01058	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  01060	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01065	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR tv624[rsp]
  0106c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01070	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR tv630[rsp]
  01077	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0107b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169947
  01082	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169948
  0108e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01093	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01098	41 b9 03 00 00
	00		 mov	 r9d, 3
  0109e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169949
  010a5	ba fa 00 00 00	 mov	 edx, 250		; 000000faH
  010aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169950
  010b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN40@ckd64_dasd:

; 250  :                        filename, "read()", "CKD header incomplete" );
; 251  :             return -1;

  010b7	b8 ff ff ff ff	 mov	 eax, -1
  010bc	e9 91 18 00 00	 jmp	 $LN1@ckd64_dasd
$LN38@ckd64_dasd:

; 252  :         }
; 253  : 
; 254  :         /* Save the serial number */
; 255  :         if (serial[0]) // (override?)

  010c1	b8 01 00 00 00	 mov	 eax, 1
  010c6	48 6b c0 00	 imul	 rax, rax, 0
  010ca	0f b6 84 04 60
	06 00 00	 movzx	 eax, BYTE PTR serial$[rsp+rax]
  010d2	85 c0		 test	 eax, eax
  010d4	74 23		 je	 SHORT $LN41@ckd64_dasd

; 256  :             memcpy( dev->serial, serial, sizeof( dev->serial ));

  010d6	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  010de	48 8d 8c 24 60
	06 00 00	 lea	 rcx, QWORD PTR serial$[rsp]
  010e6	48 8d b8 98 00
	00 00		 lea	 rdi, QWORD PTR [rax+152]
  010ed	48 8b f1	 mov	 rsi, rcx
  010f0	b9 0c 00 00 00	 mov	 ecx, 12
  010f5	f3 a4		 rep movsb
  010f7	eb 21		 jmp	 SHORT $LN42@ckd64_dasd
$LN41@ckd64_dasd:

; 257  :         else
; 258  :             memcpy( dev->serial, devhdr.dh_serial, sizeof( dev->serial ));

  010f9	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01101	48 8d 8c 24 74
	02 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp+20]
  01109	48 8d b8 98 00
	00 00		 lea	 rdi, QWORD PTR [rax+152]
  01110	48 8b f1	 mov	 rsi, rcx
  01113	b9 0c 00 00 00	 mov	 ecx, 12
  01118	f3 a4		 rep movsb
$LN42@ckd64_dasd:

; 259  :         {
; 260  :             static const BYTE nulls[12] = {0};
; 261  :             if (memcmp( dev->serial, nulls, 12 ) == 0)

  0111a	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01122	48 05 98 00 00
	00		 add	 rax, 152		; 00000098H
  01128	41 b8 0c 00 00
	00		 mov	 r8d, 12
  0112e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?nulls@?BL@??ckd64_dasd_init_handler@@9@9
  01135	48 8b c8	 mov	 rcx, rax
  01138	e8 00 00 00 00	 call	 memcmp
  0113d	85 c0		 test	 eax, eax
  0113f	75 16		 jne	 SHORT $LN43@ckd64_dasd

; 262  :                 gen_dasd_serial( dev->serial );

  01141	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01149	48 05 98 00 00
	00		 add	 rax, 152		; 00000098H
  0114f	48 8b c8	 mov	 rcx, rax
  01152	e8 00 00 00 00	 call	 gen_dasd_serial
$LN43@ckd64_dasd:

; 263  :         }
; 264  : 
; 265  :         /* Check the device header identifier */
; 266  :         dev->cckd64 = 1;

  01157	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0115f	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  01166	0c 01		 or	 al, 1
  01168	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01170	88 81 10 13 00
	00		 mov	 BYTE PTR [rcx+4880], al

; 267  :         if (!is_dh_devid_typ( devhdr.dh_devid, CKD64_CMP_OR_NML_TYP ))

  01176	ba 00 00 c0 00	 mov	 edx, 12582912		; 00c00000H
  0117b	48 8d 8c 24 60
	02 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp]
  01183	e8 00 00 00 00	 call	 is_dh_devid_typ
  01188	0f b6 c0	 movzx	 eax, al
  0118b	85 c0		 test	 eax, eax
  0118d	0f 85 4b 01 00
	00		 jne	 $LN44@ckd64_dasd

; 268  :         {
; 269  :             if (is_dh_devid_typ( devhdr.dh_devid, CKD32_CMP_OR_NML_TYP ))

  01193	ba 00 00 00 c0	 mov	 edx, -1073741824	; c0000000H
  01198	48 8d 8c 24 60
	02 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp]
  011a0	e8 00 00 00 00	 call	 is_dh_devid_typ
  011a5	0f b6 c0	 movzx	 eax, al
  011a8	85 c0		 test	 eax, eax
  011aa	74 66		 je	 SHORT $LN45@ckd64_dasd

; 270  :             {
; 271  :                 dev->cckd64 = 0;

  011ac	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  011b4	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  011bb	24 fe		 and	 al, 254			; 000000feH
  011bd	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  011c5	88 81 10 13 00
	00		 mov	 BYTE PTR [rcx+4880], al

; 272  :                 close( dev->fd );

  011cb	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  011d3	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  011d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 273  :                 dev->fd = -1;

  011df	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  011e7	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 274  :                 return ckd_dasd_init_handler( dev, argc, argv );

  011f1	4c 8b 84 24 c0
	07 00 00	 mov	 r8, QWORD PTR argv$[rsp]
  011f9	8b 94 24 b8 07
	00 00		 mov	 edx, DWORD PTR argc$[rsp]
  01200	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01208	e8 00 00 00 00	 call	 ckd_dasd_init_handler
  0120d	e9 40 17 00 00	 jmp	 $LN1@ckd64_dasd
$LN45@ckd64_dasd:

; 275  :             }
; 276  : 
; 277  :             // "%1d:%04X CKD file %s: ckd header invalid"
; 278  :             WRMSG( HHC00406, "E", LCSS_DEVNUM, filename );

  01212	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0121b	74 15		 je	 SHORT $LN116@ckd64_dasd
  0121d	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01225	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01229	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv698[rsp], eax
  01230	eb 0b		 jmp	 SHORT $LN117@ckd64_dasd
$LN116@ckd64_dasd:
  01232	c7 84 24 f4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv698[rsp], 0
$LN117@ckd64_dasd:
  0123d	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01246	74 17		 je	 SHORT $LN118@ckd64_dasd
  01248	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01250	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01254	d1 f8		 sar	 eax, 1
  01256	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv704[rsp], eax
  0125d	eb 0b		 jmp	 SHORT $LN119@ckd64_dasd
$LN118@ckd64_dasd:
  0125f	c7 84 24 f8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv704[rsp], 0
$LN119@ckd64_dasd:
  0126a	b9 01 00 00 00	 mov	 ecx, 1
  0126f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01275	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  0127d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01282	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR tv698[rsp]
  01289	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0128d	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR tv704[rsp]
  01294	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01298	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169956
  0129f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  012a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169957
  012ab	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  012b0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  012b5	41 b9 03 00 00
	00		 mov	 r9d, 3
  012bb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169958
  012c2	ba 16 01 00 00	 mov	 edx, 278		; 00000116H
  012c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169959
  012ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 279  :             return -1;

  012d4	b8 ff ff ff ff	 mov	 eax, -1
  012d9	e9 74 16 00 00	 jmp	 $LN1@ckd64_dasd
$LN44@ckd64_dasd:

; 280  :         }
; 281  : 
; 282  :         if (is_dh_devid_typ( devhdr.dh_devid, CKD_C064_TYP ))

  012de	ba 00 00 40 00	 mov	 edx, 4194304		; 00400000H
  012e3	48 8d 8c 24 60
	02 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp]
  012eb	e8 00 00 00 00	 call	 is_dh_devid_typ
  012f0	0f b6 c0	 movzx	 eax, al
  012f3	85 c0		 test	 eax, eax
  012f5	0f 84 1f 01 00
	00		 je	 $LN46@ckd64_dasd

; 283  :         {
; 284  :             cckd = 1;

  012fb	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR cckd$[rsp], 1

; 285  : 
; 286  :             if (fileseq != 1)

  01306	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR fileseq$[rsp]
  0130e	83 f8 01	 cmp	 eax, 1
  01311	0f 84 03 01 00
	00		 je	 $LN47@ckd64_dasd

; 287  :             {
; 288  :                 // "%1d:%04X %s file %s: only 1 CCKD file allowed"
; 289  :                 WRMSG( HHC00407, "E", LCSS_DEVNUM, CKDTYP( cckd, 1 ), filename );

  01317	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR cckd$[rsp], 0
  0131f	74 11		 je	 SHORT $LN120@ckd64_dasd
  01321	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169962
  01328	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR tv724[rsp], rax
  01330	eb 0f		 jmp	 SHORT $LN121@ckd64_dasd
$LN120@ckd64_dasd:
  01332	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169963
  01339	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR tv724[rsp], rax
$LN121@ckd64_dasd:
  01341	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0134a	74 15		 je	 SHORT $LN122@ckd64_dasd
  0134c	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01354	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01358	89 84 24 fc 00
	00 00		 mov	 DWORD PTR tv729[rsp], eax
  0135f	eb 0b		 jmp	 SHORT $LN123@ckd64_dasd
$LN122@ckd64_dasd:
  01361	c7 84 24 fc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv729[rsp], 0
$LN123@ckd64_dasd:
  0136c	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01375	74 17		 je	 SHORT $LN124@ckd64_dasd
  01377	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0137f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01383	d1 f8		 sar	 eax, 1
  01385	89 84 24 00 01
	00 00		 mov	 DWORD PTR tv735[rsp], eax
  0138c	eb 0b		 jmp	 SHORT $LN125@ckd64_dasd
$LN124@ckd64_dasd:
  0138e	c7 84 24 00 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv735[rsp], 0
$LN125@ckd64_dasd:
  01399	b9 01 00 00 00	 mov	 ecx, 1
  0139e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  013a4	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  013ac	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  013b1	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR tv724[rsp]
  013b9	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  013be	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR tv729[rsp]
  013c5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  013c9	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR tv735[rsp]
  013d0	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  013d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169964
  013db	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  013e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169965
  013e7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  013ec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  013f1	41 b9 03 00 00
	00		 mov	 r9d, 3
  013f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169966
  013fe	ba 21 01 00 00	 mov	 edx, 289		; 00000121H
  01403	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169967
  0140a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 290  :                 return -1;

  01410	b8 ff ff ff ff	 mov	 eax, -1
  01415	e9 38 15 00 00	 jmp	 $LN1@ckd64_dasd
$LN47@ckd64_dasd:
$LN46@ckd64_dasd:

; 291  :             }
; 292  :         }
; 293  : 
; 294  :         if (dev->ckdrdonly)

  0141a	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01422	8b 80 14 13 00
	00		 mov	 eax, DWORD PTR [rax+4884]
  01428	c1 e8 12	 shr	 eax, 18
  0142b	83 e0 01	 and	 eax, 1
  0142e	85 c0		 test	 eax, eax
  01430	0f 84 5a 01 00
	00		 je	 $LN48@ckd64_dasd

; 295  :             if (!dev->quiet)

  01436	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0143e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01444	c1 e8 0c	 shr	 eax, 12
  01447	83 e0 01	 and	 eax, 1
  0144a	85 c0		 test	 eax, eax
  0144c	0f 85 3e 01 00
	00		 jne	 $LN49@ckd64_dasd

; 296  :                 // "%1d:%04X %s file %s: opened r/o%s"
; 297  :                 WRMSG( HHC00476, "I", LCSS_DEVNUM, CKDTYP( cckd, 1 ),

  01452	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0145a	8b 80 14 13 00
	00		 mov	 eax, DWORD PTR [rax+4884]
  01460	c1 e8 14	 shr	 eax, 20
  01463	83 e0 01	 and	 eax, 1
  01466	85 c0		 test	 eax, eax
  01468	74 11		 je	 SHORT $LN126@ckd64_dasd
  0146a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169970
  01471	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR tv758[rsp], rax
  01479	eb 0f		 jmp	 SHORT $LN127@ckd64_dasd
$LN126@ckd64_dasd:
  0147b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169971
  01482	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR tv758[rsp], rax
$LN127@ckd64_dasd:
  0148a	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR cckd$[rsp], 0
  01492	74 11		 je	 SHORT $LN128@ckd64_dasd
  01494	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169972
  0149b	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR tv762[rsp], rax
  014a3	eb 0f		 jmp	 SHORT $LN129@ckd64_dasd
$LN128@ckd64_dasd:
  014a5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169973
  014ac	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR tv762[rsp], rax
$LN129@ckd64_dasd:
  014b4	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  014bd	74 15		 je	 SHORT $LN130@ckd64_dasd
  014bf	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  014c7	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  014cb	89 84 24 04 01
	00 00		 mov	 DWORD PTR tv767[rsp], eax
  014d2	eb 0b		 jmp	 SHORT $LN131@ckd64_dasd
$LN130@ckd64_dasd:
  014d4	c7 84 24 04 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv767[rsp], 0
$LN131@ckd64_dasd:
  014df	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  014e8	74 17		 je	 SHORT $LN132@ckd64_dasd
  014ea	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  014f2	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  014f6	d1 f8		 sar	 eax, 1
  014f8	89 84 24 08 01
	00 00		 mov	 DWORD PTR tv805[rsp], eax
  014ff	eb 0b		 jmp	 SHORT $LN133@ckd64_dasd
$LN132@ckd64_dasd:
  01501	c7 84 24 08 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv805[rsp], 0
$LN133@ckd64_dasd:
  0150c	b9 01 00 00 00	 mov	 ecx, 1
  01511	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01517	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR tv758[rsp]
  0151f	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  01524	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  0152c	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01531	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR tv762[rsp]
  01539	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0153e	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR tv767[rsp]
  01545	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01549	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR tv805[rsp]
  01550	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01554	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169974
  0155b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01560	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169975
  01567	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0156c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01571	41 b9 03 00 00
	00		 mov	 r9d, 3
  01577	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169976
  0157e	ba 2a 01 00 00	 mov	 edx, 298		; 0000012aH
  01583	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169977
  0158a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN49@ckd64_dasd:
$LN48@ckd64_dasd:

; 298  :                     filename, dev->ckdfakewr ? " with fake writing" : "" );
; 299  : 
; 300  :         /* Read the compressed device header */
; 301  :         if (cckd)

  01590	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR cckd$[rsp], 0
  01598	0f 84 22 02 00
	00		 je	 $LN50@ckd64_dasd

; 302  :         {
; 303  :             rc = read (dev->fd, &cdevhdr, CCKD64_DEVHDR_SIZE);

  0159e	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  015a4	48 8d 94 24 60
	04 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  015ac	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  015b4	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  015ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  015c0	89 84 24 8c 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax

; 304  :             if (rc < (int)                CCKD64_DEVHDR_SIZE)

  015c7	81 bc 24 8c 00
	00 00 00 02 00
	00		 cmp	 DWORD PTR rc$[rsp], 512	; 00000200H
  015d2	0f 8d e8 01 00
	00		 jge	 $LN51@ckd64_dasd

; 305  :             {
; 306  :                 if (rc < 0)

  015d8	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  015e0	0f 8d f6 00 00
	00		 jge	 $LN52@ckd64_dasd

; 307  :                 {
; 308  :                     // "%1d:%04X CKD file %s: error in function %s: %s"
; 309  :                     WRMSG( HHC00404, "E", LCSS_DEVNUM,

  015e6	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  015ef	74 15		 je	 SHORT $LN134@ckd64_dasd
  015f1	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  015f9	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  015fd	89 84 24 0c 01
	00 00		 mov	 DWORD PTR tv833[rsp], eax
  01604	eb 0b		 jmp	 SHORT $LN135@ckd64_dasd
$LN134@ckd64_dasd:
  01606	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv833[rsp], 0
$LN135@ckd64_dasd:
  01611	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0161a	74 17		 je	 SHORT $LN136@ckd64_dasd
  0161c	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01624	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01628	d1 f8		 sar	 eax, 1
  0162a	89 84 24 10 01
	00 00		 mov	 DWORD PTR tv839[rsp], eax
  01631	eb 0b		 jmp	 SHORT $LN137@ckd64_dasd
$LN136@ckd64_dasd:
  01633	c7 84 24 10 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv839[rsp], 0
$LN137@ckd64_dasd:
  0163e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  01644	8b 08		 mov	 ecx, DWORD PTR [rax]
  01646	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0164c	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR tv824[rsp], rax
  01654	b9 01 00 00 00	 mov	 ecx, 1
  01659	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0165f	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR tv824[rsp]
  01667	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0166c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169982
  01673	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01678	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  01680	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01685	8b 8c 24 0c 01
	00 00		 mov	 ecx, DWORD PTR tv833[rsp]
  0168c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01690	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR tv839[rsp]
  01697	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0169b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169983
  016a2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  016a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169984
  016ae	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  016b3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  016b8	41 b9 03 00 00
	00		 mov	 r9d, 3
  016be	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169985
  016c5	ba 36 01 00 00	 mov	 edx, 310		; 00000136H
  016ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169986
  016d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 310  :                            filename, "read()", strerror( errno ));
; 311  :                 }

  016d7	e9 da 00 00 00	 jmp	 $LN53@ckd64_dasd
$LN52@ckd64_dasd:

; 312  :                 else
; 313  :                 {
; 314  :                     // "%1d:%04X CKD file %s: error in function %s: %s"
; 315  :                     WRMSG( HHC00404, "E", LCSS_DEVNUM,

  016dc	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  016e5	74 15		 je	 SHORT $LN138@ckd64_dasd
  016e7	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  016ef	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  016f3	89 84 24 14 01
	00 00		 mov	 DWORD PTR tv856[rsp], eax
  016fa	eb 0b		 jmp	 SHORT $LN139@ckd64_dasd
$LN138@ckd64_dasd:
  016fc	c7 84 24 14 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv856[rsp], 0
$LN139@ckd64_dasd:
  01707	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01710	74 17		 je	 SHORT $LN140@ckd64_dasd
  01712	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0171a	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0171e	d1 f8		 sar	 eax, 1
  01720	89 84 24 18 01
	00 00		 mov	 DWORD PTR tv862[rsp], eax
  01727	eb 0b		 jmp	 SHORT $LN141@ckd64_dasd
$LN140@ckd64_dasd:
  01729	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv862[rsp], 0
$LN141@ckd64_dasd:
  01734	b9 01 00 00 00	 mov	 ecx, 1
  01739	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0173f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169987
  01746	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0174b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169988
  01752	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01757	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  0175f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01764	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR tv856[rsp]
  0176b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0176f	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR tv862[rsp]
  01776	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0177a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169989
  01781	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01786	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169990
  0178d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01792	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01797	41 b9 03 00 00
	00		 mov	 r9d, 3
  0179d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169991
  017a4	ba 3c 01 00 00	 mov	 edx, 316		; 0000013cH
  017a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169992
  017b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN53@ckd64_dasd:

; 316  :                            filename, "read()", "CCKD header incomplete" );
; 317  :                 }
; 318  :                 return -1;

  017b6	b8 ff ff ff ff	 mov	 eax, -1
  017bb	e9 92 11 00 00	 jmp	 $LN1@ckd64_dasd
$LN51@ckd64_dasd:
$LN50@ckd64_dasd:

; 319  :             }
; 320  :         }
; 321  : 
; 322  :         /* Extract fields from device header */
; 323  :         FETCH_LE_FW( heads,   devhdr.dh_heads   );

  017c0	48 8d 8c 24 68
	02 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp+8]
  017c8	e8 00 00 00 00	 call	 fetch_fw_noswap
  017cd	8b c8		 mov	 ecx, eax
  017cf	e8 00 00 00 00	 call	 _byteswap_ulong
  017d4	8b c8		 mov	 ecx, eax
  017d6	e8 00 00 00 00	 call	 _byteswap_ulong
  017db	89 84 24 9c 00
	00 00		 mov	 DWORD PTR heads$[rsp], eax

; 324  :         FETCH_LE_FW( trksize, devhdr.dh_trksize );

  017e2	48 8d 8c 24 6c
	02 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp+12]
  017ea	e8 00 00 00 00	 call	 fetch_fw_noswap
  017ef	8b c8		 mov	 ecx, eax
  017f1	e8 00 00 00 00	 call	 _byteswap_ulong
  017f6	8b c8		 mov	 ecx, eax
  017f8	e8 00 00 00 00	 call	 _byteswap_ulong
  017fd	89 84 24 b0 00
	00 00		 mov	 DWORD PTR trksize$[rsp], eax

; 325  :         FETCH_LE_HW( highcyl, devhdr.dh_highcyl );

  01804	48 8d 8c 24 72
	02 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp+18]
  0180c	e8 00 00 00 00	 call	 fetch_hw_noswap
  01811	0f b7 c8	 movzx	 ecx, ax
  01814	e8 00 00 00 00	 call	 _byteswap_ushort
  01819	0f b7 c8	 movzx	 ecx, ax
  0181c	e8 00 00 00 00	 call	 _byteswap_ushort
  01821	0f b7 c0	 movzx	 eax, ax
  01824	89 84 24 90 00
	00 00		 mov	 DWORD PTR highcyl$[rsp], eax

; 326  : 
; 327  :         if (cckd == 0)

  0182b	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR cckd$[rsp], 0
  01833	0f 85 6e 01 00
	00		 jne	 $LN54@ckd64_dasd

; 328  :         {
; 329  :             if (dev->dasdcopy == 0)

  01839	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01841	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01847	c1 e8 0b	 shr	 eax, 11
  0184a	83 e0 01	 and	 eax, 1
  0184d	85 c0		 test	 eax, eax
  0184f	75 6d		 jne	 SHORT $LN56@ckd64_dasd

; 330  :             {
; 331  :                 trks = (int)((statbuf.st_size - CKD_DEVHDR_SIZE) / trksize);

  01851	48 8b 84 24 38
	02 00 00	 mov	 rax, QWORD PTR statbuf$[rsp+24]
  01859	48 2d 00 02 00
	00		 sub	 rax, 512		; 00000200H
  0185f	48 63 8c 24 b0
	00 00 00	 movsxd	 rcx, DWORD PTR trksize$[rsp]
  01867	48 99		 cdq
  01869	48 f7 f9	 idiv	 rcx
  0186c	89 84 24 a0 00
	00 00		 mov	 DWORD PTR trks$[rsp], eax

; 332  :                 cyls = trks / heads;

  01873	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR trks$[rsp]
  0187a	99		 cdq
  0187b	f7 bc 24 9c 00
	00 00		 idiv	 DWORD PTR heads$[rsp]
  01882	89 84 24 94 00
	00 00		 mov	 DWORD PTR cyls$[rsp], eax

; 333  :                 if (fileseq == 1 && highcyl == cyls)

  01889	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR fileseq$[rsp]
  01891	83 f8 01	 cmp	 eax, 1
  01894	75 23		 jne	 SHORT $LN58@ckd64_dasd
  01896	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR cyls$[rsp]
  0189d	39 84 24 90 00
	00 00		 cmp	 DWORD PTR highcyl$[rsp], eax
  018a4	75 13		 jne	 SHORT $LN58@ckd64_dasd

; 334  :                 {
; 335  :                     devhdr.dh_fileseq = 0;

  018a6	c6 84 24 71 02
	00 00 00	 mov	 BYTE PTR devhdr$[rsp+17], 0

; 336  :                     highcyl = 0;

  018ae	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR highcyl$[rsp], 0
$LN58@ckd64_dasd:

; 337  :                 }
; 338  :             }

  018b9	e9 e7 00 00 00	 jmp	 $LN57@ckd64_dasd
$LN56@ckd64_dasd:

; 339  :             else
; 340  :             {
; 341  :                 /*
; 342  :                  * For dasdcopy we get the number of cylinders and tracks from
; 343  :                  * the highcyl in the device header.  The last file will have
; 344  :                  * a sequence number of 0xFF.
; 345  :                  */
; 346  :                 cyls = highcyl - dev->ckdcyls + 1;

  018be	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  018c6	8b 80 b8 12 00
	00		 mov	 eax, DWORD PTR [rax+4792]
  018cc	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR highcyl$[rsp]
  018d3	2b c8		 sub	 ecx, eax
  018d5	8b c1		 mov	 eax, ecx
  018d7	ff c0		 inc	 eax
  018d9	89 84 24 94 00
	00 00		 mov	 DWORD PTR cyls$[rsp], eax

; 347  :                 trks = cyls * heads;

  018e0	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR cyls$[rsp]
  018e7	0f af 84 24 9c
	00 00 00	 imul	 eax, DWORD PTR heads$[rsp]
  018ef	89 84 24 a0 00
	00 00		 mov	 DWORD PTR trks$[rsp], eax

; 348  :                 if (devhdr.dh_fileseq == 0xFF)

  018f6	0f b6 84 24 71
	02 00 00	 movzx	 eax, BYTE PTR devhdr$[rsp+17]
  018fe	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  01903	0f 85 9c 00 00
	00		 jne	 $LN59@ckd64_dasd

; 349  :                 {
; 350  :                     devhdr.dh_fileseq = (fileseq == 1 ? 0 : fileseq);

  01909	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR fileseq$[rsp]
  01911	83 f8 01	 cmp	 eax, 1
  01914	75 0d		 jne	 SHORT $LN142@ckd64_dasd
  01916	c7 84 24 1c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv914[rsp], 0
  01921	eb 0f		 jmp	 SHORT $LN143@ckd64_dasd
$LN142@ckd64_dasd:
  01923	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR fileseq$[rsp]
  0192b	89 84 24 1c 01
	00 00		 mov	 DWORD PTR tv914[rsp], eax
$LN143@ckd64_dasd:
  01932	0f b6 84 24 1c
	01 00 00	 movzx	 eax, BYTE PTR tv914[rsp]
  0193a	88 84 24 71 02
	00 00		 mov	 BYTE PTR devhdr$[rsp+17], al

; 351  :                     highcyl = 0;

  01941	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR highcyl$[rsp], 0

; 352  :                     store_hw( devhdr.dh_highcyl, 0 );

  0194c	33 c9		 xor	 ecx, ecx
  0194e	e8 00 00 00 00	 call	 _byteswap_ushort
  01953	0f b7 d0	 movzx	 edx, ax
  01956	48 8d 8c 24 72
	02 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp+18]
  0195e	e8 00 00 00 00	 call	 store_hw_noswap

; 353  :                     lseek (dev->fd, 0, SEEK_SET);

  01963	45 33 c0	 xor	 r8d, r8d
  01966	33 d2		 xor	 edx, edx
  01968	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01970	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  01976	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64

; 354  :                     rc = write (dev->fd, &devhdr, CKD_DEVHDR_SIZE);

  0197c	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  01982	48 8d 94 24 60
	02 00 00	 lea	 rdx, QWORD PTR devhdr$[rsp]
  0198a	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01992	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  01998	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  0199e	89 84 24 8c 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
$LN59@ckd64_dasd:
$LN57@ckd64_dasd:

; 355  :                 }
; 356  :             }
; 357  :         }

  019a5	eb 38		 jmp	 SHORT $LN55@ckd64_dasd
$LN54@ckd64_dasd:

; 358  :         else
; 359  :         {
; 360  :             FETCH_LE_FW( cyls, cdevhdr.cdh_cyls );

  019a7	48 8d 8c 24 6c
	04 00 00	 lea	 rcx, QWORD PTR cdevhdr$[rsp+12]
  019af	e8 00 00 00 00	 call	 fetch_fw_noswap
  019b4	8b c8		 mov	 ecx, eax
  019b6	e8 00 00 00 00	 call	 _byteswap_ulong
  019bb	8b c8		 mov	 ecx, eax
  019bd	e8 00 00 00 00	 call	 _byteswap_ulong
  019c2	89 84 24 94 00
	00 00		 mov	 DWORD PTR cyls$[rsp], eax

; 361  :             trks = cyls * heads;

  019c9	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR cyls$[rsp]
  019d0	0f af 84 24 9c
	00 00 00	 imul	 eax, DWORD PTR heads$[rsp]
  019d8	89 84 24 a0 00
	00 00		 mov	 DWORD PTR trks$[rsp], eax
$LN55@ckd64_dasd:

; 362  :         }
; 363  : 
; 364  :         /* Check for correct file sequence number */
; 365  :         if (devhdr.dh_fileseq != fileseq
; 366  :             && !(devhdr.dh_fileseq == 0 && fileseq == 1))

  019df	0f b6 84 24 71
	02 00 00	 movzx	 eax, BYTE PTR devhdr$[rsp+17]
  019e7	0f b6 8c 24 80
	00 00 00	 movzx	 ecx, BYTE PTR fileseq$[rsp]
  019ef	3b c1		 cmp	 eax, ecx
  019f1	0f 84 20 01 00
	00		 je	 $LN60@ckd64_dasd
  019f7	0f b6 84 24 71
	02 00 00	 movzx	 eax, BYTE PTR devhdr$[rsp+17]
  019ff	85 c0		 test	 eax, eax
  01a01	75 11		 jne	 SHORT $LN61@ckd64_dasd
  01a03	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR fileseq$[rsp]
  01a0b	83 f8 01	 cmp	 eax, 1
  01a0e	0f 84 03 01 00
	00		 je	 $LN60@ckd64_dasd
$LN61@ckd64_dasd:

; 367  :         {
; 368  :             // "%1d:%04X %s file %s: ckd file out of sequence or bad size"
; 369  :             WRMSG( HHC00408, "E", LCSS_DEVNUM, CKDTYP( cckd, 1 ), filename );

  01a14	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR cckd$[rsp], 0
  01a1c	74 11		 je	 SHORT $LN144@ckd64_dasd
  01a1e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170001
  01a25	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR tv945[rsp], rax
  01a2d	eb 0f		 jmp	 SHORT $LN145@ckd64_dasd
$LN144@ckd64_dasd:
  01a2f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170002
  01a36	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR tv945[rsp], rax
$LN145@ckd64_dasd:
  01a3e	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01a47	74 15		 je	 SHORT $LN146@ckd64_dasd
  01a49	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01a51	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01a55	89 84 24 20 01
	00 00		 mov	 DWORD PTR tv950[rsp], eax
  01a5c	eb 0b		 jmp	 SHORT $LN147@ckd64_dasd
$LN146@ckd64_dasd:
  01a5e	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv950[rsp], 0
$LN147@ckd64_dasd:
  01a69	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01a72	74 17		 je	 SHORT $LN148@ckd64_dasd
  01a74	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01a7c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01a80	d1 f8		 sar	 eax, 1
  01a82	89 84 24 24 01
	00 00		 mov	 DWORD PTR tv956[rsp], eax
  01a89	eb 0b		 jmp	 SHORT $LN149@ckd64_dasd
$LN148@ckd64_dasd:
  01a8b	c7 84 24 24 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv956[rsp], 0
$LN149@ckd64_dasd:
  01a96	b9 01 00 00 00	 mov	 ecx, 1
  01a9b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01aa1	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  01aa9	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01aae	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR tv945[rsp]
  01ab6	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01abb	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR tv950[rsp]
  01ac2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01ac6	8b 8c 24 24 01
	00 00		 mov	 ecx, DWORD PTR tv956[rsp]
  01acd	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01ad1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170003
  01ad8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01add	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170004
  01ae4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01ae9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01aee	41 b9 03 00 00
	00		 mov	 r9d, 3
  01af4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170005
  01afb	ba 71 01 00 00	 mov	 edx, 369		; 00000171H
  01b00	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170006
  01b07	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 370  :             return -1;

  01b0d	b8 ff ff ff ff	 mov	 eax, -1
  01b12	e9 3b 0e 00 00	 jmp	 $LN1@ckd64_dasd
$LN60@ckd64_dasd:

; 371  :         }
; 372  : 
; 373  :         if (devhdr.dh_fileseq > 0)

  01b17	0f b6 84 24 71
	02 00 00	 movzx	 eax, BYTE PTR devhdr$[rsp+17]
  01b1f	85 c0		 test	 eax, eax
  01b21	0f 8e 86 01 00
	00		 jle	 $LN62@ckd64_dasd

; 374  :         {
; 375  :             if (!dev->quiet)

  01b27	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01b2f	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01b35	c1 e8 0c	 shr	 eax, 12
  01b38	83 e0 01	 and	 eax, 1
  01b3b	85 c0		 test	 eax, eax
  01b3d	0f 85 6a 01 00
	00		 jne	 $LN63@ckd64_dasd

; 376  :                 // "%1d:%04X %s file %s: seq %02d cyls %6d-%-6d"
; 377  :                 WRMSG( HHC00409, "I", LCSS_DEVNUM, CKDTYP( cckd, 1 ),

  01b43	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR highcyl$[rsp], 0
  01b4b	7e 10		 jle	 SHORT $LN150@ckd64_dasd
  01b4d	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR highcyl$[rsp]
  01b54	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv1009[rsp], eax
  01b5b	eb 20		 jmp	 SHORT $LN151@ckd64_dasd
$LN150@ckd64_dasd:
  01b5d	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01b65	8b 80 b8 12 00
	00		 mov	 eax, DWORD PTR [rax+4792]
  01b6b	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR cyls$[rsp]
  01b72	8d 44 08 ff	 lea	 eax, DWORD PTR [rax+rcx-1]
  01b76	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv1009[rsp], eax
$LN151@ckd64_dasd:
  01b7d	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR cckd$[rsp], 0
  01b85	74 11		 je	 SHORT $LN152@ckd64_dasd
  01b87	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170009
  01b8e	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR tv1017[rsp], rax
  01b96	eb 0f		 jmp	 SHORT $LN153@ckd64_dasd
$LN152@ckd64_dasd:
  01b98	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170010
  01b9f	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR tv1017[rsp], rax
$LN153@ckd64_dasd:
  01ba7	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01bb0	74 15		 je	 SHORT $LN154@ckd64_dasd
  01bb2	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01bba	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01bbe	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv1022[rsp], eax
  01bc5	eb 0b		 jmp	 SHORT $LN155@ckd64_dasd
$LN154@ckd64_dasd:
  01bc7	c7 84 24 2c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1022[rsp], 0
$LN155@ckd64_dasd:
  01bd2	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01bdb	74 17		 je	 SHORT $LN156@ckd64_dasd
  01bdd	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01be5	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01be9	d1 f8		 sar	 eax, 1
  01beb	89 84 24 30 01
	00 00		 mov	 DWORD PTR tv1028[rsp], eax
  01bf2	eb 0b		 jmp	 SHORT $LN157@ckd64_dasd
$LN156@ckd64_dasd:
  01bf4	c7 84 24 30 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1028[rsp], 0
$LN157@ckd64_dasd:
  01bff	0f b6 84 24 71
	02 00 00	 movzx	 eax, BYTE PTR devhdr$[rsp+17]
  01c07	89 84 24 80 01
	00 00		 mov	 DWORD PTR tv1013[rsp], eax
  01c0e	b9 01 00 00 00	 mov	 ecx, 1
  01c13	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01c19	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR tv1009[rsp]
  01c20	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  01c24	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01c2c	8b 89 b8 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4792]
  01c32	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  01c36	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR tv1013[rsp]
  01c3d	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  01c41	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  01c49	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01c4e	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR tv1017[rsp]
  01c56	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01c5b	8b 8c 24 2c 01
	00 00		 mov	 ecx, DWORD PTR tv1022[rsp]
  01c62	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01c66	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR tv1028[rsp]
  01c6d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01c71	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170011
  01c78	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01c7d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170012
  01c84	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01c89	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01c8e	41 b9 03 00 00
	00		 mov	 r9d, 3
  01c94	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170013
  01c9b	ba 7b 01 00 00	 mov	 edx, 379		; 0000017bH
  01ca0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170014
  01ca7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN63@ckd64_dasd:
$LN62@ckd64_dasd:

; 378  :                        filename, devhdr.dh_fileseq, dev->ckdcyls,
; 379  :                        (highcyl > 0 ? highcyl : dev->ckdcyls + cyls - 1));
; 380  :         }
; 381  : 
; 382  :         /* Save device geometry of first file, or check that device
; 383  :            geometry of subsequent files matches that of first file */
; 384  :         if (fileseq == 1)

  01cad	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR fileseq$[rsp]
  01cb5	83 f8 01	 cmp	 eax, 1
  01cb8	75 2f		 jne	 SHORT $LN64@ckd64_dasd

; 385  :         {
; 386  :             dev->ckdheads = heads;

  01cba	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01cc2	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR heads$[rsp]
  01cc9	89 88 c0 12 00
	00		 mov	 DWORD PTR [rax+4800], ecx

; 387  :             dev->ckdtrksz = trksize;

  01ccf	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01cd7	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR trksize$[rsp]
  01cde	89 88 c4 12 00
	00		 mov	 DWORD PTR [rax+4804], ecx

; 388  :         }

  01ce4	e9 6f 01 00 00	 jmp	 $LN65@ckd64_dasd
$LN64@ckd64_dasd:

; 389  :         else if (heads != dev->ckdheads || trksize != dev->ckdtrksz)

  01ce9	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01cf1	8b 80 c0 12 00
	00		 mov	 eax, DWORD PTR [rax+4800]
  01cf7	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR heads$[rsp], eax
  01cfe	75 1b		 jne	 SHORT $LN67@ckd64_dasd
  01d00	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01d08	8b 80 c4 12 00
	00		 mov	 eax, DWORD PTR [rax+4804]
  01d0e	39 84 24 b0 00
	00 00		 cmp	 DWORD PTR trksize$[rsp], eax
  01d15	0f 84 3d 01 00
	00		 je	 $LN66@ckd64_dasd
$LN67@ckd64_dasd:

; 390  :         {
; 391  :             // "%1d:%04X %s file %s: found heads %d trklen %d, expected heads %d trklen %d"
; 392  :             WRMSG( HHC00410, "E", LCSS_DEVNUM, CKDTYP( cckd, 1 ),

  01d1b	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR cckd$[rsp], 0
  01d23	74 11		 je	 SHORT $LN158@ckd64_dasd
  01d25	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170019
  01d2c	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR tv1055[rsp], rax
  01d34	eb 0f		 jmp	 SHORT $LN159@ckd64_dasd
$LN158@ckd64_dasd:
  01d36	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170020
  01d3d	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR tv1055[rsp], rax
$LN159@ckd64_dasd:
  01d45	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01d4e	74 15		 je	 SHORT $LN160@ckd64_dasd
  01d50	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01d58	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01d5c	89 84 24 34 01
	00 00		 mov	 DWORD PTR tv1092[rsp], eax
  01d63	eb 0b		 jmp	 SHORT $LN161@ckd64_dasd
$LN160@ckd64_dasd:
  01d65	c7 84 24 34 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1092[rsp], 0
$LN161@ckd64_dasd:
  01d70	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01d79	74 17		 je	 SHORT $LN162@ckd64_dasd
  01d7b	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01d83	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01d87	d1 f8		 sar	 eax, 1
  01d89	89 84 24 38 01
	00 00		 mov	 DWORD PTR tv1098[rsp], eax
  01d90	eb 0b		 jmp	 SHORT $LN163@ckd64_dasd
$LN162@ckd64_dasd:
  01d92	c7 84 24 38 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1098[rsp], 0
$LN163@ckd64_dasd:
  01d9d	b9 01 00 00 00	 mov	 ecx, 1
  01da2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01da8	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01db0	8b 89 c4 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4804]
  01db6	89 4c 24 70	 mov	 DWORD PTR [rsp+112], ecx
  01dba	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01dc2	8b 89 c0 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4800]
  01dc8	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  01dcc	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR trksize$[rsp]
  01dd3	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  01dd7	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR heads$[rsp]
  01dde	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  01de2	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  01dea	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01def	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR tv1055[rsp]
  01df7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01dfc	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR tv1092[rsp]
  01e03	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01e07	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR tv1098[rsp]
  01e0e	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01e12	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170021
  01e19	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01e1e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170022
  01e25	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01e2a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01e2f	41 b9 03 00 00
	00		 mov	 r9d, 3
  01e35	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170023
  01e3c	ba 89 01 00 00	 mov	 edx, 393		; 00000189H
  01e41	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170024
  01e48	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 393  :                    filename, heads, trksize, dev->ckdheads, dev->ckdtrksz );
; 394  :             return -1;

  01e4e	b8 ff ff ff ff	 mov	 eax, -1
  01e53	e9 fa 0a 00 00	 jmp	 $LN1@ckd64_dasd
$LN66@ckd64_dasd:
$LN65@ckd64_dasd:

; 395  :         }
; 396  : 
; 397  :         /* Consistency check device header */
; 398  :         if (cckd == 0 && dev->dasdcopy == 0 && (cyls * heads != trks

  01e58	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR cckd$[rsp], 0
  01e60	0f 85 8f 01 00
	00		 jne	 $LN68@ckd64_dasd
  01e66	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01e6e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01e74	c1 e8 0b	 shr	 eax, 11
  01e77	83 e0 01	 and	 eax, 1
  01e7a	85 c0		 test	 eax, eax
  01e7c	0f 85 73 01 00
	00		 jne	 $LN68@ckd64_dasd
  01e82	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR cyls$[rsp]
  01e89	0f af 84 24 9c
	00 00 00	 imul	 eax, DWORD PTR heads$[rsp]
  01e91	3b 84 24 a0 00
	00 00		 cmp	 eax, DWORD PTR trks$[rsp]
  01e98	75 58		 jne	 SHORT $LN69@ckd64_dasd
  01e9a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR trks$[rsp]
  01ea2	48 63 8c 24 b0
	00 00 00	 movsxd	 rcx, DWORD PTR trksize$[rsp]
  01eaa	48 0f af c1	 imul	 rax, rcx
  01eae	48 05 00 02 00
	00		 add	 rax, 512		; 00000200H
  01eb4	48 3b 84 24 38
	02 00 00	 cmp	 rax, QWORD PTR statbuf$[rsp+24]
  01ebc	75 34		 jne	 SHORT $LN69@ckd64_dasd
  01ebe	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR highcyl$[rsp], 0
  01ec6	0f 84 29 01 00
	00		 je	 $LN68@ckd64_dasd
  01ecc	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01ed4	8b 80 b8 12 00
	00		 mov	 eax, DWORD PTR [rax+4792]
  01eda	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR cyls$[rsp]
  01ee1	8d 44 08 ff	 lea	 eax, DWORD PTR [rax+rcx-1]
  01ee5	39 84 24 90 00
	00 00		 cmp	 DWORD PTR highcyl$[rsp], eax
  01eec	0f 84 03 01 00
	00		 je	 $LN68@ckd64_dasd
$LN69@ckd64_dasd:

; 399  :             || ((off_t)trks * trksize) + CKD_DEVHDR_SIZE
; 400  :                             != statbuf.st_size
; 401  :             || (highcyl != 0 && highcyl != dev->ckdcyls + cyls - 1)))
; 402  :         {
; 403  :             // "%1d:%04X %s file %s: ckd header inconsistent with file size"
; 404  :             WRMSG( HHC00411, "E", LCSS_DEVNUM, CKDTYP( cckd, 1 ), filename );

  01ef2	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR cckd$[rsp], 0
  01efa	74 11		 je	 SHORT $LN164@ckd64_dasd
  01efc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170027
  01f03	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR tv1128[rsp], rax
  01f0b	eb 0f		 jmp	 SHORT $LN165@ckd64_dasd
$LN164@ckd64_dasd:
  01f0d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170028
  01f14	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR tv1128[rsp], rax
$LN165@ckd64_dasd:
  01f1c	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01f25	74 15		 je	 SHORT $LN166@ckd64_dasd
  01f27	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01f2f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01f33	89 84 24 3c 01
	00 00		 mov	 DWORD PTR tv1133[rsp], eax
  01f3a	eb 0b		 jmp	 SHORT $LN167@ckd64_dasd
$LN166@ckd64_dasd:
  01f3c	c7 84 24 3c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1133[rsp], 0
$LN167@ckd64_dasd:
  01f47	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01f50	74 17		 je	 SHORT $LN168@ckd64_dasd
  01f52	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01f5a	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01f5e	d1 f8		 sar	 eax, 1
  01f60	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv1139[rsp], eax
  01f67	eb 0b		 jmp	 SHORT $LN169@ckd64_dasd
$LN168@ckd64_dasd:
  01f69	c7 84 24 40 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1139[rsp], 0
$LN169@ckd64_dasd:
  01f74	b9 01 00 00 00	 mov	 ecx, 1
  01f79	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01f7f	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  01f87	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01f8c	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR tv1128[rsp]
  01f94	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01f99	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR tv1133[rsp]
  01fa0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01fa4	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR tv1139[rsp]
  01fab	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01faf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170029
  01fb6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01fbb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170030
  01fc2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01fc7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01fcc	41 b9 03 00 00
	00		 mov	 r9d, 3
  01fd2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170031
  01fd9	ba 94 01 00 00	 mov	 edx, 404		; 00000194H
  01fde	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170032
  01fe5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 405  :             return -1;

  01feb	b8 ff ff ff ff	 mov	 eax, -1
  01ff0	e9 5d 09 00 00	 jmp	 $LN1@ckd64_dasd
$LN68@ckd64_dasd:

; 406  :         }
; 407  : 
; 408  :         /* Check for correct high cylinder number */
; 409  :         if (highcyl != 0 && highcyl != dev->ckdcyls + cyls - 1)

  01ff5	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR highcyl$[rsp], 0
  01ffd	0f 84 29 01 00
	00		 je	 $LN70@ckd64_dasd
  02003	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0200b	8b 80 b8 12 00
	00		 mov	 eax, DWORD PTR [rax+4792]
  02011	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR cyls$[rsp]
  02018	8d 44 08 ff	 lea	 eax, DWORD PTR [rax+rcx-1]
  0201c	39 84 24 90 00
	00 00		 cmp	 DWORD PTR highcyl$[rsp], eax
  02023	0f 84 03 01 00
	00		 je	 $LN70@ckd64_dasd

; 410  :         {
; 411  :             // "%1d:%04X %s file %s: ckd header high cylinder incorrect"
; 412  :             WRMSG( HHC00412, "E", LCSS_DEVNUM, CKDTYP( cckd, 1 ), filename );

  02029	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR cckd$[rsp], 0
  02031	74 11		 je	 SHORT $LN170@ckd64_dasd
  02033	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170034
  0203a	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR tv1157[rsp], rax
  02042	eb 0f		 jmp	 SHORT $LN171@ckd64_dasd
$LN170@ckd64_dasd:
  02044	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170035
  0204b	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR tv1157[rsp], rax
$LN171@ckd64_dasd:
  02053	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0205c	74 15		 je	 SHORT $LN172@ckd64_dasd
  0205e	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02066	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0206a	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv1162[rsp], eax
  02071	eb 0b		 jmp	 SHORT $LN173@ckd64_dasd
$LN172@ckd64_dasd:
  02073	c7 84 24 44 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1162[rsp], 0
$LN173@ckd64_dasd:
  0207e	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02087	74 17		 je	 SHORT $LN174@ckd64_dasd
  02089	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02091	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02095	d1 f8		 sar	 eax, 1
  02097	89 84 24 48 01
	00 00		 mov	 DWORD PTR tv1168[rsp], eax
  0209e	eb 0b		 jmp	 SHORT $LN175@ckd64_dasd
$LN174@ckd64_dasd:
  020a0	c7 84 24 48 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1168[rsp], 0
$LN175@ckd64_dasd:
  020ab	b9 01 00 00 00	 mov	 ecx, 1
  020b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  020b6	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  020be	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  020c3	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR tv1157[rsp]
  020cb	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  020d0	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR tv1162[rsp]
  020d7	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  020db	8b 8c 24 48 01
	00 00		 mov	 ecx, DWORD PTR tv1168[rsp]
  020e2	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  020e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170036
  020ed	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  020f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170037
  020f9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  020fe	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02103	41 b9 03 00 00
	00		 mov	 r9d, 3
  02109	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170038
  02110	ba 9c 01 00 00	 mov	 edx, 412		; 0000019cH
  02115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170039
  0211c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 413  :             return -1;

  02122	b8 ff ff ff ff	 mov	 eax, -1
  02127	e9 26 08 00 00	 jmp	 $LN1@ckd64_dasd
$LN70@ckd64_dasd:

; 414  :         }
; 415  : 
; 416  :         /* Accumulate total volume size */
; 417  :         dev->ckdtrks += trks;

  0212c	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02134	8b 80 bc 12 00
	00		 mov	 eax, DWORD PTR [rax+4796]
  0213a	03 84 24 a0 00
	00 00		 add	 eax, DWORD PTR trks$[rsp]
  02141	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02149	89 81 bc 12 00
	00		 mov	 DWORD PTR [rcx+4796], eax

; 418  :         dev->ckdcyls += cyls;

  0214f	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02157	8b 80 b8 12 00
	00		 mov	 eax, DWORD PTR [rax+4792]
  0215d	03 84 24 94 00
	00 00		 add	 eax, DWORD PTR cyls$[rsp]
  02164	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0216c	89 81 b8 12 00
	00		 mov	 DWORD PTR [rcx+4792], eax

; 419  : 
; 420  :         /* Save file descriptor and high track number */
; 421  :         dev->ckdfd[fileseq-1] = dev->fd;

  02172	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR fileseq$[rsp]
  0217a	ff c8		 dec	 eax
  0217c	48 98		 cdqe
  0217e	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02186	48 8b 94 24 b0
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0218e	8b 92 ac 01 00
	00		 mov	 edx, DWORD PTR [rdx+428]
  02194	89 94 81 c8 11
	00 00		 mov	 DWORD PTR [rcx+rax*4+4552], edx

; 422  :         dev->ckdhitrk[fileseq-1] = dev->ckdtrks;

  0219b	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR fileseq$[rsp]
  021a3	ff c8		 dec	 eax
  021a5	48 98		 cdqe
  021a7	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  021af	48 8b 94 24 b0
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  021b7	8b 92 bc 12 00
	00		 mov	 edx, DWORD PTR [rdx+4796]
  021bd	89 94 81 34 12
	00 00		 mov	 DWORD PTR [rcx+rax*4+4660], edx

; 423  :         dev->ckdnumfd = fileseq;

  021c4	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR fileseq$[rsp]
  021cc	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  021d4	89 81 c4 11 00
	00		 mov	 DWORD PTR [rcx+4548], eax

; 424  : 
; 425  :         /* Exit loop if this is the last file */
; 426  :         if (highcyl == 0) break;

  021da	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR highcyl$[rsp], 0
  021e2	75 05		 jne	 SHORT $LN71@ckd64_dasd
  021e4	e9 6b 01 00 00	 jmp	 $LN6@ckd64_dasd
$LN71@ckd64_dasd:

; 427  : 
; 428  :         /* Increment the file sequence number */
; 429  :         fileseq++;

  021e9	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR fileseq$[rsp]
  021f1	fe c0		 inc	 al
  021f3	88 84 24 80 00
	00 00		 mov	 BYTE PTR fileseq$[rsp], al

; 430  : 
; 431  :         /* Alter the file name suffix ready for the next file */
; 432  :         if ( fileseq <= 9 )

  021fa	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR fileseq$[rsp]
  02202	83 f8 09	 cmp	 eax, 9
  02205	7f 17		 jg	 SHORT $LN72@ckd64_dasd

; 433  :             *sfxptr = '0' + fileseq;

  02207	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR fileseq$[rsp]
  0220f	83 c0 30	 add	 eax, 48			; 00000030H
  02212	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR sfxptr$[rsp]
  0221a	88 01		 mov	 BYTE PTR [rcx], al
  0221c	eb 15		 jmp	 SHORT $LN73@ckd64_dasd
$LN72@ckd64_dasd:

; 434  :         else
; 435  :             *sfxptr = 'A' - 10 + fileseq;

  0221e	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR fileseq$[rsp]
  02226	83 c0 37	 add	 eax, 55			; 00000037H
  02229	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR sfxptr$[rsp]
  02231	88 01		 mov	 BYTE PTR [rcx], al
$LN73@ckd64_dasd:

; 436  : 
; 437  :         /* Check that maximum files has not been exceeded */
; 438  :         if (fileseq > CKD_MAXFILES)

  02233	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR fileseq$[rsp]
  0223b	83 f8 1b	 cmp	 eax, 27
  0223e	0f 8e 0b 01 00
	00		 jle	 $LN74@ckd64_dasd

; 439  :         {
; 440  :             // "%1d:%04X %s file %s: maximum CKD files exceeded: %d"
; 441  :             WRMSG( HHC00413, "E", LCSS_DEVNUM, CKDTYP( cckd, 1 ), filename, CKD_MAXFILES );

  02244	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR cckd$[rsp], 0
  0224c	74 11		 je	 SHORT $LN176@ckd64_dasd
  0224e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170044
  02255	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv1216[rsp], rax
  0225d	eb 0f		 jmp	 SHORT $LN177@ckd64_dasd
$LN176@ckd64_dasd:
  0225f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170045
  02266	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv1216[rsp], rax
$LN177@ckd64_dasd:
  0226e	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02277	74 15		 je	 SHORT $LN178@ckd64_dasd
  02279	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02281	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02285	89 84 24 4c 01
	00 00		 mov	 DWORD PTR tv1221[rsp], eax
  0228c	eb 0b		 jmp	 SHORT $LN179@ckd64_dasd
$LN178@ckd64_dasd:
  0228e	c7 84 24 4c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1221[rsp], 0
$LN179@ckd64_dasd:
  02299	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  022a2	74 17		 je	 SHORT $LN180@ckd64_dasd
  022a4	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  022ac	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  022b0	d1 f8		 sar	 eax, 1
  022b2	89 84 24 50 01
	00 00		 mov	 DWORD PTR tv1227[rsp], eax
  022b9	eb 0b		 jmp	 SHORT $LN181@ckd64_dasd
$LN180@ckd64_dasd:
  022bb	c7 84 24 50 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1227[rsp], 0
$LN181@ckd64_dasd:
  022c6	b9 01 00 00 00	 mov	 ecx, 1
  022cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  022d1	c7 44 24 58 1b
	00 00 00	 mov	 DWORD PTR [rsp+88], 27
  022d9	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  022e1	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  022e6	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR tv1216[rsp]
  022ee	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  022f3	8b 8c 24 4c 01
	00 00		 mov	 ecx, DWORD PTR tv1221[rsp]
  022fa	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  022fe	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR tv1227[rsp]
  02305	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02309	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170046
  02310	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02315	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170047
  0231c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02321	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02326	41 b9 03 00 00
	00		 mov	 r9d, 3
  0232c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170048
  02333	ba b9 01 00 00	 mov	 edx, 441		; 000001b9H
  02338	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170049
  0233f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 442  :             return -1;

  02345	b8 ff ff ff ff	 mov	 eax, -1
  0234a	e9 03 06 00 00	 jmp	 $LN1@ckd64_dasd
$LN74@ckd64_dasd:

; 443  :         }
; 444  : 
; 445  :     } /* end for(fileseq) */

  0234f	e9 57 e7 ff ff	 jmp	 $LN5@ckd64_dasd
$LN6@ckd64_dasd:

; 446  : 
; 447  :     /* Restore the last character of the file name */
; 448  :     *sfxptr = sfxchar;

  02354	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR sfxptr$[rsp]
  0235c	0f b6 8c 24 98
	00 00 00	 movzx	 ecx, BYTE PTR sfxchar$[rsp]
  02364	88 08		 mov	 BYTE PTR [rax], cl

; 449  : 
; 450  :     /* Locate the CKD dasd table entry */
; 451  :     dev->ckdtab = dasd_lookup (DASD_CKDDEV, NULL, dev->devtype, dev->ckdcyls);

  02366	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0236e	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  02372	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0237a	44 8b 89 b8 12
	00 00		 mov	 r9d, DWORD PTR [rcx+4792]
  02381	44 8b c0	 mov	 r8d, eax
  02384	33 d2		 xor	 edx, edx
  02386	b9 01 00 00 00	 mov	 ecx, 1
  0238b	e8 00 00 00 00	 call	 dasd_lookup
  02390	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02398	48 89 81 a0 12
	00 00		 mov	 QWORD PTR [rcx+4768], rax

; 452  :     if (dev->ckdtab == NULL)

  0239f	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  023a7	48 83 b8 a0 12
	00 00 00	 cmp	 QWORD PTR [rax+4768], 0
  023af	0f 85 ea 00 00
	00		 jne	 $LN75@ckd64_dasd

; 453  :     {
; 454  :         // "%1d:%04X CKD file %s: device type %4.4X not found in dasd table"
; 455  :         WRMSG( HHC00415, "E", LCSS_DEVNUM,

  023b5	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  023be	74 15		 je	 SHORT $LN182@ckd64_dasd
  023c0	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  023c8	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  023cc	89 84 24 54 01
	00 00		 mov	 DWORD PTR tv1256[rsp], eax
  023d3	eb 0b		 jmp	 SHORT $LN183@ckd64_dasd
$LN182@ckd64_dasd:
  023d5	c7 84 24 54 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1256[rsp], 0
$LN183@ckd64_dasd:
  023e0	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  023e9	74 17		 je	 SHORT $LN184@ckd64_dasd
  023eb	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  023f3	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  023f7	d1 f8		 sar	 eax, 1
  023f9	89 84 24 58 01
	00 00		 mov	 DWORD PTR tv1262[rsp], eax
  02400	eb 0b		 jmp	 SHORT $LN185@ckd64_dasd
$LN184@ckd64_dasd:
  02402	c7 84 24 58 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1262[rsp], 0
$LN185@ckd64_dasd:
  0240d	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02415	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  02419	89 84 24 78 01
	00 00		 mov	 DWORD PTR tv1250[rsp], eax
  02420	b9 01 00 00 00	 mov	 ecx, 1
  02425	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0242b	8b 8c 24 78 01
	00 00		 mov	 ecx, DWORD PTR tv1250[rsp]
  02432	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  02436	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  0243e	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02443	8b 8c 24 54 01
	00 00		 mov	 ecx, DWORD PTR tv1256[rsp]
  0244a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0244e	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR tv1262[rsp]
  02455	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02459	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170051
  02460	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02465	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170052
  0246c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02471	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02476	41 b9 03 00 00
	00		 mov	 r9d, 3
  0247c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170053
  02483	ba c8 01 00 00	 mov	 edx, 456		; 000001c8H
  02488	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170054
  0248f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 456  :                filename, dev->devtype );
; 457  :         return -1;

  02495	b8 ff ff ff ff	 mov	 eax, -1
  0249a	e9 b3 04 00 00	 jmp	 $LN1@ckd64_dasd
$LN75@ckd64_dasd:

; 458  :     }
; 459  : 
; 460  :     /* Log the device geometry */
; 461  :     if (!dev->quiet)

  0249f	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  024a7	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  024ad	c1 e8 0c	 shr	 eax, 12
  024b0	83 e0 01	 and	 eax, 1
  024b3	85 c0		 test	 eax, eax
  024b5	0f 85 68 01 00
	00		 jne	 $LN76@ckd64_dasd

; 462  :         // "%1d:%04X %s file %s: model %s cyls %d heads %d tracks %d trklen %d"
; 463  :         WRMSG( HHC00470, "I", LCSS_DEVNUM, CKDTYP( cckd, 1 ), filename, dev->ckdtab->name,

  024bb	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR cckd$[rsp], 0
  024c3	74 11		 je	 SHORT $LN186@ckd64_dasd
  024c5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170056
  024cc	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv1290[rsp], rax
  024d4	eb 0f		 jmp	 SHORT $LN187@ckd64_dasd
$LN186@ckd64_dasd:
  024d6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170057
  024dd	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv1290[rsp], rax
$LN187@ckd64_dasd:
  024e5	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  024ee	74 15		 je	 SHORT $LN188@ckd64_dasd
  024f0	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  024f8	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  024fc	89 84 24 5c 01
	00 00		 mov	 DWORD PTR tv1295[rsp], eax
  02503	eb 0b		 jmp	 SHORT $LN189@ckd64_dasd
$LN188@ckd64_dasd:
  02505	c7 84 24 5c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1295[rsp], 0
$LN189@ckd64_dasd:
  02510	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02519	74 17		 je	 SHORT $LN190@ckd64_dasd
  0251b	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02523	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02527	d1 f8		 sar	 eax, 1
  02529	89 84 24 60 01
	00 00		 mov	 DWORD PTR tv1301[rsp], eax
  02530	eb 0b		 jmp	 SHORT $LN191@ckd64_dasd
$LN190@ckd64_dasd:
  02532	c7 84 24 60 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1301[rsp], 0
$LN191@ckd64_dasd:
  0253d	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02545	48 8b 80 a0 12
	00 00		 mov	 rax, QWORD PTR [rax+4768]
  0254c	48 89 84 24 18
	02 00 00	 mov	 QWORD PTR tv1434[rsp], rax
  02554	b9 01 00 00 00	 mov	 ecx, 1
  02559	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0255f	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02567	8b 89 c4 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4804]
  0256d	89 4c 24 78	 mov	 DWORD PTR [rsp+120], ecx
  02571	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02579	8b 89 bc 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4796]
  0257f	89 4c 24 70	 mov	 DWORD PTR [rsp+112], ecx
  02583	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0258b	8b 89 c0 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4800]
  02591	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  02595	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0259d	8b 89 b8 12 00
	00		 mov	 ecx, DWORD PTR [rcx+4792]
  025a3	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  025a7	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR tv1434[rsp]
  025af	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  025b2	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  025b7	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  025bf	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  025c4	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR tv1290[rsp]
  025cc	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  025d1	8b 8c 24 5c 01
	00 00		 mov	 ecx, DWORD PTR tv1295[rsp]
  025d8	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  025dc	8b 8c 24 60 01
	00 00		 mov	 ecx, DWORD PTR tv1301[rsp]
  025e3	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  025e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170058
  025ee	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  025f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170059
  025fa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  025ff	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02604	41 b9 03 00 00
	00		 mov	 r9d, 3
  0260a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170060
  02611	ba d0 01 00 00	 mov	 edx, 464		; 000001d0H
  02616	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170061
  0261d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN76@ckd64_dasd:

; 464  :                dev->ckdcyls, dev->ckdheads, dev->ckdtrks, dev->ckdtrksz );
; 465  : 
; 466  :     /* Locate the CKD control unit dasd table entry */
; 467  :     dev->ckdcu = dasd_lookup (DASD_CKDCU, cu ? cu : dev->ckdtab->cu, 0, 0);

  02623	48 83 bc 24 70
	01 00 00 00	 cmp	 QWORD PTR cu$[rsp], 0
  0262c	74 12		 je	 SHORT $LN192@ckd64_dasd
  0262e	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR cu$[rsp]
  02636	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR tv1351[rsp], rax
  0263e	eb 1b		 jmp	 SHORT $LN193@ckd64_dasd
$LN192@ckd64_dasd:
  02640	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02648	48 8b 80 a0 12
	00 00		 mov	 rax, QWORD PTR [rax+4768]
  0264f	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  02653	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR tv1351[rsp], rax
$LN193@ckd64_dasd:
  0265b	45 33 c9	 xor	 r9d, r9d
  0265e	45 33 c0	 xor	 r8d, r8d
  02661	48 8b 94 24 d8
	01 00 00	 mov	 rdx, QWORD PTR tv1351[rsp]
  02669	b9 02 00 00 00	 mov	 ecx, 2
  0266e	e8 00 00 00 00	 call	 dasd_lookup
  02673	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0267b	48 89 81 a8 12
	00 00		 mov	 QWORD PTR [rcx+4776], rax

; 468  :     if (dev->ckdcu == NULL)

  02682	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0268a	48 83 b8 a8 12
	00 00 00	 cmp	 QWORD PTR [rax+4776], 0
  02692	0f 85 48 01 00
	00		 jne	 $LN77@ckd64_dasd

; 469  :     {
; 470  :         // "%1d:%04X %s file %s: control unit %s not found in dasd table"
; 471  :         WRMSG( HHC00416, "E", LCSS_DEVNUM, CKDTYP( cckd, 1 ),

  02698	48 83 bc 24 70
	01 00 00 00	 cmp	 QWORD PTR cu$[rsp], 0
  026a1	74 12		 je	 SHORT $LN194@ckd64_dasd
  026a3	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR cu$[rsp]
  026ab	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR tv1359[rsp], rax
  026b3	eb 1b		 jmp	 SHORT $LN195@ckd64_dasd
$LN194@ckd64_dasd:
  026b5	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  026bd	48 8b 80 a0 12
	00 00		 mov	 rax, QWORD PTR [rax+4768]
  026c4	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  026c8	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR tv1359[rsp], rax
$LN195@ckd64_dasd:
  026d0	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR cckd$[rsp], 0
  026d8	74 11		 je	 SHORT $LN196@ckd64_dasd
  026da	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170063
  026e1	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR tv1363[rsp], rax
  026e9	eb 0f		 jmp	 SHORT $LN197@ckd64_dasd
$LN196@ckd64_dasd:
  026eb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170064
  026f2	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR tv1363[rsp], rax
$LN197@ckd64_dasd:
  026fa	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02703	74 15		 je	 SHORT $LN198@ckd64_dasd
  02705	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0270d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02711	89 84 24 64 01
	00 00		 mov	 DWORD PTR tv1368[rsp], eax
  02718	eb 0b		 jmp	 SHORT $LN199@ckd64_dasd
$LN198@ckd64_dasd:
  0271a	c7 84 24 64 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1368[rsp], 0
$LN199@ckd64_dasd:
  02725	48 83 bc 24 b0
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0272e	74 17		 je	 SHORT $LN200@ckd64_dasd
  02730	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02738	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0273c	d1 f8		 sar	 eax, 1
  0273e	89 84 24 68 01
	00 00		 mov	 DWORD PTR tv1374[rsp], eax
  02745	eb 0b		 jmp	 SHORT $LN201@ckd64_dasd
$LN200@ckd64_dasd:
  02747	c7 84 24 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1374[rsp], 0
$LN201@ckd64_dasd:
  02752	b9 01 00 00 00	 mov	 ecx, 1
  02757	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0275d	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR tv1359[rsp]
  02765	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0276a	48 8d 8c 24 70
	06 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  02772	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  02777	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR tv1363[rsp]
  0277f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02784	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR tv1368[rsp]
  0278b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0278f	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR tv1374[rsp]
  02796	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0279a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170065
  027a1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  027a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170066
  027ad	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  027b2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  027b7	41 b9 03 00 00
	00		 mov	 r9d, 3
  027bd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170067
  027c4	ba d8 01 00 00	 mov	 edx, 472		; 000001d8H
  027c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170068
  027d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 472  :                filename, cu ? cu : dev->ckdtab->cu );
; 473  :         return -1;

  027d6	b8 ff ff ff ff	 mov	 eax, -1
  027db	e9 72 01 00 00	 jmp	 $LN1@ckd64_dasd
$LN77@ckd64_dasd:

; 474  :     }
; 475  : 
; 476  :     /* Set number of sense bytes according to controller specification */
; 477  :     dev->numsense = dev->ckdcu->senselength;

  027e0	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  027e8	48 8b 80 a8 12
	00 00		 mov	 rax, QWORD PTR [rax+4776]
  027ef	0f b6 40 34	 movzx	 eax, BYTE PTR [rax+52]
  027f3	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  027fb	89 81 60 03 00
	00		 mov	 DWORD PTR [rcx+864], eax

; 478  : 
; 479  :     /* Set flag bit if 3990 controller */
; 480  :     if (dev->ckdcu->devt == 0x3990)

  02801	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02809	48 8b 80 a8 12
	00 00		 mov	 rax, QWORD PTR [rax+4776]
  02810	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  02814	3d 90 39 00 00	 cmp	 eax, 14736		; 00003990H
  02819	75 1f		 jne	 SHORT $LN78@ckd64_dasd

; 481  :         dev->ckd3990 = 1;

  0281b	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02823	8b 80 14 13 00
	00		 mov	 eax, DWORD PTR [rax+4884]
  02829	83 c8 01	 or	 eax, 1
  0282c	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02834	89 81 14 13 00
	00		 mov	 DWORD PTR [rcx+4884], eax
$LN78@ckd64_dasd:

; 482  : 
; 483  :     /* Build the dh_devid area */
; 484  :     dev->numdevid = dasd_build_ckd_devid (dev->ckdtab, dev->ckdcu,

  0283a	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02842	48 05 68 04 00
	00		 add	 rax, 1128		; 00000468H
  02848	4c 8b c0	 mov	 r8, rax
  0284b	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02853	48 8b 90 a8 12
	00 00		 mov	 rdx, QWORD PTR [rax+4776]
  0285a	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02862	48 8b 88 a0 12
	00 00		 mov	 rcx, QWORD PTR [rax+4768]
  02869	e8 00 00 00 00	 call	 dasd_build_ckd_devid
  0286e	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02876	89 81 64 04 00
	00		 mov	 DWORD PTR [rcx+1124], eax

; 485  :                                           (BYTE *)&dev->devid);
; 486  : 
; 487  :     /* Build the devchar area */
; 488  :     dev->numdevchar = dasd_build_ckd_devchar (dev->ckdtab, dev->ckdcu,

  0287c	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02884	48 05 6c 05 00
	00		 add	 rax, 1388		; 0000056cH
  0288a	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02892	44 8b 89 b8 12
	00 00		 mov	 r9d, DWORD PTR [rcx+4792]
  02899	4c 8b c0	 mov	 r8, rax
  0289c	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  028a4	48 8b 90 a8 12
	00 00		 mov	 rdx, QWORD PTR [rax+4776]
  028ab	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  028b3	48 8b 88 a0 12
	00 00		 mov	 rcx, QWORD PTR [rax+4768]
  028ba	e8 00 00 00 00	 call	 dasd_build_ckd_devchar
  028bf	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  028c7	89 81 68 05 00
	00		 mov	 DWORD PTR [rcx+1384], eax

; 489  :                                   (BYTE *)&dev->devchar, dev->ckdcyls);
; 490  : 
; 491  :     /* Clear the DPA */
; 492  :     memset(dev->pgid, 0, sizeof(dev->pgid));

  028cd	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  028d5	48 05 ad 05 00
	00		 add	 rax, 1453		; 000005adH
  028db	48 8b f8	 mov	 rdi, rax
  028de	33 c0		 xor	 eax, eax
  028e0	b9 0b 00 00 00	 mov	 ecx, 11
  028e5	f3 aa		 rep stosb

; 493  : 
; 494  :     /* Activate I/O tracing */
; 495  : //  dev->ccwtrace = 1;
; 496  : 
; 497  :     /* Request the channel to merge data chained write CCWs into
; 498  :        a single buffer before passing data to the device handler */
; 499  :     dev->cdwmerge = 1;

  028e7	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  028ef	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  028f5	0f ba e8 10	 bts	 eax, 16
  028f9	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02901	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 500  : 
; 501  :     /* default for device cache is on */
; 502  :     dev->devcache = TRUE;

  02907	48 8b 84 24 b0
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0290f	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  02916	0c 02		 or	 al, 2
  02918	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02920	88 81 10 13 00
	00		 mov	 BYTE PTR [rcx+4880], al

; 503  : 
; 504  :     if (!cckd) return 0;

  02926	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR cckd$[rsp], 0
  0292e	75 06		 jne	 SHORT $LN79@ckd64_dasd
  02930	33 c0		 xor	 eax, eax
  02932	eb 1e		 jmp	 SHORT $LN1@ckd64_dasd
  02934	eb 1c		 jmp	 SHORT $LN80@ckd64_dasd
$LN79@ckd64_dasd:

; 505  :     else return cckd64_dasd_init_handler(dev, argc, argv);

  02936	4c 8b 84 24 c0
	07 00 00	 mov	 r8, QWORD PTR argv$[rsp]
  0293e	8b 94 24 b8 07
	00 00		 mov	 edx, DWORD PTR argc$[rsp]
  02945	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0294d	e8 00 00 00 00	 call	 cckd64_dasd_init_handler
$LN80@ckd64_dasd:
$LN1@ckd64_dasd:

; 506  : 
; 507  : } /* end function ckd64_dasd_init_handler */

  02952	48 8b 8c 24 80
	07 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0295a	48 33 cc	 xor	 rcx, rsp
  0295d	e8 00 00 00 00	 call	 __security_check_cookie
  02962	48 81 c4 98 07
	00 00		 add	 rsp, 1944		; 00000798H
  02969	5f		 pop	 rdi
  0296a	5e		 pop	 rsi
  0296b	c3		 ret	 0
ckd64_dasd_init_handler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_fw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_fw_noswap PROC					; COMDAT

; 746  :     inline U32 fetch_fw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 747  :       U32 value;
; 748  :       memcpy(&value, (BYTE *)ptr, 4);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	8b 00		 mov	 eax, DWORD PTR [rax]
  00010	89 04 24	 mov	 DWORD PTR value$[rsp], eax

; 749  :       return value;

  00013	8b 04 24	 mov	 eax, DWORD PTR value$[rsp]

; 750  :     }

  00016	48 83 c4 18	 add	 rsp, 24
  0001a	c3		 ret	 0
fetch_fw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_hw_noswap
_TEXT	SEGMENT
ptr$ = 8
value$ = 16
store_hw_noswap PROC					; COMDAT

; 730  :     inline void store_hw_noswap(void *ptr, U16 value) {

  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 731  :       memcpy((BYTE *)ptr, (BYTE *)&value, 2);

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR ptr$[rsp]
  0000f	0f b7 4c 24 10	 movzx	 ecx, WORD PTR value$[rsp]
  00014	66 89 08	 mov	 WORD PTR [rax], cx

; 732  :     }

  00017	c3		 ret	 0
store_hw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_hw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_hw_noswap PROC					; COMDAT

; 712  :     inline U16 fetch_hw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 713  :       U16 value;
; 714  :       memcpy(&value, (BYTE *)ptr, 2);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00011	66 89 04 24	 mov	 WORD PTR value$[rsp], ax

; 715  :       return value;

  00015	0f b7 04 24	 movzx	 eax, WORD PTR value$[rsp]

; 716  :     }

  00019	48 83 c4 18	 add	 rsp, 24
  0001d	c3		 ret	 0
fetch_hw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sscanf	PROC						; COMDAT

; 2247 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsscanf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2252 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2253 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2254 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2152 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2153 :         return __stdio_common_vsscanf(

  00018	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  0003d	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00007	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
END
