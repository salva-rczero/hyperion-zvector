; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	main
PUBLIC	__real@4059000000000000
EXTRN	__imp__errno:PROC
EXTRN	__imp_strpbrk:PROC
EXTRN	__imp_exit:PROC
EXTRN	_byteswap_ushort:PROC
EXTRN	__imp_isatty:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_fopen:PROC
EXTRN	__imp_fread:PROC
EXTRN	__imp__fseeki64:PROC
EXTRN	__imp__ftelli64:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp_fileno:PROC
EXTRN	__imp_trimloc:PROC
EXTRN	__imp_initialize_utility:PROC
EXTRN	__imp_tf_are_swaps_needed:PROC
EXTRN	__imp_tf_swap_sys:PROC
EXTRN	__imp_tf_swap_hdr:PROC
EXTRN	__imp_tf_swap_rec:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_w32_fwrite:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_w32_fprintf:PROC
EXTRN	__imp_w32_fclose:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_sysblk:BYTE
EXTRN	__imp_extgui:DWORD
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
infile	DQ	01H DUP (?)
filesize DQ	01H DUP (?)
?wrk@?2??print_args@@9@9 DB 013H DUP (?)		; `print_args'::`3'::wrk
	ALIGN	4

?prefix@?2??print_args@@9@9 DB 013H DUP (?)		; `print_args'::`3'::prefix
	ALIGN	4

?buf@?BE@??main@@9@9 DB 08H DUP (?)			; `main'::`20'::buf
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$printf
pdata	ENDS
pdata	SEGMENT
$pdata$print_args DD imagerel print_args
	DD	imagerel print_args+379
	DD	imagerel $unwind$print_args
$pdata$show_file_progress DD imagerel show_file_progress
	DD	imagerel show_file_progress+321
	DD	imagerel $unwind$show_file_progress
$pdata$main DD	imagerel $LN43
	DD	imagerel $LN43+3504
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
_DATA	SEGMENT
$SG159069 DB	0aH, 00H
	ORG $+6
$SG159071 DB	'tfswap.c', 00H
	ORG $+3
$SG159072 DB	'%s(%d)', 00H
	ORG $+1
$SG159074 DB	'%s', 00H
	ORG $+1
$SG159073 DB	'%-17.17s ', 00H
	ORG $+2
$SG159076 DB	' ', 00H
	ORG $+2
$SG159075 DB	'HHC03217I Args:', 00H
$SG159078 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159079 DB	'"', 00H
	ORG $+2
$SG159080 DB	'%s', 00H
	ORG $+1
$SG159082 DB	'"', 00H
	ORG $+2
$SG159083 DB	0aH, 0aH, 00H
	ORG $+1
$SG159090 DB	'ftell', 00H
	ORG $+2
$SG159091 DB	'E', 00H
	ORG $+2
$SG159150 DB	'tfswap', 00H
	ORG $+1
$SG159152 DB	'E', 00H
	ORG $+2
$SG159092 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159093 DB	'show_file_progress', 00H
	ORG $+1
$SG159157 DB	'rbS', 00H
$SG159094 DB	'tfswap.c', 00H
	ORG $+3
$SG159158 DB	'E', 00H
	ORG $+2
$SG159097 DB	'PCT=%.1f', 0aH, 00H
	ORG $+2
$SG159165 DB	'E', 00H
	ORG $+2
$SG159099 DB	'%.1f%% of file processed...', 0dH, 00H
	ORG $+3
$SG159149 DB	'Swap Trace File Endianness Utility', 00H
	ORG $+1
$SG159172 DB	'E', 00H
	ORG $+2
$SG159153 DB	'HHC03250%s Usage:  tfswap  infile  outfile', 0aH, 0aH, 00H
	ORG $+3
$SG159154 DB	'main', 00H
	ORG $+3
$SG159155 DB	'tfswap.c', 00H
	ORG $+3
$SG159164 DB	'fseek', 00H
	ORG $+2
$SG159179 DB	'E', 00H
	ORG $+2
$SG159159 DB	'HHC03251%s Error opening "%s": %s', 0aH, 00H
	ORG $+1
$SG159160 DB	'main', 00H
	ORG $+3
$SG159171 DB	'ftell', 00H
	ORG $+2
$SG159184 DB	'wb', 00H
	ORG $+1
$SG159161 DB	'tfswap.c', 00H
	ORG $+3
$SG159178 DB	'fseek', 00H
	ORG $+2
$SG159185 DB	'E', 00H
	ORG $+2
$SG159166 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159167 DB	'main', 00H
	ORG $+3
$SG159168 DB	'tfswap.c', 00H
	ORG $+3
$SG159190 DB	'E', 00H
	ORG $+2
$SG159173 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159174 DB	'main', 00H
	ORG $+3
$SG159175 DB	'tfswap.c', 00H
	ORG $+3
$SG159195 DB	'TFSYS', 00H
	ORG $+2
$SG159196 DB	'E', 00H
	ORG $+2
$SG159180 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159181 DB	'main', 00H
	ORG $+3
$SG159182 DB	'tfswap.c', 00H
	ORG $+3
$SG159202 DB	'E', 00H
	ORG $+2
$SG159186 DB	'HHC03251%s Error opening "%s": %s', 0aH, 00H
	ORG $+1
$SG159187 DB	'main', 00H
	ORG $+3
$SG159208 DB	'E', 00H
	ORG $+2
$SG159188 DB	'tfswap.c', 00H
	ORG $+3
$SG159214 DB	'E', 00H
	ORG $+2
$SG159191 DB	'HHC03252%s Error reading trace file: %s', 0aH, 00H
	ORG $+3
$SG159192 DB	'main', 00H
	ORG $+3
$SG159220 DB	'E', 00H
	ORG $+2
$SG159193 DB	'tfswap.c', 00H
	ORG $+3
$SG159225 DB	'TFHDR', 00H
	ORG $+2
$SG159226 DB	'E', 00H
	ORG $+2
$SG159197 DB	'HHC03253%s Truncated %s record; aborting', 0aH, 00H
	ORG $+2
$SG159198 DB	'main', 00H
	ORG $+3
$SG159232 DB	'E', 00H
	ORG $+2
$SG159199 DB	'tfswap.c', 00H
	ORG $+3
$SG159237 DB	'%hu', 00H
$SG159203 DB	'HHC03212%s File does not start with TFSYS record; aborti'
	DB	'ng', 0aH, 00H
$SG159204 DB	'main', 00H
	ORG $+3
$SG159238 DB	'E', 00H
	ORG $+2
$SG159205 DB	'tfswap.c', 00H
	ORG $+3
$SG159244 DB	'E', 00H
	ORG $+2
$SG159209 DB	'HHC03213%s Unsupported Trace File format: %%TF%c', 0aH, 00H
	ORG $+2
$SG159210 DB	'main', 00H
	ORG $+3
$SG159249 DB	'BIG', 00H
$SG159211 DB	'tfswap.c', 00H
	ORG $+3
$SG159250 DB	'little', 00H
	ORG $+1
$SG159251 DB	'BIG', 00H
$SG159213 DB	'fwrite()', 00H
	ORG $+3
$SG159252 DB	'little', 00H
	ORG $+1
$SG159253 DB	'I', 00H
	ORG $+2
$SG159215 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159216 DB	'main', 00H
	ORG $+3
$SG159217 DB	'tfswap.c', 00H
	ORG $+7
$SG159221 DB	'HHC03252%s Error reading trace file: %s', 0aH, 00H
	ORG $+3
$SG159222 DB	'main', 00H
	ORG $+7
$SG159223 DB	'tfswap.c', 00H
	ORG $+7
$SG159227 DB	'HHC03253%s Truncated %s record; aborting', 0aH, 00H
	ORG $+2
$SG159228 DB	'main', 00H
	ORG $+7
$SG159229 DB	'tfswap.c', 00H
	ORG $+7
$SG159233 DB	'HHC03252%s Error reading trace file: %s', 0aH, 00H
	ORG $+3
$SG159234 DB	'main', 00H
	ORG $+7
$SG159235 DB	'tfswap.c', 00H
	ORG $+7
$SG159239 DB	'HHC03253%s Truncated %s record; aborting', 0aH, 00H
	ORG $+2
$SG159240 DB	'main', 00H
	ORG $+7
$SG159241 DB	'tfswap.c', 00H
	ORG $+7
$SG159243 DB	'fwrite()', 00H
	ORG $+7
$SG159245 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159246 DB	'main', 00H
	ORG $+3
$SG159247 DB	'tfswap.c', 00H
	ORG $+7
$SG159254 DB	'HHC03254%s File successfully swapped from %s endian to %'
	DB	's endian', 0aH, 00H
	ORG $+2
$SG159255 DB	'main', 00H
	ORG $+7
$SG159256 DB	'tfswap.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main
	DD	021H
	DD	0d97H
voltbl	ENDS
xdata	SEGMENT
$unwind$print_args DD 010d01H
	DD	0820dH
$unwind$show_file_progress DD 010401H
	DD	0e204H
$unwind$main DD	032919H
	DD	0206a0117H
	DD	0700aH
	DD	imagerel __GSHandlerCheck
	DD	010340H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfswap.c
_TEXT	SEGMENT
doendswap$ = 80
file_big_endian$ = 81
amt$ = 84
msgnum$ = 88
curr$ = 92
sys$ = 96
bytes_read$ = 104
hdr$ = 112
tv353 = 120
tv355 = 124
tv423 = 128
tv433 = 132
tv548 = 136
outfile$ = 144
tv338 = 152
recnum$ = 160
off_size$1 = 168
rec$ = 176
tv550 = 184
tv554 = 192
pgm$ = 200
tv141 = 208
tv161 = 216
tv179 = 224
tv199 = 232
tv219 = 240
tv240 = 248
tv366 = 256
tv389 = 264
tv449 = 272
tv526 = 280
inpath$ = 288
outpath$ = 560
iobuff$ = 832
__$ArrayPad$ = 66368
argc$ = 66400
argv$ = 66408
main	PROC

; 99   : {

$LN43:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	57		 push	 rdi
  0000a	b8 50 03 01 00	 mov	 eax, 66384		; 00010350H
  0000f	e8 00 00 00 00	 call	 __chkstk
  00014	48 2b e0	 sub	 rsp, rax
  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001e	48 33 c4	 xor	 rax, rsp
  00021	48 89 84 24 40
	03 01 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 100  :     char*   pgm                     = NULL;

  00029	48 c7 84 24 c8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR pgm$[rsp], 0

; 101  :     FILE*   outfile                 = NULL;

  00035	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR outfile$[rsp], 0

; 102  :     TFSYS*  sys                     = NULL;

  00041	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR sys$[rsp], 0

; 103  :     TFHDR*  hdr                     = NULL;

  0004a	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR hdr$[rsp], 0

; 104  :     BYTE*   rec                     = NULL;

  00053	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR rec$[rsp], 0

; 105  :     U64     recnum                  = 0;

  0005f	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR recnum$[rsp], 0

; 106  :     size_t  bytes_read              = 0;

  0006b	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR bytes_read$[rsp], 0

; 107  :     int     amt                     = 0;

  00074	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR amt$[rsp], 0

; 108  :     bool    doendswap               = false;

  0007c	c6 44 24 50 00	 mov	 BYTE PTR doendswap$[rsp], 0

; 109  :     bool    file_big_endian         = false;

  00081	c6 44 24 51 00	 mov	 BYTE PTR file_big_endian$[rsp], 0

; 110  :     U16     curr                    = 0;

  00086	33 c0		 xor	 eax, eax
  00088	66 89 44 24 5c	 mov	 WORD PTR curr$[rsp], ax

; 111  :     U16     msgnum                  = 0;

  0008d	33 c0		 xor	 eax, eax
  0008f	66 89 44 24 58	 mov	 WORD PTR msgnum$[rsp], ax

; 112  : 
; 113  :     char    inpath [ MAX_PATH ]     = {0};

  00094	48 8d 84 24 20
	01 00 00	 lea	 rax, QWORD PTR inpath$[rsp]
  0009c	48 8b f8	 mov	 rdi, rax
  0009f	33 c0		 xor	 eax, eax
  000a1	b9 04 01 00 00	 mov	 ecx, 260		; 00000104H
  000a6	f3 aa		 rep stosb

; 114  :     char    outpath[ MAX_PATH ]     = {0};

  000a8	48 8d 84 24 30
	02 00 00	 lea	 rax, QWORD PTR outpath$[rsp]
  000b0	48 8b f8	 mov	 rdi, rax
  000b3	33 c0		 xor	 eax, eax
  000b5	b9 04 01 00 00	 mov	 ecx, 260		; 00000104H
  000ba	f3 aa		 rep stosb

; 115  :     BYTE    iobuff[ _64_KILOBYTE ]  = {0};

  000bc	48 8d 84 24 40
	03 00 00	 lea	 rax, QWORD PTR iobuff$[rsp]
  000c4	48 8b f8	 mov	 rdi, rax
  000c7	33 c0		 xor	 eax, eax
  000c9	b9 00 00 01 00	 mov	 ecx, 65536		; 00010000H
  000ce	f3 aa		 rep stosb

; 116  : 
; 117  :     INITIALIZE_UTILITY( UTILITY_NAME, UTILITY_DESC, &pgm );

  000d0	48 8d 84 24 c8
	00 00 00	 lea	 rax, QWORD PTR pgm$[rsp]
  000d8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000dd	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159149
  000e4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159150
  000eb	48 8b 94 24 68
	03 01 00	 mov	 rdx, QWORD PTR argv$[rsp]
  000f3	8b 8c 24 60 03
	01 00		 mov	 ecx, DWORD PTR argc$[rsp]
  000fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_initialize_utility
  00100	89 84 24 60 03
	01 00		 mov	 DWORD PTR argc$[rsp], eax

; 118  : 
; 119  :     /* Show them the arguments they entered */
; 120  :     print_args( argc, argv );

  00107	48 8b 94 24 68
	03 01 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0010f	8b 8c 24 60 03
	01 00		 mov	 ecx, DWORD PTR argc$[rsp]
  00116	e8 00 00 00 00	 call	 print_args

; 121  : 
; 122  :     if (argc != 3)

  0011b	83 bc 24 60 03
	01 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00123	74 52		 je	 SHORT $LN4@main

; 123  :     {
; 124  :         // "Usage:  tfswap  infile  outfile\n"
; 125  :         FWRMSG( stderr, HHC03250, "E" );

  00125	b9 02 00 00 00	 mov	 ecx, 2
  0012a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00130	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159152
  00137	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159153
  00143	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00148	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00153	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159154
  0015a	ba 7d 00 00 00	 mov	 edx, 125		; 0000007dH
  0015f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159155
  00166	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 126  :         exit( -1 );

  0016c	b9 ff ff ff ff	 mov	 ecx, -1
  00171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN4@main:

; 127  :     }
; 128  : 
; 129  :     hostpath( inpath,  argv[1], sizeof( inpath  ));

  00177	b8 08 00 00 00	 mov	 eax, 8
  0017c	48 6b c0 01	 imul	 rax, rax, 1
  00180	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00186	48 8b 8c 24 68
	03 01 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0018e	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00192	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR inpath$[rsp]
  0019a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 130  :     hostpath( outpath, argv[2], sizeof( outpath ));

  001a0	b8 08 00 00 00	 mov	 eax, 8
  001a5	48 6b c0 02	 imul	 rax, rax, 2
  001a9	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  001af	48 8b 8c 24 68
	03 01 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001b7	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  001bb	48 8d 8c 24 30
	02 00 00	 lea	 rcx, QWORD PTR outpath$[rsp]
  001c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 131  : 
; 132  : #if defined( _MSVC_ )
; 133  : #define INFILE_MODE    "rbS"     // ('S' = cached sequential access)
; 134  : #else
; 135  : #define INFILE_MODE    "rb"
; 136  : #endif
; 137  : 
; 138  :     /* Open the input file */
; 139  :     if (!(infile = fopen( inpath, INFILE_MODE )))

  001c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159157
  001d0	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR inpath$[rsp]
  001d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  001de	48 89 05 00 00
	00 00		 mov	 QWORD PTR infile, rax
  001e5	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR infile, 0
  001ed	0f 85 82 00 00
	00		 jne	 $LN5@main

; 140  :     {
; 141  :         // "Error opening \"%s\": %s"
; 142  :         FWRMSG( stderr, HHC03251, "E", inpath, strerror( errno ));

  001f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  001f9	8b 08		 mov	 ecx, DWORD PTR [rax]
  001fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00201	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv141[rsp], rax
  00209	b9 02 00 00 00	 mov	 ecx, 2
  0020e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00214	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tv141[rsp]
  0021c	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00221	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR inpath$[rsp]
  00229	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0022e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159158
  00235	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0023a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159159
  00241	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00246	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00251	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159160
  00258	ba 8e 00 00 00	 mov	 edx, 142		; 0000008eH
  0025d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159161
  00264	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 143  :         exit( -1 );

  0026a	b9 ff ff ff ff	 mov	 ecx, -1
  0026f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN5@main:

; 144  :     }
; 145  : 
; 146  :     /* Save input file size */
; 147  :     if (fseek( infile, 0, SEEK_END ) < 0)

  00275	41 b8 02 00 00
	00		 mov	 r8d, 2
  0027b	33 d2		 xor	 edx, edx
  0027d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR infile
  00284	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fseeki64
  0028a	85 c0		 test	 eax, eax
  0028c	0f 8d 86 00 00
	00		 jge	 $LN6@main

; 148  :     {
; 149  :         // "Error in function %s: %s"
; 150  :         FWRMSG( stderr, HHC00075, "E", "fseek", strerror( errno ));

  00292	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00298	8b 08		 mov	 ecx, DWORD PTR [rax]
  0029a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  002a0	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv161[rsp], rax
  002a8	b9 02 00 00 00	 mov	 ecx, 2
  002ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002b3	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tv161[rsp]
  002bb	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159164
  002c7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159165
  002d3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159166
  002df	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e9	41 b9 03 00 00
	00		 mov	 r9d, 3
  002ef	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159167
  002f6	ba 96 00 00 00	 mov	 edx, 150		; 00000096H
  002fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159168
  00302	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 151  :         exit( -1 );

  00308	b9 ff ff ff ff	 mov	 ecx, -1
  0030d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit

; 152  :     }

  00313	e9 59 01 00 00	 jmp	 $LN7@main
$LN6@main:

; 153  :     else
; 154  :     {
; 155  :         off_t  off_size;    // (file size)
; 156  : 
; 157  :         if ((off_size = ftell( infile )) < 0)

  00318	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR infile
  0031f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__ftelli64
  00325	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR off_size$1[rsp], rax
  0032d	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR off_size$1[rsp], 0
  00336	0f 8d 86 00 00
	00		 jge	 $LN8@main

; 158  :         {
; 159  :             // "Error in function %s: %s"
; 160  :             FWRMSG( stderr, HHC00075, "E", "ftell", strerror( errno ));

  0033c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00342	8b 08		 mov	 ecx, DWORD PTR [rax]
  00344	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0034a	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv179[rsp], rax
  00352	b9 02 00 00 00	 mov	 ecx, 2
  00357	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0035d	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tv179[rsp]
  00365	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0036a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159171
  00371	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00376	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159172
  0037d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00382	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159173
  00389	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0038e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00393	41 b9 03 00 00
	00		 mov	 r9d, 3
  00399	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159174
  003a0	ba a0 00 00 00	 mov	 edx, 160		; 000000a0H
  003a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159175
  003ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 161  :             exit( -1 );

  003b2	b9 ff ff ff ff	 mov	 ecx, -1
  003b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit

; 162  :         }

  003bd	e9 af 00 00 00	 jmp	 $LN9@main
$LN8@main:

; 163  :         else
; 164  :         {
; 165  :             if (fseek( infile, 0, SEEK_SET ) < 0)

  003c2	45 33 c0	 xor	 r8d, r8d
  003c5	33 d2		 xor	 edx, edx
  003c7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR infile
  003ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fseeki64
  003d4	85 c0		 test	 eax, eax
  003d6	0f 8d 83 00 00
	00		 jge	 $LN10@main

; 166  :             {
; 167  :                 // "Error in function %s: %s"
; 168  :                 FWRMSG( stderr, HHC00075, "E", "fseek", strerror( errno ));

  003dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  003e2	8b 08		 mov	 ecx, DWORD PTR [rax]
  003e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  003ea	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv199[rsp], rax
  003f2	b9 02 00 00 00	 mov	 ecx, 2
  003f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003fd	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR tv199[rsp]
  00405	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0040a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159178
  00411	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00416	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159179
  0041d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00422	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159180
  00429	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0042e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00433	41 b9 03 00 00
	00		 mov	 r9d, 3
  00439	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159181
  00440	ba a8 00 00 00	 mov	 edx, 168		; 000000a8H
  00445	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159182
  0044c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 169  :                 exit( -1 );

  00452	b9 ff ff ff ff	 mov	 ecx, -1
  00457	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit

; 170  :             }

  0045d	eb 12		 jmp	 SHORT $LN11@main
$LN10@main:

; 171  :             else
; 172  :                 filesize = (double) off_size;

  0045f	f2 48 0f 2a 84
	24 a8 00 00 00	 cvtsi2sd xmm0, QWORD PTR off_size$1[rsp]
  00469	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR filesize, xmm0
$LN11@main:
$LN9@main:
$LN7@main:

; 173  :         }
; 174  :     }
; 175  : 
; 176  :     /* Open the output file */
; 177  :     if (!(outfile = fopen( outpath, "wb" )))

  00471	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159184
  00478	48 8d 8c 24 30
	02 00 00	 lea	 rcx, QWORD PTR outpath$[rsp]
  00480	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  00486	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR outfile$[rsp], rax
  0048e	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR outfile$[rsp], 0
  00497	0f 85 82 00 00
	00		 jne	 $LN12@main

; 178  :     {
; 179  :         // "Error opening \"%s\": %s"
; 180  :         FWRMSG( stderr, HHC03251, "E", outpath, strerror( errno ));

  0049d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  004a3	8b 08		 mov	 ecx, DWORD PTR [rax]
  004a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  004ab	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv219[rsp], rax
  004b3	b9 02 00 00 00	 mov	 ecx, 2
  004b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004be	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv219[rsp]
  004c6	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  004cb	48 8d 8c 24 30
	02 00 00	 lea	 rcx, QWORD PTR outpath$[rsp]
  004d3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159185
  004df	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159186
  004eb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004f0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004f5	41 b9 03 00 00
	00		 mov	 r9d, 3
  004fb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159187
  00502	ba b4 00 00 00	 mov	 edx, 180		; 000000b4H
  00507	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159188
  0050e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 181  :         exit( -1 );

  00514	b9 ff ff ff ff	 mov	 ecx, -1
  00519	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN12@main:

; 182  :     }
; 183  : 
; 184  :     /* Read Trace File TFSYS record */
; 185  :     if ((bytes_read = fread( iobuff, 1, sizeof( TFSYS ), infile )) != sizeof( TFSYS ))

  0051f	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR infile
  00526	41 b8 f0 00 00
	00		 mov	 r8d, 240		; 000000f0H
  0052c	ba 01 00 00 00	 mov	 edx, 1
  00531	48 8d 8c 24 40
	03 00 00	 lea	 rcx, QWORD PTR iobuff$[rsp]
  00539	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  0053f	48 89 44 24 68	 mov	 QWORD PTR bytes_read$[rsp], rax
  00544	48 81 7c 24 68
	f0 00 00 00	 cmp	 QWORD PTR bytes_read$[rsp], 240 ; 000000f0H
  0054d	74 75		 je	 SHORT $LN13@main

; 186  :     {
; 187  :         // "Error reading trace file: %s"
; 188  :         FWRMSG( stderr, HHC03252, "E", strerror( errno ));

  0054f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00555	8b 08		 mov	 ecx, DWORD PTR [rax]
  00557	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0055d	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv240[rsp], rax
  00565	b9 02 00 00 00	 mov	 ecx, 2
  0056a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00570	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv240[rsp]
  00578	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0057d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159190
  00584	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00589	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159191
  00590	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00595	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0059a	41 b9 03 00 00
	00		 mov	 r9d, 3
  005a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159192
  005a7	ba bc 00 00 00	 mov	 edx, 188		; 000000bcH
  005ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159193
  005b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 189  :         exit( -1 );

  005b9	b9 ff ff ff ff	 mov	 ecx, -1
  005be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN13@main:

; 190  :     }
; 191  : 
; 192  :     if (bytes_read < sizeof( TFSYS ))

  005c4	48 81 7c 24 68
	f0 00 00 00	 cmp	 QWORD PTR bytes_read$[rsp], 240 ; 000000f0H
  005cd	73 5e		 jae	 SHORT $LN14@main

; 193  :     {
; 194  :         // "Truncated %s record; aborting"
; 195  :         FWRMSG( stderr, HHC03253, "E", "TFSYS" );

  005cf	b9 02 00 00 00	 mov	 ecx, 2
  005d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159195
  005e1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159196
  005ed	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159197
  005f9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005fe	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00603	41 b9 03 00 00
	00		 mov	 r9d, 3
  00609	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159198
  00610	ba c3 00 00 00	 mov	 edx, 195		; 000000c3H
  00615	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159199
  0061c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 196  :         exit( -1 );

  00622	b9 ff ff ff ff	 mov	 ecx, -1
  00627	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN14@main:

; 197  :     }
; 198  : 
; 199  :     /* Point to the TFSYS record we just read */
; 200  :     sys = (TFSYS*) iobuff;

  0062d	48 8d 84 24 40
	03 00 00	 lea	 rax, QWORD PTR iobuff$[rsp]
  00635	48 89 44 24 60	 mov	 QWORD PTR sys$[rsp], rax

; 201  : 
; 202  :     /* Validate the TFSYS record */
; 203  :     if (0
; 204  :         || sys->ffmt[0] != '%'
; 205  :         || sys->ffmt[1] != 'T'
; 206  :         || sys->ffmt[2] != 'F'

  0063a	33 c0		 xor	 eax, eax
  0063c	85 c0		 test	 eax, eax
  0063e	75 45		 jne	 SHORT $LN16@main
  00640	b8 01 00 00 00	 mov	 eax, 1
  00645	48 6b c0 00	 imul	 rax, rax, 0
  00649	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sys$[rsp]
  0064e	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00652	83 f8 25	 cmp	 eax, 37			; 00000025H
  00655	75 2e		 jne	 SHORT $LN16@main
  00657	b8 01 00 00 00	 mov	 eax, 1
  0065c	48 6b c0 01	 imul	 rax, rax, 1
  00660	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sys$[rsp]
  00665	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00669	83 f8 54	 cmp	 eax, 84			; 00000054H
  0066c	75 17		 jne	 SHORT $LN16@main
  0066e	b8 01 00 00 00	 mov	 eax, 1
  00673	48 6b c0 02	 imul	 rax, rax, 2
  00677	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sys$[rsp]
  0067c	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00680	83 f8 46	 cmp	 eax, 70			; 00000046H
  00683	74 52		 je	 SHORT $LN15@main
$LN16@main:

; 207  :     )
; 208  :     {
; 209  :         // "File does not start with TFSYS record; aborting"
; 210  :         FWRMSG( stderr, HHC03212, "E" );

  00685	b9 02 00 00 00	 mov	 ecx, 2
  0068a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00690	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159202
  00697	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0069c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159203
  006a3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006a8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006ad	41 b9 03 00 00
	00		 mov	 r9d, 3
  006b3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159204
  006ba	ba d2 00 00 00	 mov	 edx, 210		; 000000d2H
  006bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159205
  006c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 211  :         exit( -1 );

  006cc	b9 ff ff ff ff	 mov	 ecx, -1
  006d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN15@main:

; 212  :     }
; 213  : 
; 214  :     if (0
; 215  :         || sys->ffmt[3] < '0'
; 216  :         || sys->ffmt[3] > TF_FMT

  006d7	33 c0		 xor	 eax, eax
  006d9	85 c0		 test	 eax, eax
  006db	75 2e		 jne	 SHORT $LN18@main
  006dd	b8 01 00 00 00	 mov	 eax, 1
  006e2	48 6b c0 03	 imul	 rax, rax, 3
  006e6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sys$[rsp]
  006eb	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  006ef	83 f8 30	 cmp	 eax, 48			; 00000030H
  006f2	7c 17		 jl	 SHORT $LN18@main
  006f4	b8 01 00 00 00	 mov	 eax, 1
  006f9	48 6b c0 03	 imul	 rax, rax, 3
  006fd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sys$[rsp]
  00702	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00706	83 f8 30	 cmp	 eax, 48			; 00000030H
  00709	7e 76		 jle	 SHORT $LN17@main
$LN18@main:

; 217  :     )
; 218  :     {
; 219  :         // "Unsupported Trace File format: %%TF%c"
; 220  :         FWRMSG( stderr, HHC03213, "E", sys->ffmt[3] );

  0070b	b8 01 00 00 00	 mov	 eax, 1
  00710	48 6b c0 03	 imul	 rax, rax, 3
  00714	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sys$[rsp]
  00719	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0071d	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv338[rsp], eax
  00724	b9 02 00 00 00	 mov	 ecx, 2
  00729	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0072f	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv338[rsp]
  00736	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0073a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159208
  00741	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00746	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159209
  0074d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00752	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00757	41 b9 03 00 00
	00		 mov	 r9d, 3
  0075d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159210
  00764	ba dc 00 00 00	 mov	 edx, 220		; 000000dcH
  00769	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159211
  00770	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 221  :         exit( -1 );

  00776	b9 ff ff ff ff	 mov	 ecx, -1
  0077b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN17@main:

; 222  :     }
; 223  : 
; 224  :     /* Save the endianness of the file */
; 225  :     file_big_endian = sys->bigend ? true : false;

  00781	48 8b 44 24 60	 mov	 rax, QWORD PTR sys$[rsp]
  00786	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  0078a	85 c0		 test	 eax, eax
  0078c	74 0a		 je	 SHORT $LN29@main
  0078e	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR tv353[rsp], 1
  00796	eb 08		 jmp	 SHORT $LN30@main
$LN29@main:
  00798	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv353[rsp], 0
$LN30@main:
  007a0	83 7c 24 78 00	 cmp	 DWORD PTR tv353[rsp], 0
  007a5	75 0a		 jne	 SHORT $LN31@main
  007a7	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv355[rsp], 0
  007af	eb 08		 jmp	 SHORT $LN32@main
$LN31@main:
  007b1	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR tv355[rsp], 1
$LN32@main:
  007b9	0f b6 44 24 7c	 movzx	 eax, BYTE PTR tv355[rsp]
  007be	88 44 24 51	 mov	 BYTE PTR file_big_endian$[rsp], al

; 226  : 
; 227  :     /* Determine whether file is already in our endian format or not */
; 228  :     doendswap = tf_are_swaps_needed( sys );

  007c2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sys$[rsp]
  007c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tf_are_swaps_needed
  007cd	88 44 24 50	 mov	 BYTE PTR doendswap$[rsp], al

; 229  : 
; 230  :     /* Swap the endianness of the TFSYS record and write it out */
; 231  :     tf_swap_sys( sys );

  007d1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sys$[rsp]
  007d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tf_swap_sys

; 232  :     if (fwrite( sys, 1, sizeof( TFSYS ), outfile ) != sizeof( TFSYS ))

  007dc	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR outfile$[rsp]
  007e4	41 b8 f0 00 00
	00		 mov	 r8d, 240		; 000000f0H
  007ea	ba 01 00 00 00	 mov	 edx, 1
  007ef	48 8b 4c 24 60	 mov	 rcx, QWORD PTR sys$[rsp]
  007f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fwrite
  007fa	48 3d f0 00 00
	00		 cmp	 rax, 240		; 000000f0H
  00800	0f 84 81 00 00
	00		 je	 $LN19@main

; 233  :     {
; 234  :         // "Error in function %s: %s"
; 235  :         FWRMSG( stderr, HHC00075, "E", "fwrite()", strerror( errno ));

  00806	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0080c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0080e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00814	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv366[rsp], rax
  0081c	b9 02 00 00 00	 mov	 ecx, 2
  00821	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00827	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv366[rsp]
  0082f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00834	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159213
  0083b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00840	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159214
  00847	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0084c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159215
  00853	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00858	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0085d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00863	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159216
  0086a	ba eb 00 00 00	 mov	 edx, 235		; 000000ebH
  0086f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159217
  00876	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 236  :         exit( -1 );

  0087c	b9 ff ff ff ff	 mov	 ecx, -1
  00881	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN19@main:

; 237  :     }
; 238  : 
; 239  :     /* Now read, swap, and write all the other records in the file */
; 240  : 
; 241  :     hdr = (TFHDR*) iobuff;

  00887	48 8d 84 24 40
	03 00 00	 lea	 rax, QWORD PTR iobuff$[rsp]
  0088f	48 89 44 24 70	 mov	 QWORD PTR hdr$[rsp], rax
$LN2@main:

; 242  : 
; 243  :     while (1)

  00894	33 c0		 xor	 eax, eax
  00896	83 f8 01	 cmp	 eax, 1
  00899	0f 84 06 04 00
	00		 je	 $LN3@main

; 244  :     {
; 245  :         /* Read just TFHDR for now, so we can identify record */
; 246  :         if ((bytes_read = fread( hdr, 1, sizeof( TFHDR ), infile )) != sizeof( TFHDR ))

  0089f	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR infile
  008a6	41 b8 18 00 00
	00		 mov	 r8d, 24
  008ac	ba 01 00 00 00	 mov	 edx, 1
  008b1	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hdr$[rsp]
  008b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  008bc	48 89 44 24 68	 mov	 QWORD PTR bytes_read$[rsp], rax
  008c1	48 83 7c 24 68
	18		 cmp	 QWORD PTR bytes_read$[rsp], 24
  008c7	0f 84 82 00 00
	00		 je	 $LN20@main

; 247  :         {
; 248  :             /* Stop when EOF reached */
; 249  :             if (!bytes_read)

  008cd	48 83 7c 24 68
	00		 cmp	 QWORD PTR bytes_read$[rsp], 0
  008d3	75 05		 jne	 SHORT $LN21@main

; 250  :                 break;

  008d5	e9 cb 03 00 00	 jmp	 $LN3@main
$LN21@main:

; 251  : 
; 252  :             // "Error reading trace file: %s"
; 253  :             FWRMSG( stderr, HHC03252, "E", strerror( errno ));

  008da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  008e0	8b 08		 mov	 ecx, DWORD PTR [rax]
  008e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  008e8	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv389[rsp], rax
  008f0	b9 02 00 00 00	 mov	 ecx, 2
  008f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008fb	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv389[rsp]
  00903	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00908	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159220
  0090f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00914	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159221
  0091b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00920	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00925	41 b9 03 00 00
	00		 mov	 r9d, 3
  0092b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159222
  00932	ba fd 00 00 00	 mov	 edx, 253		; 000000fdH
  00937	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159223
  0093e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 254  :             exit( -1 );

  00944	b9 ff ff ff ff	 mov	 ecx, -1
  00949	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN20@main:

; 255  :         }
; 256  : 
; 257  :         /* Make sure we have a complete header to work with */
; 258  :         if (bytes_read < sizeof( TFHDR ))

  0094f	48 83 7c 24 68
	18		 cmp	 QWORD PTR bytes_read$[rsp], 24
  00955	73 5e		 jae	 SHORT $LN22@main

; 259  :         {
; 260  :             // "Truncated %s record; aborting"
; 261  :             FWRMSG( stderr, HHC03253, "E", "TFHDR" );

  00957	b9 02 00 00 00	 mov	 ecx, 2
  0095c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00962	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159225
  00969	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0096e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159226
  00975	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0097a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159227
  00981	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00986	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0098b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00991	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159228
  00998	ba 05 01 00 00	 mov	 edx, 261		; 00000105H
  0099d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159229
  009a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 262  :             exit( -1 );

  009aa	b9 ff ff ff ff	 mov	 ecx, -1
  009af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN22@main:

; 263  :         }
; 264  : 
; 265  :         /* Save needed TFHDR fields in OUR native endian format */
; 266  :         curr   = doendswap ? SWAP16( hdr->curr   ) : hdr->curr;

  009b5	0f b6 44 24 50	 movzx	 eax, BYTE PTR doendswap$[rsp]
  009ba	85 c0		 test	 eax, eax
  009bc	74 1a		 je	 SHORT $LN33@main
  009be	48 8b 44 24 70	 mov	 rax, QWORD PTR hdr$[rsp]
  009c3	0f b7 48 02	 movzx	 ecx, WORD PTR [rax+2]
  009c7	e8 00 00 00 00	 call	 _byteswap_ushort
  009cc	0f b7 c0	 movzx	 eax, ax
  009cf	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv423[rsp], eax
  009d6	eb 10		 jmp	 SHORT $LN34@main
$LN33@main:
  009d8	48 8b 44 24 70	 mov	 rax, QWORD PTR hdr$[rsp]
  009dd	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  009e1	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv423[rsp], eax
$LN34@main:
  009e8	0f b7 84 24 80
	00 00 00	 movzx	 eax, WORD PTR tv423[rsp]
  009f0	66 89 44 24 5c	 mov	 WORD PTR curr$[rsp], ax

; 267  :         msgnum = doendswap ? SWAP16( hdr->msgnum ) : hdr->msgnum;

  009f5	0f b6 44 24 50	 movzx	 eax, BYTE PTR doendswap$[rsp]
  009fa	85 c0		 test	 eax, eax
  009fc	74 1a		 je	 SHORT $LN35@main
  009fe	48 8b 44 24 70	 mov	 rax, QWORD PTR hdr$[rsp]
  00a03	0f b7 48 06	 movzx	 ecx, WORD PTR [rax+6]
  00a07	e8 00 00 00 00	 call	 _byteswap_ushort
  00a0c	0f b7 c0	 movzx	 eax, ax
  00a0f	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv433[rsp], eax
  00a16	eb 10		 jmp	 SHORT $LN36@main
$LN35@main:
  00a18	48 8b 44 24 70	 mov	 rax, QWORD PTR hdr$[rsp]
  00a1d	0f b7 40 06	 movzx	 eax, WORD PTR [rax+6]
  00a21	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv433[rsp], eax
$LN36@main:
  00a28	0f b7 84 24 84
	00 00 00	 movzx	 eax, WORD PTR tv433[rsp]
  00a30	66 89 44 24 58	 mov	 WORD PTR msgnum$[rsp], ax

; 268  : 
; 269  :         /* Swap the TFHDR we just read */
; 270  :         tf_swap_hdr( hdr );

  00a35	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hdr$[rsp]
  00a3a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tf_swap_hdr

; 271  : 
; 272  :         /* Finish reading in the remainder of the record */
; 273  :         rec = (BYTE*) (hdr + 1);

  00a40	48 8b 44 24 70	 mov	 rax, QWORD PTR hdr$[rsp]
  00a45	48 83 c0 18	 add	 rax, 24
  00a49	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR rec$[rsp], rax

; 274  :         amt = curr - sizeof( TFHDR );

  00a51	0f b7 44 24 5c	 movzx	 eax, WORD PTR curr$[rsp]
  00a56	48 83 e8 18	 sub	 rax, 24
  00a5a	89 44 24 54	 mov	 DWORD PTR amt$[rsp], eax

; 275  : 
; 276  :         if ((bytes_read = fread( rec, 1, amt, infile )) != (size_t)amt)

  00a5e	48 63 44 24 54	 movsxd	 rax, DWORD PTR amt$[rsp]
  00a63	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR infile
  00a6a	4c 8b c0	 mov	 r8, rax
  00a6d	ba 01 00 00 00	 mov	 edx, 1
  00a72	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR rec$[rsp]
  00a7a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  00a80	48 89 44 24 68	 mov	 QWORD PTR bytes_read$[rsp], rax
  00a85	48 63 44 24 54	 movsxd	 rax, DWORD PTR amt$[rsp]
  00a8a	48 39 44 24 68	 cmp	 QWORD PTR bytes_read$[rsp], rax
  00a8f	0f 84 82 00 00
	00		 je	 $LN23@main

; 277  :         {
; 278  :             /* Stop when EOF reached */
; 279  :             if (!bytes_read)

  00a95	48 83 7c 24 68
	00		 cmp	 QWORD PTR bytes_read$[rsp], 0
  00a9b	75 05		 jne	 SHORT $LN24@main

; 280  :                 break;

  00a9d	e9 03 02 00 00	 jmp	 $LN3@main
$LN24@main:

; 281  : 
; 282  :             /* "Error reading trace file: %s" */
; 283  :             FWRMSG( stderr, HHC03252, "E", strerror( errno ));

  00aa2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00aa8	8b 08		 mov	 ecx, DWORD PTR [rax]
  00aaa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00ab0	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv449[rsp], rax
  00ab8	b9 02 00 00 00	 mov	 ecx, 2
  00abd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00ac3	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tv449[rsp]
  00acb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00ad0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159232
  00ad7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00adc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159233
  00ae3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ae8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00aed	41 b9 03 00 00
	00		 mov	 r9d, 3
  00af3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159234
  00afa	ba 1b 01 00 00	 mov	 edx, 283		; 0000011bH
  00aff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159235
  00b06	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 284  :             exit( -1 );

  00b0c	b9 ff ff ff ff	 mov	 ecx, -1
  00b11	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN23@main:

; 285  :         }
; 286  : 
; 287  :         if (bytes_read < (size_t)amt)

  00b17	48 63 44 24 54	 movsxd	 rax, DWORD PTR amt$[rsp]
  00b1c	48 39 44 24 68	 cmp	 QWORD PTR bytes_read$[rsp], rax
  00b21	73 7f		 jae	 SHORT $LN25@main

; 288  :         {
; 289  :             /* "Truncated %s record; aborting" */
; 290  :             static char buf[8];
; 291  :             MSGBUF( buf, "%"PRIu16, msgnum );

  00b23	0f b7 44 24 58	 movzx	 eax, WORD PTR msgnum$[rsp]
  00b28	44 8b c8	 mov	 r9d, eax
  00b2b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159237
  00b32	ba 08 00 00 00	 mov	 edx, 8
  00b37	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?buf@?BE@??main@@9@9
  00b3e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 292  :             FWRMSG( stderr, HHC03253, "E", buf );

  00b44	b9 02 00 00 00	 mov	 ecx, 2
  00b49	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b4f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?buf@?BE@??main@@9@9
  00b56	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00b5b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159238
  00b62	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b67	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159239
  00b6e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b73	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b78	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b7e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159240
  00b85	ba 24 01 00 00	 mov	 edx, 292		; 00000124H
  00b8a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159241
  00b91	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 293  :             exit( -1 );

  00b97	b9 ff ff ff ff	 mov	 ecx, -1
  00b9c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN25@main:

; 294  :         }
; 295  : 
; 296  :         /* Swap the TF record just read */
; 297  :         tf_swap_rec( hdr, msgnum );

  00ba2	0f b7 54 24 58	 movzx	 edx, WORD PTR msgnum$[rsp]
  00ba7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hdr$[rsp]
  00bac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tf_swap_rec

; 298  : 
; 299  :         /* Write out the swapped record */
; 300  :         amt += sizeof( TFHDR );

  00bb2	48 63 44 24 54	 movsxd	 rax, DWORD PTR amt$[rsp]
  00bb7	48 83 c0 18	 add	 rax, 24
  00bbb	89 44 24 54	 mov	 DWORD PTR amt$[rsp], eax

; 301  :         if (fwrite( hdr, 1, amt, outfile ) != (size_t)amt)

  00bbf	48 63 44 24 54	 movsxd	 rax, DWORD PTR amt$[rsp]
  00bc4	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR outfile$[rsp]
  00bcc	4c 8b c0	 mov	 r8, rax
  00bcf	ba 01 00 00 00	 mov	 edx, 1
  00bd4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hdr$[rsp]
  00bd9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fwrite
  00bdf	48 63 4c 24 54	 movsxd	 rcx, DWORD PTR amt$[rsp]
  00be4	48 3b c1	 cmp	 rax, rcx
  00be7	0f 84 81 00 00
	00		 je	 $LN26@main

; 302  :         {
; 303  :             // "Error in function %s: %s"
; 304  :             FWRMSG( stderr, HHC00075, "E", "fwrite()", strerror( errno ));

  00bed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00bf3	8b 08		 mov	 ecx, DWORD PTR [rax]
  00bf5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00bfb	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv526[rsp], rax
  00c03	b9 02 00 00 00	 mov	 ecx, 2
  00c08	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c0e	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv526[rsp]
  00c16	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00c1b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159243
  00c22	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00c27	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159244
  00c2e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c33	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159245
  00c3a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c3f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c44	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c4a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159246
  00c51	ba 30 01 00 00	 mov	 edx, 304		; 00000130H
  00c56	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159247
  00c5d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 305  :             exit( -1 );

  00c63	b9 ff ff ff ff	 mov	 ecx, -1
  00c68	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN26@main:

; 306  :         }
; 307  : 
; 308  :         /* Issue periodic progress messages */
; 309  :         if (!(++recnum % 1000))

  00c6e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR recnum$[rsp]
  00c76	48 ff c0	 inc	 rax
  00c79	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR recnum$[rsp], rax
  00c81	33 d2		 xor	 edx, edx
  00c83	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR recnum$[rsp]
  00c8b	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00c90	48 f7 f1	 div	 rcx
  00c93	48 8b c2	 mov	 rax, rdx
  00c96	48 85 c0	 test	 rax, rax
  00c99	75 05		 jne	 SHORT $LN27@main

; 310  :             show_file_progress();

  00c9b	e8 00 00 00 00	 call	 show_file_progress
$LN27@main:

; 311  :     }

  00ca0	e9 ef fb ff ff	 jmp	 $LN2@main
$LN3@main:

; 312  : 
; 313  :     /* DONE! (That was easy!) */
; 314  :     fclose( infile );

  00ca5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR infile
  00cac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fclose

; 315  :     fclose( outfile );

  00cb2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR outfile$[rsp]
  00cba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fclose

; 316  : 
; 317  :     // "File successfully swapped from %s endian to %s endian"
; 318  :     FWRMSG( stdout, HHC03254, "I",  file_big_endian ? "BIG" : "little",

  00cc0	0f b6 44 24 51	 movzx	 eax, BYTE PTR file_big_endian$[rsp]
  00cc5	85 c0		 test	 eax, eax
  00cc7	75 0d		 jne	 SHORT $LN37@main
  00cc9	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv548[rsp], 1
  00cd4	eb 0b		 jmp	 SHORT $LN38@main
$LN37@main:
  00cd6	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv548[rsp], 0
$LN38@main:
  00ce1	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR tv548[rsp], 0
  00ce9	74 11		 je	 SHORT $LN39@main
  00ceb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159249
  00cf2	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv550[rsp], rax
  00cfa	eb 0f		 jmp	 SHORT $LN40@main
$LN39@main:
  00cfc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159250
  00d03	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv550[rsp], rax
$LN40@main:
  00d0b	0f b6 44 24 51	 movzx	 eax, BYTE PTR file_big_endian$[rsp]
  00d10	85 c0		 test	 eax, eax
  00d12	74 11		 je	 SHORT $LN41@main
  00d14	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159251
  00d1b	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv554[rsp], rax
  00d23	eb 0f		 jmp	 SHORT $LN42@main
$LN41@main:
  00d25	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159252
  00d2c	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv554[rsp], rax
$LN42@main:
  00d34	b9 01 00 00 00	 mov	 ecx, 1
  00d39	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00d3f	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv550[rsp]
  00d47	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00d4c	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv554[rsp]
  00d54	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00d59	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159253
  00d60	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00d65	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159254
  00d6c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00d71	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d76	41 b9 03 00 00
	00		 mov	 r9d, 3
  00d7c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159255
  00d83	ba 3f 01 00 00	 mov	 edx, 319		; 0000013fH
  00d88	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159256
  00d8f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 319  :                                    !file_big_endian ? "BIG" : "little" );
; 320  :     return 0;

  00d95	33 c0		 xor	 eax, eax
$LN28@main:

; 321  : }

  00d97	48 8b 8c 24 40
	03 01 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00d9f	48 33 cc	 xor	 rcx, rsp
  00da2	e8 00 00 00 00	 call	 __security_check_cookie
  00da7	48 81 c4 50 03
	01 00		 add	 rsp, 66384		; 00010350H
  00dae	5f		 pop	 rdi
  00daf	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfswap.c
_TEXT	SEGMENT
percent$ = 80
currpos$ = 88
tv67 = 96
show_file_progress PROC

; 75   : {

  00000	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 76   :     off_t   currpos;
; 77   :     double  percent;
; 78   : 
; 79   :     if ((currpos = ftell( infile )) < 0)

  00004	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR infile
  0000b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__ftelli64
  00011	48 89 44 24 58	 mov	 QWORD PTR currpos$[rsp], rax
  00016	48 83 7c 24 58
	00		 cmp	 QWORD PTR currpos$[rsp], 0
  0001c	7d 7b		 jge	 SHORT $LN2@show_file_

; 80   :     {
; 81   :         // "Error in function %s: %s"
; 82   :         FWRMSG( stderr, HHC00075, "E", "ftell", strerror( errno ));

  0001e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00024	8b 08		 mov	 ecx, DWORD PTR [rax]
  00026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0002c	48 89 44 24 60	 mov	 QWORD PTR tv67[rsp], rax
  00031	b9 02 00 00 00	 mov	 ecx, 2
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0003c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv67[rsp]
  00041	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159090
  0004d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00052	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159091
  00059	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159092
  00065	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0006a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00075	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159093
  0007c	ba 52 00 00 00	 mov	 edx, 82			; 00000052H
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159094
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 83   :         exit( -1 );

  0008e	b9 ff ff ff ff	 mov	 ecx, -1
  00093	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN2@show_file_:

; 84   :     }
; 85   : 
; 86   :     percent = ((double) currpos) / filesize;

  00099	f2 48 0f 2a 44
	24 58		 cvtsi2sd xmm0, QWORD PTR currpos$[rsp]
  000a0	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR filesize
  000a8	f2 0f 11 44 24
	50		 movsd	 QWORD PTR percent$[rsp], xmm0

; 87   :     percent *= 100.0;

  000ae	f2 0f 10 44 24
	50		 movsd	 xmm0, QWORD PTR percent$[rsp]
  000b4	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4059000000000000
  000bc	f2 0f 11 44 24
	50		 movsd	 QWORD PTR percent$[rsp], xmm0

; 88   : 
; 89   :     if (extgui)

  000c2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  000c9	83 38 00	 cmp	 DWORD PTR [rax], 0
  000cc	74 28		 je	 SHORT $LN3@show_file_

; 90   :         fprintf( stderr, "PCT=%.1f\n", percent );

  000ce	b9 02 00 00 00	 mov	 ecx, 2
  000d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000d9	f2 0f 10 54 24
	50		 movsd	 xmm2, QWORD PTR percent$[rsp]
  000df	66 49 0f 7e d0	 movq	 r8, xmm2
  000e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159097
  000eb	48 8b c8	 mov	 rcx, rax
  000ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
  000f4	eb 46		 jmp	 SHORT $LN4@show_file_
$LN3@show_file_:

; 91   :     else if (isatty( fileno( stderr )))

  000f6	b9 02 00 00 00	 mov	 ecx, 2
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00101	48 8b c8	 mov	 rcx, rax
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fileno
  0010a	8b c8		 mov	 ecx, eax
  0010c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isatty
  00112	85 c0		 test	 eax, eax
  00114	74 26		 je	 SHORT $LN5@show_file_

; 92   :         fprintf( stderr, "%.1f%% of file processed...\r", percent );

  00116	b9 02 00 00 00	 mov	 ecx, 2
  0011b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00121	f2 0f 10 54 24
	50		 movsd	 xmm2, QWORD PTR percent$[rsp]
  00127	66 49 0f 7e d0	 movq	 r8, xmm2
  0012c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159099
  00133	48 8b c8	 mov	 rcx, rax
  00136	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN5@show_file_:
$LN4@show_file_:
$LN6@show_file_:

; 93   : }

  0013c	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00140	c3		 ret	 0
show_file_progress ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tfswap.c
_TEXT	SEGMENT
hasblanks$ = 48
i$ = 52
tv92 = 56
tv94 = 60
argc$ = 80
argv$ = 88
print_args PROC

; 27   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 28   :     // PROGRAMMING NOTE: I know of no other way to accomplish this!
; 29   : 
; 30   :     int i; bool hasblanks;
; 31   : 
; 32   :     printf( "\n" );

  0000d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159069
  00014	e8 00 00 00 00	 call	 printf

; 33   : 
; 34   :     /* If debug mode, show filename and line number prefix
; 35   :        the same way the logmsg.c "vfwritemsg" function does. */
; 36   :     if (MLVL( DEBUG ))

  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00020	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  00026	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  0002b	85 c0		 test	 eax, eax
  0002d	74 64		 je	 SHORT $LN5@print_args

; 37   :     {
; 38   :         static char wrk    [ MLVL_DEBUG_PFXLEN + 2 ];
; 39   :         static char prefix [ MLVL_DEBUG_PFXLEN + 2 ];
; 40   : 
; 41   :         MSGBUF( wrk, "%s(%d)", TRIMLOC( __FILE__ ), __LINE__ );

  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159071
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_trimloc
  0003c	c7 44 24 20 29
	00 00 00	 mov	 DWORD PTR [rsp+32], 41	; 00000029H
  00044	4c 8b c8	 mov	 r9, rax
  00047	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159072
  0004e	ba 13 00 00 00	 mov	 edx, 19
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?wrk@?2??print_args@@9@9
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 42   :         MSGBUF( prefix, MLVL_DEBUG_PFXFMT, wrk );

  00060	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?wrk@?2??print_args@@9@9
  00067	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159073
  0006e	ba 13 00 00 00	 mov	 edx, 19
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?prefix@?2??print_args@@9@9
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 43   :         printf( "%s", prefix );

  00080	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?prefix@?2??print_args@@9@9
  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159074
  0008e	e8 00 00 00 00	 call	 printf
$LN5@print_args:

; 44   :     }
; 45   : 
; 46   :     // PROGRAMMING NOTE: we purposely do *NOT* try to print everything
; 47   :     // into a buffer and then do one printf of that buffer since we do
; 48   :     // not know how big that buffer should be. Some arguments could be
; 49   :     // quite long! (Yeah, yeah, we COULD use malloc/realloc much like
; 50   :     // BFR_VSNPRINTF does, but that would be overkill IMHO).
; 51   : 
; 52   :     // HHC03217 "Args: %s"
; 53   :     printf( "HHC03217I Args:" );

  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159075
  0009a	e8 00 00 00 00	 call	 printf

; 54   : 
; 55   :     for (i=1; i < argc; ++i)

  0009f	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  000a7	eb 0a		 jmp	 SHORT $LN4@print_args
$LN2@print_args:
  000a9	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  000ad	ff c0		 inc	 eax
  000af	89 44 24 34	 mov	 DWORD PTR i$[rsp], eax
$LN4@print_args:
  000b3	8b 44 24 50	 mov	 eax, DWORD PTR argc$[rsp]
  000b7	39 44 24 34	 cmp	 DWORD PTR i$[rsp], eax
  000bb	0f 8d a9 00 00
	00		 jge	 $LN3@print_args

; 56   :     {
; 57   :         printf( " " );  // (separate arguments with a blank)

  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159076
  000c8	e8 00 00 00 00	 call	 printf

; 58   : 
; 59   :         if ((hasblanks = strpbrk( argv[i], WHITESPACE ) ? true : false))

  000cd	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  000d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159078
  000d9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR argv$[rsp]
  000de	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  000e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strpbrk
  000e8	48 85 c0	 test	 rax, rax
  000eb	74 0a		 je	 SHORT $LN9@print_args
  000ed	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv92[rsp], 1
  000f5	eb 08		 jmp	 SHORT $LN10@print_args
$LN9@print_args:
  000f7	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
$LN10@print_args:
  000ff	83 7c 24 38 00	 cmp	 DWORD PTR tv92[rsp], 0
  00104	75 0a		 jne	 SHORT $LN11@print_args
  00106	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv94[rsp], 0
  0010e	eb 08		 jmp	 SHORT $LN12@print_args
$LN11@print_args:
  00110	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv94[rsp], 1
$LN12@print_args:
  00118	0f b6 44 24 3c	 movzx	 eax, BYTE PTR tv94[rsp]
  0011d	88 44 24 30	 mov	 BYTE PTR hasblanks$[rsp], al
  00121	0f b6 44 24 30	 movzx	 eax, BYTE PTR hasblanks$[rsp]
  00126	85 c0		 test	 eax, eax
  00128	74 0c		 je	 SHORT $LN6@print_args

; 60   :             printf( "\"" ); // (enclose within quotes if needed)

  0012a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159079
  00131	e8 00 00 00 00	 call	 printf
$LN6@print_args:

; 61   : 
; 62   :         printf( "%s", argv[i] );  // (the argument, as-is)

  00136	48 63 44 24 34	 movsxd	 rax, DWORD PTR i$[rsp]
  0013b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR argv$[rsp]
  00140	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00144	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159080
  0014b	e8 00 00 00 00	 call	 printf

; 63   : 
; 64   :         if (hasblanks)

  00150	0f b6 44 24 30	 movzx	 eax, BYTE PTR hasblanks$[rsp]
  00155	85 c0		 test	 eax, eax
  00157	74 0c		 je	 SHORT $LN7@print_args

; 65   :             printf( "\"" );

  00159	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159082
  00160	e8 00 00 00 00	 call	 printf
$LN7@print_args:

; 66   :     }

  00165	e9 3f ff ff ff	 jmp	 $LN2@print_args
$LN3@print_args:

; 67   : 
; 68   :     printf( "\n\n" );

  0016a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159083
  00171	e8 00 00 00 00	 call	 printf

; 69   : }

  00176	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0017a	c3		 ret	 0
print_args ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Format$ = 64
printf	PROC						; COMDAT

; 956  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 48	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00022	b9 01 00 00 00	 mov	 ecx, 1
  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0002d	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00032	45 33 c0	 xor	 r8d, r8d
  00035	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Format$[rsp]
  0003a	48 8b c8	 mov	 rcx, rax
  0003d	e8 00 00 00 00	 call	 _vfprintf_l
  00042	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 961  :         __crt_va_end(_ArgList);

  00046	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 962  :         return _Result;

  0004f	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 963  :     }

  00053	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00057	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 644  :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  0002c	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00031	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Stream$[rsp]
  00036	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf

; 646  :     }

  0003f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00043	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
