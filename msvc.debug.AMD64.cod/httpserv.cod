; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG159105 DB	'txt', 00H
$SG159107 DB	'jcl', 00H
$SG159106 DB	'text/plain', 00H
	ORG $+5
$SG159108 DB	'text/plain', 00H
	ORG $+1
$SG159109 DB	'gif', 00H
$SG159110 DB	'image/gif', 00H
	ORG $+2
$SG159111 DB	'jpg', 00H
$SG159112 DB	'image/jpeg', 00H
	ORG $+1
$SG159113 DB	'css', 00H
$SG159114 DB	'text/css', 00H
	ORG $+3
$SG159115 DB	'html', 00H
	ORG $+3
$SG159117 DB	'htm', 00H
$SG159116 DB	'text/html', 00H
	ORG $+2
$SG159119 DB	'ico', 00H
$SG159118 DB	'text/html', 00H
	ORG $+6
$SG159120 DB	'image/x-icon', 00H
_DATA	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	http_command
PUBLIC	http_startup
PUBLIC	http_get_root
PUBLIC	http_get_port
PUBLIC	http_get_portauth
PUBLIC	html_header
PUBLIC	html_footer
PUBLIC	html_include
PUBLIC	http_variable
PUBLIC	http_server
PUBLIC	http_root
EXTRN	__imp__errno:PROC
EXTRN	memmove:PROC
EXTRN	strchr:PROC
EXTRN	strrchr:PROC
EXTRN	strcmp:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp_strncmp:PROC
EXTRN	__imp__strnicmp:PROC
EXTRN	__imp_strdup:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_atoi:PROC
EXTRN	__imp_bind:PROC
EXTRN	__imp_htons:PROC
EXTRN	__imp_listen:PROC
EXTRN	__imp_select:PROC
EXTRN	__imp_setsockopt:PROC
EXTRN	__imp_shutdown:PROC
EXTRN	__imp_WSAGetLastError:PROC
EXTRN	__imp_access:PROC
EXTRN	__imp_close:PROC
EXTRN	__imp_read:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_feof:PROC
EXTRN	__imp_fopen:PROC
EXTRN	__imp_fread:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	__imp__localtime64:PROC
EXTRN	__imp_strftime:PROC
EXTRN	__imp__time64:PROC
EXTRN	__imp__stat64:PROC
EXTRN	__imp_fthread_self:PROC
EXTRN	__imp_hthread_initialize_lock:PROC
EXTRN	__imp_hthread_obtain_lock:PROC
EXTRN	__imp_hthread_release_lock:PROC
EXTRN	__imp_hthread_initialize_condition:PROC
EXTRN	__imp_hthread_signal_condition:PROC
EXTRN	__imp_hthread_create_thread:PROC
EXTRN	__imp_hthread_exit_thread:PROC
EXTRN	__imp_hthread_set_thread_prio:PROC
EXTRN	__imp_hthread_get_thread_prio:PROC
EXTRN	__imp_strlcpy:PROC
EXTRN	__imp_strlcat:PROC
EXTRN	__imp_timed_wait_condition_relative_usecs_impl:PROC
EXTRN	__imp_hprintf:PROC
EXTRN	__imp_hwrite:PROC
EXTRN	__imp_hgetc:PROC
EXTRN	__imp_hgets:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_strtok_r:PROC
EXTRN	__imp_sleep:PROC
EXTRN	__imp_sched_yield:PROC
EXTRN	__imp_realpath:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_get_process_directory:PROC
EXTRN	__imp_expand_environ_vars:PROC
EXTRN	__imp_w32_socket:PROC
EXTRN	__imp_w32_accept:PROC
EXTRN	__imp_w32_close_socket:PROC
EXTRN	__imp_w32_FD_SET:PROC
EXTRN	__imp_w32_FD_ISSET:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_w32_fclose:PROC
EXTRN	__imp_w32_hopen:PROC
EXTRN	__imp_hdl_addshut:PROC
EXTRN	__imp_hdl_delshut:PROC
EXTRN	__imp_hdl_getsym:PROC
EXTRN	__imp_read_socket:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_sysblk:BYTE
EXTRN	cgidir:BYTE
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
http_lock_root DQ 01H DUP (?)
http_serv DB	038H DUP (?)
http_struct_init DB 01H DUP (?)
	ALIGN	4

$SG159309 DB	01H DUP (?)
	ALIGN	4

$SG159313 DB	01H DUP (?)
	ALIGN	4

$SG159355 DB	01H DUP (?)
	ALIGN	4

$SG159359 DB	01H DUP (?)
	ALIGN	4

$SG159362 DB	01H DUP (?)
	ALIGN	4

$SG159436 DB	01H DUP (?)
	ALIGN	4

$SG159462 DB	01H DUP (?)
	ALIGN	4

$SG159478 DB	01H DUP (?)
	ALIGN	4

$SG159815 DB	01H DUP (?)
	ALIGN	4

$SG159816 DB	01H DUP (?)
	ALIGN	4

?msgbuf@?1??http_get_port@@9@9 DB 080H DUP (?)		; `http_get_port'::`2'::msgbuf
?msgbuf@?1??http_get_portauth@@9@9 DB 080H DUP (?)	; `http_get_portauth'::`2'::msgbuf
$SG159892 DB	01H DUP (?)
	ALIGN	4

$SG159893 DB	01H DUP (?)
	ALIGN	4

?msgbuf@?1??http_get_root@@9@9 DB 0107H DUP (?)		; `http_get_root'::`2'::msgbuf
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sscanf
pdata	ENDS
pdata	SEGMENT
$pdata$localtime DD imagerel localtime
	DD	imagerel localtime+25
	DD	imagerel $unwind$localtime
$pdata$time DD	imagerel time
	DD	imagerel time+25
	DD	imagerel $unwind$time
$pdata$strcaseabbrev DD imagerel strcaseabbrev
	DD	imagerel strcaseabbrev+320
	DD	imagerel $unwind$strcaseabbrev
$pdata$strupper DD imagerel strupper
	DD	imagerel strupper+114
	DD	imagerel $unwind$strupper
$pdata$http_command DD imagerel $LN67
	DD	imagerel $LN67+3469
	DD	imagerel $unwind$http_command
$pdata$http_startup DD imagerel $LN14
	DD	imagerel $LN14+602
	DD	imagerel $unwind$http_startup
$pdata$http_get_root DD imagerel $LN7
	DD	imagerel $LN7+118
	DD	imagerel $unwind$http_get_root
$pdata$http_get_port DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$http_get_port
$pdata$http_get_portauth DD imagerel $LN9
	DD	imagerel $LN9+217
	DD	imagerel $unwind$http_get_portauth
$pdata$html_header DD imagerel $LN5
	DD	imagerel $LN5+106
	DD	imagerel $unwind$html_header
$pdata$html_footer DD imagerel $LN4
	DD	imagerel $LN4+55
	DD	imagerel $unwind$html_footer
$pdata$html_include DD imagerel $LN7
	DD	imagerel $LN7+423
	DD	imagerel $unwind$html_include
$pdata$http_variable DD imagerel $LN7
	DD	imagerel $LN7+117
	DD	imagerel $unwind$http_variable
$pdata$http_server DD imagerel $LN34
	DD	imagerel $LN34+2135
	DD	imagerel $unwind$http_server
$pdata$http_root DD imagerel $LN20
	DD	imagerel $LN20+1406
	DD	imagerel $unwind$http_root
$pdata$http_exit DD imagerel http_exit
	DD	imagerel http_exit+264
	DD	imagerel $unwind$http_exit
$pdata$http_error DD imagerel http_error
	DD	imagerel http_error+99
	DD	imagerel $unwind$http_error
$pdata$http_timestring DD imagerel http_timestring
	DD	imagerel http_timestring+74
	DD	imagerel $unwind$http_timestring
$pdata$http_decode_base64 DD imagerel http_decode_base64
	DD	imagerel http_decode_base64+462
	DD	imagerel $unwind$http_decode_base64
$pdata$http_unescape DD imagerel http_unescape
	DD	imagerel http_unescape+476
	DD	imagerel $unwind$http_unescape
$pdata$http_interpret_variable_string DD imagerel http_interpret_variable_string
	DD	imagerel http_interpret_variable_string+322
	DD	imagerel $unwind$http_interpret_variable_string
$pdata$http_verify_path DD imagerel http_verify_path
	DD	imagerel http_verify_path+216
	DD	imagerel $unwind$http_verify_path
$pdata$http_authenticate DD imagerel http_authenticate
	DD	imagerel http_authenticate+235
	DD	imagerel $unwind$http_authenticate
$pdata$http_download DD imagerel http_download
	DD	imagerel http_download+677
	DD	imagerel $unwind$http_download
$pdata$http_request DD imagerel http_request
	DD	imagerel http_request+1668
	DD	imagerel $unwind$http_request
$pdata$http_shutdown DD imagerel http_shutdown
	DD	imagerel http_shutdown+132
	DD	imagerel $unwind$http_shutdown
pdata	ENDS
_DATA	SEGMENT
	ORG $+3
mime_types DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG159105
	DQ	FLAT:$SG159106
	DQ	FLAT:$SG159107
	DQ	FLAT:$SG159108
	DQ	FLAT:$SG159109
	DQ	FLAT:$SG159110
	DQ	FLAT:$SG159111
	DQ	FLAT:$SG159112
	DQ	FLAT:$SG159113
	DQ	FLAT:$SG159114
	DQ	FLAT:$SG159115
	DQ	FLAT:$SG159116
	DQ	FLAT:$SG159117
	DQ	FLAT:$SG159118
	DQ	FLAT:$SG159119
	DQ	FLAT:$SG159120
	DQ	0000000000000000H
	DQ	0000000000000000H
$SG159148 DB	'rb', 00H
	ORG $+1
$SG159151 DB	'E', 00H
	ORG $+2
$SG159150 DB	'fopen()', 00H
$SG159152 DB	'HHC01800%s HTTP server: error in function %s: %s', 0aH, 00H
	ORG $+2
$SG159156 DB	'E', 00H
	ORG $+2
$SG159153 DB	'html_include', 00H
	ORG $+3
$SG159154 DB	'httpserv.c', 00H
	ORG $+1
$SG159283 DB	'&; ', 00H
$SG159155 DB	'fopen()', 00H
$SG159157 DB	'HHC01800%s HTTP server: error in function %s: %s', 0aH, 00H
	ORG $+2
$SG159284 DB	'&; ', 00H
$SG159163 DB	'Expires: 0', 0aH, 00H
$SG159424 DB	'GET', 00H
$SG159164 DB	'Content-type: text/html', 0aH, 0aH, 00H
	ORG $+2
$SG159434 DB	'PUT', 00H
$SG159166 DB	'include/header.htmlpart', 00H
$SG159167 DB	'<HTML>', 0aH, '<HEAD>', 0aH, '<TITLE>Hercules</TITLE>', 0aH
	DB	'</HEAD>', 0aH, '<BODY>', 0aH, 0aH, 00H
	ORG $+1
$SG159172 DB	'include/footer.htmlpart', 00H
$SG159173 DB	0aH, '</BODY>', 0aH, '</HTML>', 0aH, 00H
	ORG $+2
$SG159448 DB	0dH, 0aH, 00H
	ORG $+1
$SG159197 DB	'httpserv.c:225', 00H
	ORG $+1
$SG159308 DB	'Invalid pathname', 00H
	ORG $+7
$SG159208 DB	'HTTP/1.0 %s', 0aH, '%sConnection: close', 0aH, 'Content-'
	DB	'Type: text/html', 0aH, 0aH, '<HTML><HEAD><TITLE>%s</TITLE></H'
	DB	'EAD><BODY><H1>%s</H1><P>%s</BODY></HTML>', 0aH, 0aH, 00H
$SG159466 DB	'/', 00H
	ORG $+2
$SG159218 DB	'%a, %d %b %Y %H:%M:%S %Z', 00H
	ORG $+7
$SG159310 DB	'404 File Not Found', 00H
	ORG $+5
$SG159235 DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123'
	DB	'456789+/', 00H
	ORG $+3
$SG159328 DB	'Basic', 00H
	ORG $+2
$SG159517 DB	'E', 00H
	ORG $+2
$SG159312 DB	'Invalid pathname', 00H
	ORG $+3
$SG159509 DB	'\html', 00H
	ORG $+2
$SG159525 DB	'E', 00H
	ORG $+2
$SG159314 DB	'404 File Not Found', 00H
	ORG $+1
$SG159531 DB	'\', 00H
	ORG $+2
$SG159356 DB	'404 File Not Found', 00H
	ORG $+1
$SG159532 DB	'\', 00H
	ORG $+2
$SG159358 DB	'The requested file is not a regular file', 00H
	ORG $+3
$SG159539 DB	'E', 00H
	ORG $+2
$SG159360 DB	'404 File Not Found', 00H
	ORG $+1
$SG159547 DB	'I', 00H
	ORG $+2
$SG159363 DB	'404 File Not Found', 00H
	ORG $+1
$SG159616 DB	'I', 00H
	ORG $+2
$SG159364 DB	'HTTP/1.0 200 OK', 0aH, 00H
	ORG $+3
$SG159623 DB	'E', 00H
	ORG $+2
$SG159367 DB	'Content-Type: %s', 0aH, 00H
	ORG $+2
$SG159629 DB	'W', 00H
	ORG $+2
$SG159368 DB	'Expires: %s', 0aH, 00H
	ORG $+3
$SG159369 DB	'Content-Length: %d', 0aH, 0aH, 00H
	ORG $+3
$SG159421 DB	' ', 09H, 0dH, 0aH, 00H
	ORG $+3
$SG159426 DB	' ', 09H, 0dH, 0aH, 00H
	ORG $+3
$SG159429 DB	'POST', 00H
	ORG $+3
$SG159431 DB	' ', 09H, 0dH, 0aH, 00H
	ORG $+3
$SG159435 DB	'This server does not accept PUT requests', 00H
	ORG $+3
$SG159636 DB	'bind()', 00H
	ORG $+1
$SG159637 DB	'E', 00H
	ORG $+2
$SG159437 DB	'400 Bad Request', 00H
$SG159440 DB	'Authorization:', 00H
	ORG $+1
$SG159442 DB	' ', 09H, 0dH, 0aH, 00H
	ORG $+3
$SG159443 DB	' ', 09H, 0dH, 0aH, 00H
	ORG $+3
$SG159446 DB	'Cookie:', 00H
$SG159450 DB	'Content-Length:', 00H
$SG159452 DB	' ', 09H, 0dH, 0aH, 00H
	ORG $+3
$SG159457 DB	'You must be authenticated to use this service', 00H
	ORG $+2
$SG159458 DB	'WWW-Authenticate: Basic realm="HERCULES"', 0aH, 00H
	ORG $+2
$SG159643 DB	'E', 00H
	ORG $+2
$SG159459 DB	'401 Authorization Required', 00H
	ORG $+1
$SG159647 DB	'I', 00H
	ORG $+2
$SG159461 DB	'You must specify a GET or POST request', 00H
	ORG $+1
$SG159463 DB	'400 Bad Request', 00H
$SG159467 DB	'hercules.html', 00H
	ORG $+2
$SG159470 DB	'/cgi-bin/', 00H
	ORG $+2
$SG159656 DB	'E', 00H
	ORG $+2
$SG159472 DB	'HTTP/1.0 200 OK', 0aH, 'Connection: close', 0aH, 00H
	ORG $+1
$SG159663 DB	'E', 00H
	ORG $+2
$SG159473 DB	'Date: %s', 0aH, 00H
	ORG $+2
$SG159670 DB	'E', 00H
	ORG $+2
$SG159475 DB	'HTTP/1.0 200 OK', 0aH, 'Connection: close', 0aH, 00H
	ORG $+1
$SG159677 DB	'I', 00H
	ORG $+2
$SG159476 DB	'Date: %s', 0aH, 00H
	ORG $+2
?first_call@?1??http_startup@@9@9 DD 01H		; `http_startup'::`2'::first_call
$SG159477 DB	'The requested file was not found', 00H
	ORG $+3
$SG159709 DB	'E', 00H
	ORG $+2
$SG159479 DB	'404 File Not Found', 00H
	ORG $+1
$SG159713 DB	'I', 00H
	ORG $+2
$SG159505 DB	'httpserv.c:703', 00H
	ORG $+1
$SG159510 DB	'%ProgramFiles%\Hercules\html\', 00H
	ORG $+2
$SG159516 DB	'''%s''', 00H
	ORG $+3
$SG159518 DB	'HHC01801%s HTTP server: invalid root directory: %s: %s', 0aH
	DB	00H
$SG159519 DB	'http_root', 00H
	ORG $+2
$SG159718 DB	'W', 00H
	ORG $+2
$SG159520 DB	'httpserv.c', 00H
	ORG $+1
$SG159762 DB	'/', 00H
	ORG $+2
$SG159521 DB	'httpserv.c:753', 00H
	ORG $+1
$SG159524 DB	'''%s''', 00H
	ORG $+3
$SG159526 DB	'HHC01801%s HTTP server: invalid root directory: %s: %s', 0aH
	DB	00H
$SG159527 DB	'http_root', 00H
	ORG $+2
$SG159768 DB	'I', 00H
	ORG $+2
$SG159528 DB	'httpserv.c', 00H
	ORG $+1
$SG159783 DB	'E', 00H
	ORG $+2
$SG159529 DB	'httpserv.c:775', 00H
	ORG $+1
$SG159537 DB	'''%s''', 00H
	ORG $+3
$SG159538 DB	'path length too long', 00H
	ORG $+3
$SG159540 DB	'HHC01801%s HTTP server: invalid root directory: %s: %s', 0aH
	DB	00H
$SG159541 DB	'http_root', 00H
	ORG $+2
$SG159792 DB	'noauth', 00H
	ORG $+1
$SG159799 DB	'E', 00H
	ORG $+2
$SG159542 DB	'httpserv.c', 00H
	ORG $+1
$SG159808 DB	'E', 00H
	ORG $+2
$SG159543 DB	'httpserv.c:799', 00H
	ORG $+1
$SG159546 DB	'''%s''', 00H
	ORG $+3
$SG159548 DB	'HHC01802%s HTTP server using root directory %s', 0aH, 00H
$SG159549 DB	'http_root', 00H
	ORG $+2
$SG159821 DB	'I', 00H
	ORG $+2
$SG159550 DB	'httpserv.c', 00H
	ORG $+1
$SG159832 DB	'E', 00H
	ORG $+2
$SG159551 DB	'httpserv.c:826', 00H
	ORG $+1
$SG159560 DB	'httpserv.c:838', 00H
	ORG $+1
$SG159562 DB	'httpserv.c:843', 00H
	ORG $+1
$SG159563 DB	'httpserv.c:845', 00H
	ORG $+1
$SG159612 DB	'http_shutdown', 00H
	ORG $+2
$SG159613 DB	'httpserv.c:870', 00H
	ORG $+1
$SG159614 DB	'http_server', 00H
$SG159841 DB	'I', 00H
	ORG $+2
$SG159615 DB	'httpserv.c:873', 00H
	ORG $+1
$SG159617 DB	'HHC00100%s Thread id %8.8x, prio %d, name ''%s'' started'
	DB	0aH, 00H
$SG159618 DB	'http_server', 00H
$SG159846 DB	'W', 00H
	ORG $+2
$SG159619 DB	'httpserv.c', 00H
	ORG $+1
$SG159856 DB	'I', 00H
	ORG $+2
$SG159622 DB	'socket()', 00H
	ORG $+3
$SG159753 DB	'rootx', 00H
	ORG $+2
$SG159860 DB	'I', 00H
	ORG $+2
$SG159624 DB	'HHC01800%s HTTP server: error in function %s: %s', 0aH, 00H
	ORG $+2
$SG159864 DB	'I', 00H
	ORG $+2
$SG159625 DB	'http_server', 00H
$SG159868 DB	'I', 00H
	ORG $+2
$SG159626 DB	'httpserv.c', 00H
	ORG $+5
$SG159631 DB	'http_server', 00H
$SG159767 DB	'ROOT', 00H
	ORG $+7
$SG159630 DB	'HHC01804%s HTTP server waiting for port %u to become fre'
	DB	'e for requests', 0aH, 00H
$SG159632 DB	'httpserv.c', 00H
	ORG $+1
$SG159872 DB	'I', 00H
	ORG $+2
$SG159638 DB	'HHC01800%s HTTP server: error in function %s: %s', 0aH, 00H
	ORG $+2
$SG159877 DB	'E', 00H
	ORG $+2
$SG159639 DB	'http_server', 00H
$SG159884 DB	'%hu', 00H
$SG159640 DB	'httpserv.c', 00H
	ORG $+1
$SG159896 DB	'%s', 00H
	ORG $+1
$SG159642 DB	'listen()', 00H
	ORG $+3
$SG159776 DB	'portx', 00H
	ORG $+2
$SG159895 DB	'noauth', 00H
	ORG $+5
$SG159644 DB	'HHC01800%s HTTP server: error in function %s: %s', 0aH, 00H
	ORG $+6
$SG159645 DB	'http_server', 00H
	ORG $+4
$SG159646 DB	'httpserv.c', 00H
	ORG $+5
$SG159648 DB	'HHC01803%s HTTP server waiting for requests on port %u', 0aH
	DB	00H
$SG159649 DB	'http_server', 00H
	ORG $+4
$SG159650 DB	'httpserv.c', 00H
	ORG $+5
$SG159655 DB	'select()', 00H
	ORG $+7
$SG159657 DB	'HHC01800%s HTTP server: error in function %s: %s', 0aH, 00H
	ORG $+6
$SG159658 DB	'http_server', 00H
	ORG $+4
$SG159659 DB	'httpserv.c', 00H
	ORG $+5
$SG159662 DB	'accept()', 00H
	ORG $+7
$SG159664 DB	'HHC01800%s HTTP server: error in function %s: %s', 0aH, 00H
	ORG $+6
$SG159665 DB	'http_server', 00H
	ORG $+4
$SG159666 DB	'httpserv.c', 00H
	ORG $+5
$SG159667 DB	'httpserv.c:974', 00H
	ORG $+1
$SG159668 DB	'http_request', 00H
	ORG $+3
$SG159671 DB	'HHC00102%s Error in function create_thread(): %s', 0aH, 00H
	ORG $+6
$SG159672 DB	'http_server', 00H
	ORG $+4
$SG159673 DB	'httpserv.c', 00H
	ORG $+5
$SG159675 DB	'http_server', 00H
	ORG $+4
$SG159676 DB	'httpserv.c:993', 00H
	ORG $+1
$SG159678 DB	'HHC00101%s Thread id %8.8x, prio %d, name ''%s'' ended', 0aH
	DB	00H
	ORG $+2
$SG159679 DB	'http_server', 00H
	ORG $+4
$SG159680 DB	'httpserv.c', 00H
	ORG $+5
$SG159681 DB	'httpserv.c:999', 00H
	ORG $+1
$SG159693 DB	'httpserv.c:1018', 00H
$SG159694 DB	'httpserv.c:1019', 00H
$SG159695 DB	'&http_serv.http_lock_shutdown', 00H
	ORG $+2
$SG159696 DB	'httpserv.c:1020', 00H
$SG159697 DB	'&http_lock_root', 00H
$SG159705 DB	'httpserv.c:1045', 00H
$SG159706 DB	'http_server', 00H
	ORG $+4
$SG159710 DB	'HHC00102%s Error in function create_thread(): %s', 0aH, 00H
	ORG $+6
$SG159711 DB	'http_startup', 00H
	ORG $+3
$SG159712 DB	'httpserv.c', 00H
	ORG $+5
$SG159714 DB	'HHC01807%s HTTP server signaled to start', 0aH, 00H
	ORG $+6
$SG159715 DB	'http_startup', 00H
	ORG $+3
$SG159716 DB	'httpserv.c', 00H
	ORG $+5
$SG159717 DB	'already started', 00H
$SG159719 DB	'HHC01806%s HTTP server is %s', 0aH, 00H
	ORG $+2
$SG159720 DB	'http_startup', 00H
	ORG $+3
$SG159721 DB	'httpserv.c', 00H
	ORG $+5
$SG159746 DB	'httpserv.c:1079', 00H
$SG159747 DB	'httpserv.c:1080', 00H
$SG159748 DB	'&http_serv.http_lock_shutdown', 00H
	ORG $+2
$SG159749 DB	'httpserv.c:1081', 00H
$SG159750 DB	'&http_lock_root', 00H
$SG159756 DB	'httproot', 00H
	ORG $+7
$SG159758 DB	'httpserv.c:1096', 00H
$SG159763 DB	'httpserv.c:1114', 00H
$SG159765 DB	'<not specified>', 00H
$SG159766 DB	'HTTPROOT', 00H
	ORG $+7
$SG159769 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
	ORG $+4
$SG159770 DB	'http_command', 00H
	ORG $+3
$SG159771 DB	'httpserv.c', 00H
	ORG $+5
$SG159779 DB	'httpport', 00H
	ORG $+7
$SG159784 DB	'HHC01812%s HTTP server must be stopped for this command', 0aH
	DB	00H
	ORG $+7
$SG159785 DB	'http_command', 00H
	ORG $+3
$SG159786 DB	'httpserv.c', 00H
	ORG $+1
$SG159789 DB	'%hu%c', 00H
	ORG $+2
$SG159795 DB	'auth', 00H
	ORG $+7
$SG159801 DB	'http_command', 00H
	ORG $+3
$SG159807 DB	'http', 00H
	ORG $+3
$SG159800 DB	'HHC01814%s HTTP server: auth requires valid userid and p'
	DB	'assword operands', 0aH, 00H
	ORG $+6
$SG159802 DB	'httpserv.c', 00H
	ORG $+5
$SG159809 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+6
$SG159810 DB	'http_command', 00H
	ORG $+3
$SG159811 DB	'httpserv.c', 00H
	ORG $+5
$SG159817 DB	'port=%hu auth userid<%s> password<%s>', 00H
	ORG $+2
$SG159818 DB	'port=%hu noauth', 00H
$SG159819 DB	'HTTPPORT', 00H
	ORG $+3
$SG159820 DB	'PORT', 00H
	ORG $+7
$SG159822 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
	ORG $+4
$SG159823 DB	'http_command', 00H
	ORG $+3
$SG159824 DB	'httpserv.c', 00H
	ORG $+1
$SG159828 DB	'start', 00H
	ORG $+6
$SG159831 DB	'not valid', 00H
	ORG $+6
$SG159833 DB	'HHC01815%s HTTP server port is %s', 0aH, 00H
	ORG $+5
$SG159834 DB	'http_command', 00H
	ORG $+3
$SG159835 DB	'httpserv.c', 00H
	ORG $+1
$SG159838 DB	'stop', 00H
	ORG $+7
$SG159842 DB	'HHC01805%s HTTP server signaled to stop', 0aH, 00H
	ORG $+7
$SG159843 DB	'http_command', 00H
	ORG $+3
$SG159844 DB	'httpserv.c', 00H
	ORG $+5
$SG159845 DB	'already stopped', 00H
$SG159847 DB	'HHC01806%s HTTP server is %s', 0aH, 00H
	ORG $+2
$SG159848 DB	'http_command', 00H
	ORG $+3
$SG159849 DB	'httpserv.c', 00H
	ORG $+5
$SG159857 DB	'HHC01809%s HTTP server is waiting for requests', 0aH, 00H
$SG159858 DB	'http_command', 00H
	ORG $+3
$SG159859 DB	'httpserv.c', 00H
	ORG $+5
$SG159861 DB	'HHC01813%s HTTP server waiting for bind to complete; por'
	DB	't in use by another server', 0aH, 00H
	ORG $+4
$SG159862 DB	'http_command', 00H
	ORG $+3
$SG159863 DB	'httpserv.c', 00H
	ORG $+5
$SG159865 DB	'HHC01810%s HTTP server is stopped', 0aH, 00H
	ORG $+5
$SG159866 DB	'http_command', 00H
	ORG $+3
$SG159867 DB	'httpserv.c', 00H
	ORG $+5
$SG159869 DB	'HHC01811%s HTTP server root directory %s', 0aH, 00H
	ORG $+6
$SG159870 DB	'http_command', 00H
	ORG $+3
$SG159871 DB	'httpserv.c', 00H
	ORG $+5
$SG159873 DB	'HHC01808%s HTTP server port is %s with %s', 0aH, 00H
	ORG $+5
$SG159874 DB	'http_command', 00H
	ORG $+3
$SG159875 DB	'httpserv.c', 00H
	ORG $+1
$SG159876 DB	'http', 00H
	ORG $+7
$SG159879 DB	'http_command', 00H
	ORG $+3
$SG159905 DB	'is <not specified>', 00H
	ORG $+5
$SG159878 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+6
$SG159880 DB	'httpserv.c', 00H
	ORG $+5
$SG159894 DB	'auth userid<%s> password<%s>', 00H
	ORG $+3
$SG159908 DB	'''%s''', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:http_request
	DD	017H
	DD	066bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:http_download
	DD	01bH
	DD	028dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:http_verify_path
	DD	01bH
	DD	0c0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:http_root
	DD	013H
	DD	0565H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:http_server
	DD	01dH
	DD	083eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:html_include
	DD	01bH
	DD	018fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:http_command
	DD	01bH
	DD	0d74H
voltbl	ENDS
xdata	SEGMENT
$unwind$localtime DD 010901H
	DD	04209H
$unwind$time DD	010901H
	DD	04209H
$unwind$strcaseabbrev DD 011301H
	DD	08213H
$unwind$strupper DD 010e01H
	DD	0620eH
$unwind$http_command DD 032319H
	DD	0480111H
	DD	0700aH
	DD	imagerel __GSHandlerCheck
	DD	0230H
$unwind$http_startup DD 020901H
	DD	070059209H
$unwind$http_get_root DD 010401H
	DD	06204H
$unwind$http_get_port DD 010401H
	DD	04204H
$unwind$http_get_portauth DD 010401H
	DD	08204H
$unwind$html_header DD 010901H
	DD	04209H
$unwind$html_footer DD 010901H
	DD	04209H
$unwind$html_include DD 022319H
	DD	0550111H
	DD	imagerel __GSHandlerCheck
	DD	0290H
$unwind$http_variable DD 011301H
	DD	06213H
$unwind$http_server DD 032519H
	DD	041e0113H
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	020e0H
$unwind$http_root DD 031b19H
	DD	01020109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0800H
$unwind$http_exit DD 010901H
	DD	08209H
$unwind$http_error DD 011801H
	DD	08218H
$unwind$http_timestring DD 011201H
	DD	06212H
$unwind$http_decode_base64 DD 010901H
	DD	0a209H
$unwind$http_unescape DD 010901H
	DD	08209H
$unwind$http_interpret_variable_string DD 011301H
	DD	08213H
$unwind$http_verify_path DD 022319H
	DD	04b0111H
	DD	imagerel __GSHandlerCheck
	DD	0240H
$unwind$http_authenticate DD 011301H
	DD	08213H
$unwind$http_download DD 022319H
	DD	05f0111H
	DD	imagerel __GSHandlerCheck
	DD	02e0H
$unwind$http_request DD 031f19H
	DD	046010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0220H
$unwind$http_shutdown DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
unused$ = 64
http_shutdown PROC

; 835  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@http_shutd:

; 836  :     UNREFERENCED(unused);

  00009	33 c0		 xor	 eax, eax
  0000b	85 c0		 test	 eax, eax
  0000d	75 fa		 jne	 SHORT $LN4@http_shutd

; 837  : 
; 838  :     obtain_lock(&http_serv.http_lock_shutdown);

  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159560
  00016	48 8d 0d 30 00
	00 00		 lea	 rcx, OFFSET FLAT:http_serv+48
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 839  : 
; 840  :     http_serv.httpshutdown = TRUE;      /* signal shutdown */

  00023	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  0002a	0c 04		 or	 al, 4
  0002c	88 05 20 00 00
	00		 mov	 BYTE PTR http_serv+32, al

; 841  : 
; 842  :     if ( sysblk.httptid != 0 )

  00032	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00039	83 b8 78 13 00
	00 00		 cmp	 DWORD PTR [rax+4984], 0
  00040	74 29		 je	 SHORT $LN5@http_shutd

; 843  :         timed_wait_condition_relative_usecs(&http_serv.http_wait_shutdown,&http_serv.http_lock_shutdown,2*1000*1000,NULL);

  00042	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159562
  00049	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004e	45 33 c9	 xor	 r9d, r9d
  00051	41 b8 80 84 1e
	00		 mov	 r8d, 2000000		; 001e8480H
  00057	48 8d 15 30 00
	00 00		 lea	 rdx, OFFSET FLAT:http_serv+48
  0005e	48 8d 0d 28 00
	00 00		 lea	 rcx, OFFSET FLAT:http_serv+40
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_timed_wait_condition_relative_usecs_impl
$LN5@http_shutd:

; 844  : 
; 845  :     release_lock(&http_serv.http_lock_shutdown);

  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159563
  00072	48 8d 0d 30 00
	00 00		 lea	 rcx, OFFSET FLAT:http_serv+48
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 846  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
http_shutdown ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
pointer$ = 32
webblk$ = 40
url$ = 48
content_length$ = 56
i$1 = 60
strtok_str$ = 64
tv67 = 72
authok$ = 76
cgient$ = 80
sock$ = 88
post_arg$2 = 96
dyncgi$3 = 104
line$ = 112
tbuf$4 = 384
tbuf$5 = 464
__$ArrayPad$ = 544
arg$ = 576
http_request PROC

; 538  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 81 ec 30 02
	00 00		 sub	 rsp, 560		; 00000230H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 539  :     WEBBLK *webblk;
; 540  :     int authok = !http_serv.httpauth;

  0001f	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  00026	24 01		 and	 al, 1
  00028	0f b6 c0	 movzx	 eax, al
  0002b	85 c0		 test	 eax, eax
  0002d	75 0a		 jne	 SHORT $LN46@http_reque
  0002f	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv67[rsp], 1
  00037	eb 08		 jmp	 SHORT $LN47@http_reque
$LN46@http_reque:
  00039	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv67[rsp], 0
$LN47@http_reque:
  00041	8b 44 24 48	 mov	 eax, DWORD PTR tv67[rsp]
  00045	89 44 24 4c	 mov	 DWORD PTR authok$[rsp], eax

; 541  :     char line[HTTP_PATH_LENGTH];
; 542  :     char *url = NULL;

  00049	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR url$[rsp], 0

; 543  :     char *pointer;
; 544  :     char *strtok_str = NULL;

  00052	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR strtok_str$[rsp], 0

; 545  :     CGITAB *cgient;
; 546  :     int content_length = 0;

  0005b	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR content_length$[rsp], 0

; 547  :     int sock = (int) (uintptr_t) arg;

  00063	8b 84 24 40 02
	00 00		 mov	 eax, DWORD PTR arg$[rsp]
  0006a	89 44 24 58	 mov	 DWORD PTR sock$[rsp], eax

; 548  : 
; 549  :     if(!(webblk = malloc(sizeof(WEBBLK))))

  0006e	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00079	48 89 44 24 28	 mov	 QWORD PTR webblk$[rsp], rax
  0007e	48 83 7c 24 28
	00		 cmp	 QWORD PTR webblk$[rsp], 0
  00084	75 0a		 jne	 SHORT $LN14@http_reque

; 550  :         http_exit(webblk);

  00086	48 8b 4c 24 28	 mov	 rcx, QWORD PTR webblk$[rsp]
  0008b	e8 00 00 00 00	 call	 http_exit
$LN14@http_reque:

; 551  : 
; 552  :     memset(webblk,0,sizeof(WEBBLK));

  00090	48 8b 7c 24 28	 mov	 rdi, QWORD PTR webblk$[rsp]
  00095	33 c0		 xor	 eax, eax
  00097	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  0009c	f3 aa		 rep stosb

; 553  :     webblk->sock = sock;

  0009e	48 8b 44 24 28	 mov	 rax, QWORD PTR webblk$[rsp]
  000a3	8b 4c 24 58	 mov	 ecx, DWORD PTR sock$[rsp]
  000a7	89 08		 mov	 DWORD PTR [rax], ecx
$LN2@http_reque:

; 554  : 
; 555  :     while (hgets(line, sizeof(line), webblk->sock))

  000a9	48 8b 44 24 28	 mov	 rax, QWORD PTR webblk$[rsp]
  000ae	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  000b1	ba 04 01 00 00	 mov	 edx, 260		; 00000104H
  000b6	48 8d 4c 24 70	 lea	 rcx, QWORD PTR line$[rsp]
  000bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hgets
  000c1	48 85 c0	 test	 rax, rax
  000c4	0f 84 3c 02 00
	00		 je	 $LN3@http_reque

; 556  :     {
; 557  :         if (*line == '\r' || *line == '\n')

  000ca	b8 01 00 00 00	 mov	 eax, 1
  000cf	48 6b c0 00	 imul	 rax, rax, 0
  000d3	0f be 44 04 70	 movsx	 eax, BYTE PTR line$[rsp+rax]
  000d8	83 f8 0d	 cmp	 eax, 13
  000db	74 13		 je	 SHORT $LN16@http_reque
  000dd	b8 01 00 00 00	 mov	 eax, 1
  000e2	48 6b c0 00	 imul	 rax, rax, 0
  000e6	0f be 44 04 70	 movsx	 eax, BYTE PTR line$[rsp+rax]
  000eb	83 f8 0a	 cmp	 eax, 10
  000ee	75 05		 jne	 SHORT $LN15@http_reque
$LN16@http_reque:

; 558  :             break;

  000f0	e9 11 02 00 00	 jmp	 $LN3@http_reque
$LN15@http_reque:

; 559  : 
; 560  :         if((pointer = strtok_r(line," \t\r\n",&strtok_str)))

  000f5	4c 8d 44 24 40	 lea	 r8, QWORD PTR strtok_str$[rsp]
  000fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159421
  00101	48 8d 4c 24 70	 lea	 rcx, QWORD PTR line$[rsp]
  00106	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtok_r
  0010c	48 89 44 24 20	 mov	 QWORD PTR pointer$[rsp], rax
  00111	48 83 7c 24 20
	00		 cmp	 QWORD PTR pointer$[rsp], 0
  00117	0f 84 e4 01 00
	00		 je	 $LN17@http_reque

; 561  :         {
; 562  :             if(!strcasecmp(pointer,"GET"))

  0011d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159424
  00124	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pointer$[rsp]
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0012f	85 c0		 test	 eax, eax
  00131	75 42		 jne	 SHORT $LN18@http_reque

; 563  :             {
; 564  :                 if((pointer = strtok_r(NULL," \t\r\n",&strtok_str)))

  00133	4c 8d 44 24 40	 lea	 r8, QWORD PTR strtok_str$[rsp]
  00138	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159426
  0013f	33 c9		 xor	 ecx, ecx
  00141	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtok_r
  00147	48 89 44 24 20	 mov	 QWORD PTR pointer$[rsp], rax
  0014c	48 83 7c 24 20
	00		 cmp	 QWORD PTR pointer$[rsp], 0
  00152	74 1c		 je	 SHORT $LN20@http_reque

; 565  :                 {
; 566  :                     webblk->request_type = REQTYPE_GET;

  00154	48 8b 44 24 28	 mov	 rax, QWORD PTR webblk$[rsp]
  00159	c7 40 04 01 00
	00 00		 mov	 DWORD PTR [rax+4], 1

; 567  :                     url = strdup(pointer);

  00160	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pointer$[rsp]
  00165	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0016b	48 89 44 24 30	 mov	 QWORD PTR url$[rsp], rax
$LN20@http_reque:

; 568  :                 }
; 569  :             }

  00170	e9 8c 01 00 00	 jmp	 $LN19@http_reque
$LN18@http_reque:

; 570  :             else
; 571  :             if(!strcasecmp(pointer,"POST"))

  00175	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159429
  0017c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pointer$[rsp]
  00181	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00187	85 c0		 test	 eax, eax
  00189	75 42		 jne	 SHORT $LN21@http_reque

; 572  :             {
; 573  :                 if((pointer = strtok_r(NULL," \t\r\n",&strtok_str)))

  0018b	4c 8d 44 24 40	 lea	 r8, QWORD PTR strtok_str$[rsp]
  00190	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159431
  00197	33 c9		 xor	 ecx, ecx
  00199	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtok_r
  0019f	48 89 44 24 20	 mov	 QWORD PTR pointer$[rsp], rax
  001a4	48 83 7c 24 20
	00		 cmp	 QWORD PTR pointer$[rsp], 0
  001aa	74 1c		 je	 SHORT $LN23@http_reque

; 574  :                 {
; 575  :                     webblk->request_type = REQTYPE_POST;

  001ac	48 8b 44 24 28	 mov	 rax, QWORD PTR webblk$[rsp]
  001b1	c7 40 04 02 00
	00 00		 mov	 DWORD PTR [rax+4], 2

; 576  :                     url = strdup(pointer);

  001b8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pointer$[rsp]
  001bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  001c3	48 89 44 24 30	 mov	 QWORD PTR url$[rsp], rax
$LN23@http_reque:

; 577  :                 }
; 578  :             }

  001c8	e9 34 01 00 00	 jmp	 $LN22@http_reque
$LN21@http_reque:

; 579  :             else
; 580  :             if(!strcasecmp(pointer,"PUT"))

  001cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159434
  001d4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pointer$[rsp]
  001d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  001df	85 c0		 test	 eax, eax
  001e1	75 24		 jne	 SHORT $LN24@http_reque

; 581  :             {
; 582  :                 http_error(webblk,"400 Bad Request", "",

  001e3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159435
  001ea	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159436
  001f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159437
  001f8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR webblk$[rsp]
  001fd	e8 00 00 00 00	 call	 http_error

; 583  :                                   "This server does not accept PUT requests");
; 584  :             }

  00202	e9 fa 00 00 00	 jmp	 $LN25@http_reque
$LN24@http_reque:

; 585  :             else
; 586  :             if(!strcasecmp(pointer,"Authorization:"))

  00207	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159440
  0020e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pointer$[rsp]
  00213	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00219	85 c0		 test	 eax, eax
  0021b	75 50		 jne	 SHORT $LN26@http_reque

; 587  :             {
; 588  :                 if((pointer = strtok_r(NULL," \t\r\n",&strtok_str)))

  0021d	4c 8d 44 24 40	 lea	 r8, QWORD PTR strtok_str$[rsp]
  00222	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159442
  00229	33 c9		 xor	 ecx, ecx
  0022b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtok_r
  00231	48 89 44 24 20	 mov	 QWORD PTR pointer$[rsp], rax
  00236	48 83 7c 24 20
	00		 cmp	 QWORD PTR pointer$[rsp], 0
  0023c	74 2a		 je	 SHORT $LN28@http_reque

; 589  :                     authok = http_authenticate(webblk,pointer,

  0023e	4c 8d 44 24 40	 lea	 r8, QWORD PTR strtok_str$[rsp]
  00243	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159443
  0024a	33 c9		 xor	 ecx, ecx
  0024c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtok_r
  00252	4c 8b c0	 mov	 r8, rax
  00255	48 8b 54 24 20	 mov	 rdx, QWORD PTR pointer$[rsp]
  0025a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR webblk$[rsp]
  0025f	e8 00 00 00 00	 call	 http_authenticate
  00264	89 44 24 4c	 mov	 DWORD PTR authok$[rsp], eax
$LN28@http_reque:

; 590  :                                   strtok_r(NULL," \t\r\n",&strtok_str));
; 591  :             }

  00268	e9 94 00 00 00	 jmp	 $LN27@http_reque
$LN26@http_reque:

; 592  :             else
; 593  :             if(!strcasecmp(pointer,"Cookie:"))

  0026d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159446
  00274	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pointer$[rsp]
  00279	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0027f	85 c0		 test	 eax, eax
  00281	75 38		 jne	 SHORT $LN29@http_reque

; 594  :             {
; 595  :                 if((pointer = strtok_r(NULL,"\r\n",&strtok_str)))

  00283	4c 8d 44 24 40	 lea	 r8, QWORD PTR strtok_str$[rsp]
  00288	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159448
  0028f	33 c9		 xor	 ecx, ecx
  00291	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtok_r
  00297	48 89 44 24 20	 mov	 QWORD PTR pointer$[rsp], rax
  0029c	48 83 7c 24 20
	00		 cmp	 QWORD PTR pointer$[rsp], 0
  002a2	74 15		 je	 SHORT $LN31@http_reque

; 596  :                     http_interpret_variable_string(webblk, pointer, VARTYPE_COOKIE);

  002a4	41 b8 08 00 00
	00		 mov	 r8d, 8
  002aa	48 8b 54 24 20	 mov	 rdx, QWORD PTR pointer$[rsp]
  002af	48 8b 4c 24 28	 mov	 rcx, QWORD PTR webblk$[rsp]
  002b4	e8 00 00 00 00	 call	 http_interpret_variable_string
$LN31@http_reque:

; 597  :             }

  002b9	eb 46		 jmp	 SHORT $LN30@http_reque
$LN29@http_reque:

; 598  :             else
; 599  :             if(!strcasecmp(pointer,"Content-Length:"))

  002bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159450
  002c2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pointer$[rsp]
  002c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  002cd	85 c0		 test	 eax, eax
  002cf	75 30		 jne	 SHORT $LN32@http_reque

; 600  :             {
; 601  :                 if((pointer = strtok_r(NULL," \t\r\n",&strtok_str)))

  002d1	4c 8d 44 24 40	 lea	 r8, QWORD PTR strtok_str$[rsp]
  002d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159452
  002dd	33 c9		 xor	 ecx, ecx
  002df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtok_r
  002e5	48 89 44 24 20	 mov	 QWORD PTR pointer$[rsp], rax
  002ea	48 83 7c 24 20
	00		 cmp	 QWORD PTR pointer$[rsp], 0
  002f0	74 0f		 je	 SHORT $LN33@http_reque

; 602  :                     content_length = atoi(pointer);

  002f2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pointer$[rsp]
  002f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  002fd	89 44 24 38	 mov	 DWORD PTR content_length$[rsp], eax
$LN33@http_reque:
$LN32@http_reque:
$LN30@http_reque:
$LN27@http_reque:
$LN25@http_reque:
$LN22@http_reque:
$LN19@http_reque:
$LN17@http_reque:

; 603  :             }
; 604  :         }
; 605  :     }

  00301	e9 a3 fd ff ff	 jmp	 $LN2@http_reque
$LN3@http_reque:

; 606  :     webblk->request = url;

  00306	48 8b 44 24 28	 mov	 rax, QWORD PTR webblk$[rsp]
  0030b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR url$[rsp]
  00310	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 607  : 
; 608  :     if(webblk->request_type == REQTYPE_POST
; 609  :       && content_length != 0)

  00314	48 8b 44 24 28	 mov	 rax, QWORD PTR webblk$[rsp]
  00319	83 78 04 02	 cmp	 DWORD PTR [rax+4], 2
  0031d	0f 85 ba 00 00
	00		 jne	 $LN34@http_reque
  00323	83 7c 24 38 00	 cmp	 DWORD PTR content_length$[rsp], 0
  00328	0f 84 af 00 00
	00		 je	 $LN34@http_reque

; 610  :     {
; 611  :     char *post_arg;
; 612  :         if((pointer = post_arg = malloc(content_length + 1)))

  0032e	8b 44 24 38	 mov	 eax, DWORD PTR content_length$[rsp]
  00332	ff c0		 inc	 eax
  00334	48 98		 cdqe
  00336	48 8b c8	 mov	 rcx, rax
  00339	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0033f	48 89 44 24 60	 mov	 QWORD PTR post_arg$2[rsp], rax
  00344	48 8b 44 24 60	 mov	 rax, QWORD PTR post_arg$2[rsp]
  00349	48 89 44 24 20	 mov	 QWORD PTR pointer$[rsp], rax
  0034e	48 83 7c 24 20
	00		 cmp	 QWORD PTR pointer$[rsp], 0
  00354	0f 84 83 00 00
	00		 je	 $LN35@http_reque

; 613  :         {
; 614  :         int i;
; 615  :             for(i = 0; i < content_length; i++)

  0035a	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  00362	eb 0a		 jmp	 SHORT $LN6@http_reque
$LN4@http_reque:
  00364	8b 44 24 3c	 mov	 eax, DWORD PTR i$1[rsp]
  00368	ff c0		 inc	 eax
  0036a	89 44 24 3c	 mov	 DWORD PTR i$1[rsp], eax
$LN6@http_reque:
  0036e	8b 44 24 38	 mov	 eax, DWORD PTR content_length$[rsp]
  00372	39 44 24 3c	 cmp	 DWORD PTR i$1[rsp], eax
  00376	7d 3d		 jge	 SHORT $LN5@http_reque

; 616  :             {
; 617  :                 *pointer = hgetc(webblk->sock);

  00378	48 8b 44 24 28	 mov	 rax, QWORD PTR webblk$[rsp]
  0037d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0037f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hgetc
  00385	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pointer$[rsp]
  0038a	88 01		 mov	 BYTE PTR [rcx], al

; 618  :                 if(*pointer != '\n' && *pointer != '\r')

  0038c	48 8b 44 24 20	 mov	 rax, QWORD PTR pointer$[rsp]
  00391	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00394	83 f8 0a	 cmp	 eax, 10
  00397	74 1a		 je	 SHORT $LN36@http_reque
  00399	48 8b 44 24 20	 mov	 rax, QWORD PTR pointer$[rsp]
  0039e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  003a1	83 f8 0d	 cmp	 eax, 13
  003a4	74 0d		 je	 SHORT $LN36@http_reque

; 619  :                     pointer++;

  003a6	48 8b 44 24 20	 mov	 rax, QWORD PTR pointer$[rsp]
  003ab	48 ff c0	 inc	 rax
  003ae	48 89 44 24 20	 mov	 QWORD PTR pointer$[rsp], rax
$LN36@http_reque:

; 620  :             }

  003b3	eb af		 jmp	 SHORT $LN4@http_reque
$LN5@http_reque:

; 621  :             *pointer = '\0';

  003b5	48 8b 44 24 20	 mov	 rax, QWORD PTR pointer$[rsp]
  003ba	c6 00 00	 mov	 BYTE PTR [rax], 0

; 622  :             http_interpret_variable_string(webblk, post_arg, VARTYPE_POST);

  003bd	41 b8 02 00 00
	00		 mov	 r8d, 2
  003c3	48 8b 54 24 60	 mov	 rdx, QWORD PTR post_arg$2[rsp]
  003c8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR webblk$[rsp]
  003cd	e8 00 00 00 00	 call	 http_interpret_variable_string

; 623  :             free(post_arg);

  003d2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR post_arg$2[rsp]
  003d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN35@http_reque:
$LN34@http_reque:

; 624  :         }
; 625  :     }
; 626  : 
; 627  :     if (!authok)

  003dd	83 7c 24 4c 00	 cmp	 DWORD PTR authok$[rsp], 0
  003e2	75 1f		 jne	 SHORT $LN37@http_reque

; 628  :     {
; 629  :         http_error(webblk, "401 Authorization Required",

  003e4	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159457
  003eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159458
  003f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159459
  003f9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR webblk$[rsp]
  003fe	e8 00 00 00 00	 call	 http_error
$LN37@http_reque:

; 630  :                            "WWW-Authenticate: Basic realm=\"HERCULES\"\n",
; 631  :                            "You must be authenticated to use this service");
; 632  :     }
; 633  : 
; 634  :     if (!url)

  00403	48 83 7c 24 30
	00		 cmp	 QWORD PTR url$[rsp], 0
  00409	75 1f		 jne	 SHORT $LN38@http_reque

; 635  :     {
; 636  :         http_error(webblk,"400 Bad Request", "",

  0040b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159461
  00412	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159462
  00419	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159463
  00420	48 8b 4c 24 28	 mov	 rcx, QWORD PTR webblk$[rsp]
  00425	e8 00 00 00 00	 call	 http_error
$LN38@http_reque:

; 637  :                           "You must specify a GET or POST request");
; 638  :     }
; 639  : 
; 640  :     /* anything following a ? in the URL is part of the get arguments */
; 641  :     if ((pointer=strchr(url,'?'))) {

  0042a	ba 3f 00 00 00	 mov	 edx, 63			; 0000003fH
  0042f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR url$[rsp]
  00434	e8 00 00 00 00	 call	 strchr
  00439	48 89 44 24 20	 mov	 QWORD PTR pointer$[rsp], rax
  0043e	48 83 7c 24 20
	00		 cmp	 QWORD PTR pointer$[rsp], 0
  00444	74 2a		 je	 SHORT $LN39@http_reque

; 642  :         *pointer++ = 0;

  00446	48 8b 44 24 20	 mov	 rax, QWORD PTR pointer$[rsp]
  0044b	c6 00 00	 mov	 BYTE PTR [rax], 0
  0044e	48 8b 44 24 20	 mov	 rax, QWORD PTR pointer$[rsp]
  00453	48 ff c0	 inc	 rax
  00456	48 89 44 24 20	 mov	 QWORD PTR pointer$[rsp], rax

; 643  :         http_interpret_variable_string(webblk, pointer, VARTYPE_GET);

  0045b	41 b8 01 00 00
	00		 mov	 r8d, 1
  00461	48 8b 54 24 20	 mov	 rdx, QWORD PTR pointer$[rsp]
  00466	48 8b 4c 24 28	 mov	 rcx, QWORD PTR webblk$[rsp]
  0046b	e8 00 00 00 00	 call	 http_interpret_variable_string
$LN39@http_reque:
$LN7@http_reque:

; 644  :     }
; 645  : 
; 646  :     while(url[0] == '/' && url[1] == '/')

  00470	b8 01 00 00 00	 mov	 eax, 1
  00475	48 6b c0 00	 imul	 rax, rax, 0
  00479	48 8b 4c 24 30	 mov	 rcx, QWORD PTR url$[rsp]
  0047e	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00482	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00485	75 26		 jne	 SHORT $LN8@http_reque
  00487	b8 01 00 00 00	 mov	 eax, 1
  0048c	48 6b c0 01	 imul	 rax, rax, 1
  00490	48 8b 4c 24 30	 mov	 rcx, QWORD PTR url$[rsp]
  00495	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00499	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  0049c	75 0f		 jne	 SHORT $LN8@http_reque

; 647  :         url++;

  0049e	48 8b 44 24 30	 mov	 rax, QWORD PTR url$[rsp]
  004a3	48 ff c0	 inc	 rax
  004a6	48 89 44 24 30	 mov	 QWORD PTR url$[rsp], rax
  004ab	eb c3		 jmp	 SHORT $LN7@http_reque
$LN8@http_reque:

; 648  : 
; 649  :     webblk->baseurl = url;

  004ad	48 8b 44 24 28	 mov	 rax, QWORD PTR webblk$[rsp]
  004b2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR url$[rsp]
  004b7	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 650  : 
; 651  :     if(!strcasecmp("/",url))

  004bb	48 8b 54 24 30	 mov	 rdx, QWORD PTR url$[rsp]
  004c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159466
  004c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  004cd	85 c0		 test	 eax, eax
  004cf	75 0c		 jne	 SHORT $LN40@http_reque

; 652  :         url = HTTP_WELCOME;

  004d1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159467
  004d8	48 89 44 24 30	 mov	 QWORD PTR url$[rsp], rax
$LN40@http_reque:

; 653  : 
; 654  :     if(strncasecmp("/cgi-bin/",url,9))

  004dd	41 b8 09 00 00
	00		 mov	 r8d, 9
  004e3	48 8b 54 24 30	 mov	 rdx, QWORD PTR url$[rsp]
  004e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159470
  004ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  004f5	85 c0		 test	 eax, eax
  004f7	74 11		 je	 SHORT $LN41@http_reque

; 655  :         http_download(webblk,url);

  004f9	48 8b 54 24 30	 mov	 rdx, QWORD PTR url$[rsp]
  004fe	48 8b 4c 24 28	 mov	 rcx, QWORD PTR webblk$[rsp]
  00503	e8 00 00 00 00	 call	 http_download
  00508	eb 0e		 jmp	 SHORT $LN42@http_reque
$LN41@http_reque:

; 656  :     else
; 657  :         url += 9;

  0050a	48 8b 44 24 30	 mov	 rax, QWORD PTR url$[rsp]
  0050f	48 83 c0 09	 add	 rax, 9
  00513	48 89 44 24 30	 mov	 QWORD PTR url$[rsp], rax
$LN42@http_reque:
$LN9@http_reque:

; 658  : 
; 659  :     while(*url == '/')

  00518	48 8b 44 24 30	 mov	 rax, QWORD PTR url$[rsp]
  0051d	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00520	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00523	75 0f		 jne	 SHORT $LN10@http_reque

; 660  :         url++;

  00525	48 8b 44 24 30	 mov	 rax, QWORD PTR url$[rsp]
  0052a	48 ff c0	 inc	 rax
  0052d	48 89 44 24 30	 mov	 QWORD PTR url$[rsp], rax
  00532	eb e4		 jmp	 SHORT $LN9@http_reque
$LN10@http_reque:

; 661  : 
; 662  : #ifdef DEBUG_HTTPSERV
; 663  :     http_dump_cgi_variables(webblk);
; 664  : #endif
; 665  : 
; 666  :     for(cgient = cgidir; cgient->path; cgient++)

  00534	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:cgidir
  0053b	48 89 44 24 50	 mov	 QWORD PTR cgient$[rsp], rax
  00540	eb 0e		 jmp	 SHORT $LN13@http_reque
$LN11@http_reque:
  00542	48 8b 44 24 50	 mov	 rax, QWORD PTR cgient$[rsp]
  00547	48 83 c0 10	 add	 rax, 16
  0054b	48 89 44 24 50	 mov	 QWORD PTR cgient$[rsp], rax
$LN13@http_reque:
  00550	48 8b 44 24 50	 mov	 rax, QWORD PTR cgient$[rsp]
  00555	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00559	74 79		 je	 SHORT $LN12@http_reque

; 667  :     {
; 668  :         if(!strcmp(cgient->path, url))

  0055b	48 8b 54 24 30	 mov	 rdx, QWORD PTR url$[rsp]
  00560	48 8b 44 24 50	 mov	 rax, QWORD PTR cgient$[rsp]
  00565	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00568	e8 00 00 00 00	 call	 strcmp
  0056d	85 c0		 test	 eax, eax
  0056f	75 5e		 jne	 SHORT $LN43@http_reque

; 669  :         {
; 670  :         char tbuf[80];
; 671  :             hprintf(webblk->sock,"HTTP/1.0 200 OK\nConnection: close\n");

  00571	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159472
  00578	48 8b 44 24 28	 mov	 rax, QWORD PTR webblk$[rsp]
  0057d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0057f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 672  :             hprintf(webblk->sock,"Date: %s\n",

  00585	33 c9		 xor	 ecx, ecx
  00587	e8 00 00 00 00	 call	 time
  0058c	4c 8b c0	 mov	 r8, rax
  0058f	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  00594	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR tbuf$4[rsp]
  0059c	e8 00 00 00 00	 call	 http_timestring
  005a1	4c 8b c0	 mov	 r8, rax
  005a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159473
  005ab	48 8b 44 24 28	 mov	 rax, QWORD PTR webblk$[rsp]
  005b0	8b 08		 mov	 ecx, DWORD PTR [rax]
  005b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 673  :               http_timestring(tbuf,sizeof(tbuf),time(NULL)));
; 674  :             (cgient->cgibin) (webblk);

  005b8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR webblk$[rsp]
  005bd	48 8b 44 24 50	 mov	 rax, QWORD PTR cgient$[rsp]
  005c2	ff 50 08	 call	 QWORD PTR [rax+8]

; 675  :             http_exit(webblk);

  005c5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR webblk$[rsp]
  005ca	e8 00 00 00 00	 call	 http_exit
$LN43@http_reque:

; 676  :         }
; 677  :     }

  005cf	e9 6e ff ff ff	 jmp	 $LN11@http_reque
$LN12@http_reque:

; 678  : 
; 679  :     {
; 680  :         cgibin_func* dyncgi;
; 681  : 
; 682  :         if( (dyncgi = (cgibin_func*) hdl_getsym( webblk->baseurl )) )

  005d4	48 8b 44 24 28	 mov	 rax, QWORD PTR webblk$[rsp]
  005d9	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  005dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hdl_getsym
  005e3	48 89 44 24 68	 mov	 QWORD PTR dyncgi$3[rsp], rax
  005e8	48 83 7c 24 68
	00		 cmp	 QWORD PTR dyncgi$3[rsp], 0
  005ee	74 5a		 je	 SHORT $LN44@http_reque

; 683  :         {
; 684  :         char tbuf[80];
; 685  :             hprintf(webblk->sock,"HTTP/1.0 200 OK\nConnection: close\n");

  005f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159475
  005f7	48 8b 44 24 28	 mov	 rax, QWORD PTR webblk$[rsp]
  005fc	8b 08		 mov	 ecx, DWORD PTR [rax]
  005fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 686  :             hprintf(webblk->sock,"Date: %s\n",

  00604	33 c9		 xor	 ecx, ecx
  00606	e8 00 00 00 00	 call	 time
  0060b	4c 8b c0	 mov	 r8, rax
  0060e	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  00613	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR tbuf$5[rsp]
  0061b	e8 00 00 00 00	 call	 http_timestring
  00620	4c 8b c0	 mov	 r8, rax
  00623	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159476
  0062a	48 8b 44 24 28	 mov	 rax, QWORD PTR webblk$[rsp]
  0062f	8b 08		 mov	 ecx, DWORD PTR [rax]
  00631	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 687  :               http_timestring(tbuf,sizeof(tbuf),time(NULL)));
; 688  :             dyncgi(webblk);

  00637	48 8b 4c 24 28	 mov	 rcx, QWORD PTR webblk$[rsp]
  0063c	ff 54 24 68	 call	 QWORD PTR dyncgi$3[rsp]

; 689  :             http_exit(webblk);

  00640	48 8b 4c 24 28	 mov	 rcx, QWORD PTR webblk$[rsp]
  00645	e8 00 00 00 00	 call	 http_exit
$LN44@http_reque:

; 690  :         }
; 691  :     }
; 692  : 
; 693  :     http_error(webblk, "404 File Not Found","",

  0064a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159477
  00651	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159478
  00658	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159479
  0065f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR webblk$[rsp]
  00664	e8 00 00 00 00	 call	 http_error

; 694  :                        "The requested file was not found");
; 695  :     return NULL;

  00669	33 c0		 xor	 eax, eax

; 696  : }

  0066b	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00673	48 33 cc	 xor	 rcx, rsp
  00676	e8 00 00 00 00	 call	 __security_check_cookie
  0067b	48 81 c4 30 02
	00 00		 add	 rsp, 560		; 00000230H
  00682	5f		 pop	 rdi
  00683	c3		 ret	 0
http_request ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
mime_type$ = 32
fd$ = 40
length$ = 44
filetype$ = 48
st$ = 56
fullname$ = 112
tbuf$ = 384
buffer$ = 464
__$ArrayPad$ = 736
webblk$ = 768
filename$ = 776
http_download PROC

; 489  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec f8 02
	00 00		 sub	 rsp, 760		; 000002f8H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 e0
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 490  :     char buffer[HTTP_PATH_LENGTH];
; 491  :     char tbuf[80];
; 492  :     int fd, length;
; 493  :     char *filetype;
; 494  :     char fullname[HTTP_PATH_LENGTH];
; 495  :     struct stat st;
; 496  :     MIMETAB *mime_type = mime_types;

  00023	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:mime_types
  0002a	48 89 44 24 20	 mov	 QWORD PTR mime_type$[rsp], rax

; 497  : 
; 498  :     STRLCPY( fullname, http_serv.httproot );

  0002f	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00035	48 8b 15 18 00
	00 00		 mov	 rdx, QWORD PTR http_serv+24
  0003c	48 8d 4c 24 70	 lea	 rcx, QWORD PTR fullname$[rsp]
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 499  :     STRLCAT( fullname, filename );

  00047	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  0004d	48 8b 94 24 08
	03 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  00055	48 8d 4c 24 70	 lea	 rcx, QWORD PTR fullname$[rsp]
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 500  : 
; 501  :     http_verify_path(webblk,fullname);

  00060	48 8d 54 24 70	 lea	 rdx, QWORD PTR fullname$[rsp]
  00065	48 8b 8c 24 00
	03 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  0006d	e8 00 00 00 00	 call	 http_verify_path

; 502  : 
; 503  :     if(stat(fullname,&st))

  00072	48 8d 54 24 38	 lea	 rdx, QWORD PTR st$[rsp]
  00077	48 8d 4c 24 70	 lea	 rcx, QWORD PTR fullname$[rsp]
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stat64
  00082	85 c0		 test	 eax, eax
  00084	74 2c		 je	 SHORT $LN7@http_downl

; 504  :         http_error(webblk, "404 File Not Found","",

  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0008c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0008e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00094	4c 8b c8	 mov	 r9, rax
  00097	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159355
  0009e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159356
  000a5	48 8b 8c 24 00
	03 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  000ad	e8 00 00 00 00	 call	 http_error
$LN7@http_downl:

; 505  :                            strerror(errno));
; 506  : 
; 507  :     if(!S_ISREG(st.st_mode))

  000b2	0f b7 44 24 3e	 movzx	 eax, WORD PTR st$[rsp+6]
  000b7	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  000bc	3d 00 80 00 00	 cmp	 eax, 32768		; 00008000H
  000c1	74 22		 je	 SHORT $LN8@http_downl

; 508  :         http_error(webblk, "404 File Not Found","",

  000c3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159358
  000ca	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159359
  000d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159360
  000d8	48 8b 8c 24 00
	03 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  000e0	e8 00 00 00 00	 call	 http_error
$LN8@http_downl:

; 509  :                            "The requested file is not a regular file");
; 510  : 
; 511  :     fd = HOPEN(fullname,O_RDONLY|O_BINARY,0);

  000e5	45 33 c0	 xor	 r8d, r8d
  000e8	ba 00 80 00 00	 mov	 edx, 32768		; 00008000H
  000ed	48 8d 4c 24 70	 lea	 rcx, QWORD PTR fullname$[rsp]
  000f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  000f8	89 44 24 28	 mov	 DWORD PTR fd$[rsp], eax

; 512  :     if (fd == -1)

  000fc	83 7c 24 28 ff	 cmp	 DWORD PTR fd$[rsp], -1
  00101	75 2c		 jne	 SHORT $LN9@http_downl

; 513  :         http_error(webblk, "404 File Not Found","",

  00103	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00109	8b 08		 mov	 ecx, DWORD PTR [rax]
  0010b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00111	4c 8b c8	 mov	 r9, rax
  00114	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159362
  0011b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159363
  00122	48 8b 8c 24 00
	03 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  0012a	e8 00 00 00 00	 call	 http_error
$LN9@http_downl:

; 514  :                            strerror(errno));
; 515  : 
; 516  :     hprintf(webblk->sock,"HTTP/1.0 200 OK\n");

  0012f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159364
  00136	48 8b 84 24 00
	03 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0013e	8b 08		 mov	 ecx, DWORD PTR [rax]
  00140	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 517  :     if ((filetype = strrchr(filename,'.')))

  00146	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  0014b	48 8b 8c 24 08
	03 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  00153	e8 00 00 00 00	 call	 strrchr
  00158	48 89 44 24 30	 mov	 QWORD PTR filetype$[rsp], rax
  0015d	48 83 7c 24 30
	00		 cmp	 QWORD PTR filetype$[rsp], 0
  00163	74 48		 je	 SHORT $LN10@http_downl

; 518  :         for(mime_type++;mime_type->suffix

  00165	48 8b 44 24 20	 mov	 rax, QWORD PTR mime_type$[rsp]
  0016a	48 83 c0 10	 add	 rax, 16
  0016e	48 89 44 24 20	 mov	 QWORD PTR mime_type$[rsp], rax
  00173	eb 0e		 jmp	 SHORT $LN4@http_downl
$LN2@http_downl:

; 520  :           mime_type++);

  00175	48 8b 44 24 20	 mov	 rax, QWORD PTR mime_type$[rsp]
  0017a	48 83 c0 10	 add	 rax, 16
  0017e	48 89 44 24 20	 mov	 QWORD PTR mime_type$[rsp], rax
$LN4@http_downl:

; 519  :           && strcasecmp(mime_type->suffix,filetype + 1);

  00183	48 8b 44 24 20	 mov	 rax, QWORD PTR mime_type$[rsp]
  00188	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0018c	74 1f		 je	 SHORT $LN3@http_downl
  0018e	48 8b 44 24 30	 mov	 rax, QWORD PTR filetype$[rsp]
  00193	48 ff c0	 inc	 rax
  00196	48 8b d0	 mov	 rdx, rax
  00199	48 8b 44 24 20	 mov	 rax, QWORD PTR mime_type$[rsp]
  0019e	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  001a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  001a7	85 c0		 test	 eax, eax
  001a9	74 02		 je	 SHORT $LN3@http_downl

; 520  :           mime_type++);

  001ab	eb c8		 jmp	 SHORT $LN2@http_downl
$LN3@http_downl:
$LN10@http_downl:

; 521  :     if(mime_type->type)

  001ad	48 8b 44 24 20	 mov	 rax, QWORD PTR mime_type$[rsp]
  001b2	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  001b7	74 20		 je	 SHORT $LN11@http_downl

; 522  :         hprintf(webblk->sock,"Content-Type: %s\n", mime_type->type);

  001b9	48 8b 44 24 20	 mov	 rax, QWORD PTR mime_type$[rsp]
  001be	4c 8b 40 08	 mov	 r8, QWORD PTR [rax+8]
  001c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159367
  001c9	48 8b 84 24 00
	03 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  001d1	8b 08		 mov	 ecx, DWORD PTR [rax]
  001d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN11@http_downl:

; 523  : 
; 524  :     hprintf(webblk->sock,"Expires: %s\n",

  001d9	33 c9		 xor	 ecx, ecx
  001db	e8 00 00 00 00	 call	 time
  001e0	48 05 80 3a 09
	00		 add	 rax, 604800		; 00093a80H
  001e6	4c 8b c0	 mov	 r8, rax
  001e9	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  001ee	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR tbuf$[rsp]
  001f6	e8 00 00 00 00	 call	 http_timestring
  001fb	4c 8b c0	 mov	 r8, rax
  001fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159368
  00205	48 8b 84 24 00
	03 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0020d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0020f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 525  :       http_timestring(tbuf,sizeof(tbuf),time(NULL)+HTML_EXPIRE_SECS));
; 526  : 
; 527  :     hprintf(webblk->sock,"Content-Length: %d\n\n", (int)st.st_size);

  00215	44 8b 44 24 50	 mov	 r8d, DWORD PTR st$[rsp+24]
  0021a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159369
  00221	48 8b 84 24 00
	03 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00229	8b 08		 mov	 ecx, DWORD PTR [rax]
  0022b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN5@http_downl:

; 528  :     while ((length = read(fd, buffer, sizeof(buffer))) > 0)

  00231	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00237	48 8d 94 24 d0
	01 00 00	 lea	 rdx, QWORD PTR buffer$[rsp]
  0023f	8b 4c 24 28	 mov	 ecx, DWORD PTR fd$[rsp]
  00243	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00249	89 44 24 2c	 mov	 DWORD PTR length$[rsp], eax
  0024d	83 7c 24 2c 00	 cmp	 DWORD PTR length$[rsp], 0
  00252	7e 22		 jle	 SHORT $LN6@http_downl

; 529  :             hwrite(webblk->sock,buffer, length);

  00254	48 63 44 24 2c	 movsxd	 rax, DWORD PTR length$[rsp]
  00259	4c 8b c0	 mov	 r8, rax
  0025c	48 8d 94 24 d0
	01 00 00	 lea	 rdx, QWORD PTR buffer$[rsp]
  00264	48 8b 84 24 00
	03 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  0026c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0026e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hwrite
  00274	eb bb		 jmp	 SHORT $LN5@http_downl
$LN6@http_downl:

; 530  :     close(fd);

  00276	8b 4c 24 28	 mov	 ecx, DWORD PTR fd$[rsp]
  0027a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 531  :     http_exit(webblk);

  00280	48 8b 8c 24 00
	03 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  00288	e8 00 00 00 00	 call	 http_exit

; 532  : }

  0028d	48 8b 8c 24 e0
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00295	48 33 cc	 xor	 rcx, rsp
  00298	e8 00 00 00 00	 call	 __security_check_cookie
  0029d	48 81 c4 f8 02
	00 00		 add	 rsp, 760		; 000002f8H
  002a4	c3		 ret	 0
http_download ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
pointer$ = 32
user$ = 40
passwd$ = 48
webblk$ = 80
type$ = 88
userpass$ = 96
http_authenticate PROC

; 430  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 431  :     char *pointer ,*user, *passwd;
; 432  : 
; 433  :     if (!strcasecmp(type,"Basic"))

  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159328
  0001a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR type$[rsp]
  0001f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00025	85 c0		 test	 eax, eax
  00027	0f 85 aa 00 00
	00		 jne	 $LN2@http_authe

; 434  :     {
; 435  :         if(userpass)

  0002d	48 83 7c 24 60
	00		 cmp	 QWORD PTR userpass$[rsp], 0
  00033	0f 84 9e 00 00
	00		 je	 $LN3@http_authe

; 436  :         {
; 437  :             http_decode_base64(userpass);

  00039	48 8b 4c 24 60	 mov	 rcx, QWORD PTR userpass$[rsp]
  0003e	e8 00 00 00 00	 call	 http_decode_base64

; 438  : 
; 439  :             /* the format is now user:password */
; 440  :             if ((pointer = strchr(userpass,':')))

  00043	ba 3a 00 00 00	 mov	 edx, 58			; 0000003aH
  00048	48 8b 4c 24 60	 mov	 rcx, QWORD PTR userpass$[rsp]
  0004d	e8 00 00 00 00	 call	 strchr
  00052	48 89 44 24 20	 mov	 QWORD PTR pointer$[rsp], rax
  00057	48 83 7c 24 20
	00		 cmp	 QWORD PTR pointer$[rsp], 0
  0005d	74 78		 je	 SHORT $LN4@http_authe

; 441  :             {
; 442  :                 *pointer = 0;

  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR pointer$[rsp]
  00064	c6 00 00	 mov	 BYTE PTR [rax], 0

; 443  :                 user = userpass;

  00067	48 8b 44 24 60	 mov	 rax, QWORD PTR userpass$[rsp]
  0006c	48 89 44 24 28	 mov	 QWORD PTR user$[rsp], rax

; 444  :                 passwd = pointer+1;

  00071	48 8b 44 24 20	 mov	 rax, QWORD PTR pointer$[rsp]
  00076	48 ff c0	 inc	 rax
  00079	48 89 44 24 30	 mov	 QWORD PTR passwd$[rsp], rax

; 445  : 
; 446  :                 /* Hardcoded userid and password in configuration file */
; 447  :                 if(http_serv.httpuser && http_serv.httppass)

  0007e	48 83 3d 08 00
	00 00 00	 cmp	 QWORD PTR http_serv+8, 0
  00086	74 4f		 je	 SHORT $LN5@http_authe
  00088	48 83 3d 10 00
	00 00 00	 cmp	 QWORD PTR http_serv+16, 0
  00090	74 45		 je	 SHORT $LN5@http_authe

; 448  :                 {
; 449  :                     if(!strcmp(user,http_serv.httpuser)
; 450  :                       && !strcmp(passwd,http_serv.httppass))

  00092	48 8b 15 08 00
	00 00		 mov	 rdx, QWORD PTR http_serv+8
  00099	48 8b 4c 24 28	 mov	 rcx, QWORD PTR user$[rsp]
  0009e	e8 00 00 00 00	 call	 strcmp
  000a3	85 c0		 test	 eax, eax
  000a5	75 30		 jne	 SHORT $LN6@http_authe
  000a7	48 8b 15 10 00
	00 00		 mov	 rdx, QWORD PTR http_serv+16
  000ae	48 8b 4c 24 30	 mov	 rcx, QWORD PTR passwd$[rsp]
  000b3	e8 00 00 00 00	 call	 strcmp
  000b8	85 c0		 test	 eax, eax
  000ba	75 1b		 jne	 SHORT $LN6@http_authe

; 451  :                     {
; 452  :                         webblk->user = strdup(user);

  000bc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR user$[rsp]
  000c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  000c7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR webblk$[rsp]
  000cc	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 453  :                         return TRUE;

  000d0	b8 01 00 00 00	 mov	 eax, 1
  000d5	eb 0f		 jmp	 SHORT $LN1@http_authe
$LN6@http_authe:
$LN5@http_authe:
$LN4@http_authe:
$LN3@http_authe:
$LN2@http_authe:

; 454  :                     }
; 455  :                 }
; 456  : #if !defined(WIN32)
; 457  :                 else
; 458  :                 {
; 459  :                     struct passwd *pass = NULL;
; 460  : 
; 461  :                     /* unix userid and password check, the userid
; 462  :                        must be the same as that hercules is
; 463  :                        currently running under */
; 464  : // ZZ INCOMPLETE
; 465  : // ZZ No password check is being performed yet...
; 466  :                     if((pass = getpwnam(user))
; 467  :                       &&
; 468  :                        (pass->pw_uid == 0
; 469  :                           || pass->pw_uid == getuid()))
; 470  :                     {
; 471  :                         webblk->user = strdup(user);
; 472  :                         return TRUE;
; 473  :                     }
; 474  :                 }
; 475  : #endif /*!defined(WIN32)*/
; 476  :             }
; 477  :         }
; 478  :     }
; 479  : 
; 480  :     webblk->user = NULL;

  000d7	48 8b 44 24 50	 mov	 rax, QWORD PTR webblk$[rsp]
  000dc	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 481  : 
; 482  :     return FALSE;

  000e4	33 c0		 xor	 eax, eax
$LN1@http_authe:

; 483  : }

  000e6	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ea	c3		 ret	 0
http_authenticate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
resolved_path$ = 32
pathname$ = 304
__$ArrayPad$ = 576
webblk$ = 608
path$ = 616
http_verify_path PROC

; 398  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 58 02
	00 00		 sub	 rsp, 600		; 00000258H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 399  :     char resolved_path[HTTP_PATH_LENGTH];
; 400  :     char pathname[HTTP_PATH_LENGTH];
; 401  : 
; 402  : #ifdef DEBUG_HTTPSERV
; 403  :     int i;
; 404  : 
; 405  :     for (i = 0; path[i]; i++)
; 406  :         if (!isalnum((int)path[i]) && !strchr("/.-_", path[i]))
; 407  :             http_error(webblk, "404 File Not Found","",
; 408  :                                "Illegal character in filename");
; 409  : #endif
; 410  : 
; 411  :     if (!realpath( path, resolved_path ))

  00023	48 8d 54 24 20	 lea	 rdx, QWORD PTR resolved_path$[rsp]
  00028	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR path$[rsp]
  00030	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realpath
  00036	48 85 c0	 test	 rax, rax
  00039	75 22		 jne	 SHORT $LN2@http_verif

; 412  :         http_error(webblk, "404 File Not Found","",

  0003b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159308
  00042	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159309
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159310
  00050	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  00058	e8 00 00 00 00	 call	 http_error
$LN2@http_verif:

; 413  :                            "Invalid pathname");
; 414  : 
; 415  :     hostpath(pathname, resolved_path, sizeof(pathname));

  0005d	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00063	48 8d 54 24 20	 lea	 rdx, QWORD PTR resolved_path$[rsp]
  00068	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  00070	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 416  : 
; 417  :     // The following verifies the specified file does not lie
; 418  :     // outside the specified httproot (Note: http_serv.httproot
; 419  :     // was previously resolved to an absolute path by config.c)
; 420  : 
; 421  :     if (strncmp( http_serv.httproot, pathname, strlen(http_serv.httproot)))

  00076	48 8b 0d 18 00
	00 00		 mov	 rcx, QWORD PTR http_serv+24
  0007d	e8 00 00 00 00	 call	 strlen
  00082	4c 8b c0	 mov	 r8, rax
  00085	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR pathname$[rsp]
  0008d	48 8b 0d 18 00
	00 00		 mov	 rcx, QWORD PTR http_serv+24
  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncmp
  0009a	85 c0		 test	 eax, eax
  0009c	74 22		 je	 SHORT $LN3@http_verif

; 422  :         http_error(webblk, "404 File Not Found","",

  0009e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159312
  000a5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159313
  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159314
  000b3	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR webblk$[rsp]
  000bb	e8 00 00 00 00	 call	 http_error
$LN3@http_verif:

; 423  :                            "Invalid pathname");
; 424  : }

  000c0	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000c8	48 33 cc	 xor	 rcx, rsp
  000cb	e8 00 00 00 00	 call	 __security_check_cookie
  000d0	48 81 c4 58 02
	00 00		 add	 rsp, 600		; 00000258H
  000d7	c3		 ret	 0
http_verify_path ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
cgivar$ = 32
value$ = 40
name$ = 48
strtok_str$ = 56
webblk$ = 80
qstring$ = 88
type$ = 96
http_interpret_variable_string PROC

; 342  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 343  : char *name;
; 344  : char *value;
; 345  : char *strtok_str = NULL;

  00013	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR strtok_str$[rsp], 0

; 346  : CGIVAR **cgivar;
; 347  : 
; 348  :     for (cgivar = &(webblk->cgivar);

  0001c	48 8b 44 24 50	 mov	 rax, QWORD PTR webblk$[rsp]
  00021	48 83 c0 20	 add	 rax, 32			; 00000020H
  00025	48 89 44 24 20	 mov	 QWORD PTR cgivar$[rsp], rax
  0002a	eb 0d		 jmp	 SHORT $LN4@http_inter
$LN2@http_inter:

; 350  :          cgivar = &((*cgivar)->next));

  0002c	48 8b 44 24 20	 mov	 rax, QWORD PTR cgivar$[rsp]
  00031	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00034	48 89 44 24 20	 mov	 QWORD PTR cgivar$[rsp], rax
$LN4@http_inter:

; 349  :         *cgivar;

  00039	48 8b 44 24 20	 mov	 rax, QWORD PTR cgivar$[rsp]
  0003e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00042	74 02		 je	 SHORT $LN3@http_inter

; 350  :          cgivar = &((*cgivar)->next));

  00044	eb e6		 jmp	 SHORT $LN2@http_inter
$LN3@http_inter:

; 351  : 
; 352  :     for (name = strtok_r(qstring,"&; ",&strtok_str);

  00046	4c 8d 44 24 38	 lea	 r8, QWORD PTR strtok_str$[rsp]
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159283
  00052	48 8b 4c 24 58	 mov	 rcx, QWORD PTR qstring$[rsp]
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtok_r
  0005d	48 89 44 24 30	 mov	 QWORD PTR name$[rsp], rax
  00062	eb 19		 jmp	 SHORT $LN7@http_inter
$LN5@http_inter:

; 354  :          name = strtok_r(NULL,"&; ",&strtok_str))

  00064	4c 8d 44 24 38	 lea	 r8, QWORD PTR strtok_str$[rsp]
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159284
  00070	33 c9		 xor	 ecx, ecx
  00072	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtok_r
  00078	48 89 44 24 30	 mov	 QWORD PTR name$[rsp], rax
$LN7@http_inter:

; 353  :          name;

  0007d	48 83 7c 24 30
	00		 cmp	 QWORD PTR name$[rsp], 0
  00083	0f 84 b4 00 00
	00		 je	 $LN6@http_inter

; 355  :     {
; 356  :         if(!(value = strchr(name,'=')))

  00089	ba 3d 00 00 00	 mov	 edx, 61			; 0000003dH
  0008e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR name$[rsp]
  00093	e8 00 00 00 00	 call	 strchr
  00098	48 89 44 24 28	 mov	 QWORD PTR value$[rsp], rax
  0009d	48 83 7c 24 28
	00		 cmp	 QWORD PTR value$[rsp], 0
  000a3	75 02		 jne	 SHORT $LN8@http_inter

; 357  :             continue;

  000a5	eb bd		 jmp	 SHORT $LN5@http_inter
$LN8@http_inter:

; 358  : 
; 359  :         *value++ = '\0';

  000a7	48 8b 44 24 28	 mov	 rax, QWORD PTR value$[rsp]
  000ac	c6 00 00	 mov	 BYTE PTR [rax], 0
  000af	48 8b 44 24 28	 mov	 rax, QWORD PTR value$[rsp]
  000b4	48 ff c0	 inc	 rax
  000b7	48 89 44 24 28	 mov	 QWORD PTR value$[rsp], rax

; 360  : 
; 361  :         (*cgivar) = malloc(sizeof(CGIVAR));

  000bc	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  000c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  000c7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR cgivar$[rsp]
  000cc	48 89 01	 mov	 QWORD PTR [rcx], rax

; 362  :         (*cgivar)->next = NULL;

  000cf	48 8b 44 24 20	 mov	 rax, QWORD PTR cgivar$[rsp]
  000d4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d7	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 363  :         (*cgivar)->name = strdup(http_unescape(name));

  000de	48 8b 4c 24 30	 mov	 rcx, QWORD PTR name$[rsp]
  000e3	e8 00 00 00 00	 call	 http_unescape
  000e8	48 8b c8	 mov	 rcx, rax
  000eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  000f1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR cgivar$[rsp]
  000f6	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000f9	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 364  :         (*cgivar)->value = strdup(http_unescape(value));

  000fd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR value$[rsp]
  00102	e8 00 00 00 00	 call	 http_unescape
  00107	48 8b c8	 mov	 rcx, rax
  0010a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00110	48 8b 4c 24 20	 mov	 rcx, QWORD PTR cgivar$[rsp]
  00115	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00118	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 365  :         (*cgivar)->type = type;

  0011c	48 8b 44 24 20	 mov	 rax, QWORD PTR cgivar$[rsp]
  00121	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00124	8b 4c 24 60	 mov	 ecx, DWORD PTR type$[rsp]
  00128	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 366  :         cgivar = &((*cgivar)->next);

  0012b	48 8b 44 24 20	 mov	 rax, QWORD PTR cgivar$[rsp]
  00130	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00133	48 89 44 24 20	 mov	 QWORD PTR cgivar$[rsp], rax

; 367  :     }

  00138	e9 27 ff ff ff	 jmp	 $LN5@http_inter
$LN6@http_inter:

; 368  : }

  0013d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00141	c3		 ret	 0
http_interpret_variable_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
highnibble$1 = 32
lownibble$2 = 36
pointer$ = 40
tv148 = 48
buffer$ = 80
http_unescape PROC

; 291  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 292  :     char *pointer = buffer;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR buffer$[rsp]
  0000e	48 89 44 24 28	 mov	 QWORD PTR pointer$[rsp], rax
$LN2@http_unesc:

; 293  : 
; 294  :     while ( (pointer = strchr(pointer,'+')) )

  00013	ba 2b 00 00 00	 mov	 edx, 43			; 0000002bH
  00018	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pointer$[rsp]
  0001d	e8 00 00 00 00	 call	 strchr
  00022	48 89 44 24 28	 mov	 QWORD PTR pointer$[rsp], rax
  00027	48 83 7c 24 28
	00		 cmp	 QWORD PTR pointer$[rsp], 0
  0002d	74 0a		 je	 SHORT $LN3@http_unesc

; 295  :         *pointer = ' ';

  0002f	48 8b 44 24 28	 mov	 rax, QWORD PTR pointer$[rsp]
  00034	c6 00 20	 mov	 BYTE PTR [rax], 32	; 00000020H
  00037	eb da		 jmp	 SHORT $LN2@http_unesc
$LN3@http_unesc:

; 296  : 
; 297  :     pointer = buffer;

  00039	48 8b 44 24 50	 mov	 rax, QWORD PTR buffer$[rsp]
  0003e	48 89 44 24 28	 mov	 QWORD PTR pointer$[rsp], rax
$LN20@http_unesc:
$LN19@http_unesc:
$LN4@http_unesc:

; 298  : 
; 299  :     while (pointer && *pointer && (pointer = strchr(pointer,'%')))

  00043	48 83 7c 24 28
	00		 cmp	 QWORD PTR pointer$[rsp], 0
  00049	0f 84 83 01 00
	00		 je	 $LN5@http_unesc
  0004f	48 8b 44 24 28	 mov	 rax, QWORD PTR pointer$[rsp]
  00054	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00057	85 c0		 test	 eax, eax
  00059	0f 84 73 01 00
	00		 je	 $LN5@http_unesc
  0005f	ba 25 00 00 00	 mov	 edx, 37			; 00000025H
  00064	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pointer$[rsp]
  00069	e8 00 00 00 00	 call	 strchr
  0006e	48 89 44 24 28	 mov	 QWORD PTR pointer$[rsp], rax
  00073	48 83 7c 24 28
	00		 cmp	 QWORD PTR pointer$[rsp], 0
  00079	0f 84 53 01 00
	00		 je	 $LN5@http_unesc

; 300  :     {
; 301  :         int highnibble = pointer[1];

  0007f	b8 01 00 00 00	 mov	 eax, 1
  00084	48 6b c0 01	 imul	 rax, rax, 1
  00088	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pointer$[rsp]
  0008d	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00091	89 44 24 20	 mov	 DWORD PTR highnibble$1[rsp], eax

; 302  :         int lownibble = pointer[2];

  00095	b8 01 00 00 00	 mov	 eax, 1
  0009a	48 6b c0 02	 imul	 rax, rax, 2
  0009e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pointer$[rsp]
  000a3	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  000a7	89 44 24 24	 mov	 DWORD PTR lownibble$2[rsp], eax

; 303  : 
; 304  :         if (highnibble >= '0' && highnibble <= '9')

  000ab	83 7c 24 20 30	 cmp	 DWORD PTR highnibble$1[rsp], 48 ; 00000030H
  000b0	7c 14		 jl	 SHORT $LN6@http_unesc
  000b2	83 7c 24 20 39	 cmp	 DWORD PTR highnibble$1[rsp], 57 ; 00000039H
  000b7	7f 0d		 jg	 SHORT $LN6@http_unesc

; 305  :             highnibble = highnibble - '0';

  000b9	8b 44 24 20	 mov	 eax, DWORD PTR highnibble$1[rsp]
  000bd	83 e8 30	 sub	 eax, 48			; 00000030H
  000c0	89 44 24 20	 mov	 DWORD PTR highnibble$1[rsp], eax
  000c4	eb 48		 jmp	 SHORT $LN7@http_unesc
$LN6@http_unesc:

; 306  :         else if (highnibble >= 'A' && highnibble <= 'F')

  000c6	83 7c 24 20 41	 cmp	 DWORD PTR highnibble$1[rsp], 65 ; 00000041H
  000cb	7c 14		 jl	 SHORT $LN8@http_unesc
  000cd	83 7c 24 20 46	 cmp	 DWORD PTR highnibble$1[rsp], 70 ; 00000046H
  000d2	7f 0d		 jg	 SHORT $LN8@http_unesc

; 307  :             highnibble = 10 + highnibble - 'A';

  000d4	8b 44 24 20	 mov	 eax, DWORD PTR highnibble$1[rsp]
  000d8	83 e8 37	 sub	 eax, 55			; 00000037H
  000db	89 44 24 20	 mov	 DWORD PTR highnibble$1[rsp], eax
  000df	eb 2d		 jmp	 SHORT $LN9@http_unesc
$LN8@http_unesc:

; 308  :         else if (highnibble >= 'a' && highnibble <= 'f')

  000e1	83 7c 24 20 61	 cmp	 DWORD PTR highnibble$1[rsp], 97 ; 00000061H
  000e6	7c 14		 jl	 SHORT $LN10@http_unesc
  000e8	83 7c 24 20 66	 cmp	 DWORD PTR highnibble$1[rsp], 102 ; 00000066H
  000ed	7f 0d		 jg	 SHORT $LN10@http_unesc

; 309  :             highnibble = 10 + highnibble - 'a';

  000ef	8b 44 24 20	 mov	 eax, DWORD PTR highnibble$1[rsp]
  000f3	83 e8 57	 sub	 eax, 87			; 00000057H
  000f6	89 44 24 20	 mov	 DWORD PTR highnibble$1[rsp], eax
  000fa	eb 12		 jmp	 SHORT $LN11@http_unesc
$LN10@http_unesc:

; 310  :         else
; 311  :         {
; 312  :             pointer++;

  000fc	48 8b 44 24 28	 mov	 rax, QWORD PTR pointer$[rsp]
  00101	48 ff c0	 inc	 rax
  00104	48 89 44 24 28	 mov	 QWORD PTR pointer$[rsp], rax

; 313  :             continue;

  00109	e9 35 ff ff ff	 jmp	 $LN4@http_unesc
$LN11@http_unesc:
$LN9@http_unesc:
$LN7@http_unesc:

; 314  :         }
; 315  : 
; 316  :         if (lownibble >= '0' && lownibble <= '9')

  0010e	83 7c 24 24 30	 cmp	 DWORD PTR lownibble$2[rsp], 48 ; 00000030H
  00113	7c 14		 jl	 SHORT $LN12@http_unesc
  00115	83 7c 24 24 39	 cmp	 DWORD PTR lownibble$2[rsp], 57 ; 00000039H
  0011a	7f 0d		 jg	 SHORT $LN12@http_unesc

; 317  :             lownibble = lownibble - '0';

  0011c	8b 44 24 24	 mov	 eax, DWORD PTR lownibble$2[rsp]
  00120	83 e8 30	 sub	 eax, 48			; 00000030H
  00123	89 44 24 24	 mov	 DWORD PTR lownibble$2[rsp], eax
  00127	eb 48		 jmp	 SHORT $LN13@http_unesc
$LN12@http_unesc:

; 318  :         else if (lownibble >= 'A' && lownibble <= 'F')

  00129	83 7c 24 24 41	 cmp	 DWORD PTR lownibble$2[rsp], 65 ; 00000041H
  0012e	7c 14		 jl	 SHORT $LN14@http_unesc
  00130	83 7c 24 24 46	 cmp	 DWORD PTR lownibble$2[rsp], 70 ; 00000046H
  00135	7f 0d		 jg	 SHORT $LN14@http_unesc

; 319  :             lownibble = 10 + lownibble - 'A';

  00137	8b 44 24 24	 mov	 eax, DWORD PTR lownibble$2[rsp]
  0013b	83 e8 37	 sub	 eax, 55			; 00000037H
  0013e	89 44 24 24	 mov	 DWORD PTR lownibble$2[rsp], eax
  00142	eb 2d		 jmp	 SHORT $LN15@http_unesc
$LN14@http_unesc:

; 320  :         else if (lownibble >= 'a' && lownibble <= 'f')

  00144	83 7c 24 24 61	 cmp	 DWORD PTR lownibble$2[rsp], 97 ; 00000061H
  00149	7c 14		 jl	 SHORT $LN16@http_unesc
  0014b	83 7c 24 24 66	 cmp	 DWORD PTR lownibble$2[rsp], 102 ; 00000066H
  00150	7f 0d		 jg	 SHORT $LN16@http_unesc

; 321  :             lownibble = 10 + lownibble - 'a';

  00152	8b 44 24 24	 mov	 eax, DWORD PTR lownibble$2[rsp]
  00156	83 e8 57	 sub	 eax, 87			; 00000057H
  00159	89 44 24 24	 mov	 DWORD PTR lownibble$2[rsp], eax
  0015d	eb 12		 jmp	 SHORT $LN17@http_unesc
$LN16@http_unesc:

; 322  :         else
; 323  :         {
; 324  :             pointer++;

  0015f	48 8b 44 24 28	 mov	 rax, QWORD PTR pointer$[rsp]
  00164	48 ff c0	 inc	 rax
  00167	48 89 44 24 28	 mov	 QWORD PTR pointer$[rsp], rax

; 325  :             continue;

  0016c	e9 d2 fe ff ff	 jmp	 $LN19@http_unesc
$LN17@http_unesc:
$LN15@http_unesc:
$LN13@http_unesc:

; 326  :         }
; 327  : 
; 328  :         *pointer = (highnibble<<4) | lownibble;

  00171	8b 44 24 20	 mov	 eax, DWORD PTR highnibble$1[rsp]
  00175	c1 e0 04	 shl	 eax, 4
  00178	0b 44 24 24	 or	 eax, DWORD PTR lownibble$2[rsp]
  0017c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pointer$[rsp]
  00181	88 01		 mov	 BYTE PTR [rcx], al

; 329  : 
; 330  :         memmove(pointer+1, pointer+3, strlen(pointer+3)+1);

  00183	48 8b 44 24 28	 mov	 rax, QWORD PTR pointer$[rsp]
  00188	48 83 c0 03	 add	 rax, 3
  0018c	48 8b c8	 mov	 rcx, rax
  0018f	e8 00 00 00 00	 call	 strlen
  00194	48 ff c0	 inc	 rax
  00197	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pointer$[rsp]
  0019c	48 83 c1 03	 add	 rcx, 3
  001a0	48 8b 54 24 28	 mov	 rdx, QWORD PTR pointer$[rsp]
  001a5	48 ff c2	 inc	 rdx
  001a8	48 89 54 24 30	 mov	 QWORD PTR tv148[rsp], rdx
  001ad	4c 8b c0	 mov	 r8, rax
  001b0	48 8b d1	 mov	 rdx, rcx
  001b3	48 8b 44 24 30	 mov	 rax, QWORD PTR tv148[rsp]
  001b8	48 8b c8	 mov	 rcx, rax
  001bb	e8 00 00 00 00	 call	 memmove

; 331  : 
; 332  :         pointer++;

  001c0	48 8b 44 24 28	 mov	 rax, QWORD PTR pointer$[rsp]
  001c5	48 ff c0	 inc	 rax
  001c8	48 89 44 24 28	 mov	 QWORD PTR pointer$[rsp], rax

; 333  :     }

  001cd	e9 71 fe ff ff	 jmp	 $LN20@http_unesc
$LN5@http_unesc:

; 334  : 
; 335  :     return buffer;

  001d2	48 8b 44 24 50	 mov	 rax, QWORD PTR buffer$[rsp]

; 336  : }

  001d7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001db	c3		 ret	 0
http_unescape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
byte_o$ = 32
bit_o$ = 36
i$ = 40
idx$ = 44
n$ = 48
d$ = 56
b64$ = 64
p$ = 72
s$ = 96
http_decode_base64 PROC

; 255  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 256  :     char *b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159235
  00010	48 89 44 24 40	 mov	 QWORD PTR b64$[rsp], rax

; 257  :     int bit_o, byte_o, idx, i, n;
; 258  :     unsigned char *d = (unsigned char *)s;

  00015	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0001a	48 89 44 24 38	 mov	 QWORD PTR d$[rsp], rax

; 259  :     char *p;
; 260  : 
; 261  :     n = i = 0;

  0001f	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00027	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  0002b	89 44 24 30	 mov	 DWORD PTR n$[rsp], eax
$LN2@http_decod:

; 262  : 
; 263  :     while (*s && (p = strchr(b64, *s)))

  0002f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00034	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00037	85 c0		 test	 eax, eax
  00039	0f 84 7c 01 00
	00		 je	 $LN3@http_decod
  0003f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00044	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00047	8b d0		 mov	 edx, eax
  00049	48 8b 4c 24 40	 mov	 rcx, QWORD PTR b64$[rsp]
  0004e	e8 00 00 00 00	 call	 strchr
  00053	48 89 44 24 48	 mov	 QWORD PTR p$[rsp], rax
  00058	48 83 7c 24 48
	00		 cmp	 QWORD PTR p$[rsp], 0
  0005e	0f 84 57 01 00
	00		 je	 $LN3@http_decod

; 264  :     {
; 265  :         idx = (int)(p - b64);

  00064	48 8b 44 24 40	 mov	 rax, QWORD PTR b64$[rsp]
  00069	48 8b 4c 24 48	 mov	 rcx, QWORD PTR p$[rsp]
  0006e	48 2b c8	 sub	 rcx, rax
  00071	48 8b c1	 mov	 rax, rcx
  00074	89 44 24 2c	 mov	 DWORD PTR idx$[rsp], eax

; 266  :         byte_o = (i*6)/8;

  00078	6b 44 24 28 06	 imul	 eax, DWORD PTR i$[rsp], 6
  0007d	99		 cdq
  0007e	83 e2 07	 and	 edx, 7
  00081	03 c2		 add	 eax, edx
  00083	c1 f8 03	 sar	 eax, 3
  00086	89 44 24 20	 mov	 DWORD PTR byte_o$[rsp], eax

; 267  :         bit_o = (i*6)%8;

  0008a	6b 44 24 28 06	 imul	 eax, DWORD PTR i$[rsp], 6
  0008f	99		 cdq
  00090	83 e2 07	 and	 edx, 7
  00093	03 c2		 add	 eax, edx
  00095	83 e0 07	 and	 eax, 7
  00098	2b c2		 sub	 eax, edx
  0009a	89 44 24 24	 mov	 DWORD PTR bit_o$[rsp], eax

; 268  :         d[byte_o] &= ~((1<<(8-bit_o))-1);

  0009e	48 63 44 24 20	 movsxd	 rax, DWORD PTR byte_o$[rsp]
  000a3	b9 08 00 00 00	 mov	 ecx, 8
  000a8	2b 4c 24 24	 sub	 ecx, DWORD PTR bit_o$[rsp]
  000ac	ba 01 00 00 00	 mov	 edx, 1
  000b1	d3 e2		 shl	 edx, cl
  000b3	8b ca		 mov	 ecx, edx
  000b5	ff c9		 dec	 ecx
  000b7	f7 d1		 not	 ecx
  000b9	48 8b 54 24 38	 mov	 rdx, QWORD PTR d$[rsp]
  000be	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  000c2	23 c1		 and	 eax, ecx
  000c4	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR byte_o$[rsp]
  000c9	48 8b 54 24 38	 mov	 rdx, QWORD PTR d$[rsp]
  000ce	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 269  :         if (bit_o < 3)

  000d1	83 7c 24 24 03	 cmp	 DWORD PTR bit_o$[rsp], 3
  000d6	7d 3d		 jge	 SHORT $LN4@http_decod

; 270  :         {
; 271  :             d[byte_o] |= (idx << (2-bit_o));

  000d8	48 63 44 24 20	 movsxd	 rax, DWORD PTR byte_o$[rsp]
  000dd	b9 02 00 00 00	 mov	 ecx, 2
  000e2	2b 4c 24 24	 sub	 ecx, DWORD PTR bit_o$[rsp]
  000e6	8b 54 24 2c	 mov	 edx, DWORD PTR idx$[rsp]
  000ea	d3 e2		 shl	 edx, cl
  000ec	8b ca		 mov	 ecx, edx
  000ee	48 8b 54 24 38	 mov	 rdx, QWORD PTR d$[rsp]
  000f3	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  000f7	0b c1		 or	 eax, ecx
  000f9	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR byte_o$[rsp]
  000fe	48 8b 54 24 38	 mov	 rdx, QWORD PTR d$[rsp]
  00103	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 272  :             n = byte_o+1;

  00106	8b 44 24 20	 mov	 eax, DWORD PTR byte_o$[rsp]
  0010a	ff c0		 inc	 eax
  0010c	89 44 24 30	 mov	 DWORD PTR n$[rsp], eax

; 273  :         }

  00110	e9 8a 00 00 00	 jmp	 $LN5@http_decod
$LN4@http_decod:

; 274  :         else
; 275  :         {
; 276  :             d[byte_o] |= (idx >> (bit_o-2));

  00115	48 63 44 24 20	 movsxd	 rax, DWORD PTR byte_o$[rsp]
  0011a	8b 4c 24 24	 mov	 ecx, DWORD PTR bit_o$[rsp]
  0011e	83 e9 02	 sub	 ecx, 2
  00121	8b 54 24 2c	 mov	 edx, DWORD PTR idx$[rsp]
  00125	d3 fa		 sar	 edx, cl
  00127	8b ca		 mov	 ecx, edx
  00129	48 8b 54 24 38	 mov	 rdx, QWORD PTR d$[rsp]
  0012e	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00132	0b c1		 or	 eax, ecx
  00134	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR byte_o$[rsp]
  00139	48 8b 54 24 38	 mov	 rdx, QWORD PTR d$[rsp]
  0013e	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 277  :             d[byte_o+1] = 0;

  00141	8b 44 24 20	 mov	 eax, DWORD PTR byte_o$[rsp]
  00145	ff c0		 inc	 eax
  00147	48 98		 cdqe
  00149	48 8b 4c 24 38	 mov	 rcx, QWORD PTR d$[rsp]
  0014e	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 278  :             d[byte_o+1] |= (idx << (8-(bit_o-2))) & 0xFF;

  00152	8b 44 24 20	 mov	 eax, DWORD PTR byte_o$[rsp]
  00156	ff c0		 inc	 eax
  00158	48 98		 cdqe
  0015a	8b 4c 24 24	 mov	 ecx, DWORD PTR bit_o$[rsp]
  0015e	83 e9 02	 sub	 ecx, 2
  00161	ba 08 00 00 00	 mov	 edx, 8
  00166	2b d1		 sub	 edx, ecx
  00168	8b ca		 mov	 ecx, edx
  0016a	8b 54 24 2c	 mov	 edx, DWORD PTR idx$[rsp]
  0016e	d3 e2		 shl	 edx, cl
  00170	8b ca		 mov	 ecx, edx
  00172	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  00178	48 8b 54 24 38	 mov	 rdx, QWORD PTR d$[rsp]
  0017d	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00181	0b c1		 or	 eax, ecx
  00183	8b 4c 24 20	 mov	 ecx, DWORD PTR byte_o$[rsp]
  00187	ff c1		 inc	 ecx
  00189	48 63 c9	 movsxd	 rcx, ecx
  0018c	48 8b 54 24 38	 mov	 rdx, QWORD PTR d$[rsp]
  00191	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 279  :             n = byte_o+2;

  00194	8b 44 24 20	 mov	 eax, DWORD PTR byte_o$[rsp]
  00198	83 c0 02	 add	 eax, 2
  0019b	89 44 24 30	 mov	 DWORD PTR n$[rsp], eax
$LN5@http_decod:

; 280  :         }
; 281  :             s++; i++;

  0019f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001a4	48 ff c0	 inc	 rax
  001a7	48 89 44 24 60	 mov	 QWORD PTR s$[rsp], rax
  001ac	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  001b0	ff c0		 inc	 eax
  001b2	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax

; 282  :     }

  001b6	e9 74 fe ff ff	 jmp	 $LN2@http_decod
$LN3@http_decod:

; 283  :     /* null terminate */
; 284  :     d[n] = 0;

  001bb	48 63 44 24 30	 movsxd	 rax, DWORD PTR n$[rsp]
  001c0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR d$[rsp]
  001c5	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 285  : }

  001c9	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001cd	c3		 ret	 0
http_decode_base64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
tm$ = 32
time_buff$ = 64
buff_size$ = 72
t$ = 80
http_timestring PROC

; 245  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 246  :     struct tm *tm = localtime(&t);

  00012	48 8d 4c 24 50	 lea	 rcx, QWORD PTR t$[rsp]
  00017	e8 00 00 00 00	 call	 localtime
  0001c	48 89 44 24 20	 mov	 QWORD PTR tm$[rsp], rax

; 247  :     strftime(time_buff, buff_size, "%a, %d %b %Y %H:%M:%S %Z", tm);

  00021	48 63 44 24 48	 movsxd	 rax, DWORD PTR buff_size$[rsp]
  00026	4c 8b 4c 24 20	 mov	 r9, QWORD PTR tm$[rsp]
  0002b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159218
  00032	48 8b d0	 mov	 rdx, rax
  00035	48 8b 4c 24 40	 mov	 rcx, QWORD PTR time_buff$[rsp]
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strftime

; 248  :     return time_buff;

  00040	48 8b 44 24 40	 mov	 rax, QWORD PTR time_buff$[rsp]

; 249  : }

  00045	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00049	c3		 ret	 0
http_timestring ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
webblk$ = 80
err$ = 88
header$ = 96
info$ = 104
http_error PROC

; 232  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 233  :     hprintf(webblk->sock,"HTTP/1.0 %s\n%sConnection: close\n"

  00018	48 8b 44 24 68	 mov	 rax, QWORD PTR info$[rsp]
  0001d	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00022	48 8b 44 24 58	 mov	 rax, QWORD PTR err$[rsp]
  00027	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0002c	48 8b 44 24 58	 mov	 rax, QWORD PTR err$[rsp]
  00031	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00036	4c 8b 4c 24 60	 mov	 r9, QWORD PTR header$[rsp]
  0003b	4c 8b 44 24 58	 mov	 r8, QWORD PTR err$[rsp]
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159208
  00047	48 8b 44 24 50	 mov	 rax, QWORD PTR webblk$[rsp]
  0004c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 234  :                           "Content-Type: text/html\n\n"
; 235  :                           "<HTML><HEAD><TITLE>%s</TITLE></HEAD>"
; 236  :                           "<BODY><H1>%s</H1><P>%s</BODY></HTML>\n\n",
; 237  :                           err, header, err, err, info);
; 238  :     http_exit(webblk);

  00054	48 8b 4c 24 50	 mov	 rcx, QWORD PTR webblk$[rsp]
  00059	e8 00 00 00 00	 call	 http_exit

; 239  : }

  0005e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00062	c3		 ret	 0
http_error ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
c$1 = 32
rc$ = 36
cgivar$ = 40
tmpvar$2 = 48
webblk$ = 80
http_exit PROC

; 162  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 163  : CGIVAR *cgivar;
; 164  : int rc;
; 165  :     if(webblk)

  00009	48 83 7c 24 50
	00		 cmp	 QWORD PTR webblk$[rsp], 0
  0000f	0f 84 df 00 00
	00		 je	 $LN7@http_exit

; 166  :     {
; 167  :         /* MS SDK docs state:
; 168  : 
; 169  :             "To assure that all data is sent and received on a connected
; 170  :              socket before it is closed, an application should use shutdown
; 171  :              to close connection before calling closesocket. For example,
; 172  :              to initiate a graceful disconnect:
; 173  : 
; 174  :                 1, Call WSAAsyncSelect to register for FD_CLOSE notification.
; 175  :                 2. Call shutdown with how=SD_SEND.
; 176  :                 3. When FD_CLOSE received, call recv until zero returned,
; 177  :                    or SOCKET_ERROR.
; 178  :                 4. Call closesocket.
; 179  : 
; 180  :             Note: The shutdown function does not block regardless of the
; 181  :             SO_LINGER setting on the socket."
; 182  :         */
; 183  : 
; 184  :         // Notify other end of connection to not expect any more data from us.
; 185  :         // They should detect this via their own 'recv' returning zero bytes
; 186  :         // (thus letting them know they've thus received all the data from us
; 187  :         // they're ever going to receive). They should then do their own
; 188  :         // 'shutdown(s,SHUT_WR)' at their end letting US know we're also not
; 189  :         // going to be receiving any more data from THEM. This is called a
; 190  :         // "graceful close" of the connection...
; 191  : 
; 192  :         shutdown( webblk->sock, SHUT_WR );

  00015	48 8b 44 24 50	 mov	 rax, QWORD PTR webblk$[rsp]
  0001a	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0001d	ba 01 00 00 00	 mov	 edx, 1
  00022	48 8b c8	 mov	 rcx, rax
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_shutdown
$LN4@http_exit:

; 193  : 
; 194  :         // Now wait for them to shudown THEIR end of the connection (i.e. wait
; 195  :         // for them to do their own 'shutdown(s,SHUT_WR)') by "hanging" on a
; 196  :         // 'recv' call until we either eventually detect they've shutdown their
; 197  :         // end of the connection (0 bytes received) or else an error occurs...
; 198  : 
; 199  :         do
; 200  :         {
; 201  :             BYTE c;
; 202  :             rc = read_socket( webblk->sock, &c, 1 );

  0002b	41 b8 01 00 00
	00		 mov	 r8d, 1
  00031	48 8d 54 24 20	 lea	 rdx, QWORD PTR c$1[rsp]
  00036	48 8b 44 24 50	 mov	 rax, QWORD PTR webblk$[rsp]
  0003b	8b 08		 mov	 ecx, DWORD PTR [rax]
  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read_socket
  00043	89 44 24 24	 mov	 DWORD PTR rc$[rsp], eax

; 203  :         }
; 204  :         while ( rc > 0 );

  00047	83 7c 24 24 00	 cmp	 DWORD PTR rc$[rsp], 0
  0004c	7f dd		 jg	 SHORT $LN4@http_exit

; 205  : 
; 206  :         // NOW we can SAFELY close the socket since we now KNOW for CERTAIN
; 207  :         // that they've received ALL of the data we previously sent to them...
; 208  :         // (otherwise they wouldn't have close their connection on us!)
; 209  : 
; 210  :         close_socket( webblk->sock );

  0004e	48 8b 44 24 50	 mov	 rax, QWORD PTR webblk$[rsp]
  00053	8b 08		 mov	 ecx, DWORD PTR [rax]
  00055	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket

; 211  : 
; 212  :         if(webblk->user) free(webblk->user);

  0005b	48 8b 44 24 50	 mov	 rax, QWORD PTR webblk$[rsp]
  00060	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  00065	74 0f		 je	 SHORT $LN8@http_exit
  00067	48 8b 44 24 50	 mov	 rax, QWORD PTR webblk$[rsp]
  0006c	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00070	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN8@http_exit:

; 213  :         if(webblk->request) free(webblk->request);

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR webblk$[rsp]
  0007b	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00080	74 0f		 je	 SHORT $LN9@http_exit
  00082	48 8b 44 24 50	 mov	 rax, QWORD PTR webblk$[rsp]
  00087	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN9@http_exit:

; 214  :         cgivar = webblk->cgivar;

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR webblk$[rsp]
  00096	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0009a	48 89 44 24 28	 mov	 QWORD PTR cgivar$[rsp], rax
$LN5@http_exit:

; 215  :         while(cgivar)

  0009f	48 83 7c 24 28
	00		 cmp	 QWORD PTR cgivar$[rsp], 0
  000a5	74 42		 je	 SHORT $LN6@http_exit

; 216  :         {
; 217  :             CGIVAR *tmpvar = cgivar->next;

  000a7	48 8b 44 24 28	 mov	 rax, QWORD PTR cgivar$[rsp]
  000ac	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000af	48 89 44 24 30	 mov	 QWORD PTR tmpvar$2[rsp], rax

; 218  :             free(cgivar->name);

  000b4	48 8b 44 24 28	 mov	 rax, QWORD PTR cgivar$[rsp]
  000b9	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 219  :             free(cgivar->value);

  000c3	48 8b 44 24 28	 mov	 rax, QWORD PTR cgivar$[rsp]
  000c8	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  000cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 220  :             free(cgivar);

  000d2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR cgivar$[rsp]
  000d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 221  :             cgivar = tmpvar;

  000dd	48 8b 44 24 30	 mov	 rax, QWORD PTR tmpvar$2[rsp]
  000e2	48 89 44 24 28	 mov	 QWORD PTR cgivar$[rsp], rax

; 222  :         }

  000e7	eb b6		 jmp	 SHORT $LN5@http_exit
$LN6@http_exit:

; 223  :         free(webblk);

  000e9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR webblk$[rsp]
  000ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@http_exit:

; 224  :     }
; 225  :     exit_thread(NULL);

  000f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159197
  000fb	33 c9		 xor	 ecx, ecx
  000fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_exit_thread

; 226  : }

  00103	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00107	c3		 ret	 0
http_exit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
rc$1 = 80
p$2 = 88
p$3 = 96
p$4 = 104
p$5 = 112
p$6 = 120
tv131 = 128
tv159 = 136
absolute_httproot_path$7 = 144
process_dir$8 = 416
msgbuf$9 = 688
msgbuf$10 = 960
msgbuf$11 = 1232
pathname$12 = 1504
msgbuf$13 = 1776
__$ArrayPad$ = 2048
http_root PROC

; 702  : {

$LN20:
  00000	40 57		 push	 rdi
  00002	48 81 ec 10 08
	00 00		 sub	 rsp, 2064		; 00000810H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 84 24 00
	08 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 703  :     obtain_lock( &http_lock_root );

  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159505
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:http_lock_root
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 704  : 
; 705  :     /* If the HTTP root directory is not specified,
; 706  :        use a reasonable default */
; 707  :     if (!http_serv.httproot)

  0002f	48 83 3d 18 00
	00 00 00	 cmp	 QWORD PTR http_serv+24, 0
  00037	75 5d		 jne	 SHORT $LN2@http_root

; 708  :     {
; 709  : #if defined(_MSVC_)
; 710  :         char process_dir[HTTP_PATH_LENGTH];
; 711  :         if (get_process_directory(process_dir,HTTP_PATH_LENGTH) > 0)

  00039	ba 04 01 00 00	 mov	 edx, 260		; 00000104H
  0003e	48 8d 8c 24 a0
	01 00 00	 lea	 rcx, QWORD PTR process_dir$8[rsp]
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_get_process_directory
  0004c	85 c0		 test	 eax, eax
  0004e	7e 32		 jle	 SHORT $LN3@http_root

; 712  :         {
; 713  :             STRLCAT( process_dir, "\\html" );

  00050	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159509
  0005d	48 8d 8c 24 a0
	01 00 00	 lea	 rcx, QWORD PTR process_dir$8[rsp]
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 714  :             http_serv.httproot = strdup(process_dir);

  0006b	48 8d 8c 24 a0
	01 00 00	 lea	 rcx, QWORD PTR process_dir$8[rsp]
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00079	48 89 05 18 00
	00 00		 mov	 QWORD PTR http_serv+24, rax

; 715  :         }

  00080	eb 14		 jmp	 SHORT $LN4@http_root
$LN3@http_root:

; 716  :         else
; 717  : #endif /*defined(WIN32)*/
; 718  :         http_serv.httproot = strdup(HTTP_ROOT);

  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159510
  00089	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0008f	48 89 05 18 00
	00 00		 mov	 QWORD PTR http_serv+24, rax
$LN4@http_root:
$LN2@http_root:

; 719  :     }
; 720  : 
; 721  :     /* Convert the specified HTTPROOT value to an absolute path
; 722  :        ending with a '/' and save in http_serv.httproot. */
; 723  :     {
; 724  :         char absolute_httproot_path[HTTP_PATH_LENGTH];
; 725  :         int  rc;
; 726  : #if defined(_MSVC_)
; 727  :         /* Expand any embedded %var% environ vars */
; 728  :         rc = expand_environ_vars( http_serv.httproot, absolute_httproot_path,

  00096	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  0009c	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR absolute_httproot_path$7[rsp]
  000a4	48 8b 0d 18 00
	00 00		 mov	 rcx, QWORD PTR http_serv+24
  000ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_expand_environ_vars
  000b1	89 44 24 50	 mov	 DWORD PTR rc$1[rsp], eax

; 729  :             sizeof(absolute_httproot_path) );
; 730  :         if (rc == 0)

  000b5	83 7c 24 50 00	 cmp	 DWORD PTR rc$1[rsp], 0
  000ba	75 36		 jne	 SHORT $LN5@http_root

; 731  :         {
; 732  :             char *p = strdup(absolute_httproot_path);;

  000bc	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR absolute_httproot_path$7[rsp]
  000c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  000ca	48 89 44 24 78	 mov	 QWORD PTR p$6[rsp], rax

; 733  :             if ( http_serv.httproot != NULL )

  000cf	48 83 3d 18 00
	00 00 00	 cmp	 QWORD PTR http_serv+24, 0
  000d7	74 0d		 je	 SHORT $LN6@http_root

; 734  :                 free(http_serv.httproot);

  000d9	48 8b 0d 18 00
	00 00		 mov	 rcx, QWORD PTR http_serv+24
  000e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN6@http_root:

; 735  : 
; 736  :             http_serv.httproot = p;

  000e6	48 8b 44 24 78	 mov	 rax, QWORD PTR p$6[rsp]
  000eb	48 89 05 18 00
	00 00		 mov	 QWORD PTR http_serv+24, rax
$LN5@http_root:

; 737  :         }
; 738  : #endif /* defined(_MSVC_) */
; 739  :         /* Convert to absolute path */
; 740  :         if (!realpath(http_serv.httproot, absolute_httproot_path))

  000f2	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR absolute_httproot_path$7[rsp]
  000fa	48 8b 0d 18 00
	00 00		 mov	 rcx, QWORD PTR http_serv+24
  00101	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realpath
  00107	48 85 c0	 test	 rax, rax
  0010a	0f 85 f5 00 00
	00		 jne	 $LN7@http_root

; 741  :         {
; 742  :             char msgbuf[MAX_PATH+3] = { 0 };

  00110	48 8d 84 24 b0
	02 00 00	 lea	 rax, QWORD PTR msgbuf$9[rsp]
  00118	48 8b f8	 mov	 rdi, rax
  0011b	33 c0		 xor	 eax, eax
  0011d	b9 07 01 00 00	 mov	 ecx, 263		; 00000107H
  00122	f3 aa		 rep stosb

; 743  :             char *p = msgbuf;

  00124	48 8d 84 24 b0
	02 00 00	 lea	 rax, QWORD PTR msgbuf$9[rsp]
  0012c	48 89 44 24 58	 mov	 QWORD PTR p$2[rsp], rax

; 744  : 
; 745  :             if ( strchr( http_serv.httproot, SPACE ) == NULL )

  00131	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00136	48 8b 0d 18 00
	00 00		 mov	 rcx, QWORD PTR http_serv+24
  0013d	e8 00 00 00 00	 call	 strchr
  00142	48 85 c0	 test	 rax, rax
  00145	75 0e		 jne	 SHORT $LN8@http_root

; 746  :                 p = http_serv.httproot;

  00147	48 8b 05 18 00
	00 00		 mov	 rax, QWORD PTR http_serv+24
  0014e	48 89 44 24 58	 mov	 QWORD PTR p$2[rsp], rax
  00153	eb 21		 jmp	 SHORT $LN9@http_root
$LN8@http_root:

; 747  :             else
; 748  :                 MSGBUF(msgbuf, "'%s'", http_serv.httproot);

  00155	4c 8b 0d 18 00
	00 00		 mov	 r9, QWORD PTR http_serv+24
  0015c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159516
  00163	ba 07 01 00 00	 mov	 edx, 263		; 00000107H
  00168	48 8d 8c 24 b0
	02 00 00	 lea	 rcx, QWORD PTR msgbuf$9[rsp]
  00170	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN9@http_root:

; 749  : 
; 750  :             // "HTTP server: invalid root directory: %s: %s"
; 751  :             WRMSG(HHC01801, "E", p, strerror(errno));

  00176	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0017c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0017e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00184	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv131[rsp], rax
  0018c	b9 01 00 00 00	 mov	 ecx, 1
  00191	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00197	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv131[rsp]
  0019f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001a4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR p$2[rsp]
  001a9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159517
  001b5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159518
  001c1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001c6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001cb	41 b9 03 00 00
	00		 mov	 r9d, 3
  001d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159519
  001d8	ba ef 02 00 00	 mov	 edx, 751		; 000002efH
  001dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159520
  001e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 752  : 
; 753  :             release_lock( &http_lock_root );

  001ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159521
  001f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:http_lock_root
  001f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 754  : 
; 755  :             return NULL;

  001fe	33 c0		 xor	 eax, eax
  00200	e9 60 03 00 00	 jmp	 $LN1@http_root
$LN7@http_root:

; 756  :         }
; 757  :         /* Verify that the absolute path is valid */
; 758  :         // mode: 0 = exist only, 2 = write, 4 = read, 6 = read/write
; 759  :         // rc: 0 = success, -1 = error (errno = cause)
; 760  :         // ENOENT = File name or path not found.
; 761  :         if (access( absolute_httproot_path, R_OK ) != 0)

  00205	ba 04 00 00 00	 mov	 edx, 4
  0020a	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR absolute_httproot_path$7[rsp]
  00212	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_access
  00218	85 c0		 test	 eax, eax
  0021a	0f 84 e2 00 00
	00		 je	 $LN10@http_root

; 762  :         {
; 763  :             char msgbuf[MAX_PATH+3];
; 764  :             char *p = absolute_httproot_path;

  00220	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR absolute_httproot_path$7[rsp]
  00228	48 89 44 24 60	 mov	 QWORD PTR p$3[rsp], rax

; 765  : 
; 766  :             if ( strchr( absolute_httproot_path, SPACE ) != NULL )

  0022d	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00232	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR absolute_httproot_path$7[rsp]
  0023a	e8 00 00 00 00	 call	 strchr
  0023f	48 85 c0	 test	 rax, rax
  00242	74 2f		 je	 SHORT $LN11@http_root

; 767  :             {
; 768  :                 MSGBUF(msgbuf, "'%s'", absolute_httproot_path);

  00244	4c 8d 8c 24 90
	00 00 00	 lea	 r9, QWORD PTR absolute_httproot_path$7[rsp]
  0024c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159524
  00253	ba 07 01 00 00	 mov	 edx, 263		; 00000107H
  00258	48 8d 8c 24 f0
	06 00 00	 lea	 rcx, QWORD PTR msgbuf$13[rsp]
  00260	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 769  :                 p = msgbuf;

  00266	48 8d 84 24 f0
	06 00 00	 lea	 rax, QWORD PTR msgbuf$13[rsp]
  0026e	48 89 44 24 60	 mov	 QWORD PTR p$3[rsp], rax
$LN11@http_root:

; 770  :             }
; 771  : 
; 772  :             // "HTTP server: invalid root directory: %s: %s"
; 773  :             WRMSG(HHC01801, "E", p, strerror(errno));

  00273	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00279	8b 08		 mov	 ecx, DWORD PTR [rax]
  0027b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00281	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv159[rsp], rax
  00289	b9 01 00 00 00	 mov	 ecx, 1
  0028e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00294	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv159[rsp]
  0029c	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002a1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR p$3[rsp]
  002a6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159525
  002b2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159526
  002be	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002c3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002c8	41 b9 03 00 00
	00		 mov	 r9d, 3
  002ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159527
  002d5	ba 05 03 00 00	 mov	 edx, 773		; 00000305H
  002da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159528
  002e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 774  : 
; 775  :             release_lock( &http_lock_root );

  002e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159529
  002ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:http_lock_root
  002f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 776  : 
; 777  :             return NULL;

  002fb	33 c0		 xor	 eax, eax
  002fd	e9 63 02 00 00	 jmp	 $LN1@http_root
$LN10@http_root:

; 778  :         }
; 779  : 
; 780  :         /* Append trailing [back]slash, but only if needed */
; 781  :         rc = (int)strlen(absolute_httproot_path);

  00302	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR absolute_httproot_path$7[rsp]
  0030a	e8 00 00 00 00	 call	 strlen
  0030f	89 44 24 50	 mov	 DWORD PTR rc$1[rsp], eax

; 782  : 
; 783  :         if (absolute_httproot_path[rc-1] != *HTTP_PS)

  00313	8b 44 24 50	 mov	 eax, DWORD PTR rc$1[rsp]
  00317	ff c8		 dec	 eax
  00319	48 98		 cdqe
  0031b	0f be 84 04 90
	00 00 00	 movsx	 eax, BYTE PTR absolute_httproot_path$7[rsp+rax]
  00323	b9 01 00 00 00	 mov	 ecx, 1
  00328	48 6b c9 00	 imul	 rcx, rcx, 0
  0032c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159531
  00333	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  00337	3b c1		 cmp	 eax, ecx
  00339	74 1b		 je	 SHORT $LN12@http_root

; 784  :             STRLCAT( absolute_httproot_path, HTTP_PS );

  0033b	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00341	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159532
  00348	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR absolute_httproot_path$7[rsp]
  00350	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN12@http_root:

; 785  : 
; 786  :         if (strlen(absolute_httproot_path) >= MAX_PATH )

  00356	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR absolute_httproot_path$7[rsp]
  0035e	e8 00 00 00 00	 call	 strlen
  00363	48 3d 04 01 00
	00		 cmp	 rax, 260		; 00000104H
  00369	0f 82 e6 00 00
	00		 jb	 $LN13@http_root

; 787  :         {
; 788  :             char msgbuf[MAX_PATH+3] = { 0 };

  0036f	48 8d 84 24 c0
	03 00 00	 lea	 rax, QWORD PTR msgbuf$10[rsp]
  00377	48 8b f8	 mov	 rdi, rax
  0037a	33 c0		 xor	 eax, eax
  0037c	b9 07 01 00 00	 mov	 ecx, 263		; 00000107H
  00381	f3 aa		 rep stosb

; 789  :             char *p = msgbuf;

  00383	48 8d 84 24 c0
	03 00 00	 lea	 rax, QWORD PTR msgbuf$10[rsp]
  0038b	48 89 44 24 68	 mov	 QWORD PTR p$4[rsp], rax

; 790  : 
; 791  :             if ( strchr( absolute_httproot_path, SPACE ) == NULL )

  00390	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00395	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR absolute_httproot_path$7[rsp]
  0039d	e8 00 00 00 00	 call	 strchr
  003a2	48 85 c0	 test	 rax, rax
  003a5	75 0f		 jne	 SHORT $LN15@http_root

; 792  :                 p = absolute_httproot_path;

  003a7	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR absolute_httproot_path$7[rsp]
  003af	48 89 44 24 68	 mov	 QWORD PTR p$4[rsp], rax
  003b4	eb 22		 jmp	 SHORT $LN16@http_root
$LN15@http_root:

; 793  :             else
; 794  :                 MSGBUF(msgbuf, "'%s'", absolute_httproot_path);

  003b6	4c 8d 8c 24 90
	00 00 00	 lea	 r9, QWORD PTR absolute_httproot_path$7[rsp]
  003be	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159537
  003c5	ba 07 01 00 00	 mov	 edx, 263		; 00000107H
  003ca	48 8d 8c 24 c0
	03 00 00	 lea	 rcx, QWORD PTR msgbuf$10[rsp]
  003d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN16@http_root:

; 795  : 
; 796  :             // "HTTP server: invalid root directory: %s: %s"
; 797  :             WRMSG(HHC01801, "E", p, "path length too long");

  003d8	b9 01 00 00 00	 mov	 ecx, 1
  003dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159538
  003ea	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003ef	48 8b 4c 24 68	 mov	 rcx, QWORD PTR p$4[rsp]
  003f4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159539
  00400	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00405	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159540
  0040c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00411	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00416	41 b9 03 00 00
	00		 mov	 r9d, 3
  0041c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159541
  00423	ba 1d 03 00 00	 mov	 edx, 797		; 0000031dH
  00428	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159542
  0042f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 798  : 
; 799  :             release_lock( &http_lock_root );

  00435	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159543
  0043c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:http_lock_root
  00443	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 800  : 
; 801  :             return NULL;

  00449	33 c0		 xor	 eax, eax
  0044b	e9 15 01 00 00	 jmp	 $LN1@http_root

; 802  :         }

  00450	e9 f5 00 00 00	 jmp	 $LN14@http_root
$LN13@http_root:

; 803  :         else
; 804  :         {
; 805  :             char pathname[MAX_PATH];    /* working pathname          */
; 806  :             char msgbuf[MAX_PATH+3];
; 807  :             char *p = msgbuf;

  00455	48 8d 84 24 d0
	04 00 00	 lea	 rax, QWORD PTR msgbuf$11[rsp]
  0045d	48 89 44 24 70	 mov	 QWORD PTR p$5[rsp], rax

; 808  : 
; 809  :             memset(msgbuf,0,sizeof(msgbuf));

  00462	48 8d 84 24 d0
	04 00 00	 lea	 rax, QWORD PTR msgbuf$11[rsp]
  0046a	48 8b f8	 mov	 rdi, rax
  0046d	33 c0		 xor	 eax, eax
  0046f	b9 07 01 00 00	 mov	 ecx, 263		; 00000107H
  00474	f3 aa		 rep stosb

; 810  : 
; 811  :             /* Save the absolute path */
; 812  :             hostpath(pathname, absolute_httproot_path, sizeof(pathname));

  00476	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  0047c	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR absolute_httproot_path$7[rsp]
  00484	48 8d 8c 24 e0
	05 00 00	 lea	 rcx, QWORD PTR pathname$12[rsp]
  0048c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 813  :             free(http_serv.httproot);

  00492	48 8b 0d 18 00
	00 00		 mov	 rcx, QWORD PTR http_serv+24
  00499	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 814  :             http_serv.httproot = strdup(pathname);

  0049f	48 8d 8c 24 e0
	05 00 00	 lea	 rcx, QWORD PTR pathname$12[rsp]
  004a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  004ad	48 89 05 18 00
	00 00		 mov	 QWORD PTR http_serv+24, rax

; 815  : 
; 816  :             if ( strchr( http_serv.httproot, SPACE ) == NULL )

  004b4	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  004b9	48 8b 0d 18 00
	00 00		 mov	 rcx, QWORD PTR http_serv+24
  004c0	e8 00 00 00 00	 call	 strchr
  004c5	48 85 c0	 test	 rax, rax
  004c8	75 0e		 jne	 SHORT $LN17@http_root

; 817  :                 p = http_serv.httproot;

  004ca	48 8b 05 18 00
	00 00		 mov	 rax, QWORD PTR http_serv+24
  004d1	48 89 44 24 70	 mov	 QWORD PTR p$5[rsp], rax
  004d6	eb 21		 jmp	 SHORT $LN18@http_root
$LN17@http_root:

; 818  :             else
; 819  :                 MSGBUF(msgbuf, "'%s'", http_serv.httproot);

  004d8	4c 8b 0d 18 00
	00 00		 mov	 r9, QWORD PTR http_serv+24
  004df	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159546
  004e6	ba 07 01 00 00	 mov	 edx, 263		; 00000107H
  004eb	48 8d 8c 24 d0
	04 00 00	 lea	 rcx, QWORD PTR msgbuf$11[rsp]
  004f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN18@http_root:

; 820  : 
; 821  :             // "HTTP server using root directory %s"
; 822  :             WRMSG(HHC01802, "I", p);

  004f9	b9 01 00 00 00	 mov	 ecx, 1
  004fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00504	48 8b 4c 24 70	 mov	 rcx, QWORD PTR p$5[rsp]
  00509	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0050e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159547
  00515	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0051a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159548
  00521	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00526	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0052b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00531	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159549
  00538	ba 36 03 00 00	 mov	 edx, 822		; 00000336H
  0053d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159550
  00544	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN14@http_root:

; 823  :         }
; 824  :     }
; 825  : 
; 826  :     release_lock( &http_lock_root );

  0054a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159551
  00551	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:http_lock_root
  00558	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 827  : 
; 828  :     return http_serv.httproot;

  0055e	48 8b 05 18 00
	00 00		 mov	 rax, QWORD PTR http_serv+24
$LN1@http_root:

; 829  : }

  00565	48 8b 8c 24 00
	08 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0056d	48 33 cc	 xor	 rcx, rsp
  00570	e8 00 00 00 00	 call	 __security_check_cookie
  00575	48 81 c4 10 08
	00 00		 add	 rsp, 2064		; 00000810H
  0057c	5f		 pop	 rdi
  0057d	c3		 ret	 0
http_root ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
rc$ = 80
lsock$ = 84
rc$1 = 88
csock$ = 92
tv75 = 96
tv80 = 100
optval$ = 104
tv166 = 108
tv219 = 112
tv383 = 116
tv388 = 120
timeout$ = 128
httptid$ = 136
tv130 = 144
tv183 = 152
tv203 = 160
tv283 = 168
tv306 = 176
tv362 = 184
server$ = 192
selset$ = 208
__$ArrayPad$ = 8416
arg$ = 8448
http_server PROC

; 852  : {

$LN34:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	b8 f0 20 00 00	 mov	 eax, 8432		; 000020f0H
  0000b	e8 00 00 00 00	 call	 __chkstk
  00010	48 2b e0	 sub	 rsp, rax
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 84 24 e0
	20 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@http_serve:

; 853  : int                 rc;                 /* Return code               */
; 854  : int                 lsock;              /* Socket for listening      */
; 855  : int                 csock;              /* Socket for conversation   */
; 856  : struct sockaddr_in  server;             /* Server address structure  */
; 857  : fd_set              selset;             /* Read bit map for select   */
; 858  : int                 optval;             /* Argument for setsockopt   */
; 859  : TID                 httptid;            /* Negotiation thread id     */
; 860  : struct timeval      timeout;            /* timeout value             */
; 861  : 
; 862  : 
; 863  :     UNREFERENCED(arg);

  00025	33 c0		 xor	 eax, eax
  00027	85 c0		 test	 eax, eax
  00029	75 fa		 jne	 SHORT $LN4@http_serve

; 864  : 
; 865  :     http_serv.httpshutdown = TRUE;

  0002b	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  00032	0c 04		 or	 al, 4
  00034	88 05 20 00 00
	00		 mov	 BYTE PTR http_serv+32, al

; 866  : 
; 867  :     hdl_addshut("http_shutdown",http_shutdown, NULL);

  0003a	45 33 c0	 xor	 r8d, r8d
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:http_shutdown
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159612
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hdl_addshut

; 868  : 
; 869  :     /* Set server thread priority; ignore any errors */
; 870  :     set_thread_priority( sysblk.srvprio);

  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fthread_self
  00057	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159613
  0005e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00065	8b 91 74 13 00
	00		 mov	 edx, DWORD PTR [rcx+4980]
  0006b	8b c8		 mov	 ecx, eax
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_set_thread_prio

; 871  : 
; 872  :     /* Display thread started message on control panel */
; 873  :     LOG_THREAD_BEGIN( HTTP_SRVR_THREAD_NAME  );

  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fthread_self
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159615
  00080	8b c8		 mov	 ecx, eax
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_get_thread_prio
  00088	89 44 24 60	 mov	 DWORD PTR tv75[rsp], eax
  0008c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fthread_self
  00092	89 44 24 64	 mov	 DWORD PTR tv80[rsp], eax
  00096	b9 01 00 00 00	 mov	 ecx, 1
  0009b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159614
  000a8	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000ad	8b 4c 24 60	 mov	 ecx, DWORD PTR tv75[rsp]
  000b1	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000b5	8b 4c 24 64	 mov	 ecx, DWORD PTR tv80[rsp]
  000b9	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159616
  000c4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159617
  000d0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000d5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000da	41 b9 03 00 00
	00		 mov	 r9d, 3
  000e0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159618
  000e7	ba 69 03 00 00	 mov	 edx, 873		; 00000369H
  000ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159619
  000f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 874  : 
; 875  :     /* make sure root path is built */
; 876  :     if ( http_root() == NULL )

  000f9	e8 00 00 00 00	 call	 http_root
  000fe	48 85 c0	 test	 rax, rax
  00101	75 05		 jne	 SHORT $LN14@http_serve

; 877  :         goto http_server_stop;

  00103	e9 54 06 00 00	 jmp	 $http_server_stop$35
$LN14@http_serve:

; 878  : 
; 879  :     /* Obtain a socket */
; 880  :     lsock = socket (AF_INET, SOCK_STREAM, IPPROTO_TCP);

  00108	41 b8 06 00 00
	00		 mov	 r8d, 6
  0010e	ba 01 00 00 00	 mov	 edx, 1
  00113	b9 02 00 00 00	 mov	 ecx, 2
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_socket
  0011e	89 44 24 54	 mov	 DWORD PTR lsock$[rsp], eax

; 881  : 
; 882  :     if (lsock < 0)

  00122	83 7c 24 54 00	 cmp	 DWORD PTR lsock$[rsp], 0
  00127	7d 7b		 jge	 SHORT $LN15@http_serve

; 883  :     {
; 884  :         WRMSG(HHC01800,"E", "socket()", strerror(HSO_errno));

  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  0012f	8b c8		 mov	 ecx, eax
  00131	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00137	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv130[rsp], rax
  0013f	b9 01 00 00 00	 mov	 ecx, 1
  00144	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0014a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv130[rsp]
  00152	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00157	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159622
  0015e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00163	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159623
  0016a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0016f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159624
  00176	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0017b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00180	41 b9 03 00 00
	00		 mov	 r9d, 3
  00186	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159625
  0018d	ba 74 03 00 00	 mov	 edx, 884		; 00000374H
  00192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159626
  00199	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 885  :         goto http_server_stop;

  0019f	e9 b8 05 00 00	 jmp	 $http_server_stop$35
$LN15@http_serve:

; 886  :     }
; 887  : 
; 888  :     /* Allow previous instance of socket to be reused */
; 889  :     optval = 1;

  001a4	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR optval$[rsp], 1

; 890  :     setsockopt (lsock, SOL_SOCKET, SO_REUSEADDR,

  001ac	48 63 44 24 54	 movsxd	 rax, DWORD PTR lsock$[rsp]
  001b1	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  001b9	4c 8d 4c 24 68	 lea	 r9, QWORD PTR optval$[rsp]
  001be	41 b8 04 00 00
	00		 mov	 r8d, 4
  001c4	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  001c9	48 8b c8	 mov	 rcx, rax
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setsockopt

; 891  :                 (void*)&optval, sizeof(optval));
; 892  : 
; 893  :     /* Prepare the sockaddr structure for the bind */
; 894  :     memset (&server, 0, sizeof(server));

  001d2	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR server$[rsp]
  001da	48 8b f8	 mov	 rdi, rax
  001dd	33 c0		 xor	 eax, eax
  001df	b9 10 00 00 00	 mov	 ecx, 16
  001e4	f3 aa		 rep stosb

; 895  :     server.sin_family = AF_INET;

  001e6	b8 02 00 00 00	 mov	 eax, 2
  001eb	66 89 84 24 c0
	00 00 00	 mov	 WORD PTR server$[rsp], ax

; 896  :     server.sin_addr.s_addr = INADDR_ANY;

  001f3	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR server$[rsp+4], 0

; 897  :     server.sin_port = http_serv.httpport;

  001fe	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR http_serv
  00205	66 89 84 24 c2
	00 00 00	 mov	 WORD PTR server$[rsp+2], ax

; 898  :     server.sin_port = htons(server.sin_port);

  0020d	0f b7 8c 24 c2
	00 00 00	 movzx	 ecx, WORD PTR server$[rsp+2]
  00215	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_htons
  0021b	66 89 84 24 c2
	00 00 00	 mov	 WORD PTR server$[rsp+2], ax

; 899  : 
; 900  :     http_serv.httpbinddone = FALSE;

  00223	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  0022a	24 fd		 and	 al, 253			; 000000fdH
  0022c	88 05 20 00 00
	00		 mov	 BYTE PTR http_serv+32, al
$LN5@http_serve:

; 901  :     /* Attempt to bind the socket to the port */
; 902  :     while (TRUE)

  00232	33 c0		 xor	 eax, eax
  00234	83 f8 01	 cmp	 eax, 1
  00237	0f 84 ca 00 00
	00		 je	 $LN6@http_serve

; 903  :     {
; 904  :         rc = bind (lsock, (struct sockaddr *)&server, sizeof(server));

  0023d	48 63 44 24 54	 movsxd	 rax, DWORD PTR lsock$[rsp]
  00242	41 b8 10 00 00
	00		 mov	 r8d, 16
  00248	48 8d 94 24 c0
	00 00 00	 lea	 rdx, QWORD PTR server$[rsp]
  00250	48 8b c8	 mov	 rcx, rax
  00253	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_bind
  00259	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 905  : 
; 906  :         if (rc == 0 || HSO_errno != HSO_EADDRINUSE) break;

  0025d	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  00262	74 0d		 je	 SHORT $LN17@http_serve
  00264	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  0026a	3d 40 27 00 00	 cmp	 eax, 10048		; 00002740H
  0026f	74 05		 je	 SHORT $LN16@http_serve
$LN17@http_serve:
  00271	e9 91 00 00 00	 jmp	 $LN6@http_serve
$LN16@http_serve:

; 907  : 
; 908  :         WRMSG(HHC01804, "W", http_serv.httpport);

  00276	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR http_serv
  0027d	89 44 24 6c	 mov	 DWORD PTR tv166[rsp], eax
  00281	b9 01 00 00 00	 mov	 ecx, 1
  00286	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0028c	8b 4c 24 6c	 mov	 ecx, DWORD PTR tv166[rsp]
  00290	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00294	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159629
  0029b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159630
  002a7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002ac	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002b1	41 b9 03 00 00
	00		 mov	 r9d, 3
  002b7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159631
  002be	ba 8c 03 00 00	 mov	 edx, 908		; 0000038cH
  002c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159632
  002ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN9@http_serve:

; 909  :         SLEEP(10);

  002d0	c7 44 24 58 0a
	00 00 00	 mov	 DWORD PTR rc$1[rsp], 10
$LN10@http_serve:
  002d8	83 7c 24 58 00	 cmp	 DWORD PTR rc$1[rsp], 0
  002dd	74 1d		 je	 SHORT $LN11@http_serve
  002df	8b 4c 24 58	 mov	 ecx, DWORD PTR rc$1[rsp]
  002e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sleep
  002e9	89 44 24 58	 mov	 DWORD PTR rc$1[rsp], eax
  002ed	83 7c 24 58 00	 cmp	 DWORD PTR rc$1[rsp], 0
  002f2	74 06		 je	 SHORT $LN18@http_serve
  002f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sched_yield
$LN18@http_serve:
  002fa	eb dc		 jmp	 SHORT $LN10@http_serve
$LN11@http_serve:
  002fc	33 c0		 xor	 eax, eax
  002fe	85 c0		 test	 eax, eax
  00300	75 ce		 jne	 SHORT $LN9@http_serve

; 910  :     } /* end while */

  00302	e9 2b ff ff ff	 jmp	 $LN5@http_serve
$LN6@http_serve:

; 911  : 
; 912  :     if (rc != 0)

  00307	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  0030c	74 7d		 je	 SHORT $LN19@http_serve

; 913  :     {
; 914  :         WRMSG(HHC01800,"E", "bind()", strerror(HSO_errno));

  0030e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00314	8b c8		 mov	 ecx, eax
  00316	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0031c	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv183[rsp], rax
  00324	b9 01 00 00 00	 mov	 ecx, 1
  00329	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0032f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv183[rsp]
  00337	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0033c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159636
  00343	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00348	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159637
  0034f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00354	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159638
  0035b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00360	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00365	41 b9 03 00 00
	00		 mov	 r9d, 3
  0036b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159639
  00372	ba 92 03 00 00	 mov	 edx, 914		; 00000392H
  00377	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159640
  0037e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 915  :         goto http_server_stop;

  00384	e9 d3 03 00 00	 jmp	 $http_server_stop$35

; 916  :     }

  00389	eb 0f		 jmp	 SHORT $LN20@http_serve
$LN19@http_serve:

; 917  :     else
; 918  :         http_serv.httpbinddone = TRUE;

  0038b	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  00392	0c 02		 or	 al, 2
  00394	88 05 20 00 00
	00		 mov	 BYTE PTR http_serv+32, al
$LN20@http_serve:

; 919  : 
; 920  :     /* Put the socket into listening state */
; 921  :     rc = listen (lsock, 32);

  0039a	48 63 44 24 54	 movsxd	 rax, DWORD PTR lsock$[rsp]
  0039f	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  003a4	48 8b c8	 mov	 rcx, rax
  003a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_listen
  003ad	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 922  : 
; 923  :     if (rc < 0)

  003b1	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  003b6	0f 8d 8a 00 00
	00		 jge	 $LN21@http_serve

; 924  :     {
; 925  :         WRMSG(HHC01800,"E", "listen()", strerror(HSO_errno));

  003bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  003c2	8b c8		 mov	 ecx, eax
  003c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  003ca	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv203[rsp], rax
  003d2	b9 01 00 00 00	 mov	 ecx, 1
  003d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003dd	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv203[rsp]
  003e5	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159642
  003f1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159643
  003fd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00402	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159644
  00409	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0040e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00413	41 b9 03 00 00
	00		 mov	 r9d, 3
  00419	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159645
  00420	ba 9d 03 00 00	 mov	 edx, 925		; 0000039dH
  00425	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159646
  0042c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 926  :         http_serv.httpbinddone = FALSE;

  00432	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  00439	24 fd		 and	 al, 253			; 000000fdH
  0043b	88 05 20 00 00
	00		 mov	 BYTE PTR http_serv+32, al

; 927  :         goto http_server_stop;

  00441	e9 16 03 00 00	 jmp	 $http_server_stop$35
$LN21@http_serve:

; 928  :     }
; 929  : 
; 930  :     http_serv.httpshutdown = FALSE;

  00446	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  0044d	24 fb		 and	 al, 251			; 000000fbH
  0044f	88 05 20 00 00
	00		 mov	 BYTE PTR http_serv+32, al

; 931  : 
; 932  :     WRMSG(HHC01803, "I", http_serv.httpport);

  00455	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR http_serv
  0045c	89 44 24 70	 mov	 DWORD PTR tv219[rsp], eax
  00460	b9 01 00 00 00	 mov	 ecx, 1
  00465	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0046b	8b 4c 24 70	 mov	 ecx, DWORD PTR tv219[rsp]
  0046f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00473	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159647
  0047a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0047f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159648
  00486	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0048b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00490	41 b9 03 00 00
	00		 mov	 r9d, 3
  00496	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159649
  0049d	ba a4 03 00 00	 mov	 edx, 932		; 000003a4H
  004a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159650
  004a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN33@http_serve:
$LN32@http_serve:
$LN31@http_serve:
$LN12@http_serve:

; 933  : 
; 934  :     /* Handle http requests */
; 935  :     while ( !http_serv.httpshutdown )

  004af	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  004b6	c0 e8 02	 shr	 al, 2
  004b9	24 01		 and	 al, 1
  004bb	0f b6 c0	 movzx	 eax, al
  004be	85 c0		 test	 eax, eax
  004c0	0f 85 8c 02 00
	00		 jne	 $LN13@http_serve

; 936  :     {
; 937  : 
; 938  :         /* Initialize the select parameters */
; 939  :         FD_ZERO (&selset);

  004c6	c7 84 24 d0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR selset$[rsp], 0

; 940  :         FD_SET (lsock, &selset);

  004d1	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR selset$[rsp]
  004d9	8b 4c 24 54	 mov	 ecx, DWORD PTR lsock$[rsp]
  004dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_SET

; 941  : 
; 942  :         timeout.tv_sec  = 0;

  004e3	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR timeout$[rsp], 0

; 943  :         timeout.tv_usec = 10000;

  004ee	c7 84 24 84 00
	00 00 10 27 00
	00		 mov	 DWORD PTR timeout$[rsp+4], 10000 ; 00002710H

; 944  : 
; 945  :         /* until a better way to implement this use standard windows */
; 946  : #undef select
; 947  :         /* Wait for a file descriptor to become ready  use NON-BLOCKING select()*/
; 948  :         rc = select ( lsock+1, &selset, NULL, NULL, &timeout );

  004f9	8b 44 24 54	 mov	 eax, DWORD PTR lsock$[rsp]
  004fd	ff c0		 inc	 eax
  004ff	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR timeout$[rsp]
  00507	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0050c	45 33 c9	 xor	 r9d, r9d
  0050f	45 33 c0	 xor	 r8d, r8d
  00512	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR selset$[rsp]
  0051a	8b c8		 mov	 ecx, eax
  0051c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_select
  00522	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 949  : 
; 950  :         if ( rc == 0 || http_serv.httpshutdown ) continue;

  00526	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  0052b	74 13		 je	 SHORT $LN23@http_serve
  0052d	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  00534	c0 e8 02	 shr	 al, 2
  00537	24 01		 and	 al, 1
  00539	0f b6 c0	 movzx	 eax, al
  0053c	85 c0		 test	 eax, eax
  0053e	74 05		 je	 SHORT $LN22@http_serve
$LN23@http_serve:
  00540	e9 6a ff ff ff	 jmp	 $LN12@http_serve
$LN22@http_serve:

; 951  : 
; 952  :         if (rc < 0 )

  00545	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  0054a	0f 8d 8d 00 00
	00		 jge	 $LN24@http_serve

; 953  :         {
; 954  :             if (HSO_errno == HSO_EINTR) continue;

  00550	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00556	3d 14 27 00 00	 cmp	 eax, 10004		; 00002714H
  0055b	75 05		 jne	 SHORT $LN25@http_serve
  0055d	e9 4d ff ff ff	 jmp	 $LN31@http_serve
$LN25@http_serve:

; 955  :             WRMSG(HHC01800, "E", "select()", strerror(HSO_errno));

  00562	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00568	8b c8		 mov	 ecx, eax
  0056a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00570	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv283[rsp], rax
  00578	b9 01 00 00 00	 mov	 ecx, 1
  0057d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00583	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv283[rsp]
  0058b	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00590	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159655
  00597	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0059c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159656
  005a3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159657
  005af	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005b4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005b9	41 b9 03 00 00
	00		 mov	 r9d, 3
  005bf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159658
  005c6	ba bb 03 00 00	 mov	 edx, 955		; 000003bbH
  005cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159659
  005d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 956  :             break;

  005d8	e9 75 01 00 00	 jmp	 $LN13@http_serve
$LN24@http_serve:

; 957  :         }
; 958  : 
; 959  :         /* If a http request has arrived then accept it */
; 960  :         if (FD_ISSET(lsock, &selset))

  005dd	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR selset$[rsp]
  005e5	8b 4c 24 54	 mov	 ecx, DWORD PTR lsock$[rsp]
  005e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_FD_ISSET
  005ef	85 c0		 test	 eax, eax
  005f1	0f 84 56 01 00
	00		 je	 $LN26@http_serve

; 961  :         {
; 962  :             /* Accept the connection and create conversation socket */
; 963  :             csock = accept (lsock, NULL, NULL);

  005f7	45 33 c0	 xor	 r8d, r8d
  005fa	33 d2		 xor	 edx, edx
  005fc	8b 4c 24 54	 mov	 ecx, DWORD PTR lsock$[rsp]
  00600	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_accept
  00606	89 44 24 5c	 mov	 DWORD PTR csock$[rsp], eax

; 964  : 
; 965  :             if (csock < 0)

  0060a	83 7c 24 5c 00	 cmp	 DWORD PTR csock$[rsp], 0
  0060f	7d 7b		 jge	 SHORT $LN27@http_serve

; 966  :             {
; 967  :                 WRMSG(HHC01800, "E", "accept()", strerror(HSO_errno));

  00611	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00617	8b c8		 mov	 ecx, eax
  00619	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0061f	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv306[rsp], rax
  00627	b9 01 00 00 00	 mov	 ecx, 1
  0062c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00632	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv306[rsp]
  0063a	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0063f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159662
  00646	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0064b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159663
  00652	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00657	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159664
  0065e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00663	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00668	41 b9 03 00 00
	00		 mov	 r9d, 3
  0066e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159665
  00675	ba c7 03 00 00	 mov	 edx, 967		; 000003c7H
  0067a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159666
  00681	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 968  :                 continue;

  00687	e9 23 fe ff ff	 jmp	 $LN32@http_serve
$LN27@http_serve:

; 969  :             }
; 970  : 
; 971  :             /* Create a thread to execute the http request */
; 972  :             rc = create_thread( &httptid, DETACHED,

  0068c	48 63 44 24 5c	 movsxd	 rax, DWORD PTR csock$[rsp]
  00691	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00698	48 81 c1 88 10
	00 00		 add	 rcx, 4232		; 00001088H
  0069f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159667
  006a6	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  006ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159668
  006b2	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  006b7	4c 8b c8	 mov	 r9, rax
  006ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:http_request
  006c1	48 8b d1	 mov	 rdx, rcx
  006c4	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR httptid$[rsp]
  006cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  006d2	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 973  :                                 http_request, (void *)(uintptr_t)csock,
; 974  :                                 HTTP_REQ_THREAD_NAME );
; 975  :             if(rc)

  006d6	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  006db	74 70		 je	 SHORT $LN28@http_serve

; 976  :             {
; 977  :                 WRMSG(HHC00102, "E", strerror(rc));

  006dd	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  006e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  006e7	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv362[rsp], rax
  006ef	b9 01 00 00 00	 mov	 ecx, 1
  006f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006fa	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv362[rsp]
  00702	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00707	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159670
  0070e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00713	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159671
  0071a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0071f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00724	41 b9 03 00 00
	00		 mov	 r9d, 3
  0072a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159672
  00731	ba d1 03 00 00	 mov	 edx, 977		; 000003d1H
  00736	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159673
  0073d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 978  :                 close_socket (csock);

  00743	8b 4c 24 5c	 mov	 ecx, DWORD PTR csock$[rsp]
  00747	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket
$LN28@http_serve:
$LN26@http_serve:

; 979  :             }
; 980  : 
; 981  :         } /* end if(lsock) */
; 982  : 
; 983  :     } /* end while */

  0074d	e9 5d fd ff ff	 jmp	 $LN33@http_serve
$LN13@http_serve:

; 984  : 
; 985  :     /* Close the listening socket */
; 986  :     close_socket (lsock);

  00752	8b 4c 24 54	 mov	 ecx, DWORD PTR lsock$[rsp]
  00756	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_close_socket
$http_server_stop$35:

; 987  : 
; 988  : http_server_stop:
; 989  :     if ( !sysblk.shutdown )

  0075c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00763	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00769	c1 e8 0b	 shr	 eax, 11
  0076c	83 e0 01	 and	 eax, 1
  0076f	85 c0		 test	 eax, eax
  00771	75 0f		 jne	 SHORT $LN29@http_serve

; 990  :         hdl_delshut(http_shutdown, NULL);

  00773	33 d2		 xor	 edx, edx
  00775	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:http_shutdown
  0077c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hdl_delshut
$LN29@http_serve:

; 991  : 
; 992  :     /* Display thread ended message on control panel */
; 993  :     LOG_THREAD_END( HTTP_SRVR_THREAD_NAME  );

  00782	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fthread_self
  00788	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159676
  0078f	8b c8		 mov	 ecx, eax
  00791	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_get_thread_prio
  00797	89 44 24 74	 mov	 DWORD PTR tv383[rsp], eax
  0079b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fthread_self
  007a1	89 44 24 78	 mov	 DWORD PTR tv388[rsp], eax
  007a5	b9 01 00 00 00	 mov	 ecx, 1
  007aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159675
  007b7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  007bc	8b 4c 24 74	 mov	 ecx, DWORD PTR tv383[rsp]
  007c0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  007c4	8b 4c 24 78	 mov	 ecx, DWORD PTR tv388[rsp]
  007c8	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  007cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159677
  007d3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159678
  007df	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007e4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007e9	41 b9 03 00 00
	00		 mov	 r9d, 3
  007ef	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159679
  007f6	ba e1 03 00 00	 mov	 edx, 993		; 000003e1H
  007fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159680
  00802	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 994  : 
; 995  :     sysblk.httptid = 0;

  00808	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0080f	c7 80 78 13 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4984], 0

; 996  : 
; 997  :     http_serv.httpbinddone = FALSE;

  00819	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  00820	24 fd		 and	 al, 253			; 000000fdH
  00822	88 05 20 00 00
	00		 mov	 BYTE PTR http_serv+32, al

; 998  : 
; 999  :     signal_condition(&http_serv.http_wait_shutdown);

  00828	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159681
  0082f	48 8d 0d 28 00
	00 00		 lea	 rcx, OFFSET FLAT:http_serv+40
  00836	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1000 : 
; 1001 :     return NULL;

  0083c	33 c0		 xor	 eax, eax

; 1002 : 
; 1003 : } /* end function http_server */

  0083e	48 8b 8c 24 e0
	20 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00846	48 33 cc	 xor	 rcx, rsp
  00849	e8 00 00 00 00	 call	 __security_check_cookie
  0084e	48 81 c4 f0 20
	00 00		 add	 rsp, 8432		; 000020f0H
  00855	5f		 pop	 rdi
  00856	c3		 ret	 0
http_server ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
cv$ = 32
webblk$ = 64
name$ = 72
type$ = 80
http_variable PROC

; 386  : {

$LN7:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 387  :     CGIVAR *cv;
; 388  :     for(cv = webblk->cgivar; cv; cv = cv->next)

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR webblk$[rsp]
  00018	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001c	48 89 44 24 20	 mov	 QWORD PTR cv$[rsp], rax
  00021	eb 0d		 jmp	 SHORT $LN4@http_varia
$LN2@http_varia:
  00023	48 8b 44 24 20	 mov	 rax, QWORD PTR cv$[rsp]
  00028	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002b	48 89 44 24 20	 mov	 QWORD PTR cv$[rsp], rax
$LN4@http_varia:
  00030	48 83 7c 24 20
	00		 cmp	 QWORD PTR cv$[rsp], 0
  00036	74 36		 je	 SHORT $LN3@http_varia

; 389  :         if((cv->type & type) && !strcmp(name,cv->name))

  00038	48 8b 44 24 20	 mov	 rax, QWORD PTR cv$[rsp]
  0003d	8b 4c 24 50	 mov	 ecx, DWORD PTR type$[rsp]
  00041	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00044	23 c1		 and	 eax, ecx
  00046	85 c0		 test	 eax, eax
  00048	74 22		 je	 SHORT $LN5@http_varia
  0004a	48 8b 44 24 20	 mov	 rax, QWORD PTR cv$[rsp]
  0004f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00053	48 8b 4c 24 48	 mov	 rcx, QWORD PTR name$[rsp]
  00058	e8 00 00 00 00	 call	 strcmp
  0005d	85 c0		 test	 eax, eax
  0005f	75 0b		 jne	 SHORT $LN5@http_varia

; 390  :             return cv->value;

  00061	48 8b 44 24 20	 mov	 rax, QWORD PTR cv$[rsp]
  00066	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0006a	eb 04		 jmp	 SHORT $LN1@http_varia
$LN5@http_varia:
  0006c	eb b5		 jmp	 SHORT $LN2@http_varia
$LN3@http_varia:

; 391  :     return NULL;

  0006e	33 c0		 xor	 eax, eax
$LN1@http_varia:

; 392  : }

  00070	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00074	c3		 ret	 0
http_variable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
ret$ = 80
inclfile$ = 88
tv74 = 96
fullname$ = 112
buffer$ = 384
__$ArrayPad$ = 656
webblk$ = 688
filename$ = 696
html_include PROC

; 106  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec a8 02
	00 00		 sub	 rsp, 680		; 000002a8H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 107  :     FILE *inclfile;
; 108  :     char fullname[HTTP_PATH_LENGTH];
; 109  :     char buffer[HTTP_PATH_LENGTH];
; 110  :     int ret;
; 111  : 
; 112  :     STRLCPY( fullname, http_serv.httproot );

  00023	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00029	48 8b 15 18 00
	00 00		 mov	 rdx, QWORD PTR http_serv+24
  00030	48 8d 4c 24 70	 lea	 rcx, QWORD PTR fullname$[rsp]
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 113  :     STRLCAT( fullname, filename );

  0003b	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00041	48 8b 94 24 b8
	02 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  00049	48 8d 4c 24 70	 lea	 rcx, QWORD PTR fullname$[rsp]
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 114  : 
; 115  :     inclfile = fopen(fullname,"rb");

  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159148
  0005b	48 8d 4c 24 70	 lea	 rcx, QWORD PTR fullname$[rsp]
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  00066	48 89 44 24 58	 mov	 QWORD PTR inclfile$[rsp], rax

; 116  : 
; 117  :     if (!inclfile)

  0006b	48 83 7c 24 58
	00		 cmp	 QWORD PTR inclfile$[rsp], 0
  00071	0f 85 ac 00 00
	00		 jne	 $LN4@html_inclu

; 118  :     {
; 119  :         WRMSG(HHC01800,"E","fopen()",strerror(errno));

  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0007d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0007f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00085	48 89 44 24 60	 mov	 QWORD PTR tv74[rsp], rax
  0008a	b9 01 00 00 00	 mov	 ecx, 1
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00095	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv74[rsp]
  0009a	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159150
  000a6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159151
  000b2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159152
  000be	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c8	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159153
  000d5	ba 77 00 00 00	 mov	 edx, 119		; 00000077H
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159154
  000e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 120  :         hprintf(webblk->sock,MSG(HHC01800,"E","fopen()",strerror(errno)));

  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000ed	8b 08		 mov	 ecx, DWORD PTR [rax]
  000ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  000f5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000fa	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159155
  00101	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159156
  00108	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159157
  0010f	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00117	8b 08		 mov	 ecx, DWORD PTR [rax]
  00119	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 121  :         return FALSE;

  0011f	33 c0		 xor	 eax, eax
  00121	eb 6c		 jmp	 SHORT $LN1@html_inclu
$LN4@html_inclu:
$LN2@html_inclu:

; 122  :     }
; 123  : 
; 124  :     while (!feof(inclfile))

  00123	48 8b 4c 24 58	 mov	 rcx, QWORD PTR inclfile$[rsp]
  00128	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_feof
  0012e	85 c0		 test	 eax, eax
  00130	75 4d		 jne	 SHORT $LN3@html_inclu

; 125  :     {
; 126  :         ret = (int)fread(buffer, 1, sizeof(buffer), inclfile);

  00132	4c 8b 4c 24 58	 mov	 r9, QWORD PTR inclfile$[rsp]
  00137	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  0013d	ba 01 00 00 00	 mov	 edx, 1
  00142	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR buffer$[rsp]
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fread
  00150	89 44 24 50	 mov	 DWORD PTR ret$[rsp], eax

; 127  :         if (ret <= 0) break;

  00154	83 7c 24 50 00	 cmp	 DWORD PTR ret$[rsp], 0
  00159	7f 02		 jg	 SHORT $LN5@html_inclu
  0015b	eb 22		 jmp	 SHORT $LN3@html_inclu
$LN5@html_inclu:

; 128  :         hwrite(webblk->sock,buffer, ret);

  0015d	48 63 44 24 50	 movsxd	 rax, DWORD PTR ret$[rsp]
  00162	4c 8b c0	 mov	 r8, rax
  00165	48 8d 94 24 80
	01 00 00	 lea	 rdx, QWORD PTR buffer$[rsp]
  0016d	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR webblk$[rsp]
  00175	8b 08		 mov	 ecx, DWORD PTR [rax]
  00177	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hwrite

; 129  :     }

  0017d	eb a4		 jmp	 SHORT $LN2@html_inclu
$LN3@html_inclu:

; 130  : 
; 131  :     fclose(inclfile);

  0017f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR inclfile$[rsp]
  00184	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fclose

; 132  :     return TRUE;

  0018a	b8 01 00 00 00	 mov	 eax, 1
$LN1@html_inclu:

; 133  : }

  0018f	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00197	48 33 cc	 xor	 rcx, rsp
  0019a	e8 00 00 00 00	 call	 __security_check_cookie
  0019f	48 81 c4 a8 02
	00 00		 add	 rsp, 680		; 000002a8H
  001a6	c3		 ret	 0
html_include ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
webblk$ = 48
html_footer PROC

; 153  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 154  :     if (!html_include(webblk,HTML_FOOTER))

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159172
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR webblk$[rsp]
  00015	e8 00 00 00 00	 call	 html_include
  0001a	85 c0		 test	 eax, eax
  0001c	75 14		 jne	 SHORT $LN2@html_foote

; 155  :         hprintf(webblk->sock,"\n</BODY>\n</HTML>\n");

  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159173
  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR webblk$[rsp]
  0002a	8b 08		 mov	 ecx, DWORD PTR [rax]
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN2@html_foote:

; 156  : }

  00032	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00036	c3		 ret	 0
html_footer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
webblk$ = 48
html_header PROC

; 139  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 140  :     if (webblk->request_type != REQTYPE_POST)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR webblk$[rsp]
  0000e	83 78 04 02	 cmp	 DWORD PTR [rax+4], 2
  00012	74 14		 je	 SHORT $LN2@html_heade

; 141  :         hprintf(webblk->sock,"Expires: 0\n");

  00014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159163
  0001b	48 8b 44 24 30	 mov	 rax, QWORD PTR webblk$[rsp]
  00020	8b 08		 mov	 ecx, DWORD PTR [rax]
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN2@html_heade:

; 142  : 
; 143  :     hprintf(webblk->sock,"Content-type: text/html\n\n");

  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159164
  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR webblk$[rsp]
  00034	8b 08		 mov	 ecx, DWORD PTR [rax]
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf

; 144  : 
; 145  :     if (!html_include(webblk,HTML_HEADER))

  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159166
  00043	48 8b 4c 24 30	 mov	 rcx, QWORD PTR webblk$[rsp]
  00048	e8 00 00 00 00	 call	 html_include
  0004d	85 c0		 test	 eax, eax
  0004f	75 14		 jne	 SHORT $LN3@html_heade

; 146  :         hprintf(webblk->sock,"<HTML>\n<HEAD>\n<TITLE>Hercules</TITLE>\n</HEAD>\n<BODY>\n\n");

  00051	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159167
  00058	48 8b 44 24 30	 mov	 rax, QWORD PTR webblk$[rsp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hprintf
$LN3@html_heade:

; 147  : }

  00065	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00069	c3		 ret	 0
html_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
tv72 = 48
tv78 = 56
http_get_portauth PROC

; 1279 : {

$LN9:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1280 : static char msgbuf[128];
; 1281 : 
; 1282 :     if ( http_serv.httpauth == 1)

  00004	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  0000b	24 01		 and	 al, 1
  0000d	0f b6 c0	 movzx	 eax, al
  00010	83 f8 01	 cmp	 eax, 1
  00013	0f 85 94 00 00
	00		 jne	 $LN2@http_get_p

; 1283 :     {
; 1284 :         MSGBUF( msgbuf, "auth userid<%s> password<%s>",

  00019	48 83 3d 10 00
	00 00 00	 cmp	 QWORD PTR http_serv+16, 0
  00021	74 1f		 je	 SHORT $LN5@http_get_p
  00023	48 8b 0d 10 00
	00 00		 mov	 rcx, QWORD PTR http_serv+16
  0002a	e8 00 00 00 00	 call	 strlen
  0002f	48 85 c0	 test	 rax, rax
  00032	74 0e		 je	 SHORT $LN5@http_get_p
  00034	48 8b 05 10 00
	00 00		 mov	 rax, QWORD PTR http_serv+16
  0003b	48 89 44 24 30	 mov	 QWORD PTR tv72[rsp], rax
  00040	eb 0c		 jmp	 SHORT $LN6@http_get_p
$LN5@http_get_p:
  00042	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159892
  00049	48 89 44 24 30	 mov	 QWORD PTR tv72[rsp], rax
$LN6@http_get_p:
  0004e	48 83 3d 08 00
	00 00 00	 cmp	 QWORD PTR http_serv+8, 0
  00056	74 1f		 je	 SHORT $LN7@http_get_p
  00058	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR http_serv+8
  0005f	e8 00 00 00 00	 call	 strlen
  00064	48 85 c0	 test	 rax, rax
  00067	74 0e		 je	 SHORT $LN7@http_get_p
  00069	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR http_serv+8
  00070	48 89 44 24 38	 mov	 QWORD PTR tv78[rsp], rax
  00075	eb 0c		 jmp	 SHORT $LN8@http_get_p
$LN7@http_get_p:
  00077	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159893
  0007e	48 89 44 24 38	 mov	 QWORD PTR tv78[rsp], rax
$LN8@http_get_p:
  00083	48 8b 44 24 30	 mov	 rax, QWORD PTR tv72[rsp]
  00088	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0008d	4c 8b 4c 24 38	 mov	 r9, QWORD PTR tv78[rsp]
  00092	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159894
  00099	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?msgbuf@?1??http_get_portauth@@9@9
  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1285 :                 ( http_serv.httpuser == NULL || strlen(http_serv.httpuser) == 0 ) ?
; 1286 :                                 "" : http_serv.httpuser,
; 1287 :                 ( http_serv.httppass == NULL || strlen(http_serv.httppass) == 0 ) ?
; 1288 :                                 "" : http_serv.httppass );
; 1289 :     }

  000ab	eb 20		 jmp	 SHORT $LN3@http_get_p
$LN2@http_get_p:

; 1290 :     else
; 1291 :     {
; 1292 :         MSGBUF( msgbuf, "%s", "noauth" );

  000ad	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159895
  000b4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159896
  000bb	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  000c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?msgbuf@?1??http_get_portauth@@9@9
  000c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN3@http_get_p:

; 1293 :     }
; 1294 : 
; 1295 :     return msgbuf;

  000cd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?msgbuf@?1??http_get_portauth@@9@9

; 1296 : 
; 1297 : }

  000d4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d8	c3		 ret	 0
http_get_portauth ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
http_get_port PROC

; 1266 : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1267 : static char msgbuf[128];
; 1268 : 
; 1269 :     MSGBUF( msgbuf, "%hu", http_serv.httpport );

  00004	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR http_serv
  0000b	44 8b c8	 mov	 r9d, eax
  0000e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159884
  00015	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?msgbuf@?1??http_get_port@@9@9
  00021	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1270 : 
; 1271 :     return msgbuf;

  00027	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?msgbuf@?1??http_get_port@@9@9

; 1272 : 
; 1273 : }

  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	c3		 ret	 0
http_get_port ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
p$ = 32
http_get_root PROC

; 1303 : {

$LN7:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1304 :         char *p;
; 1305 : static  char msgbuf[FILENAME_MAX+3];
; 1306 : 
; 1307 :     if ( http_serv.httproot == NULL )

  00004	48 83 3d 18 00
	00 00 00	 cmp	 QWORD PTR http_serv+24, 0
  0000c	75 0e		 jne	 SHORT $LN2@http_get_r

; 1308 :         p = "is <not specified>";

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159905
  00015	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  0001a	eb 50		 jmp	 SHORT $LN3@http_get_r
$LN2@http_get_r:

; 1309 : 
; 1310 :     else if ( strchr(http_serv.httproot, SPACE) != NULL )

  0001c	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00021	48 8b 0d 18 00
	00 00		 mov	 rcx, QWORD PTR http_serv+24
  00028	e8 00 00 00 00	 call	 strchr
  0002d	48 85 c0	 test	 rax, rax
  00030	74 2e		 je	 SHORT $LN4@http_get_r

; 1311 :     {
; 1312 :         MSGBUF( msgbuf, "'%s'", http_serv.httproot );

  00032	4c 8b 0d 18 00
	00 00		 mov	 r9, QWORD PTR http_serv+24
  00039	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159908
  00040	ba 07 01 00 00	 mov	 edx, 263		; 00000107H
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?msgbuf@?1??http_get_root@@9@9
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1313 :         p = msgbuf;

  00052	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?msgbuf@?1??http_get_root@@9@9
  00059	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1314 :     }

  0005e	eb 0c		 jmp	 SHORT $LN5@http_get_r
$LN4@http_get_r:

; 1315 :     else
; 1316 :     {
; 1317 :         p = http_serv.httproot;

  00060	48 8b 05 18 00
	00 00		 mov	 rax, QWORD PTR http_serv+24
  00067	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
$LN5@http_get_r:
$LN3@http_get_r:

; 1318 :     }
; 1319 : 
; 1320 :     return p;

  0006c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]

; 1321 : }

  00071	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00075	c3		 ret	 0
http_get_root ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
rc$ = 64
rc_ct$1 = 68
tv131 = 72
isconfigcalling$ = 96
http_startup PROC

; 1009 : {

$LN14:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	57		 push	 rdi
  00005	48 83 ec 50	 sub	 rsp, 80			; 00000050H

; 1010 :     int rc = 0;

  00009	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0

; 1011 :     static int first_call = TRUE;
; 1012 : 
; 1013 :     if ( first_call )

  00011	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?first_call@?1??http_startup@@9@9, 0
  00018	74 79		 je	 SHORT $LN2@http_start

; 1014 :     {
; 1015 :         if ( !http_struct_init )

  0001a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR http_struct_init
  00021	85 c0		 test	 eax, eax
  00023	75 64		 jne	 SHORT $LN3@http_start

; 1016 :         {
; 1017 :             memset(&http_serv,0,sizeof(HTTP_SERV));

  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:http_serv
  0002c	48 8b f8	 mov	 rdi, rax
  0002f	33 c0		 xor	 eax, eax
  00031	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00036	f3 aa		 rep stosb

; 1018 :             initialize_condition( &http_serv.http_wait_shutdown );

  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159693
  0003f	48 8d 0d 28 00
	00 00		 lea	 rcx, OFFSET FLAT:http_serv+40
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_condition

; 1019 :             initialize_lock( &http_serv.http_lock_shutdown );

  0004c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159694
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159695
  0005a	48 8d 0d 30 00
	00 00		 lea	 rcx, OFFSET FLAT:http_serv+48
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_lock

; 1020 :             initialize_lock( &http_lock_root );

  00067	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159696
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159697
  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:http_lock_root
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_lock

; 1021 :             http_struct_init = TRUE;

  00082	c6 05 00 00 00
	00 01		 mov	 BYTE PTR http_struct_init, 1
$LN3@http_start:

; 1022 :         }
; 1023 :         first_call = FALSE;

  00089	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?first_call@?1??http_startup@@9@9, 0
$LN2@http_start:

; 1024 :     }
; 1025 : 
; 1026 :     if ( http_serv.httpport == 0 )

  00093	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR http_serv
  0009a	85 c0		 test	 eax, eax
  0009c	75 0a		 jne	 SHORT $LN4@http_start

; 1027 :     {
; 1028 :         rc = -1;

  0009e	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 1029 :     }

  000a6	eb 22		 jmp	 SHORT $LN5@http_start
$LN4@http_start:

; 1030 :     else if ( isconfigcalling )

  000a8	83 7c 24 60 00	 cmp	 DWORD PTR isconfigcalling$[rsp], 0
  000ad	74 1b		 je	 SHORT $LN6@http_start

; 1031 :     {
; 1032 :         if ( !http_serv.httpstmtold )

  000af	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  000b6	c0 e8 03	 shr	 al, 3
  000b9	24 01		 and	 al, 1
  000bb	0f b6 c0	 movzx	 eax, al
  000be	85 c0		 test	 eax, eax
  000c0	75 08		 jne	 SHORT $LN7@http_start

; 1033 :         {
; 1034 :             rc = 1;

  000c2	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR rc$[rsp], 1
$LN7@http_start:
$LN6@http_start:
$LN5@http_start:

; 1035 :         }
; 1036 :     }
; 1037 : 
; 1038 :     if ( rc == 0 )

  000ca	83 7c 24 40 00	 cmp	 DWORD PTR rc$[rsp], 0
  000cf	0f 85 7b 01 00
	00		 jne	 $LN8@http_start

; 1039 :     {
; 1040 :         if ( sysblk.httptid == 0 )

  000d5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000dc	83 b8 78 13 00
	00 00		 cmp	 DWORD PTR [rax+4984], 0
  000e3	0f 85 0c 01 00
	00		 jne	 $LN9@http_start

; 1041 :         {
; 1042 :             int rc_ct;
; 1043 : 
; 1044 :             rc_ct = create_thread( &sysblk.httptid, DETACHED,

  000e9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000f0	48 05 88 10 00
	00		 add	 rax, 4232		; 00001088H
  000f6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000fd	48 81 c1 78 13
	00 00		 add	 rcx, 4984		; 00001378H
  00104	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159705
  0010b	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  00110	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159706
  00117	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0011c	45 33 c9	 xor	 r9d, r9d
  0011f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:http_server
  00126	48 8b d0	 mov	 rdx, rax
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  0012f	89 44 24 44	 mov	 DWORD PTR rc_ct$1[rsp], eax

; 1045 :                 http_server, NULL, HTTP_SRVR_THREAD_NAME );
; 1046 :             if ( rc_ct )

  00133	83 7c 24 44 00	 cmp	 DWORD PTR rc_ct$1[rsp], 0
  00138	74 6a		 je	 SHORT $LN11@http_start

; 1047 :             {
; 1048 :                 WRMSG(HHC00102, "E", strerror(rc));

  0013a	8b 4c 24 40	 mov	 ecx, DWORD PTR rc$[rsp]
  0013e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00144	48 89 44 24 48	 mov	 QWORD PTR tv131[rsp], rax
  00149	b9 01 00 00 00	 mov	 ecx, 1
  0014e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00154	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv131[rsp]
  00159	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0015e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159709
  00165	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0016a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159710
  00171	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00176	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0017b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00181	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159711
  00188	ba 18 04 00 00	 mov	 edx, 1048		; 00000418H
  0018d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159712
  00194	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1049 :                 rc = -1;

  0019a	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 1050 :             }

  001a2	eb 4f		 jmp	 SHORT $LN12@http_start
$LN11@http_start:

; 1051 :             else
; 1052 :             {
; 1053 :                 WRMSG( HHC01807, "I" );

  001a4	b9 01 00 00 00	 mov	 ecx, 1
  001a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159713
  001b6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159714
  001c2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001c7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001cc	41 b9 03 00 00
	00		 mov	 r9d, 3
  001d2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159715
  001d9	ba 1d 04 00 00	 mov	 edx, 1053		; 0000041dH
  001de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159716
  001e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1054 :                 rc = 0;

  001eb	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN12@http_start:

; 1055 :             }
; 1056 :         }

  001f3	eb 5b		 jmp	 SHORT $LN10@http_start
$LN9@http_start:

; 1057 :         else
; 1058 :         {
; 1059 :             WRMSG( HHC01806, "W", "already started" );

  001f5	b9 01 00 00 00	 mov	 ecx, 1
  001fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00200	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159717
  00207	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0020c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159718
  00213	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00218	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159719
  0021f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00224	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00229	41 b9 03 00 00
	00		 mov	 r9d, 3
  0022f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159720
  00236	ba 23 04 00 00	 mov	 edx, 1059		; 00000423H
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159721
  00242	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1060 :             rc = 0;

  00248	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN10@http_start:
$LN8@http_start:

; 1061 :         }
; 1062 :     }
; 1063 : 
; 1064 :     return rc;

  00250	8b 44 24 40	 mov	 eax, DWORD PTR rc$[rsp]

; 1065 : }

  00254	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00258	5f		 pop	 rdi
  00259	c3		 ret	 0
http_startup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\httpserv.c
_TEXT	SEGMENT
rc$ = 80
c$1 = 84
tv187 = 88
tv193 = 96
tv376 = 104
tv382 = 112
tv398 = 120
tv533 = 128
tv544 = 136
tv546 = 144
msgbuf$2 = 160
pathname$3 = 288
__$ArrayPad$ = 560
argc$ = 592
argv$ = 600
http_command PROC

; 1071 : {

$LN67:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	57		 push	 rdi
  0000a	48 81 ec 40 02
	00 00		 sub	 rsp, 576		; 00000240H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1072 :     int rc = 0;

  00023	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN4@http_comma:

; 1073 : 
; 1074 :     UPPER_ARGV_0( argv );

  0002b	48 83 bc 24 58
	02 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  00034	74 47		 je	 SHORT $LN5@http_comma
  00036	b8 08 00 00 00	 mov	 eax, 8
  0003b	48 6b c0 00	 imul	 rax, rax, 0
  0003f	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00047	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0004c	74 2f		 je	 SHORT $LN5@http_comma
  0004e	b8 08 00 00 00	 mov	 eax, 8
  00053	48 6b c0 00	 imul	 rax, rax, 0
  00057	b9 08 00 00 00	 mov	 ecx, 8
  0005c	48 6b c9 00	 imul	 rcx, rcx, 0
  00060	48 8b 94 24 58
	02 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00068	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  0006c	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00074	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00078	e8 00 00 00 00	 call	 strupper
$LN5@http_comma:
  0007d	33 c0		 xor	 eax, eax
  0007f	85 c0		 test	 eax, eax
  00081	75 a8		 jne	 SHORT $LN4@http_comma

; 1075 : 
; 1076 :     if ( !http_struct_init )

  00083	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR http_struct_init
  0008a	85 c0		 test	 eax, eax
  0008c	75 64		 jne	 SHORT $LN6@http_comma

; 1077 :     {
; 1078 :         memset(&http_serv,0,sizeof(HTTP_SERV));

  0008e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:http_serv
  00095	48 8b f8	 mov	 rdi, rax
  00098	33 c0		 xor	 eax, eax
  0009a	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0009f	f3 aa		 rep stosb

; 1079 :         initialize_condition( &http_serv.http_wait_shutdown );

  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159746
  000a8	48 8d 0d 28 00
	00 00		 lea	 rcx, OFFSET FLAT:http_serv+40
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_condition

; 1080 :         initialize_lock( &http_serv.http_lock_shutdown );

  000b5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159747
  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159748
  000c3	48 8d 0d 30 00
	00 00		 lea	 rcx, OFFSET FLAT:http_serv+48
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_lock

; 1081 :         initialize_lock( &http_lock_root );

  000d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159749
  000d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159750
  000de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:http_lock_root
  000e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_lock

; 1082 :         http_struct_init = TRUE;

  000eb	c6 05 00 00 00
	00 01		 mov	 BYTE PTR http_struct_init, 1
$LN6@http_comma:

; 1083 :     }
; 1084 : 
; 1085 :     http_serv.httpstmtold = FALSE;

  000f2	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  000f9	24 f7		 and	 al, 247			; 000000f7H
  000fb	88 05 20 00 00
	00		 mov	 BYTE PTR http_serv+32, al

; 1086 : 
; 1087 :     if ( argc == 2 && CMD(argv[0],rootx,4) &&

  00101	83 bc 24 50 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00109	0f 85 b0 02 00
	00		 jne	 $LN7@http_comma
  0010f	b8 08 00 00 00	 mov	 eax, 8
  00114	48 6b c0 00	 imul	 rax, rax, 0
  00118	41 b8 04 00 00
	00		 mov	 r8d, 4
  0011e	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00126	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0012a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159753
  00131	e8 00 00 00 00	 call	 strcaseabbrev
  00136	85 c0		 test	 eax, eax
  00138	0f 84 81 02 00
	00		 je	 $LN7@http_comma
  0013e	b8 08 00 00 00	 mov	 eax, 8
  00143	48 6b c0 00	 imul	 rax, rax, 0
  00147	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0014f	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00153	e8 00 00 00 00	 call	 strlen
  00158	48 83 f8 05	 cmp	 rax, 5
  0015c	75 3d		 jne	 SHORT $LN10@http_comma
  0015e	b8 08 00 00 00	 mov	 eax, 8
  00163	48 6b c0 02	 imul	 rax, rax, 2
  00167	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0016f	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00174	74 25		 je	 SHORT $LN10@http_comma
  00176	b8 08 00 00 00	 mov	 eax, 8
  0017b	48 6b c0 02	 imul	 rax, rax, 2
  0017f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159756
  00186	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0018e	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00192	e8 00 00 00 00	 call	 strcmp
  00197	85 c0		 test	 eax, eax
  00199	74 24		 je	 SHORT $LN9@http_comma
$LN10@http_comma:
  0019b	b8 08 00 00 00	 mov	 eax, 8
  001a0	48 6b c0 00	 imul	 rax, rax, 0
  001a4	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001ac	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  001b0	e8 00 00 00 00	 call	 strlen
  001b5	48 83 f8 04	 cmp	 rax, 4
  001b9	0f 85 00 02 00
	00		 jne	 $LN7@http_comma
$LN9@http_comma:

; 1088 :          ( ( strlen(argv[0]) == 5 && argv[2] != NULL && strcmp(argv[2],"httproot") == 0 ) ||
; 1089 :            ( strlen(argv[0]) == 4 ) ) )
; 1090 :     {
; 1091 :         if ( strlen(argv[0]) == 5 )

  001bf	b8 08 00 00 00	 mov	 eax, 8
  001c4	48 6b c0 00	 imul	 rax, rax, 0
  001c8	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001d0	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  001d4	e8 00 00 00 00	 call	 strlen
  001d9	48 83 f8 05	 cmp	 rax, 5
  001dd	75 0f		 jne	 SHORT $LN11@http_comma

; 1092 :         {
; 1093 :             http_serv.httpstmtold = TRUE;

  001df	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  001e6	0c 08		 or	 al, 8
  001e8	88 05 20 00 00
	00		 mov	 BYTE PTR http_serv+32, al
$LN11@http_comma:

; 1094 :         }
; 1095 : 
; 1096 :         obtain_lock( &http_lock_root );

  001ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159758
  001f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:http_lock_root
  001fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 1097 :         if (http_serv.httproot)

  00202	48 83 3d 18 00
	00 00 00	 cmp	 QWORD PTR http_serv+24, 0
  0020a	74 18		 je	 SHORT $LN12@http_comma

; 1098 :         {
; 1099 :             free(http_serv.httproot);

  0020c	48 8b 0d 18 00
	00 00		 mov	 rcx, QWORD PTR http_serv+24
  00213	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1100 :             http_serv.httproot = NULL;

  00219	48 c7 05 18 00
	00 00 00 00 00
	00		 mov	 QWORD PTR http_serv+24, 0
$LN12@http_comma:

; 1101 :         }
; 1102 : 
; 1103 :         if ( strlen(argv[1]) > 0 )

  00224	b8 08 00 00 00	 mov	 eax, 8
  00229	48 6b c0 01	 imul	 rax, rax, 1
  0022d	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00235	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00239	e8 00 00 00 00	 call	 strlen
  0023e	48 85 c0	 test	 rax, rax
  00241	76 73		 jbe	 SHORT $LN13@http_comma

; 1104 :         {
; 1105 :             char    pathname[MAX_PATH];
; 1106 : 
; 1107 :             hostpath(pathname, argv[1], sizeof(pathname));

  00243	b8 08 00 00 00	 mov	 eax, 8
  00248	48 6b c0 01	 imul	 rax, rax, 1
  0024c	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00252	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0025a	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0025e	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR pathname$3[rsp]
  00266	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 1108 : 
; 1109 :             if ( pathname[strlen(pathname)-1] != PATHSEPC )

  0026c	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR pathname$3[rsp]
  00274	e8 00 00 00 00	 call	 strlen
  00279	0f be 84 04 1f
	01 00 00	 movsx	 eax, BYTE PTR pathname$3[rsp+rax-1]
  00281	83 f8 2f	 cmp	 eax, 47			; 0000002fH
  00284	74 1b		 je	 SHORT $LN14@http_comma

; 1110 :                 STRLCAT( pathname, PATHSEPS );

  00286	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  0028c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159762
  00293	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR pathname$3[rsp]
  0029b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN14@http_comma:

; 1111 : 
; 1112 :             http_serv.httproot = strdup(pathname);

  002a1	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR pathname$3[rsp]
  002a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  002af	48 89 05 18 00
	00 00		 mov	 QWORD PTR http_serv+24, rax
$LN13@http_comma:

; 1113 :         }
; 1114 :         release_lock( &http_lock_root );

  002b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159763
  002bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:http_lock_root
  002c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 1115 : 
; 1116 :         http_root();

  002ca	e8 00 00 00 00	 call	 http_root

; 1117 : 
; 1118 :         if ( MLVL(VERBOSE) )

  002cf	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002d6	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  002dc	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  002e1	85 c0		 test	 eax, eax
  002e3	0f 84 ac 00 00
	00		 je	 $LN15@http_comma

; 1119 :             WRMSG(HHC02204, "I", http_serv.httpstmtold ? "HTTPROOT": "ROOT",

  002e9	48 83 3d 18 00
	00 00 00	 cmp	 QWORD PTR http_serv+24, 0
  002f1	74 0e		 je	 SHORT $LN57@http_comma
  002f3	48 8b 05 18 00
	00 00		 mov	 rax, QWORD PTR http_serv+24
  002fa	48 89 44 24 58	 mov	 QWORD PTR tv187[rsp], rax
  002ff	eb 0c		 jmp	 SHORT $LN58@http_comma
$LN57@http_comma:
  00301	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159765
  00308	48 89 44 24 58	 mov	 QWORD PTR tv187[rsp], rax
$LN58@http_comma:
  0030d	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  00314	c0 e8 03	 shr	 al, 3
  00317	24 01		 and	 al, 1
  00319	0f b6 c0	 movzx	 eax, al
  0031c	85 c0		 test	 eax, eax
  0031e	74 0e		 je	 SHORT $LN59@http_comma
  00320	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159766
  00327	48 89 44 24 60	 mov	 QWORD PTR tv193[rsp], rax
  0032c	eb 0c		 jmp	 SHORT $LN60@http_comma
$LN59@http_comma:
  0032e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159767
  00335	48 89 44 24 60	 mov	 QWORD PTR tv193[rsp], rax
$LN60@http_comma:
  0033a	b9 01 00 00 00	 mov	 ecx, 1
  0033f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00345	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv187[rsp]
  0034a	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0034f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv193[rsp]
  00354	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00359	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159768
  00360	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00365	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159769
  0036c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00371	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00376	41 b9 03 00 00
	00		 mov	 r9d, 3
  0037c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159770
  00383	ba 60 04 00 00	 mov	 edx, 1120		; 00000460H
  00388	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159771
  0038f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN15@http_comma:

; 1120 :                         http_serv.httproot ? http_serv.httproot : "<not specified>");
; 1121 : 
; 1122 :         if ( http_serv.httpstmtold )

  00395	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  0039c	c0 e8 03	 shr	 al, 3
  0039f	24 01		 and	 al, 1
  003a1	0f b6 c0	 movzx	 eax, al
  003a4	85 c0		 test	 eax, eax
  003a6	74 0a		 je	 SHORT $LN16@http_comma

; 1123 :             http_startup(TRUE);

  003a8	b9 01 00 00 00	 mov	 ecx, 1
  003ad	e8 00 00 00 00	 call	 http_startup
$LN16@http_comma:

; 1124 : 
; 1125 :         rc = 0;

  003b2	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0

; 1126 :     }

  003ba	e9 b1 09 00 00	 jmp	 $LN8@http_comma
$LN7@http_comma:

; 1127 :     else if ( (argc == 2 || argc == 3 || argc == 5) && CMD(argv[0],portx,4) &&

  003bf	83 bc 24 50 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  003c7	74 18		 je	 SHORT $LN19@http_comma
  003c9	83 bc 24 50 02
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  003d1	74 0e		 je	 SHORT $LN19@http_comma
  003d3	83 bc 24 50 02
	00 00 05	 cmp	 DWORD PTR argc$[rsp], 5
  003db	0f 85 6c 05 00
	00		 jne	 $LN17@http_comma
$LN19@http_comma:
  003e1	b8 08 00 00 00	 mov	 eax, 8
  003e6	48 6b c0 00	 imul	 rax, rax, 0
  003ea	41 b8 04 00 00
	00		 mov	 r8d, 4
  003f0	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003f8	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  003fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159776
  00403	e8 00 00 00 00	 call	 strcaseabbrev
  00408	85 c0		 test	 eax, eax
  0040a	0f 84 3d 05 00
	00		 je	 $LN17@http_comma
  00410	b8 08 00 00 00	 mov	 eax, 8
  00415	48 6b c0 00	 imul	 rax, rax, 0
  00419	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00421	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00425	e8 00 00 00 00	 call	 strlen
  0042a	48 83 f8 05	 cmp	 rax, 5
  0042e	75 3d		 jne	 SHORT $LN21@http_comma
  00430	b8 08 00 00 00	 mov	 eax, 8
  00435	48 6b c0 05	 imul	 rax, rax, 5
  00439	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00441	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00446	74 25		 je	 SHORT $LN21@http_comma
  00448	b8 08 00 00 00	 mov	 eax, 8
  0044d	48 6b c0 05	 imul	 rax, rax, 5
  00451	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159779
  00458	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00460	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00464	e8 00 00 00 00	 call	 strcmp
  00469	85 c0		 test	 eax, eax
  0046b	74 24		 je	 SHORT $LN20@http_comma
$LN21@http_comma:
  0046d	b8 08 00 00 00	 mov	 eax, 8
  00472	48 6b c0 00	 imul	 rax, rax, 0
  00476	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0047e	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00482	e8 00 00 00 00	 call	 strlen
  00487	48 83 f8 04	 cmp	 rax, 4
  0048b	0f 85 bc 04 00
	00		 jne	 $LN17@http_comma
$LN20@http_comma:

; 1128 :               ( ( strlen(argv[0]) == 5 && argv[5] != NULL && strcmp(argv[5],"httpport") == 0 ) ||
; 1129 :                 ( strlen(argv[0]) == 4 ) ) )
; 1130 :     {
; 1131 :         if ( strlen(argv[0]) == 5 )

  00491	b8 08 00 00 00	 mov	 eax, 8
  00496	48 6b c0 00	 imul	 rax, rax, 0
  0049a	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004a2	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  004a6	e8 00 00 00 00	 call	 strlen
  004ab	48 83 f8 05	 cmp	 rax, 5
  004af	75 0f		 jne	 SHORT $LN22@http_comma

; 1132 :         {
; 1133 :             http_serv.httpstmtold = TRUE;

  004b1	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  004b8	0c 08		 or	 al, 8
  004ba	88 05 20 00 00
	00		 mov	 BYTE PTR http_serv+32, al
$LN22@http_comma:

; 1134 :         }
; 1135 : 
; 1136 :         if ( sysblk.httptid != 0 )

  004c0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  004c7	83 b8 78 13 00
	00 00		 cmp	 DWORD PTR [rax+4984], 0
  004ce	74 54		 je	 SHORT $LN23@http_comma

; 1137 :         {
; 1138 :             WRMSG( HHC01812, "E" );

  004d0	b9 01 00 00 00	 mov	 ecx, 1
  004d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159783
  004e2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159784
  004ee	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004f3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004f8	41 b9 03 00 00
	00		 mov	 r9d, 3
  004fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159785
  00505	ba 72 04 00 00	 mov	 edx, 1138		; 00000472H
  0050a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159786
  00511	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1139 :             rc = -1;

  00517	c7 44 24 50 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 1140 :         }

  0051f	e9 24 04 00 00	 jmp	 $LN24@http_comma
$LN23@http_comma:

; 1141 :         else
; 1142 :         {
; 1143 :             char c;
; 1144 : 
; 1145 :             if (sscanf(argv[1], "%hu%c", &http_serv.httpport, &c) != 1
; 1146 :                     || http_serv.httpport == 0
; 1147 :                     || (http_serv.httpport < 1024 && http_serv.httpport != 80) )

  00524	b8 08 00 00 00	 mov	 eax, 8
  00529	48 6b c0 01	 imul	 rax, rax, 1
  0052d	4c 8d 4c 24 54	 lea	 r9, QWORD PTR c$1[rsp]
  00532	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:http_serv
  00539	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159789
  00540	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00548	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0054c	e8 00 00 00 00	 call	 sscanf
  00551	83 f8 01	 cmp	 eax, 1
  00554	75 25		 jne	 SHORT $LN26@http_comma
  00556	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR http_serv
  0055d	85 c0		 test	 eax, eax
  0055f	74 1a		 je	 SHORT $LN26@http_comma
  00561	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR http_serv
  00568	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  0056d	7d 14		 jge	 SHORT $LN25@http_comma
  0056f	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR http_serv
  00576	83 f8 50	 cmp	 eax, 80			; 00000050H
  00579	74 08		 je	 SHORT $LN25@http_comma
$LN26@http_comma:

; 1148 :             {
; 1149 :                 rc = -1;

  0057b	c7 44 24 50 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN25@http_comma:

; 1150 :             }
; 1151 :             if ( rc >= 0 && argc == 3 && CMD(argv[2],noauth,6) )

  00583	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  00588	7c 49		 jl	 SHORT $LN27@http_comma
  0058a	83 bc 24 50 02
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00592	75 3f		 jne	 SHORT $LN27@http_comma
  00594	b8 08 00 00 00	 mov	 eax, 8
  00599	48 6b c0 02	 imul	 rax, rax, 2
  0059d	41 b8 06 00 00
	00		 mov	 r8d, 6
  005a3	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  005ab	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  005af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159792
  005b6	e8 00 00 00 00	 call	 strcaseabbrev
  005bb	85 c0		 test	 eax, eax
  005bd	74 14		 je	 SHORT $LN27@http_comma

; 1152 :             {
; 1153 :                 http_serv.httpauth = 0;

  005bf	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  005c6	24 fe		 and	 al, 254			; 000000feH
  005c8	88 05 20 00 00
	00		 mov	 BYTE PTR http_serv+32, al

; 1154 :             }

  005ce	e9 cb 01 00 00	 jmp	 $LN28@http_comma
$LN27@http_comma:

; 1155 :             else if ( rc >=0 && argc == 5 && CMD(argv[2],auth,4) )

  005d3	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  005d8	0f 8c 54 01 00
	00		 jl	 $LN29@http_comma
  005de	83 bc 24 50 02
	00 00 05	 cmp	 DWORD PTR argc$[rsp], 5
  005e6	0f 85 46 01 00
	00		 jne	 $LN29@http_comma
  005ec	b8 08 00 00 00	 mov	 eax, 8
  005f1	48 6b c0 02	 imul	 rax, rax, 2
  005f5	41 b8 04 00 00
	00		 mov	 r8d, 4
  005fb	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00603	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00607	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159795
  0060e	e8 00 00 00 00	 call	 strcaseabbrev
  00613	85 c0		 test	 eax, eax
  00615	0f 84 17 01 00
	00		 je	 $LN29@http_comma

; 1156 :             {
; 1157 :                 if ( strlen( argv[3] ) < 1 || strlen( argv[4] ) < 1 )

  0061b	b8 08 00 00 00	 mov	 eax, 8
  00620	48 6b c0 03	 imul	 rax, rax, 3
  00624	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0062c	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00630	e8 00 00 00 00	 call	 strlen
  00635	48 83 f8 01	 cmp	 rax, 1
  00639	72 20		 jb	 SHORT $LN33@http_comma
  0063b	b8 08 00 00 00	 mov	 eax, 8
  00640	48 6b c0 04	 imul	 rax, rax, 4
  00644	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0064c	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00650	e8 00 00 00 00	 call	 strlen
  00655	48 83 f8 01	 cmp	 rax, 1
  00659	73 54		 jae	 SHORT $LN31@http_comma
$LN33@http_comma:

; 1158 :                 {
; 1159 :                     WRMSG( HHC01814, "E" );

  0065b	b9 01 00 00 00	 mov	 ecx, 1
  00660	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00666	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159799
  0066d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00672	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159800
  00679	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0067e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00683	41 b9 03 00 00
	00		 mov	 r9d, 3
  00689	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159801
  00690	ba 87 04 00 00	 mov	 edx, 1159		; 00000487H
  00695	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159802
  0069c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1160 :                     rc = -1;

  006a2	c7 44 24 50 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 1161 :                 }

  006aa	e9 81 00 00 00	 jmp	 $LN32@http_comma
$LN31@http_comma:

; 1162 :                 else
; 1163 :                 {
; 1164 :                     if (http_serv.httpuser)

  006af	48 83 3d 08 00
	00 00 00	 cmp	 QWORD PTR http_serv+8, 0
  006b7	74 0d		 je	 SHORT $LN34@http_comma

; 1165 :                         free(http_serv.httpuser);

  006b9	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR http_serv+8
  006c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN34@http_comma:

; 1166 :                     http_serv.httpuser = strdup(argv[3]);

  006c6	b8 08 00 00 00	 mov	 eax, 8
  006cb	48 6b c0 03	 imul	 rax, rax, 3
  006cf	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  006d7	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  006db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  006e1	48 89 05 08 00
	00 00		 mov	 QWORD PTR http_serv+8, rax

; 1167 : 
; 1168 :                     if (http_serv.httppass)

  006e8	48 83 3d 10 00
	00 00 00	 cmp	 QWORD PTR http_serv+16, 0
  006f0	74 0d		 je	 SHORT $LN35@http_comma

; 1169 :                         free(http_serv.httppass);

  006f2	48 8b 0d 10 00
	00 00		 mov	 rcx, QWORD PTR http_serv+16
  006f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN35@http_comma:

; 1170 :                     http_serv.httppass = strdup(argv[4]);

  006ff	b8 08 00 00 00	 mov	 eax, 8
  00704	48 6b c0 04	 imul	 rax, rax, 4
  00708	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00710	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00714	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0071a	48 89 05 10 00
	00 00		 mov	 QWORD PTR http_serv+16, rax

; 1171 : 
; 1172 :                     http_serv.httpauth = 1;

  00721	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  00728	0c 01		 or	 al, 1
  0072a	88 05 20 00 00
	00		 mov	 BYTE PTR http_serv+32, al
$LN32@http_comma:

; 1173 :                 }
; 1174 :             }

  00730	eb 6c		 jmp	 SHORT $LN30@http_comma
$LN29@http_comma:

; 1175 :             else if ( argc != 2 || rc < 0 )

  00732	83 bc 24 50 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0073a	75 07		 jne	 SHORT $LN37@http_comma
  0073c	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  00741	7d 5b		 jge	 SHORT $LN36@http_comma
$LN37@http_comma:

; 1176 :             {
; 1177 :                 WRMSG( HHC02299, "E", "http" );

  00743	b9 01 00 00 00	 mov	 ecx, 1
  00748	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0074e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159807
  00755	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0075a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159808
  00761	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00766	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159809
  0076d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00772	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00777	41 b9 03 00 00
	00		 mov	 r9d, 3
  0077d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159810
  00784	ba 99 04 00 00	 mov	 edx, 1177		; 00000499H
  00789	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159811
  00790	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1178 :                 rc = -1;

  00796	c7 44 24 50 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN36@http_comma:
$LN30@http_comma:
$LN28@http_comma:

; 1179 :             }
; 1180 : 
; 1181 :             if ( rc >= 0 && MLVL(VERBOSE) )

  0079e	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  007a3	0f 8c 9f 01 00
	00		 jl	 $LN38@http_comma
  007a9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  007b0	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  007b6	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  007bb	85 c0		 test	 eax, eax
  007bd	0f 84 85 01 00
	00		 je	 $LN38@http_comma

; 1182 :             {
; 1183 :                 char msgbuf[128];
; 1184 :                 if ( http_serv.httpauth == 1 )

  007c3	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  007ca	24 01		 and	 al, 1
  007cc	0f b6 c0	 movzx	 eax, al
  007cf	83 f8 01	 cmp	 eax, 1
  007d2	0f 85 a4 00 00
	00		 jne	 $LN39@http_comma

; 1185 :                 {
; 1186 :                     MSGBUF( msgbuf, "port=%hu auth userid<%s> password<%s>",

  007d8	48 83 3d 10 00
	00 00 00	 cmp	 QWORD PTR http_serv+16, 0
  007e0	74 1f		 je	 SHORT $LN61@http_comma
  007e2	48 8b 0d 10 00
	00 00		 mov	 rcx, QWORD PTR http_serv+16
  007e9	e8 00 00 00 00	 call	 strlen
  007ee	48 85 c0	 test	 rax, rax
  007f1	74 0e		 je	 SHORT $LN61@http_comma
  007f3	48 8b 05 10 00
	00 00		 mov	 rax, QWORD PTR http_serv+16
  007fa	48 89 44 24 68	 mov	 QWORD PTR tv376[rsp], rax
  007ff	eb 0c		 jmp	 SHORT $LN62@http_comma
$LN61@http_comma:
  00801	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159815
  00808	48 89 44 24 68	 mov	 QWORD PTR tv376[rsp], rax
$LN62@http_comma:
  0080d	48 83 3d 08 00
	00 00 00	 cmp	 QWORD PTR http_serv+8, 0
  00815	74 1f		 je	 SHORT $LN63@http_comma
  00817	48 8b 0d 08 00
	00 00		 mov	 rcx, QWORD PTR http_serv+8
  0081e	e8 00 00 00 00	 call	 strlen
  00823	48 85 c0	 test	 rax, rax
  00826	74 0e		 je	 SHORT $LN63@http_comma
  00828	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR http_serv+8
  0082f	48 89 44 24 70	 mov	 QWORD PTR tv382[rsp], rax
  00834	eb 0c		 jmp	 SHORT $LN64@http_comma
$LN63@http_comma:
  00836	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159816
  0083d	48 89 44 24 70	 mov	 QWORD PTR tv382[rsp], rax
$LN64@http_comma:
  00842	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR http_serv
  00849	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv376[rsp]
  0084e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00853	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv382[rsp]
  00858	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0085d	44 8b c8	 mov	 r9d, eax
  00860	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159817
  00867	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0086c	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$2[rsp]
  00874	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1187 :                             http_serv.httpport,
; 1188 :                           ( http_serv.httpuser == NULL || strlen(http_serv.httpuser) == 0 ) ?
; 1189 :                                 "" : http_serv.httpuser,
; 1190 :                           ( http_serv.httppass == NULL || strlen(http_serv.httppass) == 0 ) ?
; 1191 :                                 "" : http_serv.httppass );
; 1192 :                 }

  0087a	eb 24		 jmp	 SHORT $LN40@http_comma
$LN39@http_comma:

; 1193 :                 else
; 1194 :                     MSGBUF( msgbuf, "port=%hu noauth", http_serv.httpport );

  0087c	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR http_serv
  00883	44 8b c8	 mov	 r9d, eax
  00886	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159818
  0088d	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00892	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$2[rsp]
  0089a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN40@http_comma:

; 1195 : 
; 1196 :                 WRMSG( HHC02204, "I", http_serv.httpstmtold ? "HTTPPORT" : "PORT", msgbuf );

  008a0	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  008a7	c0 e8 03	 shr	 al, 3
  008aa	24 01		 and	 al, 1
  008ac	0f b6 c0	 movzx	 eax, al
  008af	85 c0		 test	 eax, eax
  008b1	74 0e		 je	 SHORT $LN65@http_comma
  008b3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159819
  008ba	48 89 44 24 78	 mov	 QWORD PTR tv398[rsp], rax
  008bf	eb 0c		 jmp	 SHORT $LN66@http_comma
$LN65@http_comma:
  008c1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159820
  008c8	48 89 44 24 78	 mov	 QWORD PTR tv398[rsp], rax
$LN66@http_comma:
  008cd	b9 01 00 00 00	 mov	 ecx, 1
  008d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008d8	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$2[rsp]
  008e0	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  008e5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv398[rsp]
  008ea	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  008ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159821
  008f6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159822
  00902	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00907	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0090c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00912	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159823
  00919	ba ac 04 00 00	 mov	 edx, 1196		; 000004acH
  0091e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159824
  00925	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1197 : 
; 1198 :                 if ( http_serv.httpstmtold )

  0092b	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  00932	c0 e8 03	 shr	 al, 3
  00935	24 01		 and	 al, 1
  00937	0f b6 c0	 movzx	 eax, al
  0093a	85 c0		 test	 eax, eax
  0093c	74 0a		 je	 SHORT $LN41@http_comma

; 1199 :                     http_startup(TRUE);

  0093e	b9 01 00 00 00	 mov	 ecx, 1
  00943	e8 00 00 00 00	 call	 http_startup
$LN41@http_comma:
$LN38@http_comma:
$LN24@http_comma:

; 1200 : 
; 1201 :             }   /* VERBOSE */
; 1202 :         }
; 1203 :     }

  00948	e9 23 04 00 00	 jmp	 $LN18@http_comma
$LN17@http_comma:

; 1204 :     else if ( argc == 1 && CMD(argv[0],start,3) )

  0094d	83 bc 24 50 02
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00955	0f 85 a3 00 00
	00		 jne	 $LN42@http_comma
  0095b	b8 08 00 00 00	 mov	 eax, 8
  00960	48 6b c0 00	 imul	 rax, rax, 0
  00964	41 b8 03 00 00
	00		 mov	 r8d, 3
  0096a	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00972	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00976	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159828
  0097d	e8 00 00 00 00	 call	 strcaseabbrev
  00982	85 c0		 test	 eax, eax
  00984	74 78		 je	 SHORT $LN42@http_comma

; 1205 :     {
; 1206 :         if ( http_serv.httpport == 0 )

  00986	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR http_serv
  0098d	85 c0		 test	 eax, eax
  0098f	75 5d		 jne	 SHORT $LN44@http_comma

; 1207 :         {
; 1208 :             WRMSG( HHC01815, "E", "not valid");

  00991	b9 01 00 00 00	 mov	 ecx, 1
  00996	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0099c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159831
  009a3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  009a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159832
  009af	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  009b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159833
  009bb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  009c0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009c5	41 b9 03 00 00
	00		 mov	 r9d, 3
  009cb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159834
  009d2	ba b8 04 00 00	 mov	 edx, 1208		; 000004b8H
  009d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159835
  009de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1209 :             rc = -1;

  009e4	c7 44 24 50 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 1210 :         }

  009ec	eb 0b		 jmp	 SHORT $LN45@http_comma
$LN44@http_comma:

; 1211 :         else
; 1212 :             rc = http_startup(FALSE);

  009ee	33 c9		 xor	 ecx, ecx
  009f0	e8 00 00 00 00	 call	 http_startup
  009f5	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
$LN45@http_comma:

; 1213 :     }

  009f9	e9 72 03 00 00	 jmp	 $LN43@http_comma
$LN42@http_comma:

; 1214 :     else if (argc == 1 && CMD(argv[0],stop,4))

  009fe	83 bc 24 50 02
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00a06	0f 85 06 01 00
	00		 jne	 $LN46@http_comma
  00a0c	b8 08 00 00 00	 mov	 eax, 8
  00a11	48 6b c0 00	 imul	 rax, rax, 0
  00a15	41 b8 04 00 00
	00		 mov	 r8d, 4
  00a1b	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00a23	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00a27	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159838
  00a2e	e8 00 00 00 00	 call	 strcaseabbrev
  00a33	85 c0		 test	 eax, eax
  00a35	0f 84 d7 00 00
	00		 je	 $LN46@http_comma

; 1215 :     {
; 1216 :         if ( sysblk.httptid != 0 )

  00a3b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00a42	83 b8 78 13 00
	00 00		 cmp	 DWORD PTR [rax+4984], 0
  00a49	74 58		 je	 SHORT $LN48@http_comma

; 1217 :         {
; 1218 :             http_shutdown(NULL);

  00a4b	33 c9		 xor	 ecx, ecx
  00a4d	e8 00 00 00 00	 call	 http_shutdown

; 1219 :             WRMSG( HHC01805, "I" );

  00a52	b9 01 00 00 00	 mov	 ecx, 1
  00a57	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a5d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159841
  00a64	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a69	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159842
  00a70	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a75	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a7a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a80	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159843
  00a87	ba c3 04 00 00	 mov	 edx, 1219		; 000004c3H
  00a8c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159844
  00a93	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1220 :             rc = 1;

  00a99	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR rc$[rsp], 1

; 1221 :         }

  00aa1	eb 6a		 jmp	 SHORT $LN49@http_comma
$LN48@http_comma:

; 1222 :         else
; 1223 :         {
; 1224 :             http_serv.httpshutdown = TRUE;

  00aa3	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  00aaa	0c 04		 or	 al, 4
  00aac	88 05 20 00 00
	00		 mov	 BYTE PTR http_serv+32, al

; 1225 :             WRMSG( HHC01806, "W", "already stopped" );

  00ab2	b9 01 00 00 00	 mov	 ecx, 1
  00ab7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00abd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159845
  00ac4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00ac9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159846
  00ad0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ad5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159847
  00adc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ae1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ae6	41 b9 03 00 00
	00		 mov	 r9d, 3
  00aec	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159848
  00af3	ba c9 04 00 00	 mov	 edx, 1225		; 000004c9H
  00af8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159849
  00aff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1226 :             rc = 1;

  00b05	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR rc$[rsp], 1
$LN49@http_comma:

; 1227 :         }
; 1228 :     }

  00b0d	e9 5e 02 00 00	 jmp	 $LN47@http_comma
$LN46@http_comma:

; 1229 :     else if ( argc == 0 )

  00b12	83 bc 24 50 02
	00 00 00	 cmp	 DWORD PTR argc$[rsp], 0
  00b1a	0f 85 f5 01 00
	00		 jne	 $LN50@http_comma

; 1230 :     {
; 1231 :         if ( sysblk.httptid != 0 )

  00b20	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00b27	83 b8 78 13 00
	00 00		 cmp	 DWORD PTR [rax+4984], 0
  00b2e	0f 84 b4 00 00
	00		 je	 $LN52@http_comma

; 1232 :         {
; 1233 :             if ( http_serv.httpbinddone )

  00b34	0f b6 05 20 00
	00 00		 movzx	 eax, BYTE PTR http_serv+32
  00b3b	d0 e8		 shr	 al, 1
  00b3d	24 01		 and	 al, 1
  00b3f	0f b6 c0	 movzx	 eax, al
  00b42	85 c0		 test	 eax, eax
  00b44	74 51		 je	 SHORT $LN54@http_comma

; 1234 :             {
; 1235 :                 WRMSG( HHC01809, "I" );

  00b46	b9 01 00 00 00	 mov	 ecx, 1
  00b4b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b51	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159856
  00b58	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b5d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159857
  00b64	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b69	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b6e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b74	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159858
  00b7b	ba d3 04 00 00	 mov	 edx, 1235		; 000004d3H
  00b80	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159859
  00b87	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1236 :                 rc = 0;

  00b8d	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0

; 1237 :             }

  00b95	eb 4f		 jmp	 SHORT $LN55@http_comma
$LN54@http_comma:

; 1238 :             else
; 1239 :             {
; 1240 :                 WRMSG( HHC01813, "I" );

  00b97	b9 01 00 00 00	 mov	 ecx, 1
  00b9c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00ba2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159860
  00ba9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00bae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159861
  00bb5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00bba	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00bbf	41 b9 03 00 00
	00		 mov	 r9d, 3
  00bc5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159862
  00bcc	ba d8 04 00 00	 mov	 edx, 1240		; 000004d8H
  00bd1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159863
  00bd8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1241 :                 rc = 1;

  00bde	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR rc$[rsp], 1
$LN55@http_comma:

; 1242 :             }
; 1243 :         }

  00be6	eb 4f		 jmp	 SHORT $LN53@http_comma
$LN52@http_comma:

; 1244 :         else
; 1245 :         {
; 1246 :             WRMSG( HHC01810, "I" );

  00be8	b9 01 00 00 00	 mov	 ecx, 1
  00bed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00bf3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159864
  00bfa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00bff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159865
  00c06	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c0b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c10	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c16	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159866
  00c1d	ba de 04 00 00	 mov	 edx, 1246		; 000004deH
  00c22	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159867
  00c29	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1247 :             rc = 1;

  00c2f	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR rc$[rsp], 1
$LN53@http_comma:

; 1248 :         }
; 1249 : 
; 1250 :         WRMSG(HHC01811, "I", http_get_root());

  00c37	e8 00 00 00 00	 call	 http_get_root
  00c3c	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv533[rsp], rax
  00c44	b9 01 00 00 00	 mov	 ecx, 1
  00c49	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c4f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv533[rsp]
  00c57	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00c5c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159868
  00c63	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c68	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159869
  00c6f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c74	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c79	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c7f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159870
  00c86	ba e2 04 00 00	 mov	 edx, 1250		; 000004e2H
  00c8b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159871
  00c92	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1251 : 
; 1252 :         WRMSG(HHC01808, "I", http_get_port(), http_get_portauth());

  00c98	e8 00 00 00 00	 call	 http_get_portauth
  00c9d	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv544[rsp], rax
  00ca5	e8 00 00 00 00	 call	 http_get_port
  00caa	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv546[rsp], rax
  00cb2	b9 01 00 00 00	 mov	 ecx, 1
  00cb7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00cbd	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv544[rsp]
  00cc5	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00cca	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv546[rsp]
  00cd2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00cd7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159872
  00cde	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ce3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159873
  00cea	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00cef	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00cf4	41 b9 03 00 00
	00		 mov	 r9d, 3
  00cfa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159874
  00d01	ba e4 04 00 00	 mov	 edx, 1252		; 000004e4H
  00d06	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159875
  00d0d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1253 :     }

  00d13	eb 5b		 jmp	 SHORT $LN51@http_comma
$LN50@http_comma:

; 1254 :     else
; 1255 :     {
; 1256 :         WRMSG( HHC02299, "E", "http" );

  00d15	b9 01 00 00 00	 mov	 ecx, 1
  00d1a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00d20	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159876
  00d27	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00d2c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159877
  00d33	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00d38	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159878
  00d3f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00d44	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d49	41 b9 03 00 00
	00		 mov	 r9d, 3
  00d4f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159879
  00d56	ba e8 04 00 00	 mov	 edx, 1256		; 000004e8H
  00d5b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159880
  00d62	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1257 :         rc = -1;

  00d68	c7 44 24 50 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN51@http_comma:
$LN47@http_comma:
$LN43@http_comma:
$LN18@http_comma:
$LN8@http_comma:

; 1258 :     }
; 1259 :     return rc;

  00d70	8b 44 24 50	 mov	 eax, DWORD PTR rc$[rsp]

; 1260 : }

  00d74	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00d7c	48 33 cc	 xor	 rcx, rsp
  00d7f	e8 00 00 00 00	 call	 __security_check_cookie
  00d84	48 81 c4 40 02
	00 00		 add	 rsp, 576		; 00000240H
  00d8b	5f		 pop	 rdi
  00d8c	c3		 ret	 0
http_command ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\extstring.h
_TEXT	SEGMENT
s$ = 32
r$ = 40
result$ = 64
string$ = 72
strupper PROC

; 157  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 158  :     register char *r = result;

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR r$[rsp], rax

; 159  :     register char *s = string;

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR string$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 160  :     for (; *s; r++, s++)

  00022	eb 1a		 jmp	 SHORT $LN4@strupper
$LN2@strupper:
  00024	48 8b 44 24 28	 mov	 rax, QWORD PTR r$[rsp]
  00029	48 ff c0	 inc	 rax
  0002c	48 89 44 24 28	 mov	 QWORD PTR r$[rsp], rax
  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00036	48 ff c0	 inc	 rax
  00039	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax
$LN4@strupper:
  0003e	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00043	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00046	85 c0		 test	 eax, eax
  00048	74 16		 je	 SHORT $LN3@strupper

; 161  :     {
; 162  :         *r = asciitoupper(*s);

  0004a	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0004f	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00052	e8 00 00 00 00	 call	 asciitoupper
  00057	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$[rsp]
  0005c	88 01		 mov	 BYTE PTR [rcx], al

; 163  :     }

  0005e	eb c4		 jmp	 SHORT $LN2@strupper
$LN3@strupper:

; 164  :     *r = 0;

  00060	48 8b 44 24 28	 mov	 rax, QWORD PTR r$[rsp]
  00065	c6 00 00	 mov	 BYTE PTR [rax], 0

; 165  :     return result;

  00068	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]

; 166  : }

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
strupper ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\extstring.h
_TEXT	SEGMENT
tv84 = 32
tv73 = 36
tv93 = 40
a$ = 48
s$ = 56
string$ = 80
abbrev$ = 88
n$ = 96
strcaseabbrev PROC

; 91   : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 92   :     register const char *s = string;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR string$[rsp]
  00018	48 89 44 24 38	 mov	 QWORD PTR s$[rsp], rax

; 93   :     register const char *a = abbrev;

  0001d	48 8b 44 24 58	 mov	 rax, QWORD PTR abbrev$[rsp]
  00022	48 89 44 24 30	 mov	 QWORD PTR a$[rsp], rax

; 94   :     if (*a &&
; 95   :         *s &&

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0002c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0002f	85 c0		 test	 eax, eax
  00031	0f 84 02 01 00
	00		 je	 $LN5@strcaseabb
  00037	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  0003c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003f	85 c0		 test	 eax, eax
  00041	0f 84 f2 00 00
	00		 je	 $LN5@strcaseabb
  00047	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0004c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0004f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  00054	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00057	3b c1		 cmp	 eax, ecx
  00059	74 30		 je	 SHORT $LN6@strcaseabb
  0005b	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  00060	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00063	e8 00 00 00 00	 call	 asciitoupper
  00068	0f be c0	 movsx	 eax, al
  0006b	89 44 24 24	 mov	 DWORD PTR tv73[rsp], eax
  0006f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  00074	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00077	e8 00 00 00 00	 call	 asciitoupper
  0007c	0f be c0	 movsx	 eax, al
  0007f	8b 4c 24 24	 mov	 ecx, DWORD PTR tv73[rsp]
  00083	3b c8		 cmp	 ecx, eax
  00085	0f 85 ae 00 00
	00		 jne	 $LN5@strcaseabb
$LN6@strcaseabb:
$LN2@strcaseabb:

; 96   :         (*a == *s ||
; 97   :         asciitoupper(*a) == asciitoupper(*s)))
; 98   :     {
; 99   :         for (;;)
; 100  :         {
; 101  :             a++;

  0008b	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  00090	48 ff c0	 inc	 rax
  00093	48 89 44 24 30	 mov	 QWORD PTR a$[rsp], rax

; 102  :             if (!*a)

  00098	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0009d	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000a0	85 c0		 test	 eax, eax
  000a2	75 31		 jne	 SHORT $LN7@strcaseabb

; 103  :                 return (((uintptr_t)a - (uintptr_t)abbrev) >= n);

  000a4	48 8b 44 24 58	 mov	 rax, QWORD PTR abbrev$[rsp]
  000a9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a$[rsp]
  000ae	48 2b c8	 sub	 rcx, rax
  000b1	48 8b c1	 mov	 rax, rcx
  000b4	8b 4c 24 60	 mov	 ecx, DWORD PTR n$[rsp]
  000b8	48 3b c1	 cmp	 rax, rcx
  000bb	72 0a		 jb	 SHORT $LN12@strcaseabb
  000bd	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
  000c5	eb 08		 jmp	 SHORT $LN13@strcaseabb
$LN12@strcaseabb:
  000c7	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
$LN13@strcaseabb:
  000cf	8b 44 24 20	 mov	 eax, DWORD PTR tv84[rsp]
  000d3	eb 66		 jmp	 SHORT $LN1@strcaseabb
$LN7@strcaseabb:

; 104  :             s++;

  000d5	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  000da	48 ff c0	 inc	 rax
  000dd	48 89 44 24 38	 mov	 QWORD PTR s$[rsp], rax

; 105  :             if (!*s)

  000e2	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  000e7	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000ea	85 c0		 test	 eax, eax
  000ec	75 02		 jne	 SHORT $LN8@strcaseabb

; 106  :                 break;

  000ee	eb 49		 jmp	 SHORT $LN3@strcaseabb
$LN8@strcaseabb:

; 107  :             if (*a == *s)

  000f0	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  000f5	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000f8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  000fd	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00100	3b c1		 cmp	 eax, ecx
  00102	75 02		 jne	 SHORT $LN9@strcaseabb

; 108  :                 continue;

  00104	eb 85		 jmp	 SHORT $LN2@strcaseabb
$LN9@strcaseabb:

; 109  :             if (asciitoupper(*a) != asciitoupper(*s))

  00106	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0010b	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0010e	e8 00 00 00 00	 call	 asciitoupper
  00113	0f be c0	 movsx	 eax, al
  00116	89 44 24 28	 mov	 DWORD PTR tv93[rsp], eax
  0011a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  0011f	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00122	e8 00 00 00 00	 call	 asciitoupper
  00127	0f be c0	 movsx	 eax, al
  0012a	8b 4c 24 28	 mov	 ecx, DWORD PTR tv93[rsp]
  0012e	3b c8		 cmp	 ecx, eax
  00130	74 02		 je	 SHORT $LN10@strcaseabb

; 110  :                 break;

  00132	eb 05		 jmp	 SHORT $LN3@strcaseabb
$LN10@strcaseabb:

; 111  :         }

  00134	e9 52 ff ff ff	 jmp	 $LN2@strcaseabb
$LN3@strcaseabb:
$LN5@strcaseabb:

; 112  :     }
; 113  :     return 0;

  00139	33 c0		 xor	 eax, eax
$LN1@strcaseabb:

; 114  : }

  0013b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0013f	c3		 ret	 0
strcaseabbrev ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\extstring.h
_TEXT	SEGMENT
c$ = 8
asciitoupper PROC

; 29   : {

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl

; 30   :   if (c < 'a' || c > 'z')

  00004	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  00009	83 f8 61	 cmp	 eax, 97			; 00000061H
  0000c	7c 0a		 jl	 SHORT $LN3@asciitoupp
  0000e	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  00013	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00016	7e 07		 jle	 SHORT $LN2@asciitoupp
$LN3@asciitoupp:

; 31   :       return c;

  00018	0f b6 44 24 08	 movzx	 eax, BYTE PTR c$[rsp]
  0001d	eb 08		 jmp	 SHORT $LN1@asciitoupp
$LN2@asciitoupp:

; 32   :   return (c - 32);

  0001f	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  00024	83 e8 20	 sub	 eax, 32			; 00000020H
$LN1@asciitoupp:

; 33   : }

  00027	c3		 ret	 0
asciitoupper ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\time.h
_TEXT	SEGMENT
_Time$ = 48
time	PROC

; 521  :         {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 522  :             return _time64(_Time);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__time64

; 523  :         }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\time.h
_TEXT	SEGMENT
_Time$ = 48
localtime PROC

; 498  :         {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 499  :             return _localtime64(_Time);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Time$[rsp]
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__localtime64

; 500  :         }

  00014	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00018	c3		 ret	 0
localtime ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sscanf	PROC						; COMDAT

; 2247 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsscanf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2252 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2253 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2254 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2152 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2153 :         return __stdio_common_vsscanf(

  00018	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  0003d	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00007	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
END
