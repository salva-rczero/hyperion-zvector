; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	fmt_line
PUBLIC	locate_sysblk
PUBLIC	locate_regs
PUBLIC	locate_hostinfo
PUBLIC	locate_cmd
PUBLIC	__real@0000000000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@412e848000000000
PUBLIC	__real@41cdcd6500000000
PUBLIC	__real@426d1a94a2000000
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp_isprint:PROC
EXTRN	strcmp:PROC
EXTRN	strlen:PROC
EXTRN	_byteswap_ulong:PROC
EXTRN	_byteswap_uint64:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	__imp_init_hostinfo:PROC
EXTRN	__imp_strlcpy:PROC
EXTRN	__imp_strlcat:PROC
EXTRN	__imp_fmt_memsize:PROC
EXTRN	__imp_idx_snprintf:PROC
EXTRN	__imp_ptyp2short:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_hostinfo:BYTE
EXTRN	__imp_sysblk:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
?fmt_dec@?1??fmt_decimal@@9@9 DB 040H DUP (?)		; `fmt_decimal'::`2'::fmt_dec
$SG159221 DB	01H DUP (?)
	ALIGN	4

$SG159326 DB	01H DUP (?)
	ALIGN	4

$SG159411 DB	01H DUP (?)
	ALIGN	4

$SG159468 DB	01H DUP (?)
	ALIGN	4

$SG159541 DB	01H DUP (?)
	ALIGN	4

$SG159593 DB	01H DUP (?)
	ALIGN	4

$SG159610 DB	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sscanf
pdata	ENDS
pdata	SEGMENT
$pdata$strcaseabbrev DD imagerel strcaseabbrev
	DD	imagerel strcaseabbrev+320
	DD	imagerel $unwind$strcaseabbrev
$pdata$fmt_decimal DD imagerel fmt_decimal
	DD	imagerel fmt_decimal+733
	DD	imagerel $unwind$fmt_decimal
$pdata$fmt_line DD imagerel $LN17
	DD	imagerel $LN17+668
	DD	imagerel $unwind$fmt_line
$pdata$locate_sysblk DD imagerel $LN22
	DD	imagerel $LN22+1682
	DD	imagerel $unwind$locate_sysblk
$pdata$locate_regs DD imagerel $LN23
	DD	imagerel $LN23+1941
	DD	imagerel $unwind$locate_regs
$pdata$locate_hostinfo DD imagerel $LN34
	DD	imagerel $LN34+6617
	DD	imagerel $unwind$locate_hostinfo
$pdata$locate_cmd DD imagerel $LN12
	DD	imagerel $LN12+375
	DD	imagerel $unwind$locate_cmd
pdata	ENDS
;	COMDAT __real@426d1a94a2000000
CONST	SEGMENT
__real@426d1a94a2000000 DQ 0426d1a94a2000000r	; 1e+12
CONST	ENDS
;	COMDAT __real@41cdcd6500000000
CONST	SEGMENT
__real@41cdcd6500000000 DQ 041cdcd6500000000r	; 1e+09
CONST	ENDS
;	COMDAT __real@412e848000000000
CONST	SEGMENT
__real@412e848000000000 DQ 0412e848000000000r	; 1e+06
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
_DATA	SEGMENT
$SG159103 DB	'%7.3f', 00H
	ORG $+2
$SG159109 DB	'%3d ', 00H
	ORG $+3
$SG159137 DB	'%2.2X', 00H
	ORG $+2
$SG159138 DB	'%s+0x%04x%-74.74s %-34.34s', 00H
	ORG $+1
$SG159139 DB	'D', 00H
	ORG $+2
$SG159140 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159189 DB	'D', 00H
	ORG $+2
$SG159141 DB	'fmt_line', 00H
	ORG $+3
$SG159195 DB	'D', 00H
	ORG $+2
$SG159142 DB	'hscloc.c', 00H
	ORG $+3
$SG159199 DB	'SYSBLK', 00H
	ORG $+1
$SG159202 DB	'D', 00H
	ORG $+2
$SG159188 DB	'SYSBLK moved; was 0x%16.16llX, is 0x%p', 00H
	ORG $+1
$SG159190 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159209 DB	'D', 00H
	ORG $+2
$SG159191 DB	'locate_sysblk', 00H
	ORG $+2
$SG159192 DB	'hscloc.c', 00H
	ORG $+3
$SG159214 DB	'SYSBLK', 00H
	ORG $+1
$SG159217 DB	'D', 00H
	ORG $+2
$SG159194 DB	'SYSBLK size wrong; is %u, should be %u', 00H
	ORG $+1
$SG159196 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159224 DB	'D', 00H
	ORG $+2
$SG159197 DB	'locate_sysblk', 00H
	ORG $+2
$SG159198 DB	'hscloc.c', 00H
	ORG $+3
$SG159238 DB	'sysblk', 00H
	ORG $+1
$SG159290 DB	'D', 00H
	ORG $+2
$SG159201 DB	'SYSBLK header wrong; is "%s", should be "%s"', 00H
	ORG $+3
$SG159203 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159296 DB	'D', 00H
	ORG $+2
$SG159204 DB	'locate_sysblk', 00H
	ORG $+2
$SG159205 DB	'hscloc.c', 00H
	ORG $+3
$SG159302 DB	'D', 00H
	ORG $+2
$SG159206 DB	'SDL 4.2', 00H
$SG159208 DB	'SYSBLK version wrong; is "%s", should be "%s"', 00H
	ORG $+2
$SG159210 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159308 DB	'D', 00H
	ORG $+2
$SG159211 DB	'locate_sysblk', 00H
	ORG $+2
$SG159212 DB	'hscloc.c', 00H
	ORG $+3
$SG159213 DB	'END ', 00H
	ORG $+3
$SG159315 DB	'D', 00H
	ORG $+2
$SG159216 DB	'SYSBLK trailer wrong; is "%s", should be "%s"', 00H
	ORG $+2
$SG159218 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159322 DB	'D', 00H
	ORG $+2
$SG159219 DB	'locate_sysblk', 00H
	ORG $+2
$SG159220 DB	'hscloc.c', 00H
	ORG $+3
$SG159222 DB	'Not ', 00H
	ORG $+3
$SG159329 DB	'D', 00H
	ORG $+2
$SG159223 DB	'SYSBLK @ 0x%p - %sVerified', 00H
	ORG $+1
$SG159379 DB	'D', 00H
	ORG $+2
$SG159225 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159385 DB	'D', 00H
	ORG $+2
$SG159226 DB	'locate_sysblk', 00H
	ORG $+2
$SG159227 DB	'hscloc.c', 00H
	ORG $+3
$SG159230 DB	'%x%c', 00H
	ORG $+3
$SG159235 DB	'%x%c', 00H
	ORG $+3
$SG159286 DB	'REGS', 00H
	ORG $+3
$SG159392 DB	'D', 00H
	ORG $+2
$SG159287 DB	'%-4.4s_%s%02X', 00H
	ORG $+2
$SG159289 DB	'REGS not assigned', 00H
	ORG $+2
$SG159399 DB	'D', 00H
	ORG $+2
$SG159291 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159407 DB	'D', 00H
	ORG $+2
$SG159292 DB	'locate_regs', 00H
$SG159414 DB	'D', 00H
	ORG $+2
$SG159293 DB	'hscloc.c', 00H
	ORG $+3
$SG159420 DB	'D', 00H
	ORG $+2
$SG159295 DB	'REGS[%2.2X] moved; was 0x%16.16llX, is 0x%p', 00H
$SG159426 DB	'D', 00H
	ORG $+2
$SG159297 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159432 DB	'D', 00H
	ORG $+2
$SG159298 DB	'locate_regs', 00H
$SG159438 DB	'D', 00H
	ORG $+2
$SG159299 DB	'hscloc.c', 00H
	ORG $+3
$SG159444 DB	'D', 00H
	ORG $+2
$SG159301 DB	'REGS[%2.2X] size wrong; is %u, should be %u', 00H
$SG159450 DB	'D', 00H
	ORG $+2
$SG159303 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159454 DB	'YES', 00H
$SG159304 DB	'locate_regs', 00H
$SG159455 DB	'NO', 00H
	ORG $+1
$SG159305 DB	'hscloc.c', 00H
	ORG $+3
$SG159458 DB	'D', 00H
	ORG $+2
$SG159307 DB	'REGS[%2.2X] header wrong; is "%s", should be "%s"', 00H
	ORG $+2
$SG159464 DB	'D', 00H
	ORG $+2
$SG159309 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159469 DB	'D', 00H
	ORG $+2
$SG159310 DB	'locate_regs', 00H
$SG159475 DB	'D', 00H
	ORG $+2
$SG159311 DB	'hscloc.c', 00H
	ORG $+3
$SG159481 DB	'D', 00H
	ORG $+2
$SG159312 DB	'SDL 4.00', 00H
	ORG $+3
$SG159487 DB	'D', 00H
	ORG $+2
$SG159314 DB	'REGS[%2.2X] version wrong; is "%s", should be "%s"', 00H
	ORG $+1
$SG159493 DB	'D', 00H
	ORG $+2
$SG159316 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159499 DB	'D', 00H
	ORG $+2
$SG159317 DB	'locate_regs', 00H
$SG159505 DB	'D', 00H
	ORG $+2
$SG159318 DB	'hscloc.c', 00H
	ORG $+3
$SG159319 DB	'END ', 00H
	ORG $+3
$SG159509 DB	'YES', 00H
$SG159321 DB	'REGS[%2.2X] trailer wrong; is "%s", should be "%s"', 00H
	ORG $+1
$SG159510 DB	' NO', 00H
$SG159323 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159513 DB	'D', 00H
	ORG $+2
$SG159324 DB	'locate_regs', 00H
$SG159517 DB	'YES', 00H
$SG159325 DB	'hscloc.c', 00H
	ORG $+3
$SG159327 DB	'Not ', 00H
	ORG $+3
$SG159518 DB	' NO', 00H
$SG159328 DB	'REGS[%2.2X] @ 0x%p - %sVerified', 00H
$SG159330 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159521 DB	'D', 00H
	ORG $+2
$SG159331 DB	'locate_regs', 00H
$SG159525 DB	'YES', 00H
$SG159332 DB	'hscloc.c', 00H
	ORG $+3
$SG159335 DB	'%x%c', 00H
	ORG $+3
$SG159340 DB	'%x%c', 00H
	ORG $+3
$SG159343 DB	'regs', 00H
	ORG $+3
$SG159526 DB	' NO', 00H
$SG159378 DB	'HOSTINFO moved; was 0x%16.16llX, is 0x%p', 00H
	ORG $+3
$SG159529 DB	'D', 00H
	ORG $+2
$SG159380 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159533 DB	'YES', 00H
$SG159381 DB	'locate_hostinfo', 00H
$SG159382 DB	'hscloc.c', 00H
	ORG $+3
$SG159534 DB	' NO', 00H
$SG159384 DB	'HOSTINFO size wrong; is %u, should be %u', 00H
	ORG $+3
$SG159537 DB	'D', 00H
	ORG $+2
$SG159386 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159542 DB	'D', 00H
	ORG $+2
$SG159387 DB	'locate_hostinfo', 00H
$SG159388 DB	'hscloc.c', 00H
	ORG $+3
$SG159546 DB	'YES', 00H
$SG159389 DB	'HOST_INFO', 00H
	ORG $+2
$SG159547 DB	' NO', 00H
$SG159391 DB	'HOSTINFO header wrong; is "%s", should be "%s"', 00H
	ORG $+1
$SG159393 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159550 DB	'D', 00H
	ORG $+2
$SG159394 DB	'locate_hostinfo', 00H
$SG159395 DB	'hscloc.c', 00H
	ORG $+3
$SG159556 DB	'D', 00H
	ORG $+2
$SG159396 DB	'SDL 4.00', 00H
	ORG $+3
$SG159563 DB	'D', 00H
	ORG $+2
$SG159398 DB	'HOSTINFO version wrong; is %s, should be %s', 00H
$SG159570 DB	'D', 00H
	ORG $+2
$SG159400 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159577 DB	'D', 00H
	ORG $+2
$SG159401 DB	'locate_hostinfo', 00H
$SG159402 DB	'hscloc.c', 00H
	ORG $+3
$SG159403 DB	'END ', 00H
	ORG $+3
$SG159583 DB	'D', 00H
	ORG $+2
$SG159404 DB	'HOST_INFO', 00H
	ORG $+2
$SG159589 DB	'D', 00H
	ORG $+2
$SG159406 DB	'HOSTINFO trailer wrong; is %s, should be %s', 00H
$SG159594 DB	'D', 00H
	ORG $+2
$SG159408 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159600 DB	'D', 00H
	ORG $+2
$SG159409 DB	'locate_hostinfo', 00H
$SG159410 DB	'hscloc.c', 00H
	ORG $+3
$SG159412 DB	'Not ', 00H
	ORG $+3
$SG159606 DB	'D', 00H
	ORG $+2
$SG159413 DB	'HOSTINFO @ 0x%p - %sVerified', 00H
	ORG $+3
$SG159415 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159611 DB	'D', 00H
	ORG $+2
$SG159416 DB	'locate_hostinfo', 00H
$SG159417 DB	'hscloc.c', 00H
	ORG $+3
$SG159617 DB	'D', 00H
	ORG $+2
$SG159418 DB	'sysname', 00H
$SG159419 DB	'%-17s = %s', 00H
	ORG $+1
$SG159623 DB	'D', 00H
	ORG $+2
$SG159421 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159629 DB	'D', 00H
	ORG $+2
$SG159422 DB	'locate_hostinfo', 00H
$SG159423 DB	'hscloc.c', 00H
	ORG $+3
$SG159635 DB	'D', 00H
	ORG $+2
$SG159424 DB	'nodename', 00H
	ORG $+3
$SG159641 DB	'D', 00H
	ORG $+2
$SG159425 DB	'%-17s = %s', 00H
	ORG $+1
$SG159647 DB	'D', 00H
	ORG $+2
$SG159427 DB	'HHC90000%s DBG: %s', 0aH, 00H
$SG159672 DB	'E', 00H
	ORG $+2
$SG159428 DB	'locate_hostinfo', 00H
$SG159429 DB	'hscloc.c', 00H
	ORG $+3
$SG159665 DB	'sysblk', 00H
	ORG $+5
$SG159430 DB	'release', 00H
$SG159431 DB	'%-17s = %s', 00H
	ORG $+5
$SG159433 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159434 DB	'locate_hostinfo', 00H
$SG159435 DB	'hscloc.c', 00H
	ORG $+7
$SG159436 DB	'version', 00H
$SG159437 DB	'%-17s = %s', 00H
	ORG $+5
$SG159439 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159440 DB	'locate_hostinfo', 00H
$SG159441 DB	'hscloc.c', 00H
	ORG $+7
$SG159442 DB	'machine', 00H
$SG159443 DB	'%-17s = %s', 00H
	ORG $+5
$SG159445 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159446 DB	'locate_hostinfo', 00H
$SG159447 DB	'hscloc.c', 00H
	ORG $+7
$SG159448 DB	'cpu_brand', 00H
	ORG $+6
$SG159449 DB	'%-17s = %s', 00H
	ORG $+5
$SG159451 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159452 DB	'locate_hostinfo', 00H
$SG159453 DB	'hscloc.c', 00H
	ORG $+7
$SG159456 DB	'trycritsec_avail', 00H
	ORG $+7
$SG159457 DB	'%-17s = %s', 00H
	ORG $+5
$SG159459 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159460 DB	'locate_hostinfo', 00H
$SG159461 DB	'hscloc.c', 00H
	ORG $+7
$SG159462 DB	'maxfilesopen', 00H
	ORG $+3
$SG159463 DB	'%-17s = %d', 00H
	ORG $+5
$SG159465 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159466 DB	'locate_hostinfo', 00H
$SG159467 DB	'hscloc.c', 00H
	ORG $+7
$SG159470 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159471 DB	'locate_hostinfo', 00H
$SG159472 DB	'hscloc.c', 00H
	ORG $+7
$SG159473 DB	'num_procs', 00H
	ORG $+6
$SG159474 DB	'%-17s = %3d', 00H
	ORG $+4
$SG159476 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159477 DB	'locate_hostinfo', 00H
$SG159478 DB	'hscloc.c', 00H
	ORG $+7
$SG159479 DB	'num_packages', 00H
	ORG $+3
$SG159480 DB	'%-17s = %3d', 00H
	ORG $+4
$SG159482 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159483 DB	'locate_hostinfo', 00H
$SG159484 DB	'hscloc.c', 00H
	ORG $+7
$SG159485 DB	'num_physical_cpu', 00H
	ORG $+7
$SG159486 DB	'%-17s = %3d', 00H
	ORG $+4
$SG159488 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159489 DB	'locate_hostinfo', 00H
$SG159490 DB	'hscloc.c', 00H
	ORG $+7
$SG159491 DB	'num_logical_cpu', 00H
$SG159492 DB	'%-17s = %3d', 00H
	ORG $+4
$SG159494 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159495 DB	'locate_hostinfo', 00H
$SG159496 DB	'hscloc.c', 00H
	ORG $+7
$SG159497 DB	'bus_speed', 00H
	ORG $+6
$SG159498 DB	'%-17s = %sHz', 00H
	ORG $+3
$SG159500 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159501 DB	'locate_hostinfo', 00H
$SG159502 DB	'hscloc.c', 00H
	ORG $+7
$SG159503 DB	'cpu_speed', 00H
	ORG $+6
$SG159504 DB	'%-17s = %sHz', 00H
	ORG $+3
$SG159506 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159507 DB	'locate_hostinfo', 00H
$SG159508 DB	'hscloc.c', 00H
	ORG $+7
$SG159511 DB	'vector_unit', 00H
	ORG $+4
$SG159512 DB	'%-17s = %s', 00H
	ORG $+5
$SG159514 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159515 DB	'locate_hostinfo', 00H
$SG159516 DB	'hscloc.c', 00H
	ORG $+7
$SG159519 DB	'fp_unit', 00H
$SG159520 DB	'%-17s = %s', 00H
	ORG $+5
$SG159522 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159523 DB	'locate_hostinfo', 00H
$SG159524 DB	'hscloc.c', 00H
	ORG $+7
$SG159527 DB	'cpu_64bits', 00H
	ORG $+5
$SG159528 DB	'%-17s = %s', 00H
	ORG $+5
$SG159530 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159531 DB	'locate_hostinfo', 00H
$SG159532 DB	'hscloc.c', 00H
	ORG $+7
$SG159535 DB	'cpu_aes_extns', 00H
	ORG $+2
$SG159536 DB	'%-17s = %s', 00H
	ORG $+5
$SG159538 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159539 DB	'locate_hostinfo', 00H
$SG159540 DB	'hscloc.c', 00H
	ORG $+7
$SG159543 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159544 DB	'locate_hostinfo', 00H
$SG159545 DB	'hscloc.c', 00H
	ORG $+7
$SG159548 DB	'valid_cache_nums', 00H
	ORG $+7
$SG159549 DB	'%-17s = %s', 00H
	ORG $+5
$SG159551 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159552 DB	'locate_hostinfo', 00H
$SG159553 DB	'hscloc.c', 00H
	ORG $+7
$SG159554 DB	'cachelinesz', 00H
	ORG $+4
$SG159555 DB	'%-17s = %5llu B', 00H
$SG159557 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159558 DB	'locate_hostinfo', 00H
$SG159559 DB	'hscloc.c', 00H
	ORG $+7
$SG159561 DB	'L1Dcachesz', 00H
	ORG $+5
$SG159562 DB	'%-17s = %siB', 00H
	ORG $+3
$SG159564 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159565 DB	'locate_hostinfo', 00H
$SG159566 DB	'hscloc.c', 00H
	ORG $+7
$SG159568 DB	'L1Icachesz', 00H
	ORG $+5
$SG159569 DB	'%-17s = %siB', 00H
	ORG $+3
$SG159571 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159572 DB	'locate_hostinfo', 00H
$SG159573 DB	'hscloc.c', 00H
	ORG $+7
$SG159575 DB	'L1Ucachesz', 00H
	ORG $+5
$SG159576 DB	'%-17s = %siB', 00H
	ORG $+3
$SG159578 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159579 DB	'locate_hostinfo', 00H
$SG159580 DB	'hscloc.c', 00H
	ORG $+7
$SG159581 DB	'L2cachesz', 00H
	ORG $+6
$SG159582 DB	'%-17s = %siB', 00H
	ORG $+3
$SG159584 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159585 DB	'locate_hostinfo', 00H
$SG159586 DB	'hscloc.c', 00H
	ORG $+7
$SG159587 DB	'L3cachesz', 00H
	ORG $+6
$SG159588 DB	'%-17s = %siB', 00H
	ORG $+3
$SG159590 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159591 DB	'locate_hostinfo', 00H
$SG159592 DB	'hscloc.c', 00H
	ORG $+7
$SG159595 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159596 DB	'locate_hostinfo', 00H
$SG159597 DB	'hscloc.c', 00H
	ORG $+7
$SG159598 DB	'hostpagesz', 00H
	ORG $+5
$SG159599 DB	'%-17s = %siB', 00H
	ORG $+3
$SG159601 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159602 DB	'locate_hostinfo', 00H
$SG159603 DB	'hscloc.c', 00H
	ORG $+7
$SG159604 DB	'AllocGran', 00H
	ORG $+6
$SG159605 DB	'%-17s = %siB', 00H
	ORG $+3
$SG159607 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159608 DB	'locate_hostinfo', 00H
$SG159609 DB	'hscloc.c', 00H
	ORG $+7
$SG159612 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159613 DB	'locate_hostinfo', 00H
$SG159614 DB	'hscloc.c', 00H
	ORG $+7
$SG159615 DB	'TotalPhys', 00H
	ORG $+6
$SG159616 DB	'%-17s = %siB', 00H
	ORG $+3
$SG159618 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159619 DB	'locate_hostinfo', 00H
$SG159620 DB	'hscloc.c', 00H
	ORG $+7
$SG159621 DB	'AvailPhys', 00H
	ORG $+6
$SG159622 DB	'%-17s = %siB', 00H
	ORG $+3
$SG159624 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159625 DB	'locate_hostinfo', 00H
$SG159626 DB	'hscloc.c', 00H
	ORG $+7
$SG159627 DB	'TotalPageFile', 00H
	ORG $+2
$SG159628 DB	'%-17s = %siB', 00H
	ORG $+3
$SG159630 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159631 DB	'locate_hostinfo', 00H
$SG159632 DB	'hscloc.c', 00H
	ORG $+7
$SG159633 DB	'AvailPageFile', 00H
	ORG $+2
$SG159634 DB	'%-17s = %siB', 00H
	ORG $+3
$SG159636 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159637 DB	'locate_hostinfo', 00H
$SG159638 DB	'hscloc.c', 00H
	ORG $+7
$SG159639 DB	'TotalVirtual', 00H
	ORG $+3
$SG159640 DB	'%-17s = %siB', 00H
	ORG $+3
$SG159642 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159643 DB	'locate_hostinfo', 00H
$SG159644 DB	'hscloc.c', 00H
	ORG $+7
$SG159645 DB	'AvailVirtual', 00H
	ORG $+3
$SG159646 DB	'%-17s = %siB', 00H
	ORG $+3
$SG159648 DB	'HHC90000%s DBG: %s', 0aH, 00H
	ORG $+4
$SG159649 DB	'locate_hostinfo', 00H
$SG159650 DB	'hscloc.c', 00H
	ORG $+3
$SG159668 DB	'regs', 00H
	ORG $+7
$SG159671 DB	'hostinfo', 00H
	ORG $+7
$SG159673 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+6
$SG159674 DB	'locate_cmd', 00H
	ORG $+5
$SG159675 DB	'hscloc.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:locate_hostinfo
	DD	020H
	DD	019c0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:locate_regs
	DD	020H
	DD	077cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:locate_sysblk
	DD	020H
	DD	0679H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:fmt_line
	DD	026H
	DD	0283H
voltbl	ENDS
xdata	SEGMENT
$unwind$strcaseabbrev DD 011301H
	DD	08213H
$unwind$fmt_decimal DD 020a01H
	DD	07006b20aH
$unwind$fmt_line DD 032e19H
	DD	048011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	0230H
$unwind$locate_sysblk DD 032819H
	DD	03e0116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	01e0H
$unwind$locate_regs DD 032819H
	DD	0420116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	0200H
$unwind$locate_hostinfo DD 032819H
	DD	0420116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	0200H
$unwind$locate_cmd DD 011201H
	DD	0a212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscloc.c
_TEXT	SEGMENT
rc$ = 64
tv133 = 72
argc$ = 96
argv$ = 104
cmdline$ = 112
locate_cmd PROC

; 594  : {

$LN12:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 595  :     int rc = 0;

  00012	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN4@locate_cmd:

; 596  : 
; 597  :     UNREFERENCED(cmdline);

  0001a	33 c0		 xor	 eax, eax
  0001c	85 c0		 test	 eax, eax
  0001e	75 fa		 jne	 SHORT $LN4@locate_cmd

; 598  : 
; 599  :     if (argc > 1 && CMD(argv[1],sysblk,6))

  00020	83 7c 24 60 01	 cmp	 DWORD PTR argc$[rsp], 1
  00025	7e 44		 jle	 SHORT $LN5@locate_cmd
  00027	b8 08 00 00 00	 mov	 eax, 8
  0002c	48 6b c0 01	 imul	 rax, rax, 1
  00030	41 b8 06 00 00
	00		 mov	 r8d, 6
  00036	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  0003b	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159665
  00046	e8 00 00 00 00	 call	 strcaseabbrev
  0004b	85 c0		 test	 eax, eax
  0004d	74 1c		 je	 SHORT $LN5@locate_cmd

; 600  :     {
; 601  :         rc = locate_sysblk(argc, argv, cmdline);

  0004f	4c 8b 44 24 70	 mov	 r8, QWORD PTR cmdline$[rsp]
  00054	48 8b 54 24 68	 mov	 rdx, QWORD PTR argv$[rsp]
  00059	8b 4c 24 60	 mov	 ecx, DWORD PTR argc$[rsp]
  0005d	e8 00 00 00 00	 call	 locate_sysblk
  00062	89 44 24 40	 mov	 DWORD PTR rc$[rsp], eax

; 602  :     }

  00066	e9 03 01 00 00	 jmp	 $LN6@locate_cmd
$LN5@locate_cmd:

; 603  :     else
; 604  :     if (argc > 1 && CMD(argv[1],regs,4))

  0006b	83 7c 24 60 01	 cmp	 DWORD PTR argc$[rsp], 1
  00070	7e 44		 jle	 SHORT $LN7@locate_cmd
  00072	b8 08 00 00 00	 mov	 eax, 8
  00077	48 6b c0 01	 imul	 rax, rax, 1
  0007b	41 b8 04 00 00
	00		 mov	 r8d, 4
  00081	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  00086	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0008a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159668
  00091	e8 00 00 00 00	 call	 strcaseabbrev
  00096	85 c0		 test	 eax, eax
  00098	74 1c		 je	 SHORT $LN7@locate_cmd

; 605  :     {
; 606  :         rc = locate_regs(argc, argv, cmdline);

  0009a	4c 8b 44 24 70	 mov	 r8, QWORD PTR cmdline$[rsp]
  0009f	48 8b 54 24 68	 mov	 rdx, QWORD PTR argv$[rsp]
  000a4	8b 4c 24 60	 mov	 ecx, DWORD PTR argc$[rsp]
  000a8	e8 00 00 00 00	 call	 locate_regs
  000ad	89 44 24 40	 mov	 DWORD PTR rc$[rsp], eax

; 607  :     }

  000b1	e9 b8 00 00 00	 jmp	 $LN8@locate_cmd
$LN7@locate_cmd:

; 608  :     else
; 609  :     if (argc > 1 && CMD(argv[1],hostinfo,4))

  000b6	83 7c 24 60 01	 cmp	 DWORD PTR argc$[rsp], 1
  000bb	7e 41		 jle	 SHORT $LN9@locate_cmd
  000bd	b8 08 00 00 00	 mov	 eax, 8
  000c2	48 6b c0 01	 imul	 rax, rax, 1
  000c6	41 b8 04 00 00
	00		 mov	 r8d, 4
  000cc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  000d1	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159671
  000dc	e8 00 00 00 00	 call	 strcaseabbrev
  000e1	85 c0		 test	 eax, eax
  000e3	74 19		 je	 SHORT $LN9@locate_cmd

; 610  :     {
; 611  :         rc = locate_hostinfo(argc, argv, cmdline);

  000e5	4c 8b 44 24 70	 mov	 r8, QWORD PTR cmdline$[rsp]
  000ea	48 8b 54 24 68	 mov	 rdx, QWORD PTR argv$[rsp]
  000ef	8b 4c 24 60	 mov	 ecx, DWORD PTR argc$[rsp]
  000f3	e8 00 00 00 00	 call	 locate_hostinfo
  000f8	89 44 24 40	 mov	 DWORD PTR rc$[rsp], eax

; 612  :     }

  000fc	eb 70		 jmp	 SHORT $LN10@locate_cmd
$LN9@locate_cmd:

; 613  :     else
; 614  :     {
; 615  :         WRMSG( HHC02299, "E", argv[0] );

  000fe	b8 08 00 00 00	 mov	 eax, 8
  00103	48 6b c0 00	 imul	 rax, rax, 0
  00107	48 89 44 24 48	 mov	 QWORD PTR tv133[rsp], rax
  0010c	b9 01 00 00 00	 mov	 ecx, 1
  00111	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00117	48 8b 4c 24 68	 mov	 rcx, QWORD PTR argv$[rsp]
  0011c	48 8b 54 24 48	 mov	 rdx, QWORD PTR tv133[rsp]
  00121	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00125	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0012a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159672
  00131	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00136	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159673
  0013d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00142	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00147	41 b9 03 00 00
	00		 mov	 r9d, 3
  0014d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159674
  00154	ba 67 02 00 00	 mov	 edx, 615		; 00000267H
  00159	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159675
  00160	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 616  :         rc = -1;

  00166	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN10@locate_cmd:
$LN8@locate_cmd:
$LN6@locate_cmd:

; 617  :     }
; 618  : 
; 619  :     return rc;

  0016e	8b 44 24 40	 mov	 eax, DWORD PTR rc$[rsp]

; 620  : }

  00172	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00176	c3		 ret	 0
locate_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscloc.c
_TEXT	SEGMENT
pHostInfo$ = 64
ok$ = 72
rc$ = 76
loc$ = 80
tv230 = 88
tv408 = 96
tv584 = 104
tv602 = 112
tv652 = 120
tv670 = 128
tv698 = 136
fmt_mem$ = 144
msgbuf$ = 160
trailer$1 = 416
header$2 = 448
version$3 = 480
__$ArrayPad$ = 512
argc$ = 544
argv$ = 552
cmdline$ = 560
locate_hostinfo PROC

; 390  : {

$LN34:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 81 ec 10 02
	00 00		 sub	 rsp, 528		; 00000210H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 391  :     int         rc              = 0;

  00028	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0

; 392  :     char        msgbuf[256];
; 393  :     HOST_INFO*  pHostInfo       = &hostinfo;

  00030	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_hostinfo
  00037	48 89 44 24 40	 mov	 QWORD PTR pHostInfo$[rsp], rax

; 394  :     int         ok              = TRUE;

  0003c	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR ok$[rsp], 1

; 395  :     U64         loc             = CSWAP64( hostinfo.blkloc );

  00044	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_hostinfo
  0004b	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0004f	e8 00 00 00 00	 call	 _byteswap_uint64
  00054	48 89 44 24 50	 mov	 QWORD PTR loc$[rsp], rax
$LN4@locate_hos:

; 396  :     char        fmt_mem[8];
; 397  : 
; 398  :     UNREFERENCED( argc );

  00059	33 c0		 xor	 eax, eax
  0005b	85 c0		 test	 eax, eax
  0005d	75 fa		 jne	 SHORT $LN4@locate_hos
$LN7@locate_hos:

; 399  :     UNREFERENCED( argv );

  0005f	33 c0		 xor	 eax, eax
  00061	85 c0		 test	 eax, eax
  00063	75 fa		 jne	 SHORT $LN7@locate_hos
$LN10@locate_hos:

; 400  :     UNREFERENCED( cmdline );

  00065	33 c0		 xor	 eax, eax
  00067	85 c0		 test	 eax, eax
  00069	75 fa		 jne	 SHORT $LN10@locate_hos

; 401  : 
; 402  :     init_hostinfo( NULL );      // refresh information

  0006b	33 c9		 xor	 ecx, ecx
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_init_hostinfo

; 403  : 
; 404  :     /* verify head, tail, length and address */
; 405  : 
; 406  :     if (loc != (U64)((uintptr_t) &hostinfo ))

  00073	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_hostinfo
  0007a	48 39 44 24 50	 cmp	 QWORD PTR loc$[rsp], rax
  0007f	0f 84 87 00 00
	00		 je	 $LN11@locate_hos

; 407  :     {
; 408  :         MSGBUF( msgbuf, "HOSTINFO moved; was 0x%16.16"PRIX64", is 0x%p",

  00085	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_hostinfo
  0008c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00091	4c 8b 4c 24 50	 mov	 r9, QWORD PTR loc$[rsp]
  00096	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159378
  0009d	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  000a2	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 409  :             loc, &hostinfo );
; 410  :         WRMSG( HHC90000, "D", msgbuf );

  000b0	b9 01 00 00 00	 mov	 ecx, 1
  000b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000bb	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  000c3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159379
  000cf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159380
  000db	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000e0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e5	41 b9 03 00 00
	00		 mov	 r9d, 3
  000eb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159381
  000f2	ba 9a 01 00 00	 mov	 edx, 410		; 0000019aH
  000f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159382
  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 411  :         ok = FALSE;

  00104	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR ok$[rsp], 0
$LN11@locate_hos:

; 412  :     }
; 413  : 
; 414  :     if (CSWAP32( hostinfo.blksiz ) != (U32) sizeof( HOST_INFO ))

  0010c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_hostinfo
  00113	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00116	e8 00 00 00 00	 call	 _byteswap_ulong
  0011b	3d 70 02 00 00	 cmp	 eax, 624		; 00000270H
  00120	0f 84 90 00 00
	00		 je	 $LN12@locate_hos

; 415  :     {
; 416  :         MSGBUF( msgbuf, "HOSTINFO size wrong; is %u, should be %u",

  00126	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_hostinfo
  0012d	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00130	e8 00 00 00 00	 call	 _byteswap_ulong
  00135	c7 44 24 20 70
	02 00 00	 mov	 DWORD PTR [rsp+32], 624	; 00000270H
  0013d	44 8b c8	 mov	 r9d, eax
  00140	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159384
  00147	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0014c	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00154	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 417  :             CSWAP32( hostinfo.blksiz ), (U32) sizeof( HOST_INFO ));
; 418  :         WRMSG( HHC90000, "D", msgbuf );

  0015a	b9 01 00 00 00	 mov	 ecx, 1
  0015f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00165	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0016d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00172	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159385
  00179	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0017e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159386
  00185	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0018a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0018f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00195	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159387
  0019c	ba a2 01 00 00	 mov	 edx, 418		; 000001a2H
  001a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159388
  001a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 419  :         ok = FALSE;

  001ae	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR ok$[rsp], 0
$LN12@locate_hos:

; 420  :     }
; 421  : 
; 422  :     /* verify header */
; 423  :     {
; 424  :         char     header[32];
; 425  :         memset(  header, SPACE, sizeof( header ));

  001b6	48 8d 84 24 c0
	01 00 00	 lea	 rax, QWORD PTR header$2[rsp]
  001be	48 8b f8	 mov	 rdi, rax
  001c1	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  001c6	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  001cb	f3 aa		 rep stosb

; 426  :         STRLCPY( header, HDL_NAME_HOST_INFO );

  001cd	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  001d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159389
  001da	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR header$2[rsp]
  001e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 427  : 
; 428  :         if (strcmp( hostinfo.blknam, header ) != 0)

  001e8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_hostinfo
  001ef	48 8d 94 24 c0
	01 00 00	 lea	 rdx, QWORD PTR header$2[rsp]
  001f7	48 8b c8	 mov	 rcx, rax
  001fa	e8 00 00 00 00	 call	 strcmp
  001ff	85 c0		 test	 eax, eax
  00201	0f 84 8d 00 00
	00		 je	 $LN13@locate_hos

; 429  :         {
; 430  :             MSGBUF( msgbuf, "HOSTINFO header wrong; is \"%s\", should be \"%s\"",

  00207	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_hostinfo
  0020e	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR header$2[rsp]
  00216	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0021b	4c 8b c8	 mov	 r9, rax
  0021e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159391
  00225	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0022a	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00232	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 431  :                 hostinfo.blknam, header );
; 432  :             WRMSG( HHC90000, "D", msgbuf );

  00238	b9 01 00 00 00	 mov	 ecx, 1
  0023d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00243	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0024b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00250	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159392
  00257	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0025c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159393
  00263	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00268	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0026d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00273	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159394
  0027a	ba b0 01 00 00	 mov	 edx, 432		; 000001b0H
  0027f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159395
  00286	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 433  :             ok = FALSE;

  0028c	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR ok$[rsp], 0
$LN13@locate_hos:

; 434  :         }
; 435  :     }
; 436  : 
; 437  :     /* verify version */
; 438  :     {
; 439  :         char     version[32];
; 440  :         memset(  version, SPACE, sizeof( version ));

  00294	48 8d 84 24 e0
	01 00 00	 lea	 rax, QWORD PTR version$3[rsp]
  0029c	48 8b f8	 mov	 rdi, rax
  0029f	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  002a4	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  002a9	f3 aa		 rep stosb

; 441  :         STRLCPY( version, HDL_VERS_HOST_INFO );

  002ab	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  002b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159396
  002b8	48 8d 8c 24 e0
	01 00 00	 lea	 rcx, QWORD PTR version$3[rsp]
  002c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 442  : 
; 443  :         if (strcmp( hostinfo.blkver, version ) != 0)

  002c6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_hostinfo
  002cd	48 83 c0 10	 add	 rax, 16
  002d1	48 8d 94 24 e0
	01 00 00	 lea	 rdx, QWORD PTR version$3[rsp]
  002d9	48 8b c8	 mov	 rcx, rax
  002dc	e8 00 00 00 00	 call	 strcmp
  002e1	85 c0		 test	 eax, eax
  002e3	0f 84 91 00 00
	00		 je	 $LN14@locate_hos

; 444  :         {
; 445  :             MSGBUF( msgbuf, "HOSTINFO version wrong; is %s, should be %s",

  002e9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_hostinfo
  002f0	48 83 c0 10	 add	 rax, 16
  002f4	48 8d 8c 24 e0
	01 00 00	 lea	 rcx, QWORD PTR version$3[rsp]
  002fc	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00301	4c 8b c8	 mov	 r9, rax
  00304	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159398
  0030b	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00310	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00318	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 446  :                 hostinfo.blkver, version );
; 447  :             WRMSG( HHC90000, "D", msgbuf );

  0031e	b9 01 00 00 00	 mov	 ecx, 1
  00323	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00329	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00331	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00336	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159399
  0033d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00342	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159400
  00349	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0034e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00353	41 b9 03 00 00
	00		 mov	 r9d, 3
  00359	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159401
  00360	ba bf 01 00 00	 mov	 edx, 447		; 000001bfH
  00365	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159402
  0036c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 448  :             ok = FALSE;

  00372	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR ok$[rsp], 0
$LN14@locate_hos:

; 449  :         }
; 450  :     }
; 451  : 
; 452  :     /* verify trailer */
; 453  :     {
; 454  :         char     trailer[32];
; 455  :         memset(  trailer, SPACE, sizeof( trailer ));

  0037a	48 8d 84 24 a0
	01 00 00	 lea	 rax, QWORD PTR trailer$1[rsp]
  00382	48 8b f8	 mov	 rdi, rax
  00385	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0038a	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0038f	f3 aa		 rep stosb

; 456  :         STRLCPY( trailer, "END " );

  00391	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00397	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159403
  0039e	48 8d 8c 24 a0
	01 00 00	 lea	 rcx, QWORD PTR trailer$1[rsp]
  003a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 457  :         STRLCAT( trailer, HDL_NAME_HOST_INFO );

  003ac	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  003b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159404
  003b9	48 8d 8c 24 a0
	01 00 00	 lea	 rcx, QWORD PTR trailer$1[rsp]
  003c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 458  : 
; 459  :         if (strcmp( hostinfo.blkend, trailer ) != 0)

  003c7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_hostinfo
  003ce	48 05 60 02 00
	00		 add	 rax, 608		; 00000260H
  003d4	48 8d 94 24 a0
	01 00 00	 lea	 rdx, QWORD PTR trailer$1[rsp]
  003dc	48 8b c8	 mov	 rcx, rax
  003df	e8 00 00 00 00	 call	 strcmp
  003e4	85 c0		 test	 eax, eax
  003e6	0f 84 93 00 00
	00		 je	 $LN15@locate_hos

; 460  :         {
; 461  :             MSGBUF( msgbuf, "HOSTINFO trailer wrong; is %s, should be %s",

  003ec	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_hostinfo
  003f3	48 05 60 02 00
	00		 add	 rax, 608		; 00000260H
  003f9	48 8d 8c 24 a0
	01 00 00	 lea	 rcx, QWORD PTR trailer$1[rsp]
  00401	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00406	4c 8b c8	 mov	 r9, rax
  00409	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159406
  00410	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00415	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0041d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 462  :                 hostinfo.blkend, trailer );
; 463  :             WRMSG( HHC90000, "D", msgbuf );

  00423	b9 01 00 00 00	 mov	 ecx, 1
  00428	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0042e	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00436	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0043b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159407
  00442	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00447	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159408
  0044e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00453	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00458	41 b9 03 00 00
	00		 mov	 r9d, 3
  0045e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159409
  00465	ba cf 01 00 00	 mov	 edx, 463		; 000001cfH
  0046a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159410
  00471	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 464  :             ok = FALSE;

  00477	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR ok$[rsp], 0
$LN15@locate_hos:

; 465  :         }
; 466  :     }
; 467  : 
; 468  :     MSGBUF( msgbuf, "HOSTINFO @ 0x%p - %sVerified", &hostinfo, ok ? "" : "Not " );

  0047f	83 7c 24 48 00	 cmp	 DWORD PTR ok$[rsp], 0
  00484	74 0e		 je	 SHORT $LN20@locate_hos
  00486	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159411
  0048d	48 89 44 24 58	 mov	 QWORD PTR tv230[rsp], rax
  00492	eb 0c		 jmp	 SHORT $LN21@locate_hos
$LN20@locate_hos:
  00494	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159412
  0049b	48 89 44 24 58	 mov	 QWORD PTR tv230[rsp], rax
$LN21@locate_hos:
  004a0	48 8b 44 24 58	 mov	 rax, QWORD PTR tv230[rsp]
  004a5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004aa	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR __imp_hostinfo
  004b1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159413
  004b8	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  004bd	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  004c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 469  :     WRMSG( HHC90000, "D", msgbuf );

  004cb	b9 01 00 00 00	 mov	 ecx, 1
  004d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004d6	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  004de	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159414
  004ea	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159415
  004f6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004fb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00500	41 b9 03 00 00
	00		 mov	 r9d, 3
  00506	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159416
  0050d	ba d5 01 00 00	 mov	 edx, 469		; 000001d5H
  00512	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159417
  00519	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 470  : 
; 471  :     MSGBUF( msgbuf, "%-17s = %s", "sysname", pHostInfo->sysname );

  0051f	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00524	48 83 c0 30	 add	 rax, 48			; 00000030H
  00528	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0052d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159418
  00534	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159419
  0053b	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00540	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00548	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 472  :     WRMSG( HHC90000, "D", msgbuf );

  0054e	b9 01 00 00 00	 mov	 ecx, 1
  00553	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00559	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00561	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00566	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159420
  0056d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00572	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159421
  00579	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0057e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00583	41 b9 03 00 00
	00		 mov	 r9d, 3
  00589	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159422
  00590	ba d8 01 00 00	 mov	 edx, 472		; 000001d8H
  00595	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159423
  0059c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 473  : 
; 474  :     MSGBUF( msgbuf, "%-17s = %s", "nodename", pHostInfo->nodename );

  005a2	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  005a7	48 83 c0 70	 add	 rax, 112		; 00000070H
  005ab	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005b0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159424
  005b7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159425
  005be	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  005c3	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  005cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 475  :     WRMSG( HHC90000, "D", msgbuf );

  005d1	b9 01 00 00 00	 mov	 ecx, 1
  005d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005dc	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  005e4	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159426
  005f0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159427
  005fc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00601	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00606	41 b9 03 00 00
	00		 mov	 r9d, 3
  0060c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159428
  00613	ba db 01 00 00	 mov	 edx, 475		; 000001dbH
  00618	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159429
  0061f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 476  : 
; 477  :     MSGBUF( msgbuf, "%-17s = %s", "release", pHostInfo->release );

  00625	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  0062a	48 05 b0 00 00
	00		 add	 rax, 176		; 000000b0H
  00630	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00635	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159430
  0063c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159431
  00643	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00648	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00650	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 478  :     WRMSG( HHC90000, "D", msgbuf );

  00656	b9 01 00 00 00	 mov	 ecx, 1
  0065b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00661	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00669	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0066e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159432
  00675	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0067a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159433
  00681	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00686	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0068b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00691	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159434
  00698	ba de 01 00 00	 mov	 edx, 478		; 000001deH
  0069d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159435
  006a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 479  : 
; 480  :     MSGBUF( msgbuf, "%-17s = %s", "version", pHostInfo->version );

  006aa	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  006af	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  006b5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006ba	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159436
  006c1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159437
  006c8	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  006cd	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  006d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 481  :     WRMSG( HHC90000, "D", msgbuf );

  006db	b9 01 00 00 00	 mov	 ecx, 1
  006e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006e6	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  006ee	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159438
  006fa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159439
  00706	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0070b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00710	41 b9 03 00 00
	00		 mov	 r9d, 3
  00716	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159440
  0071d	ba e1 01 00 00	 mov	 edx, 481		; 000001e1H
  00722	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159441
  00729	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 482  : 
; 483  :     MSGBUF( msgbuf, "%-17s = %s", "machine", pHostInfo->machine );

  0072f	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00734	48 05 30 01 00
	00		 add	 rax, 304		; 00000130H
  0073a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0073f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159442
  00746	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159443
  0074d	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00752	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0075a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 484  :     WRMSG( HHC90000, "D", msgbuf );

  00760	b9 01 00 00 00	 mov	 ecx, 1
  00765	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0076b	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00773	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00778	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159444
  0077f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00784	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159445
  0078b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00790	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00795	41 b9 03 00 00
	00		 mov	 r9d, 3
  0079b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159446
  007a2	ba e4 01 00 00	 mov	 edx, 484		; 000001e4H
  007a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159447
  007ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 485  : 
; 486  :     MSGBUF( msgbuf, "%-17s = %s", "cpu_brand", pHostInfo->cpu_brand );

  007b4	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  007b9	48 05 70 01 00
	00		 add	 rax, 368		; 00000170H
  007bf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007c4	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159448
  007cb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159449
  007d2	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  007d7	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  007df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 487  :     WRMSG( HHC90000, "D", msgbuf );

  007e5	b9 01 00 00 00	 mov	 ecx, 1
  007ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007f0	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  007f8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  007fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159450
  00804	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00809	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159451
  00810	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00815	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0081a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00820	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159452
  00827	ba e7 01 00 00	 mov	 edx, 487		; 000001e7H
  0082c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159453
  00833	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 488  : 
; 489  :     MSGBUF( msgbuf, "%-17s = %s", "trycritsec_avail", pHostInfo->trycritsec_avail ? "YES" : "NO" );

  00839	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  0083e	83 b8 b0 01 00
	00 00		 cmp	 DWORD PTR [rax+432], 0
  00845	74 0e		 je	 SHORT $LN22@locate_hos
  00847	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159454
  0084e	48 89 44 24 60	 mov	 QWORD PTR tv408[rsp], rax
  00853	eb 0c		 jmp	 SHORT $LN23@locate_hos
$LN22@locate_hos:
  00855	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159455
  0085c	48 89 44 24 60	 mov	 QWORD PTR tv408[rsp], rax
$LN23@locate_hos:
  00861	48 8b 44 24 60	 mov	 rax, QWORD PTR tv408[rsp]
  00866	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0086b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159456
  00872	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159457
  00879	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0087e	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00886	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 490  :     WRMSG( HHC90000, "D", msgbuf );

  0088c	b9 01 00 00 00	 mov	 ecx, 1
  00891	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00897	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0089f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  008a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159458
  008ab	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159459
  008b7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008bc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008c1	41 b9 03 00 00
	00		 mov	 r9d, 3
  008c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159460
  008ce	ba ea 01 00 00	 mov	 edx, 490		; 000001eaH
  008d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159461
  008da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 491  : 
; 492  :     MSGBUF( msgbuf, "%-17s = %d", "maxfilesopen", pHostInfo->maxfilesopen );

  008e0	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  008e5	8b 80 b4 01 00
	00		 mov	 eax, DWORD PTR [rax+436]
  008eb	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  008ef	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159462
  008f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159463
  008fd	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00902	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0090a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 493  :     WRMSG( HHC90000, "D", msgbuf );

  00910	b9 01 00 00 00	 mov	 ecx, 1
  00915	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0091b	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00923	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00928	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159464
  0092f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00934	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159465
  0093b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00940	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00945	41 b9 03 00 00
	00		 mov	 r9d, 3
  0094b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159466
  00952	ba ed 01 00 00	 mov	 edx, 493		; 000001edH
  00957	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159467
  0095e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 494  : 
; 495  :     WRMSG( HHC90000, "D", "" );

  00964	b9 01 00 00 00	 mov	 ecx, 1
  00969	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0096f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159468
  00976	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0097b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159469
  00982	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00987	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159470
  0098e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00993	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00998	41 b9 03 00 00
	00		 mov	 r9d, 3
  0099e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159471
  009a5	ba ef 01 00 00	 mov	 edx, 495		; 000001efH
  009aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159472
  009b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 496  : 
; 497  :     MSGBUF( msgbuf, "%-17s = %3d", "num_procs", pHostInfo->num_procs );

  009b7	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  009bc	8b 80 b8 01 00
	00		 mov	 eax, DWORD PTR [rax+440]
  009c2	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  009c6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159473
  009cd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159474
  009d4	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  009d9	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  009e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 498  :     WRMSG( HHC90000, "D", msgbuf );

  009e7	b9 01 00 00 00	 mov	 ecx, 1
  009ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009f2	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  009fa	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  009ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159475
  00a06	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a0b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159476
  00a12	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a17	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a1c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a22	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159477
  00a29	ba f2 01 00 00	 mov	 edx, 498		; 000001f2H
  00a2e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159478
  00a35	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 499  : 
; 500  :     MSGBUF( msgbuf, "%-17s = %3d", "num_packages", pHostInfo->num_packages );

  00a3b	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00a40	8b 80 c4 01 00
	00		 mov	 eax, DWORD PTR [rax+452]
  00a46	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00a4a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159479
  00a51	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159480
  00a58	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00a5d	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00a65	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 501  :     WRMSG( HHC90000, "D", msgbuf );

  00a6b	b9 01 00 00 00	 mov	 ecx, 1
  00a70	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a76	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00a7e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a83	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159481
  00a8a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a8f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159482
  00a96	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a9b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00aa0	41 b9 03 00 00
	00		 mov	 r9d, 3
  00aa6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159483
  00aad	ba f5 01 00 00	 mov	 edx, 501		; 000001f5H
  00ab2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159484
  00ab9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 502  : 
; 503  :     MSGBUF( msgbuf, "%-17s = %3d", "num_physical_cpu", pHostInfo->num_physical_cpu );

  00abf	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00ac4	8b 80 bc 01 00
	00		 mov	 eax, DWORD PTR [rax+444]
  00aca	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00ace	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159485
  00ad5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159486
  00adc	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00ae1	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00ae9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 504  :     WRMSG( HHC90000, "D", msgbuf );

  00aef	b9 01 00 00 00	 mov	 ecx, 1
  00af4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00afa	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00b02	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00b07	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159487
  00b0e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b13	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159488
  00b1a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b1f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b24	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b2a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159489
  00b31	ba f8 01 00 00	 mov	 edx, 504		; 000001f8H
  00b36	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159490
  00b3d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 505  : 
; 506  :     MSGBUF( msgbuf, "%-17s = %3d", "num_logical_cpu", pHostInfo->num_logical_cpu );

  00b43	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00b48	8b 80 c0 01 00
	00		 mov	 eax, DWORD PTR [rax+448]
  00b4e	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00b52	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159491
  00b59	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159492
  00b60	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00b65	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00b6d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 507  :     WRMSG( HHC90000, "D", msgbuf );

  00b73	b9 01 00 00 00	 mov	 ecx, 1
  00b78	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b7e	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00b86	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00b8b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159493
  00b92	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b97	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159494
  00b9e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ba3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ba8	41 b9 03 00 00
	00		 mov	 r9d, 3
  00bae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159495
  00bb5	ba fb 01 00 00	 mov	 edx, 507		; 000001fbH
  00bba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159496
  00bc1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 508  : 
; 509  :     MSGBUF( msgbuf, "%-17s = %sHz", "bus_speed", fmt_decimal(pHostInfo->bus_speed) );

  00bc7	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00bcc	48 8b 88 e0 01
	00 00		 mov	 rcx, QWORD PTR [rax+480]
  00bd3	e8 00 00 00 00	 call	 fmt_decimal
  00bd8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00bdd	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159497
  00be4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159498
  00beb	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00bf0	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00bf8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 510  :     WRMSG( HHC90000, "D", msgbuf );

  00bfe	b9 01 00 00 00	 mov	 ecx, 1
  00c03	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c09	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00c11	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00c16	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159499
  00c1d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c22	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159500
  00c29	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c2e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c33	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c39	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159501
  00c40	ba fe 01 00 00	 mov	 edx, 510		; 000001feH
  00c45	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159502
  00c4c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 511  : 
; 512  :     MSGBUF( msgbuf, "%-17s = %sHz", "cpu_speed", fmt_decimal(pHostInfo->cpu_speed) );

  00c52	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00c57	48 8b 88 e8 01
	00 00		 mov	 rcx, QWORD PTR [rax+488]
  00c5e	e8 00 00 00 00	 call	 fmt_decimal
  00c63	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c68	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159503
  00c6f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159504
  00c76	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00c7b	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00c83	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 513  :     WRMSG( HHC90000, "D", msgbuf );

  00c89	b9 01 00 00 00	 mov	 ecx, 1
  00c8e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c94	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00c9c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00ca1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159505
  00ca8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00cad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159506
  00cb4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00cb9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00cbe	41 b9 03 00 00
	00		 mov	 r9d, 3
  00cc4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159507
  00ccb	ba 01 02 00 00	 mov	 edx, 513		; 00000201H
  00cd0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159508
  00cd7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 514  : 
; 515  :     MSGBUF( msgbuf, "%-17s = %s", "vector_unit", pHostInfo->vector_unit ? "YES" : " NO" );

  00cdd	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00ce2	83 b8 c8 01 00
	00 00		 cmp	 DWORD PTR [rax+456], 0
  00ce9	74 0e		 je	 SHORT $LN24@locate_hos
  00ceb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159509
  00cf2	48 89 44 24 68	 mov	 QWORD PTR tv584[rsp], rax
  00cf7	eb 0c		 jmp	 SHORT $LN25@locate_hos
$LN24@locate_hos:
  00cf9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159510
  00d00	48 89 44 24 68	 mov	 QWORD PTR tv584[rsp], rax
$LN25@locate_hos:
  00d05	48 8b 44 24 68	 mov	 rax, QWORD PTR tv584[rsp]
  00d0a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d0f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159511
  00d16	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159512
  00d1d	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00d22	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00d2a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 516  :     WRMSG( HHC90000, "D", msgbuf );

  00d30	b9 01 00 00 00	 mov	 ecx, 1
  00d35	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00d3b	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00d43	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00d48	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159513
  00d4f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00d54	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159514
  00d5b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00d60	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d65	41 b9 03 00 00
	00		 mov	 r9d, 3
  00d6b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159515
  00d72	ba 04 02 00 00	 mov	 edx, 516		; 00000204H
  00d77	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159516
  00d7e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 517  : 
; 518  :     MSGBUF( msgbuf, "%-17s = %s", "fp_unit", pHostInfo->fp_unit ? "YES" : " NO" );

  00d84	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00d89	83 b8 cc 01 00
	00 00		 cmp	 DWORD PTR [rax+460], 0
  00d90	74 0e		 je	 SHORT $LN26@locate_hos
  00d92	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159517
  00d99	48 89 44 24 70	 mov	 QWORD PTR tv602[rsp], rax
  00d9e	eb 0c		 jmp	 SHORT $LN27@locate_hos
$LN26@locate_hos:
  00da0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159518
  00da7	48 89 44 24 70	 mov	 QWORD PTR tv602[rsp], rax
$LN27@locate_hos:
  00dac	48 8b 44 24 70	 mov	 rax, QWORD PTR tv602[rsp]
  00db1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00db6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159519
  00dbd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159520
  00dc4	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00dc9	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00dd1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 519  :     WRMSG( HHC90000, "D", msgbuf );

  00dd7	b9 01 00 00 00	 mov	 ecx, 1
  00ddc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00de2	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00dea	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00def	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159521
  00df6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00dfb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159522
  00e02	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00e07	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e0c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00e12	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159523
  00e19	ba 07 02 00 00	 mov	 edx, 519		; 00000207H
  00e1e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159524
  00e25	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 520  : 
; 521  :     MSGBUF( msgbuf, "%-17s = %s", "cpu_64bits", pHostInfo->cpu_64bits ? "YES" : " NO" );

  00e2b	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00e30	83 b8 d0 01 00
	00 00		 cmp	 DWORD PTR [rax+464], 0
  00e37	74 0e		 je	 SHORT $LN28@locate_hos
  00e39	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159525
  00e40	48 89 44 24 78	 mov	 QWORD PTR tv652[rsp], rax
  00e45	eb 0c		 jmp	 SHORT $LN29@locate_hos
$LN28@locate_hos:
  00e47	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159526
  00e4e	48 89 44 24 78	 mov	 QWORD PTR tv652[rsp], rax
$LN29@locate_hos:
  00e53	48 8b 44 24 78	 mov	 rax, QWORD PTR tv652[rsp]
  00e58	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e5d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159527
  00e64	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159528
  00e6b	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00e70	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00e78	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 522  :     WRMSG( HHC90000, "D", msgbuf );

  00e7e	b9 01 00 00 00	 mov	 ecx, 1
  00e83	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00e89	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00e91	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00e96	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159529
  00e9d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ea2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159530
  00ea9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00eae	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00eb3	41 b9 03 00 00
	00		 mov	 r9d, 3
  00eb9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159531
  00ec0	ba 0a 02 00 00	 mov	 edx, 522		; 0000020aH
  00ec5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159532
  00ecc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 523  : 
; 524  :     MSGBUF( msgbuf, "%-17s = %s", "cpu_aes_extns", pHostInfo->cpu_aes_extns ? "YES" : " NO" );

  00ed2	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00ed7	83 b8 d4 01 00
	00 00		 cmp	 DWORD PTR [rax+468], 0
  00ede	74 11		 je	 SHORT $LN30@locate_hos
  00ee0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159533
  00ee7	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv670[rsp], rax
  00eef	eb 0f		 jmp	 SHORT $LN31@locate_hos
$LN30@locate_hos:
  00ef1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159534
  00ef8	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv670[rsp], rax
$LN31@locate_hos:
  00f00	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv670[rsp]
  00f08	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00f0d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159535
  00f14	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159536
  00f1b	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00f20	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00f28	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 525  :     WRMSG( HHC90000, "D", msgbuf );

  00f2e	b9 01 00 00 00	 mov	 ecx, 1
  00f33	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00f39	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00f41	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00f46	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159537
  00f4d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00f52	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159538
  00f59	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00f5e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00f63	41 b9 03 00 00
	00		 mov	 r9d, 3
  00f69	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159539
  00f70	ba 0d 02 00 00	 mov	 edx, 525		; 0000020dH
  00f75	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159540
  00f7c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 526  : 
; 527  :     WRMSG( HHC90000, "D", "" );

  00f82	b9 01 00 00 00	 mov	 ecx, 1
  00f87	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00f8d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159541
  00f94	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00f99	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159542
  00fa0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00fa5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159543
  00fac	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00fb1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00fb6	41 b9 03 00 00
	00		 mov	 r9d, 3
  00fbc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159544
  00fc3	ba 0f 02 00 00	 mov	 edx, 527		; 0000020fH
  00fc8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159545
  00fcf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 528  : 
; 529  :     MSGBUF( msgbuf, "%-17s = %s", "valid_cache_nums", pHostInfo->valid_cache_nums ? "YES" : " NO" );

  00fd5	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  00fda	83 b8 d8 01 00
	00 00		 cmp	 DWORD PTR [rax+472], 0
  00fe1	74 11		 je	 SHORT $LN32@locate_hos
  00fe3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159546
  00fea	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv698[rsp], rax
  00ff2	eb 0f		 jmp	 SHORT $LN33@locate_hos
$LN32@locate_hos:
  00ff4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159547
  00ffb	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv698[rsp], rax
$LN33@locate_hos:
  01003	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv698[rsp]
  0100b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01010	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159548
  01017	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159549
  0101e	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  01023	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0102b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 530  :     WRMSG( HHC90000, "D", msgbuf );

  01031	b9 01 00 00 00	 mov	 ecx, 1
  01036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0103c	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  01044	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159550
  01050	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159551
  0105c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01061	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01066	41 b9 03 00 00
	00		 mov	 r9d, 3
  0106c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159552
  01073	ba 12 02 00 00	 mov	 edx, 530		; 00000212H
  01078	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159553
  0107f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 531  : 
; 532  :     MSGBUF( msgbuf, "%-17s = %5"PRIu64" B", "cachelinesz", pHostInfo->cachelinesz );

  01085	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  0108a	48 8b 80 f0 01
	00 00		 mov	 rax, QWORD PTR [rax+496]
  01091	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01096	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159554
  0109d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159555
  010a4	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  010a9	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  010b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 533  :     WRMSG( HHC90000, "D", msgbuf );

  010b7	b9 01 00 00 00	 mov	 ecx, 1
  010bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  010c2	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  010ca	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  010cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159556
  010d6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  010db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159557
  010e2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  010e7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  010ec	41 b9 03 00 00
	00		 mov	 r9d, 3
  010f2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159558
  010f9	ba 15 02 00 00	 mov	 edx, 533		; 00000215H
  010fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159559
  01105	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 534  : 
; 535  :     if ( pHostInfo->L1Dcachesz != 0 )

  0110b	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  01110	48 83 b8 00 02
	00 00 00	 cmp	 QWORD PTR [rax+512], 0
  01118	0f 84 9a 00 00
	00		 je	 $LN16@locate_hos

; 536  :     {
; 537  :         MSGBUF( msgbuf, "%-17s = %siB", "L1Dcachesz", fmt_memsize(pHostInfo->L1Dcachesz,fmt_mem,sizeof(fmt_mem)) );

  0111e	41 b8 08 00 00
	00		 mov	 r8d, 8
  01124	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR fmt_mem$[rsp]
  0112c	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  01131	48 8b 88 00 02
	00 00		 mov	 rcx, QWORD PTR [rax+512]
  01138	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmt_memsize
  0113e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01143	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159561
  0114a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159562
  01151	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  01156	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0115e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 538  :         WRMSG( HHC90000, "D", msgbuf );

  01164	b9 01 00 00 00	 mov	 ecx, 1
  01169	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0116f	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  01177	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0117c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159563
  01183	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01188	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159564
  0118f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01194	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01199	41 b9 03 00 00
	00		 mov	 r9d, 3
  0119f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159565
  011a6	ba 1a 02 00 00	 mov	 edx, 538		; 0000021aH
  011ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159566
  011b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN16@locate_hos:

; 539  :     }
; 540  : 
; 541  :     if ( pHostInfo->L1Icachesz != 0 )

  011b8	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  011bd	48 83 b8 f8 01
	00 00 00	 cmp	 QWORD PTR [rax+504], 0
  011c5	0f 84 9a 00 00
	00		 je	 $LN17@locate_hos

; 542  :     {
; 543  :         MSGBUF( msgbuf, "%-17s = %siB", "L1Icachesz", fmt_memsize(pHostInfo->L1Icachesz,fmt_mem,sizeof(fmt_mem)) );

  011cb	41 b8 08 00 00
	00		 mov	 r8d, 8
  011d1	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR fmt_mem$[rsp]
  011d9	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  011de	48 8b 88 f8 01
	00 00		 mov	 rcx, QWORD PTR [rax+504]
  011e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmt_memsize
  011eb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  011f0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159568
  011f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159569
  011fe	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  01203	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0120b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 544  :         WRMSG( HHC90000, "D", msgbuf );

  01211	b9 01 00 00 00	 mov	 ecx, 1
  01216	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0121c	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  01224	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01229	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159570
  01230	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01235	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159571
  0123c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01241	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01246	41 b9 03 00 00
	00		 mov	 r9d, 3
  0124c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159572
  01253	ba 20 02 00 00	 mov	 edx, 544		; 00000220H
  01258	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159573
  0125f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@locate_hos:

; 545  :     }
; 546  : 
; 547  :     if ( pHostInfo->L1Ucachesz != 0 )

  01265	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  0126a	48 83 b8 08 02
	00 00 00	 cmp	 QWORD PTR [rax+520], 0
  01272	0f 84 9a 00 00
	00		 je	 $LN18@locate_hos

; 548  :     {
; 549  :         MSGBUF( msgbuf, "%-17s = %siB", "L1Ucachesz", fmt_memsize(pHostInfo->L1Ucachesz,fmt_mem,sizeof(fmt_mem)) );

  01278	41 b8 08 00 00
	00		 mov	 r8d, 8
  0127e	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR fmt_mem$[rsp]
  01286	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  0128b	48 8b 88 08 02
	00 00		 mov	 rcx, QWORD PTR [rax+520]
  01292	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmt_memsize
  01298	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0129d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159575
  012a4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159576
  012ab	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  012b0	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  012b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 550  :         WRMSG( HHC90000, "D", msgbuf );

  012be	b9 01 00 00 00	 mov	 ecx, 1
  012c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  012c9	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  012d1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  012d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159577
  012dd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  012e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159578
  012e9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  012ee	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  012f3	41 b9 03 00 00
	00		 mov	 r9d, 3
  012f9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159579
  01300	ba 26 02 00 00	 mov	 edx, 550		; 00000226H
  01305	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159580
  0130c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN18@locate_hos:

; 551  :     }
; 552  : 
; 553  :     MSGBUF( msgbuf, "%-17s = %siB", "L2cachesz", fmt_memsize(pHostInfo->L2cachesz,fmt_mem,sizeof(fmt_mem)) );

  01312	41 b8 08 00 00
	00		 mov	 r8d, 8
  01318	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR fmt_mem$[rsp]
  01320	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  01325	48 8b 88 10 02
	00 00		 mov	 rcx, QWORD PTR [rax+528]
  0132c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmt_memsize
  01332	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01337	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159581
  0133e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159582
  01345	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0134a	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  01352	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 554  :     WRMSG( HHC90000, "D", msgbuf );

  01358	b9 01 00 00 00	 mov	 ecx, 1
  0135d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01363	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0136b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01370	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159583
  01377	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0137c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159584
  01383	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01388	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0138d	41 b9 03 00 00
	00		 mov	 r9d, 3
  01393	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159585
  0139a	ba 2a 02 00 00	 mov	 edx, 554		; 0000022aH
  0139f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159586
  013a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 555  : 
; 556  :     MSGBUF( msgbuf, "%-17s = %siB", "L3cachesz", fmt_memsize(pHostInfo->L3cachesz,fmt_mem,sizeof(fmt_mem)) );

  013ac	41 b8 08 00 00
	00		 mov	 r8d, 8
  013b2	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR fmt_mem$[rsp]
  013ba	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  013bf	48 8b 88 18 02
	00 00		 mov	 rcx, QWORD PTR [rax+536]
  013c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmt_memsize
  013cc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  013d1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159587
  013d8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159588
  013df	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  013e4	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  013ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 557  :     WRMSG( HHC90000, "D", msgbuf );

  013f2	b9 01 00 00 00	 mov	 ecx, 1
  013f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  013fd	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  01405	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0140a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159589
  01411	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01416	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159590
  0141d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01422	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01427	41 b9 03 00 00
	00		 mov	 r9d, 3
  0142d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159591
  01434	ba 2d 02 00 00	 mov	 edx, 557		; 0000022dH
  01439	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159592
  01440	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 558  : 
; 559  :     WRMSG( HHC90000, "D", "" );

  01446	b9 01 00 00 00	 mov	 ecx, 1
  0144b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01451	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159593
  01458	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0145d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159594
  01464	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01469	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159595
  01470	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01475	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0147a	41 b9 03 00 00
	00		 mov	 r9d, 3
  01480	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159596
  01487	ba 2f 02 00 00	 mov	 edx, 559		; 0000022fH
  0148c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159597
  01493	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 560  : 
; 561  :     MSGBUF( msgbuf, "%-17s = %siB", "hostpagesz", fmt_memsize(pHostInfo->hostpagesz,fmt_mem,sizeof(fmt_mem)) );

  01499	41 b8 08 00 00
	00		 mov	 r8d, 8
  0149f	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR fmt_mem$[rsp]
  014a7	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  014ac	48 8b 88 20 02
	00 00		 mov	 rcx, QWORD PTR [rax+544]
  014b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmt_memsize
  014b9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  014be	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159598
  014c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159599
  014cc	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  014d1	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  014d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 562  :     WRMSG( HHC90000, "D", msgbuf );

  014df	b9 01 00 00 00	 mov	 ecx, 1
  014e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  014ea	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  014f2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  014f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159600
  014fe	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01503	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159601
  0150a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0150f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01514	41 b9 03 00 00
	00		 mov	 r9d, 3
  0151a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159602
  01521	ba 32 02 00 00	 mov	 edx, 562		; 00000232H
  01526	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159603
  0152d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 563  : 
; 564  :     MSGBUF( msgbuf, "%-17s = %siB", "AllocGran", fmt_memsize(pHostInfo->AllocationGranularity,fmt_mem,sizeof(fmt_mem)) );

  01533	41 b8 08 00 00
	00		 mov	 r8d, 8
  01539	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR fmt_mem$[rsp]
  01541	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  01546	48 8b 88 28 02
	00 00		 mov	 rcx, QWORD PTR [rax+552]
  0154d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmt_memsize
  01553	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01558	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159604
  0155f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159605
  01566	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0156b	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  01573	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 565  :     WRMSG( HHC90000, "D", msgbuf );

  01579	b9 01 00 00 00	 mov	 ecx, 1
  0157e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01584	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0158c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01591	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159606
  01598	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0159d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159607
  015a4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  015a9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  015ae	41 b9 03 00 00
	00		 mov	 r9d, 3
  015b4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159608
  015bb	ba 35 02 00 00	 mov	 edx, 565		; 00000235H
  015c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159609
  015c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 566  : 
; 567  :     WRMSG( HHC90000, "D", "" );

  015cd	b9 01 00 00 00	 mov	 ecx, 1
  015d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  015d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159610
  015df	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  015e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159611
  015eb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  015f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159612
  015f7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  015fc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01601	41 b9 03 00 00
	00		 mov	 r9d, 3
  01607	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159613
  0160e	ba 37 02 00 00	 mov	 edx, 567		; 00000237H
  01613	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159614
  0161a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 568  : 
; 569  :     MSGBUF( msgbuf, "%-17s = %siB", "TotalPhys", fmt_memsize(pHostInfo->TotalPhys,fmt_mem,sizeof(fmt_mem)) );

  01620	41 b8 08 00 00
	00		 mov	 r8d, 8
  01626	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR fmt_mem$[rsp]
  0162e	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  01633	48 8b 88 30 02
	00 00		 mov	 rcx, QWORD PTR [rax+560]
  0163a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmt_memsize
  01640	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01645	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159615
  0164c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159616
  01653	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  01658	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  01660	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 570  :     WRMSG( HHC90000, "D", msgbuf );

  01666	b9 01 00 00 00	 mov	 ecx, 1
  0166b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01671	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  01679	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0167e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159617
  01685	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0168a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159618
  01691	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01696	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0169b	41 b9 03 00 00
	00		 mov	 r9d, 3
  016a1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159619
  016a8	ba 3a 02 00 00	 mov	 edx, 570		; 0000023aH
  016ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159620
  016b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 571  : 
; 572  :     MSGBUF( msgbuf, "%-17s = %siB", "AvailPhys", fmt_memsize(pHostInfo->AvailPhys,fmt_mem,sizeof(fmt_mem)) );

  016ba	41 b8 08 00 00
	00		 mov	 r8d, 8
  016c0	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR fmt_mem$[rsp]
  016c8	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  016cd	48 8b 88 38 02
	00 00		 mov	 rcx, QWORD PTR [rax+568]
  016d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmt_memsize
  016da	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  016df	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159621
  016e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159622
  016ed	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  016f2	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  016fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 573  :     WRMSG( HHC90000, "D", msgbuf );

  01700	b9 01 00 00 00	 mov	 ecx, 1
  01705	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0170b	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  01713	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01718	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159623
  0171f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01724	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159624
  0172b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01730	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01735	41 b9 03 00 00
	00		 mov	 r9d, 3
  0173b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159625
  01742	ba 3d 02 00 00	 mov	 edx, 573		; 0000023dH
  01747	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159626
  0174e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 574  : 
; 575  :     MSGBUF( msgbuf, "%-17s = %siB", "TotalPageFile", fmt_memsize(pHostInfo->TotalPageFile,fmt_mem,sizeof(fmt_mem)) );

  01754	41 b8 08 00 00
	00		 mov	 r8d, 8
  0175a	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR fmt_mem$[rsp]
  01762	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  01767	48 8b 88 40 02
	00 00		 mov	 rcx, QWORD PTR [rax+576]
  0176e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmt_memsize
  01774	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01779	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159627
  01780	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159628
  01787	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0178c	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  01794	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 576  :     WRMSG( HHC90000, "D", msgbuf );

  0179a	b9 01 00 00 00	 mov	 ecx, 1
  0179f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  017a5	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  017ad	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  017b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159629
  017b9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  017be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159630
  017c5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  017ca	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  017cf	41 b9 03 00 00
	00		 mov	 r9d, 3
  017d5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159631
  017dc	ba 40 02 00 00	 mov	 edx, 576		; 00000240H
  017e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159632
  017e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 577  : 
; 578  :     MSGBUF( msgbuf, "%-17s = %siB", "AvailPageFile", fmt_memsize(pHostInfo->AvailPageFile,fmt_mem,sizeof(fmt_mem)) );

  017ee	41 b8 08 00 00
	00		 mov	 r8d, 8
  017f4	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR fmt_mem$[rsp]
  017fc	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  01801	48 8b 88 48 02
	00 00		 mov	 rcx, QWORD PTR [rax+584]
  01808	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmt_memsize
  0180e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01813	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159633
  0181a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159634
  01821	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  01826	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0182e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 579  :     WRMSG( HHC90000, "D", msgbuf );

  01834	b9 01 00 00 00	 mov	 ecx, 1
  01839	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0183f	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  01847	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0184c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159635
  01853	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01858	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159636
  0185f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01864	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01869	41 b9 03 00 00
	00		 mov	 r9d, 3
  0186f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159637
  01876	ba 43 02 00 00	 mov	 edx, 579		; 00000243H
  0187b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159638
  01882	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 580  : 
; 581  :     MSGBUF( msgbuf, "%-17s = %siB", "TotalVirtual", fmt_memsize(pHostInfo->TotalVirtual,fmt_mem,sizeof(fmt_mem)) );

  01888	41 b8 08 00 00
	00		 mov	 r8d, 8
  0188e	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR fmt_mem$[rsp]
  01896	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  0189b	48 8b 88 50 02
	00 00		 mov	 rcx, QWORD PTR [rax+592]
  018a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmt_memsize
  018a8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  018ad	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159639
  018b4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159640
  018bb	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  018c0	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  018c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 582  :     WRMSG( HHC90000, "D", msgbuf );

  018ce	b9 01 00 00 00	 mov	 ecx, 1
  018d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  018d9	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  018e1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  018e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159641
  018ed	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  018f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159642
  018f9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  018fe	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01903	41 b9 03 00 00
	00		 mov	 r9d, 3
  01909	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159643
  01910	ba 46 02 00 00	 mov	 edx, 582		; 00000246H
  01915	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159644
  0191c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 583  : 
; 584  :     MSGBUF( msgbuf, "%-17s = %siB", "AvailVirtual", fmt_memsize(pHostInfo->AvailVirtual,fmt_mem,sizeof(fmt_mem)) );

  01922	41 b8 08 00 00
	00		 mov	 r8d, 8
  01928	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR fmt_mem$[rsp]
  01930	48 8b 44 24 40	 mov	 rax, QWORD PTR pHostInfo$[rsp]
  01935	48 8b 88 58 02
	00 00		 mov	 rcx, QWORD PTR [rax+600]
  0193c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fmt_memsize
  01942	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01947	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159645
  0194e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159646
  01955	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0195a	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  01962	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 585  :     WRMSG( HHC90000, "D", msgbuf );

  01968	b9 01 00 00 00	 mov	 ecx, 1
  0196d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01973	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0197b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01980	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159647
  01987	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0198c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159648
  01993	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01998	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0199d	41 b9 03 00 00
	00		 mov	 r9d, 3
  019a3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159649
  019aa	ba 49 02 00 00	 mov	 edx, 585		; 00000249H
  019af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159650
  019b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 586  : 
; 587  :     return rc;

  019bc	8b 44 24 4c	 mov	 eax, DWORD PTR rc$[rsp]

; 588  : }

  019c0	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  019c8	48 33 cc	 xor	 rcx, rsp
  019cb	e8 00 00 00 00	 call	 __security_check_cookie
  019d0	48 81 c4 10 02
	00 00		 add	 rsp, 528		; 00000210H
  019d7	5f		 pop	 rdi
  019d8	c3		 ret	 0
locate_hostinfo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscloc.c
_TEXT	SEGMENT
cpu$ = 64
length$ = 68
regs$ = 72
ok$1 = 80
start$ = 84
x$2 = 88
c$3 = 92
c$4 = 93
start_adj$ = 96
x$5 = 100
rc$ = 104
loc$6 = 112
tv293 = 120
tbl$ = 128
blknam$7 = 136
trailer$8 = 152
header$9 = 184
version$10 = 216
msgbuf$ = 256
__$ArrayPad$ = 512
argc$ = 544
argv$ = 552
cmdline$ = 560
locate_regs PROC

; 246  : {

$LN23:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 81 ec 10 02
	00 00		 sub	 rsp, 528		; 00000210H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 247  :     int      rc             = 0;

  00028	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0

; 248  :     int      cpu            = sysblk.pcpu;

  00030	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00037	8b 80 54 13 00
	00		 mov	 eax, DWORD PTR [rax+4948]
  0003d	89 44 24 40	 mov	 DWORD PTR cpu$[rsp], eax

; 249  :     char     msgbuf[256];
; 250  :     int      start          = 0;

  00041	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR start$[rsp], 0

; 251  :     int      start_adj      = 0;

  00049	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR start_adj$[rsp], 0

; 252  :     int      length         = 512;

  00051	c7 44 24 44 00
	02 00 00	 mov	 DWORD PTR length$[rsp], 512 ; 00000200H

; 253  :     REGS*    regs           = sysblk.regs[ cpu ];

  00059	48 63 44 24 40	 movsxd	 rax, DWORD PTR cpu$[rsp]
  0005e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00065	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  0006d	48 89 44 24 48	 mov	 QWORD PTR regs$[rsp], rax

; 254  :     u_char*  tbl            = (u_char*) regs;

  00072	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00077	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tbl$[rsp], rax
$LN4@locate_reg:

; 255  : 
; 256  :     UNREFERENCED( cmdline );

  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 fa		 jne	 SHORT $LN4@locate_reg

; 257  : 
; 258  :     if (argc == 2)

  00085	83 bc 24 20 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0008d	0f 85 8f 05 00
	00		 jne	 $LN5@locate_reg

; 259  :     {
; 260  :         int ok = TRUE;

  00093	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR ok$1[rsp], 1

; 261  :         U64 loc = CSWAP64( regs->blkloc );

  0009b	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  000a0	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  000a4	e8 00 00 00 00	 call	 _byteswap_uint64
  000a9	48 89 44 24 70	 mov	 QWORD PTR loc$6[rsp], rax

; 262  : 
; 263  :         char    blknam[ sizeof( regs->blknam )];
; 264  :         MSGBUF( blknam, "%-4.4s_%s%02X", HDL_NAME_REGS, PTYPSTR( cpu ), cpu );

  000ae	48 63 44 24 40	 movsxd	 rax, DWORD PTR cpu$[rsp]
  000b3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000ba	0f b6 8c 01 48
	0b 00 00	 movzx	 ecx, BYTE PTR [rcx+rax+2888]
  000c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptyp2short
  000c8	8b 4c 24 40	 mov	 ecx, DWORD PTR cpu$[rsp]
  000cc	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  000d0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159286
  000dc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159287
  000e3	ba 10 00 00 00	 mov	 edx, 16
  000e8	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR blknam$7[rsp]
  000f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 265  : 
; 266  :         if (!regs)

  000f6	48 83 7c 24 48
	00		 cmp	 QWORD PTR regs$[rsp], 0
  000fc	75 5d		 jne	 SHORT $LN6@locate_reg

; 267  :         {
; 268  :             WRMSG( HHC90000, "D", "REGS not assigned" );

  000fe	b9 01 00 00 00	 mov	 ecx, 1
  00103	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159289
  00110	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159290
  0011c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159291
  00128	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0012d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00132	41 b9 03 00 00
	00		 mov	 r9d, 3
  00138	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159292
  0013f	ba 0c 01 00 00	 mov	 edx, 268		; 0000010cH
  00144	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159293
  0014b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 269  :             return -1;

  00151	b8 ff ff ff ff	 mov	 eax, -1
  00156	e9 21 06 00 00	 jmp	 $LN1@locate_reg
$LN6@locate_reg:

; 270  :         }
; 271  : 
; 272  :         /* verify head, tail, length and address */
; 273  : 
; 274  :         if (loc != (U64)((uintptr_t) regs ))

  0015b	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00160	48 39 44 24 70	 cmp	 QWORD PTR loc$6[rsp], rax
  00165	0f 84 8f 00 00
	00		 je	 $LN7@locate_reg

; 275  :         {
; 276  :             MSGBUF( msgbuf, "REGS[%2.2X] moved; was 0x%16.16"PRIX64", is 0x%p",

  0016b	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00170	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00175	48 8b 44 24 70	 mov	 rax, QWORD PTR loc$6[rsp]
  0017a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0017f	44 8b 4c 24 40	 mov	 r9d, DWORD PTR cpu$[rsp]
  00184	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159295
  0018b	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00190	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00198	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 277  :                 cpu, loc, regs );
; 278  :             WRMSG( HHC90000, "D", msgbuf );

  0019e	b9 01 00 00 00	 mov	 ecx, 1
  001a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001a9	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  001b1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159296
  001bd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159297
  001c9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ce	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001d3	41 b9 03 00 00
	00		 mov	 r9d, 3
  001d9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159298
  001e0	ba 16 01 00 00	 mov	 edx, 278		; 00000116H
  001e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159299
  001ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 279  :             ok = FALSE;

  001f2	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR ok$1[rsp], 0
$LN7@locate_reg:

; 280  :         }
; 281  : 
; 282  :         if (CSWAP32( regs->blksiz ) != (U32) sizeof( REGS ))

  001fa	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  001ff	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00202	e8 00 00 00 00	 call	 _byteswap_ulong
  00207	3d 80 60 01 00	 cmp	 eax, 90240		; 00016080H
  0020c	0f 84 94 00 00
	00		 je	 $LN8@locate_reg

; 283  :         {
; 284  :             MSGBUF( msgbuf, "REGS[%2.2X] size wrong; is %u, should be %u",

  00212	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  00217	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  0021a	e8 00 00 00 00	 call	 _byteswap_ulong
  0021f	c7 44 24 28 80
	60 01 00	 mov	 DWORD PTR [rsp+40], 90240 ; 00016080H
  00227	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0022b	44 8b 4c 24 40	 mov	 r9d, DWORD PTR cpu$[rsp]
  00230	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159301
  00237	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0023c	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00244	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 285  :                 cpu, CSWAP32( regs->blksiz ), (U32) sizeof( REGS ));
; 286  :             WRMSG( HHC90000, "D", msgbuf );

  0024a	b9 01 00 00 00	 mov	 ecx, 1
  0024f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00255	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0025d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00262	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159302
  00269	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0026e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159303
  00275	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0027a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0027f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00285	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159304
  0028c	ba 1e 01 00 00	 mov	 edx, 286		; 0000011eH
  00291	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159305
  00298	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 287  :             ok = FALSE;

  0029e	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR ok$1[rsp], 0
$LN8@locate_reg:

; 288  :         }
; 289  : 
; 290  :         /* verify header */
; 291  :         {
; 292  :             char     header[32];
; 293  :             memset(  header, SPACE, sizeof( header ));

  002a6	48 8d 84 24 b8
	00 00 00	 lea	 rax, QWORD PTR header$9[rsp]
  002ae	48 8b f8	 mov	 rdi, rax
  002b1	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  002b6	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  002bb	f3 aa		 rep stosb

; 294  :             STRLCPY( header, blknam );

  002bd	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  002c3	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR blknam$7[rsp]
  002cb	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR header$9[rsp]
  002d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 295  : 
; 296  :             if (strcmp( regs->blknam, header ) != 0)

  002d9	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  002de	48 8d 94 24 b8
	00 00 00	 lea	 rdx, QWORD PTR header$9[rsp]
  002e6	48 8b c8	 mov	 rcx, rax
  002e9	e8 00 00 00 00	 call	 strcmp
  002ee	85 c0		 test	 eax, eax
  002f0	0f 84 92 00 00
	00		 je	 $LN9@locate_reg

; 297  :             {
; 298  :                 MSGBUF( msgbuf, "REGS[%2.2X] header wrong; is \"%s\", should be \"%s\"",

  002f6	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  002fb	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR header$9[rsp]
  00303	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00308	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0030d	44 8b 4c 24 40	 mov	 r9d, DWORD PTR cpu$[rsp]
  00312	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159307
  00319	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0031e	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00326	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 299  :                     cpu, regs->blknam, header );
; 300  :                 WRMSG( HHC90000, "D", msgbuf );

  0032c	b9 01 00 00 00	 mov	 ecx, 1
  00331	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00337	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0033f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00344	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159308
  0034b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00350	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159309
  00357	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0035c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00361	41 b9 03 00 00
	00		 mov	 r9d, 3
  00367	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159310
  0036e	ba 2c 01 00 00	 mov	 edx, 300		; 0000012cH
  00373	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159311
  0037a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 301  :                 ok = FALSE;

  00380	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR ok$1[rsp], 0
$LN9@locate_reg:

; 302  :             }
; 303  :         }
; 304  : 
; 305  :         /* verify version */
; 306  :         {
; 307  :             char     version[32];
; 308  :             memset(  version, SPACE, sizeof( version ));

  00388	48 8d 84 24 d8
	00 00 00	 lea	 rax, QWORD PTR version$10[rsp]
  00390	48 8b f8	 mov	 rdi, rax
  00393	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00398	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0039d	f3 aa		 rep stosb

; 309  :             STRLCPY( version, HDL_VERS_REGS );

  0039f	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  003a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159312
  003ac	48 8d 8c 24 d8
	00 00 00	 lea	 rcx, QWORD PTR version$10[rsp]
  003b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 310  : 
; 311  :             if (strcmp( regs->blkver, version ) != 0)

  003ba	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  003bf	48 83 c0 10	 add	 rax, 16
  003c3	48 8d 94 24 d8
	00 00 00	 lea	 rdx, QWORD PTR version$10[rsp]
  003cb	48 8b c8	 mov	 rcx, rax
  003ce	e8 00 00 00 00	 call	 strcmp
  003d3	85 c0		 test	 eax, eax
  003d5	0f 84 96 00 00
	00		 je	 $LN10@locate_reg

; 312  :             {
; 313  :                 MSGBUF( msgbuf, "REGS[%2.2X] version wrong; is \"%s\", should be \"%s\"",

  003db	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  003e0	48 83 c0 10	 add	 rax, 16
  003e4	48 8d 8c 24 d8
	00 00 00	 lea	 rcx, QWORD PTR version$10[rsp]
  003ec	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003f1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003f6	44 8b 4c 24 40	 mov	 r9d, DWORD PTR cpu$[rsp]
  003fb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159314
  00402	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00407	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0040f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 314  :                     cpu, regs->blkver, version );
; 315  :                 WRMSG( HHC90000, "D", msgbuf );

  00415	b9 01 00 00 00	 mov	 ecx, 1
  0041a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00420	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00428	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0042d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159315
  00434	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00439	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159316
  00440	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00445	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0044a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00450	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159317
  00457	ba 3b 01 00 00	 mov	 edx, 315		; 0000013bH
  0045c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159318
  00463	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 316  :                 ok = FALSE;

  00469	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR ok$1[rsp], 0
$LN10@locate_reg:

; 317  :             }
; 318  :         }
; 319  : 
; 320  :         /* verify trailer */
; 321  :         {
; 322  :             char     trailer[32];
; 323  :             memset(  trailer, SPACE, sizeof( trailer ));

  00471	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR trailer$8[rsp]
  00479	48 8b f8	 mov	 rdi, rax
  0047c	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00481	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00486	f3 aa		 rep stosb

; 324  :             STRLCPY( trailer, "END " );

  00488	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  0048e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159319
  00495	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR trailer$8[rsp]
  0049d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 325  :             STRLCAT( trailer, blknam );

  004a3	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  004a9	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR blknam$7[rsp]
  004b1	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR trailer$8[rsp]
  004b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 326  : 
; 327  :             if (strcmp( regs->blkend, trailer ) != 0)

  004bf	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  004c4	48 05 60 60 01
	00		 add	 rax, 90208		; 00016060H
  004ca	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR trailer$8[rsp]
  004d2	48 8b c8	 mov	 rcx, rax
  004d5	e8 00 00 00 00	 call	 strcmp
  004da	85 c0		 test	 eax, eax
  004dc	0f 84 98 00 00
	00		 je	 $LN11@locate_reg

; 328  :             {
; 329  :                 MSGBUF( msgbuf, "REGS[%2.2X] trailer wrong; is \"%s\", should be \"%s\"",

  004e2	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  004e7	48 05 60 60 01
	00		 add	 rax, 90208		; 00016060H
  004ed	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR trailer$8[rsp]
  004f5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004fa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004ff	44 8b 4c 24 40	 mov	 r9d, DWORD PTR cpu$[rsp]
  00504	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159321
  0050b	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00510	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00518	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 330  :                     cpu, regs->blkend, trailer );
; 331  :                 WRMSG( HHC90000, "D", msgbuf );

  0051e	b9 01 00 00 00	 mov	 ecx, 1
  00523	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00529	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00531	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00536	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159322
  0053d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00542	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159323
  00549	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0054e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00553	41 b9 03 00 00
	00		 mov	 r9d, 3
  00559	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159324
  00560	ba 4b 01 00 00	 mov	 edx, 331		; 0000014bH
  00565	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159325
  0056c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 332  :                 ok = FALSE;

  00572	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR ok$1[rsp], 0
$LN11@locate_reg:

; 333  :             }
; 334  :         }
; 335  : 
; 336  :         MSGBUF( msgbuf, "REGS[%2.2X] @ 0x%p - %sVerified", cpu, regs, ok ? "" : "Not " );

  0057a	83 7c 24 50 00	 cmp	 DWORD PTR ok$1[rsp], 0
  0057f	74 0e		 je	 SHORT $LN21@locate_reg
  00581	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159326
  00588	48 89 44 24 78	 mov	 QWORD PTR tv293[rsp], rax
  0058d	eb 0c		 jmp	 SHORT $LN22@locate_reg
$LN21@locate_reg:
  0058f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159327
  00596	48 89 44 24 78	 mov	 QWORD PTR tv293[rsp], rax
$LN22@locate_reg:
  0059b	48 8b 44 24 78	 mov	 rax, QWORD PTR tv293[rsp]
  005a0	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  005a5	48 8b 44 24 48	 mov	 rax, QWORD PTR regs$[rsp]
  005aa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005af	44 8b 4c 24 40	 mov	 r9d, DWORD PTR cpu$[rsp]
  005b4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159328
  005bb	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  005c0	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  005c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 337  :         WRMSG( HHC90000, "D", msgbuf );

  005ce	b9 01 00 00 00	 mov	 ecx, 1
  005d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005d9	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  005e1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159329
  005ed	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159330
  005f9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005fe	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00603	41 b9 03 00 00
	00		 mov	 r9d, 3
  00609	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159331
  00610	ba 51 01 00 00	 mov	 edx, 337		; 00000151H
  00615	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159332
  0061c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN5@locate_reg:

; 338  :     }
; 339  : 
; 340  :     if ( argc > 2 )

  00622	83 bc 24 20 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0062a	0f 8e a0 00 00
	00		 jle	 $LN12@locate_reg

; 341  :     {
; 342  :         /* start offset */
; 343  :         int     x;
; 344  :         BYTE    c;
; 345  : 
; 346  :         if ( sscanf(argv[2], "%x%c", &x, &c) != 1  )

  00630	b8 08 00 00 00	 mov	 eax, 8
  00635	48 6b c0 02	 imul	 rax, rax, 2
  00639	4c 8d 4c 24 5c	 lea	 r9, QWORD PTR c$3[rsp]
  0063e	4c 8d 44 24 58	 lea	 r8, QWORD PTR x$2[rsp]
  00643	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159335
  0064a	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00652	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00656	e8 00 00 00 00	 call	 sscanf
  0065b	83 f8 01	 cmp	 eax, 1
  0065e	74 0a		 je	 SHORT $LN13@locate_reg

; 347  :         {
; 348  :             return -1;

  00660	b8 ff ff ff ff	 mov	 eax, -1
  00665	e9 12 01 00 00	 jmp	 $LN1@locate_reg
$LN13@locate_reg:

; 349  :         }
; 350  :         if ( x > (int)sizeof(REGS) )

  0066a	81 7c 24 58 80
	60 01 00	 cmp	 DWORD PTR x$2[rsp], 90240 ; 00016080H
  00672	7e 0a		 jle	 SHORT $LN14@locate_reg

; 351  :         {
; 352  :             return -1;

  00674	b8 ff ff ff ff	 mov	 eax, -1
  00679	e9 fe 00 00 00	 jmp	 $LN1@locate_reg
$LN14@locate_reg:

; 353  :         }
; 354  :         start_adj = x % 16;

  0067e	8b 44 24 58	 mov	 eax, DWORD PTR x$2[rsp]
  00682	99		 cdq
  00683	83 e2 0f	 and	 edx, 15
  00686	03 c2		 add	 eax, edx
  00688	83 e0 0f	 and	 eax, 15
  0068b	2b c2		 sub	 eax, edx
  0068d	89 44 24 60	 mov	 DWORD PTR start_adj$[rsp], eax

; 355  :         start = x - ( x % 16 );      /* round to a 16 byte boundry */

  00691	8b 44 24 58	 mov	 eax, DWORD PTR x$2[rsp]
  00695	99		 cdq
  00696	83 e2 0f	 and	 edx, 15
  00699	03 c2		 add	 eax, edx
  0069b	83 e0 0f	 and	 eax, 15
  0069e	2b c2		 sub	 eax, edx
  006a0	8b 4c 24 58	 mov	 ecx, DWORD PTR x$2[rsp]
  006a4	2b c8		 sub	 ecx, eax
  006a6	8b c1		 mov	 eax, ecx
  006a8	89 44 24 54	 mov	 DWORD PTR start$[rsp], eax

; 356  :         if ( start + length + start_adj > (int)sizeof(REGS) )

  006ac	8b 44 24 44	 mov	 eax, DWORD PTR length$[rsp]
  006b0	8b 4c 24 54	 mov	 ecx, DWORD PTR start$[rsp]
  006b4	03 c8		 add	 ecx, eax
  006b6	8b c1		 mov	 eax, ecx
  006b8	03 44 24 60	 add	 eax, DWORD PTR start_adj$[rsp]
  006bc	3d 80 60 01 00	 cmp	 eax, 90240		; 00016080H
  006c1	7e 0d		 jle	 SHORT $LN15@locate_reg

; 357  :             length = (int)sizeof(REGS) - start;

  006c3	b8 80 60 01 00	 mov	 eax, 90240		; 00016080H
  006c8	2b 44 24 54	 sub	 eax, DWORD PTR start$[rsp]
  006cc	89 44 24 44	 mov	 DWORD PTR length$[rsp], eax
$LN15@locate_reg:
$LN12@locate_reg:

; 358  :     }
; 359  : 
; 360  :     if ( argc > 3 )

  006d0	83 bc 24 20 02
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  006d8	7e 50		 jle	 SHORT $LN16@locate_reg

; 361  :     {
; 362  :         /* length */
; 363  :         int     x;
; 364  :         BYTE    c;
; 365  : 
; 366  :         if ( sscanf(argv[3], "%x%c", &x, &c) != 1  )

  006da	b8 08 00 00 00	 mov	 eax, 8
  006df	48 6b c0 03	 imul	 rax, rax, 3
  006e3	4c 8d 4c 24 5d	 lea	 r9, QWORD PTR c$4[rsp]
  006e8	4c 8d 44 24 64	 lea	 r8, QWORD PTR x$5[rsp]
  006ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159340
  006f4	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  006fc	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00700	e8 00 00 00 00	 call	 sscanf
  00705	83 f8 01	 cmp	 eax, 1
  00708	74 07		 je	 SHORT $LN17@locate_reg

; 367  :         {
; 368  :             return -1;

  0070a	b8 ff ff ff ff	 mov	 eax, -1
  0070f	eb 6b		 jmp	 SHORT $LN1@locate_reg
$LN17@locate_reg:

; 369  :         }
; 370  :         if ( x > 4096 )

  00711	81 7c 24 64 00
	10 00 00	 cmp	 DWORD PTR x$5[rsp], 4096 ; 00001000H
  00719	7e 07		 jle	 SHORT $LN18@locate_reg

; 371  :         {
; 372  :             return -1;

  0071b	b8 ff ff ff ff	 mov	 eax, -1
  00720	eb 5a		 jmp	 SHORT $LN1@locate_reg
$LN18@locate_reg:

; 373  :         }
; 374  :         length = x;

  00722	8b 44 24 64	 mov	 eax, DWORD PTR x$5[rsp]
  00726	89 44 24 44	 mov	 DWORD PTR length$[rsp], eax
$LN16@locate_reg:

; 375  :     }
; 376  : 
; 377  :     length += start_adj;

  0072a	8b 44 24 60	 mov	 eax, DWORD PTR start_adj$[rsp]
  0072e	8b 4c 24 44	 mov	 ecx, DWORD PTR length$[rsp]
  00732	03 c8		 add	 ecx, eax
  00734	8b c1		 mov	 eax, ecx
  00736	89 44 24 44	 mov	 DWORD PTR length$[rsp], eax

; 378  :     if ( start + length > (int)sizeof(REGS) )

  0073a	8b 44 24 44	 mov	 eax, DWORD PTR length$[rsp]
  0073e	8b 4c 24 54	 mov	 ecx, DWORD PTR start$[rsp]
  00742	03 c8		 add	 ecx, eax
  00744	8b c1		 mov	 eax, ecx
  00746	3d 80 60 01 00	 cmp	 eax, 90240		; 00016080H
  0074b	7e 0d		 jle	 SHORT $LN19@locate_reg

; 379  :         length = (int)sizeof(REGS) - start;

  0074d	b8 80 60 01 00	 mov	 eax, 90240		; 00016080H
  00752	2b 44 24 54	 sub	 eax, DWORD PTR start$[rsp]
  00756	89 44 24 44	 mov	 DWORD PTR length$[rsp], eax
$LN19@locate_reg:

; 380  : 
; 381  :     fmt_line( tbl, "regs", start, length);

  0075a	44 8b 4c 24 44	 mov	 r9d, DWORD PTR length$[rsp]
  0075f	44 8b 44 24 54	 mov	 r8d, DWORD PTR start$[rsp]
  00764	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159343
  0076b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tbl$[rsp]
  00773	e8 00 00 00 00	 call	 fmt_line

; 382  : 
; 383  :     return rc;

  00778	8b 44 24 68	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@locate_reg:

; 384  : }

  0077c	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00784	48 33 cc	 xor	 rcx, rsp
  00787	e8 00 00 00 00	 call	 __security_check_cookie
  0078c	48 81 c4 10 02
	00 00		 add	 rsp, 528		; 00000210H
  00793	5f		 pop	 rdi
  00794	c3		 ret	 0
locate_regs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscloc.c
_TEXT	SEGMENT
length$ = 64
ok$1 = 68
start$ = 72
x$2 = 76
c$3 = 80
c$4 = 81
start_adj$ = 84
x$5 = 88
rc$ = 92
loc$6 = 96
tv228 = 104
tbl$ = 112
trailer$7 = 120
header$8 = 152
version$9 = 184
msgbuf$ = 224
__$ArrayPad$ = 480
argc$ = 512
argv$ = 520
cmdline$ = 528
locate_sysblk PROC

; 112  : {

$LN22:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	57		 push	 rdi
  0000f	48 81 ec f0 01
	00 00		 sub	 rsp, 496		; 000001f0H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 113  :     int      rc             = 0;

  00028	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0

; 114  :     char     msgbuf[256];
; 115  :     int      start          = 0;

  00030	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR start$[rsp], 0

; 116  :     int      start_adj      = 0;

  00038	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR start_adj$[rsp], 0

; 117  :     int      length         = 512;

  00040	c7 44 24 40 00
	02 00 00	 mov	 DWORD PTR length$[rsp], 512 ; 00000200H

; 118  :     u_char*  tbl            = (u_char *)&sysblk;

  00048	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0004f	48 89 44 24 70	 mov	 QWORD PTR tbl$[rsp], rax
$LN4@locate_sys:

; 119  : 
; 120  :     UNREFERENCED( cmdline );

  00054	33 c0		 xor	 eax, eax
  00056	85 c0		 test	 eax, eax
  00058	75 fa		 jne	 SHORT $LN4@locate_sys

; 121  : 
; 122  :     if (argc == 2)

  0005a	83 bc 24 00 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00062	0f 85 ba 04 00
	00		 jne	 $LN5@locate_sys

; 123  :     {
; 124  :         int ok = TRUE;

  00068	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR ok$1[rsp], 1

; 125  :         U64 loc = CSWAP64( sysblk.blkloc );

  00070	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00077	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0007b	e8 00 00 00 00	 call	 _byteswap_uint64
  00080	48 89 44 24 60	 mov	 QWORD PTR loc$6[rsp], rax

; 126  : 
; 127  :         /* verify head, tail, length and address */
; 128  : 
; 129  :         if (loc != (U64)((uintptr_t) &sysblk ))

  00085	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0008c	48 39 44 24 60	 cmp	 QWORD PTR loc$6[rsp], rax
  00091	0f 84 87 00 00
	00		 je	 $LN6@locate_sys

; 130  :         {
; 131  :             MSGBUF( msgbuf, "SYSBLK moved; was 0x%16.16"PRIX64", is 0x%p",

  00097	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0009e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a3	4c 8b 4c 24 60	 mov	 r9, QWORD PTR loc$6[rsp]
  000a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159188
  000af	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  000b4	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 132  :                 loc, &sysblk );
; 133  :             WRMSG( HHC90000, "D", msgbuf );

  000c2	b9 01 00 00 00	 mov	 ecx, 1
  000c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000cd	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  000d5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159189
  000e1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159190
  000ed	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000f7	41 b9 03 00 00
	00		 mov	 r9d, 3
  000fd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159191
  00104	ba 85 00 00 00	 mov	 edx, 133		; 00000085H
  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159192
  00110	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 134  :             ok = FALSE;

  00116	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR ok$1[rsp], 0
$LN6@locate_sys:

; 135  :         }
; 136  : 
; 137  :         if (CSWAP32( sysblk.blksiz ) != (U32) sizeof( SYSBLK ))

  0011e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00125	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00128	e8 00 00 00 00	 call	 _byteswap_ulong
  0012d	3d 00 76 01 00	 cmp	 eax, 95744		; 00017600H
  00132	0f 84 90 00 00
	00		 je	 $LN7@locate_sys

; 138  :         {
; 139  :             MSGBUF( msgbuf, "SYSBLK size wrong; is %u, should be %u",

  00138	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0013f	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  00142	e8 00 00 00 00	 call	 _byteswap_ulong
  00147	c7 44 24 20 00
	76 01 00	 mov	 DWORD PTR [rsp+32], 95744 ; 00017600H
  0014f	44 8b c8	 mov	 r9d, eax
  00152	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159194
  00159	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0015e	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00166	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 140  :                 CSWAP32( sysblk.blksiz ), (U32) sizeof( SYSBLK ));
; 141  :             WRMSG( HHC90000, "D", msgbuf );

  0016c	b9 01 00 00 00	 mov	 ecx, 1
  00171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00177	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0017f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00184	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159195
  0018b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00190	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159196
  00197	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0019c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a1	41 b9 03 00 00
	00		 mov	 r9d, 3
  001a7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159197
  001ae	ba 8d 00 00 00	 mov	 edx, 141		; 0000008dH
  001b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159198
  001ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 142  :             ok = FALSE;

  001c0	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR ok$1[rsp], 0
$LN7@locate_sys:

; 143  :         }
; 144  : 
; 145  :         /* verify header */
; 146  :         {
; 147  :             char     header[32];
; 148  :             memset(  header, SPACE, sizeof( header ));

  001c8	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR header$8[rsp]
  001d0	48 8b f8	 mov	 rdi, rax
  001d3	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  001d8	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  001dd	f3 aa		 rep stosb

; 149  :             STRLCPY( header, HDL_NAME_SYSBLK );

  001df	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  001e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159199
  001ec	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR header$8[rsp]
  001f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 150  : 
; 151  :             if (strcmp( sysblk.blknam, header ) != 0)

  001fa	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00201	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR header$8[rsp]
  00209	48 8b c8	 mov	 rcx, rax
  0020c	e8 00 00 00 00	 call	 strcmp
  00211	85 c0		 test	 eax, eax
  00213	0f 84 8d 00 00
	00		 je	 $LN8@locate_sys

; 152  :             {
; 153  :                 MSGBUF( msgbuf, "SYSBLK header wrong; is \"%s\", should be \"%s\"",

  00219	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00220	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR header$8[rsp]
  00228	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0022d	4c 8b c8	 mov	 r9, rax
  00230	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159201
  00237	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0023c	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00244	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 154  :                     sysblk.blknam, header );
; 155  :                 WRMSG( HHC90000, "D", msgbuf );

  0024a	b9 01 00 00 00	 mov	 ecx, 1
  0024f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00255	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0025d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00262	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159202
  00269	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0026e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159203
  00275	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0027a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0027f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00285	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159204
  0028c	ba 9b 00 00 00	 mov	 edx, 155		; 0000009bH
  00291	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159205
  00298	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 156  :                 ok = FALSE;

  0029e	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR ok$1[rsp], 0
$LN8@locate_sys:

; 157  :             }
; 158  :         }
; 159  : 
; 160  :         /* verify version */
; 161  :         {
; 162  :             char     version[32];
; 163  :             memset(  version, SPACE, sizeof( version ));

  002a6	48 8d 84 24 b8
	00 00 00	 lea	 rax, QWORD PTR version$9[rsp]
  002ae	48 8b f8	 mov	 rdi, rax
  002b1	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  002b6	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  002bb	f3 aa		 rep stosb

; 164  :             STRLCPY( version, HDL_VERS_SYSBLK );

  002bd	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  002c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159206
  002ca	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR version$9[rsp]
  002d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 165  : 
; 166  :             if (strcmp( sysblk.blkver, version ) != 0)

  002d8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002df	48 83 c0 10	 add	 rax, 16
  002e3	48 8d 94 24 b8
	00 00 00	 lea	 rdx, QWORD PTR version$9[rsp]
  002eb	48 8b c8	 mov	 rcx, rax
  002ee	e8 00 00 00 00	 call	 strcmp
  002f3	85 c0		 test	 eax, eax
  002f5	0f 84 91 00 00
	00		 je	 $LN9@locate_sys

; 167  :             {
; 168  :                 MSGBUF( msgbuf, "SYSBLK version wrong; is \"%s\", should be \"%s\"",

  002fb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00302	48 83 c0 10	 add	 rax, 16
  00306	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR version$9[rsp]
  0030e	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00313	4c 8b c8	 mov	 r9, rax
  00316	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159208
  0031d	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00322	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  0032a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 169  :                     sysblk.blkver, version );
; 170  :                 WRMSG( HHC90000, "D", msgbuf );

  00330	b9 01 00 00 00	 mov	 ecx, 1
  00335	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0033b	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00343	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00348	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159209
  0034f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00354	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159210
  0035b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00360	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00365	41 b9 03 00 00
	00		 mov	 r9d, 3
  0036b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159211
  00372	ba aa 00 00 00	 mov	 edx, 170		; 000000aaH
  00377	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159212
  0037e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 171  :                 ok = FALSE;

  00384	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR ok$1[rsp], 0
$LN9@locate_sys:

; 172  :             }
; 173  :         }
; 174  : 
; 175  :         /* verify trailer */
; 176  :         {
; 177  :             char     trailer[32];
; 178  :             memset(  trailer, SPACE, sizeof( trailer ));

  0038c	48 8d 44 24 78	 lea	 rax, QWORD PTR trailer$7[rsp]
  00391	48 8b f8	 mov	 rdi, rax
  00394	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00399	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0039e	f3 aa		 rep stosb

; 179  :             STRLCPY( trailer, "END " );

  003a0	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  003a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159213
  003ad	48 8d 4c 24 78	 lea	 rcx, QWORD PTR trailer$7[rsp]
  003b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 180  :             STRLCAT( trailer, HDL_NAME_SYSBLK );

  003b8	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  003be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159214
  003c5	48 8d 4c 24 78	 lea	 rcx, QWORD PTR trailer$7[rsp]
  003ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 181  : 
; 182  :             if (strcmp( sysblk.blkend, trailer ) != 0)

  003d0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  003d7	48 05 90 75 01
	00		 add	 rax, 95632		; 00017590H
  003dd	48 8d 54 24 78	 lea	 rdx, QWORD PTR trailer$7[rsp]
  003e2	48 8b c8	 mov	 rcx, rax
  003e5	e8 00 00 00 00	 call	 strcmp
  003ea	85 c0		 test	 eax, eax
  003ec	0f 84 90 00 00
	00		 je	 $LN10@locate_sys

; 183  :             {
; 184  :                 MSGBUF( msgbuf, "SYSBLK trailer wrong; is \"%s\", should be \"%s\"",

  003f2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  003f9	48 05 90 75 01
	00		 add	 rax, 95632		; 00017590H
  003ff	48 8d 4c 24 78	 lea	 rcx, QWORD PTR trailer$7[rsp]
  00404	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00409	4c 8b c8	 mov	 r9, rax
  0040c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159216
  00413	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00418	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00420	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 185  :                     sysblk.blkend, trailer);
; 186  :                 WRMSG( HHC90000, "D", msgbuf );

  00426	b9 01 00 00 00	 mov	 ecx, 1
  0042b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00431	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  00439	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0043e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159217
  00445	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0044a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159218
  00451	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00456	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0045b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00461	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159219
  00468	ba ba 00 00 00	 mov	 edx, 186		; 000000baH
  0046d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159220
  00474	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 187  :                 ok = FALSE;

  0047a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR ok$1[rsp], 0
$LN10@locate_sys:

; 188  :             }
; 189  :         }
; 190  : 
; 191  :         MSGBUF( msgbuf, "SYSBLK @ 0x%p - %sVerified", &sysblk, ok ? "" : "Not " );

  00482	83 7c 24 44 00	 cmp	 DWORD PTR ok$1[rsp], 0
  00487	74 0e		 je	 SHORT $LN20@locate_sys
  00489	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159221
  00490	48 89 44 24 68	 mov	 QWORD PTR tv228[rsp], rax
  00495	eb 0c		 jmp	 SHORT $LN21@locate_sys
$LN20@locate_sys:
  00497	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159222
  0049e	48 89 44 24 68	 mov	 QWORD PTR tv228[rsp], rax
$LN21@locate_sys:
  004a3	48 8b 44 24 68	 mov	 rax, QWORD PTR tv228[rsp]
  004a8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004ad	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR __imp_sysblk
  004b4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159223
  004bb	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  004c0	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  004c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 192  :         WRMSG( HHC90000, "D", msgbuf );

  004ce	b9 01 00 00 00	 mov	 ecx, 1
  004d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004d9	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$[rsp]
  004e1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159224
  004ed	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159225
  004f9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004fe	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00503	41 b9 03 00 00
	00		 mov	 r9d, 3
  00509	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159226
  00510	ba c0 00 00 00	 mov	 edx, 192		; 000000c0H
  00515	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159227
  0051c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN5@locate_sys:

; 193  :     }
; 194  : 
; 195  :     if ( argc > 2 )

  00522	83 bc 24 00 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0052a	0f 8e a0 00 00
	00		 jle	 $LN11@locate_sys

; 196  :     {
; 197  :         /* start offset */
; 198  :         int     x;
; 199  :         BYTE    c;
; 200  : 
; 201  :         if ( sscanf(argv[2], "%x%c", &x, &c) != 1  )

  00530	b8 08 00 00 00	 mov	 eax, 8
  00535	48 6b c0 02	 imul	 rax, rax, 2
  00539	4c 8d 4c 24 50	 lea	 r9, QWORD PTR c$3[rsp]
  0053e	4c 8d 44 24 4c	 lea	 r8, QWORD PTR x$2[rsp]
  00543	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159230
  0054a	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00552	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00556	e8 00 00 00 00	 call	 sscanf
  0055b	83 f8 01	 cmp	 eax, 1
  0055e	74 0a		 je	 SHORT $LN12@locate_sys

; 202  :         {
; 203  :             return -1;

  00560	b8 ff ff ff ff	 mov	 eax, -1
  00565	e9 0f 01 00 00	 jmp	 $LN1@locate_sys
$LN12@locate_sys:

; 204  :         }
; 205  :         if ( x > (int)sizeof(SYSBLK) )

  0056a	81 7c 24 4c 00
	76 01 00	 cmp	 DWORD PTR x$2[rsp], 95744 ; 00017600H
  00572	7e 0a		 jle	 SHORT $LN13@locate_sys

; 206  :         {
; 207  :             return -1;

  00574	b8 ff ff ff ff	 mov	 eax, -1
  00579	e9 fb 00 00 00	 jmp	 $LN1@locate_sys
$LN13@locate_sys:

; 208  :         }
; 209  :         start_adj = x % 16;

  0057e	8b 44 24 4c	 mov	 eax, DWORD PTR x$2[rsp]
  00582	99		 cdq
  00583	83 e2 0f	 and	 edx, 15
  00586	03 c2		 add	 eax, edx
  00588	83 e0 0f	 and	 eax, 15
  0058b	2b c2		 sub	 eax, edx
  0058d	89 44 24 54	 mov	 DWORD PTR start_adj$[rsp], eax

; 210  :         start = x - ( x % 16 );      /* round to a 16 byte boundry */

  00591	8b 44 24 4c	 mov	 eax, DWORD PTR x$2[rsp]
  00595	99		 cdq
  00596	83 e2 0f	 and	 edx, 15
  00599	03 c2		 add	 eax, edx
  0059b	83 e0 0f	 and	 eax, 15
  0059e	2b c2		 sub	 eax, edx
  005a0	8b 4c 24 4c	 mov	 ecx, DWORD PTR x$2[rsp]
  005a4	2b c8		 sub	 ecx, eax
  005a6	8b c1		 mov	 eax, ecx
  005a8	89 44 24 48	 mov	 DWORD PTR start$[rsp], eax

; 211  :         if ( start + length + start_adj > (int)sizeof(SYSBLK) )

  005ac	8b 44 24 40	 mov	 eax, DWORD PTR length$[rsp]
  005b0	8b 4c 24 48	 mov	 ecx, DWORD PTR start$[rsp]
  005b4	03 c8		 add	 ecx, eax
  005b6	8b c1		 mov	 eax, ecx
  005b8	03 44 24 54	 add	 eax, DWORD PTR start_adj$[rsp]
  005bc	3d 00 76 01 00	 cmp	 eax, 95744		; 00017600H
  005c1	7e 0d		 jle	 SHORT $LN14@locate_sys

; 212  :             length = (int)sizeof(SYSBLK) - start;

  005c3	b8 00 76 01 00	 mov	 eax, 95744		; 00017600H
  005c8	2b 44 24 48	 sub	 eax, DWORD PTR start$[rsp]
  005cc	89 44 24 40	 mov	 DWORD PTR length$[rsp], eax
$LN14@locate_sys:
$LN11@locate_sys:

; 213  :     }
; 214  : 
; 215  :     if ( argc > 3 )

  005d0	83 bc 24 00 02
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  005d8	7e 50		 jle	 SHORT $LN15@locate_sys

; 216  :     {
; 217  :         /* length */
; 218  :         int     x;
; 219  :         BYTE    c;
; 220  : 
; 221  :         if ( sscanf(argv[3], "%x%c", &x, &c) != 1  )

  005da	b8 08 00 00 00	 mov	 eax, 8
  005df	48 6b c0 03	 imul	 rax, rax, 3
  005e3	4c 8d 4c 24 51	 lea	 r9, QWORD PTR c$4[rsp]
  005e8	4c 8d 44 24 58	 lea	 r8, QWORD PTR x$5[rsp]
  005ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159235
  005f4	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  005fc	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00600	e8 00 00 00 00	 call	 sscanf
  00605	83 f8 01	 cmp	 eax, 1
  00608	74 07		 je	 SHORT $LN16@locate_sys

; 222  :         {
; 223  :             return -1;

  0060a	b8 ff ff ff ff	 mov	 eax, -1
  0060f	eb 68		 jmp	 SHORT $LN1@locate_sys
$LN16@locate_sys:

; 224  :         }
; 225  :         if ( x > 4096 )

  00611	81 7c 24 58 00
	10 00 00	 cmp	 DWORD PTR x$5[rsp], 4096 ; 00001000H
  00619	7e 07		 jle	 SHORT $LN17@locate_sys

; 226  :         {
; 227  :             return -1;

  0061b	b8 ff ff ff ff	 mov	 eax, -1
  00620	eb 57		 jmp	 SHORT $LN1@locate_sys
$LN17@locate_sys:

; 228  :         }
; 229  :         length = x;

  00622	8b 44 24 58	 mov	 eax, DWORD PTR x$5[rsp]
  00626	89 44 24 40	 mov	 DWORD PTR length$[rsp], eax
$LN15@locate_sys:

; 230  :     }
; 231  : 
; 232  :     length += start_adj;

  0062a	8b 44 24 54	 mov	 eax, DWORD PTR start_adj$[rsp]
  0062e	8b 4c 24 40	 mov	 ecx, DWORD PTR length$[rsp]
  00632	03 c8		 add	 ecx, eax
  00634	8b c1		 mov	 eax, ecx
  00636	89 44 24 40	 mov	 DWORD PTR length$[rsp], eax

; 233  :     if ( start + length > (int)sizeof(SYSBLK) )

  0063a	8b 44 24 40	 mov	 eax, DWORD PTR length$[rsp]
  0063e	8b 4c 24 48	 mov	 ecx, DWORD PTR start$[rsp]
  00642	03 c8		 add	 ecx, eax
  00644	8b c1		 mov	 eax, ecx
  00646	3d 00 76 01 00	 cmp	 eax, 95744		; 00017600H
  0064b	7e 0d		 jle	 SHORT $LN18@locate_sys

; 234  :         length = (int)sizeof(SYSBLK) - start;

  0064d	b8 00 76 01 00	 mov	 eax, 95744		; 00017600H
  00652	2b 44 24 48	 sub	 eax, DWORD PTR start$[rsp]
  00656	89 44 24 40	 mov	 DWORD PTR length$[rsp], eax
$LN18@locate_sys:

; 235  : 
; 236  :     fmt_line( tbl, "sysblk", start, length);

  0065a	44 8b 4c 24 40	 mov	 r9d, DWORD PTR length$[rsp]
  0065f	44 8b 44 24 48	 mov	 r8d, DWORD PTR start$[rsp]
  00664	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159238
  0066b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tbl$[rsp]
  00670	e8 00 00 00 00	 call	 fmt_line

; 237  : 
; 238  :     return rc;

  00675	8b 44 24 5c	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@locate_sys:

; 239  : }

  00679	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00681	48 33 cc	 xor	 rcx, rsp
  00684	e8 00 00 00 00	 call	 __security_check_cookie
  00689	48 81 c4 f0 01
	00 00		 add	 rsp, 496		; 000001f0H
  00690	5f		 pop	 rdi
  00691	c3		 ret	 0
locate_sysblk ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscloc.c
_TEXT	SEGMENT
c$ = 64
j$ = 68
i$ = 72
k$ = 76
o$ = 80
tv65 = 84
l$ = 88
tv147 = 92
tv150 = 96
cbuf$ = 112
hbuf$ = 176
fmtline$ = 304
__$ArrayPad$ = 560
tbl$ = 592
name$ = 600
start$ = 608
length$ = 616
fmt_line PROC

; 77   : {

$LN17:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec 40 02
	00 00		 sub	 rsp, 576		; 00000240H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 78   :     int     i, j, k, l, o;
; 79   :     char    hbuf[128];
; 80   :     char    cbuf[64];
; 81   :     char    fmtline[256];
; 82   :     BYTE    c;
; 83   : 
; 84   :     l = length < 32 ? length : 32;

  0002e	83 bc 24 68 02
	00 00 20	 cmp	 DWORD PTR length$[rsp], 32 ; 00000020H
  00036	7d 0d		 jge	 SHORT $LN11@fmt_line
  00038	8b 84 24 68 02
	00 00		 mov	 eax, DWORD PTR length$[rsp]
  0003f	89 44 24 54	 mov	 DWORD PTR tv65[rsp], eax
  00043	eb 08		 jmp	 SHORT $LN12@fmt_line
$LN11@fmt_line:
  00045	c7 44 24 54 20
	00 00 00	 mov	 DWORD PTR tv65[rsp], 32	; 00000020H
$LN12@fmt_line:
  0004d	8b 44 24 54	 mov	 eax, DWORD PTR tv65[rsp]
  00051	89 44 24 58	 mov	 DWORD PTR l$[rsp], eax

; 85   : 
; 86   :     for( o = start; o < (start+length); o += l )

  00055	8b 84 24 60 02
	00 00		 mov	 eax, DWORD PTR start$[rsp]
  0005c	89 44 24 50	 mov	 DWORD PTR o$[rsp], eax
  00060	eb 10		 jmp	 SHORT $LN4@fmt_line
$LN2@fmt_line:
  00062	8b 44 24 58	 mov	 eax, DWORD PTR l$[rsp]
  00066	8b 4c 24 50	 mov	 ecx, DWORD PTR o$[rsp]
  0006a	03 c8		 add	 ecx, eax
  0006c	8b c1		 mov	 eax, ecx
  0006e	89 44 24 50	 mov	 DWORD PTR o$[rsp], eax
$LN4@fmt_line:
  00072	8b 84 24 68 02
	00 00		 mov	 eax, DWORD PTR length$[rsp]
  00079	8b 8c 24 60 02
	00 00		 mov	 ecx, DWORD PTR start$[rsp]
  00080	03 c8		 add	 ecx, eax
  00082	8b c1		 mov	 eax, ecx
  00084	39 44 24 50	 cmp	 DWORD PTR o$[rsp], eax
  00088	0f 8d f5 01 00
	00		 jge	 $LN3@fmt_line

; 87   :     {
; 88   :         memset( hbuf, 0, sizeof(hbuf) );

  0008e	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR hbuf$[rsp]
  00096	48 8b f8	 mov	 rdi, rax
  00099	33 c0		 xor	 eax, eax
  0009b	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  000a0	f3 aa		 rep stosb

; 89   :         memset( cbuf, 0, sizeof(cbuf) );

  000a2	48 8d 44 24 70	 lea	 rax, QWORD PTR cbuf$[rsp]
  000a7	48 8b f8	 mov	 rdi, rax
  000aa	33 c0		 xor	 eax, eax
  000ac	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  000b1	f3 aa		 rep stosb

; 90   : 
; 91   :         for (i = 0, j = 0, k = 0; i < l; i++)

  000b3	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000bb	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  000c3	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR k$[rsp], 0
  000cb	eb 0a		 jmp	 SHORT $LN7@fmt_line
$LN5@fmt_line:
  000cd	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  000d1	ff c0		 inc	 eax
  000d3	89 44 24 48	 mov	 DWORD PTR i$[rsp], eax
$LN7@fmt_line:
  000d7	8b 44 24 58	 mov	 eax, DWORD PTR l$[rsp]
  000db	39 44 24 48	 cmp	 DWORD PTR i$[rsp], eax
  000df	0f 8d 04 01 00
	00		 jge	 $LN6@fmt_line

; 92   :         {
; 93   :             c = tbl[o+i];

  000e5	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  000e9	8b 4c 24 50	 mov	 ecx, DWORD PTR o$[rsp]
  000ed	03 c8		 add	 ecx, eax
  000ef	8b c1		 mov	 eax, ecx
  000f1	48 98		 cdqe
  000f3	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR tbl$[rsp]
  000fb	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000ff	88 44 24 40	 mov	 BYTE PTR c$[rsp], al

; 94   :             if ( (i & 0x3) == 0x0 ) hbuf[j++] = SPACE;

  00103	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  00107	83 e0 03	 and	 eax, 3
  0010a	85 c0		 test	 eax, eax
  0010c	75 17		 jne	 SHORT $LN8@fmt_line
  0010e	48 63 44 24 44	 movsxd	 rax, DWORD PTR j$[rsp]
  00113	c6 84 04 b0 00
	00 00 20	 mov	 BYTE PTR hbuf$[rsp+rax], 32 ; 00000020H
  0011b	8b 44 24 44	 mov	 eax, DWORD PTR j$[rsp]
  0011f	ff c0		 inc	 eax
  00121	89 44 24 44	 mov	 DWORD PTR j$[rsp], eax
$LN8@fmt_line:

; 95   :             if ( (i & 0xf) == 0x0 ) { hbuf[j++] = SPACE; cbuf[k++] = SPACE; }

  00125	8b 44 24 48	 mov	 eax, DWORD PTR i$[rsp]
  00129	83 e0 0f	 and	 eax, 15
  0012c	85 c0		 test	 eax, eax
  0012e	75 2b		 jne	 SHORT $LN9@fmt_line
  00130	48 63 44 24 44	 movsxd	 rax, DWORD PTR j$[rsp]
  00135	c6 84 04 b0 00
	00 00 20	 mov	 BYTE PTR hbuf$[rsp+rax], 32 ; 00000020H
  0013d	8b 44 24 44	 mov	 eax, DWORD PTR j$[rsp]
  00141	ff c0		 inc	 eax
  00143	89 44 24 44	 mov	 DWORD PTR j$[rsp], eax
  00147	48 63 44 24 4c	 movsxd	 rax, DWORD PTR k$[rsp]
  0014c	c6 44 04 70 20	 mov	 BYTE PTR cbuf$[rsp+rax], 32 ; 00000020H
  00151	8b 44 24 4c	 mov	 eax, DWORD PTR k$[rsp]
  00155	ff c0		 inc	 eax
  00157	89 44 24 4c	 mov	 DWORD PTR k$[rsp], eax
$LN9@fmt_line:

; 96   : 
; 97   :             j += idx_snprintf( j, hbuf, sizeof(hbuf), "%2.2X", c );

  0015b	0f b6 44 24 40	 movzx	 eax, BYTE PTR c$[rsp]
  00160	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00164	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159137
  0016b	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  00171	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR hbuf$[rsp]
  00179	8b 4c 24 44	 mov	 ecx, DWORD PTR j$[rsp]
  0017d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_idx_snprintf
  00183	8b 4c 24 44	 mov	 ecx, DWORD PTR j$[rsp]
  00187	03 c8		 add	 ecx, eax
  00189	8b c1		 mov	 eax, ecx
  0018b	89 44 24 44	 mov	 DWORD PTR j$[rsp], eax

; 98   :             cbuf[k++] = ( !isprint(c) ? '.' : c );

  0018f	0f b6 44 24 40	 movzx	 eax, BYTE PTR c$[rsp]
  00194	8b c8		 mov	 ecx, eax
  00196	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isprint
  0019c	85 c0		 test	 eax, eax
  0019e	75 0a		 jne	 SHORT $LN13@fmt_line
  001a0	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv147[rsp], 1
  001a8	eb 08		 jmp	 SHORT $LN14@fmt_line
$LN13@fmt_line:
  001aa	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
$LN14@fmt_line:
  001b2	83 7c 24 5c 00	 cmp	 DWORD PTR tv147[rsp], 0
  001b7	74 0a		 je	 SHORT $LN15@fmt_line
  001b9	c7 44 24 60 2e
	00 00 00	 mov	 DWORD PTR tv150[rsp], 46 ; 0000002eH
  001c1	eb 09		 jmp	 SHORT $LN16@fmt_line
$LN15@fmt_line:
  001c3	0f b6 44 24 40	 movzx	 eax, BYTE PTR c$[rsp]
  001c8	89 44 24 60	 mov	 DWORD PTR tv150[rsp], eax
$LN16@fmt_line:
  001cc	48 63 44 24 4c	 movsxd	 rax, DWORD PTR k$[rsp]
  001d1	0f b6 4c 24 60	 movzx	 ecx, BYTE PTR tv150[rsp]
  001d6	88 4c 04 70	 mov	 BYTE PTR cbuf$[rsp+rax], cl
  001da	8b 44 24 4c	 mov	 eax, DWORD PTR k$[rsp]
  001de	ff c0		 inc	 eax
  001e0	89 44 24 4c	 mov	 DWORD PTR k$[rsp], eax

; 99   : 
; 100  :         } /* end for(i) */

  001e4	e9 e4 fe ff ff	 jmp	 $LN5@fmt_line
$LN6@fmt_line:

; 101  :         MSGBUF( fmtline, "%s+0x%04x%-74.74s %-34.34s", name, o, hbuf, cbuf );

  001e9	48 8d 44 24 70	 lea	 rax, QWORD PTR cbuf$[rsp]
  001ee	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  001f3	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR hbuf$[rsp]
  001fb	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00200	8b 44 24 50	 mov	 eax, DWORD PTR o$[rsp]
  00204	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00208	4c 8b 8c 24 58
	02 00 00	 mov	 r9, QWORD PTR name$[rsp]
  00210	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159138
  00217	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0021c	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR fmtline$[rsp]
  00224	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 102  :         WRMSG( HHC90000, "D", fmtline );

  0022a	b9 01 00 00 00	 mov	 ecx, 1
  0022f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00235	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR fmtline$[rsp]
  0023d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00242	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159139
  00249	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0024e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159140
  00255	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0025a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0025f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00265	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159141
  0026c	ba 66 00 00 00	 mov	 edx, 102		; 00000066H
  00271	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159142
  00278	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 103  :     }

  0027e	e9 df fd ff ff	 jmp	 $LN2@fmt_line
$LN3@fmt_line:

; 104  : 
; 105  : }

  00283	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0028b	48 33 cc	 xor	 rcx, rsp
  0028e	e8 00 00 00 00	 call	 __security_check_cookie
  00293	48 81 c4 40 02
	00 00		 add	 rsp, 576		; 00000240H
  0029a	5f		 pop	 rdi
  0029b	c3		 ret	 0
fmt_line ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hscloc.c
_TEXT	SEGMENT
size$ = 32
i$ = 36
num$ = 40
$T1 = 48
$T2 = 56
$T3 = 64
$T4 = 72
$T5 = 80
number$ = 112
fmt_decimal PROC

; 16   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 60	 sub	 rsp, 96			; 00000060H

; 17   :     static  char    fmt_dec[64];
; 18   :     double  num  = (double)number;

  0000a	48 8b 44 24 70	 mov	 rax, QWORD PTR number$[rsp]
  0000f	48 85 c0	 test	 rax, rax
  00012	7c 07		 jl	 SHORT $LN29@fmt_decima
  00014	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  00019	eb 19		 jmp	 SHORT $LN30@fmt_decima
$LN29@fmt_decima:
  0001b	48 8b c8	 mov	 rcx, rax
  0001e	48 d1 e9	 shr	 rcx, 1
  00021	48 83 e0 01	 and	 rax, 1
  00025	48 0b c8	 or	 rcx, rax
  00028	f2 48 0f 2a c9	 cvtsi2sd xmm1, rcx
  0002d	f2 0f 58 c9	 addsd	 xmm1, xmm1
  00031	0f 28 c1	 movaps	 xmm0, xmm1
$LN30@fmt_decima:
  00034	f2 0f 11 44 24
	28		 movsd	 QWORD PTR num$[rsp], xmm0

; 19   :     BYTE    size;
; 20   :     int     i;
; 21   : 
; 22   :     memset(fmt_dec, 0, sizeof(fmt_dec));

  0003a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?fmt_dec@?1??fmt_decimal@@9@9
  00041	48 8b f8	 mov	 rdi, rax
  00044	33 c0		 xor	 eax, eax
  00046	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0004b	f3 aa		 rep stosb

; 23   : 
; 24   :     if ( num > 0 )

  0004d	f2 0f 10 44 24
	28		 movsd	 xmm0, QWORD PTR num$[rsp]
  00053	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  0005b	0f 86 4e 02 00
	00		 jbe	 $LN5@fmt_decima

; 25   :     {
; 26   :         if ( num >= (double)ONE_TRILLION )

  00061	f2 0f 10 44 24
	28		 movsd	 xmm0, QWORD PTR num$[rsp]
  00067	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@426d1a94a2000000
  0006f	72 1b		 jb	 SHORT $LN7@fmt_decima

; 27   :         {
; 28   :             num /= (double)ONE_TRILLION;

  00071	f2 0f 10 44 24
	28		 movsd	 xmm0, QWORD PTR num$[rsp]
  00077	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@426d1a94a2000000
  0007f	f2 0f 11 44 24
	28		 movsd	 QWORD PTR num$[rsp], xmm0

; 29   :             size = 'T';

  00085	c6 44 24 20 54	 mov	 BYTE PTR size$[rsp], 84	; 00000054H

; 30   :         }

  0008a	eb 6f		 jmp	 SHORT $LN8@fmt_decima
$LN7@fmt_decima:

; 31   :         else if ( num >= ONE_BILLION )

  0008c	f2 0f 10 44 24
	28		 movsd	 xmm0, QWORD PTR num$[rsp]
  00092	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@41cdcd6500000000
  0009a	72 1b		 jb	 SHORT $LN9@fmt_decima

; 32   :         {
; 33   :             num /= (double)ONE_BILLION;

  0009c	f2 0f 10 44 24
	28		 movsd	 xmm0, QWORD PTR num$[rsp]
  000a2	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@41cdcd6500000000
  000aa	f2 0f 11 44 24
	28		 movsd	 QWORD PTR num$[rsp], xmm0

; 34   :             size = 'G';

  000b0	c6 44 24 20 47	 mov	 BYTE PTR size$[rsp], 71	; 00000047H

; 35   :         }

  000b5	eb 44		 jmp	 SHORT $LN10@fmt_decima
$LN9@fmt_decima:

; 36   :         else if ( num >= (double)ONE_MILLION )

  000b7	f2 0f 10 44 24
	28		 movsd	 xmm0, QWORD PTR num$[rsp]
  000bd	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@412e848000000000
  000c5	72 1b		 jb	 SHORT $LN11@fmt_decima

; 37   :         {
; 38   :             num /= (double)ONE_MILLION;

  000c7	f2 0f 10 44 24
	28		 movsd	 xmm0, QWORD PTR num$[rsp]
  000cd	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@412e848000000000
  000d5	f2 0f 11 44 24
	28		 movsd	 QWORD PTR num$[rsp], xmm0

; 39   :             size = 'M';

  000db	c6 44 24 20 4d	 mov	 BYTE PTR size$[rsp], 77	; 0000004dH

; 40   :         }

  000e0	eb 19		 jmp	 SHORT $LN12@fmt_decima
$LN11@fmt_decima:

; 41   :         else
; 42   :         {
; 43   :             num /= (double)ONE_THOUSAND;

  000e2	f2 0f 10 44 24
	28		 movsd	 xmm0, QWORD PTR num$[rsp]
  000e8	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@408f400000000000
  000f0	f2 0f 11 44 24
	28		 movsd	 QWORD PTR num$[rsp], xmm0

; 44   :             size = 'K';

  000f6	c6 44 24 20 4b	 mov	 BYTE PTR size$[rsp], 75	; 0000004bH
$LN12@fmt_decima:
$LN10@fmt_decima:
$LN8@fmt_decima:

; 45   :         }
; 46   : 
; 47   :         MSGBUF( fmt_dec, "%7.3f", num );

  000fb	f2 0f 10 5c 24
	28		 movsd	 xmm3, QWORD PTR num$[rsp]
  00101	66 49 0f 7e d9	 movq	 r9, xmm3
  00106	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159103
  0010d	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00112	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?fmt_dec@?1??fmt_decimal@@9@9
  00119	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 48   : 
; 49   :         i = (int)strlen(fmt_dec);

  0011f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?fmt_dec@?1??fmt_decimal@@9@9
  00126	e8 00 00 00 00	 call	 strlen
  0012b	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax

; 50   : 
; 51   :         if ( i > 0 )

  0012f	83 7c 24 24 00	 cmp	 DWORD PTR i$[rsp], 0
  00134	0f 8e aa 00 00
	00		 jle	 $LN13@fmt_decima

; 52   :         {
; 53   :             for ( i--; i > 0; i-- )

  0013a	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0013e	ff c8		 dec	 eax
  00140	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
  00144	eb 0a		 jmp	 SHORT $LN4@fmt_decima
$LN2@fmt_decima:
  00146	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0014a	ff c8		 dec	 eax
  0014c	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@fmt_decima:
  00150	83 7c 24 24 00	 cmp	 DWORD PTR i$[rsp], 0
  00155	0f 8e 89 00 00
	00		 jle	 $LN3@fmt_decima

; 54   :             {
; 55   :                 if      ( fmt_dec[i] == '0' ) fmt_dec[i] = '\0';

  0015b	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00160	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?fmt_dec@?1??fmt_decimal@@9@9
  00167	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0016b	83 f8 30	 cmp	 eax, 48			; 00000030H
  0016e	75 2b		 jne	 SHORT $LN14@fmt_decima
  00170	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00175	48 89 44 24 30	 mov	 QWORD PTR $T1[rsp], rax
  0017a	48 83 7c 24 30
	40		 cmp	 QWORD PTR $T1[rsp], 64	; 00000040H
  00180	73 02		 jae	 SHORT $LN19@fmt_decima
  00182	eb 05		 jmp	 SHORT $LN20@fmt_decima
$LN19@fmt_decima:
  00184	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN20@fmt_decima:
  00189	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?fmt_dec@?1??fmt_decimal@@9@9
  00190	48 8b 4c 24 30	 mov	 rcx, QWORD PTR $T1[rsp]
  00195	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0
  00199	eb 44		 jmp	 SHORT $LN15@fmt_decima
$LN14@fmt_decima:

; 56   :                 else if ( fmt_dec[i] == '.' ) { fmt_dec[i] = '\0'; break; }

  0019b	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  001a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?fmt_dec@?1??fmt_decimal@@9@9
  001a7	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  001ab	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  001ae	75 2d		 jne	 SHORT $LN16@fmt_decima
  001b0	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  001b5	48 89 44 24 38	 mov	 QWORD PTR $T2[rsp], rax
  001ba	48 83 7c 24 38
	40		 cmp	 QWORD PTR $T2[rsp], 64	; 00000040H
  001c0	73 02		 jae	 SHORT $LN21@fmt_decima
  001c2	eb 05		 jmp	 SHORT $LN22@fmt_decima
$LN21@fmt_decima:
  001c4	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN22@fmt_decima:
  001c9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?fmt_dec@?1??fmt_decimal@@9@9
  001d0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR $T2[rsp]
  001d5	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0
  001d9	eb 09		 jmp	 SHORT $LN3@fmt_decima
  001db	eb 02		 jmp	 SHORT $LN17@fmt_decima
$LN16@fmt_decima:

; 57   :                 else break;

  001dd	eb 05		 jmp	 SHORT $LN3@fmt_decima
$LN17@fmt_decima:
$LN15@fmt_decima:

; 58   :             }

  001df	e9 62 ff ff ff	 jmp	 $LN2@fmt_decima
$LN3@fmt_decima:
$LN13@fmt_decima:

; 59   :         }
; 60   : 
; 61   :         fmt_dec[strlen(fmt_dec)] = '\0';

  001e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?fmt_dec@?1??fmt_decimal@@9@9
  001eb	e8 00 00 00 00	 call	 strlen
  001f0	48 89 44 24 40	 mov	 QWORD PTR $T3[rsp], rax
  001f5	48 83 7c 24 40
	40		 cmp	 QWORD PTR $T3[rsp], 64	; 00000040H
  001fb	73 02		 jae	 SHORT $LN23@fmt_decima
  001fd	eb 05		 jmp	 SHORT $LN24@fmt_decima
$LN23@fmt_decima:
  001ff	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN24@fmt_decima:
  00204	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?fmt_dec@?1??fmt_decimal@@9@9
  0020b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR $T3[rsp]
  00210	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0

; 62   :         fmt_dec[strlen(fmt_dec)+1] = '\0';

  00214	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?fmt_dec@?1??fmt_decimal@@9@9
  0021b	e8 00 00 00 00	 call	 strlen
  00220	48 ff c0	 inc	 rax
  00223	48 89 44 24 48	 mov	 QWORD PTR $T4[rsp], rax
  00228	48 83 7c 24 48
	40		 cmp	 QWORD PTR $T4[rsp], 64	; 00000040H
  0022e	73 02		 jae	 SHORT $LN25@fmt_decima
  00230	eb 05		 jmp	 SHORT $LN26@fmt_decima
$LN25@fmt_decima:
  00232	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN26@fmt_decima:
  00237	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?fmt_dec@?1??fmt_decimal@@9@9
  0023e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR $T4[rsp]
  00243	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0

; 63   :         fmt_dec[strlen(fmt_dec)+2] = '\0';

  00247	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?fmt_dec@?1??fmt_decimal@@9@9
  0024e	e8 00 00 00 00	 call	 strlen
  00253	48 83 c0 02	 add	 rax, 2
  00257	48 89 44 24 50	 mov	 QWORD PTR $T5[rsp], rax
  0025c	48 83 7c 24 50
	40		 cmp	 QWORD PTR $T5[rsp], 64	; 00000040H
  00262	73 02		 jae	 SHORT $LN27@fmt_decima
  00264	eb 05		 jmp	 SHORT $LN28@fmt_decima
$LN27@fmt_decima:
  00266	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN28@fmt_decima:
  0026b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?fmt_dec@?1??fmt_decimal@@9@9
  00272	48 8b 4c 24 50	 mov	 rcx, QWORD PTR $T5[rsp]
  00277	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0

; 64   :         fmt_dec[strlen(fmt_dec)] = ' ';

  0027b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?fmt_dec@?1??fmt_decimal@@9@9
  00282	e8 00 00 00 00	 call	 strlen
  00287	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?fmt_dec@?1??fmt_decimal@@9@9
  0028e	c6 04 01 20	 mov	 BYTE PTR [rcx+rax], 32	; 00000020H

; 65   :         fmt_dec[strlen(fmt_dec)] = size;

  00292	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?fmt_dec@?1??fmt_decimal@@9@9
  00299	e8 00 00 00 00	 call	 strlen
  0029e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?fmt_dec@?1??fmt_decimal@@9@9
  002a5	0f b6 54 24 20	 movzx	 edx, BYTE PTR size$[rsp]
  002aa	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 66   :     }

  002ad	eb 21		 jmp	 SHORT $LN6@fmt_decima
$LN5@fmt_decima:

; 67   :     else
; 68   :     {
; 69   :         MSGBUF( fmt_dec, "%3d ", 0 );

  002af	45 33 c9	 xor	 r9d, r9d
  002b2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159109
  002b9	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  002be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?fmt_dec@?1??fmt_decimal@@9@9
  002c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 70   :         size = ' ';

  002cb	c6 44 24 20 20	 mov	 BYTE PTR size$[rsp], 32	; 00000020H
$LN6@fmt_decima:

; 71   :     }
; 72   : 
; 73   :     return fmt_dec;

  002d0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?fmt_dec@?1??fmt_decimal@@9@9
$LN18@fmt_decima:

; 74   : }

  002d7	48 83 c4 60	 add	 rsp, 96			; 00000060H
  002db	5f		 pop	 rdi
  002dc	c3		 ret	 0
fmt_decimal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\extstring.h
_TEXT	SEGMENT
tv84 = 32
tv73 = 36
tv93 = 40
a$ = 48
s$ = 56
string$ = 80
abbrev$ = 88
n$ = 96
strcaseabbrev PROC

; 91   : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 92   :     register const char *s = string;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR string$[rsp]
  00018	48 89 44 24 38	 mov	 QWORD PTR s$[rsp], rax

; 93   :     register const char *a = abbrev;

  0001d	48 8b 44 24 58	 mov	 rax, QWORD PTR abbrev$[rsp]
  00022	48 89 44 24 30	 mov	 QWORD PTR a$[rsp], rax

; 94   :     if (*a &&
; 95   :         *s &&

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0002c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0002f	85 c0		 test	 eax, eax
  00031	0f 84 02 01 00
	00		 je	 $LN5@strcaseabb
  00037	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  0003c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003f	85 c0		 test	 eax, eax
  00041	0f 84 f2 00 00
	00		 je	 $LN5@strcaseabb
  00047	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0004c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0004f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  00054	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00057	3b c1		 cmp	 eax, ecx
  00059	74 30		 je	 SHORT $LN6@strcaseabb
  0005b	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  00060	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00063	e8 00 00 00 00	 call	 asciitoupper
  00068	0f be c0	 movsx	 eax, al
  0006b	89 44 24 24	 mov	 DWORD PTR tv73[rsp], eax
  0006f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  00074	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00077	e8 00 00 00 00	 call	 asciitoupper
  0007c	0f be c0	 movsx	 eax, al
  0007f	8b 4c 24 24	 mov	 ecx, DWORD PTR tv73[rsp]
  00083	3b c8		 cmp	 ecx, eax
  00085	0f 85 ae 00 00
	00		 jne	 $LN5@strcaseabb
$LN6@strcaseabb:
$LN2@strcaseabb:

; 96   :         (*a == *s ||
; 97   :         asciitoupper(*a) == asciitoupper(*s)))
; 98   :     {
; 99   :         for (;;)
; 100  :         {
; 101  :             a++;

  0008b	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  00090	48 ff c0	 inc	 rax
  00093	48 89 44 24 30	 mov	 QWORD PTR a$[rsp], rax

; 102  :             if (!*a)

  00098	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0009d	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000a0	85 c0		 test	 eax, eax
  000a2	75 31		 jne	 SHORT $LN7@strcaseabb

; 103  :                 return (((uintptr_t)a - (uintptr_t)abbrev) >= n);

  000a4	48 8b 44 24 58	 mov	 rax, QWORD PTR abbrev$[rsp]
  000a9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a$[rsp]
  000ae	48 2b c8	 sub	 rcx, rax
  000b1	48 8b c1	 mov	 rax, rcx
  000b4	8b 4c 24 60	 mov	 ecx, DWORD PTR n$[rsp]
  000b8	48 3b c1	 cmp	 rax, rcx
  000bb	72 0a		 jb	 SHORT $LN12@strcaseabb
  000bd	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
  000c5	eb 08		 jmp	 SHORT $LN13@strcaseabb
$LN12@strcaseabb:
  000c7	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
$LN13@strcaseabb:
  000cf	8b 44 24 20	 mov	 eax, DWORD PTR tv84[rsp]
  000d3	eb 66		 jmp	 SHORT $LN1@strcaseabb
$LN7@strcaseabb:

; 104  :             s++;

  000d5	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  000da	48 ff c0	 inc	 rax
  000dd	48 89 44 24 38	 mov	 QWORD PTR s$[rsp], rax

; 105  :             if (!*s)

  000e2	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  000e7	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000ea	85 c0		 test	 eax, eax
  000ec	75 02		 jne	 SHORT $LN8@strcaseabb

; 106  :                 break;

  000ee	eb 49		 jmp	 SHORT $LN3@strcaseabb
$LN8@strcaseabb:

; 107  :             if (*a == *s)

  000f0	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  000f5	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000f8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  000fd	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00100	3b c1		 cmp	 eax, ecx
  00102	75 02		 jne	 SHORT $LN9@strcaseabb

; 108  :                 continue;

  00104	eb 85		 jmp	 SHORT $LN2@strcaseabb
$LN9@strcaseabb:

; 109  :             if (asciitoupper(*a) != asciitoupper(*s))

  00106	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0010b	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0010e	e8 00 00 00 00	 call	 asciitoupper
  00113	0f be c0	 movsx	 eax, al
  00116	89 44 24 28	 mov	 DWORD PTR tv93[rsp], eax
  0011a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  0011f	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00122	e8 00 00 00 00	 call	 asciitoupper
  00127	0f be c0	 movsx	 eax, al
  0012a	8b 4c 24 28	 mov	 ecx, DWORD PTR tv93[rsp]
  0012e	3b c8		 cmp	 ecx, eax
  00130	74 02		 je	 SHORT $LN10@strcaseabb

; 110  :                 break;

  00132	eb 05		 jmp	 SHORT $LN3@strcaseabb
$LN10@strcaseabb:

; 111  :         }

  00134	e9 52 ff ff ff	 jmp	 $LN2@strcaseabb
$LN3@strcaseabb:
$LN5@strcaseabb:

; 112  :     }
; 113  :     return 0;

  00139	33 c0		 xor	 eax, eax
$LN1@strcaseabb:

; 114  : }

  0013b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0013f	c3		 ret	 0
strcaseabbrev ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\extstring.h
_TEXT	SEGMENT
c$ = 8
asciitoupper PROC

; 29   : {

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl

; 30   :   if (c < 'a' || c > 'z')

  00004	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  00009	83 f8 61	 cmp	 eax, 97			; 00000061H
  0000c	7c 0a		 jl	 SHORT $LN3@asciitoupp
  0000e	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  00013	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00016	7e 07		 jle	 SHORT $LN2@asciitoupp
$LN3@asciitoupp:

; 31   :       return c;

  00018	0f b6 44 24 08	 movzx	 eax, BYTE PTR c$[rsp]
  0001d	eb 08		 jmp	 SHORT $LN1@asciitoupp
$LN2@asciitoupp:

; 32   :   return (c - 32);

  0001f	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  00024	83 e8 20	 sub	 eax, 32			; 00000020H
$LN1@asciitoupp:

; 33   : }

  00027	c3		 ret	 0
asciitoupper ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sscanf	PROC						; COMDAT

; 2247 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsscanf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2252 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2253 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2254 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2152 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2153 :         return __stdio_common_vsscanf(

  00018	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  0003d	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00007	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
END
