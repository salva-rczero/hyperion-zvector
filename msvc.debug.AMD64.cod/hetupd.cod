; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vsnprintf_l
PUBLIC	_vsprintf_l
PUBLIC	sprintf
PUBLIC	main
EXTRN	__imp__stricmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp_rand:PROC
EXTRN	__imp_atoi:PROC
EXTRN	__imp_remove:PROC
EXTRN	__imp_rename:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp__ftelli64:PROC
EXTRN	__imp___stdio_common_vsprintf:PROC
EXTRN	__imp_initialize_utility:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_w32_fprintf:PROC
EXTRN	__imp_het_open:PROC
EXTRN	__imp_het_close:PROC
EXTRN	__imp_het_read:PROC
EXTRN	__imp_het_write:PROC
EXTRN	__imp_het_tapemark:PROC
EXTRN	__imp_het_cntl:PROC
EXTRN	__imp_het_error:PROC
EXTRN	__imp_getopt:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_fet_open:PROC
EXTRN	__imp_fet_close:PROC
EXTRN	__imp_fet_read:PROC
EXTRN	__imp_fet_write:PROC
EXTRN	__imp_fet_tapemark:PROC
EXTRN	__imp_fet_error:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_extgui:DWORD
EXTRN	__imp_optind:DWORD
EXTRN	__imp_optarg:QWORD
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
buf	DB	0200000H DUP (?)
o_verbose DD	01H DUP (?)
	ALIGN	8

o_sname	DQ	01H DUP (?)
o_dname	DQ	01H DUP (?)
dorename DD	01H DUP (?)
i_faketape DD	01H DUP (?)
o_faketape DD	01H DUP (?)
	ALIGN	8

s_hetb	DQ	01H DUP (?)
s_fetb	DQ	01H DUP (?)
d_hetb	DQ	01H DUP (?)
d_fetb	DQ	01H DUP (?)
prevpos	DQ	01H DUP (?)
$SG169489 DB	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+118
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sprintf
pdata	ENDS
pdata	SEGMENT
$pdata$usage DD	imagerel usage
	DD	imagerel usage+117
	DD	imagerel $unwind$usage
$pdata$yesno DD	imagerel yesno
	DD	imagerel yesno+48
	DD	imagerel $unwind$yesno
$pdata$closetapes DD imagerel closetapes
	DD	imagerel closetapes+473
	DD	imagerel $unwind$closetapes
$pdata$copytape DD imagerel copytape
	DD	imagerel copytape+1144
	DD	imagerel $unwind$copytape
$pdata$opentapes DD imagerel opentapes
	DD	imagerel opentapes+3002
	DD	imagerel $unwind$opentapes
$pdata$main DD	imagerel $LN35
	DD	imagerel $LN35+1058
	DD	imagerel $unwind$main
pdata	ENDS
_DATA	SEGMENT
o_chunksize DD	0ffffH
o_decompress DD	01H
o_compress DD	01H
o_level	DD	04H
o_method DD	01H
$SG169490 DB	'I', 00H
	ORG $+10
$SG169491 DB	'HHC02730%s Usage: %s [options] source [dest]', 0aH, 'HHC'
	DB	'02730I', 0aH, 'HHC02730I   Options:', 0aH, 'HHC02730I       -'
	DB	'1    compress fast', 0aH, 'HHC02730I             ...', 0aH, 'H'
	DB	'HC02730I       -9    compress best', 0aH, 'HHC02730I %sHHC027'
	DB	'30I       -c n  set chunk size to "n"', 0aH, 'HHC02730I      '
	DB	' -d    decompress source tape', 0aH, 'HHC02730I       -h    d'
	DB	'isplay usage summary', 0aH, 'HHC02730I       -r    rechunk', 0aH
	DB	'HHC02730I       -s    strict AWSTAPE specification (chunksize'
	DB	'=4096,no compression)', 0aH, 'HHC02730I       -v    verbose ('
	DB	'debug) information', 0aH, 'HHC02730I       -z    use ZLIB com'
	DB	'pression', 0aH, 0aH, 00H
	ORG $+1
$SG169492 DB	'usage', 00H
	ORG $+2
$SG169493 DB	'hetupd.c', 00H
	ORG $+3
$SG169498 DB	'Yes', 00H
$SG169499 DB	'No', 00H
	ORG $+1
$SG169517 DB	'I', 00H
	ORG $+2
$SG169518 DB	'HHC02745%s File %s: Error removing file - manual interve'
	DB	'ntion required', 0aH, 00H
$SG169519 DB	'closetapes', 00H
	ORG $+1
$SG169522 DB	'I', 00H
	ORG $+2
$SG169520 DB	'hetupd.c', 00H
	ORG $+7
$SG169524 DB	'closetapes', 00H
	ORG $+1
$SG169527 DB	'I', 00H
	ORG $+2
$SG169557 DB	'fet_tapemark()', 00H
	ORG $+1
$SG169559 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG169523 DB	'HHC02744%s File %s: Error renaming file to %s - manual i'
	DB	'ntervention required', 0aH, 00H
	ORG $+2
$SG169525 DB	'hetupd.c', 00H
	ORG $+7
$SG169528 DB	'HHC02745%s File %s: Error removing file - manual interve'
	DB	'ntion required', 0aH, 00H
$SG169529 DB	'closetapes', 00H
	ORG $+1
$SG169558 DB	'E', 00H
	ORG $+2
$SG169530 DB	'hetupd.c', 00H
	ORG $+3
$SG169563 DB	'E', 00H
	ORG $+2
$SG169547 DB	'IPOS=%lld', 0aH, 00H
	ORG $+1
$SG169571 DB	'E', 00H
	ORG $+2
$SG169560 DB	'copytape', 00H
	ORG $+3
$SG169576 DB	'E', 00H
	ORG $+2
$SG169561 DB	'hetupd.c', 00H
	ORG $+3
$SG169586 DB	'E', 00H
	ORG $+2
$SG169562 DB	'het_tapemark()', 00H
	ORG $+1
$SG169564 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG169565 DB	'copytape', 00H
	ORG $+3
$SG169591 DB	'E', 00H
	ORG $+2
$SG169566 DB	'hetupd.c', 00H
	ORG $+3
$SG169612 DB	'E', 00H
	ORG $+2
$SG169570 DB	'fet_read()', 00H
	ORG $+1
$SG169622 DB	'E', 00H
	ORG $+2
$SG169572 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG169573 DB	'copytape', 00H
	ORG $+3
$SG169629 DB	'I', 00H
	ORG $+2
$SG169574 DB	'hetupd.c', 00H
	ORG $+3
$SG169636 DB	'E', 00H
	ORG $+2
$SG169575 DB	'het_read()', 00H
	ORG $+1
$SG169643 DB	'I', 00H
	ORG $+2
$SG169577 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG169578 DB	'copytape', 00H
	ORG $+3
$SG169650 DB	'E', 00H
	ORG $+2
$SG169579 DB	'hetupd.c', 00H
	ORG $+3
$SG169655 DB	'%d', 00H
	ORG $+1
$SG169585 DB	'fet_write()', 00H
$SG169657 DB	'I', 00H
	ORG $+2
$SG169587 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG169588 DB	'copytape', 00H
	ORG $+3
$SG169656 DB	'method', 00H
	ORG $+1
$SG169664 DB	'E', 00H
	ORG $+2
$SG169589 DB	'hetupd.c', 00H
	ORG $+3
$SG169669 DB	'%d', 00H
	ORG $+1
$SG169590 DB	'het_write()', 00H
$SG169671 DB	'I', 00H
	ORG $+2
$SG169592 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG169593 DB	'copytape', 00H
	ORG $+3
$SG169670 DB	'level', 00H
	ORG $+2
$SG169678 DB	'E', 00H
	ORG $+2
$SG169594 DB	'hetupd.c', 00H
	ORG $+3
$SG169607 DB	'.fkt', 00H
	ORG $+3
$SG169683 DB	'%d', 00H
	ORG $+1
$SG169613 DB	'HHC02720%s File %s: Error opening: errno=%d: %s', 0aH, 00H
	ORG $+3
$SG169685 DB	'I', 00H
	ORG $+2
$SG169614 DB	'opentapes', 00H
	ORG $+2
$SG169692 DB	'E', 00H
	ORG $+2
$SG169615 DB	'hetupd.c', 00H
	ORG $+3
$SG169617 DB	'.fkt', 00H
	ORG $+3
$SG169698 DB	'I', 00H
	ORG $+2
$SG169623 DB	'HHC02720%s File %s: Error opening: errno=%d: %s', 0aH, 00H
	ORG $+3
$SG169703 DB	'I', 00H
	ORG $+2
$SG169624 DB	'opentapes', 00H
	ORG $+2
$SG169709 DB	'I', 00H
	ORG $+2
$SG169625 DB	'hetupd.c', 00H
	ORG $+3
$SG169715 DB	'I', 00H
	ORG $+2
$SG169628 DB	'decompress', 00H
	ORG $+1
$SG169720 DB	'I', 00H
	ORG $+2
$SG169630 DB	'HHC02755%s HET: Setting option %s to %s', 0aH, 00H
	ORG $+3
$SG169725 DB	'I', 00H
	ORG $+2
$SG169631 DB	'opentapes', 00H
	ORG $+2
$SG169745 DB	'hetupd', 00H
	ORG $+1
$SG169772 DB	'E', 00H
	ORG $+2
$SG169632 DB	'hetupd.c', 00H
	ORG $+3
$SG169778 DB	'E', 00H
	ORG $+2
$SG169635 DB	'het_cntl()', 00H
	ORG $+5
$SG169637 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG169638 DB	'opentapes', 00H
	ORG $+6
$SG169639 DB	'hetupd.c', 00H
	ORG $+7
$SG169642 DB	'compress', 00H
	ORG $+7
$SG169644 DB	'HHC02755%s HET: Setting option %s to %s', 0aH, 00H
	ORG $+7
$SG169645 DB	'opentapes', 00H
	ORG $+6
$SG169646 DB	'hetupd.c', 00H
	ORG $+7
$SG169649 DB	'het_cntl()', 00H
	ORG $+5
$SG169651 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG169652 DB	'opentapes', 00H
	ORG $+6
$SG169653 DB	'hetupd.c', 00H
	ORG $+7
$SG169658 DB	'HHC02755%s HET: Setting option %s to %s', 0aH, 00H
	ORG $+7
$SG169659 DB	'opentapes', 00H
	ORG $+6
$SG169660 DB	'hetupd.c', 00H
	ORG $+7
$SG169663 DB	'het_cntl()', 00H
	ORG $+5
$SG169665 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG169666 DB	'opentapes', 00H
	ORG $+6
$SG169667 DB	'hetupd.c', 00H
	ORG $+7
$SG169672 DB	'HHC02755%s HET: Setting option %s to %s', 0aH, 00H
	ORG $+7
$SG169673 DB	'opentapes', 00H
	ORG $+6
$SG169674 DB	'hetupd.c', 00H
	ORG $+7
$SG169677 DB	'het_cntl()', 00H
	ORG $+5
$SG169679 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG169680 DB	'opentapes', 00H
	ORG $+6
$SG169681 DB	'hetupd.c', 00H
	ORG $+7
$SG169684 DB	'chunksize', 00H
	ORG $+6
$SG169686 DB	'HHC02755%s HET: Setting option %s to %s', 0aH, 00H
	ORG $+7
$SG169687 DB	'opentapes', 00H
	ORG $+6
$SG169688 DB	'hetupd.c', 00H
	ORG $+7
$SG169691 DB	'het_cntl()', 00H
	ORG $+5
$SG169693 DB	'HHC00075%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG169694 DB	'opentapes', 00H
	ORG $+6
$SG169695 DB	'hetupd.c', 00H
	ORG $+7
$SG169697 DB	'Source             : %s', 00H
$SG169699 DB	'HHC02757%s HET: %s', 0aH, 00H
	ORG $+4
$SG169700 DB	'opentapes', 00H
	ORG $+6
$SG169701 DB	'hetupd.c', 00H
	ORG $+7
$SG169702 DB	'Destination        : %s', 00H
$SG169704 DB	'HHC02757%s HET: %s', 0aH, 00H
	ORG $+4
$SG169705 DB	'opentapes', 00H
	ORG $+6
$SG169706 DB	'hetupd.c', 00H
	ORG $+7
$SG169708 DB	'Decompress source  : %s', 00H
$SG169710 DB	'HHC02757%s HET: %s', 0aH, 00H
	ORG $+4
$SG169711 DB	'opentapes', 00H
	ORG $+6
$SG169712 DB	'hetupd.c', 00H
	ORG $+7
$SG169714 DB	'Compress dest      : %s', 00H
$SG169716 DB	'HHC02757%s HET: %s', 0aH, 00H
	ORG $+4
$SG169717 DB	'opentapes', 00H
	ORG $+6
$SG169718 DB	'hetupd.c', 00H
	ORG $+7
$SG169719 DB	'Compression method : %d', 00H
$SG169721 DB	'HHC02757%s HET: %s', 0aH, 00H
	ORG $+4
$SG169722 DB	'opentapes', 00H
	ORG $+6
$SG169723 DB	'hetupd.c', 00H
	ORG $+7
$SG169724 DB	'Compression level  : %d', 00H
$SG169726 DB	'HHC02757%s HET: %s', 0aH, 00H
	ORG $+4
$SG169727 DB	'opentapes', 00H
	ORG $+6
$SG169728 DB	'hetupd.c', 00H
	ORG $+7
$SG169744 DB	'HET Copy/Update', 00H
$SG169746 DB	'c:dhrsvz0123456789', 00H
	ORG $+5
$SG169766 DB	'%s.%010d', 00H
	ORG $+7
$SG169771 DB	'opening', 00H
$SG169773 DB	'HHC02756%s HET: HETLIB reported error %s files; %s', 0aH
	DB	00H
$SG169774 DB	'main', 00H
	ORG $+7
$SG169775 DB	'hetupd.c', 00H
	ORG $+7
$SG169777 DB	'copying', 00H
$SG169779 DB	'HHC02756%s HET: HETLIB reported error %s files; %s', 0aH
	DB	00H
$SG169780 DB	'main', 00H
	ORG $+7
$SG169781 DB	'hetupd.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main
	DD	01aH
	DD	037cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:opentapes
	DD	011H
	DD	0ba2H
voltbl	ENDS
xdata	SEGMENT
$unwind$usage DD 010901H
	DD	0c209H
$unwind$yesno DD 010801H
	DD	02208H
$unwind$closetapes DD 010801H
	DD	0a208H
$unwind$copytape DD 020701H
	DD	0130107H
$unwind$opentapes DD 021919H
	DD	02d0107H
	DD	imagerel __GSHandlerCheck
	DD	0150H
$unwind$main DD	022219H
	DD	0350110H
	DD	imagerel __GSHandlerCheck
	DD	0190H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 011801H
	DD	08218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hetupd.c
_TEXT	SEGMENT
rc$ = 80
tv76 = 84
tv85 = 88
pgm$ = 96
tv138 = 104
tv153 = 112
toname$ = 128
__$ArrayPad$ = 400
argc$ = 432
argv$ = 440
main	PROC

; 376  : {

$LN35:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  00010	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00017	48 33 c4	 xor	 rax, rsp
  0001a	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 377  :     char  *pgm;                    /* less any extension (.ext) */
; 378  :     char   toname[ MAX_PATH ];
; 379  :     int    rc;
; 380  : 
; 381  :     INITIALIZE_UTILITY( UTILITY_NAME, UTILITY_DESC, &pgm );

  00022	48 8d 44 24 60	 lea	 rax, QWORD PTR pgm$[rsp]
  00027	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169744
  00033	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169745
  0003a	48 8b 94 24 b8
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00042	8b 8c 24 b0 01
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  00049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_initialize_utility
  0004f	89 84 24 b0 01
	00 00		 mov	 DWORD PTR argc$[rsp], eax
$LN2@main:

; 382  : 
; 383  :     while( TRUE )

  00056	33 c0		 xor	 eax, eax
  00058	83 f8 01	 cmp	 eax, 1
  0005b	0f 84 3f 01 00
	00		 je	 $LN3@main

; 384  :     {
; 385  : #if defined( HET_BZIP2 )
; 386  :         rc = getopt( argc, argv, "bc:dhrsvz0123456789" );
; 387  : #else
; 388  :         rc = getopt( argc, argv, "c:dhrsvz0123456789" );

  00061	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169746
  00068	48 8b 94 24 b8
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00070	8b 8c 24 b0 01
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getopt
  0007d	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 389  : #endif /* defined( HET_BZIP2 ) */
; 390  :         if( rc == -1 )

  00081	83 7c 24 50 ff	 cmp	 DWORD PTR rc$[rsp], -1
  00086	75 05		 jne	 SHORT $LN8@main

; 391  :         {
; 392  :             break;

  00088	e9 13 01 00 00	 jmp	 $LN3@main
$LN8@main:

; 393  :         }
; 394  : 
; 395  :         switch( rc )

  0008d	8b 44 24 50	 mov	 eax, DWORD PTR rc$[rsp]
  00091	89 44 24 54	 mov	 DWORD PTR tv76[rsp], eax
  00095	8b 44 24 54	 mov	 eax, DWORD PTR tv76[rsp]
  00099	83 e8 31	 sub	 eax, 49			; 00000031H
  0009c	89 44 24 54	 mov	 DWORD PTR tv76[rsp], eax
  000a0	83 7c 24 54 49	 cmp	 DWORD PTR tv76[rsp], 73	; 00000049H
  000a5	0f 87 dc 00 00
	00		 ja	 $LN25@main
  000ab	48 63 44 24 54	 movsxd	 rax, DWORD PTR tv76[rsp]
  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  000b7	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN33@main[rcx+rax]
  000bf	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN34@main[rcx+rax*4]
  000c6	48 03 c1	 add	 rax, rcx
  000c9	ff e0		 jmp	 rax
$LN9@main:
$LN10@main:
$LN11@main:
$LN12@main:
$LN13@main:
$LN14@main:
$LN15@main:
$LN16@main:
$LN17@main:

; 396  :         {
; 397  :             case '1': case '2': case '3': case '4': /* Compression level     */
; 398  :             case '5': case '6': case '7': case '8':
; 399  :             case '9':
; 400  :                 o_level = ( rc - '0' );

  000cb	8b 44 24 50	 mov	 eax, DWORD PTR rc$[rsp]
  000cf	83 e8 30	 sub	 eax, 48			; 00000030H
  000d2	89 05 00 00 00
	00		 mov	 DWORD PTR o_level, eax

; 401  :             break;

  000d8	e9 be 00 00 00	 jmp	 $LN4@main
$LN18@main:

; 402  : 
; 403  : #if defined( HET_BZIP2 )
; 404  :             case 'b':                               /* Use BZLIB compression */
; 405  :                 o_method = HETMETH_BZLIB;
; 406  :                 o_compress = TRUE;
; 407  :                 o_decompress = TRUE;
; 408  :             break;
; 409  : #endif /* defined( HET_BZIP2 ) */
; 410  : 
; 411  :             case 'c':                               /* Chunk size           */
; 412  :                 o_chunksize = atoi( optarg );

  000dd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  000e4	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  000ed	89 05 00 00 00
	00		 mov	 DWORD PTR o_chunksize, eax

; 413  :             break;

  000f3	e9 a3 00 00 00	 jmp	 $LN4@main
$LN19@main:

; 414  : 
; 415  :             case 'd':                               /* Decompress           */
; 416  :                 o_compress = FALSE;

  000f8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR o_compress, 0

; 417  :                 o_decompress = TRUE;

  00102	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR o_decompress, 1

; 418  :             break;

  0010c	e9 8a 00 00 00	 jmp	 $LN4@main
$LN20@main:

; 419  : 
; 420  :             case 'h':                               /* Print usage          */
; 421  :                 usage( pgm );

  00111	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pgm$[rsp]
  00116	e8 00 00 00 00	 call	 usage

; 422  :                 return 1;

  0011b	b8 01 00 00 00	 mov	 eax, 1
  00120	e9 57 02 00 00	 jmp	 $LN1@main
$LN21@main:

; 423  : 
; 424  :             case 'r':                               /* Rechunk              */
; 425  :                 o_compress = FALSE;

  00125	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR o_compress, 0

; 426  :                 o_decompress = FALSE;

  0012f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR o_decompress, 0

; 427  :             break;

  00139	eb 60		 jmp	 SHORT $LN4@main
$LN22@main:

; 428  : 
; 429  :             case 's':                               /* Strict HET spec      */
; 430  :                 o_chunksize = 4096;

  0013b	c7 05 00 00 00
	00 00 10 00 00	 mov	 DWORD PTR o_chunksize, 4096 ; 00001000H

; 431  :                 o_compress = FALSE;

  00145	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR o_compress, 0

; 432  :                 o_decompress = TRUE;

  0014f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR o_decompress, 1

; 433  :             break;

  00159	eb 40		 jmp	 SHORT $LN4@main
$LN23@main:

; 434  : 
; 435  :             case 'v':                               /* Be chatty            */
; 436  :                 o_verbose = TRUE;

  0015b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR o_verbose, 1

; 437  :             break;

  00165	eb 34		 jmp	 SHORT $LN4@main
$LN24@main:

; 438  : 
; 439  :             case 'z':                               /* Use ZLIB compression */
; 440  :                 o_method = HETMETH_ZLIB;

  00167	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR o_method, 1

; 441  :                 o_compress = TRUE;

  00171	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR o_compress, 1

; 442  :                 o_decompress = TRUE;

  0017b	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR o_decompress, 1

; 443  :             break;

  00185	eb 14		 jmp	 SHORT $LN4@main
$LN25@main:

; 444  : 
; 445  :             default:                                /* Print usage          */
; 446  :                 usage( pgm );

  00187	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pgm$[rsp]
  0018c	e8 00 00 00 00	 call	 usage

; 447  :                 return 1;

  00191	b8 01 00 00 00	 mov	 eax, 1
  00196	e9 e1 01 00 00	 jmp	 $LN1@main
$LN4@main:

; 448  :         }
; 449  :     }

  0019b	e9 b6 fe ff ff	 jmp	 $LN2@main
$LN3@main:

; 450  : 
; 451  :     argc -= optind;

  001a0	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  001a7	8b 00		 mov	 eax, DWORD PTR [rax]
  001a9	8b 8c 24 b0 01
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  001b0	2b c8		 sub	 ecx, eax
  001b2	8b c1		 mov	 eax, ecx
  001b4	89 84 24 b0 01
	00 00		 mov	 DWORD PTR argc$[rsp], eax

; 452  : 
; 453  :     switch( argc )

  001bb	8b 84 24 b0 01
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  001c2	89 44 24 58	 mov	 DWORD PTR tv85[rsp], eax
  001c6	83 7c 24 58 01	 cmp	 DWORD PTR tv85[rsp], 1
  001cb	74 09		 je	 SHORT $LN26@main
  001cd	83 7c 24 58 02	 cmp	 DWORD PTR tv85[rsp], 2
  001d2	74 50		 je	 SHORT $LN27@main
  001d4	eb 70		 jmp	 SHORT $LN28@main
$LN26@main:

; 454  :     {
; 455  :         case 1:
; 456  :             sprintf( toname, "%s.%010d", argv[ optind ], rand() );

  001d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rand
  001dc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_optind
  001e3	48 63 09	 movsxd	 rcx, DWORD PTR [rcx]
  001e6	44 8b c8	 mov	 r9d, eax
  001e9	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  001f1	4c 8b 04 c8	 mov	 r8, QWORD PTR [rax+rcx*8]
  001f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169766
  001fc	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR toname$[rsp]
  00204	e8 00 00 00 00	 call	 sprintf

; 457  :             o_dname = toname;

  00209	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR toname$[rsp]
  00211	48 89 05 00 00
	00 00		 mov	 QWORD PTR o_dname, rax

; 458  :             dorename = TRUE;

  00218	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR dorename, 1

; 459  :         break;

  00222	eb 36		 jmp	 SHORT $LN6@main
$LN27@main:

; 460  : 
; 461  :         case 2:
; 462  :             o_dname = argv[ optind + 1 ];

  00224	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  0022b	8b 00		 mov	 eax, DWORD PTR [rax]
  0022d	ff c0		 inc	 eax
  0022f	48 98		 cdqe
  00231	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00239	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  0023d	48 89 05 00 00
	00 00		 mov	 QWORD PTR o_dname, rax

; 463  :         break;

  00244	eb 14		 jmp	 SHORT $LN6@main
$LN28@main:

; 464  : 
; 465  :         default:
; 466  :             usage( pgm );

  00246	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pgm$[rsp]
  0024b	e8 00 00 00 00	 call	 usage

; 467  :             return 1;

  00250	b8 01 00 00 00	 mov	 eax, 1
  00255	e9 22 01 00 00	 jmp	 $LN1@main
$LN6@main:

; 468  :     }
; 469  :     o_sname = argv[ optind ] ;

  0025a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00261	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00264	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0026c	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00270	48 89 05 00 00
	00 00		 mov	 QWORD PTR o_sname, rax

; 470  : 
; 471  :     rc = opentapes();

  00277	e8 00 00 00 00	 call	 opentapes
  0027c	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 472  :     if( rc < 0 )

  00280	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  00285	7d 6e		 jge	 SHORT $LN29@main

; 473  :     {
; 474  :         // "HET: HETLIB reported error %s files; %s"
; 475  :         FWRMSG( stderr, HHC02756, "E", "opening", het_error( rc ) );

  00287	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  0028b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  00291	48 89 44 24 68	 mov	 QWORD PTR tv138[rsp], rax
  00296	b9 02 00 00 00	 mov	 ecx, 2
  0029b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002a1	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv138[rsp]
  002a6	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169771
  002b2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169772
  002be	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169773
  002ca	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002cf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002d4	41 b9 03 00 00
	00		 mov	 r9d, 3
  002da	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169774
  002e1	ba db 01 00 00	 mov	 edx, 475		; 000001dbH
  002e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169775
  002ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 476  :     }

  002f3	eb 7c		 jmp	 SHORT $LN30@main
$LN29@main:

; 477  :     else
; 478  :     {
; 479  :         rc = copytape();

  002f5	e8 00 00 00 00	 call	 copytape
  002fa	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 480  :         if( rc < 0 )

  002fe	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  00303	7d 6c		 jge	 SHORT $LN31@main

; 481  :         {
; 482  :             // "HET: HETLIB reported error %s files; %s"
; 483  :             FWRMSG( stderr, HHC02756, "E", "copying", het_error( rc ) );

  00305	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  00309	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  0030f	48 89 44 24 70	 mov	 QWORD PTR tv153[rsp], rax
  00314	b9 02 00 00 00	 mov	 ecx, 2
  00319	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0031f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv153[rsp]
  00324	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00329	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169777
  00330	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00335	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169778
  0033c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00341	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169779
  00348	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0034d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00352	41 b9 03 00 00
	00		 mov	 r9d, 3
  00358	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169780
  0035f	ba e3 01 00 00	 mov	 edx, 483		; 000001e3H
  00364	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169781
  0036b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN31@main:
$LN30@main:

; 484  :         }
; 485  :     }
; 486  : 
; 487  :     closetapes( rc );

  00371	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  00375	e8 00 00 00 00	 call	 closetapes

; 488  : 
; 489  :     return 0;

  0037a	33 c0		 xor	 eax, eax
$LN1@main:

; 490  : }

  0037c	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00384	48 33 cc	 xor	 rcx, rsp
  00387	e8 00 00 00 00	 call	 __security_check_cookie
  0038c	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00393	c3		 ret	 0
$LN34@main:
  00394	00 00 00 00	 DD	 $LN9@main
  00398	00 00 00 00	 DD	 $LN10@main
  0039c	00 00 00 00	 DD	 $LN11@main
  003a0	00 00 00 00	 DD	 $LN12@main
  003a4	00 00 00 00	 DD	 $LN13@main
  003a8	00 00 00 00	 DD	 $LN14@main
  003ac	00 00 00 00	 DD	 $LN15@main
  003b0	00 00 00 00	 DD	 $LN16@main
  003b4	00 00 00 00	 DD	 $LN17@main
  003b8	00 00 00 00	 DD	 $LN18@main
  003bc	00 00 00 00	 DD	 $LN19@main
  003c0	00 00 00 00	 DD	 $LN20@main
  003c4	00 00 00 00	 DD	 $LN21@main
  003c8	00 00 00 00	 DD	 $LN22@main
  003cc	00 00 00 00	 DD	 $LN23@main
  003d0	00 00 00 00	 DD	 $LN24@main
  003d4	00 00 00 00	 DD	 $LN25@main
$LN33@main:
  003d8	00		 DB	 0
  003d9	01		 DB	 1
  003da	02		 DB	 2
  003db	03		 DB	 3
  003dc	04		 DB	 4
  003dd	05		 DB	 5
  003de	06		 DB	 6
  003df	07		 DB	 7
  003e0	08		 DB	 8
  003e1	10		 DB	 16
  003e2	10		 DB	 16
  003e3	10		 DB	 16
  003e4	10		 DB	 16
  003e5	10		 DB	 16
  003e6	10		 DB	 16
  003e7	10		 DB	 16
  003e8	10		 DB	 16
  003e9	10		 DB	 16
  003ea	10		 DB	 16
  003eb	10		 DB	 16
  003ec	10		 DB	 16
  003ed	10		 DB	 16
  003ee	10		 DB	 16
  003ef	10		 DB	 16
  003f0	10		 DB	 16
  003f1	10		 DB	 16
  003f2	10		 DB	 16
  003f3	10		 DB	 16
  003f4	10		 DB	 16
  003f5	10		 DB	 16
  003f6	10		 DB	 16
  003f7	10		 DB	 16
  003f8	10		 DB	 16
  003f9	10		 DB	 16
  003fa	10		 DB	 16
  003fb	10		 DB	 16
  003fc	10		 DB	 16
  003fd	10		 DB	 16
  003fe	10		 DB	 16
  003ff	10		 DB	 16
  00400	10		 DB	 16
  00401	10		 DB	 16
  00402	10		 DB	 16
  00403	10		 DB	 16
  00404	10		 DB	 16
  00405	10		 DB	 16
  00406	10		 DB	 16
  00407	10		 DB	 16
  00408	10		 DB	 16
  00409	10		 DB	 16
  0040a	09		 DB	 9
  0040b	0a		 DB	 10
  0040c	10		 DB	 16
  0040d	10		 DB	 16
  0040e	10		 DB	 16
  0040f	0b		 DB	 11
  00410	10		 DB	 16
  00411	10		 DB	 16
  00412	10		 DB	 16
  00413	10		 DB	 16
  00414	10		 DB	 16
  00415	10		 DB	 16
  00416	10		 DB	 16
  00417	10		 DB	 16
  00418	10		 DB	 16
  00419	0c		 DB	 12
  0041a	0d		 DB	 13
  0041b	10		 DB	 16
  0041c	10		 DB	 16
  0041d	0e		 DB	 14
  0041e	10		 DB	 16
  0041f	10		 DB	 16
  00420	10		 DB	 16
  00421	0f		 DB	 15
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hetupd.c
_TEXT	SEGMENT
rc$ = 80
tv87 = 88
tv156 = 96
tv172 = 104
tv191 = 112
tv206 = 120
tv257 = 128
tv292 = 136
tv327 = 144
tv394 = 152
msgbuf$1 = 160
msgbuf$2 = 176
msgbuf$3 = 192
msgbuf$4 = 208
__$ArrayPad$ = 336
opentapes PROC

; 216  : {

  00000	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00007	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000e	48 33 c4	 xor	 rax, rsp
  00011	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 217  :     int rc;
; 218  : 
; 219  :     if ( ( rc = (int)strlen( o_sname ) ) > 4 &&

  00019	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR o_sname
  00020	e8 00 00 00 00	 call	 strlen
  00025	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
  00029	83 7c 24 50 04	 cmp	 DWORD PTR rc$[rsp], 4
  0002e	7e 3b		 jle	 SHORT $LN2@opentapes
  00030	8b 44 24 50	 mov	 eax, DWORD PTR rc$[rsp]
  00034	83 e8 04	 sub	 eax, 4
  00037	48 98		 cdqe
  00039	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR o_sname
  00040	48 03 c8	 add	 rcx, rax
  00043	48 8b c1	 mov	 rax, rcx
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169607
  0004d	48 8b c8	 mov	 rcx, rax
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00056	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
  0005a	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN2@opentapes

; 220  :         ( rc = strcasecmp( &o_sname[rc-4], ".fkt" ) ) == 0 )
; 221  :     {
; 222  :         i_faketape = TRUE;

  00061	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR i_faketape, 1
$LN2@opentapes:

; 223  :     }
; 224  : 
; 225  :     if ( i_faketape )

  0006b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR i_faketape, 0
  00072	74 20		 je	 SHORT $LN3@opentapes

; 226  :         rc = fet_open( &s_fetb, o_sname, FETOPEN_READONLY );

  00074	41 b8 02 00 00
	00		 mov	 r8d, 2
  0007a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR o_sname
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s_fetb
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_open
  0008e	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
  00092	eb 1e		 jmp	 SHORT $LN4@opentapes
$LN3@opentapes:

; 227  :     else
; 228  :         rc = het_open( &s_hetb, o_sname, HETOPEN_READONLY );

  00094	41 b8 02 00 00
	00		 mov	 r8d, 2
  0009a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR o_sname
  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s_hetb
  000a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_open
  000ae	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
$LN4@opentapes:

; 229  :     if( rc < 0 )

  000b2	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  000b7	0f 8d 8c 00 00
	00		 jge	 $LN5@opentapes

; 230  :     {
; 231  :         dorename = FALSE;

  000bd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR dorename, 0

; 232  :         if ( o_verbose )

  000c7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR o_verbose, 0
  000ce	74 74		 je	 SHORT $LN6@opentapes

; 233  :             // "File %s: Error opening: errno=%d: %s"
; 234  :             FWRMSG( stderr, HHC02720, "E", o_sname, rc, het_error( rc ) );

  000d0	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  000da	48 89 44 24 58	 mov	 QWORD PTR tv87[rsp], rax
  000df	b9 02 00 00 00	 mov	 ecx, 2
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000ea	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv87[rsp]
  000ef	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000f4	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  000f8	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000fc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR o_sname
  00103	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00108	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169612
  0010f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00114	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169613
  0011b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00120	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00125	41 b9 03 00 00
	00		 mov	 r9d, 3
  0012b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169614
  00132	ba ea 00 00 00	 mov	 edx, 234		; 000000eaH
  00137	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169615
  0013e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN6@opentapes:

; 235  :         goto exit;

  00144	e9 55 0a 00 00	 jmp	 $exit$33
$LN5@opentapes:

; 236  :     }
; 237  : 
; 238  :     if ( ( rc = (int)strlen( o_dname ) ) > 4 &&

  00149	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR o_dname
  00150	e8 00 00 00 00	 call	 strlen
  00155	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
  00159	83 7c 24 50 04	 cmp	 DWORD PTR rc$[rsp], 4
  0015e	7e 3b		 jle	 SHORT $LN7@opentapes
  00160	8b 44 24 50	 mov	 eax, DWORD PTR rc$[rsp]
  00164	83 e8 04	 sub	 eax, 4
  00167	48 98		 cdqe
  00169	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR o_dname
  00170	48 03 c8	 add	 rcx, rax
  00173	48 8b c1	 mov	 rax, rcx
  00176	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169617
  0017d	48 8b c8	 mov	 rcx, rax
  00180	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00186	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
  0018a	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  0018f	75 0a		 jne	 SHORT $LN7@opentapes

; 239  :         ( rc = strcasecmp( &o_dname[rc-4], ".fkt" ) ) == 0 )
; 240  :     {
; 241  :         o_faketape = TRUE;

  00191	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR o_faketape, 1
$LN7@opentapes:

; 242  :     }
; 243  : 
; 244  :     if ( o_faketape )

  0019b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR o_faketape, 0
  001a2	74 20		 je	 SHORT $LN8@opentapes

; 245  :         rc = fet_open( &d_fetb, o_dname, FETOPEN_CREATE );

  001a4	41 b8 01 00 00
	00		 mov	 r8d, 1
  001aa	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR o_dname
  001b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:d_fetb
  001b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_open
  001be	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
  001c2	eb 1e		 jmp	 SHORT $LN9@opentapes
$LN8@opentapes:

; 246  :     else
; 247  :         rc = het_open( &d_hetb, o_dname, HETOPEN_CREATE );

  001c4	41 b8 01 00 00
	00		 mov	 r8d, 1
  001ca	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR o_dname
  001d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:d_hetb
  001d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_open
  001de	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
$LN9@opentapes:

; 248  :     if( rc < 0 )

  001e2	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  001e7	0f 8d 8c 00 00
	00		 jge	 $LN10@opentapes

; 249  :     {
; 250  :         dorename = FALSE;

  001ed	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR dorename, 0

; 251  :         if ( o_verbose )

  001f7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR o_verbose, 0
  001fe	74 74		 je	 SHORT $LN11@opentapes

; 252  :             // "File %s: Error opening: errno=%d: %s"
; 253  :             FWRMSG( stderr, HHC02720, "E", o_dname, rc, het_error( rc ) );

  00200	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  00204	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  0020a	48 89 44 24 60	 mov	 QWORD PTR tv156[rsp], rax
  0020f	b9 02 00 00 00	 mov	 ecx, 2
  00214	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0021a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv156[rsp]
  0021f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00224	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  00228	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0022c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR o_dname
  00233	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00238	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169622
  0023f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00244	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169623
  0024b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00250	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00255	41 b9 03 00 00
	00		 mov	 r9d, 3
  0025b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169624
  00262	ba fd 00 00 00	 mov	 edx, 253		; 000000fdH
  00267	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169625
  0026e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN11@opentapes:

; 254  :         goto exit;

  00274	e9 25 09 00 00	 jmp	 $exit$33
$LN10@opentapes:

; 255  :     }
; 256  : 
; 257  :     if ( !i_faketape )

  00279	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR i_faketape, 0
  00280	0f 85 14 01 00
	00		 jne	 $LN12@opentapes

; 258  :     {
; 259  :         if ( o_verbose )

  00286	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR o_verbose, 0
  0028d	74 6d		 je	 SHORT $LN13@opentapes

; 260  :             // "HET: Setting option %s to %s"
; 261  :             FWRMSG( stderr, HHC02755, "I", "decompress", yesno( o_decompress ) );

  0028f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR o_decompress
  00295	e8 00 00 00 00	 call	 yesno
  0029a	48 89 44 24 68	 mov	 QWORD PTR tv172[rsp], rax
  0029f	b9 02 00 00 00	 mov	 ecx, 2
  002a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002aa	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv172[rsp]
  002af	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169628
  002bb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169629
  002c7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169630
  002d3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002d8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002dd	41 b9 03 00 00
	00		 mov	 r9d, 3
  002e3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169631
  002ea	ba 05 01 00 00	 mov	 edx, 261		; 00000105H
  002ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169632
  002f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN13@opentapes:

; 262  : 
; 263  :         rc = het_cntl( s_hetb, HETCNTL_SET | HETCNTL_DECOMPRESS, o_decompress );

  002fc	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR o_decompress
  00303	ba 02 01 00 00	 mov	 edx, 258		; 00000102H
  00308	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR s_hetb
  0030f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_cntl
  00315	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 264  :         if( rc < 0 )

  00319	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  0031e	7d 7a		 jge	 SHORT $LN14@opentapes

; 265  :         {
; 266  :             if ( o_verbose )

  00320	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR o_verbose, 0
  00327	74 6c		 je	 SHORT $LN15@opentapes

; 267  :                 // "Error in function %s: %s"
; 268  :                 FWRMSG( stderr, HHC00075, "E", "het_cntl()", het_error( rc ) );

  00329	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  0032d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  00333	48 89 44 24 70	 mov	 QWORD PTR tv191[rsp], rax
  00338	b9 02 00 00 00	 mov	 ecx, 2
  0033d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00343	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv191[rsp]
  00348	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0034d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169635
  00354	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00359	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169636
  00360	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00365	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169637
  0036c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00371	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00376	41 b9 03 00 00
	00		 mov	 r9d, 3
  0037c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169638
  00383	ba 0c 01 00 00	 mov	 edx, 268		; 0000010cH
  00388	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169639
  0038f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN15@opentapes:

; 269  :             goto exit;

  00395	e9 04 08 00 00	 jmp	 $exit$33
$LN14@opentapes:
$LN12@opentapes:

; 270  :         }
; 271  :     }
; 272  : 
; 273  :     if ( !o_faketape )

  0039a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR o_faketape, 0
  003a1	0f 85 c0 04 00
	00		 jne	 $LN16@opentapes

; 274  :     {
; 275  :         if ( o_verbose )

  003a7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR o_verbose, 0
  003ae	74 6d		 je	 SHORT $LN17@opentapes

; 276  :             // "HET: Setting option %s to %s"
; 277  :             WRMSG( HHC02755, "I", "compress", yesno( o_compress ) );

  003b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR o_compress
  003b6	e8 00 00 00 00	 call	 yesno
  003bb	48 89 44 24 78	 mov	 QWORD PTR tv206[rsp], rax
  003c0	b9 01 00 00 00	 mov	 ecx, 1
  003c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003cb	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv206[rsp]
  003d0	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169642
  003dc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169643
  003e8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169644
  003f4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003f9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003fe	41 b9 03 00 00
	00		 mov	 r9d, 3
  00404	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169645
  0040b	ba 15 01 00 00	 mov	 edx, 277		; 00000115H
  00410	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169646
  00417	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@opentapes:

; 278  : 
; 279  :         rc = het_cntl( d_hetb, HETCNTL_SET | HETCNTL_COMPRESS, o_compress );

  0041d	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR o_compress
  00424	ba 01 01 00 00	 mov	 edx, 257		; 00000101H
  00429	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR d_hetb
  00430	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_cntl
  00436	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 280  :         if( rc < 0 )

  0043a	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  0043f	0f 8d 80 00 00
	00		 jge	 $LN18@opentapes

; 281  :         {
; 282  :             if ( o_verbose )

  00445	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR o_verbose, 0
  0044c	74 72		 je	 SHORT $LN19@opentapes

; 283  :                 // "Error in function %s: %s"
; 284  :                 FWRMSG( stderr, HHC00075, "E", "het_cntl()", het_error( rc ) );

  0044e	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  00452	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  00458	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv257[rsp], rax
  00460	b9 02 00 00 00	 mov	 ecx, 2
  00465	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0046b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv257[rsp]
  00473	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00478	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169649
  0047f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00484	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169650
  0048b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00490	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169651
  00497	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0049c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004a1	41 b9 03 00 00
	00		 mov	 r9d, 3
  004a7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169652
  004ae	ba 1c 01 00 00	 mov	 edx, 284		; 0000011cH
  004b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169653
  004ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN19@opentapes:

; 285  :             goto exit;

  004c0	e9 d9 06 00 00	 jmp	 $exit$33
$LN18@opentapes:

; 286  :         }
; 287  : 
; 288  :         if ( o_verbose )

  004c5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR o_verbose, 0
  004cc	0f 84 81 00 00
	00		 je	 $LN20@opentapes

; 289  :         {
; 290  :             char msgbuf[16];
; 291  :             MSGBUF( msgbuf, "%d", o_method );

  004d2	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR o_method
  004d9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169655
  004e0	ba 10 00 00 00	 mov	 edx, 16
  004e5	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$1[rsp]
  004ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 292  :             // "HET: Setting option %s to %s"
; 293  :             WRMSG( HHC02755, "I", "method", msgbuf );

  004f3	b9 01 00 00 00	 mov	 ecx, 1
  004f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004fe	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$1[rsp]
  00506	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0050b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169656
  00512	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00517	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169657
  0051e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00523	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169658
  0052a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0052f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00534	41 b9 03 00 00
	00		 mov	 r9d, 3
  0053a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169659
  00541	ba 25 01 00 00	 mov	 edx, 293		; 00000125H
  00546	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169660
  0054d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN20@opentapes:

; 294  :         }
; 295  : 
; 296  :         rc = het_cntl( d_hetb, HETCNTL_SET | HETCNTL_METHOD, o_method );

  00553	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR o_method
  0055a	ba 03 01 00 00	 mov	 edx, 259		; 00000103H
  0055f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR d_hetb
  00566	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_cntl
  0056c	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 297  :         if( rc < 0 )

  00570	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  00575	0f 8d 80 00 00
	00		 jge	 $LN21@opentapes

; 298  :         {
; 299  :             if ( o_verbose )

  0057b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR o_verbose, 0
  00582	74 72		 je	 SHORT $LN22@opentapes

; 300  :                 // "Error in function %s: %s"
; 301  :                 FWRMSG( stderr, HHC00075, "E", "het_cntl()", het_error( rc ) );

  00584	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  00588	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  0058e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv292[rsp], rax
  00596	b9 02 00 00 00	 mov	 ecx, 2
  0059b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005a1	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv292[rsp]
  005a9	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  005ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169663
  005b5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169664
  005c1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169665
  005cd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005d2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005d7	41 b9 03 00 00
	00		 mov	 r9d, 3
  005dd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169666
  005e4	ba 2d 01 00 00	 mov	 edx, 301		; 0000012dH
  005e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169667
  005f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN22@opentapes:

; 302  :             goto exit;

  005f6	e9 a3 05 00 00	 jmp	 $exit$33
$LN21@opentapes:

; 303  :         }
; 304  : 
; 305  :         if ( o_verbose )

  005fb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR o_verbose, 0
  00602	0f 84 81 00 00
	00		 je	 $LN23@opentapes

; 306  :         {
; 307  :             char msgbuf[16];
; 308  :             MSGBUF( msgbuf, "%d", o_level );

  00608	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR o_level
  0060f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169669
  00616	ba 10 00 00 00	 mov	 edx, 16
  0061b	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$2[rsp]
  00623	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 309  :             // "HET: Setting option %s to %s"
; 310  :             WRMSG( HHC02755, "I", "level", msgbuf );

  00629	b9 01 00 00 00	 mov	 ecx, 1
  0062e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00634	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$2[rsp]
  0063c	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00641	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169670
  00648	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0064d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169671
  00654	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00659	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169672
  00660	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00665	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0066a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00670	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169673
  00677	ba 36 01 00 00	 mov	 edx, 310		; 00000136H
  0067c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169674
  00683	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN23@opentapes:

; 311  :         }
; 312  : 
; 313  :         rc = het_cntl( d_hetb, HETCNTL_SET | HETCNTL_LEVEL, o_level );

  00689	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR o_level
  00690	ba 04 01 00 00	 mov	 edx, 260		; 00000104H
  00695	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR d_hetb
  0069c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_cntl
  006a2	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 314  :         if( rc < 0 )

  006a6	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  006ab	0f 8d 80 00 00
	00		 jge	 $LN24@opentapes

; 315  :         {
; 316  :             if ( o_verbose )

  006b1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR o_verbose, 0
  006b8	74 72		 je	 SHORT $LN25@opentapes

; 317  :                 // "Error in function %s: %s"
; 318  :                 FWRMSG( stderr, HHC00075, "E", "het_cntl()", het_error( rc ) );

  006ba	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  006be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  006c4	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv327[rsp], rax
  006cc	b9 02 00 00 00	 mov	 ecx, 2
  006d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006d7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv327[rsp]
  006df	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  006e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169677
  006eb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169678
  006f7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169679
  00703	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00708	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0070d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00713	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169680
  0071a	ba 3e 01 00 00	 mov	 edx, 318		; 0000013eH
  0071f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169681
  00726	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN25@opentapes:

; 319  :             goto exit;

  0072c	e9 6d 04 00 00	 jmp	 $exit$33
$LN24@opentapes:

; 320  :         }
; 321  : 
; 322  :         if ( o_verbose )

  00731	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR o_verbose, 0
  00738	0f 84 81 00 00
	00		 je	 $LN26@opentapes

; 323  :         {
; 324  :             char msgbuf[16];
; 325  :             MSGBUF( msgbuf, "%d", o_chunksize );

  0073e	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR o_chunksize
  00745	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169683
  0074c	ba 10 00 00 00	 mov	 edx, 16
  00751	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$3[rsp]
  00759	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 326  :             // "HET: Setting option %s to %s"
; 327  :             WRMSG( HHC02755, "I", "chunksize", msgbuf );

  0075f	b9 01 00 00 00	 mov	 ecx, 1
  00764	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0076a	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$3[rsp]
  00772	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00777	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169684
  0077e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00783	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169685
  0078a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0078f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169686
  00796	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0079b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007a0	41 b9 03 00 00
	00		 mov	 r9d, 3
  007a6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169687
  007ad	ba 47 01 00 00	 mov	 edx, 327		; 00000147H
  007b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169688
  007b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN26@opentapes:

; 328  :         }
; 329  : 
; 330  :         rc = het_cntl( d_hetb, HETCNTL_SET | HETCNTL_CHUNKSIZE, o_chunksize );

  007bf	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR o_chunksize
  007c6	ba 05 01 00 00	 mov	 edx, 261		; 00000105H
  007cb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR d_hetb
  007d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_cntl
  007d8	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax

; 331  :         if( rc < 0 )

  007dc	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  007e1	0f 8d 80 00 00
	00		 jge	 $LN27@opentapes

; 332  :         {
; 333  :             if ( o_verbose )

  007e7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR o_verbose, 0
  007ee	74 72		 je	 SHORT $LN28@opentapes

; 334  :                 // "Error in function %s: %s"
; 335  :                 FWRMSG( stderr, HHC00075, "E", "het_cntl()", het_error( rc ) );

  007f0	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  007f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  007fa	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv394[rsp], rax
  00802	b9 02 00 00 00	 mov	 ecx, 2
  00807	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0080d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv394[rsp]
  00815	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0081a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169691
  00821	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00826	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169692
  0082d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00832	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169693
  00839	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0083e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00843	41 b9 03 00 00
	00		 mov	 r9d, 3
  00849	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169694
  00850	ba 4f 01 00 00	 mov	 edx, 335		; 0000014fH
  00855	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169695
  0085c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN28@opentapes:

; 336  :             goto exit;

  00862	e9 37 03 00 00	 jmp	 $exit$33
$LN27@opentapes:
$LN16@opentapes:

; 337  :         }
; 338  :     }
; 339  : 
; 340  :     if( o_verbose )

  00867	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR o_verbose, 0
  0086e	0f 84 2a 03 00
	00		 je	 $LN29@opentapes

; 341  :     {
; 342  :         char msgbuf[128];
; 343  : 
; 344  :         // HHC02757 = "HET: %s"
; 345  : 
; 346  :         MSGBUF( msgbuf, "Source             : %s", o_sname );

  00874	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR o_sname
  0087b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169697
  00882	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00887	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$4[rsp]
  0088f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 347  :         WRMSG( HHC02757, "I", msgbuf );

  00895	b9 01 00 00 00	 mov	 ecx, 1
  0089a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008a0	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$4[rsp]
  008a8	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  008ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169698
  008b4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169699
  008c0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008c5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008ca	41 b9 03 00 00
	00		 mov	 r9d, 3
  008d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169700
  008d7	ba 5b 01 00 00	 mov	 edx, 347		; 0000015bH
  008dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169701
  008e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 348  :         MSGBUF( msgbuf, "Destination        : %s", o_dname );

  008e9	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR o_dname
  008f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169702
  008f7	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  008fc	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$4[rsp]
  00904	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 349  :         WRMSG( HHC02757, "I", msgbuf );

  0090a	b9 01 00 00 00	 mov	 ecx, 1
  0090f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00915	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$4[rsp]
  0091d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00922	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169703
  00929	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0092e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169704
  00935	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0093a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0093f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00945	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169705
  0094c	ba 5d 01 00 00	 mov	 edx, 349		; 0000015dH
  00951	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169706
  00958	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 350  :         if ( !i_faketape )

  0095e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR i_faketape, 0
  00965	0f 85 8d 00 00
	00		 jne	 $LN30@opentapes

; 351  :         {
; 352  :             MSGBUF( msgbuf, "Decompress source  : %s", yesno( het_cntl( s_hetb, HETCNTL_DECOMPRESS, 0 ) ) );

  0096b	45 33 c0	 xor	 r8d, r8d
  0096e	ba 02 00 00 00	 mov	 edx, 2
  00973	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR s_hetb
  0097a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_cntl
  00980	8b c8		 mov	 ecx, eax
  00982	e8 00 00 00 00	 call	 yesno
  00987	4c 8b c8	 mov	 r9, rax
  0098a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169708
  00991	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00996	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$4[rsp]
  0099e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 353  :             WRMSG( HHC02757, "I", msgbuf );

  009a4	b9 01 00 00 00	 mov	 ecx, 1
  009a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009af	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$4[rsp]
  009b7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  009bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169709
  009c3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  009c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169710
  009cf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  009d4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  009d9	41 b9 03 00 00
	00		 mov	 r9d, 3
  009df	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169711
  009e6	ba 61 01 00 00	 mov	 edx, 353		; 00000161H
  009eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169712
  009f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN30@opentapes:

; 354  :         }
; 355  :         if ( !o_faketape )

  009f8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR o_faketape, 0
  009ff	0f 85 99 01 00
	00		 jne	 $LN31@opentapes

; 356  :         {
; 357  :             MSGBUF( msgbuf, "Compress dest      : %s", yesno( het_cntl( d_hetb, HETCNTL_COMPRESS, 0 ) ) );

  00a05	45 33 c0	 xor	 r8d, r8d
  00a08	ba 01 00 00 00	 mov	 edx, 1
  00a0d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR d_hetb
  00a14	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_cntl
  00a1a	8b c8		 mov	 ecx, eax
  00a1c	e8 00 00 00 00	 call	 yesno
  00a21	4c 8b c8	 mov	 r9, rax
  00a24	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169714
  00a2b	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00a30	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$4[rsp]
  00a38	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 358  :             WRMSG( HHC02757, "I", msgbuf );

  00a3e	b9 01 00 00 00	 mov	 ecx, 1
  00a43	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a49	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$4[rsp]
  00a51	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a56	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169715
  00a5d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a62	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169716
  00a69	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a6e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a73	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a79	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169717
  00a80	ba 66 01 00 00	 mov	 edx, 358		; 00000166H
  00a85	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169718
  00a8c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 359  :             MSGBUF( msgbuf, "Compression method : %d", het_cntl( d_hetb, HETCNTL_METHOD, 0 ) );

  00a92	45 33 c0	 xor	 r8d, r8d
  00a95	ba 03 00 00 00	 mov	 edx, 3
  00a9a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR d_hetb
  00aa1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_cntl
  00aa7	44 8b c8	 mov	 r9d, eax
  00aaa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169719
  00ab1	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00ab6	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$4[rsp]
  00abe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 360  :             WRMSG( HHC02757, "I", msgbuf );

  00ac4	b9 01 00 00 00	 mov	 ecx, 1
  00ac9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00acf	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$4[rsp]
  00ad7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00adc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169720
  00ae3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ae8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169721
  00aef	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00af4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00af9	41 b9 03 00 00
	00		 mov	 r9d, 3
  00aff	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169722
  00b06	ba 68 01 00 00	 mov	 edx, 360		; 00000168H
  00b0b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169723
  00b12	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 361  :             MSGBUF( msgbuf, "Compression level  : %d", het_cntl( d_hetb, HETCNTL_LEVEL, 0 ) );

  00b18	45 33 c0	 xor	 r8d, r8d
  00b1b	ba 04 00 00 00	 mov	 edx, 4
  00b20	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR d_hetb
  00b27	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_cntl
  00b2d	44 8b c8	 mov	 r9d, eax
  00b30	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169724
  00b37	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00b3c	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$4[rsp]
  00b44	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 362  :             WRMSG( HHC02757, "I", msgbuf );

  00b4a	b9 01 00 00 00	 mov	 ecx, 1
  00b4f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b55	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR msgbuf$4[rsp]
  00b5d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00b62	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169725
  00b69	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b6e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169726
  00b75	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b7a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b7f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b85	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169727
  00b8c	ba 6a 01 00 00	 mov	 edx, 362		; 0000016aH
  00b91	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169728
  00b98	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN31@opentapes:
$LN29@opentapes:
$exit$33:

; 363  :         }
; 364  :     }
; 365  : 
; 366  : exit:
; 367  : 
; 368  :     return( rc );

  00b9e	8b 44 24 50	 mov	 eax, DWORD PTR rc$[rsp]

; 369  : }

  00ba2	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00baa	48 33 cc	 xor	 rcx, rsp
  00bad	e8 00 00 00 00	 call	 __security_check_cookie
  00bb2	48 81 c4 68 01
	00 00		 add	 rsp, 360		; 00000168H
  00bb9	c3		 ret	 0
opentapes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hetupd.c
_TEXT	SEGMENT
rc$ = 80
curpos$1 = 88
tv131 = 96
tv144 = 104
tv159 = 112
tv172 = 120
tv196 = 128
tv209 = 136
copytape PROC

; 135  : {

  00000	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
$LN30@copytape:
$LN2@copytape:

; 136  :     int rc;
; 137  : 
; 138  :     while( TRUE )

  00007	33 c0		 xor	 eax, eax
  00009	83 f8 01	 cmp	 eax, 1
  0000c	0f 84 5a 04 00
	00		 je	 $LN3@copytape

; 139  :     {
; 140  :         if( extgui )

  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00019	83 38 00	 cmp	 DWORD PTR [rax], 0
  0001c	0f 84 91 00 00
	00		 je	 $LN7@copytape

; 141  :         {
; 142  :             off_t curpos;
; 143  :             /* Report progress every nnnK */
; 144  :             if ( i_faketape )

  00022	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR i_faketape, 0
  00029	74 17		 je	 SHORT $LN8@copytape

; 145  :                 curpos = ftell( s_fetb->fh );

  0002b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR s_fetb
  00032	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__ftelli64
  0003b	48 89 44 24 58	 mov	 QWORD PTR curpos$1[rsp], rax
  00040	eb 15		 jmp	 SHORT $LN9@copytape
$LN8@copytape:

; 146  :             else
; 147  :                 curpos = ftell( s_hetb->fh );

  00042	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR s_hetb
  00049	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__ftelli64
  00052	48 89 44 24 58	 mov	 QWORD PTR curpos$1[rsp], rax
$LN9@copytape:

; 148  :             if( ( curpos & PROGRESS_MASK ) != ( prevpos & PROGRESS_MASK ) )

  00057	48 8b 44 24 58	 mov	 rax, QWORD PTR curpos$1[rsp]
  0005c	48 25 00 00 fc
	ff		 and	 rax, -262144		; fffffffffffc0000H
  00062	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR prevpos
  00069	48 81 e1 00 00
	fc ff		 and	 rcx, -262144		; fffffffffffc0000H
  00070	48 3b c1	 cmp	 rax, rcx
  00073	74 3e		 je	 SHORT $LN10@copytape

; 149  :             {
; 150  :                 prevpos = curpos;

  00075	48 8b 44 24 58	 mov	 rax, QWORD PTR curpos$1[rsp]
  0007a	48 89 05 00 00
	00 00		 mov	 QWORD PTR prevpos, rax
$LN6@copytape:

; 151  :                 EXTGUIMSG( "IPOS=%"PRId64"\n", (U64)curpos );

  00081	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00088	83 38 00	 cmp	 DWORD PTR [rax], 0
  0008b	74 20		 je	 SHORT $LN11@copytape
  0008d	b9 02 00 00 00	 mov	 ecx, 2
  00092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00098	4c 8b 44 24 58	 mov	 r8, QWORD PTR curpos$1[rsp]
  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169547
  000a4	48 8b c8	 mov	 rcx, rax
  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN11@copytape:
  000ad	33 c0		 xor	 eax, eax
  000af	85 c0		 test	 eax, eax
  000b1	75 ce		 jne	 SHORT $LN6@copytape
$LN10@copytape:
$LN7@copytape:

; 152  :             }
; 153  :         }
; 154  : 
; 155  :         if ( i_faketape )

  000b3	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR i_faketape, 0
  000ba	74 1a		 je	 SHORT $LN12@copytape

; 156  :             rc = fet_read( s_fetb, buf );

  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:buf
  000c3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR s_fetb
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_read
  000d0	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
  000d4	eb 18		 jmp	 SHORT $LN13@copytape
$LN12@copytape:

; 157  :         else
; 158  :             rc = het_read( s_hetb, buf );

  000d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:buf
  000dd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR s_hetb
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_read
  000ea	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
$LN13@copytape:

; 159  :         if( rc == HETE_EOT )                // FAKETAPE and HETTAPE share codes

  000ee	83 7c 24 50 fc	 cmp	 DWORD PTR rc$[rsp], -4
  000f3	75 0d		 jne	 SHORT $LN14@copytape

; 160  :         {
; 161  :             rc = 0;

  000f5	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0

; 162  :             break;

  000fd	e9 6a 03 00 00	 jmp	 $LN3@copytape
$LN14@copytape:

; 163  :         }
; 164  : 
; 165  :         if( rc == HETE_TAPEMARK )

  00102	83 7c 24 50 fe	 cmp	 DWORD PTR rc$[rsp], -2
  00107	0f 85 25 01 00
	00		 jne	 $LN15@copytape

; 166  :         {
; 167  :             if ( o_faketape )

  0010d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR o_faketape, 0
  00114	74 13		 je	 SHORT $LN16@copytape

; 168  :                 rc = fet_tapemark( d_fetb );

  00116	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR d_fetb
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_tapemark
  00123	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
  00127	eb 11		 jmp	 SHORT $LN17@copytape
$LN16@copytape:

; 169  :             else
; 170  :                 rc = het_tapemark( d_hetb );

  00129	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR d_hetb
  00130	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_tapemark
  00136	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
$LN17@copytape:

; 171  :             if( rc < 0 )

  0013a	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  0013f	0f 8d e8 00 00
	00		 jge	 $LN18@copytape

; 172  :             {
; 173  :                 // "Error in function %s: %s"
; 174  :                 if ( o_faketape )

  00145	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR o_faketape, 0
  0014c	74 6e		 je	 SHORT $LN19@copytape

; 175  :                     FWRMSG( stderr, HHC00075, "E", "fet_tapemark()", fet_error( rc ) );

  0014e	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  00152	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_error
  00158	48 89 44 24 60	 mov	 QWORD PTR tv131[rsp], rax
  0015d	b9 02 00 00 00	 mov	 ecx, 2
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00168	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv131[rsp]
  0016d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00172	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169557
  00179	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0017e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169558
  00185	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0018a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169559
  00191	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00196	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0019b	41 b9 03 00 00
	00		 mov	 r9d, 3
  001a1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169560
  001a8	ba af 00 00 00	 mov	 edx, 175		; 000000afH
  001ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169561
  001b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  001ba	eb 6c		 jmp	 SHORT $LN20@copytape
$LN19@copytape:

; 176  :                 else
; 177  :                     FWRMSG( stderr, HHC00075, "E", "het_tapemark()", het_error( rc ) );

  001bc	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  001c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  001c6	48 89 44 24 68	 mov	 QWORD PTR tv144[rsp], rax
  001cb	b9 02 00 00 00	 mov	 ecx, 2
  001d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001d6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv144[rsp]
  001db	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169562
  001e7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169563
  001f3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169564
  001ff	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00204	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00209	41 b9 03 00 00
	00		 mov	 r9d, 3
  0020f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169565
  00216	ba b1 00 00 00	 mov	 edx, 177		; 000000b1H
  0021b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169566
  00222	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN20@copytape:

; 178  :                 break;

  00228	e9 3f 02 00 00	 jmp	 $LN3@copytape
$LN18@copytape:

; 179  :             }
; 180  :             continue;

  0022d	e9 d5 fd ff ff	 jmp	 $LN2@copytape
$LN15@copytape:

; 181  :         }
; 182  : 
; 183  :         if( rc < 0 )

  00232	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  00237	0f 8d e8 00 00
	00		 jge	 $LN21@copytape

; 184  :         {
; 185  :             // "Error in function %s: %s"
; 186  :             if ( i_faketape )

  0023d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR i_faketape, 0
  00244	74 6e		 je	 SHORT $LN22@copytape

; 187  :                 FWRMSG( stderr, HHC00075, "E", "fet_read()", fet_error( rc ) );

  00246	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  0024a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_error
  00250	48 89 44 24 70	 mov	 QWORD PTR tv159[rsp], rax
  00255	b9 02 00 00 00	 mov	 ecx, 2
  0025a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00260	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv159[rsp]
  00265	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0026a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169570
  00271	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00276	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169571
  0027d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00282	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169572
  00289	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0028e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00293	41 b9 03 00 00
	00		 mov	 r9d, 3
  00299	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169573
  002a0	ba bb 00 00 00	 mov	 edx, 187		; 000000bbH
  002a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169574
  002ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  002b2	eb 6c		 jmp	 SHORT $LN23@copytape
$LN22@copytape:

; 188  :             else
; 189  :                 FWRMSG( stderr, HHC00075, "E", "het_read()", het_error( rc ) );

  002b4	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  002b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  002be	48 89 44 24 78	 mov	 QWORD PTR tv172[rsp], rax
  002c3	b9 02 00 00 00	 mov	 ecx, 2
  002c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002ce	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv172[rsp]
  002d3	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169575
  002df	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169576
  002eb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169577
  002f7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002fc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00301	41 b9 03 00 00
	00		 mov	 r9d, 3
  00307	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169578
  0030e	ba bd 00 00 00	 mov	 edx, 189		; 000000bdH
  00313	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169579
  0031a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN23@copytape:

; 190  :             break;

  00320	e9 47 01 00 00	 jmp	 $LN3@copytape
$LN21@copytape:

; 191  :         }
; 192  : 
; 193  :         if ( o_faketape )

  00325	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR o_faketape, 0
  0032c	74 20		 je	 SHORT $LN24@copytape

; 194  :             rc = fet_write( d_fetb, buf, rc );

  0032e	44 0f b7 44 24
	50		 movzx	 r8d, WORD PTR rc$[rsp]
  00334	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:buf
  0033b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR d_fetb
  00342	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_write
  00348	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
  0034c	eb 1d		 jmp	 SHORT $LN25@copytape
$LN24@copytape:

; 195  :         else
; 196  :             rc = het_write( d_hetb, buf, rc );

  0034e	44 8b 44 24 50	 mov	 r8d, DWORD PTR rc$[rsp]
  00353	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:buf
  0035a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR d_hetb
  00361	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_write
  00367	89 44 24 50	 mov	 DWORD PTR rc$[rsp], eax
$LN25@copytape:

; 197  :         if( rc < 0 )

  0036b	83 7c 24 50 00	 cmp	 DWORD PTR rc$[rsp], 0
  00370	0f 8d f1 00 00
	00		 jge	 $LN26@copytape

; 198  :         {
; 199  :             // "Error in function %s: %s"
; 200  :             if ( o_faketape )

  00376	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR o_faketape, 0
  0037d	74 74		 je	 SHORT $LN27@copytape

; 201  :                 FWRMSG( stderr, HHC00075, "E", "fet_write()", fet_error( rc ) );

  0037f	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  00383	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_error
  00389	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv196[rsp], rax
  00391	b9 02 00 00 00	 mov	 ecx, 2
  00396	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0039c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv196[rsp]
  003a4	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169585
  003b0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169586
  003bc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169587
  003c8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003cd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003d2	41 b9 03 00 00
	00		 mov	 r9d, 3
  003d8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169588
  003df	ba c9 00 00 00	 mov	 edx, 201		; 000000c9H
  003e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169589
  003eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  003f1	eb 72		 jmp	 SHORT $LN28@copytape
$LN27@copytape:

; 202  :             else
; 203  :                 FWRMSG( stderr, HHC00075, "E", "het_write()", het_error( rc ) );

  003f3	8b 4c 24 50	 mov	 ecx, DWORD PTR rc$[rsp]
  003f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_error
  003fd	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv209[rsp], rax
  00405	b9 02 00 00 00	 mov	 ecx, 2
  0040a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00410	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv209[rsp]
  00418	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0041d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169590
  00424	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00429	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169591
  00430	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00435	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169592
  0043c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00441	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00446	41 b9 03 00 00
	00		 mov	 r9d, 3
  0044c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169593
  00453	ba cb 00 00 00	 mov	 edx, 203		; 000000cbH
  00458	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169594
  0045f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN28@copytape:

; 204  :             break;

  00465	eb 05		 jmp	 SHORT $LN3@copytape
$LN26@copytape:

; 205  :         }
; 206  :     }

  00467	e9 9b fb ff ff	 jmp	 $LN30@copytape
$LN3@copytape:

; 207  : 
; 208  :     return( rc );

  0046c	8b 44 24 50	 mov	 eax, DWORD PTR rc$[rsp]

; 209  : }

  00470	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00477	c3		 ret	 0
copytape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hetupd.c
_TEXT	SEGMENT
rc$ = 96
closetapes PROC

; 92   : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 93   : 
; 94   :     if ( d_hetb != NULL ) het_close( &d_hetb );

  00008	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR d_hetb, 0
  00010	74 0d		 je	 SHORT $LN2@closetapes
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:d_hetb
  00019	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_close
$LN2@closetapes:

; 95   :     if ( s_hetb != NULL ) het_close( &s_hetb );

  0001f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR s_hetb, 0
  00027	74 0d		 je	 SHORT $LN3@closetapes
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s_hetb
  00030	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_close
$LN3@closetapes:

; 96   : 
; 97   :     if ( d_fetb != NULL ) fet_close( &d_fetb );

  00036	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR d_fetb, 0
  0003e	74 0d		 je	 SHORT $LN4@closetapes
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:d_fetb
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_close
$LN4@closetapes:

; 98   :     if ( s_fetb != NULL ) fet_close( &s_fetb );

  0004d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR s_fetb, 0
  00055	74 0d		 je	 SHORT $LN5@closetapes
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s_fetb
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_close
$LN5@closetapes:

; 99   : 
; 100  :     if( dorename )

  00064	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR dorename, 0
  0006b	0f 84 63 01 00
	00		 je	 $LN6@closetapes

; 101  :     {
; 102  :         if( rc >= 0 )

  00071	83 7c 24 60 00	 cmp	 DWORD PTR rc$[rsp], 0
  00076	0f 8c ed 00 00
	00		 jl	 $LN7@closetapes

; 103  :         {
; 104  :             rc = remove( o_sname );

  0007c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR o_sname
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_remove
  00089	89 44 24 60	 mov	 DWORD PTR rc$[rsp], eax

; 105  :             if ( rc < 0 )

  0008d	83 7c 24 60 00	 cmp	 DWORD PTR rc$[rsp], 0
  00092	7d 55		 jge	 SHORT $LN9@closetapes

; 106  :             {
; 107  :                 // "File %s: Error removing file - manual intervention required"
; 108  :                 WRMSG( HHC02745, "I", o_sname );

  00094	b9 01 00 00 00	 mov	 ecx, 1
  00099	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR o_sname
  000a6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169517
  000b2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169518
  000be	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c8	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169519
  000d5	ba 6c 00 00 00	 mov	 edx, 108		; 0000006cH
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169520
  000e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 109  :             }

  000e7	eb 7e		 jmp	 SHORT $LN10@closetapes
$LN9@closetapes:

; 110  :             else
; 111  :             {
; 112  :                 rc = rename( o_dname, o_sname );

  000e9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR o_sname
  000f0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR o_dname
  000f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rename
  000fd	89 44 24 60	 mov	 DWORD PTR rc$[rsp], eax

; 113  :                 if ( rc < 0 )

  00101	83 7c 24 60 00	 cmp	 DWORD PTR rc$[rsp], 0
  00106	7d 5f		 jge	 SHORT $LN11@closetapes

; 114  :                     // "File %s: Error renaming file to %s - manual intervention required"
; 115  :                     WRMSG( HHC02744, "I", o_dname, o_sname );

  00108	b9 01 00 00 00	 mov	 ecx, 1
  0010d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00113	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR o_sname
  0011a	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0011f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR o_dname
  00126	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169522
  00132	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00137	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169523
  0013e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00143	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00148	41 b9 03 00 00
	00		 mov	 r9d, 3
  0014e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169524
  00155	ba 73 00 00 00	 mov	 edx, 115		; 00000073H
  0015a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169525
  00161	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN11@closetapes:
$LN10@closetapes:

; 116  :             }
; 117  :         }

  00167	eb 6b		 jmp	 SHORT $LN8@closetapes
$LN7@closetapes:

; 118  :         else
; 119  :         {
; 120  :             rc = remove( o_dname );

  00169	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR o_dname
  00170	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_remove
  00176	89 44 24 60	 mov	 DWORD PTR rc$[rsp], eax

; 121  :             if ( rc < 0 )

  0017a	83 7c 24 60 00	 cmp	 DWORD PTR rc$[rsp], 0
  0017f	7d 53		 jge	 SHORT $LN12@closetapes

; 122  :                 // "File %s: Error removing file - manual intervention required"
; 123  :                 WRMSG( HHC02745, "I", o_dname );

  00181	b9 01 00 00 00	 mov	 ecx, 1
  00186	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0018c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR o_dname
  00193	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00198	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169527
  0019f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169528
  001ab	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001b0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b5	41 b9 03 00 00
	00		 mov	 r9d, 3
  001bb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169529
  001c2	ba 7b 00 00 00	 mov	 edx, 123		; 0000007bH
  001c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169530
  001ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN12@closetapes:
$LN8@closetapes:
$LN6@closetapes:

; 124  :         }
; 125  :     }
; 126  : 
; 127  :     return;
; 128  : }

  001d4	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001d8	c3		 ret	 0
closetapes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hetupd.c
_TEXT	SEGMENT
tv65 = 0
val$ = 32
yesno	PROC

; 83   : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 18	 sub	 rsp, 24

; 84   :     return( ( val ? "Yes" : "No" ) );

  00008	83 7c 24 20 00	 cmp	 DWORD PTR val$[rsp], 0
  0000d	74 0d		 je	 SHORT $LN3@yesno
  0000f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169498
  00016	48 89 04 24	 mov	 QWORD PTR tv65[rsp], rax
  0001a	eb 0b		 jmp	 SHORT $LN4@yesno
$LN3@yesno:
  0001c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169499
  00023	48 89 04 24	 mov	 QWORD PTR tv65[rsp], rax
$LN4@yesno:
  00027	48 8b 04 24	 mov	 rax, QWORD PTR tv65[rsp]

; 85   : }

  0002b	48 83 c4 18	 add	 rsp, 24
  0002f	c3		 ret	 0
yesno	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hetupd.c
_TEXT	SEGMENT
bufbz$ = 80
name$ = 112
usage	PROC

; 68   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 69   : #if defined( HET_BZIP2 )
; 70   :     char *bufbz = "                -b    use BZLIB compression\n";
; 71   : #else
; 72   :     char *bufbz = "";

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169489
  00010	48 89 44 24 50	 mov	 QWORD PTR bufbz$[rsp], rax

; 73   : #endif
; 74   :     // "Usage: %s ...
; 75   :     WRMSG( HHC02730, "I", name, bufbz );

  00015	b9 01 00 00 00	 mov	 ecx, 1
  0001a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00020	48 8b 4c 24 50	 mov	 rcx, QWORD PTR bufbz$[rsp]
  00025	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0002a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR name$[rsp]
  0002f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169490
  0003b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169491
  00047	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0004c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00051	41 b9 03 00 00
	00		 mov	 r9d, 3
  00057	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169492
  0005e	ba 4b 00 00 00	 mov	 edx, 75			; 0000004bH
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169493
  0006a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 76   : }

  00070	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00074	c3		 ret	 0
usage	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sprintf	PROC						; COMDAT

; 1771 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsprintf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 1777 : 
; 1778 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 1779 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 1780 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT

; 1458 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1459 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  00027	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  0002c	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00038	e8 00 00 00 00	 call	 _vsnprintf_l

; 1460 :     }

  0003d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00041	c3		 ret	 0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnprintf_l PROC					; COMDAT

; 1391 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00020	48 83 c8 01	 or	 rax, 1
  00024	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00029	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00033	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00038	4c 8b 4c 24 60	 mov	 r9, QWORD PTR _Format$[rsp]
  0003d	4c 8b 44 24 58	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  00042	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf
  00050	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00054	83 7c 24 30 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00059	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  0005b	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  00063	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00065	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]
  00069	89 44 24 34	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  0006d	8b 44 24 34	 mov	 eax, DWORD PTR tv74[rsp]

; 1397 :     }

  00071	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00075	c3		 ret	 0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
