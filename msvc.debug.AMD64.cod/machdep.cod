; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	cmpxchg8_x86
PUBLIC	cmpxchg4_x86
PUBLIC	cmpxchg1_x86
PUBLIC	cmpxchg16_x86
PUBLIC	fetch_hw_noswap
PUBLIC	store_hw_noswap
PUBLIC	fetch_fw_noswap
PUBLIC	store_fw_noswap
PUBLIC	fetch_f3_noswap
PUBLIC	store_f3_noswap
PUBLIC	fetch_dw_noswap
PUBLIC	store_dw_noswap
EXTRN	_byteswap_ulong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$cmpxchg8_x86 DD imagerel $LN5
	DD	imagerel $LN5+113
	DD	imagerel $unwind$cmpxchg8_x86
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cmpxchg4_x86 DD imagerel $LN5
	DD	imagerel $LN5+102
	DD	imagerel $unwind$cmpxchg4_x86
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cmpxchg1_x86 DD imagerel $LN3
	DD	imagerel $LN3+300
	DD	imagerel $unwind$cmpxchg1_x86
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cmpxchg16_x86 DD imagerel $LN8
	DD	imagerel $LN8+145
	DD	imagerel $unwind$cmpxchg16_x86
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_hw_noswap DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$fetch_hw_noswap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_fw_noswap DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$fetch_fw_noswap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_f3_noswap DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$fetch_f3_noswap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$store_f3_noswap DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$store_f3_noswap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_dw_noswap DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$fetch_dw_noswap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_dw_noswap DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$store_f3_noswap DD 020b01H
	DD	0600a700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_f3_noswap DD 030b01H
	DD	07007220bH
	DD	06006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_fw_noswap DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_hw_noswap DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	058H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cmpxchg16_x86 DD 021901H
	DD	030153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cmpxchg1_x86 DD 011201H
	DD	0c212H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	035H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cmpxchg4_x86 DD 011201H
	DD	02212H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cmpxchg8_x86 DD 011301H
	DD	04213H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_dw_noswap
_TEXT	SEGMENT
ptr$ = 8
value$ = 16
store_dw_noswap PROC					; COMDAT

; 834  :     inline void store_dw_noswap(void *ptr, U64 value) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 835  :       memcpy((BYTE *)ptr, (BYTE *)&value, 8);

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR ptr$[rsp]
  0000f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR value$[rsp]
  00014	48 89 08	 mov	 QWORD PTR [rax], rcx

; 836  :     }

  00017	c3		 ret	 0
store_dw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_dw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_dw_noswap PROC					; COMDAT

; 816  :     inline U64 fetch_dw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 817  :       U64 value;
; 818  :       memcpy(&value, (BYTE *)ptr, 8);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 04 24	 mov	 QWORD PTR value$[rsp], rax

; 819  :       return value;

  00015	48 8b 04 24	 mov	 rax, QWORD PTR value$[rsp]

; 820  :     }

  00019	48 83 c4 18	 add	 rsp, 24
  0001d	c3		 ret	 0
fetch_dw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_f3_noswap
_TEXT	SEGMENT
ptr$ = 24
value$ = 32
store_f3_noswap PROC					; COMDAT

; 799  :     inline void store_f3_noswap(void *ptr, U32 value) {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	56		 push	 rsi
  0000a	57		 push	 rdi

; 800  :       value >>= 8;

  0000b	8b 44 24 20	 mov	 eax, DWORD PTR value$[rsp]
  0000f	c1 e8 08	 shr	 eax, 8
  00012	89 44 24 20	 mov	 DWORD PTR value$[rsp], eax

; 801  :       memcpy((BYTE *)ptr, ((BYTE *)&value), 3);

  00016	48 8d 44 24 20	 lea	 rax, QWORD PTR value$[rsp]
  0001b	48 8b 7c 24 18	 mov	 rdi, QWORD PTR ptr$[rsp]
  00020	48 8b f0	 mov	 rsi, rax
  00023	b9 03 00 00 00	 mov	 ecx, 3
  00028	f3 a4		 rep movsb

; 802  :     }

  0002a	5f		 pop	 rdi
  0002b	5e		 pop	 rsi
  0002c	c3		 ret	 0
store_f3_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_f3_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 48
fetch_f3_noswap PROC					; COMDAT

; 780  :     inline U32 fetch_f3_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 83 ec 18	 sub	 rsp, 24

; 781  :       U32 value;
; 782  :       memcpy(((BYTE *)&value), (BYTE *)ptr, 3);

  0000b	48 8d 04 24	 lea	 rax, QWORD PTR value$[rsp]
  0000f	48 8b f8	 mov	 rdi, rax
  00012	48 8b 74 24 30	 mov	 rsi, QWORD PTR ptr$[rsp]
  00017	b9 03 00 00 00	 mov	 ecx, 3
  0001c	f3 a4		 rep movsb

; 783  :       value <<= 8;

  0001e	8b 04 24	 mov	 eax, DWORD PTR value$[rsp]
  00021	c1 e0 08	 shl	 eax, 8
  00024	89 04 24	 mov	 DWORD PTR value$[rsp], eax

; 784  :       return value;

  00027	8b 04 24	 mov	 eax, DWORD PTR value$[rsp]

; 785  :     }

  0002a	48 83 c4 18	 add	 rsp, 24
  0002e	5f		 pop	 rdi
  0002f	5e		 pop	 rsi
  00030	c3		 ret	 0
fetch_f3_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_fw_noswap
_TEXT	SEGMENT
ptr$ = 8
value$ = 16
store_fw_noswap PROC					; COMDAT

; 764  :     inline void store_fw_noswap(void *ptr, U32 value) {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 765  :       memcpy((BYTE *)ptr, (BYTE *)&value, 4);

  00009	48 8b 44 24 08	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	8b 4c 24 10	 mov	 ecx, DWORD PTR value$[rsp]
  00012	89 08		 mov	 DWORD PTR [rax], ecx

; 766  :     }

  00014	c3		 ret	 0
store_fw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_fw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_fw_noswap PROC					; COMDAT

; 746  :     inline U32 fetch_fw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 747  :       U32 value;
; 748  :       memcpy(&value, (BYTE *)ptr, 4);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	8b 00		 mov	 eax, DWORD PTR [rax]
  00010	89 04 24	 mov	 DWORD PTR value$[rsp], eax

; 749  :       return value;

  00013	8b 04 24	 mov	 eax, DWORD PTR value$[rsp]

; 750  :     }

  00016	48 83 c4 18	 add	 rsp, 24
  0001a	c3		 ret	 0
fetch_fw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_hw_noswap
_TEXT	SEGMENT
ptr$ = 8
value$ = 16
store_hw_noswap PROC					; COMDAT

; 730  :     inline void store_hw_noswap(void *ptr, U16 value) {

  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 731  :       memcpy((BYTE *)ptr, (BYTE *)&value, 2);

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR ptr$[rsp]
  0000f	0f b7 4c 24 10	 movzx	 ecx, WORD PTR value$[rsp]
  00014	66 89 08	 mov	 WORD PTR [rax], cx

; 732  :     }

  00017	c3		 ret	 0
store_hw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_hw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_hw_noswap PROC					; COMDAT

; 712  :     inline U16 fetch_hw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 713  :       U16 value;
; 714  :       memcpy(&value, (BYTE *)ptr, 2);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00011	66 89 04 24	 mov	 WORD PTR value$[rsp], ax

; 715  :       return value;

  00015	0f b7 04 24	 movzx	 eax, WORD PTR value$[rsp]

; 716  :     }

  00019	48 83 c4 18	 add	 rsp, 24
  0001d	c3		 ret	 0
fetch_hw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT cmpxchg16_x86
_TEXT	SEGMENT
tv72 = 0
tv76 = 8
tv75 = 16
old1$ = 48
old2$ = 56
new1$ = 64
new2$ = 72
ptr$ = 80
cmpxchg16_x86 PROC					; COMDAT

; 140  :       {

$LN8:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	53		 push	 rbx
  00015	48 83 ec 20	 sub	 rsp, 32			; 00000020H
$LN4@cmpxchg16_:

; 141  :         // Please note : old1 MUST be 16-byte aligned !
; 142  :         // returns 0 == success, 1 otherwise
; 143  :         UNREFERENCED( old2 );

  00019	33 c0		 xor	 eax, eax
  0001b	85 c0		 test	 eax, eax
  0001d	75 fa		 jne	 SHORT $LN4@cmpxchg16_

; 144  :         return ( _InterlockedCompareExchange128( ptr, new2, new1, old1 ) ? 0 : 1 );

  0001f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR new2$[rsp]
  00024	48 8b 5c 24 40	 mov	 rbx, QWORD PTR new1$[rsp]
  00029	48 8b 44 24 50	 mov	 rax, QWORD PTR ptr$[rsp]
  0002e	48 89 44 24 10	 mov	 QWORD PTR tv75[rsp], rax
  00033	48 8b 54 24 30	 mov	 rdx, QWORD PTR old1$[rsp]
  00038	48 89 54 24 08	 mov	 QWORD PTR tv76[rsp], rdx
  0003d	48 8b 54 24 08	 mov	 rdx, QWORD PTR tv76[rsp]
  00042	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00045	4c 8b 44 24 08	 mov	 r8, QWORD PTR tv76[rsp]
  0004a	49 8b 50 08	 mov	 rdx, QWORD PTR [r8+8]
  0004e	4c 8b 4c 24 10	 mov	 r9, QWORD PTR tv75[rsp]
  00053	4c 8b 4c 24 10	 mov	 r9, QWORD PTR tv75[rsp]
  00058	f0 49 0f c7 09	 lock cmpxchg16b QWORD PTR [r9]
  0005d	4c 8b 44 24 08	 mov	 r8, QWORD PTR tv76[rsp]
  00062	49 89 00	 mov	 QWORD PTR [r8], rax
  00065	4c 8b 44 24 08	 mov	 r8, QWORD PTR tv76[rsp]
  0006a	49 89 50 08	 mov	 QWORD PTR [r8+8], rdx
  0006e	0f 94 c0	 sete	 al
  00071	0f b6 c0	 movzx	 eax, al
  00074	85 c0		 test	 eax, eax
  00076	74 09		 je	 SHORT $LN6@cmpxchg16_
  00078	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv72[rsp], 0
  0007f	eb 07		 jmp	 SHORT $LN7@cmpxchg16_
$LN6@cmpxchg16_:
  00081	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv72[rsp], 1
$LN7@cmpxchg16_:
  00088	8b 04 24	 mov	 eax, DWORD PTR tv72[rsp]

; 145  :       }

  0008b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008f	5b		 pop	 rbx
  00090	c3		 ret	 0
cmpxchg16_x86 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT cmpxchg1_x86
_TEXT	SEGMENT
cc$ = 32
val4$ = 36
old4$ = 40
shift$ = 48
tv154 = 56
tv74 = 60
tv163 = 64
tv82 = 68
new4$ = 72
off$ = 80
ptr4$ = 88
old$ = 112
unew$ = 120
ptr$ = 128
cmpxchg1_x86 PROC					; COMDAT

; 113  :     {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 114  :         // returns 0 == success, 1 otherwise
; 115  : 
; 116  :         LONG_PTR  off, shift;
; 117  :         BYTE  cc;
; 118  :         U32  *ptr4, val4, old4, new4;
; 119  : 
; 120  :         off   = (LONG_PTR)ptr & 3;

  00012	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR ptr$[rsp]
  0001a	48 83 e0 03	 and	 rax, 3
  0001e	48 89 44 24 50	 mov	 QWORD PTR off$[rsp], rax

; 121  :         shift = (3 - off) * 8;

  00023	b8 03 00 00 00	 mov	 eax, 3
  00028	48 2b 44 24 50	 sub	 rax, QWORD PTR off$[rsp]
  0002d	48 c1 e0 03	 shl	 rax, 3
  00031	48 89 44 24 30	 mov	 QWORD PTR shift$[rsp], rax

; 122  :         ptr4  = (U32*)(((BYTE*)ptr) - off);

  00036	48 8b 44 24 50	 mov	 rax, QWORD PTR off$[rsp]
  0003b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR ptr$[rsp]
  00043	48 2b c8	 sub	 rcx, rax
  00046	48 8b c1	 mov	 rax, rcx
  00049	48 89 44 24 58	 mov	 QWORD PTR ptr4$[rsp], rax

; 123  :         val4  = CSWAP32(*ptr4);

  0004e	48 8b 44 24 58	 mov	 rax, QWORD PTR ptr4$[rsp]
  00053	8b 08		 mov	 ecx, DWORD PTR [rax]
  00055	e8 00 00 00 00	 call	 _byteswap_ulong
  0005a	89 44 24 24	 mov	 DWORD PTR val4$[rsp], eax

; 124  : 
; 125  :         old4  = CSWAP32((val4 & ~(0xff << shift)) | (*old << shift));

  0005e	48 8b 44 24 30	 mov	 rax, QWORD PTR shift$[rsp]
  00063	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  00068	89 4c 24 38	 mov	 DWORD PTR tv154[rsp], ecx
  0006c	0f b6 c8	 movzx	 ecx, al
  0006f	8b 44 24 38	 mov	 eax, DWORD PTR tv154[rsp]
  00073	d3 e0		 shl	 eax, cl
  00075	f7 d0		 not	 eax
  00077	8b 4c 24 24	 mov	 ecx, DWORD PTR val4$[rsp]
  0007b	23 c8		 and	 ecx, eax
  0007d	8b c1		 mov	 eax, ecx
  0007f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR old$[rsp]
  00084	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00087	89 4c 24 3c	 mov	 DWORD PTR tv74[rsp], ecx
  0008b	48 8b 54 24 30	 mov	 rdx, QWORD PTR shift$[rsp]
  00090	0f b6 ca	 movzx	 ecx, dl
  00093	8b 54 24 3c	 mov	 edx, DWORD PTR tv74[rsp]
  00097	d3 e2		 shl	 edx, cl
  00099	8b ca		 mov	 ecx, edx
  0009b	0b c1		 or	 eax, ecx
  0009d	8b c8		 mov	 ecx, eax
  0009f	e8 00 00 00 00	 call	 _byteswap_ulong
  000a4	89 44 24 28	 mov	 DWORD PTR old4$[rsp], eax

; 126  :         new4  = CSWAP32((val4 & ~(0xff << shift)) | ( unew << shift));

  000a8	48 8b 44 24 30	 mov	 rax, QWORD PTR shift$[rsp]
  000ad	b9 ff 00 00 00	 mov	 ecx, 255		; 000000ffH
  000b2	89 4c 24 40	 mov	 DWORD PTR tv163[rsp], ecx
  000b6	0f b6 c8	 movzx	 ecx, al
  000b9	8b 44 24 40	 mov	 eax, DWORD PTR tv163[rsp]
  000bd	d3 e0		 shl	 eax, cl
  000bf	f7 d0		 not	 eax
  000c1	8b 4c 24 24	 mov	 ecx, DWORD PTR val4$[rsp]
  000c5	23 c8		 and	 ecx, eax
  000c7	8b c1		 mov	 eax, ecx
  000c9	0f b6 4c 24 78	 movzx	 ecx, BYTE PTR unew$[rsp]
  000ce	89 4c 24 44	 mov	 DWORD PTR tv82[rsp], ecx
  000d2	48 8b 54 24 30	 mov	 rdx, QWORD PTR shift$[rsp]
  000d7	0f b6 ca	 movzx	 ecx, dl
  000da	8b 54 24 44	 mov	 edx, DWORD PTR tv82[rsp]
  000de	d3 e2		 shl	 edx, cl
  000e0	8b ca		 mov	 ecx, edx
  000e2	0b c1		 or	 eax, ecx
  000e4	8b c8		 mov	 ecx, eax
  000e6	e8 00 00 00 00	 call	 _byteswap_ulong
  000eb	89 44 24 48	 mov	 DWORD PTR new4$[rsp], eax

; 127  : 
; 128  :         cc    = cmpxchg4( &old4, new4, ptr4 );

  000ef	4c 8b 44 24 58	 mov	 r8, QWORD PTR ptr4$[rsp]
  000f4	8b 54 24 48	 mov	 edx, DWORD PTR new4$[rsp]
  000f8	48 8d 4c 24 28	 lea	 rcx, QWORD PTR old4$[rsp]
  000fd	e8 00 00 00 00	 call	 cmpxchg4_x86
  00102	88 44 24 20	 mov	 BYTE PTR cc$[rsp], al

; 129  : 
; 130  :         *old  = (CSWAP32(old4) >> shift) & 0xff;

  00106	8b 4c 24 28	 mov	 ecx, DWORD PTR old4$[rsp]
  0010a	e8 00 00 00 00	 call	 _byteswap_ulong
  0010f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR shift$[rsp]
  00114	d3 e8		 shr	 eax, cl
  00116	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0011b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR old$[rsp]
  00120	88 01		 mov	 BYTE PTR [rcx], al

; 131  : 
; 132  :         return cc;

  00122	0f b6 44 24 20	 movzx	 eax, BYTE PTR cc$[rsp]

; 133  :     }

  00127	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0012b	c3		 ret	 0
cmpxchg1_x86 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT cmpxchg4_x86
_TEXT	SEGMENT
tv69 = 0
tv71 = 4
tmp$ = 8
old$ = 32
unew$ = 40
ptr$ = 48
cmpxchg4_x86 PROC					; COMDAT

; 104  :     {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 18	 sub	 rsp, 24

; 105  :         // returns 0 == success, 1 otherwise
; 106  :         U32 tmp = *old;

  00012	48 8b 44 24 20	 mov	 rax, QWORD PTR old$[rsp]
  00017	8b 00		 mov	 eax, DWORD PTR [rax]
  00019	89 44 24 08	 mov	 DWORD PTR tmp$[rsp], eax

; 107  :         *old = _InterlockedCompareExchange( ptr, unew, *old );

  0001d	8b 44 24 28	 mov	 eax, DWORD PTR unew$[rsp]
  00021	89 44 24 04	 mov	 DWORD PTR tv71[rsp], eax
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ptr$[rsp]
  0002a	48 8b 54 24 20	 mov	 rdx, QWORD PTR old$[rsp]
  0002f	8b 02		 mov	 eax, DWORD PTR [rdx]
  00031	8b 54 24 04	 mov	 edx, DWORD PTR tv71[rsp]
  00035	f0 0f b1 11	 lock cmpxchg DWORD PTR [rcx], edx
  00039	48 8b 4c 24 20	 mov	 rcx, QWORD PTR old$[rsp]
  0003e	89 01		 mov	 DWORD PTR [rcx], eax

; 108  :         return ((tmp == *old) ? 0 : 1);

  00040	48 8b 44 24 20	 mov	 rax, QWORD PTR old$[rsp]
  00045	8b 00		 mov	 eax, DWORD PTR [rax]
  00047	39 44 24 08	 cmp	 DWORD PTR tmp$[rsp], eax
  0004b	75 09		 jne	 SHORT $LN3@cmpxchg4_x
  0004d	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv69[rsp], 0
  00054	eb 07		 jmp	 SHORT $LN4@cmpxchg4_x
$LN3@cmpxchg4_x:
  00056	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv69[rsp], 1
$LN4@cmpxchg4_x:
  0005d	0f b6 04 24	 movzx	 eax, BYTE PTR tv69[rsp]

; 109  :     }

  00061	48 83 c4 18	 add	 rsp, 24
  00065	c3		 ret	 0
cmpxchg4_x86 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT cmpxchg8_x86
_TEXT	SEGMENT
tv69 = 0
tv71 = 8
tmp$ = 16
old$ = 48
unew$ = 56
ptr$ = 64
cmpxchg8_x86 PROC					; COMDAT

; 97   :     {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 98   :         // returns 0 == success, 1 otherwise
; 99   :         U64 tmp = *old;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR old$[rsp]
  00018	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001b	48 89 44 24 10	 mov	 QWORD PTR tmp$[rsp], rax

; 100  :         *old = _InterlockedCompareExchange64( ptr, unew, *old );

  00020	48 8b 44 24 38	 mov	 rax, QWORD PTR unew$[rsp]
  00025	48 89 44 24 08	 mov	 QWORD PTR tv71[rsp], rax
  0002a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ptr$[rsp]
  0002f	48 8b 54 24 30	 mov	 rdx, QWORD PTR old$[rsp]
  00034	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00037	48 8b 54 24 08	 mov	 rdx, QWORD PTR tv71[rsp]
  0003c	f0 48 0f b1 11	 lock cmpxchg QWORD PTR [rcx], rdx
  00041	48 8b 4c 24 30	 mov	 rcx, QWORD PTR old$[rsp]
  00046	48 89 01	 mov	 QWORD PTR [rcx], rax

; 101  :         return ((tmp == *old) ? 0 : 1);

  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR old$[rsp]
  0004e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00051	48 39 44 24 10	 cmp	 QWORD PTR tmp$[rsp], rax
  00056	75 09		 jne	 SHORT $LN3@cmpxchg8_x
  00058	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv69[rsp], 0
  0005f	eb 07		 jmp	 SHORT $LN4@cmpxchg8_x
$LN3@cmpxchg8_x:
  00061	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv69[rsp], 1
$LN4@cmpxchg8_x:
  00068	0f b6 04 24	 movzx	 eax, BYTE PTR tv69[rsp]

; 102  :     }

  0006c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00070	c3		 ret	 0
cmpxchg8_x86 ENDP
_TEXT	ENDS
END
